CREATE TABLE quantiles AS SELECT range AS r, RANDOM() FROM RANGE(0, 100) UNION ALL VALUES (NULL, 0.1), (NULL, 0.5), (NULL, 0.9) ORDER BY 2;

CALL dbgen(sf=0.001);

PRAGMA enable_verification;

PRAGMA verify_external;

SELECT QUANTILE_DISC(CAST(0.1 AS DECIMAL(4, 1)), [0.1, 0.5, 0.9]);

SELECT QUANTILE_CONT("l_extendedprice", 0.5 ORDER BY "l_extendedprice") FROM lineitem;

SELECT QUANTILE_CONT("l_extendedprice", 0.5 ORDER BY "l_extendedprice") FROM lineitem;

SELECT QUANTILE_CONT("l_extendedprice", 0.5 ORDER BY "l_extendedprice") FROM lineitem;

SELECT QUANTILE_CONT("l_extendedprice", 0.5 ORDER BY "l_extendedprice") FROM lineitem;

SELECT QUANTILE_CONT("l_extendedprice", 0.5 ORDER BY "l_extendedprice") FROM lineitem;

SELECT QUANTILE_CONT("l_extendedprice", 0.5 ORDER BY "l_extendedprice") FROM lineitem;

SELECT QUANTILE_CONT(NULL, CAST(NULL AS DOUBLE[]));

SET threads = 8;

SET threads = 8;

PRAGMA enable_verification;

CREATE TABLE integers AS SELECT i % 5 AS even_groups, CAST(LOG(1 + i * i) AS INT) AS skewed_groups FROM RANGE(0, 10000) AS t(i);

SELECT ARRAY_SORT(APPROX_TOP_K(even_groups, 10)) FROM integers;

SELECT APPROX_TOP_K(skewed_groups, 5) FROM integers;

SELECT APPROX_TOP_K(CONCAT('this is a long prefix', CAST(skewed_groups AS TEXT)), 5) FROM integers;

SELECT APPROX_TOP_K([skewed_groups], 5) FROM integers;

SELECT APPROX_TOP_K({'i': skewed_groups}, 5) FROM integers;

SELECT APPROX_TOP_K(i, 0) FROM RANGE(0, 5) AS t(i);

SELECT APPROX_TOP_K(i, -1) FROM RANGE(0, 5) AS t(i);

SELECT APPROX_TOP_K(i, 999999999999999) FROM RANGE(0, 5) AS t(i);

SELECT APPROX_TOP_K(i, NULL) FROM RANGE(0, 5) AS t(i);

CREATE TABLE alternating_sequences AS SELECT 0 AS i FROM RANGE(0, 10000) UNION ALL SELECT 1 FROM RANGE(0, 100000) UNION ALL SELECT 2 FROM RANGE(0, 10);

SELECT APPROX_TOP_K(i, 3) FROM alternating_sequences;

CREATE TABLE alternating AS SELECT CASE WHEN i % 3 = 0 THEN 1 ELSE 0 END AS i FROM RANGE(0, 100000) AS t(i);

SELECT APPROX_TOP_K(i, 2) FROM alternating;

CREATE TABLE topk_approx AS SELECT UNNEST(APPROX_TOP_K(i, 100000)) FROM RANGE(0, 50000) AS t(i) ORDER BY 1;

CREATE TABLE topk_exact AS SELECT * FROM RANGE(0, 50000) AS t(i) ORDER BY 1;

SELECT * FROM topk_approx EXCEPT SELECT * FROM topk_exact;

PRAGMA enable_verification;

create table all_types as from test_all_types()
foreach col <all_types_columns>;

SELECT MIN("${col}") IS NOT DISTINCT FROM ARG_MIN("${col}", "${col}") FROM all_types;

SELECT MAX("${col}") IS NOT DISTINCT FROM ARG_MAX("${col}", "${col}") FROM all_types;

PRAGMA enable_verification;

CREATE TABLE t1 (val TEXT, arg INT);

INSERT INTO t1 VALUES ('a', 2), ('a', 1), ('b', 5), ('b', 4), ('a', 3), ('b', 6);

SELECT ARG_MAX(val, arg, 3 ORDER BY val DESC) FROM t1;

SELECT LIST(rs.val) FROM (SELECT val, arg, ROW_NUMBER() OVER (ORDER BY arg DESC) AS rid FROM t1 ORDER BY val) AS rs WHERE rid < 4;

SELECT ARG_MAX(arg, val, 2 ORDER BY arg) FROM t1 GROUP BY val;

CREATE TABLE t2 AS SELECT i % 5 AS even_groups, i FROM RANGE(0, 10000) AS t(i);

SELECT ARG_MAX(even_groups, i, 3) FROM t2;

SELECT ARG_MAX(even_groups, i, 3) FROM t2;

SELECT ARG_MAX(even_groups, i, 3) FROM t2;

SELECT ARG_MAX(even_groups, i, 3) FROM t2;

SELECT ARG_MAX(even_groups, i, 3) FROM t2;

SELECT ARG_MAX(even_groups, i, 3) FROM t2;

SELECT ARG_MAX(even_groups, i, 3) FROM t2;

PRAGMA enable_verification;

create table all_types as from test_all_types()
foreach col bool tinyint smallint int bigint hugeint uhugeint utinyint usmallint uint ubigint date time timestamp timestamp_s timestamp_ms timestamp_ns time_tz timestamp_tz float double dec_4_1 dec_9_4 dec_18_6 dec38_10 uuid interval varchar blob bit small_enum medium_enum large_enum int_array double_array date_array timestamp_array timestamptz_array varchar_array nested_int_array struct struct_of_arrays array_of_structs map union fixed_int_array fixed_varchar_array fixed_nested_int_array fixed_nested_varchar_array fixed_struct_array struct_of_fixed_array fixed_array_of_int_list list_of_fixed_int_array;

SELECT MIN("${col}", 1) IS NOT DISTINCT FROM ARG_MIN("${col}", "${col}", 1) FROM all_types;

SELECT MAX("${col}", 1) IS NOT DISTINCT FROM ARG_MAX("${col}", "${col}", 1) FROM all_types;

SELECT MAX("${col}", 2) IS NOT DISTINCT FROM (SELECT LIST(rs."${col}") FROM (SELECT "${col}", ROW_NUMBER() OVER (ORDER BY "${col}" DESC) AS rid FROM all_types ORDER BY "${col}" DESC) AS rs WHERE rid < 3) FROM all_types;

SELECT MIN("${col}", 2) IS NOT DISTINCT FROM (SELECT LIST(rs."${col}") FROM (SELECT "${col}", ROW_NUMBER() OVER (ORDER BY "${col}" ASC) AS rid FROM all_types ORDER BY "${col}" ASC) AS rs WHERE rid < 3) FROM all_types;

SELECT ARG_MAX("${col}", "${col}", 2) IS NOT DISTINCT FROM (SELECT LIST(rs."${col}") FROM (SELECT "${col}", ROW_NUMBER() OVER (ORDER BY "${col}" DESC) AS rid FROM all_types ORDER BY "${col}" DESC) AS rs WHERE rid < 3) FROM all_types;

SELECT ARG_MIN("${col}", "${col}", 2) IS NOT DISTINCT FROM (SELECT LIST(rs."${col}") FROM (SELECT "${col}", ROW_NUMBER() OVER (ORDER BY "${col}" ASC) AS rid FROM all_types ORDER BY "${col}" ASC) AS rs WHERE rid < 3) FROM all_types;

PRAGMA enable_verification;

CALL dbgen(sf=0.001);

SELECT MIN(l_orderkey, 3) FROM lineitem;

SELECT MAX(l_orderkey, 3) FROM lineitem;

SELECT l_returnflag, MAX(CASE WHEN l_returnflag = 'R' THEN NULL ELSE l_orderkey END, CASE WHEN l_returnflag = 'N' THEN 5 ELSE 3 END) FROM lineitem GROUP BY ALL ORDER BY ALL;

CREATE MACRO compute_top_k(table_name, group_col, val_col, k) AS TABLE
SELECT rs.grp, array_agg(rs.val ORDER BY rid)
FROM (
SELECT group_col AS grp, val_col AS val, row_number() OVER (PARTITION BY group_col ORDER BY val_col DESC) as rid
FROM query_table(table_name::VARCHAR) ORDER BY group_col DESC
) as rs
WHERE rid <= k
GROUP BY ALL
ORDER BY ALL;

SELECT * FROM COMPUTE_TOP_K(lineitem, l_returnflag, l_orderkey, 3);

SELECT l_returnflag, MAX(l_orderkey, 3) FROM lineitem GROUP BY ALL ORDER BY ALL;

CREATE MACRO compute_bottom_k(table_name, group_col, val_col, k) AS TABLE
SELECT rs.grp, array_agg(rs.val ORDER BY rid)
FROM (
SELECT group_col AS grp, val_col AS val, row_number() OVER (PARTITION BY group_col ORDER BY val_col ASC) as rid
FROM query_table(table_name::VARCHAR) ORDER BY group_col ASC
) as rs
WHERE rid <= k
GROUP BY ALL
ORDER BY ALL;

SELECT * FROM COMPUTE_BOTTOM_K(lineitem, l_returnflag, l_orderkey, 3);

PRAGMA enable_verification;

SELECT EQUI_WIDTH_BINS(0, 10, 2, TRUE);

SELECT EQUI_WIDTH_BINS(1000000, 1000010, 2, TRUE);

SELECT EQUI_WIDTH_BINS(99, 101, 2, TRUE);

SELECT EQUI_WIDTH_BINS(9, 11, 2, TRUE);

SELECT EQUI_WIDTH_BINS(10, 11, 2, TRUE);

SELECT EQUI_WIDTH_BINS(0, 5, 10, TRUE);

SELECT EQUI_WIDTH_BINS(0, 10, 5, TRUE);

SELECT EQUI_WIDTH_BINS(-10, 0, 5, TRUE);

SELECT EQUI_WIDTH_BINS(-10, 10, 5, TRUE);

SELECT EQUI_WIDTH_BINS(0, 9, 5, TRUE);

SELECT EQUI_WIDTH_BINS(0, 1734, 10, TRUE);

SELECT EQUI_WIDTH_BINS(0, 1724, 10, TRUE);

SELECT EQUI_WIDTH_BINS(0, 1734, 10, FALSE);

SELECT EQUI_WIDTH_BINS(0, 39343341, 10, TRUE);

SELECT EQUI_WIDTH_BINS(1, 6000000, 7, TRUE);

SELECT EQUI_WIDTH_BINS(1, 6000000, 7, FALSE);

SELECT EQUI_WIDTH_BINS(-9223372036854775808, 9223372036854775807, 5, TRUE);

SELECT EQUI_WIDTH_BINS(-9223372036854775808, 9223372036854775807, 10, TRUE);

SELECT EQUI_WIDTH_BINS(-9223372036854775808, 9223372036854775807, 20, TRUE);

SELECT EQUI_WIDTH_BINS(-9223372036854775808, 9223372036854775807, 30, TRUE);

SELECT EQUI_WIDTH_BINS(0.0, 9.0, 5, TRUE);

SELECT EQUI_WIDTH_BINS(0.0, 9.0, 7, TRUE);

SELECT UNNEST(EQUI_WIDTH_BINS(0.0, 9.0, 7, FALSE));

SELECT EQUI_WIDTH_BINS(0.0, 90.0, 5, TRUE);

SELECT EQUI_WIDTH_BINS(0.0, 1.0, 5, TRUE);

SELECT EQUI_WIDTH_BINS(0.0, 1.0, 5, TRUE);

SELECT EQUI_WIDTH_BINS(-1.0, 0.0, 5, TRUE);

SELECT EQUI_WIDTH_BINS(-1.0, 1.0, 5, TRUE);

SELECT UNNEST(EQUI_WIDTH_BINS(-1e308, 1e308, 5, TRUE));

SELECT EQUI_WIDTH_BINS(0.0, 6.347, 3, TRUE) AS boundaries;

SELECT EQUI_WIDTH_BINS(0.0, 6.347, 7, TRUE) AS boundaries;

SELECT EQUI_WIDTH_BINS(0.0, 6.347, 10, TRUE) AS boundaries;

SELECT EQUI_WIDTH_BINS(0.0, 6.347, 20, TRUE) AS boundaries;

SELECT EQUI_WIDTH_BINS(0.0, 6.347, 30, TRUE) AS boundaries;

SELECT EQUI_WIDTH_BINS(0.0, 3.974, 5, TRUE) AS boundaries;

SELECT EQUI_WIDTH_BINS(0.0, 3.974, 7, TRUE) AS boundaries;

SELECT EQUI_WIDTH_BINS(0.0, 3.974, 10, TRUE) AS boundaries;

SELECT EQUI_WIDTH_BINS(0.0, 3.974, 20, TRUE) AS boundaries;

SELECT EQUI_WIDTH_BINS(0.0, 3.974, 40, TRUE) AS boundaries;

SELECT EQUI_WIDTH_BINS(0, 101, 5, TRUE);

SELECT EQUI_WIDTH_BINS(0, 101.5, 5, TRUE);

SELECT EQUI_WIDTH_BINS(CAST('1992-01-01' AS DATE), CAST('2000-01-01' AS DATE), 2, TRUE);

SELECT EQUI_WIDTH_BINS(CAST('1992-01-01' AS TIMESTAMP), CAST('2000-01-01' AS TIMESTAMP), 2, TRUE);

SELECT EQUI_WIDTH_BINS(CAST('1992-01-01 12:23:37' AS TIMESTAMP), CAST('2000-01-01 04:03:21' AS TIMESTAMP), 2, TRUE);

SELECT EQUI_WIDTH_BINS(CAST('1992-01-01 12:23:37' AS TIMESTAMP), CAST('2000-01-01 04:03:21' AS TIMESTAMP), 5, TRUE);

SELECT EQUI_WIDTH_BINS(CAST('1992-01-01 12:23:37' AS TIMESTAMP), CAST('1992-12-01 04:03:21' AS TIMESTAMP), 4, TRUE);

SELECT EQUI_WIDTH_BINS(CAST('1992-01-01 12:23:37' AS TIMESTAMP), CAST('1992-01-31 04:03:21' AS TIMESTAMP), 4, TRUE);

SELECT EQUI_WIDTH_BINS(CAST('1992-01-01 01:23:37.999' AS TIMESTAMP), CAST('1992-01-01 23:03:21.3' AS TIMESTAMP), 4, TRUE);

SELECT EQUI_WIDTH_BINS(CAST('1992-01-01 01:23:37.999' AS TIMESTAMP), CAST('1992-01-01 01:53:21.3' AS TIMESTAMP), 4, TRUE);

SELECT EQUI_WIDTH_BINS(CAST('1992-01-01 01:23:01.999' AS TIMESTAMP), CAST('1992-01-01 01:23:49.377' AS TIMESTAMP), 4, TRUE);

SELECT EQUI_WIDTH_BINS(CAST('1992-01-01 01:23:01.2' AS TIMESTAMP), CAST('1992-01-01 01:23:01.943' AS TIMESTAMP), 4, TRUE);

SELECT EQUI_WIDTH_BINS(CAST('2024-06-21 15:00:00' AS TIMESTAMP), CAST('2024-06-22 9:00:00' AS TIMESTAMP), 4, TRUE);

SELECT EQUI_WIDTH_BINS(CAST('2024-06-21 15:00:00' AS TIMESTAMP), CAST('2024-07-21 9:00:00' AS TIMESTAMP), 4, TRUE);

SELECT EQUI_WIDTH_BINS(CAST('2024-06-21 15:00:00.123456' AS TIMESTAMP), CAST('2024-06-21 15:00:00.123458' AS TIMESTAMP), 10, TRUE);

SELECT EQUI_WIDTH_BINS(0, 10, 5999, TRUE);

SELECT EQUI_WIDTH_BINS(0, 10, 5999, FALSE);

SELECT EQUI_WIDTH_BINS(-0.0, -1.0, 5, TRUE);

SELECT EQUI_WIDTH_BINS(0.0, CAST('inf' AS DOUBLE), 5, TRUE);

SELECT EQUI_WIDTH_BINS(0.0, CAST('nan' AS DOUBLE), 5, TRUE);

SELECT EQUI_WIDTH_BINS(0.0, 1.0, -1, TRUE);

SELECT EQUI_WIDTH_BINS(0.0, 1.0, 99999999, TRUE);

SELECT EQUI_WIDTH_BINS(CAST('a' AS TEXT), CAST('z' AS TEXT), 2, TRUE);

SET threads = 1;

SET memory_limit = '500mb';

PRAGMA enable_verification;

CREATE TABLE all_types AS SELECT * FROM TEST_ALL_TYPES();

SELECT * FROM all_types LIMIT 1;

SELECT FIRST(COLUMNS(*)) FROM all_types;

SELECT * FROM all_types LIMIT 1 OFFSET 2;

PRAGMA enable_verification;

CREATE TABLE obs (n BIGINT);

INSERT INTO obs VALUES (0), (5), (7), (12), (20), (23), (24), (25), (26), (28), (31), (34), (36), (41), (47);

SELECT HISTOGRAM_EXACT(n, [10, 20, 30, 40, 50]) FROM obs;

SELECT HISTOGRAM_EXACT(CAST(n AS DOUBLE), [10, 20, 30, 40, 50]) FROM obs;

SELECT HISTOGRAM_EXACT(CAST((CAST('2000-01-01' AS DATE) + INTERVAL (n) DAYS) AS DATE), [CAST('2000-01-01' AS DATE) + INTERVAL (x) DAYS FOR x IN [10, 20, 30, 40, 50]]) FROM obs;

SELECT HISTOGRAM_EXACT(CAST(n AS TEXT), [10, 20, 30, 40, 50]) FROM obs;

SELECT HISTOGRAM_EXACT([n], [[x] FOR x IN [10, 20, 30, 40, 50]]) FROM obs;

SELECT CASE WHEN IS_HISTOGRAM_OTHER_BIN(bin) THEN '(other values)' ELSE CAST(bin AS TEXT) END AS bin, count FROM (SELECT UNNEST(MAP_KEYS(hist)) AS bin, UNNEST(MAP_VALUES(hist)) AS count FROM (SELECT HISTOGRAM_EXACT(n, [10, 20, 30, 40, 50]) AS hist FROM obs));

SELECT CASE WHEN IS_HISTOGRAM_OTHER_BIN(bin) THEN '(other values)' ELSE CAST(bin AS TEXT) END AS bin, count FROM (SELECT UNNEST(MAP_KEYS(hist)) AS bin, UNNEST(MAP_VALUES(hist)) AS count FROM (SELECT HISTOGRAM(n, [10, 20, 30, 40]) AS hist FROM obs));

SELECT HISTOGRAM_EXACT(r, [0, 1, 2, 3]) FROM RANGE(0, 4) AS t(r);

SELECT IS_HISTOGRAM_OTHER_BIN(NULL);

SELECT IS_HISTOGRAM_OTHER_BIN([[1]]);

SELECT IS_HISTOGRAM_OTHER_BIN(CAST([] AS INT[][][]));

SELECT IS_HISTOGRAM_OTHER_BIN({'i': CAST(NULL AS INT[][])});

PRAGMA enable_verification;

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (42);

INSERT INTO integers VALUES (84);

SELECT * FROM HISTOGRAM_VALUES(integers, i, bin_count := 2);

SELECT * FROM HISTOGRAM_VALUES(integers, k);

INSERT INTO integers SELECT * FROM RANGE(0, 127);

SELECT * FROM HISTOGRAM_VALUES(integers, i, bin_count => 10, technique => 'equi-width');

SELECT bin, count FROM HISTOGRAM(integers, i, bin_count := 10, technique := 'equi-width');

INSERT INTO integers VALUES (99999999);

SELECT COUNT(*), AVG(count) FROM HISTOGRAM_VALUES(integers, i, technique := 'equi-height');

SELECT * FROM HISTOGRAM_VALUES(integers, i % 2, technique := 'sample');

SELECT * FROM HISTOGRAM_VALUES(integers, CAST((i % 2) AS TEXT));

SELECT * FROM HISTOGRAM_VALUES(integers, CAST((i % 2) AS TEXT), technique := 'equi-width');

SELECT COUNT(*), AVG(count) FROM HISTOGRAM_VALUES(integers, CAST(i AS TEXT), technique := 'equi-height');

SELECT bin, count FROM HISTOGRAM(integers, CAST(i AS TEXT), technique := 'equi-height');

CREATE TABLE booleans (b BOOLEAN);

INSERT INTO booleans SELECT CASE WHEN i % 4 = 0 THEN TRUE ELSE FALSE END FROM RANGE(0, 100) AS t(i);

SELECT * FROM HISTOGRAM_VALUES(booleans, CAST(b AS INT));

SELECT * FROM HISTOGRAM_VALUES(booleans, b);

SELECT * FROM HISTOGRAM_VALUES(integers, [i % 2]);

PRAGMA enable_verification;

create table all_types as from test_all_types()
foreach col <all_types_columns>;

SELECT histogram[min], histogram[max] FROM (SELECT HISTOGRAM("${col}") AS histogram, MIN("${col}") AS min, MAX("${col}") AS max FROM all_types);

SELECT histogram[min], histogram[max] FROM (SELECT HISTOGRAM("${col}", ARRAY((SELECT MIN("${col}") FROM all_types))) AS histogram, MIN("${col}") AS min, MAX("${col}") AS max FROM all_types);

CALL dbgen(sf=1);

SELECT HISTOGRAM(l_orderkey, RANGE(0, 7000000, 1000000)) FROM lineitem;

SELECT HISTOGRAM(l_orderkey // 1000000) FROM lineitem;

SELECT HISTOGRAM(l_shipdate, RANGE((SELECT MIN(l_shipdate) FROM lineitem), (SELECT MAX(l_shipdate) FROM lineitem), INTERVAL '1' YEAR)) FROM lineitem;

SELECT l_returnflag, HISTOGRAM(l_orderkey, RANGE(0, 7000000, 1000000)) FROM lineitem GROUP BY l_returnflag ORDER BY l_returnflag;

SELECT l_returnflag, MAP {'0': CASE WHEN SUM(1) FILTER(WHERE l_orderkey <= 0) IS NULL THEN 0 END, '1000000': SUM(1) FILTER(WHERE l_orderkey > 0 AND l_orderkey <= 1000000), '2000000': SUM(1) FILTER(WHERE l_orderkey > 1000000 AND l_orderkey <= 2000000), '3000000': SUM(1) FILTER(WHERE l_orderkey > 2000000 AND l_orderkey <= 3000000), '4000000': SUM(1) FILTER(WHERE l_orderkey > 3000000 AND l_orderkey <= 4000000), '5000000': SUM(1) FILTER(WHERE l_orderkey > 4000000 AND l_orderkey <= 5000000), '6000000': SUM(1) FILTER(WHERE l_orderkey > 5000000 AND l_orderkey <= 6000000)} FROM lineitem GROUP BY l_returnflag ORDER BY l_returnflag;

SELECT bin, count FROM HISTOGRAM(lineitem, l_extendedprice);

SELECT bin, count FROM HISTOGRAM(lineitem, l_shipdate);

SELECT bin, count FROM HISTOGRAM(lineitem, l_returnflag);

SELECT bin, count FROM HISTOGRAM(lineitem, [l_returnflag]);

SELECT bin, count FROM HISTOGRAM(lineitem, {'i': l_returnflag});

SELECT UNNEST(MAP_KEYS(HISTOGRAM(l_comment))) FROM lineitem;

SELECT DISTINCT l_comment FROM lineitem ORDER BY l_comment;

SELECT ARRAY_SORT(APPROX_TOP_K(l_returnflag, 5)) FROM lineitem;

PRAGMA enable_verification;

CREATE MACRO compute_top_k(table_name, group_col, val_col, k) AS TABLE
SELECT rs.grp, array_agg(rs.val)
FROM (
SELECT group_col AS grp, val_col AS val, row_number() OVER (PARTITION BY group_col ORDER BY val_col DESC) as rid
FROM query_table(table_name::VARCHAR) ORDER BY group_col DESC
) as rs
WHERE rid <= k
GROUP BY ALL
ORDER BY ALL;

create table all_types as from test_all_types()
foreach val_col bool int bigint hugeint date time timestamp float double dec_4_1 uuid interval varchar;

create table all_types as from test_all_types()
foreach val_col bool int bigint hugeint date time timestamp float double dec_4_1 uuid interval varchar;

CREATE OR REPLACE TABLE window_table AS SELECT * FROM COMPUTE_TOP_K(tbl, grp_col, val_col, 2) AS rs(grp, res);

CREATE OR REPLACE TABLE agg_table AS SELECT grp_col AS grp, MAX(val_col, 2) AS res FROM tbl GROUP BY ALL ORDER BY ALL;

SELECT * FROM (SELECT * FROM window_table ORDER BY rowid) EXCEPT SELECT * FROM (SELECT * FROM agg_table ORDER BY rowid);

PRAGMA enable_verification;

create table all_types as from test_all_types()
foreach col <all_types_columns>;

SELECT mode IS NOT DISTINCT FROM min_val FROM (SELECT MODE(v) AS mode, MIN(v) AS min_val FROM (SELECT "${col}" AS v FROM all_types UNION ALL SELECT MIN("${col}") FROM all_types));

SELECT mode IS NOT DISTINCT FROM max_val FROM (SELECT MODE(v) AS mode, MAX(v) AS max_val FROM (SELECT "${col}" AS v FROM all_types UNION ALL SELECT MAX("${col}") FROM all_types));

CALL dbgen(sf=1);

SELECT l_returnflag, MODE(l_comment) FROM lineitem WHERE l_returnflag <> 'N' GROUP BY l_returnflag;

SELECT AVG(STRLEN(padded_mode)) FROM (SELECT MODE(l_comment) OVER (ORDER BY rowid ROWS BETWEEN 5 PRECEDING AND 5 FOLLOWING) AS padded_mode FROM lineitem);

SELECT MODE(l_shipdate), MODE([l_shipdate]), MODE({'i': l_shipdate}) FROM lineitem;

SELECT l_returnflag, MODE(l_shipdate), MODE([l_shipdate]), MODE({'i': l_shipdate}) FROM lineitem GROUP BY l_returnflag ORDER BY l_returnflag;

PRAGMA enable_verification;

create table all_types as from test_all_types()
foreach col <all_types_columns> !date;

SELECT QUANTILE_DISC("${col}", 0.2) IS NOT DISTINCT FROM MIN("${col}"), QUANTILE_DISC("${col}", 0.8) IS NOT DISTINCT FROM MAX("${col}"), QUANTILE_DISC("${col}", [0.8, 0.2]) IS NOT DISTINCT FROM [MAX("${col}"), MIN("${col}")] FROM all_types;

PRAGMA enable_verification;

WITH my_data AS (SELECT CAST('text1' AS TEXT) AS my_column UNION ALL SELECT CAST('text1' AS TEXT) AS my_column UNION ALL SELECT CAST('text1' AS TEXT) AS my_column) SELECT GROUP_CONCAT(my_column, ', ') AS my_string_agg FROM my_data;

WITH my_data AS (SELECT 1 AS dummy, CAST('text1' AS TEXT) AS my_column UNION ALL SELECT 1 AS dummy, CAST('text1' AS TEXT) AS my_column UNION ALL SELECT 1 AS dummy, CAST('text1' AS TEXT) AS my_column) SELECT GROUP_CONCAT(my_column, ', ') AS my_string_agg FROM my_data GROUP BY dummy;

CREATE TABLE strings (s TEXT, g INT);

INSERT INTO strings VALUES ('hello', 0), ('world', 1), (NULL, 0), ('r', 1);

SELECT COUNT(*), COUNT(s), MIN(s), MAX(s) FROM strings;

SELECT COUNT(*), COUNT(s), MIN(s), MAX(s) FROM strings WHERE s IS NULL;

SELECT GROUP_CONCAT(s, ' '), GROUP_CONCAT(s, ''), GROUP_CONCAT('', ''), GROUP_CONCAT('hello', ' ') FROM strings;

SELECT g, COUNT(*), COUNT(s), MIN(s), MAX(s), GROUP_CONCAT(s, ' ') FROM strings GROUP BY g ORDER BY g;

SELECT g, COUNT(*), COUNT(s), MIN(s), MAX(s), GROUP_CONCAT(DISTINCT CAST(g AS TEXT) ORDER BY CAST(g AS TEXT) DESC) FROM strings GROUP BY g ORDER BY g;

SELECT g, COUNT(*), COUNT(s), MIN(s), MAX(s), GROUP_CONCAT(DISTINCT s ORDER BY s ASC) FROM strings GROUP BY g ORDER BY g;

SELECT g, COUNT(*), COUNT(s), MIN(s), MAX(s), GROUP_CONCAT(s, ' ') FROM strings WHERE s IS NULL OR s <> 'hello' GROUP BY g ORDER BY g;

SELECT SUM(s) FROM strings GROUP BY g ORDER BY g;

SELECT AVG(s) FROM strings GROUP BY g ORDER BY g;

CREATE TABLE booleans (b BOOLEAN, g INT);

INSERT INTO booleans VALUES (FALSE, 0), (TRUE, 1), (NULL, 0), (FALSE, 1);

SELECT COUNT(*), COUNT(b), MIN(b), MAX(b) FROM booleans;

SELECT COUNT(*), COUNT(b), MIN(b), MAX(b) FROM booleans WHERE b IS NULL;

SELECT g, COUNT(*), COUNT(b), MIN(b), MAX(b) FROM booleans GROUP BY g ORDER BY g;

SELECT g, COUNT(*), COUNT(b), MIN(b), MAX(b) FROM booleans WHERE b IS NULL OR b = TRUE GROUP BY g ORDER BY g;

SELECT SUM(b) FROM booleans GROUP BY g ORDER BY g;

SELECT AVG(b) FROM booleans GROUP BY g ORDER BY g;

CREATE TABLE integers (i INT, g INT);

INSERT INTO integers VALUES (12, 0), (22, 1), (NULL, 0), (14, 1);

SELECT COUNT(*), COUNT(i), MIN(i), MAX(i), SUM(i) FROM integers;

SELECT COUNT(*), COUNT(i), MIN(i), MAX(i), SUM(i) FROM INTEGERS WHERE i IS NULL;

SELECT g, COUNT(*), COUNT(i), MIN(i), MAX(i), SUM(i) FROM integers GROUP BY g ORDER BY g;

SELECT g, COUNT(*), COUNT(i), MIN(i), MAX(i), SUM(i) FROM integers WHERE i IS NULL OR i > 15 GROUP BY g ORDER BY g;

SELECT COUNT(), COUNT(1), COUNT(*), COUNT(NULL), COUNT('hello'), COUNT(CAST('1992-02-02' AS DATE));

SELECT COUNT(1, 2);

SELECT SUM(1), SUM(NULL), SUM(33.3);

SELECT SUM(TRUE);

SELECT SUM('hello');

SELECT SUM(CAST('1992-02-02' AS DATE));

SELECT SUM(CAST('1992-02-02' AS DATE));

SELECT SUM(CAST('1992-02-02' AS DATE));

SELECT MIN(1), MIN(NULL), MIN(33.3), MIN('hello'), MIN(TRUE), MIN(CAST('1992-02-02' AS DATE)), MIN(CAST('2008-01-01 00:00:01' AS TIMESTAMP));

SELECT MIN(1), MIN(NULL), MIN(33.3), MIN('hello'), MIN(TRUE), MIN(CAST('1992-02-02' AS DATE)), MIN(CAST('2008-01-01 00:00:01' AS TIMESTAMP));

SELECT MIN(1, 2);

SELECT MAX(1), MAX(NULL), MAX(33.3), MAX('hello'), MAX(TRUE), MAX(CAST('1992-02-02' AS DATE)), MAX(CAST('2008-01-01 00:00:01' AS TIMESTAMP));

SELECT MAX(1), MAX(NULL), MAX(33.3), MAX('hello'), MAX(TRUE), MAX(CAST('1992-02-02' AS DATE)), MAX(CAST('2008-01-01 00:00:01' AS TIMESTAMP));

SELECT MAX(1, 2);

SELECT FIRST(1), FIRST(NULL), FIRST(33.3), FIRST('hello'), FIRST(TRUE), FIRST(CAST('1992-02-02' AS DATE)), FIRST(CAST('2008-01-01 00:00:01' AS TIMESTAMP));

SELECT FIRST(1), FIRST(NULL), FIRST(33.3), FIRST('hello'), FIRST(TRUE), FIRST(CAST('1992-02-02' AS DATE)), FIRST(CAST('2008-01-01 00:00:01' AS TIMESTAMP));

SELECT FIRST(1), FIRST(NULL), FIRST(33.3), FIRST('hello'), FIRST(TRUE), FIRST(CAST('1992-02-02' AS DATE)), FIRST(CAST('2008-01-01 00:00:01' AS TIMESTAMP));

SELECT LAST(1), LAST(NULL), LAST(33.3), LAST('hello'), LAST(TRUE), LAST(CAST('1992-02-02' AS DATE)), LAST(CAST('2008-01-01 00:00:01' AS TIMESTAMP));

SELECT LAST(1), LAST(NULL), LAST(33.3), LAST('hello'), LAST(TRUE), LAST(CAST('1992-02-02' AS DATE)), LAST(CAST('2008-01-01 00:00:01' AS TIMESTAMP));

SELECT LAST(1), LAST(NULL), LAST(33.3), LAST('hello'), LAST(TRUE), LAST(CAST('1992-02-02' AS DATE)), LAST(CAST('2008-01-01 00:00:01' AS TIMESTAMP));

SELECT AVG(1), AVG(NULL), AVG(33.3);

SELECT AVG(TRUE);

SELECT AVG('hello');

SELECT AVG(CAST('1992-02-02' AS DATE));

SELECT AVG(CAST('1992-02-02' AS DATE));

SELECT AVG(CAST('1992-02-02' AS DATE));

SELECT GROUP_CONCAT('hello');

SELECT GROUP_CONCAT('hello', ' '), GROUP_CONCAT('hello', NULL), GROUP_CONCAT(NULL, ' '), GROUP_CONCAT(NULL, NULL), GROUP_CONCAT('', '');

SELECT GROUP_CONCAT('hello', ' '), GROUP_CONCAT('hello', NULL), GROUP_CONCAT(NULL, ' '), GROUP_CONCAT(NULL, NULL), GROUP_CONCAT('', '');

SELECT GROUP_CONCAT(1, 2, 3);

CREATE TABLE test_val (val INT);

INSERT INTO test_val VALUES (1), (2), (3), (3), (2);

SELECT GROUP_CONCAT(DISTINCT CAST(val AS TEXT) ORDER BY CAST(val AS TEXT) DESC) FROM test_val;

SELECT COUNT(NULL), GROUP_CONCAT(DISTINCT CAST(val AS TEXT) ORDER BY CAST(val AS TEXT) ASC) FROM test_val;

PRAGMA enable_verification;

CREATE TABLE tbl (i INT);

INSERT INTO tbl VALUES (NULL), (2), (3);

SELECT ANY_VALUE(i) AS a FROM tbl;

SELECT ANY_VALUE(i) AS a FROM tbl;

SELECT ANY_VALUE(i) AS a FROM tbl;

SELECT ANY_VALUE(i) FROM five;

SELECT i % 3 AS g, ANY_VALUE(i) FROM five GROUP BY 1 ORDER BY 1;

SELECT ANY_VALUE(i ORDER BY 5 - i) FROM five;

SELECT i % 3 AS g, ANY_VALUE(i ORDER BY 5 - i) FROM five GROUP BY 1 ORDER BY 1;

SELECT i % 3 AS g, ANY_VALUE(i ORDER BY 5 - i) FROM five GROUP BY 1 ORDER BY 1;

SELECT i % 3 AS g, ANY_VALUE(i ORDER BY 5 - i) FROM five GROUP BY 1 ORDER BY 1;

SELECT ANY_VALUE(i ORDER BY 5 - i) FROM five;

SELECT CAST(i AS INT) % 3 AS g, ANY_VALUE(i ORDER BY 5 - i) FROM five GROUP BY 1 ORDER BY 1;

SELECT CAST(i AS INT) % 3 AS g, ANY_VALUE(i ORDER BY 5 - i) FROM five GROUP BY 1 ORDER BY 1;

CREATE TABLE five_dates AS SELECT 1 AS i, CAST(NULL AS DATE) AS d, CAST(NULL AS TIMESTAMP) AS dt, CAST(NULL AS TIME) AS t, CAST(NULL AS INTERVAL) AS s UNION ALL SELECT CAST(i AS INT) AS i, CAST('2021-08-20' AS DATE) + CAST(i AS INT) AS d, CAST('2021-08-20' AS TIMESTAMP) + INTERVAL (i) HOUR AS dt, CAST('14:59:37' AS TIME) + INTERVAL (i) MINUTE AS t, INTERVAL (i) SECOND AS s FROM RANGE(1, 6, 1) AS t1(i);

SELECT ANY_VALUE(d), ANY_VALUE(dt), ANY_VALUE(t), ANY_VALUE(s) FROM five_dates;

SELECT i % 3 AS g, ANY_VALUE(d), ANY_VALUE(dt), ANY_VALUE(t), ANY_VALUE(s) FROM five_dates GROUP BY 1 ORDER BY 1;

SELECT ANY_VALUE(d ORDER BY 5 - i), ANY_VALUE(dt ORDER BY 5 - i), ANY_VALUE(t ORDER BY 5 - i), ANY_VALUE(s ORDER BY 5 - i) FROM five_dates;

SELECT i % 3 AS g, ANY_VALUE(d ORDER BY 5 - i), ANY_VALUE(dt ORDER BY 5 - i), ANY_VALUE(t ORDER BY 5 - i), ANY_VALUE(s ORDER BY 5 - i) FROM five_dates GROUP BY 1 ORDER BY 1;

SELECT ANY_VALUE(CAST(dt AS TIMESTAMPTZ)), ANY_VALUE(CAST(t AS TIMETZ)) FROM five_dates;

SELECT i % 3 AS g, ANY_VALUE(CAST(dt AS TIMESTAMPTZ)), ANY_VALUE(CAST(t AS TIMETZ)) FROM five_dates GROUP BY 1 ORDER BY 1;

SELECT ANY_VALUE(CAST(dt AS TIMESTAMPTZ) ORDER BY 5 - i), ANY_VALUE(CAST(t AS TIMETZ) ORDER BY 5 - i) FROM five_dates;

SELECT i % 3 AS g, ANY_VALUE(CAST(dt AS TIMESTAMPTZ) ORDER BY 5 - i), ANY_VALUE(CAST(t AS TIMETZ) ORDER BY 5 - i) FROM five_dates GROUP BY 1 ORDER BY 1;

DROP TABLE five_dates;

CREATE TABLE five_complex AS SELECT 1 AS i, CAST(NULL AS TEXT) AS s, CAST(NULL AS BIGINT[]) AS l, NULL AS r UNION ALL SELECT CAST(i AS INT) AS i, CAST(i AS TEXT) AS s, [i] AS l, {'a': i} AS r FROM RANGE(1, 6, 1) AS t1(i);

SELECT ANY_VALUE(s), ANY_VALUE(l), ANY_VALUE(r) FROM five_complex;

SELECT i % 3 AS g, ANY_VALUE(s), ANY_VALUE(l), ANY_VALUE(r) FROM five_complex GROUP BY 1 ORDER BY 1;

SELECT ANY_VALUE(s ORDER BY 5 - i), ANY_VALUE(l ORDER BY 5 - i), ANY_VALUE(r ORDER BY 5 - i) FROM five_complex;

SELECT i % 3 AS g, ANY_VALUE(s ORDER BY 5 - i), ANY_VALUE(l ORDER BY 5 - i), ANY_VALUE(r ORDER BY 5 - i) FROM five_complex GROUP BY 1 ORDER BY 1;

DROP TABLE five_complex;

SELECT ANY_VALUE(i) OVER () AS a FROM GENERATE_SERIES(1, 5) AS t(i);

PRAGMA enable_verification;

CREATE TABLE tbl (a INT, b TEXT);

INSERT INTO tbl VALUES (1, NULL), (2, 'thisisalongstring'), (3, 'thisisalsoalongstring');

SELECT ANY_VALUE(b) FROM tbl;

SELECT ANY_VALUE(b) FROM tbl WHERE a = 2;

SELECT ANY_VALUE(b) FROM tbl WHERE a = 1;

SELECT ANY_VALUE(b) FROM tbl WHERE a = 1 GROUP BY a;

SELECT ANY_VALUE(b) FROM tbl WHERE a = 0;

SELECT ANY_VALUE(b) FROM tbl WHERE a = 0 GROUP BY b;

SELECT a, ANY_VALUE(b) FROM tbl GROUP BY a ORDER BY a;

SELECT ANY_VALUE(i) FROM (VALUES (CAST(NULL AS INT))) AS tbl(i);

PRAGMA enable_verification;

PRAGMA verify_external;

SELECT APPROX_COUNT_DISTINCT(*);

SELECT APPROX_COUNT_DISTINCT(1);

SELECT APPROX_COUNT_DISTINCT(NULL);

SELECT APPROX_COUNT_DISTINCT('hello');

SELECT APPROX_COUNT_DISTINCT(10), APPROX_COUNT_DISTINCT('hello') FROM RANGE(0, 100);

SELECT APPROX_COUNT_DISTINCT(i) FROM RANGE(0, 100) AS tbl(i) WHERE 1 = 0;

CREATE TABLE IF NOT EXISTS dates (t DATE);

INSERT INTO dates VALUES ('2008-01-01'), (NULL), ('2007-01-01'), ('2008-02-01'), ('2008-01-02'), ('2008-01-01'), ('2008-01-01'), ('2008-01-01');

CREATE TABLE IF NOT EXISTS timestamp (t TIMESTAMP);

INSERT INTO timestamp VALUES ('2008-01-01 00:00:01'), (NULL), ('2007-01-01 00:00:01'), ('2008-02-01 00:00:01'), ('2008-01-02 00:00:01'), ('2008-01-01 10:00:00'), ('2008-01-01 00:10:00'), ('2008-01-01 00:00:10');

CREATE TABLE IF NOT EXISTS names (t TEXT);

INSERT INTO names VALUES ('Pedro'), (NULL), ('Pedro'), ('Pedro'), ('Mark'), ('Mark'), ('Mark'), ('Hannes-Muehleisen'), ('Hannes-Muehleisen');

CREATE TABLE t AS SELECT range AS a, range % 10 AS b FROM RANGE(0, 2000);

SELECT COUNT(a), APPROX_COUNT_DISTINCT(a), APPROX_COUNT_DISTINCT(b) FROM t;

SELECT APPROX_COUNT_DISTINCT(a) FROM t GROUP BY a % 2 ORDER BY ALL;

SELECT COUNT(*) FROM t WHERE a < 10;

SELECT APPROX_COUNT_DISTINCT(a) OVER (PARTITION BY a % 2) FROM t WHERE a < 10;

SELECT COUNT(t), APPROX_COUNT_DISTINCT(t) FROM timestamp;

SELECT COUNT(t), APPROX_COUNT_DISTINCT(t) FROM dates;

SELECT COUNT(t), APPROX_COUNT_DISTINCT(t) FROM names;

CREATE TABLE customers (cname TEXT);

INSERT INTO customers VALUES ('Customer#000000001'), ('Customer#000000002'), ('Customer#000000003'), ('Customer#000000004');

SELECT APPROX_COUNT_DISTINCT(cname) FROM customers;

CREATE TABLE issue5259 (c0 INT);

INSERT INTO issue5259 VALUES (1), (2), (3);

PRAGMA enable_verification;

PRAGMA verify_external;

SELECT SETSEED(0.8675309);

CREATE TABLE quantile AS SELECT range AS r, RANDOM() FROM RANGE(0, 10000) UNION ALL VALUES (NULL, 0.1), (NULL, 0.5), (NULL, 0.9) ORDER BY 2;

SELECT return_type, COUNT(*) AS defined FROM DUCKDB_FUNCTIONS() WHERE function_name = 'reservoir_quantile' GROUP BY ALL HAVING defined <> 2 ORDER BY ALL;

SELECT CASE WHEN (approx_quantile BETWEEN (true_quantile - 100) AND (true_quantile + 100)) THEN TRUE ELSE FALSE END FROM (SELECT APPROX_QUANTILE(r, 0.5) AS approx_quantile, QUANTILE(r, 0.5) AS true_quantile FROM quantile) AS T;

SELECT CASE WHEN (approx_quantile BETWEEN (true_quantile - 100) AND (true_quantile + 100)) THEN TRUE ELSE FALSE END FROM (SELECT APPROX_QUANTILE(r, 1.0) AS approx_quantile, QUANTILE(r, 1.0) AS true_quantile FROM quantile) AS T;

SELECT CASE WHEN (approx_quantile BETWEEN (true_quantile - 100) AND (true_quantile + 100)) THEN TRUE ELSE FALSE END FROM (SELECT APPROX_QUANTILE(r, 0.0) AS approx_quantile, QUANTILE(r, 0.0) AS true_quantile FROM quantile) AS T;

SELECT APPROX_QUANTILE(NULL, 0.5) AS approx_quantile, QUANTILE(NULL, 0.5) AS true_quantile;

SELECT CASE WHEN (approx_quantile BETWEEN (true_quantile - 100) AND (true_quantile + 100)) THEN TRUE ELSE FALSE END FROM (SELECT APPROX_QUANTILE(42, 0.5) AS approx_quantile, QUANTILE(42, 0.5) AS true_quantile) AS T;

SELECT APPROX_QUANTILE(NULL, 0.5) AS approx_quantile, QUANTILE(NULL, 0.5) AS true_quantile FROM quantile;

SELECT APPROX_QUANTILE(1, 0.5) AS approx_quantile, QUANTILE(1, 0.5) AS true_quantile FROM quantile;

SELECT CASE WHEN (approx_quantile BETWEEN (true_quantile - 100) AND (true_quantile + 100)) THEN TRUE ELSE FALSE END FROM (SELECT APPROX_QUANTILE(42, 0.5) AS approx_quantile, QUANTILE(42, 0.5) AS true_quantile) AS T;

SELECT CASE WHEN (approx_quantile BETWEEN (true_quantile - 100) AND (true_quantile + 100)) THEN TRUE ELSE FALSE END FROM (SELECT APPROX_QUANTILE(r, 0.1) AS approx_quantile, QUANTILE(r, 0.1) AS true_quantile FROM quantile) AS T;

SELECT CASE WHEN (approx_quantile BETWEEN (true_quantile - 100) AND (true_quantile + 100)) THEN TRUE ELSE FALSE END FROM (SELECT APPROX_QUANTILE(r, 0.9) AS approx_quantile, QUANTILE(r, 0.9) AS true_quantile FROM quantile) AS T;

SELECT APPROX_QUANTILE(CAST('1:02:03.000000+05:30' AS TIMETZ), 0.5);

SELECT [(a[1] BETWEEN (q[1] - 100) AND (q[1] + 100)), (a[2] BETWEEN (q[2] - 100) AND (q[2] + 100)), (a[3] BETWEEN (q[3] - 100) AND (q[3] + 100))] FROM (SELECT APPROX_QUANTILE(r, [0.25, 0.5, 0.75]) AS a, QUANTILE(r, [0.25, 0.5, 0.75]) AS q FROM quantile) AS tbl;

SELECT [(a[1] BETWEEN (q[1] - 100) AND (q[1] + 100)), (a[2] BETWEEN (q[2] - 100) AND (q[2] + 100)), (a[3] BETWEEN (q[3] - 100) AND (q[3] + 100))] FROM (SELECT RESERVOIR_QUANTILE(r, [0.25, 0.5, 0.75], 4096) AS a, QUANTILE(r, [0.25, 0.5, 0.75]) AS q FROM quantile) AS tbl;

SELECT APPROX_QUANTILE(col, [0.5, 0.4, 0.1]) AS percentile FROM (VALUES (0), (1), (2), (10)) AS tab(col);

SELECT APPROX_QUANTILE(col, ARRAY_VALUE(0.5, 0.4, 0.1)) AS percentile FROM (VALUES (0), (1), (2), (10)) AS tab(col);

SELECT APPROX_QUANTILE(r, -0.1) FROM quantile;

SELECT APPROX_QUANTILE(r, 1.1) FROM quantile;

SELECT APPROX_QUANTILE(r, NULL) FROM quantile;

SELECT APPROX_QUANTILE(r, r) FROM quantile;

SELECT APPROX_QUANTILE(CAST(r AS TEXT), 0.5) FROM quantile;

SELECT APPROX_QUANTILE(CAST(r AS TEXT), 0.5) FROM quantile;

SELECT APPROX_QUANTILE(r, 0.1, 0.2) FROM quantile;

SELECT APPROX_QUANTILE(42, CAST(NULL AS INT[]));

PRAGMA threads = 4;

PRAGMA verify_parallelism;

SELECT CASE WHEN (approx_quantile BETWEEN (true_quantile - (sumr * 0.01)) AND (true_quantile + (sumr * 0.01))) THEN TRUE ELSE FALSE END FROM (SELECT APPROX_QUANTILE(r, 0.1) AS approx_quantile, QUANTILE(r, 0.1) AS true_quantile, SUM(r) AS sumr FROM quantile) AS T;

SELECT CASE WHEN (approx_quantile BETWEEN (true_quantile - (sumr * 0.01)) AND (true_quantile + (sumr * 0.01))) THEN TRUE ELSE FALSE END FROM (SELECT APPROX_QUANTILE(r, 0.9) AS approx_quantile, QUANTILE(r, 0.9) AS true_quantile, SUM(r) AS sumr FROM quantile) AS T;

SELECT CASE WHEN (approx_quantile BETWEEN (true_quantile - (sumr * 0.01)) AND (true_quantile + (sumr * 0.01))) THEN TRUE ELSE FALSE END FROM (SELECT APPROX_QUANTILE(r, 0.5) AS approx_quantile, QUANTILE(r, 0.5) AS true_quantile, SUM(r) AS sumr FROM quantile) AS T;

CREATE TABLE repro (i DECIMAL(15, 2));

SELECT APPROX_QUANTILE(i, 0.5) FROM repro;

SELECT APPROX_QUANTILE(i, [0.5]) FROM repro;

PRAGMA disable_verification;

PRAGMA disable_verify_external;

SELECT RESERVOIR_QUANTILE(r, 0.9) FROM quantile;

SELECT RESERVOIR_QUANTILE(r, 0.9, 1000) FROM quantile;

SELECT RESERVOIR_QUANTILE(1, 0.5, 1) FROM quantile;

SELECT RESERVOIR_QUANTILE(b, 0.5) FROM (SELECT 'a' AS a, 1.0 AS b) AS y GROUP BY a;

SELECT APPROX_QUANTILE(b, 0.5) FROM (SELECT 'a' AS a, 1.0 AS b UNION ALL SELECT 'a' AS a, 1.0 AS b UNION ALL SELECT 'b' AS a, 1.0 AS b) AS y GROUP BY a;

SELECT RESERVOIR_QUANTILE(r, r) FROM quantile;

SELECT RESERVOIR_QUANTILE(r, NULL) FROM quantile;

SELECT RESERVOIR_QUANTILE(r, r, r) FROM quantile;

SELECT RESERVOIR_QUANTILE(r, 0.9, NULL) FROM quantile;

SELECT RESERVOIR_QUANTILE(r, 0.9, r) FROM quantile;

SELECT RESERVOIR_QUANTILE(r, CAST(RANDOM() AS REAL)) FROM quantile;

SELECT RESERVOIR_QUANTILE(r, 0.9, CAST(RANDOM() AS REAL)) FROM quantile;

SELECT RESERVOIR_QUANTILE(0., 0.9, 1000);

PRAGMA enable_verification;

PRAGMA verify_external;

PRAGMA verify_external;

SELECT ARG_MIN(NULL, NULL);

SELECT ARG_MIN(1, 1);

SELECT ARG_MIN(1, 1);

SELECT ARG_MIN(i, i) FROM RANGE(0, 100) AS tbl(i);

SELECT ARG_MIN(i, i) FROM RANGE(0, 100) AS tbl(i) WHERE 1 = 0;

SELECT ARG_MIN(i, i) FROM RANGE(0, 100) AS tbl(i) WHERE 1 = 0;

SELECT ARG_MAX(NULL, NULL);

SELECT ARG_MAX(1, 1);

SELECT ARG_MAX(1, 1);

SELECT ARG_MAX(i, i) FROM RANGE(0, 100) AS tbl(i);

SELECT ARG_MAX(i, i) FROM RANGE(0, 100) AS tbl(i) WHERE 1 = 0;

CREATE TABLE args (a INT, b INT);

INSERT INTO args VALUES (1, 1), (2, 2), (8, 8), (10, 10);

SELECT ARG_MIN(a, b), ARG_MAX(a, b) FROM args;

SELECT ARG_MIN(a, b), ARG_MAX(a, b) FROM args GROUP BY a % 2 ORDER BY ARG_MIN(a, b);

CREATE TABLE hugeints (z INT128);

INSERT INTO hugeints VALUES (-168123123123200005565479978461862821890), (-168123123123200005565479978461862821889), (-168123123123200005565479978461862821888), (-168123123123200005565479978461862821893);

SELECT MIN(z) - ARG_MIN(z, z) FROM hugeints;

CREATE TABLE blobs (b BLOB, a BIGINT);

INSERT INTO blobs VALUES ('\xaa\xff\xaa', 5), ('\xAA\xFF\xAA\xAA\xFF\xAA', 30), ('\xAA\xFF\xAA\xAA\xFF\xAA\xAA\xFF\xAA', 20);

SELECT ARG_MIN(b, a), ARG_MAX(b, a) FROM blobs;

SELECT ARG_MIN(a, b), ARG_MAX(a, b) FROM blobs;

SELECT ARG_MIN(a, b) OVER (PARTITION BY a % 2) FROM args;

SELECT ARG_MAX(a, b) OVER (PARTITION BY a % 2) FROM args;

CREATE TABLE names (name TEXT, salary INT);

INSERT INTO names VALUES ('Pedro', 10), ('Hannes', 20), ('Mark', 15), ('Hubert-Blaine-Wolfeschlegelsteinhausenbergerdorff', 30);

SELECT ARG_MIN(name, salary), ARG_MAX(name, salary) FROM names;

SELECT ARG_MIN(salary, name), ARG_MAX(salary, name) FROM names;

SELECT ARG_MIN(name, salary), ARG_MAX(name, salary) FROM names;

SELECT ARG_MIN(name, salary), ARG_MAX(name, salary) FROM names;

CREATE OR REPLACE TABLE employees (employee_id DECIMAL(18, 3), department_id DECIMAL(18, 3), salary DECIMAL(18, 3));

CREATE OR REPLACE TABLE employees (employee_id DECIMAL(18, 3), department_id DECIMAL(18, 3), salary DECIMAL(18, 3));

CREATE OR REPLACE TABLE employees (employee_id DECIMAL(18, 3), department_id DECIMAL(18, 3), salary DECIMAL(18, 3));

SELECT ARG_MAX(employee_id, salary) AS employee_with_biggest_salary FROM employees;

SELECT ARG_MIN(employee_id, salary) AS employee_with_least_salary FROM employees;

SELECT ARG_MAX(c0, c1) FROM (VALUES (1, NULL)) AS t(c0, c1);

PRAGMA enable_verification;

PRAGMA verify_external;

SELECT SETSEED(0.8675309);

CREATE TABLE tbl ("DATE" DATE, "TIMESTAMP" TIMESTAMP, "INTEGER" INT, "BIGINT" BIGINT, "DOUBLE" DOUBLE, "VARCHAR" TEXT);

INSERT INTO tbl SELECT CAST('1992-01-02' AS DATE) + INTERVAL (CAST((RANDOM() * 300) AS INT)) DAYS AS d, CAST('1992-01-02 23:20:11' AS TIMESTAMP) + INTERVAL (CAST((RANDOM() * 300) AS INT)) DAYS + INTERVAL (CAST((RANDOM() * 60 * 60) AS INT)) SECONDS AS ts, 50 + CAST((RANDOM() * 6000) AS INT) AS i, 10 + CAST((RANDOM() * 899999999) AS BIGINT) AS bi, 1 + RANDOM() * 99 AS dbl, CONCAT(CHR(98 + CAST((RANDOM() * 24) AS INT)), CHR(98 + CAST((RANDOM() * 24) AS INT)), CHR(98 + CAST((RANDOM() * 24) AS INT)), CHR(98 + CAST((RANDOM() * 24) AS INT)), REPEAT(CHR(98 + CAST((RANDOM() * 24) AS INT)), 29)) AS str FROM RANGE(0, 10000);

INSERT INTO tbl VALUES (CAST('1992-01-01' AS DATE), CAST('1992-01-01 23:20:11' AS TIMESTAMP), 42, 0, 0.5, 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa');

INSERT INTO tbl VALUES (CAST('1993-01-01' AS DATE), CAST('1993-01-01 23:20:11' AS TIMESTAMP), 8400, 999999999, 100.5, 'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz');

INSERT INTO tbl VALUES (CAST('1993-01-01' AS DATE), CAST('1993-01-01 23:20:11' AS TIMESTAMP), 8400, 999999999, 100.5, 'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz');

INSERT INTO tbl VALUES (CAST('1993-01-01' AS DATE), CAST('1993-01-01 23:20:11' AS TIMESTAMP), 8400, 999999999, 100.5, 'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz');

INSERT INTO tbl VALUES (CAST('1993-01-01' AS DATE), CAST('1993-01-01 23:20:11' AS TIMESTAMP), 8400, 999999999, 100.5, 'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz');

INSERT INTO tbl VALUES (CAST('1993-01-01' AS DATE), CAST('1993-01-01 23:20:11' AS TIMESTAMP), 8400, 999999999, 100.5, 'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz');

SELECT ARG_MIN(["DATE", "DATE" + INTERVAL '1' DAY, NULL, "TIMESTAMP"], "VARCHAR") FROM tbl;

SELECT ARG_MAX(["DATE", "DATE" + INTERVAL '1' DAY, NULL, "TIMESTAMP"], "VARCHAR") FROM tbl;

SELECT ARG_MIN(["DATE", "DATE" + INTERVAL '1' DAY, NULL, "TIMESTAMP"], "DOUBLE") FROM tbl;

SELECT ARG_MAX(["DATE", "DATE" + INTERVAL '1' DAY, NULL, "TIMESTAMP"], "DOUBLE") FROM tbl;

SELECT ARG_MIN({'l': ["DATE", "DATE" + INTERVAL '1' DAY, NULL, "TIMESTAMP"], 'i': "INTEGER", 'b': "BIGINT", 'f': "DOUBLE"}, "VARCHAR") FROM tbl;

SELECT ARG_MAX({'l': ["DATE", "DATE" + INTERVAL '1' DAY, NULL, "TIMESTAMP"], 'i': "INTEGER", 'b': "BIGINT", 'f': "DOUBLE"}, "VARCHAR") FROM tbl;

SELECT ARG_MIN({'l': ["DATE", "DATE" + INTERVAL '1' DAY, NULL, "TIMESTAMP"], 'i': "INTEGER", 'b': "BIGINT", 's': "VARCHAR"}, "DOUBLE") FROM tbl;

SELECT ARG_MAX({'l': ["DATE", "DATE" + INTERVAL '1' DAY, NULL, "TIMESTAMP"], 'i': "INTEGER", 'b': "BIGINT", 's': "VARCHAR"}, "DOUBLE") FROM tbl;

PRAGMA enable_verification;

PRAGMA verify_external;

SELECT ARG_MIN_NULL();

SELECT ARG_MIN_NULL(NULL, NULL);

SELECT ARG_MIN_NULL(1, 1);

SELECT ARG_MIN_NULL(*);

SELECT ARG_MIN_NULL(i, i) FROM RANGE(0, 100) AS tbl(i);

SELECT ARG_MIN_NULL(i, i) FROM RANGE(0, 100) AS tbl(i) WHERE 1 = 0;

SELECT ARG_MAX_NULL();

SELECT ARG_MAX_NULL(NULL, NULL);

SELECT ARG_MAX_NULL(1, 1);

SELECT ARG_MAX_NULL(*);

SELECT ARG_MAX_NULL(i, i) FROM RANGE(0, 100) AS tbl(i);

SELECT ARG_MAX_NULL(i, i) FROM RANGE(0, 100) AS tbl(i) WHERE 1 = 0;

CREATE TABLE args (a INT, b INT);

INSERT INTO args VALUES (1, 1), (2, 2), (8, 8), (10, 10);

SELECT ARG_MIN_NULL(a, b), ARG_MAX_NULL(a, b) FROM args;

SELECT ARG_MIN_NULL(a, b), ARG_MAX_NULL(a, b) FROM args GROUP BY a % 2 ORDER BY ARG_MIN_NULL(a, b);

INSERT INTO args VALUES (NULL, 0), (NULL, 12);

SELECT ARG_MIN_NULL(a, b), ARG_MAX_NULL(a, b) FROM args;

SELECT ARG_MIN_NULL(a, b), ARG_MAX_NULL(a, b) FROM args GROUP BY a % 2 ORDER BY ARG_MIN_NULL(a, b);

CREATE TABLE blobs (b BLOB, a BIGINT);

INSERT INTO blobs VALUES ('\xaa\xff\xaa', 5), ('\xAA\xFF\xAA\xAA\xFF\xAA', 30), ('\xAA\xFF\xAA\xAA\xFF\xAA\xAA\xFF\xAA', 20);

SELECT ARG_MIN_NULL(b, a), ARG_MAX_NULL(b, a) FROM blobs;

SELECT ARG_MIN_NULL(a, b), ARG_MAX_NULL(a, b) FROM blobs;

SELECT ARG_MIN_NULL(a, b) OVER (PARTITION BY a % 2) FROM args;

SELECT ARG_MAX_NULL(a, b) OVER (PARTITION BY a % 2) FROM args;

CREATE TABLE names (name TEXT, salary INT);

INSERT INTO names VALUES ('Pedro', 10), ('Hannes', 20), ('Mark', 15), ('Hubert-Blaine-Wolfeschlegelsteinhausenbergerdorff', 30);

SELECT ARG_MIN_NULL(name, salary), ARG_MAX_NULL(name, salary) FROM names;

SELECT ARG_MIN_NULL(salary, name), ARG_MAX_NULL(salary, name) FROM names;

PRAGMA enable_verification;

PRAGMA verify_external;

SELECT SETSEED(0.8675309);

CREATE TABLE tbl ("DATE" DATE, "TIMESTAMP" TIMESTAMP, "INTEGER" INT, "BIGINT" BIGINT, "DOUBLE" DOUBLE, "VARCHAR" TEXT);

INSERT INTO tbl SELECT CAST('1992-01-02' AS DATE) + INTERVAL (CAST((RANDOM() * 300) AS INT)) DAYS AS d, CAST('1992-01-02 23:20:11' AS TIMESTAMP) + INTERVAL (CAST((RANDOM() * 300) AS INT)) DAYS + INTERVAL (CAST((RANDOM() * 60 * 60) AS INT)) SECONDS AS ts, 50 + CAST((RANDOM() * 6000) AS INT) AS i, 10 + CAST((RANDOM() * 899999999) AS BIGINT) AS bi, 1 + RANDOM() * 99 AS dbl, CONCAT(CHR(98 + CAST((RANDOM() * 24) AS INT)), CHR(98 + CAST((RANDOM() * 24) AS INT)), CHR(98 + CAST((RANDOM() * 24) AS INT)), CHR(98 + CAST((RANDOM() * 24) AS INT)), REPEAT(CHR(98 + CAST((RANDOM() * 24) AS INT)), 29)) AS str FROM RANGE(0, 10000);

INSERT INTO tbl VALUES (CAST('1992-01-01' AS DATE), CAST('1992-01-01 23:20:11' AS TIMESTAMP), 42, 0, 0.5, 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa');

INSERT INTO tbl VALUES (CAST('1993-01-01' AS DATE), CAST('1993-01-01 23:20:11' AS TIMESTAMP), 8400, 999999999, 100.5, 'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz');

INSERT INTO tbl VALUES (CAST('1993-01-01' AS DATE), CAST('1993-01-01 23:20:11' AS TIMESTAMP), 8400, 999999999, 100.5, 'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz');

INSERT INTO tbl VALUES (CAST('1993-01-01' AS DATE), CAST('1993-01-01 23:20:11' AS TIMESTAMP), 8400, 999999999, 100.5, 'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz');

INSERT INTO tbl VALUES (CAST('1993-01-01' AS DATE), CAST('1993-01-01 23:20:11' AS TIMESTAMP), 8400, 999999999, 100.5, 'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz');

INSERT INTO tbl VALUES (CAST('1993-01-01' AS DATE), CAST('1993-01-01 23:20:11' AS TIMESTAMP), 8400, 999999999, 100.5, 'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz');

SELECT ARG_MIN_NULL(["DATE", "DATE" + INTERVAL '1' DAY, NULL, "TIMESTAMP"], "VARCHAR") FROM tbl;

SELECT ARG_MAX_NULL(["DATE", "DATE" + INTERVAL '1' DAY, NULL, "TIMESTAMP"], "VARCHAR") FROM tbl;

SELECT ARG_MIN_NULL(["DATE", "DATE" + INTERVAL '1' DAY, NULL, "TIMESTAMP"], "DOUBLE") FROM tbl;

SELECT ARG_MAX_NULL(["DATE", "DATE" + INTERVAL '1' DAY, NULL, "TIMESTAMP"], "DOUBLE") FROM tbl;

SELECT ARG_MIN_NULL({'l': ["DATE", "DATE" + INTERVAL '1' DAY, NULL, "TIMESTAMP"], 'i': "INTEGER", 'b': "BIGINT", 'f': "DOUBLE"}, "VARCHAR") FROM tbl;

SELECT ARG_MAX_NULL({'l': ["DATE", "DATE" + INTERVAL '1' DAY, NULL, "TIMESTAMP"], 'i': "INTEGER", 'b': "BIGINT", 'f': "DOUBLE"}, "VARCHAR") FROM tbl;

SELECT ARG_MIN_NULL({'l': ["DATE", "DATE" + INTERVAL '1' DAY, NULL, "TIMESTAMP"], 'i': "INTEGER", 'b': "BIGINT", 's': "VARCHAR"}, "DOUBLE") FROM tbl;

SELECT ARG_MAX_NULL({'l': ["DATE", "DATE" + INTERVAL '1' DAY, NULL, "TIMESTAMP"], 'i': "INTEGER", 'b': "BIGINT", 's': "VARCHAR"}, "DOUBLE") FROM tbl;

INSERT INTO tbl VALUES (CAST('1991-01-01' AS DATE), CAST('1991-01-01 23:20:11' AS TIMESTAMP), 41, -1, 0.25, NULL);

INSERT INTO tbl VALUES (CAST('1991-01-01' AS DATE), CAST('1991-01-01 23:20:11' AS TIMESTAMP), 41, -1, 0.25, NULL);

INSERT INTO tbl VALUES (CAST('1991-01-01' AS DATE), CAST('1991-01-01 23:20:11' AS TIMESTAMP), 41, -1, 0.25, NULL);

INSERT INTO tbl VALUES (CAST('1991-01-01' AS DATE), CAST('1991-01-01 23:20:11' AS TIMESTAMP), 41, -1, 0.25, NULL);

INSERT INTO tbl VALUES (CAST('1991-01-01' AS DATE), CAST('1991-01-01 23:20:11' AS TIMESTAMP), 41, -1, 0.25, NULL);

SELECT ARG_MIN_NULL(["DATE", "DATE" + INTERVAL '1' DAY, NULL, "TIMESTAMP"], "VARCHAR") FROM tbl;

SELECT ARG_MAX_NULL(["DATE", "DATE" + INTERVAL '1' DAY, NULL, "TIMESTAMP"], "VARCHAR") FROM tbl;

SELECT ARG_MIN_NULL(["DATE", "DATE" + INTERVAL '1' DAY, NULL, "TIMESTAMP"], "DOUBLE") FROM tbl;

SELECT ARG_MAX_NULL(["DATE", "DATE" + INTERVAL '1' DAY, NULL, "TIMESTAMP"], "DOUBLE") FROM tbl;

SELECT ARG_MIN_NULL({'l': ["DATE", "DATE" + INTERVAL '1' DAY, NULL, "TIMESTAMP"], 'i': "INTEGER", 'b': "BIGINT", 'f': "DOUBLE"}, "VARCHAR") FROM tbl;

SELECT ARG_MAX_NULL({'l': ["DATE", "DATE" + INTERVAL '1' DAY, NULL, "TIMESTAMP"], 'i': "INTEGER", 'b': "BIGINT", 'f': "DOUBLE"}, "VARCHAR") FROM tbl;

SELECT ARG_MIN_NULL({'l': ["DATE", "DATE" + INTERVAL '1' DAY, NULL, "TIMESTAMP"], 'i': "INTEGER", 'b': "BIGINT", 's': "VARCHAR"}, "DOUBLE") FROM tbl;

SELECT ARG_MAX_NULL({'l': ["DATE", "DATE" + INTERVAL '1' DAY, NULL, "TIMESTAMP"], 'i': "INTEGER", 'b': "BIGINT", 's': "VARCHAR"}, "DOUBLE") FROM tbl;

INSERT INTO tbl VALUES (CAST('1994-01-01' AS DATE), CAST('1994-01-01 23:20:11' AS TIMESTAMP), 9400, 9999999999, 101.5, NULL);

INSERT INTO tbl VALUES (CAST('1994-01-01' AS DATE), CAST('1994-01-01 23:20:11' AS TIMESTAMP), 9400, 9999999999, 101.5, NULL);

INSERT INTO tbl VALUES (CAST('1994-01-01' AS DATE), CAST('1994-01-01 23:20:11' AS TIMESTAMP), 9400, 9999999999, 101.5, NULL);

INSERT INTO tbl VALUES (CAST('1994-01-01' AS DATE), CAST('1994-01-01 23:20:11' AS TIMESTAMP), 9400, 9999999999, 101.5, NULL);

INSERT INTO tbl VALUES (CAST('1994-01-01' AS DATE), CAST('1994-01-01 23:20:11' AS TIMESTAMP), 9400, 9999999999, 101.5, NULL);

SELECT ARG_MIN_NULL(["DATE", "DATE" + INTERVAL '1' DAY, NULL, "TIMESTAMP"], "VARCHAR") FROM tbl;

SELECT ARG_MAX_NULL(["DATE", "DATE" + INTERVAL '1' DAY, NULL, "TIMESTAMP"], "VARCHAR") FROM tbl;

SELECT ARG_MIN_NULL(["DATE", "DATE" + INTERVAL '1' DAY, NULL, "TIMESTAMP"], "DOUBLE") FROM tbl;

SELECT ARG_MAX_NULL(["DATE", "DATE" + INTERVAL '1' DAY, NULL, "TIMESTAMP"], "DOUBLE") FROM tbl;

SELECT ARG_MIN_NULL({'l': ["DATE", "DATE" + INTERVAL '1' DAY, NULL, "TIMESTAMP"], 'i': "INTEGER", 'b': "BIGINT", 'f': "DOUBLE"}, "VARCHAR") FROM tbl;

SELECT ARG_MAX_NULL({'l': ["DATE", "DATE" + INTERVAL '1' DAY, NULL, "TIMESTAMP"], 'i': "INTEGER", 'b': "BIGINT", 'f': "DOUBLE"}, "VARCHAR") FROM tbl;

SELECT ARG_MIN_NULL({'l': ["DATE", "DATE" + INTERVAL '1' DAY, NULL, "TIMESTAMP"], 'i': "INTEGER", 'b': "BIGINT", 's': "VARCHAR"}, "DOUBLE") FROM tbl;

SELECT ARG_MAX_NULL({'l': ["DATE", "DATE" + INTERVAL '1' DAY, NULL, "TIMESTAMP"], 'i': "INTEGER", 'b': "BIGINT", 's': "VARCHAR"}, "DOUBLE") FROM tbl;

PRAGMA enable_verification;

PRAGMA verify_external;

CREATE TABLE tbl ("DATE" DATE, "TIMESTAMP" TIMESTAMP, "INTEGER" INT, "BIGINT" BIGINT, "DOUBLE" DOUBLE, "VARCHAR" TEXT);

INSERT INTO tbl SELECT CAST('1992-01-02' AS DATE) + INTERVAL (CAST((RANDOM() * 300) AS INT)) DAYS AS d, CAST('1992-01-02 23:20:11' AS TIMESTAMP) + INTERVAL (CAST((RANDOM() * 300) AS INT)) DAYS + INTERVAL (CAST((RANDOM() * 60 * 60) AS INT)) SECONDS AS ts, 50 + CAST((RANDOM() * 6000) AS INT) AS i, 10 + CAST((RANDOM() * 899999999) AS BIGINT) AS bi, 1 + RANDOM() * 99 AS dbl, CONCAT(CHR(98 + CAST((RANDOM() * 24) AS INT)), CHR(98 + CAST((RANDOM() * 24) AS INT)), CHR(98 + CAST((RANDOM() * 24) AS INT)), CHR(98 + CAST((RANDOM() * 24) AS INT)), REPEAT(CHR(98 + CAST((RANDOM() * 24) AS INT)), 29)) AS str FROM RANGE(0, 10000);

INSERT INTO tbl VALUES (CAST('1992-01-01' AS DATE), CAST('1992-01-01 23:20:11' AS TIMESTAMP), 42, 0, 0.5, 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa');

INSERT INTO tbl VALUES (CAST('1992-01-01' AS DATE), CAST('1992-01-01 23:20:11' AS TIMESTAMP), 42, 0, 0.5, 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa');

SELECT ARG_MIN_NULL("VARCHAR", "${type}") FROM tbl;

SELECT ARG_MIN_NULL("${type}", "VARCHAR") FROM tbl EXCEPT SELECT MIN("${type}") FROM tbl;

SELECT ARG_MAX_NULL("VARCHAR", "${type}") FROM tbl;

SELECT ARG_MAX_NULL("${type}", "VARCHAR") FROM tbl EXCEPT SELECT MAX("${type}") FROM tbl;

SELECT ARG_MAX_NULL("${type}", "VARCHAR") FROM tbl EXCEPT SELECT MAX("${type}") FROM tbl;

SELECT ARG_MIN_NULL("VARCHAR", "${type}") FROM tbl;

SELECT ARG_MAX_NULL("VARCHAR", "${type}") FROM tbl;

SELECT ARG_MAX_NULL("VARCHAR", "${type}") FROM tbl;

SELECT ARG_MIN_NULL("VARCHAR", "${type}") FROM tbl;

SELECT ARG_MAX_NULL("VARCHAR", "${type}") FROM tbl;

PRAGMA enable_verification;

PRAGMA verify_external;

CREATE TABLE tbl ("DATE" DATE, "TIMESTAMP" TIMESTAMP, "INTEGER" INT, "BIGINT" BIGINT, "DOUBLE" DOUBLE, "VARCHAR" TEXT);

INSERT INTO tbl SELECT CAST('1992-01-02' AS DATE) + INTERVAL (CAST((RANDOM() * 300) AS INT)) DAYS AS d, CAST('1992-01-02 23:20:11' AS TIMESTAMP) + INTERVAL (CAST((RANDOM() * 300) AS INT)) DAYS + INTERVAL (CAST((RANDOM() * 60 * 60) AS INT)) SECONDS AS ts, 50 + CAST((RANDOM() * 6000) AS INT) AS i, 10 + CAST((RANDOM() * 899999999) AS BIGINT) AS bi, 1 + RANDOM() * 99 AS dbl, CONCAT(CHR(98 + CAST((RANDOM() * 24) AS INT)), CHR(98 + CAST((RANDOM() * 24) AS INT)), CHR(98 + CAST((RANDOM() * 24) AS INT)), CHR(98 + CAST((RANDOM() * 24) AS INT)), REPEAT(CHR(98 + CAST((RANDOM() * 24) AS INT)), 29)) AS str FROM RANGE(0, 10000);

INSERT INTO tbl VALUES (CAST('1992-01-01' AS DATE), CAST('1992-01-01 23:20:11' AS TIMESTAMP), 42, 0, 0.5, 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa');

INSERT INTO tbl VALUES (CAST('1992-01-01' AS DATE), CAST('1992-01-01 23:20:11' AS TIMESTAMP), 42, 0, 0.5, 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa');

SELECT ARG_MIN("VARCHAR", "${type}") FROM tbl;

SELECT ARG_MIN("${type}", "VARCHAR") FROM tbl EXCEPT SELECT MIN("${type}") FROM tbl;

SELECT ARG_MAX("VARCHAR", "${type}") FROM tbl;

SELECT ARG_MAX("${type}", "VARCHAR") FROM tbl EXCEPT SELECT MAX("${type}") FROM tbl;

SELECT AVG(3), AVG(NULL);

SELECT AVG(CAST(3 AS SMALLINT)), AVG(CAST(NULL AS SMALLINT));

SELECT AVG(CAST(3 AS DOUBLE)), AVG(CAST(NULL AS DOUBLE));

CREATE SEQUENCE seq;

SELECT AVG(NEXTVAL('seq'));

SELECT AVG(NEXTVAL('seq'));

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (1), (2), (3);

SELECT AVG(i), AVG(1), AVG(DISTINCT i), AVG(NULL) FROM integers;

SELECT AVG(i) FROM integers WHERE i > 100;

CREATE TABLE intervals (itvl INTERVAL);

INSERT INTO intervals VALUES ('1 day'), ('30 days'), ('30 days'), ('30 days'), ('30 days');

SELECT AVG(itvl), AVG(DISTINCT itvl) FROM intervals;

CREATE TABLE interval_tbl (f1 INTERVAL);

INSERT INTO interval_tbl (f1) VALUES ('@ 1 minute'), ('@ 5 hour'), ('@ 10 day'), ('@ 34 year'), ('@ 3 months'), ('@ 14 seconds ago'), ('1 day 2 hours 3 minutes 4 seconds'), ('6 years'), ('5 months'), ('5 months 12 hours');

SELECT AVG(f1) FROM interval_tbl;

SELECT AVG(f1) FROM interval_tbl;

SELECT AVG(f1) FROM interval_tbl;

SELECT AVG(AVG(1));

CREATE TABLE vals (i INT, j DOUBLE, k INT128);

INSERT INTO vals VALUES (NULL, NULL, NULL);

SELECT AVG(i), AVG(j), AVG(k) FROM vals;

CREATE OR REPLACE TABLE timestamps AS SELECT range AS ts FROM RANGE(CAST('2024-11-01' AS DATE), CAST('2024-12-01' AS DATE), INTERVAL '1' DAY);

SELECT AVG(CAST(ts AS DATE)) FROM timestamps;

SELECT AVG(ts) FROM timestamps;

SELECT AVG(CAST(ts AS TIMESTAMPTZ)) FROM timestamps;

CREATE OR REPLACE TABLE times AS SELECT range AS ts FROM RANGE(CAST('2024-11-01' AS DATE), CAST('2024-11-02' AS DATE), INTERVAL '7' MINUTES);

SELECT AVG(CAST(ts AS TIME)) FROM times;

CREATE TABLE timetzs (ttz TIMETZ);

INSERT INTO timetzs VALUES (NULL), ('00:00:00+1559'), ('00:00:00+1558'), ('02:30:00'), ('02:30:00+04'), ('02:30:00+04:30'), ('02:30:00+04:30:45'), ('16:15:03.123456'), ('02:30:00+1200'), ('02:30:00-1200'), ('24:00:00-1558'), ('24:00:00-1559');

SELECT AVG(ttz) FROM timetzs;

CREATE TABLE bigints (n INT128);

INSERT INTO bigints (n) VALUES (CAST('9007199254740992' AS INT128)), (CAST(1 AS INT128)), (CAST(0 AS INT128));
require AS longdouble;

SELECT CAST(AVG(n) AS DOUBLE) - CAST('3002399751580331' AS DOUBLE) FROM bigints;

PRAGMA enable_verification;

CREATE TABLE obs (n BIGINT);

INSERT INTO obs VALUES (0), (5), (7), (12), (20), (23), (24), (25), (26), (28), (31), (34), (36), (41), (47);

SELECT HISTOGRAM(n, [10, 20, 30, 40, 50]) FROM obs;

SELECT HISTOGRAM(n, [10, 20, 30, 40]) FROM obs;

SELECT HISTOGRAM(CAST(n AS DOUBLE), [10, 20, 30, 40]) FROM obs;

SELECT HISTOGRAM(n, []) FROM obs;

SELECT HISTOGRAM(n, [10, 40, 50, 30, 20]) FROM obs;

SELECT n % 2 = 0 AS is_even, HISTOGRAM(n, [10, 20, 30, 40, 50]) FROM obs GROUP BY is_even ORDER BY is_even;

SELECT n % 2 = 0 AS is_even, HISTOGRAM(n, CASE WHEN n % 2 = 0 THEN [10, 20, 30, 40, 50] ELSE [11, 21, 31, 41, 51] END) FROM obs GROUP BY is_even ORDER BY is_even;

SELECT HISTOGRAM(n, [10, 20, 30, 40, 50]) FROM obs;

SELECT HISTOGRAM(i, RANGE(999, 10000, 1000)) FROM RANGE(0, 10000) AS t(i);

SELECT HISTOGRAM(v, [-9223372036854775808, -9223372036854775807, 9223372036854775807]) FROM (VALUES (-9223372036854775808), (-9223372036854775807), (0), (9223372036854775807)) AS t(v);

SELECT HISTOGRAM(v, [CAST('-infinity' AS DOUBLE), -10, 0, 10, 'infinity']) FROM (VALUES (-1e308), (-0.5), (0), ('inf'), ('-inf'), (0.5)) AS t(v);

SELECT HISTOGRAM(v, RANGE(CAST('2000-01-01' AS TIMESTAMP), CAST('2005-01-01' AS TIMESTAMP), INTERVAL '1' YEAR)) FROM (VALUES (CAST('2000-01-01' AS TIMESTAMP)), (CAST('2003-01-01' AS TIMESTAMP))) AS t(v);

SELECT HISTOGRAM(v, ['a', 'b', 'c', 'z']) FROM (VALUES ('a'), ('aaaa'), ('b'), ('c'), ('d')) AS t(v);

SELECT HISTOGRAM(CONCAT('thisisalongprefix_', v), ['thisisalongprefix_' || x FOR x IN ['a', 'b', 'c', 'z']]) FROM (VALUES ('a'), ('aaaa'), ('b'), ('c'), ('d')) AS t(v);

SELECT HISTOGRAM({'i': n}, [{'i': x} FOR x IN [10, 20, 30, 40, 50]]) FROM obs;

SELECT HISTOGRAM([n], [[x] FOR x IN [10, 20, 30, 40, 50]]) FROM obs;

SELECT HISTOGRAM(n, [10, 10, 10, 10]) FROM obs;

SELECT HISTOGRAM(n, [10, 20, NULL]) FROM obs;

SELECT HISTOGRAM(n, CAST(NULL AS BIGINT[])) FROM obs;

SELECT BIT_AND(3), BIT_AND(NULL);

CREATE SEQUENCE seq;

SELECT BIT_AND(NEXTVAL('seq'));

SELECT BIT_AND(NEXTVAL('seq'));

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (3), (7), (15), (31), (3), (15);

SELECT BIT_AND(i), BIT_AND(1), BIT_AND(DISTINCT i), BIT_AND(NULL) FROM integers;

SELECT BIT_AND(i) FROM integers WHERE i > 100;

SELECT BIT_AND();

SELECT BIT_AND(1, 2, 3);

SELECT BIT_AND(BIT_AND(1));

CREATE TABLE bits (b BIT);

INSERT INTO bits VALUES ('1110101011'), ('0111010101'), ('0101011101'), ('1111111111'), ('0100010011'), ('1100110011');

SELECT BIT_AND(b) FROM bits;

SELECT BIT_AND(b) FROM bits WHERE GET_BIT(b, 2) = 1;

SELECT BIT_AND(CAST('010110' AS BIT));

SELECT BIT_OR(3), BIT_OR(NULL);

CREATE SEQUENCE seq;

SELECT BIT_OR(NEXTVAL('seq'));

SELECT BIT_OR(NEXTVAL('seq'));

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (3), (7), (15), (31), (3), (15);

SELECT BIT_OR(i), BIT_OR(1), BIT_OR(DISTINCT i), BIT_OR(NULL) FROM integers;

SELECT BIT_OR(i) FROM integers WHERE i > 100;

SELECT BIT_OR();

SELECT BIT_OR(1, 2, 3);

SELECT BIT_OR(BIT_AND(1));

CREATE TABLE bits (b BIT);

INSERT INTO bits VALUES ('1010101001'), ('0011010101'), ('0001011101'), ('1011111101'), ('0000010001'), ('1000110001');

SELECT BIT_OR(b) FROM bits;

SELECT BIT_OR(b) FROM bits WHERE GET_BIT(b, 3) = 0;

SELECT BIT_OR(CAST('111010' AS BIT));

SELECT BIT_XOR(3), BIT_XOR(NULL);

CREATE SEQUENCE seq;

SELECT BIT_XOR(NEXTVAL('seq'));

SELECT BIT_XOR(NEXTVAL('seq'));

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (3), (7), (15), (31), (3), (15);

SELECT BIT_XOR(i), BIT_XOR(1), BIT_XOR(DISTINCT i), BIT_XOR(NULL) FROM integers;

SELECT BIT_XOR(i) FROM integers WHERE i > 100;

SELECT BIT_XOR();

SELECT BIT_XOR(1, 2, 3);

SELECT BIT_XOR(BIT_XOR(1));

CREATE TABLE bits (b BIT);

INSERT INTO bits VALUES ('1010101001'), ('0011010101'), ('0001011101'), ('1011111101'), ('0000010001'), ('1000110001');

SELECT BIT_XOR(b) FROM bits;

SELECT BIT_XOR(b) FROM bits WHERE GET_BIT(b, 3) = 1;

SELECT BIT_XOR(CAST('101011' AS BIT));

SELECT BIT_XOR(CAST('0010101010101010101101011' AS BIT)) FROM bits;

SET default_null_order = 'nulls_first';

SELECT BOOL_OR(0);

SELECT BOOL_AND(0);

SELECT BOOL_OR(NULL);

SELECT BOOL_AND(NULL);

SELECT BOOL_AND(NULL);

SELECT BOOL_AND(NULL);

SELECT BOOL_OR(*);

SELECT BOOL_AND(*);

SELECT BOOL_OR(TRUE) FROM RANGE(0, 100);

SELECT BOOL_AND(TRUE) FROM RANGE(0, 100);

SELECT BOOL_OR(TRUE) FROM RANGE(0, 100) AS tbl(i) WHERE 1 = 0;

SELECT BOOL_AND(TRUE) FROM RANGE(0, 100) AS tbl(i) WHERE 1 = 0;

CREATE TABLE t (d DATE);

INSERT INTO t VALUES (CAST('2021-02-09' AS DATE) - 1), (CAST('2021-02-09' AS DATE) + 1), (NULL);

SELECT BOOL_OR(d > '2021-02-09') AS or_result, BOOL_AND(d > '2021-02-09') AS and_result FROM t;

SELECT d, BOOL_OR(d > '2021-02-09') AS or_result, BOOL_AND(d > '2021-02-09') AS and_result FROM t GROUP BY d ORDER BY d;

SELECT BOOL_OR(d > '2021-02-09') OVER (PARTITION BY d) FROM t ORDER BY d;

SELECT BOOL_AND(d > '2021-02-09') OVER (PARTITION BY d) FROM t ORDER BY d;

PRAGMA enable_verification;

PRAGMA enable_verification;

SELECT CORR(NULL, NULL);

SELECT CORR(1, 1);

SELECT CORR(1, 1);

CREATE TABLE aggr (k INT, v DECIMAL(10, 2), v2 DECIMAL(10, 2));

INSERT INTO aggr VALUES (1, 10, NULL), (2, 10, 11), (2, 20, 22), (2, 25, NULL), (2, 30, 35);

SELECT k, CORR(v, v2) FROM aggr GROUP BY k ORDER BY ALL;

SELECT CORR(v, v2) FROM aggr;

SELECT CORR(v, v2) OVER (PARTITION BY k) FROM aggr;

SELECT CORR(a, b) FROM (VALUES (1e301, 0), (-1e301, 0)) AS tbl(a, b);

SELECT CORR(b, a) FROM (VALUES (1e301, 0), (-1e301, 0)) AS tbl(a, b);

PRAGMA enable_verification;

SELECT COUNT(*), COUNT(1), COUNT(100), COUNT(NULL), COUNT(DISTINCT 1);

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (1), (2), (NULL);

SELECT COUNT(*), COUNT(1), COUNT(i), COUNT(COALESCE(i, 1)), COUNT(DISTINCT i), COUNT(DISTINCT 1) FROM integers;

SELECT COUNT(1 ORDER BY 1);

SELECT COUNT(DISTINCT *) FROM integers;

CREATE TABLE integers (i INT, j INT);

INSERT INTO integers VALUES (3, 4), (3, 4), (2, 4);

SELECT i, COUNT(*) FROM integers GROUP BY i ORDER BY i;

SELECT i, COUNT() FROM integers GROUP BY i ORDER BY i;

CREATE TABLE integers (i INT);

SELECT COUNT(*), COUNT(i), STDDEV_SAMP(i), SUM(i), SUM(DISTINCT i), FIRST(i), LAST(i), MAX(i), MIN(i) FROM integers WHERE i > 100;

CREATE TABLE emptyaggr (i INT);

SELECT COUNT(*) FROM emptyaggr;

SELECT SUM(i), COUNT(i), COUNT(DISTINCT i), COUNT(*), AVG(i), COUNT(*) + 1, COUNT(i) + 1, MIN(i), MIN(i + 1), MIN(i) + 1 FROM emptyaggr;

PRAGMA enable_verification;

PRAGMA verify_external;

SELECT ENTROPY();

SELECT ENTROPY(NULL);

SELECT ENTROPY(1);

SELECT ENTROPY(*);

CREATE TABLE aggr (k INT);

INSERT INTO aggr VALUES (0), (1), (1), (1), (4), (0), (3), (3), (2), (2), (4), (4), (2), (4), (0), (0), (0), (1), (2), (3), (4), (2), (3), (3), (1);

SELECT ENTROPY(k) FROM aggr;

SELECT ENTROPY(2) FROM RANGE(0, 100);

SELECT ENTROPY(k) FROM aggr GROUP BY k % 2 ORDER BY ALL;

CREATE TABLE names (name TEXT);

INSERT INTO names VALUES ('pedro'), ('pedro'), ('pedro'), ('hannes'), ('hannes'), ('mark'), (NULL);

SELECT ENTROPY(name) FROM names;

CREATE TABLE array_names AS SELECT CASE WHEN name IS NULL THEN NULL ELSE [name] END AS l FROM names;

SELECT ENTROPY(l) FROM array_names;

CREATE TABLE array_of_structs AS SELECT CASE WHEN name IS NULL THEN NULL ELSE [{'name': name}] END AS l FROM names;

SELECT ENTROPY(l) FROM array_of_structs;

SELECT ENTROPY(k) OVER (PARTITION BY k % 2) FROM aggr;

SELECT ENTROPY(i) FROM RANGE(0, 100) AS tbl(i) WHERE 1 = 0;

PRAGMA enable_verification;

CREATE TABLE integers (i INT, grp INT);

INSERT INTO integers VALUES (1, NULL), (2, 3), (3, 2), (NULL, 1);

SELECT FIRST(i ORDER BY grp) FROM integers;

SELECT FIRST(i ORDER BY grp NULLS FIRST) FROM integers;

SELECT ANY_VALUE(i ORDER BY grp NULLS FIRST) FROM integers;

SELECT ANY_VALUE(i ORDER BY grp) FROM integers;

SELECT ARG_MIN(i, grp) FROM integers;

SELECT FIRST(i ORDER BY grp DESC) FROM integers;

SELECT ANY_VALUE(i ORDER BY grp DESC NULLS FIRST) FROM integers;

SELECT ANY_VALUE(i ORDER BY grp DESC) FROM integers;

SELECT ARG_MAX(i, grp) FROM integers;

SELECT LAST(i ORDER BY grp NULLS FIRST) FROM integers;

SELECT ARG_MAX(i, grp) FROM integers;

SELECT LAST(i ORDER BY grp DESC NULLS FIRST) FROM integers;

SELECT ARG_MIN(i, grp) FROM integers;

PRAGMA verify_external;

CREATE TABLE tbl (a INT, b TEXT);

INSERT INTO tbl VALUES (1, NULL), (2, 'thisisalongstring'), (3, 'thisisalsoalongstring');

SELECT FIRST(b) FROM tbl WHERE a = 2;

SELECT ARBITRARY(b) FROM tbl WHERE a = 2;

SELECT FIRST(b) FROM tbl WHERE a = 1;

SELECT FIRST(b) FROM tbl WHERE a = 1 GROUP BY a;

SELECT FIRST(b) FROM tbl WHERE a = 0;

SELECT FIRST(b) FROM tbl WHERE a = 0 GROUP BY b;

SELECT a, FIRST(b) FROM tbl GROUP BY a ORDER BY a;

SELECT FIRST(i) FROM (VALUES (CAST(NULL AS INT))) AS tbl(i);

CREATE TABLE integers AS SELECT i, 1 AS j FROM RANGE(0, 10000, 1) AS t1(i) UNION ALL SELECT i, 2 AS j FROM RANGE(0, 10000, 1) AS t1(i);

SELECT SUM(i), SUM(sums) FROM (SELECT i, SUM(j) AS sums FROM integers GROUP BY i) AS tbl1;

SELECT SUM(a0 + a1 + a2 + a3 + a4 + a5 + a6 + a7 + a8 + a9 + a10), SUM(sums) FROM (SELECT i + 0 AS a0, i + 1 AS a1, i + 2 AS a2, i + 3 AS a3, i + 4 AS a4, i + 5 AS a5, i + 6 AS a6, i + 7 AS a7, i + 8 AS a8, i + 9 AS a9, i + 10 AS a10, SUM(j) AS sums FROM integers GROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11) AS s;

CREATE TABLE integer (i INT, j INT);

INSERT INTO integer VALUES (3, 4), (3, 5), (3, 7);

SELECT j * 2 FROM integer GROUP BY j * 2 ORDER BY j * 2;

SELECT integer.j * 2 FROM integer GROUP BY j * 2 ORDER BY j * 2;

SELECT j * 2 FROM integer GROUP BY integer.j * 2 ORDER BY j * 2;

SELECT j * 2 FROM integer GROUP BY j * 2 ORDER BY integer.j * 2;

SELECT integer.j * 2 FROM integer GROUP BY j * 2 ORDER BY integer.j * 2;

SELECT j * 2 FROM integer GROUP BY integer.j * 2 ORDER BY integer.j * 2;

SELECT integer.j * 2 FROM integer GROUP BY integer.j * 2 ORDER BY j * 2;

SELECT integer.j * 2 FROM integer GROUP BY integer.j * 2 ORDER BY integer.j * 2;

SELECT j * 2 AS i FROM integer GROUP BY j * 2 ORDER BY i;

PRAGMA enable_verification;

PRAGMA verify_external;

SELECT HISTOGRAM(NULL);

SELECT HISTOGRAM(i) FROM RANGE(0, 100) AS tbl(i) WHERE 1 = 0;

SELECT HISTOGRAM(1);

SELECT HISTOGRAM('、');

SELECT HISTOGRAM(2) FROM RANGE(0, 100);

CREATE TABLE hist_data (g INT, e INT);

INSERT INTO hist_data VALUES (1, 1), (1, 2), (2, 3), (2, 4), (2, 5), (3, 6), (5, NULL);

SELECT HISTOGRAM(g) FROM hist_data;

SELECT HISTOGRAM(e) FROM hist_data;

SELECT HISTOGRAM(g) FROM hist_data GROUP BY g % 2 = 0 ORDER BY g % 2 = 0;

SELECT HISTOGRAM(g) FROM hist_data WHERE g < 3;

CREATE TABLE names (name TEXT);

INSERT INTO names VALUES ('pedro'), ('pedro'), ('pedro'), ('hannes'), ('hannes'), ('mark'), (NULL), ('Hubert Blaine Wolfeschlegelsteinhausenbergerdorff Sr.');

SELECT HISTOGRAM(name) FROM names;

SELECT HISTOGRAM(CAST('2021-08-20' AS TIMESTAMP_S));

SELECT HISTOGRAM(CAST('2021-08-20' AS TIMESTAMP_MS));

SELECT HISTOGRAM(CAST('2021-08-20' AS TIMESTAMP_NS));

SELECT HISTOGRAM(CAST('15:05:42' AS TIME));

SELECT HISTOGRAM(CAST('15:05:42+00' AS TIMETZ));

SELECT HISTOGRAM(CAST('2022-01-02' AS DATE));

SELECT g, HISTOGRAM(g) OVER (PARTITION BY g % 2) FROM hist_data;

SELECT HISTOGRAM();

SELECT HISTOGRAM(*);

CREATE TYPE mood AS ENUM ('sad', 'ok', 'happy');

CREATE TABLE enums (e mood);

INSERT INTO enums VALUES ('happy'), ('ok');

SELECT HISTOGRAM(e) FROM enums;

PRAGMA enable_verification;

CREATE TABLE tmp (c0 INT, c1 INT);

INSERT INTO tmp VALUES (0, 0), (1, 1), (2, 0), (0, 1), (1, 0), (2, 1), (0, 0), (1, 1), (2, 0), (0, 1);

SELECT c0, HISTOGRAM(c1) FROM tmp GROUP BY c0 ORDER BY ALL;

SELECT COUNT(1, 2, 3);

SELECT COUNT(COUNT(1));

SELECT COUNT(COUNT(1));

SELECT COUNT(COUNT(1));

SELECT STDDEV_SAMP(STDDEV_SAMP(1));

SELECT STDDEV_SAMP(STDDEV_SAMP(1));

SELECT STDDEV_SAMP(STDDEV_SAMP(1));

SELECT SUM(SUM(1));

SELECT SUM(SUM(1));

SELECT SUM(SUM(1));

SELECT FIRST(FIRST(1));

SELECT FIRST(FIRST(1));

SELECT MAX(1, 2, 3);

SELECT MAX(MAX(1));

SELECT MAX(MAX(1));

SELECT MIN(1, 2, 3);

SELECT MIN(MIN(1));

CREATE TABLE doubles (n DOUBLE);

INSERT INTO doubles (n) VALUES (CAST('9007199254740992' AS DOUBLE)), (CAST(1 AS DOUBLE)), (CAST(1 AS DOUBLE)), (CAST(0 AS DOUBLE));

SELECT FAVG(n) - CAST('2251799813685248.5' AS DOUBLE) FROM doubles;

CREATE TABLE doubles (n DOUBLE);

INSERT INTO doubles (n) VALUES (CAST('9007199254740992' AS DOUBLE)), (CAST(1 AS DOUBLE)), (CAST(1 AS DOUBLE)), (CAST(0 AS DOUBLE));

SELECT CAST(FSUM(n) AS BIGINT) FROM doubles;

SELECT CAST(SUMKAHAN(n) AS BIGINT) FROM doubles;

SELECT CAST(KAHAN_SUM(n) AS BIGINT) FROM doubles;

PRAGMA enable_verification;

SELECT KURTOSIS();

SELECT KURTOSIS(NULL);

SELECT KURTOSIS(1);

SELECT KURTOSIS(*);

SELECT KURTOSIS(i) FROM (VALUES (0), (0), (0), (0), (0), (0)) AS tbl(i);

SELECT KURTOSIS(i) FROM (VALUES (2e304), (2e305), (2e306), (2e307)) AS tbl(i);

SELECT KURTOSIS(10) FROM RANGE(0, 5);

SELECT KURTOSIS(10) FROM RANGE(0, 5) WHERE 1 = 0;

CREATE TABLE aggr (k INT, v INT, v2 INT);

INSERT INTO aggr VALUES (1, 10, NULL), (2, 10, 11), (2, 10, 15), (2, 10, 18), (2, 20, 22), (2, 20, 25), (2, 25, NULL), (2, 30, 35), (2, 30, 40), (2, 30, 50), (2, 30, 51);

SELECT KURTOSIS(k), KURTOSIS(v), KURTOSIS(v2) FROM aggr;

SELECT KURTOSIS_POP(k), KURTOSIS_POP(v), KURTOSIS_POP(v2) FROM aggr;

WITH onetwo AS (SELECT CAST(range AS REAL) AS v FROM RANGE(1, 3)) SELECT KURTOSIS_POP(v) FROM onetwo;

SELECT KURTOSIS(v2) FROM aggr GROUP BY v ORDER BY ALL;

SELECT KURTOSIS(v2) OVER (PARTITION BY v) FROM aggr;

PRAGMA enable_verification;

CREATE TABLE tbl (a INT, b TEXT);

INSERT INTO tbl VALUES (1, NULL), (2, 'thisisalongstring'), (3, 'thisisalsoalongstring');

SELECT LAST(b) FROM tbl WHERE a = 2;

SELECT LAST(b) FROM tbl WHERE a = 1;

SELECT LAST(b) FROM tbl WHERE a = 1 GROUP BY a;

SELECT LAST(b) FROM tbl WHERE a = 0;

SELECT LAST(b) FROM tbl WHERE a = 0 GROUP BY b;

SELECT a, LAST(b) FROM tbl GROUP BY a ORDER BY a;

SELECT LAST(i) FROM (VALUES (CAST(NULL AS INT))) AS tbl(i);

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

PRAGMA threads = 1;

CREATE TABLE list_extract_test (i INT, g INT);

INSERT INTO list_extract_test VALUES (1, 1), (2, 1), (3, 2), (NULL, 3), (42, 3);

SELECT g, LIST_EXTRACT(LIST(i), 1) FROM list_extract_test GROUP BY g ORDER BY ALL;

SELECT g, LIST_EXTRACT(LIST(i), 2) FROM list_extract_test GROUP BY g ORDER BY ALL;

SELECT g, LIST_EXTRACT(LIST(i), 3) FROM list_extract_test GROUP BY g ORDER BY ALL;

PRAGMA threads = 4;

WITH t AS (SELECT * FROM (VALUES ('a', 1), ('c', 3), ('b', 2)) AS _values) SELECT LIST(col0 ORDER BY col1) FROM t;

SELECT g, LIST(i ORDER BY i ASC) FROM list_extract_test GROUP BY g ORDER BY ALL;

SELECT g, LIST(i ORDER BY i ASC NULLS FIRST) FROM list_extract_test GROUP BY g ORDER BY ALL;

SELECT g, LIST(i ORDER BY i ASC) FROM list_extract_test GROUP BY g ORDER BY ALL;

SELECT g, LIST(i ORDER BY i DESC) FROM list_extract_test GROUP BY g ORDER BY ALL;

SELECT g, LIST(i ORDER BY i DESC NULLS FIRST) FROM list_extract_test GROUP BY g ORDER BY ALL;

SELECT g, LIST(i ORDER BY i DESC) FROM list_extract_test GROUP BY g ORDER BY ALL;

SELECT g, LIST(i ORDER BY i ASC) FILTER(WHERE i <> 3) FROM list_extract_test GROUP BY g ORDER BY ALL;

SELECT g, LIST(i ORDER BY i ASC) FILTER(WHERE i IS NULL) FROM list_extract_test GROUP BY g ORDER BY ALL;

SELECT g, LIST(i ORDER BY i ASC) FILTER(WHERE i = 1337) FROM list_extract_test GROUP BY g ORDER BY ALL;

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

SELECT LIST(i) FROM test GROUP BY g ORDER BY g;

INSERT INTO test VALUES (1, 2), (1, 3), (2, 4);

SELECT LIST(i) FROM test GROUP BY g ORDER BY g;

SELECT LIST(i) FROM test GROUP BY g ORDER BY g;

SELECT LIST(i) FROM test GROUP BY g ORDER BY g;

INSERT INTO test VALUES (1, 2), (1, 3), (2, 4);

SELECT LIST(i) FROM test GROUP BY g ORDER BY g;

SELECT LIST(i) FROM test GROUP BY g ORDER BY g;

CREATE TABLE varch (g INT, str TEXT);

INSERT INTO varch VALUES (1, 'hello'), (1, 'was'), (2, 'geht');

SELECT LIST(str) FROM varch GROUP BY g ORDER BY g;

CREATE TABLE nested_lists (g INT, i INT[]);

INSERT INTO nested_lists VALUES (1, [2]), (1, [3]), (2, [4]);

SELECT LIST(i) FROM nested_lists GROUP BY g ORDER BY g;

CREATE TABLE bigger_lists AS SELECT range % 4 AS g, range AS i FROM RANGE(0, 100000);

SELECT LIST_COUNT(LIST(i)) FROM bigger_lists GROUP BY g ORDER BY g;

CREATE TABLE lists AS SELECT range % 10000 AS g, range AS i FROM RANGE(0, 100000);

SELECT LIST_COUNT(LIST(i)) FROM lists GROUP BY g ORDER BY g LIMIT 2;

CREATE TABLE structs AS SELECT 1 AS g, {'x': 3, 'b': 2} AS s;

INSERT INTO structs VALUES (1, {'x': 5, 'b': 4}), (2, {'x': 50, 'b': 40});

SELECT LIST(s) FROM structs GROUP BY g ORDER BY g;

CREATE TABLE structs_list_strings AS SELECT 1 AS g, {'a': ['strr', 'strrr']} AS s;

INSERT INTO structs_list_strings VALUES (1, {'a': ['str1', 'str2']}), (1, {'a': ['str3', 'str4']}), (2, {'a': ['str1', 'str2']});

SELECT LIST(s) FROM structs_list_strings GROUP BY g ORDER BY g;

CREATE TABLE structs_ints AS SELECT 1 AS g, {'a': [1, 2]} AS s;

INSERT INTO structs_ints VALUES (1, {'a': [3, 4]}), (1, {'a': [5, 6]}), (2, {'a': [1, 2]});

SELECT LIST(s) FROM structs_ints GROUP BY g ORDER BY g;

CREATE TABLE structs_strings AS SELECT 1 AS g, {'n': 'nm1588970'} AS s;

INSERT INTO structs_strings VALUES (1, {'n': 'nm0005690'});

SELECT LIST(s) FROM structs_strings GROUP BY g ORDER BY g;

SELECT LIST(s) FROM structs_strings GROUP BY g ORDER BY g;

CREATE TABLE t1 AS SELECT ${type} AS c1 FROM test_all_types();

CREATE TABLE t1 AS SELECT ${type} AS c1 FROM test_all_types();

SELECT * FROM t1 EXCEPT SELECT * FROM t2;

SELECT * FROM t2 EXCEPT SELECT * FROM t1;

SELECT t1.c1 IS NOT DISTINCT FROM t2.c2 FROM t1, t2 WHERE t1.rowid = t2.rowid;

DROP TABLE t1;

DROP TABLE t2;
endloop;

CREATE TABLE long_str AS SELECT range % 4 AS g, REPEAT(CAST(range AS TEXT), 10000) AS i FROM RANGE(0, 10);

SELECT g, LIST_COUNT(LIST(i)) FROM long_str GROUP BY g ORDER BY g;

SELECT LIST(i) OVER (PARTITION BY i % 10 ORDER BY i) FROM RANGE(0, 10000) AS t(i);

CREATE TABLE list_extract_test (i INT, g INT);

INSERT INTO list_extract_test VALUES (1, 1), (2, 1), (3, 2), (NULL, 3), (42, 3);

SELECT g, LIST(i ORDER BY i ASC) FILTER(WHERE i <> 3) FROM list_extract_test GROUP BY g ORDER BY ALL;

PRAGMA enable_verification;

SELECT MAD(NULL), MAD(1);

SELECT MAD(NULL), MAD(1) FROM RANGE(0, 2000);

SELECT MAD(NULL), MAD(1) FROM RANGE(0, 2000);

SELECT MAD(NULL), MAD(1) FROM RANGE(0, 2000);

SELECT MAD(NULL), MAD(1) FROM RANGE(0, 2000);

SELECT MAD(NULL), MAD(1) FROM RANGE(0, 2000);

SELECT MAD(NULL), MAD(1) FROM RANGE(0, 2000);

SELECT MAD(NULL), MAD(1) FROM RANGE(0, 2000);

SELECT MAD(NULL), MAD(1) FROM RANGE(0, 2000);

SELECT MAD(NULL), MAD(1) FROM RANGE(0, 2000);

SELECT MAD(CAST((CAST('2018-01-01' AS DATE) + INTERVAL (r) DAY) AS DATE)) FROM numerics;

SELECT MAD(CAST('2018-01-01' AS TIMESTAMP) + INTERVAL (r) HOUR) FROM numerics;

SELECT MAD(CAST('00:00:00' AS TIME) + INTERVAL (r) SECOND) FROM numerics;

SELECT MAD(x) FROM (VALUES (CAST('127' AS DECIMAL(3, 0))), (CAST('-128' AS DECIMAL(3, 0)))) AS tbl(x);

SELECT MAD(x) FROM (VALUES (CAST('32767' AS DECIMAL(5, 0))), (CAST('-32768' AS DECIMAL(5, 0)))) AS tbl(x);

SELECT MAD(x) FROM (VALUES (CAST('2147483647' AS DECIMAL(10, 0))), (CAST('-2147483648' AS DECIMAL(10, 0)))) AS tbl(x);

SELECT MAD(x) FROM (VALUES (-1e308), (1e308)) AS tbl(x);

SELECT MAD(x) FROM (VALUES (CAST('294247-01-10' AS DATE)), (CAST('290309-12-22 (BC)' AS DATE))) AS tbl(x);

SELECT MAD(x) FROM (VALUES (CAST('294247-01-10 04:00:54.775806' AS TIMESTAMP)), (CAST('290309-12-22 (BC) 00:00:00' AS TIMESTAMP))) AS tbl(x);

SELECT MAD(x) FROM (VALUES (CAST('23:59:59.999999' AS TIME)), (CAST('00:00:00' AS TIME))) AS tbl(x);

PRAGMA enable_verification;

PRAGMA verify_external;

SELECT MEDIAN(NULL), MEDIAN(1);

SELECT MEDIAN(NULL), MEDIAN(1) FROM RANGE(0, 2000);

CREATE TABLE quantile AS SELECT range AS r, RANDOM() FROM RANGE(0, 10000) UNION ALL VALUES (NULL, 0.1), (NULL, 0.5), (NULL, 0.9) ORDER BY 2;

SELECT CAST(MEDIAN(r) AS TEXT) FROM quantile;

SELECT CAST(MEDIAN(CAST(r AS REAL)) AS TEXT) FROM quantile;

SELECT CAST(MEDIAN(CAST(r AS DOUBLE)) AS TEXT) FROM quantile;

SELECT CAST(MEDIAN(CAST(r AS TINYINT)) AS TEXT) FROM quantile WHERE r < 100;

SELECT CAST(MEDIAN(CAST(r AS SMALLINT)) AS TEXT) FROM quantile;

SELECT CAST(MEDIAN(CAST(r AS INT)) AS TEXT) FROM quantile;

SELECT CAST(MEDIAN(CAST(r AS BIGINT)) AS TEXT) FROM quantile;

SELECT CAST(MEDIAN(CAST(r AS INT128)) AS TEXT) FROM quantile;

SELECT CAST(MEDIAN(CAST(r AS DECIMAL(10, 2))) AS TEXT) FROM quantile;

SELECT CAST(MEDIAN(CASE WHEN r IS NULL THEN NULL ELSE [r] END) AS TEXT) FROM quantile;

SELECT CAST(MEDIAN(CASE WHEN r IS NULL THEN NULL ELSE {'i': r} END) AS TEXT) FROM quantile;

SELECT MEDIAN(CAST(r AS TEXT)) FROM quantile;

SELECT MEDIAN(CASE WHEN r IS NULL THEN NULL ELSE CONCAT('thishasalongprefix_', CAST(r AS TEXT)) END) FROM quantile;

SELECT MEDIAN(NULL) FROM quantile;

SELECT MEDIAN(42) FROM quantile;

SELECT MEDIAN(42) FROM quantile;

SELECT MEDIAN(42) FROM quantile;

SELECT MEDIAN(CAST(range AS TIMESTAMPTZ)) FROM RANGE(CAST('2024-01-01' AS DATE), CAST('2024-01-11' AS DATE), INTERVAL '1' DAY);

SELECT MEDIAN(CAST('00:00:00' AS TIME) + INTERVAL (range) HOUR) FROM RANGE(0, 10);

SELECT MEDIAN(CAST(ttz AS TIMETZ)) FROM (VALUES ('00:00:00-09'), ('00:00:00-08'), ('00:00:00-07'), ('00:00:00-06'), ('00:00:00-05'), ('00:00:00-04'), ('00:00:00-03'), ('00:00:00-02'), ('00:00:00-01'), ('00:00:00+00')) AS tbl(ttz);

SELECT MEDIAN(CAST(ttz AS TIMETZ)) FROM (VALUES ('00:00:00-09'), ('00:00:00-08'), ('00:00:00-07'), ('00:00:00-06'), ('00:00:00-05'), ('00:00:00-04'), ('00:00:00-03'), ('00:00:00-02'), ('00:00:00-01'), ('00:00:00+00')) AS tbl(ttz);

PRAGMA enable_verification;

PRAGMA verify_external;

CREATE TABLE lists AS SELECT [i] AS l FROM GENERATE_SERIES(0, 5, 1) AS tbl(i);

SELECT MIN(l) FROM lists WHERE l[1] > 2;

SELECT MIN(l) FROM lists WHERE l[0] > 2;

PRAGMA enable_verification;

DESCRIBE SELECT MAX(l) FROM (SELECT UNNEST([CAST({'a': 1} AS JSON), CAST([2] AS JSON)]) AS l);

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

PRAGMA verify_external;

SELECT MODE();

SELECT MODE(NULL);

SELECT MODE(1);

SELECT MODE(*);

CREATE TABLE aggr (k INT, v DECIMAL(10, 2));

INSERT INTO aggr (k, v) VALUES (1, 10), (1, 10), (1, 20), (1, 21);

SELECT MODE(v) FROM aggr;

SELECT MODE(2) FROM RANGE(0, 100);

INSERT INTO aggr (k, v) VALUES (2, 20), (2, 20), (2, 25), (2, 30);

SELECT CASE WHEN (value = 10 OR value = 20) THEN TRUE ELSE FALSE END FROM (SELECT MODE(v) AS value FROM aggr) AS T;

INSERT INTO aggr (k, v) VALUES (3, NULL);

SELECT k, MODE(v) FROM aggr GROUP BY k ORDER BY k;

CREATE TABLE names (name TEXT);

INSERT INTO names VALUES ('pedro'), ('pedro'), ('pedro'), ('hannes'), ('hannes'), ('mark'), (NULL);

SELECT MODE(name) FROM names;

SELECT k, v, MODE(v) OVER (PARTITION BY k) FROM aggr ORDER BY k, v;

SELECT MODE(i) FROM RANGE(0, 100) AS tbl(i) WHERE 1 = 0;

CREATE TABLE dates (k INT, v DATE);

INSERT INTO dates VALUES (1, '2021-05-02'), (1, '2021-05-02'), (2, '2021-05-02'), (2, '2020-02-29'), (2, '2020-02-29'), (3, '2004-09-01'), (1, NULL);

SELECT MODE(v) FROM dates;

SELECT k, MODE(v) FROM dates GROUP BY k ORDER BY ALL;

SELECT k, v, MODE(v) OVER (PARTITION BY k) FROM dates ORDER BY k, v;

CREATE TABLE times (k INT, v TIME);

INSERT INTO times VALUES (1, '12:11:49.5'), (1, '12:11:49.5'), (2, '12:11:49.5'), (2, '06:30:00'), (2, '06:30:00'), (3, '21:15:22'), (1, NULL);

SELECT MODE(v) FROM times;

SELECT k, MODE(v) FROM times GROUP BY k ORDER BY ALL;

SELECT k, v, MODE(v) OVER (PARTITION BY k) FROM times ORDER BY k, v;

CREATE TABLE timestamps (k INT, v TIMESTAMP);

INSERT INTO timestamps VALUES (1, '2021-05-02 12:11:49.5'), (1, '2021-05-02 12:11:49.5'), (2, '2021-05-02 12:11:49.5'), (2, '2020-02-29 06:30:00'), (2, '2020-02-29 06:30:00'), (3, '2004-09-01 21:15:22'), (1, NULL);

SELECT MODE(v) FROM timestamps;

SELECT k, MODE(v) FROM timestamps GROUP BY k ORDER BY ALL;

SELECT k, v, MODE(v) OVER (PARTITION BY k) FROM timestamps ORDER BY k, v;

CREATE TABLE intervals (k INT, v INTERVAL);

INSERT INTO intervals VALUES (1, INTERVAL '5 months 2 days 12 hours 11 minutes 49 seconds'), (1, INTERVAL '5 months 2 days 12 hours 11 minutes 49 seconds'), (2, INTERVAL '5 months 2 days 12 hours 11 minutes 49 seconds'), (2, INTERVAL '2 months 29 days 6 hours 30 minutes'), (2, INTERVAL '2 months 29 days 6 hours 30 minutes'), (3, INTERVAL '9 months 1 day 21 hours 15 minutes 22 seconds'), (1, NULL);

SELECT MODE(v) FROM intervals;

SELECT k, MODE(v) FROM intervals GROUP BY k ORDER BY ALL;

SELECT k, v, MODE(v) OVER (PARTITION BY k) FROM intervals ORDER BY k, v;

CREATE TABLE hugeints (k INT, v INT128);

INSERT INTO hugeints VALUES (1, 5), (1, 5), (2, 5), (2, 2), (2, 2), (3, 1), (1, NULL);

SELECT MODE(v) FROM hugeints;

SELECT k, MODE(v) FROM hugeints GROUP BY k ORDER BY ALL;

SELECT k, v, MODE(v) OVER (PARTITION BY k) FROM hugeints ORDER BY k, v;

SELECT MODE(order_occurrences ORDER BY order_occurrences DESC) FROM (VALUES (500, 1), (1000, 2), (800, 3), (1000, 4), (500, 5), (550, 6), (400, 7), (200, 8), (10, 9)) AS items_per_order(order_occurrences, item_count);

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

CREATE TABLE t1 (c0 BIGINT, c1 SMALLINT);

INSERT INTO t1 VALUES (NULL, NULL);

INSERT INTO t1 VALUES (NULL, NULL);

INSERT INTO t1 VALUES (NULL, NULL);

INSERT INTO t1 VALUES (NULL, NULL);

INSERT INTO t1 VALUES (NULL, NULL);

INSERT INTO t1 VALUES (NULL, NULL);

INSERT INTO t1 VALUES (NULL, NULL);

INSERT INTO t1 VALUES (NULL, NULL);

INSERT INTO t1 VALUES (-9121942514766415310, NULL);

INSERT INTO t1 VALUES (-9113483941634330359, NULL);

INSERT INTO t1 VALUES (-8718457747090493475, NULL);

INSERT INTO t1 VALUES (-7650527153348320600, NULL);

INSERT INTO t1 VALUES (-7511073704802549520, NULL);

INSERT INTO t1 VALUES (-7342137292157212364, NULL);

INSERT INTO t1 VALUES (-7003121677824953185, NULL);

INSERT INTO t1 VALUES (-6971852266038069200, NULL);

INSERT INTO t1 VALUES (-6873545755554765972, NULL);

INSERT INTO t1 VALUES (-6355311124878824053, NULL);

INSERT INTO t1 VALUES (-6350463272352412486, NULL);

INSERT INTO t1 VALUES (-5908442705000090253, NULL);

INSERT INTO t1 VALUES (-5897662788702027960, NULL);

INSERT INTO t1 VALUES (-5877879044803815845, NULL);

INSERT INTO t1 VALUES (-5732980609151508408, NULL);

INSERT INTO t1 VALUES (-5361272612100082873, NULL);

INSERT INTO t1 VALUES (-5336571579832669145, NULL);

INSERT INTO t1 VALUES (-4928993529687100359, NULL);

INSERT INTO t1 VALUES (-4468905900574568755, NULL);

INSERT INTO t1 VALUES (-4170492860397664351, NULL);

INSERT INTO t1 VALUES (-3684174996218175685, NULL);

INSERT INTO t1 VALUES (-3550425917959859111, NULL);

INSERT INTO t1 VALUES (-3538537641982313134, NULL);

INSERT INTO t1 VALUES (-3509778083052175642, NULL);

INSERT INTO t1 VALUES (-3297429447844697659, NULL);

INSERT INTO t1 VALUES (-3285304895013369375, NULL);

INSERT INTO t1 VALUES (-2783073089603195828, NULL);

INSERT INTO t1 VALUES (-2422155131602272083, NULL);

INSERT INTO t1 VALUES (-2411133157184452856, NULL);

INSERT INTO t1 VALUES (-2353272908390735004, NULL);

INSERT INTO t1 VALUES (-2242558770815087701, NULL);

INSERT INTO t1 VALUES (-1554405226393925625, NULL);

INSERT INTO t1 VALUES (-1337520990873830579, NULL);

INSERT INTO t1 VALUES (-1217288122333132479, NULL);

INSERT INTO t1 VALUES (-829779308050048379, NULL);

INSERT INTO t1 VALUES (-783860634233596188, NULL);

INSERT INTO t1 VALUES (-750940733896551510, NULL);

INSERT INTO t1 VALUES (-595923232719547231, NULL);

INSERT INTO t1 VALUES (-542467477806120649, NULL);

INSERT INTO t1 VALUES (-424237581585430344, NULL);

INSERT INTO t1 VALUES (-214362279664766533, NULL);

INSERT INTO t1 VALUES (-71301914094672848, NULL);

INSERT INTO t1 VALUES (85486376371946746, NULL);

INSERT INTO t1 VALUES (88239714065746993, NULL);

INSERT INTO t1 VALUES (587212336705139504, NULL);

INSERT INTO t1 VALUES (672222439154311688, NULL);

INSERT INTO t1 VALUES (831201880315087268, NULL);

INSERT INTO t1 VALUES (995204053540447006, NULL);

INSERT INTO t1 VALUES (1246914698489704287, NULL);

INSERT INTO t1 VALUES (1546231510864932275, NULL);

INSERT INTO t1 VALUES (1791765016181687769, NULL);

INSERT INTO t1 VALUES (1799302827895858725, NULL);

INSERT INTO t1 VALUES (2026591599286391832, NULL);

INSERT INTO t1 VALUES (2195119737828970803, NULL);

INSERT INTO t1 VALUES (2342493223442167775, NULL);

INSERT INTO t1 VALUES (2453343748991321803, NULL);

INSERT INTO t1 VALUES (2499109626526694126, NULL);

INSERT INTO t1 VALUES (2753988324592681474, NULL);

INSERT INTO t1 VALUES (2810878285747130284, NULL);

INSERT INTO t1 VALUES (2848885963459816804, NULL);

INSERT INTO t1 VALUES (2915647809434477614, NULL);

INSERT INTO t1 VALUES (3475034101394730335, NULL);

INSERT INTO t1 VALUES (3626542162137919338, NULL);

INSERT INTO t1 VALUES (3877673001272535186, NULL);

INSERT INTO t1 VALUES (4007330825134180665, NULL);

INSERT INTO t1 VALUES (4077358421272316858, NULL);

INSERT INTO t1 VALUES (4690678276679226532, NULL);

INSERT INTO t1 VALUES (4866304904348119643, NULL);

INSERT INTO t1 VALUES (5214401850561094529, NULL);

INSERT INTO t1 VALUES (5272799208960207736, NULL);

INSERT INTO t1 VALUES (5530918740051863299, NULL);

INSERT INTO t1 VALUES (5569314186296520615, NULL);

INSERT INTO t1 VALUES (5740904173463435848, NULL);

INSERT INTO t1 VALUES (5849452934504718062, NULL);

INSERT INTO t1 VALUES (6218815181136940951, NULL);

INSERT INTO t1 VALUES (6275945720557189700, NULL);

INSERT INTO t1 VALUES (6279008355318181000, NULL);

INSERT INTO t1 VALUES (7017987158241964732, NULL);

INSERT INTO t1 VALUES (7237035290160030660, NULL);

INSERT INTO t1 VALUES (7374688146326987272, NULL);

INSERT INTO t1 VALUES (7612353589185494102, NULL);

INSERT INTO t1 VALUES (7958180433948844465, NULL);

INSERT INTO t1 VALUES (8093404925372580611, NULL);

INSERT INTO t1 VALUES (8165972772169640480, NULL);

INSERT INTO t1 VALUES (8531143325322891078, NULL);

INSERT INTO t1 VALUES (8658728983219000078, NULL);

INSERT INTO t1 VALUES (8730638167239698291, NULL);

INSERT INTO t1 VALUES (8757751876611013998, NULL);

INSERT INTO t1 VALUES (8994059213096666367, NULL);

INSERT INTO t1 VALUES (9034558451786630908, NULL);

INSERT INTO t1 VALUES (9049770455330813268, NULL);

INSERT INTO t1 VALUES (9196517019233481682, NULL);

SELECT c0, SUM(c1), MIN(c1), MAX(c1) FROM t1 GROUP BY c0 ORDER BY 1, 2, 3, 4;

PRAGMA enable_verification;

CREATE TABLE flights ("year" INT, "month" INT, "day" INT, dep_time INT, sched_dep_time INT, dep_delay DOUBLE, arr_time INT, sched_arr_time INT, arr_delay DOUBLE, carrier TEXT, flight INT, tailnum TEXT, origin TEXT, dest TEXT, air_time DOUBLE, distance DOUBLE, "hour" DOUBLE, "minute" DOUBLE, time_hour TIMESTAMP);

SELECT "dest", MODE( ORDER BY "arr_delay") AS "median_delay" FROM "flights" GROUP BY "dest";

SELECT "dest", QUANTILE_CONT("arr_delay", 0.5 ORDER BY "arr_delay") AS "median_delay" FROM "flights" GROUP BY "dest";

SELECT "dest", QUANTILE_CONT("arr_delay", [0.25, 0.5, 0.75] ORDER BY "arr_delay") AS "iqr_delay" FROM "flights" GROUP BY "dest";

SELECT "dest", QUANTILE_DISC("arr_delay", 0.5 ORDER BY "arr_delay") AS "median_delay" FROM "flights" GROUP BY "dest";

SELECT "dest", QUANTILE_DISC("arr_delay", [0.25, 0.5, 0.75] ORDER BY "arr_delay") AS "iqr_delay" FROM "flights" GROUP BY "dest";

SELECT QUANTILE_DISC(i, 0.25 ORDER BY i DESC) FROM GENERATE_SERIES(0, 100) AS tbl(i);

SELECT QUANTILE_DISC(i, [0.25, 0.5, 0.75] ORDER BY i DESC) FROM GENERATE_SERIES(0, 100) AS tbl(i);

SELECT QUANTILE_CONT(i, 0.25 ORDER BY i DESC) FROM GENERATE_SERIES(0, 100) AS tbl(i);

SELECT QUANTILE_CONT(i, [0.25, 0.5, 0.75] ORDER BY i DESC) FROM GENERATE_SERIES(0, 100) AS tbl(i);

SELECT QUANTILE_DISC(col, 0.5 ORDER BY col DESC) FROM (VALUES (11000), (3100), (2900), (2800), (2600), (2500)) AS tab(col);

SELECT QUANTILE_DISC(col, [0.25, 0.5, 0.75] ORDER BY col DESC) FROM (VALUES (11000), (3100), (2900), (2800), (2600), (2500)) AS tab(col);

SELECT MODE( ORDER BY order_occurrences DESC) FROM (VALUES (500, 1), (1000, 2), (800, 3), (1000, 4), (500, 5), (550, 6), (400, 7), (200, 8), (10, 9)) AS items_per_order(order_occurrences, item_count);

SELECT "dest", MODE( ORDER BY "arr_delay", "arr_time") AS "median_delay" FROM "flights" GROUP BY "dest";

SELECT "dest", DUCK(0.5 ORDER BY "arr_delay") AS "duck_delay" FROM "flights" GROUP BY "dest";

SELECT "dest", DUCK(0.5 ORDER BY "arr_delay") AS "duck_delay" FROM "flights" GROUP BY "dest";

SELECT QUANTILE_DISC(i, 0.25 ORDER BY i) FROM GENERATE_SERIES(0, 100) AS tbl(i);

SELECT QUANTILE_DISC(i, 0.25 ORDER BY i) FROM GENERATE_SERIES(0, 100) AS tbl(i);

SELECT QUANTILE_CONT(i, 0.25 ORDER BY i) FROM GENERATE_SERIES(0, 100) AS tbl(i);

SELECT QUANTILE_DISC(1, CAST('NaN' AS REAL ORDER BY 1);

SELECT QUANTILE_DISC(LAST, [] ORDER BY LAST);

SELECT MODE(0.25 ORDER BY i) FROM GENERATE_SERIES(0, 100) AS tbl(i);

SELECT QUANTILE_DISC(i, 'duck' ORDER BY i) FROM GENERATE_SERIES(0, 100) AS tbl(i);

SELECT QUANTILE_CONT(i, 'duck' ORDER BY i) FROM GENERATE_SERIES(0, 100) AS tbl(i);

SELECT QUANTILE_DISC(1, SUM(1 ORDER BY 1 DESC);

SELECT QUANTILE_DISC(1, STRFTIME(CAST('1-11-25' AS DATE), NULL ORDER BY 1 DESC);

SELECT QUANTILE_CONT(1, CASE 1 WHEN 2 THEN 3 END ORDER BY 1 DESC);

SELECT QUANTILE_CONT(1, CASE 1 WHEN 2 THEN 3 END ORDER BY 1 DESC);

SELECT QUANTILE_CONT(1, CASE 1 WHEN 2 THEN 3 END ORDER BY 1 DESC);

PRAGMA enable_verification;

CREATE TABLE integers (grp INT, i INT);

INSERT INTO integers VALUES (1, 10), (2, 15), (1, 30), (2, 20);

SELECT FIRST(i ORDER BY i) FROM integers;

SELECT FIRST(i ORDER BY i, i, i) FROM integers;

SELECT FIRST(i ORDER BY i, i DESC, i) FROM integers;

SELECT FIRST(i ORDER BY i DESC) FROM integers;

SELECT FIRST(i ORDER BY i DESC, i ASC) FROM integers;

SELECT FIRST(i ORDER BY i), FIRST(i ORDER BY i DESC) FROM integers;

SELECT grp, FIRST(i ORDER BY i) FROM integers GROUP BY grp ORDER BY ALL;

SELECT grp, FIRST(i ORDER BY grp, i, grp DESC, i DESC) FROM integers GROUP BY grp ORDER BY ALL;

SELECT grp, FIRST(i ORDER BY i DESC) FROM integers GROUP BY grp ORDER BY ALL;

CREATE TABLE user_causes (user_id INT, cause TEXT, "date" DATE);

INSERT INTO user_causes (user_id, cause, "date") VALUES (1, 'Environmental', '2024-03-18'), (1, 'Environmental', '2024-02-18'), (1, 'Health', '2024-01-18'), (1, 'Social', '2023-12-18'), (1, NULL, '2023-11-19');

SELECT user_id, LIST(DISTINCT cause ORDER BY "date" DESC) FILTER(WHERE NOT cause IS NULL) AS causes FROM user_causes GROUP BY user_id;

SELECT user_id, LIST(DISTINCT cause ORDER BY cause DESC) FILTER(WHERE NOT cause IS NULL) AS causes FROM user_causes GROUP BY user_id;

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

INSERT INTO timeseries VALUES (1996, 10), (1997, 12), (1996, 20), (2001, 30), (NULL, 1), (1996, NULL);

SELECT year, SUM(val), COUNT(val), COUNT(*) FROM timeseries GROUP BY year ORDER BY year;

SELECT year, LIST(val), GROUP_CONCAT(CAST(val AS TEXT), ',') FROM timeseries GROUP BY year ORDER BY year;

CREATE TABLE manycolumns AS SELECT i AS a, i AS b, i AS c, i AS d, i AS e FROM RANGE(0, 2) AS tbl(i);

SELECT a, b, c, d, e FROM manycolumns GROUP BY 1, 2, 3, 4, 5;

CREATE TABLE tinyints AS SELECT CAST(CAST(i AS TINYINT) AS TEXT) AS t FROM RANGE(-127, 128) AS tbl(i);

SELECT COUNT(DISTINCT i), MIN(i), MAX(i), SUM(i) / COUNT(i) FROM (SELECT CAST(t AS TINYINT) AS t1 FROM tinyints GROUP BY t1) AS tbl(i);

CREATE TABLE smallints AS SELECT CAST(CAST(i AS SMALLINT) AS TEXT) AS t FROM RANGE(-32767, 32768) AS tbl(i);

SELECT COUNT(DISTINCT i), MIN(i), MAX(i), SUM(i) / COUNT(i) FROM (SELECT CAST(t AS SMALLINT) AS t1 FROM smallints GROUP BY t1) AS tbl(i);

PRAGMA disable_verification;

CREATE TABLE dates AS SELECT CAST('1992-01-01' AS DATE) + CAST(CONCAT(i, ' months') AS INTERVAL) AS d FROM RANGE(0, 100) AS tbl(i);

SELECT EXTRACT(YEAR FROM d), EXTRACT(MONTH FROM d) FROM dates GROUP BY 1, 2 ORDER BY ALL;

SELECT PRODUCT();

SELECT PRODUCT(NULL);

SELECT PRODUCT(1);

SELECT PRODUCT(*);

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (1), (2), (4), (NULL);

SELECT PRODUCT(i) FROM integers;

SELECT PRODUCT(2) FROM RANGE(0, 100);

SELECT PRODUCT(2) FROM RANGE(0, 100) AS tbl(i) WHERE i % 2 <> 0;

SELECT PRODUCT(i) FROM integers GROUP BY i % 2 ORDER BY ALL;

SELECT PRODUCT(i) FROM RANGE(0, 100) AS tbl(i) WHERE 1 = 0;

SELECT PRODUCT(i) OVER (PARTITION BY i % 2) FROM integers;

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

PRAGMA verify_external;

CREATE TABLE quantile AS SELECT range AS r, RANDOM() FROM RANGE(0, 1000000, 100) UNION ALL VALUES (NULL, 0.1), (NULL, 0.5), (NULL, 0.9) ORDER BY 2;

SELECT QUANTILE_CONT(r, NULL) FROM quantile;

SELECT QUANTILE_CONT(r, 0.5) FROM quantile;

SELECT QUANTILE_CONT(CAST(r AS DECIMAL(10, 2)), 0.5) FROM quantile;

SELECT QUANTILE_CONT(r, 1.0) FROM quantile;

SELECT QUANTILE_CONT(r, 0.0) FROM quantile;

SELECT QUANTILE_CONT(NULL, 0.5) FROM quantile;

SELECT QUANTILE_CONT(42, 0.5) FROM quantile;

SELECT QUANTILE_CONT(NULL, 0.5);

SELECT QUANTILE_CONT(42, 0.5);

SELECT QUANTILE_CONT(r, 0.25), QUANTILE_CONT(r, 0.5), QUANTILE_CONT(r, 0.75) FROM quantile;

SELECT QUANTILE_CONT(r, 0.25), QUANTILE_CONT(r, 0.5), QUANTILE_CONT(r, 0.75) FROM quantile;

SELECT r % 1000 AS g, QUANTILE_CONT(r, 0.25) FROM quantile GROUP BY 1 ORDER BY 1;

SELECT QUANTILE_CONT(CAST('2021-01-01' AS TIMESTAMP) + INTERVAL (r) SECOND, 0.5) FROM quantile;

SELECT QUANTILE_CONT(CAST((CAST('1990-01-01' AS DATE) + INTERVAL (r / 100) DAY) AS DATE), 0.5) FROM quantile;

SELECT QUANTILE_CONT(CAST('00:00:00' AS TIME) + INTERVAL (r / 100) SECOND, 0.5) FROM quantile;

SELECT QUANTILE_CONT(INTERVAL (r / 100) SECOND, 0.5) FROM quantile;

SELECT QUANTILE_CONT(CAST((CAST('2021-01-01' AS TIMESTAMP) + INTERVAL (r) SECOND) AS TIMESTAMPTZ), 0.5) FROM quantile;

SELECT QUANTILE_CONT(1, 0.1) FROM quantile;

SELECT QUANTILE_CONT(r, -0.1) FROM quantile;

SELECT QUANTILE_CONT(x, 0.8 ORDER BY x DESC), QUANTILE_CONT(x, 0.8 ORDER BY x DESC) FROM (VALUES (2), (1)) AS _(x);

SELECT QUANTILE_CONT(r, 0.1) FROM quantile WHERE 1 = 0;

SELECT QUANTILE_CONT(r, -1.1) FROM quantile;

SELECT QUANTILE_CONT(r, 1.1) FROM quantile;

SELECT QUANTILE_CONT(r, "string") FROM quantile;

SELECT QUANTILE_CONT(r, NULL) FROM quantile;

SELECT QUANTILE_CONT(CAST(r AS TEXT), 0.5) FROM quantile;

SELECT QUANTILE_CONT(r) FROM quantile;

SELECT QUANTILE_CONT(r) FROM quantile;

PRAGMA threads = 4;

PRAGMA verify_parallelism;

SELECT QUANTILE_CONT(r, 0.25), QUANTILE_CONT(r, 0.5), QUANTILE_CONT(r, 0.75) FROM quantile;

SELECT r % 1000 AS g, QUANTILE_CONT(r, 0.25) FROM quantile GROUP BY 1 ORDER BY 1;

SELECT QUANTILE_CONT(1, 0.1) FROM quantile;

SELECT QUANTILE_CONT(r, 0.1) FROM quantile WHERE 1 = 0;

SELECT QUANTILE_CONT(t, 0.5) FROM (VALUES (CAST(120 AS TINYINT)), (CAST(122 AS TINYINT))) AS tbl(t);

CREATE TABLE tinyints (t TINYINT);

INSERT INTO tinyints VALUES (-127), (-127);

SELECT QUANTILE_CONT(t, 0.5) FROM tinyints;

UPDATE tinyints SET t = -t;

SELECT QUANTILE_CONT(t, 0.5) FROM tinyints;

SELECT QUANTILE_CONT(t, 0.5) FROM (VALUES (CAST(32764 AS SMALLINT)), (CAST(32766 AS SMALLINT))) AS tbl(t);

CREATE TABLE smallints (t SMALLINT);

INSERT INTO smallints VALUES (-32767), (-32767);

SELECT QUANTILE_CONT(t, 0.5) FROM smallints;

UPDATE smallints SET t = -t;

SELECT QUANTILE_CONT(t, 0.5) FROM smallints;

SELECT QUANTILE_CONT(t, 0.5) FROM (VALUES (CAST(2147483642 AS INT)), (CAST(2147483644 AS INT))) AS tbl(t);

CREATE TABLE integers (t INT);

INSERT INTO integers VALUES (-2147483647), (-2147483647);

SELECT QUANTILE_CONT(t, 0.5) FROM integers;

UPDATE integers SET t = -t;

SELECT QUANTILE_CONT(t, 0.5) FROM integers;

SELECT QUANTILE_CONT(t, 0.5) FROM (VALUES (CAST(9223372036854775794 AS BIGINT)), (CAST(9223372036854775796 AS BIGINT))) AS tbl(t);

CREATE TABLE bigints (t BIGINT);

INSERT INTO bigints VALUES (-9223372036854775800), (-9223372036854775800);

SELECT QUANTILE_CONT(t, 0.5) FROM bigints;

UPDATE bigints SET t = -t;

SELECT QUANTILE_CONT(t, 0.5) FROM bigints;

SELECT QUANTILE_CONT(r, RANDOM()) FROM quantile;

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

PRAGMA verify_external;

CREATE TABLE quantiles AS SELECT range AS r, RANDOM() FROM RANGE(0, 1000000, 100) UNION ALL VALUES (NULL, 0.25), (NULL, 0.5), (NULL, 0.75) ORDER BY 2;

SELECT QUANTILE_CONT(CAST('2021-01-01' AS TIMESTAMP) + INTERVAL (r / 100) HOUR, [0.25, 0.5, 0.75]) FROM quantiles;

SELECT QUANTILE_CONT(CAST('1990-01-01' AS DATE) + INTERVAL (r / 100) DAY, [0.25, 0.5, 0.75]) FROM quantiles;

SELECT QUANTILE_CONT(CAST('00:00:00' AS TIME) + INTERVAL (r / 100) SECOND, [0.25, 0.5, 0.75]) FROM quantiles;

SELECT QUANTILE_CONT(CAST((CAST('2021-01-01' AS TIMESTAMP) + INTERVAL (r / 100) HOUR) AS TIMESTAMPTZ), [0.25, 0.5, 0.75]) FROM quantiles;

SELECT QUANTILE_CONT(INTERVAL (r / 100) SECOND, [0.25, 0.5, 0.75]) FROM quantiles;

SELECT QUANTILE_CONT(r, [0.25, 0.5, 0.75]) FROM quantiles;

SELECT QUANTILE_CONT(r, [0.25, 0.5, 0.75]) FROM quantiles;

SELECT r % 1000 AS g, QUANTILE_CONT(r, [0.25, 0.5, 0.75]) FROM quantiles GROUP BY 1 ORDER BY 1;

SELECT QUANTILE_CONT(1, [0.25, 0.5, 0.75]) FROM quantiles;

SELECT QUANTILE_CONT(r, [0.25, 0.5, 0.75]) FROM quantiles WHERE 1 = 0;

SELECT QUANTILE_CONT(r, []) FROM quantiles;

PRAGMA threads = 4;

PRAGMA verify_parallelism;

SELECT QUANTILE_CONT(r, [0.25, 0.5, 0.75]) FROM quantiles;

SELECT r % 1000 AS g, QUANTILE_CONT(r, [0.25, 0.5, 0.75]) FROM quantiles GROUP BY 1 ORDER BY 1;

SELECT QUANTILE_CONT(1, [0.25, 0.5, 0.75]) FROM quantiles;

SELECT QUANTILE_CONT(r, [0.25, 0.5, 0.75]) FROM quantiles WHERE 1 = 0;

SELECT QUANTILE_CONT(r, []) FROM quantiles;

SELECT QUANTILE_CONT(r, [-0.25, 0.5, 0.75]) FROM quantiles;

SELECT QUANTILE_CONT(r, (0.25, 0.5, 1.1)) FROM quantiles;

SELECT QUANTILE_CONT(r, [0.25, 0.5, NULL]) FROM quantiles;

SELECT QUANTILE_CONT(r, ["0.25", "0.5", "0.75"]) FROM quantiles;

SELECT QUANTILE_CONT(CAST(r AS TEXT), [0.25, 0.5, 0.75]) FROM quantiles;

SELECT QUANTILE_CONT(CAST(r AS TEXT), [0.25, 0.5, 0.75]) FROM quantiles;

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

PRAGMA verify_external;

CREATE TABLE quantile AS SELECT range AS r, RANDOM() AS q FROM RANGE(0, 10000) UNION ALL VALUES (NULL, 0.1), (NULL, 0.5), (NULL, 0.9) ORDER BY 2;

SELECT QUANTILE_DISC(r, 0.5) FROM quantile;

SELECT QUANTILE_DISC(CAST(r AS DECIMAL(10, 2)), 0.5) FROM quantile;

SELECT QUANTILE_DISC(CASE WHEN r IS NULL THEN NULL ELSE [r] END, 0.5) FROM quantile;

SELECT QUANTILE_DISC(CASE WHEN r IS NULL THEN NULL ELSE {'i': r} END, 0.5) FROM quantile;

SELECT QUANTILE_DISC(r, 1.0) FROM quantile;

SELECT QUANTILE_DISC(r, 0.0) FROM quantile;

SELECT QUANTILE_DISC(NULL, 0.5) FROM quantile;

SELECT QUANTILE_DISC(42, 0.5) FROM quantile;

SELECT QUANTILE_DISC(NULL, 0.5);

SELECT QUANTILE_DISC(42, 0.5);

SELECT QUANTILE_DISC(r, 0.1), QUANTILE_DISC(r, 0.5), QUANTILE_DISC(r, 0.9) FROM quantile;

SELECT QUANTILE_DISC(r, 0.1), QUANTILE_DISC(r, 0.5), QUANTILE_DISC(r, 0.9) FROM quantile;

SELECT QUANTILE_DISC(col, -0.5) FROM (VALUES (11000), (3100), (2900), (2800), (2600), (2500)) AS tab(col);

SELECT QUANTILE_DISC(x, 0.8 ORDER BY x DESC), QUANTILE_DISC(x, 0.8 ORDER BY x DESC) FROM (VALUES (2), (1)) AS _(x);

SELECT QUANTILE_DISC(CAST(d AS TEXT), 0.1), QUANTILE_DISC(CAST(d AS TEXT), 0.5), QUANTILE_DISC(CAST(d AS TEXT), 0.9) FROM RANGE(0, 100) AS tbl(d);

SELECT QUANTILE_DISC(CAST(NULL AS TEXT), 0.1) FROM RANGE(0, 100) AS tbl(d);

SELECT QUANTILE_DISC('prefix-' || CAST(d AS TEXT) || '-suffix', 0.1) FROM RANGE(0, 100) AS tbl(d);

SELECT MEDIAN(CAST(d AS TEXT)) FROM RANGE(0, 100) AS tbl(d);

SELECT MEDIAN(CAST(d AS TEXT)) FROM RANGE(0, 100) AS tbl(d) WHERE d > 100;

SELECT r % 10 AS g, QUANTILE_DISC(r, 0.1) FROM quantile GROUP BY 1 ORDER BY 1;

SELECT QUANTILE_DISC(CAST('2021-01-01' AS TIMESTAMP) + INTERVAL (r) HOUR, 0.5) FROM quantile;

SELECT QUANTILE_DISC(CAST('1990-01-01' AS DATE) + INTERVAL (r) DAY, 0.5) FROM quantile;

SELECT QUANTILE_DISC(CAST('00:00:00' AS TIME) + INTERVAL (r) SECOND, 0.5) FROM quantile;

SELECT QUANTILE_DISC(INTERVAL (r) SECOND, 0.5) FROM quantile;

SELECT QUANTILE_DISC(CAST((CAST('2021-01-01' AS TIMESTAMP) + INTERVAL (r) HOUR) AS TIMESTAMPTZ), 0.5) FROM quantile;

SELECT QUANTILE_DISC(1, 0.1) FROM quantile;

SELECT QUANTILE_DISC(r, 0.1) FROM quantile WHERE 1 = 0;

SELECT QUANTILE_DISC(r, -1.1) FROM quantile;

SELECT QUANTILE_DISC(r, 1.1) FROM quantile;

SELECT QUANTILE_DISC(r, "string") FROM quantile;

SELECT QUANTILE_DISC(r, NULL) FROM quantile;

SELECT QUANTILE_DISC(r) FROM quantile;

SELECT QUANTILE_DISC(r) FROM quantile;

SELECT QUANTILE_CONT(r, q) FROM quantile;

PRAGMA threads = 4;

PRAGMA verify_parallelism;

SELECT QUANTILE_DISC(r, 0.1), QUANTILE_DISC(r, 0.5), QUANTILE_DISC(r, 0.9) FROM quantile;

SELECT r % 10 AS g, QUANTILE_DISC(r, 0.1) FROM quantile GROUP BY 1 ORDER BY 1;

SELECT QUANTILE_DISC(1, 0.1) FROM quantile;

SELECT QUANTILE_DISC(r, 0.1) FROM quantile WHERE 1 = 0;

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

PRAGMA verify_external;

CREATE TABLE quantiles AS SELECT range AS r, RANDOM() FROM RANGE(0, 10000) UNION ALL VALUES (NULL, 0.1), (NULL, 0.5), (NULL, 0.9) ORDER BY 2;

SELECT QUANTILE_DISC(r, [0.1, 0.5, 0.9]) FROM quantiles;

SELECT QUANTILE_DISC(CASE WHEN r IS NULL THEN NULL ELSE [r] END, [0.1, 0.5, 0.9]) FROM quantiles;

SELECT QUANTILE_DISC(CASE WHEN r IS NULL THEN NULL ELSE {'i': r} END, [0.1, 0.5, 0.9]) FROM quantiles;

SELECT QUANTILE_DISC(CASE WHEN r IS NULL THEN NULL ELSE {'i': r} END, [0.1, 0.5, 0.9]) FROM quantiles;

SELECT QUANTILE_DISC(col, [-0.25, -0.5, -0.75]) FROM (VALUES (11000), (3100), (2900), (2800), (2600), (2500)) AS tab(col);

SELECT QUANTILE_DISC(CAST(d AS TEXT), [0.1, 0.5, 0.9]) FROM RANGE(0, 100) AS tbl(d);

SELECT r % 10 AS g, QUANTILE_DISC(r, [0.1, 0.5, 0.9]) FROM quantiles GROUP BY 1 ORDER BY 1;

SELECT QUANTILE_DISC(1, [0.1, 0.5, 0.9]) FROM quantiles;

SELECT QUANTILE_DISC(r, [0.1, 0.5, 0.9]) FROM quantiles WHERE 1 = 0;

SELECT QUANTILE_DISC(r, []) FROM quantiles;

SELECT QUANTILE_DISC(CAST('2021-01-01' AS TIMESTAMP) + INTERVAL (r) HOUR, [0.1, 0.5, 0.9]) FROM quantiles;

SELECT QUANTILE_DISC(CAST('1990-01-01' AS DATE) + INTERVAL (r) DAY, [0.1, 0.5, 0.9]) FROM quantiles;

SELECT QUANTILE_DISC(CAST('00:00:00' AS TIME) + INTERVAL (r) SECOND, [0.1, 0.5, 0.9]) FROM quantiles;

SELECT QUANTILE_DISC(INTERVAL (r) SECOND, [0.1, 0.5, 0.9]) FROM quantiles;

SELECT QUANTILE_DISC(CAST((CAST('2021-01-01' AS TIMESTAMP) + INTERVAL (r) HOUR) AS TIMESTAMPTZ), [0.1, 0.5, 0.9]) FROM quantiles;

PRAGMA threads = 4;

PRAGMA verify_parallelism;

SELECT QUANTILE_DISC(r, [0.1, 0.5, 0.9]) FROM quantiles;

SELECT r % 10 AS g, QUANTILE_DISC(r, [0.1, 0.5, 0.9]) FROM quantiles GROUP BY 1 ORDER BY 1;

SELECT QUANTILE_DISC(1, [0.1, 0.5, 0.9]) FROM quantiles;

SELECT QUANTILE_DISC(r, [0.1, 0.5, 0.9]) FROM quantiles WHERE 1 = 0;

SELECT QUANTILE_DISC(r, []) FROM quantiles;

SELECT QUANTILE_DISC(col, [0.1, 0.32, 0.33, 0.34, 0.49, 0.5, 0.51, 0.75, 0.9, 0.999, 1]) FROM (VALUES (0), (1), (2), (10)) AS tab(col);

SELECT QUANTILE_DISC(CAST(42 AS UTINYINT), 0.5);

SELECT QUANTILE_DISC(col, ARRAY_VALUE(0.5, 0.4, 0.1)) AS percentile FROM (VALUES (0), (1), (2), (10)) AS tab(col);

SELECT QUANTILE_DISC(r, [-0.1, 0.5, 0.9]) FROM quantiles;

SELECT QUANTILE_DISC(r, (0.1, 0.5, 1.1)) FROM quantiles;

SELECT QUANTILE_DISC(r, [0.1, 0.5, NULL]) FROM quantiles;

SELECT QUANTILE_DISC(r, ["0.1", "0.5", "0.9"]) FROM quantiles;

SELECT QUANTILE_DISC(r, ["0.1", "0.5", "0.9"]) FROM quantiles;

PRAGMA enable_verification;

SELECT REGR_AVGX(NULL, NULL);

SELECT REGR_AVGX(1, 1);

SELECT REGR_AVGX();

SELECT REGR_AVGX(*);

SELECT REGR_AVGY();

SELECT REGR_AVGY(NULL, NULL);

SELECT REGR_AVGY(1, 1);

SELECT REGR_AVGY(*);

SELECT REGR_COUNT();

SELECT REGR_COUNT(NULL, NULL);

SELECT REGR_COUNT(1, 1);

SELECT REGR_COUNT(*);

SELECT REGR_SLOPE();

SELECT REGR_SLOPE(NULL, NULL);

SELECT REGR_SLOPE(1, 1);

SELECT REGR_SLOPE(*);

SELECT REGR_R2();

SELECT REGR_R2(NULL, NULL);

SELECT REGR_R2(1, 1);

SELECT REGR_R2(0, 1e230 * i) FROM RANGE(0, 5) AS tbl(i);

SELECT REGR_R2(1e230 * i, i) FROM RANGE(0, 5) AS tbl(i);

SELECT REGR_R2(1e230 * i, 0) FROM RANGE(0, 5) AS tbl(i);

SELECT REGR_R2(0, i) FROM RANGE(0, 5) AS tbl(i);

SELECT REGR_R2(*);

SELECT REGR_SXX();

SELECT REGR_SXX(0, 2e230 * i) FROM RANGE(0, 5) AS tbl(i);

SELECT REGR_SXX(2e230 * i, 0) FROM RANGE(0, 5) AS tbl(i);

SELECT REGR_SXX(NULL, NULL);

SELECT REGR_SXX(1, 1);

SELECT REGR_SYY();

SELECT REGR_SYY(NULL, NULL);

SELECT REGR_SYY(1, 1);

SELECT REGR_SXY(*);

SELECT REGR_SXY();

SELECT REGR_SXY(NULL, NULL);

SELECT REGR_SXY(1, 1);

SELECT REGR_SYY(*);

SELECT REGR_INTERCEPT();

SELECT REGR_INTERCEPT(NULL, NULL);

SELECT REGR_INTERCEPT(1, 1);

SELECT REGR_INTERCEPT(*);

CREATE TABLE aggr (k INT, v DECIMAL(10, 2), v2 DECIMAL(10, 2));

INSERT INTO aggr VALUES (1, 10, NULL), (2, 10, 11), (2, 20, 22), (2, 25, NULL), (2, 30, 35);

SELECT k, REGR_AVGX(v, v2) FROM aggr GROUP BY k ORDER BY ALL;

SELECT k, REGR_AVGY(v, v2) FROM aggr GROUP BY k ORDER BY ALL;

SELECT k, COUNT(*), REGR_COUNT(v, v2) FROM aggr GROUP BY k ORDER BY ALL;

SELECT k, REGR_SLOPE(v, v2) FROM aggr GROUP BY k ORDER BY ALL;

SELECT k, REGR_R2(v, v2) FROM aggr GROUP BY k ORDER BY ALL;

SELECT k, REGR_SXX(v, v2) FROM aggr GROUP BY k ORDER BY ALL;

SELECT k, REGR_SYY(v, v2) FROM aggr GROUP BY k ORDER BY ALL;

SELECT k, REGR_SXY(v, v2) FROM aggr GROUP BY k ORDER BY ALL;

SELECT k, REGR_INTERCEPT(v, v2) FROM aggr GROUP BY k ORDER BY ALL;

SELECT REGR_AVGX(v, v2) FROM aggr;

SELECT REGR_AVGY(v, v2) FROM aggr;

SELECT REGR_COUNT(v, v2) FROM aggr;

SELECT REGR_SLOPE(v, v2) FROM aggr;

SELECT REGR_R2(v, v2) FROM aggr;

SELECT REGR_SXX(v, v2) FROM aggr;

SELECT REGR_SYY(v, v2) FROM aggr;

SELECT REGR_SXY(v, v2) FROM aggr;

SELECT REGR_INTERCEPT(v, v2) FROM aggr;

SELECT REGR_AVGX(v, v2) OVER (PARTITION BY k) FROM aggr;

SELECT REGR_AVGY(v, v2) OVER (PARTITION BY k) FROM aggr;

SELECT REGR_COUNT(v, v2) OVER (PARTITION BY k) FROM aggr;

SELECT REGR_SLOPE(v, v2) OVER (PARTITION BY k) FROM aggr;

SELECT REGR_R2(v, v2) OVER (PARTITION BY k) FROM aggr;

SELECT REGR_SXX(v, v2) OVER (PARTITION BY k) FROM aggr;

SELECT REGR_SYY(v, v2) OVER (PARTITION BY k) FROM aggr;

SELECT REGR_SXY(v, v2) OVER (PARTITION BY k) FROM aggr;

SELECT REGR_INTERCEPT(v, v2) OVER (PARTITION BY k) FROM aggr;

SET default_null_order = 'nulls_first';

SELECT COUNT(1), MIN(1), FIRST(1), LAST(1), MAX(1), SUM(1), GROUP_CONCAT('hello', ',');

SELECT COUNT(NULL), MIN(NULL), FIRST(NULL), LAST(NULL), MAX(NULL), SUM(NULL), GROUP_CONCAT(NULL, NULL);

SELECT FIRST(NULL);

SELECT LAST(NULL);

SELECT NULL AS a, NULL AS b, 1 AS id UNION SELECT CAST('00:00:00' AS TIME) AS a, CAST('12:34:56' AS TIME) AS b, 2 AS id ORDER BY 1;

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (1), (2), (NULL);

SELECT COUNT(1), MIN(1), FIRST(1), LAST(1), MAX(1), SUM(1), GROUP_CONCAT('hello', ',') FROM integers;

SELECT COUNT(NULL), MIN(NULL), FIRST(NULL), LAST(NULL), MAX(NULL), SUM(NULL), GROUP_CONCAT(NULL, NULL) FROM integers;

PRAGMA enable_verification;

SELECT SEM();

SELECT SEM(NULL);

SELECT SEM(1);

SELECT SEM(*);

CREATE TABLE aggr (k INT, v DECIMAL(10, 2), v2 DECIMAL(10, 2));

INSERT INTO aggr VALUES (1, 10, NULL), (2, 10, 11), (2, 20, 22), (2, 25, NULL), (2, 30, 35);

SELECT k, SEM(v), SEM(v2) FROM aggr GROUP BY k ORDER BY ALL;

SELECT SEM(v), SEM(v2) FROM aggr;

SELECT k, SEM(v) OVER (PARTITION BY k) FROM aggr ORDER BY ALL;

PRAGMA enable_verification;

SELECT COUNT(*) AS total_rows, COUNT(*) FILTER(WHERE i <= 5) AS lte_five, COUNT(*) FILTER(WHERE i % 2 = 1) AS odds FROM GENERATE_SERIES(1, 11) AS tbl(i);

SELECT COUNT(*) FILTER(WHERE i % 2 = 1) AS odds, COUNT(*) FILTER(WHERE i <= 5) AS lte_five, COUNT(*) AS total_rows FROM GENERATE_SERIES(1, 11) AS tbl(i);

SELECT COUNT(*) FILTER(WHERE i <= 5) AS lte_five, COUNT(*) FILTER(WHERE i % 2 = 1) AS odds, COUNT(*) AS total_rows FROM GENERATE_SERIES(1, 11) AS tbl(i);

CREATE TABLE issue3105 (gender TEXT, pay REAL);

INSERT INTO issue3105 VALUES ('male', 100), ('male', 200), ('male', 300), ('female', 150), ('female', 250);

SELECT SUM(pay) FILTER(WHERE gender = 'male'), SUM(pay) FILTER(WHERE gender = 'female'), SUM(pay) FROM issue3105;

SELECT SUM(pay), SUM(pay) FILTER(WHERE gender = 'male'), SUM(pay) FILTER(WHERE gender = 'female') FROM issue3105;

SELECT SUM(pay) FILTER(WHERE gender = 'male'), SUM(pay), SUM(pay) FILTER(WHERE gender = 'female') FROM issue3105;

SELECT SUM(pay) FILTER(WHERE gender = 'male'), SUM(pay), SUM(pay) FILTER(WHERE gender = 'female') FROM issue3105;

PRAGMA enable_verification;

SELECT SKEWNESS();

SELECT SKEWNESS(NULL);

SELECT SKEWNESS(1);

SELECT SKEWNESS(*);

SELECT SKEWNESS(10) FROM RANGE(0, 5);

SELECT SKEWNESS(10) FROM RANGE(0, 5) WHERE 1 = 0;

SELECT SKEWNESS(i) FROM (VALUES (-2e307), (0), (2e307)) AS tbl(i);

CREATE TABLE aggr (k INT, v DECIMAL(10, 2), v2 DECIMAL(10, 2));

INSERT INTO aggr VALUES (1, 10, NULL), (2, 10, 11), (2, 10, 15), (2, 10, 18), (2, 20, 22), (2, 20, 25), (2, 25, NULL), (2, 30, 35), (2, 30, 40), (2, 30, 50), (2, 30, 51);

SELECT SKEWNESS(k), SKEWNESS(v), SKEWNESS(v2) FROM aggr;

SELECT SKEWNESS(v2) FROM aggr GROUP BY v ORDER BY ALL;

SELECT SKEWNESS(v2) OVER (PARTITION BY v) FROM aggr ORDER BY v;

PRAGMA enable_verification;

CREATE TABLE dummy AS SELECT range % 10 AS g, range AS d FROM RANGE(0, 100);

SELECT COUNT(*), COUNT(d), SUM(d), CAST(AVG(d) AS INT), MIN(d), MAX(d) FROM dummy;

SELECT COUNT(*), COUNT(d), SUM(d), CAST(AVG(d) AS INT), MIN(d), MAX(d) FROM dummy;

SELECT g, COUNT(*), COUNT(d), SUM(d), CAST(AVG(d) AS INT), MIN(d), MAX(d) FROM dummy GROUP BY g ORDER BY g;

SELECT g, COUNT(*), COUNT(d), SUM(d), CAST(AVG(d) AS INT), MIN(d), MAX(d) FROM dummy GROUP BY g ORDER BY g;

CREATE TABLE state AS SELECT g, count(*) EXPORT_STATE count_star_state, count(d) EXPORT_STATE count_state, sum(d) EXPORT_STATE sum_state, avg(d) EXPORT_STATE avg_state, min(d) EXPORT_STATE min_state, max(d) EXPORT_STATE max_state FROM dummy GROUP BY g ORDER BY g;

SELECT g, FINALIZE(count_star_state), FINALIZE(count_state), FINALIZE(sum_state), CAST(FINALIZE(avg_state) AS INT), FINALIZE(min_state), FINALIZE(max_state) FROM state ORDER BY g;

SELECT SUM(d) * 2 FROM dummy;

SELECT SUM(d) * 2 FROM dummy;

SELECT g, SUM(d) * 2 AS combined_sum FROM dummy GROUP BY g ORDER BY g;

SELECT g, SUM(d) * 2 AS combined_sum FROM dummy GROUP BY g ORDER BY g;

CREATE TABLE state2 AS SELECT g, sum(d) EXPORT_STATE sum_state FROM dummy WHERE g < 5 GROUP BY g ORDER BY g;

CREATE TABLE state2 AS SELECT g, sum(d) EXPORT_STATE sum_state FROM dummy WHERE g < 5 GROUP BY g ORDER BY g;

CREATE TABLE state2 AS SELECT g, sum(d) EXPORT_STATE sum_state FROM dummy WHERE g < 5 GROUP BY g ORDER BY g;

CREATE TABLE state2 AS SELECT g, sum(d) EXPORT_STATE sum_state FROM dummy WHERE g < 5 GROUP BY g ORDER BY g;

SELECT COUNT(*), COUNT(d), SUM(d), CAST(AVG(d) AS INT), MIN(d), MAX(d) FROM dummy WHERE FALSE;

SELECT COUNT(*), COUNT(d), SUM(d), CAST(AVG(d) AS INT), MIN(d), MAX(d) FROM dummy WHERE FALSE;

SELECT COUNT(*), COUNT(d), SUM(d), CAST(AVG(d) AS INT), MIN(d), MAX(d) FROM (SELECT CAST(NULL AS INT) AS d);

SELECT COUNT(*), COUNT(d), SUM(d), CAST(AVG(d) AS INT), MIN(d), MAX(d) FROM (SELECT CAST(NULL AS INT) AS d);

SELECT COUNT(*), COUNT(d), SUM(d), CAST(AVG(d) AS INT), MIN(d), MAX(d) FROM (SELECT CAST(NULL AS INT) AS d, g FROM dummy);

SELECT COUNT(*), COUNT(d), SUM(d), CAST(AVG(d) AS INT), MIN(d), MAX(d) FROM (SELECT CAST(NULL AS INT) AS d, g FROM dummy);

SELECT ARG_MIN(a, b), ARG_MAX(a, b) FROM (VALUES (1, 1), (2, 2), (8, 8), (10, 10)) AS s(a, b);

SELECT ARG_MIN(a, b), ARG_MAX(a, b) FROM (VALUES (1, 1), (2, 2), (8, 8), (10, 10)) AS s(a, b);

SELECT g, FIRST(d), LAST(d), FSUM(d), FAVG(d), PRODUCT(d), BIT_XOR(d), BOOL_AND(d > 5) FROM dummy GROUP BY g ORDER BY g;

SELECT g, FIRST(d), LAST(d), FSUM(d), FAVG(d), PRODUCT(d), BIT_XOR(d), BOOL_AND(d > 5) FROM dummy GROUP BY g ORDER BY g;

SELECT CORR(d, d + 1), COVAR_POP(d, d + 1) FROM dummy;

SELECT CORR(d, d + 1), COVAR_POP(d, d + 1) FROM dummy;

SELECT LIST(d) AS EXPORT_STATE FROM dummy;

SELECT GROUP_CONCAT(d, ',') AS EXPORT_STATE FROM dummy;

SELECT GROUP_CONCAT(d) AS EXPORT_STATE FROM dummy;

SELECT GROUP_CONCAT(d) AS EXPORT_STATE FROM dummy;

SELECT COMBINE(NULL, NULL);

SELECT COMBINE(42, 42);

SELECT FINALIZE(NULL);

SELECT FINALIZE(42);

SELECT FINALIZE(SUM(d)) FROM dummy;

SELECT FINALIZE(SUM(d)) FROM dummy GROUP BY g;

SELECT FINALIZE(SUM(d)) FROM dummy GROUP BY g;

SELECT FINALIZE(SUM(d)) FROM dummy GROUP BY g;

CREATE TABLE dummy AS SELECT range % 10 AS g, range AS d FROM RANGE(0, 100);

CREATE TABLE state AS SELECT g, count(*) EXPORT_STATE count_star_state, count(d) EXPORT_STATE count_state, sum(d) EXPORT_STATE sum_state, avg(d) EXPORT_STATE avg_state, min(d) EXPORT_STATE min_state, max(d) EXPORT_STATE max_state FROM dummy GROUP BY g ORDER BY g;

CREATE VIEW state_view AS SELECT g, count(*) EXPORT_STATE count_star_state, count(d) EXPORT_STATE count_state, sum(d) EXPORT_STATE sum_state, avg(d) EXPORT_STATE avg_state, min(d) EXPORT_STATE min_state, max(d) EXPORT_STATE max_state FROM dummy GROUP BY g ORDER BY g;
restart;

SELECT g, COUNT(*), COUNT(d), SUM(d), CAST(AVG(d) AS INT), MIN(d), MAX(d) FROM dummy GROUP BY g ORDER BY g;

SELECT g, FINALIZE(count_star_state), FINALIZE(count_state), FINALIZE(sum_state), CAST(FINALIZE(avg_state) AS INT), FINALIZE(min_state), FINALIZE(max_state) FROM state ORDER BY g;

SELECT g, FINALIZE(count_star_state), FINALIZE(count_state), FINALIZE(sum_state), CAST(FINALIZE(avg_state) AS INT), FINALIZE(min_state), FINALIZE(max_state) FROM state_view ORDER BY g;

SELECT CAST((SUM(42) AS EXPORT_STATE) AS BLOB);

SELECT CAST((SUM(42) AS EXPORT_STATE) AS BLOB);

SELECT CAST((SUM(42) AS EXPORT_STATE) AS INT);

SELECT CAST((SUM(42) AS EXPORT_STATE) AS INT);

SELECT CAST((SUM(42) AS EXPORT_STATE) AS INT);

SELECT CAST((SUM(42) AS EXPORT_STATE) AS INT);

COPY (SELECT g, CAST((SUM(d) AS EXPORT_STATE) AS BLOB) AS s1 FROM dummy GROUP BY g) TO '__TEST_DIR__/state.parquet' WITH (FORMAT PARQUET);

COPY (SELECT g, CAST((SUM(d) AS EXPORT_STATE) AS BLOB) AS s1 FROM dummy GROUP BY g) TO '__TEST_DIR__/state.parquet' WITH (FORMAT PARQUET);

CREATE TABLE stddev_test (val INT, grp INT);

INSERT INTO stddev_test VALUES (42, 1), (43, 1), (42, 2), (1000, 2), (NULL, 1), (NULL, 3);

SELECT STDDEV_SAMP(1);

SELECT VARIANCE(1);

SELECT ROUND(STDDEV_SAMP(val), 1) FROM stddev_test;

SELECT ROUND(STDDEV_SAMP(val), 1) FROM stddev_test WHERE NOT val IS NULL;

SELECT grp, SUM(val), ROUND(STDDEV_SAMP(val), 1), MIN(val) FROM stddev_test GROUP BY grp ORDER BY grp;

SELECT grp, SUM(val), ROUND(STDDEV_SAMP(val), 1), MIN(val) FROM stddev_test WHERE NOT val IS NULL GROUP BY grp ORDER BY grp;

SELECT ROUND(STDDEV_POP(val), 1) FROM stddev_test;

SELECT ROUND(STDDEV_POP(val), 1) FROM stddev_test WHERE NOT val IS NULL;

SELECT grp, SUM(val), ROUND(STDDEV_POP(val), 1), MIN(val) FROM stddev_test GROUP BY grp ORDER BY grp;

SELECT grp, SUM(val), ROUND(STDDEV_POP(val), 1), MIN(val) FROM stddev_test WHERE NOT val IS NULL GROUP BY grp ORDER BY grp;

SELECT ROUND(VARIANCE(val), 1) FROM stddev_test;

SELECT ROUND(VARIANCE(val), 1) FROM stddev_test;

SELECT ROUND(VARIANCE(val), 1) FROM stddev_test WHERE NOT val IS NULL;

SELECT grp, SUM(val), ROUND(VARIANCE(val), 1), MIN(val) FROM stddev_test GROUP BY grp ORDER BY grp;

SELECT grp, SUM(val), ROUND(VARIANCE(val), 1), MIN(val) FROM stddev_test WHERE NOT val IS NULL GROUP BY grp ORDER BY grp;

SELECT ROUND(VAR_POP(val), 1) FROM stddev_test;

SELECT ROUND(VAR_POP(val), 1) FROM stddev_test WHERE NOT val IS NULL;

SELECT grp, SUM(val), ROUND(VAR_POP(val), 2), MIN(val) FROM stddev_test GROUP BY grp ORDER BY grp;

SELECT grp, SUM(val), ROUND(VAR_POP(val), 2), MIN(val) FROM stddev_test WHERE NOT val IS NULL GROUP BY grp ORDER BY grp;

CREATE TABLE stddev_test_alias (val INT, grp INT);

INSERT INTO stddev_test_alias VALUES (42, 1), (43, 1), (42, 2), (1000, 2), (NULL, 1), (NULL, 3);

SELECT ROUND(STDDEV(val), 1) FROM stddev_test_alias;

SELECT STDDEV(0) FROM RANGE(0, 10);

SELECT STDDEV(a) FROM (VALUES (1e301), (-1e301)) AS tbl(a);

SELECT VARIANCE(a) FROM (VALUES (1e301), (-1e301)) AS tbl(a);

SELECT VAR_POP(a) FROM (VALUES (1e301), (-1e301)) AS tbl(a);

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

PRAGMA verify_external;

PRAGMA verify_external;

SELECT GROUP_CONCAT('a', 'b', 'c');

SELECT GROUP_CONCAT(GROUP_CONCAT('a', ','));

SELECT GROUP_CONCAT('a', ',');

SELECT GROUP_CONCAT('a', ','), GROUP_CONCAT(NULL, ','), GROUP_CONCAT('a', NULL), GROUP_CONCAT(NULL, NULL);

CREATE TABLE strings (g INT, x TEXT, y TEXT);

INSERT INTO strings VALUES (1, 'a', '/'), (1, 'b', '-'), (2, 'i', '/'), (2, NULL, '-'), (2, 'j', '+'), (3, 'p', '/'), (4, 'x', '/'), (4, 'y', '-'), (4, 'z', '+');

SELECT GROUP_CONCAT(x, ','), GROUP_CONCAT(x, y) FROM strings;

SELECT g, GROUP_CONCAT(x, '|') FROM strings GROUP BY g ORDER BY g;

SELECT GROUP_CONCAT(x, ',') FROM strings WHERE g > 100;

SELECT GROUP_CONCAT(1, 2);

SELECT GROUP_CONCAT('a', ',');

SELECT GROUP_CONCAT('a');

SELECT g, GROUP_CONCAT(x) FROM strings GROUP BY g ORDER BY g;

PRAGMA verify_parallelism;

SELECT GROUP_CONCAT(x ORDER BY x ASC), GROUP_CONCAT(x, '|' ORDER BY x ASC) FROM strings;

SELECT GROUP_CONCAT(x ORDER BY x DESC), GROUP_CONCAT(x, '|' ORDER BY x DESC) FROM strings;

SELECT g, GROUP_CONCAT(x ORDER BY x ASC), GROUP_CONCAT(x, '|' ORDER BY x ASC) FROM strings GROUP BY g ORDER BY 1;

SELECT g, GROUP_CONCAT(x ORDER BY x DESC), GROUP_CONCAT(x, '|' ORDER BY x DESC) FROM strings GROUP BY g ORDER BY 1;

SELECT g, GROUP_CONCAT(x, y ORDER BY x ASC) FROM strings GROUP BY g ORDER BY 1;

SELECT g, GROUP_CONCAT(x, y ORDER BY x DESC) FROM strings GROUP BY g ORDER BY 1;

SELECT GROUP_CONCAT(CAST(g AS TEXT), ',' ORDER BY CONCAT(x, y) ASC) FROM strings ORDER BY 1;

SELECT GROUP_CONCAT(CAST(g AS TEXT), ',' ORDER BY x, y) FROM strings ORDER BY 1;

SELECT GROUP_CONCAT(x, ',' ORDER BY x DESC), GROUP_CONCAT(x, ',' ORDER BY x ASC) FROM strings;

SELECT y, GROUP_CONCAT(x, ',' ORDER BY x DESC) FILTER(WHERE g < 3) FROM strings GROUP BY y ORDER BY 1;

SELECT g, GROUP_CONCAT(DISTINCT y, ',' ORDER BY x DESC) FILTER(WHERE g < 4) FROM strings GROUP BY g ORDER BY 1;

CREATE TABLE integers (i INT);

INSERT INTO integers (VALUES(1), (2), (3), (NULL));

SELECT i1.i, (SELECT GROUP_CONCAT(CAST(i AS TEXT), ',' ORDER BY i1.i + i) FROM integers WHERE i <= i1.i) AS c1 FROM integers AS i1 ORDER BY 1;

SELECT GROUP_CONCAT(DISTINCT CellType, '&' ORDER BY LIST_POSITION(['L900', 'L1800', 'L2100', 'L2600'], CellType)) FROM (VALUES ('L900'), ('L2600'), ('L2100'), ('L2100'), ('L1800')) AS t(CellType);

SELECT FIRST(DISTINCT i ORDER BY RANDOM() * i) FROM (VALUES (900), (2600), (2100), (2100), (1800)) AS t(i);

SELECT FIRST(DISTINCT RANDOM() * i ORDER BY i) FROM (VALUES (900), (2600), (2100), (2100), (1800)) AS t(i);

PRAGMA enable_verification;

PRAGMA verify_external;

PRAGMA verify_parallelism;

CREATE TABLE strings AS SELECT CAST(c AS TEXT) AS g, CAST((c * 10 + e) AS TEXT) AS x FROM RANGE(0, 100, 1) AS t1(c), RANGE(0, 100, 1) AS t2(e);

SELECT COUNT(*) FROM (SELECT g, GROUP_CONCAT(x, ',') FROM strings GROUP BY g) AS t1;

SELECT g, GROUP_CONCAT(x ORDER BY x DESC) FROM strings GROUP BY g ORDER BY 1, 2;

SELECT g, GROUP_CONCAT(x, ',' ORDER BY x DESC) FROM strings GROUP BY g ORDER BY 1, 2;

PRAGMA enable_Verification;

PRAGMA verify_parallelism;

CREATE TABLE strings AS SELECT g, 'hello' AS x FROM RANGE(0, 10000, 1) AS t1(g);

SELECT g, GROUP_CONCAT(x, ',') FROM strings GROUP BY g ORDER BY g;

SELECT 1, GROUP_CONCAT(x, ',') FROM strings GROUP BY 1 ORDER BY 1;

SELECT GROUP_CONCAT(k, ','), SUM(CAST(k AS BIGINT)) FROM (SELECT CAST(g AS TEXT) FROM strings UNION ALL SELECT CAST(x AS TEXT) FROM strings) AS tbl1(k);

SELECT 1, GROUP_CONCAT(x, ',' ORDER BY g DESC) FROM strings GROUP BY 1 ORDER BY 1;

CREATE TABLE many_strings AS SELECT i AS id, CAST(i AS TEXT) AS s FROM RANGE(0, 1000000) AS tbl(i);

SELECT GROUP_CONCAT(s, ',' ORDER BY id DESC) FROM many_strings WHERE id % 100000 = 0;

CREATE TABLE integers (i INT);

INSERT INTO integers SELECT * FROM RANGE(0, 1000, 1);

SELECT SUM(i) FROM integers;

INSERT INTO integers SELECT * FROM RANGE(0, -1000, -1);

SELECT SUM(i) FROM integers;

INSERT INTO integers SELECT * FROM RANGE(0, -1000, -1);

SELECT SUM(i) FROM integers;

SELECT SUM(1) FROM integers;

SELECT SUM(-1) FROM integers;

SELECT SUM(-1) FROM integers WHERE i = -1;

SELECT SUM(-1) FROM integers WHERE i > 10000;

CREATE TABLE bigints (b BIGINT);

INSERT INTO bigints SELECT * FROM RANGE(4611686018427387904, 4611686018427388904, 1);

SELECT SUM(b) FROM bigints;

SELECT CAST(SUM(b) AS BIGINT) FROM bigints;

CREATE TABLE doubles (n DOUBLE);

INSERT INTO doubles (n) VALUES (CAST('9007199254740992' AS DOUBLE)), (CAST(1 AS DOUBLE)), (CAST(1 AS DOUBLE)), (CAST(0 AS DOUBLE));

SELECT CAST(SUM(n ORDER BY ABS(n)) AS BIGINT) FROM doubles;

SELECT CAST((SUM(n ORDER BY ABS(n))) AS BIGINT) FROM doubles;

SELECT WEIGHTED_AVG(3, 3), WEIGHTED_AVG(3, NULL), WEIGHTED_AVG(NULL, 3), WEIGHTED_AVG(NULL, NULL);

SELECT WEIGHTED_AVG(3, 0), WEIGHTED_AVG(3, 0.0), WEIGHTED_AVG(0, 3), WEIGHTED_AVG(0.0, 3);

SELECT WAVG(3, 3);

CREATE TABLE students (name TEXT, grade INT, etcs INT);

INSERT INTO students VALUES ('Alice', 8, 6), ('Alice', 6, 2), ('Bob', 6, 3), ('Bob', 8, 3), ('Bob', 6, 6);

SELECT name, WEIGHTED_AVG(grade, etcs) FROM students GROUP BY name ORDER BY name;

INSERT INTO students VALUES ('Alice', 42, 0);

SELECT name, WEIGHTED_AVG(grade, etcs) FROM students GROUP BY name ORDER BY name;

INSERT INTO students VALUES ('Alice', 42, NULL);

SELECT name, WEIGHTED_AVG(grade, etcs) FROM students GROUP BY name ORDER BY name;

INSERT INTO students VALUES ('Alice', NULL, 42);

SELECT name, WEIGHTED_AVG(grade, etcs) FROM students GROUP BY name ORDER BY name;

PRAGMA enable_verification;

CREATE TABLE integers (i INT, j INT);

INSERT INTO integers VALUES (2, 3), (4, 5), (2, NULL), (NULL, NULL);

SELECT DISTINCT ON (i) i, j FROM integers ORDER BY j;

SELECT DISTINCT ON (i) i, j FROM integers ORDER BY i, j;

SELECT DISTINCT ON (i) i, j FROM integers ORDER BY i NULLS FIRST, j NULLS FIRST;

SELECT DISTINCT ON (i) i, j FROM integers ORDER BY i, j NULLS FIRST;

CREATE TABLE distinct_on_test (key INT, v1 TEXT, v2 INT[], v3 INT);

INSERT INTO distinct_on_test VALUES (1, 'hello', [1], 42) /* ASC */, (1, 'hello', [1], 42), (1, 'hello', [1], 43) /* DESC */, (2, NULL, NULL, 0) /* ASC */, (2, NULL, NULL, 1), (2, NULL, NULL, NULL) /* DESC */, (3, 'thisisalongstring', NULL, 0) /* ASC */, (3, 'thisisalongstringbutlonger', NULL, 1), (3, 'thisisalongstringbutevenlonger', [1, 2, 3, 4, 5, 6, 7, 8, 9], 2) /* DESC */;

SELECT DISTINCT ON (key) * FROM distinct_on_test ORDER BY key, v1, v2, v3;

SELECT DISTINCT ON (key) * FROM distinct_on_test WHERE key <> 2 ORDER BY key, v1, v2, v3;

SELECT DISTINCT ON (key) * FROM distinct_on_test ORDER BY key, v1 DESC NULLS FIRST, v2 DESC NULLS FIRST, v3 DESC NULLS FIRST;

SELECT DISTINCT ON (key) * FROM distinct_on_test WHERE key <> 2 ORDER BY key, v1 DESC NULLS FIRST, v2 DESC NULLS FIRST, v3 DESC NULLS FIRST;

PRAGMA enable_verification;

CREATE TABLE integers (i INT, j INT, k INT);

INSERT INTO integers VALUES (2, 3, 5), (4, 5, 6), (2, 7, 6);

SELECT DISTINCT ON (i) i, j FROM integers ORDER BY i, j DESC;

SELECT DISTINCT ON (i) i, j FROM integers ORDER BY i, j;

SELECT DISTINCT ON (i) i, j FROM integers ORDER BY j DESC;

SELECT DISTINCT ON (i) i, j FROM integers ORDER BY j;

SELECT i, j, (SELECT DISTINCT ON (i) j) AS k FROM integers ORDER BY i, j;

SELECT i, j, (SELECT DISTINCT ON (i) j ORDER BY i, j DESC) AS k FROM integers ORDER BY i, j;

SELECT i, j, (SELECT DISTINCT ON (i) j ORDER BY i, k) AS k FROM integers ORDER BY i, j;

INSERT INTO integers VALUES (2, 3, 7), (4, 5, 11);

SELECT DISTINCT ON (i) i, j, k FROM integers ORDER BY i, j ASC, k ASC;

SELECT DISTINCT ON (i) i, j, k FROM integers ORDER BY i, j ASC, k DESC;

INSERT INTO integers VALUES (2, NULL, 27), (4, 88, NULL);

SELECT DISTINCT ON (i) i, j, k FROM integers ORDER BY i, j NULLS FIRST, k DESC;

SELECT DISTINCT ON (i) i, j, k FROM integers ORDER BY i, j NULLS FIRST, k NULLS FIRST;

SELECT DISTINCT ON (i) i, j, k FROM integers ORDER BY i, k NULLS FIRST, j NULLS FIRST;

CREATE TABLE foo (a REAL, b REAL);

INSERT INTO foo VALUES (1, 69), (1, 420), (2, 69), (2, 420);

SELECT DISTINCT ON (a) a, b FROM foo ORDER BY b ASC;

SELECT DISTINCT ON (a) a, b FROM foo ORDER BY b DESC;

CREATE TABLE example (id INT, person_id INT, address_id INT, effective_date DATE);

INSERT INTO example (id, person_id, address_id, effective_date) VALUES (1, 2, 1, '2000-01-01') /* Moved to first house */, (5, 2, 2, '2004-08-19') /* Went to uni */, (9, 2, 1, '2007-06-12') /* Moved back home */, (2, 4, 3, '2007-05-18') /* Moved to first house */, (3, 4, 4, '2016-02-09') /* Moved to new house */;

SELECT DISTINCT ON (person_id) * FROM example ORDER BY person_id, effective_date ASC;

SELECT DISTINCT ON (person_id) * FROM example ORDER BY person_id, effective_date DESC;

PRAGMA enable_verification;

CREATE TABLE T (t1 INT, t2 INT);

INSERT INTO t VALUES (1, 1), (1, 2);

SELECT DISTINCT t1 FROM T ORDER BY t1, t2;

SELECT DISTINCT ON (1) t1, t2 FROM T ORDER BY t1, t2;

SELECT DISTINCT t1 FROM T UNION SELECT DISTINCT t1 FROM T ORDER BY t1;

SELECT DISTINCT t1 FROM T UNION ALL SELECT DISTINCT t1 FROM T ORDER BY t1;

CREATE TABLE test (id INT, provider INT, record_key INT, record_rank INT, record_date INT);

EXPLAIN select record_key from (
select distinct on (id, provider) id, provider, record_key from test order by id, provider, record_rank desc, record_date
);

EXPLAIN select distinct on (id, provider) record_key from test order by id, provider, record_rank desc, record_date;

PRAGMA enable_verification;

CREATE TABLE foo (a INT, b INT);

INSERT INTO foo VALUES (1, 1), (2, 1), (2, 2);

SELECT * FROM (SELECT DISTINCT ON (a) a, b FROM foo ORDER BY a, b DESC) AS sub;

SELECT * FROM (SELECT DISTINCT ON (a) a, b FROM foo ORDER BY a, b DESC) AS sub WHERE b <> 2;

PRAGMA enable_verification;

CREATE TABLE test (a INT, b INT);

INSERT INTO test VALUES (11, 22), (13, 22), (11, 21), (11, 22);

SELECT DISTINCT a, b FROM test ORDER BY a, b;

SELECT DISTINCT test.a, b FROM test ORDER BY a, b;

SELECT DISTINCT a FROM test ORDER BY a;

SELECT DISTINCT b FROM test ORDER BY b;

SELECT DISTINCT a, SUM(B) FROM test GROUP BY a ORDER BY a;

SELECT DISTINCT MAX(b) FROM test GROUP BY a;

SELECT DISTINCT CASE WHEN a > 11 THEN 11 ELSE a END FROM test;

CREATE TABLE issue3056 AS (SELECT * FROM (VALUES (['TGTA']), (['CGGT']), (['CCTC']), (['TCTA']), (['AGGG']), (NULL)) AS tbl(genes));

PRAGMA enable_verification;

CREATE TABLE integers (i INT, j INT, k INT);

INSERT INTO integers VALUES (2, 3, 5), (4, 5, 6), (2, 7, 6);

SELECT DISTINCT ON (i) i, j FROM integers WHERE i <> 2;

SELECT DISTINCT ON (j) i, j FROM integers WHERE i <> 2;

SELECT DISTINCT ON (j, i) i, j FROM integers WHERE i <> 2;

SELECT DISTINCT ON (j + 1, i * 3) i, j FROM integers WHERE i <> 2;

SELECT DISTINCT ON (1) i, j FROM integers ORDER BY i;

SELECT DISTINCT ON (1) i, j FROM integers ORDER BY i LIMIT 1;

SELECT DISTINCT ON (1) i, j FROM integers ORDER BY i LIMIT 1 OFFSET 1;

SELECT DISTINCT ON (2) i, j FROM integers ORDER BY 2;

SELECT DISTINCT ON (2) j, k FROM integers ORDER BY 2;

SELECT DISTINCT ON (3) i, j, k FROM integers ORDER BY 2;

SELECT DISTINCT ON (3) i, j, k FROM integers ORDER BY 3;

SELECT DISTINCT ON (2) j, (SELECT i FROM integers WHERE i = 2 LIMIT 1) FROM integers ORDER BY 2;

SELECT DISTINCT ON (2) j, (SELECT DISTINCT ON (i) i FROM integers ORDER BY 1 LIMIT 1) FROM integers ORDER BY 2;

SELECT DISTINCT ON (i) i, j FROM integers ORDER BY j;

SELECT * FROM (SELECT DISTINCT ON (i) i, j FROM integers) AS tbl1 WHERE i <> 2;

SELECT DISTINCT ON (i) i, j FROM integers ORDER BY k;

SELECT DISTINCT ON (i) i, j, k FROM integers ORDER BY k;

SELECT DISTINCT ON (integers.i) i, j FROM integers ORDER BY 1, 2;

SELECT DISTINCT ON (i) integers.i, integers.j FROM integers ORDER BY 1, 2;

SELECT DISTINCT ON (integers.i) integers.i, integers.j FROM integers ORDER BY i, j;

SELECT DISTINCT ON (2) i FROM integers;

SELECT DISTINCT ON (i, 'literal') i FROM integers;

SET order_by_non_integer_literal = TRUE;

SELECT DISTINCT ON (i, 'literal') i FROM integers ORDER BY ALL;

PREPARE v1 AS select distinct on (?) 42;

PRAGMA enable_verification;

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (1), (2), (3);

SELECT DISTINCT i % 2 FROM integers ORDER BY 1;

SELECT DISTINCT i % 2 FROM integers WHERE i < 3 ORDER BY i;

SELECT DISTINCT ON (1) i % 2, i FROM integers WHERE i < 3 ORDER BY i;

SELECT DISTINCT integers.i FROM integers ORDER BY i DESC;

SELECT DISTINCT i FROM integers ORDER BY integers.i DESC;

SELECT DISTINCT integers.i FROM integers ORDER BY integers.i DESC;

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

PRAGMA verify_parallelism;

CREATE TABLE students (course TEXT, type TEXT, value BIGINT);

INSERT INTO students (course, type, value) VALUES ('CS', 'Bachelor', 34), ('CS', 'Bachelor', 34), ('CS', 'PhD', 12), ('Math', 'Masters', 12), ('CS', NULL, 10), ('CS', NULL, 12), ('Math', NULL, 12), ('Math', NULL, NULL);

SELECT GROUPING(course), course, SUM(DISTINCT value), COUNT(*) FROM students GROUP BY course ORDER BY ALL;

SELECT SUM(DISTINCT value), GROUPING_ID(course), course, COUNT(*) FROM students GROUP BY course ORDER BY ALL;

SELECT GROUPING(course), GROUPING(type), course, type, SUM(DISTINCT value), COUNT(*), SUM(DISTINCT value) FROM students GROUP BY course, type ORDER BY ALL;

SELECT GROUPING(course), GROUPING(type), AVG(DISTINCT value), course, type, COUNT(*), SUM(DISTINCT value) FROM students GROUP BY CUBE (course, type) ORDER BY ALL;

SELECT SUM(DISTINCT value), GROUPING(course, type), course, type, COUNT(*), SUM(DISTINCT value) FROM students GROUP BY CUBE (course, type) ORDER BY ALL;

SELECT GROUPING(course), GROUPING(type), SUM(DISTINCT value), GROUPING(course) + GROUPING(type), course, type, COUNT(DISTINCT value), COUNT(*) FROM students GROUP BY CUBE (course, type) ORDER BY ALL;

SELECT GROUPING(course, type, course, course, type, value, type, course), AVG(DISTINCT value), AVG(value), AVG(DISTINCT value), course, type, COUNT(*) FROM students GROUP BY CUBE (course, type, value) ORDER BY ALL;

SELECT GROUPING(students.course), GROUPING(students.type), SUM(DISTINCT value), GROUPING(course) + GROUPING(type), course, AVG(DISTINCT value), type, COUNT(*) FROM students GROUP BY CUBE (course, type, value) ORDER BY ALL;

SELECT GROUPING(course), GROUPING(type), AVG(value), GROUPING(course) + GROUPING(type), AVG(DISTINCT value), course, type, COUNT(*) FROM students GROUP BY CUBE (students.course, students.type) ORDER BY ALL;

SELECT GROUPING(course), GROUPING(value), course, SUM(DISTINCT value), COUNT(*) FROM students GROUP BY CUBE (course, value) HAVING GROUPING(course) = 0 ORDER BY ALL;

SELECT GROUPING(course), GROUPING(type), SUM(DISTINCT value), course, type, SUM(DISTINCT value), AVG(DISTINCT value), COUNT(*) FROM students GROUP BY CUBE (course, value, type, value) HAVING GROUPING(students.course) = 0 ORDER BY ALL;

SELECT type, COUNT(*), AVG(value), SUM(DISTINCT value), AVG(DISTINCT value) FROM students GROUP BY CUBE (value, type) ORDER BY GROUPING(value), GROUPING(type), 1, 2, 3, 4, 5;

WITH RECURSIVE t AS (SELECT 1 AS x UNION SELECT SUM(DISTINCT x + 1) FROM t WHERE x < 3 GROUP BY x) SELECT * FROM t ORDER BY x;

CREATE TABLE tbl AS SELECT i, i % 5 AS j FROM RANGE(0, 1000000) AS tbl(i);

PREPARE v1 AS SELECT SUM(DISTINCT i%5+?::INT) FROM tbl group by j order by all;

EXECUTE v1(1);

EXECUTE v1(2);

EXECUTE v1(3);

SELECT COUNT(DISTINCT i % 5) FROM tbl GROUP BY j;

SELECT COUNT(DISTINCT (SELECT i % 5)) FROM tbl GROUP BY j;

SELECT COUNT(DISTINCT (SELECT i % 5)) FROM tbl GROUP BY j;

CREATE TABLE lists_tbl AS SELECT i % 20 AS groups, [x + i FOR x IN RANGE(0, 280)] AS l FROM RANGE(0, 200000) AS tmp(i);

SELECT COUNT(l), AVG(groups), COUNT(DISTINCT l), groups FROM lists_tbl GROUP BY groups ORDER BY groups LIMIT 10;

CREATE TABLE strings_tbl AS SELECT UUID() AS strings, i AS groups FROM RANGE(0, 200000) AS tbl(i);

SELECT COUNT(strings), COUNT(DISTINCT strings) FROM strings_tbl GROUP BY groups ORDER BY groups LIMIT 10;

PRAGMA enable_verification;

PRAGMA verify_parallelism;

PRAGMA verify_external;

CALL dbgen(sf=1);

SELECT GROUPING(l_returnflag, l_linestatus), l_returnflag, l_linestatus, COUNT(DISTINCT l_orderkey), COUNT(DISTINCT l_comment) FROM lineitem GROUP BY CUBE (l_returnflag, l_linestatus) ORDER BY ALL;

SELECT COUNT(DISTINCT l_orderkey), COUNT(DISTINCT l_partkey), COUNT(*), MIN(l_orderkey), MAX(l_orderkey), MIN(l_partkey), MAX(l_partkey), SUM(distinct_comment), AVG(distinct_comment) FROM (SELECT l_orderkey, l_partkey, COUNT(DISTINCT l_comment) AS distinct_comment FROM lineitem GROUP BY CUBE (l_orderkey, l_partkey));

CREATE TABLE tbl AS SELECT i % CAST(50 AS BIGINT) AS i, i % CAST(5 AS BIGINT) AS j FROM RANGE(0, 1000000) AS tbl(i);

SELECT COUNT(DISTINCT i), MIN(DISTINCT i), MAX(DISTINCT i), SUM(DISTINCT i), PRODUCT(DISTINCT i) FROM tbl GROUP BY j ORDER BY ALL;

PRAGMA enable_verification;

PRAGMA verify_parallelism;

WITH evs AS (SELECT * FROM (VALUES ('1', '123', '7'), ('1', '456', '7')) AS t("id", "type", "value")) SELECT "id", COUNT(DISTINCT "value") FILTER(WHERE "type" = '456') AS type_456_count FROM evs GROUP BY "id";

CREATE OR REPLACE TABLE tbl AS SELECT * FROM (VALUES ([REPEAT('a', 1000000)]), ([REPEAT('a', 1000000)]), ([REPEAT('a', 1000000)]), ([REPEAT('a', 1000000)]), ([REPEAT('b', 1000000)]), ([REPEAT('b', 1000000)]), ([REPEAT('b', 1000000)]), ([REPEAT('b', 1000000)])) AS tbl(i);

SELECT (CAST(MIN(DISTINCT i) AS TEXT))[2 : 2] FROM tbl GROUP BY i ORDER BY ALL;

PRAGMA enable_verification;

PRAGMA verify_parallelism;

PRAGMA verify_external;

CREATE TABLE all_valid AS SELECT i % 81982 AS value, i % 20000 AS groups FROM RANGE(0, 200000) AS tbl(i);

CREATE TABLE with_nulls AS SELECT CASE WHEN i % 2343 = 0 THEN NULL ELSE i % 63423 END AS value, i % 20000 AS groups FROM RANGE(0, 200000) AS tbl(i);

CREATE TABLE mostly_nulls AS SELECT CASE WHEN i % 7 = 0 THEN i ELSE NULL END AS value, i % 20000 AS groups FROM RANGE(0, 200000) AS tbl(i);

SELECT AVG(DISTINCT value), SUM(DISTINCT value), AVG(value), COUNT(DISTINCT value) FROM all_valid GROUP BY groups ORDER BY groups;

SELECT AVG(DISTINCT value), SUM(DISTINCT value), AVG(value), COUNT(DISTINCT value) FROM with_nulls GROUP BY groups ORDER BY groups;

SELECT AVG(DISTINCT value), SUM(DISTINCT value), AVG(value), COUNT(DISTINCT value) FROM mostly_nulls GROUP BY groups ORDER BY groups;

CREATE TABLE all_distinct AS SELECT 1 AS value, i AS groups FROM RANGE(0, 200000) AS tbl(i);

SELECT SUM(DISTINCT value), COUNT(DISTINCT value), AVG(DISTINCT value), SUM(DISTINCT value) FROM all_distinct GROUP BY groups ORDER BY groups;

SELECT SUM(value), COUNT(value), AVG(value), SUM(value) FROM all_distinct GROUP BY groups ORDER BY groups;

PRAGMA enable_verification;

PRAGMA verify_parallelism;

PRAGMA threads = 4;

PRAGMA memory_limit = '4gb';

CALL dbgen(sf=1);

SELECT l_comment, COUNT(DISTINCT l_orderkey) FROM lineitem GROUP BY 1 ORDER BY ALL DESC LIMIT 10;

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

PRAGMA verify_parallelism;

CREATE TABLE students (course TEXT, type TEXT, value BIGINT);

INSERT INTO students (course, type, value) VALUES ('CS', 'Bachelor', 20), ('CS', 'Bachelor', 10), ('CS', 'PhD', -20), ('Math', 'Masters', 10), ('CS', NULL, -15), ('CS', NULL, 10), ('Math', NULL, 15);

SELECT course, type, COUNT(*), SUM(DISTINCT value) FROM students GROUP BY course, type ORDER BY ALL;

SELECT course, type, COUNT(*), SUM(DISTINCT value) FROM students GROUP BY (course, type) ORDER BY ALL;

SELECT course, COUNT(*), SUM(DISTINCT value) FROM students GROUP BY (), course, () ORDER BY ALL;

SELECT COUNT(*), course, type, SUM(DISTINCT value) FROM students GROUP BY GROUPING SETS ((course), (type)) ORDER BY ALL;

SELECT SUM(DISTINCT value), COUNT(*), course, AVG(DISTINCT value), type FROM students GROUP BY GROUPING SETS (course), GROUPING SETS (type) ORDER BY ALL;

SELECT SUM(DISTINCT value), COUNT(*), COUNT(DISTINCT value), course, type FROM students GROUP BY course, GROUPING SETS (type) ORDER BY ALL;

SELECT SUM(DISTINCT value), COUNT(*), COUNT(DISTINCT value), course, type FROM students GROUP BY course, GROUPING SETS (type) ORDER BY ALL;

SELECT SUM(DISTINCT value), COUNT(*), course, type FROM students GROUP BY GROUPING SETS ((course, type), (course)) ORDER BY ALL;

SELECT SUM(DISTINCT value), COUNT(*), course, type FROM students GROUP BY GROUPING SETS ((course, type), (course)) ORDER BY ALL;

SELECT SUM(DISTINCT value), COUNT(*), course, type FROM students GROUP BY GROUPING SETS ((course, type), (course)) ORDER BY ALL;

SELECT COUNT(*), SUM(DISTINCT value), course, type FROM students GROUP BY GROUPING SETS ((course), (), (type)) ORDER BY ALL;

SELECT COUNT(*), COUNT(DISTINCT value), SUM(DISTINCT value), course, type FROM students GROUP BY GROUPING SETS (course, ()), GROUPING SETS (type) ORDER BY ALL;

SELECT SUM(DISTINCT value), COUNT(*), course, type, SUM(DISTINCT value) FROM students GROUP BY type, GROUPING SETS (course, ()) ORDER BY ALL;

SELECT SUM(DISTINCT value) FILTER(WHERE value % 10 <> 0), COUNT(*), course, type, SUM(DISTINCT value) FROM students GROUP BY GROUPING SETS ((course, type), (type)) ORDER BY ALL;

SELECT COUNT(*), SUM(DISTINCT value), course, type FROM students GROUP BY GROUPING SETS ((3, 4), (4)) ORDER BY ALL;

SELECT COUNT(*), course AS crs, SUM(DISTINCT value), type AS tp FROM students GROUP BY GROUPING SETS ((crs, tp), (tp)) ORDER BY ALL;

SELECT COUNT(*), course AS crs, SUM(DISTINCT value), type AS tp FROM students GROUP BY GROUPING SETS ((crs, tp), (tp)) ORDER BY ALL;

SET threads = 1;

SELECT course, type, COUNT(*), SUM(DISTINCT value) FROM students GROUP BY course, type ORDER BY ALL;

PRAGMA verify_parallelism;

CREATE TABLE tbl AS SELECT i % 100 AS few, i % 100000 AS many, i % 5 AS groups FROM RANGE(0, 1000000) AS tbl(i);

SELECT COUNT(DISTINCT few) FROM tbl GROUP BY groups;

SELECT COUNT(DISTINCT many) FROM tbl GROUP BY groups;

SELECT COUNT(DISTINCT few), COUNT(DISTINCT many) FROM tbl GROUP BY groups;

SELECT COUNT(DISTINCT many), COUNT(DISTINCT few) FROM tbl GROUP BY groups;

SELECT COUNT(DISTINCT many), COUNT(few), COUNT(DISTINCT few) FROM tbl GROUP BY groups;

PRAGMA enable_verification;

PRAGMA verify_parallelism;

PRAGMA verify_external;

CREATE TABLE test (a INT, b INT);

INSERT INTO test VALUES (11, 22), (12, 19), (13, 23), (13, 22), (12, 21), (12, 19);

SELECT b, SUM(DISTINCT a), SUM(DISTINCT a + 2), AVG(a) FROM test GROUP BY b ORDER BY b;

CREATE TABLE distinct_sum AS SELECT CAST(((RANDOM() * 100) % 2) AS BIGINT) AS i, (i % 10) AS j FROM RANGE(0, 1000000) AS tbl(i);

PRAGMA threads = 8;

SELECT SUM(DISTINCT i) FROM distinct_sum GROUP BY j ORDER BY j;

PRAGMA threads = 1;

SELECT SUM(DISTINCT i) FROM distinct_sum GROUP BY j ORDER BY j;

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

PRAGMA verify_parallelism;

CREATE TABLE strings (g INT, x TEXT, y TEXT);

INSERT INTO strings VALUES (1, 'a', '/'), (1, 'b', '-'), (2, 'i', '/'), (2, NULL, '-'), (2, 'j', '+'), (3, 'p', '/'), (4, 'x', '/'), (4, 'y', '-'), (4, 'z', '+');

SELECT g, GROUP_CONCAT(DISTINCT y, ',' ORDER BY y DESC) FILTER(WHERE g < 4) FROM strings GROUP BY g ORDER BY 1;

SELECT g, COUNT(y), GROUP_CONCAT(DISTINCT y, ',' ORDER BY y DESC) FILTER(WHERE g < 4), SUM(1) FROM strings GROUP BY g ORDER BY 1;

SELECT g, GROUP_CONCAT(DISTINCT y ORDER BY y, '_') FILTER(WHERE g < 4) FROM strings GROUP BY g ORDER BY 1;

SET order_by_non_integer_literal = TRUE;

SELECT g, GROUP_CONCAT(DISTINCT y ORDER BY y, '_') FILTER(WHERE g < 4) FROM strings GROUP BY g ORDER BY 1;

PRAGMA enable_verification;

PRAGMA verify_external;

CREATE TABLE tbl AS (SELECT i % 50 AS i, i % 100 AS j FROM RANGE(0, 50000) AS tbl(i));

SELECT COUNT(DISTINCT i) FROM tbl;

SELECT SUM(DISTINCT i), SUM(i), SUM(j) FROM tbl;

SELECT SUM(i), SUM(j), SUM(DISTINCT i) FROM tbl;

SELECT SUM(i), SUM(DISTINCT i), SUM(j) FROM tbl;

SELECT SUM(DISTINCT i), COUNT(j), SUM(DISTINCT j) FROM tbl;

SELECT SUM(j), SUM(DISTINCT i), COUNT(j), SUM(DISTINCT j) FROM tbl;

SELECT SUM(j), SUM(DISTINCT i), COUNT(j), SUM(DISTINCT j) FROM tbl;

SELECT SUM(DISTINCT i), COUNT(j), SUM(DISTINCT j), SUM(j) FROM tbl;

SELECT COUNT(DISTINCT i) FILTER(WHERE i >= 20) FROM tbl;

SELECT SUM(DISTINCT i), SUM(i) FILTER(WHERE j < 20), SUM(j) FILTER(WHERE i >= 20) FROM tbl;

SELECT SUM(i), SUM(j) FILTER(WHERE j = 0), SUM(DISTINCT i) FILTER(WHERE i = 0) FROM tbl;

SELECT SUM(i) FILTER(WHERE j = 5), SUM(DISTINCT i), SUM(j) FILTER(WHERE i = 5) FROM tbl;

SELECT SUM(DISTINCT i) FILTER(WHERE i = 5), COUNT(j), SUM(DISTINCT j) FILTER(WHERE i = 5) FROM tbl;

SELECT SUM(j) FILTER(WHERE j = 5), SUM(DISTINCT i) FILTER(WHERE j = 5), COUNT(j), SUM(DISTINCT j) FROM tbl;

SELECT SUM(j) FILTER(WHERE i = 5), SUM(DISTINCT i), COUNT(j), SUM(DISTINCT j) FILTER(WHERE j = 5) FROM tbl;

SELECT SUM(DISTINCT i), COUNT(j), SUM(DISTINCT j) FILTER(WHERE j = 5), SUM(j) FILTER(WHERE j = 5) FROM tbl;

SET default_null_order = 'nulls_first';

WITH RECURSIVE t AS (SELECT 1 AS x UNION SELECT SUM(DISTINCT x + 1) FROM t WHERE x < 3) SELECT * FROM t ORDER BY x;

CREATE TABLE tbl AS SELECT * FROM RANGE(0, 1000000) AS tbl(i);

PREPARE v1 AS SELECT SUM(DISTINCT i%5+?::INT) FROM tbl;

EXECUTE v1(1);

EXECUTE v1(2);

EXECUTE v1(3);

SELECT COUNT(DISTINCT i % 5) FROM tbl;

SELECT COUNT(DISTINCT (SELECT i % 5)) FROM tbl;

SELECT COUNT(DISTINCT (SELECT i % 5)) FROM tbl;

PRAGMA verify_parallelism;

CREATE TABLE tbl AS SELECT i % 100 AS few, i % 100000 AS many FROM RANGE(0, 1000000) AS tbl(i);

SELECT COUNT(DISTINCT few) FROM tbl;

SELECT COUNT(DISTINCT many) FROM tbl;

SELECT COUNT(DISTINCT few), COUNT(DISTINCT many) FROM tbl;

SELECT COUNT(DISTINCT many), COUNT(DISTINCT few) FROM tbl;

SELECT COUNT(DISTINCT many), COUNT(few), COUNT(DISTINCT few) FROM tbl;

CREATE TABLE tbl AS SELECT i % 50 AS i FROM RANGE(0, 1000000) AS tbl(i);

SELECT COUNT(DISTINCT i), MIN(DISTINCT i), MAX(DISTINCT i), SUM(DISTINCT i), PRODUCT(DISTINCT i) FROM tbl;

PRAGMA verify_external;

CREATE TABLE test AS (SELECT CASE WHEN r1 % 4 = 0 THEN NULL ELSE 'thisisalongstring' || r1 END AS my_string, CASE WHEN r2 % 8 = 0 THEN NULL ELSE {'x': 'thisisalongstring' || r2} END AS my_struct, CASE WHEN r3 % 16 = 0 THEN NULL ELSE ['thisisalongstring' || r3] END AS my_list FROM (SELECT * FROM RANGE(0, 128) AS r1(r1) ORDER BY RANDOM()) CROSS JOIN (SELECT * FROM RANGE(0, 128) AS r2(r2) ORDER BY RANDOM()) CROSS JOIN (SELECT * FROM RANGE(0, 128) AS r3(r3) ORDER BY RANDOM()));

SELECT COUNT(*) FROM (SELECT DISTINCT * FROM test);

create table random as select hash(range + 42) % 10_000_000 rand from range(10_000_000);

PRAGMA threads = 4;

CREATE TABLE t1 (c0 BIGINT, c1 BIGINT, c2 BIGINT, c3 TEXT);

INSERT INTO t1 SELECT rand AS c0, rand AS c1, rand AS c2, CONCAT(CAST(rand AS TEXT), REPEAT('0', 50)) AS c3 FROM random;

SET disabled_optimizers = 'compressed_materialization';

PRAGMA memory_limit = '1.5GB';

SELECT COUNT(*) FROM (SELECT DISTINCT * FROM t1);

INSERT INTO t1 SELECT range AS c0, range AS c1, range AS c2, CONCAT(CAST(range AS TEXT), REPEAT('0', 300000)) AS c3 FROM RANGE(0, 100);

SELECT COUNT(*) FROM (SELECT DISTINCT * FROM t1);

CREATE TABLE t1 (c0 BIGINT, c1 BIGINT, c2 BIGINT, c3 BIGINT);

INSERT INTO t1 SELECT range AS c0, range AS c1, range AS c2, range AS c3 FROM (SELECT * FROM (SELECT * FROM RANGE(0, 1500000) UNION ALL SELECT range % 2048 FROM RANGE(0, 1500000) UNION ALL SELECT * FROM RANGE(0, 1500000)));

SET disabled_optimizers = 'compressed_materialization';

SET threads = 4;

PRAGMA memory_limit = '400mb';

SELECT COUNT(*) FROM (SELECT DISTINCT * FROM t1);

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

PRAGMA verify_external;

CREATE TABLE integers (g INT, i INT);

INSERT INTO integers VALUES (0, 1), (0, 2), (1, 3), (1, NULL);

SELECT g, SUM(i) FROM integers GROUP BY ALL ORDER BY 1;

SELECT SUM(i), g FROM integers GROUP BY ALL ORDER BY 2;

SELECT g, SUM(i) FROM integers GROUP BY * ORDER BY 1;

SELECT g, SUM(i) FROM integers GROUP BY 1 ORDER BY ALL;

SELECT g, SUM(i) FROM integers GROUP BY 1 ORDER BY *;

SELECT g, SUM(i), COUNT(*), COUNT(i), SUM(g) FROM integers GROUP BY ALL ORDER BY 1;

SELECT i % 2, SUM(i), SUM(g) FROM integers GROUP BY ALL ORDER BY 1;

SELECT i % 2, SUM(i), SUM(g) FROM integers GROUP BY 1 ORDER BY 1;

SELECT i % 2, SUM(i), SUM(g) FROM integers GROUP BY i ORDER BY 1 NULLS FIRST, 2;

SELECT (g + i) % 2, SUM(i), SUM(g) FROM integers GROUP BY ALL ORDER BY 1 NULLS FIRST;

SELECT (g + i) % 2, SUM(i), SUM(g) FROM integers GROUP BY 1 ORDER BY 1 NULLS FIRST;

SELECT (g + i) % 2, SUM(i), SUM(g) FROM integers GROUP BY g, i ORDER BY 1 NULLS FIRST, 2;

SELECT (g + i) % 2 + SUM(i), SUM(i), SUM(g) FROM integers GROUP BY ALL ORDER BY 1;

SELECT g, i, g % 2, SUM(i), SUM(g) FROM integers GROUP BY 1, 2, 3 ORDER BY 1, 2, 3, 4;

SELECT g, i, g % 2, SUM(i), SUM(g) FROM integers GROUP BY ALL ORDER BY 1, 2 NULLS FIRST, 3, 4;

PRAGMA enable_verification;

SELECT * FROM (SELECT 1) AS t0(c0) GROUP BY c0 HAVING c0 > 0;

SELECT c0 FROM (SELECT 1) AS t0(c0) GROUP BY ALL HAVING c0 > 0;

SELECT c0 FROM (SELECT 1, 1 UNION ALL SELECT 1, 2) AS t0(c0, c1) GROUP BY ALL ORDER BY c0;

SELECT c0 FROM (SELECT 1, 1 UNION ALL SELECT 1, 2) AS t0(c0, c1) GROUP BY ALL HAVING c1 > 0 ORDER BY c0;

PRAGMA enable_verification;

PRAGMA verify_external;

CREATE TABLE integers (g INT, i INT);

INSERT INTO integers VALUES (0, 1), (0, 2), (1, 3), (1, NULL);

SELECT SUM(i) FROM integers;

SELECT SUM(i) FROM integers GROUP BY ALL;

SELECT SUM(i) FROM integers GROUP BY ALL ORDER BY ALL;

SELECT SUM(i) FROM integers GROUP BY ALL ORDER BY g;

SELECT g, SUM(i) FROM integers GROUP BY ALL ORDER BY g;

PRAGMA enable_verification;

CREATE TABLE t (t_k0 TINYINT);

INSERT INTO t VALUES (-128), (127);

SELECT t_k0, COUNT(*) FROM t GROUP BY t_k0 ORDER BY 1;

DROP TABLE t;

CREATE TABLE t (t_k0 SMALLINT);

INSERT INTO t VALUES (-32768), (32767);

SELECT t_k0, COUNT(*) FROM t GROUP BY t_k0 ORDER BY 1;

DROP TABLE t;

CREATE TABLE t (t_k0 INT);

INSERT INTO t VALUES (-2147483648), (2147483647);

SELECT t_k0, COUNT(*) FROM t GROUP BY t_k0 ORDER BY 1;

DROP TABLE t;

CREATE TABLE t (t_k0 BIGINT);

INSERT INTO t VALUES (-9223372036854775808), (9223372036854775807);

SELECT t_k0, COUNT(*) FROM t GROUP BY t_k0 ORDER BY 1;

DROP TABLE t;

CREATE TABLE t (t_k0 INT128);

INSERT INTO t VALUES (-170141183460469231731687303715884105728), (170141183460469231731687303715884105727);

SELECT t_k0, COUNT(*) FROM t GROUP BY t_k0 ORDER BY 1;

DROP TABLE t;

CREATE TABLE t (t_k0 UTINYINT);

INSERT INTO t VALUES (0), (255);

SELECT t_k0, COUNT(*) FROM t GROUP BY t_k0 ORDER BY 1;

DROP TABLE t;

CREATE TABLE t (t_k0 USMALLINT);

INSERT INTO t VALUES (0), (65535);

SELECT t_k0, COUNT(*) FROM t GROUP BY t_k0 ORDER BY 1;

DROP TABLE t;

CREATE TABLE t (t_k0 UINTEGER);

INSERT INTO t VALUES (0), (4294967295);

SELECT t_k0, COUNT(*) FROM t GROUP BY t_k0 ORDER BY 1;

DROP TABLE t;

CREATE TABLE t (t_k0 UBIGINT);

INSERT INTO t VALUES (0), (18446744073709551615);

SELECT t_k0, COUNT(*) FROM t GROUP BY t_k0 ORDER BY 1;

DROP TABLE t;

CREATE TABLE t (t_k0 UINT128);

INSERT INTO t VALUES (0), (CAST('340282366920938463463374607431768211455' AS UINT128));

SELECT t_k0, COUNT(*) FROM t GROUP BY t_k0 ORDER BY 1;

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

PRAGMA verify_external;

CREATE TABLE test (a INT, b INT);

INSERT INTO test VALUES (11, 22), (13, 22), (12, 21);

SELECT SUM(SUM(41)), COUNT(*);

SELECT SUM(a), COUNT(*), AVG(a) FROM test;

SELECT COUNT(*) FROM test;

SELECT SUM(a), COUNT(*) FROM test WHERE a = 11;

SELECT SUM(a), SUM(b), SUM(a) + SUM(b) FROM test;

SELECT SUM(a + 2), SUM(a) + 2 * COUNT(*) FROM test;

SELECT b, SUM(a), SUM(a + 2), AVG(a) FROM test GROUP BY b ORDER BY b;

SELECT b, SUM(a) FROM test GROUP BY b ORDER BY COUNT(a);

SELECT b, SUM(a) FROM test GROUP BY b ORDER BY COUNT(a) DESC;

SELECT b, SUM(a), COUNT(*), SUM(a + 2) FROM test GROUP BY b ORDER BY b;

SELECT b % 2 AS f, SUM(a) FROM test GROUP BY f ORDER BY f;

SELECT b, SUM(a), COUNT(*), SUM(a + 2) FROM test WHERE a <= 12 GROUP BY b ORDER BY b;

SELECT b % 2 AS f, COUNT(SUM(a)) FROM test GROUP BY f;

INSERT INTO test VALUES (12, 21), (12, 21), (12, 21);

SELECT b, SUM(a), COUNT(*), SUM(a + 2) FROM test WHERE a <= 12 GROUP BY b ORDER BY b;

CREATE TABLE integers (i INT, j INT);

INSERT INTO integers VALUES (3, 4), (3, 4), (2, 4);

SELECT i, i + 10 FROM integers GROUP BY i ORDER BY i;

SELECT i, SUM(j), j FROM integers GROUP BY i ORDER BY i;

SELECT i, SUM(j), FIRST(j) FROM integers GROUP BY i ORDER BY i;

SELECT i, SUM(j), LAST(j) FROM integers GROUP BY i ORDER BY i;

SELECT 1 AS k, SUM(i) FROM integers GROUP BY k ORDER BY 2;

SELECT 1 AS i, SUM(i) FROM integers GROUP BY i ORDER BY 2;

SELECT i % 2 AS k, SUM(i) FROM integers GROUP BY k, k ORDER BY 1;

DROP TABLE integers;

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (1), (2), (3), (NULL);

SELECT i, SUM(i) FROM integers GROUP BY i ORDER BY 1;

SELECT i, i % 2 AS i, SUM(i) FROM integers GROUP BY i ORDER BY 1;

SELECT 1 AS k, SUM(i) FROM integers GROUP BY k + 1 ORDER BY 2;

SELECT test.b, SUM(a) FROM test GROUP BY b ORDER BY COUNT(a) DESC;

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (1), (2), (3), (NULL);

SELECT i % 2 AS k, SUM(i) FROM integers WHERE NOT i IS NULL GROUP BY k HAVING k > 0;

SELECT i % 2 AS k, SUM(i) FROM integers WHERE NOT i IS NULL GROUP BY k HAVING i % 2 > 0;

SELECT i % 2 AS k, SUM(i) FROM integers WHERE NOT i IS NULL GROUP BY 1 HAVING i % 2 > 0;

SELECT i % 2 AS k, SUM(i) FROM integers WHERE NOT i IS NULL GROUP BY 42 HAVING i % 2 > 0;

SELECT i, i % 2 AS i, SUM(i) FROM integers GROUP BY i ORDER BY i, 3;

SELECT i, i % 2 AS k, SUM(i) FROM integers GROUP BY i ORDER BY k, 3;

SELECT i, i % 2 AS k, SUM(i) FROM integers GROUP BY i ORDER BY i;

SELECT i % 2 AS k, SUM(k) FROM integers GROUP BY k;

SELECT i, SUM(i) FROM integers GROUP BY i ORDER BY i;

SELECT (10 - i) AS k, SUM(i) FROM integers GROUP BY k ORDER BY i;

SELECT (10 - i) AS k, SUM(i) FROM integers GROUP BY k ORDER BY FIRST(i);

PRAGMA enable_verification;

CREATE TABLE tbl (i INT);

SELECT * FROM tbl GROUP BY "DEFAULT";

SELECT * FROM tbl GROUP BY SUM(41);

PRAGMA enable_verification;

PRAGMA verify_external;

CREATE TABLE test (a TEXT, b INT);

INSERT INTO test VALUES ('helloworld', 22), ('thisisalongstring', 22), ('helloworld', 21);

SELECT a, SUM(b) FROM test GROUP BY a ORDER BY a;

CREATE TABLE integers (i INT, j INT, k INT);

INSERT INTO integers VALUES (1, 1, 2), (1, 2, 2), (1, 1, 2), (2, 1, 2), (1, 2, 4), (1, 2, NULL);

SELECT i, j, SUM(k), COUNT(*), COUNT(k) FROM integers GROUP BY i, j ORDER BY 1, 2;

SET default_null_order = 'nulls_first';

SET default_null_order = 'nulls_first';

CREATE ${storage_type} intlists AS SELECT * FROM (VALUES
(21, [1]),
(22, [NULL]),
(23, []),
(24, [2, 3]),
(NULL::INTEGER, [13]),
(32, [NULL]),
(34, [2, 3])
) lv(v, k);

SELECT k, SUM(v) FROM intlists GROUP BY k ORDER BY 2;

SELECT k, LEAST(v, 21) AS c, SUM(v) FROM intlists GROUP BY k, c ORDER BY 2, 3;

CREATE ${storage_type} strlists AS SELECT * FROM (VALUES
(21, ['a']),
(22, [NULL]),
(23, []),
(24, ['Branta Canadensis', 'c']),
(NULL::INTEGER, ['Somateria mollissima']),
(32, [NULL]),
(34, ['Branta Canadensis', 'c'])
) lv(v, k);

SELECT k, SUM(v) FROM strlists GROUP BY k ORDER BY 2;

SELECT k, LEAST(v, 21) AS c, SUM(v) FROM strlists GROUP BY k, c ORDER BY 2, 3;

CREATE ${storage_type} structs AS SELECT * FROM (VALUES
(21, {'x': 1, 'y': 'a'}),
(22, {'x': NULL, 'y': NULL}),
(23, {'x': 0, 'y': ''}),
(24, {'x': 2, 'y': 'c'}),
(NULL::INTEGER, {'x': 13, 'y': 'Somateria mollissima'}),
(32, {'x': NULL, 'y': NULL}),
(34, {'x': 2, 'y': 'c'})
) sv(v, k);

SELECT k, SUM(v) FROM structs GROUP BY k ORDER BY 2;

SELECT k, LEAST(v, 21) AS c, SUM(v) FROM structs GROUP BY k, c ORDER BY 2, 3;

CREATE ${storage_type} struct_lint_lstr AS SELECT * FROM (VALUES
(21, {'x': [1], 'y': ['a']}),
(22, {'x': [NULL], 'y': [NULL]}),
(23, {'x': [], 'y': []}),
(24, {'x': [2, 3], 'y': ['Branta Canadensis', 'c']}),
(NULL::INTEGER, {'x': [13], 'y': ['Somateria mollissima']}),
(32, {'x': [NULL], 'y': [NULL]}),
(34, {'x': [2, 3], 'y': ['Branta Canadensis', 'c']})
) sv(v, k);

SELECT k, SUM(v) FROM struct_lint_lstr GROUP BY k ORDER BY 2;

SELECT k, LEAST(v, 21) AS c, SUM(v) FROM struct_lint_lstr GROUP BY k, c ORDER BY 2, 3;

CREATE ${storage_type} r2l3r4l5i4i2l3v AS SELECT * FROM (VALUES
(21, {'x': [{'l4': [51], 'i4': 41}], 'y': ['a']}),
(22, {'x': [NULL], 'y': [NULL]}),
(23, {'x': [], 'y': []}),
(24, {'x': [{'l4': [52, 53], 'i4': 42}, {'l4': [54, 55], 'i4': 43}], 'y': ['Branta Canadensis', 'c']}),
(NULL::INTEGER, {'x': [{'l4': [62], 'i4': 47}], 'y': ['Somateria mollissima']}),
(32, {'x': [NULL], 'y': [NULL]}),
(34, {'x': [{'l4': [52, 53], 'i4': 42}, {'l4': [54, 55], 'i4': 43}], 'y': ['Branta Canadensis', 'c']})
) sv(v, k);

SELECT k, SUM(v) FROM r2l3r4l5i4i2l3v GROUP BY k ORDER BY 2;

SELECT k, LEAST(v, 21) AS c, SUM(v) FROM r2l3r4l5i4i2l3v GROUP BY k, c ORDER BY 2, 3;

CREATE ${storage_type} longlists AS
SELECT *
FROM ((VALUES
(21, [1]),
(22, [NULL]),
(23, []),
(NULL::INTEGER, [13]),
(32, [NULL])
)
UNION ALL
select 24 as i, list(r) as pk from range(2000) tbl(r)
UNION ALL
select 34 as i, list(r) as pk from range(2000) tbl(r)
) sv(v, k);

SELECT k, SUM(v) FROM longlists GROUP BY k ORDER BY 2;

SELECT k, LEAST(v, 21) AS c, SUM(v) FROM longlists GROUP BY k, c ORDER BY 2, 3;

SELECT [1, 2, 3] AS a, COUNT(*) FROM RANGE(0, 5) AS tbl(b) GROUP BY a;

SELECT {'x': 1, 'y': 2, 'z': 3} AS a, COUNT(*) FROM RANGE(0, 5) AS tbl(b) GROUP BY a;

DROP ${storage_type} intlists;

DROP ${storage_type} strlists;

DROP ${storage_type} structs;

DROP ${storage_type} struct_lint_lstr;

DROP ${storage_type} r2l3r4l5i4i2l3v;

PRAGMA threads = 4;

PRAGMA verify_external;

CREATE TEMPORARY TABLE d AS SELECT range % 100 AS g, 42 AS p FROM RANGE(0, 10000000);

SELECT g, COUNT(*), MIN(p), MAX(p) AS c FROM d GROUP BY g ORDER BY g LIMIT 10;

DROP TABLE d;

CREATE TEMPORARY TABLE d AS SELECT range % 100000 AS g, 42 AS p FROM RANGE(0, 10000000);

SELECT g, COUNT(*), MIN(p), MAX(p) AS c FROM d GROUP BY g ORDER BY g LIMIT 10;

DROP TABLE d;

CREATE TEMPORARY TABLE d AS SELECT range % 1000000 AS g, 42 AS p FROM RANGE(0, 1000000);

SELECT g, COUNT(*), MIN(p), MAX(p) AS c FROM d GROUP BY g ORDER BY g LIMIT 10;

SET default_null_order = 'nulls_first';

CREATE TABLE integers (i INT, j INT);

INSERT INTO integers VALUES (3, 4), (NULL, 4), (2, 4);

SELECT i, SUM(j) FROM integers GROUP BY i ORDER BY i;

CALL dbgen(sf=0.01);

PRAGMA verify_external;

SELECT l_returnflag, l_linestatus, SUM(l_quantity) AS sum_qty, SUM(l_extendedprice) AS sum_base_price, SUM(l_extendedprice * (1 - l_discount)) AS sum_disc_price, SUM(l_extendedprice * (1 - l_discount) * (1 + l_tax)) AS sum_charge, AVG(l_quantity) AS avg_qty, AVG(l_extendedprice) AS avg_price, AVG(l_discount) AS avg_disc, COUNT(*) AS count_order FROM lineitem WHERE l_shipdate <= CAST('1998-09-02' AS DATE) GROUP BY ALL ORDER BY ALL;

SELECT l_orderkey, SUM(l_extendedprice * (1 - l_discount)) AS revenue, o_orderdate, o_shippriority FROM customer, orders, lineitem WHERE c_mktsegment = 'BUILDING' AND c_custkey = o_custkey AND l_orderkey = o_orderkey AND o_orderdate < CAST('1995-03-15' AS DATE) AND l_shipdate > CAST('1995-03-15' AS DATE) GROUP BY l_orderkey, o_orderdate, o_shippriority ORDER BY revenue DESC, o_orderdate LIMIT 10;

SELECT c_custkey, c_name, SUM(l_extendedprice * (1 - l_discount)) AS revenue, c_acctbal, n_name, c_address, c_phone, c_comment FROM customer, orders, lineitem, nation WHERE c_custkey = o_custkey AND l_orderkey = o_orderkey AND o_orderdate >= CAST('1993-10-01' AS DATE) AND o_orderdate < CAST('1994-01-01' AS DATE) AND l_returnflag = 'R' AND c_nationkey = n_nationkey GROUP BY c_custkey, c_name, c_acctbal, c_phone, n_name, c_address, c_comment ORDER BY revenue DESC LIMIT 20;

SELECT c_count, COUNT(*) AS custdist FROM (SELECT c_custkey, COUNT(o_orderkey) FROM customer LEFT OUTER JOIN orders ON c_custkey = o_custkey AND NOT o_comment LIKE '%special%requests%' GROUP BY c_custkey) AS c_orders(c_custkey, c_count) GROUP BY c_count ORDER BY custdist DESC, c_count DESC;

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

CREATE TABLE students (course TEXT, type TEXT, highest_grade INT);

INSERT INTO students (course, type, highest_grade) VALUES ('CS', 'Bachelor', 8), ('CS', 'Bachelor', 8), ('CS', 'PhD', 10), ('Math', 'Masters', NULL), ('CS', NULL, 7), ('CS', NULL, 7), ('Math', NULL, 8);

SELECT course, COUNT(*) FROM students GROUP BY CUBE (course) ORDER BY 1, 2;

SELECT course, type, COUNT(*) FROM students GROUP BY CUBE (course, type) ORDER BY 1, 2, 3;

SELECT course, type, COUNT(*) FROM students GROUP BY CUBE ((course, type)) ORDER BY 1, 2, 3;

SELECT course, type, COUNT(*) FROM students GROUP BY CUBE (course, type, course) ORDER BY 1, 2, 3;

SELECT course, type, highest_grade, COUNT(*) FROM students GROUP BY CUBE (course, type, highest_grade) ORDER BY 1, 2, 3, 4;

SELECT course, type, COUNT(*) FROM students GROUP BY CUBE (course), CUBE (type) ORDER BY 1, 2, 3;

SELECT course AS crs, type, COUNT(*) FROM students GROUP BY (), type, CUBE (crs) ORDER BY 1, 2, 3;

SELECT course AS crs, type, COUNT(*) FROM students GROUP BY (), type, CUBE (crs) ORDER BY 1, 2, 3;

SELECT course, COUNT(*) FROM students GROUP BY WITH CUBE ORDER BY 1, 2;

SELECT course, COUNT(*) FROM students GROUP BY WITH CUBE ORDER BY 1, 2;

SELECT course, COUNT(*) FROM students GROUP BY CUBE (GROUPING_SETS(course)) ORDER BY 1, 2;

SELECT course, type, COUNT(*) FROM students GROUP BY CUBE (course, type, course, type, course, type, course, type, course, type, course, type, (course, type), (course, type), course, type) ORDER BY 1, 2, 3;

SELECT course, type, COUNT(*) FROM students GROUP BY CUBE (course, type, course, type, course), CUBE (type, course, type, course), CUBE (type, course, type, (course, type), (course, type), course, type) ORDER BY 1, 2, 3;

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

CREATE TABLE students (course TEXT, type TEXT);

INSERT INTO students (course, type) VALUES ('CS', 'Bachelor'), ('CS', 'Bachelor'), ('CS', 'PhD'), ('Math', 'Masters'), ('CS', NULL), ('CS', NULL), ('Math', NULL);

SELECT GROUPING(course), course, COUNT(*) FROM students GROUP BY course ORDER BY 1, 2, 3;

SELECT GROUPING_ID(course), course, COUNT(*) FROM students GROUP BY course ORDER BY 1, 2, 3;

SELECT GROUPING(course), GROUPING(type), course, type, COUNT(*) FROM students GROUP BY course, type ORDER BY 1, 2, 3, 4, 5;

SELECT GROUPING(course), GROUPING(type), course, type, COUNT(*) FROM students GROUP BY CUBE (course, type) ORDER BY 1, 2, 3, 4, 5;

SELECT GROUPING(course, type), course, type, COUNT(*) FROM students GROUP BY CUBE (course, type) ORDER BY 1, 2, 3, 4;

SELECT GROUPING(course), GROUPING(type), GROUPING(course) + GROUPING(type), course, type, COUNT(*) FROM students GROUP BY CUBE (course, type) ORDER BY 1, 2, 3, 4, 5;

SELECT GROUPING(course, type, course, course, type, type, course), course, type, COUNT(*) FROM students GROUP BY CUBE (course, type) ORDER BY 1, 2, 3, 4;

SELECT GROUPING(students.course), GROUPING(students.type), GROUPING(course) + GROUPING(type), course, type, COUNT(*) FROM students GROUP BY CUBE (course, type) ORDER BY 1, 2, 3, 4, 5;

SELECT GROUPING(course), GROUPING(type), GROUPING(course) + GROUPING(type), course, type, COUNT(*) FROM students GROUP BY CUBE (students.course, students.type) ORDER BY 1, 2, 3, 4, 5;

SELECT GROUPING(course), GROUPING(type), course, type, COUNT(*) FROM students GROUP BY CUBE (course, type) HAVING GROUPING(course) = 0 ORDER BY 1, 2, 3, 4, 5;

SELECT GROUPING(course), GROUPING(type), course, type, COUNT(*) FROM students GROUP BY CUBE (course, type) HAVING GROUPING(students.course) = 0 ORDER BY 1, 2, 3, 4, 5;

SELECT course, type, COUNT(*) FROM students GROUP BY CUBE (course, type) ORDER BY GROUPING(course), GROUPING(type), 1, 2, 3;

SELECT GROUPING();

SELECT GROUPING() FROM students;

SELECT GROUPING(NULL) FROM students;

SELECT GROUPING(course) FROM students;

SELECT GROUPING(course) FROM students GROUP BY ();

SELECT GROUPING(type) FROM students GROUP BY course;

SELECT GROUPING(course) FROM students WHERE GROUPING(course) = 0 GROUP BY course;

SELECT GROUPING(course, course, course, course, course, course, course, course, course, course, course, course, course, course, course, course, course, course, course, course, course, course, course, course, course, course, course, course, course, course, course, course, course, course, course, course, course, course, course, course, course, course, course, course, course, course, course, course, course, course, course, course, course, course, course, course, course, course, course, course, course, course, course, course, course, course, course, course, course, course, course, course, course, course, course, course, course, course, course, course), course, type, COUNT(*) FROM students GROUP BY CUBE (course, type) ORDER BY 1, 2, 3, 4;

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

CREATE TABLE students (course TEXT, type TEXT);

INSERT INTO students (course, type) VALUES ('CS', 'Bachelor'), ('CS', 'Bachelor'), ('CS', 'PhD'), ('Math', 'Masters'), ('CS', NULL), ('CS', NULL), ('Math', NULL);

SELECT 1 FROM students GROUP BY ();

SELECT COUNT(*) FROM students GROUP BY ();

SELECT course, type, COUNT(*) FROM students GROUP BY course, type ORDER BY 1, 2, 3;

SELECT course, type, COUNT(*) FROM students GROUP BY (course, type) ORDER BY 1, 2, 3;

SELECT course, COUNT(*) FROM students GROUP BY (), course, () ORDER BY 1;

SELECT COUNT(*), course, type FROM students GROUP BY GROUPING SETS ((course), (type)) ORDER BY 1, 2, 3;

SELECT COUNT(*), course, type FROM students GROUP BY GROUPING SETS (course), GROUPING SETS (type) ORDER BY 1, 2, 3;

SELECT COUNT(*), course, type FROM students GROUP BY course, GROUPING SETS (type) ORDER BY 1, 2, 3;

SELECT COUNT(*), course, type FROM students GROUP BY course, GROUPING SETS (type, ()) ORDER BY 1, 2, 3;

SELECT COUNT(*), course, type FROM students GROUP BY GROUPING SETS ((course, type), (course)) ORDER BY 1, 2, 3;

SELECT COUNT(*), course, type FROM students GROUP BY GROUPING SETS ((course, type), (course)) ORDER BY 1, 2, 3;

SELECT COUNT(*), course, type FROM students GROUP BY GROUPING SETS ((course, type), (course)) ORDER BY 1, 2, 3;

SELECT COUNT(*), course, type FROM students GROUP BY GROUPING SETS ((course), (), (type)) ORDER BY 1, 2, 3;

SELECT COUNT(*), course, type FROM students GROUP BY GROUPING SETS (course, ()), GROUPING SETS (type) ORDER BY 1, 2, 3;

SELECT COUNT(*), course, type FROM students GROUP BY type, GROUPING SETS (course, ()) ORDER BY 1, 2, 3;

SELECT COUNT(*), course, type FROM students GROUP BY GROUPING SETS ((course, type), (type)) ORDER BY 1, 2, 3;

SELECT COUNT(*), course, type FROM students GROUP BY GROUPING SETS ((2, 3), (3)) ORDER BY 1, 2, 3;

SELECT COUNT(*), course AS crs, type AS tp FROM students GROUP BY GROUPING SETS ((crs, tp), (tp)) ORDER BY 1, 2, 3;

SELECT COUNT(*), course AS crs, type AS tp FROM students GROUP BY GROUPING SETS ((crs, tp), (tp)) ORDER BY 1, 2, 3;

SELECT course FROM students GROUP BY ();

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

CREATE TABLE students (course TEXT, type TEXT);

INSERT INTO students (course, type) VALUES ('CS', 'Bachelor'), ('CS', 'Bachelor'), ('CS', 'PhD'), ('Math', 'Masters'), ('CS', NULL), ('CS', NULL), ('Math', NULL);

SELECT course, COUNT(*) FROM students GROUP BY GROUPING SETS ((), (course)) HAVING course LIKE 'C%' ORDER BY 1, 2;

SELECT course, COUNT(*) FROM students GROUP BY GROUPING SETS ((), (course)) HAVING course LIKE 'C%' OR NOT course LIKE 'C%' OR course IS NULL ORDER BY 1, 2;

SELECT course, COUNT(*) FROM students GROUP BY GROUPING SETS ((), (course)) HAVING RANDOM() < 1000 ORDER BY ALL;

SELECT course, COUNT(*) FROM students GROUP BY GROUPING SETS ((), (course)) HAVING RANDOM() > 1000;

PRAGMA enable_verification;

CREATE TABLE response (id BIGINT, response TEXT);

INSERT INTO response VALUES (1, 'yes'), (1, 'no'), (1, 'yes'), (2, 'no'), (2, 'no');

CREATE TABLE user_pq (id BIGINT, "name" TEXT);

INSERT INTO user_pq VALUES (1, 'alice'), (2, 'bob');

SELECT id, response, COUNT(DISTINCT id) FROM user_pq JOIN response USING (id) GROUP BY CUBE (id, response) ORDER BY 1, 2, 3;

CREATE TABLE integers AS SELECT i, CAST(i AS TEXT) AS j FROM GENERATE_SERIES(0, 1000000, 1) AS tbl(i);

SELECT COUNT(*) FROM (SELECT * FROM integers GROUP BY CUBE (i, j)) AS tbl;

SELECT COUNT(*) FROM (SELECT * FROM integers GROUP BY ROLLUP (i, j)) AS tbl;

PRAGMA enable_verification;

SELECT COUNT(*) GROUP BY GROUPING SETS ((), ());

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

CREATE TABLE students (course TEXT, type TEXT);

INSERT INTO students (course, type) VALUES ('CS', 'Bachelor'), ('CS', 'Bachelor'), ('CS', 'PhD'), ('Math', 'Masters'), ('CS', NULL), ('CS', NULL), ('Math', NULL);

SELECT course, COUNT(*) FROM students GROUP BY ROLLUP (course) ORDER BY 1, 2;

SELECT course, type, COUNT(*) FROM students GROUP BY ROLLUP (course, type) ORDER BY 1, 2, 3;

SELECT course, type, COUNT(*) FROM students GROUP BY ROLLUP ((course, type)) ORDER BY 1, 2, 3;

SELECT course, type, COUNT(*) FROM students GROUP BY ROLLUP (course, type, course) ORDER BY 1, 2, 3;

SELECT course, type, COUNT(*) FROM students GROUP BY GROUPING SETS ((course, type), (course), ()) ORDER BY 1, 2, 3;

SELECT course, type, COUNT(*) FROM students GROUP BY ROLLUP (course), ROLLUP (type) ORDER BY 1, 2, 3;

SELECT course AS crs, type, COUNT(*) FROM students GROUP BY (), type, ROLLUP (crs) ORDER BY 1, 2, 3;

SELECT course AS crs, type, COUNT(*) FROM students GROUP BY (), type, ROLLUP (crs) ORDER BY 1, 2, 3;

SELECT course, COUNT(*) FROM students GROUP BY WITH ROLLUP ORDER BY 1, 2;

SELECT course, COUNT(*) FROM students GROUP BY WITH ROLLUP ORDER BY 1, 2;

SELECT course, COUNT(*) FROM students GROUP BY ROLLUP (GROUPING_SETS(course)) ORDER BY 1, 2;

PRAGMA enable_verification;

SELECT b, SUM(a) AS a FROM (VALUES (1, 0), (1, 1)) AS t(a, b) GROUP BY b HAVING a > 0 ORDER BY ALL;

CREATE TABLE t1 (a INT);

INSERT INTO t1 VALUES (42), (84);

SELECT a + 1 AS a FROM t1 GROUP BY a HAVING a = 42;

CREATE TABLE t2 (a INT);

INSERT INTO t2 VALUES (42), (84), (42);

SELECT a AS b, SUM(a) AS a FROM t2 GROUP BY b HAVING a = 42;

CREATE TABLE test (a INT, b INT);

INSERT INTO test VALUES (11, 22), (13, 22), (12, 21);

SELECT b, SUM(a) AS sum FROM test GROUP BY b HAVING b = 21 ORDER BY b;

SELECT b, SUM(a) FROM test GROUP BY b HAVING SUM(a) < 20 ORDER BY b;

SELECT b, SUM(a) AS sum FROM test GROUP BY b HAVING sum < 20 ORDER BY b;

SELECT b, SUM(a) AS sum FROM test GROUP BY b HAVING SUM(a) < 20 ORDER BY b;

SELECT b, SUM(a) AS sum FROM test GROUP BY b HAVING COUNT(*) = 1 ORDER BY b;

SELECT b, SUM(a) FROM test GROUP BY b HAVING SUM(a) + 10 > 28;

SELECT b, SUM(a) FROM test GROUP BY b HAVING SUM(a) > (SELECT SUM(t.a) * 0.5 FROM test AS t);

SELECT test.b, SUM(a) FROM test GROUP BY test.b HAVING SUM(a) = (SELECT SUM(a) FROM test AS t WHERE test.b = t.b) ORDER BY test.b;

SELECT test.b, SUM(a) FROM test GROUP BY test.b HAVING SUM(a) * 2 = (SELECT SUM(a) + SUM(t.a) FROM test AS t WHERE test.b = t.b) ORDER BY test.b;

SELECT test.b, SUM(a) FROM test GROUP BY test.b HAVING SUM(a) * 2 + 2 = (SELECT SUM(a) + SUM(t.a) + COUNT(t.a) FROM test AS t WHERE test.b = t.b) ORDER BY test.b;

SELECT test.b, SUM(a) FROM test GROUP BY test.b ORDER BY (SELECT SUM(a) FROM test AS t WHERE test.b = t.b) DESC;

SELECT 42 HAVING 42 > 20;

SELECT 42 HAVING 42 > 80;

SELECT SUM(42) HAVING AVG(42) > MIN(20);

SELECT SUM(42) HAVING SUM(42) > SUM(80);

SELECT SUM(42) + COUNT(*) + COUNT(1), 3 HAVING SUM(42) + MAX(20) + AVG(30) > SUM(120) - MIN(100);

SELECT SUM(42) HAVING (SELECT SUM(42)) > SUM(80);

CREATE TABLE test (a INT, b INT);

INSERT INTO test VALUES (11, 22), (13, 22), (12, 21);

SELECT a FROM test WHERE a = 13 HAVING a > 11;

SELECT a FROM test WHERE a = 13 HAVING SUM(a) > 11;

SELECT SUM(a) FROM test WHERE a = 13 HAVING SUM(a) > 11;

SELECT SUM(a) FROM test WHERE a = 13 HAVING SUM(a) > 20;

SELECT SUM(a) FROM test HAVING SUM(a) > 10;

SELECT SUM(a) FROM test HAVING SUM(a) < 10;

SELECT SUM(a) FROM test HAVING COUNT(*) > 1;

SELECT SUM(a) FROM test HAVING COUNT(*) > 10;

PRAGMA enable_verification;

CREATE TABLE test (a INT, b INT);

INSERT INTO test VALUES (11, 22), (13, 22), (12, 21);

CREATE TABLE qt (a INT, b TEXT, c INT);

INSERT INTO qt VALUES (1, 'A', 1), (2, 'A', 2), (3, 'B', 1), (4, 'B', 2);

SELECT * FROM qt QUALIFY ROW_NUMBER() OVER (PARTITION BY b ORDER BY c) = 1 ORDER BY b;

SELECT a, b, c, ROW_NUMBER() OVER (PARTITION BY b ORDER BY c) AS row_num FROM qt QUALIFY row_num = 1 ORDER BY b;

CREATE TABLE exam (student TEXT, subject TEXT, mark INT);

INSERT INTO exam VALUES ('Lily', 'Maths', 65), ('Lily', 'Science', 80), ('Lily', 'english', 70), ('Isabella', 'Maths', 50), ('Isabella', 'Science', 70), ('Isabella', 'english', 90), ('Olivia', 'Maths', 55), ('Olivia', 'Science', 60), ('Olivia', 'english', 89);

SELECT * FROM exam QUALIFY RANK() OVER (ORDER BY mark DESC) = 4;

SELECT * FROM exam QUALIFY RANK() OVER (PARTITION BY student ORDER BY mark DESC) = 2 ORDER BY student;

SELECT * FROM exam WINDOW w AS (ORDER BY mark) QUALIFY ROW_NUMBER() OVER w >= 1 AND (RANK() OVER w) <= 2 ORDER BY student;

SELECT * FROM exam QUALIFY FIRST_VALUE(mark) OVER (PARTITION BY student ORDER BY mark) >= 60 ORDER BY mark;

SELECT * FROM exam QUALIFY LAST_VALUE(mark) OVER (PARTITION BY student ORDER BY mark) >= 85 ORDER BY mark;

CREATE TABLE power (plant TEXT, date DATE, mwh INT);

INSERT INTO power VALUES ('Boston', '2019-01-02', 564337), ('Boston', '2019-01-03', 507405), ('Boston', '2019-01-04', 528523), ('Boston', '2019-01-05', 469538), ('Boston', '2019-01-06', 474163), ('Boston', '2019-01-07', 507213), ('Boston', '2019-01-08', 613040), ('Boston', '2019-01-09', 582588), ('Boston', '2019-01-10', 499506), ('Boston', '2019-01-11', 482014), ('Boston', '2019-01-12', 486134), ('Boston', '2019-01-13', 531518), ('Worcester', '2019-01-02', 118860), ('Worcester', '2019-01-03', 101977), ('Worcester', '2019-01-04', 106054), ('Worcester', '2019-01-05', 92182), ('Worcester', '2019-01-06', 94492), ('Worcester', '2019-01-07', 99932), ('Worcester', '2019-01-08', 118854), ('Worcester', '2019-01-09', 113506), ('Worcester', '2019-01-10', 96644), ('Worcester', '2019-01-11', 93806), ('Worcester', '2019-01-12', 98963), ('Worcester', '2019-01-13', 107170);

SELECT * FROM power QUALIFY RANK() OVER (PARTITION BY plant ORDER BY date DESC) = 2 ORDER BY plant;

SELECT * FROM (SELECT plant, date, AVG(mwh) OVER (PARTITION BY plant ORDER BY date ASC RANGE BETWEEN INTERVAL '3' DAYS PRECEDING AND INTERVAL '3' DAYS FOLLOWING) AS avgmwh FROM power ORDER BY plant, avgmwh DESC) QUALIFY ROW_NUMBER() OVER (PARTITION BY plant ORDER BY avgmwh DESC) = 1 ORDER BY plant;

SELECT b, SUM(a) AS sum FROM test GROUP BY b QUALIFY ROW_NUMBER() OVER (PARTITION BY b) >= 1 AND sum < 20 ORDER BY b;

SELECT b, SUM(a) AS sum FROM test GROUP BY b QUALIFY ROW_NUMBER() OVER (PARTITION BY b) > sum * 10;

SELECT * FROM qt QUALIFY ROW_NUMBER() OVER (PARTITION BY b ORDER BY c) = (SELECT MAX(c) FROM qt) ORDER BY b;

CREATE TABLE tenk1 (unique1 INT, unique2 INT, two INT, four INT, ten INT, twenty INT, hundred INT, thousand INT, twothousand INT, fivethous INT, tenthous INT, odd INT, even INT, stringu1 TEXT, stringu2 TEXT, string4 TEXT);

INSERT INTO tenk1 VALUES (8800, 0, 0, 0, 0, 0, 0, 800, 800, 3800, 8800, 0, 1, 'MAAAAA', 'AAAAAA', 'AAAAxx'), (1891, 1, 1, 3, 1, 11, 91, 891, 1891, 1891, 1891, 182, 183, 'TUAAAA', 'BAAAAA', 'HHHHxx'), (3420, 2, 0, 0, 0, 0, 20, 420, 1420, 3420, 3420, 40, 41, 'OBAAAA', 'CAAAAA', 'OOOOxx'), (9850, 3, 0, 2, 0, 10, 50, 850, 1850, 4850, 9850, 100, 101, 'WOAAAA', 'DAAAAA', 'VVVVxx'), (7164, 4, 0, 0, 4, 4, 64, 164, 1164, 2164, 7164, 128, 129, 'OPAAAA', 'EAAAAA', 'AAAAxx'), (8009, 5, 1, 1, 9, 9, 9, 9, 9, 3009, 8009, 18, 19, 'BWAAAA', 'FAAAAA', 'HHHHxx'), (5057, 6, 1, 1, 7, 17, 57, 57, 1057, 57, 5057, 114, 115, 'NMAAAA', 'GAAAAA', 'OOOOxx'), (6701, 7, 1, 1, 1, 1, 1, 701, 701, 1701, 6701, 2, 3, 'TXAAAA', 'HAAAAA', 'VVVVxx'), (4321, 8, 1, 1, 1, 1, 21, 321, 321, 4321, 4321, 42, 43, 'FKAAAA', 'IAAAAA', 'AAAAxx'), (3043, 9, 1, 3, 3, 3, 43, 43, 1043, 3043, 3043, 86, 87, 'BNAAAA', 'JAAAAA', 'HHHHxx');

SELECT unique1 FROM tenk1 QUALIFY CAST(CUME_DIST() OVER (PARTITION BY four ORDER BY ten) * 10 AS INT) = 5 ORDER BY four, ten;

SELECT unique1 FROM tenk1 QUALIFY FIRST_VALUE(ten) OVER (PARTITION BY four ORDER BY ten) = 1 ORDER BY four, ten;

SELECT unique1 FROM tenk1 QUALIFY LEAD(ten * 2, 1, -1) OVER (PARTITION BY four ORDER BY ten) = -1 ORDER BY four, ten;

SELECT * FROM (SELECT b FROM test AS t GROUP BY b QUALIFY RANK() OVER (PARTITION BY t.b) = 1) QUALIFY ROW_NUMBER() OVER (PARTITION BY b) = 1 ORDER BY 1;

SELECT * FROM test QUALIFY ROW_NUMBER() OVER (PARTITION BY test.b) = (SELECT MAX(a) FROM qt GROUP BY qt.b QUALIFY RANK() OVER (PARTITION BY qt.b) = 1 ORDER BY qt.b LIMIT 1);

SELECT * FROM exam WINDOW w AS (ORDER BY mark) QUALIFY ROW_NUMBER() OVER w = 1;

SELECT * FROM exam WINDOW w AS (ORDER BY mark) QUALIFY ROW_NUMBER() OVER w = 1;

SELECT b, AVG(a) AS avga FROM test GROUP BY b QUALIFY avga > 10;

SELECT b FROM test QUALIFY AVGA() > 10;

SELECT b, SUM(a) FROM test GROUP BY b QUALIFY ROW_NUMBER() OVER (PARTITION BY b) > sum;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

CREATE TABLE test (a INT, b INT);

INSERT INTO test VALUES (11, 22), (13, 22), (12, 21);

CREATE MACRO plus1(x) AS (x + (SELECT COUNT(*) FROM (SELECT b, SUM(test.a) FROM test GROUP BY b QUALIFY row_number() OVER (PARTITION BY b) = 1)));

SELECT PLUS1(3);

SELECT PLUS1(5);

DROP MACRO plus1;

SELECT PLUS1(2);

SET enable_view_dependencies = TRUE;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

CREATE SCHEMA test;

CREATE TABLE test.t (a INT, b INT);

INSERT INTO test.t VALUES (11, 22), (13, 22), (12, 21);

CREATE VIEW test.v AS SELECT * FROM test.t QUALIFY ROW_NUMBER() OVER (PARTITION BY b) = 1;

SELECT b, SUM(a) FROM test.v GROUP BY b QUALIFY ROW_NUMBER() OVER (PARTITION BY b) = 1 ORDER BY ALL;

DROP TABLE test.t;

DROP TABLE test.t;

CREATE TABLE test.t (a INT, b INT);

INSERT INTO test.t VALUES (11, 22), (13, 22), (12, 21);

CREATE VIEW test.v AS SELECT * FROM test.t QUALIFY ROW_NUMBER() OVER (PARTITION BY b) = 1;

SELECT b, SUM(a) FROM test.v GROUP BY b QUALIFY ROW_NUMBER() OVER (PARTITION BY b) = 1 ORDER BY ALL;

DROP TABLE test.t CASCADE;

SELECT * FROM test.v;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

CREATE SCHEMA test;

CREATE TABLE test.t (a INT, b INT);

INSERT INTO test.t VALUES (11, 22), (13, 22), (12, 21);

CREATE VIEW test.v AS SELECT * FROM test.t QUALIFY ROW_NUMBER() OVER (PARTITION BY b) = 1;

SELECT b, SUM(a) FROM test.v GROUP BY b QUALIFY ROW_NUMBER() OVER (PARTITION BY b) = 1 ORDER BY ALL;

SELECT b, SUM(a) FROM test.v GROUP BY b QUALIFY ROW_NUMBER() OVER (PARTITION BY b) = 1 ORDER BY ALL;

CREATE TABLE test.t (a INT, b INT);

INSERT INTO test.t VALUES (11, 22), (13, 22), (12, 21);

SELECT b, SUM(a) FROM test.v GROUP BY b QUALIFY ROW_NUMBER() OVER (PARTITION BY b) = 1 ORDER BY ALL;

DROP TABLE test.t;

SELECT * FROM test.v;

PRAGMA enable_verification;

CREATE TABLE tbl (i INT);

ALTER TABLE tbl SET;

ALTER TABLE tbl RESET PARTITIONED BY;

PRAGMA enable_verification;

CREATE TABLE tbl (i INT);

ALTER TABLE tbl SET SORTED BY (i DESC NULLS FIRST);

ALTER TABLE tbl RESET SORTED BY;

ALTER SEQUENCE IF EXISTS seq OWNED BY x;

ALTER TABLE IF EXISTS t0 ADD COLUMN c0 INT;

INSERT INTO t0 VALUES (42);

ALTER TABLE IF EXISTS t0 ADD COLUMN IF NOT EXISTS c0 INT;

INSERT INTO t0 VALUES (42);

CREATE TABLE t0 (c0 INT);

ALTER TABLE t0 ADD COLUMN IF NOT EXISTS c0 INT;

INSERT INTO t0 VALUES (42);

ALTER TABLE t0 ADD COLUMN c0 INT;

ALTER TABLE t0 ADD COLUMN c1 INT;

INSERT INTO t0 VALUES (42, 43);

ALTER TABLE t0 ADD COLUMN IF NOT EXISTS c2 INT;

INSERT INTO t0 VALUES (42, 43, 44);

ALTER TABLE IF EXISTS t1 DROP COLUMN IF EXISTS c3;

ALTER TABLE IF EXISTS t0 DROP COLUMN IF EXISTS c3;

ALTER TABLE t1 DROP COLUMN IF EXISTS c3;

ALTER TABLE t1 DROP COLUMN c3;

ALTER TABLE t0 DROP COLUMN c3;

ALTER TABLE t0 DROP COLUMN IF EXISTS c3;

ALTER TABLE IF EXISTS t0 DROP COLUMN c3;

ALTER TABLE IF EXISTS t1 ALTER COLUMN c0 SET DATA TYPE TEXT;

ALTER TABLE IF EXISTS t1 ALTER COLUMN CASE WHEN EXISTS THEN c0 END SET DATA TYPE TEXT;

CREATE TABLE unit (price INT, amount_sold INT);

ALTER TABLE unit DROP COLUMN IF EXISTS rowid;

SELECT rowid FROM unit;

INSERT INTO unit VALUES (10, 5);

SELECT rowid FROM unit;

ALTER TABLE unit ADD COLUMN rowid INT;

INSERT INTO unit VALUES (20, 10, 1337);

ALTER TABLE unit DROP COLUMN IF EXISTS rowid;

INSERT INTO unit VALUES (30, 20);

ALTER TABLE unit ADD COLUMN IF NOT EXISTS rowid INT;

INSERT INTO unit VALUES (40, 30, 1337);

ALTER TABLE unit ADD COLUMN IF NOT EXISTS rowid INT;

ALTER TABLE unit DROP COLUMN rowid;

SELECT rowid FROM unit;

CREATE TABLE test (i INT, j INT);

INSERT INTO test VALUES (1, 1), (2, 2);

ALTER TABLE test ADD COLUMN k INT;

SELECT * FROM test;

CREATE TABLE test (i INT, j INT);

INSERT INTO test VALUES (1, 1), (2, 2);

BEGIN;

INSERT INTO test VALUES (3, 3);

ALTER TABLE test ADD COLUMN k INT;

ALTER TABLE test ADD COLUMN l INT;

ALTER TABLE test ADD COLUMN m INT DEFAULT 3;

SELECT * FROM test;

ROLLBACK;

SELECT * FROM test;

CREATE TABLE test (i INT, j INT);

INSERT INTO test VALUES (1, 1), (2, 2);

ALTER TABLE test ADD COLUMN l INT DEFAULT 3;

SELECT i, j, l FROM test;

CREATE TABLE test (i INT, j INT);

INSERT INTO test VALUES (1, 1), (2, 2);

CREATE SEQUENCE seq;

ALTER TABLE test ADD COLUMN m INT DEFAULT NEXTVAL('seq');

SELECT * FROM test;

ALTER TABLE test ADD COLUMN n INT DEFAULT CURRVAL('seq');

SELECT * FROM test;

CREATE TABLE test (i INT, j INT);

INSERT INTO test VALUES (1, 1), (2, 2);

ALTER TABLE test ADD COLUMN i INT;

CREATE VIEW x (x) AS (SELECT 1);

ALTER VIEW x ADD COLUMN i INT;

ALTER TABLE i ADD COLUMN j INT, ADD COLUMN k INT;

CREATE TABLE test (i INT, j INT);

INSERT INTO test VALUES (1, 1), (2, 2);

BEGIN;

ALTER TABLE test ADD COLUMN k INT DEFAULT 2;

CREATE INDEX i_index ON test(k);

COMMIT;

INSERT INTO test VALUES (3, 3, 3);

SELECT * FROM test WHERE k = 2;

SELECT * FROM test WHERE k = 3;

CREATE TABLE test (i INT, j INT);

INSERT INTO test VALUES (1, 1), (2, 2);

BEGIN;

ALTER TABLE test ADD COLUMN k INT;

CREATE INDEX i_index ON test(k);

ROLLBACK;

INSERT INTO test VALUES (3, 3);

SELECT * FROM test;

CREATE TABLE test (i INT, j INT);

INSERT INTO test VALUES (1, 1), (2, 2);

BEGIN;

INSERT INTO test VALUES (3, 3);

ALTER TABLE test ADD COLUMN k INT;

SELECT * FROM test;

ROLLBACK;

SELECT * FROM test;

INSERT INTO test VALUES (3, 3);

SELECT * FROM test;

CREATE TABLE test (i INT, j INT);

INSERT INTO test VALUES (1, 1), (2, 2);

CREATE SEQUENCE seq;

ALTER TABLE test ADD COLUMN m INT DEFAULT NEXTVAL('seq');

SELECT * FROM test;

SELECT * FROM test WHERE m = 2;

SELECT STATS(m) FROM test LIMIT 1;

CREATE TABLE test (i INT, j INT);

INSERT INTO test VALUES (1, 1), (2, 2);

BEGIN;

ALTER TABLE test ADD COLUMN k INT;

ALTER TABLE test ADD COLUMN l INT;

COMMIT;

ALTER TABLE test ADD COLUMN l INT;

DROP TABLE test;

CREATE TABLE test (i INT, j INT);

INSERT INTO test VALUES (1, 1), (2, 2);

BEGIN;

ALTER TABLE test ADD COLUMN k INT;

INSERT INTO test (i, j) VALUES (3, 3);

DELETE FROM test WHERE i = 1;

SELECT * FROM test;

SELECT * FROM test;

UPDATE test SET j = 100;

SELECT * FROM test;

UPDATE test SET j = 100;

COMMIT;

SELECT * FROM test;

DROP TABLE test;

CREATE TABLE test (i INT, j INT);

INSERT INTO test VALUES (1, 1), (2, 2);

BEGIN;

INSERT INTO test VALUES (3, 3);

ALTER TABLE test ADD COLUMN k INT;

COMMIT;

CREATE SCHEMA test_schema;

CREATE TYPE main_int AS int32;

CREATE TYPE test_schema.test_int AS int32;

CREATE TABLE test_schema.test_t1 (i INT);

CREATE TABLE main_t1 (i INT);

ALTER TABLE main_t1 ADD COLUMN j test_int;

ALTER TABLE test_schema.test_t1 ADD COLUMN not_found main_int;

PRAGMA enable_verification;

CREATE TABLE test (i INT, j INT, d TEXT);

INSERT INTO test VALUES (3, 4, 'hello'), (44, 45, '56');

ALTER TABLE test ADD PRIMARY KEY (i, j);

INSERT INTO test VALUES (1, 1, 'foo'), (1, 2, 'bar');

INSERT INTO test VALUES (1, 2, 'oops');

INSERT INTO test VALUES (NULL, 2, 'nada');

PRAGMA enable_verification;

CREATE TABLE test (i INT, j INT);

INSERT INTO test VALUES (1, 1);

ALTER TABLE test ADD PRIMARY KEY (j);

SELECT * FROM test;

INSERT INTO test VALUES (1, 2);

INSERT INTO test VALUES (2, 1);

INSERT INTO test VALUES (2, NULL);

ALTER TABLE test ADD PRIMARY KEY (i);

ALTER TABLE test ADD PRIMARY KEY (j);

CREATE TABLE reverse (i INT, j INT);

INSERT INTO reverse VALUES (1, 2);

ALTER TABLE reverse ADD PRIMARY KEY (j, i);

INSERT INTO reverse VALUES (1, 2);

INSERT INTO reverse (j, i) VALUES (2, 1);

CREATE TABLE scan (i INT, j INT);

INSERT INTO scan SELECT range, range + 1 FROM RANGE(0, 30000);

ALTER TABLE scan ADD PRIMARY KEY (i);

SELECT * FROM scan WHERE i = 2;

PRAGMA enable_verification;

CREATE TABLE test (i INT, j INT);

ALTER TABLE test ADD PRIMARY KEY (j);

INSERT INTO test VALUES (1, 1);

BEGIN;

ALTER TABLE test ALTER COLUMN j SET NOT NULL;

INSERT INTO test VALUES (2, 1);

ROLLBACK;

INSERT INTO test VALUES (2, 1);

PRAGMA enable_verification;

CREATE TABLE test (i INT, j INT);

ALTER TABLE test ADD PRIMARY KEY (j);

INSERT INTO test VALUES (1, 1);

ATTACH ':memory:' AS memory;

USE memory;

DETACH test_add_pk_attach;

ATTACH '__TEST_DIR__/test_add_pk_attach.db' AS test_add_pk_attach;

USE test_add_pk_attach;

ALTER TABLE test ADD PRIMARY KEY (i);

INSERT INTO test VALUES (2, 1);

PRAGMA enable_verification;

CREATE TABLE test (i INT, j INT);

ALTER TABLE test ADD PRIMARY KEY (i_do_not_exist);

ALTER TABLE i_do_not_exist ADD PRIMARY KEY (i, j);

CREATE TABLE uniq (i INT UNIQUE, j INT);

INSERT INTO uniq VALUES (1, 10), (2, 20), (3, 30);

INSERT INTO uniq VALUES (1, 100);

ALTER TABLE uniq ADD PRIMARY KEY (i);

INSERT INTO uniq VALUES (1, 101);

INSERT INTO uniq VALUES (NULL, 100);

PRAGMA enable_verification;

CREATE TABLE test (i INT, j INT);

BEGIN;

INSERT INTO test VALUES (1, 1);

ALTER TABLE test ADD PRIMARY KEY (j);

COMMIT;

INSERT INTO test VALUES (2, 1);

PRAGMA enable_verification;

CREATE TABLE test (i INT, j INT);

ALTER TABLE test ADD PRIMARY KEY (j);

INSERT INTO test VALUES (1, 1);

INSERT INTO test VALUES (1, 1);

CREATE TABLE test (i INT, j INT);

INSERT INTO test VALUES (1, 1);

PRAGMA enable_verification;

CREATE TABLE integers (i INT);

INSERT INTO integers SELECT * FROM RANGE(0, 50000);

SELECT i FROM integers WHERE i = 100;

DELETE FROM integers WHERE i = 42;

ALTER TABLE integers ADD PRIMARY KEY (i);

SELECT i FROM integers WHERE i = 100;

PRAGMA enable_verification;

CREATE TABLE duplicates (i INT, j INT);

INSERT INTO duplicates VALUES (1, 10), (2, 20), (3, 30), (1, 100);

ALTER TABLE duplicates ADD PRIMARY KEY (i);

CREATE TABLE nulls (i INT, j INT);

INSERT INTO nulls VALUES (1, 10), (2, NULL), (3, 30), (4, 40);

ALTER TABLE nulls ADD PRIMARY KEY (i, j);

DROP TABLE nulls;

CREATE TABLE nulls (i INT, j INT);

INSERT INTO nulls VALUES (5, 10), (NULL, 20), (7, 30), (8, 100);

ALTER TABLE nulls ADD PRIMARY KEY (i);

CREATE TABLE nulls_compound (i INT, j INT, k TEXT);

INSERT INTO nulls_compound VALUES (1, 10, 'hello'), (2, 20, 'world'), (NULL, NULL, NULL), (3, 100, 'yay');

ALTER TABLE nulls_compound ADD PRIMARY KEY (k, i);

PRAGMA enable_verification;

CREATE TABLE test (a INT[], b INT);

ALTER TABLE test ADD PRIMARY KEY (a);

ALTER TABLE test ADD PRIMARY KEY (a, b);

PRAGMA enable_verification;

CREATE TABLE tbl (i INT);

INSERT INTO tbl VALUES (1);

CREATE INDEX PRIMARY_tbl_i ON tbl(i);

ALTER TABLE tbl ADD PRIMARY KEY (i);

PRAGMA enable_verification;

ALTER TABLE tbl ADD PRIMARY KEY (i);

CREATE TABLE test (i INT);

INSERT INTO test VALUES (1);

ALTER TABLE test ADD PRIMARY KEY (i);

CREATE INDEX PRIMARY_test_i ON test(i);

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

PRAGMA enable_verification;

PRAGMA enable_verification;

CREATE TABLE tbl${i} AS SELECT range AS i FROM range(500000);

ALTER TABLE tbl${i} ADD PRIMARY KEY (i);

ALTER TABLE tbl${i} ADD PRIMARY KEY (i);

CHECKPOINT;

CHECKPOINT;

CHECKPOINT;

PRAGMA enable_verification;

CREATE TABLE test (i INT, j INT);

BEGIN;

INSERT INTO test VALUES (1, 1);

ALTER TABLE test ADD PRIMARY KEY (j);

INSERT INTO test VALUES (2, 1);

COMMIT;

INSERT INTO test VALUES (1, 1), (2, 1), (2, NULL);

CREATE TABLE other (i INT, j INT);

BEGIN;

INSERT INTO other VALUES (1, 1), (2, 1);

ALTER TABLE other ADD PRIMARY KEY (j);

COMMIT;

PRAGMA enable_verification;

CREATE TABLE test (i INT, j INT);

ALTER TABLE test ADD PRIMARY KEY (j);

INSERT INTO test (VALUES (1, 1)) AS restart;

ALTER TABLE test ADD PRIMARY KEY (i);

INSERT INTO test VALUES (2, 1);

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

PRAGMA enable_verification;

CREATE TABLE test (i INT, j INT);

INSERT INTO test VALUES (1, 2), (3, 4);

ALTER TABLE test ADD PRIMARY KEY (j)
restart;

ALTER TABLE test ADD PRIMARY KEY (i);

INSERT INTO test VALUES (2, 2);

PRAGMA enable_verification;

PRAGMA enable_verification;

INSERT INTO test VALUES (5, 4);

ALTER TABLE test ADD PRIMARY KEY (b);

ALTER TABLE test ADD PRIMARY KEY (b, c);

ALTER TABLE test ADD PRIMARY KEY (c);

INSERT INTO test VALUES (1, 4);

PRAGMA enable_verification;

CREATE TABLE test (i INT, j INT);

BEGIN;

ALTER TABLE test ADD PRIMARY KEY (j);

BEGIN;

ALTER TABLE test ADD PRIMARY KEY (j);

BEGIN;

ROLLBACK;

ROLLBACK;

ALTER TABLE test ADD PRIMARY KEY (j);

COMMIT;

INSERT INTO test VALUES (1, 1), (1, 1);

PRAGMA enable_verification;

CREATE TABLE test (i INT, j INT);

BEGIN;

ALTER TABLE test ADD PRIMARY KEY (j);

ALTER TABLE test ADD PRIMARY KEY (i);

COMMIT;

CREATE TABLE other (i INT PRIMARY KEY, j INT);

ALTER TABLE other ADD PRIMARY KEY (i, j);

ALTER TABLE other ADD PRIMARY KEY (i);

ALTER TABLE other ADD PRIMARY KEY (j);

PRAGMA enable_verification;

CREATE TABLE test (i INT, j INT NOT NULL);

INSERT INTO test VALUES (1, 1), (2, 2);

INSERT INTO test VALUES (3, NULL);

SELECT * FROM test;

ALTER TABLE test ALTER COLUMN j DROP NOT NULL;

INSERT INTO test VALUES (3, NULL);

SELECT * FROM test;

CREATE TABLE test2 (i INT, j INT);

INSERT INTO test2 VALUES (1, 1), (2, 2);

ALTER TABLE test2 ALTER COLUMN j DROP NOT NULL;

INSERT INTO test VALUES (3, NULL);

DROP TABLE IF EXISTS test;

CREATE TABLE test (i AS (1), j INT NOT NULL);

INSERT INTO test VALUES (1), (2);

INSERT INTO test VALUES (NULL);

SELECT * FROM test;

ALTER TABLE test ALTER COLUMN i DROP NOT NULL;

ALTER TABLE test ALTER COLUMN j DROP NOT NULL;

INSERT INTO test VALUES (NULL);

SELECT * FROM test;

PRAGMA enable_verification;

CREATE TABLE t (i INT, j INT);

INSERT INTO t SELECT i, i FROM RANGE(0, 2048) AS tbl(i);

BEGIN;

INSERT INTO t VALUES (9999, NULL);

ALTER TABLE t ALTER COLUMN j SET NOT NULL;

ROLLBACK;

INSERT INTO t VALUES (9999, NULL);

ALTER TABLE t ALTER COLUMN j SET NOT NULL;

SELECT i FROM t WHERE j IS NULL;

DROP TABLE IF EXISTS t;

CREATE TABLE t (i INT, j INT);

INSERT INTO t SELECT i, i FROM RANGE(0, 2048) AS tbl(i);

BEGIN;

INSERT INTO t VALUES (8888, 8888);

ALTER TABLE t ALTER COLUMN j SET NOT NULL;

COMMIT;

INSERT INTO t VALUES (9999, NULL);

SELECT * FROM t WHERE j = 8888;

DROP TABLE IF EXISTS t;

CREATE TABLE t (i INT, j INT);

INSERT INTO T SELECT 1, 1 FROM RANGE(0, 2048);

BEGIN;

ALTER TABLE t ALTER COLUMN j SET NOT NULL;

INSERT INTO t VALUES (2, 2);

ALTER TABLE t ALTER COLUMN j DROP NOT NULL;

INSERT INTO t VALUES (3, NULL);

COMMIT;

INSERT INTO t VALUES (4, NULL);

SELECT * FROM t WHERE j IS NULL;

DROP TABLE IF EXISTS t;

CREATE TABLE t (i INT, j INT);

INSERT INTO T SELECT 1, 1 FROM RANGE(0, 2048);

BEGIN;

ALTER TABLE t ALTER COLUMN j SET NOT NULL;

INSERT INTO T VALUES (8888, 8888);

ROLLBACK;

INSERT INTO t VALUES (9999, NULL);

SELECT i FROM t WHERE j IS NULL;

DROP TABLE IF EXISTS t;

CREATE TABLE t (i INT, j INT);

ALTER TABLE t ALTER COLUMN j SET NOT NULL;

INSERT INTO T SELECT 1, 1 FROM RANGE(0, 2048);

BEGIN;

ALTER TABLE t ALTER COLUMN j DROP NOT NULL;

INSERT INTO T VALUES (7777, NULL);

ROLLBACK;

INSERT INTO t VALUES (8888, NULL);

SELECT COUNT(*) FROM t WHERE j IS NULL;

DROP TABLE IF EXISTS t;

BEGIN;

CREATE TABLE t (i INT);

ALTER TABLE t ALTER COLUMN i SET NOT NULL;

INSERT INTO t SELECT 1 FROM RANGE(0, 1024);

COMMIT;

INSERT INTO t VALUES (NULL);

DROP TABLE IF EXISTS t;

BEGIN;

CREATE TABLE t (i INT NOT NULL);

INSERT INTO t SELECT 1 FROM RANGE(0, 1024);

ALTER TABLE t ALTER COLUMN i DROP NOT NULL;

INSERT INTO t VALUES (NULL);

COMMIT;

COMMIT;

DROP TABLE IF EXISTS t;

CREATE TABLE t (i INT, j INT);

INSERT INTO t SELECT 1, 1 FROM RANGE(0, 1024);

INSERT INTO t VALUES (2, NULL);

BEGIN;

DELETE FROM t WHERE i = 2;

ALTER TABLE t ALTER COLUMN j SET NOT NULL;

COMMIT;

INSERT INTO t VALUES (3, NULL);

SELECT COUNT(*) FROM t WHERE j IS NULL;

PRAGMA enable_verification;

CREATE TABLE t (i INT, j INT);

BEGIN;

ALTER TABLE t ALTER COLUMN j SET NOT NULL;

BEGIN;

INSERT INTO t VALUES (7777, NULL);

INSERT INTO t VALUES (7, 7);

ROLLBACK;

COMMIT;

SELECT i FROM t;

DROP TABLE IF EXISTS t;

CREATE TABLE t (i INT, j INT);

BEGIN;

BEGIN;

INSERT INTO t VALUES (7777, NULL);

ALTER TABLE t ALTER COLUMN j SET NOT NULL;

COMMIT;

COMMIT;

INSERT INTO t VALUES (7777, NULL);

SELECT COUNT(*) FROM t;

DROP TABLE IF EXISTS t;

CREATE TABLE t (i INT, j INT);

BEGIN;

ALTER TABLE t ALTER COLUMN j SET NOT NULL;

BEGIN;

INSERT INTO t VALUES (1, 1);

COMMIT;

ROLLBACK;

SELECT COUNT(*) FROM t;

DROP TABLE IF EXISTS t;

CREATE TABLE t (i INT, j INT);

BEGIN;

BEGIN;

ALTER TABLE t ALTER COLUMN j SET NOT NULL;

COMMIT;

INSERT INTO t VALUES (1, NULL);

ROLLBACK;

SELECT COUNT(*) FROM t;

DROP TABLE IF EXISTS t;

CREATE TABLE t (i INT, j INT);

BEGIN;

BEGIN;

INSERT INTO t VALUES (1, NULL);

ALTER TABLE t ALTER COLUMN j SET NOT NULL;

COMMIT;

COMMIT;

INSERT INTO t VALUES (2, NULL);

SELECT COUNT(*) FROM t;

DROP TABLE IF EXISTS t;

CREATE TABLE t (i INT, j INT);

BEGIN;

BEGIN;

INSERT INTO t VALUES (1, NULL);

ALTER TABLE t ALTER COLUMN j SET NOT NULL;

COMMIT;

COMMIT;

INSERT INTO t VALUES (2, NULL);

SELECT COUNT(*) FROM t;

DROP TABLE IF EXISTS t;

CREATE TABLE t (i INT, j INT);

BEGIN;

BEGIN;

INSERT INTO t VALUES (1, NULL);

COMMIT;

ALTER TABLE t ALTER COLUMN j SET NOT NULL;

ROLLBACK;

SELECT COUNT(*) FROM t;

PRAGMA enable_verification;

CREATE TABLE t (i INT, j INT);

INSERT INTO t VALUES (1, 1), (2, 2);

ALTER TABLE t ALTER COLUMN j SET NOT NULL;

INSERT INTO t VALUES (3, NULL);

ALTER TABLE t ALTER COLUMN j SET NOT NULL;

INSERT INTO t VALUES (3, NULL);

SELECT * FROM t;

INSERT INTO t SELECT 5, 5 FROM RANGE(0, 65534);

ALTER TABLE t ALTER COLUMN j SET NOT NULL;

INSERT INTO t VALUES (6, NULL);

SELECT COUNT(*) FROM t WHERE j IS NULL;

DROP TABLE IF EXISTS t;

CREATE TABLE t (i INT, j INT);

INSERT INTO t VALUES (1, 1), (2, 2), (3, NULL);

INSERT INTO t SELECT 4, 4 FROM RANGE(0, 65536);

ALTER TABLE t ALTER COLUMN j SET NOT NULL;

INSERT INTO t VALUES (5, NULL);

SELECT * FROM t WHERE j IS NULL;

DROP TABLE IF EXISTS t;

CREATE TABLE t (i INT, j INT);

INSERT INTO t SELECT 1, 1 FROM RANGE(0, 65536);

ALTER TABLE t ALTER COLUMN j SET NOT NULL;

INSERT INTO t VALUES (2, NULL);

ALTER TABLE t ALTER COLUMN j DROP NOT NULL;

INSERT INTO t VALUES (3, NULL);

SELECT * FROM t WHERE j IS NULL;

CREATE TABLE t0 (c0 AS (1), c1 INT);

ALTER TABLE t0 ALTER COLUMN c1 SET NOT NULL;

DROP TABLE IF EXISTS t;

CREATE TABLE t (i AS (1), j INT);

INSERT INTO t SELECT 1 FROM RANGE(0, 65536);

ALTER TABLE t ALTER COLUMN i SET NOT NULL;

ALTER TABLE t ALTER COLUMN j SET NOT NULL;

INSERT INTO t VALUES (NULL);

ALTER TABLE t ALTER COLUMN j DROP NOT NULL;

INSERT INTO t VALUES (NULL);

SELECT * FROM t WHERE j IS NULL;

CREATE TABLE test AS SELECT {'t': 42} AS t;

SELECT * FROM test;

ALTER TABLE test ALTER t TYPE ROW(t VARCHAR) USING {'t': concat('hello', (test.t.t + 42)::varchar)};

SELECT * FROM test;

DROP TABLE test;

CREATE TABLE test AS SELECT {'t': 42} AS t;

SELECT * FROM test;

ALTER TABLE test ALTER t TYPE ROW(t VARCHAR) USING {'t': concat('hello', (t.t + 42)::varchar)};

SELECT * FROM test;

PRAGMA enable_verification;

CREATE TABLE test (i INT, j INT);

INSERT INTO test VALUES (1, 1), (2, 2);

ALTER TABLE test ALTER COLUMN i SET DATA TYPE TEXT;

SELECT * FROM test ORDER BY ALL;

SELECT * FROM test WHERE i = '1';

ALTER TABLE test ALTER COLUMN i SET DATA TYPE INT;

SELECT * FROM test WHERE i = 1;

PRAGMA disable_verification;

SELECT STATS(i) FROM test LIMIT 1;

PRAGMA enable_verification;

ALTER TABLE test ALTER COLUMN not_a_column SET DATA TYPE INT;

CREATE TABLE tbl (col STRUCT(i INT));

INSERT INTO tbl SELECT {'i': range} FROM RANGE(0, 5000);

ALTER TABLE tbl ALTER COLUMN col DROP DEFAULT;

INSERT INTO tbl VALUES ({'i': 10000, 'a': NULL, 'b': 'hello'});

SELECT col FROM tbl ORDER BY col DESC LIMIT 3;

ALTER TABLE tbl ALTER COLUMN col DROP DEFAULT;

CREATE TABLE test (i INT CHECK (i < 10), j INT);

INSERT INTO test VALUES (1, 1), (2, 2);

ALTER TABLE test ALTER COLUMN i SET DATA TYPE TEXT;

CREATE TABLE test (i INT, j INT);

INSERT INTO test VALUES (1, 1), (2, 2);

PREPARE v1 AS SELECT * FROM test;

EXECUTE v1;

ALTER TABLE test ALTER COLUMN i SET DATA TYPE TEXT USING CAST(i AS TEXT);

EXECUTE v1;

ALTER TABLE test ALTER COLUMN i SET DATA TYPE INT USING CAST(i AS INT);

PREPARE v2 AS SELECT i+$1 FROM test;

EXECUTE v2(1);

ALTER TABLE test ALTER COLUMN i SET DATA TYPE TEXT USING CAST(i AS TEXT);

EXECUTE v2;

CREATE TABLE test (i INT, j INT);

INSERT INTO test VALUES (1, 1), (2, 2);

ALTER TABLE test ALTER COLUMN i SET DATA TYPE BIGINT USING i + 100;

SELECT * FROM test;

CREATE TABLE test (i INT, j INT);

INSERT INTO test VALUES (1, 1), (2, 2);

ALTER TABLE test ALTER blabla SET TYPE VARCHAR;

ALTER TABLE test ALTER i SET TYPE VARCHAR USING blabla;

ALTER TABLE test ALTER i SET TYPE VARCHAR USING SUM(i);

ALTER TABLE test ALTER i SET TYPE VARCHAR USING row_id() OVER ();

ALTER TABLE test ALTER i SET TYPE VARCHAR USING othertable.j;

CREATE TABLE test (i INT, j INT);

INSERT INTO test VALUES (1, 1), (2, 2);

CREATE INDEX i_index ON test(i);

ALTER TABLE test ALTER COLUMN i SET DATA TYPE TEXT;

DROP INDEX i_index;

CREATE TABLE test (i INT, j INT);

INSERT INTO test VALUES (1, 1), (2, 2);

BEGIN;

INSERT INTO test VALUES (3, 3);

ALTER TABLE test ALTER COLUMN i SET DATA TYPE BIGINT;

SELECT * FROM test;

COMMIT;

SELECT * FROM test;

CREATE TABLE test (i INT, j INT);

INSERT INTO test VALUES (1, 1), (2, 2);

ALTER TABLE test ALTER COLUMN i SET DATA TYPE INT USING 2 * (i + j);

SELECT * FROM test;

CREATE TABLE test (i INT NOT NULL, j INT);

INSERT INTO test VALUES (1, 1), (2, 2);

INSERT INTO test VALUES (NULL, 4);

ALTER TABLE test ALTER COLUMN i SET DATA TYPE TEXT;

INSERT INTO test VALUES ('hello', 3);

INSERT INTO test VALUES (NULL, 4);

SELECT * FROM test;

CREATE TABLE test (i INT, j INT);

INSERT INTO test VALUES (1, 1), (2, 2);

BEGIN;

ALTER TABLE test ALTER COLUMN i SET DATA TYPE TEXT;

UPDATE test SET i = 'hello';

SELECT * FROM test;

ROLLBACK;

SELECT * FROM test;

CREATE TABLE test (i INT, j INT);

INSERT INTO test VALUES (1, 1), (2, 2);

BEGIN;

ALTER TABLE test ALTER COLUMN j SET DATA TYPE TEXT;

ALTER TABLE test ALTER COLUMN i SET DATA TYPE TEXT;

COMMIT;

ALTER TABLE test ALTER COLUMN i SET DATA TYPE TEXT;

DROP TABLE test;

CREATE TABLE test (i INT, j INT);

INSERT INTO test VALUES (1, 1), (2, 2);

BEGIN;

ALTER TABLE test ALTER COLUMN i SET DATA TYPE TEXT;

INSERT INTO test (i, j) VALUES (3, 3);

DELETE FROM test WHERE i = 1;

SELECT * FROM test;

SELECT * FROM test;

UPDATE test SET i = 1000;

UPDATE test SET j = 100;

SELECT * FROM test;

COMMIT;

SELECT * FROM test;

DROP TABLE test;

CREATE TABLE test (i INT, j INT);

INSERT INTO test VALUES (1, 1), (2, 2);

BEGIN;

INSERT INTO test VALUES (3, 3);

ALTER TABLE test ALTER COLUMN i SET DATA TYPE TEXT;

COMMIT;

DROP TABLE test;

CREATE TABLE test (i INT, j INT);

INSERT INTO test VALUES (1, 1), (2, 2);

BEGIN;

ALTER TABLE test ALTER COLUMN j SET DATA TYPE TEXT;

ALTER TABLE test ALTER COLUMN j SET DATA TYPE TEXT;

CREATE TABLE test (i INT UNIQUE, j INT);

INSERT INTO test VALUES (1, 1), (2, 2);

ALTER TABLE test ALTER COLUMN i SET DATA TYPE TEXT;

ALTER TABLE test ALTER COLUMN j SET DATA TYPE TEXT;

SELECT * FROM test;

PRAGMA enable_verification;

CREATE TABLE test (i AS (1), j INT);

INSERT INTO test VALUES (1), (2);

ALTER TABLE test ALTER COLUMN i SET DATA TYPE TEXT;

ALTER TABLE test ALTER COLUMN j SET DATA TYPE TEXT;

SELECT * FROM test;

PRAGMA enable_verification;

CREATE TABLE data (id INT, x INT);

ALTER TABLE data ALTER COLUMN id DROP DEFAULT;

INSERT INTO data VALUES (1, 0), (2, 1);

ALTER TABLE data ALTER COLUMN id DROP DEFAULT;

ALTER TABLE data ALTER COLUMN id DROP DEFAULT;

ALTER TABLE data ALTER COLUMN x DROP DEFAULT;

ALTER TABLE data ALTER COLUMN x DROP DEFAULT;

ALTER TABLE data ALTER COLUMN j DROP DEFAULT;

CREATE TABLE test (i INT, j INT);

INSERT INTO test VALUES (1, 1), (2, 2);

ALTER TABLE test ALTER COLUMN j SET DEFAULT 3;

INSERT INTO test (i) VALUES (3);

SELECT * FROM test;

ALTER TABLE test ALTER COLUMN j DROP DEFAULT;

INSERT INTO test (i) VALUES (4);

SELECT * FROM test;

CREATE SEQUENCE seq;

ALTER TABLE test ALTER COLUMN j SET DEFAULT NEXTVAL('seq');

INSERT INTO test (i) VALUES (5), (6);

SELECT * FROM test;

CREATE TABLE constrainty (i INT PRIMARY KEY, j INT);

ALTER TABLE constrainty ALTER COLUMN j SET DEFAULT 3;

INSERT INTO constrainty (i) VALUES (2);

SELECT * FROM constrainty;

ALTER TABLE test ALTER COLUMN blabla SET DEFAULT 3;

ALTER TABLE test ALTER COLUMN blabla DROP DEFAULT;

CREATE TABLE test (i INT, j INT);

INSERT INTO test VALUES (1, 1), (2, 2);

ALTER TABLE test DROP COLUMN j;

SELECT * FROM test;

CREATE TABLE test (i INT, j INT CHECK (j < 10));

INSERT INTO test VALUES (1, 1), (2, 2);

SELECT * FROM test;

ALTER TABLE test DROP COLUMN j;

INSERT INTO test VALUES (3);

SELECT * FROM test;

CREATE TABLE test2 (i INT, j INT CHECK (i + j < 10));

INSERT INTO test2 VALUES (1, 1), (2, 2);

SELECT * FROM test2;

ALTER TABLE test2 DROP COLUMN j;

CREATE TABLE test (i INT, j INT CHECK (j < 10));

INSERT INTO test VALUES (1, 1), (2, 2);

SELECT * FROM test;

ALTER TABLE test DROP COLUMN i;

INSERT INTO test VALUES (20);

INSERT INTO test VALUES (3);

SELECT * FROM test;

CREATE TABLE test (i INT, j INT);

INSERT INTO test VALUES (1, 1), (2, 2);

ALTER TABLE test DROP COLUMN blabla;

ALTER TABLE test DROP COLUMN IF EXISTS blabla;

ALTER TABLE test DROP COLUMN i;

ALTER TABLE test DROP COLUMN j;

CREATE TABLE test (i INT, j INT);

INSERT INTO test VALUES (1, 1), (2, 2);

CREATE INDEX i_index ON test(j);

ALTER TABLE test DROP COLUMN j;

ALTER TABLE test DROP COLUMN i;

CREATE TABLE test (i INT, j INT NOT NULL);

INSERT INTO test VALUES (1, 1), (2, 2);

SELECT * FROM test;

ALTER TABLE test DROP COLUMN j;

INSERT INTO test VALUES (3);

SELECT * FROM test;

CREATE TABLE test (i INT, j INT, k INT NOT NULL);

INSERT INTO test VALUES (1, 1, 11), (2, 2, 12);

SELECT * FROM test;

ALTER TABLE test DROP COLUMN j;

INSERT INTO test VALUES (3, NULL);

INSERT INTO test VALUES (3, 13);

SELECT * FROM test;

CREATE TABLE test (i INT, j INT);

INSERT INTO test SELECT i, i FROM RANGE(0, 100) AS tbl(i);

ALTER TABLE test DROP COLUMN i;

DELETE FROM test WHERE j % 2 = 0;

SELECT COUNT(j), SUM(j) FROM test;

UPDATE test SET j = j + 100;

SELECT COUNT(j), SUM(j) FROM test;

CREATE TABLE test (i INT PRIMARY KEY, j INT);

INSERT INTO test VALUES (1, 1), (2, 2);

ALTER TABLE test DROP COLUMN i;

ALTER TABLE test DROP COLUMN j;

INSERT INTO test VALUES (3);

SELECT * FROM test;

CREATE TABLE test (i INT, j INT);

INSERT INTO test VALUES (1, 1), (2, 2);

BEGIN;

ALTER TABLE test DROP COLUMN j;

SELECT * FROM test;

ROLLBACK;

SELECT * FROM test;

CREATE TABLE test (i INT, j INT);

INSERT INTO test VALUES (1, 1), (2, 2);

BEGIN;

ALTER TABLE test DROP COLUMN j;

ALTER TABLE test ADD COLUMN k INT;

COMMIT;

ALTER TABLE test ADD COLUMN k INT;

DROP TABLE test;

CREATE TABLE test (i INT, j INT);

INSERT INTO test VALUES (1, 1), (2, 2);

BEGIN;

ALTER TABLE test DROP COLUMN i;

INSERT INTO test (i, j) VALUES (3, 3);

DELETE FROM test WHERE i = 1;

SELECT * FROM test;

SELECT * FROM test;

UPDATE test SET j = 100;

SELECT * FROM test;

UPDATE test SET j = 100;

COMMIT;

SELECT * FROM test;

DROP TABLE test;

CREATE TABLE test (i INT, j INT);

INSERT INTO test VALUES (1, 1), (2, 2);

BEGIN;

INSERT INTO test VALUES (3, 3);

ALTER TABLE test DROP COLUMN i;

COMMIT;

DROP TABLE test;

CREATE TABLE test (i INT, j INT);

INSERT INTO test VALUES (1, 1), (2, 2);

BEGIN;

ALTER TABLE test DROP COLUMN j;

ALTER TABLE test DROP COLUMN j;

CREATE TABLE t (i INT, j AS (2), k INT, m AS (3), n INT);

ALTER TABLE t DROP COLUMN n;

ALTER TABLE t DROP COLUMN m;

ALTER TABLE t DROP COLUMN k;

CREATE TABLE test (i INT, j INT);

ALTER TABLE test RENAME COLUMN i TO k;

SELECT * FROM test;

CREATE TABLE test (i INT CHECK (i < 10), j INT);

INSERT INTO test (i, j) VALUES (1, 2), (2, 3);

INSERT INTO test (i, j) VALUES (100, 2);

ALTER TABLE test RENAME COLUMN i TO k;

INSERT INTO test (k, j) VALUES (1, 2), (2, 3);

INSERT INTO test (k, j) VALUES (100, 2);

CREATE TABLE test (i INT, j INT);

PREPARE v1 AS SELECT i, j FROM test;

PREPARE v2 AS SELECT * FROM test;

ALTER TABLE test RENAME COLUMN i TO k;

EXECUTE v1;

CREATE TABLE test (i INT, j INT);

ALTER TABLE test RENAME COLUMN blablabla TO k;

ALTER TABLE test RENAME COLUMN i TO j;

CREATE TABLE test (i INT NOT NULL, j INT);

INSERT INTO test (i, j) VALUES (1, 2), (2, 3);

INSERT INTO test (i, j) VALUES (NULL, 2);

ALTER TABLE test RENAME COLUMN i TO k;

INSERT INTO test (k, j) VALUES (1, 2), (2, 3);

INSERT INTO test (k, j) VALUES (NULL, 2);

CREATE TABLE test (i INT, j INT);

START AS TRANSACTION;

ALTER TABLE test RENAME COLUMN i TO k;

SELECT i FROM test;

SELECT k FROM test;

ROLLBACK;

SELECT i FROM test;

SELECT k FROM test;

CREATE TABLE test (i INT, j INT);

START AS TRANSACTION;

START AS TRANSACTION;

ALTER TABLE test RENAME COLUMN i TO k;

SELECT i FROM test;

SELECT k FROM test;

SELECT i FROM test;

SELECT k FROM test;

COMMIT;

SELECT i FROM test;

SELECT k FROM test;

COMMIT;

SELECT i FROM test;

CREATE TABLE test (i INT, j INT, PRIMARY KEY (i, j));

INSERT INTO test (i, j) VALUES (1, 1), (2, 2);

INSERT INTO test (i, j) VALUES (1, 1);

ALTER TABLE test RENAME COLUMN i TO k;

INSERT INTO test (k, j) VALUES (3, 3), (4, 4);

INSERT INTO test (k, j) VALUES (1, 1);

ALTER SCHEMA a RENAME TO b;

CREATE SCHEMA public;

SET schema = public;

CREATE TABLE a1 (c INT);

ALTER TABLE public.a1 RENAME TO a2;

ALTER TABLE a2 RENAME TO a3;

CREATE VIEW v1 AS SELECT 42;

ALTER VIEW public.v1 RENAME TO v2;

CREATE TABLE tbl (i INT);

INSERT INTO tbl VALUES (999), (100);

BEGIN;

ALTER TABLE tbl RENAME TO tbl2;

SELECT * FROM tbl2;

SELECT * FROM tbl;

ROLLBACK;

SELECT * FROM tbl;

SELECT * FROM tbl2;

BEGIN;

ALTER TABLE tbl RENAME TO tbl2;

COMMIT;

SELECT * FROM tbl2;

SELECT * FROM tbl;

SELECT * FROM tbl2;

BEGIN;

ALTER TABLE tbl2 RENAME TO tbl3;

ALTER TABLE tbl3 RENAME TO tbl4;

ALTER TABLE tbl4 RENAME TO tbl5;

ROLLBACK;

SELECT * FROM tbl2;

SELECT * FROM tbl5;

BEGIN;

ALTER TABLE tbl2 RENAME TO tbl3;

ALTER TABLE tbl3 RENAME TO tbl4;

ALTER TABLE tbl4 RENAME TO tbl5;

COMMIT;

SELECT * FROM tbl2;

SELECT * FROM tbl5;

CREATE TABLE tbl2 (i INT);

CREATE TABLE tbl3 (i INT);

CREATE TABLE MY_TABLE (i INT);

INSERT INTO MY_TABLE VALUES (42);

ALTER TABLE MY_TABLE RENAME TO my_table;

SELECT * FROM my_table;

SELECT * FROM MY_TABLE;

CREATE TABLE entry (i INT);

INSERT INTO entry VALUES (1);

SELECT * FROM entry;

BEGIN;

ALTER TABLE entry RENAME TO entry2;

CREATE TABLE entry (j INT);

INSERT INTO entry VALUES (2);

ALTER TABLE entry2 RENAME TO entry3;

ALTER TABLE entry RENAME TO entry2;

CREATE TABLE entry (k INT);

ALTER TABLE entry3 RENAME TO entry4;

ALTER TABLE entry2 RENAME TO entry3;

ALTER TABLE entry RENAME TO entry2;

SELECT * FROM entry;

SELECT * FROM entry2;

SELECT * FROM entry3;

SELECT * FROM entry4;

COMMIT;

SELECT * FROM entry;

SELECT * FROM entry4;

SELECT * FROM entry3;

CREATE TABLE entry (i INT);

INSERT INTO entry VALUES (1);

SELECT * FROM entry;

BEGIN;

ALTER TABLE entry RENAME TO entry2;

CREATE TABLE entry (i INT);

ALTER TABLE entry2 RENAME TO entry3;

ALTER TABLE entry RENAME TO entry2;

CREATE TABLE entry (i INT);

ALTER TABLE entry3 RENAME TO entry4;

ALTER TABLE entry2 RENAME TO entry3;

ALTER TABLE entry RENAME TO entry2;

SELECT * FROM entry;

SELECT * FROM entry2;

SELECT * FROM entry3;

SELECT * FROM entry4;

ROLLBACK;

SELECT * FROM entry;

SELECT * FROM entry4;

CREATE TABLE t1 (i INT);

INSERT INTO t1 VALUES (1), (2), (3);

CREATE TABLE t2 (i TEXT);

INSERT INTO t2 VALUES (4), (5), (6);

BEGIN;

DROP TABLE t2;

ALTER TABLE t1 RENAME TO t2;

SELECT i FROM t2 ORDER BY i;

SELECT i FROM t1 ORDER BY i;

SELECT i FROM t2 ORDER BY i;

COMMIT;

SELECT i FROM t2 ORDER BY i;

SELECT * FROM t1;

BEGIN;

ALTER TABLE t2 RENAME TO t3;

SELECT i FROM t3 ORDER BY i;

SELECT i FROM t2 ORDER BY i;

SELECT i FROM t3 ORDER BY i;

DROP TABLE t3;

SELECT i FROM t2 ORDER BY i;

CREATE TABLE t2 (i INT);

INSERT INTO t2 VALUES (7), (8), (9);

SELECT i FROM t2 ORDER BY i;

ROLLBACK;

SELECT i FROM t2 ORDER BY i;

SELECT i FROM t2 ORDER BY i;

BEGIN;

BEGIN;

ALTER TABLE t2 RENAME TO t3;

CREATE TABLE t3 (i INT);

ROLLBACK;

ROLLBACK;

BEGIN;

BEGIN;

ALTER TABLE t2 RENAME TO t3;

ALTER TABLE t2 RENAME TO t4;

ROLLBACK;

ROLLBACK;

CREATE TABLE e1 (i INT);

CREATE TABLE e2 (i INT);

BEGIN;

BEGIN;

DROP TABLE e2;

DROP TABLE e1;

ALTER TABLE e1 RENAME TO e2;

ALTER TABLE e2 RENAME TO e1;

ROLLBACK;

CREATE TABLE tbl (i INT PRIMARY KEY, j INT CHECK (j < 10));

INSERT INTO tbl VALUES (999, 4), (1000, 5);

INSERT INTO tbl VALUES (999, 4), (1000, 5);

INSERT INTO tbl VALUES (9999, 0), (10000, 1);

INSERT INTO tbl VALUES (777, 10), (888, 10);

SELECT * FROM tbl;

ALTER TABLE tbl RENAME TO new_tbl;

INSERT INTO new_tbl VALUES (999, 0), (1000, 1);

INSERT INTO new_tbl VALUES (9999, 0), (10000, 1);

INSERT INTO new_tbl VALUES (1, 10), (2, 999);

CREATE TABLE tbl (i INT);

CREATE TABLE tbl2 (i INT);

ALTER TABLE non_table RENAME TO tbl;

ALTER TABLE tbl2 RENAME TO tbl;

SET immediate_transaction_mode = TRUE;

CREATE TABLE tbl1 (i INT);

INSERT INTO tbl1 VALUES (999), (100);

BEGIN;

ALTER TABLE tbl1 RENAME TO tbl2;

BEGIN;

ALTER TABLE tbl2 RENAME TO tbl3;

BEGIN;

ALTER TABLE tbl3 RENAME TO tbl4;

SELECT * FROM tbl1;

SELECT * FROM tbl2;

SELECT * FROM tbl3;

SELECT * FROM tbl4;

SELECT * FROM tbl1;

SELECT * FROM tbl2;

SELECT * FROM tbl3;

SELECT * FROM tbl4;

SELECT * FROM tbl1;

SELECT * FROM tbl2;

SELECT * FROM tbl3;

SELECT * FROM tbl4;

SELECT * FROM tbl1;

SELECT * FROM tbl2;

SELECT * FROM tbl3;

SELECT * FROM tbl4;

CREATE TABLE tbl (i INT);

INSERT INTO tbl VALUES (999), (100);

BEGIN;

BEGIN;

ALTER TABLE tbl RENAME TO tbl2;

SELECT * FROM tbl2;

SELECT * FROM tbl;

SELECT * FROM tbl;

SELECT * FROM tbl2;

COMMIT;

COMMIT;

SELECT * FROM tbl;

SELECT * FROM tbl;

SELECT * FROM tbl2;

SELECT * FROM tbl2;

CREATE TABLE tbl (i INT);

CREATE TABLE tbl2 (i INT);

DROP TABLE tbl2;

CREATE TABLE tbl2 (i INT);

ALTER TABLE tbl RENAME TO tbl2;

CREATE TABLE tbl (i INT);

INSERT INTO tbl VALUES (999), (100);

CREATE VIEW v1 AS SELECT * FROM tbl;

ALTER TABLE v1 RENAME TO v2;

SELECT * FROM v1;

CREATE TABLE t0 (c0 INT);

CREATE UNIQUE INDEX i1 ON t0(c0);

ALTER TABLE t0 RENAME TO t3;

CREATE TABLE t3 (c0 INT);

ALTER TABLE t0 RENAME TO t4;

DROP TABLE t0;

ANALYZE t4;

CREATE TABLE t1 (i INT);

INSERT INTO t1 VALUES (1);

BEGIN;

INSERT INTO t1 VALUES (2);

ALTER TABLE t1 RENAME TO t2;

COMMIT;

SELECT * FROM t2;

CREATE TABLE tbl (i INT);
INSERT INTO tbl VALUES (999), (100);
CREATE VIEW vw AS SELECT * FROM tbl;

BEGIN;

ALTER VIEW vw RENAME TO vw2;

SELECT * FROM vw2;

SELECT * FROM vw;

ROLLBACK;

SELECT * FROM vw;

SELECT * FROM vw2;

BEGIN;

ALTER VIEW vw RENAME TO vw2;

COMMIT;

SELECT * FROM vw2;

SELECT * FROM vw;

CREATE VIEW vw AS SELECT i + 1 AS i FROM tbl;

SELECT * FROM vw;

ALTER VIEW sqlite_master RENAME TO my_sqlite_master;

ALTER VIEW nonexistingview RENAME TO my_new_view;

CREATE TABLE tbl (i INT);

CREATE VIEW vw AS SELECT * FROM tbl;

CREATE VIEW vw2 AS SELECT 1729 AS i;

ALTER VIEW non_view RENAME TO vw;

ALTER VIEW vw2 RENAME TO vw;

SET immediate_transaction_mode = TRUE;

CREATE TABLE tbl1 (i INT);

INSERT INTO tbl1 VALUES (999), (100);

CREATE VIEW vw1 AS SELECT * FROM tbl1;

BEGIN;

ALTER VIEW vw1 RENAME TO vw2;

BEGIN;

ALTER VIEW vw2 RENAME TO vw3;

BEGIN;

ALTER VIEW vw3 RENAME TO vw4;

SELECT * FROM vw1;

SELECT * FROM vw2;

SELECT * FROM vw3;

SELECT * FROM vw4;

SELECT * FROM vw1;

SELECT * FROM vw2;

SELECT * FROM vw3;

SELECT * FROM vw4;

SELECT * FROM vw1;

SELECT * FROM vw2;

SELECT * FROM vw3;

SELECT * FROM vw4;

SELECT * FROM vw1;

SELECT * FROM vw2;

SELECT * FROM vw3;

SELECT * FROM vw4;

CREATE TABLE tbl (i INT);

INSERT INTO tbl VALUES (999), (100);

CREATE VIEW v1 AS SELECT * FROM tbl;

ALTER VIEW tbl RENAME TO tbl2;

SELECT * FROM v1;

CREATE TABLE tbl (i INT);

INSERT INTO tbl VALUES (999), (100);

CREATE VIEW vw AS SELECT * FROM tbl;

BEGIN;

BEGIN;

ALTER VIEW vw RENAME TO vw2;

SELECT * FROM vw2;

SELECT * FROM vw;

SELECT * FROM vw;

SELECT * FROM vw2;

COMMIT;

COMMIT;

SELECT * FROM vw;

SELECT * FROM vw;

SELECT * FROM vw2;

SELECT * FROM vw2;

CREATE TABLE test (s STRUCT(s2 STRUCT(v1 INT, v2 INT)));

INSERT INTO test VALUES (ROW(ROW(1, 1))), (ROW(ROW(2, 2)));

ALTER TABLE test ADD COLUMN s.s2.k INTEGER;

SELECT * FROM test;

ALTER TABLE test ADD COLUMN s.s2.v1 VARCHAR;

ALTER TABLE test ADD COLUMN IF NOT EXISTS s.s2.v1 VARCHAR;

ALTER TABLE test ADD COLUMN s.i INTEGER DEFAULT 100;

SELECT * FROM test;

ALTER TABLE test ADD COLUMN s.s2.v1.x INTEGER;

CREATE TABLE test (s STRUCT(i INT, j INT));

INSERT INTO test VALUES (ROW(1, 1)), (ROW(2, 2));

ALTER TABLE test ADD COLUMN s.k INTEGER;

SELECT * FROM test;

ALTER TABLE test ADD COLUMN s.l INTEGER DEFAULT 42;

SELECT * FROM test;

BEGIN;

ALTER TABLE test ADD COLUMN s.m INTEGER DEFAULT 42;

SELECT * FROM test;

ROLLBACK;

SELECT * FROM test;

ALTER TABLE test ADD COLUMN s.i VARCHAR;

ALTER TABLE test ADD COLUMN IF NOT EXISTS s.i VARCHAR;

SELECT * FROM test;

ALTER TABLE test ADD COLUMN s.i.a INTEGER;

ALTER TABLE test ADD COLUMN s.x.a INTEGER;

CREATE TABLE test (s STRUCT(i INT, s2 STRUCT(v1 INT, v2 INT)));

INSERT INTO test VALUES (ROW(42, ROW(1, 1))), (ROW(84, ROW(2, 2)));

ALTER TABLE test DROP s.s2.v1;

SELECT * FROM test;

ALTER TABLE test DROP COLUMN s.s2.v1;

ALTER TABLE test DROP COLUMN IF EXISTS s.s2.v1;

ALTER TABLE test DROP COLUMN s.s2;

SELECT * FROM test;

CREATE TABLE test (s STRUCT(i INT, j INT));

INSERT INTO test VALUES (ROW(1, 1)), (ROW(2, 2));

ALTER TABLE test DROP COLUMN s.i;

SELECT * FROM test;

ALTER TABLE test DROP COLUMN s.j;

ALTER TABLE test DROP COLUMN s.v;

ALTER TABLE test DROP COLUMN IF EXISTS s.v;

ALTER TABLE test DROP COLUMN s.j.a;

ALTER TABLE test DROP COLUMN z.j;

ALTER TABLE test DROP COLUMN s.v1.a;

CREATE TABLE test (s STRUCT(s2 STRUCT(v1 INT, v2 INT)));

INSERT INTO test VALUES (ROW(ROW(1, 1))), (ROW(ROW(2, 2)));

ALTER TABLE test RENAME TO v1, TO i;

SELECT * FROM test;

ALTER TABLE test RENAME COLUMN s.s2.v2 TO i;

ALTER TABLE test RENAME COLUMN s.s2 TO x;

SELECT * FROM test;

CREATE TABLE test (s STRUCT(i INT, j INT));

INSERT INTO test VALUES (ROW(1, 1)), (ROW(2, 2));

ALTER TABLE test RENAME TO i, TO v1;

SELECT * FROM test;

BEGIN;

ALTER TABLE test RENAME TO j, TO v2;

SELECT * FROM test;

ROLLBACK;

SELECT * FROM test;

ALTER TABLE test RENAME TO j, TO v1;

ALTER TABLE test RENAME TO x, TO v2;

ALTER TABLE test RENAME TO i, TO v2;

ALTER TABLE test RENAME TO i, TO v2;

PRAGMA enable_verification;

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (1), (2), (3), (NULL);

INSERT INTO integers SELECT * FROM integers;

INSERT INTO integers SELECT * FROM integers;

INSERT INTO integers SELECT * FROM integers;

INSERT INTO integers SELECT * FROM integers;

INSERT INTO integers SELECT * FROM integers;

INSERT INTO integers SELECT * FROM integers;

INSERT INTO integers SELECT * FROM integers;

INSERT INTO integers SELECT * FROM integers;

INSERT INTO integers SELECT * FROM integers;

INSERT INTO integers SELECT * FROM integers;

INSERT INTO integers SELECT * FROM integers;

INSERT INTO integers SELECT * FROM integers;

INSERT INTO integers SELECT * FROM integers;

INSERT INTO integers SELECT * FROM integers;

INSERT INTO integers SELECT * FROM integers;

SELECT COUNT(*), COUNT(i), SUM(i) FROM integers;

ATTACH '__TEST_DIR__/attach_all_types.db' AS db1;

CREATE TABLE db1.all_types AS SELECT * FROM TEST_ALL_TYPES();

SELECT * FROM TEST_ALL_TYPES();

SELECT * FROM db1.all_types;

DETACH db1;

ATTACH '__TEST_DIR__/attach_all_types.db' AS db1;

PRAGMA enable_verification;

ATTACH '__TEST_DIR__/attach_vacuum.db' AS db1;

CREATE TABLE db1.integers (i INT);

CHECKPOINT AS db1;

ATTACH '__TEST_DIR__/concurrent_checkpoint.db' AS db;

ATTACH '__TEST_DIR__/concurrent_checkpoint.db' AS db;

INSERT INTO db.integers SELECT * FROM RANGE(0, 1000000);

CHECKPOINT AS db;

SELECT COUNT(*), SUM(i) FROM db.integers;

ATTACH ':memory:' AS db1;

CREATE TABLE db1.test (a INT, b INT, c TEXT);

COPY db1.test FROM 'data/csv/test/test.csv';

COPY db1.main.test FROM 'data/csv/test/test.csv';

COPY db1.main.test TO '__TEST_DIR__/test.csv';

USE db1;

COPY test FROM 'data/csv/test/test.csv';

ATTACH '' AS tmp;

CREATE TABLE tmp.t1 (id INT);

ATTACH ':memory:' AS db1;

CREATE TABLE test (a INT);

CREATE INDEX index ON test(a);

CREATE INDEX db1 ON index ON TEST(a);

CREATE TYPE db1.mood AS ENUM('ok', 'sad', 'happy');

CREATE TABLE db1.integers (i mood);

CREATE TABLE integers (i mood);

SELECT CAST('happy' AS mood);

USE db1;

SELECT CAST('happy' AS mood);

PRAGMA enable_verification;

ATTACH '__TEST_DIR__/not_pow_of_two.db' (BLOCK_SIZE 123456);

ATTACH '__TEST_DIR__/exceeds_maximum.db' (BLOCK_SIZE 2147483648);

ATTACH '__TEST_DIR__/not_default.db' (BLOCK_SIZE 16384);

ATTACH '__TEST_DIR__/too_small.db' (BLOCK_SIZE 128);

ATTACH '__TEST_DIR__/default_size.db' (BLOCK_SIZE 262144);

DETACH default_size;

ATTACH '__TEST_DIR__/default_size.db' (BLOCK_SIZE 16384);

ATTACH '__TEST_DIR__/default_size.db';

DETACH default_size;

ATTACH '__TEST_DIR__/dbname.db' (BLOCK_SIZE 16384);

DETACH dbname;

ATTACH '__TEST_DIR__/dbname.db';

SET default_block_size = '123456';

SET default_block_size = '16384';

SET default_block_size = '128';

SET default_block_size = '262144';

PRAGMA enable_verification;

ATTACH '__TEST_DIR__/attach_database_size.db' AS db1;

SELECT database_name FROM PRAGMA_DATABASE_SIZE() ORDER BY 1;

ATTACH ':memory:' AS db2;

SELECT database_name FROM PRAGMA_DATABASE_SIZE() ORDER BY 1;

ATTACH ':memory:' AS "my""db";

CREATE TABLE "my""db".tbl (i INT);

INSERT INTO "my""db".tbl VALUES (42);

USE "my""db";

SELECT * FROM tbl;

USE memory;

CREATE SCHEMA "my""db"."my""schema";

CREATE TABLE "my""db"."my""schema".tbl (i INT);

INSERT INTO "my""db"."my""schema".tbl VALUES (84);

USE "my""db"."my""schema";

SELECT * FROM tbl;

CREATE SCHEMA """";

PRAGMA enable_verification;

ATTACH ':memory:' AS new_database;

ATTACH ':memory:' AS new_database;

ATTACH ':memory:';

ATTACH '__TEST_DIR__/test.db' AS ddb (default_table 'my_table');

SELECT * FROM ddb;

CREATE OR REPLACE TABLE ddb.my_table AS (SELECT 1337 AS value);

SELECT * FROM ddb;

SELECT * FROM ddb.my_table;

SELECT * FROM ddb.main.my_table;

CREATE TABLE ddb AS SELECT 42 AS value;

SELECT * FROM ddb;

SELECT * FROM memory.main.ddb;

SELECT t1.value, t2.value FROM memory.main.ddb AS t1 JOIN ddb.main.my_table AS t2 ON t1.value <> t2.value;

USE ddb;

SELECT * FROM ddb;

SELECT * FROM my_table;

SELECT * FROM main.my_table;

USE memory;

DROP TABLE memory.main.ddb;

CREATE VIEW ddb AS SELECT 1;

SELECT * FROM ddb;

CREATE TABLE pk_tbl (id INT PRIMARY KEY, name TEXT UNIQUE);

CREATE TABLE fk_tbl (id INT REFERENCES pk_tbl (id));
load __TEST_DIR__/alter_column.db;

CREATE TABLE tbl_alter_column (id INT, other INT, nn_col INT NOT NULL, rm INT, rename_c INT, my_def INT, drop_def INT DEFAULT 10, new_null_col INT);

ALTER TABLE tbl_alter_column ADD COLUMN k INT;

ALTER TABLE tbl_alter_column ALTER COLUMN other SET DATA TYPE TEXT USING CONCAT(other, '_', 'yay');

ALTER TABLE tbl_alter_column ALTER COLUMN nn_col DROP NOT NULL;

ALTER TABLE tbl_alter_column DROP rm;

ALTER TABLE tbl_alter_column RENAME TO rename_c, TO my_new_col;

ALTER TABLE tbl_alter_column ALTER COLUMN my_def SET DEFAULT 10;

ALTER TABLE tbl_alter_column ALTER COLUMN drop_def DROP DEFAULT;

ALTER TABLE tbl_alter_column ALTER COLUMN new_null_col SET NOT NULL;
load __TEST_DIR__/other.db;

ATTACH '__TEST_DIR__/fk.db';

ATTACH ':memory:' AS db1;

CREATE TABLE hello (i INT);

CREATE TABLE db1.test (a INT);

SELECT * FROM test;

CREATE SCHEMA db1.myschema;

CREATE TABLE db1.myschema.blablabla (i INT);

SELECT * FROM blablabla;

SET catalog_error_max_schemas = 0;

SELECT * FROM blablabla;

RESET AS catalog_error_max_schemas;

USE db1;

SELECT * FROM test;

SELECT * FROM blablabla;

SELECT * FROM myschema.blablabla;

SELECT * FROM hello;

SELECT * FROM memory.hello;

USE db1.myschema;

SELECT * FROM blablabla;

SELECT * FROM test;

SELECT * FROM db1.main.test;

SELECT * FROM hello;

PRAGMA enable_verification;

ATTACH '__TEST_DIR__/attach_alias.db' AS alias1;

CREATE TABLE alias1.tbl1 AS SELECT 1 AS a;

SELECT * FROM alias1.tbl1;

DETACH alias1;

ATTACH '__TEST_DIR__/attach_alias.db' AS alias2;

SELECT * FROM alias2.tbl1;

PRAGMA enable_verification;

ATTACH '__TEST_DIR__/first.db' (TYPE DUCKDB);

SELECT database_name FROM DUCKDB_DATABASES() ORDER BY 1;

ATTACH '__TEST_DIR__/error.db' (TYPE DUCKDB, HELLO, OPTION 2);

ATTACH '__TEST_DIR__/error.db' (HELLO, OPTION 2);

ATTACH '__TEST_DIR__/attach_access1.db' AS a1;

ATTACH '__TEST_DIR__/attach_access2.db' AS a2;

SET enable_external_access = FALSE;

CREATE TABLE a1.test (a INT PRIMARY KEY, b INT);

CHECKPOINT AS a1;

CREATE TABLE a2.test (a INT PRIMARY KEY, b INT);

CHECKPOINT AS a2;

ATTACH '__TEST_DIR__/attach_access3.db' AS a2;

PRAGMA enable_verification;

ATTACH '__TEST_DIR__/encrypted.duckdb' AS encrypted (ENCRYPTION_KEY 'asdf');

ATTACH '__TEST_DIR__/unencrypted.duckdb' (STORAGE_VERSION 'v1.0.0');

CREATE OR REPLACE TABLE encrypted.tbl AS SELECT * FROM RANGE(0, 10) AS t(i);

CREATE OR REPLACE TABLE unencrypted.tbl AS SELECT * FROM RANGE(0, 10) AS t(i);

SELECT SUM(i) FROM encrypted.tbl;

SELECT SUM(i) FROM unencrypted.tbl;

DETACH encrypted;

DETACH unencrypted;

ATTACH '__TEST_DIR__/encrypted.duckdb' AS encrypted;

ATTACH '__TEST_DIR__/unencrypted.duckdb' AS unencrypted (ENCRYPTION_KEY 'asdf');

ATTACH '__TEST_DIR__/unencrypted.duckdb';

ATTACH '__TEST_DIR__/encrypted.duckdb' AS encrypted (ENCRYPTION_KEY 'asdf');

SELECT SUM(i) FROM encrypted.tbl;

SELECT tags FROM DUCKDB_DATABASES() WHERE database_name LIKE '%encrypted%' ORDER BY database_name;

DETACH encrypted;

PRAGMA enable_verification;

ATTACH '__TEST_DIR__/attach_enums.db' AS db1;

CREATE TYPE db1.mood AS ENUM ('sad', 'ok', 'happy');

SELECT ENUM_RANGE(CAST(NULL AS db1.mood)) AS my_enum_range;

SELECT ENUM_RANGE(CAST(NULL AS db1.main.mood)) AS my_enum_range;

SELECT ENUM_RANGE(CAST(NULL AS xx.db1.main.mood)) AS my_enum_range;

DROP TYPE db1.mood;

DROP TYPE IF EXISTS db1.main.mood;

CREATE TYPE db1.mood AS ENUM ('sad', 'ok', 'happy');

CREATE TABLE db1.person (name TEXT, current_mood mood);

INSERT INTO db1.person VALUES ('Moe', 'happy');

SELECT * FROM db1.person;

DETACH db1;

ATTACH '__TEST_DIR__/attach_enums.db' AS db1 (READ_ONLY);

SELECT * FROM db1.person;

ATTACH '__TEST_DIR__/attach_enums_2.db' AS db2;

CREATE TYPE db2.mood AS ENUM ('ble','grr','kkcry');

CREATE TABLE db2.person (name TEXT, current_mood mood);

INSERT INTO db2.person VALUES ('Moe', 'kkcry');

SELECT * FROM db1.person;

SELECT * FROM db2.person;

ATTACH ':memory:' AS db1;

ATTACH ':memory:' AS other;

USE db1;

CREATE TABLE db1.integers (i INT);

INSERT INTO db1.integers VALUES (1), (2), (3), (NULL);

CREATE VIEW db1.integers_view AS SELECT * FROM integers;

BEGIN;

CREATE TABLE other.dont_export_me (i INT);

CREATE TABLE other.dont_export_me (i INT);

ROLLBACK;

DROP TABLE db1.integers CASCADE;

SELECT * FROM integers;

DROP VIEW integers_view;

DROP VIEW integers_view;

SELECT * FROM integers ORDER BY i;

SELECT * FROM integers_view ORDER BY i;

SELECT * FROM other.dont_export_me;

SET enable_external_access = FALSE;

ATTACH ':memory:' AS db1;

ATTACH 'mydb.db' AS db2;

ATTACH ':memory:' AS db1;

CREATE TABLE album (artistid INT, albumname TEXT, albumcover TEXT, UNIQUE (artistid, albumname));

CREATE TABLE db1.song (songid INT, songartist INT, songalbum TEXT, songname TEXT, FOREIGN KEY (songartist, songalbum) REFERENCES album (artistid, albumname));

USE db1;

CREATE TABLE album (artistid INT, albumname TEXT, albumcover TEXT, UNIQUE (artistid, albumname));

INSERT INTO album VALUES (1, 'A', 'A_cover'), (2, 'B', 'B_cover'), (3, 'C', 'C_cover'), (4, 'D', 'D_cover');

CREATE TABLE song (songid INT, songartist INT, songalbum TEXT, songname TEXT, FOREIGN KEY (songartist, songalbum) REFERENCES album (artistid, albumname));

ATTACH ':memory:' AS db2;

USE db2;

ATTACH 'dummy_extension:/hello.world';

ATTACH 'file://dummy.csv';

PRAGMA enable_verification;

ATTACH '__TEST_DIR__/home_dir.db' AS s1;

CREATE TABLE s1.integers AS SELECT * FROM RANGE(0, 10) AS t(i);

SELECT SUM(i) FROM s1.integers;

DETACH s1;

SET home_directory = '__TEST_DIR__';

ATTACH '~/home_dir.db' AS s1;

SELECT SUM(i) FROM s1.integers;

ATTACH '${S3_ATTACH_DB_PRESIGNED_URL}' AS db (READONLY 1);

SELECT * FROM db.integral_values;

CREATE TABLE db.integers (i INT);

SELECT * FROM db.all_types;

SELECT * FROM db.all_typez;

ATTACH '__TEST_DIR__/german_collation.db' AS db;

SELECT * FROM db.strings;

SELECT * FROM db.strings ORDER BY 1;

PRAGMA enable_verification;

ATTACH '__TEST_DIR__/attach_if_not_exists.db' AS db1;

ATTACH IF NOT EXISTS '__TEST_DIR__/attach_if_not_exists.db' AS db1;

ATTACH IF NOT EXISTS ':memory:' AS db1;

CREATE TABLE db1.integers (i INT);

ATTACH IF NOT EXISTS '__TEST_DIR__/attach_if_not_exists.db' AS db2;

ATTACH ':memory:' AS db1;

DETACH db1;

ATTACH '__TEST_DIR__/attach_if_not_exists.db' AS db1 (READ_WRITE);

ATTACH IF NOT EXISTS '__TEST_DIR__/attach_if_not_exists.db' AS db1 (READ_ONLY);

ATTACH IF NOT EXISTS '__TEST_DIR__/attach_if_not_exists.db' AS db1;

DETACH db1;

ATTACH '__TEST_DIR__/attach_if_not_exists.db' AS db1 (READ_ONLY);

ATTACH IF NOT EXISTS '__TEST_DIR__/attach_if_not_exists.db' AS db1 (READ_WRITE);

ATTACH '__TEST_DIR__/attach_index_db.db';

USE attach_index_db;

CREATE TABLE tbl_a (a_id INT PRIMARY KEY, value TEXT NOT NULL);

CREATE INDEX idx_tbl_a ON tbl_a(value);

INSERT INTO tbl_a VALUES (1, 'x');

INSERT INTO tbl_a VALUES (2, 'y');

SELECT * FROM tbl_a WHERE a_id = 2;

USE memory;

DETACH attach_index_db;

ATTACH '__TEST_DIR__/attach_index_db.db';

SELECT * FROM attach_index_db.tbl_a WHERE a_id = 2;

CREATE TABLE mytable (C1 TEXT);

INSERT INTO mytable VALUES ('a');

ATTACH '__TEST_DIR__/issue16122_new.db' AS TOMERGE;

CREATE TABLE TOMERGE.mytable (C1 TEXT);

INSERT INTO TOMERGE.mytable SELECT * FROM mytable;

SELECT * FROM TOMERGE.mytable;

ATTACH ':memory:' AS test;

USE test;

CREATE SCHEMA schema1;

CREATE TABLE schema1.table1 AS SELECT 1 AS a;

SET schema = 'schema2';

SET schema = 'schema1';

ATTACH ':memory:' AS test;

USE test;

DETACH test;

USE memory;

PRAGMA enable_verification;

ATTACH ':memory:' AS test;

USE test;

CREATE TABLE tbl1 AS SELECT 1 AS a;

SELECT * FROM test.tbl1;

SELECT * FROM test.tbl1;

USE memory;

DETACH test;

DETACH test;

SELECT * FROM tbl1;

PRAGMA enable_verification;

ATTACH ':memory:' AS db1;

CREATE TABLE db1.tbl AS SELECT 42 AS x, 3 AS y;

CREATE MACRO db1.two_x_plus_y(x, y) AS 2 * x + y;

SELECT db1.two_x_plus_y(x, y) FROM db1.tbl;

SELECT db1.main.two_x_plus_y(x, y) FROM db1.tbl;

USE db1;

SELECT TWO_X_PLUS_Y(x, y) FROM db1.tbl;

PRAGMA enable_verification;

ATTACH ':memory:' AS database;

BEGIN;

CREATE TABLE database.integers (i INT);

CREATE TABLE integers (i INT);

ROLLBACK;

CREATE TABLE database.integers (i INT);

CREATE TABLE integers (i INT);

INSERT INTO database.integers SELECT * FROM RANGE(0, 10);

BEGIN;

INSERT INTO integers SELECT * FROM RANGE(0, 10);

INSERT INTO database.integers SELECT * FROM RANGE(0, 10);

PRAGMA enable_verification;

ATTACH ':memory:' AS db1;

ATTACH ':memory:' AS db2;

CREATE SCHEMA db1.s1;

CREATE SCHEMA db2.s1;

CREATE TABLE db1.s1.t (c INT);

CREATE TABLE db2.s1.t (c INT);

INSERT INTO db1.s1.t VALUES (42);

INSERT INTO db2.s1.t SELECT c * 2 FROM db1.s1.t;

SELECT * FROM db1.s1.t, db2.s1.t;

SELECT db1.t.c, db2.t.c FROM db1.s1.t, db2.s1.t;

SELECT db1.s1.t.c, db2.s1.t.c FROM db1.s1.t, db2.s1.t;

SELECT * EXCLUDE (db1.s1.t.c) FROM db1.s1.t, db2.s1.t;

SELECT * EXCLUDE (DB1.S1.T.C) FROM db1.s1.t, db2.s1.t;

SELECT * EXCLUDE (s1.t.c) FROM db1.s1.t, (SELECT 42) AS t;

SELECT * EXCLUDE (new_col) FROM (SELECT * RENAME (db1.s1.t.c AS new_col) FROM db1.s1.t, db2.s1.t);

SELECT * EXCLUDE (new_col) FROM (SELECT * RENAME (DB1.S1.T.C AS new_col) FROM db1.s1.t, db2.s1.t);

SELECT * EXCLUDE (new_col) FROM (SELECT * RENAME (s1.t.c AS new_col) FROM db1.s1.t, (SELECT 42) AS t);

SELECT db1.s1.t, db2.s1.t FROM db1.s1.t, db2.s1.t;

SELECT db1.t, db2.t FROM db1.s1.t, db2.s1.t;

SELECT c FROM db1.s1.t, db2.s1.t;

SELECT t.c FROM db1.s1.t, db2.s1.t;

SELECT s1.t.c FROM db1.s1.t, db2.s1.t;

SELECT db1.s1.t.c FROM db1.s1.t, db2.s1.t;

CREATE OR REPLACE TABLE db1.s1.t (c INT, c_squared AS (c * c));

INSERT INTO db1.s1.t VALUES (42);

SELECT * FROM db1.s1.t, db2.s1.t;

PRAGMA enable_verification;

ATTACH ':memory:' AS database;

CREATE SCHEMA database.schema;

CREATE SCHEMA database.schema;

INSERT INTO database.schema."table" VALUES ({'field': 42});

SELECT database.schema."table".col.field FROM database.schema."table";

SELECT database.schema."table".col FROM database.schema."table";

SELECT database.schema."table" FROM database.schema."table";

SELECT database.schema."table" FROM database.schema."table";

SELECT schema."table" FROM database.schema."table";

SELECT "table" FROM database.schema."table";

USE DATABASE schema;

SELECT "table" FROM "table";

SELECT schema."table" FROM "table";

SELECT database."table" FROM "table";

SELECT database.schema."table" FROM "table";

PRAGMA enable_verification;

ATTACH '__TEST_DIR__/test_new_compression.db' AS db1 (STORAGE_VERSION 'v1.0.0');

SET force_compression = 'roaring';

CREATE TABLE db1.tbl AS SELECT CASE WHEN i % 2 = 0 THEN NULL ELSE i END AS i FROM RANGE(0, 10000) AS t(i);

SET force_compression = 'zstd';

CREATE TABLE db1.str_tbl AS SELECT GROUP_CONCAT('long_string_' || i, '-') FROM RANGE(0, 1000) AS t(i);

SELECT COUNT(*) > 0 FROM PRAGMA_STORAGE_INFO('db1.tbl') WHERE compression = 'Roaring';

SELECT COUNT(*) > 0 FROM PRAGMA_STORAGE_INFO('db1.str_tbl') WHERE compression = 'ZSTD';

DETACH db1;

ATTACH '__TEST_DIR__/test_new_compression.db' AS db1 (STORAGE_VERSION 'v1.2.0');

SET force_compression = 'roaring';

CREATE TABLE db1.tbl2 AS SELECT * FROM db1.tbl;

CHECKPOINT AS db1;

SET force_compression = 'zstd';

CREATE TABLE db1.str_tbl2 AS SELECT * FROM db1.str_tbl;

CHECKPOINT AS db1;

SELECT COUNT(*) > 0 FROM PRAGMA_STORAGE_INFO('db1.tbl2') WHERE compression = 'Roaring';

SELECT COUNT(*) > 0 FROM PRAGMA_STORAGE_INFO('db1.str_tbl2') WHERE compression = 'ZSTD';

PRAGMA enable_verification;

ATTACH '__TEST_DIR__/attach_or_replace.db' AS db1;

CREATE TABLE db1.all_types AS SELECT * FROM TEST_ALL_TYPES();

ATTACH '__TEST_DIR__/attach_or_replace_new.db' AS db2;

CREATE TABLE db2.all_types_new AS SELECT * FROM TEST_ALL_TYPES();

DETACH db2;

DETACH db2;

SELECT * FROM db1.all_types;

SELECT * FROM db1.all_types;

SELECT * FROM db1.all_types;

SELECT * FROM db1.all_types;

SELECT * FROM db1.all_types;

SELECT * FROM db1.all_types_new;

ATTACH '__TEST_DIR__/attach_or_replace.db' AS db2;

PRAGMA enable_verification;

ATTACH '__TEST_DIR__/persistent_attach.db';

ATTACH '__TEST_DIR__/persistent_attach.db';

CREATE TABLE persistent_attach.integers (i INT);

INSERT INTO persistent_attach.integers VALUES (42);

SELECT SUM(i) FROM persistent_attach.integers;

DETACH persistent_attach;

SELECT SUM(i) FROM persistent_attach.integers;

ATTACH '__TEST_DIR__/persistent_attach.db';

SELECT SUM(i) FROM persistent_attach.integers;

ATTACH '__TEST_DIR__/database.db' AS persistent;

CREATE OR REPLACE TABLE persistent.T1 (A0 INT);

INSERT INTO persistent.T1 VALUES (5);

SELECT column_name FROM PRAGMA_STORAGE_INFO('persistent.T1');

PRAGMA enable_verification;

ATTACH ':memory:' AS db1 (READONLY 1);

ATTACH ':memory:' AS db1 (BLABLABLA 1);

ATTACH '__TEST_DIR__/attach_read_only.db' AS db1 (READONLY 1);

ATTACH '__TEST_DIR__/attach_read_only.db' AS db1;

CREATE TABLE db1.integers AS SELECT * FROM RANGE(0, 10) AS t(i);

DETACH db1;

ATTACH '__TEST_DIR__/attach_read_only.db' AS db1 (READONLY 1);

SELECT SUM(i) FROM db1.integers;

CREATE TABLE db1.test AS SELECT * FROM RANGE(0, 10) AS t(i);

ATTACH ':memory:' AS db2;

CREATE TABLE db2.integers AS SELECT * FROM db1.integers;

SELECT SUM(i) FROM db2.integers;

SELECT SUM(i) FROM integers;

CREATE TABLE test AS SELECT * FROM RANGE(0, 10) AS t(i);

ATTACH ':memory:' AS db1 (READ_WRITE);

CREATE TABLE db1.test AS SELECT * FROM integers;

CREATE TABLE test AS SELECT * FROM db1.test;

PRAGMA enable_verification;

ATTACH ':memory:' AS db1;

CREATE TABLE db1.integers (i INT);

INSERT INTO db1.integers VALUES (42);

INSERT INTO db1.integers VALUES (42);

SELECT * FROM db1.integers;

INSERT INTO db1.integers VALUES (48);

ATTACH 'https://duckdb.org/non_existing.db' AS db2 (READ_ONLY);

ATTACH 'https://duckdb.org/non_existing.db' AS db2;

ATTACH 'https://duckdb.org/non_existing.db' AS db2 (READ_WRITE);

PRAGMA enable_verification;

ATTACH '__TEST_DIR__/temp.db';

CREATE TABLE temp_db.integers (i INT);

DETACH temp_db;

ATTACH '__TEST_DIR__/system.db';

CREATE TABLE system_db.integers (i INT);

DETACH system_db;

ATTACH ':memory:' AS temp;

ATTACH ':memory:' AS main;

ATTACH ':memory:' AS system;

PRAGMA enable_verification;

ATTACH '__TEST_DIR__/attach_row_group_size.db' AS db1 (STORAGE_VERSION 'v1.0.0', ROW_GROUP_SIZE 245760);

ATTACH '__TEST_DIR__/attach_row_group_size.db' AS db1 (STORAGE_VERSION 'v1.0.0');

CREATE TABLE db1.tbl AS SELECT * FROM RANGE(0, 10000) AS t(i);

DETACH db1;

ATTACH '__TEST_DIR__/attach_row_group_size.db' AS db1 (STORAGE_VERSION 'v1.2.0', ROW_GROUP_SIZE 245760);

PRAGMA enable_verification;

ATTACH '__TEST_DIR__/attach_same_db.db' AS db1;

ATTACH '__TEST_DIR__/attach_same_db.db' AS db2;

BEGIN;

DETACH db1;

ATTACH '__TEST_DIR__/attach_same_db.db' AS db1;

PRAGMA enable_verification;

ATTACH ':memory:' AS new_database;

CREATE SCHEMA s1.xxx;

CREATE SCHEMA IF NOT EXISTS s1.xxx;

ATTACH '__TEST_DIR__/attach_seq.db' AS db1;

CREATE SEQUENCE seq;

CREATE TABLE db1.integers (i INT DEFAULT NEXTVAL('seq'));

CREATE SEQUENCE db1.seq;

CREATE TABLE db1.integers (i INT DEFAULT NEXTVAL('db1.seq'));

SELECT NEXTVAL('db1.seq');

SELECT NEXTVAL('seq');

CREATE TABLE integers (i INT DEFAULT NEXTVAL('db1.seq'));

DETACH db1;

SET storage_compatibility_version = 'latest';

ATTACH '__TEST_DIR__/db1.db';

USE db1;

CREATE TABLE A (A1 INT PRIMARY KEY, A2 TEXT, A3 INT);

CREATE INDEX A_index ON A(A2);

CREATE TABLE B (B1 INT REFERENCES A (A1));

USE memory;

DETACH db1;

ATTACH '__TEST_DIR__/db1.db' AS other_db;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

ATTACH '__TEST_DIR__/db2.db';

USE db2;

CREATE TABLE A (A1 INT PRIMARY KEY, A2 TEXT, A3 INT);

CREATE INDEX A_index ON A(A2);

CREATE TABLE B (B1 INT REFERENCES A (A1));

USE memory;

DETACH db2;

PRAGMA enable_verification;

ATTACH ':memory:' AS new_database;

CREATE SCHEMA new_database.s1;

CREATE TABLE tbl (a INT);

CREATE TABLE new_database.tbl (b INT);

CREATE TABLE new_database.s1.tbl (c INT);

SHOW ALL TABLES;

PRAGMA enable_verification;

ATTACH ':memory:' AS db1;

ATTACH ':memory:' AS db2;

CREATE TABLE db1.table_in_db1 (i INT);

CREATE TABLE db2.table_in_db2 (i INT);

CREATE SCHEMA db2.test_schema;

CREATE TABLE db2.test_schema.table_in_db2_test_schema (i INT);

SHOW TABLES;

USE DB1;

SHOW TABLES;

USE db1;

SHOW TABLES;

USE db2;

SHOW TABLES;

USE db2.test_schema;

SHOW TABLES;

USE DB2.TEST_sChEmA;

SHOW TABLES;

SELECT * FROM table_in_db2;

PRAGMA enable_verification;

ATTACH '__TEST_DIR__/version_1_2_0.db' (STORAGE_VERSION 'v1.2.0');

SELECT tags['storage_version'] FROM DUCKDB_DATABASES() WHERE database_name = 'version_1_2_0';

DETACH version_1_2_0;

ATTACH '__TEST_DIR__/version_1_2_0.db' (STORAGE_VERSION 'v1.0.0');

ATTACH '__TEST_DIR__/version_1_2_0.db' (STORAGE_VERSION 'v1.4.0');

ATTACH '__TEST_DIR__/version_1_2_0.db' (STORAGE_VERSION 'v1.2.0');

SELECT tags['storage_version'] FROM DUCKDB_DATABASES() WHERE database_name = 'version_1_2_0';

DETACH version_1_2_0;

ATTACH '__TEST_DIR__/version_1_2_0.db';

SELECT tags['storage_version'] FROM DUCKDB_DATABASES() WHERE database_name = 'version_1_2_0';

DETACH version_1_2_0;

SET storage_compatibility_version = 'v0.10.2';

ATTACH '__TEST_DIR__/default_version.db';

CREATE TABLE default_version.tbl (i TEXT);

SELECT tags['storage_version'] FROM DUCKDB_DATABASES() WHERE database_name = 'default_version';

DETACH default_version;

ATTACH '__TEST_DIR__/default_version.db' (STORAGE_VERSION 'v1.2.0');

SELECT tags['storage_version'] FROM DUCKDB_DATABASES() WHERE database_name = 'default_version';

SET force_compression = 'zstd';

INSERT INTO default_version.tbl VALUES ('abcd'), ('efgh'), ('hello'), ('world'), (NULL);

CHECKPOINT AS default_version;

DETACH default_version;

ATTACH '__TEST_DIR__/default_version.db';

SELECT tags['storage_version'] FROM DUCKDB_DATABASES() WHERE database_name = 'default_version';

SELECT * FROM default_version.tbl;

DETACH default_version;

ATTACH '__TEST_DIR__/default_version.db' (STORAGE_VERSION 'v1.2.0');

SELECT * FROM default_version.tbl;

DETACH default_version;

ATTACH '__TEST_DIR__/default_version.db' (STORAGE_VERSION 'v1.0.0');

SET storage_compatibility_version = 'v1.2.0';

ATTACH '__TEST_DIR__/modified_default_setting.db';

SELECT tags['storage_version'] FROM DUCKDB_DATABASES() WHERE database_name = 'modified_default_setting';

PRAGMA enable_verification;

ATTACH '__TEST_DIR__/constraint_test.db' AS test;

CREATE TABLE test.tbl (i INT PRIMARY KEY);

SELECT constraint_catalog, table_catalog, table_name FROM information_schema.table_constraints LIMIT 1;

PRAGMA enable_verification;

ATTACH ':memory:' AS new_database;

ATTACH ':memory:' AS new_database;

ATTACH ':memory:' AS new_database;

ATTACH ':memory:' AS new_database;

ATTACH ':memory:' AS new_database;

ATTACH ':memory:' AS new_database;

ATTACH ':memory:' AS new_database;

ATTACH ':memory:' AS new_database;

ATTACH ':memory:' AS new_database;

ATTACH ':memory:' AS new_database;

ATTACH ':memory:' AS new_database;

ATTACH ':memory:' AS new_database;

ATTACH ':memory:' AS new_database;

ATTACH ':memory:' AS new_database;

ATTACH ':memory:' AS new_database;

ATTACH ':memory:' AS new_database;

ATTACH ':memory:' AS new_database;

ATTACH ':memory:' AS new_database;

ATTACH ':memory:' AS new_database;

ATTACH ':memory:' AS new_database;

ATTACH ':memory:' AS new_database;

ATTACH ':memory:' AS new_database;

PRAGMA enable_verification;

ATTACH ':memory:' AS new_database;

CREATE TABLE new_database.integers (i INT);

PRAGMA TABLE_INFO('new_database.integers');

CREATE SCHEMA new_database.new_schema;

CREATE TABLE new_database.new_schema.integers (i INT);

PRAGMA TABLE_INFO('new_database.new_schema.integers');

SELECT CURRENT_DATABASE();

USE new_database.new_schema;

PRAGMA TABLE_INFO('integers');

SELECT CURRENT_DATABASE();

PRAGMA enable_verification;

BEGIN;

ATTACH '__TEST_DIR__/attach_transaction.db';

ROLLBACK;

BEGIN;

ATTACH '__TEST_DIR__/attach_transaction.db';

CREATE TABLE attach_transaction.integers (i INT);

INSERT INTO attach_transaction.integers VALUES (42);

ROLLBACK;

BEGIN;

ATTACH '__TEST_DIR__/attach_transaction.db';

CREATE TABLE attach_transaction.integers (i INT);

INSERT INTO attach_transaction.integers VALUES (42);

COMMIT;

BEGIN;

DETACH attach_transaction;

ROLLBACK;

DETACH attach_transaction;

BEGIN;

ATTACH '__TEST_DIR__/attach_transaction.db';

INSERT INTO attach_transaction.integers VALUES (84);

DETACH attach_transaction;

ROLLBACK;

BEGIN;

ATTACH '__TEST_DIR__/attach_transaction.db';

SELECT * FROM attach_transaction.integers;

INSERT INTO attach_transaction.integers VALUES (84);

DETACH attach_transaction;

COMMIT;

ATTACH '__TEST_DIR__/attach_transaction.db';

SELECT * FROM attach_transaction.integers ORDER BY 1;

PRAGMA enable_verification;

ATTACH ':memory:' AS new_database;

CREATE TABLE t1 AS SELECT 42 AS i;

CREATE TABLE t1 AS SELECT 42 AS i;

CREATE TABLE t1 AS SELECT 42 AS i;

CREATE TABLE t1 AS SELECT 42 AS i;

CREATE TABLE t1 AS SELECT 42 AS i;

CREATE TABLE t1 AS SELECT 42 AS i;

CREATE TABLE t1 AS SELECT 42 AS i;

CREATE TABLE t1 AS SELECT 42 AS i;

CREATE TABLE t1 AS SELECT 42 AS i;

CREATE TABLE t1 AS SELECT 42 AS i;

CREATE TABLE t1 AS SELECT 42 AS i;

CREATE TABLE t1 AS SELECT 42 AS i;

CREATE TABLE t1 AS SELECT 42 AS i;

PRAGMA enable_verification;

ATTACH '__TEST_DIR__/view_search_path.db' AS view_search_path;

USE view_search_path;

CREATE TABLE my_tbl (i INT);

INSERT INTO my_tbl VALUES (42);

CREATE VIEW my_view AS SELECT * FROM my_tbl;

SELECT * FROM my_view;

CREATE SCHEMA my_schema;

USE my_schema;

CREATE TABLE my_tbl (i INT);

INSERT INTO my_tbl VALUES (84);

CREATE VIEW my_view AS SELECT * FROM my_tbl;

SELECT * FROM my_view;

USE memory;

SELECT * FROM view_search_path.my_view;

SELECT * FROM view_search_path.my_schema.my_view;

DETACH view_search_path;

ATTACH '__TEST_DIR__/view_search_path.db' AS view_search_path;

SELECT * FROM view_search_path.my_view;

SELECT * FROM view_search_path.my_schema.my_view;

PRAGMA enable_verification;

ATTACH '__TEST_DIR__/wal_crash.db' AS db1;

USE db1;

CREATE TABLE t2 (c1 INT);

CHECKPOINT;

SET wal_autocheckpoint = '1TB';

PRAGMA disable_checkpoint_on_shutdown;

ALTER TABLE t2 ALTER COLUMN c1 SET DEFAULT 0;

ATTACH ':memory:' AS db2;

USE db2;

DETACH db1;

ATTACH '__TEST_DIR__/wal_crash.db' AS db1;

ATTACH '__TEST_DIR__/wal_crash.db' AS db1;

SELECT * FROM db1.t2;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

ATTACH '__TEST_DIR__/attach_wal_with_sequence.db' AS db1;

CREATE SEQUENCE db1.seq;

CREATE TABLE db1.test (a INT DEFAULT NEXTVAL('seq'), b INT, c INT DEFAULT CURRVAL('seq'));

INSERT INTO db1.test (b) VALUES (1);

ALTER TABLE db1.test RENAME TO blubb;

INSERT INTO db1.blubb (b) VALUES (10);

SELECT * FROM db1.blubb;

DETACH db1;

ATTACH '__TEST_DIR__/attach_wal_with_sequence.db' AS db2;

INSERT INTO db2.blubb (b) VALUES (100);

SELECT * FROM db2.blubb;

PRAGMA enable_verification;

ATTACH ':memory:' AS varchar;

PRAGMA enable_verification;

ATTACH ':memory:' AS new_database;

CREATE TABLE new_database.integers (i INT);

INSERT INTO new_database.integers VALUES (42);

INSERT INTO new_database.main.integers VALUES (84);

SELECT * FROM integers;

SELECT * FROM new_database.integers ORDER BY i;

SELECT * FROM new_database.main.integers ORDER BY i;

SELECT * FROM new_database.integers ORDER BY new_database.i;

SELECT * FROM new_database.integers ORDER BY new_database.integers.i;

SELECT * FROM new_database.main.integers ORDER BY new_database.main.integers.i;

ATTACH '__TEST_DIR__/reattach_schema.db' AS new_db;

CREATE SCHEMA new_db.my_schema;

CREATE TABLE new_db.my_schema.my_table (col INT);

INSERT INTO new_db.my_schema.my_table VALUES (42);

CREATE VIEW new_db.my_schema.my_view AS SELECT 84;

CREATE SEQUENCE new_db.my_schema.my_sequence;

CREATE MACRO new_db.my_schema.one() AS (SELECT 1);

CREATE MACRO new_db.my_schema.range(a) as TABLE SELECT * FROM range(a);

SELECT new_db.my_schema.one();

SELECT * FROM new_db.my_schema.RANGE(0, 3);

DETACH new_db;

ATTACH '__TEST_DIR__/reattach_schema.db' AS new_name;

SELECT * FROM new_name.my_schema.my_table;

SELECT * FROM new_name.my_schema.my_view;

SELECT NEXTVAL('new_name.my_schema.my_sequence');

SELECT new_name.my_schema.one();

SELECT * FROM new_name.my_schema.RANGE(0, 3);

USE new_name.my_schema;

USE new_name.my_schema.my_table;

SELECT * FROM my_table;

SELECT * FROM my_view;

SELECT NEXTVAL('my_sequence');

SELECT ONE();

SELECT * FROM RANGE(0, 3);

PRAGMA enable_verification;

ATTACH ':memory:' AS new_database;

SHOW DATABASES;

SELECT name FROM pragma_database_list ORDER BY name;

USE new_database;

CREATE TABLE tbl AS SELECT 42 AS i;

SELECT * FROM new_database.tbl;

USE blablabla;

PRAGMA enable_verification;

DETACH system;

DETACH temp;

CREATE SCHEMA system.eek;

CREATE TABLE system.main.integers (i INT);

CREATE VIEW system.main.integers AS SELECT 42;

CREATE SEQUENCE system.main.seq;

CREATE MACRO system.main.my_macro(a,b) AS a+b;

CREATE TYPE system.main.rainbow AS ENUM ('red', 'orange', 'yellow', 'green', 'blue', 'purple');

PRAGMA enable_verification;

WITH test_data AS (SELECT 'foo' AS a) SELECT test_data.foobar AS new_column FROM test_data WHERE NOT new_column IS NULL;

PRAGMA enable_verification;

SELECT COUNT(*) FROM (SELECT RANDOM() AS num FROM RANGE(0, 20) WHERE num > 0.9) WHERE num <= 0.9;

PRAGMA enable_verification;

CREATE TABLE test (a INT);

INSERT INTO test VALUES (2), (1), (3);

SELECT a AS "user" FROM test GROUP BY "user";

SELECT a AS "user" FROM test GROUP BY "user" HAVING "user" = 1;

SELECT a AS "user" FROM test ORDER BY "user";

SELECT a AS "user" FROM test GROUP BY "user" ORDER BY "user";

PRAGMA enable_verification;

CREATE TABLE t (i INT);

INSERT INTO t VALUES (42);

SELECT COUNT(*) FROM t, t;

SELECT * FROM (SELECT 42 AS x) AS t, (SELECT 84 AS y) AS t;

SELECT t.x, t.y FROM (SELECT 42 AS x) AS t, (SELECT 84 AS y) AS t;

SELECT t.z FROM (SELECT 42 AS x) AS t, (SELECT 84 AS y) AS t;

SELECT t.i FROM t, t;

PRAGMA enable_verification;

CREATE TABLE my_functions AS SELECT 'my_name' AS function_name;

SELECT function_name AS raw, REPLACE(raw, '_', ' ') AS prettier FROM my_functions GROUP BY ALL;

PRAGMA enable_verification;

CREATE SCHEMA IF NOT EXISTS prd;

CREATE TABLE prd.ad_stats_v (event_date DATE, app TEXT, country TEXT, platform TEXT);

SELECT event_date, country FROM prd.ad_stats_v GROUP BY event_date, prd.ad_stats_v.country ORDER BY country;

SELECT event_date, ad_stats_v.country FROM prd.ad_stats_v GROUP BY event_date, prd.ad_stats_v.country ORDER BY ad_stats_v.country;

PRAGMA enable_verification;

CREATE TABLE customers (name TEXT, age INT, something_easy_to_type_wrong INT, city TEXT);

CREATE TABLE zipcodes (city TEXT, zipcode TEXT);

WITH cte AS (SELECT *, RANK() OVER (ORDER BY something_easy_to_typo_wrong) AS rk FROM customers WHERE age <= 42) SELECT * FROM zipcodes JOIN cte USING (city);

CREATE TABLE integers AS SELECT 42 AS i, '5' AS v;

SELECT i >= v FROM integers;

SELECT i[1] FROM integers;

SELECT [i, v] FROM integers;

SET old_implicit_casting = TRUE;

SELECT i[1] FROM integers;

SELECT i >= v FROM integers;

SELECT [i, v] FROM integers;

PRAGMA enable_verification;

CREATE TABLE src ("Name" TEXT, CreatedAt TIMESTAMP, userID TEXT, "Version" TEXT, Clients BIGINT, HasDocumentation BOOLEAN, HasCustomAddress BOOLEAN, HasHostname BOOLEAN, RunningContainers BIGINT, HasActions BOOLEAN);

CREATE VIEW model AS SELECT DISTINCT ON (userID, DATE_TRUNC('DAY', CreatedAt)) DATE_TRUNC('DAY', CreatedAt) AS CreatedAt, "Version", Clients, HasCustomAddress, HasHostname, RunningContainers, HasDocumentation, HasActions FROM src WHERE name = 'events' ORDER BY userID, CreatedAt DESC;

SELECT HasCustomAddress, COUNT(*) AS total_records FROM model WHERE 1 = 1 AND CreatedAt >= '2023-12-01' AND CreatedAt < '2023-12-13' GROUP BY HasCustomAddress;

PRAGMA enable_verification;

CREATE SCHEMA IF NOT EXISTS s1;

CREATE SCHEMA IF NOT EXISTS s2;

CREATE SCHEMA IF NOT EXISTS s3;

CREATE TABLE s1.tbl (i INT);

CREATE TABLE s2.tbl (i INT);

CREATE TABLE s3.tbl (i INT);

CREATE TABLE tbl (i INT);

INSERT INTO s1.tbl VALUES (10);

INSERT INTO s2.tbl VALUES (100);

INSERT INTO s3.tbl VALUES (1000);

INSERT INTO tbl VALUES (1);

SELECT * FROM tbl, s1.tbl, s2.tbl;

SELECT * FROM tbl, s1.tbl, s2.tbl, s3.tbl;

SELECT tbl.i FROM s1.tbl, s2.tbl;

SELECT tbl.i FROM s1.tbl, s2.tbl, s3.tbl;

SELECT s1.tbl, s2.tbl, s3.tbl FROM s1.tbl, s2.tbl, s3.tbl;

CREATE TABLE s1.t AS SELECT 1 AS id, 's1.t' AS payload UNION ALL SELECT 10 AS id, 'AAA' AS payload;

CREATE TABLE s2.t AS SELECT 1 AS id, 's2.t' AS payload2 UNION ALL SELECT 100 AS id, 'BBB' AS payload2;

CREATE TABLE s3.t AS SELECT 1 AS id, 's3.t' AS payload3 UNION ALL SELECT 1000 AS id, 'CCC' AS payload3;

SELECT * FROM s1.t JOIN s2.t USING (id) JOIN s3.t USING (id);

SELECT id FROM s1.t JOIN s2.t USING (id) JOIN s3.t USING (id);

SELECT * FROM s1.t NATURAL JOIN s2.t NATURAL JOIN s3.t;

SELECT id, s1.t.id, s2.t.id, s3.t.id, s1.t.payload, s2.t.payload2, s3.t.payload3 FROM s1.t LEFT JOIN s2.t USING (id) LEFT JOIN s3.t USING (id) ORDER BY ALL;

SELECT id, s1.t.id, s2.t.id, s3.t.id, s1.t.payload, s2.t.payload2, s3.t.payload3 FROM s1.t RIGHT JOIN s2.t USING (id) RIGHT JOIN s3.t USING (id) ORDER BY ALL;

SELECT id, s1.t.id, s2.t.id, s3.t.id, s1.t.payload, s2.t.payload2, s3.t.payload3 FROM s1.t FULL OUTER JOIN s2.t USING (id) FULL OUTER JOIN s3.t USING (id) ORDER BY ALL;

CREATE OR REPLACE TABLE s1.tbl (col INT);

CREATE OR REPLACE TABLE s2.TBL (COL INT);

CREATE OR REPLACE TABLE s3.Tbl (Col INT);

INSERT INTO s1.tbl VALUES (10);

INSERT INTO s2.tbl VALUES (100);

INSERT INTO s3.tbl VALUES (1000);

SELECT * FROM tbl, s1.tbl, s2.tbl, s3.tbl;

SELECT tbl.col FROM s1.tbl, s2.tbl;

SELECT tbl.col FROM s1.tbl, s2.tbl, s3.tbl;

SELECT s1.tbl, s2.tbl, s3.tbl FROM s1.tbl, s2.tbl, s3.tbl;

PRAGMA enable_verification;

CREATE TABLE depdelay_minutes (depdelay_minutes INT);

SELECT * FROM depdelay;

SELECT depdelay FROM depdelay_minutes;

CREATE TABLE lineitem (i INT);

SELECT * FROM li;

SELECT * FROM lineitem_long;

SELECT JARO_WINKLER_('x', 'y');

CREATE SCHEMA s1;

CREATE TABLE s1.my_lineitem (i INT);

SELECT * FROM my_lineitem;

SELECT * FROM m_lineitem;

CREATE TABLE s1.orders (i INT);

SELECT * FROM ord;

PRAGMA enable_verification;

SELECT '01' = 1;

SELECT COS('0');

SELECT CAST('1992-01-01' AS DATE) > '1991-01-01';

SELECT CAST('2023-12-11' AS DATE) < '2023-12-11 15:54:45.119';

CREATE TABLE test ("date" DATE, value TEXT);

INSERT INTO test VALUES ('2023-08-01', 1), ('2023-08-02', 2), ('2023-08-03', 3), ('2023-08-04', 4), ('2023-08-05', 5), ('2023-08-06', 6), ('2023-08-07', 7);

SELECT * FROM test WHERE date >= '2023-08-05 00:00:00' AND date < '2023-08-06 00:00:00';

SELECT '[hello]'[1];

SELECT LIST('hello world');

SELECT 1 IN ('1', '2');

SELECT COALESCE(1, '1');

SELECT i = 1 FROM (VALUES ('01')) AS t(i);

SELECT i IN (1) FROM (VALUES ('01')) AS t(i);

WITH cte AS (SELECT '01' AS s) SELECT 1 = s AS in_res FROM cte;

WITH cte AS (SELECT '01' AS s) SELECT 1 IN (s) AS in_res FROM cte;

SELECT i > 1 FROM (VALUES ('01')) AS t(i);

SELECT CAST('1992-01-01' AS DATE) > i FROM (VALUES ('1991-01-01')) AS t(i);

SELECT d[1] FROM (VALUES (CAST('1992-01-01' AS DATE))) AS t(d);

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (1), (2), (3), (NULL);

SELECT t.k FROM integers AS "t"("k") ORDER BY ALL;

SELECT t.k FROM integers AS t("k") ORDER BY ALL;

PRAGMA enable_verification;

CREATE SCHEMA s1;

CREATE VIEW s1.v AS SELECT 42 AS c;

CREATE TABLE s1.t AS SELECT 42 AS c;

SELECT s1.v.c, v.c, c FROM s1.v;

SELECT s1.t.c, t.c, c FROM s1.t;

SELECT s1.t.c, t.c, c FROM s1.t AS t;

SELECT s1.x.c FROM s1.v AS x;

SELECT s1.v.c FROM s1.v AS x;

SELECT s1.v.c FROM s1.v AS v;

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (1), (2), (3), (NULL);

SELECT i % 2 AS p, SUM(i) AS sum_i FROM integers GROUP BY p ORDER BY 1;

SELECT ALIAS(i % 2) AS p, ALIAS(SUM(i)) AS sum_i FROM integers GROUP BY p ORDER BY 1;

SELECT i + 1 + 1 + 1 AS k, ABS(i) AS l FROM integers WHERE i = 1 ORDER BY 1;

SELECT ALIAS(i + 1 + 1 + 1) AS k, ALIAS(ABS(i)) AS l FROM integers WHERE i = 1 ORDER BY 1;

SELECT ALIAS(i) AS k, ALIAS(i IN (1)) AS l, ALIAS(i >= 10) AS m, ALIAS(1 = 0) AS n FROM integers WHERE i = 1 ORDER BY 1;

SELECT ALIAS(CASE WHEN i = 1 THEN 19 ELSE 0 END) AS k, ALIAS(CAST(i AS TEXT)) AS l FROM integers WHERE i = 1 ORDER BY 1;

CREATE TABLE test (a INT, b INT);

INSERT INTO test VALUES (42, 10), (43, 100);

SELECT a, b, a * 2 AS c, b * (a * 2) AS d FROM test ORDER BY a;

SELECT ALIAS(a), ALIAS(b), ALIAS(a * 2) AS c, ALIAS(b * (a * 2)) AS d FROM test ORDER BY a;

SELECT i AS b, b AS c, c AS d, d AS e FROM integers WHERE e = 3;

CREATE OR REPLACE TABLE tbl (example TEXT);

INSERT INTO tbl VALUES ('hello');

SELECT (WITH keys AS (SELECT example AS k), nonNull AS (SELECT keys.k, example AS v FROM keys WHERE NOT v IS NULL) SELECT nonNull.v FROM nonNull) FROM tbl;

CREATE OR REPLACE TABLE testjson (example JSON);

INSERT INTO testjson VALUES ('{ "location" : { "address" : "123 Main St" }, "sampleField" : null, "anotherField" : 123, "yetAnotherField" : "abc" }');

SELECT (WITH keys AS (SELECT UNNEST(JSON_KEYS(example)) AS k), nonNull AS (SELECT keys.k, (example -> keys).k AS v FROM keys WHERE NOT NULLIF(v, 'null') IS NULL) SELECT JSON_GROUP_OBJECT(nonNull.k, nonNull.v) FROM nonNull) FROM testjson;

CREATE OR REPLACE MACRO strip_null_value(jsonValue) AS (
WITH keys AS (SELECT UNNEST(json_keys(jsonValue)) AS k),
nonNull AS (
SELECT keys.k, jsonValue->keys.k AS v
FROM keys WHERE nullif(v, 'null') IS NOT NULL
)
SELECT json_group_object(nonNull.k, nonNull.v)
FROM nonNull
);

SELECT STRIP_NULL_VALUE('{ "location" : { "address" : "123 Main St" }, "sampleField" : null, "anotherField" : 123, "yetAnotherField" : "abc" }') AS example;

CREATE OR REPLACE TABLE testjson (example JSON);

INSERT INTO testjson VALUES ('{ "location" : { "address" : "123 Main St" }, "sampleField" : null, "anotherField" : 123, "yetAnotherField" : "abc" }');

SELECT STRIP_NULL_VALUE(example) FROM testjson;

WITH x AS (SELECT '{ "location" : { "address" : "123 Main St" }, "sampleField" : null, "anotherField" : 123, "yetAnotherField" : "abc" }' AS example) SELECT STRIP_NULL_VALUE(x.example) AS test FROM x;

PRAGMA enable_verification;

CREATE TABLE test ("HeLlO" INT);

INSERT INTO test VALUES (1);

SELECT HeLlO FROM test;

SELECT hello FROM test;

SELECT "HeLlO" FROM test;

SELECT "HELLO" FROM test;

SELECT "HELLo" FROM test;

SELECT ALIAS(HeLlO) FROM test;

SELECT ALIAS(hello) FROM test;

SELECT ALIAS(x) FROM (SELECT HeLlO AS x FROM test) AS tbl;

SELECT test.HeLlO FROM test;

SELECT test.hello FROM test;

SELECT test."HeLlO" FROM test;

SELECT test."HELLO" FROM test;

SELECT test."HELLo" FROM test;

UPDATE test SET hello = 3;

UPDATE test SET HeLlO = 3;

DROP TABLE test;

CREATE TABLE test ("HeLlO" INT, "HELLO" INT);

CREATE TABLE test1 ("HeLlO" INT);

CREATE TABLE test2 ("HELLO" INT);

SELECT HeLlO FROM test1, test2;

SELECT hello FROM test1, test2;

SELECT "HeLlO" FROM test1, test2;

SELECT "HELLO" FROM test1, test2;

SELECT "HELLo" FROM test1, test2;

SELECT test1.HeLlO FROM test1, test2;

SELECT test1.hello FROM test1, test2;

SELECT test1."HeLlO" FROM test1, test2;

SELECT test1."HELLO" FROM test1, test2;

SELECT test1."HELLo" FROM test1, test2;

SELECT test2.HeLlO FROM test1, test2;

SELECT test2.hello FROM test1, test2;

SELECT test2."HeLlO" FROM test1, test2;

SELECT test2."HELLO" FROM test1, test2;

SELECT test2."HELLo" FROM test1, test2;

SELECT * FROM test1 JOIN test2 USING (hello);

SELECT hello FROM (SELECT 42) AS tbl("HeLlO");

PRAGMA enable_verification;

SELECT 'test' || ' more testing' AS added, added.substr(5) AS my_substr;

CREATE TABLE varchars (v TEXT);

INSERT INTO varchars VALUES ('>>%Test<<'), ('%FUNCTION%'), ('Chaining');

SELECT v.lower() FROM varchars;

SELECT v.lower() FROM varchars;

SELECT v.trim('><') AS trim_inequality, trim_inequality.replace('%', '') AS only_alphabet, only_alphabet.lower() AS lower FROM varchars;

SELECT varchars.v.trim('><') AS trim_inequality, trim_inequality.replace('%', '') AS only_alphabet, only_alphabet.lower() AS lower FROM varchars;

DELETE FROM varchars;

INSERT INTO varchars VALUES ('Test Function Chainging Alias');

SELECT CAST(v.split(' ') AS TEXT) AS strings, strings.lower() AS lower, lower.upper() AS upper FROM varchars;

SELECT v.split(' ') AS strings, strings.apply(x -> x.lower()).filter(x -> x[1] = 't') AS lower, strings.apply(x -> x.upper()).filter(x -> x[1] = 'T') AS upper, lower + upper AS mix_case_srings FROM varchars;

PREPARE v1 AS
SELECT (?.split(' ')::VARCHAR).lower() lstrings,
(?.split(' ')::VARCHAR).upper() ustrings,
list_concat(lstrings::VARCHAR[], ustrings::VARCHAR[]) as mix_case_srings;

EXECUTE v1('Hello World', 'test function chainging');

INSERT INTO varchars VALUES ('Another longggggg String');

SELECT v.split(' ') AS strings, strings.apply(x -> x.lower()).filter(x -> x[1] = 't' OR x[1] = 'a') AS lower, strings.apply(x -> x.upper()).filter(x -> x[1] = 'T' OR x[1] = 'A') AS upper, lower + upper AS mix_case_srings FROM varchars WHERE mix_case_srings[1] = 'test';

SELECT v.split(' ') AS strings, strings.apply(x -> x.lower()).filter(x -> x[1] = 't' OR x[1] = 'a') AS lower, strings.apply(x -> x.upper()).filter(x -> x[1] = 'T' OR x[1] = 'A') AS upper, lower + upper AS mix_case_srings FROM varchars WHERE mix_case_srings[1] = 'another';

WITH test AS (SELECT 'woot' AS my_column) SELECT my_column.substr(2) AS partial_woot, partial_woot.substr(2) AS more_partially_woot FROM test WHERE more_partially_woot = 'ot';

PRAGMA enable_verification;

CREATE TABLE integers AS SELECT * FROM RANGE(0, 5) AS tbl(i);

SELECT i, COUNT(*) AS k FROM integers GROUP BY i HAVING k = 1 ORDER BY i;

SELECT i, COUNT(*) AS k FROM integers GROUP BY i HAVING integers.k = 1 ORDER BY i;

SELECT 1 AS i, COUNT(*) FROM integers GROUP BY i HAVING i = 2;

SELECT i AS j, COUNT(*) AS i FROM integers GROUP BY j HAVING integers.i = 1 ORDER BY i;

SELECT i AS j, COUNT(*) AS i FROM integers GROUP BY j HAVING j = 1 ORDER BY i;

SELECT COUNT(i) AS j FROM integers HAVING j = 5;

SELECT COUNT(i) AS i FROM integers HAVING i = 5;

SELECT COUNT(i) AS i FROM integers GROUP BY i HAVING i = 5;

SELECT COUNT(i) AS i FROM integers HAVING i = 5 ORDER BY i;

SELECT COUNT(i) AS j FROM integers HAVING j = j;

SELECT COUNT(*) FROM (SELECT i, SUM(RANDOM()) AS k FROM integers GROUP BY i HAVING k = k) AS tbl(i, k);

SELECT COUNT(i) AS i FROM integers HAVING integers.i = 5 ORDER BY i;

SELECT i + i AS i FROM integers HAVING i = 5 ORDER BY i;

PRAGMA enable_verification;

CREATE TABLE test AS SELECT range AS i FROM RANGE(0, 3);

SELECT test FROM test;

SELECT test FROM main.test;

SELECT main.test FROM main.test;

SELECT t FROM test AS t;

SELECT t FROM (SELECT * FROM test) AS t;

SELECT main.test FROM main.test AS t;

SELECT main.t FROM main.test AS t;

WITH data AS (SELECT 1 AS a, 2 AS b, 3 AS c) SELECT d FROM data AS d;

CREATE TABLE main AS SELECT 3 AS test;

SELECT main.test FROM main, test;

SELECT test FROM main, test;

CREATE TABLE structs AS SELECT {'test': 4} AS main;

SELECT main.test FROM structs, test;

CREATE TABLE tbl (str TEXT);

INSERT INTO tbl VALUES ('ABCDE'), ('aBcDe');

INSERT INTO tbl VALUES ('àbcdë');

INSERT INTO tbl VALUES ('ÀbCdÈ');

SELECT * FROM tbl WHERE str IN ('AbCdE');

SELECT * FROM tbl WHERE str COLLATE nocase IN ('abcde');

SELECT * FROM tbl WHERE str COLLATE noaccent IN ('abcde');

SELECT * FROM tbl WHERE str COLLATE nocase.noaccent IN ('abcde');

SELECT * FROM tbl WHERE NOT str IN ('abcde');

SELECT * FROM tbl WHERE NOT str COLLATE nocase IN ('abcde');

SELECT * FROM tbl WHERE NOT str COLLATE noaccent IN ('abcde');

SELECT * FROM tbl WHERE NOT str COLLATE nocase.noaccent IN ('abcde');

PRAGMA enable_verification;

SELECT NULL;

SELECT NULL UNION ALL SELECT CAST(1 AS BOOLEAN);

SELECT NULL UNION ALL SELECT NULL;

SELECT NULL UNION ALL SELECT NULL UNION ALL SELECT NULL UNION ALL SELECT NULL UNION ALL SELECT CAST(1 AS BOOLEAN);

SELECT (SELECT NULL) UNION ALL SELECT CAST(1 AS BOOLEAN);

SELECT * FROM (SELECT NULL) AS tbl(i) UNION ALL SELECT CAST(1 AS BOOLEAN);

SELECT * FROM (SELECT (SELECT NULL) UNION ALL SELECT CAST(1 AS BOOLEAN)) AS tbl(i);

SELECT * FROM (SELECT NULL) AS tbl(i) UNION ALL SELECT NULL;

SELECT BOOL_AND(i) FROM (SELECT * FROM (SELECT NULL) AS tbl(i) UNION ALL SELECT CAST(1 AS BOOLEAN)) AS tbl(i);

SELECT BOOL_AND(i) FROM (SELECT * FROM (SELECT CAST(NULL AS INT)) AS tbl(i) UNION ALL SELECT CAST(1 AS BOOLEAN)) AS tbl(i);

SELECT * FROM (SELECT NULL) AS tbl(i), (SELECT NULL) AS tbl2(j);

SELECT BOOL_AND(i), BOOL_AND(j) FROM (SELECT NULL) AS tbl(i), (SELECT NULL) AS tbl2(j);

SELECT NULL AS a, NULL AS b, 1 AS id UNION SELECT CAST(1 AS BOOLEAN) AS a, CAST(0 AS BOOLEAN) AS b, 2 AS id;

SELECT CAST(1 AS BOOLEAN) AS a, CAST(0 AS BOOLEAN) AS b, 1 AS id UNION SELECT NULL AS a, NULL AS b, 2 AS id;

SELECT CAST(NULL AS INT) AS a, CAST(NULL AS INT) AS b, 1 AS id UNION SELECT CAST(1 AS BOOLEAN) AS a, CAST(0 AS BOOLEAN) AS b, 2 AS id;

SELECT CAST(1 AS BOOLEAN) AS a, CAST(0 AS BOOLEAN) AS b, 1 AS id UNION SELECT CAST(NULL AS INT) AS a, CAST(NULL AS INT) AS b, 2 AS id;

CREATE TABLE tbl AS SELECT NULL UNION ALL SELECT NULL;

SELECT * FROM tbl;

SELECT * FROM tbl;

CREATE VIEW v1 AS SELECT NULL;

SELECT * FROM v1;

SELECT * FROM v1 UNION ALL SELECT CAST(1 AS BOOLEAN);

SELECT * FROM v1 UNION ALL SELECT CAST(1 AS BOOLEAN);

CREATE VIEW v2 AS SELECT NULL UNION ALL SELECT NULL;

SELECT * FROM v2;

SELECT * FROM v2 UNION ALL SELECT CAST(1 AS BOOLEAN);

SELECT * FROM v2 UNION ALL SELECT CAST(1 AS BOOLEAN);

SELECT [NULL];

SELECT [NULL] UNION ALL SELECT [TRUE];

SELECT {'x': NULL};

SELECT {'x': NULL} UNION ALL SELECT {'x': TRUE};

WITH cte AS (SELECT NULL) SELECT * FROM cte;

WITH cte AS (SELECT NULL) SELECT * FROM cte UNION ALL SELECT CAST(1 AS BOOLEAN);

PRAGMA enable_verification;

CREATE TABLE test AS SELECT * FROM (VALUES (42, 43), (44, 45)) AS v(i, j);

CREATE TABLE test AS SELECT * FROM (VALUES (42, 43), (44, 45)) AS v(i, j);

PRAGMA enable_verification;

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (1), (2), (3);

SELECT i + 1 AS a, a + 1 AS b FROM integers ORDER BY b;

SELECT i + 1 AS a, a + a AS b, b + b AS c, c + c AS d FROM integers ORDER BY b;

SELECT i + 1 AS i, i + 1 AS b FROM integers ORDER BY b;

SELECT a + 1 AS b, i + 1 AS a FROM integers;

SELECT RANDOM() AS a, a + 1 AS b FROM integers;

CREATE TABLE orders AS SELECT CAST(RANDOM() * 100 AS INT) + 1 AS customer_id, CAST('2020-01-01' AS DATE) + INTERVAL (CAST(RANDOM() * 365 * 10 AS INT)) DAYS AS order_date, CAST(RANDOM() * 1000 AS INT) AS order_amount FROM RANGE(0, 1000) ORDER BY order_date;

SELECT (SELECT DISTINCT DATE_TRUNC('MONTH', order_date) FROM orders) AS month, (SELECT SUM(order_amount) FROM orders WHERE DATE_TRUNC('MONTH', order_date) = month) AS revenue;

PRAGMA enable_verification;

CREATE TABLE integers (i INT);

SELECT i AS "hello world" FROM integers;

SELECT i AS "hello world" FROM integers;

SELECT i AS "hello world" FROM integers;

SELECT i AS "hello world" FROM integers;

SELECT "hello world".i FROM integers AS "hello world";

SELECT "hello world".i FROM integers AS "hello world";

PRAGMA enable_verification;

SELECT TRUE = 1;

SELECT TRUE = 0;

SELECT FALSE = 0;

SELECT FALSE = 1;

SELECT 1 = TRUE;

SELECT 0 = TRUE;

SELECT 0 = FALSE;

SELECT 1 = FALSE;

SELECT TRUE = '1';

SELECT TRUE = CAST('1' AS TEXT);

SELECT TRUE = '0';

SELECT FALSE = '0';

SELECT FALSE = '1';

SELECT TRUE = 'true';

SELECT TRUE = 'false';

SELECT FALSE = 'false';

SELECT FALSE = 'true';

SELECT '1' = TRUE;

SELECT '0' = TRUE;

SELECT '0' = FALSE;

SELECT '1' = FALSE;

SELECT TRUE = 'true';

SELECT TRUE = 'false';

SELECT FALSE = 'false';

SELECT FALSE = 'true';

SELECT FALSE = 'unknownbool';

SELECT 'unknownbool' = FALSE;

PRAGMA enable_verification;

SELECT CAST(1 AS STRUCT(i INT));

SELECT CAST(1000 AS UTINYINT);

SELECT CAST('hello' AS INT);

SELECT CAST(1000 AS DECIMAL(2, 1));

SELECT CAST(CAST(1000.0 AS DECIMAL(5, 1)) AS DECIMAL(2, 1));

SELECT CAST([1000] AS UTINYINT[]);

SELECT CAST([1000] AS UTINYINT[]);

SELECT CAST(1e308 AS REAL);

SELECT CAST(1e308 AS INT128);

SELECT CAST(CAST(1000000000000000000000000000000 AS INT128) AS INT);

SELECT NTH_VALUE(42, 'hello') OVER ();

SELECT CAST('1900' AS DATE);

SELECT CAST(42 AS UTINYINT) + 'hello';

SELECT CAST(BITSTRING('1', 9) AS BOOLEAN);

SELECT CAST([1, 2, 3] AS INT[2]);

SELECT CAST('\x' AS BLOB);

SELECT CAST('\x' AS BLOB);

INSERT INTO cast_table VALUES (1000, 'hello', 1000.0, [1000], {'i': 1000}, 1e308, 1000000000000000000000000000000, '\x');

SELECT CAST(i AS UTINYINT) FROM cast_table;

SELECT CAST(s AS INT) FROM cast_table;

SELECT CAST(i AS DECIMAL(2, 1)) FROM cast_table;

SELECT CAST(d AS DECIMAL(2, 1)) FROM cast_table;

SELECT CAST(l AS UTINYINT[]) FROM cast_table;

SELECT CAST(l AS UTINYINT[]) FROM cast_table;

SELECT CAST(dbl AS REAL) FROM cast_table;

SELECT CAST(dbl AS INT128) FROM cast_table;

SELECT CAST(CAST(hge AS INT128) AS INT) FROM cast_table;

SELECT CAST(l AS INT[3]) FROM cast_table;

SELECT CAST(invalid_blob_str AS BLOB) FROM cast_table;

PRAGMA enable_verification;

SELECT CAST(100000000000000000000 AS DOUBLE) < CAST(99999999999999999999.99999 AS DOUBLE);

SELECT 100000000000000000000 > 99999999999999999999.99999;

SELECT CAST(999999999999999.9999 AS DOUBLE) <= CAST(999999999999999.99999999 AS DOUBLE);

PRAGMA enable_verification;

SELECT CAST(1e308 AS REAL);

SELECT CAST('1e308' AS REAL);

SELECT CAST('1e310' AS DOUBLE);

SELECT CAST('-1e308' AS REAL);

SELECT CAST('-1e310' AS DOUBLE);

PRAGMA enable_verification;

SELECT CAST('[12,13,14]' AS INT[]);

SELECT CAST('["hello", "world", "!"]' AS TEXT[]);

SELECT CAST('[Hello World!]' AS TEXT[]);

SELECT CAST('[[Hello World!], hello, universe]' AS TEXT[]);

SELECT CAST('[Cast like this]' AS TEXT[]);

SELECT UNNEST(CAST('[NULL, , NULL]' AS TEXT[]));

SELECT UNNEST(CAST('[NULL,, NULL]' AS TEXT[]));

SELECT UNNEST(CAST('[NULL,   , NULL]' AS TEXT[]));

SELECT UNNEST(CAST('[NULL, NULL , ]' AS TEXT[]));

SELECT UNNEST(CAST('[NULL, NULL ,]' AS TEXT[]));

SELECT UNNEST(CAST('[NULL, NULL,]' AS TEXT[]));

SELECT CAST('[ [12,13,14], [8, 9], [4], [2, 1, 0] ]' AS INT[][]) AS a, CAST(CAST(a AS TEXT) AS INT[][]) AS b, a = b;

SELECT CAST('[ [[12,13,14], [8, 9]], [[4]], [[2, 1, 0], [99]] ]' AS INT[][][]);

SELECT CAST('[ [12,13,14], [8, 9], [4], [2,  1,  0] ]' AS TEXT[]);

SELECT CAST('[[ [🦆, 🦆, 🦆]], [[duck, db, 🦆], [🦆]], [[🦆, duck, db]]]' AS TEXT[][][]);

CREATE TABLE stringList (col1 TEXT);

INSERT INTO stringList VALUES ('["hello","world","!"]'), ('["Amazing","text"]'), ('[Hello World!]');

SELECT CAST(col1 AS TEXT[]) FROM stringList;

CREATE TABLE nestedStrings (col1 TEXT);

INSERT INTO nestedStrings VALUES ('[["hello"], ["world"],["!"]]'), ('[["Amazing"],["text"]]'), ('[[Hello World!]]');

SELECT CAST(col1 AS TEXT[][]) FROM nestedStrings;

CREATE TABLE superNestedStrings (col1 TEXT);

INSERT INTO superNestedStrings VALUES ('[[[[["hello"]]], [[["world"],["!"]]]]]'), ('[[[[["Amazing"]],[["text"]]]]]'), ('[[[[[Hello World!]]]]]');

SELECT CAST(col1 AS TEXT[][][][][]) FROM superNestedStrings;

CREATE TABLE tbl (col1 TEXT);

INSERT INTO tbl VALUES ('[1,2,2]'), ('[345,67865,44,4]'), ('[5,6,7]');

SELECT CAST(col1 AS INT[]) FROM tbl;

CREATE TABLE doubleNested (col1 TEXT);

INSERT INTO doubleNested VALUES ('[[1,2],[2]]'), ('[[345],[67865,44,4]]'), ('[[5],[6,7]]');

SELECT CAST(col1 AS INT[][]) FROM doubleNested;

CREATE TABLE tripleNested (col1 TEXT);

INSERT INTO tripleNested VALUES ('[[[1,2],[3]]]'), ('[[[4]]]');

SELECT CAST(col1 AS INT[][][]) FROM tripleNested;

CREATE TABLE crazyNested (col1 TEXT);

INSERT INTO crazyNested VALUES ('[[[[[[1]],[[3,4,9]]],[[[0,1]]]]]]'), ('[[[[[[4]]]]]]');

SELECT CAST(col1 AS INT[][][][][][]) FROM crazyNested;

SELECT CAST('[''hello'',''world'', ''!'']' AS TEXT[]);

SELECT CAST('[\\''hello\\'',\\''world\\'', \\''!\\'']' AS TEXT[]);

SELECT CAST('[[ [''🦆, 🦆, 🦆'']], [[duck, db, ''🦆''] ]]' AS TEXT[][][]);

SELECT CAST('[can\\''t, you\\''re, i\\''m]' AS TEXT[]);

SELECT CAST('["]", "hello", "world"]' AS TEXT[]);

SELECT CAST('['']'', "hello", "world"]' AS TEXT[]);

SELECT CAST('[ [12,     13,14], [8, 9         ], [ 4    ], [    2, 1,     0] ]  ' AS INT[][]);

SELECT CAST('[          [ [12,     13,14], [8, 9         ]  ],[[ 4    ]   ],        [[    2, 1,     0 ]         ] ]  ' AS INT[][][]);

SELECT CAST('["   hello","          \\"''  world", "!         "]' AS TEXT[]);

SELECT CAST('[   hello     ,   world      , !         ]' AS TEXT[]);

SELECT CAST('[    [ "   hello"]  ,["            world"        ],[ "!        "           ]      ]' AS TEXT[][]);

SELECT CAST('[]' AS TEXT[]);

SELECT CAST('[]' AS INT[]);

SELECT CAST('[]' AS INT[][][][]);

SELECT CAST('[[1, 2, 3], [], [	], [  ]]' AS INT[][]);

SELECT CAST('[[1, 2, 3], [], NULL, [NULL], [4, NULL]]' AS INT[][]);

CREATE TABLE null_tbl (col1 TEXT);

INSERT INTO null_tbl VALUES (NULL), (NULL), ('[NULL]');

SELECT CAST(col1 AS INT[]) FROM null_tbl;

SELECT CAST(NULL AS INT[]);

SELECT CAST('[NULL]' AS INT[]);

SELECT CAST('[NULL]' AS INT[][]);

SELECT CAST('[[12,13,14], [8, 9], NULL, [2, 1]]' AS INT[][]);

SELECT CAST('[[12,13,14], [8, 9], [2, NULL, 1]]' AS INT[][]);

SELECT CAST('[ [[12,13,14], NULL], [[4]], NULL, [[2, NULL, 1, 0], [99]] ]' AS INT[][][]);

SELECT TRY_CAST('Hello World' AS INT[]);

CREATE TABLE try_cast_tbl (col1 TEXT);

INSERT INTO try_cast_tbl VALUES ('[1,2,X,2]'), ('[hello DuckDB]'), ('[345,oops,44,4.0]'), ('[12345678901]'), ('[5,6,7]'), ('[3 0, 1]');

SELECT TRY_CAST(col1 AS INT[]) FROM try_cast_tbl;

SELECT CAST('{[3]}' AS INT[]);

SELECT CAST('Hello World' AS INT[]);

SELECT CAST('[3]]' AS INT[]);

SELECT CAST('[3],[[]' AS INT[][]);

SELECT CAST('[3], [[1]]' AS INT[][]);

SELECT CAST('[[3 1]]' AS INT[][]);

SELECT CAST('[[3,, 1]]' AS INT[][]);

SELECT CAST('[[3], [[5], [4]]' AS INT[][]);

SELECT CAST('][3]' AS INT[]);

SELECT CAST('[[[[[]][3][[]][][[[][]]]]]' AS INT[][][][]);

SELECT * FROM tbl WHERE CAST(col1 AS INT[]) = [1, 2, 2];

SELECT col1 FROM tbl WHERE LENGTH(CAST(col1 AS INT[])) < 4;

SELECT CAST(col1 AS INT[]) FROM tbl WHERE LENGTH(CAST(col1 AS INT[])) < 4;

CREATE TABLE struct_tbl1 (col TEXT);

INSERT INTO struct_tbl1 VALUES ('[{a: "hii"}, {a: "hellooo"}]');

SELECT CAST(col AS STRUCT(a TEXT)[]) FROM struct_tbl1;

SELECT CAST('[ [{a:[12,13,14], b:"🦆"}], [{a:[12,13,14], b:"🦆", c:100}] ]' AS STRUCT(a INT[], b TEXT, c REAL)[][]);

SELECT CAST('[{a:[12,13,14], b:"🦆", c:{a:[[a], [b, c]], b:[123]}}]' AS STRUCT(a INT[], b TEXT, c STRUCT(a TEXT[][], b INT[]))[]);

SELECT CAST('[{a: hii}, {a: "{" }]' AS STRUCT(a TEXT)[]) FROM struct_tbl1;

CREATE TABLE struct_tbl2 (col TEXT);

INSERT INTO struct_tbl2 VALUES ('[{a: 7, b:"Duck"}, {a: 7000, b: "🦆🦆🦆🦆🦆🦆"}]');

SELECT CAST(col AS STRUCT(a INT, b TEXT)[]) FROM struct_tbl2;

CREATE TABLE int_list (col INT[]);

COPY (SELECT [1, 2, 3]) TO '__TEST_DIR__/int_list.csv';

COPY int_list FROM '__TEST_DIR__/int_list.csv';

SELECT col FROM int_list;

CREATE TABLE assorted_lists (col1 INT[], col2 TEXT[], col3 DATE[]);

COPY (SELECT [8, 7, 6], '[hello, Duck\\\\''DB]', '[2022-12-2, 1929-01-25]') TO '__TEST_DIR__/assorted_lists.csv' WITH (Header 0);

COPY assorted_lists FROM '__TEST_DIR__/assorted_lists.csv';

SELECT * FROM assorted_lists;

SELECT CAST('[{"bar":"\""}]' AS TEXT[]);

SELECT CAST('[{"bar":"\\""}]' AS TEXT[]);

SELECT CAST('[{"bar":"\\""}]' AS STRUCT(bar TEXT)[]);

SELECT CAST('[{"bar":"\\\""}]' AS STRUCT(bar TEXT)[]);

SELECT CAST('[{"bar":"\"\"\\\"\"\"\\"}]' AS STRUCT(bar TEXT)[]) AS a, CAST(CAST(a AS TEXT) AS STRUCT(bar TEXT)[]) AS b, a = b;

SELECT CAST('[\\  \\\\abc\\\\ \\ , def, ghi]' AS TEXT[]) AS a, a[1], LENGTH(a[1]);

SELECT CAST('["\\  \\\\abc\\\\ \\ ", def, ghi]' AS TEXT[]) AS a, a[1], LENGTH(a[1]);

SELECT CAST('[hello, world]' AS TEXT[]);

SELECT CAST('["hello\\ world", world]' AS TEXT[]);

SELECT CAST('[hello\\ world, world]' AS TEXT[]);

SELECT CAST('[hello\\,world, test]' AS TEXT[]);

SELECT CAST('["hello\\,world", test]' AS TEXT[]);

SELECT CAST('["hello\\,", test]' AS TEXT[]);

SELECT CAST('[hello\\,, test]' AS TEXT[]);

SELECT CAST('['''']' AS TEXT[]) AS a, CAST(CAST(a AS TEXT) AS TEXT[]) AS b, a = b;

SELECT CAST('[hello\\"quoted\\"text, more]' AS TEXT[]);

SELECT CAST('[escaped\\\\backslash, test]' AS TEXT[]);

SELECT CAST('["escaped\\\\backslash", test]' AS TEXT[]);

SELECT CAST('[nested[brackets], test]' AS TEXT[]);

SELECT CAST('[nested[bracket, test]' AS TEXT[]);

SELECT CAST('[nested"["bracket, test]' AS TEXT[]);

SELECT CAST('[quote\\''in\\''string, test]' AS TEXT[]);

SELECT CAST('[mix\\ of\\ special\\,chars]' AS TEXT[]);

SELECT CAST('["mix\\ of\\ special\\,chars"]' AS TEXT[]);

SELECT CAST('["mix\\ of\\ special\\,"chars]' AS TEXT[]);

SELECT CAST('["ends with space ", "trailing space "]' AS TEXT[]);

SELECT CAST('["ends with comma,", "another,"]' AS TEXT[]);

SELECT CAST('["quote at end\\"", "\\""]' AS TEXT[]);

SELECT CAST('["ends with bracket]", "[bracket"]' AS TEXT[]);

SELECT CAST('["backslash at end\\\\", "\\\\"]' AS TEXT[]);

SELECT CAST('[" space at start", " leading space"]' AS TEXT[]);

SELECT CAST('[",comma at start", ",leading comma"]' AS TEXT[]);

SELECT CAST('["\\"quote at start", "\\"leading quote"]' AS TEXT[]);

SELECT CAST('["[bracket at start", "[leading bracket"]' AS TEXT[]);

SELECT CAST('["\\\\backslash at start", "\\\\leading backslash"]' AS TEXT[]);

SELECT CAST('[" space at start and end ", " leading and trailing space "]' AS TEXT[]);

SELECT CAST('[",comma at start and end,", ",leading and trailing comma,"]' AS TEXT[]);

SELECT CAST('["\\"quote at start and end\\"", "\\"leading and trailing quote\\""]' AS TEXT[]);

SELECT CAST('["[bracket at start and end]", "[leading and trailing bracket]"]' AS TEXT[]);

SELECT CAST('["\\\\backslash at start and end\\\\", "\\\\leading and trailing backslash\\\\"]' AS TEXT[]);

SELECT CAST('[" mix, of special\\ characters " , "[various] \\"combinations\\" "]' AS TEXT[]);

SELECT CAST('[", starts and ends with ,", "[brackets] and ,commas,"]' AS TEXT[]);

SELECT CAST('["\\"quotes\\" and \\ spaces ", "\\ leading and trailing \\ "]' AS TEXT[]);

SELECT CAST('["[complex\\ combination, of\\" special]", "\\\\all cases covered\\\\"]' AS TEXT[]);

SELECT CAST('["hello, world"]' AS TEXT[]);

SELECT CAST('["missing quote]]' AS TEXT[]);
/* Mismatched quotes */;

SELECT CAST('["backslash at end\\"]' AS TEXT[]);
/* Improper escaping */;

SELECT CAST('[unescaped[bracket]' AS TEXT[]);
/* Unescaped bracket */;

SELECT CAST('[unterminated string]"]' AS TEXT[]);

SELECT CAST('[]' AS TEXT[]);
/* Empty list */;

SELECT CAST('[""]' AS TEXT[]);
/* List with empty string */;

SELECT CAST('[" "]' AS TEXT[]);
/* List with whitespace string */;

SELECT CAST('["\\\\"]' AS TEXT[]);
/* List with only a backslash */;

SELECT CAST('["\\""]' AS TEXT[]);
/* List with only a quote */;

SELECT CAST('[\\,]' AS TEXT[]);
/* List with only a comma (not quoted) */;

SELECT CAST('["\\,"]' AS TEXT[]);
/* List with only a comma */;

SELECT CAST('[","]' AS TEXT[]);
/* List with only a comma */;

SELECT CAST('[NULL, ''null'', ''nUlL'', NuLl, "NULLz", "NULL"]' AS TEXT[]) AS a, CAST(CAST(a AS TEXT) AS TEXT[]) AS b, a = b;

SELECT CAST('[\\"abc\\", def, ghi]' AS TEXT[]) AS a, CAST(CAST(a AS TEXT) AS TEXT[]) AS b, a = b;

COPY (SELECT CAST('[\\"abc\\", def, ghi]' AS TEXT[]) AS a) TO '__TEST_DIR__/copy_test.csv' WITH (FORMAT CSV);

SELECT a, CAST(a AS TEXT[]) FROM READ_CSV('__TEST_DIR__/copy_test.csv') AS t(a);

SELECT CAST('["  \\"abc\\"  ", def, ghi]' AS TEXT[]) AS a, CAST(CAST(a AS TEXT) AS TEXT[]) AS b, a = b;

SELECT CAST('[\\  \\\\abc\\\\ \\ , def, ghi]' AS TEXT[]) AS a, CAST(CAST(a AS TEXT) AS TEXT[]) AS b, a = b;

SELECT CAST('["\\  \\\\abc\\\\ \\ ", def, ghi]' AS TEXT[]) AS a, CAST(CAST(a AS TEXT) AS TEXT[]) AS b, a = b;

SELECT CAST('[{}]' AS TEXT[]) AS a, CAST(CAST(a AS TEXT) AS TEXT[]) AS b, a = b;

PRAGMA enable_verification;

SELECT CAST('{a=1, b=2, c=3}' AS MAP(TEXT, INT));

SELECT CAST('{key_A=Duck, key_B="hello world"}' AS MAP(TEXT, TEXT));

SELECT CAST('{1=Duck, 2=hello world, 3=!}' AS MAP(INT, TEXT));

SELECT CAST('{greetings=[Hello World!, Hello DuckDB, Howdy], farewells=[Bye World, Bye DuckDB]}' AS MAP(TEXT, TEXT[]));

SELECT CAST('{"key=A"=Duck, "key=B"="hello=world"}' AS MAP(TEXT, TEXT));

SELECT CAST('{a=1, b=2, a=3}' AS MAP(TEXT, INT));

SELECT CAST('{{1=100, 2=200}=value}' AS MAP(MAP(INT, INT), TEXT));

SELECT CAST('{{1=100, 2=200}={3=c, 5=e, 7=g}}' AS MAP(MAP(INT, INT), MAP(INT, TEXT)));

CREATE TABLE stringMap (col1 TEXT);

INSERT INTO stringMap VALUES ('{1=Duck, 2=DB}'), ('{999=🦆}'), ('{7=Hello, 8=World, 2=!}');

SELECT CAST(col1 AS MAP(INT, TEXT)) FROM stringMap;

SELECT CAST('{''hello''=2, ''world''=50, ''!''=12}' AS MAP(TEXT, INT));

SELECT CAST('{\\''hello\\''=hello, \\''world\\''=world, \\''!\\''=!}' AS MAP(TEXT, TEXT));

SELECT CAST('{[[\\''🦆, 🦆, 🦆\\'']]=100, [[duck, db, \\''🦆\\'']]=101}' AS MAP(TEXT[][], INT));

SELECT CAST('{"can''t"="you''re", "i''m"="q''u''o''t''e"}' AS MAP(TEXT, TEXT));

SELECT CAST('{"{"="}", "["="]"}' AS MAP(TEXT, TEXT)) AS a, CAST(CAST(a AS TEXT) AS MAP(TEXT, TEXT)) AS b, a = b;

SELECT CAST('{''}''="{", '']''="["}' AS MAP(TEXT, TEXT)) AS a, CAST(CAST(a AS TEXT) AS MAP(TEXT, TEXT)) AS b, a = b;

SELECT CAST(' {greetings    =[    Hello World  !, Hello     DuckDB  , Howdy ]  ,      farewells=  [Bye World, Bye DuckDB  ] }    ' AS MAP(TEXT, TEXT[]));

SELECT CAST('{ [12,     13,14]=val, [       8, 9         ]      =val, [ 4    ]=val   }' AS MAP(INT[], TEXT));

SELECT CAST('   { { a:[2,    3], b:  Duckster      }=         {50.0        =50}, {a    : [9,1,4], b:Duck          }
={  1      =    0}  }' AS MAP(STRUCT(a INT[], b TEXT), MAP(INT, DOUBLE)));

CREATE TABLE null_tbl (col1 TEXT);

INSERT INTO null_tbl VALUES (NULL), ('{key=NULL}'), ('{zero=0, key=NULL}');

SELECT CAST(col1 AS MAP(TEXT, TEXT)) FROM null_tbl;

SELECT CAST(NULL AS MAP(INT, TEXT));

SELECT CAST('{12=34, 56=NULL, 910=1112, 1314=NULL}' AS MAP(INT, INT));

SELECT CAST('{NULL=5}' AS MAP(INT, INT));

SELECT CAST('{}' AS MAP(INT, INT));

SELECT TRY_CAST('Hello World' AS MAP(TEXT, TEXT));

CREATE TABLE try_cast_tbl (col1 TEXT);

INSERT INTO try_cast_tbl VALUES ('{1=2, XXX=2}'), ('{NULL=DuckDB}'), ('{3=oops, 5=5 44=4.0}'), ('{12345678901=0}'), ('{5=6!, 7=7000}'), ('{3 0, 1=1}');

SELECT TRY_CAST(col1 AS MAP(INT, INT)) FROM try_cast_tbl;

SELECT CAST('{3==3}' AS MAP(INT, INT));

SELECT CAST('{[5]=5}' AS MAP(INT, INT));

SELECT CAST('{3=three}}' AS MAP(INT, TEXT));

SELECT CAST('{Ducky=, DB=ok}' AS MAP(TEXT, INT));

SELECT CAST('{5=5,, 3=3}' AS MAP(INT, INT));

SELECT CAST('{3=3, 4=4' AS MAP(INT, INT));

SELECT CAST('{3=3, 4=4} bla' AS MAP(INT, INT));

SELECT CAST('{                                                                      ' AS MAP(INT, INT));

CREATE TABLE Duck_tbl (col1 TEXT);

INSERT INTO Duck_tbl VALUES ('{1=Duck, 3=DB}'), ('{12=DuckDB}'), ('{3=DB, 5=🦆 4=Ducky, 7=Duckster}'), ('{0=DuckParty}'), ('{5=DBDuck, 7=Duckster, 1=🦆}'), ('{1="final Quack"}');

SELECT * FROM Duck_tbl WHERE CAST(col1 AS MAP(INT, TEXT))[7] = 'Duckster';

SELECT CAST(col1 AS MAP(INT, TEXT)) FROM Duck_tbl WHERE CARDINALITY(CAST(col1 AS MAP(INT, TEXT))) < 3;

SELECT CAST('{A={a:[12,13,14], b:"🦆", c:0.12}, B={a:[12,13,14], b:DuckDuck, c:9.03}}' AS MAP(TEXT, STRUCT(a INT[], b TEXT, c REAL)));

SELECT CAST('{{a:Meow=Meow}={a:12, b:0.8, c:MeowMeow}, {a:Quack}={a:13, b:3.2, c:QuackQuack}}' AS MAP(STRUCT(a TEXT), STRUCT(a INT, b DOUBLE, c TEXT)));

SELECT CAST('{{A:AAA}={a:[12,13,14], b:"🦆", c:{a:[[a], [b, c]], b:[123]}}}' AS MAP(STRUCT(A TEXT), STRUCT(a INT[], b TEXT, c STRUCT(a TEXT[][], b INT[]))));

SELECT CAST('{[[a, b], [c, d], [e]]= {a:2000}, [[aaa]]={a:100}, [[z],[y], [x]]={}}' AS MAP(TEXT[][], STRUCT(a INT)));

SELECT CAST('{a=True, b=False, z=true, X=FALSE}' AS MAP(TEXT, BOOLEAN));

SELECT CAST('{True=[true, FALSE, true], False=[false, false, false]}' AS MAP(BOOLEAN, BOOLEAN[]));

SELECT CAST('{True=[true, FALSE, true], False=[false, false, false]}' AS MAP(BOOLEAN, BOOLEAN[]));

SELECT CAST('{True=[true, FALSE, true], False=[false, false, false]}' AS MAP(BOOLEAN, BOOLEAN[]));

CREATE TYPE mood AS ENUM('ok', 'sad', 'happy');

SELECT CAST('{🦆=ok, duck=happy}' AS MAP(TEXT, MOOD));

SELECT CAST('{ok=happy, sad=ok}' AS MAP(MOOD, MOOD));

SELECT CAST('{sadDucky: nothappy}' AS MAP(TEXT, MOOD));

CREATE TABLE intMap AS SELECT CAST(CAST(MAP([i], [i + 1]) AS TEXT) AS MAP(INT, INT)) AS col FROM RANGE(0, 10000) AS tbl(i);

SELECT MAX(CAST(col AS MAP(INT, INT))) FROM intMap;

CREATE TABLE assembled_maps (col1 MAP(INT, TEXT));

COPY (SELECT '{8="hello, DuckDB"}') TO '__TEST_DIR__/assembled_maps.csv';

COPY assembled_maps FROM '__TEST_DIR__/assembled_maps.csv';

SELECT * FROM assembled_maps;

SELECT CAST('{"key\\ with\\ space" = "value\\ with\\ space"}' AS MAP(TEXT, TEXT));

SELECT CAST('{\\"key\\" = \\"value\\"}' AS MAP(TEXT, TEXT));

SELECT CAST('{"key\\ with\\ backslash" = "value\\ with\\ backslash"}' AS MAP(TEXT, TEXT));

SELECT CAST('{"key\\ with\\, comma" = "value\\ with\\, comma"}' AS MAP(TEXT, TEXT));

SELECT CAST('{"key\\ with\\ colon\\:" = "value\\ with\\ colon\\:"}' AS MAP(TEXT, TEXT));

SELECT CAST('{key with space = value with space}' AS MAP(TEXT, TEXT));

SELECT CAST('{key"with"quote = value}' AS MAP(TEXT, TEXT));

SELECT CAST('{key = value"with"quote}' AS MAP(TEXT, TEXT));

SELECT CAST('{key,with,comma = value}' AS MAP(TEXT, TEXT));

SELECT CAST('{key = value,with,comma}' AS MAP(TEXT, TEXT));

SELECT CAST('{key{with}bracket = value}' AS MAP(TEXT, TEXT));

SELECT CAST('{key = value{with}bracket}' AS MAP(TEXT, TEXT));

SELECT CAST('{"key\\with\\backslash" = value}' AS MAP(TEXT, TEXT));

SELECT CAST('{key = "value\\with\\backslash"}' AS MAP(TEXT, TEXT));

SELECT CAST('{key=with=equals = value}' AS MAP(TEXT, TEXT)) AS a, a['key'];

SELECT CAST('{"key\\=with" = equals = value}' AS MAP(TEXT, TEXT)) AS a, a['key=with'];

SELECT CAST('{"key\\=with\\=equals" = value}' AS MAP(TEXT, TEXT)) AS a, a['key=with=equals'];

SELECT CAST('{}' AS MAP(TEXT, TEXT));

SELECT CAST('{=}' AS MAP(TEXT, TEXT));

SELECT CAST('{\\{escaped\\brace\\} = \\}escaped\\brace\\\\}' AS MAP(TEXT, TEXT));

SELECT CAST('{"\\{escaped\\brace\\}" = "\\}escaped\\brace\\\\"}' AS MAP(TEXT, TEXT));

SELECT CAST('{key=}' AS MAP(TEXT, TEXT));

SELECT CAST('{=value}' AS MAP(TEXT, TEXT));

SELECT CAST('{''NULL''=true}' AS MAP(TEXT, TEXT)) AS a, CAST(CAST(a AS TEXT) AS MAP(TEXT, TEXT)) AS b, a = b;

SELECT CAST('{''a''=''NULL''}' AS MAP(TEXT, TEXT)) AS a, CAST(CAST(a AS TEXT) AS MAP(TEXT, TEXT)) AS b, a = b;

PRAGMA enable_verification;

SELECT CAST('[[True,False], [true], [FALSE], [false, true]]' AS BOOLEAN[][]);

SELECT CAST('[[True,False], [true], [FALSE], [false, true]]' AS BOOLEAN[][]);

SELECT CAST('[[True,False], [true], [FALSE], [false, true]]' AS BOOLEAN[][]);

CREATE TYPE mood AS ENUM('ok', 'sad', 'happy');

SELECT CAST('[ok,happy]' AS MOOD[]);

SELECT CAST('[nothappy]' AS MOOD[]);

SELECT CAST(CAST(LIST(date) AS TEXT) AS DATE[]) AS a, CAST(CAST(a AS TEXT) AS DATE[]) AS b, a = b FROM TEST_ALL_TYPES();

SELECT CAST(CAST(LIST(time) AS TEXT) AS TIME[]) FROM TEST_ALL_TYPES();

SELECT CAST(CAST(LIST(timestamp) AS TEXT) AS TIME[]) FROM TEST_ALL_TYPES();

SELECT CAST(CAST(LIST(timestamp_s) AS TEXT) AS TIME[]) FROM TEST_ALL_TYPES();

SELECT CAST(CAST(LIST(timestamp_ms) AS TEXT) AS TIME[]) FROM TEST_ALL_TYPES();

SELECT CAST(CAST(LIST(timestamp_ns) AS TEXT) AS TIME[]) FROM TEST_ALL_TYPES();

SELECT CAST(CAST(LIST(blob) AS TEXT) AS BLOB[]) FROM TEST_ALL_TYPES();

SELECT CAST(CAST(LIST(interval) AS TEXT) AS INTERVAL[]) FROM TEST_ALL_TYPES();

CREATE TABLE big_list (col INT[]);

COPY (SELECT CAST([i, NULL] AS TEXT) FROM RANGE(0, 2000) AS tbl(i)) TO '__TEST_DIR__/big_list.csv' WITH (HEADER 0);

COPY big_list FROM '__TEST_DIR__/big_list.csv';

SELECT COUNT(col) FROM big_list;

SELECT CAST('{a: True, b: False, c:[true]}' AS STRUCT(a BOOLEAN, b BOOLEAN, c BOOLEAN[], d STRUCT(a BOOLEAN, b BOOLEAN)));

SELECT CAST('{a: True, b: False, c:[true]}' AS STRUCT(a BOOLEAN, b BOOLEAN, c BOOLEAN[], d STRUCT(a BOOLEAN, b BOOLEAN)));

SELECT CAST('{a: True, b: False, c:[true]}' AS STRUCT(a BOOLEAN, b BOOLEAN, c BOOLEAN[], d STRUCT(a BOOLEAN, b BOOLEAN)));

SELECT CAST('{a: ok, b: happy}' AS STRUCT(a MOOD, b MOOD));

SELECT CAST('{a: nothappy}' AS STRUCT(a MOOD));

SELECT CAST(CAST({'_0': A => date} AS TEXT) AS STRUCT(A DATE)) FROM TEST_ALL_TYPES();

SELECT CAST(CAST({'_0': A => time} AS TEXT) AS STRUCT(A TIME)) FROM TEST_ALL_TYPES();

SELECT CAST(CAST({'_0': A => timestamp} AS TEXT) AS STRUCT(A TIME)) FROM TEST_ALL_TYPES();

SELECT CAST(CAST({'_0': A => timestamp_s} AS TEXT) AS STRUCT(A TIME)) FROM TEST_ALL_TYPES();

SELECT CAST(CAST({'_0': A => timestamp_ms} AS TEXT) AS STRUCT(A TIME)) FROM TEST_ALL_TYPES();

SELECT CAST(CAST({'_0': A => timestamp_ms} AS TEXT) AS STRUCT(A TIME)) FROM TEST_ALL_TYPES();

SELECT CAST(CAST({'_0': A => timestamp_ns} AS TEXT) AS STRUCT(A TIME)) FROM TEST_ALL_TYPES();

SELECT CAST(CAST({'_0': A => blob} AS TEXT) AS STRUCT(A BLOB)) FROM TEST_ALL_TYPES();

SELECT CAST(CAST({'_0': A => interval} AS TEXT) AS STRUCT(A INTERVAL)) FROM TEST_ALL_TYPES();

PRAGMA enable_verification;

SELECT CAST('{key_A:0}' AS STRUCT(key_A INT));

SELECT CAST('{key_A: 2, key_B: 46, key_C: -3000}' AS STRUCT(key_A INT, key_B INT, key_C INT));

SELECT CAST('{key_A: 2, key_B: 3, key_C: 8}' AS STRUCT(key_A INT, key_B DOUBLE, key_C REAL));

SELECT CAST('{"key_A": 2, "key_B": hello world}' AS STRUCT(key_A INT, key_B TEXT));

SELECT CAST((CAST({'_0': key_A => CAST('42' AS DOUBLE), '_1': key_B => CAST('DuckDB' AS TEXT)} AS TEXT)) AS STRUCT(key_A INT, key_B TEXT));

SELECT CAST('{🦆: Quack, 🦤: ....}' AS STRUCT(🦆 TEXT, 🦤 TEXT));

SELECT CAST('{a:{c:1}, b:900}' AS STRUCT(a STRUCT(c INT), b INT));

SELECT CAST('{a:{b:DuckDB, c:12}, b:900, c:{a:"DuckParty"}}' AS STRUCT(a STRUCT(b TEXT, c INT), b INT, c STRUCT(a TEXT)));

SELECT CAST('{a:{b:DuckDB, c:{a:{a:0.9, b:{a:"DuckieDuck"}, c:{a:9000}, d:{a:5881580-07-10}}, b:"🦆"}}, b:900, c:{a:"DuckParty"}}' AS STRUCT(a STRUCT(b TEXT, c STRUCT(a STRUCT(a REAL, b STRUCT(a TEXT), c STRUCT(a INT), d STRUCT(a DATE)), b TEXT)), b INT, c STRUCT(a TEXT)));

SELECT CAST('{a:{b:{c:{d:{e:{f:"Hello World"}}}}}}' AS STRUCT(a STRUCT(b STRUCT(c STRUCT(d STRUCT(e STRUCT(f TEXT)))))));

CREATE TABLE tbl1 (col TEXT);

INSERT INTO tbl1 (VALUES('{a:1, b:3}'));

SELECT CAST(col AS STRUCT(a INT, b INT)) FROM tbl1;

CREATE TABLE tbl2 (col TEXT);

INSERT INTO tbl2 (VALUES('{a:1, b:"hello, world"}'));

SELECT CAST(col AS STRUCT(a INT, b TEXT)) AS a, CAST(CAST(a AS TEXT) AS STRUCT(a INT, b TEXT)) AS b, a = b FROM tbl2;

CREATE TABLE tbl3 (col TEXT);

INSERT INTO tbl3 (VALUES('{a:DUCK, b:9.999, c:12}'), ('{a:"DB", b:1.111, c:21}'));

SELECT CAST(col AS STRUCT(a TEXT, b REAL, c INT)) FROM tbl3;

CREATE TABLE tbl4 (col TEXT);

INSERT INTO tbl4 (VALUES('{a:{b:1}}'));

SELECT CAST(col AS STRUCT(a STRUCT(b INT))) FROM tbl4;

SELECT CAST('{key_A: [2, 3, 4], key_B: [Hello, World]}' AS STRUCT(key_A INT[], key_B TEXT[]));

SELECT CAST('{key_A: [[2, 3], [4]], key_B: [Hello, World]}' AS STRUCT(key_A INT[][], key_B TEXT[]));

SELECT CAST('{key_A: [[{a: 5, b: 900}, {a:3, b:34}], [{a:2, b: 0}]], key_B: [Hello, World]}' AS STRUCT(key_A STRUCT(a INT, b INT)[][], key_B TEXT[]));

SELECT CAST('{key_B: 2, key_A: 46}' AS STRUCT(key_A INT, key_B INT));

SELECT CAST('{c:{a:"DuckParty"}, b:900, a:{b:DuckDB, c:{a:{a:0.9, b:{a:"DuckieDuck"}, c:{a:9000}, d:{a:5881580-07-10}}, b:"🦆"}}}' AS STRUCT(a STRUCT(b TEXT, c STRUCT(a STRUCT(a REAL, b STRUCT(a TEXT), c STRUCT(a INT), d STRUCT(a DATE)), b TEXT)), b INT, c STRUCT(a TEXT)));

SELECT CAST('{key_D: "World Hello", key_B: [Hello, World], key_C : 5000, key_A: [[{a: 5, b: 900}, {a:3, b:34}], [{a:2, b: 0}]]}' AS STRUCT(key_A STRUCT(a INT, b INT)[][], key_B TEXT[], key_C INT, key_D TEXT));

SELECT (CAST('{a: "can''t", b: "you''re", c: "i''m"}' AS STRUCT(a TEXT, b TEXT, c TEXT)));

SELECT (CAST('{a:"}", b: hello universe}' AS STRUCT(a TEXT, b TEXT)));

SELECT (CAST('{a:''}'', b: "hello world"}' AS STRUCT(a TEXT, b TEXT)));

SELECT CAST('{  key_A:     2, key_B: hello world    }' AS STRUCT(key_A INT, key_B TEXT));

SELECT CAST('    {a:        {b:         DuckDB,    c:12  }, b:  900, c          :{a
:   "DuckParty  "}       }    ' AS STRUCT(a STRUCT(b TEXT, c INT), b INT, c STRUCT(a TEXT)));

SELECT CAST('{key_A     : [      [{      a: 5    , b  : 900          }, { a: 3, b:    34}],      [   {a:
2, b: 0    }    ] ],     key_B: [Hello       , World]   }' AS STRUCT(key_A STRUCT(a INT, b INT)[][], key_B TEXT[]));

SELECT CAST('{a  :  {c   : 9000}, b    : NULL
, c:{ d: "Ducky", e:        NULL     }       }     ' AS STRUCT(a STRUCT(c INT), b TEXT, c STRUCT(d TEXT, e DOUBLE)));

SELECT CAST(' {      }   ' AS STRUCT(a INT, b DATE));

SELECT CAST('{  key_A:     2, key_B: {key_C: hello world    }     X   }' AS STRUCT(key_A INT, key_B STRUCT(key_C TEXT)));

SELECT CAST(NULL AS STRUCT(a INT));

SELECT CAST('{a: NULL}' AS STRUCT(a TEXT));

SELECT CAST('{a:12, b:NULL}' AS STRUCT(a INT, b INT));

SELECT CAST('{a:{c: NULL}, b: NULL, c:{d: "Ducky", e: NULL}}' AS STRUCT(a STRUCT(c INT), b TEXT, c STRUCT(d TEXT, e DOUBLE)));

SELECT CAST('{key_A: 2, key_C: 8}' AS STRUCT(key_A INT, key_B INT, key_C REAL));

SELECT CAST('{key_C: 8, key_A: 2}' AS STRUCT(key_A INT, key_B DOUBLE, key_C REAL));

SELECT CAST('{key_C: Quack}' AS STRUCT(key_A INT, key_B TEXT, key_C TEXT));

SELECT CAST(CAST({'key_C': 2, 'key_A': 4} AS TEXT) AS STRUCT(key_A INT, key_B TEXT, key_C TEXT));

SELECT CAST('{key_A:0}' AS STRUCT(key_A INT, key_B TEXT));

SELECT CAST('{key_C: {key_B: 3, key_E: 🦆}, key_A: 2}' AS STRUCT(key_A INT, key_C STRUCT(key_B INT, key_D INT, key_E TEXT)));

SELECT CAST('{a:{b:{b:300}, c:12}, c:{a:"DuckParty"}}' AS STRUCT(a STRUCT(b STRUCT(a INT, b TEXT), c INT), b INT, c STRUCT(a TEXT, b STRUCT(a INT))));

SELECT CAST('{}' AS STRUCT(a INT, b TEXT));

SELECT TRY_CAST('{key_B: "hello", key_Z: 2, key_A: 46}' AS STRUCT(key_A INT, key_B TEXT));

SELECT TRY_CAST('{key_B: "hello", key_Z: 2, key_A: 46}' AS STRUCT(key_A INT, key_B TEXT, key_C INT));

SELECT TRY_CAST('{key_B: "hello", key_A: 46}' AS STRUCT(key_A INT, key_B INT));

SELECT TRY_CAST('{a:4, b:''Ducky'', c:''🦆''}' AS STRUCT(a INT, b DOUBLE, c TEXT));

CREATE TABLE try_cast_tbl (col TEXT);

INSERT INTO try_cast_tbl (VALUES('{a:{d:1}, b:100, c:"🦆"}'), ('{a:{X:1}, b:100, c:"🦆"}'), ('{a:{d:1}, b:100, X:"🦆"}'), ('{a:"oh oh", b:100, c:"🦆"}'), ('{a:{d:"oops"}, b:100, c:"🦆"}'), ('{a:{d:"oops"}, b:100, Z: "undercover", c:"🦆"}'));

SELECT TRY_CAST(col AS STRUCT(a STRUCT(d INT), b DOUBLE, c TEXT)) FROM try_cast_tbl;

SELECT CAST('[{a:3}]' AS STRUCT(a INT));

SELECT CAST('Hello World' AS STRUCT(a TEXT));

SELECT CAST('{a: 3}}' AS STRUCT(a INT));

SELECT CAST('{a: 3, b:{c: 8}}}' AS STRUCT(a INT, b STRUCT(c INT)));

SELECT CAST('{{a: 3}' AS STRUCT(a INT));

SELECT CAST('{a:3}, {b:1}' AS STRUCT(a INT, b INT));

SELECT CAST('{a:{a:3}, b:{{b:1}}}' AS STRUCT(a STRUCT(a INT), b STRUCT(b INT)));

SELECT CAST('{a: 3 1}' AS STRUCT(a INT));

SELECT CAST('{a:3,, b:1}' AS STRUCT(a INT, b INT));

SELECT CAST('}{a:5}' AS STRUCT(a INT));

SELECT CAST('{a:{b:{d: 800}, {c: "Duck"}}}' AS STRUCT(a STRUCT(b STRUCT(d INT), c STRUCT(c TEXT))));

SELECT CAST('{[{]}}' AS STRUCT(a TEXT[]));

CREATE TABLE tbl (col TEXT);

INSERT INTO tbl (VALUES('{a:DUCK, b:12}'), ('{a:"DB", b:21}'), ('{a:"Quack", b:2}'));

SELECT CAST(col AS STRUCT(a TEXT, b INT)).a FROM tbl WHERE CAST(col AS STRUCT(a TEXT, b INT)).b = 12;

CREATE TABLE assorted_structs (col1 STRUCT(a INT, b TEXT));

COPY (SELECT '{a: 8, b: "hello, DuckDB"}') TO '__TEST_DIR__/assorted_structs.csv';

COPY assorted_structs FROM '__TEST_DIR__/assorted_structs.csv';

SELECT * FROM assorted_structs;

CREATE TABLE json_tbl (col1 TEXT);

INSERT INTO json_tbl (VALUES('{
"id": "0001",
"type": "donut",
"name": "Cake",
"ppu": 0.55,
"batters":
{
"batter":
[
{ "id": "1001", "type": "Regular" },
{ "id": "1002", "type": "Chocolate" },
{ "id": "1003", "type": "Blueberry" },
{ "id": "1004", "type": "Devil''s Food" }
]
},
"topping":
[
{ "id": "5001", "type": "None" },
{ "id": "5002", "type": "Glazed" },
{ "id": "5005", "type": "Sugar" },
{ "id": "5007", "type": "Powdered Sugar" },
{ "id": "5006", "type": "Chocolate with Sprinkles" },
{ "id": "5003", "type": "Chocolate" },
{ "id": "5004", "type": "Maple" }
]
}'));

SELECT CAST(col1 AS STRUCT(id TEXT, type TEXT, name TEXT, ppu REAL, batters STRUCT(batter STRUCT(id TEXT, type TEXT)[]), topping STRUCT(id TEXT, type TEXT)[])) FROM json_tbl;

CREATE TABLE json_tbl2 (col1 JSON);

INSERT INTO json_tbl2 (VALUES('{"A": "Ducky", "B": [3, 50, 8, 43], "C":{"A": "TEST", "B": 0.9, "C": [0.0, 9, 30.2]} }'), ('{"A": "TESTY", "B": [4], "C":{"A": "🦆", "B": 6.12, "C": [0.099, 1.6]} }'), ('{"A": "Hello World", "B": [0, 0, 2, 500, 0, 8], "C":{"A": "DuckieDuck !", "B": 3000, "C": [0]} }'), ('{"A": "", "B": [], "C":{"A": "", "B": 0, "C": []} }'));

SELECT CAST(CAST(col1 AS TEXT) AS STRUCT(A TEXT, B INT[], C STRUCT(A TEXT, B REAL, C DOUBLE[]))) FROM json_tbl2;

SELECT CAST('{name: value, age: 30}' AS STRUCT(name TEXT, age INT));

SELECT CAST('{name: John, city: "New York"}' AS STRUCT(name TEXT, city TEXT));

SELECT CAST('{quote_at_start: "\\"test\\"", age: 30}' AS STRUCT(quote_at_start TEXT, age INT));

SELECT CAST('{user_name: Alice, status: active}' AS STRUCT(user_name TEXT, status TEXT));

SELECT CAST('{special_characters: "comma, backslash\\\\", age: 30}' AS STRUCT(special_characters TEXT, age INT));

SELECT CAST('{a: 10, b: "hello world"}' AS STRUCT(a INT, b TEXT));

SELECT CAST('{first_name: "John", last_name: "Doe", age: 28}' AS STRUCT(first_name TEXT, last_name TEXT, age INT));

SELECT CAST('{first name: John, age: 30}' AS STRUCT("first name" TEXT, age INT));

SELECT CAST('{name: "John "Doe"}' AS STRUCT(name TEXT));

SELECT CAST('{name: John, age, 30}' AS STRUCT(name TEXT, age INT));

SELECT CAST('{user,name: Alice, age: 30}' AS STRUCT("user,name" TEXT, age INT));

SELECT CAST('{name: Alice, age: 30})' AS STRUCT(name TEXT, age INT));

SELECT CAST('{"backslash\\name": value}' AS STRUCT("backslash\name" TEXT));

SELECT CAST('{backslash\\name: value}' AS STRUCT("backslash\name" TEXT)) AS a, CAST(CAST(a AS TEXT) AS STRUCT("backslash\name" TEXT)) AS b, a = b;

SELECT CAST('{name: test, value: 30}' AS STRUCT("name:" TEXT, value INT));

SELECT CAST('{name\\:: test, value: 30}' AS STRUCT("name:" TEXT, value INT));

SELECT CAST('{"name\\:": test, value: 30}' AS STRUCT("name:" TEXT, value INT));

SELECT CAST('{{name}: John, age: 3}' AS STRUCT("{name}" TEXT, age INT));

SELECT CAST('{{\\"name\\"}: John, age: 3}' AS STRUCT("{""name""}" TEXT, age INT));

SELECT CAST('{{\\''name\\''}: John, age: 3}' AS STRUCT("{'name'}" TEXT, age INT));

SELECT CAST('{name: "John, age: 30}' AS STRUCT(name TEXT, age INT));

SELECT CAST('{}' AS STRUCT(name TEXT, age INT));

SELECT CAST('{name : John, age : 30}' AS STRUCT(name TEXT, age INT));

SELECT CAST('{path: "C:\\\\Users\\\\John"}' AS STRUCT(path TEXT));

SELECT CAST('{description: "Special characters: \\\\, \\", \\'', (, )"}' AS STRUCT(description TEXT));

SELECT CAST('{first\\ name: "John", age: 30}' AS STRUCT("first name" TEXT, age INT));

SELECT CAST('{"first\\ name": "John", age: 30}' AS STRUCT("first name" TEXT, age INT));

SELECT CAST('{\\"quote at start\\": "value", age: 30}' AS STRUCT("""quote at start""" TEXT, age INT));

SELECT CAST('{backslash\\\\name: "John Doe", age: 30}' AS STRUCT("backslash\name" TEXT, age INT));

SELECT CAST('{"backslash\\\\name": "John Doe", age: 30}' AS STRUCT("backslash\name" TEXT, age INT));

SELECT CAST('{user\\,name: "Alice", age: 25}' AS STRUCT("user,name" TEXT, age INT));

SELECT CAST('{"user\\,name": "Alice", age: 25}' AS STRUCT("user,name" TEXT, age INT));

SELECT CAST('{"user,name": "Alice", age: 25}' AS STRUCT("user,name" TEXT, age INT));

SELECT CAST('{user\\(name\\): "Alice", status: "active"}' AS STRUCT("user(name)" TEXT, status TEXT));

SELECT CAST('{"user\\(name\\)": "Alice", status: "active"}' AS STRUCT("user(name)" TEXT, status TEXT));

SELECT CAST('{user(name): "Alice", status: "active"}' AS STRUCT("user(name)" TEXT, status TEXT));

SELECT CAST('{"user\\ name\\ ": "Alice", "age ": 25}' AS STRUCT("user name " TEXT, "age " INT));

SELECT CAST('{user\\ name\\ : "Alice", age\\ : 25}' AS STRUCT("user name " TEXT, "age " INT));

SELECT CAST('{"quote"start": "value", age: 30}' AS STRUCT("quote""start" TEXT, age INT));

SELECT CAST('{backslash\\name: "John", age: 30}' AS STRUCT("backslash\name" TEXT, age INT));

SELECT CAST('{user(name: "Alice", age: 25}' AS STRUCT("user(name" TEXT, age INT));

SELECT CAST('{\\": "value", age: 30}' AS STRUCT("""" TEXT, age INT));

SELECT CAST('{\\\\: "escaped", age: 30}' AS STRUCT("\" TEXT, age INT));

SELECT CAST('{"\\\\": "escaped", age: 30}' AS STRUCT("\" TEXT, age INT));

SELECT CAST('{@: "value", age: 30}' AS STRUCT("@" TEXT, age INT));

SELECT CAST('[{''a'': test}, {''a'': NULL}, {''a'': ''null''}, {''a'': ''nUlL''}, {''a'': NULL}, {''a'': NULLz}, {''a'': ''NULL''}]' AS STRUCT(a TEXT)[]) AS a, CAST(CAST(a AS TEXT) AS STRUCT(a TEXT)[]) AS b, a = b;

SELECT CAST('{
a:{
b:{
b:300
},
c:12
},
c:{
a:"\\{DuckParty\\}"
}
}' AS STRUCT(a STRUCT(b STRUCT(a INT, b TEXT), c INT), b INT, c STRUCT(a TEXT, b STRUCT(a INT))));

SELECT CAST('{"  test  ": 42}' AS STRUCT("  test  " INT)) AS a, CAST(CAST(a AS TEXT) AS STRUCT("  test  " INT)) AS b, a = b;

SELECT CAST('{"  \\"test\\"  ": 42}' AS STRUCT("  ""test""  " INT)) AS a, CAST(CAST(a AS TEXT) AS STRUCT("  ""test""  " INT)) AS b, a = b;

SELECT CAST('{"  \\''test\\''  ": 42}' AS STRUCT("  'test'  " INT)) AS a, CAST(CAST(a AS TEXT) AS STRUCT("  'test'  " INT)) AS b, a = b;

SELECT CAST('{"\\\\  test  \\\\": 42}' AS STRUCT("\  test  \" INT)) AS a, CAST(CAST(a AS TEXT) AS STRUCT("\  test  \" INT)) AS b, a = b;

SELECT CAST('{"test": \\\\  test  \\\\}' AS STRUCT("test" TEXT)) AS a, CAST(CAST(a AS TEXT) AS STRUCT("test" TEXT)) AS b, a = b;

SELECT [ROW('a'), '(abc)'];

SELECT [ROW('a', 'b', 'c'), '(abc, def, ghi)'];

SELECT [ROW('a'), '()'];

SELECT [ROW('a'), '('''')'];

SELECT [ROW({'amount': 21}), '({''amount'': 42})'];

SELECT [ROW(ROW(21)), '((42))'];

SELECT [ROW(ROW(21), {'amount': 42}), '((42), {amount: 21})'];

SELECT [ROW([7, 8, 9], [10, 11, 12]), '([1,2,3], [4,5,6])'];

SELECT [ROW([4, 5, 6]), '([1,2,3],)'];

SELECT [ROW([4, 5, 6], 'abc'), '([1,2,3],)'];

SELECT [{'a': [4, 5, 6], 'b': 'abc'}, '{''a'': [1,2,3],''b'':}'];

SELECT [[ROW(ROW('  test  ')), {'a': {'inner': '\  test  \'}}], '[(("  test  ")), {''a'': (\\\\  test  \\\\)}]'];

SELECT [ROW('test'), '(NULL)', '(''null'')', '(''nUlL'')', '(NuLl)', '("NULLz")', '("NULL")'] AS a, CAST(CAST(a AS TEXT) AS STRUCT(a TEXT)[]) AS b, a = b;

PRAGMA enable_verification;

CREATE TABLE bits (b BIT);

INSERT INTO bits VALUES ('00001111');

SELECT CAST(BITSTRING('1', 9) AS BOOLEAN);

SELECT CAST(b AS BOOLEAN) FROM bits;

SELECT CAST(CAST('1' AS BIT) AS BOOLEAN);

SELECT CAST(CAST('0' AS BIT) AS BOOLEAN);

SELECT CAST(b AS TINYINT) FROM bits;

SELECT CAST(b AS SMALLINT) FROM bits;

SELECT CAST(b AS INT) FROM bits;

SELECT CAST(b AS BIGINT) FROM bits;

SELECT CAST(b AS UTINYINT) FROM bits;

SELECT CAST(b AS USMALLINT) FROM bits;

SELECT CAST(b AS UINTEGER) FROM bits;

SELECT CAST(b AS UBIGINT) FROM bits;

SELECT CAST(b AS INT128) FROM bits;

SELECT CAST(b AS UINT128) FROM bits;

SELECT CAST(b AS REAL) FROM bits;

SELECT CAST(b AS DOUBLE) FROM bits;

SELECT CAST(CAST('100001111000011110000111100001111' AS BIT) AS BIGINT);

SELECT CAST(CAST(15 AS BOOLEAN) AS BIT);

SELECT CAST(CAST(15 AS TINYINT) AS BIT);

SELECT CAST(CAST(15 AS SMALLINT) AS BIT);

SELECT CAST(15 AS BIT);

SELECT CAST(CAST(15 AS BIGINT) AS BIT);

SELECT CAST(CAST(15 AS INT128) AS BIT);

SELECT CAST(CAST(15 AS UINT128) AS BIT);

SELECT CAST(CAST(2.1e-44 AS REAL) AS BIT);

SELECT CAST(7.4e-323 AS BIT);

SELECT CAST(BITSTRING('1', 9) AS TINYINT);

SELECT CAST(BITSTRING('1', 17) AS SMALLINT);

SELECT CAST(BITSTRING('1', 33) AS INT);

SELECT CAST(BITSTRING('1', 65) AS BIGINT);

SELECT CAST(BITSTRING('1', 33) AS REAL);

SELECT CAST(BITSTRING('1', 65) AS DOUBLE);

SELECT CAST(b AS BLOB) FROM bits;

SELECT CAST(BITSTRING('1111', 32) AS BLOB);

SELECT CAST(CAST('1111' AS BIT) AS BLOB);

SELECT CAST(CAST(CAST('ab' AS BLOB) AS BIT) AS BLOB);

SELECT CAST(CAST(CAST('a' AS BLOB) AS BIT) AS BLOB);

SELECT CAST(BITSTRING('1111', 33) AS BLOB);

SELECT CAST(CAST('AAAA' AS BLOB) AS BIT);

SELECT CAST(CAST('' AS BLOB) AS BIT);

SELECT CAST(CAST((-15) AS TINYINT) AS BIT);

SELECT CAST(CAST((-15) AS INT128) AS BIT);

SELECT CAST(CAST((127) AS TINYINT) AS BIT);

SELECT CAST(CAST((-128) AS TINYINT) AS BIT);

SELECT CAST(CAST((32767) AS SMALLINT) AS BIT);

SELECT CAST(CAST((-32768) AS SMALLINT) AS BIT);

SELECT CAST(CAST((2147483647) AS INT) AS BIT);

SELECT CAST(CAST((-2147483648) AS INT) AS BIT);

SELECT CAST(CAST((9223372036854775807) AS BIGINT) AS BIT);

SELECT CAST(CAST((-9223372036854775808) AS BIGINT) AS BIT);

SELECT CAST(CAST((170141183460469231731687303715884105727) AS INT128) AS BIT);

SELECT CAST(CAST((-170141183460469231731687303715884105728) AS INT128) AS BIT);

SELECT CAST(CAST('01111111' AS BIT) AS TINYINT);

SELECT CAST(CAST('10000000' AS BIT) AS TINYINT);

SELECT CAST(CAST('0111111111111111' AS BIT) AS SMALLINT);

SELECT CAST(CAST('1000000000000000' AS BIT) AS SMALLINT);

SELECT CAST(CAST('01111111111111111111111111111111' AS BIT) AS INT);

SELECT CAST(CAST('10000000000000000000000000000000' AS BIT) AS INT);

SELECT CAST(CAST('0111111111111111111111111111111111111111111111111111111111111111' AS BIT) AS BIGINT);

SELECT CAST(CAST('1000000000000000000000000000000000000000000000000000000000000000' AS BIT) AS BIGINT);

SELECT CAST(CAST('01111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111' AS BIT) AS INT128);

SELECT CAST(CAST('10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000' AS BIT) AS INT128);

SELECT CAST(CAST((255) AS UTINYINT) AS BIT);

SELECT CAST(CAST((65535) AS USMALLINT) AS BIT);

SELECT CAST(CAST((4294967295) AS UINTEGER) AS BIT);

SELECT CAST(CAST((18446744073709551615) AS UBIGINT) AS BIT);

SELECT CAST(CAST('340282366920938463463374607431768211455' AS UINT128) AS BIT);

SELECT CAST(CAST('11111111' AS BIT) AS UTINYINT);

SELECT CAST(CAST('1111111111111111' AS BIT) AS USMALLINT);

SELECT CAST(CAST('11111111111111111111111111111111' AS BIT) AS UINTEGER);

SELECT CAST(CAST('1111111111111111111111111111111111111111111111111111111111111111' AS BIT) AS UBIGINT);

SELECT CAST(CAST((3.4028235e+38) AS REAL) AS BIT);

SELECT CAST(CAST((1.7976931348623157e+308) AS DOUBLE) AS BIT);

SELECT CAST(CAST('01111111011111111111111111111111' AS BIT) AS REAL);

SELECT CAST(CAST('0111111111101111111111111111111111111111111111111111111111111111' AS BIT) AS DOUBLE);

SELECT CAST(NULL AS BIT);

SELECT CAST(CAST(NULL AS BIT) AS INT);

PRAGMA enable_verification;

SELECT CAST(1 = 1 AS TEXT);

SELECT CAST(1 = 0 AS TEXT);

SELECT CAST(12345 AS BOOLEAN);

SELECT CAST('true' AS BOOLEAN);

SELECT CAST('t' AS BOOLEAN);

SELECT CAST('TRUE' AS BOOLEAN);

SELECT CAST('yes' AS BOOLEAN);

SELECT CAST('YeS' AS BOOLEAN);

SELECT CAST('y' AS BOOLEAN);

SELECT CAST('false' AS BOOLEAN);

SELECT CAST('f' AS BOOLEAN);

SELECT CAST('FALSE' AS BOOLEAN);

SELECT CAST('no' AS BOOLEAN);

SELECT CAST('nO' AS BOOLEAN);

SELECT CAST('n' AS BOOLEAN);

SELECT CAST('12345' AS BOOLEAN);

CREATE TABLE tbl AS SELECT 0 AS yes;

SELECT CAST(yes AS BOOLEAN) FROM tbl;

SELECT CAST(yes AS BOOLEAN);

SELECT CAST(CAST('12345' AS INT) AS BOOLEAN);

SELECT CAST(CAST('0' AS INT) AS BOOLEAN);

SELECT CAST(CAST('1' AS TINYINT) AS BOOLEAN);

SELECT CAST(CAST('0' AS TINYINT) AS BOOLEAN);

SELECT CAST(CAST('1' AS SMALLINT) AS BOOLEAN);

SELECT CAST(CAST('0' AS SMALLINT) AS BOOLEAN);

SELECT CAST(CAST('1' AS INT) AS BOOLEAN);

SELECT CAST(CAST('0' AS INT) AS BOOLEAN);

SELECT CAST(CAST('1' AS BIGINT) AS BOOLEAN);

SELECT CAST(CAST('0' AS BIGINT) AS BOOLEAN);

SELECT CAST(CAST('1' AS DECIMAL(18, 3)) AS BOOLEAN);

SELECT CAST(CAST('0' AS DECIMAL(18, 3)) AS BOOLEAN);

SELECT CAST(CAST('1' AS DECIMAL(1, 0)) AS BOOLEAN);

SELECT CAST(CAST('0' AS DECIMAL(1, 0)) AS BOOLEAN);

SELECT CAST(CAST('1' AS DECIMAL(9, 0)) AS BOOLEAN);

SELECT CAST(CAST('0' AS DECIMAL(9, 0)) AS BOOLEAN);

SELECT CAST(CAST('1' AS DECIMAL(38, 0)) AS BOOLEAN);

SELECT CAST(CAST('0' AS DECIMAL(38, 0)) AS BOOLEAN);

SELECT CAST(CAST('1' AS REAL) AS BOOLEAN);

SELECT CAST(CAST('0' AS REAL) AS BOOLEAN);

SELECT CAST(CAST('1' AS DOUBLE) AS BOOLEAN);

SELECT CAST(CAST('0' AS DOUBLE) AS BOOLEAN);

SELECT CAST(CAST('1' AS INT128) AS BOOLEAN);

SELECT CAST(CAST('0' AS INT128) AS BOOLEAN);

SELECT CAST(CAST('1' AS UINT128) AS BOOLEAN);

SELECT CAST(CAST('0' AS UINT128) AS BOOLEAN);

PRAGMA enable_verification;

SELECT CAST('e1' AS INT);

SELECT CAST('  e1' AS INT);

SELECT CAST('  E1' AS INT);

SELECT CAST('e1' AS DOUBLE);

SELECT CAST('  e1' AS DOUBLE);

SELECT CAST('  E1' AS DOUBLE);

SELECT CAST('1e1' AS INT);

SELECT CAST('  1e1' AS INT);

SELECT CAST('1e1' AS DOUBLE);

SELECT CAST('   1e1' AS DOUBLE);

SELECT CAST('${prefix}' AS INT);

SELECT CAST('${prefix}2' AS INT);

SELECT CAST('${prefix}10105' AS INT);

SELECT CAST('${prefix}-1' AS INT);

SELECT CAST('-${prefix}1' AS INT);

SELECT CAST('${prefix}1' AS INT);

SELECT CAST('${prefix}10' AS INT);

SELECT CAST('${prefix}11' AS INT);

SELECT CAST('${prefix}0000000' AS INT);

SELECT CAST('${prefix}1_0' AS INT);

SELECT CAST('${prefix}1_0_0' AS INT);

SELECT CAST('${prefix}11110000_11110000' AS INT);

SELECT CAST('${prefix}_1' AS INT);

SELECT CAST('${prefix}1_' AS INT);

SELECT CAST('${prefix}1_0_' AS INT);

SELECT CAST('${prefix}_1_0' AS INT);

WITH binary_string AS (SELECT REPLACE('${binary}', '_', '') AS str) SELECT CAST(LIST_SUM([(CASE WHEN TEXT[i + 1] = '0' THEN 0 ELSE 1 END) * (POWER(2, (LENGTH(str) - (i + 1)))) FOR i IN RANGE(0, LENGTH(str))]) AS INT) = CAST('${prefix}${binary}' AS INT) FROM binary_string;

SELECT CAST('${prefix}0000000000000000000000000000000001111111' AS TINYINT);

SELECT CAST('${prefix}0000000000000000000000000000000011111111' AS UINT8);

SELECT CAST('${prefix}00000000000000000000000000000000111111111' AS TINYINT);

SELECT CAST('${prefix}1111111111111111111111111111111' AS INT);

SELECT CAST('${prefix}11111111111111111111111111111111' AS INT);

SELECT CAST('${prefix}01111111111111111111111111111111' AS UINT32);

SELECT CAST('${prefix}11111111111111111111111111111111' AS UINT32);

SELECT CAST('${prefix}11111111111111111111111111111111' AS BIGINT);

SELECT CAST('${prefix}111111111111111111111111111111111111111111111111111111111111111' AS BIGINT);

SELECT CAST('${prefix}1111111111111111111111111111111111111111111111111111111111111111' AS BIGINT);

SELECT CAST('${prefix}1111111111111111111111111111111111111111111111111111111111111111' AS UINT64);

PRAGMA enable_verification;

SELECT CAST((1 = 1) AS TEXT), CAST((1 = 0) AS TEXT), CAST(CAST(NULL AS BOOLEAN) AS TEXT);

SELECT CAST(CAST(1 AS TINYINT) AS TEXT), CAST(CAST(12 AS TINYINT) AS TEXT), CAST(CAST((-125) AS TINYINT) AS TEXT);

SELECT CAST(CAST(1 AS SMALLINT) AS TEXT), CAST(CAST(12442 AS SMALLINT) AS TEXT), CAST(CAST((-32153) AS SMALLINT) AS TEXT);

SELECT CAST(CAST(1 AS INT) AS TEXT), CAST(CAST(12442952 AS INT) AS TEXT), CAST(CAST((-2000000111) AS INT) AS TEXT);

SELECT CAST(CAST(1 AS BIGINT) AS TEXT), CAST(CAST(1244295295289253 AS BIGINT) AS TEXT), CAST(CAST((-2000000111551166) AS BIGINT) AS TEXT);

SELECT CAST(CAST(2 AS REAL) AS TEXT), CAST(CAST(0.5 AS REAL) AS TEXT), CAST(CAST((-128.5) AS REAL) AS TEXT);

SELECT CAST(CAST(2 AS DOUBLE) AS TEXT), CAST(CAST(0.5 AS DOUBLE) AS TEXT), CAST(CAST((-128.5) AS DOUBLE) AS TEXT);

SELECT CAST('0xF' AS INT), CAST('0x0' AS INT), CAST('0xFEE' AS INT), CAST('0xfee' AS INT), CAST('0x00FEE' AS INT);

SELECT CAST('0x' AS INT);

SELECT CAST('0X' AS INT);

SELECT CAST('0xHELLO' AS INT);

SELECT CAST('0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' AS INT);

SELECT CAST('0x7F' AS TINYINT), CAST('0x7FFF' AS SMALLINT), CAST('0x7FFFFFFF' AS INT), CAST('0x7FFFFFFFFFFFFFFF' AS BIGINT);

SELECT CAST('0xFF' AS UINT8), CAST('0xFFFF' AS UINT16), CAST('0xFFFFFFFF' AS UINT32), CAST('0xFFFFFFFFFFFFFFFF' AS UINT64);

SELECT CAST('0x000000000000000000000000000000000000000000000000000000000000000000' AS INT);

SELECT CAST('0x80' AS TINYINT);

SELECT CAST('0x8000' AS SMALLINT);

SELECT CAST('0x80000000' AS INT);

SELECT CAST('0x8000000000000000' AS BIGINT);

SELECT CAST('0x100' AS UINT8);

SELECT CAST('0x10000' AS UINT16);

SELECT CAST('0x100000000' AS UINT32);

SELECT CAST('0x10000000000000000' AS UINT64);

SELECT TRY_CAST('0x80' AS TINYINT);

SELECT TRY_CAST('0x8000' AS SMALLINT);

SELECT TRY_CAST('0x80000000' AS INT);

SELECT TRY_CAST('0x8000000000000000' AS BIGINT);

SELECT TRY_CAST('0x100' AS UINT8);

SELECT TRY_CAST('0x10000' AS UINT16);

SELECT TRY_CAST('0x100000000' AS UINT32);

SELECT TRY_CAST('0x10000000000000000' AS UINT64);

SELECT TRY_CAST('0x10000000000000000' AS UINT64);

SELECT TRY_CAST('0x10000000000000000' AS UINT64);

SELECT TRY_CAST('0x10000000000000000' AS UINT64);

SELECT CAST('${hex}' AS INT);

SELECT CAST('${hex}' AS INT);

SELECT CAST('${hex}' AS INT);

SELECT CAST('${hex}' AS INT);

SELECT CAST('${hex}' AS INT);

SELECT CAST('${hex}' AS INT);

PRAGMA enable_verification;

SELECT TRY_CAST('hello' AS INT);

SELECT CAST('hello' AS INT);

SELECT TRY_CAST(3 AS BIGINT), CAST(3 AS BIGINT), TRY_CAST(2 AS BIGINT), CAST(3 AS INT);

CREATE TABLE try_cast (try_cast INT);

INSERT INTO try_cast VALUES (3);

SELECT try_cast FROM try_cast;

SELECT TRY_CAST(try_cast AS BIGINT) FROM try_cast;

SELECT TRY_CAST(TRY_CAST(try_cast AS INT) AS INT) FROM try_cast;

PRAGMA enable_verification;

CREATE TABLE test AS SELECT CAST('2021-02-04 19:30:00' AS TIMESTAMP) AS t;

SELECT * FROM test WHERE (CAST(t AS DATE)) = CAST('2021-02-04' AS DATE);

SELECT * FROM test WHERE (CAST(t AS DATE)) = '2021-02-04';

SELECT * FROM test WHERE (CAST(t AS DATE)) = '2021-02-04';

CREATE TABLE "MyTable" (i INT, "BigColumn" INT);

ALTER TABLE MyTable ALTER COLUMN BIGCOLUMN SET DATA TYPE TEXT;

ALTER TABLE MyTable DROP COLUMN BIGCOLUMN;

SELECT BIGCOLUMN FROM MyTable;

ALTER TABLE MyTable ADD COLUMN "BIGCOLUMN" TEXT;

ALTER TABLE MyTable ALTER COLUMN BIGCOLUMN SET DEFAULT 3;

INSERT INTO MyTable (BIGCOLUMN) VALUES (DEFAULT);

SELECT BIGCOLUMN FROM MyTable;

ALTER TABLE MyTable ALTER COLUMN BIGCOLUMN DROP DEFAULT;

SELECT BIGCOLUMN FROM MyTable;

ALTER TABLE MyTable RENAME TO BIGCOLUMN, TO "SmallColumn";

CREATE TABLE "MyTable" (i INT);

SELECT * FROM mytable;

SELECT * FROM MyTable;

SELECT * FROM "MyTable";

ALTER TABLE MyTable ADD COLUMN j INT;

ALTER TABLE MyTable RENAME TO "MyOtherTable";

DROP TABLE MyOtherTable;

CREATE TABLE "ABC" (i INT);

CREATE TABLE "AbC" (i INT);

SELECT * FROM "ABC";

SELECT * FROM abc;
/* error: which table did I mean? */;

ALTER TABLE abc ADD COLUMN j INT;

ALTER TABLE "ABC" ADD COLUMN "J" INT;

CREATE TABLE mytable (mycolumn INT, myothercolumn INT);

SELECT "MYCOLUMN" FROM "MYTABLE";

ALTER TABLE "MYTABLE" DROP COLUMN "MYCOLUMN";

ALTER TABLE "MYTABLE" ADD COLUMN mycolumn INT;

ALTER TABLE "MYTABLE" ALTER COLUMN "MYCOLUMN" SET DEFAULT 3;

PRAGMA enable_verification;

WITH cte AS (SELECT 42 AS "A") SELECT a FROM cte;

WITH "CTE" AS (SELECT 42) SELECT * FROM cte;

SET default_null_order = 'nulls_first';
require AS skip_reload;

SET default_null_order = 'nulls_first';
require AS skip_reload;

CREATE TABLE INTEGERS (I INT);

INSERT INTO integers (i) VALUES (1), (2), (3), (NULL);

SELECT integers.i FROM integers ORDER BY i;

SELECT integers.i AS i FROM integers GROUP BY I ORDER BY "integers"."I";

SELECT integers.i AS "ZZZ" FROM integers GROUP BY "zzz" ORDER BY "INTEGERS"."i";

WITH "CTE"("ZZZ") AS (SELECT integers.i AS "ZZZ" FROM integers GROUP BY "zzz") SELECT * FROM cte ORDER BY zZz;

WITH "CTE"("ZZZ") AS (SELECT integers.i AS "ZZZ" FROM integers GROUP BY "zzz") SELECT * FROM cte ORDER BY zZz;

UPDATE integers SET i = integers.i + 1;

SELECT i FROM integers ORDER BY integers.i;

DELETE FROM integers WHERE i IS NULL;

SELECT i FROM integers ORDER BY integers.i;

ALTER TABLE integers ADD COLUMN J INT;

SELECT i, j FROM integers ORDER BY integers.i;

UPDATE integers SET j = integers.i;

ALTER TABLE integers DROP COLUMN i;

SELECT j FROM integers ORDER BY integers.j;

SELECT tbl.k FROM (SELECT j FROM integers) AS TBL(K) ORDER BY K;

DROP TABLE integers;

DROP TABLE integers;

INSERT INTO structs VALUES ({'i': {'k': 42}});

SELECT structs.S.i.K, "STRUCTS"."S"."I"."K", "structs"."s"."i"."k" FROM structs;

SELECT "STRUCTS"."S"."I"."K" FROM structs GROUP BY "STRUCTS"."S"."I"."K";

SELECT structs.S.i.K FROM structs GROUP BY structs.S.i.K;

DROP TABLE structs;

CREATE TABLE A AS SELECT 1 AS "X", 2 AS "Y";

CREATE TABLE B AS SELECT 1 AS "X", 3 AS "Z";

SELECT * FROM A JOIN B USING (X);

SELECT * FROM A JOIN B USING ("X");

DROP TABLE "A";

DROP TABLE "B";

CREATE TABLE A AS SELECT 1 AS "X", 2 AS "Y";

CREATE TABLE B AS SELECT 1 AS X, 3 AS "Z";

SELECT * FROM A JOIN B USING (X);

SELECT * FROM A JOIN B USING (X);

DROP TABLE "A";

DROP TABLE "B";

CREATE TABLE A AS SELECT 1 AS "hello", 2 AS x;

CREATE TABLE B AS SELECT 1 AS "HELLO", 3 AS x2;

CREATE TABLE C AS SELECT 1 AS "hEllO", 4 AS x3;

CREATE TABLE D AS SELECT 1 AS "HElLo", 5 AS x4;

CREATE TABLE E AS SELECT 1 AS "heLLo", 6 AS x5;

SELECT * FROM a JOIN b USING (hello);

SELECT * FROM a JOIN b USING (hello, "HELLO");

SELECT * FROM a JOIN b USING (hello) JOIN c USING (hello);

SELECT * FROM a JOIN b USING (hello) JOIN c USING ("HELLO");

SELECT * FROM a JOIN b USING (hello) JOIN c USING (hello) JOIN d USING (hello);

SELECT * FROM a JOIN b USING ("HELLO") JOIN c USING ("HeLLo") JOIN d USING (hello);

SELECT * FROM a JOIN b USING (hello) JOIN c USING (hello) JOIN d USING (hello) JOIN e USING (hello);

SELECT * FROM a FULL OUTER JOIN b USING (hello);

SELECT * FROM a FULL OUTER JOIN b USING (hello) FULL OUTER JOIN c USING (hello);

SELECT * FROM a FULL OUTER JOIN b USING (hello) FULL OUTER JOIN c USING (hello) FULL OUTER JOIN d USING (hello);

SELECT * FROM a FULL OUTER JOIN b USING (hello) FULL OUTER JOIN c USING (hello) FULL OUTER JOIN d USING (hello) FULL OUTER JOIN e USING (hello);

SELECT * FROM a NATURAL JOIN b;

SELECT * FROM a NATURAL JOIN b NATURAL JOIN c;

SELECT * FROM a NATURAL JOIN b NATURAL JOIN c NATURAL JOIN d;

SELECT * FROM a NATURAL JOIN b NATURAL JOIN c NATURAL JOIN d NATURAL JOIN e;

SELECT * FROM (a NATURAL JOIN b NATURAL JOIN c) NATURAL JOIN (d NATURAL JOIN e);

SELECT * FROM a NATURAL FULL OUTER JOIN b;

SELECT * FROM a NATURAL FULL OUTER JOIN b NATURAL FULL OUTER JOIN c;

SELECT * FROM a NATURAL FULL OUTER JOIN b NATURAL FULL OUTER JOIN c NATURAL FULL OUTER JOIN d;

SELECT * FROM a NATURAL FULL OUTER JOIN b NATURAL FULL OUTER JOIN c NATURAL FULL OUTER JOIN d NATURAL FULL OUTER JOIN e;

SELECT * FROM (a NATURAL FULL OUTER JOIN b NATURAL FULL OUTER JOIN c) NATURAL FULL OUTER JOIN (d NATURAL FULL OUTER JOIN e);

SELECT * FROM (SELECT 1 AS "hello", 2 AS "hello") NATURAL JOIN (SELECT 1 AS "hello", 2 AS "hello");

SELECT * FROM (SELECT 1 AS "hello", 2 AS "HeLlO") NATURAL JOIN (SELECT 1 AS "hello", 2 AS "HeLlO");

SELECT * FROM (SELECT 1 AS "hello", 2 AS "hello") AS t1, (SELECT 1 AS "hello", 2 AS "hello") AS t2;

SELECT * FROM (SELECT 1 AS "hello", 2 AS "hello") AS t1 JOIN (SELECT 1 AS "hello", 2 AS "hello") AS t2 USING (hello);

SELECT * FROM (SELECT 1 AS "hello", 2 AS "HeLlO") AS t1 JOIN (SELECT 1 AS "hello", 2 AS "HeLlO") AS t2 USING (hello);

SELECT hello FROM (a JOIN b USING (hello)), (d JOIN e USING (hello));

CREATE TABLE test_table AS SELECT 1 AS test_table_column;

SELECT comment FROM DUCKDB_COLUMNS() WHERE column_name = 'test_table_column';

COMMENT ON COLUMN test_table.test_table_column IS 'very gezellige column';

SELECT comment FROM DUCKDB_COLUMNS() WHERE column_name = 'test_table_column';

SELECT comment FROM DUCKDB_COLUMNS() WHERE column_name = 'test_table_column';

CREATE VIEW test_view AS SELECT test_table_column AS test_view_column FROM test_table;

SELECT comment FROM DUCKDB_COLUMNS() WHERE column_name = 'test_view_column';

COMMENT ON COLUMN test_view.test_view_column IS 'very gezellige view column';

SELECT comment FROM DUCKDB_COLUMNS() WHERE column_name = 'test_view_column';

SELECT comment FROM DUCKDB_COLUMNS() WHERE column_name = 'test_view_column';

SELECT database_name, table_name, column_name, comment FROM DUCKDB_COLUMNS() WHERE internal IS FALSE;

SELECT database_name, table_name, column_name, comment FROM DUCKDB_COLUMNS() WHERE internal IS FALSE;

SELECT database_name, table_name, column_name, comment FROM DUCKDB_COLUMNS() WHERE internal IS FALSE;

SELECT database_name, table_name, column_name, comment FROM DUCKDB_COLUMNS() WHERE internal IS FALSE;

SELECT database_name, table_name, column_name, comment FROM DUCKDB_COLUMNS() WHERE internal IS FALSE;

CREATE TABLE t1 AS SELECT 1 AS c1;

CREATE INDEX test_index ON t1 USING art(c1);

COMMENT ON TABLE t1 IS 'very niceee';

CREATE TABLE a (i INT);

CREATE VIEW b AS SELECT CAST(i AS TEXT) AS j FROM a;

COMMENT ON TABLE a IS 'a table';

COMMENT ON COLUMN a.i IS 'a column';

COMMENT ON VIEW b IS 'a view';

COMMENT ON COLUMN b.j IS 'a column';

SELECT comment FROM DUCKDB_COLUMNS() WHERE column_name = 'i';

SELECT comment FROM DUCKDB_TABLES() WHERE table_name = 'a';

SELECT comment FROM DUCKDB_VIEWS() WHERE view_name = 'b';

SELECT comment FROM DUCKDB_COLUMNS() WHERE column_name = 'j';

ATTACH '__TEST_DIR__/comment_on_extended_1.db' AS db1;

ATTACH '__TEST_DIR__/comment_on_extended_2.db' AS db2;

CREATE SCHEMA db1.s1;

CREATE SCHEMA db2.s2;

CREATE TABLE db1.s1.t1 AS SELECT 1 AS c1;

CREATE TABLE db2.s2.t2 AS SELECT 2 AS c2;

CREATE TABLE db1.s1.t3 AS SELECT 3 AS c3;

CREATE TABLE db2.s2.t4 AS SELECT 4 AS c4;

CREATE INDEX test_index ON db1.s1.t3 USING art(c3);

CREATE INDEX test_index ON db2.s2.t4 USING art(c4);

SELECT COUNT(*) FROM DUCKDB_TABLES() WHERE NOT comment IS NULL;

SELECT COUNT(*) FROM DUCKDB_COLUMNS() WHERE NOT comment IS NULL;

COMMENT ON TABLE db1.s1.t1 IS 'very gezellige table 1';

SELECT comment FROM DUCKDB_TABLES() WHERE table_name = 't1';

USE db2.s2;

COMMENT ON TABLE t2 IS 'very gezellige table 2';

SELECT comment FROM DUCKDB_TABLES() WHERE table_name = 't2';

COMMENT ON TABLE db2.t2 IS 'another very gezellige table 2';

SELECT comment FROM DUCKDB_TABLES() WHERE table_name = 't2';

COMMENT ON TABLE s2.t2 IS 'yet another very gezellige table 2';

SELECT comment FROM DUCKDB_TABLES() WHERE table_name = 't2';

SELECT comment FROM DUCKDB_TABLES() WHERE table_name = 't2';

SELECT comment FROM DUCKDB_INDEXES() WHERE index_name = 'test_index' AND database_name = 'db1';

SELECT comment FROM DUCKDB_INDEXES() WHERE index_name = 'test_index' AND database_name = 'db1';

SELECT database_name, schema_name, comment FROM DUCKDB_INDEXES() WHERE index_name = 'test_index' ORDER BY comment;

COMMENT ON COLUMN col1 IS 'no bueno';

COMMENT ON COLUMN galaxy.db.schema."table".col1 IS 'no bueno';

COMMENT ON COLUMN table_blablabla.col1 IS 'bla';

COMMENT ON COLUMN db1.s1.t1.c1 IS 'very gezellige column 1';

SELECT database_name, schema_name, table_name, comment FROM DUCKDB_COLUMNS() WHERE column_name = 'c1' ORDER BY comment;

COMMENT ON COLUMN db2.t2.c2 IS 'very gezellige column 2';

SELECT database_name, schema_name, table_name, comment FROM DUCKDB_COLUMNS() WHERE column_name = 'c2' ORDER BY comment;

COMMENT ON COLUMN s2.t2.c2 IS 'another very gezellige column 2';

SELECT database_name, schema_name, table_name, comment FROM DUCKDB_COLUMNS() WHERE column_name = 'c2' ORDER BY comment;

COMMENT ON COLUMN t2.c2 IS 'yet another very gezellige column 2';

SELECT database_name, schema_name, table_name, comment FROM DUCKDB_COLUMNS() WHERE column_name = 'c2' ORDER BY comment;

CREATE TABLE test AS SELECT 1 AS a;

COMMENT ON TABLE test IS 'comment-1';

COMMENT ON COLUMN test.a IS 'comment-2';

CREATE VIEW test_view AS SELECT * FROM test;

COMMENT ON COLUMN test_view.a IS 'comment-2.5';

CREATE INDEX test_index ON test(a);

COMMENT ON VIEW test_view IS 'comment-3';

COMMENT ON INDEX test_index IS 'comment-4';

CREATE SEQUENCE seq;

COMMENT ON SEQUENCE seq IS 'comment-5';

CREATE TYPE test_type AS int32;

COMMENT ON TYPE test_type IS 'comment-6';

CREATE MACRO test_table_macro(a,b) as TABLE select a,b;

CREATE FUNCTION test_function(a, b) AS a + b;

COMMENT ON MACRO TABLE test_table_macro IS 'comment-7';

COMMENT ON MACRO test_function IS 'comment-8';

SELECT ddb.comment, pg.description FROM duckdb_tables AS ddb LEFT JOIN pg_description AS pg ON pg.classoid = ddb.database_oid AND pg.objoid = ddb.table_oid WHERE pg.objsubid = 0 AND ddb.table_name = 'test';

SELECT ddb.comment, pg.description FROM duckdb_columns AS ddb LEFT JOIN pg_description AS pg ON pg.classoid = ddb.database_oid AND pg.objoid = ddb.table_oid WHERE pg.objsubid = 1 AND ddb.table_name = 'test';

SELECT ddb.comment, pg.description FROM duckdb_columns AS ddb LEFT JOIN pg_description AS pg ON pg.classoid = ddb.database_oid AND pg.objoid = ddb.table_oid WHERE pg.objsubid = 1 AND ddb.table_name = 'test_view';

SELECT ddb.comment, pg.description FROM duckdb_views AS ddb LEFT JOIN pg_description AS pg ON pg.classoid = ddb.database_oid AND pg.objoid = ddb.view_oid WHERE pg.objsubid = 0 AND ddb.view_name = 'test_view';

SELECT ddb.comment, pg.description FROM duckdb_indexes AS ddb LEFT JOIN pg_description AS pg ON pg.classoid = ddb.database_oid AND pg.objoid = ddb.index_oid WHERE ddb.index_name = 'test_index';

SELECT ddb.comment, pg.description FROM DUCKDB_SEQUENCES() AS ddb LEFT JOIN pg_description AS pg ON pg.classoid = ddb.database_oid AND pg.objoid = ddb.sequence_oid WHERE ddb.sequence_name = 'seq';

SELECT ddb.comment, pg.description FROM DUCKDB_TYPES() AS ddb LEFT JOIN pg_description AS pg ON pg.classoid = ddb.database_oid AND pg.objoid = ddb.type_oid WHERE ddb.type_name = 'test_type';

SELECT ddb.comment, pg.description FROM DUCKDB_FUNCTIONS() AS ddb LEFT JOIN pg_description AS pg ON pg.classoid = ddb.database_oid AND pg.objoid = ddb.function_oid WHERE ddb.function_name = 'test_table_macro';

SELECT ddb.comment, pg.description FROM DUCKDB_FUNCTIONS() AS ddb LEFT JOIN pg_description AS pg ON pg.classoid = ddb.database_oid AND pg.objoid = ddb.function_oid WHERE ddb.function_name = 'test_function';

SET checkpoint_threshold = '10.0 GB';

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA disable_checkpoint_on_shutdown;

COMMENT ON TABLE hahahoehoe IS 'blablabloebloe';

CREATE TABLE test_table AS SELECT 1 AS test_table_column;

SELECT comment FROM DUCKDB_TABLES() WHERE table_name = 'test_table';

COMMENT ON TABLE test_table IS 'very gezellige table';

SELECT comment FROM DUCKDB_TABLES() WHERE table_name = 'test_table';

SELECT comment FROM DUCKDB_TABLES() WHERE table_name = 'test_table';

SELECT comment FROM DUCKDB_TABLES() WHERE table_name = 'test_table';

SELECT comment FROM DUCKDB_TABLES() WHERE table_name = 'test_table';

SELECT * FROM test_table;

CREATE VIEW test_view AS SELECT 1 AS test_view_column;

SELECT comment FROM DUCKDB_VIEWS() WHERE view_name = 'test_view';

COMMENT ON VIEW test_view IS 'very gezellige view';

SELECT comment FROM DUCKDB_VIEWS() WHERE view_name = 'test_view';

SELECT comment FROM DUCKDB_VIEWS() WHERE view_name = 'test_view';

SELECT * FROM test_view;

DROP VIEW test_view;

CREATE INDEX test_index ON test_table USING art(test_table_column);

SELECT comment FROM DUCKDB_INDEXES() WHERE index_name = 'test_index';

COMMENT ON INDEX test_index IS 'very gezellige index';

SELECT comment FROM DUCKDB_INDEXES() WHERE index_name = 'test_index';

SELECT comment FROM DUCKDB_INDEXES() WHERE index_name = 'test_index';

SELECT * FROM test_table WHERE test_table_column = 1;

DROP INDEX test_index;

CREATE SEQUENCE test_sequence;

SELECT comment FROM DUCKDB_SEQUENCES() WHERE sequence_name = 'test_sequence';

COMMENT ON SEQUENCE test_sequence IS 'very gezellige sequence';

SELECT comment FROM DUCKDB_SEQUENCES() WHERE sequence_name = 'test_sequence';

SELECT comment FROM DUCKDB_SEQUENCES() WHERE sequence_name = 'test_sequence';

SELECT NEXTVAL('test_sequence');

DROP SEQUENCE test_sequence;

CREATE TYPE test_type AS int32;

SELECT comment FROM DUCKDB_TYPES() WHERE type_name = 'test_type';

COMMENT ON TYPE test_type IS 'very gezellige type';

SELECT comment FROM DUCKDB_TYPES() WHERE type_name = 'test_type';

SELECT comment FROM DUCKDB_TYPES() WHERE type_name = 'test_type';

SELECT CAST(1 AS test_type) AS val;

DROP TYPE test_type;

SELECT comment FROM DUCKDB_COLUMNS() WHERE column_name = 'test_table_column';

COMMENT ON COLUMN test_table.test_table_column IS 'very gezellige column';

SELECT comment FROM DUCKDB_COLUMNS() WHERE column_name = 'test_table_column';

SELECT comment FROM DUCKDB_COLUMNS() WHERE column_name = 'test_table_column';

ALTER TABLE test_table RENAME COLUMN test_table_column TO test_table_column_renamed;

SELECT comment FROM DUCKDB_COLUMNS() WHERE column_name = 'test_table_column_renamed';

CREATE MACRO test_macro(a, b) AS a + b;

SELECT comment FROM DUCKDB_FUNCTIONS() WHERE function_name = 'test_macro';

COMMENT ON MACRO test_macro IS 'very gezellige macro';

SELECT comment FROM DUCKDB_FUNCTIONS() WHERE function_name = 'test_macro';

SELECT comment FROM DUCKDB_FUNCTIONS() WHERE function_name = 'test_macro';

SELECT TEST_MACRO(1, 2);

DROP MACRO test_macro;

CREATE FUNCTION test_function(a, b) AS a + b;

SELECT comment FROM DUCKDB_FUNCTIONS() WHERE function_name = 'test_function';

COMMENT ON FUNCTION test_function IS 'very gezellige function';

SELECT comment FROM DUCKDB_FUNCTIONS() WHERE function_name = 'test_function';

SELECT comment FROM DUCKDB_FUNCTIONS() WHERE function_name = 'test_function';

CREATE MACRO test_table_macro(a,b) as TABLE select a,b;

SELECT comment FROM DUCKDB_FUNCTIONS() WHERE function_name = 'test_table_macro';

COMMENT ON MACRO TABLE test_table_macro IS 'very gezellige table macro';

SELECT comment FROM DUCKDB_FUNCTIONS() WHERE function_name = 'test_table_macro';

SELECT comment FROM DUCKDB_FUNCTIONS() WHERE function_name = 'test_table_macro';

SELECT * FROM TEST_TABLE_MACRO(1, 2);

DROP MACRO TABLE test_table_macro;

COMMENT ON DATABASE blabla IS 'bloebloe';

COMMENT ON SCHEMA blabla IS 'bloebloe';

CREATE TABLE hello (i INT);

CREATE SCHEMA test;

CREATE TABLE test.bye (i INT);

SELECT * FROM helloo;

SELECT * FROM bye;

CREATE SCHEMA a;
CREATE TABLE a.foo (name TEXT);

SELECT * FROM foo;

CREATE SCHEMA b;
CREATE TABLE b.foo (name TEXT);

SELECT * FROM foo;

CREATE SCHEMA c;
CREATE TABLE c.foo (name TEXT);

SELECT * FROM foo;

SELECT * FROM a.fooo;

PRAGMA enable_verification;

CREATE TABLE t1 (c1 TEXT);

BEGIN;

DROP TABLE IF EXISTS t1;

CREATE TABLE T1 (C2 TEXT);

SELECT C2 FROM T1;

ROLLBACK;

SELECT C2 FROM T1;

PRAGMA enable_verification;

CREATE TABLE system.information_schema.tbl (i INT);

CREATE TABLE information_schema.tbl (i INT);

CREATE TABLE pg_catalog.tbl (i INT);

PRAGMA enable_verification;

CREATE SCHEMA """cursed_schema";

CREATE TABLE integers (i INT);

CREATE VIEW vintegers AS SELECT 42;

CREATE OR REPLACE VIEW integers AS SELECT 42;

DROP VIEW integers;

DROP TABLE blabla;

ALTER TABLE blabla RENAME COLUMN i TO k;

DROP TABLE IF EXISTS vintegers;

CREATE INDEX i_index ON integers(i);

CREATE INDEX i_index ON integers(i);

CREATE INDEX IF NOT EXISTS i_index ON integers(i);

DROP INDEX i_index;

DROP INDEX i_index;

DROP INDEX IF EXISTS i_index;

CREATE UNIQUE INDEX i_index ON integers(i);

CREATE UNIQUE INDEX i_index ON integers(i);

CREATE UNIQUE INDEX IF NOT EXISTS i_index ON integers(i);

DROP TABLE integers;

DROP INDEX i_index;

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (3), (4), (5);

SELECT * FROM integers;

INSERT INTO integers SELECT i + 3 FROM integers;

SELECT * FROM integers;

CREATE TABLE integers2 AS SELECT i, i + 2 AS j FROM integers;

SELECT * FROM integers2 ORDER BY i;

SELECT i FROM integers2 ORDER BY i;

SELECT j FROM integers2 ORDER BY i;

SELECT FROM_JSON('data/json/array_of_empty_arrays.json');

CREATE TABLE IF NOT EXISTS integers (i INT, j INT);

CREATE TABLE IF NOT EXISTS integers (i INT, j INT);

CREATE TABLE IF NOT EXISTS integers2 AS SELECT 42;

CREATE TABLE IF NOT EXISTS integers2 AS SELECT 42;

CREATE VIEW IF NOT EXISTS integers2 AS SELECT 42;

DROP VIEW IF EXISTS integers;

DROP TABLE IF EXISTS integers;

DROP TABLE IF EXISTS integers;

CREATE TABLE integers (i INT, PRIMARY KEY (j));

CREATE TABLE integers (i INT, PRIMARY KEY (i, i));

CREATE TABLE integers (i INT, PRIMARY KEY (i, i));

CREATE TABLE integers (i INT, PRIMARY KEY (i, i));

ATTACH ':memory:' AS db1;

ATTACH ':memory:' AS db2;

CREATE TABLE db2.tbl (i INT, j INT);

INSERT INTO db2.tbl VALUES (1, 2), (3, 4);

USE db1;

SELECT CURRENT_SETTING('search_path');

USE db2;

DETACH db1;

SELECT * FROM db2.tbl;

SELECT * FROM db2.main.tbl;

CREATE TABLE db2.tbl2 AS SELECT 42;

SELECT * FROM db2.non_existent_table;

SHOW TABLES;

USE db2;

SELECT CURRENT_SETTING('search_path');

CREATE TABLE integers ("42" INT);

INSERT INTO integers VALUES (33);

SELECT "42" FROM integers;

CREATE TABLE "table ""." ("col ""." TEXT);

INSERT INTO "table ""." ("col "".") VALUES ('quote_escaped_quote_''');

SELECT "table ""."."col "".", "col ""." FROM "table "".";

SET immediate_transaction_mode = TRUE;

CREATE SCHEMA test;

CREATE OR REPLACE SCHEMA test;

CREATE TABLE test.hello (i INT);

CREATE OR REPLACE SCHEMA test;

BEGIN;

DROP TABLE test.hello;

DROP SCHEMA test;

COMMIT;

CREATE SCHEMA test;

CREATE TABLE test.hello (i INT);

INSERT INTO test.hello VALUES (2), (3), (4);

BEGIN;

BEGIN;

DROP TABLE test.hello;

DROP SCHEMA test;

COMMIT;

SELECT * FROM test.hello;

ROLLBACK;

SELECT * FROM test.hello;

BEGIN;

BEGIN;

CREATE SCHEMA test;

CREATE SCHEMA test;

COMMIT;

ROLLBACK;

BEGIN;

BEGIN;

DROP SCHEMA test;

DROP SCHEMA test;

ROLLBACK;

ROLLBACK;

CREATE SCHEMA test;

CREATE SCHEMA out_of_path;

SET SESSION schema = 'test';

CREATE TABLE main.main_table (j INT);

CREATE TABLE test_table (i INT);

CREATE TABLE out_of_path.oop_table (k INT);

SELECT * FROM test.test_table;

SELECT * FROM test_table;

SELECT * FROM main_table;

SELECT * FROM out_of_path.oop_table;

SELECT * FROM out_of_path.test_table;

SELECT * FROM main.test_table;

INSERT INTO main.test_table (i) VALUES (1);

INSERT INTO test_table (i) VALUES (1);

INSERT INTO test.test_table (i) VALUES (2), (3);

INSERT INTO main_table (j) VALUES (4);

INSERT INTO main.main_table (j) VALUES (5), (6);

INSERT INTO oop_table (k) VALUES (7);

INSERT INTO out_of_path.oop_table (k) VALUES (8), (9);

DELETE FROM main.test_table WHERE i = 3;

DELETE FROM test.main_table WHERE i = 5;

DELETE FROM oop_table WHERE k = 8;

DELETE FROM test.test_table WHERE i = 1;

DELETE FROM test_table WHERE i = 2;

DELETE FROM main.main_table WHERE j = 4;

DELETE FROM main_table WHERE j = 5;

DELETE FROM out_of_path.oop_table WHERE k = 8;

SELECT i FROM test_table;

SELECT j FROM main.main_table;

SELECT k FROM out_of_path.oop_table;

UPDATE main.test_table SET i = 10 WHERE i = 1;

UPDATE test_table SET i = 30 WHERE i = 3;

UPDATE test.test_table SET i = 300 WHERE i = 30;

UPDATE main_table SET j = 60 WHERE j = 6;

UPDATE main.main_table SET j = 600 WHERE j = 60;

SELECT i FROM test_table;

SELECT j FROM main_table;

CREATE TEMPORARY TABLE test_temp_table (i INT);

SELECT * FROM memory.main.test_temp_table;

SELECT * FROM test.test_temp_table;

SELECT * FROM test_temp_table;

SELECT * FROM temp.test_temp_table;

SELECT ABS(i) FROM test_table;

SELECT SUM(i) FROM test_table;

CREATE VIEW test_view AS SELECT * FROM test_table;

CREATE VIEW main.main_view AS SELECT * FROM main.main_table;

CREATE VIEW out_of_path.oop_view AS SELECT * FROM out_of_path.oop_table;

SELECT * FROM main.test_view;

SELECT * FROM test.test_view;

SELECT * FROM test_view;

SELECT * FROM main.main_view;

SELECT * FROM main_view;

SELECT * FROM oop_view;

SELECT * FROM out_of_path.oop_view;

SET SESSION schema = 'main';

CREATE VIEW bad_test_view AS SELECT * FROM test_table;

SET SESSION schema = 'test';

DROP VIEW main.test_view;

DROP VIEW test_view;

DROP VIEW main_view;

DROP VIEW oop_view;

DROP VIEW out_of_path.oop_view;

CREATE MACRO test_macro(a, b) AS a + b;

CREATE MACRO test_macro2(c, d) AS c * d;

CREATE MACRO main.main_macro(a, b) AS a - b;

CREATE MACRO out_of_path.oop_macro(a, b) AS a * b;

SELECT main.test_macro(1, 2);

SELECT OOP_MACRO(1, 2);

SELECT MAIN_MACRO(1, 2);

SELECT main.main_macro(1, 2);

SELECT test.test_macro(1, 2);

SELECT TEST_MACRO(1, 2);

SELECT out_of_path.oop_macro(1, 2);

DROP MACRO main.test_macro;

DROP MACRO test_macro;

DROP MACRO test.test_macro2;

DROP MACRO main_macro;

DROP MACRO oop_macro;

DROP MACRO out_of_path.oop_macro;

CREATE SEQUENCE test_sequence;

CREATE SEQUENCE test_sequence2;

CREATE SEQUENCE main.main_sequence;

CREATE SEQUENCE out_of_path.oop_sequence;

SELECT main.nextval('main.test_sequence');

SELECT main.nextval('test.test_sequence');

SELECT main.nextval('test_sequence');

SELECT main.nextval('main.main_sequence');

SELECT main.nextval('main_sequence');

SELECT main.nextval('oop_sequence');

SELECT main.nextval('out_of_path.oop_sequence');

DROP SEQUENCE main.test_sequence;

DROP SEQUENCE test_sequence;

DROP SEQUENCE test.test_sequence2;

DROP SEQUENCE main_sequence;

DROP SEQUENCE oop_sequence;

DROP SEQUENCE out_of_path.oop_sequence;

ALTER TABLE main.test_table ADD COLUMN k INT;

ALTER TABLE main.main_table ADD COLUMN k INT;

ALTER TABLE main_table ADD COLUMN l INT;

ALTER TABLE test_table ADD COLUMN m INT;

ALTER TABLE test.test_table ADD COLUMN n INT;

ALTER TABLE oop_table ADD COLUMN o INT;

ALTER TABLE out_of_path.oop_table ADD COLUMN p INT;

DROP TABLE main.test_table;

DROP TABLE test.main_table;

DROP TABLE test_table;

DROP TABLE main_table;

DROP TABLE oop_table;

DROP TABLE out_of_path.oop_table;

CREATE TABLE test_table2 (i INT);

DROP TABLE test.test_table2;

CREATE TABLE test_table3 (i INT);

DROP TABLE IF EXISTS test_table3;

DROP TABLE IF EXISTS test_table3;

CREATE TABLE test_table4 (i INT);

DROP TABLE IF EXISTS test.test_table4;

DROP TABLE IF EXISTS test.test_table4;

CREATE TABLE main.main_table2 (i INT);

DROP TABLE IF EXISTS main.main_table2;

CREATE TABLE main_table (i INT);

CREATE SCHEMA test;

CREATE TABLE test.test_table (i INT);

CREATE SCHEMA test2;

CREATE TABLE test2.bye (i INT);
CREATE TABLE test2.test2_table (i INT);

CREATE SCHEMA test3;

CREATE SCHEMA test4;

CREATE SCHEMA test5;

CREATE TABLE test5.test5_table (i INT);

SELECT CURRENT_SETTING('search_path');

SELECT CURRENT_SETTING('schema');

SET SEARCH_PATH = 'test';

SET SEARCH_PATH = 'test,test2';

SET SEARCH_PATH = '"test","test2"';

SET SEARCH_PATH = '"test","test2"';

SET SEARCH_PATH = 'does_not_exist';

SET SCHEMA = 'test';

SET SCHEMA = 'test,test2';

SET SCHEMA = 'does_not_exist';

SET SEARCH_PATH = 'test,test2';

SET SEARCH_PATH = '"invalid quoted string list';

SELECT MAIN.CURRENT_SETTING('search_path');

SELECT MAIN.CURRENT_SCHEMAS(FALSE);

SELECT pg_catalog.CURRENT_SCHEMAS(FALSE);

SET SCHEMA = 'test';

SELECT MAIN.CURRENT_SETTING('search_path');

SELECT MAIN.CURRENT_SCHEMA();

SELECT pg_catalog.CURRENT_SCHEMA();

SELECT CURRENT_SCHEMA();

SELECT CURRENT_SCHEMAS(TRUE);

SELECT CURRENT_SCHEMAS(FALSE);

SET schema = 'test2';

SELECT CURRENT_SETTING('search_path');

SET search_path = 'test3';

SELECT CURRENT_SETTING('search_path');

SET SEARCH_PATH = 'test,test2';

SELECT i FROM test_table;

SELECT i FROM test2_table;

SELECT i FROM main_table;

CREATE TABLE main.table_with_same_name (in_main INT);

CREATE TABLE test.table_with_same_name (in_test INT);

CREATE TABLE test2.table_with_same_name (in_test2 INT);

SELECT in_main FROM table_with_same_name;

SELECT in_test2 FROM table_with_same_name;

SELECT in_test FROM table_with_same_name;

SET SEARCH_PATH = 'test,test2,test3,test4,test5';

SELECT i FROM test5_table;

SELECT i FROM test_table;

SELECT i FROM test2_table;

SELECT i FROM main_table;

SET SEARCH_PATH = 'test,test,test2';

SELECT i FROM test_table;

SELECT i FROM test2_table;

SELECT i FROM main_table;

SET schema = 'test';

SET schema = 'test2';

SELECT i FROM test_table;

SELECT i FROM test_table;

SELECT i FROM test2_table;

SELECT i FROM test2_table;

SET search_path = pg_catalog;

SELECT CURRENT_DATABASE();

SELECT CURRENT_CATALOG();

SELECT CURRENT_SCHEMA();

SELECT CURRENT_SCHEMAS(TRUE);

SELECT CURRENT_QUERY();

DROP SCHEMA main CASCADE;

CREATE SCHEMA test;

DROP SCHEMA test;

CREATE SCHEMA test;

CREATE SCHEMA test;

CREATE SCHEMA IF NOT EXISTS test;

CREATE TABLE test.hello (i INT);

CREATE TABLE test2.hello (i INT);

INSERT INTO test.hello VALUES (2), (3), (4);

SELECT * FROM hello;

SELECT * FROM test.hello;

DROP SCHEMA test;

DROP SCHEMA test CASCADE;

DROP SCHEMA IF EXISTS test;

DROP SCHEMA test;

CREATE TEMPORARY TABLE integers (i INT);

CREATE TEMPORARY TABLE integersx (i INT);

CREATE TEMPORARY TABLE main.integersy (i INT);

CREATE TEMPORARY TABLE s1 AS SELECT 42;

SELECT * FROM temp.s1;

SELECT * FROM s1;

CREATE TABLE temp.integersy (i INT);

CREATE SCHEMA temp;

CREATE TABLE temp.integersy (i INT);

CREATE TABLE memory.temp.integersy (i INT);

DROP SCHEMA temp CASCADE;

DROP TABLE memory.main.integersx;

DROP TABLE integersx;

CREATE TEMPORARY TABLE temp.integersx (i INT);

DROP TABLE temp.integersx;

CREATE TEMPORARY TABLE integers2 (i INT);

CREATE TEMPORARY TABLE integers (i INT);

INSERT INTO integers VALUES (42);

SELECT i FROM integers;

BEGIN;

CREATE TEMPORARY TABLE integers2 (i INT);

CREATE TEMPORARY SEQUENCE seq;

CREATE TEMPORARY VIEW v1 AS SELECT 42;

INSERT INTO integers2 VALUES (42);

SELECT i FROM integers2;

SELECT NEXTVAL('seq');

SELECT * FROM v1;

COMMIT;

SELECT i FROM integers2;

SELECT NEXTVAL('seq');

SELECT * FROM v1;

BEGIN;

CREATE TEMPORARY TABLE integers3 (i INT);

INSERT INTO integers3 VALUES (42);

SELECT i FROM integers3;

ROLLBACK;

SELECT i FROM integers3;

INSERT INTO integers VALUES (42);

CREATE TABLE 👤 (🔑 INT PRIMARY KEY, 🗣 TEXT, 🗓 DATE);

CREATE TABLE ✍ (🔑 INT PRIMARY KEY, 🗣 TEXT);

CREATE TABLE 📕 (🔑 INT PRIMARY KEY, 💬 TEXT, 🔖 TEXT, ✍ INT);

CREATE TABLE 👤🏠📕 (👤 INT, 📕 INT, ⭐ TEXT);

INSERT INTO 👤 VALUES (1, 'Jeff', '2019-01-01'), (2, 'Annie', '2019-01-01');

INSERT INTO ✍ VALUES (1, 'Herman Melville'), (2, 'Lewis Carroll');

INSERT INTO 📕 VALUES (1, 'Alice in Wonderland', '🔮', 2), (2, 'Moby Dick', '📖', 1), (3, 'Through the Looking-Glass', '🔮', 2);

INSERT INTO 👤🏠📕 VALUES (1, 1, '😍'), (1, 2, '🤢'), (2, 2, '🙂');

SELECT 👤.🗣 AS 👤, 📕.💬 AS 📕 FROM 👤 JOIN 👤🏠📕 ON 👤.🔑 = 👤🏠📕.👤 JOIN 📕 ON 📕.🔑 = 👤🏠📕.📕 ORDER BY 👤, 📕;

SELECT 👤.🗣, 👤🏠📕.⭐ FROM 👤🏠📕 JOIN 📕 ON 👤🏠📕.📕 = 📕.🔑 JOIN 👤 ON 👤🏠📕.👤 = 👤.🔑 WHERE 📕.💬 = 'Moby Dick' ORDER BY 👤.🗣;

SELECT type, name FROM sqlite_master WHERE name = '👤' ORDER BY name;

PRAGMA enable_verification;

CREATE TABLE tbl (a TEXT PRIMARY KEY);

CREATE TABLE tbl2 (a TEXT, FOREIGN KEY (a) REFERENCES tbl (a));

INSERT INTO tbl VALUES ('abc');

INSERT INTO tbl2 VALUES ('abc');

ALTER TABLE tbl ADD COLUMN b INT DEFAULT 5;

SELECT * FROM tbl;

SELECT * FROM tbl2;

PRAGMA enable_verification;

CREATE TABLE tbl (a TEXT DEFAULT 'abc');

INSERT INTO tbl VALUES (DEFAULT);

create macro mcr() as table select * from tbl;

SELECT * FROM MCR();

ALTER TABLE tbl ADD COLUMN b INT DEFAULT 5;

SELECT * FROM MCR();

PRAGMA enable_verification;

CREATE TABLE tbl (a TEXT DEFAULT 'abc');

INSERT INTO tbl VALUES (DEFAULT);

CREATE VIEW vw AS SELECT * FROM tbl;

SELECT * FROM vw;

ALTER TABLE tbl ADD COLUMN b INT DEFAULT 5;

SELECT * FROM vw;

PRAGMA enable_verification;

CREATE TABLE tbl (a TEXT, b INT);

CREATE INDEX idx ON tbl(a);

alter table tbl alter a set type integer;

PRAGMA enable_verification;

CREATE TABLE tbl (a TEXT, b INT);

CREATE INDEX idx ON tbl(a);

ALTER TABLE tbl DROP COLUMN a;

PRAGMA enable_verification;

CREATE TABLE tbl (a TEXT);

CREATE INDEX idx ON tbl(a);

ALTER TABLE tbl RENAME TO a, TO b;

PRAGMA enable_verification;

CREATE TABLE tbl (a TEXT);

CREATE VIEW vw AS SELECT * FROM tbl;

create macro static_table() as table select * from vw;

ALTER VIEW vw RENAME TO vw2;

SELECT * FROM STATIC_TABLE();

PRAGMA enable_verification;

CREATE TABLE tbl (a TEXT, b INT);

CREATE INDEX idx ON tbl(a);

ALTER TABLE tbl ALTER COLUMN a SET DEFAULT 'test';

CREATE SEQUENCE sequence1;

CREATE TABLE tablename (colname INT);

ALTER SEQUENCE sequence1 OWNED BY tablename;

DROP TABLE tablename;

SELECT NEXTVAL('sequence1');

CREATE SEQUENCE main.sequence1;

CREATE TABLE main.tablename (colname INT);

ALTER SEQUENCE main.sequence1 OWNED BY main.tablename;

DROP TABLE main.tablename;

SELECT NEXTVAL('main.sequence1');

CREATE SEQUENCE sequence1;

CREATE TABLE tablename (colname INT);

ALTER SEQUENCE sequence1 OWNED BY tablename;

DROP SEQUENCE sequence1 CASCADE;

SELECT * FROM tablename;

CREATE SEQUENCE sequence1;

CREATE TABLE tablename (colname INT);

ALTER SEQUENCE sequence1 OWNED BY tablename;

DROP SEQUENCE sequence1;

DROP TABLE tablename;

CREATE SEQUENCE sequence1;

CREATE TABLE tablename (colname INT);

CREATE TABLE tablename2 (colname INT);

ALTER SEQUENCE sequence1 OWNED BY tablename OWNED BY tablename2;

ALTER SEQUENCE sequence1 OWNED BY tablename;

ALTER SEQUENCE sequence1 OWNED BY tablename2;

DROP TABLE tablename;

DROP TABLE tablename2;

CREATE SEQUENCE sequence1;

CREATE TABLE tablename (colname INT);

ALTER SEQUENCE sequence1 OWNED BY tablename;

ALTER SEQUENCE sequence1 OWNED BY tablename;

DROP TABLE tablename;

CREATE SEQUENCE sequence1;

CREATE SEQUENCE sequence2;

CREATE SEQUENCE sequence3;

CREATE TABLE tablename (colname INT);

ALTER SEQUENCE sequence1 OWNED BY tablename;

ALTER SEQUENCE sequence2 OWNED BY tablename;

ALTER SEQUENCE sequence3 OWNED BY tablename;

DROP TABLE tablename;

SELECT NEXTVAL('sequence1');

SELECT NEXTVAL('sequence2');

SELECT NEXTVAL('sequence3');

CREATE SEQUENCE sequence1;

CREATE SEQUENCE sequence2;

CREATE TABLE tablename (colname INT DEFAULT NEXTVAL('sequence1'), colname2 INT DEFAULT NEXTVAL('sequence2'), colname3 INT, colname4 REAL, colname5 TEXT);

ALTER SEQUENCE sequence1 OWNED BY tablename;

INSERT INTO tablename VALUES (DEFAULT, DEFAULT, 10, 2.0, 'aaaa');

INSERT INTO tablename VALUES (DEFAULT, DEFAULT, 20, 3.0, 'bbbb');

SELECT colname, colname2, colname3, colname4, colname5 FROM tablename;

DROP TABLE tablename;

DROP SEQUENCE sequence2;

CREATE SEQUENCE sequence1;

CREATE TABLE tablename (colname INT);

ALTER SEQUENCE sequence1 OWNED BY tablename;

ALTER TABLE tablename RENAME TO new_tablename;

CREATE TABLE tablename (colname INT);

ALTER SEQUENCE sequence1 OWNED BY tablename;

DROP SEQUENCE sequence1;

CREATE OR REPLACE SEQUENCE sequence1;

ALTER SEQUENCE sequence1 OWNED BY new_tablename;

DROP TABLE tablename;

DROP TABLE new_tablename;

CREATE SEQUENCE sequence1;

CREATE TABLE tablename (colname INT);

ALTER SEQUENCE sequence1 OWNED BY tablename;

ALTER TABLE tablename ADD COLUMN colname2 INT DEFAULT NEXTVAL('sequence1');

ALTER SEQUENCE sequence1 OWNED BY tablename;

DROP SEQUENCE sequence1;

DROP TABLE tablename;

CREATE SEQUENCE sequence1;

CREATE TABLE tablename (colname INT, colname2 INT DEFAULT NEXTVAL('sequence1'));

ALTER SEQUENCE sequence1 OWNED BY tablename;

ALTER TABLE tablename DROP colname2;

DROP SEQUENCE sequence1;

DROP TABLE tablename;

CREATE SEQUENCE sequence1;

CREATE TABLE tablename (colname INT DEFAULT NEXTVAL('sequence1'));

ALTER SEQUENCE sequence1 OWNED BY tablename;

ALTER TABLE tablename ALTER COLUMN colname SET DATA TYPE REAL;

DROP SEQUENCE sequence1;

DROP TABLE tablename;

CREATE SEQUENCE sequence1;

CREATE TABLE tablename (colname INT DEFAULT NEXTVAL('sequence1'), colname2 INT DEFAULT NEXTVAL('sequence1'), colname3 INT DEFAULT NEXTVAL('sequence1'), colname4 INT DEFAULT NEXTVAL('sequence1'));

ALTER SEQUENCE sequence1 OWNED BY tablename;

ALTER TABLE tablename DROP colname4;

DROP SEQUENCE sequence1;

ALTER TABLE tablename DROP colname3;

DROP SEQUENCE sequence1;

ALTER TABLE tablename DROP colname2;

DROP SEQUENCE sequence1;

DROP TABLE tablename;

CREATE SEQUENCE sequence1;

CREATE TABLE tablename (colname INT DEFAULT NEXTVAL('sequence1'));

ALTER SEQUENCE sequence1 OWNED BY tablename;

BEGIN;

DROP TABLE tablename;

SELECT NEXTVAL('sequence1');

ROLLBACK;

SELECT NEXTVAL('sequence1');

DROP SEQUENCE sequence1;

DROP TABLE tablename;

CREATE SEQUENCE sequence1;

CREATE VIEW v1_sequence1 (a) AS SELECT 42;

ALTER SEQUENCE sequence1 OWNED BY v1_sequence1;

DROP SEQUENCE sequence1;

DROP VIEW v1_sequence1;

SELECT NEXTVAL('sequence1');

CREATE SEQUENCE sequence1;

CREATE SEQUENCE sequence2;

ALTER SEQUENCE sequence1 OWNED BY sequence2;

DROP SEQUENCE sequence1;

DROP SEQUENCE sequence2;

SELECT NEXTVAL('sequence1');

CREATE SEQUENCE sequence1;

CREATE SEQUENCE sequence2;

ALTER SEQUENCE sequence1 OWNED BY sequence2;

ALTER SEQUENCE sequence2 OWNED BY sequence1;

DROP SEQUENCE sequence2;

CREATE SEQUENCE sequence1;

CREATE SEQUENCE sequence2;

CREATE SEQUENCE sequence3;

CREATE SEQUENCE sequence4;

ALTER SEQUENCE sequence2 OWNED BY sequence1;

ALTER SEQUENCE sequence3 OWNED BY sequence2;

ALTER SEQUENCE sequence1 OWNED BY sequence3;

ALTER SEQUENCE sequence3 OWNED BY sequence4;

DROP SEQUENCE sequence1;

DROP SEQUENCE sequence4;

SELECT NEXTVAL('sequence1');

SELECT NEXTVAL('sequence2');

SELECT NEXTVAL('sequence3');

SELECT NEXTVAL('sequence4');

PRAGMA verify_serializer;

CREATE SEQUENCE sequence1;

CREATE SEQUENCE sequence2;

CREATE TABLE tbl1 (colname INT);

CREATE TABLE tbl2 (colname INT);

ALTER SEQUENCE sequence1 OWNED BY tbl1;

ALTER SEQUENCE sequence2 OWNED BY sequence1;

ALTER SEQUENCE sequence1 OWNED BY tbl2;

CREATE SEQUENCE sequence3;

alter sequence sequence3 owned by sequence1;

DROP TABLE tbl1;

SELECT NEXTVAL('sequence1');

CREATE SEQUENCE seq;

CREATE SEQUENCE other_seq;

CREATE TABLE tbl (a INT DEFAULT NEXTVAL('other_seq'));

alter sequence seq owned by tbl;

ALTER TABLE tbl RENAME TO tbl2;

DROP SEQUENCE seq;

DROP SEQUENCE other_seq;

DROP TABLE tbl2;

DROP SEQUENCE seq;

CREATE TABLE t2 AS (SELECT 42);

CREATE SEQUENCE seq;

CREATE SEQUENCE seq;

ALTER TABLE t2 RENAME TO t3;

ALTER TABLE t3 RENAME TO t2;

create schema schema${i};

create table schema${i}.tbl${i} (a integer);

create table schema${i}.tbl${i} (a integer);

create table schema${i}.tbl${i} (a integer);

create table schema${i}.tbl${i} (a integer);

CREATE SEQUENCE seq;

CREATE TABLE integers (i INT DEFAULT NEXTVAL('seq'), j INT);

INSERT INTO integers (j) VALUES (1), (1), (1), (1), (1);

SELECT SUM(i) FROM integers;

DROP SEQUENCE seq;

DROP SEQUENCE seq CASCADE;

SELECT * FROM integers;

CREATE SEQUENCE seq;

CREATE SEQUENCE seq1;

CREATE SEQUENCE seq2;

CREATE TABLE integers (i INT DEFAULT NEXTVAL('seq' || CAST(NEXTVAL('seq') AS TEXT)), j INT);

CREATE TABLE integers (i INT DEFAULT NEXTVAL('seq1') + NEXTVAL('seq2'), j INT);

INSERT INTO integers (j) VALUES (1);

DROP SEQUENCE seq1;

DROP SEQUENCE seq2;

DROP SEQUENCE seq1 CASCADE;

SELECT * FROM integers;

CREATE TABLE integers (i INT);

PREPARE v AS SELECT * FROM integers;

EXECUTE v;

DROP TABLE integers CASCADE;

EXECUTE v;

CREATE SEQUENCE seq;

PREPARE v AS SELECT nextval('seq');

EXECUTE v;

DROP SEQUENCE seq CASCADE;

EXECUTE v;

SET immediate_transaction_mode = TRUE;

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (1), (2), (3), (4), (5);

PREPARE v AS SELECT SUM(i) FROM integers;

BEGIN;

DROP TABLE integers CASCADE;

EXECUTE v;

DROP TABLE integers CASCADE;

ROLLBACK;

EXECUTE v;

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (1), (2), (3), (4), (5);

BEGIN;

PREPARE v AS SELECT SUM(i) FROM integers;

EXECUTE v;

DROP TABLE integers;

EXECUTE v;

COMMIT;

EXECUTE v;

CREATE SCHEMA s1;

CREATE TABLE s1.integers (i INT);

SELECT * FROM s1.integers;

DROP SCHEMA s1;

SELECT * FROM s1.integers;

DROP SCHEMA s1 CASCADE;

SELECT * FROM s1.integers;

CREATE SCHEMA s1;

CREATE TABLE s1.integers (i INT);

BEGIN;

BEGIN;

DROP TABLE s1.integers;

DROP SCHEMA s1;

ROLLBACK;

ROLLBACK;

SELECT * FROM s1.integers;

BEGIN;

BEGIN;

DROP SCHEMA s1 CASCADE;

SELECT * FROM s1.integers;

COMMIT;

SELECT * FROM s1.integers;

ROLLBACK;

CREATE TABLE s1.dummy (i INT);

CREATE TABLE tbl (i INT);

INSERT INTO tbl VALUES (5);

BEGIN;

ALTER TABLE tbl RENAME TO tbl2;

CREATE TABLE tbl (b TEXT);

INSERT INTO tbl VALUES ('test');

COMMIT;

checkpoint;
restart;

SELECT * FROM tbl2;

SELECT * FROM tbl;

ATTACH ':memory:' AS checksum_macro;

CREATE MACRO checksum_macro.checksum(table_name) AS TABLE
SELECT bit_xor(md5_number(COLUMNS(*)::VARCHAR))
FROM query_table(table_name);

BEGIN;

CREATE TABLE tbl AS SELECT UNNEST([42, 43]) AS x;

USE checksum_macro;

SELECT * FROM CHECKSUM('memory.tbl');

abort;

BEGIN;

USE memory;

CREATE TABLE tbl AS SELECT UNNEST([42, 43]) AS x;

SELECT * FROM checksum_macro.CHECKSUM('tbl');

PRAGMA enable_verification;

create macro information_schema.foo(a) as a;

PRAGMA enable_verification;

create macro min_from_tbl(tbl, col) as (select min(col) from query_table(tbl::VARCHAR));

CREATE TABLE integers AS SELECT * FROM RANGE(0, 100) AS t(i);

SELECT MIN_FROM_TBL(integers, i);

SELECT MIN_FROM_TBL(integers, k);

SELECT MIN_FROM_TBL(integers2, i);

SELECT MIN_FROM_TBL(tbl_name, i) FROM (VALUES ('integers')) AS t(tbl_name);

PRAGMA enable_verification;

SELECT * FROM QUERY('SELECT 42');

SELECT * FROM QUERY('SELECT 42 AS a');

SELECT * FROM QUERY('SELECT 10 + 32;');

SELECT * FROM QUERY('SELECT abs(-42)');

SELECT * FROM QUERY('SELECT * FROM (SELECT 1 + 2)');

SELECT * FROM QUERY('SELECT 1, 2, 3');

SELECT * FROM QUERY('SELECT 42;;;--- hello;');

SELECT * FROM QUERY('SELECT ''hello''');

CREATE TABLE tbl (a INT, b INT, c INT);

SELECT * FROM QUERY('SELECT *, 1 + 2 FROM tbl');

INSERT INTO tbl VALUES (1, 2, 3), (4, 5, 6), (7, 8, 9);

SELECT * FROM QUERY('FROM tbl');

SELECT * FROM QUERY('SELECT a + b + c FROM tbl');

SELECT * FROM QUERY('WITH a(i) AS (SELECT 1) SELECT a1.i AS i1, a2.i AS i2 FROM a AS a1, a AS a2');

SELECT * FROM QUERY(NULL);

SELECT * FROM QUERY(' ');

SELECT * FROM QUERY('');

SELECT * FROM QUERY('FROM query(FROM)');

SELECT * FROM QUERY('SELECT 1; SELECT 2');

SELECT QUERY(SELECT 1);

SELECT * FROM QUERY('CREATE TABLE tbl (a INT)');

CREATE TABLE tbl_int AS SELECT 42;

CREATE TABLE tbl_varchar AS SELECT 'duckdb';

CREATE TABLE tbl2_varchar AS SELECT '1?ch@racter$';

CREATE TABLE tbl_empty AS SELECT '';

SELECT * FROM QUERY_TABLE('tbl_int');

SELECT * FROM QUERY_TABLE(['tbl_int']);

SELECT * FROM QUERY_TABLE(tbl);

CREATE TABLE tbl2 (a INT, b INT, c INT);

INSERT INTO tbl2 VALUES (9, 8, 7), (6, 5, 4), (3, 2, 1);

SELECT * FROM QUERY_TABLE([tbl, tbl2]);

SELECT * FROM QUERY_TABLE();

SELECT * FROM QUERY_TABLE(NULL);

SELECT * FROM QUERY_TABLE([]);

SELECT * FROM QUERY_TABLE(['']);

SELECT * FROM QUERY_TABLE('tbl_int', 'tbl_varchar', tbl2_varchar);

SELECT * FROM QUERY_TABLE([tbl_int, tbl2]);

SELECT * FROM QUERY_TABLE(not_defined_tbl);

SELECT * FROM QUERY_TABLE('FROM query(''select 1 + 2;'')');

SELECT * FROM QUERY_TABLE('FROM query("select 1 + 2;")');

SELECT * FROM QUERY_TABLE('(SELECT 17 + 25)');

CREATE TABLE "(SELECT 17 + 25)" (i INT);

INSERT INTO "(SELECT 17 + 25)" VALUES (100);

SELECT * FROM "(SELECT 17 + 25)";

SELECT * FROM QUERY_TABLE("(SELECT 17 + 25)");

SELECT * FROM QUERY_TABLE('(SELECT 17 + 25)');

SELECT * FROM QUERY_TABLE(SELECT 17 + 25);

SELECT * FROM QUERY_TABLE("SELECT 4 + 2");

SELECT * FROM QUERY_TABLE('SELECT 4 + 2');

SELECT f.* FROM QUERY_TABLE('tbl_int') AS f;

SELECT f.x FROM QUERY_TABLE('tbl_int') AS f(x);

SELECT * FROM QUERY_TABLE(['tbl_int', 'tbl_varchar', 'tbl_empty', 'tbl2_varchar'], FALSE);

SELECT * FROM QUERY_TABLE([tbl_int, tbl_varchar, tbl_empty, tbl2_varchar], TRUE);

SELECT * FROM QUERY_TABLE(TRUE);

SELECT * FROM QUERY_TABLE(tbl2, TRUE);

SELECT * FROM QUERY_TABLE(['tbl_int', 'tbl_varchar', 'tbl_empty', '(select ''I am a subquery'')'], FALSE);

PRAGMA enable_verification;

CREATE MACRO my_extract(x) AS x.a.b;

SELECT MY_EXTRACT({'a': {'b': 42}});

CREATE MACRO my_subquery_extract(x) AS (SELECT x.a.b);

SELECT MY_SUBQUERY_EXTRACT({'a': {'b': 42}});

PRAGMA enable_verification;

CREATE TABLE integers (a INT);

INSERT INTO integers VALUES (1);

CREATE MACRO cte_sq(a,b) AS (WITH cte AS (SELECT a * 2 AS c) SELECT cte.c + sq.d FROM cte, (SELECT b * 3 AS d) AS sq);

SELECT CTE_SQ(3, 4);

CREATE MACRO nested_cte(needle, haystack) AS needle IN (
SELECT i FROM (
WITH ints AS (
SELECT CAST(UNNEST(string_split(haystack,',')) AS INT) AS i
)
SELECT i FROM ints
) AS sq
);

SELECT NESTED_CTE(2, '2,2,2,2');

CREATE MACRO IFELSE(a,b,c) AS CASE WHEN a THEN b ELSE c END;

SELECT IFELSE(1, IFELSE(1, 'a', 'b'), 'c');

SELECT IFELSE(1, IFELSE(0, 'a', 'b'), 'c');

SELECT IFELSE(0, IFELSE(1, 'a', 'b'), 'c');

SELECT IFELSE(1, IFELSE(1, a, 'b'), 'c') FROM integers;

SELECT IFELSE(1, IFELSE(1, b, 1), a) FROM integers;

CREATE MACRO f1(x) AS (SELECT MIN(a) + x FROM integers);

SELECT F1(42) FROM integers;

CREATE MACRO mod_two(k) AS k%2;

SELECT MOD_TWO(a), SUM(a) FROM integers GROUP BY MOD_TWO(a);

CREATE MACRO add_mac(a, b) AS a + b;

CREATE MACRO double_add(a, b, c) AS add_mac(add_mac(a, b), c);

SELECT DOUBLE_ADD(1, 2, 3);

CREATE MACRO triple_add1(a, b, c, d) AS add_mac(add_mac(a, b), add_mac(c, d));

SELECT TRIPLE_ADD1(1, 2, 3, 4);

CREATE MACRO triple_add2(a, b, c, d) as add_mac(add_mac(add_mac(a, b), c), d);

SELECT TRIPLE_ADD2(1, 2, 3, 4);

INSERT INTO integers VALUES (41);

SELECT ADD((SELECT MIN(a) FROM integers), (SELECT MAX(a) FROM integers));

SELECT (SELECT MAX(ADD(i1.a, a)) FROM integers) FROM integers AS i1;

CREATE MACRO prep(x) AS ?+1;

CREATE MACRO add_one(a) AS a + 1;

PREPARE v1 AS SELECT add_one(?::INTEGER);

EXECUTE v1(1);

CREATE MACRO my_square(a) AS a * a;

PREPARE v2 AS SELECT my_square(?::INTEGER);

EXECUTE v2(3);

CREATE TABLE documents (id TEXT, body TEXT);

INSERT INTO documents VALUES ('doc1', ' QUÁCK+QUÁCK+QUÁCK'), ('doc2', ' BÁRK+BÁRK+BÁRK+BÁRK'), ('doc3', ' MÉOW+MÉOW+MÉOW+MÉOW+MÉOW');

CREATE SCHEMA fts_main_documents;

CREATE TABLE fts_main_documents.docs AS (SELECT ROW_NUMBER() OVER () AS docid, id AS name FROM main.documents);

CREATE TABLE fts_main_documents.terms AS (SELECT term, docid, ROW_NUMBER() OVER (PARTITION BY docid) AS pos FROM (SELECT UNNEST(STR_SPLIT_REGEX(REGEXP_REPLACE(LOWER(STRIP_ACCENTS(body)), '[^a-z]', ' ', 'g'), '\s+')) AS term, ROW_NUMBER() OVER () AS docid FROM main.documents) AS sq WHERE term <> '');

ALTER TABLE fts_main_documents.docs ADD COLUMN len INT;

UPDATE fts_main_documents.docs AS d SET len = (SELECT COUNT(term) FROM fts_main_documents.terms AS t WHERE t.docid = d.docid);

CREATE TABLE fts_main_documents.dict AS WITH distinct_terms AS (SELECT DISTINCT term, docid FROM fts_main_documents.terms ORDER BY docid) SELECT ROW_NUMBER() OVER () AS termid, term FROM distinct_terms;

ALTER TABLE fts_main_documents.terms ADD COLUMN termid INT;

UPDATE fts_main_documents.terms AS t SET termid = (SELECT termid FROM fts_main_documents.dict AS d WHERE t.term = d.term);

ALTER TABLE fts_main_documents.terms DROP term;

ALTER TABLE fts_main_documents.dict ADD COLUMN df INT;

UPDATE fts_main_documents.dict AS d SET df = (SELECT COUNT(DISTINCT docid) FROM fts_main_documents.terms AS t WHERE d.termid = t.termid GROUP BY termid);

WITH ppterms AS (SELECT UNNEST(STR_SPLIT_REGEX(REGEXP_REPLACE(LOWER(STRIP_ACCENTS('QUÁCK BÁRK')), '[^a-z]', ' ', 'g'), '\s+')) AS term), qtermids AS (SELECT termid FROM fts_main_documents.dict AS dict JOIN ppterms USING (term)), qterms AS (SELECT termid, docid FROM fts_main_documents.terms AS terms WHERE termid IN (SELECT qtermids.termid FROM qtermids)), subscores AS (SELECT docs.docid, len, term_tf.termid, tf, df, (LOG((3 - df + 0.5) / (df + 0.5)) * ((tf * (1.2 + 1) / (tf + 1.2 * (1 - 0.75 + 0.75 * (len / 4)))))) AS subscore FROM (SELECT termid, docid, COUNT(*) AS tf FROM qterms GROUP BY docid, termid) AS term_tf JOIN (SELECT DISTINCT docid FROM qterms) AS cdocs ON term_tf.docid = cdocs.docid JOIN fts_main_documents.docs AS docs ON term_tf.docid = docs.docid JOIN fts_main_documents.dict AS dict ON term_tf.termid = dict.termid) SELECT name, score FROM (SELECT docid, SUM(subscore) AS score FROM subscores GROUP BY docid) AS scores JOIN fts_main_documents.docs AS docs ON scores.docid = docs.docid ORDER BY score DESC LIMIT 1000;

CREATE MACRO fts_match(docname, query_string) AS docname IN (
WITH ppterms AS (SELECT unnest(string_split_regex(regexp_replace(lower(strip_accents(query_string)), '[^a-z]', ' ', 'g'), '\s+')) AS term),
qtermids AS (SELECT termid FROM fts_main_documents.dict AS dict, ppterms WHERE dict.term = ppterms.term),
qterms AS (SELECT termid, docid FROM fts_main_documents.terms AS terms WHERE termid IN (SELECT qtermids.termid FROM qtermids)),
subscores AS (
SELECT docs.docid, len, term_tf.termid,
tf, df, (log((3 - df + 0.5) / (df + 0.5))* ((tf * (1.2 + 1)/(tf + 1.2 * (1 - 0.75 + 0.75 * (len / 4)))))) AS subscore
FROM (SELECT termid, docid, COUNT(*) AS tf FROM qterms
GROUP BY docid, termid) AS term_tf
JOIN (SELECT docid FROM qterms
GROUP BY docid) -- HAVING COUNT(DISTINCT termid) = 3)
AS cdocs ON term_tf.docid = cdocs.docid
JOIN fts_main_documents.docs AS docs ON term_tf.docid = docs.docid
JOIN fts_main_documents.dict AS dict ON term_tf.termid = dict.termid)
SELECT name FROM (SELECT docid, sum(subscore) AS score
FROM subscores GROUP BY docid) AS scores JOIN fts_main_documents.docs AS docs ON
scores.docid = docs.docid ORDER BY score DESC LIMIT 1000);

SELECT * FROM documents WHERE FTS_MATCH(id, 'QUÁCK BÁRK');

CREATE MACRO mywindow(k,v) AS SUM(v) OVER (PARTITION BY k);

WITH grouped AS (SELECT range % 3 AS grp, range AS val FROM RANGE(0, 500)) SELECT DISTINCT grp, MYWINDOW(grp, val) FROM grouped ORDER BY grp;

CREATE MACRO my_first_macro() AS (84);

CREATE TEMPORARY MACRO my_second_macro() AS my_first_macro() + 42;

SELECT MY_SECOND_MACRO();

PRAGMA enable_verification;

CREATE TABLE integers (a INT);

INSERT INTO integers VALUES (1);

CREATE MACRO parameterized_cte(a) AS (WITH cte AS (SELECT a AS answer) SELECT answer FROM cte);

SELECT PARAMETERIZED_CTE(42);

CREATE MACRO in_with_cte(i) AS i IN (WITH cte AS (SELECT a AS answer FROM integers) SELECT answer FROM cte);

SELECT IN_WITH_CTE(1);

SELECT IN_WITH_CTE(2);

CREATE MACRO plus42(a) AS (WITH cte AS (SELECT 42 AS answer) SELECT answer + a FROM cte);

SELECT PLUS42(42);

SELECT PLUS42(a) FROM integers;

SELECT PLUS42(3) + a FROM integers;

SELECT PLUS42(42) + answer FROM cte;

CREATE MACRO plus1(a) AS (WITH tbl AS (SELECT 1 AS one) SELECT one + a FROM tbl);

SELECT PLUS1(3);

SELECT PLUS42(a) + PLUS1(a) FROM integers;

CREATE MACRO deep_cte(param) AS (
WITH cte1 AS (
WITH cte2 AS (
WITH cte3 AS (
WITH cte4 AS (
SELECT param AS d
)
SELECT d AS c FROM cte4
)
SELECT c AS b FROM cte3
)
SELECT b AS a FROM cte2
)
SELECT a FROM cte1
);

SELECT DEEP_CTE(42);

SET storage_compatibility_version = 'v0.10.2';

PRAGMA enable_verification;

CREATE MACRO f(x := NULL) AS x+1;

SELECT F();

SELECT F(x := 41);

SELECT F(x := (SELECT 41));

SELECT F(x := (SELECT 1 AS a));

SELECT F(x := a) FROM (SELECT 41) AS t(a);

CREATE TABLE t AS SELECT 41 AS a;

SELECT F(x := a) FROM t;

create macro my_macro1(a, b := a) as a + b;

CREATE TABLE integers (a INT);

create macro my_macro2(a := i) as (
select min(a) from integers
);

INSERT INTO integers VALUES (5), (10), (13);

SELECT MY_MACRO2(can_not_be_empty);

DROP TABLE integers;

SELECT MY_MACRO2(5);

CREATE TABLE t1 (a INT, b INT);

CREATE TABLE t2 (c INT, d INT);

CREATE OR REPLACE MACRO eq(x := NULL, y := NULL) AS x = y;

INSERT INTO t1 VALUES (1, 1), (1, 2), (2, 2), (3, 4);

INSERT INTO t2 VALUES (4, 1), (2, 10), (6, 2), (2, 6);

SELECT * FROM t1 AS t1_alias INNER JOIN (SELECT * FROM t2) AS t2_alias ON (EQ(x := t1_alias.a, y := t2_alias.c));

SELECT * FROM t1 AS t1_alias INNER JOIN (SELECT * FROM t2) AS t2_alias ON (EQ(a := t1_alias.a, c := t2_alias.c));

PRAGMA enable_verification;

CREATE MACRO f(x := NULL) AS (
x
);

SELECT F();

SELECT F(x := 42);

CREATE TABLE tbl AS SELECT 42 AS i;

SELECT F(x := i) FROM tbl;

SELECT F(x := j) FROM tbl;

SELECT F(x := CAST('42' AS INT));

SELECT F(x := 42 IS NULL);

ATTACH '__TEST_DIR__/macro_default_arg.db' (STORAGE_VERSION 'v1.0.0');

USE macro_default_arg;

SET enable_macro_dependencies = TRUE;

PRAGMA enable_verification;

CREATE MACRO f(x := NULL) AS x+1;

SELECT F();

SELECT F(x := 41);

SELECT F(x := (SELECT 41));

SELECT F(x := (SELECT 1 AS a));

SELECT F(x := a) FROM (SELECT 41) AS t(a);

CREATE TABLE t AS SELECT 41 AS a;

SELECT F(x := a) FROM t;

create macro my_macro1(a, b := a) as a + b;

CREATE TABLE integers (a INT);

create macro my_macro2(a := i) as (
select min(a) from integers
);

INSERT INTO integers VALUES (5), (10), (13);

SELECT MY_MACRO2(can_not_be_empty);

DROP TABLE integers;

DROP TABLE integers CASCADE;

SELECT MY_MACRO2(5);

CREATE TABLE t1 (a INT, b INT);

CREATE TABLE t2 (c INT, d INT);

CREATE OR REPLACE MACRO eq(x := NULL, y := NULL) AS x = y;

INSERT INTO t1 VALUES (1, 1), (1, 2), (2, 2), (3, 4);

INSERT INTO t2 VALUES (4, 1), (2, 10), (6, 2), (2, 6);

SELECT * FROM t1 AS t1_alias INNER JOIN (SELECT * FROM t2) AS t2_alias ON (EQ(x := t1_alias.a, y := t2_alias.c));

SELECT * FROM t1 AS t1_alias INNER JOIN (SELECT * FROM t2) AS t2_alias ON (EQ(a := t1_alias.a, c := t2_alias.c));

create or replace macro my_macro(a:=true) as a;

SELECT MY_MACRO();

create or replace macro my_macro(a:=false) as a;

SELECT MY_MACRO();

create or replace macro my_macro(a:={duck:42}) as a;

SELECT MY_MACRO();

create or replace macro my_macro(a:=[42]) as a;

SELECT MY_MACRO();

PRAGMA enable_verification;

CREATE MACRO multi_add
() AS 0,
(a) AS a,
(a, b) AS a + b,
(a, b, c) AS  a + b + c,
(a, b, c, d) AS  a + b + c + d,
(a, b, c, d, e) AS  a + b + c + d + e;

SELECT MULTI_ADD(), MULTI_ADD(42), MULTI_ADD(42, 1), MULTI_ADD(42, 1, 1), MULTI_ADD(42, 1, 1, 1), MULTI_ADD(42, 1, 1, 1, 1);

SELECT MULTI_ADD(1, 1, 1, 1, 1, 1, 1, 1, 1, 1);

CREATE MACRO arithmetic
(a, b, mult := 1) AS (a + b) * mult,
(a, b, c, division := 1) AS  (a + b + c) / division;

SELECT ARITHMETIC(42, 84), ARITHMETIC(42, 84, mult := 10), ARITHMETIC(100, 200, 300), ARITHMETIC(100, 200, 300, division := 10);

CREATE MACRO generate_numbers
(a, b) AS TABLE (SELECT * FROM range(a + b) t(i)),
(a, b, c, mult := 1) AS TABLE (SELECT * FROM range((a + b + c) * mult) t(i));

SELECT COUNT(*) FROM GENERATE_NUMBERS(20, 10);

SELECT COUNT(*) FROM GENERATE_NUMBERS(1, 2, 2, mult := 5);

SELECT function_name, parameters FROM DUCKDB_FUNCTIONS() WHERE function_name IN ('arithmetic', 'multi_add', 'generate_numbers') ORDER BY function_name, LENGTH(parameters);

CREATE MACRO ambiguous_macro
(a) AS a,
(a) AS a + 1;

CREATE MACRO error_in_definition
(a) AS a,
(a, b) AS a + y;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

create macro test(a, b) as a + b;

SELECT TEST(4, 2);

create or replace macro test(a, b) as a + a;

SELECT TEST(4, 2);

create macro if not exists test(a, b) as a + b;

SELECT TEST(4, 2);

drop macro test;

create temporary macro test(a, b) as a + b;

SELECT TEST(4, 2);

create or replace temporary macro test(a, b) as a + a;

SELECT TEST(4, 2);

create temporary macro if not exists test(a, b) as a + b;

SELECT TEST(4, 2);

SELECT TEST(4, 2);

SET enable_macro_dependencies = TRUE;

CREATE MACRO "sum"(x) AS (CASE WHEN sum(x) IS NULL THEN 0 ELSE sum(x) END);

SELECT SUM(1);

SELECT SUM(1) WHERE 42 = 0;

DROP MACRO sum;

CREATE MACRO "sum"(x) AS (CASE WHEN system.main.sum(x) IS NULL THEN 0 ELSE system.main.sum(x) END);

SELECT SUM(1);

SELECT SUM(1) WHERE 42 = 0;

create macro m1(a) as a+1;

create macro m2(a) as m1(a)+1;

create or replace macro m1(a) as m2(a)+1;

create macro m3(a) as a+1;

create macro m4(a) as table select m3(a);

create or replace macro m3(a) as (from m4(42));

CREATE MACRO "sum"(x) AS (CASE WHEN sum(x) IS NULL THEN 0 ELSE sum(x) END);

SELECT SUM(1);

SELECT SUM(1) WHERE 42 = 0;

DROP MACRO sum;

CREATE MACRO "sum"(x) AS (CASE WHEN system.main.sum(x) IS NULL THEN 0 ELSE system.main.sum(x) END);

SELECT SUM(1);

SELECT SUM(1) WHERE 42 = 0;

create macro m1(a) as a+1;

create macro m2(a) as m1(a)+1;

create or replace macro m1(a) as m2(a)+1;

create macro m3(a) as a+1;

create macro m4(a) as table select m3(a);

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (42), (42);

CREATE SEQUENCE seq;

CREATE MACRO in_next_n(x, s, n) AS x IN (
WITH RECURSIVE cte AS (
SELECT nextval(s) AS nxt, 1 AS iter
UNION ALL
SELECT nextval(s), iter + 1
FROM cte
WHERE iter < n
)
SELECT nxt
FROM cte
);

SELECT IN_NEXT_N(3, 'seq', 5);

SELECT IN_NEXT_N(3, 'seq', 5);

SELECT IN_NEXT_N(12, 'seq', 5);

CREATE MACRO in_next_n2(x, s, n) AS x IN (
WITH RECURSIVE cte AS (
SELECT nextval(s) AS nxt, n AS n
UNION ALL
SELECT nextval(s), cte.n - 1
FROM cte
WHERE cte.n > 1
)
SELECT nxt
FROM cte
);

SELECT IN_NEXT_N2(17, 'seq', 5);

DROP SEQUENCE seq;

CREATE SEQUENCE seq1;

CREATE SEQUENCE seq2;

CREATE MACRO test(s1, s2, x) AS nextval(s1) + nextval(s2) + x;

SELECT TEST('seq1', 'seq2', i) FROM integers;

DROP SEQUENCE seq1;

DROP SEQUENCE seq2;

CREATE MACRO add_macro(a, b) AS a + b;

PRAGMA enable_verification;

CREATE TABLE integers (a INT);

INSERT INTO integers VALUES (1);

CREATE MACRO one() AS (SELECT 1);

SELECT ONE();

SELECT ONE(1);

SELECT ONE(NULL);

DROP MACRO one;

CREATE MACRO having_macro(x) AS (SELECT * FROM integers GROUP BY a HAVING a = x);

SELECT HAVING_MACRO(1);

SELECT HAVING_MACRO(6);

CREATE MACRO union_macro(x, y, z) AS (SELECT x IN (SELECT y UNION ALL SELECT z));

SELECT UNION_MACRO(1, 2, 3);

SELECT UNION_MACRO(1, 2, 1);

SELECT UNION_MACRO(1, 1, 2);

CREATE MACRO in_expression_list(x, y, z) AS (SELECT x IN (VALUES (y), (z)));

SELECT IN_EXPRESSION_LIST(1, 2, 3);

SELECT IN_EXPRESSION_LIST(1, 2, 1);

SELECT IN_EXPRESSION_LIST(1, 1, 2);

CREATE FUNCTION two() AS (SELECT 2);

SELECT TWO();

DROP FUNCTION two;

CREATE MACRO add_macro(a) AS a + b;

CREATE MACRO add_macro(a, b) AS a + b;

SELECT ADD_MACRO(a, a) FROM integers;

CREATE TABLE floats (b REAL);

INSERT INTO floats VALUES (0.5);

SELECT ADD_MACRO(a, 2) + ADD_MACRO(3, b) FROM integers, floats;

CREATE MACRO string_split(a,b) AS a + b;

SELECT STR_SPLIT(1, 2);

CREATE MACRO IFELSE(a,b,c) AS CASE WHEN a THEN b ELSE c END;

SELECT IFELSE(1, 'true', 'false');

SELECT IFELSE(1, 'true', 'false');

SELECT IFELSE(0, 'true', 'false');

SELECT IFELSE(a = 1, 'true', 'false') FROM integers;

SELECT IFELSE(a = 0, 'true', 'false') FROM integers;

SELECT IFELSE();

SELECT IFELSE(1);

SELECT IFELSE(1, 2);

SELECT IFELSE(1, 2, 3, 4);

CREATE MACRO IFELSE(a,b) AS a+b;

CREATE MACRO ifelse(a,b) AS a+b;

SELECT IFELSE('1', 'random', CAST(RANDOM() AS TEXT));

CREATE SCHEMA macros;

CREATE MACRO macros.add_macro(a, b) AS a + b;

SELECT macros.add_macro(40, 2);

CREATE MACRO conflict(i, i) AS i + 1;

CREATE MACRO myavg(x) AS SUM(x) / COUNT(x);

INSERT INTO integers VALUES (21), (41);

SELECT MYAVG(a) FROM integers;

CREATE MACRO weird_avg(x) AS (MIN(x) + MAX(x)) / COUNT(x);

SELECT WEIRD_AVG(a) FROM integers;

CREATE MACRO star() AS *;

CREATE MACRO conflict(a, a := 1) AS a + a;

CREATE MACRO add_default5(a, b := 5) AS a + b;

SELECT ADD_DEFAULT5(3, 6);

SELECT ADD_DEFAULT5(3);

SELECT ADD_DEFAULT5(3, b := 6);

SELECT ADD_DEFAULT5(b := 6, 3);

CREATE MACRO wrong_order(a, b := 3, c);

CREATE MACRO wrong_order(a := 3, b);

CREATE MACRO select_plus_floats(a, f := b) AS (SELECT a + f FROM floats);

CREATE MACRO wrong_type(s='not a float') AS (SELECT b + s FROM floats);

CREATE MACRO two_default_params(a := 4, a := 2) AS a + a;

CREATE MACRO two_default_params(a := 4, b := 2) AS a + b;

SELECT TWO_DEFAULT_PARAMS();

SELECT TWO_DEFAULT_PARAMS(a := 5);

SELECT TWO_DEFAULT_PARAMS(b := 3);

SELECT TWO_DEFAULT_PARAMS(a := 5, a := 3);

SELECT TWO_DEFAULT_PARAMS(b := 5, b := 3);

CREATE MACRO macros.add_macro(a, b) AS a + b;

CREATE MACRO my_macro(a.b) AS 42;

CREATE MACRO my_macro(a.b.c) AS 42;

CREATE MACRO my_macro(a) AS 42;

SELECT MY_MACRO(x := 42);

SELECT MY_MACRO(a := 42, a := 42);

create macro zz1(x) as (select 10+x);

create macro zz2(x) as 20+x;

SELECT ZZ1(1), ZZ2(2);

SELECT function_name, parameters, macro_definition FROM DUCKDB_FUNCTIONS() WHERE function_name LIKE 'zz%' AND macro_definition LIKE '%macro_parameters%';

PRAGMA enable_verification;

CREATE TABLE integers (a INT);

INSERT INTO integers VALUES (1);

CREATE MACRO subquery(a) AS (SELECT a);

SELECT SUBQUERY(1);

SELECT SUBQUERY(NULL);

SELECT SUBQUERY(3) + a FROM integers;

SELECT SUBQUERY(a) FROM integers;

CREATE MACRO a1(a) AS (SELECT a + a FROM integers);

CREATE MACRO a1(b) AS (SELECT a + a FROM integers);

SELECT A1(3);

SELECT A1(3) + a FROM integers;

CREATE MACRO a2(a) AS (SELECT i.a + a FROM integers i);

CREATE MACRO a2(b) AS (SELECT i.a + b FROM integers i);

SELECT A2(3);

PRAGMA enable_verification;

CREATE TABLE test_tbl (id INT, name TEXT);

CREATE TABLE test2_tbl (id INT, name TEXT);

CREATE TABLE greek_tbl (id INT, name TEXT);

INSERT INTO test_tbl VALUES (1, 'tom'), (2, 'dick'), (3, 'harry'), (4, 'mary'), (5, 'mungo'), (6, 'midge');

INSERT INTO test_tbl VALUES (20, 'andrew'), (21, 'boris'), (22, 'Caleb'), (23, 'david'), (24, 'evan');

INSERT INTO greek_tbl VALUES (1, 'alpha'), (2, 'beta'), (3, 'gamma'), (4, 'delta'), (5, 'epsilon'), (6, 'zeta'), (7, 'eta'), (8, 'theta'), (9, 'iota'), (10, 'kappa');

CREATE MACRO xt(a,_name) as TABLE SELECT * FROM test_tbl WHERE(id>=a or name=_name);

CREATE MACRO xt2(a,_name) as TABLE SELECT * FROM test_tbl WHERE(id>=a or name like _name);

CREATE MACRO sgreek(a,b,c) as TABLE SELECT a,b FROM greek_tbl WHERE(id >= c);

(SELECT * FROM XT(1, 'tom') UNION SELECT * FROM XT2(1, '%%%')) INTERSECT SELECT * FROM XT(100, 'midge');

(SELECT * FROM XT(1, 'tom') EXCEPT SELECT * FROM XT(20, 'tom')) INTERSECT SELECT * FROM XT(100, 'harry');

SELECT * FROM XT(200, 'andrew');

SELECT * FROM XT2(100, 'm%');

CREATE MACRO xtm(cmp_str) as TABLE SELECT id, name FROM test_tbl  WHERE( name similar to cmp_str);

SELECT * FROM XTM('m.*');

CREATE MACRO  xt_reg(cmp) as TABLE SELECT * FROM test_tbl WHERE regexp_matches(name ,cmp );

SELECT * FROM XT_REG('^m');

CREATE MACRO   cmp(a,m) as regexp_matches(a,m) or a similar to m;

CREATE MACRO gm(m) as TABLE SELECT * FROM  greek_tbl WHERE cmp(name,m);

SELECT * FROM GM('^m');

CREATE MACRO xt(a,b) as a+b;

DROP MACRO TABLE xt;

CREATE MACRO xt(id, imax) as TABLE SELECT id,name FROM test_tbl WHERE id<=imax;

SELECT * FROM XT(id, 1);

CREATE MACRO range(a,b) as TABLE select a,b from test_tbl;

SELECT * FROM test_tbl WHERE id >= (SELECT MAX(id) FROM XT(id, 30));

SELECT * FROM greek_tbl WHERE id <= (SELECT MIN(id) FROM XT(id, 30));

SELECT schema_name, function_name, function_type, description, return_type, parameters, parameter_types, varargs, macro_definition FROM DUCKDB_FUNCTIONS() WHERE function_type = 'table_macro' AND (function_name = 'sgreek' OR function_name = 'xt') ORDER BY function_name;

CREATE TABLE cards_tbl (val INT, name TEXT, suit TEXT);

INSERT INTO cards_tbl VALUES (1, 'ace', 'clubs'), (11, 'jack', 'clubs'), (12, 'queen', 'clubs'), (13, 'king', 'clubs');

INSERT INTO cards_tbl VALUES (1, 'ace', 'diamonds'), (11, 'jack', 'diamonds'), (12, 'queen', 'diamonds'), (13, 'king', 'diamonds');

INSERT INTO cards_tbl VALUES (1, 'ace', 'hearts'), (11, 'jack', 'hearts'), (12, 'queen', 'hearts'), (13, 'king', 'hearts');

INSERT INTO cards_tbl VALUES (1, 'ace', 'spades'), (11, 'jack', 'spades'), (12, 'queen', 'spades'), (13, 'king', 'spades');

CREATE MACRO card_select(_val_min:=1, _val_max:=1,  _name:='%', _suit:='%')
as TABLE SELECT * FROM  cards_tbl WHERE val>=_val_min AND val<=_val_max AND name like  _name AND suit like _suit;

SELECT DISTINCT val FROM CARD_SELECT();

SELECT * FROM CARD_SELECT(_suit := 'clubs');

SELECT * FROM CARD_SELECT(_name := 'king', _val_max := 13) ORDER BY suit;

SELECT COUNT(suit) FROM CARD_SELECT() GROUP BY ALL;

SELECT * FROM CARD_SELECT(_name := 'king', _val_max := 13, _suit := 'hearts', _val_min := 10);

CREATE MACRO card_select_args(_val_min, _val_max,  _name:='%', _suit:='%')
as TABLE SELECT * FROM  cards_tbl WHERE val>=_val_min AND val<=_val_max AND name like  _name AND suit like _suit;

SELECT * FROM CARD_SELECT_ARGS(_name := 'king', 1, 13);

SELECT suit FROM CARD_SELECT_ARGS(1, 13, _name := 'king') ORDER BY suit;

CREATE MACRO card_dfl() as TABLE SELECT DISTINCT suit FROM cards_tbl where suit='hearts';

SELECT * FROM CARD_DFL();

CREATE MACRO  sc(aorder, border, nlimit) AS TABLE SELECT * FROM cards_tbl ORDER BY aorder,border LIMIT nlimit;

SELECT * FROM SC(name, suit, 4);

CREATE MACRO sc2(dlimit, noffset) AS TABLE SELECT DISTINCT  suit from cards_tbl order by all limit dlimit% offset noffset;

SELECT * FROM SC2(50.0, 2);

CREATE MACRO sc3(col) AS TABLE SELECT DISTINCT ON (col) col FROM cards_tbl ORDER BY col;

SELECT * FROM SC3(name);

SELECT * FROM SC3(suit);

CREATE MACRO card_no_tbl() as TABLE SELECT * FROM suit_tbl;

SELECT * FROM CARD_NO_TBL();

CREATE MACRO card_select_args(_val_min, _name:='%', _suit:='%', _val_max)
as TABLE SELECT * FROM  cards_tbl WHERE val>=_val_min AND val<=_val_max AND name like  _name AND suit like _suit;

CREATE MACRO my_values(m,s) as TABLE select * from (values  (1.0*m+s,'adam'), (2.0*m+s,'ben'),
(3.0*m+s,'cris'), (4.0*m+s,'desmond'),(5.0*m+s, 'eric'));

SELECT SUM(col0) FROM MY_VALUES(10.0, 5.0);

CREATE MACRO my_values_union(m1,s1,m2,s2) as TABLE select * from my_values(m1,s1) UNION select * from my_values(m2,s2);

SELECT MAX(col0) FROM MY_VALUES_UNION(1.0, 2.0, 3.0, 20.0);

CREATE MACRO dates_between(date_min, date_max, ilimit:=100) AS TABLE WITH dates(date) AS
(SELECT * FROM range(date '0000-01-01', date '3000-01-01', interval '1' month))
SELECT * FROM dates WHERE date between date_min AND date_max;

SELECT * FROM DATES_BETWEEN('2021-01-01', '2021-02-04');

CREATE MACRO fibonacci(n0, n1, nlimit, noffset) AS TABLE
WITH RECURSIVE fib AS (
SELECT 1 AS n,
n0::bigint AS "fibₙ",
n1::bigint AS "fibₙ₊₁"
UNION ALL
SELECT n+1,
"fibₙ₊₁",
"fibₙ" + "fibₙ₊₁"
FROM fib
)
SELECT n, "fibₙ" FROM fib
LIMIT nlimit OFFSET noffset;

SELECT * FROM FIBONACCI(1, 2, 5, 10);

SET default_null_order = 'nulls_first';

CREATE TABLE car_pool (id /* define columns (name / type / default value / nullable) */ DECIMAL(18, 3), producer TEXT, model TEXT, yyyy DECIMAL(18, 3) CHECK (yyyy BETWEEN 1970 AND 2020), counter DECIMAL(18, 3) CHECK (counter >= 0), CONSTRAINT car_pool_pk PRIMARY KEY (id));

INSERT INTO car_pool VALUES (1, 'VW', 'Golf', 2005, 5), (2, 'VW', 'Golf', 2006, 2), (3, 'VW', 'Golf', 2007, 3), (4, 'VW', 'Golf', 2008, 3), (5, 'VW', 'Passat', 2005, 5), (6, 'VW', 'Passat', 2006, 1), (7, 'VW', 'Beetle', 2005, 1), (8, 'VW', 'Beetle', 2006, 2), (9, 'VW', 'Beetle', 2008, 4), (10, 'Toyota', 'Corolla', 2005, 4), (11, 'Toyota', 'Corolla', 2006, 3), (12, 'Toyota', 'Corolla', 2007, 2), (13, 'Toyota', 'Corolla', 2008, 4), (14, 'Toyota', 'Prius', 2005, 1), (15, 'Toyota', 'Prius', 2006, 1), (16, 'Toyota', 'Hilux', 2005, 1), (17, 'Toyota', 'Hilux', 2006, 1), (18, 'Toyota', 'Hilux', 2008, 1);

CREATE MACRO car_pool_cube(g1, g2, hcnt:=1) AS
TABLE SELECT g1, g2, sum(counter) AS cnt  FROM car_pool
GROUP BY CUBE(g1, g2) HAVING cnt >= hcnt order by g1 NULLS LAST, g2 NULLS LAST;

SELECT * FROM CAR_POOL_CUBE(producer, model, hcnt := 4.0);

CREATE MACRO car_pool_rollup(g1, g2, hcnt:=1) AS
TABLE SELECT g1, g2, sum(counter) AS cnt  FROM car_pool
GROUP BY ROLLUP(g1, g2) HAVING cnt >= hcnt order by g1, g2;

SELECT * FROM CAR_POOL_ROLLUP(model, yyyy, hcnt := 4);

CREATE MACRO car_pool_groups(g1, g2, hcnt:=1) AS
TABLE SELECT g1, g2, sum(counter) AS cnt  FROM car_pool
GROUP BY  (g1, g2) HAVING cnt >= hcnt order by g1, g2;

SELECT * FROM CAR_POOL_GROUPS(model, yyyy, hcnt := 2);

PRAGMA enable_verification;

CREATE OR REPLACE MACRO my_agg(x) AS SUM(CASE WHEN x THEN 1 END);

SELECT MY_AGG(range) FROM RANGE(0, 2);

SELECT MY_AGG(range) OVER () FROM RANGE(0, 2);

CREATE OR REPLACE MACRO my_func(x) AS mod(x, 2);

SELECT MY_FUNC(range) FROM RANGE(0, 2);

SELECT MY_FUNC(range) OVER () FROM RANGE(0, 2);

CREATE OR REPLACE MACRO my_case(x) AS (CASE WHEN x THEN 1 END);

SELECT MY_CASE(range) FROM RANGE(0, 2);

SELECT MY_CASE(range) OVER () FROM RANGE(0, 2);

CREATE SEQUENCE minseq;

SELECT NEXTVAL('minseq') FROM GENERATE_SERIES(0, 20);

CREATE SEQUENCE xx;

SELECT NEXTVAL('xx');

SELECT NEXTVAL('xx');

CREATE SEQUENCE seq1;

SELECT NEXTVAL('seq1') FROM GENERATE_SERIES(0, 20);

CREATE SEQUENCE seq2;

SELECT NEXTVAL('seq2') FROM GENERATE_SERIES(0, 20);

CREATE SEQUENCE seq3;

SELECT NEXTVAL('seq3') FROM GENERATE_SERIES(0, 20);

CREATE SEQUENCE seq4;

SELECT NEXTVAL('seq4') FROM GENERATE_SERIES(0, 20);

CREATE SEQUENCE seq5;

SELECT NEXTVAL('seq5') FROM GENERATE_SERIES(0, 20);

CREATE SEQUENCE seq6;

SELECT NEXTVAL('seq6') FROM GENERATE_SERIES(0, 20);

CREATE SEQUENCE seq7;

SELECT NEXTVAL('seq7') FROM GENERATE_SERIES(0, 20);

CREATE SEQUENCE my_seq;

SELECT NEXTVAL('my_seq');

SELECT last_value FROM DUCKDB_SEQUENCES();

CREATE SEQUENCE seq;

CREATE SEQUENCE seq;

CREATE SEQUENCE IF NOT EXISTS seq;

SELECT NEXTVAL('seq');

CREATE OR REPLACE SEQUENCE seq;

SELECT NEXTVAL('seq');

SELECT CURRVAL('seq');

SELECT CURRVAL('seq');

SELECT NEXTVAL('seq');

SELECT CURRVAL('seq');

SELECT CURRVAL('seq');

SELECT NEXTVAL('seq'), NEXTVAL('seq');

SELECT NEXTVAL(NULL);

SELECT CURRVAL(NULL);

SELECT NEXTVAL(a) FROM (VALUES ('seq'), (NULL), ('seq')) AS tbl1(a);

SELECT CURRVAL(a) FROM (VALUES ('seq'), (NULL), ('seq')) AS tbl1(a);

CREATE SEQUENCE seq;

DROP SEQUENCE seq;

DROP SEQUENCE seq;

DROP SEQUENCE IF EXISTS seq;

CREATE SEQUENCE seq;

SELECT NEXTVAL('seq');

SELECT NEXTVAL('"seq"');

SELECT CURRVAL('"seq"');

DROP SEQUENCE seq;

CREATE SEQUENCE seq;

SELECT NEXTVAL('seq');

SELECT NEXTVAL('seq');

DROP SEQUENCE seq;

CREATE SEQUENCE seq;

SELECT NEXTVAL('seq');

SELECT NEXTVAL('seq');

SELECT NEXTVAL('seq');

DROP SEQUENCE seq;

CREATE SEQUENCE seq;

SELECT NEXTVAL('seq');

SELECT NEXTVAL('seq');

SELECT CURRVAL('seq');

SELECT NEXTVAL('seq');

SELECT CURRVAL('seq');

DROP SEQUENCE seq;

CREATE SEQUENCE seq;

SELECT NEXTVAL('seq');

SELECT CURRVAL('seq');

SELECT NEXTVAL('seq');

SELECT CURRVAL('seq');

SELECT NEXTVAL('seq');

SELECT CURRVAL('seq');

DROP SEQUENCE seq;

CREATE SEQUENCE seq;

SELECT NEXTVAL('seq');

SELECT NEXTVAL('seq');

SELECT NEXTVAL('seq');

SELECT CURRVAL('seq');

SELECT NEXTVAL('seq');

SELECT CURRVAL('seq');

DROP SEQUENCE seq;

CREATE SEQUENCE seq;

SELECT NEXTVAL('seq');

SELECT NEXTVAL('seq');

SELECT NEXTVAL('seq');

SELECT NEXTVAL('seq');

DROP SEQUENCE seq;

CREATE SEQUENCE seq;

SELECT NEXTVAL('seq');

SELECT NEXTVAL('seq');

SELECT NEXTVAL('seq');

DROP SEQUENCE seq;

CREATE SEQUENCE seq;

SELECT NEXTVAL('seq');

SELECT NEXTVAL('seq');

SELECT NEXTVAL('seq');

DROP SEQUENCE seq;

CREATE SEQUENCE seq;

SELECT NEXTVAL('seq');

SELECT NEXTVAL('seq');

SELECT NEXTVAL('seq');

DROP SEQUENCE seq;

CREATE SEQUENCE seq;

CREATE SEQUENCE seq;

CREATE SCHEMA a;

CREATE SCHEMA b;

CREATE SEQUENCE a.seq;

CREATE SEQUENCE b.seq;

SELECT NEXTVAL('a.seq'), NEXTVAL('b.seq');

SELECT CURRVAL('a.seq'), CURRVAL('b.seq');

SELECT NEXTVAL('"a"."seq"'), NEXTVAL('"b".seq');

SELECT CURRVAL('"a"."seq"'), CURRVAL('"b".seq');

SELECT NEXTVAL('"a"."seq');

SELECT NEXTVAL('a.b.c.d');

CREATE SEQUENCE seq;

CREATE SEQUENCE seq;

CREATE SEQUENCE seq;

CREATE SEQUENCE seq;

CREATE SEQUENCE seq;

CREATE SEQUENCE seq2;

SELECT NEXTVAL('s' || 'e' || 'q');

DROP SEQUENCE seq;

CREATE SEQUENCE seq;

CREATE TABLE strings (s TEXT);

INSERT INTO strings VALUES ('seq'), ('seq2');

SELECT s, NEXTVAL('seq') FROM strings;

SELECT s, CURRVAL('seq') FROM strings;

SELECT s, NEXTVAL(s) FROM strings;

SELECT s, CURRVAL(s) FROM strings;

INSERT INTO strings VALUES ('nonexistant_seq');

SELECT s, NEXTVAL(s) FROM strings;

CREATE SEQUENCE fresh;

SELECT CURRVAL('fresh');

SELECT NEXTVAL(1 + 1);

SELECT CURRVAL(TRUE);

CREATE SEQUENCE wrongseq NO MAXVALUE MAXVALUE 2;

CREATE SEQUENCE wrongseq;

CREATE SEQUENCE wrongseq;

CREATE SEQUENCE wrongseq;

CREATE SEQUENCE wrongseq;

CREATE SEQUENCE seq;

CREATE TABLE integers (i INT DEFAULT NEXTVAL('seq'));

DROP SEQUENCE seq;

BEGIN;

DROP TABLE integers;

DROP SEQUENCE seq;

CREATE TABLE integers (i INT);

CREATE TABLE IF NOT EXISTS integers AS SELECT i1.i FROM RANGE(0, 10000000000000000) AS i1(i);

CREATE TABLE integers AS SELECT i1.i FROM RANGE(0, 10000000000000000) AS i1(i);

CREATE TABLE t0 (c1 INT DEFAULT ?);

CREATE TABLE t0 (c1 INT CHECK (?));

CREATE TABLE integers ("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" INT);

SELECT "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" FROM integers;

CREATE TABLE integers2 ("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" INT);

SELECT "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" FROM integers2;

PRAGMA enable_verification;

PRAGMA threads = 4;

PRAGMA verify_parallelism;

CREATE TABLE test AS (SELECT GROUP_CONCAT(CAST(range AS TEXT), '🦆 ') AS s, range % 10000 AS xx FROM RANGE(0, 50000) GROUP BY xx);

CREATE TABLE test2 AS (SELECT UNNEST(STR_SPLIT(s, ' ')) FROM test);

SELECT COUNT(*) FROM test2;

CREATE TABLE test3 AS (SELECT * FROM test ORDER BY xx);

SELECT COUNT(*) FROM test3;

PRAGMA enable_verification;

CREATE TABLE test (a INT, b INT);

INSERT INTO test (b) VALUES (3);

INSERT INTO test VALUES (DEFAULT, DEFAULT);

SELECT * FROM test;

DROP TABLE test;

CREATE TABLE test (a INT NOT NULL, b INT);

INSERT INTO test (b) VALUES (3);

DROP TABLE test;

CREATE TABLE test (a INT DEFAULT 1, b INT);

INSERT INTO test (b) VALUES (3);

SELECT * FROM test;

DROP TABLE test;

CREATE TABLE test (a INT DEFAULT 1 + 1, b INT);

INSERT INTO test (b) VALUES (3);

SELECT * FROM test;

DROP TABLE test;

CREATE TABLE test (a INT DEFAULT 1 + 1, b INT);

INSERT INTO test (b) SELECT 3;

SELECT * FROM test;

DROP TABLE test;

CREATE SEQUENCE seq;

CREATE TABLE test (a INT DEFAULT NEXTVAL('seq'), b INT);

INSERT INTO test (b) VALUES (2), (4), (6), (2), (4);

SELECT * FROM test ORDER BY 1;

DROP SEQUENCE seq;

DROP TABLE test;

DROP SEQUENCE seq;

CREATE SEQUENCE seq;

CREATE TABLE test (a INT DEFAULT NEXTVAL('seq'), b INT);

INSERT INTO test (b) VALUES (1);

UPDATE test SET a = "DEFAULT";

SELECT * FROM test ORDER BY 1;

CREATE TABLE test (a INT DEFAULT (SELECT 42), b INT);

CREATE TABLE test (a INT DEFAULT SUM(42), b INT);

CREATE TABLE test (a INT DEFAULT ROW_NUMBER() OVER (), b INT);

CREATE TABLE test (a INT DEFAULT b + 1, b INT);

DROP TABLE test;

CREATE TABLE test (a DOUBLE DEFAULT RANDOM(), b INT);

INSERT INTO test (b) VALUES (1);

INSERT INTO test (b) VALUES (2);

SELECT COUNT(DISTINCT a) FROM test;

PRAGMA enable_verification;

CREATE TABLE x (i INT DEFAULT 1, j INT DEFAULT 2);

CREATE TABLE x (i INT DEFAULT 1, j INT DEFAULT 2);

SELECT * FROM x;

SELECT * FROM x;

SELECT * FROM x;

SELECT * FROM x;

DROP TABLE x;

CREATE TABLE x (i INT PRIMARY KEY DEFAULT 1, j INT DEFAULT 2);

CREATE TABLE x (i INT PRIMARY KEY DEFAULT 1, j INT DEFAULT 2);

CREATE TABLE x (i INT PRIMARY KEY DEFAULT 1, j INT DEFAULT 2);

CREATE TABLE integers (i0 INT, i1 INT, i2 INT, i3 INT, i4 INT, i5 INT, i6 INT, i7 INT, i8 INT, i9 INT, i10 INT, i11 INT, i12 INT, i13 INT, i14 INT, i15 INT, i16 INT, i17 INT, i18 INT, i19 INT, i20 INT, i21 INT, i22 INT, i23 INT, i24 INT, i25 INT, i26 INT, i27 INT, i28 INT, i29 INT, i30 INT, i31 INT, i32 INT, i33 INT, i34 INT, i35 INT, i36 INT, i37 INT, i38 INT, i39 INT, i40 INT, i41 INT, i42 INT, i43 INT, i44 INT, i45 INT, i46 INT, i47 INT, i48 INT, i49 INT, i50 INT, i51 INT, i52 INT, i53 INT, i54 INT, i55 INT, i56 INT, i57 INT, i58 INT, i59 INT, i60 INT, i61 INT, i62 INT, i63 INT, i64 INT, i65 INT, i66 INT, i67 INT, i68 INT, i69 INT, i70 INT, i71 INT, i72 INT, i73 INT, i74 INT, i75 INT, i76 INT, i77 INT, i78 INT, i79 INT, i80 INT, i81 INT, i82 INT, i83 INT, i84 INT, i85 INT, i86 INT, i87 INT, i88 INT, i89 INT, i90 INT, i91 INT, i92 INT, i93 INT, i94 INT, i95 INT, i96 INT, i97 INT, i98 INT, i99 INT, i100 INT, i101 INT, i102 INT, i103 INT, i104 INT, i105 INT, i106 INT, i107 INT, i108 INT, i109 INT, i110 INT, i111 INT, i112 INT, i113 INT, i114 INT, i115 INT, i116 INT, i117 INT, i118 INT, i119 INT, i120 INT, i121 INT, i122 INT, i123 INT, i124 INT, i125 INT, i126 INT, i127 INT, i128 INT, i129 INT, i130 INT, i131 INT, i132 INT, i133 INT, i134 INT, i135 INT, i136 INT, i137 INT, i138 INT, i139 INT, i140 INT, i141 INT, i142 INT, i143 INT, i144 INT, i145 INT, i146 INT, i147 INT, i148 INT, i149 INT, i150 INT, i151 INT, i152 INT, i153 INT, i154 INT, i155 INT, i156 INT, i157 INT, i158 INT, i159 INT, i160 INT, i161 INT, i162 INT, i163 INT, i164 INT, i165 INT, i166 INT, i167 INT, i168 INT, i169 INT, i170 INT, i171 INT, i172 INT, i173 INT, i174 INT, i175 INT, i176 INT, i177 INT, i178 INT, i179 INT, i180 INT, i181 INT, i182 INT, i183 INT, i184 INT, i185 INT, i186 INT, i187 INT, i188 INT, i189 INT, i190 INT, i191 INT, i192 INT, i193 INT, i194 INT, i195 INT, i196 INT, i197 INT, i198 INT, i199 INT, i200 INT, i201 INT, i202 INT, i203 INT, i204 INT, i205 INT, i206 INT, i207 INT, i208 INT, i209 INT, i210 INT, i211 INT, i212 INT, i213 INT, i214 INT, i215 INT, i216 INT, i217 INT, i218 INT, i219 INT, i220 INT, i221 INT, i222 INT, i223 INT, i224 INT, i225 INT, i226 INT, i227 INT, i228 INT, i229 INT, i230 INT, i231 INT, i232 INT, i233 INT, i234 INT, i235 INT, i236 INT, i237 INT, i238 INT, i239 INT, i240 INT, i241 INT, i242 INT, i243 INT, i244 INT, i245 INT, i246 INT, i247 INT, i248 INT, i249 INT, i250 INT, i251 INT, i252 INT, i253 INT, i254 INT, i255 INT, i256 INT, i257 INT, i258 INT, i259 INT, i260 INT, i261 INT, i262 INT, i263 INT, i264 INT, i265 INT, i266 INT, i267 INT, i268 INT, i269 INT, i270 INT, i271 INT, i272 INT, i273 INT, i274 INT, i275 INT, i276 INT, i277 INT, i278 INT, i279 INT, i280 INT, i281 INT, i282 INT, i283 INT, i284 INT, i285 INT, i286 INT, i287 INT, i288 INT, i289 INT, i290 INT, i291 INT, i292 INT, i293 INT, i294 INT, i295 INT, i296 INT, i297 INT, i298 INT, i299 INT, i300 INT, i301 INT, i302 INT, i303 INT, i304 INT, i305 INT, i306 INT, i307 INT, i308 INT, i309 INT, i310 INT, i311 INT, i312 INT, i313 INT, i314 INT, i315 INT, i316 INT, i317 INT, i318 INT, i319 INT, i320 INT, i321 INT, i322 INT, i323 INT, i324 INT, i325 INT, i326 INT, i327 INT, i328 INT, i329 INT, i330 INT, i331 INT, i332 INT, i333 INT, i334 INT, i335 INT, i336 INT, i337 INT, i338 INT, i339 INT, i340 INT, i341 INT, i342 INT, i343 INT, i344 INT, i345 INT, i346 INT, i347 INT, i348 INT, i349 INT, i350 INT, i351 INT, i352 INT, i353 INT, i354 INT, i355 INT, i356 INT, i357 INT, i358 INT, i359 INT, i360 INT, i361 INT, i362 INT, i363 INT, i364 INT, i365 INT, i366 INT, i367 INT, i368 INT, i369 INT, i370 INT, i371 INT, i372 INT, i373 INT, i374 INT, i375 INT, i376 INT, i377 INT, i378 INT, i379 INT, i380 INT, i381 INT, i382 INT, i383 INT, i384 INT, i385 INT, i386 INT, i387 INT, i388 INT, i389 INT, i390 INT, i391 INT, i392 INT, i393 INT, i394 INT, i395 INT, i396 INT, i397 INT, i398 INT, i399 INT, i400 INT, i401 INT, i402 INT, i403 INT, i404 INT, i405 INT, i406 INT, i407 INT, i408 INT, i409 INT, i410 INT, i411 INT, i412 INT, i413 INT, i414 INT, i415 INT, i416 INT, i417 INT, i418 INT, i419 INT, i420 INT, i421 INT, i422 INT, i423 INT, i424 INT, i425 INT, i426 INT, i427 INT, i428 INT, i429 INT, i430 INT, i431 INT, i432 INT, i433 INT, i434 INT, i435 INT, i436 INT, i437 INT, i438 INT, i439 INT, i440 INT, i441 INT, i442 INT, i443 INT, i444 INT, i445 INT, i446 INT, i447 INT, i448 INT, i449 INT, i450 INT, i451 INT, i452 INT, i453 INT, i454 INT, i455 INT, i456 INT, i457 INT, i458 INT, i459 INT, i460 INT, i461 INT, i462 INT, i463 INT, i464 INT, i465 INT, i466 INT, i467 INT, i468 INT, i469 INT, i470 INT, i471 INT, i472 INT, i473 INT, i474 INT, i475 INT, i476 INT, i477 INT, i478 INT, i479 INT, i480 INT, i481 INT, i482 INT, i483 INT, i484 INT, i485 INT, i486 INT, i487 INT, i488 INT, i489 INT, i490 INT, i491 INT, i492 INT, i493 INT, i494 INT, i495 INT, i496 INT, i497 INT, i498 INT, i499 INT, i500 INT, i501 INT, i502 INT, i503 INT, i504 INT, i505 INT, i506 INT, i507 INT, i508 INT, i509 INT, i510 INT, i511 INT, i512 INT, i513 INT, i514 INT, i515 INT, i516 INT, i517 INT, i518 INT, i519 INT, i520 INT, i521 INT, i522 INT, i523 INT, i524 INT, i525 INT, i526 INT, i527 INT, i528 INT, i529 INT, i530 INT, i531 INT, i532 INT, i533 INT, i534 INT, i535 INT, i536 INT, i537 INT, i538 INT, i539 INT, i540 INT, i541 INT, i542 INT, i543 INT, i544 INT, i545 INT, i546 INT, i547 INT, i548 INT, i549 INT, i550 INT, i551 INT, i552 INT, i553 INT, i554 INT, i555 INT, i556 INT, i557 INT, i558 INT, i559 INT, i560 INT, i561 INT, i562 INT, i563 INT, i564 INT, i565 INT, i566 INT, i567 INT, i568 INT, i569 INT, i570 INT, i571 INT, i572 INT, i573 INT, i574 INT, i575 INT, i576 INT, i577 INT, i578 INT, i579 INT, i580 INT, i581 INT, i582 INT, i583 INT, i584 INT, i585 INT, i586 INT, i587 INT, i588 INT, i589 INT, i590 INT, i591 INT, i592 INT, i593 INT, i594 INT, i595 INT, i596 INT, i597 INT, i598 INT, i599 INT, i600 INT, i601 INT, i602 INT, i603 INT, i604 INT, i605 INT, i606 INT, i607 INT, i608 INT, i609 INT, i610 INT, i611 INT, i612 INT, i613 INT, i614 INT, i615 INT, i616 INT, i617 INT, i618 INT, i619 INT, i620 INT, i621 INT, i622 INT, i623 INT, i624 INT, i625 INT, i626 INT, i627 INT, i628 INT, i629 INT, i630 INT, i631 INT, i632 INT, i633 INT, i634 INT, i635 INT, i636 INT, i637 INT, i638 INT, i639 INT, i640 INT, i641 INT, i642 INT, i643 INT, i644 INT, i645 INT, i646 INT, i647 INT, i648 INT, i649 INT, i650 INT, i651 INT, i652 INT, i653 INT, i654 INT, i655 INT, i656 INT, i657 INT, i658 INT, i659 INT, i660 INT, i661 INT, i662 INT, i663 INT, i664 INT, i665 INT, i666 INT, i667 INT, i668 INT, i669 INT, i670 INT, i671 INT, i672 INT, i673 INT, i674 INT, i675 INT, i676 INT, i677 INT, i678 INT, i679 INT, i680 INT, i681 INT, i682 INT, i683 INT, i684 INT, i685 INT, i686 INT, i687 INT, i688 INT, i689 INT, i690 INT, i691 INT, i692 INT, i693 INT, i694 INT, i695 INT, i696 INT, i697 INT, i698 INT, i699 INT, i700 INT, i701 INT, i702 INT, i703 INT, i704 INT, i705 INT, i706 INT, i707 INT, i708 INT, i709 INT, i710 INT, i711 INT, i712 INT, i713 INT, i714 INT, i715 INT, i716 INT, i717 INT, i718 INT, i719 INT, i720 INT, i721 INT, i722 INT, i723 INT, i724 INT, i725 INT, i726 INT, i727 INT, i728 INT, i729 INT, i730 INT, i731 INT, i732 INT, i733 INT, i734 INT, i735 INT, i736 INT, i737 INT, i738 INT, i739 INT, i740 INT, i741 INT, i742 INT, i743 INT, i744 INT, i745 INT, i746 INT, i747 INT, i748 INT, i749 INT, i750 INT, i751 INT, i752 INT, i753 INT, i754 INT, i755 INT, i756 INT, i757 INT, i758 INT, i759 INT, i760 INT, i761 INT, i762 INT, i763 INT, i764 INT, i765 INT, i766 INT, i767 INT, i768 INT, i769 INT, i770 INT, i771 INT, i772 INT, i773 INT, i774 INT, i775 INT, i776 INT, i777 INT, i778 INT, i779 INT, i780 INT, i781 INT, i782 INT, i783 INT, i784 INT, i785 INT, i786 INT, i787 INT, i788 INT, i789 INT, i790 INT, i791 INT, i792 INT, i793 INT, i794 INT, i795 INT, i796 INT, i797 INT, i798 INT, i799 INT, i800 INT, i801 INT, i802 INT, i803 INT, i804 INT, i805 INT, i806 INT, i807 INT, i808 INT, i809 INT, i810 INT, i811 INT, i812 INT, i813 INT, i814 INT, i815 INT, i816 INT, i817 INT, i818 INT, i819 INT, i820 INT, i821 INT, i822 INT, i823 INT, i824 INT, i825 INT, i826 INT, i827 INT, i828 INT, i829 INT, i830 INT, i831 INT, i832 INT, i833 INT, i834 INT, i835 INT, i836 INT, i837 INT, i838 INT, i839 INT, i840 INT, i841 INT, i842 INT, i843 INT, i844 INT, i845 INT, i846 INT, i847 INT, i848 INT, i849 INT, i850 INT, i851 INT, i852 INT, i853 INT, i854 INT, i855 INT, i856 INT, i857 INT, i858 INT, i859 INT, i860 INT, i861 INT, i862 INT, i863 INT, i864 INT, i865 INT, i866 INT, i867 INT, i868 INT, i869 INT, i870 INT, i871 INT, i872 INT, i873 INT, i874 INT, i875 INT, i876 INT, i877 INT, i878 INT, i879 INT, i880 INT, i881 INT, i882 INT, i883 INT, i884 INT, i885 INT, i886 INT, i887 INT, i888 INT, i889 INT, i890 INT, i891 INT, i892 INT, i893 INT, i894 INT, i895 INT, i896 INT, i897 INT, i898 INT, i899 INT, i900 INT, i901 INT, i902 INT, i903 INT, i904 INT, i905 INT, i906 INT, i907 INT, i908 INT, i909 INT, i910 INT, i911 INT, i912 INT, i913 INT, i914 INT, i915 INT, i916 INT, i917 INT, i918 INT, i919 INT, i920 INT, i921 INT, i922 INT, i923 INT, i924 INT, i925 INT, i926 INT, i927 INT, i928 INT, i929 INT, i930 INT, i931 INT, i932 INT, i933 INT, i934 INT, i935 INT, i936 INT, i937 INT, i938 INT, i939 INT, i940 INT, i941 INT, i942 INT, i943 INT, i944 INT, i945 INT, i946 INT, i947 INT, i948 INT, i949 INT, i950 INT, i951 INT, i952 INT, i953 INT, i954 INT, i955 INT, i956 INT, i957 INT, i958 INT, i959 INT, i960 INT, i961 INT, i962 INT, i963 INT, i964 INT, i965 INT, i966 INT, i967 INT, i968 INT, i969 INT, i970 INT, i971 INT, i972 INT, i973 INT, i974 INT, i975 INT, i976 INT, i977 INT, i978 INT, i979 INT, i980 INT, i981 INT, i982 INT, i983 INT, i984 INT, i985 INT, i986 INT, i987 INT, i988 INT, i989 INT, i990 INT, i991 INT, i992 INT, i993 INT, i994 INT, i995 INT, i996 INT, i997 INT, i998 INT, i999 INT, i1000 INT, i1001 INT, i1002 INT, i1003 INT, i1004 INT, i1005 INT, i1006 INT, i1007 INT, i1008 INT, i1009 INT, i1010 INT, i1011 INT, i1012 INT, i1013 INT, i1014 INT, i1015 INT, i1016 INT, i1017 INT, i1018 INT, i1019 INT, i1020 INT, i1021 INT, i1022 INT, i1023 INT, i1024 INT, i1025 INT, i1026 INT, i1027 INT, i1028 INT, i1029 INT, i1030 INT, i1031 INT, i1032 INT, i1033 INT, i1034 INT, i1035 INT, i1036 INT, i1037 INT, i1038 INT, i1039 INT, i1040 INT, i1041 INT, i1042 INT, i1043 INT, i1044 INT, i1045 INT, i1046 INT, i1047 INT, i1048 INT, i1049 INT, i1050 INT, i1051 INT, i1052 INT, i1053 INT, i1054 INT, i1055 INT, i1056 INT, i1057 INT, i1058 INT, i1059 INT, i1060 INT, i1061 INT, i1062 INT, i1063 INT, i1064 INT, i1065 INT, i1066 INT, i1067 INT, i1068 INT, i1069 INT, i1070 INT, i1071 INT, i1072 INT, i1073 INT, i1074 INT, i1075 INT, i1076 INT, i1077 INT, i1078 INT, i1079 INT, i1080 INT, i1081 INT, i1082 INT, i1083 INT, i1084 INT, i1085 INT, i1086 INT, i1087 INT, i1088 INT, i1089 INT, i1090 INT, i1091 INT, i1092 INT, i1093 INT, i1094 INT, i1095 INT, i1096 INT, i1097 INT, i1098 INT, i1099 INT, i1100 INT, i1101 INT, i1102 INT, i1103 INT, i1104 INT, i1105 INT, i1106 INT, i1107 INT, i1108 INT, i1109 INT, i1110 INT, i1111 INT, i1112 INT, i1113 INT, i1114 INT, i1115 INT, i1116 INT, i1117 INT, i1118 INT, i1119 INT, i1120 INT, i1121 INT, i1122 INT, i1123 INT, i1124 INT, i1125 INT, i1126 INT, i1127 INT, i1128 INT, i1129 INT, i1130 INT, i1131 INT, i1132 INT, i1133 INT, i1134 INT, i1135 INT, i1136 INT, i1137 INT, i1138 INT, i1139 INT, i1140 INT, i1141 INT, i1142 INT, i1143 INT, i1144 INT, i1145 INT, i1146 INT, i1147 INT, i1148 INT, i1149 INT, i1150 INT, i1151 INT, i1152 INT, i1153 INT, i1154 INT, i1155 INT, i1156 INT, i1157 INT, i1158 INT, i1159 INT, i1160 INT, i1161 INT, i1162 INT, i1163 INT, i1164 INT, i1165 INT, i1166 INT, i1167 INT, i1168 INT, i1169 INT, i1170 INT, i1171 INT, i1172 INT, i1173 INT, i1174 INT, i1175 INT, i1176 INT, i1177 INT, i1178 INT, i1179 INT, i1180 INT, i1181 INT, i1182 INT, i1183 INT, i1184 INT, i1185 INT, i1186 INT, i1187 INT, i1188 INT, i1189 INT, i1190 INT, i1191 INT, i1192 INT, i1193 INT, i1194 INT, i1195 INT, i1196 INT, i1197 INT, i1198 INT, i1199 INT, i1200 INT, i1201 INT, i1202 INT, i1203 INT, i1204 INT, i1205 INT, i1206 INT, i1207 INT, i1208 INT, i1209 INT, i1210 INT, i1211 INT, i1212 INT, i1213 INT, i1214 INT, i1215 INT, i1216 INT, i1217 INT, i1218 INT, i1219 INT, i1220 INT, i1221 INT, i1222 INT, i1223 INT, i1224 INT, i1225 INT, i1226 INT, i1227 INT, i1228 INT, i1229 INT, i1230 INT, i1231 INT, i1232 INT, i1233 INT, i1234 INT, i1235 INT, i1236 INT, i1237 INT, i1238 INT, i1239 INT, i1240 INT, i1241 INT, i1242 INT, i1243 INT, i1244 INT, i1245 INT, i1246 INT, i1247 INT, i1248 INT, i1249 INT, i1250 INT, i1251 INT, i1252 INT, i1253 INT, i1254 INT, i1255 INT, i1256 INT, i1257 INT, i1258 INT, i1259 INT, i1260 INT, i1261 INT, i1262 INT, i1263 INT, i1264 INT, i1265 INT, i1266 INT, i1267 INT, i1268 INT, i1269 INT, i1270 INT, i1271 INT, i1272 INT, i1273 INT, i1274 INT, i1275 INT, i1276 INT, i1277 INT, i1278 INT, i1279 INT, i1280 INT, i1281 INT, i1282 INT, i1283 INT, i1284 INT, i1285 INT, i1286 INT, i1287 INT, i1288 INT, i1289 INT, i1290 INT, i1291 INT, i1292 INT, i1293 INT, i1294 INT, i1295 INT, i1296 INT, i1297 INT, i1298 INT, i1299 INT, i1300 INT, i1301 INT, i1302 INT, i1303 INT, i1304 INT, i1305 INT, i1306 INT, i1307 INT, i1308 INT, i1309 INT, i1310 INT, i1311 INT, i1312 INT, i1313 INT, i1314 INT, i1315 INT, i1316 INT, i1317 INT, i1318 INT, i1319 INT, i1320 INT, i1321 INT, i1322 INT, i1323 INT, i1324 INT, i1325 INT, i1326 INT, i1327 INT, i1328 INT, i1329 INT, i1330 INT, i1331 INT, i1332 INT, i1333 INT, i1334 INT, i1335 INT, i1336 INT, i1337 INT, i1338 INT, i1339 INT, i1340 INT, i1341 INT, i1342 INT, i1343 INT, i1344 INT, i1345 INT, i1346 INT, i1347 INT, i1348 INT, i1349 INT, i1350 INT, i1351 INT, i1352 INT, i1353 INT, i1354 INT, i1355 INT, i1356 INT, i1357 INT, i1358 INT, i1359 INT, i1360 INT, i1361 INT, i1362 INT, i1363 INT, i1364 INT, i1365 INT, i1366 INT, i1367 INT, i1368 INT, i1369 INT, i1370 INT, i1371 INT, i1372 INT, i1373 INT, i1374 INT, i1375 INT, i1376 INT, i1377 INT, i1378 INT, i1379 INT, i1380 INT, i1381 INT, i1382 INT, i1383 INT, i1384 INT, i1385 INT, i1386 INT, i1387 INT, i1388 INT, i1389 INT, i1390 INT, i1391 INT, i1392 INT, i1393 INT, i1394 INT, i1395 INT, i1396 INT, i1397 INT, i1398 INT, i1399 INT, i1400 INT, i1401 INT, i1402 INT, i1403 INT, i1404 INT, i1405 INT, i1406 INT, i1407 INT, i1408 INT, i1409 INT, i1410 INT, i1411 INT, i1412 INT, i1413 INT, i1414 INT, i1415 INT, i1416 INT, i1417 INT, i1418 INT, i1419 INT, i1420 INT, i1421 INT, i1422 INT, i1423 INT, i1424 INT, i1425 INT, i1426 INT, i1427 INT, i1428 INT, i1429 INT, i1430 INT, i1431 INT, i1432 INT, i1433 INT, i1434 INT, i1435 INT, i1436 INT, i1437 INT, i1438 INT, i1439 INT, i1440 INT, i1441 INT, i1442 INT, i1443 INT, i1444 INT, i1445 INT, i1446 INT, i1447 INT, i1448 INT, i1449 INT, i1450 INT, i1451 INT, i1452 INT, i1453 INT, i1454 INT, i1455 INT, i1456 INT, i1457 INT, i1458 INT, i1459 INT, i1460 INT, i1461 INT, i1462 INT, i1463 INT, i1464 INT, i1465 INT, i1466 INT, i1467 INT, i1468 INT, i1469 INT, i1470 INT, i1471 INT, i1472 INT, i1473 INT, i1474 INT, i1475 INT, i1476 INT, i1477 INT, i1478 INT, i1479 INT, i1480 INT, i1481 INT, i1482 INT, i1483 INT, i1484 INT, i1485 INT, i1486 INT, i1487 INT, i1488 INT, i1489 INT, i1490 INT, i1491 INT, i1492 INT, i1493 INT, i1494 INT, i1495 INT, i1496 INT, i1497 INT, i1498 INT, i1499 INT, i1500 INT, i1501 INT, i1502 INT, i1503 INT, i1504 INT, i1505 INT, i1506 INT, i1507 INT, i1508 INT, i1509 INT, i1510 INT, i1511 INT, i1512 INT, i1513 INT, i1514 INT, i1515 INT, i1516 INT, i1517 INT, i1518 INT, i1519 INT, i1520 INT, i1521 INT, i1522 INT, i1523 INT, i1524 INT, i1525 INT, i1526 INT, i1527 INT, i1528 INT, i1529 INT, i1530 INT, i1531 INT, i1532 INT, i1533 INT, i1534 INT, i1535 INT, i1536 INT, i1537 INT, i1538 INT, i1539 INT, i1540 INT, i1541 INT, i1542 INT, i1543 INT, i1544 INT, i1545 INT, i1546 INT, i1547 INT, i1548 INT, i1549 INT, i1550 INT, i1551 INT, i1552 INT, i1553 INT, i1554 INT, i1555 INT, i1556 INT, i1557 INT, i1558 INT, i1559 INT, i1560 INT, i1561 INT, i1562 INT, i1563 INT, i1564 INT, i1565 INT, i1566 INT, i1567 INT, i1568 INT, i1569 INT, i1570 INT, i1571 INT, i1572 INT, i1573 INT, i1574 INT, i1575 INT, i1576 INT, i1577 INT, i1578 INT, i1579 INT, i1580 INT, i1581 INT, i1582 INT, i1583 INT, i1584 INT, i1585 INT, i1586 INT, i1587 INT, i1588 INT, i1589 INT, i1590 INT, i1591 INT, i1592 INT, i1593 INT, i1594 INT, i1595 INT, i1596 INT, i1597 INT, i1598 INT, i1599 INT, i1600 INT, i1601 INT, i1602 INT, i1603 INT, i1604 INT, i1605 INT, i1606 INT, i1607 INT, i1608 INT, i1609 INT, i1610 INT, i1611 INT, i1612 INT, i1613 INT, i1614 INT, i1615 INT, i1616 INT, i1617 INT, i1618 INT, i1619 INT, i1620 INT, i1621 INT, i1622 INT, i1623 INT, i1624 INT, i1625 INT, i1626 INT, i1627 INT, i1628 INT, i1629 INT, i1630 INT, i1631 INT, i1632 INT, i1633 INT, i1634 INT, i1635 INT, i1636 INT, i1637 INT, i1638 INT, i1639 INT, i1640 INT, i1641 INT, i1642 INT, i1643 INT, i1644 INT, i1645 INT, i1646 INT, i1647 INT, i1648 INT, i1649 INT, i1650 INT, i1651 INT, i1652 INT, i1653 INT, i1654 INT, i1655 INT, i1656 INT, i1657 INT, i1658 INT, i1659 INT, i1660 INT, i1661 INT, i1662 INT, i1663 INT, i1664 INT, i1665 INT, i1666 INT, i1667 INT, i1668 INT, i1669 INT, i1670 INT, i1671 INT, i1672 INT, i1673 INT, i1674 INT, i1675 INT, i1676 INT, i1677 INT, i1678 INT, i1679 INT, i1680 INT, i1681 INT, i1682 INT, i1683 INT, i1684 INT, i1685 INT, i1686 INT, i1687 INT, i1688 INT, i1689 INT, i1690 INT, i1691 INT, i1692 INT, i1693 INT, i1694 INT, i1695 INT, i1696 INT, i1697 INT, i1698 INT, i1699 INT, i1700 INT, i1701 INT, i1702 INT, i1703 INT, i1704 INT, i1705 INT, i1706 INT, i1707 INT, i1708 INT, i1709 INT, i1710 INT, i1711 INT, i1712 INT, i1713 INT, i1714 INT, i1715 INT, i1716 INT, i1717 INT, i1718 INT, i1719 INT, i1720 INT, i1721 INT, i1722 INT, i1723 INT, i1724 INT, i1725 INT, i1726 INT, i1727 INT, i1728 INT, i1729 INT, i1730 INT, i1731 INT, i1732 INT, i1733 INT, i1734 INT, i1735 INT, i1736 INT, i1737 INT, i1738 INT, i1739 INT, i1740 INT, i1741 INT, i1742 INT, i1743 INT, i1744 INT, i1745 INT, i1746 INT, i1747 INT, i1748 INT, i1749 INT, i1750 INT, i1751 INT, i1752 INT, i1753 INT, i1754 INT, i1755 INT, i1756 INT, i1757 INT, i1758 INT, i1759 INT, i1760 INT, i1761 INT, i1762 INT, i1763 INT, i1764 INT, i1765 INT, i1766 INT, i1767 INT, i1768 INT, i1769 INT, i1770 INT, i1771 INT, i1772 INT, i1773 INT, i1774 INT, i1775 INT, i1776 INT, i1777 INT, i1778 INT, i1779 INT, i1780 INT, i1781 INT, i1782 INT, i1783 INT, i1784 INT, i1785 INT, i1786 INT, i1787 INT, i1788 INT, i1789 INT, i1790 INT, i1791 INT, i1792 INT, i1793 INT, i1794 INT, i1795 INT, i1796 INT, i1797 INT, i1798 INT, i1799 INT, i1800 INT, i1801 INT, i1802 INT, i1803 INT, i1804 INT, i1805 INT, i1806 INT, i1807 INT, i1808 INT, i1809 INT, i1810 INT, i1811 INT, i1812 INT, i1813 INT, i1814 INT, i1815 INT, i1816 INT, i1817 INT, i1818 INT, i1819 INT, i1820 INT, i1821 INT, i1822 INT, i1823 INT, i1824 INT, i1825 INT, i1826 INT, i1827 INT, i1828 INT, i1829 INT, i1830 INT, i1831 INT, i1832 INT, i1833 INT, i1834 INT, i1835 INT, i1836 INT, i1837 INT, i1838 INT, i1839 INT, i1840 INT, i1841 INT, i1842 INT, i1843 INT, i1844 INT, i1845 INT, i1846 INT, i1847 INT, i1848 INT, i1849 INT, i1850 INT, i1851 INT, i1852 INT, i1853 INT, i1854 INT, i1855 INT, i1856 INT, i1857 INT, i1858 INT, i1859 INT, i1860 INT, i1861 INT, i1862 INT, i1863 INT, i1864 INT, i1865 INT, i1866 INT, i1867 INT, i1868 INT, i1869 INT, i1870 INT, i1871 INT, i1872 INT, i1873 INT, i1874 INT, i1875 INT, i1876 INT, i1877 INT, i1878 INT, i1879 INT, i1880 INT, i1881 INT, i1882 INT, i1883 INT, i1884 INT, i1885 INT, i1886 INT, i1887 INT, i1888 INT, i1889 INT, i1890 INT, i1891 INT, i1892 INT, i1893 INT, i1894 INT, i1895 INT, i1896 INT, i1897 INT, i1898 INT, i1899 INT, i1900 INT, i1901 INT, i1902 INT, i1903 INT, i1904 INT, i1905 INT, i1906 INT, i1907 INT, i1908 INT, i1909 INT, i1910 INT, i1911 INT, i1912 INT, i1913 INT, i1914 INT, i1915 INT, i1916 INT, i1917 INT, i1918 INT, i1919 INT, i1920 INT, i1921 INT, i1922 INT, i1923 INT, i1924 INT, i1925 INT, i1926 INT, i1927 INT, i1928 INT, i1929 INT, i1930 INT, i1931 INT, i1932 INT, i1933 INT, i1934 INT, i1935 INT, i1936 INT, i1937 INT, i1938 INT, i1939 INT, i1940 INT, i1941 INT, i1942 INT, i1943 INT, i1944 INT, i1945 INT, i1946 INT, i1947 INT, i1948 INT, i1949 INT, i1950 INT, i1951 INT, i1952 INT, i1953 INT, i1954 INT, i1955 INT, i1956 INT, i1957 INT, i1958 INT, i1959 INT, i1960 INT, i1961 INT, i1962 INT, i1963 INT, i1964 INT, i1965 INT, i1966 INT, i1967 INT, i1968 INT, i1969 INT, i1970 INT, i1971 INT, i1972 INT, i1973 INT, i1974 INT, i1975 INT, i1976 INT, i1977 INT, i1978 INT, i1979 INT, i1980 INT, i1981 INT, i1982 INT, i1983 INT, i1984 INT, i1985 INT, i1986 INT, i1987 INT, i1988 INT, i1989 INT, i1990 INT, i1991 INT, i1992 INT, i1993 INT, i1994 INT, i1995 INT, i1996 INT, i1997 INT, i1998 INT, i1999 INT, i2000 INT, i2001 INT, i2002 INT, i2003 INT, i2004 INT, i2005 INT, i2006 INT, i2007 INT, i2008 INT, i2009 INT, i2010 INT, i2011 INT, i2012 INT, i2013 INT, i2014 INT, i2015 INT, i2016 INT, i2017 INT, i2018 INT, i2019 INT, i2020 INT, i2021 INT, i2022 INT, i2023 INT, i2024 INT, i2025 INT, i2026 INT, i2027 INT, i2028 INT, i2029 INT, i2030 INT, i2031 INT, i2032 INT, i2033 INT, i2034 INT, i2035 INT, i2036 INT, i2037 INT, i2038 INT, i2039 INT, i2040 INT, i2041 INT, i2042 INT, i2043 INT, i2044 INT, i2045 INT, i2046 INT, i2047 INT, i2048 INT, i2049 INT, i2050 INT, i2051 INT, i2052 INT, i2053 INT, i2054 INT, i2055 INT, i2056 INT, i2057 INT, i2058 INT, i2059 INT, i2060 INT, i2061 INT, i2062 INT, i2063 INT, i2064 INT, i2065 INT, i2066 INT, i2067 INT, i2068 INT, i2069 INT, i2070 INT, i2071 INT, i2072 INT, i2073 INT, i2074 INT, i2075 INT, i2076 INT, i2077 INT, i2078 INT, i2079 INT, i2080 INT, i2081 INT, i2082 INT, i2083 INT, i2084 INT, i2085 INT, i2086 INT, i2087 INT, i2088 INT, i2089 INT, i2090 INT, i2091 INT, i2092 INT, i2093 INT, i2094 INT, i2095 INT, i2096 INT, i2097 INT, i2098 INT, i2099 INT, i2100 INT, i2101 INT, i2102 INT, i2103 INT, i2104 INT, i2105 INT, i2106 INT, i2107 INT, i2108 INT, i2109 INT, i2110 INT, i2111 INT, i2112 INT, i2113 INT, i2114 INT, i2115 INT, i2116 INT, i2117 INT, i2118 INT, i2119 INT, i2120 INT, i2121 INT, i2122 INT, i2123 INT, i2124 INT, i2125 INT, i2126 INT, i2127 INT, i2128 INT, i2129 INT, i2130 INT, i2131 INT, i2132 INT, i2133 INT, i2134 INT, i2135 INT, i2136 INT, i2137 INT, i2138 INT, i2139 INT, i2140 INT, i2141 INT, i2142 INT, i2143 INT, i2144 INT, i2145 INT, i2146 INT, i2147 INT, i2148 INT, i2149 INT, i2150 INT, i2151 INT, i2152 INT, i2153 INT, i2154 INT, i2155 INT, i2156 INT, i2157 INT, i2158 INT, i2159 INT, i2160 INT, i2161 INT, i2162 INT, i2163 INT, i2164 INT, i2165 INT, i2166 INT, i2167 INT, i2168 INT, i2169 INT, i2170 INT, i2171 INT, i2172 INT, i2173 INT, i2174 INT, i2175 INT, i2176 INT, i2177 INT, i2178 INT, i2179 INT, i2180 INT, i2181 INT, i2182 INT, i2183 INT, i2184 INT, i2185 INT, i2186 INT, i2187 INT, i2188 INT, i2189 INT, i2190 INT, i2191 INT, i2192 INT, i2193 INT, i2194 INT, i2195 INT, i2196 INT, i2197 INT, i2198 INT, i2199 INT, i2200 INT, i2201 INT, i2202 INT, i2203 INT, i2204 INT, i2205 INT, i2206 INT, i2207 INT, i2208 INT, i2209 INT, i2210 INT, i2211 INT, i2212 INT, i2213 INT, i2214 INT, i2215 INT, i2216 INT, i2217 INT, i2218 INT, i2219 INT, i2220 INT, i2221 INT, i2222 INT, i2223 INT, i2224 INT, i2225 INT, i2226 INT, i2227 INT, i2228 INT, i2229 INT, i2230 INT, i2231 INT, i2232 INT, i2233 INT, i2234 INT, i2235 INT, i2236 INT, i2237 INT, i2238 INT, i2239 INT, i2240 INT, i2241 INT, i2242 INT, i2243 INT, i2244 INT, i2245 INT, i2246 INT, i2247 INT, i2248 INT, i2249 INT, i2250 INT, i2251 INT, i2252 INT, i2253 INT, i2254 INT, i2255 INT, i2256 INT, i2257 INT, i2258 INT, i2259 INT, i2260 INT, i2261 INT, i2262 INT, i2263 INT, i2264 INT, i2265 INT, i2266 INT, i2267 INT, i2268 INT, i2269 INT, i2270 INT, i2271 INT, i2272 INT, i2273 INT, i2274 INT, i2275 INT, i2276 INT, i2277 INT, i2278 INT, i2279 INT, i2280 INT, i2281 INT, i2282 INT, i2283 INT, i2284 INT, i2285 INT, i2286 INT, i2287 INT, i2288 INT, i2289 INT, i2290 INT, i2291 INT, i2292 INT, i2293 INT, i2294 INT, i2295 INT, i2296 INT, i2297 INT, i2298 INT, i2299 INT, i2300 INT, i2301 INT, i2302 INT, i2303 INT, i2304 INT, i2305 INT, i2306 INT, i2307 INT, i2308 INT, i2309 INT, i2310 INT, i2311 INT, i2312 INT, i2313 INT, i2314 INT, i2315 INT, i2316 INT, i2317 INT, i2318 INT, i2319 INT, i2320 INT, i2321 INT, i2322 INT, i2323 INT, i2324 INT, i2325 INT, i2326 INT, i2327 INT, i2328 INT, i2329 INT, i2330 INT, i2331 INT, i2332 INT, i2333 INT, i2334 INT, i2335 INT, i2336 INT, i2337 INT, i2338 INT, i2339 INT, i2340 INT, i2341 INT, i2342 INT, i2343 INT, i2344 INT, i2345 INT, i2346 INT, i2347 INT, i2348 INT, i2349 INT, i2350 INT, i2351 INT, i2352 INT, i2353 INT, i2354 INT, i2355 INT, i2356 INT, i2357 INT, i2358 INT, i2359 INT, i2360 INT, i2361 INT, i2362 INT, i2363 INT, i2364 INT, i2365 INT, i2366 INT, i2367 INT, i2368 INT, i2369 INT, i2370 INT, i2371 INT, i2372 INT, i2373 INT, i2374 INT, i2375 INT, i2376 INT, i2377 INT, i2378 INT, i2379 INT, i2380 INT, i2381 INT, i2382 INT, i2383 INT, i2384 INT, i2385 INT, i2386 INT, i2387 INT, i2388 INT, i2389 INT, i2390 INT, i2391 INT, i2392 INT, i2393 INT, i2394 INT, i2395 INT, i2396 INT, i2397 INT, i2398 INT, i2399 INT, i2400 INT, i2401 INT, i2402 INT, i2403 INT, i2404 INT, i2405 INT, i2406 INT, i2407 INT, i2408 INT, i2409 INT, i2410 INT, i2411 INT, i2412 INT, i2413 INT, i2414 INT, i2415 INT, i2416 INT, i2417 INT, i2418 INT, i2419 INT, i2420 INT, i2421 INT, i2422 INT, i2423 INT, i2424 INT, i2425 INT, i2426 INT, i2427 INT, i2428 INT, i2429 INT, i2430 INT, i2431 INT, i2432 INT, i2433 INT, i2434 INT, i2435 INT, i2436 INT, i2437 INT, i2438 INT, i2439 INT, i2440 INT, i2441 INT, i2442 INT, i2443 INT, i2444 INT, i2445 INT, i2446 INT, i2447 INT, i2448 INT, i2449 INT, i2450 INT, i2451 INT, i2452 INT, i2453 INT, i2454 INT, i2455 INT, i2456 INT, i2457 INT, i2458 INT, i2459 INT, i2460 INT, i2461 INT, i2462 INT, i2463 INT, i2464 INT, i2465 INT, i2466 INT, i2467 INT, i2468 INT, i2469 INT, i2470 INT, i2471 INT, i2472 INT, i2473 INT, i2474 INT, i2475 INT, i2476 INT, i2477 INT, i2478 INT, i2479 INT, i2480 INT, i2481 INT, i2482 INT, i2483 INT, i2484 INT, i2485 INT, i2486 INT, i2487 INT, i2488 INT, i2489 INT, i2490 INT, i2491 INT, i2492 INT, i2493 INT, i2494 INT, i2495 INT, i2496 INT, i2497 INT, i2498 INT, i2499 INT, i2500 INT, i2501 INT, i2502 INT, i2503 INT, i2504 INT, i2505 INT, i2506 INT, i2507 INT, i2508 INT, i2509 INT, i2510 INT, i2511 INT, i2512 INT, i2513 INT, i2514 INT, i2515 INT, i2516 INT, i2517 INT, i2518 INT, i2519 INT, i2520 INT, i2521 INT, i2522 INT, i2523 INT, i2524 INT, i2525 INT, i2526 INT, i2527 INT, i2528 INT, i2529 INT, i2530 INT, i2531 INT, i2532 INT, i2533 INT, i2534 INT, i2535 INT, i2536 INT, i2537 INT, i2538 INT, i2539 INT, i2540 INT, i2541 INT, i2542 INT, i2543 INT, i2544 INT, i2545 INT, i2546 INT, i2547 INT, i2548 INT, i2549 INT, i2550 INT, i2551 INT, i2552 INT, i2553 INT, i2554 INT, i2555 INT, i2556 INT, i2557 INT, i2558 INT, i2559 INT, i2560 INT, i2561 INT, i2562 INT, i2563 INT, i2564 INT, i2565 INT, i2566 INT, i2567 INT, i2568 INT, i2569 INT, i2570 INT, i2571 INT, i2572 INT, i2573 INT, i2574 INT, i2575 INT, i2576 INT, i2577 INT, i2578 INT, i2579 INT, i2580 INT, i2581 INT, i2582 INT, i2583 INT, i2584 INT, i2585 INT, i2586 INT, i2587 INT, i2588 INT, i2589 INT, i2590 INT, i2591 INT, i2592 INT, i2593 INT, i2594 INT, i2595 INT, i2596 INT, i2597 INT, i2598 INT, i2599 INT, i2600 INT, i2601 INT, i2602 INT, i2603 INT, i2604 INT, i2605 INT, i2606 INT, i2607 INT, i2608 INT, i2609 INT, i2610 INT, i2611 INT, i2612 INT, i2613 INT, i2614 INT, i2615 INT, i2616 INT, i2617 INT, i2618 INT, i2619 INT, i2620 INT, i2621 INT, i2622 INT, i2623 INT, i2624 INT, i2625 INT, i2626 INT, i2627 INT, i2628 INT, i2629 INT, i2630 INT, i2631 INT, i2632 INT, i2633 INT, i2634 INT, i2635 INT, i2636 INT, i2637 INT, i2638 INT, i2639 INT, i2640 INT, i2641 INT, i2642 INT, i2643 INT, i2644 INT, i2645 INT, i2646 INT, i2647 INT, i2648 INT, i2649 INT, i2650 INT, i2651 INT, i2652 INT, i2653 INT, i2654 INT, i2655 INT, i2656 INT, i2657 INT, i2658 INT, i2659 INT, i2660 INT, i2661 INT, i2662 INT, i2663 INT, i2664 INT, i2665 INT, i2666 INT, i2667 INT, i2668 INT, i2669 INT, i2670 INT, i2671 INT, i2672 INT, i2673 INT, i2674 INT, i2675 INT, i2676 INT, i2677 INT, i2678 INT, i2679 INT, i2680 INT, i2681 INT, i2682 INT, i2683 INT, i2684 INT, i2685 INT, i2686 INT, i2687 INT, i2688 INT, i2689 INT, i2690 INT, i2691 INT, i2692 INT, i2693 INT, i2694 INT, i2695 INT, i2696 INT, i2697 INT, i2698 INT, i2699 INT, i2700 INT, i2701 INT, i2702 INT, i2703 INT, i2704 INT, i2705 INT, i2706 INT, i2707 INT, i2708 INT, i2709 INT, i2710 INT, i2711 INT, i2712 INT, i2713 INT, i2714 INT, i2715 INT, i2716 INT, i2717 INT, i2718 INT, i2719 INT, i2720 INT, i2721 INT, i2722 INT, i2723 INT, i2724 INT, i2725 INT, i2726 INT, i2727 INT, i2728 INT, i2729 INT, i2730 INT, i2731 INT, i2732 INT, i2733 INT, i2734 INT, i2735 INT, i2736 INT, i2737 INT, i2738 INT, i2739 INT, i2740 INT, i2741 INT, i2742 INT, i2743 INT, i2744 INT, i2745 INT, i2746 INT, i2747 INT, i2748 INT, i2749 INT, i2750 INT, i2751 INT, i2752 INT, i2753 INT, i2754 INT, i2755 INT, i2756 INT, i2757 INT, i2758 INT, i2759 INT, i2760 INT, i2761 INT, i2762 INT, i2763 INT, i2764 INT, i2765 INT, i2766 INT, i2767 INT, i2768 INT, i2769 INT, i2770 INT, i2771 INT, i2772 INT, i2773 INT, i2774 INT, i2775 INT, i2776 INT, i2777 INT, i2778 INT, i2779 INT, i2780 INT, i2781 INT, i2782 INT, i2783 INT, i2784 INT, i2785 INT, i2786 INT, i2787 INT, i2788 INT, i2789 INT, i2790 INT, i2791 INT, i2792 INT, i2793 INT, i2794 INT, i2795 INT, i2796 INT, i2797 INT, i2798 INT, i2799 INT, i2800 INT, i2801 INT, i2802 INT, i2803 INT, i2804 INT, i2805 INT, i2806 INT, i2807 INT, i2808 INT, i2809 INT, i2810 INT, i2811 INT, i2812 INT, i2813 INT, i2814 INT, i2815 INT, i2816 INT, i2817 INT, i2818 INT, i2819 INT, i2820 INT, i2821 INT, i2822 INT, i2823 INT, i2824 INT, i2825 INT, i2826 INT, i2827 INT, i2828 INT, i2829 INT, i2830 INT, i2831 INT, i2832 INT, i2833 INT, i2834 INT, i2835 INT, i2836 INT, i2837 INT, i2838 INT, i2839 INT, i2840 INT, i2841 INT, i2842 INT, i2843 INT, i2844 INT, i2845 INT, i2846 INT, i2847 INT, i2848 INT, i2849 INT, i2850 INT, i2851 INT, i2852 INT, i2853 INT, i2854 INT, i2855 INT, i2856 INT, i2857 INT, i2858 INT, i2859 INT, i2860 INT, i2861 INT, i2862 INT, i2863 INT, i2864 INT, i2865 INT, i2866 INT, i2867 INT, i2868 INT, i2869 INT, i2870 INT, i2871 INT, i2872 INT, i2873 INT, i2874 INT, i2875 INT, i2876 INT, i2877 INT, i2878 INT, i2879 INT, i2880 INT, i2881 INT, i2882 INT, i2883 INT, i2884 INT, i2885 INT, i2886 INT, i2887 INT, i2888 INT, i2889 INT, i2890 INT, i2891 INT, i2892 INT, i2893 INT, i2894 INT, i2895 INT, i2896 INT, i2897 INT, i2898 INT, i2899 INT, i2900 INT, i2901 INT, i2902 INT, i2903 INT, i2904 INT, i2905 INT, i2906 INT, i2907 INT, i2908 INT, i2909 INT, i2910 INT, i2911 INT, i2912 INT, i2913 INT, i2914 INT, i2915 INT, i2916 INT, i2917 INT, i2918 INT, i2919 INT, i2920 INT, i2921 INT, i2922 INT, i2923 INT, i2924 INT, i2925 INT, i2926 INT, i2927 INT, i2928 INT, i2929 INT, i2930 INT, i2931 INT, i2932 INT, i2933 INT, i2934 INT, i2935 INT, i2936 INT, i2937 INT, i2938 INT, i2939 INT, i2940 INT, i2941 INT, i2942 INT, i2943 INT, i2944 INT, i2945 INT, i2946 INT, i2947 INT, i2948 INT, i2949 INT, i2950 INT, i2951 INT, i2952 INT, i2953 INT, i2954 INT, i2955 INT, i2956 INT, i2957 INT, i2958 INT, i2959 INT, i2960 INT, i2961 INT, i2962 INT, i2963 INT, i2964 INT, i2965 INT, i2966 INT, i2967 INT, i2968 INT, i2969 INT, i2970 INT, i2971 INT, i2972 INT, i2973 INT, i2974 INT, i2975 INT, i2976 INT, i2977 INT, i2978 INT, i2979 INT, i2980 INT, i2981 INT, i2982 INT, i2983 INT, i2984 INT, i2985 INT, i2986 INT, i2987 INT, i2988 INT, i2989 INT, i2990 INT, i2991 INT, i2992 INT, i2993 INT, i2994 INT, i2995 INT, i2996 INT, i2997 INT, i2998 INT, i2999 INT, i3000 INT, i3001 INT, i3002 INT, i3003 INT, i3004 INT, i3005 INT, i3006 INT, i3007 INT, i3008 INT, i3009 INT, i3010 INT, i3011 INT, i3012 INT, i3013 INT, i3014 INT, i3015 INT, i3016 INT, i3017 INT, i3018 INT, i3019 INT, i3020 INT, i3021 INT, i3022 INT, i3023 INT, i3024 INT, i3025 INT, i3026 INT, i3027 INT, i3028 INT, i3029 INT, i3030 INT, i3031 INT, i3032 INT, i3033 INT, i3034 INT, i3035 INT, i3036 INT, i3037 INT, i3038 INT, i3039 INT, i3040 INT, i3041 INT, i3042 INT, i3043 INT, i3044 INT, i3045 INT, i3046 INT, i3047 INT, i3048 INT, i3049 INT, i3050 INT, i3051 INT, i3052 INT, i3053 INT, i3054 INT, i3055 INT, i3056 INT, i3057 INT, i3058 INT, i3059 INT, i3060 INT, i3061 INT, i3062 INT, i3063 INT, i3064 INT, i3065 INT, i3066 INT, i3067 INT, i3068 INT, i3069 INT, i3070 INT, i3071 INT, i3072 INT, i3073 INT, i3074 INT, i3075 INT, i3076 INT, i3077 INT, i3078 INT, i3079 INT, i3080 INT, i3081 INT, i3082 INT, i3083 INT, i3084 INT, i3085 INT, i3086 INT, i3087 INT, i3088 INT, i3089 INT, i3090 INT, i3091 INT, i3092 INT, i3093 INT, i3094 INT, i3095 INT, i3096 INT, i3097 INT, i3098 INT, i3099 INT, i3100 INT, i3101 INT, i3102 INT, i3103 INT, i3104 INT, i3105 INT, i3106 INT, i3107 INT, i3108 INT, i3109 INT, i3110 INT, i3111 INT, i3112 INT, i3113 INT, i3114 INT, i3115 INT, i3116 INT, i3117 INT, i3118 INT, i3119 INT, i3120 INT, i3121 INT, i3122 INT, i3123 INT, i3124 INT, i3125 INT, i3126 INT, i3127 INT, i3128 INT, i3129 INT, i3130 INT, i3131 INT, i3132 INT, i3133 INT, i3134 INT, i3135 INT, i3136 INT, i3137 INT, i3138 INT, i3139 INT, i3140 INT, i3141 INT, i3142 INT, i3143 INT, i3144 INT, i3145 INT, i3146 INT, i3147 INT, i3148 INT, i3149 INT, i3150 INT, i3151 INT, i3152 INT, i3153 INT, i3154 INT, i3155 INT, i3156 INT, i3157 INT, i3158 INT, i3159 INT, i3160 INT, i3161 INT, i3162 INT, i3163 INT, i3164 INT, i3165 INT, i3166 INT, i3167 INT, i3168 INT, i3169 INT, i3170 INT, i3171 INT, i3172 INT, i3173 INT, i3174 INT, i3175 INT, i3176 INT, i3177 INT, i3178 INT, i3179 INT, i3180 INT, i3181 INT, i3182 INT, i3183 INT, i3184 INT, i3185 INT, i3186 INT, i3187 INT, i3188 INT, i3189 INT, i3190 INT, i3191 INT, i3192 INT, i3193 INT, i3194 INT, i3195 INT, i3196 INT, i3197 INT, i3198 INT, i3199 INT, i3200 INT, i3201 INT, i3202 INT, i3203 INT, i3204 INT, i3205 INT, i3206 INT, i3207 INT, i3208 INT, i3209 INT, i3210 INT, i3211 INT, i3212 INT, i3213 INT, i3214 INT, i3215 INT, i3216 INT, i3217 INT, i3218 INT, i3219 INT, i3220 INT, i3221 INT, i3222 INT, i3223 INT, i3224 INT, i3225 INT, i3226 INT, i3227 INT, i3228 INT, i3229 INT, i3230 INT, i3231 INT, i3232 INT, i3233 INT, i3234 INT, i3235 INT, i3236 INT, i3237 INT, i3238 INT, i3239 INT, i3240 INT, i3241 INT, i3242 INT, i3243 INT, i3244 INT, i3245 INT, i3246 INT, i3247 INT, i3248 INT, i3249 INT, i3250 INT, i3251 INT, i3252 INT, i3253 INT, i3254 INT, i3255 INT, i3256 INT, i3257 INT, i3258 INT, i3259 INT, i3260 INT, i3261 INT, i3262 INT, i3263 INT, i3264 INT, i3265 INT, i3266 INT, i3267 INT, i3268 INT, i3269 INT, i3270 INT, i3271 INT, i3272 INT, i3273 INT, i3274 INT, i3275 INT, i3276 INT, i3277 INT, i3278 INT, i3279 INT, i3280 INT, i3281 INT, i3282 INT, i3283 INT, i3284 INT, i3285 INT, i3286 INT, i3287 INT, i3288 INT, i3289 INT, i3290 INT, i3291 INT, i3292 INT, i3293 INT, i3294 INT, i3295 INT, i3296 INT, i3297 INT, i3298 INT, i3299 INT, i3300 INT, i3301 INT, i3302 INT, i3303 INT, i3304 INT, i3305 INT, i3306 INT, i3307 INT, i3308 INT, i3309 INT, i3310 INT, i3311 INT, i3312 INT, i3313 INT, i3314 INT, i3315 INT, i3316 INT, i3317 INT, i3318 INT, i3319 INT, i3320 INT, i3321 INT, i3322 INT, i3323 INT, i3324 INT, i3325 INT, i3326 INT, i3327 INT, i3328 INT, i3329 INT, i3330 INT, i3331 INT, i3332 INT, i3333 INT, i3334 INT, i3335 INT, i3336 INT, i3337 INT, i3338 INT, i3339 INT, i3340 INT, i3341 INT, i3342 INT, i3343 INT, i3344 INT, i3345 INT, i3346 INT, i3347 INT, i3348 INT, i3349 INT, i3350 INT, i3351 INT, i3352 INT, i3353 INT, i3354 INT, i3355 INT, i3356 INT, i3357 INT, i3358 INT, i3359 INT, i3360 INT, i3361 INT, i3362 INT, i3363 INT, i3364 INT, i3365 INT, i3366 INT, i3367 INT, i3368 INT, i3369 INT, i3370 INT, i3371 INT, i3372 INT, i3373 INT, i3374 INT, i3375 INT, i3376 INT, i3377 INT, i3378 INT, i3379 INT, i3380 INT, i3381 INT, i3382 INT, i3383 INT, i3384 INT, i3385 INT, i3386 INT, i3387 INT, i3388 INT, i3389 INT, i3390 INT, i3391 INT, i3392 INT, i3393 INT, i3394 INT, i3395 INT, i3396 INT, i3397 INT, i3398 INT, i3399 INT, i3400 INT, i3401 INT, i3402 INT, i3403 INT, i3404 INT, i3405 INT, i3406 INT, i3407 INT, i3408 INT, i3409 INT, i3410 INT, i3411 INT, i3412 INT, i3413 INT, i3414 INT, i3415 INT, i3416 INT, i3417 INT, i3418 INT, i3419 INT, i3420 INT, i3421 INT, i3422 INT, i3423 INT, i3424 INT, i3425 INT, i3426 INT, i3427 INT, i3428 INT, i3429 INT, i3430 INT, i3431 INT, i3432 INT, i3433 INT, i3434 INT, i3435 INT, i3436 INT, i3437 INT, i3438 INT, i3439 INT, i3440 INT, i3441 INT, i3442 INT, i3443 INT, i3444 INT, i3445 INT, i3446 INT, i3447 INT, i3448 INT, i3449 INT, i3450 INT, i3451 INT, i3452 INT, i3453 INT, i3454 INT, i3455 INT, i3456 INT, i3457 INT, i3458 INT, i3459 INT, i3460 INT, i3461 INT, i3462 INT, i3463 INT, i3464 INT, i3465 INT, i3466 INT, i3467 INT, i3468 INT, i3469 INT, i3470 INT, i3471 INT, i3472 INT, i3473 INT, i3474 INT, i3475 INT, i3476 INT, i3477 INT, i3478 INT, i3479 INT, i3480 INT, i3481 INT, i3482 INT, i3483 INT, i3484 INT, i3485 INT, i3486 INT, i3487 INT, i3488 INT, i3489 INT, i3490 INT, i3491 INT, i3492 INT, i3493 INT, i3494 INT, i3495 INT, i3496 INT, i3497 INT, i3498 INT, i3499 INT, i3500 INT, i3501 INT, i3502 INT, i3503 INT, i3504 INT, i3505 INT, i3506 INT, i3507 INT, i3508 INT, i3509 INT, i3510 INT, i3511 INT, i3512 INT, i3513 INT, i3514 INT, i3515 INT, i3516 INT, i3517 INT, i3518 INT, i3519 INT, i3520 INT, i3521 INT, i3522 INT, i3523 INT, i3524 INT, i3525 INT, i3526 INT, i3527 INT, i3528 INT, i3529 INT, i3530 INT, i3531 INT, i3532 INT, i3533 INT, i3534 INT, i3535 INT, i3536 INT, i3537 INT, i3538 INT, i3539 INT, i3540 INT, i3541 INT, i3542 INT, i3543 INT, i3544 INT, i3545 INT, i3546 INT, i3547 INT, i3548 INT, i3549 INT, i3550 INT, i3551 INT, i3552 INT, i3553 INT, i3554 INT, i3555 INT, i3556 INT, i3557 INT, i3558 INT, i3559 INT, i3560 INT, i3561 INT, i3562 INT, i3563 INT, i3564 INT, i3565 INT, i3566 INT, i3567 INT, i3568 INT, i3569 INT, i3570 INT, i3571 INT, i3572 INT, i3573 INT, i3574 INT, i3575 INT, i3576 INT, i3577 INT, i3578 INT, i3579 INT, i3580 INT, i3581 INT, i3582 INT, i3583 INT, i3584 INT, i3585 INT, i3586 INT, i3587 INT, i3588 INT, i3589 INT, i3590 INT, i3591 INT, i3592 INT, i3593 INT, i3594 INT, i3595 INT, i3596 INT, i3597 INT, i3598 INT, i3599 INT, i3600 INT, i3601 INT, i3602 INT, i3603 INT, i3604 INT, i3605 INT, i3606 INT, i3607 INT, i3608 INT, i3609 INT, i3610 INT, i3611 INT, i3612 INT, i3613 INT, i3614 INT, i3615 INT, i3616 INT, i3617 INT, i3618 INT, i3619 INT, i3620 INT, i3621 INT, i3622 INT, i3623 INT, i3624 INT, i3625 INT, i3626 INT, i3627 INT, i3628 INT, i3629 INT, i3630 INT, i3631 INT, i3632 INT, i3633 INT, i3634 INT, i3635 INT, i3636 INT, i3637 INT, i3638 INT, i3639 INT, i3640 INT, i3641 INT, i3642 INT, i3643 INT, i3644 INT, i3645 INT, i3646 INT, i3647 INT, i3648 INT, i3649 INT, i3650 INT, i3651 INT, i3652 INT, i3653 INT, i3654 INT, i3655 INT, i3656 INT, i3657 INT, i3658 INT, i3659 INT, i3660 INT, i3661 INT, i3662 INT, i3663 INT, i3664 INT, i3665 INT, i3666 INT, i3667 INT, i3668 INT, i3669 INT, i3670 INT, i3671 INT, i3672 INT, i3673 INT, i3674 INT, i3675 INT, i3676 INT, i3677 INT, i3678 INT, i3679 INT, i3680 INT, i3681 INT, i3682 INT, i3683 INT, i3684 INT, i3685 INT, i3686 INT, i3687 INT, i3688 INT, i3689 INT, i3690 INT, i3691 INT, i3692 INT, i3693 INT, i3694 INT, i3695 INT, i3696 INT, i3697 INT, i3698 INT, i3699 INT, i3700 INT, i3701 INT, i3702 INT, i3703 INT, i3704 INT, i3705 INT, i3706 INT, i3707 INT, i3708 INT, i3709 INT, i3710 INT, i3711 INT, i3712 INT, i3713 INT, i3714 INT, i3715 INT, i3716 INT, i3717 INT, i3718 INT, i3719 INT, i3720 INT, i3721 INT, i3722 INT, i3723 INT, i3724 INT, i3725 INT, i3726 INT, i3727 INT, i3728 INT, i3729 INT, i3730 INT, i3731 INT, i3732 INT, i3733 INT, i3734 INT, i3735 INT, i3736 INT, i3737 INT, i3738 INT, i3739 INT, i3740 INT, i3741 INT, i3742 INT, i3743 INT, i3744 INT, i3745 INT, i3746 INT, i3747 INT, i3748 INT, i3749 INT, i3750 INT, i3751 INT, i3752 INT, i3753 INT, i3754 INT, i3755 INT, i3756 INT, i3757 INT, i3758 INT, i3759 INT, i3760 INT, i3761 INT, i3762 INT, i3763 INT, i3764 INT, i3765 INT, i3766 INT, i3767 INT, i3768 INT, i3769 INT, i3770 INT, i3771 INT, i3772 INT, i3773 INT, i3774 INT, i3775 INT, i3776 INT, i3777 INT, i3778 INT, i3779 INT, i3780 INT, i3781 INT, i3782 INT, i3783 INT, i3784 INT, i3785 INT, i3786 INT, i3787 INT, i3788 INT, i3789 INT, i3790 INT, i3791 INT, i3792 INT, i3793 INT, i3794 INT, i3795 INT, i3796 INT, i3797 INT, i3798 INT, i3799 INT, i3800 INT, i3801 INT, i3802 INT, i3803 INT, i3804 INT, i3805 INT, i3806 INT, i3807 INT, i3808 INT, i3809 INT, i3810 INT, i3811 INT, i3812 INT, i3813 INT, i3814 INT, i3815 INT, i3816 INT, i3817 INT, i3818 INT, i3819 INT, i3820 INT, i3821 INT, i3822 INT, i3823 INT, i3824 INT, i3825 INT, i3826 INT, i3827 INT, i3828 INT, i3829 INT, i3830 INT, i3831 INT, i3832 INT, i3833 INT, i3834 INT, i3835 INT, i3836 INT, i3837 INT, i3838 INT, i3839 INT, i3840 INT, i3841 INT, i3842 INT, i3843 INT, i3844 INT, i3845 INT, i3846 INT, i3847 INT, i3848 INT, i3849 INT, i3850 INT, i3851 INT, i3852 INT, i3853 INT, i3854 INT, i3855 INT, i3856 INT, i3857 INT, i3858 INT, i3859 INT, i3860 INT, i3861 INT, i3862 INT, i3863 INT, i3864 INT, i3865 INT, i3866 INT, i3867 INT, i3868 INT, i3869 INT, i3870 INT, i3871 INT, i3872 INT, i3873 INT, i3874 INT, i3875 INT, i3876 INT, i3877 INT, i3878 INT, i3879 INT, i3880 INT, i3881 INT, i3882 INT, i3883 INT, i3884 INT, i3885 INT, i3886 INT, i3887 INT, i3888 INT, i3889 INT, i3890 INT, i3891 INT, i3892 INT, i3893 INT, i3894 INT, i3895 INT, i3896 INT, i3897 INT, i3898 INT, i3899 INT, i3900 INT, i3901 INT, i3902 INT, i3903 INT, i3904 INT, i3905 INT, i3906 INT, i3907 INT, i3908 INT, i3909 INT, i3910 INT, i3911 INT, i3912 INT, i3913 INT, i3914 INT, i3915 INT, i3916 INT, i3917 INT, i3918 INT, i3919 INT, i3920 INT, i3921 INT, i3922 INT, i3923 INT, i3924 INT, i3925 INT, i3926 INT, i3927 INT, i3928 INT, i3929 INT, i3930 INT, i3931 INT, i3932 INT, i3933 INT, i3934 INT, i3935 INT, i3936 INT, i3937 INT, i3938 INT, i3939 INT, i3940 INT, i3941 INT, i3942 INT, i3943 INT, i3944 INT, i3945 INT, i3946 INT, i3947 INT, i3948 INT, i3949 INT, i3950 INT, i3951 INT, i3952 INT, i3953 INT, i3954 INT, i3955 INT, i3956 INT, i3957 INT, i3958 INT, i3959 INT, i3960 INT, i3961 INT, i3962 INT, i3963 INT, i3964 INT, i3965 INT, i3966 INT, i3967 INT, i3968 INT, i3969 INT, i3970 INT, i3971 INT, i3972 INT, i3973 INT, i3974 INT, i3975 INT, i3976 INT, i3977 INT, i3978 INT, i3979 INT, i3980 INT, i3981 INT, i3982 INT, i3983 INT, i3984 INT, i3985 INT, i3986 INT, i3987 INT, i3988 INT, i3989 INT, i3990 INT, i3991 INT, i3992 INT, i3993 INT, i3994 INT, i3995 INT, i3996 INT, i3997 INT, i3998 INT, i3999 INT, i4000 INT, i4001 INT, i4002 INT, i4003 INT, i4004 INT, i4005 INT, i4006 INT, i4007 INT, i4008 INT, i4009 INT, i4010 INT, i4011 INT, i4012 INT, i4013 INT, i4014 INT, i4015 INT, i4016 INT, i4017 INT, i4018 INT, i4019 INT, i4020 INT, i4021 INT, i4022 INT, i4023 INT, i4024 INT, i4025 INT, i4026 INT, i4027 INT, i4028 INT, i4029 INT, i4030 INT, i4031 INT, i4032 INT, i4033 INT, i4034 INT, i4035 INT, i4036 INT, i4037 INT, i4038 INT, i4039 INT, i4040 INT, i4041 INT, i4042 INT, i4043 INT, i4044 INT, i4045 INT, i4046 INT, i4047 INT, i4048 INT, i4049 INT, i4050 INT, i4051 INT, i4052 INT, i4053 INT, i4054 INT, i4055 INT, i4056 INT, i4057 INT, i4058 INT, i4059 INT, i4060 INT, i4061 INT, i4062 INT, i4063 INT, i4064 INT, i4065 INT, i4066 INT, i4067 INT, i4068 INT, i4069 INT, i4070 INT, i4071 INT, i4072 INT, i4073 INT, i4074 INT, i4075 INT, i4076 INT, i4077 INT, i4078 INT, i4079 INT, i4080 INT, i4081 INT, i4082 INT, i4083 INT, i4084 INT, i4085 INT, i4086 INT, i4087 INT, i4088 INT, i4089 INT, i4090 INT, i4091 INT, i4092 INT, i4093 INT, i4094 INT, i4095 INT, i4096 INT, i4097 INT, i4098 INT, i4099 INT, i4100 INT, i4101 INT, i4102 INT, i4103 INT, i4104 INT, i4105 INT, i4106 INT, i4107 INT, i4108 INT, i4109 INT, i4110 INT, i4111 INT, i4112 INT, i4113 INT, i4114 INT, i4115 INT, i4116 INT, i4117 INT, i4118 INT, i4119 INT, i4120 INT, i4121 INT, i4122 INT, i4123 INT, i4124 INT, i4125 INT, i4126 INT, i4127 INT, i4128 INT, i4129 INT, i4130 INT, i4131 INT, i4132 INT, i4133 INT, i4134 INT, i4135 INT, i4136 INT, i4137 INT, i4138 INT, i4139 INT, i4140 INT, i4141 INT, i4142 INT, i4143 INT, i4144 INT, i4145 INT, i4146 INT, i4147 INT, i4148 INT, i4149 INT, i4150 INT, i4151 INT, i4152 INT, i4153 INT, i4154 INT, i4155 INT, i4156 INT, i4157 INT, i4158 INT, i4159 INT, i4160 INT, i4161 INT, i4162 INT, i4163 INT, i4164 INT, i4165 INT, i4166 INT, i4167 INT, i4168 INT, i4169 INT, i4170 INT, i4171 INT, i4172 INT, i4173 INT, i4174 INT, i4175 INT, i4176 INT, i4177 INT, i4178 INT, i4179 INT, i4180 INT, i4181 INT, i4182 INT, i4183 INT, i4184 INT, i4185 INT, i4186 INT, i4187 INT, i4188 INT, i4189 INT, i4190 INT, i4191 INT, i4192 INT, i4193 INT, i4194 INT, i4195 INT, i4196 INT, i4197 INT, i4198 INT, i4199 INT, i4200 INT, i4201 INT, i4202 INT, i4203 INT, i4204 INT, i4205 INT, i4206 INT, i4207 INT, i4208 INT, i4209 INT, i4210 INT, i4211 INT, i4212 INT, i4213 INT, i4214 INT, i4215 INT, i4216 INT, i4217 INT, i4218 INT, i4219 INT, i4220 INT, i4221 INT, i4222 INT, i4223 INT, i4224 INT, i4225 INT, i4226 INT, i4227 INT, i4228 INT, i4229 INT, i4230 INT, i4231 INT, i4232 INT, i4233 INT, i4234 INT, i4235 INT, i4236 INT, i4237 INT, i4238 INT, i4239 INT, i4240 INT, i4241 INT, i4242 INT, i4243 INT, i4244 INT, i4245 INT, i4246 INT, i4247 INT, i4248 INT, i4249 INT, i4250 INT, i4251 INT, i4252 INT, i4253 INT, i4254 INT, i4255 INT, i4256 INT, i4257 INT, i4258 INT, i4259 INT, i4260 INT, i4261 INT, i4262 INT, i4263 INT, i4264 INT, i4265 INT, i4266 INT, i4267 INT, i4268 INT, i4269 INT, i4270 INT, i4271 INT, i4272 INT, i4273 INT, i4274 INT, i4275 INT, i4276 INT, i4277 INT, i4278 INT, i4279 INT, i4280 INT, i4281 INT, i4282 INT, i4283 INT, i4284 INT, i4285 INT, i4286 INT, i4287 INT, i4288 INT, i4289 INT, i4290 INT, i4291 INT, i4292 INT, i4293 INT, i4294 INT, i4295 INT, i4296 INT, i4297 INT, i4298 INT, i4299 INT, i4300 INT, i4301 INT, i4302 INT, i4303 INT, i4304 INT, i4305 INT, i4306 INT, i4307 INT, i4308 INT, i4309 INT, i4310 INT, i4311 INT, i4312 INT, i4313 INT, i4314 INT, i4315 INT, i4316 INT, i4317 INT, i4318 INT, i4319 INT, i4320 INT, i4321 INT, i4322 INT, i4323 INT, i4324 INT, i4325 INT, i4326 INT, i4327 INT, i4328 INT, i4329 INT, i4330 INT, i4331 INT, i4332 INT, i4333 INT, i4334 INT, i4335 INT, i4336 INT, i4337 INT, i4338 INT, i4339 INT, i4340 INT, i4341 INT, i4342 INT, i4343 INT, i4344 INT, i4345 INT, i4346 INT, i4347 INT, i4348 INT, i4349 INT, i4350 INT, i4351 INT, i4352 INT, i4353 INT, i4354 INT, i4355 INT, i4356 INT, i4357 INT, i4358 INT, i4359 INT, i4360 INT, i4361 INT, i4362 INT, i4363 INT, i4364 INT, i4365 INT, i4366 INT, i4367 INT, i4368 INT, i4369 INT, i4370 INT, i4371 INT, i4372 INT, i4373 INT, i4374 INT, i4375 INT, i4376 INT, i4377 INT, i4378 INT, i4379 INT, i4380 INT, i4381 INT, i4382 INT, i4383 INT, i4384 INT, i4385 INT, i4386 INT, i4387 INT, i4388 INT, i4389 INT, i4390 INT, i4391 INT, i4392 INT, i4393 INT, i4394 INT, i4395 INT, i4396 INT, i4397 INT, i4398 INT, i4399 INT, i4400 INT, i4401 INT, i4402 INT, i4403 INT, i4404 INT, i4405 INT, i4406 INT, i4407 INT, i4408 INT, i4409 INT, i4410 INT, i4411 INT, i4412 INT, i4413 INT, i4414 INT, i4415 INT, i4416 INT, i4417 INT, i4418 INT, i4419 INT, i4420 INT, i4421 INT, i4422 INT, i4423 INT, i4424 INT, i4425 INT, i4426 INT, i4427 INT, i4428 INT, i4429 INT, i4430 INT, i4431 INT, i4432 INT, i4433 INT, i4434 INT, i4435 INT, i4436 INT, i4437 INT, i4438 INT, i4439 INT, i4440 INT, i4441 INT, i4442 INT, i4443 INT, i4444 INT, i4445 INT, i4446 INT, i4447 INT, i4448 INT, i4449 INT, i4450 INT, i4451 INT, i4452 INT, i4453 INT, i4454 INT, i4455 INT, i4456 INT, i4457 INT, i4458 INT, i4459 INT, i4460 INT, i4461 INT, i4462 INT, i4463 INT, i4464 INT, i4465 INT, i4466 INT, i4467 INT, i4468 INT, i4469 INT, i4470 INT, i4471 INT, i4472 INT, i4473 INT, i4474 INT, i4475 INT, i4476 INT, i4477 INT, i4478 INT, i4479 INT, i4480 INT, i4481 INT, i4482 INT, i4483 INT, i4484 INT, i4485 INT, i4486 INT, i4487 INT, i4488 INT, i4489 INT, i4490 INT, i4491 INT, i4492 INT, i4493 INT, i4494 INT, i4495 INT, i4496 INT, i4497 INT, i4498 INT, i4499 INT, i4500 INT, i4501 INT, i4502 INT, i4503 INT, i4504 INT, i4505 INT, i4506 INT, i4507 INT, i4508 INT, i4509 INT, i4510 INT, i4511 INT, i4512 INT, i4513 INT, i4514 INT, i4515 INT, i4516 INT, i4517 INT, i4518 INT, i4519 INT, i4520 INT, i4521 INT, i4522 INT, i4523 INT, i4524 INT, i4525 INT, i4526 INT, i4527 INT, i4528 INT, i4529 INT, i4530 INT, i4531 INT, i4532 INT, i4533 INT, i4534 INT, i4535 INT, i4536 INT, i4537 INT, i4538 INT, i4539 INT, i4540 INT, i4541 INT, i4542 INT, i4543 INT, i4544 INT, i4545 INT, i4546 INT, i4547 INT, i4548 INT, i4549 INT, i4550 INT, i4551 INT, i4552 INT, i4553 INT, i4554 INT, i4555 INT, i4556 INT, i4557 INT, i4558 INT, i4559 INT, i4560 INT, i4561 INT, i4562 INT, i4563 INT, i4564 INT, i4565 INT, i4566 INT, i4567 INT, i4568 INT, i4569 INT, i4570 INT, i4571 INT, i4572 INT, i4573 INT, i4574 INT, i4575 INT, i4576 INT, i4577 INT, i4578 INT, i4579 INT, i4580 INT, i4581 INT, i4582 INT, i4583 INT, i4584 INT, i4585 INT, i4586 INT, i4587 INT, i4588 INT, i4589 INT, i4590 INT, i4591 INT, i4592 INT, i4593 INT, i4594 INT, i4595 INT, i4596 INT, i4597 INT, i4598 INT, i4599 INT, i4600 INT, i4601 INT, i4602 INT, i4603 INT, i4604 INT, i4605 INT, i4606 INT, i4607 INT, i4608 INT, i4609 INT, i4610 INT, i4611 INT, i4612 INT, i4613 INT, i4614 INT, i4615 INT, i4616 INT, i4617 INT, i4618 INT, i4619 INT, i4620 INT, i4621 INT, i4622 INT, i4623 INT, i4624 INT, i4625 INT, i4626 INT, i4627 INT, i4628 INT, i4629 INT, i4630 INT, i4631 INT, i4632 INT, i4633 INT, i4634 INT, i4635 INT, i4636 INT, i4637 INT, i4638 INT, i4639 INT, i4640 INT, i4641 INT, i4642 INT, i4643 INT, i4644 INT, i4645 INT, i4646 INT, i4647 INT, i4648 INT, i4649 INT, i4650 INT, i4651 INT, i4652 INT, i4653 INT, i4654 INT, i4655 INT, i4656 INT, i4657 INT, i4658 INT, i4659 INT, i4660 INT, i4661 INT, i4662 INT, i4663 INT, i4664 INT, i4665 INT, i4666 INT, i4667 INT, i4668 INT, i4669 INT, i4670 INT, i4671 INT, i4672 INT, i4673 INT, i4674 INT, i4675 INT, i4676 INT, i4677 INT, i4678 INT, i4679 INT, i4680 INT, i4681 INT, i4682 INT, i4683 INT, i4684 INT, i4685 INT, i4686 INT, i4687 INT, i4688 INT, i4689 INT, i4690 INT, i4691 INT, i4692 INT, i4693 INT, i4694 INT, i4695 INT, i4696 INT, i4697 INT, i4698 INT, i4699 INT, i4700 INT, i4701 INT, i4702 INT, i4703 INT, i4704 INT, i4705 INT, i4706 INT, i4707 INT, i4708 INT, i4709 INT, i4710 INT, i4711 INT, i4712 INT, i4713 INT, i4714 INT, i4715 INT, i4716 INT, i4717 INT, i4718 INT, i4719 INT, i4720 INT, i4721 INT, i4722 INT, i4723 INT, i4724 INT, i4725 INT, i4726 INT, i4727 INT, i4728 INT, i4729 INT, i4730 INT, i4731 INT, i4732 INT, i4733 INT, i4734 INT, i4735 INT, i4736 INT, i4737 INT, i4738 INT, i4739 INT, i4740 INT, i4741 INT, i4742 INT, i4743 INT, i4744 INT, i4745 INT, i4746 INT, i4747 INT, i4748 INT, i4749 INT, i4750 INT, i4751 INT, i4752 INT, i4753 INT, i4754 INT, i4755 INT, i4756 INT, i4757 INT, i4758 INT, i4759 INT, i4760 INT, i4761 INT, i4762 INT, i4763 INT, i4764 INT, i4765 INT, i4766 INT, i4767 INT, i4768 INT, i4769 INT, i4770 INT, i4771 INT, i4772 INT, i4773 INT, i4774 INT, i4775 INT, i4776 INT, i4777 INT, i4778 INT, i4779 INT, i4780 INT, i4781 INT, i4782 INT, i4783 INT, i4784 INT, i4785 INT, i4786 INT, i4787 INT, i4788 INT, i4789 INT, i4790 INT, i4791 INT, i4792 INT, i4793 INT, i4794 INT, i4795 INT, i4796 INT, i4797 INT, i4798 INT, i4799 INT, i4800 INT, i4801 INT, i4802 INT, i4803 INT, i4804 INT, i4805 INT, i4806 INT, i4807 INT, i4808 INT, i4809 INT, i4810 INT, i4811 INT, i4812 INT, i4813 INT, i4814 INT, i4815 INT, i4816 INT, i4817 INT, i4818 INT, i4819 INT, i4820 INT, i4821 INT, i4822 INT, i4823 INT, i4824 INT, i4825 INT, i4826 INT, i4827 INT, i4828 INT, i4829 INT, i4830 INT, i4831 INT, i4832 INT, i4833 INT, i4834 INT, i4835 INT, i4836 INT, i4837 INT, i4838 INT, i4839 INT, i4840 INT, i4841 INT, i4842 INT, i4843 INT, i4844 INT, i4845 INT, i4846 INT, i4847 INT, i4848 INT, i4849 INT, i4850 INT, i4851 INT, i4852 INT, i4853 INT, i4854 INT, i4855 INT, i4856 INT, i4857 INT, i4858 INT, i4859 INT, i4860 INT, i4861 INT, i4862 INT, i4863 INT, i4864 INT, i4865 INT, i4866 INT, i4867 INT, i4868 INT, i4869 INT, i4870 INT, i4871 INT, i4872 INT, i4873 INT, i4874 INT, i4875 INT, i4876 INT, i4877 INT, i4878 INT, i4879 INT, i4880 INT, i4881 INT, i4882 INT, i4883 INT, i4884 INT, i4885 INT, i4886 INT, i4887 INT, i4888 INT, i4889 INT, i4890 INT, i4891 INT, i4892 INT, i4893 INT, i4894 INT, i4895 INT, i4896 INT, i4897 INT, i4898 INT, i4899 INT, i4900 INT, i4901 INT, i4902 INT, i4903 INT, i4904 INT, i4905 INT, i4906 INT, i4907 INT, i4908 INT, i4909 INT, i4910 INT, i4911 INT, i4912 INT, i4913 INT, i4914 INT, i4915 INT, i4916 INT, i4917 INT, i4918 INT, i4919 INT, i4920 INT, i4921 INT, i4922 INT, i4923 INT, i4924 INT, i4925 INT, i4926 INT, i4927 INT, i4928 INT, i4929 INT, i4930 INT, i4931 INT, i4932 INT, i4933 INT, i4934 INT, i4935 INT, i4936 INT, i4937 INT, i4938 INT, i4939 INT, i4940 INT, i4941 INT, i4942 INT, i4943 INT, i4944 INT, i4945 INT, i4946 INT, i4947 INT, i4948 INT, i4949 INT, i4950 INT, i4951 INT, i4952 INT, i4953 INT, i4954 INT, i4955 INT, i4956 INT, i4957 INT, i4958 INT, i4959 INT, i4960 INT, i4961 INT, i4962 INT, i4963 INT, i4964 INT, i4965 INT, i4966 INT, i4967 INT, i4968 INT, i4969 INT, i4970 INT, i4971 INT, i4972 INT, i4973 INT, i4974 INT, i4975 INT, i4976 INT, i4977 INT, i4978 INT, i4979 INT, i4980 INT, i4981 INT, i4982 INT, i4983 INT, i4984 INT, i4985 INT, i4986 INT, i4987 INT, i4988 INT, i4989 INT, i4990 INT, i4991 INT, i4992 INT, i4993 INT, i4994 INT, i4995 INT, i4996 INT, i4997 INT, i4998 INT, i4999 INT, i5000 INT, j INT);

INSERT INTO integers (i0, j) VALUES (2, 3), (3, 4), (5, 6);

SELECT i0, j, i1 FROM integers;

CREATE TABLE integers (i0 BIGINT, i1 BIGINT, i2 BIGINT, i3 BIGINT, i4 BIGINT, i5 BIGINT, i6 BIGINT, i7 BIGINT, i8 BIGINT, i9 BIGINT, i10 BIGINT, i11 BIGINT, i12 BIGINT, i13 BIGINT, i14 BIGINT, i15 BIGINT, i16 BIGINT, i17 BIGINT, i18 BIGINT, i19 BIGINT, i20 BIGINT, i21 BIGINT, i22 BIGINT, i23 BIGINT, i24 BIGINT, i25 BIGINT, i26 BIGINT, i27 BIGINT, i28 BIGINT, i29 BIGINT, i30 BIGINT, i31 BIGINT, i32 BIGINT, i33 BIGINT, i34 BIGINT, i35 BIGINT, i36 BIGINT, i37 BIGINT, i38 BIGINT, i39 BIGINT, i40 BIGINT, i41 BIGINT, i42 BIGINT, i43 BIGINT, i44 BIGINT, i45 BIGINT, i46 BIGINT, i47 BIGINT, i48 BIGINT, i49 BIGINT, i50 BIGINT, i51 BIGINT, i52 BIGINT, i53 BIGINT, i54 BIGINT, i55 BIGINT, i56 BIGINT, i57 BIGINT, i58 BIGINT, i59 BIGINT, i60 BIGINT, i61 BIGINT, i62 BIGINT, i63 BIGINT, i64 BIGINT, i65 BIGINT, i66 BIGINT, i67 BIGINT, i68 BIGINT, i69 BIGINT, i70 BIGINT, i71 BIGINT, i72 BIGINT, i73 BIGINT, i74 BIGINT, i75 BIGINT, i76 BIGINT, i77 BIGINT, i78 BIGINT, i79 BIGINT, i80 BIGINT, i81 BIGINT, i82 BIGINT, i83 BIGINT, i84 BIGINT, i85 BIGINT, i86 BIGINT, i87 BIGINT, i88 BIGINT, i89 BIGINT, i90 BIGINT, i91 BIGINT, i92 BIGINT, i93 BIGINT, i94 BIGINT, i95 BIGINT, i96 BIGINT, i97 BIGINT, i98 BIGINT, i99 BIGINT, i100 BIGINT, i101 BIGINT, i102 BIGINT, i103 BIGINT, i104 BIGINT, i105 BIGINT, i106 BIGINT, i107 BIGINT, i108 BIGINT, i109 BIGINT, i110 BIGINT, i111 BIGINT, i112 BIGINT, i113 BIGINT, i114 BIGINT, i115 BIGINT, i116 BIGINT, i117 BIGINT, i118 BIGINT, i119 BIGINT, i120 BIGINT, i121 BIGINT, i122 BIGINT, i123 BIGINT, i124 BIGINT, i125 BIGINT, i126 BIGINT, i127 BIGINT, i128 BIGINT, i129 BIGINT, i130 BIGINT, i131 BIGINT, i132 BIGINT, i133 BIGINT, i134 BIGINT, i135 BIGINT, i136 BIGINT, i137 BIGINT, i138 BIGINT, i139 BIGINT, i140 BIGINT, i141 BIGINT, i142 BIGINT, i143 BIGINT, i144 BIGINT, i145 BIGINT, i146 BIGINT, i147 BIGINT, i148 BIGINT, i149 BIGINT, i150 BIGINT, i151 BIGINT, i152 BIGINT, i153 BIGINT, i154 BIGINT, i155 BIGINT, i156 BIGINT, i157 BIGINT, i158 BIGINT, i159 BIGINT, i160 BIGINT, i161 BIGINT, i162 BIGINT, i163 BIGINT, i164 BIGINT, i165 BIGINT, i166 BIGINT, i167 BIGINT, i168 BIGINT, i169 BIGINT, i170 BIGINT, i171 BIGINT, i172 BIGINT, i173 BIGINT, i174 BIGINT, i175 BIGINT, i176 BIGINT, i177 BIGINT, i178 BIGINT, i179 BIGINT, i180 BIGINT, i181 BIGINT, i182 BIGINT, i183 BIGINT, i184 BIGINT, i185 BIGINT, i186 BIGINT, i187 BIGINT, i188 BIGINT, i189 BIGINT, i190 BIGINT, i191 BIGINT, i192 BIGINT, i193 BIGINT, i194 BIGINT, i195 BIGINT, i196 BIGINT, i197 BIGINT, i198 BIGINT, i199 BIGINT, i200 BIGINT, i201 BIGINT, i202 BIGINT, i203 BIGINT, i204 BIGINT, i205 BIGINT, i206 BIGINT, i207 BIGINT, i208 BIGINT, i209 BIGINT, i210 BIGINT, i211 BIGINT, i212 BIGINT, i213 BIGINT, i214 BIGINT, i215 BIGINT, i216 BIGINT, i217 BIGINT, i218 BIGINT, i219 BIGINT, i220 BIGINT, i221 BIGINT, i222 BIGINT, i223 BIGINT, i224 BIGINT, i225 BIGINT, i226 BIGINT, i227 BIGINT, i228 BIGINT, i229 BIGINT, i230 BIGINT, i231 BIGINT, i232 BIGINT, i233 BIGINT, i234 BIGINT, i235 BIGINT, i236 BIGINT, i237 BIGINT, i238 BIGINT, i239 BIGINT, i240 BIGINT, i241 BIGINT, i242 BIGINT, i243 BIGINT, i244 BIGINT, i245 BIGINT, i246 BIGINT, i247 BIGINT, i248 BIGINT, i249 BIGINT, i250 BIGINT, i251 BIGINT, i252 BIGINT, i253 BIGINT, i254 BIGINT, i255 BIGINT, i256 BIGINT, i257 BIGINT, i258 BIGINT, i259 BIGINT, i260 BIGINT, i261 BIGINT, i262 BIGINT, i263 BIGINT, i264 BIGINT, i265 BIGINT, i266 BIGINT, i267 BIGINT, i268 BIGINT, i269 BIGINT, i270 BIGINT, i271 BIGINT, i272 BIGINT, i273 BIGINT, i274 BIGINT, i275 BIGINT, i276 BIGINT, i277 BIGINT, i278 BIGINT, i279 BIGINT, i280 BIGINT, i281 BIGINT, i282 BIGINT, i283 BIGINT, i284 BIGINT, i285 BIGINT, i286 BIGINT, i287 BIGINT, i288 BIGINT, i289 BIGINT, i290 BIGINT, i291 BIGINT, i292 BIGINT, i293 BIGINT, i294 BIGINT, i295 BIGINT, i296 BIGINT, i297 BIGINT, i298 BIGINT, i299 BIGINT, i300 BIGINT, i301 BIGINT, i302 BIGINT, i303 BIGINT, i304 BIGINT, i305 BIGINT, i306 BIGINT, i307 BIGINT, i308 BIGINT, i309 BIGINT, i310 BIGINT, i311 BIGINT, i312 BIGINT, i313 BIGINT, i314 BIGINT, i315 BIGINT, i316 BIGINT, i317 BIGINT, i318 BIGINT, i319 BIGINT, i320 BIGINT, i321 BIGINT, i322 BIGINT, i323 BIGINT, i324 BIGINT, i325 BIGINT, i326 BIGINT, i327 BIGINT, i328 BIGINT, i329 BIGINT, i330 BIGINT, i331 BIGINT, i332 BIGINT, i333 BIGINT, i334 BIGINT, i335 BIGINT, i336 BIGINT, i337 BIGINT, i338 BIGINT, i339 BIGINT, i340 BIGINT, i341 BIGINT, i342 BIGINT, i343 BIGINT, i344 BIGINT, i345 BIGINT, i346 BIGINT, i347 BIGINT, i348 BIGINT, i349 BIGINT, i350 BIGINT, i351 BIGINT, i352 BIGINT, i353 BIGINT, i354 BIGINT, i355 BIGINT, i356 BIGINT, i357 BIGINT, i358 BIGINT, i359 BIGINT, i360 BIGINT, i361 BIGINT, i362 BIGINT, i363 BIGINT, i364 BIGINT, i365 BIGINT, i366 BIGINT, i367 BIGINT, i368 BIGINT, i369 BIGINT, i370 BIGINT, i371 BIGINT, i372 BIGINT, i373 BIGINT, i374 BIGINT, i375 BIGINT, i376 BIGINT, i377 BIGINT, i378 BIGINT, i379 BIGINT, i380 BIGINT, i381 BIGINT, i382 BIGINT, i383 BIGINT, i384 BIGINT, i385 BIGINT, i386 BIGINT, i387 BIGINT, i388 BIGINT, i389 BIGINT, i390 BIGINT, i391 BIGINT, i392 BIGINT, i393 BIGINT, i394 BIGINT, i395 BIGINT, i396 BIGINT, i397 BIGINT, i398 BIGINT, i399 BIGINT, i400 BIGINT, i401 BIGINT, i402 BIGINT, i403 BIGINT, i404 BIGINT, i405 BIGINT, i406 BIGINT, i407 BIGINT, i408 BIGINT, i409 BIGINT, i410 BIGINT, i411 BIGINT, i412 BIGINT, i413 BIGINT, i414 BIGINT, i415 BIGINT, i416 BIGINT, i417 BIGINT, i418 BIGINT, i419 BIGINT, i420 BIGINT, i421 BIGINT, i422 BIGINT, i423 BIGINT, i424 BIGINT, i425 BIGINT, i426 BIGINT, i427 BIGINT, i428 BIGINT, i429 BIGINT, i430 BIGINT, i431 BIGINT, i432 BIGINT, i433 BIGINT, i434 BIGINT, i435 BIGINT, i436 BIGINT, i437 BIGINT, i438 BIGINT, i439 BIGINT, i440 BIGINT, i441 BIGINT, i442 BIGINT, i443 BIGINT, i444 BIGINT, i445 BIGINT, i446 BIGINT, i447 BIGINT, i448 BIGINT, i449 BIGINT, i450 BIGINT, i451 BIGINT, i452 BIGINT, i453 BIGINT, i454 BIGINT, i455 BIGINT, i456 BIGINT, i457 BIGINT, i458 BIGINT, i459 BIGINT, i460 BIGINT, i461 BIGINT, i462 BIGINT, i463 BIGINT, i464 BIGINT, i465 BIGINT, i466 BIGINT, i467 BIGINT, i468 BIGINT, i469 BIGINT, i470 BIGINT, i471 BIGINT, i472 BIGINT, i473 BIGINT, i474 BIGINT, i475 BIGINT, i476 BIGINT, i477 BIGINT, i478 BIGINT, i479 BIGINT, i480 BIGINT, i481 BIGINT, i482 BIGINT, i483 BIGINT, i484 BIGINT, i485 BIGINT, i486 BIGINT, i487 BIGINT, i488 BIGINT, i489 BIGINT, i490 BIGINT, i491 BIGINT, i492 BIGINT, i493 BIGINT, i494 BIGINT, i495 BIGINT, i496 BIGINT, i497 BIGINT, i498 BIGINT, i499 BIGINT, i500 BIGINT, i501 BIGINT, i502 BIGINT, i503 BIGINT, i504 BIGINT, i505 BIGINT, i506 BIGINT, i507 BIGINT, i508 BIGINT, i509 BIGINT, i510 BIGINT, i511 BIGINT, i512 BIGINT, i513 BIGINT, i514 BIGINT, i515 BIGINT, i516 BIGINT, i517 BIGINT, i518 BIGINT, i519 BIGINT, i520 BIGINT, i521 BIGINT, i522 BIGINT, i523 BIGINT, i524 BIGINT, i525 BIGINT, i526 BIGINT, i527 BIGINT, i528 BIGINT, i529 BIGINT, i530 BIGINT, i531 BIGINT, i532 BIGINT, i533 BIGINT, i534 BIGINT, i535 BIGINT, i536 BIGINT, i537 BIGINT, i538 BIGINT, i539 BIGINT, i540 BIGINT, i541 BIGINT, i542 BIGINT, i543 BIGINT, i544 BIGINT, i545 BIGINT, i546 BIGINT, i547 BIGINT, i548 BIGINT, i549 BIGINT, i550 BIGINT, i551 BIGINT, i552 BIGINT, i553 BIGINT, i554 BIGINT, i555 BIGINT, i556 BIGINT, i557 BIGINT, i558 BIGINT, i559 BIGINT, i560 BIGINT, i561 BIGINT, i562 BIGINT, i563 BIGINT, i564 BIGINT, i565 BIGINT, i566 BIGINT, i567 BIGINT, i568 BIGINT, i569 BIGINT, i570 BIGINT, i571 BIGINT, i572 BIGINT, i573 BIGINT, i574 BIGINT, i575 BIGINT, i576 BIGINT, i577 BIGINT, i578 BIGINT, i579 BIGINT, i580 BIGINT, i581 BIGINT, i582 BIGINT, i583 BIGINT, i584 BIGINT, i585 BIGINT, i586 BIGINT, i587 BIGINT, i588 BIGINT, i589 BIGINT, i590 BIGINT, i591 BIGINT, i592 BIGINT, i593 BIGINT, i594 BIGINT, i595 BIGINT, i596 BIGINT, i597 BIGINT, i598 BIGINT, i599 BIGINT, i600 BIGINT, i601 BIGINT, i602 BIGINT, i603 BIGINT, i604 BIGINT, i605 BIGINT, i606 BIGINT, i607 BIGINT, i608 BIGINT, i609 BIGINT, i610 BIGINT, i611 BIGINT, i612 BIGINT, i613 BIGINT, i614 BIGINT, i615 BIGINT, i616 BIGINT, i617 BIGINT, i618 BIGINT, i619 BIGINT, i620 BIGINT, i621 BIGINT, i622 BIGINT, i623 BIGINT, i624 BIGINT, i625 BIGINT, i626 BIGINT, i627 BIGINT, i628 BIGINT, i629 BIGINT, i630 BIGINT, i631 BIGINT, i632 BIGINT, i633 BIGINT, i634 BIGINT, i635 BIGINT, i636 BIGINT, i637 BIGINT, i638 BIGINT, i639 BIGINT, i640 BIGINT, i641 BIGINT, i642 BIGINT, i643 BIGINT, i644 BIGINT, i645 BIGINT, i646 BIGINT, i647 BIGINT, i648 BIGINT, i649 BIGINT, i650 BIGINT, i651 BIGINT, i652 BIGINT, i653 BIGINT, i654 BIGINT, i655 BIGINT, i656 BIGINT, i657 BIGINT, i658 BIGINT, i659 BIGINT, i660 BIGINT, i661 BIGINT, i662 BIGINT, i663 BIGINT, i664 BIGINT, i665 BIGINT, i666 BIGINT, i667 BIGINT, i668 BIGINT, i669 BIGINT, i670 BIGINT, i671 BIGINT, i672 BIGINT, i673 BIGINT, i674 BIGINT, i675 BIGINT, i676 BIGINT, i677 BIGINT, i678 BIGINT, i679 BIGINT, i680 BIGINT, i681 BIGINT, i682 BIGINT, i683 BIGINT, i684 BIGINT, i685 BIGINT, i686 BIGINT, i687 BIGINT, i688 BIGINT, i689 BIGINT, i690 BIGINT, i691 BIGINT, i692 BIGINT, i693 BIGINT, i694 BIGINT, i695 BIGINT, i696 BIGINT, i697 BIGINT, i698 BIGINT, i699 BIGINT, i700 BIGINT, i701 BIGINT, i702 BIGINT, i703 BIGINT, i704 BIGINT, i705 BIGINT, i706 BIGINT, i707 BIGINT, i708 BIGINT, i709 BIGINT, i710 BIGINT, i711 BIGINT, i712 BIGINT, i713 BIGINT, i714 BIGINT, i715 BIGINT, i716 BIGINT, i717 BIGINT, i718 BIGINT, i719 BIGINT, i720 BIGINT, i721 BIGINT, i722 BIGINT, i723 BIGINT, i724 BIGINT, i725 BIGINT, i726 BIGINT, i727 BIGINT, i728 BIGINT, i729 BIGINT, i730 BIGINT, i731 BIGINT, i732 BIGINT, i733 BIGINT, i734 BIGINT, i735 BIGINT, i736 BIGINT, i737 BIGINT, i738 BIGINT, i739 BIGINT, i740 BIGINT, i741 BIGINT, i742 BIGINT, i743 BIGINT, i744 BIGINT, i745 BIGINT, i746 BIGINT, i747 BIGINT, i748 BIGINT, i749 BIGINT, i750 BIGINT, i751 BIGINT, i752 BIGINT, i753 BIGINT, i754 BIGINT, i755 BIGINT, i756 BIGINT, i757 BIGINT, i758 BIGINT, i759 BIGINT, i760 BIGINT, i761 BIGINT, i762 BIGINT, i763 BIGINT, i764 BIGINT, i765 BIGINT, i766 BIGINT, i767 BIGINT, i768 BIGINT, i769 BIGINT, i770 BIGINT, i771 BIGINT, i772 BIGINT, i773 BIGINT, i774 BIGINT, i775 BIGINT, i776 BIGINT, i777 BIGINT, i778 BIGINT, i779 BIGINT, i780 BIGINT, i781 BIGINT, i782 BIGINT, i783 BIGINT, i784 BIGINT, i785 BIGINT, i786 BIGINT, i787 BIGINT, i788 BIGINT, i789 BIGINT, i790 BIGINT, i791 BIGINT, i792 BIGINT, i793 BIGINT, i794 BIGINT, i795 BIGINT, i796 BIGINT, i797 BIGINT, i798 BIGINT, i799 BIGINT, i800 BIGINT, i801 BIGINT, i802 BIGINT, i803 BIGINT, i804 BIGINT, i805 BIGINT, i806 BIGINT, i807 BIGINT, i808 BIGINT, i809 BIGINT, i810 BIGINT, i811 BIGINT, i812 BIGINT, i813 BIGINT, i814 BIGINT, i815 BIGINT, i816 BIGINT, i817 BIGINT, i818 BIGINT, i819 BIGINT, i820 BIGINT, i821 BIGINT, i822 BIGINT, i823 BIGINT, i824 BIGINT, i825 BIGINT, i826 BIGINT, i827 BIGINT, i828 BIGINT, i829 BIGINT, i830 BIGINT, i831 BIGINT, i832 BIGINT, i833 BIGINT, i834 BIGINT, i835 BIGINT, i836 BIGINT, i837 BIGINT, i838 BIGINT, i839 BIGINT, i840 BIGINT, i841 BIGINT, i842 BIGINT, i843 BIGINT, i844 BIGINT, i845 BIGINT, i846 BIGINT, i847 BIGINT, i848 BIGINT, i849 BIGINT, i850 BIGINT, i851 BIGINT, i852 BIGINT, i853 BIGINT, i854 BIGINT, i855 BIGINT, i856 BIGINT, i857 BIGINT, i858 BIGINT, i859 BIGINT, i860 BIGINT, i861 BIGINT, i862 BIGINT, i863 BIGINT, i864 BIGINT, i865 BIGINT, i866 BIGINT, i867 BIGINT, i868 BIGINT, i869 BIGINT, i870 BIGINT, i871 BIGINT, i872 BIGINT, i873 BIGINT, i874 BIGINT, i875 BIGINT, i876 BIGINT, i877 BIGINT, i878 BIGINT, i879 BIGINT, i880 BIGINT, i881 BIGINT, i882 BIGINT, i883 BIGINT, i884 BIGINT, i885 BIGINT, i886 BIGINT, i887 BIGINT, i888 BIGINT, i889 BIGINT, i890 BIGINT, i891 BIGINT, i892 BIGINT, i893 BIGINT, i894 BIGINT, i895 BIGINT, i896 BIGINT, i897 BIGINT, i898 BIGINT, i899 BIGINT, i900 BIGINT, i901 BIGINT, i902 BIGINT, i903 BIGINT, i904 BIGINT, i905 BIGINT, i906 BIGINT, i907 BIGINT, i908 BIGINT, i909 BIGINT, i910 BIGINT, i911 BIGINT, i912 BIGINT, i913 BIGINT, i914 BIGINT, i915 BIGINT, i916 BIGINT, i917 BIGINT, i918 BIGINT, i919 BIGINT, i920 BIGINT, i921 BIGINT, i922 BIGINT, i923 BIGINT, i924 BIGINT, i925 BIGINT, i926 BIGINT, i927 BIGINT, i928 BIGINT, i929 BIGINT, i930 BIGINT, i931 BIGINT, i932 BIGINT, i933 BIGINT, i934 BIGINT, i935 BIGINT, i936 BIGINT, i937 BIGINT, i938 BIGINT, i939 BIGINT, i940 BIGINT, i941 BIGINT, i942 BIGINT, i943 BIGINT, i944 BIGINT, i945 BIGINT, i946 BIGINT, i947 BIGINT, i948 BIGINT, i949 BIGINT, i950 BIGINT, i951 BIGINT, i952 BIGINT, i953 BIGINT, i954 BIGINT, i955 BIGINT, i956 BIGINT, i957 BIGINT, i958 BIGINT, i959 BIGINT, i960 BIGINT, i961 BIGINT, i962 BIGINT, i963 BIGINT, i964 BIGINT, i965 BIGINT, i966 BIGINT, i967 BIGINT, i968 BIGINT, i969 BIGINT, i970 BIGINT, i971 BIGINT, i972 BIGINT, i973 BIGINT, i974 BIGINT, i975 BIGINT, i976 BIGINT, i977 BIGINT, i978 BIGINT, i979 BIGINT, i980 BIGINT, i981 BIGINT, i982 BIGINT, i983 BIGINT, i984 BIGINT, i985 BIGINT, i986 BIGINT, i987 BIGINT, i988 BIGINT, i989 BIGINT, i990 BIGINT, i991 BIGINT, i992 BIGINT, i993 BIGINT, i994 BIGINT, i995 BIGINT, i996 BIGINT, i997 BIGINT, i998 BIGINT, i999 BIGINT, i1000 BIGINT, i1001 BIGINT, i1002 BIGINT, i1003 BIGINT, i1004 BIGINT, i1005 BIGINT, i1006 BIGINT, i1007 BIGINT, i1008 BIGINT, i1009 BIGINT, i1010 BIGINT, i1011 BIGINT, i1012 BIGINT, i1013 BIGINT, i1014 BIGINT, i1015 BIGINT, i1016 BIGINT, i1017 BIGINT, i1018 BIGINT, i1019 BIGINT, i1020 BIGINT, i1021 BIGINT, i1022 BIGINT, i1023 BIGINT, i1024 BIGINT, i1025 BIGINT, i1026 BIGINT, i1027 BIGINT, i1028 BIGINT, i1029 BIGINT, i1030 BIGINT, i1031 BIGINT, i1032 BIGINT, i1033 BIGINT, i1034 BIGINT, i1035 BIGINT, i1036 BIGINT, i1037 BIGINT, i1038 BIGINT, i1039 BIGINT, i1040 BIGINT, i1041 BIGINT, i1042 BIGINT, i1043 BIGINT, i1044 BIGINT, i1045 BIGINT, i1046 BIGINT, i1047 BIGINT, i1048 BIGINT, i1049 BIGINT, i1050 BIGINT, i1051 BIGINT, i1052 BIGINT, i1053 BIGINT, i1054 BIGINT, i1055 BIGINT, i1056 BIGINT, i1057 BIGINT, i1058 BIGINT, i1059 BIGINT, i1060 BIGINT, i1061 BIGINT, i1062 BIGINT, i1063 BIGINT, i1064 BIGINT, i1065 BIGINT, i1066 BIGINT, i1067 BIGINT, i1068 BIGINT, i1069 BIGINT, i1070 BIGINT, i1071 BIGINT, i1072 BIGINT, i1073 BIGINT, i1074 BIGINT, i1075 BIGINT, i1076 BIGINT, i1077 BIGINT, i1078 BIGINT, i1079 BIGINT, i1080 BIGINT, i1081 BIGINT, i1082 BIGINT, i1083 BIGINT, i1084 BIGINT, i1085 BIGINT, i1086 BIGINT, i1087 BIGINT, i1088 BIGINT, i1089 BIGINT, i1090 BIGINT, i1091 BIGINT, i1092 BIGINT, i1093 BIGINT, i1094 BIGINT, i1095 BIGINT, i1096 BIGINT, i1097 BIGINT, i1098 BIGINT, i1099 BIGINT, i1100 BIGINT, i1101 BIGINT, i1102 BIGINT, i1103 BIGINT, i1104 BIGINT, i1105 BIGINT, i1106 BIGINT, i1107 BIGINT, i1108 BIGINT, i1109 BIGINT, i1110 BIGINT, i1111 BIGINT, i1112 BIGINT, i1113 BIGINT, i1114 BIGINT, i1115 BIGINT, i1116 BIGINT, i1117 BIGINT, i1118 BIGINT, i1119 BIGINT, i1120 BIGINT, i1121 BIGINT, i1122 BIGINT, i1123 BIGINT, i1124 BIGINT, i1125 BIGINT, i1126 BIGINT, i1127 BIGINT, i1128 BIGINT, i1129 BIGINT, i1130 BIGINT, i1131 BIGINT, i1132 BIGINT, i1133 BIGINT, i1134 BIGINT, i1135 BIGINT, i1136 BIGINT, i1137 BIGINT, i1138 BIGINT, i1139 BIGINT, i1140 BIGINT, i1141 BIGINT, i1142 BIGINT, i1143 BIGINT, i1144 BIGINT, i1145 BIGINT, i1146 BIGINT, i1147 BIGINT, i1148 BIGINT, i1149 BIGINT, i1150 BIGINT, i1151 BIGINT, i1152 BIGINT, i1153 BIGINT, i1154 BIGINT, i1155 BIGINT, i1156 BIGINT, i1157 BIGINT, i1158 BIGINT, i1159 BIGINT, i1160 BIGINT, i1161 BIGINT, i1162 BIGINT, i1163 BIGINT, i1164 BIGINT, i1165 BIGINT, i1166 BIGINT, i1167 BIGINT, i1168 BIGINT, i1169 BIGINT, i1170 BIGINT, i1171 BIGINT, i1172 BIGINT, i1173 BIGINT, i1174 BIGINT, i1175 BIGINT, i1176 BIGINT, i1177 BIGINT, i1178 BIGINT, i1179 BIGINT, i1180 BIGINT, i1181 BIGINT, i1182 BIGINT, i1183 BIGINT, i1184 BIGINT, i1185 BIGINT, i1186 BIGINT, i1187 BIGINT, i1188 BIGINT, i1189 BIGINT, i1190 BIGINT, i1191 BIGINT, i1192 BIGINT, i1193 BIGINT, i1194 BIGINT, i1195 BIGINT, i1196 BIGINT, i1197 BIGINT, i1198 BIGINT, i1199 BIGINT, i1200 BIGINT, i1201 BIGINT, i1202 BIGINT, i1203 BIGINT, i1204 BIGINT, i1205 BIGINT, i1206 BIGINT, i1207 BIGINT, i1208 BIGINT, i1209 BIGINT, i1210 BIGINT, i1211 BIGINT, i1212 BIGINT, i1213 BIGINT, i1214 BIGINT, i1215 BIGINT, i1216 BIGINT, i1217 BIGINT, i1218 BIGINT, i1219 BIGINT, i1220 BIGINT, i1221 BIGINT, i1222 BIGINT, i1223 BIGINT, i1224 BIGINT, i1225 BIGINT, i1226 BIGINT, i1227 BIGINT, i1228 BIGINT, i1229 BIGINT, i1230 BIGINT, i1231 BIGINT, i1232 BIGINT, i1233 BIGINT, i1234 BIGINT, i1235 BIGINT, i1236 BIGINT, i1237 BIGINT, i1238 BIGINT, i1239 BIGINT, i1240 BIGINT, i1241 BIGINT, i1242 BIGINT, i1243 BIGINT, i1244 BIGINT, i1245 BIGINT, i1246 BIGINT, i1247 BIGINT, i1248 BIGINT, i1249 BIGINT, i1250 BIGINT, i1251 BIGINT, i1252 BIGINT, i1253 BIGINT, i1254 BIGINT, i1255 BIGINT, i1256 BIGINT, i1257 BIGINT, i1258 BIGINT, i1259 BIGINT, i1260 BIGINT, i1261 BIGINT, i1262 BIGINT, i1263 BIGINT, i1264 BIGINT, i1265 BIGINT, i1266 BIGINT, i1267 BIGINT, i1268 BIGINT, i1269 BIGINT, i1270 BIGINT, i1271 BIGINT, i1272 BIGINT, i1273 BIGINT, i1274 BIGINT, i1275 BIGINT, i1276 BIGINT, i1277 BIGINT, i1278 BIGINT, i1279 BIGINT, i1280 BIGINT, i1281 BIGINT, i1282 BIGINT, i1283 BIGINT, i1284 BIGINT, i1285 BIGINT, i1286 BIGINT, i1287 BIGINT, i1288 BIGINT, i1289 BIGINT, i1290 BIGINT, i1291 BIGINT, i1292 BIGINT, i1293 BIGINT, i1294 BIGINT, i1295 BIGINT, i1296 BIGINT, i1297 BIGINT, i1298 BIGINT, i1299 BIGINT, i1300 BIGINT, i1301 BIGINT, i1302 BIGINT, i1303 BIGINT, i1304 BIGINT, i1305 BIGINT, i1306 BIGINT, i1307 BIGINT, i1308 BIGINT, i1309 BIGINT, i1310 BIGINT, i1311 BIGINT, i1312 BIGINT, i1313 BIGINT, i1314 BIGINT, i1315 BIGINT, i1316 BIGINT, i1317 BIGINT, i1318 BIGINT, i1319 BIGINT, i1320 BIGINT, i1321 BIGINT, i1322 BIGINT, i1323 BIGINT, i1324 BIGINT, i1325 BIGINT, i1326 BIGINT, i1327 BIGINT, i1328 BIGINT, i1329 BIGINT, i1330 BIGINT, i1331 BIGINT, i1332 BIGINT, i1333 BIGINT, i1334 BIGINT, i1335 BIGINT, i1336 BIGINT, i1337 BIGINT, i1338 BIGINT, i1339 BIGINT, i1340 BIGINT, i1341 BIGINT, i1342 BIGINT, i1343 BIGINT, i1344 BIGINT, i1345 BIGINT, i1346 BIGINT, i1347 BIGINT, i1348 BIGINT, i1349 BIGINT, i1350 BIGINT, i1351 BIGINT, i1352 BIGINT, i1353 BIGINT, i1354 BIGINT, i1355 BIGINT, i1356 BIGINT, i1357 BIGINT, i1358 BIGINT, i1359 BIGINT, i1360 BIGINT, i1361 BIGINT, i1362 BIGINT, i1363 BIGINT, i1364 BIGINT, i1365 BIGINT, i1366 BIGINT, i1367 BIGINT, i1368 BIGINT, i1369 BIGINT, i1370 BIGINT, i1371 BIGINT, i1372 BIGINT, i1373 BIGINT, i1374 BIGINT, i1375 BIGINT, i1376 BIGINT, i1377 BIGINT, i1378 BIGINT, i1379 BIGINT, i1380 BIGINT, i1381 BIGINT, i1382 BIGINT, i1383 BIGINT, i1384 BIGINT, i1385 BIGINT, i1386 BIGINT, i1387 BIGINT, i1388 BIGINT, i1389 BIGINT, i1390 BIGINT, i1391 BIGINT, i1392 BIGINT, i1393 BIGINT, i1394 BIGINT, i1395 BIGINT, i1396 BIGINT, i1397 BIGINT, i1398 BIGINT, i1399 BIGINT, i1400 BIGINT, i1401 BIGINT, i1402 BIGINT, i1403 BIGINT, i1404 BIGINT, i1405 BIGINT, i1406 BIGINT, i1407 BIGINT, i1408 BIGINT, i1409 BIGINT, i1410 BIGINT, i1411 BIGINT, i1412 BIGINT, i1413 BIGINT, i1414 BIGINT, i1415 BIGINT, i1416 BIGINT, i1417 BIGINT, i1418 BIGINT, i1419 BIGINT, i1420 BIGINT, i1421 BIGINT, i1422 BIGINT, i1423 BIGINT, i1424 BIGINT, i1425 BIGINT, i1426 BIGINT, i1427 BIGINT, i1428 BIGINT, i1429 BIGINT, i1430 BIGINT, i1431 BIGINT, i1432 BIGINT, i1433 BIGINT, i1434 BIGINT, i1435 BIGINT, i1436 BIGINT, i1437 BIGINT, i1438 BIGINT, i1439 BIGINT, i1440 BIGINT, i1441 BIGINT, i1442 BIGINT, i1443 BIGINT, i1444 BIGINT, i1445 BIGINT, i1446 BIGINT, i1447 BIGINT, i1448 BIGINT, i1449 BIGINT, i1450 BIGINT, i1451 BIGINT, i1452 BIGINT, i1453 BIGINT, i1454 BIGINT, i1455 BIGINT, i1456 BIGINT, i1457 BIGINT, i1458 BIGINT, i1459 BIGINT, i1460 BIGINT, i1461 BIGINT, i1462 BIGINT, i1463 BIGINT, i1464 BIGINT, i1465 BIGINT, i1466 BIGINT, i1467 BIGINT, i1468 BIGINT, i1469 BIGINT, i1470 BIGINT, i1471 BIGINT, i1472 BIGINT, i1473 BIGINT, i1474 BIGINT, i1475 BIGINT, i1476 BIGINT, i1477 BIGINT, i1478 BIGINT, i1479 BIGINT, i1480 BIGINT, i1481 BIGINT, i1482 BIGINT, i1483 BIGINT, i1484 BIGINT, i1485 BIGINT, i1486 BIGINT, i1487 BIGINT, i1488 BIGINT, i1489 BIGINT, i1490 BIGINT, i1491 BIGINT, i1492 BIGINT, i1493 BIGINT, i1494 BIGINT, i1495 BIGINT, i1496 BIGINT, i1497 BIGINT, i1498 BIGINT, i1499 BIGINT, i1500 BIGINT, i1501 BIGINT, i1502 BIGINT, i1503 BIGINT, i1504 BIGINT, i1505 BIGINT, i1506 BIGINT, i1507 BIGINT, i1508 BIGINT, i1509 BIGINT, i1510 BIGINT, i1511 BIGINT, i1512 BIGINT, i1513 BIGINT, i1514 BIGINT, i1515 BIGINT, i1516 BIGINT, i1517 BIGINT, i1518 BIGINT, i1519 BIGINT, i1520 BIGINT, i1521 BIGINT, i1522 BIGINT, i1523 BIGINT, i1524 BIGINT, i1525 BIGINT, i1526 BIGINT, i1527 BIGINT, i1528 BIGINT, i1529 BIGINT, i1530 BIGINT, i1531 BIGINT, i1532 BIGINT, i1533 BIGINT, i1534 BIGINT, i1535 BIGINT, i1536 BIGINT, i1537 BIGINT, i1538 BIGINT, i1539 BIGINT, i1540 BIGINT, i1541 BIGINT, i1542 BIGINT, i1543 BIGINT, i1544 BIGINT, i1545 BIGINT, i1546 BIGINT, i1547 BIGINT, i1548 BIGINT, i1549 BIGINT, i1550 BIGINT, i1551 BIGINT, i1552 BIGINT, i1553 BIGINT, i1554 BIGINT, i1555 BIGINT, i1556 BIGINT, i1557 BIGINT, i1558 BIGINT, i1559 BIGINT, i1560 BIGINT, i1561 BIGINT, i1562 BIGINT, i1563 BIGINT, i1564 BIGINT, i1565 BIGINT, i1566 BIGINT, i1567 BIGINT, i1568 BIGINT, i1569 BIGINT, i1570 BIGINT, i1571 BIGINT, i1572 BIGINT, i1573 BIGINT, i1574 BIGINT, i1575 BIGINT, i1576 BIGINT, i1577 BIGINT, i1578 BIGINT, i1579 BIGINT, i1580 BIGINT, i1581 BIGINT, i1582 BIGINT, i1583 BIGINT, i1584 BIGINT, i1585 BIGINT, i1586 BIGINT, i1587 BIGINT, i1588 BIGINT, i1589 BIGINT, i1590 BIGINT, i1591 BIGINT, i1592 BIGINT, i1593 BIGINT, i1594 BIGINT, i1595 BIGINT, i1596 BIGINT, i1597 BIGINT, i1598 BIGINT, i1599 BIGINT, i1600 BIGINT, i1601 BIGINT, i1602 BIGINT, i1603 BIGINT, i1604 BIGINT, i1605 BIGINT, i1606 BIGINT, i1607 BIGINT, i1608 BIGINT, i1609 BIGINT, i1610 BIGINT, i1611 BIGINT, i1612 BIGINT, i1613 BIGINT, i1614 BIGINT, i1615 BIGINT, i1616 BIGINT, i1617 BIGINT, i1618 BIGINT, i1619 BIGINT, i1620 BIGINT, i1621 BIGINT, i1622 BIGINT, i1623 BIGINT, i1624 BIGINT, i1625 BIGINT, i1626 BIGINT, i1627 BIGINT, i1628 BIGINT, i1629 BIGINT, i1630 BIGINT, i1631 BIGINT, i1632 BIGINT, i1633 BIGINT, i1634 BIGINT, i1635 BIGINT, i1636 BIGINT, i1637 BIGINT, i1638 BIGINT, i1639 BIGINT, i1640 BIGINT, i1641 BIGINT, i1642 BIGINT, i1643 BIGINT, i1644 BIGINT, i1645 BIGINT, i1646 BIGINT, i1647 BIGINT, i1648 BIGINT, i1649 BIGINT, i1650 BIGINT, i1651 BIGINT, i1652 BIGINT, i1653 BIGINT, i1654 BIGINT, i1655 BIGINT, i1656 BIGINT, i1657 BIGINT, i1658 BIGINT, i1659 BIGINT, i1660 BIGINT, i1661 BIGINT, i1662 BIGINT, i1663 BIGINT, i1664 BIGINT, i1665 BIGINT, i1666 BIGINT, i1667 BIGINT, i1668 BIGINT, i1669 BIGINT, i1670 BIGINT, i1671 BIGINT, i1672 BIGINT, i1673 BIGINT, i1674 BIGINT, i1675 BIGINT, i1676 BIGINT, i1677 BIGINT, i1678 BIGINT, i1679 BIGINT, i1680 BIGINT, i1681 BIGINT, i1682 BIGINT, i1683 BIGINT, i1684 BIGINT, i1685 BIGINT, i1686 BIGINT, i1687 BIGINT, i1688 BIGINT, i1689 BIGINT, i1690 BIGINT, i1691 BIGINT, i1692 BIGINT, i1693 BIGINT, i1694 BIGINT, i1695 BIGINT, i1696 BIGINT, i1697 BIGINT, i1698 BIGINT, i1699 BIGINT, i1700 BIGINT, i1701 BIGINT, i1702 BIGINT, i1703 BIGINT, i1704 BIGINT, i1705 BIGINT, i1706 BIGINT, i1707 BIGINT, i1708 BIGINT, i1709 BIGINT, i1710 BIGINT, i1711 BIGINT, i1712 BIGINT, i1713 BIGINT, i1714 BIGINT, i1715 BIGINT, i1716 BIGINT, i1717 BIGINT, i1718 BIGINT, i1719 BIGINT, i1720 BIGINT, i1721 BIGINT, i1722 BIGINT, i1723 BIGINT, i1724 BIGINT, i1725 BIGINT, i1726 BIGINT, i1727 BIGINT, i1728 BIGINT, i1729 BIGINT, i1730 BIGINT, i1731 BIGINT, i1732 BIGINT, i1733 BIGINT, i1734 BIGINT, i1735 BIGINT, i1736 BIGINT, i1737 BIGINT, i1738 BIGINT, i1739 BIGINT, i1740 BIGINT, i1741 BIGINT, i1742 BIGINT, i1743 BIGINT, i1744 BIGINT, i1745 BIGINT, i1746 BIGINT, i1747 BIGINT, i1748 BIGINT, i1749 BIGINT, i1750 BIGINT, i1751 BIGINT, i1752 BIGINT, i1753 BIGINT, i1754 BIGINT, i1755 BIGINT, i1756 BIGINT, i1757 BIGINT, i1758 BIGINT, i1759 BIGINT, i1760 BIGINT, i1761 BIGINT, i1762 BIGINT, i1763 BIGINT, i1764 BIGINT, i1765 BIGINT, i1766 BIGINT, i1767 BIGINT, i1768 BIGINT, i1769 BIGINT, i1770 BIGINT, i1771 BIGINT, i1772 BIGINT, i1773 BIGINT, i1774 BIGINT, i1775 BIGINT, i1776 BIGINT, i1777 BIGINT, i1778 BIGINT, i1779 BIGINT, i1780 BIGINT, i1781 BIGINT, i1782 BIGINT, i1783 BIGINT, i1784 BIGINT, i1785 BIGINT, i1786 BIGINT, i1787 BIGINT, i1788 BIGINT, i1789 BIGINT, i1790 BIGINT, i1791 BIGINT, i1792 BIGINT, i1793 BIGINT, i1794 BIGINT, i1795 BIGINT, i1796 BIGINT, i1797 BIGINT, i1798 BIGINT, i1799 BIGINT, i1800 BIGINT, i1801 BIGINT, i1802 BIGINT, i1803 BIGINT, i1804 BIGINT, i1805 BIGINT, i1806 BIGINT, i1807 BIGINT, i1808 BIGINT, i1809 BIGINT, i1810 BIGINT, i1811 BIGINT, i1812 BIGINT, i1813 BIGINT, i1814 BIGINT, i1815 BIGINT, i1816 BIGINT, i1817 BIGINT, i1818 BIGINT, i1819 BIGINT, i1820 BIGINT, i1821 BIGINT, i1822 BIGINT, i1823 BIGINT, i1824 BIGINT, i1825 BIGINT, i1826 BIGINT, i1827 BIGINT, i1828 BIGINT, i1829 BIGINT, i1830 BIGINT, i1831 BIGINT, i1832 BIGINT, i1833 BIGINT, i1834 BIGINT, i1835 BIGINT, i1836 BIGINT, i1837 BIGINT, i1838 BIGINT, i1839 BIGINT, i1840 BIGINT, i1841 BIGINT, i1842 BIGINT, i1843 BIGINT, i1844 BIGINT, i1845 BIGINT, i1846 BIGINT, i1847 BIGINT, i1848 BIGINT, i1849 BIGINT, i1850 BIGINT, i1851 BIGINT, i1852 BIGINT, i1853 BIGINT, i1854 BIGINT, i1855 BIGINT, i1856 BIGINT, i1857 BIGINT, i1858 BIGINT, i1859 BIGINT, i1860 BIGINT, i1861 BIGINT, i1862 BIGINT, i1863 BIGINT, i1864 BIGINT, i1865 BIGINT, i1866 BIGINT, i1867 BIGINT, i1868 BIGINT, i1869 BIGINT, i1870 BIGINT, i1871 BIGINT, i1872 BIGINT, i1873 BIGINT, i1874 BIGINT, i1875 BIGINT, i1876 BIGINT, i1877 BIGINT, i1878 BIGINT, i1879 BIGINT, i1880 BIGINT, i1881 BIGINT, i1882 BIGINT, i1883 BIGINT, i1884 BIGINT, i1885 BIGINT, i1886 BIGINT, i1887 BIGINT, i1888 BIGINT, i1889 BIGINT, i1890 BIGINT, i1891 BIGINT, i1892 BIGINT, i1893 BIGINT, i1894 BIGINT, i1895 BIGINT, i1896 BIGINT, i1897 BIGINT, i1898 BIGINT, i1899 BIGINT, i1900 BIGINT, i1901 BIGINT, i1902 BIGINT, i1903 BIGINT, i1904 BIGINT, i1905 BIGINT, i1906 BIGINT, i1907 BIGINT, i1908 BIGINT, i1909 BIGINT, i1910 BIGINT, i1911 BIGINT, i1912 BIGINT, i1913 BIGINT, i1914 BIGINT, i1915 BIGINT, i1916 BIGINT, i1917 BIGINT, i1918 BIGINT, i1919 BIGINT, i1920 BIGINT, i1921 BIGINT, i1922 BIGINT, i1923 BIGINT, i1924 BIGINT, i1925 BIGINT, i1926 BIGINT, i1927 BIGINT, i1928 BIGINT, i1929 BIGINT, i1930 BIGINT, i1931 BIGINT, i1932 BIGINT, i1933 BIGINT, i1934 BIGINT, i1935 BIGINT, i1936 BIGINT, i1937 BIGINT, i1938 BIGINT, i1939 BIGINT, i1940 BIGINT, i1941 BIGINT, i1942 BIGINT, i1943 BIGINT, i1944 BIGINT, i1945 BIGINT, i1946 BIGINT, i1947 BIGINT, i1948 BIGINT, i1949 BIGINT, i1950 BIGINT, i1951 BIGINT, i1952 BIGINT, i1953 BIGINT, i1954 BIGINT, i1955 BIGINT, i1956 BIGINT, i1957 BIGINT, i1958 BIGINT, i1959 BIGINT, i1960 BIGINT, i1961 BIGINT, i1962 BIGINT, i1963 BIGINT, i1964 BIGINT, i1965 BIGINT, i1966 BIGINT, i1967 BIGINT, i1968 BIGINT, i1969 BIGINT, i1970 BIGINT, i1971 BIGINT, i1972 BIGINT, i1973 BIGINT, i1974 BIGINT, i1975 BIGINT, i1976 BIGINT, i1977 BIGINT, i1978 BIGINT, i1979 BIGINT, i1980 BIGINT, i1981 BIGINT, i1982 BIGINT, i1983 BIGINT, i1984 BIGINT, i1985 BIGINT, i1986 BIGINT, i1987 BIGINT, i1988 BIGINT, i1989 BIGINT, i1990 BIGINT, i1991 BIGINT, i1992 BIGINT, i1993 BIGINT, i1994 BIGINT, i1995 BIGINT, i1996 BIGINT, i1997 BIGINT, i1998 BIGINT, i1999 BIGINT, i2000 BIGINT, i2001 BIGINT, i2002 BIGINT, i2003 BIGINT, i2004 BIGINT, i2005 BIGINT, i2006 BIGINT, i2007 BIGINT, i2008 BIGINT, i2009 BIGINT, i2010 BIGINT, i2011 BIGINT, i2012 BIGINT, i2013 BIGINT, i2014 BIGINT, i2015 BIGINT, i2016 BIGINT, i2017 BIGINT, i2018 BIGINT, i2019 BIGINT, i2020 BIGINT, i2021 BIGINT, i2022 BIGINT, i2023 BIGINT, i2024 BIGINT, i2025 BIGINT, i2026 BIGINT, i2027 BIGINT, i2028 BIGINT, i2029 BIGINT, i2030 BIGINT, i2031 BIGINT, i2032 BIGINT, i2033 BIGINT, i2034 BIGINT, i2035 BIGINT, i2036 BIGINT, i2037 BIGINT, i2038 BIGINT, i2039 BIGINT, i2040 BIGINT, i2041 BIGINT, i2042 BIGINT, i2043 BIGINT, i2044 BIGINT, i2045 BIGINT, i2046 BIGINT, i2047 BIGINT, i2048 BIGINT, i2049 BIGINT, i2050 BIGINT, i2051 BIGINT, i2052 BIGINT, i2053 BIGINT, i2054 BIGINT, i2055 BIGINT, i2056 BIGINT, i2057 BIGINT, i2058 BIGINT, i2059 BIGINT, i2060 BIGINT, i2061 BIGINT, i2062 BIGINT, i2063 BIGINT, i2064 BIGINT, i2065 BIGINT, i2066 BIGINT, i2067 BIGINT, i2068 BIGINT, i2069 BIGINT, i2070 BIGINT, i2071 BIGINT, i2072 BIGINT, i2073 BIGINT, i2074 BIGINT, i2075 BIGINT, i2076 BIGINT, i2077 BIGINT, i2078 BIGINT, i2079 BIGINT, i2080 BIGINT, i2081 BIGINT, i2082 BIGINT, i2083 BIGINT, i2084 BIGINT, i2085 BIGINT, i2086 BIGINT, i2087 BIGINT, i2088 BIGINT, i2089 BIGINT, i2090 BIGINT, i2091 BIGINT, i2092 BIGINT, i2093 BIGINT, i2094 BIGINT, i2095 BIGINT, i2096 BIGINT, i2097 BIGINT, i2098 BIGINT, i2099 BIGINT, i2100 BIGINT, i2101 BIGINT, i2102 BIGINT, i2103 BIGINT, i2104 BIGINT, i2105 BIGINT, i2106 BIGINT, i2107 BIGINT, i2108 BIGINT, i2109 BIGINT, i2110 BIGINT, i2111 BIGINT, i2112 BIGINT, i2113 BIGINT, i2114 BIGINT, i2115 BIGINT, i2116 BIGINT, i2117 BIGINT, i2118 BIGINT, i2119 BIGINT, i2120 BIGINT, i2121 BIGINT, i2122 BIGINT, i2123 BIGINT, i2124 BIGINT, i2125 BIGINT, i2126 BIGINT, i2127 BIGINT, i2128 BIGINT, i2129 BIGINT, i2130 BIGINT, i2131 BIGINT, i2132 BIGINT, i2133 BIGINT, i2134 BIGINT, i2135 BIGINT, i2136 BIGINT, i2137 BIGINT, i2138 BIGINT, i2139 BIGINT, i2140 BIGINT, i2141 BIGINT, i2142 BIGINT, i2143 BIGINT, i2144 BIGINT, i2145 BIGINT, i2146 BIGINT, i2147 BIGINT, i2148 BIGINT, i2149 BIGINT, i2150 BIGINT, i2151 BIGINT, i2152 BIGINT, i2153 BIGINT, i2154 BIGINT, i2155 BIGINT, i2156 BIGINT, i2157 BIGINT, i2158 BIGINT, i2159 BIGINT, i2160 BIGINT, i2161 BIGINT, i2162 BIGINT, i2163 BIGINT, i2164 BIGINT, i2165 BIGINT, i2166 BIGINT, i2167 BIGINT, i2168 BIGINT, i2169 BIGINT, i2170 BIGINT, i2171 BIGINT, i2172 BIGINT, i2173 BIGINT, i2174 BIGINT, i2175 BIGINT, i2176 BIGINT, i2177 BIGINT, i2178 BIGINT, i2179 BIGINT, i2180 BIGINT, i2181 BIGINT, i2182 BIGINT, i2183 BIGINT, i2184 BIGINT, i2185 BIGINT, i2186 BIGINT, i2187 BIGINT, i2188 BIGINT, i2189 BIGINT, i2190 BIGINT, i2191 BIGINT, i2192 BIGINT, i2193 BIGINT, i2194 BIGINT, i2195 BIGINT, i2196 BIGINT, i2197 BIGINT, i2198 BIGINT, i2199 BIGINT, i2200 BIGINT, i2201 BIGINT, i2202 BIGINT, i2203 BIGINT, i2204 BIGINT, i2205 BIGINT, i2206 BIGINT, i2207 BIGINT, i2208 BIGINT, i2209 BIGINT, i2210 BIGINT, i2211 BIGINT, i2212 BIGINT, i2213 BIGINT, i2214 BIGINT, i2215 BIGINT, i2216 BIGINT, i2217 BIGINT, i2218 BIGINT, i2219 BIGINT, i2220 BIGINT, i2221 BIGINT, i2222 BIGINT, i2223 BIGINT, i2224 BIGINT, i2225 BIGINT, i2226 BIGINT, i2227 BIGINT, i2228 BIGINT, i2229 BIGINT, i2230 BIGINT, i2231 BIGINT, i2232 BIGINT, i2233 BIGINT, i2234 BIGINT, i2235 BIGINT, i2236 BIGINT, i2237 BIGINT, i2238 BIGINT, i2239 BIGINT, i2240 BIGINT, i2241 BIGINT, i2242 BIGINT, i2243 BIGINT, i2244 BIGINT, i2245 BIGINT, i2246 BIGINT, i2247 BIGINT, i2248 BIGINT, i2249 BIGINT, i2250 BIGINT, i2251 BIGINT, i2252 BIGINT, i2253 BIGINT, i2254 BIGINT, i2255 BIGINT, i2256 BIGINT, i2257 BIGINT, i2258 BIGINT, i2259 BIGINT, i2260 BIGINT, i2261 BIGINT, i2262 BIGINT, i2263 BIGINT, i2264 BIGINT, i2265 BIGINT, i2266 BIGINT, i2267 BIGINT, i2268 BIGINT, i2269 BIGINT, i2270 BIGINT, i2271 BIGINT, i2272 BIGINT, i2273 BIGINT, i2274 BIGINT, i2275 BIGINT, i2276 BIGINT, i2277 BIGINT, i2278 BIGINT, i2279 BIGINT, i2280 BIGINT, i2281 BIGINT, i2282 BIGINT, i2283 BIGINT, i2284 BIGINT, i2285 BIGINT, i2286 BIGINT, i2287 BIGINT, i2288 BIGINT, i2289 BIGINT, i2290 BIGINT, i2291 BIGINT, i2292 BIGINT, i2293 BIGINT, i2294 BIGINT, i2295 BIGINT, i2296 BIGINT, i2297 BIGINT, i2298 BIGINT, i2299 BIGINT, i2300 BIGINT, i2301 BIGINT, i2302 BIGINT, i2303 BIGINT, i2304 BIGINT, i2305 BIGINT, i2306 BIGINT, i2307 BIGINT, i2308 BIGINT, i2309 BIGINT, i2310 BIGINT, i2311 BIGINT, i2312 BIGINT, i2313 BIGINT, i2314 BIGINT, i2315 BIGINT, i2316 BIGINT, i2317 BIGINT, i2318 BIGINT, i2319 BIGINT, i2320 BIGINT, i2321 BIGINT, i2322 BIGINT, i2323 BIGINT, i2324 BIGINT, i2325 BIGINT, i2326 BIGINT, i2327 BIGINT, i2328 BIGINT, i2329 BIGINT, i2330 BIGINT, i2331 BIGINT, i2332 BIGINT, i2333 BIGINT, i2334 BIGINT, i2335 BIGINT, i2336 BIGINT, i2337 BIGINT, i2338 BIGINT, i2339 BIGINT, i2340 BIGINT, i2341 BIGINT, i2342 BIGINT, i2343 BIGINT, i2344 BIGINT, i2345 BIGINT, i2346 BIGINT, i2347 BIGINT, i2348 BIGINT, i2349 BIGINT, i2350 BIGINT, i2351 BIGINT, i2352 BIGINT, i2353 BIGINT, i2354 BIGINT, i2355 BIGINT, i2356 BIGINT, i2357 BIGINT, i2358 BIGINT, i2359 BIGINT, i2360 BIGINT, i2361 BIGINT, i2362 BIGINT, i2363 BIGINT, i2364 BIGINT, i2365 BIGINT, i2366 BIGINT, i2367 BIGINT, i2368 BIGINT, i2369 BIGINT, i2370 BIGINT, i2371 BIGINT, i2372 BIGINT, i2373 BIGINT, i2374 BIGINT, i2375 BIGINT, i2376 BIGINT, i2377 BIGINT, i2378 BIGINT, i2379 BIGINT, i2380 BIGINT, i2381 BIGINT, i2382 BIGINT, i2383 BIGINT, i2384 BIGINT, i2385 BIGINT, i2386 BIGINT, i2387 BIGINT, i2388 BIGINT, i2389 BIGINT, i2390 BIGINT, i2391 BIGINT, i2392 BIGINT, i2393 BIGINT, i2394 BIGINT, i2395 BIGINT, i2396 BIGINT, i2397 BIGINT, i2398 BIGINT, i2399 BIGINT, i2400 BIGINT, i2401 BIGINT, i2402 BIGINT, i2403 BIGINT, i2404 BIGINT, i2405 BIGINT, i2406 BIGINT, i2407 BIGINT, i2408 BIGINT, i2409 BIGINT, i2410 BIGINT, i2411 BIGINT, i2412 BIGINT, i2413 BIGINT, i2414 BIGINT, i2415 BIGINT, i2416 BIGINT, i2417 BIGINT, i2418 BIGINT, i2419 BIGINT, i2420 BIGINT, i2421 BIGINT, i2422 BIGINT, i2423 BIGINT, i2424 BIGINT, i2425 BIGINT, i2426 BIGINT, i2427 BIGINT, i2428 BIGINT, i2429 BIGINT, i2430 BIGINT, i2431 BIGINT, i2432 BIGINT, i2433 BIGINT, i2434 BIGINT, i2435 BIGINT, i2436 BIGINT, i2437 BIGINT, i2438 BIGINT, i2439 BIGINT, i2440 BIGINT, i2441 BIGINT, i2442 BIGINT, i2443 BIGINT, i2444 BIGINT, i2445 BIGINT, i2446 BIGINT, i2447 BIGINT, i2448 BIGINT, i2449 BIGINT, i2450 BIGINT, i2451 BIGINT, i2452 BIGINT, i2453 BIGINT, i2454 BIGINT, i2455 BIGINT, i2456 BIGINT, i2457 BIGINT, i2458 BIGINT, i2459 BIGINT, i2460 BIGINT, i2461 BIGINT, i2462 BIGINT, i2463 BIGINT, i2464 BIGINT, i2465 BIGINT, i2466 BIGINT, i2467 BIGINT, i2468 BIGINT, i2469 BIGINT, i2470 BIGINT, i2471 BIGINT, i2472 BIGINT, i2473 BIGINT, i2474 BIGINT, i2475 BIGINT, i2476 BIGINT, i2477 BIGINT, i2478 BIGINT, i2479 BIGINT, i2480 BIGINT, i2481 BIGINT, i2482 BIGINT, i2483 BIGINT, i2484 BIGINT, i2485 BIGINT, i2486 BIGINT, i2487 BIGINT, i2488 BIGINT, i2489 BIGINT, i2490 BIGINT, i2491 BIGINT, i2492 BIGINT, i2493 BIGINT, i2494 BIGINT, i2495 BIGINT, i2496 BIGINT, i2497 BIGINT, i2498 BIGINT, i2499 BIGINT, i2500 BIGINT, i2501 BIGINT, i2502 BIGINT, i2503 BIGINT, i2504 BIGINT, i2505 BIGINT, i2506 BIGINT, i2507 BIGINT, i2508 BIGINT, i2509 BIGINT, i2510 BIGINT, i2511 BIGINT, i2512 BIGINT, i2513 BIGINT, i2514 BIGINT, i2515 BIGINT, i2516 BIGINT, i2517 BIGINT, i2518 BIGINT, i2519 BIGINT, i2520 BIGINT, i2521 BIGINT, i2522 BIGINT, i2523 BIGINT, i2524 BIGINT, i2525 BIGINT, i2526 BIGINT, i2527 BIGINT, i2528 BIGINT, i2529 BIGINT, i2530 BIGINT, i2531 BIGINT, i2532 BIGINT, i2533 BIGINT, i2534 BIGINT, i2535 BIGINT, i2536 BIGINT, i2537 BIGINT, i2538 BIGINT, i2539 BIGINT, i2540 BIGINT, i2541 BIGINT, i2542 BIGINT, i2543 BIGINT, i2544 BIGINT, i2545 BIGINT, i2546 BIGINT, i2547 BIGINT, i2548 BIGINT, i2549 BIGINT, i2550 BIGINT, i2551 BIGINT, i2552 BIGINT, i2553 BIGINT, i2554 BIGINT, i2555 BIGINT, i2556 BIGINT, i2557 BIGINT, i2558 BIGINT, i2559 BIGINT, i2560 BIGINT, i2561 BIGINT, i2562 BIGINT, i2563 BIGINT, i2564 BIGINT, i2565 BIGINT, i2566 BIGINT, i2567 BIGINT, i2568 BIGINT, i2569 BIGINT, i2570 BIGINT, i2571 BIGINT, i2572 BIGINT, i2573 BIGINT, i2574 BIGINT, i2575 BIGINT, i2576 BIGINT, i2577 BIGINT, i2578 BIGINT, i2579 BIGINT, i2580 BIGINT, i2581 BIGINT, i2582 BIGINT, i2583 BIGINT, i2584 BIGINT, i2585 BIGINT, i2586 BIGINT, i2587 BIGINT, i2588 BIGINT, i2589 BIGINT, i2590 BIGINT, i2591 BIGINT, i2592 BIGINT, i2593 BIGINT, i2594 BIGINT, i2595 BIGINT, i2596 BIGINT, i2597 BIGINT, i2598 BIGINT, i2599 BIGINT, i2600 BIGINT, i2601 BIGINT, i2602 BIGINT, i2603 BIGINT, i2604 BIGINT, i2605 BIGINT, i2606 BIGINT, i2607 BIGINT, i2608 BIGINT, i2609 BIGINT, i2610 BIGINT, i2611 BIGINT, i2612 BIGINT, i2613 BIGINT, i2614 BIGINT, i2615 BIGINT, i2616 BIGINT, i2617 BIGINT, i2618 BIGINT, i2619 BIGINT, i2620 BIGINT, i2621 BIGINT, i2622 BIGINT, i2623 BIGINT, i2624 BIGINT, i2625 BIGINT, i2626 BIGINT, i2627 BIGINT, i2628 BIGINT, i2629 BIGINT, i2630 BIGINT, i2631 BIGINT, i2632 BIGINT, i2633 BIGINT, i2634 BIGINT, i2635 BIGINT, i2636 BIGINT, i2637 BIGINT, i2638 BIGINT, i2639 BIGINT, i2640 BIGINT, i2641 BIGINT, i2642 BIGINT, i2643 BIGINT, i2644 BIGINT, i2645 BIGINT, i2646 BIGINT, i2647 BIGINT, i2648 BIGINT, i2649 BIGINT, i2650 BIGINT, i2651 BIGINT, i2652 BIGINT, i2653 BIGINT, i2654 BIGINT, i2655 BIGINT, i2656 BIGINT, i2657 BIGINT, i2658 BIGINT, i2659 BIGINT, i2660 BIGINT, i2661 BIGINT, i2662 BIGINT, i2663 BIGINT, i2664 BIGINT, i2665 BIGINT, i2666 BIGINT, i2667 BIGINT, i2668 BIGINT, i2669 BIGINT, i2670 BIGINT, i2671 BIGINT, i2672 BIGINT, i2673 BIGINT, i2674 BIGINT, i2675 BIGINT, i2676 BIGINT, i2677 BIGINT, i2678 BIGINT, i2679 BIGINT, i2680 BIGINT, i2681 BIGINT, i2682 BIGINT, i2683 BIGINT, i2684 BIGINT, i2685 BIGINT, i2686 BIGINT, i2687 BIGINT, i2688 BIGINT, i2689 BIGINT, i2690 BIGINT, i2691 BIGINT, i2692 BIGINT, i2693 BIGINT, i2694 BIGINT, i2695 BIGINT, i2696 BIGINT, i2697 BIGINT, i2698 BIGINT, i2699 BIGINT, i2700 BIGINT, i2701 BIGINT, i2702 BIGINT, i2703 BIGINT, i2704 BIGINT, i2705 BIGINT, i2706 BIGINT, i2707 BIGINT, i2708 BIGINT, i2709 BIGINT, i2710 BIGINT, i2711 BIGINT, i2712 BIGINT, i2713 BIGINT, i2714 BIGINT, i2715 BIGINT, i2716 BIGINT, i2717 BIGINT, i2718 BIGINT, i2719 BIGINT, i2720 BIGINT, i2721 BIGINT, i2722 BIGINT, i2723 BIGINT, i2724 BIGINT, i2725 BIGINT, i2726 BIGINT, i2727 BIGINT, i2728 BIGINT, i2729 BIGINT, i2730 BIGINT, i2731 BIGINT, i2732 BIGINT, i2733 BIGINT, i2734 BIGINT, i2735 BIGINT, i2736 BIGINT, i2737 BIGINT, i2738 BIGINT, i2739 BIGINT, i2740 BIGINT, i2741 BIGINT, i2742 BIGINT, i2743 BIGINT, i2744 BIGINT, i2745 BIGINT, i2746 BIGINT, i2747 BIGINT, i2748 BIGINT, i2749 BIGINT, i2750 BIGINT, i2751 BIGINT, i2752 BIGINT, i2753 BIGINT, i2754 BIGINT, i2755 BIGINT, i2756 BIGINT, i2757 BIGINT, i2758 BIGINT, i2759 BIGINT, i2760 BIGINT, i2761 BIGINT, i2762 BIGINT, i2763 BIGINT, i2764 BIGINT, i2765 BIGINT, i2766 BIGINT, i2767 BIGINT, i2768 BIGINT, i2769 BIGINT, i2770 BIGINT, i2771 BIGINT, i2772 BIGINT, i2773 BIGINT, i2774 BIGINT, i2775 BIGINT, i2776 BIGINT, i2777 BIGINT, i2778 BIGINT, i2779 BIGINT, i2780 BIGINT, i2781 BIGINT, i2782 BIGINT, i2783 BIGINT, i2784 BIGINT, i2785 BIGINT, i2786 BIGINT, i2787 BIGINT, i2788 BIGINT, i2789 BIGINT, i2790 BIGINT, i2791 BIGINT, i2792 BIGINT, i2793 BIGINT, i2794 BIGINT, i2795 BIGINT, i2796 BIGINT, i2797 BIGINT, i2798 BIGINT, i2799 BIGINT, i2800 BIGINT, i2801 BIGINT, i2802 BIGINT, i2803 BIGINT, i2804 BIGINT, i2805 BIGINT, i2806 BIGINT, i2807 BIGINT, i2808 BIGINT, i2809 BIGINT, i2810 BIGINT, i2811 BIGINT, i2812 BIGINT, i2813 BIGINT, i2814 BIGINT, i2815 BIGINT, i2816 BIGINT, i2817 BIGINT, i2818 BIGINT, i2819 BIGINT, i2820 BIGINT, i2821 BIGINT, i2822 BIGINT, i2823 BIGINT, i2824 BIGINT, i2825 BIGINT, i2826 BIGINT, i2827 BIGINT, i2828 BIGINT, i2829 BIGINT, i2830 BIGINT, i2831 BIGINT, i2832 BIGINT, i2833 BIGINT, i2834 BIGINT, i2835 BIGINT, i2836 BIGINT, i2837 BIGINT, i2838 BIGINT, i2839 BIGINT, i2840 BIGINT, i2841 BIGINT, i2842 BIGINT, i2843 BIGINT, i2844 BIGINT, i2845 BIGINT, i2846 BIGINT, i2847 BIGINT, i2848 BIGINT, i2849 BIGINT, i2850 BIGINT, i2851 BIGINT, i2852 BIGINT, i2853 BIGINT, i2854 BIGINT, i2855 BIGINT, i2856 BIGINT, i2857 BIGINT, i2858 BIGINT, i2859 BIGINT, i2860 BIGINT, i2861 BIGINT, i2862 BIGINT, i2863 BIGINT, i2864 BIGINT, i2865 BIGINT, i2866 BIGINT, i2867 BIGINT, i2868 BIGINT, i2869 BIGINT, i2870 BIGINT, i2871 BIGINT, i2872 BIGINT, i2873 BIGINT, i2874 BIGINT, i2875 BIGINT, i2876 BIGINT, i2877 BIGINT, i2878 BIGINT, i2879 BIGINT, i2880 BIGINT, i2881 BIGINT, i2882 BIGINT, i2883 BIGINT, i2884 BIGINT, i2885 BIGINT, i2886 BIGINT, i2887 BIGINT, i2888 BIGINT, i2889 BIGINT, i2890 BIGINT, i2891 BIGINT, i2892 BIGINT, i2893 BIGINT, i2894 BIGINT, i2895 BIGINT, i2896 BIGINT, i2897 BIGINT, i2898 BIGINT, i2899 BIGINT, i2900 BIGINT, i2901 BIGINT, i2902 BIGINT, i2903 BIGINT, i2904 BIGINT, i2905 BIGINT, i2906 BIGINT, i2907 BIGINT, i2908 BIGINT, i2909 BIGINT, i2910 BIGINT, i2911 BIGINT, i2912 BIGINT, i2913 BIGINT, i2914 BIGINT, i2915 BIGINT, i2916 BIGINT, i2917 BIGINT, i2918 BIGINT, i2919 BIGINT, i2920 BIGINT, i2921 BIGINT, i2922 BIGINT, i2923 BIGINT, i2924 BIGINT, i2925 BIGINT, i2926 BIGINT, i2927 BIGINT, i2928 BIGINT, i2929 BIGINT, i2930 BIGINT, i2931 BIGINT, i2932 BIGINT, i2933 BIGINT, i2934 BIGINT, i2935 BIGINT, i2936 BIGINT, i2937 BIGINT, i2938 BIGINT, i2939 BIGINT, i2940 BIGINT, i2941 BIGINT, i2942 BIGINT, i2943 BIGINT, i2944 BIGINT, i2945 BIGINT, i2946 BIGINT, i2947 BIGINT, i2948 BIGINT, i2949 BIGINT, i2950 BIGINT, i2951 BIGINT, i2952 BIGINT, i2953 BIGINT, i2954 BIGINT, i2955 BIGINT, i2956 BIGINT, i2957 BIGINT, i2958 BIGINT, i2959 BIGINT, i2960 BIGINT, i2961 BIGINT, i2962 BIGINT, i2963 BIGINT, i2964 BIGINT, i2965 BIGINT, i2966 BIGINT, i2967 BIGINT, i2968 BIGINT, i2969 BIGINT, i2970 BIGINT, i2971 BIGINT, i2972 BIGINT, i2973 BIGINT, i2974 BIGINT, i2975 BIGINT, i2976 BIGINT, i2977 BIGINT, i2978 BIGINT, i2979 BIGINT, i2980 BIGINT, i2981 BIGINT, i2982 BIGINT, i2983 BIGINT, i2984 BIGINT, i2985 BIGINT, i2986 BIGINT, i2987 BIGINT, i2988 BIGINT, i2989 BIGINT, i2990 BIGINT, i2991 BIGINT, i2992 BIGINT, i2993 BIGINT, i2994 BIGINT, i2995 BIGINT, i2996 BIGINT, i2997 BIGINT, i2998 BIGINT, i2999 BIGINT, i3000 BIGINT, i3001 BIGINT, i3002 BIGINT, i3003 BIGINT, i3004 BIGINT, i3005 BIGINT, i3006 BIGINT, i3007 BIGINT, i3008 BIGINT, i3009 BIGINT, i3010 BIGINT, i3011 BIGINT, i3012 BIGINT, i3013 BIGINT, i3014 BIGINT, i3015 BIGINT, i3016 BIGINT, i3017 BIGINT, i3018 BIGINT, i3019 BIGINT, i3020 BIGINT, i3021 BIGINT, i3022 BIGINT, i3023 BIGINT, i3024 BIGINT, i3025 BIGINT, i3026 BIGINT, i3027 BIGINT, i3028 BIGINT, i3029 BIGINT, i3030 BIGINT, i3031 BIGINT, i3032 BIGINT, i3033 BIGINT, i3034 BIGINT, i3035 BIGINT, i3036 BIGINT, i3037 BIGINT, i3038 BIGINT, i3039 BIGINT, i3040 BIGINT, i3041 BIGINT, i3042 BIGINT, i3043 BIGINT, i3044 BIGINT, i3045 BIGINT, i3046 BIGINT, i3047 BIGINT, i3048 BIGINT, i3049 BIGINT, i3050 BIGINT, i3051 BIGINT, i3052 BIGINT, i3053 BIGINT, i3054 BIGINT, i3055 BIGINT, i3056 BIGINT, i3057 BIGINT, i3058 BIGINT, i3059 BIGINT, i3060 BIGINT, i3061 BIGINT, i3062 BIGINT, i3063 BIGINT, i3064 BIGINT, i3065 BIGINT, i3066 BIGINT, i3067 BIGINT, i3068 BIGINT, i3069 BIGINT, i3070 BIGINT, i3071 BIGINT, i3072 BIGINT, i3073 BIGINT, i3074 BIGINT, i3075 BIGINT, i3076 BIGINT, i3077 BIGINT, i3078 BIGINT, i3079 BIGINT, i3080 BIGINT, i3081 BIGINT, i3082 BIGINT, i3083 BIGINT, i3084 BIGINT, i3085 BIGINT, i3086 BIGINT, i3087 BIGINT, i3088 BIGINT, i3089 BIGINT, i3090 BIGINT, i3091 BIGINT, i3092 BIGINT, i3093 BIGINT, i3094 BIGINT, i3095 BIGINT, i3096 BIGINT, i3097 BIGINT, i3098 BIGINT, i3099 BIGINT, i3100 BIGINT, i3101 BIGINT, i3102 BIGINT, i3103 BIGINT, i3104 BIGINT, i3105 BIGINT, i3106 BIGINT, i3107 BIGINT, i3108 BIGINT, i3109 BIGINT, i3110 BIGINT, i3111 BIGINT, i3112 BIGINT, i3113 BIGINT, i3114 BIGINT, i3115 BIGINT, i3116 BIGINT, i3117 BIGINT, i3118 BIGINT, i3119 BIGINT, i3120 BIGINT, i3121 BIGINT, i3122 BIGINT, i3123 BIGINT, i3124 BIGINT, i3125 BIGINT, i3126 BIGINT, i3127 BIGINT, i3128 BIGINT, i3129 BIGINT, i3130 BIGINT, i3131 BIGINT, i3132 BIGINT, i3133 BIGINT, i3134 BIGINT, i3135 BIGINT, i3136 BIGINT, i3137 BIGINT, i3138 BIGINT, i3139 BIGINT, i3140 BIGINT, i3141 BIGINT, i3142 BIGINT, i3143 BIGINT, i3144 BIGINT, i3145 BIGINT, i3146 BIGINT, i3147 BIGINT, i3148 BIGINT, i3149 BIGINT, i3150 BIGINT, i3151 BIGINT, i3152 BIGINT, i3153 BIGINT, i3154 BIGINT, i3155 BIGINT, i3156 BIGINT, i3157 BIGINT, i3158 BIGINT, i3159 BIGINT, i3160 BIGINT, i3161 BIGINT, i3162 BIGINT, i3163 BIGINT, i3164 BIGINT, i3165 BIGINT, i3166 BIGINT, i3167 BIGINT, i3168 BIGINT, i3169 BIGINT, i3170 BIGINT, i3171 BIGINT, i3172 BIGINT, i3173 BIGINT, i3174 BIGINT, i3175 BIGINT, i3176 BIGINT, i3177 BIGINT, i3178 BIGINT, i3179 BIGINT, i3180 BIGINT, i3181 BIGINT, i3182 BIGINT, i3183 BIGINT, i3184 BIGINT, i3185 BIGINT, i3186 BIGINT, i3187 BIGINT, i3188 BIGINT, i3189 BIGINT, i3190 BIGINT, i3191 BIGINT, i3192 BIGINT, i3193 BIGINT, i3194 BIGINT, i3195 BIGINT, i3196 BIGINT, i3197 BIGINT, i3198 BIGINT, i3199 BIGINT, i3200 BIGINT, i3201 BIGINT, i3202 BIGINT, i3203 BIGINT, i3204 BIGINT, i3205 BIGINT, i3206 BIGINT, i3207 BIGINT, i3208 BIGINT, i3209 BIGINT, i3210 BIGINT, i3211 BIGINT, i3212 BIGINT, i3213 BIGINT, i3214 BIGINT, i3215 BIGINT, i3216 BIGINT, i3217 BIGINT, i3218 BIGINT, i3219 BIGINT, i3220 BIGINT, i3221 BIGINT, i3222 BIGINT, i3223 BIGINT, i3224 BIGINT, i3225 BIGINT, i3226 BIGINT, i3227 BIGINT, i3228 BIGINT, i3229 BIGINT, i3230 BIGINT, i3231 BIGINT, i3232 BIGINT, i3233 BIGINT, i3234 BIGINT, i3235 BIGINT, i3236 BIGINT, i3237 BIGINT, i3238 BIGINT, i3239 BIGINT, i3240 BIGINT, i3241 BIGINT, i3242 BIGINT, i3243 BIGINT, i3244 BIGINT, i3245 BIGINT, i3246 BIGINT, i3247 BIGINT, i3248 BIGINT, i3249 BIGINT, i3250 BIGINT, i3251 BIGINT, i3252 BIGINT, i3253 BIGINT, i3254 BIGINT, i3255 BIGINT, i3256 BIGINT, i3257 BIGINT, i3258 BIGINT, i3259 BIGINT, i3260 BIGINT, i3261 BIGINT, i3262 BIGINT, i3263 BIGINT, i3264 BIGINT, i3265 BIGINT, i3266 BIGINT, i3267 BIGINT, i3268 BIGINT, i3269 BIGINT, i3270 BIGINT, i3271 BIGINT, i3272 BIGINT, i3273 BIGINT, i3274 BIGINT, i3275 BIGINT, i3276 BIGINT, i3277 BIGINT, i3278 BIGINT, i3279 BIGINT, i3280 BIGINT, i3281 BIGINT, i3282 BIGINT, i3283 BIGINT, i3284 BIGINT, i3285 BIGINT, i3286 BIGINT, i3287 BIGINT, i3288 BIGINT, i3289 BIGINT, i3290 BIGINT, i3291 BIGINT, i3292 BIGINT, i3293 BIGINT, i3294 BIGINT, i3295 BIGINT, i3296 BIGINT, i3297 BIGINT, i3298 BIGINT, i3299 BIGINT, i3300 BIGINT, i3301 BIGINT, i3302 BIGINT, i3303 BIGINT, i3304 BIGINT, i3305 BIGINT, i3306 BIGINT, i3307 BIGINT, i3308 BIGINT, i3309 BIGINT, i3310 BIGINT, i3311 BIGINT, i3312 BIGINT, i3313 BIGINT, i3314 BIGINT, i3315 BIGINT, i3316 BIGINT, i3317 BIGINT, i3318 BIGINT, i3319 BIGINT, i3320 BIGINT, i3321 BIGINT, i3322 BIGINT, i3323 BIGINT, i3324 BIGINT, i3325 BIGINT, i3326 BIGINT, i3327 BIGINT, i3328 BIGINT, i3329 BIGINT, i3330 BIGINT, i3331 BIGINT, i3332 BIGINT, i3333 BIGINT, i3334 BIGINT, i3335 BIGINT, i3336 BIGINT, i3337 BIGINT, i3338 BIGINT, i3339 BIGINT, i3340 BIGINT, i3341 BIGINT, i3342 BIGINT, i3343 BIGINT, i3344 BIGINT, i3345 BIGINT, i3346 BIGINT, i3347 BIGINT, i3348 BIGINT, i3349 BIGINT, i3350 BIGINT, i3351 BIGINT, i3352 BIGINT, i3353 BIGINT, i3354 BIGINT, i3355 BIGINT, i3356 BIGINT, i3357 BIGINT, i3358 BIGINT, i3359 BIGINT, i3360 BIGINT, i3361 BIGINT, i3362 BIGINT, i3363 BIGINT, i3364 BIGINT, i3365 BIGINT, i3366 BIGINT, i3367 BIGINT, i3368 BIGINT, i3369 BIGINT, i3370 BIGINT, i3371 BIGINT, i3372 BIGINT, i3373 BIGINT, i3374 BIGINT, i3375 BIGINT, i3376 BIGINT, i3377 BIGINT, i3378 BIGINT, i3379 BIGINT, i3380 BIGINT, i3381 BIGINT, i3382 BIGINT, i3383 BIGINT, i3384 BIGINT, i3385 BIGINT, i3386 BIGINT, i3387 BIGINT, i3388 BIGINT, i3389 BIGINT, i3390 BIGINT, i3391 BIGINT, i3392 BIGINT, i3393 BIGINT, i3394 BIGINT, i3395 BIGINT, i3396 BIGINT, i3397 BIGINT, i3398 BIGINT, i3399 BIGINT, i3400 BIGINT, i3401 BIGINT, i3402 BIGINT, i3403 BIGINT, i3404 BIGINT, i3405 BIGINT, i3406 BIGINT, i3407 BIGINT, i3408 BIGINT, i3409 BIGINT, i3410 BIGINT, i3411 BIGINT, i3412 BIGINT, i3413 BIGINT, i3414 BIGINT, i3415 BIGINT, i3416 BIGINT, i3417 BIGINT, i3418 BIGINT, i3419 BIGINT, i3420 BIGINT, i3421 BIGINT, i3422 BIGINT, i3423 BIGINT, i3424 BIGINT, i3425 BIGINT, i3426 BIGINT, i3427 BIGINT, i3428 BIGINT, i3429 BIGINT, i3430 BIGINT, i3431 BIGINT, i3432 BIGINT, i3433 BIGINT, i3434 BIGINT, i3435 BIGINT, i3436 BIGINT, i3437 BIGINT, i3438 BIGINT, i3439 BIGINT, i3440 BIGINT, i3441 BIGINT, i3442 BIGINT, i3443 BIGINT, i3444 BIGINT, i3445 BIGINT, i3446 BIGINT, i3447 BIGINT, i3448 BIGINT, i3449 BIGINT, i3450 BIGINT, i3451 BIGINT, i3452 BIGINT, i3453 BIGINT, i3454 BIGINT, i3455 BIGINT, i3456 BIGINT, i3457 BIGINT, i3458 BIGINT, i3459 BIGINT, i3460 BIGINT, i3461 BIGINT, i3462 BIGINT, i3463 BIGINT, i3464 BIGINT, i3465 BIGINT, i3466 BIGINT, i3467 BIGINT, i3468 BIGINT, i3469 BIGINT, i3470 BIGINT, i3471 BIGINT, i3472 BIGINT, i3473 BIGINT, i3474 BIGINT, i3475 BIGINT, i3476 BIGINT, i3477 BIGINT, i3478 BIGINT, i3479 BIGINT, i3480 BIGINT, i3481 BIGINT, i3482 BIGINT, i3483 BIGINT, i3484 BIGINT, i3485 BIGINT, i3486 BIGINT, i3487 BIGINT, i3488 BIGINT, i3489 BIGINT, i3490 BIGINT, i3491 BIGINT, i3492 BIGINT, i3493 BIGINT, i3494 BIGINT, i3495 BIGINT, i3496 BIGINT, i3497 BIGINT, i3498 BIGINT, i3499 BIGINT, i3500 BIGINT, i3501 BIGINT, i3502 BIGINT, i3503 BIGINT, i3504 BIGINT, i3505 BIGINT, i3506 BIGINT, i3507 BIGINT, i3508 BIGINT, i3509 BIGINT, i3510 BIGINT, i3511 BIGINT, i3512 BIGINT, i3513 BIGINT, i3514 BIGINT, i3515 BIGINT, i3516 BIGINT, i3517 BIGINT, i3518 BIGINT, i3519 BIGINT, i3520 BIGINT, i3521 BIGINT, i3522 BIGINT, i3523 BIGINT, i3524 BIGINT, i3525 BIGINT, i3526 BIGINT, i3527 BIGINT, i3528 BIGINT, i3529 BIGINT, i3530 BIGINT, i3531 BIGINT, i3532 BIGINT, i3533 BIGINT, i3534 BIGINT, i3535 BIGINT, i3536 BIGINT, i3537 BIGINT, i3538 BIGINT, i3539 BIGINT, i3540 BIGINT, i3541 BIGINT, i3542 BIGINT, i3543 BIGINT, i3544 BIGINT, i3545 BIGINT, i3546 BIGINT, i3547 BIGINT, i3548 BIGINT, i3549 BIGINT, i3550 BIGINT, i3551 BIGINT, i3552 BIGINT, i3553 BIGINT, i3554 BIGINT, i3555 BIGINT, i3556 BIGINT, i3557 BIGINT, i3558 BIGINT, i3559 BIGINT, i3560 BIGINT, i3561 BIGINT, i3562 BIGINT, i3563 BIGINT, i3564 BIGINT, i3565 BIGINT, i3566 BIGINT, i3567 BIGINT, i3568 BIGINT, i3569 BIGINT, i3570 BIGINT, i3571 BIGINT, i3572 BIGINT, i3573 BIGINT, i3574 BIGINT, i3575 BIGINT, i3576 BIGINT, i3577 BIGINT, i3578 BIGINT, i3579 BIGINT, i3580 BIGINT, i3581 BIGINT, i3582 BIGINT, i3583 BIGINT, i3584 BIGINT, i3585 BIGINT, i3586 BIGINT, i3587 BIGINT, i3588 BIGINT, i3589 BIGINT, i3590 BIGINT, i3591 BIGINT, i3592 BIGINT, i3593 BIGINT, i3594 BIGINT, i3595 BIGINT, i3596 BIGINT, i3597 BIGINT, i3598 BIGINT, i3599 BIGINT, i3600 BIGINT, i3601 BIGINT, i3602 BIGINT, i3603 BIGINT, i3604 BIGINT, i3605 BIGINT, i3606 BIGINT, i3607 BIGINT, i3608 BIGINT, i3609 BIGINT, i3610 BIGINT, i3611 BIGINT, i3612 BIGINT, i3613 BIGINT, i3614 BIGINT, i3615 BIGINT, i3616 BIGINT, i3617 BIGINT, i3618 BIGINT, i3619 BIGINT, i3620 BIGINT, i3621 BIGINT, i3622 BIGINT, i3623 BIGINT, i3624 BIGINT, i3625 BIGINT, i3626 BIGINT, i3627 BIGINT, i3628 BIGINT, i3629 BIGINT, i3630 BIGINT, i3631 BIGINT, i3632 BIGINT, i3633 BIGINT, i3634 BIGINT, i3635 BIGINT, i3636 BIGINT, i3637 BIGINT, i3638 BIGINT, i3639 BIGINT, i3640 BIGINT, i3641 BIGINT, i3642 BIGINT, i3643 BIGINT, i3644 BIGINT, i3645 BIGINT, i3646 BIGINT, i3647 BIGINT, i3648 BIGINT, i3649 BIGINT, i3650 BIGINT, i3651 BIGINT, i3652 BIGINT, i3653 BIGINT, i3654 BIGINT, i3655 BIGINT, i3656 BIGINT, i3657 BIGINT, i3658 BIGINT, i3659 BIGINT, i3660 BIGINT, i3661 BIGINT, i3662 BIGINT, i3663 BIGINT, i3664 BIGINT, i3665 BIGINT, i3666 BIGINT, i3667 BIGINT, i3668 BIGINT, i3669 BIGINT, i3670 BIGINT, i3671 BIGINT, i3672 BIGINT, i3673 BIGINT, i3674 BIGINT, i3675 BIGINT, i3676 BIGINT, i3677 BIGINT, i3678 BIGINT, i3679 BIGINT, i3680 BIGINT, i3681 BIGINT, i3682 BIGINT, i3683 BIGINT, i3684 BIGINT, i3685 BIGINT, i3686 BIGINT, i3687 BIGINT, i3688 BIGINT, i3689 BIGINT, i3690 BIGINT, i3691 BIGINT, i3692 BIGINT, i3693 BIGINT, i3694 BIGINT, i3695 BIGINT, i3696 BIGINT, i3697 BIGINT, i3698 BIGINT, i3699 BIGINT, i3700 BIGINT, i3701 BIGINT, i3702 BIGINT, i3703 BIGINT, i3704 BIGINT, i3705 BIGINT, i3706 BIGINT, i3707 BIGINT, i3708 BIGINT, i3709 BIGINT, i3710 BIGINT, i3711 BIGINT, i3712 BIGINT, i3713 BIGINT, i3714 BIGINT, i3715 BIGINT, i3716 BIGINT, i3717 BIGINT, i3718 BIGINT, i3719 BIGINT, i3720 BIGINT, i3721 BIGINT, i3722 BIGINT, i3723 BIGINT, i3724 BIGINT, i3725 BIGINT, i3726 BIGINT, i3727 BIGINT, i3728 BIGINT, i3729 BIGINT, i3730 BIGINT, i3731 BIGINT, i3732 BIGINT, i3733 BIGINT, i3734 BIGINT, i3735 BIGINT, i3736 BIGINT, i3737 BIGINT, i3738 BIGINT, i3739 BIGINT, i3740 BIGINT, i3741 BIGINT, i3742 BIGINT, i3743 BIGINT, i3744 BIGINT, i3745 BIGINT, i3746 BIGINT, i3747 BIGINT, i3748 BIGINT, i3749 BIGINT, i3750 BIGINT, i3751 BIGINT, i3752 BIGINT, i3753 BIGINT, i3754 BIGINT, i3755 BIGINT, i3756 BIGINT, i3757 BIGINT, i3758 BIGINT, i3759 BIGINT, i3760 BIGINT, i3761 BIGINT, i3762 BIGINT, i3763 BIGINT, i3764 BIGINT, i3765 BIGINT, i3766 BIGINT, i3767 BIGINT, i3768 BIGINT, i3769 BIGINT, i3770 BIGINT, i3771 BIGINT, i3772 BIGINT, i3773 BIGINT, i3774 BIGINT, i3775 BIGINT, i3776 BIGINT, i3777 BIGINT, i3778 BIGINT, i3779 BIGINT, i3780 BIGINT, i3781 BIGINT, i3782 BIGINT, i3783 BIGINT, i3784 BIGINT, i3785 BIGINT, i3786 BIGINT, i3787 BIGINT, i3788 BIGINT, i3789 BIGINT, i3790 BIGINT, i3791 BIGINT, i3792 BIGINT, i3793 BIGINT, i3794 BIGINT, i3795 BIGINT, i3796 BIGINT, i3797 BIGINT, i3798 BIGINT, i3799 BIGINT, i3800 BIGINT, i3801 BIGINT, i3802 BIGINT, i3803 BIGINT, i3804 BIGINT, i3805 BIGINT, i3806 BIGINT, i3807 BIGINT, i3808 BIGINT, i3809 BIGINT, i3810 BIGINT, i3811 BIGINT, i3812 BIGINT, i3813 BIGINT, i3814 BIGINT, i3815 BIGINT, i3816 BIGINT, i3817 BIGINT, i3818 BIGINT, i3819 BIGINT, i3820 BIGINT, i3821 BIGINT, i3822 BIGINT, i3823 BIGINT, i3824 BIGINT, i3825 BIGINT, i3826 BIGINT, i3827 BIGINT, i3828 BIGINT, i3829 BIGINT, i3830 BIGINT, i3831 BIGINT, i3832 BIGINT, i3833 BIGINT, i3834 BIGINT, i3835 BIGINT, i3836 BIGINT, i3837 BIGINT, i3838 BIGINT, i3839 BIGINT, i3840 BIGINT, i3841 BIGINT, i3842 BIGINT, i3843 BIGINT, i3844 BIGINT, i3845 BIGINT, i3846 BIGINT, i3847 BIGINT, i3848 BIGINT, i3849 BIGINT, i3850 BIGINT, i3851 BIGINT, i3852 BIGINT, i3853 BIGINT, i3854 BIGINT, i3855 BIGINT, i3856 BIGINT, i3857 BIGINT, i3858 BIGINT, i3859 BIGINT, i3860 BIGINT, i3861 BIGINT, i3862 BIGINT, i3863 BIGINT, i3864 BIGINT, i3865 BIGINT, i3866 BIGINT, i3867 BIGINT, i3868 BIGINT, i3869 BIGINT, i3870 BIGINT, i3871 BIGINT, i3872 BIGINT, i3873 BIGINT, i3874 BIGINT, i3875 BIGINT, i3876 BIGINT, i3877 BIGINT, i3878 BIGINT, i3879 BIGINT, i3880 BIGINT, i3881 BIGINT, i3882 BIGINT, i3883 BIGINT, i3884 BIGINT, i3885 BIGINT, i3886 BIGINT, i3887 BIGINT, i3888 BIGINT, i3889 BIGINT, i3890 BIGINT, i3891 BIGINT, i3892 BIGINT, i3893 BIGINT, i3894 BIGINT, i3895 BIGINT, i3896 BIGINT, i3897 BIGINT, i3898 BIGINT, i3899 BIGINT, i3900 BIGINT, i3901 BIGINT, i3902 BIGINT, i3903 BIGINT, i3904 BIGINT, i3905 BIGINT, i3906 BIGINT, i3907 BIGINT, i3908 BIGINT, i3909 BIGINT, i3910 BIGINT, i3911 BIGINT, i3912 BIGINT, i3913 BIGINT, i3914 BIGINT, i3915 BIGINT, i3916 BIGINT, i3917 BIGINT, i3918 BIGINT, i3919 BIGINT, i3920 BIGINT, i3921 BIGINT, i3922 BIGINT, i3923 BIGINT, i3924 BIGINT, i3925 BIGINT, i3926 BIGINT, i3927 BIGINT, i3928 BIGINT, i3929 BIGINT, i3930 BIGINT, i3931 BIGINT, i3932 BIGINT, i3933 BIGINT, i3934 BIGINT, i3935 BIGINT, i3936 BIGINT, i3937 BIGINT, i3938 BIGINT, i3939 BIGINT, i3940 BIGINT, i3941 BIGINT, i3942 BIGINT, i3943 BIGINT, i3944 BIGINT, i3945 BIGINT, i3946 BIGINT, i3947 BIGINT, i3948 BIGINT, i3949 BIGINT, i3950 BIGINT, i3951 BIGINT, i3952 BIGINT, i3953 BIGINT, i3954 BIGINT, i3955 BIGINT, i3956 BIGINT, i3957 BIGINT, i3958 BIGINT, i3959 BIGINT, i3960 BIGINT, i3961 BIGINT, i3962 BIGINT, i3963 BIGINT, i3964 BIGINT, i3965 BIGINT, i3966 BIGINT, i3967 BIGINT, i3968 BIGINT, i3969 BIGINT, i3970 BIGINT, i3971 BIGINT, i3972 BIGINT, i3973 BIGINT, i3974 BIGINT, i3975 BIGINT, i3976 BIGINT, i3977 BIGINT, i3978 BIGINT, i3979 BIGINT, i3980 BIGINT, i3981 BIGINT, i3982 BIGINT, i3983 BIGINT, i3984 BIGINT, i3985 BIGINT, i3986 BIGINT, i3987 BIGINT, i3988 BIGINT, i3989 BIGINT, i3990 BIGINT, i3991 BIGINT, i3992 BIGINT, i3993 BIGINT, i3994 BIGINT, i3995 BIGINT, i3996 BIGINT, i3997 BIGINT, i3998 BIGINT, i3999 BIGINT, i4000 BIGINT, i4001 BIGINT, i4002 BIGINT, i4003 BIGINT, i4004 BIGINT, i4005 BIGINT, i4006 BIGINT, i4007 BIGINT, i4008 BIGINT, i4009 BIGINT, i4010 BIGINT, i4011 BIGINT, i4012 BIGINT, i4013 BIGINT, i4014 BIGINT, i4015 BIGINT, i4016 BIGINT, i4017 BIGINT, i4018 BIGINT, i4019 BIGINT, i4020 BIGINT, i4021 BIGINT, i4022 BIGINT, i4023 BIGINT, i4024 BIGINT, i4025 BIGINT, i4026 BIGINT, i4027 BIGINT, i4028 BIGINT, i4029 BIGINT, i4030 BIGINT, i4031 BIGINT, i4032 BIGINT, i4033 BIGINT, i4034 BIGINT, i4035 BIGINT, i4036 BIGINT, i4037 BIGINT, i4038 BIGINT, i4039 BIGINT, i4040 BIGINT, i4041 BIGINT, i4042 BIGINT, i4043 BIGINT, i4044 BIGINT, i4045 BIGINT, i4046 BIGINT, i4047 BIGINT, i4048 BIGINT, i4049 BIGINT, i4050 BIGINT, i4051 BIGINT, i4052 BIGINT, i4053 BIGINT, i4054 BIGINT, i4055 BIGINT, i4056 BIGINT, i4057 BIGINT, i4058 BIGINT, i4059 BIGINT, i4060 BIGINT, i4061 BIGINT, i4062 BIGINT, i4063 BIGINT, i4064 BIGINT, i4065 BIGINT, i4066 BIGINT, i4067 BIGINT, i4068 BIGINT, i4069 BIGINT, i4070 BIGINT, i4071 BIGINT, i4072 BIGINT, i4073 BIGINT, i4074 BIGINT, i4075 BIGINT, i4076 BIGINT, i4077 BIGINT, i4078 BIGINT, i4079 BIGINT, i4080 BIGINT, i4081 BIGINT, i4082 BIGINT, i4083 BIGINT, i4084 BIGINT, i4085 BIGINT, i4086 BIGINT, i4087 BIGINT, i4088 BIGINT, i4089 BIGINT, i4090 BIGINT, i4091 BIGINT, i4092 BIGINT, i4093 BIGINT, i4094 BIGINT, i4095 BIGINT, i4096 BIGINT, i4097 BIGINT, i4098 BIGINT, i4099 BIGINT, i4100 BIGINT, i4101 BIGINT, i4102 BIGINT, i4103 BIGINT, i4104 BIGINT, i4105 BIGINT, i4106 BIGINT, i4107 BIGINT, i4108 BIGINT, i4109 BIGINT, i4110 BIGINT, i4111 BIGINT, i4112 BIGINT, i4113 BIGINT, i4114 BIGINT, i4115 BIGINT, i4116 BIGINT, i4117 BIGINT, i4118 BIGINT, i4119 BIGINT, i4120 BIGINT, i4121 BIGINT, i4122 BIGINT, i4123 BIGINT, i4124 BIGINT, i4125 BIGINT, i4126 BIGINT, i4127 BIGINT, i4128 BIGINT, i4129 BIGINT, i4130 BIGINT, i4131 BIGINT, i4132 BIGINT, i4133 BIGINT, i4134 BIGINT, i4135 BIGINT, i4136 BIGINT, i4137 BIGINT, i4138 BIGINT, i4139 BIGINT, i4140 BIGINT, i4141 BIGINT, i4142 BIGINT, i4143 BIGINT, i4144 BIGINT, i4145 BIGINT, i4146 BIGINT, i4147 BIGINT, i4148 BIGINT, i4149 BIGINT, i4150 BIGINT, i4151 BIGINT, i4152 BIGINT, i4153 BIGINT, i4154 BIGINT, i4155 BIGINT, i4156 BIGINT, i4157 BIGINT, i4158 BIGINT, i4159 BIGINT, i4160 BIGINT, i4161 BIGINT, i4162 BIGINT, i4163 BIGINT, i4164 BIGINT, i4165 BIGINT, i4166 BIGINT, i4167 BIGINT, i4168 BIGINT, i4169 BIGINT, i4170 BIGINT, i4171 BIGINT, i4172 BIGINT, i4173 BIGINT, i4174 BIGINT, i4175 BIGINT, i4176 BIGINT, i4177 BIGINT, i4178 BIGINT, i4179 BIGINT, i4180 BIGINT, i4181 BIGINT, i4182 BIGINT, i4183 BIGINT, i4184 BIGINT, i4185 BIGINT, i4186 BIGINT, i4187 BIGINT, i4188 BIGINT, i4189 BIGINT, i4190 BIGINT, i4191 BIGINT, i4192 BIGINT, i4193 BIGINT, i4194 BIGINT, i4195 BIGINT, i4196 BIGINT, i4197 BIGINT, i4198 BIGINT, i4199 BIGINT, i4200 BIGINT, i4201 BIGINT, i4202 BIGINT, i4203 BIGINT, i4204 BIGINT, i4205 BIGINT, i4206 BIGINT, i4207 BIGINT, i4208 BIGINT, i4209 BIGINT, i4210 BIGINT, i4211 BIGINT, i4212 BIGINT, i4213 BIGINT, i4214 BIGINT, i4215 BIGINT, i4216 BIGINT, i4217 BIGINT, i4218 BIGINT, i4219 BIGINT, i4220 BIGINT, i4221 BIGINT, i4222 BIGINT, i4223 BIGINT, i4224 BIGINT, i4225 BIGINT, i4226 BIGINT, i4227 BIGINT, i4228 BIGINT, i4229 BIGINT, i4230 BIGINT, i4231 BIGINT, i4232 BIGINT, i4233 BIGINT, i4234 BIGINT, i4235 BIGINT, i4236 BIGINT, i4237 BIGINT, i4238 BIGINT, i4239 BIGINT, i4240 BIGINT, i4241 BIGINT, i4242 BIGINT, i4243 BIGINT, i4244 BIGINT, i4245 BIGINT, i4246 BIGINT, i4247 BIGINT, i4248 BIGINT, i4249 BIGINT, i4250 BIGINT, i4251 BIGINT, i4252 BIGINT, i4253 BIGINT, i4254 BIGINT, i4255 BIGINT, i4256 BIGINT, i4257 BIGINT, i4258 BIGINT, i4259 BIGINT, i4260 BIGINT, i4261 BIGINT, i4262 BIGINT, i4263 BIGINT, i4264 BIGINT, i4265 BIGINT, i4266 BIGINT, i4267 BIGINT, i4268 BIGINT, i4269 BIGINT, i4270 BIGINT, i4271 BIGINT, i4272 BIGINT, i4273 BIGINT, i4274 BIGINT, i4275 BIGINT, i4276 BIGINT, i4277 BIGINT, i4278 BIGINT, i4279 BIGINT, i4280 BIGINT, i4281 BIGINT, i4282 BIGINT, i4283 BIGINT, i4284 BIGINT, i4285 BIGINT, i4286 BIGINT, i4287 BIGINT, i4288 BIGINT, i4289 BIGINT, i4290 BIGINT, i4291 BIGINT, i4292 BIGINT, i4293 BIGINT, i4294 BIGINT, i4295 BIGINT, i4296 BIGINT, i4297 BIGINT, i4298 BIGINT, i4299 BIGINT, i4300 BIGINT, i4301 BIGINT, i4302 BIGINT, i4303 BIGINT, i4304 BIGINT, i4305 BIGINT, i4306 BIGINT, i4307 BIGINT, i4308 BIGINT, i4309 BIGINT, i4310 BIGINT, i4311 BIGINT, i4312 BIGINT, i4313 BIGINT, i4314 BIGINT, i4315 BIGINT, i4316 BIGINT, i4317 BIGINT, i4318 BIGINT, i4319 BIGINT, i4320 BIGINT, i4321 BIGINT, i4322 BIGINT, i4323 BIGINT, i4324 BIGINT, i4325 BIGINT, i4326 BIGINT, i4327 BIGINT, i4328 BIGINT, i4329 BIGINT, i4330 BIGINT, i4331 BIGINT, i4332 BIGINT, i4333 BIGINT, i4334 BIGINT, i4335 BIGINT, i4336 BIGINT, i4337 BIGINT, i4338 BIGINT, i4339 BIGINT, i4340 BIGINT, i4341 BIGINT, i4342 BIGINT, i4343 BIGINT, i4344 BIGINT, i4345 BIGINT, i4346 BIGINT, i4347 BIGINT, i4348 BIGINT, i4349 BIGINT, i4350 BIGINT, i4351 BIGINT, i4352 BIGINT, i4353 BIGINT, i4354 BIGINT, i4355 BIGINT, i4356 BIGINT, i4357 BIGINT, i4358 BIGINT, i4359 BIGINT, i4360 BIGINT, i4361 BIGINT, i4362 BIGINT, i4363 BIGINT, i4364 BIGINT, i4365 BIGINT, i4366 BIGINT, i4367 BIGINT, i4368 BIGINT, i4369 BIGINT, i4370 BIGINT, i4371 BIGINT, i4372 BIGINT, i4373 BIGINT, i4374 BIGINT, i4375 BIGINT, i4376 BIGINT, i4377 BIGINT, i4378 BIGINT, i4379 BIGINT, i4380 BIGINT, i4381 BIGINT, i4382 BIGINT, i4383 BIGINT, i4384 BIGINT, i4385 BIGINT, i4386 BIGINT, i4387 BIGINT, i4388 BIGINT, i4389 BIGINT, i4390 BIGINT, i4391 BIGINT, i4392 BIGINT, i4393 BIGINT, i4394 BIGINT, i4395 BIGINT, i4396 BIGINT, i4397 BIGINT, i4398 BIGINT, i4399 BIGINT, i4400 BIGINT, i4401 BIGINT, i4402 BIGINT, i4403 BIGINT, i4404 BIGINT, i4405 BIGINT, i4406 BIGINT, i4407 BIGINT, i4408 BIGINT, i4409 BIGINT, i4410 BIGINT, i4411 BIGINT, i4412 BIGINT, i4413 BIGINT, i4414 BIGINT, i4415 BIGINT, i4416 BIGINT, i4417 BIGINT, i4418 BIGINT, i4419 BIGINT, i4420 BIGINT, i4421 BIGINT, i4422 BIGINT, i4423 BIGINT, i4424 BIGINT, i4425 BIGINT, i4426 BIGINT, i4427 BIGINT, i4428 BIGINT, i4429 BIGINT, i4430 BIGINT, i4431 BIGINT, i4432 BIGINT, i4433 BIGINT, i4434 BIGINT, i4435 BIGINT, i4436 BIGINT, i4437 BIGINT, i4438 BIGINT, i4439 BIGINT, i4440 BIGINT, i4441 BIGINT, i4442 BIGINT, i4443 BIGINT, i4444 BIGINT, i4445 BIGINT, i4446 BIGINT, i4447 BIGINT, i4448 BIGINT, i4449 BIGINT, i4450 BIGINT, i4451 BIGINT, i4452 BIGINT, i4453 BIGINT, i4454 BIGINT, i4455 BIGINT, i4456 BIGINT, i4457 BIGINT, i4458 BIGINT, i4459 BIGINT, i4460 BIGINT, i4461 BIGINT, i4462 BIGINT, i4463 BIGINT, i4464 BIGINT, i4465 BIGINT, i4466 BIGINT, i4467 BIGINT, i4468 BIGINT, i4469 BIGINT, i4470 BIGINT, i4471 BIGINT, i4472 BIGINT, i4473 BIGINT, i4474 BIGINT, i4475 BIGINT, i4476 BIGINT, i4477 BIGINT, i4478 BIGINT, i4479 BIGINT, i4480 BIGINT, i4481 BIGINT, i4482 BIGINT, i4483 BIGINT, i4484 BIGINT, i4485 BIGINT, i4486 BIGINT, i4487 BIGINT, i4488 BIGINT, i4489 BIGINT, i4490 BIGINT, i4491 BIGINT, i4492 BIGINT, i4493 BIGINT, i4494 BIGINT, i4495 BIGINT, i4496 BIGINT, i4497 BIGINT, i4498 BIGINT, i4499 BIGINT, i4500 BIGINT, i4501 BIGINT, i4502 BIGINT, i4503 BIGINT, i4504 BIGINT, i4505 BIGINT, i4506 BIGINT, i4507 BIGINT, i4508 BIGINT, i4509 BIGINT, i4510 BIGINT, i4511 BIGINT, i4512 BIGINT, i4513 BIGINT, i4514 BIGINT, i4515 BIGINT, i4516 BIGINT, i4517 BIGINT, i4518 BIGINT, i4519 BIGINT, i4520 BIGINT, i4521 BIGINT, i4522 BIGINT, i4523 BIGINT, i4524 BIGINT, i4525 BIGINT, i4526 BIGINT, i4527 BIGINT, i4528 BIGINT, i4529 BIGINT, i4530 BIGINT, i4531 BIGINT, i4532 BIGINT, i4533 BIGINT, i4534 BIGINT, i4535 BIGINT, i4536 BIGINT, i4537 BIGINT, i4538 BIGINT, i4539 BIGINT, i4540 BIGINT, i4541 BIGINT, i4542 BIGINT, i4543 BIGINT, i4544 BIGINT, i4545 BIGINT, i4546 BIGINT, i4547 BIGINT, i4548 BIGINT, i4549 BIGINT, i4550 BIGINT, i4551 BIGINT, i4552 BIGINT, i4553 BIGINT, i4554 BIGINT, i4555 BIGINT, i4556 BIGINT, i4557 BIGINT, i4558 BIGINT, i4559 BIGINT, i4560 BIGINT, i4561 BIGINT, i4562 BIGINT, i4563 BIGINT, i4564 BIGINT, i4565 BIGINT, i4566 BIGINT, i4567 BIGINT, i4568 BIGINT, i4569 BIGINT, i4570 BIGINT, i4571 BIGINT, i4572 BIGINT, i4573 BIGINT, i4574 BIGINT, i4575 BIGINT, i4576 BIGINT, i4577 BIGINT, i4578 BIGINT, i4579 BIGINT, i4580 BIGINT, i4581 BIGINT, i4582 BIGINT, i4583 BIGINT, i4584 BIGINT, i4585 BIGINT, i4586 BIGINT, i4587 BIGINT, i4588 BIGINT, i4589 BIGINT, i4590 BIGINT, i4591 BIGINT, i4592 BIGINT, i4593 BIGINT, i4594 BIGINT, i4595 BIGINT, i4596 BIGINT, i4597 BIGINT, i4598 BIGINT, i4599 BIGINT, i4600 BIGINT, i4601 BIGINT, i4602 BIGINT, i4603 BIGINT, i4604 BIGINT, i4605 BIGINT, i4606 BIGINT, i4607 BIGINT, i4608 BIGINT, i4609 BIGINT, i4610 BIGINT, i4611 BIGINT, i4612 BIGINT, i4613 BIGINT, i4614 BIGINT, i4615 BIGINT, i4616 BIGINT, i4617 BIGINT, i4618 BIGINT, i4619 BIGINT, i4620 BIGINT, i4621 BIGINT, i4622 BIGINT, i4623 BIGINT, i4624 BIGINT, i4625 BIGINT, i4626 BIGINT, i4627 BIGINT, i4628 BIGINT, i4629 BIGINT, i4630 BIGINT, i4631 BIGINT, i4632 BIGINT, i4633 BIGINT, i4634 BIGINT, i4635 BIGINT, i4636 BIGINT, i4637 BIGINT, i4638 BIGINT, i4639 BIGINT, i4640 BIGINT, i4641 BIGINT, i4642 BIGINT, i4643 BIGINT, i4644 BIGINT, i4645 BIGINT, i4646 BIGINT, i4647 BIGINT, i4648 BIGINT, i4649 BIGINT, i4650 BIGINT, i4651 BIGINT, i4652 BIGINT, i4653 BIGINT, i4654 BIGINT, i4655 BIGINT, i4656 BIGINT, i4657 BIGINT, i4658 BIGINT, i4659 BIGINT, i4660 BIGINT, i4661 BIGINT, i4662 BIGINT, i4663 BIGINT, i4664 BIGINT, i4665 BIGINT, i4666 BIGINT, i4667 BIGINT, i4668 BIGINT, i4669 BIGINT, i4670 BIGINT, i4671 BIGINT, i4672 BIGINT, i4673 BIGINT, i4674 BIGINT, i4675 BIGINT, i4676 BIGINT, i4677 BIGINT, i4678 BIGINT, i4679 BIGINT, i4680 BIGINT, i4681 BIGINT, i4682 BIGINT, i4683 BIGINT, i4684 BIGINT, i4685 BIGINT, i4686 BIGINT, i4687 BIGINT, i4688 BIGINT, i4689 BIGINT, i4690 BIGINT, i4691 BIGINT, i4692 BIGINT, i4693 BIGINT, i4694 BIGINT, i4695 BIGINT, i4696 BIGINT, i4697 BIGINT, i4698 BIGINT, i4699 BIGINT, i4700 BIGINT, i4701 BIGINT, i4702 BIGINT, i4703 BIGINT, i4704 BIGINT, i4705 BIGINT, i4706 BIGINT, i4707 BIGINT, i4708 BIGINT, i4709 BIGINT, i4710 BIGINT, i4711 BIGINT, i4712 BIGINT, i4713 BIGINT, i4714 BIGINT, i4715 BIGINT, i4716 BIGINT, i4717 BIGINT, i4718 BIGINT, i4719 BIGINT, i4720 BIGINT, i4721 BIGINT, i4722 BIGINT, i4723 BIGINT, i4724 BIGINT, i4725 BIGINT, i4726 BIGINT, i4727 BIGINT, i4728 BIGINT, i4729 BIGINT, i4730 BIGINT, i4731 BIGINT, i4732 BIGINT, i4733 BIGINT, i4734 BIGINT, i4735 BIGINT, i4736 BIGINT, i4737 BIGINT, i4738 BIGINT, i4739 BIGINT, i4740 BIGINT, i4741 BIGINT, i4742 BIGINT, i4743 BIGINT, i4744 BIGINT, i4745 BIGINT, i4746 BIGINT, i4747 BIGINT, i4748 BIGINT, i4749 BIGINT, i4750 BIGINT, i4751 BIGINT, i4752 BIGINT, i4753 BIGINT, i4754 BIGINT, i4755 BIGINT, i4756 BIGINT, i4757 BIGINT, i4758 BIGINT, i4759 BIGINT, i4760 BIGINT, i4761 BIGINT, i4762 BIGINT, i4763 BIGINT, i4764 BIGINT, i4765 BIGINT, i4766 BIGINT, i4767 BIGINT, i4768 BIGINT, i4769 BIGINT, i4770 BIGINT, i4771 BIGINT, i4772 BIGINT, i4773 BIGINT, i4774 BIGINT, i4775 BIGINT, i4776 BIGINT, i4777 BIGINT, i4778 BIGINT, i4779 BIGINT, i4780 BIGINT, i4781 BIGINT, i4782 BIGINT, i4783 BIGINT, i4784 BIGINT, i4785 BIGINT, i4786 BIGINT, i4787 BIGINT, i4788 BIGINT, i4789 BIGINT, i4790 BIGINT, i4791 BIGINT, i4792 BIGINT, i4793 BIGINT, i4794 BIGINT, i4795 BIGINT, i4796 BIGINT, i4797 BIGINT, i4798 BIGINT, i4799 BIGINT, i4800 BIGINT, i4801 BIGINT, i4802 BIGINT, i4803 BIGINT, i4804 BIGINT, i4805 BIGINT, i4806 BIGINT, i4807 BIGINT, i4808 BIGINT, i4809 BIGINT, i4810 BIGINT, i4811 BIGINT, i4812 BIGINT, i4813 BIGINT, i4814 BIGINT, i4815 BIGINT, i4816 BIGINT, i4817 BIGINT, i4818 BIGINT, i4819 BIGINT, i4820 BIGINT, i4821 BIGINT, i4822 BIGINT, i4823 BIGINT, i4824 BIGINT, i4825 BIGINT, i4826 BIGINT, i4827 BIGINT, i4828 BIGINT, i4829 BIGINT, i4830 BIGINT, i4831 BIGINT, i4832 BIGINT, i4833 BIGINT, i4834 BIGINT, i4835 BIGINT, i4836 BIGINT, i4837 BIGINT, i4838 BIGINT, i4839 BIGINT, i4840 BIGINT, i4841 BIGINT, i4842 BIGINT, i4843 BIGINT, i4844 BIGINT, i4845 BIGINT, i4846 BIGINT, i4847 BIGINT, i4848 BIGINT, i4849 BIGINT, i4850 BIGINT, i4851 BIGINT, i4852 BIGINT, i4853 BIGINT, i4854 BIGINT, i4855 BIGINT, i4856 BIGINT, i4857 BIGINT, i4858 BIGINT, i4859 BIGINT, i4860 BIGINT, i4861 BIGINT, i4862 BIGINT, i4863 BIGINT, i4864 BIGINT, i4865 BIGINT, i4866 BIGINT, i4867 BIGINT, i4868 BIGINT, i4869 BIGINT, i4870 BIGINT, i4871 BIGINT, i4872 BIGINT, i4873 BIGINT, i4874 BIGINT, i4875 BIGINT, i4876 BIGINT, i4877 BIGINT, i4878 BIGINT, i4879 BIGINT, i4880 BIGINT, i4881 BIGINT, i4882 BIGINT, i4883 BIGINT, i4884 BIGINT, i4885 BIGINT, i4886 BIGINT, i4887 BIGINT, i4888 BIGINT, i4889 BIGINT, i4890 BIGINT, i4891 BIGINT, i4892 BIGINT, i4893 BIGINT, i4894 BIGINT, i4895 BIGINT, i4896 BIGINT, i4897 BIGINT, i4898 BIGINT, i4899 BIGINT, i4900 BIGINT, i4901 BIGINT, i4902 BIGINT, i4903 BIGINT, i4904 BIGINT, i4905 BIGINT, i4906 BIGINT, i4907 BIGINT, i4908 BIGINT, i4909 BIGINT, i4910 BIGINT, i4911 BIGINT, i4912 BIGINT, i4913 BIGINT, i4914 BIGINT, i4915 BIGINT, i4916 BIGINT, i4917 BIGINT, i4918 BIGINT, i4919 BIGINT, i4920 BIGINT, i4921 BIGINT, i4922 BIGINT, i4923 BIGINT, i4924 BIGINT, i4925 BIGINT, i4926 BIGINT, i4927 BIGINT, i4928 BIGINT, i4929 BIGINT, i4930 BIGINT, i4931 BIGINT, i4932 BIGINT, i4933 BIGINT, i4934 BIGINT, i4935 BIGINT, i4936 BIGINT, i4937 BIGINT, i4938 BIGINT, i4939 BIGINT, i4940 BIGINT, i4941 BIGINT, i4942 BIGINT, i4943 BIGINT, i4944 BIGINT, i4945 BIGINT, i4946 BIGINT, i4947 BIGINT, i4948 BIGINT, i4949 BIGINT, i4950 BIGINT, i4951 BIGINT, i4952 BIGINT, i4953 BIGINT, i4954 BIGINT, i4955 BIGINT, i4956 BIGINT, i4957 BIGINT, i4958 BIGINT, i4959 BIGINT, i4960 BIGINT, i4961 BIGINT, i4962 BIGINT, i4963 BIGINT, i4964 BIGINT, i4965 BIGINT, i4966 BIGINT, i4967 BIGINT, i4968 BIGINT, i4969 BIGINT, i4970 BIGINT, i4971 BIGINT, i4972 BIGINT, i4973 BIGINT, i4974 BIGINT, i4975 BIGINT, i4976 BIGINT, i4977 BIGINT, i4978 BIGINT, i4979 BIGINT, i4980 BIGINT, i4981 BIGINT, i4982 BIGINT, i4983 BIGINT, i4984 BIGINT, i4985 BIGINT, i4986 BIGINT, i4987 BIGINT, i4988 BIGINT, i4989 BIGINT, i4990 BIGINT, i4991 BIGINT, i4992 BIGINT, i4993 BIGINT, i4994 BIGINT, i4995 BIGINT, i4996 BIGINT, i4997 BIGINT, i4998 BIGINT, i4999 BIGINT, i5000 BIGINT);

INSERT INTO integers SELECT 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867, 1868, 1869, 1870, 1871, 1872, 1873, 1874, 1875, 1876, 1877, 1878, 1879, 1880, 1881, 1882, 1883, 1884, 1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100, 2101, 2102, 2103, 2104, 2105, 2106, 2107, 2108, 2109, 2110, 2111, 2112, 2113, 2114, 2115, 2116, 2117, 2118, 2119, 2120, 2121, 2122, 2123, 2124, 2125, 2126, 2127, 2128, 2129, 2130, 2131, 2132, 2133, 2134, 2135, 2136, 2137, 2138, 2139, 2140, 2141, 2142, 2143, 2144, 2145, 2146, 2147, 2148, 2149, 2150, 2151, 2152, 2153, 2154, 2155, 2156, 2157, 2158, 2159, 2160, 2161, 2162, 2163, 2164, 2165, 2166, 2167, 2168, 2169, 2170, 2171, 2172, 2173, 2174, 2175, 2176, 2177, 2178, 2179, 2180, 2181, 2182, 2183, 2184, 2185, 2186, 2187, 2188, 2189, 2190, 2191, 2192, 2193, 2194, 2195, 2196, 2197, 2198, 2199, 2200, 2201, 2202, 2203, 2204, 2205, 2206, 2207, 2208, 2209, 2210, 2211, 2212, 2213, 2214, 2215, 2216, 2217, 2218, 2219, 2220, 2221, 2222, 2223, 2224, 2225, 2226, 2227, 2228, 2229, 2230, 2231, 2232, 2233, 2234, 2235, 2236, 2237, 2238, 2239, 2240, 2241, 2242, 2243, 2244, 2245, 2246, 2247, 2248, 2249, 2250, 2251, 2252, 2253, 2254, 2255, 2256, 2257, 2258, 2259, 2260, 2261, 2262, 2263, 2264, 2265, 2266, 2267, 2268, 2269, 2270, 2271, 2272, 2273, 2274, 2275, 2276, 2277, 2278, 2279, 2280, 2281, 2282, 2283, 2284, 2285, 2286, 2287, 2288, 2289, 2290, 2291, 2292, 2293, 2294, 2295, 2296, 2297, 2298, 2299, 2300, 2301, 2302, 2303, 2304, 2305, 2306, 2307, 2308, 2309, 2310, 2311, 2312, 2313, 2314, 2315, 2316, 2317, 2318, 2319, 2320, 2321, 2322, 2323, 2324, 2325, 2326, 2327, 2328, 2329, 2330, 2331, 2332, 2333, 2334, 2335, 2336, 2337, 2338, 2339, 2340, 2341, 2342, 2343, 2344, 2345, 2346, 2347, 2348, 2349, 2350, 2351, 2352, 2353, 2354, 2355, 2356, 2357, 2358, 2359, 2360, 2361, 2362, 2363, 2364, 2365, 2366, 2367, 2368, 2369, 2370, 2371, 2372, 2373, 2374, 2375, 2376, 2377, 2378, 2379, 2380, 2381, 2382, 2383, 2384, 2385, 2386, 2387, 2388, 2389, 2390, 2391, 2392, 2393, 2394, 2395, 2396, 2397, 2398, 2399, 2400, 2401, 2402, 2403, 2404, 2405, 2406, 2407, 2408, 2409, 2410, 2411, 2412, 2413, 2414, 2415, 2416, 2417, 2418, 2419, 2420, 2421, 2422, 2423, 2424, 2425, 2426, 2427, 2428, 2429, 2430, 2431, 2432, 2433, 2434, 2435, 2436, 2437, 2438, 2439, 2440, 2441, 2442, 2443, 2444, 2445, 2446, 2447, 2448, 2449, 2450, 2451, 2452, 2453, 2454, 2455, 2456, 2457, 2458, 2459, 2460, 2461, 2462, 2463, 2464, 2465, 2466, 2467, 2468, 2469, 2470, 2471, 2472, 2473, 2474, 2475, 2476, 2477, 2478, 2479, 2480, 2481, 2482, 2483, 2484, 2485, 2486, 2487, 2488, 2489, 2490, 2491, 2492, 2493, 2494, 2495, 2496, 2497, 2498, 2499, 2500, 2501, 2502, 2503, 2504, 2505, 2506, 2507, 2508, 2509, 2510, 2511, 2512, 2513, 2514, 2515, 2516, 2517, 2518, 2519, 2520, 2521, 2522, 2523, 2524, 2525, 2526, 2527, 2528, 2529, 2530, 2531, 2532, 2533, 2534, 2535, 2536, 2537, 2538, 2539, 2540, 2541, 2542, 2543, 2544, 2545, 2546, 2547, 2548, 2549, 2550, 2551, 2552, 2553, 2554, 2555, 2556, 2557, 2558, 2559, 2560, 2561, 2562, 2563, 2564, 2565, 2566, 2567, 2568, 2569, 2570, 2571, 2572, 2573, 2574, 2575, 2576, 2577, 2578, 2579, 2580, 2581, 2582, 2583, 2584, 2585, 2586, 2587, 2588, 2589, 2590, 2591, 2592, 2593, 2594, 2595, 2596, 2597, 2598, 2599, 2600, 2601, 2602, 2603, 2604, 2605, 2606, 2607, 2608, 2609, 2610, 2611, 2612, 2613, 2614, 2615, 2616, 2617, 2618, 2619, 2620, 2621, 2622, 2623, 2624, 2625, 2626, 2627, 2628, 2629, 2630, 2631, 2632, 2633, 2634, 2635, 2636, 2637, 2638, 2639, 2640, 2641, 2642, 2643, 2644, 2645, 2646, 2647, 2648, 2649, 2650, 2651, 2652, 2653, 2654, 2655, 2656, 2657, 2658, 2659, 2660, 2661, 2662, 2663, 2664, 2665, 2666, 2667, 2668, 2669, 2670, 2671, 2672, 2673, 2674, 2675, 2676, 2677, 2678, 2679, 2680, 2681, 2682, 2683, 2684, 2685, 2686, 2687, 2688, 2689, 2690, 2691, 2692, 2693, 2694, 2695, 2696, 2697, 2698, 2699, 2700, 2701, 2702, 2703, 2704, 2705, 2706, 2707, 2708, 2709, 2710, 2711, 2712, 2713, 2714, 2715, 2716, 2717, 2718, 2719, 2720, 2721, 2722, 2723, 2724, 2725, 2726, 2727, 2728, 2729, 2730, 2731, 2732, 2733, 2734, 2735, 2736, 2737, 2738, 2739, 2740, 2741, 2742, 2743, 2744, 2745, 2746, 2747, 2748, 2749, 2750, 2751, 2752, 2753, 2754, 2755, 2756, 2757, 2758, 2759, 2760, 2761, 2762, 2763, 2764, 2765, 2766, 2767, 2768, 2769, 2770, 2771, 2772, 2773, 2774, 2775, 2776, 2777, 2778, 2779, 2780, 2781, 2782, 2783, 2784, 2785, 2786, 2787, 2788, 2789, 2790, 2791, 2792, 2793, 2794, 2795, 2796, 2797, 2798, 2799, 2800, 2801, 2802, 2803, 2804, 2805, 2806, 2807, 2808, 2809, 2810, 2811, 2812, 2813, 2814, 2815, 2816, 2817, 2818, 2819, 2820, 2821, 2822, 2823, 2824, 2825, 2826, 2827, 2828, 2829, 2830, 2831, 2832, 2833, 2834, 2835, 2836, 2837, 2838, 2839, 2840, 2841, 2842, 2843, 2844, 2845, 2846, 2847, 2848, 2849, 2850, 2851, 2852, 2853, 2854, 2855, 2856, 2857, 2858, 2859, 2860, 2861, 2862, 2863, 2864, 2865, 2866, 2867, 2868, 2869, 2870, 2871, 2872, 2873, 2874, 2875, 2876, 2877, 2878, 2879, 2880, 2881, 2882, 2883, 2884, 2885, 2886, 2887, 2888, 2889, 2890, 2891, 2892, 2893, 2894, 2895, 2896, 2897, 2898, 2899, 2900, 2901, 2902, 2903, 2904, 2905, 2906, 2907, 2908, 2909, 2910, 2911, 2912, 2913, 2914, 2915, 2916, 2917, 2918, 2919, 2920, 2921, 2922, 2923, 2924, 2925, 2926, 2927, 2928, 2929, 2930, 2931, 2932, 2933, 2934, 2935, 2936, 2937, 2938, 2939, 2940, 2941, 2942, 2943, 2944, 2945, 2946, 2947, 2948, 2949, 2950, 2951, 2952, 2953, 2954, 2955, 2956, 2957, 2958, 2959, 2960, 2961, 2962, 2963, 2964, 2965, 2966, 2967, 2968, 2969, 2970, 2971, 2972, 2973, 2974, 2975, 2976, 2977, 2978, 2979, 2980, 2981, 2982, 2983, 2984, 2985, 2986, 2987, 2988, 2989, 2990, 2991, 2992, 2993, 2994, 2995, 2996, 2997, 2998, 2999, 3000, 3001, 3002, 3003, 3004, 3005, 3006, 3007, 3008, 3009, 3010, 3011, 3012, 3013, 3014, 3015, 3016, 3017, 3018, 3019, 3020, 3021, 3022, 3023, 3024, 3025, 3026, 3027, 3028, 3029, 3030, 3031, 3032, 3033, 3034, 3035, 3036, 3037, 3038, 3039, 3040, 3041, 3042, 3043, 3044, 3045, 3046, 3047, 3048, 3049, 3050, 3051, 3052, 3053, 3054, 3055, 3056, 3057, 3058, 3059, 3060, 3061, 3062, 3063, 3064, 3065, 3066, 3067, 3068, 3069, 3070, 3071, 3072, 3073, 3074, 3075, 3076, 3077, 3078, 3079, 3080, 3081, 3082, 3083, 3084, 3085, 3086, 3087, 3088, 3089, 3090, 3091, 3092, 3093, 3094, 3095, 3096, 3097, 3098, 3099, 3100, 3101, 3102, 3103, 3104, 3105, 3106, 3107, 3108, 3109, 3110, 3111, 3112, 3113, 3114, 3115, 3116, 3117, 3118, 3119, 3120, 3121, 3122, 3123, 3124, 3125, 3126, 3127, 3128, 3129, 3130, 3131, 3132, 3133, 3134, 3135, 3136, 3137, 3138, 3139, 3140, 3141, 3142, 3143, 3144, 3145, 3146, 3147, 3148, 3149, 3150, 3151, 3152, 3153, 3154, 3155, 3156, 3157, 3158, 3159, 3160, 3161, 3162, 3163, 3164, 3165, 3166, 3167, 3168, 3169, 3170, 3171, 3172, 3173, 3174, 3175, 3176, 3177, 3178, 3179, 3180, 3181, 3182, 3183, 3184, 3185, 3186, 3187, 3188, 3189, 3190, 3191, 3192, 3193, 3194, 3195, 3196, 3197, 3198, 3199, 3200, 3201, 3202, 3203, 3204, 3205, 3206, 3207, 3208, 3209, 3210, 3211, 3212, 3213, 3214, 3215, 3216, 3217, 3218, 3219, 3220, 3221, 3222, 3223, 3224, 3225, 3226, 3227, 3228, 3229, 3230, 3231, 3232, 3233, 3234, 3235, 3236, 3237, 3238, 3239, 3240, 3241, 3242, 3243, 3244, 3245, 3246, 3247, 3248, 3249, 3250, 3251, 3252, 3253, 3254, 3255, 3256, 3257, 3258, 3259, 3260, 3261, 3262, 3263, 3264, 3265, 3266, 3267, 3268, 3269, 3270, 3271, 3272, 3273, 3274, 3275, 3276, 3277, 3278, 3279, 3280, 3281, 3282, 3283, 3284, 3285, 3286, 3287, 3288, 3289, 3290, 3291, 3292, 3293, 3294, 3295, 3296, 3297, 3298, 3299, 3300, 3301, 3302, 3303, 3304, 3305, 3306, 3307, 3308, 3309, 3310, 3311, 3312, 3313, 3314, 3315, 3316, 3317, 3318, 3319, 3320, 3321, 3322, 3323, 3324, 3325, 3326, 3327, 3328, 3329, 3330, 3331, 3332, 3333, 3334, 3335, 3336, 3337, 3338, 3339, 3340, 3341, 3342, 3343, 3344, 3345, 3346, 3347, 3348, 3349, 3350, 3351, 3352, 3353, 3354, 3355, 3356, 3357, 3358, 3359, 3360, 3361, 3362, 3363, 3364, 3365, 3366, 3367, 3368, 3369, 3370, 3371, 3372, 3373, 3374, 3375, 3376, 3377, 3378, 3379, 3380, 3381, 3382, 3383, 3384, 3385, 3386, 3387, 3388, 3389, 3390, 3391, 3392, 3393, 3394, 3395, 3396, 3397, 3398, 3399, 3400, 3401, 3402, 3403, 3404, 3405, 3406, 3407, 3408, 3409, 3410, 3411, 3412, 3413, 3414, 3415, 3416, 3417, 3418, 3419, 3420, 3421, 3422, 3423, 3424, 3425, 3426, 3427, 3428, 3429, 3430, 3431, 3432, 3433, 3434, 3435, 3436, 3437, 3438, 3439, 3440, 3441, 3442, 3443, 3444, 3445, 3446, 3447, 3448, 3449, 3450, 3451, 3452, 3453, 3454, 3455, 3456, 3457, 3458, 3459, 3460, 3461, 3462, 3463, 3464, 3465, 3466, 3467, 3468, 3469, 3470, 3471, 3472, 3473, 3474, 3475, 3476, 3477, 3478, 3479, 3480, 3481, 3482, 3483, 3484, 3485, 3486, 3487, 3488, 3489, 3490, 3491, 3492, 3493, 3494, 3495, 3496, 3497, 3498, 3499, 3500, 3501, 3502, 3503, 3504, 3505, 3506, 3507, 3508, 3509, 3510, 3511, 3512, 3513, 3514, 3515, 3516, 3517, 3518, 3519, 3520, 3521, 3522, 3523, 3524, 3525, 3526, 3527, 3528, 3529, 3530, 3531, 3532, 3533, 3534, 3535, 3536, 3537, 3538, 3539, 3540, 3541, 3542, 3543, 3544, 3545, 3546, 3547, 3548, 3549, 3550, 3551, 3552, 3553, 3554, 3555, 3556, 3557, 3558, 3559, 3560, 3561, 3562, 3563, 3564, 3565, 3566, 3567, 3568, 3569, 3570, 3571, 3572, 3573, 3574, 3575, 3576, 3577, 3578, 3579, 3580, 3581, 3582, 3583, 3584, 3585, 3586, 3587, 3588, 3589, 3590, 3591, 3592, 3593, 3594, 3595, 3596, 3597, 3598, 3599, 3600, 3601, 3602, 3603, 3604, 3605, 3606, 3607, 3608, 3609, 3610, 3611, 3612, 3613, 3614, 3615, 3616, 3617, 3618, 3619, 3620, 3621, 3622, 3623, 3624, 3625, 3626, 3627, 3628, 3629, 3630, 3631, 3632, 3633, 3634, 3635, 3636, 3637, 3638, 3639, 3640, 3641, 3642, 3643, 3644, 3645, 3646, 3647, 3648, 3649, 3650, 3651, 3652, 3653, 3654, 3655, 3656, 3657, 3658, 3659, 3660, 3661, 3662, 3663, 3664, 3665, 3666, 3667, 3668, 3669, 3670, 3671, 3672, 3673, 3674, 3675, 3676, 3677, 3678, 3679, 3680, 3681, 3682, 3683, 3684, 3685, 3686, 3687, 3688, 3689, 3690, 3691, 3692, 3693, 3694, 3695, 3696, 3697, 3698, 3699, 3700, 3701, 3702, 3703, 3704, 3705, 3706, 3707, 3708, 3709, 3710, 3711, 3712, 3713, 3714, 3715, 3716, 3717, 3718, 3719, 3720, 3721, 3722, 3723, 3724, 3725, 3726, 3727, 3728, 3729, 3730, 3731, 3732, 3733, 3734, 3735, 3736, 3737, 3738, 3739, 3740, 3741, 3742, 3743, 3744, 3745, 3746, 3747, 3748, 3749, 3750, 3751, 3752, 3753, 3754, 3755, 3756, 3757, 3758, 3759, 3760, 3761, 3762, 3763, 3764, 3765, 3766, 3767, 3768, 3769, 3770, 3771, 3772, 3773, 3774, 3775, 3776, 3777, 3778, 3779, 3780, 3781, 3782, 3783, 3784, 3785, 3786, 3787, 3788, 3789, 3790, 3791, 3792, 3793, 3794, 3795, 3796, 3797, 3798, 3799, 3800, 3801, 3802, 3803, 3804, 3805, 3806, 3807, 3808, 3809, 3810, 3811, 3812, 3813, 3814, 3815, 3816, 3817, 3818, 3819, 3820, 3821, 3822, 3823, 3824, 3825, 3826, 3827, 3828, 3829, 3830, 3831, 3832, 3833, 3834, 3835, 3836, 3837, 3838, 3839, 3840, 3841, 3842, 3843, 3844, 3845, 3846, 3847, 3848, 3849, 3850, 3851, 3852, 3853, 3854, 3855, 3856, 3857, 3858, 3859, 3860, 3861, 3862, 3863, 3864, 3865, 3866, 3867, 3868, 3869, 3870, 3871, 3872, 3873, 3874, 3875, 3876, 3877, 3878, 3879, 3880, 3881, 3882, 3883, 3884, 3885, 3886, 3887, 3888, 3889, 3890, 3891, 3892, 3893, 3894, 3895, 3896, 3897, 3898, 3899, 3900, 3901, 3902, 3903, 3904, 3905, 3906, 3907, 3908, 3909, 3910, 3911, 3912, 3913, 3914, 3915, 3916, 3917, 3918, 3919, 3920, 3921, 3922, 3923, 3924, 3925, 3926, 3927, 3928, 3929, 3930, 3931, 3932, 3933, 3934, 3935, 3936, 3937, 3938, 3939, 3940, 3941, 3942, 3943, 3944, 3945, 3946, 3947, 3948, 3949, 3950, 3951, 3952, 3953, 3954, 3955, 3956, 3957, 3958, 3959, 3960, 3961, 3962, 3963, 3964, 3965, 3966, 3967, 3968, 3969, 3970, 3971, 3972, 3973, 3974, 3975, 3976, 3977, 3978, 3979, 3980, 3981, 3982, 3983, 3984, 3985, 3986, 3987, 3988, 3989, 3990, 3991, 3992, 3993, 3994, 3995, 3996, 3997, 3998, 3999, 4000, 4001, 4002, 4003, 4004, 4005, 4006, 4007, 4008, 4009, 4010, 4011, 4012, 4013, 4014, 4015, 4016, 4017, 4018, 4019, 4020, 4021, 4022, 4023, 4024, 4025, 4026, 4027, 4028, 4029, 4030, 4031, 4032, 4033, 4034, 4035, 4036, 4037, 4038, 4039, 4040, 4041, 4042, 4043, 4044, 4045, 4046, 4047, 4048, 4049, 4050, 4051, 4052, 4053, 4054, 4055, 4056, 4057, 4058, 4059, 4060, 4061, 4062, 4063, 4064, 4065, 4066, 4067, 4068, 4069, 4070, 4071, 4072, 4073, 4074, 4075, 4076, 4077, 4078, 4079, 4080, 4081, 4082, 4083, 4084, 4085, 4086, 4087, 4088, 4089, 4090, 4091, 4092, 4093, 4094, 4095, 4096, 4097, 4098, 4099, 4100, 4101, 4102, 4103, 4104, 4105, 4106, 4107, 4108, 4109, 4110, 4111, 4112, 4113, 4114, 4115, 4116, 4117, 4118, 4119, 4120, 4121, 4122, 4123, 4124, 4125, 4126, 4127, 4128, 4129, 4130, 4131, 4132, 4133, 4134, 4135, 4136, 4137, 4138, 4139, 4140, 4141, 4142, 4143, 4144, 4145, 4146, 4147, 4148, 4149, 4150, 4151, 4152, 4153, 4154, 4155, 4156, 4157, 4158, 4159, 4160, 4161, 4162, 4163, 4164, 4165, 4166, 4167, 4168, 4169, 4170, 4171, 4172, 4173, 4174, 4175, 4176, 4177, 4178, 4179, 4180, 4181, 4182, 4183, 4184, 4185, 4186, 4187, 4188, 4189, 4190, 4191, 4192, 4193, 4194, 4195, 4196, 4197, 4198, 4199, 4200, 4201, 4202, 4203, 4204, 4205, 4206, 4207, 4208, 4209, 4210, 4211, 4212, 4213, 4214, 4215, 4216, 4217, 4218, 4219, 4220, 4221, 4222, 4223, 4224, 4225, 4226, 4227, 4228, 4229, 4230, 4231, 4232, 4233, 4234, 4235, 4236, 4237, 4238, 4239, 4240, 4241, 4242, 4243, 4244, 4245, 4246, 4247, 4248, 4249, 4250, 4251, 4252, 4253, 4254, 4255, 4256, 4257, 4258, 4259, 4260, 4261, 4262, 4263, 4264, 4265, 4266, 4267, 4268, 4269, 4270, 4271, 4272, 4273, 4274, 4275, 4276, 4277, 4278, 4279, 4280, 4281, 4282, 4283, 4284, 4285, 4286, 4287, 4288, 4289, 4290, 4291, 4292, 4293, 4294, 4295, 4296, 4297, 4298, 4299, 4300, 4301, 4302, 4303, 4304, 4305, 4306, 4307, 4308, 4309, 4310, 4311, 4312, 4313, 4314, 4315, 4316, 4317, 4318, 4319, 4320, 4321, 4322, 4323, 4324, 4325, 4326, 4327, 4328, 4329, 4330, 4331, 4332, 4333, 4334, 4335, 4336, 4337, 4338, 4339, 4340, 4341, 4342, 4343, 4344, 4345, 4346, 4347, 4348, 4349, 4350, 4351, 4352, 4353, 4354, 4355, 4356, 4357, 4358, 4359, 4360, 4361, 4362, 4363, 4364, 4365, 4366, 4367, 4368, 4369, 4370, 4371, 4372, 4373, 4374, 4375, 4376, 4377, 4378, 4379, 4380, 4381, 4382, 4383, 4384, 4385, 4386, 4387, 4388, 4389, 4390, 4391, 4392, 4393, 4394, 4395, 4396, 4397, 4398, 4399, 4400, 4401, 4402, 4403, 4404, 4405, 4406, 4407, 4408, 4409, 4410, 4411, 4412, 4413, 4414, 4415, 4416, 4417, 4418, 4419, 4420, 4421, 4422, 4423, 4424, 4425, 4426, 4427, 4428, 4429, 4430, 4431, 4432, 4433, 4434, 4435, 4436, 4437, 4438, 4439, 4440, 4441, 4442, 4443, 4444, 4445, 4446, 4447, 4448, 4449, 4450, 4451, 4452, 4453, 4454, 4455, 4456, 4457, 4458, 4459, 4460, 4461, 4462, 4463, 4464, 4465, 4466, 4467, 4468, 4469, 4470, 4471, 4472, 4473, 4474, 4475, 4476, 4477, 4478, 4479, 4480, 4481, 4482, 4483, 4484, 4485, 4486, 4487, 4488, 4489, 4490, 4491, 4492, 4493, 4494, 4495, 4496, 4497, 4498, 4499, 4500, 4501, 4502, 4503, 4504, 4505, 4506, 4507, 4508, 4509, 4510, 4511, 4512, 4513, 4514, 4515, 4516, 4517, 4518, 4519, 4520, 4521, 4522, 4523, 4524, 4525, 4526, 4527, 4528, 4529, 4530, 4531, 4532, 4533, 4534, 4535, 4536, 4537, 4538, 4539, 4540, 4541, 4542, 4543, 4544, 4545, 4546, 4547, 4548, 4549, 4550, 4551, 4552, 4553, 4554, 4555, 4556, 4557, 4558, 4559, 4560, 4561, 4562, 4563, 4564, 4565, 4566, 4567, 4568, 4569, 4570, 4571, 4572, 4573, 4574, 4575, 4576, 4577, 4578, 4579, 4580, 4581, 4582, 4583, 4584, 4585, 4586, 4587, 4588, 4589, 4590, 4591, 4592, 4593, 4594, 4595, 4596, 4597, 4598, 4599, 4600, 4601, 4602, 4603, 4604, 4605, 4606, 4607, 4608, 4609, 4610, 4611, 4612, 4613, 4614, 4615, 4616, 4617, 4618, 4619, 4620, 4621, 4622, 4623, 4624, 4625, 4626, 4627, 4628, 4629, 4630, 4631, 4632, 4633, 4634, 4635, 4636, 4637, 4638, 4639, 4640, 4641, 4642, 4643, 4644, 4645, 4646, 4647, 4648, 4649, 4650, 4651, 4652, 4653, 4654, 4655, 4656, 4657, 4658, 4659, 4660, 4661, 4662, 4663, 4664, 4665, 4666, 4667, 4668, 4669, 4670, 4671, 4672, 4673, 4674, 4675, 4676, 4677, 4678, 4679, 4680, 4681, 4682, 4683, 4684, 4685, 4686, 4687, 4688, 4689, 4690, 4691, 4692, 4693, 4694, 4695, 4696, 4697, 4698, 4699, 4700, 4701, 4702, 4703, 4704, 4705, 4706, 4707, 4708, 4709, 4710, 4711, 4712, 4713, 4714, 4715, 4716, 4717, 4718, 4719, 4720, 4721, 4722, 4723, 4724, 4725, 4726, 4727, 4728, 4729, 4730, 4731, 4732, 4733, 4734, 4735, 4736, 4737, 4738, 4739, 4740, 4741, 4742, 4743, 4744, 4745, 4746, 4747, 4748, 4749, 4750, 4751, 4752, 4753, 4754, 4755, 4756, 4757, 4758, 4759, 4760, 4761, 4762, 4763, 4764, 4765, 4766, 4767, 4768, 4769, 4770, 4771, 4772, 4773, 4774, 4775, 4776, 4777, 4778, 4779, 4780, 4781, 4782, 4783, 4784, 4785, 4786, 4787, 4788, 4789, 4790, 4791, 4792, 4793, 4794, 4795, 4796, 4797, 4798, 4799, 4800, 4801, 4802, 4803, 4804, 4805, 4806, 4807, 4808, 4809, 4810, 4811, 4812, 4813, 4814, 4815, 4816, 4817, 4818, 4819, 4820, 4821, 4822, 4823, 4824, 4825, 4826, 4827, 4828, 4829, 4830, 4831, 4832, 4833, 4834, 4835, 4836, 4837, 4838, 4839, 4840, 4841, 4842, 4843, 4844, 4845, 4846, 4847, 4848, 4849, 4850, 4851, 4852, 4853, 4854, 4855, 4856, 4857, 4858, 4859, 4860, 4861, 4862, 4863, 4864, 4865, 4866, 4867, 4868, 4869, 4870, 4871, 4872, 4873, 4874, 4875, 4876, 4877, 4878, 4879, 4880, 4881, 4882, 4883, 4884, 4885, 4886, 4887, 4888, 4889, 4890, 4891, 4892, 4893, 4894, 4895, 4896, 4897, 4898, 4899, 4900, 4901, 4902, 4903, 4904, 4905, 4906, 4907, 4908, 4909, 4910, 4911, 4912, 4913, 4914, 4915, 4916, 4917, 4918, 4919, 4920, 4921, 4922, 4923, 4924, 4925, 4926, 4927, 4928, 4929, 4930, 4931, 4932, 4933, 4934, 4935, 4936, 4937, 4938, 4939, 4940, 4941, 4942, 4943, 4944, 4945, 4946, 4947, 4948, 4949, 4950, 4951, 4952, 4953, 4954, 4955, 4956, 4957, 4958, 4959, 4960, 4961, 4962, 4963, 4964, 4965, 4966, 4967, 4968, 4969, 4970, 4971, 4972, 4973, 4974, 4975, 4976, 4977, 4978, 4979, 4980, 4981, 4982, 4983, 4984, 4985, 4986, 4987, 4988, 4989, 4990, 4991, 4992, 4993, 4994, 4995, 4996, 4997, 4998, 4999, 5000 FROM RANGE(0, 2000);

SELECT COUNT(*) FROM (SELECT DISTINCT * FROM integers);

CREATE OR REPLACE TABLE df${threadid} as select i,i,i from range(100) tbl(i);

SET storage_compatibility_version = 'v0.10.2';

PRAGMA enable_verification;

CREATE TABLE IF NOT EXISTS test (val INT);

INSERT INTO test (val) VALUES (1), (2), (3);

CREATE OR REPLACE VIEW foo AS (SELECT * FROM test);

CREATE OR REPLACE VIEW foo AS (SELECT * FROM foo);

SELECT * FROM foo;

CREATE OR REPLACE VIEW foo AS (SELECT * FROM test);

CREATE OR REPLACE VIEW foo2 AS (SELECT * FROM foo);

CREATE OR REPLACE VIEW foo AS (SELECT (SELECT * FROM foo2));

SELECT * FROM foo;

SET storage_compatibility_version = 'v1.0.0';

SET enable_view_dependencies = TRUE;

PRAGMA enable_verification;

CREATE TABLE IF NOT EXISTS test (val INT);

INSERT INTO test (val) VALUES (1), (2), (3);

CREATE OR REPLACE VIEW foo AS (SELECT * FROM test);

CREATE OR REPLACE VIEW foo AS (SELECT * FROM foo);

CREATE OR REPLACE VIEW foo AS (SELECT * FROM test);

CREATE OR REPLACE VIEW foo2 AS (SELECT * FROM foo);

CREATE OR REPLACE VIEW foo AS (SELECT (SELECT * FROM foo2));

PRAGMA enable_verification;

CREATE TABLE t1 (i INT);

INSERT INTO t1 VALUES (41), (42), (43), (44);

CREATE VIEW v1 (v1c1, v1c2) AS SELECT i, i + 1 FROM t1 WHERE i > 41;

CREATE VIEW v2 (v2c1, v2c2, v2c3) AS SELECT v1c1, v1c2, v1c1 + v1c2 FROM v1 WHERE v1c2 > 42;

CREATE VIEW v3 (v3c1, v3c2) AS SELECT v2c1, v2c3 FROM v2 WHERE v2c1 > 43;

SELECT v3c2 + 1 FROM v3 WHERE v3c1 > 42;

PRAGMA enable_verification;

CREATE TABLE t1 (i INT);

INSERT INTO t1 VALUES (41), (42), (43);

CREATE VIEW v1 AS SELECT i AS j FROM t1 WHERE i < 43;

CREATE VIEW v1 AS SELECT 'whatever';

SELECT j FROM v1 WHERE j > 41;

SELECT x FROM v1 AS t1(x) WHERE x > 41;

DROP VIEW v1;

SELECT j FROM v1 WHERE j > 41;

CREATE VIEW v1 AS SELECT 'whatever';

SELECT * FROM v1;

CREATE OR REPLACE VIEW v1 AS SELECT 42;

SELECT * FROM v1;

INSERT INTO v1 VALUES (1);

DROP VIEW v1;

DROP VIEW v1;

DROP VIEW IF EXISTS v1;

CREATE VIEW v1 AS SELECT * FROM dontexist;

PRAGMA enable_verification;

CREATE TABLE t1 (i INT);

INSERT INTO t1 VALUES (41), (42), (43);

CREATE VIEW v1 (j, "j2") AS SELECT * FROM t1;

CREATE VIEW v1 (j, "j2") AS SELECT i, i + 1 FROM t1;

SELECT j, j2 FROM v1;

DROP VIEW v1;

CREATE VIEW v1 (j, "j2") AS SELECT i, i + 1, i + 2 FROM t1;

SELECT j, j2 FROM v1;

DROP VIEW v1;

CREATE VIEW v1 (j, "j2") AS SELECT i, i + 1, i + 2 AS x FROM t1;

SELECT j, j2, x FROM v1;

PRAGMA enable_verification;

CREATE TABLE t1 (i INT);

INSERT INTO t1 VALUES (41), (42), (43);

CREATE VIEW v1 AS SELECT i AS j FROM t1 WHERE i < 43;

DELETE FROM v1;

UPDATE v1 SET j = 1;

CREATE TEMPORARY VIEW df AS SELECT 0, 0, 0 FROM RANGE(0, 10);

SET storage_compatibility_version = 'v0.10.2';

PRAGMA enable_verification;

CREATE TABLE t1 (i INT);

INSERT INTO t1 VALUES (41), (42), (43);

CREATE VIEW v1 AS SELECT * FROM t1;

SELECT * FROM v1;

DROP TABLE t1;

CREATE TABLE t1 (i DATE);

SELECT * FROM v1;

DROP TABLE t1;

CREATE TABLE t1 (i INT, j INT);

SELECT * FROM v1;

DROP TABLE t1;

CREATE TABLE t1 (k INT);

SELECT * FROM v1;

DROP TABLE t1;

CREATE TABLE t1 (i INT);

SELECT * FROM v1;

ALTER TABLE t1 ALTER COLUMN i SET DATA TYPE TEXT;

SELECT * FROM v1;

ALTER TABLE t1 ALTER COLUMN i SET DATA TYPE INT;

SELECT * FROM v1;

ALTER TABLE t1 RENAME TO i, TO j;

SELECT * FROM v1;

SET storage_compatibility_version = 'v1.0.0';

SET enable_view_dependencies = TRUE;

PRAGMA enable_verification;

CREATE TABLE t1 (i INT);

INSERT INTO t1 VALUES (41), (42), (43);

CREATE VIEW v1 AS SELECT * FROM t1;

SELECT * FROM v1;

DROP TABLE t1;

DROP TABLE t1 CASCADE;

CREATE TABLE t1 (i DATE);

SELECT * FROM v1;

DROP TABLE t1;

CREATE TABLE t1 (i INT, j INT);

SELECT * FROM v1;

DROP TABLE t1;

CREATE TABLE t1 (k INT);

SELECT * FROM v1;

DROP TABLE t1;

CREATE TABLE t1 (i INT);

SELECT * FROM v1;

CREATE VIEW v1 AS SELECT * FROM t1;

ALTER TABLE t1 ALTER COLUMN i SET DATA TYPE TEXT;

DROP VIEW v1;

ALTER TABLE t1 ALTER COLUMN i SET DATA TYPE TEXT;

CREATE VIEW v1 AS SELECT * FROM t1;

ALTER TABLE t1 RENAME TO i, TO j;

DROP VIEW v1;

SET storage_compatibility_version = 'v0.10.2';

PRAGMA enable_verification;

CREATE SCHEMA my_schema;

CREATE VIEW my_schema.X (a) AS SELECT 'x' AS x, 'y' AS y;

SELECT TRIM(sql, CHR(10)) FROM DUCKDB_VIEWS() WHERE internal = FALSE;

ALTER VIEW my_schema.X RENAME TO Y;

SELECT TRIM(sql, CHR(10)) FROM DUCKDB_VIEWS() WHERE internal = FALSE;

DROP SCHEMA my_schema CASCADE;

SELECT TRIM(sql, CHR(10)) FROM DUCKDB_VIEWS() WHERE internal = FALSE;

CREATE TABLE tbl (a INT, b TEXT);

CREATE VIEW vw AS SELECT * FROM tbl;

SELECT TRIM(sql, CHR(10)) FROM DUCKDB_VIEWS() WHERE internal = FALSE;

ALTER TABLE tbl RENAME COLUMN b TO x;

SELECT TRIM(sql, CHR(10)) FROM DUCKDB_VIEWS() WHERE internal = FALSE;

CREATE OR REPLACE VIEW vw (c1, c2) AS SELECT * FROM tbl;

CREATE OR REPLACE TABLE "table name" ("column name 1" INT, "column name 2" TEXT);

CREATE OR REPLACE VIEW "view name" AS SELECT * FROM "table name";

DROP VIEW vw;

SELECT TRIM(sql, CHR(10)) FROM DUCKDB_VIEWS() WHERE internal = FALSE;

DROP VIEW "view name";

CREATE SCHEMA "schema name";

CREATE VIEW "schema name"."view name" ("other name 1", "column name 2") AS SELECT * FROM "table name";

SELECT TRIM(sql, CHR(10)) FROM DUCKDB_VIEWS() WHERE internal = FALSE;

SET storage_compatibility_version = 'v1.0.0';

SET enable_view_dependencies = TRUE;

PRAGMA enable_verification;

CREATE SCHEMA my_schema;

CREATE VIEW my_schema.X (a) AS SELECT 'x' AS x, 'y' AS y;

SELECT TRIM(sql, CHR(10)) FROM DUCKDB_VIEWS() WHERE internal = FALSE;

ALTER VIEW my_schema.X RENAME TO Y;

SELECT TRIM(sql, CHR(10)) FROM DUCKDB_VIEWS() WHERE internal = FALSE;

DROP SCHEMA my_schema CASCADE;

SELECT TRIM(sql, CHR(10)) FROM DUCKDB_VIEWS() WHERE internal = FALSE;

CREATE TABLE tbl (a INT, b TEXT);

CREATE VIEW vw AS SELECT * FROM tbl;

SELECT TRIM(sql, CHR(10)) FROM DUCKDB_VIEWS() WHERE internal = FALSE;

ALTER TABLE tbl RENAME COLUMN b TO x;

DROP VIEW vw;

ALTER TABLE tbl RENAME COLUMN b TO x;

CREATE VIEW vw AS SELECT * FROM tbl;

SELECT TRIM(sql, CHR(10)) FROM DUCKDB_VIEWS() WHERE internal = FALSE;

CREATE OR REPLACE VIEW vw (c1, c2) AS SELECT * FROM tbl;

CREATE OR REPLACE TABLE "table name" ("column name 1" INT, "column name 2" TEXT);

CREATE OR REPLACE VIEW "view name" AS SELECT * FROM "table name";

DROP VIEW vw;

SELECT TRIM(sql, CHR(10)) FROM DUCKDB_VIEWS() WHERE internal = FALSE;

DROP VIEW "view name";

CREATE SCHEMA "schema name";

CREATE VIEW "schema name"."view name" ("other name 1", "column name 2") AS SELECT * FROM "table name";

SELECT TRIM(sql, CHR(10)) FROM DUCKDB_VIEWS() WHERE internal = FALSE;

PRAGMA enable_verification;

CREATE VIEW v1 AS SELECT 42;

CREATE VIEW IF NOT EXISTS v1 AS SELECT 84;

SELECT * FROM v1;

PRAGMA enable_verification;

CREATE TABLE t0 (c0 BOOLEAN, PRIMARY KEY (c0));

CREATE TABLE t63 (c0 TEXT COLLATE C, PRIMARY KEY (c0));

INSERT INTO t0 (c0) VALUES (0.7);

INSERT INTO t63 (c0) VALUES ('1');

SELECT t63.c0 FROM t0 NATURAL LEFT JOIN t63;

PRAGMA enable_verification;

SELECT 'a' LIKE 'A' COLLATE NOCASE;

SELECT NOT 'a' LIKE 'A' COLLATE NOCASE;

SELECT 'A' COLLATE NOCASE LIKE 'a';

SELECT 'a' LIKE 'A%' COLLATE NOCASE;

SELECT 'A' COLLATE NOCASE LIKE '%A' COLLATE NOCASE;

SELECT 'a' COLLATE NOCASE LIKE '%A%' COLLATE NOCASE;

SELECT 'OX' COLLATE NOACCENT.NOCASE LIKE 'ö%';

CREATE TABLE t1 (c1 TEXT, pattern TEXT);

INSERT INTO t1 VALUES ('A', 'a'), ('a', 'A'), ('AAAA', 'AaAa'), ('aaaa', 'baba');

SELECT c1 FROM t1 WHERE c1 LIKE pattern;

SELECT c1 FROM t1 WHERE c1 LIKE pattern COLLATE NOCASE;

SELECT 'a%ö' COLLATE NOACCENT LIKE 'a$%ö' ESCAPE '$';

SELECT NOT 'a%ö' COLLATE NOACCENT LIKE 'a$%ö' ESCAPE '$';

SELECT 'oX' ILIKE 'Ö%';

SELECT 'OX' COLLATE NOACCENT ILIKE 'ö%';

SELECT NOT 'öX' COLLATE NOACCENT ILIKE 'Ö%';

SELECT 'oX' GLOB 'O*';

SELECT 'oX' COLLATE NOCASE GLOB 'O*';

PRAGMA enable_verification;

PRAGMA default_collation = NOCASE;

SELECT TYPEOF(x) FROM (SELECT CAST(1 AS INT) AS x GROUP BY x);

PRAGMA enable_verification;

CREATE TABLE tbl (id INT, val TEXT);

INSERT INTO tbl VALUES (0, 'a'), (1, 'B');

SELECT LIST(id ORDER BY val COLLATE nocase) FROM tbl;

PRAGMA enable_verification;

CREATE TABLE CreditCardTable (id BIGINT, creditCard_number TEXT);

CREATE TABLE CustomerTable (id BIGINT, pk BIGINT);

INSERT INTO CreditCardTable VALUES (1, 'A'), (2, 'z');

INSERT INTO CustomerTable VALUES (1, 100), (2, 0);

SELECT creditCard_number AS "pk", CustomerTable.pk AS inner_pk FROM CreditCardTable JOIN CustomerTable USING (id) ORDER BY "pk" COLLATE NOCASE;

SELECT creditCard_number AS "pk", CustomerTable.pk AS inner_pk FROM CreditCardTable JOIN CustomerTable USING (id) ORDER BY "pk" COLLATE NOCASE;

PRAGMA enable_verification;

CREATE TABLE t0 (c1 TEXT);

INSERT INTO t0 VALUES ('XXX');

SELECT (SELECT c1 FROM t0) COLLATE nocase;

SELECT (SELECT c1 FROM t0) COLLATE nocase = 'xxx';

CREATE TABLE tbl (a TEXT, b TEXT);

INSERT INTO tbl VALUES ('ö', '>>>>>ö<<<<<'), ('o', '>>>>>o<<<<<'), ('p', '>>>>>p<<<<<');
require AS icu;

SELECT CONCAT(a COLLATE de, a) FROM tbl ORDER BY ALL;

SELECT LOWER(a COLLATE de) FROM tbl ORDER BY ALL;

SELECT UPPER(a COLLATE de) FROM tbl ORDER BY ALL;

SELECT TRIM(b COLLATE de, '<>') FROM tbl ORDER BY ALL;

SELECT LTRIM(b COLLATE de, '<>') FROM tbl ORDER BY ALL;

SELECT RTRIM(b COLLATE de, '<>') FROM tbl ORDER BY ALL;

SELECT REPEAT(a COLLATE de, 10) FROM tbl ORDER BY ALL;

SELECT LEFT(b COLLATE de, 6) FROM tbl ORDER BY ALL;

SELECT RIGHT(b COLLATE de, 6) FROM tbl ORDER BY ALL;

SELECT RIGHT(LEFT(b COLLATE de, 6), 1) FROM tbl ORDER BY ALL;

SELECT REVERSE(a COLLATE de) FROM tbl ORDER BY ALL;

SELECT a FROM tbl WHERE CONTAINS(b COLLATE de, 'o') ORDER BY ALL;

SELECT a FROM tbl WHERE STARTS_WITH(b COLLATE de, '>>>>>o') ORDER BY ALL;

SELECT a FROM tbl WHERE b COLLATE de LIKE '%>o<%' ORDER BY ALL;

CREATE TABLE collate_test (s TEXT COLLATE NOACCENT);

INSERT INTO collate_test VALUES ('Mühleisen'), ('Hëllö');

SELECT * FROM collate_test WHERE s = 'Muhleisen';

SELECT * FROM collate_test WHERE s = 'mühleisen';

SELECT * FROM collate_test WHERE s = 'Hello';

CREATE TABLE collate_join_table (s TEXT, i INT);

INSERT INTO collate_join_table VALUES ('Hello', 1), ('Muhleisen', 3);

SELECT collate_test.s, collate_join_table.s, i FROM collate_test JOIN collate_join_table ON (collate_test.s = collate_join_table.s) ORDER BY 1;

DROP TABLE collate_test;

CREATE TABLE collate_test (s TEXT COLLATE NOACCENT);

INSERT INTO collate_test VALUES ('Hällo'), ('Hallo'), ('Hello');

SELECT * FROM collate_test ORDER BY s;

DROP TABLE collate_test;

CREATE TABLE collate_test (s TEXT COLLATE NOACCENT);

INSERT INTO collate_test VALUES ('Hällo'), ('Hallo');

SELECT DISTINCT s FROM collate_test;

SET default_collation = c;

CREATE TABLE sales (product_id INT, region TEXT, year INT, amount_sold DECIMAL(10, 2));

INSERT INTO sales VALUES (1, 'North', 2020, 1000.00), (1, 'North', 2021, 1500.00), (1, 'South', 2020, 800.00), (1, 'South', 2021, 700.00), (2, 'North', 2020, 500.00), (2, 'North', 2021, 600.00), (2, 'South', 2020, 400.00), (2, 'South', 2021, 550.00);

SET default_collation = c;

SELECT product_id, region, SUM(amount_sold) AS total_amount FROM sales GROUP BY GROUPING SETS ((product_id), (region), ()) ORDER BY product_id, region, total_amount;

SET default_collation = en_us;

SELECT product_id, region, SUM(amount_sold) AS total_amount FROM sales GROUP BY GROUPING SETS ((product_id), (region), ()) ORDER BY product_id, region, total_amount;

SET default_collation = c;

SELECT NULL AS product_id, region, SUM(amount_sold) FROM sales GROUP BY region UNION ALL SELECT NULL AS product_id, NULL AS region, SUM(amount_sold) FROM sales UNION ALL SELECT product_id, NULL AS region, SUM(amount_sold) FROM sales GROUP BY product_id ORDER BY 1, 2;

SET default_collation = en_us;

SELECT NULL AS product_id, region, SUM(amount_sold) FROM sales GROUP BY region UNION ALL SELECT NULL AS product_id, NULL AS region, SUM(amount_sold) FROM sales UNION ALL SELECT product_id, NULL AS region, SUM(amount_sold) FROM sales GROUP BY product_id ORDER BY 1, 2;

SELECT product_id, region, SUM(amount_sold) AS total_amount FROM sales GROUP BY GROUPING SETS ((product_id), (region), ()) ORDER BY product_id, region, total_amount;

CREATE TABLE collate_test (s TEXT, t TEXT);

INSERT INTO collate_test VALUES ('mark', 'muhleisen');

SELECT COUNT(*) FROM collate_test WHERE 'mórritz' BETWEEN s AND t;

SELECT COUNT(*) FROM collate_test WHERE 'mórritz' COLLATE NOACCENT BETWEEN s AND t;

SELECT COUNT(*) FROM collate_test WHERE 'mórritz' BETWEEN (s COLLATE NOACCENT) AND t;

SELECT COUNT(*) FROM collate_test WHERE 'mórritz' BETWEEN s AND (t COLLATE NOACCENT);

PRAGMA default_collation = 'NOACCENT';

SELECT COUNT(*) FROM collate_test WHERE 'mórritz' BETWEEN s AND t;

CREATE TABLE collate_test (s TEXT COLLATE NOCASE);

INSERT INTO collate_test VALUES ('hello'), ('WoRlD'), ('world'), ('Mühleisen');

SELECT * FROM collate_test WHERE s = 'HeLlo';

SELECT * FROM collate_test WHERE s = 'MÜhleisen';

SELECT * FROM collate_test WHERE s = 'world';

CREATE TABLE collate_join_table (s TEXT, i INT);

INSERT INTO collate_join_table VALUES ('HeLlO', 1), ('mÜHLEISEN', 3);

SELECT collate_test.s, collate_join_table.s, i FROM collate_test JOIN collate_join_table ON (collate_test.s = collate_join_table.s) ORDER BY i;

DROP TABLE collate_test;

CREATE TABLE collate_test (s TEXT COLLATE NOCASE);

INSERT INTO collate_test VALUES ('Hallo'), ('ham'), ('HELLO'), ('hElp');

SELECT * FROM collate_test ORDER BY s;

DROP TABLE collate_test;

CREATE TABLE collate_test (s TEXT COLLATE NOCASE);

INSERT INTO collate_test VALUES ('Hallo'), ('hallo');

SELECT DISTINCT s FROM collate_test;

CREATE TABLE collate_test (s TEXT);

INSERT INTO collate_test VALUES ('hEllO'), ('WöRlD'), ('wozld');

SELECT 'hëllo' COLLATE NOACCENT = 'hello';

SELECT 'hëllo' COLLATE POSIX = 'hello';

SELECT 'hëllo' COLLATE C = 'hello';

SELECT * FROM collate_test WHERE s = 'hello';

SELECT * FROM collate_test WHERE s = 'hello' COLLATE NOCASE;

SELECT * FROM collate_test WHERE s COLLATE NOCASE = 'hello';

SELECT * FROM collate_test WHERE s COLLATE NOCASE = 'hello' COLLATE NOACCENT;

SELECT * FROM collate_test ORDER BY s COLLATE NOCASE;

SELECT * FROM collate_test ORDER BY s COLLATE NOCASE.NOACCENT;

PRAGMA collations;

PRAGMA collations = 3;

PRAGMA enable_verification;

SELECT 'a' AS c1 ORDER BY 1 COLLATE NOCASE;

SELECT 'a' ORDER BY 1 COLLATE NOCASE;

SELECT 'A', 'B' ORDER BY 2 COLLATE NOCASE;

SELECT CAST(999 AS TEXT) ORDER BY 1 COLLATE NOCASE;

SELECT CAST(999 AS TEXT) ORDER BY 1 COLLATE NOCASE;

SELECT CAST(999 AS TEXT) ORDER BY 1 COLLATE NOCASE;

SELECT CAST(999 AS TEXT) ORDER BY 1 COLLATE NOCASE;

SELECT CAST(999 AS TEXT) ORDER BY 1 COLLATE NOCASE;

CREATE TABLE collate_test (s TEXT);

INSERT INTO collate_test VALUES ('ã'), ('B'), ('a'), ('A');

SELECT s FROM collate_test ORDER BY 1 COLLATE NOCASE;

SELECT s FROM collate_test ORDER BY s COLLATE NOCASE;

SELECT CONCAT(s, s) FROM collate_test ORDER BY 1 COLLATE NOCASE;

SELECT CONCAT(s, s) AS concat, concat FROM collate_test ORDER BY 2 COLLATE NOCASE;

SELECT collate_test.s FROM collate_test ORDER BY 1 COLLATE NOCASE;

SELECT CASE WHEN s[1] = 'a' THEN s ELSE NULL END FROM collate_test ORDER BY 1 COLLATE NOCASE;

SELECT (SELECT s) FROM collate_test ORDER BY 1 COLLATE NOCASE;

SELECT (SELECT s) AS c1 FROM collate_test ORDER BY c11 COLLATE NOCASE;

SELECT CONCAT('a', (SELECT s)) FROM collate_test ORDER BY 1 COLLATE NOCASE;

PRAGMA default_collation = NOACCENT;

CREATE TABLE Cities (Country TEXT, Name TEXT, Year INT, Population INT);

INSERT INTO Cities VALUES ('NL', 'Amsterdam', 2010, 1005);

INSERT INTO Cities VALUES ('NL', 'Amsterdam', 2011, 1065);

INSERT INTO Cities VALUES ('NL', 'Amsterdam', 2012, 1158);

INSERT INTO Cities VALUES ('US', 'Seattle', 2013, 564);

INSERT INTO Cities VALUES ('US', 'Seattle', 2014, 608);

INSERT INTO Cities VALUES ('US', 'Seattle', 2015, 738);

INSERT INTO Cities VALUES ('US', 'New York City', 2016, 8015);

INSERT INTO Cities VALUES ('US', 'New York City', 2017, 8175);

INSERT INTO Cities VALUES ('US', 'New York City', 2018, 8772);

INSERT INTO Cities VALUES ('US', 'New York City', 2019, 8772);

INSERT INTO Cities VALUES ('US', 'New York City', 2020, 8772);

SET pivot_filter_threshold=99
loop i 0 2;

PIVOT Cities ON Year USING SUM(Population);

CREATE TABLE tbl (a TEXT, b TEXT);

INSERT INTO tbl VALUES ('ö', '>>>>>ö<<<<<'), ('o', '>>>>>o<<<<<'), ('p', '>>>>>p<<<<<');

SELECT a FROM tbl WHERE CONTAINS(b COLLATE nocase, 'O') ORDER BY ALL;

SELECT CONCAT(a COLLATE noaccent, a) FROM tbl ORDER BY ALL;

SELECT LOWER(a COLLATE noaccent) FROM tbl ORDER BY ALL;

SELECT UPPER(a COLLATE noaccent) FROM tbl ORDER BY ALL;

SELECT TRIM(b COLLATE noaccent, '<>') FROM tbl ORDER BY ALL;

SELECT LTRIM(b COLLATE noaccent, '<>') FROM tbl ORDER BY ALL;

SELECT RTRIM(b COLLATE noaccent, '<>') FROM tbl ORDER BY ALL;

SELECT REPEAT(a COLLATE noaccent, 10) FROM tbl ORDER BY ALL;

SELECT LEFT(b COLLATE noaccent, 6) FROM tbl ORDER BY ALL;

SELECT RIGHT(b COLLATE noaccent, 6) FROM tbl ORDER BY ALL;

SELECT RIGHT(LEFT(b COLLATE noaccent, 6), 1) FROM tbl ORDER BY ALL;

SELECT REVERSE(a COLLATE noaccent) FROM tbl ORDER BY ALL;

SELECT a FROM tbl WHERE CONTAINS(b COLLATE noaccent, 'o') ORDER BY ALL;

SELECT a FROM tbl WHERE CONTAINS(b, 'ö' COLLATE noaccent) ORDER BY ALL;

SELECT a FROM tbl WHERE CONTAINS(b COLLATE nocase, 'O') ORDER BY ALL;

SELECT a FROM tbl WHERE STARTS_WITH(b COLLATE noaccent, '>>>>>o') ORDER BY ALL;

CREATE TABLE collate_test (s TEXT COLLATE NOACCENT.NOCASE);

INSERT INTO collate_test VALUES ('Mühleisen'), ('Hëllö');

SELECT * FROM collate_test WHERE s = 'Muhleisen';

SELECT * FROM collate_test WHERE s = 'muhleisen';

SELECT * FROM collate_test WHERE s = 'hEllô';

PRAGMA default_collation = 'NOCASE';

CREATE TABLE collate_test (s TEXT);

INSERT INTO collate_test VALUES ('hEllO'), ('WöRlD'), ('wozld');

SELECT COUNT(*) FROM collate_test WHERE 'BlA' = 'bLa';

SELECT * FROM collate_test WHERE s = 'hello';

SELECT * FROM collate_test ORDER BY s;

PRAGMA default_collation = 'NOCASE.NOACCENT';

SELECT * FROM collate_test ORDER BY s;

CREATE TABLE strings (s TEXT);

INSERT INTO strings VALUES ('Gabel'), ('Göbel'), ('Goethe'), ('Goldmann'), ('Göthe'), ('Götz');

SELECT * FROM strings ORDER BY s COLLATE de;

SELECT * FROM strings WHERE 'Goethe' > s COLLATE de ORDER BY 1;

SELECT * FROM strings WHERE 'Goethe' > s ORDER BY 1;

SELECT * FROM strings WHERE 'goethe' > s COLLATE de.NOCASE ORDER BY 1;

SELECT * FROM strings WHERE 'goethe' > s COLLATE NOCASE.de ORDER BY 1;

SELECT * FROM strings WHERE 'goethe' > s COLLATE NOACCENT.de ORDER BY 1;

DELETE FROM strings;

INSERT INTO strings VALUES ('賃貸人側連絡先 (Lessor side contact)'), ('賃借人側連絡先 (Lessee side contact)'), ('解約連絡先 (Termination contacts)'), ('更新連絡先 (Update contact)');

SELECT * FROM strings ORDER BY s;

SELECT * FROM strings ORDER BY s COLLATE ja.NOCASE;

SELECT ICU_SORT_KEY('Ş', 'ro');

SELECT ICU_SORT_KEY('goose', 'DUCK_DUCK_ENUM');

SELECT ICU_SORT_KEY('æ', 'icu_noaccent');

SELECT ICU_SORT_KEY('Æ', 'icu_noaccent');

SELECT CHR(2 * 16 * 256 + 1 * 256 + 2 * 16 + 11) COLLATE da = CHR(12 * 16 + 5) COLLATE da;

SELECT ICU_SORT_KEY(CHR(2 * 16 * 256 + 1 * 256 + 2 * 16 + 11), 'da') = ICU_SORT_KEY(CHR(12 * 16 + 5), 'da');

SELECT CHR(2 * 16 * 256 + 1 * 256 + 2 * 16 + 11) COLLATE da > CHR(12 * 16 + 5) COLLATE da;

SELECT CHR(2 * 16 * 256 + 1 * 256 + 2 * 16 + 11) COLLATE da > CHR(12 * 16 + 5) COLLATE da;

SELECT COUNT(*) FROM (SELECT CHR(2 * 16 * 256 + 1 * 256 + 2 * 16 + 11) UNION SELECT CHR(12 * 16 + 5)) AS t(s) GROUP BY s COLLATE da;

SELECT NFC_NORMALIZE(CHR(2 * 16 * 256 + 1 * 256 + 2 * 16 + 11)) = NFC_NORMALIZE(CHR(12 * 16 + 5));

SELECT COUNT(*) FROM (SELECT CHR(2 * 16 * 256 + 1 * 256 + 2 * 16 + 11) UNION SELECT CHR(12 * 16 + 5)) AS t(s) GROUP BY s COLLATE nfc;

CREATE TABLE t1 (c1 TEXT);

INSERT INTO t1 VALUES ('z'), ('Z'), ('a'), ('A'), ('æ'), ('Æ'), ('à'), ('À'), ('á'), ('Á'), ('â'), ('Â'), ('ã'), ('Ã'), ('ä'), ('Ä'), ('å'), ('Å'), ('b'), ('B');

SELECT GROUP_CONCAT(c1, '') AS group_c1 FROM t1 GROUP BY c1 COLLATE "NOCASE.ICU_NOACCENT" ORDER BY group_c1 COLLATE "NOCASE.ICU_NOACCENT";

SELECT 'Á' COLLATE "ICU_NOACCENT.NOACCENT";

BEGIN;

CREATE TABLE strings (s TEXT COLLATE "af");

INSERT INTO strings VALUES ('ŉ'), ('b'), ('T'), ('O'), ('M'), ('z'), ('ï'), ('F'), ('â'), ('h'), ('u'), ('V'), ('Q'), ('Î'), ('l'), ('m'), ('a'), ('o'), ('E'), ('W'), ('D'), ('i'), ('û'), ('Ê'), ('w'), ('Ï'), ('é'), ('n'), ('Ë'), ('j'), ('H'), ('x'), ('t'), ('L'), ('k'), ('Ô'), ('ô'), ('r'), ('f'), ('c'), ('î'), ('Ö'), ('g'), ('P'), ('X'), ('Á'), ('q'), ('ë'), ('U'), ('G'), ('S'), ('y'), ('á'), ('A'), ('s'), ('I'), ('B'), ('K'), ('Y'), ('Z'), ('R'), ('è'), ('Â'), ('J'), ('É'), ('C'), ('ö'), ('È'), ('N'), ('ê'), ('p'), ('e'), ('Û'), ('d'), ('v');

SELECT s FROM strings ORDER BY s, rowid;

ROLLBACK;

BEGIN;

CREATE TABLE strings (s TEXT COLLATE "sq");

INSERT INTO strings VALUES ('Tĥ'), ('Nǰ'), ('Ë'), ('Dȟ'), ('XȞ'), ('Xȟ'), ('rṝ'), ('tẖ'), ('RŖ'), ('Sḫ'), ('B'), ('ḛ̈'), ('lĺ'), ('M'), ('Sȟ'), ('p'), ('TȞ'), ('J'), ('Lĺ'), ('H'), ('Ẹ̈'), ('Xḣ'), ('dḣ'), ('SĤ'), ('rȑ'), ('zḩ'), ('ḉ'), ('Dẖ'), ('TḢ'), ('Rṛ'), ('NJ'), ('Dḫ'), ('Zḧ'), ('a'), ('L'), ('lḽ'), ('Zḩ'), ('Zḫ'), ('RṜ'), ('Ḙ̈'), ('DĤ'), ('sẖ'), ('Dḥ'), ('LĽ'), ('sḧ'), ('tḥ'), ('Rř'), ('ç'), ('GJ'), ('K'), ('c'), ('XḤ'), ('Th'), ('o'), ('RR'), ('Sẖ'), ('zẖ'), ('rŕ'), ('ZḢ'), ('Tḧ'), ('lḻ'), ('zḧ'), ('rṟ'), ('XḦ'), ('LḼ'), ('rr'), ('DḢ'), ('Zḣ'), ('Dḧ'), ('x'), ('zȟ'), ('sḫ'), ('SḦ'), ('NĴ'), ('LḶ'), ('xḥ'), ('G'), ('Tḩ'), ('Xḥ'), ('Xĥ'), ('DH'), ('xḫ'), ('Sĥ'), ('Xḫ'), ('zĥ'), ('Lḽ'), ('RȒ'), ('lḹ'), ('Tȟ'), ('lľ'), ('LĹ'), ('Gǰ'), ('SḢ'), ('ZḨ'), ('Tẖ'), ('gĵ'), ('O'), ('I'), ('s'), ('dȟ'), ('SḤ'), ('U'), ('LL'), ('Sh'), ('rȓ'), ('dḩ'), ('xẖ'), ('Lļ'), ('XH'), ('Ḉ'), ('SH'), ('Y'), ('Xḧ'), ('Gj'), ('TḪ'), ('xḧ'), ('F'), ('Xh'), ('LḺ'), ('xh'), ('GĴ'), ('C'), ('sḩ'), ('Rŗ'), ('sĥ'), ('XḪ'), ('u'), ('tḫ'), ('m'), ('v'), ('th'), ('k'), ('Rṟ'), ('Gĵ'), ('Ç'), ('t'), ('y'), ('RṚ'), ('TḨ'), ('Rȓ'), ('xḩ'), ('zḥ'), ('Ę̈'), ('Z'), ('RṞ'), ('dḥ'), ('Tḣ'), ('ZḤ'), ('Xẖ'), ('dḫ'), ('ZḪ'), ('D'), ('Tḫ'), ('xĥ'), ('b'), ('zh'), ('Tḥ'), ('l'), ('tḣ'), ('Rṙ'), ('LĻ'), ('gj'), ('Q'), ('e'), ('Lḷ'), ('tḩ'), ('Ḛ̈'), ('lḷ'), ('Rȑ'), ('sȟ'), ('h'), ('gǰ'), ('XĤ'), ('lļ'), ('dẖ'), ('RṘ'), ('Sḣ'), ('Zĥ'), ('E'), ('Nj'), ('Dḣ'), ('sḣ'), ('TḤ'), ('SḪ'), ('zḫ'), ('RŘ'), ('n'), ('ll'), ('z'), ('xḣ'), ('rṙ'), ('ZH'), ('tḧ'), ('N'), ('Sḩ'), ('sh'), ('Sḧ'), ('Nĵ'), ('DȞ'), ('T'), ('RȐ'), ('Dĥ'), ('X'), ('DḤ'), ('nǰ'), ('ZĤ'), ('ZḦ'), ('dĥ'), ('r'), ('ȩ̈'), ('rṛ'), ('Sḥ'), ('Xḩ'), ('j'), ('DḦ'), ('Dḩ'), ('R'), ('nj'), ('DḨ'), ('g'), ('TH'), ('Lḻ'), ('Zḥ'), ('RŔ'), ('sḥ'), ('Lḹ'), ('i'), ('dh'), ('A'), ('Lľ'), ('SḨ'), ('zḣ'), ('TḦ'), ('Ll'), ('xȟ'), ('Ȩ̈'), ('Rr'), ('d'), ('q'), ('ę̈'), ('DḪ'), ('f'), ('P'), ('TĤ'), ('S'), ('Rṝ'), ('ë'), ('LḸ'), ('Dh'), ('ẹ̈'), ('Zẖ'), ('ḙ̈'), ('dḧ'), ('rř'), ('rŗ'), ('tȟ'), ('ZȞ'), ('SȞ'), ('XḨ'), ('Rŕ'), ('XḢ'), ('V'), ('tĥ'), ('Zȟ'), ('Zh'), ('nĵ');

SELECT s FROM strings ORDER BY s, rowid;

ROLLBACK;

BEGIN;

CREATE TABLE strings (s TEXT COLLATE "am");

INSERT INTO strings VALUES ('ጺ'), ('ቸ'), ('ዥ'), ('ረ'), ('ጣ'), ('ኰ'), ('ጸ'), ('ቋ'), ('ኼ'), ('ኂ'), ('ዬ'), ('ሁ'), ('ደ'), ('ጌ'), ('ኟ'), ('ኝ'), ('ኖ'), ('ሏ'), ('ቁ'), ('ጳ'), ('ሆ'), ('ቡ'), ('ዤ'), ('ሳ'), ('ሑ'), ('ፏ'), ('ሪ'), ('ቃ'), ('ጶ'), ('ሮ'), ('ኚ'), ('ጇ'), ('ጩ'), ('ጂ'), ('ቬ'), ('ይ'), ('ወ'), ('ፌ'), ('ታ'), ('ሚ'), ('ጄ'), ('ሖ'), ('ኮ'), ('ዡ'), ('ዲ'), ('ሽ'), ('ፅ'), ('ጓ'), ('አ'), ('ካ'), ('ፑ'), ('ቾ'), ('ሜ'), ('ጃ'), ('ተ'), ('ቢ'), ('ኃ'), ('ና'), ('ሕ'), ('ጔ'), ('ጻ'), ('ሺ'), ('ዷ'), ('ቀ'), ('ቨ'), ('ሿ'), ('ሻ'), ('ዔ'), ('ኹ'), ('ዑ'), ('ዋ'), ('ዖ'), ('ኜ'), ('ዙ'), ('ቌ'), ('ቪ'), ('ኒ'), ('ቴ'), ('ል'), ('ፕ'), ('ኦ'), ('ኛ'), ('ቿ'), ('ዩ'), ('ፄ'), ('ዮ'), ('ሟ'), ('ዪ'), ('ፉ'), ('ቶ'), ('ብ'), ('ጰ'), ('ኔ'), ('ሎ'), ('ሗ'), ('ጠ'), ('ኁ'), ('ግ'), ('ዛ'), ('ዦ'), ('ሡ'), ('ች'), ('ነ'), ('ጹ'), ('ቦ'), ('ኋ'), ('ኴ'), ('ሢ'), ('ማ'), ('ኙ'), ('ኆ'), ('ኣ'), ('ያ'), ('ር'), ('ጋ'), ('ቤ'), ('ቆ'), ('ኺ'), ('ሠ'), ('ሤ'), ('ኤ'), ('ኽ'), ('ሓ'), ('ቊ'), ('ጾ'), ('ቮ'), ('ጽ'), ('ኪ'), ('ጅ'), ('ሦ'), ('የ'), ('ፋ'), ('ድ'), ('ሷ'), ('ዞ'), ('ሹ'), ('ፐ'), ('ጕ'), ('ዜ'), ('ሯ'), ('ጤ'), ('ቹ'), ('ቈ'), ('ጭ'), ('ጐ'), ('ዉ'), ('ኧ'), ('ጵ'), ('ሞ'), ('ፎ'), ('ኻ'), ('ጧ'), ('ቧ'), ('ዣ'), ('ጦ'), ('ባ'), ('ጫ'), ('ራ'), ('ሾ'), ('ላ'), ('ቄ'), ('ኸ'), ('ሔ'), ('ሃ'), ('ጆ'), ('ዕ'), ('ዳ'), ('ሸ'), ('ዐ'), ('ኢ'), ('ዓ'), ('ጴ'), ('ህ'), ('ጢ'), ('ኲ'), ('ፊ'), ('ኌ'), ('ጡ'), ('ከ'), ('ሂ'), ('ሀ'), ('ሶ'), ('ኑ'), ('ዢ'), ('ኩ'), ('ጬ'), ('ፒ'), ('ሲ'), ('ዝ'), ('ዊ'), ('ፃ'), ('ቼ'), ('ፓ'), ('ገ'), ('ክ'), ('ሧ'), ('ሥ'), ('ኞ'), ('ሄ'), ('መ'), ('ቲ'), ('ኅ'), ('ጮ'), ('ኈ'), ('ዠ'), ('ጱ'), ('ጲ'), ('ቺ'), ('ሊ'), ('ጪ'), ('ጥ'), ('እ'), ('ጊ'), ('ኬ'), ('ጼ'), ('ጿ'), ('ፀ'), ('ዌ'), ('ሣ'), ('ሌ'), ('ኗ'), ('ሐ'), ('ን'), ('ቩ'), ('ፆ'), ('ቱ'), ('ቫ'), ('ኀ'), ('ዱ'), ('ስ'), ('ሉ'), ('ጎ'), ('ዘ'), ('ኄ'), ('ፖ'), ('ቂ'), ('ጨ'), ('ሰ'), ('ው'), ('ቯ'), ('ጷ'), ('ቅ'), ('ጒ'), ('ኾ'), ('ሒ'), ('ቻ'), ('ኳ'), ('ም'), ('ኡ'), ('ፈ'), ('ዟ'), ('ዧ'), ('ዎ'), ('ፔ'), ('ዒ'), ('ሬ'), ('ሴ'), ('ፍ'), ('ጁ'), ('ዚ'), ('ሱ'), ('ጯ'), ('ኵ'), ('ፁ'), ('ት'), ('ዶ'), ('ሩ'), ('ቷ'), ('ጀ'), ('ፂ'), ('ቭ'), ('ኘ'), ('ኊ'), ('ዴ'), ('ኍ'), ('በ'), ('ሼ'), ('ጉ'), ('ሙ'), ('ቍ'), ('ፗ'), ('ለ');

SELECT s FROM strings ORDER BY s, rowid;

ROLLBACK;

BEGIN;

CREATE TABLE strings (s TEXT COLLATE "hy");

INSERT INTO strings VALUES ('լ'), ('վ'), ('եւ'), ('գ'), ('Մ'), ('Ր'), ('ո'), ('յ'), ('և'), ('Ե'), ('ձ'), ('ջ'), ('Օ'), ('ճ'), ('Ֆ'), ('ի'), ('դ'), ('պ'), ('ր'), ('թ'), ('Պ'), ('Ը'), ('Ս'), ('Բ'), ('Տ'), ('Է'), ('Յ'), ('տ'), ('մ'), ('Ջ'), ('Լ'), ('Հ'), ('չ'), ('Ն'), ('Վ'), ('հ'), ('Ւ'), ('ղ'), ('ծ'), ('Ա'), ('Դ'), ('Ռ'), ('Զ'), ('ա'), ('ժ'), ('խ'), ('ռ'), ('Ց'), ('ե'), ('շ'), ('Կ'), ('ւ'), ('Փ'), ('Ձ'), ('ը'), ('Ժ'), ('Ծ'), ('կ'), ('ֆ'), ('փ'), ('ն'), ('զ'), ('Խ'), ('բ'), ('օ'), ('Ո'), ('ց'), ('Թ'), ('Ղ'), ('Գ'), ('է'), ('Ք'), ('Չ'), ('Շ'), ('Ի'), ('Եւ'), ('Ճ'), ('ք'), ('ս');

SELECT s FROM strings ORDER BY s, rowid;

ROLLBACK;

BEGIN;

CREATE TABLE strings (s TEXT COLLATE "as");

INSERT INTO strings VALUES ('ৃ'), ('গ'), ('ঁ'), ('দ'), ('ৈ'), ('ু'), ('ি'), ('ো'), ('ড়'), ('য়'), ('ী'), ('ও'), ('ঊ'), ('ণ'), ('ঠ'), ('ঈ'), ('অ'), ('ভ'), ('ক'), ('স'), ('জ'), ('ছ'), ('ঔ'), ('আ'), ('এ'), ('ব'), ('ঘ'), ('ে'), ('ৰ'), ('ঞ'), ('ঙ'), ('ৌ'), ('ত্‍'), ('ঃ'), ('ৱ'), ('ন'), ('ঢ়'), ('ই'), ('ড'), ('হ'), ('ঢ'), ('প'), ('ট'), ('ত'), ('ং'), ('ঝ'), ('ঋ'), ('ম'), ('শ'), ('ক্ষ'), ('ষ'), ('ঐ'), ('চ'), ('ূ'), ('থ'), ('ধ'), ('য'), ('্'), ('়'), ('া'), ('খ'), ('ল'), ('উ'), ('ৎ'), ('ফ');

SELECT s FROM strings ORDER BY s, rowid;

ROLLBACK;

BEGIN;

CREATE TABLE strings (s TEXT COLLATE "az");

INSERT INTO strings VALUES ('โบ'), ('Ï'), ('ﺄ'), ('ใฉ'), ('ﺉ'), ('แข'), ('เฅ'), ('w'), ('โฃ'), ('ǘ'), ('I'), ('ى'), ('แซ'), ('ﻲ'), ('โด'), ('แฑ'), ('ə'), ('เฎ'), ('แส'), ('R'), ('เฃ'), ('แผ'), ('B'), ('Ŵ'), ('โฆ'), ('เส'), ('เว'), ('โฏ'), ('เศ'), ('ȫ'), ('إ'), ('ۥ'), ('โอ'), ('แก'), ('ẋ'), ('โว'), ('แช'), ('ؤ'), ('แฤ'), ('แฟ'), ('ใฑ'), ('โข'), ('Ọ̈'), ('โฅ'), ('Ḭ'), ('แภ'), ('c'), ('โถ'), ('โฝ'), ('Ì'), ('ﺍ'), ('ợ̈'), ('Ị'), ('Ö'), ('Ẇ'), ('Í'), ('Ư̈'), ('โช'), ('ة'), ('เธ'), ('โย'), ('ﻳ'), ('ﺅ'), ('โส'), ('ṷ̈'), ('f'), ('ọ̈'), ('C'), ('โผ'), ('เก'), ('t'), ('เฏ'), ('โฐ'), ('แว'), ('แถ'), ('Ẁ'), ('โฦ'), ('แษ'), ('เค'), ('n'), ('Ṳ̈'), ('Ǐ'), ('r'), ('แธ'), ('เต'), ('ﻰ'), ('Z'), ('แน'), ('โก'), ('Ự̈'), ('J'), ('ใก'), ('เฦ'), ('ų̈'), ('Ȫ'), ('ự̈'), ('ö'), ('โท'), ('เฒ'), ('ﺂ'), ('ﻪ'), ('โฒ'), ('โค'), ('Ü'), ('เฆ'), ('ụ̈'), ('x'), ('โภ'), ('โต'), ('แฃ'), ('ǜ'), ('ẇ'), ('โป'), ('d'), ('o'), ('ﻭ'), ('Ợ̈'), ('Ẅ'), ('แฐ'), ('F'), ('โง'), ('ẅ'), ('ş'), ('เด'), ('ۦ'), ('Ǖ'), ('แย'), ('s'), ('ǖ'), ('أ'), ('ç'), ('แฆ'), ('ﺃ'), ('ư̈'), ('ﻬ'), ('A'), ('K'), ('ﻱ'), ('m'), ('Ǘ'), ('Ģ̆'), ('โญ'), ('ใช'), ('โศ'), ('เฟ'), ('ẘ'), ('เข'), ('แอ'), ('แฬ'), ('z'), ('เฉ'), ('โฤ'), ('โฬ'), ('ﻯ'), ('เฤ'), ('Į̇'), ('Ǫ̈'), ('Ȉ'), ('เน'), ('ใฐ'), ('ﺔ'), ('แฎ'), ('เฌ'), ('เซ'), ('l'), ('เห'), ('Ỉ'), ('ü'), ('โล'), ('Ǜ'), ('ﺆ'), ('ṳ̈'), ('P'), ('เช'), ('ﯩ'), ('Ų̈'), ('H'), ('แจ'), ('N'), ('โฎ'), ('โฟ'), ('ģ̆'), ('y'), ('G'), ('เบ'), ('แง'), ('ใง'), ('ı'), ('ﺎ'), ('โห'), ('V'), ('โษ'), ('เผ'), ('ﻩ'), ('Ơ̈'), ('Ğ'), ('ﻮ'), ('โฑ'), ('แฝ'), ('เฬ'), ('เณ'), ('p'), ('แม'), ('เจ'), ('โซ'), ('เป'), ('Ḭ̇'), ('เฑ'), ('แศ'), ('ơ̈'), ('เษ'), ('Ḯ'), ('แญ'), ('โจ'), ('v'), ('ใญ'), ('เฐ'), ('เท'), ('เง'), ('เภ'), ('ǚ'), ('แท'), ('แฉ'), ('Ṷ̈'), ('O'), ('ﺋ'), ('เพ'), ('Ṵ̈'), ('โม'), ('เย'), ('آ'), ('L'), ('Ẉ'), ('ǫ̈'), ('ใซ'), ('ﺈ'), ('แพ'), ('D'), ('İ'), ('ใฌ'), ('Ḉ'), ('k'), ('แฦ'), ('ẁ'), ('แด'), ('แณ'), ('g'), ('ẃ'), ('ใฎ'), ('Ç'), ('ẍ'), ('X'), ('ﻴ'), ('j'), ('U'), ('Ĭ'), ('แล'), ('ใฅ'), ('S'), ('ใฏ'), ('Q'), ('Î'), ('เญ'), ('แฅ'), ('แห'), ('ใจ'), ('ﺁ'), ('แต'), ('แฏ'), ('Ĩ'), ('เล'), ('Ə'), ('u'), ('ﺓ'), ('ḉ'), ('โฮ'), ('เถ'), ('Y'), ('โร'), ('Ȋ'), ('ใค'), ('Ǚ'), ('Ī'), ('W'), ('ئ'), ('Ẋ'), ('Ụ̈'), ('q'), ('แฮ'), ('แป'), ('โน'), ('เม'), ('Ị̇'), ('แร'), ('E'), ('แฌ'), ('ṵ̈'), ('ﺌ'), ('โพ'), ('b'), ('ŵ'), ('ﯨ'), ('ﻫ'), ('Į'), ('เอ'), ('Ẃ'), ('a'), ('ﺊ'), ('เร'), ('i'), ('ใฆ'), ('โธ'), ('โณ'), ('ใฃ'), ('h'), ('แค'), ('M'), ('Ẍ'), ('เฝ'), ('ﺇ'), ('แฒ'), ('e'), ('Ş'), ('เฮ'), ('โฌ'), ('ẉ'), ('ใข'), ('แบ'), ('โฉ'), ('ğ'), ('T');

SELECT s FROM strings ORDER BY s, rowid;

ROLLBACK;

BEGIN;

CREATE TABLE strings (s TEXT COLLATE "be");

INSERT INTO strings VALUES ('а'), ('дз'), ('г'), ('Ф'), ('в'), ('Ё'), ('К'), ('Ы'), ('у'), ('ш'), ('д'), ('я'), ('б'), ('т'), ('е'), ('к'), ('х'), ('Ц'), ('Ў'), ('М'), ('Ь'), ('Т'), ('Н'), ('Я'), ('э'), ('ж'), ('П'), ('ў'), ('І'), ('р'), ('м'), ('Х'), ('Е'), ('дж'), ('н'), ('о'), ('л'), ('О'), ('ц'), ('У'), ('Э'), ('ь'), ('ё'), ('А'), ('Г'), ('С'), ('З'), ('ф'), ('ю'), ('Й'), ('п'), ('Л'), ('Д'), ('ч'), ('Р'), ('ы'), ('с'), ('з'), ('й'), ('Б'), ('і'), ('Ч'), ('В'), ('Ш'), ('Ж'), ('Ю');

SELECT s FROM strings ORDER BY s, rowid;

ROLLBACK;

BEGIN;

CREATE TABLE strings (s TEXT COLLATE "bg");

INSERT INTO strings VALUES ('З'), ('ш'), ('У'), ('Д'), ('П'), ('т'), ('Ш'), ('е'), ('А'), ('л'), ('Н'), ('О'), ('Л'), ('Й'), ('р'), ('п'), ('Ю'), ('Я'), ('я'), ('щ'), ('с'), ('з'), ('Ц'), ('Б'), ('ц'), ('о'), ('Т'), ('С'), ('ь'), ('к'), ('ф'), ('Ф'), ('ю'), ('м'), ('Р'), ('д'), ('й'), ('у'), ('Х'), ('а'), ('И'), ('ъ'), ('М'), ('б'), ('В'), ('Г'), ('г'), ('н'), ('Ь'), ('Ч'), ('К'), ('в'), ('ч'), ('Е'), ('и'), ('Ъ'), ('Щ'), ('х'), ('ж'), ('Ж');

SELECT s FROM strings ORDER BY s, rowid;

ROLLBACK;

BEGIN;

CREATE TABLE strings (s TEXT COLLATE "my");

INSERT INTO strings VALUES ('ာဉ္'), ('ဥဓ္'), ('ဣန္'), ('ေါန္'), ('ဧဍ္'), ('ဠ'), ('ုဃ်'), ('ဥဃ်'), ('ေဆ်'), ('ဧဏ်'), ('ဍ္'), ('ိုသ္'), ('ဖ္'), ('ာဟ်'), ('ဣက်'), ('ဣဏ်'), ('ာဖ်'), ('ုဉ်'), ('ျွှ'), ('ဥတ္'), ('ါဃ်'), ('ဧဃ်'), ('ုတ္'), ('ေဋ္'), ('ဩောမ်'), ('ိဒ်'), ('ောဓ်'), ('ေဂ်'), ('ခ်'), ('ေဇ္'), ('တ်'), ('ဧစ္'), ('ါဋ္'), ('ဧခ်'), ('ဩောခ္'), ('ိဓ္'), ('ောည္'), ('ဩဖ္'), ('ာဂ်'), ('ိုသ်'), ('ိုဏ်'), ('ုထ်'), ('ိုဋ်'), ('ဣသ္'), ('ာဟ္'), ('ုံ့'), ('ဩဘ္'), ('ေါက်'), ('ုမ့်'), ('ဣထ္'), ('ဩောဒ်'), ('င်'), ('ဩောမ္'), ('အ်'), ('ဎ'), ('ဃ'), ('ုပ်'), ('ိုဃ်'), ('ိည္'), ('ဩင်'), ('ေါည္'), ('ဩဋ္'), ('ဣတ်'), ('ောပ္'), ('ဥဿ'), ('ေန္'), ('ဣဌ္'), ('စ်'), ('ေစ်'), ('ဩောဟ္'), ('ဍ'), ('ါဎ္'), ('ိုင်္'), ('ောဘ္'), ('ုံ'), ('ဩဃ်'), ('ါဠ်'), ('ဥဒ်'), ('ဟ'), ('ေဖ်'), ('ို'), ('ေဗ်'), ('ောဏ်'), ('ဣထ်'), ('ဓ်'), ('ိုခ္'), ('ောက်ျ'), ('ါရ်'), ('ာထ်'), ('ျ'), ('ိဈ်'), ('ေါဍ်'), ('ဩဏ္'), ('ာဂ္'), ('ာဆ်'), ('ိပ်'), ('ဥဃ္'), ('န္'), ('ောဍ်'), ('ဧဓ္'), ('ေါဍ္'), ('ေါဗ္'), ('ဣလ်'), ('ောဃ္'), ('ါ'), ('ါဍ္'), ('ာဒ်'), ('ဩောည္'), ('ေခ်'), ('ုထ္'), ('ေဘ်'), ('ိုစ်'), ('ောဈ်'), ('ဌ်'), ('ာဎ္'), ('ောဟ်'), ('ုအ်'), ('ုဓ္'), ('ောလ်'), ('ိမ်'), ('ဧဖ်'), ('ေဟ္'), ('္'), ('ောဝ်'), ('ၟ'), ('ဆ္'), ('ွ'), ('ုဟ္'), ('ါဒ္'), ('ေဗ္'), ('ိုဇ္'), ('ြှ'), ('ဩဃ္'), ('ဥ'), ('ဩယ္'), ('ါဓ်'), ('ဣယ္'), ('ယ်'), ('ာယ်'), ('ါအ်'), ('ဣတ္'), ('ိုမ္'), ('ါဗ္'), ('ဥဆ်'), ('ာလ်'), ('ေါပ္'), ('ဩောလ်'), ('ေမ္'), ('ိုအ်'), ('ိုဓ်'), ('ဩောဂ္'), ('ဣဎ္'), ('ြ'), ('ုက္'), ('ေမ်'), ('ေဍ်'), ('ောက်'), ('ဩ'), ('ေဒ်'), ('၎င်း'), ('ဧ'), ('ါဏ်'), ('ဩောဘ္'), ('ဣဗ္'), ('ါလ္'), ('ုယ္'), ('ုဟ်'), ('ာဗ္'), ('ုန္'), ('ခ္'), ('ောထ်'), ('ဥဇ်'), ('ေါဆ္'), ('ာဓ္'), ('ဧဓ်'), ('ဂ်'), ('ေထ်'), ('ဩောယ္'), ('ဋ'), ('ိုပ်'), ('ုံး'), ('ဩောဉ္'), ('ိသ္'), ('ဉ္'), ('ဩဎ္'), ('့'), ('ေါခ္'), ('ေါဗ်'), ('ဥဋ္'), ('ုဈ်'), ('ဌ'), ('ါဆ်'), ('ဥဍ်'), ('ဧဇ္'), ('ါထ်'), ('ဋ္'), ('ေက္'), ('ါခ္'), ('ရ'), ('ဩဓ္'), ('ေရ်'), ('ဩောဃ္'), ('ိခ္'), ('ဩောသ္'), ('ောအ်'), ('ုဆ္'), ('စ္'), ('ေါဎ်'), ('ာင်္'), ('ေါဘ်'), ('ါဓ္'), ('ဣလ္'), ('ဩဌ္'), ('ါယ္'), ('ိုဉ်'), ('ာန္'), ('ေါ'), ('ဥထ်'), ('ေင်'), ('ဩည္'), ('ဥဒ္'), ('ောဉ္'), ('ေါဈ်'), ('ဥဉ္'), ('ဥပ္'), ('ိဟ်'), ('ဏ်'), ('ေယ်'), ('ဩပ္'), ('ဥမ်'), ('ုဖ္'), ('ါဇ္'), ('ာဓ်'), ('ဩောဟ်'), ('ေဘ္'), ('ိဿ'), ('င်္'), ('ုစ္'), ('ဧဂ်'), ('ိဖ်'), ('ေါသ္'), ('ောဓ္'), ('ဥင္'), ('ဩောဗ်'), ('ါဂ္'), ('ာရ္'), ('ဂ'), ('ဩသ္'), ('ဈ်'), ('ုမ္'), ('ါဋ်'), ('ဧဆ္'), ('ဥစ္'), ('ိမ်း'), ('ောဉ်'), ('န်'), ('ဩယ်'), ('ာက္'), ('ုဓ်'), ('ါဘ္'), ('ါည်'), ('ဥရ်'), ('ှ'), ('ိုဍ္'), ('ိဎ်'), ('ေါဓ္'), ('ါမ္'), ('ောတ်'), ('ဧတ်'), ('ောဒ္'), ('ေအ်'), ('ဒ္'), ('ါဍ်'), ('ဩမ်'), ('ဣဍ္'), ('ာပ္'), ('ိုမ်'), ('ိုဈ်'), ('ိုယ္'), ('ဩောဍ္'), ('ာန်'), ('ဥစ်'), ('ဏ'), ('ိဃ္'), ('ိဏ်'), ('ဥဖ်'), ('ဩောဇ်'), ('ိဖ္'), ('ါရ္'), ('ထ္'), ('ိုဟ်'), ('ဧပ်'), ('ဥဘ္'), ('ိဟ္'), ('ာဍ္'), ('ဥက္'), ('ိန္'), ('ိုဎ္'), ('ောဒ်'), ('ဧဒ္'), ('ေါဘ္'), ('ုယ်'), ('ောဌ်'), ('ဩောထ္'), ('ေါဇ်'), ('ဥဇ္'), ('ဓ'), ('ာင်'), ('ေဎ်'), ('ါည္'), ('ေါဂ္'), ('ဧရ်'), ('ဧဃ္'), ('ဥခ္'), ('ျွ'), ('ြွှ'), ('ဩောဏ်'), ('ိုဆ္'), ('ိုရ္'), ('ဩရ္'), ('ါယ်'), ('ောဆ္'), ('ေါန်'), ('ေါဏ်'), ('ဩဎ်'), ('ဣဂ်'), ('ါက်'), ('ေါမ်'), ('ုခ်'), ('ဩဉ်'), ('ဩောတ်'), ('ေည္'), ('ေတ်'), ('ါဂ်'), ('ဥတ်'), ('ေဃ်'), ('ါက္'), ('ါဇ်'), ('က'), ('ိုလ္'), ('ိုဘ်'), ('ေဒ္'), ('ေဉ္'), ('ဥယ္'), ('ောမ်'), ('ဧလ္'), ('ဉ်'), ('ေဏ္'), ('ါင်္'), ('ဧက္'), ('ွှ'), ('လ္'), ('ဧသ်'), ('ောင်္'), ('ည္'), ('ိလ်'), ('ေည်'), ('ဣဍ်'), ('ါဖ္'), ('ေါဆ်'), ('ဩဗ်'), ('ဩောဘ်'), ('ောထ္'), ('ောရ္'), ('ိုန်'), ('န'), ('ေါဒ်'), ('ဧစ်'), ('ည'), ('လ'), ('ေဏ်'), ('ဘ္'), ('ဣည္'), ('ိဂ်'), ('ဩောန်'), ('ယ္'), ('ောယ္'), ('ေပ်'), ('ေါဟ္'), ('ါပ္'), ('ဣမ်'), ('ါဎ်'), ('ိုပ္'), ('ဧဘ္'), ('ောတ္'), ('ခ'), ('ဧဆ်'), ('ဉ'), ('ဩတ်'), ('ိုဝ်'), ('န်ုပ်'), ('ဇ်'), ('ည်'), ('မ်'), ('ဥင်'), ('ာဌ်'), ('ိဗ္'), ('ေယ္'), ('ုရ်'), ('ဩင္'), ('ိထ်'), ('ေက်'), ('ုဒ္'), ('ုဂ္'), ('ေဇ်'), ('ဤ'), ('ဩဇ္'), ('ုဎ်'), ('ိဒ္'), ('ဩောဒ္'), ('ဇ္'), ('ိုဌ်'), ('ုဍ်'), ('ေါဠ်'), ('ိုဗ္'), ('ဩဂ်'), ('ဩဍ္'), ('ိုဏ္'), ('ဧည်'), ('ဣဆ္'), ('ေါဒ္'), ('ဣသ်'), ('ိုဆ်'), ('ိဃ်'), ('ဣက္'), ('်'), ('ာဖ္'), ('ဨ'), ('ဩဓ်'), ('ဧဌ္'), ('ုက်'), ('ဥဗ်'), ('ာဇ္'), ('ေါတ္'), ('ဩောဏ္'), ('ုဠ်'), ('ာယ္'), ('ဣပ်'), ('ိလ္'), ('ော်'), ('ဧဉ္'), ('ောဌ္'), ('ါလ်'), ('ါဘ်'), ('ိုည်'), ('ေဍ္'), ('ေါခ်'), ('ေန်'), ('ဩောသ်'), ('ိယ္'), ('ဩက္'), ('ေါဇ္'), ('ိဠ်'), ('ာတ္'), ('သ'), ('သ္'), ('ဥဓ်'), ('ောရ်'), ('ောက္'), ('ံ'), ('ိုတ္'), ('ဧပ္'), ('ိုဖ်'), ('ဩောဇ္'), ('ဩောထ်'), ('ဣန်'), ('ောဃ်'), ('ပ္'), ('ိုန္'), ('ြွ'), ('ေလ်'), ('ဥဟ္'), ('ဧဗ်'), ('ဣဋ္'), ('ဩည်'), ('ဥဂ်'), ('ဧဗ္'), ('ဩဆ်'), ('ေါဖ္'), ('ိုဠ်'), ('ါစ္'), ('ောစ်'), ('ဣဃ်'), ('ေဉ်'), ('ါဌ္'), ('ေါရ်'), ('က္'), ('ုဏ်'), ('ောဖ္'), ('သ္မီ'), ('ာဉ်'), ('ာလ္'), ('ုဘ္'), ('ိခ်'), ('ဥမ္'), ('ိန်'), ('ဥဎ္'), ('ိုခ်'), ('ိည်'), ('ဩဒ္'), ('ဩက်'), ('ာရ်'), ('ဣဂ္'), ('ဣဎ်'), ('ဩဇ်'), ('ေဆ္'), ('ေဋ်'), ('ိတ္'), ('ောင်'), ('င'), ('ိုထ္'), ('ာဘ္'), ('ိဗ်'), ('ုဋ်'), ('ဌ္'), ('ါပ်'), ('ဥဆ္'), ('ေလ္'), ('ီ'), ('ာထ္'), ('ု'), ('ာဍ်'), ('ဩောခ်'), ('ာဋ္'), ('ောဇ္'), ('ဗ်'), ('ယ'), ('ဣဟ္'), ('ေါတ်'), ('ုဝ်'), ('ိအ်'), ('ိဉ်'), ('ါသ္'), ('ဥက်'), ('ုဇ္'), ('ဦ'), ('ဩောဖ်'), ('ဣဿ'), ('ာ'), ('ိုဟ္'), ('ိုဎ်'), ('ိဉ္'), ('ောဎ္'), ('ဍ်'), ('ောဎ်'), ('ိဎ္'), ('ာဏ္'), ('ိရ္'), ('ဩဖ်'), ('ိသ်'), ('ဩလ္'), ('ိဓ်'), ('ောဗ္'), ('ောစ္'), ('ုဉ္'), ('ုဒ်'), ('ုမ်း'), ('ုလ္'), ('ဣ'), ('ဣယ်'), ('ေါဝ်'), ('ဪ'), ('ဥဌ္'), ('ေဎ္'), ('ိုည္'), ('ိုဂ်'), ('ောန္'), ('ေါည်'), ('ဘ်'), ('ဆ်'), ('ိုဗ်'), ('ဧဖ္'), ('ောသ်'), ('ဩောတ္'), ('ဩထ်'), ('ိတ်'), ('ေါလ်'), ('ဩောင္'), ('ဩဒ်'), ('ေါဋ်'), ('ေါယ်'), ('ေတ္'), ('ေဓ္'), ('ဣခ္'), ('ာဃ္'), ('ေါဋ္'), ('ဣဏ္'), ('ိပ္'), ('ါတ္'), ('ါတ်'), ('ါဖ်'), ('ိုဉ္'), ('ဩဍ်'), ('ေဟ်'), ('ဣဘ်'), ('ႂ'), ('ဧဟ်'), ('ဿ'), ('ဥခ်'), ('ထ'), ('ဗ'), ('ဣခ်'), ('ဩဗ္'), ('ိစ္'), ('စ'), ('ာဃ်'), ('တ္'), ('ဧဂ္'), ('ါသ်'), ('ောဏ္'), ('ောခ္'), ('ိင်္'), ('ဥလ္'), ('ိုထ်'), ('ဣဋ်'), ('ဣဉ်'), ('ဈ'), ('ဘ'), ('ိဌ်'), ('ဇ'), ('ိုဇ်'), ('ိဇ်'), ('ဖ'), ('လက်ျာ'), ('ဥဉ်'), ('ိဏ္'), ('ဩဂ္'), ('ာဇ်'), ('ိုဌ္'), ('ဩောဓ္'), ('ဧဒ်'), ('ဥဂ္'), ('ဣဆ်'), ('ိုဒ်'), ('ုလ်'), ('ိက္'), ('ာဒ္'), ('ေါမ္'), ('ဧဎ္'), ('ဩလ်'), ('ဧမ်'), ('ါဝ်'), ('ေါ်'), ('ေဃ္'), ('မ'), ('ဥဖ္'), ('ောဂ်'), ('ဧခ္'), ('ာစ္'), ('သ်'), ('း'), ('ိုက္'), ('ဥလ်'), ('ေဿ'), ('ါဏ္'), ('ဩောဎ္'), ('ုန်'), ('ေဓ်'), ('ောဗ်'), ('ေ'), ('ေါဉ်'), ('ဝ်'), ('ဝ'), ('ောဆ်'), ('ဩန်'), ('ဧထ္'), ('ောဂ္'), ('ုည္'), ('ါဌ်'), ('ဧဟ္'), ('ဎ္'), ('ဥဏ်'), ('ဗ္'), ('ုဿ'), ('ဩောဋ္'), ('ိုဓ္'), ('ိဍ်'), ('ါစ်'), ('မ္'), ('ောဋ္'), ('ေခ္'), ('ဩောဉ်'), ('ဥဏ္'), ('ေသ်'), ('ိမ္'), ('ဠ်'), ('ေဝ်'), ('ဥဗ္'), ('ဥန်'), ('ဥယ်'), ('ေဌ္'), ('ောဟ္'), ('ဧဍ်'), ('ျှ'), ('ါဈ်'), ('ာည္'), ('ိုယ်'), ('ုခ္'), ('ေါဃ်'), ('ေါဌ္'), ('ာဎ်'), ('ါန္'), ('ဩောရ်'), ('ေါယ္'), ('ဣည်'), ('ါဟ်'), ('ုင်'), ('ဩောည်'), ('ုဌ်'), ('ဃ်'), ('ိုဂ္'), ('ေါအ်'), ('ေစ္'), ('ဩောဎ်'), ('ာဈ်'), ('ဣစ္'), ('ေါစ္'), ('ာဠ်'), ('ေါဎ္'), ('ိုင်'), ('ဩောပ္'), ('ိံ့'), ('၍'), ('ဏ္'), ('ာသ္'), ('ေထ္'), ('ုဆ်'), ('ိ'), ('ဆ'), ('ိုလ်'), ('ောပ်'), ('ပ်'), ('ေါစ်'), ('ိဍ္'), ('ဩောန္'), ('ိင်'), ('ောယ်'), ('ေါလ္'), ('ေါင်္'), ('ဩပ်'), ('ိက်'), ('ေပ္'), ('ိုဃ္'), ('ဒ်'), ('ဧဋ္'), ('ဩဘ်'), ('ေဂ္'), ('ါဉ်'), ('ဧင္'), ('ုဌ္'), ('ဧလ်'), ('ရ်'), ('ဥည္'), ('ေင်္'), ('အ'), ('လ်'), ('ုဍ္'), ('ဣဖ္'), ('ါဒ်'), ('ေဠ်'), ('ဩောစ်'), ('ဥုံ'), ('ဩစ္'), ('ေါသ်'), ('ါဟ္'), ('ုသ္'), ('ဩောဃ်'), ('ိဇ္'), ('ုပ္'), ('ာခ္'), ('ေါဟ်'), ('ဧဎ်'), ('ေသ္'), ('ဩတ္'), ('ိုဘ္'), ('ုတ်'), ('ေါဃ္'), ('ဩဆ္'), ('ဟ်'), ('ိဌ္'), ('ောဖ်'), ('ဩောဗ္'), ('ာက်'), ('ောန်'), ('ဥန္'), ('က်'), ('ဩောစ္'), ('ေဈ်'), ('ထ်'), ('ောဘ်'), ('ဧထ်'), ('ိထ္'), ('ဩောရ္'), ('ဣရ္'), ('ဩောလ္'), ('ိုဋ္'), ('ဣဒ်'), ('ေါဏ္'), ('ါခ်'), ('ဥဌ်'), ('ာခ်'), ('ဣင်'), ('ဣဓ္'), ('ဥရ္'), ('ရ္'), ('တ'), ('ဩဟ္'), ('ဥဎ်'), ('ောဠ်'), ('ောည်'), ('ိဘ်'), ('ာဘ်'), ('ိဋ်'), ('ောဍ္'), ('ေါပ်'), ('ဩဏ်'), ('ဩဋ်'), ('ုဎ္'), ('ိဝ်'), ('ုဗ်'), ('ုင်္'), ('ၞ'), ('ုစ်'), ('ိစ်'), ('ဥဟ်'), ('ဩောယ်'), ('ုမ်'), ('ါဗ်'), ('ုဘ်'), ('ဧင်'), ('ဣဖ်'), ('ုသ်'), ('ိယ်'), ('ောဋ်'), ('ဥထ္'), ('ေါဂ်'), ('ာဌ္'), ('ဩန္'), ('ာသ်'), ('ါဆ္'), ('ော'), ('ိုရ်'), ('ုဇ်'), ('ဣရ်'), ('ိဆ်'), ('ဣဇ္'), ('ုည်'), ('ဥသ္'), ('ါင်'), ('ပ'), ('ဧက်'), ('ဩောက်'), ('ဧည္'), ('ဣင္'), ('ဧသ္'), ('ဟ္'), ('ောလ္'), ('ာအ်'), ('ဣဃ္'), ('ဧန်'), ('၌'), ('ာမ်'), ('ာဏ်'), ('ဎ်'), ('ဧယ္'), ('ဩောဓ်'), ('ိုဖ္'), ('လ္ဘက်'), ('ဧဋ်'), ('ဩောဂ်'), ('ဲ'), ('ဩရ်'), ('ဩစ်'), ('ဧဘ်'), ('ါဉ္'), ('ဋ်'), ('ဩောဋ်'), ('ဣဓ်'), ('ိုဍ်'), ('ဥည်'), ('ေါဓ်'), ('ူ'), ('ဣဉ္'), ('ဂ္'), ('ိရ်'), ('ေါရ္'), ('ေါထ္'), ('ဩဉ္'), ('ာဋ်'), ('ဩဌ်'), ('ါဃ္'), ('ဩောဍ်'), ('ဣဟ်'), ('ောဇ်'), ('ဩောဌ်'), ('ာမ္'), ('ာည်'), ('ဥဍ္'), ('ဩောဆ်'), ('ုဋ္'), ('ဖ်'), ('ာဗ်'), ('ိုက်'), ('ဩောဖ္'), ('ိုတ်'), ('့း'), ('ဒ'), ('ၠ'), ('ိဂ္'), ('ဩောပ်'), ('ဣဒ္'), ('ဣဘ္'), ('ိံ'), ('ဧဇ်'), ('ဣမ္'), ('ဧမ္'), ('ောမ္'), ('ဥပ်'), ('ဧန္'), ('ဩမ္'), ('ဧဉ်'), ('ဣပ္'), ('ဣဌ်'), ('ိမ့်'), ('ာဝ်'), ('ုဂ်'), ('ဩောဌ္'), ('ိဘ္'), ('ိုစ္'), ('ာတ်'), ('ဥဘ်'), ('ုဃ္'), ('ဓ္'), ('ါန်'), ('ဩခ္'), ('၏'), ('ာဆ္'), ('ဥဋ်'), ('ဩသ်'), ('ဧယ်'), ('ဧတ္'), ('ေရ္'), ('ုရ္'), ('ဧရ္'), ('ိဆ္'), ('ဣဗ်'), ('ုဗ္'), ('ဩောဆ္'), ('ဧဏ္'), ('ာစ်'), ('ဩခ်'), ('ေဖ္'), ('ထ္မင်း'), ('ေါဌ်'), ('ဃ္'), ('ဩောင်'), ('ဣဇ်'), ('ေါင်'), ('ုဖ်'), ('ိံး'), ('ဩောက္'), ('ဥသ်'), ('ါထ္'), ('ဩထ္'), ('ဣစ်'), ('ိဋ္'), ('ေဌ်'), ('ေါထ်'), ('ေါဖ်'), ('ေါက္'), ('ောသ္'), ('ေါဉ္'), ('ိုဒ္'), ('ုဏ္'), ('ဧဌ်'), ('ာပ်'), ('ောခ်'), ('ါမ်'), ('ဩဟ်');

SELECT s FROM strings ORDER BY s, rowid;

ROLLBACK;

BEGIN;

CREATE TABLE strings (s TEXT COLLATE "chr");

INSERT INTO strings VALUES ('Ꮡ'), ('ꮇ'), ('Ꮖ'), ('ꭰ'), ('Ꮷ'), ('ꮄ'), ('Ꭸ'), ('Ꮻ'), ('ꮑ'), ('Ꮘ'), ('Ꮊ'), ('ꮌ'), ('Ᏸ'), ('Ᏹ'), ('ꮆ'), ('Ꭶ'), ('Ꮑ'), ('Ꭼ'), ('ꭸ'), ('ꮠ'), ('ꮐ'), ('ꮟ'), ('Ꮿ'), ('Ꮌ'), ('Ꮦ'), ('Ꮥ'), ('ꮰ'), ('ꭲ'), ('Ꮩ'), ('Ꮭ'), ('Ꮚ'), ('ꮽ'), ('ᏹ'), ('Ꮆ'), ('Ꭲ'), ('ꮢ'), ('ꭷ'), ('Ᏻ'), ('Ꮛ'), ('ꮚ'), ('ꮉ'), ('ꮕ'), ('ꮵ'), ('Ꮓ'), ('Ꮯ'), ('Ꮄ'), ('ꮞ'), ('Ᏺ'), ('ꮻ'), ('ꮍ'), ('ꮗ'), ('Ꮵ'), ('Ꭵ'), ('Ꮃ'), ('ᏸ'), ('ꮘ'), ('Ꮶ'), ('ꮸ'), ('Ꮧ'), ('ꮒ'), ('ꮓ'), ('ꮊ'), ('ꭺ'), ('ꮶ'), ('ᏺ'), ('ꮃ'), ('ꮳ'), ('Ꮲ'), ('Ꮸ'), ('Ꮣ'), ('ꮦ'), ('ꭵ'), ('ꮬ'), ('ꭴ'), ('Ꮈ'), ('Ꮂ'), ('ꭽ'), ('Ꮾ'), ('ꮀ'), ('ꮅ'), ('ꮴ'), ('ꮏ'), ('Ꭷ'), ('Ꮽ'), ('Ꮉ'), ('Ꭾ'), ('ꮺ'), ('Ꭺ'), ('ꮱ'), ('Ꮱ'), ('ꭶ'), ('ꭿ'), ('Ꮗ'), ('ꭼ'), ('ꮧ'), ('Ꭿ'), ('Ꮜ'), ('Ꮒ'), ('ꮮ'), ('Ꮏ'), ('Ꮋ'), ('Ꮍ'), ('ꭹ'), ('Ꮁ'), ('Ꮹ'), ('ꮭ'), ('Ꭴ'), ('ꮁ'), ('Ꮼ'), ('ꮪ'), ('Ꮤ'), ('ꭻ'), ('Ꭻ'), ('Ꮫ'), ('Ꮺ'), ('ᏻ'), ('Ꮎ'), ('ꮥ'), ('ꮙ'), ('Ꮰ'), ('ꮡ'), ('Ꮠ'), ('ꮔ'), ('Ꮙ'), ('ꮝ'), ('ꮨ'), ('ꭱ'), ('Ꮢ'), ('ꮈ'), ('Ꮨ'), ('Ꮇ'), ('Ᏼ'), ('ꮯ'), ('Ꭽ'), ('Ꭱ'), ('Ꮳ'), ('Ꮔ'), ('Ꮝ'), ('Ꭹ'), ('Ꮬ'), ('ꮹ'), ('Ꮟ'), ('ꮫ'), ('ꮼ'), ('Ꮕ'), ('ꮖ'), ('Ꮪ'), ('ꭳ'), ('Ꮮ'), ('ᏼ'), ('ꮂ'), ('ꮿ'), ('Ꭳ'), ('ꮲ'), ('Ꮀ'), ('Ꮐ'), ('ꮤ'), ('Ꮴ'), ('Ꭰ'), ('ꮷ'), ('ꮎ'), ('ꮋ'), ('ꮜ'), ('Ꮞ'), ('ꭾ'), ('ꮣ'), ('ꮾ'), ('ꮛ'), ('Ꮅ'), ('ꮩ');

SELECT s FROM strings ORDER BY s, rowid;

ROLLBACK;

BEGIN;

CREATE TABLE strings (s TEXT COLLATE "en_US");

INSERT INTO strings VALUES ('Ǔ'), ('Ğ'), ('E'), ('Õ'), ('Ḩ'), ('G'), ('Ṋ'), ('Ǵ'), ('Ṉ'), ('Ẇ'), ('Ẏ'), ('Ľ'), ('Ù'), ('Ŭ'), ('Ȋ'), ('Ổ'), ('Ṵ'), ('Y'), ('Ṣ'), ('Ĵ'), ('Ḽ'), ('È'), ('Ā'), ('W'), ('Ű'), ('Ẹ'), ('Ǎ'), ('Ṑ'), ('Ȩ'), ('Ṃ'), ('Ż'), ('Ḗ'), ('Ǡ'), ('Ī'), ('Ǩ'), ('Ǧ'), ('Ẩ'), ('Ễ'), ('M'), ('Ớ'), ('Ẋ'), ('Ṡ'), ('Ợ'), ('Ọ'), ('Ḑ'), ('X'), ('Ố'), ('Š'), ('Ḋ'), ('Ȕ'), ('Ȗ'), ('Ỵ'), ('Ž'), ('F'), ('Ÿ'), ('Ề'), ('Z'), ('Ȉ'), ('Ẅ'), ('L'), ('Ř'), ('Ĩ'), ('Ḳ'), ('Ậ'), ('Ṕ'), ('Ȱ'), ('Ử'), ('Ȳ'), ('Ļ'), ('Ǹ'), ('Å'), ('Ằ'), ('Ỏ'), ('Ă'), ('Ṱ'), ('Ḝ'), ('Ĉ'), ('Ý'), ('U'), ('Ǜ'), ('Ṹ'), ('P'), ('Ĕ'), ('Č'), ('Q'), ('Ḓ'), ('Ư'), ('Ȏ'), ('N'), ('Ṥ'), ('Ę'), ('Ȃ'), ('Ȧ'), ('İ'), ('Î'), ('Ȇ'), ('Ǐ'), ('Û'), ('Ṽ'), ('Ṓ'), ('À'), ('Ẳ'), ('Ṗ'), ('Ỷ'), ('S'), ('Ộ'), ('Ŏ'), ('R'), ('Ỡ'), ('Ŕ'), ('Ū'), ('Ṿ'), ('Ǘ'), ('Ė'), ('Ấ'), ('Ḥ'), ('Ĭ'), ('Ò'), ('Ě'), ('Ų'), ('Ş'), ('Ừ'), ('Ḧ'), ('Ỳ'), ('Ȁ'), ('Ì'), ('Ṷ'), ('Ḇ'), ('Ș'), ('Ȯ'), ('O'), ('Ự'), ('Ḅ'), ('Ặ'), ('Ḉ'), ('Ŗ'), ('Ï'), ('Ắ'), ('Ú'), ('Ô'), ('Ȓ'), ('Á'), ('Ĥ'), ('Ḏ'), ('Ṙ'), ('Ȭ'), ('Ẁ'), ('Ņ'), ('Ō'), ('Ḯ'), ('Ế'), ('Ṻ'), ('J'), ('I'), ('C'), ('Ṇ'), ('Ẫ'), ('Ṩ'), ('B'), ('Ṝ'), ('Ẉ'), ('Ǖ'), ('Ĺ'), ('Ŝ'), ('Ṛ'), ('Ë'), ('Ê'), ('Ḙ'), ('Ẑ'), ('Ü'), ('Ỗ'), ('Ĝ'), ('Ḃ'), ('Ầ'), ('Ǭ'), ('Ṫ'), ('Ȅ'), ('Ź'), ('Ḿ'), ('D'), ('Ŵ'), ('Ụ'), ('Ḫ'), ('T'), ('Ȑ'), ('Ċ'), ('Ḵ'), ('Ṯ'), ('Ģ'), ('Ț'), ('Ờ'), ('Â'), ('Ď'), ('Ã'), ('Ȟ'), ('Ḛ'), ('Ǻ'), ('Ů'), ('Í'), ('Ć'), ('Ṍ'), ('Ḁ'), ('Ö'), ('Ň'), ('Ũ'), ('Ṅ'), ('Ķ'), ('Ő'), ('Ť'), ('K'), ('Ả'), ('Ṏ'), ('Ể'), ('Ǟ'), ('Ḱ'), ('Ą'), ('A'), ('Ȍ'), ('Ủ'), ('Ē'), ('Ẃ'), ('Ẍ'), ('Ó'), ('Ẵ'), ('Ñ'), ('Ơ'), ('Ẽ'), ('Ḹ'), ('Ţ'), ('Ǚ'), ('Ṭ'), ('H'), ('V'), ('Ệ'), ('Ỉ'), ('Ḭ'), ('Ṟ'), ('Ǒ'), ('Ä'), ('Ṳ'), ('Ạ'), ('Ḍ'), ('Ç'), ('Ồ'), ('Ȫ'), ('Ṧ'), ('Ẻ'), ('Į'), ('Ń'), ('Ỹ'), ('É'), ('Ġ'), ('Ḻ'), ('Ǫ'), ('Ứ'), ('Ṁ'), ('Ữ'), ('Ở'), ('Ẕ'), ('Ḣ'), ('Ŷ'), ('Ḷ'), ('Ị'), ('Ḕ'), ('Ḟ'), ('Ś'), ('Ḡ'), ('Ẓ');

SELECT s FROM strings ORDER BY s, rowid;

ROLLBACK;

BEGIN;

CREATE TABLE strings (s TEXT COLLATE "fi");

INSERT INTO strings VALUES ('Ḁ̈'), ('Ǜ'), ('ǘ'), ('ḁ̊'), ('S'), ('ǣ'), ('Ŋ'), ('Ǫ̈'), ('Ǥ'), ('F'), ('Ʒ'), ('l'), ('š'), ('ǿ'), ('z'), ('b'), ('h'), ('Ø'), ('ȫ'), ('ọ̈'), ('Ŧ'), ('Ö'), ('ų̈'), ('C'), ('ự̈'), ('Ṳ̈'), ('Ǻ'), ('E'), ('ǚ'), ('M'), ('ạ̊'), ('Ǟ'), ('y'), ('n'), ('e'), ('j'), ('ǽ'), ('Ạ̈'), ('Q'), ('X'), ('ŧ'), ('W'), ('o'), ('ǫ̈'), ('æ'), ('ṵ̈'), ('ǥ'), ('ợ̈'), ('ư̈'), ('B'), ('Ơ̈'), ('ṳ̈'), ('Ǘ'), ('N'), ('Å'), ('Y'), ('v'), ('p'), ('đ'), ('å'), ('u'), ('a'), ('ǻ'), ('Ạ̊'), ('ụ̈'), ('Ǯ'), ('Æ'), ('Z'), ('V'), ('Ọ̈'), ('ö'), ('R'), ('ǜ'), ('Ü'), ('ǖ'), ('Ȫ'), ('G'), ('c'), ('m'), ('ž'), ('T'), ('Ą̈'), ('A'), ('q'), ('ʒ'), ('ä'), ('ą̈'), ('Ǽ'), ('Ợ̈'), ('Đ'), ('Ą̊'), ('Ǣ'), ('w'), ('U'), ('Ḁ̊'), ('Ǚ'), ('ạ̈'), ('L'), ('I'), ('ǟ'), ('Ž'), ('Š'), ('Ự̈'), ('Ä'), ('K'), ('s'), ('Ǖ'), ('f'), ('H'), ('Ụ̈'), ('k'), ('D'), ('ơ̈'), ('ǯ'), ('ḁ̈'), ('P'), ('O'), ('Ư̈'), ('Ṵ̈'), ('ṷ̈'), ('Ṷ̈'), ('x'), ('d'), ('g'), ('J'), ('ü'), ('i'), ('r'), ('ą̊'), ('t'), ('ø'), ('Ų̈'), ('Ǿ'), ('ŋ');

SELECT s FROM strings ORDER BY s, rowid;

ROLLBACK;

BEGIN;

CREATE TABLE strings (s TEXT COLLATE "el");

INSERT INTO strings VALUES ('ί'), ('Ύ'), ('ϴ'), ('Ί'), ('ΐ'), ('ι'), ('ϑ'), ('Υ'), ('α'), ('Ο'), ('υ'), ('ή'), ('Α'), ('Τ'), ('ξ'), ('ά'), ('Κ'), ('χ'), ('ϰ'), ('ρ'), ('ψ'), ('β'), ('Ή'), ('Ϊ'), ('ω'), ('γ'), ('Λ'), ('Δ'), ('μ'), ('Ω'), ('θ'), ('σ'), ('ό'), ('Β'), ('δ'), ('ε'), ('ϐ'), ('ύ'), ('Ι'), ('ϕ'), ('Ε'), ('ο'), ('Έ'), ('ΰ'), ('Θ'), ('Ρ'), ('Η'), ('Π'), ('Σ'), ('ϱ'), ('ϖ'), ('Ώ'), ('Ό'), ('ν'), ('Γ'), ('Χ'), ('ζ'), ('ϋ'), ('Ν'), ('Ξ'), ('έ'), ('ϊ'), ('Φ'), ('Μ'), ('Ψ'), ('τ'), ('Ά'), ('Ϋ'), ('η'), ('ώ'), ('κ'), ('λ'), ('φ'), ('π'), ('Ζ'), ('ς'), ('µ'), ('ϵ');

SELECT s FROM strings ORDER BY s, rowid;

ROLLBACK;

BEGIN;

CREATE TABLE strings (s TEXT COLLATE "ro");

INSERT INTO strings VALUES ('ặ'), ('Ț'), ('ấ'), ('N'), ('o'), ('ă'), ('F'), ('Ầ'), ('G'), ('ằ'), ('B'), ('ẩ'), ('Ẳ'), ('R'), ('J'), ('O'), ('Ą̆'), ('Ţ'), ('f'), ('e'), ('ḁ̆'), ('D'), ('Ẫ'), ('M'), ('C'), ('Ẵ'), ('d'), ('â'), ('ą̆'), ('Į̂'), ('Ị̂'), ('ầ'), ('T'), ('k'), ('Î'), ('u'), ('Ắ'), ('Ă'), ('s'), ('i'), ('K'), ('r'), ('p'), ('z'), ('Ấ'), ('v'), ('S'), ('ḁ̂'), ('Â'), ('ậ'), ('h'), ('Ậ'), ('H'), ('E'), ('Ḁ̆'), ('ẫ'), ('ẵ'), ('ḭ̂'), ('ţ'), ('ț'), ('L'), ('b'), ('V'), ('Ằ'), ('ą̂'), ('A'), ('P'), ('Ą̂'), ('Ḁ̂'), ('c'), ('Ẩ'), ('ắ'), ('l'), ('Ş'), ('n'), ('t'), ('ş'), ('X'), ('Z'), ('g'), ('î'), ('x'), ('U'), ('a'), ('Ặ'), ('Ș'), ('į̂'), ('j'), ('I'), ('m'), ('ș'), ('ẳ'), ('ị̂'), ('Ḭ̂');

SELECT s FROM strings ORDER BY s, rowid;

ROLLBACK;

BEGIN;

CREATE TABLE strings (s TEXT COLLATE "uk");

INSERT INTO strings VALUES ('г'), ('н'), ('Ш'), ('М'), ('з'), ('Ц'), ('З'), ('ж'), ('у'), ('п'), ('П'), ('к'), ('Ч'), ('Д'), ('У'), ('Я'), ('ч'), ('Ю'), ('а'), ('х'), ('Щ'), ('І'), ('Т'), ('о'), ('Ь'), ('л'), ('ї'), ('В'), ('Ф'), ('і'), ('р'), ('и'), ('Ж'), ('Г'), ('К'), ('с'), ('й'), ('м'), ('Л'), ('Й'), ('И'), ('Ї'), ('Н'), ('б'), ('Б'), ('ґ'), ('ю'), ('С'), ('О'), ('Ґ'), ('ш'), ('щ'), ('Е'), ('я'), ('А'), ('ь'), ('д'), ('ꙶ'), ('ф'), ('Є'), ('ʼ'), ('є'), ('ц'), ('т'), ('Р'), ('Х'), ('в'), ('е');

SELECT s FROM strings ORDER BY s, rowid;

ROLLBACK;

BEGIN;

CREATE TABLE strings (s TEXT COLLATE "es");

INSERT INTO strings VALUES ('X'), ('c'), ('é'), ('U'), ('R'), ('t'), ('a'), ('N'), ('d'), ('Ṇ̃'), ('á'), ('g'), ('ṋ̃'), ('r'), ('T'), ('K'), ('I'), ('Z'), ('q'), ('M'), ('S'), ('j'), ('Ṋ̃'), ('B'), ('u'), ('f'), ('i'), ('G'), ('p'), ('Ņ̃'), ('Á'), ('O'), ('É'), ('ñ'), ('P'), ('s'), ('F'), ('W'), ('Ṉ̃'), ('Ó'), ('ü'), ('D'), ('V'), ('m'), ('e'), ('C'), ('ṇ̃'), ('b'), ('z'), ('w'), ('h'), ('Ú'), ('Q'), ('H'), ('k'), ('E'), ('J'), ('L'), ('í'), ('l'), ('Ñ'), ('x'), ('o'), ('n'), ('Y'), ('Ü'), ('ú'), ('Í'), ('A'), ('y'), ('ņ̃'), ('ṉ̃'), ('ó'), ('v');

SELECT s FROM strings ORDER BY s, rowid;

ROLLBACK;

BEGIN;

CREATE TABLE strings (s TEXT COLLATE "pl");

INSERT INTO strings VALUES ('ớ'), ('Ó'), ('m'), ('f'), ('Ṣ́'), ('Ł'), ('ṇ́'), ('k'), ('b'), ('a'), ('ṉ́'), ('l'), ('C'), ('e'), ('L'), ('Ẕ̇'), ('n'), ('w'), ('ș́'), ('S'), ('r'), ('T'), ('ẕ́'), ('Ș́'), ('F'), ('ḉ'), ('ņ́'), ('N'), ('Ṋ́'), ('Ń'), ('ş́'), ('Ẕ́'), ('o'), ('Ṥ'), ('Ş́'), ('ẓ́'), ('Ẓ́'), ('p'), ('Ą'), ('s'), ('u'), ('ṋ́'), ('ó'), ('Ọ́'), ('y'), ('M'), ('Ņ́'), ('Ḉ'), ('g'), ('E'), ('Ś'), ('ợ́'), ('Ć'), ('h'), ('Ę'), ('ṥ'), ('ą'), ('j'), ('H'), ('Ớ'), ('Ż'), ('ọ́'), ('R'), ('W'), ('t'), ('c'), ('Ṉ́'), ('P'), ('ṣ́'), ('ę'), ('ż'), ('ś'), ('O'), ('U'), ('ł'), ('K'), ('d'), ('D'), ('G'), ('A'), ('Ẓ̇'), ('ẓ̇'), ('Ǫ́'), ('J'), ('Z'), ('Ṇ́'), ('ẕ̇'), ('Ź'), ('ź'), ('Ợ́'), ('i'), ('B'), ('ǫ́'), ('ń'), ('z'), ('ć'), ('I'), ('Y');

SELECT s FROM strings ORDER BY s, rowid;

ROLLBACK;

BEGIN;

CREATE TABLE strings (s TEXT COLLATE "ko");

INSERT INTO strings VALUES ('佳'), ('苛'), ('嫁'), ('茄'), ('迦'), ('暇'), ('軻'), ('賈'), ('跏'), ('痂'), ('伽'), ('訶'), ('價'), ('嘉'), ('稼'), ('哥'), ('柯'), ('街'), ('架'), ('枷'), ('歌'), ('袈'), ('駕'), ('可'), ('呵'), ('加'), ('珂'), ('家'), ('假');

SELECT s FROM strings ORDER BY s, rowid;

ROLLBACK;

BEGIN;

CREATE TABLE strings (s TEXT COLLATE "sv");

INSERT INTO strings VALUES ('Ǻ'), ('i'), ('Ǫ̂'), ('Æ'), ('ự̋'), ('ọ̈'), ('ü'), ('ẘ'), ('Ǜ'), ('Ư̋'), ('ǫ̈'), ('ụ̈'), ('W'), ('ǻ'), ('ä'), ('Ơ̈'), ('Ǣ'), ('ṷ̋'), ('Ổ'), ('Ọ̋'), ('C'), ('ǫ̂'), ('ȫ'), ('ǣ'), ('ṵ̋'), ('ǟ'), ('Å'), ('ḁ̊'), ('ẇ'), ('Ä'), ('Œ'), ('w'), ('h'), ('Ơ̋'), ('Ṷ̋'), ('Ǫ̋'), ('ự̈'), ('d'), ('ư̋'), ('j'), ('ą̊'), ('A'), ('D'), ('Ǚ'), ('G'), ('ǿ'), ('ṳ̈'), ('Ȫ'), ('ų̈'), ('Ṵ̋'), ('Þ'), ('v'), ('ǫ̋'), ('ẉ'), ('ợ̈'), ('ụ̋'), ('ǖ'), ('ọ̋'), ('æ'), ('b'), ('Ṽ'), ('ǘ'), ('k'), ('ő'), ('Y'), ('Ṵ̈'), ('Ḁ̊'), ('ẃ'), ('Ợ̂'), ('ṷ̈'), ('p'), ('Đ'), ('r'), ('s'), ('ḁ̈'), ('Ạ̊'), ('Ụ̋'), ('Ỗ'), ('ǽ'), ('n'), ('Ḁ̈'), ('N'), ('F'), ('Ǟ'), ('ą̈'), ('t'), ('Z'), ('Ø'), ('e'), ('O'), ('ẅ'), ('đ'), ('U'), ('ẁ'), ('Ự̋'), ('Ǘ'), ('Ọ̈'), ('K'), ('Ǽ'), ('ű'), ('Ṿ'), ('L'), ('ổ'), ('ư̈'), ('l'), ('Ạ̈'), ('Ẉ'), ('q'), ('å'), ('ǚ'), ('Ą̊'), ('ơ̂'), ('ǜ'), ('ṳ̋'), ('Ợ̋'), ('Ự̈'), ('V'), ('Ǫ̈'), ('Ę'), ('ę'), ('R'), ('ạ̊'), ('Ű'), ('a'), ('f'), ('I'), ('Ẃ'), ('Ẇ'), ('ỗ'), ('Ų̋'), ('T'), ('Ṷ̈'), ('Ü'), ('Ẅ'), ('ô'), ('Ô'), ('Ợ̈'), ('Ö'), ('Ṳ̋'), ('ồ'), ('Ǖ'), ('À'), ('Ṳ̈'), ('c'), ('Ų̈'), ('u'), ('z'), ('ø'), ('X'), ('Ǿ'), ('ộ'), ('Q'), ('ợ̋'), ('x'), ('œ'), ('ơ̋'), ('é'), ('B'), ('m'), ('ạ̈'), ('Ð'), ('Ụ̈'), ('g'), ('Ą̈'), ('ơ̈'), ('Ő'), ('ố'), ('þ'), ('y'), ('É'), ('ð'), ('ŵ'), ('E'), ('Ẁ'), ('Ư̈'), ('Ộ'), ('ų̋'), ('o'), ('J'), ('H'), ('Ŵ'), ('ö'), ('Ơ̂'), ('P'), ('Ố'), ('Ồ'), ('à'), ('ṵ̈'), ('M'), ('ợ̂'), ('S');

SELECT s FROM strings ORDER BY s, rowid;

ROLLBACK;

BEGIN;

CREATE TABLE strings (s TEXT COLLATE "fr_CA");

INSERT INTO strings VALUES ('ê'), ('Æ'), ('R'), ('o'), ('m'), ('g'), ('r'), ('I'), ('È'), ('ç'), ('i'), ('Z'), ('ù'), ('É'), ('Î'), ('M'), ('X'), ('f'), ('a'), ('Ô'), ('ÿ'), ('J'), ('d'), ('C'), ('h'), ('y'), ('œ'), ('e'), ('k'), ('w'), ('è'), ('N'), ('A'), ('K'), ('u'), ('î'), ('ï'), ('é'), ('T'), ('E'), ('S'), ('L'), ('s'), ('ü'), ('ô'), ('U'), ('G'), ('n'), ('Ç'), ('ë'), ('P'), ('x'), ('q'), ('Ù'), ('H'), ('V'), ('c'), ('Ê'), ('û'), ('Ë'), ('j'), ('t'), ('Y'), ('v'), ('F'), ('Ÿ'), ('p'), ('æ'), ('Ü'), ('Û'), ('l'), ('à'), ('O'), ('W'), ('Q'), ('B'), ('Ï'), ('À'), ('b'), ('Œ'), ('Â'), ('z'), ('D'), ('â');

SELECT s FROM strings ORDER BY s, rowid;

CREATE TABLE collate_test (s TEXT COLLATE blabla);

CREATE TABLE collate_test (s INT COLLATE blabla);

CREATE TABLE collate_test (s TEXT COLLATE NOACCENT.NOACCENT);

CREATE TABLE collate_test (s TEXT COLLATE 1);

CREATE TABLE collate_test (s TEXT COLLATE 'hello');

PRAGMA default_collation = 'blabla';

PRAGMA enable_verification;

CREATE TABLE tab0 (pk INT PRIMARY KEY, col0 INT, col1 REAL, col2 TEXT, col3 INT, col4 REAL, col5 TEXT);

INSERT INTO tab0 VALUES (0, 22, 43.95999908447265625, 'yoyca', 0, 80.1399993896484375, 'eoenc');

INSERT INTO tab0 VALUES (1, 51, 34.900001525878905361, 'zeqhw', 44, 13.489999771118164062, 'easox');

INSERT INTO tab0 VALUES (2, 42, 59.759998321533203125, 'ylshk', 15, 4.4499998092651367187, 'xgrvy');

INSERT INTO tab0 VALUES (3, 67, 90.660003662109378552, 'rnadc', 77, 50.360000610351560723, 'knooo');

INSERT INTO tab0 VALUES (4, 48, 53.099998474121097302, 'txhlv', 75, 9.770000457763671875, 'gvudx');

INSERT INTO tab0 VALUES (5, 18, 40.580001831054683947, 'wgfxz', 96, 12.5, 'mmxbj');

INSERT INTO tab0 VALUES (6, 84, 24.239999771118165838, 'ttodp', 31, 72.999999999999998223, 'wujjl');

INSERT INTO tab0 VALUES (7, 86, 67.449996948242185723, 'mwgbl', 38, 10.479999542236329013, 'ypcha');

INSERT INTO tab0 VALUES (8, 68, 38.470001220703125, 'kaoqh', 8, 41.500000000000003552, 'fyhzl');

INSERT INTO tab0 VALUES (9, 29, 19.600000381469726562, 'kbenw', 20, 19.579999923706054687, 'gsszq');

SELECT pk FROM tab0 WHERE (col0 BETWEEN 67 AND 0 OR col0 > 17 AND (col0 > 3));

CREATE TABLE integers (i INT, j INT CHECK (i + j < 5), k INT);

INSERT INTO integers VALUES (1, 2, 4);

UPDATE integers SET k = 7;

UPDATE integers SET i = i, j = 3;

UPDATE integers SET i = i, j = 3;

UPDATE integers SET i = i, i = 10;

UPDATE integers SET i = i, j = 10;

UPDATE integers SET j = 2;

UPDATE integers SET j = 10;

SELECT * FROM integers;

DROP TABLE integers;

CREATE TABLE integers (i INT NOT NULL, j INT NOT NULL);

INSERT INTO integers VALUES (1, 2);

UPDATE integers SET j = 3;

UPDATE integers SET i = NULL;

UPDATE integers SET j = NULL;

SELECT * FROM integers;

CREATE TABLE integers (i INT NOT NULL);

INSERT INTO integers VALUES (3);

INSERT INTO integers VALUES (NULL);

UPDATE integers SET i = 4;

UPDATE integers SET i = NULL;

CREATE TABLE integers_with_null (i INT);

INSERT INTO integers_with_null VALUES (3), (4), (5), (NULL);

INSERT INTO integers (i) SELECT * FROM integers_with_null;

INSERT INTO integers (i) SELECT * FROM integers_with_null WHERE NOT i IS NULL;

SELECT * FROM integers ORDER BY i;

UPDATE integers SET i = 4 WHERE i > 4;

SELECT * FROM integers ORDER BY i;

PRAGMA enable_verification;

PRAGMA enable_verification;

INSERT INTO tbl VALUES ({'t': 43});

INSERT INTO tbl VALUES ({'t': 42});

DROP TABLE tbl;

DROP TABLE tbl;

INSERT INTO tbl VALUES ({'t': 43});

CREATE TABLE integers (i INT CHECK (i < 5));

INSERT INTO integers VALUES (3);

INSERT INTO integers VALUES (7);

INSERT INTO integers VALUES (NULL);

SELECT * FROM integers;

DROP TABLE integers;

CREATE TABLE integers (i INT CHECK (i + j < 10), j INT);

INSERT INTO integers VALUES (3, 3);

INSERT INTO integers VALUES (5, 5);

INSERT INTO integers VALUES (3, 3), (5, 5);

SELECT * FROM integers;

CREATE TABLE indirect_subq (i INT, CHECK (i > (2 * (SELECT (1)))));

CREATE TABLE integers2 (i INT CHECK (i > (SELECT 42)), j INT);

CREATE TABLE integers2 (i INT CHECK (i > SUM(j)), j INT);

CREATE TABLE integers3 (i INT CHECK (k < 10), j INT);

CREATE TABLE integers3 (i INT CHECK (integers3.k < 10), j INT);

CREATE TABLE integers3 (i INT CHECK (integers2.i < 10), j INT);

PRAGMA enable_verification;

CREATE TABLE tf_1 (a INT, b INT, c INT, PRIMARY KEY (a), UNIQUE (b), UNIQUE (c));

CREATE TABLE tf_2 (d INT, e INT, f INT, FOREIGN KEY (d) REFERENCES tf_1 (a), FOREIGN KEY (e) REFERENCES tf_1 (b), FOREIGN KEY (f) REFERENCES tf_1 (c));

INSERT INTO tf_2 VALUES (1, 1, 1);

INSERT INTO tf_1 VALUES (1, 1, 1);

INSERT INTO tf_2 VALUES (2, 1, 1);

INSERT INTO tf_2 VALUES (1, 2, 1);

INSERT INTO tf_2 VALUES (1, 1, 2);

INSERT INTO tf_2 VALUES (1, 1, 1);

INSERT INTO tf_1 VALUES (2, NULL, NULL);

INSERT INTO tf_2 VALUES (2, NULL, NULL);

DELETE FROM tf_1 WHERE a = 2;

DELETE FROM tf_2 WHERE d = 2;

DELETE FROM tf_1 WHERE a = 2;

INSERT INTO tf_1 VALUES (2, 3, NULL);

INSERT INTO tf_2 VALUES (1, 3, 1);

DELETE FROM tf_1 WHERE a = 2;

DELETE FROM tf_2 WHERE d = 2 OR e = 3;

DELETE FROM tf_1 WHERE a = 2;

INSERT INTO tf_1 VALUES (2, NULL, 4);

INSERT INTO tf_2 VALUES (1, 1, 4);

DELETE FROM tf_1 WHERE a = 2;

CREATE TABLE x (c1 INT, PRIMARY KEY (c1));

CREATE TABLE y (c1 INT, FOREIGN KEY (c1) REFERENCES x (c1));

SELECT COUNT(*) FROM DUCKDB_CONSTRAINTS() WHERE constraint_type = 'NOT NULL';

PRAGMA enable_verification;

CREATE TABLE a (a INT NOT NULL, CONSTRAINT pk_a PRIMARY KEY (A));

CREATE TABLE b (a INT REFERENCES a (a));

DROP TABLE b;

DROP TABLE a;

CREATE TABLE a (i INT PRIMARY KEY);

CREATE TABLE b (i INT REFERENCES A (i));

PRAGMA enable_verification;

CREATE TABLE a (i INT PRIMARY KEY);

CREATE TABLE b (i INT REFERENCES a);

INSERT INTO b VALUES (1);

INSERT INTO a VALUES (1);

INSERT INTO b VALUES (1);

DROP TABLE b;

DROP TABLE a;

CREATE TABLE a (i INT);

CREATE TABLE b (i INT REFERENCES a);

DROP TABLE a;

CREATE TABLE a (i INT, j INT, PRIMARY KEY (i, j));

CREATE TABLE b (i INT REFERENCES a);

PRAGMA enable_verification;

CREATE TABLE routes (route_id TEXT PRIMARY KEY, agency_id TEXT, FOREIGN KEY (agency_id) REFERENCES agency);

CREATE TABLE agency (agency_id TEXT PRIMARY KEY, agency_name TEXT UNIQUE NOT NULL);

CREATE TABLE routes (route_id TEXT PRIMARY KEY, agency_id TEXT, FOREIGN KEY (route_id, agency_id) REFERENCES agency);

CREATE TABLE routes (route_id TEXT PRIMARY KEY, agency_id TEXT, FOREIGN KEY (agency_id) REFERENCES agency);

INSERT INTO routes VALUES (1, 1);

INSERT INTO agency VALUES (1, 1);

INSERT INTO routes VALUES (1, 1);

DROP TABLE agency;

DROP TABLE routes;

DROP TABLE agency;

CREATE TABLE agency (agency_id TEXT, agency_name TEXT NOT NULL);

CREATE TABLE routes (route_id TEXT PRIMARY KEY, agency_id TEXT, FOREIGN KEY (agency_id) REFERENCES agency);

CREATE TABLE routes (route_id TEXT PRIMARY KEY, agency_id TEXT, FOREIGN KEY (agency_id) REFERENCES routes);

INSERT INTO routes VALUES (1, NULL);

INSERT INTO routes VALUES (2, 2);

INSERT INTO routes VALUES (2, 1);

DROP TABLE routes;

DROP TABLE agency;

CREATE TABLE agency (agency_id TEXT, agency_id_2 TEXT, agency_name TEXT NOT NULL, PRIMARY KEY (agency_id, agency_id_2));

CREATE TABLE t1 (id INT PRIMARY KEY);

CREATE TABLE t2 (id INT PRIMARY KEY, t1_id INT, FOREIGN KEY (t1_id) REFERENCES t1 (id));

CREATE TABLE t3 (id INT PRIMARY KEY, t1_id INT, FOREIGN KEY (t1_id) REFERENCES t1 (id) ON UPDATE NO ACTION);

CREATE TABLE t4 (id INT PRIMARY KEY, t1_id INT, FOREIGN KEY (t1_id) REFERENCES t1 (id) ON DELETE NO ACTION);

CREATE TABLE t5 (id INT PRIMARY KEY, t1_id INT, FOREIGN KEY (t1_id) REFERENCES t1 (id) ON UPDATE RESTRICT);

CREATE TABLE t6 (id INT PRIMARY KEY, t1_id INT, FOREIGN KEY (t1_id) REFERENCES t1 (id) ON DELETE RESTRICT);

CREATE TABLE t7 (id INT PRIMARY KEY, t1_id INT, FOREIGN KEY (t1_id) REFERENCES t1 (id) ON UPDATE CASCADE);

CREATE TABLE t8 (id INT PRIMARY KEY, t1_id INT, FOREIGN KEY (t1_id) REFERENCES t1 (id) ON DELETE CASCADE);

CREATE TABLE t9 (id INT PRIMARY KEY, t1_id INT, FOREIGN KEY (t1_id) REFERENCES t1 (id) ON UPDATE SET DEFAULT);

CREATE TABLE t10 (id INT PRIMARY KEY, t1_id INT, FOREIGN KEY (t1_id) REFERENCES t1 (id) ON DELETE SET DEFAULT);

CREATE TABLE t11 (id INT PRIMARY KEY, t1_id INT, FOREIGN KEY (t1_id) REFERENCES t1 (id) ON UPDATE SET NULL);

CREATE TABLE t12 (id INT PRIMARY KEY, t1_id INT, FOREIGN KEY (t1_id) REFERENCES t1 (id) ON DELETE SET NULL);

CREATE TABLE departments (department_id INT PRIMARY KEY, department_name TEXT NOT NULL);

CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name TEXT NOT NULL, department_id INT REFERENCES departments (department_id));

DROP TABLE departments;

ALTER TABLE departments RENAME TO old_departments;

DROP TABLE departments;

CREATE TABLE t1 (i1 INT UNIQUE);

INSERT INTO t1 VALUES (1), (2), (3), (4);

CREATE TABLE t2 (i2 INT PRIMARY KEY, FOREIGN KEY (i2) REFERENCES t1 (i1));

INSERT INTO t2 VALUES (1), (2), (3);

CREATE TABLE t3 (i3 INT UNIQUE, FOREIGN KEY (i3) REFERENCES t2 (i2));

INSERT INTO t3 VALUES (1), (2);

CREATE TABLE t4 (i4 INT, FOREIGN KEY (i4) REFERENCES t3 (i3));

INSERT INTO t4 VALUES (1);

INSERT INTO t2 VALUES (5);

INSERT INTO t3 VALUES (4);

INSERT INTO t4 VALUES (3);

INSERT INTO t2 VALUES (4);

INSERT INTO t3 VALUES (3);

INSERT INTO t4 VALUES (2);

DELETE FROM t1 WHERE i1 = 4;

DELETE FROM t2 WHERE i2 = 3;

DELETE FROM t3 WHERE i3 = 2;

DELETE FROM t2 WHERE i2 = 4;

DELETE FROM t3 WHERE i3 = 3;

DELETE FROM t4 WHERE i4 = 2;

DROP TABLE t1;

DROP TABLE t2;

DROP TABLE t3;

DROP TABLE t4;

DROP TABLE t3;

DROP TABLE t2;

CREATE TABLE pk_integers (i INT PRIMARY KEY);

INSERT INTO pk_integers VALUES (1), (2), (3);

BEGIN;

CREATE TABLE fk_integers (j INT, FOREIGN KEY (j) REFERENCES pk_integers (i));

INSERT INTO fk_integers VALUES (1);

DROP TABLE fk_integers;

DROP TABLE fk_integers;

CREATE TABLE fk_integers (j INT, FOREIGN KEY (j) REFERENCES pk_integers (i));

ROLLBACK;

CREATE TABLE fk_integers (j INT, FOREIGN KEY (j) REFERENCES pk_integers (i));

INSERT INTO fk_integers VALUES (1), (2);

INSERT INTO fk_integers VALUES (4), (5);

create type custom_type as integer;

CREATE TABLE parent (id custom_type PRIMARY KEY);

CREATE TABLE child (parent custom_type REFERENCES parent);

DROP TABLE child;

CREATE TABLE child (parent INT REFERENCES parent);

DROP TABLE child;

create type another_custom_type as integer;

CREATE SCHEMA s1;

CREATE SCHEMA s2;

CREATE TABLE s1.pk_integers (i INT PRIMARY KEY);

INSERT INTO s1.pk_integers VALUES (1), (2), (3);

CREATE TABLE s2.fk_integers (j INT, FOREIGN KEY (j) REFERENCES s1.pk_intexgers (i));

PRAGMA enable_verification;

SET storage_compatibility_version = 'v0.10.3';

ATTACH '__TEST_DIR__/test_fk_eager.db' AS fk_db;

USE fk_db;

CREATE TABLE tbl_pk (i INT PRIMARY KEY, payload STRUCT(v TEXT, i INT[]));

INSERT INTO tbl_pk VALUES (1, {'v': 'hello', 'i': [42]}), (2, {'v': 'world', 'i': [43]});

CREATE TABLE tbl_fk (i INT REFERENCES tbl_pk (i));

INSERT INTO tbl_fk VALUES (1), (1), (1);

USE memory;

CHECKPOINT AS fk_db;

DETACH fk_db;

ATTACH '__TEST_DIR__/test_fk_eager.db' AS fk_db;

UPDATE fk_db.tbl_pk SET payload = {'v': 'new hello', 'i': [7]} WHERE i = 1;

CREATE TABLE pk_integers (i INT PRIMARY KEY);

CREATE TABLE fk_integers (j INT, FOREIGN KEY (j) REFERENCES pk_integers (i));

INSERT INTO pk_integers VALUES (1), (2), (3);

INSERT INTO fk_integers VALUES (1), (2);

INSERT INTO fk_integers VALUES (1), (2);

DROP TABLE fk_integers;

DROP TABLE pk_integers;

DROP TABLE pk_integers;

INSERT INTO fk_integers VALUES (4);

INSERT INTO fk_integers VALUES (3);

DELETE FROM pk_integers WHERE i = 3;

DELETE FROM fk_integers WHERE j = 3;

DELETE FROM pk_integers WHERE i = 3;

UPDATE pk_integers SET i = 5 WHERE i = 2;

UPDATE fk_integers SET i = 4 WHERE j = 2;

UPDATE fk_integers SET i = 4 WHERE j = 2;

DROP TABLE pk_integers;

DROP TABLE fk_integers;

CREATE TABLE pkt1 (i1 INT PRIMARY KEY CHECK (i1 < 3), j1 INT UNIQUE);

CREATE TABLE pkt1 (i1 INT PRIMARY KEY CHECK (i1 < 3), j1 INT UNIQUE);

CREATE TABLE fkt1 (k1 INT, l1 INT, FOREIGN KEY (k1) REFERENCES pkt1 (i1), FOREIGN KEY (l1) REFERENCES pkt2 (i2));

CREATE TABLE fkt2 (k2 INT, l2 INT, FOREIGN KEY (k2) REFERENCES pkt1 (j1), FOREIGN KEY (l2) REFERENCES pkt2 (j2));

INSERT INTO pkt1 VALUES (3, 11);

INSERT INTO pkt2 VALUES (101, 1000);

INSERT INTO pkt1 VALUES (1, 11), (2, 12);

INSERT INTO pkt2 VALUES (101, 1001), (102, 1002);

INSERT INTO fkt1 VALUES (3, 101);

INSERT INTO fkt1 VALUES (2, 103);

INSERT INTO fkt1 VALUES (1, 102), (2, 101);

INSERT INTO fkt2 VALUES (13, 1002);

INSERT INTO fkt1 VALUES (12, 1003);

INSERT INTO fkt2 VALUES (12, 1001), (11, 1002);

DELETE FROM pkt1 WHERE i1 = 1;

DELETE FROM pkt2 WHERE i2 = 102;

DELETE FROM fkt1 WHERE k1 = 1;

DELETE FROM pkt1 WHERE i1 = 1;

DELETE FROM fkt2 WHERE k2 = 11;

DELETE FROM pkt1 WHERE i1 = 1;

SELECT * FROM pkt1;

SELECT * FROM pkt2;

SELECT * FROM fkt1;

SELECT * FROM fkt2;

UPDATE pkt1 SET i1 = 3, j1 = 13 WHERE i1 = 2;

UPDATE pkt2 SET i2 = 103, j2 = 1003 WHERE i2 = 101;

UPDATE pkt2 SET i2 = 103, j2 = 1003 WHERE i2 = 102;

DELETE FROM fkt1 WHERE k1 = 2;

DELETE FROM fkt2 WHERE k2 = 12;

UPDATE pkt1 SET i1 = 1, j1 = 11 WHERE i1 = 2;

UPDATE pkt2 SET i2 = 104, j2 = 1004 WHERE i2 = 101;

SELECT * FROM pkt1;

SELECT * FROM pkt2;

DROP TABLE pkt1;

DROP TABLE pkt2;

DROP TABLE fkt2;

DROP TABLE pkt1;

DROP TABLE pkt2;

DROP TABLE fkt1;

DROP TABLE pkt1;

CREATE TABLE vdata AS SELECT * FROM (VALUES ('v2')) AS v(id);

CREATE VIEW v AS SELECT * FROM vdata;

CREATE TABLE t (v_id TEXT, FOREIGN KEY (v_id) REFERENCES v (id));

CREATE TABLE pk_integers (i INT PRIMARY KEY);

INSERT INTO pk_integers VALUES (1);

BEGIN;

CREATE TABLE fk_integers (j INT, FOREIGN KEY (j) REFERENCES pk_integers (i));

DROP TABLE pk_integers;

ROLLBACK;

DROP TABLE pk_integers;

CREATE TABLE pk_integers (i INT PRIMARY KEY);

INSERT INTO pk_integers VALUES (1), (2);

CREATE TABLE fk_integers (j INT, FOREIGN KEY (j) REFERENCES pk_integers (i));

INSERT INTO fk_integers VALUES (2);

BEGIN;

DROP TABLE fk_integers;

ROLLBACK;

DELETE FROM pk_integers WHERE i = 2;

INSERT INTO fk_integers VALUES (3);

DROP TABLE pk_integers;

PRAGMA enable_verification;

CREATE TABLE employee (id INT PRIMARY KEY, managerid INT, name TEXT, FOREIGN KEY (managerid) REFERENCES employee (emp_id));

CREATE TABLE employee (id INT PRIMARY KEY, managerid INT, name TEXT, FOREIGN KEY (managerid) REFERENCES employee (id));

INSERT INTO employee VALUES (1, NULL, 'Smith'), (2, NULL, 'Jhon'), (3, NULL, 'Romeo');

INSERT INTO employee VALUES (4, 4, 'Mark');

INSERT INTO employee VALUES (4, 2, 'Mark');

UPDATE employee SET id = 5 WHERE id = 2;

DELETE FROM employee WHERE id = 2;

DELETE FROM employee WHERE id = 4;

SELECT * FROM employee ORDER BY ALL;

UPDATE employee SET name = 'Juliet' WHERE id = 3;

SELECT * FROM employee ORDER BY ALL;

UPDATE employee SET id = 2 WHERE id = 3;

UPDATE employee SET id = 4 WHERE id = 3;

SELECT * FROM employee ORDER BY ALL;

UPDATE employee SET managerid = 5 WHERE id = 4;

UPDATE employee SET managerid = 2 WHERE id = 4;

SELECT * FROM employee ORDER BY ALL;

UPDATE employee SET id = 5, managerid = 2 WHERE id = 4;

SELECT * FROM employee WHERE managerid = 2;

ALTER TABLE employee RENAME COLUMN managerid TO managerid_new;

ALTER TABLE employee RENAME COLUMN name TO name_new;

ALTER TABLE employee ALTER COLUMN id SET DATA TYPE TEXT;

ALTER TABLE employee ALTER COLUMN name_new SET DATA TYPE TEXT;

ALTER TABLE employee DROP COLUMN id;

ALTER TABLE employee DROP COLUMN managerid;

ALTER TABLE employee DROP COLUMN name_new;

CREATE TEMPORARY TABLE album (artistid INT, albumname TEXT, albumcover TEXT, UNIQUE (artistid, albumname));

INSERT INTO album VALUES (1, 'A', 'A_cover'), (2, 'B', 'B_cover'), (3, 'C', 'C_cover'), (4, 'D', 'D_cover');

CREATE TEMPORARY TABLE song (songid INT, songartist INT, songalbum TEXT, songname TEXT, FOREIGN KEY (songartist, songalbum) REFERENCES album (artistid, albumname));

INSERT INTO song VALUES (11, 1, 'A', 'A_song'), (12, 2, 'E', 'B_song'), (13, 3, 'C', 'C_song');

INSERT INTO song VALUES (11, 1, 'A', 'A_song'), (12, 5, 'D', 'B_song'), (13, 3, 'C', 'C_song');

INSERT INTO song VALUES (11, 1, 'A', 'A_song'), (12, 2, 'B', 'B_song'), (13, 3, 'C', 'C_song');

DELETE FROM album WHERE albumname = 'C';

DELETE FROM album WHERE albumname = 'D';

SELECT * FROM album;

UPDATE song SET songartist = 5, songalbum = 'A' WHERE songname = 'B_song';

UPDATE song SET songartist = 1, songalbum = 'A' WHERE songname = 'B_song';

SELECT * FROM album;

SELECT * FROM song;

UPDATE album SET albumname = 'B' WHERE albumcover = 'C_cover';

UPDATE song SET songalbum = 'E' WHERE albumcover = 'C_song';

UPDATE album SET artistid = 5, albumname = 'D' WHERE albumcover = 'B_cover';

SELECT * FROM album;

UPDATE album SET albumcover = 'C_cover_new' WHERE artistid = 3;

UPDATE song SET songname = 'C_song_new' WHERE songartist = 3;

SELECT * FROM album;

SELECT * FROM song;

ALTER TABLE album RENAME COLUMN albumname TO albumname_new;

ALTER TABLE song RENAME COLUMN songalbum TO songalbum_new;

ALTER TABLE song RENAME COLUMN songname TO songname_new;

ALTER TABLE song ALTER COLUMN songartist SET DATA TYPE TEXT;

ALTER TABLE album ALTER COLUMN artistid SET DATA TYPE TEXT;

ALTER TABLE song ALTER COLUMN songname_new SET DATA TYPE TEXT;

ALTER TABLE album DROP COLUMN artistid;

ALTER TABLE song DROP COLUMN songname_new;

DROP TABLE album;

DROP TABLE song;

ALTER TABLE album RENAME COLUMN albumname TO albumname_new;

ALTER TABLE album ALTER COLUMN albumcover SET DATA TYPE TEXT;

ALTER TABLE album DROP COLUMN albumcover;

DROP TABLE album;

CREATE TABLE pkt (i INT UNIQUE, k INT UNIQUE);

INSERT INTO pkt VALUES (1, 11), (2, 12), (3, 13);

CREATE TABLE fkt (j INT, l INT UNIQUE, FOREIGN KEY (j) REFERENCES pkt (i));

CREATE INDEX k_index ON pkt(k);

CREATE INDEX l_index ON fkt(l);

INSERT INTO fkt VALUES (1, 101), (2, 102);

INSERT INTO fkt VALUES (4, 104);

INSERT INTO fkt VALUES (3, 103);

DELETE FROM pkt WHERE k = 13;

DELETE FROM fkt WHERE l = 103;

DELETE FROM pkt WHERE k = 13;

UPDATE pkt SET i = 5 WHERE k = 12;

UPDATE fkt SET i = 4 WHERE l = 102;

UPDATE fkt SET i = 4 WHERE l = 102;

DROP INDEX k_index;

DROP INDEX l_index;

DROP TABLE pkt;

DROP TABLE fkt;

DROP TABLE pkt;

CREATE SCHEMA s1;

CREATE TABLE s1.pkt (i INT PRIMARY KEY);

CREATE TABLE s1.fkt (j INT, FOREIGN KEY (j) REFERENCES s1.pkt (i));

INSERT INTO s1.pkt VALUES (1), (2), (3), (4), (5);

INSERT INTO s1.fkt VALUES (2), (3);

INSERT INTO s1.fkt VALUES (6);

INSERT INTO s1.fkt VALUES (1);

DELETE FROM s1.pkt WHERE i = 2;

DELETE FROM s1.pkt WHERE i = 5;

DROP TABLE s1.pkt;

DROP TABLE s1.fkt;

DROP TABLE s1.pkt;

CREATE TABLE pkt (i INT UNIQUE);

CREATE TABLE fkt (j INT, FOREIGN KEY (j) REFERENCES pkt (i));

CALL dbgen(sf=0.1, suffix='_original');

CREATE TABLE region (R_REGIONKEY INT NOT NULL PRIMARY KEY, R_NAME TEXT NOT NULL, R_COMMENT TEXT);

CREATE TABLE part (P_PARTKEY INT NOT NULL PRIMARY KEY, P_NAME TEXT NOT NULL, P_MFGR TEXT NOT NULL, P_BRAND TEXT NOT NULL, P_TYPE TEXT NOT NULL, P_SIZE INT NOT NULL, P_CONTAINER TEXT NOT NULL, P_RETAILPRICE DECIMAL(15, 2) NOT NULL, P_COMMENT TEXT NOT NULL);

CREATE TABLE nation (N_NATIONKEY INT NOT NULL PRIMARY KEY, N_NAME TEXT NOT NULL, N_REGIONKEY INT NOT NULL, N_COMMENT TEXT, FOREIGN KEY (N_REGIONKEY) REFERENCES region (R_REGIONKEY));

CREATE TABLE supplier (S_SUPPKEY INT NOT NULL PRIMARY KEY, S_NAME TEXT NOT NULL, S_ADDRESS TEXT NOT NULL, S_NATIONKEY INT NOT NULL, S_PHONE TEXT NOT NULL, S_ACCTBAL DECIMAL(15, 2) NOT NULL, S_COMMENT TEXT NOT NULL, FOREIGN KEY (S_NATIONKEY) REFERENCES nation (N_NATIONKEY));

CREATE TABLE partsupp (PS_PARTKEY INT NOT NULL, PS_SUPPKEY INT NOT NULL, PS_AVAILQTY INT NOT NULL, PS_SUPPLYCOST DECIMAL(15, 2) NOT NULL, PS_COMMENT TEXT NOT NULL, PRIMARY KEY (PS_PARTKEY, PS_SUPPKEY), FOREIGN KEY (PS_SUPPKEY) REFERENCES supplier (S_SUPPKEY), FOREIGN KEY (PS_PARTKEY) REFERENCES part (P_PARTKEY));

CREATE TABLE customer (C_CUSTKEY INT NOT NULL PRIMARY KEY, C_NAME TEXT NOT NULL, C_ADDRESS TEXT NOT NULL, C_NATIONKEY INT NOT NULL, C_PHONE TEXT NOT NULL, C_ACCTBAL DECIMAL(15, 2) NOT NULL, C_MKTSEGMENT TEXT NOT NULL, C_COMMENT TEXT NOT NULL, FOREIGN KEY (C_NATIONKEY) REFERENCES nation (N_NATIONKEY));

CREATE TABLE orders (O_ORDERKEY INT NOT NULL PRIMARY KEY, O_CUSTKEY INT NOT NULL, O_ORDERSTATUS TEXT NOT NULL, O_TOTALPRICE DECIMAL(15, 2) NOT NULL, O_ORDERDATE DATE NOT NULL, O_ORDERPRIORITY TEXT NOT NULL, O_CLERK TEXT NOT NULL, O_SHIPPRIORITY INT NOT NULL, O_COMMENT TEXT NOT NULL, FOREIGN KEY (O_CUSTKEY) REFERENCES customer (C_CUSTKEY));

CREATE TABLE lineitem (L_ORDERKEY INT NOT NULL, L_PARTKEY INT NOT NULL, L_SUPPKEY INT NOT NULL, L_LINENUMBER INT NOT NULL, L_QUANTITY DECIMAL(15, 2) NOT NULL, L_EXTENDEDPRICE DECIMAL(15, 2) NOT NULL, L_DISCOUNT DECIMAL(15, 2) NOT NULL, L_TAX DECIMAL(15, 2) NOT NULL, L_RETURNFLAG TEXT NOT NULL, L_LINESTATUS TEXT NOT NULL, L_SHIPDATE DATE NOT NULL, L_COMMITDATE DATE NOT NULL, L_RECEIPTDATE DATE NOT NULL, L_SHIPINSTRUCT TEXT NOT NULL, L_SHIPMODE TEXT NOT NULL, L_COMMENT TEXT NOT NULL, PRIMARY KEY (L_ORDERKEY, L_LINENUMBER), FOREIGN KEY (L_ORDERKEY) REFERENCES orders (O_ORDERKEY), FOREIGN KEY (L_PARTKEY, L_SUPPKEY) REFERENCES partsupp (PS_PARTKEY, PS_SUPPKEY));

INSERT INTO region SELECT * FROM region_original;

INSERT INTO part SELECT * FROM part_original;

INSERT INTO nation SELECT * FROM nation_original;

INSERT INTO supplier SELECT * FROM supplier_original;

INSERT INTO partsupp SELECT * FROM partsupp_original;

INSERT INTO customer SELECT * FROM customer_original;

INSERT INTO orders SELECT * FROM orders_original;

INSERT INTO orders SELECT * FROM orders_original;

INSERT INTO orders SELECT * FROM orders_original;

INSERT INTO orders SELECT * FROM orders_original;

CREATE TABLE pkt (i INT PRIMARY KEY);

CREATE TABLE fkt (j INT, FOREIGN KEY (j) REFERENCES pkt (i));

BEGIN;

INSERT INTO pkt VALUES (1);

INSERT INTO fkt VALUES (1);

ROLLBACK;

INSERT INTO pkt VALUES (1);

BEGIN;

INSERT INTO pkt VALUES (2);

INSERT INTO fkt VALUES (3);

ROLLBACK;

BEGIN;

INSERT INTO fkt VALUES (1);

DELETE FROM pkt WHERE i = 1;

ROLLBACK;

BEGIN;

DELETE FROM pkt WHERE i = 1;

INSERT INTO fkt VALUES (1);

ROLLBACK;

BEGIN;

INSERT INTO pkt VALUES (2);

INSERT INTO fkt VALUES (1), (2);

DELETE FROM fkt WHERE j = 1;

DELETE FROM pkt WHERE i = 1;

COMMIT;

DELETE FROM pkt WHERE i = 2;

DELETE FROM fkt WHERE j = 2;

DELETE FROM pkt WHERE i = 2;

INSERT INTO pkt VALUES (3);

BEGIN;

DELETE FROM pkt WHERE i = 3;

INSERT INTO fkt VALUES (3);

ROLLBACK;

DROP TABLE pkt;

DROP TABLE fkt;

DROP TABLE pkt;

BEGIN;

CREATE TABLE a (i INT PRIMARY KEY);

CREATE TABLE b (j INT, FOREIGN KEY (j) REFERENCES a (i));

INSERT INTO a VALUES (1), (2);

INSERT INTO b VALUES (1), (2);

DELETE FROM b;

CREATE TABLE album (artistid INT, albumname TEXT, albumcover TEXT, UNIQUE (artistid, albumname));

INSERT INTO album VALUES (1, 'A', 'A_cover'), (2, 'B', 'B_cover'), (3, 'C', 'C_cover'), (4, 'D', 'D_cover');

CREATE TABLE song (songid INT, songartist INT, songalbum TEXT, songname TEXT, FOREIGN KEY (songartist, songalbum) REFERENCES album (artistid));

CREATE TABLE song (songid INT, songartist INT, songalbum TEXT, songname TEXT, FOREIGN KEY (songalbum) REFERENCES album (artistid, albumname));

CREATE TABLE song (songid INT, songartist INT, songalbum TEXT, songname TEXT, FOREIGN KEY (songartist, songalbum) REFERENCES albumlist (artistid, albumname));

CREATE TABLE song (songid INT, songartist INT, songalbum TEXT, songname TEXT, FOREIGN KEY (songartist, songalbum) REFERENCES album (artistid, album_name));

CREATE TABLE song (songid INT, songartist INT, songalbum TEXT, songname TEXT, FOREIGN KEY (songartist, song_album) REFERENCES album (artistid, albumname));

CREATE TABLE song (songid INT, songartist INT, songalbum TEXT, songname TEXT, FOREIGN KEY (songartist, songalbum) REFERENCES album (artistid, albumname));

INSERT INTO song VALUES (11, 1, 'A', 'A_song'), (12, 2, 'E', 'B_song'), (13, 3, 'C', 'C_song');

INSERT INTO song VALUES (11, 1, 'A', 'A_song'), (12, 5, 'D', 'B_song'), (13, 3, 'C', 'C_song');

INSERT INTO song VALUES (11, 1, 'A', 'A_song'), (12, 2, 'B', 'B_song'), (13, 3, 'C', 'C_song');

DELETE FROM album WHERE albumname = 'C';

DELETE FROM album WHERE albumname = 'D';

SELECT * FROM album;

UPDATE song SET songartist = 5, songalbum = 'A' WHERE songname = 'B_song';

UPDATE song SET songartist = 1, songalbum = 'A' WHERE songname = 'B_song';

SELECT * FROM album;

SELECT * FROM song;

UPDATE album SET albumname = 'B' WHERE albumcover = 'C_cover';

UPDATE song SET songalbum = 'E' WHERE albumcover = 'C_song';

UPDATE album SET artistid = 5, albumname = 'D' WHERE albumcover = 'B_cover';

SELECT * FROM album;

UPDATE album SET albumcover = 'C_cover_new' WHERE artistid = 3;

UPDATE song SET songname = 'C_song_new' WHERE songartist = 3;

SELECT * FROM album;

SELECT * FROM song;

ALTER TABLE album RENAME COLUMN albumname TO albumname_new;

ALTER TABLE song RENAME COLUMN songalbum TO songalbum_new;

ALTER TABLE song RENAME COLUMN songname TO songname_new;

ALTER TABLE song ALTER COLUMN songartist SET DATA TYPE TEXT;

ALTER TABLE album ALTER COLUMN artistid SET DATA TYPE TEXT;

ALTER TABLE song ALTER COLUMN songname_new SET DATA TYPE TEXT;

ALTER TABLE album DROP COLUMN artistid;

ALTER TABLE song DROP COLUMN songname_new;

DROP TABLE album;

DROP TABLE song;

ALTER TABLE album RENAME COLUMN albumname TO albumname_new;

ALTER TABLE album ALTER COLUMN albumcover SET DATA TYPE TEXT;

ALTER TABLE album DROP COLUMN albumcover;

DROP TABLE album;

CREATE TABLE pkt (i INT UNIQUE, k INT UNIQUE);

INSERT INTO pkt VALUES (1, 11), (2, 12), (3, 13);

CREATE TABLE fkt (j INT, l INT UNIQUE, FOREIGN KEY (j) REFERENCES pkt (i));

CREATE INDEX k_index ON pkt(k);

CREATE INDEX l_index ON fkt(l);

INSERT INTO fkt VALUES (1, 101), (2, 102);

INSERT INTO fkt VALUES (4, 104);

INSERT INTO fkt VALUES (3, 103);

DELETE FROM pkt WHERE k = 13;

DELETE FROM fkt WHERE l = 103;

DELETE FROM pkt WHERE k = 13;

UPDATE pkt SET i = 5 WHERE k = 12;

UPDATE fkt SET i = 4 WHERE l = 102;

UPDATE fkt SET i = 4 WHERE l = 102;

DROP INDEX k_index;

DROP INDEX l_index;

DROP TABLE pkt;

DROP TABLE fkt;

DROP TABLE pkt;

CREATE SCHEMA s1;

CREATE TABLE s1.pkt (i INT PRIMARY KEY);

CREATE TABLE s1.fkt (j INT, FOREIGN KEY (j) REFERENCES s1.pkt (i));

INSERT INTO s1.pkt VALUES (1), (2), (3), (4), (5);

INSERT INTO s1.fkt VALUES (2), (3);

INSERT INTO s1.fkt VALUES (6);

INSERT INTO s1.fkt VALUES (1);

DELETE FROM s1.pkt WHERE i = 2;

DELETE FROM s1.pkt WHERE i = 5;

DROP TABLE s1.pkt;

DROP TABLE s1.fkt;

DROP TABLE s1.pkt;

CREATE TABLE pkt (i INT UNIQUE);

CREATE TABLE fkt (j INT, FOREIGN KEY (j) REFERENCES pkt (i));

INSERT INTO fkt VALUES (NULL);

CREATE TABLE t (id INT PRIMARY KEY, parent INT REFERENCES t (id));

INSERT INTO t VALUES (1, NULL);

INSERT INTO t VALUES (2, 1), (3, 1);

TRUNCATE TABLE t;

CREATE TABLE integers (i INT, j BOOLEAN, PRIMARY KEY (i, j));

INSERT INTO integers VALUES (1, FALSE), (1, TRUE), (2, FALSE);

INSERT INTO integers VALUES (1, FALSE);

INSERT INTO integers VALUES (2, TRUE);

SELECT * FROM integers ORDER BY 1, 2;

CREATE TABLE numbers (a INT, b INT, c INT, d INT, e INT, PRIMARY KEY (a, b));

INSERT INTO numbers VALUES (1, 1, 1, 1, 1), (1, 1, 1, 1, 1);

INSERT INTO numbers VALUES (1, 1, 1, 1, 1), (1, 2, 1, 1, 1), (2, 1, 2, 1, 1), (2, 2, 2, 2, 2);

INSERT INTO numbers VALUES (1, 1, 1, 1, 1), (1, 5, 1, 1, 4);

INSERT INTO numbers VALUES (1, 5, 1, 1, 4);

UPDATE numbers SET c = 1 WHERE c = 2;

UPDATE numbers SET b = 1 WHERE b = 2;

CREATE TABLE integers (i INT PRIMARY KEY);

INSERT INTO integers VALUES (1), (2), (3);

BEGIN;

UPDATE integers SET i = 4 WHERE i = 2;

UPDATE integers SET i = 4 WHERE i = 2;

UPDATE integers SET i = 5 WHERE i = 2;

DELETE FROM integers WHERE i = 2;

UPDATE integers SET i = 5 WHERE i = 3;

ROLLBACK;

BEGIN;

UPDATE integers SET i = 4 WHERE i = 2;

UPDATE integers SET i = 5 WHERE i = 3;

SELECT * FROM integers ORDER BY i;

SELECT * FROM integers ORDER BY i;

COMMIT;

SELECT * FROM integers ORDER BY i;

SELECT * FROM integers ORDER BY i;

CREATE TABLE numbers (a INT, b INT, c INT, d INT, e INT, PRIMARY KEY (a, b, c, d, e));

INSERT INTO numbers VALUES (1, 1, 1, 1, 1), (1, 1, 1, 1, 1);

INSERT INTO numbers VALUES (1, 1, 1, 1, 1), (1, 2, 1, 1, 1), (1, 1, 2, 1, 1), (2, 2, 2, 2, 2);

INSERT INTO numbers VALUES (1, 1, 1, 1, 1), (1, 1, 1, 1, 4);

INSERT INTO numbers VALUES (1, 1, 1, 1, 4);

UPDATE numbers SET c = 1 WHERE c = 2;

CREATE TABLE integers (i INT, j TEXT, PRIMARY KEY (i, j));

INSERT INTO integers VALUES (3, 'hello'), (3, 'world');

SELECT * FROM integers;

INSERT INTO integers VALUES (6, 'bla'), (3, 'hello');

INSERT INTO integers VALUES (6, 'bla');

SELECT * FROM integers;

CREATE TABLE tst (a TEXT, b TEXT, PRIMARY KEY (a, b));

INSERT INTO tst VALUES ('hell', 'hello'), ('hell', 'hello');

INSERT INTO tst VALUES ('hell', 'hello'), ('hello', 'hell'), ('hel', 'hell'), ('hell', 'hel');

INSERT INTO tst VALUES ('hell', 'hello'), ('hel', 'hello');

INSERT INTO tst VALUES ('hel', 'hello');

UPDATE tst SET b = 'hello' WHERE b = 'hel';

CREATE TABLE integers (i INT PRIMARY KEY);

BEGIN;

INSERT INTO integers VALUES (1);

ROLLBACK;

INSERT INTO integers VALUES (1);

SELECT * FROM integers;

CREATE TABLE numbers (i TEXT PRIMARY KEY, j INT);

INSERT INTO numbers VALUES ('1', 4), ('1', 5);

INSERT INTO numbers VALUES ('1', 4), ('2', 5);

SELECT * FROM numbers;

INSERT INTO numbers VALUES ('6', 6), ('1', 4);

INSERT INTO numbers VALUES ('6', 6);

SELECT * FROM numbers;

INSERT INTO numbers VALUES (NULL, 4);

UPDATE numbers SET i = NULL;

CREATE TABLE test (a INT PRIMARY KEY, b INT);

INSERT INTO test VALUES (11, 1), (12, 2), (13, 3);

UPDATE test SET b = 2 WHERE b = 3;

UPDATE test SET a = a + 1 WHERE b = 1;

UPDATE test SET a = 4;

SELECT * FROM test;

DELETE FROM test WHERE a = 11;

SELECT * FROM test ORDER BY a;

INSERT INTO test VALUES (11, 1);

SELECT * FROM test ORDER BY a;

INSERT INTO test VALUES (11, 1);

SELECT * FROM test ORDER BY a;

UPDATE test SET a = 4 WHERE b = 1;

SELECT * FROM test ORDER BY a;

UPDATE test SET a = NULL WHERE b = 1;

UPDATE test SET a = NULL;

CREATE TABLE integers (i INT PRIMARY KEY);

BEGIN;

INSERT INTO integers VALUES (1);

UPDATE integers SET i = 33;

ROLLBACK;

INSERT INTO integers VALUES (1);

INSERT INTO integers VALUES (33);

SELECT * FROM integers ORDER BY i;

DROP TABLE integers;

CREATE TABLE integers (i INT PRIMARY KEY);

INSERT INTO integers VALUES (1);

UPDATE integers SET i = 33;

INSERT INTO integers VALUES (1);

SELECT * FROM integers ORDER BY i;

PRAGMA enable_verification;

CREATE TABLE test (a INT, b TEXT, PRIMARY KEY (a, b));

INSERT INTO test VALUES (11, 'hello'), (12, 'world'), (13, 'blablabla');

UPDATE test SET b = 'pandas';

SELECT * FROM test ORDER BY ALL;

UPDATE test SET a = a + 3;

SELECT * FROM test ORDER BY ALL;

UPDATE test SET a = 15 WHERE a = 14;

UPDATE test SET a = 4;

SELECT * FROM test ORDER BY a;

UPDATE test SET a = a - 3;

SELECT * FROM test ORDER BY ALL;

DELETE FROM test WHERE a = 12;

SELECT * FROM test ORDER BY a;

INSERT INTO test VALUES (12, 'pandas');

SELECT * FROM test ORDER BY a;

INSERT INTO test VALUES (12, 'pandas');

DELETE FROM test WHERE a = 12;

SELECT * FROM test ORDER BY a;

INSERT INTO test VALUES (12, 'other pandas');

UPDATE test SET a = 4 WHERE a = 42;

UPDATE test SET a = 4 WHERE a = 12;

SELECT * FROM test ORDER BY a;

UPDATE test SET b = NULL WHERE a = 13;

CREATE TABLE integers (i INT PRIMARY KEY, j INT);

INSERT INTO integers VALUES (3, 4), (3, 5);

INSERT INTO integers VALUES (3, 4), (2, 5);

SELECT * FROM integers;

INSERT INTO integers VALUES (6, 6), (3, 4);

INSERT INTO integers VALUES (6, 6);

SELECT * FROM integers;

INSERT INTO integers VALUES (NULL, 4);

UPDATE integers SET i = NULL;

BEGIN;

BEGIN;

INSERT INTO integers VALUES (7, 8);

INSERT INTO integers VALUES (7, 33);

COMMIT;

COMMIT;

SET default_null_order = 'nulls_first';

CREATE TABLE integers (i INT UNIQUE, j INT);

INSERT INTO integers VALUES (3, 4), (2, 5);

SELECT * FROM integers;

INSERT INTO integers VALUES (6, 6), (3, 4);

INSERT INTO integers VALUES (NULL, 6), (NULL, 7);

UPDATE integers SET i = 77 WHERE i IS NULL;

SELECT * FROM integers ORDER BY i, j;

UPDATE integers SET i = 77 WHERE i IS NULL AND j = 6;

SELECT * FROM integers ORDER BY i, j;

INSERT INTO integers VALUES (NULL, 6), (NULL, 7);

INSERT INTO integers VALUES (NULL, 6), (NULL, 7);

INSERT INTO integers VALUES (NULL, 6), (NULL, 7);

INSERT INTO integers VALUES (NULL, 6), (NULL, 7);

INSERT INTO integers VALUES (NULL, 6), (NULL, 7);

INSERT INTO integers VALUES (NULL, 6), (NULL, 7);

INSERT INTO integers VALUES (NULL, 6), (NULL, 7);

INSERT INTO integers VALUES (NULL, 6), (NULL, 7);

INSERT INTO integers VALUES (NULL, 6), (NULL, 7);

INSERT INTO integers VALUES (NULL, 6), (NULL, 7);

INSERT INTO integers VALUES (NULL, 6), (3, 7);

CREATE TEMPORARY TABLE integers (i INT, j TEXT);

INSERT INTO integers VALUES (3, '4'), (2, '4');

CREATE UNIQUE INDEX uidx ON integers(j);

SET default_null_order = 'nulls_first';
require AS skip_reload;

CREATE TEMPORARY TABLE integers (i INT, j INT);

CREATE UNIQUE INDEX uidx ON integers(i, j);

INSERT INTO integers VALUES (3, 4), (2, 5);

SELECT * FROM integers;

INSERT INTO integers VALUES (6, 6), (3, 4);

INSERT INTO integers VALUES (NULL, 6), (NULL, 6), (NULL, 7);

UPDATE integers SET i = 77 WHERE i IS NULL;

SELECT * FROM integers ORDER BY i, j;

UPDATE integers SET i = 77 WHERE i IS NULL AND j = 7;

SELECT * FROM integers ORDER BY i, j;

INSERT INTO integers VALUES (NULL, 6), (NULL, 7);

INSERT INTO integers VALUES (NULL, 6), (NULL, 7);

INSERT INTO integers VALUES (NULL, 6), (NULL, 7);

INSERT INTO integers VALUES (NULL, 6), (NULL, 7);

INSERT INTO integers VALUES (NULL, 6), (NULL, 7);

INSERT INTO integers VALUES (NULL, 6), (NULL, 7);

INSERT INTO integers VALUES (NULL, 6), (NULL, 7);

INSERT INTO integers VALUES (NULL, 6), (NULL, 7);

INSERT INTO integers VALUES (NULL, 6), (NULL, 7);

INSERT INTO integers VALUES (NULL, 6), (NULL, 7);

INSERT INTO integers VALUES (3, 4);

CREATE TABLE integers (i INT PRIMARY KEY, j INT UNIQUE);

INSERT INTO integers VALUES (1, 1), (2, 2);

INSERT INTO integers VALUES (3, 3), (4, 1);

INSERT INTO integers VALUES (3, 3), (4, 4);

INSERT INTO integers VALUES (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12), (13, 13), (14, 14), (15, 15), (16, 16), (17, 17), (18, 18), (19, 19), (20, 20), (21, 21), (22, 22), (23, 23), (24, 24), (25, 25), (26, 26), (27, 27), (28, 28), (29, 29), (30, 30), (31, 31), (32, 32), (33, 33), (34, 34), (35, 35), (36, 36), (37, 37), (38, 38), (39, 39), (40, 40), (41, 41), (42, 42), (43, 43), (44, 44), (45, 45), (46, 46), (47, 47), (48, 48), (49, 49), (50, 50), (51, 51), (52, 52), (53, 53), (54, 54), (55, 55), (56, 56), (57, 57), (58, 58), (59, 59), (60, 60), (61, 61), (62, 62), (63, 63), (64, 64), (65, 65), (66, 66), (67, 67), (68, 68), (69, 69), (70, 70), (71, 71), (72, 72), (73, 73), (74, 74), (75, 75), (76, 76), (77, 77), (78, 78), (79, 79), (80, 80), (81, 81), (82, 82), (83, 83), (84, 84), (85, 85), (86, 86), (87, 87), (88, 88), (89, 89), (90, 90), (91, 91), (92, 92), (93, 93), (94, 94), (95, 95), (96, 96), (97, 97), (98, 98), (99, 99), (5, 5), (NULL, NULL), (NULL, NULL), (NULL, NULL), (NULL, NULL);

SELECT * FROM integers WHERE i > 0 ORDER BY 1;

INSERT INTO integers VALUES (5, 5), (6, 6);

SELECT * FROM integers WHERE i > 0 ORDER BY 1;

UPDATE integers SET i = 4, j = 100 WHERE i = 1;

UPDATE integers SET i = 100, j = 4 WHERE j = 1;

INSERT INTO integers VALUES (100, 100);

SELECT * FROM integers WHERE i > 0 ORDER BY 1;

CREATE TEMPORARY TABLE integers (i INT, j TEXT);

CREATE UNIQUE INDEX "uidx" ON "integers"("j");

INSERT INTO integers VALUES (3, '4'), (2, '5');

SELECT * FROM integers;

INSERT INTO integers VALUES (6, '6'), (3, '4');

INSERT INTO integers VALUES (6, NULL), (7, NULL);

UPDATE integers SET j = '77' WHERE j IS NULL;

SELECT * FROM integers ORDER BY i, j;

UPDATE integers SET j = '7777777777777777777777777777' WHERE j IS NULL AND i = 6;

INSERT INTO integers VALUES (6, NULL), (7, NULL);

INSERT INTO integers VALUES (6, NULL), (7, NULL);

INSERT INTO integers VALUES (6, NULL), (7, NULL);

INSERT INTO integers VALUES (6, NULL), (7, NULL);

INSERT INTO integers VALUES (6, NULL), (7, NULL);

INSERT INTO integers VALUES (6, NULL), (7, NULL);

INSERT INTO integers VALUES (6, NULL), (7, NULL);

INSERT INTO integers VALUES (6, NULL), (7, NULL);

INSERT INTO integers VALUES (6, NULL), (7, NULL);

INSERT INTO integers VALUES (6, NULL), (7, NULL);

INSERT INTO integers VALUES (3, '4');

INSERT INTO integers VALUES (3, '4');

SET default_null_order = 'nulls_first';
require AS skip_reload;

CREATE TEMPORARY TABLE integers (i INT, j INT);

CREATE UNIQUE INDEX uidx ON integers(i);

INSERT INTO integers VALUES (3, 4), (2, 5);

SELECT * FROM integers;

INSERT INTO integers VALUES (6, 6), (3, 4);

INSERT INTO integers VALUES (NULL, 6), (NULL, 7);

UPDATE integers SET i = 77 WHERE i IS NULL;

SELECT * FROM integers ORDER BY i, j;

UPDATE integers SET i = 77 WHERE i IS NULL AND j = 6;

SELECT * FROM integers ORDER BY i, j;

INSERT INTO integers VALUES (NULL, 6), (NULL, 7);

INSERT INTO integers VALUES (NULL, 6), (NULL, 7);

INSERT INTO integers VALUES (NULL, 6), (NULL, 7);

INSERT INTO integers VALUES (NULL, 6), (NULL, 7);

INSERT INTO integers VALUES (NULL, 6), (NULL, 7);

INSERT INTO integers VALUES (NULL, 6), (NULL, 7);

INSERT INTO integers VALUES (NULL, 6), (NULL, 7);

INSERT INTO integers VALUES (NULL, 6), (NULL, 7);

INSERT INTO integers VALUES (NULL, 6), (NULL, 7);

INSERT INTO integers VALUES (NULL, 6), (NULL, 7);

INSERT INTO integers VALUES (NULL, 6), (3, 7);

CREATE TABLE bigdata AS SELECT i AS col_a, i AS col_b FROM RANGE(0, 10000) AS tbl(i);

SET threads = 1;

COPY (SELECT * FROM bigdata) TO '__TEST_DIR__/file_size_bytes_csv1' WITH (FORMAT CSV, FILE_SIZE_BYTES 1000);

SELECT COUNT(*) FROM READ_CSV_AUTO('__TEST_DIR__/file_size_bytes_csv1/*.csv');

SELECT COUNT(*) FROM GLOB('__TEST_DIR__/file_size_bytes_csv1/*.csv');

COPY (SELECT * FROM bigdata) TO '__TEST_DIR__/file_size_bytes_csv2' WITH (FORMAT CSV, FILE_SIZE_BYTES '1kb');

SELECT COUNT(*) FROM READ_CSV_AUTO('__TEST_DIR__/file_size_bytes_csv2/*.csv');

SELECT COUNT(*) FROM GLOB('__TEST_DIR__/file_size_bytes_csv2/*.csv');

COPY (SELECT * FROM bigdata) TO '__TEST_DIR__/file_size_bytes_json' WITH (FORMAT JSON, FILE_SIZE_BYTES '1kb');

SELECT COUNT(*) FROM READ_JSON_AUTO('__TEST_DIR__/file_size_bytes_json/*.json');

SELECT COUNT(*) >= 3 AND COUNT(*) <= 12 FROM GLOB('__TEST_DIR__/file_size_bytes_json/*.json');

COPY (SELECT CAST(HASH(col_a) AS DOUBLE), CAST(HASH(col_b) AS DOUBLE) FROM bigdata) TO '__TEST_DIR__/file_size_bytes_parquet' WITH (FORMAT PARQUET, ROW_GROUP_SIZE 2000, FILE_SIZE_BYTES '1kb');

SELECT COUNT(*) FROM READ_PARQUET('__TEST_DIR__/file_size_bytes_parquet/*.parquet');

SELECT COUNT(*) FROM GLOB('__TEST_DIR__/file_size_bytes_parquet/*.parquet');

INSERT INTO bigdata SELECT bigdata.* FROM bigdata, RANGE(0, 9);

PRAGMA verify_parallelism;

PRAGMA threads = 4;

COPY (SELECT * FROM bigdata) TO '__TEST_DIR__/file_size_bytes_csv3' WITH (FORMAT CSV, FILE_SIZE_BYTES '500kb');

SELECT COUNT(*) FROM READ_CSV_AUTO('__TEST_DIR__/file_size_bytes_csv3/*.csv');

SELECT COUNT(*) FROM GLOB('__TEST_DIR__/file_size_bytes_csv3/*.csv');

COPY (SELECT * FROM bigdata) TO '__TEST_DIR__/file_size_bytes_csv4' WITH (FORMAT CSV, FILE_SIZE_BYTES '200kb');

SELECT COUNT(*) FROM READ_CSV_AUTO('__TEST_DIR__/file_size_bytes_csv4/*.csv');

SELECT COUNT(*) BETWEEN 3 AND 5 FROM GLOB('__TEST_DIR__/file_size_bytes_csv4/*.csv');

COPY (SELECT * FROM bigdata) TO '__TEST_DIR__/file_size_bytes_csv5' WITH (FORMAT CSV, FILE_SIZE_BYTES '700kb', PER_THREAD_OUTPUT TRUE);

SELECT COUNT(*) FROM READ_CSV_AUTO('__TEST_DIR__/file_size_bytes_csv5/*.csv');

SELECT COUNT(*) > 1 FROM GLOB('__TEST_DIR__/file_size_bytes_csv5/*.csv');

COPY (SELECT * FROM bigdata) TO '__TEST_DIR__/file_size_bytes_csv6' WITH (FORMAT CSV, FILE_SIZE_BYTES '190kb', PER_THREAD_OUTPUT TRUE);

SELECT COUNT(*) FROM READ_CSV_AUTO('__TEST_DIR__/file_size_bytes_csv6/*.csv');

SELECT COUNT(*) BETWEEN 5 AND 10 FROM GLOB('__TEST_DIR__/file_size_bytes_csv6/*.csv');

COPY (SELECT * FROM bigdata) TO '__TEST_DIR__/file_size_bytes_csv7' WITH (FORMAT CSV, FILE_SIZE_BYTES '190kb', USE_TMP_FILE TRUE);

COPY (SELECT * FROM bigdata) TO '__TEST_DIR__/file_size_bytes_csv7' WITH (FORMAT CSV, FILE_SIZE_BYTES '190kb', PARTITION_BY col_a);

SET threads = 4;

CREATE TABLE bigdata AS SELECT i AS col_a, i AS col_b FROM RANGE(0, 10000000) AS tbl(i);

COPY (SELECT * FROM bigdata) TO '__TEST_DIR__/file_size_bytes_csv42' WITH (FORMAT CSV, FILE_SIZE_BYTES '1mb');

SELECT COUNT(*) FROM READ_CSV('__TEST_DIR__/file_size_bytes_csv42/*.csv');

SELECT AVG(col_a), AVG(col_b) FROM READ_CSV('__TEST_DIR__/file_size_bytes_csv42/*.csv');

SELECT COUNT(*) BETWEEN 100 AND 200 FROM GLOB('__TEST_DIR__/file_size_bytes_csv42/*.csv');

COPY (SELECT * FROM bigdata) TO '__TEST_DIR__/file_size_bytes_csv43' WITH (FORMAT CSV, FILE_SIZE_BYTES '1mb', PER_THREAD_OUTPUT TRUE);

SELECT COUNT(*) FROM READ_CSV_AUTO('__TEST_DIR__/file_size_bytes_csv43/*.csv');

SELECT AVG(col_a), AVG(col_b) FROM READ_CSV('__TEST_DIR__/file_size_bytes_csv43/*.csv');

SELECT COUNT(*) BETWEEN 100 AND 200 FROM GLOB('__TEST_DIR__/file_size_bytes_csv43/*.csv');

PRAGMA enable_verification;

PRAGMA verify_parallelism;

PRAGMA threads = 4;

CREATE TABLE test2 AS SELECT i AS a, (i * 2) AS b, POWER(i, 2) AS c FROM RANGE(0, 10) AS tbl(i);

CREATE TABLE test3 AS SELECT i AS a, (i * 3) AS b, POWER(i, 3) AS c FROM RANGE(0, 10) AS tbl(i);

CREATE TABLE test4 AS SELECT i AS a, (i * 4) AS b, POWER(i, 4) AS c FROM RANGE(0, 10) AS tbl(i);

CREATE TABLE test5 AS SELECT i AS a, (i * 5) AS b, POWER(i, 5) AS c FROM RANGE(0, 10) AS tbl(i);

CREATE TABLE testpto AS SELECT i AS a, (i * 10) AS b, (i * 100) AS c FROM RANGE(0, 10000) AS tbl(i);

SELECT * FROM test2;

COPY test2 TO '__TEST_DIR__/part' WITH (FORMAT PARQUET, PARTITION_BY (a), FILENAME_PATTERN "leading_{uuid}");

SELECT * FROM "__TEST_DIR__/part/a=9/leading_????????-????-4???-????-????????????.parquet";

COPY test3 TO '__TEST_DIR__/part' WITH (FORMAT PARQUET, PARTITION_BY (a), overwrite_or_ignore TRUE, FILENAME_PATTERN "leading_{uuid}_trailing");

SELECT * FROM "__TEST_DIR__/part/a=9/leading_????????-????-4???-????-????????????_trailing.parquet";

SELECT * FROM "__TEST_DIR__/part/a=9/leading_????????-????-4???-????-????????????*.parquet";

COPY test4 TO '__TEST_DIR__/part' WITH (FORMAT PARQUET, PARTITION_BY (a), overwrite_or_ignore TRUE);

SELECT * FROM "__TEST_DIR__/part/a=9/data_[0-9]*.parquet";

SELECT * FROM "__TEST_DIR__/part/a=9/*.parquet";

COPY test5 TO '__TEST_DIR__/part' WITH (FORMAT PARQUET, PARTITION_BY (a), overwrite_or_ignore TRUE, FILENAME_PATTERN "basename");

SELECT * FROM "__TEST_DIR__/part/a=9/basename[0-9]*.parquet";

SELECT * FROM "__TEST_DIR__/part/a=9/*.parquet";

COPY test5 TO '__TEST_DIR__/part' WITH (FORMAT PARQUET, PARTITION_BY (a));

COPY test4 TO '__TEST_DIR__/to_be_overwritten' WITH (FORMAT PARQUET, PARTITION_BY (a), FILENAME_PATTERN);

COPY test4 TO '__TEST_DIR__/to_be_overwritten' WITH (FORMAT PARQUET, PARTITION_BY (a), FILENAME_PATTERN a_file_name);

SELECT COUNT(*) FROM GLOB('__TEST_DIR__/to_be_overwritten/a=9/a_file_name*');

SELECT * FROM "__TEST_DIR__/to_be_overwritten/a=9/a_file_name*.parquet";

COPY test5 TO '__TEST_DIR__/incorrect_pos' WITH (FORMAT PARQUET, PARTITION_BY (a), filename_pattern "a_name{i}_with_{uuid}_numbers");

SELECT * FROM "__TEST_DIR__/incorrect_pos/a=5/a_name_with_????????-????-4???-????-????????????_numbers.parquet";

COPY testpto TO '__TEST_DIR__/pto' WITH (FORMAT PARQUET, PER_THREAD_OUTPUT TRUE, OVERWRITE_OR_IGNORE TRUE, FILENAME_PATTERN "basename_{uuid}");

SELECT COUNT(*) FROM "__TEST_DIR__/pto/basename_????????-????-4???-????-????????????.parquet";

SELECT COUNT(*) >= 1 FROM GLOB('__TEST_DIR__/pto/basename_????????-????-4???-????-????????????.parquet');

PRAGMA threads = 1;

COPY test5 TO '__TEST_DIR__/to_be_overwritten2' WITH (FORMAT PARQUET, PARTITION_BY (a), OVERWRITE_OR_IGNORE);

SELECT COUNT(*) FROM GLOB('__TEST_DIR__/to_be_overwritten2/a=9/*');

SELECT * FROM "__TEST_DIR__/to_be_overwritten2/a=9/data_0*.parquet";

COPY test5 TO '__TEST_DIR__/directory0' WITH (FORMAT PARQUET, PARTITION_BY (a), overwrite_or_ignore TRUE, FILENAME_PATTERN "my_filename");

SELECT COUNT(*) FROM GLOB('__TEST_DIR__/directory0/a=7/*');

SELECT * FROM "__TEST_DIR__/directory0/a=7/my_filename0.parquet";

COPY test5 TO '__TEST_DIR__/to_be_overwritten2' WITH (FORMAT PARQUET, PARTITION_BY (a), OVERWRITE_OR_IGNORE, WRITE_PARTITION_COLUMNS);

SELECT COUNT(*) FROM GLOB('__TEST_DIR__/to_be_overwritten2/a=9/*');

SELECT * FROM "__TEST_DIR__/to_be_overwritten2/a=9/data_0*.parquet";

PRAGMA enable_verification;

COPY "data/csv/hive-partitioning/hive_types/himym.csv" TO '__TEST_DIR__/partition' WITH (format parquet, partition_by (season, director, aired));

SELECT TYPEOF(season), TYPEOF(director), TYPEOF(aired) FROM READ_PARQUET('__TEST_DIR__/partition/**/*.parquet', hive_partitioning = 0, hive_types = {'season': smallint}) LIMIT 1;

SELECT TYPEOF(season), TYPEOF(director), TYPEOF(aired) FROM READ_PARQUET('__TEST_DIR__/partition/**/*.parquet', hive_partitioning = 1, hive_types = {'season': 'smallint', 'director': 'varchar', 'aired': 'date'}) LIMIT 1;

SELECT TYPEOF(season), TYPEOF(director), TYPEOF(aired) FROM READ_PARQUET('__TEST_DIR__/partition/**/*.parquet', hive_types = {'season': smallint, 'director': varchar, 'aired': date}) LIMIT 1;

SELECT season, director, aired FROM READ_PARQUET('__TEST_DIR__/partition/**/*.parquet', hive_types = {'season': date}) LIMIT 1;

SELECT * FROM READ_PARQUET('__TEST_DIR__/partition/**/*.parquet', hive_types = {'seasons': smallint});

SELECT TYPEOF(season) FROM READ_PARQUET('__TEST_DIR__/partition/**/*.parquet', hive_types = {'season': smallint}) LIMIT 1;

SELECT * FROM READ_PARQUET('__TEST_DIR__/partition/**/*.parquet', hive_types = TRUE);

SELECT * FROM READ_PARQUET('__TEST_DIR__/partition/**/*.parquet', hive_types = {'season': -42});

SELECT TYPEOF(season), TYPEOF(director), TYPEOF(aired) FROM READ_PARQUET('__TEST_DIR__/partition/**/*.parquet', hive_partitioning = 0) LIMIT 1;

SELECT TYPEOF(season), TYPEOF(director), TYPEOF(aired) FROM READ_PARQUET('__TEST_DIR__/partition/**/*.parquet', hive_partitioning = 1, hive_types_autocast = 0) LIMIT 1;

SELECT TYPEOF(season), TYPEOF(director), TYPEOF(aired) FROM READ_PARQUET('__TEST_DIR__/partition/**/*.parquet', hive_partitioning = 1, hive_types_autocast = 1) LIMIT 1;

SELECT TYPEOF(season), TYPEOF(director), TYPEOF(aired) FROM READ_PARQUET('__TEST_DIR__/partition/**/*.parquet', hive_partitioning = 1) LIMIT 1;

SELECT TYPEOF(season), TYPEOF(director), TYPEOF(aired) FROM READ_PARQUET('__TEST_DIR__/partition/**/*.parquet', hive_types_autocast = 0) LIMIT 1;

SELECT TYPEOF(season), TYPEOF(director), TYPEOF(aired) FROM READ_PARQUET('__TEST_DIR__/partition/**/*.parquet') LIMIT 1;

COPY (SELECT 1 AS a, 1 AS b, '123' AS partition UNION ALL SELECT 2, 2, '1992-01-01' UNION ALL SELECT 3, 3, 'abc') TO '__TEST_DIR__/partition_types' WITH (FORMAT PARQUET, PARTITION_BY (partition));

SELECT * FROM "__TEST_DIR__/partition_types/**/*.parquet" ORDER BY 1;

SELECT * FROM READ_PARQUET('__TEST_DIR__/partition_types/**/*.parquet', hive_types = {'partition': smallint});

EXPLAIN from parquet_scan('__TEST_DIR__/partition/**/*.parquet', HIVE_PARTITIONING=0, HIVE_TYPES_AUTOCAST=0) where aired < '2006-1-1';

EXPLAIN (FORMAT JSON) from parquet_scan('__TEST_DIR__/partition/**/*.parquet', HIVE_PARTITIONING=1, HIVE_TYPES_AUTOCAST=0) where aired < '2006-1-1';

COPY "data/csv/hive-partitioning/hive_types/himym.csv" TO '__TEST_DIR__/partition-written' WITH (format parquet, partition_by (season, director, aired), write_partition_columns);

SELECT TYPEOF(season), TYPEOF(director), TYPEOF(aired) FROM READ_PARQUET('__TEST_DIR__/partition-written/**/*.parquet', hive_partitioning = 0) LIMIT 1;

EXPLAIN from parquet_scan('__TEST_DIR__/partition-written/**/*.parquet', HIVE_PARTITIONING=0, HIVE_TYPES_AUTOCAST=0) where aired < '2006-1-1';

PRAGMA verify_parallelism;

PRAGMA threads = 4;

CREATE TABLE bigdata AS SELECT i AS col_a, i AS col_b FROM RANGE(0, 10000) AS tbl(i);

CREATE TABLE bigdata AS SELECT i AS col_a, i AS col_b FROM RANGE(0, 10000) AS tbl(i);

SELECT COUNT(*) FROM PARQUET_SCAN('__TEST_DIR__/per_thread_output/*.parquet');

SELECT COUNT(*) > 1 AS f FROM GLOB('__TEST_DIR__/per_thread_output/data_*.parquet') ORDER BY f;

SELECT COUNT(*) > 1 AS f FROM GLOB('__TEST_DIR__/per_thread_output/data_*.parquet') ORDER BY f;

SELECT COUNT(*) FROM READ_CSV('__TEST_DIR__/per_thread_output_csv/*.csv', columns = {'col_a': 'INT', 'col_b': 'INT'});

SELECT COUNT(*) > 2 AS f FROM GLOB('__TEST_DIR__/per_thread_output_csv/data_*.csv') ORDER BY f;

COPY (SELECT * FROM bigdata) TO '__TEST_DIR__/per_thread_output2/' WITH (FORMAT PARQUET, PER_THREAD_OUTPUT TRUE);

SELECT COUNT(*) FROM PARQUET_SCAN('__TEST_DIR__/per_thread_output2/*.parquet');

COPY (SELECT * FROM bigdata) TO '__TEST_DIR__/per_thread_output2/' WITH (FORMAT PARQUET, PER_THREAD_OUTPUT TRUE);

SELECT COUNT(*) FROM PARQUET_SCAN('__TEST_DIR__/per_thread_output2/*.parquet');

COPY (SELECT * FROM bigdata) TO '__TEST_DIR__/per_thread_output3' WITH (FORMAT PARQUET, PER_THREAD_OUTPUT TRUE, USE_TMP_FILE TRUE);

CREATE TABLE integers AS SELECT range AS i FROM RANGE(0, 200000);

SET preserve_insertion_order = FALSE;

COPY integers TO '__TEST_DIR__/test_copy_to_file.parquet' WITH (RETURN_FILES);

SET preserve_insertion_order = TRUE;

COPY integers TO '__TEST_DIR__/test_batch_copy_to_file.parquet' WITH (RETURN_FILES TRUE);

SET threads = 2;

COPY integers TO '__TEST_DIR__/test_per_thread_output' WITH (RETURN_FILES, PER_THREAD_OUTPUT);

SET threads = 1;

CREATE TABLE integers2 AS SELECT range AS i, range % 4 AS j FROM RANGE(0, 200000);

COPY integers2 TO '__TEST_DIR__/test_partition_by' WITH (RETURN_FILES TRUE, PARTITION_BY j);

CREATE TABLE integers AS SELECT range AS i FROM RANGE(0, 200000);

CREATE TABLE multi_column_test AS SELECT range AS i, range % 10 AS j, CASE WHEN range % 2 = 0 THEN NULL ELSE range END AS k FROM RANGE(0, 2500);

CREATE TABLE floating_point_test AS SELECT CASE WHEN i % 10 = 0 THEN NULL ELSE i / 10.0 END AS fp FROM RANGE(0, 2500) AS t(i);

CREATE TABLE floating_point_nan AS SELECT CASE WHEN i % 10 = 0 THEN CAST('nan' AS DOUBLE) WHEN i % 4 = 0 THEN NULL ELSE i / 10.0 END AS fp FROM RANGE(0, 2500) AS t(i);

CREATE TABLE fp_nan_only AS SELECT CAST('nan' AS REAL) AS float_val;

CREATE TABLE string_test AS SELECT CONCAT('thisisalongstring_', range) AS s FROM RANGE(0, 2500);

CREATE TABLE date_test AS SELECT CAST((CAST('2000-01-01' AS TIMESTAMP) + INTERVAL (range) DAY) AS DATE) AS dt, CAST('2000-01-01 12:12:12.123456' AS TIMESTAMP) + INTERVAL (range) DAY AS ts, CAST((CAST('2000-01-01 12:12:12' AS TIMESTAMP) + INTERVAL (range) DAY) AS TIMESTAMP_S) AS ts_s, CAST((CAST('2000-01-01 12:12:12.123' AS TIMESTAMP) + INTERVAL (range) DAY) AS TIMESTAMP_MS) AS ts_ms, CAST(CONCAT(CAST((CAST('2000-01-01 12:12:12.123456' AS TIMESTAMP) + INTERVAL (range) DAY) AS TEXT), '789') AS TIMESTAMP_NS) AS ts_ns, CAST('00:00:00' AS TIME) + INTERVAL (10 * range) SECOND AS t FROM RANGE(0, 2500);

CREATE TABLE empty_test AS SELECT * FROM RANGE(0, 2500) LIMIT 0;

CREATE TABLE blob_test AS SELECT CAST('' AS BLOB) AS bl UNION ALL SELECT CAST('\x80\x00\x80' AS BLOB);

CREATE TABLE decimal_test AS SELECT CAST(25.3 AS DECIMAL(4, 1)) AS dec_i16, CAST(123456.789 AS DECIMAL(9, 3)) AS dec_i32, CAST(123456789123.456 AS DECIMAL(18, 3)) AS dec_i64 UNION ALL SELECT CAST(1.1 AS DECIMAL(4, 1)), CAST(2.123 AS DECIMAL(9, 3)), CAST(3.456 AS DECIMAL(18, 3));

CREATE TABLE struct_test AS SELECT CASE WHEN i % 10 = 0 THEN NULL ELSE {'x': i, 'y': CASE WHEN i % 2 = 0 THEN 100 + i ELSE NULL END} END AS struct_val FROM RANGE(0, 2500) AS t(i);

CREATE TABLE list_test AS SELECT [i] AS l1, CASE WHEN i % 10 = 0 THEN NULL ELSE [CASE WHEN i % 2 = 0 THEN 100 + i ELSE NULL END] END AS l2 FROM RANGE(0, 2500) AS t(i);

CREATE TABLE nested_struct_test AS SELECT {'s1': {'x': i}, 's2': {'s3': {'y': i}, 'l': [i]}} AS n FROM RANGE(0, 2500) AS t(i);

CREATE TABLE funky_names AS SELECT {'quoted ''"field name"': 42} AS """quoted col name""";

CREATE TABLE map_test AS SELECT MAP {'key': i} AS map_val FROM RANGE(0, 2500) AS t(i);

CREATE TABLE array_test AS SELECT CAST([i, i + 1, i + 2] AS INT[3]) AS array_val FROM RANGE(0, 2500) AS t(i);

CREATE TABLE partitioned_test AS SELECT range % 2 AS partition_key, range AS val FROM RANGE(0, 2500);

CREATE TABLE multi_partitioned_test AS SELECT range % 2 AS partition_key, range % 3 AS partition_key2, range AS val FROM RANGE(0, 2500);

CREATE TABLE large_string AS SELECT REPEAT('A', 254) || '🦆' AS val UNION ALL SELECT REPEAT('Z', 254) || '🦆';

CREATE TABLE large_blob AS SELECT CAST(REPEAT('\x81', 4000) AS BLOB) AS val UNION ALL SELECT CAST(REPEAT('\x80', 4000) AS BLOB);

CREATE TABLE large_blob AS SELECT CAST(REPEAT('\x81', 4000) AS BLOB) AS val UNION ALL SELECT CAST(REPEAT('\x80', 4000) AS BLOB);

CREATE TABLE large_blob AS SELECT CAST(REPEAT('\x81', 4000) AS BLOB) AS val UNION ALL SELECT CAST(REPEAT('\x80', 4000) AS BLOB);

COPY integers TO '__TEST_DIR__/test_copy_to_file.parquet' WITH (RETURN_STATS);

COPY multi_column_test TO '__TEST_DIR__/multi_column_copy.parquet' WITH (RETURN_STATS);

COPY string_test TO '__TEST_DIR__/string_test.parquet' WITH (RETURN_STATS);

COPY date_test TO '__TEST_DIR__/date_test.parquet' WITH (RETURN_STATS);

COPY empty_test TO '__TEST_DIR__/empty_test.parquet' WITH (RETURN_STATS);

COPY blob_test TO '__TEST_DIR__/blob_test.parquet' WITH (RETURN_STATS);

COPY decimal_test TO '__TEST_DIR__/decimal_test.parquet' WITH (RETURN_STATS);

COPY floating_point_test TO '__TEST_DIR__/fp.parquet' WITH (RETURN_STATS);

COPY floating_point_nan TO '__TEST_DIR__/fp_nan.parquet' WITH (RETURN_STATS);

COPY fp_nan_only TO '__TEST_DIR__/fp_nan_only.parquet' WITH (RETURN_STATS);

COPY large_string TO '__TEST_DIR__/test_large_string.parquet' WITH (RETURN_STATS);

COPY large_blob TO '__TEST_DIR__/test_large_blob.parquet' WITH (RETURN_STATS);

COPY uuids TO '__TEST_DIR__/test_uuids.parquet' WITH (RETURN_STATS);

COPY struct_test TO '__TEST_DIR__/struct_test.parquet' WITH (RETURN_STATS);

COPY list_test TO '__TEST_DIR__/list_test.parquet' WITH (RETURN_STATS);

COPY nested_struct_test TO '__TEST_DIR__/nested_struct_test.parquet' WITH (RETURN_STATS);

COPY funky_names TO '__TEST_DIR__/funky_names.parquet' WITH (RETURN_STATS);

COPY map_test TO '__TEST_DIR__/map_test.parquet' WITH (RETURN_STATS);

COPY array_test TO '__TEST_DIR__/array_test.parquet' WITH (RETURN_STATS);

COPY partitioned_test TO '__TEST_DIR__/partitioned_test' WITH (FORMAT PARQUET, PARTITION_BY (partition_key), RETURN_STATS, OVERWRITE);

COPY multi_partitioned_test TO '__TEST_DIR__/multi_partitioned_test' WITH (FORMAT PARQUET, PARTITION_BY (partition_key, partition_key2), RETURN_STATS, OVERWRITE);

COPY (SELECT * FROM TEST_ALL_TYPES()) TO '__TEST_DIR__/test_all_types.parquet' WITH (RETURN_STATS);

COPY integers TO '__TEST_DIR__/test_copy_to_file.csv' WITH (RETURN_STATS);

PRAGMA enable_verification;

COPY (SELECT CAST(REPEAT('\xFF', 300) AS BLOB) AS blob) TO '__TEST_DIR__/test_truncate_blob.parquet' WITH (RETURN_STATS);

SELECT min_is_exact, max_is_exact FROM PARQUET_METADATA('__TEST_DIR__/test_truncate_blob.parquet');

COPY (SELECT CAST(('\xFE' || REPEAT('\xFF', 300)) AS BLOB) AS blob) TO '__TEST_DIR__/test_truncate_blob.parquet' WITH (RETURN_STATS);

SELECT min_is_exact, max_is_exact FROM PARQUET_METADATA('__TEST_DIR__/test_truncate_blob.parquet');

COPY (SELECT REPEAT('🦆', 300) AS str) TO '__TEST_DIR__/test_truncate_string.parquet' WITH (RETURN_STATS);

SELECT min_is_exact, max_is_exact FROM PARQUET_METADATA('__TEST_DIR__/test_truncate_string.parquet');

COPY (SELECT 'B' || REPEAT('🦆', 300) AS str) TO '__TEST_DIR__/test_truncate_string.parquet' WITH (RETURN_STATS);

SELECT min_is_exact, max_is_exact FROM PARQUET_METADATA('__TEST_DIR__/test_truncate_string.parquet');

CREATE TABLE bigdata AS SELECT i AS col_a, i AS col_b FROM RANGE(0, 10000) AS tbl(i);

SET threads = 1;

COPY bigdata TO '__TEST_DIR__/row_groups_per_file1' WITH (FORMAT PARQUET, ROW_GROUP_SIZE 2000, ROW_GROUPS_PER_FILE 1);

SELECT COUNT(*) FROM "__TEST_DIR__/row_groups_per_file1/*.parquet";

SELECT COUNT(*) FROM GLOB('__TEST_DIR__/row_groups_per_file1/*.parquet');

COPY bigdata TO '__TEST_DIR__/row_groups_per_file2' WITH (FORMAT PARQUET, ROW_GROUP_SIZE 4000, ROW_GROUPS_PER_FILE 1);

SELECT COUNT(*) FROM "__TEST_DIR__/row_groups_per_file2/*.parquet";

SELECT COUNT(*) FROM GLOB('__TEST_DIR__/row_groups_per_file2/*.parquet');

COPY bigdata TO '__TEST_DIR__/row_groups_per_file3' WITH (FORMAT PARQUET, ROW_GROUP_SIZE 2000, ROW_GROUPS_PER_FILE 2);

SELECT COUNT(*) FROM "__TEST_DIR__/row_groups_per_file3/*.parquet";

SELECT COUNT(*) FROM GLOB('__TEST_DIR__/row_groups_per_file3/*.parquet');

PRAGMA verify_parallelism;

SET threads = 4;

COPY bigdata TO '__TEST_DIR__/row_groups_per_file4' WITH (FORMAT PARQUET, ROW_GROUP_SIZE 2000, ROW_GROUPS_PER_FILE 1);

SELECT COUNT(*) FROM "__TEST_DIR__/row_groups_per_file4/*.parquet";

SELECT COUNT(*) BETWEEN 1 AND 10 FROM GLOB('__TEST_DIR__/row_groups_per_file4/*.parquet');

COPY bigdata TO '__TEST_DIR__/row_groups_per_file5' WITH (FORMAT PARQUET, ROW_GROUP_SIZE 4000, ROW_GROUPS_PER_FILE 1);

SELECT COUNT(*) FROM "__TEST_DIR__/row_groups_per_file5/*.parquet";

SELECT COUNT(*) BETWEEN 1 AND 10 FROM GLOB('__TEST_DIR__/row_groups_per_file5/*.parquet');

COPY bigdata TO '__TEST_DIR__/row_groups_per_file6' WITH (FORMAT PARQUET, ROW_GROUP_SIZE 2000, ROW_GROUPS_PER_FILE 2);

SELECT COUNT(*) FROM "__TEST_DIR__/row_groups_per_file6/*.parquet";

SELECT COUNT(*) BETWEEN 1 AND 10 FROM GLOB('__TEST_DIR__/row_groups_per_file6/*.parquet');

COPY bigdata TO '__TEST_DIR__/row_groups_per_file7' WITH (FORMAT PARQUET, PER_THREAD_OUTPUT TRUE, ROW_GROUP_SIZE 2000, ROW_GROUPS_PER_FILE 1);

SELECT COUNT(*) FROM "__TEST_DIR__/row_groups_per_file7/*.parquet";

SELECT COUNT(*) BETWEEN 1 AND 10 FROM GLOB('__TEST_DIR__/row_groups_per_file7/*.parquet');

COPY bigdata TO '__TEST_DIR__/row_groups_per_file8' WITH (FORMAT PARQUET, PER_THREAD_OUTPUT TRUE, ROW_GROUP_SIZE 4000, ROW_GROUPS_PER_FILE 1);

SELECT COUNT(*) FROM "__TEST_DIR__/row_groups_per_file8/*.parquet";

SELECT COUNT(*) BETWEEN 1 AND 10 FROM GLOB('__TEST_DIR__/row_groups_per_file8/*.parquet');

COPY bigdata TO '__TEST_DIR__/row_groups_per_file9' WITH (FORMAT PARQUET, PER_THREAD_OUTPUT TRUE, ROW_GROUP_SIZE 2000, ROW_GROUPS_PER_FILE 2);

SELECT COUNT(*) FROM "__TEST_DIR__/row_groups_per_file9/*.parquet";

SELECT COUNT(*) BETWEEN 1 AND 10 FROM GLOB('__TEST_DIR__/row_groups_per_file9/*.parquet');

COPY bigdata TO '__TEST_DIR__/row_groups_per_file_error' WITH (FORMAT PARQUET, ROW_GROUPS_PER_FILE 1, USE_TMP_FILE TRUE);

COPY bigdata TO '__TEST_DIR__/row_groups_per_file_error' WITH (FORMAT PARQUET, ROW_GROUPS_PER_FILE 1, PARTITION_BY col_a);

SET threads = 4;

CREATE TABLE bigdata AS SELECT i AS col_a, i AS col_b FROM RANGE(0, 10000000) AS tbl(i);

COPY bigdata TO '__TEST_DIR__/row_groups_per_file42' WITH (FORMAT PARQUET, ROW_GROUP_SIZE 122880, ROW_GROUPS_PER_FILE 4);

SELECT COUNT(*) FROM READ_PARQUET('__TEST_DIR__/row_groups_per_file42/*.parquet');

SELECT AVG(col_a), AVG(col_b) FROM READ_PARQUET('__TEST_DIR__/row_groups_per_file42/*.parquet');

SELECT COUNT(*) BETWEEN 10 AND 25 FROM GLOB('__TEST_DIR__/row_groups_per_file42/*.parquet');

COPY bigdata TO '__TEST_DIR__/row_groups_per_file43' WITH (FORMAT PARQUET, ROW_GROUP_SIZE 122880, ROW_GROUPS_PER_FILE 4, PER_THREAD_OUTPUT TRUE);

SELECT COUNT(*) FROM READ_PARQUET('__TEST_DIR__/row_groups_per_file43/*.parquet');

SELECT AVG(col_a), AVG(col_b) FROM READ_PARQUET('__TEST_DIR__/row_groups_per_file43/*.parquet');

SELECT COUNT(*) BETWEEN 10 AND 25 FROM GLOB('__TEST_DIR__/row_groups_per_file43/*.parquet');

COPY (SELECT 42 AS x) TO '__TEST_DIR__/foo';

COPY (SELECT 42 AS x) TO '__TEST_DIR__/foo';

COPY (SELECT 36) TO '__TEST_DIR__/.a.b';

COPY (SELECT 37 AS x) TO '__TEST_DIR__/.a.b';

SELECT * FROM READ_CSV('__TEST_DIR__/.a.b');

COPY (SELECT 50) TO '__TEST_DIR__/.a.b.c.d.e..';

PRAGMA enable_verification;

SELECT * FROM READ_CSV('data/csv/14512.csv', strict_mode = TRUE);

SELECT columns FROM SNIFF_CSV('data/csv/14512.csv');

SELECT * FROM READ_CSV('data/csv/14512_og.csv', strict_mode = FALSE, delim = ',', quote = '"', escape = '"');

SELECT columns FROM SNIFF_CSV('data/csv/14512_og.csv', strict_mode = FALSE, delim = ',', quote = '"', escape = '"');

PRAGMA enable_verification;

SELECT COUNT(*) FROM READ_CSV('data/csv/drug_exposure.csv');

SELECT * FROM READ_CSV('data/csv/drug_exposure.csv') ORDER BY ALL LIMIT 5;

PRAGMA enable_verification;

SELECT COUNT(*) FROM READ_CSV_AUTO(['data/csv/error/mismatch/half1.csv', 'data/csv/error/mismatch/half2.csv'], ignore_errors = TRUE, sample_size = 1);

SELECT COUNT(*) FROM READ_CSV_AUTO(['data/csv/error/mismatch/half2.csv', 'data/csv/error/mismatch/half1.csv'], ignore_errors = TRUE, sample_size = 1);

PRAGMA enable_verification;

SELECT * FROM READ_CSV("data/csv/bug_10283.csv", Skip = 1, header = 0, all_varchar = 1, sample_size = -1, columns = {'I': 'VARCHAR', 'UNIT': 'VARCHAR', 'XX': 'VARCHAR', 'VERSION': 'VARCHAR', 'SETTLEMENTDATE': 'VARCHAR', 'RUNNO': 'VARCHAR', 'DUID': 'VARCHAR', 'INTERVENTION': 'VARCHAR', 'DISPATCHMODE': 'VARCHAR', 'AGCSTATUS': 'VARCHAR', 'INITIALMW': 'VARCHAR', 'TOTALCLEARED': 'VARCHAR', 'RAMPDOWNRATE': 'VARCHAR', 'RAMPUPRATE': 'VARCHAR', 'LOWER5MIN': 'VARCHAR', 'LOWER60SEC': 'VARCHAR', 'LOWER6SEC': 'VARCHAR', 'RAISE5MIN': 'VARCHAR', 'RAISE60SEC': 'VARCHAR', 'RAISE6SEC': 'VARCHAR', 'MARGINAL5MINVALUE': 'VARCHAR', 'MARGINAL60SECVALUE': 'VARCHAR', 'MARGINAL6SECVALUE': 'VARCHAR', 'MARGINALVALUE': 'VARCHAR', 'VIOLATION5MINDEGREE': 'VARCHAR', 'VIOLATION60SECDEGREE': 'VARCHAR', 'VIOLATION6SECDEGREE': 'VARCHAR', 'VIOLATIONDEGREE': 'VARCHAR', 'LOWERREG': 'VARCHAR', 'RAISEREG': 'VARCHAR', 'AVAILABILITY': 'VARCHAR', 'RAISE6SECFLAGS': 'VARCHAR', 'RAISE60SECFLAGS': 'VARCHAR', 'RAISE5MINFLAGS': 'VARCHAR', 'RAISEREGFLAGS': 'VARCHAR', 'LOWER6SECFLAGS': 'VARCHAR', 'LOWER60SECFLAGS': 'VARCHAR', 'LOWER5MINFLAGS': 'VARCHAR', 'LOWERREGFLAGS': 'VARCHAR', 'RAISEREGAVAILABILITY': 'VARCHAR', 'RAISEREGENABLEMENTMAX': 'VARCHAR', 'RAISEREGENABLEMENTMIN': 'VARCHAR', 'LOWERREGAVAILABILITY': 'VARCHAR', 'LOWERREGENABLEMENTMAX': 'VARCHAR', 'LOWERREGENABLEMENTMIN': 'VARCHAR', 'RAISE6SECACTUALAVAILABILITY': 'VARCHAR', 'RAISE60SECACTUALAVAILABILITY': 'VARCHAR', 'RAISE5MINACTUALAVAILABILITY': 'VARCHAR', 'RAISEREGACTUALAVAILABILITY': 'VARCHAR', 'LOWER6SECACTUALAVAILABILITY': 'VARCHAR', 'LOWER60SECACTUALAVAILABILITY': 'VARCHAR', 'LOWER5MINACTUALAVAILABILITY': 'VARCHAR', 'LOWERREGACTUALAVAILABILITY': 'VARCHAR'}, filename = 1, null_padding = TRUE, ignore_errors = 1, auto_detect = FALSE, strict_mode = TRUE);

SELECT UNIT FROM READ_CSV("data/csv/bug_10283.csv", Skip = 1, header = 0, all_varchar = 1, sample_size = -1, columns = {'I': 'VARCHAR', 'UNIT': 'VARCHAR', 'XX': 'VARCHAR', 'VERSION': 'VARCHAR', 'SETTLEMENTDATE': 'VARCHAR', 'RUNNO': 'VARCHAR', 'DUID': 'VARCHAR', 'INTERVENTION': 'VARCHAR', 'DISPATCHMODE': 'VARCHAR', 'AGCSTATUS': 'VARCHAR', 'INITIALMW': 'VARCHAR', 'TOTALCLEARED': 'VARCHAR', 'RAMPDOWNRATE': 'VARCHAR', 'RAMPUPRATE': 'VARCHAR', 'LOWER5MIN': 'VARCHAR', 'LOWER60SEC': 'VARCHAR', 'LOWER6SEC': 'VARCHAR', 'RAISE5MIN': 'VARCHAR', 'RAISE60SEC': 'VARCHAR', 'RAISE6SEC': 'VARCHAR', 'MARGINAL5MINVALUE': 'VARCHAR', 'MARGINAL60SECVALUE': 'VARCHAR', 'MARGINAL6SECVALUE': 'VARCHAR', 'MARGINALVALUE': 'VARCHAR', 'VIOLATION5MINDEGREE': 'VARCHAR', 'VIOLATION60SECDEGREE': 'VARCHAR', 'VIOLATION6SECDEGREE': 'VARCHAR', 'VIOLATIONDEGREE': 'VARCHAR', 'LOWERREG': 'VARCHAR', 'RAISEREG': 'VARCHAR', 'AVAILABILITY': 'VARCHAR', 'RAISE6SECFLAGS': 'VARCHAR', 'RAISE60SECFLAGS': 'VARCHAR', 'RAISE5MINFLAGS': 'VARCHAR', 'RAISEREGFLAGS': 'VARCHAR', 'LOWER6SECFLAGS': 'VARCHAR', 'LOWER60SECFLAGS': 'VARCHAR', 'LOWER5MINFLAGS': 'VARCHAR', 'LOWERREGFLAGS': 'VARCHAR', 'RAISEREGAVAILABILITY': 'VARCHAR', 'RAISEREGENABLEMENTMAX': 'VARCHAR', 'RAISEREGENABLEMENTMIN': 'VARCHAR', 'LOWERREGAVAILABILITY': 'VARCHAR', 'LOWERREGENABLEMENTMAX': 'VARCHAR', 'LOWERREGENABLEMENTMIN': 'VARCHAR', 'RAISE6SECACTUALAVAILABILITY': 'VARCHAR', 'RAISE60SECACTUALAVAILABILITY': 'VARCHAR', 'RAISE5MINACTUALAVAILABILITY': 'VARCHAR', 'RAISEREGACTUALAVAILABILITY': 'VARCHAR', 'LOWER6SECACTUALAVAILABILITY': 'VARCHAR', 'LOWER60SECACTUALAVAILABILITY': 'VARCHAR', 'LOWER5MINACTUALAVAILABILITY': 'VARCHAR', 'LOWERREGACTUALAVAILABILITY': 'VARCHAR'}, filename = 1, null_padding = TRUE, ignore_errors = 1, auto_detect = FALSE, strict_mode = TRUE);

SELECT * FROM READ_CSV("data/csv/bug_10283.csv", Skip = 1, header = 0, sample_size = -1, all_varchar = 1, columns = {'C1': 'VARCHAR', 'C2': 'VARCHAR', 'C3': 'VARCHAR', 'C4': 'VARCHAR', 'C5': 'VARCHAR', 'C6': 'VARCHAR', 'C7': 'VARCHAR', 'C8': 'VARCHAR', 'C9': 'VARCHAR', 'C10': 'VARCHAR', 'C11': 'VARCHAR', 'C12': 'VARCHAR', 'C13': 'VARCHAR', 'C14': 'VARCHAR', 'C15': 'VARCHAR', 'C16': 'VARCHAR', 'C17': 'VARCHAR', 'C18': 'VARCHAR', 'C19': 'VARCHAR', 'C20': 'VARCHAR', 'C21': 'VARCHAR', 'C22': 'VARCHAR', 'C23': 'VARCHAR', 'C24': 'VARCHAR', 'C25': 'VARCHAR', 'C26': 'VARCHAR', 'C27': 'VARCHAR', 'C28': 'VARCHAR', 'C29': 'VARCHAR', 'C30': 'VARCHAR', 'C31': 'VARCHAR', 'C32': 'VARCHAR', 'C33': 'VARCHAR', 'C34': 'VARCHAR', 'C35': 'VARCHAR', 'C36': 'VARCHAR', 'C37': 'VARCHAR', 'C38': 'VARCHAR', 'C39': 'VARCHAR', 'C40': 'VARCHAR', 'C41': 'VARCHAR', 'C42': 'VARCHAR', 'C43': 'VARCHAR', 'C44': 'VARCHAR', 'C45': 'VARCHAR', 'C46': 'VARCHAR', 'C47': 'VARCHAR', 'C48': 'VARCHAR', 'C49': 'VARCHAR', 'C50': 'VARCHAR', 'C51': 'VARCHAR', 'C52': 'VARCHAR', 'C53': 'VARCHAR', 'C54': 'VARCHAR', 'C55': 'VARCHAR', 'C56': 'VARCHAR', 'C57': 'VARCHAR', 'C58': 'VARCHAR', 'C59': 'VARCHAR', 'C60': 'VARCHAR', 'C61': 'VARCHAR', 'C62': 'VARCHAR', 'C63': 'VARCHAR', 'C64': 'VARCHAR', 'C65': 'VARCHAR', 'C66': 'VARCHAR', 'C67': 'VARCHAR', 'C68': 'VARCHAR', 'C69': 'VARCHAR', 'C70': 'VARCHAR', 'C71': 'VARCHAR', 'C72': 'VARCHAR', 'C73': 'VARCHAR', 'C74': 'VARCHAR', 'C75': 'VARCHAR', 'C76': 'VARCHAR', 'C77': 'VARCHAR', 'C78': 'VARCHAR', 'C79': 'VARCHAR', 'C80': 'VARCHAR', 'C81': 'VARCHAR', 'C82': 'VARCHAR', 'C83': 'VARCHAR', 'C84': 'VARCHAR', 'C85': 'VARCHAR', 'C86': 'VARCHAR', 'C87': 'VARCHAR', 'C88': 'VARCHAR', 'C89': 'VARCHAR', 'C90': 'VARCHAR', 'C91': 'VARCHAR', 'C92': 'VARCHAR', 'C93': 'VARCHAR', 'C94': 'VARCHAR', 'C95': 'VARCHAR', 'C96': 'VARCHAR', 'C97': 'VARCHAR', 'C98': 'VARCHAR', 'C99': 'VARCHAR', 'C100': 'VARCHAR', 'C101': 'VARCHAR', 'C102': 'VARCHAR', 'C103': 'VARCHAR', 'C104': 'VARCHAR', 'C105': 'VARCHAR', 'C106': 'VARCHAR', 'C107': 'VARCHAR', 'C108': 'VARCHAR', 'C109': 'VARCHAR', 'C110': 'VARCHAR', 'C111': 'VARCHAR', 'C112': 'VARCHAR', 'C113': 'VARCHAR', 'C114': 'VARCHAR', 'C115': 'VARCHAR', 'C116': 'VARCHAR', 'C117': 'VARCHAR', 'C118': 'VARCHAR', 'C119': 'VARCHAR', 'C120': 'VARCHAR', 'C121': 'VARCHAR', 'C122': 'VARCHAR', 'C123': 'VARCHAR', 'C124': 'VARCHAR', 'C125': 'VARCHAR', 'C126': 'VARCHAR', 'C127': 'VARCHAR', 'C128': 'VARCHAR', 'C129': 'VARCHAR', 'C130': 'VARCHAR'}, ignore_errors = TRUE, auto_detect = FALSE);

SELECT * FROM READ_CSV("data/csv/bug_10283.csv", Skip = 1, header = 0, sample_size = -1, all_varchar = 1, columns = {'C1': 'VARCHAR', 'C2': 'VARCHAR', 'C3': 'VARCHAR', 'C4': 'VARCHAR', 'C5': 'VARCHAR', 'C6': 'VARCHAR', 'C7': 'VARCHAR', 'C8': 'VARCHAR', 'C9': 'VARCHAR', 'C10': 'VARCHAR', 'C11': 'VARCHAR', 'C12': 'VARCHAR', 'C13': 'VARCHAR', 'C14': 'VARCHAR', 'C15': 'VARCHAR', 'C16': 'VARCHAR', 'C17': 'VARCHAR', 'C18': 'VARCHAR', 'C19': 'VARCHAR', 'C20': 'VARCHAR', 'C21': 'VARCHAR', 'C22': 'VARCHAR', 'C23': 'VARCHAR', 'C24': 'VARCHAR', 'C25': 'VARCHAR', 'C26': 'VARCHAR', 'C27': 'VARCHAR', 'C28': 'VARCHAR', 'C29': 'VARCHAR', 'C30': 'VARCHAR', 'C31': 'VARCHAR', 'C32': 'VARCHAR', 'C33': 'VARCHAR', 'C34': 'VARCHAR', 'C35': 'VARCHAR', 'C36': 'VARCHAR', 'C37': 'VARCHAR', 'C38': 'VARCHAR', 'C39': 'VARCHAR', 'C40': 'VARCHAR', 'C41': 'VARCHAR', 'C42': 'VARCHAR', 'C43': 'VARCHAR', 'C44': 'VARCHAR', 'C45': 'VARCHAR', 'C46': 'VARCHAR', 'C47': 'VARCHAR', 'C48': 'VARCHAR', 'C49': 'VARCHAR', 'C50': 'VARCHAR', 'C51': 'VARCHAR', 'C52': 'VARCHAR', 'C53': 'VARCHAR', 'C54': 'VARCHAR', 'C55': 'VARCHAR', 'C56': 'VARCHAR', 'C57': 'VARCHAR', 'C58': 'VARCHAR', 'C59': 'VARCHAR', 'C60': 'VARCHAR', 'C61': 'VARCHAR', 'C62': 'VARCHAR', 'C63': 'VARCHAR', 'C64': 'VARCHAR', 'C65': 'VARCHAR', 'C66': 'VARCHAR', 'C67': 'VARCHAR', 'C68': 'VARCHAR', 'C69': 'VARCHAR', 'C70': 'VARCHAR', 'C71': 'VARCHAR', 'C72': 'VARCHAR', 'C73': 'VARCHAR', 'C74': 'VARCHAR', 'C75': 'VARCHAR', 'C76': 'VARCHAR', 'C77': 'VARCHAR', 'C78': 'VARCHAR', 'C79': 'VARCHAR', 'C80': 'VARCHAR', 'C81': 'VARCHAR', 'C82': 'VARCHAR', 'C83': 'VARCHAR', 'C84': 'VARCHAR', 'C85': 'VARCHAR', 'C86': 'VARCHAR', 'C87': 'VARCHAR', 'C88': 'VARCHAR', 'C89': 'VARCHAR', 'C90': 'VARCHAR', 'C91': 'VARCHAR', 'C92': 'VARCHAR', 'C93': 'VARCHAR', 'C94': 'VARCHAR', 'C95': 'VARCHAR', 'C96': 'VARCHAR', 'C97': 'VARCHAR', 'C98': 'VARCHAR', 'C99': 'VARCHAR', 'C100': 'VARCHAR', 'C101': 'VARCHAR', 'C102': 'VARCHAR', 'C103': 'VARCHAR', 'C104': 'VARCHAR', 'C105': 'VARCHAR', 'C106': 'VARCHAR', 'C107': 'VARCHAR', 'C108': 'VARCHAR', 'C109': 'VARCHAR', 'C110': 'VARCHAR', 'C111': 'VARCHAR', 'C112': 'VARCHAR', 'C113': 'VARCHAR', 'C114': 'VARCHAR', 'C115': 'VARCHAR', 'C116': 'VARCHAR', 'C117': 'VARCHAR', 'C118': 'VARCHAR', 'C119': 'VARCHAR', 'C120': 'VARCHAR', 'C121': 'VARCHAR', 'C122': 'VARCHAR', 'C123': 'VARCHAR', 'C124': 'VARCHAR', 'C125': 'VARCHAR', 'C126': 'VARCHAR', 'C127': 'VARCHAR', 'C128': 'VARCHAR', 'C129': 'VARCHAR', 'C130': 'VARCHAR'}, null_padding = TRUE, auto_detect = FALSE);

SELECT * FROM READ_CSV("data/csv/bug_10283.csv", Skip = 1, header = 0, sample_size = -1, all_varchar = 1, columns = {'C1': 'VARCHAR', 'C2': 'VARCHAR', 'C3': 'VARCHAR', 'C4': 'VARCHAR', 'C5': 'VARCHAR', 'C6': 'VARCHAR', 'C7': 'VARCHAR', 'C8': 'VARCHAR', 'C9': 'VARCHAR', 'C10': 'VARCHAR', 'C11': 'VARCHAR', 'C12': 'VARCHAR', 'C13': 'VARCHAR', 'C14': 'VARCHAR', 'C15': 'VARCHAR', 'C16': 'VARCHAR', 'C17': 'VARCHAR', 'C18': 'VARCHAR', 'C19': 'VARCHAR', 'C20': 'VARCHAR', 'C21': 'VARCHAR', 'C22': 'VARCHAR', 'C23': 'VARCHAR', 'C24': 'VARCHAR', 'C25': 'VARCHAR', 'C26': 'VARCHAR', 'C27': 'VARCHAR', 'C28': 'VARCHAR', 'C29': 'VARCHAR', 'C30': 'VARCHAR', 'C31': 'VARCHAR', 'C32': 'VARCHAR', 'C33': 'VARCHAR', 'C34': 'VARCHAR', 'C35': 'VARCHAR', 'C36': 'VARCHAR', 'C37': 'VARCHAR', 'C38': 'VARCHAR', 'C39': 'VARCHAR', 'C40': 'VARCHAR', 'C41': 'VARCHAR', 'C42': 'VARCHAR', 'C43': 'VARCHAR', 'C44': 'VARCHAR', 'C45': 'VARCHAR', 'C46': 'VARCHAR', 'C47': 'VARCHAR', 'C48': 'VARCHAR', 'C49': 'VARCHAR', 'C50': 'VARCHAR', 'C51': 'VARCHAR', 'C52': 'VARCHAR', 'C53': 'VARCHAR', 'C54': 'VARCHAR', 'C55': 'VARCHAR', 'C56': 'VARCHAR', 'C57': 'VARCHAR', 'C58': 'VARCHAR', 'C59': 'VARCHAR', 'C60': 'VARCHAR', 'C61': 'VARCHAR', 'C62': 'VARCHAR', 'C63': 'VARCHAR', 'C64': 'VARCHAR', 'C65': 'VARCHAR', 'C66': 'VARCHAR', 'C67': 'VARCHAR', 'C68': 'VARCHAR', 'C69': 'VARCHAR', 'C70': 'VARCHAR', 'C71': 'VARCHAR', 'C72': 'VARCHAR', 'C73': 'VARCHAR', 'C74': 'VARCHAR', 'C75': 'VARCHAR', 'C76': 'VARCHAR', 'C77': 'VARCHAR', 'C78': 'VARCHAR', 'C79': 'VARCHAR', 'C80': 'VARCHAR', 'C81': 'VARCHAR', 'C82': 'VARCHAR', 'C83': 'VARCHAR', 'C84': 'VARCHAR', 'C85': 'VARCHAR', 'C86': 'VARCHAR', 'C87': 'VARCHAR', 'C88': 'VARCHAR', 'C89': 'VARCHAR', 'C90': 'VARCHAR', 'C91': 'VARCHAR', 'C92': 'VARCHAR', 'C93': 'VARCHAR', 'C94': 'VARCHAR', 'C95': 'VARCHAR', 'C96': 'VARCHAR', 'C97': 'VARCHAR', 'C98': 'VARCHAR', 'C99': 'VARCHAR', 'C100': 'VARCHAR', 'C101': 'VARCHAR', 'C102': 'VARCHAR', 'C103': 'VARCHAR', 'C104': 'VARCHAR', 'C105': 'VARCHAR', 'C106': 'VARCHAR', 'C107': 'VARCHAR', 'C108': 'VARCHAR', 'C109': 'VARCHAR', 'C110': 'VARCHAR', 'C111': 'VARCHAR', 'C112': 'VARCHAR', 'C113': 'VARCHAR', 'C114': 'VARCHAR', 'C115': 'VARCHAR', 'C116': 'VARCHAR', 'C117': 'VARCHAR', 'C118': 'VARCHAR', 'C119': 'VARCHAR', 'C120': 'VARCHAR', 'C121': 'VARCHAR', 'C122': 'VARCHAR', 'C123': 'VARCHAR', 'C124': 'VARCHAR', 'C125': 'VARCHAR', 'C126': 'VARCHAR', 'C127': 'VARCHAR', 'C128': 'VARCHAR', 'C129': 'VARCHAR', 'C130': 'VARCHAR'}, null_padding = TRUE, ignore_errors = TRUE, auto_detect = FALSE);

SELECT * FROM READ_CSV("data/csv/bug_10283.csv", Skip = 1, header = 0, sample_size = -1, all_varchar = 1, columns = {'C1': 'VARCHAR', 'C2': 'VARCHAR', 'C3': 'VARCHAR', 'C4': 'VARCHAR', 'C5': 'VARCHAR', 'C6': 'VARCHAR', 'C7': 'VARCHAR', 'C8': 'VARCHAR', 'C9': 'VARCHAR', 'C10': 'VARCHAR', 'C11': 'VARCHAR', 'C12': 'VARCHAR', 'C13': 'VARCHAR', 'C14': 'VARCHAR', 'C15': 'VARCHAR', 'C16': 'VARCHAR', 'C17': 'VARCHAR', 'C18': 'VARCHAR', 'C19': 'VARCHAR', 'C20': 'VARCHAR', 'C21': 'VARCHAR', 'C22': 'VARCHAR', 'C23': 'VARCHAR', 'C24': 'VARCHAR', 'C25': 'VARCHAR', 'C26': 'VARCHAR', 'C27': 'VARCHAR', 'C28': 'VARCHAR', 'C29': 'VARCHAR', 'C30': 'VARCHAR', 'C31': 'VARCHAR', 'C32': 'VARCHAR', 'C33': 'VARCHAR', 'C34': 'VARCHAR', 'C35': 'VARCHAR', 'C36': 'VARCHAR', 'C37': 'VARCHAR', 'C38': 'VARCHAR', 'C39': 'VARCHAR', 'C40': 'VARCHAR', 'C41': 'VARCHAR', 'C42': 'VARCHAR', 'C43': 'VARCHAR', 'C44': 'VARCHAR', 'C45': 'VARCHAR', 'C46': 'VARCHAR', 'C47': 'VARCHAR', 'C48': 'VARCHAR', 'C49': 'VARCHAR', 'C50': 'VARCHAR', 'C51': 'VARCHAR', 'C52': 'VARCHAR', 'C53': 'VARCHAR', 'C54': 'VARCHAR', 'C55': 'VARCHAR', 'C56': 'VARCHAR', 'C57': 'VARCHAR', 'C58': 'VARCHAR', 'C59': 'VARCHAR', 'C60': 'VARCHAR', 'C61': 'VARCHAR', 'C62': 'VARCHAR', 'C63': 'VARCHAR', 'C64': 'VARCHAR', 'C65': 'VARCHAR', 'C66': 'VARCHAR', 'C67': 'VARCHAR', 'C68': 'VARCHAR', 'C69': 'VARCHAR', 'C70': 'VARCHAR', 'C71': 'VARCHAR', 'C72': 'VARCHAR', 'C73': 'VARCHAR', 'C74': 'VARCHAR', 'C75': 'VARCHAR', 'C76': 'VARCHAR', 'C77': 'VARCHAR', 'C78': 'VARCHAR', 'C79': 'VARCHAR', 'C80': 'VARCHAR', 'C81': 'VARCHAR', 'C82': 'VARCHAR', 'C83': 'VARCHAR', 'C84': 'VARCHAR', 'C85': 'VARCHAR', 'C86': 'VARCHAR', 'C87': 'VARCHAR', 'C88': 'VARCHAR', 'C89': 'VARCHAR', 'C90': 'VARCHAR', 'C91': 'VARCHAR', 'C92': 'VARCHAR', 'C93': 'VARCHAR', 'C94': 'VARCHAR', 'C95': 'VARCHAR', 'C96': 'VARCHAR', 'C97': 'VARCHAR', 'C98': 'VARCHAR', 'C99': 'VARCHAR', 'C100': 'VARCHAR', 'C101': 'VARCHAR', 'C102': 'VARCHAR', 'C103': 'VARCHAR', 'C104': 'VARCHAR', 'C105': 'VARCHAR', 'C106': 'VARCHAR', 'C107': 'VARCHAR', 'C108': 'VARCHAR', 'C109': 'VARCHAR', 'C110': 'VARCHAR', 'C111': 'VARCHAR', 'C112': 'VARCHAR', 'C113': 'VARCHAR', 'C114': 'VARCHAR', 'C115': 'VARCHAR', 'C116': 'VARCHAR', 'C117': 'VARCHAR', 'C118': 'VARCHAR', 'C119': 'VARCHAR', 'C120': 'VARCHAR', 'C121': 'VARCHAR', 'C122': 'VARCHAR', 'C123': 'VARCHAR', 'C124': 'VARCHAR', 'C125': 'VARCHAR', 'C126': 'VARCHAR', 'C127': 'VARCHAR', 'C128': 'VARCHAR', 'C129': 'VARCHAR', 'C130': 'VARCHAR'}, null_padding = TRUE, filename = TRUE, auto_detect = FALSE);

SELECT * FROM READ_CSV("data/csv/bug_10283.csv", Skip = 1, header = 0, sample_size = -1, all_varchar = 1, columns = {'C1': 'VARCHAR', 'C2': 'VARCHAR', 'C3': 'VARCHAR', 'C4': 'VARCHAR', 'C5': 'VARCHAR', 'C6': 'VARCHAR', 'C7': 'VARCHAR', 'C8': 'VARCHAR', 'C9': 'VARCHAR', 'C10': 'VARCHAR', 'C11': 'VARCHAR', 'C12': 'VARCHAR', 'C13': 'VARCHAR', 'C14': 'VARCHAR', 'C15': 'VARCHAR', 'C16': 'VARCHAR', 'C17': 'VARCHAR', 'C18': 'VARCHAR', 'C19': 'VARCHAR', 'C20': 'VARCHAR', 'C21': 'VARCHAR', 'C22': 'VARCHAR', 'C23': 'VARCHAR', 'C24': 'VARCHAR', 'C25': 'VARCHAR', 'C26': 'VARCHAR', 'C27': 'VARCHAR', 'C28': 'VARCHAR', 'C29': 'VARCHAR', 'C30': 'VARCHAR', 'C31': 'VARCHAR', 'C32': 'VARCHAR', 'C33': 'VARCHAR', 'C34': 'VARCHAR', 'C35': 'VARCHAR', 'C36': 'VARCHAR', 'C37': 'VARCHAR', 'C38': 'VARCHAR', 'C39': 'VARCHAR', 'C40': 'VARCHAR', 'C41': 'VARCHAR', 'C42': 'VARCHAR', 'C43': 'VARCHAR', 'C44': 'VARCHAR', 'C45': 'VARCHAR', 'C46': 'VARCHAR', 'C47': 'VARCHAR', 'C48': 'VARCHAR', 'C49': 'VARCHAR', 'C50': 'VARCHAR', 'C51': 'VARCHAR', 'C52': 'VARCHAR', 'C53': 'VARCHAR', 'C54': 'VARCHAR', 'C55': 'VARCHAR', 'C56': 'VARCHAR', 'C57': 'VARCHAR', 'C58': 'VARCHAR', 'C59': 'VARCHAR', 'C60': 'VARCHAR', 'C61': 'VARCHAR', 'C62': 'VARCHAR', 'C63': 'VARCHAR', 'C64': 'VARCHAR', 'C65': 'VARCHAR', 'C66': 'VARCHAR', 'C67': 'VARCHAR', 'C68': 'VARCHAR', 'C69': 'VARCHAR', 'C70': 'VARCHAR', 'C71': 'VARCHAR', 'C72': 'VARCHAR', 'C73': 'VARCHAR', 'C74': 'VARCHAR', 'C75': 'VARCHAR', 'C76': 'VARCHAR', 'C77': 'VARCHAR', 'C78': 'VARCHAR', 'C79': 'VARCHAR', 'C80': 'VARCHAR', 'C81': 'VARCHAR', 'C82': 'VARCHAR', 'C83': 'VARCHAR', 'C84': 'VARCHAR', 'C85': 'VARCHAR', 'C86': 'VARCHAR', 'C87': 'VARCHAR', 'C88': 'VARCHAR', 'C89': 'VARCHAR', 'C90': 'VARCHAR', 'C91': 'VARCHAR', 'C92': 'VARCHAR', 'C93': 'VARCHAR', 'C94': 'VARCHAR', 'C95': 'VARCHAR', 'C96': 'VARCHAR', 'C97': 'VARCHAR', 'C98': 'VARCHAR', 'C99': 'VARCHAR', 'C100': 'VARCHAR', 'C101': 'VARCHAR', 'C102': 'VARCHAR', 'C103': 'VARCHAR', 'C104': 'VARCHAR', 'C105': 'VARCHAR', 'C106': 'VARCHAR', 'C107': 'VARCHAR', 'C108': 'VARCHAR', 'C109': 'VARCHAR', 'C110': 'VARCHAR', 'C111': 'VARCHAR', 'C112': 'VARCHAR', 'C113': 'VARCHAR', 'C114': 'VARCHAR', 'C115': 'VARCHAR', 'C116': 'VARCHAR', 'C117': 'VARCHAR', 'C118': 'VARCHAR', 'C119': 'VARCHAR', 'C120': 'VARCHAR', 'C121': 'VARCHAR', 'C122': 'VARCHAR', 'C123': 'VARCHAR', 'C124': 'VARCHAR', 'C125': 'VARCHAR', 'C126': 'VARCHAR', 'C127': 'VARCHAR', 'C128': 'VARCHAR', 'C129': 'VARCHAR', 'C130': 'VARCHAR'}, null_padding = TRUE, filename = TRUE, auto_detect = FALSE) WHERE C1 = 'D' AND C2 = 'DREGION' AND C4 = '2';

SELECT * FROM READ_CSV("data/csv/bug_10283.csv", Skip = 1, header = 0, sample_size = -1, all_varchar = 1, columns = {'C1': 'VARCHAR', 'C2': 'VARCHAR', 'C3': 'VARCHAR', 'C4': 'VARCHAR', 'C5': 'VARCHAR', 'C6': 'VARCHAR', 'C7': 'VARCHAR', 'C8': 'VARCHAR', 'C9': 'VARCHAR', 'C10': 'VARCHAR', 'C11': 'VARCHAR', 'C12': 'VARCHAR', 'C13': 'VARCHAR', 'C14': 'VARCHAR', 'C15': 'VARCHAR', 'C16': 'VARCHAR', 'C17': 'VARCHAR', 'C18': 'VARCHAR', 'C19': 'VARCHAR', 'C20': 'VARCHAR', 'C21': 'VARCHAR', 'C22': 'VARCHAR', 'C23': 'VARCHAR', 'C24': 'VARCHAR', 'C25': 'VARCHAR', 'C26': 'VARCHAR', 'C27': 'VARCHAR', 'C28': 'VARCHAR', 'C29': 'VARCHAR', 'C30': 'VARCHAR', 'C31': 'VARCHAR', 'C32': 'VARCHAR', 'C33': 'VARCHAR', 'C34': 'VARCHAR', 'C35': 'VARCHAR', 'C36': 'VARCHAR', 'C37': 'VARCHAR', 'C38': 'VARCHAR', 'C39': 'VARCHAR', 'C40': 'VARCHAR', 'C41': 'VARCHAR', 'C42': 'VARCHAR', 'C43': 'VARCHAR', 'C44': 'VARCHAR', 'C45': 'VARCHAR', 'C46': 'VARCHAR', 'C47': 'VARCHAR', 'C48': 'VARCHAR', 'C49': 'VARCHAR', 'C50': 'VARCHAR', 'C51': 'VARCHAR', 'C52': 'VARCHAR', 'C53': 'VARCHAR', 'C54': 'VARCHAR', 'C55': 'VARCHAR', 'C56': 'VARCHAR', 'C57': 'VARCHAR', 'C58': 'VARCHAR', 'C59': 'VARCHAR', 'C60': 'VARCHAR', 'C61': 'VARCHAR', 'C62': 'VARCHAR', 'C63': 'VARCHAR', 'C64': 'VARCHAR', 'C65': 'VARCHAR', 'C66': 'VARCHAR', 'C67': 'VARCHAR', 'C68': 'VARCHAR', 'C69': 'VARCHAR', 'C70': 'VARCHAR', 'C71': 'VARCHAR', 'C72': 'VARCHAR', 'C73': 'VARCHAR', 'C74': 'VARCHAR', 'C75': 'VARCHAR', 'C76': 'VARCHAR', 'C77': 'VARCHAR', 'C78': 'VARCHAR', 'C79': 'VARCHAR', 'C80': 'VARCHAR', 'C81': 'VARCHAR', 'C82': 'VARCHAR', 'C83': 'VARCHAR', 'C84': 'VARCHAR', 'C85': 'VARCHAR', 'C86': 'VARCHAR', 'C87': 'VARCHAR', 'C88': 'VARCHAR', 'C89': 'VARCHAR', 'C90': 'VARCHAR', 'C91': 'VARCHAR', 'C92': 'VARCHAR', 'C93': 'VARCHAR', 'C94': 'VARCHAR', 'C95': 'VARCHAR', 'C96': 'VARCHAR', 'C97': 'VARCHAR', 'C98': 'VARCHAR', 'C99': 'VARCHAR', 'C100': 'VARCHAR', 'C101': 'VARCHAR', 'C102': 'VARCHAR', 'C103': 'VARCHAR', 'C104': 'VARCHAR', 'C105': 'VARCHAR', 'C106': 'VARCHAR', 'C107': 'VARCHAR', 'C108': 'VARCHAR', 'C109': 'VARCHAR', 'C110': 'VARCHAR', 'C111': 'VARCHAR', 'C112': 'VARCHAR', 'C113': 'VARCHAR', 'C114': 'VARCHAR', 'C115': 'VARCHAR', 'C116': 'VARCHAR', 'C117': 'VARCHAR', 'C118': 'VARCHAR', 'C119': 'VARCHAR', 'C120': 'VARCHAR', 'C121': 'VARCHAR', 'C122': 'VARCHAR', 'C123': 'VARCHAR', 'C124': 'VARCHAR', 'C125': 'VARCHAR', 'C126': 'VARCHAR', 'C127': 'VARCHAR', 'C128': 'VARCHAR', 'C129': 'VARCHAR', 'C130': 'VARCHAR'}, null_padding = TRUE, filename = TRUE, ignore_errors = TRUE, auto_detect = FALSE) WHERE C1 = 'D' AND C2 = 'DREGION' AND C4 = '2';

PRAGMA enable_verification;

CREATE TABLE t1 AS SELECT * FROM READ_CSV_AUTO('data/csv/test/issue2518.csv', header = FALSE, columns = {'rsID': 'INT', 'CHR': 'VARCHAR', 'POS': 'INT', 'REFB': 'VARCHAR', 'ALTB': 'VARCHAR'}, auto_detect = FALSE);

SELECT rsID, chr, pos, refb, altb FROM t1;

CREATE TABLE t2 AS SELECT * FROM READ_CSV_AUTO('data/csv/test/issue2518.csv', header = FALSE, columns = {'rsID': 'INT', 'CHR': 'VARCHAR', 'POS': 'INT', 'REFB': 'VARCHAR', 'ALTB': 'VARCHAR'}, AUTO_DETECT = 0);

SELECT rsID, chr, pos, refb, altb FROM t2;

CREATE TABLE t3 AS SELECT * FROM READ_CSV_AUTO('data/csv/test/issue2518.csv', columns = {'rsID': 'INT', 'CHR': 'VARCHAR', 'POS': 'INT', 'REFB': 'VARCHAR', 'ALTB': 'VARCHAR'}, auto_detect = FALSE);

SELECT rsID, chr, pos, refb, altb FROM t3;

PRAGMA enable_verification;

CREATE TABLE test (a INT, b INT, c TEXT);

COPY test FROM 'data/csv/test/test.csv';

PRAGMA enable_verification;

PRAGMA enable_verification;

COPY (SELECT * FROM RANGE(0, 5) AS t(i)) TO '__TEST_DIR__/copy_to_overwrite.csv' WITH (HEADER);

SELECT * FROM "__TEST_DIR__/copy_to_overwrite.csv";

COPY (SELECT * FROM RANGE(5, 10) AS t(i)) TO '__TEST_DIR__/copy_to_overwrite.csv' WITH (HEADER);

SELECT * FROM "__TEST_DIR__/copy_to_overwrite.csv";

COPY (SELECT * FROM RANGE(0, 5) AS t(i)) TO '__TEST_DIR__/copy_to_overwrite.csv.gz' WITH (HEADER);

SELECT * FROM "__TEST_DIR__/copy_to_overwrite.csv.gz";

COPY (SELECT * FROM RANGE(5, 10) AS t(i)) TO '__TEST_DIR__/copy_to_overwrite.csv.gz' WITH (HEADER);

SELECT * FROM "__TEST_DIR__/copy_to_overwrite.csv.gz";

PRAGMA enable_verification;

CREATE TABLE sales (salesid INT NOT NULL PRIMARY KEY, listid INT NOT NULL, sellerid INT NOT NULL, buyerid INT NOT NULL, eventid INT NOT NULL, dateid SMALLINT NOT NULL, qtysold SMALLINT NOT NULL, pricepaid DECIMAL(8, 2), commission DECIMAL(8, 2), saletime TIMESTAMP);

PRAGMA enable_verification;

CREATE TABLE decimal_separators AS SELECT * FROM READ_CSV_AUTO('data/csv/decimal_separators/decimal_separators.csv', column_types = {'commas': 'double', 'periods': 'double'}, delim = ';', decimal_separator = ',');

CREATE TABLE decimal_separators AS SELECT * FROM READ_CSV_AUTO('data/csv/decimal_separators/decimal_separators.csv', column_types = {'commas': 'double'}, delim = ';', decimal_separator = ',');

SELECT commas, periods FROM decimal_separators;

SELECT TYPEOF(commas), TYPEOF(periods) FROM decimal_separators LIMIT 1;

CREATE TABLE decimal_separators2 AS SELECT * FROM READ_CSV_AUTO('data/csv/decimal_separators/decimal_separators.csv', column_types = {'commas': 'decimal', 'periods': 'decimal'}, delim = ';', decimal_separator = '.');

CREATE TABLE decimal_separators2 AS SELECT * FROM READ_CSV_AUTO('data/csv/decimal_separators/decimal_separators.csv', column_types = {'commas': 'float', 'periods': 'decimal'}, delim = ';', decimal_separator = '.');

CREATE TABLE decimal_separators2 AS SELECT * FROM READ_CSV_AUTO('data/csv/decimal_separators/decimal_separators.csv', column_types = {'commas': 'decimal'}, delim = ';', decimal_separator = ',');

SELECT commas, periods FROM decimal_separators2;

SELECT TYPEOF(commas), TYPEOF(periods) FROM decimal_separators2 LIMIT 1;

CREATE TABLE decimal_separators3 AS SELECT * FROM READ_CSV_AUTO('data/csv/decimal_separators/decimal_separators.csv', column_types = {'periods': 'decimal'}, delim = ';');

SELECT commas, periods FROM decimal_separators3;

CREATE TABLE decimal_separators4 AS SELECT * FROM READ_CSV_AUTO('data/csv/decimal_separators/decimal_separators_csv.csv', column_types = {'commas': 'double'}, quote = '"', delim = ',', decimal_separator = ',');

SELECT commas, periods FROM decimal_separators4;

SELECT TYPEOF(commas), TYPEOF(periods) FROM decimal_separators4 LIMIT 1;

SELECT * FROM READ_CSV_AUTO('data/csv/decimal_separators/invalid_char.csv', column_types = {'foo': 'double'}, decimal_separator = 'ö');

SELECT * FROM READ_CSV_AUTO('data/csv/decimal_separators/mixed_format_fail.csv', column_types = {'foo': 'double'}, decimal_separator = ',', skip = 0);

PRAGMA enable_verification;

SELECT TYPEOF(Year), TYPEOF(Quarter) FROM "data/csv/real/ontime_sample.csv" LIMIT 1;

SELECT TYPEOF(Year), TYPEOF(Quarter) FROM READ_CSV_AUTO('data/csv/real/ontime_sample.csv', dtypes = {'Quarter': 'TINYINT'}) LIMIT 1;

SELECT TYPEOF(Year), TYPEOF(Quarter) FROM READ_CSV_AUTO('data/csv/real/ontime_sample.csv', dtypes = {'quArTeR': 'TINYINT'}) LIMIT 1;

SELECT TYPEOF(Year), TYPEOF(Quarter) FROM READ_CSV_AUTO('data/csv/real/ontime_sample.csv', dtypes = ['INT', 'TINYINT']) LIMIT 1;

SELECT * FROM READ_CSV_AUTO('data/csv/real/ontime_sample.csv', dtypes = ['INT'], column_types = {'Quarter': 'TINYINT'}) LIMIT 1;

SELECT * FROM READ_CSV_AUTO('data/csv/real/ontime_sample.csv', dtypes = [42]) LIMIT 1;

SELECT * FROM READ_CSV_AUTO('data/csv/real/ontime_sample.csv', dtypes = ['unknown_type']) LIMIT 1;

SELECT * FROM READ_CSV_AUTO('data/csv/real/ontime_sample.csv', dtypes = {'Quarter': 42}) LIMIT 1;

SELECT * FROM READ_CSV_AUTO('data/csv/auto/int_bol.csv', dtypes = ['varchar', 'varchar', 'varchar']) LIMIT 1;

PRAGMA enable_verification;

CREATE TABLE ubn1 (a BIGINT);

CREATE TABLE ubn2 (a INT, b INT);

CREATE TABLE ubn3 (a INT, c INT);

INSERT INTO ubn1 VALUES (1), (2), (9223372036854775807);

INSERT INTO ubn2 VALUES (3, 4), (5, 6);

INSERT INTO ubn3 VALUES (100, 101), (102, 103);

COPY ubn1 TO '__TEST_DIR__/ubn1.csv' WITH (DELIMITER ',');

COPY ubn2 TO '__TEST_DIR__/ubn2.csv' WITH (DELIMITER ',');

COPY ubn3 TO '__TEST_DIR__/ubn3.csv' WITH (DELIMITER ',');

SELECT TYPEOF(a), TYPEOF(b), TYPEOF(c) FROM READ_CSV_AUTO('__TEST_DIR__/ubn*.csv', UNION_BY_NAME = TRUE, dtypes = {'c': TINYINT}) LIMIT 1;

SELECT TYPEOF(a), TYPEOF(b), TYPEOF(c) FROM READ_CSV_AUTO('__TEST_DIR__/ubn*.csv', UNION_BY_NAME = TRUE, dtypes = {'c': TINYINT, 'A': DOUBLE}) LIMIT 1;

SELECT TYPEOF(a), TYPEOF(b), TYPEOF(c) FROM READ_CSV_AUTO('__TEST_DIR__/ubn*.csv', UNION_BY_NAME = TRUE, dtypes = {'xxx': TINYINT}) LIMIT 1;

SELECT TYPEOF(a), TYPEOF(b), TYPEOF(c) FROM READ_CSV_AUTO('__TEST_DIR__/ubn*.csv', UNION_BY_NAME = TRUE, dtypes = {'c': TINYINT, 'A': DOUBLE, 'C': FLOAT}) LIMIT 1;

SELECT TYPEOF(a), TYPEOF(b), TYPEOF(c) FROM READ_CSV_AUTO('__TEST_DIR__/ubn*.csv', UNION_BY_NAME = TRUE, dtypes = {'c': TINYINT, 'A': DOUBLE, 'xZX': FLOAT}) LIMIT 1;

PRAGMA enable_verification;

CREATE TYPE bla AS ENUM ('Y', 'N');

SELECT * FROM READ_CSV_AUTO('data/csv/response.csv', header = 0);

SELECT * FROM READ_CSV('data/csv/response.csv', columns = {'response': 'bla'}, nullstr = 'Null');

SELECT * FROM READ_CSV_AUTO('data/csv/response.csv', types = {'column0': 'bla'}, nullstr = 'Null', header = 0);

SELECT * FROM READ_CSV_AUTO('data/csv/response.csv', auto_type_candidates = ['bla'], nullstr = 'Null');

PRAGMA enable_verification;

SELECT * FROM READ_CSV('data/csv/15473.csv', delim = ',', columns = {'A': 'VARCHAR', 'B': 'VARCHAR', 'C': 'VARCHAR', 'D': 'VARCHAR'});

COPY (SELECT CAST(i AS TEXT) AS i FROM RANGE(0, 103) AS tbl(i) UNION ALL SELECT 'hello') TO '__TEST_DIR__/int_parse_error.csv' WITH (HEADER, DELIMITER '|');

SELECT * FROM READ_CSV('__TEST_DIR__/int_parse_error.csv', columns = {'i': 'INT'});

SELECT * FROM READ_CSV('__TEST_DIR__/int_parse_error.csv', columns = {'i': 'INT'}, header = TRUE, auto_detect = FALSE);

COPY (SELECT CAST(i AS TEXT) AS i FROM RANGE(0, 103) AS tbl(i) UNION ALL SELECT 'hello') TO '__TEST_DIR__/int_parse_error.csv' WITH (HEADER 0, DELIMITER '|');

SELECT * FROM READ_CSV('__TEST_DIR__/int_parse_error.csv', columns = {'i': 'INT'}, header = FALSE, auto_detect = FALSE);

SELECT * FROM READ_CSV('__TEST_DIR__/int_parse_error.csv', columns = {'i': 'INT'}, header = FALSE, auto_detect = FALSE);

PRAGMA enable_verification;

CREATE TABLE date_test (d DATE);

COPY date_test FROM 'data/csv/test/date.csv';

SET enable_external_access = FALSE;

SELECT * FROM READ_CSV('data/csv/test/date.csv', columns = {'d': 'DATE'});

SELECT * FROM READ_CSV_AUTO('data/csv/test/date.csv');

COPY date_test FROM 'data/csv/test/date.csv';

COPY date_test TO '__TEST_DIR__/date.csv';

SET enable_external_access = TRUE;

SELECT * FROM SNIFF_CSV('data/csv/test/date.csv');

PRAGMA enable_verification;

SELECT * FROM "data/csv/[avalon]_daily-avg.csv";

SELECT * FROM "data/csv/[avxalon]_daily-avg.csv";

PRAGMA enable_verification;

CREATE TABLE test AS SELECT 1 AS id, 'value1' AS value;
CREATE TABLE test2 AS SELECT 2 AS id, 'value2' AS value;

SELECT id, value, REPLACE(filename, '\', '/') FROM READ_CSV_AUTO('data/csv/hive-partitioning/simple/*/*/test.csv', FILENAME = 1) ORDER BY id;

SELECT id, value, part, date FROM READ_CSV_AUTO('data/csv/hive-partitioning/simple/*/*/test.csv', HIVE_PARTITIONING = 1) ORDER BY id;

SELECT id, value, part, date FROM READ_CSV_AUTO('data/csv/hive-partitioning/different_order/*/*/test.csv', HIVE_PARTITIONING = 1) ORDER BY id;

SELECT * FROM READ_CSV_AUTO('data/csv/hive-partitioning/mismatching_names/*/*/test.csv', HIVE_PARTITIONING = 1);

SELECT * FROM READ_CSV_AUTO('data/csv/hive-partitioning/mismatching_count/*/*/test.csv', HIVE_PARTITIONING = 1);

SELECT id, value, part, date FROM READ_CSV_AUTO('data/csv/hive-partitioning/different_order/*/*/test.csv', HIVE_PARTITIONING = 1) WHERE part = 'a';

SELECT id, value, part, date FROM READ_CSV_AUTO('data/csv/hive-partitioning/different_order/*/*/test.csv', HIVE_PARTITIONING = 1) WHERE part = 'b';

SELECT id, value, CAST(part AS INT) AS part_cast, CAST(date AS DATE) AS date_cast FROM READ_CSV_AUTO('data/csv/hive-partitioning/types/*/*/test.csv', HIVE_PARTITIONING = 1) WHERE part_cast > 0 AND part_cast < 5000;

SELECT id, value, CAST(part AS INT) AS part_cast, CAST(date AS DATE) AS date_cast FROM READ_CSV_AUTO('data/csv/hive-partitioning/types/*/*/test.csv', HIVE_PARTITIONING = 1) WHERE part_cast > 5000;

SELECT id, value, CAST(part AS INT) AS part_cast, CAST(date AS DATE) AS date_cast FROM READ_CSV_AUTO('data/csv/hive-partitioning/types/*/*/test.csv', HIVE_PARTITIONING = 1) WHERE date_cast > CAST('2000-01-01' AS DATE) AND date_cast < CAST('2012-12-12' AS DATE);

SELECT id, value, CAST(part AS INT) AS part_cast, CAST(date AS DATE) AS date_cast FROM READ_CSV_AUTO('data/csv/hive-partitioning/types/*/*/test.csv', HIVE_PARTITIONING = 1) WHERE date_cast > CAST('2000-01-01' AS DATE) ORDER BY date_cast;

SELECT id, value, CAST(part AS INT) AS part_cast, CAST(date AS DATE) AS date_cast FROM READ_CSV_AUTO('data/csv/hive-partitioning/types/*/*/test.csv', HIVE_PARTITIONING = 1) WHERE date_cast = CAST('2012-01-01' AS DATE) OR part_cast = 9000 ORDER BY date_cast;

SELECT id, value, CAST(part AS INT) AS part_cast, CAST(date AS DATE) AS date_cast FROM READ_CSV_AUTO('data/csv/hive-partitioning/types/*/*/test.csv', HIVE_PARTITIONING = 1) WHERE (date_cast = CAST('2012-01-01' AS DATE) AND CONCAT(CAST(date_cast AS TEXT), CAST(part_cast AS TEXT)) = '2012-01-011000') OR (part_cast = 9000) ORDER BY date_cast;

EXPLAIN select id, value, CAST(part AS INT) as part_cast, CAST(date AS DATE) as date_cast from read_csv_auto('data/csv/hive-partitioning/types/*/*/test.csv', HIVE_PARTITIONING=1) where (date_cast=CAST('2012-01-01' as DATE) AND concat(date_cast::VARCHAR, part_cast::VARCHAR) == '2012-01-011000') OR (part_cast=9000) ORDER BY date_cast;

SELECT id, value, CAST(part AS INT) AS part_cast, CAST(date AS DATE) AS date_cast FROM READ_CSV_AUTO('data/csv/hive-partitioning/types/*/*/test.csv', HIVE_PARTITIONING = 1) WHERE (date_cast = CAST('2012-01-01' AS DATE) AND CONCAT(CAST(date_cast AS TEXT), CAST(part_cast AS TEXT)) = 'foobar') OR (part_cast = 9000) ORDER BY date_cast;

EXPLAIN select id, value, CAST(part AS INT) as part_cast, CAST(date AS DATE) as date_cast from read_csv_auto('data/csv/hive-partitioning/types/*/*/test.csv', HIVE_PARTITIONING=1) where (date_cast=CAST('2012-01-01' as DATE) AND concat(date_cast::VARCHAR, part_cast::VARCHAR) == 'foobar') OR (part_cast=9000) ORDER BY date_cast;

SELECT id, value, CAST(part AS INT) AS part_cast, CAST(date AS DATE) AS date_cast FROM READ_CSV_AUTO('data/csv/hive-partitioning/types/*/*/test.csv', HIVE_PARTITIONING = 1) WHERE (date_cast = CAST('2012-01-01' AS DATE) AND CONCAT(CAST(date_cast AS TEXT), CAST(part_cast AS TEXT)) = '2012-01-011000') OR (part_cast = 1337) ORDER BY date_cast;

EXPLAIN select id, value, CAST(part AS INT) as part_cast, CAST(date AS DATE) as date_cast from read_csv_auto('data/csv/hive-partitioning/types/*/*/test.csv', HIVE_PARTITIONING=1) where (date_cast=CAST('2012-01-01' as DATE) AND concat(date_cast::VARCHAR, part_cast::VARCHAR) == '2012-01-011000') OR (part_cast=1337) ORDER BY date_cast;

SELECT id, value, CAST(part AS INT) AS part_cast, CAST(date AS DATE) AS date_cast FROM READ_CSV_AUTO('data/csv/hive-partitioning/types/*/*/test.csv', HIVE_PARTITIONING = 1) WHERE (date_cast = CAST('2012-01-01' AS DATE) AND CONCAT(CAST(date_cast AS TEXT), CAST(part_cast AS TEXT)) = 'foobar') OR (part_cast = 1337) ORDER BY date_cast;

EXPLAIN select id, value, CAST(part AS INT) as part_cast, CAST(date AS DATE) as date_cast from read_csv_auto('data/csv/hive-partitioning/types/*/*/test.csv', HIVE_PARTITIONING=1) where (date_cast=CAST('2012-01-01' as DATE) AND concat(date_cast::VARCHAR, part_cast::VARCHAR) == 'foobar') OR (part_cast=1337) ORDER BY date_cast;

SELECT value FROM READ_CSV_AUTO('data/csv/hive-partitioning/different_order/*/*/test.csv', HIVE_PARTITIONING = 1) ORDER BY 1;

SELECT part FROM READ_CSV_AUTO('data/csv/hive-partitioning/different_order/*/*/test.csv', HIVE_PARTITIONING = 1) ORDER BY 1;

SELECT date FROM READ_CSV_AUTO('data/csv/hive-partitioning/different_order/*/*/test.csv', HIVE_PARTITIONING = 1) ORDER BY 1;

PRAGMA enable_verification;

SELECT filename.replace('\', '/').split('/')[-2] FROM READ_CSV_AUTO('data/csv/hive-partitioning/simple/*/*/test.csv', HIVE_PARTITIONING = 1, FILENAME = 1) ORDER BY 1;

SELECT part, filename.replace('\', '/').split('/')[-2], value FROM READ_CSV_AUTO('data/csv/hive-partitioning/simple/*/*/test.csv', HIVE_PARTITIONING = 1, FILENAME = 1) ORDER BY 1;

SELECT part, filename.replace('\', '/').split('/')[-2], value FROM READ_CSV_AUTO('data/csv/hive-partitioning/simple/*/*/test.csv', HIVE_PARTITIONING = 1, FILENAME = 1, UNION_BY_NAME = 1) ORDER BY 1;

SELECT * EXCLUDE (filename) FROM READ_CSV_AUTO('data/csv/hive-partitioning/mismatching_types/*/*.csv', HIVE_PARTITIONING = 1, FILENAME = 1) ORDER BY 1;

SELECT * FROM READ_CSV_AUTO('data/csv/hive-partitioning/mismatching_types/*/*.csv', HIVE_PARTITIONING = 1, UNION_BY_NAME = 1) ORDER BY 1;

SELECT * EXCLUDE (filename), filename.replace('\', '/').split('/')[-2] FROM READ_CSV_AUTO('data/csv/hive-partitioning/mismatching_types/*/*.csv', HIVE_PARTITIONING = 1, FILENAME = 1, UNION_BY_NAME = 1) ORDER BY 1;

SELECT part, filename.replace('\', '/').split('/')[-2], a, b FROM READ_CSV_AUTO('data/csv/hive-partitioning/mismatching_types/*/*.csv', HIVE_PARTITIONING = 1, FILENAME = 1, UNION_BY_NAME = 1) ORDER BY 1;

SELECT * EXCLUDE (filename) FROM READ_CSV_AUTO('data/csv/hive-partitioning/mismatching_types/*/*.csv', HIVE_PARTITIONING = 0, FILENAME = 1, UNION_BY_NAME = 1) ORDER BY 1;

SELECT * FROM READ_CSV_AUTO(['data/csv/hive-partitioning/mismatching_contents/part=1/test.csv', 'data/csv/hive-partitioning/mismatching_contents/part=2/test.csv']) ORDER BY 1;

SELECT a, b, c FROM READ_CSV_AUTO('data/csv/hive-partitioning/mismatching_contents/*/*.csv', UNION_BY_NAME = 1) ORDER BY 2;

SELECT a, b, part, c FROM READ_CSV_AUTO('data/csv/hive-partitioning/mismatching_contents/*/*.csv', UNION_BY_NAME = 1, HIVE_PARTITIONING = 1) ORDER BY 2;

PRAGMA enable_verification;

SET home_directory = '__TEST_DIR__';

CREATE TABLE integers AS SELECT * FROM RANGE(0, 10);

COPY integers TO '__TEST_DIR__/integers.csv' WITH (FORMAT CSV);

SELECT * FROM "~/integers.csv";

CREATE TABLE integers_load (i INT);

COPY integers_load FROM '~/integers.csv';

SELECT * FROM integers_load;

COPY integers TO '__TEST_DIR__/homedir_integers1.csv';

COPY integers TO '__TEST_DIR__/homedir_integers2.csv';

SELECT COUNT(*) FROM "~/homedir_integers*.csv";

PRAGMA enable_verification;

CREATE TABLE integers AS SELECT * FROM RANGE(0, 1000000) AS t(i);

CREATE TABLE integers AS SELECT * FROM RANGE(0, 1000000) AS t(i);

SELECT COUNT(*) FROM "__TEST_DIR__/limit_copy.csv";

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

SET memory_limit = '512MB';

SET threads = 16;

COPY (SELECT i, i // 5 AS j FROM RANGE(0, 100000000) AS t(i)) TO '__TEST_DIR__/integers.csv';

SELECT COUNT(*) FROM "__TEST_DIR__/integers.csv";

COPY (SELECT i, i // 5 AS j FROM RANGE(0, 100000000) AS t(i)) TO '__TEST_DIR__/integers.csv.gz';

SET temp_directory = '';

SET memory_limit = '80MB';

SET threads = 1;

SELECT COUNT(*) FROM "__TEST_DIR__/integers.csv.gz";

PRAGMA enable_verification;

SELECT * FROM READ_CSV('data/csv/header_bug.csv', names = ['col1', 'col1']) LIMIT 1;

SELECT * FROM READ_CSV('data/csv/header_bug.csv', names = ['']) LIMIT 1;

SELECT * FROM READ_CSV('data/csv/header_bug.csv', names = [' ', '  '], header = 0);

SELECT column00, column01, column02, column03 FROM "data/csv/real/lineitem_sample.csv" LIMIT 1;

SELECT l_orderkey, l_partkey, column02, column03 FROM READ_CSV_AUTO('data/csv/real/lineitem_sample.csv', names = ['l_orderkey', 'l_partkey']) LIMIT 1;

SELECT column00, column01, column02, column03 FROM READ_CSV_AUTO('data/csv/real/lineitem_sample.csv', names = []) LIMIT 1;

SELECT l_orderkey, l_partkey, l_commitdate, l_comment FROM READ_CSV_AUTO('data/csv/real/lineitem_sample.csv', column_names = ['l_orderkey', 'l_partkey', 'l_suppkey', 'l_linenumber', 'l_quantity', 'l_extendedprice', 'l_discount', 'l_tax', 'l_returnflag', 'l_linestatus', 'l_shipdate', 'l_commitdate', 'l_receiptdate', 'l_shipinstruct', 'l_shipmode', 'l_comment']) LIMIT 1;

SELECT l_orderkey, l_partkey, l_commitdate, l_comment FROM READ_CSV_AUTO('data/csv/real/lineitem_sample.csv', names = ['l_orderkey', 'l_partkey', 'l_suppkey', 'l_linenumber', 'l_quantity', 'l_extendedprice', 'l_discount', 'l_tax', 'l_returnflag', 'l_linestatus', 'l_shipdate', 'l_commitdate', 'l_receiptdate', 'l_shipinstruct', 'l_shipmode', 'l_comment', 'xx']) LIMIT 1;

SELECT yr, Quarter FROM READ_CSV_AUTO('data/csv/real/ontime_sample.csv', names = ['yr']) LIMIT 1;

SELECT column00, column01, column02, column03 FROM READ_CSV_AUTO('data/csv/real/lineitem_sample.csv', names = NULL) LIMIT 1;

SELECT l_orderkey, l_partkey, column02, column03 FROM READ_CSV_AUTO('data/csv/real/lineitem_sample.csv', names = ['l_orderkey', 'l_partkey'], column_names = ['l_orderkey']) LIMIT 1;

SELECT l_orderkey, l_partkey, column02, column03 FROM READ_CSV_AUTO('data/csv/real/lineitem_sample.csv', names = 42) LIMIT 1;

SELECT l_orderkey, l_partkey, column02, column03 FROM READ_CSV_AUTO('data/csv/real/lineitem_sample.csv', names = ['l_orderkey', 'l_orderkey']) LIMIT 1;

SELECT Columns FROM SNIFF_CSV('data/csv/header.csv', names = ['a']);

SELECT * FROM READ_CSV('data/csv/header.csv', names = ['a']);

SELECT Columns FROM SNIFF_CSV('data/csv/header.csv', names = ['a'], header = FALSE);

SELECT * FROM READ_CSV('data/csv/header.csv', names = ['a'], header = FALSE);

SELECT Columns FROM SNIFF_CSV('data/csv/header_2.csv', names = ['a']);

SELECT * FROM READ_CSV('data/csv/header_2.csv', names = ['a']);

SELECT Columns FROM SNIFF_CSV('data/csv/header_2.csv', names = ['a'], header = FALSE);

SELECT Columns FROM SNIFF_CSV('data/csv/header_2.csv', names = ['a', 'b', 'c', 'd']);

SELECT Columns FROM SNIFF_CSV('data/csv/header_2.csv', names = ['a', 'b', 'c', 'd'], null_padding = TRUE);

SELECT * FROM READ_CSV('data/csv/header_2.csv', names = ['a', 'b', 'c', 'd'], null_padding = TRUE);

PRAGMA enable_verification;

SELECT * FROM READ_CSV('data/csv/null/multiple_nulls.csv', auto_detect = FALSE, delim = ',', quote = '"', escape = '"', skip = 0, header = TRUE, columns = {'name': 'VARCHAR', 'age': 'VARCHAR', 'height': 'VARCHAR'}, nullstr = ['', 'none', 'null']);

SELECT * FROM READ_CSV('data/csv/null/multiple_quoted_nulls.csv', auto_detect = FALSE, delim = ',', quote = '"', escape = '"', skip = 0, header = TRUE, columns = {'name': 'VARCHAR', 'age': 'VARCHAR', 'height': 'VARCHAR'}, nullstr = ['', 'none', 'null']);

SELECT * FROM READ_CSV('data/csv/null/multiple_quoted_nulls.csv', auto_detect = FALSE, delim = ',', quote = '"', escape = '"', skip = 0, header = TRUE, columns = {'name': 'VARCHAR', 'age': 'VARCHAR', 'height': 'VARCHAR'}, nullstr = ['', 'none', 'null'], allow_quoted_nulls = FALSE);

SELECT * FROM READ_CSV('data/csv/null/multiple_nulls.csv', auto_detect = FALSE, delim = ',', quote = '"', escape = '"', skip = 0, header = TRUE, columns = {'name': 'VARCHAR', 'age': 'VARCHAR', 'height': 'VARCHAR'}, nullstr = []);

SELECT * FROM READ_CSV('data/csv/null/multiple_nulls.csv', auto_detect = FALSE, delim = ',', quote = '"', escape = '"', skip = 0, header = TRUE, columns = {'name': 'VARCHAR', 'age': 'VARCHAR', 'height': 'VARCHAR'}, nullstr = ['a', NULL]);

SELECT * FROM READ_CSV('data/csv/null/multiple_nulls.csv', auto_detect = FALSE, delim = ',', quote = '"', escape = '"', skip = 0, header = TRUE, columns = {'name': 'VARCHAR', 'age': 'VARCHAR', 'height': 'VARCHAR'}, nullstr = NULL);

SELECT * FROM READ_CSV('data/csv/null/multiple_nulls.csv', auto_detect = FALSE, delim = ',', quote = '"', escape = '"', skip = 0, header = TRUE, columns = {'name': 'VARCHAR', 'age': 'VARCHAR', 'height': 'VARCHAR'}, nullstr = [42]);

SELECT * FROM READ_CSV('data/csv/null/multiple_quoted_nulls.csv', auto_detect = FALSE, delim = ',', quote = '"', escape = '"', skip = 0, header = TRUE, columns = {'name': 'VARCHAR', 'age': 'VARCHAR', 'height': 'VARCHAR'}, nullstr = ['', ',', 'null'], allow_quoted_nulls = FALSE);

SELECT * FROM READ_CSV('data/csv/null/multiple_quoted_nulls.csv', auto_detect = FALSE, delim = ',', quote = '"', escape = '\', skip = 0, header = TRUE, columns = {'name': 'VARCHAR', 'age': 'VARCHAR', 'height': 'VARCHAR'}, nullstr = ['', '"', 'null'], allow_quoted_nulls = FALSE);

SELECT * FROM READ_CSV('data/csv/null/multiple_quoted_nulls.csv', auto_detect = FALSE, delim = ',', quote = '"', escape = '\', skip = 0, header = TRUE, columns = {'name': 'VARCHAR', 'age': 'VARCHAR', 'height': 'VARCHAR'}, nullstr = ['', '\', 'null'], allow_quoted_nulls = FALSE);

SELECT * FROM READ_CSV('data/csv/null/multiple_quoted_nulls.csv', auto_detect = FALSE, delim = ',', quote = '"', escape = '"', skip = 0, header = TRUE, columns = {'name': 'VARCHAR', 'age': 'VARCHAR', 'height': 'VARCHAR'}, nullstr = ['', 'none', 'null', '', 'none', 'null'], allow_quoted_nulls = FALSE);

SELECT * FROM READ_CSV('data/csv/null/multiple_nulls.csv', auto_detect = FALSE, delim = ',', quote = '"', escape = '"', skip = 0, header = TRUE, columns = {'name': 'VARCHAR', 'age': 'VARCHAR', 'height': 'VARCHAR'}, nullstr = ['', 'none', 'null'], force_not_null = ['height']);

SELECT * FROM READ_CSV('data/csv/null/multiple_nulls.csv', auto_detect = FALSE, delim = ',', quote = '"', escape = '"', skip = 0, header = TRUE, columns = {'name': 'VARCHAR', 'age': 'VARCHAR', 'height': 'VARCHAR'}, nullstr = ['', 'none', 'null'], force_not_null = ['age', 'height']);

SELECT * FROM READ_CSV('data/csv/null/multiple_quoted_nulls.csv', auto_detect = FALSE, delim = ',', quote = '"', escape = '"', skip = 0, header = TRUE, columns = {'name': 'VARCHAR', 'age': 'VARCHAR', 'height': 'VARCHAR'}, nullstr = ['', 'none', 'null'], force_not_null = ['height']);

SELECT * FROM READ_CSV('data/csv/null/multiple_quoted_nulls.csv', auto_detect = TRUE, delim = ',', quote = '"', escape = '"', skip = 0, header = TRUE, nullstr = ['', 'none', 'null'], force_not_null = ['age', 'height'], ALL_VARCHAR = 1);

SELECT height FROM READ_CSV('data/csv/null/multiple_nulls.csv', delim = ',', quote = '"', escape = '"', skip = 0, header = TRUE, nullstr = ['', 'none', 'null']);

SELECT age FROM READ_CSV('data/csv/null/multiple_nulls.csv', delim = ',', quote = '"', escape = '"', skip = 0, header = TRUE, nullstr = ['', 'none', 'null']);

SELECT * FROM READ_CSV('data/csv/null/multiple_nulls.csv', auto_detect = FALSE, delim = ',', quote = '"', escape = '"', skip = 0, header = TRUE, columns = {'name': 'VARCHAR', 'age': 'VARCHAR', 'height': 'VARCHAR'}, nullstr = ['', 'none', 'null'], force_not_null = ['dont_exist']);

CREATE TABLE data (a TEXT, b TEXT, c TEXT);

CREATE TABLE data (a TEXT, b TEXT, c TEXT);

COPY data FROM 'data/csv/null/multiple_nulls.csv' WITH (nullstr NULL, HEADER 1);

COPY data FROM 'data/csv/null/multiple_nulls.csv' WITH (nullstr NULL, HEADER 1);

COPY data FROM 'data/csv/null/multiple_nulls.csv' WITH (nullstr NULL, HEADER 1);

SELECT * FROM data;

SELECT * FROM data;

PRAGMA enable_verification;

SELECT * FROM "data/csv/nullbyte.csv";

SELECT * FROM READ_CSV('data/csv/nullbyte.csv', columns = {'col1': 'VARCHAR', 'col2': 'VARCHAR', 'col3': 'VARCHAR'}, delim = '|');

SELECT * FROM "data/csv/nullbyte_header.csv";

SELECT * FROM READ_CSV('data/csv/nullbyte_header.csv', columns = {'col1': 'VARCHAR', 'col2': 'VARCHAR'}, delim = '|', header = FALSE);

SELECT * FROM READ_CSV('data/csv/nullbyte_header.csv', columns = {'col1': 'VARCHAR', 'col2': 'VARCHAR'}, delim = '|', header = TRUE);

PRAGMA enable_verification;

SELECT * FROM READ_CSV_AUTO('data/csv/nullpadding_header.csv', null_padding = TRUE, comment = '');

SELECT * FROM READ_CSV_AUTO('data/csv/nullpadding_header.csv', null_padding = FALSE, header = 0);

SELECT * FROM READ_CSV_AUTO('data/csv/nullpadding_header.csv', null_padding = FALSE, skip = 1, header = 0, comment = '');

SELECT * FROM READ_CSV_AUTO('data/csv/nullpadding_header.csv', null_padding = FALSE, skip = 2);

SELECT * FROM READ_CSV_AUTO('data/csv/blank_line.csv', null_padding = TRUE);

PRAGMA enable_verification;

CREATE TABLE tbl (i INT, j TEXT, k DATE);

INSERT INTO tbl VALUES (42, 'hello world', NULL), (NULL, NULL, CAST('1992-01-01' AS DATE)), (100, 'thisisalongstring', CAST('2000-01-01' AS DATE));

COPY tbl TO '__TEST_DIR__/projection_pushdown.csv' WITH (FORMAT CSV);

CREATE VIEW v1 AS SELECT * FROM READ_CSV_AUTO('__TEST_DIR__/projection_pushdown.csv', filename = TRUE);

SELECT COUNT(*) FROM v1;

SELECT i, j, k FROM v1 ORDER BY i;

SELECT j FROM v1 ORDER BY j;

SELECT j FROM v1 ORDER BY j;

SELECT filename.replace('\', '/').split('/')[-1] FROM v1 LIMIT 1;

PRAGMA enable_verification;

PRAGMA verify_parallelism;

PRAGMA enable_verification;

COPY (SELECT NULL) TO '__TEST_DIR__/single_null.csv' WITH (HEADER 0);

CREATE TABLE integers (i INT);

COPY integers FROM '__TEST_DIR__/single_null.csv' WITH (HEADER 0);

SELECT * FROM integers;

PRAGMA enable_verification;

SELECT * FROM "data\csv/test/date.csv";

SELECT * FROM GLOB('data/csv\test/*.csv') AS t(g) WHERE g LIKE '%date.csv';

ATTACH '__TEST_DIR__/windows_test.db' AS s1;

CREATE TABLE s1.tbl AS SELECT * FROM RANGE(0, 10) AS t(i);

SELECT SUM(i) FROM s1.tbl;

DETACH s1;

ATTACH '__TEST_DIR__\windows_test.db' AS s1;

SELECT SUM(i) FROM s1.tbl;

PRAGMA enable_verification;

SELECT * FROM READ_CSV_AUTO('data/csv/empty_first_line.csv', delim = ' ');

SELECT * FROM READ_CSV_AUTO('data/csv/empty_first_line.csv', delim = '|', auto_detect = FALSE, columns = {'column00': 'VARCHAR'}, skip = 1);

PRAGMA enable_verification;

CREATE TABLE customer (c_customer_sk INT, c_customer_id TEXT, c_current_cdemo_sk INT, c_current_hdemo_sk INT, c_current_addr_sk INT, c_first_shipto_date_sk INT, c_first_sales_date_sk INT, c_salutation TEXT, c_first_name TEXT, c_last_name TEXT, c_preferred_cust_flag TEXT, c_birth_day INT, c_birth_month INT, c_birth_year INT, c_birth_country TEXT, c_login TEXT, c_email_address TEXT, c_last_review_date_sk INT);

COPY customer FROM 'data/csv/customer.csv' WITH (FORMAT 'csv', quote '"', delimiter ',', header 0);

SELECT * FROM customer;

CREATE TABLE customer_quoted_nulls (c_customer_sk INT, c_customer_id TEXT, c_current_cdemo_sk INT, c_current_hdemo_sk INT, c_current_addr_sk INT, c_first_shipto_date_sk INT, c_first_sales_date_sk INT, c_salutation TEXT, c_first_name TEXT, c_last_name TEXT, c_preferred_cust_flag TEXT, c_birth_day INT, c_birth_month INT, c_birth_year INT, c_birth_country TEXT, c_login TEXT, c_email_address TEXT, c_last_review_date_sk INT);

INSERT INTO customer_quoted_nulls SELECT * FROM READ_CSV_AUTO('data/csv/customer.csv', allow_quoted_nulls = FALSE);

SELECT COUNT(c_login) FROM customer_quoted_nulls;

PRAGMA enable_verification;

COPY (SELECT 1 AS a, 2 AS b) TO '__TEST_DIR__/mismatch_types_except.csv';

SELECT * FROM "__TEST_DIR__/mismatch_types_except.csv" EXCEPT SELECT 'bla' AS a, 1 AS b;

PRAGMA enable_verification;

SELECT * FROM "data/csv/inconsistent_cells.csv";

PRAGMA enable_verification;

SELECT * FROM "data/csv/integer_exponent.csv";

PRAGMA enable_verification;

SELECT * FROM READ_CSV_AUTO('data/csv/comma_decimal_null.csv', SEP = ',', SAMPLE_SIZE = -1, decimal_separator = ',');

SELECT FINANZ_STATO_FSC FROM READ_CSV_AUTO('data/csv/comma_decimal_null.csv', SEP = ',', SAMPLE_SIZE = -1, decimal_separator = ',');

PRAGMA enable_verification;

SELECT * FROM READ_CSV_AUTO('data/csv/issue6764.csv', all_varchar = TRUE, skip = 1, null_padding = TRUE);

SELECT * FROM READ_CSV_AUTO('data/csv/issue6764.csv', all_varchar = TRUE, header = FALSE, skip = 1, null_padding = TRUE);

SELECT * FROM READ_CSV_AUTO('data/csv/issue6764.csv', null_padding = TRUE);

SELECT * FROM READ_CSV_AUTO('data/csv/issue6764.csv', all_varchar = TRUE, null_padding = TRUE);

SELECT * FROM READ_CSV_AUTO('data/csv/issue6764.csv', header = FALSE, null_padding = TRUE);

SELECT * FROM READ_CSV_AUTO('data/csv/issue6764.csv', all_varchar = TRUE, header = FALSE, skip = 0, sep = ',', null_padding = TRUE);

PRAGMA enable_verification;

CREATE TABLE leading_zeros AS SELECT * FROM READ_CSV_AUTO('data/csv/leading_zeros.csv');

SELECT CODGEO FROM leading_zeros LIMIT 1;

SELECT TYPEOF(CODGEO) FROM leading_zeros LIMIT 1;

CREATE TABLE leading_zeros2 AS SELECT * FROM READ_CSV_AUTO('data/csv/leading_zeros2.csv');

SELECT * FROM leading_zeros2;

SELECT TYPEOF(comune), TYPEOF(codice_regione), TYPEOF(codice_provincia) FROM leading_zeros2 LIMIT 1;

SELECT CAST('09001' AS INT);

SELECT CAST('00009001' AS INT);

PRAGMA enable_verification;

CREATE TABLE test (a INT, b TEXT, c INT);

INSERT INTO test SELECT * FROM READ_CSV('data/csv/test/test_long_line.csv', columns = {'a': 'INTEGER', 'b': 'VARCHAR', 'c': 'INTEGER'}, maximum_line_size = 0);

SELECT * FROM READ_CSV_AUTO('data/csv/issue_8320_1.csv.gz');

SELECT * FROM READ_CSV_AUTO('data/csv/issue_8320_2.csv.gz');

SELECT * FROM READ_CSV_AUTO('data/csv/issue_8320_3.csv.gz');

SELECT * FROM READ_CSV_AUTO('data/csv/issue_8320_3.csv.gz', max_line_size = 2097152, buffer_size = 10);

PRAGMA enable_verification;

CREATE TABLE test (a TEXT, b INT, c INT);

INSERT INTO test SELECT * FROM READ_CSV_AUTO('data/csv/nullpadding_big_mixed.csv', null_padding = TRUE);

SELECT COUNT(*) FROM READ_CSV_AUTO('data/csv/nullpadding_big_mixed.csv', null_padding = TRUE);

SELECT COUNT(*) FROM READ_CSV_AUTO('data/csv/nullpadding_big_mixed.csv', null_padding = FALSE, ignore_errors = TRUE);

SELECT COUNT(*) FROM READ_CSV_AUTO('data/csv/nullpadding_big_mixed.csv');

CREATE TABLE test2 (a TEXT, b INT, c INT, d INT);

SELECT COUNT(*) FROM READ_CSV_AUTO('data/csv/nullpadding_commas.csv', null_padding = TRUE);

SELECT COUNT(*) FROM READ_CSV('data/csv/nullpadding_commas.csv', sep = ',', columns = {'a': INT, 'b': INT, 'c': INT, 'd': INT}, ignore_errors = TRUE, null_padding = FALSE);

SELECT COUNT(*) FROM READ_CSV_AUTO('data/csv/nullpadding_big_mixed.csv', buffer_size = 55);

SELECT COUNT(*) FROM READ_CSV_AUTO('data/csv/nullpadding_big_mixed.csv', buffer_size = 55, null_padding = FALSE);

PRAGMA enable_verification;

SELECT * FROM "data/csv/null_terminator.csv";

SELECT * FROM READ_CSV('data/csv/null_terminator.csv', header = 0);

SELECT * FROM READ_CSV('data/csv/null_terminator.csv', header = 0, escape = '');

SELECT * FROM READ_CSV('data/csv/null_terminator.csv', header = 0, delim = '\t', quote = '', escape = '');

CREATE OR REPLACE TABLE t AS (SELECT * FROM (VALUES ('a' || CHR(0) || 'b')) AS t(i));

COPY t TO '__TEST_DIR__/csv2tsv.tsv' WITH (header FALSE, delimiter '\t', escape '', quote '');

SELECT * FROM READ_CSV('__TEST_DIR__/csv2tsv.tsv', header = 0);

PRAGMA enable_verification;

DESCRIBE SELECT * FROM "data/csv/null_mismatch.csv";

PRAGMA enable_verification;

CREATE TABLE phone_numbers AS SELECT * FROM READ_CSV_AUTO('data/csv/phonenumbers.csv');

SELECT phone FROM phone_numbers;

SELECT TYPEOF(phone) FROM phone_numbers LIMIT 1;

PRAGMA enable_verification;

WITH urls AS (SELECT 'a.csv' AS url UNION ALL SELECT 'b.csv') SELECT * FROM READ_CSV_AUTO((SELECT url FROM urls LIMIT 3), delim = ',') WHERE properties.height > -1.0 LIMIT 10;

SELECT * FROM READ_CSV_AUTO(SUM(a) OVER ());

SELECT * FROM READ_CSV_AUTO(SUM(a));

SELECT * FROM READ_CSV_AUTO('a.csv', delim = ',', 42);

PRAGMA enable_verification;

CREATE TABLE globbed_files AS SELECT * FROM GLOB('data/csv/glob/a?/*.csv');

SET VARIABLE csv_files=(SELECT LIST(file ORDER BY file) FROM globbed_files);

SELECT [x.replace('\', '/') FOR x IN GETVARIABLE('csv_files')];

SELECT * FROM READ_CSV(GETVARIABLE('csv_files')) ORDER BY 1;

PRAGMA enable_verification;

CREATE VIEW r AS SELECT * FROM READ_CSV_AUTO('data/csv/hive-partitioning/mismatching_contents/*/*.csv', UNION_BY_NAME = 1, HIVE_PARTITIONING = 1);

WITH RECURSIVE t(i, j) AS (SELECT 1, 0 UNION ALL (SELECT i + 1, j + a FROM t, r WHERE i <= part)) SELECT * FROM t ORDER BY i;

PRAGMA enable_verification;

WITH RECURSIVE base AS (SELECT * FROM "https://github.com/duckdb/duckdb-data/releases/download/v1.0/Real_Estate_Sales_2001-2021_GL.csv" WHERE '2003-01-01' < "date recorded" AND "date recorded" < '2010-01-01' AND "sale amount" > 1000000), chains AS (SELECT town, "date recorded" AS begTS, "date recorded" AS endTS, [{'date': "date recorded", 'amt': "sale amount", 'type': "property type"}] AS chain FROM base WHERE "property type" = 'Condo' UNION ALL SELECT chains.town, chains.begTS, base."date recorded" AS endTS, LIST_APPEND(chains.chain, {'date': "date recorded", 'amt': "sale amount", 'type': "property type"}) AS chain FROM base, chains WHERE base.town = chains.town AND ((LENGTH(chains.chain) = 1 AND LIST_CONTAINS(['Residential', 'Single Family'], base."property type")) OR (LENGTH(chains.chain) = 2 AND base."property type" = 'Condo') OR (LENGTH(chains.chain) = 3 AND LIST_CONTAINS(['Residential', 'Single Family'], base."property type"))) AND chains.endTS < base."date recorded" AND base."date recorded" < (chains.endTS + INTERVAL '6' DAYS)) SELECT * FROM chains ORDER BY ALL;

SET disabled_optimizers = 'expression_rewriter';

WITH RECURSIVE base AS (SELECT * FROM "https://github.com/duckdb/duckdb-data/releases/download/v1.0/Real_Estate_Sales_2001-2021_GL.csv" WHERE '2003-01-01' < "date recorded" AND "date recorded" < '2010-01-01' AND "sale amount" > 1000000), chains AS (SELECT town, "date recorded" AS begTS, "date recorded" AS endTS, [{'date': "date recorded", 'amt': "sale amount", 'type': "property type"}] AS chain FROM base WHERE "property type" = 'Condo' UNION ALL SELECT chains.town, chains.begTS, base."date recorded" AS endTS, LIST_APPEND(chains.chain, {'date': "date recorded", 'amt': "sale amount", 'type': "property type"}) AS chain FROM base, chains WHERE base.town = chains.town AND ((LENGTH(chains.chain) = 1 AND LIST_CONTAINS(['Residential', 'Single Family'], base."property type")) OR (LENGTH(chains.chain) = 2 AND base."property type" = 'Condo') OR (LENGTH(chains.chain) = 3 AND LIST_CONTAINS(['Residential', 'Single Family'], base."property type"))) AND chains.endTS < base."date recorded" AND base."date recorded" < (chains.endTS + INTERVAL '6' DAYS)) SELECT * FROM chains ORDER BY ALL;

PRAGMA enable_verification;

CREATE TABLE r AS SELECT * FROM READ_CSV('data/csv/test/date.csv', columns = {'d': 'DATE'}, header = 0, auto_detect = 0);

WITH RECURSIVE t(i) AS (SELECT 1, CAST(NULL AS DATE) UNION ALL (SELECT i + 1, d FROM t, r WHERE i < 5)) SELECT * FROM t ORDER BY i;

WITH RECURSIVE t(i) AS (SELECT 1, CAST(NULL AS DATE) UNION ALL (SELECT i + 1, d FROM t, READ_CSV('data/csv/test/date.csv', columns = {'d': 'DATE'}, header = 0, auto_detect = 0) WHERE i < 5)) SELECT * FROM t ORDER BY i;

SELECT * FROM READ_CSV_AUTO('data/csv/test/date.csv');

WITH RECURSIVE t(i) AS (SELECT 1, CAST(NULL AS DATE) UNION ALL (SELECT i + 1, d FROM t, READ_CSV('data/csv/test/date.csv', header = 0, auto_detect = 1) AS r(d) WHERE i < 5)) SELECT * FROM t ORDER BY i;

PRAGMA enable_verification;

SELECT * FROM READ_CSV('data/csv/unescaped_quotes/stops.csv');

SELECT * FROM READ_CSV('data/csv/unescaped_quotes/stops.csv', strict_mode = FALSE);

SELECT * FROM READ_CSV('data/csv/unescaped_quotes/unescaped_quote.csv', escape = '"', strict_mode = FALSE);

SELECT * FROM READ_CSV('data/csv/unescaped_quotes/unescaped_quote.csv', strict_mode = FALSE, escape = '', quote = '"', delim = ';');

SELECT * FROM READ_CSV('data/csv/unescaped_quotes/unescaped_quote.csv', strict_mode = FALSE, escape = '', quote = '"', delim = ';');

CREATE TABLE t AS SELECT * FROM READ_CSV('data/csv/unescaped_quotes/unescaped_quote_new_line.csv', strict_mode = FALSE, header = 0);

SELECT COUNT(*) FROM t;

DROP TABLE t;

CREATE TABLE t AS SELECT * FROM READ_CSV('data/csv/unescaped_quotes/unescaped_quote_new_line_rn.csv', strict_mode = FALSE, buffer_size = 20, header = 0, delim = ';');

CREATE TABLE t AS SELECT * FROM READ_CSV('data/csv/unescaped_quotes/unescaped_quote_new_line.csv', strict_mode = FALSE, buffer_size = 30, header = 0, parallel = FALSE);

DROP TABLE t;

CREATE TABLE t AS SELECT * FROM READ_CSV('data/csv/unescaped_quotes/unescaped_quote_new_line_rn.csv', strict_mode = FALSE, buffer_size = 30, header = 0, parallel = FALSE);

SELECT * FROM READ_CSV('data/csv/unescaped_quotes/end_quote.csv', columns = {'a': 'varchar'}, header = FALSE, quote = '"', strict_mode = FALSE);

SELECT * FROM READ_CSV('data/csv/unescaped_quotes/end_quote.csv', columns = {'a': 'varchar'}, header = FALSE, quote = '"', strict_mode = FALSE);

SELECT * FROM READ_CSV('data/csv/unescaped_quotes/end_quote_2.csv', columns = {'a': 'varchar'}, header = FALSE, quote = '"', strict_mode = FALSE);

SELECT * FROM READ_CSV('data/csv/unescaped_quotes/end_quote_3.csv', columns = {'a': 'varchar'}, header = FALSE, quote = '"', strict_mode = FALSE);

SELECT * FROM READ_CSV('data/csv/unescaped_quotes/some_escaped_some_not.csv', columns = {'a': 'varchar'}, header = FALSE, quote = '"', escape = '"', strict_mode = FALSE);

SELECT * FROM READ_CSV('data/csv/unescaped_quotes/end_quote_mixed.csv', columns = {'a': 'varchar'}, header = FALSE, quote = '"', escape = '', strict_mode = FALSE);

PRAGMA enable_verification;

SELECT * FROM "data/csv/struct.csv";

PRAGMA enable_verification;

SELECT * FROM READ_CSV('data/csv/test/struct_padding.csv', columns = {'col': 'STRUCT(val VARCHAR)'}) ORDER BY 1;

PRAGMA enable_verification;

SELECT * FROM "data/csv/date_specificity.csv";

SELECT d FROM "data/csv/special_date.csv";

PRAGMA enable_verification;

SELECT * FROM READ_CSV('https://github.com/duckdb/duckdb-data/releases/download/v1.0/sample_data_12314.csv.gz', HEADER = 1, PARALLEL = FALSE);

SELECT COUNT(*) FROM READ_CSV('https://github.com/duckdb/duckdb-data/releases/download/v1.0/sample_data_12314.csv.gz', HEADER = 1, PARALLEL = FALSE, max_line_size = 2097408);

PRAGMA enable_verification;

SELECT * FROM READ_CSV('data/csv/bug_12596.csv', skip = 1, delim = ',', header = FALSE, columns = {'c1': 'INTEGER', 'c2': 'INTEGER', 'column2': 'VARCHAR'}, null_padding = TRUE);

SELECT * FROM READ_CSV('data/csv/bug_12596.csv', skip = 1, delim = ',', header = FALSE, columns = {'c1': 'INTEGER', 'c2': 'INTEGER', 'column2': 'VARCHAR'}, null_padding = TRUE, parallel = FALSE, auto_detect = FALSE);

SELECT * FROM READ_CSV('data/csv/bug_12596.csv', skip = 1, delim = ',', header = FALSE, columns = {'c1': 'INTEGER', 'c2': 'INTEGER', 'column2': 'VARCHAR'}, null_padding = TRUE, parallel = FALSE);

PRAGMA enable_verification;

SET threads = 1;

SELECT COUNT(*) FROM READ_CSV(['data/csv/drug_exposure.csv', 'data/csv/drug_exposure.csv', 'data/csv/drug_exposure.csv', 'data/csv/drug_exposure.csv', 'data/csv/drug_exposure.csv', 'data/csv/drug_exposure.csv', 'data/csv/drug_exposure.csv', 'data/csv/drug_exposure.csv', 'data/csv/drug_exposure.csv'], buffer_size = 500);

PRAGMA enable_verification;

SELECT columns FROM SNIFF_CSV('data/csv/15473.csv');

SELECT columns FROM SNIFF_CSV('data/csv/15473_time.csv');

SELECT columns FROM SNIFF_CSV('data/csv/15473_timestamp.csv');

SELECT columns FROM SNIFF_CSV('data/csv/15473_date_timestamp.csv');

SELECT columns FROM SNIFF_CSV('data/csv/15473_time_timestamp.csv');

CREATE TABLE t1 AS SELECT '2024/12/12' AS a, '01:02:03' AS b, '2020/01/01 01:02:03' AS c FROM RANGE(0, 10000);

INSERT INTO t1 VALUES ('1', '1', '1');

COPY t1 TO '__TEST_DIR__/date_int.csv' WITH (FORMAT CSV);

SELECT columns FROM SNIFF_CSV('__TEST_DIR__/date_int.csv');

PRAGMA enable_verification;

SELECT field1, field2, MIN(datum) AS firstseen, MAX(datum) AS lastseen FROM READ_CSV('data/csv/hebere.csv.gz', delim = '\t', header = 0, columns = {'field1': varchar, 'field2': varchar, 'datum': varchar}, compression = 'gzip', ignore_errors = 0, auto_detect = FALSE) GROUP BY field1, field2 ORDER BY ALL LIMIT 10;

PRAGMA enable_verification;

SELECT * FROM READ_CSV('data/csv/afl/1.csv', force_not_null = 012 % 0);

SELECT * FROM READ_CSV('data/csv/afl/2.csv', max_line_size = -9151315542319464311);

SELECT * FROM READ_CSV('data/csv/afl/3.csv', max_line_size = -1003718790012071149, ignore_errors = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/4.csv', max_line_size = -432344490485710328, all_varchar = FALSE);

SELECT * FROM READ_CSV('data/csv/afl/5.csv', max_line_size = -68088296696312078);

SELECT * FROM READ_CSV('data/csv/afl/6.csv', buffer_size = 42);

SELECT * FROM READ_CSV('data/csv/afl/7.csv', buffer_size = 42);

SELECT * FROM READ_CSV('data/csv/afl/8.csv', buffer_size = 42);

SELECT * FROM READ_CSV('data/csv/afl/9.csv', buffer_size = 42);

SELECT * FROM READ_CSV('data/csv/afl/10.csv', buffer_size = 42);

SELECT * FROM READ_CSV('data/csv/afl/11.csv', max_line_size = -7987305294711008699, rejects_limit = 42);

SELECT * FROM READ_CSV('data/csv/afl/12.csv', rejects_table = 'd');

SELECT * FROM READ_CSV('data/csv/afl/13.csv', rejects_table = 'd');

SELECT * FROM READ_CSV('data/csv/afl/14.csv', rejects_table = 'd');

SELECT * FROM READ_CSV('data/csv/afl/15.csv', rejects_table = 'd');

SELECT * FROM READ_CSV('data/csv/afl/16.csv', rejects_table = 'd');

SELECT * FROM READ_CSV('data/csv/afl/17.csv', rejects_table = 'd');

SELECT * FROM READ_CSV('data/csv/afl/18.csv', rejects_table = 'd');

SELECT * FROM READ_CSV('data/csv/afl/19.csv', rejects_table = 'd');

SELECT * FROM READ_CSV('data/csv/afl/20.csv', rejects_table = 'd');

SELECT * FROM READ_CSV('data/csv/afl/21.csv', rejects_table = 'd');

SELECT * FROM READ_CSV('data/csv/afl/22.csv', rejects_table = 'd');

SELECT * FROM READ_CSV('data/csv/afl/23.csv', buffer_size = 42);

SELECT * FROM READ_CSV('data/csv/afl/24.csv', buffer_size = 26, delim = ';', header = TRUE, allow_quoted_nulls = TRUE, allow_quoted_nulls = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/25.csv', buffer_size = 734771105608237082, max_line_size = -8825501086615982989, allow_quoted_nulls = TRUE);

PRAGMA enable_verification;

SELECT * FROM READ_CSV_AUTO('data/csv/null_comparison.csv');

SELECT * FROM READ_CSV_AUTO('data/csv/null_comparison.csv', allow_quoted_nulls = FALSE);

SELECT * FROM READ_CSV_AUTO('data/csv/null_comparison.csv', allow_quoted_nulls = TRUE);

PRAGMA enable_verification;

SELECT quote FROM SNIFF_CSV('data/csv/all_quotes.csv', ignore_errors = 1);

PRAGMA enable_verification;

CREATE TABLE date_tests (a DATE);

COPY date_tests FROM 'data/csv/auto_date/date_example_1.csv';

COPY date_tests FROM 'data/csv/auto_date/date_example_2.csv';

SELECT * FROM date_tests;

DROP TABLE date_tests;

CREATE TABLE date_tests (a DATE);

COPY date_tests FROM 'data/csv/auto_date/date_example_1.csv' WITH (dateformat 'AUTO');

COPY date_tests FROM 'data/csv/auto_date/date_example_2.csv' WITH (dateformat 'AUTO');

SELECT * FROM date_tests;

CREATE TABLE stg_device_metadata_with_dates (device_id TEXT, device_name TEXT, device_type TEXT, manufacturer TEXT, model_number TEXT, firmware_version TEXT, installation_date DATE, location_id TEXT, location_name TEXT, facility_zone TEXT, is_active BOOLEAN, expected_lifetime_months INT, maintenance_interval_days INT, last_maintenance_date DATE);

COPY stg_device_metadata_with_dates FROM 'data/csv/auto_date/device_metadata_1.csv' WITH (delimiter ',', skip '1', header 'false');

SELECT * FROM stg_device_metadata_with_dates;

PRAGMA enable_verification;

SELECT * FROM READ_CSV('data/csv/headers/undetected_type.csv', delim = ';');

SELECT * FROM "data/csv/headers/all_varchar.csv";

SELECT * FROM "data/csv/headers/single_line.csv";

SELECT * FROM "data/csv/headers/borked_type.csv";

SELECT * FROM "data/csv/headers/integer.csv";

PRAGMA enable_verification;

CREATE TABLE bgzf AS SELECT * FROM READ_CSV_AUTO('data/csv/test/bgzf.gz');

SELECT COUNT(*) FROM bgzf;

CREATE TABLE concat AS SELECT * FROM READ_CSV_AUTO('data/csv/test/concat.gz');

SELECT COUNT(*) FROM concat;

PRAGMA enable_verification;

CALL dbgen(sf=100);

COPY lineitem TO '__TEST_DIR__/lineitem_100.csv.gz';

SET temp_directory=''
load __TEST_DIR__/lineitem_100_compressed.db;

CREATE TABLE lineitem_2 (l_orderkey INT NOT NULL, l_partkey INT NOT NULL, l_suppkey INT NOT NULL, l_linenumber INT NOT NULL, l_quantity DECIMAL(15, 2) NOT NULL, l_extendedprice DECIMAL(15, 2) NOT NULL, l_discount DECIMAL(15, 2) NOT NULL, l_tax DECIMAL(15, 2) NOT NULL, l_returnflag TEXT NOT NULL, l_linestatus TEXT NOT NULL, l_shipdate DATE NOT NULL, l_commitdate DATE NOT NULL, l_receiptdate DATE NOT NULL, l_shipinstruct TEXT NOT NULL, l_shipmode TEXT NOT NULL, l_comment TEXT NOT NULL);

INSERT INTO lineitem_2 SELECT * FROM "__TEST_DIR__/lineitem_100.csv.gz";

SELECT COUNT(*) FROM lineitem_2;

PRAGMA enable_verification;

CREATE TABLE test (foo INT, bar TEXT, baz TEXT, bam TEXT);

COPY test FROM 'data/csv/test/big_header.csv' WITH (DELIMITER '	', HEADER FALSE, SKIP 2);

SELECT COUNT(bam) FROM test WHERE bam = '!';

INSERT INTO test SELECT * FROM READ_CSV('data/csv/test/big_header.csv', HEADER = FALSE, SKIP = 2, DELIM = '	', columns = {'foo': 'INTEGER', 'bar': 'VARCHAR', 'baz': 'VARCHAR', 'bam': 'VARCHAR'});

SELECT COUNT(bam) FROM test WHERE bam = '!';

INSERT INTO test SELECT * FROM READ_CSV_AUTO('data/csv/test/big_header.csv', HEADER = FALSE, SKIP = 2, DELIM = '	');

SELECT COUNT(bam) FROM test WHERE bam = '!';

PRAGMA enable_verification;

COPY (SELECT 1 AS one, REPEAT('a', 40000000) AS r FROM GENERATE_SERIES(1, 3)) TO '__TEST_DIR__/bigval.csv';

CREATE TABLE t AS SELECT * FROM "__TEST_DIR__/bigval.csv";

CREATE TABLE t AS SELECT * FROM READ_CSV('__TEST_DIR__/bigval.csv', max_line_size = 40000010);

SELECT COUNT(*) FROM t;

PRAGMA enable_verification;

CREATE TABLE blobs (b BLOB);

COPY blobs FROM 'data/csv/test/blob.csv' WITH (HEADER 0, AUTO_DETECT 0);

SELECT b FROM blobs;

COPY blobs TO '__TEST_DIR__/blob.csv';

DELETE FROM blobs;

COPY blobs FROM '__TEST_DIR__/blob.csv';

SELECT b FROM blobs;

COPY blobs TO '__TEST_DIR__/blob.csv' WITH (DELIMITER 'A', QUOTE 'B', ESCAPE 'C');

DELETE FROM blobs;

COPY blobs FROM '__TEST_DIR__/blob.csv' WITH (DELIMITER 'A', QUOTE 'B', ESCAPE 'C');

SELECT b FROM blobs;

PRAGMA enable_verification;

SELECT * FROM READ_CSV('data/csv/bug_10273.csv', header = 0);

PRAGMA enable_verification;

SELECT * FROM READ_CSV('data/csv/num.tsv.gz', quote = '"');

SELECT * FROM READ_CSV('data/csv/num.tsv.gz', quote = '"', strict_mode = FALSE);

PRAGMA enable_verification;

COPY (SELECT 'name' AS name, 1 AS i FROM RANGE(0, 10000000) UNION ALL SELECT 'name', 'hello world' UNION ALL SELECT 'name', 'xxxxx' UNION ALL SELECT 'name', 1 FROM RANGE(0, 10000)) TO '__TEST_DIR__/bigcsv.csv';

SELECT COUNT(*) FROM "__TEST_DIR__/bigcsv.csv";

SELECT COUNT(i), COUNT(*) FROM "__TEST_DIR__/bigcsv.csv";

SELECT name, i, COUNT(*) FROM READ_CSV('__TEST_DIR__/bigcsv.csv') GROUP BY ALL;

SELECT name, i, COUNT(*) FROM READ_CSV('__TEST_DIR__/bigcsv.csv', types = {'i': 'VARCHAR'}) GROUP BY ALL ORDER BY ALL;

PRAGMA enable_verification;

SELECT * FROM READ_CSV('data/csv/inconsistencies/inconsistent_columns_3.csv');

SELECT * FROM READ_CSV('data/csv/inconsistencies/inconsistent_columns_3.csv', null_padding = TRUE);

SELECT * FROM READ_CSV('data/csv/inconsistencies/inconsistent_columns_3.csv', null_padding = TRUE, ignore_errors = TRUE);

SELECT * FROM READ_CSV('data/csv/inconsistencies/inconsistent_columns_6.csv');

SELECT * FROM READ_CSV('data/csv/inconsistencies/inconsistent_columns_6.csv', null_padding = TRUE);

SELECT * FROM READ_CSV('data/csv/inconsistencies/inconsistent_columns_6.csv', null_padding = TRUE, ignore_errors = TRUE);

SELECT * FROM READ_CSV('data/csv/inconsistencies/inconsistent_columns_6.csv', null_padding = TRUE, ignore_errors = TRUE, header = FALSE);

SELECT * FROM READ_CSV('data/csv/inconsistencies/line_with_spaces.csv');

SELECT * FROM READ_CSV('data/csv/inconsistencies/line_with_spaces.csv', null_padding = TRUE, header = FALSE);

SELECT * FROM READ_CSV('data/csv/inconsistencies/line_with_spaces.csv', null_padding = TRUE, ignore_errors = TRUE);

PRAGMA enable_verification;

SELECT * FROM READ_CSV('data/csv/comments/14648.csv', header = FALSE, sep = ',', null_padding = TRUE, comment = '#', ignore_errors = TRUE);

SELECT * FROM READ_CSV('data/csv/comments/14648.csv', header = FALSE, sep = ',', comment = '#', ignore_errors = TRUE);

SELECT * FROM READ_CSV('data/csv/comments/14648.csv', header = FALSE, sep = ',', comment = '#');

SELECT * FROM "data/csv/comments/14635.csv";

SELECT * FROM READ_CSV('data/csv/comments/14635.csv', ignore_errors = TRUE, columns = {'header1': 'VARCHAR', 'header2': 'VARCHAR', 'header3': 'VARCHAR'}, quote = '', escape = '', delim = ',');

SELECT * FROM "data/csv/comments/only_midline.csv";

SELECT * FROM READ_CSV('data/csv/comments/only_midline.csv', comment = '#');

SELECT * FROM "data/csv/comments/mid_line.csv";

SELECT * FROM "data/csv/comments/mid_line_header.csv";

SELECT * FROM "data/csv/comments/mid_line_quote.csv";

SELECT * FROM "data/csv/comments/mid_line_null.csv";

SELECT * FROM "data/csv/comments/simple_mid_line.csv";

SELECT * FROM "data/csv/comments/midline_empty_space.csv";

SELECT * FROM READ_CSV('data/csv/comments/mid_line_invalid.csv', ignore_errors = TRUE, delim = ';', comment = '#', auto_detect = FALSE, columns = {'a': 'integer', 'b': 'integer'}, strict_mode = TRUE);

SELECT * FROM "data/csv/comments/midline_big.csv" LIMIT 5;

SELECT * FROM "data/csv/comments/midline_big.csv" WHERE a = 20;

SELECT COUNT(*) FROM "data/csv/comments/midline_big.csv";

SELECT COUNT(*) FROM "data/csv/comments/midline_big.csv";

PRAGMA enable_verification;

SELECT * FROM READ_CSV('data/csv/comments/mixed_options.csv', delim = ',', comment = ',', auto_detect = FALSE, columns = {'a': 'integer'});

SELECT * FROM READ_CSV('data/csv/comments/mixed_options.csv', quote = ',', comment = ',', escape = '', delim = ';', auto_detect = FALSE, columns = {'a': 'integer'});

SELECT * FROM "data/csv/comments/simple.csv";

SELECT * FROM "data/csv/comments/simple_comma.csv";

SELECT * FROM READ_CSV('data/csv/comments/simple_comma.csv', comment = ',');

SELECT * FROM "data/csv/comments/big.csv" LIMIT 5;

SELECT * FROM "data/csv/comments/big.csv" WHERE a = 20;

SELECT COUNT(*) FROM "data/csv/comments/big.csv";

SELECT * FROM "data/csv/comments/empty_space.csv";

SELECT * FROM "data/csv/comments/empty_space.csv";

SELECT * FROM READ_CSV('data/csv/comments/simple.csv', skip = 2);

SELECT * FROM "data/csv/comments/invalid_rows.csv";

SELECT SkipRows, Comment FROM SNIFF_CSV('data/csv/comments/invalid_rows.csv');

SELECT COUNT(*) FROM "data/csv/comments/error.csv";

SELECT COUNT(*) FROM READ_CSV('data/csv/comments/error.csv', ignore_errors = TRUE);

SELECT COUNT(*) FROM READ_CSV('data/csv/comments/error.csv', ignore_errors = TRUE, comment = '#');

SELECT comment, columns FROM SNIFF_CSV('data/csv/comments/error.csv', ignore_errors = TRUE);

SELECT comment, columns FROM SNIFF_CSV('data/csv/comments/error.csv', ignore_errors = TRUE);

SELECT comment, columns FROM SNIFF_CSV('data/csv/comments/error.csv', ignore_errors = TRUE);

PRAGMA enable_verification;

CREATE TABLE lineitem (a INT NOT NULL, b INT NOT NULL, c INT NOT NULL);

COPY lineitem FROM 'data/csv/test/test_comp.csv.gzz' WITH (COMPRESSION 'gzip', AUTO_DETECT 1);

SELECT COUNT(*) FROM lineitem;

SELECT a, b, c FROM lineitem ORDER BY a;

DROP TABLE lineitem;

CREATE TABLE lineitem (a INT NOT NULL, b INT NOT NULL, c INT NOT NULL);

COPY lineitem FROM 'data/csv/test/test_comp.csv.gz' WITH (COMPRESSION 'infer', AUTO_DETECT 1);

SELECT COUNT(*) FROM lineitem;

SELECT a, b, c FROM lineitem ORDER BY a;

DROP TABLE lineitem;

COPY lineitem FROM 'data/csv/test/test_comp.csv.gz' WITH (COMPRESSION 'none');

CREATE TABLE lineitem AS SELECT * FROM READ_CSV_AUTO('data/csv/test/test_comp.csv.gzz', compression = 'gzip');

SELECT COUNT(*) FROM lineitem;

SELECT a, b, c FROM lineitem ORDER BY a;

DROP TABLE lineitem;

CREATE TABLE lineitem AS SELECT * FROM READ_CSV('data/csv/test/test_comp.csv.gzz', compression = 'gzip', AUTO_DETECT = TRUE);

SELECT COUNT(*) FROM lineitem;

SELECT a, b, c FROM lineitem ORDER BY a;

PRAGMA enable_verification;

CREATE TABLE test (a INT, b INT, c TEXT);

COPY test FROM 'data/csv/test/test.csv';

SELECT COUNT(a), SUM(a) FROM test;

SELECT * FROM test ORDER BY 1 LIMIT 3;

COPY test TO '__TEST_DIR__/test2.csv';

CREATE TABLE test2 (a INT, b INT, c TEXT);

COPY test2 FROM '__TEST_DIR__/test2.csv';

SELECT * FROM test2 ORDER BY 1 LIMIT 3;

CREATE TABLE test_too_few_rows (a INT, b INT, c TEXT, d INT);

COPY test_too_few_rows FROM '__TEST_DIR__/test2.csv' WITH (NULL_PADDING 0);

COPY (SELECT a, b FROM test WHERE a < 4000) TO '__TEST_DIR__/test3.csv';

CREATE TABLE test3 (a INT, b INT);

COPY test3 FROM '__TEST_DIR__/test3.csv';

SELECT * FROM test3 ORDER BY 1 LIMIT 3;

COPY test (a, c) TO '__TEST_DIR__/test4.csv' WITH (DELIMITER ',', HEADER FALSE);

CREATE TABLE test4 (a INT, b INT, c TEXT);

COPY test4 (a, c) FROM '__TEST_DIR__/test4.csv' WITH (DELIM ',');

SELECT * FROM test4 ORDER BY 1 LIMIT 3;

COPY test4 (a, c) FROM '__TEST_DIR__/test4.csv' WITH (SEP ',', HEADER 0.2);

COPY test4 (a, c) FROM '__TEST_DIR__/test4.csv' WITH (SEP);

COPY test4 (a, c) FROM '__TEST_DIR__/test4.csv' WITH (SEP 1);

COPY test4 (a, c) FROM '__TEST_DIR__/test4.csv' WITH (FORMAT 'csv', FORMAT 'some_other_copy_function');

COPY test4 (a, c) FROM '__TEST_DIR__/test4.csv' WITH (FORMAT 'some_other_copy_function', FORMAT 'csv');

COPY test4 (a, c) FROM '__TEST_DIR__/test4.csv' WITH (ESCAPE 1);

COPY test4 (a, c) FROM '__TEST_DIR__/test4.csv' WITH (ESCAPE);

COPY test4 (a, c) FROM '__TEST_DIR__/test4.csv' WITH (QUOTE 1);

COPY test4 (a, c) FROM '__TEST_DIR__/test4.csv' WITH (QUOTE);

COPY test4 (a, c) FROM '__TEST_DIR__/test4.csv' WITH (FORMAT);

COPY test4 (a, c) FROM '__TEST_DIR__/test4.csv' WITH (ENCODING);

COPY test4 (a, c) FROM '__TEST_DIR__/test4.csv' WITH (ENCODING 42);

COPY test4 (a, c) FROM '__TEST_DIR__/test4.csv' WITH (ENCODING 'utf-42');

COPY test4 (a, c) FROM '__TEST_DIR__/test4.csv' WITH (MAGIC '42');

COPY test TO '__TEST_DIR__/test_crlf.csv' WITH (new_line '\r\n');

SELECT COUNT(*) FROM "__TEST_DIR__/test_crlf.csv";

COPY test TO '__TEST_DIR__/test_r.csv' WITH (new_line '\r');

SELECT COUNT(*) FROM "__TEST_DIR__/test_r.csv";

COPY test TO '__TEST_DIR__/test_n.csv' WITH (new_line '\n');

SELECT COUNT(*) FROM "__TEST_DIR__/test_n.csv";

COPY test TO '__TEST_DIR__/test_crlfe.csv' WITH (new_line e'\r\n');

SELECT COUNT(*) FROM "__TEST_DIR__/test_crlfe.csv";

COPY test TO '__TEST_DIR__/test_re.csv' WITH (new_line e'\r');

SELECT COUNT(*) FROM "__TEST_DIR__/test_re.csv";

COPY test TO '__TEST_DIR__/test_en.csv' WITH (new_line e'\n');

SELECT COUNT(*) FROM "__TEST_DIR__/test_en.csv";

DROP TABLE test;

CREATE TABLE test (a INT, b INT, c TEXT);

COPY test FROM 'data/csv/test/test_pipe.csv' WITH (SEPARATOR '|');

COPY test FROM 'data/csv/test/too_many_values.csv';

COPY test FROM 'data/csv/test/test_null_csv.csv' WITH (DELIMITER '|');

COPY test FROM 'data/csv/test/invalid_utf.csv' WITH (DELIMITER '|');

CREATE TABLE empty_table (a INT, b INT, c TEXT);

COPY empty_table FROM 'data/csv/test/empty.csv' WITH (HEADER 0);

CREATE TABLE unterminated (a TEXT);

COPY unterminated FROM 'data/csv/test/unterminated.csv' WITH (HEADER 0, AUTO_DETECT FALSE, strict_mode TRUE);

CREATE TABLE vsize (a INT, b INT, c TEXT);

COPY vsize FROM 'data/csv/test/vsize.csv';

PRAGMA enable_verification;

CREATE TABLE test (a INT, b TEXT DEFAULT ('hello'), c INT DEFAULT (3 + 4));

COPY test (a) FROM 'data/csv/test/test_default.csv';

COPY test (c) FROM 'data/csv/test/test_default.csv';

SELECT COUNT(a), COUNT(b), COUNT(c), MIN(LENGTH(b)), MAX(LENGTH(b)), SUM(a), SUM(c) FROM test;

PRAGMA enable_verification;

CREATE TABLE lineitem (l_orderkey INT NOT NULL, l_partkey INT NOT NULL, l_suppkey INT NOT NULL, l_linenumber INT NOT NULL, l_quantity INT NOT NULL, l_extendedprice DECIMAL(15, 2) NOT NULL, l_discount DECIMAL(15, 2) NOT NULL, l_tax DECIMAL(15, 2) NOT NULL, l_returnflag TEXT NOT NULL, l_linestatus TEXT NOT NULL, l_shipdate DATE NOT NULL, l_commitdate DATE NOT NULL, l_receiptdate DATE NOT NULL, l_shipinstruct TEXT NOT NULL, l_shipmode TEXT NOT NULL, l_comment TEXT NOT NULL);

COPY lineitem FROM 'data/csv/lineitem1k.tbl.gz' WITH (DELIMITER '|');

SELECT COUNT(*) FROM lineitem;

SELECT l_partkey FROM lineitem WHERE l_orderkey = 1 ORDER BY l_linenumber;

COPY lineitem TO '__TEST_DIR__/lineitem1k.csv.gz' WITH (DELIMITER '|', HEADER);

CREATE TABLE lineitem_rt AS SELECT * FROM "__TEST_DIR__/lineitem1k.csv.gz";

CREATE TABLE lineitem_rt AS SELECT * FROM "__TEST_DIR__/lineitem1k.csv.gz";

PRAGMA enable_verification;

CREATE TABLE test (a INT);

COPY test FROM 'data/csv/test/many_empty_lines.csv' WITH (HEADER 0);

SELECT SUM(a) FROM test;

PRAGMA enable_verification;

CREATE TABLE test_null_option (col_a INT, col_b TEXT, col_c TEXT, col_d TEXT, col_e TEXT);

COPY test_null_option FROM 'data/csv/test/test_null_option.csv' WITH (NULL 'NULL');

SELECT * FROM test_null_option ORDER BY 1 LIMIT 3;

DELETE FROM test_null_option;

COPY test_null_option FROM 'data/csv/test/test_null_option.csv' WITH (NULL '');

SELECT * FROM test_null_option ORDER BY 1 LIMIT 3;

DELETE FROM test_null_option;

COPY test_null_option FROM 'data/csv/test/test_null_option.csv' WITH (NULL 'test');

SELECT * FROM test_null_option ORDER BY 1 LIMIT 3;

DELETE FROM test_null_option;

COPY test_null_option FROM 'data/csv/test/test_null_option.csv' WITH (NULL 'null');

SELECT * FROM test_null_option ORDER BY 1 LIMIT 3;

COPY test_null_option FROM 'data/csv/test/test_null_option.csv' WITH (NULL NULL);

COPY test_null_option FROM 'data/csv/test/test_null_option.csv' WITH (NULL 'null,', DELIMITER ',');

COPY test_null_option FROM 'data/csv/test/test_null_option.csv' WITH (DELIMITER 'null', NULL 'null');

COPY test_null_option FROM 'data/csv/test/test_null_option.csv' WITH (DELIMITER 'null', NULL 'nu');

COPY test_null_option FROM 'data/csv/test/test_null_option.csv' WITH (NULL);

CREATE TABLE test_null_option_2 (col_a INT, col_b INT, col_c TEXT, col_d TEXT);

COPY test_null_option_2 FROM 'data/csv/test/test_null_option.csv' WITH (NULL 'null');

COPY test_null_option TO '__TEST_DIR__/test_null_option_2.csv';

DELETE FROM test_null_option;

COPY test_null_option FROM '__TEST_DIR__/test_null_option_2.csv';

SELECT * FROM test_null_option ORDER BY 1 LIMIT 3;

COPY test_null_option TO '__TEST_DIR__/test_null_option_3.csv' WITH (NULL '');

DELETE FROM test_null_option;

COPY test_null_option FROM '__TEST_DIR__/test_null_option_3.csv' WITH (NULL '');

SELECT * FROM test_null_option ORDER BY 1 LIMIT 3;

COPY test_null_option TO '__TEST_DIR__/test_null_option_4.csv' WITH (NULL 'null');

DELETE FROM test_null_option;

COPY test_null_option FROM '__TEST_DIR__/test_null_option_4.csv' WITH (NULL 'null');

SELECT * FROM test_null_option ORDER BY 1 LIMIT 3;

PRAGMA enable_verification;

CREATE TABLE cranlogs (date DATE, time TEXT, size INT, r_version TEXT, r_arch TEXT, r_os TEXT, package TEXT, version TEXT, country TEXT, ip_id INT);

COPY cranlogs FROM 'data/csv/real/tmp2013-06-15.csv.gz' WITH (DELIMITER ',', HEADER);

SELECT * FROM cranlogs LIMIT 5;

PRAGMA enable_verification;

SELECT * FROM READ_CSV_AUTO('data/csv/people.csv');

SELECT * FROM READ_CSV_AUTO('data/csv/people.csv', columns = {'a': 'VARCHAR'}, auto_detect = FALSE, strict_mode = TRUE);

PRAGMA enable_verification;

COPY (SELECT 1 AS a, 2 AS a, 3 AS a) TO '__TEST_DIR__/dupe_cols.csv' WITH (FORMAT CSV, HEADER);

SELECT a, "a_1", "a_2" FROM "__TEST_DIR__/dupe_cols.csv";

COPY (SELECT 1 AS a, 2 AS a, 3 AS "a_1") TO '__TEST_DIR__/dupe_cols.csv' WITH (FORMAT CSV, HEADER);

SELECT a, "a_1", "a_1_1" FROM "__TEST_DIR__/dupe_cols.csv";

COPY (SELECT 1 AS a, 3 AS "a_1", 2 AS a) TO '__TEST_DIR__/dupe_cols.csv' WITH (FORMAT CSV, HEADER);

SELECT a, "a_1", "a_2" FROM "__TEST_DIR__/dupe_cols.csv";

PRAGMA enable_verification;

CREATE TABLE venue (venueid SMALLINT NOT NULL /* PRIMARY KEY */, venuename TEXT, venuecity TEXT, venuestate TEXT, venueseats INT);

COPY venue FROM 'data/csv/venue_pipe.csv';

SELECT * FROM READ_CSV('data/csv/venue_pipe.csv', types = ['SMALLINT', 'VARCHAR', 'VARCHAR', 'VARCHAR', 'INTEGER']);

SELECT * FROM READ_CSV('data/csv/venue_pipe.csv', types = ['SMALLINT', 'VARCHAR', 'VARCHAR', 'VARCHAR', 'INTEGER']);

SELECT * FROM READ_CSV('data/csv/venue_pipe.csv', types = {'venueseats': 'INTEGER'});

SELECT * FROM READ_CSV('data/csv/venue_pipe_big.csv', sample_size = 1);

CREATE TABLE venue_2 (venueid SMALLINT NOT NULL /* PRIMARY KEY */, venuename TEXT, venuecity TEXT, venuestate TEXT, venueseats TEXT);

INSERT INTO venue_2 SELECT * FROM READ_CSV('data/csv/venue_pipe_big.csv', sample_size = 1);

SELECT COUNT(*) FROM venue_2;

DROP TABLE venue_2;

CREATE TABLE venue_2 (venueid SMALLINT NOT NULL /* PRIMARY KEY */, venuename TEXT, venuecity TEXT, venuestate TEXT, venueseats TEXT);

INSERT INTO venue_2 SELECT * FROM READ_CSV('data/csv/venue_pipe_big.csv', sample_size = 1, types = {'venueseats': 'VARCHAR'});

INSERT INTO venue_2 SELECT * FROM READ_CSV('data/csv/venue_pipe_big.csv', sample_size = -1);

COPY venue_2 FROM 'data/csv/venue_pipe_big.csv';

SELECT * FROM READ_CSV('data/csv/venue_pipe_big.csv', sample_size = 1);

INSERT INTO venue SELECT * FROM READ_CSV('data/csv/venue_pipe.csv');

PRAGMA enable_verification;

PREPARE boaz_bug AS from read_csv_auto('https://github.com/duckdb/duckdb/raw/main/data/csv/customer.csv') order by 1;

EXECUTE boaz_bug;

DEALLOCATE AS boaz_bug;

EXECUTE boaz_bug;

PREPARE boaz_bug AS SELECT * from read_csv_auto('https://www.data.gouv.fr/fr/datasets/r/6d186965-f41b-41f3-9b23-88241cc6890c') order by all limit 5;

EXECUTE boaz_bug;

PRAGMA enable_verification;

SELECT * FROM READ_CSV('data/csv/mixed_dates.csv', auto_detect = FALSE, header = TRUE, columns = {'A': 'INTEGER', 'B': 'DATE'}, dateformat = '%m/%d/%Y', ignore_errors = TRUE);

SELECT * FROM READ_CSV('data/csv/mixed_timestamps.csv', auto_detect = FALSE, header = TRUE, columns = {'A': 'INTEGER', 'B': 'TIMESTAMP'}, timestampformat = '%m/%d/%Y %H:%M:%S', ignore_errors = TRUE);

SELECT * FROM READ_CSV('data/csv/mixed_double.csv', auto_detect = FALSE, header = TRUE, columns = {'A': 'INTEGER', 'B': 'FLOAT'}, ignore_errors = TRUE);

SELECT * FROM READ_CSV('data/csv/mixed_double.csv', auto_detect = FALSE, header = TRUE, columns = {'A': 'INTEGER', 'B': 'DOUBLE'}, ignore_errors = TRUE);

SELECT * FROM READ_CSV('data/csv/mixed_double.csv', auto_detect = FALSE, header = TRUE, columns = {'A': 'INTEGER', 'B': 'DECIMAL'}, ignore_errors = TRUE);

SELECT * FROM READ_CSV('data/csv/mixed_decimal.csv', auto_detect = FALSE, header = TRUE, delim = ';', columns = {'A': 'INTEGER', 'B': 'DECIMAL'}, ignore_errors = TRUE);

SELECT * FROM READ_CSV('data/csv/mixed_decimal.csv', auto_detect = FALSE, header = TRUE, delim = ';', decimal_separator = ',', columns = {'A': 'INTEGER', 'B': 'DECIMAL'}, ignore_errors = TRUE);

SELECT * FROM READ_CSV('data/csv/mixed_decimal.csv', auto_detect = FALSE, header = TRUE, delim = '|', decimal_separator = ';', columns = {'A': 'INTEGER', 'B': 'DECIMAL'}, ignore_errors = TRUE);

PRAGMA enable_verification;

CREATE TABLE no_newline (a INT, b INT, c TEXT);

COPY no_newline FROM 'data/csv/test/no_newline.csv';

SELECT * FROM READ_CSV('data/csv/test/no_newline_unicode.csv', delim = '🦆') LIMIT 5;

PRAGMA enable_verification;

SELECT l_returnflag, l_linenumber FROM READ_CSV('data/csv/real/lineitem_sample.csv', delim = '|', header = FALSE, columns = {'l_orderkey': 'INT', 'l_partkey': 'INT', 'l_suppkey': 'INT', 'l_linenumber': 'INT', 'l_quantity': 'INTEGER', 'l_extendedprice': 'DECIMAL(15,2)', 'l_discount': 'DECIMAL(15,2)', 'l_tax': 'DECIMAL(15,2)', 'l_returnflag': 'VARCHAR(1)', 'l_linestatus': 'VARCHAR(1)', 'l_shipdate': 'DATE', 'l_commitdate': 'DATE', 'l_receiptdate': 'DATE', 'l_shipinstruct': 'VARCHAR(25)', 'l_shipmode': 'VARCHAR(10)', 'l_comment': 'VARCHAR(44)'});

SELECT COUNT(*) FROM "data/csv/real/lineitem_sample.csv";

CREATE VIEW lineitem_csv AS SELECT * FROM READ_CSV('data/csv/real/lineitem_sample.csv', delim = '|', header = FALSE, columns = {'l_orderkey': 'INT', 'l_partkey': 'INT', 'l_suppkey': 'INT', 'l_linenumber': 'INT', 'l_quantity': 'INTEGER', 'l_extendedprice': 'DECIMAL(15,2)', 'l_discount': 'DECIMAL(15,2)', 'l_tax': 'DECIMAL(15,2)', 'l_returnflag': 'VARCHAR(1)', 'l_linestatus': 'VARCHAR(1)', 'l_shipdate': 'DATE', 'l_commitdate': 'DATE', 'l_receiptdate': 'DATE', 'l_shipinstruct': 'VARCHAR(25)', 'l_shipmode': 'VARCHAR(10)', 'l_comment': 'VARCHAR(44)'});

CREATE VIEW lineitem_csv_auto AS SELECT * FROM read_csv_auto('data/csv/real/lineitem_sample.csv', header=False) lineitem(l_orderkey, l_partkey, l_suppkey, l_linenumber, l_quantity, l_extendedprice, l_discount, l_tax, l_returnflag, l_linestatus, l_shipdate, l_commitdate, l_receiptdate, l_shipinstruct, l_shipmode, l_comment)
foreach lineitem lineitem_csv lineitem_csv_auto;

CREATE VIEW lineitem_csv_auto AS SELECT * FROM read_csv_auto('data/csv/real/lineitem_sample.csv', header=False) lineitem(l_orderkey, l_partkey, l_suppkey, l_linenumber, l_quantity, l_extendedprice, l_discount, l_tax, l_returnflag, l_linestatus, l_shipdate, l_commitdate, l_receiptdate, l_shipinstruct, l_shipmode, l_comment)
foreach lineitem lineitem_csv lineitem_csv_auto;

CREATE VIEW lineitem_csv_auto AS SELECT * FROM read_csv_auto('data/csv/real/lineitem_sample.csv', header=False) lineitem(l_orderkey, l_partkey, l_suppkey, l_linenumber, l_quantity, l_extendedprice, l_discount, l_tax, l_returnflag, l_linestatus, l_shipdate, l_commitdate, l_receiptdate, l_shipinstruct, l_shipmode, l_comment)
foreach lineitem lineitem_csv lineitem_csv_auto;

CREATE VIEW lineitem_csv_auto AS SELECT * FROM read_csv_auto('data/csv/real/lineitem_sample.csv', header=False) lineitem(l_orderkey, l_partkey, l_suppkey, l_linenumber, l_quantity, l_extendedprice, l_discount, l_tax, l_returnflag, l_linestatus, l_shipdate, l_commitdate, l_receiptdate, l_shipinstruct, l_shipmode, l_comment)
foreach lineitem lineitem_csv lineitem_csv_auto;

CREATE VIEW lineitem_csv_auto AS SELECT * FROM read_csv_auto('data/csv/real/lineitem_sample.csv', header=False) lineitem(l_orderkey, l_partkey, l_suppkey, l_linenumber, l_quantity, l_extendedprice, l_discount, l_tax, l_returnflag, l_linestatus, l_shipdate, l_commitdate, l_receiptdate, l_shipinstruct, l_shipmode, l_comment)
foreach lineitem lineitem_csv lineitem_csv_auto;

SELECT COUNT(*) FROM READ_CSV('data/csv/projection_buffer.csv', quote = '"', escape = '"', buffer_size = 35);

SELECT d, b, a FROM READ_CSV('data/csv/projection_buffer.csv', quote = '"', escape = '"', buffer_size = 35);

PRAGMA enable_verification;

COPY (SELECT CAST('1992-01-01' AS DATE) AS d, 42 AS i, 'hello' AS s) TO '__TEST_DIR__/projection_pushdown_f1.csv' WITH (HEADER, DELIMITER '|');

COPY (SELECT CAST('1993-01-01' AS DATE) AS d, 84 AS i, 'world' AS s) TO '__TEST_DIR__/projection_pushdown_f2.csv' WITH (HEADER, DELIMITER '|');

COPY (SELECT CAST('1994-01-01' AS DATE) AS d, 100 AS i, 'this is a long string' AS s) TO '__TEST_DIR__/projection_pushdown_f3.csv' WITH (HEADER, DELIMITER '|');

CREATE VIEW glob_view AS SELECT * FROM READ_CSV_AUTO('__TEST_DIR__/projection_pushdown_f*.csv');

CREATE VIEW list_view AS SELECT * FROM read_csv_auto(['__TEST_DIR__/projection_pushdown_f1.csv', '__TEST_DIR__/projection_pushdown_f2.csv', '__TEST_DIR__/projection_pushdown_f3.csv'])
foreach tbl glob_view list_view;

CREATE VIEW list_view AS SELECT * FROM read_csv_auto(['__TEST_DIR__/projection_pushdown_f1.csv', '__TEST_DIR__/projection_pushdown_f2.csv', '__TEST_DIR__/projection_pushdown_f3.csv'])
foreach tbl glob_view list_view;

CREATE VIEW list_view AS SELECT * FROM read_csv_auto(['__TEST_DIR__/projection_pushdown_f1.csv', '__TEST_DIR__/projection_pushdown_f2.csv', '__TEST_DIR__/projection_pushdown_f3.csv'])
foreach tbl glob_view list_view;

CREATE VIEW list_view AS SELECT * FROM read_csv_auto(['__TEST_DIR__/projection_pushdown_f1.csv', '__TEST_DIR__/projection_pushdown_f2.csv', '__TEST_DIR__/projection_pushdown_f3.csv'])
foreach tbl glob_view list_view;

CREATE VIEW list_view AS SELECT * FROM read_csv_auto(['__TEST_DIR__/projection_pushdown_f1.csv', '__TEST_DIR__/projection_pushdown_f2.csv', '__TEST_DIR__/projection_pushdown_f3.csv'])
foreach tbl glob_view list_view;

PRAGMA enable_verification;

SELECT * FROM READ_CSV_AUTO('data/csv/real/web_page.csv') ORDER BY 1;

SELECT * FROM READ_CSV_AUTO('data/csv/lineitem1k.tbl.gz') ORDER BY ALL;

SELECT * FROM READ_CSV_AUTO('https://raw.githubusercontent.com/duckdb/duckdb/main/data/csv/real/web_page.csv') ORDER BY 1;

SELECT * FROM READ_CSV_AUTO('https://raw.githubusercontent.com/duckdb/duckdb/main/data/csv/lineitem1k.tbl.gz') ORDER BY ALL;

SELECT * FROM SNIFF_CSV('https://github.com/duckdb/duckdb/raw/main/data/csv/customer.csv?v=1');

PRAGMA enable_verification;
require AS httpfs;

SELECT COUNT(*), MIN(strain), MAX(strain), MIN(STRLEN(sequence)), MAX(STRLEN(sequence)), AVG(STRLEN(sequence)) FROM READ_CSV_AUTO('https://raw.githubusercontent.com/duckdb/duckdb/main/data/csv/sequences.csv.gz', delim = ',');

PRAGMA enable_verification;

COPY (SELECT CAST('2021-05-25 04:55:03.382494 UTC' AS TIMESTAMP) AS ts, CAST('2021-05-25 04:55:03.382494 UTC' AS TIMESTAMPTZ) AS tstz) TO '__TEST_DIR__/timestamps.csv' WITH (timestampformat '%A');

SET TimeZone = 'UTC';

SELECT * FROM READ_CSV('data/csv/timestamp_timezone.csv', columns = {'time': 'timestamptz', 'description': 'varchar'});

SELECT * FROM READ_CSV('data/csv/timestamp_timezone.csv', auto_type_candidates = ['BOOLEAN', 'BIGINT', 'DOUBLE', 'TIME', 'DATE', 'TIMESTAMP', 'TIMESTAMPTZ', 'VARCHAR']);

SELECT * FROM READ_CSV('data/csv/timestamp_timezone.csv', auto_type_candidates = ['BOOLEAN', 'BIGINT', 'DOUBLE', 'TIME', 'DATE', 'TIMESTAMPTZ', 'VARCHAR']);

SELECT columns FROM SNIFF_CSV('data/csv/timestamp_timezone.csv');

SELECT * FROM "data/csv/timestamp_timezone.csv";

SELECT columns FROM SNIFF_CSV('data/csv/timestamp_with_tz.csv');

SELECT * FROM "data/csv/timestamp_with_tz.csv";

CREATE TABLE t AS SELECT '1; 2020-01-01 00:00:00+00' AS ts FROM RANGE(0, 10000);

COPY t TO '__TEST_DIR__/timetz.csv';

SELECT columns FROM SNIFF_CSV('__TEST_DIR__/timetz.csv');

INSERT INTO t VALUES ('2; thisisastring');

COPY t TO '__TEST_DIR__/timetz_2.csv';

SELECT columns FROM SNIFF_CSV('__TEST_DIR__/timetz_2.csv');

PRAGMA enable_verification;

CREATE TABLE date_test (d DATE);

COPY date_test FROM 'data/csv/test/date.csv';

SELECT CAST(d AS TEXT) FROM date_test;

SELECT * FROM READ_CSV('data/csv/custom_date.csv', header = TRUE, dateformat = '%m/%d/%Y, %-I:%-M %p', types = ['BIGINT', 'DATE']);

SELECT * FROM READ_CSV('data/csv/custom_date.csv', header = TRUE, dateformat = '%m/%d/%Y, %-I:%-M %p');

SELECT * FROM READ_CSV('data/csv/custom_date.csv', header = TRUE, timestampformat = '%m/%d/%Y, %-I:%-M %p', types = ['BIGINT', 'TIMESTAMP']);

SELECT * FROM READ_CSV('data/csv/custom_date.csv', header = TRUE, timestampformat = '%m/%d/%Y, %-I:%-M %p');

SELECT * FROM READ_CSV('data/csv/custom_date.csv', header = TRUE, timestampformat = '%m/%d/%Y, %-I:%-M %p');

SELECT * FROM READ_CSV('data/csv/custom_date.csv', header = TRUE, timestampformat = '%m/%d/%Y, %-I:%-M %p');

SELECT * FROM READ_CSV('data/csv/custom_date.csv', header = TRUE, timestampformat = '%m/%d/%Y, %-I:%-M %p');

PRAGMA enable_verification;

CREATE TABLE dates (d DATE);

COPY dates FROM 'data/csv/test/dateformat.csv' WITH (AUTO_DETECT 0, HEADER 0);

COPY dates FROM 'data/csv/test/dateformat.csv' WITH (HEADER 0, DATEFORMAT '%d/%m/%Y');

SELECT * FROM dates;

COPY dates FROM 'data/csv/test/dateformat.csv' WITH (HEADER 0, DATEFORMAT '%m/%d/%Y');

SELECT * FROM dates ORDER BY d;

CREATE TABLE new_dates (d DATE);

COPY dates TO '__TEST_DIR__/dateformat.csv' WITH (HEADER 0, DATEFORMAT '%d/%m/%Y');

COPY new_dates FROM '__TEST_DIR__/dateformat.csv' WITH (HEADER 0, DATEFORMAT '%d/%m/%Y');

SELECT * FROM new_dates ORDER BY 1;

CREATE TABLE timestamps (t TIMESTAMP);

COPY timestamps FROM 'data/csv/test/timestampformat.csv' WITH (HEADER 0, DELIMITER '|', TIMESTAMPFORMAT '%a %d, %B %Y, %I:%M:%S %p');

SELECT * FROM timestamps;

CREATE TABLE new_timestamps (t TIMESTAMP);

COPY timestamps TO '__TEST_DIR__/timestampformat.csv' WITH (HEADER 0, TIMESTAMPFORMAT '%a %d, %B %Y, %I:%M:%S %p');

COPY new_timestamps FROM '__TEST_DIR__/timestampformat.csv' WITH (HEADER 0, TIMESTAMPFORMAT '%a %d, %B %Y, %I:%M:%S %p');

SELECT * FROM new_timestamps ORDER BY 1;

DELETE FROM new_timestamps;

COPY timestamps TO '__TEST_DIR__/timestampformat.csv' WITH (HEADER 0, TIMESTAMPFORMAT ISO);

COPY new_timestamps FROM '__TEST_DIR__/timestampformat.csv' WITH (HEADER 0);

SELECT * FROM new_timestamps ORDER BY 1;

COPY dates FROM 'data/csv/test/dateformat.csv' WITH (HEADER 0, DATEFORMAT '%');

COPY timestamps FROM 'data/csv/test/timestampformat.csv' WITH (HEADER 0, DELIMITER '|', TIMESTAMPFORMAT '%');

SELECT columns FROM SNIFF_CSV('data/csv/dateformat/working.csv', header = TRUE, dateformat = '%d-%b-%Y');

SELECT columns FROM SNIFF_CSV('data/csv/dateformat/not_working.csv', header = TRUE, dateformat = '%d-%b-%Y');

PRAGMA enable_verification;

SELECT * FROM "data/csv/bad_date.csv";

SELECT columns FROM SNIFF_CSV('data/csv/bad_date.csv');

SELECT * FROM "data/csv/bad_date_2.csv";

SELECT columns[1].type FROM SNIFF_CSV('data/csv/bad_date_2.csv');

SELECT columns FROM SNIFF_CSV('data/csv/bad_date_2.csv');

SELECT * FROM "data/csv/conflict_timestamp.csv";

SELECT columns[1].type, columns[2].type FROM SNIFF_CSV('data/csv/conflict_timestamp.csv');

SELECT * FROM "data/csv/bad_date_timestamp_mix.csv";

SELECT columns FROM SNIFF_CSV('data/csv/bad_date_timestamp_mix.csv');

PRAGMA enable_verification;

SELECT * FROM "data/csv/decimal.csv";

SELECT TYPEOF(col_a) FROM "data/csv/decimal.csv";

SELECT * FROM READ_CSV('data/csv/decimal.csv', columns = {'col_a': 'DECIMAL'});

SELECT TYPEOF(col_a) FROM READ_CSV('data/csv/decimal.csv', columns = {'col_a': 'DECIMAL'});

SELECT * FROM READ_CSV('data/csv/decimal.csv', columns = {'col_a': 'DECIMAL(18,15)'});

SELECT TYPEOF(col_a) FROM READ_CSV('data/csv/decimal.csv', columns = {'col_a': 'DECIMAL(18,15)'});

SELECT TYPEOF(col_a) FROM READ_CSV('data/csv/decimal.csv', auto_type_candidates = ['NULL', 'DECIMAL', 'VARCHAR']);

SELECT TYPEOF(col_a) FROM READ_CSV('data/csv/decimal.csv', auto_type_candidates = ['NULL', 'DECIMAL(18,3)', 'DECIMAL(18,15)', 'VARCHAR']);

SELECT TYPEOF(col_a) FROM READ_CSV('data/csv/decimal.csv', auto_type_candidates = ['NULL', 'DECIMAL(18,15)', 'DECIMAL(18,3)', 'VARCHAR']);

SELECT TYPEOF(col_a) FROM READ_CSV('data/csv/decimal.csv', auto_type_candidates = ['NULL', 'DECIMAL(18,15)', 'VARCHAR']);

PRAGMA enable_verification;

SELECT TYPEOF(number) FROM READ_CSV('data/csv/double_trouble.csv', decimal_separator = ',') LIMIT 1;

SELECT TYPEOF(number) FROM READ_CSV('data/csv/double_trouble.csv', decimal_separator = ',', auto_type_candidates = ['FLOAT']) LIMIT 1;

SELECT TYPEOF(number) FROM READ_CSV('data/csv/double_trouble.csv', decimal_separator = ',', auto_type_candidates = ['FLOAT', 'DOUBLE']) LIMIT 1;

SELECT TYPEOF(number) FROM READ_CSV('data/csv/double_trouble.csv', decimal_separator = ',', auto_type_candidates = ['DOUBLE', 'FLOAT']) LIMIT 1;

SELECT TYPEOF(number) FROM READ_CSV('data/csv/double_trouble.csv', decimal_separator = ',', auto_type_candidates = ['DECIMAL']) LIMIT 1;

PRAGMA enable_verification;

CREATE TABLE no_quote (a TEXT, b TEXT);

COPY no_quote FROM 'data/csv/no_quote.csv' WITH (QUOTE '', ESCAPE '', DELIM '|');

SELECT * FROM no_quote;

SELECT * FROM READ_CSV('data/csv/no_quote.csv', auto_detect = 1, quote = '');

PRAGMA enable_verification;

SELECT * FROM READ_CSV('data/csv/test/test.csv', encoding = 'utf-8');

SELECT * FROM READ_CSV('data/csv/test/test.csv', encoding = 'utf-16');

SELECT * FROM READ_CSV('data/csv/test/test.csv', encoding = 'latin-1');

CREATE TABLE test (a INT, b INT, c TEXT);

COPY test FROM 'data/csv/test/test.csv' WITH (encoding 'utf-8');

SELECT * FROM READ_CSV('data/csv/test/test.csv', encoding = 'Shift-JIS');

COPY test TO 'data/csv/test/test.csv' WITH (encoding 'utf-16');

SELECT * FROM READ_CSV('data/csv/encodings/latin1.csv');

DROP TABLE test;

CREATE TABLE test (a TEXT, b INT);

COPY test FROM 'data/csv/encodings/latin1.csv' WITH (encoding 'latin-1');

SELECT * FROM test;

SELECT * FROM READ_CSV('data/csv/encodings/latin1.csv', encoding = 'latin-1');

SELECT * FROM READ_CSV('data/csv/encodings/utf16.csv');

SELECT * FROM READ_CSV('data/csv/encodings/utf16.csv', encoding = 'utf-16');

SELECT * FROM READ_CSV('data/csv/encodings/shift_jis.csv', encoding = 'utf-16');

SELECT * FROM READ_CSV('data/csv/encodings/shift_jis.csv', encoding = 'latin-1');

SELECT * FROM READ_CSV('data/csv/encodings/only_utf16.csv', encoding = 'utf-16', header = 0);

SELECT * FROM READ_CSV('data/csv/encodings/only_utf16.csv', encoding = 'utf-16', header = 0);

SELECT * FROM READ_CSV('data/csv/encodings/only_utf16.csv', encoding = 'utf-16', header = 0);

SELECT * FROM READ_CSV('data/csv/encodings/only_utf16.csv', encoding = 'utf-16', header = 0);

SELECT * FROM READ_CSV('data/csv/encodings/only_utf16.csv', encoding = 'utf-16', header = 0);

SELECT * FROM READ_CSV('data/csv/encodings/only_utf16.csv', encoding = 'utf-16', header = 0);

SELECT * FROM READ_CSV('data/csv/encodings/only_utf16.csv', encoding = 'utf-16', header = 0);

SELECT * FROM READ_CSV('data/csv/encodings/all_latin1.csv', encoding = 'latin-1', header = 0, quote = '', auto_detect = FALSE, columns = {'a': 'varchar'}, delim = '');

SELECT COUNT(*) FROM READ_CSV('data/csv/encodings/all_utf16.csv', encoding = 'utf-16', header = 0, quote = '', auto_detect = FALSE, columns = {'a': 'varchar'}, delim = '');

PRAGMA enable_verification;

CREATE TYPE mood AS ENUM ('happy', 'sad', 'angry');

SELECT * FROM READ_CSV('data/csv/enum_type.csv', types = [mood]);

PRAGMA enable_verification;
require AS tpch;

CALL dbgen(sf=1);

COPY (SELECT * REPLACE (CASE WHEN ROW_NUMBER() OVER () = 1234567 THEN 'thisisnotanumber' ELSE CAST(l_orderkey AS TEXT) END AS l_orderkey) FROM lineitem) TO '__TEST_DIR__/lineitem_malformed.csv';

COPY lineitem FROM '__TEST_DIR__/lineitem_malformed.csv';

PRAGMA enable_verification;

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (42);

INSERT INTO integers VALUES (42);

DROP TABLE integers;

DROP TABLE integers;

SELECT * FROM integers;

PRAGMA enable_verification;

BEGIN;

CREATE TABLE tbl (a TEXT NOT NULL);

INSERT INTO tbl VALUES ('');

INSERT INTO tbl VALUES ('');

abort;

BEGIN;

BEGIN;

BEGIN;

abort;

BEGIN;

CREATE TABLE tbl_2 (a TEXT NOT NULL, b TEXT NOT NULL, c TEXT NOT NULL, d TEXT);

INSERT INTO tbl_2 VALUES ('', '', '', '');

INSERT INTO tbl_2 VALUES ('', '', '', '');

abort;

abort;

SELECT * FROM tbl_2;

PRAGMA enable_verification;

SELECT * FROM READ_CSV('data/csv/extra_delimiters.csv', strict_mode = FALSE, columns = {'a': 'VARCHAR', 'b': 'VARCHAR', 'c': 'VARCHAR'}, auto_detect = FALSE, delim = ',', header = TRUE);

PRAGMA enable_verification;

SELECT column1, column2, column3, filename.replace('\', '/') FROM READ_CSV('data/csv/filename_filter/*.csv', filename = TRUE);

SELECT column1, column2, column3, filename.replace('\', '/') FROM READ_CSV(['data/csv/filename_filter/a.csv', 'data/csv/filename_filter/b.csv', 'data/csv/filename_filter/c.csv', 'data/csv/filename_filter/d.csv'], filename = TRUE) WHERE filename LIKE '%d.csv';

SELECT column1, column2, column3, filename.replace('\', '/') FROM READ_CSV(['data/csv/filename_filter/a.csv', 'data/csv/filename_filter/b.csv', 'data/csv/filename_filter/c.csv', 'data/csv/filename_filter/d.csv'], filename = TRUE, union_by_name = TRUE) WHERE filename LIKE '%d.csv';

SELECT column1, column2, column3, filename.replace('\', '/') FROM READ_CSV('data/csv/filename_filter/*.csv', filename = TRUE, union_by_name = TRUE) WHERE filename LIKE '%d.csv';

PRAGMA enable_verification;

CREATE TABLE test (col_a INT, col_b TEXT, col_c TEXT);

COPY test FROM 'data/csv/test/force_not_null.csv' WITH (FORCE_NOT_NULL (col_b), NULL 'test', HEADER 0, allow_quoted_nulls FALSE);

SELECT * FROM test ORDER BY 1;

DELETE FROM test;

COPY test (col_a, col_b, col_c) FROM 'data/csv/test/force_not_null.csv' WITH (FORCE_NOT_NULL (col_b), NULL 'test', HEADER 0, allow_quoted_nulls FALSE);

SELECT * FROM test ORDER BY 1;

COPY test TO 'data/csv/test/force_not_null.csv' WITH (FORCE_NOT_NULL (col_b), NULL 'test', HEADER 0);

COPY test FROM 'data/csv/test/force_not_null.csv' WITH (FORCE_NOT_NULL, NULL 'test');

COPY test FROM 'data/csv/test/force_not_null.csv' WITH (FORCE_NOT_NULL 42, NULL 'test');

COPY test (col_b, col_a) FROM 'data/csv/test/force_not_null_reordered.csv' WITH (FORCE_NOT_NULL (col_c, col_b));

COPY test FROM 'data/csv/test/force_not_null_reordered.csv' WITH (FORCE_NOT_NULL (col_c, col_d));

COPY test FROM 'data/csv/test/force_not_null.csv' WITH (FORCE_NOT_NULL (col_a), HEADER 0);

COPY test FROM 'data/csv/test/force_not_null_inull.csv' WITH (FORCE_NOT_NULL (col_a), HEADER 0);

PRAGMA enable_verification;

CREATE TABLE test (col_a INT, col_b TEXT, col_c TEXT);

COPY test FROM 'data/csv/test/force_quote.csv' WITH (HEADER 0);

COPY test TO '__TEST_DIR__/test_star.csv' WITH (FORCE_QUOTE *, HEADER 0);

COPY test TO '__TEST_DIR__/test_chosen_columns.csv' WITH (FORCE_QUOTE (col_a, col_c), QUOTE 't', NULL 'ea');

CREATE TABLE test2 (col_a INT, col_b TEXT, col_c TEXT);

COPY test2 FROM '__TEST_DIR__/test_chosen_columns.csv' WITH (QUOTE 't', NULL 'ea');

SELECT * FROM test2;

COPY test (col_b, col_c, col_a) TO '__TEST_DIR__/test_reorder.csv' WITH (FORCE_QUOTE (col_c, col_b), NULL 'test');

CREATE TABLE test3 (col_a INT, col_b TEXT, col_c TEXT);

COPY test3 (col_b, col_c, col_a) FROM '__TEST_DIR__/test_reorder.csv' WITH (NULL 'test');

SELECT * FROM test2;

COPY test (col_b, col_a) TO '__TEST_DIR__/test_reorder.csv' WITH (FORCE_QUOTE (col_c, col_b));

COPY test TO '__TEST_DIR__/test_reorder.csv' WITH (FORCE_QUOTE (col_c, col_d));

COPY test FROM '__TEST_DIR__/test_reorder.csv' WITH (FORCE_QUOTE (col_c, col_d));

COPY test TO '__TEST_DIR__/test_reorder.csv' WITH (FORCE_QUOTE);

COPY test TO '__TEST_DIR__/test_reorder.csv' WITH (FORCE_QUOTE 42);

PRAGMA enable_verification;

CALL dbgen(sf=0.1);

COPY (SELECT l_orderkey, l_partkey, l_suppkey, l_linenumber, l_quantity, l_extendedprice, l_discount, l_tax, l_returnflag, l_linestatus, l_shipdate, l_commitdate, l_receiptdate, l_shipinstruct, l_shipmode, l_comment FROM lineitem LIMIT 10000 OFFSET 0) TO '__TEST_DIR__/lineitem_part1.csv';

COPY (SELECT l_orderkey, l_partkey, l_suppkey, l_linenumber, l_quantity, l_extendedprice, l_tax, l_discount, l_returnflag, l_linestatus, l_shipdate, l_commitdate, l_receiptdate, l_shipinstruct, l_shipmode, l_comment FROM lineitem LIMIT 10000 OFFSET 10000) TO '__TEST_DIR__/lineitem_part2.csv';

COPY (SELECT l_comment, l_orderkey, l_partkey, l_suppkey, l_linenumber, l_quantity, l_extendedprice, l_tax, l_discount, l_returnflag, l_linestatus, l_shipdate, l_commitdate, l_receiptdate, l_shipinstruct, l_shipmode FROM lineitem LIMIT 10000 OFFSET 20000) TO '__TEST_DIR__/lineitem_part3.csv';

COPY (SELECT l_comment, l_orderkey, l_returnflag, l_linestatus, l_shipdate, l_commitdate, l_receiptdate, l_shipinstruct, l_partkey, l_suppkey, l_linenumber, l_quantity, l_extendedprice, l_tax, l_discount, l_shipmode FROM lineitem LIMIT 10000 OFFSET 30000) TO '__TEST_DIR__/lineitem_part4.csv';

COPY (SELECT l_comment, l_orderkey, l_returnflag, l_linestatus, l_shipdate, l_commitdate, l_receiptdate, l_shipinstruct, l_partkey, l_suppkey, l_linenumber, l_quantity, l_extendedprice, l_tax, l_discount, l_shipmode, l_shipmode AS shipmode2 FROM lineitem LIMIT 10000 OFFSET 40000) TO '__TEST_DIR__/lineitem_part5.csv';

CREATE TABLE t AS SELECT * FROM READ_CSV(['__TEST_DIR__/lineitem_part1.csv', '__TEST_DIR__/lineitem_part3.csv']);

SELECT COUNT(*) FROM t;

DROP TABLE t;

CREATE TABLE t AS SELECT * FROM READ_CSV(['__TEST_DIR__/lineitem_part*.csv']);

SELECT COUNT(*) FROM t;

PRAGMA enable_verification;

CREATE TABLE t1 AS SELECT 1 AS a, 1 AS b FROM RANGE(0, 3);

CREATE TABLE t2 (b INT, a INT);

INSERT INTO t2 SELECT NULL AS b, NULL AS a FROM RANGE(0, 30000);

INSERT INTO t2 VALUES (3, 4);

COPY t1 TO '__TEST_DIR__/null_glob_reorder_1.csv';

COPY t2 TO '__TEST_DIR__/null_glob_reorder_2.csv';

SELECT a, b FROM READ_CSV(['__TEST_DIR__/null_glob_reorder_*.csv']) WHERE NOT b IS NULL ORDER BY ALL;

PRAGMA enable_verification;

CREATE TABLE greek_utf8 AS SELECT i, NFC_NORMALIZE(j) AS j, k FROM READ_CSV('data/csv/real/greek_utf8.csv', columns = {'i': 'INTEGER', 'j': 'VARCHAR', 'k': 'INTEGER'}, delim = '|');

SELECT * FROM greek_utf8 ORDER BY 1;

COPY greek_utf8 TO '__TEST_DIR__/greek_utf8.csv' WITH (DELIMITER ' ', HEADER);

DELETE FROM greek_utf8;

SELECT * FROM greek_utf8;

COPY greek_utf8 FROM '__TEST_DIR__/greek_utf8.csv' WITH (DELIMITER ' ', HEADER);

SELECT * FROM greek_utf8 ORDER BY 1;

PRAGMA enable_verification;

SELECT columns FROM SNIFF_CSV('data/csv/headers/escaped_quote.csv');

SELECT columns FROM SNIFF_CSV('data/csv/headers/unescaped_quote.csv');

PRAGMA enable_verification;

SELECT columns FROM SNIFF_CSV('data/csv/header_only.csv', header = TRUE, ignore_errors = TRUE);

SELECT abs_file_name FROM READ_CSV('data/csv/header_only.csv', header = TRUE, ignore_errors = TRUE);

SELECT REGEXP_MATCHES(abs_file_name, 'foo') FROM (SELECT abs_file_name FROM READ_CSV('data/csv/header_only.csv', header = TRUE, ignore_errors = TRUE));

SELECT REGEXP_MATCHES(abs_file_name, 'foo') FROM (SELECT abs_file_name FROM READ_CSV(['data/csv/header_only.csv', 'data/csv/header_only.csv'], header = TRUE, ignore_errors = TRUE));

SELECT REGEXP_MATCHES(abs_file_name, 'foo') FROM (SELECT abs_file_name FROM READ_CSV(['data/csv/header_only.csv', 'data/csv/bool.csv', 'data/csv/header_only.csv'], header = TRUE, ignore_errors = TRUE));

SELECT * FROM READ_CSV('data/csv/hits_problematic.csv', auto_detect = FALSE, delim = ',', quote = '"', escape = '\', new_line = '\n', skip = 0, comment = '', header = FALSE, columns = {'column000': 'BIGINT', 'column001': 'BIGINT', 'column002': 'VARCHAR', 'column003': 'BIGINT', 'column004': 'TIMESTAMP', 'column005': 'DATE', 'column006': 'BIGINT', 'column007': 'BIGINT', 'column008': 'BIGINT', 'column009': 'BIGINT', 'column010': 'BIGINT', 'column011': 'BIGINT', 'column012': 'BIGINT', 'column013': 'VARCHAR', 'column014': 'VARCHAR', 'column015': 'BIGINT', 'column016': 'BIGINT', 'column017': 'BIGINT', 'column018': 'BIGINT', 'column019': 'BIGINT', 'column020': 'BIGINT', 'column021': 'BIGINT', 'column022': 'BIGINT', 'column023': 'BIGINT', 'column024': 'BIGINT', 'column025': 'DOUBLE', 'column026': 'BIGINT', 'column027': 'BIGINT', 'column028': 'BIGINT', 'column029': 'VARCHAR', 'column030': 'BIGINT', 'column031': 'BIGINT', 'column032': 'BIGINT', 'column033': 'BIGINT', 'column034': 'VARCHAR', 'column035': 'VARCHAR', 'column036': 'BIGINT', 'column037': 'BIGINT', 'column038': 'BIGINT', 'column039': 'VARCHAR', 'column040': 'BIGINT', 'column041': 'BIGINT', 'column042': 'BIGINT', 'column043': 'BIGINT', 'column044': 'BIGINT', 'column045': 'TIMESTAMP', 'column046': 'BIGINT', 'column047': 'BIGINT', 'column048': 'BIGINT', 'column049': 'BIGINT', 'column050': 'VARCHAR', 'column051': 'BIGINT', 'column052': 'BIGINT', 'column053': 'BIGINT', 'column054': 'BIGINT', 'column055': 'BIGINT', 'column056': 'VARCHAR', 'column057': 'BIGINT', 'column058': 'BIGINT', 'column059': 'BIGINT', 'column060': 'BIGINT', 'column061': 'BIGINT', 'column062': 'BIGINT', 'column063': 'VARCHAR', 'column064': 'TIMESTAMP', 'column065': 'BIGINT', 'column066': 'BIGINT', 'column067': 'BIGINT', 'column068': 'BIGINT', 'column069': 'BIGINT', 'column070': 'BIGINT', 'column071': 'BIGINT', 'column072': 'BIGINT', 'column073': 'BIGINT', 'column074': 'VARCHAR', 'column075': 'VARCHAR', 'column076': 'VARCHAR', 'column077': 'VARCHAR', 'column078': 'BIGINT', 'column079': 'BIGINT', 'column080': 'BIGINT', 'column081': 'BIGINT', 'column082': 'BIGINT', 'column083': 'BIGINT', 'column084': 'BIGINT', 'column085': 'BIGINT', 'column086': 'VARCHAR', 'column087': 'BIGINT', 'column088': 'VARCHAR', 'column089': 'VARCHAR', 'column090': 'BIGINT', 'column091': 'VARCHAR', 'column092': 'VARCHAR', 'column093': 'VARCHAR', 'column094': 'VARCHAR', 'column095': 'VARCHAR', 'column096': 'VARCHAR', 'column097': 'VARCHAR', 'column098': 'VARCHAR', 'column099': 'VARCHAR', 'column100': 'VARCHAR', 'column101': 'BIGINT', 'column102': 'BIGINT', 'column103': 'BIGINT', 'column104': 'BIGINT'}, dateformat = '%Y-%m-%d');

SELECT * FROM READ_CSV('data/csv/hits_problematic.csv', auto_detect = FALSE, delim = ',', quote = '"', escape = '\', new_line = '\n', skip = 0, comment = '', header = FALSE, columns = {'column000': 'BIGINT', 'column001': 'BIGINT', 'column002': 'VARCHAR', 'column003': 'BIGINT', 'column004': 'TIMESTAMP', 'column005': 'DATE', 'column006': 'BIGINT', 'column007': 'BIGINT', 'column008': 'BIGINT', 'column009': 'BIGINT', 'column010': 'BIGINT', 'column011': 'BIGINT', 'column012': 'BIGINT', 'column013': 'VARCHAR', 'column014': 'VARCHAR', 'column015': 'BIGINT', 'column016': 'BIGINT', 'column017': 'BIGINT', 'column018': 'BIGINT', 'column019': 'BIGINT', 'column020': 'BIGINT', 'column021': 'BIGINT', 'column022': 'BIGINT', 'column023': 'BIGINT', 'column024': 'BIGINT', 'column025': 'DOUBLE', 'column026': 'BIGINT', 'column027': 'BIGINT', 'column028': 'BIGINT', 'column029': 'VARCHAR', 'column030': 'BIGINT', 'column031': 'BIGINT', 'column032': 'BIGINT', 'column033': 'BIGINT', 'column034': 'VARCHAR', 'column035': 'VARCHAR', 'column036': 'BIGINT', 'column037': 'BIGINT', 'column038': 'BIGINT', 'column039': 'VARCHAR', 'column040': 'BIGINT', 'column041': 'BIGINT', 'column042': 'BIGINT', 'column043': 'BIGINT', 'column044': 'BIGINT', 'column045': 'TIMESTAMP', 'column046': 'BIGINT', 'column047': 'BIGINT', 'column048': 'BIGINT', 'column049': 'BIGINT', 'column050': 'VARCHAR', 'column051': 'BIGINT', 'column052': 'BIGINT', 'column053': 'BIGINT', 'column054': 'BIGINT', 'column055': 'BIGINT', 'column056': 'VARCHAR', 'column057': 'BIGINT', 'column058': 'BIGINT', 'column059': 'BIGINT', 'column060': 'BIGINT', 'column061': 'BIGINT', 'column062': 'BIGINT', 'column063': 'VARCHAR', 'column064': 'TIMESTAMP', 'column065': 'BIGINT', 'column066': 'BIGINT', 'column067': 'BIGINT', 'column068': 'BIGINT', 'column069': 'BIGINT', 'column070': 'BIGINT', 'column071': 'BIGINT', 'column072': 'BIGINT', 'column073': 'BIGINT', 'column074': 'VARCHAR', 'column075': 'VARCHAR', 'column076': 'VARCHAR', 'column077': 'VARCHAR', 'column078': 'BIGINT', 'column079': 'BIGINT', 'column080': 'BIGINT', 'column081': 'BIGINT', 'column082': 'BIGINT', 'column083': 'BIGINT', 'column084': 'BIGINT', 'column085': 'BIGINT', 'column086': 'VARCHAR', 'column087': 'BIGINT', 'column088': 'VARCHAR', 'column089': 'VARCHAR', 'column090': 'BIGINT', 'column091': 'VARCHAR', 'column092': 'VARCHAR', 'column093': 'VARCHAR', 'column094': 'VARCHAR', 'column095': 'VARCHAR', 'column096': 'VARCHAR', 'column097': 'VARCHAR', 'column098': 'VARCHAR', 'column099': 'VARCHAR', 'column100': 'VARCHAR', 'column101': 'BIGINT', 'column102': 'BIGINT', 'column103': 'BIGINT', 'column104': 'BIGINT'}, dateformat = '%Y-%m-%d', strict_mode = FALSE);

SELECT * FROM READ_CSV('data/csv/hits_problematic.csv', auto_detect = FALSE, delim = ',', quote = '"', escape = '', new_line = '\n', skip = 0, comment = '', header = FALSE, columns = {'column000': 'BIGINT', 'column001': 'BIGINT', 'column002': 'VARCHAR', 'column003': 'BIGINT', 'column004': 'TIMESTAMP', 'column005': 'DATE', 'column006': 'BIGINT', 'column007': 'BIGINT', 'column008': 'BIGINT', 'column009': 'BIGINT', 'column010': 'BIGINT', 'column011': 'BIGINT', 'column012': 'BIGINT', 'column013': 'VARCHAR', 'column014': 'VARCHAR', 'column015': 'BIGINT', 'column016': 'BIGINT', 'column017': 'BIGINT', 'column018': 'BIGINT', 'column019': 'BIGINT', 'column020': 'BIGINT', 'column021': 'BIGINT', 'column022': 'BIGINT', 'column023': 'BIGINT', 'column024': 'BIGINT', 'column025': 'DOUBLE', 'column026': 'BIGINT', 'column027': 'BIGINT', 'column028': 'BIGINT', 'column029': 'VARCHAR', 'column030': 'BIGINT', 'column031': 'BIGINT', 'column032': 'BIGINT', 'column033': 'BIGINT', 'column034': 'VARCHAR', 'column035': 'VARCHAR', 'column036': 'BIGINT', 'column037': 'BIGINT', 'column038': 'BIGINT', 'column039': 'VARCHAR', 'column040': 'BIGINT', 'column041': 'BIGINT', 'column042': 'BIGINT', 'column043': 'BIGINT', 'column044': 'BIGINT', 'column045': 'TIMESTAMP', 'column046': 'BIGINT', 'column047': 'BIGINT', 'column048': 'BIGINT', 'column049': 'BIGINT', 'column050': 'VARCHAR', 'column051': 'BIGINT', 'column052': 'BIGINT', 'column053': 'BIGINT', 'column054': 'BIGINT', 'column055': 'BIGINT', 'column056': 'VARCHAR', 'column057': 'BIGINT', 'column058': 'BIGINT', 'column059': 'BIGINT', 'column060': 'BIGINT', 'column061': 'BIGINT', 'column062': 'BIGINT', 'column063': 'VARCHAR', 'column064': 'TIMESTAMP', 'column065': 'BIGINT', 'column066': 'BIGINT', 'column067': 'BIGINT', 'column068': 'BIGINT', 'column069': 'BIGINT', 'column070': 'BIGINT', 'column071': 'BIGINT', 'column072': 'BIGINT', 'column073': 'BIGINT', 'column074': 'VARCHAR', 'column075': 'VARCHAR', 'column076': 'VARCHAR', 'column077': 'VARCHAR', 'column078': 'BIGINT', 'column079': 'BIGINT', 'column080': 'BIGINT', 'column081': 'BIGINT', 'column082': 'BIGINT', 'column083': 'BIGINT', 'column084': 'BIGINT', 'column085': 'BIGINT', 'column086': 'VARCHAR', 'column087': 'BIGINT', 'column088': 'VARCHAR', 'column089': 'VARCHAR', 'column090': 'BIGINT', 'column091': 'VARCHAR', 'column092': 'VARCHAR', 'column093': 'VARCHAR', 'column094': 'VARCHAR', 'column095': 'VARCHAR', 'column096': 'VARCHAR', 'column097': 'VARCHAR', 'column098': 'VARCHAR', 'column099': 'VARCHAR', 'column100': 'VARCHAR', 'column101': 'BIGINT', 'column102': 'BIGINT', 'column103': 'BIGINT', 'column104': 'BIGINT'}, dateformat = '%Y-%m-%d');

PRAGMA enable_verification;

CREATE TABLE integers (i INT, j INT);

COPY integers FROM 'data/csv/test/error_too_little.csv' WITH (HEADER, IGNORE_ERRORS, NULL_PADDING FALSE);

COPY integers FROM 'data/csv/test/error_too_little.csv' WITH (HEADER, NULL_PADDING FALSE);

SELECT * FROM integers AS too_little_columns;

DELETE FROM integers;

INSERT INTO integers SELECT * FROM READ_CSV('data/csv/test/error_too_little.csv', columns = {'i': 'INTEGER', 'j': 'INTEGER'}, ignore_errors = 1, null_padding = 0);

INSERT INTO integers SELECT * FROM READ_CSV('data/csv/test/error_too_little.csv', columns = {'i': 'INTEGER'}, null_padding = 0);

SELECT * FROM integers AS too_little_columns;

DELETE FROM integers;

COPY integers FROM 'data/csv/test/error_too_little_single.csv' WITH (HEADER, IGNORE_ERRORS, NULL_PADDING 0);

COPY integers FROM 'data/csv/test/error_too_little_single.csv' WITH (HEADER, NULL_PADDING 0);

SELECT * FROM integers AS too_little_columns;

DELETE FROM integers;

DELETE FROM integers;

COPY integers FROM 'data/csv/test/error_too_many.csv' WITH (HEADER);

SELECT * FROM integers AS too_many_columns;

DELETE FROM integers;

COPY integers FROM 'data/csv/test/error_invalid_type.csv' WITH (HEADER, IGNORE_ERRORS);

COPY integers FROM 'data/csv/test/error_invalid_type.csv' WITH (HEADER);

SELECT * FROM integers AS too_many_columns;

CREATE TABLE nullable_type (col_a INT, col_b TEXT, col_c TEXT, col_d TEXT);

COPY nullable_type FROM 'data/csv/test/test_incompatible_type_with_nullable.csv';

SELECT * FROM nullable_type;

SELECT * FROM READ_CSV('data/csv/titanic.csv', ignore_errors = 1) LIMIT 10;

SELECT * FROM READ_CSV('data/csv/test_ignore_errors.csv', columns = {'Order ref ID': 'VARCHAR'}, delim = ',', ignore_errors = TRUE);

SELECT * FROM READ_CSV('data/csv/test_ignore_errors.csv', types = {'Order ref ID': 'VARCHAR'}, ignore_errors = TRUE);

SELECT * FROM READ_CSV('data/csv/rejects_sniffer.csv', ignore_errors = TRUE);

CREATE TABLE integers (i INT, j INT);

COPY integers FROM 'data/csv/test/error_too_little_end_of_filled_chunk.csv' WITH (HEADER, IGNORE_ERRORS, NULL_PADDING 0, AUTO_DETECT 0);

COPY integers FROM 'data/csv/test/error_too_little_end_of_filled_chunk.csv' WITH (HEADER, NULL_PADDING 0, AUTO_DETECT 0);

SELECT * FROM integers LIMIT 1;

SELECT COUNT(*) FROM integers;

DROP TABLE integers;

CREATE TABLE integers (i INT, j INT);

COPY integers FROM 'data/csv/test/error_too_little_end_of_filled_chunk.csv' WITH (HEADER, IGNORE_ERRORS, NULL_PADDING 0);

COPY integers FROM 'data/csv/test/error_too_little_end_of_filled_chunk.csv' WITH (HEADER, NULL_PADDING 0);

SELECT * FROM integers LIMIT 1;

SELECT COUNT(*) FROM integers;

PRAGMA enable_verification;

SELECT * FROM READ_CSV('data/csv/error/mid_null.csv', delim = ';', columns = {'a': 'integer', 'b': 'integer', 'c': 'integer'}, auto_detect = FALSE, header = TRUE, ignore_errors = TRUE, strict_mode = TRUE);

PRAGMA enable_verification;

CREATE TABLE movie_info (id INT NOT NULL PRIMARY KEY, movie_id INT NOT NULL, info_type_id INT NOT NULL, info TEXT NOT NULL, note TEXT);

COPY movie_info FROM 'data/csv/real/imdb_movie_info_escaped.csv' WITH (DELIMITER ',', ESCAPE '\');

SELECT * FROM movie_info;

PRAGMA enable_verification;

CREATE TABLE users (id INT NOT NULL /* primary key */, name TEXT NOT NULL, email TEXT);

INSERT INTO users SELECT * FROM READ_CSV('data/csv/glob/f_*.csv', ignore_errors = TRUE, null_padding = TRUE);

SELECT * FROM users ORDER BY ALL;

DROP TABLE users;

PRAGMA enable_verification;

CREATE TABLE users (id INT NOT NULL /* primary key */, name TEXT NOT NULL, email TEXT);

INSERT INTO users SELECT * FROM READ_CSV('data/csv/file_error.csv', ignore_errors = TRUE, null_padding = TRUE);

SELECT * FROM users;

CREATE TABLE proj (id INT NOT NULL /* primary key */);

INSERT INTO proj SELECT id FROM READ_CSV('data/csv/file_error.csv', ignore_errors = TRUE, null_padding = TRUE);

SELECT * FROM proj;

INSERT INTO proj SELECT id FROM READ_CSV('data/csv/file_error.csv');

DROP TABLE proj;

CREATE TABLE proj (name TEXT NOT NULL, id INT NOT NULL /* primary key */);

INSERT INTO proj SELECT name, id FROM READ_CSV('data/csv/file_error.csv', ignore_errors = TRUE, null_padding = TRUE);

SELECT * FROM proj;

INSERT INTO proj SELECT name, id FROM READ_CSV('data/csv/file_error.csv');

DROP TABLE proj;

CREATE TABLE proj (email TEXT, id INT NOT NULL /* primary key */);

INSERT INTO proj SELECT email, id FROM READ_CSV('data/csv/file_error.csv', ignore_errors = TRUE, null_padding = TRUE);

SELECT * FROM proj;

INSERT INTO proj SELECT name, id FROM READ_CSV('data/csv/file_error.csv');

DROP TABLE proj;

CREATE TABLE proj (email TEXT, id TEXT NOT NULL /* primary key */);

INSERT INTO proj SELECT name, CAST(id AS INT) FROM READ_CSV('data/csv/file_error.csv');

DROP TABLE proj;

CREATE TABLE proj (email TEXT, id INT NOT NULL /* primary key */);

INSERT INTO proj SELECT 'Pedro', id FROM READ_CSV('data/csv/file_error.csv');

CREATE TABLE ppl (name TEXT);

INSERT INTO ppl VALUES ('alice'), ('bob'), ('pedro');

INSERT INTO proj SELECT ppl.name, id FROM READ_CSV('data/csv/file_error.csv') AS T INNER JOIN ppl ON (ppl.name = T.name);

INSERT INTO proj SELECT T.name, id FROM READ_CSV('data/csv/file_error.csv') AS T INNER JOIN ppl ON (ppl.name = T.name);

DROP TABLE users;

CREATE TABLE users (id INT NOT NULL /* primary key */, name TEXT NOT NULL, email TEXT);

INSERT INTO users SELECT * FROM READ_CSV('data/csv/glob/f_*.csv', ignore_errors = TRUE, null_padding = TRUE);

SELECT * FROM users ORDER BY ALL;

DROP TABLE proj;

CREATE TABLE proj (email TEXT, id INT NOT NULL);

INSERT INTO proj SELECT email, id FROM READ_CSV('data/csv/glob/f_*.csv', ignore_errors = TRUE, null_padding = TRUE);

SELECT * FROM proj ORDER BY ALL;

CREATE TABLE users_age (id INT NOT NULL, name TEXT NOT NULL, email TEXT, age INT);

INSERT INTO users_age SELECT * FROM READ_CSV('data/csv/union-by-name/type_mismatch/f_*.csv', ignore_errors = TRUE, null_padding = TRUE, union_by_name = TRUE);

SELECT * FROM users_age;

CREATE TABLE timestamps (ts TIMESTAMP, dt DATE);

INSERT INTO timestamps SELECT ts, ts FROM READ_CSV('data/csv/timestamp.csv');

SELECT * FROM timestamps;

PRAGMA enable_verification;

CREATE TABLE test AS SELECT * FROM READ_CSV('data/csv/test/issue3562_assertion.csv.gz', columns = {'OBJECTID': 'DECIMAL(18,3)', 'URL': 'TEXT', 'NAME': 'TEXT', 'the_geom': 'TEXT', 'LINE': 'TEXT'});

SELECT objectid, name FROM test ORDER BY objectid LIMIT 10;

PRAGMA enable_verification;

SELECT * FROM "data/csv/issue5077_aligned.csv";

SELECT * FROM READ_CSV('data/csv/issue5077.csv', header = 0);

SELECT * FROM "data/csv/lineitem-carriage.csv";

PRAGMA enable_verification;

SELECT * FROM READ_CSV('https://github.com/duckdb/duckdb-data/releases/download/v1.0/title.principals.tsv', quote = '"') LIMIT 10;

PRAGMA enable_verification;

CREATE TABLE lineitem (l_orderkey INT NOT NULL, l_partkey INT NOT NULL, l_suppkey INT NOT NULL, l_linenumber INT NOT NULL, l_quantity INT NOT NULL, l_extendedprice DECIMAL(15, 2) NOT NULL, l_discount DECIMAL(15, 2) NOT NULL, l_tax DECIMAL(15, 2) NOT NULL, l_returnflag TEXT NOT NULL, l_linestatus TEXT NOT NULL, l_shipdate DATE NOT NULL, l_commitdate DATE NOT NULL, l_receiptdate DATE NOT NULL, l_shipinstruct TEXT NOT NULL, l_shipmode TEXT NOT NULL, l_comment TEXT NOT NULL);

COPY lineitem FROM 'data/csv/real/lineitem_sample.csv' WITH (DELIMITER '|');

SELECT l_partkey, l_comment FROM lineitem WHERE l_orderkey = 1 ORDER BY l_linenumber;

COPY lineitem TO '__TEST_DIR__/lineitem.csv' WITH (DELIMITER ' ', HEADER);

DELETE FROM lineitem;

SELECT * FROM lineitem;

COPY lineitem FROM '__TEST_DIR__/lineitem.csv' WITH (DELIMITER ' ', HEADER);

SELECT l_partkey, l_comment FROM lineitem WHERE l_orderkey = 1 ORDER BY l_linenumber;

PRAGMA enable_verification;

SELECT * FROM READ_CSV('data/csv/15473.csv', max_line_size = 10);

PRAGMA enable_verification;

CREATE TABLE test (a INT, b TEXT, c INT);

COPY test FROM 'data/csv/test/test_long_line.csv';

SELECT LENGTH(b) FROM test ORDER BY a;

SELECT SUM(a), SUM(c) FROM test;

PRAGMA enable_verification;

CREATE TABLE t AS SELECT * FROM READ_CSV_AUTO('data/csv/manycolumns.csv');

PRAGMA enable_verification;

CREATE TABLE test_base (a INT, b TEXT, c INT);

INSERT INTO test_base VALUES (10, REPEAT('a', 1504857), 20), (10, REPEAT('a', 10485760), 20);

COPY test_base TO '__TEST_DIR__/test.csv' WITH (HEADER 0);

CREATE TABLE test (a INT, b TEXT, c INT);

COPY test FROM '__TEST_DIR__/test.csv';

COPY test FROM '__TEST_DIR__/test.csv' WITH (max_line_size 10485770);

PRAGMA enable_verification;

SELECT * FROM READ_CSV(['data/csv/multiple_files/more_columns/file_1.csv', 'data/csv/multiple_files/more_columns/file_2.csv', 'data/csv/multiple_files/more_columns/file_3.csv', 'data/csv/multiple_files/more_columns/file_4.csv']) ORDER BY ALL;

SELECT * FROM READ_CSV(['data/csv/multiple_files/more_columns/file_1.csv', 'data/csv/multiple_files/more_columns/file_2.csv', 'data/csv/multiple_files/more_columns/file_3.csv', 'data/csv/multiple_files/more_columns/file_no_header.csv']) ORDER BY ALL;

SELECT * FROM READ_CSV(['data/csv/multiple_files/more_columns/file_1.csv', 'data/csv/multiple_files/more_columns/file_2.csv', 'data/csv/multiple_files/more_columns/file_3.csv', 'data/csv/multiple_files/more_columns/file_5.csv']) ORDER BY ALL;

SELECT * FROM READ_CSV(['data/csv/multiple_files/more_columns/file_2.csv', 'data/csv/multiple_files/more_columns/file_1.csv', 'data/csv/multiple_files/more_columns/file_3.csv', 'data/csv/multiple_files/more_columns/file_4.csv']);

SELECT * FROM READ_CSV(['data/csv/multiple_files/different_order/file_1.csv', 'data/csv/multiple_files/different_order/file_2.csv']) ORDER BY ALL;

SELECT * FROM READ_CSV(['data/csv/multiple_files/more_columns/file_1.csv', 'data/csv/multiple_files/more_columns/file_6.csv']) ORDER BY ALL;

SELECT * FROM READ_CSV(['data/csv/multiple_files/more_columns/file_6.csv', 'data/csv/multiple_files/more_columns/file_1.csv']) ORDER BY ALL;

SELECT * FROM READ_CSV(['data/csv/multiple_files/more_columns/file_6.csv', 'data/csv/multiple_files/more_columns/file_6.csv']) ORDER BY ALL;

PRAGMA enable_verification;

SELECT * FROM READ_CSV('data/csv/customer.4.csv', auto_detect = FALSE, delim = '|', quote = '"', escape = '"', new_line = '\n', skip = 0, header = FALSE, columns = {'c_custkey': 'BIGINT', 'c_name': 'VARCHAR', 'c_address': 'VARCHAR', 'c_nationkey': 'INTEGER', 'c_phone': 'VARCHAR', 'c_acctbal': 'DECIMAL(15, 2)', 'c_mktsegment': 'VARCHAR', 'c_comment': 'VARCHAR'}, parallel = TRUE, buffer_size = 300);

PRAGMA enable_verification;

SELECT * FROM "https://github.com/duckdb/duckdb-data/releases/download/v1.0/202204-clean-sane-header.csv";

SELECT COUNT(*) FROM READ_CSV('https://github.com/duckdb/duckdb-data/releases/download/v1.0/202204-clean-sane-header.csv', strict_mode = FALSE);

SELECT * FROM READ_CSV('https://github.com/duckdb/duckdb-data/releases/download/v1.0/202204-clean-sane-header.csv', strict_mode = FALSE) ORDER BY ALL LIMIT 10;

PRAGMA enable_verification;

CREATE TABLE test (a INT, b TEXT, c INT);

INSERT INTO test SELECT * FROM READ_CSV_AUTO('data/csv/test/mixed_line_endings.csv', strict_mode = FALSE);

PRAGMA enable_verification;

SELECT * FROM READ_CSV('data/csv/mixed_new_line.csv', strict_mode = FALSE);

SELECT * FROM READ_CSV('data/csv/mixed_new_line.csv', strict_mode = FALSE);

SELECT * FROM READ_CSV('data/csv/mixed_new_line.csv', columns = {'a': 'integer', 'b': 'integer', 'c': 'integer'}, new_line = '\r\n', header = FALSE, strict_mode = TRUE, delim = ',');

SELECT * FROM READ_CSV('data/csv/mixed_new_line.csv', columns = {'a': 'integer', 'b': 'integer', 'c': 'integer'}, new_line = '\r\n', header = FALSE, strict_mode = TRUE, delim = ',', auto_detect = FALSE);

SELECT COUNT(*) FROM READ_CSV('data/csv/mixed_new_line_2.csv', new_line = '\r\n', strict_mode = FALSE, columns = {'a': 'varchar', 'b': 'varchar'}, delim = ',', ignore_errors = TRUE, header = FALSE);

SELECT COUNT(*) FROM READ_CSV('data/csv/mixed_new_line_2.csv', new_line = '\r\n', strict_mode = FALSE, columns = {'a': 'varchar', 'b': 'varchar'}, auto_detect = FALSE, delim = ',');

SELECT column0 LIKE '%one%' AND column0 LIKE '%two%' AS success FROM READ_CSV('data/csv/one_r_two.csv', new_line = '\r\n', strict_mode = TRUE, HEADER = FALSE);

SELECT column0 LIKE '%one%' AND column0 LIKE '%two%' AS success FROM READ_CSV('data/csv/one_r_two.csv', new_line = '\n', strict_mode = TRUE, HEADER = FALSE);

SELECT column0 FROM READ_CSV('data/csv/one_r_two.csv', new_line = '\r', strict_mode = TRUE, HEADER = FALSE);

SELECT column0 LIKE '%one%' AND column0 LIKE '%two%' AS success FROM READ_CSV('data/csv/one_n_two.csv', new_line = '\r', strict_mode = TRUE, HEADER = FALSE);

SELECT column0 LIKE '%one%' AND column0 LIKE '%two%' AS success FROM READ_CSV('data/csv/one_n_two.csv', new_line = '\r\n', strict_mode = TRUE, HEADER = FALSE);

SELECT column0 FROM READ_CSV('data/csv/one_n_two.csv', new_line = '\n', strict_mode = TRUE, HEADER = FALSE);

SELECT column0 LIKE '%one%' AND column0 LIKE '%two%' AS success FROM READ_CSV('data/csv/one_r_n_two.csv', new_line = '\r', strict_mode = TRUE, HEADER = FALSE);

SELECT column0 LIKE '%one%' AND column0 LIKE '%two%' AS success FROM READ_CSV('data/csv/one_r_n_two.csv', new_line = '\n', strict_mode = TRUE, HEADER = FALSE);

CALL dbgen(sf=1);

SET temp_directory = '';

COPY lineitem TO '__TEST_DIR__/lineitem.csv.gz';

DROP TABLE lineitem;

CREATE TABLE lineitem (l_orderkey INT NOT NULL, l_partkey INT NOT NULL, l_suppkey INT NOT NULL, l_linenumber INT NOT NULL, l_quantity DECIMAL(15, 2) NOT NULL, l_extendedprice DECIMAL(15, 2) NOT NULL, l_discount DECIMAL(15, 2) NOT NULL, l_tax DECIMAL(15, 2) NOT NULL, l_returnflag TEXT NOT NULL, l_linestatus TEXT NOT NULL, l_shipdate DATE NOT NULL, l_commitdate DATE NOT NULL, l_receiptdate DATE NOT NULL, l_shipinstruct TEXT NOT NULL, l_shipmode TEXT NOT NULL, l_comment TEXT NOT NULL);

SELECT COUNT(*) FROM READ_CSV(['__TEST_DIR__/lineitem.csv.gz', '__TEST_DIR__/lineitem.csv.gz', '__TEST_DIR__/lineitem.csv.gz', '__TEST_DIR__/lineitem.csv.gz', '__TEST_DIR__/lineitem.csv.gz', '__TEST_DIR__/lineitem.csv.gz', '__TEST_DIR__/lineitem.csv.gz', '__TEST_DIR__/lineitem.csv.gz', '__TEST_DIR__/lineitem.csv.gz', '__TEST_DIR__/lineitem.csv.gz', '__TEST_DIR__/lineitem.csv.gz', '__TEST_DIR__/lineitem.csv.gz', '__TEST_DIR__/lineitem.csv.gz', '__TEST_DIR__/lineitem.csv.gz', '__TEST_DIR__/lineitem.csv.gz', '__TEST_DIR__/lineitem.csv.gz', '__TEST_DIR__/lineitem.csv.gz', '__TEST_DIR__/lineitem.csv.gz', '__TEST_DIR__/lineitem.csv.gz', '__TEST_DIR__/lineitem.csv.gz', '__TEST_DIR__/lineitem.csv.gz', '__TEST_DIR__/lineitem.csv.gz', '__TEST_DIR__/lineitem.csv.gz', '__TEST_DIR__/lineitem.csv.gz']);

PRAGMA enable_verification;

CREATE TABLE IF NOT EXISTS ncvoters (county_id INT, county_desc TEXT, voter_reg_num TEXT, status_cd TEXT, voter_status_desc TEXT, reason_cd TEXT, voter_status_reason_desc TEXT, absent_ind TEXT, name_prefx_cd TEXT, last_name TEXT, first_name TEXT, midl_name TEXT, name_sufx_cd TEXT, full_name_rep TEXT, full_name_mail TEXT, house_num TEXT, half_code TEXT, street_dir TEXT, street_name TEXT, street_type_cd TEXT, street_sufx_cd TEXT, unit_designator TEXT, unit_num TEXT, res_city_desc TEXT, state_cd TEXT, zip_code TEXT, res_street_address TEXT, res_city_state_zip TEXT, mail_addr1 TEXT, mail_addr2 TEXT, mail_addr3 TEXT, mail_addr4 TEXT, mail_city TEXT, mail_state TEXT, mail_zipcode TEXT, mail_city_state_zip TEXT, area_cd TEXT, phone_num TEXT, full_phone_number TEXT, drivers_lic TEXT, race_code TEXT, race_desc TEXT, ethnic_code TEXT, ethnic_desc TEXT, party_cd TEXT, party_desc TEXT, sex_code TEXT, sex TEXT, birth_age TEXT, birth_place TEXT, registr_dt TEXT, precinct_abbrv TEXT, precinct_desc TEXT, municipality_abbrv TEXT, municipality_desc TEXT, ward_abbrv TEXT, ward_desc TEXT, cong_dist_abbrv TEXT, cong_dist_desc TEXT, super_court_abbrv TEXT, super_court_desc TEXT, judic_dist_abbrv TEXT, judic_dist_desc TEXT, nc_senate_abbrv TEXT, nc_senate_desc TEXT, nc_house_abbrv TEXT, nc_house_desc TEXT, county_commiss_abbrv TEXT, county_commiss_desc TEXT, township_abbrv TEXT, township_desc TEXT, school_dist_abbrv TEXT, school_dist_desc TEXT, fire_dist_abbrv TEXT, fire_dist_desc TEXT, water_dist_abbrv TEXT, water_dist_desc TEXT, sewer_dist_abbrv TEXT, sewer_dist_desc TEXT, sanit_dist_abbrv TEXT, sanit_dist_desc TEXT, rescue_dist_abbrv TEXT, rescue_dist_desc TEXT, munic_dist_abbrv TEXT, munic_dist_desc TEXT, dist_1_abbrv TEXT, dist_1_desc TEXT, dist_2_abbrv TEXT, dist_2_desc TEXT, confidential_ind TEXT, age TEXT, ncid TEXT, vtd_abbrv TEXT, vtd_desc TEXT);

COPY ncvoters FROM 'data/csv/real/ncvoter.csv' WITH (DELIMITER '	');

SELECT county_id, county_desc, vtd_desc, name_prefx_cd FROM ncvoters;

COPY ncvoters TO '__TEST_DIR__/ncvoter.csv' WITH (DELIMITER 'A', HEADER);

DELETE FROM ncvoters;

SELECT * FROM ncvoters;

COPY ncvoters FROM '__TEST_DIR__/ncvoter.csv' WITH (DELIMITER 'A', HEADER);

SELECT county_id, county_desc, vtd_desc, name_prefx_cd FROM ncvoters;

PRAGMA enable_verification;

CREATE TABLE nfcstrings (s TEXT);

COPY nfcstrings FROM 'data/csv/test/nfc.csv' WITH (HEADER 0);

SELECT COUNT(*) FROM nfcstrings WHERE s COLLATE NFC = 'ü';

PRAGMA enable_verification;

CREATE TABLE nfcstrings (source TEXT, nfc TEXT, nfd TEXT);

COPY nfcstrings FROM 'data/csv/real/nfc_normalization.csv' WITH (DELIMITER '|', HEADER 0);

SELECT COUNT(*) FROM nfcstrings;

SELECT COUNT(*) FROM nfcstrings WHERE source COLLATE NFC = nfc;

SELECT COUNT(*) FROM nfcstrings WHERE nfc COLLATE NFC = nfd;

DROP TABLE nfcstrings;

CREATE TABLE nfcstrings (source TEXT, nfc TEXT, nfd TEXT);

COPY nfcstrings FROM 'data/csv/real/nfc_normalization_rn.csv' WITH (DELIMITER '|', HEADER 0);

SELECT COUNT(*) FROM nfcstrings;

SELECT COUNT(*) FROM nfcstrings WHERE source COLLATE NFC = nfc;

SELECT COUNT(*) FROM nfcstrings WHERE nfc COLLATE NFC = nfd;

DROP TABLE IF EXISTS reject_errors;

SELECT * FROM READ_CSV('data/csv/error/banklist.csv', store_rejects = TRUE) ORDER BY ALL LIMIT 5;

SELECT * EXCLUDE (scan_id) FROM reject_errors ORDER BY ALL LIMIT 5;

PRAGMA enable_verification;

SELECT * FROM READ_CSV('data/csv/nullpadding.csv', null_padding = TRUE, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'INTEGER', 'd': 'INTEGER'}, auto_detect = FALSE, strict_mode = TRUE);

CREATE VIEW np AS SELECT * FROM READ_CSV('data/csv/nullpadding.csv', null_padding = TRUE, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'INTEGER', 'd': 'INTEGER'}, auto_detect = FALSE, ignore_errors = TRUE, strict_mode = TRUE);

SELECT * FROM np;

SELECT a FROM np;

SELECT b, d FROM np;

SELECT * FROM READ_CSV('data/csv/nullpadding.csv', null_padding = TRUE, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'INTEGER', 'd': 'INTEGER'}, auto_detect => FALSE, ignore_errors => TRUE, filename => TRUE, strict_mode = TRUE);

SELECT a, filename FROM READ_CSV('data/csv/nullpadding.csv', null_padding = TRUE, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'INTEGER', 'd': 'INTEGER'}, auto_detect => FALSE, ignore_errors => TRUE, filename => TRUE, strict_mode = TRUE);

SELECT filename FROM READ_CSV('data/csv/nullpadding.csv', null_padding = TRUE, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'INTEGER', 'd': 'INTEGER'}, auto_detect => FALSE, ignore_errors => TRUE, filename => TRUE, strict_mode = TRUE);

SELECT a FROM READ_CSV('data/csv/nullpadding.csv', null_padding = TRUE, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'INTEGER', 'd': 'INTEGER'}, auto_detect = FALSE, ignore_errors => TRUE, filename => TRUE, strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/nullpadding.csv', null_padding = TRUE, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'INTEGER', 'd': 'INTEGER'}, auto_detect := FALSE, ignore_errors := TRUE, strict_mode = TRUE) WHERE b = 100;

SELECT * FROM READ_CSV('data/csv/nullpadding.csv', null_padding = TRUE, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'INTEGER', 'd': 'INTEGER'}, auto_detect = FALSE, ignore_errors = TRUE, filename = TRUE, strict_mode = TRUE) WHERE a = 10 AND d = 10000;

SELECT * FROM READ_CSV('data/csv/nullpadding.csv', null_padding = TRUE, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'INTEGER', 'd': 'INTEGER', 'e': 'INTEGER'}, auto_detect = FALSE, filename = TRUE) WHERE a = 10 AND d = 10000;

SELECT * FROM READ_CSV('data/csv/nullpadding.csv', null_padding = TRUE, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'INTEGER', 'd': 'INTEGER', 'e': 'INTEGER'}, auto_detect := FALSE);

SELECT * FROM READ_CSV('data/csv/nullpadding.csv', null_padding = TRUE, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'INTEGER', 'd': 'INTEGER', 'e': 'INTEGER', 'f': 'INTEGER'}, auto_detect = FALSE);

SELECT * FROM READ_CSV('data/csv/nullpadding.csv', null_padding = TRUE, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'INTEGER', 'd': 'INTEGER', 'e': 'INTEGER', 'f': 'INTEGER', 'g': 'INTEGER'}, auto_detect = FALSE);

SET threads = 1;

CREATE VIEW T AS SELECT SETTLEMENTDATE, DUID, I, filename, UNIT, CAST(LOWER6SEC AS DOUBLE) AS LOWER6SEC, CAST(LOWER6SECFLAGS AS DOUBLE) AS LOWER6SECFLAGS, CAST(LOWER60SECFLAGS AS DOUBLE) AS LOWER60SECFLAGS, CAST(RAISE5MINACTUALAVAILABILITY AS DOUBLE) AS RAISE5MINACTUALAVAILABILITY, CAST(INTERVENTION AS DOUBLE) AS INTERVENTION, CAST(LOWER5MINFLAGS AS DOUBLE) AS LOWER5MINFLAGS, CAST(RAISEREGAVAILABILITY AS DOUBLE) AS RAISEREGAVAILABILITY, CAST(LOWERREGACTUALAVAILABILITY AS DOUBLE) AS LOWERREGACTUALAVAILABILITY, CAST(VIOLATION60SECDEGREE AS DOUBLE) AS VIOLATION60SECDEGREE, CAST(LOWER60SEC AS DOUBLE) AS LOWER60SEC, CAST(MARGINAL5MINVALUE AS DOUBLE) AS MARGINAL5MINVALUE, CAST(RAISE60SEC AS DOUBLE) AS RAISE60SEC, CAST(RAMPUPRATE AS DOUBLE) AS RAMPUPRATE, CAST(TOTALCLEARED AS DOUBLE) AS TOTALCLEARED, CAST(VIOLATION5MINDEGREE AS DOUBLE) AS VIOLATION5MINDEGREE, CAST(LOWER6SECACTUALAVAILABILITY AS DOUBLE) AS LOWER6SECACTUALAVAILABILITY, CAST(AGCSTATUS AS DOUBLE) AS AGCSTATUS, CAST(RAISE60SECFLAGS AS DOUBLE) AS RAISE60SECFLAGS, CAST("VERSION" AS DOUBLE) AS "VERSION", CAST(RAISE5MINFLAGS AS DOUBLE) AS RAISE5MINFLAGS, CAST(LOWER60SECACTUALAVAILABILITY AS DOUBLE) AS LOWER60SECACTUALAVAILABILITY, CAST(RAMPDOWNRATE AS DOUBLE) AS RAMPDOWNRATE, CAST(RAISE6SECFLAGS AS DOUBLE) AS RAISE6SECFLAGS, CAST(RAISE60SECACTUALAVAILABILITY AS DOUBLE) AS RAISE60SECACTUALAVAILABILITY, CAST(VIOLATIONDEGREE AS DOUBLE) AS VIOLATIONDEGREE, CAST(RAISE5MIN AS DOUBLE) AS RAISE5MIN, CAST(MARGINALVALUE AS DOUBLE) AS MARGINALVALUE, CAST(LOWERREGFLAGS AS DOUBLE) AS LOWERREGFLAGS, CAST(RAISEREG AS DOUBLE) AS RAISEREG, CAST(LOWERREGENABLEMENTMIN AS DOUBLE) AS LOWERREGENABLEMENTMIN, CAST(LOWERREGENABLEMENTMAX AS DOUBLE) AS LOWERREGENABLEMENTMAX, CAST(DISPATCHMODE AS DOUBLE) AS DISPATCHMODE, CAST(VIOLATION6SECDEGREE AS DOUBLE) AS VIOLATION6SECDEGREE, CAST(LOWERREG AS DOUBLE) AS LOWERREG, CAST(LOWERREGAVAILABILITY AS DOUBLE) AS LOWERREGAVAILABILITY, CAST(RAISEREGACTUALAVAILABILITY AS DOUBLE) AS RAISEREGACTUALAVAILABILITY, CAST(RAISEREGFLAGS AS DOUBLE) AS RAISEREGFLAGS, CAST(MARGINAL60SECVALUE AS DOUBLE) AS MARGINAL60SECVALUE, CAST(LOWER5MINACTUALAVAILABILITY AS DOUBLE) AS LOWER5MINACTUALAVAILABILITY, CAST(RAISEREGENABLEMENTMAX AS DOUBLE) AS RAISEREGENABLEMENTMAX, CAST(INITIALMW AS DOUBLE) AS INITIALMW, CAST(AVAILABILITY AS DOUBLE) AS AVAILABILITY, CAST(RUNNO AS DOUBLE) AS RUNNO, CAST(RAISE6SECACTUALAVAILABILITY AS DOUBLE) AS RAISE6SECACTUALAVAILABILITY, CAST(MARGINAL6SECVALUE AS DOUBLE) AS MARGINAL6SECVALUE, CAST(RAISE6SEC AS DOUBLE) AS RAISE6SEC, CAST(XX AS DOUBLE) AS XX, CAST(RAISEREGENABLEMENTMIN AS DOUBLE) AS RAISEREGENABLEMENTMIN, CAST(LOWER5MIN AS DOUBLE) AS LOWER5MIN FROM (SELECT * FROM READ_CSV(main.list_value('data/csv/public_daily_sample.csv', 'data/csv/public_daily_sample.csv', 'data/csv/public_daily_sample.csv'), ("Skip" = 1), ("header" = 0), (all_varchar = 1), ("columns" = main.struct_pack(I := 'VARCHAR', UNIT := 'VARCHAR', XX := 'VARCHAR', "VERSION" := 'VARCHAR', SETTLEMENTDATE := 'VARCHAR', RUNNO := 'VARCHAR', DUID := 'VARCHAR', INTERVENTION := 'VARCHAR', DISPATCHMODE := 'VARCHAR', AGCSTATUS := 'VARCHAR', INITIALMW := 'VARCHAR', TOTALCLEARED := 'VARCHAR', RAMPDOWNRATE := 'VARCHAR', RAMPUPRATE := 'VARCHAR', LOWER5MIN := 'VARCHAR', LOWER60SEC := 'VARCHAR', LOWER6SEC := 'VARCHAR', RAISE5MIN := 'VARCHAR', RAISE60SEC := 'VARCHAR', RAISE6SEC := 'VARCHAR', MARGINAL5MINVALUE := 'VARCHAR', MARGINAL60SECVALUE := 'VARCHAR', MARGINAL6SECVALUE := 'VARCHAR', MARGINALVALUE := 'VARCHAR', VIOLATION5MINDEGREE := 'VARCHAR', VIOLATION60SECDEGREE := 'VARCHAR', VIOLATION6SECDEGREE := 'VARCHAR', VIOLATIONDEGREE := 'VARCHAR', LOWERREG := 'VARCHAR', RAISEREG := 'VARCHAR', AVAILABILITY := 'VARCHAR', RAISE6SECFLAGS := 'VARCHAR', RAISE60SECFLAGS := 'VARCHAR', RAISE5MINFLAGS := 'VARCHAR', RAISEREGFLAGS := 'VARCHAR', LOWER6SECFLAGS := 'VARCHAR', LOWER60SECFLAGS := 'VARCHAR', LOWER5MINFLAGS := 'VARCHAR', LOWERREGFLAGS := 'VARCHAR', RAISEREGAVAILABILITY := 'VARCHAR', RAISEREGENABLEMENTMAX := 'VARCHAR', RAISEREGENABLEMENTMIN := 'VARCHAR', LOWERREGAVAILABILITY := 'VARCHAR', LOWERREGENABLEMENTMAX := 'VARCHAR', LOWERREGENABLEMENTMIN := 'VARCHAR', RAISE6SECACTUALAVAILABILITY := 'VARCHAR', RAISE60SECACTUALAVAILABILITY := 'VARCHAR', RAISE5MINACTUALAVAILABILITY := 'VARCHAR', RAISEREGACTUALAVAILABILITY := 'VARCHAR', LOWER6SECACTUALAVAILABILITY := 'VARCHAR', LOWER60SECACTUALAVAILABILITY := 'VARCHAR', LOWER5MINACTUALAVAILABILITY := 'VARCHAR', LOWERREGACTUALAVAILABILITY := 'VARCHAR')), (filename = 1), (null_padding = CAST('t' AS BOOLEAN)), (ignore_errors = 1), (auto_detect = CAST('f' AS BOOLEAN))) WHERE ((I = 'D') AND (UNIT = 'DUNIT')));

CREATE VIEW T_2 AS SELECT * EXCLUDE (SETTLEMENTDATE, XX, filename, I), CAST(SETTLEMENTDATE AS TIMESTAMP) AS SETTLEMENTDATE, STR_SPLIT(filename, '/')[8] AS file, ISOYEAR(CAST(SETTLEMENTDATE AS TIMESTAMP)) AS "YEAR" FROM T;

SELECT COUNT(*) FROM T_2;

PRAGMA enable_verification;

SET default_null_order = 'nulls_first';

CREATE VIEW v AS SELECT a, b, c, d FROM READ_CSV('data/csv/union-by-name/null_padding/*.csv', UNION_BY_NAME = TRUE, sample_size = 1, null_padding = 1) ORDER BY a, b, c, d;

SELECT * FROM v LIMIT 10;

SELECT COUNT(*) FROM v WHERE a IS NULL;

SELECT COUNT(*) FROM v WHERE b IS NULL;

SELECT COUNT(*) FROM v WHERE c IS NULL;

SELECT COUNT(*) FROM v WHERE d IS NULL;

PRAGMA enable_verification;

CREATE TABLE ontime (year SMALLINT, quarter SMALLINT, month SMALLINT, dayofmonth SMALLINT, dayofweek SMALLINT, flightdate DATE, uniquecarrier TEXT, airlineid DECIMAL(8, 2), carrier TEXT, tailnum TEXT, flightnum TEXT, originairportid INT, originairportseqid INT, origincitymarketid INT, origin TEXT, origincityname TEXT, originstate TEXT, originstatefips TEXT, originstatename TEXT, originwac DECIMAL(8, 2), destairportid INT, destairportseqid INT, destcitymarketid INT, dest TEXT, destcityname TEXT, deststate TEXT, deststatefips TEXT, deststatename TEXT, destwac DECIMAL(8, 2), crsdeptime DECIMAL(8, 2), deptime DECIMAL(8, 2), depdelay DECIMAL(8, 2), depdelayminutes DECIMAL(8, 2), depdel15 DECIMAL(8, 2), departuredelaygroups DECIMAL(8, 2), deptimeblk TEXT, taxiout DECIMAL(8, 2), wheelsoff DECIMAL(8, 2), wheelson DECIMAL(8, 2), taxiin DECIMAL(8, 2), crsarrtime DECIMAL(8, 2), arrtime DECIMAL(8, 2), arrdelay DECIMAL(8, 2), arrdelayminutes DECIMAL(8, 2), arrdel15 DECIMAL(8, 2), arrivaldelaygroups DECIMAL(8, 2), arrtimeblk TEXT, cancelled SMALLINT, cancellationcode TEXT, diverted SMALLINT, crselapsedtime DECIMAL(8, 2), actualelapsedtime DECIMAL(8, 2), airtime DECIMAL(8, 2), flights DECIMAL(8, 2), distance DECIMAL(8, 2), distancegroup SMALLINT, carrierdelay DECIMAL(8, 2), weatherdelay DECIMAL(8, 2), nasdelay DECIMAL(8, 2), securitydelay DECIMAL(8, 2), lateaircraftdelay DECIMAL(8, 2), firstdeptime TEXT, totaladdgtime TEXT, longestaddgtime TEXT, divairportlandings TEXT, divreacheddest TEXT, divactualelapsedtime TEXT, divarrdelay TEXT, divdistance TEXT, div1airport TEXT, div1aiportid INT, div1airportseqid INT, div1wheelson TEXT, div1totalgtime TEXT, div1longestgtime TEXT, div1wheelsoff TEXT, div1tailnum TEXT, div2airport TEXT, div2airportid INT, div2airportseqid INT, div2wheelson TEXT, div2totalgtime TEXT, div2longestgtime TEXT, div2wheelsoff TEXT, div2tailnum TEXT, div3airport TEXT, div3airportid INT, div3airportseqid INT, div3wheelson TEXT, div3totalgtime TEXT, div3longestgtime TEXT, div3wheelsoff TEXT, div3tailnum TEXT, div4airport TEXT, div4airportid INT, div4airportseqid INT, div4wheelson TEXT, div4totalgtime TEXT, div4longestgtime TEXT, div4wheelsoff TEXT, div4tailnum TEXT, div5airport TEXT, div5airportid INT, div5airportseqid INT, div5wheelson TEXT, div5totalgtime TEXT, div5longestgtime TEXT, div5wheelsoff TEXT, div5tailnum TEXT);

COPY ontime FROM 'data/csv/real/ontime_sample.csv' WITH (DELIMITER ',', HEADER);

SELECT year, uniquecarrier, origin, origincityname, div5longestgtime FROM ontime;

COPY ontime TO '__TEST_DIR__/ontime.csv' WITH (DELIMITER ',', HEADER);

DELETE FROM ontime;

COPY ontime FROM '__TEST_DIR__/ontime.csv' WITH (DELIMITER ',', HEADER);

SELECT year, uniquecarrier, origin, origincityname, div5longestgtime FROM ontime;

PRAGMA enable_verification;

SELECT COUNT(*) FROM READ_CSV('data/csv/evil_nullpadding.csv', delim = ';', quote = '"', null_padding = TRUE, header = 0);

SELECT COUNT(*) FROM READ_CSV('data/csv/evil_nullpadding_2.csv', delim = ';', quote = '"', null_padding = TRUE, header = 0);

SELECT * FROM READ_CSV('data/csv/evil_nullpadding.csv', delim = ';', quote = '"', null_padding = TRUE, header = 0, buffer_size = 30);

SELECT COUNT(*) FROM READ_CSV('data/csv/evil_nullpadding.csv', delim = ';', quote = '"', null_padding = TRUE, header = 0, buffer_size = 27);

SELECT COUNT(*) FROM READ_CSV('data/csv/evil_nullpadding.csv', delim = ';', quote = '"', null_padding = TRUE, header = 0, buffer_size = 30);

SELECT * FROM READ_CSV('data/csv/evil_nullpadding_2.csv', delim = ';', quote = '"', null_padding = TRUE, header = 0, buffer_size = 26);

PRAGMA enable_verification;

COPY (SELECT 42) TO '__TEST_DIR__/file.csv' WITH (prefix 'a');

COPY (SELECT 42) TO '__TEST_DIR__/file.csv' WITH (prefix 'a', suffix 'b', header);

COPY (SELECT 42) TO '__TEST_DIR__/file.csv' WITH (escape 'null', null 'null');

PRAGMA enable_verification;

CREATE TABLE T AS SELECT '1, "Oogie Boogie"' FROM RANGE(0, 100000);

INSERT INTO T VALUES ('2, """sir"" Oogie Boogie"');

COPY T TO '__TEST_DIR__/out.csv' WITH (FORMAT CSV, HEADER 0, QUOTE '');

SELECT quote, escape FROM SNIFF_CSV('__TEST_DIR__/out.csv');

CREATE TABLE T_2 AS SELECT '1, "Oogie Boogie"' FROM RANGE(0, 5000);

INSERT INTO T_2 VALUES ('2, "\"sir\" Oogie Boogie"');

COPY T_2 TO '__TEST_DIR__/out_2.csv' WITH (FORMAT CSV, HEADER 0, QUOTE '');

SELECT quote, escape FROM SNIFF_CSV('__TEST_DIR__/out_2.csv');

PRAGMA enable_verification;

CREATE TABLE test (a TEXT, b INT);

COPY test FROM 'data/csv/test/quoted_newline.csv' WITH (DELIMITER ',', AUTO_DETECT 0);

SELECT SUM(b) FROM test;

SELECT STR_SPLIT_REGEX(a, '[\r\n]+') FROM test ORDER BY a;

PRAGMA enable_verification;

SELECT * FROM READ_CSV('data/csv/test_default_option.csv', columns = {'a': 'varchar', 'b': 'integer'}, auto_detect = FALSE, header = TRUE) WHERE b = 1;

SELECT * FROM READ_CSV('data/csv/test_default_option_2.csv', columns = {'a': 'varchar', 'b': 'integer'}, auto_detect = FALSE, header = TRUE, delim = '|') WHERE b = 1;

PRAGMA enable_verification;

SELECT * FROM READ_CSV('data/csv/multi_quote.csv', null_padding = TRUE);

SELECT * FROM READ_CSV('data/csv/bad_escape.csv');

SELECT * FROM READ_CSV('data/csv/quoted_values_delimited.csv');

SELECT * FROM READ_CSV('data/csv/quoted_values_delimited.csv', ignore_errors = TRUE);

SELECT * FROM READ_CSV('data/csv/quoted_values_delimited.csv', quote = '');

SELECT * FROM READ_CSV_AUTO('data/csv/test/dateformat.csv');

CREATE TABLE dates (d DATE);

INSERT INTO dates SELECT * FROM READ_CSV('data/csv/test/dateformat.csv', columns = {'d': 'DATE'}, header = 0);

SELECT * FROM dates;

INSERT INTO dates SELECT * FROM READ_CSV_AUTO('data/csv/test/dateformat.csv', dateformat = '%m/%d/%Y');

SELECT * FROM dates ORDER BY 1;

CREATE TABLE timestamps AS SELECT * FROM READ_CSV_AUTO('data/csv/test/dateformat.csv', timestampformat = '%m/%d/%Y', columns = {'d': 'TIMESTAMP'});

SELECT * FROM timestamps;

CREATE VIEW lineitem AS SELECT * FROM READ_CSV('data/csv/real/lineitem_sample.csv', sep = '|', columns = {'l_orderkey': 'INT', 'l_partkey': 'INT', 'l_suppkey': 'INT', 'l_linenumber': 'INT', 'l_quantity': 'INTEGER', 'l_extendedprice': 'DOUBLE', 'l_discount': 'DOUBLE', 'l_tax': 'DOUBLE', 'l_returnflag': 'VARCHAR', 'l_linestatus': 'VARCHAR', 'l_shipdate': 'DATE', 'l_commitdate': 'DATE', 'l_receiptdate': 'DATE', 'l_shipinstruct': 'VARCHAR', 'l_shipmode': 'VARCHAR', 'l_comment': 'VARCHAR'});

SELECT COUNT(*) FROM lineitem;

SELECT l_partkey, RTRIM(l_comment) FROM lineitem WHERE l_orderkey = 1 ORDER BY l_linenumber;

SELECT * FROM READ_CSV('data/csv/real/lineitem_sample.csv', sep = '|', columns = {'l_orderkey': 5});

PRAGMA enable_verification;

SELECT * FROM "data/csv/test/dateformat.csv";

SELECT * FROM "data/csv/test/dateformat.csv", "data/csv/test/dateformat_2.csv";

SELECT mytbl.column0 FROM "data/csv/test/dateformat.csv" AS mytbl;

SELECT mytbl.mycol FROM "data/csv/test/dateformat.csv" AS mytbl(mycol);
require AS parquet;

SELECT mytbl.mycol FROM "data/csv/test/dateformat.csv" AS mytbl(mycol);
require AS parquet;

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

SELECT * EXCLUDE (prompt) FROM SNIFF_CSV('__TEST_DIR__/skip.csv', skip = 3000);

SELECT * EXCLUDE (prompt) FROM SNIFF_CSV('__TEST_DIR__/skip.csv', skip = 11000);

SELECT * EXCLUDE (prompt) FROM SNIFF_CSV('__TEST_DIR__/skip.csv', skip = 11000);

SELECT * EXCLUDE (prompt) FROM SNIFF_CSV('__TEST_DIR__/skip.csv', skip = 11000);

SELECT * EXCLUDE (prompt) FROM SNIFF_CSV('__TEST_DIR__/skip.csv', skip = 11000);

SELECT * EXCLUDE (prompt) FROM SNIFF_CSV('__TEST_DIR__/skip.csv', skip = 11000);

SELECT * EXCLUDE (prompt) FROM SNIFF_CSV('__TEST_DIR__/skip.csv', skip = 11000);

SELECT * EXCLUDE (prompt) FROM SNIFF_CSV('__TEST_DIR__/skip.csv', skip = 11000);

SELECT * EXCLUDE (prompt) FROM SNIFF_CSV('__TEST_DIR__/skip.csv', skip = 11000);

SELECT * EXCLUDE (prompt) FROM SNIFF_CSV('__TEST_DIR__/skip.csv', skip = 11000);

CREATE TABLE t (a TEXT);

INSERT INTO t SELECT '#This is a comment' FROM RANGE(0, 10000);

INSERT INTO t SELECT '1,2,3' FROM RANGE(0, 10);

COPY t TO '__TEST_DIR__/skip_2.csv' WITH (HEADER 0, delim ';');

SELECT * FROM READ_CSV('__TEST_DIR__/skip_2.csv', skip = 10000, buffer_size = 26);

SELECT * EXCLUDE (prompt) FROM SNIFF_CSV('__TEST_DIR__/skip_2.csv', skip = 10000);

SELECT * FROM READ_CSV('__TEST_DIR__/skip_2.csv', skip = 10000);

SELECT * FROM READ_CSV('__TEST_DIR__/skip_2.csv', skip = 10000);

SELECT * FROM READ_CSV(['__TEST_DIR__/skip_2.csv', '__TEST_DIR__/skip_2.csv', '__TEST_DIR__/skip_2.csv'], skip = 10000, buffer_size = 26);

SELECT * FROM READ_CSV(['__TEST_DIR__/skip_2.csv', '__TEST_DIR__/skip_2.csv', '__TEST_DIR__/skip_2.csv'], skip = 10000);

CALL dbgen(sf=0.1);

COPY lineitem TO '__TEST_DIR__/lineitem.csv' WITH (DELIMITER '|', HEADER);

SELECT COUNT(*) FROM READ_CSV('__TEST_DIR__/lineitem.csv');

SELECT COUNT(*) FROM READ_CSV('__TEST_DIR__/lineitem.csv', skip = 158310);

SELECT COUNT(*) FROM READ_CSV('__TEST_DIR__/lineitem.csv', skip = 474930);

PRAGMA enable_verification;

CREATE TABLE people AS SELECT * FROM READ_CSV('data/csv/people.csv', columns = {'a': 'VARCHAR', 'b': 'VARCHAR'}, sep = ',', auto_detect = 'false');

SELECT * FROM people;

CREATE TABLE people2 AS SELECT * FROM READ_CSV_AUTO('data/csv/people.csv');

SELECT * FROM people2;

PRAGMA enable_verification;

SELECT * FROM "data/csv/skip_header.csv";

SELECT * FROM READ_CSV_AUTO('data/csv/skip_header.csv', columns = {'a': 'INT32', 'b': 'INT32', 'c': 'INT32'});

PRAGMA enable_verification;

SELECT * FROM READ_CSV('data/csv/bad_csv_file_2047.csv', sample_size = -1);

PRAGMA enable_verification;

SELECT columns FROM SNIFF_CSV('data/csv/test_apple_financial.csv.gz', header = 1, skip = 3, delim = '\t');

SELECT columns FROM SNIFF_CSV('data/csv/test_apple_financial.csv.gz', skip = 3, delim = '\t');

SELECT columns FROM SNIFF_CSV('data/csv/test_apple_financial.csv.gz', skip = 3);

SELECT columns FROM SNIFF_CSV('data/csv/test_apple_financial.csv.gz');

SELECT * FROM READ_CSV('data/csv/test_apple_financial.csv.gz', header = 1, skip = 3);

SELECT * FROM READ_CSV('data/csv/test_apple_financial.csv.gz', skip = 3);

SELECT * FROM READ_CSV('data/csv/test_apple_financial.csv.gz');

PRAGMA enable_verification;

SELECT * FROM SNIFF_CSV('https://github.com/duckdb/duckdb/raw/main/data/csv/who.csv.gz');

PRAGMA enable_verification;

SELECT COUNT(*) FROM "data/csv/soccer_kaggle.csv";

PRAGMA enable_verification;

SELECT * FROM READ_CSV('data/csv/thijs_unquoted.csv', quote = '"', sep = '|', escape = '"', columns = {'a': 'varchar', 'b': 'varchar', 'c': 'integer'}, auto_detect = FALSE);

SELECT * FROM READ_CSV('data/csv/thijs_unquoted.csv', quote = '"', sep = '|', escape = '"', columns = {'a': 'varchar', 'b': 'varchar', 'c': 'integer'}, auto_detect = FALSE, strict_mode = FALSE);

SELECT DELIMITER, QUOTE FROM SNIFF_CSV('data/csv/rabo-anon.csv.gz', strict_mode = FALSE);

CREATE TABLE T AS SELECT * FROM READ_CSV('data/csv/rabo-anon.csv.gz', strict_mode = FALSE);

SELECT COUNT(*) FROM T;

SELECT * FROM T LIMIT 1;

PRAGMA enable_verification;

SELECT * FROM READ_CSV('data/csv/auto/invalid_time.csv', header = 0);

SELECT * FROM "data/csv/auto/time.csv";

SELECT * FROM "data/csv/auto/various_time_formats.csv";

SELECT columns FROM SNIFF_CSV('data/csv/auto/various_time_formats.csv');

PRAGMA enable_verification;

SELECT * FROM READ_CSV('data/csv/timestamp_tz.csv', dtypes = [TIMESTAMPTZ]);

SELECT * FROM READ_CSV('data/csv/timestamp_tz.csv', dtypes = [TIMESTAMPTZ], timestampformat = '%d/%m/%Y');

CREATE TABLE test (column0 TIMESTAMPTZ);

INSERT INTO test SELECT * FROM "data/csv/timestamp_tz.csv";

INSERT INTO test SELECT * FROM READ_CSV('data/csv/timestamp_tz.csv', dtypes = [TIMESTAMPTZ], timestampformat = '%d/%m/%Y');

SELECT * FROM test;

PRAGMA enable_verification;

SELECT col1, TYPEOF(col1) FROM "data/csv/test/timestampoffset.csv" AS t1(col1);

PRAGMA enable_verification;

SET default_null_order = 'nulls_first';

CREATE TABLE ubn1 (a BIGINT);

CREATE TABLE ubn2 (a INT, b INT);

CREATE TABLE ubn3 (a INT, c INT);

INSERT INTO ubn1 VALUES (1), (2), (9223372036854775807);

INSERT INTO ubn2 VALUES (3, 4), (5, 6);

INSERT INTO ubn3 VALUES (100, 101), (102, 103);

COPY ubn1 TO '__TEST_DIR__/ubn1.csv' WITH (DELIMITER ',');

COPY ubn2 TO '__TEST_DIR__/ubn2.csv' WITH (DELIMITER ',');

COPY ubn3 TO '__TEST_DIR__/ubn3.csv' WITH (DELIMITER ',');

SELECT * FROM READ_CSV_AUTO(['__TEST_DIR__/ubn1.csv', '__TEST_DIR__/ubn2.csv', '__TEST_DIR__/ubn3.csv']);

SELECT a, b, c FROM READ_CSV_AUTO(['__TEST_DIR__/ubn1.csv', '__TEST_DIR__/ubn2.csv', '__TEST_DIR__/ubn3.csv'], UNION_BY_NAME = TRUE) ORDER BY a;

SELECT a, b, c, REPLACE(REPLACE(filename, '__TEST_DIR__', ''), '\', '/')[2 : ] FROM READ_CSV_AUTO(['__TEST_DIR__/ubn1.csv', '__TEST_DIR__/ubn2.csv', '__TEST_DIR__/ubn3.csv'], UNION_BY_NAME = TRUE) ORDER BY a;

SELECT COUNT(a), COUNT(b), COUNT(c), COUNT(filename) FROM READ_CSV_AUTO(['__TEST_DIR__/ubn1.csv', '__TEST_DIR__/ubn2.csv', '__TEST_DIR__/ubn3.csv'], UNION_BY_NAME = TRUE);

SELECT TYPEOF(a), TYPEOF(b), TYPEOF(c) FROM READ_CSV_AUTO(['__TEST_DIR__/ubn1.csv', '__TEST_DIR__/ubn2.csv', '__TEST_DIR__/ubn3.csv'], UNION_BY_NAME = TRUE) LIMIT 1;

SELECT * FROM READ_CSV_AUTO(['data/csv/union-by-name/ubn1.csv', 'data/csv/union-by-name/ubn2.csv', 'data/csv/union-by-name/ubn3.csv', 'data/csv/union-by-name/ubn4.csv']);

SELECT a, b, c, ts, k FROM READ_CSV_AUTO('data/csv/union-by-name/ubn*.csv', UNION_BY_NAME = TRUE) ORDER BY a, c, ts;

SELECT TYPEOF(a), TYPEOF(b), TYPEOF(c), TYPEOF(ts), TYPEOF(k) FROM READ_CSV_AUTO('data/csv/union-by-name/ubn*.csv', UNION_BY_NAME = TRUE) LIMIT 1;

SELECT c, k FROM READ_CSV_AUTO('data/csv/union-by-name/ubn*.csv', UNION_BY_NAME = TRUE) ORDER BY c, k;

SELECT ts FROM READ_CSV_AUTO('data/csv/union-by-name/ubn*.csv', UNION_BY_NAME = TRUE) ORDER BY ts;

SELECT TYPEOF(a), TYPEOF(b), TYPEOF(ts) FROM READ_CSV_AUTO('data/csv/union-by-name/ubn2.csv') LIMIT 1;

SELECT a, b, c, ts, REPLACE(filename, '\', '/') FROM READ_CSV_AUTO('data/csv/union-by-name/ubn[12].csv', FILENAME = TRUE, UNION_BY_NAME = TRUE) ORDER BY a, c, ts;

SELECT TYPEOF(a), TYPEOF(b), TYPEOF(c), TYPEOF(ts) FROM READ_CSV_AUTO('data/csv/union-by-name/ubn[12].csv', UNION_BY_NAME = TRUE) LIMIT 1;

SELECT TYPEOF(ts) FROM READ_CSV_AUTO('data/csv/union-by-name/ubn[23].csv', UNION_BY_NAME = TRUE) LIMIT 1;

SELECT k, c, ts, REPLACE(filename, '\', '/') FROM READ_CSV_AUTO('data/csv/union-by-name/ubn[!1-2].csv', FILENAME = TRUE, UNION_BY_NAME = TRUE) ORDER BY c;

SELECT * FROM READ_CSV_AUTO('data/csv/union-by-name/part=[ab]/*', HIVE_PARTITIONING = TRUE, null_padding = 0);

SELECT id, value, a, part FROM READ_CSV_AUTO('data/csv/union-by-name/part=[ab]/*', HIVE_PARTITIONING = TRUE, UNION_BY_NAME = TRUE) ORDER BY id;

SELECT * FROM READ_CSV_AUTO('data/csv/union-by-name/*[!a]/*', HIVE_PARTITIONING = TRUE, UNION_BY_NAME = TRUE);

SELECT * FROM READ_CSV('data/csv/union_by_name_2/*.csv', union_by_name = TRUE, parallel = FALSE);

PRAGMA enable_verification;

PRAGMA enable_verification;

SELECT * FROM READ_CSV(['data/csv/union-by-name/gabor/Post/*.csv', 'data/csv/union-by-name/gabor/Comment/*.csv'], union_by_name = TRUE) ORDER BY ALL LIMIT 1;

PRAGMA enable_verification;

SELECT * FROM READ_CSV('data/csv/click_mini.tsv.gz');

PRAGMA enable_verification;

PRAGMA enable_verification;

CREATE TABLE web_page (wp_web_page_sk INT NOT NULL, wp_web_page_id TEXT NOT NULL, wp_rec_start_date DATE, wp_rec_end_date DATE, wp_creation_date_sk INT, wp_access_date_sk INT, wp_autogen_flag TEXT, wp_customer_sk INT, wp_url TEXT, wp_type TEXT, wp_char_count INT, wp_link_count INT, wp_image_count INT, wp_max_ad_count INT, PRIMARY KEY (wp_web_page_sk));

COPY web_page FROM 'data/csv/real/web_page.csv' WITH (DELIMITER '|');

SELECT * FROM web_page ORDER BY wp_web_page_sk LIMIT 3;

COPY web_page TO '__TEST_DIR__/web_page.csv' WITH (DELIMITER ' ', HEADER);

DELETE FROM web_page;

SELECT * FROM web_page;

COPY web_page FROM '__TEST_DIR__/web_page.csv' WITH (DELIMITER ' ', HEADER);

SELECT * FROM web_page ORDER BY wp_web_page_sk LIMIT 3;

PRAGMA enable_verification;

CREATE TABLE test (a INT, b TEXT, c INT);

COPY test FROM 'data/csv/test/windows_newline.csv';

SELECT SUM(a), MIN(LENGTH(b)), MAX(LENGTH(b)), SUM(LENGTH(b)), SUM(c) FROM test;

DELETE FROM test;

COPY test FROM 'data/csv/test/windows_newline.csv' WITH (QUOTE 'BLABLABLA', AUTO_DETECT FALSE);

DROP TABLE test;

CREATE TABLE test (a INT);

COPY test FROM 'data/csv/test/windows_newline_empty.csv' WITH (HEADER 0);

SELECT SUM(a) FROM test;

PRAGMA enable_verification;

SELECT * FROM READ_CSV('data/csv/timestamp.csv', columns = {'a': 'BIGINT'}, new_line = '\r', strict_mode = FALSE);

SELECT * FROM READ_CSV('data/csv/timestamp.csv', columns = {'a': 'BIGINT'}, new_line = '\n', strict_mode = FALSE);

SELECT * FROM READ_CSV('data/csv/timestamp.csv', columns = {'a': 'BIGINT'}, new_line = '\r\n', auto_detect = FALSE, strict_mode = FALSE);

SELECT * FROM READ_CSV('data/csv/timestamp.csv', columns = {'a': 'BIGINT'}, new_line = '\n\r', strict_mode = FALSE);

PRAGMA enable_verification;

CREATE TABLE tbl (id INT, ts TIMESTAMP);

COPY tbl FROM 'data/csv/timestamp_with_tz.csv' WITH (HEADER);

CREATE TABLE tbl_tz (id INT, ts TIMESTAMPTZ);

COPY tbl_tz FROM 'data/csv/timestamp_with_tz.csv' WITH (HEADER);

SET TimeZone = 'UTC';

SELECT * FROM tbl_tz;

CALL dbgen(sf=0.1, suffix='_original');

CALL dbgen(sf=0);

SET preserve_insertion_order=false
foreach tpch_tbl orders customer lineitem nation part partsupp region supplier;

SET preserve_insertion_order=false
foreach tpch_tbl orders customer lineitem nation part partsupp region supplier;

SET preserve_insertion_order=false
foreach tpch_tbl orders customer lineitem nation part partsupp region supplier;

SET preserve_insertion_order=false
foreach tpch_tbl orders customer lineitem nation part partsupp region supplier;

SET preserve_insertion_order=false
foreach tpch_tbl orders customer lineitem nation part partsupp region supplier;

PRAGMA enable_verification;

CREATE TABLE people (id INT, name TEXT);

INSERT INTO people VALUES (1, 'Mark'), (2, 'Hannes');

COPY people TO '__TEST_DIR__/test.tsv' WITH (DELIMITER '\t');

SELECT * FROM "__TEST_DIR__/test.tsv";

SELECT * FROM READ_CSV('__TEST_DIR__/test.tsv', sep = '\t', columns = {'id': 'INTEGER', 'name': 'VARCHAR'});

PRAGMA enable_verification;

SELECT * FROM "data/csv/issue2628_中文.csv";

SELECT * FROM "data/csv/*中文.csv";

SELECT * FROM "data/csv/中文/*.csv" ORDER BY 1;

SELECT * FROM "data/csv/中*/*.csv" ORDER BY 1;

PRAGMA enable_verification;

CALL dbgen(sf=0.1);

COPY (SELECT l_orderkey, l_partkey, l_suppkey FROM lineitem) TO '__TEST_DIR__/union_by_name_lineitem1.csv' WITH (HEADER);

COPY (SELECT l_partkey, l_suppkey, l_orderkey FROM lineitem) TO '__TEST_DIR__/union_by_name_lineitem2.csv' WITH (HEADER);

SELECT SUM(l_partkey), SUM(l_suppkey), SUM(l_orderkey) FROM READ_CSV_AUTO('__TEST_DIR__/union_by_name_lineitem*.csv', unioN_by_name = TRUE);

PRAGMA enable_verification;

CREATE OR REPLACE TABLE orders (m INT, v INT, j INT);

CREATE OR REPLACE TABLE orders (m INT, v INT, j INT);

CREATE OR REPLACE TABLE orders (m INT, v INT, j INT);

CREATE OR REPLACE TABLE orders (m INT, v INT, j INT);

CREATE OR REPLACE TABLE orders (m INT, v INT, j INT);

CREATE OR REPLACE TABLE orders (m INT, v INT, j INT);

CREATE OR REPLACE TABLE orders (m INT, v INT, j INT);

CREATE OR REPLACE TABLE orders (m INT, v INT, j INT);

PRAGMA enable_verification;

CREATE TABLE t (a INT);

INSERT INTO t VALUES (1), (2), (NULL);

COPY t TO '__TEST_DIR__/t_default.tsv' WITH (DELIMITER '\t');

SELECT * FROM READ_CSV_AUTO('__TEST_DIR__/t_default.tsv', header = 0);

COPY t TO '__TEST_DIR__/t_default.tsv' WITH (DELIMITER '\t');

SELECT * FROM READ_CSV_AUTO('__TEST_DIR__/t_default.tsv', header = 0);

COPY t TO '__TEST_DIR__/t_default.tsv' WITH (DELIMITER '\t', HEADER 0);

SELECT * FROM READ_CSV_AUTO('__TEST_DIR__/t_default.tsv', header = 0);

PRAGMA enable_verification;

SELECT * FROM READ_CSV('data/csv/afl/20250211_csv_fuzz_crash/case_53.csv', buffer_size = 42);

PRAGMA enable_verification;

SELECT COUNT(file) FROM GLOB('./data/csv/afl/20250226_csv_fuzz_error/*');

SELECT * FROM READ_CSV('data/csv/afl/20250226_csv_fuzz_error/case_1.csv', force_not_null = 012 % 0, columns = {'a': 'JSON'});

SELECT COUNT(file) FROM GLOB('./data/csv/afl/3977/*');

SELECT * FROM READ_CSV('data/csv/afl/3977/case_1.csv', rejects_scan = 0, buffer_size = 655371, all_varchar = FALSE, rejects_scan = 0, buffer_size = 42);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_2.csv', names = ['a', 'b', 'c', 'd'], store_rejects = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_3.csv', names = ['a', 'b', 'c', 'd'], store_rejects = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_4.csv', names = ['a', 'b', 'c', 'd'], store_rejects = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_5.csv', auto_detect = FALSE, columns = {'a': 'VARCHAR'}, escape = '"', header = FALSE, quote = '"', strict_mode = TRUE, store_rejects = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_6.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_7.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_8.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_9.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = FALSE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_10.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_11.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_12.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_13.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_14.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_15.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_16.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_17.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_18.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_19.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_20.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_21.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_22.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_23.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_24.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_25.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_26.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_27.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_28.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_29.csv', auto_detect = FALSE, buffer_size = 65536, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_30.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_31.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_32.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_33.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_34.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_35.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_36.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_37.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_38.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_39.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_40.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, comment = ';', rejects_table = '"', strict_mode = FALSE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_41.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_42.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_43.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_44.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_45.csv', auto_detect = FALSE, buffer_size = 810, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_46.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_47.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_48.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_49.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_50.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a': 'INTEGER', '': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_51.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a': 'INTEGER', 'b': 'INTEGER', '|': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_52.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_53.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_54.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAr'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_55.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_56.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_57.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_58.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_59.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a': 'INTEGER', '"': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_60.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_61.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_62.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_63.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_64.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_65.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_66.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_67.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_68.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_69.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_70.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_71.csv', auto_detect = FALSE, buffer_size = 16711722, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_72.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a': 'INTEGER', 'F': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_73.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_74.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_75.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_76.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_77.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_78.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_79.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_80.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_81.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_82.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_83.csv', auto_detect = FALSE, parallel = FALSE, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_84.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_85.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_86.csv', auto_detect = FALSE, buffer_size = 720938, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_87.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a2.0-22222222222222222.0222->>': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/3977/case_88.csv', auto_detect = FALSE, buffer_size = 42, columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, delim = ';', rejects_table = '"', strict_mode = TRUE);

PRAGMA enable_verification;

SELECT COUNT(file) FROM GLOB('data/csv/afl/3981/*');

SELECT * FROM READ_CSV('data/csv/afl/3981/case_0.csv', compression = 'gzip');

SELECT * FROM READ_CSV('data/csv/afl/3981/case_1.csv', compression = 'gzip');

SELECT * FROM READ_CSV('data/csv/afl/3981/case_2.csv', compression = 'gzip');

SELECT * FROM READ_CSV('data/csv/afl/3981/case_3.csv', compression = 'gzip');

SELECT * FROM READ_CSV('data/csv/afl/3981/case_4.csv', compression = 'gzip');

SELECT * FROM READ_CSV('data/csv/afl/3981/case_5.csv', compression = 'gzip');

SELECT * FROM READ_CSV('data/csv/afl/3981/case_6.csv', compression = 'gzip');

SELECT * FROM READ_CSV('data/csv/afl/4086/case_1.csv', auto_detect = FALSE, columns = {'json': 'JSON'}, delim = NULL, buffer_size = 42, store_rejects = TRUE, rejects_limit = 658694493994253607);

SELECT * FROM READ_CSV('data/csv/afl/4086/case_2.csv', auto_detect = FALSE, columns = {'json': 'JSON'}, delim = NULL, buffer_size = 42, store_rejects = TRUE, rejects_limit = 658694493994253607);

SELECT * FROM READ_CSV('data/csv/afl/4086/case_3.csv', auto_detect = FALSE, columns = {'json': 'JSON'}, delim = '\0', buffer_size = 42, store_rejects = TRUE, rejects_limit = 658694493994253607);

PRAGMA enable_verification;

SELECT * FROM READ_CSV('data/csv/afl/4172/case_4.csv', ignore_errors = TRUE, buffer_size = 1, store_rejects = FALSE);

SELECT * FROM READ_CSV('data/csv/afl/4496/crashes/case_0.csv', auto_detect = FALSE, buffer_size = 42, columns = {'json': 'JSON'}, delim = NULL, rejects_limit = 658694493994253607, store_rejects = TRUE);

SELECT * FROM READ_CSV('data/csv/afl/4496/crashes/case_1.csv', auto_detect = FALSE, buffer_size = 42, columns = {'json': 'JSON'}, delim = NULL, rejects_limit = 658694493994253607, store_rejects = TRUE);

PRAGMA enable_verification;

SELECT COUNT(*) FROM (SELECT * FROM READ_CSV('data/csv/auto/14177.csv', buffer_size = 80, ignore_errors = TRUE)) AS t;

PRAGMA enable_verification;

PRAGMA verify_parallelism;

SELECT COUNT(*) FROM READ_CSV_AUTO('data/csv/page_namespacepage_title_sample.csv', SAMPLE_SIZE = -1);

PRAGMA enable_verification;

PRAGMA verify_parallelism;

SELECT COUNT(*) FROM READ_CSV_AUTO('data/csv/auto/titlebasicsdebug.tsv', nullstr = '\N', sample_size = -1);

PRAGMA enable_verification;

CREATE VIEW locations_header_trailing_comma AS SELECT * FROM READ_CSV_AUTO('data/csv/locations_row_trailing_comma.csv', null_padding = TRUE);

SELECT * FROM locations_header_trailing_comma;

DESCRIBE locations_header_trailing_comma;

PRAGMA enable_verification;

PRAGMA verify_parallelism;

SELECT TYPEOF(bignumber), TYPEOF(CAST(bignumber AS DECIMAL(25, 3))) FROM READ_CSV('data/csv/big_number.csv', COLUMNS = {'bignumber': 'DECIMAL(25,3)'}, QUOTE = '"', DELIM = ',');

SELECT TYPEOF(bignumber), TYPEOF(CAST(bignumber AS DECIMAL(25, 3))) FROM READ_CSV_AUTO('data/csv/big_number.csv', COLUMNS = {'bignumber': 'DECIMAL(25,3)'}, QUOTE = '"', DELIM = ',');

PRAGMA enable_verification;

PRAGMA verify_parallelism;

SELECT * FROM READ_CSV_AUTO("data/csv/dim0.csv");

PRAGMA enable_verification;

PRAGMA verify_parallelism;

SELECT COUNT(*) FROM READ_CSV_AUTO("data/csv/auto/product_codes_HS17_V202301.csv.gz", quote = '"', comment = '', delim = ',');

PRAGMA enable_verification;

SELECT * FROM READ_CSV('data/csv/test/multi_column_string.csv', COLUMN_TYPES = {'a': 'INTEGER'});

SELECT * FROM READ_CSV_AUTO('data/csv/test/multi_column_string.csv', COLUMN_TYPES = 1);

SELECT * FROM READ_CSV_AUTO('data/csv/test/multi_column_string.csv', COLUMN_TYPES = {});

SELECT * FROM READ_CSV_AUTO('data/csv/test/multi_column_string.csv', COLUMN_TYPES = {'a': 'BLA'});

SELECT * FROM READ_CSV_AUTO('data/csv/test/multi_column_string.csv', COLUMN_TYPES = {'bla': 'INTEGER'});

SELECT * FROM READ_CSV_AUTO('data/csv/test/multi_column_string.csv', COLUMN_TYPES = {'column3': 'INTEGER'});

SELECT * FROM READ_CSV_AUTO('data/csv/test/multi_column_string.csv', COLUMN_TYPES = {'column3': 'INTEGER'});

SELECT * FROM READ_CSV_AUTO('data/csv/test/multi_column_string.csv', COLUMN_TYPES = {'column3': 'INTEGER'});

SELECT * FROM READ_CSV_AUTO('data/csv/test/multi_column_string.csv', COLUMN_TYPES = {'column3': 'INTEGER'});

SELECT * FROM READ_CSV_AUTO('data/csv/test/multi_column_string.csv', COLUMN_TYPES = {'column3': 'INTEGER'});

SELECT * FROM READ_CSV_AUTO('data/csv/test/multi_column_string.csv', COLUMN_TYPES = {'column0': 'BIGINT', 'column2': 'HUGEINT'});

PRAGMA enable_verification;

CREATE TABLE cranlogs AS SELECT * FROM READ_CSV_AUTO('data/csv/real/tmp2013-06-15.csv.gz');

SELECT COUNT(*) FROM cranlogs;

SELECT * FROM cranlogs LIMIT 5;

PRAGMA verify_parallelism;

CREATE TABLE cranlogs2 AS SELECT * FROM READ_CSV_AUTO('data/csv/real/tmp2013-06-15.csv.gz');

(SELECT * FROM cranlogs EXCEPT SELECT * FROM cranlogs2) UNION ALL (SELECT * FROM cranlogs2 EXCEPT SELECT * FROM cranlogs);

PRAGMA enable_verification;

CREATE TABLE IF NOT EXISTS ncvoters (county_id INT, county_desc TEXT, voter_reg_num TEXT, status_cd TEXT, voter_status_desc TEXT, reason_cd TEXT, voter_status_reason_desc TEXT, absent_ind TEXT, name_prefx_cd TEXT, last_name TEXT, first_name TEXT, midl_name TEXT, name_sufx_cd TEXT, full_name_rep TEXT, full_name_mail TEXT, house_num TEXT, half_code TEXT, street_dir TEXT, street_name TEXT, street_type_cd TEXT, street_sufx_cd TEXT, unit_designator TEXT, unit_num TEXT, res_city_desc TEXT, state_cd TEXT, zip_code TEXT, res_street_address TEXT, res_city_state_zip TEXT, mail_addr1 TEXT, mail_addr2 TEXT, mail_addr3 TEXT, mail_addr4 TEXT, mail_city TEXT, mail_state TEXT, mail_zipcode TEXT, mail_city_state_zip TEXT, area_cd TEXT, phone_num TEXT, full_phone_number TEXT, drivers_lic TEXT, race_code TEXT, race_desc TEXT, ethnic_code TEXT, ethnic_desc TEXT, party_cd TEXT, party_desc TEXT, sex_code TEXT, sex TEXT, birth_age TEXT, birth_place TEXT, registr_dt TEXT, precinct_abbrv TEXT, precinct_desc TEXT, municipality_abbrv TEXT, municipality_desc TEXT, ward_abbrv TEXT, ward_desc TEXT, cong_dist_abbrv TEXT, cong_dist_desc TEXT, super_court_abbrv TEXT, super_court_desc TEXT, judic_dist_abbrv TEXT, judic_dist_desc TEXT, nc_senate_abbrv TEXT, nc_senate_desc TEXT, nc_house_abbrv TEXT, nc_house_desc TEXT, county_commiss_abbrv TEXT, county_commiss_desc TEXT, township_abbrv TEXT, township_desc TEXT, school_dist_abbrv TEXT, school_dist_desc TEXT, fire_dist_abbrv TEXT, fire_dist_desc TEXT, water_dist_abbrv TEXT, water_dist_desc TEXT, sewer_dist_abbrv TEXT, sewer_dist_desc TEXT, sanit_dist_abbrv TEXT, sanit_dist_desc TEXT, rescue_dist_abbrv TEXT, rescue_dist_desc TEXT, munic_dist_abbrv TEXT, munic_dist_desc TEXT, dist_1_abbrv TEXT, dist_1_desc TEXT, dist_2_abbrv TEXT, dist_2_desc TEXT, confidential_ind TEXT, age TEXT, ncid TEXT, vtd_abbrv TEXT, vtd_desc TEXT);

COPY ncvoters FROM 'data/csv/real/ncvoter.csv' WITH (FORMAT CSV, AUTO_DETECT TRUE);

SELECT county_id, county_desc, vtd_desc, name_prefx_cd FROM ncvoters;

PRAGMA verify_parallelism;

CREATE TABLE ncvoters2 AS SELECT * FROM ncvoters LIMIT 0;

COPY ncvoters2 FROM 'data/csv/real/ncvoter.csv' WITH (FORMAT CSV, AUTO_DETECT TRUE);

(SELECT * FROM ncvoters EXCEPT SELECT * FROM ncvoters2) UNION ALL (SELECT * FROM ncvoters2 EXCEPT SELECT * FROM ncvoters);

PRAGMA enable_verification;

PRAGMA verify_parallelism;

CREATE TABLE greek_utf8 AS SELECT i, NFC_NORMALIZE(j) AS j, k FROM READ_CSV_AUTO('data/csv/real/greek_utf8.csv') AS t(i, j, k);

SELECT COUNT(*) FROM greek_utf8;

SELECT * FROM greek_utf8 ORDER BY 1;

SELECT i, NFC_NORMALIZE(j) AS j, k FROM "data/csv/real/greek_utf8.csv" AS t(i, j, k);

PRAGMA enable_verification;

CREATE TABLE movie_info AS SELECT * FROM READ_CSV_AUTO('data/csv/real/imdb_movie_info_escaped.csv');

SELECT COUNT(*) FROM movie_info;

CREATE TABLE movie_info2 AS SELECT * FROM READ_CSV_AUTO('data/csv/real/imdb_movie_info_escaped.csv');

CREATE TABLE movie_info2 AS SELECT * FROM READ_CSV_AUTO('data/csv/real/imdb_movie_info_escaped.csv');

PRAGMA enable_verification;

CREATE TABLE lineitem (l_orderkey INT NOT NULL, l_partkey INT NOT NULL, l_suppkey INT NOT NULL, l_linenumber INT NOT NULL, l_quantity INT NOT NULL, l_extendedprice DECIMAL(15, 2) NOT NULL, l_discount DECIMAL(15, 2) NOT NULL, l_tax DECIMAL(15, 2) NOT NULL, l_returnflag TEXT NOT NULL, l_linestatus TEXT NOT NULL, l_shipdate DATE NOT NULL, l_commitdate DATE NOT NULL, l_receiptdate DATE NOT NULL, l_shipinstruct TEXT NOT NULL, l_shipmode TEXT NOT NULL, l_comment TEXT NOT NULL);

COPY lineitem FROM 'data/csv/real/lineitem_sample.csv' WITH (FORMAT CSV, AUTO_DETECT TRUE);

SELECT COUNT(*) FROM lineitem;

SELECT l_partkey, l_comment FROM lineitem WHERE l_orderkey = 1 ORDER BY l_linenumber;

PRAGMA verify_parallelism;

CREATE TABLE lineitem2 AS SELECT * FROM lineitem LIMIT 0;

COPY lineitem2 FROM 'data/csv/real/lineitem_sample.csv' WITH (FORMAT CSV, AUTO_DETECT TRUE);

(SELECT * FROM lineitem EXCEPT SELECT * FROM lineitem2) UNION ALL (SELECT * FROM lineitem2 EXCEPT SELECT * FROM lineitem);

PRAGMA enable_verification;

CREATE TABLE ontime (year SMALLINT, quarter SMALLINT, month SMALLINT, dayofmonth SMALLINT, dayofweek SMALLINT, flightdate DATE, uniquecarrier TEXT, airlineid DECIMAL(8, 2), carrier TEXT, tailnum TEXT, flightnum TEXT, originairportid INT, originairportseqid INT, origincitymarketid INT, origin TEXT, origincityname TEXT, originstate TEXT, originstatefips TEXT, originstatename TEXT, originwac DECIMAL(8, 2), destairportid INT, destairportseqid INT, destcitymarketid INT, dest TEXT, destcityname TEXT, deststate TEXT, deststatefips TEXT, deststatename TEXT, destwac DECIMAL(8, 2), crsdeptime DECIMAL(8, 2), deptime DECIMAL(8, 2), depdelay DECIMAL(8, 2), depdelayminutes DECIMAL(8, 2), depdel15 DECIMAL(8, 2), departuredelaygroups DECIMAL(8, 2), deptimeblk TEXT, taxiout DECIMAL(8, 2), wheelsoff DECIMAL(8, 2), wheelson DECIMAL(8, 2), taxiin DECIMAL(8, 2), crsarrtime DECIMAL(8, 2), arrtime DECIMAL(8, 2), arrdelay DECIMAL(8, 2), arrdelayminutes DECIMAL(8, 2), arrdel15 DECIMAL(8, 2), arrivaldelaygroups DECIMAL(8, 2), arrtimeblk TEXT, cancelled DECIMAL(8, 2), cancellationcode TEXT, diverted DECIMAL(8, 2), crselapsedtime DECIMAL(8, 2), actualelapsedtime DECIMAL(8, 2), airtime DECIMAL(8, 2), flights DECIMAL(8, 2), distance DECIMAL(8, 2), distancegroup DECIMAL(8, 2), carrierdelay DECIMAL(8, 2), weatherdelay DECIMAL(8, 2), nasdelay DECIMAL(8, 2), securitydelay DECIMAL(8, 2), lateaircraftdelay DECIMAL(8, 2), firstdeptime TEXT, totaladdgtime TEXT, longestaddgtime TEXT, divairportlandings TEXT, divreacheddest TEXT, divactualelapsedtime TEXT, divarrdelay TEXT, divdistance TEXT, div1airport TEXT, div1aiportid INT, div1airportseqid INT, div1wheelson TEXT, div1totalgtime TEXT, div1longestgtime TEXT, div1wheelsoff TEXT, div1tailnum TEXT, div2airport TEXT, div2airportid INT, div2airportseqid INT, div2wheelson TEXT, div2totalgtime TEXT, div2longestgtime TEXT, div2wheelsoff TEXT, div2tailnum TEXT, div3airport TEXT, div3airportid INT, div3airportseqid INT, div3wheelson TEXT, div3totalgtime TEXT, div3longestgtime TEXT, div3wheelsoff TEXT, div3tailnum TEXT, div4airport TEXT, div4airportid INT, div4airportseqid INT, div4wheelson TEXT, div4totalgtime TEXT, div4longestgtime TEXT, div4wheelsoff TEXT, div4tailnum TEXT, div5airport TEXT, div5airportid INT, div5airportseqid INT, div5wheelson TEXT, div5totalgtime TEXT, div5longestgtime TEXT, div5wheelsoff TEXT, div5tailnum TEXT);

COPY ontime FROM 'data/csv/real/ontime_sample.csv';

SELECT year, uniquecarrier, origin, origincityname, div5longestgtime FROM ontime;

PRAGMA verify_parallelism;

CREATE TABLE ontime2 AS SELECT * FROM ontime LIMIT 0;

COPY ontime2 FROM 'data/csv/real/ontime_sample.csv';

(SELECT * FROM ontime EXCEPT SELECT * FROM ontime2) UNION ALL (SELECT * FROM ontime2 EXCEPT SELECT * FROM ontime);

PRAGMA enable_verification;

CREATE TABLE voters AS SELECT * FROM READ_CSV_AUTO('data/csv/real/voter.tsv');

SELECT COUNT(*) FROM voters;

SELECT COUNT(*) FROM "data/csv/real/voter.tsv";

PRAGMA verify_parallelism;

CREATE TABLE voters2 AS SELECT * FROM READ_CSV_AUTO('data/csv/real/voter.tsv');

(SELECT * FROM voters EXCEPT SELECT * FROM voters2) UNION ALL (SELECT * FROM voters2 EXCEPT SELECT * FROM voters);

CREATE TABLE web_page AS SELECT * FROM READ_CSV_AUTO('data/csv/real/web_page.csv');

SELECT COUNT(*) FROM web_page;

SELECT * FROM web_page ORDER BY column00 LIMIT 3;

PRAGMA verify_parallelism;

CREATE TABLE web_page2 AS SELECT * FROM READ_CSV_AUTO('data/csv/real/web_page.csv');

(SELECT * FROM web_page EXCEPT SELECT * FROM web_page2) UNION ALL (SELECT * FROM web_page2 EXCEPT SELECT * FROM web_page);

PRAGMA enable_verification;

PRAGMA verify_parallelism;

SELECT * FROM READ_CSV('data/csv/repromarket.csv', columns = {'email': 'varchar', 'password': 'varchar'}, all_varchar = TRUE, delim = ':', header = FALSE, skip = 0, null_padding = TRUE, ignore_errors = TRUE, strict_mode = FALSE);

SELECT * FROM READ_CSV('data/csv/pipe_delim.csv', columns = {'a': 'VARCHAR'}, auto_detect = FALSE);

SELECT * FROM READ_CSV('data/csv/nullterm.csv');

SELECT * FROM READ_CSV('data/csv/nullterm.csv', quote = '"', escape = '"');

SELECT * FROM READ_CSV('data/csv/single_quote.csv', quote = '"');

SELECT columns FROM SNIFF_CSV('data/csv/auto/mock_duckdb_test_data.csv', ignore_errors = TRUE);

SELECT * FROM READ_CSV('data/csv/auto/mock_duckdb_test_data.csv', ignore_errors = TRUE, strict_mode = TRUE);

SELECT * FROM READ_CSV_AUTO('data/csv/dates.csv', auto_detect = FALSE, delim = ',', quote = '"', columns = {'a': 'VARCHAR'}, strict_mode = TRUE);

SELECT * FROM READ_CSV_AUTO('data/csv/dates.csv');

SELECT * FROM READ_CSV_AUTO('data/csv/from_df.csv', quote = '''');

CREATE TABLE test AS SELECT * FROM READ_CSV_AUTO('data/csv/auto/rfc_conform.csv');

SELECT * FROM test ORDER BY column0;

DROP TABLE test;

CREATE TABLE test AS SELECT * FROM READ_CSV_AUTO('data/csv/auto/rfc_conform_quote.csv');

SELECT * FROM test ORDER BY column0;

DROP TABLE test;

CREATE TABLE test AS SELECT * FROM READ_CSV_AUTO('data/csv/auto/leading_space_numerics.csv');

SELECT * FROM test ORDER BY column0;

DROP TABLE test;

CREATE TABLE test AS SELECT * FROM READ_CSV_AUTO('data/csv/auto/pipe_delim.csv');

SELECT * FROM test ORDER BY column0;

DROP TABLE test;

CREATE TABLE test AS SELECT * FROM READ_CSV_AUTO('data/csv/auto/pipe_delim_quote.csv');

SELECT * FROM test ORDER BY column0;

DROP TABLE test;

CREATE TABLE test AS SELECT * FROM READ_CSV_AUTO('data/csv/auto/quote_escape.csv');

SELECT * FROM test ORDER BY column0;

DROP TABLE test;

CREATE TABLE test AS SELECT * FROM READ_CSV_AUTO('data/csv/auto/backslash_escape.csv');

SELECT * FROM test ORDER BY column0;

DROP TABLE test;

CREATE TABLE test AS SELECT * FROM READ_CSV_AUTO('data/csv/auto/single_quote_backslash.csv');

SELECT * FROM test ORDER BY column0;

DROP TABLE test;

CREATE TABLE test AS SELECT * FROM READ_CSV_AUTO('data/csv/auto/semicolon_delim.csv');

SELECT * FROM test ORDER BY column0;

DROP TABLE test;

CREATE TABLE test AS SELECT * FROM READ_CSV_AUTO('data/csv/auto/semicolon_quote.csv');

SELECT * FROM test ORDER BY column0;

DROP TABLE test;

CREATE TABLE test AS SELECT * FROM READ_CSV_AUTO('data/csv/auto/semicolon_escape.csv');

SELECT * FROM test ORDER BY column0;

DROP TABLE test;

CREATE TABLE test AS SELECT * FROM READ_CSV_AUTO('data/csv/auto/tab.csv');

SELECT * FROM test ORDER BY column0;

DROP TABLE test;

CREATE TABLE test AS SELECT * FROM READ_CSV_AUTO('data/csv/auto/tab_single_quote.csv');

SELECT * FROM test ORDER BY column0;

DROP TABLE test;

CREATE TABLE test AS SELECT * FROM READ_CSV_AUTO('data/csv/auto/tab_single_quote_varchar.csv');

SELECT * FROM test ORDER BY column0;

DROP TABLE test;

CREATE TABLE test AS SELECT * FROM READ_CSV_AUTO('data/csv/auto/issue_1254.csv');

SELECT a, b FROM test;

PRAGMA enable_verification;

SELECT * FROM READ_CSV_AUTO('data/csv/auto/date_format_bug_linux.csv');

PRAGMA enable_verification;

CREATE VIEW v AS SELECT * FROM READ_CSV_AUTO('data/csv/who.csv.gz');

DESCRIBE v;

DESCRIBE SELECT * FROM v;

PRAGMA enable_verification;

DESCRIBE SELECT * FROM "data/csv/double_quoted_header.csv";

SELECT * FROM "data/csv/double_quoted_header.csv";

PRAGMA enable_verification;

SELECT * FROM READ_CSV('data/csv/auto/early_out_error.csv', buffer_size = 8, maximum_line_size = 8, auto_detect = FALSE, columns = {'a': 'integer', 'b': 'integer', 'c': 'integer'}, header = TRUE);

PRAGMA enable_verification;

PRAGMA verify_parallelism;

CREATE TABLE test AS SELECT * FROM READ_CSV_AUTO('data/csv/auto/test_fallback.csv');

SELECT TYPEOF(TestDoubleError), TYPEOF(TestDouble), TYPEOF(TestText), TYPEOF(TestInteger) FROM test LIMIT 1;

SELECT TYPEOF(TestDoubleError), TYPEOF(TestDouble), TYPEOF(TestText), TYPEOF(TestInteger) FROM test LIMIT 1;

CREATE TABLE test AS SELECT * FROM READ_CSV_AUTO('data/csv/auto/test_fallback.csv', SAMPLE_SIZE = 1);

CREATE TABLE test AS SELECT * FROM READ_CSV_AUTO('data/csv/auto/test_fallback.csv', SAMPLE_SIZE = 1, ALL_VARCHAR = 1);

SELECT TYPEOF(TestDoubleError), TYPEOF(TestDouble), TYPEOF(TestText), TYPEOF(TestInteger) FROM test LIMIT 1;

PRAGMA enable_verification;

CREATE TABLE test AS SELECT * FROM READ_CSV_AUTO('data/csv/auto/missing_header_col.csv');

SELECT a, column1, c FROM test ORDER BY a;

DROP TABLE test;

CREATE TABLE test AS SELECT * FROM READ_CSV_AUTO('data/csv/auto/duplicate_header_col.csv');

SELECT a, b, a_1 FROM test ORDER BY a;

DROP TABLE test;

CREATE TABLE test AS SELECT * FROM READ_CSV_AUTO('data/csv/auto/duplicate_header_collision.csv');

SELECT a, b, a_1, a_1_1 FROM test ORDER BY a;

DROP TABLE test;

CREATE TABLE test AS SELECT * FROM READ_CSV_AUTO('data/csv/auto/empty_header.csv');

SELECT column0, column1, column2 FROM test ORDER BY column0;

DROP TABLE test;

CREATE TABLE test AS SELECT * FROM READ_CSV_AUTO('data/csv/auto/missing_many_col.csv');

SELECT a, column01, column12 FROM test;

DROP TABLE test;

CREATE TABLE test AS SELECT * FROM READ_CSV_AUTO('data/csv/auto/duplicate_header_columns.csv');

SELECT a, a_8, a_9, column12 FROM test;

DROP TABLE test;

CREATE TABLE test AS SELECT * FROM READ_CSV_AUTO('data/csv/auto/test_header_mix.csv');

SELECT a, a_8, a_9, column12, column11, column12_1 FROM test;

DROP TABLE test;

CREATE TABLE test AS SELECT * FROM READ_CSV_AUTO('data/csv/auto/unnamed_columns.csv');

SELECT column00, column01, column02, column03, column04, column05, column06, column07, column08, column09, column10, column11, column12 FROM test;

PRAGMA enable_verification;

CREATE TABLE test AS SELECT * FROM READ_CSV_AUTO('data/csv/auto/no_header.csv');

SELECT column0, column1, column2 FROM test ORDER BY column0;

DROP TABLE test;

CREATE TABLE test AS SELECT * FROM READ_CSV_AUTO('data/csv/auto/single_header.csv');

SELECT number, text, date FROM test ORDER BY number;

DROP TABLE test;

CREATE TABLE test AS SELECT * FROM READ_CSV_AUTO('data/csv/auto/skip_row.csv');

SELECT number, text, date FROM test ORDER BY number;

DROP TABLE test;

CREATE TABLE test AS SELECT * FROM READ_CSV_AUTO('data/csv/auto/multiple_skip_row.csv');

SELECT number, text, date FROM test ORDER BY number;

DROP TABLE test;

CREATE TABLE test AS SELECT * FROM READ_CSV_AUTO('data/csv/auto/varchar_multi_line.csv', header = 0);

SELECT * FROM test ORDER BY column0;

DROP TABLE test;

CREATE TABLE test AS SELECT * FROM READ_CSV_AUTO('data/csv/auto/varchar_single_line.csv', header = 0);

SELECT column0, column1 FROM test ORDER BY column0;

DROP TABLE test;

CREATE TABLE test AS SELECT * FROM READ_CSV_AUTO('data/csv/auto/mixed_single_line.csv');

SELECT column0, column1 FROM test ORDER BY column0;

DROP TABLE test;

CREATE TABLE test AS SELECT * FROM READ_CSV_AUTO('data/csv/auto/single_value.csv');

SELECT * FROM test;

DROP TABLE test;

CREATE TABLE test AS SELECT * FROM READ_CSV_AUTO('data/csv/auto/single_numeric.csv');

SELECT * FROM test;

DROP TABLE test;

CREATE TABLE test AS SELECT * FROM READ_CSV_AUTO('data/csv/auto/utf8bom.csv');

SELECT * FROM test;

SELECT id FROM test;

DROP TABLE test;

CREATE TABLE my_varchars (a TEXT, b TEXT, c TEXT);

INSERT INTO my_varchars VALUES ('Hello', 'Beautiful', 'World');

COPY my_varchars TO '__TEST_DIR__/varchar_header.csv' WITH (HEADER 1);

COPY my_varchars TO '__TEST_DIR__/varchar_no_header.csv' WITH (HEADER 0);

COPY my_varchars FROM '__TEST_DIR__/varchar_header.csv';

COPY my_varchars FROM '__TEST_DIR__/varchar_no_header.csv' WITH (HEADER 0);

SELECT * FROM my_varchars;

COPY my_varchars TO '__TEST_DIR__/big_varchar.csv';

COPY my_varchars FROM '__TEST_DIR__/big_varchar.csv';

SELECT * FROM my_varchars;

PRAGMA enable_verification;

SELECT columns FROM SNIFF_CSV('data/csv/test_commit_rollback.csv', normalize_names = TRUE);

CREATE TABLE test AS SELECT * FROM READ_CSV_AUTO('data/csv/auto/normalize_names_1.csv', normalize_names = TRUE);

SELECT a, b, c FROM test ORDER BY a;

DROP TABLE test;

CREATE TABLE test AS SELECT * FROM READ_CSV_AUTO('data/csv/auto/normalize_names_1.csv');

SELECT A, B, C FROM test ORDER BY a;

DROP TABLE test;

SELECT columns FROM SNIFF_CSV('data/csv/auto/normalize_names_2.csv', normalize_names = TRUE);

CREATE TABLE test AS SELECT * FROM READ_CSV_AUTO('data/csv/auto/normalize_names_2.csv', normalize_names = TRUE);

SELECT _select, _insert, _join FROM test ORDER BY _select;

DROP TABLE test;

CREATE TABLE test AS SELECT * FROM READ_CSV_AUTO('data/csv/auto/normalize_names_3.csv', normalize_names = TRUE);

SELECT _0_a, _1_b, _9_c FROM test ORDER BY _0_a;

DROP TABLE test;

CREATE TABLE test AS SELECT * FROM READ_CSV_AUTO('data/csv/auto/normalize_names_4.csv', normalize_names = TRUE);

SELECT allo, teost, _ FROM test ORDER BY allo;

DROP TABLE test;

CREATE TABLE test AS SELECT * FROM READ_CSV_AUTO('data/csv/auto/normalize_names_5.csv', normalize_names = TRUE);

SELECT a, b, c FROM test ORDER BY a;

DROP TABLE test;

CREATE TABLE test AS SELECT * FROM READ_CSV_AUTO('data/csv/auto/normalize_names_6.csv', normalize_names = TRUE);

SELECT aax, hello_world, qty_m2 FROM test ORDER BY aax;

DROP TABLE test;

SELECT columns FROM SNIFF_CSV('data/csv/normalize.csv', normalize_names = TRUE);

PRAGMA enable_verification;

CREATE TABLE test AS SELECT * FROM READ_CSV_AUTO('data/csv/auto/issue_811.csv', SAMPLE_SIZE = 1);

SELECT TYPEOF(TestInteger), TYPEOF(TestDouble), TYPEOF(TestDate), TYPEOF(TestText) FROM test LIMIT 1;

DROP TABLE test;

CREATE TABLE test AS SELECT * FROM READ_CSV_AUTO('data/csv/auto/issue_811.csv', SAMPLE_SIZE = -1);

SELECT TYPEOF(TestInteger), TYPEOF(TestDouble), TYPEOF(TestDate), TYPEOF(TestText) FROM test LIMIT 1;

DROP TABLE test;

CREATE TABLE test AS SELECT * FROM READ_CSV_AUTO('data/csv/auto/issue_811.csv', SAMPLE_SIZE = -1);

SELECT TestInteger, TestDouble, TestDate, TestText FROM test WHERE NOT TestDouble IS NULL;

SELECT TYPEOF(TestInteger), TYPEOF(TestDouble), TYPEOF(TestDate), TYPEOF(TestText) FROM test LIMIT 1;

DROP TABLE test;

CREATE TABLE test AS SELECT * FROM READ_CSV_AUTO('data/csv/auto/issue_811.csv');

SELECT TestInteger, TestDouble, TestDate, TestText FROM test WHERE NOT TestDouble IS NULL;

SELECT TYPEOF(TestInteger), TYPEOF(TestDouble), TYPEOF(TestDate), TYPEOF(TestText) FROM test LIMIT 1;

DROP TABLE test;

CREATE TABLE test AS SELECT * FROM READ_CSV_AUTO('data/csv/auto/issue_811.csv', SAMPLE_SIZE = -1);

SELECT TestInteger, TestDouble, TestDate, TestText FROM test WHERE NOT TestDouble IS NULL;

SELECT TYPEOF(TestInteger), TYPEOF(TestDouble), TYPEOF(TestDate), TYPEOF(TestText) FROM test LIMIT 1;

DROP TABLE test;

CREATE TABLE test (TestInteger INT, TestDouble DOUBLE, TestDate TEXT, TestText TEXT);

COPY test FROM 'data/csv/auto/issue_811.csv' WITH (AUTO_DETECT TRUE);

DROP TABLE test;

CREATE TABLE test (TestInteger INT, TestDouble DOUBLE, TestDate TEXT, TestText TEXT);

CREATE TABLE test (TestInteger INT, TestDouble DOUBLE, TestDate TEXT, TestText TEXT);

PRAGMA enable_verification;

SELECT COUNT(*) FROM READ_CSV('data/csv/test/blob.csv', auto_type_candidates = ['blob']);

SELECT COUNT(*) FROM READ_CSV('data/csv/test/blob.csv', types = ['blob'], header = 0);

SELECT COUNT(*) FROM READ_CSV('data/csv/test/blob.csv', columns = {'col1': 'BLOB'});

CREATE TABLE t (a BLOB);

COPY t FROM 'data/csv/test/blob.csv';

SELECT COUNT(*) FROM READ_CSV('data/csv/test/blob.csv', columns = {'col1': 'BLOB'});

PRAGMA enable_verification;

SELECT * FROM READ_CSV('data/csv/empty_space_start_value.csv');

PRAGMA enable_verification;

PRAGMA verify_parallelism;

CREATE OR REPLACE TABLE timings (tool TEXT, sf REAL, day TEXT, batch_type TEXT, q TEXT, parameters TEXT, time REAL);

COPY timings FROM 'data/csv/timings.csv' WITH (HEADER, DELIMITER '|');

PRAGMA enable_verification;

CREATE TABLE t (a INT, b DOUBLE, c TEXT);

INSERT INTO t VALUES (1, 1.1, 'bla');

COPY (SELECT * FROM t) TO '__TEST_DIR__/csv_file.csv' WITH (FORMAT CSV, DELIMITER '|', HEADER 0);

SELECT * FROM READ_CSV_AUTO('__TEST_DIR__/csv_file.csv');

SELECT TYPEOF(column0), TYPEOF(column1), TYPEOF(column2) FROM READ_CSV_AUTO('__TEST_DIR__/csv_file.csv');

SELECT * FROM READ_CSV_AUTO('__TEST_DIR__/csv_file.csv', auto_type_candidates = ['BIGINT', 'DOUBLE', 'VARCHAR']);

SELECT * FROM READ_CSV_AUTO('__TEST_DIR__/csv_file.csv', auto_type_candidates = ['MAP']);

SELECT TYPEOF(column0), TYPEOF(column1), TYPEOF(column2) FROM READ_CSV_AUTO('__TEST_DIR__/csv_file.csv', auto_type_candidates = ['BIGINT', 'DOUBLE', 'VARCHAR']);

SELECT * FROM READ_CSV_AUTO('__TEST_DIR__/csv_file.csv', auto_type_candidates = ['VARCHAR'], header = 0);

SELECT TYPEOF(column0), TYPEOF(column1), TYPEOF(column2) FROM READ_CSV_AUTO('__TEST_DIR__/csv_file.csv', auto_type_candidates = ['VARCHAR'], header = 0);

SELECT * FROM READ_CSV_AUTO('__TEST_DIR__/csv_file.csv', auto_type_candidates = ['BIGINT']);

SELECT TYPEOF(column0), TYPEOF(column1), TYPEOF(column2) FROM READ_CSV_AUTO('__TEST_DIR__/csv_file.csv', auto_type_candidates = ['BIGINT']);

SELECT * FROM READ_CSV_AUTO('__TEST_DIR__/csv_file.csv', auto_type_candidates = ['BIGINT', 'VARCHAR']);

SELECT TYPEOF(column0), TYPEOF(column1), TYPEOF(column2) FROM READ_CSV_AUTO('__TEST_DIR__/csv_file.csv', auto_type_candidates = ['BIGINT', 'VARCHAR']);

SELECT * FROM READ_CSV_AUTO('__TEST_DIR__/csv_file.csv', auto_type_candidates = ['FLOAT', 'VARCHAR']);

SELECT TYPEOF(column0), TYPEOF(column1), TYPEOF(column2) FROM READ_CSV_AUTO('__TEST_DIR__/csv_file.csv', auto_type_candidates = ['FLOAT', 'VARCHAR']);

SELECT * FROM READ_CSV_AUTO('__TEST_DIR__/csv_file.csv', auto_type_candidates = ['SMALLINT', 'BIGINT', 'DOUBLE', 'FLOAT', 'VARCHAR']);

SELECT TYPEOF(column0), TYPEOF(column1), TYPEOF(column2) FROM READ_CSV_AUTO('__TEST_DIR__/csv_file.csv', auto_type_candidates = ['SMALLINT', 'BIGINT', 'DOUBLE', 'FLOAT', 'VARCHAR']);

SELECT * FROM READ_CSV_AUTO('__TEST_DIR__/csv_file.csv', auto_type_candidates = ['SMALLINT', 'BIGINT', 'DOUBLE', 'FLOAT', 'VARCHAR', 'SMALLINT', 'BIGINT', 'DOUBLE', 'FLOAT', 'VARCHAR']);

SELECT TYPEOF(column0), TYPEOF(column1), TYPEOF(column2) FROM READ_CSV_AUTO('__TEST_DIR__/csv_file.csv', auto_type_candidates = ['SMALLINT', 'BIGINT', 'DOUBLE', 'FLOAT', 'VARCHAR', 'SMALLINT', 'BIGINT', 'DOUBLE', 'FLOAT', 'VARCHAR']);

SELECT * FROM READ_CSV_AUTO('__TEST_DIR__/csv_file.csv', auto_type_candidates = ['USMALLINT', 'VARCHAR']);

SELECT * FROM READ_CSV_AUTO('__TEST_DIR__/csv_file.csv', auto_type_candidates = ['bla', 'VARCHAR']);

SELECT * FROM READ_CSV_AUTO('__TEST_DIR__/csv_file.csv', auto_type_candidates = []);

PRAGMA enable_verification;

CREATE TABLE test AS SELECT * FROM READ_CSV_AUTO('data/csv/auto/large_mixed_data.csv', SAMPLE_SIZE = -1);

SELECT linenr, mixed_string, mixed_double FROM test LIMIT 3;

SELECT TYPEOF(linenr), TYPEOF(mixed_string), TYPEOF(mixed_double) FROM test LIMIT 1;

SELECT linenr, mixed_string, mixed_double FROM test WHERE linenr > 27000 LIMIT 3;

SELECT COUNT(*) FROM test;

DROP TABLE test;

CREATE TABLE test AS SELECT * FROM READ_CSV_AUTO('data/csv/auto/time_date_timestamp.csv');

SELECT a, b, t, d, ts FROM test ORDER BY a;

SELECT TYPEOF(a), TYPEOF(b), TYPEOF(t), TYPEOF(d), TYPEOF(ts) FROM test LIMIT 1;

DROP TABLE test;

CREATE TABLE test AS SELECT * FROM READ_CSV_AUTO('data/csv/auto/time_date_timestamp_trailing.csv');

SELECT a, b, t, tf, d, df FROM test ORDER BY a;

SELECT TYPEOF(a), TYPEOF(b), TYPEOF(t), TYPEOF(tf), TYPEOF(d), TYPEOF(df) FROM test LIMIT 1;

DROP TABLE test;

CREATE TABLE test AS SELECT * FROM READ_CSV_AUTO('data/csv/auto/time_date_timestamp_mm-dd-yyyy.csv');

SELECT a, b, t, d, ts FROM test ORDER BY a;

SELECT TYPEOF(a), TYPEOF(b), TYPEOF(t), TYPEOF(d), TYPEOF(ts) FROM test LIMIT 1;

DROP TABLE test;

CREATE TABLE test AS SELECT * FROM READ_CSV_AUTO('data/csv/auto/time_date_timestamp_mm-dd-yy.csv');

SELECT a, b, t, d, ts FROM test ORDER BY a;

SELECT TYPEOF(a), TYPEOF(b), TYPEOF(t), TYPEOF(d), TYPEOF(ts) FROM test LIMIT 1;

DROP TABLE test;

CREATE TABLE test AS SELECT * FROM READ_CSV_AUTO('data/csv/auto/time_date_timestamp_dd-mm-yyyy.csv');

SELECT a, b, t, d, ts FROM test ORDER BY a;

SELECT TYPEOF(a), TYPEOF(b), TYPEOF(t), TYPEOF(d), TYPEOF(ts) FROM test LIMIT 1;

DROP TABLE test;

CREATE TABLE test AS SELECT * FROM READ_CSV_AUTO('data/csv/auto/time_date_timestamp_dd-mm-yy.csv');

SELECT a, b, t, d, ts FROM test ORDER BY a;

SELECT TYPEOF(a), TYPEOF(b), TYPEOF(t), TYPEOF(d), TYPEOF(ts) FROM test LIMIT 1;

DROP TABLE test;

CREATE TABLE test AS SELECT * FROM READ_CSV_AUTO('data/csv/auto/time_date_timestamp_yyyy.mm.dd.csv');

SELECT a, b, t, d, ts FROM test ORDER BY a;

SELECT TYPEOF(a), TYPEOF(b), TYPEOF(t), TYPEOF(d), TYPEOF(ts) FROM test LIMIT 1;

DROP TABLE test;

CREATE TABLE test AS SELECT * FROM READ_CSV_AUTO('data/csv/auto/time_date_timestamp_yy.mm.dd.csv');

SELECT a, b, t, d, ts FROM test ORDER BY a;

SELECT TYPEOF(a), TYPEOF(b), TYPEOF(t), TYPEOF(d), TYPEOF(ts) FROM test LIMIT 1;

DROP TABLE test;

CREATE TABLE test AS SELECT * FROM READ_CSV_AUTO('data/csv/auto/int_bol.csv');

SELECT i FROM test ORDER BY i;

SELECT TYPEOF(i), TYPEOF(b) FROM test LIMIT 1;

PRAGMA enable_verification;

COPY (SELECT * FROM RANGE(0, 100000) AS tbl(i)) TO '__TEST_DIR__/mix_batches_small.parquet' WITH (ROW_GROUP_SIZE 5000);

COPY (SELECT * FROM RANGE(100000, 400000) AS tbl(i)) TO '__TEST_DIR__/mix_batches_large.parquet' WITH (ROW_GROUP_SIZE 200000);

COPY (SELECT * FROM RANGE(400000, 700000) AS tbl(i)) TO '__TEST_DIR__/mix_batches_odd.parquet' WITH (ROW_GROUP_SIZE 999);

COPY (SELECT * FROM RANGE(700000, 1000000) AS tbl(i)) TO '__TEST_DIR__/mix_batches_odd_again.parquet' WITH (ROW_GROUP_SIZE 99979);

CREATE VIEW v1 AS SELECT * FROM PARQUET_SCAN(['__TEST_DIR__/mix_batches_small.parquet', '__TEST_DIR__/mix_batches_large.parquet', '__TEST_DIR__/mix_batches_odd.parquet', '__TEST_DIR__/mix_batches_odd_again.parquet']);

CREATE VIEW v2 AS SELECT * FROM v1 WHERE (i // 10000) % 2 = 0;

CREATE VIEW v3 AS SELECT * FROM v1 WHERE (i // 10000) % 2 = 0 OR (i > 200000 AND i < 400000) OR (i > 600000 AND i < 800000);

CREATE VIEW v4 AS FROM v1 WHERE i>998 AND i<1000 AND i%2=0
loop i 0 2;

COPY v1 TO '__TEST_DIR__/mixed_batches_v1.csv' WITH (HEADER);

CREATE TABLE mixed_batches_v1 AS SELECT * FROM "__TEST_DIR__/mixed_batches_v1.csv";

CREATE TABLE mixed_batches_v1 AS SELECT * FROM "__TEST_DIR__/mixed_batches_v1.csv";

CREATE TABLE mixed_batches_v1 AS SELECT * FROM "__TEST_DIR__/mixed_batches_v1.csv";

COPY v2 TO '__TEST_DIR__/mixed_batches_v2.csv' WITH (HEADER);

CREATE TABLE mixed_batches_v2 AS SELECT * FROM "__TEST_DIR__/mixed_batches_v2.csv";

CREATE TABLE mixed_batches_v2 AS SELECT * FROM "__TEST_DIR__/mixed_batches_v2.csv";

CREATE TABLE mixed_batches_v2 AS SELECT * FROM "__TEST_DIR__/mixed_batches_v2.csv";

COPY v3 TO '__TEST_DIR__/mixed_batches_v3.csv' WITH (HEADER);

CREATE TABLE mixed_batches_v3 AS SELECT * FROM "__TEST_DIR__/mixed_batches_v3.csv";

CREATE TABLE mixed_batches_v3 AS SELECT * FROM "__TEST_DIR__/mixed_batches_v3.csv";

CREATE TABLE mixed_batches_v3 AS SELECT * FROM "__TEST_DIR__/mixed_batches_v3.csv";

COPY v4 TO '__TEST_DIR__/mixed_batches_v4.csv' WITH (HEADER);

CREATE TABLE mixed_batches_v4 AS SELECT CAST(i AS BIGINT) AS i FROM READ_CSV_AUTO('__TEST_DIR__/mixed_batches_v4.csv');

CREATE TABLE mixed_batches_v4 AS SELECT CAST(i AS BIGINT) AS i FROM READ_CSV_AUTO('__TEST_DIR__/mixed_batches_v4.csv');

CREATE TABLE mixed_batches_v4 AS SELECT CAST(i AS BIGINT) AS i FROM READ_CSV_AUTO('__TEST_DIR__/mixed_batches_v4.csv');

DROP TABLE mixed_batches_v1;

DROP TABLE mixed_batches_v2;

DROP TABLE mixed_batches_v3;

DROP TABLE mixed_batches_v4;

DROP VIEW IF EXISTS v2;

DROP VIEW IF EXISTS v3;

DROP VIEW IF EXISTS v4;

CREATE OR REPLACE VIEW v1 AS SELECT * FROM "__TEST_DIR__/mix_batches_small.parquet" UNION ALL SELECT * FROM "__TEST_DIR__/mix_batches_large.parquet" UNION ALL SELECT * FROM "__TEST_DIR__/mix_batches_odd.parquet" UNION ALL SELECT * FROM "__TEST_DIR__/mix_batches_odd_again.parquet";

CREATE OR REPLACE VIEW v2 AS SELECT * FROM v1 WHERE (i // 10000) % 2 = 0;

CREATE OR REPLACE VIEW v3 AS SELECT * FROM v1 WHERE (i // 10000) % 2 = 0 OR (i > 200000 AND i < 400000) OR (i > 600000 AND i < 800000);

PRAGMA enable_verification;

CREATE TABLE integers AS SELECT i, i // 5 AS j FROM RANGE(0, 1000000) AS t(i);

COPY integers TO '__TEST_DIR__/batched_integers.csv' WITH (HEADER);

CREATE TABLE integers_copied AS SELECT * FROM "__TEST_DIR__/batched_integers.csv";

SELECT SUM(i), SUM(j), COUNT(*), COUNT(i), COUNT(j) FROM integers_copied;

SELECT * FROM integers_copied LIMIT 5;

SELECT * FROM integers_copied LIMIT 5 OFFSET 99997;

SELECT * FROM integers_copied QUALIFY i <= LAG(i) OVER ();

CREATE VIEW v1 AS SELECT * FROM integers WHERE (i % 2 = 0 AND i < 300000) OR (i BETWEEN 500000 AND 700000);

COPY v1 TO '__TEST_DIR__/batched_integers_filters.csv' WITH (HEADER);

CREATE TABLE integers_filtered AS FROM '__TEST_DIR__/batched_integers_filters.csv'
foreach table v1 integers_filtered;

CREATE TABLE integers_filtered AS FROM '__TEST_DIR__/batched_integers_filters.csv'
foreach table v1 integers_filtered;

CREATE TABLE integers_filtered AS FROM '__TEST_DIR__/batched_integers_filters.csv'
foreach table v1 integers_filtered;

CREATE TABLE integers_filtered AS FROM '__TEST_DIR__/batched_integers_filters.csv'
foreach table v1 integers_filtered;

CREATE TABLE integers_filtered AS FROM '__TEST_DIR__/batched_integers_filters.csv'
foreach table v1 integers_filtered;

PRAGMA enable_verification;

COPY (SELECT * FROM RANGE(0, 100000) AS tbl(i)) TO '__TEST_DIR__/mix_batches_small.parquet' WITH (ROW_GROUP_SIZE 5000);

COPY (SELECT * FROM RANGE(100000, 400000) AS tbl(i)) TO '__TEST_DIR__/mix_batches_large.parquet' WITH (ROW_GROUP_SIZE 200000);

COPY (SELECT * FROM RANGE(400000, 700000) AS tbl(i)) TO '__TEST_DIR__/mix_batches_odd.parquet' WITH (ROW_GROUP_SIZE 999);

COPY (SELECT * FROM RANGE(700000, 1000000) AS tbl(i)) TO '__TEST_DIR__/mix_batches_odd_again.parquet' WITH (ROW_GROUP_SIZE 99979);

CREATE VIEW v1 AS SELECT * FROM PARQUET_SCAN(['__TEST_DIR__/mix_batches_small.parquet', '__TEST_DIR__/mix_batches_large.parquet', '__TEST_DIR__/mix_batches_odd.parquet', '__TEST_DIR__/mix_batches_odd_again.parquet']);

CREATE VIEW v2 AS SELECT * FROM v1 WHERE (i // 10000) % 2 = 0;

CREATE VIEW v3 AS SELECT * FROM v1 WHERE (i // 10000) % 2 = 0 OR (i > 200000 AND i < 400000) OR (i > 600000 AND i < 800000);

CREATE VIEW v4 AS FROM v1 WHERE i>998 AND i<1000 AND i%2=0
foreach ARRAY_SETTING TRUE FALSE;

CREATE VIEW v4 AS FROM v1 WHERE i>998 AND i<1000 AND i%2=0
foreach ARRAY_SETTING TRUE FALSE;

CREATE TABLE mixed_batches_v1 AS SELECT * FROM "__TEST_DIR__/mixed_batches_v1.json";

CREATE TABLE mixed_batches_v1 AS SELECT * FROM "__TEST_DIR__/mixed_batches_v1.json";

CREATE TABLE mixed_batches_v1 AS SELECT * FROM "__TEST_DIR__/mixed_batches_v1.json";

CREATE TABLE mixed_batches_v1 AS SELECT * FROM "__TEST_DIR__/mixed_batches_v1.json";

CREATE TABLE mixed_batches_v2 AS SELECT * FROM "__TEST_DIR__/mixed_batches_v2.json";

CREATE TABLE mixed_batches_v2 AS SELECT * FROM "__TEST_DIR__/mixed_batches_v2.json";

CREATE TABLE mixed_batches_v2 AS SELECT * FROM "__TEST_DIR__/mixed_batches_v2.json";

CREATE TABLE mixed_batches_v2 AS SELECT * FROM "__TEST_DIR__/mixed_batches_v2.json";

CREATE TABLE mixed_batches_v3 AS SELECT * FROM "__TEST_DIR__/mixed_batches_v3.json";

CREATE TABLE mixed_batches_v3 AS SELECT * FROM "__TEST_DIR__/mixed_batches_v3.json";

CREATE TABLE mixed_batches_v3 AS SELECT * FROM "__TEST_DIR__/mixed_batches_v3.json";

CREATE TABLE mixed_batches_v3 AS SELECT * FROM "__TEST_DIR__/mixed_batches_v3.json";

CREATE TABLE mixed_batches_v4 AS SELECT CAST(i AS BIGINT) AS i FROM "__TEST_DIR__/mixed_batches_v4.json" AS t(i);

CREATE TABLE mixed_batches_v4 AS SELECT CAST(i AS BIGINT) AS i FROM "__TEST_DIR__/mixed_batches_v4.json" AS t(i);

CREATE TABLE mixed_batches_v4 AS SELECT CAST(i AS BIGINT) AS i FROM "__TEST_DIR__/mixed_batches_v4.json" AS t(i);

DROP TABLE mixed_batches_v1;

DROP TABLE mixed_batches_v2;

DROP TABLE mixed_batches_v3;

PRAGMA enable_verification;

COPY (SELECT i, i // 5 AS j FROM RANGE(0, 100000000) AS t(i)) TO '__TEST_DIR__/large_integers.parquet';

SET memory_limit = '300MB';

COPY "__TEST_DIR__/large_integers.parquet" TO '__TEST_DIR__/large_integers.csv';

SET memory_limit = '-1';

SELECT * FROM "__TEST_DIR__/large_integers.parquet" EXCEPT SELECT * FROM "__TEST_DIR__/large_integers.csv";

PRAGMA enable_verification;

CREATE TABLE t1 AS SELECT i, (i + 1) AS j FROM RANGE(0, 3000) AS tbl(i);

COPY t1 TO '__TEST_DIR__/t1.csv' WITH (FORMAT CSV, DELIMITER '|', HEADER);

SELECT COUNT(*) FROM "__TEST_DIR__/t1.csv";

SELECT COUNT(*) FROM READ_CSV('data/csv/empty.csv', columns = {'d': 'BIGINT'}, header = 0, auto_detect = FALSE);

PRAGMA enable_verification;

SELECT * FROM READ_CSV_AUTO('data/csv/escape.csv', escape = ']', header = 0);

SELECT * FROM READ_CSV_AUTO('data/csv/escape.csv', header = 0);

SELECT * FROM READ_CSV_AUTO('data/csv/no_opt.csv', delim = ';');

PRAGMA enable_verification;

CREATE TABLE t1 AS SELECT i, (i + 1) AS j FROM RANGE(0, 300000) AS tbl(i);

COPY t1 TO '__TEST_DIR__/t1.csv' WITH (FORMAT CSV, DELIMITER '|', HEADER);

PRAGMA memory_limit = '2M';

PRAGMA threads = 2;

SELECT COUNT(*) FROM READ_CSV_AUTO('__TEST_DIR__/t1.csv', buffer_size = 262144, sample_size = -1);

PRAGMA enable_verification;

SELECT * FROM READ_CSV('data/csv/auto/issue_1254_rn.csv', buffer_size = 10);

SELECT * FROM READ_CSV('data/csv/auto/issue_1254_rn.csv', buffer_size = 8);

SELECT COUNT(*) FROM READ_CSV_AUTO('data/csv/small_file.csv', buffer_size = 7);

PRAGMA enable_verification;

SELECT COUNT(*) FROM READ_CSV_AUTO('data/csv/header_left_space.csv');

CREATE TABLE t AS SELECT * FROM READ_CSV_AUTO('data/csv/header_normalize.csv', normalize_names = 1);

DESCRIBE t;

SELECT * FROM READ_CSV(['data/csv/auto/sample.csv', 'data/csv/auto/sample.csv', 'data/csv/auto/sample.csv']);

SELECT * FROM READ_CSV_AUTO('data/csv/test/invalid_utf.csv');

SELECT * FROM READ_CSV_AUTO('data/csv/test/invalid_utf.csv');

SELECT * FROM READ_CSV('data/csv/test/invalid_utf.csv', columns = {'col1': 'VARCHAR', 'col2': 'VARCHAR', 'col3': 'VARCHAR'}, auto_detect = FALSE, header = 0, delim = ',');

SELECT * FROM READ_CSV('data/csv/test/invalid_utf.csv', columns = {'col1': 'VARCHAR', 'col2': 'VARCHAR', 'col3': 'VARCHAR'}, auto_detect = FALSE, header = 0, delim = ',');

SELECT * FROM READ_CSV('data/csv/test/invalid_utf_complex.csv', columns = {'col1': 'VARCHAR', 'col2': 'VARCHAR', 'col3': 'VARCHAR'}, auto_detect = FALSE, header = 0, delim = ',');

SELECT * FROM READ_CSV('data/csv/test/invalid_utf_complex.csv', columns = {'col1': 'VARCHAR', 'col2': 'VARCHAR', 'col3': 'VARCHAR'}, auto_detect = FALSE, header = 0, delim = ',', ignore_errors = TRUE);

CREATE TABLE t AS SELECT * FROM READ_CSV('data/csv/test/invalid_utf_big.csv', columns = {'col1': 'VARCHAR', 'col2': 'VARCHAR', 'col3': 'VARCHAR'}, auto_detect = FALSE, header = 0, delim = ',', ignore_errors = TRUE);

SELECT COUNT(*) FROM t;

SELECT * FROM READ_CSV('data/csv/test/invalid_utf_big.csv', columns = {'col1': 'VARCHAR', 'col2': 'VARCHAR', 'col3': 'VARCHAR'}, auto_detect = FALSE, header = 0, delim = ',');

SELECT * FROM READ_CSV('data/csv/test/invalid_utf_quoted.csv', columns = {'col1': 'VARCHAR', 'col2': 'VARCHAR', 'col3': 'VARCHAR'}, auto_detect = FALSE, header = 0, delim = ',', quote = '"');

SELECT * FROM READ_CSV('data/csv/test/invalid_utf_complex.csv', columns = {'col1': 'VARCHAR', 'col2': 'VARCHAR', 'col3': 'VARCHAR'}, auto_detect = FALSE, header = 0, delim = ',', quote = '"', ignore_errors = TRUE);

SELECT * FROM READ_CSV('data/csv/test/invalid_utf_header.csv', delim = ',', quote = '"');

SELECT * FROM READ_CSV('data/csv/test/invalid_utf_header.csv', header = 1, delim = ',', quote = '"');

SELECT * FROM READ_CSV('data/csv/test/invalid_utf_header.csv', header = 1, delim = ',', quote = '"', ignore_errors = TRUE);

SELECT * FROM READ_CSV('data/csv/test/invalid_utf_quoted_nl.csv', columns = {'col1': 'VARCHAR', 'col2': 'VARCHAR', 'col3': 'VARCHAR'}, auto_detect = FALSE, header = 0, delim = ',', quote = '"');

SELECT * FROM READ_CSV('data/csv/test/invalid_utf_quoted_nl.csv', columns = {'col1': 'VARCHAR', 'col2': 'VARCHAR', 'col3': 'VARCHAR'}, auto_detect = FALSE, header = 0, delim = ',', quote = '"', ignore_errors = TRUE);

SELECT * FROM READ_CSV('data/csv/test/invalid_utf_complex.csv', columns = {'col1': 'VARCHAR', 'col2': 'VARCHAR', 'col3': 'VARCHAR'}, auto_detect = FALSE, header = 0, delim = ',', quote = '"', buffer_size = 198);

SELECT * FROM READ_CSV('data/csv/test/invalid_utf_complex.csv', columns = {'col1': 'VARCHAR', 'col2': 'VARCHAR', 'col3': 'VARCHAR'}, auto_detect = FALSE, header = 0, delim = ',', ignore_errors = TRUE, buffer_size = 198);

SELECT * FROM READ_CSV('data/csv/test/invalid_utf_list.csv', header = 0, auto_detect = FALSE, quote = '"', columns = {'col1': 'INTEGER[]'});

SELECT * FROM READ_CSV('data/csv/test/invalid_utf_list.csv', header = 0, auto_detect = FALSE, quote = '"', columns = {'col1': 'INTEGER[]'});

SELECT * FROM READ_CSV('data/csv/test/invalid_utf_list.csv', header = 0, auto_detect = FALSE, quote = '"', columns = {'col1': 'VARCHAR'});

SELECT * FROM READ_CSV('data/csv/test/invalid_utf_list.csv', header = 0, auto_detect = FALSE, quote = '"', columns = {'col1': 'VARCHAR'});

PRAGMA enable_verification;

SELECT * FROM READ_CSV_AUTO('data/csv/invalid_utf8.csv', auto_detect = FALSE, columns = {'c01': 'VARCHAR'});

SELECT * FROM READ_CSV_AUTO('data/csv/empty.csv');

SELECT * FROM READ_CSV_AUTO('data/csv/small_file.csv', sample_size = 1);

SELECT * FROM READ_CSV_AUTO('data/csv/date_format_percentage.csv');

PRAGMA enable_verification;

SELECT COUNT(*) FROM READ_CSV_AUTO('data/csv/borked_date.csv', header = 0);

SELECT COUNT(*) FROM READ_CSV_AUTO('data/csv/big_not_bool.csv', header = 0);

PRAGMA enable_verification;

SELECT * FROM SNIFF_CSV('data/csv/14512.csv', names := [NULL]);

CREATE TABLE all_types AS SELECT * EXCLUDE (small_enum, medium_enum, large_enum) FROM TEST_ALL_TYPES() LIMIT 0;

SELECT DISTINCT NULL, c3, (c4 <= c1), (c3 BETWEEN c4 AND c2) FROM SNIFF_CSV('1a616242-1dcd-4914-99d1-16119d9b6e4c', "names" := [CAST('1970-01-01' AS DATE), CAST('infinity' AS DATE), CAST('-infinity' AS DATE), NULL, CAST('2022-05-12' AS DATE)], filename := '9be2bc9d-d49f-4564-bfa4-6336b211a874') AS t5(c1, c2, c3, c4) WHERE c1 GROUP BY c3 LIMIT ('c4000757-69ca-400e-b58a-1dac73b85595' IS NULL);

PRAGMA enable_verification;

CREATE TABLE dates (d DATE);

COPY dates FROM 'data/csv/glob/a?/*.csv' WITH (AUTO_DETECT 1);

SELECT * FROM dates ORDER BY 1;

COPY dates FROM READ_CSV('data/csv/glob/*/a*a.csv', auto_detect = 1);

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

SELECT * FROM READ_CSV('data/csv/glob/a?/*.csv') ORDER BY 1;

SELECT * FROM READ_CSV('data/csv/glob/a?/a*.csv') ORDER BY 1;

SELECT * FROM READ_CSV(['data/csv/glob/a1/a1.csv', 'data/csv/glob/a2/a2.csv']) ORDER BY 1;

SELECT * FROM READ_CSV_AUTO(['data/csv/glob/a1/a1.csv', 'data/csv/glob/a2/a2.csv']) ORDER BY 1;

SELECT * FROM READ_CSV(['data/csv/glob/a?/a*.csv', 'data/csv/glob/a?/a*.csv']) ORDER BY 1;

SELECT * FROM READ_CSV('data/csv/*/a?/a*.csv') ORDER BY 1;

SELECT a, b LIKE '%a1.csv%' FROM READ_CSV('data/csv/*/a?/a*.csv', filename = 1) AS t1(a, b) ORDER BY 1;

SELECT * FROM READ_CSV('data/csv/glob/*/*.csv') ORDER BY 1;

SELECT * FROM READ_CSV('data/csv/glob/*/*.csv', columns = {'d': 'STRING'}) ORDER BY 1;

SELECT a, b LIKE '%a_.csv' FROM READ_CSV('data/csv/glob/*/*.csv', columns = {'d': 'STRING'}, filename = 1) AS t(a, b) ORDER BY 1;

SELECT COUNT(*) FROM GLOB('data/csv/glob/*/*.csv');

SELECT COUNT(*) FROM GLOB(['data/csv/glob/*/*.csv']);

SELECT COUNT(*) FROM GLOB(['data/csv/glob/*/*.csv', 'data/csv/glob/*/*.csv']);

SELECT COUNT(*) FROM GLOB('data\csv\glob\*\*.csv');

SELECT COUNT(*) FROM GLOB('data//csv///glob///*//////*.csv');

SELECT * FROM READ_CSV('data/csv/glob/*/a*a.csv') ORDER BY 1;

SELECT * FROM READ_CSV(['data/csv/glob/*/a*a.csv']) ORDER BY 1;

SELECT * FROM READ_CSV_AUTO(['data/csv/glob/*/a*a.csv']) ORDER BY 1;

SELECT COUNT(*) FROM GLOB('data/csv/glob/*/a*a.csv');

SELECT COUNT(*) FROM GLOB('/rewoiarwiouw3rajkawrasdf790273489*.csv') LIMIT 10;

SELECT COUNT(*) FROM GLOB('~/rewoiarwiouw3rajkawrasdf790273489*.py') LIMIT 10;

SET file_search_path = 'data/csv/glob';

SELECT COUNT(*) FROM GLOB('*/*.csv');

SET file_search_path = 'data/csv/glob/a1,data/csv/glob/a2';

SELECT COUNT(*) FROM GLOB('*.csv');

SET file_search_path = 'data/csv/glob,garbage';

SELECT COUNT(*) FROM GLOB('*/*.csv');

SELECT COUNT(*) FROM GLOB('data/csv/glob/*/*.csv');

SET file_search_path = '';

SELECT COUNT(*) FROM GLOB('data/csv/glob/*/*.csv');

SELECT * FROM READ_CSV_AUTO([]) ORDER BY 1;

SELECT * FROM READ_CSV_AUTO(CAST([] AS TEXT[])) ORDER BY 1;

SELECT * FROM READ_CSV_AUTO(NULL) ORDER BY 1;

SELECT * FROM READ_CSV_AUTO([NULL]) ORDER BY 1;

SELECT * FROM READ_CSV_AUTO(CAST(NULL AS TEXT)) ORDER BY 1;

SELECT * FROM READ_CSV_AUTO(CAST(NULL AS TEXT[])) ORDER BY 1;

SET threads = 1;

SELECT * FROM READ_CSV('data/csv/glob/*/*.csv');

PRAGMA enable_verification;

SELECT COUNT(*) > 0 FROM GLOB('**');

SELECT COUNT(*) FROM GLOB('**/samename/*');

PRAGMA enable_verification;

SELECT * FROM READ_CSV('data/csv/glob/crawl/stackoverflow/**/*.csv', auto_detect = 1) ORDER BY 2;

SELECT * FROM READ_CSV('data/csv/glob/crawl/stackoverflow/**', auto_detect = 1) ORDER BY 2;

SELECT * FROM READ_CSV('data/csv/glob/crawl/samename/**/*.csv', auto_detect = 1);

SELECT SUM(column0) FROM READ_CSV('data/csv/glob/crawl/samename/**', auto_detect = 1);

SELECT COUNT(*) FROM READ_CSV('data/csv/glob/crawl/d/**/*.csv', auto_detect = 1);

SELECT COUNT(*) FROM GLOB('data/csv/glob/crawl/d/**');

SELECT SUM(column0) FROM READ_CSV('data/csv/glob/crawl/d/**', auto_detect = 1);

SELECT COUNT(*) FROM GLOB('data/csv/glob/crawl/d/**/');

SELECT COUNT(*) FROM GLOB('data/csv/glob/crawl/d/**/mid/*.csv');

SELECT COUNT(*) FROM "data/csv/glob/crawl/d/**/mid/*.csv";

SELECT COUNT(*) FROM "data/csv/glob/crawl/d/**/mid/*/*.csv";

SELECT COUNT(*) FROM GLOB('data/csv/glob/crawl/d/**/mid/*/');

SELECT COUNT(*) FROM "data/csv/glob/crawl/d/**/mid/**/*.csv";

SELECT COUNT(*) FROM "data/csv/glob/crawl/d/**/???/*/*.csv";

SELECT COUNT(*) FROM "data/csv/glob/crawl/d/*/???/**/*.csv";

SELECT COUNT(*) FROM "data/csv/glob/crawl/d/*/mid/**/*.csv";

SELECT COUNT(*) FROM "data/csv/glob/crawl/d/*/*/*/mid/**/*.csv";

SELECT COUNT(*) FROM "data/csv/glob/crawl/d/**/???/*.csv";

SELECT COUNT(*) FROM "data/csv/glob/crawl/d/*/???/*.csv";

SELECT COUNT(*) FROM "data/csv/glob/crawl/d/**/*/**/*.csv";

SELECT COUNT(*) FROM "data/csv/glob/crawl/d/**/d2?/*/*.csv";

SELECT COUNT(*) FROM "data/csv/glob/crawl/d/*/*/d2?/**/*.csv";

SELECT SUM(column0) FROM READ_CSV('data/csv/glob/crawl/d/*/*/d2?/**', auto_detect = 1);

SELECT COUNT(*) FROM "data/csv/glob/crawl/d/**/d?0/*.csv";

SELECT COUNT(*) FROM "data/csv/glob/crawl/d/*/**/d?0/*.csv";

SELECT COUNT(*) FROM "data/csv/glob/crawl/d/**/**/**/**/*.csv";

SELECT * FROM READ_CSV_AUTO('data/csv/glob/crawl/hidden/**');

CREATE TABLE t0 AS SELECT (i % 2) AS c_2, (i % 3) AS c_3, (i * i) AS c_pow FROM RANGE(0, 10) AS tbl(i);

COPY t0 TO '__TEST_DIR__/partitioned0' WITH (PARTITION_BY (c_2, c_3));

SELECT * FROM GLOB('__TEST_DIR__/partitioned0/*');

SELECT COUNT(*) FROM GLOB('__TEST_DIR__/partitioned0/*');

SELECT COUNT(*) FROM GLOB('__TEST_DIR__/partitioned0/*/*/*');

SELECT COUNT(*) FROM GLOB('__TEST_DIR__/partitioned0/*/*/**');

SELECT COUNT(*) FROM GLOB('__TEST_DIR__/partitioned0/*/*/*/**');

SELECT COUNT(*) FROM GLOB('__TEST_DIR__/partitioned0/**');

SELECT COUNT(*) FROM GLOB('__TEST_DIR__/partitioned0/**/*');

SELECT COUNT(*) FROM GLOB('__TEST_DIR__/partitioned0/*/**');

SELECT COUNT(*) FROM GLOB('__TEST_DIR__/partitioned0/**/data_0.csv');

SELECT COUNT(*) FROM GLOB('__TEST_DIR__/partitioned0/**/*/data_0.csv');

SELECT COUNT(*) FROM GLOB('__TEST_DIR__/partitioned0/**/c_3=0/data_0.csv');

SELECT COUNT(*) FROM GLOB('__TEST_DIR__/partitioned0/c_2=0/**/data_0.csv');

COPY t0 TO '__TEST_DIR__/partitioned0/data_1.csv';

SELECT COUNT(*) FROM GLOB('__TEST_DIR__/partitioned0/*');

SELECT COUNT(*) FROM GLOB('__TEST_DIR__/partitioned0/*');

SELECT COUNT(*) FROM GLOB('__TEST_DIR__/partitioned0/*/*/*');

SELECT COUNT(*) FROM GLOB('__TEST_DIR__/partitioned0/*/*/**');

SELECT COUNT(*) FROM GLOB('__TEST_DIR__/partitioned0/*/*/*/**');

SELECT COUNT(*) FROM GLOB('__TEST_DIR__/partitioned0/**');

SELECT COUNT(*) FROM GLOB('__TEST_DIR__/partitioned0/**/*');

SELECT COUNT(*) FROM GLOB('__TEST_DIR__/partitioned0/*/**');

SELECT COUNT(*) FROM GLOB('__TEST_DIR__/partitioned0/**/data_0.csv');

SELECT COUNT(*) FROM GLOB('__TEST_DIR__/partitioned0/**/*/data_0.csv');

SELECT COUNT(*) FROM GLOB('__TEST_DIR__/partitioned0/**/c_3=0/data_0.csv');

SELECT COUNT(*) FROM GLOB('__TEST_DIR__/partitioned0/c_2=0/**/data_0.csv');

SELECT * FROM READ_CSV_AUTO('data/csv/glob/crawl/.symbolic_link/**');

SELECT SUM(column0) FROM READ_CSV('data/csv/glob/crawl/d/**/', auto_detect = 1);

PRAGMA enable_verification;

SELECT * FROM "data/csv/glob_dif_dialect/14166/__200*.csv";

SELECT * FROM READ_CSV(['data/csv/glob_dif_dialect/14166/__2000.csv', 'data/csv/glob_dif_dialect/14166/__2001.csv', 'data/csv/glob_dif_dialect/14166/empty.csv']);

SELECT * FROM READ_CSV(['data/csv/glob_dif_dialect/14166/__2000.csv', 'data/csv/glob_dif_dialect/14166/matching_types.csv']);

SELECT * FROM "data/csv/glob_dif_dialect/f_*.csv" ORDER BY ALL;

PRAGMA enable_verification;

SELECT * FROM READ_CSV('data/csv/multidelimiter/aa_delim_small.csv', delim = 'aa', header = FALSE, buffer_size = 8);

SELECT * FROM READ_CSV('data/csv/multidelimiter/aa_delim_small.csv', delim = 'aa', header = FALSE, buffer_size = 8);

SELECT * FROM READ_CSV('data/csv/multidelimiter/aa_delim_small.csv', delim = 'aa', header = FALSE, buffer_size = 8);

SELECT * FROM READ_CSV('data/csv/multidelimiter/aa_delim_small.csv', delim = 'aa', header = FALSE, buffer_size = 8);

SELECT * FROM READ_CSV('data/csv/multidelimiter/aa_delim_small.csv', delim = 'aa', header = FALSE, buffer_size = 8);

SELECT * FROM READ_CSV('data/csv/multidelimiter/many_bytes.csv', delim = '\|', header = FALSE);

SELECT * FROM READ_CSV('data/csv/multidelimiter/aaab_delim.csv', delim = 'AAAB');

SELECT * FROM READ_CSV('data/csv/multidelimiter/aab_delim.csv', delim = 'AAB');

CREATE TABLE abac_tbl (a TEXT, b TEXT, c TEXT);

COPY abac_tbl FROM 'data/csv/multidelimiter/abac.csv' WITH (DELIMITER 'ABAC', AUTO_DETECT FALSE);

SELECT * FROM abac_tbl;

DELETE FROM abac_tbl;

DROP TABLE abac_tbl;

CREATE TABLE abac_tbl (a TEXT);

COPY abac_tbl FROM 'data/csv/multidelimiter/simple_unterminated_quote.csv' WITH (QUOTE '"', AUTO_DETECT FALSE, strict_mode TRUE);

DROP TABLE abac_tbl;

CREATE TABLE abac_tbl (a TEXT);

COPY abac_tbl FROM 'data/csv/multidelimiter/file_ends_in_quoted_value.csv' WITH (QUOTE '"', AUTO_DETECT FALSE);

SELECT * FROM abac_tbl;

DROP TABLE abac_tbl;

CREATE TABLE abac_tbl (a TEXT);

COPY abac_tbl FROM 'data/csv/multidelimiter/file_ends_in_quoted_value.csv' WITH (QUOTE '"', DELIMITER 'AAAB', AUTO_DETECT FALSE);

SELECT * FROM abac_tbl;

DROP TABLE abac_tbl;

CREATE TABLE abac_tbl (a TEXT);

COPY abac_tbl FROM 'data/csv/multidelimiter/unterminated_quote_with_escape.csv' WITH (QUOTE '"', ESCAPE '|', AUTO_DETECT FALSE, strict_mode TRUE);

DROP TABLE abac_tbl;

CREATE TABLE abac_tbl (a TEXT);

COPY abac_tbl FROM 'data/csv/multidelimiter/unterminated_quote_escape.csv' WITH (QUOTE '"', ESCAPE '"', AUTO_DETECT FALSE, strict_mode TRUE);

DROP TABLE abac_tbl;

CREATE TABLE abac_tbl (a TEXT);

COPY abac_tbl FROM 'data/csv/multidelimiter/unterminated_escape.csv' WITH (QUOTE '"', ESCAPE '''', AUTO_DETECT FALSE, strict_mode TRUE);

DROP TABLE abac_tbl;

CREATE TABLE abac_tbl (a TEXT);

COPY abac_tbl FROM 'data/csv/multidelimiter/incomplete_multibyte_delimiter.csv' WITH (DELIMITER 'ABAC', AUTO_DETECT FALSE, quote '"', strict_mode TRUE);

COPY abac_tbl FROM 'data/csv/multidelimiter/incomplete_multibyte_delimiter.csv' WITH (DELIMITER 'AB', AUTO_DETECT FALSE, quote '"');

DROP TABLE abac_tbl;

CREATE TABLE abac_tbl (a TEXT);

COPY abac_tbl FROM 'data/csv/multidelimiter/abac.csv' WITH (DELIMITER 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', AUTO_DETECT FALSE);

DROP TABLE abac_tbl;

CREATE TABLE abac_tbl (a TEXT, b TEXT);

COPY abac_tbl FROM 'data/csv/multidelimiter/carriage_feed_newline.csv' WITH (DELIMITER 'BA', AUTO_DETECT FALSE);

SELECT * FROM abac_tbl;

DROP TABLE abac_tbl;

CREATE TABLE abac_tbl (a TEXT, b TEXT);

COPY abac_tbl FROM 'data/csv/multidelimiter/windows_newline.csv' WITH (DELIMITER 'BA', AUTO_DETECT FALSE);

SELECT * FROM abac_tbl;

DROP TABLE abac_tbl;

CREATE TABLE abac_tbl (a TEXT);

COPY abac_tbl FROM 'data/csv/multidelimiter/unterminated_quote_multi_line.csv' WITH (DELIMITER 'BA', AUTO_DETECT FALSE, strict_mode TRUE);

DROP TABLE abac_tbl;

CREATE TABLE abac_tbl (a TEXT, b TEXT);

COPY abac_tbl FROM 'data/csv/multidelimiter/unquote_without_delimiter.csv' WITH (DELIMITER 'BA', AUTO_DETECT FALSE, strict_mode TRUE);

DROP TABLE abac_tbl;

CREATE TABLE abac_tbl (a TEXT);

COPY abac_tbl FROM 'data/csv/multidelimiter/trailing_delimiter_complex.csv' WITH (DELIMITER 'BA', AUTO_DETECT FALSE);

SELECT * FROM abac_tbl;

DROP TABLE abac_tbl;

CREATE TABLE abac_tbl (a TEXT);

COPY abac_tbl FROM 'data/csv/multidelimiter/trailing_delimiter.csv' WITH (DELIMITER '|', AUTO_DETECT FALSE);

SELECT * FROM abac_tbl;

SELECT * FROM READ_CSV('data/csv/multidelimiter/aaa_delim.csv', delim = '"\', quote = '"');

SELECT * FROM READ_CSV('data/csv/multidelimiter/aaa_delim.csv', delim = '\\', escape = '\');

SELECT * FROM READ_CSV('data/csv/multidelimiter/aaa_delim.csv', delim = '|#', comment = '#', auto_detect = FALSE, columns = {'a': 'varchar'});

PRAGMA enable_verification;

CREATE TABLE test (a INT, b TEXT);

INSERT INTO test VALUES (1, 'hello'), (2, 'world '), (3, ' xx');

SELECT * FROM test ORDER BY 1;

COPY test TO '__TEST_DIR__/overwrite.csv';

COPY (SELECT * FROM test LIMIT 2) TO '__TEST_DIR__/overwrite.csv';

DELETE FROM test;

COPY test FROM '__TEST_DIR__/overwrite.csv';

SELECT * FROM test ORDER BY 1;

COPY (SELECT i FROM RANGE(0, 1) AS tbl(i) UNION ALL SELECT CAST(CONCAT('hello', i) AS INT) AS i FROM RANGE(0, 1) AS tbl(i)) TO '__TEST_DIR__/overwrite.csv';

DELETE FROM test;

COPY test FROM '__TEST_DIR__/overwrite.csv';

SELECT * FROM test ORDER BY 1;

COPY (SELECT i FROM RANGE(0, 1) AS tbl(i) UNION ALL SELECT CAST(CONCAT('hello', i) AS INT) AS i FROM RANGE(0, 1) AS tbl(i)) TO '__TEST_DIR__/overwrite.csv' WITH (USE_TMP_FILE FALSE);

SELECT * FROM "__TEST_DIR__/overwrite.csv";

PRAGMA verify_parallelism;

SELECT SUM(a), SUM(b), SUM(c) FROM READ_CSV('data/csv/test/multi_column_integer.csv', COLUMNS = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'INTEGER'}, auto_detect = 'true', delim = '|', buffer_size = 30);

SELECT SUM(a) FROM READ_CSV('data/csv/test/multi_column_integer.csv', COLUMNS = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'INTEGER'}, auto_detect = 'true', delim = '|', buffer_size = 30);

SELECT SUM(a) FROM READ_CSV('data/csv/test/multi_column_integer_rn.csv', COLUMNS = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'INTEGER'}, auto_detect = 'true', delim = '|', buffer_size = 30);

SELECT * FROM READ_CSV('data/csv/test/multi_column_string.csv', COLUMNS = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'INTEGER', 'd': 'VARCHAR'}, auto_detect = 'true', delim = '|', buffer_size = 30);

SELECT * FROM READ_CSV('data/csv/test/multi_column_string_rn.csv', COLUMNS = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'INTEGER', 'd': 'VARCHAR'}, auto_detect = 'true', delim = '|', buffer_size = 27);

SELECT SUM(a) FROM READ_CSV('data/csv/test/new_line_string_rn.csv', COLUMNS = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'INTEGER', 'd': 'VARCHAR'}, auto_detect = 'true', delim = '|');

SELECT SUM(a) FROM READ_CSV('data/csv/test/new_line_string_rn.csv', COLUMNS = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'INTEGER', 'd': 'VARCHAR'}, auto_detect = 'true', delim = '|', buffer_size = 100);

SELECT SUM(a) FROM READ_CSV('data/csv/test/new_line_string_rn_exc.csv', COLUMNS = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'INTEGER', 'd': 'VARCHAR'}, auto_detect = 'true', delim = '|');

SELECT SUM(a) FROM READ_CSV('data/csv/test/new_line_string_rn_exc.csv', COLUMNS = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'INTEGER', 'd': 'VARCHAR'}, auto_detect = 'true', delim = '|', buffer_size = 80);

SELECT SUM(a) FROM READ_CSV('data/csv/test/new_line_string.csv', COLUMNS = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'INTEGER', 'd': 'VARCHAR'}, auto_detect = 'true', delim = '|');

SELECT SUM(a) FROM READ_CSV('data/csv/test/new_line_string.csv', COLUMNS = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'INTEGER', 'd': 'VARCHAR'}, quote = '"', escape = '"', comment = '', auto_detect = 'true', delim = '|', buffer_size = 100, new_line = '\r\n', strict_mode = FALSE);

PRAGMA enable_verification;

CREATE TABLE hits (WatchID BIGINT NOT NULL, JavaEnable SMALLINT NOT NULL, Title TEXT, GoodEvent SMALLINT NOT NULL, EventTime TIMESTAMP NOT NULL, EventDate DATE NOT NULL, CounterID INT NOT NULL, ClientIP INT NOT NULL, RegionID INT NOT NULL, UserID BIGINT NOT NULL, CounterClass SMALLINT NOT NULL, OS SMALLINT NOT NULL, UserAgent SMALLINT NOT NULL, URL TEXT, Referer TEXT, IsRefresh SMALLINT NOT NULL, RefererCategoryID SMALLINT NOT NULL, RefererRegionID INT NOT NULL, URLCategoryID SMALLINT NOT NULL, URLRegionID INT NOT NULL, ResolutionWidth SMALLINT NOT NULL, ResolutionHeight SMALLINT NOT NULL, ResolutionDepth SMALLINT NOT NULL, FlashMajor SMALLINT NOT NULL, FlashMinor SMALLINT NOT NULL, FlashMinor2 TEXT, NetMajor SMALLINT NOT NULL, NetMinor SMALLINT NOT NULL, UserAgentMajor SMALLINT NOT NULL, UserAgentMinor TEXT NOT NULL, CookieEnable SMALLINT NOT NULL, JavascriptEnable SMALLINT NOT NULL, IsMobile SMALLINT NOT NULL, MobilePhone SMALLINT NOT NULL, MobilePhoneModel TEXT, Params TEXT, IPNetworkID INT NOT NULL, TraficSourceID SMALLINT NOT NULL, SearchEngineID SMALLINT NOT NULL, SearchPhrase TEXT, AdvEngineID SMALLINT NOT NULL, IsArtifical SMALLINT NOT NULL, WindowClientWidth SMALLINT NOT NULL, WindowClientHeight SMALLINT NOT NULL, ClientTimeZone SMALLINT NOT NULL, ClientEventTime TIMESTAMP NOT NULL, SilverlightVersion1 SMALLINT NOT NULL, SilverlightVersion2 SMALLINT NOT NULL, SilverlightVersion3 INT NOT NULL, SilverlightVersion4 SMALLINT NOT NULL, PageCharset TEXT, CodeVersion INT NOT NULL, IsLink SMALLINT NOT NULL, IsDownload SMALLINT NOT NULL, IsNotBounce SMALLINT NOT NULL, FUniqID BIGINT NOT NULL, OriginalURL TEXT, HID INT NOT NULL, IsOldCounter SMALLINT NOT NULL, IsEvent SMALLINT NOT NULL, IsParameter SMALLINT NOT NULL, DontCountHits SMALLINT NOT NULL, WithHash SMALLINT NOT NULL, HitColor TEXT NOT NULL, LocalEventTime TIMESTAMP NOT NULL, Age SMALLINT NOT NULL, Sex SMALLINT NOT NULL, Income SMALLINT NOT NULL, Interests SMALLINT NOT NULL, Robotness SMALLINT NOT NULL, RemoteIP INT NOT NULL, WindowName INT NOT NULL, OpenerName INT NOT NULL, HistoryLength SMALLINT NOT NULL, BrowserLanguage TEXT, BrowserCountry TEXT, SocialNetwork TEXT, SocialAction TEXT, HTTPError SMALLINT NOT NULL, SendTiming INT NOT NULL, DNSTiming INT NOT NULL, ConnectTiming INT NOT NULL, ResponseStartTiming INT NOT NULL, ResponseEndTiming INT NOT NULL, FetchTiming INT NOT NULL, SocialSourceNetworkID SMALLINT NOT NULL, SocialSourcePage TEXT, ParamPrice BIGINT NOT NULL, ParamOrderID TEXT, ParamCurrency TEXT, ParamCurrencyID SMALLINT NOT NULL, OpenstatServiceName TEXT, OpenstatCampaignID TEXT, OpenstatAdID TEXT, OpenstatSourceID TEXT, UTMSource TEXT, UTMMedium TEXT, UTMCampaign TEXT, UTMContent TEXT, UTMTerm TEXT, FromTag TEXT, HasGCLID SMALLINT NOT NULL, RefererHash BIGINT NOT NULL, URLHash BIGINT NOT NULL, CLID INT NOT NULL, PRIMARY KEY (CounterID, EventDate, UserID, EventTime, WatchID));

INSERT INTO hits SELECT * FROM READ_CSV('https://datasets.clickhouse.com/hits_compatible/hits.csv.gz');

SELECT COUNT(*) FROM hits;

PRAGMA verify_parallelism;

PRAGMA verify_parallelism;

PRAGMA verify_parallelism;

PRAGMA verify_parallelism;

PRAGMA verify_parallelism;

PRAGMA verify_parallelism;

PRAGMA verify_parallelism;

SELECT * FROM READ_CSV_AUTO('data/csv/auto/multi_column_string_mix.csv');

SELECT * FROM READ_CSV_AUTO('data/csv/auto/multi_column_string_mix.csv', strict_mode = FALSE);

SELECT * FROM READ_CSV('data/csv/test/multi_column_string.csv', COLUMNS = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'INTEGER', 'd': 'VARCHAR'}, auto_detect = 'false', delim = '|', new_line = '\n');

SELECT * FROM READ_CSV_AUTO('data/csv/test/multi_column_string.csv', new_line = '\n');

SELECT * FROM READ_CSV_AUTO('data/csv/test/multi_column_string.csv', new_line = 'not_valid');

PRAGMA enable_verification;

PRAGMA threads = 4;

PRAGMA enable_profiling;

PRAGMA profiling_output = '__TEST_DIR__/test.json';

PRAGMA profiling_mode = detailed;

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (3);

SELECT MIN(i + i) FROM integers;

CREATE TABLE exprtest (a INT, b INT);

INSERT INTO exprtest VALUES (42, 10), (43, 100), (NULL, 1), (45, -1);

SELECT MIN(a + a) FROM exprtest;

SELECT a FROM exprtest WHERE a BETWEEN 43 AND 44;

SELECT CASE a WHEN 42 THEN 100 WHEN 43 THEN 200 ELSE 300 END FROM exprtest;

PRAGMA profiling_output = '__TEST_DIR__/test_2.json';

SELECT COUNT(*) > 0 FROM READ_CSV('__TEST_DIR__/test.json', columns = {'c': 'VARCHAR'}, delim = NULL, header = 0, quote = NULL, escape = NULL, auto_detect = FALSE) WHERE CONTAINS(c, 'Optimizer');

PRAGMA threads = 4;

PRAGMA threads = 4;

PRAGMA threads = 4;

PRAGMA threads = 4;

PRAGMA threads = 4;

PRAGMA threads = 4;

PRAGMA threads = 4;

PRAGMA default_null_order = 'NULLS LAST';

SELECT COUNT(*) FROM call_center;

SELECT COUNT(*) FROM catalog_page;

SELECT COUNT(*) FROM catalog_returns;

SELECT COUNT(*) FROM catalog_sales;

SELECT COUNT(*) FROM customer;

SELECT COUNT(*) FROM customer_demographics;

SELECT COUNT(*) FROM customer_address;

SELECT COUNT(*) FROM date_dim;

SELECT COUNT(*) FROM household_demographics;

SELECT COUNT(*) FROM inventory;

SELECT COUNT(*) FROM income_band;

SELECT COUNT(*) FROM item;

SELECT COUNT(*) FROM promotion;

SELECT COUNT(*) FROM reason;

SELECT COUNT(*) FROM ship_mode;

SELECT COUNT(*) FROM store;

SELECT COUNT(*) FROM store_returns;

SELECT COUNT(*) FROM store_sales;

SELECT COUNT(*) FROM time_dim;

SELECT COUNT(*) FROM warehouse;

SELECT COUNT(*) FROM web_page;

SELECT COUNT(*) FROM web_returns;

SELECT COUNT(*) FROM web_sales;

SELECT COUNT(*) FROM web_site;

SELECT COUNT(*) FROM web_site;

SELECT COUNT(*) FROM web_site;

PRAGMA threads = 4;

PRAGMA threads = 4;

PRAGMA threads = 4;

PRAGMA threads = 4;

PRAGMA threads = 4;

PRAGMA threads = 4;

PRAGMA threads = 4;

PRAGMA threads = 4;

PRAGMA threads = 4;

PRAGMA enable_verification;

PRAGMA verify_parallelism;

SELECT id, value, filename.replace('\', '/').split('/')[-2], filename.replace('\', '/').split('/')[-3] FROM READ_CSV_AUTO('data/csv/hive-partitioning/simple/*/*/test.csv', FILENAME = 1) ORDER BY id;

SELECT id, value, part, date FROM READ_CSV_AUTO('data/csv/hive-partitioning/simple/*/*/test.csv', HIVE_PARTITIONING = 1) ORDER BY id;

SELECT part, value, date FROM READ_CSV_AUTO('data/csv/hive-partitioning/simple/*/*/test.csv', HIVE_PARTITIONING = 1) ORDER BY 1;

PRAGMA enable_verification;

SET default_null_order = 'nulls_first';

PRAGMA verify_parallelism;

SELECT id, value, a, part FROM READ_CSV_AUTO('data/csv/union-by-name/part=[ab]/*', HIVE_PARTITIONING = TRUE, UNION_BY_NAME = TRUE) ORDER BY id;

SELECT k, c, ts, REPLACE(filename, '\', '/') FROM READ_CSV_AUTO('data/csv/union-by-name/ubn[!1-2].csv', FILENAME = TRUE, UNION_BY_NAME = TRUE) ORDER BY c;

SELECT a, b, c, ts, k FROM READ_CSV_AUTO('data/csv/union-by-name/ubn*.csv', UNION_BY_NAME = TRUE) ORDER BY a, c, ts;

SELECT TYPEOF(a), TYPEOF(b), TYPEOF(c), TYPEOF(ts), TYPEOF(k) FROM READ_CSV_AUTO('data/csv/union-by-name/ubn*.csv', UNION_BY_NAME = TRUE) LIMIT 1;

SELECT c, k FROM READ_CSV_AUTO('data/csv/union-by-name/ubn*.csv', UNION_BY_NAME = TRUE) ORDER BY c, k;

SELECT ts FROM READ_CSV_AUTO('data/csv/union-by-name/ubn*.csv', UNION_BY_NAME = TRUE) ORDER BY ts;

PRAGMA enable_verification;

PRAGMA verify_parallelism;

SELECT j ->> '$.duck' FROM READ_CSV_AUTO('data/csv/test/5438.csv', delim = '', columns = {'j': 'JSON'}, auto_detect = FALSE);

PRAGMA verify_parallelism;

PRAGMA enable_verification;

SELECT * FROM READ_CSV_AUTO('data/csv/auto/test_single_column.csv');

SELECT * FROM READ_CSV_AUTO('data/csv/auto/test_single_column_rn.csv');

SELECT foo, COUNT(1) AS cnt FROM READ_CSV_AUTO('data/csv/auto/test_multiple_columns.csv') GROUP BY foo ORDER BY cnt DESC;

SELECT foo, COUNT(1) AS cnt FROM READ_CSV_AUTO('data/csv/auto/test_multiple_columns_rn.csv') GROUP BY foo ORDER BY cnt DESC;

PRAGMA verify_parallelism;

PRAGMA enable_verification;

SELECT * FROM READ_CSV('data/csv/bug_7578.csv', delim = '\t', quote = '`', columns = {'transaction_id': 'VARCHAR', 'team_id': 'INT', 'direction': 'INT', 'amount': 'DOUBLE', 'account_id': 'INT', 'transaction_date': 'DATE', 'recorded_date': 'DATE', 'tags.transaction_id': 'VARCHAR', 'tags.team_id': 'INT', 'tags': 'varchar'}) ORDER BY ALL;

PRAGMA threads = 2;

SELECT * FROM READ_CSV('data/csv/bug_7578.csv', delim = '\t', columns = {'transaction_id': 'VARCHAR', 'team_id': 'INT', 'direction': 'INT', 'amount': 'DOUBLE', 'account_id': 'INT', 'transaction_date': 'DATE', 'recorded_date': 'DATE', 'tags.transaction_id': 'VARCHAR', 'tags.team_id': 'INT', 'tags': 'varchar'});

PRAGMA enable_verification;

SELECT COUNT(*) FROM READ_CSV_AUTO('data/csv/CrashStatistics.csv', SAMPLE_SIZE = -1);

PRAGMA verify_parallelism;

PRAGMA enable_verification;

SELECT * FROM READ_CSV_AUTO('data/csv/auto/glob/[0-9].csv');

SELECT * FROM READ_CSV_AUTO('data/csv/auto/glob/[0-9].csv', buffer_size = 100);

SELECT * FROM READ_CSV('data/csv/auto/glob/[0-9].csv', AUTO_DETECT = TRUE);

SELECT * FROM READ_CSV('data/csv/auto/glob/[0-9].csv', sample_size = -1, new_line = '\r\n', columns = {'row_id': 'BIGINT', 'integer': 'INTEGER', 'float': 'DOUBLE', 'text': 'VARCHAR'});

PRAGMA enable_verification;

SELECT * FROM READ_CSV('data/csv/14512_og.csv', buffer_size = 473, strict_mode = FALSE, delim = ',', quote = '"', escape = '"');

SELECT * FROM READ_CSV_AUTO('data/csv/dirty_line.csv', skip = 1);

SELECT * FROM READ_CSV_AUTO('data/csv/null_string.csv', nullstr = "null");

SELECT * FROM READ_CSV_AUTO('data/csv/null_string.csv', header = FALSE);

SELECT * FROM READ_CSV_AUTO('data/csv/aws_locations.csv');

SELECT * FROM READ_CSV_AUTO("https://duckdb-public-gzip-test.s3.us-east-2.amazonaws.com/test.csv", header = 0);

SELECT * FROM READ_CSV_AUTO("https://duckdb-public-gzip-test.s3.us-east-2.amazonaws.com/test.csv.gz", header = 0);

PRAGMA enable_verification;

PRAGMA verify_parallelism;

SET threads=4
foreach batched true false;

SET threads=4
foreach batched true false;

SELECT * FROM READ_CSV('data/csv/missing_column.csv', sep = ',', buffer_size = 100, columns = {'h1': int, 'h2': varchar}, header = TRUE, auto_detect = FALSE);

SELECT * FROM READ_CSV('data/csv/wrongtype.csv', sep = ',', buffer_size = 100, columns = {'h1': int, 'h2': varchar}, header = TRUE);

SELECT * FROM READ_CSV('data/csv/wrongtype.csv', sep = ',', buffer_size = 100, columns = {'h1': int, 'h2': varchar}, header = TRUE, auto_detect = FALSE);

SELECT * FROM READ_CSV('data/csv/wrongtype.csv', sep = ',', columns = {'h1': int, 'h2': varchar}, header = TRUE);

SELECT * FROM READ_CSV('data/csv/error/mixedtypes.csv', parallel = FALSE, sep = ',', columns = {'h1': int, 'h2': varchar}, header = TRUE);

SELECT * FROM READ_CSV('data/csv/error/mixedtypes.csv', parallel = TRUE, sep = ',', buffer_size = 100, columns = {'h1': int, 'h2': varchar}, header = TRUE);

SELECT * FROM READ_CSV('data/csv/error/mixedtypes.csv', parallel = FALSE, sep = ',', buffer_size = 100, columns = {'h1': int, 'h2': varchar}, header = TRUE);

SELECT * FROM READ_CSV('data/csv/error/mixedtypes_rn.csv', parallel = FALSE, sep = ',', columns = {'h1': int, 'h2': varchar}, header = TRUE);

SELECT * FROM READ_CSV('data/csv/error/mixedtypes_rn.csv', parallel = TRUE, sep = ',', buffer_size = 100, columns = {'h1': int, 'h2': varchar}, header = TRUE);

SELECT * FROM READ_CSV('data/csv/error/mixedtypes_rn.csv', parallel = FALSE, sep = ',', buffer_size = 100, columns = {'h1': int, 'h2': varchar}, header = TRUE);

SELECT * FROM READ_CSV('data/csv/error/quotednewlines.csv', parallel = TRUE, sep = ',', buffer_size = 100, columns = {'h1': varchar, 'h2': varchar}, header = TRUE);

SELECT * FROM READ_CSV('data/csv/error/quotednewlines.csv', parallel = TRUE, sep = ',', buffer_size = 200, columns = {'h1': int, 'h2': varchar}, header = TRUE);

SELECT * FROM READ_CSV('data/csv/error/quotednewlines.csv', parallel = TRUE, sep = ',', buffer_size = 200, columns = {'h1': int, 'h2': varchar}, header = TRUE);

SELECT * FROM READ_CSV('data/csv/error/quotednewlines.csv', parallel = TRUE, sep = ',', buffer_size = 200, columns = {'h1': int, 'h2': varchar}, header = TRUE);

SELECT * FROM READ_CSV('data/csv/error/date.csv', parallel = TRUE, sep = ',', buffer_size = 100, columns = {'h1': date, 'h2': varchar}, header = TRUE);

SELECT * FROM READ_CSV('data/csv/error/date.csv', parallel = FALSE, sep = ',', buffer_size = 100, columns = {'h1': date, 'h2': varchar}, header = TRUE);

SELECT * FROM READ_CSV('data/csv/error/time.csv', parallel = TRUE, sep = ',', buffer_size = 100, columns = {'h1': time, 'h2': varchar}, header = TRUE);

SELECT * FROM READ_CSV('data/csv/error/time.csv', parallel = FALSE, sep = ',', buffer_size = 100, columns = {'h1': time, 'h2': varchar}, header = TRUE);

SELECT * FROM READ_CSV('data/csv/error/timestamp.csv', parallel = TRUE, sep = ',', buffer_size = 200, columns = {'h1': timestamp, 'h2': varchar}, header = TRUE);

SELECT * FROM READ_CSV('data/csv/error/timestamp.csv', parallel = FALSE, sep = ',', columns = {'h1': timestamp, 'h2': varchar}, header = TRUE);

SELECT * FROM READ_CSV('data/csv/error/timestamp.csv', parallel = TRUE, sep = ',', buffer_size = 100, columns = {'h1': timestamp, 'h2': varchar}, header = TRUE);

PRAGMA enable_verification;

PRAGMA enable_verification;

SELECT * FROM READ_CSV('${path}/bad_date.csv');

SELECT * FROM READ_CSV('${path}/bad_date.csv');

SELECT * EXCLUDE (scan_id) FROM reject_errors ORDER BY ALL;

DROP TABLE reject_errors;

DROP TABLE reject_errors;

DROP TABLE reject_errors;

DROP TABLE reject_errors;

SELECT * EXCLUDE (file_id, scan_id) FROM reject_errors ORDER BY ALL;

DROP TABLE reject_errors;

SELECT * FROM READ_CSV('data/csv/rejects/incorrect_columns/few_columns.csv', columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'INTEGER', 'd': 'INTEGER'}, store_rejects = TRUE, auto_detect = FALSE, header = 1);

SELECT * EXCLUDE (scan_id) FROM reject_errors ORDER BY ALL;

DROP TABLE reject_errors;

DROP TABLE reject_scans;

SELECT * FROM READ_CSV('data/csv/rejects/incorrect_columns/many_columns.csv', columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'INTEGER', 'd': 'INTEGER'}, store_rejects = TRUE, auto_detect = FALSE, header = 1, strict_mode = TRUE);

SELECT * EXCLUDE (scan_id) FROM reject_errors ORDER BY ALL;

DROP TABLE reject_errors;

DROP TABLE reject_scans;

SELECT * FROM READ_CSV('data/csv/rejects/incorrect_columns/mix_columns.csv', columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'INTEGER', 'd': 'INTEGER'}, store_rejects = TRUE, auto_detect = FALSE, header = 1, strict_mode = TRUE);

SELECT * EXCLUDE (scan_id) FROM reject_errors ORDER BY ALL;

DROP TABLE reject_errors;

DROP TABLE reject_scans;

SELECT * FROM READ_CSV('data/csv/rejects/incorrect_columns/small_mix.csv', columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'INTEGER', 'd': 'INTEGER'}, store_rejects = TRUE, auto_detect = FALSE, header = 1, strict_mode = TRUE);

SELECT * EXCLUDE (scan_id) FROM reject_errors ORDER BY ALL;

DROP TABLE reject_errors;

DROP TABLE reject_scans;

SELECT * FROM READ_CSV('data/csv/rejects/incorrect_columns/*.csv', columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'INTEGER', 'd': 'INTEGER'}, store_rejects = TRUE, auto_detect = FALSE, header = 1, strict_mode = TRUE);

SELECT * EXCLUDE (scan_id) FROM reject_errors ORDER BY ALL;

SELECT TYPEOF(FIRST(column0)), TYPEOF(FIRST(column1)), COUNT(*), SUM(column0), MAX(LENGTH(column1)) FROM READ_CSV_AUTO('data/csv/error/mismatch/big_bad*.csv', sample_size = 1, store_rejects = TRUE);

SELECT * EXCLUDE (scan_id) FROM reject_errors ORDER BY ALL;

DROP TABLE reject_errors;

DROP TABLE reject_scans;

SELECT SUM(num) FROM READ_CSV_AUTO('data/csv/error/mismatch/half1.csv', header = TRUE, sample_size = 1, store_rejects = TRUE);

SELECT COUNT(*) FROM reject_errors;

DROP TABLE reject_errors;

DROP TABLE reject_scans;

SELECT SUM(num) FROM READ_CSV_AUTO('data/csv/error/mismatch/half2.csv', header = TRUE, ignore_errors = TRUE, sample_size = 1, rejects_table = 'csv_rejects_table');

SELECT COUNT(*) FROM csv_rejects_table;

SELECT FIRST(a), FIRST(b), TYPEOF(FIRST(a)), TYPEOF(FIRST(b)), COUNT(*) FROM READ_CSV('data/csv/error/flush_cast.csv', columns = {'a': 'DATE', 'b': 'VARCHAR'}, store_rejects = TRUE, delim = ',', dateformat = '%d-%m-%Y');

SELECT * EXCLUDE (scan_id) FROM reject_errors ORDER BY ALL;

SELECT * FROM READ_CSV('data/csv/rejects/flush.csv', columns = {'a': 'DECIMAL'}, store_rejects = TRUE);

SELECT * EXCLUDE (scan_id) FROM reject_errors ORDER BY ALL;

SELECT * FROM READ_CSV('data/csv/rejects/maximum_line/max_10.csv', columns = {'a': 'VARCHAR', 'b': 'INTEGER'}, store_rejects = TRUE, auto_detect = FALSE, header = 1, max_line_size = 10);

SELECT * EXCLUDE (scan_id) FROM reject_errors ORDER BY ALL;

DROP TABLE reject_errors;

DROP TABLE reject_errors;

DROP TABLE reject_errors;

SELECT * EXCLUDE (scan_id) FROM reject_errors ORDER BY ALL;

DROP TABLE reject_errors;

DROP TABLE reject_scans;
endloop;

SELECT * FROM READ_CSV('data/csv/rejects/maximum_line/over_vector.csv', columns = {'a': 'VARCHAR', 'b': 'INTEGER'}, store_rejects = TRUE, auto_detect = FALSE, header = 1, max_line_size = 20);

SELECT * EXCLUDE (scan_id) FROM reject_errors ORDER BY ALL;

DROP TABLE reject_errors;

DROP TABLE reject_scans;

SELECT * FROM READ_CSV('data/csv/rejects/maximum_line/*.csv', columns = {'a': 'VARCHAR', 'b': 'INTEGER'}, store_rejects = TRUE, auto_detect = FALSE, header = 1, max_line_size = 10);

SELECT * EXCLUDE (scan_id) FROM reject_errors ORDER BY ALL;

DROP TABLE reject_errors;

SELECT * FROM READ_CSV('data/csv/error/mismatch/bad.csv', columns = {'col0': 'INTEGER', 'col1': 'INTEGER', 'col2': 'VARCHAR'}, store_rejects = TRUE, auto_detect = TRUE);

SELECT * EXCLUDE (scan_id) FROM reject_errors;

DROP TABLE reject_errors;

DROP TABLE reject_scans;

SELECT * FROM READ_CSV('data/csv/error/mismatch/bad2.csv', columns = {'col0': 'INTEGER', 'col1': 'INTEGER', 'col2': 'INTEGER'}, store_rejects = TRUE, auto_detect = FALSE);

SELECT * EXCLUDE (scan_id) FROM reject_errors ORDER BY ALL;

DROP TABLE reject_errors;

DROP TABLE reject_scans;

SELECT * FROM READ_CSV('data/csv/error/mismatch/bad*.csv', columns = {'col0': 'INTEGER', 'col1': 'INTEGER', 'col2': 'VARCHAR'}, store_rejects = TRUE, auto_detect = FALSE);

SELECT * EXCLUDE (scan_id) FROM reject_errors ORDER BY ALL;

DROP TABLE reject_errors;

DROP TABLE reject_scans;

SELECT * FROM READ_CSV('data/csv/error/mismatch/bad*.csv', columns = {'col0': 'INTEGER', 'col1': 'INTEGER', 'col2': 'VARCHAR'}, store_rejects = TRUE, rejects_limit = 2, ignore_errors = TRUE, auto_detect = FALSE);

SELECT COUNT(*) FROM reject_errors;

DROP TABLE reject_errors;

DROP TABLE reject_scans;

SELECT SUM(num) FROM READ_CSV('data/csv/error/mismatch/big_bad.csv', columns = {'num': 'INTEGER', 'str': 'VARCHAR'}, store_rejects = TRUE, auto_detect = FALSE);

SELECT * EXCLUDE (scan_id) FROM reject_errors ORDER BY ALL;

DROP TABLE reject_errors;

DROP TABLE reject_scans;

SELECT SUM(num) FROM READ_CSV('data/csv/error/mismatch/big_bad2.csv', columns = {'num': 'INTEGER', 'str': 'VARCHAR'}, store_rejects = TRUE, auto_detect = FALSE);

SELECT * EXCLUDE (scan_id) FROM reject_errors ORDER BY ALL;

DROP TABLE reject_errors;

DROP TABLE reject_scans;

SELECT SUM(num) FROM READ_CSV('data/csv/error/mismatch/big_*.csv', columns = {'num': 'INTEGER', 'str': 'VARCHAR'}, store_rejects = TRUE, auto_detect = FALSE);

SELECT * EXCLUDE (scan_id) FROM reject_errors ORDER BY ALL;

DROP TABLE reject_errors;

DROP TABLE reject_scans;

SELECT * FROM READ_CSV('data/csv/error/mismatch/small1.csv', columns = {'num': 'INTEGER', 'str': 'VARCHAR'}, store_rejects = TRUE) AS L JOIN READ_CSV('data/csv/error/mismatch/small2.csv', columns = {'num': 'INTEGER', 'str': 'VARCHAR'}, store_rejects = TRUE) AS R ON L.num = R.num;

SELECT * EXCLUDE (scan_id, file_id) FROM reject_scans ORDER BY ALL;

SELECT * EXCLUDE (scan_id, file_id) FROM reject_errors ORDER BY ALL;

DROP TABLE reject_errors;

DROP TABLE reject_scans;

SELECT * FROM READ_CSV('data/csv/error/mismatch/small1.csv', columns = {'num': 'INTEGER', 'str': 'VARCHAR'}, store_rejects = TRUE) AS L JOIN READ_CSV('data/csv/error/mismatch/small2.csv', columns = {'num': 'INTEGER', 'str': 'VARCHAR'}, store_rejects = TRUE, rejects_limit = 1) AS R ON L.num = R.num;

SELECT * EXCLUDE (scan_id, file_id) FROM reject_errors ORDER BY ALL;

DROP TABLE reject_errors;

DROP TABLE reject_scans;

SELECT * FROM READ_CSV('data/csv/rejects/dr_who.csv', columns = {'date': 'DATE', 'datetime': 'TIMESTAMPTZ', 'time': 'TIME', 'timestamp': 'TIMESTAMP', 'time_tz': 'TIMETZ'}, store_rejects = TRUE);

SELECT * EXCLUDE (scan_id, file_id) FROM reject_errors ORDER BY column_name;

DROP TABLE reject_errors;

DROP TABLE reject_scans;

SELECT * FROM READ_CSV('data/csv/comments/error.csv', store_rejects = TRUE, comment = '#');

SELECT * EXCLUDE (scan_id, file_id) FROM reject_errors ORDER BY column_name;

DROP TABLE reject_errors;

DROP TABLE reject_scans;

SELECT * FROM READ_CSV('data/csv/error.csv', store_rejects = 1, strict_mode = TRUE);

SELECT * EXCLUDE (scan_id, file_id) FROM reject_errors ORDER BY column_name;

DROP TABLE reject_errors;

SELECT TYPEOF(FIRST(column0)), TYPEOF(FIRST(column1)), COUNT(*), SUM(column0), MAX(LENGTH(column1)) FROM READ_CSV_AUTO('data/csv/error/mismatch/big_bad*.csv', sample_size = 1, store_rejects = TRUE);

SELECT * EXCLUDE (scan_id) FROM reject_scans ORDER BY ALL;

SELECT * EXCLUDE (scan_id) FROM reject_errors ORDER BY ALL;

SELECT TYPEOF(FIRST(column0)), TYPEOF(FIRST(column1)), COUNT(*), SUM(column0), MAX(LENGTH(column1)) FROM READ_CSV_AUTO('data/csv/error/mismatch/big_bad*.csv', sample_size = 1, rejects_table = 'rejects_errors_2');

DROP TABLE reject_scans;

SELECT TYPEOF(FIRST(column0)), TYPEOF(FIRST(column1)), COUNT(*), SUM(column0), MAX(LENGTH(column1)) FROM READ_CSV_AUTO('data/csv/error/mismatch/big_bad*.csv', sample_size = 1, rejects_table = 'rejects_errors_2');

SELECT * EXCLUDE (scan_id) FROM reject_scans ORDER BY ALL;

SELECT * EXCLUDE (scan_id) FROM rejects_errors_2 ORDER BY ALL;

DROP TABLE reject_errors;

SELECT TYPEOF(FIRST(column0)), TYPEOF(FIRST(column1)), COUNT(*), SUM(column0), MAX(LENGTH(column1)) FROM READ_CSV_AUTO('data/csv/error/mismatch/big_bad*.csv', sample_size = 1, rejects_scan = 'rejects_scan_2');

SELECT * EXCLUDE (scan_id) FROM rejects_scan_2 ORDER BY ALL;

SELECT * EXCLUDE (scan_id) FROM reject_errors ORDER BY ALL;

SELECT TYPEOF(FIRST(column0)), TYPEOF(FIRST(column1)), COUNT(*), SUM(column0), MAX(LENGTH(column1)) FROM READ_CSV_AUTO('data/csv/error/mismatch/big_bad*.csv', sample_size = 1, rejects_scan = 'rejects_scan_3', rejects_table = 'rejects_errors_3');

SELECT * EXCLUDE (scan_id) FROM rejects_scan_3 ORDER BY ALL;

SELECT * EXCLUDE (scan_id) FROM rejects_errors_3 ORDER BY ALL;

DROP TABLE reject_errors;

DROP TABLE reject_scans;

CREATE TEMPORARY TABLE t (a INT);

SELECT TYPEOF(FIRST(column0)), TYPEOF(FIRST(column1)), COUNT(*), SUM(column0), MAX(LENGTH(column1)) FROM READ_CSV_AUTO('data/csv/error/mismatch/big_bad*.csv', sample_size = 1, rejects_table = 't');

SELECT TYPEOF(FIRST(column0)), TYPEOF(FIRST(column1)), COUNT(*), SUM(column0), MAX(LENGTH(column1)) FROM READ_CSV_AUTO('data/csv/error/mismatch/big_bad*.csv', sample_size = 1, rejects_scan = 't');

SELECT TYPEOF(FIRST(column0)), TYPEOF(FIRST(column1)), COUNT(*), SUM(column0), MAX(LENGTH(column1)) FROM READ_CSV_AUTO('data/csv/error/mismatch/big_bad*.csv', sample_size = 1, rejects_table = 't', rejects_scan = 't');

SELECT TYPEOF(FIRST(column0)), TYPEOF(FIRST(column1)), COUNT(*), SUM(column0), MAX(LENGTH(column1)) FROM READ_CSV_AUTO('data/csv/error/mismatch/big_bad*.csv', sample_size = 1, rejects_scan = 'rejects_scan_3', rejects_table = 'rejects_errors_3', ignore_errors = FALSE);

SELECT TYPEOF(FIRST(column0)), TYPEOF(FIRST(column1)), COUNT(*), SUM(column0), MAX(LENGTH(column1)) FROM READ_CSV_AUTO('data/csv/error/mismatch/big_bad*.csv', sample_size = 1, store_rejects = TRUE, ignore_errors = FALSE);

SELECT TYPEOF(FIRST(column0)), TYPEOF(FIRST(column1)), COUNT(*), SUM(column0), MAX(LENGTH(column1)) FROM READ_CSV_AUTO('data/csv/error/mismatch/big_bad*.csv', sample_size = 1, rejects_table = 'rejects_errors_3', ignore_errors = FALSE);

SELECT TYPEOF(FIRST(column0)), TYPEOF(FIRST(column1)), COUNT(*), SUM(column0), MAX(LENGTH(column1)) FROM READ_CSV_AUTO('data/csv/error/mismatch/big_bad*.csv', sample_size = 1, rejects_scan = 'rejects_scan_3', ignore_errors = FALSE);

SELECT TYPEOF(FIRST(column0)), TYPEOF(FIRST(column1)), COUNT(*), SUM(column0), MAX(LENGTH(column1)) FROM READ_CSV_AUTO('data/csv/error/mismatch/big_bad*.csv', sample_size = 1, rejects_scan = 'rejects_scan_3', rejects_table = 'rejects_errors_3', store_rejects = FALSE);

SELECT TYPEOF(FIRST(column0)), TYPEOF(FIRST(column1)), COUNT(*), SUM(column0), MAX(LENGTH(column1)) FROM READ_CSV_AUTO('data/csv/error/mismatch/big_bad*.csv', sample_size = 1, rejects_table = 'rejects_errors_3', store_rejects = FALSE);

SELECT TYPEOF(FIRST(column0)), TYPEOF(FIRST(column1)), COUNT(*), SUM(column0), MAX(LENGTH(column1)) FROM READ_CSV_AUTO('data/csv/error/mismatch/big_bad*.csv', sample_size = 1, rejects_scan = 'rejects_scan_3', store_rejects = FALSE);

SELECT TYPEOF(FIRST(column0)), TYPEOF(FIRST(column1)), COUNT(*), SUM(column0), MAX(LENGTH(column1)) FROM READ_CSV_AUTO('data/csv/error/mismatch/big_bad*.csv', sample_size = 1, rejects_scan = 'same_name_because_why_not', rejects_table = 'same_name_because_why_not', store_rejects = TRUE);

SELECT * FROM READ_CSV('data/csv/rejects/unquoted/basic.csv', columns = {'a': 'VARCHAR', 'b': 'INTEGER'}, store_rejects = TRUE, auto_detect = FALSE, header = 1, quote = '"', escape = '"', strict_mode = TRUE);

SELECT REGEXP_REPLACE(file_path, '\\', '/', 'g'), line, column_idx, column_name, error_type, csv_line, line_byte_position, byte_position FROM reject_scans INNER JOIN reject_errors ON (reject_scans.scan_id = reject_errors.scan_id AND reject_scans.file_id = reject_errors.file_id);

DROP TABLE reject_scans;

DROP TABLE reject_errors;

SELECT * FROM READ_CSV('data/csv/rejects/unquoted/unquoted_new_line.csv', columns = {'a': 'VARCHAR', 'b': 'INTEGER'}, store_rejects = TRUE, auto_detect = FALSE, header = 1, quote = '"', escape = '"', strict_mode = TRUE);

SELECT REGEXP_REPLACE(file_path, '\\', '/', 'g'), line, column_idx, column_name, error_type, line_byte_position, byte_position FROM reject_scans INNER JOIN reject_errors ON (reject_scans.scan_id = reject_errors.scan_id AND reject_scans.file_id = reject_errors.file_id);

DROP TABLE reject_scans;

DROP TABLE reject_errors;

SELECT * FROM READ_CSV('data/csv/rejects/unquoted/unquoted_last_value.csv', columns = {'a': 'VARCHAR'}, store_rejects = TRUE, auto_detect = FALSE, header = 0, quote = '"', escape = '"', strict_mode = TRUE);

SELECT REGEXP_REPLACE(file_path, '\\', '/', 'g'), line, column_idx, column_name, error_type, csv_line, line_byte_position, byte_position FROM reject_scans INNER JOIN reject_errors ON (reject_scans.scan_id = reject_errors.scan_id AND reject_scans.file_id = reject_errors.file_id);

DROP TABLE reject_scans;

DROP TABLE reject_scans;

DROP TABLE reject_scans;

SELECT REGEXP_REPLACE(file_path, '\\', '/', 'g'), line, column_idx, column_name, error_type, csv_line, line_byte_position, byte_position FROM reject_scans INNER JOIN reject_errors ON (reject_scans.scan_id = reject_errors.scan_id AND reject_scans.file_id = reject_errors.file_id);

DROP TABLE reject_scans;

SELECT * FROM READ_CSV('data/csv/error/mismatch/bad.csv', columns = {'col0': 'INTEGER', 'col1': 'INTEGER', 'col2': 'VARCHAR'}, ignore_errors = FALSE, store_rejects = TRUE);

SELECT * FROM READ_CSV('data/csv/error/mismatch/bad.csv', columns = {'col0': 'INTEGER', 'col1': 'INTEGER', 'col2': 'VARCHAR'}, ignore_errors = TRUE, rejects_table = '');

SELECT * FROM READ_CSV('data/csv/error/mismatch/bad.csv', columns = {'col0': 'INTEGER', 'col1': 'INTEGER', 'col2': 'VARCHAR'}, ignore_errors = TRUE, rejects_table = 'csv_rejects_table', union_by_name = TRUE);

SELECT * FROM READ_CSV('data/csv/error/mismatch/bad.csv', columns = {'col0': 'INTEGER', 'col1': 'INTEGER', 'col2': 'VARCHAR'}, ignore_errors = TRUE, rejects_limit = 10);

SELECT * FROM READ_CSV('data/csv/error/mismatch/bad.csv', columns = {'col0': 'INTEGER', 'col1': 'INTEGER', 'col2': 'VARCHAR'}, ignore_errors = TRUE, rejects_table = 'csv_rejects_table', rejects_limit = -1);

SELECT * FROM READ_CSV_AUTO('data/csv/error/mismatch/bad.csv', ignore_errors = FALSE, rejects_table = 'csv_rejects_table');

SELECT * FROM READ_CSV_AUTO('data/csv/error/mismatch/bad.csv', ignore_errors = TRUE, rejects_table = '');

SELECT * FROM READ_CSV_AUTO('data/csv/error/mismatch/bad.csv', ignore_errors = TRUE, rejects_table = 'csv_rejects_table', union_by_name = TRUE);

SELECT * FROM READ_CSV_AUTO('data/csv/error/mismatch/bad.csv', ignore_errors = TRUE, rejects_limit = 10);

SELECT * FROM READ_CSV_AUTO('data/csv/error/mismatch/bad.csv', ignore_errors = TRUE, rejects_table = 'csv_rejects_table', rejects_limit = -1);

SELECT TYPEOF(FIRST(column0)), TYPEOF(FIRST(column1)), COUNT(*) FROM READ_CSV_AUTO('data/csv/error/mismatch/big_bad*.csv', sample_size = 3000, rejects_table = 'csv_rejects_table', ignore_errors = TRUE, header = 0);

SELECT * FROM READ_CSV('data/csv/test/invalid_utf_big.csv', columns = {'col1': 'VARCHAR', 'col2': 'VARCHAR', 'col3': 'VARCHAR'}, auto_detect = FALSE, header = 0, delim = ',', store_rejects = TRUE);

SELECT * EXCLUDE (scan_id) FROM reject_errors ORDER BY ALL;

SELECT * FROM READ_CSV('data/csv/rejects/frankstein/nightmare.csv', columns = {'a': 'INTEGER', 'b': 'INTEGER', 'c': 'VARCHAR'}, store_rejects = TRUE, auto_detect = FALSE, header = 1, max_line_size = 20, strict_mode = TRUE);

SELECT * EXCLUDE (scan_id) FROM reject_errors ORDER BY ALL;

SELECT * FROM READ_CSV('data/csv/rejects/multiple_errors/cast_and_more_col.csv', columns = {'name': 'VARCHAR', 'age': 'INTEGER', 'current_day': 'DATE', 'barks': 'INTEGER'}, store_rejects = TRUE, auto_detect = FALSE, header = 1, strict_mode = TRUE);

SELECT * EXCLUDE (scan_id) FROM reject_errors ORDER BY ALL;

DROP TABLE reject_errors;

DROP TABLE reject_scans;

SELECT * FROM READ_CSV('data/csv/rejects/multiple_errors/multiple_cast_implicit.csv', columns = {'name': 'VARCHAR', 'age': 'INTEGER', 'current_day': 'DATE', 'barks': 'INTEGER'}, store_rejects = TRUE, auto_detect = FALSE, header = 1, strict_mode = TRUE);

SELECT * EXCLUDE (scan_id) FROM reject_errors ORDER BY ALL;

DROP TABLE reject_errors;

DROP TABLE reject_scans;

SELECT * FROM READ_CSV('data/csv/rejects/multiple_errors/multiple_casts_flush.csv', columns = {'name': 'VARCHAR', 'age': 'INTEGER', 'current_day': 'DATE', 'tomorrow': 'DATE'}, store_rejects = TRUE, auto_detect = FALSE, header = 1);

SELECT * EXCLUDE (scan_id) FROM reject_errors ORDER BY ALL;

DROP TABLE reject_errors;

DROP TABLE reject_scans;

SELECT * FROM READ_CSV('data/csv/rejects/multiple_errors/multiple_casts_mixed.csv', columns = {'name': 'VARCHAR', 'age': 'INTEGER', 'current_day': 'DATE', 'barks': 'INTEGER'}, store_rejects = TRUE, auto_detect = FALSE, header = 1);

SELECT * EXCLUDE (scan_id) FROM reject_errors ORDER BY ALL;

DROP TABLE reject_errors;

DROP TABLE reject_scans;

SELECT * FROM READ_CSV('data/csv/rejects/multiple_errors/cast_and_less_col.csv', columns = {'name': 'VARCHAR', 'age': 'INTEGER', 'current_day': 'DATE', 'barks': 'INTEGER'}, store_rejects = TRUE, auto_detect = FALSE, header = 1);

SELECT * EXCLUDE (scan_id) FROM reject_errors ORDER BY ALL;

DROP TABLE reject_errors;

DROP TABLE reject_scans;

SELECT * FROM READ_CSV('data/csv/rejects/multiple_errors/cast_and_maxline.csv', columns = {'name': 'VARCHAR', 'age': 'INTEGER', 'current_day': 'DATE', 'barks': 'INTEGER'}, store_rejects = TRUE, auto_detect = FALSE, header = 1, max_line_size = 40);

SELECT * EXCLUDE (scan_id) FROM reject_errors ORDER BY ALL;

DROP TABLE reject_errors;

DROP TABLE reject_scans;

SELECT * FROM READ_CSV('data/csv/rejects/multiple_errors/less_col_and_max_line.csv', columns = {'name': 'VARCHAR', 'age': 'INTEGER', 'current_day': 'DATE', 'barks': 'INTEGER'}, store_rejects = TRUE, auto_detect = FALSE, header = 1, max_line_size = 40);

SELECT * EXCLUDE (scan_id) FROM reject_errors ORDER BY byte_position;

DROP TABLE reject_errors;

DROP TABLE reject_scans;

SELECT * FROM READ_CSV('data/csv/rejects/multiple_errors/more_col_and_max_line.csv', columns = {'name': 'VARCHAR', 'age': 'INTEGER', 'current_day': 'DATE', 'barks': 'INTEGER'}, store_rejects = TRUE, auto_detect = FALSE, header = 1, max_line_size = 40, strict_mode = TRUE);

SELECT * EXCLUDE (scan_id) FROM reject_errors ORDER BY byte_position;

DROP TABLE reject_errors;

DROP TABLE reject_scans;

SELECT * FROM READ_CSV('data/csv/rejects/multiple_errors/unquoted_cast.csv', columns = {'name': 'VARCHAR', 'age': 'INTEGER', 'current_day': 'DATE', 'barks': 'INTEGER'}, store_rejects = TRUE, auto_detect = FALSE, header = 1, max_line_size = 40, strict_mode = TRUE);

SELECT * EXCLUDE (scan_id) FROM reject_errors ORDER BY byte_position;

DROP TABLE reject_errors;

DROP TABLE reject_scans;

SELECT * FROM READ_CSV('data/csv/rejects/multiple_errors/unquoted_less.csv', columns = {'name': 'VARCHAR', 'age': 'INTEGER', 'current_day': 'DATE', 'barks': 'INTEGER'}, store_rejects = TRUE, auto_detect = FALSE, header = 1, max_line_size = 40, strict_mode = TRUE);

SELECT * EXCLUDE (scan_id) FROM reject_errors ORDER BY byte_position;

DROP TABLE reject_errors;

DROP TABLE reject_scans;

SELECT * FROM READ_CSV('data/csv/rejects/multiple_errors/unquoted_maxline.csv', columns = {'name': 'VARCHAR', 'age': 'INTEGER', 'current_day': 'DATE', 'barks': 'INTEGER'}, store_rejects = TRUE, auto_detect = FALSE, header = 1, max_line_size = 40, strict_mode = TRUE);

SELECT * EXCLUDE (scan_id) FROM reject_errors ORDER BY byte_position;

DROP TABLE reject_errors;

DROP TABLE reject_scans;

SELECT * FROM READ_CSV('data/csv/rejects/multiple_errors/unquoted_more.csv', columns = {'name': 'VARCHAR', 'age': 'INTEGER', 'current_day': 'DATE', 'barks': 'INTEGER'}, store_rejects = TRUE, auto_detect = FALSE, header = 1, max_line_size = 40, strict_mode = TRUE);

SELECT * EXCLUDE (scan_id) FROM reject_errors ORDER BY byte_position;

DROP TABLE reject_errors;

DROP TABLE reject_scans;

SELECT * FROM READ_CSV('data/csv/rejects/multiple_errors/invalid_utf_cast.csv', columns = {'name': 'VARCHAR', 'age': 'INTEGER', 'current_day': 'DATE', 'barks': 'INTEGER'}, store_rejects = TRUE, auto_detect = FALSE, header = 1, max_line_size = 40);

SELECT * EXCLUDE (scan_id) FROM reject_errors ORDER BY byte_position;

DROP TABLE reject_errors;

DROP TABLE reject_scans;

SELECT * FROM READ_CSV('data/csv/rejects/multiple_errors/invalid_utf_less.csv', columns = {'name': 'VARCHAR', 'age': 'INTEGER', 'current_day': 'DATE', 'barks': 'INTEGER'}, store_rejects = TRUE, auto_detect = FALSE, header = 1, max_line_size = 40);

SELECT * EXCLUDE (scan_id) FROM reject_errors ORDER BY byte_position;

DROP TABLE reject_errors;

DROP TABLE reject_scans;

SELECT * FROM READ_CSV('data/csv/rejects/multiple_errors/invalid_utf_max_line.csv', columns = {'name': 'VARCHAR', 'age': 'INTEGER', 'current_day': 'DATE', 'barks': 'INTEGER'}, store_rejects = TRUE, auto_detect = FALSE, header = 1, max_line_size = 40, strict_mode = TRUE);

SELECT * EXCLUDE (scan_id) FROM reject_errors ORDER BY byte_position, error_message;

DROP TABLE reject_errors;

DROP TABLE reject_scans;

SELECT * FROM READ_CSV('data/csv/rejects/multiple_errors/invalid_utf_more.csv', columns = {'name': 'VARCHAR', 'age': 'INTEGER', 'current_day': 'DATE', 'barks': 'INTEGER'}, store_rejects = TRUE, auto_detect = FALSE, header = 1, max_line_size = 40, strict_mode = TRUE);

SELECT * EXCLUDE (scan_id) FROM reject_errors ORDER BY byte_position;

DROP TABLE reject_errors;

DROP TABLE reject_scans;

SELECT * FROM READ_CSV('data/csv/rejects/multiple_errors/invalid_utf_unquoted.csv', columns = {'name': 'VARCHAR', 'last_name': 'VARCHAR', 'age': 'INTEGER', 'current_day': 'DATE', 'barks': 'INTEGER'}, store_rejects = TRUE, auto_detect = FALSE, header = 1, max_line_size = 40, strict_mode = TRUE);

SELECT * EXCLUDE (scan_id) FROM reject_errors ORDER BY byte_position;

DROP TABLE reject_errors;

DROP TABLE reject_scans;

SELECT * FROM READ_CSV('data/csv/rejects/multiple_errors/multiple_errors.csv', columns = {'name': 'VARCHAR', 'age': 'INTEGER', 'current_day': 'DATE', 'barks': 'INTEGER'}, store_rejects = TRUE, auto_detect = FALSE, header = 1, max_line_size = 40, strict_mode = TRUE);

SELECT * EXCLUDE (scan_id) FROM reject_errors ORDER BY ALL;

PRAGMA enable_verification;

CREATE TABLE pseudorandom_fields AS SELECT i, LIST_SELECT([e'\\', e'\t', e'\n', e'\\\\', e'\\\t', e'\\\n', e'\t\\', e'\t\t', e'\t\n', e'\n\\', e'\n\t', e'\n\n', '', 'a', 'b', 'c'], LIST_TRANSFORM([HASH(i), HASH(i * 7 + 251), HASH(i * i + 4093)], x -> CAST((x % 16 + 1) AS INT))) AS s FROM RANGE(0, 32 << 10) AS t(i);

COPY (SELECT CONCAT_WS(e'\t', s1, i, s2, s3) FROM (SELECT i, REPLACE(REPLACE(REPLACE(COLUMNS(* EXCLUDE (i)), '\', '\\'), e'\t', e'\\\t'), e'\n', e'\\\n') FROM (SELECT i, s[1] AS s1, s[2] AS s2, s[3] AS s3 FROM pseudorandom_fields))) TO '__TEST_DIR__/pseudorandom_fields.tsv' WITH (HEADER FALSE, QUOTE '', ESCAPE '');

SELECT CAST(LOG(2, COUNT(*)) AS INT), CAST(BOOL_AND(s[1] = f1 AND s[2] = f2 AND s[3] = f3) AS INT) FROM pseudorandom_fields JOIN READ_CSV('__TEST_DIR__/pseudorandom_fields.tsv', quote = '', sep = '\t', escape = '\', header = FALSE, strict_mode = FALSE) AS t(f1, j, f2, f3) ON i = j;

PRAGMA enable_verification;

SELECT * FROM READ_CSV('data/csv/unquoted_escape/plain.csv', escape = '\', sep = ',', strict_mode = FALSE, nullstr = '\N');

CREATE TABLE special_char (a INT, b TEXT);

CREATE TABLE special_char (a INT, b TEXT);

SELECT CAST(BOOL_AND(b = REPLACE(s, e'\r\n', e'\n')) AS INT) FROM special_char JOIN READ_CSV('data/csv/unquoted_escape/basic.tsv', quote = '', escape = '\', sep = '\t', strict_mode = FALSE) AS t(i, s, j) ON i = a;

PRAGMA enable_verification;

CREATE TABLE human_eval_jsonl AS SELECT REPLACE(COLUMNS(*), '    ', e'\t') FROM READ_NDJSON_AUTO('https://raw.githubusercontent.com/openai/human-eval/refs/heads/master/data/HumanEval.jsonl.gz');

DELETE FROM human_eval_jsonl WHERE CAST(SPLIT_PART(task_id, '/', 2) AS INT) >= 10;

CREATE TABLE human_eval_csv (task_id TEXT, prompt TEXT, entry_point TEXT, canonical_solution TEXT, test TEXT);

CREATE TABLE human_eval_csv (task_id TEXT, prompt TEXT, entry_point TEXT, canonical_solution TEXT, test TEXT);

TRUNCATE TABLE human_eval_csv;

TRUNCATE TABLE human_eval_tsv;

INSERT INTO human_eval_csv SELECT REPLACE(COLUMNS(*), e'\r\n', e'\n') FROM READ_CSV('data/csv/unquoted_escape/human_eval.csv', quote = '', escape = '\', sep = ',', header = FALSE, strict_mode = FALSE);

INSERT INTO human_eval_tsv SELECT REPLACE(COLUMNS(*), e'\r\n', e'\n') FROM READ_CSV('data/csv/unquoted_escape/human_eval.tsv', quote = '', escape = '\', sep = '\t', header = FALSE, strict_mode = FALSE);

SELECT COUNT(*), CAST(BOOL_AND(j.task_id = c.task_id AND j.task_id = t.task_id AND j.prompt = c.prompt AND j.prompt = t.prompt AND j.entry_point = c.entry_point AND j.entry_point = t.entry_point AND j.canonical_solution = c.canonical_solution AND j.canonical_solution = t.canonical_solution AND j.test = c.test AND j.test = t.test) AS INT) FROM human_eval_jsonl AS j, human_eval_csv AS c, human_eval_tsv AS t WHERE j.task_id = c.task_id AND j.task_id = t.task_id;

PRAGMA enable_verification;

SELECT CONCAT('#', COLUMNS(*), '#') FROM READ_CSV('data/csv/unquoted_escape/identical.csv', quote = '"', escape = '"', sep = ',', strict_mode = FALSE);

PRAGMA enable_verification;

SELECT HAMMING(REPLACE(GROUP_CONCAT(w, '|' ORDER BY y), e'\r\n', e'\n'), e'\\|,|"|\n'), HAMMING(GROUP_CONCAT(z, '|' ORDER BY y), '"|"a"|"b|c"'), CAST(BOOL_AND(x = CONCAT(w, '"', w)) AS INT) FROM READ_CSV('data/csv/unquoted_escape/mixed.csv', quote = '"', escape = '\', sep = ',', strict_mode = FALSE);

PRAGMA enable_verification;

ATTACH '__TEST_DIR__/unencrypted.duckdb' AS unencrypted;

ATTACH '__TEST_DIR__/v_0_10_2.duckdb' AS v_0_10_2 (STORAGE_VERSION 'v0.10.2');

CREATE OR REPLACE TABLE unencrypted.tbl AS SELECT * FROM RANGE(0, 10) AS t(i);

CREATE OR REPLACE TABLE v_0_10_2.tbl AS SELECT * FROM RANGE(0, 10) AS t(i);

SELECT SUM(i) FROM unencrypted.tbl;

SELECT SUM(i) FROM v_0_10_2.tbl;

DETACH unencrypted;

DETACH v_0_10_2;

ATTACH '__TEST_DIR__/encrypted.duckdb' AS encrypted (ENCRYPTION_KEY 'asdf');

ATTACH '__TEST_DIR__/encrypted_v2.duckdb' AS encrypted_v2 (ENCRYPTION_KEY 'asdf');

ATTACH '__TEST_DIR__/v_0_10_2.duckdb' AS v_0_10_2;

ATTACH '__TEST_DIR__/unencrypted.duckdb' AS unencrypted;

COPY SELECT * FROM DATABASE AS unencrypted TO encrypted;

COPY SELECT * FROM DATABASE AS v_0_10_2 TO encrypted_v2;

DETACH unencrypted;

DETACH v_0_10_2;

DETACH encrypted;

DETACH encrypted_v2;

ATTACH '__TEST_DIR__/encrypted.duckdb' AS encrypted (ENCRYPTION_KEY 'asdf');

ATTACH '__TEST_DIR__/encrypted_v2.duckdb' AS encrypted_v2 (ENCRYPTION_KEY 'asdf');

SELECT SUM(i) FROM encrypted.tbl;

SELECT SUM(i) FROM encrypted_v2.tbl;

ATTACH '__TEST_DIR__/unencrypted_new.duckdb' AS unencrypted_new;

ATTACH '__TEST_DIR__/unencrypted_v_1_2_0.duckdb' AS unencrypted_v_1_2_0 (STORAGE_VERSION 'v1.2.0');

COPY SELECT * FROM DATABASE AS encrypted TO unencrypted_new;

COPY SELECT * FROM DATABASE AS encrypted_v2 TO unencrypted_v_1_2_0;

DETACH unencrypted_new;

DETACH encrypted;

DETACH encrypted_v2;

DETACH unencrypted_v_1_2_0;

ATTACH '__TEST_DIR__/unencrypted_v_1_2_0.duckdb' AS unencrypted_v_1_2_0 (ENCRYPTION_KEY 'asdf');

ATTACH '__TEST_DIR__/unencrypted_v_1_2_0.duckdb' AS unencrypted_v_1_2_0 (STORAGE_VERSION 'v1.0.0');

ATTACH '__TEST_DIR__/unencrypted_v_1_2_0.duckdb' AS unencrypted_v_1_2_0;

SELECT tags['storage_version'] FROM DUCKDB_DATABASES() WHERE database_name = 'unencrypted_v_1_2_0';

ATTACH '__TEST_DIR__/unencrypted_new.duckdb' AS unencrypted_new;

SELECT SUM(i) FROM unencrypted_v_1_2_0.tbl;

SELECT SUM(i) FROM unencrypted_new.tbl;

PRAGMA enable_verification;

SELECT * FROM "data/parquet-testing/aws2.parquet";

PRAGMA enable_verification;

SELECT * FROM "data/parquet-testing/aws_kinesis.parquet";

SELECT * FROM "data/parquet-testing/aws_kinesis.parquet" WHERE event_timestamp = CAST('2022-11-22 00:01:13.175' AS TIMESTAMP);

PRAGMA enable_verification;

SELECT * FROM "data/parquet-testing/bigdecimal.parquet";

COPY (SELECT CAST((r1.range * 10) AS BIGINT) AS r, CAST(r AS SMALLINT) AS r_int16, CAST(r AS INT) AS r_int32, CAST(r AS DOUBLE) AS r_double, CAST(r AS REAL) AS r_float, 'string_' || CAST(r AS TEXT) AS r_string, CAST(('blob_' || CAST(r AS TEXT)) AS BLOB) AS r_blob FROM RANGE(0, 100) AS r1, RANGE(0, 1000) ORDER BY r) TO '__TEST_DIR__/bloom1.parquet' WITH (format parquet, ROW_GROUP_SIZE 10000, dictionary_size_limit 1000);

SELECT column_id, BOOL_AND(bloom_filter_offset > 4), BOOL_AND(bloom_filter_length > 1) FROM PARQUET_METADATA('__TEST_DIR__/bloom1.parquet') GROUP BY column_id ORDER BY column_id;

SELECT BOOL_AND(bloom_filter_excludes) FROM PARQUET_BLOOM_PROBE('__TEST_DIR__/bloom1.parquet', 'r', '201');

SELECT BOOL_AND(bloom_filter_excludes) FROM PARQUET_BLOOM_PROBE('__TEST_DIR__/bloom1.parquet', 'r', '112121212');

CREATE MACRO assert_bloom_filter_hit(file, col, val) AS TABLE
SELECT COUNT(*) > 0 AND COUNT(*) < MAX(row_group_id+1) FROM parquet_bloom_probe(file, col, val) WHERE NOT bloom_filter_excludes;

SELECT * FROM ASSERT_BLOOM_FILTER_HIT('__TEST_DIR__/bloom1.parquet', 'r', '200');

SELECT * FROM ASSERT_BLOOM_FILTER_HIT('__TEST_DIR__/bloom1.parquet', 'r', 200);

SELECT * FROM ASSERT_BLOOM_FILTER_HIT('__TEST_DIR__/bloom10000.parquet', 'r', '200');

SELECT * FROM ASSERT_BLOOM_FILTER_HIT('__TEST_DIR__/bloom1.parquet', 'r2', '200');

SELECT * FROM ASSERT_BLOOM_FILTER_HIT('__TEST_DIR__/bloom1.parquet', NULL, '200');

SELECT * FROM ASSERT_BLOOM_FILTER_HIT('__TEST_DIR__/bloom1.parquet', 'r', NULL);

SELECT * FROM ASSERT_BLOOM_FILTER_HIT('__TEST_DIR__/bloom1.parquet', 'r', 'a');

SELECT * FROM ASSERT_BLOOM_FILTER_HIT('__TEST_DIR__/bloom1.parquet', 'r_int16', 200);

SELECT * FROM ASSERT_BLOOM_FILTER_HIT('__TEST_DIR__/bloom1.parquet', 'r_int32', 200);

SELECT * FROM ASSERT_BLOOM_FILTER_HIT('__TEST_DIR__/bloom1.parquet', 'r_float', 200);

SELECT * FROM ASSERT_BLOOM_FILTER_HIT('__TEST_DIR__/bloom1.parquet', 'r_double', 200);

SELECT * FROM ASSERT_BLOOM_FILTER_HIT('__TEST_DIR__/bloom1.parquet', 'r_string', 'string_200');

SELECT * FROM ASSERT_BLOOM_FILTER_HIT('__TEST_DIR__/bloom1.parquet', 'r_blob', CAST('blob_200' AS BLOB));

COPY (SELECT CAST((r1.range * 10) AS BIGINT) AS r FROM RANGE(0, 100) AS r1, RANGE(0, 100) ORDER BY r) TO '__TEST_DIR__/bloom2.parquet' WITH (format parquet, ROW_GROUP_SIZE 10000, dictionary_size_limit 10);

SELECT row_group_id, NOT bloom_filter_offset IS NULL, NOT bloom_filter_length IS NULL FROM PARQUET_METADATA('__TEST_DIR__/bloom2.parquet') ORDER BY row_group_id;

COPY (SELECT CAST((r1.range * 10) AS BIGINT) AS r FROM RANGE(0, 100) AS r1, RANGE(0, 100) ORDER BY r) TO '__TEST_DIR__/bloom3.parquet' WITH (format parquet, ROW_GROUP_SIZE 10000, dictionary_size_limit 99);

SELECT row_group_id, NOT bloom_filter_offset IS NULL, NOT bloom_filter_length IS NULL FROM PARQUET_METADATA('__TEST_DIR__/bloom3.parquet') ORDER BY row_group_id;

COPY (SELECT CAST((r1.range * 10) AS BIGINT) AS r FROM RANGE(0, 100) AS r1, RANGE(0, 100) ORDER BY r) TO '__TEST_DIR__/bloom4.parquet' WITH (format parquet, ROW_GROUP_SIZE 10000, dictionary_size_limit 100);

SELECT row_group_id, NOT bloom_filter_offset IS NULL, NOT bloom_filter_length IS NULL FROM PARQUET_METADATA('__TEST_DIR__/bloom4.parquet') ORDER BY row_group_id;

COPY (SELECT CAST((r1.range * 10) AS BIGINT) AS r FROM RANGE(0, 100) AS r1, RANGE(0, 100) ORDER BY r) TO '__TEST_DIR__/bloom5.parquet' WITH (format parquet, ROW_GROUP_SIZE 10000, dictionary_size_limit 1000);

SELECT row_group_id, NOT bloom_filter_offset IS NULL, NOT bloom_filter_length IS NULL FROM PARQUET_METADATA('__TEST_DIR__/bloom5.parquet') ORDER BY row_group_id;

COPY (SELECT CAST((r1.range * 10) AS BIGINT) AS r FROM RANGE(0, 100) AS r1, RANGE(0, 100) ORDER BY r) TO '__TEST_DIR__/bloom6.parquet' WITH (format parquet, ROW_GROUP_SIZE 10000, dictionary_size_limit 1000, bloom_filter_false_positive_ratio 0.01);

SELECT row_group_id, bloom_filter_length FROM PARQUET_METADATA('__TEST_DIR__/bloom6.parquet') ORDER BY row_group_id;

COPY (SELECT CAST((r1.range * 10) AS BIGINT) AS r FROM RANGE(0, 100) AS r1, RANGE(0, 100) ORDER BY r) TO '__TEST_DIR__/bloom7.parquet' WITH (format parquet, ROW_GROUP_SIZE 10000, dictionary_size_limit 1000, bloom_filter_false_positive_ratio 0.5);

SELECT row_group_id, bloom_filter_length FROM PARQUET_METADATA('__TEST_DIR__/bloom7.parquet') ORDER BY row_group_id;

COPY (SELECT CAST((r1.range * 10) AS BIGINT) AS r FROM RANGE(0, 100) AS r1, RANGE(0, 100) ORDER BY r) TO '__TEST_DIR__/bloom8.parquet' WITH (format parquet, ROW_GROUP_SIZE 10000, dictionary_size_limit 1000, bloom_filter_false_positive_ratio 0.001);

SELECT row_group_id, bloom_filter_length FROM PARQUET_METADATA('__TEST_DIR__/bloom8.parquet') ORDER BY row_group_id;

COPY (SELECT CAST((r1.range * 10) AS BIGINT) AS r FROM RANGE(0, 100) AS r1, RANGE(0, 100) ORDER BY r) TO '__TEST_DIR__/bloom8.parquet' WITH (format parquet, ROW_GROUP_SIZE 10000, dictionary_size_limit 1000, bloom_filter_false_positive_ratio 0.0001);

SELECT row_group_id, bloom_filter_length FROM PARQUET_METADATA('__TEST_DIR__/bloom8.parquet') ORDER BY row_group_id;

SELECT row_group_id, bloom_filter_length FROM PARQUET_METADATA('__TEST_DIR__/bloom8.parquet') ORDER BY row_group_id;

COPY (SELECT CAST((r1.range * 10) AS BIGINT) AS r FROM RANGE(0, 100) AS r1, RANGE(0, 100) ORDER BY r) TO '__TEST_DIR__/bloom8.parquet' WITH (format parquet, ROW_GROUP_SIZE 10000, dictionary_size_limit 1000, bloom_filter_false_positive_ratio 0);

COPY (SELECT CAST((r1.range * 10) AS TEXT) AS r FROM RANGE(0, 100) AS r1, RANGE(0, 100) ORDER BY r) TO '__TEST_DIR__/bloom9.parquet' WITH (format parquet, ROW_GROUP_SIZE 10000, string_dictionary_page_size_limit 10);

SELECT row_group_id, NOT bloom_filter_offset IS NULL, NOT bloom_filter_length IS NULL FROM PARQUET_METADATA('__TEST_DIR__/bloom9.parquet') ORDER BY row_group_id;

COPY (SELECT CAST((r1.range * 10) AS TEXT) AS r FROM RANGE(0, 100) AS r1, RANGE(0, 100) ORDER BY r) TO '__TEST_DIR__/bloom9.parquet' WITH (format parquet, ROW_GROUP_SIZE 10000, string_dictionary_page_size_limit 100000);

SELECT row_group_id, NOT bloom_filter_offset IS NULL, NOT bloom_filter_length IS NULL FROM PARQUET_METADATA('__TEST_DIR__/bloom9.parquet') ORDER BY row_group_id;

COPY (SELECT CAST((r1.range * 10) AS TEXT) AS r FROM RANGE(0, 100) AS r1, RANGE(0, 100) ORDER BY r) TO '__TEST_DIR__/bloom9.parquet' WITH (format parquet, ROW_GROUP_SIZE 10000, string_dictionary_page_size_limit 4294967295);

COPY (SELECT CAST((r1.range * 10) AS TEXT) AS r FROM RANGE(0, 100) AS r1, RANGE(0, 100) ORDER BY r) TO '__TEST_DIR__/bloom9.parquet' WITH (format parquet, ROW_GROUP_SIZE 10000, string_dictionary_page_size_limit 0);

COPY (SELECT CAST((r1.range * 10) AS TEXT) AS r FROM RANGE(0, 100) AS r1, RANGE(0, 100) ORDER BY r) TO '__TEST_DIR__/bloom9.parquet' WITH (format parquet, ROW_GROUP_SIZE 10000, string_dictionary_page_size_limit 0);

SELECT encodings FROM PARQUET_METADATA('__TEST_DIR__/my.parquet');

SELECT encodings FROM PARQUET_METADATA('__TEST_DIR__/my.parquet');

SELECT encodings = 'RLE_DICTIONARY' FROM PARQUET_METADATA('__TEST_DIR__/my.parquet');

PRAGMA enable_verification;

SELECT COUNT(*) FROM PARQUET_SCAN('test/sql/copy/parquet/broken/missingmagicatfront.parquet');

SELECT COUNT(*) FROM PARQUET_SCAN('test/sql/copy/parquet/broken/missingmagicatend.parquet');

SELECT COUNT(*) FROM PARQUET_SCAN('test/sql/copy/parquet/broken/firstmarker.parquet');

SELECT COUNT(*) FROM PARQUET_SCAN('test/sql/copy/parquet/broken/twomarkers.parquet');

SELECT COUNT(*) FROM PARQUET_SCAN('test/sql/copy/parquet/broken/footerlengthzero.parquet');

SELECT COUNT(*) FROM PARQUET_SCAN('test/sql/copy/parquet/broken/hugefooter.parquet');

SELECT COUNT(*) FROM PARQUET_SCAN('test/sql/copy/parquet/broken/garbledfooter.parquet');

SELECT * FROM PARQUET_SCAN('test/sql/copy/parquet/broken/broken_structure.parquet');

PRAGMA enable_verification;

SELECT * FROM "data/parquet-testing/byte_stream_split.parquet";

SELECT data FROM "data/parquet-testing/CASE_INSENSITIVE.PARQUET";

SET preserve_insertion_order = FALSE;

CREATE TABLE integers AS SELECT * FROM RANGE(0, 10000000) AS tbl(i);

COPY integers TO '__TEST_DIR__/force_order_preserve.parquet' WITH (PRESERVE_ORDER);

CREATE VIEW integers2 AS SELECT * FROM "__TEST_DIR__/force_order_preserve.parquet";

SELECT SUM(i) FROM integers;

SELECT SUM(i) FROM integers2;

SET preserve_insertion_order = TRUE;

SELECT * FROM "__TEST_DIR__/force_order_preserve.parquet" LIMIT 5;

SELECT * FROM "__TEST_DIR__/force_order_preserve.parquet" LIMIT 5 OFFSET 777778;

COPY integers TO '__TEST_DIR__/force_order_preserve_2.parquet' WITH (PRESERVE_ORDER, PARTITION_BY (i), WRITE_PARTITION_COLUMNS);

SELECT a FROM "data/parquet-testing/corrupt_stats.parquet" GROUP BY a;

PRAGMA disable_optimizer;

SELECT a FROM "data/parquet-testing/corrupt_stats.parquet" GROUP BY a;

PRAGMA enable_verification;

SELECT * FROM "data/parquet-testing/decimals.parquet";

SELECT * FROM "data/parquet-testing/decimals.parquet";

SELECT * FROM "data/parquet-testing/decimals.parquet";

PRAGMA enable_verification;

SELECT * FROM "data/parquet-testing/delta_byte_array.parquet";

SELECT * FROM "data/parquet-testing/delta_length_byte_array.parquet";

CREATE TABLE delta_byte_array AS SELECT * FROM PARQUET_SCAN('https://github.com/duckdb/duckdb-data/releases/download/v1.0/delta_byte_array_multiple_pages.parquet');

SELECT COUNT(*) FROM delta_byte_array;

SELECT MIN(STRLEN(json_column)), MAX(STRLEN(json_column)) FROM delta_byte_array;

DESCRIBE "data/parquet-testing/delta_byte_array.parquet";

DESCRIBE "data/parquet-testing/delta_byte_array.parquet";

CREATE TABLE test AS SELECT 'thisisaverylongstringbutitrepeatsmanytimessoitshighlycompressible' || (range % 10) AS i FROM RANGE(0, 100000);

CREATE TABLE test AS SELECT 'thisisaverylongstringbutitrepeatsmanytimessoitshighlycompressible' || (range % 10) AS i FROM RANGE(0, 100000);

COPY test TO '__TEST_DIR__/dictionary_compression_ratio_threshold.parquet';

SELECT dictionary_page_offset IS NULL FROM PARQUET_METADATA('__TEST_DIR__/dictionary_compression_ratio_threshold.parquet');

SELECT dictionary_page_offset IS NULL FROM PARQUET_METADATA('__TEST_DIR__/dictionary_compression_ratio_threshold.parquet');

SELECT dictionary_page_offset IS NULL FROM PARQUET_METADATA('__TEST_DIR__/dictionary_compression_ratio_threshold.parquet');

COPY test TO '__TEST_DIR__/dictionary_compression_ratio_threshold.parquet' WITH (dictionary_compression_ratio_threshold 10);

SELECT dictionary_page_offset IS NULL FROM PARQUET_METADATA('__TEST_DIR__/dictionary_compression_ratio_threshold.parquet');

COPY test TO '__TEST_DIR__/dictionary_compression_ratio_threshold.parquet' WITH (dictionary_compression_ratio_threshold 20);

SELECT dictionary_page_offset IS NULL FROM PARQUET_METADATA('__TEST_DIR__/dictionary_compression_ratio_threshold.parquet');

CREATE OR REPLACE TABLE test AS SELECT 'coolstring' || range AS i FROM RANGE(0, 100000);

COPY test TO '__TEST_DIR__/dictionary_compression_ratio_threshold.parquet';

SELECT dictionary_page_offset IS NULL FROM PARQUET_METADATA('__TEST_DIR__/dictionary_compression_ratio_threshold.parquet');

COPY test TO '__TEST_DIR__/dictionary_compression_ratio_threshold.parquet' WITH (dictionary_compression_ratio_threshold 0);

SELECT dictionary_page_offset IS NULL FROM PARQUET_METADATA('__TEST_DIR__/dictionary_compression_ratio_threshold.parquet');

PRAGMA enable_verification;

SELECT * FROM "data/parquet-testing/enum.parquet";

SELECT * FROM PARQUET_FILE_METADATA('data/parquet-testing/arrow/alltypes_dictionary.parquet');

SELECT data FROM PARQUET_SCAN('data/parquet-testing/fixed.parquet');

PRAGMA enable_verification;

SELECT type, type_length, logical_type FROM PARQUET_SCHEMA('data/parquet-testing/float16.parquet') WHERE name = 'x';

SELECT TYPEOF(x) FROM READ_PARQUET('data/parquet-testing/float16.parquet') LIMIT 1;

SELECT x FROM READ_PARQUET('data/parquet-testing/float16.parquet') ORDER BY x;

SELECT x FROM READ_PARQUET('data/parquet-testing/float16.parquet') WHERE x > 1.1 ORDER BY x;

PRAGMA enable_verification;

COPY (SELECT i // 50 AS id, {'a': i, 'b': 21} AS s FROM RANGE(0, 100) AS t(i)) TO '__TEST_DIR__/hive_partitioned_struct_col' WITH (FORMAT PARQUET, PARTITION_BY (id));

SELECT * FROM READ_PARQUET('__TEST_DIR__/hive_partitioned_struct_col/**/*.parquet', hive_partitioning = 1) WHERE s.a = 42;

SELECT s.a FROM READ_PARQUET('__TEST_DIR__/hive_partitioned_struct_col/**/*.parquet', hive_partitioning = 1) WHERE s.a = 42;

COPY (SELECT i AS id, {'a': i // 2} AS s FROM RANGE(0, 100) AS t(i)) TO '__TEST_DIR__/hive_partitioned_struct' WITH (FORMAT PARQUET, PARTITION_BY (s));

SELECT * FROM READ_PARQUET('__TEST_DIR__/hive_partitioned_struct/**/*.parquet', hive_partitioning = 1, hive_types = {'s': 'STRUCT(a INT)'}) WHERE s.a = 42 ORDER BY ALL;

PRAGMA enable_verification;

SELECT SETSEED(0.8675309);

CREATE TABLE raw_data (ts TIMESTAMP_S NOT NULL, hits INT NOT NULL);

INSERT INTO raw_data SELECT *, CAST((RANDOM() * 500) AS INT) FROM RANGE(CAST('2023-11-01' AS TIMESTAMP), CAST('2023-11-06' AS TIMESTAMP), INTERVAL '1' MINUTE);

CREATE TABLE timeseries AS (SELECT DATE_TRUNC('HOUR', ts) AS bucket, CAST(SUM(hits) AS BIGINT) AS total FROM raw_data GROUP BY bucket);

SELECT * FROM timeseries ORDER BY ALL LIMIT 5;

COPY (SELECT * FROM timeseries) TO '__TEST_DIR__/hive' WITH (FORMAT 'PARQUET', COMPRESSION 'SNAPPY', PARTITION_BY (bucket), OVERWRITE_OR_IGNORE);

SELECT bucket, total FROM READ_PARQUET('__TEST_DIR__/hive/*/*.parquet') ORDER BY ALL LIMIT 5;

SELECT * FROM "data/parquet-testing/broken/broken_bigint.parquet";

SELECT * FROM "data/parquet-testing/broken/broken_date.parquet";

SELECT * FROM "data/parquet-testing/broken/broken_int.parquet";

SELECT * FROM "data/parquet-testing/broken/broken_smallint.parquet";

SELECT * FROM "data/parquet-testing/broken/broken_timestamp.parquet";

SELECT * FROM "data/parquet-testing/broken/broken_timestamp_ms.parquet";

SELECT * FROM "data/parquet-testing/broken/broken_tinyint.parquet";

SELECT * FROM "data/parquet-testing/broken/broken_ubigint.parquet";

SELECT * FROM "data/parquet-testing/broken/broken_uinteger.parquet";

SELECT * FROM "data/parquet-testing/broken/broken_usmallint.parquet";

SELECT * FROM "data/parquet-testing/broken/broken_utinyint.parquet";

CREATE TABLE integers AS SELECT * FROM RANGE(0, 6) AS tbl(i);

COPY integers TO '__TEST_DIR__/integers.parquet';

SELECT SUM(i) FROM "__TEST_DIR__/integers.parquet";

COPY integers TO '__TEST_DIR__/integers.csv';

SELECT SUM(i) FROM "__TEST_DIR__/integers.csv" AS tbl(i);

CREATE TABLE json_tbl AS SELECT * FROM "data/parquet-testing/json_convertedtype.parquet";

SELECT TX_JSON[1] -> '$.block_hash' FROM json_tbl;

CREATE TABLE lineitem AS SELECT * FROM "data/parquet-testing/arrow/lineitem-arrow.parquet";

PRAGMA TPCH(1);

PRAGMA TPCH(6);

DROP TABLE lineitem;

CREATE VIEW lineitem AS SELECT * FROM "data/parquet-testing/arrow/lineitem-arrow.parquet";

PRAGMA TPCH(1);

PRAGMA TPCH(6);

COPY (SELECT 42 AS a) TO '__TEST_DIR__/conversion_error1.parquet';

COPY (SELECT CAST('hello world' AS BLOB) AS a) TO '__TEST_DIR__/conversion_error2.parquet';

SELECT * FROM READ_PARQUET(['__TEST_DIR__/conversion_error1.parquet', '__TEST_DIR__/conversion_error2.parquet']);

CREATE TABLE integers (i INT);

COPY integers FROM '__TEST_DIR__/conversion_error*.parquet';

PRAGMA enable_verification;

PRAGMA threads = 4;

SELECT COUNT(*) FROM PARQUET_SCAN('data/parquet-testing/glob/t?.parquet');

SELECT COUNT(*) FROM PARQUET_SCAN('data/parquet-testing/glob/*');

SELECT COUNT(*) FROM PARQUET_SCAN('data/parquet-testing/glob/*.parquet');

SELECT COUNT(*) FROM PARQUET_SCAN('data/parquet-testing/g*/*.parquet');

SELECT COUNT(*) FROM PARQUET_SCAN('data/parquet-testing/g*/t1.parquet');

SELECT id FROM "data/parquet-testing/p2.parquet" OFFSET 4968;

SELECT id FROM "data/parquet-testing/p2.parquet" LIMIT 10;

SELECT id FROM "data/parquet-testing/p2.parquet" LIMIT 100;

SELECT id_with_null FROM "data/parquet-testing/p2.parquet" LIMIT 100;

SELECT MIN(id), MAX(id), SUM(id), COUNT(id), MIN(id_with_null), MAX(id_with_null), SUM(id_with_null), COUNT(id_with_null) FROM "data/parquet-testing/p2.parquet";

SELECT MIN(id_int), MAX(id_int), SUM(id_int), COUNT(id_int) FROM "data/parquet-testing/p2.parquet";

SELECT * FROM "data/parquet-testing/7-set.snappy.arrow2.parquet";

SELECT id_string FROM "data/parquet-testing/p2strings.parquet" LIMIT 10;

SELECT CDCONO FROM "data/parquet-testing/bug10148-wide-decimal-stats.parquet";

SELECT * FROM "data/parquet-testing/issue10279_delta_encoding.parquet";

SELECT * FROM READ_PARQUET('data/parquet-testing/issue12621.parquet') LIMIT 1;

SELECT name FROM PARQUET_SCHEMA('data/parquet-testing/bug13053.parquet') OFFSET 1;

SELECT column_name FROM (DESCRIBE SELECT * FROM "data/parquet-testing/bug13053.parquet");

SELECT name FROM PARQUET_SCHEMA('data/parquet-testing/bug13053-2.parquet') OFFSET 1;

SELECT column_name FROM (DESCRIBE SELECT * FROM "data/parquet-testing/bug13053-2.parquet");

SELECT COUNT(backlink_count) FROM PARQUET_SCAN('data/parquet-testing/bug1554.parquet') WHERE http_status_code = 200;

SELECT http_status_code, COUNT(backlink_count) FROM PARQUET_SCAN('data/parquet-testing/bug1554.parquet') GROUP BY http_status_code ORDER BY http_status_code;

PRAGMA enable_verification;

CREATE TABLE some_bools (val BOOLEAN);

INSERT INTO some_bools VALUES (TRUE);

SELECT COUNT(*) FROM some_bools WHERE val = 1;

SELECT COUNT(*) FROM some_bools WHERE val = CAST('1' AS BOOLEAN);

SELECT has_image_link FROM PARQUET_SCAN('data/parquet-testing/bug1588.parquet') WHERE has_image_link = 1;

SELECT COUNT(*) FROM PARQUET_SCAN('data/parquet-testing/bug1588.parquet') WHERE has_image_link = 1;

SELECT COUNT(*) FROM PARQUET_SCAN('data/parquet-testing/bug1588.parquet') WHERE has_image_link = CAST('1' AS BOOLEAN);

SELECT COUNT(*) FROM PARQUET_SCAN('data/parquet-testing/bug1588.parquet') WHERE (has_image_link = 1 AND (has_image_alt_text = 0 OR is_image_alt_text_empty = 1));

PRAGMA enable_verification;

SELECT backlink_count FROM PARQUET_SCAN('data/parquet-testing/bug1589.parquet') LIMIT 1;

SELECT "inner"['str_field'] FROM PARQUET_SCAN('data/parquet-testing/bug1618_struct_strings.parquet');

SELECT "inner"['f64_field'] FROM PARQUET_SCAN('data/parquet-testing/bug1618_struct_strings.parquet');

SELECT "inner" FROM PARQUET_SCAN('data/parquet-testing/bug1618_struct_strings.parquet');

SELECT STRUCT_EXTRACT("inner", 'f64_field') FROM PARQUET_SCAN('data/parquet-testing/struct.parquet');

SELECT ("inner")."f64_field" FROM PARQUET_SCAN('data/parquet-testing/struct.parquet');

SELECT "inner"['f64_field'] FROM PARQUET_SCAN('data/parquet-testing/struct.parquet');

SELECT * FROM "data/parquet-testing/leftdate3_192_loop_1.parquet";

CREATE TABLE test AS SELECT * FROM "data/parquet-testing/leftdate3_192_loop_1.parquet";

CREATE TABLE view_one AS SELECT * FROM "https://github.com/duckdb/duckdb-data/releases/download/v1.0/issue2102_one.parquet";

CREATE TABLE view_two AS SELECT * FROM "https://github.com/duckdb/duckdb-data/releases/download/v1.0/issue2102_two.parquet";

SELECT COUNT(*) FROM view_one WHERE date IS NULL;

CREATE TABLE tbl1 AS SELECT one.id AS id, one.date AS date FROM view_one AS one JOIN view_two AS two ON two.id = one.id AND two.line = 1;

SELECT COUNT(*) FROM tbl1;

SELECT COUNT(*) FROM tbl1 WHERE date IS NULL;

CREATE TABLE tbl2 AS SELECT one.id AS id, one.date AS date FROM view_one AS one LEFT JOIN view_two AS two ON two.id = one.id AND two.line = 1;

SELECT COUNT(*) FROM tbl2;

SELECT COUNT(*) FROM tbl2 WHERE date IS NULL;

CREATE TABLE tbl3 AS SELECT one.id AS id, one.date AS date FROM view_one AS one LEFT JOIN view_two AS two ON two.id = one.id;

SELECT COUNT(*) FROM tbl3;

SELECT COUNT(*) FROM tbl3 WHERE date IS NULL;

SELECT * FROM PARQUET_SCAN('data/parquet-testing/bug2267.parquet');

SELECT assignedLicenses[1] FROM PARQUET_SCAN('data/parquet-testing/bug2267.parquet');

PRAGMA enable_verification;

CREATE VIEW v1 AS SELECT MAP([2], [{'key1': MAP([3, 4], [1, 2]), 'key2': 2}]) AS x;

SELECT * FROM v1;

COPY v1 TO '__TEST_DIR__/map.parquet' WITH (FORMAT 'parquet');

SELECT * FROM "__TEST_DIR__/map.parquet";

CREATE VIEW v2 AS SELECT MAP([2], [{'key1': MAP([3, 4], [1, 2]), 'key2': 2}]) AS x UNION ALL SELECT MAP([2], [{'key1': MAP([3, 4], [1, 2]), 'key2': 2}]);

SELECT * FROM v2;

COPY v2 TO '__TEST_DIR__/map.parquet' WITH (FORMAT 'parquet');

SELECT * FROM "__TEST_DIR__/map.parquet";

CREATE VIEW v3 AS SELECT {'key': [2], 'val': [{'key1': {'key': [3, 4], 'val': [1, 2]}, 'key2': 2}]} AS x;

SELECT * FROM v3;

COPY v3 TO '__TEST_DIR__/map.parquet' WITH (FORMAT 'parquet');

SELECT * FROM "__TEST_DIR__/map.parquet";

CREATE VIEW v4 AS SELECT {'key': [2], 'val': [{'key1': {'key': [3, 4], 'val': [1, 2]}, 'key2': [2]}]} AS x;

SELECT * FROM v4;

COPY v4 TO '__TEST_DIR__/map.parquet' WITH (FORMAT 'parquet');

SELECT * FROM "__TEST_DIR__/map.parquet";

CREATE TABLE lists AS SELECT i AS id, [i] AS list FROM RANGE(0, 10000) AS tbl(i);

COPY lists TO '__TEST_DIR__/list_bug_test.parquet';

SELECT list FROM "__TEST_DIR__/list_bug_test.parquet" WHERE id = 5000;

SELECT * FROM "data/parquet-testing/bug4442.parquet";

SELECT type_param_constraints FROM "data/parquet-testing/bug4903.parquet" LIMIT 10;

SET threads = 1;

CREATE TABLE test_5209 AS SELECT range FROM RANGE(0, 10000);

COPY test_5209 TO '__TEST_DIR__/test_5209.parquet' WITH (ROW_GROUP_SIZE 1000, PARQUET_VERSION 'V1');

SELECT SUM(total_compressed_size) > 10000, SUM(total_uncompressed_size) > 10000, SUM(total_uncompressed_size) > SUM(total_compressed_size) FROM PARQUET_METADATA('__TEST_DIR__/test_5209.parquet');

CREATE TABLE issue_5968 AS SELECT * FROM "https://github.com/duckdb/duckdb-data/releases/download/v1.0/issue_5968.parquet";

SELECT COUNT(*) FROM issue_5968;

SELECT * FROM issue_5968 LIMIT 5;

COPY (SELECT 0.9 AS a) TO '__TEST_DIR__/tiny_decimal.parquet' WITH (format 'parquet', codec 'zstd');

SELECT * FROM "__TEST_DIR__/tiny_decimal.parquet";

SELECT *, EPOCH_MS(dt2 * 1000) FROM READ_PARQUET('data/parquet-testing/bug4903.parquet') WHERE dt2 <= -9214570800 LIMIT 10;

SELECT DISTINCT name, TRUE AS is_suspended_or_cancelled FROM READ_PARQUET('data/parquet-testing/issue6630_*.parquet', union_by_name = TRUE) WHERE "timestamp" BETWEEN '2023-01-26 20:00:00' AND '2023-01-28 04:00:00' AND (suspended = TRUE OR cancelled <> '' OR state = 'SUSPENDED') AND actual_time IS NULL;

SELECT DISTINCT name, TRUE AS is_suspended_or_cancelled FROM READ_PARQUET('data/parquet-testing/issue6630_*.parquet', union_by_name = FALSE) WHERE "timestamp" BETWEEN '2023-01-26 20:00:00' AND '2023-01-28 04:00:00' AND (suspended = TRUE OR cancelled <> '' OR state = 'SUSPENDED') AND actual_time IS NULL;

PRAGMA enable_verification;

CREATE TABLE table1 (name TEXT);

INSERT INTO table1 VALUES ('Test value 1!');

INSERT INTO table1 VALUES ('Test value 2!');

COPY table1 TO '__TEST_DIR__/output1.parquet' WITH (FORMAT PARQUET);

CREATE TABLE table2 (name TEXT, number INT);

INSERT INTO table2 VALUES ('Other test value', 1);

INSERT INTO table2 VALUES ('Other test value', 2);

COPY table2 TO '__TEST_DIR__/output2.parquet' WITH (FORMAT PARQUET);

SET parquet_metadata_cache = TRUE;

SELECT name, number FROM READ_PARQUET(['__TEST_DIR__/output*.parquet'], union_by_name = TRUE) ORDER BY name, number;

PRAGMA enable_verification;

SELECT * FROM PARQUET_SCAN('data/parquet-testing/timestamp.parquet') ORDER BY 1;

SELECT * FROM PARQUET_SCAN('data/parquet-testing/timestamp-ms.parquet') ORDER BY 1;

PRAGMA enable_verification;

SELECT * FROM PARQUET_SCAN('data/parquet-testing/blob.parquet');

PRAGMA enable_verification;

PRAGMA enable_verification;

SELECT * FROM PARQUET_SCAN('data/parquet-testing/binary_string.parquet', binary_as_string = FALSE);

SELECT * FROM PARQUET_SCAN('data/parquet-testing/binary_string.parquet', binary_as_string = FALSE);

SELECT * FROM PARQUET_SCAN('data/parquet-testing/binary_string.parquet', binary_as_string = TRUE);

SELECT converted_type FROM PARQUET_SCHEMA('data/parquet-testing/binary_string.parquet');

SET binary_as_sting = TRUE;

SET binary_as_string = TRUE;

SET binary_as_string = TRUE;

SELECT * FROM PARQUET_SCAN('data/parquet-testing/binary_string.parquet');

SET binary_as_string = FALSE;

SET binary_as_string = FALSE;

SELECT * FROM PARQUET_SCAN('data/parquet-testing/binary_string.parquet');

PRAGMA binary_as_string = 1;

PRAGMA binary_as_string = 1;

SELECT * FROM PARQUET_SCAN('data/parquet-testing/binary_string.parquet');

PRAGMA enable_verification;

SELECT SUM(CASE WHEN is_successful THEN 1 ELSE 0 END), SUM(CASE WHEN advanced_on_error_flag THEN 1 ELSE 0 END), SUM(CASE WHEN safe_on_error_flag THEN 1 ELSE 0 END), SUM(CASE WHEN rbi_flag THEN 1 ELSE 0 END), SUM(CASE WHEN team_unearned_flag THEN 1 ELSE 0 END) FROM READ_PARQUET('https://github.com/duckdb/duckdb-data/releases/download/v1.0/event_baserunning_advance_attempt.parquet');

PRAGMA enable_verification;

SET storage_compatibility_version = 'v1.1.0';

CREATE TABLE integers (i INT);

COPY (SELECT CAST('1992-01-01' AS DATE) AS d) TO '__TEST_DIR__/single_date.parquet' WITH (FORMAT parquet);

COPY integers FROM '__TEST_DIR__/single_date.parquet';

COPY (SELECT CAST('1992-01-01' AS DATE) AS d, 42 AS k) TO '__TEST_DIR__/too_many_columns.parquet' WITH (FORMAT parquet);

COPY integers FROM '__TEST_DIR__/too_many_columns.parquet';

COPY (SELECT 42 AS i) TO '__TEST_DIR__/f2.parquet' WITH (FORMAT parquet);

COPY (SELECT CAST('1992-01-01' AS DATE) AS d, 84 AS i) TO '__TEST_DIR__/f1.parquet' WITH (FORMAT parquet);

COPY integers FROM '__TEST_DIR__/f*.parquet' WITH (FORMAT parquet);

SELECT * FROM "data/parquet-testing/out_of_range_stats.parquet";

COPY (SELECT i AS id, i AS bigint, CAST(i AS SMALLINT) AS tinyint, CAST(i AS DOUBLE) AS dbl, 'prefix_' || CAST(i AS TEXT) AS str, 'constant' AS const_str FROM RANGE(0, 3000) AS t(i)) TO '__TEST_DIR__/skip.parquet' WITH (PARQUET_VERSION '${parquet_version}');

SELECT * FROM "__TEST_DIR__/skip.parquet" WHERE id > 2995;

COPY (SELECT i AS id, [i, i + 1, i + 2] AS l, {'a': i, 'l': [i, i + 1, i + 2]} AS struct_1, [{'a': i}, {'a': i + 1}, {'a': i + 2}] AS struct_2 FROM RANGE(0, 3000) AS t(i)) TO '__TEST_DIR__/skip_nested.parquet' WITH (PARQUET_VERSION '${parquet_version}');

SELECT * FROM "__TEST_DIR__/skip_nested.parquet" WHERE id > 2995;

CALL dbgen(sf=1);

PRAGMA ADD_PARQUET_KEY('key128', '0123456789112345');

PRAGMA ADD_PARQUET_KEY('key128', '0123456789112345');

PRAGMA ADD_PARQUET_KEY('key128', '0123456789112345');

PRAGMA ADD_PARQUET_KEY('key128', '0123456789112345');

PRAGMA ADD_PARQUET_KEY('key128', '0123456789112345');

PRAGMA ADD_PARQUET_KEY('key128', '0123456789112345');

PRAGMA ADD_PARQUET_KEY('key128', '0123456789112345');

CREATE VIEW lineitem AS SELECT * FROM READ_PARQUET('__TEST_DIR__/tpch_encrypted/lineitem.parquet', encryption_config = {'footer_key': 'key128'});

CREATE VIEW orders AS SELECT * FROM READ_PARQUET('__TEST_DIR__/tpch_encrypted/orders.parquet', encryption_config = {'footer_key': 'key128'});

CREATE VIEW partsupp AS SELECT * FROM READ_PARQUET('__TEST_DIR__/tpch_encrypted/partsupp.parquet', encryption_config = {'footer_key': 'key128'});

CREATE VIEW part AS SELECT * FROM READ_PARQUET('__TEST_DIR__/tpch_encrypted/part.parquet', encryption_config = {'footer_key': 'key128'});

CREATE VIEW customer AS SELECT * FROM READ_PARQUET('__TEST_DIR__/tpch_encrypted/customer.parquet', encryption_config = {'footer_key': 'key128'});

CREATE VIEW supplier AS SELECT * FROM READ_PARQUET('__TEST_DIR__/tpch_encrypted/supplier.parquet', encryption_config = {'footer_key': 'key128'});

CREATE VIEW nation AS SELECT * FROM READ_PARQUET('__TEST_DIR__/tpch_encrypted/nation.parquet', encryption_config = {'footer_key': 'key128'});

CREATE VIEW nation AS SELECT * FROM READ_PARQUET('__TEST_DIR__/tpch_encrypted/nation.parquet', encryption_config = {'footer_key': 'key128'});

CREATE VIEW nation AS SELECT * FROM READ_PARQUET('__TEST_DIR__/tpch_encrypted/nation.parquet', encryption_config = {'footer_key': 'key128'});

CREATE VIEW nation AS SELECT * FROM READ_PARQUET('__TEST_DIR__/tpch_encrypted/nation.parquet', encryption_config = {'footer_key': 'key128'});

PRAGMA enable_verification;

PRAGMA ADD_PARQUET_KEY('my_cool_key', '42');

PRAGMA ADD_PARQUET_KEY('my_invalid_duck_key', 'ZHVjaw==');

PRAGMA ADD_PARQUET_KEY('my_invalid_duck_key', 'ZHVjaw==');

PRAGMA ADD_PARQUET_KEY('my_invalid_duck_key', 'ZHVjaw==');

PRAGMA ADD_PARQUET_KEY('key128', '0123456789112345');

PRAGMA ADD_PARQUET_KEY('key192', '012345678911234501234567');

PRAGMA ADD_PARQUET_KEY('key192', '012345678911234501234567');

PRAGMA ADD_PARQUET_KEY('key192', '012345678911234501234567');

SELECT * FROM READ_PARQUET('__TEST_DIR__/encrypted${key_len}.parquet', encryption_config = {'footer_key': 'key${key_len}'});

CREATE OR REPLACE TABLE test (i INT);

CREATE OR REPLACE TABLE test (i INT);

SELECT * FROM test;

SELECT * FROM READ_PARQUET('__TEST_DIR__/encrypted128.parquet');

SELECT * FROM READ_PARQUET('__TEST_DIR__/encrypted128.parquet', encryption_config = {'footer_key': 'key192'});

COPY (SELECT 42 AS i) TO '__TEST_DIR__/unencrypted.parquet';

SELECT * FROM READ_PARQUET('__TEST_DIR__/unencrypted.parquet', encryption_config = {'footer_key': 'key256'});

PRAGMA ADD_PARQUET_KEY('key256base64', 'MDEyMzQ1Njc4OTExMjM0NTAxMjM0NTY3ODkxMTIzNDU=');

SELECT * FROM READ_PARQUET('__TEST_DIR__/encrypted256.parquet', encryption_config = {'footer_key': 'key256base64'});

PRAGMA enable_verification;

PRAGMA ADD_PARQUET_KEY('key128', '0123456789112345');

PRAGMA ADD_PARQUET_KEY('key192', '012345678911234501234567');

PRAGMA ADD_PARQUET_KEY('key192', '012345678911234501234567');

PRAGMA ADD_PARQUET_KEY('key192', '012345678911234501234567');

SELECT * FROM READ_PARQUET('__TEST_DIR__/encrypted${key_len}_openssl.parquet', encryption_config = {'footer_key': 'key${key_len}'});

CREATE OR REPLACE TABLE test (i INT);

CREATE OR REPLACE TABLE test (i INT);

SELECT * FROM test;

SELECT * FROM READ_PARQUET('__TEST_DIR__/encrypted128_openssl.parquet');

SELECT * FROM READ_PARQUET('__TEST_DIR__/encrypted128_openssl.parquet', encryption_config = {'footer_key': 'key192'});

COPY (SELECT 42 AS i) TO '__TEST_DIR__/unencrypted.parquet';

SELECT * FROM READ_PARQUET('__TEST_DIR__/unencrypted.parquet', encryption_config = {'footer_key': 'key256'});

PRAGMA enable_verification;

PRAGMA ADD_PARQUET_KEY('key128', '0123456789112345');

PRAGMA ADD_PARQUET_KEY('key192', '012345678911234501234567');

PRAGMA ADD_PARQUET_KEY('key192', '012345678911234501234567');

PRAGMA ADD_PARQUET_KEY('key192', '012345678911234501234567');

PRAGMA ADD_PARQUET_KEY('key192', '012345678911234501234567');

SELECT * FROM READ_PARQUET('__TEST_DIR__/encrypted${key_len}_openssl.parquet', encryption_config = {'footer_key': 'key${key_len}'}, debug_use_openssl = FALSE);

SELECT * FROM READ_PARQUET('__TEST_DIR__/encrypted${key_len}_openssl.parquet', encryption_config = {'footer_key': 'key${key_len}'}, debug_use_openssl = FALSE);

SELECT * FROM READ_PARQUET('__TEST_DIR__/encrypted${key_len}_mbedtls.parquet', encryption_config = {'footer_key': 'key${key_len}'}, debug_use_openssl = TRUE);

CALL dbgen(sf=1);

PRAGMA ADD_PARQUET_KEY('key128', '0123456789112345');

PRAGMA ADD_PARQUET_KEY('key128', '0123456789112345');

PRAGMA ADD_PARQUET_KEY('key128', '0123456789112345');

PRAGMA ADD_PARQUET_KEY('key128', '0123456789112345');

PRAGMA ADD_PARQUET_KEY('key128', '0123456789112345');

PRAGMA ADD_PARQUET_KEY('key128', '0123456789112345');

PRAGMA ADD_PARQUET_KEY('key128', '0123456789112345');

CREATE VIEW lineitem AS SELECT * FROM READ_PARQUET('__TEST_DIR__/tpch_encrypted/lineitem.parquet', encryption_config = {'footer_key': 'key128'});

CREATE VIEW orders AS SELECT * FROM READ_PARQUET('__TEST_DIR__/tpch_encrypted/orders.parquet', encryption_config = {'footer_key': 'key128'});

CREATE VIEW partsupp AS SELECT * FROM READ_PARQUET('__TEST_DIR__/tpch_encrypted/partsupp.parquet', encryption_config = {'footer_key': 'key128'});

CREATE VIEW part AS SELECT * FROM READ_PARQUET('__TEST_DIR__/tpch_encrypted/part.parquet', encryption_config = {'footer_key': 'key128'});

CREATE VIEW customer AS SELECT * FROM READ_PARQUET('__TEST_DIR__/tpch_encrypted/customer.parquet', encryption_config = {'footer_key': 'key128'});

CREATE VIEW supplier AS SELECT * FROM READ_PARQUET('__TEST_DIR__/tpch_encrypted/supplier.parquet', encryption_config = {'footer_key': 'key128'});

CREATE VIEW nation AS SELECT * FROM READ_PARQUET('__TEST_DIR__/tpch_encrypted/nation.parquet', encryption_config = {'footer_key': 'key128'});

CREATE VIEW nation AS SELECT * FROM READ_PARQUET('__TEST_DIR__/tpch_encrypted/nation.parquet', encryption_config = {'footer_key': 'key128'});

CREATE VIEW nation AS SELECT * FROM READ_PARQUET('__TEST_DIR__/tpch_encrypted/nation.parquet', encryption_config = {'footer_key': 'key128'});

CREATE VIEW nation AS SELECT * FROM READ_PARQUET('__TEST_DIR__/tpch_encrypted/nation.parquet', encryption_config = {'footer_key': 'key128'});

PRAGMA enable_verification;

SELECT * FROM PARQUET_SCAN('data/parquet-testing/adam_genotypes.parquet');

CREATE TABLE tbl AS SELECT i, 'thisisalongstring' || CAST((i % 5000) AS TEXT) AS str FROM RANGE(0, 100000) AS t(i);

COPY tbl TO '__TEST_DIR__/parquet_expr.parquet';

CREATE VIEW parq AS SELECT * FROM "__TEST_DIR__/parquet_expr.parquet";

SELECT COUNT(*) FROM parq WHERE LEAST(str, 'thisisalongstring50') = str;

SELECT COUNT(*) FROM parq WHERE LEAST(str, 'thisisalongstring50') = str AND str >= 'this';

SELECT COUNT(*) FROM parq WHERE LEAST(str, 'thisisalongstring50') = str AND str >= 'thisisalongstring2000' AND str <= 'thisisalongstring4000';

CREATE TABLE lineitem AS SELECT * FROM "data/parquet-testing/arrow/lineitem-arrow.parquet";

SET enable_external_access = FALSE;

SELECT * FROM "data/parquet-testing/arrow/lineitem-arrow.parquet";

SELECT * FROM PARQUET_METADATA('data/parquet-testing/arrow/lineitem-arrow.parquet');

SELECT * FROM PARQUET_SCHEMA('data/parquet-testing/arrow/lineitem-arrow.parquet');

SELECT * FROM PARQUET_SCAN(['data/parquet-testing/arrow/lineitem-arrow.parquet', 'data/parquet-testing/arrow/lineitem-arrow.parquet']);

SELECT * FROM GLOB('data/parquet-testing/arrow/lineitem-arrow.parquet');

COPY lineitem FROM 'data/parquet-testing/arrow/lineitem-arrow.parquet';

COPY lineitem TO '__TEST_DIR__/lineitem.parquet';

SET enable_external_access = TRUE;

SELECT i, j, REPLACE(filename, '\', '/') FROM PARQUET_SCAN('data/parquet-testing/glob*/t?.parquet', FILENAME = 1) ORDER BY i;

SELECT i, j, REPLACE(filename, '\', '/') AS file FROM PARQUET_SCAN('data/parquet-testing/glob*/t?.parquet', FILENAME = 1) WHERE file = 'data/parquet-testing/glob2/t1.parquet';

SELECT COUNT(filename) FROM PARQUET_SCAN('data/parquet-testing/p2.parquet', FILENAME = 1) WHERE id < 1000;

SELECT COUNT(id) FROM PARQUET_SCAN('data/parquet-testing/p2.parquet', FILENAME = 1) WHERE filename >= 'data';

SELECT REPLACE(filename, '\', '/') FROM PARQUET_SCAN('data/parquet-testing/glob*/t?.parquet', FILENAME = 1) WHERE i = 2;

CREATE TABLE test_csv AS SELECT 1 AS id, 'test_csv_content' AS filename;

COPY test_csv TO '__TEST_DIR__/filename_as_column.csv' WITH (HEADER);

SELECT id, filename FROM READ_CSV_AUTO('__TEST_DIR__/filename_as_column.csv', FILENAME = 1);

CREATE TABLE test AS SELECT 1 AS id, 'test' AS filename;

COPY test TO '__TEST_DIR__/filename_as_column.parquet';

SELECT * FROM PARQUET_SCAN('__TEST_DIR__/filename_as_column.parquet', FILENAME = 1);

CREATE TABLE test_copy (i INT, j TEXT, filename TEXT);

INSERT INTO test_copy SELECT * FROM READ_PARQUET('data/parquet-testing/glob/t1.parquet', filename = 1, binary_as_string = 1);

SELECT i, j, REPLACE(filename, '\', '/') FROM test_copy;

INSERT INTO test_copy SELECT * FROM READ_PARQUET('data/parquet-testing/glob/t1.parquet', filename = 1);

SELECT i, j, REPLACE(filename, '\', '/') FROM test_copy;

COPY test_copy FROM 'data/parquet-testing/glob/t1.parquet';

CREATE TABLE test_table_large AS SELECT * FROM RANGE(0, 10000) AS tbl(i);

COPY test_table_large TO '__TEST_DIR__/test_table_large.parquet' WITH (ROW_GROUP_SIZE 1000);

SELECT SUM(i), MAX(REGEXP_REPLACE(filename, '^.*/', '')) FROM PARQUET_SCAN('__TEST_DIR__/test_table_large.parquet', FILENAME = 1) WHERE i > 5000;

SELECT i, j, REPLACE(filename, '\', '/') AS file FROM PARQUET_SCAN(['data/parquet-testing/glob/t1.parquet', 'data/parquet-testing/glob/t1.parquet', 'data/parquet-testing/glob/t2.parquet'], FILENAME = 1) WHERE file LIKE '%t1%';

SELECT id, value AS f, date FROM PARQUET_SCAN('data/parquet-testing/hive-partitioning/different_order/*/*/test.parquet', HIVE_PARTITIONING = 1) WHERE filename = 'value1';

SELECT i, j, filename FROM PARQUET_SCAN('data/parquet-testing/glob*/t?.parquet', FILENAME = 1) ORDER BY i;

SELECT i, j, filename AS file FROM PARQUET_SCAN('data/parquet-testing/glob*/t?.parquet', FILENAME = 1) WHERE file = 'data/parquet-testing/glob2/t1.parquet' OR file = 'data/parquet-testing/glob/t2.parquet' ORDER BY i;

SELECT i, j, filename AS file FROM PARQUET_SCAN('data/parquet-testing/glob*/t?.parquet', FILENAME = 1) WHERE file = 'data/parquet-testing/glob2/t1.parquet' AND i = 3 ORDER BY i;

SELECT i, j, filename AS file FROM PARQUET_SCAN('data/parquet-testing/glob*/t?.parquet', FILENAME = 1) WHERE file = 'data/parquet-testing/glob2/t1.parquet' AND i = 2 ORDER BY i;

SELECT id, value, date, filename FROM PARQUET_SCAN('data/parquet-testing/hive-partitioning/different_order/*/*/test.parquet', HIVE_PARTITIONING = 1, FILENAME = 1) ORDER BY id;

SELECT id, value, date, filename FROM PARQUET_SCAN('data/parquet-testing/hive-partitioning/different_order/*/*/test.parquet', HIVE_PARTITIONING = 1, FILENAME = 1) WHERE CONCAT(date, filename) = '2013-01-01data/parquet-testing/hive-partitioning/different_order/part=b/date=2013-01-01/test.parquet';

SELECT id, value, date, filename FROM PARQUET_SCAN('data/parquet-testing/hive-partitioning/different_order/*/*/test.parquet', HIVE_PARTITIONING = 1, FILENAME = 1) WHERE CONCAT(date, filename) = '2012-01-01data/parquet-testing/hive-partitioning/different_order/date=2012-01-01/part=a/test.parquet';

SELECT id, value AS f, date FROM PARQUET_SCAN('data/parquet-testing/hive-partitioning/different_order/*/*/test.parquet', HIVE_PARTITIONING = 1) WHERE f = 'value2';

SELECT id, value AS f, date FROM PARQUET_SCAN('data/parquet-testing/hive-partitioning/different_order/*/*/test.parquet', HIVE_PARTITIONING = 1) WHERE f = 'value1';

SELECT id, value AS f, date FROM PARQUET_SCAN('data/parquet-testing/hive-partitioning/different_order/*/*/test.parquet', HIVE_PARTITIONING = 1) WHERE filename = 'value1';

SET parquet_metadata_cache = TRUE;

SELECT id, value FROM PARQUET_SCAN('data/parquet-testing/hive-partitioning/*/*/*/test.parquet', FILENAME = 1) WHERE filename LIKE '%mismatching_count%' AND id > 1;

SELECT id, value FROM PARQUET_SCAN('data/parquet-testing/hive-partitioning/*/*/*/test.parquet', FILENAME = 1) WHERE filename LIKE '%mismatching_count%' AND id > 1;

SELECT id, value FROM PARQUET_SCAN('data/parquet-testing/hive-partitioning/*/*/*/test.parquet', FILENAME = 1) WHERE filename LIKE '%mismatching_count%' AND value = 'value1';

SELECT id, value FROM PARQUET_SCAN('data/parquet-testing/hive-partitioning/*/*/*/test.parquet', FILENAME = 1) WHERE filename LIKE '%mismatching_count%' AND value = 'value2';

SELECT id, value FROM PARQUET_SCAN('data/parquet-testing/hive-partitioning/*/*/*/test.parquet', FILENAME = 1) WHERE filename LIKE '%simple%' AND value = 'value1';

SELECT id, value FROM PARQUET_SCAN('data/parquet-testing/hive-partitioning/*/*/*/test.parquet', FILENAME = 1) WHERE filename LIKE '%simple%' AND value = 'value2';

PRAGMA enable_verification;

CREATE VIEW tbl AS SELECT * FROM PARQUET_SCAN('data/parquet-testing/filter_bug1391.parquet');

SELECT ORGUNITID FROM tbl LIMIT 10;

SELECT COUNT(*) FROM tbl;

SELECT COUNT(*) FROM tbl WHERE Namevalidfrom <= '2017-03-01' AND Namevalidto >= '2017-03-01' AND Parentnamevalidfrom <= '2017-03-01' AND Parentnamevalidto >= '2017-03-01' AND CustomerCode = 'CODE';

SELECT MIN(sfc_key), MAX(sfc_key), MIN(gps_time), MAX(gps_time), MIN(intensity), MAX(intensity), MIN(classification), MAX(classification), MIN(return_number), MAX(return_number), MIN(number_of_returns), MAX(number_of_returns) FROM PARQUET_SCAN('data/parquet-testing/sorted.zstd_18_131072_small.parquet');

PRAGMA enable_verification;

SELECT * FROM PARQUET_SCAN('data/parquet-testing/glob*/t?.parquet') ORDER BY i;

SELECT * FROM PARQUET_SCAN('data/parquet-testing/glob/t[0-9].parquet') ORDER BY i;

SELECT * FROM PARQUET_SCAN('data/parquet-testing/glob/*') ORDER BY i;

SELECT * FROM PARQUET_SCAN('data/parquet-testing/glob/*.parquet') ORDER BY i;

SELECT * FROM PARQUET_SCAN('data/parquet-testing/g*/*.parquet') ORDER BY i;

SELECT * FROM PARQUET_SCAN('data/parquet-testing/g*/t1.parquet') ORDER BY i;

SELECT * FROM PARQUET_SCAN('__WORKING_DIRECTORY__/data/parquet-testing/g*/t1.parquet') ORDER BY i;

SELECT * FROM PARQUET_SCAN('data\parquet-testing\g*\t1.parquet') ORDER BY i;

SELECT * FROM PARQUET_SCAN('data/parquet-testing/glob3/*/dir/*.parquet');

SELECT COUNT(*) FROM PARQUET_SCAN('');

SELECT * FROM PARQUET_SCAN('data/parquet-testing/*.parquet');

CREATE TABLE vals (i INT, j BLOB);

COPY vals FROM 'data/parquet-testing/glob/t?.parquet' WITH (FORMAT PARQUET);

SELECT * FROM vals ORDER BY 1;

CREATE TABLE vals2 (i INT, j INT);

COPY vals2 FROM '*/sql/*/parquet/*/glob/t?.parquet' WITH (FORMAT PARQUET);

COPY (SELECT * FROM "data/parquet-testing/glob/t1.parquet") TO 's3://test-bucket/parquet_glob_s3/glob/t1.parquet';
COPY (SELECT * FROM "data/parquet-testing/glob/t2.parquet") TO 's3://test-bucket/parquet_glob_s3/glob/t2.parquet';
COPY (SELECT * FROM "data/parquet-testing/glob2/t1.parquet") TO 's3://test-bucket/parquet_glob_s3/glob2/t1.parquet';
COPY (SELECT * FROM "data/parquet-testing/glob/t1.parquet") TO 's3://test-bucket/parquet_glob_s3/with+plus/t1.parquet';
COPY (SELECT * FROM "data/parquet-testing/glob/t1.parquet") TO 's3://test-bucket/parquet_glob_s3/with space/t1.parquet';

CREATE TABLE vals (i INT, j BLOB);

COPY vals FROM 's3://test-bucket/parquet_glob_s3/glob/t[0-9].parquet' WITH (FORMAT PARQUET);

SELECT * FROM vals ORDER BY 1, 2;

CREATE TABLE vals2 (i INT, j INT);

COPY vals2 FROM 's3://test-bucket/parquet_glob_s3/nonexistentfolderblablabla/t*.parquet' WITH (FORMAT PARQUET);

SET s3_url_style = '${urlstyle}';

SELECT COUNT(*) FROM PARQUET_SCAN('s3://test-bucket/parquet_glob_s3/glob/t[0-9].parquet');

SELECT COUNT(*) FROM PARQUET_SCAN('s3://test-bucket/parquet_glob_s3/glob/*');

SELECT COUNT(*) FROM PARQUET_SCAN('s3://test-bucket/parquet_glob_s3/glob/*.parquet');

SELECT COUNT(*) FROM PARQUET_SCAN('s3://test-bucket/parquet_glob_s3/g*/*.parquet');

SELECT COUNT(*) FROM PARQUET_SCAN('s3://test-bucket/parquet_glob_s3/g*/t1.parquet');

SELECT COUNT(*) FROM PARQUET_SCAN('s3://test-bucket/parquet_glob_s3/with*/*.parquet');

SELECT COUNT(*) FROM PARQUET_SCAN('s3://test-bucket/parquet_glob_s3/notglob/*.parquet');

PRAGMA threads = 4;

SELECT COUNT(*) FROM PARQUET_SCAN('s3://test-bucket/parquet_glob_s3/glob/*');

SELECT COUNT(*) FROM PARQUET_SCAN('s3://test-bucket/parquet_glob_s3/glob/*.parquet');

SELECT COUNT(*) FROM PARQUET_SCAN('s3://test-bucket/parquet_glob_s3/g*/*.parquet');

SELECT COUNT(*) FROM PARQUET_SCAN('s3://test-bucket/parquet_glob_s3/g*/t1.parquet');

SELECT COUNT(*) FROM PARQUET_SCAN('s3://test-bucket/parquet_glob_s3/glob/t?.parquet');

SELECT COUNT(*) FROM PARQUET_SCAN('s3://test-bucket/parquet_glob_s3/?lob/t?.parquet');

SET s3_url_compatibility_mode = TRUE;

COPY vals TO 's3://test-bucket/the_horror/?.*[1-0]parquetta??' WITH (FORMAT parquet);

SELECT COUNT(*) FROM PARQUET_SCAN('s3://test-bucket/the_horror/?.*[1-0]parquetta??');

SET s3_url_compatibility_mode = FALSE;
endloop;

EXPLAIN ANALYZE SELECT COUNT(*) FROM 's3://test-bucket/parquet_glob_s3/g*/*.parquet';

SET enable_http_metadata_cache = TRUE;

EXPLAIN ANALYZE SELECT COUNT(*) FROM 's3://test-bucket/parquet_glob_s3/g*/*.parquet';

EXPLAIN ANALYZE SELECT COUNT(*) FROM 's3://test-bucket/parquet_glob_s3/g*/*.parquet';

PRAGMA enable_verification;

SELECT * FROM "data/parquet-testing/parquet_go.parquet";

SELECT id, value, part, date FROM PARQUET_SCAN('data/parquet-testing/hive-partitioning/simple/*/*/test.parquet', HIVE_PARTITIONING = 1) ORDER BY id;

SELECT id, value, part, date FROM PARQUET_SCAN('data/parquet-testing/hive-partitioning/different_order/*/*/test.parquet', HIVE_PARTITIONING = 1) ORDER BY id;

SELECT id, date FROM PARQUET_SCAN('data/parquet-testing/hive-partitioning/different_order/*/*/test.parquet', HIVE_PARTITIONING = 1) WHERE date = '2013-01-01';

SELECT id, date FROM PARQUET_SCAN('data/parquet-testing/hive-partitioning/different_order/*/*/test.parquet', HIVE_PARTITIONING = 1) WHERE date = '2012-01-01';

SELECT id, date FROM PARQUET_SCAN('data/parquet-testing/hive-partitioning/different_order/*/*/test.parquet', HIVE_PARTITIONING = 1) WHERE date = '2018-01-01';

SELECT id, value, part, date FROM PARQUET_SCAN('data/parquet-testing/hive-partitioning/different_order/*/*/test.parquet', HIVE_PARTITIONING = 1) WHERE part = 'a' OR part = 'b' ORDER BY id;

SELECT id, date FROM PARQUET_SCAN('data/parquet-testing/hive-partitioning/different_order/*/*/test.parquet', HIVE_PARTITIONING = 1) WHERE date = '2013-01-01' AND id = 2;

SELECT id, date FROM PARQUET_SCAN('data/parquet-testing/hive-partitioning/different_order/*/*/test.parquet', HIVE_PARTITIONING = 1) WHERE date = '2013-01-01' AND id = 1;

SELECT id, value, date FROM PARQUET_SCAN('data/parquet-testing/hive-partitioning/different_order/*/*/test.parquet', HIVE_PARTITIONING = 1) WHERE date = '2012-01-01' AND id = 1;

SELECT id, value, date FROM PARQUET_SCAN('data/parquet-testing/hive-partitioning/different_order/*/*/test.parquet', HIVE_PARTITIONING = 1) WHERE date = '2012-01-01' OR id <= 2 ORDER BY id;

SELECT * FROM PARQUET_SCAN('data/parquet-testing/hive-partitioning/mismatching_names/*/*/test.parquet', HIVE_PARTITIONING = 1);

SELECT * FROM PARQUET_SCAN('data/parquet-testing/hive-partitioning/mismatching_count/*/*/test.parquet', HIVE_PARTITIONING = 1) WHERE part = b;

SELECT * FROM PARQUET_SCAN('data/parquet-testing/hive-partitioning/mismatching_names/*/*/test.parquet', HIVE_PARTITIONING = 1, UNION_BY_NAME = 1);

EXPLAIN select id, date from parquet_scan('data/parquet-testing/hive-partitioning/different_order/*/*/test.parquet', HIVE_PARTITIONING=1, HIVE_TYPES_AUTOCAST=0) where date = '2013-01-01';

EXPLAIN select id, date from parquet_scan('data/parquet-testing/hive-partitioning/different_order/*/*/test.parquet', HIVE_PARTITIONING=1, HIVE_TYPES_AUTOCAST=0) where date = '2018-01-01';

EXPLAIN select id, value, part, date from parquet_scan('data/parquet-testing/hive-partitioning/different_order/*/*/test.parquet', HIVE_PARTITIONING=1) where part='a' OR part='b' order by id;

EXPLAIN select id, date from parquet_scan('data/parquet-testing/hive-partitioning/simple/*/*/test.parquet', HIVE_PARTITIONING=1, HIVE_TYPES_AUTOCAST=0) where date = '2012-01-01' and id < 10;

EXPLAIN select id, date from parquet_scan('data/parquet-testing/hive-partitioning/simple/*/*/test.parquet', HIVE_PARTITIONING=1, HIVE_TYPES_AUTOCAST=0) where date = '2013-01-01' and id < 10;

SELECT id, value, part, CAST(date AS DATE) AS date_cast FROM PARQUET_SCAN('data/parquet-testing/hive-partitioning/different_order/*/*/test.parquet', HIVE_PARTITIONING = 1) WHERE CONCAT(CAST(date_cast AS TEXT), part) = '2013-01-01b';

EXPLAIN select id, value, part, CAST(date AS DATE) as date_cast from parquet_scan('data/parquet-testing/hive-partitioning/different_order/*/*/test.parquet', HIVE_PARTITIONING=1, HIVE_TYPES_AUTOCAST=0) where concat(date_cast::VARCHAR, part) == '2013-01-01b';

SELECT id, value, part, CAST(date AS DATE) AS date_cast FROM PARQUET_SCAN('data/parquet-testing/hive-partitioning/different_order/*/*/test.parquet', HIVE_PARTITIONING = 1) WHERE CONCAT(CAST(date_cast AS TEXT), part) = '2012-01-01a';

EXPLAIN select id, value, part, CAST(date AS DATE) as date_cast from parquet_scan('data/parquet-testing/hive-partitioning/different_order/*/*/test.parquet', HIVE_PARTITIONING=1, HIVE_TYPES_AUTOCAST=0) where concat(date_cast::VARCHAR, part) == '2012-01-01a';

EXPLAIN select id, value, part, CAST(date AS DATE) as date_cast from parquet_scan('data/parquet-testing/hive-partitioning/different_order/*/*/test.parquet', HIVE_PARTITIONING=1, HIVE_TYPES_AUTOCAST=0) where (date_cast=CAST('2013-01-01' as DATE) AND (value='value1' OR concat(date_cast::VARCHAR, part) == '2013-01-01b'));

EXPLAIN select id, value, part, CAST(date AS DATE) as date_cast from parquet_scan('data/parquet-testing/hive-partitioning/different_order/*/*/test.parquet', HIVE_PARTITIONING=1, HIVE_TYPES_AUTOCAST=0) where (date_cast=CAST('2012-01-01' as DATE) AND (value='value2' OR concat(date_cast::VARCHAR, part) == '2012-01-01a'));

SELECT a, b, REPLACE(filename, '\', '/') AS filename FROM PARQUET_SCAN('data/parquet-testing/hive-partitioning/hive_col_also_in_file/*/test.parquet', HIVE_PARTITIONING = 0, FILENAME = 1) ORDER BY filename;

SELECT a, b, REPLACE(filename, '\', '/') AS filename FROM PARQUET_SCAN('data/parquet-testing/hive-partitioning/hive_col_also_in_file/*/test.parquet', HIVE_PARTITIONING = 1, FILENAME = 1) ORDER BY filename;

SELECT id, value, part, date FROM PARQUET_SCAN('data/parquet-testing/hive-partitioning/missing/*/*/test.parquet', HIVE_PARTITIONING = 1) ORDER BY id;

SELECT id, value, part, date FROM PARQUET_SCAN('data/parquet-testing/hive-partitioning/missing/*/*/test.parquet', HIVE_PARTITIONING = 1) ORDER BY id;

SELECT id, value, part, date FROM PARQUET_SCAN('data/parquet-testing/hive-partitioning/missing/*/*/test.parquet', HIVE_PARTITIONING = 1) ORDER BY id;

COPY (SELECT * FROM t1) TO '__TEST_DIR__/hive_filters' WITH (FORMAT PARQUET, PARTITION_BY c);

COPY (SELECT * FROM t1) TO '__TEST_DIR__/hive_filters_2' WITH (FORMAT PARQUET, PARTITION_BY (c, b));

EXPLAIN select a from parquet_scan('__TEST_DIR__/hive_filters/*/*.parquet', HIVE_PARTITIONING=1, HIVE_TYPES_AUTOCAST=0) where c::INT=500 and a::INT < 4;

EXPLAIN select a from parquet_scan('__TEST_DIR__/hive_filters_2/*/*/*.parquet', HIVE_PARTITIONING=1, HIVE_TYPES_AUTOCAST=0) where c::INT > 500 and c::INT < 500;

CREATE OR REPLACE TABLE orders (m INT, v INT, j INT);

INSERT INTO orders SELECT i % 12 + 1, i, j FROM RANGE(0, 360) AS t(i), RANGE(0, 1000) AS s(j);

COPY (SELECT 2000 + (v // 12) AS y, m, v, j FROM orders) TO '__TEST_DIR__/orders_m' WITH (FORMAT PARQUET, PARTITION_BY (m));

SELECT AVG(y), AVG(m), AVG(v), AVG(j) FROM "__TEST_DIR__/orders_m/**/*.parquet";

COPY (SELECT 2000 + (v // 12) AS y, m, v, j FROM orders) TO '__TEST_DIR__/orders_y' WITH (FORMAT PARQUET, PARTITION_BY (y));

SELECT AVG(y), AVG(m), AVG(v), AVG(j) FROM "__TEST_DIR__/orders_y/**/*.parquet";

COPY (SELECT 2000 + (v // 12) AS y, m, v, j FROM orders) TO '__TEST_DIR__/orders_ym' WITH (FORMAT PARQUET, PARTITION_BY (y, m));

SELECT AVG(y), AVG(m), AVG(v), AVG(j) FROM "__TEST_DIR__/orders_ym/**/*.parquet";

COPY (SELECT 2000 + (v // 12) AS y, m, v, j FROM orders ORDER BY RANDOM()) TO '__TEST_DIR__/orders_ym_rand' WITH (FORMAT PARQUET, PARTITION_BY (y, m));

SELECT AVG(y), AVG(m), AVG(v), AVG(j) FROM "__TEST_DIR__/orders_ym_rand/**/*.parquet";

SELECT * FROM PARQUET_SCAN('data/parquet-testing/hive-partitioning/empty_string/*/*.parquet') ORDER BY ALL;

SELECT * FROM PARQUET_SCAN('data/parquet-testing/hive-partitioning/empty_string/*/*.parquet') WHERE key IS NULL;

SELECT * FROM PARQUET_SCAN('data/parquet-testing/hive-partitioning/empty_string/*/*.parquet') WHERE key = 'a';

SELECT * FROM PARQUET_SCAN('data/parquet-testing/hive-partitioning/empty_string/*/*.parquet') WHERE key = '';

CREATE TABLE test AS SELECT i % 5 AS a, i % 2 AS b FROM RANGE(0, 10) AS tbl(i);

CREATE TABLE test AS SELECT i % 5 AS a, i % 2 AS b FROM RANGE(0, 10) AS tbl(i);

SELECT * FROM PARQUET_SCAN('__TEST_DIR__/null-parquet/**/*.parquet', hive_partitioning = 1, hive_types = {'a': INT}) ORDER BY ALL;

CREATE TABLE test2 AS SELECT i % 5 AS a, i % 2 AS b, i AS c FROM RANGE(0, 10) AS tbl(i);

CREATE TABLE test2 AS SELECT i % 5 AS a, i % 2 AS b, i AS c FROM RANGE(0, 10) AS tbl(i);

SELECT * FROM PARQUET_SCAN('__TEST_DIR__/null-parquet/**/*.parquet', hive_partitioning = 1, hive_types = {'a': INT}) ORDER BY ALL;

CREATE TABLE test_fetch_delay (a INT, b INT);

INSERT INTO test_fetch_delay (SELECT (i % 2) * 2, (i % 2) * 2 FROM RANGE(0, 2500000) AS tbl(i));

COPY test_fetch_delay TO 's3://test-bucket/skip_delay.parquet';

CREATE TABLE test AS SELECT * FROM "s3://test-bucket/skip_delay.parquet" WHERE a = 1;

SELECT COUNT(*) FROM test;

PRAGMA enable_verification;

SELECT COUNT(*) FROM PARQUET_SCAN(['data/parquet-testing/glob/t1.parquet', 'data/parquet-testing/glob/t2.parquet']);

SELECT COUNT(*) FROM PARQUET_SCAN(['data/parquet-testing/glob/*.parquet', 'data/parquet-testing/glob/t2.parquet']);

SELECT COUNT(*) FROM PARQUET_SCAN(['data/parquet-testing/glob/t1.parquet', 'data/parquet-testing/glob/t1.parquet', 'data/parquet-testing/glob/t1.parquet', 'data/parquet-testing/glob/t1.parquet', 'data/parquet-testing/glob/t1.parquet']);

SELECT COUNT(*) FROM PARQUET_SCAN(['data/parquet-testing/glob/t1.parquet', 'data/parquet-testing/glob/t2.parquet', 'this/file/doesnot/exist/hopefully.parquet']);

SELECT COUNT(*) FROM PARQUET_SCAN(CAST([] AS TEXT[]));

SELECT COUNT(*) FROM PARQUET_SCAN([NULL]);

SELECT COUNT(*) FROM PARQUET_SCAN(CAST(NULL AS TEXT[]));

SELECT COUNT(*) FROM PARQUET_SCAN(CAST(NULL AS TEXT));

SELECT * FROM PARQUET_METADATA('data/parquet-testing/lineitem-top10000.gzip.parquet');

SELECT * FROM PARQUET_SCHEMA('data/parquet-testing/lineitem-top10000.gzip.parquet');

SELECT COUNT(*) > 0 FROM PARQUET_METADATA('data/parquet-testing/lineitem-top10000.gzip.parquet');

SELECT COUNT(*) > 0 FROM PARQUET_SCHEMA('data/parquet-testing/lineitem-top10000.gzip.parquet');

SELECT * FROM PARQUET_SCHEMA('data/parquet-testing/decimal/decimal_dc.parquet');

SELECT * FROM PARQUET_SCHEMA('data/parquet-testing/decimal/int64_decimal.parquet');

SELECT * FROM PARQUET_METADATA('data/parquet-testing/glob/*.parquet');

SELECT * FROM PARQUET_SCHEMA('data/parquet-testing/glob/*.parquet');

COPY (SELECT * FROM (VALUES (CAST('\x0An\xC3\xB5' AS BLOB)), (CAST('\xFFXl\x9D' AS BLOB))) AS tbl(b)) TO '__TEST_DIR__/blobs.parquet';

SELECT stats_min_value FROM PARQUET_METADATA('__TEST_DIR__/blobs.parquet');

SELECT MIN(b) FROM "__TEST_DIR__/blobs.parquet";

SELECT stats_max_value FROM PARQUET_METADATA('__TEST_DIR__/blobs.parquet');

SELECT MAX(b) FROM "__TEST_DIR__/blobs.parquet";

SELECT HEX(CAST(stats_min_value AS BLOB)) FROM PARQUET_METADATA('__TEST_DIR__/blobs.parquet');

SELECT HEX(MIN(b)) FROM "__TEST_DIR__/blobs.parquet";

SELECT HEX(CAST(stats_max_value AS BLOB)) FROM PARQUET_METADATA('__TEST_DIR__/blobs.parquet');

SELECT HEX(MAX(b)) FROM "__TEST_DIR__/blobs.parquet";

SET parquet_metadata_cache = TRUE;

SELECT * FROM PARQUET_SCAN('data/parquet-testing/cache/cache1.parquet');

SELECT * FROM PARQUET_SCAN('data/parquet-testing/cache/cache1.parquet');

COPY (SELECT * FROM PARQUET_SCAN('data/parquet-testing/cache/cache1.parquet')) TO '__TEST_DIR__/cached.parquet' WITH (FORMAT 'parquet');

SELECT * FROM PARQUET_SCAN('__TEST_DIR__/cached.parquet');

COPY (SELECT * FROM PARQUET_SCAN('data/parquet-testing/cache/cache2.parquet')) TO '__TEST_DIR__/cached.parquet' WITH (FORMAT 'parquet');

SELECT * FROM PARQUET_SCAN('__TEST_DIR__/cached.parquet');

SELECT * FROM PARQUET_SCAN('data/parquet-testing/glob/t1.parquet');

SELECT * FROM PARQUET_SCAN('data/parquet-testing/glob2/t1.parquet');

SELECT COUNT(*) FROM PARQUET_SCAN('data/parquet-testing/glob/*.parquet');

SELECT * FROM PARQUET_SCAN('data/parquet-testing/nan-float.parquet') ORDER BY 1;

SELECT * FROM PARQUET_SCAN('data/parquet-testing/arrow_nan.parquet') WHERE f = 'nan';

SELECT * FROM PARQUET_SCAN('data/parquet-testing/arrow_nan.parquet') WHERE f > 10;

SELECT * FROM PARQUET_SCAN('data/parquet-testing/arrow_nan.parquet') WHERE d = 'nan';

SELECT * FROM PARQUET_SCAN('data/parquet-testing/arrow_nan.parquet') WHERE d > 10;

PRAGMA enable_verification;

SELECT * FROM PARQUET_SCAN('data/parquet-testing/nullbyte.parquet');

SELECT * FROM PARQUET_SCAN('data/parquet-testing/nullbyte_multiple.parquet');

SELECT * FROM PARQUET_SCAN('data/parquet-testing/pandas-date.parquet') ORDER BY 1;

PRAGMA enable_verification;

CREATE TABLE other_table AS SELECT 337 AS i UNION ALL SELECT 948247 UNION ALL SELECT 1779793 UNION ALL SELECT 4779793;

COPY (SELECT * FROM RANGE(0, 10000000) AS tbl(i)) TO '__TEST_DIR__/integers.parquet' WITH (FORMAT PARQUET);

CREATE VIEW integers AS SELECT * FROM "__TEST_DIR__/integers.parquet";

SELECT * FROM integers LIMIT 5;

SELECT * FROM integers WHERE i > 1978321 OR i = 334 LIMIT 5;

SELECT * FROM integers WHERE i > 1978321 LIMIT 5;

SELECT * FROM integers WHERE i > 4978321 LIMIT 5;

SELECT * FROM integers WHERE i IN (SELECT * FROM other_table);

(SELECT * FROM integers WHERE i > 1978321 LIMIT 5) UNION ALL (SELECT * FROM integers WHERE i > 4978321 LIMIT 5);

PRAGMA enable_verification;

CREATE TABLE other_table AS SELECT 337 AS i UNION ALL SELECT 948247 UNION ALL SELECT 1779793 UNION ALL SELECT 4779793;

COPY (SELECT * FROM RANGE(0, 5000000) AS tbl(i)) TO '__TEST_DIR__/integers1.parquet' WITH (FORMAT PARQUET);
COPY (SELECT * FROM RANGE(5000000, 10000000) AS tbl(i)) TO '__TEST_DIR__/integers2.parquet' WITH (FORMAT PARQUET);

CREATE VIEW integers AS SELECT * FROM PARQUET_SCAN(['__TEST_DIR__/integers1.parquet', '__TEST_DIR__/integers2.parquet']);

SELECT * FROM integers LIMIT 5;

SELECT * FROM integers WHERE i > 1978321 OR i = 334 LIMIT 5;

SELECT * FROM integers WHERE i > 1978321 LIMIT 5;

SELECT * FROM integers WHERE i > 4978321 LIMIT 5;

SELECT * FROM integers WHERE i IN (SELECT * FROM other_table);

(SELECT * FROM integers WHERE i > 1978321 LIMIT 5) UNION ALL (SELECT * FROM integers WHERE i > 4978321 LIMIT 5);

SELECT "önë", "C1", "🦆" FROM PARQUET_SCAN('data/parquet-testing/silly-names.parquet') ORDER BY 1;

SELECT stats_min, stats_max, stats_min_value, stats_max_value FROM PARQUET_METADATA('data/parquet-testing/boolean_stats.parquet');

SELECT stats_min, stats_max, stats_min_value, stats_max_value FROM PARQUET_METADATA('data/parquet-testing/signed_stats.parquet');

SELECT * FROM "data/parquet-testing/signed_stats.parquet";

SELECT stats_min, stats_max, stats_min_value, stats_max_value FROM PARQUET_METADATA('data/parquet-testing/unsigned_stats.parquet');

SELECT * FROM "data/parquet-testing/unsigned_stats.parquet";

SELECT stats_min, stats_max, stats_min_value, stats_max_value FROM PARQUET_METADATA('data/parquet-testing/date_stats.parquet');

SELECT * FROM "data/parquet-testing/date_stats.parquet";

SELECT stats_min, stats_max, stats_min_value, stats_max_value FROM PARQUET_METADATA('data/parquet-testing/varchar_stats.parquet');

SELECT MIN(str_val), MAX(str_val), MIN("hello\x00world"), MAX("hello\x00world") FROM "data/parquet-testing/varchar_stats.parquet";

SELECT * FROM "data/parquet-testing/varchar_stats.parquet";

SELECT stats_min, stats_max, stats_min_value, stats_max_value FROM PARQUET_METADATA('data/parquet-testing/decimal_stats.parquet');

SELECT * FROM "data/parquet-testing/decimal_stats.parquet";

SELECT stats_min, stats_max, stats_min_value, stats_max_value FROM PARQUET_METADATA('data/parquet-testing/arrow/int32_decimal.parquet');

SELECT * FROM "data/parquet-testing/arrow/int32_decimal.parquet";

SELECT stats_min, stats_max, stats_min_value, stats_max_value FROM PARQUET_METADATA('data/parquet-testing/arrow/int64_decimal.parquet');

SELECT * FROM "data/parquet-testing/arrow/int64_decimal.parquet";

SELECT stats_min, stats_max, stats_min_value, stats_max_value FROM PARQUET_METADATA('data/parquet-testing/data-types.parquet');

SELECT * FROM "data/parquet-testing/data-types.parquet";

SELECT * FROM PARQUET_METADATA('${parquet_file}');
endloop;

COPY (SELECT '' AS i) TO '__TEST_DIR__/test.parquet';

SELECT i IS NULL AS c0 FROM "__TEST_DIR__/test.parquet";

SELECT stats_min_value IS NULL AS c0, stats_max_value IS NULL AS c1 FROM PARQUET_METADATA('__TEST_DIR__/test.parquet');

SET default_null_order = 'nulls_first';
require AS parquet;

SET default_null_order = 'nulls_first';
require AS parquet;

CREATE OR REPLACE TABLE ubn1 (a BIGINT);

CREATE OR REPLACE TABLE ubn2 (a INT, b INT);

CREATE OR REPLACE TABLE ubn3 (a INT, c INT);

INSERT INTO ubn1 VALUES (1), (2), (9223372036854775807);

INSERT INTO ubn2 VALUES (3, 4), (5, 6);

INSERT INTO ubn3 VALUES (100, 101), (102, 103);

COPY ubn1 TO '__TEST_DIR__/ubn1.parquet' WITH (FORMAT PARQUET);

COPY ubn2 TO '__TEST_DIR__/ubn2.parquet' WITH (FORMAT PARQUET);

COPY ubn3 TO '__TEST_DIR__/ubn3.parquet' WITH (FORMAT PARQUET);

SELECT a, b, c FROM PARQUET_SCAN('__TEST_DIR__/ubn*.parquet');

SELECT a, b, c FROM PARQUET_SCAN('__TEST_DIR__/ubn*.parquet', UNION_BY_NAME = TRUE) ORDER BY a;

SELECT a FROM PARQUET_SCAN(['__TEST_DIR__/ubn2.parquet', '__TEST_DIR__/ubn1.parquet', '__TEST_DIR__/ubn3.parquet']) ORDER BY a;

SELECT a FROM PARQUET_SCAN('__TEST_DIR__/ubn*.parquet', UNION_BY_NAME = TRUE) ORDER BY a;

SELECT b FROM PARQUET_SCAN('__TEST_DIR__/ubn*.parquet') ORDER BY b;

SELECT b FROM PARQUET_SCAN('__TEST_DIR__/ubn*.parquet', UNION_BY_NAME = TRUE) ORDER BY b;

SELECT TYPEOF(a), TYPEOF(b), TYPEOF(c) FROM PARQUET_SCAN('__TEST_DIR__/ubn*.parquet', UNION_BY_NAME = TRUE) LIMIT 1;

COPY (SELECT [CAST(42 AS INT)] AS a, [CAST(43 AS INT)] AS b) TO '__TEST_DIR__/listubn1.parquet' WITH (FORMAT PARQUET);

COPY (SELECT [CAST(44 AS BIGINT)] AS b, [CAST(45 AS INT)] AS c) TO '__TEST_DIR__/listubn2.parquet' WITH (FORMAT PARQUET);

SELECT a, b, c FROM PARQUET_SCAN('__TEST_DIR__/listubn[12].parquet', union_by_name = TRUE) ORDER BY a;

SELECT TYPEOF(a), TYPEOF(b), TYPEOF(c) FROM PARQUET_SCAN('__TEST_DIR__/listubn[12].parquet', union_by_name = TRUE) LIMIT 1;

CALL dbgen(sf=0.1);

PRAGMA enable_verification;

COPY (SELECT l_orderkey, l_partkey, l_suppkey FROM lineitem) TO '__TEST_DIR__/union_by_name_lineitem1.parquet' WITH (FORMAT PARQUET);

COPY (SELECT l_partkey, l_suppkey, l_orderkey FROM lineitem) TO '__TEST_DIR__/union_by_name_lineitem2.parquet' WITH (FORMAT PARQUET);

SELECT SUM(l_partkey), SUM(l_suppkey), SUM(l_orderkey) FROM PARQUET_SCAN('__TEST_DIR__/union_by_name_lineitem*.parquet', union_by_name = TRUE);

SELECT file_index FROM "data/parquet-testing/glob/t1.parquet";

SELECT file_index, i, j FROM READ_PARQUET(['data/parquet-testing/glob/t1.parquet', 'data/parquet-testing/glob/t2.parquet', 'data/parquet-testing/glob2/t1.parquet']);

SELECT file_index, i, j FROM READ_PARQUET(['data/parquet-testing/glob/t1.parquet', 'data/parquet-testing/glob/t2.parquet', 'data/parquet-testing/glob2/t1.parquet']) WHERE file_index = 1;

SELECT filename FROM "data/parquet-testing/glob/t1.parquet";

SELECT i, j, REPLACE(filename, '\', '/') FROM "data/parquet-testing/glob*/t?.parquet" ORDER BY i;

SELECT * FROM "data/parquet-testing/glob*/t?.parquet" ORDER BY i;

SELECT i, j, REPLACE(filename, '\', '/') FROM "data/parquet-testing/glob*/t?.parquet" WHERE filename = 'data/parquet-testing/glob/t1.parquet';

SELECT file_row_number FROM "data/parquet-testing/glob/t1.parquet";

SELECT file_row_number FROM "data/parquet-testing/glob/t1.parquet" WHERE file_row_number = 0;

SELECT i, j, REPLACE(filename, '\', '/'), file_row_number FROM "data/parquet-testing/glob*/t?.parquet" ORDER BY i;

COPY (SELECT 42, 'hello') TO '__TEST_DIR__/${codec}.parquet' WITH (FORMAT 'parquet', CODEC '${codec}');

SELECT * FROM PARQUET_SCAN('__TEST_DIR__/${codec}.parquet');

COPY (SELECT * FROM "data/parquet-testing/userdata1.parquet") TO '__TEST_DIR__/userdata-${codec}.parquet' WITH (FORMAT 'parquet', CODEC '${codec}', ROW_GROUP_SIZE 10);

SELECT * FROM "__TEST_DIR__/userdata-${codec}.parquet";
endloop;

COPY (SELECT 42, 'hello') TO '__TEST_DIR__/gzip.parquet' WITH (FORMAT 'parquet', CODEC 'BLABLABLA');

COPY (SELECT 42, 'hello') TO '__TEST_DIR__/gzip.parquet' WITH (FORMAT 'parquet', CODEC);

COPY (SELECT 42, 'hello') TO '__TEST_DIR__/gzip.parquet' WITH (FORMAT 'parquet', CODEC 3);

PRAGMA enable_verification;

COPY (SELECT * FROM (VALUES (['asdf', 'fdsa'])) JOIN VALUES (1), (2) ON TRUE) TO '__TEST_DIR__/lists.parquet';

SELECT * FROM READ_PARQUET('__TEST_DIR__/lists.parquet');

SET default_null_order = 'nulls_first';
require AS parquet;

SELECT * FROM PARQUET_SCAN('data/parquet-testing/zstd.parquet') ORDER BY 1;

PRAGMA enable_verification;

PREPARE v1 AS SELECT * FROM parquet_scan($1) ORDER BY 1;

EXECUTE v1('data/parquet-testing/arrow/alltypes_plain.parquet');

EXECUTE v1('data/parquet-testing/pandas-date.parquet');

PRAGMA enable_verification;

CREATE VIEW r AS SELECT * FROM READ_PARQUET('data/parquet-testing/hive-partitioning/union_by_name/*/*.parquet', hive_partitioning = 1, union_by_name = 1);

WITH RECURSIVE t(it, accum) AS (SELECT 1, 0 UNION ALL (SELECT it + 1, accum + j FROM t, r WHERE it <= x)) SELECT * FROM t ORDER BY it, accum;

PRAGMA enable_verification;

COPY (SELECT 42 AS a) TO '__TEST_DIR__/lists.my_file_extension' WITH (FORMAT PARQUET);

SELECT * FROM "__TEST_DIR__/lists.my_file_extension";

SELECT * FROM READ_PARQUET('__TEST_DIR__/lists.my_file_extension');

PRAGMA enable_verification;

SELECT * FROM "data/parquet-testing/arrow/datapage_v2.snappy.parquet";

SELECT * FROM "data/parquet-testing/rle_boolean_encoding.parquet";

PRAGMA enable_verification;

SELECT COUNT(*) FROM "data/parquet-testing/spark-store.parquet";

SELECT s_store_sk, s_floor_space, TRIM(s_street_name) FROM "data/parquet-testing/spark-store.parquet";

SELECT * FROM "data/parquet-testing/spark-ontime.parquet";

PRAGMA enable_verification;

SELECT my_map['A'], * FROM PARQUET_SCAN('data/parquet-testing/struct_skip_test.parquet') WHERE filter = '0';

PRAGMA enable_verification;

SELECT * FROM PARQUET_SCAN('data/parquet-testing/aws1.snappy.parquet') LIMIT 100;

SELECT COUNT(*), MIN(i), MAX(i), SUM(i) FROM PARQUET_SCAN('data/parquet-testing/manyrowgroups.parquet') AS t(i);

SELECT COUNT(*), MIN(i), MAX(i), SUM(i) FROM PARQUET_SCAN('data/parquet-testing/manyrowgroups*') AS t(i);

PRAGMA threads = 4;

SELECT COUNT(*), MIN(i), MAX(i), SUM(i) FROM PARQUET_SCAN('data/parquet-testing/manyrowgroups.parquet') AS t(i);

SELECT COUNT(*), MIN(i), MAX(i), SUM(i) FROM PARQUET_SCAN('data/parquet-testing/manyrowgroups*') AS t(i);

PRAGMA enable_verification;

SELECT * FROM PARQUET_SCAN('data/parquet-testing/decimal/fixed_length_decimal.parquet');

SELECT * FROM PARQUET_SCAN('data/parquet-testing/decimal/fixed_length_decimal_legacy.parquet');

SELECT * FROM PARQUET_SCAN('data/parquet-testing/decimal/decimal_dc.parquet') LIMIT 10;

SELECT * FROM PARQUET_SCAN('data/parquet-testing/decimal/pandas_decimal.parquet') LIMIT 10;

COPY (SELECT 1 AS a, 2 AS a, 3 AS a) TO '__TEST_DIR__/dupe_cols.parquet';

SELECT a, "a_1", "a_2" FROM "__TEST_DIR__/dupe_cols.parquet";

COPY (SELECT 1 AS a, 2 AS a, 3 AS "a_1") TO '__TEST_DIR__/dupe_cols.parquet';

SELECT a, "a_1", "a_1_1" FROM "__TEST_DIR__/dupe_cols.parquet";

COPY (SELECT 1 AS a, 3 AS "a_1", 2 AS a) TO '__TEST_DIR__/dupe_cols.parquet';

SELECT a, "a_1", "a_2" FROM "__TEST_DIR__/dupe_cols.parquet";

PRAGMA enable_verification;

SELECT COUNT(*) FROM PARQUET_SCAN('data/parquet-testing/userdata1.parquet') WHERE id > 500;

SELECT COUNT(*) FROM PARQUET_SCAN('data/parquet-testing/userdata1.parquet') WHERE id < 500;

SELECT COUNT(*) FROM PARQUET_SCAN('data/parquet-testing/userdata1.parquet') WHERE id > 100 AND id < 900;

SELECT COUNT(*) FROM PARQUET_SCAN('data/parquet-testing/userdata1.parquet') WHERE id BETWEEN 100 AND 900;

SELECT registration_dttm, id, first_name, birthdate, salary FROM PARQUET_SCAN('data/parquet-testing/userdata1.parquet') WHERE id = 42;

SELECT COUNT(*) FROM PARQUET_SCAN('data/parquet-testing/userdata1.parquet') WHERE id = 42;

SELECT COUNT(*) FROM PARQUET_SCAN('data/parquet-testing/userdata1.parquet') WHERE salary < 1000;

SELECT COUNT(*) FROM PARQUET_SCAN('data/parquet-testing/userdata1.parquet') WHERE salary < 1000;

SELECT first_name, gender FROM PARQUET_SCAN('data/parquet-testing/userdata1.parquet') WHERE first_name = 'Mark' AND gender <> '';

SELECT gender, first_name FROM PARQUET_SCAN('data/parquet-testing/userdata1.parquet') WHERE first_name = 'Mark' AND gender <> '';

SELECT COUNT(*) FROM PARQUET_SCAN('data/parquet-testing/userdata1.parquet') WHERE gender = 'Male' AND first_name = 'Mark';

SELECT last_name FROM PARQUET_SCAN('data/parquet-testing/userdata1.parquet') WHERE first_name > 'Mark' AND country > 'Germany' AND salary > 0 ORDER BY last_name LIMIT 10;

SELECT LENGTH(l_comment) FROM PARQUET_SCAN('data/parquet-testing/lineitem-top10000.gzip.parquet') WHERE l_orderkey = 1 ORDER BY l_comment;

SELECT * FROM PARQUET_SCAN('data/parquet-testing/date.parquet') WHERE d < CAST('1978-01-01' AS DATE);

SELECT * FROM PARQUET_SCAN('data/parquet-testing/date.parquet') WHERE d > CAST('1982-01-01' AS DATE) AND d < CAST('1986-01-01' AS DATE);

SELECT * FROM PARQUET_SCAN('data/parquet-testing/date.parquet') WHERE d >= CAST('1990-01-01' AS DATE);

SELECT COUNT(*) FROM PARQUET_SCAN('data/parquet-testing/date.parquet') WHERE d = CAST('1970-01-01' AS DATE);

SELECT COUNT(*) FROM PARQUET_SCAN('data/parquet-testing/date.parquet') WHERE d > CAST('1970-01-01' AS DATE);

SELECT COUNT(*) FROM PARQUET_SCAN('data/parquet-testing/date.parquet') WHERE d >= CAST('1982-01-01' AS DATE) AND d < CAST('1985-01-01' AS DATE);

SELECT COUNT(*) FROM PARQUET_SCAN('data/parquet-testing/date.parquet') WHERE d < CAST('1970-01-01' AS DATE);

SELECT COUNT(*) FROM PARQUET_SCAN('data/parquet-testing/date.parquet') WHERE d BETWEEN CAST('1975-01-01' AS DATE) AND CAST('1976-01-01' AS DATE);

SELECT COUNT(*) FROM PARQUET_SCAN('data/parquet-testing/date.parquet') WHERE d >= CAST('1975-01-01' AS DATE) AND d < CAST('1976-01-01' AS DATE);

SELECT COUNT(*) FROM PARQUET_SCAN('data/parquet-testing/date.parquet') WHERE d < CAST('1975-01-01' AS DATE) AND d > CAST('1976-01-01' AS DATE);

SELECT COUNT(*) FROM PARQUET_SCAN('data/parquet-testing/date.parquet') WHERE d < CAST('1975-01-01' AS DATE) OR d > CAST('1976-01-01' AS DATE);

SELECT COUNT(*) FROM PARQUET_SCAN('data/parquet-testing/date.parquet') WHERE d < CAST('1975-01-01' AS DATE) OR d > CAST('1976-01-01' AS DATE);

SELECT COUNT(*) FROM PARQUET_SCAN('data/parquet-testing/date.parquet') WHERE d < CAST('1975-01-01' AS DATE) OR d >= CAST('1976-01-01' AS DATE);

SELECT COUNT(*) FROM PARQUET_SCAN('data/parquet-testing/date.parquet') WHERE d IS NULL;

SET force_download = TRUE;

SET enable_external_file_cache = FALSE;

EXPLAIN analyze SELECT id, first_name, last_name, email FROM PARQUET_SCAN('https://raw.githubusercontent.com/duckdb/duckdb/main/data/parquet-testing/userdata1.parquet');

SELECT COUNT(*) FROM PARQUET_SCAN('https://raw.githubusercontent.com/duckdb/duckdb/main/data/parquet-testing/userdata1.parquet');

SET force_download = FALSE;

EXPLAIN analyze SELECT id, first_name, last_name, email FROM PARQUET_SCAN('https://raw.githubusercontent.com/duckdb/duckdb/main/data/parquet-testing/userdata1.parquet');

SELECT COUNT(*) FROM PARQUET_SCAN('https://raw.githubusercontent.com/duckdb/duckdb/main/data/parquet-testing/userdata1.parquet');

SET force_download = TRUE;

SET threads = 1;

CREATE TABLE user_info AS SELECT * FROM PARQUET_SCAN('https://raw.githubusercontent.com/duckdb/duckdb/main/data/parquet-testing/userdata1.parquet') UNION ALL SELECT * FROM PARQUET_SCAN('https://raw.githubusercontent.com/duckdb/duckdb/main/data/parquet-testing/userdata1.parquet') UNION ALL SELECT * FROM PARQUET_SCAN('https://raw.githubusercontent.com/duckdb/duckdb/main/data/parquet-testing/userdata1.parquet') UNION ALL SELECT * FROM PARQUET_SCAN('https://raw.githubusercontent.com/duckdb/duckdb/main/data/parquet-testing/userdata1.parquet') UNION ALL SELECT * FROM PARQUET_SCAN('https://raw.githubusercontent.com/duckdb/duckdb/main/data/parquet-testing/userdata1.parquet') UNION ALL SELECT * FROM PARQUET_SCAN('https://raw.githubusercontent.com/duckdb/duckdb/main/data/parquet-testing/userdata1.parquet') UNION ALL SELECT * FROM PARQUET_SCAN('https://raw.githubusercontent.com/duckdb/duckdb/main/data/parquet-testing/userdata1.parquet') UNION ALL SELECT * FROM PARQUET_SCAN('https://raw.githubusercontent.com/duckdb/duckdb/main/data/parquet-testing/userdata1.parquet') UNION ALL SELECT * FROM PARQUET_SCAN('https://raw.githubusercontent.com/duckdb/duckdb/main/data/parquet-testing/userdata1.parquet');

COPY (SELECT * FROM user_info) TO 's3://test-bucket/row-user-data.parquet' WITH (FORMAT PARQUET, ROW_GROUP_SIZE 4096);

COPY (SELECT * FROM user_info) TO 's3://test-bucket/row-user-data.parquet' WITH (FORMAT PARQUET, ROW_GROUP_SIZE 4096);

PRAGMA threads = 10;

PRAGMA verify_parallelism;

EXPLAIN analyze SELECT id, first_name, last_name, email FROM PARQUET_SCAN('s3://test-bucket/row-user-data.parquet');

SELECT COUNT(*) FROM PARQUET_SCAN('s3://test-bucket/row-user-data.parquet');

SELECT COUNT(*) FROM PARQUET_SCAN('s3://test-bucket/row-user-data_1.parquet');

SET force_download = FALSE;

SELECT COUNT(*) FROM PARQUET_SCAN('s3://test-bucket/row-user-data.parquet');

EXPLAIN analyze SELECT id, first_name, last_name, email FROM PARQUET_SCAN('s3://test-bucket/row-user-data.parquet');

SET force_download = TRUE;

SELECT COUNT(*) FROM (SELECT * FROM PARQUET_SCAN('s3://test-bucket/row-user-data.parquet') UNION ALL SELECT * FROM PARQUET_SCAN('s3://test-bucket/row-user-data_1.parquet')) AS t;

EXPLAIN analyze SELECT id, first_name, last_name, email FROM PARQUET_SCAN('s3://test-bucket/row-user-data.parquet') union all select id, first_name, last_name, email from PARQUET_SCAN('s3://test-bucket/row-user-data_1.parquet');

SET force_download = FALSE;

SELECT COUNT(*) FROM (SELECT * FROM PARQUET_SCAN('s3://test-bucket/row-user-data.parquet') UNION ALL SELECT * FROM PARQUET_SCAN('s3://test-bucket/row-user-data_1.parquet')) AS t;

EXPLAIN analyze SELECT id, first_name, last_name, email FROM PARQUET_SCAN('s3://test-bucket/row-user-data.parquet') union all select id, first_name, last_name, email from PARQUET_SCAN('s3://test-bucket/row-user-data_1.parquet');

PRAGMA enable_verification;

SELECT * FROM PARQUET_SCAN('data/parquet-testing/lineitem-top10000.gzip.parquet');

SELECT * FROM PARQUET_SCAN('data/parquet-testing/map.parquet') AS sq LIMIT 3;

SELECT * FROM PARQUET_SCAN('data/parquet-testing/arrow/nested_lists.snappy.parquet');

SELECT UNNEST(a) FROM PARQUET_SCAN('data/parquet-testing/arrow/nested_lists.snappy.parquet');

SELECT * FROM PARQUET_SCAN('data/parquet-testing/arrow/list_columns.parquet');

SELECT id, url FROM PARQUET_SCAN('data/parquet-testing/apkwan.parquet') LIMIT 10;

SELECT * FROM (SELECT id, UNNEST(url) AS u FROM PARQUET_SCAN('data/parquet-testing/apkwan.parquet')) AS sq WHERE NOT u IS NULL LIMIT 10;

SELECT id, authors FROM PARQUET_SCAN('data/parquet-testing/apkwan.parquet') LIMIT 10;

SELECT id, UNNEST(authors) FROM PARQUET_SCAN('data/parquet-testing/apkwan.parquet') LIMIT 20;

SELECT id, STRUCT_EXTRACT(UNNEST(authors), 'name'), STRUCT_EXTRACT(UNNEST(authors), 'id') FROM PARQUET_SCAN('data/parquet-testing/apkwan.parquet') LIMIT 20;

PRAGMA enable_verification;

SELECT COUNT(col1) FROM PARQUET_SCAN('data/parquet-testing/bug687_nulls.parquet');

SELECT * FROM PARQUET_SCAN('https://this-host-does-not-exist-for-sure/test.parquet');

SELECT * FROM PARQUET_SCAN('https://duckdb.org/test.parquet');

SELECT * FROM PARQUET_SCAN('https://duckdb.org');

SELECT * FROM PARQUET_SCAN('https://duckdb.org/');

SELECT id, first_name, last_name, email FROM PARQUET_SCAN('https://raw.githubusercontent.com/duckdb/duckdb/main/data/parquet-testing/userdata1.parquet') LIMIT 10;

SELECT id, first_name, last_name, email FROM PARQUET_SCAN('https://github.com/duckdb/duckdb/blob/main/data/parquet-testing/userdata1.parquet?raw=true') LIMIT 10;

SELECT id, first_name, last_name, email FROM PARQUET_SCAN('https://github.com:443/duckdb/duckdb/blob/main/data/parquet-testing/userdata1.parquet?raw=true') LIMIT 10;

SELECT id, first_name, last_name, email FROM PARQUET_SCAN('https://github.com/duckdb/duckdb-data/releases/download/v1.0/us+er+da+ta.parquet') LIMIT 1;

SELECT id, first_name, last_name, email FROM PARQUET_SCAN('https://github.com/duckdb/duckdb-data/releases/download/v1.0/us%2Ber%2Bda%2Bta.parquet') LIMIT 1;

SELECT COUNT(backlink_count) FROM PARQUET_SCAN('https://raw.githubusercontent.com/duckdb/duckdb/main/data/parquet-testing/bug1554.parquet') WHERE http_status_code = 200;

SELECT http_status_code, COUNT(backlink_count) FROM PARQUET_SCAN('https://raw.githubusercontent.com/duckdb/duckdb/main/data/parquet-testing/bug1554.parquet') GROUP BY http_status_code ORDER BY http_status_code;

SELECT has_image_link FROM PARQUET_SCAN('https://raw.githubusercontent.com/duckdb/duckdb/main/data/parquet-testing/bug1588.parquet') WHERE has_image_link = 1;

SELECT backlink_count FROM PARQUET_SCAN('https://raw.githubusercontent.com/duckdb/duckdb/main/data/parquet-testing/bug1589.parquet') LIMIT 1;

SELECT * FROM PARQUET_SCAN('https://raw.githubusercontent.com/duckdb/duckdb/main/data/parquet-testing/bug1589.parquet');

SELECT "inner"['str_field'] FROM PARQUET_SCAN('https://raw.githubusercontent.com/duckdb/duckdb/main/data/parquet-testing/bug1618_struct_strings.parquet');

SELECT "inner"['f64_field'] FROM PARQUET_SCAN('https://raw.githubusercontent.com/duckdb/duckdb/main/data/parquet-testing/bug1618_struct_strings.parquet');

SELECT "inner" FROM PARQUET_SCAN('https://raw.githubusercontent.com/duckdb/duckdb/main/data/parquet-testing/bug1618_struct_strings.parquet');

SELECT "inner"['f64_field'] FROM PARQUET_SCAN('https://raw.githubusercontent.com/duckdb/duckdb/main/data/parquet-testing/struct.parquet');

SELECT * FROM PARQUET_SCAN('https://raw.githubusercontent.com/duckdb/duckdb/main/data/parquet-testing/bug2267.parquet');

SELECT assignedLicenses[1] FROM PARQUET_SCAN('https://raw.githubusercontent.com/duckdb/duckdb/main/data/parquet-testing/bug2267.parquet');

SELECT * FROM PARQUET_SCAN(['https://raw.githubusercontent.com/duckdb/duckdb/main/data/parquet-testing/glob/t1.parquet', 'https://raw.githubusercontent.com/duckdb/duckdb/main/data/parquet-testing/glob/t2.parquet']);

SELECT * FROM PARQUET_SCAN('https://raw.githubusercontent.com/duckdb/duckdb/main/data/parquet-testing/arrow/nation.dict-malformed.parquet') LIMIT 2;

PRAGMA enable_verification;

SELECT * FROM PARQUET_SCAN('does_not_exist');

SELECT * FROM PARQUET_SCAN('data/parquet-testing/arrow/alltypes_plain.parquet');

SELECT * FROM "data/parquet-testing/arrow/alltypes_plain.parquet";

SELECT tbl.* FROM "data/parquet-testing/arrow/alltypes_plain.parquet" AS tbl;

SELECT tbl.a FROM "data/parquet-testing/arrow/alltypes_plain.parquet" AS tbl(a);

SELECT * FROM PARQUET_SCAN('data/parquet-testing/unsigned.parquet');

SELECT * FROM PARQUET_SCAN('data/parquet-testing/arrow/alltypes_plain.snappy.parquet');

SELECT * FROM PARQUET_SCAN('data/parquet-testing/arrow/alltypes_dictionary.parquet');

SELECT * FROM PARQUET_SCAN('data/parquet-testing/data-types.parquet');

SELECT COUNT(*) FROM PARQUET_SCAN('data/parquet-testing/userdata1.parquet');

CREATE VIEW userdata1 AS SELECT * FROM PARQUET_SCAN('data/parquet-testing/userdata1.parquet');

SELECT COUNT(*) FROM userdata1;

SELECT COUNT(registration_dttm), COUNT(id), COUNT(first_name), COUNT(last_name), COUNT(email), COUNT(gender), COUNT(ip_address), COUNT(cc), COUNT(country), COUNT(birthdate), COUNT(salary), COUNT(title), COUNT(comments) FROM userdata1;

SELECT MIN(registration_dttm), MAX(registration_dttm) FROM userdata1;

SELECT MIN(id), MAX(id) FROM userdata1;

SELECT FIRST(id) OVER w, LAST(id) OVER w FROM userdata1 WINDOW w AS (ORDER BY id RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) LIMIT 1;

SELECT MIN(first_name), MAX(first_name) FROM userdata1;

SELECT FIRST(first_name) OVER w, LAST(first_name) OVER w FROM userdata1 WINDOW w AS (ORDER BY id RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) LIMIT 1;

SELECT MIN(last_name), MAX(last_name) FROM userdata1;

SELECT FIRST(last_name) OVER w, LAST(last_name) OVER w FROM userdata1 WINDOW w AS (ORDER BY id RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) LIMIT 1;

SELECT MIN(email), MAX(email) FROM userdata1;

SELECT FIRST(email) OVER w, LAST(email) OVER w FROM userdata1 WINDOW w AS (ORDER BY id RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) LIMIT 1;

SELECT MIN(gender), MAX(gender) FROM userdata1;

SELECT FIRST(gender) OVER w, LAST(gender) OVER w FROM userdata1 WINDOW w AS (ORDER BY id RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) LIMIT 1;

SELECT MIN(ip_address), MAX(ip_address) FROM userdata1;

SELECT FIRST(ip_address) OVER w, LAST(ip_address) OVER w FROM userdata1 WINDOW w AS (ORDER BY id RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) LIMIT 1;

SELECT MIN(cc), MAX(cc) FROM userdata1;

SELECT FIRST(cc) OVER w, LAST(cc) OVER w FROM userdata1 WINDOW w AS (ORDER BY id RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) LIMIT 1;

SELECT MIN(country), MAX(country) FROM userdata1;

SELECT FIRST(country) OVER w, LAST(country) OVER w FROM userdata1 WINDOW w AS (ORDER BY id RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) LIMIT 1;

SELECT MIN(birthdate), MAX(birthdate) FROM userdata1;

SELECT FIRST(birthdate) OVER w, LAST(birthdate) OVER w FROM userdata1 WINDOW w AS (ORDER BY id RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) LIMIT 1;

SELECT MIN(salary), MAX(salary) FROM userdata1;

SELECT FIRST(salary) OVER w, LAST(salary) OVER w FROM userdata1 WINDOW w AS (ORDER BY id RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) LIMIT 1;

SELECT MIN(title), MAX(title) FROM userdata1;

SELECT FIRST(title) OVER w, LAST(title) OVER w FROM userdata1 WINDOW w AS (ORDER BY id RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) LIMIT 1;

SELECT MIN(comments), MAX(comments) FROM userdata1;

SELECT FIRST(comments) OVER w, LAST(comments) OVER w FROM userdata1 WINDOW w AS (ORDER BY id RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) LIMIT 1;

SELECT * FROM PARQUET_SCAN('data/parquet-testing/broken-arrow.parquet');

PRAGMA explain_output = PHYSICAL_ONLY;

EXPLAIN select * from parquet_scan('data/parquet-testing/userdata1.parquet') where false;

EXPLAIN select * from parquet_scan('data/parquet-testing/userdata1.parquet') where id is null;

EXPLAIN select * from parquet_scan('data/parquet-testing/userdata1.parquet') where id < 1;

EXPLAIN select * from parquet_scan('data/parquet-testing/userdata1.parquet') where id > 1000;

EXPLAIN select * from parquet_scan('data/parquet-testing/userdata1.parquet') where salary < 12380;

EXPLAIN select * from parquet_scan('data/parquet-testing/timestamp.parquet') where time < '2020-10-04';

EXPLAIN select * from parquet_scan('data/parquet-testing/timestamp.parquet') where time > '2020-10-06';

EXPLAIN select * from parquet_scan('data/parquet-testing/timestamp-ms.parquet') where time < '2020-10-04';

EXPLAIN select * from parquet_scan('data/parquet-testing/timestamp-ms.parquet') where time > '2020-10-06';

EXPLAIN select * from parquet_scan('data/parquet-testing/data-types.parquet') where timestampval < '2019-11-25';

EXPLAIN select * from parquet_scan('data/parquet-testing/data-types.parquet') where timestampval > '2019-11-27';

EXPLAIN select time from parquet_scan('data/parquet-testing/timestamp*.parquet') where time > '2020-10-06';

SET parquet_metadata_cache = TRUE;
mode AS skip;

EXPLAIN select time from parquet_scan('data/parquet-testing/timestamp*.parquet') where time > '2020-10-06';

SELECT time FROM PARQUET_SCAN('data/parquet-testing/timestamp*.parquet') WHERE time > '2020-10-06';

EXPLAIN select time from parquet_scan('data/parquet-testing/timestamp*.parquet') where time > '2020-10-06';

PRAGMA disable_object_cache;

EXPLAIN select time from parquet_scan('data/parquet-testing/timestamp*.parquet') where time > '2020-10-06';

CREATE TABLE yellow_cab AS SELECT * FROM "https://github.com/duckdb/duckdb-data/releases/download/v1.0/yellowcab.parquet";

PRAGMA enable_verification;

SELECT MIN(CAST(VendorID AS TEXT)), MAX(CAST(VendorID AS TEXT)), MIN(CAST(tpep_pickup_datetime AS TEXT)), MAX(CAST(tpep_pickup_datetime AS TEXT)), MIN(CAST(tpep_dropoff_datetime AS TEXT)), MAX(CAST(tpep_dropoff_datetime AS TEXT)), MIN(CAST(passenger_count AS TEXT)), MAX(CAST(passenger_count AS TEXT)), MIN(CAST(trip_distance AS TEXT)), MAX(CAST(trip_distance AS TEXT)), MIN(CAST(pickup_longitude AS TEXT)), MAX(CAST(pickup_longitude AS TEXT)), MIN(CAST(pickup_latitude AS TEXT)), MAX(CAST(pickup_latitude AS TEXT)), MIN(CAST(RatecodeID AS TEXT)), MAX(CAST(RatecodeID AS TEXT)), MIN(CAST(store_and_fwd_flag AS TEXT)), MAX(CAST(store_and_fwd_flag AS TEXT)), MIN(CAST(dropoff_longitude AS TEXT)), MAX(CAST(dropoff_longitude AS TEXT)), MIN(CAST(dropoff_latitude AS TEXT)), MAX(CAST(dropoff_latitude AS TEXT)), MIN(CAST(payment_type AS TEXT)), MAX(CAST(payment_type AS TEXT)), MIN(CAST(fare_amount AS TEXT)), MAX(CAST(fare_amount AS TEXT)), MIN(CAST(extra AS TEXT)), MAX(CAST(extra AS TEXT)), MIN(CAST(mta_tax AS TEXT)), MAX(CAST(mta_tax AS TEXT)), MIN(CAST(tip_amount AS TEXT)), MAX(CAST(tip_amount AS TEXT)), MIN(CAST(tolls_amount AS TEXT)), MAX(CAST(tolls_amount AS TEXT)), MIN(CAST(improvement_surcharge AS TEXT)), MAX(CAST(improvement_surcharge AS TEXT)), MIN(CAST(total_amount AS TEXT)), MAX(CAST(total_amount AS TEXT)) FROM yellow_cab;

COPY yellow_cab TO '__TEST_DIR__/yellowcab.parquet' WITH (FORMAT PARQUET);

SELECT * FROM yellow_cab;

SELECT * FROM "__TEST_DIR__/yellowcab.parquet";

PRAGMA enable_verification;

SELECT timestamp FROM "data/parquet-testing/issue_5533_timestamp_ms_stats.parquet" ORDER BY 1;

SELECT timestamp FROM "data/parquet-testing/issue_5533_timestamp_ms_stats.parquet" WHERE timestamp >= '2022-11-27 00:00:00';

PRAGMA enable_verification;

SELECT * FROM "data/parquet-testing/timetz_4byte_stats.parquet" ORDER BY 1;

PRAGMA enable_verification;

SELECT TYPEOF(TimeRecStart) FROM "data/parquet-testing/tz.parquet" LIMIT 1;

SET timezone = 'UTC';

SELECT TimeRecStart FROM "data/parquet-testing/tz.parquet";

CALL dbgen(sf=1, suffix='_original');

CALL dbgen(sf=0);

SET preserve_insertion_order=false
foreach tpch_tbl orders customer lineitem nation part partsupp region supplier;

SET preserve_insertion_order=false
foreach tpch_tbl orders customer lineitem nation part partsupp region supplier;

SET preserve_insertion_order=false
foreach tpch_tbl orders customer lineitem nation part partsupp region supplier;

SET preserve_insertion_order=false
foreach tpch_tbl orders customer lineitem nation part partsupp region supplier;

SET preserve_insertion_order=false
foreach tpch_tbl orders customer lineitem nation part partsupp region supplier;

CREATE SCHEMA tpch;

CALL dbgen(sf=0.01, schema='tpch');

COPY (SELECT CAST(l_orderkey AS UBIGINT) AS l_orderkey, CAST(l_partkey AS BIGINT) AS l_partkey, CAST(l_suppkey AS SMALLINT) AS l_suppkey, CAST(l_linenumber AS UINTEGER), CAST(l_quantity AS SMALLINT) AS l_quantity, CAST(l_extendedprice AS DECIMAL(18, 4)) AS l_extendedprice, CAST(l_discount AS DECIMAL(8, 3)) AS l_discount, CAST(l_tax AS DECIMAL(38, 4)) AS l_tax, l_returnflag, l_linestatus, CAST(l_shipdate AS TIMESTAMP) AS l_shipdate, CAST(l_commitdate AS TIMESTAMP) AS l_commitdate, CAST(l_receiptdate AS TEXT) AS l_receiptdate, l_shipinstruct, l_shipmode, l_comment FROM tpch.lineitem) TO '__TEST_DIR__/lineitem_different_types.parquet' WITH (FORMAT PARQUET);

CREATE TABLE lineitem AS SELECT * FROM tpch.lineitem LIMIT 0;

COPY lineitem FROM '__TEST_DIR__/lineitem_different_types.parquet';

PRAGMA TPCH(1);

PRAGMA TPCH(6);

CREATE SCHEMA tpch;

CALL dbgen(sf=0.01, schema='tpch');

COPY (SELECT l_shipdate, l_discount, l_linenumber, l_tax, l_extendedprice, l_shipinstruct, l_commitdate, l_linestatus, l_returnflag, l_quantity, l_orderkey, l_shipmode FROM tpch.lineitem LIMIT 30000) TO '__TEST_DIR__/schema_evolution_lineitem1.parquet' WITH (FORMAT PARQUET);

COPY (SELECT l_comment, l_shipmode, CAST(l_commitdate AS TIMESTAMP) AS l_commitdate, l_shipinstruct, CAST(l_quantity AS SMALLINT) AS l_quantity, CAST(l_suppkey AS BIGINT) AS l_suppkey, l_linenumber, l_linestatus, CAST(l_receiptdate AS TEXT) AS l_receiptdate, l_returnflag, CAST(l_extendedprice AS DECIMAL(18, 4)) AS l_extendedprice, CAST(l_partkey AS BIGINT) AS l_partkey, CAST(l_orderkey AS INT128) AS l_orderkey, CAST(l_discount AS DECIMAL(8, 3)) AS l_discount, CAST(l_shipdate AS TIMESTAMP) AS l_shipdate, l_tax FROM tpch.lineitem OFFSET 30000) TO '__TEST_DIR__/schema_evolution_lineitem2.parquet' WITH (FORMAT PARQUET);

CREATE VIEW lineitem AS SELECT * FROM "__TEST_DIR__/schema_evolution_lineitem*.parquet";

PRAGMA TPCH(1);

PRAGMA TPCH(6);

SELECT * FROM READ_PARQUET('data/parquet-testing/hive-partitioning/union_by_name/*/*.parquet', hive_partitioning = 1);

SELECT i, j, k, x FROM READ_PARQUET('data/parquet-testing/hive-partitioning/union_by_name/*/*.parquet', hive_partitioning = 0, union_by_name = 1) ORDER BY j, x;

SELECT i, j, k, x FROM READ_PARQUET('data/parquet-testing/hive-partitioning/union_by_name/*/*.parquet', hive_partitioning = 1, union_by_name = 1) ORDER BY j;

SELECT i, j, k, x FROM READ_PARQUET('data/parquet-testing/hive-partitioning/union_by_name/*/*.parquet', hive_partitioning = 1, union_by_name = 1) WHERE x = 2 ORDER BY j;

CREATE TABLE selected_values AS SELECT 2 AS x;

SELECT i, j, k, x FROM READ_PARQUET('data/parquet-testing/hive-partitioning/union_by_name/*/*.parquet', hive_partitioning = 1, union_by_name = 1) WHERE x = (SELECT MAX(x) FROM selected_values) ORDER BY j;

SELECT i, j, k, x FROM READ_PARQUET('data/parquet-testing/hive-partitioning/union_by_name/*/f2.parquet', hive_partitioning = 1, union_by_name = 1) ORDER BY j;

SELECT i, j, k, x FROM READ_PARQUET('data/parquet-testing/hive-partitioning/union_by_name/*/f2.parquet', hive_partitioning = 1, union_by_name = 1) WHERE k IS NULL ORDER BY j;

SELECT i, j, k, x FROM READ_PARQUET('data/parquet-testing/hive-partitioning/union_by_name/*/f2.parquet', hive_partitioning = 1, union_by_name = 1) WHERE k IS NOT DISTINCT FROM NULL ORDER BY j;

SELECT i, j, k, x FROM READ_PARQUET('data/parquet-testing/hive-partitioning/union_by_name/*/f2.parquet', hive_partitioning = 1, union_by_name = 1) WHERE k > 0 ORDER BY j;

SELECT i, j, k, x, filename.replace('\', '/').split('/')[-2] FROM READ_PARQUET('data/parquet-testing/hive-partitioning/union_by_name/*/f2.parquet', hive_partitioning = 1, union_by_name = 1, filename = 1) WHERE k > 0 ORDER BY j;

SELECT i, j, k, x, filename.replace('\', '/').split('/')[-2] FROM READ_PARQUET('data/parquet-testing/hive-partitioning/union_by_name/*/f2.parquet', hive_partitioning = 1, union_by_name = 1, filename = 1) WHERE filename.replace('\', '/') >= 'data/parquet-testing/hive-partitioning/union_by_name/x=2' ORDER BY j;

SELECT i, j, k, x, filename.replace('\', '/').split('/')[-2] FROM READ_PARQUET('data/parquet-testing/hive-partitioning/union_by_name/*/f2.parquet', hive_partitioning = 1, union_by_name = 1, filename = 1) WHERE filename.replace('\', '/') < 'data/parquet-testing/hive-partitioning/union_by_name/x=2' ORDER BY j;

SELECT i, j, k, x, filename.replace('\', '/').split('/')[-2] FROM READ_PARQUET('data/parquet-testing/hive-partitioning/union_by_name/*/f2.parquet', hive_partitioning = 1, union_by_name = 1, filename = 1) WHERE filename.replace('\', '/') < 'data/parquet-testing/hive-partitioning/union_by_name/x=1' ORDER BY j;

COPY (SELECT 42 AS i, 84 AS j) TO '__TEST_DIR__/union_by_name_pushdown1.parquet';

COPY (SELECT 128 AS j, 33 AS k) TO '__TEST_DIR__/union_by_name_pushdown2.parquet';

SELECT * FROM READ_PARQUET(['__TEST_DIR__/union_by_name_pushdown1.parquet', '__TEST_DIR__/union_by_name_pushdown2.parquet'], union_by_name = TRUE);

SELECT k FROM READ_PARQUET(['__TEST_DIR__/union_by_name_pushdown1.parquet', '__TEST_DIR__/union_by_name_pushdown2.parquet'], union_by_name = TRUE);

SELECT i FROM READ_PARQUET(['__TEST_DIR__/union_by_name_pushdown1.parquet', '__TEST_DIR__/union_by_name_pushdown2.parquet'], union_by_name = TRUE);

SELECT * FROM READ_PARQUET(['__TEST_DIR__/union_by_name_pushdown1.parquet', '__TEST_DIR__/union_by_name_pushdown2.parquet'], union_by_name = TRUE) WHERE k > 0;

SELECT * FROM READ_PARQUET(['__TEST_DIR__/union_by_name_pushdown1.parquet', '__TEST_DIR__/union_by_name_pushdown2.parquet'], union_by_name = TRUE) WHERE k > 0 OR k IS NULL;

SELECT * FROM READ_PARQUET(['__TEST_DIR__/union_by_name_pushdown1.parquet', '__TEST_DIR__/union_by_name_pushdown2.parquet'], union_by_name = TRUE) WHERE i > 0;

CREATE TABLE integers AS SELECT i, i // 5 AS j FROM RANGE(0, 1000000) AS t(i);

COPY integers TO '__TEST_DIR__/batched_integers.parquet';

CREATE TABLE integers_copied AS SELECT * FROM "__TEST_DIR__/batched_integers.parquet";

SELECT SUM(i), SUM(j), COUNT(*), COUNT(i), COUNT(j) FROM integers_copied;

SELECT * FROM integers_copied ORDER BY i LIMIT 5;

SELECT * FROM integers_copied ORDER BY i LIMIT 5 OFFSET 99997;

SELECT * FROM integers_copied QUALIFY i <= LAG(i) OVER ();

CREATE VIEW v1 AS SELECT * FROM integers WHERE (i % 2 = 0 AND i < 300000) OR (i BETWEEN 500000 AND 700000);

COPY v1 TO '__TEST_DIR__/batched_integers_filters.parquet';

CREATE TABLE integers_filtered AS FROM '__TEST_DIR__/batched_integers_filters.parquet'
foreach table v1 integers_filtered;

CREATE TABLE integers_filtered AS FROM '__TEST_DIR__/batched_integers_filters.parquet'
foreach table v1 integers_filtered;

CREATE TABLE integers_filtered AS FROM '__TEST_DIR__/batched_integers_filters.parquet'
foreach table v1 integers_filtered;

CREATE TABLE integers_filtered AS FROM '__TEST_DIR__/batched_integers_filters.parquet'
foreach table v1 integers_filtered;

CREATE TABLE integers_filtered AS FROM '__TEST_DIR__/batched_integers_filters.parquet'
foreach table v1 integers_filtered;

SELECT SETSEED(0.72);

COPY (SELECT CAST(UUID() AS TEXT) AS varchar, UUID() AS uuid FROM RANGE(0, 10000000) AS t(i)) TO '__TEST_DIR__/random_uuids.parquet';

SET memory_limit = '650MB';

COPY "__TEST_DIR__/random_uuids.parquet" TO '__TEST_DIR__/random_uuids_copy.parquet';

SET memory_limit = '2GB';

SELECT *, ROW_NUMBER() OVER () AS rownum FROM "__TEST_DIR__/random_uuids.parquet" EXCEPT SELECT *, ROW_NUMBER() OVER () AS rownum FROM "__TEST_DIR__/random_uuids_copy.parquet";

COPY (SELECT * FROM RANGE(0, 100000) AS tbl(i)) TO '__TEST_DIR__/mem_usage_mix_batches_small.parquet' WITH (ROW_GROUP_SIZE 5000);

COPY (SELECT * FROM RANGE(100000, 400000) AS tbl(i)) TO '__TEST_DIR__/mem_usage_mix_batches_large.parquet' WITH (ROW_GROUP_SIZE 200000);

COPY (SELECT * FROM RANGE(400000, 700000) AS tbl(i)) TO '__TEST_DIR__/mem_usage_mix_batches_odd.parquet' WITH (ROW_GROUP_SIZE 999);

COPY (SELECT * FROM RANGE(700000, 1000000) AS tbl(i)) TO '__TEST_DIR__/mem_usage_mix_batches_odd_again.parquet' WITH (ROW_GROUP_SIZE 99979);

CREATE VIEW v1 AS SELECT * FROM PARQUET_SCAN(['__TEST_DIR__/mem_usage_mix_batches_small.parquet', '__TEST_DIR__/mem_usage_mix_batches_large.parquet', '__TEST_DIR__/mem_usage_mix_batches_odd.parquet', '__TEST_DIR__/mem_usage_mix_batches_odd_again.parquet']);

SET memory_limit = '500MB';

COPY v1 TO '__TEST_DIR__/mem_usage_mix_result.parquet';

SET memory_limit = '2GB';

SELECT *, ROW_NUMBER() OVER () AS rownum FROM v1 EXCEPT SELECT *, ROW_NUMBER() OVER () AS rownum FROM "__TEST_DIR__/mem_usage_mix_result.parquet";

SELECT SETSEED(0.72);

COPY (SELECT CAST(UUID() AS TEXT) AS varchar, UUID() AS uuid FROM RANGE(0, 10000000) AS t(i)) TO '__TEST_DIR__/random_uuids.parquet';

SET memory_limit = '750MB';

CALL dbgen(sf=1);

COPY lineitem TO '__TEST_DIR__/lineitem_memory_usage.parquet' WITH (restart);

SET memory_limit = '500MB';

COPY "__TEST_DIR__/lineitem_memory_usage.parquet" TO '__TEST_DIR__/lineitem_memory_usage_copy.parquet';

SET memory_limit = '2GB';

SELECT *, ROW_NUMBER() OVER () AS rownum FROM "__TEST_DIR__/lineitem_memory_usage.parquet" EXCEPT SELECT *, ROW_NUMBER() OVER () AS rownum FROM "__TEST_DIR__/lineitem_memory_usage_copy.parquet";

CREATE TABLE integers AS SELECT i, i // 5 AS j FROM RANGE(0, 1000000) AS t(i);

CREATE TABLE integers AS SELECT i, i // 5 AS j FROM RANGE(0, 1000000) AS t(i);

SELECT row_group_num_rows FROM PARQUET_METADATA('__TEST_DIR__/row_group_size.parquet');

SELECT row_group_num_rows FROM PARQUET_METADATA('__TEST_DIR__/row_group_size.parquet');

SELECT row_group_num_rows FROM PARQUET_METADATA('__TEST_DIR__/row_group_size.parquet');

COPY (SELECT * FROM RANGE(0, 100000) AS tbl(i)) TO '__TEST_DIR__/mix_batches_small.parquet' WITH (ROW_GROUP_SIZE 5000);

COPY (SELECT * FROM RANGE(100000, 400000) AS tbl(i)) TO '__TEST_DIR__/mix_batches_large.parquet' WITH (ROW_GROUP_SIZE 200000);

COPY (SELECT * FROM RANGE(400000, 700000) AS tbl(i)) TO '__TEST_DIR__/mix_batches_odd.parquet' WITH (ROW_GROUP_SIZE 999);

COPY (SELECT * FROM RANGE(700000, 1000000) AS tbl(i)) TO '__TEST_DIR__/mix_batches_odd_again.parquet' WITH (ROW_GROUP_SIZE 99979);

CREATE VIEW v1 AS SELECT * FROM PARQUET_SCAN(['__TEST_DIR__/mix_batches_small.parquet', '__TEST_DIR__/mix_batches_large.parquet', '__TEST_DIR__/mix_batches_odd.parquet', '__TEST_DIR__/mix_batches_odd_again.parquet']);

CREATE VIEW v2 AS SELECT * FROM v1 WHERE (i // 10000) % 2 = 0;

CREATE VIEW v3 AS SELECT * FROM v1 WHERE (i // 10000) % 2 = 0 OR (i > 200000 AND i < 400000) OR (i > 600000 AND i < 800000);

CREATE VIEW v4 AS FROM v1 WHERE i>998 AND i<1000 AND i%2=0
loop i 0 2;

COPY v1 TO '__TEST_DIR__/mixed_batches_v1.parquet';

CREATE TABLE mixed_batches_v1 AS SELECT * FROM "__TEST_DIR__/mixed_batches_v1.parquet";

CREATE TABLE mixed_batches_v1 AS SELECT * FROM "__TEST_DIR__/mixed_batches_v1.parquet";

CREATE TABLE mixed_batches_v1 AS SELECT * FROM "__TEST_DIR__/mixed_batches_v1.parquet";

COPY v2 TO '__TEST_DIR__/mixed_batches_v2.parquet';

CREATE TABLE mixed_batches_v2 AS SELECT * FROM "__TEST_DIR__/mixed_batches_v2.parquet";

CREATE TABLE mixed_batches_v2 AS SELECT * FROM "__TEST_DIR__/mixed_batches_v2.parquet";

CREATE TABLE mixed_batches_v2 AS SELECT * FROM "__TEST_DIR__/mixed_batches_v2.parquet";

COPY v3 TO '__TEST_DIR__/mixed_batches_v3.parquet';

CREATE TABLE mixed_batches_v3 AS SELECT * FROM "__TEST_DIR__/mixed_batches_v3.parquet";

CREATE TABLE mixed_batches_v3 AS SELECT * FROM "__TEST_DIR__/mixed_batches_v3.parquet";

CREATE TABLE mixed_batches_v3 AS SELECT * FROM "__TEST_DIR__/mixed_batches_v3.parquet";

COPY v4 TO '__TEST_DIR__/mixed_batches_v4.parquet';

CREATE TABLE mixed_batches_v4 AS SELECT * FROM "__TEST_DIR__/mixed_batches_v4.parquet";

CREATE TABLE mixed_batches_v4 AS SELECT * FROM "__TEST_DIR__/mixed_batches_v4.parquet";

CREATE TABLE mixed_batches_v4 AS SELECT * FROM "__TEST_DIR__/mixed_batches_v4.parquet";

DROP TABLE mixed_batches_v1;

DROP TABLE mixed_batches_v2;

DROP TABLE mixed_batches_v3;

DROP TABLE mixed_batches_v4;

DROP VIEW IF EXISTS v2;

DROP VIEW IF EXISTS v3;

DROP VIEW IF EXISTS v4;

CREATE OR REPLACE VIEW v1 AS SELECT * FROM "__TEST_DIR__/mix_batches_small.parquet" UNION ALL SELECT * FROM "__TEST_DIR__/mix_batches_large.parquet" UNION ALL SELECT * FROM "__TEST_DIR__/mix_batches_odd.parquet" UNION ALL SELECT * FROM "__TEST_DIR__/mix_batches_odd_again.parquet";

CREATE OR REPLACE VIEW v2 AS SELECT * FROM v1 WHERE (i // 10000) % 2 = 0;

CREATE OR REPLACE VIEW v3 AS SELECT * FROM v1 WHERE (i // 10000) % 2 = 0 OR (i > 200000 AND i < 400000) OR (i > 600000 AND i < 800000);

PRAGMA enable_verification;

COPY (SELECT * FROM (VALUES ('f1', CAST(42 AS INT)), ('f1', CAST(8 AS INT)), ('f1', CAST(NULL AS INT))) AS t(f, i)) TO '__TEST_DIR__/multi_file_filter_f1.parquet';

COPY (SELECT * FROM (VALUES (CAST(42 AS BIGINT), 'f2'), (CAST(124 AS BIGINT), 'f2'), (CAST(NULL AS BIGINT), 'f2')) AS t(i, f)) TO '__TEST_DIR__/multi_file_filter_f2.parquet';

CREATE VIEW integer_file_first AS SELECT * FROM READ_PARQUET(['__TEST_DIR__/multi_file_filter_f1.parquet', '__TEST_DIR__/multi_file_filter_f2.parquet']);

CREATE VIEW bigint_file_first AS SELECT * FROM READ_PARQUET(['__TEST_DIR__/multi_file_filter_f2.parquet', '__TEST_DIR__/multi_file_filter_f1.parquet']);

SELECT f, i FROM integer_file_first WHERE i = '042';

SELECT f, i FROM bigint_file_first WHERE i = '042' ORDER BY ALL;

SELECT f, i FROM integer_file_first WHERE i > 10 ORDER BY ALL;

SELECT f, i FROM bigint_file_first WHERE i > '10' ORDER BY ALL;

SELECT f, i FROM integer_file_first WHERE i IS NULL;

PRAGMA enable_verification;

COPY (SELECT * FROM (VALUES ('f1', 42), ('f1', 8), ('f1', NULL)) AS t(f, i)) TO '__TEST_DIR__/multi_file_filter_f1.parquet';

COPY (SELECT * FROM (VALUES ('042', 'f2'), ('124', 'f2'), (NULL, 'f2')) AS t(i, f)) TO '__TEST_DIR__/multi_file_filter_f2.parquet';

CREATE VIEW integer_file_first AS SELECT * FROM READ_PARQUET(['__TEST_DIR__/multi_file_filter_f1.parquet', '__TEST_DIR__/multi_file_filter_f2.parquet']);

CREATE VIEW string_file_first AS SELECT * FROM READ_PARQUET(['__TEST_DIR__/multi_file_filter_f2.parquet', '__TEST_DIR__/multi_file_filter_f1.parquet']);

SELECT f, i FROM integer_file_first WHERE i = '042';

SELECT f, i FROM string_file_first WHERE i = '042';

SELECT f, i FROM integer_file_first WHERE i > 10 ORDER BY ALL;

SELECT f, i FROM string_file_first WHERE i > '10' ORDER BY ALL;

SELECT f, i FROM integer_file_first WHERE i IS NULL;

COPY (SELECT {'f': f, 'i': i} AS struct_val FROM (VALUES ('f1', CAST(42 AS INT)), ('f1', CAST(8 AS INT)), ('f1', CAST(NULL AS INT))) AS t(f, i)) TO '__TEST_DIR__/multi_file_filter_f1.parquet';

COPY (SELECT {'i': i, 'f2': f} AS struct_val FROM (VALUES (CAST(42 AS BIGINT), 'f2'), (CAST(124 AS BIGINT), 'f2'), (CAST(NULL AS BIGINT), 'f2')) AS t(i, f)) TO '__TEST_DIR__/multi_file_filter_f2.parquet';

CREATE VIEW integer_file_first AS SELECT * FROM READ_PARQUET(['__TEST_DIR__/multi_file_filter_f1.parquet', '__TEST_DIR__/multi_file_filter_f2.parquet']);

CREATE VIEW bigint_file_first AS SELECT * FROM READ_PARQUET(['__TEST_DIR__/multi_file_filter_f2.parquet', '__TEST_DIR__/multi_file_filter_f1.parquet']);

SELECT struct_val.i FROM integer_file_first ORDER BY ALL;

SELECT struct_val.f, struct_val.i FROM integer_file_first WHERE struct_val.i = '042';

SELECT struct_val.i FROM bigint_file_first WHERE struct_val.i = '042' ORDER BY ALL;

SELECT struct_val.f, struct_val.i FROM integer_file_first WHERE struct_val.i > 10 ORDER BY ALL;

SELECT struct_val.i FROM bigint_file_first WHERE struct_val.i > '10' ORDER BY ALL;

SELECT struct_val.f, struct_val.i FROM integer_file_first WHERE struct_val.i IS NULL;

CREATE TABLE list_of_bools AS SELECT LIST(i % 2 = 0) AS l FROM RANGE(0, 1373) AS tbl(i) UNION ALL SELECT [TRUE, FALSE, NULL, FALSE, TRUE] UNION ALL SELECT [] UNION ALL SELECT NULL UNION ALL SELECT LIST(i % 3 = 0) AS l FROM RANGE(0, 9937) AS tbl(i) UNION ALL SELECT [TRUE, FALSE, NULL, FALSE, TRUE];

SELECT COUNT(*), COUNT(b), SUM(CASE WHEN b THEN 1 ELSE 0 END) FROM (SELECT UNNEST(l) AS b FROM list_of_bools);

COPY list_of_bools TO '__TEST_DIR__/list_of_bools.parquet' WITH (FORMAT PARQUET);

SELECT COUNT(*), COUNT(b), SUM(CASE WHEN b THEN 1 ELSE 0 END) FROM (SELECT UNNEST(l) AS b FROM "__TEST_DIR__/list_of_bools.parquet");

CREATE TABLE many_ints AS SELECT [1, 0, 1] AS l FROM RANGE(0, 1373) UNION ALL SELECT [] UNION ALL SELECT NULL UNION ALL SELECT [1, 0, NULL, 0, 1] UNION ALL SELECT [1, 0, NULL, 1] AS l FROM RANGE(0, 9937) AS tbl(i);

SELECT COUNT(*), COUNT(b), SUM(b) FROM (SELECT UNNEST(l) AS b FROM many_ints);

COPY many_ints TO '__TEST_DIR__/many_ints.parquet' WITH (FORMAT PARQUET);

SELECT COUNT(*), COUNT(b), SUM(b) FROM (SELECT UNNEST(l) AS b FROM "__TEST_DIR__/many_ints.parquet");

CREATE TABLE many_bools AS SELECT [TRUE, FALSE, TRUE] AS l FROM RANGE(0, 1373) UNION ALL SELECT [] UNION ALL SELECT NULL UNION ALL SELECT [TRUE, FALSE, NULL, FALSE, TRUE] UNION ALL SELECT [TRUE, FALSE, NULL, TRUE] AS l FROM RANGE(0, 9937) AS tbl(i);

SELECT COUNT(*), COUNT(b), SUM(CASE WHEN b THEN 1 ELSE 0 END) FROM (SELECT UNNEST(l) AS b FROM many_bools);

COPY many_bools TO '__TEST_DIR__/many_bools.parquet' WITH (FORMAT PARQUET);

SELECT COUNT(*), COUNT(b), SUM(CASE WHEN b THEN 1 ELSE 0 END) FROM (SELECT UNNEST(l) AS b FROM "__TEST_DIR__/many_bools.parquet");

CREATE TABLE large_strings AS SELECT REPEAT('duckduck', 10000 + i) AS i FROM RANGE(0, 4000) AS tbl(i);

SELECT MIN(STRLEN(i)), MAX(STRLEN(i)), AVG(STRLEN(i)) FROM large_strings;

COPY large_strings TO '__TEST_DIR__/largestrings.parquet' WITH (FORMAT PARQUET);

SELECT * FROM PARQUET_METADATA('__TEST_DIR__/largestrings.parquet');

PRAGMA enable_verification;

CREATE TABLE all_types AS SELECT * EXCLUDE (bit, "union") REPLACE (CASE WHEN EXTRACT(MONTH FROM interval) <> 0 THEN INTERVAL '1 month 1 day 12:13:34.123' ELSE interval END AS interval) FROM TEST_ALL_TYPES();

CREATE TABLE all_types AS SELECT * EXCLUDE (bit, "union") REPLACE (CASE WHEN EXTRACT(MONTH FROM interval) <> 0 THEN INTERVAL '1 month 1 day 12:13:34.123' ELSE interval END AS interval) FROM TEST_ALL_TYPES();

SELECT * REPLACE (CAST(hugeint AS DOUBLE) AS hugeint, CAST(uhugeint AS DOUBLE) AS uhugeint, CAST(CAST(time_tz AS TIME) AS TIMETZ) AS time_tz) FROM all_types;

SELECT * FROM "__TEST_DIR__/all_types.parquet";

EXPLAIN select "${type}" from '__TEST_DIR__/all_types.parquet'
WHERE "${type}" IN (127);

EXPLAIN select "VARCHAR" from '__TEST_DIR__/all_types.parquet'
WHERE "VARCHAR" IN ('🦆🦆🦆🦆🦆🦆');

EXPLAIN select "bool" from '__TEST_DIR__/all_types.parquet'
WHERE "bool" IN (true);

PRAGMA enable_verification;

CREATE TABLE bools (b BOOLEAN);

INSERT INTO bools SELECT CASE WHEN i % 2 = 0 THEN NULL ELSE i % 7 = 0 OR i % 3 = 0 END AS b FROM RANGE(0, 10000) AS tbl(i);

SELECT COUNT(*), COUNT(b), BOOL_AND(b), BOOL_OR(b), SUM(CASE WHEN b THEN 1 ELSE 0 END) AS true_count, SUM(CASE WHEN b THEN 0 ELSE 1 END) AS false_count FROM bools;

COPY bools TO '__TEST_DIR__/bools.parquet' WITH (FORMAT 'parquet');

SELECT COUNT(*), COUNT(b), BOOL_AND(b), BOOL_OR(b), SUM(CASE WHEN b THEN 1 ELSE 0 END) AS true_count, SUM(CASE WHEN b THEN 0 ELSE 1 END) AS false_count FROM "__TEST_DIR__/bools.parquet";

SELECT TYPEOF(b) FROM "__TEST_DIR__/bools.parquet" LIMIT 1;

PRAGMA enable_verification;

CREATE TABLE integers AS SELECT * FROM RANGE(0, 100) AS t(i);

COPY integers TO '__TEST_DIR__/compress_level.parquet' WITH (FORMAT 'parquet', COMPRESSION_LEVEL 10);

COPY integers TO '__TEST_DIR__/compress_level.parquet' WITH (FORMAT 'parquet', CODEC ZSTD, COMPRESSION_LEVEL 0);

COPY integers TO '__TEST_DIR__/compress_level.parquet' WITH (FORMAT 'parquet', CODEC ZSTD, COMPRESSION_LEVEL 23);

COPY integers TO '__TEST_DIR__/compress_level.parquet' WITH (FORMAT 'parquet', CODEC ZSTD, COMPRESSION_LEVEL 23);

COPY integers TO '__TEST_DIR__/compress_level.parquet' WITH (FORMAT 'parquet', CODEC ZSTD, COMPRESSION_LEVEL 23);

COPY integers TO '__TEST_DIR__/compress_level.parquet' WITH (FORMAT 'parquet', CODEC ZSTD, COMPRESSION_LEVEL 1);

COPY integers TO '__TEST_DIR__/compress_level2.parquet' WITH (FORMAT 'parquet', CODEC ZSTD, COMPRESSION_LEVEL 22);

SELECT * FROM "__TEST_DIR__/compress_level.parquet";

SELECT * FROM "__TEST_DIR__/compress_level2.parquet";

PRAGMA enable_verification;

CREATE TABLE dates (d DATE);

INSERT INTO dates VALUES (CAST('1992-01-01' AS DATE)), (CAST('1900-01-01' AS DATE)), (NULL), (CAST('2020-09-27' AS DATE));

SELECT * FROM dates;

COPY dates TO '__TEST_DIR__/dates.parquet' WITH (FORMAT 'parquet');

SELECT * FROM "__TEST_DIR__/dates.parquet";

SELECT TYPEOF(d) FROM "__TEST_DIR__/dates.parquet" LIMIT 1;

SELECT * FROM "__TEST_DIR__/dates.parquet" WHERE d = '1992-01-01';

PRAGMA enable_verification;

CREATE TABLE decimals (dec4 DECIMAL(4, 1), dec9 DECIMAL(9, 2), dec18 DECIMAL(18, 3), dec38 DECIMAL(38, 4));

INSERT INTO decimals VALUES (-999.9, -9999999.99, -999999999999999.999, -999999999999999999999999999999999.9999), (NULL, NULL, NULL, NULL), (42, 42, 42, 42), (-42, -42, -42, -42), (0, 0, 0, 0), (999.9, 9999999.99, 999999999999999.999, 999999999999999999999999999999999.9999);

COPY decimals TO '__TEST_DIR__/decimals.parquet';

SELECT * FROM decimals;

SELECT * FROM "__TEST_DIR__/decimals.parquet";

SELECT stats_min, stats_max, stats_min_value, stats_max_value FROM PARQUET_METADATA('__TEST_DIR__/decimals.parquet');

DELETE FROM decimals WHERE dec4 < -42 OR dec4 > 42;

DELETE FROM decimals WHERE dec4 < -42 OR dec4 > 42;

DELETE FROM decimals WHERE dec4 < -42 OR dec4 > 42;

DELETE FROM decimals WHERE dec4 < -42 OR dec4 > 42;

DELETE FROM decimals WHERE dec4 < -42 OR dec4 > 42;

PRAGMA disable_verification;

SELECT STATS(dec4), STATS(dec9), STATS(dec18), STATS(dec38) FROM "__TEST_DIR__/decimals.parquet" LIMIT 1;

PRAGMA enable_verification;

CREATE TYPE mood AS ENUM ('joy', 'ok', 'happy');

CREATE TABLE enums (m mood);

INSERT INTO enums VALUES ('happy'), ('happy'), ('joy'), ('joy'), ('happy'), ('happy'), ('joy'), ('joy'), ('happy'), ('happy'), ('joy'), ('joy'), ('happy'), ('happy'), ('joy'), ('joy'), ('happy'), ('happy'), ('joy'), ('joy'), ('happy'), ('happy'), ('joy'), ('joy'), ('happy'), ('happy'), ('joy'), ('joy'), ('joy');

COPY enums TO '__TEST_DIR__/enums.parquet' WITH (FORMAT PARQUET);

SELECT * FROM "__TEST_DIR__/enums.parquet";

UPDATE enums SET m = NULL WHERE m = 'joy';

COPY enums TO '__TEST_DIR__/enums.parquet' WITH (FORMAT PARQUET);

SELECT * FROM "__TEST_DIR__/enums.parquet";

UPDATE enums SET m = NULL;

COPY enums TO '__TEST_DIR__/enums.parquet' WITH (FORMAT PARQUET);

SELECT * FROM "__TEST_DIR__/enums.parquet";

COPY (SELECT range AS i FROM RANGE(0, 10)) TO '__TEST_DIR__/my.parquet' WITH (FIELD_IDS);

COPY (SELECT range AS i FROM RANGE(0, 10)) TO '__TEST_DIR__/my.parquet' WITH (FIELD_IDS);

COPY (SELECT range AS i FROM RANGE(0, 10)) TO '__TEST_DIR__/my.parquet' WITH (FIELD_IDS);

COPY (SELECT range AS i FROM RANGE(0, 10)) TO '__TEST_DIR__/my.parquet' WITH (FIELD_IDS);

SELECT field_id FROM PARQUET_SCHEMA('__TEST_DIR__/my.parquet') WHERE name = 'i';

SELECT field_id FROM PARQUET_SCHEMA('__TEST_DIR__/my.parquet') WHERE name = 'i';

SELECT field_id FROM PARQUET_SCHEMA('__TEST_DIR__/my.parquet') WHERE name = 'i';

SELECT field_id FROM PARQUET_SCHEMA('__TEST_DIR__/my.parquet') WHERE name = 'i';

SELECT field_id FROM PARQUET_SCHEMA('__TEST_DIR__/my.parquet') WHERE name = 'i';

SELECT field_id FROM PARQUET_SCHEMA('__TEST_DIR__/my.parquet') WHERE name = 'i';

SELECT field_id FROM PARQUET_SCHEMA('__TEST_DIR__/my.parquet') WHERE name = 'i';

SELECT field_id FROM PARQUET_SCHEMA('__TEST_DIR__/my.parquet') WHERE name = 'i';

SELECT field_id FROM PARQUET_SCHEMA('__TEST_DIR__/my.parquet') WHERE name = 'i';

COPY (SELECT range AS i FROM RANGE(0, 10)) TO '__TEST_DIR__/my.parquet' WITH (FIELD_IDS 'oops');

COPY (SELECT range AS i FROM RANGE(0, 10)) TO '__TEST_DIR__/my.parquet' WITH (FIELD_IDS 'oops');

COPY (SELECT range AS i FROM RANGE(0, 10)) TO '__TEST_DIR__/my.parquet' WITH (FIELD_IDS 'oops');

COPY (SELECT range AS i FROM RANGE(0, 10)) TO '__TEST_DIR__/my.parquet' WITH (FIELD_IDS 'oops');

SELECT field_id FROM PARQUET_SCHEMA('__TEST_DIR__/my.parquet') WHERE name = 'i';

SELECT field_id FROM PARQUET_SCHEMA('__TEST_DIR__/my.parquet') WHERE name = 'j';

SELECT field_id FROM PARQUET_SCHEMA('__TEST_DIR__/my.parquet') WHERE name = 'j';

SELECT field_id FROM PARQUET_SCHEMA('__TEST_DIR__/my.parquet') WHERE name = 'i';

SELECT field_id FROM PARQUET_SCHEMA('__TEST_DIR__/my.parquet') WHERE name = 'j';

SELECT field_id FROM PARQUET_SCHEMA('__TEST_DIR__/my.parquet') WHERE name = 'j';

SELECT field_id FROM PARQUET_SCHEMA('__TEST_DIR__/my.parquet') WHERE name = 'i';

SELECT field_id FROM PARQUET_SCHEMA('__TEST_DIR__/my.parquet') WHERE name = 'j';

SELECT field_id FROM PARQUET_SCHEMA('__TEST_DIR__/my.parquet') WHERE name = 'j';

SELECT field_id FROM PARQUET_SCHEMA('__TEST_DIR__/my.parquet') WHERE name = 'j';

SELECT field_id FROM PARQUET_SCHEMA('__TEST_DIR__/my.parquet') WHERE name = 'i';

SELECT field_id FROM PARQUET_SCHEMA('__TEST_DIR__/my.parquet') WHERE name = 'element';

SELECT field_id FROM PARQUET_SCHEMA('__TEST_DIR__/my.parquet') WHERE name = 'element';

SELECT field_id FROM PARQUET_SCHEMA('__TEST_DIR__/my.parquet') WHERE name = 'i';

SELECT field_id FROM PARQUET_SCHEMA('__TEST_DIR__/my.parquet') WHERE name = 'element';

SELECT field_id FROM PARQUET_SCHEMA('__TEST_DIR__/my.parquet') WHERE name = 'element';

SELECT field_id FROM PARQUET_SCHEMA('__TEST_DIR__/my.parquet') WHERE name = 'element';

SELECT field_id FROM PARQUET_SCHEMA('__TEST_DIR__/my.parquet') WHERE name = 'i' AND num_children > 0;

SELECT field_id FROM PARQUET_SCHEMA('__TEST_DIR__/my.parquet') WHERE name = 'f';

SELECT field_id FROM PARQUET_SCHEMA('__TEST_DIR__/my.parquet') WHERE name = 'f';

SELECT field_id FROM PARQUET_SCHEMA('__TEST_DIR__/my.parquet') WHERE name = 'f';

SELECT field_id FROM PARQUET_SCHEMA('__TEST_DIR__/my.parquet') WHERE name = 'i' AND num_children > 0;

SELECT field_id FROM PARQUET_SCHEMA('__TEST_DIR__/my.parquet') WHERE name = 'key';

SELECT field_id FROM PARQUET_SCHEMA('__TEST_DIR__/my.parquet') WHERE name = 'value';

SELECT field_id FROM PARQUET_SCHEMA('__TEST_DIR__/my.parquet') WHERE name = 'value';

COPY (SELECT range AS i, range AS j FROM RANGE(0, 10)) TO '__TEST_DIR__/my.parquet' WITH (FIELD_IDS 'auto');

SELECT field_id FROM PARQUET_SCHEMA('__TEST_DIR__/my.parquet') WHERE name = 'i';

SELECT field_id FROM PARQUET_SCHEMA('__TEST_DIR__/my.parquet') WHERE name = 'j';

SELECT field_id FROM PARQUET_SCHEMA('__TEST_DIR__/my.parquet') WHERE name = 'j';

SELECT name, field_id FROM PARQUET_SCHEMA('__TEST_DIR__/my.parquet') WHERE name IN ('i', 'key', 'value', 'element', 'j') ORDER BY field_id;

SELECT name, field_id FROM PARQUET_SCHEMA('__TEST_DIR__/my.parquet') WHERE name IN ('i', 'key', 'value', 'element', 'j') ORDER BY field_id;

SELECT name, field_id FROM PARQUET_SCHEMA('__TEST_DIR__/my.parquet') WHERE name IN ('i', 'key', 'value', 'element', 'j') ORDER BY field_id;

COPY (SELECT RANGE(range, range + 3) AS i FROM RANGE(0, 10)) TO '__TEST_DIR__/my.parquet' WITH (FIELD_IDS 'auto');

SELECT field_id FROM PARQUET_SCHEMA('__TEST_DIR__/my.parquet') WHERE name = 'i';

SELECT field_id FROM PARQUET_SCHEMA('__TEST_DIR__/my.parquet') WHERE name = 'element';

COPY (SELECT {'f': range} AS i FROM RANGE(0, 10)) TO '__TEST_DIR__/my.parquet' WITH (FIELD_IDS 'auto');

SELECT field_id FROM PARQUET_SCHEMA('__TEST_DIR__/my.parquet') WHERE name = 'i' AND num_children > 0;

SELECT field_id FROM PARQUET_SCHEMA('__TEST_DIR__/my.parquet') WHERE name = 'f';

COPY (SELECT MAP {'range': 10 - range} AS i FROM RANGE(0, 10)) TO '__TEST_DIR__/my.parquet' WITH (FIELD_IDS 'auto');

SELECT field_id FROM PARQUET_SCHEMA('__TEST_DIR__/my.parquet') WHERE name = 'i' AND num_children > 0;

SELECT field_id FROM PARQUET_SCHEMA('__TEST_DIR__/my.parquet') WHERE name = 'key';

SELECT field_id FROM PARQUET_SCHEMA('__TEST_DIR__/my.parquet') WHERE name = 'value';

COPY (SELECT MAP {'my_key': [{'j': 42}]} AS i) TO '__TEST_DIR__/my.parquet' WITH (FIELD_IDS 'auto');

SELECT name, field_id FROM PARQUET_SCHEMA('__TEST_DIR__/my.parquet') WHERE name IN ('i', 'key', 'value', 'element', 'j') ORDER BY field_id;

SELECT name, field_id FROM PARQUET_SCHEMA('__TEST_DIR__/my.parquet') WHERE name IN ('i', 'key', 'value', 'element', 'j') ORDER BY field_id;

SELECT name, field_id FROM PARQUET_SCHEMA('__TEST_DIR__/my.parquet') WHERE name IN ('i', 'key', 'value', 'element', 'j') ORDER BY field_id;

SELECT name, field_id FROM PARQUET_SCHEMA('__TEST_DIR__/my.parquet') WHERE name IN ('i', 'key', 'value', 'element', 'j') ORDER BY field_id;

SELECT field_id FROM PARQUET_SCHEMA('__TEST_DIR__/my.parquet') WHERE name = 'i';

SELECT field_id FROM PARQUET_SCHEMA('__TEST_DIR__/my.parquet') WHERE name = 'i';

SELECT field_id FROM PARQUET_SCHEMA('__TEST_DIR__/my.parquet') WHERE name = 'I';

SELECT field_id FROM PARQUET_SCHEMA('__TEST_DIR__/my.parquet') WHERE name = 'I';

SELECT field_id FROM PARQUET_SCHEMA('__TEST_DIR__/my.parquet') WHERE name = 'i' AND num_children > 0;

SELECT field_id FROM PARQUET_SCHEMA('__TEST_DIR__/my.parquet') WHERE name = 'f';

SELECT field_id FROM PARQUET_SCHEMA('__TEST_DIR__/my.parquet') WHERE name = 'f';

SELECT field_id FROM PARQUET_SCHEMA('__TEST_DIR__/my.parquet') WHERE name = 'I' AND num_children > 0;

SELECT field_id FROM PARQUET_SCHEMA('__TEST_DIR__/my.parquet') WHERE name = 'F';

PRAGMA enable_verification;

SET home_directory = '__TEST_DIR__';

CREATE TABLE integers AS SELECT * FROM RANGE(0, 10);

COPY integers TO '__TEST_DIR__/integers.parquet' WITH (FORMAT PARQUET);

SELECT * FROM "~/integers.parquet";

CREATE TABLE integers_load (i INT);

COPY integers_load FROM '~/integers.parquet';

SELECT * FROM integers_load;

COPY integers TO '__TEST_DIR__/homedir_integers1.parquet';

COPY integers TO '__TEST_DIR__/homedir_integers2.parquet';

SELECT COUNT(*) FROM "~/homedir_integers*.parquet";

PRAGMA enable_verification;

CREATE TABLE hugeints (h INT128);

INSERT INTO hugeints VALUES (-1180591620717411303424), (0), (NULL), (1180591620717411303424);

COPY hugeints TO '__TEST_DIR__/hugeints.parquet' WITH (FORMAT 'parquet');

SELECT * FROM "__TEST_DIR__/hugeints.parquet";

SELECT TYPEOF(h) FROM "__TEST_DIR__/hugeints.parquet" LIMIT 1;

SET default_null_order = 'nulls_first';
require AS parquet;

PRAGMA enable_verification;

CREATE TABLE IF NOT EXISTS intervals (i INTERVAL);

INSERT INTO intervals VALUES (INTERVAL '1' DAY), (INTERVAL '00:00:01'), (NULL), (INTERVAL '0' MONTH), (INTERVAL '1' MONTH);

COPY intervals TO '__TEST_DIR__/intervals.parquet';

SELECT * FROM "__TEST_DIR__/intervals.parquet" ORDER BY 1;

COPY (SELECT -INTERVAL '1' DAY) TO '__TEST_DIR__/intervals.parquet';

CREATE TABLE empty_lists (i INT[]);

INSERT INTO empty_lists SELECT [] FROM RANGE(0, 10) UNION ALL SELECT [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];

COPY (SELECT * FROM empty_lists LIMIT 10) TO '__TEST_DIR__/emptylist_int.parquet';

SELECT * FROM "__TEST_DIR__/emptylist_int.parquet";

CREATE TABLE empty_lists_varchar (i TEXT[]);

INSERT INTO empty_lists_varchar SELECT [] FROM RANGE(0, 10) UNION ALL SELECT ['hello', 'world', 'this', 'is', 'a', 'varchar', 'list'];

COPY (SELECT * FROM empty_lists_varchar LIMIT 10) TO '__TEST_DIR__/emptylist_varchar.parquet';

SELECT * FROM "__TEST_DIR__/emptylist_varchar.parquet";

CREATE TABLE empty_list_nested (i INT[][]);

INSERT INTO empty_list_nested SELECT [] FROM RANGE(0, 10) UNION ALL SELECT [[1, 2, 3], [4, 5], [6, 7, 8]];

COPY (SELECT * FROM empty_list_nested LIMIT 10) TO '__TEST_DIR__/empty_list_nested.parquet';

SELECT * FROM "__TEST_DIR__/empty_list_nested.parquet";

COPY (SELECT i, i // 5 AS j FROM RANGE(0, 100000000) AS t(i)) TO '__TEST_DIR__/large_integers.parquet';

SET memory_limit = '0.3GB';

SET preserve_insertion_order = FALSE;

COPY "__TEST_DIR__/large_integers.parquet" TO '__TEST_DIR__/large_integers2.parquet';

SET memory_limit = '-1';

SELECT * FROM "__TEST_DIR__/large_integers.parquet" EXCEPT SELECT * FROM "__TEST_DIR__/large_integers2.parquet";

set threads=1
foreach memory_limit,row_group_size 0.6mb,20480 1.2mb,40960;

SET memory_limit = '${memory_limit}';

SET memory_limit = '${memory_limit}';

SET memory_limit = '4gb';

SELECT SUM(range) = (COUNT(*) * (COUNT(*) - 1)) // 2 FROM "__TEST_DIR__/parquet_write_memory_usage.parquet";

PRAGMA enable_verification;

CREATE TABLE values_TINYINT AS SELECT CAST(d AS TINYINT) AS d FROM (VALUES (-128), (42), (NULL), (127)) AS tbl(d);

CREATE TABLE values_SMALLINT AS SELECT CAST(d AS SMALLINT) AS d FROM (VALUES (-32768), (42), (NULL), (32767)) AS tbl(d);

CREATE TABLE values_INTEGER AS SELECT CAST(d AS INT) AS d FROM (VALUES (-2147483648), (42), (NULL), (2147483647)) AS tbl(d);

CREATE TABLE values_INTEGER AS SELECT CAST(d AS INT) AS d FROM (VALUES (-2147483648), (42), (NULL), (2147483647)) AS tbl(d);

CREATE TABLE values_INTEGER AS SELECT CAST(d AS INT) AS d FROM (VALUES (-2147483648), (42), (NULL), (2147483647)) AS tbl(d);

CREATE TABLE values_INTEGER AS SELECT CAST(d AS INT) AS d FROM (VALUES (-2147483648), (42), (NULL), (2147483647)) AS tbl(d);

COPY signed TO '__TEST_DIR__/signed.parquet' WITH (FORMAT 'parquet');

SELECT * FROM "__TEST_DIR__/signed.parquet" EXCEPT SELECT * FROM signed;

SELECT * FROM signed EXCEPT SELECT * FROM "__TEST_DIR__/signed.parquet";

SELECT * FROM "__TEST_DIR__/signed.parquet" WHERE d = 42;

SELECT COUNT(*) FROM "__TEST_DIR__/signed.parquet" WHERE d > 42;

SELECT COUNT(*) FROM "__TEST_DIR__/signed.parquet" WHERE d >= 42;

SELECT COUNT(*) FROM "__TEST_DIR__/signed.parquet" WHERE d < 42;

SELECT COUNT(*) FROM "__TEST_DIR__/signed.parquet" WHERE d <= 42;

SELECT TYPEOF(d) = '${type}' FROM "__TEST_DIR__/signed.parquet" LIMIT 1;

PRAGMA enable_verification;

CREATE TABLE strings (s TEXT);

INSERT INTO strings VALUES ('happy'), ('happy'), ('joy'), ('joy'), ('happy'), ('happy'), ('joy'), ('joy'), ('happy'), ('happy'), ('joy'), ('joy'), ('happy'), ('happy'), ('joy'), ('joy'), ('happy'), ('happy'), ('joy'), ('joy'), ('happy'), ('happy'), ('joy'), ('joy'), ('happy'), ('happy'), ('joy'), ('joy'), ('surprise');

COPY strings TO '__TEST_DIR__/strings.parquet' WITH (FORMAT PARQUET);

SELECT encodings FROM PARQUET_METADATA('__TEST_DIR__/strings.parquet');

SELECT * FROM "__TEST_DIR__/strings.parquet";

SELECT stats_distinct_count FROM PARQUET_METADATA('__TEST_DIR__/strings.parquet');

UPDATE strings SET s = NULL WHERE s = 'joy';

COPY strings TO '__TEST_DIR__/strings.parquet' WITH (FORMAT PARQUET);

SELECT * FROM "__TEST_DIR__/strings.parquet";

UPDATE strings SET s = NULL;

COPY strings TO '__TEST_DIR__/strings.parquet' WITH (FORMAT PARQUET);

SELECT * FROM "__TEST_DIR__/strings.parquet";

DELETE FROM strings;

COPY strings TO '__TEST_DIR__/strings.parquet' WITH (FORMAT PARQUET);

SELECT * FROM "__TEST_DIR__/strings.parquet";

DELETE FROM strings;

INSERT INTO strings VALUES ('0'), ('1'), ('2'), ('3'), ('4'), ('5'), ('6'), ('7'), ('8'), ('9'), ('10'), ('11'), ('12'), ('13'), ('14'), ('15'), ('16'), ('17'), ('18'), ('19'), ('20'), ('21'), ('22'), ('23'), ('24'), ('25'), ('26'), ('27'), ('28'), ('29');

COPY strings TO '__TEST_DIR__/strings.parquet' WITH (FORMAT PARQUET);

SELECT encodings FROM PARQUET_METADATA('__TEST_DIR__/strings.parquet');

SELECT * FROM "__TEST_DIR__/strings.parquet";

SELECT stats_distinct_count FROM PARQUET_METADATA('__TEST_DIR__/strings.parquet');

DELETE FROM strings;

INSERT INTO strings VALUES ('0'), ('1'), ('2'), (NULL), ('4'), ('5'), ('6'), (NULL), ('8'), ('9'), ('10'), ('11'), ('12'), ('13'), ('14'), ('15'), ('16'), ('17'), ('18'), ('19'), ('20'), (NULL), ('22'), ('23'), ('24'), ('25'), (NULL), ('27'), ('28'), ('29');

COPY strings TO '__TEST_DIR__/strings.parquet' WITH (FORMAT PARQUET);

SELECT * FROM "__TEST_DIR__/strings.parquet";

PRAGMA enable_verification;

COPY (SELECT 'hello' FROM RANGE(0, 10)) TO '__TEST_DIR__/string_dict.parquet';

SELECT stats_distinct_count FROM PARQUET_METADATA('__TEST_DIR__/string_dict.parquet');

PRAGMA default_null_order = 'NULLS LAST';

CREATE SCHEMA tpcds;

CREATE SCHEMA tpcds;

CREATE SCHEMA tpcds;

CREATE SCHEMA tpcds;

CREATE SCHEMA tpcds;

CREATE SCHEMA tpcds;

CREATE SCHEMA tpcds;

CREATE SCHEMA tpcds;

CREATE SCHEMA tpch;

CREATE SCHEMA tpch;

CREATE SCHEMA tpch;

CREATE SCHEMA tpch;

CREATE SCHEMA tpch;

CREATE SCHEMA tpch;

CREATE SCHEMA tpch;

CALL dbgen(sf=0.1, schema='tpch');

CREATE VIEW lineitem_array_view AS SELECT LIST({'l_orderkey': l_orderkey, 'l_partkey': l_partkey, 'l_suppkey': l_suppkey, 'l_linenumber': l_linenumber, 'l_quantity': l_quantity, 'l_extendedprice': l_extendedprice, 'l_discount': l_discount, 'l_tax': l_tax, 'l_returnflag': l_returnflag, 'l_linestatus': l_linestatus, 'l_shipdate': l_shipdate, 'l_commitdate': l_commitdate, 'l_receiptdate': l_receiptdate, 'l_shipinstruct': l_shipinstruct, 'l_shipmode': l_shipmode, 'l_comment': l_comment}) AS lineitem_array FROM tpch.lineitem;

COPY lineitem_array_view TO '__TEST_DIR__/lineitem.parquet' WITH (FORMAT 'PARQUET', COMPRESSION 'ZSTD');

COPY lineitem_array_view TO '__TEST_DIR__/lineitem.parquet' WITH (FORMAT 'PARQUET', COMPRESSION 'ZSTD');

COPY lineitem_array_view TO '__TEST_DIR__/lineitem.parquet' WITH (FORMAT 'PARQUET', COMPRESSION 'ZSTD');

COPY lineitem_array_view TO '__TEST_DIR__/lineitem.parquet' WITH (FORMAT 'PARQUET', COMPRESSION 'ZSTD');

COPY lineitem_array_view TO '__TEST_DIR__/lineitem.parquet' WITH (FORMAT 'PARQUET', COMPRESSION 'ZSTD');

COPY lineitem_array_view TO '__TEST_DIR__/lineitem.parquet' WITH (FORMAT 'PARQUET', COMPRESSION 'ZSTD');

PRAGMA enable_verification;

CREATE TABLE hugeints (h UINT128);

INSERT INTO hugeints VALUES (0), (1), (NULL), (1180591620717411303424);

COPY hugeints TO '__TEST_DIR__/hugeints.parquet' WITH (FORMAT 'parquet');

SELECT * FROM "__TEST_DIR__/hugeints.parquet";

SELECT TYPEOF(h) FROM "__TEST_DIR__/hugeints.parquet" LIMIT 1;

PRAGMA enable_verification;

CREATE TABLE values_UTINYINT AS SELECT CAST(d AS UTINYINT) AS d FROM (VALUES (0), (42), (NULL), (255)) AS tbl(d);

CREATE TABLE values_USMALLINT AS SELECT CAST(d AS USMALLINT) AS d FROM (VALUES (0), (42), (NULL), (65535)) AS tbl(d);

CREATE TABLE values_UINTEGER AS SELECT CAST(d AS UINTEGER) AS d FROM (VALUES (0), (42), (NULL), (4294967295)) AS tbl(d);

CREATE TABLE values_UINTEGER AS SELECT CAST(d AS UINTEGER) AS d FROM (VALUES (0), (42), (NULL), (4294967295)) AS tbl(d);

CREATE TABLE values_UINTEGER AS SELECT CAST(d AS UINTEGER) AS d FROM (VALUES (0), (42), (NULL), (4294967295)) AS tbl(d);

CREATE TABLE values_UINTEGER AS SELECT CAST(d AS UINTEGER) AS d FROM (VALUES (0), (42), (NULL), (4294967295)) AS tbl(d);

COPY unsigned TO '__TEST_DIR__/unsigned.parquet' WITH (FORMAT 'parquet');

SELECT * FROM "__TEST_DIR__/unsigned.parquet" EXCEPT SELECT * FROM unsigned;

SELECT * FROM unsigned EXCEPT SELECT * FROM "__TEST_DIR__/unsigned.parquet";

SELECT * FROM "__TEST_DIR__/unsigned.parquet" WHERE d = 42;

SELECT COUNT(*) FROM "__TEST_DIR__/unsigned.parquet" WHERE d > 42;

SELECT COUNT(*) FROM "__TEST_DIR__/unsigned.parquet" WHERE d >= 42;

SELECT COUNT(*) FROM "__TEST_DIR__/unsigned.parquet" WHERE d < 42;

SELECT COUNT(*) FROM "__TEST_DIR__/unsigned.parquet" WHERE d <= 42;

SELECT TYPEOF(d) = '${type}' FROM "__TEST_DIR__/unsigned.parquet" LIMIT 1;

SET default_null_order = 'nulls_first';
require AS parquet;

PRAGMA enable_verification;

CREATE TABLE IF NOT EXISTS uuid (u UUID);

INSERT INTO uuid VALUES ('A0EEBC99-9C0B-4EF8-BB6D-6BB9BD380A11'), (NULL), ('47183823-2574-4bfd-b411-99ed177d3e43'), ('{10203040506070800102030405060708}'), ('A0EEBC99-9C0B-4EF8-BB6D-6BB9BD380A11'), (NULL), ('00112233-4455-6677-8899-aabbccddeeff'), ('47183823-2574-4bfd-b411-99ed177d3e43'), ('{10203040506070800102030405060708}'), ('00000000-0000-0000-0000-000000000000'), ('00000000-0000-0000-0000-000000000001'), ('00000000-0000-0000-8000-000000000001'), ('80000000-0000-0000-0000-000000000000'), ('80000000-0000-0000-8000-000000000000'), ('80000000-0000-0000-8fff-ffffffffffff'), ('80000000-0000-0000-ffff-ffffffffffff'), ('8fffffff-ffff-ffff-0000-000000000000'), ('8fffffff-ffff-ffff-8000-000000000000'), ('8fffffff-ffff-ffff-8fff-ffffffffffff'), ('8fffffff-ffff-ffff-ffff-ffffffffffff'), ('ffffffff-ffff-ffff-ffff-ffffffffffff');

COPY uuid TO '__TEST_DIR__/uuid.parquet';

SELECT * FROM "__TEST_DIR__/uuid.parquet" ORDER BY 1;

SELECT stats_min, stats_max, stats_min_value, stats_max_value FROM PARQUET_METADATA('__TEST_DIR__/uuid.parquet');

CREATE TABLE uuid2 AS SELECT CAST('47183823-2574-4bfd-b411-99ed177d3e43' AS UUID) AS uuid_val UNION ALL SELECT CAST('00112233-4455-6677-8899-aabbccddeeff' AS UUID);

COPY uuid2 TO '__TEST_DIR__/uuid2.parquet';

SELECT stats_min, stats_max, stats_min_value, stats_max_value FROM PARQUET_METADATA('__TEST_DIR__/uuid2.parquet');

COPY (SELECT * FROM READ_CSV_AUTO('data/csv/sequences.csv.gz', delim = ',', header = TRUE) LIMIT 25000) TO '__TEST_DIR__/duckseq.parquet' WITH (FORMAT 'PARQUET', CODEC 'ZSTD', ROW_GROUP_SIZE 25000);

SELECT COUNT(*), MIN(strain), MAX(strain), MIN(STRLEN(sequence)), MAX(STRLEN(sequence)), AVG(STRLEN(sequence)) FROM "__TEST_DIR__/duckseq.parquet";

COPY (SELECT CAST(lstrain AS TEXT[]) AS lstrain, CAST(lsequence AS TEXT[]) AS lsequence FROM (VALUES ([], []), (NULL, NULL), ([], [])) AS tbl(lstrain, lsequence) UNION ALL SELECT * FROM (SELECT LIST(strain) AS lstrain, LIST(sequence) AS lsequence FROM "__TEST_DIR__/duckseq.parquet" LIMIT 10000) UNION ALL SELECT * FROM (VALUES ([], []), (NULL, NULL), ([], []))) TO '__TEST_DIR__/duckseq2.parquet' WITH (FORMAT 'PARQUET', CODEC 'ZSTD');

SELECT COUNT(*) FROM "__TEST_DIR__/duckseq2.parquet";

SELECT COUNT(*), MIN(strain), MAX(strain), MIN(STRLEN(sequence)), MAX(STRLEN(sequence)), AVG(STRLEN(sequence)) FROM (SELECT UNNEST(lstrain) AS strain, UNNEST(lsequence) AS sequence FROM "__TEST_DIR__/duckseq2.parquet");

SET preserve_insertion_order = FALSE;

COPY (SELECT 42) TO '__TEST_DIR__/tbl.parquet' WITH (ROW_GROUP_SIZE_BYTES);

COPY (SELECT range AS c0, range AS c1, range AS c2, range AS c3, range AS c4, range AS c5, range AS c6, range AS c7 FROM RANGE(0, 50000)) TO '__TEST_DIR__/tbl.parquet' WITH (ROW_GROUP_SIZE_BYTES '1mb');

SELECT MAX(row_group_num_rows) FROM PARQUET_METADATA('__TEST_DIR__/tbl.parquet');

SELECT MIN(row_group_bytes) <> 0 FROM PARQUET_METADATA('__TEST_DIR__/tbl.parquet');

COPY (SELECT range AS c0, range AS c1, range AS c2, range AS c3, range AS c4, range AS c5, range AS c6, range AS c7 FROM RANGE(0, 50000)) TO '__TEST_DIR__/tbl.parquet' WITH (ROW_GROUP_SIZE_BYTES 500000);

SELECT MAX(row_group_num_rows) FROM PARQUET_METADATA('__TEST_DIR__/tbl.parquet');

COPY (SELECT range AS c0, range AS c1, range AS c2, range AS c3, range AS c4, range AS c5, range AS c6, range AS c7 FROM RANGE(0, 50000)) TO '__TEST_DIR__/tbl.parquet' WITH (ROW_GROUP_SIZE 10000, ROW_GROUP_SIZE_BYTES '1GB');

SELECT MAX(row_group_num_rows) FROM PARQUET_METADATA('__TEST_DIR__/tbl.parquet');

COPY (SELECT range || REPEAT('0', 50) AS c0 FROM RANGE(0, 50000)) TO '__TEST_DIR__/tbl.parquet' WITH (ROW_GROUP_SIZE_BYTES 200000);

SELECT MAX(row_group_num_rows) FROM PARQUET_METADATA('__TEST_DIR__/tbl.parquet');

COPY (SELECT range || REPEAT('0', 50) AS c0 FROM RANGE(0, 50000)) TO '__TEST_DIR__/tbl.parquet' WITH (ROW_GROUP_SIZE_BYTES 650000);

SELECT MAX(row_group_num_rows) FROM PARQUET_METADATA('__TEST_DIR__/tbl.parquet');

PRAGMA enable_verification;

CREATE TABLE empty_tbl (i INT, j TEXT);

CREATE TABLE tbl AS SELECT * FROM RANGE(0, 10000) AS t(i) UNION ALL SELECT 100000;

COPY (SELECT 42 WHERE 42 = 84) TO '__TEST_DIR__/empty.parquet' WITH (WRITE_EMPTY_FILE FALSE);

SELECT COUNT(*) FROM GLOB('__TEST_DIR__/empty.parquet');

SELECT COUNT(*) FROM GLOB('__TEST_DIR__/empty.parquet');

COPY (SELECT 42 WHERE 42 = 84) TO '__TEST_DIR__/empty.parquet' WITH (WRITE_EMPTY_FILE FALSE, RETURN_STATS);

COPY empty_tbl TO '__TEST_DIR__/empty.parquet' WITH (WRITE_EMPTY_FILE FALSE, RETURN_STATS);

COPY empty_tbl TO '__TEST_DIR__/empty.parquet' WITH (WRITE_EMPTY_FILE FALSE, RETURN_FILES);

COPY empty_tbl TO '__TEST_DIR__/empty.parquet' WITH (WRITE_EMPTY_FILE FALSE, RETURN_FILES);

COPY tbl TO '__TEST_DIR__/empty.parquet' WITH (WRITE_EMPTY_FILE FALSE, ROW_GROUPS_PER_FILE 1);

COPY empty_tbl TO '__TEST_DIR__/empty.parquet' WITH (WRITE_EMPTY_FILE FALSE, PARTITION_BY (i));

COPY tbl TO '__TEST_DIR__/empty.parquet' WITH (WRITE_EMPTY_FILE FALSE, PER_THREAD_OUTPUT);

CREATE TABLE test (a INT, b TEXT);

INSERT INTO test VALUES (1, 'hello'), (2, 'world '), (3, ' xx');

SELECT * FROM test ORDER BY 1;

COPY test TO '__TEST_DIR__/overwrite.parquet' WITH (FORMAT PARQUET);

COPY (SELECT * FROM test LIMIT 2) TO '__TEST_DIR__/overwrite.parquet' WITH (FORMAT PARQUET);

DELETE FROM test;

COPY test FROM '__TEST_DIR__/overwrite.parquet' WITH (FORMAT PARQUET);

SELECT * FROM test ORDER BY 1;

COPY (SELECT i FROM RANGE(0, 1) AS tbl(i) UNION ALL SELECT CAST(CONCAT('hello', i) AS INT) AS i FROM RANGE(0, 1) AS tbl(i)) TO '__TEST_DIR__/overwrite.parquet' WITH (FORMAT PARQUET);

DELETE FROM test;

COPY test FROM '__TEST_DIR__/overwrite.parquet' WITH (FORMAT PARQUET);

SELECT * FROM test ORDER BY 1;

COPY (SELECT i FROM RANGE(0, 1) AS tbl(i) UNION ALL SELECT CAST(CONCAT('hello', i) AS INT) AS i FROM RANGE(0, 1) AS tbl(i)) TO '__TEST_DIR__/overwrite.parquet' WITH (FORMAT PARQUET, USE_TMP_FILE FALSE);

SELECT * FROM "__TEST_DIR__/overwrite.parquet";

COPY (SELECT 42) TO '__TEST_DIR__/scalar.parquet' WITH (FORMAT 'parquet');

SELECT * FROM PARQUET_SCAN('__TEST_DIR__/scalar.parquet');

CREATE TABLE empty (i INT);

COPY (SELECT * FROM empty) TO '__TEST_DIR__/empty.parquet' WITH (FORMAT 'parquet');

SELECT COUNT(*) FROM PARQUET_SCAN('__TEST_DIR__/empty.parquet');

SET threads = 4;

COPY (SELECT * FROM empty) TO '__TEST_DIR__/empty_multithread' WITH (FORMAT 'parquet', PER_THREAD_OUTPUT TRUE);

SELECT COUNT(*) FROM PARQUET_SCAN('__TEST_DIR__/empty_multithread/*.parquet');

SELECT * FROM PARQUET_SCAN('data/parquet-testing/arrow/alltypes_dictionary.parquet');

COPY (SELECT * FROM PARQUET_SCAN('data/parquet-testing/arrow/alltypes_dictionary.parquet')) TO '__TEST_DIR__/alltypes_dictionary.parquet' WITH (FORMAT 'PARQUET');

SELECT * FROM PARQUET_SCAN('__TEST_DIR__/alltypes_dictionary.parquet');

SELECT * FROM PARQUET_SCAN('data/parquet-testing/bug687_nulls.parquet') LIMIT 10;

COPY (SELECT * FROM PARQUET_SCAN('data/parquet-testing/bug687_nulls.parquet')) TO '__TEST_DIR__/bug687_nulls.parquet' WITH (FORMAT 'PARQUET');

SELECT * FROM PARQUET_SCAN('__TEST_DIR__/bug687_nulls.parquet') LIMIT 10;

COPY (SELECT TRUE AS x UNION ALL SELECT TRUE) TO '__TEST_DIR__/bug1637_booleans.parquet' WITH (FORMAT 'PARQUET');

SELECT COUNT(*) FROM PARQUET_SCAN('__TEST_DIR__/bug1637_booleans.parquet') WHERE x;

SELECT * FROM PARQUET_SCAN('data/parquet-testing/userdata1.parquet') ORDER BY 1 LIMIT 10;

COPY (SELECT * FROM PARQUET_SCAN('data/parquet-testing/userdata1.parquet')) TO '__TEST_DIR__/userdata1.parquet' WITH (FORMAT 'PARQUET');

SELECT * FROM PARQUET_SCAN('__TEST_DIR__/userdata1.parquet') ORDER BY 1 LIMIT 10;

COPY (SELECT * FROM PARQUET_SCAN('data/parquet-testing/userdata1.parquet')) TO '__TEST_DIR__/userdata1-gzip.parquet' WITH (FORMAT 'PARQUET', CODEC 'GZIP');

SELECT * FROM PARQUET_SCAN('__TEST_DIR__/userdata1-gzip.parquet') ORDER BY 1 LIMIT 10;

COPY (SELECT * FROM PARQUET_SCAN('data/parquet-testing/userdata1.parquet')) TO '__TEST_DIR__/userdata1-uncompressed.parquet' WITH (FORMAT 'PARQUET', CODEC 'UNCOMPRESSED');

SELECT * FROM PARQUET_SCAN('__TEST_DIR__/userdata1-uncompressed.parquet') ORDER BY 1 LIMIT 10;

COPY (SELECT * FROM PARQUET_SCAN('data/parquet-testing/userdata1.parquet')) TO '__TEST_DIR__/userdata1-zstd.parquet' WITH (FORMAT 'PARQUET', CODEC 'ZSTD');

SELECT * FROM PARQUET_SCAN('__TEST_DIR__/userdata1-zstd.parquet') ORDER BY 1 LIMIT 10;

CREATE TABLE parquet_read AS SELECT * FROM PARQUET_SCAN('${parquet_file}');

COPY parquet_read TO '__TEST_DIR__/test_round_trip.parquet';

CREATE TABLE parquet_write AS SELECT * FROM PARQUET_SCAN('__TEST_DIR__/test_round_trip.parquet');

SELECT COUNT(*) FROM parquet_read EXCEPT SELECT COUNT(*) FROM parquet_write;

SELECT COUNT(*) FROM (SELECT * FROM parquet_read EXCEPT SELECT * FROM parquet_write);

DROP TABLE parquet_read;

CREATE TABLE big_list AS SELECT LIST(CASE WHEN i % 2 = 0 THEN NULL ELSE i END) AS l FROM RANGE(0, 20000) AS tbl(i);

SELECT SUM(i) FROM (SELECT UNNEST(l) FROM big_list) AS t(i);

COPY big_list TO '__TEST_DIR__/big_list.parquet' WITH (FORMAT 'parquet');

SELECT SUM(i) FROM (SELECT UNNEST(l) FROM "__TEST_DIR__/big_list.parquet") AS t(i);

CREATE TABLE struct_of_lists AS SELECT * FROM (VALUES ({'a': [1, 2, 3], 'b': ['hello', 'world']}), ({'a': [4, NULL, 5], 'b': ['duckduck', 'goose']}), ({'a': NULL, 'b': ['longlonglonglonglonglong', NULL, NULL]}), (NULL), ({'a': [], 'b': []}), ({'a': [1, 2, 3], 'b': NULL})) AS tbl(i);

COPY struct_of_lists TO '__TEST_DIR__/complex_list.parquet' WITH (FORMAT 'parquet');

SELECT i FROM PARQUET_SCAN('__TEST_DIR__/complex_list.parquet');

CREATE TABLE list_of_structs AS SELECT * FROM (VALUES ([{'a': 1, 'b': 100}, NULL, {'a': 2, 'b': 101}]), (NULL), ([]), ([{'a': NULL, 'b': 102}, {'a': 3, 'b': NULL}, NULL])) AS tbl(i);

COPY list_of_structs TO '__TEST_DIR__/complex_list.parquet' WITH (FORMAT 'parquet');

SELECT i FROM PARQUET_SCAN('__TEST_DIR__/complex_list.parquet');

CREATE TABLE list_of_struct_of_structs AS SELECT * FROM (VALUES ([{'a': {'x': 33}, 'b': {'y': 42, 'z': 99}}, NULL, {'a': {'x': NULL}, 'b': {'y': 43, 'z': 100}}]), (NULL), ([]), ([{'a': NULL, 'b': {'y': NULL, 'z': 101}}, {'a': {'x': 34}, 'b': {'y': 43, 'z': NULL}}]), ([{'a': NULL, 'b': NULL}])) AS tbl(i);

COPY list_of_struct_of_structs TO '__TEST_DIR__/complex_list.parquet' WITH (FORMAT 'parquet');

SELECT i FROM PARQUET_SCAN('__TEST_DIR__/complex_list.parquet');

CREATE TABLE list_of_lists_simple AS SELECT * FROM (VALUES ([[1, 2, 3], [4, 5]]), ([[6, 7]]), ([[8, 9, 10], [11, 12]])) AS tbl(i);

COPY list_of_lists_simple TO '__TEST_DIR__/complex_list.parquet' WITH (FORMAT 'parquet');

SELECT i FROM PARQUET_SCAN('__TEST_DIR__/complex_list.parquet');

CREATE TABLE list_of_lists AS SELECT * FROM (VALUES ([[1, 2, 3], [4, 5], [], [6, 7]]), ([[8, NULL, 10], NULL, []]), ([]), (NULL), ([[11, 12, 13, 14], [], NULL, [], [], [15], [NULL, NULL, NULL]])) AS tbl(i);

COPY list_of_lists TO '__TEST_DIR__/complex_list.parquet' WITH (FORMAT 'parquet');

SELECT i FROM PARQUET_SCAN('__TEST_DIR__/complex_list.parquet');

CREATE TABLE list_of_lists_of_lists_of_lists AS SELECT [LIST(i)] AS i FROM list_of_lists UNION ALL SELECT NULL UNION ALL SELECT [NULL] UNION ALL SELECT [[], NULL, [], []] UNION ALL SELECT [[[NULL, NULL, [NULL]], NULL, [[], [7, 8, 9], [NULL], NULL, []]], [], [NULL]];

COPY list_of_lists_of_lists_of_lists TO '__TEST_DIR__/complex_list.parquet' WITH (FORMAT 'parquet');

SELECT i FROM PARQUET_SCAN('__TEST_DIR__/complex_list.parquet');

CREATE TABLE list AS SELECT * FROM (VALUES ([1, 2, 3]), ([4, 5]), ([6, 7]), ([8, 9, 10, 11])) AS tbl(i);

COPY list TO '__TEST_DIR__/test_list.parquet' WITH (FORMAT 'parquet');

SELECT i FROM PARQUET_SCAN('__TEST_DIR__/test_list.parquet');

CREATE TABLE null_empty_list AS SELECT * FROM (VALUES ([1, 2, 3]), ([4, 5]), ([6, 7]), ([NULL]), ([]), ([]), ([]), ([]), ([8, NULL, 10, 11]), (NULL)) AS tbl(i);

COPY null_empty_list TO '__TEST_DIR__/test_list.parquet' WITH (FORMAT 'parquet');

SELECT * FROM PARQUET_SCAN('__TEST_DIR__/test_list.parquet');

COPY (SELECT CAST([] AS INT[])) TO '__TEST_DIR__/test_empty_list.parquet' WITH (FORMAT 'parquet');

SELECT * FROM "__TEST_DIR__/test_empty_list.parquet";

COPY (SELECT CAST(NULL AS INT[])) TO '__TEST_DIR__/test_null_list.parquet' WITH (FORMAT 'parquet');

SELECT * FROM "__TEST_DIR__/test_null_list.parquet";

CREATE TABLE int_maps (m MAP(INT, INT));

INSERT INTO int_maps VALUES (MAP([42, 84], [1, 2])), (MAP([101, 201, 301], [3, NULL, 5])), (MAP([55, 66, 77], [6, 7, NULL]));

COPY int_maps TO '__TEST_DIR__/int_map.parquet' WITH (FORMAT PARQUET);

SELECT * FROM "__TEST_DIR__/int_map.parquet";

INSERT INTO int_maps VALUES (MAP([NULL], [NULL]));

COPY string_map TO '__TEST_DIR__/int_maps.parquet' WITH (FORMAT PARQUET);

CREATE TABLE string_map (m MAP(TEXT, TEXT));

INSERT INTO string_map VALUES (MAP(['key1', 'key2'], ['value1', 'value2'])), (MAP(['best band', 'best boyband', 'richest person'], ['Tenacious D', 'Backstreet Boys', 'Jon Lajoie'])), (MAP([], [])), (NULL), (MAP(['option'], [NULL]));

COPY string_map TO '__TEST_DIR__/string_map.parquet' WITH (FORMAT PARQUET);

SELECT * FROM "__TEST_DIR__/string_map.parquet";

INSERT INTO string_map VALUES (MAP([NULL], [NULL]));

CREATE TABLE list_map (m MAP(INT[], INT[]));

INSERT INTO list_map VALUES (MAP([[1, 2, 3], [], [4, 5]], [[6, 7, 8], NULL, [NULL]])), (MAP([], [])), (MAP([[1]], [NULL])), (MAP([[10, 12, 14, 16, 18, 20], []], [[1], [2]]));

COPY list_map TO '__TEST_DIR__/list_map.parquet' WITH (FORMAT PARQUET);

SELECT * FROM "__TEST_DIR__/list_map.parquet";

INSERT INTO list_map VALUES (MAP([NULL], [NULL]));

PRAGMA enable_verification;

CREATE TABLE varchar (v TEXT);

INSERT INTO varchar VALUES (NULL), ('hello'), (NULL), ('world'), (NULL);

COPY varchar TO '__TEST_DIR__/bigvarchar.parquet';

SELECT stats_min_value, stats_max_value, stats_min, stats_max, min_is_exact, max_is_exact FROM PARQUET_METADATA('__TEST_DIR__/bigvarchar.parquet');

INSERT INTO varchar SELECT REPEAT('A', 100000) AS v;

COPY varchar TO '__TEST_DIR__/bigvarchar.parquet';

SELECT stats_min_value, stats_max_value, stats_min, stats_max, min_is_exact, max_is_exact FROM PARQUET_METADATA('__TEST_DIR__/bigvarchar.parquet');

PRAGMA enable_verification;

PRAGMA explain_output = OPTIMIZED_ONLY;

CREATE TABLE boolean_limits AS SELECT CAST((FALSE) AS BOOLEAN) AS min, CAST(TRUE AS BOOLEAN) AS max;

CREATE TABLE tinyint_limits AS SELECT CAST((-128) AS TINYINT) AS min, CAST(127 AS TINYINT) AS max;

CREATE TABLE smallint_limits AS SELECT CAST((-32768) AS SMALLINT) AS min, CAST(32767 AS SMALLINT) AS max;

CREATE TABLE integer_limits AS SELECT CAST((-2147483648) AS INT) AS min, CAST(2147483647 AS INT) AS max;

CREATE TABLE bigint_limits AS SELECT CAST((-9223372036854775808) AS BIGINT) AS min, CAST(9223372036854775807 AS BIGINT) AS max;

CREATE TABLE float_limits AS SELECT CAST((-0.5) AS REAL) AS min, CAST(0.5 AS REAL) AS max;

CREATE TABLE double_limits AS SELECT CAST((-0.5) AS DOUBLE) AS min, CAST(0.5 AS DOUBLE) AS max;

CREATE TABLE varchar_limits AS SELECT 'hello world 👤🏠📕' AS min, 'look at my ducks 🦆🦆🦆' AS max;

CREATE TABLE blob_limits AS SELECT CAST('\x00hello\x00world\x00' AS BLOB) AS min, CAST('\x00look\x00at\x00my\x00nullbytes\x00' AS BLOB) AS max;

CREATE TABLE date_limits AS SELECT CAST('1900-01-01' AS DATE) AS min, CAST('2030-12-31' AS DATE) AS max;

CREATE TABLE time_limits AS SELECT CAST('00:00:00' AS TIME) AS min, CAST('23:59:59' AS TIME) AS max;

CREATE TABLE timestamp_limits AS SELECT CAST('1900-01-01 00:00:00' AS TIMESTAMP) AS min, CAST('2030-12-31 23:59:59' AS TIMESTAMP) AS max;

CREATE TABLE timestamp_s_limits AS SELECT CAST('1900-01-01 00:00:00' AS TIMESTAMP_S) AS min, CAST('2030-12-31 23:59:59' AS TIMESTAMP_S) AS max;

CREATE TABLE timestamp_ms_limits AS SELECT CAST('1900-01-01 00:00:00' AS TIMESTAMP_MS) AS min, CAST('2030-12-31 23:59:59' AS TIMESTAMP_MS) AS max;

CREATE TABLE timestamp_ms_limits AS SELECT CAST('1900-01-01 00:00:00' AS TIMESTAMP_MS) AS min, CAST('2030-12-31 23:59:59' AS TIMESTAMP_MS) AS max;

CREATE TABLE timestamp_ms_limits AS SELECT CAST('1900-01-01 00:00:00' AS TIMESTAMP_MS) AS min, CAST('2030-12-31 23:59:59' AS TIMESTAMP_MS) AS max;

INSERT INTO tbl SELECT NULL;

COPY tbl TO '__TEST_DIR__/${type}_stats.parquet' WITH (FORMAT PARQUET);

COPY tbl TO '__TEST_DIR__/${type}_stats.parquet' WITH (FORMAT PARQUET);

COPY tbl TO '__TEST_DIR__/${type}_stats.parquet' WITH (FORMAT PARQUET);

COPY tbl TO '__TEST_DIR__/${type}_stats.parquet' WITH (FORMAT PARQUET);

COPY tbl TO '__TEST_DIR__/${type}_stats.parquet' WITH (FORMAT PARQUET);

COPY tbl TO '__TEST_DIR__/${type}_stats.parquet' WITH (FORMAT PARQUET);

COPY tbl TO '__TEST_DIR__/${type}_stats.parquet' WITH (FORMAT PARQUET);

COPY tbl TO '__TEST_DIR__/${type}_stats.parquet' WITH (FORMAT PARQUET);

COPY tbl TO '__TEST_DIR__/${type}_stats.parquet' WITH (FORMAT PARQUET);

COPY tbl TO '__TEST_DIR__/${type}_stats.parquet' WITH (FORMAT PARQUET);

CREATE TABLE utinyint_limits AS SELECT CAST((0) AS UTINYINT) AS min, CAST(255 AS UTINYINT) AS max;

CREATE TABLE usmallint_limits AS SELECT CAST((0) AS USMALLINT) AS min, CAST(65535 AS USMALLINT) AS max;

CREATE TABLE uinteger_limits AS SELECT CAST(0 AS UINTEGER) AS min, CAST(4294967295 AS UINTEGER) AS max;

CREATE TABLE ubigint_limits AS SELECT 0::UBIGINT min, 18446744073709551615::UBIGINT max
foreach type utinyint usmallint uinteger ubigint;

CREATE TABLE ubigint_limits AS SELECT 0::UBIGINT min, 18446744073709551615::UBIGINT max
foreach type utinyint usmallint uinteger ubigint;

INSERT INTO tbl SELECT NULL;

COPY tbl TO '__TEST_DIR__/${type}_stats.parquet' WITH (FORMAT PARQUET);

COPY tbl TO '__TEST_DIR__/${type}_stats.parquet' WITH (FORMAT PARQUET);

COPY tbl TO '__TEST_DIR__/${type}_stats.parquet' WITH (FORMAT PARQUET);

COPY tbl TO '__TEST_DIR__/${type}_stats.parquet' WITH (FORMAT PARQUET);

COPY tbl TO '__TEST_DIR__/${type}_stats.parquet' WITH (FORMAT PARQUET);

COPY tbl TO '__TEST_DIR__/${type}_stats.parquet' WITH (FORMAT PARQUET);

COPY tbl TO '__TEST_DIR__/${type}_stats.parquet' WITH (FORMAT PARQUET);

COPY tbl TO '__TEST_DIR__/${type}_stats.parquet' WITH (FORMAT PARQUET);

COPY tbl TO '__TEST_DIR__/${type}_stats.parquet' WITH (FORMAT PARQUET);

COPY tbl TO '__TEST_DIR__/${type}_stats.parquet' WITH (FORMAT PARQUET);

COPY tbl TO '__TEST_DIR__/${type}_stats.parquet' WITH (FORMAT PARQUET);

COPY tbl TO '__TEST_DIR__/${type}_stats.parquet' WITH (FORMAT PARQUET);

COPY tbl TO '__TEST_DIR__/${type}_stats.parquet' WITH (FORMAT PARQUET);

CREATE TABLE hugeint_limits AS SELECT (-170141183460469231731687303715884105728)::HUGEINT min, 170141183460469231731687303715884105727::HUGEINT max
foreach type hugeint;

CREATE TABLE hugeint_limits AS SELECT (-170141183460469231731687303715884105728)::HUGEINT min, 170141183460469231731687303715884105727::HUGEINT max
foreach type hugeint;

CREATE TABLE hugeint_limits AS SELECT (-170141183460469231731687303715884105728)::HUGEINT min, 170141183460469231731687303715884105727::HUGEINT max
foreach type hugeint;

CREATE TABLE hugeint_limits AS SELECT (-170141183460469231731687303715884105728)::HUGEINT min, 170141183460469231731687303715884105727::HUGEINT max
foreach type hugeint;

COPY tbl TO '__TEST_DIR__/${type}_stats.parquet' WITH (FORMAT PARQUET);

COPY tbl TO '__TEST_DIR__/${type}_stats.parquet' WITH (FORMAT PARQUET);

COPY tbl TO '__TEST_DIR__/${type}_stats.parquet' WITH (FORMAT PARQUET);

COPY tbl TO '__TEST_DIR__/${type}_stats.parquet' WITH (FORMAT PARQUET);

COPY tbl TO '__TEST_DIR__/${type}_stats.parquet' WITH (FORMAT PARQUET);

PRAGMA enable_verification;

PRAGMA explain_output = OPTIMIZED_ONLY;

COPY (SELECT 42 AS i) TO '__TEST_DIR__/stats.parquet' WITH (FORMAT PARQUET);

SELECT stats_null_count FROM PARQUET_METADATA('__TEST_DIR__/stats.parquet');

EXPLAIN SELECT COUNT(*) FROM '__TEST_DIR__/stats.parquet' WHERE i IS NULL;

SELECT COUNT(*) FROM "__TEST_DIR__/stats.parquet" WHERE i IS NULL;

COPY (SELECT NULL AS i) TO '__TEST_DIR__/stats.parquet' WITH (FORMAT PARQUET);

SELECT stats_null_count FROM PARQUET_METADATA('__TEST_DIR__/stats.parquet');

EXPLAIN SELECT COUNT(*) FROM '__TEST_DIR__/stats.parquet' WHERE i IS NULL;

SELECT COUNT(*) FROM "__TEST_DIR__/stats.parquet" WHERE i IS NULL;

COPY (SELECT [42, NULL, 43] AS i) TO '__TEST_DIR__/stats.parquet' WITH (FORMAT PARQUET);

SELECT stats_null_count FROM PARQUET_METADATA('__TEST_DIR__/stats.parquet');

COPY (SELECT {'a': NULL, 'b': 42} AS i) TO '__TEST_DIR__/stats.parquet' WITH (FORMAT PARQUET);

SELECT stats_null_count FROM PARQUET_METADATA('__TEST_DIR__/stats.parquet');

CREATE TABLE structs AS SELECT {'a': NULL, 'b': 'hello'} AS i UNION ALL SELECT NULL UNION ALL SELECT {'a': 84, 'b': 'world'};

COPY structs TO '__TEST_DIR__/stats.parquet' WITH (FORMAT PARQUET);

SELECT stats_null_count FROM PARQUET_METADATA('__TEST_DIR__/stats.parquet');

CREATE TABLE struct AS SELECT * FROM (VALUES ({'a': 42, 'b': 84}), ({'a': 33, 'b': 32}), ({'a': 42, 'b': 27})) AS tbl(i);

COPY struct TO '__TEST_DIR__/test_struct.parquet' WITH (FORMAT 'parquet');

SELECT * FROM PARQUET_SCAN('__TEST_DIR__/test_struct.parquet');

CREATE TABLE struct_nulls AS SELECT * FROM (VALUES ({'a': 42, 'b': 84}), ({'a': NULL, 'b': 32}), (NULL), ({'a': 42, 'b': NULL})) AS tbl(i);

COPY struct_nulls TO '__TEST_DIR__/test_struct_nulls.parquet' WITH (FORMAT 'parquet');

SELECT * FROM PARQUET_SCAN('__TEST_DIR__/test_struct_nulls.parquet');

CREATE TABLE struct_nested AS SELECT * FROM (VALUES ({'a': {'x': 3, 'x1': 22}, 'b': {'y': 27, 'y1': 44}}), ({'a': {'x': 9, 'x1': 26}, 'b': {'y': 1, 'y1': 999}}), ({'a': {'x': 17, 'x1': 23}, 'b': {'y': 3, 'y1': 9999}})) AS tbl(i);

COPY struct_nested TO '__TEST_DIR__/struct_nested.parquet' WITH (FORMAT 'parquet');

SELECT * FROM PARQUET_SCAN('__TEST_DIR__/struct_nested.parquet');

CREATE TABLE struct_nested_null AS SELECT * FROM (VALUES ({'a': {'x': 3, 'x1': 22}, 'b': {'y': NULL, 'y1': 44}}), ({'a': {'x': NULL, 'x1': 26}, 'b': {'y': 1, 'y1': NULL}}), ({'a': {'x': 17, 'x1': NULL}, 'b': {'y': 3, 'y1': 9999}}), (NULL), ({'a': NULL, 'b': NULL})) AS tbl(i);

COPY struct_nested_null TO '__TEST_DIR__/struct_nested_null.parquet' WITH (FORMAT 'parquet');

SELECT * FROM PARQUET_SCAN('__TEST_DIR__/struct_nested_null.parquet');

CREATE TABLE single_struct AS SELECT * FROM (VALUES ({'a': 42}), ({'a': 33}), ({'a': 42})) AS tbl(i);

COPY single_struct TO '__TEST_DIR__/single_struct.parquet' WITH (FORMAT 'parquet');

SELECT * FROM PARQUET_SCAN('__TEST_DIR__/single_struct.parquet');

CREATE TABLE single_struct_null AS SELECT * FROM (VALUES ({'a': 42}), ({'a': NULL}), (NULL)) AS tbl(i);

COPY single_struct_null TO '__TEST_DIR__/single_struct_null.parquet' WITH (FORMAT 'parquet');

SELECT * FROM PARQUET_SCAN('__TEST_DIR__/single_struct_null.parquet');

CREATE TABLE nested_single_struct AS SELECT * FROM (VALUES ({'a': {'b': 42}}), ({'a': {'b': NULL}}), ({'a': NULL}), (NULL)) AS tbl(i);

COPY nested_single_struct TO '__TEST_DIR__/nested_single_struct.parquet' WITH (FORMAT 'parquet');

SELECT * FROM PARQUET_SCAN('__TEST_DIR__/nested_single_struct.parquet');

COPY (SELECT CAST(i AS TEXT) AS a, CAST((i * 10) AS TEXT) AS b, CAST((i * 100) AS TEXT) AS c FROM RANGE(0, 10) AS tbl(i)) TO '__TEST_DIR__/hive_pushdown_bug' WITH (FORMAT PARQUET, PARTITION_BY c);

EXPLAIN SELECT * FROM parquet_scan('__TEST_DIR__/hive_pushdown_bug/*/*.parquet', HIVE_PARTITIONING=1) where a > b;

EXPLAIN SELECT * FROM parquet_scan('__TEST_DIR__/hive_pushdown_bug/*/*.parquet', HIVE_PARTITIONING=1) where a > b;

EXPLAIN SELECT * FROM parquet_scan('__TEST_DIR__/hive_pushdown_bug/*/*.parquet') where a > b;

EXPLAIN SELECT * FROM parquet_scan('__TEST_DIR__/hive_pushdown_bug/*/*.parquet', HIVE_PARTITIONING=1) where a::VARCHAR > c::VARCHAR;

EXPLAIN SELECT * FROM parquet_scan('__TEST_DIR__/hive_pushdown_bug/*/*.parquet', HIVE_PARTITIONING=1) where a::VARCHAR > c::VARCHAR;

EXPLAIN SELECT * FROM parquet_scan('__TEST_DIR__/hive_pushdown_bug/*/*.parquet') where a::VARCHAR > c::VARCHAR;

EXPLAIN SELECT * FROM parquet_scan('__TEST_DIR__/hive_pushdown_bug/*/*.parquet', HIVE_PARTITIONING=1, HIVE_TYPES_AUTOCAST=1) where c=500;

EXPLAIN SELECT * FROM parquet_scan('__TEST_DIR__/hive_pushdown_bug/*/*.parquet', HIVE_PARTITIONING=1, HIVE_TYPES_AUTOCAST=1) where c=500 and b='20';

COPY (SELECT CAST(i AS TEXT) AS a, CAST((i * 10) AS TEXT) AS b, CAST((i * 100) AS TEXT) AS c FROM RANGE(0, 10) AS tbl(i)) TO '__TEST_DIR__/hive_pushdown_bug_csv' WITH (FORMAT CSV, PARTITION_BY c);

EXPLAIN SELECT * FROM read_csv_auto('__TEST_DIR__/hive_pushdown_bug_csv/*/*.csv', HIVE_PARTITIONING=1, HIVE_TYPES_AUTOCAST=1, names=['a','b','c']) where c=500;

PRAGMA enable_verification;

CREATE TABLE t AS SELECT i % 2 AS year, i % 3 AS month, i % 4 AS c, i % 5 AS d FROM RANGE(0, 20) AS tbl(i);

COPY t TO '__TEST_DIR__/csv_partition_1' WITH (partition_by (year));

SELECT COUNT(*) FROM GLOB('__TEST_DIR__/csv_partition_1/**');

SELECT ALIAS(COLUMNS(*)) FROM READ_CSV_AUTO('__TEST_DIR__/csv_partition_1/**', names = ['a', 'b', 'c', 'd'], HIVE_PARTITIONING = 0) LIMIT 1;

SELECT ALIAS(COLUMNS(*)) FROM READ_CSV_AUTO('__TEST_DIR__/csv_partition_1/**', names = ['a', 'b', 'c', 'd'], HIVE_PARTITIONING = 1) LIMIT 1;

SELECT ALIAS(COLUMNS(*)) FROM READ_CSV_AUTO('__TEST_DIR__/csv_partition_1/**', names = ['a', 'b', 'c', 'd']) LIMIT 1;

COPY t TO '__TEST_DIR__/csv_partition_2' WITH (partition_by (year, month));

SELECT COUNT(*) FROM GLOB('__TEST_DIR__/csv_partition_2/**');

SELECT ALIAS(COLUMNS(*)) FROM READ_CSV_AUTO('__TEST_DIR__/csv_partition_2/**', names = ['a', 'b', 'c', 'd'], HIVE_PARTITIONING = 0) LIMIT 1;

SELECT ALIAS(COLUMNS(*)) FROM READ_CSV_AUTO('__TEST_DIR__/csv_partition_2/**', names = ['a', 'b', 'c', 'd'], HIVE_PARTITIONING = 1) LIMIT 1;

SELECT ALIAS(COLUMNS(*)) FROM READ_CSV_AUTO('__TEST_DIR__/csv_partition_2/**', names = ['a', 'b', 'c', 'd']) LIMIT 1;

SELECT COUNT(*) FROM GLOB('__TEST_DIR__/t.csv');

COPY t TO '__TEST_DIR__/bad_file.csv';

SELECT COUNT(*) FROM GLOB('__TEST_DIR__/bad_file.csv');

SELECT ALIAS(COLUMNS(*)) FROM READ_CSV_AUTO('__TEST_DIR__/bad_file.csv', names = ['a', 'b', 'c', 'd'], HIVE_PARTITIONING = 0) LIMIT 1;

SELECT ALIAS(COLUMNS(*)) FROM READ_CSV_AUTO('__TEST_DIR__/bad_file.csv', names = ['a', 'b', 'c', 'd'], HIVE_PARTITIONING = 1) LIMIT 1;

SELECT ALIAS(COLUMNS(*)) FROM READ_CSV_AUTO('__TEST_DIR__/bad_file.csv', names = ['a', 'b', 'c', 'd']) LIMIT 1;

SELECT ALIAS(COLUMNS(*)) FROM READ_CSV_AUTO(['__TEST_DIR__/csv_partition_2/**', '__TEST_DIR__/bad_file.csv'], HIVE_PARTITIONING = 0, names = ['a', 'b', 'c', 'd']) LIMIT 1;

SELECT ALIAS(COLUMNS(*)) FROM READ_CSV_AUTO(['__TEST_DIR__/csv_partition_2/**', '__TEST_DIR__/bad_file.csv'], HIVE_PARTITIONING = 1, names = ['a', 'b', 'c', 'd']) LIMIT 1;

SELECT ALIAS(COLUMNS(*)) FROM READ_CSV_AUTO(['__TEST_DIR__/csv_partition_2/**', '__TEST_DIR__/bad_file.csv'], names = ['a', 'b', 'c', 'd']) LIMIT 1;

COPY t TO '__TEST_DIR__/parquet_partition_1' WITH (format parquet, partition_by (year));

SELECT COUNT(*) FROM GLOB('__TEST_DIR__/parquet_partition_1/**');

SELECT ALIAS(COLUMNS(*)) FROM READ_PARQUET('__TEST_DIR__/parquet_partition_1/**', HIVE_PARTITIONING = 0) LIMIT 1;

SELECT ALIAS(COLUMNS(*)) FROM READ_PARQUET('__TEST_DIR__/parquet_partition_1/**', HIVE_PARTITIONING = 1) LIMIT 1;

SELECT ALIAS(COLUMNS(*)) FROM READ_PARQUET('__TEST_DIR__/parquet_partition_1/**') LIMIT 1;

COPY t TO '__TEST_DIR__/parquet_partition_2' WITH (format parquet, partition_by (year, month));

SELECT COUNT(*) FROM GLOB('__TEST_DIR__/parquet_partition_2/**');

SELECT ALIAS(COLUMNS(*)) FROM READ_PARQUET('__TEST_DIR__/parquet_partition_2/**', HIVE_PARTITIONING = 0) LIMIT 1;

SELECT ALIAS(COLUMNS(*)) FROM READ_PARQUET('__TEST_DIR__/parquet_partition_2/**', HIVE_PARTITIONING = 1) LIMIT 1;

SELECT ALIAS(COLUMNS(*)) FROM READ_PARQUET('__TEST_DIR__/parquet_partition_2/**') LIMIT 1;

SELECT COUNT(*) FROM GLOB('__TEST_DIR__/t.parquet');

COPY t TO '__TEST_DIR__/t.parquet' WITH (format parquet);

SELECT COUNT(*) FROM GLOB('__TEST_DIR__/t.parquet');

SELECT ALIAS(COLUMNS(*)) FROM READ_PARQUET('__TEST_DIR__/t.parquet', HIVE_PARTITIONING = 0) LIMIT 1;

SELECT ALIAS(COLUMNS(*)) FROM READ_PARQUET('__TEST_DIR__/t.parquet', HIVE_PARTITIONING = 1) LIMIT 1;

SELECT ALIAS(COLUMNS(*)) FROM READ_PARQUET('__TEST_DIR__/t.parquet') LIMIT 1;

SELECT ALIAS(COLUMNS(*)) FROM READ_PARQUET(['__TEST_DIR__/parquet_partition_2/**', '__TEST_DIR__/t.parquet'], HIVE_PARTITIONING = 0) LIMIT 1;

SELECT ALIAS(COLUMNS(*)) FROM READ_PARQUET(['__TEST_DIR__/parquet_partition_2/**', '__TEST_DIR__/t.parquet'], HIVE_PARTITIONING = 1) LIMIT 1;

SELECT ALIAS(COLUMNS(*)) FROM READ_PARQUET(['__TEST_DIR__/parquet_partition_2/**', '__TEST_DIR__/t.parquet']) LIMIT 1;

COPY t TO '__TEST_DIR__/csv_partition_1' WITH (partition_by (year), overwrite_or_ignore, write_partition_columns);

SELECT COUNT(*) FROM GLOB('__TEST_DIR__/csv_partition_1/**');

SELECT ALIAS(COLUMNS(*)) FROM READ_CSV_AUTO('__TEST_DIR__/csv_partition_1/**', names = ['a', 'b', 'c', 'd'], HIVE_PARTITIONING = 0) LIMIT 1;

SELECT ALIAS(COLUMNS(*)) FROM READ_CSV_AUTO('__TEST_DIR__/csv_partition_1/**', names = ['a', 'b', 'c', 'd'], HIVE_PARTITIONING = 1) LIMIT 1;

SELECT ALIAS(COLUMNS(*)) FROM READ_CSV_AUTO('__TEST_DIR__/csv_partition_1/**', names = ['a', 'b', 'c', 'd']) LIMIT 1;

COPY t TO '__TEST_DIR__/csv_partition_2' WITH (partition_by (year, month), overwrite_or_ignore, write_partition_columns);

SELECT COUNT(*) FROM GLOB('__TEST_DIR__/csv_partition_2/**');

SELECT ALIAS(COLUMNS(*)) FROM READ_CSV_AUTO('__TEST_DIR__/csv_partition_2/**', names = ['a', 'b', 'c', 'd'], HIVE_PARTITIONING = 0) LIMIT 1;

SELECT ALIAS(COLUMNS(*)) FROM READ_CSV_AUTO('__TEST_DIR__/csv_partition_2/**', names = ['a', 'b', 'c', 'd'], HIVE_PARTITIONING = 1) LIMIT 1;

SELECT ALIAS(COLUMNS(*)) FROM READ_CSV_AUTO('__TEST_DIR__/csv_partition_2/**', names = ['a', 'b', 'c', 'd']) LIMIT 1;

SELECT COUNT(*) FROM GLOB('__TEST_DIR__/t.csv');

COPY t TO '__TEST_DIR__/bad_file.csv';

SELECT COUNT(*) FROM GLOB('__TEST_DIR__/bad_file.csv');

SELECT ALIAS(COLUMNS(*)) FROM READ_CSV_AUTO('__TEST_DIR__/bad_file.csv', names = ['a', 'b', 'c', 'd'], HIVE_PARTITIONING = 0) LIMIT 1;

SELECT ALIAS(COLUMNS(*)) FROM READ_CSV_AUTO('__TEST_DIR__/bad_file.csv', names = ['a', 'b', 'c', 'd'], HIVE_PARTITIONING = 1) LIMIT 1;

SELECT ALIAS(COLUMNS(*)) FROM READ_CSV_AUTO('__TEST_DIR__/bad_file.csv', names = ['a', 'b', 'c', 'd']) LIMIT 1;

SELECT ALIAS(COLUMNS(*)) FROM READ_CSV_AUTO(['__TEST_DIR__/csv_partition_2/**', '__TEST_DIR__/bad_file.csv'], HIVE_PARTITIONING = 0, names = ['a', 'b', 'c', 'd']) LIMIT 1;

SELECT ALIAS(COLUMNS(*)) FROM READ_CSV_AUTO(['__TEST_DIR__/csv_partition_2/**', '__TEST_DIR__/bad_file.csv'], HIVE_PARTITIONING = 1, names = ['a', 'b', 'c', 'd']) LIMIT 1;

SELECT ALIAS(COLUMNS(*)) FROM READ_CSV_AUTO(['__TEST_DIR__/csv_partition_2/**', '__TEST_DIR__/bad_file.csv'], names = ['a', 'b', 'c', 'd']) LIMIT 1;

COPY t TO '__TEST_DIR__/parquet_partition_1' WITH (format parquet, partition_by (year), overwrite_or_ignore, write_partition_columns);

SELECT COUNT(*) FROM GLOB('__TEST_DIR__/parquet_partition_1/**');

SELECT ALIAS(COLUMNS(*)) FROM READ_PARQUET('__TEST_DIR__/parquet_partition_1/**', HIVE_PARTITIONING = 0) LIMIT 1;

SELECT ALIAS(COLUMNS(*)) FROM READ_PARQUET('__TEST_DIR__/parquet_partition_1/**', HIVE_PARTITIONING = 1) LIMIT 1;

SELECT ALIAS(COLUMNS(*)) FROM READ_PARQUET('__TEST_DIR__/parquet_partition_1/**') LIMIT 1;

COPY t TO '__TEST_DIR__/parquet_partition_2' WITH (format parquet, partition_by (year, month), overwrite_or_ignore, write_partition_columns);

SELECT COUNT(*) FROM GLOB('__TEST_DIR__/parquet_partition_2/**');

SELECT ALIAS(COLUMNS(*)) FROM READ_PARQUET('__TEST_DIR__/parquet_partition_2/**', HIVE_PARTITIONING = 0) LIMIT 1;

SELECT ALIAS(COLUMNS(*)) FROM READ_PARQUET('__TEST_DIR__/parquet_partition_2/**', HIVE_PARTITIONING = 1) LIMIT 1;

SELECT ALIAS(COLUMNS(*)) FROM READ_PARQUET('__TEST_DIR__/parquet_partition_2/**') LIMIT 1;

COPY t TO '__TEST_DIR__/t.parquet' WITH (format parquet);

SELECT COUNT(*) FROM GLOB('__TEST_DIR__/t.parquet');

SELECT ALIAS(COLUMNS(*)) FROM READ_PARQUET('__TEST_DIR__/t.parquet', HIVE_PARTITIONING = 0) LIMIT 1;

SELECT ALIAS(COLUMNS(*)) FROM READ_PARQUET('__TEST_DIR__/t.parquet', HIVE_PARTITIONING = 1) LIMIT 1;

SELECT ALIAS(COLUMNS(*)) FROM READ_PARQUET('__TEST_DIR__/t.parquet') LIMIT 1;

SELECT ALIAS(COLUMNS(*)) FROM READ_PARQUET(['__TEST_DIR__/parquet_partition_2/**', '__TEST_DIR__/t.parquet'], HIVE_PARTITIONING = 0) LIMIT 1;

SELECT ALIAS(COLUMNS(*)) FROM READ_PARQUET(['__TEST_DIR__/parquet_partition_2/**', '__TEST_DIR__/t.parquet'], HIVE_PARTITIONING = 1) LIMIT 1;

SELECT ALIAS(COLUMNS(*)) FROM READ_PARQUET(['__TEST_DIR__/parquet_partition_2/**', '__TEST_DIR__/t.parquet']) LIMIT 1;

SELECT i, j, k, x FROM READ_PARQUET('data/parquet-testing/hive-partitioning/union_by_name/*/*.parquet', hive_partitioning = 0, union_by_name = 1) ORDER BY j, x;

SELECT i, j, k, x FROM READ_PARQUET('data/parquet-testing/hive-partitioning/union_by_name/*/*.parquet', hive_partitioning = 1, union_by_name = 1) ORDER BY j, x;

SELECT i, j, k, x FROM READ_PARQUET('data/parquet-testing/hive-partitioning/union_by_name/*/*.parquet', union_by_name = 1) ORDER BY j, x;

CREATE TABLE test AS SELECT i % 2 AS part_col, (i + 1) % 5 AS value_col, i AS value2_col FROM RANGE(0, 10) AS tbl(i);

COPY test TO '__TEST_DIR__/partitioned1' WITH (FORMAT PARQUET, PARTITION_BY (part_col));

SELECT part_col, value_col, value2_col FROM "__TEST_DIR__/partitioned1/part_col=0/*.parquet" ORDER BY value2_col;

SELECT part_col, value_col, value2_col FROM "__TEST_DIR__/partitioned1/part_col=1/*.parquet" ORDER BY value2_col;

COPY (SELECT * EXCLUDE (part_col), CAST('prefix-' AS TEXT) || CAST(part_col AS TEXT) AS part_col FROM test) TO '__TEST_DIR__/partitioned2' WITH (FORMAT PARQUET, PARTITION_BY (part_col));

SELECT part_col, value_col, value2_col FROM "__TEST_DIR__/partitioned2/part_col=prefix-0/*.parquet" ORDER BY value2_col;

SELECT part_col, value_col, value2_col FROM "__TEST_DIR__/partitioned2/part_col=prefix-1/*.parquet" ORDER BY value2_col;

COPY test TO '__TEST_DIR__/partitioned3' WITH (FORMAT PARQUET, PARTITION_BY '*', WRITE_PARTITION_COLUMNS);

SELECT MIN(value2_col) AS min_val FROM PARQUET_SCAN('__TEST_DIR__/partitioned3/part_col=*/value_col=*/value2_col=*/*.parquet', FILENAME = 1) GROUP BY filename ORDER BY min_val;

COPY test TO '__TEST_DIR__/partitioned4' WITH (FORMAT PARQUET, PARTITION_BY part_col);

SELECT part_col, value_col, value2_col FROM PARQUET_SCAN('__TEST_DIR__/partitioned4/part_col=*/*.parquet', HIVE_PARTITIONING = 1) WHERE part_col = 0 ORDER BY value2_col;

COPY test TO '__TEST_DIR__/partitioned4' WITH (FORMAT PARQUET, PARTITION_BY part_col);

COPY test TO '__TEST_DIR__/partitioned5/' WITH (FORMAT PARQUET, PARTITION_BY part_col);

SELECT part_col, value_col, value2_col FROM "__TEST_DIR__/partitioned5/part_col=0/*.parquet" ORDER BY value2_col;

COPY test TO '__TEST_DIR__/partitioned6' WITH (FORMAT PARQUET, PARTITION_BY part_col, USE_TMP_FILE TRUE);

COPY test TO '__TEST_DIR__/partitioned6' WITH (FORMAT PARQUET, PARTITION_BY part_col, PER_THREAD_OUTPUT TRUE);

COPY test TO '__TEST_DIR__/partitioned7' WITH (FORMAT CSV, PARTITION_BY part_col);

SELECT part_col, value_col, value2_col FROM "__TEST_DIR__/partitioned7/part_col=0/*.csv" ORDER BY value2_col;

SELECT part_col, value_col, value2_col FROM "__TEST_DIR__/partitioned7/part_col=1/*.csv" ORDER BY value2_col;

COPY test TO '__TEST_DIR__/partitioned8' WITH (FORMAT PARQUET, PARTITION_BY pArt_cOl);

SELECT part_col, value_col, value2_col FROM "__TEST_DIR__/partitioned8/part_col=0/*.parquet" ORDER BY value2_cOl;

COPY test TO '__TEST_DIR__/partitioned9' WITH (FORMAT PARQUET, PARTITION_BY (part_col, value_col));

SELECT MIN(value2_col) AS min_val FROM PARQUET_SCAN('__TEST_DIR__/partitioned9/part_col=*/value_col=*/*.parquet', FILENAME = 1) GROUP BY filename ORDER BY min_val;

COPY test TO '__TEST_DIR__/partitioned10' WITH (FORMAT PARQUET, PARTITION_BY (value_col, part_col));

SELECT MIN(value2_col) AS min_val FROM PARQUET_SCAN('__TEST_DIR__/partitioned10/value_col=*/part_col=*/*.parquet', FILENAME = 1) GROUP BY filename ORDER BY min_val;

PRAGMA memory_limit = '100mb';

COPY (SELECT i % CAST(2 AS INT) AS part_col, CAST(i AS INT) FROM RANGE(0, 25000000) AS tbl(i)) TO '__TEST_DIR__/partitioned_memory_spill' WITH (FORMAT parquet, PARTITION_BY part_col);

PRAGMA memory_limit = '-1';

CALL dbgen(sf=1);

COPY lineitem TO '__TEST_DIR__/lineitem_sf1_partitioned' WITH (FORMAT PARQUET, PARTITION_BY (l_linestatus, l_returnflag));

DROP TABLE lineitem;

DROP TABLE lineitem;

DROP TABLE lineitem;

DROP TABLE lineitem;

COPY (SELECT 42 AS part_col, 43 AS value_col) TO '__TEST_DIR__/overwrite_test' WITH (FORMAT PARQUET, PARTITION_BY (part_col));

COPY (SELECT 84 AS part_col, 85 AS value_col) TO '__TEST_DIR__/overwrite_test' WITH (FORMAT PARQUET, PARTITION_BY (part_col));

COPY (SELECT 84 AS part_col, 85 AS value_col) TO '__TEST_DIR__/overwrite_test' WITH (FORMAT PARQUET, PARTITION_BY (part_col), OVERWRITE 1);

SELECT * FROM "__TEST_DIR__/overwrite_test/**/*.parquet";

COPY (SELECT 42 AS part_col) TO '__TEST_DIR__/overwrite_test2' WITH (FORMAT PARQUET);

COPY (SELECT 84 AS part_col, 85 AS value_col) TO '__TEST_DIR__/overwrite_test2' WITH (FORMAT PARQUET, PARTITION_BY (part_col));

COPY (SELECT 84 AS part_col, 85 AS value_col) TO '__TEST_DIR__/overwrite_test2' WITH (FORMAT PARQUET, PARTITION_BY (part_col), OVERWRITE 1);

SELECT * FROM "__TEST_DIR__/overwrite_test2/**/*.parquet";

COPY (SELECT 84 AS part_col) TO '__TEST_DIR__/overwrite_test' WITH (FORMAT PARQUET, PARTITION_BY (part_col), OVERWRITE 1, OVERWRITE_OR_IGNORE 1);

CREATE TABLE sensor_data (ts TIMESTAMP, value INT);

INSERT INTO sensor_data VALUES (CAST('2000-01-01 01:02:03' AS TIMESTAMP), 42), (CAST('2000-02-01 01:02:03' AS TIMESTAMP), 100), (CAST('2000-03-01 12:11:10' AS TIMESTAMP), 1000);

COPY (SELECT YEAR(ts) AS year, MONTH(ts) AS month, * FROM sensor_data) TO '__TEST_DIR__/partitioned_append' WITH (FORMAT PARQUET, PARTITION_BY (year, month), APPEND);

SELECT year, month, SUM(value) FROM "__TEST_DIR__/partitioned_append/**/*.parquet" GROUP BY ALL ORDER BY ALL;

DELETE FROM sensor_data;

INSERT INTO sensor_data VALUES (CAST('2000-01-01 02:02:03' AS TIMESTAMP), 62), (CAST('2000-03-01 13:11:10' AS TIMESTAMP), 50);

COPY (SELECT YEAR(ts) AS year, MONTH(ts) AS month, * FROM sensor_data) TO '__TEST_DIR__/partitioned_append' WITH (FORMAT PARQUET, PARTITION_BY (year, month), APPEND, FILENAME_PATTERN 'my_pattern_{uuid}');

SELECT year, month, SUM(value) FROM "__TEST_DIR__/partitioned_append/**/*.parquet" GROUP BY ALL ORDER BY ALL;

COPY (SELECT YEAR(ts) AS year, MONTH(ts) AS month, * FROM sensor_data) TO '__TEST_DIR__/partitioned_append' WITH (FORMAT PARQUET, PARTITION_BY (year, month), FILENAME_PATTERN 'my_pattern_{uuid}', APPEND);

SELECT year, month, SUM(value) FROM "__TEST_DIR__/partitioned_append/**/*.parquet" GROUP BY ALL ORDER BY ALL;

COPY (SELECT YEAR(ts) AS year, MONTH(ts) AS month, * FROM sensor_data) TO '__TEST_DIR__/partitioned_append' WITH (FORMAT PARQUET, PARTITION_BY (year, month), APPEND, FILENAME_PATTERN 'my_pattern_without_uuid');

SELECT * FROM "data/parquet-testing/hive-partitioning/ci-column-names/**/*.parquet" ORDER BY ALL;

SELECT * FROM PARQUET_SCAN('data/parquet-testing/hive-partitioning/duplicate_names/**/*.parquet') ORDER BY ALL;

CREATE SEQUENCE seq;

CREATE TABLE weird_tbl (id INT DEFAULT NEXTVAL('seq'), key TEXT);

INSERT INTO weird_tbl (key) VALUES ('/'), ('\/\/'), ('==='), ('value with strings'), ('?:&'), ('🦆'), ('==='), ('===');

COPY weird_tbl TO '__TEST_DIR__/escaped_partitions' WITH (FORMAT PARQUET, PARTITION_BY (key));

SELECT key, COUNT(*) FROM PARQUET_SCAN('__TEST_DIR__/escaped_partitions/**/*.parquet') GROUP BY ALL ORDER BY ALL;

ALTER TABLE weird_tbl RENAME COLUMN key TO "=/ \\/";

COPY weird_tbl TO '__TEST_DIR__/escaped_partitions_names' WITH (FORMAT PARQUET, PARTITION_BY ("=/ \\/"));

SELECT "=/ \\/", COUNT(*) FROM PARQUET_SCAN('__TEST_DIR__/escaped_partitions_names/**/*.parquet') GROUP BY ALL ORDER BY ALL;

COPY weird_tbl TO '__TEST_DIR__/escaped_partitions_names' WITH (FORMAT PARQUET, PARTITION_BY ("=/ \\/"), OVERWRITE, WRITE_PARTITION_COLUMNS);

SELECT "=/ \\/", COUNT(*) FROM PARQUET_SCAN('__TEST_DIR__/escaped_partitions_names/**/*.parquet') GROUP BY ALL ORDER BY ALL;

CREATE TABLE tbl AS SELECT i // 1000 AS partition, i FROM RANGE(0, 10000) AS t(i);

COPY tbl TO '__TEST_DIR__/partition_join_pushdown' WITH (FORMAT parquet, PARTITION_BY (partition));

EXPLAIN ANALYZE SELECT COUNT(*), MIN(partition), MAX(partition), SUM(i)
FROM '__TEST_DIR__/partition_join_pushdown/**/*.parquet';

SELECT COUNT(*), MIN(partition), MAX(partition), SUM(i) FROM "__TEST_DIR__/partition_join_pushdown/**/*.parquet" WHERE partition = (SELECT MAX(partition) FROM tbl);

EXPLAIN ANALYZE SELECT COUNT(*), MIN(partition), MAX(partition), SUM(i)
FROM '__TEST_DIR__/partition_join_pushdown/**/*.parquet'
WHERE partition=(SELECT MAX(partition) FROM tbl);

SELECT COUNT(*), MIN(partition), MAX(partition), SUM(i) FROM "__TEST_DIR__/partition_join_pushdown/**/*.parquet" WHERE i >= 9980 AND partition = (SELECT MAX(partition) FROM tbl);

SELECT COUNT(*), MIN(partition), MAX(partition), SUM(i) FROM "__TEST_DIR__/partition_join_pushdown/**/*.parquet" WHERE partition > 5 AND partition = (SELECT MAX(partition) FROM tbl);

CREATE TABLE tbl2 AS SELECT CAST((CAST('2000-01-01' AS DATE) + INTERVAL (i // 2000) YEARS) AS DATE) AS part1, i % 2 AS part2, i FROM RANGE(0, 10000) AS t(i);

COPY tbl2 TO '__TEST_DIR__/partition_join_pushdown_multi' WITH (FORMAT parquet, PARTITION_BY (part1, part2));

SELECT COUNT(*), MIN(part1), MAX(part1), MIN(part2), MAX(part2), SUM(i) FROM "__TEST_DIR__/partition_join_pushdown_multi/**/*.parquet" WHERE part1 = (SELECT MAX(part1) FROM tbl2) AND part2 = (SELECT MAX(part2) FROM tbl2);

SELECT COUNT(*), MIN(part2), MAX(part2), MIN(part1), MAX(part1), SUM(i) FROM "__TEST_DIR__/partition_join_pushdown_multi/**/*.parquet" WHERE part2 = (SELECT MAX(part2) FROM tbl2) AND part1 = CAST('2004-01-01' AS DATE);

SELECT COUNT(*) FROM "__TEST_DIR__/partition_join_pushdown_multi/**/*.parquet" WHERE part2 = (SELECT MAX(part2) FROM tbl2);

CREATE TABLE t AS SELECT 2000 + i % 10 AS year, 1 + i % 3 AS month, i % 4 AS c, i % 5 AS d FROM RANGE(0, 20) AS tbl(i);

COPY t TO '__TEST_DIR__/partition_rec_cte' WITH (FORMAT PARQUET, PARTITION_BY (year, month));

COPY t TO '__TEST_DIR__/partition_rec_cte' WITH (FORMAT PARQUET, PARTITION_BY (year, month));

WITH RECURSIVE cte AS (SELECT 0 AS count, 1999 AS selected_year UNION ALL SELECT COUNT(*) AS count, MAX(partitioned_tbl.year) FROM partitioned_tbl, (SELECT MAX(selected_year) AS next_year FROM cte) WHERE partitioned_tbl.year = (SELECT MAX(selected_year) + 1 FROM cte) HAVING COUNT(*) > 0) SELECT SUM(count), MIN(selected_year), MAX(selected_year) FROM cte WHERE count > 0;

CREATE TABLE partitioned_tbl AS SELECT i % 2 AS partition, i AS col1, i // 7 AS col2, CAST((i % 3) AS TEXT) AS col3 FROM RANGE(0, 10000) AS t(i);

COPY partitioned_tbl TO '__TEST_DIR__/partition_group_by' WITH (FORMAT parquet, PARTITION_BY (partition));

DROP TABLE partitioned_tbl;

CREATE VIEW partitioned_tbl AS SELECT * FROM "__TEST_DIR__/partition_group_by/**/*.parquet";

SELECT partition, SUM(col1) FROM partitioned_tbl GROUP BY partition ORDER BY ALL;

EXPLAIN SELECT partition, SUM(col1)
FROM partitioned_tbl
GROUP BY partition
ORDER BY ALL;

SELECT partition, COUNT(DISTINCT col2) FROM partitioned_tbl GROUP BY partition ORDER BY ALL;

SELECT partition, SUM(col1) FROM partitioned_tbl GROUP BY GROUPING SETS ((), (partition)) ORDER BY ALL;

SELECT partition, SUM(col1) FILTER(WHERE col2 % 7 > 2) FROM partitioned_tbl GROUP BY partition ORDER BY ALL;

SELECT SUM(col1), partition FROM partitioned_tbl GROUP BY partition ORDER BY ALL;

SELECT partition, SUM(col1) FROM partitioned_tbl WHERE col2 > 100 GROUP BY partition ORDER BY ALL;

CREATE TABLE partitioned_tbl2 AS SELECT i % 2 AS partition1, i % 3 AS partition2, i AS col1, i + 1 AS col2 FROM RANGE(0, 10000) AS t(i);

COPY partitioned_tbl2 TO '__TEST_DIR__/partition_group_by_multiple' WITH (FORMAT parquet, PARTITION_BY (partition1, partition2));

DROP TABLE partitioned_tbl2;

CREATE VIEW partitioned_tbl2 AS SELECT * FROM "__TEST_DIR__/partition_group_by_multiple/**/*.parquet";

SELECT partition1, partition2, SUM(col1) FROM partitioned_tbl2 GROUP BY partition1, partition2 ORDER BY ALL;

SELECT partition1, SUM(col1) FROM partitioned_tbl2 GROUP BY partition1 ORDER BY ALL;

SELECT partition2, SUM(col1) FROM partitioned_tbl2 GROUP BY partition2 ORDER BY ALL;

SELECT partition1, SUM(col1) FROM partitioned_tbl2 WHERE partition2 = 0 GROUP BY partition1 ORDER BY ALL;

SELECT partition1, partition2, SUM(col1) FROM partitioned_tbl2 GROUP BY GROUPING SETS ((partition1), (partition2)) ORDER BY ALL;

CALL dbgen(sf=1);

SET partitioned_write_flush_threshold = 10000;

COPY lineitem TO '__TEST_DIR__/lineitem_partitioned_parquet' WITH (FORMAT PARQUET, PARTITION_BY (l_returnflag, l_linestatus));

COPY lineitem TO '__TEST_DIR__/lineitem_partitioned_csv' WITH (FORMAT CSV, PARTITION_BY (l_returnflag, l_linestatus));

DROP TABLE lineitem;

CREATE VIEW lineitem AS FROM '__TEST_DIR__/lineitem_partitioned_parquet/**/*.parquet'
loop i 1 9;

CREATE VIEW lineitem AS FROM '__TEST_DIR__/lineitem_partitioned_parquet/**/*.parquet'
loop i 1 9;

CREATE VIEW lineitem AS FROM '__TEST_DIR__/lineitem_partitioned_parquet/**/*.parquet'
loop i 1 9;

DROP VIEW lineitem;

CREATE TABLE lineitem AS FROM read_csv('__TEST_DIR__/lineitem_partitioned_csv/**/*.csv')
loop i 1 9;

CREATE TABLE lineitem AS FROM read_csv('__TEST_DIR__/lineitem_partitioned_csv/**/*.csv')
loop i 1 9;

CREATE TABLE lineitem AS FROM read_csv('__TEST_DIR__/lineitem_partitioned_csv/**/*.csv')
loop i 1 9;

COPY (SELECT NULL AS i, NULL AS j FROM RANGE(0, 100000)) TO '__TEST_DIR__/issue6304_null' WITH (format parquet, partition_by (i), overwrite_or_ignore);

COPY (SELECT 1 AS i, 2 AS j FROM RANGE(0, 100000)) TO '__TEST_DIR__/issue6304_constant' WITH (format parquet, partition_by (i), overwrite_or_ignore);

COPY (SELECT NULL AS i FROM RANGE(0, 100000)) TO '__TEST_DIR__/issue6304_null' WITH (format parquet, partition_by (i), overwrite_or_ignore, write_partition_columns);

CREATE TABLE test AS SELECT i % 2 AS part_col, (i + 1) % 5 AS value_col, i AS value2_col FROM RANGE(0, 10) AS tbl(i);

COPY test TO '__TEST_DIR__/no-part-cols' WITH (FORMAT PARQUET, PARTITION_BY (part_col));

SELECT part_col, value_col, value2_col FROM "__TEST_DIR__/no-part-cols/part_col=0/*.parquet" ORDER BY value2_col;

COPY test TO '__TEST_DIR__/no-part-cols-explicit' WITH (FORMAT PARQUET, PARTITION_BY (part_col), WRITE_PARTITION_COLUMNS FALSE);

SELECT part_col, value_col, value2_col FROM "__TEST_DIR__/no-part-cols-explicit/part_col=0/*.parquet" ORDER BY value2_col;

COPY test TO '__TEST_DIR__/no-part-cols2' WITH (FORMAT PARQUET, PARTITION_BY (part_col, value_col));

SELECT part_col, value_col, value2_col FROM "__TEST_DIR__/no-part-cols2/part_col=0/value_col=*/*.parquet" ORDER BY value2_col;

COPY (SELECT * EXCLUDE (part_col), CAST('prefix-' AS TEXT) || CAST(part_col AS TEXT) AS part_col FROM test) TO '__TEST_DIR__/no-part-cols3' WITH (FORMAT PARQUET, PARTITION_BY (part_col));

SELECT part_col, value_col, value2_col FROM "__TEST_DIR__/no-part-cols3/part_col=prefix-0/*.parquet" ORDER BY value2_col;

COPY (SELECT 1 AS part_col, 2 AS value_col, 3 AS value2_col, 4 AS value3_col, 5 AS value4_col, 6 AS value5_col, 7 AS value6_col, 8 AS value7_col, 9 AS value8_col, 10 AS value9_col) TO '__TEST_DIR__/no-part-cols4' WITH (FORMAT PARQUET, PARTITION_BY (part_col));

SELECT part_col, value_col, value2_col, value3_col, value4_col, value5_col, value6_col, value7_col, value8_col, value9_col FROM "__TEST_DIR__/no-part-cols4/part_col=1/*.parquet" ORDER BY 1;

COPY (SELECT 1 AS part_col, 2 AS value_col, 3 AS value2_col, 4 AS value3_col, 5 AS value4_col, 6 AS value5_col, 7 AS value6_col, 8 AS value7_col, 9 AS value8_col, 10 AS value9_col) TO '__TEST_DIR__/no-part-cols5' WITH (FORMAT PARQUET, PARTITION_BY (value9_col));

SELECT part_col, value_col, value2_col, value3_col, value4_col, value5_col, value6_col, value7_col, value8_col, value9_col FROM "__TEST_DIR__/no-part-cols5/value9_col=*/*.parquet" ORDER BY 1;

COPY (SELECT 1 AS part_col, 2 AS value_col, 3 AS value2_col, 4 AS value3_col, 5 AS value4_col, 6 AS value5_col, 7 AS value6_col, 8 AS value7_col, 9 AS value8_col, 10 AS value9_col) TO '__TEST_DIR__/no-part-cols6' WITH (FORMAT PARQUET, PARTITION_BY (value8_col, value9_col));

SELECT part_col, value_col, value2_col, value3_col, value4_col, value5_col, value6_col, value7_col, value8_col, value9_col FROM "__TEST_DIR__/no-part-cols6/value8_col=*/value9_col=*/*.parquet" ORDER BY 1;

COPY (SELECT 1 AS part_col, 2 AS value_col, 3 AS value2_col, 4 AS value3_col, 5 AS value4_col, 6 AS value5_col, 7 AS value6_col, 8 AS value7_col, 9 AS value8_col, 10 AS value9_col) TO '__TEST_DIR__/no-part-cols7' WITH (FORMAT PARQUET, PARTITION_BY (value9_col, value8_col, value7_col));

SELECT part_col, value_col, value2_col, value3_col, value4_col, value5_col, value6_col, value7_col, value8_col, value9_col FROM "__TEST_DIR__/no-part-cols7/value9_col=*/value8_col=*/value7_col=*/*.parquet" ORDER BY 1;

COPY test TO '__TEST_DIR__/no-part-cols8' WITH (FORMAT PARQUET, PARTITION_BY (part_col, value_col, value2_col));

COPY test TO '__TEST_DIR__/no-part-cols8' WITH (FORMAT PARQUET, OVERWRITE, PARTITION_BY (part_col, value_col, value2_col), WRITE_PARTITION_COLUMNS);

SELECT part_col, value_col, value2_col FROM "__TEST_DIR__/no-part-cols8/part_col=0/value_col=*/value2_col=*/*.parquet" ORDER BY value2_col;

COPY test TO '__TEST_DIR__/no-part-cols9' WITH (FORMAT PARQUET, PARTITION_BY '*');

COPY test TO '__TEST_DIR__/no-part-cols9' WITH (FORMAT PARQUET, PARTITION_BY '*', OVERWRITE, WRITE_PARTITION_COLUMNS);

SELECT part_col, value_col, value2_col FROM "__TEST_DIR__/no-part-cols9/part_col=0/value_col=*/value2_col=*/*.parquet" ORDER BY value2_col;

COPY test TO '__TEST_DIR__/no-part-cols9' WITH (FORMAT PARQUET, PARTITION_BY '*', WRITE_PARTITION_COLUMNS FALSE);

COPY test TO '__TEST_DIR__/csv-no-part-cols' WITH (FORMAT CSV, PARTITION_BY (part_col));

SELECT part_col, value_col, value2_col FROM "__TEST_DIR__/csv-no-part-cols/part_col=0/*.csv" ORDER BY value2_col;

COPY test TO '__TEST_DIR__/csv-no-part-cols-explicit' WITH (FORMAT CSV, PARTITION_BY (part_col), WRITE_PARTITION_COLUMNS FALSE);

SELECT part_col, value_col, value2_col FROM "__TEST_DIR__/csv-no-part-cols-explicit/part_col=0/*.csv" ORDER BY value2_col;

COPY test TO '__TEST_DIR__/csv-no-part-cols2' WITH (FORMAT CSV, PARTITION_BY (part_col, value_col));

SELECT part_col, value_col, value2_col FROM "__TEST_DIR__/csv-no-part-cols2/part_col=0/value_col=*/*.csv" ORDER BY value2_col;

COPY (SELECT * EXCLUDE (part_col), CAST('prefix-' AS TEXT) || CAST(part_col AS TEXT) AS part_col FROM test) TO '__TEST_DIR__/csv-no-part-cols3' WITH (FORMAT CSV, PARTITION_BY (part_col));

SELECT part_col, value_col, value2_col FROM "__TEST_DIR__/csv-no-part-cols3/part_col=prefix-0/*.csv" ORDER BY value2_col;

COPY (SELECT 1 AS part_col, 2 AS value_col, 3 AS value2_col, 4 AS value3_col, 5 AS value4_col, 6 AS value5_col, 7 AS value6_col, 8 AS value7_col, 9 AS value8_col, 10 AS value9_col) TO '__TEST_DIR__/csv-no-part-cols4' WITH (FORMAT CSV, PARTITION_BY (part_col));

SELECT part_col, value_col, value2_col, value3_col, value4_col, value5_col, value6_col, value7_col, value8_col, value9_col FROM "__TEST_DIR__/csv-no-part-cols4/part_col=1/*.csv" ORDER BY 1;

COPY (SELECT 1 AS part_col, 2 AS value_col, 3 AS value2_col, 4 AS value3_col, 5 AS value4_col, 6 AS value5_col, 7 AS value6_col, 8 AS value7_col, 9 AS value8_col, 10 AS value9_col) TO '__TEST_DIR__/csv-no-part-cols5' WITH (FORMAT CSV, PARTITION_BY (value9_col));

SELECT part_col, value_col, value2_col, value3_col, value4_col, value5_col, value6_col, value7_col, value8_col, value9_col FROM "__TEST_DIR__/csv-no-part-cols5/value9_col=*/*.csv" ORDER BY 1;

COPY (SELECT 1 AS part_col, 2 AS value_col, 3 AS value2_col, 4 AS value3_col, 5 AS value4_col, 6 AS value5_col, 7 AS value6_col, 8 AS value7_col, 9 AS value8_col, 10 AS value9_col) TO '__TEST_DIR__/csv-no-part-cols6' WITH (FORMAT CSV, PARTITION_BY (value8_col, value9_col));

SELECT part_col, value_col, value2_col, value3_col, value4_col, value5_col, value6_col, value7_col, value8_col, value9_col FROM "__TEST_DIR__/csv-no-part-cols6/value8_col=*/value9_col=*/*.csv" ORDER BY 1;

COPY (SELECT 1 AS part_col, 2 AS value_col, 3 AS value2_col, 4 AS value3_col, 5 AS value4_col, 6 AS value5_col, 7 AS value6_col, 8 AS value7_col, 9 AS value8_col, 10 AS value9_col) TO '__TEST_DIR__/csv-no-part-cols7' WITH (FORMAT CSV, PARTITION_BY (value9_col, value8_col, value7_col));

SELECT part_col, value_col, value2_col, value3_col, value4_col, value5_col, value6_col, value7_col, value8_col, value9_col FROM "__TEST_DIR__/csv-no-part-cols7/value9_col=*/value8_col=*/value7_col=*/*.csv" ORDER BY 1;

COPY test TO '__TEST_DIR__/csv-no-part-cols8' WITH (FORMAT CSV, PARTITION_BY (part_col, value_col, value2_col));

COPY test TO '__TEST_DIR__/csv-no-part-cols8' WITH (FORMAT CSV, PARTITION_BY (part_col, value_col, value2_col), OVERWRITE, WRITE_PARTITION_COLUMNS);

SELECT part_col, value_col, value2_col FROM "__TEST_DIR__/csv-no-part-cols8/part_col=0/value_col=*/value2_col=*/*.csv" ORDER BY value2_col;

COPY test TO '__TEST_DIR__/csv-no-part-cols9' WITH (FORMAT CSV, PARTITION_BY '*');

COPY test TO '__TEST_DIR__/csv-no-part-cols9' WITH (FORMAT CSV, PARTITION_BY '*', OVERWRITE, WRITE_PARTITION_COLUMNS);

SELECT part_col, value_col, value2_col FROM "__TEST_DIR__/csv-no-part-cols9/part_col=0/value_col=*/value2_col=*/*.csv" ORDER BY value2_col;

COPY test TO '__TEST_DIR__/csv-no-part-cols9' WITH (FORMAT CSV, PARTITION_BY '*', WRITE_PARTITION_COLUMNS FALSE);

CREATE TABLE test AS SELECT * FROM RANGE(0, 10) AS tbl(i);

SET s3_secret_access_key = 'false_pw';
SET s3_access_key_id = 'false_key';

SET s3_url_style = 'path';

COPY test TO 's3://test-bucket/s3_query_params/test.csv';

COPY test TO 's3://test-bucket/s3_query_params/test.csv?s3_access_key_id=${AWS_ACCESS_KEY_ID}&s3_secret_access_key=${AWS_SECRET_ACCESS_KEY}';

SELECT i FROM "s3://test-bucket/s3_query_params/test.csv?s3_access_key_id=${AWS_ACCESS_KEY_ID}&s3_secret_access_key=${AWS_SECRET_ACCESS_KEY}" LIMIT 3;

COPY test TO 's3://test-bucket/s3_query_params/test.parquet?s3_access_key_id=${AWS_ACCESS_KEY_ID}&s3_secret_access_key=${AWS_SECRET_ACCESS_KEY}' WITH (FORMAT 'parquet');

SELECT i FROM "s3://test-bucket/s3_query_params/test.parquet?s3_access_key_id=${AWS_ACCESS_KEY_ID}&s3_secret_access_key=${AWS_SECRET_ACCESS_KEY}" LIMIT 3;

SELECT i FROM "s3://test-bucket/s3_query_params/*.parquet?s3_access_key_id=${AWS_ACCESS_KEY_ID}&s3_secret_access_key=${AWS_SECRET_ACCESS_KEY}" LIMIT 3;

SELECT CURRENT_SETTING('s3_access_key_id');

SELECT CURRENT_SETTING('s3_secret_access_key');

CREATE TABLE test_2 AS SELECT * FROM RANGE(100, 110) AS tbl(j);

COPY test_2 TO 's3://test-bucket/s3_query_params/test_2.csv?s3_access_key_id=minio_duckdb_user_2&s3_secret_access_key=minio_duckdb_user_2_password';

SELECT j FROM "s3://test-bucket/s3_query_params/test_2.csv?s3_access_key_id=minio_duckdb_user_2&s3_secret_access_key=minio_duckdb_user_2_password" LIMIT 3;

SELECT T1.i, T2.j FROM "s3://test-bucket/s3_query_params/test.parquet?s3_access_key_id=${AWS_ACCESS_KEY_ID}&s3_secret_access_key=${AWS_SECRET_ACCESS_KEY}" AS T1 INNER JOIN "s3://test-bucket/s3_query_params/test_2.csv?s3_access_key_id=minio_duckdb_user_2&s3_secret_access_key=minio_duckdb_user_2_password" AS T2 ON T1.i + 100 = T2.j LIMIT 3;

SET s3_secret_access_key = '${AWS_SECRET_ACCESS_KEY}';
SET s3_access_key_id = '${AWS_ACCESS_KEY_ID}';

SET s3_region = 'false_region';

SELECT i FROM "s3://test-bucket/s3_query_params/test.parquet?s3_region=${AWS_DEFAULT_REGION}" LIMIT 3;

SET s3_region = '${AWS_DEFAULT_REGION}';

SET s3_endpoint = 'false_endpoint';

SELECT i FROM "s3://test-bucket/s3_query_params/test.parquet?s3_endpoint=${DUCKDB_S3_ENDPOINT}" LIMIT 3;

SET s3_endpoint = '${DUCKDB_S3_ENDPOINT}';

SET s3_secret_access_key = 'false_acces_key';

SELECT i FROM "s3://test-bucket/s3_query_params/test.parquet?s3_secret_access_key=${AWS_SECRET_ACCESS_KEY}" LIMIT 3;

SET s3_secret_access_key = '${AWS_SECRET_ACCESS_KEY}';

SET s3_access_key_id = 'false_acces_key_id';

SELECT i FROM "s3://test-bucket/s3_query_params/test.parquet?s3_access_key_id=${AWS_ACCESS_KEY_ID}" LIMIT 3;

SET s3_access_key_id = '${AWS_ACCESS_KEY_ID}';

SELECT i FROM "s3://test-bucket/s3_query_params/test.parquet?s3_use_ssl=false" LIMIT 3;

SELECT i FROM "s3://test-bucket/s3_query_params/test.parquet?s3_use_ssl=bla" LIMIT 3;

SELECT i FROM "s3://test-bucket/s3_query_params/test.parquet?s3_url_style=vhost" LIMIT 3;

SET s3_url_style = 'path';

SET s3_access_key_id = 'false_id';
SET s3_region = 'false_region';

SELECT i FROM "s3://test-bucket/s3_query_params/test.parquet?s3_region=${AWS_DEFAULT_REGION}&s3_access_key_id=${AWS_ACCESS_KEY_ID}&s3_endpoint=${DUCKDB_S3_ENDPOINT}" LIMIT 3;

SET s3_access_key_id = '${AWS_ACCESS_KEY_ID}';
SET s3_region = '${AWS_DEFAULT_REGION}';

SELECT i FROM "s3://test-bucket/s3_query_params/test.parquet?s3_region=${AWS_DEFAULT_REGION}&s3_access_key_id=incorrect_key_id" LIMIT 3;

SELECT i FROM "s3://test-bucket/s3_query_params/test.parquet?s3_region=${AWS_DEFAULT_REGION}&bla=bla" LIMIT 3;

SET s3_endpoint = '${DUCKDB_S3_ENDPOINT}/test-bucket';
SET s3_url_style = 'path';

SELECT i FROM "s3://s3_query_params/test.parquet" LIMIT 3;

SET s3_url_style = 'vhost';

SELECT i FROM "s3://s3_query_params/test.parquet" LIMIT 3;

SET s3_endpoint = '${DUCKDB_S3_ENDPOINT}/s3_query_params';
SET s3_url_style = 'path';

SELECT i FROM "s3://test-bucket/test.parquet" LIMIT 3;

SET http_timeout = 120000;

SET http_retries = 6;

SET http_retries = 6;

SET s3_url_style='${urlstyle}'
foreach format parquet csv
foreach i 0 1
foreach j 0 1 2 3 4 5 6 7 8 9
foreach k 0 1 2 3 4 5 6 7 8 9
foreach l 0 1 2 3 4 5 6 7 8 9;

SET s3_url_style='${urlstyle}'
foreach format parquet csv
foreach i 0 1
foreach j 0 1 2 3 4 5 6 7 8 9
foreach k 0 1 2 3 4 5 6 7 8 9
foreach l 0 1 2 3 4 5 6 7 8 9;

SELECT SUM(column0) FROM "s3://test-bucket/parquet_glob_s3_paging/paging/t*-${urlstyle}-urls.${format}";

SELECT SUM(column0) FROM "s3://test-bucket/parquet_glob_s3_paging/paging/t*-${urlstyle}-urls.${format}";

SELECT SUM(column0) FROM "s3://test-bucket/parquet_glob_s3_paging/paging/t*-${urlstyle}-urls.${format}";

PRAGMA memory_limit = '200MB';

SET http_timeout = 120000;

SET http_retries = 6;

COPY (SELECT i % CAST(2 AS INT) AS part_col, CAST(i AS INT) FROM RANGE(0, 25000000) AS tbl(i)) TO 's3://test-bucket/partitioned_memory_spill' WITH (FORMAT parquet, PARTITION_BY part_col, overwrite_or_ignore TRUE);

PRAGMA memory_limit = '-1';

CALL dbgen(sf=1);

COPY lineitem TO 's3://test-bucket/lineitem_sf1_partitioned' WITH (FORMAT PARQUET, PARTITION_BY (l_returnflag, l_linestatus), overwrite_or_ignore TRUE);

DROP TABLE lineitem;

DROP TABLE lineitem;

DROP TABLE lineitem;

DROP TABLE lineitem;

PRAGMA enable_verification;

COPY (SELECT 'value-1' AS value) TO 's3://test-bucket/proxy-test/test.parquet';

SELECT * FROM "s3://test-bucket/proxy-test/test.parquet";

SET http_proxy = 'blabla:1337';

SET http_proxy_username = 'xxx';

SET http_proxy_password = 'yyy';

SELECT * FROM "s3://test-bucket/proxy-test/test.parquet";

SET http_proxy = '${HTTP_PROXY_PUBLIC}';

RESET AS http_proxy_username;

RESET AS http_proxy_password;

SELECT * FROM "s3://test-bucket/proxy-test/test.parquet";

SET http_proxy = 'http://${HTTP_PROXY_PUBLIC}';

SELECT * FROM "s3://test-bucket/proxy-test/test.parquet";

SET http_proxy = 'blabla:1337';

CREATE SECRET http1 (
TYPE HTTP,
http_proxy '${HTTP_PROXY_PUBLIC}'
);

SELECT * FROM "s3://test-bucket/proxy-test/test.parquet";

DROP SECRET http1
require-env HTTP_PROXY;

SELECT * FROM "s3://test-bucket/proxy-test/test.parquet";

CREATE SECRET http1 (
TYPE HTTP,
PROVIDER env
);

SELECT * FROM "s3://test-bucket/proxy-test/test.parquet";

DROP SECRET http1
require-env HTTP_PROXY_PRIVATE
require-env HTTP_PROXY_PRIVATE_USERNAME
require-env HTTP_PROXY_PRIVATE_PASSWORD;

CREATE SECRET http2 (
TYPE HTTP,
http_proxy '${HTTP_PROXY_PRIVATE}',
http_proxy_username '${HTTP_PROXY_PRIVATE_USERNAME}',
http_proxy_password '${HTTP_PROXY_PRIVATE_PASSWORD}'
);

SELECT * FROM "s3://test-bucket/proxy-test/test.parquet";

DROP SECRET http2;

CREATE SECRET http3 (
TYPE HTTP,
http_proxy '${HTTP_PROXY_PRIVATE}',
http_proxy_username 'malicious',
http_proxy_password 'intruder'
);

SELECT * FROM "s3://test-bucket/proxy-test/test.parquet";

COPY (SELECT 'value-1' AS value) TO 's3://test-bucket/http-secret-test/test.parquet';

PRAGMA enable_verification;

CREATE SECRET http3 (
TYPE HTTP,
EXTRA_HTTP_HEADERS MAP{
'Authorization': 'Im very important',
'CustomHeader': 'fliepflap'
}
);

SELECT * FROM "s3://test-bucket/http-secret-test/test.parquet";

CREATE TABLE test AS SELECT * FROM RANGE(0, 10) AS tbl(i);

CREATE TABLE test1 AS SELECT * FROM RANGE(10, 20) AS tbl(i);

EXPLAIN ANALYZE COPY test TO 's3://test-bucket-public/root-dir/metadata_cache/test.parquet';

EXPLAIN ANALYZE COPY test TO 's3://test-bucket-public/root-dir/metadata_cache/test1.parquet';

EXPLAIN ANALYZE SELECT COUNT(*) FROM 's3://test-bucket-public/root-dir/metadata_cache/test.parquet';

EXPLAIN ANALYZE SELECT COUNT(*) FROM 's3://test-bucket-public/root-dir/metadata_cache/test.parquet';

SET enable_http_metadata_cache = TRUE;

EXPLAIN ANALYZE SELECT COUNT(*) FROM 's3://test-bucket-public/root-dir/metadata_cache/test1.parquet';

EXPLAIN ANALYZE SELECT COUNT(*) FROM 's3://test-bucket-public/root-dir/metadata_cache/test1.parquet';

COPY (SELECT * FROM RANGE(0, 100) AS tbl(i)) TO 's3://test-bucket-public/root-dir/metadata_cache/test1.parquet';

EXPLAIN ANALYZE SELECT COUNT(*) FROM 's3://test-bucket-public/root-dir/metadata_cache/test1.parquet';

EXPLAIN ANALYZE SELECT COUNT(*) FROM 's3://test-bucket-public/root-dir/metadata_cache/test1.parquet';

PRAGMA default_null_order = 'NULLS LAST';

SET enable_http_metadata_cache = TRUE;

SET http_timeout = 120000;

SET http_retries = 6;

CREATE SCHEMA tpcds;

CREATE SCHEMA tpcds;

CREATE SCHEMA tpcds;

CREATE SCHEMA tpcds;

CREATE SCHEMA tpcds;

CREATE SCHEMA tpcds;

CREATE SCHEMA tpcds;

CREATE SCHEMA tpcds;

SET enable_http_metadata_cache = TRUE;

SET http_timeout = 120000;

SET http_retries = 6;

CALL DBGEN(sf=0.01);

COPY lineitem TO 's3://test-bucket/tpch-sf0_01/lineitem.parquet';
COPY nation TO 's3://test-bucket/tpch-sf0_01/nation.parquet';
COPY region TO 's3://test-bucket/tpch-sf0_01/region.parquet';
COPY part TO 's3://test-bucket/tpch-sf0_01/part.parquet';
COPY supplier TO 's3://test-bucket/tpch-sf0_01/supplier.parquet';
COPY partsupp TO 's3://test-bucket/tpch-sf0_01/partsupp.parquet';
COPY customer TO 's3://test-bucket/tpch-sf0_01/customer.parquet';
COPY orders TO 's3://test-bucket/tpch-sf0_01/orders.parquet';

DROP TABLE lineitem;
DROP TABLE nation;
DROP TABLE region;
DROP TABLE part;
DROP TABLE supplier;
DROP TABLE partsupp;
DROP TABLE customer;
DROP TABLE orders;

DROP TABLE lineitem;
DROP TABLE nation;
DROP TABLE region;
DROP TABLE part;
DROP TABLE supplier;
DROP TABLE partsupp;
DROP TABLE customer;
DROP TABLE orders;

DROP TABLE lineitem;
DROP TABLE nation;
DROP TABLE region;
DROP TABLE part;
DROP TABLE supplier;
DROP TABLE partsupp;
DROP TABLE customer;
DROP TABLE orders;

DROP TABLE lineitem;
DROP TABLE nation;
DROP TABLE region;
DROP TABLE part;
DROP TABLE supplier;
DROP TABLE partsupp;
DROP TABLE customer;
DROP TABLE orders;

CREATE TABLE test AS SELECT 1 AS id, 'value1' AS value;
CREATE TABLE test2 AS SELECT 2 AS id, 'value2' AS value;

COPY test TO 's3://test-bucket/hive-partitioning/simple/key_!-_.*()=zisiswurking1/test.parquet';
COPY test2 TO 's3://test-bucket/hive-partitioning/simple/key_!-_.*()=zisiswurking2/test.parquet';

SELECT id, value, "key_!-_.*()" FROM PARQUET_SCAN('s3://test-bucket/hive-partitioning/simple/*/test.parquet', HIVE_PARTITIONING = 1);

CREATE TABLE test3 AS SELECT id FROM RANGE(0, 10000) AS tbl(id);
CREATE TABLE test4 AS SELECT id FROM RANGE(10000, 20000) AS tbl(id);

COPY test3 TO 's3://test-bucket/hive-partitioning/medium/part=1/part2=1/test.parquet';
COPY test4 TO 's3://test-bucket/hive-partitioning/medium/part=1/part2=2/test.parquet';
COPY test3 TO 's3://test-bucket/hive-partitioning/medium/part=1/part2=1/test.csv';
COPY test4 TO 's3://test-bucket/hive-partitioning/medium/part=1/part2=2/test.csv';

SELECT MIN(id), MAX(id) FROM PARQUET_SCAN('s3://test-bucket/hive-partitioning/medium/*/*/test.parquet', HIVE_PARTITIONING = 1) WHERE part2 = 2;

SELECT MIN(id), MAX(id) FROM PARQUET_SCAN('s3://test-bucket/hive-partitioning/medium/*/*/test.parquet', HIVE_PARTITIONING = 1) WHERE part2 = 1;

SELECT MIN(id), MAX(id) FROM READ_CSV_AUTO('s3://test-bucket/hive-partitioning/medium/*/*/test.csv', HIVE_PARTITIONING = 1) WHERE part2 = 2;

SELECT MIN(id), MAX(id) FROM READ_CSV_AUTO('s3://test-bucket/hive-partitioning/medium/*/*/test.csv', HIVE_PARTITIONING = 1) WHERE part2 = 1;

SELECT MIN(id), MAX(id) FROM READ_CSV_AUTO('s3://test-bucket/hive-partitioning/medium/*/*/test.csv', HIVE_PARTITIONING = 1) WHERE part2 = 1;

SELECT MIN(id), MAX(id) FROM READ_CSV_AUTO('s3://test-bucket/hive-partitioning/medium/*/*/test.csv', HIVE_PARTITIONING = 1) WHERE part2 = 1;

COPY (SELECT * FROM t1) TO 's3://test-bucket/hive-partitioning/filter-test-parquet' WITH (FORMAT PARQUET, PARTITION_BY c, OVERWRITE_OR_IGNORE);

COPY (SELECT * FROM t1) TO 's3://test-bucket/hive-partitioning/filter-test-csv' WITH (FORMAT CSV, PARTITION_BY c, OVERWRITE_OR_IGNORE);

EXPLAIN select a from parquet_scan('s3://test-bucket/hive-partitioning/filter-test-parquet/*/*.parquet', HIVE_PARTITIONING=1, HIVE_TYPES_AUTOCAST=0) where c=500 and a < 4;

EXPLAIN select a from read_csv_auto('s3://test-bucket/hive-partitioning/filter-test-csv/*/*.csv', HIVE_PARTITIONING=1, HIVE_TYPES_AUTOCAST=0) where c=500 and a < 4;

COPY (SELECT * FROM t1) TO 's3://test-bucket/hive-partitioning/filter-test-parquet' WITH (FORMAT PARQUET, PARTITION_BY c, OVERWRITE);

SELECT phone FROM READ_CSV_AUTO('${S3_SMALL_CSV_PRESIGNED_URL}');

SELECT i FROM "${S3_SMALL_PARQUET_PRESIGNED_URL}";

SET http_timeout = 120000;

SET http_retries = 6;

SELECT SUM(l_extendedprice * l_discount) AS revenue FROM "${S3_LARGE_PARQUET_PRESIGNED_URL}" WHERE l_shipdate >= CAST('1994-01-01' AS DATE) AND l_shipdate < CAST('1995-01-01' AS DATE) AND l_discount BETWEEN 0.05 AND 0.07 AND l_quantity < 24;

CREATE TABLE mytable AS SELECT i AS a, (i * 2) AS b, POWER(i, 2) AS c FROM RANGE(0, 10) AS tbl(i);

SELECT * FROM GLOB('s3://test-bucket/glob_ss/*');

SELECT * FROM GLOB('s3://test-bucket/glob_ss/**');

COPY mytable TO 's3://test-bucket/glob_ss/t0.csv';

SELECT * FROM GLOB('s3://test-bucket/glob_ss/*');

SELECT * FROM GLOB('s3://test-bucket/glob_ss/**');

COPY mytable TO 's3://test-bucket/glob_ss/a/t0.csv';

SELECT * FROM GLOB('s3://test-bucket/glob_ss/*/t0.csv');

SELECT * FROM GLOB('s3://test-bucket/glob_ss/**/t0.csv');

SELECT * FROM GLOB('s3://test-bucket/glob_ss/**/*/t0.csv');

SELECT * FROM GLOB('s3://test-bucket/glob_ss/*/*/t0.csv');

SELECT * FROM GLOB('s3://test-bucket/glob_ss/**');

SELECT * FROM GLOB('s3://test-bucket/glob_ss/**/*');

SELECT * FROM GLOB('s3://test-bucket/glob_ss/*/**');

SELECT * FROM GLOB('s3://test-bucket/glob_ss/a/**');

SELECT * FROM GLOB('s3://test-bucket/glob_ss/*/a/t0.csv');

SELECT * FROM GLOB('s3://test-bucket/glob_ss/**/a/t0.csv');

COPY mytable TO 's3://test-bucket/glob_ss/a/b/t0.csv';

SELECT * FROM GLOB('s3://test-bucket/glob_ss/*/t0.csv');

SELECT * FROM GLOB('s3://test-bucket/glob_ss/*/*/t0.csv');

SELECT * FROM GLOB('s3://test-bucket/glob_ss/**/t0.csv');

SELECT * FROM GLOB('s3://test-bucket/glob_ss/**/*/t0.csv');

SELECT * FROM GLOB('s3://test-bucket/glob_ss/*/*/*/t0.csv');

SELECT * FROM GLOB('s3://test-bucket/glob_ss/**');

SELECT * FROM GLOB('s3://test-bucket/glob_ss/**/*');

SELECT * FROM GLOB('s3://test-bucket/glob_ss/*/**');

SELECT * FROM GLOB('s3://test-bucket/glob_ss/a/**');

SELECT * FROM GLOB('s3://test-bucket/glob_ss/*/a/t0.csv');

SELECT * FROM GLOB('s3://test-bucket/glob_ss/**/a/t0.csv');

SELECT COUNT(*) FROM GLOB('s3://test-bucket/glob_ss/partitioned/*');

COPY mytable TO 's3://test-bucket/glob_ss/partitioned' WITH (FORMAT PARQUET, PARTITION_BY (a, b));

SELECT COUNT(*) FROM GLOB('s3://test-bucket/glob_ss/partitioned/**');

SELECT COUNT(*) FROM GLOB('s3://test-bucket/glob_ss/partitioned/*/**');

SELECT COUNT(*) FROM GLOB('s3://test-bucket/glob_ss/partitioned/**/*');

SELECT * FROM GLOB('s3://test-bucket/glob_ss/partitioned/**/*.parquet');

SELECT * FROM GLOB('s3://test-bucket/glob_ss/partitioned/**/*2/*.parquet');

SELECT * FROM GLOB('s3://test-bucket/glob_ss/partitioned/**/*2/**/*.parquet');

COPY mytable TO 's3://test-bucket/glob_ss/a/b/a/t0.csv';
COPY mytable TO 's3://test-bucket/glob_ss/a/b/a/b/t0.csv';
COPY mytable TO 's3://test-bucket/glob_ss/a/b/a/b/a/t0.csv';
COPY mytable TO 's3://test-bucket/glob_ss/a/b/a/b/a/b/t0.csv';

SELECT COUNT(*) FROM GLOB('s3://test-bucket/glob_ss/*/**');

SELECT COUNT(*) FROM GLOB('s3://test-bucket/glob_ss/**/*');

SELECT COUNT(*) FROM GLOB('s3://test-bucket/glob_ss/**/a/*');

SELECT COUNT(*) FROM GLOB('s3://test-bucket/glob_ss/**/b/*');

SELECT COUNT(*) FROM GLOB('s3://test-bucket/glob_ss/**/[a-b]/*');

COPY mytable TO 's3://test-bucket/glob_ss/a/b/a/b/a/b/c/d/e/t0.csv';

SELECT * FROM GLOB('s3://test-bucket/glob_ss/**/b/**/*');

SELECT * FROM GLOB('s3://test-bucket/glob_ss/**/b*/**/*');

SELECT * FROM GLOB('s3://test-bucket/glob_ss/**/b*/*/**/*');

SELECT * FROM GLOB('s3://test-bucket/glob_ss/**/a*/b*/*/**/*');

SELECT * FROM GLOB('s3://test-bucket/glob_ss/**/a*/b*/**/*');

SELECT COUNT(*) FROM GLOB('s3://test-bucket/glob_ss/**');

CALL DBGEN(sf=1);

SET http_timeout = 120000;

SET http_retries = 6;

SELECT SUM(l_extendedprice * l_discount) AS revenue FROM lineitem WHERE l_shipdate >= CAST('1994-01-01' AS DATE) AND l_shipdate < CAST('1995-01-01' AS DATE) AND l_discount BETWEEN 0.05 AND 0.07 AND l_quantity < 24;

SELECT SUM(l_extendedprice * l_discount) AS revenue FROM lineitem WHERE l_shipdate >= CAST('1994-01-01' AS DATE) AND l_shipdate < CAST('1995-01-01' AS DATE) AND l_discount BETWEEN 0.05 AND 0.07 AND l_quantity < 24;

COPY lineitem TO 's3://test-bucket/multipart/export_large_${threadid}.parquet' WITH (FORMAT 'parquet');

SELECT SUM(l_extendedprice * l_discount) AS revenue FROM "s3://test-bucket/multipart/export_large_${threadid}.parquet" WHERE l_shipdate >= CAST('1994-01-01' AS DATE) AND l_shipdate < CAST('1995-01-01' AS DATE) AND l_discount BETWEEN 0.05 AND 0.07 AND l_quantity < 24;

CALL dbgen(sf=0.01, suffix='_small');

SELECT SUM(l_extendedprice * l_discount) AS revenue FROM lineitem_small WHERE l_shipdate >= CAST('1994-01-01' AS DATE) AND l_shipdate < CAST('1995-01-01' AS DATE) AND l_discount BETWEEN 0.05 AND 0.07 AND l_quantity < 24;

SELECT SUM(l_extendedprice * l_discount) AS revenue FROM lineitem_small WHERE l_shipdate >= CAST('1994-01-01' AS DATE) AND l_shipdate < CAST('1995-01-01' AS DATE) AND l_discount BETWEEN 0.05 AND 0.07 AND l_quantity < 24;

SET s3_uploader_thread_limit = 1;

COPY lineitem_small TO 's3://test-bucket/multipart/export_small_${threadid}.parquet' WITH (FORMAT 'parquet');

SELECT SUM(l_extendedprice * l_discount) AS revenue FROM "s3://test-bucket/multipart/export_small_${threadid}.parquet" WHERE l_shipdate >= CAST('1994-01-01' AS DATE) AND l_shipdate < CAST('1995-01-01' AS DATE) AND l_discount BETWEEN 0.05 AND 0.07 AND l_quantity < 24;

SET memory_limit = '2.5GB';

SET http_timeout = 120000;

SET http_retries = 6;

PRAGMA temp_directory = '';

SET s3_uploader_thread_limit = 5;

CALL DBGEN(sf=1);

SELECT SUM(l_extendedprice * l_discount) AS revenue FROM lineitem WHERE l_shipdate >= CAST('1994-01-01' AS DATE) AND l_shipdate < CAST('1995-01-01' AS DATE) AND l_discount BETWEEN 0.05 AND 0.07 AND l_quantity < 24;

COPY lineitem TO 's3://test-bucket/multipart/export_large.parquet' WITH (FORMAT 'parquet');

SELECT SUM(l_extendedprice * l_discount) AS revenue FROM "s3://test-bucket/multipart/export_large.parquet" WHERE l_shipdate >= CAST('1994-01-01' AS DATE) AND l_shipdate < CAST('1995-01-01' AS DATE) AND l_discount BETWEEN 0.05 AND 0.07 AND l_quantity < 24;

SET http_timeout = 120000;

SET http_retries = 6;

CALL DBGEN(sf=0.1);

SELECT SUM(l_extendedprice * l_discount) AS revenue FROM lineitem WHERE l_shipdate >= CAST('1994-01-01' AS DATE) AND l_shipdate < CAST('1995-01-01' AS DATE) AND l_discount BETWEEN 0.05 AND 0.07 AND l_quantity < 24;

COPY lineitem TO 's3://test-bucket/multipart/export_large.json' WITH (FORMAT 'json');

SELECT SUM(l_extendedprice * l_discount) AS revenue FROM "s3://test-bucket/multipart/export_large.json" WHERE l_shipdate >= CAST('1994-01-01' AS DATE) AND l_shipdate < CAST('1995-01-01' AS DATE) AND l_discount BETWEEN 0.05 AND 0.07 AND l_quantity < 24;

SELECT SUM(l_extendedprice * l_discount) / 3 AS revenue FROM READ_JSON_AUTO(['s3://test-bucket/multipart/export_large.json', 's3://test-bucket/multipart/export_large.json', 's3://test-bucket/multipart/export_large.json']) WHERE l_shipdate >= CAST('1994-01-01' AS DATE) AND l_shipdate < CAST('1995-01-01' AS DATE) AND l_discount BETWEEN 0.05 AND 0.07 AND l_quantity < 24;

CREATE TABLE web_page AS (SELECT * FROM "data/csv/real/web_page.csv");

SELECT * FROM web_page LIMIT 10;

COPY web_page TO 's3://test-bucket/multipart/web_page.parquet' WITH (FORMAT 'parquet');

SELECT * FROM "s3://test-bucket/multipart/web_page.parquet" LIMIT 10;

COPY web_page TO 's3://test-bucket/multipart/web_page.csv';

SELECT * FROM "s3://test-bucket/multipart/web_page.csv" LIMIT 10;

ATTACH ':memory:' AS db1;

USE db1;

CREATE TABLE test (a INT, b INT, c TEXT);

INSERT INTO test VALUES (42, 88, 'hello');
mode AS skip;

CREATE UNIQUE INDEX i_unique ON test(a);
mode AS unskip;

CREATE VIEW v1 AS SELECT * FROM test;

CREATE TYPE mood AS ENUM('ok', 'sad', 'happy');

CREATE TABLE enums (i mood);

INSERT INTO enums VALUES ('ok'), ('sad'), (NULL);

SELECT * FROM db1.enums;

CREATE SEQUENCE seq;

SELECT NEXTVAL('seq');

CREATE FUNCTION my_add(a, b) AS a + b;

COPY SELECT * FROM DATABASE AS db1 TO memory;

USE memory;

SELECT * FROM test;

SELECT * FROM enums;

SELECT * FROM v1;

INSERT INTO test VALUES (42, 88, 'hello');

INSERT INTO test VALUES (43, 88, 'hello');

SELECT * FROM v1;

SELECT NEXTVAL('seq');

SELECT MY_ADD(1, 2);

PRAGMA enable_verification;

ATTACH ':memory:' AS db1;

ATTACH ':memory:' AS db2;

COPY SELECT * FROM DATABASE AS db1 TO db2;

CREATE TABLE db1.test (a INT, b INT, c TEXT);

INSERT INTO db1.test VALUES (42, 84, 'hello');

COPY SELECT * FROM DATABASE AS db1 TO db1;

ATTACH '__TEST_DIR__/read_only.db' AS read_only;

CREATE TABLE read_only.t (i INT);

DETACH read_only;

ATTACH '__TEST_DIR__/read_only.db' AS read_only (READ_ONLY);

COPY SELECT * FROM DATABASE AS db1 TO read_only;

PRAGMA enable_verification;

CREATE TABLE test (x INT, y AS (x + 100));

INSERT INTO test VALUES (42);

SELECT * FROM test;

ATTACH '__TEST_DIR__/myotherdb.db';

COPY SELECT * FROM DATABASE AS mydb TO myotherdb;

SELECT * FROM myotherdb.test;

PRAGMA enable_verification;

ATTACH ':memory:' AS db1;

USE db1;

CREATE TABLE test (a INT, b INT, c TEXT);

CREATE INDEX i_index ON test(a);

INSERT INTO test SELECT range, 88, 'hello' FROM RANGE(0, 10000);

EXPLAIN ANALYZE SELECT a, b, c FROM db1.test WHERE a = 42;

SELECT a, b, c FROM db1.test WHERE a = 42;

COPY SELECT * FROM DATABASE AS db1 TO memory;

USE memory;

SELECT * FROM test WHERE a = 42;

EXPLAIN ANALYZE SELECT * FROM test WHERE a = 42;

DROP INDEX i_index;

EXPLAIN ANALYZE SELECT * FROM test WHERE a = 42;

PRAGMA enable_verification;

ATTACH ':memory:' AS db1;

ATTACH ':memory:' AS db2;

CREATE TABLE db1.tbl1 AS SELECT * FROM RANGE(0, 3) AS r(i);

COPY SELECT * FROM DATABASE AS db1 TO db2;

COPY SELECT * FROM DATABASE AS db1 TO db2;

SELECT * FROM db2.tbl1;

PRAGMA enable_verification;

ATTACH ':memory:' AS db1;

CREATE TABLE db1.test (a INT, b INT, c TEXT);

INSERT INTO db1.test VALUES (42, 88, 'hello');

COPY SELECT * FROM DATABASE AS db1 TO memory;

SELECT * FROM memory.test;

COPY SELECT * FROM DATABASE AS dbxx TO memory;

COPY SELECT * FROM DATABASE AS db1 TO dbxx;

CALL dbgen(sf=1);

ATTACH ':memory:' AS db1;

COPY SELECT * FROM DATABASE AS memory TO db1;

COPY SELECT * FROM DATABASE AS memory TO db1;

COPY SELECT * FROM DATABASE AS memory TO db1;

COPY SELECT * FROM DATABASE AS memory TO db1;

PRAGMA enable_verification;

ATTACH ':memory:' AS db1;

USE db1;

CREATE TABLE data AS SELECT i, CAST(HASH(i) AS TEXT) AS value FROM GENERATE_SERIES(1, 10000) AS s(i);

ALTER TABLE data ALTER COLUMN value SET NOT NULL;

CREATE INDEX data_value ON data(value);

ATTACH ':memory:' AS db2;

COPY SELECT * FROM DATABASE AS db1 TO db2;

SELECT database_name, table_name, index_name FROM duckdb_indexes ORDER BY ALL;

SELECT database_name, table_name, index_count FROM duckdb_tables ORDER BY ALL;

PRAGMA enable_verification;

ATTACH '__TEST_DIR__/copy_db_old.db' AS old;

CREATE TABLE old.items (id INT, uniq INT UNIQUE);

INSERT INTO old.items VALUES (1, 1), (2, 2), (3, 3);

CREATE UNIQUE INDEX idx_id ON old.items(id);

ATTACH '__TEST_DIR__/copy_db_new1.db' AS new1;

COPY SELECT * FROM DATABASE AS old TO NEW1(SCHEMA);

COPY SELECT * FROM DATABASE AS old TO NEW1(DATA);

SELECT id, uniq FROM new1.items ORDER BY ALL;

INSERT INTO new1.items VALUES (1, 4);

INSERT INTO new1.items VALUES (4, 1);

DETACH new1;

ATTACH '__TEST_DIR__/copy_db_new1.db' AS new1;

INSERT INTO new1.items VALUES (1, 4);

INSERT INTO new1.items VALUES (4, 1);

PRAGMA enable_verification;

ATTACH '__TEST_DIR__/backup.db';

CREATE SEQUENCE seq;

CREATE TABLE tbl (id INT DEFAULT NEXTVAL('seq'));

INSERT INTO tbl VALUES (DEFAULT);
INSERT INTO tbl VALUES (DEFAULT);

COPY SELECT * FROM database AS memory TO backup;

DROP SEQUENCE seq CASCADE;

SELECT * FROM backup.tbl;

SELECT CURRVAL('backup.main.seq');

DROP SEQUENCE backup.main.seq CASCADE;

CREATE SCHEMA my_schema;

CREATE SEQUENCE my_schema.seq;

CREATE TABLE tbl (id INT DEFAULT NEXTVAL('my_schema.seq'));

COPY SELECT * FROM database AS memory TO backup;

DROP SEQUENCE my_schema.seq CASCADE;

DROP SEQUENCE backup.my_schema.seq CASCADE;

CREATE SCHEMA backup;

CREATE SEQUENCE memory.backup.seq;

CREATE TABLE tbl (id INT DEFAULT NEXTVAL('backup.seq'));

DROP SCHEMA backup CASCADE;

CREATE SCHEMA backup;

CREATE SEQUENCE memory.backup.seq;

CREATE TABLE tbl (id INT DEFAULT NEXTVAL('memory.backup.seq'));

COPY SELECT * FROM database AS memory TO backup;

DROP SEQUENCE memory.backup.seq CASCADE;

PRAGMA enable_verification;

CREATE TABLE integers AS SELECT * FROM RANGE(0, 1000000) AS tbl(i);

CREATE TABLE integers2 AS SELECT * FROM integers;

SELECT COUNT(*), SUM(i) FROM integers2;

SELECT * FROM integers2 LIMIT 5;

SELECT * FROM integers2 LIMIT 5 OFFSET 77777;

INSERT INTO integers2 SELECT i + 1000000 FROM integers;

SELECT * FROM integers2 LIMIT 5 OFFSET 1000000;

SELECT * FROM integers2 LIMIT 5 OFFSET 1077777;

PRAGMA enable_verification;

CREATE TABLE varchars AS SELECT i, CONCAT('thisisalongstring', i) AS v FROM RANGE(0, 1000000) AS tbl(i);

CREATE TABLE varchars2 AS SELECT * FROM varchars;

SELECT COUNT(*), SUM(CAST(REPLACE(v, 'thisisalongstring', '') AS INT)) FROM varchars2;

SELECT * FROM varchars2 LIMIT 5;

SELECT * FROM varchars2 LIMIT 5 OFFSET 77777;

INSERT INTO varchars2 SELECT i + 1000000, CONCAT('thisisalongstring', i + 1000000) AS v FROM varchars;

SELECT * FROM varchars2 LIMIT 5 OFFSET 1000000;

SELECT * FROM varchars2 LIMIT 5 OFFSET 1077777;

PRAGMA enable_verification;

CREATE TABLE tbl1 AS SELECT 1;

SELECT * FROM tbl1;

CREATE TABLE tbl2 AS SELECT 2 AS f;

SELECT * FROM tbl2;

CREATE OR REPLACE TABLE tbl3 AS SELECT 3;

SELECT * FROM tbl3;

CREATE TABLE tbl1 AS SELECT 3;

CREATE OR REPLACE TABLE tbl1 AS SELECT 4;

SELECT * FROM tbl1;

CREATE OR REPLACE TABLE tbl1 AS SELECT 'hello' UNION ALL SELECT 'world';

SELECT * FROM tbl1;

CREATE OR REPLACE TABLE tbl1 AS SELECT 5 WHERE FALSE;

SELECT * FROM tbl1;

SELECT * FROM tbl1;

SELECT * FROM tbl1;

CREATE TABLE tbl4 (col1, col2) AS SELECT 1, 'hello';

SELECT * FROM tbl4;

CREATE OR REPLACE TABLE tbl4 (col1, col2) AS SELECT 2, 'duck';

SELECT * FROM tbl4;

CREATE TABLE IF NOT EXISTS tbl5 (col1, col2) AS SELECT 3, 'database';

SELECT * FROM tbl5;

CREATE OR REPLACE TABLE tbl5 (col1, "col need ' quote") AS SELECT 3.5, 'quote';

SELECT * FROM tbl5;

CREATE TABLE tbl6 (col1) AS SELECT 4, 'mismatch';

SELECT * FROM tbl6;

CREATE TABLE tbl7 (col1, col2) AS SELECT 5;

CREATE TABLE tbl8 AS SELECT 42;

SELECT COUNT(*) FROM tbl8;

CREATE TABLE tbl9 AS SELECT 42;

SELECT COUNT(*) FROM tbl9;

CREATE TABLE test (x INT[]);

INSERT INTO test SELECT CASE WHEN x <= 520 THEN [0, 0] ELSE [0] END FROM GENERATE_SERIES(1, 2048) AS s(x);

CHECKPOINT;

CREATE DATABASE mydb;

CREATE DATABASE mydb AS SELECT * FROM "./path";

DROP DATABASE mydb;

CREATE SCHEMA db0;

USE db0;

CREATE TABLE t0 (a BIGINT PRIMARY KEY, b INT, c INT);

CREATE INDEX t0_idx ON t0(b);

CREATE UNIQUE INDEX t0_uidx ON t0(c);

create table t1 as select 'c1' as c1
load __TEST_DIR__/create_objects_readonly.db readonly;

CREATE SCHEMA s2;

CREATE TABLE test AS SELECT * FROM RANGE(0, 10) AS t(i);

CREATE VIEW v1 AS SELECT * FROM RANGE(0, 10) AS t(i);

CREATE macro add(a, b) AS a + b;

CREATE TYPE mood AS ENUM ('happy', 'sad', 'curious');

CREATE SEQUENCE serial;

PRAGMA enable_verification;

CREATE TABLE integers (i INT);

CREATE OR REPLACE TABLE integers (i INT, j INT);

CREATE VIEW integers2 AS SELECT 42;

CREATE OR REPLACE TABLE integers2 (i INT);

CREATE TABLE IF NOT EXISTS integers (i INT);

INSERT INTO integers VALUES (1, 2);

CREATE OR REPLACE TABLE IF NOT EXISTS integers (i INT);

PRAGMA enable_verification;

SELECT * FROM RANGE(0, 5) AS tbl1(i) JOIN RANGE(0, 5) AS tbl2(i) ON tbl1.i = tbl2.i;

SELECT i, i FROM RANGE(0, 5) AS tbl(i);

SELECT * FROM (SELECT i, i FROM RANGE(0, 5) AS tbl(i)) AS tbl;

SELECT * FROM (SELECT i, i, i, i FROM RANGE(0, 5) AS tbl(i)) AS tbl;

CREATE TABLE t1 AS SELECT i, i FROM RANGE(0, 5) AS tbl(i);

SELECT * FROM t1;

CREATE TABLE t2 AS SELECT i, i, i, i FROM RANGE(0, 5) AS tbl(i);

SELECT * FROM (SELECT i, i, i, i FROM RANGE(0, 5) AS tbl(i)) AS tbl;

SELECT * FROM (SELECT * FROM RANGE(0, 5) AS tbl1(i) JOIN RANGE(0, 5) AS tbl2(i) ON tbl1.i = tbl2.i) AS tbl;

CREATE TABLE t3 AS SELECT tbl1.i, tbl2.i FROM RANGE(0, 5) AS tbl1(i) JOIN RANGE(0, 5) AS tbl2(i) ON tbl1.i = tbl2.i;

SELECT * FROM t3;

CREATE TABLE t4 AS SELECT * FROM RANGE(0, 5) AS tbl1(i) JOIN RANGE(0, 5) AS tbl2(i) ON tbl1.i = tbl2.i;

SELECT * FROM t4;

PRAGMA enable_verification;

CREATE TABLE tbl;

PRAGMA enable_verification;

PRAGMA enable_verification;

DROP TABLE T;

DROP TABLE T;

DROP TABLE T;

DROP TABLE T;

DROP TABLE T;

DROP TABLE T;

DROP TABLE T;

DROP TABLE T;

DROP TABLE T;

DROP TABLE T;

DROP TABLE T;

DROP TABLE T;

INSERT INTO T VALUES (1, 1, 1), (1, 1, 1), (1, 1, 1), (2, 2, 2), (2, 2, 2), (3, 3, 3);

SELECT * FROM T;

SELECT * FROM T;

CHECKPOINT;

SELECT compression FROM PRAGMA_STORAGE_INFO('T') WHERE segment_type ILIKE 'INTEGER' LIMIT 3;

ALTER TABLE T RENAME COLUMN a TO a_1;

ALTER TABLE T RENAME COLUMN b TO b_1;

ALTER TABLE T RENAME COLUMN c TO c_1
restart;

SELECT * FROM T;

SELECT compression FROM PRAGMA_STORAGE_INFO('T') WHERE segment_type ILIKE 'INTEGER' LIMIT 3;

ALTER TABLE T RENAME TO T_1
restart;

SELECT * FROM T_1;

SELECT compression FROM PRAGMA_STORAGE_INFO('T_1') WHERE segment_type ILIKE 'INTEGER' LIMIT 3;

ALTER TABLE T_1 DROP COLUMN c_1;

ALTER TABLE T_1 DROP COLUMN b_1
restart;

SELECT * FROM T_1;

SELECT compression FROM PRAGMA_STORAGE_INFO('T_1') WHERE segment_type ILIKE 'INTEGER' LIMIT 2;

ALTER TABLE T_1 ADD COLUMN b INTEGER DEFAULT 2
restart;

SELECT * FROM T_1;

CHECKPOINT;

SELECT compression FROM PRAGMA_STORAGE_INFO('T_1') WHERE segment_type ILIKE 'INTEGER' LIMIT 3;

CREATE TABLE T (vis ENUM('hide', 'visible')[]);

SELECT column_type FROM (DESCRIBE T);

ATTACH ':memory:' AS db2;

CREATE SCHEMA schema2;

CREATE SCHEMA db2.schema3;

create type schema2.foo as VARCHAR;

create type db2.schema3.bar as BOOL;

CREATE TABLE B (vis schema2.foo[]);

CREATE TABLE B (vis db2.schema3.bar[]);

PRAGMA enable_verification;

CREATE TABLE t AS WITH q(id, s) AS (SELECT * FROM (VALUES (1, 42)) AS _values), a(s) AS MATERIALIZED (SELECT 42) SELECT id FROM q JOIN a ON q.s = a.s;

SELECT id FROM t;

PRAGMA enable_verification;

DESCRIBE SELECT 42 AS a;

WITH cte AS (SELECT 42 AS a) SELECT * FROM (DESCRIBE cte);

WITH cte AS (SELECT 42 AS a) SELECT * FROM (DESCRIBE cte);

SUMMARIZE SELECT 42 AS a;

WITH cte AS (SELECT 42 AS a) SELECT * FROM (SUMMARIZE TABLE cte);

WITH cte AS (SELECT 42 AS a) SELECT * FROM (SUMMARIZE TABLE cte);

WITH cte AS (SELECT 42 AS a) SELECT * FROM (SUMMARIZE TABLE cte);

WITH cte AS (SELECT 42 AS a) SELECT * FROM (SUMMARIZE TABLE cte);

CREATE TABLE series AS SELECT * FROM GENERATE_SERIES(-1, 1) AS x(n);

WITH RECURSIVE generation1(x, y) AS (SELECT 2, 3 UNION SELECT 3, 3 UNION SELECT 4, 3), game(n, x, y) AS (SELECT 1 AS n, x, y FROM generation1 /* generation 1 is initial board setup */ UNION ALL SELECT n + 1, new_x, new_y /* generation n+1 */ FROM (SELECT n, x + offset_x AS new_x, y + offset_y AS new_y, MAX(self) OVER (PARTITION BY n + 1, x + offset_x, y + offset_y) AS cell_was_already_alive FROM game, (SELECT x.n AS offset_x, y.n AS offset_y, CASE WHEN x.n = 0 AND y.n = 0 THEN 1 ELSE 0 END AS self FROM series AS x(n), series AS y(n) /* join 2 row generators to get 9 pairs */) AS offsets_to_neighbours_and_self(offset_x, offset_y, self) WHERE n < 100) AS all_impacts GROUP BY n + 1, new_x, new_y, cell_was_already_alive /* from all impacts back to cells */ HAVING (cell_was_already_alive = 1 AND COUNT(*) < 5 AND COUNT(*) > 2) OR COUNT(*) = 3 /* decide if cell is alive */) SELECT * FROM game WHERE n = 4 ORDER BY n, x, y;
/* select generation 4 */;

WITH RECURSIVE generation1(x, y) AS (SELECT 2, 3 UNION SELECT 3, 3 UNION SELECT 4, 3), game(n, x, y) AS (SELECT 1 AS n, x, y FROM generation1 /* generation 1 is initial board setup */ UNION ALL SELECT n + 1, new_x, new_y /* generation n+1 */ FROM (SELECT n, x + offset_x AS new_x, y + offset_y AS new_y, MAX(self) OVER (PARTITION BY n + 1, x + offset_x, y + offset_y) AS cell_was_already_alive FROM game, (SELECT x.n AS offset_x, y.n AS offset_y, CASE WHEN x.n = 0 AND y.n = 0 THEN 1 ELSE 0 END AS self FROM GENERATE_SERIES(-1, 1) AS x(n), GENERATE_SERIES(-1, 1) AS y(n) /* join 2 row generators to get 9 pairs */) AS offsets_to_neighbours_and_self(offset_x, offset_y, self) WHERE n < 100) AS all_impacts GROUP BY n + 1, new_x, new_y, cell_was_already_alive /* from all impacts back to cells */ HAVING (cell_was_already_alive = 1 AND COUNT(*) < 5 AND COUNT(*) > 2) OR COUNT(*) = 3 /* decide if cell is alive */) SELECT * FROM game WHERE n = 4 ORDER BY n, x, y;
/* select generation 4 */;

WITH RECURSIVE cte AS (SELECT 42) SELECT * FROM cte;

WITH RECURSIVE t AS (SELECT 1 AS x INTERSECT SELECT x + 1 FROM t WHERE x < 3) SELECT * FROM t ORDER BY x;

WITH RECURSIVE t AS (SELECT 1 AS x EXCEPT SELECT x + 1 FROM t WHERE x < 3) SELECT * FROM t ORDER BY x;

PRAGMA enable_verification;

CREATE TABLE table1 (id INT, a INT);

CREATE TABLE table2 (table1_id INT);

INSERT INTO table2 WITH cte AS (INSERT INTO table1 SELECT 1, 2 RETURNING id) SELECT id FROM cte;

PRAGMA enable_verification;

CREATE TABLE p (loc TINYINT);

INSERT INTO p VALUES (1);

WITH RECURSIVE t(y, arr) AS (SELECT 1, [1, 2, 3, 4, 5, 6] UNION ALL SELECT y + 1, arr[$loc] FROM t, p WHERE y < 10) SELECT * FROM t;

WITH RECURSIVE t(y, arr) AS (SELECT 1, [1, 2, 3, 4, 5, 6] UNION ALL SELECT y + 1, arr FROM t, p WHERE y < 10 AND y = loc) SELECT * FROM t;

WITH RECURSIVE t(y, arr) AS (SELECT 1, [1, 2, 3, 4, 5, 6] UNION ALL SELECT y + 1, arr[$loc] FROM t, p WHERE y < 10 AND y = loc) SELECT * FROM t;

WITH RECURSIVE t(arr) AS (SELECT [1, 2, 3, 4, 5, 6] UNION ALL SELECT arr[arr[1] + 1 : 6] FROM t WHERE arr[1] < 6) SELECT * FROM t;

PRAGMA enable_verification;

WITH RECURSIVE t AS (SELECT 1 AS x UNION SELECT t1.x + t2.x + t3.x AS x FROM t AS t1, t AS t2, t AS t3 WHERE t1.x < 100) SELECT * FROM t ORDER BY 1;

WITH RECURSIVE t AS (SELECT 1 AS x UNION SELECT CAST((t1.x + t2.x + t3.x) AS INT128) AS x FROM t AS t1, t AS t2, t AS t3 WHERE t1.x < 100) SELECT * FROM t ORDER BY 1;

CREATE TABLE a AS SELECT * FROM RANGE(0, 100) AS t1(i);

WITH RECURSIVE t AS (SELECT 1 AS x UNION SELECT SUM(x) AS x FROM t, a WHERE x < 1000000) SELECT * FROM t ORDER BY 1;

WITH RECURSIVE t AS (SELECT 1 AS x UNION SELECT SUM(x) AS x FROM t, a WHERE x < 1000000 AND t.x = a.i) SELECT * FROM t ORDER BY 1;

WITH RECURSIVE t AS (SELECT 1 AS x UNION SELECT SUM(x) FROM (SELECT SUM(x) FROM t) AS t1(x), a WHERE x < 1000) SELECT * FROM t ORDER BY 1;

WITH RECURSIVE t AS (SELECT 1 AS x UNION SELECT (SELECT x + 1 FROM t) AS x FROM t WHERE x < 5) SELECT * FROM t ORDER BY 1;

WITH RECURSIVE t AS (SELECT 1 AS x UNION SELECT (SELECT t.x + t2.x FROM t AS t2 LIMIT 1) AS x FROM t WHERE x < 10) SELECT * FROM t ORDER BY 1;

WITH RECURSIVE input(sud) AS (SELECT * FROM (VALUES ('53..7....6..195....98....6.8...6...34..8.3..17...2...6.6....28....419..5....8..79')) AS _values), digits(z, lp) AS (SELECT CAST(lp + 1 AS TEXT), CAST(lp AS INT) + 1 FROM GENERATE_SERIES(0, 8, 1) AS t(lp)), x(s, ind) AS (SELECT sud, STRPOS(sud, '.') FROM input UNION ALL SELECT SUBSTRING(s, 1, CAST(ind AS INT) - 1) || z || SUBSTRING(s, CAST(ind AS INT) + 1), STRPOS(SUBSTRING(s, 1, CAST(ind AS INT) - 1) || z || SUBSTRING(s, CAST(ind AS INT) + 1), '.') FROM x, digits AS z WHERE CAST(ind AS INT) > 0 AND NOT EXISTS(SELECT 1 FROM digits AS lp WHERE z.z = SUBSTRING(s, ((CAST(ind AS INT) - 1) // 9) * 9 + lp, 1) OR z.z = SUBSTRING(s, ((CAST(ind AS INT) - 1) % 9) + (lp - 1) * 9 + 1, 1) OR z.z = SUBSTRING(s, (((CAST(ind AS INT) - 1) // 3) % 3) * 3 + ((CAST(ind AS INT) - 1) // 27) * 27 + lp + ((lp - 1) // 3) * 6, 1))) SELECT s FROM x WHERE CAST(ind AS INT) = 0;

PRAGMA enable_verification;

CREATE TABLE tag (id INT, name TEXT, subclassof INT);

INSERT INTO tag VALUES (7, 'Music', 9), (8, 'Movies', 9), (9, 'Art', NULL);

WITH RECURSIVE tag_hierarchy(id, source, path, target) AS (SELECT id, name, name AS path, NULL AS target /* this should be '' for correct behaviour */ FROM tag WHERE subclassof IS NULL UNION ALL SELECT tag.id, tag.name, tag_hierarchy.path || ' <- ' || tag.name, tag.name AS target FROM tag, tag_hierarchy WHERE tag.subclassof = tag_hierarchy.id) SELECT source, path, target FROM tag_hierarchy;

PRAGMA enable_verification;

CREATE TABLE tbl (a INT);

CREATE TABLE tbl (a INT);

CREATE TABLE tbl (a INT);

CREATE TABLE tbl (a INT);

CREATE TABLE tbl (a INT);

CREATE TABLE tbl (a INT);

CREATE TABLE tbl (a INT);

CREATE TABLE tbl (a INT);

CREATE TABLE tbl (a INT);

CREATE TABLE tbl (a INT);

CREATE TABLE tbl (a INT);

CREATE TABLE tbl (a INT);

CREATE TABLE tbl (a INT);

CREATE TABLE tbl (a INT);

SELECT * FROM recurring.tbl;

WITH RECURSIVE tbl2(a) AS (SELECT 1 UNION SELECT a.a + 1 FROM tbl2 AS a, recurring.tbl2 AS b WHERE a.a < 2) SELECT * FROM tbl2;

WITH RECURSIVE tbl2(a, b) AS (SELECT 1, NULL UNION SELECT a.a + 1, a.b FROM tbl2 AS a, (SELECT * FROM recurring.tbl2) AS b WHERE a.a < 2) SELECT * FROM tbl2;

WITH RECURSIVE tbl2(a, b) AS (SELECT 1, NULL UNION SELECT a.a + 1, a.b FROM tbl2 AS a, (SELECT * FROM recurring.tbl2) AS b WHERE a.a < 2) SELECT * FROM tbl2;

WITH RECURSIVE tbl2(a, b) AS (SELECT 1, NULL UNION SELECT a.a + 1, a.b FROM tbl2 AS a, (SELECT * FROM recurring.tbl2) AS b WHERE a.a < 2) SELECT * FROM tbl2;

WITH RECURSIVE tbl2(a) AS (SELECT 1 UNION SELECT a.a + 1 FROM tbl2 AS a, (SELECT * FROM recurring.tbl2) AS b WHERE a.a < 2) SELECT * FROM tbl2;

WITH RECURSIVE tbl2(a) AS (SELECT 1 UNION SELECT a.a + 1 FROM tbl2 AS a, (SELECT * FROM recurring.tbl2) AS b WHERE a.a < 2) SELECT * FROM tbl2;

WITH RECURSIVE tbl2(a) AS (SELECT 1 UNION SELECT a.a + 1 FROM tbl2 AS a, (SELECT * FROM recurring.tbl2) AS b WHERE a.a < 2) SELECT * FROM tbl2;

CREATE OR REPLACE TABLE nodes (node INT);

INSERT INTO nodes VALUES (0), (1), (2), (3), (4), (5), (6);

CREATE OR REPLACE TABLE edges (here INT, there INT);

INSERT INTO edges VALUES (0, 4), (4, 0), (0, 3), (3, 0), (1, 4), (4, 1), (3, 4), (4, 3), (2, 5), (5, 2);

INSERT INTO edges VALUES (0, 4), (4, 0), (0, 3), (3, 0), (1, 4), (4, 1), (3, 4), (4, 3), (2, 5), (5, 2);

CREATE OR REPLACE TABLE edges (here TEXT /* source node */, there TEXT /* target node */, length INT /* edge weight */, PRIMARY KEY (here, there));

INSERT INTO edges (here, there, length) VALUES ('v0', 'v1', 9), ('v0', 'v2', 3), ('v1', 'v2', 6), ('v1', 'v4', 2), ('v2', 'v1', 2), ('v2', 'v3', 1), ('v3', 'v2', 2), ('v3', 'v4', 2);

DROP TABLE nodes;

CREATE OR REPLACE VIEW nodes (node) AS SELECT e.here FROM edges AS e UNION SELECT e.there FROM edges AS e;

CREATE OR REPLACE VIEW nodes (node) AS SELECT e.here FROM edges AS e UNION SELECT e.there FROM edges AS e;

CREATE OR REPLACE VIEW nodes (node) AS SELECT e.here FROM edges AS e UNION SELECT e.there FROM edges AS e;

CREATE OR REPLACE VIEW nodes (node) AS SELECT e.here FROM edges AS e UNION SELECT e.there FROM edges AS e;

CREATE OR REPLACE VIEW nodes (node) AS SELECT e.here FROM edges AS e UNION SELECT e.there FROM edges AS e;

CREATE OR REPLACE VIEW nodes (node) AS SELECT e.here FROM edges AS e UNION SELECT e.there FROM edges AS e;

CREATE OR REPLACE VIEW nodes (node) AS SELECT e.here FROM edges AS e UNION SELECT e.there FROM edges AS e;

CREATE OR REPLACE VIEW nodes (node) AS SELECT e.here FROM edges AS e UNION SELECT e.there FROM edges AS e;

CREATE OR REPLACE VIEW nodes (node) AS SELECT e.here FROM edges AS e UNION SELECT e.there FROM edges AS e;

CREATE OR REPLACE VIEW nodes (node) AS SELECT e.here FROM edges AS e UNION SELECT e.there FROM edges AS e;

CREATE OR REPLACE VIEW nodes (node) AS SELECT e.here FROM edges AS e UNION SELECT e.there FROM edges AS e;

CREATE OR REPLACE VIEW nodes (node) AS SELECT e.here FROM edges AS e UNION SELECT e.there FROM edges AS e;

CREATE OR REPLACE VIEW nodes (node) AS SELECT e.here FROM edges AS e UNION SELECT e.there FROM edges AS e;

CREATE OR REPLACE VIEW nodes (node) AS SELECT e.here FROM edges AS e UNION SELECT e.there FROM edges AS e;

CREATE OR REPLACE VIEW nodes (node) AS SELECT e.here FROM edges AS e UNION SELECT e.there FROM edges AS e;

CREATE OR REPLACE VIEW nodes (node) AS SELECT e.here FROM edges AS e UNION SELECT e.there FROM edges AS e;

CREATE OR REPLACE VIEW nodes (node) AS SELECT e.here FROM edges AS e UNION SELECT e.there FROM edges AS e;

PRAGMA enable_verification;

WITH RECURSIVE parents_tab(id, value, parent) AS (SELECT * FROM (VALUES (1, 1, 2), (2, 2, 4), (3, 1, 4), (4, 2, -1), (5, 1, 2), (6, 2, 7), (7, 1, -1)) AS _values), parents_tab2(id, value, parent) AS (SELECT * FROM (VALUES (1, 1, 2), (2, 2, 4), (3, 1, 4), (4, 2, -1), (5, 1, 2), (6, 2, 7), (7, 1, -1)) AS _values), parents AS (SELECT * FROM parents_tab UNION ALL SELECT id, value + 2, parent FROM parents_tab2) SELECT * FROM parents ORDER BY id, value, parent;

WITH RECURSIVE parents_tab(id, value, parent) AS (SELECT * FROM (VALUES (1, 1, 2), (2, 2, 4), (3, 1, 4), (4, 2, -1), (5, 1, 2), (6, 2, 7), (7, 1, -1)) AS _values), parents_tab2(id, value, parent) AS (SELECT * FROM (VALUES (1, 1, 2), (2, 2, 4), (3, 1, 4), (4, 2, -1), (5, 1, 2), (6, 2, 7), (7, 1, -1)) AS _values) SELECT * FROM parents_tab UNION ALL SELECT id, value + 2, parent FROM parents_tab2 ORDER BY id, value, parent;

WITH parents_tab(id, value, parent) AS (SELECT * FROM (VALUES (1, 1, 2), (2, 2, 4), (3, 1, 4), (4, 2, -1), (5, 1, 2), (6, 2, 7), (7, 1, -1)) AS _values), parents_tab2(id, value, parent) AS (SELECT * FROM (VALUES (1, 1, 2), (2, 2, 4), (3, 1, 4), (4, 2, -1), (5, 1, 2), (6, 2, 7), (7, 1, -1)) AS _values), parents AS (SELECT * FROM parents_tab UNION ALL SELECT id, value + 2, parent FROM parents_tab2) SELECT * FROM parents ORDER BY id, value, parent;

CREATE VIEW vparents AS WITH RECURSIVE parents_tab(id, value, parent) AS (SELECT * FROM (VALUES (1, 1, 2), (2, 2, 4), (3, 1, 4), (4, 2, -1), (5, 1, 2), (6, 2, 7), (7, 1, -1)) AS _values), parents_tab2(id, value, parent) AS (SELECT * FROM (VALUES (1, 1, 2), (2, 2, 4), (3, 1, 4), (4, 2, -1), (5, 1, 2), (6, 2, 7), (7, 1, -1)) AS _values) SELECT * FROM parents_tab UNION ALL SELECT id, value + 2, parent FROM parents_tab2;

SELECT * FROM vparents;

PRAGMA enable_verification;

WITH my_list(value) AS (SELECT * FROM (VALUES (1), (2), (3)) AS _values) SELECT * FROM my_list LIMIT 0 OFFSET 1;

PRAGMA enable_verification;

SELECT x, y FROM GENERATE_SERIES(1, 4) AS _(x), LATERAL (WITH RECURSIVE t(y) AS (SELECT _.x UNION ALL SELECT y + 1 FROM t WHERE y < 3) SELECT * FROM t) AS t ORDER BY x, y;

SELECT x, y FROM GENERATE_SERIES(1, 4) AS _(x), LATERAL (WITH RECURSIVE t(y) AS (SELECT 1 UNION ALL SELECT y + _.x FROM t WHERE y < 3) SELECT * FROM t) AS t ORDER BY x, y;

SELECT x, y FROM GENERATE_SERIES(1, 4) AS _(x), LATERAL (WITH RECURSIVE t(y) AS (SELECT _.x UNION ALL SELECT y + _.x FROM t WHERE y < 3) SELECT * FROM t) AS t ORDER BY x, y;

SELECT x, y FROM GENERATE_SERIES(1, 4) AS _(x), LATERAL (WITH RECURSIVE t(y) AS (SELECT _.x UNION ALL SELECT t1.y + t2.y + _.x FROM t AS t1, t AS t2 WHERE t1.y < 3) SELECT * FROM t) AS t ORDER BY x, y;

SELECT x, y, (WITH RECURSIVE t(z) AS (SELECT x + y UNION ALL SELECT z + 1 FROM t WHERE z < 3) SELECT SUM(z) FROM t) AS z FROM GENERATE_SERIES(1, 2) AS _(x), GENERATE_SERIES(1, 2) AS __(y) ORDER BY ALL;

SELECT x, y, (WITH RECURSIVE t(z) AS (SELECT x + y UNION ALL SELECT z + 1 FROM (WITH RECURSIVE g(a) AS (SELECT t.z FROM t UNION ALL SELECT g.a + (x + y) / 2 FROM g WHERE g.a < 3) SELECT * FROM g) AS t(z) WHERE z < 5) SELECT SUM(z) FROM t) AS z FROM GENERATE_SERIES(1, 2) AS _(x), GENERATE_SERIES(1, 2) AS __(y) ORDER BY ALL;

CREATE TABLE a AS SELECT * FROM RANGE(0, 100) AS t1(i);

SELECT t2.* FROM (VALUES (1000000)) AS t(_corr), LATERAL (WITH RECURSIVE t AS (SELECT 1 AS x UNION SELECT SUM(x) AS x FROM t, a WHERE x < _corr) SELECT * FROM t) AS t2 ORDER BY 1;

SELECT t2.* FROM (VALUES (10)) AS t(_corr), LATERAL (WITH RECURSIVE t AS (SELECT 1 AS x UNION SELECT (SELECT t.x + t2.x FROM t AS t2 LIMIT 1) AS x FROM t WHERE x < _corr) SELECT * FROM t) AS t2 ORDER BY 1;

SELECT t2.* FROM (VALUES (1)) AS t(_corr), LATERAL (WITH RECURSIVE collatz(x, t, steps) AS (SELECT x, x, 0 FROM (WITH RECURSIVE n(t) AS (SELECT _corr UNION ALL SELECT t + _corr FROM n WHERE t < 10) SELECT * FROM n) AS _(x) UNION ALL (SELECT x, CASE WHEN t % 2 = _corr THEN t * 3 + p ELSE t / 2 END, steps + p FROM collatz, (WITH RECURSIVE n(t) AS (SELECT _corr UNION ALL SELECT t + _corr FROM n WHERE t < _corr) SELECT * FROM n) AS _(p) WHERE t <> _corr)) SELECT * FROM collatz WHERE t = _corr ORDER BY x) AS t2;

SELECT x, y FROM GENERATE_SERIES(1, 4) AS _(x), LATERAL (WITH RECURSIVE t(y) AS (SELECT _.x UNION SELECT y + 1 FROM t WHERE y < 3) SELECT * FROM t) AS t ORDER BY x, y;

SELECT x, y FROM GENERATE_SERIES(1, 4) AS _(x), LATERAL (WITH RECURSIVE t(y) AS (SELECT 1 UNION SELECT y + _.x FROM t WHERE y < 3) SELECT * FROM t) AS t ORDER BY x, y;

SELECT x, y FROM GENERATE_SERIES(1, 4) AS _(x), LATERAL (WITH RECURSIVE t(y) AS (SELECT _.x UNION SELECT y + _.x FROM t WHERE y < 3) SELECT * FROM t) AS t ORDER BY x, y;

SELECT x, y FROM GENERATE_SERIES(1, 4) AS _(x), LATERAL (WITH RECURSIVE t(y) AS (SELECT _.x UNION SELECT t1.y + t2.y + _.x FROM t AS t1, t AS t2 WHERE t1.y < 3) SELECT * FROM t) AS t ORDER BY x, y;

SELECT x, y, (WITH RECURSIVE t(z) AS (SELECT x + y UNION SELECT z + 1 FROM t WHERE z < 3) SELECT SUM(z) FROM t) AS z FROM GENERATE_SERIES(1, 2) AS _(x), GENERATE_SERIES(1, 2) AS __(y) ORDER BY ALL;

SELECT x, y, (WITH RECURSIVE t(z) AS (SELECT x + y UNION SELECT z + 1 FROM (WITH RECURSIVE g(a) AS (SELECT t.z FROM t UNION SELECT g.a + (x + y) / 2 FROM g WHERE g.a < 3) SELECT * FROM g) AS t(z) WHERE z < 5) SELECT SUM(z) FROM t) AS z FROM GENERATE_SERIES(1, 2) AS _(x), GENERATE_SERIES(1, 2) AS __(y) ORDER BY ALL;

PRAGMA enable_verification;

CREATE TABLE a (i INT);

INSERT INTO a VALUES (42);

WITH cte1 AS (SELECT i AS j FROM a) SELECT * FROM cte1;

WITH cte1 AS (SELECT i AS j FROM a) SELECT x FROM cte1 AS t1(x);

WITH cte1(xxx) AS (SELECT i AS j FROM a) SELECT xxx FROM cte1;

WITH cte1(xxx) AS (SELECT i AS j FROM a) SELECT x FROM cte1 AS t1(x);

WITH cte1 AS (SELECT i AS j FROM a), cte2 AS (SELECT ref.j AS k FROM cte1 AS ref), cte3 AS (SELECT ref2.j + 1 AS i FROM cte1 AS ref2) SELECT * FROM cte2, cte3;

WITH cte1 AS (SELECT i AS j FROM a), cte2 AS (SELECT ref.j AS k FROM cte1 AS ref), cte3 AS (SELECT ref2.j + 1 AS i FROM cte1 AS ref2) SELECT * FROM cte2 UNION ALL SELECT * FROM cte3;

WITH cte1 AS (SELECT 42), cte1 AS (SELECT 42) SELECT * FROM cte1;

WITH cte1 AS (SELECT i AS j FROM a) SELECT * FROM cte1 AS cte11, cte1 AS cte12;

WITH cte1 AS (SELECT i AS j FROM a) SELECT * FROM cte1 WHERE j = (SELECT MAX(j) FROM cte1 AS cte2);

WITH cte1(x, y) AS (SELECT 42 AS a, 84 AS b) SELECT zzz, y FROM cte1 AS t1(zzz);

CREATE VIEW va AS (WITH cte AS (SELECT i AS j FROM a) SELECT * FROM cte);

SELECT * FROM va;

WITH cte AS (SELECT * FROM va) SELECT * FROM cte;

CREATE VIEW vb AS (WITH cte1 AS (SELECT i AS j FROM a), cte2 AS (SELECT ref.j + 1 AS k FROM cte1 AS ref) SELECT * FROM cte2);

SELECT * FROM vb;

SELECT 1 UNION ALL (WITH cte AS (SELECT 42) SELECT * FROM cte);

WITH RECURSIVE cte(d) AS (SELECT 1 UNION ALL (WITH c(d) AS (SELECT * FROM cte) SELECT d + 1 FROM c WHERE FALSE)) SELECT MAX(d) FROM cte;

WITH cte(a) AS (SELECT 1) SELECT a AS alias1, alias1 AS alias2 FROM cte WHERE alias2 > 0;

WITH cte(a) AS (SELECT 1) SELECT a AS alias1, alias1 AS alias2 FROM cte WHERE alias2 > 0;

WITH cte(a) AS (SELECT 1) SELECT a AS alias1, alias1 AS alias2 FROM cte WHERE alias2 > 0;

WITH RECURSIVE t(b) AS MATERIALIZED ((WITH helper(c) AS (SELECT 5), h1 AS (SELECT * FROM helper AS h UNION SELECT 7 FROM helper AS h) SELECT * FROM h1)) SELECT * FROM t ORDER BY b;

WITH RECURSIVE t(b) AS MATERIALIZED ((WITH helper(c) AS (SELECT 5) SELECT * FROM helper AS h UNION SELECT 7)) SELECT * FROM t ORDER BY b;

WITH cte3 AS (SELECT ref2.j AS i FROM cte1 AS ref2), cte1 AS (SELECT i AS j FROM a), cte2 AS (SELECT ref.j + 1 AS k FROM cte1 AS ref) SELECT * FROM cte2 UNION ALL SELECT * FROM cte3;

PRAGMA enable_verification;

CREATE TABLE a (i INT);

INSERT INTO a VALUES (42);

WITH cte1 AS (SELECT i AS j FROM a) SELECT * FROM cte1;

WITH cte1 AS (WITH b AS (SELECT i AS j FROM a) SELECT j FROM b) SELECT x FROM cte1 AS t1(x);

WITH cte1(xxx) AS (WITH ncte(yyy) AS (SELECT i AS j FROM a) SELECT yyy FROM ncte) SELECT xxx FROM cte1;

WITH cte1 AS (WITH b AS (SELECT i AS j FROM a) SELECT j FROM b), cte2 AS (WITH c AS (SELECT ref.j + 1 AS k FROM cte1 AS ref) SELECT k FROM c) SELECT * FROM cte1, cte2;

WITH cte1 AS (SELECT 42), cte1 AS (SELECT 42) SELECT * FROM cte1;

WITH cte1 AS (SELECT i AS j FROM a) SELECT * FROM (WITH cte2 AS (SELECT MAX(j) AS j FROM cte1) SELECT * FROM cte2) AS f;

WITH cte1 AS (SELECT i AS j FROM a) SELECT * FROM cte1 WHERE j = (WITH cte2 AS (SELECT MAX(j) AS j FROM cte1) SELECT j FROM cte2);

WITH cte AS (SELECT i AS j FROM a) SELECT * FROM cte WHERE j = (WITH cte AS (SELECT MAX(j) AS j FROM cte) SELECT j FROM cte);

WITH cte AS (SELECT * FROM cte) SELECT * FROM cte;

CREATE TABLE a (id INT);

INSERT INTO a VALUES (1729);

CREATE VIEW va AS (WITH v AS (SELECT * FROM a) SELECT * FROM v);

WITH a AS (SELECT * FROM va) SELECT * FROM a;

PRAGMA enable_verification;

CREATE OR REPLACE TABLE orders (ordered_at INT);

CREATE OR REPLACE TABLE stg_orders (ordered_at INT);

INSERT INTO orders VALUES (1);

INSERT INTO stg_orders VALUES (1);

WITH orders AS (SELECT * FROM main.stg_orders WHERE ordered_at >= (SELECT MAX(ordered_at) FROM main.orders)), some_more_logic AS (SELECT * FROM orders) SELECT * FROM some_more_logic;

WITH orders AS (SELECT * FROM stg_orders WHERE ordered_at >= (SELECT MAX(ordered_at) FROM orders)), some_more_logic AS (SELECT * FROM orders) SELECT * FROM some_more_logic;

PRAGMA enable_verification;

WITH RECURSIVE t(x) AS (SELECT 1 UNION ALL SELECT x + 1 FROM t WHERE x < 4), u(x) AS (SELECT * FROM t UNION ALL SELECT u.x * 2 + t.x FROM u, t WHERE u.x < 32) SELECT * FROM u ORDER BY x LIMIT 5;

WITH RECURSIVE collatz(x, t, steps) AS (SELECT x, x, 0 FROM (WITH RECURSIVE n(t) AS (SELECT 1 UNION ALL SELECT t + 1 FROM n WHERE t < 10) SELECT * FROM n) AS _(x) UNION ALL (SELECT x, CASE WHEN t % 2 = 1 THEN t * 3 + p ELSE t / 2 END, steps + p FROM collatz, (WITH RECURSIVE n(t) AS (SELECT 1 UNION ALL SELECT t + 1 FROM n WHERE t < 1) SELECT * FROM n) AS _(p) WHERE t <> 1)) SELECT * FROM collatz WHERE t = 1 ORDER BY x;

PRAGMA enable_verification;

CREATE TABLE v (x INT);

INSERT INTO v VALUES (1), (2), (3);

WITH RECURSIVE t(x) AS (SELECT 1 UNION ALL SELECT x + 1 FROM (SELECT t.x + 1 FROM v AS _(p) FULL OUTER JOIN t ON t.x = p) AS _(x) WHERE x < 10) SELECT * FROM v AS _(p) RIGHT OUTER JOIN t ON t.x = p ORDER BY p, t;

PRAGMA enable_verification;

CREATE TABLE emp (empno INT PRIMARY KEY, ename TEXT, job TEXT, mgr INT, hiredate DATE, sal DOUBLE, comm DOUBLE, deptno INT);

INSERT INTO emp VALUES (7839, 'KING', 'PRESIDENT', NULL, CAST('1981-11-17' AS DATE), 5000.00, NULL, 10);
INSERT INTO emp VALUES (7698, 'BLAKE', 'MANAGER', 7839, CAST('1981-05-01' AS DATE), 2850.00, NULL, 30);
INSERT INTO emp VALUES (7782, 'CLARK', 'MANAGER', 7839, CAST('1981-06-09' AS DATE), 2450.00, NULL, 10);
INSERT INTO emp VALUES (7566, 'JONES', 'MANAGER', 7839, CAST('1981-04-02' AS DATE), 2975.00, NULL, 20);
INSERT INTO emp VALUES (7902, 'FORD', 'ANALYST', 7566, CAST('1981-12-03' AS DATE), 3000.00, NULL, 20);
INSERT INTO emp VALUES (7369, 'SMITH', 'CLERK', 7902, CAST('1980-12-17' AS DATE), 800.00, NULL, 20);
INSERT INTO emp VALUES (7499, 'ALLEN', 'SALESMAN', 7698, CAST('1981-02-20' AS DATE), 1600.00, 300.00, 30);
INSERT INTO emp VALUES (7521, 'WARD', 'SALESMAN', 7698, CAST('1981-02-22' AS DATE), 1250.00, 500.00, 30);
INSERT INTO emp VALUES (7654, 'MARTIN', 'SALESMAN', 7698, CAST('1981-09-28' AS DATE), 1250.00, 1400.00, 30);
INSERT INTO emp VALUES (7844, 'TURNER', 'SALESMAN', 7698, CAST('1981-09-08' AS DATE), 1500.00, 0.00, 30);
INSERT INTO emp VALUES (7900, 'JAMES', 'CLERK', 7698, CAST('1981-12-03' AS DATE), 950.00, NULL, 30);
INSERT INTO emp VALUES (7934, 'MILLER', 'CLERK', 7782, CAST('1982-01-23' AS DATE), 1300.00, NULL, 10);

WITH RECURSIVE ctename AS (SELECT empno, ename FROM emp WHERE empno = 7566 UNION ALL SELECT emp.empno, emp.ename FROM emp JOIN ctename ON emp.mgr = ctename.empno) SELECT * FROM ctename;

WITH RECURSIVE ctename AS (SELECT empno, ename, 0 AS level FROM emp WHERE empno = 7566 UNION ALL SELECT emp.empno, emp.ename, ctename.level + 1 FROM emp JOIN ctename ON emp.mgr = ctename.empno) SELECT * FROM ctename;

WITH RECURSIVE ctename AS (SELECT empno, ename, ename AS path FROM emp WHERE empno = 7566 UNION ALL SELECT emp.empno, emp.ename, ctename.path || ' -> ' || emp.ename FROM emp JOIN ctename ON emp.mgr = ctename.empno) SELECT * FROM ctename;

CREATE VIEW ctenames AS (WITH RECURSIVE ctename AS (SELECT empno, ename, ename AS path FROM emp WHERE empno = 7566 UNION ALL SELECT emp.empno, emp.ename, ctename.path || ' -> ' || emp.ename FROM emp JOIN ctename ON emp.mgr = ctename.empno) SELECT * FROM ctename);

SELECT * FROM ctenames;

WITH RECURSIVE fib AS (SELECT 1 AS n, CAST(1 AS BIGINT) AS "fibₙ", CAST(1 AS BIGINT) AS "fibₙ₊₁" UNION ALL SELECT n + 1, "fibₙ₊₁", "fibₙ" + "fibₙ₊₁" FROM fib) SELECT n, "fibₙ" FROM fib LIMIT 20;

PRAGMA enable_verification;

WITH RECURSIVE t AS (SELECT 1 AS x UNION SELECT x + 1 FROM t WHERE x < 3) SELECT * FROM t ORDER BY x;

WITH RECURSIVE t(x) AS (SELECT 1 UNION SELECT x + 1 FROM t WHERE x < 3) SELECT * FROM t ORDER BY x;

WITH RECURSIVE t(x) AS (SELECT 1 UNION SELECT x + 1 FROM t WHERE x < 3) SELECT zz FROM t AS t1(zz) ORDER BY zz;

WITH RECURSIVE t(x) AS (SELECT 1 UNION SELECT zzz + 1 FROM t AS t1(zzz) WHERE zzz < 3) SELECT zz FROM t AS t1(zz) ORDER BY zz;

WITH RECURSIVE t AS (SELECT 1 AS x UNION SELECT x FROM t) SELECT * FROM t;

WITH RECURSIVE t AS (SELECT 1 AS x UNION SELECT x + 1 FROM t AS m WHERE m.x < 3) SELECT * FROM t ORDER BY x;

WITH RECURSIVE t AS (SELECT 1 AS x UNION SELECT m.x + f.x FROM t AS m, t AS f WHERE m.x < 3) SELECT * FROM t ORDER BY x;

WITH RECURSIVE t AS (SELECT 1 AS x, 'hello' AS y UNION SELECT x + 1, y || '-' || 'hello' FROM t WHERE x < 3) SELECT * FROM t ORDER BY x;

WITH RECURSIVE t AS (SELECT 1 AS x UNION SELECT x + 1 FROM t WHERE x < 3) SELECT MIN(a1.x) FROM t AS a1, t AS a2;

WITH RECURSIVE t AS (SELECT 1 AS x UNION SELECT x + (SELECT 1) FROM t WHERE x < 3) SELECT * FROM t ORDER BY x;

WITH RECURSIVE t AS (SELECT 1 AS x UNION ALL SELECT * FROM (SELECT x FROM t WHERE x < 5) AS tbl(i) JOIN (SELECT 1) AS tbl2(i) USING (i)) SELECT * FROM t LIMIT 3;

WITH RECURSIVE t AS (SELECT 1 AS x UNION ALL SELECT * FROM (SELECT 1) AS tbl2(i) JOIN (SELECT x FROM t WHERE x < 5) AS tbl(i) USING (i)) SELECT * FROM t LIMIT 3;

WITH RECURSIVE t AS (SELECT 1 AS x UNION ALL SELECT * FROM (SELECT x FROM t WHERE x < 5) AS tbl(i) JOIN (SELECT FIRST(i) FROM (VALUES (1)) AS tbl3(i) LIMIT 1) AS tbl2(i) USING (i)) SELECT * FROM t LIMIT 3;

WITH RECURSIVE t AS (SELECT 1 AS x UNION ALL SELECT * FROM (SELECT FIRST(i) FROM (VALUES (1)) AS tbl3(i) LIMIT 1) AS tbl2(i) JOIN (SELECT x FROM t WHERE x < 5) AS tbl(i) USING (i)) SELECT * FROM t LIMIT 3;

WITH RECURSIVE t AS (SELECT 1 AS x UNION SELECT x + (SELECT 1 + t.x) FROM t WHERE x < 5) SELECT * FROM t ORDER BY x;

CREATE TABLE integers AS WITH RECURSIVE t AS (SELECT 1 AS x UNION SELECT x + 1 FROM t WHERE x < 3) SELECT * FROM t;

WITH RECURSIVE t AS (SELECT (SELECT MIN(x) FROM integers) AS x UNION SELECT x + 1 FROM t WHERE x < 3) SELECT * FROM t ORDER BY x;

WITH RECURSIVE t AS (SELECT 1 AS x UNION SELECT SUM(x + 1) FROM t WHERE x < 3) SELECT * FROM t ORDER BY 1;

WITH RECURSIVE t AS (SELECT 1 AS x UNION SELECT SUM(x + 1) FROM t WHERE x < 3 ORDER BY x) SELECT * FROM t;

WITH RECURSIVE t AS (SELECT 1 AS x UNION SELECT SUM(x + 1) FROM t WHERE x < 3 LIMIT 1) SELECT * FROM t;

WITH RECURSIVE t AS (SELECT 1 AS x UNION SELECT SUM(x + 1) FROM t WHERE x < 3 OFFSET 1) SELECT * FROM t;

WITH RECURSIVE t AS (SELECT 1 AS x UNION SELECT SUM(x + 1) FROM t WHERE x < 3 LIMIT 1 OFFSET 1) SELECT * FROM t;

CREATE VIEW vr AS (WITH RECURSIVE t(x) AS (SELECT 1 UNION SELECT x + 1 FROM t WHERE x < 3) SELECT * FROM t ORDER BY x);

SELECT * FROM vr;

PRAGMA enable_verification;

WITH RECURSIVE t AS (SELECT 1 AS x UNION ALL SELECT x + 1 FROM t WHERE x < 3) SELECT * FROM t;

WITH RECURSIVE t AS (SELECT 1 AS x UNION ALL SELECT x + 1 FROM t AS m WHERE m.x < 3) SELECT * FROM t;

WITH RECURSIVE t AS (SELECT 1 AS x UNION ALL SELECT m.x + f.x FROM t AS m, t AS f WHERE m.x < 3) SELECT * FROM t;

WITH RECURSIVE t AS (SELECT 1 AS x, 'hello' AS y UNION ALL SELECT x + 1, y || '-' || 'hello' FROM t WHERE x < 3) SELECT * FROM t;

WITH RECURSIVE t AS (SELECT 1 AS x UNION ALL SELECT x + 1 FROM t WHERE x < 3) SELECT MIN(a1.x) FROM t AS a1, t AS a2;

WITH RECURSIVE t AS (SELECT 1 AS x UNION ALL SELECT x + (SELECT 1) FROM t WHERE x < 3) SELECT * FROM t;

CREATE TABLE integers AS WITH RECURSIVE t AS (SELECT 1 AS x UNION ALL SELECT x + 1 FROM t WHERE x < 3) SELECT * FROM t;

WITH RECURSIVE t AS (SELECT (SELECT MIN(x) FROM integers) AS x UNION ALL SELECT x + 1 FROM t WHERE x < 3) SELECT * FROM t;

WITH RECURSIVE t AS (SELECT 1 AS x UNION ALL SELECT SUM(x + 1) AS x FROM t WHERE x < 3 GROUP BY x) SELECT * FROM t;

WITH RECURSIVE t AS (SELECT 1 AS x UNION ALL SELECT SUM(x + 1) AS x FROM t WHERE x < 3) SELECT * FROM (SELECT * FROM t LIMIT 10) AS t1(x) ORDER BY x;

WITH RECURSIVE t AS (SELECT 1 AS i UNION ALL SELECT j FROM t, GENERATE_SERIES(0, 10, 1) AS series(j) WHERE j = i + 1) SELECT * FROM t;

WITH RECURSIVE t AS (SELECT 1 AS x UNION ALL SELECT x + 1 FROM t WHERE x < 3 ORDER BY x) SELECT * FROM t;

WITH RECURSIVE t AS (SELECT 1 AS x UNION ALL SELECT x + 1 FROM t WHERE x < 3 LIMIT 1) SELECT * FROM t;

WITH RECURSIVE t AS (SELECT 1 AS x UNION ALL SELECT x + 1 FROM t WHERE x < 3 OFFSET 1) SELECT * FROM t;

WITH RECURSIVE t AS (SELECT 1 AS x UNION ALL SELECT x + 1 FROM t WHERE x < 3 LIMIT 1 OFFSET 1) SELECT * FROM t;

CREATE TABLE batch (entity TEXT, start_ts TIMESTAMP, duration INTERVAL);

CREATE TABLE active_events (entity TEXT, start_ts TIMESTAMP, end_ts TIMESTAMP);

PRAGMA enable_verification;

PRAGMA explain_output = 'OPTIMIZED_ONLY';

CALL dbgen(sf=0.01);

EXPLAIN WITH revenue AS (
SELECT
l_suppkey AS supplier_no,
sum(l_extendedprice * (1 - l_discount)) AS total_revenue
FROM
lineitem
WHERE
l_shipdate >= CAST('1996-01-01' AS date)
AND l_shipdate < CAST('1996-04-01' AS date)
GROUP BY
supplier_no
)
SELECT
s_suppkey,
s_name,
s_address,
s_phone,
total_revenue
FROM
supplier,
revenue
WHERE
s_suppkey = supplier_no
AND total_revenue = (
SELECT
max(total_revenue)
FROM revenue)
ORDER BY
s_suppkey;

EXPLAIN WITH revenue AS NOT MATERIALIZED (
SELECT
l_suppkey AS supplier_no,
sum(l_extendedprice * (1 - l_discount)) AS total_revenue
FROM
lineitem
WHERE
l_shipdate >= CAST('1996-01-01' AS date)
AND l_shipdate < CAST('1996-04-01' AS date)
GROUP BY
supplier_no
)
SELECT
s_suppkey,
s_name,
s_address,
s_phone,
total_revenue
FROM
supplier,
revenue
WHERE
s_suppkey = supplier_no
AND total_revenue = (
SELECT
max(total_revenue)
FROM revenue)
ORDER BY
s_suppkey;

EXPLAIN WITH revenue AS NOT MATERIALIZED (
SELECT
l_suppkey AS supplier_no,
sum(l_extendedprice * (1 - l_discount)) AS total_revenue
FROM
lineitem
WHERE
l_shipdate >= CAST('1996-01-01' AS date)
AND l_shipdate < CAST('1996-04-01' AS date)
GROUP BY
supplier_no
)
SELECT
s_suppkey,
s_name,
s_address,
s_phone,
total_revenue
FROM
supplier,
revenue
WHERE
s_suppkey = supplier_no
AND total_revenue = (
SELECT
max(total_revenue)
FROM revenue)
ORDER BY
s_suppkey;

CALL dsdgen(sf=0.01);

EXPLAIN WITH frequent_ss_items AS
(SELECT itemdesc,
i_item_sk item_sk,
d_date solddate,
count(*) cnt
FROM store_sales,
date_dim,
(SELECT SUBSTRING(i_item_desc, 1, 30) itemdesc,
*
FROM item) sq1
WHERE ss_sold_date_sk = d_date_sk
AND ss_item_sk = i_item_sk
AND d_year IN (2000,
2000+1,
2000+2,
2000+3)
GROUP BY itemdesc,
i_item_sk,
d_date
HAVING count(*) >4),
max_store_sales AS
(SELECT max(csales) tpcds_cmax
FROM
(SELECT c_customer_sk,
sum(ss_quantity*ss_sales_price) csales
FROM store_sales,
customer,
date_dim
WHERE ss_customer_sk = c_customer_sk
AND ss_sold_date_sk = d_date_sk
AND d_year IN (2000,
2000+1,
2000+2,
2000+3)
GROUP BY c_customer_sk) sq2),
best_ss_customer AS
(SELECT c_customer_sk,
sum(ss_quantity*ss_sales_price) ssales
FROM store_sales,
customer,
max_store_sales
WHERE ss_customer_sk = c_customer_sk
GROUP BY c_customer_sk
HAVING sum(ss_quantity*ss_sales_price) > (50/100.0) * max(tpcds_cmax))
SELECT c_last_name,
c_first_name,
sales
FROM
(SELECT c_last_name,
c_first_name,
sum(cs_quantity*cs_list_price) sales
FROM catalog_sales,
customer,
date_dim,
frequent_ss_items,
best_ss_customer
WHERE d_year = 2000
AND d_moy = 2
AND cs_sold_date_sk = d_date_sk
AND cs_item_sk = item_sk
AND cs_bill_customer_sk = best_ss_customer.c_customer_sk
AND cs_bill_customer_sk = customer.c_customer_sk
GROUP BY c_last_name,
c_first_name
UNION ALL SELECT c_last_name,
c_first_name,
sum(ws_quantity*ws_list_price) sales
FROM web_sales,
customer,
date_dim,
frequent_ss_items,
best_ss_customer
WHERE d_year = 2000
AND d_moy = 2
AND ws_sold_date_sk = d_date_sk
AND ws_item_sk = item_sk
AND ws_bill_customer_sk = best_ss_customer.c_customer_sk
AND ws_bill_customer_sk = customer.c_customer_sk
GROUP BY c_last_name,
c_first_name) sq3
ORDER BY c_last_name NULLS FIRST,
c_first_name NULLS FIRST,
sales NULLS FIRST
LIMIT 100;

EXPLAIN WITH frequent_ss_items AS NOT MATERIALIZED
(SELECT itemdesc,
i_item_sk item_sk,
d_date solddate,
count(*) cnt
FROM store_sales,
date_dim,
(SELECT SUBSTRING(i_item_desc, 1, 30) itemdesc,
*
FROM item) sq1
WHERE ss_sold_date_sk = d_date_sk
AND ss_item_sk = i_item_sk
AND d_year IN (2000,
2000+1,
2000+2,
2000+3)
GROUP BY itemdesc,
i_item_sk,
d_date
HAVING count(*) >4),
max_store_sales AS NOT MATERIALIZED
(SELECT max(csales) tpcds_cmax
FROM
(SELECT c_customer_sk,
sum(ss_quantity*ss_sales_price) csales
FROM store_sales,
customer,
date_dim
WHERE ss_customer_sk = c_customer_sk
AND ss_sold_date_sk = d_date_sk
AND d_year IN (2000,
2000+1,
2000+2,
2000+3)
GROUP BY c_customer_sk) sq2),
best_ss_customer AS NOT MATERIALIZED
(SELECT c_customer_sk,
sum(ss_quantity*ss_sales_price) ssales
FROM store_sales,
customer,
max_store_sales
WHERE ss_customer_sk = c_customer_sk
GROUP BY c_customer_sk
HAVING sum(ss_quantity*ss_sales_price) > (50/100.0) * max(tpcds_cmax))
SELECT c_last_name,
c_first_name,
sales
FROM
(SELECT c_last_name,
c_first_name,
sum(cs_quantity*cs_list_price) sales
FROM catalog_sales,
customer,
date_dim,
frequent_ss_items,
best_ss_customer
WHERE d_year = 2000
AND d_moy = 2
AND cs_sold_date_sk = d_date_sk
AND cs_item_sk = item_sk
AND cs_bill_customer_sk = best_ss_customer.c_customer_sk
AND cs_bill_customer_sk = customer.c_customer_sk
GROUP BY c_last_name,
c_first_name
UNION ALL SELECT c_last_name,
c_first_name,
sum(ws_quantity*ws_list_price) sales
FROM web_sales,
customer,
date_dim,
frequent_ss_items,
best_ss_customer
WHERE d_year = 2000
AND d_moy = 2
AND ws_sold_date_sk = d_date_sk
AND ws_item_sk = item_sk
AND ws_bill_customer_sk = best_ss_customer.c_customer_sk
AND ws_bill_customer_sk = customer.c_customer_sk
GROUP BY c_last_name,
c_first_name) sq3
ORDER BY c_last_name NULLS FIRST,
c_first_name NULLS FIRST,
sales NULLS FIRST
LIMIT 100;

EXPLAIN WITH v1 AS
(SELECT i_category,
i_brand,
cc_name,
d_year,
d_moy,
sum(cs_sales_price) sum_sales,
avg(sum(cs_sales_price)) OVER (PARTITION BY i_category,
i_brand,
cc_name,
d_year) avg_monthly_sales,
rank() OVER (PARTITION BY i_category,
i_brand,
cc_name
ORDER BY d_year,
d_moy) rn
FROM item,
catalog_sales,
date_dim,
call_center
WHERE cs_item_sk = i_item_sk
AND cs_sold_date_sk = d_date_sk
AND cc_call_center_sk= cs_call_center_sk
AND (d_year = 1999
OR (d_year = 1999-1
AND d_moy =12)
OR (d_year = 1999+1
AND d_moy =1))
GROUP BY i_category,
i_brand,
cc_name,
d_year,
d_moy),
v2 AS
(SELECT v1.i_category,
v1.i_brand,
v1.cc_name,
v1.d_year,
v1.d_moy,
v1.avg_monthly_sales,
v1.sum_sales,
v1_lag.sum_sales psum,
v1_lead.sum_sales nsum
FROM v1,
v1 v1_lag,
v1 v1_lead
WHERE v1.i_category = v1_lag.i_category
AND v1.i_category = v1_lead.i_category
AND v1.i_brand = v1_lag.i_brand
AND v1.i_brand = v1_lead.i_brand
AND v1. cc_name = v1_lag. cc_name
AND v1. cc_name = v1_lead. cc_name
AND v1.rn = v1_lag.rn + 1
AND v1.rn = v1_lead.rn - 1)
SELECT *
FROM v2
WHERE d_year = 1999
AND avg_monthly_sales > 0
AND CASE
WHEN avg_monthly_sales > 0 THEN abs(sum_sales - avg_monthly_sales) / avg_monthly_sales
ELSE NULL
END > 0.1
ORDER BY sum_sales - avg_monthly_sales NULLS FIRST, 1, 2, 3, 4, 5, 6, 7, 8, 9
LIMIT 100;

EXPLAIN WITH v1 AS NOT MATERIALIZED
(SELECT i_category,
i_brand,
cc_name,
d_year,
d_moy,
sum(cs_sales_price) sum_sales,
avg(sum(cs_sales_price)) OVER (PARTITION BY i_category,
i_brand,
cc_name,
d_year) avg_monthly_sales,
rank() OVER (PARTITION BY i_category,
i_brand,
cc_name
ORDER BY d_year,
d_moy) rn
FROM item,
catalog_sales,
date_dim,
call_center
WHERE cs_item_sk = i_item_sk
AND cs_sold_date_sk = d_date_sk
AND cc_call_center_sk= cs_call_center_sk
AND (d_year = 1999
OR (d_year = 1999-1
AND d_moy =12)
OR (d_year = 1999+1
AND d_moy =1))
GROUP BY i_category,
i_brand,
cc_name,
d_year,
d_moy),
v2 AS
(SELECT v1.i_category,
v1.i_brand,
v1.cc_name,
v1.d_year,
v1.d_moy,
v1.avg_monthly_sales,
v1.sum_sales,
v1_lag.sum_sales psum,
v1_lead.sum_sales nsum
FROM v1,
v1 v1_lag,
v1 v1_lead
WHERE v1.i_category = v1_lag.i_category
AND v1.i_category = v1_lead.i_category
AND v1.i_brand = v1_lag.i_brand
AND v1.i_brand = v1_lead.i_brand
AND v1. cc_name = v1_lag. cc_name
AND v1. cc_name = v1_lead. cc_name
AND v1.rn = v1_lag.rn + 1
AND v1.rn = v1_lead.rn - 1)
SELECT *
FROM v2
WHERE d_year = 1999
AND avg_monthly_sales > 0
AND CASE
WHEN avg_monthly_sales > 0 THEN abs(sum_sales - avg_monthly_sales) / avg_monthly_sales
ELSE NULL
END > 0.1
ORDER BY sum_sales - avg_monthly_sales NULLS FIRST, 1, 2, 3, 4, 5, 6, 7, 8, 9
LIMIT 100;

WITH a(x) AS MATERIALIZED (SELECT * FROM GENERATE_SERIES(1, 10)), b(x) AS MATERIALIZED (SELECT * FROM a WHERE x < 8) SELECT * FROM b WHERE x % 3 = 1 ORDER BY x;

CREATE TABLE series AS SELECT * FROM GENERATE_SERIES(-1, 1) AS x(n);

WITH RECURSIVE generation1(x, y) AS MATERIALIZED (SELECT 2, 3 UNION SELECT 3, 3 UNION SELECT 4, 3), game(n, x, y) AS MATERIALIZED (SELECT 1 AS n, x, y FROM generation1 /* generation 1 is initial board setup */ UNION ALL SELECT n + 1, new_x, new_y /* generation n+1 */ FROM (SELECT n, x + offset_x AS new_x, y + offset_y AS new_y, MAX(self) OVER (PARTITION BY n + 1, x + offset_x, y + offset_y) AS cell_was_already_alive FROM game, (SELECT x.n AS offset_x, y.n AS offset_y, CASE WHEN x.n = 0 AND y.n = 0 THEN 1 ELSE 0 END AS self FROM series AS x(n), series AS y(n) /* join 2 row generators to get 9 pairs */) AS offsets_to_neighbours_and_self(offset_x, offset_y, self) WHERE n < 100) AS all_impacts GROUP BY n + 1, new_x, new_y, cell_was_already_alive /* from all impacts back to cells */ HAVING (cell_was_already_alive = 1 AND COUNT(*) < 5 AND COUNT(*) > 2) OR COUNT(*) = 3 /* decide if cell is alive */) SELECT * FROM game WHERE n = 4 ORDER BY n, x, y;
/* select generation 4 */;

WITH RECURSIVE generation1(x, y) AS MATERIALIZED (SELECT 2, 3 UNION SELECT 3, 3 UNION SELECT 4, 3), game(n, x, y) AS MATERIALIZED (SELECT 1 AS n, x, y FROM generation1 /* generation 1 is initial board setup */ UNION ALL SELECT n + 1, new_x, new_y /* generation n+1 */ FROM (SELECT n, x + offset_x AS new_x, y + offset_y AS new_y, MAX(self) OVER (PARTITION BY n + 1, x + offset_x, y + offset_y) AS cell_was_already_alive FROM game, (SELECT x.n AS offset_x, y.n AS offset_y, CASE WHEN x.n = 0 AND y.n = 0 THEN 1 ELSE 0 END AS self FROM GENERATE_SERIES(-1, 1) AS x(n), GENERATE_SERIES(-1, 1) AS y(n) /* join 2 row generators to get 9 pairs */) AS offsets_to_neighbours_and_self(offset_x, offset_y, self) WHERE n < 100) AS all_impacts GROUP BY n + 1, new_x, new_y, cell_was_already_alive /* from all impacts back to cells */ HAVING (cell_was_already_alive = 1 AND COUNT(*) < 5 AND COUNT(*) > 2) OR COUNT(*) = 3 /* decide if cell is alive */) SELECT * FROM game WHERE n = 4 ORDER BY n, x, y;
/* select generation 4 */;

WITH RECURSIVE cte AS MATERIALIZED (SELECT 42) SELECT * FROM cte;

WITH RECURSIVE t AS MATERIALIZED (SELECT 1 AS x INTERSECT SELECT x + 1 FROM t WHERE x < 3) SELECT * FROM t ORDER BY x;

WITH RECURSIVE t AS MATERIALIZED (SELECT 1 AS x EXCEPT SELECT x + 1 FROM t WHERE x < 3) SELECT * FROM t ORDER BY x;

CALL dsdgen(sf=0);

EXPLAIN WITH customer_total_return AS
(SELECT sr_customer_sk AS ctr_customer_sk,
sr_store_sk AS ctr_store_sk,
sum(sr_return_amt) AS ctr_total_return
FROM store_returns,
date_dim
WHERE sr_returned_date_sk = d_date_sk
AND d_year = 2000
GROUP BY sr_customer_sk,
sr_store_sk)
SELECT c_customer_id
FROM customer_total_return ctr1,
store,
customer
WHERE ctr1.ctr_total_return >
(SELECT avg(ctr_total_return)*1.2
FROM customer_total_return ctr2
WHERE ctr1.ctr_store_sk = ctr2.ctr_store_sk)
AND s_store_sk = ctr1.ctr_store_sk
AND s_state = 'TN'
AND ctr1.ctr_customer_sk = c_customer_sk
ORDER BY c_customer_id
LIMIT 100;

PRAGMA enable_verification;

CREATE TABLE p (loc TINYINT);

INSERT INTO p VALUES (1);

WITH RECURSIVE t(y, arr) AS MATERIALIZED (SELECT 1, [1, 2, 3, 4, 5, 6] UNION ALL SELECT y + 1, arr[$loc] FROM t, p WHERE y < 10) SELECT * FROM t;

WITH RECURSIVE t(y, arr) AS MATERIALIZED (SELECT 1, [1, 2, 3, 4, 5, 6] UNION ALL SELECT y + 1, arr FROM t, p WHERE y < 10 AND y = loc) SELECT * FROM t;

WITH RECURSIVE t(y, arr) AS MATERIALIZED (SELECT 1, [1, 2, 3, 4, 5, 6] UNION ALL SELECT y + 1, arr[$loc] FROM t, p WHERE y < 10 AND y = loc) SELECT * FROM t;

WITH RECURSIVE t(arr) AS MATERIALIZED (SELECT [1, 2, 3, 4, 5, 6] UNION ALL SELECT arr[arr[1] + 1 : 6] FROM t WHERE arr[1] < 6) SELECT * FROM t;

PRAGMA enable_verification;

WITH RECURSIVE t AS MATERIALIZED (SELECT 1 AS x UNION SELECT t1.x + t2.x + t3.x AS x FROM t AS t1, t AS t2, t AS t3 WHERE t1.x < 100) SELECT * FROM t ORDER BY 1;

WITH RECURSIVE t AS MATERIALIZED (SELECT 1 AS x UNION SELECT CAST((t1.x + t2.x + t3.x) AS INT128) AS x FROM t AS t1, t AS t2, t AS t3 WHERE t1.x < 100) SELECT * FROM t ORDER BY 1;

CREATE TABLE a AS SELECT * FROM RANGE(0, 100) AS t1(i);

WITH RECURSIVE t AS MATERIALIZED (SELECT 1 AS x UNION SELECT SUM(x) AS x FROM t, a WHERE x < 1000000) SELECT * FROM t ORDER BY 1;

WITH RECURSIVE t AS MATERIALIZED (SELECT 1 AS x UNION SELECT SUM(x) AS x FROM t, a WHERE x < 1000000 AND t.x = a.i) SELECT * FROM t ORDER BY 1;

WITH RECURSIVE t AS MATERIALIZED (SELECT 1 AS x UNION SELECT SUM(x) FROM (SELECT SUM(x) FROM t) AS t1(x), a WHERE x < 1000) SELECT * FROM t ORDER BY 1;

WITH RECURSIVE t AS MATERIALIZED (SELECT 1 AS x UNION SELECT (SELECT x + 1 FROM t) AS x FROM t WHERE x < 5) SELECT * FROM t ORDER BY 1;

WITH RECURSIVE t AS MATERIALIZED (SELECT 1 AS x UNION SELECT (SELECT t.x + t2.x FROM t AS t2 LIMIT 1) AS x FROM t WHERE x < 10) SELECT * FROM t ORDER BY 1;

WITH RECURSIVE input(sud) AS MATERIALIZED (SELECT * FROM (VALUES ('53..7....6..195....98....6.8...6...34..8.3..17...2...6.6....28....419..5....8..79')) AS _values), digits(z, lp) AS MATERIALIZED (SELECT CAST(lp + 1 AS TEXT), CAST(lp AS INT) + 1 FROM GENERATE_SERIES(0, 8, 1) AS t(lp)), x(s, ind) AS MATERIALIZED (SELECT sud, STRPOS(sud, '.') FROM input UNION ALL SELECT SUBSTRING(s, 1, CAST(ind AS INT) - 1) || z || SUBSTRING(s, CAST(ind AS INT) + 1), STRPOS(SUBSTRING(s, 1, CAST(ind AS INT) - 1) || z || SUBSTRING(s, CAST(ind AS INT) + 1), '.') FROM x, digits AS z WHERE CAST(ind AS INT) > 0 AND NOT EXISTS(SELECT 1 FROM digits AS lp WHERE z.z = SUBSTRING(s, ((CAST(ind AS INT) - 1) // 9) * 9 + lp, 1) OR z.z = SUBSTRING(s, ((CAST(ind AS INT) - 1) % 9) + (lp - 1) * 9 + 1, 1) OR z.z = SUBSTRING(s, (((CAST(ind AS INT) - 1) // 3) % 3) * 3 + ((CAST(ind AS INT) - 1) // 27) * 27 + lp + ((lp - 1) // 3) * 6, 1))) SELECT s FROM x WHERE CAST(ind AS INT) = 0;

PRAGMA enable_verification;

CREATE TABLE tag (id INT, name TEXT, subclassof INT);

INSERT INTO tag VALUES (7, 'Music', 9), (8, 'Movies', 9), (9, 'Art', NULL);

WITH RECURSIVE tag_hierarchy(id, source, path, target) AS MATERIALIZED (SELECT id, name, name AS path, NULL AS target /* this should be '' for correct behaviour */ FROM tag WHERE subclassof IS NULL UNION ALL SELECT tag.id, tag.name, tag_hierarchy.path || ' <- ' || tag.name, tag.name AS target FROM tag, tag_hierarchy WHERE tag.subclassof = tag_hierarchy.id) SELECT source, path, target FROM tag_hierarchy;

PRAGMA enable_verification;

WITH RECURSIVE parents_tab(id, value, parent) AS MATERIALIZED (SELECT * FROM (VALUES (1, 1, 2), (2, 2, 4), (3, 1, 4), (4, 2, -1), (5, 1, 2), (6, 2, 7), (7, 1, -1)) AS _values), parents_tab2(id, value, parent) AS MATERIALIZED (SELECT * FROM (VALUES (1, 1, 2), (2, 2, 4), (3, 1, 4), (4, 2, -1), (5, 1, 2), (6, 2, 7), (7, 1, -1)) AS _values), parents AS MATERIALIZED (SELECT * FROM parents_tab UNION ALL SELECT id, value + 2, parent FROM parents_tab2) SELECT * FROM parents ORDER BY id, value, parent;

WITH RECURSIVE parents_tab(id, value, parent) AS MATERIALIZED (SELECT * FROM (VALUES (1, 1, 2), (2, 2, 4), (3, 1, 4), (4, 2, -1), (5, 1, 2), (6, 2, 7), (7, 1, -1)) AS _values), parents_tab2(id, value, parent) AS MATERIALIZED (SELECT * FROM (VALUES (1, 1, 2), (2, 2, 4), (3, 1, 4), (4, 2, -1), (5, 1, 2), (6, 2, 7), (7, 1, -1)) AS _values) SELECT * FROM parents_tab UNION ALL SELECT id, value + 2, parent FROM parents_tab2 ORDER BY id, value, parent;

WITH parents_tab(id, value, parent) AS MATERIALIZED (SELECT * FROM (VALUES (1, 1, 2), (2, 2, 4), (3, 1, 4), (4, 2, -1), (5, 1, 2), (6, 2, 7), (7, 1, -1)) AS _values), parents_tab2(id, value, parent) AS MATERIALIZED (SELECT * FROM (VALUES (1, 1, 2), (2, 2, 4), (3, 1, 4), (4, 2, -1), (5, 1, 2), (6, 2, 7), (7, 1, -1)) AS _values), parents AS MATERIALIZED (SELECT * FROM parents_tab UNION ALL SELECT id, value + 2, parent FROM parents_tab2) SELECT * FROM parents ORDER BY id, value, parent;

CREATE VIEW vparents AS WITH RECURSIVE parents_tab(id, value, parent) AS MATERIALIZED (SELECT * FROM (VALUES (1, 1, 2), (2, 2, 4), (3, 1, 4), (4, 2, -1), (5, 1, 2), (6, 2, 7), (7, 1, -1)) AS _values), parents_tab2(id, value, parent) AS MATERIALIZED (SELECT * FROM (VALUES (1, 1, 2), (2, 2, 4), (3, 1, 4), (4, 2, -1), (5, 1, 2), (6, 2, 7), (7, 1, -1)) AS _values) SELECT * FROM parents_tab UNION ALL SELECT id, value + 2, parent FROM parents_tab2;

SELECT * FROM vparents ORDER BY id, value, parent;

PRAGMA enable_verification;

WITH my_list(value) AS MATERIALIZED (SELECT * FROM (VALUES (1), (2), (3)) AS _values) SELECT * FROM my_list LIMIT 0 OFFSET 1;

PRAGMA enable_verification;

SELECT x, y FROM GENERATE_SERIES(1, 4) AS _(x), LATERAL (WITH RECURSIVE t(y) AS MATERIALIZED (SELECT _.x UNION ALL SELECT y + 1 FROM t WHERE y < 3) SELECT * FROM t) AS t ORDER BY x, y;

SELECT x, y FROM GENERATE_SERIES(1, 4) AS _(x), LATERAL (WITH RECURSIVE t(y) AS MATERIALIZED (SELECT 1 UNION ALL SELECT y + _.x FROM t WHERE y < 3) SELECT * FROM t) AS t ORDER BY x, y;

SELECT x, y FROM GENERATE_SERIES(1, 4) AS _(x), LATERAL (WITH RECURSIVE t(y) AS MATERIALIZED (SELECT _.x UNION ALL SELECT y + _.x FROM t WHERE y < 3) SELECT * FROM t) AS t ORDER BY x, y;

SELECT x, y FROM GENERATE_SERIES(1, 4) AS _(x), LATERAL (WITH RECURSIVE t(y) AS MATERIALIZED (SELECT _.x UNION ALL SELECT t1.y + t2.y + _.x FROM t AS t1, t AS t2 WHERE t1.y < 3) SELECT * FROM t) AS t ORDER BY x, y;

SELECT x, y, (WITH RECURSIVE t(z) AS MATERIALIZED (SELECT x + y UNION ALL SELECT z + 1 FROM t WHERE z < 3) SELECT SUM(z) FROM t) AS z FROM GENERATE_SERIES(1, 2) AS _(x), GENERATE_SERIES(1, 2) AS __(y) ORDER BY ALL;

SELECT x, y, (WITH RECURSIVE t(z) AS MATERIALIZED (SELECT x + y UNION ALL SELECT z + 1 FROM (WITH RECURSIVE g(a) AS MATERIALIZED (SELECT t.z FROM t UNION ALL SELECT g.a + (x + y) / 2 FROM g WHERE g.a < 3) SELECT * FROM g) AS t(z) WHERE z < 5) SELECT SUM(z) FROM t) AS z FROM GENERATE_SERIES(1, 2) AS _(x), GENERATE_SERIES(1, 2) AS __(y) ORDER BY ALL;

SELECT x, y FROM GENERATE_SERIES(1, 4) AS _(x), LATERAL (WITH RECURSIVE t(y) AS MATERIALIZED (SELECT _.x UNION SELECT y + 1 FROM t WHERE y < 3) SELECT * FROM t) AS t ORDER BY x, y;

SELECT x, y FROM GENERATE_SERIES(1, 4) AS _(x), LATERAL (WITH RECURSIVE t(y) AS MATERIALIZED (SELECT 1 UNION SELECT y + _.x FROM t WHERE y < 3) SELECT * FROM t) AS t ORDER BY x, y;

SELECT x, y FROM GENERATE_SERIES(1, 4) AS _(x), LATERAL (WITH RECURSIVE t(y) AS MATERIALIZED (SELECT _.x UNION SELECT y + _.x FROM t WHERE y < 3) SELECT * FROM t) AS t ORDER BY x, y;

SELECT x, y FROM GENERATE_SERIES(1, 4) AS _(x), LATERAL (WITH RECURSIVE t(y) AS MATERIALIZED (SELECT _.x UNION SELECT t1.y + t2.y + _.x FROM t AS t1, t AS t2 WHERE t1.y < 3) SELECT * FROM t) AS t ORDER BY x, y;

SELECT x, y, (WITH RECURSIVE t(z) AS MATERIALIZED (SELECT x + y UNION SELECT z + 1 FROM t WHERE z < 3) SELECT SUM(z) FROM t) AS z FROM GENERATE_SERIES(1, 2) AS _(x), GENERATE_SERIES(1, 2) AS __(y) ORDER BY ALL;

SELECT x, y, (WITH RECURSIVE t(z) AS MATERIALIZED (SELECT x + y UNION SELECT z + 1 FROM (WITH RECURSIVE g(a) AS MATERIALIZED (SELECT t.z FROM t UNION SELECT g.a + (x + y) / 2 FROM g WHERE g.a < 3) SELECT * FROM g) AS t(z) WHERE z < 5) SELECT SUM(z) FROM t) AS z FROM GENERATE_SERIES(1, 2) AS _(x), GENERATE_SERIES(1, 2) AS __(y) ORDER BY ALL;

PRAGMA enable_verification;

CREATE TABLE a (i INT);

INSERT INTO a VALUES (42);

WITH cte1 AS MATERIALIZED (SELECT i AS j FROM a) SELECT * FROM cte1;

WITH cte1 AS MATERIALIZED (WITH b AS MATERIALIZED (SELECT i AS j FROM a) SELECT j FROM b) SELECT x FROM cte1 AS t1(x);

WITH cte1(xxx) AS MATERIALIZED (WITH ncte(yyy) AS MATERIALIZED (SELECT i AS j FROM a) SELECT yyy FROM ncte) SELECT xxx FROM cte1;

WITH cte1 AS MATERIALIZED (WITH b AS MATERIALIZED (SELECT i AS j FROM a) SELECT j FROM b), cte2 AS MATERIALIZED (WITH c AS MATERIALIZED (SELECT ref.j + 1 AS k FROM cte1 AS ref) SELECT k FROM c) SELECT * FROM cte1, cte2;

WITH cte1 AS MATERIALIZED (SELECT 42), cte1 AS MATERIALIZED (SELECT 42) SELECT * FROM cte1;

WITH cte1 AS MATERIALIZED (SELECT i AS j FROM a) SELECT * FROM (WITH cte2 AS MATERIALIZED (SELECT MAX(j) AS j FROM cte1) SELECT * FROM cte2) AS f;

WITH cte1 AS MATERIALIZED (SELECT i AS j FROM a) SELECT * FROM cte1 WHERE j = (WITH cte2 AS MATERIALIZED (SELECT MAX(j) AS j FROM cte1) SELECT j FROM cte2);

WITH cte AS MATERIALIZED (SELECT i AS j FROM a) SELECT * FROM cte WHERE j = (WITH cte AS (SELECT MAX(j) AS j FROM cte) SELECT j FROM cte);

WITH cte AS MATERIALIZED (SELECT i AS j FROM a) SELECT * FROM cte WHERE j = (WITH cte AS MATERIALIZED (SELECT MAX(j) AS j FROM cte) SELECT j FROM cte);

WITH cte AS MATERIALIZED (SELECT * FROM cte) SELECT * FROM cte;

PRAGMA enable_verification;

CREATE TABLE a (i INT);

INSERT INTO a VALUES (42);

WITH cte1 AS MATERIALIZED (SELECT i AS j FROM a) SELECT * FROM cte1;

WITH cte1 AS MATERIALIZED (SELECT i AS j FROM a) SELECT x FROM cte1 AS t1(x);

WITH cte1(xxx) AS MATERIALIZED (SELECT i AS j FROM a) SELECT xxx FROM cte1;

WITH cte1(xxx) AS MATERIALIZED (SELECT i AS j FROM a) SELECT x FROM cte1 AS t1(x);

WITH cte1 AS MATERIALIZED (SELECT i AS j FROM a), cte2 AS MATERIALIZED (SELECT ref.j AS k FROM cte1 AS ref), cte3 AS MATERIALIZED (SELECT ref2.j + 1 AS i FROM cte1 AS ref2) SELECT * FROM cte2, cte3;

WITH cte1 AS MATERIALIZED (SELECT i AS j FROM a), cte2 AS MATERIALIZED (SELECT ref.j AS k FROM cte1 AS ref), cte3 AS MATERIALIZED (SELECT ref2.j + 1 AS i FROM cte1 AS ref2) SELECT * FROM cte2 UNION ALL SELECT * FROM cte3;

WITH cte1 AS MATERIALIZED (SELECT 42), cte1 AS MATERIALIZED (SELECT 42) SELECT * FROM cte1;

WITH cte3 AS MATERIALIZED (SELECT ref2.j AS i FROM cte1 AS ref2), cte1 AS MATERIALIZED (SELECT i AS j FROM a), cte2 AS MATERIALIZED (SELECT ref.j + 1 AS k FROM cte1 AS ref) SELECT * FROM cte2 UNION ALL SELECT * FROM cte3;

WITH cte1 AS MATERIALIZED (SELECT i AS j FROM a) SELECT * FROM cte1 AS cte11, cte1 AS cte12;

WITH cte1 AS MATERIALIZED (SELECT i AS j FROM a) SELECT * FROM cte1 WHERE j = (SELECT MAX(j) FROM cte1 AS cte2);

WITH cte1(x, y) AS MATERIALIZED (SELECT 42 AS a, 84 AS b) SELECT zzz, y FROM cte1 AS t1(zzz);

CREATE VIEW va AS (WITH cte AS MATERIALIZED (SELECT i AS j FROM a) SELECT * FROM cte);

SELECT * FROM va;

WITH cte AS MATERIALIZED (SELECT * FROM va) SELECT * FROM cte;

CREATE VIEW vb AS (WITH cte1 AS MATERIALIZED (SELECT i AS j FROM a), cte2 AS MATERIALIZED (SELECT ref.j + 1 AS k FROM cte1 AS ref) SELECT * FROM cte2);

SELECT * FROM vb;

SELECT 1 UNION ALL (WITH cte AS MATERIALIZED (SELECT 42) SELECT * FROM cte);

WITH RECURSIVE cte(d) AS MATERIALIZED (SELECT 1 UNION ALL (WITH c(d) AS (SELECT * FROM cte) SELECT d + 1 FROM c WHERE FALSE)) SELECT MAX(d) FROM cte;

WITH cte(a) AS MATERIALIZED (SELECT 1) SELECT a AS alias1, alias1 AS alias2 FROM cte WHERE alias2 > 0;

WITH RECURSIVE t(x, v) AS (SELECT 1, CAST([] AS INT[]) UNION ALL (WITH u(x) AS MATERIALIZED (SELECT 1) SELECT f.x, (SELECT ARRAY_AGG(x) FROM u) FROM t, LATERAL (SELECT t.x + 1) AS f(x) WHERE t.x < 5)) SELECT * FROM t ORDER BY x;

WITH RECURSIVE t(x, v) AS (SELECT 1, CAST([] AS INT[]) UNION ALL (WITH u(x) AS MATERIALIZED (SELECT 1) SELECT f.x, (SELECT ARRAY_AGG(x) FROM u) FROM t, LATERAL (SELECT t.x + 1) AS f(x) WHERE t.x < 5)) SELECT * FROM t ORDER BY x;

CREATE TABLE a (id INT);

INSERT INTO a VALUES (1729);

CREATE VIEW va AS (WITH v AS MATERIALIZED (SELECT * FROM a) SELECT * FROM v);

WITH a AS MATERIALIZED (SELECT * FROM va) SELECT * FROM a;

PRAGMA enable_verification;

CREATE TABLE T0 (C1 INT);

CREATE TABLE T1 (C1 INT);

INSERT INTO T0 (C1) VALUES (1);

INSERT INTO T1 (C1) VALUES (1);

WITH CTE AS MATERIALIZED (SELECT A1, * FROM T0 LEFT JOIN (SELECT C1 AS A1 FROM T1) ON T0.C1 = A1) SELECT A1 FROM CTE;

PRAGMA enable_verification;

WITH t(x) AS MATERIALIZED (SELECT 1) SELECT * FROM t;

WITH t(x) AS MATERIALIZED (SELECT t FROM GENERATE_SERIES(1, 3) AS _(t)) SELECT t1.x, 1 AS y FROM t AS t1 ORDER BY x;

WITH t(x) AS MATERIALIZED (SELECT t FROM GENERATE_SERIES(1, 3) AS _(t)) SELECT t1.x, t1.x FROM t AS t1 ORDER BY x;

WITH t(x) AS MATERIALIZED (SELECT t FROM GENERATE_SERIES(1, 3) AS _(t)) SELECT t1.x, t2.x FROM t AS t1, t AS t2 ORDER BY t1.x, t2.x;

WITH t(x) AS MATERIALIZED (SELECT 1), u(x) AS MATERIALIZED (SELECT 2) SELECT * FROM u FULL OUTER JOIN t ON TRUE;

WITH t(x) AS MATERIALIZED (SELECT x FROM GENERATE_SERIES(1, 10) AS _(x) LIMIT 4) SELECT DISTINCT x FROM t ORDER BY x DESC;

WITH t(x) AS MATERIALIZED (SELECT x FROM GENERATE_SERIES(1, 10) AS _(x) LIMIT 4) SELECT DISTINCT x FROM t ORDER BY x DESC LIMIT 2;

WITH t(x) AS MATERIALIZED (WITH u(x) AS MATERIALIZED (SELECT 42) SELECT * FROM u) SELECT * FROM t;

WITH t(x) AS MATERIALIZED (WITH u(x) AS MATERIALIZED (SELECT 42) SELECT * FROM u) SELECT * FROM t;

WITH t0(x) AS MATERIALIZED (SELECT x FROM t1), t1(x) AS MATERIALIZED (SELECT 1) SELECT * FROM t0;

PRAGMA enable_verification;

WITH RECURSIVE t(x) AS MATERIALIZED (SELECT 1 UNION ALL SELECT x + 1 FROM t WHERE x < 4), u(x) AS MATERIALIZED (SELECT * FROM t UNION ALL SELECT u.x * 2 + t.x FROM u, t WHERE u.x < 32) SELECT * FROM u ORDER BY x LIMIT 5;

WITH RECURSIVE collatz(x, t, steps) AS MATERIALIZED (SELECT x, x, 0 FROM (WITH RECURSIVE n(t) AS (SELECT 1 UNION ALL SELECT t + 1 FROM n WHERE t < 10) SELECT * FROM n) AS _(x) UNION ALL (SELECT x, CASE WHEN t % 2 = 1 THEN t * 3 + p ELSE t / 2 END, steps + p FROM collatz, (WITH RECURSIVE n(t) AS (SELECT 1 UNION ALL SELECT t + 1 FROM n WHERE t < 1) SELECT * FROM n) AS _(p) WHERE t <> 1)) SELECT * FROM collatz WHERE t = 1 ORDER BY x;

PRAGMA enable_verification;

CREATE TABLE v (x INT);

INSERT INTO v VALUES (1), (2), (3);

WITH RECURSIVE t(x) AS MATERIALIZED (SELECT 1 UNION ALL SELECT x + 1 FROM (SELECT t.x + 1 FROM v AS _(p) FULL OUTER JOIN t ON t.x = p) AS _(x) WHERE x < 10) SELECT * FROM v AS _(p) RIGHT OUTER JOIN t ON t.x = p ORDER BY p, x;

PRAGMA enable_verification;

CREATE TABLE emp (empno INT PRIMARY KEY, ename TEXT, job TEXT, mgr INT, hiredate DATE, sal DOUBLE, comm DOUBLE, deptno INT);

INSERT INTO emp VALUES (7839, 'KING', 'PRESIDENT', NULL, CAST('1981-11-17' AS DATE), 5000.00, NULL, 10);
INSERT INTO emp VALUES (7698, 'BLAKE', 'MANAGER', 7839, CAST('1981-05-01' AS DATE), 2850.00, NULL, 30);
INSERT INTO emp VALUES (7782, 'CLARK', 'MANAGER', 7839, CAST('1981-06-09' AS DATE), 2450.00, NULL, 10);
INSERT INTO emp VALUES (7566, 'JONES', 'MANAGER', 7839, CAST('1981-04-02' AS DATE), 2975.00, NULL, 20);
INSERT INTO emp VALUES (7902, 'FORD', 'ANALYST', 7566, CAST('1981-12-03' AS DATE), 3000.00, NULL, 20);
INSERT INTO emp VALUES (7369, 'SMITH', 'CLERK', 7902, CAST('1980-12-17' AS DATE), 800.00, NULL, 20);
INSERT INTO emp VALUES (7499, 'ALLEN', 'SALESMAN', 7698, CAST('1981-02-20' AS DATE), 1600.00, 300.00, 30);
INSERT INTO emp VALUES (7521, 'WARD', 'SALESMAN', 7698, CAST('1981-02-22' AS DATE), 1250.00, 500.00, 30);
INSERT INTO emp VALUES (7654, 'MARTIN', 'SALESMAN', 7698, CAST('1981-09-28' AS DATE), 1250.00, 1400.00, 30);
INSERT INTO emp VALUES (7844, 'TURNER', 'SALESMAN', 7698, CAST('1981-09-08' AS DATE), 1500.00, 0.00, 30);
INSERT INTO emp VALUES (7900, 'JAMES', 'CLERK', 7698, CAST('1981-12-03' AS DATE), 950.00, NULL, 30);
INSERT INTO emp VALUES (7934, 'MILLER', 'CLERK', 7782, CAST('1982-01-23' AS DATE), 1300.00, NULL, 10);

WITH RECURSIVE ctename AS MATERIALIZED (SELECT empno, ename FROM emp WHERE empno = 7566 UNION ALL SELECT emp.empno, emp.ename FROM emp JOIN ctename ON emp.mgr = ctename.empno) SELECT * FROM ctename;

WITH RECURSIVE ctename AS MATERIALIZED (SELECT empno, ename, 0 AS level FROM emp WHERE empno = 7566 UNION ALL SELECT emp.empno, emp.ename, ctename.level + 1 FROM emp JOIN ctename ON emp.mgr = ctename.empno) SELECT * FROM ctename;

WITH RECURSIVE ctename AS MATERIALIZED (SELECT empno, ename, ename AS path FROM emp WHERE empno = 7566 UNION ALL SELECT emp.empno, emp.ename, ctename.path || ' -> ' || emp.ename FROM emp JOIN ctename ON emp.mgr = ctename.empno) SELECT * FROM ctename;

CREATE VIEW ctenames AS (WITH RECURSIVE ctename AS MATERIALIZED (SELECT empno, ename, ename AS path FROM emp WHERE empno = 7566 UNION ALL SELECT emp.empno, emp.ename, ctename.path || ' -> ' || emp.ename FROM emp JOIN ctename ON emp.mgr = ctename.empno) SELECT * FROM ctename);

SELECT * FROM ctenames;

WITH RECURSIVE fib AS MATERIALIZED (SELECT 1 AS n, CAST(1 AS BIGINT) AS "fibₙ", CAST(1 AS BIGINT) AS "fibₙ₊₁" UNION ALL SELECT n + 1, "fibₙ₊₁", "fibₙ" + "fibₙ₊₁" FROM fib WHERE n <= 20) SELECT n, "fibₙ" FROM fib LIMIT 20;

PRAGMA enable_verification;

WITH RECURSIVE t AS MATERIALIZED (SELECT 1 AS x UNION ALL SELECT x + 1 FROM t WHERE x < 3) SELECT * FROM t;

WITH RECURSIVE t AS MATERIALIZED (SELECT 1 AS x UNION ALL SELECT x + 1 FROM t AS m WHERE m.x < 3) SELECT * FROM t;

WITH RECURSIVE t AS MATERIALIZED (SELECT 1 AS x UNION ALL SELECT m.x + f.x FROM t AS m, t AS f WHERE m.x < 3) SELECT * FROM t;

WITH RECURSIVE t AS MATERIALIZED (SELECT 1 AS x, 'hello' AS y UNION ALL SELECT x + 1, y || '-' || 'hello' FROM t WHERE x < 3) SELECT * FROM t;

WITH RECURSIVE t AS MATERIALIZED (SELECT 1 AS x UNION ALL SELECT x + 1 FROM t WHERE x < 3) SELECT MIN(a1.x) FROM t AS a1, t AS a2;

WITH RECURSIVE t AS MATERIALIZED (SELECT 1 AS x UNION ALL SELECT x + (SELECT 1) FROM t WHERE x < 3) SELECT * FROM t;

CREATE TABLE integers AS WITH RECURSIVE t AS MATERIALIZED (SELECT 1 AS x UNION ALL SELECT x + 1 FROM t WHERE x < 3) SELECT * FROM t;

WITH RECURSIVE t AS MATERIALIZED (SELECT (SELECT MIN(x) FROM integers) AS x UNION ALL SELECT x + 1 FROM t WHERE x < 3) SELECT * FROM t;

WITH RECURSIVE t AS MATERIALIZED (SELECT 1 AS x UNION ALL SELECT SUM(x + 1) AS x FROM t WHERE x < 3 GROUP BY x) SELECT * FROM t;

WITH RECURSIVE t AS MATERIALIZED (SELECT 1 AS i UNION ALL SELECT j FROM t, GENERATE_SERIES(0, 10, 1) AS series(j) WHERE j = i + 1) SELECT * FROM t;

WITH RECURSIVE t AS MATERIALIZED (SELECT 1 AS x UNION ALL SELECT x + 1 FROM t WHERE x < 3 ORDER BY x) SELECT * FROM t;

WITH RECURSIVE t AS MATERIALIZED (SELECT 1 AS x UNION ALL SELECT x + 1 FROM t WHERE x < 3 LIMIT 1) SELECT * FROM t;

WITH RECURSIVE t AS MATERIALIZED (SELECT 1 AS x UNION ALL SELECT x + 1 FROM t WHERE x < 3 OFFSET 1) SELECT * FROM t;

WITH RECURSIVE t AS MATERIALIZED (SELECT 1 AS x UNION ALL SELECT x + 1 FROM t WHERE x < 3 LIMIT 1 OFFSET 1) SELECT * FROM t;

PRAGMA enable_verification;

WITH RECURSIVE t AS MATERIALIZED (SELECT 1 AS x UNION SELECT x + 1 FROM t WHERE x < 3) SELECT * FROM t ORDER BY x;

WITH RECURSIVE t(x) AS MATERIALIZED (SELECT 1 UNION SELECT x + 1 FROM t WHERE x < 3) SELECT * FROM t ORDER BY x;

WITH RECURSIVE t(x) AS MATERIALIZED (SELECT 1 UNION SELECT x + 1 FROM t WHERE x < 3) SELECT zz FROM t AS t1(zz) ORDER BY zz;

WITH RECURSIVE t(x) AS MATERIALIZED (SELECT 1 UNION SELECT zzz + 1 FROM t AS t1(zzz) WHERE zzz < 3) SELECT zz FROM t AS t1(zz) ORDER BY zz;

WITH RECURSIVE t AS MATERIALIZED (SELECT 1 AS x UNION SELECT x FROM t) SELECT * FROM t;

WITH RECURSIVE t AS MATERIALIZED (SELECT 1 AS x UNION SELECT x + 1 FROM t AS m WHERE m.x < 3) SELECT * FROM t ORDER BY x;

WITH RECURSIVE t AS MATERIALIZED (SELECT 1 AS x UNION SELECT m.x + f.x FROM t AS m, t AS f WHERE m.x < 3) SELECT * FROM t ORDER BY x;

WITH RECURSIVE t AS MATERIALIZED (SELECT 1 AS x, 'hello' AS y UNION SELECT x + 1, y || '-' || 'hello' FROM t WHERE x < 3) SELECT * FROM t ORDER BY x;

WITH RECURSIVE t AS MATERIALIZED (SELECT 1 AS x UNION SELECT x + 1 FROM t WHERE x < 3) SELECT MIN(a1.x) FROM t AS a1, t AS a2;

WITH RECURSIVE t AS MATERIALIZED (SELECT 1 AS x UNION SELECT x + (SELECT 1) FROM t WHERE x < 3) SELECT * FROM t ORDER BY x;

WITH RECURSIVE t AS MATERIALIZED (SELECT 1 AS x UNION SELECT x + (SELECT 1 + t.x) FROM t WHERE x < 5) SELECT * FROM t ORDER BY x;

CREATE TABLE integers AS WITH RECURSIVE t AS MATERIALIZED (SELECT 1 AS x UNION SELECT x + 1 FROM t WHERE x < 3) SELECT * FROM t;

WITH RECURSIVE t AS MATERIALIZED (SELECT (SELECT MIN(x) FROM integers) AS x UNION SELECT x + 1 FROM t WHERE x < 3) SELECT * FROM t ORDER BY x;

WITH RECURSIVE t AS MATERIALIZED (SELECT 1 AS x UNION SELECT SUM(x + 1) FROM t WHERE x < 3) SELECT * FROM t ORDER BY 1;

WITH RECURSIVE t AS MATERIALIZED (SELECT 1 AS x UNION SELECT SUM(x + 1) FROM t WHERE x < 3 ORDER BY x) SELECT * FROM t;

WITH RECURSIVE t AS MATERIALIZED (SELECT 1 AS x UNION SELECT SUM(x + 1) FROM t WHERE x < 3 LIMIT 1) SELECT * FROM t;

WITH RECURSIVE t AS MATERIALIZED (SELECT 1 AS x UNION SELECT SUM(x + 1) FROM t WHERE x < 3 OFFSET 1) SELECT * FROM t;

WITH RECURSIVE t AS MATERIALIZED (SELECT 1 AS x UNION SELECT SUM(x + 1) FROM t WHERE x < 3 LIMIT 1 OFFSET 1) SELECT * FROM t;

CREATE VIEW vr AS (WITH RECURSIVE t(x) AS MATERIALIZED (SELECT 1 UNION SELECT x + 1 FROM t WHERE x < 3) SELECT * FROM t ORDER BY x);

SELECT * FROM vr;

CREATE TABLE tbl (i INT);

INSERT INTO tbl SELECT * FROM RANGE(0, 1000) AS t(i);

SET immediate_transaction_mode = TRUE;

BEGIN;

BEGIN;

DELETE FROM tbl WHERE i BETWEEN 200 AND 300;

DELETE FROM tbl WHERE i <= 500;

COMMIT;

ROLLBACK;

DELETE FROM tbl WHERE i <= 500;

PRAGMA enable_verification;

CREATE TABLE a AS SELECT * FROM RANGE(0, 1000000) AS t1(i);

BEGIN;

SELECT COUNT(*) FROM a;

DELETE FROM a WHERE i % 2 = 0;

SELECT COUNT(*) FROM a;

SELECT COUNT(*) FROM a;

COMMIT;

SELECT COUNT(*) FROM a;

PRAGMA enable_verification;

CREATE TABLE aggr (k INT[]);

INSERT INTO aggr VALUES ([0, 1, 1, 1, 4, 0, 3, 3, 2, 2, 4, 4, 2, 4, 0, 0, 0, 1, 2, 3, 4, 2, 3, 3, 1]);

INSERT INTO aggr VALUES ([]), ([NULL]), (NULL), ([0, 1, 1, 1, 4, NULL, 0, 3, 3, 2, NULL, 2, 4, 4, 2, 4, 0, 0, 0, 1, NULL, 2, 3, 4, 2, 3, 3, 1]);

SELECT COUNT(k) FROM aggr;

DELETE FROM aggr;

SELECT COUNT(k) FROM aggr;

PRAGMA enable_verification;

CREATE TABLE a (i INT);

INSERT INTO a VALUES (42);

SELECT COUNT(*) FROM a;

DELETE FROM a;

SELECT COUNT(*) FROM a;

INSERT INTO a VALUES (42);

SELECT COUNT(*) FROM a;

BEGIN;

DELETE FROM a;

SELECT COUNT(*) FROM a;

ROLLBACK;

SELECT COUNT(*) FROM a;

PRAGMA enable_verification;

CREATE TABLE t (id INT PRIMARY KEY, s TEXT, j BIGINT);

CREATE INDEX idx ON t(j);

INSERT INTO t VALUES (1, 'a', 10), (2, 'b', 20), (3, 'c', 30);

SELECT * FROM t ORDER BY id;

DELETE FROM t WHERE id = 2;

SELECT * FROM t ORDER BY id;

DELETE FROM t WHERE j = 30;

SELECT * FROM t ORDER BY id;

INSERT INTO t VALUES (4, 'd', 40), (5, 'e', 50);

BEGIN;

DELETE FROM t WHERE j > 10;

SELECT * FROM t ORDER BY id;

ROLLBACK;

SELECT * FROM t ORDER BY id;

DELETE FROM t;

SELECT COUNT(*) FROM t;

INSERT INTO t VALUES (1, 'a', 10), (2, 'b', 20), (3, 'c', 30);

BEGIN;

DELETE FROM t WHERE j >= 20;

INSERT INTO t VALUES (2, 'new_20', 20), (3, 'new_30', 30);

SELECT * FROM t WHERE j = 20;

SELECT * FROM t WHERE j = 30;

COMMIT;

SELECT * FROM t WHERE j = 20;

SELECT * FROM t WHERE j = 30;

BEGIN;

DELETE FROM t WHERE j >= 20;

INSERT INTO t VALUES (2, 'tmp_20', 20), (3, 'tmp_30', 30);

SELECT * FROM t WHERE j = 20;

SELECT * FROM t WHERE j = 30;

ROLLBACK;

SELECT * FROM t WHERE j = 20;

SELECT * FROM t WHERE j = 30;

SELECT * FROM t WHERE j >= 20 ORDER BY j;

CREATE TABLE Person_likes_Comment (creationDate TIMESTAMP NOT NULL, id BIGINT NOT NULL, likes_Comment BIGINT NOT NULL);

CREATE TABLE Person_Delete_candidates (deletionDate TIMESTAMP NOT NULL, id BIGINT);

COPY Person_likes_Comment FROM 'https://github.com/duckdb/duckdb-data/releases/download/v1.0/Person_likes_Comment.csv' WITH (DELIMITER '|', TIMESTAMPFORMAT '%Y-%m-%dT%H:%M:%S.%g+00:00');

COPY Person_Delete_candidates FROM 'https://github.com/duckdb/duckdb-data/releases/download/v1.0/Person_Delete_candidates.csv' WITH (DELIMITER '|', HEADER, TIMESTAMPFORMAT '%Y-%m-%dT%H:%M:%S.%g+00:00');

DELETE FROM Person_likes_Comment USING Person_Delete_candidates WHERE Person_Delete_candidates.id = Person_likes_Comment.id;

SELECT COUNT(*) FROM Person_likes_Comment, Person_Delete_candidates WHERE Person_Delete_candidates.id = Person_likes_Comment.id;

PRAGMA enable_verification;

CREATE TABLE a AS SELECT * FROM RANGE(0, 10000, 1) AS t1(i);

SELECT COUNT(*) FROM a WHERE i >= 2000 AND i < 5000;

DELETE FROM a WHERE i >= 2000 AND i < 5000;

SELECT COUNT(*) FROM a;

PRAGMA threads = 2;

PRAGMA verify_parallelism;

CREATE TABLE a AS SELECT * FROM RANGE(0, 10000, 1) AS t1(i);

SELECT COUNT(*) FROM a;

DELETE FROM a WHERE i >= 2000 AND i < 5000;

SELECT COUNT(*) FROM a;

PRAGMA enable_verification;

CREATE TABLE a (i INT);

INSERT INTO a VALUES (42);

TRUNCATE TABLE a;

TRUNCATE TABLE a;

SELECT COUNT(*) FROM a;

INSERT INTO a VALUES (42);

SELECT COUNT(*) FROM a;

BEGIN;

TRUNCATE TABLE a;

SELECT COUNT(*) FROM a;

ROLLBACK;

SELECT COUNT(*) FROM a;

PRAGMA enable_verification;

CREATE TABLE a (i INT);

INSERT INTO a VALUES (1), (2), (3);

DELETE FROM a USING (VALUES (1)) AS tbl(i) WHERE a.i = tbl.i;

SELECT * FROM a;

DELETE FROM a USING (VALUES (1)) AS tbl(i);

SELECT * FROM a;

INSERT INTO a VALUES (1), (2), (3);

SELECT * FROM a;

SELECT * FROM a;

SELECT * FROM a;

DELETE FROM a USING (VALUES (4)) AS tbl(i) WHERE a.i = tbl.i;

SELECT * FROM a;

DELETE FROM a USING a AS a2(i) WHERE a.i > a2.i;

SELECT * FROM a;

DELETE FROM a USING b WHERE a.i = b.i;

DELETE FROM a USING a AS b WHERE a.i = b.j;

CREATE TABLE integers AS SELECT * FROM GENERATE_SERIES(0, 9, 1);

CREATE TABLE integers2 AS SELECT * FROM GENERATE_SERIES(0, 9, 1);

DELETE FROM integers USING integers2;

SELECT COUNT(*) FROM integers;

DROP TABLE integers;

DROP TABLE integers2;

BEGIN;

CREATE TABLE integers AS SELECT * FROM GENERATE_SERIES(0, 9, 1);

CREATE TABLE integers2 AS SELECT * FROM GENERATE_SERIES(0, 9, 1);

DELETE FROM integers USING integers2;

SELECT COUNT(*) FROM integers;

COMMIT;

SELECT COUNT(*) FROM integers;

PRAGMA enable_profiling;

PRAGMA profiling_output = '__TEST_DIR__/test.json';

PRAGMA profiling_mode = detailed;

PRAGMA threads = 4;

PRAGMA verify_parallelism;

PRAGMA verify_parallelism;

PRAGMA verify_parallelism;

PRAGMA verify_parallelism;

PRAGMA enable_profiling;

PRAGMA profiling_output = '__TEST_DIR__/test.json';

PRAGMA profiling_mode = detailed;

PRAGMA profiling_mode = detailed;

PRAGMA profiling_mode = detailed;

PRAGMA profiling_mode = detailed;

PRAGMA enable_profiling;

PRAGMA profiling_output = '__TEST_DIR__/test.json';

PRAGMA profiling_mode = detailed;

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (3);

SELECT MIN(i + i) FROM integers;

CREATE TABLE exprtest (a INT, b INT);

INSERT INTO exprtest VALUES (42, 10), (43, 100), (NULL, 1), (45, -1);

SELECT MIN(a + a) FROM exprtest;

SELECT a FROM exprtest WHERE a BETWEEN 43 AND 44;

SELECT CASE a WHEN 42 THEN 100 WHEN 43 THEN 200 ELSE 300 END FROM exprtest;

PRAGMA profiling_output = '__TEST_DIR__/test_2.json';

SELECT COUNT(*) > 0 FROM READ_CSV('__TEST_DIR__/test.json', columns = {'c': 'VARCHAR'}, delim = NULL, header = 0, quote = NULL, escape = NULL, auto_detect = FALSE) WHERE CONTAINS(c, 'Optimizer');

CREATE TABLE lists_tbl AS SELECT i % 20 AS groups, i AS l FROM RANGE(0, 1000) AS tmp(i);

SELECT COUNT(DISTINCT l) FROM lists_tbl GROUP BY groups ORDER BY l LIMIT 10;

SELECT DISTINCT ON (l) COUNT(DISTINCT l) FROM lists_tbl GROUP BY groups;

create macro checksum(x) as table SELECT bit_xor(md5_number(CAST(COLUMNS(*) AS VARCHAR))) FROM query_table(table_name);

SET errors_as_json = TRUE;

SELECT * FROM CHECKSUM('tbl');

CREATE VIEW list_int AS SELECT CASE WHEN i % 2 <> 0 THEN [1] ELSE NULL END FROM RANGE(0, 10000) AS tbl(i);

SELECT COUNT(*) FROM list_int WHERE l IS DISTINCT FROM NULL;

SELECT DBGEN();

SELECT DBGEN();

SELECT * FROM DBGEN();

CALL dbgen(sf=0.1);

SELECT * FROM dbgen;

SET TimeZone = 'UTC';

SELECT * FROM TimeZone;

SELECT DBGEN();

CALL dbge();

SET TimeZon = 'UTC';

CREATE TABLE lineitem (l_orderkey BIGINT NOT NULL, l_partkey BIGINT NOT NULL, l_suppkey BIGINT NOT NULL, l_linenumber BIGINT NOT NULL, l_quantity DECIMAL(15, 2) NOT NULL, l_extendedprice DECIMAL(15, 2) NOT NULL, l_discount DECIMAL(15, 2) NOT NULL, l_tax DECIMAL(15, 2) NOT NULL, l_returnflag TEXT NOT NULL, l_linestatus TEXT NOT NULL, l_shipdate DATE NOT NULL, l_commitdate DATE NOT NULL, l_receiptdate DATE NOT NULL, l_shipinstruct TEXT NOT NULL, l_shipmode TEXT NOT NULL, l_comment TEXT NOT NULL);

SELECT * FROM lineitem WHERE l_extendedpric = 5;

SELECT * FROM lineitem, lineitem AS l2 WHERE l_extendedpric = 5;

SELECT * FROM lineitem WHERE lineitem.l_extendedpric = 5;

SELECT l_returnflag, l_linestatus, SUM(l_quantity) AS sum_qty, SUM(l_extendedprice) AS sum_base_price, SUM(l_extendedprice * (1 - l_discount)) AS sum_disc_price, SUM(l_extendedprice * (1 - l_discount) * (1 + l_tax)) AS sum_charge, AVG(l_quantity) AS avg_qty, AVG(l_extendedprice) AS avg_price, AVG(l_discount) AS avg_disc, COUNT(*) AS count_order FROM lineitem WHERE l_shipdate <= CAST('1998-09-02' AS DATE) + CAST('2020-01-01' AS TIMESTAMP) GROUP BY l_returnflag, l_linestatus ORDER BY l_returnflag, l_linestatus;

SELECT l_returnflag, l_linestatus, SUM(l_quantity) AS sum_qty, SUM(l_extendedprice) AS sum_base_price, SUM(l_extendedprice * (1 - l_discount)) AS sum_disc_price, SUM(l_extendedprice * (1 - l_discount) * (1 + l_tax)) AS sum_charge, AVG(l_quantity) AS avg_qty, AVG(l_extendedprice) AS avg_price, AVG(l_discount) AS avg_disc, COUNT(*) AS count_order FROM lineitem WHERE l_shipdate <= CAST('1998-09-02' AS DATE) + CAST('2020-01-01' /* this has a really long comment that ends up requiring truncation in the error message */ AS TIMESTAMP) GROUP BY l_returnflag, l_linestatus ORDER BY l_returnflag, l_linestatus;

SELECT l_returnflag, l_linestatus, SUM(l_quantity) AS sum_qty, SUM(l_extendedprice) AS sum_base_price, SUM(l_extendedprice * (1 - l_discount)) AS sum_disc_price, SUM(l_extendedprice * (1 - l_discount) * (1 + l_tax)) AS sum_charge, AVG(l_quantity) AS avg_qty, AVG(l_extendedprice) AS avg_price, AVG(l_discount) AS avg_disc, COUNT(*) AS count_order FROM lineitem WHERE l_shipdate <= CAST('1998-09-02' AS DATE) + CAST('2020-01-01' AS TIMESTAMP) GROUP BY l_returnflag, l_linestatus ORDER BY l_returnflag, l_linestatus;

SELECT CAST('' AS blobb);

CREATE TABLE tbl (name TEXT, style TEXT, brewery_id INT, abv DOUBLE, ibu INT);

SELECT FIRST(name), FIRST(abv) FROM tbl GROUP BY style ORDER BY abv DESC;

SELECT FIRST(name) || abv FROM tbl;

SELECT (SELECT 42, 84);

SELECT READ_CSV('test.csv');

PRAGMA enable_verification;

SELECT CAST('abc' AS INT);

SELECT ~CAST('abc' AS INT);

SELECT ~CAST('abc' AS INT);

SELECT CAST('abc' AS INT) IS NULL;

SELECT NOT CAST('abc' AS INT) IS NULL;

SELECT CAST('abc' AS INT) = 'abc';

SELECT CAST('abc' AS INT) = 'abc';

SELECT CAST('abc' AS INT) <> 'abc';

SELECT LN(0);

WITH cte AS (SELECT * FROM (VALUES ('123'), ('test'), ('235')) AS t(a)) SELECT CAST(a AS INT) FROM cte;

WITH cte AS (SELECT * FROM (VALUES ('123'), ('test'), ('235')) AS t(a)) SELECT CAST(a AS INT) FROM cte;

WITH cte AS (SELECT * FROM (VALUES ('123'), ('test'), ('235')) AS t(a)) SELECT CAST(a AS INT) FROM cte;

SELECT CAST(CASE WHEN RANDOM() > 2.0 THEN '123' ELSE 'abc' END AS TINYINT);

SELECT CAST((SELECT 'ABC') AS INT);

SELECT SUBSTRING('hello', 3, 2) OVER ();

PRAGMA enable_verification;

EXPLAIN PRAGMA enable_verification;

EXPLAIN CREATE TABLE integers(i INTEGER);

EXPLAIN SELECT * FROM integers;

EXPLAIN INSERT INTO integers VALUES (1);

CREATE TABLE integers (i INT);

EXPLAIN SELECT * FROM integers;

EXPLAIN INSERT INTO integers VALUES (1);

INSERT INTO integers VALUES (1);

EXPLAIN DELETE FROM integers WHERE i=1;

EXPLAIN UPDATE integers SET i=i+1;

EXPLAIN CREATE INDEX i_index ON integers(i);

EXPLAIN ALTER TABLE integers RENAME TO integers2;

EXPLAIN ALTER TABLE integers ADD COLUMN j INTEGER;

EXPLAIN ALTER TABLE integers RENAME i TO k;

SELECT * FROM integers;

EXPLAIN PREPARE v1 AS SELECT * FROM integers WHERE i=?;

PREPARE v1 AS SELECT * FROM integers WHERE i=?;

EXPLAIN EXECUTE v1(1);

EXPLAIN DEALLOCATE v1;

EXECUTE v1(1);

EXPLAIN VACUUM;

EXPLAIN CREATE SEQUENCE seq;

EXPLAIN CREATE VIEW v1 AS SELECT * FROM integers;

EXPLAIN DROP TABLE integers;

EXPLAIN CHECKPOINT;

EXPLAIN BEGIN TRANSACTION;

EXPLAIN SET memory_limit='1GB';

EXPLAIN CREATE MACRO f(x) AS x+1;

SELECT F(1);

CREATE MACRO f(x) AS x+1;

SELECT F(1);

PRAGMA enable_verification;

CREATE TABLE integers (i INT, j INT);

INSERT INTO integers VALUES (1, 1), (2, 2), (3, 3), (NULL, NULL);

PREPARE query AS SELECT * FROM integers;

EXPLAIN EXECUTE query;

PRAGMA enable_verification;

CREATE TABLE integers (i INT, j INT);

INSERT INTO integers VALUES (1, 1), (2, 2), (3, 3), (NULL, NULL);

EXPLAIN SELECT * FROM integers;

EXPLAIN select sum(i), j, sum(i), j from integers group by j having j < 10;

EXPLAIN update integers set i=i+1;

EXPLAIN delete from integers where i=1;

PRAGMA explain_output = 'optimized_only';

EXPLAIN (FORMAT JSON) SELECT SUM(i) FROM (SELECT * FROM integers i1, integers i2 UNION ALL SELECT * FROM integers i1, integers i2);

EXPLAIN (FORMAT HTML) SELECT SUM(i) FROM (SELECT * FROM integers i1, integers i2 UNION ALL SELECT * FROM integers i1, integers i2);

EXPLAIN (FORMAT GRAPHVIZ) SELECT SUM(i) FROM (SELECT * FROM integers i1, integers i2 UNION ALL SELECT * FROM integers i1, integers i2);

PRAGMA enable_verification;

CREATE TABLE integers AS SELECT * FROM RANGE(0, 100) AS tbl(i);

EXPLAIN ANALYZE SELECT SUM(i) FROM integers;

EXPLAIN (ANALYZE) SELECT SUM(i) FROM (SELECT * FROM integers i1, integers i2 UNION ALL SELECT * FROM integers i1, integers i2);

PRAGMA enable_profiling;

EXPLAIN ANALYZE SELECT SUM(i) FROM (SELECT * FROM integers i1, integers i2 UNION ALL SELECT * FROM integers i1, integers i2);

PRAGMA disable_profiling;

EXPLAIN ANALYZE SELECT SUM(i) FROM (SELECT * FROM integers i1, integers i2 UNION ALL SELECT * FROM integers i1, integers i2);

EXPLAIN (ANALYZE, FORMAT JSON) SELECT SUM(i) FROM (SELECT * FROM integers i1, integers i2 UNION ALL SELECT * FROM integers i1, integers i2);

EXPLAIN (ANALYZE, FORMAT JSON) SELECT SUM(i) FROM (SELECT * FROM integers i1, integers i2 UNION ALL SELECT * FROM integers i1, integers i2);

PRAGMA profiling_output = '__TEST_DIR__/test.json';

PRAGMA enable_profiling = 'json';

SELECT 42;

PRAGMA disable_profiling;

SELECT * FROM READ_CSV('__TEST_DIR__/test.json', columns = {'json': 'VARCHAR'}, sep = '🦆');

PRAGMA enable_profiling = 'json';

EXPLAIN ANALYZE SELECT SUM(i) FROM integers;

PRAGMA disable_profiling;

PRAGMA profiling_output = '__TEST_DIR__/test_2.json';

SELECT * FROM READ_CSV('__TEST_DIR__/test.json', columns = {'json': 'VARCHAR'}, sep = '🦆');

EXPLAIN (ANALYZE, FORMAT graphviz) SELECT SUM(i) FROM integers;

EXPLAIN (ANALYZE, FORMAT html) SELECT SUM(i) FROM integers;

CALL dbgen(sf=0.01);

CALL dbgen(sf=0.01);

EXPLAIN ANALYZE SELECT
l_returnflag,
l_linestatus,
sum(l_quantity) AS sum_qty,
sum(l_extendedprice) AS sum_base_price,
sum(l_extendedprice * (1 - l_discount)) AS sum_disc_price,
sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) AS sum_charge,
avg(l_quantity) AS avg_qty,
avg(l_extendedprice) AS avg_price,
avg(l_discount) AS avg_disc,
count(*) AS count_order
FROM
lineitem
WHERE
l_shipdate <= CAST('1998-09-02' AS date)
GROUP BY
l_returnflag,
l_linestatus
ORDER BY
l_returnflag,
l_linestatus;

PRAGMA enable_verification;

CREATE TABLE integers (i INT, j INT);

INSERT INTO integers VALUES (1, 1), (2, 2), (3, 3), (NULL, NULL);

EXPLAIN SELECT * FROM integers;

PRAGMA enable_verification;

SET default_null_order = 'nulls_first';

BEGIN;

CREATE TABLE integers (i INT, j INT, CHECK (i + j < 10));

CREATE TABLE strings (v TEXT, d DATE, PRIMARY KEY (d));

CREATE TYPE mood AS ENUM ('sad', 'ok', 'happy');

CREATE TABLE enums (current_mood mood);

INSERT INTO integers VALUES (1, 3), (4, 2), (NULL, 1);

INSERT INTO strings VALUES ('NULL', CAST('1992-01-01' AS DATE)), (NULL, CAST('1993-01-01' AS DATE));

INSERT INTO enums VALUES ('sad'), ('ok'), ('sad'), ('happy');

CREATE TABLE "table.with-symbols" (i INT);

INSERT INTO "table.with-symbols" VALUES (1), (4), (NULL);

CREATE TABLE "table ""." ("col ""." TEXT);

INSERT INTO "table ""." ("col "".") VALUES ('quote_escaped_quote_''');

CREATE TABLE "SAME_NAME" (i INT, j INT);

CREATE TABLE "same_name" (i INT, j INT);

INSERT INTO "SAME_NAME" VALUES (1, 1), (2, 2);

CREATE VIEW v1 AS SELECT * FROM integers WHERE i > 3;
;
CREATE VIEW v2 AS SELECT * FROM integers WHERE i < 3;
CREATE VIEW "view.with-symbols" AS SELECT * FROM "table.with-symbols" WHERE i < 3;
CREATE VIEW "view ""." AS SELECT * FROM "table.with-symbols" WHERE i < 3;

CREATE VIEW v3 AS SELECT * FROM integers WHERE i IS NULL;

CREATE SEQUENCE seq;

SELECT NEXTVAL('seq');

SELECT * FROM v2 ORDER BY 1;

SELECT * FROM integers ORDER BY 1;

SELECT * FROM enums ORDER BY 1;

SELECT * FROM strings ORDER BY 1;

SELECT * FROM v1 ORDER BY 1;

SELECT * FROM v2 ORDER BY 1;

SELECT * FROM v3 ORDER BY 1;

SELECT * FROM "table.with-symbols" ORDER BY 1;

SELECT * FROM "view.with-symbols" ORDER BY 1;

SELECT "table ""."."col "".", "col ""." FROM "table "".";

SELECT * FROM "view ""." ORDER BY 1;

SELECT * FROM "SAME_NAME" ORDER BY i;

CREATE SCHEMA s1;
CREATE SCHEMA s2;

CREATE TABLE table01 (i INT, j INT);
CREATE TABLE s1.table01 (i INT, j INT);
CREATE TABLE s2.table01 (i INT, j INT);

INSERT INTO table01 VALUES (1, 1), (2, 2);
INSERT INTO s1.table01 VALUES (3, 3), (4, 4);
INSERT INTO s2.table01 VALUES (5, 5), (6, 6);

SELECT * FROM table01 ORDER BY i;

SELECT * FROM s1.table01 ORDER BY i;

SELECT * FROM s2.table01 ORDER BY i;

PRAGMA verify_serializer;

PRAGMA verify_serializer;

PRAGMA disable_verification;

ROLLBACK;

ROLLBACK;

SELECT * FROM integers ORDER BY 1;

SELECT * FROM strings ORDER BY 1;

SELECT * FROM enums ORDER BY 1;

SELECT * FROM v1 ORDER BY 1;

SELECT * FROM v2 ORDER BY 1;

SELECT * FROM v3 ORDER BY 1;

SELECT NEXTVAL('seq');

SELECT * FROM "table.with-symbols" ORDER BY 1;

SELECT * FROM "view.with-symbols" ORDER BY 1;

SELECT "table ""."."col "".", "col ""." FROM "table "".";

SELECT * FROM "view ""." ORDER BY 1;

SELECT * FROM "SAME_NAME" ORDER BY i;

SELECT * FROM table01 ORDER BY i;

SELECT * FROM s1.table01 ORDER BY i;

SELECT * FROM s2.table01 ORDER BY i;

INSERT INTO integers VALUES (5, 6);

INSERT INTO strings VALUES (NULL, NULL);

PRAGMA enable_verification;

BEGIN;

CREATE TABLE integers (i INT, j INT, CHECK (i + j < 10));

CREATE TABLE integers (i INT, j INT, CHECK (i + j < 10));

ROLLBACK;

SET enable_external_access = FALSE;

SET enable_external_access = FALSE;

SET enable_external_access = FALSE;

PRAGMA enable_verification;

BEGIN;

CREATE TABLE tbl (d DATE DEFAULT CURRENT_DATE, t TIMETZ DEFAULT CURRENT_TIME, ts TIMESTAMP DEFAULT CURRENT_TIMESTAMP, cur_user TEXT DEFAULT CURRENT_USER(), "user" TEXT DEFAULT "USER", sess_user TEXT DEFAULT "SESSION_USER", cur_catalog TEXT DEFAULT "CURRENT_CATALOG", cur_schema TEXT DEFAULT CURRENT_SCHEMA);

CREATE TABLE tbl (d DATE DEFAULT CURRENT_DATE, t TIMETZ DEFAULT CURRENT_TIME, ts TIMESTAMP DEFAULT CURRENT_TIMESTAMP, cur_user TEXT DEFAULT CURRENT_USER(), "user" TEXT DEFAULT "USER", sess_user TEXT DEFAULT "SESSION_USER", cur_catalog TEXT DEFAULT "CURRENT_CATALOG", cur_schema TEXT DEFAULT CURRENT_SCHEMA);

ROLLBACK;

PRAGMA storage_compatibility_version = 'v1.1.0';

PRAGMA enable_verification;

BEGIN;

CREATE MACRO my_macro(b) AS b + 5;

CREATE TABLE tbl (x INT, gen_x AS (MY_MACRO(x)));

INSERT INTO tbl VALUES (5);

INSERT INTO tbl VALUES (2, 3);

ALTER TABLE tbl DROP COLUMN x;

ALTER TABLE tbl DROP COLUMN x;

ROLLBACK;

ROLLBACK;

SELECT * FROM tbl;

INSERT INTO tbl VALUES (2, 3);

drop macro my_macro;

ALTER TABLE tbl DROP COLUMN x;

BEGIN;

CREATE MACRO elaborate_macro(x, y := 7) AS x + y;

CREATE TABLE tbl (x INT, y TEXT);

CREATE UNIQUE INDEX my_index ON tbl(ELABORATE_MACRO(tbl.x));

SELECT index_name FROM DUCKDB_INDEXES();

SELECT index_name FROM DUCKDB_INDEXES();

ROLLBACK;

ROLLBACK;

SELECT index_name FROM DUCKDB_INDEXES();

SELECT ELABORATE_MACRO(28, y := 5);

INSERT INTO tbl VALUES (10, 'hello');

INSERT INTO tbl VALUES (10, 'world');

SET enable_macro_dependencies = TRUE;

PRAGMA enable_verification;

BEGIN;

CREATE SCHEMA my_schema;

CREATE MACRO my_schema.my_range(x, y := 7) AS TABLE SELECT range + x i FROM range(y);

CREATE MACRO my_schema.elaborate_macro(x, y := 7) AS x + y + (SELECT max(i) FROM my_schema.my_range(0, y := 10));

CREATE MACRO my_schema.my_other_range(x) AS TABLE SELECT * FROM my_schema.my_range(x, y := 3);

CREATE MACRO my_schema.my_other_range(x) AS TABLE SELECT * FROM my_schema.my_range(x, y := 3);

ROLLBACK;

ROLLBACK;

SELECT my_schema.elaborate_macro(28, y := 5);

SELECT MAX(i) FROM my_schema.MY_RANGE(33, y := 10);

SELECT MAX(i) FROM my_schema.MY_OTHER_RANGE(40);

PRAGMA enable_verification;

BEGIN;

CREATE TYPE "group" AS ENUM ( 'one', 'two');

CREATE TABLE table1 (col1 group);

CREATE TABLE table1 (col1 group);

ROLLBACK;

PRAGMA enable_verification;

BEGIN;

CREATE TABLE a (s STRUCT("end" TEXT));

INSERT INTO a VALUES ({'end': 'hello'});

SELECT * FROM a;

SELECT * FROM a;

ROLLBACK;

ROLLBACK;

SELECT * FROM a;

PRAGMA enable_verification;

BEGIN;

CREATE TABLE a (u UNION("member name 1" TEXT, "member name 2" BOOLEAN));

INSERT INTO a VALUES (UNION_VALUE("member name 1" := 'hello'));

SELECT * FROM a;

SELECT * FROM a;

ROLLBACK;

ROLLBACK;

SELECT * FROM a;

SELECT UNION_TAG(COLUMNS(*)) FROM a;

BEGIN;

CREATE TYPE mood AS ENUM ('happy', 'sad', 'curious');

CREATE TYPE doom as mood;

CREATE TABLE tbl1 (a mood, b doom);

CREATE TABLE tbl2 (my_struct STRUCT(a mood, b doom));

CREATE TYPE doom_mood as STRUCT(a mood, b doom);

CREATE TYPE mood_list as mood[];

CREATE TYPE my_union as UNION(a doom, b mood);

CREATE TYPE mood_map as MAP(doom, mood);

CREATE TYPE my_special_type as VARCHAR;

CREATE TABLE tbl3 (my_struct doom_mood);

CREATE TABLE tbl3 (my_struct doom_mood);

ROLLBACK;

PRAGMA enable_verification;

BEGIN;

CREATE TABLE integers (i INT NOT NULL, j INT);

INSERT INTO integers SELECT i, i + 1 FROM RANGE(0, 1000) AS tbl(i);

SELECT SUM(i), SUM(j) FROM integers;

SELECT SUM(i), SUM(j) FROM integers;

ROLLBACK;

ROLLBACK;

SELECT SUM(i), SUM(j) FROM integers;

INSERT INTO integers VALUES (NULL, NULL);

DROP TABLE integers;

BEGIN;

CREATE TABLE integers (i INT NOT NULL, j INT);

INSERT INTO integers SELECT i, i + 1 FROM RANGE(0, 1000) AS tbl(i);

SELECT SUM(i), SUM(j) FROM integers;

SELECT SUM(i), SUM(j) FROM integers;

ROLLBACK;

ROLLBACK;

SELECT SUM(i), SUM(j) FROM integers;

INSERT INTO integers VALUES (NULL, NULL);

DROP TABLE integers;

BEGIN;

CREATE TABLE integers (i INT NOT NULL, j INT);

INSERT INTO integers SELECT i, i + 1 FROM RANGE(0, 1000) AS tbl(i);

SELECT SUM(i), SUM(j) FROM integers;

SELECT SUM(i), SUM(j) FROM integers;

ROLLBACK;

ROLLBACK;

SELECT SUM(i), SUM(j) FROM integers;

INSERT INTO integers VALUES (NULL, NULL);

BEGIN;

CREATE TABLE tbl AS SELECT "bit" FROM TEST_ALL_TYPES(), RANGE(0, 3);

SELECT * FROM tbl;

SELECT * FROM tbl;

ROLLBACK;

ROLLBACK;

SELECT * FROM tbl;

BEGIN;

create type my_enum as enum ('1', '2', '3');

CREATE TABLE tbl (a my_enum);

CREATE TABLE tbl2 AS SELECT CAST('hello''world' AS ENUM('hello''world'));

INSERT INTO tbl VALUES ('1'), (NULL), ('3');

SELECT * FROM tbl;

SELECT * FROM tbl2;

SELECT * FROM tbl2;

ROLLBACK;

ROLLBACK;

SELECT * FROM tbl;

SELECT * FROM tbl2;

BEGIN;

CREATE TABLE tbl AS SELECT "hugeint" FROM TEST_ALL_TYPES(), RANGE(0, 3);

SELECT * FROM tbl;

SELECT * FROM tbl;

ROLLBACK;

ROLLBACK;

SELECT * FROM tbl;

BEGIN;

CREATE TABLE tbl AS SELECT val FROM (SELECT JSON_STRUCTURE('{"a": 42}') AS val), RANGE(0, 3);

SELECT * FROM tbl;

SELECT * FROM tbl;

ROLLBACK;

ROLLBACK;

SELECT * FROM tbl;

BEGIN;

CREATE TABLE tbl AS SELECT val FROM (SELECT [CAST('01010101' AS BIT), CAST('01011101001' AS BIT)] AS val), RANGE(0, 3);

SELECT * FROM tbl;

SELECT * FROM tbl;

ROLLBACK;

ROLLBACK;

SELECT * FROM tbl;

BEGIN;

CREATE TABLE unsupported_key AS SELECT val FROM (SELECT MAP {'hello': CAST('01010101000' AS BIT), 'HELLO': CAST(NULL AS BIT)} AS val), RANGE(0, 3);

CREATE TABLE unsupported_value AS SELECT val FROM (SELECT MAP {'01010101000': 'hello', '11110111101': 'world'} AS val), RANGE(0, 3);

SELECT * FROM unsupported_key;

SELECT * FROM unsupported_value;

SELECT * FROM unsupported_value;

ROLLBACK;

ROLLBACK;

SELECT * FROM unsupported_key;

SELECT * FROM unsupported_value;

BEGIN;

CREATE TABLE tbl AS SELECT val FROM (SELECT {'a': CAST('01010101000' AS BIT), 'b': TRUE, 'c': NULL} AS val), RANGE(0, 3);

SELECT * FROM tbl;

SELECT * FROM tbl;

ROLLBACK;

ROLLBACK;

SELECT * FROM tbl;

BEGIN;

CREATE TABLE tbl AS SELECT "union" FROM TEST_ALL_TYPES(), RANGE(0, 3);

CREATE TABLE tbl2 (a UNION(a BIT, b BOOLEAN));

INSERT INTO tbl2 VALUES (CAST('00101010' AS BIT)), (CAST(TRUE AS BOOLEAN)), (CAST(NULL AS BIT));

SELECT * FROM tbl;

SELECT * FROM tbl2;

SELECT * FROM tbl2;

ROLLBACK;

ROLLBACK;

SELECT * FROM tbl;

SELECT * FROM tbl2;

LOAD 'README.md';

SET allow_extensions_metadata_mismatch = TRUE;

LOAD 'README.md';

LOAD 'data/csv/no_opt.csv';

SET allow_unsigned_extensions = FALSE;

LOAD 'README.md';

SET autoinstall_known_extensions = TRUE;

SET autoload_known_extensions = TRUE;

ATTACH '__TEST_DIR__/my_sqlite' AS sqlite_db (TYPE SQLITE);

CREATE TABLE sqlite_db.main.tbl (i INT);

INSERT INTO sqlite_db.main.tbl VALUES (1);

ALTER TABLE sqlite_db.main.tbl ADD PRIMARY KEY (i);

SET autoinstall_known_extensions = TRUE;

SET autoload_known_extensions = TRUE;

SET enable_server_cert_verification = TRUE;

SELECT COUNT(*) FROM DUCKDB_EXTENSIONS() WHERE extension_version <> '' AND extension_name = 'httpfs';

SET autoinstall_known_extensions = TRUE;

SET autoload_known_extensions = TRUE;

SET GLOBAL sqlite_all_varchar = TRUE;

SELECT COUNT(*) FROM DUCKDB_EXTENSIONS() WHERE extension_version <> '' AND extension_name = 'sqlite_scanner';

PRAGMA enable_verification;

CREATE TABLE integers AS SELECT a FROM GENERATE_SERIES(0, 9999, 1) AS tbl(a), GENERATE_SERIES(0, 9, 1) AS tbl2(b);

SELECT COUNT(*) FROM integers WHERE a < 5;

SELECT COUNT(*) FROM (SELECT * FROM integers WHERE (a > 1 AND a < 10) OR a > 9995) AS tbl(a) WHERE a < 5;

SELECT COUNT(*) FROM (SELECT * FROM (SELECT * FROM integers WHERE (a <> 3 AND a < 50) OR (a > 9995)) WHERE a > 1 AND a < 20) AS tbl(a) WHERE a < 5;

PRAGMA enable_verification;

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (1), (2), (3), (NULL);

SELECT i % 2 AS k FROM integers WHERE k <> 0;

SELECT i % 2 AS k FROM integers WHERE integers.k <> 0;

SELECT i % 2 AS i FROM integers WHERE i <> 0;

SELECT i % 2 AS k FROM integers WHERE integers.i <> 0;

SELECT i % 2 AS k FROM integers WHERE k = k;

SELECT i % 2 AS o, COUNT(i) AS c FROM integers WHERE c = 0 GROUP BY o;

PRAGMA enable_verification;

CREATE TABLE integers (a INT, b INT);

INSERT INTO integers VALUES (2, 12);

SELECT * FROM integers WHERE 2 = 2;

SELECT * FROM integers WHERE 2 = 3;

SELECT * FROM integers WHERE 2 <> 3;

SELECT * FROM integers WHERE 2 <> 2;

SELECT * FROM integers WHERE 2 > 1;

SELECT * FROM integers WHERE 2 > 2;

SELECT * FROM integers WHERE 2 >= 2;

SELECT * FROM integers WHERE 2 >= 3;

SELECT * FROM integers WHERE 2 < 3;

SELECT * FROM integers WHERE 2 < 2;

SELECT * FROM integers WHERE 2 <= 2;

SELECT * FROM integers WHERE 2 <= 1;

SELECT a = NULL FROM integers;

SELECT NULL = a FROM integers;

SELECT * FROM integers WHERE 2 IN (2, 3, 4, 5);

SELECT * FROM integers WHERE NOT 2 IN (2, 3, 4, 5);

SELECT * FROM integers WHERE 2 IN (((1 * 2) + (1 * 0)) * 1, 3, 4, 5);

SELECT * FROM integers WHERE 2 IN ((1 + 1) * 2, 3, 4, 5);

SELECT CASE WHEN 1 THEN 13 ELSE 12 END;

SELECT * FROM integers WHERE CASE WHEN 2 = 2 THEN TRUE ELSE FALSE END;

PRAGMA enable_verification;

PRAGMA enable_verification;

SELECT COUNT(*) AS unfiltered, COUNT(*) FILTER(WHERE i < 5) AS filtered FROM t;

SELECT COUNT(*) AS unfiltered, COUNT(*) FILTER(WHERE i > 5 AND i < 10) AS filtered FROM t;

SELECT SUM(i) AS unfiltered, SUM(i) FILTER(WHERE i < 5) AS filtered FROM t;

SELECT SUM(i) AS unfiltered, SUM(i) FILTER(WHERE i BETWEEN 5 AND 10) AS filtered FROM t;

SELECT SUM(i) AS unfiltered, SUM(j) FILTER(WHERE j < 2) AS filtered FROM t;

SELECT SUM(j) FILTER(WHERE i < 10) FROM t;

SELECT SUM(j) FILTER(WHERE i < (SELECT 10)) FROM t;

SELECT SUM(i) FILTER(WHERE i < (SELECT i FROM t AS t2 WHERE t.i = t2.i)) FROM t;

SELECT (SELECT SUM(t2.i) FILTER(WHERE t2.i < 10) FROM t AS t2) AS sq FROM t ORDER BY sq LIMIT 5;

SELECT SUM(j) FILTER(WHERE i < 10), SUM(i) FILTER(WHERE i < 5) FROM t;

SELECT SUM(i) AS unfiltered, SUM(i) FILTER(WHERE i < 5) AS filtered FROM t GROUP BY j ORDER BY j;

SELECT COUNT(*) AS unfiltered, COUNT(*) FILTER(WHERE i > 5 AND i < 10) AS filtered, j FROM t GROUP BY j ORDER BY j;

SELECT SUM(i) AS unfiltered, SUM(i) FILTER(WHERE i BETWEEN 5 AND 10) AS filtered FROM t GROUP BY j ORDER BY j;

SELECT SUM(i) AS unfiltered, SUM(j) FILTER(WHERE j = 1) AS filtered, j FROM t GROUP BY j ORDER BY j;

SELECT SUM(j) FILTER(WHERE i < 10) FROM t GROUP BY j ORDER BY j;

SELECT SUM(j) FILTER(WHERE i < (SELECT 10)) FROM t GROUP BY j ORDER BY j;

SELECT SUM(i) FILTER(WHERE i < (SELECT i FROM t AS t2 WHERE t.i = t2.i)) FROM t GROUP BY j ORDER BY j;

SELECT (SELECT SUM(t2.i) FILTER(WHERE t2.i < 10) FROM t AS t2) FROM t GROUP BY j ORDER BY j LIMIT 5;

SELECT SUM(j) FILTER(WHERE i < 10), SUM(i) FILTER(WHERE i < 5) FROM t GROUP BY j ORDER BY j;

SELECT SUM(i) AS unfiltered, SUM(i) FILTER(WHERE i < 5) AS filtered FROM t GROUP BY k ORDER BY k;

SELECT COUNT(*) AS unfiltered, COUNT(*) FILTER(WHERE i > 5 AND i < 10) AS filtered FROM t GROUP BY k ORDER BY k;

SELECT SUM(i) AS unfiltered, SUM(i) FILTER(WHERE i BETWEEN 5 AND 10) AS filtered FROM t GROUP BY k ORDER BY k;

SELECT SUM(i) AS unfiltered, SUM(j) FILTER(WHERE j = 1) AS filtered, k FROM t GROUP BY k ORDER BY k;

SELECT SUM(j) FILTER(WHERE i < 10) FROM t GROUP BY k ORDER BY k;

SELECT SUM(j) FILTER(WHERE i < (SELECT 10)) FROM t GROUP BY k ORDER BY k;

SELECT SUM(i) FILTER(WHERE i < (SELECT i FROM t AS t2 WHERE t.i = t2.i)) FROM t GROUP BY k ORDER BY k;

SELECT (SELECT SUM(t2.i) FILTER(WHERE t2.i < 10) FROM t AS t2) FROM t GROUP BY k ORDER BY k LIMIT 5;

SELECT SUM(j) FILTER(WHERE i < 10), SUM(i) FILTER(WHERE i < 5) FROM t GROUP BY k ORDER BY k;

SELECT (SELECT SUM(t2.i) FILTER(WHERE t.i = t2.i) FROM t AS t2) AS sq FROM t WHERE i < 5 ORDER BY sq;

PRAGMA perfect_ht_threshold = 0 AS endloop;

CREATE TEMPORARY TABLE t_2 AS SELECT range AS a, LENGTH(CAST(range AS TEXT)) AS b, range % 100 AS c, 5 AS d, 10000 AS e FROM RANGE(0, 1000);

SELECT COUNT(a) FILTER(WHERE a > 10 AND a < 15), COUNT(b) FILTER(WHERE b BETWEEN 1 AND 3), COUNT(c) FILTER(WHERE c < 10), COUNT(d) FILTER(WHERE d = 5), COUNT(e) FILTER(WHERE e < 10) FROM t_2;

SELECT COUNT(a) FILTER(WHERE a > 10 AND a < 15), COUNT(b) FILTER(WHERE b BETWEEN 1 AND 3), COUNT(c) FILTER(WHERE c < 10), COUNT(d) FILTER(WHERE d = 5), COUNT(e) FILTER(WHERE e < 10) FROM t_2 GROUP BY b ORDER BY b;

SELECT COVAR_POP(a, b) FILTER(WHERE a < 100), COVAR_POP(a, b) FILTER(WHERE b < 5) FROM t_2;

SELECT COVAR_POP(a, c) FILTER(WHERE a < 100), COVAR_POP(a, c) FILTER(WHERE c < 50) FROM t_2 GROUP BY b ORDER BY b;

CREATE TABLE films (film_id INT, title TEXT);

CREATE TABLE actors (actor_id INT, first_name TEXT, last_name TEXT);

CREATE TABLE film_actor (film_id INT, actor_id INT);

INSERT INTO films VALUES (1, 'The Martian'), (2, 'Saving Private Ryan'), (3, 'Team America');

INSERT INTO actors VALUES (1, 'Matt', 'Damon'), (2, 'Jessica', 'Chastain'), (3, 'Tom', 'Hanks'), (4, 'Edward', 'Burns'), (5, 'Kim', 'Jong Un'), (6, 'Alec', 'Baldwin');

INSERT INTO film_actor VALUES (1, 1), (2, 1), (3, 1), (1, 2), (2, 3), (2, 4), (3, 5), (3, 6);

SELECT title, ARRAY_AGG(first_name || ' ' || last_name) FILTER(WHERE first_name = 'Matt') AS actors FROM films JOIN film_actor USING (film_id) JOIN actors USING (actor_id) GROUP BY title ORDER BY title;

SELECT title, GROUP_CONCAT(first_name || ' ' || last_name) FILTER(WHERE first_name = 'Matt') AS actors FROM films JOIN film_actor USING (film_id) JOIN actors USING (actor_id) GROUP BY title ORDER BY title;

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (1), (1), (2), (2), (3), (4), (8);

SELECT SUM(DISTINCT i) FILTER(WHERE i > 1 AND i < 5) FROM integers;

PRAGMA enable_verification;

CREATE TABLE integers (a INT, b INT);

INSERT INTO integers VALUES (2, 12);

SELECT * FROM integers WHERE SUM(a) > 10;

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

CREATE TABLE integers (a INT, b INT);

INSERT INTO integers VALUES (1, 10), (2, 12), (3, 14), (4, 16), (5, NULL), (NULL, NULL);

SELECT * FROM integers WHERE TRUE ORDER BY 1;

SELECT * FROM integers WHERE FALSE ORDER BY 1;

SELECT * FROM integers WHERE NULL ORDER BY 1;

SELECT * FROM integers WHERE a = 2 AND a = 2;

SELECT * FROM integers WHERE a = 2 AND a > 0;

SELECT * FROM integers WHERE a > 0 AND a = 2;

SELECT * FROM integers WHERE a = 2 AND a < 4;

SELECT * FROM integers WHERE a < 4 AND a = 2;

SELECT * FROM integers WHERE a = 2 AND a <= 2;

SELECT * FROM integers WHERE a = 2 AND a >= 2;

SELECT * FROM integers WHERE a > 2 AND a > 4;

SELECT * FROM integers WHERE a > 4 AND a > 2;

SELECT * FROM integers WHERE a > 4 AND a >= 4;

SELECT * FROM integers WHERE a >= 4 AND a > 4;

SELECT * FROM integers WHERE a < 2 AND a < 4;

SELECT * FROM integers WHERE a < 4 AND a < 2;

SELECT * FROM integers WHERE a < 2 AND a <= 2;

SELECT * FROM integers WHERE a <= 2 AND a < 2;

SELECT * FROM integers WHERE a < 2 AND a <> 3;

SELECT * FROM integers WHERE a <= 1 AND a <> 3;

SELECT * FROM integers WHERE a > 4 AND a <> 2;

SELECT * FROM integers WHERE a >= 5 AND a <> 2;

SELECT * FROM integers WHERE a >= 4 AND a <> 4 AND a <> 4;

SELECT * FROM integers WHERE a < 3 AND a < 4 AND a < 5 AND a < 10 AND a < 2 AND a < 20;

SELECT * FROM integers WHERE a = 2 AND a = 4;

SELECT * FROM integers WHERE a = 2 AND a > 4;

SELECT * FROM integers WHERE a > 4 AND a = 2;

SELECT * FROM integers WHERE a = 2 AND a > 2;

SELECT * FROM integers WHERE a >= 4 AND a = 2;

SELECT * FROM integers WHERE a = 4 AND a < 2;

SELECT * FROM integers WHERE a < 2 AND a = 4;

SELECT * FROM integers WHERE a = 2 AND a < 2;

SELECT * FROM integers WHERE a <= 2 AND a = 4;

SELECT * FROM integers WHERE a < 2 AND a > 4;

SELECT * FROM integers WHERE a = 2 AND a <> 2;

SELECT * FROM integers WHERE a <> 2 AND a = 2;

SELECT * FROM integers WHERE 0;

SELECT * FROM integers WHERE a < 2 AND 0;

CREATE TABLE strings (s TEXT);

INSERT INTO strings VALUES ('hello'), ('world'), (NULL);

SELECT * FROM strings WHERE s = 'hello' AND s = 'hello';

SELECT * FROM strings WHERE s = 'hello' AND s = 'world';

SELECT * FROM strings WHERE s = 'hello' AND s <> 'hello';

SELECT * FROM strings WHERE s = 'hello' AND s <> 'world';

SELECT * FROM strings WHERE s = 'hello' AND s > 'a';

SELECT * FROM strings WHERE s = 'hello' AND s >= 'hello';

SELECT * FROM strings WHERE s = 'hello' AND s <= 'hello';

SELECT * FROM strings WHERE s = 'hello' AND s < 'z';

SELECT * FROM strings WHERE s = 'hello' AND s <= 'a';

SELECT * FROM strings WHERE s = 'hello' AND s < 'hello';

SELECT * FROM strings WHERE s = 'hello' AND s > 'hello';

SELECT * FROM strings WHERE s = 'hello' AND s >= 'z';

SELECT * FROM strings WHERE s <> 'hello' AND s <= 'a';

SELECT * FROM strings WHERE s <> 'hello' AND s < 'hello';

SELECT * FROM strings WHERE s <> 'hello' AND s > 'hello';

SELECT * FROM strings WHERE s <> 'world' AND s >= 'hello';

PRAGMA explain_output = PHYSICAL_ONLY;

CREATE TABLE t1 AS SELECT range AS a, 'foo' || CAST((range % 100) AS TEXT) AS b, 100000 - range AS c, CAST('1992-01-01' AS TIMESTAMP) + INTERVAL (range * 20) MINUTE AS d FROM RANGE(0, 900000);

SELECT COUNT(*) FROM t1 WHERE a < 5 OR b = 'foo8';

EXPLAIN select * from t1 where a<5 or b = 'foo8';

EXPLAIN select * from t1 where a<5 or c>8000;

SELECT a FROM t1 WHERE a = 5 OR a = 899999;

EXPLAIN select * from t1 where a<5 or a>10;

EXPLAIN select * from t1 where 5>a or 10<a;

EXPLAIN select * from t1 where 5>=a or 10<=a;

EXPLAIN select * from t1 where a in (1, 5, 10);

EXPLAIN select * from t1 where a = 1 or a = 5 or a = 10;

EXPLAIN select * from t1 where a in (1, 2, 3);

EXPLAIN select * from t1 where a in (1);

EXPLAIN select b from t1 where b = 'foo9' or b = 'foo10';

SELECT a FROM t1 WHERE d = CAST('1992-01-01 01:40:00' AS TIMESTAMP) OR d = CAST('2026-03-22 23:40:00' AS TIMESTAMP);

EXPLAIN select a from t1 where d=timestamp '1992-01-01 01:40:00' or d=timestamp '2026-03-22 23:40:00';

PRAGMA enable_verification;

CREATE TABLE test_structs (i STRUCT(a INT, b BOOLEAN));

INSERT INTO test_structs VALUES ({'a': 1, 'b': TRUE}), ({'a': 2, 'b': FALSE}), (NULL), ({'a': 3, 'b': TRUE}), ({'a': NULL, 'b': NULL});

EXPLAIN SELECT * FROM test_structs WHERE i.a < 2;

SELECT * FROM test_structs WHERE i.a < 2;

EXPLAIN SELECT * FROM test_structs WHERE i.a > 2;

SELECT * FROM test_structs WHERE i.a > 2;

EXPLAIN SELECT * FROM test_structs WHERE i.A < 2;

SELECT * FROM test_structs WHERE i.A < 2;

EXPLAIN SELECT * FROM test_structs WHERE i.a IS NULL;

SELECT * FROM test_structs WHERE i.a IS NULL;

EXPLAIN SELECT * FROM test_structs WHERE i.a = 2 OR i.a IS NULL;

SELECT * FROM test_structs WHERE i.a = 2 OR i.a IS NULL ORDER BY 1 DESC NULLS FIRST;

CREATE TABLE string_structs (s STRUCT(a TEXT, b TEXT));

INSERT INTO string_structs VALUES ({'a': 'foo', 'b': 'bar'}), ({'a': 'baz', 'b': 'qux'}), (NULL), ({'a': 'foo', 'b': NULL});

EXPLAIN SELECT * FROM string_structs WHERE s.a = 'foo';

SELECT * FROM string_structs WHERE s.a = 'foo';

CREATE TABLE large_structs (i STRUCT(a INT, b BOOLEAN));

INSERT INTO large_structs SELECT {'a': n, 'b': n % 2 = 0} FROM GENERATE_SERIES(0, 200000) AS t(n);
restart;

EXPLAIN SELECT * FROM large_structs WHERE i.a > 150000;

EXPLAIN SELECT MIN(i.a), MAX(i.a), COUNT(*) FROM large_structs WHERE i.a > 150000;

SELECT MIN(i.a), MAX(i.a), COUNT(*) FROM large_structs WHERE i.a > 150000;

CREATE TABLE nested_structs (s STRUCT(a STRUCT(b INT, c BOOLEAN), d STRUCT(e INT, f TEXT)));

INSERT INTO nested_structs VALUES ({'a': {'b': 1, 'c': FALSE}, 'd': {'e': 2, 'f': 'foo'}}), (NULL), ({'a': {'b': 3, 'c': TRUE}, 'd': {'e': 4, 'f': 'bar'}}), ({'a': {'b': NULL, 'c': TRUE}, 'd': {'e': 5, 'f': 'qux'}}), ({'a': NULL, 'd': NULL});

EXPLAIN SELECT * FROM nested_structs WHERE s.a.b < 2;

SELECT * FROM nested_structs WHERE s.a.b < 2;

EXPLAIN SELECT * FROM nested_structs WHERE s.a.c = true AND s.d.e = 5;

SELECT * FROM nested_structs WHERE s.a.c = TRUE AND s.d.e = 5;

EXPLAIN SELECT * FROM nested_structs WHERE s.d.f = 'bar';

SELECT * FROM nested_structs WHERE s.d.f = 'bar';

COPY (SELECT * FROM test_structs) TO '__TEST_DIR__/test_structs.parquet' WITH (FORMAT PARQUET);

EXPLAIN SELECT * FROM read_parquet('__TEST_DIR__/test_structs.parquet') WHERE i.a < 2;

SELECT * FROM READ_PARQUET('__TEST_DIR__/test_structs.parquet') WHERE i.a < 2;

EXPLAIN SELECT * FROM read_parquet('__TEST_DIR__/test_structs.parquet') WHERE i.b = true or i.a IS NULL;

SELECT * FROM READ_PARQUET('__TEST_DIR__/test_structs.parquet') WHERE i.b = TRUE OR i.a IS NULL ORDER BY ALL;

COPY (SELECT * FROM string_structs) TO '__TEST_DIR__/string_structs.parquet' WITH (FORMAT PARQUET);

EXPLAIN SELECT * FROM read_parquet('__TEST_DIR__/string_structs.parquet') WHERE s.a = 'foo';

SELECT * FROM READ_PARQUET('__TEST_DIR__/string_structs.parquet') WHERE s.a = 'foo';

COPY (SELECT * FROM nested_structs) TO '__TEST_DIR__/nested_structs.parquet' WITH (FORMAT PARQUET);

EXPLAIN SELECT * FROM read_parquet('__TEST_DIR__/nested_structs.parquet') WHERE s.a.b < 2;

SELECT * FROM READ_PARQUET('__TEST_DIR__/nested_structs.parquet') WHERE s.a.b < 2;

EXPLAIN SELECT * FROM read_parquet('__TEST_DIR__/nested_structs.parquet') WHERE s.a.c = true AND s.d.e = 5;

SELECT * FROM READ_PARQUET('__TEST_DIR__/nested_structs.parquet') WHERE s.a.c = TRUE AND s.d.e = 5;

COPY (SELECT {'i': n} AS s FROM GENERATE_SERIES(0, 100000) AS t(n)) TO '__TEST_DIR__/large.parquet' WITH (FORMAT 'parquet', ROW_GROUP_SIZE 3000);

EXPLAIN SELECT * FROM read_parquet('__TEST_DIR__/large.parquet') WHERE s.i >= 500 AND s.i < 5000;

SELECT MIN(s.i), MAX(s.i) FROM READ_PARQUET('__TEST_DIR__/large.parquet') WHERE s.i >= 500 AND s.i < 5000;

PRAGMA enable_verification;

CREATE TABLE vals1 AS SELECT i AS i, i AS j FROM RANGE(0, 11, 1) AS t1(i);

INSERT INTO vals1 SELECT i, i + 1 FROM vals1;

INSERT INTO vals1 SELECT DISTINCT (i), i - 1 FROM vals1 ORDER BY i;

SELECT * FROM vals1 WHERE i = 5 AND j >= i;

SELECT * FROM vals1 WHERE i > 9 AND j >= i;

SELECT * FROM vals1 WHERE i >= 10 AND j >= i;

SELECT * FROM vals1 WHERE i < 1 AND j >= i;

SELECT * FROM vals1 WHERE i <= 0 AND j >= i;

SELECT * FROM vals1 WHERE i = 5 AND j <= i;

SELECT * FROM vals1 WHERE i > 9 AND j <= i;

SELECT * FROM vals1 WHERE i >= 10 AND j <= i;

SELECT * FROM vals1 WHERE i < 1 AND j <= i;

SELECT * FROM vals1 WHERE i <= 0 AND j <= i;

SELECT * FROM vals1 WHERE i = 5 AND j > i;

SELECT * FROM vals1 WHERE i > 9 AND j > i;

SELECT * FROM vals1 WHERE i >= 10 AND j > i;

SELECT * FROM vals1 WHERE i < 1 AND j > i;

SELECT * FROM vals1 WHERE i <= 0 AND j > i;

SELECT * FROM vals1 WHERE i = 5 AND j < i;

SELECT * FROM vals1 WHERE i > 9 AND j < i;

SELECT * FROM vals1 WHERE i >= 10 AND j < i;

SELECT * FROM vals1 WHERE i < 1 AND j < i;

SELECT * FROM vals1 WHERE i <= 0 AND j < i;

SELECT * FROM vals1 WHERE j >= i AND i = 5;

SELECT * FROM vals1 WHERE j >= i AND i > 9;

SELECT * FROM vals1 WHERE j >= i AND i >= 10;

SELECT * FROM vals1 WHERE j >= i AND i < 1;

SELECT * FROM vals1 WHERE j >= i AND i <= 0;

SELECT * FROM vals1 WHERE j <= i AND i = 5;

SELECT * FROM vals1 WHERE j <= i AND i > 9;

SELECT * FROM vals1 WHERE j <= i AND i >= 10;

SELECT * FROM vals1 WHERE j <= i AND i < 1;

SELECT * FROM vals1 WHERE j <= i AND i <= 0;

SELECT * FROM vals1 WHERE j > i AND i = 5;

SELECT * FROM vals1 WHERE j > i AND i > 9;

SELECT * FROM vals1 WHERE j > i AND i >= 10;

SELECT * FROM vals1 WHERE j > i AND i < 1;

SELECT * FROM vals1 WHERE j > i AND i <= 0;

SELECT * FROM vals1 WHERE j < i AND i = 5;

SELECT * FROM vals1 WHERE j < i AND i > 9;

SELECT * FROM vals1 WHERE j < i AND i >= 10;

SELECT * FROM vals1 WHERE j < i AND i < 1;

SELECT * FROM vals1 WHERE j < i AND i <= 0;

CREATE TABLE vals2 (k BIGINT, l BIGINT);

INSERT INTO vals2 SELECT * FROM vals1;

SELECT * FROM vals1, vals2 WHERE i > 9 AND j <= l AND k >= i AND l < 11 ORDER BY 2 DESC, 4 DESC;

SELECT * FROM vals1, vals2 WHERE i > 9 AND j >= i AND k >= j ORDER BY l;

SELECT * FROM vals1, vals2 WHERE i > 9 AND k >= j AND j >= i AND l >= k;

SELECT * FROM vals1, vals2 WHERE i < 1 AND k <= j AND j <= i AND l <= k;

PRAGMA explain_output = PHYSICAL_ONLY;

CREATE TEMPORARY TABLE t AS SELECT range AS a, LENGTH(range) AS b, range % 10000 AS c, 5 AS d, 10000 AS e FROM RANGE(0, 100000000);

SELECT COUNT(*) FROM t WHERE a > 500 OR a <= 700;

EXPLAIN select count(*) from t where (a > 500 and b = 3) or (a > 7000 and b = 2);

SELECT COUNT(*) FROM t WHERE (a > 500 AND b = 3) OR (a > 7000 AND b = 2);

EXPLAIN select count(*) from t where (a > 500 AND b = 3) OR (a > 400) OR (a > 300 AND b=4) OR (a > 600 AND a > 300);

SELECT COUNT(*) FROM t WHERE (a > 500 AND b = 3) OR (a > 400) OR (a > 300 AND b = 4) OR (a > 600 AND a > 300);

EXPLAIN select count(*) from t where (a > 500 AND b = 3) OR (a > 400) OR (a > 300 AND b=4) OR (a > 600 AND a > 300);

SELECT COUNT(*) FROM t WHERE (a > 500 AND b = 3) OR (a > 400) OR (a > 300 AND b = 4) OR (a > 600 AND a > 300);

EXPLAIN select count(*) from t where (a > 500 AND b = 3) OR (c = 400) OR (a > 300 AND b=4) OR (a > 600 AND a > 300) or (d < 10);

SELECT COUNT(*) FROM t WHERE (a > 500 AND b = 3) OR (a > 400) OR (a > 300 AND b = 4) OR (a > 600 AND a > 300);

EXPLAIN select count(*) from t where (a > 500 AND b = 1) OR b < 2;

SELECT COUNT(*) FROM t WHERE (a > 500 AND b = 1) OR b < 2;

PRAGMA enable_verification;

CREATE TABLE integers (i INT);

INSERT INTO integers SELECT 1 FROM RANGE(0, 65534);

INSERT INTO integers SELECT 2 FROM RANGE(0, 65534);

INSERT INTO integers SELECT 3 FROM RANGE(0, 65534);

SELECT SUM(i) FROM integers WHERE i = 1;

SELECT SUM(i) FROM integers WHERE i = 2;

SELECT SUM(i) FROM integers WHERE i = 3;

SELECT SUM(i) FROM integers WHERE i = 4;

SELECT SUM(i) FROM integers WHERE i = 1;

SELECT SUM(i) FROM integers WHERE i = 2;

SELECT SUM(i) FROM integers WHERE i = 3;

SELECT SUM(i) FROM integers WHERE i = 4;

INSERT INTO integers SELECT 4 FROM RANGE(0, 65534);

INSERT INTO integers SELECT 5 FROM RANGE(0, 65534);

SELECT SUM(i) FROM integers WHERE i = 4;

SELECT SUM(i) FROM integers WHERE i = 5;

SELECT SUM(i) FROM integers WHERE i = 1;

SELECT SUM(i) FROM integers WHERE i = 2;

SELECT SUM(i) FROM integers WHERE i = 3;

SELECT SUM(i) FROM integers WHERE i = 4;

SELECT SUM(i) FROM integers WHERE i = 5;

SELECT SUM(i) FROM integers WHERE i = 6;

PRAGMA enable_verification;

SELECT MAP([MAP([ARRAY_VALUE('1', NULL), ARRAY_VALUE(NULL, '2')], [1, 2])], [1]);

SELECT MAP([2], [{'key1': MAP([ARRAY_VALUE('1', NULL), ARRAY_VALUE(NULL, '2')], [1, 2])}]);

SELECT [MAP([2], [{'key1': MAP([ARRAY_VALUE('1', NULL), ARRAY_VALUE(NULL, '2')], [1, 2]), 'key2': 2}])];

PRAGMA enable_verification;

SELECT FLATTEN(CAST(['a', 'b', 'c'] AS TEXT[3]));

SELECT FLATTEN(CAST([['a'], ['b'], ['c']] AS TEXT[1][3]));

PRAGMA enable_verification;

SELECT ARRAY_INNER_PRODUCT('foo', 'bar');

SELECT ARRAY_INNER_PRODUCT(CAST([1, 2, 3] AS INT[3]), CAST(['a', 'b', 'c'] AS TEXT[3]));

SELECT ARRAY_DISTANCE(CAST(['a', 'b'] AS TEXT[2]), CAST(['foo', 'bar'] AS TEXT[2]));

SELECT ARRAY_DISTANCE(CAST(['a', 'b'] AS TEXT[2]), CAST(['foo', 'bar'] AS TEXT[2]));

SELECT ARRAY_DISTANCE(CAST(['a', 'b'] AS TEXT[2]), CAST(['foo', 'bar'] AS TEXT[2]));

INSERT INTO arrays VALUES ([1, 2, 3]), ([1, 2, 4]), ([7, 8, 9]), ([-1, -2, -3]), (NULL);

INSERT INTO arrays VALUES ([1, 2, 3]), ([1, 2, 4]), ([7, 8, 9]), ([-1, -2, -3]), (NULL);

INSERT INTO arrays VALUES ([1, 2, 3]), ([1, 2, 4]), ([7, 8, 9]), ([-1, -2, -3]), (NULL);

INSERT INTO arrays VALUES ([1, 2, 3]), ([1, 2, 4]), ([7, 8, 9]), ([-1, -2, -3]), (NULL);

INSERT INTO arrays VALUES ([1, 2, 3]), ([1, 2, 4]), ([7, 8, 9]), ([-1, -2, -3]), (NULL);

PRAGMA enable_verification;

SELECT LENGTH(ARRAY_VALUE(1, 2, 3));

CREATE TABLE arrays (a INT[3]);

INSERT INTO arrays VALUES ([1, 2, 3]), ([4, 5, 6]);

SELECT LENGTH(a) FROM arrays;

SELECT LENGTH(CAST(NULL AS INT[3])) FROM arrays;

INSERT INTO arrays VALUES (NULL);

SELECT LENGTH(a) FROM arrays;

SELECT ARRAY_LENGTH(ARRAY_VALUE(ARRAY_VALUE(1, 2, 2), ARRAY_VALUE(3, 4, 3)), 1);

SELECT ARRAY_LENGTH(ARRAY_VALUE(ARRAY_VALUE(1, 2, 2), ARRAY_VALUE(3, 4, 3)), 2);

SELECT ARRAY_LENGTH(ARRAY_VALUE(ARRAY_VALUE(1, 2, 2), ARRAY_VALUE(3, 4, 3)), 3);

SELECT ARRAY_LENGTH(ARRAY_VALUE(ARRAY_VALUE(1, 2, 2), ARRAY_VALUE(3, 4, 3)), 0);

PRAGMA enable_verification;

SELECT LIST_DISTINCT(ARRAY_VALUE(1, 1, 2, 3, 3)) = LIST_DISTINCT([1, 1, 2, 3, 3]);

SELECT ARRAY_SORT(ARRAY_VALUE(3, 2, 1)) = ARRAY_SORT([3, 2, 1]);

SELECT LIST_SLICE(ARRAY_VALUE(1, 2, 3, 4, 5), 1, 3) = LIST_SLICE([1, 2, 3, 4, 5], 1, 3);

SELECT LIST_TRANSFORM(ARRAY_VALUE(3, 2, 1), x -> x + 1) = LIST_TRANSFORM([3, 2, 1], x -> x + 1);

SELECT LIST_FILTER(ARRAY_VALUE(3, 2, 1), x -> x > 1) = LIST_FILTER([3, 2, 1], x -> x > 1);

SELECT LIST_CONCAT(ARRAY_VALUE(1, 2, 3), ARRAY_VALUE(4, 5, 6));

SELECT LIST_CONCAT(ARRAY_VALUE(1, 2, 3), NULL), LIST_CONCAT(NULL, ARRAY_VALUE(4, 5, 6));

SELECT LIST_RESIZE(ARRAY_VALUE(1, 2), 3);

SELECT LIST_RESIZE(ARRAY_VALUE(1, 2), 1);

SELECT LIST_RESIZE(ARRAY_VALUE(1, 2), 0);

SELECT LIST_POSITION(ARRAY_VALUE(1, 2, 3), 2);

SELECT LIST_POSITION(ARRAY_VALUE(1, 2, 3), 4);

SELECT LIST_CONTAINS(ARRAY_VALUE(1, 2, 3), 2);

SELECT LIST_CONTAINS(ARRAY_VALUE(1, 2, 3), 4);

SELECT LIST_EXTRACT(ARRAY_VALUE(4, 5, 6), 2);

SELECT LIST_EXTRACT(ARRAY_VALUE(4, 5, 6), 4);

SELECT * FROM SQL_AUTO_COMPLETE('COP') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('COPY tbl FRO') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('COPY tbl FROM ''file.csv'' HEAD') LIMIT 1;

CREATE TABLE my_table (my_column INT);

SELECT * FROM SQL_AUTO_COMPLETE('COPY my_') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('CREATE MA') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('CREATE F') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('CREATE MACRO name(a) A') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('CREATE MACRO name(a) AS a+1, (b) A') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('CREATE MACRO name (a) AS TA') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('CREATE MACRO name (a) AS TABLE SEL') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('CREATE SCH') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('CREATE SCHEMA I') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('CREATE SCHEMA IF NO') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('CREATE SCHEMA IF NOT EX') LIMIT 1;

ATTACH ':memory:' AS attached_in_memory;

SELECT * FROM SQL_AUTO_COMPLETE('CREATE SCHEMA attac') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('CREATE SEQ') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('CREATE SEQUENCE seq CYC') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('CREATE SEQUENCE seq INC') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('CR') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('cr') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('CREATE TA') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('CREATE T') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('CREATE OR RE') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('create ta') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('create table tbl(i INTE') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('create table tbl(i INTEGER, j INTE') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('create table tbl(i INTEGER PRI') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('create table tbl(i INTEGER PRIMARY KE') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('create table tbl(i INTEGER UNIQ') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('create table tbl(i INTEGER UNIQUE NO') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('create table tbl(i INTEGER UNIQUE NOT N') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('create table tbl(i INTEGER, PRI') LIMIT 1;

CREATE SCHEMA abcdefgh;

SELECT * FROM SQL_AUTO_COMPLETE('CREATE TABLE abcd') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('CREATE TABLE abcdefgh.') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('CREATE TABLE ABCD') LIMIT 1;

CREATE SCHEMA "SCHEMA";

SELECT * FROM SQL_AUTO_COMPLETE('CREATE TABLE SC') LIMIT 1;

ATTACH ':memory:' AS attached_in_memory;

SELECT * FROM SQL_AUTO_COMPLETE('CREATE TABLE attac') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('CREATE TABLE attached_in_memory.a') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE(NULL);

SELECT * FROM SQL_AUTO_COMPLETE('CREATE TY') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('CREATE TYPE my_type AS ENU') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('CREATE TYPE my_type AS TIME WITH TI') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('CREATE TYPE my_type AS ROW(ts TIMESTAMP WITH TIME ZON') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('DRO') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('DROP TA') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('DROP VI') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('DROP TABLE IF EX') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('DROP TABLE tbl CAS') LIMIT 1;

CREATE TABLE my_table (my_column INT);

SELECT * FROM SQL_AUTO_COMPLETE('DROP TABLE my_') LIMIT 1;

CREATE SCHEMA my_schema;

CREATE TABLE my_schema.table_in_schema (my_column INT);

SELECT * FROM SQL_AUTO_COMPLETE('DROP TABLE my_s') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('DROP TABLE my_schema.t') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('SELECT NULL FR') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('SELECT CAST(a AS INTE') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('SELECT a::INTE') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('SELECT col IS DIST') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('SELECT col IS DISTINCT FRO') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('SELECT col COLL') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('SELECT col BETW') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('SELECT CASE WH') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('SELECT sum(42) IS NOT NUL') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('SELECT sum(disti') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('SELECT sum(a, b orde') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('SELECT sum(a) filt') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('SELECT CASE WHEN a=1 THEN 1 WHEN a=2 THEN 2 WHEN a=3 THEN 3 END FR') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('SELECT col[1:2] FR') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('SELECT col BETWEEN 1 AND 2, col > col2, col AND (col2 OR col3), col4 IS NOT DISTINCT FROM col5, col6 IN (SELECT * FROM tbl) FR') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('SELECT 42, 83.5, -125, 1.25e375, [1, 2, 3, 4], {''name'': 42}, ARRAY[col, col2 + 1] FR') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('SELECT a::DECIMAL(42), b::INT[3], []::INT[][][], d::ROW(i INT[], c ROW(d INTE') LIMIT 1;

CREATE SCHEMA my_catalog_entry;

CREATE TABLE my_catalog_entry (i INT);

SELECT * FROM SQL_AUTO_COMPLETE('FROM my_c') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('INS') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('INSERT IN') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('INSERT INTO tbl VAL') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('INSERT INTO tbl(c1, c2) VAL') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('INSERT INTO tbl(c1, c2) SEL') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('INSERT OR IG') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('INSERT OR REP') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('SEL') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('WI') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('SELECT * FR') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('SELECT * FROM tbl WH') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('SELECT * FROM tbl A') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('SELECT * FROM tbl OR') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('SELECT * FROM tbl ORDER B') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('SELECT * FROM tbl ORDER BY AL') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('SELECT * FROM tbl GR') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('SELECT * FROM tbl GROUP B') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('SELECT * FROM tbl GROUP BY AL') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('SELECT * FROM tbl GROUP BY ALL HAV') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('SELECT * FROM tbl LIM') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('SELECT * FROM tbl LIMIT 5 OF') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('SELECT * FROM tbl INN') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('SELECT * FROM tbl INNER JO') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('SELECT * FROM tbl JOIN tbl2 USING (i) WH') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('SELECT * FROM tbl LEF') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('SELECT * FROM tbl LEFT OUT') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('SELECT * FROM tbl NAT') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('SELECT * FROM tbl NATURAL FU') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('SELECT * FROM tbl NATURAL FULL OUT') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('SELECT * FROM tbl POS') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('SELECT * FROM tbl NATURAL JOIN tbl2 WH') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('SELECT * FROM tbl NATURAL JOIN tbl2 NAT') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('SELECT * FROM tbl JOIN tbl2 US') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('SELECT * FROM tbl, tbl2 WH') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('SELECT * FROM tbl, tbl2 LEFT OUT') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('FR') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('FROM tbl SEL') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('FROM tbl OR') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('SELECT * FROM tbl UN') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('SELECT * FROM tbl UNION AL') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('SELECT * FROM tbl EX') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('SELECT * FROM tbl INT') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('SELECT * FROM tbl UNION ALL SEL') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('SELECT * FROM tbl QUAL') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('SELECT * FROM tbl QUALIFY row_number() OVER () ORD') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('SELECT col=''world'' FR') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('SELECT col="quoted col2" FR') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('SELECT "quoted col1"="quoted col2" + "quoted col3" FR') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('SELECT ''ORDER'' "WHERE" FR') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('SELECT ''OR''''DER'' "WHE""RE" FR') LIMIT 1;

CREATE TABLE my_table (my_column INT);

SELECT * FROM SQL_AUTO_COMPLETE('SELECT my_') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('UP') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('UPDATE my_table SET m') LIMIT 1;

CREATE TABLE MyTable (MyColumn TEXT);

SELECT * FROM SQL_AUTO_COMPLETE('SELECT My') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('DESCR') LIMIT 1;

CREATE TABLE my_table (my_column INT);

SELECT * FROM SQL_AUTO_COMPLETE('SHOW my_') LIMIT 1;

CREATE SCHEMA my_schema;

CREATE TABLE my_schema.table_in_schema (my_column INT);

SELECT * FROM SQL_AUTO_COMPLETE('SHOW my_s') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('DESCRIBE my_schema.t') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('COPY tbl FROM ''data/parq') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('COPY tbl FROM ''data/csv/all_quote') LIMIT 1;

CALL dbgen(sf=0);

SELECT * FROM SQL_AUTO_COMPLETE('SELECT l_ord') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('SELECT 1 + l_ord') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('SELECT min(l_ord') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('SELECT min(42, l_ord') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('SELECT ''test_string'' LIKE l_c') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('SELECT l_orderkey FROM lin') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('SELECT l_orderkey FROM lineitem, ord') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('SELECT l_orderkey FROM lineitem JOIN ord') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('SELECT (SELECT SUM(l_orderkey) FROM lineit') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('SELECT * FROM (FROM lineit') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('INSERT INTO lin') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('DROP TABLE lin') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('COPY lin') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('DROP TABLE na') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('SELECT * FROM partsupp JOIN supplier USING (ps_su') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('
SELECT
nation,
o_year,
sum(amount) AS sum_profit
FROM (
SELECT
n_name AS nation,
extract(year FROM o_orderdate) AS o_year,
l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity AS amount
FROM
part,
supplier,
lineitem,
partsupp,
orders,
nation
WHERE
s_suppkey = l_suppkey
AND ps_suppkey = l_suppkey
AND ps_partkey = l_partkey
AND p_partkey = l_partkey
AND o_orderkey = l_orderkey
AND s_nationkey = n_nat') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('
SELECT
l_returnflag,
l_linestatus,
sum(l_quantity) AS sum_qty,
sum(l_extendedprice) AS sum_base_price,
sum(l_extendedprice * (1 - l_discount)) AS sum_disc_price,
sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) AS sum_charge,
avg(l_quantity) AS avg_qty,
avg(l_extendedprice) AS avg_price,
avg(l_discount) AS avg_disc,
count(*) AS count_order
FROM
lineitem
WHERE
l_shipdate <= CAST(''1998-09-02'' AS date)
GROUP BY
l_ret') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('
SELECT
nation,
o_year,
sum(amount) AS sum_profit
FROM (
SELECT
n_name AS nation,
extract(year FROM o_orderdate) AS o_year,
l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity AS amount
FROM
part,
supplier,
line') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('SELECT row_number() OVER (RANG') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('SELECT row_number() OVER (RANGE BETWE') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('SELECT row_number() OVER (RANGE BETWEEN UNBOU') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('SELECT row_number() OVER (RANGE BETWEEN UNBOUNDED PREC') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('SELECT row_number() OVER (RANGE BETWEEN CURRENT ROW AND 5 PREC') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('SELECT row_number() OVER (PART') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('SELECT lag(col1) OVER (PARTITION BY col1, col2 ORD') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('SELECT sum(42) OVER (PARTITION BY col1, col2 ORDER BY col3 ROW') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('SELECT lead(l_orderkey) OVER win FR') LIMIT 1;

SELECT * FROM SQL_AUTO_COMPLETE('SELECT lead(l_orderkey) OVER (win) FROM tbl WINDOW win AS (PART') LIMIT 1;

PRAGMA enable_verification;

SELECT BASE64(ENCODE(''));

SELECT BASE64(ENCODE('a'));

SELECT BASE64(ENCODE('ab'));

SELECT BASE64(ENCODE('abc'));

SELECT BASE64(ENCODE('üäabcdef'));

SELECT BASE64(ENCODE('iJWERiuhjruhwuiehr8493231'));

SELECT BASE64(ENCODE('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890'));

SELECT TO_BASE64(ENCODE('base64 encoded string'));

SELECT FROM_BASE64(BASE64(ENCODE('')));

SELECT FROM_BASE64(BASE64(ENCODE('a')));

SELECT FROM_BASE64(BASE64(ENCODE('ab')));

SELECT FROM_BASE64(BASE64(ENCODE('abc')));

SELECT FROM_BASE64(BASE64(ENCODE('iJWERiuhjruhwuiehr8493231')));

SELECT FROM_BASE64(BASE64(ENCODE('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890')));

SELECT FROM_BASE64('AAAA');

SELECT FROM_BASE64('ab');

SELECT FROM_BASE64('üab');

PRAGMA enable_verification;

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (1), (2), (3), (NULL);

SELECT * FROM integers ORDER BY CREATE_SORT_KEY(i, 'ASC NULLS LAST');

SELECT * FROM integers ORDER BY CREATE_SORT_KEY(i, 'ASC NULLS FIRST');

SELECT * FROM integers ORDER BY CREATE_SORT_KEY(i, 'DESC NULLS LAST');

SELECT * FROM integers ORDER BY CREATE_SORT_KEY(i, 'DESC NULLS FIRST');

CREATE TABLE varchars (v TEXT);

INSERT INTO varchars VALUES ('hello'), ('hello' || CHR(0) || CHR(0)), ('world'), (''), (NULL);

SELECT * FROM varchars ORDER BY CREATE_SORT_KEY(v, 'ASC NULLS LAST');

SELECT * FROM varchars ORDER BY CREATE_SORT_KEY(v, 'ASC NULLS FIRST');

SELECT * FROM varchars ORDER BY CREATE_SORT_KEY(v, 'DESC NULLS LAST');

SELECT * FROM varchars ORDER BY CREATE_SORT_KEY(v, 'DESC NULLS FIRST');

CREATE TABLE int_list (l INT[]);

INSERT INTO int_list VALUES ([1, 2, 3]), ([]), ([1]), ([2]), ([NULL]), (NULL);

SELECT l FROM int_list ORDER BY CREATE_SORT_KEY(l, 'ASC NULLS LAST');

SELECT l FROM int_list ORDER BY CREATE_SORT_KEY(l, 'DESC NULLS LAST');

SELECT l FROM int_list ORDER BY CREATE_SORT_KEY(l, 'ASC NULLS FIRST');

SELECT l FROM int_list ORDER BY CREATE_SORT_KEY(l, 'DESC NULLS FIRST');

SELECT l FROM int_list ORDER BY CREATE_SORT_KEY(l, 'DESC NULLS FIRST');

INSERT INTO structs VALUES ({'i': 42, 'v': 'hello'}), ({'i': 42, 'v': 'hello' || CHR(0)}), ({'i': 43, 'v': ''}), (NULL), ({'i': 42, 'v': NULL}), ({'i': NULL, 'v': ''});

SELECT * FROM structs ORDER BY CREATE_SORT_KEY(s, 'ASC NULLS LAST');

SELECT s.i, s.v FROM structs ORDER BY CREATE_SORT_KEY(s.i, 'ASC NULLS LAST', s.v, 'ASC NULLS LAST');

SELECT * FROM structs ORDER BY CREATE_SORT_KEY(s, 'DESC NULLS FIRST');

SELECT s.i, s.v FROM structs ORDER BY CREATE_SORT_KEY(s.i, 'DESC NULLS FIRST', s.v, 'DESC NULLS FIRST');

SELECT s.i, s.v FROM structs ORDER BY CREATE_SORT_KEY(s.i, 'DESC NULLS FIRST', s.v, 'DESC NULLS FIRST');

INSERT INTO list_of_structs VALUES ([{'i': 42, 'v': 'hello'}]), ([]), ([{'i': 42, 'v': 'hello'}, {'i': 84, 'v': ''}]), ([{'i': 43, 'v': ''}]), (NULL), ([NULL]), ([{'i': 42, 'v': NULL}]), ([{'i': NULL, 'v': ''}]), ([{'i': 42, 'v': 'hello'}, {'i': 84, 'v': CHR(0)}]), ([{'i': 42, 'v': 'hello'}, NULL, {'i': 84, 'v': ''}]);

SELECT * FROM list_of_structs ORDER BY CREATE_SORT_KEY(s, 'ASC NULLS LAST');

SELECT * FROM list_of_structs ORDER BY CREATE_SORT_KEY(s, 'DESC NULLS FIRST');

CREATE TABLE nested_lists (s INT[][]);

INSERT INTO nested_lists VALUES ([]), ([[], []]), (NULL), ([NULL]), ([[NULL]]), ([[42, 84]]), ([[42], [84]]), ([[42], NULL, [84]]), ([[42], [NULL], [84]]), ([[1, 2, 3, 4, 5, 6, 7, 8, 9]]);

SELECT * FROM nested_lists ORDER BY CREATE_SORT_KEY(s, 'ASC NULLS LAST');

SELECT * FROM nested_lists ORDER BY CREATE_SORT_KEY(s, 'DESC NULLS FIRST');

CREATE TABLE blobs (b BLOB, c BLOB);

INSERT INTO blobs VALUES (NULL, NULL), ('hello\x00\x00\x00\x00\x00', NULL), ('hello', 'world'), ('hello\x01\x01\x01', 'world'), ('', ''), ('hello\x00\x00\x00\x00\x00', 'world'), ('hello\x00', NULL);

SELECT b FROM blobs ORDER BY CREATE_SORT_KEY(b, 'ASC NULLS LAST');

SELECT b FROM blobs ORDER BY CREATE_SORT_KEY(b, 'DESC NULLS FIRST');

SELECT * FROM blobs ORDER BY CREATE_SORT_KEY(b, 'ASC NULLS LAST', c, 'ASC NULLS LAST');

SELECT * FROM blobs ORDER BY CREATE_SORT_KEY(b, 'DESC NULLS FIRST', c, 'DESC NULLS FIRST');

CREATE TABLE arrays (l INT[3]);

INSERT INTO arrays VALUES ([1, 2, 3]), (NULL), ([NULL, NULL, NULL]), ([1, NULL, 3]), ([2, 3, 4]);

SELECT l FROM arrays ORDER BY CREATE_SORT_KEY(l, 'ASC NULLS LAST');

SELECT l FROM arrays ORDER BY CREATE_SORT_KEY(l, 'DESC NULLS FIRST');

PRAGMA enable_verification;

SELECT ENCODE('ü');

SELECT DECODE(ENCODE('ü'));

SELECT DECODE(CAST('\xF0\x9F\xA6\x86' AS BLOB));

SELECT DECODE(CAST('\x00' AS BLOB));

SELECT DECODE(CAST('\xFF' AS BLOB));

SELECT DECODE(ENCODE(a)) || a FROM (VALUES ('hello'), ('world')) AS tbl(a);

PRAGMA enable_verification;

SELECT ARRAY_SLICE(CAST('\x00\x01\x02\x03\x04\x05' AS BLOB), 2, 4);

SELECT ARRAY_SLICE(CAST('\x00\x01\x02\x03\x04\x05' AS BLOB), 0, 2);

SELECT ARRAY_SLICE(CAST('\x00\x01\x02\x03\x04\x05' AS BLOB), 0, 2);

SELECT ARRAY_SLICE(CAST('\x00\x01\x02\x03\x04\x05' AS BLOB), 4, 10);

SELECT OCTET_LENGTH(ARRAY_SLICE(CAST('\x00\x01\x02\x03\x04\x05' AS BLOB), 4, 3));

SELECT ARRAY_SLICE(CAST('\x00\x01\x02\x03\x04\x05' AS BLOB), 2, -2);

SELECT ARRAY_SLICE(CAST('\x00\x01\x02\x03\x04\x05' AS BLOB), -4, -2);

SELECT ARRAY_SLICE(CAST('\x00\xF0\x9F\xA6\x86\x00' AS BLOB), 2, 3);

SELECT ARRAY_SLICE(CAST('\x00\xF0\x9F\xA6\x86\x00' AS BLOB), 4, 6);

SELECT ARRAY_SLICE(CAST(NULL AS BLOB), 4, 6);

SELECT ARRAY_SLICE('hello world', 1, 8, 2);

PRAGMA enable_verification;

SELECT CAST('aaa\x80' AS BLOB) || CAST('aaa\x80' AS BLOB);

SELECT TYPEOF(CAST('aaa\x80' AS BLOB) || CAST('aaa\x80' AS BLOB));

SELECT CONCAT(CAST('aaa\x80' AS BLOB), CAST('aaa\x80' AS BLOB));

SELECT TYPEOF(CONCAT(CAST('aaa\x80' AS BLOB), CAST('aaa\x80' AS BLOB)));

PRAGMA enable_verification;

CREATE TABLE dates (d DATE);

INSERT INTO dates VALUES (CAST('1992-01-01' AS DATE));

SELECT CAST('2008-12-25' AS DATE) + INTERVAL (INTERVAL '5' DAY) DAY AS five_days_later;

SELECT CAST('2008-12-25 00:00:00' AS TIMESTAMP) + INTERVAL (INTERVAL '5' DAY) DAY AS five_days_later;

PRAGMA enable_verification;

CREATE TABLE dates (d DATE);

SELECT EXTRACT(YEAR FROM d) FROM dates;

SELECT EXTRACT(MONTH FROM d) FROM dates;

SELECT EXTRACT(DAY FROM d) FROM dates;

SELECT EXTRACT(DECADE FROM d) FROM dates;

SELECT EXTRACT(CENTURY FROM d) FROM dates;

SELECT EXTRACT(MILLENNIUM FROM d) FROM dates;

SELECT EXTRACT(MICROSECONDS FROM d) FROM dates;

SELECT EXTRACT(MILLISECONDS FROM d) FROM dates;

SELECT EXTRACT(SECOND FROM d) FROM dates;

SELECT EXTRACT(MINUTE FROM d) FROM dates;

SELECT EXTRACT(HOUR FROM d) FROM dates;

SELECT EXTRACT(EPOCH FROM d) FROM dates;

SELECT EXTRACT(DOW FROM d) FROM dates;

SELECT EXTRACT(ISODOW FROM d) FROM dates;

SELECT EXTRACT(WEEK FROM d) FROM dates;

SELECT EXTRACT(DOY FROM d) FROM dates;

SELECT EXTRACT(QUARTER FROM d) FROM dates;

SELECT YEARWEEK(d) FROM dates;

SELECT DAYOFMONTH(d) FROM dates;

SELECT WEEKDAY(d) FROM dates;

SELECT WEEKOFYEAR(d) FROM dates;

PRAGMA disable_verification;

INSERT INTO dates VALUES (CAST('1992-01-01' AS DATE)), (CAST('2000-12-31' AS DATE));

SELECT STATS(EXTRACT(YEAR FROM d)) FROM dates LIMIT 1;

SELECT STATS(EXTRACT(MONTH FROM d)) FROM dates LIMIT 1;

SELECT STATS(EXTRACT(DAY FROM d)) FROM dates LIMIT 1;

SELECT STATS(EXTRACT(DECADE FROM d)) FROM dates LIMIT 1;

SELECT STATS(EXTRACT(CENTURY FROM d)) FROM dates LIMIT 1;

SELECT STATS(EXTRACT(MILLENNIUM FROM d)) FROM dates LIMIT 1;

SELECT STATS(EXTRACT(MICROSECONDS FROM d)) FROM dates LIMIT 1;

SELECT STATS(EXTRACT(MILLISECONDS FROM d)) FROM dates LIMIT 1;

SELECT STATS(EXTRACT(SECOND FROM d)) FROM dates LIMIT 1;

SELECT STATS(EXTRACT(MINUTE FROM d)) FROM dates LIMIT 1;

SELECT STATS(EXTRACT(HOUR FROM d)) FROM dates LIMIT 1;

SELECT STATS(EXTRACT(DOW FROM d)) FROM dates LIMIT 1;

SELECT STATS(EXTRACT(ISODOW FROM d)) FROM dates LIMIT 1;

SELECT STATS(EXTRACT(WEEK FROM d)) FROM dates LIMIT 1;

SELECT STATS(EXTRACT(DOY FROM d)) FROM dates LIMIT 1;

SELECT STATS(EXTRACT(QUARTER FROM d)) FROM dates LIMIT 1;

SELECT STATS(YEARWEEK(d)) FROM dates LIMIT 1;

SELECT STATS(DAYOFMONTH(d)) FROM dates LIMIT 1;

SELECT STATS(WEEKDAY(d)) FROM dates LIMIT 1;

SELECT STATS(WEEKOFYEAR(d)) FROM dates LIMIT 1;

PRAGMA enable_verification;

CREATE TABLE t1 (date TIMESTAMP);

INSERT INTO t1 VALUES ('2016-12-16T00:00:00.000Z');

INSERT INTO t1 VALUES ('2020-02-17T23:59:59.998Z');

INSERT INTO t1 VALUES ('2020-02-17T23:59:59.999Z');

INSERT INTO t1 VALUES ('2020-02-18T00:00:00.000Z');

SELECT * FROM t1 WHERE (DATE_TRUNC('DAY', T1.date) < (CAST('2020-02-17T23:59:59.999Z' AS TIMESTAMP))) ORDER BY 1;

PRAGMA enable_verification;

CREATE TABLE T1 (A0 TIMESTAMP);

SELECT DATE_TRUNC('DAY', A0) FROM T1;

SELECT DATE_TRUNC('MILLISECONDS', CAST('-2005205-7-28' AS DATE));

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

CREATE TABLE dates (d DATE, s TEXT);

INSERT INTO dates VALUES ('1992-01-01', 'year'), ('1992-03-03', 'month'), ('1992-05-05', 'day'), ('2022-01-01', 'isoyear'), ('044-03-15 (BC)', 'millennium'), ('infinity', 'century'), ('-infinity', 'decade'), (NULL, 'weekday');

INSERT INTO dates VALUES ('1992-01-01', 'year'), ('1992-03-03', 'month'), ('1992-05-05', 'day'), ('2022-01-01', 'isoyear'), ('044-03-15 (BC)', 'millennium'), ('infinity', 'century'), ('-infinity', 'decade'), (NULL, 'weekday');

INSERT INTO specifiers VALUES ('${partcode}');
endloop;

SELECT DATE_PART(CAST(NULL AS TEXT), CAST(NULL AS TIMESTAMP)) FROM dates;

SELECT DATE_PART(s, CAST(NULL AS TIMESTAMP)) FROM dates;

SELECT DATE_PART(NULL, d) FROM dates;

SELECT DATE_PART(s, CAST('1992-01-01' AS DATE)) FROM dates;

SELECT DATE_PART('year', d) FROM dates;

SELECT DATE_PART('isoyear', d) FROM dates;

SELECT DATE_PART(s, d) FROM dates;

SELECT DATE_PART('era', d) FROM dates;

SELECT DATE_PART('julian', d) FROM dates;

SELECT DATE_PART('timezone', d) FROM dates;

SELECT DATE_PART('timezone_hour', d) FROM dates;

SELECT DATE_PART('timezone_minute', d) FROM dates;

SELECT DATE_PART(NULL, CAST(d AS TIMESTAMP)) FROM dates;

SELECT DATE_PART(s, CAST('1992-01-01' AS TIMESTAMP)) FROM dates;

SELECT DATE_PART('year', CAST(d AS TIMESTAMP)) FROM dates;

SELECT DATE_PART('isoyear', CAST(d AS TIMESTAMP)) FROM dates;

SELECT DATE_PART(s, CAST(d AS TIMESTAMP)) FROM dates;

SELECT DATE_PART('era', CAST(d AS TIMESTAMP)) FROM dates;

SELECT DATE_PART('timezone', CAST(d AS TIMESTAMP)) FROM dates;

SELECT DATE_PART('timezone_hour', CAST(d AS TIMESTAMP)) FROM dates;

SELECT DATE_PART('timezone_minute', CAST(d AS TIMESTAMP)) FROM dates;

SELECT DATE_PART('year', CAST(dt AS DATE)) * 10 FROM GENERATE_SERIES(CAST('2050-01-01' AS DATE), CAST('2051-12-31' AS DATE), INTERVAL '1' DAY) AS t(dt) WHERE dt = '2050-12-31';

SELECT TIMEZONE(INTERVAL '4' MINUTE, CAST('12:15:37.123456-08' AS TIMETZ));

SELECT LAST_DAY(CAST('1900-02-12' AS DATE)), LAST_DAY(CAST('1992-02-12' AS DATE)), LAST_DAY(CAST('2000-02-12' AS DATE));

SELECT LAST_DAY(d) FROM dates;

SELECT LAST_DAY(CAST(d AS TIMESTAMP)) FROM dates;

SELECT MONTHNAME(d) FROM dates;

SELECT DAYNAME(d) FROM dates;

SELECT YEARWEEK(d) FROM dates;

SELECT DAYOFMONTH(d) FROM dates;

SELECT WEEKDAY(d) FROM dates;

SELECT WEEKOFYEAR(d) FROM dates;

SELECT JULIAN(d) FROM dates;

SELECT DATE_PART('quarter', CAST('1992-01-20' AS DATE)), DATE_PART('quarter', CAST('1992-02-20' AS DATE)), DATE_PART('quarter', CAST('1992-03-20' AS DATE)), DATE_PART('quarter', CAST('1992-04-20' AS DATE)), DATE_PART('quarter', CAST('1992-05-20' AS DATE)), DATE_PART('quarter', CAST('1992-06-20' AS DATE)), DATE_PART('quarter', CAST('1992-07-20' AS DATE)), DATE_PART('quarter', CAST('1992-08-20' AS DATE)), DATE_PART('quarter', CAST('1992-09-20' AS DATE)), DATE_PART('quarter', CAST('1992-10-20' AS DATE)), DATE_PART('quarter', CAST('1992-11-20' AS DATE)), DATE_PART('quarter', CAST('1992-12-20' AS DATE));

SELECT DATE_PART('quarter', CAST('1992-01-20' AS DATE)), DATE_PART('quarter', CAST('1992-02-20' AS DATE)), DATE_PART('quarter', CAST('1992-03-20' AS DATE)), DATE_PART('quarter', CAST('1992-04-20' AS DATE)), DATE_PART('quarter', CAST('1992-05-20' AS DATE)), DATE_PART('quarter', CAST('1992-06-20' AS DATE)), DATE_PART('quarter', CAST('1992-07-20' AS DATE)), DATE_PART('quarter', CAST('1992-08-20' AS DATE)), DATE_PART('quarter', CAST('1992-09-20' AS DATE)), DATE_PART('quarter', CAST('1992-10-20' AS DATE)), DATE_PART('quarter', CAST('1992-11-20' AS DATE)), DATE_PART('quarter', CAST('1992-12-20' AS DATE));

SELECT d, EPOCH_NS(d) FROM dates WHERE d <> '0044-03-15 (BC)' OR d IS NULL ORDER BY ALL;

SELECT d, EPOCH_US(d) FROM dates ORDER BY ALL;

SELECT d, EPOCH_MS(d) FROM dates ORDER BY ALL;

SELECT d, NANOSECOND(d) FROM dates ORDER BY ALL;

SELECT d, DATE_PART('${partcode}', d) AS p, DATE_PART(['${partcode}'], d) AS st FROM dates WHERE p IS DISTINCT FROM st['${partcode}'];

SELECT d, DATE_PART(['year', 'month', 'day', 'epoch'], d) AS parts FROM dates ORDER BY 1;

SELECT d, DATE_PART(['era', 'millennium', 'century', 'decade', 'quarter'], d) AS parts FROM dates ORDER BY 1;

SELECT d, DATE_PART(['weekday', 'isodow', 'doy', 'julian'], d) AS parts FROM dates ORDER BY 1;

SELECT DATE_PART(['weekday', 'isodow', 'doy', 'julian'], CAST('2022-01-01' AS DATE)) AS parts;

SELECT d, DATE_PART(['isoyear', 'week', 'yearweek'], d) AS parts FROM dates ORDER BY 1;

SELECT d, DATE_PART(['year', 'month', 'day'], d) AS parts FROM dates WHERE s = 'day' ORDER BY 1;

SELECT d, DATE_PART(['${datepart}'], d) AS parts FROM dates ORDER BY 1;

SELECT DATE_PART(['hour', 'minute'], CAST('2023-09-17' AS DATE)) AS parts;

SELECT DATE_PART(['hour', 'minute'], CAST('2023-09-17' AS DATE)) AS parts;

SELECT DATE_PART(['hour', 'minute'], CAST('2023-09-17' AS DATE)) AS parts;

SELECT DATE_PART(['hour', 'minute'], CAST('2023-09-17' AS DATE)) AS parts;

WITH cte AS (SELECT CAST(NULL AS TEXT) AS part FROM RANGE(0, 1)) SELECT DATE_PART(part, CAST('2019-01-06 04:03:02' AS TIMESTAMP)) FROM cte;

PRAGMA enable_verification;

CREATE TABLE dates (d DATE, s TEXT);

CREATE TABLE timestamps (d TIMESTAMP, s TEXT);

INSERT INTO dates VALUES ('1992-12-02', 'year'), ('1993-03-03', 'month'), ('1994-05-05', 'day'), ('2022-01-01', 'isoyear');

INSERT INTO timestamps VALUES ('-infinity', 'year'), ('1992-02-02 02:02:03', 'millennium'), ('1992-02-02 02:02:03', 'century'), ('1992-02-02 02:02:03', 'decade'), ('1992-02-02 02:02:03', 'year'), ('1992-02-02 02:02:03', 'quarter'), ('1992-02-02 02:02:03', 'month'), ('1992-02-02 02:02:03', 'week'), ('1992-02-02 02:02:03', 'day'), ('1992-02-02 02:02:03', 'hour'), ('1992-02-02 02:02:03', 'minute'), ('1992-02-02 02:02:03', 'second'), ('1992-02-02 02:02:03', 'milliseconds'), ('1992-02-02 02:02:03', 'microseconds'), ('infinity', 'month');

SELECT DATE_TRUNC('NULL', CAST(NULL AS TIMESTAMP)) FROM dates;

SELECT DATE_TRUNC('S', CAST(NULL AS TIMESTAMP)) FROM dates;

SELECT DATE_TRUNC('NULL', d) FROM dates;

SELECT DATE_TRUNC('NULL', CAST(NULL AS TIMESTAMP)) FROM timestamps LIMIT 3;

SELECT DATE_TRUNC('S', CAST(NULL AS TIMESTAMP)) FROM timestamps LIMIT 3;

SELECT DATE_TRUNC('NULL', d) FROM timestamps LIMIT 3;

SELECT DATE_TRUNC('MONTH', CAST('1992-02-02' AS DATE)) FROM dates LIMIT 1;

SELECT DATE_TRUNC('S', d) FROM dates;

SELECT DATE_TRUNC('S', d) FROM dates;

SELECT DATE_TRUNC('S', d) FROM dates;

SELECT DATE_TRUNC('MINUTE', CAST('1992-02-02 04:03:02' AS TIMESTAMP)) FROM timestamps LIMIT 1;

SELECT DATE_TRUNC('S', d) FROM timestamps;

SELECT DATE_TRUNC('SECOND', CAST(d AS DATE)) FROM timestamps;

SELECT DATE_TRUNC('WEEK', CAST('2020-01-01 04:03:02' AS TIMESTAMP)) FROM timestamps LIMIT 1;

SELECT DATE_TRUNC('WEEK', CAST('2019-01-06 04:03:02' AS TIMESTAMP)) FROM timestamps LIMIT 1;

SELECT DATE_TRUNC('YEARWEEK', CAST('2020-01-01 04:03:02' AS TIMESTAMP)) FROM timestamps LIMIT 1;

SELECT DATE_TRUNC('YEARWEEK', CAST('2019-01-06 04:03:02' AS TIMESTAMP)) FROM timestamps LIMIT 1;

SELECT DATE_TRUNC('QUARTER', CAST('2020-12-02 04:03:02' AS TIMESTAMP)) FROM timestamps LIMIT 1;

SELECT DATE_TRUNC('QUARTER', CAST('2019-01-06 04:03:02' AS TIMESTAMP)) FROM timestamps LIMIT 1;

SELECT DATE_TRUNC('MILLENNIUM', CAST('1996-01-06 04:03:02' AS TIMESTAMP)) FROM timestamps LIMIT 1;

SELECT DATE_TRUNC('CENTURY', CAST('2019-01-06 04:03:02' AS TIMESTAMP)) FROM timestamps LIMIT 1;

SELECT DATE_TRUNC('DECADE', CAST('2019-01-06 04:03:02' AS TIMESTAMP)) FROM timestamps LIMIT 1;

SELECT DATE_TRUNC('YEAR', CAST('2019-01-06 04:03:02' AS TIMESTAMP)) FROM timestamps LIMIT 1;

SELECT DATE_TRUNC('DAY', CAST('2019-01-06 04:03:02' AS TIMESTAMP)) FROM timestamps LIMIT 1;

SELECT DATE_TRUNC('HOUR', CAST('2019-01-06 04:03:02' AS TIMESTAMP)) FROM timestamps LIMIT 1;

SELECT DATE_TRUNC('MILLISECONDS', CAST('2019-01-06 04:03:02.123456' AS TIMESTAMP)) FROM timestamps LIMIT 1;

SELECT DATE_TRUNC('MICROSECONDS', CAST('2019-01-06 04:03:02.123456' AS TIMESTAMP));

SELECT DATE_TRUNC('EPOCH', CAST('2019-01-06 04:03:02.5' AS TIMESTAMP)) FROM timestamps LIMIT 1;

SELECT CAST(d AS DATE), CAST(DATE_TRUNC('ISOYEAR', d) AS DATE) FROM GENERATE_SERIES(CAST('2000-01-01' AS TIMESTAMP), CAST('2023-01-01' AS TIMESTAMP), INTERVAL '1' YEAR) AS tbl(d);

SELECT DATE_TRUNC('DUCK', CAST('2019-01-06 04:03:02' AS TIMESTAMP)) FROM timestamps LIMIT 1;

PRAGMA disable_verification;

SELECT STATS(DATE_TRUNC('YEAR', d)) FROM dates LIMIT 1;

SELECT STATS(DATE_TRUNC('QUARTER', d)) FROM dates LIMIT 1;

SELECT STATS(DATE_TRUNC('MONTH', d)) FROM dates LIMIT 1;

SELECT STATS(DATE_TRUNC('DAY', d)) FROM dates LIMIT 1;

SELECT STATS(DATE_TRUNC('${DAYPART}', d)) FROM timestamps LIMIT 1;

WITH cte AS (SELECT CAST(NULL AS TEXT) AS part FROM RANGE(0, 1)) SELECT DATE_TRUNC('PART', CAST('2019-01-06 04:03:02' AS TIMESTAMP)) FROM cte;

PRAGMA enable_verification;

CREATE TABLE dates (i DATE);

INSERT INTO dates VALUES ('1993-08-14'), (NULL);

SELECT EXTRACT(YEAR FROM i) FROM dates;

SELECT EXTRACT(MONTH FROM i) FROM dates;

SELECT EXTRACT(QUARTER FROM i) FROM dates;

SELECT EXTRACT(DAY FROM i) FROM dates;

SELECT EXTRACT(DECADE FROM i) FROM dates;

SELECT EXTRACT(CENTURY FROM i) FROM dates;

SELECT EXTRACT(DOW FROM i) FROM dates;

SELECT EXTRACT(DOY FROM i) FROM dates;

SELECT EXTRACT(EPOCH FROM i) FROM dates;

SELECT EXTRACT(ISODOW FROM i) FROM dates;

SELECT EXTRACT(WEEK FROM i) FROM dates;

SELECT EXTRACT(YEARWEEK FROM i) FROM dates;

SELECT EXTRACT(MILLENNIUM FROM i) FROM dates;

SELECT EXTRACT(SECOND FROM i) FROM dates;

SELECT EXTRACT(MINUTE FROM i) FROM dates;

SELECT EXTRACT(HOUR FROM i) FROM dates;

SELECT EXTRACT(MILLISECONDS FROM i) FROM dates;

SELECT EXTRACT(MICROSECOND FROM i) FROM dates;

SELECT EXTRACT(CENTURY FROM CAST('2000-10-10' AS DATE));

SELECT EXTRACT(CENTURY FROM CAST('2001-10-10' AS DATE));

SELECT EXTRACT(MILLENNIUM FROM CAST('2000-10-10' AS DATE));

SELECT EXTRACT(MILLENNIUM FROM CAST('2001-10-10' AS DATE));

SELECT EXTRACT(DOW FROM CAST('1970-01-01' AS DATE) + 0);

SELECT EXTRACT(DOW FROM CAST('1970-01-01' AS DATE) - 0);

SELECT EXTRACT(DOW FROM CAST('1970-01-01' AS DATE) + 1);

SELECT EXTRACT(DOW FROM CAST('1970-01-01' AS DATE) - 1);

SELECT EXTRACT(DOW FROM CAST('1970-01-01' AS DATE) + 2);

SELECT EXTRACT(DOW FROM CAST('1970-01-01' AS DATE) - 2);

SELECT EXTRACT(DOW FROM CAST('1970-01-01' AS DATE) + 3);

SELECT EXTRACT(DOW FROM CAST('1970-01-01' AS DATE) - 3);

SELECT EXTRACT(DOW FROM CAST('1970-01-01' AS DATE) + 4);

SELECT EXTRACT(DOW FROM CAST('1970-01-01' AS DATE) - 4);

SELECT EXTRACT(DOW FROM CAST('1970-01-01' AS DATE) + 5);

SELECT EXTRACT(DOW FROM CAST('1970-01-01' AS DATE) - 5);

SELECT EXTRACT(DOW FROM CAST('1970-01-01' AS DATE) + 6);

SELECT EXTRACT(DOW FROM CAST('1970-01-01' AS DATE) - 6);

SELECT EXTRACT(DOW FROM CAST('1793-05-26' AS DATE));

SELECT EXTRACT(ISODOW FROM CAST('1793-05-26' AS DATE));

SELECT EXTRACT(WEEK FROM CAST('2005-01-01' AS DATE));

SELECT EXTRACT(WEEK FROM CAST('2006-01-01' AS DATE));

SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE));

SELECT EXTRACT(WEEK FROM CAST('2008-01-01' AS DATE));

SELECT EXTRACT(WEEK FROM CAST('2009-01-01' AS DATE));

SELECT EXTRACT(WEEK FROM CAST('2010-01-01' AS DATE));

SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 0);

SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 7);

SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 14);

SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 21);

SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 28);

SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 35);

SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 42);

SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 49);

SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 56);

SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 63);

SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 70);

SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 77);

SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 84);

SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 91);

SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 98);

SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 105);

SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 112);

SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 119);

SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 126);

SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 133);

SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 140);

SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 147);

SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 154);

SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 161);

SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 168);

SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 175);

SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 182);

SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 189);

SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 196);

SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 203);

SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 210);

SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 217);

SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 224);

SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 231);

SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 238);

SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 245);

SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 252);

SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 259);

SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 266);

SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 273);

PRAGMA enable_verification;

SELECT CAST('1992-01-01' AS DATE) + INTERVAL (i) DAYS, MONTH(CAST('1992-01-01' AS DATE) + INTERVAL (i) DAYS) FROM RANGE(0, 366) AS tbl(i);

SELECT CAST('1993-01-01' AS DATE) + INTERVAL (i) DAYS, MONTH(CAST('1993-01-01' AS DATE) + INTERVAL (i) DAYS) FROM RANGE(0, 366) AS tbl(i);

PRAGMA enable_verification;

CREATE TABLE dates AS SELECT CAST('1970-01-01' AS DATE) + CAST(CONCAT(i, ' years') AS INTERVAL) AS d FROM RANGE(0, 430) AS tbl(i);

CREATE TABLE dates2 AS SELECT CAST('1970-01-01' AS DATE) + CAST(CONCAT(i * 6, ' months') AS INTERVAL) AS d FROM RANGE(0, 200) AS tbl(i);

SELECT EXTRACT(YEAR FROM d) FROM dates ORDER BY 1;

SELECT EXTRACT(YEAR FROM d) FROM dates2 ORDER BY 1;

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

SELECT STRFTIME(CAST('1992-01-01' AS DATE), '%Y');

SELECT STRFTIME('%Y', CAST('1992-01-01' AS DATE));

SELECT STRFTIME('%Y', CAST('1992-01-01' AS TIMESTAMP));

SELECT STRFTIME(CAST('1992-01-01' AS DATE), '(%Y)');

SELECT STRFTIME(CAST('1992-01-01' AS DATE), '%% %Y %%');

SELECT STRFTIME(CAST('1992-01-01' AS DATE), '%%%%%% %Y %%%%%%');

SELECT STRFTIME(CAST('1992-02-01' AS DATE), '%d/%m/%Y');

SELECT STRFTIME(CAST('1992-02-01' AS DATE), '%Y %Y %Y %Y');

CREATE TABLE dates (d DATE);
INSERT INTO dates VALUES ('1992-01-01'), ('1993-03-20'), (NULL);

SELECT STRFTIME(d, '%d/%m/%Y') FROM dates ORDER BY d;

SELECT STRFTIME(CAST(NULL AS DATE), '%d/%m/%Y') FROM dates ORDER BY d;

SELECT STRFTIME(d, NULL) FROM dates ORDER BY d;

SELECT STRFTIME(CAST(NULL AS TIMESTAMP), NULL) FROM RANGE(0, 3);

SELECT STRFTIME(CAST(NULL AS TIMESTAMP), '%%%%%% %Y %%%%%%') FROM RANGE(0, 3);

SELECT STRFTIME(CAST('1992-01-01' AS DATE), 'hello world');

SELECT STRFTIME(CAST('2019-01-23' AS DATE), '42');

SELECT STRFTIME(CAST('2019-01-23' AS DATE), '42');

SELECT STRFTIME(CAST('2019-01-23' AS DATE), '42');

SELECT STRFTIME(d, CAST(d AS TEXT)) FROM dates ORDER BY d;

SELECT STRFTIME(CAST('1992-01-01' AS DATE), '%');

SELECT STRFTIME(CAST('1992-01-01' AS DATE), '%R');

SELECT STRFTIME(STRPTIME('023', '%g'), '%g'), STRFTIME(STRPTIME('0', '%g'), '%g'), STRFTIME(STRPTIME('000', '%g'), '%g'), STRFTIME(STRPTIME('999', '%g'), '%g');

SELECT STRPTIME('-1', '%g');

SELECT STRPTIME('1000', '%g');

SELECT STRFTIME('%Y', '1992-01-01');

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

CREATE TABLE dates (d DATE);
INSERT INTO dates VALUES ('1992-01-01'), ('1993-03-20'), ('2020-08-09'), ('2020-08-10'), (NULL);

SELECT STRFTIME(d, '%a') FROM dates ORDER BY d;

SELECT STRFTIME(d, '%A') FROM dates ORDER BY d;

SELECT STRFTIME(d, '%w') FROM dates ORDER BY d;

SELECT STRFTIME(d, '%u') FROM dates ORDER BY d;

SELECT STRFTIME(d, '%d') FROM dates ORDER BY d;

SELECT STRFTIME(d, '%-d') FROM dates ORDER BY d;

SELECT STRFTIME(d, '%b') FROM dates ORDER BY d;

SELECT STRFTIME(d, '%h') FROM dates ORDER BY d;

SELECT STRFTIME(d, '%B') FROM dates ORDER BY d;

SELECT STRFTIME(d, '%m') FROM dates ORDER BY d;

SELECT STRFTIME(d, '%-m') FROM dates ORDER BY d;

SELECT STRFTIME(d, '%y') FROM dates ORDER BY d;

SELECT STRFTIME(d, '%-y') FROM dates ORDER BY d;

SELECT STRFTIME(CAST('2001-01-01' AS DATE), '%-y');

SELECT STRFTIME(d, '%Y') FROM dates ORDER BY d;

SELECT STRFTIME(d, '%G') FROM dates ORDER BY d;

SELECT STRFTIME(d, '%H') FROM dates ORDER BY d;

SELECT STRFTIME(d, '%-H') FROM dates ORDER BY d;

SELECT STRFTIME(d, '%I') FROM dates ORDER BY d;

SELECT STRFTIME(d, '%-I') FROM dates ORDER BY d;

SELECT STRFTIME(d, '%p') FROM dates ORDER BY d;

SELECT STRFTIME(d, '%M') FROM dates ORDER BY d;

SELECT STRFTIME(d, '%-M') FROM dates ORDER BY d;

SELECT STRFTIME(d, '%S') FROM dates ORDER BY d;

SELECT STRFTIME(d, '%-S') FROM dates ORDER BY d;

SELECT STRFTIME(d, '%f') FROM dates ORDER BY d;

SELECT STRFTIME(d, '%z') FROM dates ORDER BY d;

SELECT STRFTIME(d, '%Z') FROM dates ORDER BY d;

SELECT STRFTIME(d, '%j') FROM dates ORDER BY d;

SELECT STRFTIME(d, '%-j') FROM dates ORDER BY d;

SELECT STRFTIME(d, '%U') FROM dates ORDER BY d;

SELECT STRFTIME(d, '%W') FROM dates ORDER BY d;

SELECT STRFTIME(d, '%V') FROM dates ORDER BY d;

SELECT STRFTIME(d, '%c') FROM dates ORDER BY d;

SELECT STRFTIME(d, 'XX%cXX') FROM dates ORDER BY d;

SELECT STRFTIME(d, '%x') FROM dates ORDER BY d;

SELECT STRFTIME(d, '%X') FROM dates ORDER BY d;

SELECT STRFTIME(d, 'XX%cXX%xXX%XXX') FROM dates ORDER BY d;

SELECT STRFTIME(CAST('-99999-01-01' AS DATE), '%Y');

SELECT STRFTIME(CAST('99999-01-01' AS DATE), '%Y');

SELECT STRFTIME(CAST('99999-01-01' AS DATE), '%y');

SELECT STRFTIME(CAST('-99999-01-01' AS DATE), '%y');

SELECT STRFTIME(CAST('-4869706-10-11' AS DATE), '%-yi');

SELECT STRFTIME(CAST('-99999-01-01' AS DATE), CAST(RANDOM() AS TEXT));

PRAGMA enable_verification;

CREATE TABLE dates (w INTERVAL, d DATE, shift INTERVAL, origin DATE);

INSERT INTO dates VALUES ('10 days', '-infinity', '0 days', '1970-01-05'), ('10 days', '3000-01-02 (BC)', '3 days', '3000-01-01 (BC)'), ('2 months', '1024-04-10 (BC)', '10 days', '1024-03-01 (BC)'), ('10 days', '0044-06-15 (BC)', '6 days', '0044-02-01 (BC)'), ('10 days', '0794-11-15', '1 week', '0790-11-01'), ('10 days', '1700-01-01', '0 days', '1700-01-05'), ('1 week', '1832-05-03', '0 days', '1970-05-05'), ('10 days', '1897-07-05', '2 days', '1970-06-07'), ('10 days', '1906-02-08', '-2 days', '1970-10-03'), ('2 months', '1946-09-14', '0 months', '1970-07-05'), ('2 months', '2000-01-01', '1 month 1 week', '1970-05-01'), ('2 months', '2000-01-03', '-1 month 1 week', '1970-08-20'), ('2 year', '2004-05-20', '6 months', '1970-12-31'), ('2 year', '2032-12-06', '-6 months', '1969-07-01'), ('10 days', 'infinity', '0 days', '1970-01-01');

SELECT d, TIME_BUCKET(CAST('3 days' AS INTERVAL), d) FROM dates;

SELECT d, TIME_BUCKET(CAST('3 years' AS INTERVAL), d) FROM dates;

SELECT d, TIME_BUCKET(CAST(NULL AS INTERVAL), d) FROM dates;

SELECT w, d, TIME_BUCKET(w, d) FROM dates;

SELECT d, TIME_BUCKET(CAST('4 days' AS INTERVAL), d, CAST('6 hours' AS INTERVAL)) FROM dates;

SELECT d, TIME_BUCKET(CAST('2 weeks' AS INTERVAL), d, CAST('6 days' AS INTERVAL)) FROM dates;

SELECT d, TIME_BUCKET(CAST('3 months' AS INTERVAL), d, CAST('6 days' AS INTERVAL)) FROM dates;

SELECT d, TIME_BUCKET(CAST(NULL AS INTERVAL), d, CAST('6 days' AS INTERVAL)) FROM dates;

SELECT TIME_BUCKET(CAST('3 months' AS INTERVAL), CAST(NULL AS DATE), CAST('6 days' AS INTERVAL)) FROM dates;

SELECT d, TIME_BUCKET(CAST('3 months' AS INTERVAL), d, CAST(NULL AS INTERVAL)) FROM dates;

SELECT w, d, shift, TIME_BUCKET(w, d, SHIFT) FROM dates;

SELECT d, TIME_BUCKET(CAST('5 days' AS INTERVAL), d, CAST('1970-01-04' AS DATE)) FROM dates;

SELECT d, TIME_BUCKET(CAST('3 months' AS INTERVAL), d, CAST('1970-01-04' AS DATE)) FROM dates;

SELECT d, TIME_BUCKET(CAST('3 years' AS INTERVAL), d, CAST('1970-01-04' AS DATE)) FROM dates;

SELECT d, TIME_BUCKET(CAST(NULL AS INTERVAL), d, CAST('1970-01-04' AS DATE)) FROM dates;

SELECT TIME_BUCKET(CAST('3 years' AS INTERVAL), CAST(NULL AS DATE), CAST('1970-01-04' AS DATE)) FROM dates;

SELECT d, TIME_BUCKET(CAST('3 years' AS INTERVAL), d, CAST(NULL AS DATE)) FROM dates;

SELECT w, d, origin, TIME_BUCKET(w, d, ORIGIN) FROM dates;

SELECT TIME_BUCKET(CAST('-3 hours' AS INTERVAL), CAST('2019-04-05' AS DATE));

SELECT TIME_BUCKET(CAST('-3 hours' AS INTERVAL), CAST('2019-04-05' AS DATE), CAST('1 hour 30 minutes' AS INTERVAL));

SELECT TIME_BUCKET(CAST('-3 hours' AS INTERVAL), CAST('2019-04-05' AS DATE), CAST('2019-04-05' AS DATE));

SELECT TIME_BUCKET(CAST('-1 month' AS INTERVAL), CAST('2019-04-05' AS DATE));

SELECT TIME_BUCKET(CAST('-1 month' AS INTERVAL), CAST('2019-04-05' AS DATE), CAST('1 week' AS INTERVAL));

SELECT TIME_BUCKET(CAST('-1 month' AS INTERVAL), CAST('2019-04-05' AS DATE), CAST('2019-04-05' AS DATE));

SELECT TIME_BUCKET(CAST('1 day - 172800 seconds' AS INTERVAL), CAST('2018-05-05' AS DATE));

SELECT TIME_BUCKET(CAST('1 day - 172800 seconds' AS INTERVAL), CAST('2018-05-05' AS DATE), CAST('1 hour 30 minutes' AS INTERVAL));

SELECT TIME_BUCKET(CAST('1 day - 172800 seconds' AS INTERVAL), CAST('2018-05-05' AS DATE), CAST('2018-05-05' AS DATE));

SELECT TIME_BUCKET(CAST('1 month 1 day' AS INTERVAL), CAST('2018-05-05' AS DATE));

SELECT TIME_BUCKET(CAST('1 month 1 day' AS INTERVAL), CAST('2018-05-05' AS DATE), CAST('1 week' AS INTERVAL));

SELECT TIME_BUCKET(CAST('1 month 1 day' AS INTERVAL), CAST('2019-05-05' AS DATE), CAST('2019-05-05' AS DATE));

SELECT TIME_BUCKET(CAST('3 days' AS INTERVAL), CAST('2019-05-05' AS DATE), CAST('2000000000 months' AS INTERVAL));

SELECT TIME_BUCKET(CAST('3 days' AS INTERVAL), CAST('2019-05-05' AS DATE), CAST('-2000000000 months' AS INTERVAL));

SELECT TIME_BUCKET(CAST('3 months' AS INTERVAL), CAST('2019-05-05' AS DATE), CAST('2000000000 months' AS INTERVAL));

SELECT TIME_BUCKET(CAST('3 months' AS INTERVAL), CAST('2019-05-05' AS DATE), CAST('-2000000000 months' AS INTERVAL));

SELECT TIME_BUCKET(CAST('1 month' AS INTERVAL), CAST('5877642-06-25 (BC)' AS DATE));

SELECT TIME_BUCKET(CAST('1 month' AS INTERVAL), CAST('5877642-07-01 (BC)' AS DATE));

SELECT TIME_BUCKET(CAST('1 week' AS INTERVAL), CAST('5877642-07-01 (BC)' AS DATE));

SELECT TIME_BUCKET(CAST('1 month' AS INTERVAL), CAST('5881580-07-10' AS DATE), CAST('-1 day' AS INTERVAL));

SELECT TIME_BUCKET(CAST('1 month' AS INTERVAL), CAST('5881580-07-10' AS DATE));

SELECT TIME_BUCKET(CAST('1 week' AS INTERVAL), CAST('290309-12-21 (BC)' AS DATE));

SELECT TIME_BUCKET(CAST('1 week' AS INTERVAL), CAST('290309-12-22 (BC)' AS DATE));

SELECT TIME_BUCKET(CAST('1 day' AS INTERVAL), CAST('290309-12-21 (BC)' AS DATE));

SELECT TIME_BUCKET(CAST('1 day' AS INTERVAL), CAST('290309-12-22 (BC)' AS DATE));

SELECT TIME_BUCKET(CAST('1 week' AS INTERVAL), CAST('294247-01-11' AS DATE));

SELECT TIME_BUCKET(CAST('1 week' AS INTERVAL), CAST('294247-01-10' AS DATE));

SELECT TIME_BUCKET(CAST('1 day' AS INTERVAL), CAST('294247-01-11' AS DATE));

SELECT TIME_BUCKET(CAST('1 day' AS INTERVAL), CAST('294247-01-10' AS DATE));

SELECT TIME_BUCKET(CAST('1 month 1 day' AS INTERVAL), CAST(NULL AS DATE));

SELECT TIME_BUCKET(CAST('1 month 1 day' AS INTERVAL), CAST(NULL AS DATE), CAST('6 days' AS INTERVAL));

SELECT TIME_BUCKET(CAST('1 month 1 day' AS INTERVAL), CAST(NULL AS DATE), CAST('2022-12-20' AS DATE));

SELECT TIME_BUCKET(CAST('-1 month' AS INTERVAL), CAST(NULL AS DATE));

SELECT TIME_BUCKET(CAST('-1 month' AS INTERVAL), CAST(NULL AS DATE), CAST('6 days' AS INTERVAL));

SELECT TIME_BUCKET(CAST('-1 month' AS INTERVAL), CAST('2022-12-22' AS DATE), CAST(NULL AS INTERVAL));

SELECT TIME_BUCKET(CAST('-1 month' AS INTERVAL), CAST(NULL AS DATE), CAST('2022-12-20' AS DATE));

SELECT TIME_BUCKET(CAST('-1 month' AS INTERVAL), CAST('2022-12-22' AS DATE), CAST(NULL AS DATE));

WITH cte AS (SELECT CAST(NULL AS INTERVAL I), CAST(NULL AS DATE) AS d, CAST(NULL AS TIMESTAMP) AS t FROM RANGE(0, 1)) SELECT TIME_BUCKET(i, d) FROM cte;

WITH cte AS (SELECT CAST(NULL AS INTERVAL I), CAST(NULL AS DATE) AS d, CAST(NULL AS TIMESTAMP) AS t FROM RANGE(0, 1)) SELECT TIME_BUCKET(i, t) FROM cte;

WITH cte AS (SELECT CAST(NULL AS INTERVAL I), CAST(NULL AS DATE) AS d, CAST(NULL AS TIMESTAMP) AS t FROM RANGE(0, 1)) SELECT TIME_BUCKET(i, d, I) FROM cte;

WITH cte AS (SELECT CAST(NULL AS INTERVAL I), CAST(NULL AS DATE) AS d, CAST(NULL AS TIMESTAMP) AS t FROM RANGE(0, 1)) SELECT TIME_BUCKET(i, t, I) FROM cte;

WITH cte AS (SELECT CAST(NULL AS INTERVAL I), CAST(NULL AS DATE) AS d, CAST(NULL AS TIMESTAMP) AS t FROM RANGE(0, 1)) SELECT TIME_BUCKET(i, d, D) FROM cte;

WITH cte AS (SELECT CAST(NULL AS INTERVAL I), CAST(NULL AS DATE) AS d, CAST(NULL AS TIMESTAMP) AS t FROM RANGE(0, 1)) SELECT TIME_BUCKET(i, t, T) FROM cte;

PRAGMA enable_verification;

CREATE TYPE mood AS ENUM ('sad', 'ok', 'happy', 'anxious');

CREATE TABLE test (x mood);

INSERT INTO test VALUES ('ok'), ('sad'), ('anxious'), ('happy');

SELECT ENUM_CODE(x) FROM test;

SELECT ENUM_CODE('bla');

PREPARE p1 as SELECT enum_code(x) FROM test;

EXECUTE p1;

PREPARE p2 as SELECT enum_code(?);

EXECUTE p2('happy'::mood);

PRAGMA enable_verification;

CREATE TYPE rainbow AS ENUM ('red', 'orange', 'yellow', 'green', 'blue', 'purple');

SELECT ENUM_FIRST(CAST(NULL AS rainbow));

SELECT ENUM_FIRST('bla');

PRAGMA enable_verification;

CREATE TYPE rainbow AS ENUM ('red', 'orange', 'yellow', 'green', 'blue', 'purple');

SELECT ENUM_LAST(CAST(NULL AS rainbow));

SELECT ENUM_LAST('bla');

PRAGMA enable_verification;

CREATE TYPE rainbow AS ENUM ('red', 'orange', 'yellow', 'green', 'blue', 'purple');

CREATE TYPE currency AS ENUM ('usd', 'brl', 'eur');

SELECT ENUM_RANGE(CAST(NULL AS rainbow));

SELECT ENUM_RANGE_BOUNDARY(CAST('orange' AS rainbow), CAST('green' AS rainbow));

SELECT ENUM_RANGE_BOUNDARY(CAST('green' AS rainbow), CAST('orange' AS rainbow));

SELECT ENUM_RANGE_BOUNDARY(NULL, CAST('green' AS rainbow));

SELECT ENUM_RANGE_BOUNDARY(CAST('orange' AS rainbow), NULL);

SELECT ENUM_RANGE_BOUNDARY(CAST('orange' AS rainbow), CAST('brl' AS currency));

SELECT ENUM_RANGE_BOUNDARY(NULL, NULL);

SELECT ENUM_LAST('bla');

SELECT ENUM_RANGE_BOUNDARY(CAST('orange' AS rainbow), 1);

SELECT ENUM_RANGE_BOUNDARY(1, CAST('orange' AS rainbow));

CREATE MACRO bigcase(a) AS CASE
WHEN a=0 THEN 0
WHEN a=1 THEN 1
WHEN a=2 THEN 2
WHEN a=3 THEN 3
WHEN a=4 THEN 4
WHEN a=5 THEN 5
WHEN a=6 THEN 6
WHEN a=7 THEN 7
WHEN a=8 THEN 8
WHEN a=9 THEN 9
WHEN a=10 THEN 10
WHEN a=11 THEN 11
WHEN a=12 THEN 12
WHEN a=13 THEN 13
WHEN a=14 THEN 14
WHEN a=15 THEN 15
WHEN a=16 THEN 16
WHEN a=17 THEN 17
WHEN a=18 THEN 18
WHEN a=19 THEN 19
WHEN a=20 THEN 20
WHEN a=21 THEN 21
WHEN a=22 THEN 22
WHEN a=23 THEN 23
WHEN a=24 THEN 24
WHEN a=25 THEN 25
WHEN a=26 THEN 26
WHEN a=27 THEN 27
WHEN a=28 THEN 28
WHEN a=29 THEN 29
WHEN a=30 THEN 30
WHEN a=31 THEN 31
WHEN a=32 THEN 32
WHEN a=33 THEN 33
WHEN a=34 THEN 34
WHEN a=35 THEN 35
WHEN a=36 THEN 36
WHEN a=37 THEN 37
WHEN a=38 THEN 38
WHEN a=39 THEN 39
WHEN a=40 THEN 40
WHEN a=41 THEN 41
WHEN a=42 THEN 42
WHEN a=43 THEN 43
WHEN a=44 THEN 44
WHEN a=45 THEN 45
WHEN a=46 THEN 46
WHEN a=47 THEN 47
WHEN a=48 THEN 48
WHEN a=49 THEN 49
WHEN a=50 THEN 50
WHEN a=51 THEN 51
WHEN a=52 THEN 52
WHEN a=53 THEN 53
WHEN a=54 THEN 54
WHEN a=55 THEN 55
WHEN a=56 THEN 56
WHEN a=57 THEN 57
WHEN a=58 THEN 58
WHEN a=59 THEN 59
WHEN a=60 THEN 60
WHEN a=61 THEN 61
WHEN a=62 THEN 62
WHEN a=63 THEN 63
WHEN a=64 THEN 64
WHEN a=65 THEN 65
WHEN a=66 THEN 66
WHEN a=67 THEN 67
WHEN a=68 THEN 68
WHEN a=69 THEN 69
WHEN a=70 THEN 70
WHEN a=71 THEN 71
WHEN a=72 THEN 72
WHEN a=73 THEN 73
WHEN a=74 THEN 74
WHEN a=75 THEN 75
WHEN a=76 THEN 76
WHEN a=77 THEN 77
WHEN a=78 THEN 78
WHEN a=79 THEN 79
WHEN a=80 THEN 80
WHEN a=81 THEN 81
WHEN a=82 THEN 82
WHEN a=83 THEN 83
WHEN a=84 THEN 84
WHEN a=85 THEN 85
WHEN a=86 THEN 86
WHEN a=87 THEN 87
WHEN a=88 THEN 88
WHEN a=89 THEN 89
WHEN a=90 THEN 90
WHEN a=91 THEN 91
WHEN a=92 THEN 92
WHEN a=93 THEN 93
WHEN a=94 THEN 94
WHEN a=95 THEN 95
WHEN a=96 THEN 96
WHEN a=97 THEN 97
WHEN a=98 THEN 98
WHEN a=99 THEN 99
WHEN a=100 THEN 100
WHEN a=101 THEN 101
WHEN a=102 THEN 102
WHEN a=103 THEN 103
WHEN a=104 THEN 104
WHEN a=105 THEN 105
WHEN a=106 THEN 106
WHEN a=107 THEN 107
WHEN a=108 THEN 108
WHEN a=109 THEN 109
WHEN a=110 THEN 110
WHEN a=111 THEN 111
WHEN a=112 THEN 112
WHEN a=113 THEN 113
WHEN a=114 THEN 114
WHEN a=115 THEN 115
WHEN a=116 THEN 116
WHEN a=117 THEN 117
WHEN a=118 THEN 118
WHEN a=119 THEN 119
WHEN a=120 THEN 120
WHEN a=121 THEN 121
WHEN a=122 THEN 122
WHEN a=123 THEN 123
WHEN a=124 THEN 124
WHEN a=125 THEN 125
WHEN a=126 THEN 126
WHEN a=127 THEN 127
WHEN a=128 THEN 128
WHEN a=129 THEN 129
WHEN a=130 THEN 130
WHEN a=131 THEN 131
WHEN a=132 THEN 132
WHEN a=133 THEN 133
WHEN a=134 THEN 134
WHEN a=135 THEN 135
WHEN a=136 THEN 136
WHEN a=137 THEN 137
WHEN a=138 THEN 138
WHEN a=139 THEN 139
WHEN a=140 THEN 140
WHEN a=141 THEN 141
WHEN a=142 THEN 142
WHEN a=143 THEN 143
WHEN a=144 THEN 144
WHEN a=145 THEN 145
WHEN a=146 THEN 146
WHEN a=147 THEN 147
WHEN a=148 THEN 148
WHEN a=149 THEN 149
WHEN a=150 THEN 150
WHEN a=151 THEN 151
WHEN a=152 THEN 152
WHEN a=153 THEN 153
WHEN a=154 THEN 154
WHEN a=155 THEN 155
WHEN a=156 THEN 156
WHEN a=157 THEN 157
WHEN a=158 THEN 158
WHEN a=159 THEN 159
WHEN a=160 THEN 160
WHEN a=161 THEN 161
WHEN a=162 THEN 162
WHEN a=163 THEN 163
WHEN a=164 THEN 164
WHEN a=165 THEN 165
WHEN a=166 THEN 166
WHEN a=167 THEN 167
WHEN a=168 THEN 168
WHEN a=169 THEN 169
WHEN a=170 THEN 170
WHEN a=171 THEN 171
WHEN a=172 THEN 172
WHEN a=173 THEN 173
WHEN a=174 THEN 174
WHEN a=175 THEN 175
WHEN a=176 THEN 176
WHEN a=177 THEN 177
WHEN a=178 THEN 178
WHEN a=179 THEN 179
WHEN a=180 THEN 180
WHEN a=181 THEN 181
WHEN a=182 THEN 182
WHEN a=183 THEN 183
WHEN a=184 THEN 184
WHEN a=185 THEN 185
WHEN a=186 THEN 186
WHEN a=187 THEN 187
WHEN a=188 THEN 188
WHEN a=189 THEN 189
WHEN a=190 THEN 190
WHEN a=191 THEN 191
WHEN a=192 THEN 192
WHEN a=193 THEN 193
WHEN a=194 THEN 194
WHEN a=195 THEN 195
WHEN a=196 THEN 196
WHEN a=197 THEN 197
WHEN a=198 THEN 198
WHEN a=199 THEN 199
WHEN a=200 THEN 200
WHEN a=201 THEN 201
WHEN a=202 THEN 202
WHEN a=203 THEN 203
WHEN a=204 THEN 204
WHEN a=205 THEN 205
WHEN a=206 THEN 206
WHEN a=207 THEN 207
WHEN a=208 THEN 208
WHEN a=209 THEN 209
WHEN a=210 THEN 210
WHEN a=211 THEN 211
WHEN a=212 THEN 212
WHEN a=213 THEN 213
WHEN a=214 THEN 214
WHEN a=215 THEN 215
WHEN a=216 THEN 216
WHEN a=217 THEN 217
WHEN a=218 THEN 218
WHEN a=219 THEN 219
WHEN a=220 THEN 220
WHEN a=221 THEN 221
WHEN a=222 THEN 222
WHEN a=223 THEN 223
WHEN a=224 THEN 224
WHEN a=225 THEN 225
WHEN a=226 THEN 226
WHEN a=227 THEN 227
WHEN a=228 THEN 228
WHEN a=229 THEN 229
WHEN a=230 THEN 230
WHEN a=231 THEN 231
WHEN a=232 THEN 232
WHEN a=233 THEN 233
WHEN a=234 THEN 234
WHEN a=235 THEN 235
WHEN a=236 THEN 236
WHEN a=237 THEN 237
WHEN a=238 THEN 238
WHEN a=239 THEN 239
WHEN a=240 THEN 240
WHEN a=241 THEN 241
WHEN a=242 THEN 242
WHEN a=243 THEN 243
WHEN a=244 THEN 244
WHEN a=245 THEN 245
WHEN a=246 THEN 246
WHEN a=247 THEN 247
WHEN a=248 THEN 248
WHEN a=249 THEN 249
WHEN a=250 THEN 250
WHEN a=251 THEN 251
WHEN a=252 THEN 252
WHEN a=253 THEN 253
WHEN a=254 THEN 254
WHEN a=255 THEN 255
WHEN a=256 THEN 256
WHEN a=257 THEN 257
WHEN a=258 THEN 258
WHEN a=259 THEN 259
WHEN a=260 THEN 260
WHEN a=261 THEN 261
WHEN a=262 THEN 262
WHEN a=263 THEN 263
WHEN a=264 THEN 264
WHEN a=265 THEN 265
WHEN a=266 THEN 266
WHEN a=267 THEN 267
WHEN a=268 THEN 268
WHEN a=269 THEN 269
WHEN a=270 THEN 270
WHEN a=271 THEN 271
WHEN a=272 THEN 272
WHEN a=273 THEN 273
WHEN a=274 THEN 274
WHEN a=275 THEN 275
WHEN a=276 THEN 276
WHEN a=277 THEN 277
WHEN a=278 THEN 278
WHEN a=279 THEN 279
WHEN a=280 THEN 280
WHEN a=281 THEN 281
WHEN a=282 THEN 282
WHEN a=283 THEN 283
WHEN a=284 THEN 284
WHEN a=285 THEN 285
WHEN a=286 THEN 286
WHEN a=287 THEN 287
WHEN a=288 THEN 288
WHEN a=289 THEN 289
WHEN a=290 THEN 290
WHEN a=291 THEN 291
WHEN a=292 THEN 292
WHEN a=293 THEN 293
WHEN a=294 THEN 294
WHEN a=295 THEN 295
WHEN a=296 THEN 296
WHEN a=297 THEN 297
WHEN a=298 THEN 298
WHEN a=299 THEN 299
WHEN a=300 THEN 300
WHEN a=301 THEN 301
WHEN a=302 THEN 302
WHEN a=303 THEN 303
WHEN a=304 THEN 304
WHEN a=305 THEN 305
WHEN a=306 THEN 306
WHEN a=307 THEN 307
WHEN a=308 THEN 308
WHEN a=309 THEN 309
WHEN a=310 THEN 310
WHEN a=311 THEN 311
WHEN a=312 THEN 312
WHEN a=313 THEN 313
WHEN a=314 THEN 314
WHEN a=315 THEN 315
WHEN a=316 THEN 316
WHEN a=317 THEN 317
WHEN a=318 THEN 318
WHEN a=319 THEN 319
WHEN a=320 THEN 320
WHEN a=321 THEN 321
WHEN a=322 THEN 322
WHEN a=323 THEN 323
WHEN a=324 THEN 324
WHEN a=325 THEN 325
WHEN a=326 THEN 326
WHEN a=327 THEN 327
WHEN a=328 THEN 328
WHEN a=329 THEN 329
WHEN a=330 THEN 330
WHEN a=331 THEN 331
WHEN a=332 THEN 332
WHEN a=333 THEN 333
WHEN a=334 THEN 334
WHEN a=335 THEN 335
WHEN a=336 THEN 336
WHEN a=337 THEN 337
WHEN a=338 THEN 338
WHEN a=339 THEN 339
WHEN a=340 THEN 340
WHEN a=341 THEN 341
WHEN a=342 THEN 342
WHEN a=343 THEN 343
WHEN a=344 THEN 344
WHEN a=345 THEN 345
WHEN a=346 THEN 346
WHEN a=347 THEN 347
WHEN a=348 THEN 348
WHEN a=349 THEN 349
WHEN a=350 THEN 350
WHEN a=351 THEN 351
WHEN a=352 THEN 352
WHEN a=353 THEN 353
WHEN a=354 THEN 354
WHEN a=355 THEN 355
WHEN a=356 THEN 356
WHEN a=357 THEN 357
WHEN a=358 THEN 358
WHEN a=359 THEN 359
WHEN a=360 THEN 360
WHEN a=361 THEN 361
WHEN a=362 THEN 362
WHEN a=363 THEN 363
WHEN a=364 THEN 364
WHEN a=365 THEN 365
WHEN a=366 THEN 366
WHEN a=367 THEN 367
WHEN a=368 THEN 368
WHEN a=369 THEN 369
WHEN a=370 THEN 370
WHEN a=371 THEN 371
WHEN a=372 THEN 372
WHEN a=373 THEN 373
WHEN a=374 THEN 374
WHEN a=375 THEN 375
WHEN a=376 THEN 376
WHEN a=377 THEN 377
WHEN a=378 THEN 378
WHEN a=379 THEN 379
WHEN a=380 THEN 380
WHEN a=381 THEN 381
WHEN a=382 THEN 382
WHEN a=383 THEN 383
WHEN a=384 THEN 384
WHEN a=385 THEN 385
WHEN a=386 THEN 386
WHEN a=387 THEN 387
WHEN a=388 THEN 388
WHEN a=389 THEN 389
WHEN a=390 THEN 390
WHEN a=391 THEN 391
WHEN a=392 THEN 392
WHEN a=393 THEN 393
WHEN a=394 THEN 394
WHEN a=395 THEN 395
WHEN a=396 THEN 396
WHEN a=397 THEN 397
WHEN a=398 THEN 398
WHEN a=399 THEN 399
WHEN a=400 THEN 400
WHEN a=401 THEN 401
WHEN a=402 THEN 402
WHEN a=403 THEN 403
WHEN a=404 THEN 404
WHEN a=405 THEN 405
WHEN a=406 THEN 406
WHEN a=407 THEN 407
WHEN a=408 THEN 408
WHEN a=409 THEN 409
WHEN a=410 THEN 410
WHEN a=411 THEN 411
WHEN a=412 THEN 412
WHEN a=413 THEN 413
WHEN a=414 THEN 414
WHEN a=415 THEN 415
WHEN a=416 THEN 416
WHEN a=417 THEN 417
WHEN a=418 THEN 418
WHEN a=419 THEN 419
WHEN a=420 THEN 420
WHEN a=421 THEN 421
WHEN a=422 THEN 422
WHEN a=423 THEN 423
WHEN a=424 THEN 424
WHEN a=425 THEN 425
WHEN a=426 THEN 426
WHEN a=427 THEN 427
WHEN a=428 THEN 428
WHEN a=429 THEN 429
WHEN a=430 THEN 430
WHEN a=431 THEN 431
WHEN a=432 THEN 432
WHEN a=433 THEN 433
WHEN a=434 THEN 434
WHEN a=435 THEN 435
WHEN a=436 THEN 436
WHEN a=437 THEN 437
WHEN a=438 THEN 438
WHEN a=439 THEN 439
WHEN a=440 THEN 440
WHEN a=441 THEN 441
WHEN a=442 THEN 442
WHEN a=443 THEN 443
WHEN a=444 THEN 444
WHEN a=445 THEN 445
WHEN a=446 THEN 446
WHEN a=447 THEN 447
WHEN a=448 THEN 448
WHEN a=449 THEN 449
WHEN a=450 THEN 450
WHEN a=451 THEN 451
WHEN a=452 THEN 452
WHEN a=453 THEN 453
WHEN a=454 THEN 454
WHEN a=455 THEN 455
WHEN a=456 THEN 456
WHEN a=457 THEN 457
WHEN a=458 THEN 458
WHEN a=459 THEN 459
WHEN a=460 THEN 460
WHEN a=461 THEN 461
WHEN a=462 THEN 462
WHEN a=463 THEN 463
WHEN a=464 THEN 464
WHEN a=465 THEN 465
WHEN a=466 THEN 466
WHEN a=467 THEN 467
WHEN a=468 THEN 468
WHEN a=469 THEN 469
WHEN a=470 THEN 470
WHEN a=471 THEN 471
WHEN a=472 THEN 472
WHEN a=473 THEN 473
WHEN a=474 THEN 474
WHEN a=475 THEN 475
WHEN a=476 THEN 476
WHEN a=477 THEN 477
WHEN a=478 THEN 478
WHEN a=479 THEN 479
WHEN a=480 THEN 480
WHEN a=481 THEN 481
WHEN a=482 THEN 482
WHEN a=483 THEN 483
WHEN a=484 THEN 484
WHEN a=485 THEN 485
WHEN a=486 THEN 486
WHEN a=487 THEN 487
WHEN a=488 THEN 488
WHEN a=489 THEN 489
WHEN a=490 THEN 490
WHEN a=491 THEN 491
WHEN a=492 THEN 492
WHEN a=493 THEN 493
WHEN a=494 THEN 494
WHEN a=495 THEN 495
WHEN a=496 THEN 496
WHEN a=497 THEN 497
WHEN a=498 THEN 498
WHEN a=499 THEN 499
WHEN a=500 THEN 500
WHEN a=501 THEN 501
WHEN a=502 THEN 502
WHEN a=503 THEN 503
WHEN a=504 THEN 504
WHEN a=505 THEN 505
WHEN a=506 THEN 506
WHEN a=507 THEN 507
WHEN a=508 THEN 508
WHEN a=509 THEN 509
WHEN a=510 THEN 510
WHEN a=511 THEN 511
WHEN a=512 THEN 512
WHEN a=513 THEN 513
WHEN a=514 THEN 514
WHEN a=515 THEN 515
WHEN a=516 THEN 516
WHEN a=517 THEN 517
WHEN a=518 THEN 518
WHEN a=519 THEN 519
WHEN a=520 THEN 520
WHEN a=521 THEN 521
WHEN a=522 THEN 522
WHEN a=523 THEN 523
WHEN a=524 THEN 524
WHEN a=525 THEN 525
WHEN a=526 THEN 526
WHEN a=527 THEN 527
WHEN a=528 THEN 528
WHEN a=529 THEN 529
WHEN a=530 THEN 530
WHEN a=531 THEN 531
WHEN a=532 THEN 532
WHEN a=533 THEN 533
WHEN a=534 THEN 534
WHEN a=535 THEN 535
WHEN a=536 THEN 536
WHEN a=537 THEN 537
WHEN a=538 THEN 538
WHEN a=539 THEN 539
WHEN a=540 THEN 540
WHEN a=541 THEN 541
WHEN a=542 THEN 542
WHEN a=543 THEN 543
WHEN a=544 THEN 544
WHEN a=545 THEN 545
WHEN a=546 THEN 546
WHEN a=547 THEN 547
WHEN a=548 THEN 548
WHEN a=549 THEN 549
WHEN a=550 THEN 550
WHEN a=551 THEN 551
WHEN a=552 THEN 552
WHEN a=553 THEN 553
WHEN a=554 THEN 554
WHEN a=555 THEN 555
WHEN a=556 THEN 556
WHEN a=557 THEN 557
WHEN a=558 THEN 558
WHEN a=559 THEN 559
WHEN a=560 THEN 560
WHEN a=561 THEN 561
WHEN a=562 THEN 562
WHEN a=563 THEN 563
WHEN a=564 THEN 564
WHEN a=565 THEN 565
WHEN a=566 THEN 566
WHEN a=567 THEN 567
WHEN a=568 THEN 568
WHEN a=569 THEN 569
WHEN a=570 THEN 570
WHEN a=571 THEN 571
WHEN a=572 THEN 572
WHEN a=573 THEN 573
WHEN a=574 THEN 574
WHEN a=575 THEN 575
WHEN a=576 THEN 576
WHEN a=577 THEN 577
WHEN a=578 THEN 578
WHEN a=579 THEN 579
WHEN a=580 THEN 580
WHEN a=581 THEN 581
WHEN a=582 THEN 582
WHEN a=583 THEN 583
WHEN a=584 THEN 584
WHEN a=585 THEN 585
WHEN a=586 THEN 586
WHEN a=587 THEN 587
WHEN a=588 THEN 588
WHEN a=589 THEN 589
WHEN a=590 THEN 590
WHEN a=591 THEN 591
WHEN a=592 THEN 592
WHEN a=593 THEN 593
WHEN a=594 THEN 594
WHEN a=595 THEN 595
WHEN a=596 THEN 596
WHEN a=597 THEN 597
WHEN a=598 THEN 598
WHEN a=599 THEN 599
WHEN a=600 THEN 600
WHEN a=601 THEN 601
WHEN a=602 THEN 602
WHEN a=603 THEN 603
WHEN a=604 THEN 604
WHEN a=605 THEN 605
WHEN a=606 THEN 606
WHEN a=607 THEN 607
WHEN a=608 THEN 608
WHEN a=609 THEN 609
WHEN a=610 THEN 610
WHEN a=611 THEN 611
WHEN a=612 THEN 612
WHEN a=613 THEN 613
WHEN a=614 THEN 614
WHEN a=615 THEN 615
WHEN a=616 THEN 616
WHEN a=617 THEN 617
WHEN a=618 THEN 618
WHEN a=619 THEN 619
WHEN a=620 THEN 620
WHEN a=621 THEN 621
WHEN a=622 THEN 622
WHEN a=623 THEN 623
WHEN a=624 THEN 624
WHEN a=625 THEN 625
WHEN a=626 THEN 626
WHEN a=627 THEN 627
WHEN a=628 THEN 628
WHEN a=629 THEN 629
WHEN a=630 THEN 630
WHEN a=631 THEN 631
WHEN a=632 THEN 632
WHEN a=633 THEN 633
WHEN a=634 THEN 634
WHEN a=635 THEN 635
WHEN a=636 THEN 636
WHEN a=637 THEN 637
WHEN a=638 THEN 638
WHEN a=639 THEN 639
WHEN a=640 THEN 640
WHEN a=641 THEN 641
WHEN a=642 THEN 642
WHEN a=643 THEN 643
WHEN a=644 THEN 644
WHEN a=645 THEN 645
WHEN a=646 THEN 646
WHEN a=647 THEN 647
WHEN a=648 THEN 648
WHEN a=649 THEN 649
WHEN a=650 THEN 650
WHEN a=651 THEN 651
WHEN a=652 THEN 652
WHEN a=653 THEN 653
WHEN a=654 THEN 654
WHEN a=655 THEN 655
WHEN a=656 THEN 656
WHEN a=657 THEN 657
WHEN a=658 THEN 658
WHEN a=659 THEN 659
WHEN a=660 THEN 660
WHEN a=661 THEN 661
WHEN a=662 THEN 662
WHEN a=663 THEN 663
WHEN a=664 THEN 664
WHEN a=665 THEN 665
WHEN a=666 THEN 666
WHEN a=667 THEN 667
WHEN a=668 THEN 668
WHEN a=669 THEN 669
WHEN a=670 THEN 670
WHEN a=671 THEN 671
WHEN a=672 THEN 672
WHEN a=673 THEN 673
WHEN a=674 THEN 674
WHEN a=675 THEN 675
WHEN a=676 THEN 676
WHEN a=677 THEN 677
WHEN a=678 THEN 678
WHEN a=679 THEN 679
WHEN a=680 THEN 680
WHEN a=681 THEN 681
WHEN a=682 THEN 682
WHEN a=683 THEN 683
WHEN a=684 THEN 684
WHEN a=685 THEN 685
WHEN a=686 THEN 686
WHEN a=687 THEN 687
WHEN a=688 THEN 688
WHEN a=689 THEN 689
WHEN a=690 THEN 690
WHEN a=691 THEN 691
WHEN a=692 THEN 692
WHEN a=693 THEN 693
WHEN a=694 THEN 694
WHEN a=695 THEN 695
WHEN a=696 THEN 696
WHEN a=697 THEN 697
WHEN a=698 THEN 698
WHEN a=699 THEN 699
WHEN a=700 THEN 700
WHEN a=701 THEN 701
WHEN a=702 THEN 702
WHEN a=703 THEN 703
WHEN a=704 THEN 704
WHEN a=705 THEN 705
WHEN a=706 THEN 706
WHEN a=707 THEN 707
WHEN a=708 THEN 708
WHEN a=709 THEN 709
WHEN a=710 THEN 710
WHEN a=711 THEN 711
WHEN a=712 THEN 712
WHEN a=713 THEN 713
WHEN a=714 THEN 714
WHEN a=715 THEN 715
WHEN a=716 THEN 716
WHEN a=717 THEN 717
WHEN a=718 THEN 718
WHEN a=719 THEN 719
WHEN a=720 THEN 720
WHEN a=721 THEN 721
WHEN a=722 THEN 722
WHEN a=723 THEN 723
WHEN a=724 THEN 724
WHEN a=725 THEN 725
WHEN a=726 THEN 726
WHEN a=727 THEN 727
WHEN a=728 THEN 728
WHEN a=729 THEN 729
WHEN a=730 THEN 730
WHEN a=731 THEN 731
WHEN a=732 THEN 732
WHEN a=733 THEN 733
WHEN a=734 THEN 734
WHEN a=735 THEN 735
WHEN a=736 THEN 736
WHEN a=737 THEN 737
WHEN a=738 THEN 738
WHEN a=739 THEN 739
WHEN a=740 THEN 740
WHEN a=741 THEN 741
WHEN a=742 THEN 742
WHEN a=743 THEN 743
WHEN a=744 THEN 744
WHEN a=745 THEN 745
WHEN a=746 THEN 746
WHEN a=747 THEN 747
WHEN a=748 THEN 748
WHEN a=749 THEN 749
WHEN a=750 THEN 750
WHEN a=751 THEN 751
WHEN a=752 THEN 752
WHEN a=753 THEN 753
WHEN a=754 THEN 754
WHEN a=755 THEN 755
WHEN a=756 THEN 756
WHEN a=757 THEN 757
WHEN a=758 THEN 758
WHEN a=759 THEN 759
WHEN a=760 THEN 760
WHEN a=761 THEN 761
WHEN a=762 THEN 762
WHEN a=763 THEN 763
WHEN a=764 THEN 764
WHEN a=765 THEN 765
WHEN a=766 THEN 766
WHEN a=767 THEN 767
WHEN a=768 THEN 768
WHEN a=769 THEN 769
WHEN a=770 THEN 770
WHEN a=771 THEN 771
WHEN a=772 THEN 772
WHEN a=773 THEN 773
WHEN a=774 THEN 774
WHEN a=775 THEN 775
WHEN a=776 THEN 776
WHEN a=777 THEN 777
WHEN a=778 THEN 778
WHEN a=779 THEN 779
WHEN a=780 THEN 780
WHEN a=781 THEN 781
WHEN a=782 THEN 782
WHEN a=783 THEN 783
WHEN a=784 THEN 784
WHEN a=785 THEN 785
WHEN a=786 THEN 786
WHEN a=787 THEN 787
WHEN a=788 THEN 788
WHEN a=789 THEN 789
WHEN a=790 THEN 790
WHEN a=791 THEN 791
WHEN a=792 THEN 792
WHEN a=793 THEN 793
WHEN a=794 THEN 794
WHEN a=795 THEN 795
WHEN a=796 THEN 796
WHEN a=797 THEN 797
WHEN a=798 THEN 798
WHEN a=799 THEN 799
WHEN a=800 THEN 800
WHEN a=801 THEN 801
WHEN a=802 THEN 802
WHEN a=803 THEN 803
WHEN a=804 THEN 804
WHEN a=805 THEN 805
WHEN a=806 THEN 806
WHEN a=807 THEN 807
WHEN a=808 THEN 808
WHEN a=809 THEN 809
WHEN a=810 THEN 810
WHEN a=811 THEN 811
WHEN a=812 THEN 812
WHEN a=813 THEN 813
WHEN a=814 THEN 814
WHEN a=815 THEN 815
WHEN a=816 THEN 816
WHEN a=817 THEN 817
WHEN a=818 THEN 818
WHEN a=819 THEN 819
WHEN a=820 THEN 820
WHEN a=821 THEN 821
WHEN a=822 THEN 822
WHEN a=823 THEN 823
WHEN a=824 THEN 824
WHEN a=825 THEN 825
WHEN a=826 THEN 826
WHEN a=827 THEN 827
WHEN a=828 THEN 828
WHEN a=829 THEN 829
WHEN a=830 THEN 830
WHEN a=831 THEN 831
WHEN a=832 THEN 832
WHEN a=833 THEN 833
WHEN a=834 THEN 834
WHEN a=835 THEN 835
WHEN a=836 THEN 836
WHEN a=837 THEN 837
WHEN a=838 THEN 838
WHEN a=839 THEN 839
WHEN a=840 THEN 840
WHEN a=841 THEN 841
WHEN a=842 THEN 842
WHEN a=843 THEN 843
WHEN a=844 THEN 844
WHEN a=845 THEN 845
WHEN a=846 THEN 846
WHEN a=847 THEN 847
WHEN a=848 THEN 848
WHEN a=849 THEN 849
WHEN a=850 THEN 850
WHEN a=851 THEN 851
WHEN a=852 THEN 852
WHEN a=853 THEN 853
WHEN a=854 THEN 854
WHEN a=855 THEN 855
WHEN a=856 THEN 856
WHEN a=857 THEN 857
WHEN a=858 THEN 858
WHEN a=859 THEN 859
WHEN a=860 THEN 860
WHEN a=861 THEN 861
WHEN a=862 THEN 862
WHEN a=863 THEN 863
WHEN a=864 THEN 864
WHEN a=865 THEN 865
WHEN a=866 THEN 866
WHEN a=867 THEN 867
WHEN a=868 THEN 868
WHEN a=869 THEN 869
WHEN a=870 THEN 870
WHEN a=871 THEN 871
WHEN a=872 THEN 872
WHEN a=873 THEN 873
WHEN a=874 THEN 874
WHEN a=875 THEN 875
WHEN a=876 THEN 876
WHEN a=877 THEN 877
WHEN a=878 THEN 878
WHEN a=879 THEN 879
WHEN a=880 THEN 880
WHEN a=881 THEN 881
WHEN a=882 THEN 882
WHEN a=883 THEN 883
WHEN a=884 THEN 884
WHEN a=885 THEN 885
WHEN a=886 THEN 886
WHEN a=887 THEN 887
WHEN a=888 THEN 888
WHEN a=889 THEN 889
WHEN a=890 THEN 890
WHEN a=891 THEN 891
WHEN a=892 THEN 892
WHEN a=893 THEN 893
WHEN a=894 THEN 894
WHEN a=895 THEN 895
WHEN a=896 THEN 896
WHEN a=897 THEN 897
WHEN a=898 THEN 898
WHEN a=899 THEN 899
WHEN a=900 THEN 900
WHEN a=901 THEN 901
WHEN a=902 THEN 902
WHEN a=903 THEN 903
WHEN a=904 THEN 904
WHEN a=905 THEN 905
WHEN a=906 THEN 906
WHEN a=907 THEN 907
WHEN a=908 THEN 908
WHEN a=909 THEN 909
WHEN a=910 THEN 910
WHEN a=911 THEN 911
WHEN a=912 THEN 912
WHEN a=913 THEN 913
WHEN a=914 THEN 914
WHEN a=915 THEN 915
WHEN a=916 THEN 916
WHEN a=917 THEN 917
WHEN a=918 THEN 918
WHEN a=919 THEN 919
WHEN a=920 THEN 920
WHEN a=921 THEN 921
WHEN a=922 THEN 922
WHEN a=923 THEN 923
WHEN a=924 THEN 924
WHEN a=925 THEN 925
WHEN a=926 THEN 926
WHEN a=927 THEN 927
WHEN a=928 THEN 928
WHEN a=929 THEN 929
WHEN a=930 THEN 930
WHEN a=931 THEN 931
WHEN a=932 THEN 932
WHEN a=933 THEN 933
WHEN a=934 THEN 934
WHEN a=935 THEN 935
WHEN a=936 THEN 936
WHEN a=937 THEN 937
WHEN a=938 THEN 938
WHEN a=939 THEN 939
WHEN a=940 THEN 940
WHEN a=941 THEN 941
WHEN a=942 THEN 942
WHEN a=943 THEN 943
WHEN a=944 THEN 944
WHEN a=945 THEN 945
WHEN a=946 THEN 946
WHEN a=947 THEN 947
WHEN a=948 THEN 948
WHEN a=949 THEN 949
WHEN a=950 THEN 950
WHEN a=951 THEN 951
WHEN a=952 THEN 952
WHEN a=953 THEN 953
WHEN a=954 THEN 954
WHEN a=955 THEN 955
WHEN a=956 THEN 956
WHEN a=957 THEN 957
WHEN a=958 THEN 958
WHEN a=959 THEN 959
WHEN a=960 THEN 960
WHEN a=961 THEN 961
WHEN a=962 THEN 962
WHEN a=963 THEN 963
WHEN a=964 THEN 964
WHEN a=965 THEN 965
WHEN a=966 THEN 966
WHEN a=967 THEN 967
WHEN a=968 THEN 968
WHEN a=969 THEN 969
WHEN a=970 THEN 970
WHEN a=971 THEN 971
WHEN a=972 THEN 972
WHEN a=973 THEN 973
WHEN a=974 THEN 974
WHEN a=975 THEN 975
WHEN a=976 THEN 976
WHEN a=977 THEN 977
WHEN a=978 THEN 978
WHEN a=979 THEN 979
WHEN a=980 THEN 980
WHEN a=981 THEN 981
WHEN a=982 THEN 982
WHEN a=983 THEN 983
WHEN a=984 THEN 984
WHEN a=985 THEN 985
WHEN a=986 THEN 986
WHEN a=987 THEN 987
WHEN a=988 THEN 988
WHEN a=989 THEN 989
WHEN a=990 THEN 990
WHEN a=991 THEN 991
WHEN a=992 THEN 992
WHEN a=993 THEN 993
WHEN a=994 THEN 994
WHEN a=995 THEN 995
WHEN a=996 THEN 996
WHEN a=997 THEN 997
WHEN a=998 THEN 998
WHEN a=999 THEN 999
WHEN a=1000 THEN 1000
WHEN a=1001 THEN 1001
WHEN a=1002 THEN 1002
WHEN a=1003 THEN 1003
WHEN a=1004 THEN 1004
WHEN a=1005 THEN 1005
WHEN a=1006 THEN 1006
WHEN a=1007 THEN 1007
WHEN a=1008 THEN 1008
WHEN a=1009 THEN 1009
WHEN a=1010 THEN 1010
WHEN a=1011 THEN 1011
WHEN a=1012 THEN 1012
WHEN a=1013 THEN 1013
WHEN a=1014 THEN 1014
WHEN a=1015 THEN 1015
WHEN a=1016 THEN 1016
WHEN a=1017 THEN 1017
WHEN a=1018 THEN 1018
WHEN a=1019 THEN 1019
WHEN a=1020 THEN 1020
WHEN a=1021 THEN 1021
WHEN a=1022 THEN 1022
WHEN a=1023 THEN 1023
WHEN a=1024 THEN 1024
WHEN a=1025 THEN 1025
WHEN a=1026 THEN 1026
WHEN a=1027 THEN 1027
WHEN a=1028 THEN 1028
WHEN a=1029 THEN 1029
WHEN a=1030 THEN 1030
WHEN a=1031 THEN 1031
WHEN a=1032 THEN 1032
WHEN a=1033 THEN 1033
WHEN a=1034 THEN 1034
WHEN a=1035 THEN 1035
WHEN a=1036 THEN 1036
WHEN a=1037 THEN 1037
WHEN a=1038 THEN 1038
WHEN a=1039 THEN 1039
WHEN a=1040 THEN 1040
WHEN a=1041 THEN 1041
WHEN a=1042 THEN 1042
WHEN a=1043 THEN 1043
WHEN a=1044 THEN 1044
WHEN a=1045 THEN 1045
WHEN a=1046 THEN 1046
WHEN a=1047 THEN 1047
WHEN a=1048 THEN 1048
WHEN a=1049 THEN 1049
WHEN a=1050 THEN 1050
WHEN a=1051 THEN 1051
WHEN a=1052 THEN 1052
WHEN a=1053 THEN 1053
WHEN a=1054 THEN 1054
WHEN a=1055 THEN 1055
WHEN a=1056 THEN 1056
WHEN a=1057 THEN 1057
WHEN a=1058 THEN 1058
WHEN a=1059 THEN 1059
WHEN a=1060 THEN 1060
WHEN a=1061 THEN 1061
WHEN a=1062 THEN 1062
WHEN a=1063 THEN 1063
WHEN a=1064 THEN 1064
WHEN a=1065 THEN 1065
WHEN a=1066 THEN 1066
WHEN a=1067 THEN 1067
WHEN a=1068 THEN 1068
WHEN a=1069 THEN 1069
WHEN a=1070 THEN 1070
WHEN a=1071 THEN 1071
WHEN a=1072 THEN 1072
WHEN a=1073 THEN 1073
WHEN a=1074 THEN 1074
WHEN a=1075 THEN 1075
WHEN a=1076 THEN 1076
WHEN a=1077 THEN 1077
WHEN a=1078 THEN 1078
WHEN a=1079 THEN 1079
WHEN a=1080 THEN 1080
WHEN a=1081 THEN 1081
WHEN a=1082 THEN 1082
WHEN a=1083 THEN 1083
WHEN a=1084 THEN 1084
WHEN a=1085 THEN 1085
WHEN a=1086 THEN 1086
WHEN a=1087 THEN 1087
WHEN a=1088 THEN 1088
WHEN a=1089 THEN 1089
WHEN a=1090 THEN 1090
WHEN a=1091 THEN 1091
WHEN a=1092 THEN 1092
WHEN a=1093 THEN 1093
WHEN a=1094 THEN 1094
WHEN a=1095 THEN 1095
WHEN a=1096 THEN 1096
WHEN a=1097 THEN 1097
WHEN a=1098 THEN 1098
WHEN a=1099 THEN 1099
WHEN a=1100 THEN 1100
WHEN a=1101 THEN 1101
WHEN a=1102 THEN 1102
WHEN a=1103 THEN 1103
WHEN a=1104 THEN 1104
WHEN a=1105 THEN 1105
WHEN a=1106 THEN 1106
WHEN a=1107 THEN 1107
WHEN a=1108 THEN 1108
WHEN a=1109 THEN 1109
WHEN a=1110 THEN 1110
WHEN a=1111 THEN 1111
WHEN a=1112 THEN 1112
WHEN a=1113 THEN 1113
WHEN a=1114 THEN 1114
WHEN a=1115 THEN 1115
WHEN a=1116 THEN 1116
WHEN a=1117 THEN 1117
WHEN a=1118 THEN 1118
WHEN a=1119 THEN 1119
WHEN a=1120 THEN 1120
WHEN a=1121 THEN 1121
WHEN a=1122 THEN 1122
WHEN a=1123 THEN 1123
WHEN a=1124 THEN 1124
WHEN a=1125 THEN 1125
WHEN a=1126 THEN 1126
WHEN a=1127 THEN 1127
WHEN a=1128 THEN 1128
WHEN a=1129 THEN 1129
WHEN a=1130 THEN 1130
WHEN a=1131 THEN 1131
WHEN a=1132 THEN 1132
WHEN a=1133 THEN 1133
WHEN a=1134 THEN 1134
WHEN a=1135 THEN 1135
WHEN a=1136 THEN 1136
WHEN a=1137 THEN 1137
WHEN a=1138 THEN 1138
WHEN a=1139 THEN 1139
WHEN a=1140 THEN 1140
WHEN a=1141 THEN 1141
WHEN a=1142 THEN 1142
WHEN a=1143 THEN 1143
WHEN a=1144 THEN 1144
WHEN a=1145 THEN 1145
WHEN a=1146 THEN 1146
WHEN a=1147 THEN 1147
WHEN a=1148 THEN 1148
WHEN a=1149 THEN 1149
WHEN a=1150 THEN 1150
WHEN a=1151 THEN 1151
WHEN a=1152 THEN 1152
WHEN a=1153 THEN 1153
WHEN a=1154 THEN 1154
WHEN a=1155 THEN 1155
WHEN a=1156 THEN 1156
WHEN a=1157 THEN 1157
WHEN a=1158 THEN 1158
WHEN a=1159 THEN 1159
WHEN a=1160 THEN 1160
WHEN a=1161 THEN 1161
WHEN a=1162 THEN 1162
WHEN a=1163 THEN 1163
WHEN a=1164 THEN 1164
WHEN a=1165 THEN 1165
WHEN a=1166 THEN 1166
WHEN a=1167 THEN 1167
WHEN a=1168 THEN 1168
WHEN a=1169 THEN 1169
WHEN a=1170 THEN 1170
WHEN a=1171 THEN 1171
WHEN a=1172 THEN 1172
WHEN a=1173 THEN 1173
WHEN a=1174 THEN 1174
WHEN a=1175 THEN 1175
WHEN a=1176 THEN 1176
WHEN a=1177 THEN 1177
WHEN a=1178 THEN 1178
WHEN a=1179 THEN 1179
WHEN a=1180 THEN 1180
WHEN a=1181 THEN 1181
WHEN a=1182 THEN 1182
WHEN a=1183 THEN 1183
WHEN a=1184 THEN 1184
WHEN a=1185 THEN 1185
WHEN a=1186 THEN 1186
WHEN a=1187 THEN 1187
WHEN a=1188 THEN 1188
WHEN a=1189 THEN 1189
WHEN a=1190 THEN 1190
WHEN a=1191 THEN 1191
WHEN a=1192 THEN 1192
WHEN a=1193 THEN 1193
WHEN a=1194 THEN 1194
WHEN a=1195 THEN 1195
WHEN a=1196 THEN 1196
WHEN a=1197 THEN 1197
WHEN a=1198 THEN 1198
WHEN a=1199 THEN 1199
WHEN a=1200 THEN 1200
WHEN a=1201 THEN 1201
WHEN a=1202 THEN 1202
WHEN a=1203 THEN 1203
WHEN a=1204 THEN 1204
WHEN a=1205 THEN 1205
WHEN a=1206 THEN 1206
WHEN a=1207 THEN 1207
WHEN a=1208 THEN 1208
WHEN a=1209 THEN 1209
WHEN a=1210 THEN 1210
WHEN a=1211 THEN 1211
WHEN a=1212 THEN 1212
WHEN a=1213 THEN 1213
WHEN a=1214 THEN 1214
WHEN a=1215 THEN 1215
WHEN a=1216 THEN 1216
WHEN a=1217 THEN 1217
WHEN a=1218 THEN 1218
WHEN a=1219 THEN 1219
WHEN a=1220 THEN 1220
WHEN a=1221 THEN 1221
WHEN a=1222 THEN 1222
WHEN a=1223 THEN 1223
WHEN a=1224 THEN 1224
WHEN a=1225 THEN 1225
WHEN a=1226 THEN 1226
WHEN a=1227 THEN 1227
WHEN a=1228 THEN 1228
WHEN a=1229 THEN 1229
WHEN a=1230 THEN 1230
WHEN a=1231 THEN 1231
WHEN a=1232 THEN 1232
WHEN a=1233 THEN 1233
WHEN a=1234 THEN 1234
WHEN a=1235 THEN 1235
WHEN a=1236 THEN 1236
WHEN a=1237 THEN 1237
WHEN a=1238 THEN 1238
WHEN a=1239 THEN 1239
WHEN a=1240 THEN 1240
WHEN a=1241 THEN 1241
WHEN a=1242 THEN 1242
WHEN a=1243 THEN 1243
WHEN a=1244 THEN 1244
WHEN a=1245 THEN 1245
WHEN a=1246 THEN 1246
WHEN a=1247 THEN 1247
WHEN a=1248 THEN 1248
WHEN a=1249 THEN 1249
WHEN a=1250 THEN 1250
WHEN a=1251 THEN 1251
WHEN a=1252 THEN 1252
WHEN a=1253 THEN 1253
WHEN a=1254 THEN 1254
WHEN a=1255 THEN 1255
WHEN a=1256 THEN 1256
WHEN a=1257 THEN 1257
WHEN a=1258 THEN 1258
WHEN a=1259 THEN 1259
WHEN a=1260 THEN 1260
WHEN a=1261 THEN 1261
WHEN a=1262 THEN 1262
WHEN a=1263 THEN 1263
WHEN a=1264 THEN 1264
WHEN a=1265 THEN 1265
WHEN a=1266 THEN 1266
WHEN a=1267 THEN 1267
WHEN a=1268 THEN 1268
WHEN a=1269 THEN 1269
WHEN a=1270 THEN 1270
WHEN a=1271 THEN 1271
WHEN a=1272 THEN 1272
WHEN a=1273 THEN 1273
WHEN a=1274 THEN 1274
WHEN a=1275 THEN 1275
WHEN a=1276 THEN 1276
WHEN a=1277 THEN 1277
WHEN a=1278 THEN 1278
WHEN a=1279 THEN 1279
WHEN a=1280 THEN 1280
WHEN a=1281 THEN 1281
WHEN a=1282 THEN 1282
WHEN a=1283 THEN 1283
WHEN a=1284 THEN 1284
WHEN a=1285 THEN 1285
WHEN a=1286 THEN 1286
WHEN a=1287 THEN 1287
WHEN a=1288 THEN 1288
WHEN a=1289 THEN 1289
WHEN a=1290 THEN 1290
WHEN a=1291 THEN 1291
WHEN a=1292 THEN 1292
WHEN a=1293 THEN 1293
WHEN a=1294 THEN 1294
WHEN a=1295 THEN 1295
WHEN a=1296 THEN 1296
WHEN a=1297 THEN 1297
WHEN a=1298 THEN 1298
WHEN a=1299 THEN 1299
WHEN a=1300 THEN 1300
WHEN a=1301 THEN 1301
WHEN a=1302 THEN 1302
WHEN a=1303 THEN 1303
WHEN a=1304 THEN 1304
WHEN a=1305 THEN 1305
WHEN a=1306 THEN 1306
WHEN a=1307 THEN 1307
WHEN a=1308 THEN 1308
WHEN a=1309 THEN 1309
WHEN a=1310 THEN 1310
WHEN a=1311 THEN 1311
WHEN a=1312 THEN 1312
WHEN a=1313 THEN 1313
WHEN a=1314 THEN 1314
WHEN a=1315 THEN 1315
WHEN a=1316 THEN 1316
WHEN a=1317 THEN 1317
WHEN a=1318 THEN 1318
WHEN a=1319 THEN 1319
WHEN a=1320 THEN 1320
WHEN a=1321 THEN 1321
WHEN a=1322 THEN 1322
WHEN a=1323 THEN 1323
WHEN a=1324 THEN 1324
WHEN a=1325 THEN 1325
WHEN a=1326 THEN 1326
WHEN a=1327 THEN 1327
WHEN a=1328 THEN 1328
WHEN a=1329 THEN 1329
WHEN a=1330 THEN 1330
WHEN a=1331 THEN 1331
WHEN a=1332 THEN 1332
WHEN a=1333 THEN 1333
WHEN a=1334 THEN 1334
WHEN a=1335 THEN 1335
WHEN a=1336 THEN 1336
WHEN a=1337 THEN 1337
WHEN a=1338 THEN 1338
WHEN a=1339 THEN 1339
WHEN a=1340 THEN 1340
WHEN a=1341 THEN 1341
WHEN a=1342 THEN 1342
WHEN a=1343 THEN 1343
WHEN a=1344 THEN 1344
WHEN a=1345 THEN 1345
WHEN a=1346 THEN 1346
WHEN a=1347 THEN 1347
WHEN a=1348 THEN 1348
WHEN a=1349 THEN 1349
WHEN a=1350 THEN 1350
WHEN a=1351 THEN 1351
WHEN a=1352 THEN 1352
WHEN a=1353 THEN 1353
WHEN a=1354 THEN 1354
WHEN a=1355 THEN 1355
WHEN a=1356 THEN 1356
WHEN a=1357 THEN 1357
WHEN a=1358 THEN 1358
WHEN a=1359 THEN 1359
WHEN a=1360 THEN 1360
WHEN a=1361 THEN 1361
WHEN a=1362 THEN 1362
WHEN a=1363 THEN 1363
WHEN a=1364 THEN 1364
WHEN a=1365 THEN 1365
WHEN a=1366 THEN 1366
WHEN a=1367 THEN 1367
WHEN a=1368 THEN 1368
WHEN a=1369 THEN 1369
WHEN a=1370 THEN 1370
WHEN a=1371 THEN 1371
WHEN a=1372 THEN 1372
WHEN a=1373 THEN 1373
WHEN a=1374 THEN 1374
WHEN a=1375 THEN 1375
WHEN a=1376 THEN 1376
WHEN a=1377 THEN 1377
WHEN a=1378 THEN 1378
WHEN a=1379 THEN 1379
WHEN a=1380 THEN 1380
WHEN a=1381 THEN 1381
WHEN a=1382 THEN 1382
WHEN a=1383 THEN 1383
WHEN a=1384 THEN 1384
WHEN a=1385 THEN 1385
WHEN a=1386 THEN 1386
WHEN a=1387 THEN 1387
WHEN a=1388 THEN 1388
WHEN a=1389 THEN 1389
WHEN a=1390 THEN 1390
WHEN a=1391 THEN 1391
WHEN a=1392 THEN 1392
WHEN a=1393 THEN 1393
WHEN a=1394 THEN 1394
WHEN a=1395 THEN 1395
WHEN a=1396 THEN 1396
WHEN a=1397 THEN 1397
WHEN a=1398 THEN 1398
WHEN a=1399 THEN 1399
WHEN a=1400 THEN 1400
WHEN a=1401 THEN 1401
WHEN a=1402 THEN 1402
WHEN a=1403 THEN 1403
WHEN a=1404 THEN 1404
WHEN a=1405 THEN 1405
WHEN a=1406 THEN 1406
WHEN a=1407 THEN 1407
WHEN a=1408 THEN 1408
WHEN a=1409 THEN 1409
WHEN a=1410 THEN 1410
WHEN a=1411 THEN 1411
WHEN a=1412 THEN 1412
WHEN a=1413 THEN 1413
WHEN a=1414 THEN 1414
WHEN a=1415 THEN 1415
WHEN a=1416 THEN 1416
WHEN a=1417 THEN 1417
WHEN a=1418 THEN 1418
WHEN a=1419 THEN 1419
WHEN a=1420 THEN 1420
WHEN a=1421 THEN 1421
WHEN a=1422 THEN 1422
WHEN a=1423 THEN 1423
WHEN a=1424 THEN 1424
WHEN a=1425 THEN 1425
WHEN a=1426 THEN 1426
WHEN a=1427 THEN 1427
WHEN a=1428 THEN 1428
WHEN a=1429 THEN 1429
WHEN a=1430 THEN 1430
WHEN a=1431 THEN 1431
WHEN a=1432 THEN 1432
WHEN a=1433 THEN 1433
WHEN a=1434 THEN 1434
WHEN a=1435 THEN 1435
WHEN a=1436 THEN 1436
WHEN a=1437 THEN 1437
WHEN a=1438 THEN 1438
WHEN a=1439 THEN 1439
WHEN a=1440 THEN 1440
WHEN a=1441 THEN 1441
WHEN a=1442 THEN 1442
WHEN a=1443 THEN 1443
WHEN a=1444 THEN 1444
WHEN a=1445 THEN 1445
WHEN a=1446 THEN 1446
WHEN a=1447 THEN 1447
WHEN a=1448 THEN 1448
WHEN a=1449 THEN 1449
WHEN a=1450 THEN 1450
WHEN a=1451 THEN 1451
WHEN a=1452 THEN 1452
WHEN a=1453 THEN 1453
WHEN a=1454 THEN 1454
WHEN a=1455 THEN 1455
WHEN a=1456 THEN 1456
WHEN a=1457 THEN 1457
WHEN a=1458 THEN 1458
WHEN a=1459 THEN 1459
WHEN a=1460 THEN 1460
WHEN a=1461 THEN 1461
WHEN a=1462 THEN 1462
WHEN a=1463 THEN 1463
WHEN a=1464 THEN 1464
WHEN a=1465 THEN 1465
WHEN a=1466 THEN 1466
WHEN a=1467 THEN 1467
WHEN a=1468 THEN 1468
WHEN a=1469 THEN 1469
WHEN a=1470 THEN 1470
WHEN a=1471 THEN 1471
WHEN a=1472 THEN 1472
WHEN a=1473 THEN 1473
WHEN a=1474 THEN 1474
WHEN a=1475 THEN 1475
WHEN a=1476 THEN 1476
WHEN a=1477 THEN 1477
WHEN a=1478 THEN 1478
WHEN a=1479 THEN 1479
WHEN a=1480 THEN 1480
WHEN a=1481 THEN 1481
WHEN a=1482 THEN 1482
WHEN a=1483 THEN 1483
WHEN a=1484 THEN 1484
WHEN a=1485 THEN 1485
WHEN a=1486 THEN 1486
WHEN a=1487 THEN 1487
WHEN a=1488 THEN 1488
WHEN a=1489 THEN 1489
WHEN a=1490 THEN 1490
WHEN a=1491 THEN 1491
WHEN a=1492 THEN 1492
WHEN a=1493 THEN 1493
WHEN a=1494 THEN 1494
WHEN a=1495 THEN 1495
WHEN a=1496 THEN 1496
WHEN a=1497 THEN 1497
WHEN a=1498 THEN 1498
WHEN a=1499 THEN 1499
WHEN a=1500 THEN 1500
WHEN a=1501 THEN 1501
WHEN a=1502 THEN 1502
WHEN a=1503 THEN 1503
WHEN a=1504 THEN 1504
WHEN a=1505 THEN 1505
WHEN a=1506 THEN 1506
WHEN a=1507 THEN 1507
WHEN a=1508 THEN 1508
WHEN a=1509 THEN 1509
WHEN a=1510 THEN 1510
WHEN a=1511 THEN 1511
WHEN a=1512 THEN 1512
WHEN a=1513 THEN 1513
WHEN a=1514 THEN 1514
WHEN a=1515 THEN 1515
WHEN a=1516 THEN 1516
WHEN a=1517 THEN 1517
WHEN a=1518 THEN 1518
WHEN a=1519 THEN 1519
WHEN a=1520 THEN 1520
WHEN a=1521 THEN 1521
WHEN a=1522 THEN 1522
WHEN a=1523 THEN 1523
WHEN a=1524 THEN 1524
WHEN a=1525 THEN 1525
WHEN a=1526 THEN 1526
WHEN a=1527 THEN 1527
WHEN a=1528 THEN 1528
WHEN a=1529 THEN 1529
WHEN a=1530 THEN 1530
WHEN a=1531 THEN 1531
WHEN a=1532 THEN 1532
WHEN a=1533 THEN 1533
WHEN a=1534 THEN 1534
WHEN a=1535 THEN 1535
WHEN a=1536 THEN 1536
WHEN a=1537 THEN 1537
WHEN a=1538 THEN 1538
WHEN a=1539 THEN 1539
WHEN a=1540 THEN 1540
WHEN a=1541 THEN 1541
WHEN a=1542 THEN 1542
WHEN a=1543 THEN 1543
WHEN a=1544 THEN 1544
WHEN a=1545 THEN 1545
WHEN a=1546 THEN 1546
WHEN a=1547 THEN 1547
WHEN a=1548 THEN 1548
WHEN a=1549 THEN 1549
WHEN a=1550 THEN 1550
WHEN a=1551 THEN 1551
WHEN a=1552 THEN 1552
WHEN a=1553 THEN 1553
WHEN a=1554 THEN 1554
WHEN a=1555 THEN 1555
WHEN a=1556 THEN 1556
WHEN a=1557 THEN 1557
WHEN a=1558 THEN 1558
WHEN a=1559 THEN 1559
WHEN a=1560 THEN 1560
WHEN a=1561 THEN 1561
WHEN a=1562 THEN 1562
WHEN a=1563 THEN 1563
WHEN a=1564 THEN 1564
WHEN a=1565 THEN 1565
WHEN a=1566 THEN 1566
WHEN a=1567 THEN 1567
WHEN a=1568 THEN 1568
WHEN a=1569 THEN 1569
WHEN a=1570 THEN 1570
WHEN a=1571 THEN 1571
WHEN a=1572 THEN 1572
WHEN a=1573 THEN 1573
WHEN a=1574 THEN 1574
WHEN a=1575 THEN 1575
WHEN a=1576 THEN 1576
WHEN a=1577 THEN 1577
WHEN a=1578 THEN 1578
WHEN a=1579 THEN 1579
WHEN a=1580 THEN 1580
WHEN a=1581 THEN 1581
WHEN a=1582 THEN 1582
WHEN a=1583 THEN 1583
WHEN a=1584 THEN 1584
WHEN a=1585 THEN 1585
WHEN a=1586 THEN 1586
WHEN a=1587 THEN 1587
WHEN a=1588 THEN 1588
WHEN a=1589 THEN 1589
WHEN a=1590 THEN 1590
WHEN a=1591 THEN 1591
WHEN a=1592 THEN 1592
WHEN a=1593 THEN 1593
WHEN a=1594 THEN 1594
WHEN a=1595 THEN 1595
WHEN a=1596 THEN 1596
WHEN a=1597 THEN 1597
WHEN a=1598 THEN 1598
WHEN a=1599 THEN 1599
WHEN a=1600 THEN 1600
WHEN a=1601 THEN 1601
WHEN a=1602 THEN 1602
WHEN a=1603 THEN 1603
WHEN a=1604 THEN 1604
WHEN a=1605 THEN 1605
WHEN a=1606 THEN 1606
WHEN a=1607 THEN 1607
WHEN a=1608 THEN 1608
WHEN a=1609 THEN 1609
WHEN a=1610 THEN 1610
WHEN a=1611 THEN 1611
WHEN a=1612 THEN 1612
WHEN a=1613 THEN 1613
WHEN a=1614 THEN 1614
WHEN a=1615 THEN 1615
WHEN a=1616 THEN 1616
WHEN a=1617 THEN 1617
WHEN a=1618 THEN 1618
WHEN a=1619 THEN 1619
WHEN a=1620 THEN 1620
WHEN a=1621 THEN 1621
WHEN a=1622 THEN 1622
WHEN a=1623 THEN 1623
WHEN a=1624 THEN 1624
WHEN a=1625 THEN 1625
WHEN a=1626 THEN 1626
WHEN a=1627 THEN 1627
WHEN a=1628 THEN 1628
WHEN a=1629 THEN 1629
WHEN a=1630 THEN 1630
WHEN a=1631 THEN 1631
WHEN a=1632 THEN 1632
WHEN a=1633 THEN 1633
WHEN a=1634 THEN 1634
WHEN a=1635 THEN 1635
WHEN a=1636 THEN 1636
WHEN a=1637 THEN 1637
WHEN a=1638 THEN 1638
WHEN a=1639 THEN 1639
WHEN a=1640 THEN 1640
WHEN a=1641 THEN 1641
WHEN a=1642 THEN 1642
WHEN a=1643 THEN 1643
WHEN a=1644 THEN 1644
WHEN a=1645 THEN 1645
WHEN a=1646 THEN 1646
WHEN a=1647 THEN 1647
WHEN a=1648 THEN 1648
WHEN a=1649 THEN 1649
WHEN a=1650 THEN 1650
WHEN a=1651 THEN 1651
WHEN a=1652 THEN 1652
WHEN a=1653 THEN 1653
WHEN a=1654 THEN 1654
WHEN a=1655 THEN 1655
WHEN a=1656 THEN 1656
WHEN a=1657 THEN 1657
WHEN a=1658 THEN 1658
WHEN a=1659 THEN 1659
WHEN a=1660 THEN 1660
WHEN a=1661 THEN 1661
WHEN a=1662 THEN 1662
WHEN a=1663 THEN 1663
WHEN a=1664 THEN 1664
WHEN a=1665 THEN 1665
WHEN a=1666 THEN 1666
WHEN a=1667 THEN 1667
WHEN a=1668 THEN 1668
WHEN a=1669 THEN 1669
WHEN a=1670 THEN 1670
WHEN a=1671 THEN 1671
WHEN a=1672 THEN 1672
WHEN a=1673 THEN 1673
WHEN a=1674 THEN 1674
WHEN a=1675 THEN 1675
WHEN a=1676 THEN 1676
WHEN a=1677 THEN 1677
WHEN a=1678 THEN 1678
WHEN a=1679 THEN 1679
WHEN a=1680 THEN 1680
WHEN a=1681 THEN 1681
WHEN a=1682 THEN 1682
WHEN a=1683 THEN 1683
WHEN a=1684 THEN 1684
WHEN a=1685 THEN 1685
WHEN a=1686 THEN 1686
WHEN a=1687 THEN 1687
WHEN a=1688 THEN 1688
WHEN a=1689 THEN 1689
WHEN a=1690 THEN 1690
WHEN a=1691 THEN 1691
WHEN a=1692 THEN 1692
WHEN a=1693 THEN 1693
WHEN a=1694 THEN 1694
WHEN a=1695 THEN 1695
WHEN a=1696 THEN 1696
WHEN a=1697 THEN 1697
WHEN a=1698 THEN 1698
WHEN a=1699 THEN 1699
WHEN a=1700 THEN 1700
WHEN a=1701 THEN 1701
WHEN a=1702 THEN 1702
WHEN a=1703 THEN 1703
WHEN a=1704 THEN 1704
WHEN a=1705 THEN 1705
WHEN a=1706 THEN 1706
WHEN a=1707 THEN 1707
WHEN a=1708 THEN 1708
WHEN a=1709 THEN 1709
WHEN a=1710 THEN 1710
WHEN a=1711 THEN 1711
WHEN a=1712 THEN 1712
WHEN a=1713 THEN 1713
WHEN a=1714 THEN 1714
WHEN a=1715 THEN 1715
WHEN a=1716 THEN 1716
WHEN a=1717 THEN 1717
WHEN a=1718 THEN 1718
WHEN a=1719 THEN 1719
WHEN a=1720 THEN 1720
WHEN a=1721 THEN 1721
WHEN a=1722 THEN 1722
WHEN a=1723 THEN 1723
WHEN a=1724 THEN 1724
WHEN a=1725 THEN 1725
WHEN a=1726 THEN 1726
WHEN a=1727 THEN 1727
WHEN a=1728 THEN 1728
WHEN a=1729 THEN 1729
WHEN a=1730 THEN 1730
WHEN a=1731 THEN 1731
WHEN a=1732 THEN 1732
WHEN a=1733 THEN 1733
WHEN a=1734 THEN 1734
WHEN a=1735 THEN 1735
WHEN a=1736 THEN 1736
WHEN a=1737 THEN 1737
WHEN a=1738 THEN 1738
WHEN a=1739 THEN 1739
WHEN a=1740 THEN 1740
WHEN a=1741 THEN 1741
WHEN a=1742 THEN 1742
WHEN a=1743 THEN 1743
WHEN a=1744 THEN 1744
WHEN a=1745 THEN 1745
WHEN a=1746 THEN 1746
WHEN a=1747 THEN 1747
WHEN a=1748 THEN 1748
WHEN a=1749 THEN 1749
WHEN a=1750 THEN 1750
WHEN a=1751 THEN 1751
WHEN a=1752 THEN 1752
WHEN a=1753 THEN 1753
WHEN a=1754 THEN 1754
WHEN a=1755 THEN 1755
WHEN a=1756 THEN 1756
WHEN a=1757 THEN 1757
WHEN a=1758 THEN 1758
WHEN a=1759 THEN 1759
WHEN a=1760 THEN 1760
WHEN a=1761 THEN 1761
WHEN a=1762 THEN 1762
WHEN a=1763 THEN 1763
WHEN a=1764 THEN 1764
WHEN a=1765 THEN 1765
WHEN a=1766 THEN 1766
WHEN a=1767 THEN 1767
WHEN a=1768 THEN 1768
WHEN a=1769 THEN 1769
WHEN a=1770 THEN 1770
WHEN a=1771 THEN 1771
WHEN a=1772 THEN 1772
WHEN a=1773 THEN 1773
WHEN a=1774 THEN 1774
WHEN a=1775 THEN 1775
WHEN a=1776 THEN 1776
WHEN a=1777 THEN 1777
WHEN a=1778 THEN 1778
WHEN a=1779 THEN 1779
WHEN a=1780 THEN 1780
WHEN a=1781 THEN 1781
WHEN a=1782 THEN 1782
WHEN a=1783 THEN 1783
WHEN a=1784 THEN 1784
WHEN a=1785 THEN 1785
WHEN a=1786 THEN 1786
WHEN a=1787 THEN 1787
WHEN a=1788 THEN 1788
WHEN a=1789 THEN 1789
WHEN a=1790 THEN 1790
WHEN a=1791 THEN 1791
WHEN a=1792 THEN 1792
WHEN a=1793 THEN 1793
WHEN a=1794 THEN 1794
WHEN a=1795 THEN 1795
WHEN a=1796 THEN 1796
WHEN a=1797 THEN 1797
WHEN a=1798 THEN 1798
WHEN a=1799 THEN 1799
WHEN a=1800 THEN 1800
WHEN a=1801 THEN 1801
WHEN a=1802 THEN 1802
WHEN a=1803 THEN 1803
WHEN a=1804 THEN 1804
WHEN a=1805 THEN 1805
WHEN a=1806 THEN 1806
WHEN a=1807 THEN 1807
WHEN a=1808 THEN 1808
WHEN a=1809 THEN 1809
WHEN a=1810 THEN 1810
WHEN a=1811 THEN 1811
WHEN a=1812 THEN 1812
WHEN a=1813 THEN 1813
WHEN a=1814 THEN 1814
WHEN a=1815 THEN 1815
WHEN a=1816 THEN 1816
WHEN a=1817 THEN 1817
WHEN a=1818 THEN 1818
WHEN a=1819 THEN 1819
WHEN a=1820 THEN 1820
WHEN a=1821 THEN 1821
WHEN a=1822 THEN 1822
WHEN a=1823 THEN 1823
WHEN a=1824 THEN 1824
WHEN a=1825 THEN 1825
WHEN a=1826 THEN 1826
WHEN a=1827 THEN 1827
WHEN a=1828 THEN 1828
WHEN a=1829 THEN 1829
WHEN a=1830 THEN 1830
WHEN a=1831 THEN 1831
WHEN a=1832 THEN 1832
WHEN a=1833 THEN 1833
WHEN a=1834 THEN 1834
WHEN a=1835 THEN 1835
WHEN a=1836 THEN 1836
WHEN a=1837 THEN 1837
WHEN a=1838 THEN 1838
WHEN a=1839 THEN 1839
WHEN a=1840 THEN 1840
WHEN a=1841 THEN 1841
WHEN a=1842 THEN 1842
WHEN a=1843 THEN 1843
WHEN a=1844 THEN 1844
WHEN a=1845 THEN 1845
WHEN a=1846 THEN 1846
WHEN a=1847 THEN 1847
WHEN a=1848 THEN 1848
WHEN a=1849 THEN 1849
WHEN a=1850 THEN 1850
WHEN a=1851 THEN 1851
WHEN a=1852 THEN 1852
WHEN a=1853 THEN 1853
WHEN a=1854 THEN 1854
WHEN a=1855 THEN 1855
WHEN a=1856 THEN 1856
WHEN a=1857 THEN 1857
WHEN a=1858 THEN 1858
WHEN a=1859 THEN 1859
WHEN a=1860 THEN 1860
WHEN a=1861 THEN 1861
WHEN a=1862 THEN 1862
WHEN a=1863 THEN 1863
WHEN a=1864 THEN 1864
WHEN a=1865 THEN 1865
WHEN a=1866 THEN 1866
WHEN a=1867 THEN 1867
WHEN a=1868 THEN 1868
WHEN a=1869 THEN 1869
WHEN a=1870 THEN 1870
WHEN a=1871 THEN 1871
WHEN a=1872 THEN 1872
WHEN a=1873 THEN 1873
WHEN a=1874 THEN 1874
WHEN a=1875 THEN 1875
WHEN a=1876 THEN 1876
WHEN a=1877 THEN 1877
WHEN a=1878 THEN 1878
WHEN a=1879 THEN 1879
WHEN a=1880 THEN 1880
WHEN a=1881 THEN 1881
WHEN a=1882 THEN 1882
WHEN a=1883 THEN 1883
WHEN a=1884 THEN 1884
WHEN a=1885 THEN 1885
WHEN a=1886 THEN 1886
WHEN a=1887 THEN 1887
WHEN a=1888 THEN 1888
WHEN a=1889 THEN 1889
WHEN a=1890 THEN 1890
WHEN a=1891 THEN 1891
WHEN a=1892 THEN 1892
WHEN a=1893 THEN 1893
WHEN a=1894 THEN 1894
WHEN a=1895 THEN 1895
WHEN a=1896 THEN 1896
WHEN a=1897 THEN 1897
WHEN a=1898 THEN 1898
WHEN a=1899 THEN 1899
WHEN a=1900 THEN 1900
WHEN a=1901 THEN 1901
WHEN a=1902 THEN 1902
WHEN a=1903 THEN 1903
WHEN a=1904 THEN 1904
WHEN a=1905 THEN 1905
WHEN a=1906 THEN 1906
WHEN a=1907 THEN 1907
WHEN a=1908 THEN 1908
WHEN a=1909 THEN 1909
WHEN a=1910 THEN 1910
WHEN a=1911 THEN 1911
WHEN a=1912 THEN 1912
WHEN a=1913 THEN 1913
WHEN a=1914 THEN 1914
WHEN a=1915 THEN 1915
WHEN a=1916 THEN 1916
WHEN a=1917 THEN 1917
WHEN a=1918 THEN 1918
WHEN a=1919 THEN 1919
WHEN a=1920 THEN 1920
WHEN a=1921 THEN 1921
WHEN a=1922 THEN 1922
WHEN a=1923 THEN 1923
WHEN a=1924 THEN 1924
WHEN a=1925 THEN 1925
WHEN a=1926 THEN 1926
WHEN a=1927 THEN 1927
WHEN a=1928 THEN 1928
WHEN a=1929 THEN 1929
WHEN a=1930 THEN 1930
WHEN a=1931 THEN 1931
WHEN a=1932 THEN 1932
WHEN a=1933 THEN 1933
WHEN a=1934 THEN 1934
WHEN a=1935 THEN 1935
WHEN a=1936 THEN 1936
WHEN a=1937 THEN 1937
WHEN a=1938 THEN 1938
WHEN a=1939 THEN 1939
WHEN a=1940 THEN 1940
WHEN a=1941 THEN 1941
WHEN a=1942 THEN 1942
WHEN a=1943 THEN 1943
WHEN a=1944 THEN 1944
WHEN a=1945 THEN 1945
WHEN a=1946 THEN 1946
WHEN a=1947 THEN 1947
WHEN a=1948 THEN 1948
WHEN a=1949 THEN 1949
WHEN a=1950 THEN 1950
WHEN a=1951 THEN 1951
WHEN a=1952 THEN 1952
WHEN a=1953 THEN 1953
WHEN a=1954 THEN 1954
WHEN a=1955 THEN 1955
WHEN a=1956 THEN 1956
WHEN a=1957 THEN 1957
WHEN a=1958 THEN 1958
WHEN a=1959 THEN 1959
WHEN a=1960 THEN 1960
WHEN a=1961 THEN 1961
WHEN a=1962 THEN 1962
WHEN a=1963 THEN 1963
WHEN a=1964 THEN 1964
WHEN a=1965 THEN 1965
WHEN a=1966 THEN 1966
WHEN a=1967 THEN 1967
WHEN a=1968 THEN 1968
WHEN a=1969 THEN 1969
WHEN a=1970 THEN 1970
WHEN a=1971 THEN 1971
WHEN a=1972 THEN 1972
WHEN a=1973 THEN 1973
WHEN a=1974 THEN 1974
WHEN a=1975 THEN 1975
WHEN a=1976 THEN 1976
WHEN a=1977 THEN 1977
WHEN a=1978 THEN 1978
WHEN a=1979 THEN 1979
WHEN a=1980 THEN 1980
WHEN a=1981 THEN 1981
WHEN a=1982 THEN 1982
WHEN a=1983 THEN 1983
WHEN a=1984 THEN 1984
WHEN a=1985 THEN 1985
WHEN a=1986 THEN 1986
WHEN a=1987 THEN 1987
WHEN a=1988 THEN 1988
WHEN a=1989 THEN 1989
WHEN a=1990 THEN 1990
WHEN a=1991 THEN 1991
WHEN a=1992 THEN 1992
WHEN a=1993 THEN 1993
WHEN a=1994 THEN 1994
WHEN a=1995 THEN 1995
WHEN a=1996 THEN 1996
WHEN a=1997 THEN 1997
WHEN a=1998 THEN 1998
WHEN a=1999 THEN 1999
WHEN a=2000 THEN 2000
WHEN a=2001 THEN 2001
WHEN a=2002 THEN 2002
WHEN a=2003 THEN 2003
WHEN a=2004 THEN 2004
WHEN a=2005 THEN 2005
WHEN a=2006 THEN 2006
WHEN a=2007 THEN 2007
WHEN a=2008 THEN 2008
WHEN a=2009 THEN 2009
WHEN a=2010 THEN 2010
WHEN a=2011 THEN 2011
WHEN a=2012 THEN 2012
WHEN a=2013 THEN 2013
WHEN a=2014 THEN 2014
WHEN a=2015 THEN 2015
WHEN a=2016 THEN 2016
WHEN a=2017 THEN 2017
WHEN a=2018 THEN 2018
WHEN a=2019 THEN 2019
WHEN a=2020 THEN 2020
WHEN a=2021 THEN 2021
WHEN a=2022 THEN 2022
WHEN a=2023 THEN 2023
WHEN a=2024 THEN 2024
WHEN a=2025 THEN 2025
WHEN a=2026 THEN 2026
WHEN a=2027 THEN 2027
WHEN a=2028 THEN 2028
WHEN a=2029 THEN 2029
WHEN a=2030 THEN 2030
WHEN a=2031 THEN 2031
WHEN a=2032 THEN 2032
WHEN a=2033 THEN 2033
WHEN a=2034 THEN 2034
WHEN a=2035 THEN 2035
WHEN a=2036 THEN 2036
WHEN a=2037 THEN 2037
WHEN a=2038 THEN 2038
WHEN a=2039 THEN 2039
WHEN a=2040 THEN 2040
WHEN a=2041 THEN 2041
WHEN a=2042 THEN 2042
WHEN a=2043 THEN 2043
WHEN a=2044 THEN 2044
WHEN a=2045 THEN 2045
WHEN a=2046 THEN 2046
WHEN a=2047 THEN 2047
WHEN a=2048 THEN 2048
WHEN a=2049 THEN 2049
WHEN a=2050 THEN 2050
WHEN a=2051 THEN 2051
WHEN a=2052 THEN 2052
WHEN a=2053 THEN 2053
WHEN a=2054 THEN 2054
WHEN a=2055 THEN 2055
WHEN a=2056 THEN 2056
WHEN a=2057 THEN 2057
WHEN a=2058 THEN 2058
WHEN a=2059 THEN 2059
WHEN a=2060 THEN 2060
WHEN a=2061 THEN 2061
WHEN a=2062 THEN 2062
WHEN a=2063 THEN 2063
WHEN a=2064 THEN 2064
WHEN a=2065 THEN 2065
WHEN a=2066 THEN 2066
WHEN a=2067 THEN 2067
WHEN a=2068 THEN 2068
WHEN a=2069 THEN 2069
WHEN a=2070 THEN 2070
WHEN a=2071 THEN 2071
WHEN a=2072 THEN 2072
WHEN a=2073 THEN 2073
WHEN a=2074 THEN 2074
WHEN a=2075 THEN 2075
WHEN a=2076 THEN 2076
WHEN a=2077 THEN 2077
WHEN a=2078 THEN 2078
WHEN a=2079 THEN 2079
WHEN a=2080 THEN 2080
WHEN a=2081 THEN 2081
WHEN a=2082 THEN 2082
WHEN a=2083 THEN 2083
WHEN a=2084 THEN 2084
WHEN a=2085 THEN 2085
WHEN a=2086 THEN 2086
WHEN a=2087 THEN 2087
WHEN a=2088 THEN 2088
WHEN a=2089 THEN 2089
WHEN a=2090 THEN 2090
WHEN a=2091 THEN 2091
WHEN a=2092 THEN 2092
WHEN a=2093 THEN 2093
WHEN a=2094 THEN 2094
WHEN a=2095 THEN 2095
WHEN a=2096 THEN 2096
WHEN a=2097 THEN 2097
WHEN a=2098 THEN 2098
WHEN a=2099 THEN 2099
WHEN a=2100 THEN 2100
WHEN a=2101 THEN 2101
WHEN a=2102 THEN 2102
WHEN a=2103 THEN 2103
WHEN a=2104 THEN 2104
WHEN a=2105 THEN 2105
WHEN a=2106 THEN 2106
WHEN a=2107 THEN 2107
WHEN a=2108 THEN 2108
WHEN a=2109 THEN 2109
WHEN a=2110 THEN 2110
WHEN a=2111 THEN 2111
WHEN a=2112 THEN 2112
WHEN a=2113 THEN 2113
WHEN a=2114 THEN 2114
WHEN a=2115 THEN 2115
WHEN a=2116 THEN 2116
WHEN a=2117 THEN 2117
WHEN a=2118 THEN 2118
WHEN a=2119 THEN 2119
WHEN a=2120 THEN 2120
WHEN a=2121 THEN 2121
WHEN a=2122 THEN 2122
WHEN a=2123 THEN 2123
WHEN a=2124 THEN 2124
WHEN a=2125 THEN 2125
WHEN a=2126 THEN 2126
WHEN a=2127 THEN 2127
WHEN a=2128 THEN 2128
WHEN a=2129 THEN 2129
WHEN a=2130 THEN 2130
WHEN a=2131 THEN 2131
WHEN a=2132 THEN 2132
WHEN a=2133 THEN 2133
WHEN a=2134 THEN 2134
WHEN a=2135 THEN 2135
WHEN a=2136 THEN 2136
WHEN a=2137 THEN 2137
WHEN a=2138 THEN 2138
WHEN a=2139 THEN 2139
WHEN a=2140 THEN 2140
WHEN a=2141 THEN 2141
WHEN a=2142 THEN 2142
WHEN a=2143 THEN 2143
WHEN a=2144 THEN 2144
WHEN a=2145 THEN 2145
WHEN a=2146 THEN 2146
WHEN a=2147 THEN 2147
WHEN a=2148 THEN 2148
WHEN a=2149 THEN 2149
WHEN a=2150 THEN 2150
WHEN a=2151 THEN 2151
WHEN a=2152 THEN 2152
WHEN a=2153 THEN 2153
WHEN a=2154 THEN 2154
WHEN a=2155 THEN 2155
WHEN a=2156 THEN 2156
WHEN a=2157 THEN 2157
WHEN a=2158 THEN 2158
WHEN a=2159 THEN 2159
WHEN a=2160 THEN 2160
WHEN a=2161 THEN 2161
WHEN a=2162 THEN 2162
WHEN a=2163 THEN 2163
WHEN a=2164 THEN 2164
WHEN a=2165 THEN 2165
WHEN a=2166 THEN 2166
WHEN a=2167 THEN 2167
WHEN a=2168 THEN 2168
WHEN a=2169 THEN 2169
WHEN a=2170 THEN 2170
WHEN a=2171 THEN 2171
WHEN a=2172 THEN 2172
WHEN a=2173 THEN 2173
WHEN a=2174 THEN 2174
WHEN a=2175 THEN 2175
WHEN a=2176 THEN 2176
WHEN a=2177 THEN 2177
WHEN a=2178 THEN 2178
WHEN a=2179 THEN 2179
WHEN a=2180 THEN 2180
WHEN a=2181 THEN 2181
WHEN a=2182 THEN 2182
WHEN a=2183 THEN 2183
WHEN a=2184 THEN 2184
WHEN a=2185 THEN 2185
WHEN a=2186 THEN 2186
WHEN a=2187 THEN 2187
WHEN a=2188 THEN 2188
WHEN a=2189 THEN 2189
WHEN a=2190 THEN 2190
WHEN a=2191 THEN 2191
WHEN a=2192 THEN 2192
WHEN a=2193 THEN 2193
WHEN a=2194 THEN 2194
WHEN a=2195 THEN 2195
WHEN a=2196 THEN 2196
WHEN a=2197 THEN 2197
WHEN a=2198 THEN 2198
WHEN a=2199 THEN 2199
WHEN a=2200 THEN 2200
WHEN a=2201 THEN 2201
WHEN a=2202 THEN 2202
WHEN a=2203 THEN 2203
WHEN a=2204 THEN 2204
WHEN a=2205 THEN 2205
WHEN a=2206 THEN 2206
WHEN a=2207 THEN 2207
WHEN a=2208 THEN 2208
WHEN a=2209 THEN 2209
WHEN a=2210 THEN 2210
WHEN a=2211 THEN 2211
WHEN a=2212 THEN 2212
WHEN a=2213 THEN 2213
WHEN a=2214 THEN 2214
WHEN a=2215 THEN 2215
WHEN a=2216 THEN 2216
WHEN a=2217 THEN 2217
WHEN a=2218 THEN 2218
WHEN a=2219 THEN 2219
WHEN a=2220 THEN 2220
WHEN a=2221 THEN 2221
WHEN a=2222 THEN 2222
WHEN a=2223 THEN 2223
WHEN a=2224 THEN 2224
WHEN a=2225 THEN 2225
WHEN a=2226 THEN 2226
WHEN a=2227 THEN 2227
WHEN a=2228 THEN 2228
WHEN a=2229 THEN 2229
WHEN a=2230 THEN 2230
WHEN a=2231 THEN 2231
WHEN a=2232 THEN 2232
WHEN a=2233 THEN 2233
WHEN a=2234 THEN 2234
WHEN a=2235 THEN 2235
WHEN a=2236 THEN 2236
WHEN a=2237 THEN 2237
WHEN a=2238 THEN 2238
WHEN a=2239 THEN 2239
WHEN a=2240 THEN 2240
WHEN a=2241 THEN 2241
WHEN a=2242 THEN 2242
WHEN a=2243 THEN 2243
WHEN a=2244 THEN 2244
WHEN a=2245 THEN 2245
WHEN a=2246 THEN 2246
WHEN a=2247 THEN 2247
WHEN a=2248 THEN 2248
WHEN a=2249 THEN 2249
WHEN a=2250 THEN 2250
WHEN a=2251 THEN 2251
WHEN a=2252 THEN 2252
WHEN a=2253 THEN 2253
WHEN a=2254 THEN 2254
WHEN a=2255 THEN 2255
WHEN a=2256 THEN 2256
WHEN a=2257 THEN 2257
WHEN a=2258 THEN 2258
WHEN a=2259 THEN 2259
WHEN a=2260 THEN 2260
WHEN a=2261 THEN 2261
WHEN a=2262 THEN 2262
WHEN a=2263 THEN 2263
WHEN a=2264 THEN 2264
WHEN a=2265 THEN 2265
WHEN a=2266 THEN 2266
WHEN a=2267 THEN 2267
WHEN a=2268 THEN 2268
WHEN a=2269 THEN 2269
WHEN a=2270 THEN 2270
WHEN a=2271 THEN 2271
WHEN a=2272 THEN 2272
WHEN a=2273 THEN 2273
WHEN a=2274 THEN 2274
WHEN a=2275 THEN 2275
WHEN a=2276 THEN 2276
WHEN a=2277 THEN 2277
WHEN a=2278 THEN 2278
WHEN a=2279 THEN 2279
WHEN a=2280 THEN 2280
WHEN a=2281 THEN 2281
WHEN a=2282 THEN 2282
WHEN a=2283 THEN 2283
WHEN a=2284 THEN 2284
WHEN a=2285 THEN 2285
WHEN a=2286 THEN 2286
WHEN a=2287 THEN 2287
WHEN a=2288 THEN 2288
WHEN a=2289 THEN 2289
WHEN a=2290 THEN 2290
WHEN a=2291 THEN 2291
WHEN a=2292 THEN 2292
WHEN a=2293 THEN 2293
WHEN a=2294 THEN 2294
WHEN a=2295 THEN 2295
WHEN a=2296 THEN 2296
WHEN a=2297 THEN 2297
WHEN a=2298 THEN 2298
WHEN a=2299 THEN 2299
WHEN a=2300 THEN 2300
WHEN a=2301 THEN 2301
WHEN a=2302 THEN 2302
WHEN a=2303 THEN 2303
WHEN a=2304 THEN 2304
WHEN a=2305 THEN 2305
WHEN a=2306 THEN 2306
WHEN a=2307 THEN 2307
WHEN a=2308 THEN 2308
WHEN a=2309 THEN 2309
WHEN a=2310 THEN 2310
WHEN a=2311 THEN 2311
WHEN a=2312 THEN 2312
WHEN a=2313 THEN 2313
WHEN a=2314 THEN 2314
WHEN a=2315 THEN 2315
WHEN a=2316 THEN 2316
WHEN a=2317 THEN 2317
WHEN a=2318 THEN 2318
WHEN a=2319 THEN 2319
WHEN a=2320 THEN 2320
WHEN a=2321 THEN 2321
WHEN a=2322 THEN 2322
WHEN a=2323 THEN 2323
WHEN a=2324 THEN 2324
WHEN a=2325 THEN 2325
WHEN a=2326 THEN 2326
WHEN a=2327 THEN 2327
WHEN a=2328 THEN 2328
WHEN a=2329 THEN 2329
WHEN a=2330 THEN 2330
WHEN a=2331 THEN 2331
WHEN a=2332 THEN 2332
WHEN a=2333 THEN 2333
WHEN a=2334 THEN 2334
WHEN a=2335 THEN 2335
WHEN a=2336 THEN 2336
WHEN a=2337 THEN 2337
WHEN a=2338 THEN 2338
WHEN a=2339 THEN 2339
WHEN a=2340 THEN 2340
WHEN a=2341 THEN 2341
WHEN a=2342 THEN 2342
WHEN a=2343 THEN 2343
WHEN a=2344 THEN 2344
WHEN a=2345 THEN 2345
WHEN a=2346 THEN 2346
WHEN a=2347 THEN 2347
WHEN a=2348 THEN 2348
WHEN a=2349 THEN 2349
WHEN a=2350 THEN 2350
WHEN a=2351 THEN 2351
WHEN a=2352 THEN 2352
WHEN a=2353 THEN 2353
WHEN a=2354 THEN 2354
WHEN a=2355 THEN 2355
WHEN a=2356 THEN 2356
WHEN a=2357 THEN 2357
WHEN a=2358 THEN 2358
WHEN a=2359 THEN 2359
WHEN a=2360 THEN 2360
WHEN a=2361 THEN 2361
WHEN a=2362 THEN 2362
WHEN a=2363 THEN 2363
WHEN a=2364 THEN 2364
WHEN a=2365 THEN 2365
WHEN a=2366 THEN 2366
WHEN a=2367 THEN 2367
WHEN a=2368 THEN 2368
WHEN a=2369 THEN 2369
WHEN a=2370 THEN 2370
WHEN a=2371 THEN 2371
WHEN a=2372 THEN 2372
WHEN a=2373 THEN 2373
WHEN a=2374 THEN 2374
WHEN a=2375 THEN 2375
WHEN a=2376 THEN 2376
WHEN a=2377 THEN 2377
WHEN a=2378 THEN 2378
WHEN a=2379 THEN 2379
WHEN a=2380 THEN 2380
WHEN a=2381 THEN 2381
WHEN a=2382 THEN 2382
WHEN a=2383 THEN 2383
WHEN a=2384 THEN 2384
WHEN a=2385 THEN 2385
WHEN a=2386 THEN 2386
WHEN a=2387 THEN 2387
WHEN a=2388 THEN 2388
WHEN a=2389 THEN 2389
WHEN a=2390 THEN 2390
WHEN a=2391 THEN 2391
WHEN a=2392 THEN 2392
WHEN a=2393 THEN 2393
WHEN a=2394 THEN 2394
WHEN a=2395 THEN 2395
WHEN a=2396 THEN 2396
WHEN a=2397 THEN 2397
WHEN a=2398 THEN 2398
WHEN a=2399 THEN 2399
WHEN a=2400 THEN 2400
WHEN a=2401 THEN 2401
WHEN a=2402 THEN 2402
WHEN a=2403 THEN 2403
WHEN a=2404 THEN 2404
WHEN a=2405 THEN 2405
WHEN a=2406 THEN 2406
WHEN a=2407 THEN 2407
WHEN a=2408 THEN 2408
WHEN a=2409 THEN 2409
WHEN a=2410 THEN 2410
WHEN a=2411 THEN 2411
WHEN a=2412 THEN 2412
WHEN a=2413 THEN 2413
WHEN a=2414 THEN 2414
WHEN a=2415 THEN 2415
WHEN a=2416 THEN 2416
WHEN a=2417 THEN 2417
WHEN a=2418 THEN 2418
WHEN a=2419 THEN 2419
WHEN a=2420 THEN 2420
WHEN a=2421 THEN 2421
WHEN a=2422 THEN 2422
WHEN a=2423 THEN 2423
WHEN a=2424 THEN 2424
WHEN a=2425 THEN 2425
WHEN a=2426 THEN 2426
WHEN a=2427 THEN 2427
WHEN a=2428 THEN 2428
WHEN a=2429 THEN 2429
WHEN a=2430 THEN 2430
WHEN a=2431 THEN 2431
WHEN a=2432 THEN 2432
WHEN a=2433 THEN 2433
WHEN a=2434 THEN 2434
WHEN a=2435 THEN 2435
WHEN a=2436 THEN 2436
WHEN a=2437 THEN 2437
WHEN a=2438 THEN 2438
WHEN a=2439 THEN 2439
WHEN a=2440 THEN 2440
WHEN a=2441 THEN 2441
WHEN a=2442 THEN 2442
WHEN a=2443 THEN 2443
WHEN a=2444 THEN 2444
WHEN a=2445 THEN 2445
WHEN a=2446 THEN 2446
WHEN a=2447 THEN 2447
WHEN a=2448 THEN 2448
WHEN a=2449 THEN 2449
WHEN a=2450 THEN 2450
WHEN a=2451 THEN 2451
WHEN a=2452 THEN 2452
WHEN a=2453 THEN 2453
WHEN a=2454 THEN 2454
WHEN a=2455 THEN 2455
WHEN a=2456 THEN 2456
WHEN a=2457 THEN 2457
WHEN a=2458 THEN 2458
WHEN a=2459 THEN 2459
WHEN a=2460 THEN 2460
WHEN a=2461 THEN 2461
WHEN a=2462 THEN 2462
WHEN a=2463 THEN 2463
WHEN a=2464 THEN 2464
WHEN a=2465 THEN 2465
WHEN a=2466 THEN 2466
WHEN a=2467 THEN 2467
WHEN a=2468 THEN 2468
WHEN a=2469 THEN 2469
WHEN a=2470 THEN 2470
WHEN a=2471 THEN 2471
WHEN a=2472 THEN 2472
WHEN a=2473 THEN 2473
WHEN a=2474 THEN 2474
WHEN a=2475 THEN 2475
WHEN a=2476 THEN 2476
WHEN a=2477 THEN 2477
WHEN a=2478 THEN 2478
WHEN a=2479 THEN 2479
WHEN a=2480 THEN 2480
WHEN a=2481 THEN 2481
WHEN a=2482 THEN 2482
WHEN a=2483 THEN 2483
WHEN a=2484 THEN 2484
WHEN a=2485 THEN 2485
WHEN a=2486 THEN 2486
WHEN a=2487 THEN 2487
WHEN a=2488 THEN 2488
WHEN a=2489 THEN 2489
WHEN a=2490 THEN 2490
WHEN a=2491 THEN 2491
WHEN a=2492 THEN 2492
WHEN a=2493 THEN 2493
WHEN a=2494 THEN 2494
WHEN a=2495 THEN 2495
WHEN a=2496 THEN 2496
WHEN a=2497 THEN 2497
WHEN a=2498 THEN 2498
WHEN a=2499 THEN 2499
WHEN a=2500 THEN 2500
WHEN a=2501 THEN 2501
WHEN a=2502 THEN 2502
WHEN a=2503 THEN 2503
WHEN a=2504 THEN 2504
WHEN a=2505 THEN 2505
WHEN a=2506 THEN 2506
WHEN a=2507 THEN 2507
WHEN a=2508 THEN 2508
WHEN a=2509 THEN 2509
WHEN a=2510 THEN 2510
WHEN a=2511 THEN 2511
WHEN a=2512 THEN 2512
WHEN a=2513 THEN 2513
WHEN a=2514 THEN 2514
WHEN a=2515 THEN 2515
WHEN a=2516 THEN 2516
WHEN a=2517 THEN 2517
WHEN a=2518 THEN 2518
WHEN a=2519 THEN 2519
WHEN a=2520 THEN 2520
WHEN a=2521 THEN 2521
WHEN a=2522 THEN 2522
WHEN a=2523 THEN 2523
WHEN a=2524 THEN 2524
WHEN a=2525 THEN 2525
WHEN a=2526 THEN 2526
WHEN a=2527 THEN 2527
WHEN a=2528 THEN 2528
WHEN a=2529 THEN 2529
WHEN a=2530 THEN 2530
WHEN a=2531 THEN 2531
WHEN a=2532 THEN 2532
WHEN a=2533 THEN 2533
WHEN a=2534 THEN 2534
WHEN a=2535 THEN 2535
WHEN a=2536 THEN 2536
WHEN a=2537 THEN 2537
WHEN a=2538 THEN 2538
WHEN a=2539 THEN 2539
WHEN a=2540 THEN 2540
WHEN a=2541 THEN 2541
WHEN a=2542 THEN 2542
WHEN a=2543 THEN 2543
WHEN a=2544 THEN 2544
WHEN a=2545 THEN 2545
WHEN a=2546 THEN 2546
WHEN a=2547 THEN 2547
WHEN a=2548 THEN 2548
WHEN a=2549 THEN 2549
WHEN a=2550 THEN 2550
WHEN a=2551 THEN 2551
WHEN a=2552 THEN 2552
WHEN a=2553 THEN 2553
WHEN a=2554 THEN 2554
WHEN a=2555 THEN 2555
WHEN a=2556 THEN 2556
WHEN a=2557 THEN 2557
WHEN a=2558 THEN 2558
WHEN a=2559 THEN 2559
WHEN a=2560 THEN 2560
WHEN a=2561 THEN 2561
WHEN a=2562 THEN 2562
WHEN a=2563 THEN 2563
WHEN a=2564 THEN 2564
WHEN a=2565 THEN 2565
WHEN a=2566 THEN 2566
WHEN a=2567 THEN 2567
WHEN a=2568 THEN 2568
WHEN a=2569 THEN 2569
WHEN a=2570 THEN 2570
WHEN a=2571 THEN 2571
WHEN a=2572 THEN 2572
WHEN a=2573 THEN 2573
WHEN a=2574 THEN 2574
WHEN a=2575 THEN 2575
WHEN a=2576 THEN 2576
WHEN a=2577 THEN 2577
WHEN a=2578 THEN 2578
WHEN a=2579 THEN 2579
WHEN a=2580 THEN 2580
WHEN a=2581 THEN 2581
WHEN a=2582 THEN 2582
WHEN a=2583 THEN 2583
WHEN a=2584 THEN 2584
WHEN a=2585 THEN 2585
WHEN a=2586 THEN 2586
WHEN a=2587 THEN 2587
WHEN a=2588 THEN 2588
WHEN a=2589 THEN 2589
WHEN a=2590 THEN 2590
WHEN a=2591 THEN 2591
WHEN a=2592 THEN 2592
WHEN a=2593 THEN 2593
WHEN a=2594 THEN 2594
WHEN a=2595 THEN 2595
WHEN a=2596 THEN 2596
WHEN a=2597 THEN 2597
WHEN a=2598 THEN 2598
WHEN a=2599 THEN 2599
WHEN a=2600 THEN 2600
WHEN a=2601 THEN 2601
WHEN a=2602 THEN 2602
WHEN a=2603 THEN 2603
WHEN a=2604 THEN 2604
WHEN a=2605 THEN 2605
WHEN a=2606 THEN 2606
WHEN a=2607 THEN 2607
WHEN a=2608 THEN 2608
WHEN a=2609 THEN 2609
WHEN a=2610 THEN 2610
WHEN a=2611 THEN 2611
WHEN a=2612 THEN 2612
WHEN a=2613 THEN 2613
WHEN a=2614 THEN 2614
WHEN a=2615 THEN 2615
WHEN a=2616 THEN 2616
WHEN a=2617 THEN 2617
WHEN a=2618 THEN 2618
WHEN a=2619 THEN 2619
WHEN a=2620 THEN 2620
WHEN a=2621 THEN 2621
WHEN a=2622 THEN 2622
WHEN a=2623 THEN 2623
WHEN a=2624 THEN 2624
WHEN a=2625 THEN 2625
WHEN a=2626 THEN 2626
WHEN a=2627 THEN 2627
WHEN a=2628 THEN 2628
WHEN a=2629 THEN 2629
WHEN a=2630 THEN 2630
WHEN a=2631 THEN 2631
WHEN a=2632 THEN 2632
WHEN a=2633 THEN 2633
WHEN a=2634 THEN 2634
WHEN a=2635 THEN 2635
WHEN a=2636 THEN 2636
WHEN a=2637 THEN 2637
WHEN a=2638 THEN 2638
WHEN a=2639 THEN 2639
WHEN a=2640 THEN 2640
WHEN a=2641 THEN 2641
WHEN a=2642 THEN 2642
WHEN a=2643 THEN 2643
WHEN a=2644 THEN 2644
WHEN a=2645 THEN 2645
WHEN a=2646 THEN 2646
WHEN a=2647 THEN 2647
WHEN a=2648 THEN 2648
WHEN a=2649 THEN 2649
WHEN a=2650 THEN 2650
WHEN a=2651 THEN 2651
WHEN a=2652 THEN 2652
WHEN a=2653 THEN 2653
WHEN a=2654 THEN 2654
WHEN a=2655 THEN 2655
WHEN a=2656 THEN 2656
WHEN a=2657 THEN 2657
WHEN a=2658 THEN 2658
WHEN a=2659 THEN 2659
WHEN a=2660 THEN 2660
WHEN a=2661 THEN 2661
WHEN a=2662 THEN 2662
WHEN a=2663 THEN 2663
WHEN a=2664 THEN 2664
WHEN a=2665 THEN 2665
WHEN a=2666 THEN 2666
WHEN a=2667 THEN 2667
WHEN a=2668 THEN 2668
WHEN a=2669 THEN 2669
WHEN a=2670 THEN 2670
WHEN a=2671 THEN 2671
WHEN a=2672 THEN 2672
WHEN a=2673 THEN 2673
WHEN a=2674 THEN 2674
WHEN a=2675 THEN 2675
WHEN a=2676 THEN 2676
WHEN a=2677 THEN 2677
WHEN a=2678 THEN 2678
WHEN a=2679 THEN 2679
WHEN a=2680 THEN 2680
WHEN a=2681 THEN 2681
WHEN a=2682 THEN 2682
WHEN a=2683 THEN 2683
WHEN a=2684 THEN 2684
WHEN a=2685 THEN 2685
WHEN a=2686 THEN 2686
WHEN a=2687 THEN 2687
WHEN a=2688 THEN 2688
WHEN a=2689 THEN 2689
WHEN a=2690 THEN 2690
WHEN a=2691 THEN 2691
WHEN a=2692 THEN 2692
WHEN a=2693 THEN 2693
WHEN a=2694 THEN 2694
WHEN a=2695 THEN 2695
WHEN a=2696 THEN 2696
WHEN a=2697 THEN 2697
WHEN a=2698 THEN 2698
WHEN a=2699 THEN 2699
WHEN a=2700 THEN 2700
WHEN a=2701 THEN 2701
WHEN a=2702 THEN 2702
WHEN a=2703 THEN 2703
WHEN a=2704 THEN 2704
WHEN a=2705 THEN 2705
WHEN a=2706 THEN 2706
WHEN a=2707 THEN 2707
WHEN a=2708 THEN 2708
WHEN a=2709 THEN 2709
WHEN a=2710 THEN 2710
WHEN a=2711 THEN 2711
WHEN a=2712 THEN 2712
WHEN a=2713 THEN 2713
WHEN a=2714 THEN 2714
WHEN a=2715 THEN 2715
WHEN a=2716 THEN 2716
WHEN a=2717 THEN 2717
WHEN a=2718 THEN 2718
WHEN a=2719 THEN 2719
WHEN a=2720 THEN 2720
WHEN a=2721 THEN 2721
WHEN a=2722 THEN 2722
WHEN a=2723 THEN 2723
WHEN a=2724 THEN 2724
WHEN a=2725 THEN 2725
WHEN a=2726 THEN 2726
WHEN a=2727 THEN 2727
WHEN a=2728 THEN 2728
WHEN a=2729 THEN 2729
WHEN a=2730 THEN 2730
WHEN a=2731 THEN 2731
WHEN a=2732 THEN 2732
WHEN a=2733 THEN 2733
WHEN a=2734 THEN 2734
WHEN a=2735 THEN 2735
WHEN a=2736 THEN 2736
WHEN a=2737 THEN 2737
WHEN a=2738 THEN 2738
WHEN a=2739 THEN 2739
WHEN a=2740 THEN 2740
WHEN a=2741 THEN 2741
WHEN a=2742 THEN 2742
WHEN a=2743 THEN 2743
WHEN a=2744 THEN 2744
WHEN a=2745 THEN 2745
WHEN a=2746 THEN 2746
WHEN a=2747 THEN 2747
WHEN a=2748 THEN 2748
WHEN a=2749 THEN 2749
WHEN a=2750 THEN 2750
WHEN a=2751 THEN 2751
WHEN a=2752 THEN 2752
WHEN a=2753 THEN 2753
WHEN a=2754 THEN 2754
WHEN a=2755 THEN 2755
WHEN a=2756 THEN 2756
WHEN a=2757 THEN 2757
WHEN a=2758 THEN 2758
WHEN a=2759 THEN 2759
WHEN a=2760 THEN 2760
WHEN a=2761 THEN 2761
WHEN a=2762 THEN 2762
WHEN a=2763 THEN 2763
WHEN a=2764 THEN 2764
WHEN a=2765 THEN 2765
WHEN a=2766 THEN 2766
WHEN a=2767 THEN 2767
WHEN a=2768 THEN 2768
WHEN a=2769 THEN 2769
WHEN a=2770 THEN 2770
WHEN a=2771 THEN 2771
WHEN a=2772 THEN 2772
WHEN a=2773 THEN 2773
WHEN a=2774 THEN 2774
WHEN a=2775 THEN 2775
WHEN a=2776 THEN 2776
WHEN a=2777 THEN 2777
WHEN a=2778 THEN 2778
WHEN a=2779 THEN 2779
WHEN a=2780 THEN 2780
WHEN a=2781 THEN 2781
WHEN a=2782 THEN 2782
WHEN a=2783 THEN 2783
WHEN a=2784 THEN 2784
WHEN a=2785 THEN 2785
WHEN a=2786 THEN 2786
WHEN a=2787 THEN 2787
WHEN a=2788 THEN 2788
WHEN a=2789 THEN 2789
WHEN a=2790 THEN 2790
WHEN a=2791 THEN 2791
WHEN a=2792 THEN 2792
WHEN a=2793 THEN 2793
WHEN a=2794 THEN 2794
WHEN a=2795 THEN 2795
WHEN a=2796 THEN 2796
WHEN a=2797 THEN 2797
WHEN a=2798 THEN 2798
WHEN a=2799 THEN 2799
WHEN a=2800 THEN 2800
WHEN a=2801 THEN 2801
WHEN a=2802 THEN 2802
WHEN a=2803 THEN 2803
WHEN a=2804 THEN 2804
WHEN a=2805 THEN 2805
WHEN a=2806 THEN 2806
WHEN a=2807 THEN 2807
WHEN a=2808 THEN 2808
WHEN a=2809 THEN 2809
WHEN a=2810 THEN 2810
WHEN a=2811 THEN 2811
WHEN a=2812 THEN 2812
WHEN a=2813 THEN 2813
WHEN a=2814 THEN 2814
WHEN a=2815 THEN 2815
WHEN a=2816 THEN 2816
WHEN a=2817 THEN 2817
WHEN a=2818 THEN 2818
WHEN a=2819 THEN 2819
WHEN a=2820 THEN 2820
WHEN a=2821 THEN 2821
WHEN a=2822 THEN 2822
WHEN a=2823 THEN 2823
WHEN a=2824 THEN 2824
WHEN a=2825 THEN 2825
WHEN a=2826 THEN 2826
WHEN a=2827 THEN 2827
WHEN a=2828 THEN 2828
WHEN a=2829 THEN 2829
WHEN a=2830 THEN 2830
WHEN a=2831 THEN 2831
WHEN a=2832 THEN 2832
WHEN a=2833 THEN 2833
WHEN a=2834 THEN 2834
WHEN a=2835 THEN 2835
WHEN a=2836 THEN 2836
WHEN a=2837 THEN 2837
WHEN a=2838 THEN 2838
WHEN a=2839 THEN 2839
WHEN a=2840 THEN 2840
WHEN a=2841 THEN 2841
WHEN a=2842 THEN 2842
WHEN a=2843 THEN 2843
WHEN a=2844 THEN 2844
WHEN a=2845 THEN 2845
WHEN a=2846 THEN 2846
WHEN a=2847 THEN 2847
WHEN a=2848 THEN 2848
WHEN a=2849 THEN 2849
WHEN a=2850 THEN 2850
WHEN a=2851 THEN 2851
WHEN a=2852 THEN 2852
WHEN a=2853 THEN 2853
WHEN a=2854 THEN 2854
WHEN a=2855 THEN 2855
WHEN a=2856 THEN 2856
WHEN a=2857 THEN 2857
WHEN a=2858 THEN 2858
WHEN a=2859 THEN 2859
WHEN a=2860 THEN 2860
WHEN a=2861 THEN 2861
WHEN a=2862 THEN 2862
WHEN a=2863 THEN 2863
WHEN a=2864 THEN 2864
WHEN a=2865 THEN 2865
WHEN a=2866 THEN 2866
WHEN a=2867 THEN 2867
WHEN a=2868 THEN 2868
WHEN a=2869 THEN 2869
WHEN a=2870 THEN 2870
WHEN a=2871 THEN 2871
WHEN a=2872 THEN 2872
WHEN a=2873 THEN 2873
WHEN a=2874 THEN 2874
WHEN a=2875 THEN 2875
WHEN a=2876 THEN 2876
WHEN a=2877 THEN 2877
WHEN a=2878 THEN 2878
WHEN a=2879 THEN 2879
WHEN a=2880 THEN 2880
WHEN a=2881 THEN 2881
WHEN a=2882 THEN 2882
WHEN a=2883 THEN 2883
WHEN a=2884 THEN 2884
WHEN a=2885 THEN 2885
WHEN a=2886 THEN 2886
WHEN a=2887 THEN 2887
WHEN a=2888 THEN 2888
WHEN a=2889 THEN 2889
WHEN a=2890 THEN 2890
WHEN a=2891 THEN 2891
WHEN a=2892 THEN 2892
WHEN a=2893 THEN 2893
WHEN a=2894 THEN 2894
WHEN a=2895 THEN 2895
WHEN a=2896 THEN 2896
WHEN a=2897 THEN 2897
WHEN a=2898 THEN 2898
WHEN a=2899 THEN 2899
WHEN a=2900 THEN 2900
WHEN a=2901 THEN 2901
WHEN a=2902 THEN 2902
WHEN a=2903 THEN 2903
WHEN a=2904 THEN 2904
WHEN a=2905 THEN 2905
WHEN a=2906 THEN 2906
WHEN a=2907 THEN 2907
WHEN a=2908 THEN 2908
WHEN a=2909 THEN 2909
WHEN a=2910 THEN 2910
WHEN a=2911 THEN 2911
WHEN a=2912 THEN 2912
WHEN a=2913 THEN 2913
WHEN a=2914 THEN 2914
WHEN a=2915 THEN 2915
WHEN a=2916 THEN 2916
WHEN a=2917 THEN 2917
WHEN a=2918 THEN 2918
WHEN a=2919 THEN 2919
WHEN a=2920 THEN 2920
WHEN a=2921 THEN 2921
WHEN a=2922 THEN 2922
WHEN a=2923 THEN 2923
WHEN a=2924 THEN 2924
WHEN a=2925 THEN 2925
WHEN a=2926 THEN 2926
WHEN a=2927 THEN 2927
WHEN a=2928 THEN 2928
WHEN a=2929 THEN 2929
WHEN a=2930 THEN 2930
WHEN a=2931 THEN 2931
WHEN a=2932 THEN 2932
WHEN a=2933 THEN 2933
WHEN a=2934 THEN 2934
WHEN a=2935 THEN 2935
WHEN a=2936 THEN 2936
WHEN a=2937 THEN 2937
WHEN a=2938 THEN 2938
WHEN a=2939 THEN 2939
WHEN a=2940 THEN 2940
WHEN a=2941 THEN 2941
WHEN a=2942 THEN 2942
WHEN a=2943 THEN 2943
WHEN a=2944 THEN 2944
WHEN a=2945 THEN 2945
WHEN a=2946 THEN 2946
WHEN a=2947 THEN 2947
WHEN a=2948 THEN 2948
WHEN a=2949 THEN 2949
WHEN a=2950 THEN 2950
WHEN a=2951 THEN 2951
WHEN a=2952 THEN 2952
WHEN a=2953 THEN 2953
WHEN a=2954 THEN 2954
WHEN a=2955 THEN 2955
WHEN a=2956 THEN 2956
WHEN a=2957 THEN 2957
WHEN a=2958 THEN 2958
WHEN a=2959 THEN 2959
WHEN a=2960 THEN 2960
WHEN a=2961 THEN 2961
WHEN a=2962 THEN 2962
WHEN a=2963 THEN 2963
WHEN a=2964 THEN 2964
WHEN a=2965 THEN 2965
WHEN a=2966 THEN 2966
WHEN a=2967 THEN 2967
WHEN a=2968 THEN 2968
WHEN a=2969 THEN 2969
WHEN a=2970 THEN 2970
WHEN a=2971 THEN 2971
WHEN a=2972 THEN 2972
WHEN a=2973 THEN 2973
WHEN a=2974 THEN 2974
WHEN a=2975 THEN 2975
WHEN a=2976 THEN 2976
WHEN a=2977 THEN 2977
WHEN a=2978 THEN 2978
WHEN a=2979 THEN 2979
WHEN a=2980 THEN 2980
WHEN a=2981 THEN 2981
WHEN a=2982 THEN 2982
WHEN a=2983 THEN 2983
WHEN a=2984 THEN 2984
WHEN a=2985 THEN 2985
WHEN a=2986 THEN 2986
WHEN a=2987 THEN 2987
WHEN a=2988 THEN 2988
WHEN a=2989 THEN 2989
WHEN a=2990 THEN 2990
WHEN a=2991 THEN 2991
WHEN a=2992 THEN 2992
WHEN a=2993 THEN 2993
WHEN a=2994 THEN 2994
WHEN a=2995 THEN 2995
WHEN a=2996 THEN 2996
WHEN a=2997 THEN 2997
WHEN a=2998 THEN 2998
WHEN a=2999 THEN 2999
ELSE NULL END;

SELECT BIGCASE(a) FROM RANGE(0, 5) AS tbl(a);

SELECT BIGCASE(a) FROM (VALUES (477), (832), (1), (3421), (8)) AS tbl(a);

SELECT SUM(BIGCASE(a)), SUM(a) FROM RANGE(0, 3000) AS tbl(a);

SELECT SUM(BIGCASE(a)), SUM(a) FROM RANGE(0, 10000) AS tbl(a);

PRAGMA enable_verification;

CREATE TABLE tbl AS SELECT * FROM RANGE(0, 10) AS tbl(i);

SELECT CAN_CAST_IMPLICITLY(i, CAST(NULL AS BIGINT)) FROM tbl LIMIT 1;

SELECT CAN_CAST_IMPLICITLY(i, CAST(NULL AS INT128)) FROM tbl LIMIT 1;

SELECT CAN_CAST_IMPLICITLY(i, CAST(NULL AS INT)) FROM tbl LIMIT 1;

SELECT CAN_CAST_IMPLICITLY(i, CAST(NULL AS TEXT)) FROM tbl LIMIT 1;

PRAGMA enable_verification;

CREATE TABLE tbl AS SELECT * FROM RANGE(0, 10) AS tbl(i);

SELECT * FROM tbl WHERE CASE WHEN i % 2 = 0 THEN 1 ELSE 0 END AND CASE WHEN i < 5 THEN 1 ELSE 0 END;

PRAGMA enable_verification;

CREATE TABLE t (n TEXT);

INSERT INTO t VALUES ('1'), ('0'), ('');

SELECT n, CASE WHEN n <> '' AND CAST(SUBSTRING(n, 1, 1) AS INT) <= 0 THEN '0' WHEN n <> '' AND CAST(SUBSTRING(n, 1, 1) AS INT) > 0 THEN '1' ELSE '2' END AS x FROM t ORDER BY n;

PRAGMA enable_verification;

CREATE TABLE tbl AS SELECT i, 'thisisalongstring' || CAST(i AS TEXT) AS s FROM RANGE(0, 10) AS tbl(i);

SELECT i, s, CASE WHEN i % 2 = 0 THEN s ELSE s END FROM tbl;

SELECT i, s, CASE WHEN i % 2 = 0 THEN s ELSE s END FROM (SELECT i, s || '_suffix' FROM tbl) AS tbl(i, s);

PRAGMA enable_verification;

SELECT CAST_TO_TYPE('  42', CAST(NULL AS INT));

SELECT CAST_TO_TYPE('hello', CAST(NULL AS INT));

CREATE OR REPLACE MACRO try_trim_null(s) AS CASE WHEN typeof(s)=='VARCHAR' THEN cast_to_type(nullif(trim(s::VARCHAR), ''), s) ELSE s END;

SELECT TRY_TRIM_NULL(42) AS trim_int, TRY_TRIM_NULL('  col  ') AS trim_varchar, TRY_TRIM_NULL('') AS trim_empty;

CREATE TABLE tbl (i INT, v TEXT);

INSERT INTO tbl VALUES (42, ' hello '), (100, '   ');

SELECT TRY_TRIM_NULL(COLUMNS(*)) FROM tbl;

PREPARE v1 AS SELECT cast_to_type(' 42', ?);

EXECUTE v1(NULL::INT);

EXECUTE v1(NULL::VARCHAR);

SELECT CAST_TO_TYPE(42, NULL);

PRAGMA enable_verification;

SELECT CONSTANT_OR_NULL(1, NULL), CONSTANT_OR_NULL(1, 10);

SELECT CONSTANT_OR_NULL(1, CASE WHEN i % 2 = 0 THEN NULL ELSE i END) FROM RANGE(0, 5) AS tbl(i);

SELECT CONSTANT_OR_NULL(1, CASE WHEN i % 2 = 0 THEN NULL ELSE i END, CASE WHEN i % 2 = 1 THEN NULL ELSE i END) FROM RANGE(0, 5) AS tbl(i);

SELECT CONSTANT_OR_NULL(1);

SELECT CONSTANT_OR_NULL();

PRAGMA enable_verification;

SELECT ERROR('test');

SELECT CASE WHEN value = 'foo' THEN 'Value is foo.' ELSE ERROR(CONCAT('Found unexpected value: ', value)) END AS new_value FROM (SELECT 'foo' AS value UNION ALL SELECT 'baz' AS value);

SELECT * FROM (SELECT 4 AS x) WHERE CASE WHEN x % 2 = 0 THEN TRUE ELSE ERROR(FORMAT('x must be even number but is {}', x)) END;

SELECT * FROM (SELECT 3 AS x) WHERE CASE WHEN x % 2 = 0 THEN TRUE ELSE ERROR(FORMAT('x must be even but is {}', x)) END;

SELECT 42 = ERROR('hello world');

SELECT ERROR('hello world') IS NULL;

PRAGMA enable_verification;

CREATE TYPE t AS ENUM ('z','y','x');

SELECT GREATEST(CAST('x' AS t), CAST('z' AS t)), CAST('x' AS t) > CAST('z' AS t);

CREATE TABLE all_types AS FROM test_all_types()
foreach col <all_types_columns>;

SELECT LEAST((SELECT MAX("${col}") FROM all_types), (SELECT MIN("${col}") FROM all_types)) IS NOT DISTINCT FROM (SELECT MIN("${col}") FROM all_types);

SELECT GREATEST((SELECT MAX("${col}") FROM all_types), (SELECT MIN("${col}") FROM all_types)) IS NOT DISTINCT FROM (SELECT MAX("${col}") FROM all_types);

SELECT * FROM REPEAT_ROW(1, 2, 'foo', num_rows = 3);

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

SELECT 10 BETWEEN 10 AND 20;

SELECT 9 BETWEEN 10 AND 20;

SELECT 10 BETWEEN NULL AND 20;

SELECT 30 BETWEEN NULL AND 20;

SELECT 10 BETWEEN 10 AND NULL;

SELECT 9 BETWEEN 10 AND NULL;

SELECT NULL BETWEEN 10 AND 20;

SELECT NULL BETWEEN NULL AND 20;

SELECT NULL BETWEEN 10 AND NULL;

SELECT NULL BETWEEN NULL AND NULL;

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (1), (2), (3), (NULL);

SELECT i BETWEEN 1 AND 2 FROM integers ORDER BY i;

SELECT i BETWEEN NULL AND 2 FROM integers ORDER BY i;

SELECT i BETWEEN 2 AND NULL FROM integers ORDER BY i;

SELECT COUNT(*) FROM integers WHERE 10 BETWEEN 10 AND 20;

SELECT COUNT(*) FROM integers WHERE 9 BETWEEN 10 AND 20;

SELECT COUNT(*) FROM integers WHERE 10 BETWEEN NULL AND 20;

SELECT COUNT(*) FROM integers WHERE 30 BETWEEN NULL AND 20;

SELECT COUNT(*) FROM integers WHERE 10 BETWEEN 10 AND NULL;

SELECT COUNT(*) FROM integers WHERE 9 BETWEEN 10 AND NULL;

SELECT COUNT(*) FROM integers WHERE NULL BETWEEN 10 AND 20;

SELECT COUNT(*) FROM integers WHERE NULL BETWEEN NULL AND 20;

SELECT COUNT(*) FROM integers WHERE NULL BETWEEN 10 AND NULL;

SELECT COUNT(*) FROM integers WHERE NULL BETWEEN NULL AND NULL;

SELECT COUNT(*) FROM integers WHERE i BETWEEN 1 AND 2;

SELECT COUNT(*) FROM integers WHERE i BETWEEN NULL AND 2;

SELECT COUNT(*) FROM integers WHERE i BETWEEN 2 AND NULL;

SELECT COUNT(*) FROM integers WHERE NULL BETWEEN -1 AND 1;

SELECT COUNT(*) FROM integers WHERE 0 BETWEEN -1 AND 1;

SELECT COUNT(*) FROM integers WHERE i BETWEEN i - 1 AND i + 1;

SELECT COUNT(*) FROM integers WHERE i BETWEEN i - 1 AND 10;

SELECT COUNT(*) FROM integers WHERE i BETWEEN NULL AND NULL;

SELECT COUNT(*) FROM integers WHERE i BETWEEN i - 1 AND NULL;

SELECT COUNT(*) FROM integers WHERE i BETWEEN 0 AND i + 1;

SELECT COUNT(*) FROM integers WHERE i BETWEEN NULL AND i + 1;

SELECT COUNT(*) FROM integers WHERE 1 BETWEEN i - 1 AND i + 1;

SELECT COUNT(*) FROM integers WHERE NULL BETWEEN i - 1 AND i + 1;

SELECT COUNT(*) FROM integers WHERE NULL BETWEEN i - 1 AND NULL;

SELECT COUNT(*) FROM integers WHERE 1 BETWEEN i - 1 AND 100;

SELECT COUNT(*) FROM integers WHERE 1 BETWEEN 0 AND i - 1;

SELECT * FROM integers WHERE i >= 1 AND i < 2;

SELECT * FROM integers WHERE i > 1 AND i <= 2;

SELECT * FROM RANGE(0, 4) AS tbl(i) WHERE i >= 1 AND i < 2;

SELECT * FROM RANGE(0, 4) AS tbl(i) WHERE i > 1 AND i <= 2;

CREATE TABLE issue3588 (c0 INT);

PRAGMA enable_verification;

PREPARE v1 AS SELECT ? BETWEEN 1 AND 2;

EXECUTE v1(1);

EXECUTE v1(3);

EXECUTE v1(1, 2);

PREPARE v2 AS SELECT 1 WHERE ? BETWEEN now() - INTERVAL '1 minute' AND now() + INTERVAL '1 minute';

EXECUTE v2(now());

EXECUTE v2(now() - INTERVAL '10 minute');

SELECT CAST((RANDOM() * 10) AS INT) BETWEEN 6 AND 5;

SELECT NOT CAST((RANDOM() * 10) AS INT) BETWEEN 6 AND 5;

PRAGMA enable_verification;

SELECT TRUE IS TRUE;

SELECT FALSE IS TRUE;

SELECT NULL IS TRUE;

SELECT 42 IS TRUE;

SELECT 0 IS TRUE;

SELECT NOT TRUE IS TRUE;

SELECT NOT FALSE IS TRUE;

SELECT NOT NULL IS TRUE;

SELECT NOT 42 IS TRUE;

SELECT NOT 0 IS TRUE;

SELECT NULL IS NULL;

SELECT 42 IS NULL;

SELECT NOT NULL IS NULL;

SELECT NOT 42 IS NULL;

SELECT NOT 42 IS NULL;

SELECT NOT 42 IS NULL;

SELECT NOT 42 IS NULL;

SELECT NOT 42 IS NULL;

PRAGMA enable_verification;

SELECT CASE WHEN TRUE THEN 1 ELSE 10 END, CASE WHEN FALSE THEN 1 ELSE 10 END, CASE WHEN NULL THEN 1 ELSE 10 END;

SELECT CASE WHEN TRUE THEN 20 ELSE 2000 END, CASE WHEN FALSE THEN 20 ELSE 2000 END, CASE WHEN NULL THEN 20 ELSE 2000 END;

SELECT CASE WHEN TRUE THEN 20.5 ELSE 2000 END, CASE WHEN FALSE THEN 20 ELSE 2000.5 END, CASE WHEN NULL THEN 20 ELSE 2000.5 END;

SELECT CASE WHEN TRUE THEN CAST('2020-05-05' AS DATE) ELSE CAST('1996-11-05 10:11:56' AS TIMESTAMP) END, CASE WHEN FALSE THEN CAST('2020-05-05' AS DATE) ELSE CAST('1996-11-05 10:11:56' AS TIMESTAMP) END, CASE WHEN NULL THEN CAST('2020-05-05' AS DATE) ELSE CAST('1996-11-05 10:11:56' AS TIMESTAMP) END;

SELECT CASE WHEN TRUE THEN 'true' ELSE 'false' END, CASE WHEN FALSE THEN 'true' ELSE 'false' END, CASE WHEN NULL THEN 'true' ELSE 'false' END;

SELECT COALESCE(NULL, NULL), COALESCE(NULL, 10), COALESCE(1, 10);

SELECT COALESCE(NULL, 2000), COALESCE(20.5, 2000);

SELECT COALESCE(NULL, CAST('1996-11-05 10:11:56' AS TIMESTAMP)), COALESCE(CAST('2020-05-05' AS DATE), CAST('1996-11-05 10:11:56' AS TIMESTAMP));

SELECT COALESCE(NULL, 'not NULL'), COALESCE('NULL', 'not NULL');

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (1), (2), (3), (NULL);

SELECT * FROM integers WHERE i IN (1, 2) ORDER BY i;

SELECT * FROM integers WHERE i IN (1, 2, 3, 4, 5, 6, 7, 8) ORDER BY i;

SELECT i, i IN (1, 2, 3, 4, 5, 6, 7, 8) FROM integers ORDER BY i;

SELECT i, NOT i IN (1, 3, 4, 5, 6, 7, 8) FROM integers ORDER BY i;

SELECT i, i IN (1, 2, NULL, 4, 5, 6, 7, 8) FROM integers ORDER BY i;

SELECT i, i IN (i + 1) FROM integers ORDER BY i;

SELECT i, i IN (i + 1, 42, i) FROM integers ORDER BY i;

SELECT i, 1 IN (i - 1, i, i + 1) FROM integers ORDER BY i;

SELECT i, NOT 1 IN (i - 1, i, i + 1) FROM integers ORDER BY i;

SELECT i, i IN (11, 12, 13, 14, 15, 16, 17, 18, 1, i) FROM integers ORDER BY i;

SELECT i, NOT i IN (11, 12, 13, 14, 15, 16, 17, 18, 1, i) FROM integers ORDER BY i;

SELECT i, 1 IN (11, 12, 13, 14, 15, 16, 17, 18, 1, i) FROM integers ORDER BY i;

SELECT i, NOT 1 IN (11, 12, 13, 14, 15, 16, 17, 18, 1, i) FROM integers ORDER BY i;

SELECT i, i IN ((SELECT MAX(i) FROM integers), (SELECT MIN(i) FROM integers)) FROM integers ORDER BY i;

SELECT i, (SELECT MAX(i) FROM integers WHERE i <> i1.i), (SELECT MIN(i) FROM integers WHERE i <= i1.i) FROM integers AS i1 ORDER BY i;

SELECT i, i IN ((SELECT MAX(i) FROM integers WHERE i <> i1.i), (SELECT MIN(i) FROM integers WHERE i <= i1.i)) FROM integers AS i1 ORDER BY i;

SELECT 1 IN (1, 2, 3);

SELECT 1 IN (2, 2, 3);

PREPARE v1 AS SELECT 1 IN ?;

EXECUTE v1([]);

SELECT 1 IN ();

EXECUTE v1([1, 2, 3]);

EXECUTE v1([2, 2, 3]);

EXECUTE v1([2, 2, 3]);

EXECUTE v1([2, 2, 3]);

EXECUTE v1([2, 2, 3]);

EXECUTE v1([2, 2, 3]);

EXECUTE v1([2, 2, 3]);

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

CREATE TABLE strings (s TEXT);

INSERT INTO strings VALUES ('HXR'), ('NUT'), ('ZZZ'), (NULL);

SELECT * FROM strings WHERE s IN ('QOY', 'AAZ', 'AOR', 'VJR', 'ROL', 'KOS', 'JBC', 'EMZ', 'LQT', 'HYX', 'IYA', 'YAA', 'XMR', 'HGJ', 'LDR', 'MVT', 'XEQ', 'NPX', 'ZKV', 'HET', 'GZI', 'PLI', 'ABK', 'LOJ', 'KYB', 'UKG', 'PNY', 'SBV', 'VSJ', 'FAR', 'AXH', 'XWO', 'NKA', 'CPE', 'GSC', 'TWK', 'SXK', 'SUU', 'KPX', 'NXU', 'ZMR', 'BZG', 'CBO', 'SQA', 'VNE', 'NUT', 'LKF', 'IWL', 'CQE', 'UED', 'BHQ', 'RQR', 'FVG', 'EZZ', 'SRJ', 'UPA', 'JUV', 'AXP', 'JGL', 'HKC', 'CYM', 'AAK', 'WUM', 'NWK', 'DCQ', 'YXT', 'DQZ', 'WXB', 'YVG', 'YXL', 'FWG', 'PLN', 'YPK', 'UPA', 'GIC', 'IPS', 'WQB', 'NSR', 'WRT', 'WOP', 'JAX', 'XWZ', 'TIM', 'EAO', 'ANC', 'NAT', 'KFL', 'XJA', 'HUG', 'SVP', 'HVX', 'APA', 'RJI', 'QKP', 'MZB', 'MME', 'GJW', 'TBX', 'TRT', 'IRL', 'BUR', 'OWP', 'DAK', 'IGZ', 'OJL', 'BON', 'KLG', 'SSI', 'UOD', 'SCW', 'LGT', 'KTL', 'DPA', 'WTC', 'NSW', 'TEQ', 'HNU', 'GEI', 'OFK', 'UQB', 'QWI', 'ACS', 'MMR', 'EHZ', 'PXR', 'SPK', 'POO', 'CMF', 'UEE', 'QUK', 'BZR', 'ZBH', 'KJV', 'RIV', 'HOX', 'GZU', 'PQO', 'NLU', 'BRV', 'XND', 'APA', 'QXV', 'QEW', 'AJR', 'OYC', 'YTA', 'FMS', 'GSK', 'MCC', 'QVQ', 'FYD', 'QQJ', 'VBM', 'EYV', 'ELQ', 'KHI', 'HTU', 'KDQ', 'YRI', 'CEB', 'WGP', 'HIY', 'XSM', 'FTD', 'EHU', 'KFE', 'FCN', 'YRC', 'WFC', 'YRC', 'PZH', 'ZAG', 'AAM', 'UBM', 'JIH', 'CRQ', 'BOE', 'KLI', 'SAB', 'TYY', 'AGX', 'FEH', 'ZPX', 'PRU', 'GXA', 'HDC', 'UJG', 'OCO', 'BLZ', 'ZFH', 'LRN', 'GYF', 'FBR', 'OVH', 'XTL', 'FQZ', 'MKP', 'UKA', 'RMN', 'IWX', 'RYF', 'WTB', 'KWU', 'MKN', 'JFM', 'VUU', 'UTU', 'CLW', 'HKQ', 'SJA', 'ADT', 'RTN', 'ZPJ', 'NUX', 'HMY', 'RDA', 'YQQ', 'COL', 'JRB', 'PYV', 'YAU', 'AYM', 'STV', 'BDC', 'PIZ', 'CAK', 'VWS', 'GNU', 'SZA', 'PMP', 'WOV', 'LPL', 'PJY', 'FWV', 'CLH', 'IVC', 'YHN', 'QWB', 'SCE', 'PFN', 'WDI', 'PIN', 'QSN', 'WDE', 'JOZ', 'DPZ', 'WFX', 'IQS', 'TBZ', 'FXQ', 'PLM', 'WQH', 'BEJ', 'KFM', 'KLH', 'ZVT', 'MBV', 'JQT', 'RIR', 'FDB', 'AOV', 'GZV', 'CTN', 'YCY', 'XSB', 'UUI', 'EWM', 'MQR', 'SKE', 'ACO', 'AGP', 'RWD', 'XGR', 'PCO', 'OSY', 'QHG', 'YEW', 'DHQ', 'FNH', 'QWX', 'RSL', 'GKL', 'VEP', 'SME', 'TKH', 'JOQ', 'XZY', 'ZBF', 'UJP', 'UKD', 'QIZ', 'VQF', 'QUW', 'XGX', 'TPG', 'LYD', 'WBX', 'GRI', 'YDC', 'PJU', 'EFU', 'MZV', 'GBN', 'EJE', 'JYH', 'XTC', 'ZNI', 'JJE', 'XJD', 'SJU', 'SNP', 'ZLL', 'ZRL', 'CUC', 'EOQ', 'IZU', 'MZH', 'UMQ', 'ULS', 'ETH', 'AUT', 'NPL', 'IYB', 'OXQ', 'CXH', 'QRI', 'RHM', 'PNO', 'QGF', 'THK', 'KYU', 'OIE', 'OGO', 'UDS', 'OIS', 'DXJ', 'ETV', 'UWI', 'VLX', 'SOG', 'KNW', 'FOR', 'CCT', 'PHH', 'YNI', 'BOW', 'AJR', 'LJE', 'PUB', 'NPF', 'ELB', 'SIE', 'NAC', 'IZD', 'BQE', 'SUH', 'YQE', 'AVC', 'CIV', 'SOK', 'VRB', 'YUG', 'JFO', 'FCB', 'LEY', 'IPX', 'PEZ', 'BFV', 'BCV', 'RWZ', 'BHX', 'OJV', 'QPZ', 'QQX', 'ECG', 'MCD', 'UEI', 'IAE', 'VKD', 'QUJ', 'WYL', 'UOI', 'XDP', 'JTW', 'LFJ', 'AHH', 'XRL', 'QQM', 'AGA', 'RLE', 'MFI', 'UYI', 'HEM', 'KKJ', 'VLN', 'PYN', 'ZZA', 'WGI', 'PTH', 'BMR', 'MZK', 'IPY', 'SLA', 'JOS', 'ZLT', 'ZDF', 'XWY', 'OHJ', 'RPL', 'BPE', 'NVZ', 'YIF', 'HWM', 'BGM', 'VUO', 'YIW', 'UBS', 'EAW', 'AYN', 'UCE', 'UIB', 'DNV', 'YAQ', 'TBE', 'GMT', 'EOW', 'RWL', 'TYU', 'UTX', 'SRJ', 'FZZ', 'RJU', 'QJB', 'MFY', 'PID', 'RWM', 'PWH', 'PJS', 'BNK', 'IUO', 'POW', 'MBL', 'XMH', 'YWN', 'FTC', 'XME', 'MUS', 'XYD', 'BVI', 'FGU', 'BCJ', 'KRH', 'XPM', 'HDV', 'SQS', 'PFE', 'SIU', 'PZL', 'APT', 'CZK', 'HHL', 'EVI', 'GOE', 'RWG', 'PZF', 'DPS', 'GXN', 'WVC', 'ZDE', 'BDQ', 'WYP', 'PLB', 'SZZ', 'HPM', 'BUL', 'VRY', 'ZNG', 'XUS', 'SLU', 'SLQ', 'UOH', 'YHR', 'FGE', 'RJY', 'CMO', 'NGZ', 'PCG', 'PFN', 'EPG', 'ILE', 'RXF', 'NLD', 'PYW', 'WTG', 'HKL', 'IGB', 'YNF', 'TAL', 'MBR', 'YEK', 'VKO', 'ZGO', 'UKH', 'GJN', 'QCD', 'OQD', 'HEU', 'GWT', 'THS', 'LAS', 'JLU', 'TNV', 'UQB', 'YDO', 'ZFI', 'XBV', 'VYI', 'GAC', 'GDU', 'DLL', 'JXX', 'GUP', 'FUF', 'KQI', 'TLC', 'DAQ', 'OMN', 'FYT', 'GIZ', 'NON', 'UGU', 'CSI', 'NEO', 'SVA', 'ZBM', 'GGU', 'PFF', 'QFB', 'JZH', 'OBB', 'VHM', 'PAJ', 'BKD', 'JEI', 'ZQG', 'GBX', 'UCR', 'TXS', 'PAK', 'HYP', 'CAI', 'WJY', 'VLH', 'QLY', 'XKI', 'SDS', 'QEF', 'KKF', 'XBQ', 'FTE', 'CEX', 'PJM', 'RTA', 'TXQ', 'BSK', 'OXU', 'ELZ', 'WII', 'THG', 'RDY', 'LFS', 'JNY', 'ORJ', 'FXD', 'OTG', 'BUG', 'EDF', 'DDM', 'HTZ', 'IAA', 'RWR', 'XBL', 'PXV', 'FVH', 'OSB', 'UQW', 'CUP', 'OIF', 'VQZ', 'KCT', 'VWJ', 'IRP', 'UAZ', 'CCF', 'MCY', 'GGP', 'HDT', 'SZT', 'JSR', 'HDR', 'MQR', 'OCP', 'XQD', 'QYT', 'NSA', 'LPC', 'MGS', 'DAZ', 'SDQ', 'BMS', 'EJL', 'ADY', 'JFP', 'YQD', 'CIP', 'CST', 'ATU', 'JTD', 'HDI', 'JMF', 'LJO', 'SEC', 'ZCN', 'EMG', 'RLJ', 'AMV', 'BVT', 'IZV', 'DND', 'VCJ', 'HNY', 'DSI', 'DWM', 'EDI', 'LQO', 'NDN', 'GGA', 'EXH', 'XFP', 'NLU', 'DNC', 'OTA', 'KQD', 'JRJ', 'JXV', 'UAK', 'TNB', 'ZXJ', 'YTU', 'MMS', 'NCV', 'VIR', 'EUI', 'KND', 'PTL', 'LKF', 'FUT', 'VUX', 'PWI', 'ETZ', 'IHN', 'GYS', 'KAQ', 'UYN', 'HOQ', 'END', 'WHD', 'NMT', 'HEW', 'OBN', 'RDZ', 'SKP', 'LHN', 'HQS', 'YTY', 'GXW', 'EKC', 'BCD', 'BRQ', 'CSX', 'OCI', 'OZP', 'TBN', 'HHG', 'VFZ', 'WJY', 'VBT', 'LNT', 'YDL', 'KOC', 'IJF', 'HSB', 'USO', 'HOK', 'MEK', 'WXT', 'DRT', 'SNE', 'WAI', 'EMP', 'IGC', 'QPJ', 'GCF', 'CJW', 'ONH', 'XQO', 'KFY', 'CZQ', 'AUC', 'BQD', 'KBH', 'GFS', 'BVT', 'QLX', 'TYO', 'WWE', 'TXE', 'MQM', 'WNC', 'WKC', 'ZLW', 'RDJ', 'WCZ', 'UOV', 'IBT', 'HOQ', 'VIA', 'DPE', 'AJX', 'AYA', 'DEM', 'YDD', 'SOU', 'KZU', 'ATH', 'BPS', 'GTM', 'ALW', 'ODR', 'DBZ', 'KYG', 'CES', 'NWC', 'QER', 'FFA', 'UZS', 'GPL', 'MTD', 'TPI', 'GMR', 'WXV', 'YYY', 'FAX', 'MNL', 'JUS', 'SVJ', 'ZNX', 'QDQ', 'FIH', 'EXR', 'XSM', 'OQX', 'GUW', 'KEG', 'DHJ', 'GXH', 'ROZ', 'TCT', 'UNU', 'XGS', 'ODG', 'GZH', 'TZV', 'LFP', 'CDF', 'LJZ', 'RLL', 'QBY', 'CEQ', 'JWH', 'GYJ', 'LSJ', 'CQV', 'HJT', 'PVB', 'DLH', 'BFI', 'RIV', 'UCG', 'KOG', 'TXS', 'JDF', 'DKD', 'FOE', 'UIO', 'GDY', 'OIG', 'FWH', 'YSY', 'HGV', 'GIS', 'CMB', 'SDT', 'ROH', 'NMU', 'YHA', 'WDJ', 'VDV', 'LDE', 'PUR', 'UNS', 'NDY', 'YCZ', 'SAQ', 'OJW', 'OIP', 'IWC', 'WPT', 'PJI', 'PMP', 'CEB', 'WRZ', 'LSI', 'QUA', 'HMA', 'VWZ', 'KWX', 'RTA', 'IXL', 'XZH', 'UOT', 'IWF', 'LXN', 'VXY', 'DMU', 'EKC', 'JRF', 'EMA', 'LNG', 'JWT', 'NLH', 'EPH', 'FFJ', 'RTR', 'XJE', 'OAW', 'HSP', 'AFE', 'EPI', 'RSV', 'OIZ', 'BEC', 'ILJ', 'UPU', 'JZC', 'HGP', 'HLT', 'GSY', 'XGP', 'NYL', 'VHY', 'CQN', 'WEE', 'GFJ', 'LGE', 'IBM', 'NCI', 'OPR', 'TIO', 'DPL', 'TFD', 'XKJ', 'DWM', 'DPV', 'RIE', 'UKK', 'OBM', 'NLJ', 'VUM', 'IRE', 'DNR', 'KVP', 'PZX', 'FBD', 'GDI', 'YAW', 'MKG', 'EAX', 'CBM', 'TCH', 'LGX', 'UCY', 'EWE', 'ZUN', 'DPM', 'BUH', 'NQJ', 'RFX', 'XUI', 'BHB', 'BMM', 'MGZ', 'PTR', 'RUM', 'FVC', 'BRO', 'ZVP', 'YMV', 'PNX', 'WRO', 'KKR', 'WCE', 'UFT', 'QWG', 'UNY', 'IZE', 'ZFX', 'KBC', 'DPS', 'QYY', 'ZNO', 'DHR', 'GWP', 'UTY', 'CSO', 'SQH', 'TBU', 'CYF', 'ROH', 'GYF', 'BWT', 'RKM', 'WLV', 'FSB', 'EWV', 'DHJ', 'RPB', 'NVJ', 'LUF', 'TTV', 'WPT', 'APQ', 'IXF', 'HAQ', 'OVS', 'JTE', 'LOQ', 'PXF', 'MAZ', 'AHV', 'TZO', 'LHO', 'ATL', 'MII', 'LTR', 'KPQ', 'ZXP', 'JPI', 'GLF', 'VKG', 'CAM', 'GVX', 'JUO', 'YWZ', 'NNQ', 'RGV', 'CDS', 'CYA', 'QPX', 'HHG', 'DDF', 'YXE', 'ZKL', 'XDJ', 'HLC', 'ORZ', 'UEX', 'FKH', 'RWT', 'RKN', 'USW', 'UBC', 'QGT', 'MGN', 'WXC', 'ENU', 'RLW', 'OFP', 'XGN', 'PSX', 'JTD', 'LFK', 'PBI', 'BWD', 'JVG', 'HFG', 'WLM', 'XNC', 'HWH', 'FGZ', 'JEK', 'HRL', 'NBL', 'THW', 'WKI', 'IME', 'UIY', 'WAA', 'XQO', 'UUD', 'IRS', 'FBF', 'JZV', 'CCR', 'YLF', 'RXP', 'UIP', 'OGN', 'IID', 'ENW', 'XPL', 'PFE', 'MEX', 'GPH', 'RBW', 'JML', 'ZVR', 'YWL', 'QPJ', 'LYY', 'NKS', 'VIJ', 'SAZ', 'LNC', 'NGU', 'RRD', 'PJK', 'FOH', 'ORW', 'YLQ', 'GFG', 'NOW', 'IDV', 'WHE', 'RTH', 'NVL', 'BAQ', 'HAK', 'SKH', 'LTZ', 'HDF', 'SIB', 'PHY', 'PWZ', 'CWY', 'JNE', 'CXW', 'EPN', 'LAO', 'WEI', 'AGK', 'XJQ', 'ILR', 'CVO', 'MEX', 'BGD', 'AEK', 'DHK', 'KAC', 'DQL', 'WDA', 'GVU', 'RUN', 'XQU', 'EXU', 'WER', 'UBS', 'XOK', 'WML', 'XQM', 'XBW', 'VTT', 'SMF', 'DRX', 'XGZ', 'KXD', 'IVV', 'OIJ', 'KAW', 'SEW', 'URD', 'QAW', 'RFL', 'ZGP', 'VVR', 'ZLA', 'LXV', 'OWU', 'YGF', 'BJO', 'OTZ', 'RSD', 'GTT', 'CEP', 'HVH', 'ZNI', 'BHV', 'IKT', 'GCF', 'XYF', 'FOL', 'NLV', 'NFL', 'TOO', 'GYY', 'POS', 'JGL', 'BUE', 'DYK', 'VVV', 'RMJ', 'LBS', 'WSL', 'FHZ', 'RWB', 'DLC', 'XPL', 'YLW', 'OYK', 'HQN', 'MRA', 'QAJ', 'MIX', 'ICY', 'WZS', 'IJG', 'VYF', 'XON', 'AZB', 'RQC', 'AYK', 'CUV', 'JST', 'BNP', 'UCF', 'DIG', 'ANC', 'XVQ', 'CEC', 'TND', 'SHS', 'YTJ', 'XFX', 'TBI', 'JRE', 'WBD', 'ZVA', 'TSG', 'DYY', 'XUB', 'JDH', 'VSO', 'NMU', 'QWP', 'SKI', 'XMG', 'RVK', 'XVO', 'OAV', 'NYW', 'NRR', 'QRY', 'EBG', 'OYJ', 'ZDN', 'LLU', 'ACT', 'MYP', 'KUK', 'TDO', 'CUB', 'QHL', 'QRO', 'FTD', 'KBL', 'YEY', 'NQD', 'OAH', 'ACU', 'EDM', 'QYP', 'OUO', 'PDK', 'VSP', 'PKW', 'JZF', 'GAL', 'COS', 'RFL', 'DIM', 'MPZ', 'IZX', 'KBU', 'LVK', 'DTP', 'PWC', 'EUQ', 'ESR', 'PIL', 'PTW', 'DNF', 'VLW', 'NBA', 'DFW', 'RDK', 'PYF', 'NIA', 'LLQ', 'WUE', 'SLJ', 'TEF', 'GNC', 'FIC', 'EQD', 'ERL', 'IKZ', 'UKG', 'TNT', 'XCP', 'NRV', 'GVU', 'XFZ', 'VEL', 'GCR', 'XAE', 'GTN', 'VRZ', 'WSY', 'RKD', 'WIA', 'ZPB', 'EWE', 'AVT', 'EZD', 'YCN', 'TJY', 'PCS', 'PXA', 'EAR', 'CIE', 'PPO', 'PFP', 'PFJ', 'SZK', 'IBH', 'LQB', 'EDI', 'ELJ', 'OJS', 'QBC', 'GTV', 'GXH', 'MFG', 'QQO', 'PIK', 'LDF', 'KIX', 'CSV', 'MAP', 'ALA', 'KZH', 'QPA', 'BCG', 'DWQ', 'MUM', 'UJT', 'ZIK', 'XPU', 'CQL', 'DZH', 'ZGR', 'UCU', 'LAT', 'NXO', 'QYM', 'PNV', 'UTV', 'SGK', 'EXJ', 'NTQ', 'LPQ', 'RVT', 'GHZ', 'FSE', 'PGQ', 'WJL', 'JQI', 'IWL', 'SWW', 'DEQ', 'VLF', 'NUD', 'ZNG', 'DCR', 'LCI', 'NZK', 'QAK', 'GHL', 'UCZ', 'ESU', 'JQG', 'NJL', 'PPD', 'QGA', 'GSW', 'YDG', 'QNJ', 'EYF', 'NNZ', 'EAG', 'RFE', 'CBE', 'ENO', 'HDT', 'WFV', 'CFE', 'MGY', 'PAE', 'WUG', 'LPU', 'HZD', 'GFM', 'JHE', 'TPQ', 'DAO', 'KBZ', 'GBA', 'NFH', 'DDS', 'HYA', 'VWS', 'ZLG', 'XKO', 'HFE', 'OJS', 'ZNK', 'OAT', 'YFE', 'NYJ', 'RDP', 'NTN', 'BEW', 'IGK', 'AYV', 'QXZ', 'NJB', 'QYE', 'GGE', 'DVI', 'UFG', 'AWY', 'JAN', 'GPW', 'GYE', 'BKS', 'REI', 'XYZ', 'VTY', 'NCD', 'EMH', 'YZE', 'LKN', 'JFF', 'IHZ', 'KUE', 'VNJ', 'SAW', 'NWS', 'HTH', 'ZXC', 'IAW', 'EPV', 'ONR', 'NFN', 'KMQ', 'CCE', 'ASU', 'SYF', 'PIQ', 'EHB', 'IWX', 'TAV', 'PJV', 'KET', 'BCR', 'UTS', 'OCI', 'PBE', 'XDJ', 'XSN', 'CUS', 'XBF', 'ZQF', 'RTW', 'CJI', 'XPI', 'KGD', 'ZNS', 'JCM', 'SRD', 'ADD', 'NJY', 'TQU', 'RNK', 'IQR', 'FYF', 'VDQ', 'IUO', 'SXI', 'DRM', 'XSX', 'FBH', 'YQE', 'BTM', 'GZJ', 'JJR', 'ONH', 'NLJ', 'XVR', 'XCP', 'VLW', 'ISS', 'FDK', 'FAS', 'HDE', 'ETY', 'KIA', 'BJX', 'ZZM', 'EIB', 'HWD', 'HDY', 'QGB', 'BQH', 'PFT', 'MBI', 'NND', 'DRP', 'IWC', 'TFF', 'PDU', 'YTB', 'WHR', 'QNY', 'IUB', 'QZK', 'NXL', 'JOB', 'FEF', 'DZC', 'DAL', 'IJK', 'HBO', 'ZRR', 'JJH', 'MXI', 'YSP', 'BRV', 'JRA', 'JQE', 'XWQ', 'GVY', 'CEN', 'NYY', 'JCW', 'BIN', 'QGA', 'SCX', 'LZV', 'SPA', 'CRQ', 'RUJ', 'PYJ', 'BCG', 'QFR', 'QED', 'RLR', 'JXV', 'NIQ', 'WHL', 'UQJ', 'EPN', 'HEF', 'IUR', 'MCH', 'THC', 'WTN', 'OCP', 'DSM', 'LXW', 'ZQJ', 'FMU', 'VNW', 'IXM', 'BYF', 'NXY', 'CJO', 'IIY', 'CGW', 'PNE', 'WFH', 'SHG', 'SBO', 'XFA', 'KLO', 'YMJ', 'INZ', 'PMK', 'RYE', 'KHB', 'YXB', 'TZK', 'LES', 'ZZN', 'FXH', 'EMP', 'PDI', 'JIS', 'GQW', 'SMX', 'UCU', 'IFF', 'VZI', 'DPN', 'LIK', 'CJO', 'DOC', 'BJP', 'NUB', 'GPH', 'GRQ', 'SOU', 'TZH', 'WUN', 'PDC', 'EWB', 'YMX', 'OEF', 'MEB', 'QBU', 'JUQ', 'HEQ', 'UJF', 'QDF', 'MMK', 'ZVU', 'JRP', 'JOS', 'TCC', 'TIO', 'RPM', 'GVB', 'GOH', 'CUV', 'DUW', 'EAK', 'CII', 'PGT', 'CHN', 'HMM', 'RLO', 'ARC', 'EFW', 'HVX', 'HJV', 'OHY', 'GPG', 'MQO', 'GBU', 'YPD', 'FNW', 'MDP', 'KXQ', 'PSB', 'NVZ', 'BYC', 'IUC', 'URT', 'BVP', 'VZP', 'UTL', 'BXW', 'FKT', 'PGM', 'DGD', 'AIV', 'TMY', 'RUN', 'QYG', 'GXF', 'VPF', 'UNY', 'MOZ', 'INN', 'VEV', 'PWC', 'AWY', 'MKI', 'TXG', 'BQU', 'QAU', 'ILO', 'IBH', 'PCO', 'RDH', 'UNP', 'LLB', 'DER', 'YRP', 'MWZ', 'NIH', 'MCS', 'ZCL', 'IOI', 'UPU', 'MNS', 'JDR', 'OWF', 'XTA', 'OAZ', 'WCV', 'FFI', 'NLI', 'BFD', 'LDD', 'FZR', 'HNP', 'IRL', 'WEA', 'PDE', 'IEN', 'GGR', 'YUP', 'VWA', 'WEM', 'QPZ', 'ZBA', 'GLU', 'CUH', 'VDK', 'KLF', 'OLF', 'PMD', 'FLZ', 'JQV', 'SGP', 'JZZ', 'HIO', 'LFV', 'PTG', 'FEL', 'WNX', 'LDU', 'EXI', 'JMT', 'RID', 'TXZ', 'PGC', 'GLC', 'JLI', 'CLT', 'VDK', 'FBI', 'WSW', 'ELJ', 'YJY', 'YXU', 'XWC', 'MII', 'YXM', 'HCJ', 'JVC', 'RPF', 'NXE', 'UFO', 'BYH', 'EFA', 'EGO', 'XVS', 'VWG', 'LOY', 'LCG', 'TRQ', 'IKL', 'OQA', 'HTU', 'XNU', 'AZS', 'BOR', 'XWR', 'UQN', 'YFH', 'TDS', 'RLP', 'PHC', 'AYP', 'BVL', 'CQI', 'HSC', 'JRS', 'YZU', 'YFY', 'WEI', 'ITW', 'MYU', 'ORF', 'OTD', 'CAO', 'UJN', 'UFW', 'UUP', 'IQG', 'SEG', 'BAQ', 'KJD', 'DNG', 'BZL', 'DVT', 'KJY', 'XLW', 'TMH', 'DCX', 'MVJ', 'JFU', 'VCL', 'FQX', 'WRS', 'OXS', 'QGT', 'UPJ', 'QTI', 'AOU', 'CHR', 'AMC', 'VCN', 'OUC', 'JDK', 'CNL', 'HVI', 'WTS', 'VPC', 'THK', 'SVV', 'IGZ', 'ZPC', 'OBU', 'EQP', 'UMD', 'BQX', 'CKN', 'FOW', 'RGD', 'LNP', 'YEG', 'GVT', 'BSV', 'KKI', 'JEZ', 'GQH', 'DHB', 'TFV', 'TFS', 'WVS', 'ZFS', 'ZPG', 'PLN', 'OBM', 'BRE', 'HXC', 'JBF', 'GKA', 'RKS', 'PUS', 'XGS', 'QYD', 'IOK', 'DZR', 'IRX', 'NIJ', 'EAJ', 'SCY', 'KXB', 'VII', 'ETT', 'UPQ', 'JPW', 'ZTS', 'CZC', 'DFE', 'JLR', 'ZAC', 'XTQ', 'JZY', 'MUW', 'EXR', 'OQC', 'QLF', 'VAL', 'CBQ', 'SQO', 'HXA', 'SCI', 'ZAM', 'EDK', 'HVB', 'LSH', 'EOR', 'KZF', 'TLA', 'JIK', 'ULN', 'CJY', 'YKP', 'RQQ', 'XQJ', 'EFK', 'WEA', 'VHL', 'ANA', 'VYI', 'GTV', 'FRN', 'BXI', 'QYM', 'WUJ', 'FHW', 'RAH', 'RCK', 'RXY', 'KXC', 'IFA', 'OCZ', 'PTB', 'IHO', 'SDL', 'YEP', 'RFX', 'ZUR', 'FKV', 'WFA', 'VAF', 'ZHK', 'KZO', 'AAN', 'IME', 'MIF', 'VCG', 'BYQ', 'QOY', 'LSG', 'IRT', 'PUI', 'UAB', 'MPY', 'CKS', 'PZL', 'EUW', 'JIO', 'WXL', 'JEV', 'SBT', 'WUQ', 'GBH', 'QEG', 'ZCJ', 'OKQ', 'AAX', 'LJN', 'OYH', 'EIJ', 'ZNK', 'JIA', 'TDN', 'DPU', 'BTR', 'SEP', 'VKZ', 'HEX', 'WFB', 'DKR', 'FQH', 'CTQ', 'NPX', 'DHG', 'ZSN', 'ZYF', 'MLP', 'IUH', 'ZIX', 'UYI', 'SRK', 'GEG', 'SCW', 'TED', 'XOP', 'PML', 'RNK', 'KTA', 'KJJ', 'UXS', 'MRX', 'FJH', 'NRA', 'ZJJ', 'WGU', 'NPD', 'GPA', 'UBR', 'GXI', 'YQP', 'SEI', 'MOZ', 'UIR', 'SIH', 'EAP', 'IXV', 'EKD', 'YVX', 'PPZ', 'MBK', 'NTQ', 'BSZ', 'BVD', 'LMV', 'MDB', 'BOK', 'XLL', 'QJJ', 'CTH', 'BLQ', 'ZOR', 'RVD', 'MNW', 'OCC', 'FCN', 'MAK', 'OMZ', 'PLJ', 'QMP', 'PTZ', 'AXB', 'YJG', 'JZX', 'HUH', 'FOL', 'BUV', 'BEI', 'ZYN', 'JHS', 'JND', 'TIB', 'JMM', 'UTZ', 'GEZ', 'LTQ', 'IBJ', 'WOY', 'IGT', 'ZUV', 'MWP', 'GSJ', 'FET', 'LXM', 'ZBE', 'VTI', 'WLW', 'PYT', 'DJQ', 'NFU', 'BKX', 'MDD', 'YPX', 'SBG', 'TKI', 'QRU', 'IKG', 'SRQ', 'AOB', 'KHN', 'IZN', 'NQU', 'NQC', 'HVS', 'JCP', 'HUL', 'MXN', 'DOW', 'HXR', 'GZT', 'GNL', 'INF', 'AOU', 'RXX', 'UEP', 'OXY', 'VWA', 'GLH', 'WPM', 'NVR', 'HIP', 'RIM', 'JJJ', 'JDN', 'RBB', 'BDI', 'XVJ', 'ERO', 'RXJ', 'ZMA', 'TVU', 'HPE', 'VAU', 'GVU', 'ZGK', 'KCK', 'DHB', 'RNZ', 'HDO', 'CZF', 'UTI', 'SAQ', 'SWA', 'VXK', 'FEH', 'RFJ', 'ZKQ', 'DOJ', 'DKK', 'SDL', 'FSX', 'ZJF', 'KTA', 'NLG', 'PHJ', 'WOH', 'AXU', 'HSI', 'SZW') ORDER BY s;

SELECT s, s IN ('QOY', 'AAZ', 'AOR', 'VJR', 'ROL', 'KOS', 'JBC', 'EMZ', 'LQT', 'HYX', 'IYA', 'YAA', 'XMR', 'HGJ', 'LDR', 'MVT', 'XEQ', 'NPX', 'ZKV', 'HET', 'GZI', 'PLI', 'ABK', 'LOJ', 'KYB', 'UKG', 'PNY', 'SBV', 'VSJ', 'FAR', 'AXH', 'XWO', 'NKA', 'CPE', 'GSC', 'TWK', 'SXK', 'SUU', 'KPX', 'NXU', 'ZMR', 'BZG', 'CBO', 'SQA', 'VNE', 'NUT', 'LKF', 'IWL', 'CQE', 'UED', 'BHQ', 'RQR', 'FVG', 'EZZ', 'SRJ', 'UPA', 'JUV', 'AXP', 'JGL', 'HKC', 'CYM', 'AAK', 'WUM', 'NWK', 'DCQ', 'YXT', 'DQZ', 'WXB', 'YVG', 'YXL', 'FWG', 'PLN', 'YPK', 'UPA', 'GIC', 'IPS', 'WQB', 'NSR', 'WRT', 'WOP', 'JAX', 'XWZ', 'TIM', 'EAO', 'ANC', 'NAT', 'KFL', 'XJA', 'HUG', 'SVP', 'HVX', 'APA', 'RJI', 'QKP', 'MZB', 'MME', 'GJW', 'TBX', 'TRT', 'IRL', 'BUR', 'OWP', 'DAK', 'IGZ', 'OJL', 'BON', 'KLG', 'SSI', 'UOD', 'SCW', 'LGT', 'KTL', 'DPA', 'WTC', 'NSW', 'TEQ', 'HNU', 'GEI', 'OFK', 'UQB', 'QWI', 'ACS', 'MMR', 'EHZ', 'PXR', 'SPK', 'POO', 'CMF', 'UEE', 'QUK', 'BZR', 'ZBH', 'KJV', 'RIV', 'HOX', 'GZU', 'PQO', 'NLU', 'BRV', 'XND', 'APA', 'QXV', 'QEW', 'AJR', 'OYC', 'YTA', 'FMS', 'GSK', 'MCC', 'QVQ', 'FYD', 'QQJ', 'VBM', 'EYV', 'ELQ', 'KHI', 'HTU', 'KDQ', 'YRI', 'CEB', 'WGP', 'HIY', 'XSM', 'FTD', 'EHU', 'KFE', 'FCN', 'YRC', 'WFC', 'YRC', 'PZH', 'ZAG', 'AAM', 'UBM', 'JIH', 'CRQ', 'BOE', 'KLI', 'SAB', 'TYY', 'AGX', 'FEH', 'ZPX', 'PRU', 'GXA', 'HDC', 'UJG', 'OCO', 'BLZ', 'ZFH', 'LRN', 'GYF', 'FBR', 'OVH', 'XTL', 'FQZ', 'MKP', 'UKA', 'RMN', 'IWX', 'RYF', 'WTB', 'KWU', 'MKN', 'JFM', 'VUU', 'UTU', 'CLW', 'HKQ', 'SJA', 'ADT', 'RTN', 'ZPJ', 'NUX', 'HMY', 'RDA', 'YQQ', 'COL', 'JRB', 'PYV', 'YAU', 'AYM', 'STV', 'BDC', 'PIZ', 'CAK', 'VWS', 'GNU', 'SZA', 'PMP', 'WOV', 'LPL', 'PJY', 'FWV', 'CLH', 'IVC', 'YHN', 'QWB', 'SCE', 'PFN', 'WDI', 'PIN', 'QSN', 'WDE', 'JOZ', 'DPZ', 'WFX', 'IQS', 'TBZ', 'FXQ', 'PLM', 'WQH', 'BEJ', 'KFM', 'KLH', 'ZVT', 'MBV', 'JQT', 'RIR', 'FDB', 'AOV', 'GZV', 'CTN', 'YCY', 'XSB', 'UUI', 'EWM', 'MQR', 'SKE', 'ACO', 'AGP', 'RWD', 'XGR', 'PCO', 'OSY', 'QHG', 'YEW', 'DHQ', 'FNH', 'QWX', 'RSL', 'GKL', 'VEP', 'SME', 'TKH', 'JOQ', 'XZY', 'ZBF', 'UJP', 'UKD', 'QIZ', 'VQF', 'QUW', 'XGX', 'TPG', 'LYD', 'WBX', 'GRI', 'YDC', 'PJU', 'EFU', 'MZV', 'GBN', 'EJE', 'JYH', 'XTC', 'ZNI', 'JJE', 'XJD', 'SJU', 'SNP', 'ZLL', 'ZRL', 'CUC', 'EOQ', 'IZU', 'MZH', 'UMQ', 'ULS', 'ETH', 'AUT', 'NPL', 'IYB', 'OXQ', 'CXH', 'QRI', 'RHM', 'PNO', 'QGF', 'THK', 'KYU', 'OIE', 'OGO', 'UDS', 'OIS', 'DXJ', 'ETV', 'UWI', 'VLX', 'SOG', 'KNW', 'FOR', 'CCT', 'PHH', 'YNI', 'BOW', 'AJR', 'LJE', 'PUB', 'NPF', 'ELB', 'SIE', 'NAC', 'IZD', 'BQE', 'SUH', 'YQE', 'AVC', 'CIV', 'SOK', 'VRB', 'YUG', 'JFO', 'FCB', 'LEY', 'IPX', 'PEZ', 'BFV', 'BCV', 'RWZ', 'BHX', 'OJV', 'QPZ', 'QQX', 'ECG', 'MCD', 'UEI', 'IAE', 'VKD', 'QUJ', 'WYL', 'UOI', 'XDP', 'JTW', 'LFJ', 'AHH', 'XRL', 'QQM', 'AGA', 'RLE', 'MFI', 'UYI', 'HEM', 'KKJ', 'VLN', 'PYN', 'ZZA', 'WGI', 'PTH', 'BMR', 'MZK', 'IPY', 'SLA', 'JOS', 'ZLT', 'ZDF', 'XWY', 'OHJ', 'RPL', 'BPE', 'NVZ', 'YIF', 'HWM', 'BGM', 'VUO', 'YIW', 'UBS', 'EAW', 'AYN', 'UCE', 'UIB', 'DNV', 'YAQ', 'TBE', 'GMT', 'EOW', 'RWL', 'TYU', 'UTX', 'SRJ', 'FZZ', 'RJU', 'QJB', 'MFY', 'PID', 'RWM', 'PWH', 'PJS', 'BNK', 'IUO', 'POW', 'MBL', 'XMH', 'YWN', 'FTC', 'XME', 'MUS', 'XYD', 'BVI', 'FGU', 'BCJ', 'KRH', 'XPM', 'HDV', 'SQS', 'PFE', 'SIU', 'PZL', 'APT', 'CZK', 'HHL', 'EVI', 'GOE', 'RWG', 'PZF', 'DPS', 'GXN', 'WVC', 'ZDE', 'BDQ', 'WYP', 'PLB', 'SZZ', 'HPM', 'BUL', 'VRY', 'ZNG', 'XUS', 'SLU', 'SLQ', 'UOH', 'YHR', 'FGE', 'RJY', 'CMO', 'NGZ', 'PCG', 'PFN', 'EPG', 'ILE', 'RXF', 'NLD', 'PYW', 'WTG', 'HKL', 'IGB', 'YNF', 'TAL', 'MBR', 'YEK', 'VKO', 'ZGO', 'UKH', 'GJN', 'QCD', 'OQD', 'HEU', 'GWT', 'THS', 'LAS', 'JLU', 'TNV', 'UQB', 'YDO', 'ZFI', 'XBV', 'VYI', 'GAC', 'GDU', 'DLL', 'JXX', 'GUP', 'FUF', 'KQI', 'TLC', 'DAQ', 'OMN', 'FYT', 'GIZ', 'NON', 'UGU', 'CSI', 'NEO', 'SVA', 'ZBM', 'GGU', 'PFF', 'QFB', 'JZH', 'OBB', 'VHM', 'PAJ', 'BKD', 'JEI', 'ZQG', 'GBX', 'UCR', 'TXS', 'PAK', 'HYP', 'CAI', 'WJY', 'VLH', 'QLY', 'XKI', 'SDS', 'QEF', 'KKF', 'XBQ', 'FTE', 'CEX', 'PJM', 'RTA', 'TXQ', 'BSK', 'OXU', 'ELZ', 'WII', 'THG', 'RDY', 'LFS', 'JNY', 'ORJ', 'FXD', 'OTG', 'BUG', 'EDF', 'DDM', 'HTZ', 'IAA', 'RWR', 'XBL', 'PXV', 'FVH', 'OSB', 'UQW', 'CUP', 'OIF', 'VQZ', 'KCT', 'VWJ', 'IRP', 'UAZ', 'CCF', 'MCY', 'GGP', 'HDT', 'SZT', 'JSR', 'HDR', 'MQR', 'OCP', 'XQD', 'QYT', 'NSA', 'LPC', 'MGS', 'DAZ', 'SDQ', 'BMS', 'EJL', 'ADY', 'JFP', 'YQD', 'CIP', 'CST', 'ATU', 'JTD', 'HDI', 'JMF', 'LJO', 'SEC', 'ZCN', 'EMG', 'RLJ', 'AMV', 'BVT', 'IZV', 'DND', 'VCJ', 'HNY', 'DSI', 'DWM', 'EDI', 'LQO', 'NDN', 'GGA', 'EXH', 'XFP', 'NLU', 'DNC', 'OTA', 'KQD', 'JRJ', 'JXV', 'UAK', 'TNB', 'ZXJ', 'YTU', 'MMS', 'NCV', 'VIR', 'EUI', 'KND', 'PTL', 'LKF', 'FUT', 'VUX', 'PWI', 'ETZ', 'IHN', 'GYS', 'KAQ', 'UYN', 'HOQ', 'END', 'WHD', 'NMT', 'HEW', 'OBN', 'RDZ', 'SKP', 'LHN', 'HQS', 'YTY', 'GXW', 'EKC', 'BCD', 'BRQ', 'CSX', 'OCI', 'OZP', 'TBN', 'HHG', 'VFZ', 'WJY', 'VBT', 'LNT', 'YDL', 'KOC', 'IJF', 'HSB', 'USO', 'HOK', 'MEK', 'WXT', 'DRT', 'SNE', 'WAI', 'EMP', 'IGC', 'QPJ', 'GCF', 'CJW', 'ONH', 'XQO', 'KFY', 'CZQ', 'AUC', 'BQD', 'KBH', 'GFS', 'BVT', 'QLX', 'TYO', 'WWE', 'TXE', 'MQM', 'WNC', 'WKC', 'ZLW', 'RDJ', 'WCZ', 'UOV', 'IBT', 'HOQ', 'VIA', 'DPE', 'AJX', 'AYA', 'DEM', 'YDD', 'SOU', 'KZU', 'ATH', 'BPS', 'GTM', 'ALW', 'ODR', 'DBZ', 'KYG', 'CES', 'NWC', 'QER', 'FFA', 'UZS', 'GPL', 'MTD', 'TPI', 'GMR', 'WXV', 'YYY', 'FAX', 'MNL', 'JUS', 'SVJ', 'ZNX', 'QDQ', 'FIH', 'EXR', 'XSM', 'OQX', 'GUW', 'KEG', 'DHJ', 'GXH', 'ROZ', 'TCT', 'UNU', 'XGS', 'ODG', 'GZH', 'TZV', 'LFP', 'CDF', 'LJZ', 'RLL', 'QBY', 'CEQ', 'JWH', 'GYJ', 'LSJ', 'CQV', 'HJT', 'PVB', 'DLH', 'BFI', 'RIV', 'UCG', 'KOG', 'TXS', 'JDF', 'DKD', 'FOE', 'UIO', 'GDY', 'OIG', 'FWH', 'YSY', 'HGV', 'GIS', 'CMB', 'SDT', 'ROH', 'NMU', 'YHA', 'WDJ', 'VDV', 'LDE', 'PUR', 'UNS', 'NDY', 'YCZ', 'SAQ', 'OJW', 'OIP', 'IWC', 'WPT', 'PJI', 'PMP', 'CEB', 'WRZ', 'LSI', 'QUA', 'HMA', 'VWZ', 'KWX', 'RTA', 'IXL', 'XZH', 'UOT', 'IWF', 'LXN', 'VXY', 'DMU', 'EKC', 'JRF', 'EMA', 'LNG', 'JWT', 'NLH', 'EPH', 'FFJ', 'RTR', 'XJE', 'OAW', 'HSP', 'AFE', 'EPI', 'RSV', 'OIZ', 'BEC', 'ILJ', 'UPU', 'JZC', 'HGP', 'HLT', 'GSY', 'XGP', 'NYL', 'VHY', 'CQN', 'WEE', 'GFJ', 'LGE', 'IBM', 'NCI', 'OPR', 'TIO', 'DPL', 'TFD', 'XKJ', 'DWM', 'DPV', 'RIE', 'UKK', 'OBM', 'NLJ', 'VUM', 'IRE', 'DNR', 'KVP', 'PZX', 'FBD', 'GDI', 'YAW', 'MKG', 'EAX', 'CBM', 'TCH', 'LGX', 'UCY', 'EWE', 'ZUN', 'DPM', 'BUH', 'NQJ', 'RFX', 'XUI', 'BHB', 'BMM', 'MGZ', 'PTR', 'RUM', 'FVC', 'BRO', 'ZVP', 'YMV', 'PNX', 'WRO', 'KKR', 'WCE', 'UFT', 'QWG', 'UNY', 'IZE', 'ZFX', 'KBC', 'DPS', 'QYY', 'ZNO', 'DHR', 'GWP', 'UTY', 'CSO', 'SQH', 'TBU', 'CYF', 'ROH', 'GYF', 'BWT', 'RKM', 'WLV', 'FSB', 'EWV', 'DHJ', 'RPB', 'NVJ', 'LUF', 'TTV', 'WPT', 'APQ', 'IXF', 'HAQ', 'OVS', 'JTE', 'LOQ', 'PXF', 'MAZ', 'AHV', 'TZO', 'LHO', 'ATL', 'MII', 'LTR', 'KPQ', 'ZXP', 'JPI', 'GLF', 'VKG', 'CAM', 'GVX', 'JUO', 'YWZ', 'NNQ', 'RGV', 'CDS', 'CYA', 'QPX', 'HHG', 'DDF', 'YXE', 'ZKL', 'XDJ', 'HLC', 'ORZ', 'UEX', 'FKH', 'RWT', 'RKN', 'USW', 'UBC', 'QGT', 'MGN', 'WXC', 'ENU', 'RLW', 'OFP', 'XGN', 'PSX', 'JTD', 'LFK', 'PBI', 'BWD', 'JVG', 'HFG', 'WLM', 'XNC', 'HWH', 'FGZ', 'JEK', 'HRL', 'NBL', 'THW', 'WKI', 'IME', 'UIY', 'WAA', 'XQO', 'UUD', 'IRS', 'FBF', 'JZV', 'CCR', 'YLF', 'RXP', 'UIP', 'OGN', 'IID', 'ENW', 'XPL', 'PFE', 'MEX', 'GPH', 'RBW', 'JML', 'ZVR', 'YWL', 'QPJ', 'LYY', 'NKS', 'VIJ', 'SAZ', 'LNC', 'NGU', 'RRD', 'PJK', 'FOH', 'ORW', 'YLQ', 'GFG', 'NOW', 'IDV', 'WHE', 'RTH', 'NVL', 'BAQ', 'HAK', 'SKH', 'LTZ', 'HDF', 'SIB', 'PHY', 'PWZ', 'CWY', 'JNE', 'CXW', 'EPN', 'LAO', 'WEI', 'AGK', 'XJQ', 'ILR', 'CVO', 'MEX', 'BGD', 'AEK', 'DHK', 'KAC', 'DQL', 'WDA', 'GVU', 'RUN', 'XQU', 'EXU', 'WER', 'UBS', 'XOK', 'WML', 'XQM', 'XBW', 'VTT', 'SMF', 'DRX', 'XGZ', 'KXD', 'IVV', 'OIJ', 'KAW', 'SEW', 'URD', 'QAW', 'RFL', 'ZGP', 'VVR', 'ZLA', 'LXV', 'OWU', 'YGF', 'BJO', 'OTZ', 'RSD', 'GTT', 'CEP', 'HVH', 'ZNI', 'BHV', 'IKT', 'GCF', 'XYF', 'FOL', 'NLV', 'NFL', 'TOO', 'GYY', 'POS', 'JGL', 'BUE', 'DYK', 'VVV', 'RMJ', 'LBS', 'WSL', 'FHZ', 'RWB', 'DLC', 'XPL', 'YLW', 'OYK', 'HQN', 'MRA', 'QAJ', 'MIX', 'ICY', 'WZS', 'IJG', 'VYF', 'XON', 'AZB', 'RQC', 'AYK', 'CUV', 'JST', 'BNP', 'UCF', 'DIG', 'ANC', 'XVQ', 'CEC', 'TND', 'SHS', 'YTJ', 'XFX', 'TBI', 'JRE', 'WBD', 'ZVA', 'TSG', 'DYY', 'XUB', 'JDH', 'VSO', 'NMU', 'QWP', 'SKI', 'XMG', 'RVK', 'XVO', 'OAV', 'NYW', 'NRR', 'QRY', 'EBG', 'OYJ', 'ZDN', 'LLU', 'ACT', 'MYP', 'KUK', 'TDO', 'CUB', 'QHL', 'QRO', 'FTD', 'KBL', 'YEY', 'NQD', 'OAH', 'ACU', 'EDM', 'QYP', 'OUO', 'PDK', 'VSP', 'PKW', 'JZF', 'GAL', 'COS', 'RFL', 'DIM', 'MPZ', 'IZX', 'KBU', 'LVK', 'DTP', 'PWC', 'EUQ', 'ESR', 'PIL', 'PTW', 'DNF', 'VLW', 'NBA', 'DFW', 'RDK', 'PYF', 'NIA', 'LLQ', 'WUE', 'SLJ', 'TEF', 'GNC', 'FIC', 'EQD', 'ERL', 'IKZ', 'UKG', 'TNT', 'XCP', 'NRV', 'GVU', 'XFZ', 'VEL', 'GCR', 'XAE', 'GTN', 'VRZ', 'WSY', 'RKD', 'WIA', 'ZPB', 'EWE', 'AVT', 'EZD', 'YCN', 'TJY', 'PCS', 'PXA', 'EAR', 'CIE', 'PPO', 'PFP', 'PFJ', 'SZK', 'IBH', 'LQB', 'EDI', 'ELJ', 'OJS', 'QBC', 'GTV', 'GXH', 'MFG', 'QQO', 'PIK', 'LDF', 'KIX', 'CSV', 'MAP', 'ALA', 'KZH', 'QPA', 'BCG', 'DWQ', 'MUM', 'UJT', 'ZIK', 'XPU', 'CQL', 'DZH', 'ZGR', 'UCU', 'LAT', 'NXO', 'QYM', 'PNV', 'UTV', 'SGK', 'EXJ', 'NTQ', 'LPQ', 'RVT', 'GHZ', 'FSE', 'PGQ', 'WJL', 'JQI', 'IWL', 'SWW', 'DEQ', 'VLF', 'NUD', 'ZNG', 'DCR', 'LCI', 'NZK', 'QAK', 'GHL', 'UCZ', 'ESU', 'JQG', 'NJL', 'PPD', 'QGA', 'GSW', 'YDG', 'QNJ', 'EYF', 'NNZ', 'EAG', 'RFE', 'CBE', 'ENO', 'HDT', 'WFV', 'CFE', 'MGY', 'PAE', 'WUG', 'LPU', 'HZD', 'GFM', 'JHE', 'TPQ', 'DAO', 'KBZ', 'GBA', 'NFH', 'DDS', 'HYA', 'VWS', 'ZLG', 'XKO', 'HFE', 'OJS', 'ZNK', 'OAT', 'YFE', 'NYJ', 'RDP', 'NTN', 'BEW', 'IGK', 'AYV', 'QXZ', 'NJB', 'QYE', 'GGE', 'DVI', 'UFG', 'AWY', 'JAN', 'GPW', 'GYE', 'BKS', 'REI', 'XYZ', 'VTY', 'NCD', 'EMH', 'YZE', 'LKN', 'JFF', 'IHZ', 'KUE', 'VNJ', 'SAW', 'NWS', 'HTH', 'ZXC', 'IAW', 'EPV', 'ONR', 'NFN', 'KMQ', 'CCE', 'ASU', 'SYF', 'PIQ', 'EHB', 'IWX', 'TAV', 'PJV', 'KET', 'BCR', 'UTS', 'OCI', 'PBE', 'XDJ', 'XSN', 'CUS', 'XBF', 'ZQF', 'RTW', 'CJI', 'XPI', 'KGD', 'ZNS', 'JCM', 'SRD', 'ADD', 'NJY', 'TQU', 'RNK', 'IQR', 'FYF', 'VDQ', 'IUO', 'SXI', 'DRM', 'XSX', 'FBH', 'YQE', 'BTM', 'GZJ', 'JJR', 'ONH', 'NLJ', 'XVR', 'XCP', 'VLW', 'ISS', 'FDK', 'FAS', 'HDE', 'ETY', 'KIA', 'BJX', 'ZZM', 'EIB', 'HWD', 'HDY', 'QGB', 'BQH', 'PFT', 'MBI', 'NND', 'DRP', 'IWC', 'TFF', 'PDU', 'YTB', 'WHR', 'QNY', 'IUB', 'QZK', 'NXL', 'JOB', 'FEF', 'DZC', 'DAL', 'IJK', 'HBO', 'ZRR', 'JJH', 'MXI', 'YSP', 'BRV', 'JRA', 'JQE', 'XWQ', 'GVY', 'CEN', 'NYY', 'JCW', 'BIN', 'QGA', 'SCX', 'LZV', 'SPA', 'CRQ', 'RUJ', 'PYJ', 'BCG', 'QFR', 'QED', 'RLR', 'JXV', 'NIQ', 'WHL', 'UQJ', 'EPN', 'HEF', 'IUR', 'MCH', 'THC', 'WTN', 'OCP', 'DSM', 'LXW', 'ZQJ', 'FMU', 'VNW', 'IXM', 'BYF', 'NXY', 'CJO', 'IIY', 'CGW', 'PNE', 'WFH', 'SHG', 'SBO', 'XFA', 'KLO', 'YMJ', 'INZ', 'PMK', 'RYE', 'KHB', 'YXB', 'TZK', 'LES', 'ZZN', 'FXH', 'EMP', 'PDI', 'JIS', 'GQW', 'SMX', 'UCU', 'IFF', 'VZI', 'DPN', 'LIK', 'CJO', 'DOC', 'BJP', 'NUB', 'GPH', 'GRQ', 'SOU', 'TZH', 'WUN', 'PDC', 'EWB', 'YMX', 'OEF', 'MEB', 'QBU', 'JUQ', 'HEQ', 'UJF', 'QDF', 'MMK', 'ZVU', 'JRP', 'JOS', 'TCC', 'TIO', 'RPM', 'GVB', 'GOH', 'CUV', 'DUW', 'EAK', 'CII', 'PGT', 'CHN', 'HMM', 'RLO', 'ARC', 'EFW', 'HVX', 'HJV', 'OHY', 'GPG', 'MQO', 'GBU', 'YPD', 'FNW', 'MDP', 'KXQ', 'PSB', 'NVZ', 'BYC', 'IUC', 'URT', 'BVP', 'VZP', 'UTL', 'BXW', 'FKT', 'PGM', 'DGD', 'AIV', 'TMY', 'RUN', 'QYG', 'GXF', 'VPF', 'UNY', 'MOZ', 'INN', 'VEV', 'PWC', 'AWY', 'MKI', 'TXG', 'BQU', 'QAU', 'ILO', 'IBH', 'PCO', 'RDH', 'UNP', 'LLB', 'DER', 'YRP', 'MWZ', 'NIH', 'MCS', 'ZCL', 'IOI', 'UPU', 'MNS', 'JDR', 'OWF', 'XTA', 'OAZ', 'WCV', 'FFI', 'NLI', 'BFD', 'LDD', 'FZR', 'HNP', 'IRL', 'WEA', 'PDE', 'IEN', 'GGR', 'YUP', 'VWA', 'WEM', 'QPZ', 'ZBA', 'GLU', 'CUH', 'VDK', 'KLF', 'OLF', 'PMD', 'FLZ', 'JQV', 'SGP', 'JZZ', 'HIO', 'LFV', 'PTG', 'FEL', 'WNX', 'LDU', 'EXI', 'JMT', 'RID', 'TXZ', 'PGC', 'GLC', 'JLI', 'CLT', 'VDK', 'FBI', 'WSW', 'ELJ', 'YJY', 'YXU', 'XWC', 'MII', 'YXM', 'HCJ', 'JVC', 'RPF', 'NXE', 'UFO', 'BYH', 'EFA', 'EGO', 'XVS', 'VWG', 'LOY', 'LCG', 'TRQ', 'IKL', 'OQA', 'HTU', 'XNU', 'AZS', 'BOR', 'XWR', 'UQN', 'YFH', 'TDS', 'RLP', 'PHC', 'AYP', 'BVL', 'CQI', 'HSC', 'JRS', 'YZU', 'YFY', 'WEI', 'ITW', 'MYU', 'ORF', 'OTD', 'CAO', 'UJN', 'UFW', 'UUP', 'IQG', 'SEG', 'BAQ', 'KJD', 'DNG', 'BZL', 'DVT', 'KJY', 'XLW', 'TMH', 'DCX', 'MVJ', 'JFU', 'VCL', 'FQX', 'WRS', 'OXS', 'QGT', 'UPJ', 'QTI', 'AOU', 'CHR', 'AMC', 'VCN', 'OUC', 'JDK', 'CNL', 'HVI', 'WTS', 'VPC', 'THK', 'SVV', 'IGZ', 'ZPC', 'OBU', 'EQP', 'UMD', 'BQX', 'CKN', 'FOW', 'RGD', 'LNP', 'YEG', 'GVT', 'BSV', 'KKI', 'JEZ', 'GQH', 'DHB', 'TFV', 'TFS', 'WVS', 'ZFS', 'ZPG', 'PLN', 'OBM', 'BRE', 'HXC', 'JBF', 'GKA', 'RKS', 'PUS', 'XGS', 'QYD', 'IOK', 'DZR', 'IRX', 'NIJ', 'EAJ', 'SCY', 'KXB', 'VII', 'ETT', 'UPQ', 'JPW', 'ZTS', 'CZC', 'DFE', 'JLR', 'ZAC', 'XTQ', 'JZY', 'MUW', 'EXR', 'OQC', 'QLF', 'VAL', 'CBQ', 'SQO', 'HXA', 'SCI', 'ZAM', 'EDK', 'HVB', 'LSH', 'EOR', 'KZF', 'TLA', 'JIK', 'ULN', 'CJY', 'YKP', 'RQQ', 'XQJ', 'EFK', 'WEA', 'VHL', 'ANA', 'VYI', 'GTV', 'FRN', 'BXI', 'QYM', 'WUJ', 'FHW', 'RAH', 'RCK', 'RXY', 'KXC', 'IFA', 'OCZ', 'PTB', 'IHO', 'SDL', 'YEP', 'RFX', 'ZUR', 'FKV', 'WFA', 'VAF', 'ZHK', 'KZO', 'AAN', 'IME', 'MIF', 'VCG', 'BYQ', 'QOY', 'LSG', 'IRT', 'PUI', 'UAB', 'MPY', 'CKS', 'PZL', 'EUW', 'JIO', 'WXL', 'JEV', 'SBT', 'WUQ', 'GBH', 'QEG', 'ZCJ', 'OKQ', 'AAX', 'LJN', 'OYH', 'EIJ', 'ZNK', 'JIA', 'TDN', 'DPU', 'BTR', 'SEP', 'VKZ', 'HEX', 'WFB', 'DKR', 'FQH', 'CTQ', 'NPX', 'DHG', 'ZSN', 'ZYF', 'MLP', 'IUH', 'ZIX', 'UYI', 'SRK', 'GEG', 'SCW', 'TED', 'XOP', 'PML', 'RNK', 'KTA', 'KJJ', 'UXS', 'MRX', 'FJH', 'NRA', 'ZJJ', 'WGU', 'NPD', 'GPA', 'UBR', 'GXI', 'YQP', 'SEI', 'MOZ', 'UIR', 'SIH', 'EAP', 'IXV', 'EKD', 'YVX', 'PPZ', 'MBK', 'NTQ', 'BSZ', 'BVD', 'LMV', 'MDB', 'BOK', 'XLL', 'QJJ', 'CTH', 'BLQ', 'ZOR', 'RVD', 'MNW', 'OCC', 'FCN', 'MAK', 'OMZ', 'PLJ', 'QMP', 'PTZ', 'AXB', 'YJG', 'JZX', 'HUH', 'FOL', 'BUV', 'BEI', 'ZYN', 'JHS', 'JND', 'TIB', 'JMM', 'UTZ', 'GEZ', 'LTQ', 'IBJ', 'WOY', 'IGT', 'ZUV', 'MWP', 'GSJ', 'FET', 'LXM', 'ZBE', 'VTI', 'WLW', 'PYT', 'DJQ', 'NFU', 'BKX', 'MDD', 'YPX', 'SBG', 'TKI', 'QRU', 'IKG', 'SRQ', 'AOB', 'KHN', 'IZN', 'NQU', 'NQC', 'HVS', 'JCP', 'HUL', 'MXN', 'DOW', 'HXR', 'GZT', 'GNL', 'INF', 'AOU', 'RXX', 'UEP', 'OXY', 'VWA', 'GLH', 'WPM', 'NVR', 'HIP', 'RIM', 'JJJ', 'JDN', 'RBB', 'BDI', 'XVJ', 'ERO', 'RXJ', 'ZMA', 'TVU', 'HPE', 'VAU', 'GVU', 'ZGK', 'KCK', 'DHB', 'RNZ', 'HDO', 'CZF', 'UTI', 'SAQ', 'SWA', 'VXK', 'FEH', 'RFJ', 'ZKQ', 'DOJ', 'DKK', 'SDL', 'FSX', 'ZJF', 'KTA', 'NLG', 'PHJ', 'WOH', 'AXU', 'HSI', 'SZW') AS in_list FROM strings ORDER BY s;

SELECT s, s IN ('QOY', 'AAZ', 'AOR', 'VJR', 'ROL', 'KOS', 'JBC', 'EMZ', 'LQT', 'HYX', 'IYA', 'YAA', 'XMR', 'HGJ', 'LDR', 'MVT', 'XEQ', 'NPX', 'ZKV', 'HET', 'GZI', 'PLI', 'ABK', 'LOJ', 'KYB', 'UKG', 'PNY', 'SBV', 'VSJ', 'FAR', 'AXH', 'XWO', 'NKA', 'CPE', 'GSC', 'TWK', 'SXK', 'SUU', 'KPX', 'NXU', 'ZMR', 'BZG', 'CBO', 'SQA', 'VNE', 'NUT', 'LKF', 'IWL', 'CQE', 'UED', 'BHQ', 'RQR', 'FVG', 'EZZ', 'SRJ', 'UPA', 'JUV', 'AXP', 'JGL', 'HKC', 'CYM', 'AAK', 'WUM', 'NWK', 'DCQ', 'YXT', 'DQZ', 'WXB', 'YVG', 'YXL', 'FWG', 'PLN', 'YPK', 'UPA', 'GIC', 'IPS', 'WQB', 'NSR', 'WRT', 'WOP', 'JAX', 'XWZ', 'TIM', 'EAO', 'ANC', 'NAT', 'KFL', 'XJA', 'HUG', 'SVP', 'HVX', 'APA', 'RJI', 'QKP', 'MZB', 'MME', 'GJW', 'TBX', 'TRT', 'IRL', 'BUR', 'OWP', 'DAK', 'IGZ', 'OJL', 'BON', 'KLG', 'SSI', 'UOD', 'SCW', 'LGT', 'KTL', 'DPA', 'WTC', 'NSW', 'TEQ', 'HNU', 'GEI', 'OFK', 'UQB', 'QWI', 'ACS', 'MMR', 'EHZ', 'PXR', 'SPK', 'POO', 'CMF', 'UEE', 'QUK', 'BZR', 'ZBH', 'KJV', 'RIV', 'HOX', 'GZU', 'PQO', 'NLU', 'BRV', 'XND', 'APA', 'QXV', 'QEW', 'AJR', 'OYC', 'YTA', 'FMS', 'GSK', 'MCC', 'QVQ', 'FYD', 'QQJ', 'VBM', 'EYV', 'ELQ', 'KHI', 'HTU', 'KDQ', 'YRI', 'CEB', 'WGP', 'HIY', 'XSM', 'FTD', 'EHU', 'KFE', 'FCN', 'YRC', 'WFC', 'YRC', 'PZH', 'ZAG', 'AAM', 'UBM', 'JIH', 'CRQ', 'BOE', 'KLI', 'SAB', 'TYY', 'AGX', 'FEH', 'ZPX', 'PRU', 'GXA', 'HDC', 'UJG', 'OCO', 'BLZ', 'ZFH', 'LRN', 'GYF', 'FBR', 'OVH', 'XTL', 'FQZ', 'MKP', 'UKA', 'RMN', 'IWX', 'RYF', 'WTB', 'KWU', 'MKN', 'JFM', 'VUU', 'UTU', 'CLW', 'HKQ', 'SJA', 'ADT', 'RTN', 'ZPJ', 'NUX', 'HMY', 'RDA', 'YQQ', 'COL', 'JRB', 'PYV', 'YAU', 'AYM', 'STV', 'BDC', 'PIZ', 'CAK', 'VWS', 'GNU', 'SZA', 'PMP', 'WOV', 'LPL', 'PJY', 'FWV', 'CLH', 'IVC', 'YHN', 'QWB', 'SCE', 'PFN', 'WDI', 'PIN', 'QSN', 'WDE', 'JOZ', 'DPZ', 'WFX', 'IQS', 'TBZ', 'FXQ', 'PLM', 'WQH', 'BEJ', 'KFM', 'KLH', 'ZVT', 'MBV', 'JQT', 'RIR', 'FDB', 'AOV', 'GZV', 'CTN', 'YCY', 'XSB', 'UUI', 'EWM', 'MQR', 'SKE', 'ACO', 'AGP', 'RWD', 'XGR', 'PCO', 'OSY', 'QHG', 'YEW', 'DHQ', 'FNH', 'QWX', 'RSL', 'GKL', 'VEP', 'SME', 'TKH', 'JOQ', 'XZY', 'ZBF', 'UJP', 'UKD', 'QIZ', 'VQF', 'QUW', 'XGX', 'TPG', 'LYD', 'WBX', 'GRI', 'YDC', 'PJU', 'EFU', 'MZV', 'GBN', 'EJE', 'JYH', 'XTC', 'ZNI', 'JJE', 'XJD', 'SJU', 'SNP', 'ZLL', 'ZRL', 'CUC', 'EOQ', 'IZU', 'MZH', 'UMQ', 'ULS', 'ETH', 'AUT', 'NPL', 'IYB', 'OXQ', 'CXH', 'QRI', 'RHM', 'PNO', 'QGF', 'THK', 'KYU', 'OIE', 'OGO', 'UDS', 'OIS', 'DXJ', 'ETV', 'UWI', 'VLX', 'SOG', 'KNW', 'FOR', 'CCT', 'PHH', 'YNI', 'BOW', 'AJR', 'LJE', 'PUB', 'NPF', 'ELB', 'SIE', 'NAC', 'IZD', 'BQE', 'SUH', 'YQE', 'AVC', 'CIV', 'SOK', 'VRB', 'YUG', 'JFO', 'FCB', 'LEY', 'IPX', 'PEZ', 'BFV', 'BCV', 'RWZ', 'BHX', 'OJV', 'QPZ', 'QQX', 'ECG', 'MCD', 'UEI', 'IAE', 'VKD', 'QUJ', 'WYL', 'UOI', 'XDP', 'JTW', 'LFJ', 'AHH', 'XRL', 'QQM', 'AGA', 'RLE', 'MFI', 'UYI', 'HEM', 'KKJ', 'VLN', 'PYN', 'ZZA', 'WGI', 'PTH', 'BMR', 'MZK', 'IPY', 'SLA', 'JOS', 'ZLT', 'ZDF', 'XWY', 'OHJ', 'RPL', 'BPE', 'NVZ', 'YIF', 'HWM', 'BGM', 'VUO', 'YIW', 'UBS', 'EAW', 'AYN', 'UCE', 'UIB', 'DNV', 'YAQ', 'TBE', 'GMT', 'EOW', 'RWL', 'TYU', 'UTX', 'SRJ', 'FZZ', 'RJU', 'QJB', 'MFY', 'PID', 'RWM', 'PWH', 'PJS', 'BNK', 'IUO', 'POW', 'MBL', 'XMH', 'YWN', 'FTC', 'XME', 'MUS', 'XYD', 'BVI', 'FGU', 'BCJ', 'KRH', 'XPM', 'HDV', 'SQS', 'PFE', 'SIU', 'PZL', 'APT', 'CZK', 'HHL', 'EVI', 'GOE', 'RWG', 'PZF', 'DPS', 'GXN', 'WVC', 'ZDE', 'BDQ', 'WYP', 'PLB', 'SZZ', 'HPM', 'BUL', 'VRY', 'ZNG', 'XUS', 'SLU', 'SLQ', 'UOH', 'YHR', 'FGE', 'RJY', 'CMO', 'NGZ', 'PCG', 'PFN', 'EPG', 'ILE', 'RXF', 'NLD', 'PYW', 'WTG', 'HKL', 'IGB', 'YNF', 'TAL', 'MBR', 'YEK', 'VKO', 'ZGO', 'UKH', 'GJN', 'QCD', 'OQD', 'HEU', 'GWT', 'THS', 'LAS', 'JLU', 'TNV', 'UQB', 'YDO', 'ZFI', 'XBV', 'VYI', 'GAC', 'GDU', 'DLL', 'JXX', 'GUP', 'FUF', 'KQI', 'TLC', 'DAQ', 'OMN', 'FYT', 'GIZ', 'NON', 'UGU', 'CSI', 'NEO', 'SVA', 'ZBM', 'GGU', 'PFF', 'QFB', 'JZH', 'OBB', 'VHM', 'PAJ', 'BKD', 'JEI', 'ZQG', 'GBX', 'UCR', 'TXS', 'PAK', 'HYP', 'CAI', 'WJY', 'VLH', 'QLY', 'XKI', 'SDS', 'QEF', 'KKF', 'XBQ', 'FTE', 'CEX', 'PJM', 'RTA', 'TXQ', 'BSK', 'OXU', 'ELZ', 'WII', 'THG', 'RDY', 'LFS', 'JNY', 'ORJ', 'FXD', 'OTG', 'BUG', 'EDF', 'DDM', 'HTZ', 'IAA', 'RWR', 'XBL', 'PXV', 'FVH', 'OSB', 'UQW', 'CUP', 'OIF', 'VQZ', 'KCT', 'VWJ', 'IRP', 'UAZ', 'CCF', 'MCY', 'GGP', 'HDT', 'SZT', 'JSR', 'HDR', 'MQR', 'OCP', 'XQD', 'QYT', 'NSA', 'LPC', 'MGS', 'DAZ', 'SDQ', 'BMS', 'EJL', 'ADY', 'JFP', 'YQD', 'CIP', 'CST', 'ATU', 'JTD', 'HDI', 'JMF', 'LJO', 'SEC', 'ZCN', 'EMG', 'RLJ', 'AMV', 'BVT', 'IZV', 'DND', 'VCJ', 'HNY', 'DSI', 'DWM', 'EDI', 'LQO', 'NDN', 'GGA', 'EXH', 'XFP', 'NLU', 'DNC', 'OTA', 'KQD', 'JRJ', 'JXV', 'UAK', 'TNB', 'ZXJ', 'YTU', 'MMS', 'NCV', 'VIR', 'EUI', 'KND', 'PTL', 'LKF', 'FUT', 'VUX', 'PWI', 'ETZ', 'IHN', 'GYS', 'KAQ', 'UYN', 'HOQ', 'END', 'WHD', 'NMT', 'HEW', 'OBN', 'RDZ', 'SKP', 'LHN', 'HQS', 'YTY', 'GXW', 'EKC', 'BCD', 'BRQ', 'CSX', 'OCI', 'OZP', 'TBN', 'HHG', 'VFZ', 'WJY', 'VBT', 'LNT', 'YDL', 'KOC', 'IJF', 'HSB', 'USO', 'HOK', 'MEK', 'WXT', 'DRT', 'SNE', 'WAI', 'EMP', 'IGC', 'QPJ', 'GCF', 'CJW', 'ONH', 'XQO', 'KFY', 'CZQ', 'AUC', 'BQD', 'KBH', 'GFS', 'BVT', 'QLX', 'TYO', 'WWE', 'TXE', 'MQM', 'WNC', 'WKC', 'ZLW', 'RDJ', 'WCZ', 'UOV', 'IBT', 'HOQ', 'VIA', 'DPE', 'AJX', 'AYA', 'DEM', 'YDD', 'SOU', 'KZU', 'ATH', 'BPS', 'GTM', 'ALW', 'ODR', 'DBZ', 'KYG', 'CES', 'NWC', 'QER', 'FFA', 'UZS', 'GPL', 'MTD', 'TPI', 'GMR', 'WXV', 'YYY', 'FAX', 'MNL', 'JUS', 'SVJ', 'ZNX', 'QDQ', 'FIH', 'EXR', 'XSM', 'OQX', 'GUW', 'KEG', 'DHJ', 'GXH', 'ROZ', 'TCT', 'UNU', 'XGS', 'ODG', 'GZH', 'TZV', 'LFP', 'CDF', 'LJZ', 'RLL', 'QBY', 'CEQ', 'JWH', 'GYJ', 'LSJ', 'CQV', 'HJT', 'PVB', 'DLH', 'BFI', 'RIV', 'UCG', 'KOG', 'TXS', 'JDF', 'DKD', 'FOE', 'UIO', 'GDY', 'OIG', 'FWH', 'YSY', 'HGV', 'GIS', 'CMB', 'SDT', 'ROH', 'NMU', 'YHA', 'WDJ', 'VDV', 'LDE', 'PUR', 'UNS', 'NDY', 'YCZ', 'SAQ', 'OJW', 'OIP', 'IWC', 'WPT', 'PJI', 'PMP', 'CEB', 'WRZ', 'LSI', 'QUA', 'HMA', 'VWZ', 'KWX', 'RTA', 'IXL', 'XZH', 'UOT', 'IWF', 'LXN', 'VXY', 'DMU', 'EKC', 'JRF', 'EMA', 'LNG', 'JWT', 'NLH', 'EPH', 'FFJ', 'RTR', 'XJE', 'OAW', 'HSP', 'AFE', 'EPI', 'RSV', 'OIZ', 'BEC', 'ILJ', 'UPU', 'JZC', 'HGP', 'HLT', 'GSY', 'XGP', 'NYL', 'VHY', 'CQN', 'WEE', 'GFJ', 'LGE', 'IBM', 'NCI', 'OPR', 'TIO', 'DPL', 'TFD', 'XKJ', 'DWM', 'DPV', 'RIE', 'UKK', 'OBM', 'NLJ', 'VUM', 'IRE', 'DNR', 'KVP', 'PZX', 'FBD', 'GDI', 'YAW', 'MKG', 'EAX', 'CBM', 'TCH', 'LGX', 'UCY', 'EWE', 'ZUN', 'DPM', 'BUH', 'NQJ', 'RFX', 'XUI', 'BHB', 'BMM', 'MGZ', 'PTR', 'RUM', 'FVC', 'BRO', 'ZVP', 'YMV', 'PNX', 'WRO', 'KKR', 'WCE', 'UFT', 'QWG', 'UNY', 'IZE', 'ZFX', 'KBC', 'DPS', 'QYY', 'ZNO', 'DHR', 'GWP', 'UTY', 'CSO', 'SQH', 'TBU', 'CYF', 'ROH', 'GYF', 'BWT', 'RKM', 'WLV', 'FSB', 'EWV', 'DHJ', 'RPB', 'NVJ', 'LUF', 'TTV', 'WPT', 'APQ', 'IXF', 'HAQ', 'OVS', 'JTE', 'LOQ', 'PXF', 'MAZ', 'AHV', 'TZO', 'LHO', 'ATL', 'MII', 'LTR', 'KPQ', 'ZXP', 'JPI', 'GLF', 'VKG', 'CAM', 'GVX', 'JUO', 'YWZ', 'NNQ', 'RGV', 'CDS', 'CYA', 'QPX', 'HHG', 'DDF', 'YXE', 'ZKL', 'XDJ', 'HLC', 'ORZ', 'UEX', 'FKH', 'RWT', 'RKN', 'USW', 'UBC', 'QGT', 'MGN', 'WXC', 'ENU', 'RLW', 'OFP', 'XGN', 'PSX', 'JTD', 'LFK', 'PBI', 'BWD', 'JVG', 'HFG', 'WLM', 'XNC', 'HWH', 'FGZ', 'JEK', 'HRL', 'NBL', 'THW', 'WKI', 'IME', 'UIY', 'WAA', 'XQO', 'UUD', 'IRS', 'FBF', 'JZV', 'CCR', 'YLF', 'RXP', 'UIP', 'OGN', 'IID', 'ENW', 'XPL', 'PFE', 'MEX', 'GPH', 'RBW', 'JML', 'ZVR', 'YWL', 'QPJ', 'LYY', 'NKS', 'VIJ', 'SAZ', 'LNC', 'NGU', 'RRD', 'PJK', 'FOH', 'ORW', 'YLQ', 'GFG', 'NOW', 'IDV', 'WHE', 'RTH', 'NVL', 'BAQ', 'HAK', 'SKH', 'LTZ', 'HDF', 'SIB', 'PHY', 'PWZ', 'CWY', 'JNE', 'CXW', 'EPN', 'LAO', 'WEI', 'AGK', 'XJQ', 'ILR', 'CVO', 'MEX', 'BGD', 'AEK', 'DHK', 'KAC', 'DQL', 'WDA', 'GVU', 'RUN', 'XQU', 'EXU', 'WER', 'UBS', 'XOK', 'WML', 'XQM', 'XBW', 'VTT', 'SMF', 'DRX', 'XGZ', 'KXD', 'IVV', 'OIJ', 'KAW', 'SEW', 'URD', 'QAW', 'RFL', 'ZGP', 'VVR', 'ZLA', 'LXV', 'OWU', 'YGF', 'BJO', 'OTZ', 'RSD', 'GTT', 'CEP', 'HVH', 'ZNI', 'BHV', 'IKT', 'GCF', 'XYF', 'FOL', 'NLV', 'NFL', 'TOO', 'GYY', 'POS', 'JGL', 'BUE', 'DYK', 'VVV', 'RMJ', 'LBS', 'WSL', 'FHZ', 'RWB', 'DLC', 'XPL', 'YLW', 'OYK', 'HQN', 'MRA', 'QAJ', 'MIX', 'ICY', 'WZS', 'IJG', 'VYF', 'XON', 'AZB', 'RQC', 'AYK', 'CUV', 'JST', 'BNP', 'UCF', 'DIG', 'ANC', 'XVQ', 'CEC', 'TND', 'SHS', 'YTJ', 'XFX', 'TBI', 'JRE', 'WBD', 'ZVA', 'TSG', 'DYY', 'XUB', 'JDH', 'VSO', 'NMU', 'QWP', 'SKI', 'XMG', 'RVK', 'XVO', 'OAV', 'NYW', 'NRR', 'QRY', 'EBG', 'OYJ', 'ZDN', 'LLU', 'ACT', 'MYP', 'KUK', 'TDO', 'CUB', 'QHL', 'QRO', 'FTD', 'KBL', 'YEY', 'NQD', 'OAH', 'ACU', 'EDM', 'QYP', 'OUO', 'PDK', 'VSP', 'PKW', 'JZF', 'GAL', 'COS', 'RFL', 'DIM', 'MPZ', 'IZX', 'KBU', 'LVK', 'DTP', 'PWC', 'EUQ', 'ESR', 'PIL', 'PTW', 'DNF', 'VLW', 'NBA', 'DFW', 'RDK', 'PYF', 'NIA', 'LLQ', 'WUE', 'SLJ', 'TEF', 'GNC', 'FIC', 'EQD', 'ERL', 'IKZ', 'UKG', 'TNT', 'XCP', 'NRV', 'GVU', 'XFZ', 'VEL', 'GCR', 'XAE', 'GTN', 'VRZ', 'WSY', 'RKD', 'WIA', 'ZPB', 'EWE', 'AVT', 'EZD', 'YCN', 'TJY', 'PCS', 'PXA', 'EAR', 'CIE', 'PPO', 'PFP', 'PFJ', 'SZK', 'IBH', 'LQB', 'EDI', 'ELJ', 'OJS', 'QBC', 'GTV', 'GXH', 'MFG', 'QQO', 'PIK', 'LDF', 'KIX', 'CSV', 'MAP', 'ALA', 'KZH', 'QPA', 'BCG', 'DWQ', 'MUM', 'UJT', 'ZIK', 'XPU', 'CQL', 'DZH', 'ZGR', 'UCU', 'LAT', 'NXO', 'QYM', 'PNV', 'UTV', 'SGK', 'EXJ', 'NTQ', 'LPQ', 'RVT', 'GHZ', 'FSE', 'PGQ', 'WJL', 'JQI', 'IWL', 'SWW', 'DEQ', 'VLF', 'NUD', 'ZNG', 'DCR', 'LCI', 'NZK', 'QAK', 'GHL', 'UCZ', 'ESU', 'JQG', 'NJL', 'PPD', 'QGA', 'GSW', 'YDG', 'QNJ', 'EYF', 'NNZ', 'EAG', 'RFE', 'CBE', 'ENO', 'HDT', 'WFV', 'CFE', 'MGY', 'PAE', 'WUG', 'LPU', 'HZD', 'GFM', 'JHE', 'TPQ', 'DAO', 'KBZ', 'GBA', 'NFH', 'DDS', 'HYA', 'VWS', 'ZLG', 'XKO', 'HFE', 'OJS', 'ZNK', 'OAT', 'YFE', 'NYJ', 'RDP', 'NTN', 'BEW', 'IGK', 'AYV', 'QXZ', 'NJB', 'QYE', 'GGE', 'DVI', 'UFG', 'AWY', 'JAN', 'GPW', 'GYE', 'BKS', 'REI', 'XYZ', 'VTY', 'NCD', 'EMH', 'YZE', 'LKN', 'JFF', 'IHZ', 'KUE', 'VNJ', 'SAW', 'NWS', 'HTH', 'ZXC', 'IAW', 'EPV', 'ONR', 'NFN', 'KMQ', 'CCE', 'ASU', 'SYF', 'PIQ', 'EHB', 'IWX', 'TAV', 'PJV', 'KET', 'BCR', 'UTS', 'OCI', 'PBE', 'XDJ', 'XSN', 'CUS', 'XBF', 'ZQF', 'RTW', 'CJI', 'XPI', 'KGD', 'ZNS', 'JCM', 'SRD', 'ADD', 'NJY', 'TQU', 'RNK', 'IQR', 'FYF', 'VDQ', 'IUO', 'SXI', 'DRM', 'XSX', 'FBH', 'YQE', 'BTM', 'GZJ', 'JJR', 'ONH', 'NLJ', 'XVR', 'XCP', 'VLW', 'ISS', 'FDK', 'FAS', 'HDE', 'ETY', 'KIA', 'BJX', 'ZZM', 'EIB', 'HWD', 'HDY', 'QGB', 'BQH', 'PFT', 'MBI', 'NND', 'DRP', 'IWC', 'TFF', 'PDU', 'YTB', 'WHR', 'QNY', 'IUB', 'QZK', 'NXL', 'JOB', 'FEF', 'DZC', 'DAL', 'IJK', 'HBO', 'ZRR', 'JJH', 'MXI', 'YSP', 'BRV', 'JRA', 'JQE', 'XWQ', 'GVY', 'CEN', 'NYY', 'JCW', 'BIN', 'QGA', 'SCX', 'LZV', 'SPA', 'CRQ', 'RUJ', 'PYJ', 'BCG', 'QFR', 'QED', 'RLR', 'JXV', 'NIQ', 'WHL', 'UQJ', 'EPN', 'HEF', 'IUR', 'MCH', 'THC', 'WTN', 'OCP', 'DSM', 'LXW', 'ZQJ', 'FMU', 'VNW', 'IXM', 'BYF', 'NXY', 'CJO', 'IIY', 'CGW', 'PNE', 'WFH', 'SHG', 'SBO', 'XFA', 'KLO', 'YMJ', 'INZ', 'PMK', 'RYE', 'KHB', 'YXB', 'TZK', 'LES', 'ZZN', 'FXH', 'EMP', 'PDI', 'JIS', 'GQW', 'SMX', 'UCU', 'IFF', 'VZI', 'DPN', 'LIK', 'CJO', 'DOC', 'BJP', 'NUB', 'GPH', 'GRQ', 'SOU', 'TZH', 'WUN', 'PDC', 'EWB', 'YMX', 'OEF', 'MEB', 'QBU', 'JUQ', 'HEQ', 'UJF', 'QDF', 'MMK', 'ZVU', 'JRP', 'JOS', 'TCC', 'TIO', 'RPM', 'GVB', 'GOH', 'CUV', 'DUW', 'EAK', 'CII', 'PGT', 'CHN', 'HMM', 'RLO', 'ARC', 'EFW', 'HVX', 'HJV', 'OHY', 'GPG', 'MQO', 'GBU', 'YPD', 'FNW', 'MDP', 'KXQ', 'PSB', 'NVZ', 'BYC', 'IUC', 'URT', 'BVP', 'VZP', 'UTL', 'BXW', 'FKT', 'PGM', 'DGD', 'AIV', 'TMY', 'RUN', 'QYG', 'GXF', 'VPF', 'UNY', 'MOZ', 'INN', 'VEV', 'PWC', 'AWY', 'MKI', 'TXG', 'BQU', 'QAU', 'ILO', 'IBH', 'PCO', 'RDH', 'UNP', 'LLB', 'DER', 'YRP', 'MWZ', 'NIH', 'MCS', 'ZCL', 'IOI', 'UPU', 'MNS', 'JDR', 'OWF', 'XTA', 'OAZ', 'WCV', 'FFI', 'NLI', 'BFD', 'LDD', 'FZR', 'HNP', 'IRL', 'WEA', 'PDE', 'IEN', 'GGR', 'YUP', 'VWA', 'WEM', 'QPZ', 'ZBA', 'GLU', 'CUH', 'VDK', 'KLF', 'OLF', 'PMD', 'FLZ', 'JQV', 'SGP', 'JZZ', 'HIO', 'LFV', 'PTG', 'FEL', 'WNX', 'LDU', 'EXI', 'JMT', 'RID', 'TXZ', 'PGC', 'GLC', 'JLI', 'CLT', 'VDK', 'FBI', 'WSW', 'ELJ', 'YJY', 'YXU', 'XWC', 'MII', 'YXM', 'HCJ', 'JVC', 'RPF', 'NXE', 'UFO', 'BYH', 'EFA', 'EGO', 'XVS', 'VWG', 'LOY', 'LCG', 'TRQ', 'IKL', 'OQA', 'HTU', 'XNU', 'AZS', 'BOR', 'XWR', 'UQN', 'YFH', 'TDS', 'RLP', 'PHC', 'AYP', 'BVL', 'CQI', 'HSC', 'JRS', 'YZU', 'YFY', 'WEI', 'ITW', 'MYU', 'ORF', 'OTD', 'CAO', 'UJN', 'UFW', 'UUP', 'IQG', 'SEG', 'BAQ', 'KJD', 'DNG', 'BZL', 'DVT', 'KJY', 'XLW', 'TMH', 'DCX', 'MVJ', 'JFU', 'VCL', 'FQX', 'WRS', 'OXS', 'QGT', 'UPJ', 'QTI', 'AOU', 'CHR', 'AMC', 'VCN', 'OUC', 'JDK', 'CNL', 'HVI', 'WTS', 'VPC', 'THK', 'SVV', 'IGZ', 'ZPC', 'OBU', 'EQP', 'UMD', 'BQX', 'CKN', 'FOW', 'RGD', 'LNP', 'YEG', 'GVT', 'BSV', 'KKI', 'JEZ', 'GQH', 'DHB', 'TFV', 'TFS', 'WVS', 'ZFS', 'ZPG', 'PLN', 'OBM', 'BRE', 'HXC', 'JBF', 'GKA', 'RKS', 'PUS', 'XGS', 'QYD', 'IOK', 'DZR', 'IRX', 'NIJ', 'EAJ', 'SCY', 'KXB', 'VII', 'ETT', 'UPQ', 'JPW', 'ZTS', 'CZC', 'DFE', 'JLR', 'ZAC', 'XTQ', 'JZY', 'MUW', 'EXR', 'OQC', 'QLF', 'VAL', 'CBQ', 'SQO', 'HXA', 'SCI', 'ZAM', 'EDK', 'HVB', 'LSH', 'EOR', 'KZF', 'TLA', 'JIK', 'ULN', 'CJY', 'YKP', 'RQQ', 'XQJ', 'EFK', 'WEA', 'VHL', 'ANA', 'VYI', 'GTV', 'FRN', 'BXI', 'QYM', 'WUJ', 'FHW', 'RAH', 'RCK', 'RXY', 'KXC', 'IFA', 'OCZ', 'PTB', 'IHO', 'SDL', 'YEP', 'RFX', 'ZUR', 'FKV', 'WFA', 'VAF', 'ZHK', 'KZO', 'AAN', 'IME', 'MIF', 'VCG', 'BYQ', 'QOY', 'LSG', 'IRT', 'PUI', 'UAB', 'MPY', 'CKS', 'PZL', 'EUW', 'JIO', 'WXL', 'JEV', 'SBT', 'WUQ', 'GBH', 'QEG', 'ZCJ', 'OKQ', 'AAX', 'LJN', 'OYH', 'EIJ', 'ZNK', 'JIA', 'TDN', 'DPU', 'BTR', 'SEP', 'VKZ', 'HEX', 'WFB', 'DKR', 'FQH', 'CTQ', 'NPX', 'DHG', 'ZSN', 'ZYF', 'MLP', 'IUH', 'ZIX', 'UYI', 'SRK', 'GEG', 'SCW', 'TED', 'XOP', 'PML', 'RNK', 'KTA', 'KJJ', 'UXS', 'MRX', 'FJH', 'NRA', 'ZJJ', 'WGU', 'NPD', 'GPA', 'UBR', 'GXI', 'YQP', 'SEI', 'MOZ', 'UIR', 'SIH', 'EAP', 'IXV', 'EKD', 'YVX', 'PPZ', 'MBK', 'NTQ', 'BSZ', 'BVD', 'LMV', 'MDB', 'BOK', 'XLL', 'QJJ', 'CTH', 'BLQ', 'ZOR', 'RVD', 'MNW', 'OCC', 'FCN', 'MAK', 'OMZ', 'PLJ', 'QMP', 'PTZ', 'AXB', 'YJG', 'JZX', 'HUH', 'FOL', 'BUV', 'BEI', 'ZYN', 'JHS', 'JND', 'TIB', 'JMM', 'UTZ', 'GEZ', 'LTQ', 'IBJ', 'WOY', 'IGT', 'ZUV', 'MWP', 'GSJ', 'FET', 'LXM', 'ZBE', 'VTI', 'WLW', 'PYT', 'DJQ', 'NFU', 'BKX', 'MDD', 'YPX', 'SBG', 'TKI', 'QRU', 'IKG', 'SRQ', 'AOB', 'KHN', 'IZN', 'NQU', 'NQC', 'HVS', 'JCP', 'HUL', 'MXN', 'DOW', 'HXR', 'GZT', 'GNL', 'INF', 'AOU', 'RXX', 'UEP', 'OXY', 'VWA', 'GLH', 'WPM', 'NVR', 'HIP', 'RIM', 'JJJ', 'JDN', 'RBB', 'BDI', 'XVJ', 'ERO', 'RXJ', 'ZMA', 'TVU', 'HPE', 'VAU', 'GVU', 'ZGK', 'KCK', 'DHB', 'RNZ', 'HDO', 'CZF', 'UTI', 'SAQ', 'SWA', 'VXK', 'FEH', 'RFJ', 'ZKQ', 'DOJ', 'DKK', 'SDL', 'FSX', 'ZJF', 'KTA', 'NLG', 'PHJ', 'WOH', 'AXU', 'HSI', 'SZW', NULL) AS in_list FROM strings ORDER BY s;

SELECT s, NOT s IN ('QOY', 'AAZ', 'AOR', 'VJR', 'ROL', 'KOS', 'JBC', 'EMZ', 'LQT', 'HYX', 'IYA', 'YAA', 'XMR', 'HGJ', 'LDR', 'MVT', 'XEQ', 'NPX', 'ZKV', 'HET', 'GZI', 'PLI', 'ABK', 'LOJ', 'KYB', 'UKG', 'PNY', 'SBV', 'VSJ', 'FAR', 'AXH', 'XWO', 'NKA', 'CPE', 'GSC', 'TWK', 'SXK', 'SUU', 'KPX', 'NXU', 'ZMR', 'BZG', 'CBO', 'SQA', 'VNE', 'NUT', 'LKF', 'IWL', 'CQE', 'UED', 'BHQ', 'RQR', 'FVG', 'EZZ', 'SRJ', 'UPA', 'JUV', 'AXP', 'JGL', 'HKC', 'CYM', 'AAK', 'WUM', 'NWK', 'DCQ', 'YXT', 'DQZ', 'WXB', 'YVG', 'YXL', 'FWG', 'PLN', 'YPK', 'UPA', 'GIC', 'IPS', 'WQB', 'NSR', 'WRT', 'WOP', 'JAX', 'XWZ', 'TIM', 'EAO', 'ANC', 'NAT', 'KFL', 'XJA', 'HUG', 'SVP', 'HVX', 'APA', 'RJI', 'QKP', 'MZB', 'MME', 'GJW', 'TBX', 'TRT', 'IRL', 'BUR', 'OWP', 'DAK', 'IGZ', 'OJL', 'BON', 'KLG', 'SSI', 'UOD', 'SCW', 'LGT', 'KTL', 'DPA', 'WTC', 'NSW', 'TEQ', 'HNU', 'GEI', 'OFK', 'UQB', 'QWI', 'ACS', 'MMR', 'EHZ', 'PXR', 'SPK', 'POO', 'CMF', 'UEE', 'QUK', 'BZR', 'ZBH', 'KJV', 'RIV', 'HOX', 'GZU', 'PQO', 'NLU', 'BRV', 'XND', 'APA', 'QXV', 'QEW', 'AJR', 'OYC', 'YTA', 'FMS', 'GSK', 'MCC', 'QVQ', 'FYD', 'QQJ', 'VBM', 'EYV', 'ELQ', 'KHI', 'HTU', 'KDQ', 'YRI', 'CEB', 'WGP', 'HIY', 'XSM', 'FTD', 'EHU', 'KFE', 'FCN', 'YRC', 'WFC', 'YRC', 'PZH', 'ZAG', 'AAM', 'UBM', 'JIH', 'CRQ', 'BOE', 'KLI', 'SAB', 'TYY', 'AGX', 'FEH', 'ZPX', 'PRU', 'GXA', 'HDC', 'UJG', 'OCO', 'BLZ', 'ZFH', 'LRN', 'GYF', 'FBR', 'OVH', 'XTL', 'FQZ', 'MKP', 'UKA', 'RMN', 'IWX', 'RYF', 'WTB', 'KWU', 'MKN', 'JFM', 'VUU', 'UTU', 'CLW', 'HKQ', 'SJA', 'ADT', 'RTN', 'ZPJ', 'NUX', 'HMY', 'RDA', 'YQQ', 'COL', 'JRB', 'PYV', 'YAU', 'AYM', 'STV', 'BDC', 'PIZ', 'CAK', 'VWS', 'GNU', 'SZA', 'PMP', 'WOV', 'LPL', 'PJY', 'FWV', 'CLH', 'IVC', 'YHN', 'QWB', 'SCE', 'PFN', 'WDI', 'PIN', 'QSN', 'WDE', 'JOZ', 'DPZ', 'WFX', 'IQS', 'TBZ', 'FXQ', 'PLM', 'WQH', 'BEJ', 'KFM', 'KLH', 'ZVT', 'MBV', 'JQT', 'RIR', 'FDB', 'AOV', 'GZV', 'CTN', 'YCY', 'XSB', 'UUI', 'EWM', 'MQR', 'SKE', 'ACO', 'AGP', 'RWD', 'XGR', 'PCO', 'OSY', 'QHG', 'YEW', 'DHQ', 'FNH', 'QWX', 'RSL', 'GKL', 'VEP', 'SME', 'TKH', 'JOQ', 'XZY', 'ZBF', 'UJP', 'UKD', 'QIZ', 'VQF', 'QUW', 'XGX', 'TPG', 'LYD', 'WBX', 'GRI', 'YDC', 'PJU', 'EFU', 'MZV', 'GBN', 'EJE', 'JYH', 'XTC', 'ZNI', 'JJE', 'XJD', 'SJU', 'SNP', 'ZLL', 'ZRL', 'CUC', 'EOQ', 'IZU', 'MZH', 'UMQ', 'ULS', 'ETH', 'AUT', 'NPL', 'IYB', 'OXQ', 'CXH', 'QRI', 'RHM', 'PNO', 'QGF', 'THK', 'KYU', 'OIE', 'OGO', 'UDS', 'OIS', 'DXJ', 'ETV', 'UWI', 'VLX', 'SOG', 'KNW', 'FOR', 'CCT', 'PHH', 'YNI', 'BOW', 'AJR', 'LJE', 'PUB', 'NPF', 'ELB', 'SIE', 'NAC', 'IZD', 'BQE', 'SUH', 'YQE', 'AVC', 'CIV', 'SOK', 'VRB', 'YUG', 'JFO', 'FCB', 'LEY', 'IPX', 'PEZ', 'BFV', 'BCV', 'RWZ', 'BHX', 'OJV', 'QPZ', 'QQX', 'ECG', 'MCD', 'UEI', 'IAE', 'VKD', 'QUJ', 'WYL', 'UOI', 'XDP', 'JTW', 'LFJ', 'AHH', 'XRL', 'QQM', 'AGA', 'RLE', 'MFI', 'UYI', 'HEM', 'KKJ', 'VLN', 'PYN', 'ZZA', 'WGI', 'PTH', 'BMR', 'MZK', 'IPY', 'SLA', 'JOS', 'ZLT', 'ZDF', 'XWY', 'OHJ', 'RPL', 'BPE', 'NVZ', 'YIF', 'HWM', 'BGM', 'VUO', 'YIW', 'UBS', 'EAW', 'AYN', 'UCE', 'UIB', 'DNV', 'YAQ', 'TBE', 'GMT', 'EOW', 'RWL', 'TYU', 'UTX', 'SRJ', 'FZZ', 'RJU', 'QJB', 'MFY', 'PID', 'RWM', 'PWH', 'PJS', 'BNK', 'IUO', 'POW', 'MBL', 'XMH', 'YWN', 'FTC', 'XME', 'MUS', 'XYD', 'BVI', 'FGU', 'BCJ', 'KRH', 'XPM', 'HDV', 'SQS', 'PFE', 'SIU', 'PZL', 'APT', 'CZK', 'HHL', 'EVI', 'GOE', 'RWG', 'PZF', 'DPS', 'GXN', 'WVC', 'ZDE', 'BDQ', 'WYP', 'PLB', 'SZZ', 'HPM', 'BUL', 'VRY', 'ZNG', 'XUS', 'SLU', 'SLQ', 'UOH', 'YHR', 'FGE', 'RJY', 'CMO', 'NGZ', 'PCG', 'PFN', 'EPG', 'ILE', 'RXF', 'NLD', 'PYW', 'WTG', 'HKL', 'IGB', 'YNF', 'TAL', 'MBR', 'YEK', 'VKO', 'ZGO', 'UKH', 'GJN', 'QCD', 'OQD', 'HEU', 'GWT', 'THS', 'LAS', 'JLU', 'TNV', 'UQB', 'YDO', 'ZFI', 'XBV', 'VYI', 'GAC', 'GDU', 'DLL', 'JXX', 'GUP', 'FUF', 'KQI', 'TLC', 'DAQ', 'OMN', 'FYT', 'GIZ', 'NON', 'UGU', 'CSI', 'NEO', 'SVA', 'ZBM', 'GGU', 'PFF', 'QFB', 'JZH', 'OBB', 'VHM', 'PAJ', 'BKD', 'JEI', 'ZQG', 'GBX', 'UCR', 'TXS', 'PAK', 'HYP', 'CAI', 'WJY', 'VLH', 'QLY', 'XKI', 'SDS', 'QEF', 'KKF', 'XBQ', 'FTE', 'CEX', 'PJM', 'RTA', 'TXQ', 'BSK', 'OXU', 'ELZ', 'WII', 'THG', 'RDY', 'LFS', 'JNY', 'ORJ', 'FXD', 'OTG', 'BUG', 'EDF', 'DDM', 'HTZ', 'IAA', 'RWR', 'XBL', 'PXV', 'FVH', 'OSB', 'UQW', 'CUP', 'OIF', 'VQZ', 'KCT', 'VWJ', 'IRP', 'UAZ', 'CCF', 'MCY', 'GGP', 'HDT', 'SZT', 'JSR', 'HDR', 'MQR', 'OCP', 'XQD', 'QYT', 'NSA', 'LPC', 'MGS', 'DAZ', 'SDQ', 'BMS', 'EJL', 'ADY', 'JFP', 'YQD', 'CIP', 'CST', 'ATU', 'JTD', 'HDI', 'JMF', 'LJO', 'SEC', 'ZCN', 'EMG', 'RLJ', 'AMV', 'BVT', 'IZV', 'DND', 'VCJ', 'HNY', 'DSI', 'DWM', 'EDI', 'LQO', 'NDN', 'GGA', 'EXH', 'XFP', 'NLU', 'DNC', 'OTA', 'KQD', 'JRJ', 'JXV', 'UAK', 'TNB', 'ZXJ', 'YTU', 'MMS', 'NCV', 'VIR', 'EUI', 'KND', 'PTL', 'LKF', 'FUT', 'VUX', 'PWI', 'ETZ', 'IHN', 'GYS', 'KAQ', 'UYN', 'HOQ', 'END', 'WHD', 'NMT', 'HEW', 'OBN', 'RDZ', 'SKP', 'LHN', 'HQS', 'YTY', 'GXW', 'EKC', 'BCD', 'BRQ', 'CSX', 'OCI', 'OZP', 'TBN', 'HHG', 'VFZ', 'WJY', 'VBT', 'LNT', 'YDL', 'KOC', 'IJF', 'HSB', 'USO', 'HOK', 'MEK', 'WXT', 'DRT', 'SNE', 'WAI', 'EMP', 'IGC', 'QPJ', 'GCF', 'CJW', 'ONH', 'XQO', 'KFY', 'CZQ', 'AUC', 'BQD', 'KBH', 'GFS', 'BVT', 'QLX', 'TYO', 'WWE', 'TXE', 'MQM', 'WNC', 'WKC', 'ZLW', 'RDJ', 'WCZ', 'UOV', 'IBT', 'HOQ', 'VIA', 'DPE', 'AJX', 'AYA', 'DEM', 'YDD', 'SOU', 'KZU', 'ATH', 'BPS', 'GTM', 'ALW', 'ODR', 'DBZ', 'KYG', 'CES', 'NWC', 'QER', 'FFA', 'UZS', 'GPL', 'MTD', 'TPI', 'GMR', 'WXV', 'YYY', 'FAX', 'MNL', 'JUS', 'SVJ', 'ZNX', 'QDQ', 'FIH', 'EXR', 'XSM', 'OQX', 'GUW', 'KEG', 'DHJ', 'GXH', 'ROZ', 'TCT', 'UNU', 'XGS', 'ODG', 'GZH', 'TZV', 'LFP', 'CDF', 'LJZ', 'RLL', 'QBY', 'CEQ', 'JWH', 'GYJ', 'LSJ', 'CQV', 'HJT', 'PVB', 'DLH', 'BFI', 'RIV', 'UCG', 'KOG', 'TXS', 'JDF', 'DKD', 'FOE', 'UIO', 'GDY', 'OIG', 'FWH', 'YSY', 'HGV', 'GIS', 'CMB', 'SDT', 'ROH', 'NMU', 'YHA', 'WDJ', 'VDV', 'LDE', 'PUR', 'UNS', 'NDY', 'YCZ', 'SAQ', 'OJW', 'OIP', 'IWC', 'WPT', 'PJI', 'PMP', 'CEB', 'WRZ', 'LSI', 'QUA', 'HMA', 'VWZ', 'KWX', 'RTA', 'IXL', 'XZH', 'UOT', 'IWF', 'LXN', 'VXY', 'DMU', 'EKC', 'JRF', 'EMA', 'LNG', 'JWT', 'NLH', 'EPH', 'FFJ', 'RTR', 'XJE', 'OAW', 'HSP', 'AFE', 'EPI', 'RSV', 'OIZ', 'BEC', 'ILJ', 'UPU', 'JZC', 'HGP', 'HLT', 'GSY', 'XGP', 'NYL', 'VHY', 'CQN', 'WEE', 'GFJ', 'LGE', 'IBM', 'NCI', 'OPR', 'TIO', 'DPL', 'TFD', 'XKJ', 'DWM', 'DPV', 'RIE', 'UKK', 'OBM', 'NLJ', 'VUM', 'IRE', 'DNR', 'KVP', 'PZX', 'FBD', 'GDI', 'YAW', 'MKG', 'EAX', 'CBM', 'TCH', 'LGX', 'UCY', 'EWE', 'ZUN', 'DPM', 'BUH', 'NQJ', 'RFX', 'XUI', 'BHB', 'BMM', 'MGZ', 'PTR', 'RUM', 'FVC', 'BRO', 'ZVP', 'YMV', 'PNX', 'WRO', 'KKR', 'WCE', 'UFT', 'QWG', 'UNY', 'IZE', 'ZFX', 'KBC', 'DPS', 'QYY', 'ZNO', 'DHR', 'GWP', 'UTY', 'CSO', 'SQH', 'TBU', 'CYF', 'ROH', 'GYF', 'BWT', 'RKM', 'WLV', 'FSB', 'EWV', 'DHJ', 'RPB', 'NVJ', 'LUF', 'TTV', 'WPT', 'APQ', 'IXF', 'HAQ', 'OVS', 'JTE', 'LOQ', 'PXF', 'MAZ', 'AHV', 'TZO', 'LHO', 'ATL', 'MII', 'LTR', 'KPQ', 'ZXP', 'JPI', 'GLF', 'VKG', 'CAM', 'GVX', 'JUO', 'YWZ', 'NNQ', 'RGV', 'CDS', 'CYA', 'QPX', 'HHG', 'DDF', 'YXE', 'ZKL', 'XDJ', 'HLC', 'ORZ', 'UEX', 'FKH', 'RWT', 'RKN', 'USW', 'UBC', 'QGT', 'MGN', 'WXC', 'ENU', 'RLW', 'OFP', 'XGN', 'PSX', 'JTD', 'LFK', 'PBI', 'BWD', 'JVG', 'HFG', 'WLM', 'XNC', 'HWH', 'FGZ', 'JEK', 'HRL', 'NBL', 'THW', 'WKI', 'IME', 'UIY', 'WAA', 'XQO', 'UUD', 'IRS', 'FBF', 'JZV', 'CCR', 'YLF', 'RXP', 'UIP', 'OGN', 'IID', 'ENW', 'XPL', 'PFE', 'MEX', 'GPH', 'RBW', 'JML', 'ZVR', 'YWL', 'QPJ', 'LYY', 'NKS', 'VIJ', 'SAZ', 'LNC', 'NGU', 'RRD', 'PJK', 'FOH', 'ORW', 'YLQ', 'GFG', 'NOW', 'IDV', 'WHE', 'RTH', 'NVL', 'BAQ', 'HAK', 'SKH', 'LTZ', 'HDF', 'SIB', 'PHY', 'PWZ', 'CWY', 'JNE', 'CXW', 'EPN', 'LAO', 'WEI', 'AGK', 'XJQ', 'ILR', 'CVO', 'MEX', 'BGD', 'AEK', 'DHK', 'KAC', 'DQL', 'WDA', 'GVU', 'RUN', 'XQU', 'EXU', 'WER', 'UBS', 'XOK', 'WML', 'XQM', 'XBW', 'VTT', 'SMF', 'DRX', 'XGZ', 'KXD', 'IVV', 'OIJ', 'KAW', 'SEW', 'URD', 'QAW', 'RFL', 'ZGP', 'VVR', 'ZLA', 'LXV', 'OWU', 'YGF', 'BJO', 'OTZ', 'RSD', 'GTT', 'CEP', 'HVH', 'ZNI', 'BHV', 'IKT', 'GCF', 'XYF', 'FOL', 'NLV', 'NFL', 'TOO', 'GYY', 'POS', 'JGL', 'BUE', 'DYK', 'VVV', 'RMJ', 'LBS', 'WSL', 'FHZ', 'RWB', 'DLC', 'XPL', 'YLW', 'OYK', 'HQN', 'MRA', 'QAJ', 'MIX', 'ICY', 'WZS', 'IJG', 'VYF', 'XON', 'AZB', 'RQC', 'AYK', 'CUV', 'JST', 'BNP', 'UCF', 'DIG', 'ANC', 'XVQ', 'CEC', 'TND', 'SHS', 'YTJ', 'XFX', 'TBI', 'JRE', 'WBD', 'ZVA', 'TSG', 'DYY', 'XUB', 'JDH', 'VSO', 'NMU', 'QWP', 'SKI', 'XMG', 'RVK', 'XVO', 'OAV', 'NYW', 'NRR', 'QRY', 'EBG', 'OYJ', 'ZDN', 'LLU', 'ACT', 'MYP', 'KUK', 'TDO', 'CUB', 'QHL', 'QRO', 'FTD', 'KBL', 'YEY', 'NQD', 'OAH', 'ACU', 'EDM', 'QYP', 'OUO', 'PDK', 'VSP', 'PKW', 'JZF', 'GAL', 'COS', 'RFL', 'DIM', 'MPZ', 'IZX', 'KBU', 'LVK', 'DTP', 'PWC', 'EUQ', 'ESR', 'PIL', 'PTW', 'DNF', 'VLW', 'NBA', 'DFW', 'RDK', 'PYF', 'NIA', 'LLQ', 'WUE', 'SLJ', 'TEF', 'GNC', 'FIC', 'EQD', 'ERL', 'IKZ', 'UKG', 'TNT', 'XCP', 'NRV', 'GVU', 'XFZ', 'VEL', 'GCR', 'XAE', 'GTN', 'VRZ', 'WSY', 'RKD', 'WIA', 'ZPB', 'EWE', 'AVT', 'EZD', 'YCN', 'TJY', 'PCS', 'PXA', 'EAR', 'CIE', 'PPO', 'PFP', 'PFJ', 'SZK', 'IBH', 'LQB', 'EDI', 'ELJ', 'OJS', 'QBC', 'GTV', 'GXH', 'MFG', 'QQO', 'PIK', 'LDF', 'KIX', 'CSV', 'MAP', 'ALA', 'KZH', 'QPA', 'BCG', 'DWQ', 'MUM', 'UJT', 'ZIK', 'XPU', 'CQL', 'DZH', 'ZGR', 'UCU', 'LAT', 'NXO', 'QYM', 'PNV', 'UTV', 'SGK', 'EXJ', 'NTQ', 'LPQ', 'RVT', 'GHZ', 'FSE', 'PGQ', 'WJL', 'JQI', 'IWL', 'SWW', 'DEQ', 'VLF', 'NUD', 'ZNG', 'DCR', 'LCI', 'NZK', 'QAK', 'GHL', 'UCZ', 'ESU', 'JQG', 'NJL', 'PPD', 'QGA', 'GSW', 'YDG', 'QNJ', 'EYF', 'NNZ', 'EAG', 'RFE', 'CBE', 'ENO', 'HDT', 'WFV', 'CFE', 'MGY', 'PAE', 'WUG', 'LPU', 'HZD', 'GFM', 'JHE', 'TPQ', 'DAO', 'KBZ', 'GBA', 'NFH', 'DDS', 'HYA', 'VWS', 'ZLG', 'XKO', 'HFE', 'OJS', 'ZNK', 'OAT', 'YFE', 'NYJ', 'RDP', 'NTN', 'BEW', 'IGK', 'AYV', 'QXZ', 'NJB', 'QYE', 'GGE', 'DVI', 'UFG', 'AWY', 'JAN', 'GPW', 'GYE', 'BKS', 'REI', 'XYZ', 'VTY', 'NCD', 'EMH', 'YZE', 'LKN', 'JFF', 'IHZ', 'KUE', 'VNJ', 'SAW', 'NWS', 'HTH', 'ZXC', 'IAW', 'EPV', 'ONR', 'NFN', 'KMQ', 'CCE', 'ASU', 'SYF', 'PIQ', 'EHB', 'IWX', 'TAV', 'PJV', 'KET', 'BCR', 'UTS', 'OCI', 'PBE', 'XDJ', 'XSN', 'CUS', 'XBF', 'ZQF', 'RTW', 'CJI', 'XPI', 'KGD', 'ZNS', 'JCM', 'SRD', 'ADD', 'NJY', 'TQU', 'RNK', 'IQR', 'FYF', 'VDQ', 'IUO', 'SXI', 'DRM', 'XSX', 'FBH', 'YQE', 'BTM', 'GZJ', 'JJR', 'ONH', 'NLJ', 'XVR', 'XCP', 'VLW', 'ISS', 'FDK', 'FAS', 'HDE', 'ETY', 'KIA', 'BJX', 'ZZM', 'EIB', 'HWD', 'HDY', 'QGB', 'BQH', 'PFT', 'MBI', 'NND', 'DRP', 'IWC', 'TFF', 'PDU', 'YTB', 'WHR', 'QNY', 'IUB', 'QZK', 'NXL', 'JOB', 'FEF', 'DZC', 'DAL', 'IJK', 'HBO', 'ZRR', 'JJH', 'MXI', 'YSP', 'BRV', 'JRA', 'JQE', 'XWQ', 'GVY', 'CEN', 'NYY', 'JCW', 'BIN', 'QGA', 'SCX', 'LZV', 'SPA', 'CRQ', 'RUJ', 'PYJ', 'BCG', 'QFR', 'QED', 'RLR', 'JXV', 'NIQ', 'WHL', 'UQJ', 'EPN', 'HEF', 'IUR', 'MCH', 'THC', 'WTN', 'OCP', 'DSM', 'LXW', 'ZQJ', 'FMU', 'VNW', 'IXM', 'BYF', 'NXY', 'CJO', 'IIY', 'CGW', 'PNE', 'WFH', 'SHG', 'SBO', 'XFA', 'KLO', 'YMJ', 'INZ', 'PMK', 'RYE', 'KHB', 'YXB', 'TZK', 'LES', 'ZZN', 'FXH', 'EMP', 'PDI', 'JIS', 'GQW', 'SMX', 'UCU', 'IFF', 'VZI', 'DPN', 'LIK', 'CJO', 'DOC', 'BJP', 'NUB', 'GPH', 'GRQ', 'SOU', 'TZH', 'WUN', 'PDC', 'EWB', 'YMX', 'OEF', 'MEB', 'QBU', 'JUQ', 'HEQ', 'UJF', 'QDF', 'MMK', 'ZVU', 'JRP', 'JOS', 'TCC', 'TIO', 'RPM', 'GVB', 'GOH', 'CUV', 'DUW', 'EAK', 'CII', 'PGT', 'CHN', 'HMM', 'RLO', 'ARC', 'EFW', 'HVX', 'HJV', 'OHY', 'GPG', 'MQO', 'GBU', 'YPD', 'FNW', 'MDP', 'KXQ', 'PSB', 'NVZ', 'BYC', 'IUC', 'URT', 'BVP', 'VZP', 'UTL', 'BXW', 'FKT', 'PGM', 'DGD', 'AIV', 'TMY', 'RUN', 'QYG', 'GXF', 'VPF', 'UNY', 'MOZ', 'INN', 'VEV', 'PWC', 'AWY', 'MKI', 'TXG', 'BQU', 'QAU', 'ILO', 'IBH', 'PCO', 'RDH', 'UNP', 'LLB', 'DER', 'YRP', 'MWZ', 'NIH', 'MCS', 'ZCL', 'IOI', 'UPU', 'MNS', 'JDR', 'OWF', 'XTA', 'OAZ', 'WCV', 'FFI', 'NLI', 'BFD', 'LDD', 'FZR', 'HNP', 'IRL', 'WEA', 'PDE', 'IEN', 'GGR', 'YUP', 'VWA', 'WEM', 'QPZ', 'ZBA', 'GLU', 'CUH', 'VDK', 'KLF', 'OLF', 'PMD', 'FLZ', 'JQV', 'SGP', 'JZZ', 'HIO', 'LFV', 'PTG', 'FEL', 'WNX', 'LDU', 'EXI', 'JMT', 'RID', 'TXZ', 'PGC', 'GLC', 'JLI', 'CLT', 'VDK', 'FBI', 'WSW', 'ELJ', 'YJY', 'YXU', 'XWC', 'MII', 'YXM', 'HCJ', 'JVC', 'RPF', 'NXE', 'UFO', 'BYH', 'EFA', 'EGO', 'XVS', 'VWG', 'LOY', 'LCG', 'TRQ', 'IKL', 'OQA', 'HTU', 'XNU', 'AZS', 'BOR', 'XWR', 'UQN', 'YFH', 'TDS', 'RLP', 'PHC', 'AYP', 'BVL', 'CQI', 'HSC', 'JRS', 'YZU', 'YFY', 'WEI', 'ITW', 'MYU', 'ORF', 'OTD', 'CAO', 'UJN', 'UFW', 'UUP', 'IQG', 'SEG', 'BAQ', 'KJD', 'DNG', 'BZL', 'DVT', 'KJY', 'XLW', 'TMH', 'DCX', 'MVJ', 'JFU', 'VCL', 'FQX', 'WRS', 'OXS', 'QGT', 'UPJ', 'QTI', 'AOU', 'CHR', 'AMC', 'VCN', 'OUC', 'JDK', 'CNL', 'HVI', 'WTS', 'VPC', 'THK', 'SVV', 'IGZ', 'ZPC', 'OBU', 'EQP', 'UMD', 'BQX', 'CKN', 'FOW', 'RGD', 'LNP', 'YEG', 'GVT', 'BSV', 'KKI', 'JEZ', 'GQH', 'DHB', 'TFV', 'TFS', 'WVS', 'ZFS', 'ZPG', 'PLN', 'OBM', 'BRE', 'HXC', 'JBF', 'GKA', 'RKS', 'PUS', 'XGS', 'QYD', 'IOK', 'DZR', 'IRX', 'NIJ', 'EAJ', 'SCY', 'KXB', 'VII', 'ETT', 'UPQ', 'JPW', 'ZTS', 'CZC', 'DFE', 'JLR', 'ZAC', 'XTQ', 'JZY', 'MUW', 'EXR', 'OQC', 'QLF', 'VAL', 'CBQ', 'SQO', 'HXA', 'SCI', 'ZAM', 'EDK', 'HVB', 'LSH', 'EOR', 'KZF', 'TLA', 'JIK', 'ULN', 'CJY', 'YKP', 'RQQ', 'XQJ', 'EFK', 'WEA', 'VHL', 'ANA', 'VYI', 'GTV', 'FRN', 'BXI', 'QYM', 'WUJ', 'FHW', 'RAH', 'RCK', 'RXY', 'KXC', 'IFA', 'OCZ', 'PTB', 'IHO', 'SDL', 'YEP', 'RFX', 'ZUR', 'FKV', 'WFA', 'VAF', 'ZHK', 'KZO', 'AAN', 'IME', 'MIF', 'VCG', 'BYQ', 'QOY', 'LSG', 'IRT', 'PUI', 'UAB', 'MPY', 'CKS', 'PZL', 'EUW', 'JIO', 'WXL', 'JEV', 'SBT', 'WUQ', 'GBH', 'QEG', 'ZCJ', 'OKQ', 'AAX', 'LJN', 'OYH', 'EIJ', 'ZNK', 'JIA', 'TDN', 'DPU', 'BTR', 'SEP', 'VKZ', 'HEX', 'WFB', 'DKR', 'FQH', 'CTQ', 'NPX', 'DHG', 'ZSN', 'ZYF', 'MLP', 'IUH', 'ZIX', 'UYI', 'SRK', 'GEG', 'SCW', 'TED', 'XOP', 'PML', 'RNK', 'KTA', 'KJJ', 'UXS', 'MRX', 'FJH', 'NRA', 'ZJJ', 'WGU', 'NPD', 'GPA', 'UBR', 'GXI', 'YQP', 'SEI', 'MOZ', 'UIR', 'SIH', 'EAP', 'IXV', 'EKD', 'YVX', 'PPZ', 'MBK', 'NTQ', 'BSZ', 'BVD', 'LMV', 'MDB', 'BOK', 'XLL', 'QJJ', 'CTH', 'BLQ', 'ZOR', 'RVD', 'MNW', 'OCC', 'FCN', 'MAK', 'OMZ', 'PLJ', 'QMP', 'PTZ', 'AXB', 'YJG', 'JZX', 'HUH', 'FOL', 'BUV', 'BEI', 'ZYN', 'JHS', 'JND', 'TIB', 'JMM', 'UTZ', 'GEZ', 'LTQ', 'IBJ', 'WOY', 'IGT', 'ZUV', 'MWP', 'GSJ', 'FET', 'LXM', 'ZBE', 'VTI', 'WLW', 'PYT', 'DJQ', 'NFU', 'BKX', 'MDD', 'YPX', 'SBG', 'TKI', 'QRU', 'IKG', 'SRQ', 'AOB', 'KHN', 'IZN', 'NQU', 'NQC', 'HVS', 'JCP', 'HUL', 'MXN', 'DOW', 'HXR', 'GZT', 'GNL', 'INF', 'AOU', 'RXX', 'UEP', 'OXY', 'VWA', 'GLH', 'WPM', 'NVR', 'HIP', 'RIM', 'JJJ', 'JDN', 'RBB', 'BDI', 'XVJ', 'ERO', 'RXJ', 'ZMA', 'TVU', 'HPE', 'VAU', 'GVU', 'ZGK', 'KCK', 'DHB', 'RNZ', 'HDO', 'CZF', 'UTI', 'SAQ', 'SWA', 'VXK', 'FEH', 'RFJ', 'ZKQ', 'DOJ', 'DKK', 'SDL', 'FSX', 'ZJF', 'KTA', 'NLG', 'PHJ', 'WOH', 'AXU', 'HSI', 'SZW') AS in_list FROM strings ORDER BY s;

SELECT s, NOT s IN ('QOY', 'AAZ', 'AOR', 'VJR', 'ROL', 'KOS', 'JBC', 'EMZ', 'LQT', 'HYX', 'IYA', 'YAA', 'XMR', 'HGJ', 'LDR', 'MVT', 'XEQ', 'NPX', 'ZKV', 'HET', 'GZI', 'PLI', 'ABK', 'LOJ', 'KYB', 'UKG', 'PNY', 'SBV', 'VSJ', 'FAR', 'AXH', 'XWO', 'NKA', 'CPE', 'GSC', 'TWK', 'SXK', 'SUU', 'KPX', 'NXU', 'ZMR', 'BZG', 'CBO', 'SQA', 'VNE', 'NUT', 'LKF', 'IWL', 'CQE', 'UED', 'BHQ', 'RQR', 'FVG', 'EZZ', 'SRJ', 'UPA', 'JUV', 'AXP', 'JGL', 'HKC', 'CYM', 'AAK', 'WUM', 'NWK', 'DCQ', 'YXT', 'DQZ', 'WXB', 'YVG', 'YXL', 'FWG', 'PLN', 'YPK', 'UPA', 'GIC', 'IPS', 'WQB', 'NSR', 'WRT', 'WOP', 'JAX', 'XWZ', 'TIM', 'EAO', 'ANC', 'NAT', 'KFL', 'XJA', 'HUG', 'SVP', 'HVX', 'APA', 'RJI', 'QKP', 'MZB', 'MME', 'GJW', 'TBX', 'TRT', 'IRL', 'BUR', 'OWP', 'DAK', 'IGZ', 'OJL', 'BON', 'KLG', 'SSI', 'UOD', 'SCW', 'LGT', 'KTL', 'DPA', 'WTC', 'NSW', 'TEQ', 'HNU', 'GEI', 'OFK', 'UQB', 'QWI', 'ACS', 'MMR', 'EHZ', 'PXR', 'SPK', 'POO', 'CMF', 'UEE', 'QUK', 'BZR', 'ZBH', 'KJV', 'RIV', 'HOX', 'GZU', 'PQO', 'NLU', 'BRV', 'XND', 'APA', 'QXV', 'QEW', 'AJR', 'OYC', 'YTA', 'FMS', 'GSK', 'MCC', 'QVQ', 'FYD', 'QQJ', 'VBM', 'EYV', 'ELQ', 'KHI', 'HTU', 'KDQ', 'YRI', 'CEB', 'WGP', 'HIY', 'XSM', 'FTD', 'EHU', 'KFE', 'FCN', 'YRC', 'WFC', 'YRC', 'PZH', 'ZAG', 'AAM', 'UBM', 'JIH', 'CRQ', 'BOE', 'KLI', 'SAB', 'TYY', 'AGX', 'FEH', 'ZPX', 'PRU', 'GXA', 'HDC', 'UJG', 'OCO', 'BLZ', 'ZFH', 'LRN', 'GYF', 'FBR', 'OVH', 'XTL', 'FQZ', 'MKP', 'UKA', 'RMN', 'IWX', 'RYF', 'WTB', 'KWU', 'MKN', 'JFM', 'VUU', 'UTU', 'CLW', 'HKQ', 'SJA', 'ADT', 'RTN', 'ZPJ', 'NUX', 'HMY', 'RDA', 'YQQ', 'COL', 'JRB', 'PYV', 'YAU', 'AYM', 'STV', 'BDC', 'PIZ', 'CAK', 'VWS', 'GNU', 'SZA', 'PMP', 'WOV', 'LPL', 'PJY', 'FWV', 'CLH', 'IVC', 'YHN', 'QWB', 'SCE', 'PFN', 'WDI', 'PIN', 'QSN', 'WDE', 'JOZ', 'DPZ', 'WFX', 'IQS', 'TBZ', 'FXQ', 'PLM', 'WQH', 'BEJ', 'KFM', 'KLH', 'ZVT', 'MBV', 'JQT', 'RIR', 'FDB', 'AOV', 'GZV', 'CTN', 'YCY', 'XSB', 'UUI', 'EWM', 'MQR', 'SKE', 'ACO', 'AGP', 'RWD', 'XGR', 'PCO', 'OSY', 'QHG', 'YEW', 'DHQ', 'FNH', 'QWX', 'RSL', 'GKL', 'VEP', 'SME', 'TKH', 'JOQ', 'XZY', 'ZBF', 'UJP', 'UKD', 'QIZ', 'VQF', 'QUW', 'XGX', 'TPG', 'LYD', 'WBX', 'GRI', 'YDC', 'PJU', 'EFU', 'MZV', 'GBN', 'EJE', 'JYH', 'XTC', 'ZNI', 'JJE', 'XJD', 'SJU', 'SNP', 'ZLL', 'ZRL', 'CUC', 'EOQ', 'IZU', 'MZH', 'UMQ', 'ULS', 'ETH', 'AUT', 'NPL', 'IYB', 'OXQ', 'CXH', 'QRI', 'RHM', 'PNO', 'QGF', 'THK', 'KYU', 'OIE', 'OGO', 'UDS', 'OIS', 'DXJ', 'ETV', 'UWI', 'VLX', 'SOG', 'KNW', 'FOR', 'CCT', 'PHH', 'YNI', 'BOW', 'AJR', 'LJE', 'PUB', 'NPF', 'ELB', 'SIE', 'NAC', 'IZD', 'BQE', 'SUH', 'YQE', 'AVC', 'CIV', 'SOK', 'VRB', 'YUG', 'JFO', 'FCB', 'LEY', 'IPX', 'PEZ', 'BFV', 'BCV', 'RWZ', 'BHX', 'OJV', 'QPZ', 'QQX', 'ECG', 'MCD', 'UEI', 'IAE', 'VKD', 'QUJ', 'WYL', 'UOI', 'XDP', 'JTW', 'LFJ', 'AHH', 'XRL', 'QQM', 'AGA', 'RLE', 'MFI', 'UYI', 'HEM', 'KKJ', 'VLN', 'PYN', 'ZZA', 'WGI', 'PTH', 'BMR', 'MZK', 'IPY', 'SLA', 'JOS', 'ZLT', 'ZDF', 'XWY', 'OHJ', 'RPL', 'BPE', 'NVZ', 'YIF', 'HWM', 'BGM', 'VUO', 'YIW', 'UBS', 'EAW', 'AYN', 'UCE', 'UIB', 'DNV', 'YAQ', 'TBE', 'GMT', 'EOW', 'RWL', 'TYU', 'UTX', 'SRJ', 'FZZ', 'RJU', 'QJB', 'MFY', 'PID', 'RWM', 'PWH', 'PJS', 'BNK', 'IUO', 'POW', 'MBL', 'XMH', 'YWN', 'FTC', 'XME', 'MUS', 'XYD', 'BVI', 'FGU', 'BCJ', 'KRH', 'XPM', 'HDV', 'SQS', 'PFE', 'SIU', 'PZL', 'APT', 'CZK', 'HHL', 'EVI', 'GOE', 'RWG', 'PZF', 'DPS', 'GXN', 'WVC', 'ZDE', 'BDQ', 'WYP', 'PLB', 'SZZ', 'HPM', 'BUL', 'VRY', 'ZNG', 'XUS', 'SLU', 'SLQ', 'UOH', 'YHR', 'FGE', 'RJY', 'CMO', 'NGZ', 'PCG', 'PFN', 'EPG', 'ILE', 'RXF', 'NLD', 'PYW', 'WTG', 'HKL', 'IGB', 'YNF', 'TAL', 'MBR', 'YEK', 'VKO', 'ZGO', 'UKH', 'GJN', 'QCD', 'OQD', 'HEU', 'GWT', 'THS', 'LAS', 'JLU', 'TNV', 'UQB', 'YDO', 'ZFI', 'XBV', 'VYI', 'GAC', 'GDU', 'DLL', 'JXX', 'GUP', 'FUF', 'KQI', 'TLC', 'DAQ', 'OMN', 'FYT', 'GIZ', 'NON', 'UGU', 'CSI', 'NEO', 'SVA', 'ZBM', 'GGU', 'PFF', 'QFB', 'JZH', 'OBB', 'VHM', 'PAJ', 'BKD', 'JEI', 'ZQG', 'GBX', 'UCR', 'TXS', 'PAK', 'HYP', 'CAI', 'WJY', 'VLH', 'QLY', 'XKI', 'SDS', 'QEF', 'KKF', 'XBQ', 'FTE', 'CEX', 'PJM', 'RTA', 'TXQ', 'BSK', 'OXU', 'ELZ', 'WII', 'THG', 'RDY', 'LFS', 'JNY', 'ORJ', 'FXD', 'OTG', 'BUG', 'EDF', 'DDM', 'HTZ', 'IAA', 'RWR', 'XBL', 'PXV', 'FVH', 'OSB', 'UQW', 'CUP', 'OIF', 'VQZ', 'KCT', 'VWJ', 'IRP', 'UAZ', 'CCF', 'MCY', 'GGP', 'HDT', 'SZT', 'JSR', 'HDR', 'MQR', 'OCP', 'XQD', 'QYT', 'NSA', 'LPC', 'MGS', 'DAZ', 'SDQ', 'BMS', 'EJL', 'ADY', 'JFP', 'YQD', 'CIP', 'CST', 'ATU', 'JTD', 'HDI', 'JMF', 'LJO', 'SEC', 'ZCN', 'EMG', 'RLJ', 'AMV', 'BVT', 'IZV', 'DND', 'VCJ', 'HNY', 'DSI', 'DWM', 'EDI', 'LQO', 'NDN', 'GGA', 'EXH', 'XFP', 'NLU', 'DNC', 'OTA', 'KQD', 'JRJ', 'JXV', 'UAK', 'TNB', 'ZXJ', 'YTU', 'MMS', 'NCV', 'VIR', 'EUI', 'KND', 'PTL', 'LKF', 'FUT', 'VUX', 'PWI', 'ETZ', 'IHN', 'GYS', 'KAQ', 'UYN', 'HOQ', 'END', 'WHD', 'NMT', 'HEW', 'OBN', 'RDZ', 'SKP', 'LHN', 'HQS', 'YTY', 'GXW', 'EKC', 'BCD', 'BRQ', 'CSX', 'OCI', 'OZP', 'TBN', 'HHG', 'VFZ', 'WJY', 'VBT', 'LNT', 'YDL', 'KOC', 'IJF', 'HSB', 'USO', 'HOK', 'MEK', 'WXT', 'DRT', 'SNE', 'WAI', 'EMP', 'IGC', 'QPJ', 'GCF', 'CJW', 'ONH', 'XQO', 'KFY', 'CZQ', 'AUC', 'BQD', 'KBH', 'GFS', 'BVT', 'QLX', 'TYO', 'WWE', 'TXE', 'MQM', 'WNC', 'WKC', 'ZLW', 'RDJ', 'WCZ', 'UOV', 'IBT', 'HOQ', 'VIA', 'DPE', 'AJX', 'AYA', 'DEM', 'YDD', 'SOU', 'KZU', 'ATH', 'BPS', 'GTM', 'ALW', 'ODR', 'DBZ', 'KYG', 'CES', 'NWC', 'QER', 'FFA', 'UZS', 'GPL', 'MTD', 'TPI', 'GMR', 'WXV', 'YYY', 'FAX', 'MNL', 'JUS', 'SVJ', 'ZNX', 'QDQ', 'FIH', 'EXR', 'XSM', 'OQX', 'GUW', 'KEG', 'DHJ', 'GXH', 'ROZ', 'TCT', 'UNU', 'XGS', 'ODG', 'GZH', 'TZV', 'LFP', 'CDF', 'LJZ', 'RLL', 'QBY', 'CEQ', 'JWH', 'GYJ', 'LSJ', 'CQV', 'HJT', 'PVB', 'DLH', 'BFI', 'RIV', 'UCG', 'KOG', 'TXS', 'JDF', 'DKD', 'FOE', 'UIO', 'GDY', 'OIG', 'FWH', 'YSY', 'HGV', 'GIS', 'CMB', 'SDT', 'ROH', 'NMU', 'YHA', 'WDJ', 'VDV', 'LDE', 'PUR', 'UNS', 'NDY', 'YCZ', 'SAQ', 'OJW', 'OIP', 'IWC', 'WPT', 'PJI', 'PMP', 'CEB', 'WRZ', 'LSI', 'QUA', 'HMA', 'VWZ', 'KWX', 'RTA', 'IXL', 'XZH', 'UOT', 'IWF', 'LXN', 'VXY', 'DMU', 'EKC', 'JRF', 'EMA', 'LNG', 'JWT', 'NLH', 'EPH', 'FFJ', 'RTR', 'XJE', 'OAW', 'HSP', 'AFE', 'EPI', 'RSV', 'OIZ', 'BEC', 'ILJ', 'UPU', 'JZC', 'HGP', 'HLT', 'GSY', 'XGP', 'NYL', 'VHY', 'CQN', 'WEE', 'GFJ', 'LGE', 'IBM', 'NCI', 'OPR', 'TIO', 'DPL', 'TFD', 'XKJ', 'DWM', 'DPV', 'RIE', 'UKK', 'OBM', 'NLJ', 'VUM', 'IRE', 'DNR', 'KVP', 'PZX', 'FBD', 'GDI', 'YAW', 'MKG', 'EAX', 'CBM', 'TCH', 'LGX', 'UCY', 'EWE', 'ZUN', 'DPM', 'BUH', 'NQJ', 'RFX', 'XUI', 'BHB', 'BMM', 'MGZ', 'PTR', 'RUM', 'FVC', 'BRO', 'ZVP', 'YMV', 'PNX', 'WRO', 'KKR', 'WCE', 'UFT', 'QWG', 'UNY', 'IZE', 'ZFX', 'KBC', 'DPS', 'QYY', 'ZNO', 'DHR', 'GWP', 'UTY', 'CSO', 'SQH', 'TBU', 'CYF', 'ROH', 'GYF', 'BWT', 'RKM', 'WLV', 'FSB', 'EWV', 'DHJ', 'RPB', 'NVJ', 'LUF', 'TTV', 'WPT', 'APQ', 'IXF', 'HAQ', 'OVS', 'JTE', 'LOQ', 'PXF', 'MAZ', 'AHV', 'TZO', 'LHO', 'ATL', 'MII', 'LTR', 'KPQ', 'ZXP', 'JPI', 'GLF', 'VKG', 'CAM', 'GVX', 'JUO', 'YWZ', 'NNQ', 'RGV', 'CDS', 'CYA', 'QPX', 'HHG', 'DDF', 'YXE', 'ZKL', 'XDJ', 'HLC', 'ORZ', 'UEX', 'FKH', 'RWT', 'RKN', 'USW', 'UBC', 'QGT', 'MGN', 'WXC', 'ENU', 'RLW', 'OFP', 'XGN', 'PSX', 'JTD', 'LFK', 'PBI', 'BWD', 'JVG', 'HFG', 'WLM', 'XNC', 'HWH', 'FGZ', 'JEK', 'HRL', 'NBL', 'THW', 'WKI', 'IME', 'UIY', 'WAA', 'XQO', 'UUD', 'IRS', 'FBF', 'JZV', 'CCR', 'YLF', 'RXP', 'UIP', 'OGN', 'IID', 'ENW', 'XPL', 'PFE', 'MEX', 'GPH', 'RBW', 'JML', 'ZVR', 'YWL', 'QPJ', 'LYY', 'NKS', 'VIJ', 'SAZ', 'LNC', 'NGU', 'RRD', 'PJK', 'FOH', 'ORW', 'YLQ', 'GFG', 'NOW', 'IDV', 'WHE', 'RTH', 'NVL', 'BAQ', 'HAK', 'SKH', 'LTZ', 'HDF', 'SIB', 'PHY', 'PWZ', 'CWY', 'JNE', 'CXW', 'EPN', 'LAO', 'WEI', 'AGK', 'XJQ', 'ILR', 'CVO', 'MEX', 'BGD', 'AEK', 'DHK', 'KAC', 'DQL', 'WDA', 'GVU', 'RUN', 'XQU', 'EXU', 'WER', 'UBS', 'XOK', 'WML', 'XQM', 'XBW', 'VTT', 'SMF', 'DRX', 'XGZ', 'KXD', 'IVV', 'OIJ', 'KAW', 'SEW', 'URD', 'QAW', 'RFL', 'ZGP', 'VVR', 'ZLA', 'LXV', 'OWU', 'YGF', 'BJO', 'OTZ', 'RSD', 'GTT', 'CEP', 'HVH', 'ZNI', 'BHV', 'IKT', 'GCF', 'XYF', 'FOL', 'NLV', 'NFL', 'TOO', 'GYY', 'POS', 'JGL', 'BUE', 'DYK', 'VVV', 'RMJ', 'LBS', 'WSL', 'FHZ', 'RWB', 'DLC', 'XPL', 'YLW', 'OYK', 'HQN', 'MRA', 'QAJ', 'MIX', 'ICY', 'WZS', 'IJG', 'VYF', 'XON', 'AZB', 'RQC', 'AYK', 'CUV', 'JST', 'BNP', 'UCF', 'DIG', 'ANC', 'XVQ', 'CEC', 'TND', 'SHS', 'YTJ', 'XFX', 'TBI', 'JRE', 'WBD', 'ZVA', 'TSG', 'DYY', 'XUB', 'JDH', 'VSO', 'NMU', 'QWP', 'SKI', 'XMG', 'RVK', 'XVO', 'OAV', 'NYW', 'NRR', 'QRY', 'EBG', 'OYJ', 'ZDN', 'LLU', 'ACT', 'MYP', 'KUK', 'TDO', 'CUB', 'QHL', 'QRO', 'FTD', 'KBL', 'YEY', 'NQD', 'OAH', 'ACU', 'EDM', 'QYP', 'OUO', 'PDK', 'VSP', 'PKW', 'JZF', 'GAL', 'COS', 'RFL', 'DIM', 'MPZ', 'IZX', 'KBU', 'LVK', 'DTP', 'PWC', 'EUQ', 'ESR', 'PIL', 'PTW', 'DNF', 'VLW', 'NBA', 'DFW', 'RDK', 'PYF', 'NIA', 'LLQ', 'WUE', 'SLJ', 'TEF', 'GNC', 'FIC', 'EQD', 'ERL', 'IKZ', 'UKG', 'TNT', 'XCP', 'NRV', 'GVU', 'XFZ', 'VEL', 'GCR', 'XAE', 'GTN', 'VRZ', 'WSY', 'RKD', 'WIA', 'ZPB', 'EWE', 'AVT', 'EZD', 'YCN', 'TJY', 'PCS', 'PXA', 'EAR', 'CIE', 'PPO', 'PFP', 'PFJ', 'SZK', 'IBH', 'LQB', 'EDI', 'ELJ', 'OJS', 'QBC', 'GTV', 'GXH', 'MFG', 'QQO', 'PIK', 'LDF', 'KIX', 'CSV', 'MAP', 'ALA', 'KZH', 'QPA', 'BCG', 'DWQ', 'MUM', 'UJT', 'ZIK', 'XPU', 'CQL', 'DZH', 'ZGR', 'UCU', 'LAT', 'NXO', 'QYM', 'PNV', 'UTV', 'SGK', 'EXJ', 'NTQ', 'LPQ', 'RVT', 'GHZ', 'FSE', 'PGQ', 'WJL', 'JQI', 'IWL', 'SWW', 'DEQ', 'VLF', 'NUD', 'ZNG', 'DCR', 'LCI', 'NZK', 'QAK', 'GHL', 'UCZ', 'ESU', 'JQG', 'NJL', 'PPD', 'QGA', 'GSW', 'YDG', 'QNJ', 'EYF', 'NNZ', 'EAG', 'RFE', 'CBE', 'ENO', 'HDT', 'WFV', 'CFE', 'MGY', 'PAE', 'WUG', 'LPU', 'HZD', 'GFM', 'JHE', 'TPQ', 'DAO', 'KBZ', 'GBA', 'NFH', 'DDS', 'HYA', 'VWS', 'ZLG', 'XKO', 'HFE', 'OJS', 'ZNK', 'OAT', 'YFE', 'NYJ', 'RDP', 'NTN', 'BEW', 'IGK', 'AYV', 'QXZ', 'NJB', 'QYE', 'GGE', 'DVI', 'UFG', 'AWY', 'JAN', 'GPW', 'GYE', 'BKS', 'REI', 'XYZ', 'VTY', 'NCD', 'EMH', 'YZE', 'LKN', 'JFF', 'IHZ', 'KUE', 'VNJ', 'SAW', 'NWS', 'HTH', 'ZXC', 'IAW', 'EPV', 'ONR', 'NFN', 'KMQ', 'CCE', 'ASU', 'SYF', 'PIQ', 'EHB', 'IWX', 'TAV', 'PJV', 'KET', 'BCR', 'UTS', 'OCI', 'PBE', 'XDJ', 'XSN', 'CUS', 'XBF', 'ZQF', 'RTW', 'CJI', 'XPI', 'KGD', 'ZNS', 'JCM', 'SRD', 'ADD', 'NJY', 'TQU', 'RNK', 'IQR', 'FYF', 'VDQ', 'IUO', 'SXI', 'DRM', 'XSX', 'FBH', 'YQE', 'BTM', 'GZJ', 'JJR', 'ONH', 'NLJ', 'XVR', 'XCP', 'VLW', 'ISS', 'FDK', 'FAS', 'HDE', 'ETY', 'KIA', 'BJX', 'ZZM', 'EIB', 'HWD', 'HDY', 'QGB', 'BQH', 'PFT', 'MBI', 'NND', 'DRP', 'IWC', 'TFF', 'PDU', 'YTB', 'WHR', 'QNY', 'IUB', 'QZK', 'NXL', 'JOB', 'FEF', 'DZC', 'DAL', 'IJK', 'HBO', 'ZRR', 'JJH', 'MXI', 'YSP', 'BRV', 'JRA', 'JQE', 'XWQ', 'GVY', 'CEN', 'NYY', 'JCW', 'BIN', 'QGA', 'SCX', 'LZV', 'SPA', 'CRQ', 'RUJ', 'PYJ', 'BCG', 'QFR', 'QED', 'RLR', 'JXV', 'NIQ', 'WHL', 'UQJ', 'EPN', 'HEF', 'IUR', 'MCH', 'THC', 'WTN', 'OCP', 'DSM', 'LXW', 'ZQJ', 'FMU', 'VNW', 'IXM', 'BYF', 'NXY', 'CJO', 'IIY', 'CGW', 'PNE', 'WFH', 'SHG', 'SBO', 'XFA', 'KLO', 'YMJ', 'INZ', 'PMK', 'RYE', 'KHB', 'YXB', 'TZK', 'LES', 'ZZN', 'FXH', 'EMP', 'PDI', 'JIS', 'GQW', 'SMX', 'UCU', 'IFF', 'VZI', 'DPN', 'LIK', 'CJO', 'DOC', 'BJP', 'NUB', 'GPH', 'GRQ', 'SOU', 'TZH', 'WUN', 'PDC', 'EWB', 'YMX', 'OEF', 'MEB', 'QBU', 'JUQ', 'HEQ', 'UJF', 'QDF', 'MMK', 'ZVU', 'JRP', 'JOS', 'TCC', 'TIO', 'RPM', 'GVB', 'GOH', 'CUV', 'DUW', 'EAK', 'CII', 'PGT', 'CHN', 'HMM', 'RLO', 'ARC', 'EFW', 'HVX', 'HJV', 'OHY', 'GPG', 'MQO', 'GBU', 'YPD', 'FNW', 'MDP', 'KXQ', 'PSB', 'NVZ', 'BYC', 'IUC', 'URT', 'BVP', 'VZP', 'UTL', 'BXW', 'FKT', 'PGM', 'DGD', 'AIV', 'TMY', 'RUN', 'QYG', 'GXF', 'VPF', 'UNY', 'MOZ', 'INN', 'VEV', 'PWC', 'AWY', 'MKI', 'TXG', 'BQU', 'QAU', 'ILO', 'IBH', 'PCO', 'RDH', 'UNP', 'LLB', 'DER', 'YRP', 'MWZ', 'NIH', 'MCS', 'ZCL', 'IOI', 'UPU', 'MNS', 'JDR', 'OWF', 'XTA', 'OAZ', 'WCV', 'FFI', 'NLI', 'BFD', 'LDD', 'FZR', 'HNP', 'IRL', 'WEA', 'PDE', 'IEN', 'GGR', 'YUP', 'VWA', 'WEM', 'QPZ', 'ZBA', 'GLU', 'CUH', 'VDK', 'KLF', 'OLF', 'PMD', 'FLZ', 'JQV', 'SGP', 'JZZ', 'HIO', 'LFV', 'PTG', 'FEL', 'WNX', 'LDU', 'EXI', 'JMT', 'RID', 'TXZ', 'PGC', 'GLC', 'JLI', 'CLT', 'VDK', 'FBI', 'WSW', 'ELJ', 'YJY', 'YXU', 'XWC', 'MII', 'YXM', 'HCJ', 'JVC', 'RPF', 'NXE', 'UFO', 'BYH', 'EFA', 'EGO', 'XVS', 'VWG', 'LOY', 'LCG', 'TRQ', 'IKL', 'OQA', 'HTU', 'XNU', 'AZS', 'BOR', 'XWR', 'UQN', 'YFH', 'TDS', 'RLP', 'PHC', 'AYP', 'BVL', 'CQI', 'HSC', 'JRS', 'YZU', 'YFY', 'WEI', 'ITW', 'MYU', 'ORF', 'OTD', 'CAO', 'UJN', 'UFW', 'UUP', 'IQG', 'SEG', 'BAQ', 'KJD', 'DNG', 'BZL', 'DVT', 'KJY', 'XLW', 'TMH', 'DCX', 'MVJ', 'JFU', 'VCL', 'FQX', 'WRS', 'OXS', 'QGT', 'UPJ', 'QTI', 'AOU', 'CHR', 'AMC', 'VCN', 'OUC', 'JDK', 'CNL', 'HVI', 'WTS', 'VPC', 'THK', 'SVV', 'IGZ', 'ZPC', 'OBU', 'EQP', 'UMD', 'BQX', 'CKN', 'FOW', 'RGD', 'LNP', 'YEG', 'GVT', 'BSV', 'KKI', 'JEZ', 'GQH', 'DHB', 'TFV', 'TFS', 'WVS', 'ZFS', 'ZPG', 'PLN', 'OBM', 'BRE', 'HXC', 'JBF', 'GKA', 'RKS', 'PUS', 'XGS', 'QYD', 'IOK', 'DZR', 'IRX', 'NIJ', 'EAJ', 'SCY', 'KXB', 'VII', 'ETT', 'UPQ', 'JPW', 'ZTS', 'CZC', 'DFE', 'JLR', 'ZAC', 'XTQ', 'JZY', 'MUW', 'EXR', 'OQC', 'QLF', 'VAL', 'CBQ', 'SQO', 'HXA', 'SCI', 'ZAM', 'EDK', 'HVB', 'LSH', 'EOR', 'KZF', 'TLA', 'JIK', 'ULN', 'CJY', 'YKP', 'RQQ', 'XQJ', 'EFK', 'WEA', 'VHL', 'ANA', 'VYI', 'GTV', 'FRN', 'BXI', 'QYM', 'WUJ', 'FHW', 'RAH', 'RCK', 'RXY', 'KXC', 'IFA', 'OCZ', 'PTB', 'IHO', 'SDL', 'YEP', 'RFX', 'ZUR', 'FKV', 'WFA', 'VAF', 'ZHK', 'KZO', 'AAN', 'IME', 'MIF', 'VCG', 'BYQ', 'QOY', 'LSG', 'IRT', 'PUI', 'UAB', 'MPY', 'CKS', 'PZL', 'EUW', 'JIO', 'WXL', 'JEV', 'SBT', 'WUQ', 'GBH', 'QEG', 'ZCJ', 'OKQ', 'AAX', 'LJN', 'OYH', 'EIJ', 'ZNK', 'JIA', 'TDN', 'DPU', 'BTR', 'SEP', 'VKZ', 'HEX', 'WFB', 'DKR', 'FQH', 'CTQ', 'NPX', 'DHG', 'ZSN', 'ZYF', 'MLP', 'IUH', 'ZIX', 'UYI', 'SRK', 'GEG', 'SCW', 'TED', 'XOP', 'PML', 'RNK', 'KTA', 'KJJ', 'UXS', 'MRX', 'FJH', 'NRA', 'ZJJ', 'WGU', 'NPD', 'GPA', 'UBR', 'GXI', 'YQP', 'SEI', 'MOZ', 'UIR', 'SIH', 'EAP', 'IXV', 'EKD', 'YVX', 'PPZ', 'MBK', 'NTQ', 'BSZ', 'BVD', 'LMV', 'MDB', 'BOK', 'XLL', 'QJJ', 'CTH', 'BLQ', 'ZOR', 'RVD', 'MNW', 'OCC', 'FCN', 'MAK', 'OMZ', 'PLJ', 'QMP', 'PTZ', 'AXB', 'YJG', 'JZX', 'HUH', 'FOL', 'BUV', 'BEI', 'ZYN', 'JHS', 'JND', 'TIB', 'JMM', 'UTZ', 'GEZ', 'LTQ', 'IBJ', 'WOY', 'IGT', 'ZUV', 'MWP', 'GSJ', 'FET', 'LXM', 'ZBE', 'VTI', 'WLW', 'PYT', 'DJQ', 'NFU', 'BKX', 'MDD', 'YPX', 'SBG', 'TKI', 'QRU', 'IKG', 'SRQ', 'AOB', 'KHN', 'IZN', 'NQU', 'NQC', 'HVS', 'JCP', 'HUL', 'MXN', 'DOW', 'HXR', 'GZT', 'GNL', 'INF', 'AOU', 'RXX', 'UEP', 'OXY', 'VWA', 'GLH', 'WPM', 'NVR', 'HIP', 'RIM', 'JJJ', 'JDN', 'RBB', 'BDI', 'XVJ', 'ERO', 'RXJ', 'ZMA', 'TVU', 'HPE', 'VAU', 'GVU', 'ZGK', 'KCK', 'DHB', 'RNZ', 'HDO', 'CZF', 'UTI', 'SAQ', 'SWA', 'VXK', 'FEH', 'RFJ', 'ZKQ', 'DOJ', 'DKK', 'SDL', 'FSX', 'ZJF', 'KTA', 'NLG', 'PHJ', 'WOH', 'AXU', 'HSI', 'SZW', NULL) AS in_list FROM strings ORDER BY s;

PRAGMA enable_verification;

SELECT LEAST(1);

SELECT LEAST('hello world');

SELECT LEAST(1, 3);

SELECT LEAST(1, 3, 0);

SELECT LEAST(1, 3, 0, 2, 7, 8, 10, 11, -100, 30);

SELECT LEAST(1, 3, 0, 2, 7, 8, 10, 11, -100, 30, NULL);

SELECT LEAST(NULL, 3, 0, 2, 7, 8, 10, 11, -100, 30, 1);

SELECT GREATEST(NULL, CAST(1.0 AS REAL));

SELECT LEAST(1.0, 10.0);

SELECT LEAST('hello', 'world');

SELECT LEAST('hello', 'world', 'blabla', 'tree');

SELECT LEAST('hello', 'world', 'blabla', 'tree');

SELECT LEAST(CAST('1992-01-01' AS DATE), CAST('1994-02-02' AS DATE), CAST('1991-01-01' AS DATE));

SELECT LEAST(CAST('1992-01-01' AS DATE), CAST('1994-02-02' AS DATE), CAST('1991-01-01' AS DATE), NULL);

SELECT LEAST(CAST('1992-01-01' AS DATE), CAST('1994-02-02' AS DATE), CAST('1991-01-01' AS DATE), CAST('infinity' AS DATE), CAST('-infinity' AS DATE));

SELECT GREATEST(CAST('1992-01-01' AS DATE), CAST('1994-02-02' AS DATE), CAST('1991-01-01' AS DATE), CAST('infinity' AS DATE), CAST('-infinity' AS DATE));

SELECT LEAST(CAST('1992-01-01 13:45:21.890123' AS TIMESTAMP), CAST('1994-02-02 05:43:21' AS TIMESTAMP), CAST('1991-01-01 01:23:45' AS TIMESTAMP));

SELECT LEAST(CAST('1992-01-01 13:45:21.890123' AS TIMESTAMP), CAST('1994-02-02 05:43:21' AS TIMESTAMP), CAST('1991-01-01 01:23:45' AS TIMESTAMP), NULL);

SELECT LEAST(CAST('1992-01-01 13:45:21.890123' AS TIMESTAMP), CAST('1994-02-02 05:43:21' AS TIMESTAMP), CAST('1991-01-01 01:23:45' AS TIMESTAMP), CAST('infinity' AS TIMESTAMP), CAST('-infinity' AS TIMESTAMP));

SELECT GREATEST(CAST('1992-01-01 13:45:21.890123' AS TIMESTAMP), CAST('1994-02-02 05:43:21' AS TIMESTAMP), CAST('1991-01-01 01:23:45' AS TIMESTAMP), CAST('infinity' AS TIMESTAMP), CAST('-infinity' AS TIMESTAMP));

SELECT LEAST(CAST('1992-01-01' AS DATE), 'hello', 123);

CREATE TABLE t1 (i INT, j INT);

INSERT INTO t1 VALUES (1, NULL), (2, 1), (3, 7);

SELECT LEAST(i, j), GREATEST(i, j) FROM t1 ORDER BY i;

SELECT LEAST(i, i + 1, j), GREATEST(i, i - 1, j) FROM t1 ORDER BY i;

SELECT LEAST(i, 800, i + 1, 1000, j), GREATEST(i, -1000, i - 1, -700, j, -800) FROM t1 ORDER BY i;

SELECT LEAST(i, 800, i + 1, 1000, j, NULL), GREATEST(i, -1000, i - 1, -700, j, -800) FROM t1 ORDER BY i;

SELECT LEAST(i, j), GREATEST(i, j) FROM t1 WHERE NOT j IS NULL ORDER BY i;

SELECT LEAST(rowid + 10, i, j), GREATEST(i, rowid + 4, j) FROM t1 WHERE NOT j IS NULL ORDER BY i;

SELECT LEAST(REPEAT(CAST(i AS TEXT), 20), CAST(j AS TEXT)) FROM t1;

SELECT GREATEST(CAST(52392441565678.308 AS DECIMAL(17, 3)), CAST(52392441565678.308 AS DECIMAL(17, 3)));

PRAGMA enable_verification;

SELECT NULLIF(NULLIF('hello', 'world'), 'blabla');

CREATE TABLE test (a TEXT);

INSERT INTO test VALUES ('hello'), ('world'), ('test');

CREATE TABLE test2 (a TEXT, b TEXT);

INSERT INTO test2 VALUES ('blabla', 'b'), ('blabla2', 'c'), ('blabla3', 'd');

SELECT NULLIF(NULLIF((SELECT a FROM test LIMIT 1 OFFSET 1), a), b) FROM test2;

DROP TABLE test;

CREATE TABLE test3 (a INT, b INT);

INSERT INTO test3 VALUES (11, 22), (13, 22), (12, 21);

SELECT NULLIF(CAST(a AS TEXT), '11') FROM test3;

SELECT a, CASE WHEN a > 11 THEN CAST(a AS TEXT) ELSE CAST(b AS TEXT) END FROM test3 ORDER BY 1;

PRAGMA enable_verification;

SELECT CURRENT_SETTING('a');

SELECT CURRENT_SETTING('memori_limit');

SELECT CURRENT_SETTING('default_null_order');

SET default_null_order = 'nulls_last';

SET default_null_order = CONCAT('nulls', '_', 'last');

SELECT CURRENT_SETTING('default_null_order');

SELECT CURRENT_SETTING('DEFAULT_NULL_ORDER');

SELECT * FROM RANGE(0, 3) UNION ALL SELECT NULL ORDER BY 1;

SELECT CURRENT_SETTING(CAST(i AS TEXT)) FROM RANGE(0, 1) AS tbl(i);

SELECT CURRENT_SETTING(NULL);

SELECT CURRENT_SETTING(CAST(NULL AS TEXT));

SELECT CURRENT_SETTING('');

SET default_null_order = colref || '_last';

SET default_null_order = (SELECT 'nulls_last');

SELECT 1 = 1;

SELECT STATS(5);

SELECT STATS(7);

SELECT STATS('hello');

SELECT STATS('1234567ü');

SELECT STATS(5 + 2);

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (1), (2), (3);

SELECT STATS(i) FROM integers LIMIT 1;

SELECT STATS(i + 2) FROM integers LIMIT 1;

SELECT STATS(i - 5) FROM integers LIMIT 1;

SELECT STATS(i * 2) FROM integers LIMIT 1;

SELECT STATS(i * -1) FROM integers LIMIT 1;

PRAGMA disable_optimizer;

SELECT STATS(i + 1) FROM integers LIMIT 1;

PRAGMA enable_optimizer;

SELECT STATS(i * -1) FROM integers LIMIT 1;

PRAGMA enable_verification;

CREATE TABLE a (i DOUBLE, j DOUBLE);

INSERT INTO a VALUES (1, 10), (42, 420);

EXPLAIN SELECT * FROM summary((SELECT * FROM a));

SELECT * FROM SUMMARY((SELECT * FROM a));

PRAGMA threads = 4;

PRAGMA verify_parallelism;

SELECT * FROM SUMMARY((SELECT * FROM a));

PRAGMA enable_verification;

CREATE TABLE intervals (i INTERVAL, s TEXT);

INSERT INTO intervals VALUES ('2 years', 'year'), ('16 months', 'quarter'), ('42 days', 'day'), ('2066343400 microseconds', 'minute');

SELECT DATE_PART(CAST(NULL AS TEXT), CAST(NULL AS INTERVAL)) FROM intervals;

SELECT DATE_PART(s, CAST(NULL AS INTERVAL)) FROM intervals;

SELECT DATE_PART(NULL, i) FROM intervals;

SELECT DATE_PART(s, INTERVAL '4 years 5 months 18 days 128 seconds') FROM intervals;

SELECT DATE_PART('seconds', i) FROM intervals;

SELECT DATE_PART('epoch', i) FROM intervals;

SELECT DATE_PART(s, i) FROM intervals;

SELECT DAYOFWEEK(i) FROM intervals;

SELECT ISODOW(i) FROM intervals;

SELECT DAYOFYEAR(i) FROM intervals;

SELECT WEEK(i) FROM intervals;

SELECT ERA(i) FROM intervals;

SELECT JULIAN(i) FROM intervals;

SELECT EXTRACT(ERA FROM i) FROM intervals;

SELECT EXTRACT(JULIAN FROM i) FROM intervals;

SELECT DATE_PART('era', i) FROM intervals;

SELECT DATE_PART('julian', i) FROM intervals;

SELECT DATE_PART('offset', i) FROM intervals;

SELECT DATE_PART('offset', i) FROM intervals;

SELECT i, DATE_PART('${partcode}', i) AS p, DATE_PART(['${partcode}'], i) AS st FROM intervals WHERE p <> st['${partcode}'];

SELECT i, DATE_PART(['year', 'month', 'day'], i) AS parts FROM intervals ORDER BY 1;

SELECT i, DATE_PART(['millennium', 'century', 'decade', 'quarter'], i) AS parts FROM intervals ORDER BY 1;

SELECT i, DATE_PART(['hour', 'minute', 'second', 'epoch'], i) AS parts FROM intervals ORDER BY 1;

SELECT i, EPOCH_NS(i) AS parts FROM intervals ORDER BY 1;

SELECT i, EPOCH_US(i) AS parts FROM intervals ORDER BY 1;

SELECT i, EPOCH_MS(i) AS parts FROM intervals ORDER BY 1;

SELECT i, NANOSECOND(i) AS parts FROM intervals ORDER BY 1;

SELECT i, DATE_PART(['${datepart}'], i) AS parts FROM intervals ORDER BY 1;

PRAGMA enable_verification;

CREATE TABLE intervals (i INTERVAL);

INSERT INTO intervals VALUES ('2 years'), ('16 months'), ('42 days'), ('2066343400 microseconds'), (NULL);

SELECT EXTRACT(YEAR FROM i) FROM intervals;

SELECT EXTRACT(MONTH FROM i) FROM intervals;

SELECT EXTRACT(DAY FROM i) FROM intervals;

SELECT EXTRACT(DECADE FROM i) FROM intervals;

SELECT EXTRACT(CENTURY FROM i) FROM intervals;

SELECT EXTRACT(MILLENNIUM FROM i) FROM intervals;

SELECT EXTRACT(QUARTER FROM i) FROM intervals;

SELECT EXTRACT(DAYOFWEEK FROM i) FROM intervals;

SELECT EXTRACT(ISODOW FROM i) FROM intervals;

SELECT EXTRACT(DAYOFYEAR FROM i) FROM intervals;

SELECT EXTRACT(WEEK FROM i) FROM intervals;

SELECT EXTRACT(YEARWEEK FROM i) FROM intervals;

SELECT EXTRACT(EPOCH FROM i) FROM intervals;

SELECT EXTRACT(MICROSECOND FROM i) FROM intervals;

SELECT EXTRACT(MILLISECOND FROM i) FROM intervals;

SELECT EXTRACT(SECOND FROM i) FROM intervals;

SELECT EXTRACT(MINUTE FROM i) FROM intervals;

SELECT EXTRACT(HOUR FROM i) FROM intervals;

SELECT EXTRACT(YEAR FROM INTERVAL '14' MONTHS);

SELECT EXTRACT(MONTH FROM INTERVAL '14' MONTHS);

SELECT EXTRACT(DAY FROM INTERVAL '157' DAYS);

SELECT EXTRACT(DECADE FROM INTERVAL '140' MONTHS);

SELECT EXTRACT(CENTURY FROM INTERVAL '1400' MONTHS);

SELECT EXTRACT(MILLENNIUM FROM INTERVAL '14000' MONTHS);

SELECT EXTRACT(QUARTER FROM INTERVAL '14' MONTHS);

SELECT EXTRACT(QUARTER FROM INTERVAL '21' MONTHS);

SELECT EXTRACT(EPOCH FROM INTERVAL '6' MONTHS);

SELECT EXTRACT(DOY FROM INTERVAL '6' MONTHS);

SELECT EXTRACT(DOW FROM INTERVAL '6' MONTHS);

PRAGMA enable_verification;

CREATE TABLE INTERVAL_MULDIV_TBL (span INTERVAL);

INSERT INTO INTERVAL_MULDIV_TBL VALUES ('41 months 12 days 360:00'), ('-41 months -12 days 360:00'), ('-12 days'), ('9 months -27 days 12:34:56'), ('-3 years 482 days 76:54:32.189'), ('4 months'), ('14 months'), ('999 months 999 days');

SELECT span * 0.3 AS product FROM INTERVAL_MULDIV_TBL;

SELECT span * 8.2 AS product FROM INTERVAL_MULDIV_TBL;

SELECT span / 10 AS quotient FROM INTERVAL_MULDIV_TBL;

SELECT span / 100 AS quotient FROM INTERVAL_MULDIV_TBL;

PRAGMA enable_verification;

CREATE TABLE intervals (i INTERVAL, s TEXT);

INSERT INTO intervals VALUES ('1247 years 4 months', 'millennium'), ('-1448 years -5 months', 'millennium'), ('548 years 7 months', 'century'), ('-118 years -3 months', 'century'), ('45 years 1 months', 'decade'), ('-97 years -11 months', 'decade'), ('5 years 6 months', 'year'), ('-4 years -8 months', 'year'), ('2 years 2 months', 'quarter'), ('-3 years -10 months', 'quarter'), ('3 years 4 months 5 days', 'month'), ('-7 years -3 months 29 days', 'month'), ('4 months 22 days', 'week'), ('-3 months -3 days', 'week'), ('5 months 7 days 12:34:56.789012', 'day'), ('-3 months -3 days 12:34:56.789012', 'day'), ('1 month 11 days 12:34:56.789012', 'hour'), ('-1 month -2 days 12:34:56.789012', 'hour'), ('1 month 16 days 12:34:56.789012', 'minute'), ('-1 month -9 days 12:34:56.789012', 'minute'), ('1 month 24 days 12:34:56.789012', 'second'), ('-1 month -17 days 12:34:56.789012', 'second'), ('1 month 29 days 12:34:56.789012', 'milliseconds'), ('-1 month -26 days 12:34:56.789012', 'milliseconds'), ('1 month 7 days 12:34:56.789012', 'microseconds'), ('-1 month -29 days 12:34:56.789012', 'microseconds'), (NULL, NULL);

SELECT i FROM intervals;

SELECT DATE_TRUNC('MILLENNIUM', i) FROM intervals;

SELECT DATE_TRUNC('CENTURY', i) FROM intervals;

SELECT DATE_TRUNC('DECADE', i) FROM intervals;

SELECT DATE_TRUNC('${DATEPART}', i) FROM intervals;

SELECT DATE_TRUNC('${DATEPART}', i) FROM intervals;

SELECT DATE_TRUNC('${DATEPART}', i) FROM intervals;

SELECT DATE_TRUNC('HOUR', i) FROM intervals;

SELECT DATE_TRUNC('MINUTE', i) FROM intervals;

SELECT DATE_TRUNC('${DATEPART}', i) FROM intervals;

SELECT DATE_TRUNC('MILLISECOND', i) FROM intervals;

SELECT DATE_TRUNC('MICROSECOND', i) FROM intervals;

SELECT DATE_TRUNC('S', i) FROM intervals;

SELECT DATE_TRUNC('NULL', i) FROM intervals;

PRAGMA enable_verification;

SELECT LENGTH([1, 2, 3]);

SELECT LENGTH([]);

SELECT LENGTH(NULL);

SELECT ARRAY_LENGTH([1, 2, 3], 1);

SELECT ARRAY_LENGTH([1, 2, 3], 2);

SELECT ARRAY_LENGTH([1, 2, 3], 0);

SELECT LENGTH([1]) FROM RANGE(0, 3);

CREATE TABLE lists AS SELECT * FROM (VALUES ([1, 2]), ([NULL]), (NULL), ([]), ([3, 4, 5, 6, 7])) AS tbl(l);

SELECT LENGTH(l) FROM lists;

PRAGMA enable_verification;

SELECT ARRAY_TO_STRING([1, 2, 3], '');

SELECT ARRAY_TO_STRING([1, 2, 3], '-');

SELECT ARRAY_TO_STRING(NULL, '-');

SELECT ARRAY_TO_STRING([1, 2, 3], NULL);

SELECT ARRAY_TO_STRING([], '-');

SELECT ARRAY_TO_STRING([i, i + 1], '-') FROM RANGE(0, 6) AS t(i) WHERE i <= 2 OR i > 4;

SELECT ARRAY_TO_STRING([1, 2, 3], k) FROM REPEAT(',', 5) AS t(k);

PRAGMA enable_verification;

SELECT ARRAY_TO_STRING_COMMA_DEFAULT([1, 2, 3]);

SELECT ARRAY_TO_STRING_COMMA_DEFAULT([1, 2, 3], sep := ',');

SELECT ARRAY_TO_STRING_COMMA_DEFAULT([1, 2, 3], sep := '');

SELECT ARRAY_TO_STRING_COMMA_DEFAULT([1, 2, 3], sep := '-');

SELECT ARRAY_TO_STRING_COMMA_DEFAULT(NULL, sep := '-');

SELECT ARRAY_TO_STRING_COMMA_DEFAULT([1, 2, 3], sep := NULL);

SELECT ARRAY_TO_STRING_COMMA_DEFAULT([], sep := '-');

SELECT ARRAY_TO_STRING_COMMA_DEFAULT([i, i + 1], sep := '-') FROM RANGE(0, 6) AS t(i) WHERE i <= 2 OR i > 4;

SELECT ARRAY_TO_STRING_COMMA_DEFAULT([1, 2, 3], sep := k) FROM REPEAT(',', 5) AS t(k);

PRAGMA enable_verification;

SELECT FLATTEN([[1, 2, 3, 4]]);

SELECT FLATTEN([[1, 2], [3, 4]]);

SELECT FLATTEN(1);

SELECT FLATTEN([[], []]);

SELECT FLATTEN([[1, 2], [], [3, 4]]);

SELECT FLATTEN([[1, 2], []]);

SELECT FLATTEN([[], [1, 2]]);

SELECT FLATTEN(NULL);

SELECT FLATTEN([NULL]);

SELECT FLATTEN([[NULL]]);

SELECT FLATTEN([NULL, [1], [2, 3], NULL, [4, NULL], [NULL, NULL]]);

SELECT FLATTEN([[[1, 2], [3, 4]], [[5, 6], [7, 8]]]);

SELECT FLATTEN(FLATTEN(FLATTEN([[[[1], [2]], [[3], [4]]], [[[5], [6]], [[7], [8]]]])));

SELECT FLATTEN([[[1, 2], [3, 4]], [], [[5, 6], [7, 8]]]);

SELECT FLATTEN([[[1, 2], [3, 4]], [[]], [[5, 6], [7, 8]]]);

SELECT FLATTEN([[[]], [[]]]);

SELECT FLATTEN(FLATTEN([[[]], [[]]]));

CREATE TABLE nums AS SELECT range % 8 AS i, range AS j FROM RANGE(0, 16);

CREATE TABLE lists AS SELECT i % 4 AS i, LIST(j ORDER BY rowid) AS j FROM nums GROUP BY i;

CREATE TABLE nested_lists AS SELECT i, ARRAY_SORT(LIST(j ORDER BY rowid)) AS j FROM lists GROUP BY i ORDER BY i;

SELECT * FROM nested_lists;

SELECT i, FLATTEN(j) FROM nested_lists;

SELECT i, FLATTEN(j) FROM nested_lists WHERE i % 2 <> 0;

SELECT i, FLATTEN([[1, 2], [3, 4]]) FROM nested_lists;

SELECT FLATTEN(42);

SELECT FLATTEN([1, 2]);

SELECT FLATTEN(NULL);

WITH v_data(col, list) AS (SELECT * FROM (VALUES ('a', [1, 2, 3]), ('b', [4, 5]), ('a', [2, 6]))), v_list_of_lists(col, list, list_of_lists) AS (SELECT v.*, ARRAY_AGG(v.list) OVER (PARTITION BY v.col ORDER BY v.list) FROM v_data AS v) SELECT v.*, FLATTEN(v.list_of_lists) FROM v_list_of_lists AS v;

PRAGMA enable_verification;

SELECT RANGE(0, 3);

SELECT GENERATE_SERIES(0, 3);

SELECT RANGE(0, 3) FROM RANGE(0, 3);

SELECT RANGE(0, i) FROM RANGE(0, 3) AS tbl(i);

SELECT RANGE(0, NULL) FROM RANGE(0, 3) AS tbl(i);

SELECT RANGE(0, CASE WHEN i % 2 = 0 THEN NULL ELSE i END) FROM RANGE(0, 6) AS tbl(i);

SELECT RANGE(0, 0);

SELECT RANGE(0, -1);

SELECT RANGE(0, NULL);

SELECT RANGE(1, 3);

SELECT GENERATE_SERIES(1, 3);

SELECT RANGE(1, 1);

SELECT RANGE(-10, -5);

SELECT GENERATE_SERIES(1, 1);

SELECT RANGE(3, 1);

SELECT RANGE(NULL, 1);

SELECT RANGE(1, NULL);

SELECT RANGE(NULL, NULL);

SELECT RANGE(i, 5) FROM RANGE(0, 5) AS tbl(i);

SELECT RANGE(0, i) FROM RANGE(0, 5) AS tbl(i);

SELECT RANGE(1, 6, 2);

SELECT GENERATE_SERIES(1, 6, 2);

SELECT GENERATE_SERIES(1, 7, 2);

SELECT RANGE(1, 10, 100);

SELECT RANGE(1, 10, 0);

SELECT RANGE(3, 1, -1);

SELECT GENERATE_SERIES(3, 1, -1);

SELECT RANGE(3, 1, 1);

SELECT RANGE(1, 3, -1);

SELECT RANGE(4, 1, -1);

SELECT RANGE(50, 1, -20);

SELECT GENERATE_SERIES(50, 1, -20);

SELECT GENERATE_SERIES(50, -10, -20);

SELECT RANGE(NULL, 1, 1);

SELECT RANGE(1, NULL, 1);

SELECT RANGE(1, 1, NULL);

SELECT RANGE(NULL, NULL, NULL);

PRAGMA enable_verification;

SELECT GENERATE_SERIES(CAST('2020-01-01' AS TIMESTAMP), CAST('2020-07-01' AS TIMESTAMP), INTERVAL '3' MONTH);

SELECT RANGE(CAST('2020-01-01' AS TIMESTAMP), CAST('2020-07-01' AS TIMESTAMP), INTERVAL '3' MONTH);

SELECT GENERATE_SERIES(CAST('2020-06-01' AS TIMESTAMP), CAST('2020-01-01' AS TIMESTAMP), -INTERVAL '3' MONTH);

SELECT GENERATE_SERIES(CAST('2020-01-01' AS TIMESTAMP), CAST('2020-01-01' AS TIMESTAMP), INTERVAL '1' DAY);

SELECT RANGE(CAST('2020-01-01' AS TIMESTAMP), CAST('2020-01-01' AS TIMESTAMP), INTERVAL '1' DAY);

SELECT GENERATE_SERIES(CAST('2020-06-01' AS TIMESTAMP), CAST('2020-01-01' AS TIMESTAMP), INTERVAL '3' MONTH);

SELECT GENERATE_SERIES(CAST('2020-01-01' AS TIMESTAMP), CAST('2020-06-01' AS TIMESTAMP), -INTERVAL '3' MONTH);

SELECT GENERATE_SERIES(NULL, CAST('2020-06-01' AS TIMESTAMP), -INTERVAL '3' MONTH);

SELECT GENERATE_SERIES(CAST('2020-01-01' AS TIMESTAMP), NULL, -INTERVAL '3' MONTH);

SELECT GENERATE_SERIES(CAST('2020-01-01' AS TIMESTAMP), CAST('2020-06-01' AS TIMESTAMP), NULL);

SELECT GENERATE_SERIES(CAST('2020-01-01' AS TIMESTAMP), CAST('2020-06-01' AS TIMESTAMP), INTERVAL '3' MONTH - INTERVAL '3' DAY);

SELECT GENERATE_SERIES(CAST('294247-01-10' AS TIMESTAMP), CAST('infinity' AS TIMESTAMP), INTERVAL '1' DAY);

SELECT RANGE(CAST('294247-01-10' AS TIMESTAMP), CAST('infinity' AS TIMESTAMP), INTERVAL '1' DAY);

SELECT GENERATE_SERIES(CAST('-infinity' AS TIMESTAMP), CAST('290309-12-22 (BC) 00:00:00' AS TIMESTAMP), INTERVAL '1' DAY);

SELECT RANGE(CAST('-infinity' AS TIMESTAMP), CAST('290309-12-22 (BC) 00:00:00' AS TIMESTAMP), INTERVAL '1' DAY);

PRAGMA disable_verification;

SELECT COUNT(*) FROM (SELECT UNNEST(GENERATE_SERIES(CAST('2000-01-01' AS TIMESTAMP), CAST('2020-06-01' AS TIMESTAMP), INTERVAL '1' DAY)));

PRAGMA enable_verification;

SELECT GENERATE_SUBSCRIPTS([4, 5, 6], 1);

SELECT GENERATE_SUBSCRIPTS([], 1);

SELECT GENERATE_SUBSCRIPTS(NULL, 1);

SELECT GENERATE_SUBSCRIPTS([[1, 2], [3, 4], [5, 6]], 2);

SET Calendar = 'gregorian';

SET TimeZone = 'America/Los_Angeles';

SELECT GENERATE_SERIES(CAST('2020-01-01' AS TIMESTAMPTZ), CAST('2020-07-01' AS TIMESTAMPTZ), INTERVAL '3' MONTH);

SELECT RANGE(CAST('2020-01-01' AS TIMESTAMPTZ), CAST('2020-07-01' AS TIMESTAMPTZ), INTERVAL '3' MONTH);

SELECT GENERATE_SERIES(CAST('2020-06-01' AS TIMESTAMPTZ), CAST('2020-01-01' AS TIMESTAMPTZ), -INTERVAL '3' MONTH);

SELECT GENERATE_SERIES(CAST('2020-01-01' AS TIMESTAMPTZ), CAST('2020-01-01' AS TIMESTAMPTZ), INTERVAL '1' DAY);

SELECT RANGE(CAST('2020-01-01' AS TIMESTAMPTZ), CAST('2020-01-01' AS TIMESTAMPTZ), INTERVAL '1' DAY);

SELECT GENERATE_SERIES(CAST('2020-06-01' AS TIMESTAMPTZ), CAST('2020-01-01' AS TIMESTAMPTZ), INTERVAL '3' MONTH);

SELECT GENERATE_SERIES(CAST('2020-01-01' AS TIMESTAMPTZ), CAST('2020-06-01' AS TIMESTAMPTZ), -INTERVAL '3' MONTH);

SELECT GENERATE_SERIES(NULL, CAST('2020-06-01' AS TIMESTAMP), -INTERVAL '3' MONTH);

SELECT GENERATE_SERIES(CAST('2020-01-01' AS TIMESTAMP), NULL, -INTERVAL '3' MONTH);

SELECT GENERATE_SERIES(CAST('2020-01-01' AS TIMESTAMP), CAST('2020-06-01' AS TIMESTAMP), NULL);

SELECT COUNT(*) FROM (SELECT UNNEST(GENERATE_SERIES(CAST('2000-01-01' AS TIMESTAMPTZ), CAST('2020-06-01' AS TIMESTAMPTZ), INTERVAL '1' DAY)));

SELECT GENERATE_SERIES(start, stop, step) FROM (VALUES (CAST('2020-01-01' AS TIMESTAMPTZ), CAST('2020-07-01' AS TIMESTAMPTZ), INTERVAL '3' MONTH), (CAST('2020-12-04' AS TIMESTAMPTZ), CAST('2020-09-01' AS TIMESTAMPTZ), INTERVAL '-1 month -1 day'), (CAST('2020-03-08' AS TIMESTAMPTZ), CAST('2020-03-09' AS TIMESTAMPTZ), INTERVAL '6' HOUR), (CAST('2020-11-02' AS TIMESTAMPTZ), CAST('2020-11-01' AS TIMESTAMPTZ), INTERVAL '-43200' SECOND)) AS _(start, stop, step);

SELECT RANGE(start, stop, step) FROM (VALUES (CAST('2020-01-01' AS TIMESTAMPTZ), CAST('2020-07-01' AS TIMESTAMPTZ), INTERVAL '3' MONTH), (CAST('2020-12-04' AS TIMESTAMPTZ), CAST('2020-09-01' AS TIMESTAMPTZ), INTERVAL '-1 month -1 day'), (CAST('2020-03-08' AS TIMESTAMPTZ), CAST('2020-03-09' AS TIMESTAMPTZ), INTERVAL '6' HOUR), (CAST('2020-11-02' AS TIMESTAMPTZ), CAST('2020-11-01' AS TIMESTAMPTZ), INTERVAL '-43200' SECOND)) AS _(start, stop, step);

SELECT GENERATE_SERIES(CAST('2020-01-01' AS TIMESTAMPTZ), CAST('2020-06-01' AS TIMESTAMPTZ), INTERVAL '3' MONTH - INTERVAL '3' DAY);

SELECT GENERATE_SERIES(CAST('294247-01-10' AS TIMESTAMPTZ), CAST('infinity' AS TIMESTAMPTZ), INTERVAL '1' DAY);

SELECT RANGE(CAST('294247-01-10' AS TIMESTAMPTZ), CAST('infinity' AS TIMESTAMPTZ), INTERVAL '1' DAY);

SELECT GENERATE_SERIES(CAST('-infinity' AS TIMESTAMPTZ), CAST('290309-12-22 (BC) 00:00:00' AS TIMESTAMPTZ), INTERVAL '1' DAY);

SELECT RANGE(CAST('-infinity' AS TIMESTAMPTZ), CAST('290309-12-22 (BC) 00:00:00' AS TIMESTAMPTZ), INTERVAL '1' DAY);

SELECT QUANTILE(NULL, LIST_FILTER(NULL, (c103 -> 'babea54a-2261-4b0c-b14b-1d0e9b794e1a')));

PRAGMA enable_verification;

SELECT LIST_CONCAT([1, 2], [3, 4]);

SELECT ARRAY_CONCAT([1, 2], [3, 4]);

SELECT LIST_CONCAT(NULL, [3, 4]);

SELECT LIST_CONCAT([1, 2], NULL);

SELECT LIST_CONCAT([], []);

SELECT LIST_CONCAT([], [3, 4]);

SELECT LIST_CONCAT([1, 2], []);

SELECT LIST_CONCAT([1, 2], [3, 4], [5, 6]);

SELECT LIST_CONCAT([1, 2], [3, 4], []);

SELECT LIST_CONCAT([1, 2], [], [5, 6]);

SELECT LIST_CONCAT([], [3, 4], [5, 6]);

SELECT LIST_CONCAT([], [], [5, 6]);

SELECT LIST_CONCAT([1, 2], [3, 4], [5, 6], [7, 8]);

SELECT LIST_CONCAT([1, 2], 3);

SELECT [1, 2] || [3, 4];

SELECT [1, 2] + [3, 4];

SELECT [1, 2] + [3, 4];

SELECT LIST_CONCAT(CAST([1.000000, 2.000000] AS REAL[]), CAST([3.000000, 4.000000] AS DOUBLE[]));

SELECT LIST_CONCAT(CAST([1.000000, 2.000000] AS DOUBLE[]), CAST([3.000000, 4.000000] AS REAL[]));

SELECT LIST_CONCAT([NULL], [NULL]);

SELECT LIST_CONCAT([1, 2], [NULL]);

SELECT LIST_CONCAT([NULL], [3, 4]);

SELECT LIST_CONCAT([1, 2], [3, 4], [NULL]);

SELECT LIST_CONCAT([1, 2], [3, 4], NULL);

SELECT LIST_CONCAT(NULL, [3, 4], [5, 6]);

SELECT LIST_CONCAT([[1, 2]], [[3, 4]]);

SELECT LIST_CONCAT([[1, 2]], [[3, 4]], [[5, 6]]);

SELECT LIST_CONCAT([{'a': 1}, {'a': 2}], [{'a': 3}, {'a': 4}]);

SELECT LIST_CONCAT([{'a': 1}, {'a': 2}], [{'a': 3}, {'a': 4}], [{'a': 5}, {'a': 6}]);

SELECT LIST_CONCAT([[[1], [2]], [[3], [4]]], [[[5], [6]], [[7], [8]]]);

SELECT LIST_CONCAT([[[1], [2]], [[3], [4]]], [[[5], [6]], [[7], [8]]], [[[9], [10]], [[11], [12]]]);

CREATE TABLE test AS SELECT range % 4 AS i, range AS j, range AS k FROM RANGE(0, 16);

CREATE TABLE lists AS SELECT i, LIST(j) AS j, LIST(k) AS k FROM test GROUP BY i;

SELECT i, LIST_CONCAT(j, k) FROM lists;

SELECT i, LIST_CONCAT(j, k, j, k, j, k) FROM lists;

SELECT i, LIST_CONCAT(j, CAST(k AS TEXT)) FROM lists;

SELECT LIST_APPEND([1, 2], 3);

SELECT LIST_APPEND([1, 2], NULL);

SELECT LIST_APPEND(NULL, 3);

SELECT i, LIST_APPEND(LIST_CONCAT(j, k), i) FROM lists ORDER BY i;

SELECT LIST_PREPEND(1, [2, 3]);

SELECT ARRAY_PREPEND(1, [2, 3]);

SELECT ARRAY_PUSH_BACK([1, 2], 3);

SELECT ARRAY_PUSH_BACK(NULL, 3);

SELECT ARRAY_PUSH_FRONT([2, 3], 1);

SELECT ARRAY_PUSH_FRONT(NULL, 1);

SELECT [1, 2] || NULL;

SELECT [1, 2] || b FROM (VALUES (CAST(NULL AS INT[]))) AS t(b);

SELECT a || b FROM (VALUES ([1, 2, 3], CAST(NULL AS INT[]))) AS t(a, b);

SELECT CONCAT([42], [84], 'str');

PRAGMA enable_verification;

CREATE TABLE TEST2 (i INT[], j INT);

INSERT INTO TEST2 VALUES ([2, 1, 3], 2), ([2, 3, 4], 5), ([1], NULL);

SELECT LIST_CONTAINS(i, j) FROM TEST2;

CREATE TABLE TEST (i INT[]);

INSERT INTO TEST VALUES ([2, 1, 3]), ([2, 3, 4]), ([1]);

SELECT i, LIST_CONTAINS(i, 1) FROM TEST;

SELECT i, LIST_CONTAINS(i, 4.0) FROM TEST;

DROP TABLE TEST;

CREATE TABLE STR_TEST (i TEXT[]);

INSERT INTO STR_TEST VALUES (['a', 'b', 'c']), (['d', 'a', 'e']), (['b']), (['aaaaaaaaaaaaaaaaaaaaaaaa']);

SELECT i, LIST_CONTAINS(i, 'a') FROM STR_TEST;

SELECT i, LIST_CONTAINS(i, 'aaaaaaaaaaaaaaaaaaaaaaaa') FROM STR_TEST;

SELECT i, LIST_CONTAINS(i, '0') FROM STR_TEST;

SELECT i, LIST_CONTAINS(i, NULL) FROM STR_TEST;

DROP TABLE STR_TEST;

SELECT LIST_CONTAINS([7, 2, 5], 7);

SELECT LIST_CONTAINS([], 7);

SELECT LIST_CONTAINS([1, 2, 3], 1.0);

SELECT LIST_CONTAINS([1.0, 2.0, 3.0, 4.0], 1);

SELECT LIST_CONTAINS([1, 2, 3], 4.0);

SELECT LIST_CONTAINS([1.0, 2.0, 3.0], 4);

SELECT LIST_CONTAINS([1.0, 2.0, 3.0], 'a');

SELECT LIST_CONTAINS('a', 'a');

SELECT LIST_CONTAINS(NULL, NULL);

SELECT LIST_CONTAINS([7], 5);

SELECT LIST_CONTAINS([1, 2, 3, 4], 4);

SELECT LIST_CONTAINS([1, 2, 3, 4], 5);

SELECT LIST_CONTAINS([1.0, 2.0, 3.0, 4.0], 5.0);

SELECT LIST_CONTAINS([1.0, 2.0, 3.0, 4.0], 4.0);

SELECT LIST_CONTAINS([TRUE, FALSE], TRUE);

SELECT LIST_CONTAINS([TRUE, TRUE], FALSE);

SELECT LIST_CONTAINS(['test', 'notest'], 'notest');

SELECT LIST_CONTAINS(['test', 'notest'], 'a');

SELECT LIST_CONTAINS(NULL, 1);

SELECT LIST_CONTAINS([1], NULL);

SELECT LIST_CONTAINS([NULL], NULL);

SELECT LIST_CONTAINS([NULL, 1], NULL);

SELECT LIST_CONTAINS([NULL, 1], 1);

SELECT LIST_CONTAINS([NULL, 0], 1);

SELECT LIST_CONTAINS([], NULL);

SELECT LIST_CONTAINS([NULL, 7], 7);

SELECT LIST_CONTAINS([NULL, 7], 7);

SELECT LIST_CONTAINS([[1, 2, 3], [1], [1, 2, 3]]);

SELECT LIST_CONTAINS(1);

SELECT LIST_CONTAINS(1, 1);

SELECT LIST_CONTAINS(1, 1);

SELECT LIST_CONTAINS(1, 1);

INSERT INTO test0 VALUES ([2]), ([1]), ([1, 2]), ([]), ([2, 2]), ([NULL]), ([2, 3]);

SELECT LIST_CONTAINS(i, 1) FROM test0;

DROP TABLE test0;

DROP TABLE test0;

SELECT LIST_CONTAINS([[1, 2, 3], [1]], [1]);

SELECT LIST_CONTAINS([[1, 2, 3], [1]], [2]);

SELECT LIST_CONTAINS([[1, 2, 3], [1]], [1, 2, 3]);

SELECT LIST_CONTAINS([[1, 3], [1]], [1, 2, 3]);

SELECT LIST_CONTAINS([[1, 3], [1], [1, 2, 3]], [1, 2, 3]);

SELECT LIST_CONTAINS([[NULL], [1], [1, 2, 3]], NULL);

SELECT LIST_CONTAINS([[NULL], [1], [1, 2, 3]], [NULL]);

SELECT LIST_CONTAINS([[1, NULL], [1], [1, 2, 3]], [1, NULL]);

SELECT LIST_CONTAINS([[1, NULL], [1], [1, 2, 3]], [0, NULL]);

SELECT LIST_CONTAINS([{'a': 1}, {'a': 2}], {'a': 2});

SELECT LIST_CONTAINS([{'a': 1}, {'a': 2}], {'a': 3});

SELECT LIST_CONTAINS([{'a': 1, 'b': 3}, {'a': 2, 'b': 2}], {'a': 2, 'b': 2});

SELECT LIST_CONTAINS([{'a': 1, 'b': 3}, {'a': 2, 'b': 2}], {'a': 1, 'b': 2});

SELECT LIST_CONTAINS([MAP([1], [2])], MAP([1], [2]));

SELECT LIST_CONTAINS([MAP([1], [2])], MAP([1], [3]));

SELECT LIST_CONTAINS([MAP([1], [2])], MAP([1], [3]));

SELECT LIST_CONTAINS([MAP([1], [2])], MAP([1], [3]));

INSERT INTO test0 VALUES ([2.0]), ([1.0]), ([1.0, 2.0]), ([]), ([2.0, 2.0]), ([NULL]), ([2.0, 3.0]);

SELECT LIST_CONTAINS(i, 1.0) FROM test0;

DROP TABLE test0;

DROP TABLE test0;

CREATE TABLE functions (function_name TEXT, function_type TEXT, parameter_types TEXT[]);

INSERT INTO functions VALUES ('last_day', 'scalar', ['TIMESTAMP']), ('dayname', 'else', ['TIMESTAMP']), ('date_part', 'scalar', ['DATE', 'VARCHAR']), ('scalar_part', 'scalar', ['VARCHAR', 'TIMESTAMP']);

SELECT function_name FROM functions WHERE function_type = 'scalar' AND ARRAY_CONTAINS(parameter_types, 'TIMESTAMP');

CREATE TABLE test (id INT, name TEXT[]);

INSERT INTO test VALUES (1, ['U2']), (2, ['Blur', 'Rock']), (3, ['Oasis', '2Pac']);

SELECT id, name FROM test WHERE ARRAY_CONTAINS(name, '2Pac');

SELECT id, name FROM test WHERE id IN (2, 3) AND ARRAY_CONTAINS(name, '2Pac');

WITH cte AS (SELECT id, name FROM test WHERE id IN (2, 3)) SELECT id, name FROM cte WHERE ARRAY_CONTAINS(name, '2Pac');

SELECT id, name FROM test WHERE id IN (2, 3) AND CAST(name AS TEXT) ILIKE '%2Pac%';

CREATE TABLE list_of_list (l1 INT[][], l2 INT[][]);

INSERT INTO list_of_list VALUES ([NULL], [NULL]);

SELECT LIST_FILTER(l1, x -> LIST_CONTAINS(l2, x)) FROM list_of_list;

SELECT LIST_DISTINCT(NULL);

SELECT LIST_DISTINCT([NULL]);

SELECT LIST_DISTINCT([]);

SELECT LIST_DISTINCT([]) WHERE 1 = 0;

SELECT LIST_DISTINCT();

SELECT LIST_DISTINCT(*);

SELECT LIST_DISTINCT([1, 2], 2);

SELECT LIST_DISTINCT(CAST(NULL AS BOOLEAN));

SELECT UNNEST(LIST_DISTINCT([1, 1, 2, 2, 2, 3])) AS l ORDER BY l;

SELECT UNNEST(LIST_DISTINCT([1, 1, NULL, 2, 2, 2, 3, NULL, NULL])) AS l ORDER BY l;

SELECT UNNEST(LIST_DISTINCT(LIST_DISTINCT([1, 1, -5, 10, 10, 2]))) AS l ORDER BY l;

CREATE TABLE integers (l INT[]);

INSERT INTO integers VALUES ([1, 1, 1]), ([1, NULL, 1, NULL]);

INSERT INTO integers VALUES ([NULL]), (NULL), ([]);

SELECT LIST_DISTINCT(l) FROM integers;

SELECT UNNEST(ARRAY_DISTINCT([1, 2, 2, NULL])) AS l ORDER BY l;

SELECT UNNEST(LIST_DISTINCT([TRUE, TRUE, FALSE, NULL])) AS l ORDER BY l;

SELECT LIST_DISTINCT([CAST(NULL AS BOOLEAN)]);

SELECT UNNEST(LIST_DISTINCT(['aa', 'aa', 'cd', NULL, '42'])) AS l ORDER BY l;

SELECT LIST_DISTINCT([CAST(NULL AS TEXT)]);

SELECT LIST_DISTINCT([CAST(NULL AS TEXT)]);

SELECT LIST_DISTINCT([CAST(NULL AS TEXT)]);

SELECT LIST_DISTINCT([CAST(NULL AS TEXT)]);

SELECT LIST_DISTINCT([CAST(NULL AS TEXT)]);

SELECT LIST_DISTINCT([CAST('2021-08-20' AS DATE)]);

SELECT LIST_DISTINCT([CAST('14:59:37' AS TIME)]);

SELECT LIST_DISTINCT([CAST('2021-08-20' AS TIMESTAMP)]);

SELECT LIST_DISTINCT([CAST('2021-08-20' AS TIMESTAMP_S)]);

SELECT LIST_DISTINCT([CAST('2021-08-20 00:00:00.123' AS TIMESTAMP_MS)]);

SELECT LIST_DISTINCT([CAST('2021-08-20 00:00:00.123456' AS TIMESTAMP_NS)]);

SELECT LIST_DISTINCT([CAST('14:59:37' AS TIMETZ)]);

SELECT LIST_DISTINCT([CAST('2021-08-20' AS TIMESTAMPTZ)]);

SELECT LIST_DISTINCT([INTERVAL '1' YEAR]);

SELECT LIST_DISTINCT([INTERVAL '1' YEAR]);

CREATE TYPE mood AS ENUM ('sad', 'ok', 'happy');

CREATE TABLE enums (e mood[]);

INSERT INTO enums VALUES (['happy', 'ok']);

SELECT ARRAY_SORT(LIST_DISTINCT(e)) FROM enums;

CREATE TABLE wheretest (name TEXT, l INT[]);

INSERT INTO wheretest VALUES ('one1', [2, 3, 3, 4, NULL, 2]), ('one2', [NULL, NULL, 2]), ('two1', [1, 2, 3, 10, 15]), ('one3', [2, 3, 4]), ('two2', NULL), ('two3', [10, 11, 12]);

SELECT name FROM wheretest WHERE name ILIKE 'one%' AND LIST_UNIQUE(LIST_DISTINCT(l)) > 1;

SELECT name FROM wheretest WHERE name ILIKE 'two%' AND LIST_UNIQUE(LIST_DISTINCT(l)) > 3;

SELECT ARRAY_SORT(LIST_DISTINCT(['a', 'b、c', 'a']));

CREATE TABLE all_types AS SELECT * FROM TEST_ALL_TYPES();

PRAGMA enable_verification;

PRAGMA default_order = 'ASC';

PRAGMA default_null_order = 'NULLS FIRST';

SELECT LIST_GRADE_UP(CAST(NULL AS INT[]));

SELECT LIST_GRADE_UP(l) FROM (VALUES ([1, 2, 3]), (NULL)) AS v(l);

SELECT LIST_GRADE_UP([NULL]);

SELECT LIST_GRADE_UP([]);

SELECT LIST_GRADE_UP([]) WHERE 1 = 0;

SELECT LIST_GRADE_UP();

SELECT LIST_GRADE_UP(*);

SELECT LIST_GRADE_UP([1, 2], 2);

SELECT LIST_GRADE_UP([1, 2], 'DESC', 2);

SELECT LIST_GRADE_UP([1, 2], 2, 2);

SELECT LIST_GRADE_UP([1, 2]);

SELECT LIST_GRADE_UP([1, 3, NULL, 5, NULL, -5]);

CREATE TABLE integers AS SELECT LIST(i) AS i FROM RANGE(1, 10, 1) AS t1(i);

INSERT INTO integers VALUES ([NULL]), ([]), (CAST(NULL AS INT[]));

SELECT LIST_GRADE_UP(i) FROM integers;

SELECT LIST_GRADE_UP([1, 3, NULL, 2], 'ASC');

SELECT LIST_GRADE_UP([1, 3, NULL, 2], 'DESC');

SELECT LIST_GRADE_UP([1, 3, NULL, 2], 'DESC', 'NULLS LAST');

SELECT LIST_GRADE_UP([1, 3, NULL, 2], 'deSc', 'nuLls LAST');

SELECT LIST_GRADE_UP([1, 3, NULL, 2], 'DESC', 'NULLS FIRST');

SELECT LIST_GRADE_UP([1, 3, NULL, 2], 'ASC', 'NULLS FIRST');

SELECT LIST_GRADE_UP([1, 3, NULL, 2], 'ASC', 'NULLS LAST');

SELECT LIST_GRADE_UP([TRUE, FALSE, NULL, TRUE, TRUE, NULL]);

SELECT LIST_GRADE_UP([CAST(NULL AS BOOLEAN)]);

SELECT LIST_GRADE_UP(['aa', 'a', 'cd', NULL, '42']);

SELECT LIST_GRADE_UP([CAST(NULL AS TEXT)]);

SELECT LIST_GRADE_UP([CAST(NULL AS TEXT)]);

SELECT LIST_GRADE_UP([CAST(NULL AS TEXT)]);

SELECT LIST_GRADE_UP([CAST(NULL AS TEXT)]);

SELECT LIST_GRADE_UP([CAST(NULL AS TEXT)]);

SELECT LIST_GRADE_UP([CAST('2021-08-20' AS DATE)]);

SELECT LIST_GRADE_UP([CAST('14:59:37' AS TIME)]);

SELECT LIST_GRADE_UP([CAST('2021-08-20' AS TIMESTAMP)]);

SELECT LIST_GRADE_UP([CAST('2021-08-20' AS TIMESTAMP_S)]);

SELECT LIST_GRADE_UP([CAST('2021-08-20 00:00:00.123' AS TIMESTAMP_MS)]);

SELECT LIST_GRADE_UP([CAST('2021-08-20 00:00:00.123456' AS TIMESTAMP_NS)]);

SELECT LIST_GRADE_UP([CAST('14:59:37' AS TIMETZ)]);

SELECT LIST_GRADE_UP([CAST('2021-08-20' AS TIMESTAMPTZ)]);

SELECT LIST_GRADE_UP([INTERVAL '1' YEAR]);

SELECT LIST_GRADE_UP([INTERVAL '1' YEAR]);

SELECT LIST_GRADE_UP([CAST('{a: 1}' AS BLOB), CAST('{a: 3}' AS BLOB)]);

SELECT LIST_GRADE_UP([CAST(NULL AS BLOB)]);

CREATE TYPE mood AS ENUM ('sad', 'ok', 'happy');

CREATE TABLE enums (e mood[]);

INSERT INTO enums VALUES (['happy', 'sad']);

SELECT LIST_GRADE_UP(e) FROM enums;

SELECT LIST_GRADE_UP([[1], [1, 2], NULL, [NULL], [], [1, 2, 3]]);

SELECT LIST_GRADE_UP([{'a': 1}, {'a': 5}, {'a': 3}]);

SELECT LIST_GRADE_UP(RANGE(0, 3000));

SELECT k, LIST_GRADE_UP(k, 'DESC') FROM (VALUES ([1, 2, 3, 4])) AS t(k);

SELECT k, v, MAP(k, v), MAP(k, v)[(LIST_GRADE_UP(k, 'DESC'))[1]] FROM (VALUES ([1, 2, 3, 4], [2, 3, 4, 5])) AS t(k, v);

CREATE TABLE stage AS SELECT * FROM "data/parquet-testing/list_sort_segfault.parquet";

CREATE TABLE health (a TEXT[]);

INSERT INTO health SELECT LIST_GRADE_UP(STR_SPLIT(s, ',')) AS a FROM stage;

SELECT ARRAY_GRADE_UP(ARRAY_VALUE(4, 5, 3), 'ASC');

SELECT ARRAY_GRADE_UP(ARRAY_VALUE(4, 5, 3), 'DESC');

SELECT ARRAY_GRADE_UP(CAST(NULL AS INT[3]));

CREATE TABLE large_lists (l1 INT[], l2 INT[]);

INSERT INTO large_lists VALUES (RANGE(1, 3000), RANGE(2000, 3000));

INSERT INTO large_lists VALUES (RANGE(0, 3000), RANGE(0, 3000));

SELECT LIST_HAS_ANY(l1, l2) FROM large_lists;

SELECT LIST_HAS_ALL(l1, l2) FROM large_lists;

PRAGMA enable_verification;

SELECT LIST_HAS_ANY([1, 2, 3], [2, 3, 4]);

SELECT LIST_HAS_ALL([1, 2, 3], [2, 3, 4]);

CREATE TABLE list_data (l1 INT[], l2 INT[]);

INSERT INTO list_data VALUES (NULL, NULL);

INSERT INTO list_data VALUES (NULL, [1, 2, 3]);

INSERT INTO list_data VALUES ([1, 2, 3], NULL);

INSERT INTO list_data VALUES ([1, 2, 3], [2, 3, NULL]);

INSERT INTO list_data VALUES ([1, 2, NULL], [2, 3, NULL]);

INSERT INTO list_data VALUES ([1, 2, NULL], [NULL, 3, 4]);

INSERT INTO list_data VALUES ([1, 2, 3], [1, 2, 3]);

INSERT INTO list_data VALUES ([1, 2, 3], [1, 2, NULL]);

SELECT LIST_HAS_ANY(l1, l2) FROM list_data;

SELECT LIST_HAS_ALL(l1, l2) FROM list_data;

DROP TABLE list_data;

CREATE TABLE list_of_list (l1 INT[][], l2 INT[][]);

INSERT INTO list_of_list VALUES (NULL, NULL);

INSERT INTO list_of_list VALUES ([[1, 2, 3], NULL, [3, 2, 1]], [[2, 3, 4], NULL, [1, 2, 3]]);

INSERT INTO list_of_list VALUES ([[1, 2, 3], NULL, [3, 2, 1]], [[8, 8, 8], NULL, [8, 8, 8]]);

INSERT INTO list_of_list VALUES ([[1, 2, 3], NULL, [8, 8, 8]], [[8, 8, 8], NULL, [1, 2, 3]]);

SELECT LIST_HAS_ANY(l1, l2) FROM list_of_list;

SELECT LIST_HAS_ALL(l1, l2) FROM list_of_list;

DROP TABLE list_of_list;

CREATE TABLE list_of_strings (l1 TEXT[], l2 TEXT[]);

INSERT INTO list_of_strings VALUES (NULL, NULL);

INSERT INTO list_of_strings VALUES ([NULL, 'a', 'b', 'c'], [NULL, 'b', 'c', 'd']);

INSERT INTO list_of_strings VALUES (['a', 'b', 'c'], ['a', 'b', 'c']);

INSERT INTO list_of_strings VALUES (['here is a very long long string that is def more than 12 bytes', 'and a shorty'], ['here is a very long long string that is def more than 12 bytes', 'here is a very long long string that is def more than 12 bytes', 'c', 'd']);

INSERT INTO list_of_strings VALUES (['here is a very long long string that is def more than 12 bytes', 'and a shorty'], ['here is a very long string that is def more than 12 bytes', 'here is a very long string that is def more than 12 bytes', 'c', 'd']);

INSERT INTO list_of_strings VALUES (['here is a very long long string that is def more than 12 bytes', 'and a shorty'], ['here is a very long long string that is def more than 12 bytes', 'and a shorty']);

SELECT LIST_HAS_ANY(l1, l2) FROM list_of_strings;

SELECT LIST_HAS_ALL(l1, l2) FROM list_of_strings;

SELECT LIST_HAS_ANY(l1) FROM list_of_strings;

SELECT LIST_HAS_ANY(l1, l2, l1) FROM list_of_strings;

SELECT LIST_HAS_ALL(l1) FROM list_of_strings;

SELECT LIST_HAS_ALL(l1, l2, l1) FROM list_of_strings;

SELECT LIST_HAS_ALL([1, 2], 1);

SELECT LIST_HAS_ANY([[1, 2], [2, 4]], ['abc', 'def']);

CREATE TABLE tbl (l1 INT[], l2 INT[]);

INSERT INTO tbl VALUES ([1, 2, 3], [2, 3, 4]);

INSERT INTO tbl VALUES ([1, 2, 3], [2, 3, 4]);

DROP TABLE tbl;
endloop;

CREATE TABLE tbl (l1 INT[], l2 INT[]);

INSERT INTO tbl VALUES ([1, 2, 3, 4, 5, 6], [2, 3, 4]);

INSERT INTO tbl VALUES ([1, 2, 3], [1, 2, 3, 4, 7, 8, 9]);

SELECT LIST_HAS_ANY(l1, l2) FROM tbl;

SELECT LIST_HAS_ALL(l1, l2) FROM tbl;

SELECT LIST_HAS_ALL(l2, l1) FROM tbl;

SELECT l1 && l2 FROM tbl;

SELECT 'hello' && l1 FROM tbl;

SELECT NULL && [NULL];

SELECT l1 && NULL FROM tbl;

SELECT l1 @> l2 FROM tbl;

SELECT l2 @> l1 FROM tbl;

SELECT 'hello' @> l1 FROM tbl;

SELECT l1 @> 'hello' FROM tbl;

SELECT l1 @> NULL FROM tbl;

SELECT NULL @> l1 FROM tbl;

SELECT LIST_INNER_PRODUCT([], []);

SELECT LIST_INNER_PRODUCT([], []);

SELECT LIST_INNER_PRODUCT([], []);

INSERT INTO lists VALUES ([1, 2, 3]), ([1, 2, 4]), ([7, 8, 9]), ([-1, -2, -3]), (NULL);

SELECT LIST_INNER_PRODUCT(l, [1, 2, 3]) FROM lists;

SELECT LIST_INNER_PRODUCT(l, [1, 2, 3]) FROM lists;

SELECT LIST_INNER_PRODUCT(l, [1, 2, 3]) FROM lists;

SELECT LIST_INNER_PRODUCT(l, [1, 2, 3]) FROM lists;

SELECT LIST_INNER_PRODUCT(l, [1, 2, 3]) FROM lists;

PRAGMA enable_verification;

CREATE TABLE TEST2 (i INT[], j INT);

INSERT INTO TEST2 VALUES ([2, 1, 3], 2), ([2, 3, 4], 5), ([1], NULL);

SELECT LIST_POSITION(i, j) FROM TEST2;

CREATE TABLE TEST (i INT[]);

INSERT INTO TEST VALUES ([2, 1, 3]), ([2, 3, 4]), ([1]);

SELECT i, LIST_POSITION(i, 1) FROM TEST;

SELECT i, LIST_POSITION(i, 4.0) FROM TEST;

DROP TABLE TEST;

CREATE TABLE STR_TEST (i TEXT[]);

INSERT INTO STR_TEST VALUES (['a', 'b', 'c']), (['d', 'a', 'e']), (['b']), (['aaaaaaaaaaaaaaaaaaaaaaaa']);

SELECT i, LIST_POSITION(i, 'a') FROM STR_TEST;

SELECT i, LIST_POSITION(i, 'aaaaaaaaaaaaaaaaaaaaaaaa') FROM STR_TEST;

SELECT i, LIST_POSITION(i, '0') FROM STR_TEST;

SELECT i, LIST_POSITION(i, NULL) FROM STR_TEST;

DROP TABLE STR_TEST;

SELECT LIST_POSITION([7, 2, 5], 7);

SELECT LIST_POSITION([], 7);

SELECT LIST_POSITION([1, 2, 3], 1.0);

SELECT LIST_POSITION([1.0, 2.0, 3.0, 4.0], 1);

SELECT LIST_POSITION([1, 2, 3], 4.0);

SELECT LIST_POSITION([1.0, 2.0, 3.0], 4);

SELECT LIST_POSITION([1.0, 2.0, 3.0], 'a');

SELECT LIST_POSITION(CAST([1.0, 2.0, 3.0] AS TEXT[]), 'a');

SELECT LIST_POSITION('a', 'a');

SELECT LIST_POSITION(NULL, NULL);

SELECT LIST_POSITION([7], 5);

SELECT LIST_POSITION([1, 2, 3, 4], 4);

SELECT LIST_POSITION([1, 2, 3, 4], 5);

SELECT LIST_POSITION([1.0, 2.0, 3.0, 4.0], 5.0);

SELECT LIST_POSITION([1.0, 2.0, 3.0, 4.0], 4.0);

SELECT LIST_POSITION([TRUE, FALSE], TRUE);

SELECT LIST_POSITION([TRUE, TRUE], FALSE);

SELECT LIST_POSITION(['test', 'notest'], 'notest');

SELECT LIST_POSITION(['test', 'notest'], 'a');

SELECT LIST_POSITION(NULL, 1);

SELECT LIST_POSITION([1], NULL);

SELECT LIST_POSITION([NULL], NULL);

SELECT LIST_POSITION([NULL, 1], NULL);

SELECT LIST_POSITION([NULL, 1], 1);

SELECT LIST_POSITION([NULL, 0], 1);

SELECT LIST_POSITION([], NULL);

SELECT LIST_POSITION([NULL, 7], 7);

SELECT LIST_POSITION([NULL, 7], 7);

SELECT LIST_POSITION([[1, 2, 3], [1], [1, 2, 3]]);

SELECT LIST_POSITION(1);

SELECT LIST_POSITION(1, 1);

SELECT LIST_POSITION(1, 1);

SELECT LIST_POSITION(1, 1);

INSERT INTO test0 VALUES ([2]), ([1]), ([1, 2]), ([]), ([2, 2]), ([NULL]), ([2, 3]);

INSERT INTO test0 VALUES ([2]), ([1]), ([1, 2]), ([]), ([2, 2]), ([NULL]), ([2, 3]);

DROP TABLE test0;

DROP TABLE test0;

SELECT LIST_POSITION([[1, 2, 3], [1]], [1]);

SELECT LIST_POSITION([[1, 2, 3], [1]], [2]);

SELECT LIST_POSITION([[1, 2, 3], [1]], [1, 2, 3]);

SELECT LIST_POSITION([[1, 3], [1]], [1, 2, 3]);

SELECT LIST_POSITION([[1, 3], [1], [1, 2, 3]], [1, 2, 3]);

SELECT LIST_POSITION([[NULL], [1], [1, 2, 3]], NULL);

SELECT LIST_POSITION([[NULL], [1], [1, 2, 3]], [NULL]);

SELECT LIST_POSITION([[1, NULL], [1], [1, 2, 3]], [1, NULL]);

SELECT LIST_POSITION([[1, NULL], [1], [1, 2, 3]], [0, NULL]);

SELECT LIST_POSITION([{'a': 1}, {'a': 2}], {'a': 2});

SELECT LIST_POSITION([{'a': 1}, {'a': 2}], {'a': 3});

SELECT LIST_POSITION([{'a': 1, 'b': 3}, {'a': 2, 'b': 2}], {'a': 2, 'b': 2});

SELECT LIST_POSITION([{'a': 1, 'b': 3}, {'a': 2, 'b': 2}], {'a': 1, 'b': 2});

SELECT LIST_POSITION([MAP([1], [2])], MAP([1], [2]));

SELECT LIST_POSITION([MAP([1], [2])], MAP([1], [3]));

SELECT LIST_POSITION([MAP([1], [2])], MAP([1], [3]));

SELECT LIST_POSITION([MAP([1], [2])], MAP([1], [3]));

INSERT INTO test0 VALUES ([2.0]), ([1.0]), ([1.0, 2.0]), ([]), ([2.0, 2.0]), ([NULL]), ([2.0, 3.0]);

SELECT LIST_POSITION(i, 1.0) FROM test0;

DROP TABLE test0;

PRAGMA enable_verification;

SELECT LIST_POSITION([CAST('NaN' AS DOUBLE)], CAST('NaN' AS DOUBLE));

SELECT LIST_POSITION([NULL, 0, CAST('NaN' AS DOUBLE)], CAST('NaN' AS DOUBLE));

SELECT LIST_CONTAINS([NULL, 0, CAST('NaN' AS DOUBLE)], CAST('NaN' AS DOUBLE));

SELECT LIST_POSITION([[[NULL, 42]]], [[NULL, 42]]);

PRAGMA enable_verification;

SELECT LIST_RESIZE([1, 2, 4], 2);

CREATE TABLE tbl (a INT[], b INT);

INSERT INTO tbl VALUES ([5, 4, 3], 3);

INSERT INTO tbl VALUES ([1, 2, 3], 5);

INSERT INTO tbl VALUES (NULL, 8);

INSERT INTO tbl VALUES ([10, 11, 12], 2);

SELECT LIST_RESIZE(a, b) FROM tbl;

SELECT LIST_RESIZE([], 2);

CREATE TABLE string_tbl (a TEXT[], b INT);

INSERT INTO string_tbl VALUES (['abc', 'def'], 3);

INSERT INTO string_tbl VALUES (['d', 'ef', 'ghij'], 8);

INSERT INTO string_tbl VALUES (['lmnopqrs'], 5);

INSERT INTO string_tbl VALUES (['here is a little story about a duck,', 'whose name is harold.', 'He is a cool duck who lives in a cool world'], 5);

SELECT LIST_RESIZE(a, b) FROM string_tbl;

SELECT LIST_RESIZE(NULL, 1, 1);

SELECT LIST_RESIZE(NULL, 2, NULL);

SELECT LIST_RESIZE(NULL, NULL, NULL);

SELECT LIST_RESIZE([1, 2, 3], NULL);

CREATE TABLE nulls (l INT[], b INT);

INSERT INTO nulls VALUES ([1, 2, 3], 2), (NULL, 6), ([], 4), ([NULL, NULL, 5, 6, NULL], 6);

SELECT LIST_RESIZE(l, b) FROM nulls;

SELECT * FROM (SELECT LIST_RESIZE(NULL, 1, 1));

SELECT LIST_RESIZE([[1], [1, 2], NULL, [NULL], [], [1, 2, 3]], 3);

CREATE TABLE list_tbl (a INT[][], b INT);

INSERT INTO list_tbl VALUES ([[1, 2, 3], [4, 5, 6]], 3);

INSERT INTO list_tbl VALUES ([[7, 8, 9], [10, NULL, 6], [9, 8, 7]], 5);

INSERT INTO list_tbl VALUES ([[1, 2, 3], NULL, [4, 5, 6]], 2);

SELECT LIST_RESIZE(a, b) FROM list_tbl;

SELECT LIST_RESIZE([{'i': 1, 'j': 2}, NULL, {'i': 3, 'j': 4}], 2);

SELECT LIST_RESIZE([{'i': 1, 'j': [2, 3]}, NULL, {'i': 1, 'j': [2, 3]}], 4);

SELECT LIST_RESIZE([{'i': 1, 'j': [{'a': 1, 'b': 2}, {'a': 3, 'b': 4}]}, NULL, {'i': 1, 'j': [{'a': 1, 'b': 2}, {'a': 3, 'b': 4}]}], 4);

SELECT LIST_RESIZE([{'i': 1, 'j': [{'a': 1, 'b': [2, 3]}, {'a': 3, 'b': [4, 5]}]}, NULL, {'i': 1, 'j': [{'a': 1, 'b': [2, 3]}, {'a': 3, 'b': [4, 5]}]}], 4);

SELECT LIST_RESIZE([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9]], [[10, 11, 12], [13, 14, 15]]], 2);

SELECT LIST_RESIZE([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], NULL], NULL, [NULL], [[10, 11, 12], [13, 14, 15]]], 8);

SELECT LIST_RESIZE([1, 2, 3], LENGTH(LIST_RESIZE([1, 2, 3], 2)));

SELECT LIST_RESIZE(LIST_FILTER([1, 2, 3, 4, 5, 6], x -> x > 1), 4);

SELECT LIST_RESIZE([1, 2], 3, 4);

CREATE TABLE def (tbl INT[], b INT, d INT);

INSERT INTO def VALUES ([1, 2, 3], 5, 4), ([4, 5, 6], 6, NULL), ([7, 8, NULL], 3, 10);

SELECT LIST_RESIZE(tbl, b, d) FROM def;

SELECT LIST_RESIZE([1, 2], 3, NULL);

SELECT LIST_RESIZE([{'i': 1, 'j': [2, 3]}, NULL, {'i': 1, 'j': [2, 3]}], 4, {'i': 5, 'j': [10, 10]});

SELECT LIST_RESIZE([{'i': 1, 'j': [2, 3]}, NULL, {'i': 1, 'j': [2, 3]}], 6, NULL);

SELECT LIST_RESIZE(RANGE(0, 10000), 4000);

SELECT LIST_RESIZE([1, 2, 3], 4000);

CREATE TABLE bool_table (a BOOLEAN[], b INT);

INSERT INTO bool_table VALUES ([TRUE, FALSE, TRUE], 1);

INSERT INTO bool_table VALUES ([FALSE, TRUE, FALSE], 2);

INSERT INTO bool_table VALUES ([TRUE, TRUE, NULL], 3);

SELECT LIST_RESIZE(a, b) FROM bool_table;

SELECT LIST_RESIZE([TRUE], 2);

SELECT LIST_RESIZE([FALSE], 2);

SELECT LIST_RESIZE([NULL], 2);

PREPARE q1 as select list_resize(?, ?);

PREPARE q1 as select list_resize(?, ?);

EXECUTE ${q}([1, 2, 3], 4);

EXECUTE ${q}([1, 2, 3], 2);

EXECUTE ${q}([1, 2, 3], 0);

EXECUTE ${q}([1, 2, 3], NULL);

EXECUTE ${q}([1, 2, 3], 1.4);

EXECUTE ${q}([2], 2::TINYINT);

EXECUTE ${q}([1, 2, 3], -1);

SELECT LIST_RESIZE([1, 2, 3], 9999999999999999999);

SELECT LIST_RESIZE([1, 2, 3], 4000999999999999999);

SELECT LIST_RESIZE(CAST([1, 2, 3] AS BIGINT[]), 5, 42);

PRAGMA enable_verification;

CREATE TABLE test_table (id INT, data STRUCT(a INT, b DOUBLE, c TEXT)[]);

INSERT INTO test_table SELECT range, [{'a': 1, 'b': 1.1, 'c': 'one'}, {'a': 2, 'b': 2.2, 'c': 'two'}, {'a': 3, 'b': 3.3, 'c': 'three'}] FROM RANGE(0, 1001);

PRAGMA enable_verification;

PREPARE q1 as select list_resize(?, ?);

PREPARE q1 as select list_resize(?, ?);

EXECUTE ${q}([1, 2, 3], -1);

EXECUTE ${q}([1, 2, 3], 'a');

EXECUTE ${q}('cici n est pas een list', 2);

EXECUTE ${q}([1, 2, 3], 'huh');

EXECUTE ${q}();

EXECUTE ${q}([1, 2, 3]);

PREPARE q3 as select list_resize(?, ?, ?);

PREPARE q3 as select list_resize(?, ?, ?);

EXECUTE ${q}([1, 2, 3], 5, 'abc');

EXECUTE ${q}([1, 2, 3], 2, 3, 4);

EXECUTE ${q}([1, 2, 3], 1, [1, 2, 3]);

PRAGMA enable_verification;

SELECT LIST_RESIZE(c, 3) FROM TEST_VECTOR_TYPES(CAST(NULL AS INT[]), FALSE) AS t(c);

SELECT LIST_RESIZE(c, 1) FROM TEST_VECTOR_TYPES(CAST(NULL AS INT[]), FALSE) AS t(c);

SELECT LIST_RESIZE(c, 1) FROM TEST_VECTOR_TYPES(CAST(NULL AS INT[]), FALSE) AS t(c);

PRAGMA enable_verification;

SELECT LIST_REVERSE(NULL);

SELECT LIST_REVERSE([]);

SELECT LIST_REVERSE([NULL]);

SELECT LIST_REVERSE([1, 42, 2]);

SELECT ARRAY_REVERSE([1, 42, 2]);

SELECT LIST_REVERSE([1, 42, NULL, 2]);

SELECT LIST_REVERSE(LIST_REVERSE([1, 3, 3, 42, 117, 69, NULL]));

SELECT LIST_REVERSE([[1, 2, 42], [3, 4]]);

PREPARE q1 as select list_reverse(?);
EXECUTE q1([5, 42, 3]);

CREATE OR REPLACE TABLE tbl_big AS SELECT RANGE(0, 5000) AS list;

SELECT ARRAY_SORT((list)) = LIST_REVERSE(list) FROM tbl_big;

CREATE TABLE tbl (id INT, list INT[]);

INSERT INTO tbl VALUES (1, [NULL, 3, 117, 42, 1]), (2, NULL), (3, [1, 8, 9]), (4, NULL), (5, NULL), (6, [NULL]);

SELECT id, LIST_REVERSE(list) FROM tbl ORDER BY id;

DROP TABLE tbl;

CREATE TABLE tbl2 (id INT, list INT[]);

INSERT INTO tbl2 VALUES (1, [1, 2, 3]), (1, [4, 5, 6]), (3, [7, 8, 9]);

SELECT id, LIST_REVERSE(list) FROM tbl2 ORDER BY id;

DROP TABLE tbl2;

SELECT LIST_REVERSE(LIST_REVERSE(COLUMNS(['int_array', 'varchar_array', 'nested_int_array', 'array_of_structs', 'timestamp_array', 'double_array', 'date_array', 'timestamptz_array']))) IS NOT DISTINCT FROM COLUMNS(['int_array', 'varchar_array', 'nested_int_array', 'array_of_structs', 'timestamp_array', 'double_array', 'date_array', 'timestamptz_array']) FROM TEST_ALL_TYPES();

SELECT LIST_REVERSE(test_vector) FROM TEST_VECTOR_TYPES(CAST(NULL AS INT[]), FALSE);

SELECT LIST_REVERSE(test_vector) FROM TEST_VECTOR_TYPES(CAST(NULL AS INT[]), TRUE);

SELECT TRUE FROM TEST_VECTOR_TYPES(CAST(NULL AS INT[]), FALSE);

SELECT ARRAY_SORT((list)) IS NOT DISTINCT FROM list FROM (SELECT LIST_REVERSE(test_vector) AS list FROM TEST_VECTOR_TYPES(CAST(NULL AS INT[]), FALSE));

SELECT ARRAY_SORT((list)) IS NOT DISTINCT FROM list FROM (SELECT LIST_REVERSE(test_vector) AS list FROM TEST_VECTOR_TYPES(CAST(NULL AS INT[]), TRUE));

SELECT LIST_REVERSE();

SELECT LIST_REVERSE(42);

SELECT LIST_REVERSE([1, 3, 2, 42, 117, NULL]);

CREATE TABLE palindromes (s TEXT);

INSERT INTO palindromes VALUES ('racecar'), ('civic'), ('defied'), ('repaper'), ('kayak'), ('rotator'), ('tattarrattat'), ('saippuakivikauppias'), ('malayalam');

SELECT LIST_AGGR(LIST_REVERSE(STR_SPLIT(s, '')), 'string_agg', '') FROM palindromes ORDER BY s;

DROP TABLE palindromes;

WITH example AS (SELECT [1, 2, 3] AS arr UNION ALL SELECT [4, 5] AS arr UNION ALL SELECT [] AS arr) SELECT LIST_REVERSE(arr) AS reverse_arr FROM example ORDER BY LENGTH(reverse_arr) DESC;

SELECT LIST_REVERSE();

SELECT LIST_REVERSE(*);

SELECT LIST_REVERSE([1, 2], 2);

SELECT LIST_REVERSE([1, 42, 39, 58]);

SELECT LIST_REVERSE([1, NULL, 42, 39, NULL, 58]);

SELECT LIST_REVERSE([1, 42, -39, 58, -1, 18]);

SELECT LIST_REVERSE(LIST_REVERSE([11, -100, 678]));

CREATE OR REPLACE TABLE integers AS SELECT LIST(i) AS i FROM RANGE(1, 10, 1) AS t1(i);

INSERT INTO integers VALUES ([NULL]), (NULL), ([]);

SELECT LIST_REVERSE(i) FROM integers;

SELECT (i).list_reverse() FROM integers;

SELECT LIST_REVERSE([[1], [1, 2], NULL, [NULL], [], [1, 2, 3]]);

SELECT ([[1], [1, 2], NULL, [NULL], [], [1, 2, 3]]).list_reverse();

CREATE OR REPLACE TABLE lists AS SELECT range % 4 AS g, LIST(range) AS l FROM RANGE(0, 10000) GROUP BY range % 4;

CREATE OR REPLACE TABLE lists AS SELECT range % 4 AS g, LIST(range) AS l FROM RANGE(0, 10000) GROUP BY range % 4;

WITH example AS (SELECT [1, 2, 3] AS arr UNION ALL SELECT [4, 5] AS arr UNION ALL SELECT [] AS arr) SELECT LIST_REVERSE(arr) AS reverse_arr FROM example ORDER BY LENGTH(reverse_arr) DESC;

PRAGMA enable_verification;

PRAGMA enable_verification;

SELECT LIST_REVERSE(["${colname}"]) FROM all_types;
endloop;

CREATE TABLE tbl AS SELECT RANGE(0, 5000) AS list;

SELECT ARRAY_SORT(RANGE(0, 5000));

SELECT LIST_REVERSE(list) FROM tbl;

SELECT LIST_REVERSE(list) FROM tbl;

PRAGMA enable_verification;

PRAGMA enable_verification;

SELECT LIST_REVERSE(["${colname}"]) FROM all_types;
endloop;

CREATE TABLE tbl AS SELECT RANGE(0, 5000) AS list;

SELECT ARRAY_SORT(RANGE(0, 5000));

SELECT LIST_REVERSE(list) FROM tbl;

PRAGMA enable_verification;

CREATE TABLE integers (i INT[]);

INSERT INTO integers VALUES ([1, 2, 3]), ([4, 5, 6]), (NULL), ([]), ([NULL]), ([4]);

CREATE TABLE selections (j INT[]);

INSERT INTO selections VALUES ([2, 1]), ([3, 1, 3]), ([]), (NULL);

SELECT LIST_SELECT([], []);

SELECT LIST_SELECT(NULL, []);

SELECT LIST_SELECT([], NULL);

SELECT LIST_SELECT([1, 2, 3], [1, 2, 3]);

SELECT LIST_SELECT([1, 2, 3], [3, 2, 3, 3]);

SELECT LIST_SELECT([1, 2, 3], [1, 2]);

SELECT LIST_SELECT([1, 2, 3], [3, 2, 1, 4]);

SELECT LIST_SELECT([1, 2, 3], [3, 2, 3, -1]);

SELECT LIST_SELECT(i, [1, 2]) FROM integers;

SELECT LIST_SELECT(i, j) FROM integers, selections ORDER BY i, j;

SELECT LIST_SELECT([1, 2, 3], [NULL]);

SELECT LIST_SELECT(i, [2, 3, 4]) FROM integers;

SELECT LIST_SELECT([TRUE, FALSE, NULL, TRUE, TRUE, NULL], [1, 3, 2]);

SELECT LIST_SELECT([CAST(NULL AS BOOLEAN)], [1]);

SELECT LIST_SELECT(['aa', 'a', 'cd', NULL, '42'], [4, 5, 2, 1, 3]);

SELECT LIST_SELECT([CAST(NULL AS TEXT)], [1]);

SELECT LIST_SELECT([CAST(NULL AS TEXT)], [1]);

SELECT LIST_SELECT([CAST(NULL AS TEXT)], [1]);

SELECT LIST_SELECT([CAST(NULL AS TEXT)], [1]);

SELECT LIST_SELECT([CAST(NULL AS TEXT)], [1]);

SELECT LIST_SELECT([CAST('2021-08-20' AS DATE)], [1]);

SELECT LIST_SELECT([CAST('14:59:37' AS TIME)], [1]);

SELECT LIST_SELECT([CAST('2021-08-20' AS TIMESTAMP)], [1]);

SELECT LIST_SELECT([CAST('2021-08-20' AS TIMESTAMP_S)], [1]);

SELECT LIST_SELECT([CAST('2021-08-20 00:00:00.123' AS TIMESTAMP_MS)], [1]);

SELECT LIST_SELECT([CAST('2021-08-20 00:00:00.123456' AS TIMESTAMP_NS)], [1]);

SELECT LIST_SELECT([CAST('14:59:37' AS TIMETZ)], [1]);

SELECT LIST_SELECT([CAST('2021-08-20' AS TIMESTAMPTZ)], [1]);

SELECT LIST_SELECT([INTERVAL '1' YEAR], [1]);

SELECT LIST_SELECT([INTERVAL '1' YEAR], [1]);

SELECT LIST_SELECT([CAST('{a: 1}' AS BLOB), CAST('{a: 3}' AS BLOB)], [1, 2]);

SELECT LIST_SELECT([CAST(NULL AS BLOB)], [1]);

CREATE TYPE mood AS ENUM ('sad', 'ok', 'happy');

CREATE TABLE enums (e mood[]);

INSERT INTO enums VALUES (['happy', 'sad']);

SELECT LIST_SELECT(e, [2, 1]) FROM enums;

SELECT LIST_SELECT([[1], [1, 2], NULL, [NULL], [], [1, 2, 3]], [3, 5, 1, 2, 6, 4]);

SELECT LIST_SELECT([{'a': 1}, {'a': 5}, {'a': 3}], [1, 3, 2]);

CREATE TABLE lists AS SELECT range % 4 AS g, LIST(range) AS l FROM RANGE(0, 6000) GROUP BY range % 4;

WITH cte0 AS (SELECT g, LIST_SELECT(l, RANGE(0, 5)) AS l FROM lists), cte1 AS (SELECT g, UNNEST(l) AS i FROM cte0) SELECT COUNT(*) FROM cte1;

SELECT LIST_SELECT(RANGE(0, 6000), RANGE(0, 6000));

SELECT i FROM integers WHERE [4] = LIST_SELECT(i, [1]);

SELECT (LIST_SELECT([1, 2, 3], [2, 3]))[1];

SELECT LIST_SELECT([1, 2], 'hello');

SELECT LIST_SELECT([1, 2], ['hello']);

CREATE TABLE all_types AS SELECT * EXCLUDE (small_enum, medium_enum, large_enum) FROM TEST_ALL_TYPES();

SELECT LIST_SELECT(c34, 'enum_0') FROM all_types AS t43(c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24, c25, c26, c27, c28, c29, c30, c31, c32, c33, c34, c35, c36, c37, c38, c39, c40, c41, c42), all_types AS t86(c44, c45, c46, c47, c48, c49, c50, c51, c52, c53, c54, c55, c56, c57, c58, c59, c60, c61, c62, c63, c64, c65, c66, c67, c68, c69, c70, c71, c72, c73, c74, c75, c76, c77, c78, c79, c80, c81, c82, c83, c84, c85);

SELECT LIST_SELECT(ARRAY_VALUE('1', NULL), [1, 2, 3]);

PRAGMA enable_verification;

PRAGMA default_order = 'ASC';

PRAGMA default_order = 'ASC';

PRAGMA default_order = 'ASC';

PRAGMA default_order = 'ASC';

PRAGMA default_order = 'ASC';

PRAGMA default_order = 'ASC';

PRAGMA default_order = 'ASC';

PRAGMA default_order = 'ASC';

PRAGMA default_order = 'ASC';

PRAGMA default_order = 'ASC';

PRAGMA default_order = 'ASC';

SELECT ARRAY_SORT([1, 2]);

SELECT ARRAY_SORT([1, 2]);

SELECT ARRAY_SORT([1, 2]);

SELECT ARRAY_SORT(ARRAY_SORT([1, 2]));

SELECT ARRAY_REVERSE_SORT([1, 2]);

SELECT ARRAY_REVERSE_SORT(ARRAY_REVERSE_SORT([1, 2]));

SELECT ARRAY_SORT([1, 3, NULL, 5, NULL, -5]);

SELECT ARRAY_REVERSE_SORT([1, 3, NULL, 5, NULL, -5]);

CREATE TABLE integers AS SELECT LIST(i) AS i FROM RANGE(1, 10, 1) AS t1(i);

INSERT INTO integers VALUES ([NULL]), (NULL), ([]);

SELECT ARRAY_SORT(i) FROM integers;

SELECT ARRAY_REVERSE_SORT(i) FROM integers;

SELECT ARRAY_REVERSE_SORT(i) FROM integers;

SELECT ARRAY_REVERSE_SORT(i) FROM integers;

SELECT ARRAY_REVERSE_SORT(l);

SELECT ARRAY_REVERSE_SORT(l);

SELECT ARRAY_REVERSE_SORT(l);

SELECT ARRAY_SORT([1, 2]);

SELECT ARRAY_REVERSE_SORT([1, 2]);

SELECT ARRAY_SORT([1, 3, NULL, 2]);

SELECT ARRAY_SORT([1, 3, NULL, 2]);

SELECT ARRAY_SORT([1, 3, NULL, 2]);

SELECT ARRAY_SORT([1, 3, NULL, 2]);

SELECT ARRAY_SORT([1, 3, NULL, 2]);

SELECT ARRAY_SORT([1, 3, NULL, 2]);

SELECT ARRAY_SORT([1, 3, NULL, 2]);

SELECT ARRAY_SORT([1, 3, NULL, 2]);

SELECT ARRAY_REVERSE_SORT([1, 3, NULL, 2]);

SELECT ARRAY_REVERSE_SORT([1, 3, NULL, 2]);

SELECT ARRAY_SORT([TRUE, FALSE, NULL, TRUE, TRUE, NULL]);

SELECT ARRAY_SORT([CAST(NULL AS BOOLEAN)]);

SELECT ARRAY_SORT(['aa', 'a', 'cd', NULL, '42']);

SELECT ARRAY_SORT([CAST(NULL AS TEXT)]);

SELECT ARRAY_SORT([CAST(NULL AS TEXT)]);

SELECT ARRAY_SORT([CAST(NULL AS TEXT)]);

SELECT ARRAY_SORT([CAST(NULL AS TEXT)]);

SELECT ARRAY_SORT([CAST(NULL AS TEXT)]);

SELECT ARRAY_SORT([CAST('2021-08-20' AS DATE)]);

SELECT ARRAY_SORT([CAST('14:59:37' AS TIME)]);

SELECT ARRAY_SORT([CAST('2021-08-20' AS TIMESTAMP)]);

SELECT ARRAY_SORT([CAST('2021-08-20' AS TIMESTAMP_S)]);

SELECT ARRAY_SORT([CAST('2021-08-20 00:00:00.123' AS TIMESTAMP_MS)]);

SELECT ARRAY_SORT([CAST('2021-08-20 00:00:00.123456' AS TIMESTAMP_NS)]);

SELECT ARRAY_SORT([CAST('14:59:37' AS TIMETZ)]);

SELECT ARRAY_SORT([CAST('2021-08-20' AS TIMESTAMPTZ)]);

SELECT ARRAY_SORT([INTERVAL '1' YEAR]);

SELECT ARRAY_SORT([INTERVAL '1' YEAR]);

SELECT ARRAY_SORT([CAST('{a: 1}' AS BLOB), CAST('{a: 3}' AS BLOB)]);

SELECT ARRAY_SORT([CAST(NULL AS BLOB)]);

CREATE TYPE mood AS ENUM ('sad', 'ok', 'happy');

CREATE TABLE enums (e mood[]);

INSERT INTO enums VALUES (['happy', 'sad']);

SELECT ARRAY_SORT(e) FROM enums;

SELECT ARRAY_SORT([[1], [1, 2], NULL, [NULL], [], [1, 2, 3]]);

SELECT ARRAY_SORT([{'a': 1}, {'a': 5}, {'a': 3}]);

CREATE TABLE lists AS SELECT range % 4 AS g, LIST(range) AS l FROM RANGE(0, 10000) GROUP BY range % 4;

CREATE TABLE lists AS SELECT range % 4 AS g, LIST(range) AS l FROM RANGE(0, 10000) GROUP BY range % 4;

SELECT k, ARRAY_SORT(k) FROM (VALUES ([1, 2, 3, 4])) AS t(k);

SELECT k, v, MAP(k, v), MAP(k, v)[(ARRAY_SORT(k))[1]] FROM (VALUES ([1, 2, 3, 4], [2, 3, 4, 5])) AS t(k, v);

SELECT id, LIST(DISTINCT foo ORDER BY foo) FROM (VALUES (1, '10'), (1, '15'), (2, '10')) AS v(id, foo) GROUP BY ALL ORDER BY id;

SELECT id, LIST(DISTINCT foo ORDER BY foo) FROM (VALUES (1, '10'), (1, '10'), (1, '15'), (2, '10')) AS v(id, foo) GROUP BY id ORDER BY id;

SELECT id, LIST(foo ORDER BY foo) FROM (VALUES (1, '10'), (1, '10'), (1, '15'), (2, '10')) AS v(id, foo) GROUP BY id ORDER BY id;

SELECT id, LIST(DISTINCT foo ORDER BY foo) FROM (VALUES (1, '10'), (1, '10'), (1, '15'), (2, '10')) AS v(id, foo) GROUP BY id ORDER BY id;

SELECT id, LIST(DISTINCT foo ORDER BY bar) FROM (VALUES (1, '10', 2), (1, '15', 1), (2, '10', 1)) AS v(id, foo, bar) GROUP BY ALL ORDER BY id;

SELECT LIST(DISTINCT v % 2 ORDER BY v) AS c2 FROM GENERATE_SERIES(0, 20) AS s(v, i);

CREATE TABLE stage AS SELECT * FROM "data/parquet-testing/list_sort_segfault.parquet";

CREATE TABLE health (a TEXT[]);

PRAGMA enable_verification;

CREATE OR REPLACE TABLE test1 AS (SELECT 'new_customers' AS child, 'dim_model_7' AS parent UNION ALL SELECT 'exposure_1' AS child, 'dim_model_7' AS parent UNION ALL SELECT 'exposure_1' AS child, 'exposure_1' AS parent UNION ALL SELECT 'fct_model_6' AS child, 'fct_model_6' AS parent UNION ALL SELECT 'exposure_1' AS child, 'fct_model_6' AS parent UNION ALL SELECT 'report_1' AS child, 'fct_model_6' AS parent UNION ALL SELECT 'report_2' AS child, 'fct_model_6' AS parent UNION ALL SELECT 'report_3' AS child, 'fct_model_6' AS parent UNION ALL SELECT 'fct_model_9' AS child, 'fct_model_9' AS parent UNION ALL SELECT 'stg_model_5' AS child, 'fct_model_9' AS parent UNION ALL SELECT 'int_model_4' AS child, 'int_model_4' AS parent UNION ALL SELECT 'int_model_5' AS child, 'int_model_4' AS parent UNION ALL SELECT 'dim_model_7' AS child, 'int_model_4' AS parent UNION ALL SELECT 'new_customers' AS child, 'int_model_4' AS parent UNION ALL SELECT 'exposure_1' AS child, 'int_model_4' AS parent UNION ALL SELECT 'int_model_5' AS child, 'int_model_5' AS parent UNION ALL SELECT 'dim_model_7' AS child, 'int_model_5' AS parent UNION ALL SELECT 'new_customers' AS child, 'int_model_5' AS parent UNION ALL SELECT 'exposure_1' AS child, 'int_model_5' AS parent UNION ALL SELECT 'model_8' AS child, 'model_8' AS parent UNION ALL SELECT 'new_customers' AS child, 'new_customers' AS parent UNION ALL SELECT 'report_1' AS child, 'report_1' AS parent UNION ALL SELECT 'report_2' AS child, 'report_2' AS parent UNION ALL SELECT 'report_3' AS child, 'report_3' AS parent);

SELECT child, COUNT(*) AS cnt, ARRAY_SORT(LIST(parent)) AS source_parents FROM test1 GROUP BY 1 HAVING cnt > 1;

SELECT LIST_UNIQUE(NULL);

SELECT LIST_UNIQUE([NULL]);

SELECT LIST_UNIQUE([]);

SELECT LIST_UNIQUE([]) WHERE 1 = 0;

SELECT LIST_UNIQUE();

SELECT LIST_UNIQUE(*);

SELECT LIST_UNIQUE([1, 2], 2);

SELECT LIST_UNIQUE(CAST(NULL AS TINYINT));

SELECT LIST_UNIQUE([1, 1, 2, 2, 2, 3]);

SELECT LIST_UNIQUE([1, 1, NULL, 2, 2, 2, 3, NULL, NULL]);

SELECT LIST_UNIQUE([1, 1, -5, 10, 10, 2]);

CREATE TABLE integers (l INT[]);

INSERT INTO integers VALUES ([1, 1, 2, 2, 2, 3]), ([1, NULL, 1, NULL]);

INSERT INTO integers VALUES ([NULL]), (NULL), ([]);

SELECT LIST_UNIQUE(l) FROM integers;

SELECT ARRAY_UNIQUE([1, 2, 2, NULL]);

SELECT LIST_UNIQUE([TRUE, TRUE, FALSE, NULL]);

SELECT LIST_UNIQUE([CAST(NULL AS BOOLEAN)]);

SELECT LIST_UNIQUE(['aa', 'aa', 'cd', NULL, '42']);

SELECT LIST_UNIQUE([CAST(NULL AS TEXT)]);

SELECT LIST_UNIQUE([CAST(NULL AS TEXT)]);

SELECT LIST_UNIQUE([CAST(NULL AS TEXT)]);

SELECT LIST_UNIQUE([CAST(NULL AS TEXT)]);

SELECT LIST_UNIQUE([CAST(NULL AS TEXT)]);

SELECT LIST_UNIQUE([CAST('2021-08-20' AS DATE)]);

SELECT LIST_UNIQUE([CAST('14:59:37' AS TIME)]);

SELECT LIST_UNIQUE([CAST('2021-08-20' AS TIMESTAMP)]);

SELECT LIST_UNIQUE([CAST('2021-08-20' AS TIMESTAMP_S)]);

SELECT LIST_UNIQUE([CAST('2021-08-20 00:00:00.123' AS TIMESTAMP_MS)]);

SELECT LIST_UNIQUE([CAST('2021-08-20 00:00:00.123456' AS TIMESTAMP_NS)]);

SELECT LIST_UNIQUE([CAST('14:59:37' AS TIMETZ)]);

SELECT LIST_UNIQUE([CAST('2021-08-20' AS TIMESTAMPTZ)]);

SELECT LIST_UNIQUE([INTERVAL '1' YEAR]);

SELECT LIST_UNIQUE([INTERVAL '1' YEAR]);

CREATE TYPE mood AS ENUM ('sad', 'ok', 'happy');

CREATE TABLE enums (e mood[]);

INSERT INTO enums VALUES (['happy', 'ok']);

SELECT LIST_UNIQUE(e) FROM enums;

SELECT LIST_UNIQUE(['a', 'b、c', 'a']);

PRAGMA enable_verification;

SELECT [[1, 7], [2], [3]];

SELECT [[1, 7], [2], [3], NULL];

SELECT [[1, 7], [2], NULL, [3]];

SELECT [[1, 7], [NULL], [2], [3]];

CREATE TABLE test_table (c1 INT[], c2 INT[], c3 INT[]);

INSERT INTO test_table VALUES ([1, 1], [2, 2], [3]);

INSERT INTO test_table VALUES ([4], [5, 5, 5], [6, 6]);

INSERT INTO test_table VALUES ([7, 7, 7, 7], [8], [9, 9, 9]);

INSERT INTO test_table VALUES ([], [], []);

INSERT INTO test_table VALUES ([-1, -1, NULL], NULL, [-2, -2]);

SELECT [c1, c2, c3] FROM test_table;

SELECT [ROW(1, 1), ROW(2, 2), ROW(3, 3)];

SELECT [ROW(1, 1), ROW(2, 2), ROW(3, 3), NULL];

SELECT [ROW(1, 1), ROW(NULL, 2), NULL, ROW(3, 3)];

SELECT [ROW(1, 1), ROW(NULL, 2), NULL, ROW(3, 3)];

INSERT INTO STRUCT_TABLE VALUES ([ROW(1, 1), ROW(2, 2)], [ROW(3, 3), ROW(4, 4)], [ROW(5, 5), ROW(6, 6)]);

INSERT INTO STRUCT_TABLE VALUES ([ROW(7, 7), ROW(8, 8)], [ROW(9, 9)], [ROW(10, 10), ROW(11, 11), ROW(12, 12)]);

INSERT INTO STRUCT_TABLE VALUES ([ROW(13, 13)], [ROW(14, 14), ROW(15, 15), ROW(16, 16)], [ROW(17, 17), ROW(18, 18)]);

INSERT INTO STRUCT_TABLE VALUES ([NULL, ROW(20, 20)], NULL, [ROW(23, 23), ROW(24, 24), ROW(25, 25), ROW(26, 26)]);

SELECT [a, b, c] FROM struct_table;

SELECT [['a', 'a'], ['b', 'b', 'b'], ['c']];

SELECT [['a', 'a'], ['b', 'b', 'b'], ['c'], NULL];

SELECT [['a', 'a'], ['b', 'b', NULL], NULL, ['c']];

CREATE TABLE string_table (a TEXT[], b TEXT[], c TEXT[]);

INSERT INTO string_table VALUES (['a', 'a'], ['b', 'b', 'b'], ['c']);

INSERT INTO string_table VALUES (['d'], ['e', 'e', 'e', 'e'], ['f', 'f']);

INSERT INTO string_table VALUES (['g', 'g', 'g', 'g'], ['h'], ['i', 'i', 'i']);

INSERT INTO string_table VALUES (['j', 'j'], NULL, ['k', 'k', 'k']);

INSERT INTO string_table VALUES (['l', 'l', 'l'], ['m', 'm'], [NULL, 'n', 'n']);

SELECT [a, b, c] FROM string_table;

SELECT [[[1, 1], [2]], [[3, 3], [4, 4, 4, 4], [5, 5]], [[6, 6]]];

SELECT [[[1, 1], [2]], [[3, 3], [4, 4, 4, 4], [5, 5]], [[6, 6]], NULL];

SELECT [[[1, 1], [2]], [[3, 3], [4, 4, NULL, 4], [5, 5]], NULL, [[6, 6]]];

CREATE TABLE nested_list_table (a INT[][], b INT[][], c INT[][]);

INSERT INTO nested_list_table VALUES ([[1, 1, 1], [2]], [[3, 3], [4, 4, 4, 4], [5, 5]], [[6, 6]]);

INSERT INTO nested_list_table VALUES ([[7, 7], [8, 8, 8]], [[9]], [[10, 10], [11, 11, 11]]);

INSERT INTO nested_list_table VALUES ([[12, NULL]], [NULL, [13, 13, 13]], NULL);

SELECT [a, b, c] FROM nested_list_table;

SELECT [[1, 1], ['a', 'a'], [ROW(2, 2), ROW(3, 3)]];

CREATE TABLE large_list_table (a INT[], b INT[], c INT[]);

INSERT INTO large_list_table SELECT [i, i, i], [i + 1, i + 1], [i + 2] FROM RANGE(0, 10000) AS tbl(i);

SELECT [a, b, c] FROM large_list_table WHERE a[1] = 1;

PRAGMA enable_verification;

CREATE TABLE integers (i INT[]);

INSERT INTO integers VALUES ([1, 2, 3]), ([4, 5, 6]);

CREATE TABLE selections (j BOOLEAN[]);

INSERT INTO selections VALUES ([TRUE, FALSE, TRUE]), ([FALSE, TRUE, FALSE]);

SELECT LIST_WHERE([0, 1, 2], [TRUE, FALSE, FALSE]);

SELECT LIST_WHERE(i, [TRUE, FALSE, TRUE]) FROM integers;

SELECT LIST_WHERE(i, j) FROM integers, selections ORDER BY ALL;

SELECT LIST_WHERE([1, 2, 3], [TRUE, NULL, FALSE]);

SELECT LIST_WHERE([1, 2, 3], [TRUE, TRUE, FALSE, FALSE]);

SELECT LIST_WHERE([1, 2, 3], [TRUE, FALSE]);

CREATE TABLE lists AS SELECT range % 4 AS g, LIST(range) AS l FROM RANGE(0, 10000) GROUP BY range % 4;

CREATE TABLE bools AS SELECT range % 4 AS a, LIST(CAST((range % 2) AS BOOLEAN)) AS s FROM RANGE(0, 10000) GROUP BY range % 4;

SELECT g, LIST_WHERE(l, s) AS l FROM lists, bools;

SELECT LIST_WHERE([TRUE, FALSE, NULL, TRUE, TRUE, NULL], [TRUE, FALSE, TRUE, TRUE, TRUE, TRUE]);

SELECT LIST_WHERE([CAST(NULL AS BOOLEAN)], [TRUE]);

SELECT LIST_WHERE(['aa', 'a', 'cd', NULL, '42'], [TRUE, TRUE, FALSE, FALSE, FALSE]);

SELECT LIST_WHERE([CAST(NULL AS TEXT)], [TRUE]);

SELECT LIST_WHERE([CAST(NULL AS TEXT)], [TRUE]);

SELECT LIST_WHERE([CAST(NULL AS TEXT)], [TRUE]);

SELECT LIST_WHERE([CAST(NULL AS TEXT)], [TRUE]);

SELECT LIST_WHERE([CAST(NULL AS TEXT)], [TRUE]);

SELECT LIST_WHERE([CAST('2021-08-20' AS DATE)], [TRUE]);

SELECT LIST_WHERE([CAST('14:59:37' AS TIME)], [TRUE]);

SELECT LIST_WHERE([CAST('2021-08-20' AS TIMESTAMP)], [TRUE]);

SELECT LIST_WHERE([CAST('2021-08-20' AS TIMESTAMP_S)], [TRUE]);

SELECT LIST_WHERE([CAST('2021-08-20 00:00:00.123' AS TIMESTAMP_MS)], [TRUE]);

SELECT LIST_WHERE([CAST('2021-08-20 00:00:00.123456' AS TIMESTAMP_NS)], [TRUE]);

SELECT LIST_WHERE([CAST('14:59:37' AS TIMETZ)], [TRUE]);

SELECT LIST_WHERE([CAST('2021-08-20' AS TIMESTAMPTZ)], [TRUE]);

SELECT LIST_WHERE([INTERVAL '1' YEAR], [TRUE]);

SELECT LIST_WHERE([INTERVAL '1' YEAR], [TRUE]);

SELECT LIST_WHERE([CAST('{a: 1}' AS BLOB), CAST('{a: 3}' AS BLOB)], [TRUE, FALSE]);

SELECT LIST_WHERE([CAST(NULL AS BLOB)], [TRUE]);

CREATE TYPE mood AS ENUM ('sad', 'ok', 'happy');

CREATE TABLE enums (e mood[]);

INSERT INTO enums VALUES (['happy', 'sad']);

SELECT LIST_WHERE(e, [FALSE, TRUE]) FROM enums;

SELECT LIST_WHERE([[1], [1, 2], NULL, [NULL], [], [1, 2, 3]], [TRUE, FALSE, FALSE, TRUE, TRUE, FALSE]);

SELECT LIST_WHERE([{'a': 1}, {'a': 5}, {'a': 3}], [TRUE, TRUE, TRUE]);

SELECT LIST_WHERE(CAST([1, 2, 3] AS INT[3]), CAST([TRUE, FALSE, TRUE] AS BOOLEAN[3]));

SELECT LIST_WHERE(ARRAY_VALUE('1', NULL), [TRUE, TRUE, TRUE]);

SELECT LIST_WHERE(ARRAY_VALUE('1', NULL), [TRUE, TRUE, FALSE]);

PRAGMA enable_verification;

CREATE TABLE integers (i INT[]);

INSERT INTO integers VALUES ([1, 2, 3]), ([4, 5, 6]);

CREATE TABLE bools (b BOOLEAN);

INSERT INTO bools VALUES (FALSE), (TRUE);

CREATE TABLE integers2 (j INT[]);

INSERT INTO integers2 VALUES ([]), (NULL);

SELECT LIST_ZIP([1, 2, 3]);

SELECT LIST_ZIP([1, 2, 3], [2, 3, 4], [3, 4, 5], []);

SELECT LIST_ZIP([1, 2, 3], [1, 2, 3]);

SELECT LIST_ZIP([1, 2, 3], [1, 2]);

SELECT LIST_ZIP(CAST([1, 2, 3] AS INT[3]), CAST([1, 2] AS INT[2]), TRUE);

SELECT LIST_ZIP(CAST([1, 2, 3] AS INT[3]), CAST([1, 2, 3] AS INT[3]));

SELECT LIST_ZIP(CAST([1, '2', 3] AS INT[]), CAST([1, 2, 3] AS INT[3]));

SELECT LIST_ZIP([1, 2], [1, 2, 3]);

SELECT LIST_ZIP([1, 2, 3], NULL);

SELECT LIST_ZIP([1, 2, 3], []);

SELECT LIST_ZIP([1, 2, 3], NULL, TRUE);

SELECT LIST_ZIP([1, 2, 3], [], TRUE);

SELECT LIST_ZIP([1, 2, 3], [2, 3, 4], [3, 4, 5], [], TRUE);

SELECT LIST_ZIP(a.i, b.i) AS zipped_list FROM integers AS a, integers AS b ORDER BY ALL;

SELECT LIST_ZIP(a.i, b.i, b.i) FROM integers AS a, integers AS b ORDER BY ALL;

SELECT LIST_ZIP([1, 2, 3], TRUE);

SELECT LIST_ZIP([1, 2, 3], [1, 2, 3], TRUE);

SELECT LIST_ZIP([1, 2, 3], [1, 2], TRUE);

SELECT LIST_ZIP([1, 2], [1, 2, 3], TRUE);

SELECT LIST_ZIP(i, j, b) FROM integers, integers2, bools ORDER BY ALL DESC;

CREATE TABLE lists AS SELECT range % 4 AS g, LIST(range) AS l FROM RANGE(0, 10000) GROUP BY range % 4;

SELECT g, LIST_ZIP(l, b) AS l FROM lists, bools;

SELECT LIST_ZIP([1, 2, 3], [TRUE, FALSE, NULL], [{'list_1': 1}, {'list_1': 2}, {'list_1': 3}], ['a', 'b', 'c'], [CAST('2021-08-20' AS DATE), CAST('2021-08-21' AS DATE), CAST('2021-08-22' AS DATE)], [1.0, 2.0, 3.0], [NULL, NULL, NULL]);

SELECT LIST_ZIP([TRUE, FALSE, NULL]);

SELECT LIST_ZIP([CAST(NULL AS BOOLEAN), TRUE]);

SELECT LIST_ZIP(['aa', 'a']);

SELECT LIST_ZIP([CAST(NULL AS TEXT)]);

SELECT LIST_ZIP([CAST(NULL AS TEXT)]);

SELECT LIST_ZIP([CAST(NULL AS TEXT)]);

SELECT LIST_ZIP([CAST(NULL AS TEXT)]);

SELECT LIST_ZIP([CAST(NULL AS TEXT)]);

SELECT LIST_ZIP([CAST('2021-08-20' AS DATE)]);

SELECT LIST_ZIP([CAST('14:59:37' AS TIME)]) AS a, CAST(CAST(a AS TEXT) AS STRUCT("time" TIME)[]) AS b, a = b;

SELECT LIST_ZIP([CAST('2021-08-20' AS TIMESTAMP)]);

SELECT LIST_ZIP([CAST('2021-08-20' AS TIMESTAMP_S)]);

SELECT LIST_ZIP([CAST('2021-08-20 00:00:00.123' AS TIMESTAMP_MS)]);

SELECT LIST_ZIP([CAST('2021-08-20 00:00:00.123456' AS TIMESTAMP_NS)]);

SELECT LIST_ZIP([CAST('14:59:37' AS TIMETZ)]);

SELECT LIST_ZIP([CAST('2021-08-20' AS TIMESTAMPTZ)]);

SELECT LIST_ZIP([INTERVAL '1' YEAR]);

SELECT LIST_ZIP([INTERVAL '1' YEAR]);

SELECT LIST_ZIP([CAST('{a: 1}' AS BLOB), CAST('{a: 3}' AS BLOB)]);

SELECT LIST_ZIP([CAST('{a: 1' AS BLOB), CAST('{a: 3' AS BLOB)]) AS a, CAST(CAST(a AS TEXT) AS STRUCT(a BLOB)[]) AS b, a = b;

SELECT LIST_ZIP([CAST(NULL AS BLOB)]);

CREATE TYPE mood AS ENUM ('sad', 'ok', 'happy');

CREATE TABLE enums (e mood[]);

INSERT INTO enums VALUES (['happy', 'sad']);

SELECT LIST_ZIP(e) FROM enums;

SELECT LIST_ZIP([[1], [1, 2], NULL]);

SELECT LIST_ZIP([{'a': 1}, {'a': 5}, {'a': 3}]);

SELECT LIST_ZIP('');

SELECT LIST_ZIP(3, 4);

SELECT LIST_ZIP(FALSE);

SELECT LIST_ZIP(TRUE);

PRAGMA enable_verification;

SELECT REPEAT([1], 10);

SELECT REPEAT([{'x': 1}], 5);

SELECT REPEAT([[1]], 10);

SELECT REPEAT([1, 2], 5);

SELECT REPEAT([[[], [], [NULL], NULL]], 3);

SELECT REPEAT(['hello', 'thisisalongstring'], 5);

SELECT REPEAT([], 10);

SELECT REPEAT([], -1);

SELECT REPEAT(CAST(NULL AS INT[]), 10);

SELECT REPEAT(REPEAT([1], 50), 50) = REPEAT([1], 2500);

SELECT REPEAT(c, 2) FROM TEST_VECTOR_TYPES(CAST(NULL AS INT[])) AS t(c);

SELECT REPEAT([1], 99999999999999999);

SELECT LIST_AGGR([NULL, 1, 2], 'any_value');

SELECT LIST_ANY_VALUE();

SELECT LIST_ANY_VALUE();

INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);

SELECT LIST_ANY_VALUE(i) FROM five;

SELECT LIST_ANY_VALUE(i) FROM five;

CREATE TABLE five_dates AS SELECT LIST(CAST(NULLIF(i, 0) AS INT)) AS i, LIST(CAST('2021-08-20' AS DATE) + CAST(NULLIF(i, 0) AS INT)) AS d, LIST(CAST('2021-08-20' AS TIMESTAMP) + INTERVAL (NULLIF(i, 0)) HOUR) AS dt, LIST(CAST('14:59:37' AS TIME) + INTERVAL (NULLIF(i, 0)) MINUTE) AS t, LIST(INTERVAL (NULLIF(i, 0)) SECOND) AS s FROM RANGE(0, 6, 1) AS t1(i);

SELECT LIST_ANY_VALUE(d), LIST_ANY_VALUE(dt), LIST_ANY_VALUE(t), LIST_ANY_VALUE(s) FROM five_dates;

DROP TABLE five_dates;

CREATE TABLE five_dates_tz AS SELECT LIST(CAST((CAST('2021-08-20' AS TIMESTAMP) + INTERVAL (NULLIF(i, 0)) HOUR) AS TIMESTAMPTZ)) AS dt, LIST(CAST((CAST('14:59:37' AS TIME) + INTERVAL (NULLIF(i, 0)) MINUTE) AS TIMETZ)) AS t FROM RANGE(0, 6, 1) AS t1(i);

SELECT LIST_ANY_VALUE(dt), LIST_ANY_VALUE(t) FROM five_dates_tz;

DROP TABLE five_dates_tz;

CREATE TABLE five_complex AS SELECT LIST(CAST(NULLIF(i, 0) AS INT)) AS i, LIST(CAST(NULLIF(i, 0) AS TEXT)) AS s, LIST([NULLIF(i, 0)]) AS l, LIST({'a': NULLIF(i, 0)}) AS r FROM RANGE(0, 6, 1) AS t1(i);

SELECT LIST_ANY_VALUE(s), LIST_ANY_VALUE(l), LIST_ANY_VALUE(r) FROM five_complex;

SELECT LIST_ANY_VALUE(s), LIST_ANY_VALUE(l), LIST_ANY_VALUE(r) FROM five_complex;

SELECT LIST_ANY_VALUE(s), LIST_ANY_VALUE(l), LIST_ANY_VALUE(r) FROM five_complex;

INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);

SELECT LIST_ANY_VALUE(i) FROM five;

CREATE TABLE list_ints (l INT[]);

INSERT INTO list_ints SELECT LIST(i) FROM RANGE(0, 100) AS tbl(i);

SELECT LIST_APPROX_COUNT_DISTINCT([10]), LIST_APPROX_COUNT_DISTINCT(['hello']) FROM list_ints;

SELECT LIST_APPROX_COUNT_DISTINCT(l), LIST_APPROX_COUNT_DISTINCT(['hello']) FROM list_ints;

SELECT LIST_APPROX_COUNT_DISTINCT([]) FROM list_ints;

INSERT INTO list_ints VALUES ([]), (NULL), ([NULL]);

SELECT LIST_APPROX_COUNT_DISTINCT(l) FROM list_ints;

CREATE TABLE IF NOT EXISTS dates (t DATE[]);

INSERT INTO dates VALUES (['2008-01-01', NULL, '2007-01-01', '2008-02-01', '2008-01-02', '2008-01-01', '2008-01-01', '2008-01-01']);

SELECT LIST_COUNT(t), LIST_APPROX_COUNT_DISTINCT(t) FROM dates;

CREATE TABLE IF NOT EXISTS timestamp (t TIMESTAMP[]);

INSERT INTO timestamp VALUES (['2008-01-01 00:00:01', NULL, '2007-01-01 00:00:01', '2008-02-01 00:00:01', '2008-01-02 00:00:01', '2008-01-01 10:00:00', '2008-01-01 00:10:00', '2008-01-01 00:00:10']);

SELECT LIST_COUNT(t), LIST_APPROX_COUNT_DISTINCT(t) FROM timestamp;

CREATE TABLE IF NOT EXISTS names (t TEXT[]);

INSERT INTO names VALUES (['Pedro', NULL, 'Pedro', 'Pedro', 'Mark', 'Mark', 'Mark', 'Hannes-Muehleisen', 'Hannes-Muehleisen']);

SELECT LIST_COUNT(t), LIST_APPROX_COUNT_DISTINCT(t) FROM names;

CREATE TABLE list_ints_2 (a INT[], b INT[]);

INSERT INTO list_ints_2 SELECT LIST(a), LIST(a % 10) FROM RANGE(0, 2000) AS tbl(a);

SELECT LIST_COUNT(a), LIST_APPROX_COUNT_DISTINCT(a), LIST_APPROX_COUNT_DISTINCT(b) FROM list_ints_2;

DELETE FROM list_ints_2;

INSERT INTO list_ints_2 SELECT LIST(a), NULL FROM RANGE(0, 2000) AS tbl(a, b) WHERE a % 2 = 0;

INSERT INTO list_ints_2 SELECT LIST(a), NULL FROM RANGE(0, 2000) AS tbl(a, b) WHERE a % 2 = 1;

SELECT LIST_APPROX_COUNT_DISTINCT(a) FROM list_ints_2;

CREATE SEQUENCE seq;

SELECT LIST_AVG([NEXTVAL('seq')]);

SELECT LIST_AVG([NEXTVAL('seq')]);

CREATE TABLE integers (i INT[]);

INSERT INTO integers VALUES ([1, 2, 3]), ([6, 3, 2, 5]), ([]), ([NULL]), (NULL), ([1, NULL, 2, 3]);

SELECT LIST_AVG(i) FROM integers;

SELECT LIST_AVG();

CREATE TABLE vals (i INT[], j INT128[]);

INSERT INTO vals VALUES ([NULL, NULL], [NULL, NULL, NULL]);

SELECT LIST_AVG(i), LIST_AVG(j) FROM vals;

CREATE TABLE bigints (n INT128[]);

INSERT INTO bigints (n) VALUES ([CAST('9007199254740992' AS INT128), CAST(1 AS INT128), CAST(0 AS INT128)]);
require AS longdouble;

SELECT CAST(LIST_AVG(n) AS DOUBLE) - CAST('3002399751580331' AS DOUBLE) FROM bigints;

CREATE TABLE doubles (n DOUBLE[]);

INSERT INTO doubles (n) VALUES ([CAST('9007199254740992' AS DOUBLE), CAST(1 AS DOUBLE), CAST(1 AS DOUBLE), CAST(0 AS DOUBLE)]);

SELECT LIST_AGGR(n, 'favg') - CAST('2251799813685248.5' AS DOUBLE) FROM doubles;

CREATE TABLE bigints (i BIGINT[]);

INSERT INTO bigints VALUES ([1, 2, 3]);

SELECT LIST_SUM(i) FROM bigints;

SELECT LIST_AVG(i) FROM bigints;

DELETE FROM bigints;

INSERT INTO bigints VALUES ([1, 2, 3, 9223372036854775806]);

SELECT LIST_SUM(i) FROM bigints;

SELECT LIST_AVG(i) FROM bigints;

DELETE FROM bigints;

INSERT INTO bigints VALUES ([-1, -2, -3]);

SELECT LIST_SUM(i) FROM bigints;

SELECT LIST_AVG(i) FROM bigints;

DELETE FROM bigints;

INSERT INTO bigints VALUES ([-1, -2, -3, -9223372036854775806]);

SELECT LIST_SUM(i) FROM bigints;

SELECT LIST_AVG(i) FROM bigints;

CREATE TABLE decimals (i DECIMAL(18, 1)[]);

INSERT INTO decimals VALUES ([1, 2, 3]);

SELECT LIST_SUM(i) FROM decimals;

SELECT LIST_AVG(i) FROM decimals;

DELETE FROM decimals;

INSERT INTO decimals VALUES ([99999999999999999.9, 99999999999999999.9, 99999999999999999.9, 99999999999999999.9, 99999999999999999.9, 99999999999999999.9, 99999999999999999.9, 99999999999999999.9, 99999999999999999.9, 99999999999999999.9, 1.0, 2.0, 3.0]);

SELECT LIST_SUM(i) FROM decimals;

SELECT LIST_AVG(i) FROM decimals;

CREATE SEQUENCE seq;

SELECT LIST_BIT_AND([NEXTVAL('seq')]);

SELECT LIST_BIT_AND([NEXTVAL('seq')]);

CREATE TABLE integers (i INT[]);

INSERT INTO integers VALUES ([3, 7, 15, 31, 3, 15]);

SELECT LIST_BIT_AND([]) FROM integers;

INSERT INTO integers VALUES ([]), (NULL), ([NULL]), ([3, 7, NULL, 15, 31, 3, 15, NULL]);

SELECT LIST_BIT_AND(i), LIST_BIT_AND([1, 1, 1, 1, 1, 1]), LIST_BIT_AND(NULL) FROM integers;

SELECT LIST_BIT_AND();

CREATE SEQUENCE seq;

SELECT LIST_BIT_OR([NEXTVAL('seq')]);

SELECT LIST_BIT_OR([NEXTVAL('seq')]);

CREATE TABLE integers (i INT[]);

INSERT INTO integers VALUES ([3, 7, 15, 31, 3, 15]);

SELECT LIST_BIT_OR([]) FROM integers;

INSERT INTO integers VALUES ([]), (NULL), ([NULL]), ([3, 7, NULL, 15, 31, 3, 15, NULL]);

SELECT LIST_BIT_OR(i), LIST_BIT_OR([1, 1, 1, 1, 1, 1]), LIST_BIT_OR(NULL) FROM integers;

SELECT LIST_BIT_OR();

CREATE SEQUENCE seq;

SELECT LIST_BIT_XOR([NEXTVAL('seq')]);

SELECT LIST_BIT_XOR([NEXTVAL('seq')]);

CREATE TABLE integers (i INT[]);

INSERT INTO integers VALUES ([3, 7, 15, 31, 3, 15]);

SELECT LIST_BIT_XOR([]) FROM integers;

INSERT INTO integers VALUES ([]), (NULL), ([NULL]), ([3, 7, NULL, 15, 31, 3, 15, NULL]);

SELECT LIST_BIT_XOR(i), LIST_BIT_XOR([1, 1, 1, 1, 1, 1]), LIST_BIT_XOR(NULL) FROM integers;

SELECT LIST_BIT_XOR();

SELECT LIST_BOOL_OR();

SELECT LIST_BOOL_AND();

CREATE TABLE bools (l BOOLEAN[]);

INSERT INTO bools SELECT LIST(TRUE) FROM RANGE(0, 100) AS tbl(i);

INSERT INTO bools SELECT LIST(FALSE) FROM RANGE(0, 100) AS tbl(i);

INSERT INTO bools VALUES ([TRUE, FALSE]);

INSERT INTO bools VALUES ([]), ([NULL]), (NULL), ([NULL, TRUE, FALSE, NULL]);

SELECT LIST_BOOL_OR(l) FROM bools;

SELECT LIST_BOOL_AND(l) FROM bools;

SELECT LIST_COUNT([1, 2, 3]);

SELECT LIST_COUNT([1]) FROM RANGE(0, 3);

CREATE TABLE lists (l INT[]);

INSERT INTO lists VALUES ([1, 2]), ([NULL]), (NULL), ([]), ([3, 4, 5, 6, 7]), ([1, 2, NULL, 1, NULL]);

SELECT LIST_COUNT(l) FROM lists;

SELECT LIST_COUNT();

SELECT LIST_ENTROPY();

SELECT LIST_ENTROPY([1]);

CREATE TABLE aggr (k INT[]);

INSERT INTO aggr VALUES ([0, 1, 1, 1, 4, 0, 3, 3, 2, 2, 4, 4, 2, 4, 0, 0, 0, 1, 2, 3, 4, 2, 3, 3, 1]);

INSERT INTO aggr VALUES ([]), ([NULL]), (NULL), ([0, 1, 1, 1, 4, NULL, 0, 3, 3, 2, NULL, 2, 4, 4, 2, 4, 0, 0, 0, 1, NULL, 2, 3, 4, 2, 3, 3, 1]);

SELECT LIST_ENTROPY(k) FROM aggr;

CREATE TABLE entr (l INT[]);

INSERT INTO entr SELECT LIST(2) FROM RANGE(0, 100) AS tbl(i);

SELECT LIST_ENTROPY(l) FROM entr;

CREATE TABLE aggr2 (k INT[]);

INSERT INTO aggr2 VALUES ([0, 4, 0, 2, 2, 4, 4, 2, 4, 0, 0, 0, 2, 4, 2]);

INSERT INTO aggr2 VALUES ([1, 1, 1, 3, 3, 1, 3, 3, 3, 1]);

SELECT LIST_ENTROPY(k) FROM aggr2;

CREATE TABLE names (name TEXT[]);

INSERT INTO names VALUES (['pedro', 'pedro', 'pedro', 'hannes', 'hannes', 'mark', NULL]);

SELECT LIST_ENTROPY(name) FROM names;

SELECT LIST_AGGR([1, 2], 'arbitrary');

SELECT LIST_FIRST();

SELECT LIST_FIRST();

INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);

SELECT LIST_FIRST(i) FROM five;

SELECT LIST_FIRST(i) FROM five;

CREATE TABLE five_dates AS SELECT LIST(CAST(i AS INT)) AS i, LIST(CAST('2021-08-20' AS DATE) + CAST(i AS INT)) AS d, LIST(CAST('2021-08-20' AS TIMESTAMP) + INTERVAL (i) HOUR) AS dt, LIST(CAST('14:59:37' AS TIME) + INTERVAL (i) MINUTE) AS t, LIST(INTERVAL (i) SECOND) AS s FROM RANGE(1, 6, 1) AS t1(i);

SELECT LIST_FIRST(d), LIST_FIRST(dt), LIST_FIRST(t), LIST_FIRST(s) FROM five_dates;

DROP TABLE five_dates;

CREATE TABLE five_dates_tz AS SELECT LIST(CAST((CAST('2021-08-20' AS TIMESTAMP) + INTERVAL (i) HOUR) AS TIMESTAMPTZ)) AS dt, LIST(CAST((CAST('14:59:37' AS TIME) + INTERVAL (i) MINUTE) AS TIMETZ)) AS t FROM RANGE(1, 6, 1) AS t1(i);

SELECT LIST_FIRST(dt), LIST_FIRST(t) FROM five_dates_tz;

DROP TABLE five_dates_tz;

CREATE TABLE five_complex AS SELECT LIST(CAST(i AS INT)) AS i, LIST(CAST(i AS TEXT)) AS s, LIST([i]) AS l, LIST({'a': i}) AS r FROM RANGE(1, 6, 1) AS t1(i);

SELECT LIST_FIRST(s), LIST_FIRST(l), LIST_FIRST(r) FROM five_complex;

SELECT LIST_FIRST(s), LIST_FIRST(l), LIST_FIRST(r) FROM five_complex;

SELECT LIST_FIRST(s), LIST_FIRST(l), LIST_FIRST(r) FROM five_complex;

INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);

SELECT LIST_FIRST(i) FROM five;

CREATE TABLE const AS SELECT LIST(2) AS i FROM RANGE(0, 200) AS t1(i);

SELECT LIST_HISTOGRAM(i) FROM const;

SELECT LIST_HISTOGRAM([1]);

CREATE TABLE hist_data (g INT[]);

INSERT INTO hist_data VALUES ([1, 1, 2, 2, 2, 3, 5]), ([1, 2, 3, 4, 5, 6, NULL]), ([]), (NULL), ([NULL]);

SELECT LIST_HISTOGRAM(g) FROM hist_data;

CREATE TABLE names (name TEXT[]);

INSERT INTO names VALUES (['pedro', 'pedro', 'pedro', 'hannes', 'hannes', 'mark', NULL, 'Hubert Blaine Wolfeschlegelsteinhausenbergerdorff Sr.']);

SELECT LIST_HISTOGRAM(name) FROM names;

SELECT LIST_HISTOGRAM();

SELECT LIST_HISTOGRAM([CAST('2021-08-20' AS TIMESTAMP)]);

SELECT LIST_HISTOGRAM([CAST('2021-08-20' AS TIMESTAMP_S)]);

SELECT LIST_HISTOGRAM([CAST('2021-08-20' AS TIMESTAMP_MS)]);

SELECT LIST_HISTOGRAM([CAST('2021-08-20' AS TIMESTAMP_NS)]);

SELECT LIST_HISTOGRAM([CAST('2021-08-20' AS TIMESTAMPTZ)]);

SELECT LIST_HISTOGRAM([CAST('2022-01-02' AS DATE)]);

SELECT LIST_HISTOGRAM([CAST('15:00:07' AS TIME)]);

SELECT LIST_HISTOGRAM([CAST('15:00:07' AS TIMETZ)]);

SELECT LIST_HISTOGRAM([INTERVAL '1' YEAR]);

PRAGMA enable_verification;

WITH cte AS (SELECT * FROM (VALUES (0.0), (9.9)) AS df(l_orderkey)) SELECT * FROM HISTOGRAM_VALUES(cte, l_orderkey);

CREATE TABLE hugeints (h INT128[]);

INSERT INTO hugeints VALUES ([NULL, 1, 2]), (NULL), ([]), ([NULL]), ([1, 2, 3]);

SELECT LIST_FIRST(h), LIST_LAST(h), LIST_SUM(h) FROM hugeints;

DELETE FROM hugeints;

INSERT INTO hugeints VALUES ([42.0, 1267650600228229401496703205376, -439847238974238975238975, '-12']);

SELECT LIST_MIN(h), LIST_MAX(h), LIST_SUM(h), LIST_FIRST(h), LIST_LAST(h) FROM hugeints;

SELECT LIST_AGGR([1], 2);

SELECT LIST_AGGR([1], TRUE);

SELECT LIST_AGGR([1], NULL);

SELECT LIST_AGGR('${func_name}');

SELECT LIST_AGGR(*, '${func_name}');

SELECT LIST_AGGR('hello', '${func_name}');

SELECT LIST_AGGR(1, 2, '${func_name}');

SELECT LIST_AGGR(1, 2, '${func_name}');

SELECT LIST_AGGR([1, 2, NULL], 'count_star');

SELECT LIST_AGGR([1, 2, NULL], 'corr');

SELECT LIST_AGGR([1, 2, NULL], 'covar_pop');

SELECT LIST_AGGR([1, 2, NULL], 'covar_samp');

SELECT LIST_AGGR([1, 2, NULL], 'regr_intercept');

SELECT LIST_AGGR([1, 2, NULL], 'regr_sxy');

SELECT LIST_AGGR([1, 2, NULL], 'regr_sxx');

SELECT LIST_AGGR([1, 2, NULL], 'regr_syy');

SELECT LIST_AGGR([1, 2, NULL], 'regr_r2');

SELECT LIST_AGGR([1, 2, NULL], 'regr_slope');

SELECT LIST_AGGR([1, 2, NULL], 'regr_count');

SELECT LIST_AGGR([1, 2, NULL], 'regr_avgy');

SELECT LIST_AGGR([1, 2, NULL], 'regr_avgx');

SELECT LIST_AGGR([1, 2, NULL], 'reservoir_quantile');

SELECT LIST_AGGR([1, 2, NULL], 'approx_quantile');

SELECT LIST_AGGR([1, 2, NULL], 'quantile');

SELECT LIST_AGGR([1, 2, NULL], 'quantile_cont');

SELECT LIST_AGGR([1, 2, NULL], 'quantile_disc');

SELECT LIST_AGGR([1, 2, NULL], 'arg_max');

SELECT LIST_AGGR([1, 2, NULL], 'max_by');

SELECT LIST_AGGR([1, 2, NULL], 'argmax');

SELECT LIST_AGGR([1, 2, NULL], 'arg_min');

SELECT LIST_AGGR([1, 2, NULL], 'min_by');

SELECT LIST_AGGR([1, 2, NULL], 'argmin');

SELECT LIST_KURTOSIS([1]);

SELECT LIST_KURTOSIS([0, 0, 0, 0, 0, 0]);

SELECT LIST_KURTOSIS([2e304, 2e305, 2e306, 2e307]);

CREATE TABLE aggr (k INT[]);

INSERT INTO aggr VALUES ([1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), ([10, 10, 10, 10, 20, 20, 25, 30, 30, 30, 30]), ([NULL, 11, 15, 18, 22, 25, NULL, 35, 40, 50, 51]), (NULL), ([]), ([NULL]);

SELECT LIST_KURTOSIS(k) FROM aggr;

SELECT LIST_KURTOSIS_POP(k) FROM aggr;

SELECT LIST_KURTOSIS();

SELECT LIST_LAST();

SELECT LIST_LAST();

INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([1, 2, NULL]);

SELECT LIST_LAST(i) FROM five;

SELECT LIST_LAST(i) FROM five;

CREATE TABLE five_dates AS SELECT LIST(CAST(i AS INT)) AS i, LIST(CAST('2021-08-20' AS DATE) + CAST(i AS INT)) AS d, LIST(CAST('2021-08-20' AS TIMESTAMP) + INTERVAL (i) HOUR) AS dt, LIST(CAST('14:59:37' AS TIME) + INTERVAL (i) MINUTE) AS t, LIST(INTERVAL (i) SECOND) AS s FROM RANGE(1, 6, 1) AS t1(i);

SELECT LIST_LAST(d), LIST_LAST(dt), LIST_LAST(t), LIST_LAST(s) FROM five_dates;

DROP TABLE five_dates;

CREATE TABLE five_dates_tz AS SELECT LIST(CAST((CAST('2021-08-20' AS TIMESTAMP) + INTERVAL (i) HOUR) AS TIMESTAMPTZ)) AS dt, LIST(CAST((CAST('14:59:37' AS TIME) + INTERVAL (i) MINUTE) AS TIMETZ)) AS t FROM RANGE(1, 6, 1) AS t1(i);

SELECT LIST_LAST(dt), LIST_LAST(t) FROM five_dates_tz;

DROP TABLE five_dates_tz;

CREATE TABLE five_complex AS SELECT LIST(CAST(i AS INT)) AS i, LIST(CAST(i AS TEXT)) AS s, LIST([i]) AS l, LIST({'a': i}) AS r FROM RANGE(1, 6, 1) AS t1(i);

SELECT LIST_LAST(s), LIST_LAST(l), LIST_LAST(r) FROM five_complex;

SELECT LIST_LAST(s), LIST_LAST(l), LIST_LAST(r) FROM five_complex;

SELECT LIST_LAST(s), LIST_LAST(l), LIST_LAST(r) FROM five_complex;

INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([1, 2, NULL]);

SELECT LIST_LAST(i) FROM five;

SELECT LIST_MAD([1]);

CREATE TABLE const AS SELECT LIST(1) AS i FROM RANGE(0, 2000) AS t1(i);

SELECT LIST_MAD(i) FROM const;

SELECT LIST_MAD(i) FROM const;

SELECT LIST_MAD(r) FROM tinys;

SELECT LIST_MAD(r) FROM tinys;

SELECT LIST_MAD(r) FROM tinys;

SELECT LIST_MAD(r) FROM numerics;

SELECT LIST_MAD(r) FROM numerics;

CREATE TABLE date AS SELECT LIST(CAST((CAST('2018-01-01' AS DATE) + INTERVAL (r) DAY) AS DATE)) AS r FROM RANGE(0, 10000) AS tbl(r);

SELECT LIST_MAD(r) FROM date;

CREATE TABLE hour AS SELECT LIST(CAST('2018-01-01' AS TIMESTAMP) + INTERVAL (r) HOUR) AS r FROM RANGE(0, 10000) AS tbl(r);

SELECT LIST_MAD(r) FROM hour;

CREATE TABLE second AS SELECT LIST(CAST('00:00:00' AS TIME) + INTERVAL (r) SECOND) AS r FROM RANGE(0, 10000) AS tbl(r);

SELECT LIST_MAD(r) FROM second;

SELECT LIST_MAD(x) FROM (VALUES ([CAST('294247-01-10' AS DATE), CAST('290309-12-22 (BC)' AS DATE)])) AS tbl(x);

SELECT LIST_MAD(x) FROM (VALUES ([CAST('294247-01-10 04:00:54.775806' AS TIMESTAMP), CAST('290309-12-22 (BC) 00:00:00' AS TIMESTAMP)])) AS tbl(x);

SELECT LIST_MAD(x) FROM (VALUES ([CAST('23:59:59.999999' AS TIME), CAST('00:00:00' AS TIME)])) AS tbl(x);

SELECT LIST_MAD(x) FROM (VALUES ([CAST('23:59:59.999999' AS TIME), CAST('00:00:00' AS TIME)])) AS tbl(x);

SELECT LIST_MAD(x) FROM (VALUES ([CAST('23:59:59.999999' AS TIME), CAST('00:00:00' AS TIME)])) AS tbl(x);

SELECT LIST_MAD([INTERVAL '1' YEAR]);

SELECT LIST_MAD([CAST(NULL AS INTERVAL)]);

SELECT LIST_MAD(x) FROM (VALUES ([CAST('127' AS DECIMAL(3, 0)), CAST('-128' AS DECIMAL(3, 0))])) AS tbl(x);

SELECT LIST_MAD(x) FROM (VALUES ([CAST('32767' AS DECIMAL(5, 0)), CAST('-32768' AS DECIMAL(5, 0))])) AS tbl(x);

SELECT LIST_MAD(x) FROM (VALUES ([CAST('2147483647' AS DECIMAL(10, 0)), CAST('-2147483648' AS DECIMAL(10, 0))])) AS tbl(x);

SELECT LIST_MAX();

SELECT LIST_MAX();

INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);

SELECT LIST_MAX(i) FROM five;

SELECT LIST_MAX(i) FROM five;

CREATE TABLE five_dates AS SELECT LIST(CAST(i AS INT)) AS i, LIST(CAST('2021-08-20' AS DATE) + CAST(i AS INT)) AS d, LIST(CAST('2021-08-20' AS TIMESTAMP) + INTERVAL (i) HOUR) AS dt, LIST(CAST('14:59:37' AS TIME) + INTERVAL (i) MINUTE) AS t, LIST(INTERVAL (i) SECOND) AS s FROM RANGE(1, 6, 1) AS t1(i);

SELECT LIST_MAX(d), LIST_MAX(dt), LIST_MAX(t), LIST_MAX(s) FROM five_dates;

DROP TABLE five_dates;

CREATE TABLE five_dates_tz AS SELECT LIST(CAST((CAST('2021-08-20' AS TIMESTAMP) + INTERVAL (i) HOUR) AS TIMESTAMPTZ)) AS dt, LIST(CAST((CAST('14:59:37' AS TIME) + INTERVAL (i) MINUTE) AS TIMETZ)) AS t FROM RANGE(1, 6, 1) AS t1(i);

SELECT LIST_MAX(dt), LIST_MAX(t) FROM five_dates_tz;

DROP TABLE five_dates_tz;

CREATE TABLE five_complex AS SELECT LIST(CAST(i AS INT)) AS i, LIST(CAST(i AS TEXT)) AS s, LIST([i]) AS l, LIST({'a': i}) AS r FROM RANGE(1, 6, 1) AS t1(i);

SELECT LIST_MAX(s), LIST_MAX(l), LIST_MAX(r) FROM five_complex;

SELECT LIST_MAX(s), LIST_MAX(l), LIST_MAX(r) FROM five_complex;

SELECT LIST_MAX(s), LIST_MAX(l), LIST_MAX(r) FROM five_complex;

INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);

SELECT LIST_MAX(i) FROM five;

SELECT LIST_MIN();

SELECT LIST_MIN();

INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);

SELECT LIST_MIN(i) FROM five;

SELECT LIST_MIN(i) FROM five;

CREATE TABLE five_dates AS SELECT LIST(CAST(i AS INT)) AS i, LIST(CAST('2021-08-20' AS DATE) + CAST(i AS INT)) AS d, LIST(CAST('2021-08-20' AS TIMESTAMP) + INTERVAL (i) HOUR) AS dt, LIST(CAST('14:59:37' AS TIME) + INTERVAL (i) MINUTE) AS t, LIST(INTERVAL (i) SECOND) AS s FROM RANGE(1, 6, 1) AS t1(i);

SELECT LIST_MIN(d), LIST_MIN(dt), LIST_MIN(t), LIST_MIN(s) FROM five_dates;

DROP TABLE five_dates;

CREATE TABLE five_dates_tz AS SELECT LIST(CAST((CAST('2021-08-20' AS TIMESTAMP) + INTERVAL (i) HOUR) AS TIMESTAMPTZ)) AS dt, LIST(CAST((CAST('14:59:37' AS TIME) + INTERVAL (i) MINUTE) AS TIMETZ)) AS t FROM RANGE(1, 6, 1) AS t1(i);

SELECT LIST_MIN(dt), LIST_MIN(t) FROM five_dates_tz;

DROP TABLE five_dates_tz;

CREATE TABLE five_complex AS SELECT LIST(CAST(i AS INT)) AS i, LIST(CAST(i AS TEXT)) AS s, LIST([i]) AS l, LIST({'a': i}) AS r FROM RANGE(1, 6, 1) AS t1(i);

SELECT LIST_MIN(s), LIST_MIN(l), LIST_MIN(r) FROM five_complex;

SELECT LIST_MIN(s), LIST_MIN(l), LIST_MIN(r) FROM five_complex;

SELECT LIST_MIN(s), LIST_MIN(l), LIST_MIN(r) FROM five_complex;

INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);

SELECT LIST_MIN(i) FROM five;

PRAGMA enable_verification;

PRAGMA enable_verification;

SELECT MIN({'val': "${col}"}).val IS NOT DISTINCT FROM (SELECT "${col}" FROM all_types ORDER BY "${col}" LIMIT 1) FROM all_types WHERE NOT bool IS NULL;

SELECT MAX({'val': "${col}"}).val IS NOT DISTINCT FROM (SELECT "${col}" FROM all_types ORDER BY "${col}" DESC LIMIT 1) FROM all_types WHERE NOT bool IS NULL;

PRAGMA enable_verification;

CREATE TABLE structs AS SELECT {'i': i} AS s FROM RANGE(0, 1000) AS t(i);

SELECT MIN(s), MAX(s) FROM structs;

INSERT INTO structs VALUES ({'i': 99999999});

SELECT MIN(s), MAX(s) FROM structs;

INSERT INTO structs VALUES ({'i': -9223372036854775808}), ({'i': 9223372036854775807});

SELECT MIN(s), MAX(s) FROM structs;

INSERT INTO structs VALUES ({'i': NULL}), (NULL);

SELECT MIN(s), MAX(s) FROM structs;

CREATE TABLE varchar_structs AS SELECT {'i': CONCAT('long_prefix_', i)} AS s FROM RANGE(0, 1000) AS t(i);

SELECT MIN(s), MAX(s) FROM varchar_structs;

INSERT INTO varchar_structs VALUES ({'i': CHR(0)}), ({'i': 'zzzzz' || CHR(0)});

SELECT MIN(s), MAX(s) FROM varchar_structs;

CREATE TABLE blob_structs AS SELECT {'i': CAST(CONCAT('long_prefix_', '\x', 16 + i % 239) AS BLOB)} AS s FROM RANGE(0, 1000) AS t(i);

SELECT MIN(s), MAX(s) FROM blob_structs;

INSERT INTO blob_structs VALUES ({'i': CAST('\x00z\x00\x00z\x00zzzz\x00' AS BLOB)}), ({'i': CAST('zzzzzz\x01\x01\x01\x00\x01\x01\x00' AS BLOB)});

SELECT MIN(s), MAX(s) FROM blob_structs;

CREATE TABLE multi_member_struct AS SELECT {'i': (1000 - i) // 5, 'j': i} AS s FROM RANGE(0, 1000) AS t(i);

SELECT MIN(s), MAX(s) FROM multi_member_struct;

CREATE TABLE lists AS SELECT CASE WHEN i < 500 THEN [i, i + 1, i + 2] ELSE [i, 0] END AS l FROM RANGE(0, 1000) AS t(i);

SELECT MIN(l), MAX(l) FROM lists;

INSERT INTO lists VALUES ([]), (NULL), ([NULL, NULL, NULL]);

SELECT MIN(l), MAX(l) FROM lists;

CREATE TABLE list_with_structs AS SELECT CASE WHEN i < 500 THEN [{'i': i}, {'i': i + 1}, {'i': i + 2}] ELSE [{'i': i}, {'i': 0}] END AS l FROM RANGE(0, 1000) AS t(i);

SELECT MIN(l), MAX(l) FROM list_with_structs;

INSERT INTO list_with_structs VALUES ([{'i': NULL}, {'i': 100}, NULL, {'i': NULL}]);

SELECT MIN(l), MAX(l) FROM list_with_structs;

INSERT INTO list_with_structs VALUES ([]), (NULL), ([NULL, NULL, NULL]);

SELECT MIN(l), MAX(l) FROM list_with_structs;

CREATE TABLE list_multi_member_struct AS SELECT [NULL, {'i': (1000 - i) // 5, 'j': i}, NULL] AS l FROM RANGE(0, 1000) AS t(i);

SELECT MIN(l), MAX(l) FROM list_multi_member_struct;

INSERT INTO list_multi_member_struct VALUES ([{'i': NULL, 'j': 42}]), ([NULL, NULL, {'i': 84, 'j': NULL}]);

SELECT MIN(l), MAX(l) FROM list_multi_member_struct;

CREATE TABLE struct_with_lists AS SELECT {'i': CASE WHEN i < 500 THEN [i, i + 1, i + 2] ELSE [i, 0] END} AS s FROM RANGE(0, 1000) AS t(i);

SELECT MIN(s), MAX(s) FROM struct_with_lists;

INSERT INTO struct_with_lists VALUES ({'i': []}), (NULL), ({'i': [NULL, NULL, NULL]});

SELECT MIN(s), MAX(s) FROM struct_with_lists;

INSERT INTO struct_with_lists VALUES ({'i': NULL});

SELECT MAX(s) FROM struct_with_lists;

CREATE TABLE arrays AS SELECT CAST((CASE WHEN i < 500 THEN [i, i + 1, i + 2] ELSE [i, 0, 0] END) AS BIGINT[3]) AS l FROM RANGE(0, 1000) AS t(i);

SELECT MIN(l), MAX(l) FROM arrays;

INSERT INTO arrays VALUES (NULL), ([NULL, NULL, NULL]);

SELECT MIN(l), MAX(l) FROM arrays;

CREATE TABLE float_values (f REAL);

INSERT INTO float_values VALUES ('0'), ('-3.4e38'), ('3.4e38'), ('nan'), ('inf'), ('-inf');

SELECT f, (SELECT MIN({'v': x}) FROM (VALUES (f)) AS t(x)) FROM float_values;

CREATE TABLE double_values (d DOUBLE);

INSERT INTO double_values VALUES ('0'), ('-1e308'), ('1e308'), ('nan'), ('inf'), ('-inf');

SELECT d, (SELECT MIN({'v': x}) FROM (VALUES (d)) AS t(x)) FROM double_values;

SELECT LIST_MODE();

CREATE TABLE range AS SELECT LIST(2) AS i FROM RANGE(0, 100) AS t1(i);

SELECT LIST_MODE(i) FROM range;

CREATE TABLE names (name TEXT[]);

INSERT INTO names VALUES (['pedro', 'pedro', 'pedro', 'hannes', 'hannes', 'mark', NULL]);

SELECT LIST_MODE(name) FROM names;

CREATE TABLE dates (v DATE[]);

INSERT INTO dates VALUES (['2021-05-02', '2021-05-02', '2021-05-02', '2020-02-29', '2020-02-29', '2004-09-01', NULL]);

SELECT LIST_MODE(v) FROM dates;

CREATE TABLE times (v TIME[]);

INSERT INTO times VALUES (['12:11:49.5', '12:11:49.5', '12:11:49.5', '06:30:00', '06:30:00', '21:15:22', NULL]);

SELECT LIST_MODE(v) FROM times;

CREATE TABLE timestamps (v TIMESTAMP[]);

INSERT INTO timestamps VALUES (['2021-05-02 12:11:49.5', '2021-05-02 12:11:49.5', '2021-05-02 12:11:49.5', '2020-02-29 06:30:00', '2020-02-29 06:30:00', '2004-09-01 21:15:22', NULL]);

SELECT LIST_MODE(v) FROM timestamps;

CREATE TABLE intervals (v INTERVAL[]);

INSERT INTO intervals VALUES ([INTERVAL '5 months 2 days 12 hours 11 minutes 49 seconds', INTERVAL '5 months 2 days 12 hours 11 minutes 49 seconds', INTERVAL '5 months 2 days 12 hours 11 minutes 49 seconds', INTERVAL '2 months 29 days 6 hours 30 minutes', INTERVAL '2 months 29 days 6 hours 30 minutes', INTERVAL '9 months 1 day 21 hours 15 minutes 22 seconds', NULL]);

SELECT LIST_MODE(v) FROM intervals;

CREATE TABLE hugeints (v INT128[]);

INSERT INTO hugeints VALUES ([5, 5, 5, 2, 2, 1, NULL]);

SELECT LIST_MODE(v) FROM hugeints;

CREATE TABLE aggr (v DECIMAL(10, 2)[]);

INSERT INTO aggr VALUES ([10, 10, 20, 21]), ([20, 20, 25, 30]), ([NULL]), ([]), (NULL);

SELECT LIST_MODE(v) FROM aggr;

SELECT LIST_MIN(LIST_CONCAT([1, 2], [-1]));

SELECT LIST_MIN(LIST_AGGR([1, 2], 'list'));

CREATE TABLE lists (l1 INT[], l2 INT[]);

INSERT INTO lists VALUES ([1, 2, 3], [4]), ([NULL, 1, -4, NULL], [NULL]), (NULL, NULL), ([NULL], [-4]), ([], []);

SELECT LIST_LAST(LIST_CONCAT(l1, l2)) FROM lists;

SELECT LIST_CONCAT(LIST(LIST_LAST(l1)), LIST(LIST_FIRST(l2))) FROM lists;

SELECT ARRAY_AGGREGATE([1, 2], 'min');

SELECT ARRAY_AGGR([1, 2], 'min');

SELECT LIST_AGGREGATE([1, 2], 'min');

SELECT LIST_AGGR(NULL, '${func_name}');

SELECT LIST_AGGR([NULL], '${func_name}');

SELECT LIST_AGGR([NULL], '${func_name}');

SELECT LIST_AGGR([NULL], '${func_name}');

SELECT LIST_AGGR([], '${func_name}');

SELECT * FROM (SELECT LIST_AGGR(NULL, '${func_name}'));

SELECT LIST_AGGR([], '${func_name}');

SELECT LIST_AGGR([], '${func_name}') WHERE 1 = 0;

SELECT LIST_PRODUCT();

CREATE TABLE integers (i INT[]);

INSERT INTO integers VALUES ([1, 2, 4]), (NULL), ([]), ([NULL]), ([1, 2, NULL, 4, NULL]);

SELECT LIST_PRODUCT(i) FROM integers;

CREATE TABLE prods AS SELECT LIST(2) AS i FROM RANGE(0, 100) AS t1(i);

SELECT LIST_PRODUCT(i) FROM prods;

DROP TABLE prods;

CREATE TABLE prods AS SELECT LIST(2) AS i FROM RANGE(0, 100 // 2) AS t1(i);

SELECT LIST_PRODUCT(i) FROM prods;

SELECT LIST_SEM();

SELECT LIST_SEM([1]);

CREATE TABLE aggr (k INT[], v DECIMAL(10, 2)[], v2 DECIMAL(10, 2)[]);

INSERT INTO aggr VALUES ([1, 2, 2, 2, 2], [10, 10, 20, 25, 30], [NULL, 11, 22, NULL, 35]);

SELECT LIST_SEM(k), LIST_SEM(v), LIST_SEM(v2) FROM aggr;

CREATE TABLE sems (l INT[]);

INSERT INTO sems VALUES ([1, 2, 2, 2, 2]), ([1, 2, NULL, 2, 2, NULL, 2]), ([]), ([NULL]), (NULL);

SELECT LIST_SEM(l) FROM sems;

SELECT LIST_SKEWNESS();

SELECT LIST_SKEWNESS([1]);

CREATE TABLE skew AS SELECT LIST(10) AS i FROM RANGE(0, 5) AS t1(i);

SELECT LIST_SKEWNESS(i) FROM skew;

SELECT LIST_SKEWNESS([1, 2]);

SELECT LIST_SKEWNESS([-2e307, 0, 2e307]);

CREATE TABLE aggr (k INT[], v DECIMAL(10, 2)[], v2 DECIMAL(10, 2)[]);

INSERT INTO aggr VALUES ([1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [10, 10, 10, 10, 20, 20, 25, 30, 30, 30, 30], [NULL, 11, 15, 18, 22, 25, NULL, 35, 40, 50, 51]), ([], NULL, [NULL]);

SELECT LIST_SKEWNESS(k), LIST_SKEWNESS(v), LIST_SKEWNESS(v2) FROM aggr;

CREATE TABLE aggr2 (v2 DECIMAL(10, 2)[]);

INSERT INTO aggr2 VALUES ([NULL, 11, 15, 18]), ([22, 25]), ([NULL]), ([35, 40, 50, 51]);

SELECT LIST_SKEWNESS(v2) FROM aggr2;

SELECT LIST_STRING_AGG();

SELECT LIST_STRING_AGG(['a', ',']);

SELECT LIST_STRING_AGG(['a']);

CREATE TABLE str_aggs (str TEXT[]);

INSERT INTO str_aggs VALUES (['a', ',']), ([NULL, ',']), (['a', NULL]), ([NULL, NULL]), (NULL), ([]), ([NULL]);

SELECT LIST_STRING_AGG(str) FROM str_aggs;

CREATE TABLE strings (g INT[], x TEXT[], y TEXT[]);

INSERT INTO strings VALUES ([1, 1, 2, 2, 2, 3, 4, 4, 4], ['a', 'b', 'i', NULL, 'j', 'p', 'x', 'y', 'z'], ['/', '-', '/', '-', '+', '/', '/', '-', '+']);

SELECT LIST_STRING_AGG(x), LIST_STRING_AGG(y), LIST_STRING_AGG(CAST(g AS TEXT[])) FROM strings;

SELECT LIST_STRING_AGG(x) FROM strings WHERE g > [100];

SELECT LIST_STRING_AGG([1, 2]);

SELECT LIST_STRING_AGG(CAST([1, 2] AS TEXT[]));

SELECT LIST_AGGR(['a'], 'group_concat');

CREATE TABLE long AS SELECT LIST('a') AS g FROM RANGE(0, 10, 1) AS t1(c), RANGE(0, 10, 1) AS t2(e);

SELECT LIST_COUNT(g), LIST_COUNT(g) FROM long;

SELECT LIST_STRING_AGG(g) FROM long;

SELECT LIST_SUM([2, 2]);

CREATE TABLE integers (i INT[]);

INSERT INTO integers SELECT LIST(i) FROM RANGE(0, 1000, 1) AS tbl(i);

INSERT INTO integers SELECT LIST(i) FROM RANGE(-999, 1000, 1) AS tbl(i);

INSERT INTO integers SELECT LIST(i) FROM RANGE(0, -1000, -1) AS tbl(i);

INSERT INTO integers VALUES (NULL), ([NULL]), ([]);

SELECT LIST_SUM(i) FROM integers;

CREATE TABLE doubles (n DOUBLE[]);

INSERT INTO doubles (n) VALUES ([CAST('9007199254740992' AS DOUBLE), CAST(1 AS DOUBLE), CAST(1 AS DOUBLE), CAST(0 AS DOUBLE)]);

SELECT LIST_AGGR(n, 'fsum') FROM doubles;

SELECT LIST_AGGR(n, 'sumKahan') FROM doubles;

SELECT LIST_AGGR(n, 'kahan_sum') FROM doubles;

CREATE TABLE bigints (i BIGINT[]);

INSERT INTO bigints SELECT LIST(i) FROM RANGE(4611686018427387904, 4611686018427388904, 1) AS tbl(i);

SELECT LIST_SUM(i) FROM bigints;

PRAGMA enable_verification;

CREATE TABLE integers (i INT);

INSERT INTO integers SELECT CASE WHEN i % 3 = 0 THEN NULL ELSE i END AS i FROM RANGE(0, 10000) AS t(i);

SELECT SUM(i > 500), SUM(i = 1), SUM(i IS NULL) FROM integers;

SELECT COUNT_IF(i > 500), COUNT_IF(i = 1), COUNT_IF(i IS NULL) FROM integers;

PRAGMA enable_verification;

SELECT SUM_NO_OVERFLOW(42);

SELECT SUM_NO_OVERFLOW(42.5);

CREATE TABLE uhugeints (h UINT128[]);

INSERT INTO uhugeints VALUES ([NULL, 1, 2]), (NULL), ([]), ([NULL]), ([1, 2, 3]);

SELECT LIST_FIRST(h), LIST_LAST(h), LIST_SUM(h) FROM uhugeints;

DELETE FROM uhugeints;

INSERT INTO uhugeints VALUES ([42.0, 1267650600228229401496703205376, 0, '1']);

SELECT LIST_MIN(h), LIST_MAX(h), LIST_SUM(h), LIST_FIRST(h), LIST_LAST(h) FROM uhugeints;

CREATE TABLE stddev_test (val INT[]);

INSERT INTO stddev_test VALUES ([42, 43, 42, 1000, NULL, NULL]), ([1, 1, 2, 2, 1, 3]), ([]), ([NULL]), (NULL);

SELECT LIST_STDDEV_SAMP([1]);

SELECT LIST_VAR_SAMP([1]);

SELECT ROUND(LIST_STDDEV_SAMP(val), 1) FROM stddev_test;

SELECT LIST_SUM(val), ROUND(LIST_STDDEV_SAMP(val), 1), LIST_MIN(val) FROM stddev_test;

SELECT ROUND(LIST_STDDEV_POP(val), 1) FROM stddev_test;

SELECT LIST_SUM(val), ROUND(LIST_STDDEV_POP(val), 1), LIST_MIN(val) FROM stddev_test;

SELECT ROUND(LIST_VAR_SAMP(val), 1) FROM stddev_test;

SELECT ROUND(LIST_AGGR(val, 'variance'), 1) FROM stddev_test;

SELECT LIST_SUM(val), ROUND(LIST_VAR_SAMP(val), 1), LIST_MIN(val) FROM stddev_test;

SELECT ROUND(LIST_VAR_POP(val), 1) FROM stddev_test;

SELECT LIST_SUM(val), ROUND(LIST_VAR_POP(val), 1), LIST_MIN(val) FROM stddev_test;

SELECT ROUND(LIST_AGGR(val, 'stddev'), 1) FROM stddev_test;

SELECT LIST_AGGR([0], 'stddev');

SELECT LIST_AGGR([0, 0], 'stddev');

SELECT LIST_AGGR([1e301, -1e301], 'stddev');

SELECT LIST_VAR_SAMP([1e301, -1e301]);

SELECT LIST_VAR_POP([1e301, -1e301]);

SELECT LIST_STDDEV_SAMP();

CREATE TABLE t0 (c0 DOUBLE[]);

INSERT INTO t0 VALUES ([1E200, 0]);

SELECT LIST_STDDEV_POP(c0) FROM t0;

PRAGMA enable_verification;

SELECT LIST_TRANSFORM([10], x -> SUM(1) + x);

SELECT LIST_FILTER([10], x -> SUM(1) > 0);

SELECT LIST_TRANSFORM([NULL, CAST('1992-09-20' AS DATE), CAST('2021-09-20' AS DATE)], elem -> EXTRACT('year' FROM elem) BETWEEN 2000 AND 2022);

SELECT LIST_FILTER([NULL, CAST('1992-09-20' AS DATE), CAST('2021-09-20' AS DATE)], elem -> EXTRACT('year' FROM elem) BETWEEN 2000 AND 2022);

SELECT LIST_TRANSFORM(['hello', 'duck', 'sunshine'], str -> CASE WHEN str LIKE '%e%' THEN 'e' ELSE 'other' END);

SELECT LIST_FILTER(['hello', 'duck', 'sunshine'], str -> (CASE WHEN str LIKE '%e%' THEN 'e' ELSE 'other' END) LIKE 'e');

SELECT LIST_TRANSFORM([CAST(2.0 AS DOUBLE)], x -> CAST(x AS INT));

SELECT LIST_FILTER([2], x -> CAST(x AS DOUBLE) = 2);

SELECT LIST_TRANSFORM([2.4, NULL, -4.7], x -> x <> 10.4);

SELECT LIST_FILTER([2.4, NULL, -4.7], x -> x <> -4.7);

SELECT LIST_TRANSFORM([TRUE, FALSE, NULL], x -> x AND TRUE);

SELECT LIST_FILTER([TRUE, FALSE, NULL], x -> x AND TRUE);

SELECT LIST_TRANSFORM([CAST('1992-03-22' AS TIMESTAMP), CAST('209-03-22' AS TIMESTAMP), CAST('1700-03-22' AS TIMESTAMP)], x -> CENTURY(x));

SELECT LIST_FILTER([CAST('1992-03-22' AS TIMESTAMP), CAST('209-03-22' AS TIMESTAMP), CAST('1700-03-22' AS TIMESTAMP)], x -> CENTURY(x) > 16);

SELECT LIST_TRANSFORM([2], x -> x + x);

SELECT LIST_FILTER([2], x -> x + x = 4);

SELECT LIST_TRANSFORM([2], x -> (SELECT 1 - x) * x);

SELECT LIST_FILTER([2], x -> (SELECT 1 - x) * x > 2);

CREATE MACRO list_contains_macro(x, y) AS (SELECT list_contains(x, y));

SELECT LIST_FILTER([[1, 2, 1], [1, 2, 3], [1, 1, 1]], x -> LIST_CONTAINS_MACRO(x, 3));

SELECT LIST_TRANSFORM([1], x -> x = UNNEST([1]));

SELECT LIST_FILTER([1], x -> x = UNNEST([1]));

CREATE TABLE my_window (l INT[], g INT, o INT);

INSERT INTO my_window VALUES ([1], 1, 1), ([1, NULL, 2], 1, 2), ([], 2, 3), (NULL, NULL, NULL), ([1, 2], 2, 4);

SELECT LIST(LIST_TRANSFORM(l, e -> e + 1)) OVER (PARTITION BY g ORDER BY o) FROM my_window ORDER BY ALL;

PRAGMA enable_verification;

SELECT [1] AS l, LIST_FILTER([1], l -> l > 1);

SELECT LIST_FILTER(NULL, x -> x > 1);

SELECT LIST_FILTER([TRUE], x -> x);

SELECT LIST_FILTER(['duck', 'a', 'ö'], duck -> CONTAINS(CONCAT(duck, 'DB'), 'duck'));

SELECT LIST_FILTER([1, 2, 3], x -> x % 2 = 0);

SELECT LIST_FILTER([], x -> x > 1);

SELECT LIST_FILTER([1, NULL, -2, NULL], x -> x % 2 <> 0);

SELECT LIST_FILTER([5, -6, NULL, 7], x -> x > 0);

SELECT LIST_FILTER([5, NULL, 7, NULL], x -> NOT x IS NULL);

CREATE TABLE lists (n INT, l INT[]);

INSERT INTO lists VALUES (1, [1]), (2, [1, 2, 3]), (3, NULL), (4, [-1, NULL, 2]);

SELECT LIST_FILTER(l, x -> x + 1 <= 2) FROM lists;

SELECT LIST_FILTER(l, x -> x <= n) FROM lists;

SELECT LIST_FILTER(l, x -> NOT x IS NULL) FROM lists;

SELECT LIST_FILTER(['x', 'abc', 'z'], x -> CONTAINS(x || '0', 'a'));

SELECT LIST_TRANSFORM([[1, 3], [2, 3, 1], [2, 4, 2]], x -> LIST_FILTER(x, y -> y <= 2));

SELECT LIST_CONCAT(CAST(LIST_FILTER([42, -42, 8, -5, 2], elem -> elem > 0) AS TEXT[]), LIST_FILTER(['enjoy', 'life', 'to', 'the', 'fullest'], str -> str ILIKE '%e%'));

SELECT LIST_FILTER([1, NULL], arr_elem -> arr_elem < 4);

CREATE TABLE empty_lists (l INT[]);

INSERT INTO empty_lists VALUES ([]), ([]), ([]), ([1, NULL, -1]), ([]), (NULL), (NULL), ([]), ([1, 2, 3]), ([]), ([]), ([]);

SELECT LIST_FILTER(l, x -> x > 0) FROM empty_lists;

CREATE TABLE large_lists AS SELECT range % 4 AS g, LIST(range) AS l FROM RANGE(0, 10000) GROUP BY range % 4;

SELECT g, LIST_COUNT(LIST_FILTER(l, x -> x % 2 = 0)) FROM large_lists ORDER BY g;

CREATE TABLE corr_test (n INT, l TEXT[], g INT);

INSERT INTO corr_test VALUES (1, ['a', '11', '23'], 1), (3, [NULL, '2', 'hello', 'wie gehts'], 1), (NULL, NULL, 1), (0, [], 1);

SELECT n FROM corr_test WHERE LIST_COUNT(LIST_FILTER(l, elem -> LENGTH(elem) >= n)) >= n;

SELECT ct.n FROM corr_test AS ct WHERE LIST_COUNT(ct.l) < (SELECT LIST_COUNT(LIST_FILTER(LIST_CONCAT(CAST(LIST(c.n) AS TEXT[]), ct.l), a -> LENGTH(a) >= 1)) FROM corr_test AS c GROUP BY c.g) ORDER BY ct.n;

SELECT (SELECT LIST_FILTER(l, elem -> LENGTH(elem) >= 1)) FROM corr_test;

SELECT (SELECT LIST_FILTER(l, elem -> LENGTH(elem) >= n)) FROM corr_test;

SELECT (SELECT (SELECT (SELECT LIST_FILTER(l, elem -> LENGTH(elem) >= 1)))) FROM corr_test;

SELECT (SELECT (SELECT (SELECT LIST_FILTER(l, elem -> LENGTH(elem) >= 1)))) FROM corr_test;

CREATE TABLE lambdas AS SELECT [5, 6] AS col1, [4, 8] AS col2;

SELECT LIST_APPLY(col1, x -> LIST_FILTER(col2, y -> y)) FROM lambdas;

SELECT LIST_APPLY([5, 6], x -> LIST_FILTER([4, 8], y -> y));

SELECT LIST_APPLY([[5, 6]], x -> LIST_FILTER(x, y -> y));

SELECT LIST_TRANSFORM([['abc']], x -> LIST_FILTER(x, y -> y));

SELECT [[y] FOR y IN RANGE(0, 5)] AS c, [x FOR x IN c IF NOT x IS NULL];

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

SELECT LIST_REDUCE([1], x -> x, 3);

SELECT LIST_REDUCE([TRUE], x -> x, x -> x);

SELECT [STR_SPLIT('01:08:22', ':'), x -> CAST(x AS INT)];

SELECT LIST_APPLY(i, x -> x * 3 + 2 / zz) FROM (VALUES ([1, 2, 3])) AS tbl(i);

SELECT (x -> x) + 1 FROM (VALUES ([1, 2, 3])) AS tbl(i);

SELECT LIST_APPLY(i, y + (1 -> x) + 1) FROM (VALUES ([1, 2, 3])) AS tbl(i);

SELECT LIST_APPLY(i, (a.x -> x) + 1) FROM (VALUES ([1, 2, 3])) AS tbl(i);

SELECT LIST_APPLY(i, x -> x + 1 AND y + 1) FROM (VALUES ([1, 2, 3])) AS tbl(i);

CREATE TABLE l_filter_test (l INT[]);

SELECT LIST_TRANSFORM([1, 2], (x, y, z) -> x + y + z);

SELECT LIST_FILTER([1, 2], (x, y, z) -> x >= y AND y >= z);

SELECT COS(x -> x + 1);

SELECT COS([1], x -> x + 1);

CREATE TABLE lambda_check (i BIGINT[], CHECK (LIST_FILTER(i, x -> x % 2 = 0) = []));

CREATE TABLE lambda_check (i BIGINT[], CHECK (LIST_TRANSFORM(i, x -> x % 2) = []));

CREATE TABLE lambda_check (i BIGINT[], CHECK ([x + 1 FOR x IN i IF x > 0] = []));

CREATE TABLE lambda_check (i BIGINT[], j BIGINT[], CHECK ((LIST_APPLY(i, x -> LIST_COUNT(LIST_FILTER(j, y -> y % 2 = 0)) + x)) = []));

CREATE TABLE lambda_check (i BIGINT[], j BIGINT[], CHECK ((LIST_APPLY(i, x -> LIST_COUNT(LIST_FILTER(j, y -> y % 2 = 0)) + x)) = []));

CREATE TABLE tbl AS SELECT {'a': 10} AS s;

SELECT LIST_TRANSFORM(UNNEST(s), x -> UNNEST(x)) FROM tbl;

CREATE TABLE nested_list (i INT[][], other INT[]);

INSERT INTO nested_list VALUES ([[1, 2]], [3, 4]);

SELECT LIST_TRANSFORM(i, x -> UNNEST(x)) FROM nested_list;

SELECT LIST_TRANSFORM(i, x -> UNNEST(other)) FROM nested_list;

CREATE TABLE map_tbl (m MAP(INT, INT));

SELECT [UNNEST([x.key FOR y IN RANGE(0, x.value)]) FOR x IN MAP_ENTRIES(m)] FROM map_tbl;

SELECT LIST_TRANSFORM(MAP_ENTRIES(m), x -> UNNEST(RANGE(0, x.value))) FROM map_tbl;

CREATE OR REPLACE FUNCTION demo(n, z) AS TABLE(SELECT LIST_TRANSFORM(RANGE(0, n), x -> z) AS row);

SELECT * FROM DEMO(3, 0);

CREATE OR REPLACE FUNCTION demo(n, z) AS TABLE(SELECT LIST_TRANSFORM(RANGE(0, n), x -> 0 + z) AS row);

SELECT * FROM DEMO(3, 0);

CREATE OR REPLACE FUNCTION demo(n, z) AS TABLE(SELECT LIST_TRANSFORM(RANGE(0, n), x -> (z -> '$.a')) AS row);

SELECT * FROM DEMO(3, {'a': 2});

CREATE TABLE tbl (tag_product TEXT);

INSERT INTO tbl VALUES ('milk chickpeas apples'), ('chocolate pepper');

SELECT tag_product, LIST_AGGR(LIST_TRANSFORM(STR_SPLIT(tag_product, ' '), word -> LOWER(word)), 'string_agg', ',') AS tag_material FROM tbl GROUP BY tag_product ORDER BY ALL;

SELECT 1, LIST_TRANSFORM([5, 4, 3], x -> x + 1) AS lst GROUP BY 1;

CREATE TABLE uniform_purchase_forecast AS SELECT 'gold' AS color, 10 AS forecast UNION ALL SELECT 'blue', 15 UNION ALL SELECT 'red', 300;

SELECT LIST(forecast).list_transform(x -> x + 10) FROM uniform_purchase_forecast;

SELECT * FROM (SELECT 1) GROUP BY ALL HAVING LIST_FILTER(NULL, x -> x);

SELECT * FROM TEST_ALL_TYPES() GROUP BY ALL HAVING ARRAY_INTERSECT(NULL, NULL);

SELECT x FROM (VALUES (42)) AS t(x) GROUP BY x HAVING LIST_FILTER(NULL, lambda_param -> lambda_param = 1);

PRAGMA enable_verification;

CREATE TABLE test AS SELECT range AS i FROM RANGE(0, 3);

create macro my_macro(i) as (select i in (select i from test));

CREATE MACRO list_contains_macro(x, y) AS (list_contains(x, y));

SELECT LIST_FILTER([[1, 2, 1], [1, 2, 3], [1, 1, 1]], x -> LIST_CONTAINS_MACRO(x, 3));

CREATE MACRO macro_with_lambda(list, num) AS (list_transform(list, x -> x + num));

SELECT LIST_FILTER([[1, 2], NULL, [3], [4, NULL]], f -> LIST_COUNT(MACRO_WITH_LAMBDA(f, 2)) > 1);

CREATE MACRO some_macro(x, y, z) AS (SELECT list_transform(x, a -> x + y + z));

SELECT SOME_MACRO([1, 2], 3, 4);

CREATE MACRO reduce_macro(list, num) AS (list_reduce(list, (x, y) -> x + y + num));

SELECT REDUCE_MACRO([1, 2, 3, 4], 5);

CREATE MACRO other_reduce_macro(list, num, bla) AS (SELECT list_reduce(list, (x, y) -> list + x + y + num + bla));

SELECT OTHER_REDUCE_MACRO([1, 2, 3, 4], 5, 6);

CREATE MACRO scoping_macro(x, y, z) AS (SELECT list_transform(x, x -> x + y + z));

SELECT SCOPING_MACRO([11, 22], 3, 4);

CREATE OR REPLACE MACRO foo(bar) AS (SELECT apply([bar], x -> 0));

CREATE TABLE t1 AS SELECT [1, 2, 3] AS x;

SELECT LIST_APPLY(['hello'], x -> x) FROM t1;

CREATE TABLE t2 AS SELECT [[1], [2], [3]] AS x;

SELECT LIST_TRANSFORM([[1], [2], [3]], x -> x[1]) FROM t2;

CREATE TABLE l_test (l INT[]);

INSERT INTO l_test VALUES ([1, 2, 3]);

SELECT l, LIST_TRANSFORM(l, l -> l + 1) FROM l_test;

CREATE TABLE l_filter_test (l INT[]);

INSERT INTO l_filter_test VALUES ([1, 2]);

SELECT l, LIST_FILTER(l, l -> l > 1) FROM l_filter_test;

SELECT LIST_APPLY(i, (a.x -> a).x + 1) FROM (VALUES ([1, 2, 3])) AS tbl(i);

CREATE TABLE qualified_tbl (x INT[]);

INSERT INTO qualified_tbl VALUES ([1, 2]);

SELECT LIST_TRANSFORM(qualified_tbl.x, x -> (qualified_tbl.x)[1] + 1 + x) FROM qualified_tbl;

SELECT LIST_TRANSFORM(qualified_tbl.x, (qualified_tbl.x -> qualified_tbl).x + 1) FROM qualified_tbl;

SELECT LIST_TRANSFORM([1, 2], x -> LIST_TRANSFORM([3, 4], x -> x));

SELECT LIST_HAS_ALL([variable_has_all FOR variable_has_all IN ['a']], ['b']) AS list_comp_result;

SELECT LIST_HAS_ALL(LIST_TRANSFORM(['a'], variable_has_all -> variable_has_all), ['b']) AS list_transform_result;

SELECT LIST_HAS_ANY(['b'], LIST_TRANSFORM(['a'], variable_has_any -> variable_has_any)) AS list_transform_result;

SELECT LIST_INTERSECT(LIST_INTERSECT([1], [1]), [1]);

SELECT LIST_INTERSECT([1], LIST_INTERSECT([1], [1]));

SELECT LIST_HAS_ANY([LIST_HAS_ANY([1], [1])], [1]);

SELECT LIST_HAS_ANY([1], [LIST_HAS_ANY([1], [1])]);

SELECT LIST_HAS_ALL([LIST_HAS_ALL([1], [1])], [1]);

SELECT LIST_HAS_ALL([1], [LIST_HAS_ALL([1], [1])]);

SELECT LIST_HAS_ANY([LIST_HAS_ALL(LIST_INTERSECT([1], [1]), [1])], [1]);

SELECT LIST_HAS_ALL([LIST_HAS_ANY(LIST_INTERSECT([1], [1]), [1])], [1]);

SELECT LIST_INTERSECT([LIST_HAS_ALL([LIST_HAS_ANY([1], [1])], [1])], [1]);

SELECT LIST_INTERSECT(LIST_INTERSECT([1, 2, 3, 4], [4, 5, 6, 7]), LIST_INTERSECT([4, 5, 6, 7], [1, 2, 3, 4]));

CREATE TABLE tbl_qualified AS SELECT 42 AS x;

SELECT x, LIST_TRANSFORM([1], x -> x) FROM tbl_qualified;

SELECT LIST_TRANSFORM([1, 2, 3], (SQRT(xxx.z) -> xxx).z + 1) AS l;

SELECT LIST_TRANSFORM([1, 2, 3], "x.y" -> "x.y" + x.y) AS l FROM (VALUES (42), (84)) AS x(y);

SELECT LIST_TRANSFORM([1, 2, 3], "x.y" -> "x.y" + x.y) AS l FROM (VALUES (42), (84)) AS x(y);

PRAGMA enable_verification;

SELECT LIST_TRANSFORM(LIST_FILTER([0, 1, 2, 3, 4, 5], x -> x % 2 = 0), y -> y * y);

SELECT [x * x FOR x IN [0, 1, 2, 3, 4, 5] IF x % 2 = 0];

SELECT LIST_FILTER(LIST_FILTER([2, 4, 3, 1, 20, 10, 3, 30], x -> x % 2 = 0), y -> y % 5 = 0);

SELECT [x FOR x IN [x FOR x IN [2, 4, 3, 1, 20, 10, 3, 30] IF x % 2 = 0] IF x % 5 = 0];

SELECT LIST_FILTER(['apple', 'banana', 'cherry', 'kiwi', 'mango'], fruit -> CONTAINS(fruit, 'a'));

SELECT [fruit FOR fruit IN ['apple', 'banana', 'cherry', 'kiwi', 'mango'] IF CONTAINS(fruit, 'a')];

CREATE TABLE fruit_tbl AS SELECT ['apple', 'banana', 'cherry', 'kiwi', 'mango'] AS fruits;

SELECT [fruit FOR fruit IN fruits IF CONTAINS(fruit, 'a')] FROM fruit_tbl;

SELECT LIST_TRANSFORM([[1, NULL, 2], [3, NULL]], a -> LIST_FILTER(a, x -> NOT x IS NULL));

SELECT [LENGTH(x) FOR x IN ['goodbye', 'cruel', 'world']];

CREATE TABLE word_tbl AS SELECT ['goodbye', 'cruel', 'world'] AS words;

SELECT [LENGTH(x) FOR x IN words] FROM word_tbl;

SELECT [LENGTH(x) FOR x IN words] FROM word_tbl;

SELECT [LENGTH(x) FOR x IN words] FROM word_tbl;

WITH base AS (SELECT [4, 5, 6] AS l) SELECT [x + 5 FOR x IN l] AS filtered FROM base;

WITH base AS (SELECT [4, 5, 6] AS l) SELECT [x + 5 FOR x IN l] AS filtered FROM base;

WITH base AS (SELECT [4, 5, 6] AS l) SELECT [x + 5 FOR x IN l] AS filtered FROM base;

PRAGMA enable_verification;

SELECT LIST_REDUCE([1, 2, 3], (x, y) -> x + y);

SELECT LIST_REDUCE([1, 2, 3], (x, y) -> x * y);

SELECT LIST_REDUCE([100, 10, 1], (x, y, i) -> x - y - i);

SELECT LIST_REDUCE([1, 2, 3], (x, y) -> y - x);

SELECT LIST_REDUCE([1, 2, 3], (x, y) -> x - y);

SELECT LIST_REDUCE([1, 2, 3], (x, y, i) -> x + y + i);

SELECT LIST_REDUCE([NULL], (x, y, i) -> x + y + i);

SELECT LIST_REDUCE(NULL, (x, y, i) -> x + y + i);

SELECT LIST_REDUCE(['Once', 'upon', 'a', 'time'], (x, y) -> x || ' ' || y);

SELECT LIST_REDUCE(['a', 'b', 'c', 'd'], (x, y, i) -> x || ' - ' || CAST(i AS TEXT) || ' - ' || y);

SELECT LIST_REDUCE([], (x, y, i) -> x + y + i);

SELECT LIST_REDUCE([1, 2, 3], (x, y) -> CAST((x * y) AS TEXT) || 'please work');

SELECT LIST_REDUCE([1, 2], x -> x);

SELECT LIST_REDUCE([1, 2], NULL);

SELECT LIST_REDUCE([1, 2], NULL);

CREATE TABLE t1 (a INT[]);

INSERT INTO t1 VALUES ([1, 2, 3]);

INSERT INTO t1 VALUES ([666]);

INSERT INTO t1 VALUES (NULL);

INSERT INTO t1 VALUES ([44, 55]);

INSERT INTO t1 VALUES ([-1, NULL, -2]);

SELECT LIST_REDUCE(a, (x, y) -> x + y) FROM t1;

SELECT LIST_REDUCE(a, (x, y, i) -> x + y + i) FROM t1;

INSERT INTO t1 VALUES ([]);

SELECT LIST_REDUCE(a, (x, y) -> x + y) FROM t1;

DROP TABLE t1;

CREATE TABLE t1 (a TEXT[]);

INSERT INTO t1 VALUES (['Once', 'upon', 'a', 'time']), (NULL), (['there', 'was', 'a', 'table']), (['with', 'a', 'list', 'of', 'strings']), (['and', 'it', 'was', NULL]);

SELECT LIST_REDUCE(a, (x, y) -> x || ' ' || y) FROM t1;

INSERT INTO t1 VALUES ([]);

SELECT LIST_REDUCE(a, (x, y) -> x || ' ' || y) FROM t1;

CREATE TABLE right_only (v TEXT[], i INT);

INSERT INTO right_only VALUES (['blue', 'babbling', 'brook'], 1), (['dogs', 'doing', 'dishes'], 2), (['she', 'sells', 'seashells'], 3);

SELECT LIST_REDUCE(v, (x, y) -> y[i]) FROM right_only;

SELECT LIST_REDUCE([1, 2, 3], (x, y) -> LIST_REDUCE([4, 5, 6], (a, b) -> x + y + a + b));

SELECT LIST_REDUCE([1, 2, 3], (x, y) -> LIST_REDUCE([], (a, b) -> x + y + a + b));

SELECT LIST_REDUCE([1, 2, 3], (x, y, x_i) -> LIST_REDUCE([4, 5, 6], (a, b, a_i) -> x + y + a + b + x_i + a_i));

SELECT LIST_REDUCE([1, 2, 3], (x, y, x_i) -> LIST_REDUCE([], (a, b, a_i) -> x + y + a + b + x_i + a_i));

SELECT LIST_REDUCE([[10, 20], [30, 40], [50, 60]], (x, y) -> LIST_PACK(LIST_REDUCE(x, (l, m) -> l + m) + LIST_REDUCE(y, (n, o) -> n + o)));

SELECT LIST_REDUCE([[1, 2, 3], [4, 5, 6], [7, 8, 9]], (x, y) -> LIST_PACK(LIST_REDUCE(x, (l, m) -> l + m) + LIST_REDUCE(y, (n, o) -> n + o)));

SELECT LIST_REDUCE([[10, 20], [30, 40], NULL, [NULL, 60], NULL], (x, y) -> LIST_PACK(LIST_REDUCE(x, (l, m) -> l + m) + LIST_REDUCE(y, (n, o) -> n + o)));

SELECT LIST_REDUCE(['a', 'b', 'c', 'd'], (x, y) -> LIST_REDUCE(['1', '2', '3', '4'], (a, b) -> x || y || a || b));

SELECT LIST_REDUCE([['a', 'b'], ['c', 'd'], ['e', 'f']], (x, y) -> LIST_PACK(LIST_REDUCE(x, (a, b) -> a || b) || LIST_REDUCE(y, (c, d) -> c || d)));

CREATE TABLE nested (n INT[], l INT[]);

INSERT INTO nested VALUES ([1, 2, 3], [4, 5, 6]), (NULL, NULL), (NULL, [110, 111, 112]), ([77, 88, 99], [55, 66, NULL]);

SELECT LIST_REDUCE(n, (x, y) -> LIST_REDUCE(l, (a, b) -> x + y + a + b)) FROM nested;

SELECT LIST_REDUCE(n, (x, y, x_i) -> LIST_REDUCE(l, (a, b, a_i) -> x + y + a + b + x_i + a_i)) FROM nested;

SELECT LIST_REDUCE(n, (x, y, x_i) -> LIST_REDUCE(l, (a, b, a_i) -> x + y + x_i < a + b + a_i)) FROM nested;

INSERT INTO nested VALUES ([4, 5, 6], []);

SELECT LIST_REDUCE(n, (x, y) -> LIST_REDUCE(l, (a, b) -> x + y + a + b)) FROM nested;

DROP TABLE nested;

CREATE TABLE nested (n INT[][]);

INSERT INTO nested VALUES ([[10, 20], [30, 40], [50, 60]]), ([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), (NULL), ([[NULL, 60], [70, NULL], [NULL, NULL]]);

SELECT LIST_REDUCE(n, (x, y) -> LIST_PACK(LIST_REDUCE(x, (l, m) -> l + m) + LIST_REDUCE(y, (j, k) -> j + k))) FROM nested;

INSERT INTO nested VALUES ([[4, 5, 6], []]);

SELECT LIST_REDUCE(n, (x, y) -> LIST_PACK(LIST_REDUCE(x, (l, m) -> l + m) + LIST_REDUCE(y, (j, k) -> j + k))) FROM nested;

DROP TABLE nested;

CREATE TABLE nested (n TEXT[], l TEXT[]);

INSERT INTO nested VALUES (['a', 'b', 'c', 'd'], ['1', '2', '3', '4']), (NULL, NULL), (NULL, ['110', '111', '112']), (['77', '88', '99'], ['55', '66', NULL]);

SELECT LIST_REDUCE(n, (x, y) -> LIST_REDUCE(l, (a, b) -> x || y || a || b)) FROM nested;

DROP TABLE nested;

SELECT LIST_REDUCE([1, 2, 3], (x, y) -> LIST_REDUCE([4, 5, 6], (a, b) -> LIST_REDUCE([7, 8, 9], (c, d) -> x + y + a + b + c + d)));

SELECT LIST_REDUCE([1, 2, 3], (x, y, x_i) -> LIST_REDUCE([4, 5, 6], (a, b, a_i) -> LIST_REDUCE([7, 8, 9], (c, d, c_i) -> x + y + a + b + c + d + x_i + a_i + c_i)));

SELECT LIST_REDUCE([[[10, 20], [100, 200]], [[30, 40], [300, 400]], [[50, 60], [500, 600]]], (x, y) -> LIST_PACK(LIST_REDUCE(x, (l, m) -> LIST_PACK(LIST_REDUCE(l, (a, b) -> a + b) + LIST_REDUCE(m, (c, d) -> c + d))) + LIST_REDUCE(y, (n, o) -> LIST_PACK(LIST_REDUCE(n, (a, b) -> a + b) + LIST_REDUCE(o, (c, d) -> c + d)))));

CREATE TABLE nested (n INT[], l INT[], m INT[]);

INSERT INTO nested VALUES ([1, 2, 3], [4, 5, 6], [7, 8, 9]), (NULL, NULL, NULL), (NULL, [110, 111, 112], [113, 114, 115]), ([77, 88, 99], [55, 66, NULL], [44, 33, 22]);

SELECT LIST_REDUCE(n, (x, y) -> LIST_REDUCE(l, (a, b) -> LIST_REDUCE(m, (c, d) -> x + y + a + b + c + d))) FROM nested;

DROP TABLE nested;

CREATE TABLE nested (n INT[][][]);

INSERT INTO nested VALUES ([[[10, 20], [100, 200]], [[30, 40], [300, 400]], [[50, 60], [500, 600]]]), ([[[1, 2, 3], [4, 5, 6], [7, 8, 9]]]), (NULL), ([[[NULL, 60], [70, NULL], [NULL, NULL]]]);

SELECT LIST_REDUCE(n, (x, y) -> LIST_PACK(LIST_REDUCE(x, (l, m) -> LIST_PACK(LIST_REDUCE(l, (a, b) -> a + b) + LIST_REDUCE(m, (c, d) -> c + d))) + LIST_REDUCE(y, (e, f) -> LIST_PACK(LIST_REDUCE(e, (a, b) -> a + b) + LIST_REDUCE(f, (c, d) -> c + d))))) FROM nested;

CREATE TABLE where_clause (a INT[]);

INSERT INTO where_clause VALUES ([10, 2, 1]), ([1, 2, 3]), ([15, 4, 3]), ([3, 4, 5]), ([11, 2, 3, 4, 5]), ([5, 4, 3, 2, 1]), ([100, 2, 3, 4, 5, 6, 7, 8, 9, 10]);

SELECT a FROM where_clause WHERE LIST_REDUCE(a, (x, y) -> x - y) > 0;

CREATE TABLE t_struct (s STRUCT(v TEXT, i INT)[]);

INSERT INTO t_struct VALUES ([ROW('a', 1), ROW('b', 2)]), ([ROW('c', 3), ROW('d', 4)]), ([ROW('e', 5), ROW('f', 6)]), ([ROW('g', 7), ROW('h', 8)]), ([ROW('i', 9), ROW('j', 10)]);

SELECT LIST_REDUCE(s, (a, b) -> ROW(a.v || b.v, a.i + b.i)) FROM t_struct;

CREATE OR REPLACE TABLE df (s STRUCT(a INT, b INT)[]);

INSERT INTO df VALUES ([ROW(0, 0), ROW(0, 1), ROW(0, 2)]);

SELECT LIST_REDUCE(s, (curr, next) -> {'a': curr.a + (next.b - curr.b), 'b': next.b}) FROM df;

SELECT LIST_REDUCE([{'a': 0, 'b': 0}, {'a': 0, 'b': 1}, {'a': 0, 'b': 2}], (curr, next) -> {'a': curr.a + (next.b - curr.b), 'b': next.b});

PRAGMA enable_verification;

SELECT LIST_REDUCE([1, 2, 3], (x, y) -> x + y, 100);

SELECT LIST_REDUCE([1, 2, 3], (x, y) -> x * y, -1);

SELECT LIST_REDUCE([100, 10, 1], (x, y, i) -> x - y - i, 1000);

SELECT LIST_REDUCE([1, 2, 3], (x, y) -> y - x, -1);

SELECT LIST_REDUCE([1, 2, 3], (x, y) -> x - y, 10);

SELECT LIST_REDUCE([1, 2, 3], (x, y, i) -> x + y + i, -1);

SELECT LIST_REDUCE([1, 2, 3], (x, y) -> x + y, NULL);

SELECT LIST_REDUCE([NULL], (x, y, i) -> x + y + i, 100);

SELECT LIST_REDUCE(NULL, (x, y, i) -> x + y + i, 100);

SELECT LIST_REDUCE(['Once', 'upon', 'a', 'time'], (x, y) -> x || ' ' || y, '-->');

SELECT LIST_REDUCE([], (x, y) -> x + y, 100);

SELECT LIST_REDUCE(['a', 'b', 'c'], (x, y) -> x || y, NULL);

SELECT LIST_REDUCE([1, 2, 3], (x, y) -> (x * y), 'i dare you to cast me');

SELECT LIST_REDUCE([1, 2], x -> x, 100);

SELECT LIST_REDUCE([1, 2], NULL, 100);

SELECT LIST_REDUCE([1, 2], NULL, 100);

CREATE TABLE t1 (l INT[], initial INT);

INSERT INTO t1 VALUES ([1, 2, 3], 100);

INSERT INTO t1 VALUES ([666], 1000);

INSERT INTO t1 VALUES ([1, 2, 3], NULL);

INSERT INTO t1 VALUES (NULL, 2);

INSERT INTO t1 VALUES ([44, 55], 3);

INSERT INTO t1 VALUES ([-1, NULL, -2], 4);

SELECT LIST_REDUCE(l, (x, y) -> x + y, initial) FROM t1;

SELECT LIST_REDUCE(l, (x, y, i) -> x + y + i, initial) FROM t1;

INSERT INTO t1 VALUES ([], 100);

SELECT LIST_REDUCE(l, (x, y) -> x + y) FROM t1;

SELECT LIST_REDUCE(l, (x, y) -> x + y, initial) FROM t1;

DROP TABLE t1;

CREATE TABLE t1 (l TEXT[], initial TEXT);

INSERT INTO t1 VALUES (['a', 'b'], '1:'), (NULL, '2:'), (['e', 'f'], '3:');

SELECT LIST_REDUCE(l, (x, y) -> x || ' ' || y, initial) FROM t1;

INSERT INTO t1 VALUES (['h', NULL], '4:'), (['i', 'j'], '5:');

SELECT LIST_REDUCE(l, (x, y) -> x || ' ' || y, initial) FROM t1;

INSERT INTO t1 VALUES (['x', 'y'], NULL);

SELECT LIST_REDUCE(l, (x, y) -> x || ' ' || y, initial) FROM t1;

INSERT INTO t1 VALUES ([], '7:');

SELECT LIST_REDUCE(l, (x, y) -> x || ' ' || y) FROM t1;

SELECT LIST_REDUCE(l, (x, y) -> x || ' ' || y, initial) FROM t1;

CREATE TABLE right_only (v TEXT[], i INT);

INSERT INTO right_only VALUES (['blue', 'babbling', 'brook'], 1), (['dogs', 'doing', 'dishes'], 2), (['she', 'sells', 'seashells'], 3);

SELECT LIST_REDUCE(v, (x, y) -> y[i]) FROM right_only;

SELECT LIST_REDUCE([1, 2, 3], (x, y) -> LIST_REDUCE([4, 5, 6], (a, b) -> x + y + a + b, 100), 1000);

SELECT LIST_REDUCE([1, 2, 3], (x, y) -> LIST_REDUCE([], (a, b) -> x + y + a + b), 1000);

SELECT LIST_REDUCE([1, 2, 3], (x, y, x_i) -> LIST_REDUCE([4, 5, 6], (a, b, a_i) -> x + y + a + b + x_i + a_i, 100), 1000);

SELECT LIST_REDUCE([1, 2, 3], (x, y, x_i) -> LIST_REDUCE([], (a, b, a_i) -> x + y + a + b + x_i + a_i), 1000);

SELECT LIST_REDUCE([[10, 20], [30, 40], [50, 60]], (x, y) -> LIST_PACK(LIST_REDUCE(x, (l, m) -> l + m) + LIST_REDUCE(y, (n, o) -> n + o)), [100, 200]);

SELECT LIST_REDUCE([[1, 2, 3], [4, 5, 6], [7, 8, 9]], (x, y) -> LIST_PACK(LIST_REDUCE(x, (l, m) -> l + m) + LIST_REDUCE(y, (n, o) -> n + o)), [100]);

SELECT LIST_REDUCE([[10, 20], [30, 40], NULL, [NULL, 60], NULL], (x, y) -> LIST_PACK(LIST_REDUCE(x, (l, m) -> l + m) + LIST_REDUCE(y, (n, o) -> n + o)), [100]);

SELECT LIST_REDUCE(['a', 'b'], (x, y) -> LIST_REDUCE(['1', '2'], (a, b) -> x || y || a || b, 'B'), 'A');

SELECT LIST_REDUCE([['a', 'b'], ['c', 'd'], ['e', 'f']], (x, y) -> LIST_PACK(LIST_REDUCE(x, (a, b) -> a || b) || LIST_REDUCE(y, (c, d) -> c || d)), ['->']);

CREATE TABLE nested (n INT[], l INT[], initial INT);

INSERT INTO nested VALUES ([1, 2, 3], [4, 5, 6], 100), (NULL, NULL, 100), (NULL, [110, 111, 112], 44), ([77, 88, 99], [55, 66, NULL], 1);

SELECT LIST_REDUCE(n, (x, y) -> LIST_REDUCE(l, (a, b) -> x + y + a + b), initial) FROM nested;

SELECT LIST_REDUCE(n, (x, y, x_i) -> LIST_REDUCE(l, (a, b, a_i) -> x + y + a + b + x_i + a_i), initial) FROM nested;

SELECT LIST_REDUCE(n, (x, y, x_i) -> LIST_REDUCE(l, (a, b, a_i) -> x + y + x_i < a + b + a_i), initial) FROM nested;

INSERT INTO nested VALUES ([4, 5, 6], [], -1);

SELECT LIST_REDUCE(n, (x, y) -> LIST_REDUCE(l, (a, b) -> x + y + a + b), initial) FROM nested;

DROP TABLE nested;

CREATE TABLE nested (n INT[][], initial INT[]);

INSERT INTO nested VALUES ([[10, 20], [30, 40], [50, 60]], [100]), ([[1, 2, 3], [4, 5, 6], [7, 8, 9]], [1000]), (NULL, [-1]), ([[NULL, 60], [70, NULL], [NULL, NULL]], [NULL]);

SELECT LIST_REDUCE(n, (x, y) -> LIST_PACK(LIST_REDUCE(x, (l, m) -> l + m) + LIST_REDUCE(y, (j, k) -> j + k)), initial) FROM nested;

INSERT INTO nested VALUES ([[4, 5, 6], []], [9]);

SELECT LIST_REDUCE(n, (x, y) -> LIST_PACK(LIST_REDUCE(x, (l, m) -> l + m) + LIST_REDUCE(y, (j, k) -> j + k)), initial) FROM nested;

DROP TABLE nested;

CREATE TABLE nested (n TEXT[], l TEXT[], initialN TEXT, initialL TEXT);

INSERT INTO nested VALUES (['a', 'b'], ['1', '2'], 'A', 'B'), (NULL, NULL, 'C', 'D'), (NULL, ['110', '111', '112'], 'X', 'Y'), (['77', '88', '99'], ['55', '66', NULL], 'E', 'F');

SELECT LIST_REDUCE(n, (x, y) -> LIST_REDUCE(l, (a, b) -> x || y || a || b, initialL), initialN) FROM nested;

DROP TABLE nested;

SELECT LIST_REDUCE([1, 2, 3], (x, y) -> LIST_REDUCE([4, 5, 6], (a, b) -> LIST_REDUCE([7, 8, 9], (c, d) -> x + y + a + b + c + d, 1000), 100), 10);

SELECT LIST_REDUCE([1, 2, 3], (x, y, x_i) -> LIST_REDUCE([4, 5, 6], (a, b, a_i) -> LIST_REDUCE([7, 8, 9], (c, d, c_i) -> x + y + a + b + c + d + x_i + a_i + c_i, 1000), 100), 10);

CREATE TABLE nested (n INT[], l INT[], m INT[], initial INT);

INSERT INTO nested VALUES ([1, 2, 3], [4, 5, 6], [7, 8, 9], 100), (NULL, NULL, NULL, NULL), (NULL, [110, 111, 112], [113, 114, 115], NULL), ([77, 88, 99], [55, 66, NULL], [44, 33, 22], 1);

SELECT LIST_REDUCE(n, (x, y) -> LIST_REDUCE(l, (a, b) -> LIST_REDUCE(m, (c, d) -> x + y + a + b + c + d, initial), initial), initial) FROM nested;

DROP TABLE nested;

CREATE TABLE nested (n INT[][][], initial INT[][]);

INSERT INTO nested VALUES ([[[10, 20], [100, 200]], [[30, 40], [300, 400]], [[50, 60], [500, 600]]], [[1]]), ([[[1, 2, 3], [4, 5, 6], [7, 8, 9]]], [[2]]), (NULL, [[3]]), ([[[NULL, 60], [70, NULL], [NULL, NULL]]], [[4]]);

SELECT LIST_REDUCE(n, (x, y) -> LIST_PACK(LIST_REDUCE(x, (l, m) -> LIST_PACK(LIST_REDUCE(l, (a, b) -> a + b) + LIST_REDUCE(m, (c, d) -> c + d))) + LIST_REDUCE(y, (e, f) -> LIST_PACK(LIST_REDUCE(e, (a, b) -> a + b) + LIST_REDUCE(f, (c, d) -> c + d))))) FROM nested;

CREATE TABLE t_struct (s STRUCT(v TEXT, i INT)[], initial STRUCT(v TEXT, i INT));

INSERT INTO t_struct VALUES ([ROW('a', 1), ROW('b', 2)], ROW('->', 1)), ([ROW('c', 3), ROW('d', 4)], ROW('-->', 2)), ([ROW('e', 5), ROW('f', 6)], ROW('--->', 3)), ([ROW('g', 7), ROW('h', 8)], ROW('---->', 4)), ([ROW('i', 9), ROW('j', 10)], ROW('----->', 5));

SELECT LIST_REDUCE(s, (a, b) -> ROW(a.v || b.v, a.i + b.i), initial) FROM t_struct;

CREATE OR REPLACE TABLE df (s STRUCT(a INT, b INT)[], initial STRUCT(a INT, b INT));

INSERT INTO df VALUES ([ROW(0, 0), ROW(0, 1), ROW(0, 2)], ROW(-2, -3));

SELECT LIST_REDUCE(s, (curr, next) -> {'a': curr.a + (next.b - curr.b), 'b': next.b}, initial) FROM df;

SELECT LIST_REDUCE([{'a': 0, 'b': 0}, {'a': 0, 'b': 1}, {'a': 0, 'b': 2}], (curr, next) -> {'a': curr.a + (next.b - curr.b), 'b': next.b}, {'a': -2, 'b': -3});

CREATE TABLE where_clause (a INT[], initial INT);

INSERT INTO where_clause VALUES ([10, 2, 1], 10), ([1, 2, 3], 20), ([15, 4, 3], 30), ([3, 4, 5], 40), ([11, 2, 3, 4, 5], 50), ([5, 4, 3, 2, 1], 60), ([100, 2, 3, 4, 5, 6, 7, 8, 9, 10], 70);

SELECT a FROM where_clause WHERE LIST_REDUCE(a, (x, y) -> x - y, initial) > 0;

CREATE TABLE large_lists AS SELECT range % 4 AS g, LIST(range) AS l, 100 AS initial FROM RANGE(0, 10000) GROUP BY range % 4;

SELECT LIST_REDUCE(l, (x, y) -> LEAST(x, y), initial) FROM large_lists ORDER BY g;

SELECT LIST_REDUCE(l, (x, y) -> x + y, initial) FROM large_lists ORDER BY g;

CREATE TABLE large_table AS SELECT LIST_REDUCE(RANGE(0, 5000), (x, y) -> x + y, 1) AS l FROM RANGE(0, 1000);

SELECT COUNT(*) FROM large_table WHERE l = 12497501;

CREATE TABLE large_lists AS SELECT range % 4 AS g, LIST(range) AS l FROM RANGE(0, 10000) GROUP BY range % 4;

SELECT LIST_REDUCE(l, (x, y) -> LEAST(x, y)) FROM large_lists ORDER BY g;

SELECT LIST_REDUCE(l, (x, y) -> x + y) FROM large_lists ORDER BY g;

CREATE TABLE large_table AS SELECT LIST_REDUCE(RANGE(0, 5000), (x, y) -> x + y) AS l FROM RANGE(0, 1000);

SELECT COUNT(*) FROM large_table WHERE l = 12497500;

PRAGMA enable_verification;

SELECT LIST_APPLY([1, 2], x -> LIST_APPLY([3, 4], y -> {'x': x, 'y': y})) AS bug;

SELECT LIST_TRANSFORM([1, 2], x -> LIST_TRANSFORM([3, 4], y -> x + y));

SELECT LIST_TRANSFORM([1, 2], x -> LIST_TRANSFORM([3, 4], y -> LIST_TRANSFORM([5, 6], z -> z + y + x)));

SELECT LIST_TRANSFORM([1, 2, 3, 4], x -> LIST_FILTER([4, 5, 1, 2, 3, 3, 3, 5, 1, 4], y -> y <> x));

SELECT LIST_TRANSFORM([[2, 4, 6]], x -> LIST_TRANSFORM(x, y -> LIST_SUM([y] || x)));

SELECT LIST_APPLY(RANGE(0, 5), x -> {'x': x, 'w': LIST_FILTER(RANGE(0, 5), y -> ABS(y - x) < 2)});

SELECT LIST_APPLY(RANGE(0, 8), x -> LIST_AGGR(LIST_APPLY(RANGE(0, 8), y -> LIST_ELEMENT('▁▂▃▄▅▆▇█', 1 + ABS(y - x))), 'string_agg', ''));

CREATE TABLE lists (i INT, v TEXT[]);

INSERT INTO lists VALUES (1, ['a', 'b', 'c']), (8, NULL), (3, ['duck', 'db', 'tests']), (NULL, NULL), (NULL, ['lambdas!']);

SELECT LIST_TRANSFORM(v, x -> LIST_TRANSFORM(v, y -> x || y)) FROM lists;

SELECT LIST_TRANSFORM(v, x -> LIST_TRANSFORM(v, y -> LIST_TRANSFORM(v, z -> x || y || z))) FROM lists;

SELECT LIST_TRANSFORM(v, x -> [LIST_TRANSFORM([':-)'], y -> x || y || '-#lambdaLove')] || LIST_FILTER(LIST_TRANSFORM(['B-)'], k -> [k] || [x]), j -> LIST_CONTAINS(j, 'a') OR LIST_CONTAINS(j, 'duck'))) FROM lists;

CREATE TABLE no_overwrite AS SELECT [range, range + 1] AS l FROM RANGE(0, 3);

SELECT l, [[{'x+y': x + y, 'x': x, 'y': y, 'l': l} FOR y IN [42, 43]] FOR x IN l] FROM no_overwrite;

PRAGMA enable_verification;

CREATE MACRO my_transform(list) AS list_transform(list, x -> x * x);

CREATE MACRO my_filter(list) AS list_filter(list, x -> x > 42);

CREATE MACRO my_reduce(list) AS list_reduce(list, (x, y) -> x + y);

CREATE MACRO my_nested_lambdas(nested_list) AS list_filter(nested_list, elem -> list_reduce(list_transform(elem, x -> x + 1), (x, y) -> x + y) > 42);

SELECT MY_TRANSFORM([1, 2, 3]);

SELECT MY_FILTER([41, 42, NULL, 43, 44]);

SELECT MY_REDUCE([1, 2, 3]);

SELECT MY_NESTED_LAMBDAS([[40, NULL], [20, 21], [10, 10, 20]]);

SELECT MY_TRANSFORM([1, 2, 3]);

SELECT MY_FILTER([41, 42, NULL, 43, 44]);

SELECT MY_REDUCE([1, 2, 3]);

SELECT MY_NESTED_LAMBDAS([[40, NULL], [20, 21], [10, 10, 20]]);

CREATE TABLE tmp AS SELECT range AS id FROM RANGE(0, 10);

COPY tmp TO '__TEST_DIR__/my_file_cba.parquet' WITH (FORMAT PARQUET);

SELECT COUNT(*) FROM READ_PARQUET('__TEST_DIR__/my_file_' || LIST_AGGR(LIST_TRANSFORM(['C', 'B', 'A'], s -> LOWER(s)), 'string_agg', '') || '.parquet');

SELECT COUNT(*) FROM READ_PARQUET('__TEST_DIR__/my_file_' || LIST_AGGR(LIST_TRANSFORM(ARRAY_SORT(['a', 'b', 'c']), s -> LOWER(s)), 'string_agg', '') || '.parquet');

SELECT COUNT(*) FROM READ_PARQUET('__TEST_DIR__/my_file_' || LIST_AGGR(LIST_TRANSFORM(LIST_FILTER(['s', 'c', 'b', NULL, 'a'], x -> NOT x IS NULL AND x <> 's'), s -> LOWER(s)), 'string_agg', '') || '.parquet');

SELECT COUNT(*) FROM READ_PARQUET('__TEST_DIR__/my_file_' || LIST_AGGR(LIST_TRANSFORM(LIST_FILTER(LIST_FILTER(['s', 'c', 'b', NULL, 'a'], y -> y <> 's'), x -> NOT x IS NULL), s -> LOWER(s)), 'string_agg', '') || '.parquet');

SELECT COUNT(*) FROM READ_PARQUET('__TEST_DIR__/my_file_' || LIST_AGGR(LIST_REDUCE([['c', 'b', NULL, 'a']], (x, y) -> COALESCE(x, y)), 'string_agg', '') || '.parquet');

COPY tmp TO '__TEST_DIR__/my_file_ac.parquet' WITH (FORMAT PARQUET);

SELECT COUNT(*) FROM READ_PARQUET('__TEST_DIR__/my_file_' || LIST_AGGR(LIST_TRANSFORM(['a'], x -> LIST_TRANSFORM(['a', 'c'], y -> x || y)[2]), 'string_agg', '') || '.parquet');

COPY tmp TO '__TEST_DIR__/my_file_a=1,b=2,c=3.parquet' WITH (FORMAT PARQUET);

SELECT COUNT(*) FROM READ_PARQUET('__TEST_DIR__/my_file_' || LIST_STRING_AGG([LOWER(s) FOR s IN ['a=1', 'b=2', 'c=3']]) || '.parquet');

CREATE TABLE cities AS SELECT * FROM (VALUES ('Amsterdam', [90, 10]), ('London', [89, 102])) AS cities(name, prices);

ALTER TABLE cities ALTER COLUMN prices SET DATA TYPE INT[] USING LIST_FILTER(cities.prices, price -> price < 100);

SELECT name, prices AS cheap_options FROM cities;

PRAGMA enable_verification;

SELECT [1] AS l, LIST_TRANSFORM([1], l -> l + 1);

SELECT LIST_TRANSFORM(NULL, x -> x + 1);

SELECT LIST_TRANSFORM([1], x -> x);

SELECT LIST_TRANSFORM(['duck', 'a', 'ö'], duck -> CONCAT(duck, 'DB'));

SELECT LIST_TRANSFORM([1, 2, 3], x -> 1);

SELECT LIST_TRANSFORM([], x -> x + 1);

SELECT LIST_TRANSFORM([1, 2, 3], x -> x + 1);

SELECT LIST_TRANSFORM([1, NULL, -2, NULL], x -> x + 1);

CREATE TABLE lists (n INT, l INT[]);

INSERT INTO lists VALUES (1, [1]), (2, [1, 2, 3]), (3, NULL), (4, [-1, NULL, 2]);

SELECT LIST_TRANSFORM(l, x -> x) FROM lists;

SELECT LIST_TRANSFORM(l, x -> x + n) FROM lists;

SELECT LIST_TRANSFORM(l, x -> x < 2) FROM lists;

SELECT LIST_TRANSFORM(['x', 'abc', 'z'], x -> x || '0');

SELECT LIST_TRANSFORM([[1], [2, 3], [NULL], NULL], x -> LIST_TRANSFORM(x, y -> y + 1));

SELECT LIST_TRANSFORM([[1], [2], [3]], x -> LIST_CONCAT(x, x));

SELECT LIST_TRANSFORM([5, NULL, 6], x -> CAST(POWER(x, 2) AS INT));

SELECT LIST_TRANSFORM([5, NULL, 6], x -> COALESCE(x, 0) + 1);

SELECT LIST_TRANSFORM([LIST_UNIQUE(LIST_CONCAT([1, 2], [2, 2]))], x -> CAST((x + 1) AS INT));

SELECT ARRAY_SORT(LIST_TRANSFORM(LIST_DISTINCT(LIST_CONCAT([1, 2], [2, 2])), x -> x + 1));

SELECT LIST_TRANSFORM([[1], [2], [3]], x -> LIST_CONCAT(LIST_TRANSFORM(x, y -> y + 1), LIST_TRANSFORM(x, z -> z - 1)));

SELECT LIST_TRANSFORM([[1], [4], NULL, [1], [8]], x -> LIST_CONCAT(LIST_TRANSFORM(x, y -> CASE WHEN y > 1 THEN 'yay' ELSE 'nay' END), x));

SELECT LIST_TRANSFORM([[1], [4], NULL, [1], [8]], x -> LIST_CONCAT(LIST_TRANSFORM(x, y -> CASE WHEN y > 1 THEN 'yay' ELSE 'nay' END), CAST(x AS TEXT[])));

SELECT ARRAY_TRANSFORM([1, NULL], arr_elem -> arr_elem - 4);

SELECT ARRAY_APPLY([1, NULL], arr_elem -> arr_elem - 4);

SELECT LIST_APPLY([1, NULL], arr_elem -> arr_elem - 4);

SELECT LIST_APPLY(i, x -> (6 + 2 * 12) // x) FROM (VALUES ([1, 2, 3])) AS tbl(i);

SELECT LIST_APPLY(i, x -> x + 1 AND x + 1) FROM (VALUES ([1, 2, 3])) AS tbl(i);

CREATE TABLE large_lists AS SELECT range % 4 AS g, LIST(range) AS l FROM RANGE(0, 10000) GROUP BY range % 4;

CREATE TABLE transformed_lists (g INT, l INT[]);

INSERT INTO transformed_lists (SELECT g + 1, LIST_TRANSFORM(l, x -> x + 1) FROM large_lists WHERE g <> 3);

INSERT INTO transformed_lists (SELECT g - 3, LIST_TRANSFORM(l, x -> x - 3) FROM large_lists WHERE g = 3);

SELECT ll.l = tl.l FROM large_lists AS ll, transformed_lists AS tl WHERE ll.g = tl.g;

SELECT LIST_TRANSFORM([{'a': 1}], x -> x.a);

SELECT LIST_TRANSFORM([{'a': [1, 2, 3]}], x -> x.a[2]);

SELECT LIST_TRANSFORM([{'b': {'a': 1}}], x -> x.b.a);

SELECT LIST_TRANSFORM([{'b': {'a': 42, 'b': 43}}], x -> x.b.b);

SELECT LIST_TRANSFORM([{'b': {'a': [{'c': 77}], 'b': 43}}], x -> x.b.a.c[1].c);

CREATE TABLE corr_test (n INT, l INT[], g INT);

INSERT INTO corr_test VALUES (1, [2, 1, 1], 1), (3, [NULL, 2, 4, 4], 1), (NULL, NULL, 1), (0, [], 1);

SELECT n FROM corr_test WHERE LIST_SUM(LIST_TRANSFORM(l, elem -> elem - n)) >= n;

SELECT ct.n FROM corr_test AS ct WHERE LIST_COUNT(ct.l) < (SELECT LIST_COUNT(LIST_TRANSFORM(LIST_CONCAT(LIST(c.n), ct.l), a -> a)) FROM corr_test AS c GROUP BY c.g) ORDER BY ct.n;

SELECT (SELECT LIST_TRANSFORM(l, elem -> elem + 1)) FROM corr_test;

SELECT (SELECT LIST_TRANSFORM(l, elem -> elem + n)) FROM corr_test;

SELECT (SELECT (SELECT (SELECT LIST_TRANSFORM(l, elem -> elem + 1)))) FROM corr_test;

SELECT (SELECT (SELECT (SELECT LIST_TRANSFORM(l, elem -> elem + 1)))) FROM corr_test;

CREATE TABLE test (a INT, b INT);

INSERT INTO test VALUES (1, 2), (1, 3), (1, 4), (2, 2), (2, 3), (2, 4), (3, 2), (3, 3), (3, 4);

SELECT LIST_TRANSFORM(bb, x -> [x, b]), bb, b FROM (SELECT LIST(b) OVER wind AS bb, FIRST(b) OVER wind AS b FROM test WINDOW wind AS (ORDER BY a ASC, b ASC rows BETWEEN 4 preceding AND CURRENT ROW) QUALIFY ROW_NUMBER() OVER wind > 4);

SELECT LIST_TRANSFORM([[2, 3], [4]], x -> LIST_TRANSFORM([42], y -> y + 1));

SELECT LIST_TRANSFORM([[2, 3], [4]], x -> LIST_TRANSFORM(x, y -> y + 1));

SELECT LIST_TRANSFORM([[2, 3], [4]], x -> LIST_TRANSFORM([1], y -> x || [y]));

SELECT LIST_TRANSFORM([[2, 3], [4]], x -> LIST_TRANSFORM(x, y -> x || [y]));

PRAGMA enable_verification;

SELECT LIST_TRANSFORM([1, 2, 3], x -> LIST_TRANSFORM([4, 5, 6], (y, y_i) -> x + y + y_i));

SELECT LIST_TRANSFORM(['abc'], (x, i) -> x[i + 1]);

SELECT LIST_FILTER([1, 2, 1], (x, y) -> x >= y);

SELECT LIST_TRANSFORM([1, 2, 3], x -> LIST_TRANSFORM([4, 5, 6], y -> LIST_TRANSFORM([7, 8, 9], (z, i) -> x + y + z + i)));

SELECT LIST_TRANSFORM([10, 20, 30], (x, i) -> x + i);

SELECT LIST_TRANSFORM([1, 2, 3, 4, 5, 6], (x, i) -> x * i);

SELECT LIST_TRANSFORM([6, 5, 4, 3, 2, 1], (x, i) -> x * i);

SELECT LIST_TRANSFORM([1, NULL, 3, 4, 5, 6], (x, i) -> x + i);

SELECT LIST_TRANSFORM(NULL, (x, i) -> x + i);

SELECT LIST_TRANSFORM(['1', '2', '3', '4'], (x, i) -> (x || ' + ' || CAST(i AS TEXT)));

SELECT LIST_TRANSFORM([1, 2, 3, 4, 5], (x, i) -> (x * 10 / i));

CREATE TABLE tbl (a INT[]);

INSERT INTO tbl VALUES ([5, 4, 3]), ([1, 2, 3]), (NULL), ([NULL, 101, 12]);

SELECT LIST_TRANSFORM(a, (x, i) -> x + i) FROM tbl;

SELECT LIST_TRANSFORM(a, (x, i) -> x + i + LIST_ANY_VALUE(a)) FROM tbl;

DROP TABLE tbl;

CREATE TABLE tbl (a INT[], b INT, c INT);

INSERT INTO tbl VALUES ([5, 4, 3], 5, 10), ([1, 2, 3], 7, 14), (NULL, 9, 18), ([10, NULL, 12], 11, 22);

SELECT LIST_TRANSFORM(a, (x, i) -> (c / b) * (x + i)) FROM tbl;

SELECT RANGE(1, 20000, 2);

SELECT LIST_TRANSFORM(RANGE(0, 10000), (x, i) -> x + i);

SELECT LIST_TRANSFORM([1, 2, 3], (x, x_i) -> LIST_TRANSFORM([4, 5, 6], y -> x + y + x_i));

SELECT LIST_TRANSFORM([1, 2, 3], (x, x_i) -> LIST_TRANSFORM([4, 5, 6], (y, y_i) -> x + y + x_i + y_i));

SELECT LIST_TRANSFORM([1, 2, 3], (x, i) -> LIST_TRANSFORM([4, 5, 6], y -> LIST_TRANSFORM([7, 8, 9], z -> x + y + z + i)));

SELECT LIST_TRANSFORM([1, 2, 3], x -> LIST_TRANSFORM([4, 5, 6], (y, i) -> LIST_TRANSFORM([7, 8, 9], z -> x + y + z + i)));

PRAGMA enable_verification;

SELECT [x FOR x IN c IF NOT x IS NULL] FROM TEST_VECTOR_TYPES(CAST(NULL AS INT[])) AS t(c);

SELECT [x FOR x IN c IF x IS NULL] FROM TEST_VECTOR_TYPES(CAST(NULL AS INT[])) AS t(c);

SELECT LIST_REDUCE(c, (x, y) -> x + y) FROM TEST_VECTOR_TYPES(CAST(NULL AS INT[])) AS t(c) WHERE LENGTH(c) > 0;

PRAGMA enable_verification;

SELECT (ROW(42, 84))['element'];

SELECT (ROW(42, 84))[1];

SELECT (ROW(42, 84))[2];

SELECT UNNEST(ROW(42, 84));

SELECT (ROW(42, 84))[0];

SELECT (ROW(42, 84))[9999];

SELECT (ROW(42, 84))[-1];

SELECT (ROW(42, 84))[9223372036854775807];

SELECT (ROW(42, 84))[CAST(-9223372036854775808 AS BIGINT) + 0];

PRAGMA enable_verification;

PRAGMA enable_verification;

SELECT STRUCT_INSERT({'a': 1, 'b': 2}, c := 3);

WITH data AS (SELECT 1 AS a, 2 AS b, 3 AS c) SELECT STRUCT_INSERT(data, d := 4) FROM data;

SELECT STRUCT_INSERT({'a': 1, 'b': 'abc', 'c': TRUE}, d := {'a': 'new stuff'});

SELECT STRUCT_INSERT();

SELECT STRUCT_INSERT({'a': 1, 'b': 2});

SELECT STRUCT_INSERT(123, a := 1);

SELECT STRUCT_INSERT({'a': 1, 'b': 2}, a := 2);

CREATE TABLE tbl (col STRUCT(i INT));

INSERT INTO tbl SELECT {'i': range} FROM RANGE(0, 3);

SELECT STRUCT_INSERT(col, a := col.i + 1, b := CAST(NULL AS TEXT)) FROM tbl ORDER BY ALL;

SELECT STRUCT_INSERT(col, a := NULL, b := CAST(NULL AS TEXT), c := [NULL]) FROM tbl ORDER BY ALL;

PRAGMA enable_verification;

SELECT ABS(CAST('-0.0' AS REAL)), ABS(CAST('-0.0' AS DOUBLE));

PRAGMA enable_verification;

SELECT 10 % 2.4, -10 % 2.4;

SELECT 10.0 % 2.4, -10.0 % 2.4;

SELECT 12345678901111111 % 2.0;

SELECT 12345678901234567890 % 123;

SELECT CAST(10000000000000000000000000000000000001 AS DECIMAL(38, 0)) % 0.00000000000000000000000000000000004;

SELECT TYPEOF(10.0 % 2.0), TYPEOF(10.0 % 2.0 % 2.0 % 2.0);

SELECT 10.0 % 0.0;

CREATE TABLE t1 AS SELECT * FROM GENERATE_SERIES(1, 50) AS t(number);

SELECT SETSEED(0.1);

SELECT * FROM t1 USING SAMPLE RESERVOIR (5 ROWS);

SELECT SETSEED(0.1);

SELECT * FROM t1 USING SAMPLE RESERVOIR (5 ROWS);

PRAGMA enable_verification;

CREATE TABLE test (a INT);

INSERT INTO test VALUES (1), (2), (3), (NULL);

SELECT ADD(a, a) FROM test;

SELECT SUBTRACT(a, a) FROM test;

SELECT MULTIPLY(a, a) FROM test;

SELECT DIVIDE(a, a) FROM test;

PRAGMA enable_verification;

CREATE TABLE bits (t TINYINT, s SMALLINT, i INT, b BIGINT, h INT128);

INSERT INTO bits VALUES (NULL, NULL, NULL, NULL, NULL), (31, 1023, 11834119, 50827156903621017, 3141592653589793238462643383279528841), (-59, -517, -575693, -9876543210, -148873535527910577765226390751398592512);

SELECT BIT_COUNT(t), BIT_COUNT(s), BIT_COUNT(i), BIT_COUNT(b), BIT_COUNT(h) FROM bits;

PRAGMA enable_verification;

SELECT i, EVEN(i + 0.4) FROM GENERATE_SERIES(-4, 4) AS tbl(i);

SELECT i, EVEN(i + 0.9) FROM GENERATE_SERIES(-4, 4) AS tbl(i);

SELECT EVEN(19.4), EVEN(-19.4);

SELECT EVEN(8.9), EVEN(-8.9);

SELECT EVEN(CAST(45 AS DOUBLE)), EVEN(-CAST(35 AS DOUBLE));

SELECT EVEN(NULL);

SELECT EVEN('abcd');

SELECT EVEN(1.7976931348623155e+308);

SELECT EVEN(-1.7976931348623155e+308);

PRAGMA enable_verification;

SELECT FACTORIAL(0);

SELECT FACTORIAL(-1);

SELECT FACTORIAL(NULL);

SELECT FACTORIAL(2);

SELECT FACTORIAL(10);

SELECT NOT 10;

SELECT FACTORIAL(20);

SELECT FACTORIAL(30);

SELECT FACTORIAL(40);

PRAGMA enable_verification;

SET ieee_floating_point_ops = FALSE;

CREATE TABLE rs (x DOUBLE, y INT);

INSERT INTO rs VALUES (10, 3), (10, -3), (-10, 3), (-10, -3), (0, 1), (1, 1), (NULL, 10), (10, NULL), (NULL, NULL);

SELECT FMOD(x, y) FROM rs;

SELECT FDIV(x, y) FROM rs;

SELECT FMOD(42, 0);

SELECT FMOD(0, 0);

SELECT FDIV(42, 0);

SELECT FDIV(-42, 0);

SELECT FDIV(0, 0);

SELECT FMOD(12.3456789, 5);

SELECT FDIV(12.3456789, 5);

SELECT FMOD(3, 2.1);

SELECT FDIV(3, 2.1);

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

CREATE TABLE numbers (n DOUBLE);

INSERT INTO numbers VALUES (NULL), (-42.8), (-42.2), (0), (42.2), (42.8);

SELECT CAST(CEIL(CAST(n AS TINYINT)) AS BIGINT) FROM numbers ORDER BY n;

SELECT CAST(CEIL(CAST(n AS SMALLINT)) AS BIGINT) FROM numbers ORDER BY n;

SELECT CAST(CEIL(CAST(n AS INT)) AS BIGINT) FROM numbers ORDER BY n;

SELECT CAST(CEIL(CAST(n AS BIGINT)) AS BIGINT) FROM numbers ORDER BY n;

SELECT CAST(CEIL(CAST(n AS REAL)) AS BIGINT) FROM numbers ORDER BY n;

SELECT CAST(CEIL(CAST(n AS DOUBLE)) AS BIGINT) FROM numbers ORDER BY n;

SELECT CAST(CEIL(CAST(n AS DOUBLE)) AS BIGINT) FROM numbers ORDER BY n;

SELECT CAST(FLOOR(CAST(n AS TINYINT)) AS BIGINT) FROM numbers ORDER BY n;

SELECT CAST(FLOOR(CAST(n AS SMALLINT)) AS BIGINT) FROM numbers ORDER BY n;

SELECT CAST(FLOOR(CAST(n AS INT)) AS BIGINT) FROM numbers ORDER BY n;

SELECT CAST(FLOOR(CAST(n AS BIGINT)) AS BIGINT) FROM numbers ORDER BY n;

SELECT CAST(FLOOR(CAST(n AS REAL)) AS BIGINT) FROM numbers ORDER BY n;

SELECT CAST(FLOOR(CAST(n AS DOUBLE)) AS BIGINT) FROM numbers ORDER BY n;

PRAGMA enable_verification;

SELECT GAMMA(NULL);

SELECT GAMMA(0);

SELECT GAMMA(-1);

SELECT GAMMA(1);

SELECT GAMMA(-0.1);

SELECT GAMMA(2);

SELECT GAMMA(10);

SELECT GAMMA(CAST(2 AS TINYINT));

SELECT GAMMA(CAST(2 AS INT128));

SELECT GAMMA('asdf');

SELECT LGAMMA(NULL);

SELECT LGAMMA(0);

SELECT LGAMMA(-1);

SELECT LGAMMA(-100);

SELECT LGAMMA(1);

SELECT LGAMMA(2);

SELECT LGAMMA(3);

SELECT LGAMMA(10);

SELECT LGAMMA(CAST(2 AS TINYINT));

SELECT LGAMMA(CAST(2 AS INT128));

SELECT LGAMMA('asdf');

PRAGMA enable_verification;

SELECT a, b, GCD(a, b), GCD(a, -b), GCD(b, a), GCD(-b, a) FROM (VALUES (CAST(0 AS TINYINT), CAST(0 AS TINYINT)), (CAST(0 AS TINYINT), CAST(29893644334 AS TINYINT)), (CAST(288484263558 AS TINYINT), CAST(29893644334 AS TINYINT)), (-CAST(288484263558 AS TINYINT), CAST(29893644334 AS TINYINT)), (CAST((-9223372036854775808) AS TINYINT), CAST(1 AS TINYINT)), (CAST((-9223372036854775808) AS TINYINT), CAST(9223372036854775807 AS TINYINT)), (CAST((-9223372036854775808) AS TINYINT), CAST(4611686018427387904 AS TINYINT))) AS v(a, b);

SELECT GCD(42, NULL);

SELECT GCD(42, 'abcd');

SELECT LCM(120, 25);

SELECT a, b, LCM(a, b), LCM(a, -b), LCM(b, a), LCM(-b, a) FROM (VALUES (CAST(0 AS TINYINT), CAST(0 AS TINYINT)), (CAST(0 AS TINYINT), CAST(29893644334 AS TINYINT)), (CAST(29893644334 AS TINYINT), CAST(29893644334 AS TINYINT)), (CAST(288484263558 AS TINYINT), CAST(29893644334 AS TINYINT)), (-CAST(288484263558 AS TINYINT), CAST(29893644334 AS TINYINT)), (CAST((-9223372036854775808) AS TINYINT), CAST(0 AS TINYINT))) AS v(a, b);

SELECT LCM(42, NULL);

SELECT LCM(42, 'abcd');

SELECT LCM(4200000000000000000, 5700000000000000000);

PRAGMA enable_verification;

CREATE TABLE numbers (x DOUBLE);

INSERT INTO numbers VALUES (NULL), (1), (2);

SELECT GEOMEAN(x) FROM numbers;

SELECT GEOMEAN(CAST(x AS INT)) FROM numbers;

SELECT GEOMEAN(i) FROM GENERATE_SERIES(1000, 2000) AS tbl(i);

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

SELECT SQRT(0);

SELECT POWER(1e300, 100), POWER(-1e300, 100), POWER(-1.0, 0.5);

SELECT EXP(1e300), EXP(1e100);

SELECT DEGREES(1e308);

SET default_null_order = 'nulls_first';

SET default_null_order = 'nulls_first';

SET default_null_order = 'nulls_first';

SET default_null_order = 'nulls_first';

INSERT INTO floats VALUES (3), ('nan'), ('inf'), ('-inf'), (NULL);

SELECT f, ISNAN(f), ISINF(f), ISFINITE(f) FROM floats ORDER BY f;

PRAGMA enable_verification;

CREATE TABLE modme (a DOUBLE, b INT);

INSERT INTO modme VALUES (42.123456, 3);

SELECT a % 40 FROM modme;

SELECT 42 % 0;

SELECT a % 2 FROM modme;

SELECT b % 2.1 FROM modme;

PRAGMA enable_verification;

SELECT NEXTAFTER();

SELECT NEXTAFTER('bla', 'bla');

SELECT NEXTAFTER(NULL, 1);

SELECT NEXTAFTER(1, NULL);

SELECT NEXTAFTER(99, 1);

SELECT NEXTAFTER(CAST(99.0 AS DOUBLE), CAST(1.0 AS DOUBLE)) < 99;

SELECT NEXTAFTER(CAST(99.0 AS DOUBLE), CAST(99.0 AS DOUBLE)) = 99;

SELECT NEXTAFTER(CAST(99.0 AS DOUBLE), CAST(100.0 AS DOUBLE)) > 99;

SELECT NEXTAFTER(NEXTAFTER(CAST(99.0 AS DOUBLE), CAST(100.0 AS DOUBLE)), CAST(0 AS DOUBLE)) = 99;

SELECT NEXTAFTER(CAST(99.0 AS REAL), CAST(1.0 AS REAL)) < 99;

SELECT NEXTAFTER(CAST(99.0 AS REAL), CAST(100.0 AS REAL)) > 99;

SELECT NEXTAFTER(NEXTAFTER(CAST(99.0 AS REAL), CAST(100.0 AS REAL)), CAST(0 AS REAL)) = 99;

CREATE TABLE test (a REAL);

INSERT INTO test VALUES (10), (20), (30), (40);

SELECT NEXTAFTER(a, CAST(0 AS REAL)) FROM test;

CREATE TABLE test_twoc (a REAL, b REAL);

INSERT INTO test_twoc VALUES (10, 1), (20, 21), (30, 1), (40, 41);

SELECT NEXTAFTER(a, b) FROM test_twoc;

PRAGMA enable_verification;

SELECT ABS(-17.4);

SELECT CBRT(27.0);

SELECT CEIL(-42.8);

SELECT CEIL(-95.3);

SELECT EXP(1.0);

SELECT FLOOR(-42.8);

SELECT LN(2.0);

SELECT LOG(100.0);

SELECT LOG(10, 100.0);

SELECT LOG(2, 4.0);

SELECT PI();

SELECT SQRT(2.0);

SELECT RADIANS(45.0);

SELECT DEGREES(0.5);

SELECT SIGN(4.1);

SELECT SIGN(-4.1);

SELECT SIGN(0);

SELECT SIGN(3);

SELECT LOG(2, 64);

SELECT LOG(0, 64);

SELECT LOG(2, 0);

SELECT LOG(-1, 64);

SELECT LOG(2, -1);

SELECT LOG(1, 64);

SELECT LOG(2, 1);

SELECT LOG(0.5, 64);

SELECT LOG(0.5, 64);

SELECT LOG(CAST('Inf' AS DOUBLE), 64);

SELECT LOG(64, CAST('Inf' AS DOUBLE));

SELECT LOG(64, CAST('NaN' AS DOUBLE));

SELECT LOG(CAST('NaN' AS DOUBLE), 64);

SELECT LOG(CAST('-Inf' AS DOUBLE), 64);

SELECT LOG(64, CAST('-Inf' AS DOUBLE));

SELECT LOG(2, -1);

PRAGMA enable_verification;

CREATE TABLE powerme (a DOUBLE, b INT);

INSERT INTO powerme VALUES (2.1, 3);

SELECT POWER(a, 0) FROM powerme;

SELECT POWER(b, -2) FROM powerme;

SELECT POWER(a, b) FROM powerme;

SELECT POWER(b, a) FROM powerme;

SELECT POWER(b, a) FROM powerme;

CREATE TABLE t1 AS SELECT [RANDOM() FOR a IN RANGE(0, 1)] FROM RANGE(0, 2);

CREATE TABLE t2 AS SELECT RANDOM() FROM RANGE(0, 2);

CREATE TABLE t3 AS SELECT [RANDOM()] FROM RANGE(0, 2);

CREATE TABLE t4 AS SELECT [RANDOM() + range * 0 FOR a IN RANGE(0, 1)] FROM RANGE(0, 2);

CREATE TABLE t4 AS SELECT [RANDOM() + range * 0 FOR a IN RANGE(0, 1)] FROM RANGE(0, 2);

CREATE TABLE t4 AS SELECT [RANDOM() + range * 0 FOR a IN RANGE(0, 1)] FROM RANGE(0, 2);

CREATE TABLE t4 AS SELECT [RANDOM() + range * 0 FOR a IN RANGE(0, 1)] FROM RANGE(0, 2);

CREATE TABLE t4 AS SELECT [RANDOM() + range * 0 FOR a IN RANGE(0, 1)] FROM RANGE(0, 2);

BEGIN;

CREATE TEMPORARY TABLE t1 AS SELECT RANDOM() AS a;

CREATE TEMPORARY TABLE t2 AS SELECT RANDOM() AS b;

CREATE TEMPORARY TABLE t3 AS SELECT RANDOM() AS c;

SELECT COUNT(*) FROM (SELECT a FROM t1 JOIN t2 ON (a = b) JOIN t3 ON (b = c)) AS s1;

ROLLBACK;

SELECT SETSEED(0.1);

CREATE TEMPORARY TABLE t1 AS SELECT RANDOM() AS a;

SELECT SETSEED(0.1);

CREATE TEMPORARY TABLE t2 AS SELECT RANDOM() AS b;

SELECT SETSEED(0.1);

CREATE TEMPORARY TABLE t3 AS SELECT RANDOM() AS c;

SELECT COUNT(*) FROM (SELECT a FROM t1 JOIN t2 ON (a = b) JOIN t3 ON (b = c)) AS s1;

SELECT SETSEED(1.1);

SELECT SETSEED(-1.1);

CREATE TABLE seeds (a DOUBLE);

INSERT INTO seeds VALUES (-0.1), (0.0), (0.1);

SELECT SETSEED(a), a FROM seeds;

CREATE TABLE numbers (a INT);

INSERT INTO numbers VALUES (1), (2), (3), (4), (5), (6), (7), (8), (9), (10);

SELECT CASE WHEN MIN(RANDOM()) >= 0 THEN 1 ELSE 0 END FROM numbers;

SELECT CASE WHEN MAX(RANDOM()) < 1 THEN 1 ELSE 0 END FROM numbers;

SELECT * FROM numbers ORDER BY RANDOM();

PRAGMA enable_verification;

CREATE TABLE roundme (a DOUBLE, b INT);

INSERT INTO roundme VALUES (42.123456, 3);

SELECT ROUND(CAST(42.12345 AS DOUBLE), 0);

SELECT ROUND(CAST(42.12345 AS DOUBLE));

SELECT ROUND(CAST(42.12345 AS DOUBLE), 2);

SELECT ROUND(CAST(42.12345 AS DOUBLE), 4), ROUND(CAST(42.1235 AS DOUBLE), 1000);

SELECT ROUND(CAST(42 AS DOUBLE), 0);

SELECT ROUND(CAST(42 AS DOUBLE), -1), ROUND(CAST(42 AS DOUBLE), -2), ROUND(CAST(42 AS DOUBLE), -1000);

SELECT ROUND(a, 1) FROM roundme;

SELECT ROUND(b, 1) FROM roundme;

SELECT ROUND(a, b) FROM roundme;

SELECT ROUND(1.0, CAST((-2147483648) AS INT));

SELECT ROUND(CAST(1.0 AS DOUBLE), CAST((-2147483648) AS INT));

PRAGMA enable_verification;

SELECT ROUNDBANKERS(45, -1);

SELECT i, ROUND_EVEN(i + 0.5, 0) FROM GENERATE_SERIES(-2, 4) AS tbl(i);

SELECT i, ROUND_EVEN(i + 0.55, 0) FROM GENERATE_SERIES(-2, 4) AS tbl(i);

SELECT i, ROUNDBANKERS(i + 0.55, 0) FROM GENERATE_SERIES(-2, 4) AS tbl(i);

SELECT ROUNDBANKERS(45, -1), ROUNDBANKERS(35, -1);

SELECT ROUNDBANKERS(45.5, 0), ROUNDBANKERS(44.5, 0);

SELECT ROUNDBANKERS(45.55, 1), ROUNDBANKERS(45.45, 1);

SELECT ROUNDBANKERS(-45, -1), ROUNDBANKERS(-35, -1);

SELECT ROUNDBANKERS(-45.5, 0), ROUNDBANKERS(-44.5, 0);

SELECT ROUNDBANKERS(-45.55, 1), ROUNDBANKERS(-45.45, 1);

SELECT ROUNDBANKERS(CAST(45 AS DOUBLE), -1), ROUNDBANKERS(CAST(35 AS DOUBLE), -1);

SELECT ROUNDBANKERS(CAST(45.5 AS DOUBLE), 0), ROUNDBANKERS(CAST(44.5 AS DOUBLE), 0);

SELECT ROUNDBANKERS(CAST(45.55 AS DOUBLE), 1), ROUNDBANKERS(CAST(45.45 AS DOUBLE), 1);

SELECT ROUNDBANKERS(NULL, 1), ROUNDBANKERS(45, NULL), ROUNDBANKERS(NULL, NULL);

SET default_null_order = 'nulls_first';

SET default_null_order = 'nulls_first';

SET default_null_order = 'nulls_first';

SET default_null_order = 'nulls_first';

INSERT INTO floats VALUES (3), (CAST(1.0 AS REAL)), (-CAST(0.0 AS REAL)), ('inf'), ('-inf'), (NULL);

SELECT f, SIGNBIT(f), ISINF(f), ISFINITE(f) FROM floats ORDER BY f;

SELECT SIGNBIT(1.0 / 0.0);

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

CREATE TABLE numbers (n DOUBLE);

INSERT INTO numbers VALUES (-42), (-1), (0), (1), (42), (NULL);

SELECT CAST(SIN(CAST(n AS TINYINT)) * 1000 AS BIGINT) FROM numbers ORDER BY n;

SELECT CAST(SIN(CAST(n AS SMALLINT)) * 1000 AS BIGINT) FROM numbers ORDER BY n;

SELECT CAST(SIN(CAST(n AS INT)) * 1000 AS BIGINT) FROM numbers ORDER BY n;

SELECT CAST(SIN(CAST(n AS BIGINT)) * 1000 AS BIGINT) FROM numbers ORDER BY n;

SELECT CAST(SIN(CAST(n AS REAL)) * 1000 AS BIGINT) FROM numbers ORDER BY n;

SELECT CAST(SIN(CAST(n AS DOUBLE)) * 1000 AS BIGINT) FROM numbers ORDER BY n;

SELECT CAST(COS(CAST(n AS TINYINT)) * 1000 AS BIGINT) FROM numbers ORDER BY n;

SELECT CAST(COS(CAST(n AS SMALLINT)) * 1000 AS BIGINT) FROM numbers ORDER BY n;

SELECT CAST(COS(CAST(n AS INT)) * 1000 AS BIGINT) FROM numbers ORDER BY n;

SELECT CAST(COS(CAST(n AS BIGINT)) * 1000 AS BIGINT) FROM numbers ORDER BY n;

SELECT CAST(COS(CAST(n AS REAL)) * 1000 AS BIGINT) FROM numbers ORDER BY n;

SELECT CAST(COS(CAST(n AS DOUBLE)) * 1000 AS BIGINT) FROM numbers ORDER BY n;

SELECT CAST(TAN(CAST(n AS TINYINT)) * 1000 AS BIGINT) FROM numbers ORDER BY n;

SELECT CAST(TAN(CAST(n AS SMALLINT)) * 1000 AS BIGINT) FROM numbers ORDER BY n;

SELECT CAST(TAN(CAST(n AS INT)) * 1000 AS BIGINT) FROM numbers ORDER BY n;

SELECT CAST(TAN(CAST(n AS BIGINT)) * 1000 AS BIGINT) FROM numbers ORDER BY n;

SELECT CAST(TAN(CAST(n AS REAL)) * 1000 AS BIGINT) FROM numbers ORDER BY n;

SELECT CAST(TAN(CAST(n AS DOUBLE)) * 1000 AS BIGINT) FROM numbers ORDER BY n;

SELECT CAST(ATAN(CAST(n AS TINYINT)) * 1000 AS BIGINT) FROM numbers ORDER BY n;

SELECT CAST(ATAN(CAST(n AS SMALLINT)) * 1000 AS BIGINT) FROM numbers ORDER BY n;

SELECT CAST(ATAN(CAST(n AS INT)) * 1000 AS BIGINT) FROM numbers ORDER BY n;

SELECT CAST(ATAN(CAST(n AS BIGINT)) * 1000 AS BIGINT) FROM numbers ORDER BY n;

SELECT CAST(ATAN(CAST(n AS REAL)) * 1000 AS BIGINT) FROM numbers ORDER BY n;

SELECT CAST(ATAN(CAST(n AS DOUBLE)) * 1000 AS BIGINT) FROM numbers ORDER BY n;

SELECT CAST(ASIN(CAST(n AS TINYINT)) * 1000 AS BIGINT) FROM numbers WHERE n BETWEEN -1 AND 1 ORDER BY n;

SELECT CAST(ASIN(CAST(n AS SMALLINT)) * 1000 AS BIGINT) FROM numbers WHERE n BETWEEN -1 AND 1 ORDER BY n;

SELECT CAST(ASIN(CAST(n AS INT)) * 1000 AS BIGINT) FROM numbers WHERE n BETWEEN -1 AND 1 ORDER BY n;

SELECT CAST(ASIN(CAST(n AS BIGINT)) * 1000 AS BIGINT) FROM numbers WHERE n BETWEEN -1 AND 1 ORDER BY n;

SELECT CAST(ASIN(CAST(n AS REAL)) * 1000 AS BIGINT) FROM numbers WHERE n BETWEEN -1 AND 1 ORDER BY n;

SELECT CAST(ASIN(CAST(n AS DOUBLE)) * 1000 AS BIGINT) FROM numbers WHERE n BETWEEN -1 AND 1 ORDER BY n;

SELECT CAST(ACOS(CAST(n AS TINYINT)) * 1000 AS BIGINT) FROM numbers WHERE n BETWEEN -1 AND 1 ORDER BY n;

SELECT CAST(ACOS(CAST(n AS SMALLINT)) * 1000 AS BIGINT) FROM numbers WHERE n BETWEEN -1 AND 1 ORDER BY n;

SELECT CAST(ACOS(CAST(n AS INT)) * 1000 AS BIGINT) FROM numbers WHERE n BETWEEN -1 AND 1 ORDER BY n;

SELECT CAST(ACOS(CAST(n AS BIGINT)) * 1000 AS BIGINT) FROM numbers WHERE n BETWEEN -1 AND 1 ORDER BY n;

SELECT CAST(ACOS(CAST(n AS REAL)) * 1000 AS BIGINT) FROM numbers WHERE n BETWEEN -1 AND 1 ORDER BY n;

SELECT CAST(ACOS(CAST(n AS DOUBLE)) * 1000 AS BIGINT) FROM numbers WHERE n BETWEEN -1 AND 1 ORDER BY n;

SELECT CAST(ASIN(n) * 1000 AS BIGINT) FROM numbers ORDER BY n;

SELECT CAST(COT(CAST(n AS TINYINT)) * 1000 AS BIGINT) FROM numbers WHERE n > 0.1 OR N < -0.1 ORDER BY n;

SELECT CAST(COT(CAST(n AS SMALLINT)) * 1000 AS BIGINT) FROM numbers WHERE n > 0.1 OR N < -0.1 ORDER BY n;

SELECT CAST(COT(CAST(n AS INT)) * 1000 AS BIGINT) FROM numbers WHERE n > 0.1 OR N < -0.1 ORDER BY n;

SELECT CAST(COT(CAST(n AS BIGINT)) * 1000 AS BIGINT) FROM numbers WHERE n > 0.1 OR N < -0.1 ORDER BY n;

SELECT CAST(COT(CAST(n AS REAL)) * 1000 AS BIGINT) FROM numbers WHERE n > 0.1 OR N < -0.1 ORDER BY n;

SELECT CAST(COT(CAST(n AS DOUBLE)) * 1000 AS BIGINT) FROM numbers WHERE n > 0.1 OR N < -0.1 ORDER BY n;

SELECT CAST(ATAN2(CAST(n AS TINYINT), 42) * 1000 AS BIGINT) FROM numbers ORDER BY n;

SELECT CAST(ATAN2(CAST(n AS SMALLINT), 42) * 1000 AS BIGINT) FROM numbers ORDER BY n;

SELECT CAST(ATAN2(CAST(n AS INT), 42) * 1000 AS BIGINT) FROM numbers ORDER BY n;

SELECT CAST(ATAN2(CAST(n AS BIGINT), 42) * 1000 AS BIGINT) FROM numbers ORDER BY n;

SELECT CAST(ATAN2(CAST(n AS REAL), 42) * 1000 AS BIGINT) FROM numbers ORDER BY n;

SELECT CAST(ATAN2(CAST(n AS DOUBLE), 42) * 1000 AS BIGINT) FROM numbers ORDER BY n;

SELECT ASIN(-2);

SELECT ACOS(-2);

SELECT ACOS(-2);

SELECT ATANH(1), ATANH(-1);

SELECT ATANH(-0.5), ATANH(0), ATANH(0.5);

SELECT ACOSH(-1), ACOSH(0), ACOSH(1), ACOSH(2);

SELECT ASINH(-1), ASINH(0), ASINH(2);

SELECT TANH(-0.5), TANH(0), TANH(0.5), TANH(1000);

SELECT COSH(-1), COSH(0), COSH(1), COSH(1000);

SELECT SINH(-1), SINH(0), SINH(1), SINH(1000);

PRAGMA enable_verification;

CREATE TABLE truncme (a DOUBLE, b INT, c UINTEGER);

CREATE TABLE truncme (a DOUBLE, b INT, c UINTEGER);

CREATE TABLE truncme (a DOUBLE, b INT, c UINTEGER);

CREATE TABLE truncme (a DOUBLE, b INT, c UINTEGER);

CREATE TABLE truncme (a DOUBLE, b INT, c UINTEGER);

CREATE TABLE truncme (a DOUBLE, b INT, c UINTEGER);

CREATE TABLE truncme (a DOUBLE, b INT, c UINTEGER);

CREATE TABLE truncme (a DOUBLE, b INT, c UINTEGER);

CREATE TABLE truncme (a DOUBLE, b INT, c UINTEGER);

CREATE TABLE truncme (a DOUBLE, b INT, c UINTEGER);

CREATE TABLE truncme (a DOUBLE, b INT, c UINTEGER);

CREATE TABLE truncme (a DOUBLE, b INT, c UINTEGER);

CREATE TABLE truncme (a DOUBLE, b INT, c UINTEGER);

CREATE TABLE truncme (a DOUBLE, b INT, c UINTEGER);

PRAGMA enable_verification;

SELECT CAST(1 AS TINYINT) + CAST(1 AS TINYINT);

SELECT CAST(1 AS TINYINT) + CAST(1 AS SMALLINT);

SELECT CAST(1 AS TINYINT) + CAST(1 AS INT);

SELECT CAST(1 AS TINYINT) + CAST(1 AS BIGINT);

SELECT CAST(1 AS TINYINT) + CAST(1 AS REAL);

SELECT CAST(1 AS TINYINT) + CAST(1 AS DOUBLE);

SELECT CAST(1 AS TINYINT) + CAST(1 AS TEXT);

SELECT CAST(1 AS SMALLINT) + CAST(1 AS TINYINT);

SELECT CAST(1 AS SMALLINT) + CAST(1 AS SMALLINT);

SELECT CAST(1 AS SMALLINT) + CAST(1 AS INT);

SELECT CAST(1 AS SMALLINT) + CAST(1 AS BIGINT);

SELECT CAST(1 AS SMALLINT) + CAST(1 AS REAL);

SELECT CAST(1 AS SMALLINT) + CAST(1 AS DOUBLE);

SELECT CAST(1 AS SMALLINT) + CAST(1 AS TEXT);

SELECT CAST(1 AS INT) + CAST(1 AS TINYINT);

SELECT CAST(1 AS INT) + CAST(1 AS SMALLINT);

SELECT CAST(1 AS INT) + CAST(1 AS INT);

SELECT CAST(1 AS INT) + CAST(1 AS BIGINT);

SELECT CAST(1 AS INT) + CAST(1 AS REAL);

SELECT CAST(1 AS INT) + CAST(1 AS DOUBLE);

SELECT CAST(1 AS INT) + CAST(1 AS TEXT);

SELECT CAST(1 AS BIGINT) + CAST(1 AS TINYINT);

SELECT CAST(1 AS BIGINT) + CAST(1 AS SMALLINT);

SELECT CAST(1 AS BIGINT) + CAST(1 AS INT);

SELECT CAST(1 AS BIGINT) + CAST(1 AS BIGINT);

SELECT CAST(1 AS BIGINT) + CAST(1 AS REAL);

SELECT CAST(1 AS BIGINT) + CAST(1 AS DOUBLE);

SELECT CAST(1 AS BIGINT) + CAST(1 AS TEXT);

SELECT CAST(1 AS REAL) + CAST(1 AS TINYINT);

SELECT CAST(1 AS REAL) + CAST(1 AS SMALLINT);

SELECT CAST(1 AS REAL) + CAST(1 AS INT);

SELECT CAST(1 AS REAL) + CAST(1 AS BIGINT);

SELECT CAST(1 AS REAL) + CAST(1 AS REAL);

SELECT CAST(1 AS REAL) + CAST(1 AS DOUBLE);

SELECT CAST(1 AS REAL) + CAST(1 AS TEXT);

SELECT CAST(1 AS DOUBLE) + CAST(1 AS TINYINT);

SELECT CAST(1 AS DOUBLE) + CAST(1 AS SMALLINT);

SELECT CAST(1 AS DOUBLE) + CAST(1 AS INT);

SELECT CAST(1 AS DOUBLE) + CAST(1 AS BIGINT);

SELECT CAST(1 AS DOUBLE) + CAST(1 AS REAL);

SELECT CAST(1 AS DOUBLE) + CAST(1 AS DOUBLE);

SELECT CAST(1 AS DOUBLE) + CAST(1 AS TEXT);

PRAGMA enable_verification;

CREATE TABLE test (i INT);

INSERT INTO test VALUES (2);

SELECT - -i FROM test;

SELECT i FROM test;

SELECT -i FROM test;

SELECT i FROM test;

SELECT - -i FROM test;

SELECT - - - - -i FROM test;

CREATE TABLE minima (t TINYINT, s SMALLINT, i INT, b BIGINT);

INSERT INTO minima VALUES (-128, -32768, -2147483648, -9223372036854775808);

SELECT -t FROM minima;

SELECT -s FROM minima;

SELECT -i FROM minima;

SELECT -b FROM minima;

SELECT 'hello';

SELECT -'hello';

CREATE TABLE dates (d DATE);

INSERT INTO dates VALUES ('1992-02-02');

SELECT d FROM dates;

SELECT -d FROM dates;

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (1), (2), (3), (NULL);

SELECT i + 2 = 5, 5 = i + 2 FROM integers ORDER BY i;

SELECT 2 + i = 5, 5 = 2 + i FROM integers ORDER BY i;

SELECT i * 2 = 6, 6 = i * 2 FROM integers ORDER BY i;

SELECT 2 * i = 6, 6 = 2 * i FROM integers ORDER BY i;

SELECT i * 2 = 5 FROM integers ORDER BY i;

SELECT i * 0 = 5 FROM integers ORDER BY i;

SELECT -i > -2 FROM integers ORDER BY i;

SELECT i - 2 = 1, 1 = i - 2 FROM integers ORDER BY i;

SELECT 3 - i = 1, 1 = 3 - i FROM integers ORDER BY i;

SELECT 3 - i < 2, 2 > 3 - i FROM integers ORDER BY i;

SELECT 3 - i <= 1, 1 >= 3 - i FROM integers ORDER BY i;

SELECT i // 2 = 1, 1 = i // 2 FROM integers ORDER BY i;

SELECT 2 / i = 1, 1 = 2 / i FROM integers ORDER BY i;

SELECT 2 / i = 1, 1 = 2 / i FROM integers ORDER BY i;

PRAGMA enable_verification;

CREATE TABLE tab0 (col0 INT, col1 INT, col2 INT);

CREATE TABLE tab1 (col0 INT, col1 INT, col2 INT);

CREATE TABLE tab2 (col0 INT, col1 INT, col2 INT);

INSERT INTO tab0 VALUES (97, 1, 99);

INSERT INTO tab0 VALUES (15, 81, 47);

INSERT INTO tab0 VALUES (87, 21, 10);

INSERT INTO tab1 VALUES (51, 14, 96);

INSERT INTO tab1 VALUES (85, 5, 59);

INSERT INTO tab1 VALUES (91, 47, 68);

INSERT INTO tab2 VALUES (64, 77, 40);

INSERT INTO tab2 VALUES (75, 67, 58);

INSERT INTO tab2 VALUES (46, 51, 23);

SELECT DISTINCT -col2 AS col2 FROM tab1 WHERE NOT 18 BETWEEN NULL AND (col0 * CAST(NULL AS INT) + -3 / col2) OR NOT col0 BETWEEN col2 + col1 AND NULL ORDER BY 1 DESC;

SELECT DISTINCT -col2 AS col2 FROM tab1 WHERE NOT 18 BETWEEN NULL AND (col0 * CAST(NULL AS INT) + -3 / col2) OR NOT col0 BETWEEN col2 + col1 AND NULL ORDER BY 1 DESC;

PRAGMA enable_verification;

SELECT 1 << 2, NULL << 2, 2 << NULL;

SELECT 16 >> 2, 1 >> 2, NULL >> 2, 2 >> NULL;

SELECT 1 & 1, 1 & 0, 0 & 0, NULL & 1, 1 & NULL;

SELECT 1 | 1, 1 | 0, 0 | 0, NULL | 1, 1 | NULL;

SELECT XOR(1, 1), XOR(1, 0), XOR(0, 0), XOR(NULL, 1), XOR(1, NULL);

SELECT CAST(1 AS TINYINT) << -CAST(1 AS TINYINT), CAST(1 AS TINYINT) >> -CAST(1 AS TINYINT), CAST(1 AS TINYINT) << CAST(12 AS TINYINT), CAST(1 AS TINYINT) >> CAST(12 AS TINYINT);

SELECT CAST(1 AS SMALLINT) << -CAST(1 AS SMALLINT), CAST(1 AS SMALLINT) >> -CAST(1 AS SMALLINT), CAST(1 AS SMALLINT) << CAST(20 AS SMALLINT), CAST(1 AS SMALLINT) >> CAST(20 AS SMALLINT);

SELECT CAST(1 AS INT) << -CAST(1 AS INT), CAST(1 AS INT) >> -CAST(1 AS INT), CAST(1 AS INT) << CAST(40 AS INT), CAST(1 AS INT) >> CAST(40 AS INT);

SELECT CAST(1 AS BIGINT) << -CAST(1 AS BIGINT), CAST(1 AS BIGINT) >> -CAST(1 AS BIGINT), CAST(1 AS BIGINT) << CAST(1000 AS BIGINT), CAST(1 AS BIGINT) >> CAST(1000 AS BIGINT);

SELECT 'hello' << 3;

SELECT 3 << 'hello';

SELECT 2.0 << 1;

SELECT CAST(1 AS UTINYINT) << 7, CAST(1 AS USMALLINT) << 15, CAST(1 AS UINT32) << 31, CAST(1 AS UBIGINT) << 63;

SELECT CAST(1 AS UINT32) << 32;

SELECT CAST(2 AS UINT32) << 31;

PRAGMA enable_verification;

BEGIN;

CREATE TABLE bitwise_test (i TINYINT, j TINYINT);

INSERT INTO bitwise_test VALUES (1, 1), (1, 0), (0, 1), (0, 0), (1, NULL), (NULL, 1), (NULL, NULL);

SELECT i << j, i >> j, i & j, i | j, XOR(i, j) FROM bitwise_test;

ROLLBACK;

BEGIN;

CREATE TABLE bitwise_test (i SMALLINT, j SMALLINT);

INSERT INTO bitwise_test VALUES (1, 1), (1, 0), (0, 1), (0, 0), (1, NULL), (NULL, 1), (NULL, NULL);

SELECT i << j, i >> j, i & j, i | j, XOR(i, j) FROM bitwise_test;

ROLLBACK;

BEGIN;

CREATE TABLE bitwise_test (i INT, j INT);

INSERT INTO bitwise_test VALUES (1, 1), (1, 0), (0, 1), (0, 0), (1, NULL), (NULL, 1), (NULL, NULL);

SELECT i << j, i >> j, i & j, i | j, XOR(i, j) FROM bitwise_test;

ROLLBACK;

BEGIN;

CREATE TABLE bitwise_test (i BIGINT, j BIGINT);

INSERT INTO bitwise_test VALUES (1, 1), (1, 0), (0, 1), (0, 0), (1, NULL), (NULL, 1), (NULL, NULL);

SELECT i << j, i >> j, i & j, i | j, XOR(i, j) FROM bitwise_test;

PRAGMA enable_verification;

SELECT 1 = 1, 1 = 1, 1 = 0, 1 = 0, 1 = NULL;

SELECT 1 <> 1, 1 <> 1, 1 <> 0, 1 <> 0, 1 <> NULL;

SELECT ('abc' BETWEEN 20 AND TRUE);

SELECT 'abc' > 10;

SELECT 20.0 = 'abc';

SELECT '1000' > 20;

SELECT '1000' > '20';

SELECT ('abc' BETWEEN '20' AND 'true');

PRAGMA enable_verification;

CREATE TABLE a (i INT, j INT);

INSERT INTO a VALUES (3, 4), (4, 5), (5, 6);

SELECT * FROM a WHERE (i > 3 AND j < 5) OR (i > 3 AND j > 5);

EXPLAIN SELECT * FROM a WHERE (i > 3 AND j < 5) OR (i > 3 AND j > 5);

SELECT TRUE AND TRUE;

SELECT TRUE AND FALSE;

SELECT FALSE AND TRUE;

SELECT FALSE AND FALSE;

SELECT FALSE AND NULL;

SELECT NULL AND FALSE;

SELECT NULL AND TRUE;

SELECT TRUE AND NULL;

SELECT TRUE OR TRUE;

SELECT TRUE OR NULL;

SELECT NULL OR TRUE;

SELECT FALSE OR NULL;

SELECT NULL OR FALSE;

SELECT TRUE OR FALSE;

SELECT FALSE OR TRUE;

SELECT FALSE OR FALSE;

SELECT TRUE AND i > 3 FROM a ORDER BY i;

SELECT i > 3 AND TRUE FROM a ORDER BY i;

SELECT 2 > 3 AND i > 3 FROM a ORDER BY i;

SELECT FALSE AND i > 3 FROM a ORDER BY i;

SELECT i > 3 AND FALSE FROM a ORDER BY i;

SELECT FALSE OR i > 3 FROM a ORDER BY i;

SELECT i > 3 OR FALSE FROM a ORDER BY i;

SELECT TRUE OR i > 3 FROM a ORDER BY i;

SELECT i > 3 OR TRUE FROM a ORDER BY i;

SELECT NULL OR i > 3 FROM a ORDER BY i;

SELECT i > 3 OR NULL FROM a ORDER BY i;

SELECT NULL AND i > 3 FROM a ORDER BY i;

SELECT i > 3 AND NULL FROM a ORDER BY i;

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

CREATE TABLE dates (d DATE);

INSERT INTO dates VALUES ('1992-01-01'), ('1992-03-03'), ('1992-05-05'), ('2022-01-01'), ('044-03-15 (BC)'), (NULL);

CREATE TABLE times (t TIME);

INSERT INTO times VALUES ('00:01:20'), ('20:08:10.998'), ('20:08:10.33'), ('20:08:10.001'), (NULL);

SELECT d, t, d + t FROM dates, times ORDER BY 1, 2;

SELECT d, t, t + d FROM dates, times ORDER BY 1, 2;

CREATE TABLE timetzs (ttz TIMETZ);

INSERT INTO timetzs VALUES ('00:01:20+00'), ('20:08:10.998-07'), ('20:08:10.33+12'), ('20:08:10.001-1559'), (NULL);

SELECT d, ttz, d + ttz FROM dates, timetzs ORDER BY 1, 2;

SELECT d, ttz, ttz + d FROM dates, timetzs ORDER BY 1, 2;

SELECT CAST('294247-01-10' AS DATE) + CAST('04:00:54.775808' AS TIME);

PRAGMA enable_verification;

SELECT CAST((-128) AS TINYINT) // CAST((-1) AS TINYINT);

SELECT CAST((-127) AS TINYINT) // CAST((-1) AS TINYINT);

SELECT CAST((-32768) AS SMALLINT) // CAST((-1) AS SMALLINT);

SELECT CAST((-32767) AS SMALLINT) // CAST((-1) AS SMALLINT);

SELECT CAST((-2147483648) AS INT) // CAST((-1) AS INT);

SELECT CAST((-2147483647) AS INT) // CAST((-1) AS INT);

SELECT CAST((-9223372036854775808) AS BIGINT) // CAST((-1) AS BIGINT);

SELECT CAST((-9223372036854775807) AS BIGINT) // CAST((-1) AS BIGINT);

PRAGMA enable_verification;

CREATE OR REPLACE TABLE test (a INT);

SELECT * FROM test WHERE a IN ('a', 'b', 'c', 'd', 'e');

INSERT INTO test VALUES (42);

SELECT * FROM test WHERE a IN ('a', 'b', 'c', 'd', 'e');

PRAGMA enable_verification;

SELECT FORMAT_BYTES(0);

SELECT FORMAT_BYTES(1);

SELECT FORMAT_BYTES(1023);

SELECT FORMAT_BYTES(1024);

SELECT PG_SIZE_PRETTY(1024);

SELECT FORMAT_BYTES(1024 * 1024 - 1);

SELECT FORMAT_BYTES(1024 * 1024);

SELECT FORMAT_BYTES(1024 * 1024 + 555555);

SELECT FORMAT_BYTES(1024 * 1024 * 1024 - 1);

SELECT FORMAT_BYTES(CAST(1e9 AS BIGINT));

SELECT FORMAT_BYTES(CAST(POWER(1024, 3) AS BIGINT));

SELECT FORMAT_BYTES(CAST(POWER(1024.0, 4) AS BIGINT));

SELECT FORMAT_BYTES(CAST((POWER(1024.0, 4) - 1) AS BIGINT));

SELECT FORMAT_BYTES(CAST(1e15 AS BIGINT));

SELECT FORMAT_BYTES(9223372036854775807);

SELECT FORMAT_BYTES(NULL);

SELECT FORMAT_BYTES(1);

SELECT FORMAT_BYTES(-1);

SELECT FORMAT_BYTES(-9223372036854775808);

SELECT FORMATREADABLEDECIMALSIZE(500);

SELECT FORMATREADABLESIZE(500);

SELECT FORMATREADABLEDECIMALSIZE(500 * 1000);

SELECT FORMATREADABLESIZE(500 * 1000);

SELECT FORMATREADABLEDECIMALSIZE(500 * 1000 * 1000);

SELECT FORMATREADABLESIZE(500 * 1000 * 1000);

PRAGMA enable_verification;

SELECT HEX('duckdb');

SELECT HEX(UNHEX('abcd'));

SELECT HEX(CAST('\x00\x00\x80' AS BLOB));

SELECT FROM_HEX('6475636B6462');

SELECT FROM_HEX('5');

SELECT UNHEX(HEX('duckdb'));

SELECT FROM_HEX('duckdb');

SELECT HEX(COLUMNS('^(.*int|varchar)$')) FROM TEST_ALL_TYPES();

SELECT FROM_HEX(HEX(COLUMNS('^(.*int|varchar)$'))) FROM TEST_ALL_TYPES();

SELECT TO_BINARY('duckdb');

SELECT FROM_BINARY('011001000111010101100011011010110110010001100010');

SELECT TO_BINARY(COLUMNS('^(.*int|varchar)$')) FROM TEST_ALL_TYPES();

SELECT FROM_BINARY(TO_BINARY(COLUMNS('^(.*int|varchar)$'))) FROM TEST_ALL_TYPES();

PRAGMA enable_verification;

CREATE TABLE t0 (c0 TEXT);

INSERT INTO t0 VALUES ('票'), ('t'), ('%'), ('丑'), ('多'), ('🦆');

SELECT COUNT(*) FROM t0 WHERE t0.c0 LIKE '_';

SELECT COUNT(*) FROM t0 WHERE t0.c0 ILIKE '_';

SELECT '🦆a🦆' LIKE '_a_';

SELECT '🦆a🦆' ILIKE '_A_';

SELECT 'BaB' ILIKE '_A_';

SELECT '🦆🦆' ILIKE '_';

SELECT '🦆🦆' ILIKE '__';

SELECT '🦆🦆' ILIKE '___';

PRAGMA enable_verification;

SELECT MD5('hello'), MD5(NULL);

SELECT MD5(CAST('\xff\xff' AS BLOB));

SELECT MD5_NUMBER('hello'), MD5_NUMBER_UPPER(NULL);

SELECT MD5_NUMBER_UPPER('hello'), MD5_NUMBER_UPPER(NULL);

SELECT MD5_NUMBER_LOWER('hello'), MD5_NUMBER_LOWER(NULL);

CREATE TABLE strings AS SELECT CAST(s AS TEXT) AS s FROM GENERATE_SERIES(0, 10, 1) AS t(s);

SELECT MD5(s), MD5('1') FROM strings ORDER BY s;

SELECT MD5(s), MD5('1') FROM strings WHERE CAST(s AS INT) BETWEEN 1 AND 3 ORDER BY s;

PRAGMA enable_verification;

SELECT CHR(0);

SELECT CAST(CHR(0) AS BLOB);

SELECT ASCII(CHR(0));

CREATE TABLE null_byte AS SELECT CONCAT('goo', CHR(0), 'se') AS v;

SELECT * FROM null_byte;

SELECT * FROM null_byte WHERE CONTAINS(v, CHR(0));

SELECT STRPOS(v, CHR(0)) FROM null_byte;

SELECT * FROM null_byte WHERE v LIKE CONCAT('%', CHR(0), '%');

SELECT * FROM null_byte WHERE REGEXP_MATCHES(v, CHR(0));

SELECT * FROM null_byte WHERE REGEXP_FULL_MATCH(v, CONCAT('goo', CHR(0), 'se'));

SELECT {'a': v} FROM null_byte;

SELECT [v] FROM null_byte;

SELECT LENGTH(v) FROM null_byte;

SELECT STRLEN(v) FROM null_byte;

SELECT LENGTH_GRAPHEME(v) FROM null_byte;

SELECT v || v FROM null_byte;

SELECT PRINTF('%s - zzz', v) FROM null_byte;

SELECT SUBSTRING(v, 4) FROM null_byte;

CREATE TABLE more_null_bytes AS SELECT 1 AS id, v FROM null_byte UNION ALL SELECT 2 AS id, SUBSTRING(v, 4, 1) FROM null_byte UNION ALL SELECT 3 AS id, v FROM null_byte;

SELECT * FROM more_null_bytes ORDER BY v, id;

SELECT v, SUM(id) FROM more_null_bytes GROUP BY v ORDER BY ALL;

SELECT v, SUM(id) FROM more_null_bytes GROUP BY v ORDER BY ALL;

SELECT COUNT(*) FROM null_byte JOIN more_null_bytes USING (v);

PRAGMA enable_verification;

SELECT REGEXP_SPLIT_TO_TABLE('a b c', ' ');

SELECT REGEXP_SPLIT_TO_TABLE('axbyc', '[x|y]');

SELECT REGEXP_SPLIT_TO_TABLE('axbyc', '[x|y]'), 42;

PRAGMA enable_verification;

CREATE TABLE data (wsc INT, zipcode TEXT);

INSERT INTO data VALUES (32, '00' || CHR(32) || '001'), (160, '00' || CHR(160) || '001'), (0, '00🦆001');

SELECT * FROM data WHERE REGEXP_MATCHES(zipcode, '^00\x{0020}001$');

SELECT * FROM data WHERE REGEXP_MATCHES(zipcode, '^00\x{00A0}001$');

SELECT * FROM data WHERE REGEXP_MATCHES(zipcode, '\x{00A0}001$');

SELECT * FROM data WHERE REGEXP_MATCHES(zipcode, '^00\x{1F986}001$');

SELECT * FROM data WHERE REGEXP_MATCHES(zipcode, '\x{1F986}');

SELECT * FROM data WHERE REGEXP_MATCHES(zipcode, '^00\x{00A0}001$') AND REGEXP_MATCHES(zipcode, '^00\x{0020}001$');

SELECT REGEXP_MATCHES(zipcode, '^00\x{FFFFFFFF}001$') FROM data;

PRAGMA enable_verification;

CREATE TABLE filenames (filename TEXT);

INSERT INTO filenames VALUES ('rundate_2023-01-01_pass_1'), ('rundate_2023-01-01_pass_2'), ('rundate_2023-01-01_pass_3'), ('rundate_2023-01-10_pass_1'), ('rundate_2023-01-10_pass_2'), ('rundate_2023-02-14_pass_1'), ('invalid'), (NULL);

WITH files AS (SELECT f.*, payload FROM filenames AS f, RANGE(0, 3) AS t(payload)), extracted AS (SELECT REGEXP_EXTRACT(filename, 'rundate_(\d+-\d+-\d+)_pass_(\d+)', ['rundate', 'pass']) AS groups, payload FROM files) SELECT CAST(groups.rundate AS DATE) AS rundate, CAST(groups.pass AS SMALLINT) AS PASS, SUM(payload) FROM extracted WHERE LENGTH(groups.rundate) > 0 GROUP BY ALL;

WITH files AS (SELECT f.*, payload FROM filenames AS f, RANGE(0, 1000) AS t(payload)), extracted AS (SELECT REGEXP_EXTRACT(filename, 'rundate_(\d+-\d+-\d+)_pass_(\d+)', ['rundate', 'pass']) AS groups, payload FROM files) SELECT CAST(groups.rundate AS DATE) AS rundate, CAST(groups.pass AS SMALLINT) AS PASS, SUM(payload) FROM extracted WHERE LENGTH(groups.rundate) > 0 GROUP BY ALL;

WITH files AS (SELECT f.*, payload FROM filenames AS f, RANGE(0, 3) AS t(payload)), extracted AS (SELECT REGEXP_EXTRACT(filename, 'rundate_(\d+-\d+-\d+)_([a-z]+?)_(\d+)', ['rundate', 'opt', 'pass']) AS groups, payload FROM files) SELECT CAST(groups.rundate AS DATE) AS rundate, groups.opt AS opt, CAST(groups.pass AS SMALLINT) AS pass, SUM(payload) FROM extracted WHERE LENGTH(groups.rundate) > 0 GROUP BY ALL;

WITH files AS (SELECT f.*, payload FROM filenames AS f, RANGE(0, 3) AS t(payload)), extracted AS (SELECT REGEXP_EXTRACT(filename, 'rundate_(\d+-\d+-\d+)_([0-9]+?)_(\d+)', ['rundate', 'opt', 'pass']) AS groups, payload FROM files) SELECT CAST(groups.rundate AS DATE) AS rundate, groups.opt AS opt, CAST(groups.pass AS SMALLINT) AS pass, SUM(payload) FROM extracted WHERE LENGTH(groups.rundate) > 0 GROUP BY ALL;

SELECT REGEXP_EXTRACT(filename, 'rundate_(\d+-\d+-\d+)_pass_(\d+)', []) AS groups FROM filenames;

WITH patterns AS (SELECT 'rundate_(\d+-\d+-\d+)_pass_(\d+)' AS pattern FROM RANGE(0, 3)) SELECT REGEXP_EXTRACT(filename, pattern, ['rundate', 'pass']) AS groups FROM filenames, patterns;

SELECT REGEXP_EXTRACT(filename, 'rundate_(\d+-\d+-\d+)_pass_(\d+)', ['rundate', NULL]) AS groups FROM filenames;

SELECT REGEXP_EXTRACT(filename, 'rundate_(\d+-\d+-\d+)_pass_(\d+)', ['rundate', 'rundate']) AS groups FROM filenames;

SELECT REGEXP_EXTRACT(filename, 'rundate_(\d+-\d+-\d+)_pass_(\d+)', ['rundate', 'RUNDATE']) AS groups FROM filenames;

SELECT REGEXP_EXTRACT(filename, 'rundate_(\d+-\d+-\d+)_pass_(\d+)', ['rundate', 'pass', 'overflow']) AS groups FROM filenames;

SELECT REGEXP_EXTRACT(filename, NULL, ['rundate', 'pass']) AS groups FROM filenames;

PRAGMA enable_verification;

SELECT REGEXP_ESCAPE('https://duckdb.org');

SELECT REGEXP_ESCAPE('abc123ABC');

SELECT REGEXP_ESCAPE('a.b[c]*');

SELECT REGEXP_ESCAPE('a b c');

SELECT REGEXP_ESCAPE('\n');

SELECT REGEXP_ESCAPE('line1\nline2');

SELECT REGEXP_ESCAPE('@');

SELECT REGEXP_ESCAPE('path\to\wonderland');

SELECT REGEXP_ESCAPE('$()*+.?[\]^{|}-');

CREATE TABLE tbl (c TEXT);

INSERT INTO tbl SELECT 'a)*.?[\]b^{2.+_c' FROM GENERATE_SERIES(1, 500);

INSERT INTO tbl (c) SELECT '1?ch@racter$' FROM GENERATE_SERIES(1, 500);

SELECT REGEXP_ESCAPE(c) FROM tbl;

WITH cte AS (SELECT c FROM tbl LIMIT 500) SELECT SUM(CAST(REGEXP_ESCAPE(c) = 'a\)\*\.\?\[\\\]b\^\{2\.\+_c' AS INT)) FROM cte;

WITH cte AS (SELECT c FROM tbl LIMIT 500 OFFSET 500) SELECT SUM(CAST(REGEXP_ESCAPE(c) = '1\?ch\@racter\$' AS INT)) FROM cte;

PRAGMA enable_verification;

SELECT REGEXP_EXTRACT('foobarbaz', 'b..');

SELECT REGEXP_EXTRACT('foobarbaz', 'B..');

SELECT REGEXP_EXTRACT('foobarbaz', 'B..', 0, 'i');

SELECT REGEXP_EXTRACT('foobarbaz', 'b..', 1);

SELECT REGEXP_EXTRACT('foobarbaz', '(b..)(b..)');

SELECT REGEXP_EXTRACT('foobarbaz', '(b..)(b..)', 1);

SELECT REGEXP_EXTRACT('foobarbaz', '(b..)(b..)', 2);

SELECT REGEXP_EXTRACT('foobarbaz', '(b..)(b..)', -1);

SELECT REGEXP_EXTRACT('foobarbaz', '(b..)(b..)', 42);

CREATE TABLE test (s TEXT, p TEXT, i INT);

INSERT INTO test VALUES ('foobarbaz', 'b..', 0), ('foobarbaz', 'b..', 1), ('foobarbaz', '(b..)(b..)', 0), ('foobarbaz', '(b..)(b..)', 1), ('foobarbaz', '(b..)(b..)', 2);

SELECT REGEXP_EXTRACT(s, p, i) FROM test;

SELECT REGEXP_EXTRACT(s, p) FROM test;

SELECT REGEXP_EXTRACT(s, 'b..') FROM test;

SELECT REGEXP_EXTRACT(s, '(b..)(b..)', i) FROM test;

SELECT REGEXP_EXTRACT('foobarbaz', NULL);

SELECT REGEXP_EXTRACT('foobarbaz', 'b..', NULL);

SELECT REGEXP_EXTRACT(NULL, 'b..');

SELECT REGEXP_EXTRACT('foobarbaz', 'b..', '1');

PRAGMA enable_verification;

SELECT REGEXP_EXTRACT_ALL('1a 2b 14m', '(\d+)', 1);

SELECT REGEXP_EXTRACT_ALL('1a 2b 14m', '(\d+)([a-z]+)', 2);

SELECT REGEXP_EXTRACT_ALL('test', '.', 0);

SELECT REGEXP_EXTRACT_ALL('1a 2b 14m', '(\\d+)([a-z]+)', -1);

SELECT REGEXP_EXTRACT_ALL('1a 2b 14m', '\\d+', 0);

SELECT REGEXP_EXTRACT_ALL('1a 2b 14m', '\\d+', 0);

SELECT REGEXP_EXTRACT_ALL('1a 2b 14m', '\\d+', 1);

SELECT REGEXP_EXTRACT_ALL('1a 2b 14m', '\\d+', 2);

SELECT REGEXP_EXTRACT_ALL('1a 2b 14m', '\\d+', -1);

SELECT REGEXP_EXTRACT_ALL('1a 2b 14m', '(\\d+)?', 1);

SELECT REGEXP_EXTRACT_ALL('a 2b 14m', '(\\d+)?', 1);

SELECT REGEXP_EXTRACT_ALL('1a 2b 14m', '(\\d+)([a-z]+)', 0);

SELECT REGEXP_EXTRACT_ALL('1a 2b 14m', '(\\d+)([a-z]+)', 0);

SELECT REGEXP_EXTRACT_ALL('1a 2b 14m', '(\\d+)([a-z]+)', 1);

SELECT REGEXP_EXTRACT_ALL('1a 2b 14m', '(\\d+)([a-z]+)', 2);

SELECT REGEXP_EXTRACT_ALL('1a 2b 14m', '(\\d+)([a-z]+)', 3);

SELECT REGEXP_EXTRACT_ALL('1a 2b 14m', '(\\d+)([a-z]+)', -1);

SELECT REGEXP_EXTRACT_ALL('1a 2b 14m', '(\\d+)?([a-z]+)', 1);

SELECT REGEXP_EXTRACT_ALL('a 2b 14m', '(\\d+)?([a-z]+)', 1);

SELECT REGEXP_EXTRACT_ALL('AbCdE', '([[:lower:]]+)C([[:lower:]]+)', 1);

SELECT REGEXP_EXTRACT_ALL('AbCdEfCg', '([[:lower:]]+)C([[:lower:]]+)', 1);

SELECT REGEXP_EXTRACT_ALL('abc=111, def=222, ghi=333', '("[^"]+"|\w+)=("[^"]+"|\w+)', 1);

SELECT REGEXP_EXTRACT_ALL('', NULL, 0);

SELECT REGEXP_EXTRACT_ALL(NULL, '', 0);

SELECT REGEXP_EXTRACT_ALL('', '', 0);

SELECT REGEXP_EXTRACT_ALL('', 'abc', 0);

SELECT REGEXP_EXTRACT_ALL('abc', '.', 0);

SELECT REGEXP_EXTRACT_ALL('aaa', '^a', 0);

SELECT REGEXP_EXTRACT_ALL('abc', 'abc', 0);

SELECT REGEXP_EXTRACT_ALL('abcdef', 'a.c.*f', 0);

SELECT REGEXP_EXTRACT_ALL('abcdef', 'ac.*e.', 0);

SELECT REGEXP_EXTRACT_ALL('abcdef', 'bcde', 0);

SELECT REGEXP_EXTRACT_ALL('aabca', 'a*', 0);

SELECT REGEXP_EXTRACT_ALL('aaba', 'a?', 0);

SELECT REGEXP_EXTRACT_ALL('baac', 'a*', 0);

SELECT REGEXP_EXTRACT_ALL('abcd', 'a(bc)*', 0);

SELECT REGEXP_EXTRACT_ALL('щцф', '.', 0);

SELECT REGEXP_EXTRACT_ALL('щцф', '.{3}', 0);

SELECT REGEXP_EXTRACT_ALL('щцф', '.{6}', 0);

SELECT REGEXP_EXTRACT_ALL('щццф', 'ц*', 0);

SELECT REGEXP_EXTRACT_ALL('abba', 'b*', 0);

SELECT REGEXP_EXTRACT_ALL('', '()', 0);

SELECT REGEXP_EXTRACT_ALL('', '(abc)', 0);

SELECT REGEXP_EXTRACT_ALL('', '(abc)?', 0);

SELECT REGEXP_EXTRACT_ALL('abc', 'a(b)c', 0);

SELECT REGEXP_EXTRACT_ALL('abbb', '^a*(b)', 0);

SELECT REGEXP_EXTRACT_ALL('XbASDZb', '(.)b', 0);

SELECT REGEXP_EXTRACT_ALL('abcdef', 'a(.c.*)f', 0);

SELECT REGEXP_EXTRACT_ALL('abcdef', '(bcde)', 0);

SELECT REGEXP_EXTRACT_ALL('this_is__a___Test', '(.*?)(?:_|$)', 0);

SELECT REGEXP_EXTRACT_ALL('щцф', 'щ(.).', 1);

SELECT REGEXP_EXTRACT_ALL('щцф', '(.{6})', 0);

SELECT REGEXP_EXTRACT_ALL('abc', '((a))', 0);

SELECT REGEXP_EXTRACT_ALL('abc', '(a)(b)', 0);

SELECT REGEXP_EXTRACT_ALL('', '(', 0);

SELECT REGEXP_EXTRACT_ALL('abcdef', 'ac.*e.', 0);

SELECT REGEXP_EXTRACT_ALL('щцф', '.{2}', 0);

SELECT REGEXP_EXTRACT_ALL('abc', '.{2}', 0);

SELECT REGEXP_EXTRACT_ALL('\001\002\003', '\002?', 0);

SELECT REGEXP_EXTRACT_ALL('', '()', 0);

SELECT REGEXP_EXTRACT_ALL('', '(abc)', 0);

SELECT REGEXP_EXTRACT_ALL('', '(abc)?', 0);

SELECT REGEXP_EXTRACT_ALL('this__test_case', '(.*?)(?:_|$)', 0);

SELECT REGEXP_EXTRACT_ALL('щцф', 'щ(..)..', 0);

SELECT str, REGEXP_EXTRACT_ALL(str, 'ab?cd', 0) AS matched FROM (VALUES ('acd'), ('abcd'), ('abcdacd'), ('abbcd'), ('abbbcd'), ('ab1cd')) AS t(str);

SELECT str, REGEXP_EXTRACT_ALL(str, 'a(bc)?d', 0) AS matched FROM (VALUES ('ad'), ('abd'), ('acd'), ('abcd'), ('abce'), ('abcxd'), ('abcbcd')) AS t(str);

SELECT str, REGEXP_EXTRACT_ALL(str, 'a[bc]?d', 0) AS matched FROM (VALUES ('ad'), ('abd'), ('acd'), ('acde'), ('abcd'), ('abbd')) AS t(str);

SELECT str, REGEXP_EXTRACT_ALL(str, 'X[\d]?Y[\d]?', 0) AS matched FROM (VALUES ('XY'), ('X1Y'), ('X123Y'), ('X1Y23')) AS t(str);

SELECT str, REGEXP_EXTRACT_ALL(str, 'ab*cd', 0) AS matched FROM (VALUES ('acd'), ('abcd'), ('abcdacd'), ('abbcd'), ('abbbcd'), ('ab1cd')) AS t(str);

SELECT str, REGEXP_EXTRACT_ALL(str, 'a(bc)*d', 0) AS matched FROM (VALUES ('ad'), ('abd'), ('acd'), ('abcd'), ('abcxd'), ('abcbcd'), ('abcbce')) AS t(str);

SELECT str, REGEXP_EXTRACT_ALL(str, 'a[bc]*d', 0) AS matched FROM (VALUES ('ad'), ('abd'), ('acd'), ('abcd'), ('abcbbcd'), ('abce')) AS t(str);

SELECT str, REGEXP_EXTRACT_ALL(str, 'X[\d]*Y[\d]*', 0) AS matched FROM (VALUES ('XY'), ('X1Y'), ('X123Y'), ('X1Y23'), ('X12Z34Y')) AS t(str);

SELECT str, REGEXP_EXTRACT_ALL(str, 'ab+cd', 0) AS matched FROM (VALUES ('acd'), ('abcd'), ('abcdacd'), ('abbcd'), ('abbbcd'), ('ab1cd')) AS t(str);

SELECT str, REGEXP_EXTRACT_ALL(str, '(ab)+cd', 0) AS matched FROM (VALUES ('bcd'), ('abcd'), ('abbcd'), ('ababcd'), ('ababxcd')) AS t(str);

SELECT str, REGEXP_EXTRACT_ALL(str, 'a[bc]+d', 0) AS matched FROM (VALUES ('ad'), ('abd'), ('acd'), ('abcd'), ('abce'), ('abcbd')) AS t(str);

SELECT str, REGEXP_EXTRACT_ALL(str, 'X[\d]+Y[\d]*', 0) AS matched FROM (VALUES ('XY'), ('X1Y'), ('X123Y'), ('X1Y23'), ('X12Z34Y')) AS t(str);

SELECT str, REGEXP_EXTRACT_ALL(str, 'ab{3}cd', 0) AS m1, REGEXP_EXTRACT_ALL(str, 'ab{1,}cd', 0) AS m2, REGEXP_EXTRACT_ALL(str, 'ab{1,2}cd', 0) AS m3, REGEXP_EXTRACT_ALL(str, 'ab{0,2}cd', 0) AS m4 FROM (VALUES ('acd'), ('abcd'), ('abcdacd'), ('abbcd'), ('abbbcd'), ('ab1cd')) AS t(str);

SELECT str, REGEXP_EXTRACT_ALL(str, '(ab){2}cd', 0) AS m1, REGEXP_EXTRACT_ALL(str, '(ab){1,}cd', 0) AS m2, REGEXP_EXTRACT_ALL(str, '(ab){1,2}cd', 0) AS m3, REGEXP_EXTRACT_ALL(str, '(ab){0,2}cd', 0) AS m4 FROM (VALUES ('acd'), ('bcd'), ('abcd'), ('abbcd'), ('ababcd'), ('ab1cd')) AS t(str);

SELECT str, REGEXP_EXTRACT_ALL(str, '[\d]{3}', 0) AS m1, REGEXP_EXTRACT_ALL(str, '[\d]{5}', 0) AS m2, REGEXP_EXTRACT_ALL(str, '[\d]{1,}', 0) AS m3, REGEXP_EXTRACT_ALL(str, '[\d]{1,2}', 0) AS m4, REGEXP_EXTRACT_ALL(str, '[\d]{0,2}', 0) AS m5 FROM (VALUES ('03-123-4567')) AS t(str);

SELECT str, REGEXP_EXTRACT_ALL(str, 'ab++', 0) AS m1_long FROM (VALUES ('acd'), ('abcd'), ('abbcd'), ('abbbcd')) AS t(str);

SELECT REGEXP_EXTRACT_ALL('123456789', '^[0-9]*$', 0) AS m1, REGEXP_EXTRACT_ALL('abcdefg', '^[a-z]*$', 0) AS m2, REGEXP_EXTRACT_ALL('ABCDEFG', '^[A-Z]*$', 0) AS m3, REGEXP_EXTRACT_ALL('ABCdefg', '^[a-zA-Z]*$', 0) AS m4, REGEXP_EXTRACT_ALL('12aaAA', '^[0-9a-zA-Z]*$', 0) AS m5, REGEXP_EXTRACT_ALL('123-1234', '^[0-9]{3}-[0-9]{4}$', 0) AS m6, REGEXP_EXTRACT_ALL('2009/7/29', '^[0-9]{4}/[01]?[0-9]/[0123]?[0-9]$', 0) AS m7;

WITH sample AS (SELECT s FROM (VALUES ('https://docs.fluentd.org/v0.12/articles/out_file'), ('https://docs.fluentd.org/v0.12/articles/out_forward'), ('https://www.fluentd.org/v0.12/articles/out_file'), ('out_file/article/docs.fluentd.org/')) AS t(s)) SELECT s, REGEXP_EXTRACT_ALL(s, 'docs.fluentd.org.*out_file', 0) AS match_strs1, REGEXP_EXTRACT_ALL(s, 'docs.fluentd.org|out_file', 0) AS match_strs2 FROM sample;

SELECT REGEXP_EXTRACT_ALL('hello', '.', 2);

SELECT REGEXP_EXTRACT_ALL('https://www.emakina.nl/?utm_source=sf_mail&user_id=7h87hte51kj_9866c', '([^\?&]+)=', 0) AS parameter_key, REGEXP_EXTRACT_ALL('https://www.emakina.nl/?utm_source=sf_mail&user_id=7h87hte51kj_9866c', '=([^&]+)', 0) AS parameter_value;

SELECT REGEXP_EXTRACT_ALL('si1si2', 'si\d$', 0);

SELECT REGEXP_EXTRACT_ALL('si1si2', '^(si\d)(?:.*)$', 1);

SELECT REGEXP_EXTRACT_ALL('aabb', '^((aa)(bb))$', 3);

WITH t(pattern) AS (SELECT * FROM (VALUES (NULL), ('(a)'), ('(a)(a)(a)'), ('()'), ('(a)(a)'), (NULL), ('(a)'), ('(a)(b)?(a)'), ('(a)(a)(a)(a)(a)(a)(a)'), (NULL)) AS _values) SELECT REGEXP_EXTRACT_ALL('aaaaaaaa', pattern, 0) FROM t;

WITH t(input, pattern, g) AS (SELECT * FROM (VALUES (NULL, NULL, 0), (NULL, NULL, 1), ('aaaaaaaa', '(a)', 0), ('aaaaaaaa', '(a)(a)(a)', 0), ('aaaaaaaa', '()', 1), ('aaaaaaaa', '(a)(a)', 0), (NULL, NULL, NULL), ('aaaaaaaa', '(a)', 0), ('aaaaaaaa', '(a)(b)?(a)', NULL), ('aaa', '(a)(a)(a)(a)(a)(a)(a)', 0), ('aaaaaaaaaaa', '(a)(a)(a)(a)(a)(a)(a)', 0), (NULL, '()', NULL)) AS _values) SELECT REGEXP_EXTRACT_ALL(input, pattern, g) FROM t;

SELECT REGEXP_EXTRACT_ALL('foobarbaz', '(BA[R|Z])', 'i', 1);

WITH t(input, pattern, g) AS (SELECT * FROM (VALUES (NULL, NULL, 0), (NULL, NULL, 1), ('aaaaaaaa', '(A)', 0), ('aaaaaaaa', '(a)(A)(a)', 0), ('aaaaaaaa', '()', 1), ('aaaaaaaa', '(a)(A)', 0), (NULL, NULL, NULL), ('aaaaaaaa', '(a)', 0), ('aaaaaaaa', '(a)(B)?(a)', NULL), ('aaa', '(a)(a)(A)(A)(a)(A)(a)', 0), ('aaaaaaaaaaa', '(a)(A)(a)(a)(a)(a)(a)', 0), (NULL, '()', NULL)) AS _values) SELECT REGEXP_EXTRACT_ALL(input, pattern, 'i', g) FROM t;

PRAGMA enable_verification;

CREATE TABLE regex (s TEXT);

INSERT INTO regex VALUES ('asdf'), ('xxxx'), ('aaaa');

SELECT s FROM regex WHERE REGEXP_MATCHES(s, 'as(c|d|e)f');

SELECT s FROM regex WHERE NOT REGEXP_MATCHES(s, 'as(c|d|e)f');

SELECT s FROM regex WHERE REGEXP_MATCHES(s, 'as(c|d|e)f') AND s = 'asdf';

SELECT s FROM regex WHERE REGEXP_MATCHES(s, 'as(c|d|e)f') AND REGEXP_MATCHES(s, 'as[a-z]f');

PRAGMA enable_verification;

SELECT REGEXP_REPLACE('foobarbaz', 'b..', 'X');

SELECT REGEXP_REPLACE('ana ana', 'ana', 'banana', 'g');

SELECT REGEXP_REPLACE('ANA ana', 'ana', 'banana', 'gi');

SELECT REGEXP_REPLACE('ana', 'ana', 'banana', 'c');

SELECT REGEXP_REPLACE('ANA', 'ana', 'banana', 'i');

SELECT REGEXP_REPLACE('as^/$df', '^/$', '', 'l');

SELECT REGEXP_REPLACE('as^/$df', '^/$', '');

SELECT REGEXP_REPLACE('hello
world', '.*', 'x', 'sg');

SELECT COUNT(*) FROM (SELECT 'x
x') AS t1(a) JOIN (SELECT REGEXP_REPLACE('hello
world', '.*', 'x', 'ng')) AS t2(a) USING (a);

CREATE TABLE test (v TEXT);

INSERT INTO test VALUES ('hello'), ('HELLO');

SELECT REGEXP_REPLACE(v, 'h.*', 'world', 'i') FROM test ORDER BY v;

SELECT REGEXP_REPLACE(v, 'h.*', 'world', 'c') FROM test ORDER BY v;

SELECT REGEXP_REPLACE(v, 'h.*', 'world', v) FROM test ORDER BY v;

SELECT REGEXP_REPLACE('asdf', '.*SD.*', 'a', 'q');

SELECT REGEXP_MATCHES('abc', '*');

SELECT REGEXP_REPLACE('abc', '*', 'X');

CREATE TABLE regex (s TEXT, r TEXT);

INSERT INTO regex VALUES ('abc', '*');

SELECT REGEXP_MATCHES(s, r) FROM regex;

SELECT REGEXP_REPLACE(s, r, 'X') FROM regex;

PRAGMA enable_verification;

CREATE TABLE t0 AS SELECT * FROM (VALUES ('asdf')) AS t(c0);

SELECT REGEXP_MATCHES(c0, NULL) FROM t0;

SELECT REGEXP_MATCHES(c0, '.*sd.*') FROM t0;

SELECT REGEXP_MATCHES(c0, '.*yu.*') FROM t0;

SELECT REGEXP_MATCHES(c0, '') FROM t0;

SELECT REGEXP_MATCHES(c0, 'sd') FROM t0;

SELECT REGEXP_FULL_MATCH(c0, 'sd') FROM t0;

SELECT REGEXP_FULL_MATCH(c0, '.sd.') FROM t0;

SELECT REGEXP_MATCHES(c0, '^sdf$') FROM t0;

SELECT REGEXP_MATCHES('', '.*yu.*');

SELECT REGEXP_MATCHES('', '.*');

SELECT REGEXP_MATCHES(c0, CAST(NULL AS TEXT)) FROM t0;

SELECT REGEXP_MATCHES(CAST(NULL AS TEXT), '.*sd.*');

SELECT REGEXP_MATCHES(CAST(NULL AS TEXT), CAST(NULL AS TEXT));

SELECT REGEXP_MATCHES('foobarbequebaz', '(bar)(beque)');

SELECT REGEXP_MATCHES('', '\X');

CREATE TABLE regex (s TEXT, p TEXT);

INSERT INTO regex VALUES ('asdf', 'sd'), ('asdf', '^sd'), (NULL, '^sd'), ('asdf', NULL);

SELECT REGEXP_MATCHES(s, '.*') FROM regex;

SELECT REGEXP_MATCHES(s, p) FROM regex;

SELECT REGEXP_MATCHES(c0, '.*SD.*', 'i') FROM t0;

SELECT REGEXP_MATCHES(c0, '.*SD.*', 'c') FROM t0;

SELECT REGEXP_MATCHES('as^/$df', '^/$', 'l');

SELECT REGEXP_MATCHES('as^/$df', '^/$');

SELECT REGEXP_MATCHES('hello
world', '.*', 's');

SELECT REGEXP_FULL_MATCH('hello
world', '.*', 'n');

SELECT REGEXP_MATCHES(c0, '.*SD.*', ' i 	') FROM t0;

SELECT REGEXP_MATCHES(c0, '.*SD.*', NULL) FROM t0;

CREATE TABLE test (v TEXT);

INSERT INTO test VALUES ('hello'), ('HELLO');

SELECT REGEXP_MATCHES(v, 'h.*', 'i') FROM test ORDER BY v;

SELECT REGEXP_MATCHES(v, 'h.*', 'c') FROM test ORDER BY v;

SELECT REGEXP_MATCHES(v, 'h.*', v) FROM test ORDER BY v;

SELECT REGEXP_MATCHES(c0, '.*SD.*', 'q') FROM t0;

SELECT REGEXP_MATCHES(c0, '.*SD.*', 'g') FROM t0;

INSERT INTO regex VALUES ('asdf', '(');

SELECT REGEXP_MATCHES(s, p) FROM regex;

PRAGMA enable_verification;

SELECT SHA1('hello'), SHA1(NULL);

SELECT SHA1('');

SELECT SHA1(CAST('\xff\xff' AS BLOB));

CREATE TABLE strings AS SELECT CAST(s AS TEXT) AS s FROM GENERATE_SERIES(0, 10, 1) AS t(s);

SELECT SHA1(s), SHA1('1') FROM strings ORDER BY s;

SELECT SHA1(s), SHA1('1') FROM strings WHERE CAST(s AS INT) BETWEEN 1 AND 3 ORDER BY s;

SELECT SHA1(s), SHA1('1') FROM strings WHERE CAST(s AS INT) BETWEEN 1 AND 3 ORDER BY s;

SELECT SHA1(CAST('' AS BLOB));

SELECT SHA1(42);

PRAGMA enable_verification;

SELECT SHA256('hello'), SHA256(NULL);

SELECT SHA256('');

SELECT SHA256(CAST('\xff\xff' AS BLOB));

CREATE TABLE strings AS SELECT CAST(s AS TEXT) AS s FROM GENERATE_SERIES(0, 10, 1) AS t(s);

SELECT SHA256(s), SHA256('1') FROM strings ORDER BY s;

SELECT SHA256(s), SHA256('1') FROM strings WHERE CAST(s AS INT) BETWEEN 1 AND 3 ORDER BY s;

SELECT SHA256();

SELECT STRIP_ACCENTS('hello'), STRIP_ACCENTS('héllo');

SELECT STRIP_ACCENTS('mühleisen'), STRIP_ACCENTS('hannes mühleisen');

CREATE TABLE collate_test (s TEXT, str TEXT);

INSERT INTO collate_test VALUES ('äää', 'aaa');

INSERT INTO collate_test VALUES ('hännës mühlëïsën', 'hannes muhleisen');

INSERT INTO collate_test VALUES ('olá', 'ola');

INSERT INTO collate_test VALUES ('ôâêóáëòõç', 'oaeoaeooc');

SELECT STRIP_ACCENTS(s) = STRIP_ACCENTS(str) FROM collate_test;

PRAGMA enable_verification;

CREATE TABLE strings (s TEXT, off INT);

INSERT INTO strings VALUES ('hello', 1), ('world', 2), ('b', 1), (NULL, 2);

SELECT ARRAY_EXTRACT('🦆ab', 4), ARRAY_EXTRACT('abc', 4);

SELECT ARRAY_EXTRACT(s, 2) FROM strings;

SELECT ARRAY_EXTRACT(s, 3) FROM strings;

SELECT ARRAY_EXTRACT(s, off) FROM strings;

SELECT ARRAY_EXTRACT(s, 2) FROM strings;

SELECT ARRAY_EXTRACT('hello', off) FROM strings;

SELECT ARRAY_EXTRACT(CAST(NULL AS TEXT), off) FROM strings;

SELECT ARRAY_EXTRACT('hello', NULL) FROM strings;

SELECT ARRAY_EXTRACT(CAST(NULL AS TEXT), NULL) FROM strings;

SELECT ARRAY_EXTRACT(CAST(NULL AS TEXT), off) FROM strings;

SELECT ARRAY_EXTRACT(CAST(NULL AS TEXT), NULL) FROM strings;

SELECT ARRAY_EXTRACT(s, -1) FROM strings;

SELECT ARRAY_EXTRACT(s, 1) FROM strings;

SELECT ARRAY_EXTRACT(s, 6) FROM strings;

SELECT ARRAY_EXTRACT(s, 2147483646) FROM strings;

SELECT ARRAY_EXTRACT(s, -2147483647) FROM strings;

SELECT LIST_EXTRACT('1', -1);

SELECT ARRAY_EXTRACT('1', 9223372036854775807);

SELECT ARRAY_EXTRACT('0', -9223372036854775808);

PRAGMA enable_verification;

SELECT ASCII('x');

SELECT ASCII('a');

SELECT ASCII('ABC');

SELECT ASCII('Ω');

SELECT ASCII('ΩΩ');

SELECT ASCII('Ä');

SELECT ASCII('5');

SELECT ASCII(NULL);

SELECT ASCII();

SELECT CHR(97);

SELECT CHR(196);

SELECT CHR(937);

SELECT CHR(NULL);

SELECT CHR(-10);

SELECT CHR(1073741824);

SELECT CHR(1073741824);

PRAGMA enable_verification;

SELECT BAR(x * x, 0, 100) FROM RANGE(0, 11) AS t(x);

SELECT BAR(9, 10, 20);

SELECT BAR(120, -10, 100, 10);

SELECT BAR(40, 20, 0);

SELECT BAR(100, 200, 0);

SELECT BAR(-10, 20, 0);

SELECT BAR(CAST('nan' AS DOUBLE), 0, 10);

SELECT BAR(CAST('infinity' AS DOUBLE), 0, 10);

SELECT BAR(CAST('-infinity' AS DOUBLE), 0, 10);

SELECT BAR(NULL, 0, 10);

SELECT BAR(1, CAST('nan' AS DOUBLE), 10);

SELECT BAR(1, CAST('-infinity' AS DOUBLE), 10);

SELECT BAR(1, CAST('infinity' AS DOUBLE), 10);

SELECT BAR(1, NULL, 10);

SELECT BAR(1, 0, CAST('nan' AS DOUBLE));

SELECT BAR(1, 0, CAST('-infinity' AS DOUBLE));

SELECT BAR(1, 0, CAST('infinity' AS DOUBLE));

SELECT BAR(1, 0, 10, CAST('nan' AS DOUBLE));

SELECT BAR(1, 0, 10, CAST('infinity' AS DOUBLE));

SELECT BAR(1, 0, 10, CAST('-infinity' AS DOUBLE));

SELECT BAR(1, 0, 10, 1000);

SELECT BAR(1, 0, 10, 1001);

SELECT BAR(1, 0, 10, 1);

SELECT BAR(10, 10, 10, 10);

SELECT BAR(1, 0, 10, 0.99);

SELECT BAR(1, 0, 1, 1.125);

SELECT BAR(1, 0, 1, 1.25);

SELECT BAR(1, 0, 1, 1.375);

SELECT BAR(1, 0, 1, 1.5);

SELECT BAR(1, 0, 1, 1.625);

SELECT BAR(1, 0, 1, 1.75);

SELECT BAR(1, 0, 1, 1.875);

SELECT BAR(1, 0, 1, 2);

SELECT BAR(1, 0, 1, width) FROM (VALUES (1), (1.125), (1.25), (1.375), (1.5), (1.625), (1.75), (1.875), (2)) AS _(width);

PRAGMA enable_verification;

SELECT BIT_LENGTH(NULL), BIT_LENGTH(''), BIT_LENGTH('$'), BIT_LENGTH('¢'), BIT_LENGTH('€'), BIT_LENGTH('𐍈');

CREATE TABLE strings (a TEXT, b TEXT);

INSERT INTO strings VALUES ('', 'Zero'), ('$', NULL), ('¢', 'Two'), ('€', NULL), ('𐍈', 'Four');

SELECT BIT_LENGTH(a) FROM strings;

SELECT BIT_LENGTH(b) FROM strings;

SELECT BIT_LENGTH(a) FROM strings WHERE NOT b IS NULL;

SELECT BIT_LENGTH();

SELECT BIT_LENGTH(1, 2);

PRAGMA enable_verification;

SELECT UPPER('áaaá'), UPPER('ö'), LOWER('S̈'), UPPER('ω');

SELECT UPPER('Αα Ββ Γγ Δδ Εε Ζζ  Ηη Θθ Ιι Κκ Λλ Μμ Νν Ξξ Οο Ππ Ρρ Σσς Ττ Υυ Φφ Χχ Ψψ Ωω'), LOWER('Αα Ββ Γγ Δδ Εε Ζζ  Ηη Θθ Ιι Κκ Λλ Μμ Νν Ξξ Οο Ππ Ρρ Σσς Ττ Υυ Φφ Χχ Ψψ Ωω');

SELECT UPPER(''), UPPER('hello'), UPPER('MotörHead'), UPPER(NULL);

SELECT LOWER(''), LOWER('hello'), LOWER('MotörHead'), LOWER(NULL);

SELECT UPPER(''), UPPER('hello'), UPPER('MotörHead'), UPPER(NULL);

SELECT LOWER(''), LOWER('hello'), LOWER('MotörHead'), LOWER(NULL);

CREATE TABLE strings (a TEXT, b TEXT);

INSERT INTO strings VALUES ('Hello', 'World'), ('HuLlD', NULL), ('MotörHead', 'RÄcks');

SELECT UPPER(a), UPPER(a) FROM strings;

SELECT LOWER(a), LOWER(a) FROM strings;

SELECT LOWER(b), LOWER(b) FROM strings;

SELECT UPPER(a), LOWER(a), UPPER(a), LOWER(a) FROM strings WHERE NOT b IS NULL;

PRAGMA enable_verification;

SELECT LENGTH_GRAPHEME('S̈a');

SELECT LENGTH_GRAPHEME('🤦🏼‍♂️');

SELECT LENGTH_GRAPHEME('🤦🏼‍♂️ L🤦🏼‍♂️R 🤦🏼‍♂️');

SELECT LENGTH('S̈a');

SELECT LENGTH('🤦🏼‍♂️');

SELECT LENGTH('🤦🏼‍♂️ L🤦🏼‍♂️R 🤦🏼‍♂️');

SELECT STRLEN('🤦🏼‍♂️');

SELECT STRLEN('S̈a');

SELECT REVERSE('S̈a︍');

SELECT REVERSE('Z͑ͫ̓ͪ̂ͫ̽͏̴̙̤̞͉͚̯̞̠͍A̴̵̜̰͔ͫ͗͢');

SELECT REVERSE('🤦🏼‍♂️');

SELECT REVERSE('🤦🏼‍♂️ L🤦🏼‍♂️R 🤦🏼‍♂️');

SELECT REVERSE('MotörHead');

SELECT SUBSTRING_GRAPHEME('🤦🏼‍♂️🤦🏼‍♂️🤦🏼‍♂️', 1, 1);

SELECT SUBSTRING_GRAPHEME('S̈a︍', 2, 1);

SELECT SUBSTRING_GRAPHEME('test: 🤦🏼‍♂️hello🤦🏼‍♂️ world', 7, 7);

SELECT SUBSTRING_GRAPHEME('S̈a', 1, 1);

SELECT SUBSTRING_GRAPHEME('S̈a︍', -1, 1);

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

CREATE TABLE strings (s TEXT);

INSERT INTO strings VALUES ('hello'), ('world'), (NULL);

SELECT s || ' ' || s FROM strings ORDER BY s;

SELECT s || ' ' || '🦆' FROM strings ORDER BY s;

SELECT s || ' ' || '🦆' FROM strings ORDER BY s;

SELECT s || ' ' || '🦆' || NULL FROM strings ORDER BY s;

SELECT s || ' ' || '🦆' || NULL FROM strings ORDER BY s;

SELECT CONCAT('hello');

SELECT CONCAT('hello', 33, 22);

SELECT CONCAT('hello', 33, NULL, 22, NULL);

SELECT CONCAT('hello', ' ', s) FROM strings ORDER BY s;

PRAGMA enable_verification;

SET default_null_order = 'nulls_first';

SELECT [1] || [2];

SELECT [1] || NULL;

SELECT LIST_CONCAT([1], NULL);

SELECT CONCAT('hello');

SELECT [1] || [2];

SELECT [1] || [NULL];

SELECT LIST_CONCAT([1], [NULL]);

SELECT [1] || CAST(NULL AS INT[]);

SELECT CONCAT([1], 'hello');

SELECT LIST_CONCAT([1, 2], ['3', '4']);

SELECT LIST_CONCAT([1, 2], 4);

SELECT 'hi' || NULL;

SELECT LIST_CONCAT([1], [2], [3]);

SELECT [1] || [2] || [3];

PRAGMA enable_verification;

CREATE TABLE strings (a TEXT, b TEXT);

INSERT INTO strings VALUES ('Hello', 'World'), ('HuLlD', NULL), ('MotörHead', 'RÄcks');

SELECT CONCAT(a, 'SUFFIX') FROM strings;

SELECT CONCAT('PREFIX', b) FROM strings;

SELECT CONCAT(a, b) FROM strings;

SELECT CONCAT(a, b, 'SUFFIX') FROM strings;

SELECT CONCAT(a, b, a) FROM strings;

SELECT CONCAT('1', '2', '3', '4', '5', '6', '7', '8', '9', '0');

SELECT '1234567890' || '1234567890', '1234567890' || NULL;

SELECT CONCAT('1234567890', '1234567890'), CONCAT('1234567890', NULL);

PRAGMA enable_verification;

CREATE TABLE strings (a TEXT, b TEXT);

INSERT INTO strings VALUES ('Hello', 'World'), ('HuLlD', NULL), ('MotörHead', 'RÄcks');

SELECT CONCAT_WS(',', a, 'SUFFIX') FROM strings;

SELECT CONCAT_WS('@', 'PREFIX', b) FROM strings;

SELECT CONCAT_WS('$', a, b) FROM strings;

SELECT CONCAT_WS(a, b, 'SUFFIX') FROM strings;

SELECT CONCAT_WS(a, b, b) FROM strings;

SELECT CONCAT_WS('@', '1', '2', '3', '4', '5', '6', '7', '8', '9');

SELECT CONCAT_WS(b, '[', ']') FROM strings ORDER BY a;

SELECT CONCAT_WS(',', a, 'SUFFIX') FROM strings WHERE a <> 'Hello';

SELECT CONCAT_WS(',', a, 'SUFFIX') FROM strings WHERE a <> 'Hello';

SELECT CONCAT_WS(',');

SELECT CONCAT_WS(',', 'hello');

SELECT CONCAT_WS(NULL, 'hello');

SELECT CONCAT_WS(',', NULL);

SELECT CONCAT_WS(NULL, b, 'SUFFIX') FROM strings;

SELECT CONCAT_WS(',', NULL, 'SUFFIX') FROM strings;

SELECT CONCAT_WS(',', '', '');

SELECT CONCAT_WS(',', '', '', '');

SELECT CONCAT_WS(',', NULL, NULL);

SELECT CONCAT_WS(',', NULL, NULL, NULL);

SELECT CONCAT_WS(',', NULL, NULL, 'hello');

SELECT CONCAT_WS(a, '', NULL, '') FROM strings ORDER BY a;

SELECT CONCAT_WS(a, NULL, '', '') FROM strings ORDER BY a;

SELECT CONCAT_WS(a, NULL, b, '') FROM strings ORDER BY a;

PRAGMA enable_verification;

SELECT CONTAINS('hello world', 'h'), CONTAINS('hello world', 'he'), CONTAINS('hello world', 'hel'), CONTAINS('hello world', 'hell'), CONTAINS('hello world', 'hello'), CONTAINS('hello world', 'hello '), CONTAINS('hello world', 'hello w'), CONTAINS('hello world', 'hello wo'), CONTAINS('hello world', 'hello wor'), CONTAINS('hello world', 'hello worl');

SELECT CONTAINS('hello world', 'a'), CONTAINS('hello world', 'ha'), CONTAINS('hello world', 'hea'), CONTAINS('hello world', 'hela'), CONTAINS('hello world', 'hella'), CONTAINS('hello world', 'helloa'), CONTAINS('hello world', 'hello a'), CONTAINS('hello world', 'hello wa'), CONTAINS('hello world', 'hello woa'), CONTAINS('hello world', 'hello wora');

SELECT CONTAINS('hello', ''), CONTAINS('', ''), CONTAINS(NULL, '');

CREATE TABLE strings (s TEXT, off INT, length INT);

INSERT INTO strings VALUES ('hello', 1, 2), ('world', 2, 3), ('b', 1, 1), (NULL, 2, 2);

SELECT CONTAINS(s, 'h') FROM strings;

SELECT CONTAINS(s, 'e') FROM strings;

SELECT CONTAINS(s, 'd') FROM strings;

SELECT CONTAINS(s, 'he') FROM strings;

SELECT CONTAINS(s, 'ello') FROM strings;

SELECT CONTAINS(s, 'lo') FROM strings;

SELECT CONTAINS(s, 'he-man') FROM strings;

SELECT CONTAINS(s, 'o') FROM strings;

SELECT CONTAINS(NULL, 'o') FROM strings;

SELECT CONTAINS(s, NULL) FROM strings;

SELECT CONTAINS(NULL, NULL) FROM strings;

SELECT CONTAINS(s, '') FROM strings;

PRAGMA enable_verification;

CREATE TABLE strings (s TEXT);

INSERT INTO strings VALUES ('átomo');

INSERT INTO strings VALUES ('olá mundo');

INSERT INTO strings VALUES ('你好世界');

INSERT INTO strings VALUES ('two ñ three ₡ four 🦆 end');

SELECT CONTAINS(s, 'á') FROM strings;

SELECT CONTAINS(s, 'olá mundo') FROM strings;

SELECT CONTAINS(s, '你好世界') FROM strings;

SELECT CONTAINS(s, 'two ñ thr') FROM strings;

SELECT CONTAINS(s, 'ñ') FROM strings;

SELECT CONTAINS(s, '₡ four 🦆 e') FROM strings;

SELECT CONTAINS(s, '🦆 end') FROM strings;

PRAGMA enable_verification;

SELECT DAMERAU_LEVENSHTEIN('out', 'out');

SELECT DAMERAU_LEVENSHTEIN('three', 'there');

SELECT DAMERAU_LEVENSHTEIN('potion', 'option');

SELECT DAMERAU_LEVENSHTEIN('letter', 'lettre');

SELECT DAMERAU_LEVENSHTEIN('three', 'there');

SELECT DAMERAU_LEVENSHTEIN('out', 'to');

SELECT DAMERAU_LEVENSHTEIN('to', 'out');

SELECT DAMERAU_LEVENSHTEIN('laos', 'also');

SELECT DAMERAU_LEVENSHTEIN('tomato', 'otamot');

SELECT DAMERAU_LEVENSHTEIN('abcdefg', 'bacedgf');

SELECT DAMERAU_LEVENSHTEIN('abcdefg', 'bacedgf');

SELECT DAMERAU_LEVENSHTEIN('abcdefghi', 'bzacdefig');

SELECT DAMERAU_LEVENSHTEIN('bzacdefig', 'abcdefghi');

SELECT DAMERAU_LEVENSHTEIN('at', 'tarokk');

SELECT DAMERAU_LEVENSHTEIN('tarokk', 'at');

SELECT DAMERAU_LEVENSHTEIN('organ', 'no');

SELECT DAMERAU_LEVENSHTEIN('trips', 'strip');

SELECT DAMERAU_LEVENSHTEIN('cat', 'cats');

SELECT DAMERAU_LEVENSHTEIN('rat', 'brat');

SELECT DAMERAU_LEVENSHTEIN('amanaplanacanalpanama', 'm23aanaplancaanaalnama');

SELECT DAMERAU_LEVENSHTEIN('', 'great');

SELECT DAMERAU_LEVENSHTEIN('great', '');

SELECT DAMERAU_LEVENSHTEIN('', '');

SELECT DAMERAU_LEVENSHTEIN(NULL, 'drive');

SELECT DAMERAU_LEVENSHTEIN('drive', NULL);

SELECT DAMERAU_LEVENSHTEIN(NULL, NULL);

SELECT DAMERAU_LEVENSHTEIN('', NULL);

SELECT DAMERAU_LEVENSHTEIN(NULL, '');

SELECT DAMERAU_LEVENSHTEIN('one', 'two', 'three');

SELECT DAMERAU_LEVENSHTEIN('one');

SELECT DAMERAU_LEVENSHTEIN();

CREATE TABLE strings (s TEXT);

INSERT INTO strings VALUES ('here'), ('heres'), ('there'), ('three'), ('threes');

SELECT DAMERAU_LEVENSHTEIN(s, 'theres') FROM strings ORDER BY s;

SELECT DAMERAU_LEVENSHTEIN('herse', s) FROM strings ORDER BY s;

SELECT DAMERAU_LEVENSHTEIN(NULL, s) FROM strings;

SELECT DAMERAU_LEVENSHTEIN(NULL, s) FROM strings;

SELECT DAMERAU_LEVENSHTEIN('', s) FROM strings ORDER BY s;

SELECT DAMERAU_LEVENSHTEIN(s, '') FROM strings ORDER BY s;

DROP TABLE strings;

CREATE TABLE strings (s TEXT);

INSERT INTO strings VALUES (NULL);

SELECT DAMERAU_LEVENSHTEIN(s, NULL) FROM strings;

SELECT DAMERAU_LEVENSHTEIN(NULL, s) FROM strings;

SELECT DAMERAU_LEVENSHTEIN('test', s) FROM strings;

SELECT DAMERAU_LEVENSHTEIN(s, 'test') FROM strings;

SELECT DAMERAU_LEVENSHTEIN('null', s) FROM strings;

SELECT DAMERAU_LEVENSHTEIN('', s) FROM strings;

SELECT DAMERAU_LEVENSHTEIN(s, '') FROM strings;

DROP TABLE strings;

CREATE TABLE strings (s TEXT);

INSERT INTO strings VALUES ('');

SELECT DAMERAU_LEVENSHTEIN(NULL, s) FROM strings;

SELECT DAMERAU_LEVENSHTEIN(s, NULL) FROM strings;

SELECT DAMERAU_LEVENSHTEIN(s, '') FROM strings;

SELECT DAMERAU_LEVENSHTEIN('', s) FROM strings;

SELECT DAMERAU_LEVENSHTEIN(s, 'test') FROM strings;

SELECT DAMERAU_LEVENSHTEIN('test', s) FROM strings;

SELECT DAMERAU_LEVENSHTEIN('null', s) FROM strings;

DROP TABLE strings;

CREATE TABLE strings (s_left TEXT, s_right TEXT);

INSERT INTO strings VALUES ('identical', 'identical'), ('dientical', 'identical'), ('dinetcila', 'identical'), ('abcdefghijk', 'bacdfzzeghki'), ('abcd', 'bcda'), ('great', 'greta'), ('abcdefghijklmnopqrstuvwxyz', 'abdcpoxwz'), ('a_considerably_longer_string', 'a_ocnsiderably_longre_tsrig'), ('another-quite-long-string', 'naothre-quit-elongstrnig'), ('littlehampton', 'littlerhamptoner'), ('an_incredibly_long_string_to_compare', 'na_incerdibl_ylong_sr56ting_ot_ocmrpe'), ('smaller', 'notsmaller,longer'), ('againalongerstring', 'string'), (NULL, NULL), ('', ''), (NULL, 'test'), ('test', NULL), ('four', ''), ('', 'four'), (NULL, ''), ('', NULL);

SELECT DAMERAU_LEVENSHTEIN(s_left, s_right) FROM strings;

PRAGMA enable_verification;

SELECT FORMAT('hello'), FORMAT(NULL);

SELECT FORMAT('{}', 'hello'), FORMAT('{}: {}', 'hello', 'world');

SELECT FORMAT('{}', NULL), FORMAT(NULL, 'hello', 'world');

SELECT FORMAT('{} {}', TRUE, FALSE);

SELECT FORMAT('{}', 33), FORMAT('{} + {} = {}', 3, 5, 3 + 5);

SELECT FORMAT('{} {} = {}', CAST('1992-01-01' AS DATE), CAST('12:01:00' AS TIME), CAST('1992-01-01 12:01:00' AS TIMESTAMP));

SELECT FORMAT('{}', CAST('\x00hello' AS BLOB));

SELECT FORMAT('{}', CAST(120381902481294715712 AS INT128));

SELECT FORMAT('{}', CAST(120381902481294715712 AS UINT128));

SELECT FORMAT('{:.3f}', CAST('1.234' AS DECIMAL(18, 3)));

SELECT FORMAT('{:04d}', 33), FORMAT('{} {:02d}:{:02d}:{:02d} {}', 'time', 12, 3, 16, 'AM'), FORMAT('{:10d}', 1992);

SELECT FORMAT('{1} {1} {0} {0}', 1, 2);

SELECT FORMAT('{:x}', 123456789);

SELECT FORMAT('{:b}', 123456789);

SELECT FORMAT('{:.2}', 0.00023404094995959);

SELECT FORMAT('{:.3}', 0.0);

SELECT FORMAT('{}');

SELECT FORMAT('{} {}', 'hello');

SELECT FORMAT('{}', 'hello', 'world');

SELECT FORMAT('{:s}', 42);

SELECT FORMAT('{:d}', 'hello');

PRAGMA enable_verification;

SELECT PRINTF('%,d', 123456789);

SELECT FORMAT('{:d}', 123456789);

SELECT PRINTF('%.d', 123456789);

SELECT PRINTF('%_d', 123456789);

SELECT PRINTF('%''d', 123456789);

SELECT PRINTF('%.0d', 123456789);

SELECT FORMAT('{:,}', 123456789);

SELECT FORMAT('{:_}', 123456789);

SELECT FORMAT('{:''}', 123456789);

SELECT FORMAT('{:t }', 123456789);

SELECT FORMAT('{:t|}', 123456789);

SELECT FORMAT('{:tss}', 123456789);

SELECT FORMAT('{:,}', 123456789.123);

SELECT FORMAT('{:_}', 123456789.123);

SELECT PRINTF('%,.3f', CAST(123456.789 AS DOUBLE));

SELECT PRINTF('%,.3f', CAST(123456.789 AS DOUBLE));

SELECT FORMAT('{:t}', 123456789);

SELECT FORMAT('{0:d} {0:L}', 123456789);

SELECT FORMAT('{1}', 123456789);

SELECT FORMAT('{L}', 123456789);

SELECT PRINTF('%:', 123456789);

SELECT PRINTF('%:', 123456789.123);

SELECT PRINTF('%:', 'str');

PRAGMA enable_verification;

SELECT 'aaa' GLOB 'bbb';

SELECT 'aaa' GLOB 'aaa';

SELECT 'aaa' GLOB '*';

SELECT 'aaa' GLOB '*a';

SELECT 'aaa' GLOB '*b';

SELECT 'aaa' GLOB 'a*';

SELECT 'aaa' GLOB 'b*';

SELECT 'aaa' GLOB 'a?a';

SELECT 'aaa' GLOB 'a?';

SELECT 'aaa' GLOB '??*';

SELECT 'aaa' GLOB '????*';

SELECT 'ababac' GLOB '*abac';

SELECT '3' GLOB '[0-9]';

SELECT 'a' GLOB '[0-9]';

SELECT '012' GLOB '[0-9][0-9][0-9]';

SELECT '012' GLOB '[0-9][0-9][0-9]a';

SELECT '012a' GLOB '[0-9][0-9][0-9]';

SELECT 'b3' GLOB '[abc0-9][abc0-9]';

SELECT 'd3' GLOB '[abc0-9][abc0-9]';

SELECT 'a' GLOB '[!0-9]';

SELECT '1' GLOB '[!0-9]';

SELECT '*' GLOB '\*';

SELECT 'a' GLOB '\*';

SELECT '\' GLOB '\\';

SELECT 'a' GLOB '\\';

SELECT '3]' GLOB '[]3][]]';

SELECT '3]' GLOB '[]3][]]';

SELECT '3' GLOB '[3';

SELECT '3' GLOB '[3-';

SELECT '3' GLOB '\\';

SELECT '3' GLOB '\';

SELECT '3' GLOB '3***';

SELECT '1245' GLOB '**1***2*******4*5***';

SELECT 'aaaaaaaaaaaaaaaaaaaaaaa' GLOB '*a';

SELECT '?' GLOB '[?]';

SELECT '3' GLOB '[?]';

SELECT '*' GLOB '[*]';

SELECT '3' GLOB '[*]';

SELECT '6' GLOB '[1-35-7]';

SELECT '4' GLOB '[1-35-7]';

SELECT '4' GLOB '[';

CREATE TABLE strings (s TEXT, pat TEXT);

INSERT INTO strings VALUES ('abab', 'ab*'), ('aaa', 'a?a'), ('aaa', '*b*');

SELECT s FROM strings WHERE s GLOB 'ab*';

SELECT s FROM strings WHERE 'aba' GLOB pat;

SELECT s FROM strings WHERE s GLOB pat;

PRAGMA enable_verification;

SELECT 'aaa' ILIKE 'bbb';

SELECT 'aaa' ILIKE 'aAa';

SELECT 'aaa' ILIKE '%';

SELECT 'aaa' ILIKE '%A';

SELECT 'aaa' ILIKE '%b';

SELECT 'aaa' ILIKE 'A%';

SELECT 'aaa' ILIKE 'b%';

SELECT 'aaa' ILIKE 'A_a';

SELECT 'aaa' ILIKE 'a_';

SELECT 'aaa' ILIKE '__%';

SELECT 'aaa' ILIKE '____%';

SELECT 'ababac' ILIKE '%abac';

SELECT 'ababac' ILIKE '%%%aBac';

SELECT 'ababac' ILIKE 'abab%%%%%';

SELECT 'ababac' ILIKE '%%%a%%%b%%a%b%%%%%a%c%%';

SELECT 'ababac' ILIKE '%%%a%%%b%%a%b%%%%%a%d%%';

SELECT NOT 'ababac' ILIKE '%Abac';

CREATE TABLE strings (s TEXT, pat TEXT);

INSERT INTO strings VALUES ('abab', 'Ab%'), ('aaa', 'A_a'), ('aaa', '%b%');

SELECT s FROM strings WHERE s LIKE 'ab%';

SELECT s FROM strings WHERE 'aba' ILIKE pat;

SELECT s FROM strings WHERE NOT 'aba' ILIKE pat;

SELECT s FROM strings WHERE s ILIKE pat;

SELECT s FROM strings WHERE NOT s ILIKE pat;

SELECT 'MÜHLEISEN' ILIKE 'mühleisen';

CREATE TABLE unicode_strings (s TEXT, pat TEXT);

INSERT INTO unicode_strings VALUES ('öäb', 'Ö%B'), ('aaÄ', 'A_ä'), ('aaa', '%b%');

SELECT s FROM unicode_strings WHERE s ILIKE pat;

SELECT s FROM unicode_strings WHERE NOT s ILIKE pat;

PRAGMA enable_verification;

SELECT 'a%c' ILIKE 'a$%C' ESCAPE '$';

SELECT 'A%C' ILIKE 'a$%c' ESCAPE '$';

SELECT 'a%c' ILIKE 'a$%C' ESCAPE '/';

SELECT NULL ILIKE 'a$%C' ESCAPE '/';

SELECT 'a%c' ILIKE NULL ESCAPE '$';

SELECT 'a%c' ILIKE NULL ESCAPE '$';

CREATE TABLE tbl (str TEXT, pat TEXT);

INSERT INTO tbl VALUES ('a%c', 'a$%C');

SELECT str ILIKE pat ESCAPE '$' FROM tbl;

SELECT NOT str ILIKE pat ESCAPE '$' FROM tbl;

SELECT NULL ILIKE pat ESCAPE '$' FROM tbl;

SELECT str ILIKE NULL ESCAPE '$' FROM tbl;

SELECT str ILIKE NULL ESCAPE '$' FROM tbl;

SELECT 'a%c' ILIKE 'a$%C' ESCAPE '///';

SELECT 'a%c' ILIKE 'a$%C' ESCAPE '///';

PRAGMA enable_verification;

CREATE TABLE strings (s TEXT, off INT, length INT);

INSERT INTO strings VALUES ('hello', 1, 2), ('world', 2, 3), ('b', 1, 1), (NULL, 2, 2);

SELECT STRPOS(s, 'h') FROM strings;

SELECT STRPOS(s, 'h') FROM strings;

SELECT STRPOS(s, 'e') FROM strings;

SELECT STRPOS(s, 'd') FROM strings;

SELECT STRPOS(s, 'he') FROM strings;

SELECT STRPOS(s, 'he') FROM strings;

SELECT STRPOS(s, 'ello') FROM strings;

SELECT STRPOS(s, 'lo') FROM strings;

SELECT STRPOS(s, 'he-man') FROM strings;

SELECT STRPOS(s, 'o'), s FROM strings;

SELECT STRPOS(NULL, 'o') FROM strings;

SELECT STRPOS(s, NULL) FROM strings;

SELECT STRPOS(NULL, NULL) FROM strings;

PRAGMA enable_verification;

CREATE TABLE strings (s TEXT);

INSERT INTO strings VALUES ('átomo');

INSERT INTO strings VALUES ('olá mundo');

INSERT INTO strings VALUES ('你好世界');

INSERT INTO strings VALUES ('two ñ three ₡ four 🦆 end');

SELECT STRPOS(s, 'á') FROM strings;

SELECT STRPOS(s, 'á') FROM strings;

SELECT STRPOS(s, 'olá mundo') FROM strings;

SELECT STRPOS(s, '你好世界') FROM strings;

SELECT STRPOS(s, 'two ñ thr') FROM strings;

SELECT STRPOS(s, 'ñ') FROM strings;

SELECT STRPOS(s, '₡ four 🦆 e') FROM strings;

SELECT STRPOS(s, '🦆 end') FROM strings;

PRAGMA enable_verification;

CREATE TABLE t (str TEXT);

INSERT INTO t VALUES ('hello1'), ('hello2'), ('hello3'), ('world1'), ('world2'), ('world3');

SELECT COUNT(*) FROM t WHERE str LIKE '%o%';
/* 6 */;

SELECT COUNT(*) FROM t WHERE str LIKE '%rld%';
/* 3 */;

SELECT COUNT(*) FROM t WHERE str LIKE '%o%' OR (str LIKE '%o%' AND str LIKE '%rld%');

SELECT COUNT(*) FROM t WHERE (str LIKE '%o%' AND str LIKE '%rld%') OR str LIKE '%o%';

SELECT COUNT(*) FROM t WHERE (str LIKE '%o%' AND str LIKE '%rld%') OR (str LIKE '%o%') OR (str LIKE '%o%');

SELECT COUNT(*) FROM t WHERE (str LIKE '%o%' AND str LIKE '%rld%') OR (str LIKE '%o%') OR (str LIKE '%o%' AND str LIKE 'blabla%');

SELECT COUNT(*) FROM t WHERE (str LIKE '%o%' AND str LIKE '%1%') OR (str LIKE '%o%' AND str LIKE '%1%' AND str LIKE 'blabla%') OR (str LIKE '%o%' AND str LIKE '%1%' AND str LIKE 'blabla2%');

PRAGMA enable_verification;

SELECT JACCARD('hello', 'hello');

SELECT JACCARD('hello', NULL);

SELECT JACCARD(NULL, 'hello');

SELECT JACCARD(NULL, NULL);

SELECT JACCARD('ab', 'aabb');

SELECT JACCARD('aabb', 'ab');

SELECT JACCARD('ab', 'cd');

SELECT JACCARD('cd', 'ab');

SELECT ROUND(JACCARD('ab', 'aabbcc'), 3);

SELECT ROUND(JACCARD('aabbcc', 'ab'), 3);

SELECT ROUND(JACCARD('aabbccddeeff', 'ab'), 3);

SELECT ROUND(JACCARD('ab', 'aabbccddeeff'), 3);

SELECT ROUND(JACCARD('aabbccddeeffg', 'ab'), 3);

SELECT ROUND(JACCARD('ab', 'aaaabbbccddeeffgabcccc'), 3);

SELECT ROUND(JACCARD('ababababababba', 'aaaabbbccddeeffgabcccc'), 3);

SELECT JACCARD('hello', '');

SELECT JACCARD('', 'hello');

SELECT JACCARD('', '');

CREATE TABLE strings (s TEXT, t TEXT);

INSERT INTO strings VALUES ('hello', 'hallo'), ('aloha', 'fello'), ('fellow', 'ducks'), (NULL, NULL);

SELECT ROUND(JACCARD(s, t), 1) FROM strings;

SELECT ROUND(JACCARD(s, 'hallo'), 1) FROM strings;

SELECT ROUND(JACCARD('hallo', t), 1) FROM strings;

SELECT ROUND(JACCARD(NULL, t), 1) FROM strings;

SELECT ROUND(JACCARD(s, NULL), 1) FROM strings;

SELECT ROUND(JACCARD('', t), 1) FROM strings;

SELECT ROUND(JACCARD(s, ''), 1) FROM strings;

PRAGMA enable_verification;

SELECT JARO_WINKLER_SIMILARITY('CRATE', 'TRACE');

SELECT JARO_WINKLER_SIMILARITY('DwAyNE', 'DuANE');

SELECT JARO_WINKLER_SIMILARITY('0', '0');

SELECT JARO_WINKLER_SIMILARITY('00', '00');

SELECT JARO_WINKLER_SIMILARITY('0', '00');

SELECT JARO_WINKLER_SIMILARITY('00000000000000000000000000000000000000000000000000000000000000000', '00000000000000000000000000000000000000000000000000000000000000000');

SELECT JARO_WINKLER_SIMILARITY('0000000000000000000000000000000000000000000000000000000000000000', '00000000000000000000000000000000000000000000000000000000000000000');

SELECT JARO_WINKLER_SIMILARITY('000000000000000000000000000000000000000000000000000000000000000', '00000000000000000000000000000000000000000000000000000000000000000');

SELECT JARO_WINKLER_SIMILARITY('10000000000000000000000000000000000000000000000000000000000000020', '00000000000000000000000000000000000000000000000000000000000000000');

SELECT JARO_WINKLER_SIMILARITY('0000000000000000000000000000000000000000000000000000000000000000000000000000001', '00000000000000100000000000000000000000010000000000000000000000000');

SELECT JARO_WINKLER_SIMILARITY('01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', '00000000000000000000000000000000000000000000000000000000000000000');

SELECT JARO_WINKLER_SIMILARITY(NULL, NULL);

SELECT JARO_WINKLER_SIMILARITY('foo', NULL);

SELECT JARO_WINKLER_SIMILARITY(NULL, 'foo');

SELECT JARO_WINKLER_SIMILARITY('', '');

SELECT JARO_WINKLER_SIMILARITY('foo', 'foo');

SELECT JARO_WINKLER_SIMILARITY('foo', 'foo ');

SELECT JARO_WINKLER_SIMILARITY('foo', 'foo  ');

SELECT JARO_WINKLER_SIMILARITY('foo', ' foo ');

SELECT JARO_WINKLER_SIMILARITY('foo', '  foo');

SELECT JARO_WINKLER_SIMILARITY('', 'a');

SELECT JARO_WINKLER_SIMILARITY('aaapppp', '');

SELECT JARO_WINKLER_SIMILARITY('frog', 'fog');

SELECT JARO_WINKLER_SIMILARITY('fly', 'ant');

SELECT JARO_WINKLER_SIMILARITY('elephant', 'hippo');

SELECT JARO_WINKLER_SIMILARITY('hippo', 'elephant');

SELECT JARO_WINKLER_SIMILARITY('hippo', 'zzzzzzzz');

SELECT JARO_WINKLER_SIMILARITY('hello', 'hallo');

SELECT JARO_WINKLER_SIMILARITY('ABC Corporation', 'ABC Corp');

SELECT JARO_WINKLER_SIMILARITY('D N H Enterprises Inc', 'D &amp; H Enterprises, Inc.');

SELECT JARO_WINKLER_SIMILARITY('My Gym Children''s Fitness Center', 'My Gym. Childrens Fitness');

SELECT JARO_WINKLER_SIMILARITY('PENNSYLVANIA', 'PENNCISYLVNIA');

SELECT JARO_WINKLER_SIMILARITY('CRATE', 'TRACE', 0.6);

SELECT JARO_WINKLER_SIMILARITY('CRATE', 'TRACE', 0.8);

SELECT JARO_WINKLER_SIMILARITY('000000000000000000000000000000000000000000000000000000000000000', '00000000000000000000000000000000000000000000000000000000000000000', 0.9);

SELECT JARO_WINKLER_SIMILARITY('000000000000000000000000000000000000000000000000000000000000000', '00000000000000000000000000000000000000000000000000000000000000000', 0.995);

SELECT JARO_WINKLER_SIMILARITY('000000000000000000000000000000000000000000000000000000000000000', '00000000000000000000000000000000000000000000000000000000000000000', 0.995);

SELECT AVG(JARO_WINKLER_SIMILARITY('00000000', s)) FROM test;

SELECT AVG(JARO_WINKLER_SIMILARITY(s, '00000000')) FROM test;

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

CREATE TABLE strings (s TEXT);

INSERT INTO strings VALUES ('hello'), ('world'), (NULL);

SELECT LENGTH(s) FROM strings ORDER BY s;

SELECT LENGTH(s || ' ' || '🦆') FROM strings ORDER BY s;

SELECT LENGTH('asdf'), LENGTH('asdf');

PRAGMA enable_verification;

SELECT LEVENSHTEIN('hallo', 'hallo');

SELECT LEVENSHTEIN('hallo', 'hello');

SELECT LEVENSHTEIN('hello', 'hallo');

SELECT LEVENSHTEIN('lawn', 'flaw');

SELECT LEVENSHTEIN('flaw', 'lawn');

SELECT LEVENSHTEIN('kitten', 'sitting');

SELECT LEVENSHTEIN('sitting', 'kitten');

SELECT LEVENSHTEIN('hallo', 'hoi');

SELECT LEVENSHTEIN('hoi', 'hallo');

SELECT LEVENSHTEIN(NULL, 'hi');

SELECT LEVENSHTEIN('hi', NULL);

SELECT LEVENSHTEIN(NULL, NULL);

SELECT LEVENSHTEIN('', NULL);

SELECT LEVENSHTEIN(NULL, '');

SELECT LEVENSHTEIN('', 'hi');

SELECT LEVENSHTEIN('hi', '');

SELECT LEVENSHTEIN('', '');

CREATE TABLE strings (s TEXT);

INSERT INTO strings VALUES ('hello'), ('hallo'), ('aloha'), ('fello'), ('fellow'), ('ducks');

SELECT LEVENSHTEIN(s, 'hallo') FROM strings ORDER BY s;

SELECT LEVENSHTEIN('hallo', s) FROM strings ORDER BY s;

SELECT LEVENSHTEIN(NULL, s) FROM strings;

SELECT LEVENSHTEIN(NULL, s) FROM strings;

SELECT LEVENSHTEIN('', s) FROM strings ORDER BY s;

SELECT LEVENSHTEIN(s, '') FROM strings ORDER BY s;

DROP TABLE strings;

CREATE TABLE strings (s TEXT);

INSERT INTO strings VALUES (NULL);

SELECT LEVENSHTEIN(s, NULL) FROM strings;

SELECT LEVENSHTEIN(NULL, s) FROM strings;

SELECT LEVENSHTEIN('hi', s) FROM strings;

SELECT LEVENSHTEIN(s, 'hi') FROM strings;

SELECT LEVENSHTEIN('', s) FROM strings;

SELECT LEVENSHTEIN(s, '') FROM strings;

DROP TABLE strings;

CREATE TABLE strings (s TEXT);

INSERT INTO strings VALUES ('');

SELECT LEVENSHTEIN(NULL, s) FROM strings;

SELECT LEVENSHTEIN(s, NULL) FROM strings;

SELECT LEVENSHTEIN(s, '') FROM strings;

SELECT LEVENSHTEIN('', s) FROM strings;

SELECT LEVENSHTEIN(s, 'hi') FROM strings;

SELECT LEVENSHTEIN('hi', s) FROM strings;

SELECT LEVENSHTEIN('hallo', 'hello');

SELECT LEVENSHTEIN(s, 'hello') FROM strings;

DROP TABLE strings;

CREATE TABLE strings (s TEXT, t TEXT);

INSERT INTO strings VALUES ('hello', 'hello'), ('hello', 'hallo'), ('flaw', 'lawn'), ('sitting', 'kitten'), ('hallo', 'aloha'), ('hello', 'aloha'), (NULL, NULL), ('', ''), (NULL, 'bora'), ('bora', NULL), ('hi', ''), ('', 'hi'), (NULL, ''), ('', NULL);

SELECT LEVENSHTEIN(s, t) AS ld FROM strings;

PRAGMA enable_verification;

SELECT 'aaa' LIKE 'bbb';

SELECT 'aaa' LIKE 'abab';

SELECT 'aaa' LIKE 'aaa';

SELECT 'aaa' LIKE '%';

SELECT 'aaa' LIKE '%a';

SELECT 'aaa' LIKE '%b';

SELECT 'aaa' LIKE 'a%';

SELECT 'aaa' LIKE 'b%';

SELECT 'aaa' LIKE 'a_a';

SELECT 'aaa' LIKE 'a_';

SELECT 'aaa' LIKE '__%';

SELECT 'aaa' LIKE '____%';

SELECT 'ababac' LIKE '%abac';

SELECT 'ababac' LIKE '%%%abac';

SELECT 'ababac' LIKE 'abab%%%%%';

SELECT 'ababac' LIKE '%%%a%%%b%%a%b%%%%%a%c%%';

SELECT 'ababac' LIKE '%%%a%%%b%%a%b%%%%%a%d%%';

SELECT NOT 'ababac' LIKE '%abac';

SELECT 'aabbccc' LIKE '%aa%bb%cc';

SELECT 'zebra elephant tiger horse' LIKE '';

SELECT 'zebra elephant tiger horse' LIKE '%';

SELECT 'zebra elephant tiger horse' LIKE 'zebra';

SELECT 'zebra elephant tiger horse' LIKE 'zebra elephant tiger horse';

SELECT 'zebra elephant tiger horse' LIKE 'zebra elephant tiger horse%';

SELECT 'zebra elephant tiger horse' LIKE '%zebra elephant tiger horse%';

SELECT 'zebra elephant tiger horse' LIKE '%zebra elephant tiger horse blabla';

SELECT 'zebra elephant tiger horse' LIKE 'zebra elephant tiger horse blabla%';

SELECT 'zebra elephant tiger horse' LIKE 'zebra%';

SELECT 'zebra elephant tiger horse' LIKE '%horse';

SELECT 'zebra elephant tiger horse' LIKE 'zebra%elephant%horse';

SELECT 'zebra elephant tiger horse' LIKE 'zebra%elephant%tiger%horse';

SELECT 'zebra elephant tiger horse' LIKE '%zebra%elephant%tiger%horse';

SELECT 'zebra elephant tiger horse' LIKE 'zebra%elephant%tiger%horse%';

SELECT 'zebra elephant tiger horse' LIKE '%zebra%elephant%tiger%horse%';

SELECT 'zebra elephant tiger horse' LIKE '%%zebra %%%ele%phan%t t%ig%er% horse%';

SELECT 'zebra elephant tiger horse' LIKE 'zebra%tiger%horse';

SELECT 'zebra elephant tiger horse' LIKE 'zebra%tiger%elephant%horse';

SELECT NOT 'zebra elephant tiger horse' LIKE '';

SELECT NOT 'zebra elephant tiger horse' LIKE '%';

SELECT NOT 'zebra elephant tiger horse' LIKE 'zebra';

SELECT NOT 'zebra elephant tiger horse' LIKE 'zebra elephant tiger horse';

SELECT NOT 'zebra elephant tiger horse' LIKE 'zebra%';

SELECT NOT 'zebra elephant tiger horse' LIKE '%horse';

SELECT NOT 'zebra elephant tiger horse' LIKE 'zebra%elephant%horse';

SELECT NOT 'zebra elephant tiger horse' LIKE 'zebra%elephant%tiger%horse';

SELECT NOT 'zebra elephant tiger horse' LIKE '%zebra%elephant%tiger%horse';

SELECT NOT 'zebra elephant tiger horse' LIKE 'zebra%elephant%tiger%horse%';

SELECT NOT 'zebra elephant tiger horse' LIKE '%zebra%elephant%tiger%horse%';

SELECT NOT 'zebra elephant tiger horse' LIKE '%%zebra %%%ele%phan%t t%ig%er% horse%';

SELECT NOT 'zebra elephant tiger horse' LIKE 'zebra%tiger%horse';

SELECT NOT 'zebra elephant tiger horse' LIKE 'zebra%tiger%elephant%horse';

CREATE TABLE strings (s TEXT, pat TEXT);

INSERT INTO strings VALUES ('abab', 'ab%'), ('aaa', 'a_a'), ('aaa', '%b%');

SELECT s FROM strings WHERE s LIKE 'ab%';

SELECT s FROM strings WHERE 'aba' LIKE pat;

SELECT s FROM strings WHERE s LIKE pat;

SELECT 'hello' LIKE 'hê?llo' COLLATE idontexist;

SELECT '%++' LIKE '*%++' ESCAPE '*';

SELECT NOT '%++' LIKE '*%++' ESCAPE '*';

SELECT '%' LIKE '%' ESCAPE '%';

SELECT '%' LIKE '*' ESCAPE '*';

SELECT '\' LIKE '\\' ESCAPE '\';

SELECT '\\' LIKE '\\' ESCAPE '\';

SELECT '%' LIKE '*%' ESCAPE '*';

SELECT '_ ' LIKE '*_ ' ESCAPE '*';

SELECT ' a ' LIKE '*_ ' ESCAPE '*';

SELECT '%_' LIKE '%_' ESCAPE '';

SELECT NOT '*%' LIKE '*%' ESCAPE '*';

SELECT '%_' LIKE '%_' ESCAPE '\\';

SELECT '%_' LIKE '%_' ESCAPE '**';

CREATE TABLE strings (s TEXT, pat TEXT);

INSERT INTO strings VALUES ('abab', 'ab%'), ('aaa', 'a*_a'), ('aaa', '*%b'), ('bbb', 'a%');

SELECT s FROM strings;

SELECT pat FROM strings;

SELECT s FROM strings WHERE pat LIKE 'a*%' ESCAPE '*';

SELECT s FROM strings WHERE 'aba' LIKE pat ESCAPE '*';

SELECT s FROM strings WHERE s LIKE pat ESCAPE '*';

SELECT s FROM strings WHERE s LIKE pat ESCAPE '*';

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

SELECT MISMATCHES('hallo', 'hallo');

SELECT MISMATCHES('hello', 'hallo');

SELECT MISMATCHES('hallo', 'hello');

SELECT MISMATCHES('aloha', 'hallo');

SELECT MISMATCHES('hallo', 'aloha');

SELECT MISMATCHES(NULL, 'hallo');

SELECT MISMATCHES('hello', NULL);

SELECT MISMATCHES(NULL, NULL);

CREATE TABLE strings (s TEXT);

INSERT INTO strings VALUES ('hello'), ('hallo'), ('aloha'), ('world'), (NULL);

SELECT MISMATCHES(s, 'hallo') FROM strings ORDER BY s;

SELECT MISMATCHES('hallo', s) FROM strings ORDER BY s;

SELECT MISMATCHES('', '');

SELECT MISMATCHES(NULL, s) FROM strings ORDER BY s;

SELECT MISMATCHES(s, NULL) FROM strings ORDER BY s;

SELECT MISMATCHES('hoi', 'hallo');

SELECT MISMATCHES('hallo', 'hoi');

SELECT MISMATCHES('', 'hallo');

SELECT MISMATCHES('hi', '');

SELECT MISMATCHES('', s) FROM strings ORDER BY s;

SELECT MISMATCHES(s, '') FROM strings ORDER BY s;

DROP TABLE strings;

CREATE TABLE strings (s TEXT);

INSERT INTO strings VALUES ('hello'), ('halo'), (NULL);

SELECT MISMATCHES(s, 'hallo') FROM strings;

SELECT MISMATCHES('hallo', s) FROM strings;

SELECT HAMMING('hallo', 'hallo');

SELECT HAMMING('hello', 'hallo');

SELECT HAMMING(s, 'hallo') FROM strings WHERE s = 'hello';

DROP TABLE strings;

CREATE TABLE strings (s TEXT, t TEXT);

INSERT INTO strings VALUES ('hello', 'world'), ('hallo', 'ola'), ('hello', ''), (NULL, NULL), ('', ''), ('bora', 'bora');

SELECT s, t, HAMMING(s, t) AS hd FROM strings WHERE LENGTH(s) = LENGTH(t);

SELECT HAMMING(s, t) FROM strings;

PRAGMA enable_verification;

SELECT LPAD(NULL, 7, '-'), LPAD('Base', NULL, '-'), LPAD('Base', 7, NULL), LPAD(NULL, NULL, '-'), LPAD(NULL, 7, NULL), LPAD('Base', NULL, NULL), LPAD(NULL, NULL, NULL);

SELECT RPAD(NULL, 7, '-'), RPAD('Base', NULL, '-'), RPAD('Base', 7, NULL), RPAD(NULL, NULL, '-'), RPAD(NULL, 7, NULL), RPAD('Base', NULL, NULL), RPAD(NULL, NULL, NULL);

SELECT LPAD('Base', 7, '-'), LPAD('Base', 4, '-'), LPAD('Base', 2, ''), LPAD('Base', -1, '-');

SELECT RPAD('Base', 7, '-'), RPAD('Base', 4, '-'), RPAD('Base', 2, ''), RPAD('Base', -1, '-');

SELECT LPAD('Base', 7, '-|'), LPAD('Base', 6, '-|'), LPAD('Base', 5, '-|'), LPAD('Base', 4, '-|');

SELECT RPAD('Base', 7, '-|'), RPAD('Base', 6, '-|'), RPAD('Base', 5, '-|'), RPAD('Base', 4, '-|');

SELECT LPAD('MotörHead', 16, 'RÄcks'), LPAD('MotörHead', 12, 'RÄcks'), LPAD('MotörHead', 10, 'RÄcks');

SELECT RPAD('MotörHead', 16, 'RÄcks'), RPAD('MotörHead', 12, 'RÄcks'), RPAD('MotörHead', 10, 'RÄcks');

CREATE TABLE strings (a TEXT, b TEXT);

INSERT INTO strings VALUES ('Hello', 'World'), ('HuLlD', NULL), ('MotörHead', 'RÄcks');

SELECT LPAD(a, 16, b), RPAD(a, 16, b) FROM strings;

SELECT LPAD(a, 12, b), RPAD(a, 12, b), UPPER(a), LOWER(a) FROM strings WHERE NOT b IS NULL;

SELECT LPAD(a, 12, b), RPAD(a, 12, b), UPPER(a), LOWER(a) FROM strings WHERE NOT b IS NULL;

SELECT LPAD(a, 12, b), RPAD(a, 12, b), UPPER(a), LOWER(a) FROM strings WHERE NOT b IS NULL;

SELECT LPAD(1, 2, ' ');

SELECT LPAD('Hello', 10, '');

SELECT LPAD('a', 100000000000000000, 0);

SELECT LPAD('a', 100000000000000000, 0);

SELECT LPAD('a', 100000000000000000, 0);

SELECT RPAD(1, 2, ' ');

SELECT RPAD('Hello', 10, '');

SELECT RPAD('a', 100000000000000000, 0);

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

SELECT PREFIX('abcd', 'a');

SELECT PREFIX('abcd', 'ab');

SELECT PREFIX('abcd', 'abc');

SELECT PREFIX('abcd', 'abcd');

SELECT PREFIX('abcd', 'b');

SELECT PREFIX('abcdefgh', 'a');

SELECT PREFIX('abcdefgh', 'ab');

SELECT PREFIX('abcdefgh', 'abc');

SELECT PREFIX('abcdefgh', 'abcd');

SELECT PREFIX('abcdefgh', 'abcde');

SELECT PREFIX('abcdefgh', 'b');

SELECT PREFIX('abcdefghijklmnopqrstuvwxyz', 'a');

SELECT PREFIX('abcdefghijklmnopqrstuvwxyz', 'ab');

SELECT PREFIX('abcdefghijklmnopqrstuvwxyz', 'abc');

SELECT PREFIX('abcdefghijklmnopqrstuvwxyz', 'abcd');

SELECT PREFIX('abcdefghijklmnopqrstuvwxyz', 'abcde');

SELECT PREFIX('abcdefghijklmnopqrstuvwxyz', 'b');

SELECT PREFIX('abcdefghijklmnopqrstuvwxyz', 'abcdefghijklmnopqrstuvwx');

SELECT PREFIX('abcdefghijklmnopqrstuvwxyz', 'abcfefghijklmnopqrstuvwx');

SELECT PREFIX('', 'aaa');

SELECT PREFIX('aaa', '');

CREATE TABLE t0 (c0 TEXT);

SELECT * FROM t0 WHERE PREFIX(t0.c0, '');

SELECT PREFIX('átomo', 'á');

SELECT PREFIX('átomo', 'á');

SELECT PREFIX('átomo', 'a');

SELECT PREFIX('olá mundo', 'olá');

SELECT PREFIX('olá mundo', 'olá');

SELECT PREFIX('olá mundo', 'ola');

SELECT PREFIX('ñeft', 'ñ');

SELECT PREFIX('ñeft', 'ñ');

SELECT PREFIX('ñeft', 'ñeft');

SELECT PREFIX('ñeft', 'neft');

SELECT PREFIX('two ñ three ₡ four 🦆 end', 'two ñ');

SELECT PREFIX('two ñ three ₡ four 🦆 end', 'two ñ');

SELECT PREFIX('two ñ three ₡ four 🦆 end', 'two n');

SELECT PREFIX('two ñ three ₡ four 🦆 end', 'two ñ three');

SELECT PREFIX('two ñ three ₡ four 🦆 end', 'two ñ three ₡');

SELECT PREFIX('two ñ three ₡ four 🦆 end', 'two ñ three ₡ four 🦆');

SELECT PREFIX('two ñ three ₡ four 🦆 end', 'two ñ three ₡ four 🦆 end');

SELECT PREFIX('two ñ three ₡ four 🦆 end', 'two ñ three ₡ four 🦆 end');

INSERT INTO t0 VALUES ('a'), ('b'), ('d');

SELECT COUNT(*) FROM t0 WHERE PREFIX(t0.c0, '');

SELECT c0, PREFIX(t0.c0, '') FROM t0 WHERE c0 <> 'b' ORDER BY t0.c0;

INSERT INTO t0 VALUES (NULL);

SELECT COUNT(*) FROM t0 WHERE PREFIX(t0.c0, '');

SELECT c0, PREFIX(t0.c0, '') FROM t0 WHERE c0 IS NULL OR c0 <> 'b' ORDER BY t0.c0;

PRAGMA enable_verification;

SELECT PRINTF('hello'), PRINTF(NULL);

SELECT PRINTF('%s', 'hello'), PRINTF('%s: %s', 'hello', 'world');

SELECT PRINTF('%s', NULL), PRINTF(NULL, 'hello', 'world');

SELECT PRINTF('%d', TRUE);

SELECT PRINTF('%d', 33), PRINTF('%d + %d = %d', 3, 5, 3 + 5);

SELECT PRINTF('%04d', 33), PRINTF('%s %02d:%02d:%02d %s', 'time', 12, 3, 16, 'AM'), PRINTF('%10d', 1992);

SELECT PRINTF('%hhd %hd %d %lld', CAST(33 AS TINYINT), CAST(12 AS SMALLINT), CAST(40 AS INT), CAST(80 AS BIGINT));

SELECT PRINTF('%d %lld %hhd %hd', CAST(33 AS TINYINT), CAST(12 AS SMALLINT), CAST(40 AS INT), CAST(80 AS BIGINT));

SELECT PRINTF('%s %s = %s', CAST('1992-01-01' AS DATE), CAST('12:01:00' AS TIME), CAST('1992-01-01 12:01:00' AS TIMESTAMP));

SELECT PRINTF('%s', CAST('\x01\xa0' AS BLOB));

SELECT PRINTF('%s', CAST(120381902481294715712 AS INT128));

SELECT PRINTF('%s', CAST(120381902481294715712 AS UINT128));

SELECT PRINTF('%x', CAST(255 AS UTINYINT));

SELECT PRINTF('%x', CAST(65535 AS USMALLINT));

SELECT PRINTF('%x', CAST(4294967295 AS UINTEGER));

SELECT PRINTF('%x', CAST(18446744073709551615 AS UBIGINT));

SELECT PRINTF('%.3f', CAST('1.234' AS DECIMAL(18, 3)));

SELECT PRINTF('%d %x %o %#x %#o', 100, 100, 100, 100, 100);

SELECT PRINTF('%c', 65);

SELECT PRINTF('%*d', 5, 10);

SELECT PRINTF('%.2f', CAST(10.0 AS REAL)), PRINTF('%.4f', 0.5);

SELECT PRINTF('floats: %4.2f %+.0e %E', 3.1416, 3.1416, 3.1416);

SELECT PRINTF('%s');

SELECT PRINTF('%s %s', 'hello');

SELECT PRINTF('%s', 'hello', 'world');

SELECT PRINTF('%s', 42);

SELECT PRINTF('%d', 'hello');

CREATE TABLE strings (idx INT, fmt TEXT, pint INT, pstring TEXT);

INSERT INTO strings VALUES (1, '%d: %s', 10, 'hello');

INSERT INTO strings VALUES (2, 'blabla %d blabla %s', 20, 'blabla');

INSERT INTO strings VALUES (3, NULL, 30, 'abcde');

SELECT PRINTF(fmt) FROM strings ORDER BY idx;

SELECT PRINTF(CASE WHEN pint < 15 THEN NULL ELSE CAST(pint AS TEXT) END) FROM strings ORDER BY idx;

SELECT PRINTF(fmt, pint, pstring) FROM strings ORDER BY idx;

SELECT PRINTF(fmt, 10, pstring) FROM strings ORDER BY idx;

SELECT PRINTF('%s: %s', pstring, pstring) FROM strings ORDER BY idx;

SELECT PRINTF('%s: %s', pstring, pstring) FROM strings WHERE idx <> 2 ORDER BY idx;

SELECT PRINTF('%d %d %d %d', CAST(100 AS TINYINT), CAST(1000 AS SMALLINT), CAST(1000 AS INT), CAST(1000 AS BIGINT));

PRAGMA enable_verification;

SELECT REPEAT(NULL, NULL), REPEAT(NULL, 3), REPEAT('MySQL', NULL);

SELECT REPEAT('', 3), REPEAT('MySQL', 3), REPEAT('MotörHead', 2), REPEAT('Hello', -1);

CREATE TABLE strings (a TEXT, b TEXT);

INSERT INTO strings VALUES ('Hello', 'World'), ('HuLlD', NULL), ('MotörHead', 'RÄcks'), ('', NULL);

SELECT REPEAT(a, 3) FROM strings;

SELECT REPEAT(b, 2) FROM strings;

SELECT REPEAT(a, 4) FROM strings WHERE NOT b IS NULL;

SELECT REPEAT('', 99);

SELECT REPEAT('hello world', 0);

SELECT REPEAT('hello world', -1);

SELECT REPEAT(CAST('00' AS BLOB), 2);

SELECT REPEAT(CAST('00' AS BLOB), 2);

SELECT REPEAT(CAST('00' AS BLOB), 2);

SELECT REPEAT('hello', 'world');

SELECT REPEAT('hello', 'world');

PRAGMA enable_verification;

SELECT REPLACE('This is the main test string', NULL, 'ALT');

SELECT REPLACE(NULL, 'main', 'ALT');

SELECT REPLACE('This is the main test string', 'main', NULL);

SELECT REPLACE('This is the main test string', 'main', 'ALT');

SELECT REPLACE('This is the main test string', 'main', 'larger-main');

SELECT REPLACE('aaaaaaa', 'a', '0123456789');

CREATE TABLE strings (a TEXT, b TEXT);

INSERT INTO strings VALUES ('Hello', 'World'), ('HuLlD', NULL), ('MotörHead', 'RÄcks'), ('', NULL);

SELECT REPLACE(a, 'l', '-') FROM strings;

SELECT REPLACE(b, 'Ä', '--') FROM strings;

SELECT REPLACE(a, 'H', '') FROM strings WHERE NOT b IS NULL;

SELECT REPLACE(1);

SELECT REPLACE(1, 2);

SELECT REPLACE(1, 2, 3, 4);

PRAGMA enable_verification;

SELECT REVERSE(''), REVERSE('Hello'), REVERSE('MotörHead'), REVERSE(NULL);

CREATE TABLE strings (a TEXT, b TEXT);

INSERT INTO strings VALUES ('Hello', 'World'), ('HuLlD', NULL), ('MotörHead', 'RÄcks'), ('', NULL);

SELECT REVERSE(a) FROM strings;

SELECT REVERSE(b) FROM strings;

SELECT REVERSE(a) FROM strings WHERE NOT b IS NULL;

SELECT REVERSE();

SELECT REVERSE(1, 2);

SELECT REVERSE('hello', 'world');

SELECT 'aaa' SIMILAR TO 'bbb';

SELECT 'aaa' SIMILAR TO 'aaa';

SELECT 'aaa' SIMILAR TO '.*';

SELECT 'aaa' SIMILAR TO 'a.*';

SELECT 'aaa' SIMILAR TO '.*a';

SELECT 'aaa' SIMILAR TO '.*b';

SELECT 'aaa' SIMILAR TO 'b.*';

SELECT 'aaa' SIMILAR TO 'a[a-z]a';

SELECT 'aaa' SIMILAR TO 'a[a-z]{2}';

SELECT 'aaa' SIMILAR TO 'a[a-z].*';

SELECT 'aaa' SIMILAR TO '[a-z][a-z].*';

SELECT 'aaa' SIMILAR TO '[a-z]{3}';

SELECT NOT 'aaa' SIMILAR TO '[b-z]{3}';

SELECT REGEXP_MATCHES('aaa', 'aaa');

SELECT REGEXP_MATCHES('aaa', 'aaa');

SELECT REGEXP_MATCHES('aaa', '^a');

SELECT REGEXP_MATCHES('aaa', '^a+');

SELECT REGEXP_MATCHES('aaa', '(a|b)*');

SELECT REGEXP_MATCHES('abc', '^(b|c)');

CREATE TABLE strings (s TEXT, p TEXT);

INSERT INTO strings VALUES ('aaa', 'a[a-z]a'), ('abab', 'ab.*'), ('aaa', 'a[a-z]a'), ('aaa', '.*b.*');

SELECT s FROM strings WHERE s SIMILAR TO 'ab.*';

SELECT s FROM strings WHERE 'aba' SIMILAR TO p;

SELECT s FROM strings WHERE s SIMILAR TO p;

SELECT s FROM strings WHERE NOT s SIMILAR TO p;

SELECT s FROM strings WHERE NOT s SIMILAR TO p;

PRAGMA enable_verification;

SELECT SPLIT_PART('a,b,c', ',', 1);

SELECT SPLIT_PART('a,b,c', ',', 2);

SELECT SPLIT_PART('a,,b,,c', ',,', 2);

SELECT SPLIT_PART('a,b,c', '|', 1);

SELECT SPLIT_PART('a,b,c', ',', -1);

SELECT SPLIT_PART('a,b,c', ',', -2);

SELECT SPLIT_PART('a,b,c', ',', 0);

SELECT SPLIT_PART('a,b,c', ',', 5);

SELECT SPLIT_PART('a,b,c', ',', -5);

SELECT SPLIT_PART('', '', 1);

SELECT SPLIT_PART('a,b,c', '', 3);

SELECT SPLIT_PART('', ',', 1);

SELECT SPLIT_PART(NULL, NULL, 1);

SELECT SPLIT_PART('a,b,c', NULL, 1);

SELECT SPLIT_PART(NULL, ',', 1);

SELECT SPLIT_PART('a,b,c', ',', NULL);

SELECT SPLIT_PART('a,b,c', ',', NULL);

SELECT SPLIT_PART('a,b,c', ',', NULL);

SELECT SPLIT_PART('a,b,c', ',', NULL);

PRAGMA enable_verification;

SELECT STARTS_WITH('hello world', 'h'), STARTS_WITH('hello world', 'he'), STARTS_WITH('hello world', 'hel'), STARTS_WITH('hello world', 'hell'), STARTS_WITH('hello world', 'hello'), STARTS_WITH('hello world', 'hello '), STARTS_WITH('hello world', 'hello w'), STARTS_WITH('hello world', 'hello wo'), STARTS_WITH('hello world', 'hello wor'), STARTS_WITH('hello world', 'hello worl');

SELECT STARTS_WITH('hello world', 'a'), STARTS_WITH('hello world', 'ha'), STARTS_WITH('hello world', 'hea'), STARTS_WITH('hello world', 'hela'), STARTS_WITH('hello world', 'hella'), STARTS_WITH('hello world', 'helloa'), STARTS_WITH('hello world', 'hello a'), STARTS_WITH('hello world', 'hello wa'), STARTS_WITH('hello world', 'hello woa'), STARTS_WITH('hello world', 'hello wora');

SELECT STARTS_WITH('hello', ''), STARTS_WITH('', ''), STARTS_WITH(NULL, '');

CREATE TABLE strings (s TEXT, off INT, length INT);

INSERT INTO strings VALUES ('hello', 1, 2), ('world', 2, 3), ('h', 1, 1), (NULL, 2, 2);

SELECT STARTS_WITH(s, 'h') FROM strings;

SELECT STARTS_WITH(s, 'he') FROM strings;

SELECT STARTS_WITH(s, 'he-man') FROM strings;

SELECT STARTS_WITH(NULL, 'h') FROM strings;

SELECT STARTS_WITH(s, NULL) FROM strings;

SELECT STARTS_WITH(NULL, NULL) FROM strings;

SELECT STARTS_WITH(s, '') FROM strings;

PRAGMA enable_verification;

CREATE TABLE strings (s TEXT);

INSERT INTO strings VALUES ('átomo');

INSERT INTO strings VALUES ('olá mundo');

INSERT INTO strings VALUES ('你好世界');

INSERT INTO strings VALUES ('two ñ three ₡ four 🦆 end');

SELECT STARTS_WITH(s, 'á') FROM strings;

SELECT STARTS_WITH(s, 'olá mundo') FROM strings;

SELECT STARTS_WITH(s, '你好世界') FROM strings;

SELECT STARTS_WITH(s, 'two ñ thr') FROM strings;

SELECT STARTS_WITH(s, 'ñ') FROM strings;

SELECT STARTS_WITH(s, '₡ four 🦆 e') FROM strings;

PRAGMA enable_verification;

SELECT STARTS_WITH('hello world', 'h'), STARTS_WITH('hello world', 'he'), STARTS_WITH('hello world', 'hel'), STARTS_WITH('hello world', 'hell'), STARTS_WITH('hello world', 'hello'), STARTS_WITH('hello world', 'hello '), STARTS_WITH('hello world', 'hello w'), STARTS_WITH('hello world', 'hello wo'), STARTS_WITH('hello world', 'hello wor'), STARTS_WITH('hello world', 'hello worl');

SELECT STARTS_WITH('hello world', 'a'), STARTS_WITH('hello world', 'ha'), STARTS_WITH('hello world', 'hea'), STARTS_WITH('hello world', 'hela'), STARTS_WITH('hello world', 'hella'), STARTS_WITH('hello world', 'helloa'), STARTS_WITH('hello world', 'hello a'), STARTS_WITH('hello world', 'hello wa'), STARTS_WITH('hello world', 'hello woa'), STARTS_WITH('hello world', 'hello wora');

SELECT STARTS_WITH('hello', ''), STARTS_WITH('', ''), STARTS_WITH(NULL, '');

CREATE TABLE strings (s TEXT, off INT, length INT);

INSERT INTO strings VALUES ('hello', 1, 2), ('world', 2, 3), ('h', 1, 1), (NULL, 2, 2);

SELECT STARTS_WITH(s, 'h') FROM strings;

SELECT STARTS_WITH(s, 'he') FROM strings;

SELECT STARTS_WITH(s, 'he-man') FROM strings;

SELECT STARTS_WITH(NULL, 'h') FROM strings;

SELECT STARTS_WITH(s, NULL) FROM strings;

SELECT STARTS_WITH(NULL, NULL) FROM strings;

SELECT STARTS_WITH(s, '') FROM strings;

PRAGMA enable_verification;

CREATE TABLE strings (s TEXT);

INSERT INTO strings VALUES ('átomo');

INSERT INTO strings VALUES ('olá mundo');

INSERT INTO strings VALUES ('你好世界');

INSERT INTO strings VALUES ('two ñ three ₡ four 🦆 end');

SELECT STARTS_WITH(s, 'á') FROM strings;

SELECT STARTS_WITH(s, 'olá mundo') FROM strings;

SELECT STARTS_WITH(s, '你好世界') FROM strings;

SELECT STARTS_WITH(s, 'two ñ thr') FROM strings;

SELECT STARTS_WITH(s, 'ñ') FROM strings;

SELECT STARTS_WITH(s, '₡ four 🦆 e') FROM strings;

PRAGMA enable_verification;

SELECT 'hello'[0 : 2];

SELECT ('hello')[0 : 2];

CREATE TABLE strings (s TEXT, off INT, length INT);

INSERT INTO strings VALUES ('hello', 0, 2), ('world', 1, 3), ('b', 0, 1), (NULL, 1, 2);

SELECT ARRAY_SLICE('🦆ab', 0, 0), ARRAY_SLICE('abc', 0, 0);

SELECT ARRAY_SLICE(s, 0, 2) FROM strings;

SELECT LIST_SLICE(s, 0, 2) FROM strings;

SELECT ARRAY_SLICE(s, 1, 3) FROM strings;

SELECT ARRAY_SLICE(s, 2, 3) FROM strings;

SELECT ARRAY_SLICE(s, off, length + off) FROM strings;

SELECT ARRAY_SLICE(s, off, 2 + off) FROM strings;

SELECT ARRAY_SLICE(s, 0, length) FROM strings;

SELECT ARRAY_SLICE('hello', off, length + off) FROM strings;

SELECT ARRAY_SLICE(CAST(NULL AS TEXT), off, length + off) FROM strings;

SELECT ARRAY_SLICE('hello', NULL, length + NULL) FROM strings;

SELECT ARRAY_SLICE('hello', off + 1, NULL + off) FROM strings;

SELECT ARRAY_SLICE(CAST(NULL AS TEXT), NULL, length + NULL) FROM strings;

SELECT ARRAY_SLICE('hello', NULL, NULL + NULL) FROM strings;

SELECT ARRAY_SLICE(CAST(NULL AS TEXT), off, NULL + off) FROM strings;

SELECT ARRAY_SLICE(CAST(NULL AS TEXT), NULL, NULL + NULL) FROM strings;

SELECT ARRAY_SLICE(s, -2, NULL) FROM strings;

SELECT ARRAY_SLICE(s, 0, 1) FROM strings;

SELECT ARRAY_SLICE(s, -4, -2) FROM strings;

SELECT ARRAY_SLICE(s, 1, 0) FROM strings;

SELECT ARRAY_SLICE(s, 2, NULL) FROM strings;

SELECT ARRAY_SLICE(s, (2147483647 - 1), 1) FROM strings;

SELECT ARRAY_SLICE(s, (2147483647 - 1), -1) FROM strings;

SELECT ARRAY_SLICE(s, (-2147483646 - 1), -1) FROM strings;

SELECT ARRAY_SLICE(s, (-2147483646 - 1), -2147483647) FROM strings;

SELECT ARRAY_SLICE([], -1, -9223372036854775808);

SELECT * FROM (SELECT LIST_SLICE(NULL, 1, 3, 2));

SELECT s[1 : 2] FROM (SELECT NULL) AS t(s);

SELECT * FROM (SELECT LIST_SLICE(CAST(NULL AS INT[3]), 1, 3, 2));

PRAGMA enable_verification;

CREATE TABLE strings (s TEXT, off INT, length INT);

INSERT INTO strings VALUES ('hello', 0, 2), ('world', 1, 3), ('b', 0, 1), (NULL, 1, 2);

CREATE TABLE nulltable (n TEXT);

INSERT INTO nulltable VALUES (NULL);

INSERT INTO nulltable VALUES (NULL);

INSERT INTO nulltable VALUES (NULL);

INSERT INTO nulltable VALUES (NULL);

INSERT INTO nulltable VALUES (NULL);

INSERT INTO nulltable VALUES (NULL);

SELECT '🦆ab'[0 : 0], 'abc'[0 : 0];

SELECT 'MotörHead'[ : 5];

SELECT s[0 : 2] FROM strings;

SELECT s[1 : 3] FROM strings;

SELECT s[2 : 3] FROM strings;

SELECT s[off : length + off] FROM strings;

SELECT s[off : 2 + off] FROM strings;

SELECT s[0 : length] FROM strings;

SELECT 'hello'[off : length + off] FROM strings;

SELECT n[off : length + off] FROM strings, nulltable;

SELECT 'hello'[NULL : length + NULL] FROM strings;

SELECT 'hello'[off : NULL + off] FROM strings;

SELECT 'hello'[off + 1 : NULL + off] FROM strings;

SELECT n[NULL : length + NULL] FROM strings, nulltable;

SELECT 'hello'[NULL : NULL + NULL] FROM strings;

SELECT n[off : NULL + off] FROM strings, nulltable;

SELECT n[NULL : NULL + NULL] FROM strings, nulltable;

SELECT s[-2 : ] FROM strings;

SELECT s[0 : 1] FROM strings;

SELECT s[-4 : -2] FROM strings;

SELECT s[1 : 0] FROM strings;

SELECT s[2 : ] FROM strings;

SELECT s[(2147483647 - 1) : 1] FROM strings;

SELECT s[(2147483647 - 1) : -1] FROM strings;

SELECT s[(-2147483646 - 1) : -1] FROM strings;

SELECT s[(-2147483646 - 1) : -2147483647] FROM strings;

PRAGMA enable_verification;

SELECT STR_SPLIT(NULL, NULL);

SELECT * FROM (VALUES (STR_SPLIT('hello world', ' ')), (STR_SPLIT(NULL, ' ')), (STR_SPLIT('a b c', NULL)), (STR_SPLIT('a b c', ' '))) AS tbl(i);

CREATE TABLE strings_with_null (s TEXT);

INSERT INTO strings_with_null VALUES ('aba'), (NULL), ('ababa');

SELECT UNNEST(STR_SPLIT(s, 'b')) FROM strings_with_null;

SELECT UNNEST(STR_SPLIT(NULL, ' ')) IS NULL LIMIT 5;

SELECT UNNEST(STR_SPLIT('üüüüü', '◌̈'));

SELECT UNNEST(STR_SPLIT('üüüüü', '◌'));

SELECT UNNEST(STR_SPLIT_REGEX('üüüüü', '◌̈'));

SELECT UNNEST(STR_SPLIT_REGEX('üüüüü', '◌'));

SELECT UNNEST(STR_SPLIT(' 🦆🦆  🦆🦆', '  '));

SELECT UNNEST(STR_SPLIT('a a a a a', ' '));

SELECT UNNEST(STR_SPLIT('🦆 🦆 🦆 🦆 🦆', ' '));

SELECT UNNEST(STR_SPLIT('🦆🐈🐈🦆🐈🐈🦆🐈🐈🦆🐈🐈🦆', '🐈🐈'));

SELECT UNNEST(STR_SPLIT('', 'delim'));

SELECT UNNEST(STR_SPLIT('aaaaa', ''));

SELECT UNNEST(STR_SPLIT('🦆🦆🦆🦆🦆', ''));

SELECT UNNEST(STR_SPLIT('abab', 'b'));

SELECT UNNEST(STR_SPLIT('🦆b🦆b', 'b'));

CREATE TABLE documents (s TEXT);

INSERT INTO documents VALUES ('baabbaa'), ('aabbaab'), ('ababababa'), ('b🦆🦆bb🦆🦆'), ('🦆🦆bb🦆🦆b'), ('🦆b🦆b🦆b🦆b🦆');

SELECT UNNEST(STR_SPLIT(s, 'bb')) FROM documents WHERE 1;

SELECT UNNEST(STR_SPLIT(s, 'bb')) FROM documents WHERE s LIKE 'b%';

SELECT GROUP_CONCAT(ss, 'bb') FROM (SELECT rowid AS id, UNNEST(STR_SPLIT(s, 'bb')) AS ss FROM documents) AS q GROUP BY id ORDER BY id;

SELECT UNNEST(STR_SPLIT_REGEX('a1a11a111a', '[0-9]+'));

SELECT UNNEST(STR_SPLIT_REGEX('aaaaa', ''));

SELECT UNNEST(STR_SPLIT_REGEX('a a  a   a', '\s+'));

SELECT UNNEST(STR_SPLIT('aaaaa', NULL));

SELECT UNNEST(STR_SPLIT('1|2|3', '|'));

SELECT UNNEST(STR_SPLIT('1|2|3|', '|'));

SELECT UNNEST(STR_SPLIT('1||2|3||', '||'));

SELECT UNNEST(STR_SPLIT('1|2|3', ''));

SELECT UNNEST(STR_SPLIT('', '|'));

SELECT UNNEST(STR_SPLIT('1|2|3', NULL));

SELECT STR_SPLIT(NULL, '|') IS NULL;

SELECT UNNEST(STR_SPLIT('abc', ''));

SELECT UNNEST(STR_SPLIT_REGEX('abc', '(|abc)'));

SELECT UNNEST(STR_SPLIT_REGEX('abc', '(abc|)'));

SELECT UNNEST(STR_SPLIT('abc', ','));

SELECT UNNEST(STR_SPLIT_REGEX('abc', '(,|abc)'));

SELECT UNNEST(STR_SPLIT_REGEX('abc', '(abc|,)'));

SELECT UNNEST(STR_SPLIT('1,2,3,4,,6', ','));

SELECT UNNEST(STR_SPLIT_REGEX('1,2,3,4,,6', '(,|)'));

SELECT UNNEST(STR_SPLIT_REGEX('1,2,3,4,,6', '(|,)'));

SELECT UNNEST(STR_SPLIT_REGEX('1,2,3,4,*,6', '(,|\*)'));

SELECT UNNEST(STR_SPLIT_REGEX('1,2,3,4,*,6', '(\*|,)'));

SELECT UNNEST(STR_SPLIT_REGEX('1,2,3,4,*,6', '(\*|,)'));

SELECT UNNEST(STR_SPLIT_REGEX('1,2,3,4,*,6', '(\*|,)'));

SELECT STR_SPLIT_REGEX(a, '[') FROM test ORDER BY a;

SELECT UNNEST(STR_SPLIT(GROUP_CONCAT(range, 'DUCK '), ' ')) AS s, range % 100 AS xx FROM RANGE(0, 50000) GROUP BY xx ORDER BY s;

SELECT UNNEST(STR_SPLIT(GROUP_CONCAT(range, '🦆 '), ' ')) AS s, range % 100 AS xx FROM RANGE(0, 50000) GROUP BY xx ORDER BY s;

SELECT UNNEST(STR_SPLIT_REGEX(GROUP_CONCAT(range, 'DUCK '), '\s')) AS s, range % 100 AS xx FROM RANGE(0, 50000) GROUP BY xx ORDER BY s;

PRAGMA enable_verification;

CREATE TABLE strings (s TEXT, off INT);

INSERT INTO strings VALUES ('hello', 1), ('world', 2), ('b', 1), (NULL, 2);

SELECT '🦆ab'[1], 'abc'[2];

SELECT s[2] FROM strings;

SELECT s[3] FROM strings;

SELECT s[off] FROM strings;

SELECT s[2] FROM strings;

SELECT 'hello'[off] FROM strings;

SELECT CAST(NULL AS TEXT[off]) FROM strings;

SELECT 'hello'[NULL] FROM strings;

SELECT CAST(NULL AS TEXT[NULL]) FROM strings;

SELECT CAST(NULL AS TEXT[off]) FROM strings;

SELECT CAST(NULL AS TEXT[NULL]) FROM strings;

SELECT s[-1] FROM strings;

SELECT s[1] FROM strings;

SELECT s[6] FROM strings;

SELECT s[2147483646] FROM strings;

SELECT s[-2147483647] FROM strings;

SELECT ([1, 2, 3])[-2147483647];

PRAGMA enable_verification;

CREATE TABLE strings (s TEXT, off INT, length INT);

CREATE TABLE strings (s TEXT, off INT, length INT);

CREATE TABLE strings (s TEXT, off INT, length INT);

SELECT SUBSTRING(s, 1, 2) FROM strings;

SELECT SUBSTRING(s, 2, 2) FROM strings;

SELECT SUBSTRING(s, off, length) FROM strings;

SELECT SUBSTRING(s, off, 2) FROM strings;

SELECT SUBSTRING(s, 1, length) FROM strings;

SELECT SUBSTRING('hello', off, length) FROM strings;

SELECT SUBSTRING(NULL, off, length) FROM strings;

SELECT SUBSTRING('hello', NULL, length) FROM strings;

SELECT SUBSTRING('hello', off, NULL) FROM strings;

SELECT SUBSTRING(NULL, NULL, length) FROM strings;

SELECT SUBSTRING('hello', NULL, NULL) FROM strings;

SELECT SUBSTRING(NULL, off, NULL) FROM strings;

SELECT SUBSTRING(NULL, NULL, NULL) FROM strings;

SELECT SUBSTRING(s, -2, 2) FROM strings;

SELECT SUBSTRING(s, 0, length) FROM strings;

SELECT SUBSTRING(s, 0, length) FROM strings;

SELECT SUBSTRING(s, 0, length) FROM strings;

SELECT SUBSTRING(s, 0, length) FROM strings;

SELECT SUBSTRING(s, 0, length) FROM strings;

SELECT SUBSTRING(s, 0, length) FROM strings;

SELECT SUBSTRING(s, 0, length) FROM strings;

SELECT SUBSTRING(s, 0, length) FROM strings;

SELECT SUBSTRING(s, 0, length) FROM strings;

SELECT SUBSTRING(s, 0, length) FROM strings;

SELECT SUBSTRING(s, 0, length) FROM strings;

SELECT SUBSTRING(s, 0, length) FROM strings;

SELECT SUBSTRING(s, 0, length) FROM strings;

SELECT SUBSTRING(s, 0, length) FROM strings;

SELECT SUBSTRING(s, 0, length) FROM strings;

SELECT SUBSTRING(s, 0, length) FROM strings;

SELECT SUBSTRING(s, 0, length) FROM strings;

SELECT SUBSTRING(s, 0, length) FROM strings;

SELECT SUBSTRING(s, 0, length) FROM strings;

SELECT SUBSTRING(s, 0, length) FROM strings;

SELECT SUBSTRING(s, 0, length) FROM strings;

SELECT SUBSTRING(s, 0, length) FROM strings;

SELECT SUBSTRING(s, 0, length) FROM strings;

SELECT SUBSTRING(s, 0, length) FROM strings;

PRAGMA enable_verification;

CREATE TABLE strings (s TEXT);

INSERT INTO strings VALUES ('twoñthree₡four🦆end');

SELECT SUBSTRING(s, 1, 7) FROM strings;

SELECT SUBSTRING(s, 10, 7) FROM strings;

SELECT SUBSTRING(s, 15, 7) FROM strings;

SELECT SUBSTRING(s, 15, 7) FROM strings;

SELECT SUBSTRING(s, 15, 7) FROM strings;

SELECT SUBSTRING(s, 15, 7) FROM strings;

SELECT SUBSTRING(s, 15, 7) FROM strings;

SELECT SUBSTRING(s, 15, 7) FROM strings;

SELECT SUBSTRING(s, 15, 7) FROM strings;

PRAGMA enable_verification;

SELECT SUFFIX('abcd', 'd');

SELECT SUFFIX('abcd', 'cd');

SELECT SUFFIX('abcd', 'bcd');

SELECT SUFFIX('abcd', 'abcd');

SELECT SUFFIX('abcd', 'X');

SELECT SUFFIX('abcdefgh', 'h');

SELECT SUFFIX('abcdefgh', 'gh');

SELECT SUFFIX('abcdefgh', 'fgh');

SELECT SUFFIX('abcdefgh', 'efgh');

SELECT SUFFIX('abcdefgh', 'defgh');

SELECT SUFFIX('abcdefgh', 'X');

SELECT SUFFIX('abcdefgh', 'abcdefgh');

SELECT SUFFIX('abcdefghijklmnopqrstuvwxyz', 'z');

SELECT SUFFIX('abcdefghijklmnopqrstuvwxyz', 'yz');

SELECT SUFFIX('abcdefghijklmnopqrstuvwxyz', 'xyz');

SELECT SUFFIX('abcdefghijklmnopqrstuvwxyz', 'wxyz');

SELECT SUFFIX('abcdefghijklmnopqrstuvwxyz', 'vwxyz');

SELECT SUFFIX('abcdefghijklmnopqrstuvwxyz', 'X');

SELECT SUFFIX('abcdefghijklmnopqrstuvwxyz', 'defghijklmnopqrstuvwxyz');

SELECT SUFFIX('', 'aaa');

SELECT SUFFIX('aaa', '');

SELECT SUFFIX(NULL, 'aaa');

SELECT SUFFIX('aaa', NULL);

SELECT SUFFIX(NULL, NULL);

SELECT SUFFIX('omotá', 'á');

SELECT SUFFIX('omotá', 'á');

SELECT SUFFIX('omotá', 'a');

SELECT SUFFIX('mundo olá', 'olá');

SELECT SUFFIX('mundo olá', 'olá');

SELECT SUFFIX('mundo olá', 'mundo olá');

SELECT SUFFIX('mundo olá', 'ola');

SELECT SUFFIX('eftñ', 'ñ');

SELECT SUFFIX('ñeft', 'ñeft');

SELECT SUFFIX('ñeft', 'neft');

SELECT SUFFIX('two ñ three ₡ four 🦆 end', '🦆 end');

SELECT SUFFIX('two ñ three ₡ four 🦆 end', '🦆 end');

SELECT SUFFIX('two ñ three ₡ four 🦆 end', 'three ₡ four 🦆 end');

SELECT SUFFIX('two ñ three ₡ four 🦆 end', 'three ₡ four 🦆 end');

SELECT SUFFIX('two ñ three ₡ four 🦆 end', 'two ñ three ₡ four 🦆 end');

SELECT SUFFIX('two ñ three ₡ four 🦆 end', 'two ñ three ₡ four 🦆 end');

SELECT SUFFIX('two ñ three ₡ four 🦆 end', 'two ñ three ₡ four 🦆 end');

SELECT SUFFIX('two ñ three ₡ four 🦆 end', 'two n three ₡ four 🦆 end');

SELECT SUFFIX('two ñ three ₡ four 🦆 end', 'XXXtwo ñ three ₡ four 🦆 end');

PRAGMA enable_verification;

SELECT TO_BASE(-10, 2);

SELECT TO_BASE(-10, 2);

SELECT TO_BASE(10, 1);

SELECT TO_BASE(10, 37);

SELECT TO_BASE(10, 0, 10);

SELECT TO_BASE(10, 37, 10);

SELECT TO_BASE(10, 2, -10);

SELECT TO_BASE(10, 2);

SELECT TO_BASE(10, 2, 64);

SELECT TO_BASE(10, 3);

SELECT TO_BASE(10, 16);

SELECT TO_BASE(10, 36);

SELECT TO_BASE(42, 36);

SELECT TO_BASE(range, 2), TO_BASE(range, 2, 8), TO_BASE(range, 16), TO_BASE(range, 16, 2), TO_BASE(range, 36), TO_BASE(range, 36, 2) FROM RANGE(1, 43) ORDER BY range;

CREATE TABLE fib AS SELECT * FROM (VALUES (0), (1), (1), (2), (3), (5), (8), (13), (21), (34), (55), (89), (144), (233), (377), (610), (987), (1597), (2584), (4181), (6765), (10946), (17711), (28657), (46368));

SELECT TO_BASE(col0, 2) FROM fib ORDER BY col0;

SELECT TO_BASE(col0, 16) FROM fib ORDER BY col0;

SELECT TO_BASE(col0, 36) FROM fib ORDER BY col0;

PRAGMA enable_verification;

SELECT TRANSLATE('This is the main test string', NULL, 'ALT');

SELECT TRANSLATE(NULL, 'main', 'ALT');

SELECT TRANSLATE('This is the main test string', 'main', NULL);

SELECT TRANSLATE('12', '2', 'a');

SELECT TRANSLATE('abcde', 'abcde', 'fghij');

SELECT TRANSLATE('abcde', 'aabcc', '14235');

SELECT TRANSLATE('https://dxyzdb.org', 'zyx.orghttps:/', 'kcu');

SELECT TRANSLATE('12345', '14367', 'ax');

SELECT TRANSLATE('hacco worcdxxx', 'acx2', 'el');

SELECT TRANSLATE('hacCo worcd', 'acC', 'ellaabb');

SELECT TRANSLATE('RÄcks', 'Ä', 'A');

SELECT TRANSLATE('🦆', '🦆', 'D');

SELECT TRANSLATE('MotörHeadΩ', 'aeΩ', 'eÄ');

SELECT TRANSLATE('This is 🐱.', '🐱', '🦆');

SELECT TRANSLATE('Äañt₡Xá你好世界我', 'ñá世界我xyz', 'naDBá');

CREATE TABLE strings (a TEXT, b TEXT);

INSERT INTO strings VALUES ('Hello', 'World'), ('HuLlD', NULL), ('MotörHead', 'RÄcks'), ('', NULL), ('Hi', '🦆');

SELECT TRANSLATE(a, 'öHl', 'oA-') FROM strings;

SELECT TRANSLATE(a, 'loD', '🦆') FROM strings;

SELECT TRANSLATE(b, 'ÄW🦆l', 'ow🐱') FROM strings;

SELECT TRANSLATE(a, 'oel', 'OEL') FROM strings WHERE NOT b IS NULL;

SELECT TRANSLATE(1);

SELECT TRANSLATE(1, 2);

SELECT TRANSLATE(1, 2, 3, 4);

PRAGMA enable_verification;

SELECT LTRIM(''), LTRIM('Neither'), LTRIM(' Leading'), LTRIM('Trailing   '), LTRIM(' Both '), LTRIM(NULL), LTRIM('     ');

SELECT RTRIM(''), RTRIM('Neither'), RTRIM(' Leading'), RTRIM('Trailing   '), RTRIM(' Both '), RTRIM(NULL), RTRIM('    ');

SELECT TRIM(''), TRIM('Neither'), TRIM(' Leading'), TRIM('Trailing   '), TRIM(' Both '), TRIM(NULL), TRIM('     ');

CREATE TABLE strings (a TEXT, b TEXT);

INSERT INTO strings VALUES ('', 'Neither'), (' Leading', NULL), (' Both ', 'Trailing   '), ('', NULL);

SELECT LTRIM(a) FROM strings;

SELECT LTRIM(b) FROM strings;

SELECT LTRIM(a) FROM strings WHERE NOT b IS NULL;

SELECT RTRIM(a) FROM strings;

SELECT RTRIM(b) FROM strings;

SELECT RTRIM(a) FROM strings WHERE NOT b IS NULL;

SELECT LTRIM('', 'ho'), LTRIM('hello', 'ho'), LTRIM('papapapa', 'pa'), LTRIM('blaHblabla', 'bla'), LTRIM('blabla', NULL), LTRIM(NULL, 'blabla'), LTRIM('blabla', '');

SELECT RTRIM('', 'ho'), RTRIM('hello', 'ho'), RTRIM('papapapa', 'pa'), RTRIM('blaHblabla', 'bla'), RTRIM('blabla', NULL), RTRIM(NULL, 'blabla'), RTRIM('blabla', '');

SELECT TRIM('', 'ho'), TRIM('hello', 'ho'), TRIM('papapapa', 'pa'), TRIM('blaHblabla', 'bla'), TRIM('blabla', NULL), TRIM(NULL, 'blabla'), TRIM('blabla', '');

CREATE TABLE trim_test (a TEXT, b TEXT);

INSERT INTO trim_test VALUES ('hello', 'ho'), ('test', 't'), ('mühleisen', 'mün'), (NULL, ' '), ('', NULL), ('', ''), (NULL, NULL);

SELECT LTRIM(a, b), RTRIM(a, b), TRIM(a, b) FROM trim_test;

SELECT LTRIM(a, b), RTRIM(a, b), TRIM(a, b) FROM trim_test;

SELECT LTRIM('hello', 'world');

SELECT LTRIM('hello', 'world');

SELECT RTRIM('hello', 'world');

SELECT RTRIM('hello', 'world');

SELECT RTRIM('hello', 'world');

PRAGMA enable_verification;

SELECT UNICODE(NULL), UNICODE(''), UNICODE('$'), UNICODE('¢'), UNICODE('€'), UNICODE('𐍈');

CREATE TABLE strings (a TEXT, b TEXT);

INSERT INTO strings VALUES ('', 'Zero'), ('$', NULL), ('¢', 'Two'), ('€', NULL), ('𐍈', 'Four');

SELECT UNICODE(a) FROM strings;

SELECT UNICODE(b) FROM strings;

SELECT UNICODE(a) FROM strings WHERE NOT b IS NULL;

SELECT UNICODE(a) FROM strings WHERE NOT b IS NULL;

SELECT UNICODE(a) FROM strings WHERE NOT b IS NULL;

PRAGMA enable_verification;

SELECT URL_ENCODE(''), URL_DECODE('');

SELECT URL_ENCODE(NULL), URL_DECODE(NULL);

SELECT URL_DECODE(URL_ENCODE('http://www.google.com/this is a long url'));

SELECT COUNT(*) FROM RANGE(0, 1000) AS t(n) WHERE URL_DECODE(URL_ENCODE(CHR(CAST(n AS INT)))) = CHR(CAST(n AS INT));

SELECT URL_DECODE('%'), URL_DECODE('%5'), URL_DECODE('%X'), URL_DECODE('%%');

SELECT URL_DECODE('%FF%FF%FF');

PRAGMA enable_verification;

SELECT EPOCH(CAST('14:21:13' AS TIME));

SELECT EXTRACT(EPOCH FROM CAST('14:21:13' AS TIME));

SELECT EXTRACT(SECONDS FROM CAST('14:21:13' AS TIME));

PRAGMA enable_verification;

CREATE TABLE times (d TIME, s TEXT);

INSERT INTO times VALUES ('00:01:20', 'hour'), ('20:08:10.998', 'minute'), ('20:08:10.33', 'second'), ('20:08:10.001', 'millisecond');

SELECT DATE_PART(CAST(NULL AS TEXT), CAST(NULL AS TIME)) FROM times;

SELECT DATE_PART(s, CAST(NULL AS TIME)) FROM times;

SELECT DATE_PART(NULL, d) FROM times;

SELECT DATE_PART(s, CAST('14:28:50.447' AS TIME)) FROM times;

SELECT DATE_PART('hour', d) FROM times;

SELECT DATE_PART(s, d) FROM times;

SELECT DATE_PART('${datepart}', CAST('10:00:00' AS TIME));

SELECT ERA(i) FROM times;

SELECT YEAR(i) FROM times;

SELECT MONTH(i) FROM times;

SELECT DAY(i) FROM times;

SELECT DECADE(i) FROM times;

SELECT CENTURY(i) FROM times;

SELECT MILLENNIUM(i) FROM times;

SELECT QUARTER(i) FROM times;

SELECT DAYOFWEEK(i) FROM times;

SELECT ISODOW(i) FROM times;

SELECT DAYOFYEAR(i) FROM times;

SELECT WEEK(i) FROM times;

SELECT YEARWEEK(i) FROM times;

SELECT EXTRACT(DOW FROM CAST('10:00:00' AS TIME));

SELECT EXTRACT(DOY FROM CAST('10:00:00' AS TIME));

SELECT EXTRACT(YEARWEEK FROM CAST('10:00:00' AS TIME));

SELECT EXTRACT(CENTURY FROM CAST('10:00:00' AS TIME));

SELECT ERA(i) FROM times;

SELECT EXTRACT(ERA FROM CAST('10:00:00' AS TIME));

SELECT DATE_PART('era', CAST('10:00:00' AS TIME));

SELECT EXTRACT(JULIAN FROM CAST('10:00:00' AS TIME));

SELECT DATE_PART('julian', CAST('10:00:00' AS TIME));

SELECT DATE_PART('julian', CAST('10:00:00' AS TIME));

SELECT d, DATE_PART('${partcode}', d) AS p, DATE_PART(['${partcode}'], d) AS st FROM times WHERE p <> st['${partcode}'];

SELECT d, DATE_PART(['hour', 'minute', 'microsecond'], d) AS parts FROM times ORDER BY 1;

SELECT d, DATE_PART(['epoch', 'second', 'timezone', 'timezone_hour', 'timezone_minute'], d) AS parts FROM times ORDER BY 1;

SELECT d, EPOCH_NS(d) FROM times ORDER BY ALL;

SELECT d, EPOCH_US(d) FROM times ORDER BY ALL;

SELECT d, EPOCH_MS(d) FROM times ORDER BY ALL;

SELECT d, NANOSECOND(d) FROM times ORDER BY ALL;

SELECT d, DATE_PART(['${datepart}'], d) AS parts FROM times ORDER BY 1;

PRAGMA enable_verification;

CREATE TABLE times (i TIME);

INSERT INTO times VALUES ('00:01:20'), ('20:08:10.998'), ('20:08:10.33'), ('20:08:10.001'), (NULL);

SELECT EXTRACT(SECOND FROM i) FROM times;

SELECT EXTRACT(MINUTE FROM i) FROM times;

SELECT EXTRACT(HOUR FROM i) FROM times;

SELECT EXTRACT(MILLISECONDS FROM i) FROM times;

SELECT EXTRACT(MICROSECONDS FROM i) FROM times;

SELECT EXTRACT(EPOCH FROM i) FROM times;

SELECT EXTRACT(YEAR FROM i) FROM times;

SELECT EXTRACT(MONTH FROM i) FROM times;

SELECT EXTRACT(DAY FROM i) FROM times;

SELECT EXTRACT(DECADE FROM i) FROM times;

SELECT EXTRACT(CENTURY FROM i) FROM times;

SELECT EXTRACT(MILLENNIUM FROM i) FROM times;

SELECT EXTRACT(QUARTER FROM i) FROM times;

SELECT EXTRACT(DAYOFWEEK FROM i) FROM times;

SELECT EXTRACT(ISODOW FROM i) FROM times;

SELECT EXTRACT(DAYOFYEAR FROM i) FROM times;

SELECT EXTRACT(WEEK FROM i) FROM times;

SELECT EXTRACT(YEARWEEK FROM i) FROM times;

PRAGMA enable_verification;

CREATE TABLE times (i TIME);

INSERT INTO times VALUES ('00:01:20'), ('20:08:10.998'), ('20:08:10.33'), ('20:08:10.001'), (NULL);

PRAGMA disable_verification;

SELECT STATS(EXTRACT(SECOND FROM i)) FROM times LIMIT 1;

SELECT STATS(EXTRACT(MINUTE FROM i)) FROM times LIMIT 1;

SELECT STATS(EXTRACT(HOUR FROM i)) FROM times LIMIT 1;

SELECT STATS(EXTRACT(MILLISECONDS FROM i)) FROM times LIMIT 1;

SELECT STATS(EXTRACT(MICROSECONDS FROM i)) FROM times LIMIT 1;

SELECT STATS(EXTRACT(EPOCH FROM i)) FROM times LIMIT 1;

SELECT AGE(CAST('1957-06-13' AS TIMESTAMP)) AS t;

SELECT AGE(CAST('2001-04-10' AS TIMESTAMP), CAST('1957-06-13' AS TIMESTAMP));

SELECT AGE(CAST('2014-04-25' AS TIMESTAMP), CAST('2014-04-17' AS TIMESTAMP));

SELECT AGE(CAST('2014-04-25' AS TIMESTAMP), CAST('2014-01-01' AS TIMESTAMP));

SELECT AGE(CAST('2019-06-11' AS TIMESTAMP), CAST('2019-06-11' AS TIMESTAMP));

SELECT CAST(AGE(CAST('2019-06-11' AS TIMESTAMP), CAST('2019-06-11' AS TIMESTAMP)) AS TEXT);

SELECT AGE(CAST('2019-06-11 12:00:00' AS TIMESTAMP), CAST('2019-07-11 11:00:00' AS TIMESTAMP));

CREATE TABLE timestamp (t1 TIMESTAMP, t2 TIMESTAMP);

INSERT INTO timestamp VALUES ('2001-04-10', '1957-06-13');

INSERT INTO timestamp VALUES ('2014-04-25', '2014-04-17');

INSERT INTO timestamp VALUES ('2014-04-25', '2014-01-01');

INSERT INTO timestamp VALUES ('2019-06-11', '2019-06-11');

INSERT INTO timestamp VALUES (NULL, '2019-06-11');

INSERT INTO timestamp VALUES ('2019-06-11', NULL);

INSERT INTO timestamp VALUES (NULL, NULL);

SELECT AGE(t1, CAST('1957-06-13' AS TIMESTAMP)) FROM timestamp;

SELECT AGE(CAST('2001-04-10' AS TIMESTAMP), t2) FROM timestamp;

SELECT AGE(t1, t2) FROM timestamp;

SELECT t1 - t2 FROM timestamp;

SELECT AGE(t1, t2) FROM timestamp WHERE t1 > '2001-12-12';

SELECT AGE(NULL, NULL);

SELECT AGE(CAST('1957-06-13' AS TIMESTAMP), NULL);

SELECT AGE(NULL, CAST('1957-06-13' AS TIMESTAMP));

SELECT INTERVAL '1' DAY < AGE(CAST('1900-06-13' AS DATE));

SELECT AGE(CAST('1900-01-01' AS DATE), CAST('1950-01-01' AS DATE));

SELECT AGE(CAST('1992-01-01 01:01:02.400' AS TIMESTAMP), CAST('1992-01-01 01:01:02.200' AS TIMESTAMP));

SELECT AGE(CAST('1992-01-01 01:01:02.200' AS TIMESTAMP), CAST('1992-01-01 01:01:02.400' AS TIMESTAMP));

SELECT AGE(CAST('1992-01-01 01:01:01.400' AS TIMESTAMP), CAST('1992-01-01 01:01:02.200' AS TIMESTAMP));

SELECT AGE(CAST('${lspecial}' AS TIMESTAMP));

SELECT AGE(CAST('${lspecial}' AS TIMESTAMP), CAST('${rspecial}' AS TIMESTAMP));

SELECT AGE(CAST('${rspecial}' AS TIMESTAMP), CAST('${lspecial}' AS TIMESTAMP));

SET Calendar = 'gregorian';

SELECT CAST(CURRENT_TIME AS TEXT), CAST(CURRENT_DATE AS TEXT), CAST(CURRENT_TIMESTAMP AS TEXT), CAST(NOW() AS TEXT);

SELECT TYPEOF(CURRENT_TIME);

SELECT TYPEOF(CURRENT_DATE);

SELECT TYPEOF(CURRENT_TIMESTAMP);

SELECT TYPEOF(GET_CURRENT_TIME());

SELECT TYPEOF(GET_CURRENT_TIME());

SELECT TYPEOF(GET_CURRENT_TIME());

SELECT CURRENT_TIME AS TIME;

SELECT CURRENT_TIME + INTERVAL (1) SECOND AS TIME;

SET TimeZone = 'Pacific/Honolulu';

SELECT CURRENT_TIMESTAMP;

SELECT CURRENT_TIME;

SET Calendar = 'gregorian';

SET TimeZone = 'America/Chihuahua';

PRAGMA enable_verification;

SELECT EXTRACT(MILLENNIUM FROM NOW());

SELECT SUFFIX(CAST(CURRENT_TIMESTAMP AS TEXT), '-06');

SELECT SUFFIX(CAST(CURRENT_TIMESTAMP AS TEXT), '-06');

PRAGMA enable_verification;

PRAGMA enable_verification;

SELECT DATE_DIFF('${DATEPART}', startdate, enddate) FROM date1;

SELECT DATE_DIFF('${DATEPART}', startdate, enddate) FROM date1;

SELECT DATE_DIFF('HOUR', startdate, enddate) FROM date1;

SELECT DATE_DIFF('MINUTE', startdate, enddate) FROM date1;

SELECT DATE_DIFF('SECOND', startdate, enddate) FROM date1;

SELECT DATE_DIFF('MILLISECOND', startdate, enddate) FROM date1;

SELECT DATE_DIFF('MICROSECOND', startdate, enddate) FROM date1;

SELECT DATE_DIFF('ISOYEAR', startdate, enddate) FROM date1;

SELECT DATE_DIFF('${DATEPART}', startdate, enddate) + DATE_DIFF('${DATEPART}', enddate, startdate) FROM date1;

SELECT DATE_DIFF('${DATEPART}', startdate, enddate) + DATE_DIFF('${DATEPART}', enddate, startdate) FROM date1;

SELECT DATE_DIFF('MICROSECONDS', CAST('4151706-4-6' AS DATE), CAST('-5559461-6-26' AS DATE));

SELECT DATE_DIFF('ISODOW', CAST('4765396-11-24' AS DATE), CAST('-4389735-12-13' AS DATE));

SELECT DATE_DIFF('ISODOW', CAST('4765396-11-24' AS DATE), CAST('-4389735-12-13' AS DATE));

SELECT DATE_DIFF('${DATEPART}', startdate, enddate) FROM datetime1;

SELECT DATE_DIFF('${DATEPART}', startdate, enddate) FROM datetime1;

SELECT DATE_DIFF('${DATEPART}', startdate, enddate) + DATE_DIFF('${DATEPART}', enddate, startdate) FROM datetime1;

SELECT DATE_DIFF('${DATEPART}', startdate, enddate) + DATE_DIFF('${DATEPART}', enddate, startdate) FROM datetime1;

SELECT DATE_DIFF('${DATEPART}', startdate, enddate) + DATE_DIFF('${DATEPART}', enddate, startdate) FROM datetime1;

SELECT DATE_DIFF('${DATEPART}', startdate, enddate) FROM time1;

SELECT DATE_DIFF('HOUR', startdate, enddate) FROM time1;

SELECT DATE_DIFF('MINUTE', startdate, enddate) FROM time1;

SELECT DATE_DIFF('SECOND', startdate, enddate) FROM time1;

SELECT DATE_DIFF('MILLISECOND', startdate, enddate) FROM time1;

SELECT DATE_DIFF('MICROSECOND', startdate, enddate) FROM time1;

SELECT DATE_DIFF('WEEK', CAST('2023-01-22' AS DATE), CAST('2024-09-13' AS DATE)) AS "column";

SELECT DATE_DIFF('WEEK', CAST('2023-01-22 05:30:00' AS TIMESTAMP), CAST('2024-09-13 05:30:00' AS TIMESTAMP)) AS "column";

SELECT DATE_DIFF('${DATEPART}', startdate, enddate) + DATE_DIFF('${DATEPART}', enddate, startdate) FROM time1;

SELECT DATE_DIFF('${DATEPART}', startdate, enddate) + DATE_DIFF('${DATEPART}', enddate, startdate) FROM time1;

SELECT DATE_DIFF('${DATEPART}', startdate, enddate) + DATE_DIFF('${DATEPART}', enddate, startdate) FROM time1;

SELECT DATE_DIFF('${DATEPART}', startdate, enddate) + DATE_DIFF('${DATEPART}', enddate, startdate) FROM time1;

SELECT DATE_DIFF('${DATEPART}', startdate, enddate) + DATE_DIFF('${DATEPART}', enddate, startdate) FROM time1;

SELECT DATE_DIFF('${DATEPART}', startdate, enddate) + DATE_DIFF('${DATEPART}', enddate, startdate) FROM time1;

SELECT DATE_DIFF('${DATEPART}', startdate, NULL) FROM (SELECT CAST('2021-07-30' AS TIMESTAMP) + INTERVAL (d) DAY AS startdate FROM RANGE(0, 5) AS tbl(d)) AS days;

SELECT DATE_DIFF('${DATEPART}', NULL, startdate) FROM (SELECT CAST('2021-07-30' AS TIMESTAMP) + INTERVAL (d) DAY AS startdate FROM RANGE(0, 5) AS tbl(d)) AS days;

SELECT DATE_DIFF('${DATEPART}', CAST(NULL AS TIMESTAMP), NULL) FROM (SELECT CAST('2021-07-30' AS TIMESTAMP) + INTERVAL (d) DAY AS startdate FROM RANGE(0, 5) AS tbl(d)) AS days;

SELECT DATE_DIFF('NULL', startdate, startdate + INTERVAL '1' HOUR) FROM (SELECT CAST('2021-07-30' AS TIMESTAMP) + INTERVAL (d) DAY AS startdate FROM RANGE(0, 5) AS tbl(d)) AS days;

SELECT DATE_DIFF('NULL', startdate, startdate + INTERVAL '1' HOUR) FROM (SELECT CAST('2021-07-30' AS TIMESTAMP) + INTERVAL (d) DAY AS startdate FROM RANGE(0, 5) AS tbl(d)) AS days;

SELECT DATE_DIFF('MICROSECONDS', CAST('276858-10-21 9:36:33' AS TIMESTAMP), CAST('-222154-6-30 5:19:49' AS TIMESTAMP));
/* -- */;

CREATE TABLE parts (datepart TEXT);

CREATE TABLE parts (datepart TEXT);

INSERT INTO parts VALUES ('${datepart}');
endloop;

SELECT datepart, DATE_DIFF('DATEPART', CAST('2005-12-31 23:59:59.9999999' AS TIMESTAMP), CAST('2006-01-01 00:00:00.0000000' AS TIMESTAMP)) FROM parts;

INSERT INTO parts VALUES ('duck');

SELECT datepart, DATE_DIFF('DATEPART', CAST('2005-12-31 23:59:59.9999999' AS TIMESTAMP), CAST('2006-01-01 00:00:00.0000000' AS TIMESTAMP)) FROM parts;

PRAGMA enable_verification;

CREATE TABLE date1 AS SELECT CAST('2004-01-31' AS DATE) AS startdate, CAST('2004-02-29' AS DATE) AS enddate;

SELECT DATESUB('month', CAST('2004-01-31' AS DATE), CAST('2004-02-29' AS DATE));

SELECT DATESUB('month', CAST('2004-01-29' AS DATE), CAST('2004-02-29' AS DATE));

SELECT DATESUB('quarter', CAST('2004-01-31' AS DATE), CAST('2004-04-30' AS DATE));

SELECT DATESUB('year', CAST('2004-02-29' AS DATE), CAST('2005-02-28' AS DATE));

SELECT DATESUB('isoyear', CAST('2004-02-29' AS DATE), CAST('2005-02-28' AS DATE));

SELECT DATESUB('decade', CAST('1994-02-28' AS DATE), CAST('2004-02-29' AS DATE));

SELECT DATESUB('century', CAST('1904-02-29' AS DATE), CAST('2005-02-28' AS DATE));

SELECT DATESUB('millennium', CAST('1004-02-29' AS DATE), CAST('2004-02-29' AS DATE));

SELECT DATESUB('${datepart}', CAST('2004-01-31' AS DATE), CAST('2004-02-29' AS DATE));

SELECT DATESUB('${datepart}', CAST('2004-01-31' AS DATE), CAST('2004-02-29' AS DATE));

SELECT DATESUB('hour', CAST('2004-01-31' AS DATE), CAST('2004-02-01' AS DATE));

SELECT DATESUB('minute', CAST('2004-02-29' AS DATE), CAST('2004-03-01' AS DATE));

SELECT DATESUB('second', CAST('2004-02-29' AS DATE), CAST('2004-03-01' AS DATE));

SELECT DATESUB('millisecond', CAST('2004-02-29' AS DATE), CAST('2004-03-01' AS DATE));

SELECT DATESUB('microsecond', CAST('2004-02-29' AS DATE), CAST('2004-03-01' AS DATE));

SELECT DATESUB('${datepart}', startdate, enddate) + DATESUB('${datepart}', enddate, startdate) FROM date1;

SELECT DATESUB('${datepart}', startdate, enddate) + DATESUB('${datepart}', enddate, startdate) FROM date1;

CREATE TABLE datetime1 AS SELECT CAST('2004-01-31 12:00:00' AS TIMESTAMP) AS startdate, CAST('2004-02-29 13:05:00' AS TIMESTAMP) AS enddate;

SELECT DATESUB('month', CAST('2004-01-31 12:00:00' AS TIMESTAMP), CAST('2004-02-29 13:00:00' AS TIMESTAMP));

SELECT DATESUB('month', CAST('2004-01-29 12:00:00' AS TIMESTAMP), CAST('2004-02-29 13:00:00' AS TIMESTAMP));

SELECT DATESUB('month', CAST('2004-02-29 12:00:00' AS TIMESTAMP), CAST('2004-03-31 13:00:00' AS TIMESTAMP));

SELECT DATESUB('month', CAST('2004-02-29 13:00:00' AS TIMESTAMP), CAST('2004-03-31 12:00:00' AS TIMESTAMP));

SELECT DATESUB('quarter', CAST('2004-01-31 12:00:00' AS TIMESTAMP), CAST('2004-04-30 13:00:00' AS TIMESTAMP));

SELECT DATESUB('year', CAST('2004-02-29 12:00:00' AS TIMESTAMP), CAST('2005-02-28 13:00:00' AS TIMESTAMP));

SELECT DATESUB('isoyear', CAST('2004-02-29 12:00:00' AS TIMESTAMP), CAST('2005-02-28 13:00:00' AS TIMESTAMP));

SELECT DATESUB('decade', CAST('1994-02-28 12:00:00' AS TIMESTAMP), CAST('2004-02-29 13:00:00' AS TIMESTAMP));

SELECT DATESUB('century', CAST('1904-02-29 12:00:00' AS TIMESTAMP), CAST('2005-02-28 13:00:00' AS TIMESTAMP));

SELECT DATESUB('month', CAST('2004-01-31 13:00:00' AS TIMESTAMP), CAST('2004-02-29 12:00:00' AS TIMESTAMP));

SELECT DATESUB('month', CAST('2004-01-29 13:00:00' AS TIMESTAMP), CAST('2004-02-29 12:00:00' AS TIMESTAMP));

SELECT DATESUB('quarter', CAST('2004-01-31 13:00:00' AS TIMESTAMP), CAST('2004-04-30 12:00:00' AS TIMESTAMP));

SELECT DATESUB('year', CAST('2004-02-29 13:00:00' AS TIMESTAMP), CAST('2005-02-28 12:00:00' AS TIMESTAMP));

SELECT DATESUB('isoyear', CAST('2004-02-29 13:00:00' AS TIMESTAMP), CAST('2005-02-28 12:00:00' AS TIMESTAMP));

SELECT DATESUB('decade', CAST('1992-02-29 13:00:00' AS TIMESTAMP), CAST('2002-02-28 12:00:00' AS TIMESTAMP));

SELECT DATESUB('century', CAST('1904-02-29 13:00:00' AS TIMESTAMP), CAST('2004-02-28 12:00:00' AS TIMESTAMP));

SELECT DATESUB('millennium', CAST('1004-02-29 12:00:00' AS TIMESTAMP), CAST('2004-02-28 13:00:00' AS TIMESTAMP));

SELECT DATESUB('${datepart}', CAST('2004-01-31 12:00:00' AS TIMESTAMP), CAST('2004-02-29 13:00:00' AS TIMESTAMP));

SELECT DATESUB('${datepart}', CAST('2004-01-31 13:00:00' AS TIMESTAMP), CAST('2004-02-29 12:00:00' AS TIMESTAMP));

SELECT DATESUB('${datepart}', CAST('2004-01-31 12:00:00' AS TIMESTAMP), CAST('2004-02-28 13:00:00' AS TIMESTAMP));

SELECT DATESUB('${datepart}', CAST('2004-01-31 13:00:00' AS TIMESTAMP), CAST('2004-02-28 12:00:00' AS TIMESTAMP));

SELECT DATESUB('hour', CAST('2004-01-31 12:00:00' AS TIMESTAMP), CAST('2004-02-01 13:05:00' AS TIMESTAMP));

SELECT DATESUB('hour', CAST('2004-01-31 12:00:00' AS TIMESTAMP), CAST('2004-02-01 12:00:00' AS TIMESTAMP));

SELECT DATESUB('hour', CAST('2004-01-31 13:00:00' AS TIMESTAMP), CAST('2004-02-01 12:05:00' AS TIMESTAMP));

SELECT DATESUB('minute', CAST('2004-01-31 12:00:00' AS TIMESTAMP), CAST('2004-02-01 13:05:00' AS TIMESTAMP));

SELECT DATESUB('minute', CAST('2004-01-31 12:00:00' AS TIMESTAMP), CAST('2004-02-01 12:00:00' AS TIMESTAMP));

SELECT DATESUB('minute', CAST('2004-01-31 13:00:00' AS TIMESTAMP), CAST('2004-02-01 12:05:00' AS TIMESTAMP));

SELECT DATESUB('second', CAST('2004-01-31 12:00:00' AS TIMESTAMP), CAST('2004-02-01 12:00:05' AS TIMESTAMP));

SELECT DATESUB('second', CAST('2004-01-31 12:00:00' AS TIMESTAMP), CAST('2004-02-01 12:00:00' AS TIMESTAMP));

SELECT DATESUB('second', CAST('2004-01-31 12:00:05' AS TIMESTAMP), CAST('2004-02-01 12:00:00' AS TIMESTAMP));

SELECT DATESUB('millisecond', CAST('2004-01-31 12:00:00' AS TIMESTAMP), CAST('2004-02-01 12:00:00.050' AS TIMESTAMP));

SELECT DATESUB('millisecond', CAST('2004-01-31 12:00:00' AS TIMESTAMP), CAST('2004-02-01 12:00:00' AS TIMESTAMP));

SELECT DATESUB('millisecond', CAST('2004-01-31 12:00:00.050' AS TIMESTAMP), CAST('2004-02-01 12:00:00' AS TIMESTAMP));

SELECT DATESUB('microsecond', CAST('2004-01-31 12:00:00' AS TIMESTAMP), CAST('2004-02-01 12:00:00.000050' AS TIMESTAMP));

SELECT DATESUB('microsecond', CAST('2004-01-31 12:00:00' AS TIMESTAMP), CAST('2004-02-01 12:00:00' AS TIMESTAMP));

SELECT DATESUB('microsecond', CAST('2004-01-31 12:00:00.000050' AS TIMESTAMP), CAST('2004-02-01 12:00:00' AS TIMESTAMP));

SELECT DATESUB('${datepart}', startdate, enddate) + DATESUB('${datepart}', enddate, startdate) FROM datetime1;

SELECT DATESUB('${datepart}', startdate, enddate) + DATESUB('${datepart}', enddate, startdate) FROM datetime1;

SELECT DATESUB('week', CAST('-214169-1-18 21:29:6' AS TIMESTAMP), CAST('93495-11-19 13:3:22' AS TIMESTAMP));

SELECT DATESUB('dayofyear', CAST('-109502-12-4 20:26:13' AS TIMESTAMP), CAST('252823-4-6 9:56:28' AS TIMESTAMP));

SELECT DATESUB('epoch', CAST('153520-4-1 20:33:43' AS TIMESTAMP), CAST('-269898-3-29 12:9:14' AS TIMESTAMP));

CREATE TABLE time1 AS SELECT CAST('12:00:00' AS TIME) AS enddate, CAST('13:35:47.123456' AS TIME) AS startdate;

SELECT DATESUB('hour', CAST('12:00:00' AS TIME), CAST('13:05:00' AS TIME));

SELECT DATESUB('hour', CAST('12:00:00' AS TIME), CAST('12:05:00' AS TIME));

SELECT DATESUB('hour', CAST('13:00:00' AS TIME), CAST('12:05:00' AS TIME));

SELECT DATESUB('minute', CAST('12:00:00' AS TIME), CAST('13:05:00' AS TIME));

SELECT DATESUB('minute', CAST('12:00:00' AS TIME), CAST('13:00:00' AS TIME));

SELECT DATESUB('minute', CAST('13:00:00' AS TIME), CAST('12:05:00' AS TIME));

SELECT DATESUB('second', CAST('12:00:00' AS TIME), CAST('12:00:05' AS TIME));

SELECT DATESUB('second', CAST('12:00:00' AS TIME), CAST('12:00:00' AS TIME));

SELECT DATESUB('second', CAST('12:00:05' AS TIME), CAST('12:00:00' AS TIME));

SELECT DATESUB('millisecond', CAST('12:00:00' AS TIME), CAST('12:00:00.050' AS TIME));

SELECT DATESUB('millisecond', CAST('12:00:00' AS TIME), CAST('12:00:00' AS TIME));

SELECT DATESUB('millisecond', CAST('12:00:00.050' AS TIME), CAST('12:00:00' AS TIME));

SELECT DATESUB('microsecond', CAST('12:00:00' AS TIME), CAST('12:00:00.000050' AS TIME));

SELECT DATESUB('microsecond', CAST('12:00:00' AS TIME), CAST('12:00:00' AS TIME));

SELECT DATESUB('microsecond', CAST('12:00:00.000050' AS TIME), CAST('12:00:00' AS TIME));

SELECT DATESUB('${datepart}', CAST('12:00:00.000050' AS TIME), CAST('12:00:00' AS TIME));

SELECT DATESUB('${datepart}', CAST('12:00:00.000050' AS TIME), CAST('12:00:00' AS TIME));

SELECT DATESUB('${datepart}', CAST('12:00:00.000050' AS TIME), CAST('12:00:00' AS TIME));

SELECT DATESUB('${datepart}', CAST('12:00:00.000050' AS TIME), CAST('12:00:00' AS TIME));

SELECT DATESUB('${datepart}', CAST('12:00:00.000050' AS TIME), CAST('12:00:00' AS TIME));

SELECT DATESUB('${datepart}', CAST('12:00:00.000050' AS TIME), CAST('12:00:00' AS TIME));

SELECT DATESUB('${datepart}', CAST('12:00:00.000050' AS TIME), CAST('12:00:00' AS TIME));

SELECT DATESUB('${datepart}', CAST('12:00:00.000050' AS TIME), CAST('12:00:00' AS TIME));

CREATE TABLE parts (datepart TEXT);

CREATE TABLE parts (datepart TEXT);

INSERT INTO parts VALUES ('${datepart}');
endloop;

SELECT datepart, DATESUB(datepart, CAST('2004-01-31 12:00:00' AS TIMESTAMP), CAST('2004-02-29 13:05:47.123456' AS TIMESTAMP)) FROM parts;

SELECT datepart, DATESUB(datepart, CAST('2004-01-31 12:00:00' AS TIMESTAMP), CAST('2004-02-29 13:05:47.123456' AS TIMESTAMP)) FROM parts;

INSERT INTO parts VALUES ('duck');

SELECT datepart, DATESUB(datepart, CAST('2004-01-31 12:00:00' AS TIMESTAMP), CAST('2004-02-29 13:05:47.123456' AS TIMESTAMP)) FROM parts;

SELECT EPOCH_MS(0) AS epoch1, EPOCH_MS(1574802684123) AS epoch2, EPOCH_MS(-291044928000) AS epoch3, EPOCH_MS(-291081600000) AS epoch4, EPOCH_MS(-291081600001) AS epoch5, EPOCH_MS(-290995201000) AS epoch6;

SELECT TO_TIMESTAMP(0), TO_TIMESTAMP(1), TO_TIMESTAMP(1574802684), TO_TIMESTAMP(-1);

SELECT TO_TIMESTAMP(1284352323.5);

SELECT TO_TIMESTAMP(CAST(1284352323 AS DOUBLE) * 100000000);

PRAGMA enable_verification;

CREATE TABLE IF NOT EXISTS dates (d DATE);

INSERT INTO dates VALUES (NULL), ('-99999-01-01'), ('-1993-08-14'), ('1992-01-01 (BC)'), ('-1992-01-01'), ('0044-03-15 (BC)'), ('0000-01-01'), ('0020-01-01'), ('1992-01-01'), ('1992-01-20'), ('1992-02-01'), ('1992-02-02'), ('1992-02-12'), ('1992-02-20'), ('1992-03-03'), ('1992-03-20'), ('1992-04-20'), ('1992-05-05'), ('1992-05-20'), ('1992-06-20'), ('1992-07-20'), ('1992-08-20'), ('1992-09-20'), ('1992-10-20'), ('1992-11-20'), ('1992-12-02'), ('1992-12-20'), ('1993-03-20'), ('1993-03-03'), ('1994-05-05'), ('1993-08-14'), ('2000-12-31'), ('2000-02-12'), ('2001-01-01'), ('2007-01-01'), ('2008-01-01'), ('2008-01-02'), ('2008-02-01'), ('2020-08-09'), ('2020-08-10'), ('2020-09-27'), ('99999-01-01');

SELECT d FROM (SELECT d, MAKE_DATE(YEAR(d), MONTH(d), DAY(d)) AS md FROM dates) AS tbl WHERE md IS DISTINCT FROM d;

SELECT d FROM (SELECT d, MAKE_DATE(DATE_PART(['year', 'month', 'day'], d)) AS md FROM dates) AS tbl WHERE md IS DISTINCT FROM d;

SELECT md FROM (SELECT MAKE_DATE(NULL, MONTH(d), DAY(d)) AS md FROM dates) AS t WHERE NOT md IS NULL;

SELECT md FROM (SELECT MAKE_DATE(YEAR(d), NULL, DAY(d)) AS md FROM dates) AS t WHERE NOT md IS NULL;

SELECT md FROM (SELECT MAKE_DATE(YEAR(d), MONTH(d), NULL) AS md FROM dates) AS t WHERE NOT md IS NULL;

SELECT * FROM dates WHERE d <> MAKE_DATE(CAST((d - CAST('1970-01-01' AS DATE)) AS INT));

SELECT MAKE_DATE(2021, 12, 30), MAKE_DATE(NULL, 12, 30), MAKE_DATE(2021, NULL, 30), MAKE_DATE(2021, 12, NULL);

CREATE TABLE timestamps (ts TIMESTAMP);

INSERT INTO timestamps VALUES ('1001-03-15 (BC) 20:38:40'), ('0044-03-15 (BC) 20:38:40'), ('1962-07-31 12:20:48.123456'), ('1969-01-01 01:03:20.45432'), ('1992-01-01 01:01:01.400'), ('1992-01-01 01:01:02.200'), ('1992-01-01 01:01:02.400'), ('1993-08-14 08:22:33.42'), ('2001-04-20 14:42:11.0'), ('2001-04-20 14:42:11.123'), ('2004-01-31 12:00:00.000050'), ('2004-01-31 12:00:00.050'), ('2004-02-01 12:00:00.000050'), ('2004-02-01 12:00:00.050'), ('2004-02-29 13:05:47.123456'), ('2008-01-01 00:00:01.5'), ('2008-01-01 00:00:01.594'), ('2008-01-01 00:00:01.794'), ('2008-01-01 00:00:01.88926'), ('2008-01-01 00:00:01.894'), ('2008-01-01 00:00:01.98926'), ('2008-01-01 00:00:01.99926'), ('2008-01-01 00:00:11.1'), ('2019-01-06 04:03:02.123456'), ('2019-01-06 04:03:02.5'), ('2020-01-01 00:00:01.88926'), ('2020-12-31 21:25:58.745232'), ('2021-04-15 14:55:17.915'), ('2021-04-15 14:55:17.915000'), ('2021-05-02 12:11:49.5'), ('2021-12-01 13:54:48.123456'), ('1993-08-14 08:22:33'), (NULL);

SELECT ts, mts FROM (SELECT ts, MAKE_TIMESTAMP(YEAR(ts), MONTH(ts), DAY(ts), HOUR(ts), MINUTE(ts), MICROSECOND(ts) / 1000000.0) AS mts FROM timestamps) AS t WHERE mts IS DISTINCT FROM ts;

SELECT md FROM (SELECT MAKE_TIMESTAMP(NULL, MONTH(ts), DAY(ts), HOUR(ts), MINUTE(ts), MICROSECOND(ts) / 1000000.0) AS md FROM timestamps) AS t WHERE NOT md IS NULL;

SELECT md FROM (SELECT MAKE_TIMESTAMP(YEAR(ts), NULL, DAY(ts), HOUR(ts), MINUTE(ts), MICROSECOND(ts) / 1000000.0) AS md FROM timestamps) AS t WHERE NOT md IS NULL;

SELECT md FROM (SELECT MAKE_TIMESTAMP(YEAR(ts), MONTH(ts), NULL, HOUR(ts), MINUTE(ts), MICROSECOND(ts) / 1000000.0) AS md FROM timestamps) AS t WHERE NOT md IS NULL;

SELECT md FROM (SELECT MAKE_TIMESTAMP(YEAR(ts), MONTH(ts), DAY(ts), NULL, MINUTE(ts), MICROSECOND(ts) / 1000000.0) AS md FROM timestamps) AS t WHERE NOT md IS NULL;

SELECT md FROM (SELECT MAKE_TIMESTAMP(YEAR(ts), MONTH(ts), DAY(ts), HOUR(ts), NULL, MICROSECOND(ts) / 1000000.0) AS md FROM timestamps) AS t WHERE NOT md IS NULL;

SELECT md FROM (SELECT MAKE_TIMESTAMP(YEAR(ts), MONTH(ts), DAY(ts), HOUR(ts), MINUTE(ts), NULL) AS md FROM timestamps) AS t WHERE NOT md IS NULL;

SELECT MAKE_TIMESTAMP(2021, 12, 30, 12, 41, 46.123456), MAKE_TIMESTAMP(NULL, 12, 30, 12, 41, 46.123456), MAKE_TIMESTAMP(2021, NULL, 30, 12, 41, 46.123456), MAKE_TIMESTAMP(2021, 12, NULL, 12, 41, 46.123456), MAKE_TIMESTAMP(2021, 12, 30, NULL, 41, 46.123456), MAKE_TIMESTAMP(2021, 12, 30, 12, NULL, 46.123456), MAKE_TIMESTAMP(2021, 12, 30, 12, 41, NULL);

SELECT MAKE_TIMESTAMP(0), MAKE_TIMESTAMP(1684509234845000);

SELECT MAKE_TIMESTAMP(9223372036854775807);
/* Infinity */;

SELECT MAKE_TIMESTAMP_NS(0), MAKE_TIMESTAMP_NS(1684509234845000123);

SELECT MAKE_TIMESTAMP_NS(9223372036854775806);

SELECT MAKE_TIMESTAMP_NS(9223372036854775807);
/* Infinity */;

CREATE TABLE times (t TIME);

INSERT INTO times VALUES (NULL), ('00:00:01'), ('00:01:20'), ('01:00:00'), ('02:30:01'), ('06:30:00'), ('12:00:30.1234'), ('12:20:48.123456'), ('12:11:49.5'), ('14:55:17.915000'), ('21:15:22'), ('20:08:10.001'), ('20:08:10.33'), ('20:08:10.998'), ('21:25:58.745232');

SELECT t, mt FROM (SELECT t, MAKE_TIME(HOUR(t), MINUTE(t), MICROSECOND(t) / 1000000.0) AS mt FROM times) AS tbl WHERE mt IS DISTINCT FROM t;

SELECT md FROM (SELECT MAKE_TIME(NULL, MINUTE(d), MICROSECOND(d) / 1000000.0) AS md FROM dates) AS t WHERE NOT md IS NULL;

SELECT md FROM (SELECT MAKE_TIME(HOUR(d), NULL, MICROSECOND(d) / 1000000.0) AS md FROM dates) AS t WHERE NOT md IS NULL;

SELECT md FROM (SELECT MAKE_TIME(HOUR(d), MINUTE(d), NULL) AS md FROM dates) AS t WHERE NOT md IS NULL;

SELECT MAKE_TIME(12, 41, 46.123456), MAKE_TIME(NULL, 41, 46.123456), MAKE_TIME(12, NULL, 46.123456), MAKE_TIME(12, 41, NULL);

SELECT MAKE_TIMESTAMP(294247, 1, 10, 4, 0, 54.775807);

PRAGMA enable_verification;

SELECT start_ts, end_ts, DATE_DIFF('DAY', start_ts, end_ts) AS dd_hour FROM (VALUES (CAST('1970-01-03 12:12:12' AS TIMESTAMP), CAST('1969-12-25 05:05:05' AS TIMESTAMP))) AS x(start_ts, end_ts);

SELECT start_ts, end_ts, DATE_DIFF('HOUR', start_ts, end_ts) AS dd_hour FROM (VALUES (CAST('1970-01-01 12:12:12' AS TIMESTAMP), CAST('1969-12-31 05:05:05' AS TIMESTAMP))) AS x(start_ts, end_ts);

SELECT start_ts, end_ts, DATE_DIFF('MINUTE', start_ts, end_ts) AS dd_minute FROM (VALUES (CAST('1970-01-01 00:12:12' AS TIMESTAMP), CAST('1969-12-31 23:05:05' AS TIMESTAMP))) AS x(start_ts, end_ts);

SELECT start_ts, end_ts, DATE_DIFF('SECOND', start_ts, end_ts) AS dd_second FROM (VALUES (CAST('1970-01-01 00:00:12.456' AS TIMESTAMP), CAST('1969-12-31 23:59:05.123' AS TIMESTAMP))) AS x(start_ts, end_ts);

SELECT start_ts, end_ts, DATE_DIFF('MILLISECOND', start_ts, end_ts) AS dd_second FROM (VALUES (CAST('1970-01-01 00:00:12.456789' AS TIMESTAMP), CAST('1969-12-31 23:59:05.123456' AS TIMESTAMP))) AS x(start_ts, end_ts);

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

CREATE TABLE timestamps (ts TIMESTAMP);

INSERT INTO timestamps VALUES ('-infinity'), ('1962-07-31 12:20:48.123456'), ('1969-01-01 01:03:20.45432'), ('1992-01-01 01:01:01.400'), ('1992-01-01 01:01:02.200'), ('1992-01-01 01:01:02.400'), ('1993-08-14 08:22:33'), ('1993-08-14 08:22:33.42'), ('2001-04-20 14:42:11.0'), ('2001-04-20 14:42:11.123'), ('2004-01-31 12:00:00.000050'), ('2004-01-31 12:00:00.050'), ('2004-02-01 12:00:00.000050'), ('2004-02-01 12:00:00.050'), ('2004-02-29 13:05:47.123456'), ('2008-01-01 00:00:01.5'), ('2008-01-01 00:00:01.594'), ('2008-01-01 00:00:01.794'), ('2008-01-01 00:00:01.88926'), ('2008-01-01 00:00:01.894'), ('2008-01-01 00:00:01.98926'), ('2008-01-01 00:00:01.99926'), ('2008-01-01 00:00:11.1'), ('2019-01-06 04:03:02.123456'), ('2019-01-06 04:03:02.5'), ('2020-01-01 00:00:01.88926'), ('2020-12-31 21:25:58.745232'), ('2021-04-15 14:55:17.915'), ('2021-04-15 14:55:17.915000'), ('2021-05-02 12:11:49.5'), ('2021-12-01 13:54:48.123456'), ('2022-01-01 00:00:41'), ('infinity'), (NULL);

CREATE TABLE millennia AS SELECT * FROM (VALUES (CAST('1001-03-15 (BC) 20:38:40' AS TIMESTAMP)), (CAST('0044-03-15 (BC) 20:38:40' AS TIMESTAMP)), (CAST('0998-02-16 20:38:40' AS TIMESTAMP)), (CAST('1998-02-16 20:38:40' AS TIMESTAMP)), (CAST('2001-02-16 20:38:40' AS TIMESTAMP))) AS tbl(ts);

SELECT ts, DATE_PART('millennium', ts) FROM millennia;

SELECT ts, DATE_PART('century', ts) FROM millennia;

SELECT DATE_PART('isoyear', ts), ts FROM timestamps ORDER BY 2;

SELECT DATE_PART('isoyear', ts), ts FROM GENERATE_SERIES(CAST('2021-12-26' AS TIMESTAMP), CAST('2022-01-12' AS TIMESTAMP), INTERVAL '1' DAY) AS tbl(ts);

SELECT DATE_PART('julian', ts), ts FROM timestamps ORDER BY 2;

SELECT DATE_PART('julian', ts), ts FROM timestamps ORDER BY 2;

SELECT DATE_PART('julian', ts), ts FROM timestamps ORDER BY 2;

SELECT DATE_PART('julian', ts), ts FROM timestamps ORDER BY 2;

SELECT ts, DATE_PART('${partcode}', ts) AS p, DATE_PART(['${partcode}'], ts) AS s FROM timestamps WHERE p <> s['${partcode}'];

SELECT CAST(ts AS DATE) AS d, DATE_PART(['year', 'month', 'day'], ts) AS parts FROM timestamps ORDER BY 1;

SELECT CAST(ts AS DATE) AS d, DATE_PART(['year', 'month', 'day'], ts) AS parts FROM millennia ORDER BY 1;

SELECT CAST(ts AS DATE) AS d, DATE_PART(['era', 'millennium', 'century', 'decade', 'quarter'], ts) AS parts FROM timestamps ORDER BY 1;

SELECT CAST(ts AS DATE) AS d, DATE_PART(['era', 'millennium', 'century', 'decade', 'quarter'], ts) AS parts FROM millennia ORDER BY 1;

SELECT CAST(ts AS DATE) AS d, DATE_PART(['weekday', 'isodow', 'doy', 'julian'], ts) AS parts FROM timestamps ORDER BY 1;

SELECT DATE_PART(['weekday', 'isodow', 'doy', 'julian'], CAST('2008-01-01 00:00:01.894' AS TIMESTAMP)) AS parts;

SELECT CAST(ts AS DATE) AS d, DATE_PART(['weekday', 'isodow', 'doy', 'julian'], ts) AS parts FROM millennia ORDER BY 1;

SELECT CAST(ts AS DATE) AS d, DATE_PART(['isoyear', 'week', 'yearweek'], ts) AS parts FROM timestamps ORDER BY 1;

SELECT CAST(ts AS DATE) AS d, DATE_PART(['isoyear', 'week', 'yearweek'], ts) AS parts FROM millennia ORDER BY 1;

SELECT ts, DATE_PART(['hour', 'minute', 'microsecond'], ts) AS parts FROM timestamps ORDER BY 1;

SELECT ts, DATE_PART(['hour', 'minute', 'microsecond'], ts) AS parts FROM millennia ORDER BY 1;

SELECT ts, DATE_PART(['epoch', 'timezone', 'timezone_hour', 'timezone_minute'], ts) AS parts FROM timestamps ORDER BY 1;

SELECT ts, DATE_PART(['epoch', 'timezone', 'timezone_hour', 'timezone_minute'], ts) AS parts FROM millennia ORDER BY 1;

SELECT DATE_PART(['hour', 'minute', 'microsecond'], CAST(NULL AS TIMESTAMP));

SELECT DATE_PART(['hour', 'minute', 'microsecond'], CAST('1962-07-31 12:20:48.123456' AS TIMESTAMP));

SELECT DATE_PART(['month', 'months', 'mon'], CAST('1962-07-31 12:20:48.123456' AS TIMESTAMP));

SELECT CAST(ts AS DATE) AS d, DATE_PART(['year', 'month', 'months'], ts) AS parts FROM timestamps ORDER BY 1;

SELECT ts, EPOCH_US(ts) FROM timestamps ORDER BY ALL;

SELECT CAST(ts AS TIMESTAMPTZ), EPOCH_US(CAST(ts AS TIMESTAMPTZ)) FROM timestamps ORDER BY ALL;

SELECT ts, EPOCH_MS(ts) FROM timestamps ORDER BY ALL;

SELECT CAST(ts AS TIMESTAMPTZ), EPOCH_MS(CAST(ts AS TIMESTAMPTZ)) FROM timestamps ORDER BY ALL;

SELECT EPOCH_MS(9223372036854775807);

SELECT EPOCH_MS(-9223372036854775808);

SELECT ts, EPOCH_NS(ts) FROM timestamps ORDER BY ALL;

SELECT CAST(ts AS TIMESTAMPTZ), EPOCH_NS(CAST(ts AS TIMESTAMPTZ)) FROM timestamps ORDER BY ALL;

SELECT ts, NANOSECOND(ts) FROM timestamps ORDER BY ALL;

SELECT CAST(ts AS TIMESTAMPTZ), NANOSECOND(CAST(ts AS TIMESTAMPTZ)) FROM timestamps ORDER BY ALL;

SELECT NANOSECOND(t) FROM (VALUES (CAST('1992-01-01 12:03:27.123456789' AS TIMESTAMP_NS)), (CAST('1900-01-01 03:08:47.987654' AS TIMESTAMP_NS)), (CAST(NULL AS TIMESTAMP_NS)), (CAST('2020-09-27 13:12:01' AS TIMESTAMP_NS))) AS tbl(t);

SELECT ts, DATE_PART(['duck', 'month', 'day'], ts) AS parts FROM timestamps ORDER BY 1;

SELECT ts, DATE_PART(['year', 'month', 'day', 'year'], ts) AS parts FROM timestamps ORDER BY 1;

SELECT DATE_PART([], ts) FROM timestamps;

SELECT DATE_PART(['year', NULL, 'month'], ts) FROM timestamps;

WITH parts(p) AS (SELECT * FROM (VALUES (['year', 'month', 'day']), (['hour', 'minute', 'microsecond'])) AS _values) SELECT DATE_PART(p, ts) FROM parts, timestamps;

SELECT EPOCH_NS(MAKE_TIMESTAMP_NS(1732118940123456789));

PRAGMA enable_verification;

CREATE TABLE timestamps (i TIMESTAMP);

INSERT INTO timestamps VALUES ('1993-08-14 08:22:33'), (NULL);

SELECT EXTRACT(YEAR FROM i) FROM timestamps;

SELECT EXTRACT(MONTH FROM i) FROM timestamps;

SELECT EXTRACT(DAY FROM i) FROM timestamps;

SELECT EXTRACT(WEEK FROM i) FROM timestamps;

SELECT EXTRACT(YEARWEEK FROM i) FROM timestamps;

SELECT EXTRACT(QUARTER FROM i) FROM timestamps;

SELECT EXTRACT(DECADE FROM i) FROM timestamps;

SELECT EXTRACT(CENTURY FROM i) FROM timestamps;

SELECT EXTRACT(DOW FROM i) FROM timestamps;

SELECT EXTRACT(DOY FROM i) FROM timestamps;

SELECT EXTRACT(EPOCH FROM i) FROM timestamps;

SELECT EXTRACT(ISODOW FROM i) FROM timestamps;

SELECT EXTRACT(MILLENNIUM FROM i) FROM timestamps;

SELECT EXTRACT(SECOND FROM i) FROM timestamps;

SELECT EXTRACT(MINUTE FROM i) FROM timestamps;

SELECT EXTRACT(HOUR FROM i) FROM timestamps;

SELECT EXTRACT(MILLISECONDS FROM i) FROM timestamps;

PRAGMA enable_verification;

CREATE TABLE timestamps (i TIMESTAMP);

INSERT INTO timestamps VALUES ('1993-08-14 08:22:33.42'), (NULL);

SELECT EXTRACT(SECOND FROM i) FROM timestamps;

SELECT EXTRACT(MINUTE FROM i) FROM timestamps;

SELECT EXTRACT(MILLISECONDS FROM i) FROM timestamps;

SELECT EXTRACT(MICROSECONDS FROM i) FROM timestamps;

SET Calendar = 'gregorian';

SET TimeZone = 'America/Los_Angeles';

SELECT AGE(CAST('1957-06-13' AS TIMESTAMPTZ)) AS t;

SELECT AGE(CAST('2001-04-10 00:00:00-07' AS TIMESTAMP), CAST('1957-06-13 00:00:00-07' AS TIMESTAMP));

SELECT AGE(CAST('2014-04-25 00:00:00-07' AS TIMESTAMP), CAST('2014-04-17 00:00:00-07' AS TIMESTAMP));

SELECT AGE(CAST('2014-04-25' AS TIMESTAMPTZ), CAST('2014-01-01' AS TIMESTAMPTZ));

SELECT AGE(CAST('2019-06-11' AS TIMESTAMPTZ), CAST('2019-06-11' AS TIMESTAMPTZ));

SELECT CAST(AGE(CAST('2019-06-11' AS TIMESTAMPTZ), CAST('2019-06-11' AS TIMESTAMPTZ)) AS TEXT);

SELECT AGE(CAST('2019-06-11 12:00:00-07' AS TIMESTAMPTZ), CAST('2019-07-11 11:00:00-07' AS TIMESTAMPTZ));

CREATE TABLE timestamps (t1 TIMESTAMPTZ, t2 TIMESTAMPTZ);

INSERT INTO timestamps VALUES ('2001-04-10', '1957-06-13'), ('2014-04-25', '2014-04-17'), ('2014-04-25', '2014-01-01'), ('2019-06-11', '2019-06-11'), (NULL, '2019-06-11'), ('2019-06-11', NULL), (NULL, NULL);

SELECT AGE(t1, CAST('1957-06-13' AS TIMESTAMPTZ)) FROM timestamps;

SELECT AGE(CAST('2001-04-10' AS TIMESTAMPTZ), t2) FROM timestamps;

SELECT AGE(t1, t2) FROM timestamps;

SELECT t1 - t2 FROM timestamps;

SELECT AGE(t1, t2) FROM timestamps WHERE t1 > '2001-12-12';

SELECT AGE(NULL, NULL);

SELECT AGE(CAST('1957-06-13' AS TIMESTAMPTZ), NULL);

SELECT AGE(NULL, CAST('1957-06-13' AS TIMESTAMPTZ));

SELECT AGE(CAST('1992-01-01 01:01:02.400' AS TIMESTAMPTZ), CAST('1992-01-01 01:01:02.200' AS TIMESTAMPTZ));

SELECT AGE(CAST('1992-01-01 01:01:02.200' AS TIMESTAMPTZ), CAST('1992-01-01 01:01:02.400' AS TIMESTAMPTZ));

SELECT AGE(CAST('1992-01-01 01:01:01.400' AS TIMESTAMPTZ), CAST('1992-01-01 01:01:02.200' AS TIMESTAMPTZ));

SET Calendar = 'gregorian';

SET TimeZone = 'America/Los_Angeles';

SELECT CAST('2021-12-01 13:54:48Z' AS TIMESTAMPTZ) + INTERVAL '1' DAY;

CREATE TABLE intervals AS SELECT iv FROM (VALUES (INTERVAL '1' YEAR), (INTERVAL (-1) YEAR), (INTERVAL '1' MONTH), (INTERVAL (-1) MONTH), (INTERVAL '13' MONTH), (INTERVAL (-15) MONTH), (INTERVAL '1' DAY), (INTERVAL (-1) DAY), (INTERVAL '32' DAY), (INTERVAL (-40) DAY), (INTERVAL '1' HOUR), (INTERVAL (-1) HOUR), (INTERVAL '11' HOUR), (INTERVAL (-14) HOUR), (INTERVAL '1' MINUTE), (INTERVAL (-1) MINUTE), (INTERVAL '6' MINUTE), (INTERVAL (-72) MINUTE), (INTERVAL '1' SECOND), (INTERVAL (-1) SECOND), (INTERVAL '23' SECOND), (INTERVAL (-118) SECOND), (INTERVAL '1' MILLISECOND), (INTERVAL (-1) MILLISECOND), (INTERVAL '910' MILLISECOND), (INTERVAL (-150) MILLISECOND), (INTERVAL '1' MICROSECOND), (INTERVAL (-1) MICROSECOND), (INTERVAL '612' MICROSECOND), (INTERVAL (-485) MICROSECOND)) AS tbl(iv);

SELECT iv, CAST('2021-12-01 13:54:48.123456Z' AS TIMESTAMPTZ) + iv FROM intervals;

SELECT CAST('1999-12-31 16:00:00-08' AS TIMESTAMPTZ) + INTERVAL '2400' HOURS;

SELECT CAST('epoch' AS TIMESTAMPTZ) + CAST('9223372036854775000 microseconds' AS INTERVAL);

SELECT CAST('epoch' AS TIMESTAMPTZ) + CAST('9223372036854774999 microseconds' AS INTERVAL);

SELECT CAST('epoch' AS TIMESTAMPTZ) + CAST('-9223372022400001001 microseconds' AS INTERVAL);

SELECT CAST('epoch' AS TIMESTAMPTZ) + CAST('-9223372022400001000 microseconds' AS INTERVAL);

SELECT iv, iv + CAST('2021-12-01 13:54:48.123456Z' AS TIMESTAMPTZ) FROM intervals;

SELECT INTERVAL '2400' HOURS + INTERVAL '1999-12-31 16:00:00-08' :: AS timestamptz;

SELECT CAST('9223372036854775000 microseconds' AS INTERVAL) + CAST('epoch' AS TIMESTAMPTZ);

SELECT CAST('9223372036854774999 microseconds' AS INTERVAL) + CAST('epoch' AS TIMESTAMPTZ);

SELECT CAST('-9223372022400001001 microseconds' AS INTERVAL) + CAST('epoch' AS TIMESTAMPTZ);

SELECT CAST('-9223372022400001000 microseconds' AS INTERVAL) + CAST('epoch' AS TIMESTAMPTZ);

SELECT CAST('infinity' AS TIMESTAMPTZ) + CAST('1 microsecond' AS INTERVAL);

SELECT CAST('1 microsecond' AS INTERVAL) + CAST('infinity' AS TIMESTAMPTZ);

SELECT CAST('-infinity' AS TIMESTAMPTZ) + CAST('1 microsecond' AS INTERVAL);

SELECT CAST('1 microsecond' AS INTERVAL) + CAST('-infinity' AS TIMESTAMPTZ);

SELECT iv, CAST('2021-12-01 13:54:48.123456Z' AS TIMESTAMPTZ) - iv FROM intervals;

SELECT CAST('2000-04-09 17:00:00-07' AS TIMESTAMPTZ) - INTERVAL '2400' HOURS;

SELECT CAST('epoch' AS TIMESTAMPTZ) - CAST('9223372022400001001 microseconds' AS INTERVAL);

SELECT CAST('epoch' AS TIMESTAMPTZ) - CAST('9223372022400001000 microseconds' AS INTERVAL);

SELECT CAST('infinity' AS TIMESTAMPTZ) - CAST('1 day' AS INTERVAL);

SELECT CAST('-infinity' AS TIMESTAMPTZ) - CAST('1 day' AS INTERVAL);

SELECT iv, CAST('1962-07-31 12:20:48.123456Z' AS TIMESTAMPTZ) + iv FROM intervals;

CREATE TABLE limits AS SELECT ts, label FROM (VALUES (CAST('290309-12-22 (BC) 00:00:00Z' AS TIMESTAMPTZ), 'tsmin'), (CAST('294247-01-10 04:00:54.775806Z' AS TIMESTAMPTZ), 'tsmax')) AS tbl(ts, label);

SELECT iv, ts + iv FROM limits, intervals WHERE label = 'tsmin' AND iv >= INTERVAL '0' SECONDS;

SELECT ts + (INTERVAL (-1) YEAR) FROM limits WHERE label = 'tsmin';

SELECT ts + (INTERVAL (-1) MONTH) FROM limits WHERE label = 'tsmin';

SELECT ts + (INTERVAL (-15) MONTH) FROM limits WHERE label = 'tsmin';

SELECT ts + (INTERVAL (-1) DAY) FROM limits WHERE label = 'tsmin';

SELECT ts + (INTERVAL (-40) DAY) FROM limits WHERE label = 'tsmin';

SELECT ts + (INTERVAL (-1) HOUR) FROM limits WHERE label = 'tsmin';

SELECT ts + (INTERVAL (-14) HOUR) FROM limits WHERE label = 'tsmin';

SELECT ts + (INTERVAL (-1) MINUTE) FROM limits WHERE label = 'tsmin';

SELECT ts + (INTERVAL (-72) MINUTE) FROM limits WHERE label = 'tsmin';

SELECT ts + (INTERVAL (-1) SECOND) FROM limits WHERE label = 'tsmin';

SELECT ts + (INTERVAL (-118) SECOND) FROM limits WHERE label = 'tsmin';

SELECT ts + (INTERVAL (-1) MILLISECOND) FROM limits WHERE label = 'tsmin';

SELECT ts + (INTERVAL (-150) MILLISECOND) FROM limits WHERE label = 'tsmin';

SELECT ts + (INTERVAL (-1) MICROSECOND) FROM limits WHERE label = 'tsmin';

SELECT ts + (INTERVAL (-485) MICROSECOND) FROM limits WHERE label = 'tsmin';

SELECT ts + INTERVAL (-150) MILLISECOND FROM limits WHERE label = 'tsmin';

SELECT ts + INTERVAL (-485) MICROSECOND FROM limits WHERE label = 'tsmin';

SELECT iv, ts + iv FROM limits, intervals WHERE label = 'tsmax' AND iv < (INTERVAL (-1) MILLISECOND);

SELECT ts + (INTERVAL (-485) MICROSECOND) FROM limits WHERE label = 'tsmax';

SELECT ts + (INTERVAL (-1) MICROSECOND) FROM limits WHERE label = 'tsmax';

SELECT ts + (INTERVAL (-1) MILLISECOND) FROM limits WHERE label = 'tsmax';

SELECT ts + (INTERVAL '1' YEAR) FROM limits WHERE label = 'tsmax';

SELECT ts + (INTERVAL '1' MONTH) FROM limits WHERE label = 'tsmax';

SELECT ts + (INTERVAL '13' MONTH) FROM limits WHERE label = 'tsmax';

SELECT ts + (INTERVAL '1' DAY) FROM limits WHERE label = 'tsmax';

SELECT ts + (INTERVAL '32' DAY) FROM limits WHERE label = 'tsmax';

SELECT ts + (INTERVAL '1' HOUR) FROM limits WHERE label = 'tsmax';

SELECT ts + (INTERVAL '11' HOUR) FROM limits WHERE label = 'tsmax';

SELECT ts + (INTERVAL '1' MINUTE) FROM limits WHERE label = 'tsmax';

SELECT ts + (INTERVAL '6' MINUTE) FROM limits WHERE label = 'tsmax';

SELECT ts + (INTERVAL '1' SECOND) FROM limits WHERE label = 'tsmax';

SELECT ts + (INTERVAL '23' SECOND) FROM limits WHERE label = 'tsmax';

SELECT ts + (INTERVAL '1' MILLISECOND) FROM limits WHERE label = 'tsmax';

SELECT ts + (INTERVAL '910' MILLISECOND) FROM limits WHERE label = 'tsmax';

SELECT ts + (INTERVAL '1' MICROSECOND) FROM limits WHERE label = 'tsmax';

SELECT ts + (INTERVAL '612' MICROSECOND) FROM limits WHERE label = 'tsmax';

SET timezone = 'Europe/London';

CREATE TABLE london AS (SELECT * FROM (VALUES (CAST('2000-10-29 03:00:00+00' AS TIMESTAMPTZ), CAST('2000-03-26 03:00:00+01' AS TIMESTAMPTZ), CAST('2000-01-03 00:00:00+00' AS TIMESTAMPTZ))) AS tbl(dst2, dst1, origin));

SELECT origin + (dst1 - origin) FROM london;

SELECT origin + (dst2 - origin) FROM london;

SET timezone = 'Asia/Kolkata';

SELECT CAST((CAST('1920-12-12 01:02:02+05:30' AS TIMESTAMPTZ) + INTERVAL '-1 month 400 day') AS TIMESTAMPTZ) AS r;

SELECT CAST((CAST('1920-12-12 01:02:02+05:30' AS TIMESTAMPTZ) + INTERVAL '1 month -400 day') AS TIMESTAMPTZ) AS r;

SELECT CAST('Infinity' AS TIMESTAMPTZ) - CAST('Infinity' AS TIMESTAMPTZ);

SELECT CAST('Infinity' AS TIMESTAMPTZ) - CAST('-Infinity' AS TIMESTAMPTZ);

SELECT CAST('Infinity' AS TIMESTAMPTZ) - CAST('2020-01-01' AS TIMESTAMPTZ);

SET Calendar = 'gregorian';

SET TimeZone = 'America/Los_Angeles';

SET TimeZone = 'America/Los_Angeles';

SELECT DATE_DIFF('${DATEPART}', startdate, enddate) FROM datetime1;

SELECT DATE_DIFF('${DATEPART}', startdate, enddate) FROM datetime1;

SELECT DATE_DIFF('ISOYEAR', CAST('2022-01-01 00:00:00-08' AS TIMESTAMPTZ), CAST('2022-01-03 00:00:00-08' AS TIMESTAMPTZ));

SELECT DATE_DIFF('${SPECIFIER}', CAST('${lspecial}' AS TIMESTAMPTZ), CAST('${rspecial}' AS TIMESTAMPTZ));

SELECT DATE_DIFF('${SPECIFIER}', CAST('${rspecial}' AS TIMESTAMPTZ), CAST('${lspecial}' AS TIMESTAMPTZ));

SELECT DATE_DIFF('${DATEPART}', startdate, enddate) + DATE_DIFF('${DATEPART}', enddate, startdate) FROM datetime1;

SELECT DATE_DIFF('${DATEPART}', startdate, enddate) + DATE_DIFF('${DATEPART}', enddate, startdate) FROM datetime1;

SELECT *, DATE_DIFF('WEEK', lo, hi) FROM (SELECT CAST((d - INTERVAL '9' HOUR) AS TIMESTAMPTZ) AS lo, CAST((d + INTERVAL '7' HOUR) AS TIMESTAMPTZ) AS hi FROM GENERATE_SERIES(CAST('2022-09-01' AS DATE), CAST('2022-09-12' AS DATE), INTERVAL '1' DAY) AS tbl(d));

SELECT DATE_DIFF('WEEK', CAST('2015-10-06 04:22:11' AS TIMESTAMPTZ), CAST('2016-11-25 23:19:37' AS TIMESTAMPTZ));

SET timezone = 'CET';

CREATE TABLE issue9673 (starttime TIMESTAMPTZ, recordtime TIMESTAMPTZ);

INSERT INTO issue9673 VALUES ('2022-10-30 02:17:00+02', '2022-10-30 02:00:21+01');

INSERT INTO issue9673 VALUES ('2021-10-31 02:39:00+02', '2021-10-31 02:38:20+01');

SELECT starttime, recordtime, DATE_DIFF('MINUTE', starttime, recordtime) FROM issue9673;

SET default_null_order = 'nulls_first';
require AS icu;

SET Calendar = 'gregorian';

SET TimeZone = 'America/Los_Angeles';

CREATE TABLE timestamps AS SELECT * FROM (VALUES (CAST('0044-03-13 (BC) 10:33:41.987654+01' AS TIMESTAMPTZ), 'era'), (CAST('1962-07-31 12:20:48.123456+00' AS TIMESTAMPTZ), 'epoch'), (CAST('2021-01-01 00:00:00+00' AS TIMESTAMPTZ), 'year'), (CAST('2021-02-02 00:00:00+00' AS TIMESTAMPTZ), 'month'), (CAST('2021-11-26 10:15:13.123456+00' AS TIMESTAMPTZ), 'microsecond'), (CAST('2021-11-15 02:30:00-08' AS TIMESTAMPTZ), 'hour'), (CAST('2021-11-15 02:30:00-07' AS TIMESTAMPTZ), 'minute'), (CAST('2021-12-25 00:00:00+02' AS TIMESTAMPTZ), 'day'), (CAST('infinity' AS TIMESTAMPTZ), 'second'), (CAST('-infinity' AS TIMESTAMPTZ), 'decade'), (CAST(NULL AS TIMESTAMPTZ), 'century')) AS tbl(ts, part);

SELECT YEAR(ts), YEAR(CAST(ts AS TIMESTAMP)) FROM timestamps;

SELECT MONTH(ts), MONTH(CAST(ts AS TIMESTAMP)) FROM timestamps;

SELECT DAY(ts), DAY(CAST(ts AS TIMESTAMP)) FROM timestamps;

SELECT DECADE(ts), DECADE(CAST(ts AS TIMESTAMP)) FROM timestamps;

SELECT CENTURY(ts), CENTURY(CAST(ts AS TIMESTAMP)) FROM timestamps;

SELECT MILLENNIUM(ts), MILLENNIUM(CAST(ts AS TIMESTAMP)) FROM timestamps;

SELECT MICROSECOND(ts), MICROSECOND(CAST(ts AS TIMESTAMP)) FROM timestamps;

SELECT MILLISECOND(ts), MILLISECOND(CAST(ts AS TIMESTAMP)) FROM timestamps;

SELECT SECOND(ts), SECOND(CAST(ts AS TIMESTAMP)) FROM timestamps;

SELECT MINUTE(ts), MINUTE(CAST(ts AS TIMESTAMP)) FROM timestamps;

SELECT HOUR(ts), HOUR(CAST(ts AS TIMESTAMP)) FROM timestamps;

SELECT DAYOFWEEK(ts), DAYOFWEEK(CAST(ts AS TIMESTAMP)) FROM timestamps;

SELECT ISODOW(ts), ISODOW(CAST(ts AS TIMESTAMP)) FROM timestamps;

SELECT DATE_PART('isodow', ts), DATE_PART('isodow', CAST(ts AS TIMESTAMP)) FROM RANGE(CAST('1992-01-06' AS TIMESTAMPTZ), CAST('1992-01-13' AS TIMESTAMPTZ), INTERVAL '1' DAY) AS t(ts);

SELECT DATE_PART('dow', ts), DATE_PART('dow', CAST(ts AS TIMESTAMP)) FROM RANGE(CAST('1992-01-05' AS TIMESTAMPTZ), CAST('1992-01-12' AS TIMESTAMPTZ), INTERVAL '1' DAY) AS t(ts);

SELECT WEEK(ts), WEEK(CAST(ts AS TIMESTAMP)) FROM timestamps;

SELECT DAYOFYEAR(ts), DAYOFYEAR(CAST(ts AS TIMESTAMP)) FROM timestamps;

SELECT QUARTER(ts), QUARTER(CAST(ts AS TIMESTAMP)) FROM timestamps;

SELECT YEARWEEK(ts), YEARWEEK(CAST(ts AS TIMESTAMP)) FROM timestamps;

SELECT ISOYEAR(ts), ISOYEAR(CAST(ts AS TIMESTAMP)) FROM timestamps;

SELECT EPOCH(ts), EPOCH(CAST(ts AS TIMESTAMP)) FROM timestamps;

SELECT DATE_PART(part, ts), DATE_PART(part, CAST(ts AS TIMESTAMP)), part FROM timestamps WHERE NOT part IN ('epoch', 'julian');

SELECT ERA(ts) FROM timestamps;

SELECT DATE_PART('era', ts) FROM timestamps;

SELECT DATE_PART('julian', CAST('0044-03-15 (BC) 12:00:00' AS TIMESTAMPTZ));

SELECT JULIAN(ts) FROM timestamps;

SELECT DATE_PART('julian', ts) FROM timestamps;

SELECT DATE_PART('timezone', ts) FROM timestamps;

SELECT DATE_PART('timezone_hour', ts) FROM timestamps;

SELECT DATE_PART('timezone_minute', ts) FROM timestamps;

SELECT DATE_PART('timezone', CAST('2021-07-31 00:00:00-07' AS TIMESTAMPTZ));

SELECT DATE_PART('timezone_hour', CAST('2021-07-31 00:00:00-07' AS TIMESTAMPTZ));

SELECT DATE_PART('timezone_minute', CAST('2021-07-31 00:00:00-07' AS TIMESTAMPTZ));

SELECT MAX(EXTRACT(YEAR FROM ts)), MAX(EXTRACT(MONTH FROM ts)), MAX(EXTRACT(DAY FROM ts)), MAX(EXTRACT(DECADE FROM ts)), MAX(EXTRACT(CENTURY FROM ts)) FROM timestamps;

SELECT DAYOFMONTH(ts), DAYOFMONTH(CAST(ts AS TIMESTAMP)) FROM timestamps;

SELECT WEEKDAY(ts), WEEKDAY(CAST(ts AS TIMESTAMP)) FROM timestamps;

SELECT WEEKOFYEAR(ts), WEEKOFYEAR(CAST(ts AS TIMESTAMP)) FROM timestamps;

SELECT WEEKOFYEAR(ts), WEEKOFYEAR(CAST(ts AS TIMESTAMP)) FROM timestamps;

SELECT ts, DATE_PART('${partcode}', ts) AS pc, DATE_PART(['${partcode}'], ts) AS st FROM timestamps WHERE pc IS DISTINCT FROM st['${partcode}'];

SELECT DATE_PART(['era', 'year', 'month', 'day', 'julian'], ts), ts FROM timestamps ORDER BY 2;

SELECT DATE_PART(['hour', 'minute', 'microsecond'], ts), ts FROM timestamps ORDER BY 2;

SELECT DATE_PART(['millennium', 'century', 'decade', 'quarter'], ts), ts FROM timestamps ORDER BY 2;

SELECT DATE_PART(['weekday', 'isodow', 'doy'], ts), ts FROM timestamps ORDER BY 2;

SELECT DATE_PART(['isoyear', 'week', 'yearweek'], ts), ts FROM timestamps ORDER BY 2;

SELECT DATE_PART(['epoch', 'second', 'timezone', 'timezone_hour', 'timezone_minute'], ts), ts FROM timestamps ORDER BY 2;

SELECT ts, DATE_PART('${partcode}', ts) AS p, DATE_PART(['${partcode}'], ts) AS s FROM timestamps WHERE p IS DISTINCT FROM s['${partcode}'];

SELECT ts, DATE_PART(['year', 'month', 'day'], ts) AS parts FROM timestamps WHERE part = 'day' ORDER BY 1;

SELECT DATE_PART(['duck', 'minute', 'microsecond', 'timezone'], ts), ts FROM timestamps ORDER BY 2;

SELECT DATE_PART(['era', 'year', 'month', 'era'], ts), ts FROM timestamps ORDER BY 2;

SELECT DATE_PART([], ts) FROM timestamps;

SELECT DATE_PART(['year', NULL, 'month'], ts) FROM timestamps;

WITH parts(p) AS (SELECT * FROM (VALUES (['year', 'month', 'day']), (['hour', 'minute', 'microsecond'])) AS _values) SELECT DATE_PART(p, ts) FROM parts, timestamps;

CREATE TABLE februaries AS SELECT CAST(ts AS TIMESTAMPTZ) AS ts FROM (VALUES ('1900-02-12'), ('1992-02-12'), ('2000-02-12')) AS tbl(ts);

SELECT ts, LAST_DAY(ts), LAST_DAY(CAST(ts AS TIMESTAMP)) FROM februaries;

SELECT ts, LAST_DAY(ts), LAST_DAY(CAST(ts AS TIMESTAMP)) FROM timestamps;

SELECT DAYNAME(ts), MONTHNAME(ts) FROM timestamps;

SET TimeZone = 'Asia/Kathmandu';

SELECT DATE_PART(['timezone', 'timezone_hour', 'timezone_minute'], CAST('2021-12-22' AS TIMESTAMPTZ));

SET TimeZone = 'Canada/Newfoundland';

SELECT DATE_PART(['timezone', 'timezone_hour', 'timezone_minute'], CAST('2021-12-22' AS TIMESTAMPTZ));

SET Calendar = 'hebrew';

SELECT YEAR(ts), MONTH(ts), MONTHNAME(ts) FROM RANGE(CAST('5872-01-01' AS TIMESTAMPTZ), CAST('5873-01-01' AS TIMESTAMPTZ), INTERVAL '1' DAY) AS tbl(ts) GROUP BY ALL ORDER BY ALL;

SET Calendar = 'gregorian';

SET TimeZone = 'America/Los_Angeles';

SELECT DATESUB('month', CAST('2004-01-31 12:00:00-08' AS TIMESTAMPTZ), CAST('2004-02-29 13:00:00-08' AS TIMESTAMPTZ));

SELECT DATESUB('month', CAST('2004-01-29 12:00:00-08' AS TIMESTAMPTZ), CAST('2004-02-29 13:00:00-08' AS TIMESTAMPTZ));

SELECT DATESUB('month', CAST('2004-02-29 12:00:00-08' AS TIMESTAMPTZ), CAST('2004-03-31 13:00:00-08' AS TIMESTAMPTZ));

SELECT DATESUB('month', CAST('2004-02-29 13:00:00-08' AS TIMESTAMPTZ), CAST('2004-03-31 12:00:00-08' AS TIMESTAMPTZ));

SELECT DATESUB('quarter', CAST('2004-01-31 12:00:00-07' AS TIMESTAMPTZ), CAST('2004-04-30 13:00:00-07' AS TIMESTAMPTZ));

SELECT DATESUB('year', CAST('2004-02-29 12:00:00-08' AS TIMESTAMPTZ), CAST('2005-02-28 13:00:00-08' AS TIMESTAMPTZ));

SELECT DATESUB('isoyear', CAST('2004-02-29 12:00:00-08' AS TIMESTAMPTZ), CAST('2005-02-28 13:00:00-08' AS TIMESTAMPTZ));

SELECT DATESUB('decade', CAST('1994-02-28 12:00:00-08' AS TIMESTAMPTZ), CAST('2004-02-29 13:00:00-08' AS TIMESTAMPTZ));

SELECT DATESUB('century', CAST('1904-02-29 12:00:00-08' AS TIMESTAMPTZ), CAST('2005-02-28 13:00:00-08' AS TIMESTAMPTZ));

SELECT DATESUB('month', CAST('2004-01-31 13:00:00-08' AS TIMESTAMPTZ), CAST('2004-02-29 12:00:00-08' AS TIMESTAMPTZ));

SELECT DATESUB('month', CAST('2004-01-29 13:00:00-08' AS TIMESTAMPTZ), CAST('2004-02-29 12:00:00-08' AS TIMESTAMPTZ));

SELECT DATESUB('quarter', CAST('2004-01-31 13:00:00-08' AS TIMESTAMPTZ), CAST('2004-04-30 12:00:00-07' AS TIMESTAMPTZ));

SELECT DATESUB('year', CAST('2004-02-29 13:00:00-08' AS TIMESTAMPTZ), CAST('2005-02-28 12:00:00-08' AS TIMESTAMPTZ));

SELECT DATESUB('isoyear', CAST('2004-02-29 13:00:00-08' AS TIMESTAMPTZ), CAST('2005-02-28 12:00:00-08' AS TIMESTAMPTZ));

SELECT DATESUB('decade', CAST('1992-02-29 13:00:00-08' AS TIMESTAMPTZ), CAST('2002-02-28 12:00:00-08' AS TIMESTAMPTZ));

SELECT DATESUB('century', CAST('1904-02-29 13:00:00-08' AS TIMESTAMPTZ), CAST('2004-02-28 12:00:00-08' AS TIMESTAMPTZ));

SELECT DATESUB('millennium', CAST('1004-02-29 11:00:00-08' AS TIMESTAMPTZ), CAST('2004-02-29 11:00:00-08' AS TIMESTAMPTZ));

SELECT DATESUB('${datepart}', CAST('2004-01-31 12:00:00-08' AS TIMESTAMPTZ), CAST('2004-02-29 13:00:00-08' AS TIMESTAMPTZ));

SELECT DATESUB('${datepart}', CAST('2004-01-31 13:00:00-08' AS TIMESTAMPTZ), CAST('2004-02-29 12:00:00-08' AS TIMESTAMPTZ));

SELECT DATESUB('${datepart}', CAST('2004-01-31 12:00:00-08' AS TIMESTAMPTZ), CAST('2004-02-28 13:00:00-08' AS TIMESTAMPTZ));

SELECT DATESUB('${datepart}', CAST('2004-01-31 13:00:00-08' AS TIMESTAMPTZ), CAST('2004-02-28 12:00:00-08' AS TIMESTAMPTZ));

SELECT DATESUB('hour', CAST('2004-01-31 12:00:00-08' AS TIMESTAMPTZ), CAST('2004-02-01 13:05:00-08' AS TIMESTAMPTZ));

SELECT DATESUB('hour', CAST('2004-01-31 12:00:00-08' AS TIMESTAMPTZ), CAST('2004-02-01 12:00:00-08' AS TIMESTAMPTZ));

SELECT DATESUB('hour', CAST('2004-01-31 13:00:00-08' AS TIMESTAMPTZ), CAST('2004-02-01 12:05:00-08' AS TIMESTAMPTZ));

SELECT DATESUB('minute', CAST('2004-01-31 12:00:00-08' AS TIMESTAMPTZ), CAST('2004-02-01 13:05:00-08' AS TIMESTAMPTZ));

SELECT DATESUB('minute', CAST('2004-01-31 12:00:00-08' AS TIMESTAMPTZ), CAST('2004-02-01 12:00:00-08' AS TIMESTAMPTZ));

SELECT DATESUB('minute', CAST('2004-01-31 13:00:00-08' AS TIMESTAMPTZ), CAST('2004-02-01 12:05:00-08' AS TIMESTAMPTZ));

SELECT DATESUB('second', CAST('2004-01-31 12:00:00-08' AS TIMESTAMPTZ), CAST('2004-02-01 12:00:05-08' AS TIMESTAMPTZ));

SELECT DATESUB('second', CAST('2004-01-31 12:00:00-08' AS TIMESTAMPTZ), CAST('2004-02-01 12:00:00-08' AS TIMESTAMPTZ));

SELECT DATESUB('second', CAST('2004-01-31 12:00:05-08' AS TIMESTAMPTZ), CAST('2004-02-01 12:00:00-08' AS TIMESTAMPTZ));

SELECT DATESUB('millisecond', CAST('2004-01-31 12:00:00-08' AS TIMESTAMPTZ), CAST('2004-02-01 12:00:00.050-08' AS TIMESTAMPTZ));

SELECT DATESUB('millisecond', CAST('2004-01-31 12:00:00-08' AS TIMESTAMPTZ), CAST('2004-02-01 12:00:00-08' AS TIMESTAMPTZ));

SELECT DATESUB('millisecond', CAST('2004-01-31 12:00:00.050-08' AS TIMESTAMPTZ), CAST('2004-02-01 12:00:00-08' AS TIMESTAMPTZ));

SELECT DATESUB('microsecond', CAST('2004-01-31 12:00:00-08' AS TIMESTAMPTZ), CAST('2004-02-01 12:00:00.000050-08' AS TIMESTAMPTZ));

SELECT DATESUB('microsecond', CAST('2004-01-31 12:00:00-08' AS TIMESTAMPTZ), CAST('2004-02-01 12:00:00-08' AS TIMESTAMPTZ));

SELECT DATESUB('microsecond', CAST('2004-01-31 12:00:00.000050-08' AS TIMESTAMPTZ), CAST('2004-02-01 12:00:00-08' AS TIMESTAMPTZ));

SELECT DATESUB('${specifier}', CAST('${lspecial}' AS TIMESTAMPTZ), CAST('${rspecial}' AS TIMESTAMPTZ));

SELECT DATESUB('${specifier}', CAST('${rspecial}' AS TIMESTAMPTZ), CAST('${lspecial}' AS TIMESTAMPTZ));

CREATE TABLE datetime1 AS SELECT CAST('2004-01-31 12:00:00-08' AS TIMESTAMPTZ) AS startdate, CAST('2004-02-29 13:05:00-08' AS TIMESTAMPTZ) AS enddate;

CREATE TABLE dateparts AS SELECT datepart FROM (VALUES ('year'), ('quarter'), ('month'), ('day'), ('dayofyear'), ('hour'), ('minute'), ('second'), ('millisecond'), ('microsecond'), ('decade'), ('century'), ('millennium'), ('week'), ('yearweek'), ('isoyear')) AS tbl(datepart);

SELECT DATESUB(datepart, startdate, enddate) + DATESUB(datepart, enddate, startdate), datepart FROM datetime1, dateparts;

SELECT DATESUB(datepart, startdate, enddate) + DATESUB(datepart, enddate, startdate), datepart FROM datetime1, dateparts;

SET Calendar = 'gregorian';

SET TimeZone = 'America/Los_Angeles';

CREATE TABLE timestamps (d TIMESTAMPTZ, s TEXT);

INSERT INTO timestamps VALUES ('-infinity', 'year'), ('1992-02-02 02:02:03.123456-08', 'millennium'), ('1992-02-02 02:02:03.123456-08', 'century'), ('1992-02-02 02:02:03.123456-08', 'decade'), ('1992-02-02 02:02:03.123456-08', 'year'), ('1992-02-02 02:02:03.123456-08', 'quarter'), ('1992-02-02 02:02:03.123456-08', 'month'), ('1992-02-02 02:02:03.123456-08', 'week'), ('1992-02-02 02:02:03.123456-08', 'day'), ('1992-02-02 02:02:03.123456-08', 'hour'), ('1992-02-02 02:02:03.123456-08', 'minute'), ('1992-02-02 02:02:03.123456-08', 'second'), ('1992-02-02 02:02:03.123456-08', 'milliseconds'), ('1992-02-02 02:02:03.123456-08', 'microseconds'), ('infinity', 'month');

SELECT DATE_TRUNC('NULL', CAST(NULL AS TIMESTAMPTZ)) FROM timestamps LIMIT 3;

SELECT DATE_TRUNC('S', CAST(NULL AS TIMESTAMPTZ)) FROM timestamps LIMIT 3;

SELECT DATE_TRUNC('NULL', d) FROM timestamps LIMIT 3;

SELECT DATE_TRUNC('MINUTE', CAST('1992-02-02 04:03:02Z' AS TIMESTAMPTZ)) FROM timestamps LIMIT 1;

SELECT DATE_TRUNC('S', d), s FROM timestamps;

SELECT DATE_TRUNC('S', d), s FROM timestamps;

SELECT DATE_TRUNC('WEEK', CAST('2019-01-06 04:03:02-08' AS TIMESTAMPTZ)) FROM timestamps LIMIT 1;

SELECT DATE_TRUNC('YEARWEEK', CAST('2019-01-06 04:03:02-08' AS TIMESTAMPTZ)) FROM timestamps LIMIT 1;

SELECT DATE_TRUNC('WEEK', CAST('2020-01-01 04:03:02-08' AS TIMESTAMPTZ)) FROM timestamps LIMIT 1;

SELECT DATE_TRUNC('YEARWEEK', CAST('2020-01-01 04:03:02-08' AS TIMESTAMPTZ)) FROM timestamps LIMIT 1;

SELECT DATE_TRUNC('QUARTER', CAST('2020-12-02 04:03:02-08' AS TIMESTAMPTZ)) FROM timestamps LIMIT 1;

SELECT DATE_TRUNC('QUARTER', CAST('2019-01-06 04:03:02-08' AS TIMESTAMPTZ)) FROM timestamps LIMIT 1;

SELECT DATE_TRUNC('MILLENNIUM', CAST('1996-01-06 04:03:02-08' AS TIMESTAMPTZ)) FROM timestamps LIMIT 1;

SELECT DATE_TRUNC('CENTURY', CAST('2019-01-06 04:03:02-08' AS TIMESTAMPTZ)) FROM timestamps LIMIT 1;

SELECT DATE_TRUNC('DECADE', CAST('2019-01-06 04:03:02-08' AS TIMESTAMPTZ)) FROM timestamps LIMIT 1;

SELECT DATE_TRUNC('YEAR', CAST('2019-01-06 04:03:02-08' AS TIMESTAMPTZ)) FROM timestamps LIMIT 1;

SELECT DATE_TRUNC('DAY', CAST('2019-01-06 04:03:02-08' AS TIMESTAMPTZ)) FROM timestamps LIMIT 1;

SELECT DATE_TRUNC('HOUR', CAST('2019-01-06 04:03:02-08' AS TIMESTAMPTZ)) FROM timestamps LIMIT 1;

SELECT DATE_TRUNC('MILLISECONDS', CAST('2019-01-06 04:03:02.123456-08' AS TIMESTAMPTZ)) FROM timestamps LIMIT 1;

SELECT DATE_TRUNC('MICROSECONDS', CAST('2019-01-06 04:03:02.123456-08' AS TIMESTAMPTZ));

SELECT DATE_TRUNC('EPOCH', CAST('2019-01-06 04:03:02.5-08' AS TIMESTAMPTZ)) FROM timestamps LIMIT 1;

SELECT d, DATE_TRUNC('${DAYPART}', d) FROM (SELECT DISTINCT d FROM timestamps) AS tbl(d);

SELECT ts, DATE_TRUNC('ISOYEAR', CAST(ts AS TIMESTAMPTZ)) FROM GENERATE_SERIES(CAST('2000-01-01 00:00:00-08' AS TIMESTAMP), CAST('2023-01-01 00:00:00-08' AS TIMESTAMP), INTERVAL '1' YEAR) AS tbl(ts);

SELECT DATE_TRUNC('DUCK', CAST('2019-01-06 04:03:02-08' AS TIMESTAMPTZ)) FROM timestamps LIMIT 1;

SET timezone = 'CET';

SELECT DATE_TRUNC('MINUTE', CAST('2022-10-30 02:17:00+02' AS TIMESTAMPTZ));

set time zone 'UTC';

SELECT DATE_TRUNC('DAY', CAST('2024-05-06 16:09:28+05:00' AS TIMESTAMPTZ)) >= CAST('2024-05-06 17:19:18+05:20' AS DATE) AS r;

PRAGMA enable_verification;

SET Calendar = 'gregorian';

SET TimeZone = 'America/Los_Angeles';

CREATE TABLE timestamps (ts TIMESTAMPTZ);

INSERT INTO timestamps VALUES ('1001-03-15 (BC) 20:38:40+00'), ('0044-03-15 (BC) 20:38:40+00'), ('1962-07-31 12:20:48.123456+00'), ('1969-01-01 01:03:20.45432+00'), ('1992-01-01 01:01:01.400+00'), ('1992-01-01 01:01:02.200+00'), ('1992-01-01 01:01:02.400+00'), ('1993-08-14 08:22:33+00'), ('1993-08-14 08:22:33.42+00'), ('2001-04-20 14:42:11.0+00'), ('2001-04-20 14:42:11.123+00'), ('2004-01-31 12:00:00.000050+00'), ('2004-01-31 12:00:00.050+00'), ('2004-02-01 12:00:00.000050+00'), ('2004-02-01 12:00:00.050+00'), ('2004-02-29 13:05:47.123456+00'), ('2008-01-01 00:00:01.5+00'), ('2008-01-01 00:00:01.594+00'), ('2008-01-01 00:00:01.794+00'), ('2008-01-01 00:00:01.88926+00'), ('2008-01-01 00:00:01.894+00'), ('2008-01-01 00:00:01.98926+00'), ('2008-01-01 00:00:01.99926+00'), ('2008-01-01 00:00:11.1+00'), ('2019-01-06 04:03:02.123456+00'), ('2019-01-06 04:03:02.5+00'), ('2020-01-01 00:00:01.88926+00'), ('2020-12-31 21:25:58.745232+00'), ('2021-04-15 14:55:17.915+00'), ('2021-04-15 14:55:17.915000+00'), ('2021-05-02 12:11:49.5+00'), ('2021-12-01 13:54:48.123456+00'), (NULL);

SELECT ERA(ts), YEAR(ts), ts FROM timestamps;

CREATE MACRO yeartz(ts) AS year(ts::TIMESTAMPTZ) * (CASE WHEN ERA(ts::TIMESTAMPTZ) > 0 THEN 1 ELSE -1 END);

SELECT ts, mts FROM (SELECT ts, MAKE_TIMESTAMPTZ(YEARTZ(ts), MONTH(ts), DAY(ts), HOUR(ts), MINUTE(ts), MICROSECOND(ts) / 1000000.0) AS mts FROM timestamps) AS t WHERE mts IS DISTINCT FROM ts ORDER BY 1;

SELECT ts, mts FROM (SELECT ts, MAKE_TIMESTAMPTZ(YEARTZ(ts), NULL, DAY(ts), HOUR(ts), MINUTE(ts), MICROSECOND(ts) / 1000000.0) AS mts FROM timestamps) AS t WHERE NOT mts IS NULL;

SELECT MAKE_TIMESTAMPTZ(2021, 13, 1, 0, 0, 0) AS mts;

SELECT MAKE_TIMESTAMPTZ(2021, -1, 1, 0, 0, 0) AS mts;

SELECT MAKE_TIMESTAMPTZ(0), MAKE_TIMESTAMPTZ(1684509234845000);

SELECT MAKE_TIMESTAMPTZ(2021, 12, 30, 10, 12, 4.123, 'America/New_York');

SELECT MAKE_TIMESTAMPTZ(NULL, 12, 30, 10, 12, 4.123, 'America/New_York');

SELECT MAKE_TIMESTAMPTZ(2021, NULL, 30, 10, 12, 4.123, 'America/New_York');

SELECT MAKE_TIMESTAMPTZ(2021, 12, NULL, 10, 12, 4.123, 'America/New_York');

SELECT MAKE_TIMESTAMPTZ(2021, 12, 30, NULL, 12, 4.123, 'America/New_York');

SELECT MAKE_TIMESTAMPTZ(2021, 12, 30, 10, NULL, 4.123, 'America/New_York');

SELECT MAKE_TIMESTAMPTZ(2021, 12, 30, 10, 12, NULL, 'America/New_York');

SELECT MAKE_TIMESTAMPTZ(2021, 12, 30, 10, 12, 4.123, NULL);

CREATE TABLE timezones AS (SELECT mm, tz FROM (VALUES (1, 'America/New_York'), (2, 'America/Los_Angeles'), (3, 'Europe/Rome'), (4, 'Asia/Kathmandu'), (5, 'Canada/Newfoundland'), (7, 'Pacific/Auckland'), (8, 'Asia/Hong_Kong'), (12, 'US/Hawaii')) AS tbl(mm, tz));

CREATE TABLE timeparts AS (SELECT ts, YEARTZ(ts) AS yyyy, MONTH(ts) AS mm, DAY(ts) AS dd, HOUR(ts) AS hr, MINUTE(ts) AS mn, MICROSECOND(ts) / 1000000.0 AS ss, tz FROM timestamps AS t LEFT JOIN timezones AS z ON (MONTH(t.ts) = z.mm));

SELECT * FROM timeparts;

SELECT ts, MAKE_TIMESTAMPTZ(yyyy, mm, dd, hr, mn, ss, 'America/New_York'), MAKE_TIMESTAMPTZ(yyyy, mm, dd, hr, mn, ss) FROM timeparts;

SELECT ts, MAKE_TIMESTAMPTZ(yyyy, NULL, dd, hr, mn, ss, tz) AS mts FROM timeparts WHERE NOT mts IS NULL;

SELECT ts, MAKE_TIMESTAMPTZ(yyyy, mm, dd, hr, mn, ss, NULL) AS mts FROM timeparts WHERE NOT mts IS NULL;

SELECT tz, ts, MAKE_TIMESTAMPTZ(yyyy, mm, dd, hr, mn, ss, tz) FROM timeparts;

SELECT ts, MAKE_TIMESTAMPTZ(yyyy, mm, dd, hr, mn, ss, 'Europe/Duck') AS mts FROM timeparts;

SELECT ts, CAST(ts AS DATE) FROM timeparts;

WITH all_types AS (SELECT * EXCLUDE (small_enum, medium_enum, large_enum) FROM TEST_ALL_TYPES()) SELECT MAKE_TIMESTAMPTZ(CAST(CENTURY(CAST(a."interval" AS INTERVAL)) AS BIGINT), CAST(a."bigint" AS BIGINT), CAST(a."bigint" AS BIGINT), CAST(a."bigint" AS BIGINT), CAST(a."bigint" AS BIGINT), CAST(TXID_CURRENT() AS BIGINT), 'UTC') FROM all_types AS a;

SELECT MAKE_TIMESTAMPTZ(9223372036854775807);
/* Infinity */;

SELECT MAKE_TIMESTAMPTZ(294248, 1, 10, 4, 0, 54.775807);

SET Calendar = 'gregorian';

SET TimeZone = 'America/Los_Angeles';

PRAGMA enable_verification;

CREATE TABLE timestamps AS SELECT CAST(ts AS TIMESTAMPTZ) AS ts FROM (VALUES ('-infinity'), ('0044-03-13 (BC) 10:33:41.987654+01'), ('1962-07-31 12:20:48.123456+00'), ('epoch'), ('2021-01-01 00:00:00+00'), ('2021-02-02 00:00:00+00'), ('2021-11-26 10:15:13.123456+00'), ('2021-11-15 02:30:00-08'), ('2021-11-15 02:30:00-07'), ('2021-12-25 00:00:00+02'), ('infinity'), (NULL)) AS tbl(ts);

SELECT CAST(ts AS TEXT) FROM timestamps;

SELECT ts, STRFTIME(ts, '%Y-%m-%d %H:%M:%S.%f %Z') FROM timestamps;

SELECT ts, STRFTIME(ts, '%Z %Y-%m-%d %H:%M:%S.%f') FROM timestamps;

CREATE TABLE formats (f TEXT);

INSERT INTO formats VALUES ('%Y-%m-%d %H:%M:%S.%f %Z'), ('%Y-%m-%d %H:%M:%S.%f'), ('%Y'), ('(%Y)'), ('%% %Y %%'), ('%%%%%% %Y %%%%%%'), ('%d/%m/%Y'), ('%Y %Y %Y %Y'), ('%d/%m/%Y'), ('hello world'), ('%g'), ('%a'), ('%A'), ('%w'), ('%d'), ('%-d'), ('%b'), ('%h'), ('%B'), ('%m'), ('%-m'), ('%y'), ('%-y'), ('%-y'), ('%Y'), ('%H'), ('%-H'), ('%I'), ('%-I'), ('%p'), ('%M'), ('%-M'), ('%S'), ('%-S'), ('%f'), ('%z'), ('%Z'), ('%j'), ('%-j'), ('%U'), ('%W'), ('%c'), ('XX%cXX'), ('%x'), ('%X'), ('XX%cXX%xXX%XXX'), ('%Y'), ('%Y'), ('%y'), ('%y'), ('%V'), ('%G'), ('%u'), (NULL);

SELECT STRFTIME(CAST('2022-04-07 18:12:15.123456+00' AS TIMESTAMPTZ), f) FROM formats;

SET TimeZone = 'Asia/Kathmandu';

SELECT ts, STRFTIME(ts, '%Y-%m-%d %H:%M:%S.%f %Z') FROM timestamps;

SELECT ts, STRFTIME(ts, '%Y-%m-%d %H:%M:%S.%f %z') FROM timestamps;

SET TimeZone = 'Canada/Newfoundland';

SELECT ts, STRFTIME(ts, '%Y-%m-%d %H:%M:%S.%f %Z') FROM timestamps;

SELECT ts, STRFTIME(ts, '%Y-%m-%d %H:%M:%S.%f %z') FROM timestamps;

SELECT ts, STRFTIME(ts, '%C') FROM timestamps;

PRAGMA TIMEZONE = 'Asia/Baghdad';
SELECT STRFTIME(CAST('-268535-1-1 0:0:0 America/Pangnirtung' AS TIMESTAMPTZ), '%Z');

PRAGMA TIMEZONE = 'Asia/Baghdad';
SELECT STRFTIME(CAST('-268535-1-1 0:0:0 America/Pangnirtung' AS TIMESTAMPTZ), '%Z');

PRAGMA TIMEZONE = 'Pacific/Truk';
SELECT STRFTIME(CAST('-217208-11-5 1:47:22 America/Merida' AS TIMESTAMPTZ), '%Z');

SELECT STRFTIME(CAST('-204873-8-9 6:35:55 America/North_Dakota/Beulah' AS TIMESTAMPTZ), 'x%Z');

SET Calendar = 'gregorian';

SET TimeZone = 'America/Los_Angeles';

PRAGMA enable_verification;

SELECT STRPTIME('2022-03-05 17:59:17.877 CST', '%Y-%m-%d %H:%M:%S.%g %Z');

SELECT STRPTIME('2022-03-05 17:59:17.877 CST', NULL);

SELECT STRPTIME(NULL, '%Y-%m-%d %H:%M:%S.%g %Z');

SELECT STRPTIME('2022-03-05 17:59:17.123456 CST', '%Y-%m-%d %H:%M:%S.%f %Z');

SELECT STRPTIME('2022-03-05 17:59:17.123456789 CST', '%Y-%m-%d %H:%M:%S.%n %Z');

SELECT STRPTIME('2022-03-05 17:59:17.123456789 CST', '%Y-%m-%d %H:%M:%S.%n %Z');

SELECT STRPTIME('2022-03-05 17:59:17.123456789 CST', '%Y-%m-%d %H:%M:%S.%n %Z');

SELECT STRPTIME('2022-03-05 17:59:17.123456789 CST', '%Y-%m-%d %H:%M:%S.%n %Z');

SELECT CAST('1582-01-01 10:33:41+01' AS TIMESTAMPTZ);

SELECT CAST('1582-06-01 10:40:43+01' AS TIMESTAMPTZ);

SELECT CAST('0044-03-13 (BC) 10:33:41+01' AS TIMESTAMPTZ);

SELECT CAST('1582-10-10' AS TIMESTAMPTZ) AS ts;

CREATE TABLE zones AS (SELECT * FROM (VALUES ('Etc/GMT-14'), ('NZ-CHAT'), ('Pacific/Auckland'), ('Pacific/Enderbury'), ('Australia/LHI'), ('Australia/Melbourne'), ('Pacific/Efate'), ('Australia/Darwin'), ('Asia/Tokyo'), ('Australia/Eucla'), ('Asia/Shanghai'), ('Asia/Novosibirsk'), ('Asia/Yangon'), ('Asia/Omsk'), ('Asia/Kathmandu'), ('Asia/Colombo'), ('Asia/Oral'), ('Asia/Kabul'), ('Europe/Astrakhan'), ('Asia/Tehran'), ('Asia/Kuwait'), ('Asia/Nicosia'), ('Europe/Budapest'), ('Etc/GMT-0'), ('Atlantic/Azores'), ('America/Cayenne'), ('America/Nuuk'), ('CNT'), ('America/Martinique'), ('America/Louisville'), ('America/Rainy_River'), ('America/Shiprock'), ('Mexico/BajaNorte'), ('America/Sitka'), ('Pacific/Marquesas'), ('Pacific/Johnston'), ('Pacific/Niue'), ('Etc/GMT+12')) AS tbl(tz_name));

CREATE TABLE abbrevs AS (SELECT * FROM (VALUES ('Etc/GMT-14'), ('NZ-CHAT'), ('NZ'), ('Pacific/Enderbury'), ('Australia/Hobart'), ('Australia/LHI'), ('Pacific/Efate'), ('Australia/Adelaide'), ('Etc/GMT-9'), ('Australia/Eucla'), ('CTT'), ('Asia/Phnom_Penh'), ('Asia/Yangon'), ('Asia/Thimbu'), ('Asia/Kathmandu'), ('IST'), ('Asia/Qyzylorda'), ('Asia/Kabul'), ('Europe/Samara'), ('Iran'), ('EAT'), ('CAT'), ('Europe/Bratislava'), ('GMT'), ('Atlantic/Azores'), ('America/Cayenne'), ('America/Nuuk'), ('CNT'), ('PRT'), ('America/Panama'), ('America/Rankin_Inlet'), ('Canada/Yukon'), ('PST'), ('America/Nome'), ('Pacific/Marquesas'), ('Pacific/Johnston'), ('Pacific/Niue'), ('Etc/GMT+12')) AS tbl(tz_name));

CREATE TABLE abbrevs AS (SELECT * FROM (VALUES ('Etc/GMT-14'), ('NZ-CHAT'), ('NZ'), ('Pacific/Enderbury'), ('Australia/Hobart'), ('Australia/LHI'), ('Pacific/Efate'), ('Australia/Adelaide'), ('Etc/GMT-9'), ('Australia/Eucla'), ('CTT'), ('Asia/Phnom_Penh'), ('Asia/Yangon'), ('Asia/Thimbu'), ('Asia/Kathmandu'), ('IST'), ('Asia/Qyzylorda'), ('Asia/Kabul'), ('Europe/Samara'), ('Iran'), ('EAT'), ('CAT'), ('Europe/Bratislava'), ('GMT'), ('Atlantic/Azores'), ('America/Cayenne'), ('America/Nuuk'), ('CNT'), ('PRT'), ('America/Panama'), ('America/Rankin_Inlet'), ('Canada/Yukon'), ('PST'), ('America/Nome'), ('Pacific/Marquesas'), ('Pacific/Johnston'), ('Pacific/Niue'), ('Etc/GMT+12')) AS tbl(tz_name));

CREATE TABLE abbrevs AS (SELECT * FROM (VALUES ('Etc/GMT-14'), ('NZ-CHAT'), ('NZ'), ('Pacific/Enderbury'), ('Australia/Hobart'), ('Australia/LHI'), ('Pacific/Efate'), ('Australia/Adelaide'), ('Etc/GMT-9'), ('Australia/Eucla'), ('CTT'), ('Asia/Phnom_Penh'), ('Asia/Yangon'), ('Asia/Thimbu'), ('Asia/Kathmandu'), ('IST'), ('Asia/Qyzylorda'), ('Asia/Kabul'), ('Europe/Samara'), ('Iran'), ('EAT'), ('CAT'), ('Europe/Bratislava'), ('GMT'), ('Atlantic/Azores'), ('America/Cayenne'), ('America/Nuuk'), ('CNT'), ('PRT'), ('America/Panama'), ('America/Rankin_Inlet'), ('Canada/Yukon'), ('PST'), ('America/Nome'), ('Pacific/Marquesas'), ('Pacific/Johnston'), ('Pacific/Niue'), ('Etc/GMT+12')) AS tbl(tz_name));

CREATE TABLE abbrevs AS (SELECT * FROM (VALUES ('Etc/GMT-14'), ('NZ-CHAT'), ('NZ'), ('Pacific/Enderbury'), ('Australia/Hobart'), ('Australia/LHI'), ('Pacific/Efate'), ('Australia/Adelaide'), ('Etc/GMT-9'), ('Australia/Eucla'), ('CTT'), ('Asia/Phnom_Penh'), ('Asia/Yangon'), ('Asia/Thimbu'), ('Asia/Kathmandu'), ('IST'), ('Asia/Qyzylorda'), ('Asia/Kabul'), ('Europe/Samara'), ('Iran'), ('EAT'), ('CAT'), ('Europe/Bratislava'), ('GMT'), ('Atlantic/Azores'), ('America/Cayenne'), ('America/Nuuk'), ('CNT'), ('PRT'), ('America/Panama'), ('America/Rankin_Inlet'), ('Canada/Yukon'), ('PST'), ('America/Nome'), ('Pacific/Marquesas'), ('Pacific/Johnston'), ('Pacific/Niue'), ('Etc/GMT+12')) AS tbl(tz_name));

CREATE TABLE abbrevs AS (SELECT * FROM (VALUES ('Etc/GMT-14'), ('NZ-CHAT'), ('NZ'), ('Pacific/Enderbury'), ('Australia/Hobart'), ('Australia/LHI'), ('Pacific/Efate'), ('Australia/Adelaide'), ('Etc/GMT-9'), ('Australia/Eucla'), ('CTT'), ('Asia/Phnom_Penh'), ('Asia/Yangon'), ('Asia/Thimbu'), ('Asia/Kathmandu'), ('IST'), ('Asia/Qyzylorda'), ('Asia/Kabul'), ('Europe/Samara'), ('Iran'), ('EAT'), ('CAT'), ('Europe/Bratislava'), ('GMT'), ('Atlantic/Azores'), ('America/Cayenne'), ('America/Nuuk'), ('CNT'), ('PRT'), ('America/Panama'), ('America/Rankin_Inlet'), ('Canada/Yukon'), ('PST'), ('America/Nome'), ('Pacific/Marquesas'), ('Pacific/Johnston'), ('Pacific/Niue'), ('Etc/GMT+12')) AS tbl(tz_name));

CREATE TABLE abbrevs AS (SELECT * FROM (VALUES ('Etc/GMT-14'), ('NZ-CHAT'), ('NZ'), ('Pacific/Enderbury'), ('Australia/Hobart'), ('Australia/LHI'), ('Pacific/Efate'), ('Australia/Adelaide'), ('Etc/GMT-9'), ('Australia/Eucla'), ('CTT'), ('Asia/Phnom_Penh'), ('Asia/Yangon'), ('Asia/Thimbu'), ('Asia/Kathmandu'), ('IST'), ('Asia/Qyzylorda'), ('Asia/Kabul'), ('Europe/Samara'), ('Iran'), ('EAT'), ('CAT'), ('Europe/Bratislava'), ('GMT'), ('Atlantic/Azores'), ('America/Cayenne'), ('America/Nuuk'), ('CNT'), ('PRT'), ('America/Panama'), ('America/Rankin_Inlet'), ('Canada/Yukon'), ('PST'), ('America/Nome'), ('Pacific/Marquesas'), ('Pacific/Johnston'), ('Pacific/Niue'), ('Etc/GMT+12')) AS tbl(tz_name));

CREATE TABLE abbrevs AS (SELECT * FROM (VALUES ('Etc/GMT-14'), ('NZ-CHAT'), ('NZ'), ('Pacific/Enderbury'), ('Australia/Hobart'), ('Australia/LHI'), ('Pacific/Efate'), ('Australia/Adelaide'), ('Etc/GMT-9'), ('Australia/Eucla'), ('CTT'), ('Asia/Phnom_Penh'), ('Asia/Yangon'), ('Asia/Thimbu'), ('Asia/Kathmandu'), ('IST'), ('Asia/Qyzylorda'), ('Asia/Kabul'), ('Europe/Samara'), ('Iran'), ('EAT'), ('CAT'), ('Europe/Bratislava'), ('GMT'), ('Atlantic/Azores'), ('America/Cayenne'), ('America/Nuuk'), ('CNT'), ('PRT'), ('America/Panama'), ('America/Rankin_Inlet'), ('Canada/Yukon'), ('PST'), ('America/Nome'), ('Pacific/Marquesas'), ('Pacific/Johnston'), ('Pacific/Niue'), ('Etc/GMT+12')) AS tbl(tz_name));

CREATE TABLE abbrevs AS (SELECT * FROM (VALUES ('Etc/GMT-14'), ('NZ-CHAT'), ('NZ'), ('Pacific/Enderbury'), ('Australia/Hobart'), ('Australia/LHI'), ('Pacific/Efate'), ('Australia/Adelaide'), ('Etc/GMT-9'), ('Australia/Eucla'), ('CTT'), ('Asia/Phnom_Penh'), ('Asia/Yangon'), ('Asia/Thimbu'), ('Asia/Kathmandu'), ('IST'), ('Asia/Qyzylorda'), ('Asia/Kabul'), ('Europe/Samara'), ('Iran'), ('EAT'), ('CAT'), ('Europe/Bratislava'), ('GMT'), ('Atlantic/Azores'), ('America/Cayenne'), ('America/Nuuk'), ('CNT'), ('PRT'), ('America/Panama'), ('America/Rankin_Inlet'), ('Canada/Yukon'), ('PST'), ('America/Nome'), ('Pacific/Marquesas'), ('Pacific/Johnston'), ('Pacific/Niue'), ('Etc/GMT+12')) AS tbl(tz_name));

SELECT TRY_STRPTIME('2022-03-05 17:59:17.877 ' || tz_name, '%m/%d/%Y  %H:%M:%S.%g %Z') AS tstz, tz_name FROM zones WHERE NOT tstz IS NULL ORDER BY ALL;

CREATE TABLE multiples (s TEXT, f TEXT);

INSERT INTO multiples VALUES ('2022-03-05 17:59:17.877 CST', '%Y-%m-%d %H:%M:%S.%g %Z'), ('2022-03-05 17:59:17.877', '%Y-%m-%d %H:%M:%S.%g');

SELECT STRPTIME(s, f) FROM multiples;

SELECT STRPTIME('2022-03-05 17:59:17.877 CST', '%C');

SELECT STRPTIME('2022-03-05 17:59:17.877 CST', '%Y-%m-%d %H:%M:%S.%g');

SELECT CAST('fnord' AS TIMESTAMPTZ);

SELECT TRY_CAST('fnord' AS TIMESTAMPTZ);

SELECT CAST('2022-03-05 17:59:17.123456 CST' AS TIMESTAMPTZ);

SELECT CAST('infinity' AS TIMESTAMPTZ);

SELECT CAST('-infinity' AS TIMESTAMPTZ);

SELECT CAST('epoch' AS TIMESTAMPTZ);

SELECT CAST('294247-01-10 04:00:54.7758' AS TIMESTAMPTZ);

SELECT TRY_STRPTIME('2015-01-05 00:00:00 FNORD', '%Y-%m-%d %H:%M:%S %Z');

SET Calendar = 'gregorian';

SET TimeZone = 'America/Los_Angeles';

CREATE TABLE timestamps_tz (w INTERVAL, t TIMESTAMPTZ, shift INTERVAL, origin TIMESTAMPTZ, timezone TEXT);

INSERT INTO timestamps_tz VALUES ('10 days', '-infinity', '0 days', '1970-01-05 00:00:00+00', 'UTC'), ('333 microseconds', '1907-11-20 04:00:00+08', '0 microseconds', '1970-03-06 00:00:00+00', 'UTC'), ('333 microseconds', '1970-01-01 00:00:00+00', '444 microseconds', '1970-01-05 00:05:05.006006+03', 'America/Los_Angeles'), ('333 microseconds', '1979-04-10 02:02:05.003003-03', '-444 microseconds', '1962-12-10 00:05:05.006006-03', 'America/Los_Angeles'), ('333 milliseconds', '1981-09-30 02:02:06.003003+00', '0 milliseconds', '1970-02-05 00:00:00+00', 'UTC'), ('333 milliseconds', '1982-06-15 02:02:07.003003+04', '444 milliseconds', '1970-11-15 00:05:05.006006+04', 'Asia/Aden'), ('333 milliseconds', '1985-02-20 02:02:08.003003-04', '-444 milliseconds', '1980-08-05 00:05:05.006006-04', 'Asia/Aden'), ('333 seconds', '1989-06-08 02:02:09.003003+00', '0 seconds', '1970-11-25 00:00:00+00', 'UTC'), ('333 seconds', '1990-07-11 02:02:10.003003+02', '444 seconds', '1970-04-10 00:05:05.006006+02', 'Pacific/Guam'), ('333 seconds', '1991-05-12 02:02:11.003003-02', '-444 seconds', '1971-01-05 00:05:05.006006-02', 'Pacific/Guam'), ('333 minutes', '1992-10-17 02:02:12.003003+00', '0 minutes', '1950-04-24 00:00:00+00', 'UTC'), ('333 minutes', '1994-12-05 02:02:13.003003+05', '444 minute', '1970-06-09 00:05:05.006006+05', 'Europe/Berlin'), ('333 minutes', '1997-01-02 02:02:14.003003-05', '-444 minute', '1970-07-06 00:05:05.006006-05', 'Europe/Berlin'), ('333 hours', '1999-04-26 02:02:15.003003+00', '0 hours', '1970-02-05 00:00:00+00', 'UTC'), ('333 hours', '2000-01-01 00:00:00+00', '444 hours', '1970-01-05 00:05:05.006006+01', 'Europe/London'), ('333 hours', '2000-01-03 00:00:00+00', '-444 hours', '1970-03-15 00:05:05.006006-01', 'Europe/London'), ('333 hours', '2000-03-26 02:00:00+01', '0 hours', '1980-10-05 00:00:00+00', 'Europe/London'), ('333 hours', '2000-04-02 03:00:00-07', '0 hours', '1990-05-20 00:00:00+00', 'Europe/London'), ('333 hours', '2000-10-29 01:00:00+00', '0 hours', '2010-07-27 00:00:00+00', 'Europe/London'), ('333 hours', '2000-10-29 01:00:00-08', '0 hours', '2010-07-27 00:00:00+00', 'Europe/London'), ('10 days', '2008-12-31 23:59:59.999999+00', '0 days', '1970-02-27 00:00:00+00', 'UTC'), ('1 week', '2010-05-03 02:02:19.003003+00', '0 days', '1970-07-25 00:00:00+00', 'UTC'), ('10 days', '2013-08-19 02:02:20.003003+02', '2 days 4 hours', '2003-03-24 00:05:05.006006+02', 'Asia/Kolkata'), ('10 days', '2014-07-15 02:02:21.003003-02', '-2 days 4 hours', '1970-04-12 00:05:05.006006-02', 'Asia/Kolkata'), ('2 months', '2016-03-21 02:02:22.003003+00', '0 months', '1970-11-05 00:00:00+00', 'UTC'), ('2 months', '2018-02-01 02:02:23.003003+09', '1 month 1 week', '1970-05-07 00:05:05.006006+09', 'Australia/Sydney'), ('2 months', '2019-09-30 02:02:24.003003-09', '-1 month 1 week', '1969-10-09 00:05:05.006006-09', 'Australia/Sydney'), ('2 year', '2020-03-20 02:02:25.003003+11', '6 months', '2032-06-29 00:05:05.006006+11', 'Asia/Yekaterinburg'), ('2 year', '2022-07-20 02:02:26.003003-11', '-6 months', '1969-11-14 00:05:05.006006-11', 'Asia/Yekaterinburg'), ('10 days', '2024-08-12 02:02:26.003003+07', '1 year', '-infinity', 'Asia/Tokyo'), ('10 days', '2032-12-18 02:02:26.003003-07', '-1 year', 'infinity', 'Asia/Tokyo'), ('10 days', 'infinity', '0 days', '1970-01-01 00:00:00+00', 'UTC');

SELECT t, TIME_BUCKET(CAST('56 seconds' AS INTERVAL), t) FROM timestamps_tz;

SELECT t, TIME_BUCKET(CAST('3 days' AS INTERVAL), t) FROM timestamps_tz;

SELECT t, TIME_BUCKET(CAST('3 years' AS INTERVAL), t) FROM timestamps_tz;

SELECT t, TIME_BUCKET(CAST(NULL AS INTERVAL), t) FROM timestamps_tz;

SELECT TIME_BUCKET(CAST('3 years' AS INTERVAL), CAST(NULL AS TIMESTAMPTZ)) FROM timestamps_tz;

SELECT w, t, TIME_BUCKET(w, t) FROM timestamps_tz;

SELECT t, TIME_BUCKET(CAST('4 seconds' AS INTERVAL), t, CAST('2 seconds' AS INTERVAL)) FROM timestamps_tz;

SELECT t, TIME_BUCKET(CAST('4 days' AS INTERVAL), t, CAST('6 hours' AS INTERVAL)) FROM timestamps_tz;

SELECT t, TIME_BUCKET(CAST('3 months' AS INTERVAL), t, CAST('6 days 11 hours' AS INTERVAL)) FROM timestamps_tz;

SELECT t, TIME_BUCKET(CAST(NULL AS INTERVAL), t, CAST('2 seconds' AS INTERVAL)) FROM timestamps_tz;

SELECT TIME_BUCKET(CAST('3 months' AS INTERVAL), CAST(NULL AS TIMESTAMPTZ), CAST('2 seconds' AS INTERVAL)) FROM timestamps_tz;

SELECT t, TIME_BUCKET(CAST('3 months' AS INTERVAL), t, CAST(NULL AS INTERVAL)) FROM timestamps_tz;

SELECT w, t, shift, TIME_BUCKET(w, t, SHIFT) FROM timestamps_tz;

SELECT t, TIME_BUCKET(CAST('11 seconds' AS INTERVAL), t, CAST('1990-12-10 08:08:10+03' AS TIMESTAMPTZ)) FROM timestamps_tz;

SELECT t, TIME_BUCKET(CAST('11 days' AS INTERVAL), t, CAST('1990-01-06 08:08:10+09' AS TIMESTAMPTZ)) FROM timestamps_tz;

SELECT t, TIME_BUCKET(CAST('7 months' AS INTERVAL), t, CAST('1990-01-06 08:08:10+01' AS TIMESTAMPTZ)) FROM timestamps_tz;

SELECT t, TIME_BUCKET(CAST(NULL AS INTERVAL), t, CAST('1990-01-06 08:08:10' AS TIMESTAMPTZ)) FROM timestamps_tz;

SELECT TIME_BUCKET(CAST('7 months' AS INTERVAL), CAST(NULL AS TIMESTAMPTZ), CAST('1990-01-06 08:08:10' AS TIMESTAMPTZ)) FROM timestamps_tz;

SELECT t, TIME_BUCKET(CAST('7 months' AS INTERVAL), t, CAST(NULL AS TIMESTAMPTZ)) FROM timestamps_tz;

SELECT w, t, origin, TIME_BUCKET(w, t, ORIGIN) FROM timestamps_tz;

SELECT t, TIME_BUCKET(CAST('11 seconds' AS INTERVAL), t, ASIA/CALCUTTA) FROM timestamps_tz;

SELECT t, TIME_BUCKET(CAST('5 months' AS INTERVAL), t, EUROPE/BERLIN) FROM timestamps_tz;

SELECT t, TIME_BUCKET(CAST('11 seconds' AS INTERVAL), t, EUROPE/BERLIN) FROM timestamps_tz;

SELECT t, TIME_BUCKET(CAST('5 months' AS INTERVAL), t, EUROPE/LONDON) FROM timestamps_tz;

SELECT t, TIME_BUCKET(CAST('11 seconds' AS INTERVAL), t, EUROPE/LONDON) FROM timestamps_tz;

SELECT t, TIME_BUCKET(CAST(NULL AS INTERVAL), t, ASIA/CALCUTTA) FROM timestamps_tz;

SELECT TIME_BUCKET(CAST('11 seconds' AS INTERVAL), CAST(NULL AS TIMESTAMPTZ), ASIA/CALCUTTA) FROM timestamps_tz;

SELECT t, TIME_BUCKET(CAST('11 seconds' AS INTERVAL), t, CAST(NULL AS TEXT)) FROM timestamps_tz;

SELECT w, t, timezone, TIME_BUCKET(w, t, TIMEZONE) FROM timestamps_tz;

SELECT TIME_BUCKET(CAST('-3 hours' AS INTERVAL), CAST('2019-04-05 00:00:00+03' AS TIMESTAMPTZ));

SELECT TIME_BUCKET(CAST('-3 hours' AS INTERVAL), CAST('2019-04-05 00:00:00+03' AS TIMESTAMPTZ), CAST('1 hour 30 minutes' AS INTERVAL));

SELECT TIME_BUCKET(CAST('-3 hours' AS INTERVAL), CAST('2019-04-05 00:00:00+03' AS TIMESTAMPTZ), CAST('2019-04-05 00:00:00+03' AS TIMESTAMPTZ));

SELECT TIME_BUCKET(CAST('-1 month' AS INTERVAL), CAST('2019-04-05 00:00:00-11' AS TIMESTAMPTZ));

SELECT TIME_BUCKET(CAST('-1 month' AS INTERVAL), CAST('2019-04-05 00:00:00-11' AS TIMESTAMPTZ), CAST('1 hour 30 minutes' AS INTERVAL));

SELECT TIME_BUCKET(CAST('-1 month' AS INTERVAL), CAST('2019-04-05 00:00:00-11' AS TIMESTAMPTZ), CAST('2018-04-05 00:00:00+11' AS TIMESTAMPTZ));

SELECT TIME_BUCKET(CAST('1 day - 172800 seconds' AS INTERVAL), CAST('2018-05-05 00:00:00+07' AS TIMESTAMPTZ));

SELECT TIME_BUCKET(CAST('1 day - 172800 seconds' AS INTERVAL), CAST('2018-05-05 00:00:00+07' AS TIMESTAMPTZ), CAST('1 hour 30 minutes' AS INTERVAL));

SELECT TIME_BUCKET(CAST('1 day - 172800 seconds' AS INTERVAL), CAST('2018-05-05 00:00:00+07' AS TIMESTAMPTZ), CAST('2018-05-05 00:00:00+07' AS TIMESTAMPTZ));

SELECT TIME_BUCKET(CAST('1 month 1 day' AS INTERVAL), CAST('2018-05-05 00:00:00+02' AS TIMESTAMPTZ));

SELECT TIME_BUCKET(CAST('1 month 1 day' AS INTERVAL), CAST('2018-05-05 00:00:00+02' AS TIMESTAMPTZ), CAST('1 hour 30 minutes' AS INTERVAL));

SELECT TIME_BUCKET(CAST('1 month 1 day' AS INTERVAL), CAST('2018-05-05 00:00:00+02' AS TIMESTAMPTZ), CAST('2018-05-05 00:00:00+02' AS TIMESTAMPTZ));

SELECT TIME_BUCKET(CAST('3 days' AS INTERVAL), CAST('2019-05-05 00:00:00+09' AS TIMESTAMPTZ), CAST('2000000000 months' AS INTERVAL));

SELECT TIME_BUCKET(CAST('3 days' AS INTERVAL), CAST('2019-05-05 00:00:00+09' AS TIMESTAMPTZ), CAST('-2000000000 months' AS INTERVAL));

SELECT TIME_BUCKET(CAST('3 months' AS INTERVAL), CAST('2019-05-05 00:00:00+00' AS TIMESTAMPTZ), CAST('2000000000 months' AS INTERVAL));

SELECT TIME_BUCKET(CAST('3 months' AS INTERVAL), CAST('2019-05-05 00:00:00+00' AS TIMESTAMPTZ), CAST('-2000000000 months' AS INTERVAL));

SELECT TIME_BUCKET(CAST('1 microseconds' AS INTERVAL), CAST('290279-12-24 (BC) 19:59:05.224191+00' AS TIMESTAMPTZ));

SELECT TIME_BUCKET(CAST('1 microseconds' AS INTERVAL), CAST('290279-12-24 (BC) 19:59:05.224192+00' AS TIMESTAMPTZ));

SELECT TIME_BUCKET(CAST('1 microseconds' AS INTERVAL), CAST('294247-01-10 04:00:54.775+00' AS TIMESTAMPTZ));

SELECT TIME_BUCKET(CAST('0.' AS INTERVAL), CAST('2000-01-01 00:00:00+00' AS TIMESTAMPTZ));

SELECT TIME_BUCKET(CAST('1 microseconds' AS INTERVAL), CAST('294247-01-10 04:00:54.774999+00' AS TIMESTAMPTZ));

WITH t2 AS (SELECT CAST('2000-03-26 00:00:00' AS TIMESTAMPTZ) + CAST((CAST(n AS TEXT) || 'hours') AS INTERVAL) AS ts FROM GENERATE_SERIES(0, 72, 3) AS t1(n)) SELECT ts, TIME_BUCKET(CAST('10 seconds' AS INTERVAL), ts, EUROPE/LONDON) FROM t2;

WITH t2 AS (SELECT CAST('2000-10-28 00:00:00' AS TIMESTAMPTZ) + CAST((CAST(n AS TEXT) || 'hours') AS INTERVAL) AS ts FROM GENERATE_SERIES(0, 72, 3) AS t1(n)) SELECT ts, TIME_BUCKET(CAST('10 seconds' AS INTERVAL), ts, EUROPE/LONDON) FROM t2;

SELECT TIME_BUCKET(INTERVAL '1' DAY, CAST('2000-01-03 17:40:00+00' AS TIMESTAMPTZ), ORIGIN) FROM GENERATE_SERIES(CAST('2000-01-03 00:00:00+00' AS TIMESTAMPTZ), CAST('2000-01-04 00:00:00+00' AS TIMESTAMPTZ), INTERVAL '1' HOUR) AS t(origin) ORDER BY origin;

SET TimeZone = 'UTC';

SELECT TIME_BUCKET(INTERVAL '1' DAY, CAST('2023-10-07 16:08:09+00' AS TIMESTAMPTZ), ORIGIN) FROM GENERATE_SERIES(CAST('2001-01-03 00:00:00+00' AS TIMESTAMPTZ), CAST('2001-01-04 00:00:00+00' AS TIMESTAMPTZ), INTERVAL '1' HOUR) AS t(origin) ORDER BY origin;

SET TimeZone = 'America/St_Johns';

SELECT TIME_BUCKET(INTERVAL '1' DAY, CAST('2023-10-07 16:08:09+03' AS TIMESTAMPTZ), ORIGIN) FROM GENERATE_SERIES(CAST('2001-01-03 00:00:00+05' AS TIMESTAMPTZ), CAST('2001-01-04 00:00:00+05' AS TIMESTAMPTZ), INTERVAL '1' HOUR) AS t(origin) ORDER BY origin;

SELECT BOOL_AND(DATE_PART('epoch', TIME_BUCKET(INTERVAL '3' DAY, CAST('2023-06-07 16:08:09+00' AS TIMESTAMPTZ), ORIGIN)) = DATE_PART('epoch', TIME_BUCKET(INTERVAL '3' DAY, CAST('2023-06-07 16:08:09' AS TIMESTAMP), origin AT TIME ZONE 'UTC'))) FROM GENERATE_SERIES(CAST('2023-01-03 00:00:00+05' AS TIMESTAMPTZ), CAST('2024-01-04 00:00:00+05' AS TIMESTAMPTZ), INTERVAL '7877' MINUTE) AS t(origin);

PRAGMA enable_verification;

BEGIN;

CREATE TABLE t1 (t TIMESTAMP);

INSERT INTO t1 VALUES (NOW());

INSERT INTO t1 SELECT NOW();

SELECT COUNT(DISTINCT t) FROM t1;

PRAGMA enable_verification;

CREATE TABLE timestamps (ts TIMESTAMP);

PREPARE v1 AS INSERT INTO timestamps VALUES(NOW());

PREPARE v1 AS INSERT INTO timestamps VALUES(NOW());

EXECUTE v1;

SELECT COUNT(DISTINCT ts) FROM timestamps;

CREATE TABLE timestamps_default (ts TIMESTAMP DEFAULT NOW());

CREATE TABLE timestamps_default (ts TIMESTAMP DEFAULT NOW());

CREATE TABLE timestamps_default (ts TIMESTAMP DEFAULT NOW());

SELECT COUNT(DISTINCT ts) FROM timestamps_default;

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

CREATE TABLE timestamps (d TIMESTAMP);
INSERT INTO timestamps VALUES ('1992-01-01 01:20:30'), ('1993-03-20 23:50:01.123'), ('2020-08-09 12:01:55.123456'), ('2020-08-10 10:10:10.123456789'), (NULL);

SELECT STRFTIME(d, '%a') FROM timestamps ORDER BY d;

SELECT STRFTIME(d, '%A') FROM timestamps ORDER BY d;

SELECT STRFTIME(d, '%w') FROM timestamps ORDER BY d;

SELECT STRFTIME(d, '%u') FROM timestamps ORDER BY d;

SELECT STRFTIME(d, '%d') FROM timestamps ORDER BY d;

SELECT STRFTIME(d, '%-d') FROM timestamps ORDER BY d;

SELECT STRFTIME(d, '%b') FROM timestamps ORDER BY d;

SELECT STRFTIME(d, '%h') FROM timestamps ORDER BY d;

SELECT STRFTIME(d, '%B') FROM timestamps ORDER BY d;

SELECT STRFTIME(d, '%m') FROM timestamps ORDER BY d;

SELECT STRFTIME(d, '%-m') FROM timestamps ORDER BY d;

SELECT STRFTIME(d, '%y') FROM timestamps ORDER BY d;

SELECT STRFTIME(d, '%-y') FROM timestamps ORDER BY d;

SELECT STRFTIME(CAST('2001-01-01' AS DATE), '%-y');

SELECT STRFTIME(d, '%Y') FROM timestamps ORDER BY d;

SELECT STRFTIME(d, '%G') FROM timestamps ORDER BY d;

SELECT STRFTIME(d, '%H') FROM timestamps ORDER BY d;

SELECT STRFTIME(d, '%-H') FROM timestamps ORDER BY d;

SELECT STRFTIME(d, '%I') FROM timestamps ORDER BY d;

SELECT STRFTIME(d, '%-I') FROM timestamps ORDER BY d;

SELECT STRFTIME(d, '%p') FROM timestamps ORDER BY d;

SELECT STRFTIME(d, '%M') FROM timestamps ORDER BY d;

SELECT STRFTIME(d, '%-M') FROM timestamps ORDER BY d;

SELECT STRFTIME(d, '%S') FROM timestamps ORDER BY d;

SELECT STRFTIME(d, '%-S') FROM timestamps ORDER BY d;

SELECT STRFTIME(d, '%f') FROM timestamps ORDER BY d;

SELECT STRFTIME(d, '%g') FROM timestamps ORDER BY d;

SELECT STRFTIME(d, '%n') FROM timestamps ORDER BY d;

SELECT STRFTIME(d, '%z') FROM timestamps ORDER BY d;

SELECT STRFTIME(d, '%Z') FROM timestamps ORDER BY d;

SELECT STRFTIME(d, '%j') FROM timestamps ORDER BY d;

SELECT STRFTIME(d, '%-j') FROM timestamps ORDER BY d;

SELECT STRFTIME(d, '%U') FROM timestamps ORDER BY d;

SELECT STRFTIME(d, '%W') FROM timestamps ORDER BY d;

SELECT STRFTIME(d, '%V') FROM timestamps ORDER BY d;

SELECT STRFTIME(d, '%c') FROM timestamps ORDER BY d;

SELECT STRFTIME(d, '%x') FROM timestamps ORDER BY d;

SELECT STRFTIME(d, '%X') FROM timestamps ORDER BY d;

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

CREATE TABLE timestamps (d TIMESTAMP_NS);
INSERT INTO timestamps VALUES ('1992-01-01 01:20:30'), ('1993-03-20 23:50:01.123'), ('2020-08-09 12:01:55.123456'), ('2020-08-10 10:10:10.123456789'), (NULL);

SELECT STRFTIME(d, '%a') FROM timestamps ORDER BY d;

SELECT STRFTIME(d, '%A') FROM timestamps ORDER BY d;

SELECT STRFTIME(d, '%w') FROM timestamps ORDER BY d;

SELECT STRFTIME(d, '%u') FROM timestamps ORDER BY d;

SELECT STRFTIME(d, '%d') FROM timestamps ORDER BY d;

SELECT STRFTIME(d, '%-d') FROM timestamps ORDER BY d;

SELECT STRFTIME(d, '%b') FROM timestamps ORDER BY d;

SELECT STRFTIME(d, '%h') FROM timestamps ORDER BY d;

SELECT STRFTIME(d, '%B') FROM timestamps ORDER BY d;

SELECT STRFTIME(d, '%m') FROM timestamps ORDER BY d;

SELECT STRFTIME(d, '%-m') FROM timestamps ORDER BY d;

SELECT STRFTIME(d, '%y') FROM timestamps ORDER BY d;

SELECT STRFTIME(d, '%-y') FROM timestamps ORDER BY d;

SELECT STRFTIME(CAST('2001-01-01' AS DATE), '%-y');

SELECT STRFTIME(d, '%Y') FROM timestamps ORDER BY d;

SELECT STRFTIME(d, '%G') FROM timestamps ORDER BY d;

SELECT STRFTIME(d, '%H') FROM timestamps ORDER BY d;

SELECT STRFTIME(d, '%-H') FROM timestamps ORDER BY d;

SELECT STRFTIME(d, '%I') FROM timestamps ORDER BY d;

SELECT STRFTIME(d, '%-I') FROM timestamps ORDER BY d;

SELECT STRFTIME(d, '%p') FROM timestamps ORDER BY d;

SELECT STRFTIME(d, '%M') FROM timestamps ORDER BY d;

SELECT STRFTIME(d, '%-M') FROM timestamps ORDER BY d;

SELECT STRFTIME(d, '%S') FROM timestamps ORDER BY d;

SELECT STRFTIME(d, '%-S') FROM timestamps ORDER BY d;

SELECT STRFTIME(d, '%f') FROM timestamps ORDER BY d;

SELECT STRFTIME(d, '%g') FROM timestamps ORDER BY d;

SELECT STRFTIME(d, '%n') FROM timestamps ORDER BY d;

SELECT STRFTIME(d, '%z') FROM timestamps ORDER BY d;

SELECT STRFTIME(d, '%Z') FROM timestamps ORDER BY d;

SELECT STRFTIME(d, '%j') FROM timestamps ORDER BY d;

SELECT STRFTIME(d, '%-j') FROM timestamps ORDER BY d;

SELECT STRFTIME(d, '%U') FROM timestamps ORDER BY d;

SELECT STRFTIME(d, '%W') FROM timestamps ORDER BY d;

SELECT STRFTIME(d, '%V') FROM timestamps ORDER BY d;

SELECT STRFTIME(d, '%c') FROM timestamps ORDER BY d;

SELECT STRFTIME(d, '%x') FROM timestamps ORDER BY d;

SELECT STRFTIME(d, '%X') FROM timestamps ORDER BY d;

PRAGMA enable_verification;

SELECT STRPTIME('21 June, 2018', '%d %B, %Y');

SELECT STRPTIME('21/10/2018', '%d/%m/%Y');

SELECT STRPTIME('2018-20-10', '%Y-%d-%m');

SELECT STRPTIME('20182010', '%Y%d%m');

SELECT STRPTIME('Mon 30, June 2003, 12:03:10 AM', '%a %d, %B %Y, %I:%M:%S %p');

SELECT STRPTIME('Mon 30, June 2003, 12:03:10 PM', '%a %d, %B %Y, %I:%M:%S %p');

SELECT STRPTIME('Mon 30, December 2003, 7:3:5 PM', '%a %d, %B %Y, %I:%M:%S %p');

SELECT STRPTIME('Tuesday 30, December 2003, 7:3:5 PM', '%A %d, %B %Y, %I:%M:%S %p');

SELECT STRPTIME('Mon 30, December 30, 7:3:5 PM', '%a %d, %B %y, %I:%M:%S %p');

SELECT STRPTIME('Mon 30, June 2003, 12:03:10 AM', '%a %-d, %B %Y, %-I:%-M:%-S %p');

SELECT STRPTIME('mon', '%a');

SELECT STRPTIME('tuesday', '%A');

SELECT STRPTIME('jun', '%b');

SELECT STRPTIME('1', '%W');

SELECT STRPTIME('1', '%U');

SELECT STRPTIME('30', '%U'), STRFTIME(CAST('1900-07-29' AS DATE), '%U');

SELECT STRPTIME('1', '%V');

SELECT STRPTIME('30', '%W'), STRFTIME(CAST('1900-07-23' AS DATE), '%W');

SELECT STRPTIME('30', '%V'), STRFTIME(CAST('1900-07-23' AS DATE), '%V');

SELECT STRPTIME('6', '%w');

SELECT STRPTIME('6', '%u');

SELECT STRPTIME('1-4', '%U-%w'), STRFTIME(CAST('1900-01-11' AS DATE), '%U-%w');

SELECT STRPTIME('2-4', '%V-%u'), STRFTIME(CAST('1900-01-11' AS DATE), '%V-%u');

SELECT STRPTIME('1-4', '%W-%w'), STRFTIME(CAST('1900-01-04' AS DATE), '%W-%w');

SELECT STRPTIME('1-4', '%V-%u'), STRFTIME(CAST('1900-01-04' AS DATE), '%V-%u');

SELECT STRPTIME('30', '%j'), STRFTIME(CAST('1900-01-30' AS DATE), '%-j');

SELECT STRPTIME('100 2024', '%j %Y');

SELECT STRPTIME('2024 100', '%Y %j');

SELECT STRPTIME('1992-01-30 30', '%Y-%m-%d %j');

SELECT STRPTIME('2021-19-4', '%Y-%U-%w'), STRFTIME(CAST('2021-05-13' AS DATE), '%Y-%U-%w');

SELECT STRPTIME('2021-19-4', '%Y-%W-%w'), STRFTIME(CAST('2021-05-13' AS DATE), '%Y-%U-%w');

SELECT STRPTIME('2021-19-4', '%G-%V-%u'), STRFTIME(CAST('2021-05-13' AS DATE), '%G-%V-%u');

SELECT STRPTIME('2021-0-5', '%Y-%U-%w'), STRFTIME(CAST('2021-01-01' AS DATE), '%Y-%U-%w');

SELECT STRPTIME('2021-19-4', '%G-%V-%u'), STRFTIME(CAST('2021-05-13' AS DATE), '%G-%V-%u');

SELECT STRPTIME('2021-1-5', '%G-%V-%u'), STRFTIME(CAST('2021-01-08' AS DATE), '%G-%V-%u');

SELECT STRPTIME('2021-0-5', '%Y-%W-%w'), STRFTIME(CAST('2021-01-01' AS DATE), '%Y-%W-%w');

SELECT STRPTIME('2021-05-12 19-4', '%Y-%m-%d %U-%w');

SELECT STRPTIME('2021-05-12 19-4', '%Y-%m-%d %W-%w');

SELECT STRPTIME('2021-05-12 19-4', '%Y-%m-%d %V-%u');

SELECT * FROM (SELECT dt, STRFTIME(dt, '%Y-%U-%w') AS ft, STRPTIME(STRFTIME(dt, '%Y-%U-%w'), '%Y-%U-%w') AS rt FROM (SELECT CAST('2021-01-01' AS DATE) + (INTERVAL (d) DAY) AS dt FROM RANGE(0, 365) AS tbl(d)) AS days) AS diffs WHERE rt <> dt;

SELECT * FROM (SELECT dt, STRFTIME(dt, '%Y-%W-%w') AS ft, STRPTIME(STRFTIME(dt, '%Y-%W-%w'), '%Y-%W-%w') AS rt FROM (SELECT CAST('2021-01-01' AS DATE) + (INTERVAL (d) DAY) AS dt FROM RANGE(0, 365) AS tbl(d)) AS days) AS diffs WHERE rt <> dt;

SELECT * FROM (SELECT dt, STRFTIME(dt, '%G-%V-%u') AS ft, STRPTIME(STRFTIME(dt, '%G-%V-%u'), '%G-%V-%u') AS rt FROM (SELECT CAST('2021-01-01' AS DATE) + (INTERVAL (d) DAY) AS dt FROM RANGE(0, 365) AS tbl(d)) AS days) AS diffs WHERE rt <> dt;

SELECT STRPTIME('', 'None');

SELECT STRPTIME(NULL, 'None');

SELECT STRPTIME('', NULL);

SELECT STRPTIME('Jun 30 2003  2:03:10AM', '%b %d %Y %-I:%M:%S%p');

SELECT STRPTIME('2020-12-31 21:25:58.745232159', '%Y-%m-%d %H:%M:%S.%n');

SELECT STRPTIME('2020-12-31 21:25:58.745232951', '%Y-%m-%d %H:%M:%S.%n');

SELECT STRPTIME('2020-12-31 21:25:58.745232', '%Y-%m-%d %H:%M:%S.%f');

SELECT STRPTIME('2020-12-31 21:25:58.745232', '%Y-%m-%d %H:%M:%S.%f');

SELECT STRPTIME('2020-12-31 21:25:58.745232+00', '%Y-%m-%d %H:%M:%S.%f%z');

SELECT STRPTIME('2020-12-31 21:25:58.745232+0000', '%Y-%m-%d %H:%M:%S.%f%z');

SELECT STRPTIME('2020-12-31 21:25:58.745232+02', '%Y-%m-%d %H:%M:%S.%f%z');

SELECT STRPTIME('2020-12-31 21:25:58.745232-02', '%Y-%m-%d %H:%M:%S.%f%z');

SELECT STRPTIME('2020-12-31 21:25:58.745232+0215', '%Y-%m-%d %H:%M:%S.%f%z');

SELECT STRPTIME('2020-12-31 21:25:58.745232-0215', '%Y-%m-%d %H:%M:%S.%f%z');

SELECT STRPTIME('2020-12-31 03:25:58.745232+04', '%Y-%m-%d %H:%M:%S.%f%z');

SELECT STRPTIME('2020-12-30 23:25:58.745232-04', '%Y-%m-%d %H:%M:%S.%f%z');

SELECT STRPTIME('infinity', '%m/%d/%Y');

SELECT STRPTIME('-infinity', '%m/%d/%Y');

SELECT STRPTIME('epoch', '%m/%d/%Y');

SELECT STRPTIME('Mon Oct 17 2022 22:00:00 GMT+0000 (GMT)', '%a %b %d %Y %X GMT%z (%Z)') AS fixed;

SELECT STRPTIME('Mon Oct 17 2022 22:00:00 GMT+0000 (GMT', '%a %b %d %Y %X GMT%z (%Z') AS working;

SELECT STRPTIME('10/28/1910', ['%d-%m-%Y', '%m-%d-%Y', '%d/%m/%Y', '%m/%d/%Y']);

SELECT STRPTIME('10.28.1910', ['%d-%m-%Y', '%m-%d-%Y', '%d/%m/%Y', '%m/%d/%Y']);

SELECT STRPTIME('Mon Oct 17 2022 22:00:00 GMT+0000 (GMT)', '%a %b %d %Y %X GMT%z (%Z') AS broken;

SELECT STRPTIME('2020-12-31 21:25:58.745232+0', '%Y-%m-%d %H:%M:%S.%f%z');

SELECT STRPTIME('2020-12-31 21:25:58.745232+0X', '%Y-%m-%d %H:%M:%S.%f%z');

SELECT STRPTIME('2020-12-31 21:25:58.745232+X0', '%Y-%m-%d %H:%M:%S.%f%z');

SELECT STRPTIME('2020-12-31 21:25:58.745232+000', '%Y-%m-%d %H:%M:%S.%f%z');

SELECT STRPTIME('2020-12-31 21:25:58.745232X00', '%Y-%m-%d %H:%M:%S.%f%z');

SELECT STRPTIME('2018-20-10', '%Y-%m-%d');

SELECT STRPTIME('2018-10-100', '%Y-%m-%d');

SELECT STRPTIME('969-10-10', '%y-%m-%d');

SELECT STRPTIME('2000/10/10', '%Y-%m-%d');

SELECT STRPTIME('2001-02-30', '%Y-%m-%d');

SELECT STRPTIME('2000-10-hello', '%Y-%m-%d');

SELECT STRPTIME('2000-10-01 24:00:00', '%Y-%m-%d %H:%M:%S');

SELECT STRPTIME('2000-10-01 00:00:00 AM', '%Y-%m-%d %I:%M:%S %p');

SELECT STRPTIME('2000-10-01 13:00:00 AM', '%Y-%m-%d %I:%M:%S %p');

SELECT STRPTIME('2000-10-01 23:60:00', '%Y-%m-%d %H:%M:%S');

SELECT STRPTIME('2000-10-01 23:59:60', '%Y-%m-%d %H:%M:%S');

SELECT STRPTIME('2000-10-01 23:59:59.10000000', '%Y-%m-%d %H:%M:%S.%f');

SELECT STRPTIME('2000-10-01 23:59:59.1000000000000000000000000000', '%Y-%m-%d %H:%M:%S.%f');

SELECT STRPTIME('', '%Y-%m-%d %H:%M:%S.%f');

SELECT STRPTIME('', '%p');

SELECT STRPTIME('a', '%p');

SELECT STRPTIME('mp', '%p');

SELECT STRPTIME('pp', '%p');

SELECT STRPTIME('zm', '%p');

SELECT STRPTIME('moa', '%a');

SELECT STRPTIME('moaday', '%A');

SELECT STRPTIME('mondayy', '%A');

SELECT STRPTIME('juk', '%b');

SELECT STRPTIME('juke', '%B');

SELECT STRPTIME('junee', '%B');

SELECT STRPTIME('500', '%j');

SELECT STRPTIME('500', '%-j');

SELECT STRPTIME('0', '%j');

SELECT STRPTIME('0', '%-j');

SELECT STRPTIME('60', '%U');

SELECT STRPTIME('60', '%W');

SELECT STRPTIME('60', '%V');

SELECT STRPTIME('9', '%w');

SELECT STRPTIME('9', '%u');

SELECT STRPTIME('20 19', '%U %W');

SELECT STRPTIME('20 19', '%U %V');

SELECT STRPTIME('20 2021', '%U %G');

SELECT STRPTIME('20 19', '%U %j');

SELECT STRPTIME('20 19', '%W %U');

SELECT STRPTIME('20 19', '%W %V');

SELECT STRPTIME('20 2021', '%W %G');

SELECT STRPTIME('20 19', '%W %j');

SELECT STRPTIME('20 19', '%V %U');

SELECT STRPTIME('20 19', '%V %W');

SELECT STRPTIME('20 19', '%V %j');

SELECT STRPTIME('2021 19', '%G %U');

SELECT STRPTIME('2021 19', '%G %W');

SELECT STRPTIME('2021 19', '%G %j');

SELECT STRPTIME('2021 1950', '%G %Y');

SELECT STRPTIME('2021 1950', '%Y %G');

SELECT STRPTIME('20 1950', '%V %Y');

SELECT STRPTIME('2021 19', '%Y %V');

SELECT STRPTIME('Mon 30, December 30, 20:3:5 PM', '%a %d, %B %y, %H:%M:%S %p');

SELECT STRPTIME('21/10/2018', '%-q/%m/%Y');

SELECT STRPTIME('9999999', '%f');

SELECT STRPTIME('9999', '%g');

SELECT STRPTIME('2000/10/10', CAST(RANDOM() AS TEXT));

PRAGMA enable_verification;

CREATE TABLE timestamps (w INTERVAL, t TIMESTAMP, shift INTERVAL, origin TIMESTAMP);

INSERT INTO timestamps VALUES ('10 days', '-infinity', '0 days', '1970-01-05 00:00:00'), ('10 days', '3000-01-02 (BC) 03:16:23.003003', '3 days', '3000-01-01 (BC) 00:00:00'), ('2 months', '1024-04-10 (BC) 12:35:40.003003', '10 days', '1024-03-01 (BC) 00:00:00'), ('10 days', '0044-06-15 (BC) 12:35:40.003003', '6 days', '0044-02-01 (BC) 00:00:00'), ('333 microseconds', '0678-06-30 02:02:03.003003', '0 microseconds', '1970-02-10 00:00:00'), ('333 microseconds', '0794-07-03 02:02:04.003003', '444 microseconds', '1970-10-17 00:05:05.006006'), ('333 microseconds', '1700-01-01 00:00:00', '-444 microseconds', '1970-09-27 00:05:05.006006'), ('333 milliseconds', '1962-12-31 00:00:00', '0 milliseconds', '1970-08-12 00:00:00'), ('333 milliseconds', '1970-01-01 00:00:00', '444 milliseconds', '1970-06-23 00:05:05.006006'), ('333 milliseconds', '1985-12-07 02:02:08.003003', '-444 milliseconds', '1970-01-05 00:05:05.006006'), ('333 seconds', '1989-10-18 02:02:09.003003', '0 seconds', '1970-09-07 00:00:00'), ('333 seconds', '1990-01-21 02:02:10.003003', '444 seconds', '1970-07-06 00:05:05.006006'), ('333 seconds', '1991-02-10 02:02:11.003003', '-444 seconds', '1970-10-09 00:05:05.006006'), ('333 minutes', '1992-09-11 02:02:12.003003', '0 minutes', '1970-04-10 00:00:00'), ('333 minutes', '1994-12-26 02:02:13.003003', '444 minute', '1970-03-05 00:05:05.006006'), ('333 minutes', '1997-05-13 02:02:14.003003', '-444 minute', '2000-01-03 00:00:00'), ('333 hours', '1999-02-14 02:02:15.003003', '0 hours', '2000-01-01 00:00:00'), ('333 hours', '2000-01-01 00:00:00', '444 hours', '1980-11-25 00:05:05.006006'), ('333 hours', '2000-01-03 00:00:00', '-444 hours', '2045-01-05 00:05:05.006006'), ('10 days', '2008-09-17 02:02:18.003003', '0 days', '2009-11-05 00:00:00'), ('1 week', '2010-08-18 02:02:19.003003', '0 days', '2100-09-05 00:00:00'), ('10 days', '2013-03-19 02:02:20.003003', '2 days 4 hours', '2300-10-07 00:05:05.006006'), ('10 days', '2014-11-20 02:02:21.003003', '-2 days 4 hours', '1970-12-07 00:05:05.006006'), ('2 months', '2016-02-21 02:02:22.003003', '0 months', '1970-09-05 00:00:00'), ('2 months', '2018-08-22 02:02:23.003003', '1 month 1 week', '1970-07-01 00:05:05.006006'), ('2 months', '2019-01-23 02:02:24.003003', '-1 month 1 week', '1969-09-01 00:05:05.006006'), ('2 year', '2020-02-24 02:02:25.003003', '6 months', '1970-02-13 00:05:05.006006'), ('2 year', '2022-07-25 02:02:26.003003', '-6 months', '1969-10-09 00:05:05.006006'), ('10 days', '2024-02-25 02:02:26.003003', '1 year', '-infinity'), ('10 days', '2032-09-25 02:02:26.003003', '-1 year', 'infinity'), ('10 days', 'infinity', '0 days', '1970-01-01 00:00:00');

SELECT t, TIME_BUCKET(CAST('56 seconds' AS INTERVAL), t) FROM timestamps;

SELECT t, TIME_BUCKET(CAST('3 days' AS INTERVAL), t) FROM timestamps;

SELECT t, TIME_BUCKET(CAST('3 years' AS INTERVAL), t) FROM timestamps;

SELECT t, TIME_BUCKET(CAST(NULL AS INTERVAL), t) FROM timestamps;

SELECT TIME_BUCKET(CAST('3 years' AS INTERVAL), CAST(NULL AS TIMESTAMP)) FROM timestamps;

SELECT w, t, TIME_BUCKET(w, t) FROM timestamps;

SELECT t, TIME_BUCKET(CAST('4 seconds' AS INTERVAL), t, CAST('2 seconds' AS INTERVAL)) FROM timestamps;

SELECT t, TIME_BUCKET(CAST('4 days' AS INTERVAL), t, CAST('6 hours' AS INTERVAL)) FROM timestamps;

SELECT t, TIME_BUCKET(CAST('3 months' AS INTERVAL), t, CAST('6 days 11 hours' AS INTERVAL)) FROM timestamps;

SELECT t, TIME_BUCKET(CAST(NULL AS INTERVAL), t, CAST('2 seconds' AS INTERVAL)) FROM timestamps;

SELECT TIME_BUCKET(CAST('3 months' AS INTERVAL), CAST(NULL AS TIMESTAMP), CAST('2 seconds' AS INTERVAL)) FROM timestamps;

SELECT t, TIME_BUCKET(CAST('3 months' AS INTERVAL), t, CAST(NULL AS INTERVAL)) FROM timestamps;

SELECT w, t, shift, TIME_BUCKET(w, t, SHIFT) FROM timestamps;

SELECT t, TIME_BUCKET(CAST('11 seconds' AS INTERVAL), t, CAST('1990-12-10 08:08:10' AS TIMESTAMP)) FROM timestamps;

SELECT t, TIME_BUCKET(CAST('11 days' AS INTERVAL), t, CAST('1990-01-06 08:08:10' AS TIMESTAMP)) FROM timestamps;

SELECT t, TIME_BUCKET(CAST('7 months' AS INTERVAL), t, CAST('1990-01-06 08:08:10' AS TIMESTAMP)) FROM timestamps;

SELECT t, TIME_BUCKET(CAST(NULL AS INTERVAL), t, CAST('1990-01-06 08:08:10' AS TIMESTAMP)) FROM timestamps;

SELECT TIME_BUCKET(CAST('7 months' AS INTERVAL), CAST(NULL AS TIMESTAMP), CAST('1990-01-06 08:08:10' AS TIMESTAMP)) FROM timestamps;

SELECT t, TIME_BUCKET(CAST('7 months' AS INTERVAL), t, CAST(NULL AS TIMESTAMP)) FROM timestamps;

SELECT w, t, origin, TIME_BUCKET(w, t, ORIGIN) FROM timestamps;

SELECT TIME_BUCKET(CAST('-3 hours' AS INTERVAL), CAST('2019-04-05 00:00:00' AS TIMESTAMP));

SELECT TIME_BUCKET(CAST('-3 hours' AS INTERVAL), CAST('2019-04-05 00:00:00' AS TIMESTAMP), CAST('1 hour 30 minutes' AS INTERVAL));

SELECT TIME_BUCKET(CAST('-3 hours' AS INTERVAL), CAST('2019-04-05 00:00:00' AS TIMESTAMP), CAST('2019-04-05 00:00:00' AS TIMESTAMP));

SELECT TIME_BUCKET(CAST('-1 month' AS INTERVAL), CAST('2019-04-05 00:00:00' AS TIMESTAMP));

SELECT TIME_BUCKET(CAST('-1 month' AS INTERVAL), CAST('2019-04-05 00:00:00' AS TIMESTAMP), CAST('1 hour 30 minutes' AS INTERVAL));

SELECT TIME_BUCKET(CAST('-1 month' AS INTERVAL), CAST('2019-04-05 00:00:00' AS TIMESTAMP), CAST('2018-04-05 00:00:00' AS TIMESTAMP));

SELECT TIME_BUCKET(CAST('1 day - 172800 seconds' AS INTERVAL), CAST('2018-05-05 00:00:00' AS TIMESTAMP));

SELECT TIME_BUCKET(CAST('1 day - 172800 seconds' AS INTERVAL), CAST('2018-05-05 00:00:00' AS TIMESTAMP), CAST('1 hour 30 minutes' AS INTERVAL));

SELECT TIME_BUCKET(CAST('1 day - 172800 seconds' AS INTERVAL), CAST('2018-05-05 00:00:00' AS TIMESTAMP), CAST('2018-05-05 00:00:00' AS TIMESTAMP));

SELECT TIME_BUCKET(CAST('1 month 1 day' AS INTERVAL), CAST('2018-05-05 00:00:00' AS TIMESTAMP));

SELECT TIME_BUCKET(CAST('1 month 1 day' AS INTERVAL), CAST('2018-05-05 00:00:00' AS TIMESTAMP), CAST('1 hour 30 minutes' AS INTERVAL));

SELECT TIME_BUCKET(CAST('1 month 1 day' AS INTERVAL), CAST('2018-05-05 00:00:00' AS TIMESTAMP), CAST('2018-05-05 00:00:00' AS TIMESTAMP));

SELECT TIME_BUCKET(CAST('3 days' AS INTERVAL), CAST('2019-05-05 00:00:00' AS TIMESTAMP), CAST('2000000000 months' AS INTERVAL));

SELECT TIME_BUCKET(CAST('3 days' AS INTERVAL), CAST('2019-05-05 00:00:00' AS TIMESTAMP), CAST('-2000000000 months' AS INTERVAL));

SELECT TIME_BUCKET(CAST('3 months' AS INTERVAL), CAST('2019-05-05 00:00:00' AS TIMESTAMP), CAST('2000000000 months' AS INTERVAL));

SELECT TIME_BUCKET(CAST('3 months' AS INTERVAL), CAST('2019-05-05 00:00:00' AS TIMESTAMP), CAST('-2000000000 months' AS INTERVAL));

SELECT TIME_BUCKET(CAST('1 microseconds' AS INTERVAL), CAST('290309-12-21 (BC) 23:59:59.999999' AS TIMESTAMP));

SELECT TIME_BUCKET(CAST('1 microseconds' AS INTERVAL), CAST('290309-12-22 (BC) 00:00:00' AS TIMESTAMP));

SELECT TIME_BUCKET(CAST('1 microseconds' AS INTERVAL), CAST('294247-01-10 04:00:54.775807' AS TIMESTAMP));

SELECT TIME_BUCKET(CAST('1 microseconds' AS INTERVAL), CAST('294247-01-10 04:00:54.775806' AS TIMESTAMP));

SELECT TIME_BUCKET(CAST('1 month 1 day' AS INTERVAL), CAST(NULL AS TIMESTAMP));

SELECT TIME_BUCKET(CAST('1 month 1 day' AS INTERVAL), CAST(NULL AS TIMESTAMP), CAST('6 days' AS INTERVAL));

SELECT TIME_BUCKET(CAST('1 month 1 day' AS INTERVAL), CAST(NULL AS TIMESTAMP), CAST('2022-12-20 10:00:00' AS TIMESTAMP));

SELECT TIME_BUCKET(CAST('-1 month' AS INTERVAL), CAST(NULL AS TIMESTAMP));

SELECT TIME_BUCKET(CAST('-1 month' AS INTERVAL), CAST(NULL AS TIMESTAMP), CAST('6 days' AS INTERVAL));

SELECT TIME_BUCKET(CAST('-1 month' AS INTERVAL), CAST('2022-12-22 10:00:00' AS TIMESTAMP), CAST(NULL AS INTERVAL));

SELECT TIME_BUCKET(CAST('-1 month' AS INTERVAL), CAST(NULL AS TIMESTAMP), CAST('2022-12-20 10:00:00' AS TIMESTAMP));

SELECT TIME_BUCKET(CAST('-1 month' AS INTERVAL), CAST('2022-12-22' AS TIMESTAMP), CAST(NULL AS TIMESTAMP));

PRAGMA enable_verification;

SELECT TRY_STRPTIME('21 June, 2018', '%d %B, %Y');

SELECT TRY_STRPTIME('21/10/2018', '%d/%m/%Y');

SELECT TRY_STRPTIME('2018-20-10', '%Y-%d-%m');

SELECT TRY_STRPTIME('20182010', '%Y%d%m');

SELECT TRY_STRPTIME('Mon 30, June 2003, 12:03:10 AM', '%a %d, %B %Y, %I:%M:%S %p');

SELECT TRY_STRPTIME('Mon 30, June 2003, 12:03:10 PM', '%a %d, %B %Y, %I:%M:%S %p');

SELECT TRY_STRPTIME('Mon 30, December 2003, 7:3:5 PM', '%a %d, %B %Y, %I:%M:%S %p');

SELECT TRY_STRPTIME('Tuesday 30, December 2003, 7:3:5 PM', '%A %d, %B %Y, %I:%M:%S %p');

SELECT TRY_STRPTIME('Mon 30, December 30, 7:3:5 PM', '%a %d, %B %y, %I:%M:%S %p');

SELECT TRY_STRPTIME('Mon 30, June 2003, 12:03:10 AM', '%a %-d, %B %Y, %-I:%-M:%-S %p');

SELECT TRY_STRPTIME('mon', '%a');

SELECT TRY_STRPTIME('tuesday', '%A');

SELECT TRY_STRPTIME('jun', '%b');

SELECT TRY_STRPTIME('1', '%W');

SELECT TRY_STRPTIME('1', '%U');

SELECT TRY_STRPTIME('1', '%V');

SELECT TRY_STRPTIME('30', '%U'), STRFTIME(CAST('1900-07-29' AS DATE), '%U');

SELECT TRY_STRPTIME('30', '%W'), STRFTIME(CAST('1900-07-23' AS DATE), '%W');

SELECT TRY_STRPTIME('30', '%V'), STRFTIME(CAST('1900-07-23' AS DATE), '%V');

SELECT TRY_STRPTIME('6', '%w');

SELECT TRY_STRPTIME('6', '%u');

SELECT TRY_STRPTIME('1-4', '%U-%w'), STRFTIME(CAST('1900-01-11' AS DATE), '%U-%w');

SELECT TRY_STRPTIME('2-4', '%V-%u'), STRFTIME(CAST('1900-01-11' AS DATE), '%V-%u');

SELECT TRY_STRPTIME('1-4', '%W-%w'), STRFTIME(CAST('1900-01-04' AS DATE), '%W-%w');

SELECT TRY_STRPTIME('1-4', '%V-%u'), STRFTIME(CAST('1900-01-04' AS DATE), '%V-%u');

SELECT TRY_STRPTIME('30', '%j'), STRFTIME(CAST('1900-01-30' AS DATE), '%-j');

SELECT TRY_STRPTIME('1992-01-30 30', '%Y-%m-%d %j');

SELECT TRY_STRPTIME('2021-19-4', '%Y-%U-%w'), STRFTIME(CAST('2021-05-13' AS DATE), '%Y-%U-%w');

SELECT TRY_STRPTIME('2021-19-4', '%Y-%W-%w'), STRFTIME(CAST('2021-05-13' AS DATE), '%Y-%U-%w');

SELECT TRY_STRPTIME('2021-19-4', '%G-%V-%u'), STRFTIME(CAST('2021-05-13' AS DATE), '%G-%V-%u');

SELECT TRY_STRPTIME('2021-0-5', '%Y-%U-%w'), STRFTIME(CAST('2021-01-01' AS DATE), '%Y-%U-%w');

SELECT TRY_STRPTIME('2021-0-5', '%Y-%W-%w'), STRFTIME(CAST('2021-01-01' AS DATE), '%Y-%W-%w');

SELECT TRY_STRPTIME('2021-1-5', '%G-%V-%u'), STRFTIME(CAST('2021-01-08' AS DATE), '%G-%V-%u');

SELECT TRY_STRPTIME('2021-05-12 19-4', '%Y-%m-%d %U-%w');

SELECT TRY_STRPTIME('2021-05-12 19-4', '%Y-%m-%d %W-%w');

SELECT TRY_STRPTIME('2021-05-12 19-4', '%Y-%m-%d %V-%u');

SELECT * FROM (SELECT dt, STRFTIME(dt, '%Y-%U-%w') AS ft, TRY_STRPTIME(STRFTIME(dt, '%Y-%U-%w'), '%Y-%U-%w') AS rt FROM (SELECT CAST('2021-01-01' AS DATE) + (INTERVAL (d) DAY) AS dt FROM RANGE(0, 365) AS tbl(d)) AS days) AS diffs WHERE rt <> dt;

SELECT * FROM (SELECT dt, STRFTIME(dt, '%Y-%W-%w') AS ft, TRY_STRPTIME(STRFTIME(dt, '%Y-%W-%w'), '%Y-%W-%w') AS rt FROM (SELECT CAST('2021-01-01' AS DATE) + (INTERVAL (d) DAY) AS dt FROM RANGE(0, 365) AS tbl(d)) AS days) AS diffs WHERE rt <> dt;

SELECT * FROM (SELECT dt, STRFTIME(dt, '%G-%V-%u') AS ft, TRY_STRPTIME(STRFTIME(dt, '%G-%V-%u'), '%G-%V-%u') AS rt FROM (SELECT CAST('2021-01-01' AS DATE) + (INTERVAL (d) DAY) AS dt FROM RANGE(0, 365) AS tbl(d)) AS days) AS diffs WHERE rt <> dt;

SELECT TRY_STRPTIME('', '');

SELECT TRY_STRPTIME(NULL, '');

SELECT TRY_STRPTIME('', NULL);

SELECT TRY_STRPTIME('Jun 30 2003  2:03:10AM', '%b %d %Y %-I:%M:%S%p');

SELECT TRY_STRPTIME('2020-12-31 21:25:58.745232', '%Y-%m-%d %H:%M:%S.%f');

SELECT TRY_STRPTIME('2020-12-31 21:25:58.745232', '%Y-%m-%d %H:%M:%S.%f');

SELECT TRY_STRPTIME('2020-12-31 21:25:58.745232+00', '%Y-%m-%d %H:%M:%S.%f%z');

SELECT TRY_STRPTIME('2020-12-31 21:25:58.745232+0000', '%Y-%m-%d %H:%M:%S.%f%z');

SELECT TRY_STRPTIME('2020-12-31 21:25:58.745232+02', '%Y-%m-%d %H:%M:%S.%f%z');

SELECT TRY_STRPTIME('2020-12-31 21:25:58.745232-02', '%Y-%m-%d %H:%M:%S.%f%z');

SELECT TRY_STRPTIME('2020-12-31 21:25:58.745232+0215', '%Y-%m-%d %H:%M:%S.%f%z');

SELECT TRY_STRPTIME('2020-12-31 21:25:58.745232-0215', '%Y-%m-%d %H:%M:%S.%f%z');

SELECT TRY_STRPTIME('2020-12-31 03:25:58.745232+04', '%Y-%m-%d %H:%M:%S.%f%z');

SELECT TRY_STRPTIME('2020-12-30 23:25:58.745232-04', '%Y-%m-%d %H:%M:%S.%f%z');

SELECT TRY_STRPTIME('Mon Oct 17 2022 22:00:00 GMT+0000 (GMT)', '%a %b %d %Y %X GMT%z (%Z)') AS fixed;

SELECT TRY_STRPTIME('Mon Oct 17 2022 22:00:00 GMT+0000 (GMT', '%a %b %d %Y %X GMT%z (%Z') AS working;

SELECT TRY_STRPTIME('Mon Oct 17 2022 22:00:00 GMT+0000 (GMT)', '%a %b %d %Y %X GMT%z (%Z') AS broken;

SELECT TRY_STRPTIME('10/28/1910', ['%d-%m-%Y', '%m-%d-%Y', '%d/%m/%Y', '%m/%d/%Y']);

SELECT TRY_STRPTIME('10.28.1910', ['%d-%m-%Y', '%m-%d-%Y', '%d/%m/%Y', '%m/%d/%Y']);

SELECT TRY_STRPTIME('2020-12-31 21:25:58.745232+0', '%Y-%m-%d %H:%M:%S.%f%z');

SELECT TRY_STRPTIME('2020-12-31 21:25:58.745232+0X', '%Y-%m-%d %H:%M:%S.%f%z');

SELECT TRY_STRPTIME('2020-12-31 21:25:58.745232+X0', '%Y-%m-%d %H:%M:%S.%f%z');

SELECT TRY_STRPTIME('2020-12-31 21:25:58.745232+000', '%Y-%m-%d %H:%M:%S.%f%z');

SELECT TRY_STRPTIME('2020-12-31 21:25:58.745232X00', '%Y-%m-%d %H:%M:%S.%f%z');

SELECT TRY_STRPTIME('2018-20-10', '%Y-%m-%d');

SELECT TRY_STRPTIME('2018-10-100', '%Y-%m-%d');

SELECT TRY_STRPTIME('969-10-10', '%y-%m-%d');

SELECT TRY_STRPTIME('2000/10/10', '%Y-%m-%d');

SELECT TRY_STRPTIME('2001-02-30', '%Y-%m-%d');

SELECT TRY_STRPTIME('2000-10-hello', '%Y-%m-%d');

SELECT TRY_STRPTIME('2000-10-01 24:00:00', '%Y-%m-%d %H:%M:%S');

SELECT TRY_STRPTIME('2000-10-01 00:00:00 AM', '%Y-%m-%d %I:%M:%S %p');

SELECT TRY_STRPTIME('2000-10-01 13:00:00 AM', '%Y-%m-%d %I:%M:%S %p');

SELECT TRY_STRPTIME('2000-10-01 23:60:00', '%Y-%m-%d %H:%M:%S');

SELECT TRY_STRPTIME('2000-10-01 23:59:60', '%Y-%m-%d %H:%M:%S');

SELECT TRY_STRPTIME('2000-10-01 23:59:59.10000000', '%Y-%m-%d %H:%M:%S.%f');

SELECT TRY_STRPTIME('2000-10-01 23:59:59.1000000000000000000000000000', '%Y-%m-%d %H:%M:%S.%f');

SELECT TRY_STRPTIME('', '%Y-%m-%d %H:%M:%S.%f');

SELECT TRY_STRPTIME('', '%p');

SELECT TRY_STRPTIME('a', '%p');

SELECT TRY_STRPTIME('mp', '%p');

SELECT TRY_STRPTIME('pp', '%p');

SELECT TRY_STRPTIME('zm', '%p');

SELECT TRY_STRPTIME('moa', '%a');

SELECT TRY_STRPTIME('moaday', '%A');

SELECT TRY_STRPTIME('mondayy', '%A');

SELECT TRY_STRPTIME('juk', '%b');

SELECT TRY_STRPTIME('juke', '%B');

SELECT TRY_STRPTIME('junee', '%B');

SELECT TRY_STRPTIME('500', '%j');

SELECT TRY_STRPTIME('500', '%-j');

SELECT TRY_STRPTIME('0', '%j');

SELECT TRY_STRPTIME('0', '%-j');

SELECT TRY_STRPTIME('60', '%U');

SELECT TRY_STRPTIME('60', '%W');

SELECT TRY_STRPTIME('60', '%V');

SELECT TRY_STRPTIME('9', '%w');

SELECT TRY_STRPTIME('9', '%u');

SELECT TRY_STRPTIME('20 19', '%U %W');

SELECT TRY_STRPTIME('20 19', '%U %V');

SELECT TRY_STRPTIME('20 2021', '%U %G');

SELECT TRY_STRPTIME('20 19', '%U %j');

SELECT TRY_STRPTIME('20 19', '%W %U');

SELECT TRY_STRPTIME('20 19', '%W %V');

SELECT TRY_STRPTIME('20 2021', '%W %G');

SELECT TRY_STRPTIME('20 19', '%W %j');

SELECT TRY_STRPTIME('20 19', '%V %U');

SELECT TRY_STRPTIME('20 19', '%V %W');

SELECT TRY_STRPTIME('20 19', '%V %j');

SELECT TRY_STRPTIME('2021 19', '%G %U');

SELECT TRY_STRPTIME('2021 19', '%G %W');

SELECT TRY_STRPTIME('2021 19', '%G %j');

SELECT TRY_STRPTIME('2021 1950', '%G %Y');

SELECT TRY_STRPTIME('2021 1950', '%Y %G');

SELECT TRY_STRPTIME('20 1950', '%V %Y');

SELECT TRY_STRPTIME('2021 19', '%Y %V');

SELECT TRY_STRPTIME('Mon 30, December 30, 20:3:5 PM', '%a %d, %B %y, %H:%M:%S %p');

SELECT TRY_STRPTIME('9999999', '%f');

SELECT TRY_STRPTIME('9999', '%g');

SELECT TRY_STRPTIME('21/10/2018', '%-q/%m/%Y');

SELECT TRY_STRPTIME('2000/10/10', CAST(RANDOM() AS TEXT));

PRAGMA enable_verification;

CREATE TABLE timetzs (d TIMETZ, s TEXT);

INSERT INTO timetzs VALUES (NULL, NULL), ('00:00:00+1559', 'timezone'), ('00:00:00+1558', 'timezone_hour'), ('02:30:00', 'hour'), ('02:30:00+04', 'timezone_hour'), ('02:30:00+04:30', 'timezone_minute'), ('02:30:00+04:30:45', 'timezone_minute'), ('16:15:03.123456', 'microseconds'), ('02:30:00+1200', 'minute'), ('02:30:00-1200', 'second'), ('24:00:00-1558', 'timezone_hour'), ('24:00:00-1559', 'timezone');

SELECT DATE_PART(CAST(NULL AS TEXT), CAST(NULL AS TIMETZ)) FROM timetzs;

SELECT DATE_PART(s, CAST(NULL AS TIMETZ)) FROM timetzs;

SELECT DATE_PART(NULL, d) FROM timetzs;

SELECT DATE_PART(s, CAST('14:28:50.447+07:15' AS TIMETZ)) FROM timetzs;

SELECT DATE_PART('hour', d) FROM timetzs;

SELECT DATE_PART(s, d) FROM timetzs;

SELECT DATE_PART('${datepart}', CAST('10:00:00' AS TIMETZ));

SELECT ERA(d) FROM timetzs;

SELECT YEAR(d) FROM timetzs;

SELECT MONTH(d) FROM timetzs;

SELECT DAY(d) FROM timetzs;

SELECT DECADE(d) FROM timetzs;

SELECT CENTURY(d) FROM timetzs;

SELECT MILLENNIUM(d) FROM timetzs;

SELECT QUARTER(d) FROM timetzs;

SELECT DAYOFWEEK(d) FROM timetzs;

SELECT ISODOW(d) FROM timetzs;

SELECT DAYOFYEAR(d) FROM timetzs;

SELECT WEEK(d) FROM timetzs;

SELECT YEARWEEK(d) FROM timetzs;

SELECT EXTRACT(DOW FROM CAST('10:00:00' AS TIME));

SELECT EXTRACT(DOY FROM CAST('10:00:00' AS TIME));

SELECT EXTRACT(YEARWEEK FROM CAST('10:00:00' AS TIME));

SELECT EXTRACT(CENTURY FROM CAST('10:00:00' AS TIME));

SELECT EXTRACT(ERA FROM CAST('10:00:00' AS TIME));

SELECT DATE_PART('era', CAST('10:00:00' AS TIME));

SELECT EXTRACT(JULIAN FROM CAST('10:00:00' AS TIME));

SELECT DATE_PART('julian', CAST('10:00:00' AS TIME));

SELECT DATE_PART('julian', CAST('10:00:00' AS TIME));

SELECT d, DATE_PART('${partcode}', d) AS p, DATE_PART(['${partcode}'], d) AS st FROM timetzs WHERE p <> st['${partcode}'];

SELECT d, DATE_PART(['hour', 'minute', 'microsecond'], d) AS parts FROM timetzs ORDER BY 1;

SELECT d, DATE_PART(['epoch', 'second', 'timezone', 'timezone_hour', 'timezone_minute'], d) AS parts FROM timetzs ORDER BY 1;

SELECT d, EPOCH_NS(d) FROM timetzs ORDER BY ALL;

SELECT d, EPOCH_US(d) FROM timetzs ORDER BY ALL;

SELECT d, EPOCH_MS(d) FROM timetzs ORDER BY ALL;

SELECT d, NANOSECOND(d) FROM timetzs ORDER BY ALL;

SELECT d, DATE_PART(['${datepart}'], d) AS parts FROM timetzs ORDER BY 1;

CREATE TABLE timetzs (i TIMETZ);

INSERT INTO timetzs VALUES (NULL), ('00:00:00+1559'), ('00:00:00+1558'), ('02:30:00'), ('02:30:00+04'), ('02:30:00+04:30'), ('02:30:00+04:30:45'), ('16:15:03.123456'), ('02:30:00+1200'), ('02:30:00-1200'), ('24:00:00-1558'), ('24:00:00-1559');

SELECT EXTRACT(SECOND FROM i) FROM timetzs;

SELECT EXTRACT(MINUTE FROM i) FROM timetzs;

SELECT EXTRACT(HOUR FROM i) FROM timetzs;

SELECT EXTRACT(MILLISECONDS FROM i) FROM timetzs;

SELECT EXTRACT(MICROSECONDS FROM i) FROM timetzs;

SELECT EXTRACT(EPOCH FROM i) FROM timetzs;

SET CALENDAR = 'gregorian';

SET TIMEZONE = 'America/Phoenix';

SELECT CAST('01:00:00' AS TIMETZ) AS ttz;

SELECT CAST('01:00:00+02' AS TIMETZ) AS ttz;

CREATE TABLE time_testtz AS SELECT CAST(i AS TIMETZ) AS t FROM GENERATE_SERIES(CAST('2001-04-10' AS TIMESTAMPTZ), CAST('2001-04-11' AS TIMESTAMPTZ), INTERVAL '30' MINUTE) AS t(i);

SELECT TYPEOF(t) FROM (SELECT t FROM time_testtz GROUP BY t) LIMIT 1;

BEGIN;

CREATE TEMPORARY TABLE t1 AS SELECT UUID() AS a FROM RANGE(0, 16);

CREATE TEMPORARY TABLE t2 AS SELECT UUID() AS b FROM RANGE(0, 16);

CREATE TEMPORARY TABLE t3 AS SELECT UUID() AS c FROM RANGE(0, 16);

SELECT COUNT(*) FROM (SELECT a FROM t1 JOIN t2 ON (a = b) JOIN t3 ON (b = c)) AS s1;

ROLLBACK;

CREATE TABLE uuids (u UUID NOT NULL DEFAULT UUID(), a INT);

INSERT INTO uuids (a) VALUES (1), (2), (3), (4), (5), (6), (7), (8), (9), (10);

SELECT COUNT(DISTINCT u) FROM uuids;

SELECT * FROM uuids ORDER BY UUID();

SELECT UUID() FROM uuids;
SELECT UUIDV4() FROM uuids;
SELECT UUIDV7() FROM uuids;

SELECT DISTINCT SUBSTRING(CAST(UUID() AS TEXT), 15, 1) FROM RANGE(0, 100);

SELECT DISTINCT SUBSTRING(CAST(UUIDV4() AS TEXT), 15, 1) FROM RANGE(0, 100);

SELECT DISTINCT SUBSTRING(CAST(UUIDV7() AS TEXT), 15, 1) FROM RANGE(0, 100);

SELECT DISTINCT SUBSTRING(CAST(UUID() AS TEXT), 20, 1) AS x FROM RANGE(0, 100) ORDER BY x;

SELECT UUID_EXTRACT_VERSION('ac227128-7d55-7ee0-a765-5025cc52e55a');

SELECT UUID_EXTRACT_VERSION(UUIDV7());

SELECT UUID_EXTRACT_VERSION('ac227128-7d55-4ee0-a765-5025cc52e55a');

SELECT UUID_EXTRACT_VERSION(UUIDV4());

SELECT UUID_EXTRACT_VERSION(UUID());

SELECT UUID_EXTRACT_TIMESTAMP(UUIDV4());

SELECT UUID_EXTRACT_TIMESTAMP('81948644-15b2-7170-839a-7a01b9fb5951');

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

CREATE TABLE unit (price INT, amount_sold INT);

CREATE TABLE unit (price INT, amount_sold INT);

INSERT INTO unit VALUES (5, 4);

ALTER TABLE unit ADD COLUMN profit_total BOOLEAN GENERATED ALWAYS AS(non_existant_function() * price) VIRTUAL;

ALTER TABLE unit ADD COLUMN profit_total BOOLEAN GENERATED ALWAYS AS(price) VIRTUAL;

ALTER TABLE unit ADD COLUMN total_profit BOOLEAN GENERATED ALWAYS AS((SELECT 1)) VIRTUAL;

ALTER TABLE unit ADD COLUMN total_profit INTEGER GENERATED ALWAYS AS (price * amount_sold) VIRTUAL;

INSERT INTO unit (total_profit) VALUES (1);

INSERT INTO unit VALUES (1, 1, 1);

INSERT INTO unit VALUES (0, 1);

SELECT * FROM unit;

PRAGMA enable_verification;

CREATE TABLE unit (price INT, amount_sold INT, total_profit AS (price * amount_sold));

CREATE TABLE unit2 (price INT, amount_sold INT, total_profit AS (price / amount_sold), profit_total AS (unit2.price * unit2.amount_sold));

CREATE TABLE unit2 (price INT, amount_sold INT, total_profit AS (price / amount_sold), profit_total AS (price * amount_sold));

INSERT INTO unit VALUES (5, 4);

SELECT total_profit FROM unit, unit2;

INSERT INTO unit2 VALUES (100, 4);

SELECT unit.total_profit FROM unit, unit2;

SELECT unit.total_profit FROM unit AS unit2, unit2 AS unit;

SELECT profit_total FROM unit2;

PRAGMA enable_verification;

CREATE TABLE unit (price INT, amount_sold INT, total_profit AS (price * amount_sold), profit_total AS (total_profit), dependent AS (profit_total), also_dependent AS (profit_total * dependent), dont_delete_me AS (amount_sold));

INSERT INTO unit VALUES (5, 4);

SELECT * FROM unit;

ALTER TABLE unit DROP COLUMN price;

ALTER TABLE unit DROP COLUMN price CASCADE;

SELECT * FROM unit;

INSERT INTO unit VALUES (5);

SELECT * FROM unit;

ALTER TABLE unit DROP COLUMN dont_delete_me;

SELECT * FROM unit;

ALTER TABLE unit DROP COLUMN amount_sold CASCADE;

SELECT * FROM unit;

PRAGMA enable_verification;

CREATE TABLE tbl (price INT, total_price AS (CAST((price) AS DATE)));

INSERT INTO tbl VALUES (5);

CREATE TABLE a (gen_x AS (x), gen_y AS (y), x TEXT, y INT);

INSERT INTO a VALUES ('hello', 42);

SELECT * FROM a;

ALTER TABLE a ALTER COLUMN gen_x SET DATA TYPE BOOLEAN;

PRAGMA enable_verification;

CREATE TABLE unit (price INT, amount_sold AS (price) CHECK (price > 5));

CREATE TABLE tbl (price INT, amount_sold AS (price) CHECK (amount_sold > 5));

CREATE TABLE tbl (price INT, amount_sold AS (price), CHECK (amount_sold > price));

CREATE TABLE chk (g1 AS (x), g2 AS (x), x INT, CHECK (x > 5));

INSERT INTO chk VALUES (6);

INSERT INTO chk VALUES (3);

PRAGMA enable_verification;

CREATE TABLE tbl (gcol1 AS (gcol10), gcol2 AS (gcol4), gcol3 AS (gcol7), gcol4 AS (gcol6), gcol5 AS (x), gcol6 AS (gcol2), gcol7 AS (gcol8), gcol8 AS (gcol1), gcol9 AS (gcol2), gcol10 AS (gcol3), x INT);

CREATE TABLE tbl (gcol1 AS (gcol2), gcol2 AS (gcol3), gcol3 AS (gcol4), gcol4 AS (gcol5), gcol5 AS (gcol6), gcol6 AS (gcol7), gcol7 AS (gcol8), gcol8 AS (gcol9), gcol9 AS (gcol10), gcol10 AS (x), x INT);

CREATE TABLE circular (a AS (k), k AS (j), j AS (i), i AS (h), h AS (g), g AS (f), f AS (e), e AS (d), d AS (c), c AS (b), b AS (a), x INT);

PRAGMA enable_verification;

CREATE TABLE tbl (price TEXT, also_price TEXT AS (price) COLLATE NOCASE);

CREATE TABLE coll (g1 AS (x), g2 AS (x), x TEXT COLLATE NOCASE);

INSERT INTO coll VALUES ('string'), ('STRING');

PRAGMA enable_verification;

CREATE TEMPORARY TABLE t0 (c0 AS (1));

CREATE TEMPORARY TABLE t0 (c0 AS (1));

CREATE TEMPORARY TABLE t0 (c0 AS (1));

CREATE TEMPORARY TABLE t0 (c0 AS (1));

SELECT * FROM tbl;

INSERT INTO tbl VALUES ('string', 5, 12);

INSERT INTO tbl VALUES ('string', 5, 12);

CREATE MACRO my_macro() AS (
(select 42)
);

CREATE MACRO my_macro() AS (
(select 42)
);

CREATE MACRO my_macro() AS (
(select 42)
);

CREATE MACRO my_macro() AS (
(select 42)
);

INSERT INTO unit VALUES (5, 4);

SELECT * FROM unit;

ALTER TABLE unit DROP COLUMN total_profit;

SELECT total_profit FROM unit;

PRAGMA enable_verification;

CREATE TABLE unit (price INT, amount_sold INT);

INSERT INTO unit VALUES (5, 4);

INSERT INTO unit VALUES (4, 5);

ALTER TABLE unit ADD COLUMN total_profit INTEGER DEFAULT 1 GENERATED ALWAYS AS (price * amount_sold) VIRTUAL;

SELECT total_profit FROM unit;

SELECT total_profit FROM unit;

SELECT * FROM unit2;

CREATE TABLE tbl (g1 AS (x), g2 AS (x), x INT DEFAULT (5));

PRAGMA enable_verification;

CREATE TABLE unit (price INT, amount_sold INT, total_profit AS (price * amount_sold));

INSERT INTO unit VALUES (5, 4);

ALTER TABLE unit DROP COLUMN total_profit;

SELECT total_profit FROM unit;

PRAGMA enable_verification;

CREATE TABLE unit (price INT, amount_sold INT);

INSERT INTO unit VALUES (5, 4);

ALTER TABLE unit ADD COLUMN total_profit INTEGER GENERATED ALWAYS AS (price * amount_sold) VIRTUAL;

ALTER TABLE unit DROP COLUMN price;

CREATE TABLE tbl (price INT, total_profit AS (price));

ALTER TABLE tbl DROP COLUMN price;

PRAGMA enable_verification;

CREATE TABLE tbl1 (a INT UNIQUE);

CREATE TABLE tbl2 (a INT, b AS (a) REFERENCES tbl1 (a));

CREATE TABLE tbl2 (a INT, b AS (a), FOREIGN KEY (b) REFERENCES tbl1 (a));

CREATE TABLE tbl2 (price INT, also_price AS (price) UNIQUE);

CREATE TABLE tbl2 (price INT, also_price AS (price));

CREATE TABLE tbl3 (a INT, FOREIGN KEY (a) REFERENCES tbl2 (also_price));

CREATE TABLE a (a_gen1 AS (a_reg), a_gen2 AS (a_reg), a_reg INT, PRIMARY KEY (a_reg));

CREATE TABLE b (gen1 AS (price), gen2 AS (price), price INT, FOREIGN KEY (price) REFERENCES a (a_reg));

INSERT INTO a VALUES (5);

INSERT INTO a VALUES (5);

PRAGMA enable_verification;

CREATE TABLE album (gen_artistid AS (artistid), gen_albumname AS (albumname), artistid INT, albumname TEXT, albumcover TEXT, UNIQUE (artistid, albumname));

INSERT INTO album VALUES (1, 'A', 'A_cover'), (2, 'B', 'B_cover'), (3, 'C', 'C_cover'), (4, 'D', 'D_cover');

CREATE TABLE song (songid INT, songartist INT, songalbum TEXT, songname TEXT, FOREIGN KEY (songartist, songalbum) REFERENCES album (artistid));

CREATE TABLE song (songid INT, songartist INT, songalbum TEXT, songname TEXT, FOREIGN KEY (songalbum) REFERENCES album (artistid, albumname));

CREATE TABLE song (songid INT, songartist INT, songalbum TEXT, songname TEXT, FOREIGN KEY (songartist, songalbum) REFERENCES albumlist (artistid, albumname));

CREATE TABLE song (songid INT, songartist INT, songalbum TEXT, songname TEXT, FOREIGN KEY (songartist, songalbum) REFERENCES album (artistid, album_name));

CREATE TABLE song (songid INT, songartist INT, songalbum TEXT, songname TEXT, FOREIGN KEY (songartist, song_album) REFERENCES album (artistid, albumname));

CREATE TABLE song (songid INT, songartist INT, songalbum TEXT, songname TEXT, FOREIGN KEY (songartist, songalbum) REFERENCES album (artistid, albumname));

INSERT INTO song VALUES (11, 1, 'A', 'A_song'), (12, 2, 'E', 'B_song'), (13, 3, 'C', 'C_song');

INSERT INTO song VALUES (11, 1, 'A', 'A_song'), (12, 5, 'D', 'B_song'), (13, 3, 'C', 'C_song');

INSERT INTO song VALUES (11, 1, 'A', 'A_song'), (12, 2, 'B', 'B_song'), (13, 3, 'C', 'C_song');

DELETE FROM album WHERE albumname = 'D';

SELECT * FROM album;

PRAGMA enable_verification;

CREATE TABLE unit (price INT, amount_sold INT);

INSERT INTO unit VALUES (5, 4);

ALTER TABLE unit ADD COLUMN total_profit INTEGER GENERATED ALWAYS AS (price * amount_sold) VIRTUAL;

SELECT total_profit FROM unit;

ALTER TABLE unit ADD COLUMN also_total_profit INTEGER GENERATED ALWAYS AS (total_profit) VIRTUAL;

SELECT also_total_profit FROM unit;

SELECT also_total_profit FROM unit;

INSERT INTO unit2 VALUES (100, 0);

SELECT * FROM unit2;

CREATE TABLE t (i INT, j INT AS (1));

SELECT column_default FROM duckdb_columns;

PRAGMA enable_verification;

PRAGMA enable_verification;

INSERT INTO tbl VALUES (1, 24), (2342, 123), (23523, 1), (235, 213), (8435, NULL), (NULL, NULL), (345, 213), (12, 5);

INSERT INTO tbl SELECT i % 20, CAST(RANDOM() AS INT) * 20 FROM RANGE(0, 100) AS tbl(i);

CREATE TABLE non_generated AS SELECT * FROM tbl;

SELECT sql FROM sqlite_master WHERE name = 'tbl' AND CONTAINS(sql, 'GENERATED');

SELECT sql FROM sqlite_master WHERE name = 'non_generated' AND CONTAINS(sql, 'GENERATED');

SELECT * FROM tbl;

SELECT * FROM non_generated;

SELECT * FROM non_generated;

SELECT * FROM non_generated;

SELECT * FROM non_generated;

SELECT * FROM non_generated;

SELECT * FROM non_generated;

PRAGMA enable_verification;

PRAGMA enable_verification;

CREATE TABLE unit (foo INT, bar AS (foo + 1));

CREATE TABLE unit (foo INT, bar AS (foo + 1));

INSERT INTO test (foo) VALUES (1);

SELECT bar FROM test;

INSERT INTO unit VALUES (5);

SELECT bar FROM unit;

PRAGMA enable_verification;

PRAGMA enable_verification;

INSERT INTO test (bar) VALUES (5);

INSERT INTO test (foo, foobar) VALUES (1, 10);

INSERT INTO test (foo) VALUES (12);

SELECT * FROM test;

INSERT INTO test VALUES (22);

INSERT INTO test VALUES (22, 10);

INSERT INTO test VALUES (22, 10, 10);

CREATE TABLE tbl (x INT, y BOOLEAN AS (x));

INSERT INTO tbl VALUES (5);

SELECT * FROM tbl;

INSERT INTO tbl VALUES (0);

SELECT * FROM tbl;

CREATE TABLE tbl2 (x TEXT, y BOOLEAN AS (x));

INSERT INTO tbl2 VALUES ('test');

PRAGMA enable_verification;

CREATE TABLE t1 (c1 AS (8), c0 INT);

SELECT 1 FROM t1 NATURAL JOIN t1 AS t2 GROUP BY c1;

CREATE TABLE t2 (c1 AS (j * 5), j INT);

INSERT INTO t2 VALUES (4);

SELECT 1 FROM t2 NATURAL JOIN t2 AS t3 GROUP BY c1;

PRAGMA enable_verification;

CREATE TABLE tbl (price INT, amount_sold INT, gcol AS (LIST(5, 4, 3)));

CREATE TABLE tbl (price INT, gcol AS (MAP()));

INSERT INTO tbl VALUES (5);

SELECT * FROM tbl;

PRAGMA enable_verification;

CREATE TABLE unit (price INT, amount_sold AS NOT (price) NULL);

CREATE TABLE tbl (gen1 AS (price), gen2 AS (price), price INT NOT NULL);

INSERT INTO tbl VALUES (5);

INSERT INTO tbl VALUES (NULL);

PRAGMA enable_verification;

CREATE TABLE unit (price INT, amount_sold INT, name TEXT, total_profit AS (price * amount_sold));

INSERT INTO unit VALUES (5, 4, 'Soda can');

INSERT INTO unit VALUES (5, 8, 'Mars bar');

INSERT INTO unit VALUES (4, 5, 'Chewing gum');

SELECT total_profit, COUNT(total_profit), SUM(amount_sold), SUM(price) FROM unit GROUP BY total_profit ORDER BY ALL;

SELECT total_profit, name, COUNT(total_profit) OVER (PARTITION BY total_profit) AS CountTotalProfit, SUM(amount_sold) OVER (PARTITION BY total_profit) AS SumAmountSold, SUM(price) OVER (PARTITION BY total_profit) AS SumPrice FROM unit ORDER BY 1, 2 DESC;

PRAGMA enable_verification;

PRAGMA enable_verification;

INSERT INTO test (foo, foobar) VALUES (1, 10);

SELECT * FROM test;

PRAGMA enable_verification;

CREATE TABLE unit (price INT, amount_sold AS (price) PRIMARY KEY);

CREATE TABLE unit (price INT, amount_sold AS (price), PRIMARY KEY (amount_sold));

CREATE TABLE tbl (gen1 AS (price), gen2 AS (price), price INT PRIMARY KEY);

INSERT INTO tbl VALUES (5);

INSERT INTO tbl VALUES (5);

PRAGMA enable_verification;

CREATE TABLE unit (price INT, amount_sold INT, total_profit AS (price * amount_sold), profit_total AS (total_profit * 5));

INSERT INTO unit VALUES (5, 4);

INSERT INTO unit VALUES (4, 5);

SELECT * FROM unit;

CREATE TABLE tbl2 (circular INT AS (dependency), dependency INT AS (circular));

CREATE TABLE tbl2 (price INT, circular AS (dependency * price), dependency AS (price));

CREATE TABLE tbl3 (dependency INT AS (price), price INT, circular AS (dependency));

CREATE TABLE tbl (price INT, dependency INT AS (price), circular AS (dependency * price));

CREATE TABLE tbl4 (price INT, dependency AS (price), depth1 AS (dependency), depth2 AS (price * dependency), depth3 AS (depth1 * depth2 * dependency), depth4 AS ((dependency * depth3) + depth1), depth5 AS (depth4 - (depth3 + depth2) + (dependency * depth1)));

INSERT INTO tbl4 VALUES (5);

SELECT * FROM tbl4;

INSERT INTO tbl VALUES (5);

SELECT * FROM tbl;

PRAGMA enable_verification;

CREATE TABLE unit (price INT, amount_sold INT, total_profit AS (price * amount_sold));

INSERT INTO unit VALUES (5, 4);

SELECT total_profit FROM unit;

ALTER TABLE unit RENAME COLUMN total_profit TO profit_total;

SELECT profit_total FROM unit;

PRAGMA enable_verification;

CREATE TABLE unit (price INT, amount_sold INT, total_profit AS (price * amount_sold), profit_total AS (total_profit), sold_amount AS (5 + 3));

INSERT INTO unit VALUES (5, 4);

SELECT total_profit FROM unit;

ALTER TABLE unit RENAME COLUMN price TO value;

ALTER TABLE unit DROP COLUMN value;

SELECT * FROM unit;

PRAGMA enable_verification;

CREATE TABLE unit (price INT, amount_sold INT, total_profit AS (price * amount_sold));

INSERT INTO unit VALUES (5, 4);

ALTER TABLE unit RENAME TO not_unit;

SELECT * FROM not_unit;

PRAGMA enable_verification;

CREATE TABLE unit (price INT, amount_sold INT);

INSERT INTO unit VALUES (5, 4);

INSERT INTO unit VALUES (4, 5);

ALTER TABLE unit ADD COLUMN total_profit BIGINT GENERATED ALWAYS AS (price * rowid) VIRTUAL;

ALTER TABLE unit ADD COLUMN rowid INT;

ALTER TABLE unit ADD COLUMN rowid INT;

ALTER TABLE unit ADD COLUMN rowid INT;

INSERT INTO tbl VALUES (5);

SELECT index FROM tbl;

PRAGMA enable_verification;

CREATE TABLE t1 (tr INT, td INT GENERATED ALWAYS AS (tr), tz INT);

CREATE INDEX id ON t1(tr);

INSERT INTO t1 (tr) VALUES (2);

PRAGMA enable_verification;

CREATE TABLE unit (price INT, amount_sold INT);

INSERT INTO unit VALUES (5, 4);

ALTER TABLE unit ADD COLUMN total_profit INTEGER GENERATED ALWAYS AS (price * amount_sold) VIRTUAL;

CREATE TABLE tbl (price INT, amount_sold INT, total_profit AS (price * amount_sold));

INSERT INTO tbl VALUES (5, 4);

SELECT total_profit FROM tbl;

SELECT * FROM tbl;

SELECT tbl.* FROM tbl;

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

SELECT y, amount_sold FROM tbl;

PRAGMA enable_verification;

CREATE TABLE unit (price INT, amount_sold INT, total_profit AS (price * amount_sold));

INSERT INTO unit VALUES (5, 4);

SELECT total_profit FROM unit;

ALTER TABLE unit ALTER COLUMN total_profit SET DATA TYPE BOOLEAN;

INSERT INTO unit VALUES (5, 0);

CREATE TABLE tbl (price INT, total_profit DATE AS (price * 5));

INSERT INTO tbl VALUES (5);

PRAGMA enable_verification;

CREATE TABLE unit (price INT, amount_sold INT, total_profit AS (price * amount_sold));

INSERT INTO unit VALUES (5, 4);

SELECT total_profit FROM unit;

ALTER TABLE unit ALTER COLUMN price SET DATA TYPE BOOLEAN;

SELECT total_profit FROM unit;

SELECT * FROM unit;

PRAGMA enable_verification;

CREATE TABLE unit (bar TEXT, foobar AS (CONCAT(foo, bar)), profit_total AS (foobar), dependent AS (profit_total), also_dependent AS (CONCAT(profit_total, dependent)), foo TEXT);

INSERT INTO unit VALUES ('string', 'test');

SELECT * FROM unit;

PRAGMA enable_verification;

CREATE TABLE unit (price INT, amount_sold AS (price) UNIQUE);

CREATE TABLE unit (price INT, amount_sold AS (price), UNIQUE (amount_sold));

CREATE TABLE tbl (gen1 AS (price), gen2 AS (price), price INT UNIQUE);

INSERT INTO tbl VALUES (5);

INSERT INTO tbl VALUES (5);

PRAGMA enable_verification;

PRAGMA enable_verification;

INSERT INTO test VALUES (5, DEFAULT);

INSERT INTO test VALUES (10, 3);

SELECT * FROM test;

UPDATE test SET bar = 5;

UPDATE test SET foo = 3;

SELECT * FROM test;

UPDATE test SET foo = 9001 WHERE (foobar = 3);

SELECT * FROM test;

UPDATE test SET foo = 0 WHERE (bar < 9000);

SELECT * FROM test;

SELECT * FROM PARQUET_SCAN('hf://');

SELECT * FROM "hf://file.parquet";

SELECT * FROM "hf://yepthisdoesntwork/file.parquet";

SELECT * FROM "hf://stil/not/file.parquet";

SELECT * FROM "hf://datasets/file.parquet";

SELECT * FROM "hf://datasets/myname/file.parquet";

SELECT * FROM "hf://datasets/**/file.parquet";

SELECT * FROM PARQUET_SCAN('hf://datasets/samansmink/non-existent/*.parquet');

SELECT * FROM PARQUET_SCAN('hf://datasets/samansmink/non-existent/**/*.parquet');

SELECT * FROM PARQUET_SCAN('hf://datasets/samansmink/duckdb_ci_tests/hive_data/**/*.parquet', FILENAME = 1, hive_partitioning = 0);

SELECT * FROM PARQUET_SCAN('hf://datasets/samansmink/duckdb_ci_tests/hive_data/*/*/**/*.parquet', FILENAME = 1, hive_partitioning = 0);

SELECT * FROM PARQUET_SCAN('hf://datasets/samansmink/duckdb_ci_tests/hive_data/part=[ab]/**/*.parquet', FILENAME = 1, hive_partitioning = 0);

SET hf_max_per_page = 1;

SELECT * FROM PARQUET_SCAN('hf://datasets/samansmink/duckdb_ci_tests/hive_data/part=[b]/**/*.parquet', FILENAME = 1, hive_partitioning = 0);

reset AS hf_max_per_page;

EXPLAIN analyze SELECT id, part FROM parquet_scan('hf://datasets/samansmink/duckdb_ci_tests/hive_data/**/*.parquet') where part='a';

SET hf_max_per_page = 1;

SELECT * FROM PARQUET_SCAN('hf://datasets/samansmink/duckdb_ci_tests@~parquet/**/*.parquet', FILENAME = 1, hive_partitioning = 0);

CREATE SECRET hf_token (TYPE HUGGINGFACE, token 'some_hf_token');

CREATE SECRET hf_token_from_credential_chain (TYPE HUGGINGFACE, PROVIDER credential_chain);

DROP SECRET hf_token;

DROP SECRET hf_token_from_credential_chain;

SELECT * FROM PARQUET_SCAN('hf://datasets/samansmink/duckdb_ci_private/hive_data/**/*.parquet', FILENAME = 1, hive_partitioning = 0);

SELECT size FROM READ_TEXT('hf://spaces/samansmink/duckdb_ci_tests/README.md');

CREATE SECRET hf1 (TYPE HUGGINGFACE, TOKEN '${HUGGING_FACE_TOKEN}');

SELECT * FROM PARQUET_SCAN('hf://datasets/samansmink/duckdb_ci_private/hive_data/**/*.parquet', FILENAME = 1, hive_partitioning = 0);

DROP SECRET hf1;

CREATE SECRET http1 (TYPE HTTP, BEARER_TOKEN '${HUGGING_FACE_TOKEN}');

SELECT * FROM PARQUET_SCAN('hf://datasets/samansmink/duckdb_ci_private/hive_data/**/*.parquet', FILENAME = 1, hive_partitioning = 0);

DROP SECRET http1;

CREATE SECRET hf2 (TYPE HUGGINGFACE, TOKEN '${HUGGING_FACE_TOKEN}');

CREATE SECRET http2 (TYPE HTTP, BEARER_TOKEN 'hocus pocus this token is bogus');

SELECT * FROM PARQUET_SCAN('hf://datasets/samansmink/duckdb_ci_private/hive_data/**/*.parquet', FILENAME = 1, hive_partitioning = 0);

DROP SECRET hf2;

SELECT * FROM PARQUET_SCAN('hf://datasets/samansmink/duckdb_ci_private/hive_data/**/*.parquet', FILENAME = 1, hive_partitioning = 0);

DROP SECRET http2;

CREATE SECRET http3 (
TYPE HTTP,
EXTRA_HTTP_HEADERS MAP{
'Authorization': 'Bearer ${HUGGING_FACE_TOKEN}',
}
);

SELECT * FROM PARQUET_SCAN('hf://datasets/samansmink/duckdb_ci_private/hive_data/**/*.parquet', FILENAME = 1, hive_partitioning = 0);

DROP SECRET http3
require-env HUGGING_FACE_TOKEN_IN_CACHE;

CREATE SECRET hf1 (TYPE HUGGINGFACE, PROVIDER credential_chain);

SELECT * FROM PARQUET_SCAN('hf://datasets/samansmink/duckdb_ci_private/hive_data/**/*.parquet', FILENAME = 1, hive_partitioning = 0);

CREATE TABLE t1 (foo INT);

CREATE TABLE t1 (foo INT);

PRAGMA enable_verification;

SET immediate_transaction_mode = TRUE;

CREATE TABLE tbl_comp (a INT, b TEXT UNIQUE, gen AS (2 * a), c INT, d TEXT, PRIMARY KEY (c, b));

CREATE UNIQUE INDEX unique_idx ON tbl_comp((d || 'hello'), (a + 42));

CREATE INDEX normal_idx ON tbl_comp(d, a, c);

CREATE UNIQUE INDEX lookup_idx ON tbl_comp(c);

INSERT INTO tbl_comp VALUES (1, 'hello', 1, 'hello');

INSERT INTO tbl_comp VALUES (2, 'hello', 1, 'world') ON CONFLICT(c, b) DO UPDATE SET a = excluded.a, d = excluded.d;

SELECT a, b, gen, c, d FROM tbl_comp WHERE c = 1;

INSERT INTO tbl_comp VALUES (2, 'hola', 5, 'world');

INSERT INTO tbl_comp VALUES (3, 'hoi', 1, 'wereld');

INSERT INTO tbl_comp VALUES (3, 'hoi', 2, 'wereld');

SELECT a, b, gen, c, d FROM tbl_comp ORDER BY ALL;

INSERT INTO tbl_comp VALUES (42, 'hoi', 2, 'welt');

BEGIN;

INSERT INTO tbl_comp VALUES (42, 'hoii', 22, 'welt');

BEGIN;

DELETE FROM tbl_comp;

INSERT INTO tbl_comp VALUES (200, 'hello', 1, 'world'), (300, 'hoi', 2, 'wereld');

SELECT a, b, gen, c, d FROM tbl_comp WHERE c = 2;

SELECT a, b, gen, c, d FROM tbl_comp WHERE c = 1;

COMMIT;

SELECT a, b, gen, c, d FROM tbl_comp ORDER BY ALL;

SELECT a, b, gen, c, d FROM tbl_comp WHERE c = 2;

SELECT a, b, gen, c, d FROM tbl_comp WHERE c = 1;

SELECT a, b, gen, c, d FROM tbl_comp WHERE c = 2;

SELECT a, b, gen, c, d FROM tbl_comp WHERE c = 1;

COMMIT;

SELECT a, b, gen, c, d FROM tbl_comp ORDER BY ALL;

CREATE TABLE tbl (i INT PRIMARY KEY);

CREATE TABLE tbl (i INT PRIMARY KEY);

BEGIN;

BEGIN;

BEGIN;

COMMIT;

SELECT COUNT(*), SUM(i) FROM tbl;

SELECT COUNT(*), SUM(i) FROM tbl;

PRAGMA enable_verification;

CREATE TABLE test1 (id INT PRIMARY KEY, payload TEXT);

CREATE TABLE test2 (id INT PRIMARY KEY, payload TEXT);

INSERT INTO test1 VALUES (1, 'row 1');

INSERT INTO test2 VALUES (1, 'row 1 from test 2');

SELECT id, payload FROM test1;

BEGIN;

DELETE FROM test1 WHERE id = 1;

SELECT id, payload FROM test1;

INSERT INTO test1 SELECT * FROM test2;

SELECT id, payload FROM test1;

COMMIT;

SELECT id, payload FROM test1;

PRAGMA enable_verification;

SET immediate_transaction_mode = TRUE;

CREATE TABLE t_7182 (it INT PRIMARY KEY, jt INT);

CREATE TABLE u_7182 (iu INT PRIMARY KEY, ju INT REFERENCES t_7182 (it));

INSERT INTO t_7182 VALUES (1, 1);

INSERT INTO u_7182 VALUES (1, NULL);

UPDATE u_7182 SET ju = 1 WHERE iu = 1;

SELECT iu, ju, rowid FROM u_7182 WHERE iu = 1;

CREATE TABLE tunion_5807 (id INT PRIMARY KEY, u UNION(i INT));

INSERT INTO tunion_5807 SELECT 1, 41;

UPDATE tunion_5807 SET u = 42 WHERE id = 1;

SELECT id, u, rowid FROM tunion_5807 WHERE id = 1;

CREATE TABLE IF NOT EXISTS workers_5771 (id INT PRIMARY KEY NOT NULL, worker TEXT UNIQUE NOT NULL, phone TEXT NOT NULL);

INSERT INTO workers_5771 VALUES (1, 'wagner', '123');

UPDATE workers_5771 SET phone = '345' WHERE id = 1;

UPDATE workers_5771 SET worker = 'leo' WHERE id = 1;

SELECT id, worker, phone, rowid FROM workers_5771 WHERE id = 1;

CREATE TABLE test_4886 (i INT PRIMARY KEY);

INSERT INTO test_4886 VALUES (1);

BEGIN;

UPDATE test_4886 SET i = 4 WHERE i = 1;

INSERT INTO test_4886 VALUES (1);

COMMIT;

SELECT i, rowid FROM test_4886 ORDER BY ALL;

SELECT i, rowid FROM test_4886 WHERE i = 1;

SELECT i, rowid FROM test_4886 WHERE i = 4;

CREATE TABLE tbl_1631 (id INT PRIMARY KEY, c1 TEXT NOT NULL UNIQUE, c2 TEXT NOT NULL);

INSERT INTO tbl_1631 VALUES (1, 'abc', 'def'), (2, 'asdf', 'jkl');

UPDATE tbl_1631 SET c1 = 'ghi', c2 = 'mno' WHERE id = 2;

SELECT id, c1, c2, rowid FROM tbl_1631 ORDER BY ALL;

CREATE TABLE c_4214 (id INT NOT NULL PRIMARY KEY);

CREATE TABLE a_4214 (id INT NOT NULL PRIMARY KEY, c_id INT NOT NULL, FOREIGN KEY (c_id) REFERENCES c_4214 (id));

INSERT INTO c_4214 (id) VALUES (1), (2);

INSERT INTO a_4214 (id, c_id) VALUES (1, 1);

UPDATE a_4214 SET c_id = 2 WHERE id = 1;

SELECT id, c_id, rowid FROM a_4214 WHERE id = 1;

CREATE TABLE tag_8764 (key TEXT NOT NULL, name TEXT NULL, value TEXT NOT NULL, PRIMARY KEY (key, name));

CREATE UNIQUE INDEX idx_name_8764 ON tag_8764(name);

CREATE UNIQUE INDEX idx_value_8764 ON tag_8764(value);

INSERT INTO tag_8764 (key, name, value) VALUES ('key1', 'name1', 'value1');

UPDATE tag_8764 SET value = 'new_value' WHERE key = 'key1' AND name = 'name1';

SELECT key, name, value, rowid FROM tag_8764;

CREATE TABLE t_11288 (i INT PRIMARY KEY, j MAP(TEXT, TEXT));

INSERT INTO t_11288 VALUES (1, MAP(['a'], ['b']));

UPDATE t_11288 SET j = MAP(['c'], ['d']) WHERE i = 1;

SELECT i, j FROM t_11288 WHERE i = 1;

CREATE TABLE t_4807 (id INT PRIMARY KEY, u UNION(i INT));

INSERT INTO t_4807 SELECT 1, 41;

UPDATE t_4807 SET u = 42 WHERE id = 1;

SELECT id, u, rowid FROM t_4807;

CREATE TABLE t_14133 (i INT PRIMARY KEY, s TEXT);

INSERT INTO t_14133 SELECT i, CAST(i AS TEXT) FROM GENERATE_SERIES(1, 100) AS s(i);

BEGIN;

DELETE FROM t_14133 WHERE i IN (SELECT i FROM GENERATE_SERIES(1, 20) AS s(i));

INSERT OR REPLACE INTO t_14133 SELECT i, CAST((i * 2) AS TEXT) FROM GENERATE_SERIES(1, 20) AS s(i);

COMMIT;

SELECT COUNT(*), MIN(i), MAX(i) FROM t_14133;

CREATE TABLE tbl_6500 (i INT, j INT);

INSERT INTO tbl_6500 VALUES (1, 100), (2, 200);

CREATE UNIQUE INDEX idx_6500 ON tbl_6500(i);

CHECKPOINT;

INSERT OR IGNORE INTO tbl_6500 VALUES (1, 101), (2, 201);

SELECT i, j FROM tbl_6500 ORDER BY ALL;

INSERT INTO tbl_6500 VALUES (1, 101), (2, 201) ON CONFLICT DO NOTHING;

SELECT i, j FROM tbl_6500 ORDER BY ALL;

PRAGMA enable_verification;

CREATE OR REPLACE TABLE t (s UUID, payload STRUCT(k TEXT)[], p STRUCT(e TEXT, s DOUBLE), payload2 STRUCT(x INT)[], other TEXT);

CREATE OR REPLACE TABLE t2 (s UUID, payload STRUCT(k TEXT)[], p STRUCT(e TEXT, s DOUBLE), payload2 STRUCT(x INT)[]);

INSERT INTO t (s, other) (SELECT s, SUBSTRING(CAST(s AS TEXT), 1, 8) AS other FROM (SELECT UUID() AS s FROM RANGE(0, 300000)));

INSERT INTO t2 (SELECT s, [{'k': 'aaaa'}, {'k': 'rrrr'}], {'e': 'ddd', 's': -9.0}, [{'x': 99}, {'x': 100}, {'x': 101}] FROM t WHERE rowid % 2 = 0);

ALTER TABLE t ADD PRIMARY KEY (s);

ALTER TABLE t2 ADD PRIMARY KEY (s);

PRAGMA enable_verification;

SET checkpoint_threshold = '10.0 GB';

PRAGMA disable_checkpoint_on_shutdown;

CREATE TABLE tbl (id INT PRIMARY KEY);

INSERT INTO tbl VALUES (1);

BEGIN;

DELETE FROM tbl WHERE id = 1;

INSERT INTO tbl VALUES (1);

COMMIT;
restart;

INSERT INTO tbl VALUES (1);

PRAGMA enable_verification;

CREATE TABLE a (id INT PRIMARY KEY, c INT);

INSERT INTO a VALUES (1, 4);

BEGIN;

INSERT INTO a SELECT i AS id, NULL AS c FROM RANGE(-2, -250000, -1) AS tbl(i);

INSERT INTO a VALUES (1, 5);

ROLLBACK;

SELECT c FROM a WHERE id = 1;

SELECT * FROM a;

BEGIN;

INSERT INTO a SELECT i AS id, -i AS c FROM RANGE(-2, -250000, -1) AS tbl(i);

INSERT INTO a VALUES (1, 5);

ROLLBACK;

SELECT c FROM a WHERE id = 1;

SELECT * FROM a;

PRAGMA enable_verification;

CREATE TABLE tbl (i BIGINT PRIMARY KEY, l1 BIGINT[]);

INSERT INTO tbl VALUES (1, [1, 2, 3]), (2, [42]);

SELECT i, l1, rowid FROM tbl ORDER BY ALL;

UPDATE tbl SET l1 = [1, 2, 4] WHERE i = 1;

SELECT i, l1, rowid FROM tbl ORDER BY ALL;

INSERT OR REPLACE INTO tbl VALUES (2, [43]);

INSERT OR REPLACE INTO tbl VALUES (2, [44]);

SELECT i, l1, rowid FROM tbl ORDER BY ALL;

PRAGMA enable_verification;

SET immediate_transaction_mode = TRUE;

CREATE TABLE tbl_list (id INT PRIMARY KEY, payload TEXT[]);

INSERT INTO tbl_list VALUES (1, ['first payload']);

BEGIN;

INSERT INTO tbl_list VALUES (5, ['old payload']);

BEGIN;

DELETE FROM tbl_list;

INSERT INTO tbl_list VALUES (1, ['con1 payload']);

SELECT id, payload, rowid FROM tbl_list WHERE id = 1;

BEGIN;

DELETE FROM tbl_list;

ROLLBACK;

COMMIT;

SELECT id, payload, rowid FROM tbl_list WHERE id = 1;

SELECT id, payload, rowid FROM tbl_list WHERE id = 1;

COMMIT;

SELECT id, payload, rowid FROM tbl_list ORDER BY ALL;

PRAGMA enable_verification;

SET immediate_transaction_mode = TRUE;

CREATE TABLE tbl_rollback (id INT PRIMARY KEY, payload TEXT[]);

INSERT INTO tbl_rollback VALUES (1, ['first payload']);

BEGIN;

DELETE FROM tbl_rollback;

INSERT INTO tbl_rollback VALUES (1, ['con1 payload']);

INSERT INTO tbl_rollback VALUES (1, ['con1 payload']);

SELECT 42;

ROLLBACK;

SELECT id, payload, rowid FROM tbl_rollback ORDER BY ALL;

PRAGMA enable_verification;

SET immediate_transaction_mode = TRUE;

CREATE TABLE tbl (id INT PRIMARY KEY, payload TEXT);

INSERT INTO tbl VALUES (1, 'first payload');

BEGIN;

INSERT INTO tbl VALUES (5, 'old payload');

BEGIN;

DELETE FROM tbl;

INSERT INTO tbl VALUES (1, 'con1 payload');

SELECT id, payload, rowid FROM tbl WHERE id = 1;

BEGIN;

DELETE FROM tbl;

ROLLBACK;

COMMIT;

SELECT id, payload, rowid FROM tbl WHERE id = 1;

SELECT id, payload, rowid FROM tbl WHERE id = 1;

COMMIT;

SELECT id, payload, rowid FROM tbl ORDER BY ALL;

PRAGMA enable_verification;

SET immediate_transaction_mode = TRUE;

CREATE TABLE tbl (id INT PRIMARY KEY, payload TEXT[]);

INSERT INTO tbl VALUES (1, ['first payload']);

BEGIN;

BEGIN;

DELETE FROM tbl WHERE id = 1;

INSERT INTO tbl VALUES (1, ['con1 payload']);

COMMIT;

BEGIN;

DELETE FROM tbl WHERE id = 1;

INSERT INTO tbl VALUES (1, ['con2 payload']);

COMMIT;

COMMIT;

SELECT id, payload, rowid FROM tbl WHERE id = 1;

PRAGMA enable_verification;

SET immediate_transaction_mode = TRUE;

CREATE TABLE tbl_list (id INT PRIMARY KEY, payload TEXT[]);

INSERT INTO tbl_list SELECT range, [range || ' payload'] FROM RANGE(0, 5);

UPDATE tbl_list SET id = id + 5 RETURNING id, payload;

INSERT INTO tbl_list SELECT range + 10, [(range + 10) || ' payload'] FROM RANGE(0, 3000);

UPDATE tbl_list SET id = id + 1 RETURNING id, payload;

PRAGMA enable_verification;

SET immediate_transaction_mode = TRUE;

CREATE TABLE tbl_list (id INT PRIMARY KEY, payload TEXT[]);

INSERT INTO tbl_list SELECT range, [range || ' payload'] FROM RANGE(0, 10);

DELETE FROM tbl_list USING RANGE(0, 100) AS t(i) RETURNING id, payload;

PRAGMA enable_verification;

SET immediate_transaction_mode = TRUE;

CREATE TABLE tbl_list (id INT PRIMARY KEY, payload TEXT[]);

INSERT INTO tbl_list VALUES (1, ['first payload']), (2, ['second payload']);

BEGIN;

INSERT INTO tbl_list VALUES (5, ['old payload']);

BEGIN;

UPDATE tbl_list SET payload = ['con1 payload'] WHERE id = 1;

UPDATE tbl_list SET id = 3 WHERE id = 2;

INSERT INTO tbl_list VALUES (2, ['new payload']);

SELECT id, payload, rowid FROM tbl_list WHERE id = 1;

SELECT id, payload, rowid FROM tbl_list WHERE id = 2;

BEGIN;

UPDATE tbl_list SET payload = ['second payload'] WHERE id = 1;

ROLLBACK;

COMMIT;

SELECT id, payload, rowid FROM tbl_list WHERE id = 1;

SELECT id, payload, rowid FROM tbl_list WHERE id = 2;

SELECT id, payload, rowid FROM tbl_list WHERE id = 3;

SELECT id, payload, rowid FROM tbl_list WHERE id = 1;

SELECT id, payload, rowid FROM tbl_list WHERE id = 2;

COMMIT;

SELECT id, payload, rowid FROM tbl_list ORDER BY ALL;

PRAGMA enable_verification;

SET immediate_transaction_mode = TRUE;

CREATE TABLE tbl (id INT PRIMARY KEY, payload TEXT);

INSERT INTO tbl VALUES (1, 'first payload');

BEGIN;

INSERT INTO tbl VALUES (5, 'old payload');

BEGIN;

UPDATE tbl SET id = 3 WHERE id = 1;

INSERT INTO tbl VALUES (1, 'new payload');

SELECT id, payload, rowid FROM tbl WHERE id = 1;

BEGIN;

UPDATE tbl SET payload = 'second payload' WHERE id = 1;

SELECT id, payload FROM tbl WHERE id = 1;

SELECT id, payload FROM tbl WHERE id = 3;

SELECT id, payload FROM tbl WHERE id = 1;

COMMIT;

SELECT id, payload, rowid FROM tbl WHERE id = 1;

SELECT id, payload, rowid FROM tbl WHERE id = 3;

COMMIT;

SELECT id, payload, rowid FROM tbl WHERE id = 3;

SELECT id, payload, rowid FROM tbl WHERE id = 1;

SELECT id, payload, rowid FROM tbl WHERE id = 1;

COMMIT;

SELECT id, payload, rowid FROM tbl ORDER BY ALL;

PRAGMA enable_verification;

SET immediate_transaction_mode = TRUE;

CREATE TABLE tbl_rollback (id INT PRIMARY KEY, payload TEXT[]);

INSERT INTO tbl_rollback VALUES (1, ['first payload']);

BEGIN;

UPDATE tbl_rollback SET payload = ['con1 payload'] WHERE id = 1;

INSERT INTO tbl_rollback VALUES (1, ['con1 payload']);

SELECT 42;

ROLLBACK;

SELECT id, payload, rowid FROM tbl_rollback ORDER BY ALL;

PRAGMA enable_verification;

SET immediate_transaction_mode = TRUE;

CREATE TABLE tbl (id INT PRIMARY KEY, payload TEXT[]);

INSERT INTO tbl VALUES (1, ['first payload']);

BEGIN;

BEGIN;

UPDATE tbl SET payload = ['con1 payload'] WHERE id = 1;

COMMIT;

BEGIN;

UPDATE tbl SET payload = ['con2 payload'] WHERE id = 1;

COMMIT;

COMMIT;

SELECT id, payload, rowid FROM tbl WHERE id = 1;

PRAGMA enable_verification;

SET immediate_transaction_mode = TRUE;

CREATE TABLE tbl_list (id INT PRIMARY KEY, payload TEXT[]);

INSERT INTO tbl_list VALUES (1, ['first payload']);

BEGIN;

INSERT INTO tbl_list VALUES (5, ['old payload']);

BEGIN;

INSERT OR REPLACE INTO tbl_list VALUES (1, ['con1 payload']);

SELECT id, payload, rowid FROM tbl_list WHERE id = 1;

BEGIN;

INSERT OR REPLACE INTO tbl_list VALUES (1, ['second payload']);

ROLLBACK;

COMMIT;

SELECT id, payload, rowid FROM tbl_list WHERE id = 1;

SELECT id, payload, rowid FROM tbl_list WHERE id = 1;

COMMIT;

SELECT id, payload, rowid FROM tbl_list ORDER BY ALL;

PRAGMA enable_verification;

SET immediate_transaction_mode = TRUE;

CREATE TABLE tbl_local (id INT PRIMARY KEY, payload TEXT[]);

INSERT INTO tbl_local VALUES (1, ['first payload']);

BEGIN;

INSERT OR REPLACE INTO tbl_local VALUES (1, ['con1 payload']);

INSERT OR REPLACE INTO tbl_local VALUES (1, ['local payload']);

SELECT id, payload, rowid FROM tbl_local WHERE id = 1;

COMMIT;

SELECT id, payload, rowid FROM tbl_local WHERE id = 1;

BEGIN;

INSERT OR REPLACE INTO tbl_local VALUES (1, ['val1 payload']), (1, ['val2 payload']);

COMMIT;

SELECT id, payload, rowid FROM tbl_local WHERE id = 1;

PRAGMA enable_verification;

SET immediate_transaction_mode = TRUE;

CREATE TABLE tbl_rollback (id INT PRIMARY KEY, payload TEXT[]);

INSERT INTO tbl_rollback VALUES (1, ['first payload']);

BEGIN;

INSERT OR REPLACE INTO tbl_rollback VALUES (1, ['con1 payload']);

INSERT INTO tbl_rollback VALUES (2, ['second payload']);

INSERT INTO tbl_rollback VALUES (2, ['second payload']);

SELECT 42;

ROLLBACK;

SELECT id, payload, rowid FROM tbl_rollback ORDER BY ALL;

PRAGMA enable_verification;

SET immediate_transaction_mode = TRUE;

CREATE TABLE tbl (id INT PRIMARY KEY, payload TEXT[]);

INSERT INTO tbl VALUES (1, ['first payload']);

BEGIN;

BEGIN;

INSERT OR REPLACE INTO tbl VALUES (1, ['con1 payload']);

COMMIT;

BEGIN;

INSERT OR REPLACE INTO tbl VALUES (1, ['con2 payload']);

COMMIT;

COMMIT;

SELECT id, payload, rowid FROM tbl WHERE id = 1;

PRAGMA enable_verification;

CREATE TABLE hero (name TEXT NOT NULL, secret_name TEXT NOT NULL, age INT, PRIMARY KEY (name));

CREATE INDEX ix_hero_age ON hero(age);

PRAGMA enable_verification;

CREATE TABLE kvp ("key" TEXT PRIMARY KEY, "value" TEXT, expiration BIGINT, "cache" BOOLEAN);

CREATE INDEX kve_idx ON kvp(expiration);

INSERT OR REPLACE INTO kvp VALUES ('/key', 'value', 0, FALSE);

SELECT key, value, expiration, cache FROM kvp;

INSERT OR REPLACE INTO kvp VALUES ('/key', 'value', 10000000, FALSE);

SELECT key, value, expiration, cache FROM kvp;

INSERT INTO kvp VALUES ('/key', 'value', 10000000, FALSE) ON CONFLICT DO UPDATE SET value = excluded.value, expiration = excluded.expiration, cache = excluded.cache;

SELECT key, value, expiration, cache FROM kvp;

PRAGMA enable_verification;

PRAGMA immediate_transaction_mode = TRUE;

CREATE TABLE tbl AS SELECT range AS i FROM RANGE(0, 100);

BEGIN;

CREATE INDEX IF NOT EXISTS my_idx ON tbl(i);

BEGIN;

CREATE INDEX IF NOT EXISTS my_idx ON tbl(i);

COMMIT;

COMMIT;

SELECT COUNT(*) FROM duckdb_indexes;

DROP INDEX my_idx;

CREATE INDEX IF NOT EXISTS my_idx ON tbl(i);

CREATE INDEX IF NOT EXISTS my_idx ON tbl(i);

CREATE INDEX my_idx ON tbl(i);

SELECT COUNT(*) FROM duckdb_indexes;

PRAGMA enable_verification;

SET immediate_transaction_mode = TRUE;

CREATE TABLE integers (i INT);

INSERT INTO integers SELECT * FROM RANGE(0, 10);

BEGIN;

DELETE FROM integers WHERE i = 2 OR i = 7;

SELECT * FROM integers WHERE i = 1;

SELECT * FROM integers WHERE i = 2;

CREATE INDEX i_index ON integers(i);

SELECT * FROM integers WHERE i = 1;

SELECT * FROM integers WHERE i = 2;

SELECT * FROM integers WHERE i = 1;

SELECT * FROM integers WHERE i = 2;

PRAGMA enable_verification;

CREATE TABLE integers (i INT);

INSERT INTO integers SELECT * FROM RANGE(0, 10);

DELETE FROM integers;

INSERT INTO integers SELECT * FROM RANGE(0, 10);

CREATE INDEX i_index ON integers(i);

SELECT * FROM integers WHERE i = 1;

SELECT * FROM integers WHERE i = 2;

PRAGMA enable_verification;

CREATE TABLE integers (i INT);

BEGIN;

INSERT INTO integers SELECT * FROM REPEAT(1, 1500) AS t1(i);

INSERT INTO integers SELECT * FROM REPEAT(2, 1500) AS t1(i);

INSERT INTO integers SELECT * FROM REPEAT(3, 1500) AS t1(i);

INSERT INTO integers SELECT * FROM REPEAT(4, 1500) AS t1(i);

COMMIT;

CREATE INDEX i_index ON integers(i);

SELECT COUNT(i) FROM integers WHERE i > 1 AND i < 3;

SELECT COUNT(i) FROM integers WHERE i >= 1 AND i < 3;

SELECT COUNT(i) FROM integers WHERE i > 1;

SELECT COUNT(i) FROM integers WHERE i < 4;

SELECT COUNT(i) FROM integers WHERE i < 5;

DROP INDEX i_index;

PRAGMA enable_verification;

BEGIN;

CREATE TABLE integers (i INT);

INSERT INTO integers SELECT * FROM REPEAT(1, 1500) AS t1(i);

INSERT INTO integers SELECT * FROM REPEAT(2, 1500) AS t1(i);

INSERT INTO integers SELECT * FROM REPEAT(3, 1500) AS t1(i);

INSERT INTO integers SELECT * FROM REPEAT(4, 1500) AS t1(i);

INSERT INTO integers SELECT * FROM REPEAT(5, 1500) AS t1(i);

COMMIT;

DELETE FROM integers WHERE i = 5;

CREATE INDEX i_index ON integers(i);

SELECT COUNT(i) FROM integers WHERE i > 1 AND i < 3;

SELECT COUNT(i) FROM integers WHERE i >= 1 AND i < 3;

SELECT COUNT(i) FROM integers WHERE i > 1;

SELECT COUNT(i) FROM integers WHERE i < 4;

SELECT COUNT(i) FROM integers WHERE i < 5;

PRAGMA enable_verification;

CREATE TABLE t0 (c0 INT);

CREATE UNIQUE INDEX i0 ON t0(c0);

INSERT INTO t0 (c0) VALUES (1);

INSERT INTO t0 (c0) VALUES (1);

SELECT * FROM t0 WHERE t0.c0 = 1;

CREATE TABLE merge_violation (id INT);

INSERT INTO merge_violation SELECT range FROM RANGE(0, 2048);

INSERT INTO merge_violation SELECT range + 10000 FROM RANGE(0, 2048);

INSERT INTO merge_violation VALUES (2047);

CREATE UNIQUE INDEX idx ON merge_violation(id);

PRAGMA enable_verification;

CREATE TABLE A (A1 INT, A2 TEXT, A3 INT);

INSERT INTO A VALUES (1, 1, 1);

INSERT INTO A VALUES (2, 2, 2);

CREATE TABLE B (B1 INT, B2 INT, B3 INT);

INSERT INTO B VALUES (1, 1, 1);

INSERT INTO B VALUES (2, 2, 2);

CREATE TABLE C (C1 TEXT, C2 INT, C3 INT);

INSERT INTO C VALUES ('t1', 1, 1);

INSERT INTO C VALUES ('t2', 2, 2);

SELECT A2 FROM A WHERE A1 = 1;

CREATE INDEX A_index ON A(A1);

SELECT A2 FROM A WHERE A1 = 1;

CREATE INDEX B_index ON B(B1);

SELECT A2 FROM A WHERE A1 = 1;

CREATE INDEX C_index ON C(C2);

SELECT A2 FROM A WHERE A1 = 1;

DROP INDEX IF EXISTS A_index;

SELECT A2 FROM A WHERE A1 = 1;

PRAGMA enable_verification;

CREATE TABLE integers (i INT, j INT, k BOOLEAN);

CREATE INDEX ON integers(i);

CREATE INDEX i_index ON integers(i COLLATE "NOCASE");

CREATE INDEX i_index ON integers(i COLLATE "de_DE");

CREATE INDEX i_index ON integers USING blabla(i);

CREATE INDEX i_index ON integers(f);

CREATE TABLE lists (id INT, l INT[]);

CREATE INDEX i_index ON lists(l);

CREATE INDEX i_index ON lists(id, l);

CREATE INDEX i_index ON integers(('hello'));

CREATE TABLE long_strings (id BLOB);

INSERT INTO long_strings SELECT REPEAT('k', 1000000);

INSERT INTO long_strings SELECT CAST(CAST(range AS TEXT) AS BLOB) FROM RANGE(0, 100000);

INSERT INTO long_strings SELECT REPEAT('k', 1000000);

INSERT INTO long_strings SELECT CAST(CAST(range AS TEXT) AS BLOB) || 'other' FROM RANGE(0, 100000);

INSERT INTO long_strings SELECT REPEAT('k', 1000000);

CREATE INDEX idx ON long_strings(id);

CREATE TABLE medium_strings (id BLOB);

INSERT INTO medium_strings SELECT REPEAT('k', 122879);

INSERT INTO medium_strings SELECT CAST(CAST(range AS TEXT) AS BLOB) FROM RANGE(0, 100000);

INSERT INTO medium_strings SELECT REPEAT('k', 122879);

INSERT INTO medium_strings SELECT CAST(CAST(range AS TEXT) AS BLOB) || 'other' FROM RANGE(0, 100000);

INSERT INTO medium_strings SELECT REPEAT('k', 122879);

SET immediate_transaction_mode = TRUE;

PRAGMA enable_verification;

CREATE TABLE integers (i INT);

INSERT INTO integers SELECT * FROM RANGE(1, 20001, 1);

BEGIN;

UPDATE integers SET i = i + 1;

BEGIN;

UPDATE integers SET i = i + 1;

BEGIN;

UPDATE integers SET i = i + 1;

CREATE INDEX i_index ON integers USING art(i);

SELECT SUM(i) FROM integers;

SELECT SUM(i) FROM integers WHERE i > 0;

SELECT SUM(i) FROM integers;

SELECT SUM(i) FROM integers WHERE i > 0;

SELECT SUM(i) FROM integers;

SELECT SUM(i) FROM integers WHERE i > 0;

SELECT SUM(i) FROM integers;

SELECT SUM(i) FROM integers WHERE i > 0;

PRAGMA enable_verification;

CREATE TABLE integers (i INT);

CREATE INDEX i_index ON integers USING art(i);

INSERT INTO integers VALUES (1);

SELECT * FROM integers WHERE i < 3;

SELECT * FROM integers WHERE i <= 1;

SELECT * FROM integers WHERE i > 0;

SELECT * FROM integers WHERE i >= 1;

SELECT * FROM integers WHERE i = 1;

SELECT * FROM integers WHERE i < 1;

SELECT * FROM integers WHERE i <= 0;

SELECT * FROM integers WHERE i > 1;

SELECT * FROM integers WHERE i >= 2;

SELECT * FROM integers WHERE i = 2;

PRAGMA enable_verification;

CREATE TABLE integers (i INT);

CREATE TABLE integers (i INT);

CREATE TABLE integers (i INT);

CREATE TABLE integers (i INT);

CREATE TABLE integers (i INT);

CREATE TABLE integers (i INT);

CREATE TABLE integers (i INT);

CREATE TABLE integers (i INT);

CREATE TABLE integers (i INT);

CREATE TABLE integers (i INT);

CREATE TABLE integers (i INT);

CREATE TABLE integers (i INT);

CREATE TABLE integers (i INT);

CREATE TABLE integers (i INT);

CREATE TABLE integers (i INT);

CREATE TABLE integers (i INT);

CREATE TABLE integers (i INT);

CREATE TABLE integers (i INT);

CREATE TABLE integers (i INT);

CREATE TABLE integers (i INT);

CREATE TABLE integers (i INT);

CREATE TABLE integers (i INT);

CREATE TABLE integers (i INT);

CREATE TABLE integers (i INT);

CREATE TABLE integers (i INT);

CREATE TABLE integers (i INT);

CREATE TABLE integers (i INT);

PRAGMA enable_verification;

CREATE TABLE integers (i INT);

CREATE INDEX i_index ON integers using art(i)
loop i 0 5;

INSERT INTO integers SELECT * FROM RANGE(0, 1000, 2);

INSERT INTO integers SELECT * FROM RANGE(0, 1000, 2) AS endloop;

SELECT COUNT(*) FROM integers;

SELECT COUNT(*) FROM integers WHERE i < 1000000;

ATTACH '__TEST_DIR__/artupdates.db' AS db;

USE db;

USE db;

UPDATE test SET importId = 725 WHERE id = 34165;

UPDATE test SET importId = 663 WHERE id = 42638;

UPDATE test SET importId = 210 WHERE id = 11288;

UPDATE test SET importId = 805 WHERE id = 764;

UPDATE test SET importId = 782 WHERE id = 10151;

CREATE TABLE integers (i INT);

CREATE TABLE integers (i INT);

CREATE TABLE integers (i INT);

CREATE TABLE integers (i INT);

SELECT COUNT(*) FROM integers WHERE i >= 0;

DELETE FROM integers WHERE i = (SELECT i FROM integers ORDER BY RANDOM() LIMIT 1);

DELETE FROM integers WHERE i = (SELECT i FROM integers ORDER BY RANDOM() LIMIT 1);

DELETE FROM integers WHERE i = (SELECT i FROM integers ORDER BY RANDOM() LIMIT 1);

PRAGMA enable_verification;

CREATE TABLE source (i INT);

INSERT INTO source VALUES (1), (2), (3), (4), (5), (6);

CREATE TABLE integers (i INT);

CREATE INDEX i_index ON integers USING art(i);

INSERT INTO integers SELECT * FROM source WHERE i % 2 = 0;

SELECT * FROM integers WHERE i < 3 ORDER BY 1;

SELECT * FROM integers ORDER BY 1;

SELECT * FROM integers WHERE i > 3 ORDER BY 1;

SELECT * FROM integers WHERE i <= 3 ORDER BY 1;

SELECT * FROM integers WHERE i >= 3 ORDER BY 1;

UPDATE integers SET i = 3 WHERE i = 4;

SELECT * FROM integers WHERE i < 3 ORDER BY 1;

SELECT * FROM integers WHERE i <= 3 ORDER BY 1;

SELECT * FROM integers WHERE i > 3 ORDER BY 1;

SELECT * FROM integers WHERE i >= 3 ORDER BY 1;

DELETE FROM integers WHERE i > 3;

SELECT * FROM integers WHERE i > 0 ORDER BY 1;

SELECT * FROM integers WHERE i < 3 ORDER BY 1;

PRAGMA enable_verification;

CREATE TABLE integers (i INT);

CREATE INDEX i_index ON integers USING art(i);

INSERT INTO integers VALUES (1);

BEGIN;

UPDATE integers SET i = 10 WHERE i = 1;

SELECT * FROM integers WHERE i < 5;

SELECT * FROM integers WHERE i > 0;

SELECT * FROM integers WHERE i < 5;

SELECT * FROM integers WHERE i > 0;

PRAGMA enable_verification;

CREATE TABLE integers (i INT, j INT);

CREATE INDEX i_index ON integers USING art(j);

INSERT INTO integers VALUES (1, 2), (2, 2);

UPDATE integers SET j = 10 WHERE i = 1;

UPDATE integers SET j = 10 WHERE rowid = 0;

DELETE FROM integers WHERE rowid = 1;

SELECT * FROM integers WHERE j > 5;

PRAGMA enable_verification;

CREATE TABLE integers (i INT);

CREATE INDEX i_index ON integers USING art(i);

INSERT INTO integers VALUES (1);

SELECT * FROM integers WHERE i > 0;

SELECT * FROM integers WHERE i > 0;

SELECT * FROM integers WHERE i > 0;

SELECT * FROM integers WHERE i > 0;

ROLLBACK;

SELECT * FROM integers WHERE i > 0;

SELECT * FROM integers WHERE i > 0;

SELECT * FROM integers WHERE i > 0;

SELECT * FROM integers WHERE i > 0;

COMMIT;

SELECT * FROM integers WHERE i > 0;

PRAGMA enable_verification;

BEGIN;

CREATE TABLE integers (i INT);

CREATE INDEX i_index ON integers(i);

INSERT INTO integers SELECT * FROM RANGE(1, 25001, 1);

COMMIT;

SELECT SUM(i), COUNT(i) FROM integers WHERE i > 0;

SELECT MIN(i), MAX(i) FROM integers ORDER BY 1;

UPDATE integers SET i = i + 1 WHERE i > 0;

SELECT MIN(i), MAX(i) FROM integers ORDER BY 1;

SELECT COUNT(DISTINCT i) FROM integers ORDER BY 1;

SELECT SUM(i), COUNT(i) FROM integers WHERE i > 0;

DELETE FROM integers WHERE i > 0;

SELECT SUM(i), COUNT(i) FROM integers WHERE i > 0;

CREATE TABLE test_int (i INT PRIMARY KEY);

INSERT INTO test_int SELECT * FROM RANGE(0, 1000000);

SELECT COUNT(*) FROM test_int;

DELETE FROM test_int;

INSERT INTO test_int SELECT * FROM RANGE(0, 1000000);

SELECT COUNT(*) FROM test_int;

PRAGMA enable_verification;

CREATE TABLE t1 (c1 DECIMAL(4, 3));

INSERT INTO t1 (c1) VALUES (1), (-0.505);

CREATE INDEX i1 ON t1(TRY_CAST(c1 AS USMALLINT));

INSERT INTO t1 (c1) VALUES (2), (3);

CREATE TABLE t2 (c1 TEXT);

CREATE INDEX i2 ON t2(c1);

INSERT INTO t2 VALUES (CAST(DECODE(CAST('g\x00' AS BLOB)) AS TEXT)), ('g');

INSERT INTO t2 VALUES ('\0');

CREATE INDEX i22 ON t2(c1);

CREATE TABLE t3 (c1 INT);

INSERT INTO t3 VALUES (0), (85491);

CREATE INDEX i3 ON t3(c1, (TRY_CAST(c1 AS USMALLINT)));

CREATE TABLE t4 (c1 BOOLEAN);

CREATE INDEX i4 ON t4(c1);

INSERT INTO t4 VALUES (1), (0), (1), (1);

UPDATE t4 SET c1 = NULL;

CREATE TABLE t_leak (c1 INT);

INSERT INTO t_leak VALUES (2), (1), (1), (540000);

CREATE UNIQUE INDEX i_leak ON t_leak(c1);

CREATE TABLE t21 (c1 INT);

CREATE INDEX i21 ON t21(c1, DECODE(CAST('\x00' AS BLOB)));

PRAGMA enable_verification;

CREATE TABLE t0 (c0 DOUBLE, c1 TIMESTAMP DEFAULT (CAST('1970-01-04 12:58:32' AS TIMESTAMP)));

INSERT INTO t0 (c1, c0) VALUES (CAST('1969-12-28 23:02:08' AS TIMESTAMP), 1);

INSERT INTO t0 (c0) VALUES (DEFAULT);

PRAGMA enable_verification;

BEGIN;

CREATE TABLE path (it INT, x0 TEXT NOT NULL, x1 TEXT NOT NULL);

CREATE SEQUENCE seq;

CREATE TABLE edge (id INT DEFAULT NEXTVAL('seq'), it INT DEFAULT 0, x0 TEXT, x1 TEXT);

CREATE INDEX edge1_idx ON edge(x1);

INSERT INTO edge (x0, x1) VALUES ('n2880', 'n3966');

COMMIT;

BEGIN;

INSERT INTO path SELECT 1, y0, y1 FROM (SELECT DISTINCT edge0.x0 AS y0, edge0.x1 AS y1 FROM edge AS edge0 WHERE edge0.it = 0 AND TRUE AND NOT EXISTS(SELECT * FROM path AS pre WHERE pre.x0 = edge0.x0 AND pre.x1 = edge0.x1));

SELECT 1, y0, y1 FROM (SELECT DISTINCT edge0.x0 AS y0, path1.x1 AS y1 FROM edge AS edge0, path AS path1 WHERE edge0.it = 0 AND edge0.x1 = path1.x0 AND NOT EXISTS(SELECT * FROM path AS pre WHERE pre.x0 = edge0.x0 AND pre.x1 = path1.x1));

PRAGMA enable_verification;

CREATE TABLE key_value_pairs (key TEXT PRIMARY KEY, value TEXT);

INSERT INTO key_value_pairs SELECT CONCAT('key_', CAST(i AS TEXT)), CONCAT('value_', CAST(i AS TEXT)) FROM RANGE(0, 10000) AS t(i) WHERE RANDOM() < 0.5;

CREATE TABLE keys_to_lookup (key TEXT PRIMARY KEY);

INSERT INTO keys_to_lookup SELECT CONCAT('key_', CAST(i AS TEXT)) FROM RANGE(0, 100) AS t(i);

PRAGMA enable_verification;

CREATE TABLE td (tz TEXT NOT NULL);

CREATE UNIQUE INDEX sqlsim0 ON td(tz);

CREATE TABLE tab0 (c2 DATE NOT NULL);

CREATE TABLE tab1 (c2 DATE NOT NULL);

INSERT INTO td VALUES (CAST('2008-02-29' AS DATE));

START AS TRANSACTION;

INSERT INTO td VALUES ('2006-12-25');

INSERT INTO tab0 VALUES ('2006-12-25');

INSERT INTO td VALUES (CAST('2008-02-29' AS DATE));

COMMIT;

START AS TRANSACTION;

INSERT INTO tab0 VALUES ('2006-12-25');

INSERT INTO td VALUES (CAST('2008-02-29' AS DATE));

COMMIT;

INSERT INTO tab1 VALUES ('2006-12-25');

START AS TRANSACTION;

INSERT INTO tab0 VALUES ('2006-12-25');

INSERT INTO td VALUES ('2006-12-25');

COMMIT;

SELECT tz FROM td ORDER BY tz;

PRAGMA enable_verification;

CREATE TABLE t14 (c0 BIGINT);

INSERT INTO t14 (c0) VALUES ((1)), ((1)), ((1));

CREATE INDEX i1 ON t14(c0);

PRAGMA enable_verification;

CREATE TABLE t AS SELECT NOW() AS d FROM GENERATE_SERIES(1, 218165);

PRAGMA enable_verification;

CREATE TABLE t (i INT PRIMARY KEY);

INSERT INTO t SELECT * FROM RANGE(0, 1000000);

DELETE FROM t;

DELETE FROM t;

INSERT INTO t SELECT * FROM RANGE(0, 1000000);

DELETE FROM t;

SELECT CASE WHEN current.memory_usage_bytes = base.memory_usage_bytes THEN TRUE ELSE CAST(CONCAT('Current memory usage ', current.memory_usage_bytes, ' is not equal to base usage ', base.memory_usage_bytes) AS UNION(error TEXT, b BOOLEAN)) END FROM DUCKDB_MEMORY() AS current, base WHERE current.tag = 'ART_INDEX';

VACUUM t;

SELECT memory_usage_bytes = 0 FROM DUCKDB_MEMORY() WHERE tag = 'ART_INDEX';

DROP TABLE t;

CREATE TABLE t (i INT PRIMARY KEY);

INSERT INTO t SELECT * FROM RANGE(0, 1000000);

DROP TABLE t;

SELECT memory_usage_bytes = 0 FROM DUCKDB_MEMORY() WHERE tag = 'ART_INDEX';

CREATE TABLE t (i INT PRIMARY KEY);

INSERT INTO t SELECT * FROM RANGE(0, 1000000);

CREATE TABLE full_idx AS SELECT memory_usage_bytes FROM DUCKDB_MEMORY() WHERE tag = 'ART_INDEX';

DELETE FROM t WHERE i > 500000;

SELECT CASE WHEN current.memory_usage_bytes <= full_idx.memory_usage_bytes * 0.6 THEN TRUE ELSE CAST(CONCAT('Current memory usage ', current.memory_usage_bytes, ' is not equal to base usage ', full_idx.memory_usage_bytes) AS UNION(error TEXT, b BOOLEAN)) END FROM DUCKDB_MEMORY() AS current, full_idx WHERE current.tag = 'ART_INDEX';

PRAGMA enable_verification;

CREATE FUNCTION mem_to_bytes(x) AS CASE WHEN CONTAINS(x, 'KiB') THEN CAST(REPLACE(x, 'KiB', '') AS INT) * 1024.0 WHEN CONTAINS(x, 'MiB') THEN CAST(REPLACE(x, 'MiB', '') AS INT) * 1024.0 * 1024 WHEN CONTAINS(x, 'GiB') THEN CAST(REPLACE(x, 'GiB', '') AS INT) * 1024.0 * 1024 * 1024 WHEN CONTAINS(x, 'TiB') THEN CAST(REPLACE(x, 'TiB', '') AS INT) * 1024.0 * 1024 * 1024 * 1024 WHEN x = '0 bytes' THEN 0 ELSE CAST(x AS INT) END;

CREATE TABLE strings_temp AS SELECT CAST(((i * 95823983533) % 100000) AS TEXT) AS s1, CAST(((i * 547892347987) % 1000) AS TEXT) AS s2, CAST(((i * 847892347987) % 100) AS TEXT) AS s3 FROM RANGE(0, 100000) AS tbl(i);

CREATE TABLE art AS SELECT s1 || 'a' || s2 || 'b' || s3 || 'c' AS id FROM strings_temp;

DROP TABLE strings_temp;

CREATE INDEX idx ON art USING ART(id);

SELECT MEM_TO_BYTES(memory_usage) < 7500000 FROM PRAGMA_DATABASE_SIZE();

DROP TABLE art;

CREATE TABLE strings_temp AS SELECT CAST(((i * 95823983533) % 100000) AS TEXT) AS s1, CAST(((i * 547892347987) % 1000) AS TEXT) AS s2, CAST(((i * 847892347987) % 100) AS TEXT) AS s3 FROM RANGE(0, 100000) AS tbl(i);

CREATE TABLE art AS SELECT s3 || 'a' || s2 || 'b' || s3 || 'c' || REPEAT(s2, CAST(s3 AS INT)) || s1 || 'a' || s3 || 'c' AS id FROM strings_temp;

DROP TABLE strings_temp;

CREATE INDEX idx ON art USING ART(id);

SELECT MEM_TO_BYTES(memory_usage) < 23000000 FROM PRAGMA_DATABASE_SIZE();

DROP TABLE art;

CREATE TABLE art AS SELECT CAST((range * CAST(9876983769044 AS INT128) % 10000000) AS BIGINT) AS id FROM RANGE(0, 100000);

CREATE INDEX idx ON art USING ART(id);

SELECT MEM_TO_BYTES(memory_usage) < 4000000 FROM PRAGMA_DATABASE_SIZE();

DROP TABLE art;

CREATE TABLE art AS SELECT CAST((range * CAST(9876983769044 AS INT128) % 1000) AS BIGINT) AS id FROM RANGE(0, 100000);

CREATE INDEX idx ON art USING ART(id);

SELECT MEM_TO_BYTES(memory_usage) < 4000000 FROM PRAGMA_DATABASE_SIZE();

PRAGMA enable_verification;

CREATE FUNCTION mem_to_bytes(x) AS CASE WHEN CONTAINS(x, 'KiB') THEN CAST(REPLACE(x, 'KiB', '') AS INT) * 1024.0 WHEN CONTAINS(x, 'MiB') THEN CAST(REPLACE(x, 'MiB', '') AS INT) * 1024.0 * 1024 WHEN CONTAINS(x, 'GiB') THEN CAST(REPLACE(x, 'GiB', '') AS INT) * 1024.0 * 1024 * 1024 WHEN CONTAINS(x, 'TiB') THEN CAST(REPLACE(x, 'TiB', '') AS INT) * 1024.0 * 1024 * 1024 * 1024 WHEN x = '0 bytes' THEN CAST(0 AS BIGINT) ELSE CAST(x AS BIGINT) END;

CREATE TABLE art AS SELECT RPAD(CAST(((i * 95823983533) % 86000000) AS TEXT), 10, '-') AS id FROM RANGE(0, 7200000) AS tbl(i);

INSERT INTO art (SELECT * FROM art);

INSERT INTO art (SELECT * FROM art);

INSERT INTO art (SELECT * FROM art);

INSERT INTO art (SELECT * FROM art LIMIT 28400000);

SELECT COUNT(*) FROM art;

SELECT COUNT(DISTINCT id) FROM art;

SELECT MIN(LENGTH(id)), MAX(LENGTH(id)) FROM art;

CREATE TABLE base AS SELECT CAST(MEM_TO_BYTES(memory_usage) AS BIGINT) AS usage FROM PRAGMA_DATABASE_SIZE();

SET memory_limit = '12GB';

CREATE INDEX idx ON art USING ART(id);

SELECT MEM_TO_BYTES(current.memory_usage) > base.usage AND MEM_TO_BYTES(current.memory_usage) < 5 * base.usage FROM base, PRAGMA_DATABASE_SIZE() AS current;

PRAGMA enable_verification;

CREATE TABLE integers (i BIGINT, j INT, k TEXT);

CREATE INDEX i_index ON integers USING art(j);

INSERT INTO integers VALUES (10, 1, 'hello'), (11, 2, 'world');

SELECT i FROM integers WHERE i = 10;

SELECT * FROM integers WHERE i = 10;

SELECT j FROM integers WHERE j = 1;

SELECT * FROM integers WHERE j = 1;

SELECT k FROM integers WHERE k = 'hello';

SELECT i, k FROM integers WHERE k = 'hello';

SELECT * FROM integers WHERE k = 'hello';

PRAGMA enable_verification;

CREATE TABLE integers (i INT, j INT);

CREATE INDEX i_index ON integers USING art(i);

INSERT INTO integers VALUES (1, 2), (1, 3);

SELECT * FROM integers WHERE i = 1 AND j = 2;

PRAGMA enable_verification;

CREATE TABLE integers (i INT);

CREATE TABLE integers (i INT);

CREATE TABLE integers (i INT);

CREATE TABLE integers (i INT);

PRAGMA enable_verification;

CREATE TABLE integers AS SELECT range AS a, 1 AS b, 1 AS c FROM RANGE(0, 1024);

CREATE INDEX b_index ON integers(b);

SELECT SUM(b) FROM integers;

SELECT SUM(b) FROM integers WHERE b = 1;

SELECT SUM(b) FROM integers;

DELETE FROM integers WHERE a < 100;

SELECT COUNT(b) FROM integers;

SELECT COUNT(b) FROM integers WHERE b = 1;

SELECT SUM(b) FROM integers;

DELETE FROM integers WHERE a < 600;

SELECT COUNT(b) FROM integers;

SELECT COUNT(b) FROM integers WHERE b = 1;

SELECT SUM(b) FROM integers;

DELETE FROM integers WHERE a < 1024;

SELECT COUNT(*) FROM integers;

SELECT COUNT(*) FROM integers WHERE b = 1;

SELECT COUNT(*) FROM integers;

DROP INDEX b_index;

DROP INDEX b_index;

CREATE TABLE tbl_leaf_cov (id INT);

CREATE INDEX idx_leaf_cov ON tbl_leaf_cov(id);

INSERT INTO tbl_leaf_cov VALUES (1), (1);

CREATE TABLE tbl_grow_shrink (id_var TEXT, id_int INT, id_point BIGINT);

CREATE INDEX idx_var ON tbl_grow_shrink(id_var);

CREATE INDEX idx_int ON tbl_grow_shrink(id_int);

CREATE INDEX idx_both ON tbl_grow_shrink(id_var, id_int, id_point);

CREATE INDEX idx_both ON tbl_grow_shrink(id_var, id_int, id_point);

CREATE INDEX idx_both ON tbl_grow_shrink(id_var, id_int, id_point);

SELECT id_var FROM tbl_grow_shrink WHERE rowid = (SELECT MIN(rowid) FROM tbl_grow_shrink);

SELECT id_int FROM tbl_grow_shrink WHERE rowid = (SELECT MIN(rowid) FROM tbl_grow_shrink);

SELECT id_int FROM tbl_grow_shrink WHERE rowid = (SELECT MIN(rowid) FROM tbl_grow_shrink);

SELECT id_var FROM tbl_grow_shrink WHERE rowid = (SELECT MIN(rowid) FROM tbl_grow_shrink);

SELECT id_int FROM tbl_grow_shrink WHERE rowid = (SELECT MIN(rowid) FROM tbl_grow_shrink);

SELECT id_int FROM tbl_grow_shrink WHERE rowid = (SELECT MIN(rowid) FROM tbl_grow_shrink);

SELECT COUNT(id_var) FROM tbl_grow_shrink;

SELECT SUM(id_int) FROM tbl_grow_shrink;

SELECT COUNT(id_var) FROM tbl_grow_shrink;

SELECT SUM(id_int) FROM tbl_grow_shrink;

SELECT id_var FROM tbl_grow_shrink WHERE rowid = (SELECT MIN(rowid) FROM tbl_grow_shrink);

SELECT id_int FROM tbl_grow_shrink WHERE rowid = (SELECT MIN(rowid) FROM tbl_grow_shrink);

SELECT id_int FROM tbl_grow_shrink WHERE rowid = (SELECT MIN(rowid) FROM tbl_grow_shrink);

DELETE FROM tbl_grow_shrink WHERE rowid = (SELECT MIN(rowid) FROM tbl_grow_shrink);
restart AS endloop;

SELECT COUNT(id_var) FROM tbl_grow_shrink;

SELECT SUM(id_int) FROM tbl_grow_shrink;

CREATE TABLE merge_leaf_tbl (id INT);

INSERT INTO merge_leaf_tbl SELECT range FROM RANGE(0, 2048);

INSERT INTO merge_leaf_tbl VALUES (2047);

CREATE INDEX idx_merge_leaf_tbl ON merge_leaf_tbl(id);

DROP INDEX idx_merge_leaf_tbl;

INSERT INTO merge_leaf_tbl VALUES (2047);

INSERT INTO merge_leaf_tbl SELECT range + 10000 FROM RANGE(0, 2048);

INSERT INTO merge_leaf_tbl SELECT range + 10000 FROM RANGE(0, 2048);

CREATE INDEX idx_merge_leaf_tbl ON merge_leaf_tbl(id);

CREATE TABLE tbl (i TINYINT);

CREATE INDEX idx ON tbl(i);

PRAGMA enable_verification;
load __TEST_DIR__/art_vacuum.db;

CREATE TABLE duplicates (id UBIGINT);

CREATE TABLE duplicates (id UBIGINT);

INSERT INTO duplicates SELECT range FROM RANGE(0, 500);
endloop;

INSERT INTO duplicates SELECT range + 1000 FROM RANGE(0, 500);

CREATE INDEX idx_duplicates ON duplicates(id);
restart;

SELECT id FROM duplicates WHERE id = 255;

CREATE TABLE leaf_merge_1 (id UINT32, id2 BIGINT);

INSERT INTO leaf_merge_1 SELECT range, range FROM RANGE(0, 2048, 1);

INSERT INTO leaf_merge_1 SELECT 2047, 2047 FROM RANGE(0, 10);

CREATE INDEX idx_merge_1 ON leaf_merge_1(id, id2);

CREATE TABLE leaf_merge_2 (id UINT32, id2 BIGINT);

INSERT INTO leaf_merge_2 SELECT range, range FROM RANGE(0, 2048, 1);

INSERT INTO leaf_merge_2 VALUES (2047, 2047);

CREATE INDEX idx_merge_2 ON leaf_merge_2(id, id2);

CREATE TABLE tbl_dup_ser (id INT);

INSERT INTO tbl_dup_ser SELECT range FROM RANGE(0, 2043);

INSERT INTO tbl_dup_ser SELECT 12345 FROM RANGE(0, 11);

PRAGMA enable_verification;

CREATE TABLE integers (i INT);

CREATE INDEX i_index ON integers(i);

INSERT INTO integers SELECT 1 FROM RANGE(0, 4);

SELECT COUNT(*) FROM integers WHERE i = 1;

SELECT SUM(i) FROM integers WHERE i <= 2;

DELETE FROM integers WHERE i = 1;

SELECT COUNT(*) FROM integers WHERE i = 1;

SELECT COUNT(*) FROM integers;

INSERT INTO integers SELECT 1 FROM RANGE(0, 1024);

SELECT COUNT(*) FROM integers WHERE i = 1;

SELECT SUM(i) FROM integers WHERE i <= 2;

DELETE FROM integers WHERE i = 1;

SELECT COUNT(*) FROM integers WHERE i = 1;

SELECT COUNT(*) FROM integers;

INSERT INTO integers SELECT 1 FROM RANGE(0, 3000);

INSERT INTO integers SELECT 2 FROM RANGE(0, 1024);

SELECT COUNT(*) FROM integers WHERE i = 1;

SELECT COUNT(*) FROM integers WHERE i = 2;

SELECT COUNT(*) FROM integers WHERE i <= 2;

SELECT SUM(i) FROM integers WHERE i <= 2;

DELETE FROM integers WHERE i = 2;

SELECT COUNT(*) FROM integers WHERE i = 1;

SELECT COUNT(*) FROM integers;

DELETE FROM integers WHERE i = 1;

SELECT COUNT(*) FROM integers WHERE i = 1;

SELECT COUNT(*) FROM integers;

DROP INDEX i_index;

PRAGMA enable_verification;

CREATE TABLE integers (i INT);

CREATE INDEX i_index ON integers(i)
loop i 0 4;

CREATE INDEX i_index ON integers(i)
loop i 0 4;

CREATE INDEX i_index ON integers(i)
loop i 0 4;

SELECT SUM(i) FROM integers WHERE i <= 2;

SELECT SUM(i) FROM integers WHERE i > 1;

SELECT SUM(i) FROM integers WHERE i > 1;

DELETE FROM integers WHERE i = 0;

DROP INDEX i_index;

PRAGMA enable_verification;

CREATE TABLE different_prefixes (str TEXT);

INSERT INTO different_prefixes SELECT 'my first very long prefix that is really very long' || range FROM RANGE(0, 2048);

INSERT INTO different_prefixes SELECT CAST((range / 100) AS TEXT) || CAST(range AS TEXT) FROM RANGE(0, 2048);

INSERT INTO different_prefixes SELECT 'my first very long prefix, the other not quite as long prefix that is still very long' || range FROM RANGE(0, 2048);

INSERT INTO different_prefixes SELECT 'my first very long prefix, the other not quite as long prefix that is still very long and even longer omg!' || range FROM RANGE(0, 2048);

INSERT INTO different_prefixes SELECT CAST(range AS TEXT) || CAST((range + 1) AS TEXT) FROM RANGE(0, 2048);

CREATE INDEX idx_different_prefixes ON different_prefixes(str);

DELETE FROM different_prefixes WHERE rowid IN (SELECT rowid FROM different_prefixes LIMIT 1000);

DELETE FROM different_prefixes WHERE rowid IN (SELECT rowid FROM different_prefixes LIMIT 3000);

DROP INDEX idx_different_prefixes;

CREATE TABLE longer_prefixes (str TEXT);

INSERT INTO longer_prefixes SELECT 'my first very long prefix that is really very long' || range FROM RANGE(0, 2048);

INSERT INTO longer_prefixes SELECT 'my first very long prefix, the other not quite as long prefix that is still very long' || range FROM RANGE(0, 2048);

CREATE INDEX idx_longer_prefixes ON longer_prefixes(str);

SELECT str FROM longer_prefixes WHERE str = 'my first very long prefix that is really very long77';

DROP INDEX idx_longer_prefixes;

CREATE TABLE distinct_prefixes (str TEXT);

INSERT INTO distinct_prefixes SELECT CAST('2022-01-01' AS DATE) + CAST(range AS INT) * 1000 || CAST('1004-02-01' AS DATE) + CAST(range AS INT) * 100 || '.' || CAST('6004-02-01' AS DATE) + CAST(range AS INT) * 2000 FROM RANGE(0, 100000);

CREATE INDEX idx_distinct_prefixes ON distinct_prefixes(str);

DROP INDEX idx_distinct_prefixes;

CREATE TABLE mixed_distinct_prefixes (str TEXT);

INSERT INTO mixed_distinct_prefixes SELECT CAST('2022-01-01' AS DATE) + CAST(range AS INT) * 1000 FROM RANGE(0, 100000);

INSERT INTO mixed_distinct_prefixes SELECT CAST('2022-01-01' AS DATE) + CAST(range AS INT) * 1000 || CAST('1004-02-01' AS DATE) + CAST(range AS INT) * 100 FROM RANGE(0, 100000);

INSERT INTO mixed_distinct_prefixes SELECT CAST('2022-01-01' AS DATE) + CAST(range AS INT) * 1000 || CAST('1004-02-01' AS DATE) + CAST(range AS INT) * 100 || '.' || CAST('6004-02-01' AS DATE) + CAST(range AS INT) * 2000 FROM RANGE(0, 100000);

CREATE INDEX idx_mixed_distinct_prefixes ON mixed_distinct_prefixes(str);

DELETE FROM mixed_distinct_prefixes WHERE rowid IN (SELECT rowid FROM mixed_distinct_prefixes LIMIT 1000);

DELETE FROM mixed_distinct_prefixes WHERE rowid IN (SELECT rowid FROM mixed_distinct_prefixes LIMIT 1000);

DELETE FROM mixed_distinct_prefixes WHERE rowid IN (SELECT rowid FROM mixed_distinct_prefixes LIMIT 1000);

CREATE TABLE tbl (id INT);

CREATE INDEX idx ON tbl(id);

INSERT INTO tbl VALUES (1), (2);
restart;

DELETE FROM tbl WHERE id = 1;

CREATE TABLE tbl_varchar (id TEXT);

CREATE INDEX idx_varchar ON tbl_varchar(id);

INSERT INTO tbl_varchar VALUES ('hello I am a prefix, and it is a beautiful sommer evening, and the plants are blossoming - 1'), ('hello I am a prefix, and it is a beautiful sommer evening, and the plants are blossoming - 2');
restart;

DELETE FROM tbl_varchar WHERE id = 'hello I am a prefix, and it is a beautiful sommer evening, and the plants are blossoming - 1';

DELETE FROM tbl_varchar;

INSERT INTO tbl_varchar VALUES ('012345678901234'), ('012345678901235');

DELETE FROM tbl_varchar;

INSERT INTO tbl_varchar VALUES ('0123456789-0123456789-0123456789-0123456789');
restart;

PRAGMA enable_verification;

CREATE TABLE integers (i BIGINT);

CREATE INDEX i_index ON integers USING art(i);

INSERT INTO integers VALUES (9312908412824241);

SELECT COUNT(*) FROM integers WHERE i = 9312908412824241;

SELECT COUNT(*) FROM integers;

SELECT COUNT(*) FROM integers WHERE i < 9223372036854775808;

SELECT COUNT(*) FROM integers WHERE i >= 0;

SELECT COUNT(*) FROM integers WHERE i < 0;

INSERT INTO integers VALUES (-2092042498432234);

SELECT COUNT(*) FROM integers WHERE i = 9312908412824241;

SELECT COUNT(*) FROM integers WHERE i = -2092042498432234;

SELECT COUNT(*) FROM integers;

SELECT COUNT(*) FROM integers WHERE i < 9223372036854775808;

SELECT COUNT(*) FROM integers WHERE i >= 0;

SELECT COUNT(*) FROM integers WHERE i < 0;

INSERT INTO integers VALUES (1);

SELECT COUNT(*) FROM integers WHERE i = 9312908412824241;

SELECT COUNT(*) FROM integers WHERE i = -2092042498432234;

SELECT COUNT(*) FROM integers WHERE i = 1;

SELECT COUNT(*) FROM integers;

SELECT COUNT(*) FROM integers WHERE i < 9223372036854775808;

SELECT COUNT(*) FROM integers WHERE i >= 0;

SELECT COUNT(*) FROM integers WHERE i < 0;

INSERT INTO integers VALUES (-100);

SELECT COUNT(*) FROM integers WHERE i = 9312908412824241;

SELECT COUNT(*) FROM integers WHERE i = -2092042498432234;

SELECT COUNT(*) FROM integers WHERE i = 1;

SELECT COUNT(*) FROM integers WHERE i = -100;

SELECT COUNT(*) FROM integers;

SELECT COUNT(*) FROM integers WHERE i < 9223372036854775808;

SELECT COUNT(*) FROM integers WHERE i >= 0;

SELECT COUNT(*) FROM integers WHERE i < 0;

INSERT INTO integers VALUES (0);

SELECT COUNT(*) FROM integers WHERE i = 9312908412824241;

SELECT COUNT(*) FROM integers WHERE i = -2092042498432234;

SELECT COUNT(*) FROM integers WHERE i = 1;

SELECT COUNT(*) FROM integers WHERE i = -100;

SELECT COUNT(*) FROM integers WHERE i = 0;

SELECT COUNT(*) FROM integers;

SELECT COUNT(*) FROM integers WHERE i < 9223372036854775808;

SELECT COUNT(*) FROM integers WHERE i >= 0;

SELECT COUNT(*) FROM integers WHERE i < 0;

INSERT INTO integers VALUES (-598538523852390852);

SELECT COUNT(*) FROM integers WHERE i = 9312908412824241;

SELECT COUNT(*) FROM integers WHERE i = -2092042498432234;

SELECT COUNT(*) FROM integers WHERE i = 1;

SELECT COUNT(*) FROM integers WHERE i = -100;

SELECT COUNT(*) FROM integers WHERE i = 0;

SELECT COUNT(*) FROM integers WHERE i = -598538523852390852;

SELECT COUNT(*) FROM integers;

SELECT COUNT(*) FROM integers WHERE i < 9223372036854775808;

SELECT COUNT(*) FROM integers WHERE i >= 0;

SELECT COUNT(*) FROM integers WHERE i < 0;

INSERT INTO integers VALUES (4298421);

SELECT COUNT(*) FROM integers WHERE i = 9312908412824241;

SELECT COUNT(*) FROM integers WHERE i = -2092042498432234;

SELECT COUNT(*) FROM integers WHERE i = 1;

SELECT COUNT(*) FROM integers WHERE i = -100;

SELECT COUNT(*) FROM integers WHERE i = 0;

SELECT COUNT(*) FROM integers WHERE i = -598538523852390852;

SELECT COUNT(*) FROM integers WHERE i = 4298421;

SELECT COUNT(*) FROM integers;

SELECT COUNT(*) FROM integers WHERE i < 9223372036854775808;

SELECT COUNT(*) FROM integers WHERE i >= 0;

SELECT COUNT(*) FROM integers WHERE i < 0;

INSERT INTO integers VALUES (-498249);

SELECT COUNT(*) FROM integers WHERE i = 9312908412824241;

SELECT COUNT(*) FROM integers WHERE i = -2092042498432234;

SELECT COUNT(*) FROM integers WHERE i = 1;

SELECT COUNT(*) FROM integers WHERE i = -100;

SELECT COUNT(*) FROM integers WHERE i = 0;

SELECT COUNT(*) FROM integers WHERE i = -598538523852390852;

SELECT COUNT(*) FROM integers WHERE i = 4298421;

SELECT COUNT(*) FROM integers WHERE i = -498249;

SELECT COUNT(*) FROM integers;

SELECT COUNT(*) FROM integers WHERE i < 9223372036854775808;

SELECT COUNT(*) FROM integers WHERE i >= 0;

SELECT COUNT(*) FROM integers WHERE i < 0;

INSERT INTO integers VALUES (9312908412824240);

SELECT COUNT(*) FROM integers WHERE i = 9312908412824241;

SELECT COUNT(*) FROM integers WHERE i = -2092042498432234;

SELECT COUNT(*) FROM integers WHERE i = 1;

SELECT COUNT(*) FROM integers WHERE i = -100;

SELECT COUNT(*) FROM integers WHERE i = 0;

SELECT COUNT(*) FROM integers WHERE i = -598538523852390852;

SELECT COUNT(*) FROM integers WHERE i = 4298421;

SELECT COUNT(*) FROM integers WHERE i = -498249;

SELECT COUNT(*) FROM integers WHERE i = 9312908412824240;

SELECT COUNT(*) FROM integers;

SELECT COUNT(*) FROM integers WHERE i < 9223372036854775808;

SELECT COUNT(*) FROM integers WHERE i >= 0;

SELECT COUNT(*) FROM integers WHERE i < 0;

INSERT INTO integers VALUES (-2092042498432235);

SELECT COUNT(*) FROM integers WHERE i = 9312908412824241;

SELECT COUNT(*) FROM integers WHERE i = -2092042498432234;

SELECT COUNT(*) FROM integers WHERE i = 1;

SELECT COUNT(*) FROM integers WHERE i = -100;

SELECT COUNT(*) FROM integers WHERE i = 0;

SELECT COUNT(*) FROM integers WHERE i = -598538523852390852;

SELECT COUNT(*) FROM integers WHERE i = 4298421;

SELECT COUNT(*) FROM integers WHERE i = -498249;

SELECT COUNT(*) FROM integers WHERE i = 9312908412824240;

SELECT COUNT(*) FROM integers WHERE i = -2092042498432235;

SELECT COUNT(*) FROM integers;

SELECT COUNT(*) FROM integers WHERE i < 9223372036854775808;

SELECT COUNT(*) FROM integers WHERE i >= 0;

SELECT COUNT(*) FROM integers WHERE i < 0;

INSERT INTO integers VALUES (2);

SELECT COUNT(*) FROM integers WHERE i = 9312908412824241;

SELECT COUNT(*) FROM integers WHERE i = -2092042498432234;

SELECT COUNT(*) FROM integers WHERE i = 1;

SELECT COUNT(*) FROM integers WHERE i = -100;

SELECT COUNT(*) FROM integers WHERE i = 0;

SELECT COUNT(*) FROM integers WHERE i = -598538523852390852;

SELECT COUNT(*) FROM integers WHERE i = 4298421;

SELECT COUNT(*) FROM integers WHERE i = -498249;

SELECT COUNT(*) FROM integers WHERE i = 9312908412824240;

SELECT COUNT(*) FROM integers WHERE i = -2092042498432235;

SELECT COUNT(*) FROM integers WHERE i = 2;

SELECT COUNT(*) FROM integers;

SELECT COUNT(*) FROM integers WHERE i < 9223372036854775808;

SELECT COUNT(*) FROM integers WHERE i >= 0;

SELECT COUNT(*) FROM integers WHERE i < 0;

INSERT INTO integers VALUES (-101);

SELECT COUNT(*) FROM integers WHERE i = 9312908412824241;

SELECT COUNT(*) FROM integers WHERE i = -2092042498432234;

SELECT COUNT(*) FROM integers WHERE i = 1;

SELECT COUNT(*) FROM integers WHERE i = -100;

SELECT COUNT(*) FROM integers WHERE i = 0;

SELECT COUNT(*) FROM integers WHERE i = -598538523852390852;

SELECT COUNT(*) FROM integers WHERE i = 4298421;

SELECT COUNT(*) FROM integers WHERE i = -498249;

SELECT COUNT(*) FROM integers WHERE i = 9312908412824240;

SELECT COUNT(*) FROM integers WHERE i = -2092042498432235;

SELECT COUNT(*) FROM integers WHERE i = 2;

SELECT COUNT(*) FROM integers WHERE i = -101;

SELECT COUNT(*) FROM integers;

SELECT COUNT(*) FROM integers WHERE i < 9223372036854775808;

SELECT COUNT(*) FROM integers WHERE i >= 0;

SELECT COUNT(*) FROM integers WHERE i < 0;

INSERT INTO integers VALUES (-598538523852390853);

SELECT COUNT(*) FROM integers WHERE i = 9312908412824241;

SELECT COUNT(*) FROM integers WHERE i = -2092042498432234;

SELECT COUNT(*) FROM integers WHERE i = 1;

SELECT COUNT(*) FROM integers WHERE i = -100;

SELECT COUNT(*) FROM integers WHERE i = 0;

SELECT COUNT(*) FROM integers WHERE i = -598538523852390852;

SELECT COUNT(*) FROM integers WHERE i = 4298421;

SELECT COUNT(*) FROM integers WHERE i = -498249;

SELECT COUNT(*) FROM integers WHERE i = 9312908412824240;

SELECT COUNT(*) FROM integers WHERE i = -2092042498432235;

SELECT COUNT(*) FROM integers WHERE i = 2;

SELECT COUNT(*) FROM integers WHERE i = -101;

SELECT COUNT(*) FROM integers WHERE i = -598538523852390853;

SELECT COUNT(*) FROM integers;

SELECT COUNT(*) FROM integers WHERE i < 9223372036854775808;

SELECT COUNT(*) FROM integers WHERE i >= 0;

SELECT COUNT(*) FROM integers WHERE i < 0;

INSERT INTO integers VALUES (4298422);

SELECT COUNT(*) FROM integers WHERE i = 9312908412824241;

SELECT COUNT(*) FROM integers WHERE i = -2092042498432234;

SELECT COUNT(*) FROM integers WHERE i = 1;

SELECT COUNT(*) FROM integers WHERE i = -100;

SELECT COUNT(*) FROM integers WHERE i = 0;

SELECT COUNT(*) FROM integers WHERE i = -598538523852390852;

SELECT COUNT(*) FROM integers WHERE i = 4298421;

SELECT COUNT(*) FROM integers WHERE i = -498249;

SELECT COUNT(*) FROM integers WHERE i = 9312908412824240;

SELECT COUNT(*) FROM integers WHERE i = -2092042498432235;

SELECT COUNT(*) FROM integers WHERE i = 2;

SELECT COUNT(*) FROM integers WHERE i = -101;

SELECT COUNT(*) FROM integers WHERE i = -598538523852390853;

SELECT COUNT(*) FROM integers WHERE i = 4298422;

SELECT COUNT(*) FROM integers;

SELECT COUNT(*) FROM integers WHERE i < 9223372036854775808;

SELECT COUNT(*) FROM integers WHERE i >= 0;

SELECT COUNT(*) FROM integers WHERE i < 0;

INSERT INTO integers VALUES (-498261);

SELECT COUNT(*) FROM integers WHERE i = 9312908412824241;

SELECT COUNT(*) FROM integers WHERE i = -2092042498432234;

SELECT COUNT(*) FROM integers WHERE i = 1;

SELECT COUNT(*) FROM integers WHERE i = -100;

SELECT COUNT(*) FROM integers WHERE i = 0;

SELECT COUNT(*) FROM integers WHERE i = -598538523852390852;

SELECT COUNT(*) FROM integers WHERE i = 4298421;

SELECT COUNT(*) FROM integers WHERE i = -498249;

SELECT COUNT(*) FROM integers WHERE i = 9312908412824240;

SELECT COUNT(*) FROM integers WHERE i = -2092042498432235;

SELECT COUNT(*) FROM integers WHERE i = 2;

SELECT COUNT(*) FROM integers WHERE i = -101;

SELECT COUNT(*) FROM integers WHERE i = -598538523852390853;

SELECT COUNT(*) FROM integers WHERE i = 4298422;

SELECT COUNT(*) FROM integers WHERE i = -498261;

SELECT COUNT(*) FROM integers;

SELECT COUNT(*) FROM integers WHERE i < 9223372036854775808;

SELECT COUNT(*) FROM integers WHERE i >= 0;

SELECT COUNT(*) FROM integers WHERE i < 0;

PRAGMA enable_verification;

PRAGMA enable_verification;

INSERT INTO tbl1 SELECT range FROM RANGE(0, 50000);

DELETE FROM tbl1 WHERE i > 4;
endloop;

CREATE INDEX idx ON tbl1(i);

SELECT COUNT(i) FROM tbl1 WHERE i = 1;

PRAGMA enable_verification;

CREATE TABLE tbl1 (i INT);

CREATE TABLE tbl2 (i INT);

CREATE TABLE tbl2 (i INT);

INSERT INTO tbl1 SELECT range FROM RANGE(0, 50000);

INSERT INTO tbl2 SELECT range FROM RANGE(0, 50000);

INSERT INTO tbl2 SELECT range FROM RANGE(0, 50000);

DELETE FROM tbl1 WHERE i > 270;

DELETE FROM tbl2 WHERE i > 270;
endloop;

CREATE INDEX idx ON tbl1(i);

SELECT COUNT(i) FROM tbl1 WHERE i = 49;

SELECT COUNT(i) FROM tbl2 WHERE i = 49;

SELECT COUNT(i) FROM tbl1 WHERE rowid = (SELECT MAX(rowid) FROM tbl1);

SELECT COUNT(i) FROM tbl2 WHERE rowid = (SELECT MAX(rowid) FROM tbl1);

PRAGMA enable_verification;

CREATE TABLE integers AS SELECT 42 AS i FROM RANGE(0, 2050);

INSERT INTO integers SELECT 42 + 1 + range FROM RANGE(0, 5000);

CREATE INDEX i_index ON integers USING ART(i);

SET index_scan_percentage = 1.0;

SET index_scan_max_count = 0;

EXPLAIN ANALYZE SELECT COUNT(i) FROM integers WHERE i = 42;

SELECT COUNT(i) FROM integers WHERE i = 42;

PRAGMA enable_verification;

BEGIN;

CREATE TABLE integers (i INT);

INSERT INTO integers SELECT i FROM RANGE(0, 1024, 1) AS t2(j), (VALUES (0), (1)) AS t1(i) ORDER BY j, i;

CREATE INDEX i_index ON integers USING art(i);

SELECT COUNT(*) FROM integers WHERE i < 1;

SELECT COUNT(*) FROM integers WHERE i <= 1;

SELECT COUNT(*) FROM integers WHERE i = 0;

SELECT COUNT(*) FROM integers WHERE i = 1;

SELECT COUNT(*) FROM integers WHERE i > 0;

SELECT COUNT(*) FROM integers WHERE i >= 0;

ROLLBACK;

BEGIN;

CREATE TABLE integers (i INT);

INSERT INTO integers SELECT i FROM RANGE(0, 2048, 1) AS t2(j), (VALUES (0), (1)) AS t1(i) ORDER BY j, i;

CREATE INDEX i_index ON integers USING art(i);

SELECT COUNT(*) FROM integers WHERE i < 1;

SELECT COUNT(*) FROM integers WHERE i <= 1;

SELECT COUNT(*) FROM integers WHERE i = 0;

SELECT COUNT(*) FROM integers WHERE i = 1;

SELECT COUNT(*) FROM integers WHERE i > 0;

SELECT COUNT(*) FROM integers WHERE i >= 0;

PRAGMA enable_verification;

CREATE TABLE integers (i INT);

INSERT INTO integers SELECT * FROM RANGE(-500, 500, 1);

CREATE INDEX i_index ON integers(i);

SELECT SUM(i) FROM integers WHERE i >= -500 AND i <= -498;

SELECT SUM(i) FROM integers WHERE i >= -10 AND i <= 5;

SELECT SUM(i) FROM integers WHERE i >= 10 AND i <= 15;

DROP INDEX i_index;

PRAGMA enable_verification;

CREATE TABLE varchars (v TEXT PRIMARY KEY);

INSERT INTO varchars VALUES ('hello'), ('hello' || CHR(0)), ('hello' || CHR(0) || CHR(0)), ('hello' || CHR(0) || CHR(0) || CHR(0));

INSERT INTO varchars VALUES ('hello' || CHR(0) || CHR(0) || CHR(0));

SELECT * FROM varchars WHERE v = 'hello';

SELECT * FROM varchars WHERE v = 'hello' || CHR(0);

SELECT * FROM varchars WHERE v = 'hello' || CHR(0) || CHR(0);

SELECT * FROM varchars WHERE v = 'hello' || CHR(0) || CHR(0) || CHR(0);

CREATE TABLE blobs (b BLOB PRIMARY KEY);

INSERT INTO blobs VALUES (''), ('\x00'), ('\x01'), ('\x00\x01'), ('\x01\x00'), ('\x01\x01'), ('\x00\x00');

INSERT INTO blobs VALUES ('\x00\x01');

SELECT * FROM blobs WHERE b = '';

SELECT * FROM blobs WHERE b = '\x00';

SELECT * FROM blobs WHERE b = '\x00\x01';

SELECT * FROM blobs WHERE b >= '\x00' ORDER BY CAST(b AS TEXT);

SELECT * FROM blobs WHERE b >= '\x01' ORDER BY CAST(b AS TEXT);

SELECT * FROM blobs WHERE b >= '\x01\x00' ORDER BY CAST(b AS TEXT);

PRAGMA enable_verification;

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (1), (2), (4);

CREATE INDEX i_index ON integers(i);

EXPLAIN ANALYZE SELECT i FROM integers WHERE i = 2;

SELECT i FROM integers WHERE i = 2;

PREPARE v1 AS SELECT * FROM integers WHERE i = $1;

EXPLAIN ANALYZE EXECUTE v1(2);

EXECUTE v1(2);

PRAGMA enable_verification;

CREATE TABLE test (x TEXT PRIMARY KEY);

INSERT INTO test VALUES ('abc');

INSERT INTO test VALUES ('def');

SELECT * FROM test WHERE x > 'z';

INSERT INTO test VALUES ('abcd');

SELECT x FROM test WHERE x > 'abce';

DROP TABLE test;

CREATE TABLE test (x TEXT PRIMARY KEY);

INSERT INTO test VALUES ('abcd'), ('abde');

SELECT x FROM test WHERE x > 'abce';

DROP TABLE test;

CREATE TABLE test (x USMALLINT PRIMARY KEY);

INSERT INTO test SELECT i FROM RANGE(1, 20) AS tbl(i);

SELECT x FROM test WHERE x > 20;

INSERT INTO test VALUES (256);

SELECT x FROM test WHERE x > 20;

DROP TABLE test;

CREATE TABLE test (x USMALLINT PRIMARY KEY);

INSERT INTO test SELECT i FROM RANGE(1, 135) AS tbl(i);

SELECT x FROM test WHERE x > 135;

INSERT INTO test VALUES (256), (257);

SELECT x FROM test WHERE x > 135;

CREATE TABLE tab0 (pk INT PRIMARY KEY, col0 INT, col1 REAL, col2 TEXT, col3 INT, col4 REAL, col5 TEXT);

INSERT INTO tab0 VALUES (0, 25, 74.4, 'vvcgn', 47, 57.68, 'ymlye');

INSERT INTO tab0 VALUES (1, 72, 81.64, 'zsnbm', 42, 74.55, 'tzagd');

INSERT INTO tab0 VALUES (2, 45, 38.39, 'dmsso', 87, 29.20, 'ywydk');

INSERT INTO tab0 VALUES (3, 81, 97.79, 'tdbjm', 48, 89.67, 'hvaol');

INSERT INTO tab0 VALUES (4, 17, 18.5, 'ddcya', 66, 87.1, 'ndulx');

INSERT INTO tab0 VALUES (5, 46, 83.75, 'khqpe', 31, 31.98, 'hzpio');

INSERT INTO tab0 VALUES (6, 85, 8.45, 'ugwie', 30, 22.61, 'klsxt');

INSERT INTO tab0 VALUES (7, 36, 54.34, 'pflrv', 18, 61.89, 'vrltg');

INSERT INTO tab0 VALUES (8, 47, 41.84, 'plpkl', 76, 65.31, 'yzivj');

INSERT INTO tab0 VALUES (9, 76, 63.21, 'uakya', 80, 80.58, 'ocfgj');

CREATE TABLE tab1 (pk INT PRIMARY KEY, col0 INT, col1 REAL, col2 TEXT, col3 INT, col4 REAL, col5 TEXT);

CREATE INDEX idx_tab1_0 ON tab1(col0);

CREATE INDEX idx_tab1_1 ON tab1(col1);

CREATE INDEX idx_tab1_3 ON tab1(col3);

CREATE INDEX idx_tab1_4 ON tab1(col4);

INSERT INTO tab1 SELECT * FROM tab0;

DELETE FROM tab1 WHERE col3 = 54 AND col1 <= 76.83;

SELECT pk FROM tab1 WHERE col3 = 54 AND col1 <= 76.83;

SELECT pk FROM tab1 WHERE NOT (col3 = 54 AND col1 <= 76.83);

DELETE FROM tab1 WHERE (col4 > 71.47) OR col0 IN (98, 26, 25, 60);

SELECT pk FROM tab1 WHERE (col4 > 71.47) OR col0 IN (98, 26, 25, 60);

SELECT pk FROM tab1 WHERE NOT ((col4 > 71.47) OR col0 IN (98, 26, 25, 60));

DELETE FROM tab1 WHERE ((col0 > 32) AND col0 < 87);

SELECT pk FROM tab1 WHERE ((col0 > 32) AND col0 < 87);

CREATE TABLE t0_varchar (c0 TEXT);

INSERT INTO t0_varchar (c0) VALUES ('a'), ('a');

CREATE INDEX t0i0_idx ON t0_varchar(c0);

SELECT c0 FROM t0_varchar WHERE t0_varchar.c0 <= 'a';

CREATE TABLE t0_scan (c0 DATE);

INSERT INTO t0_scan (c0) VALUES ('1970-01-02'), ('1970-01-02'), ('1970-01-03');

CREATE INDEX t0i0 ON t0_scan(c0 DESC);

SELECT c0 FROM t0_scan WHERE '1970-01-03' >= t0_scan.c0 ORDER BY c0;

PRAGMA enable_verification;

CREATE TABLE integers (i BIGINT);

CREATE INDEX idx_integers ON integers(i);

INSERT INTO integers (i) VALUES ('1'), ('-1'), ('1');

SELECT i FROM integers WHERE i <= 0;

CREATE TABLE t0 (c1 TIMESTAMP);

INSERT INTO t0 (c1) VALUES ('2020-02-29 12:00:00'), ('1969-12-09 09:26:38'), ('2020-02-29 12:00:00');

CREATE INDEX i0 ON t0(c1);

SELECT c1 FROM t0 WHERE c1 <= '2007-07-07 07:07:07';

PRAGMA enable_verification;

SET index_scan_max_count = 1;

SET index_scan_percentage = 1.0;

CREATE TABLE integers (i INT);

INSERT INTO integers SELECT 42 FROM RANGE(0, 1000);

INSERT INTO integers SELECT 43 FROM RANGE(0, 10000);

CREATE INDEX idx ON integers(i);

EXPLAIN ANALYZE SELECT i FROM integers WHERE i = 42;

SET index_scan_percentage = 0.000001;

EXPLAIN ANALYZE SELECT i FROM integers WHERE i = 42;

SET index_scan_max_count = 4000;

INSERT INTO integers SELECT 4242 FROM RANGE(0, 4000);

EXPLAIN ANALYZE SELECT i FROM integers WHERE i = 4242;

CALL dbgen(sf=0.01);

CREATE TABLE random_orders AS ((SELECT o_orderkey FROM orders LIMIT 3 OFFSET 100) UNION (SELECT o_orderkey FROM orders LIMIT 3 OFFSET (SELECT COUNT(*) FROM orders) / 2) UNION (SELECT o_orderkey FROM orders LIMIT 3 OFFSET (SELECT COUNT(*) FROM orders) / 2 + 100000));

CREATE TABLE orders_shuffled AS SELECT * FROM orders ORDER BY RANDOM();

EXPLAIN ANALYZE
SELECT o_orderkey FROM orders_shuffled WHERE o_orderkey IN (
SELECT UNNEST(LIST(o_orderkey)) FROM random_orders
) ORDER BY ALL;

ALTER TABLE orders_shuffled ADD PRIMARY KEY (o_orderkey);

EXPLAIN ANALYZE
SELECT o_orderkey FROM orders_shuffled WHERE o_orderkey IN (
SELECT UNNEST(LIST(o_orderkey)) FROM random_orders
) ORDER BY ALL;

PRAGMA enable_verification;

CREATE TABLE tbl AS SELECT range AS i FROM RANGE(0, 500000);

ALTER TABLE tbl ADD PRIMARY KEY (i);

EXPLAIN ANALYZE DELETE FROM tbl WHERE i IN (3, 50, 299, 123);

SELECT COUNT(*) FROM tbl;

EXPLAIN ANALYZE SELECT i FROM tbl WHERE i IN (2, 42, 100, 42, 101);

SELECT i FROM tbl WHERE i IN (2, 42, 100, 42, 101) ORDER BY i;

EXPLAIN ANALYZE SELECT i FROM tbl WHERE i IN (2, 42, 100, 42, 101) AND i != 42 AND i <= 100;

SELECT i FROM tbl WHERE i IN (2, 42, 100, 42, 101) AND i <> 42 AND i <= 100 ORDER BY i;

EXPLAIN ANALYZE SELECT i FROM tbl WHERE i IN (2, 42, 100, 42, 101) AND i = 42 AND i <= 100;

SELECT i FROM tbl WHERE i IN (2, 42, 100, 42, 101) AND i = 42 AND i <= 100 ORDER BY i;

EXPLAIN ANALYZE SELECT i FROM tbl WHERE i IN (2, 42, 100, 42, 101) AND i < 101 AND i >= 42;

SELECT i FROM tbl WHERE i IN (2, 42, 100, 42, 101) AND i < 101 AND i >= 42 ORDER BY i;

EXPLAIN ANALYZE SELECT i FROM tbl WHERE i IN (2, 42, 100, 42, 101) AND i > 42 AND i >= 42;

SELECT i FROM tbl WHERE i IN (2, 42, 100, 42, 101) AND i > 42 AND i >= 42 ORDER BY i;

EXPLAIN ANALYZE SELECT i FROM tbl WHERE i IN (2, 42, 100, 42, 101) AND i > 42 AND i IN (56, 200, 2, 100);

SELECT i FROM tbl WHERE i IN (2, 42, 100, 42, 101) AND i > 42 AND i IN (56, 200, 2, 100) ORDER BY i;

PRAGMA enable_verification;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '400KB';

CREATE TABLE tbl AS SELECT range AS i FROM RANGE(0, 40000);

SELECT used_blocks FROM PRAGMA_DATABASE_SIZE();

CREATE INDEX idx ON tbl(i);

SELECT used_blocks > 0 FROM PRAGMA_DATABASE_SIZE();

PRAGMA enable_verification;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '400KB';

CREATE TABLE tbl (i INT PRIMARY KEY);

SELECT used_blocks FROM PRAGMA_DATABASE_SIZE();

INSERT INTO tbl SELECT range FROM RANGE(0, 40000);

SELECT used_blocks > 0 FROM PRAGMA_DATABASE_SIZE();

CREATE TABLE integers (i INT PRIMARY KEY);

INSERT INTO integers VALUES (1), (2), (3), (4), (5);

CHECKPOINT;
restart;

INSERT INTO integers VALUES (1);

DROP TABLE integers;

CREATE TABLE integers (i INT);

CREATE INDEX idx ON integers(i);

CHECKPOINT;

INSERT INTO integers (SELECT range FROM RANGE(0, 512) UNION ALL SELECT 55);

CHECKPOINT;

SELECT total_blocks < 5 FROM PRAGMA_DATABASE_SIZE();

SELECT table_name, index_count FROM DUCKDB_TABLES() ORDER BY table_name;

SELECT index_name, table_name FROM DUCKDB_INDEXES() ORDER BY index_name;

SELECT table_name, constraint_type FROM DUCKDB_CONSTRAINTS() ORDER BY ALL;

SELECT id, name FROM pk_tbl ORDER BY id;

SELECT id FROM pk_tbl WHERE id = 2;

SELECT i FROM idx_tbl WHERE i = 11;

SELECT i FROM idx_tbl WHERE i = 11;

SELECT i FROM idx_tbl WHERE i = 11;

SELECT table_name, index_count FROM DUCKDB_TABLES() ORDER BY table_name;

SELECT index_name, table_name FROM DUCKDB_INDEXES() ORDER BY index_name;

SELECT table_name, constraint_type FROM DUCKDB_CONSTRAINTS() ORDER BY ALL;

SELECT id, name FROM pk_tbl ORDER BY id;

SELECT id FROM pk_tbl WHERE id = 2;

SELECT i FROM idx_tbl WHERE i = 11;

INSERT INTO idx_tbl SELECT range, range, range FROM RANGE(0, 300000);

CHECKPOINT;

SELECT used_blocks > 2621440 / GET_BLOCK_SIZE('test_art_import') FROM PRAGMA_DATABASE_SIZE();

CREATE INDEX ART_index ON idx_tbl(i);

CREATE INDEX idx_1 ON idx_tbl(i);

SELECT i, j, k FROM idx_tbl WHERE i = 110 ORDER BY ALL;

CHECKPOINT AS restart;

SELECT table_name, index_count FROM DUCKDB_TABLES() ORDER BY table_name;

SELECT index_name, table_name FROM DUCKDB_INDEXES() ORDER BY index_name;

SELECT table_name, constraint_type FROM DUCKDB_CONSTRAINTS() ORDER BY ALL;

SELECT id, name FROM pk_tbl ORDER BY id;

SELECT id FROM pk_tbl WHERE id = 2;

SELECT i FROM idx_tbl WHERE i = 11;

SELECT i, j, k FROM idx_tbl WHERE i = 110 ORDER BY ALL;

DROP INDEX idx_1;

DROP INDEX idx_2;

DROP INDEX ART_index;

DROP TABLE fk_tbl;

DROP TABLE idx_tbl;

DROP TABLE pk_tbl;

CHECKPOINT;

SELECT used_blocks < 2 FROM PRAGMA_DATABASE_SIZE();

PRAGMA enable_verification;

BEGIN;

CREATE TABLE tracking ("nflId" TEXT, "frameId" INT, "gameId" INT, "playId" INT);

INSERT INTO tracking VALUES ('a', 0, 0, 0);

CREATE INDEX nflid_idx ON tracking(nflid);

CREATE UNIQUE INDEX tracking_key_idx ON tracking(gameId, playId, frameId, nflId);

CREATE UNIQUE INDEX tracking_key_idx ON tracking(gameId, playId, frameId, nflId);

ROLLBACK;

PRAGMA enable_verification;

CREATE TABLE raw ("year" SMALLINT, "month" TINYINT, "day" TINYINT, "customer_ID" BIGINT);

INSERT INTO raw VALUES (1, 1, 1, 1);

CREATE UNIQUE INDEX customer_year_month_idx ON raw(customer_ID, year, month);
restart;

CREATE UNIQUE INDEX customer_year_month_idx ON raw(customer_ID, year, month);
restart;

CREATE UNIQUE INDEX customer_year_month_idx ON raw(customer_ID, year, month);
restart;

INSERT INTO raw VALUES (1, 1, 1, 1);

SET threads = 1;

SET memory_limit = '5MB';

CREATE TABLE tbl AS SELECT range AS id FROM RANGE(0, 100000);

CREATE INDEX idx ON tbl(id);

PRAGMA enable_verification;

CREATE TABLE tbl (i INT PRIMARY KEY, j INT UNIQUE);

CREATE INDEX PRIMARY_tbl_0 ON tbl(i);

CREATE INDEX UNIQUE_tbl_1 ON tbl(j);

INSERT INTO tbl SELECT range, range FROM RANGE(0, 3000);

INSERT INTO tbl VALUES (4000, 20);

INSERT INTO tbl VALUES (20, 4000);

INSERT INTO tbl VALUES (4000, 20);

INSERT INTO tbl VALUES (20, 4000);

CREATE INDEX PRIMARY_tbl_0 ON tbl(i);

CREATE INDEX UNIQUE_tbl_1 ON tbl(j);

INSERT INTO tbl VALUES (20, 4000);

INSERT INTO tbl VALUES (4000, 20);

DROP TABLE tbl;
restart;

CREATE TABLE tbl (i INT PRIMARY KEY, j INT UNIQUE);

CREATE TABLE fk_tbl (i INT, j INT, FOREIGN KEY (i) REFERENCES tbl (i), FOREIGN KEY (j) REFERENCES tbl (j));

INSERT INTO tbl SELECT range, range FROM RANGE(0, 3000);

INSERT INTO fk_tbl SELECT range, range FROM RANGE(0, 3000);

INSERT INTO tbl VALUES (4000, 20);

INSERT INTO tbl VALUES (20, 4000);

INSERT INTO fk_tbl VALUES (4000, 20);

INSERT INTO fk_tbl VALUES (20, 4000);

CREATE INDEX PRIMARY_tbl_0 ON tbl(i);

CREATE INDEX UNIQUE_tbl_1 ON tbl(j);

CREATE INDEX FOREIGN_fk_tbl_0 ON fk_tbl(i);

CREATE INDEX FOREIGN_fk_tbl_1 ON fk_tbl(j);

INSERT INTO tbl VALUES (4000, 20);

INSERT INTO tbl VALUES (20, 4000);

INSERT INTO fk_tbl VALUES (4000, 20);

INSERT INTO fk_tbl VALUES (20, 4000);

CREATE INDEX PRIMARY_tbl_0 ON tbl(i);

CREATE INDEX UNIQUE_tbl_1 ON tbl(j);

CREATE INDEX PRIMARY_tbl_0 ON tbl(i);

CREATE INDEX UNIQUE_tbl_1 ON tbl(j);

CREATE INDEX FOREIGN_fk_tbl_0 ON fk_tbl(i);

CREATE INDEX FOREIGN_fk_tbl_1 ON fk_tbl(j);

INSERT INTO tbl VALUES (4000, 20);

INSERT INTO tbl VALUES (20, 4000);

INSERT INTO fk_tbl VALUES (4000, 20);

INSERT INTO fk_tbl VALUES (20, 4000);

CREATE TABLE tbl (i INT);

CREATE INDEX idx_drop ON tbl(i);
load __TEST_DIR__/test_index.db readonly;

CREATE INDEX idx ON tbl(i);

DROP INDEX idx_drop;

SELECT index_name FROM DUCKDB_INDEXES();

CREATE TABLE integers AS SELECT i FROM RANGE(0, 1000000) AS tbl(i);

CHECKPOINT;

CREATE TABLE blocks_tbl AS SELECT total_blocks, used_blocks FROM PRAGMA_DATABASE_SIZE();

CREATE INDEX idx ON integers(i);

SELECT i FROM integers WHERE i = 500000;

CHECKPOINT;

CREATE TABLE blocks_idx AS SELECT total_blocks, used_blocks FROM PRAGMA_DATABASE_SIZE();

DROP INDEX idx;

CHECKPOINT;

CREATE TABLE blocks_drop_idx AS SELECT total_blocks, used_blocks FROM PRAGMA_DATABASE_SIZE();

CREATE INDEX idx ON integers(i);

CHECKPOINT;

SELECT i FROM integers WHERE i = 500000;

DROP INDEX idx;

CHECKPOINT;

SELECT current.total_blocks < blocks_drop_idx.total_blocks + 4 FROM PRAGMA_DATABASE_SIZE() AS current, blocks_drop_idx;

CREATE INDEX idx ON integers(i);

CHECKPOINT;

SELECT current.total_blocks < blocks_idx.total_blocks + 5 FROM PRAGMA_DATABASE_SIZE() AS current, blocks_idx;

SELECT i FROM integers WHERE i = 500000;

CHECKPOINT;

CREATE TABLE prev_delete_tbl AS SELECT total_blocks, used_blocks FROM PRAGMA_DATABASE_SIZE();

DELETE FROM integers WHERE i > 100000;

CHECKPOINT;

SELECT current.used_blocks < prev_delete_tbl.total_blocks FROM PRAGMA_DATABASE_SIZE() AS current, prev_delete_tbl;

CHECKPOINT;

INSERT INTO integers SELECT i FROM RANGE(0, 1000000) AS tbl(i);

SELECT current.total_blocks > blocks_idx.total_blocks AND current.total_blocks < blocks_idx.total_blocks * 2 FROM PRAGMA_DATABASE_SIZE() AS current, blocks_idx;

CHECKPOINT;

DELETE FROM integers;

CHECKPOINT;

SELECT current.used_blocks < blocks_idx.total_blocks FROM PRAGMA_DATABASE_SIZE() AS current, blocks_idx;

SELECT used_blocks < 2 FROM PRAGMA_DATABASE_SIZE();

CREATE TABLE pk_tbl (i INT PRIMARY KEY);

INSERT INTO pk_tbl SELECT range FROM RANGE(0, 200000);

SELECT used_blocks > 2 FROM PRAGMA_DATABASE_SIZE();

DROP TABLE pk_tbl;

CHECKPOINT;

SELECT used_blocks < 2 FROM PRAGMA_DATABASE_SIZE();

SELECT used_blocks < 2 FROM PRAGMA_DATABASE_SIZE();

CREATE TABLE pk_tbl (i INT PRIMARY KEY);

INSERT INTO pk_tbl SELECT range FROM RANGE(0, 200000);

CREATE TABLE fk_tbl (i INT REFERENCES pk_tbl (i));

INSERT INTO fk_tbl SELECT range FROM RANGE(0, 200000);

DROP TABLE fk_tbl;

DROP TABLE pk_tbl;

CHECKPOINT;

SELECT used_blocks < 2 FROM PRAGMA_DATABASE_SIZE();

SELECT used_blocks < 2 FROM PRAGMA_DATABASE_SIZE();

CREATE TABLE unique_tbl (i INT UNIQUE);

INSERT INTO unique_tbl SELECT range FROM RANGE(0, 200000);

SELECT used_blocks > 2 FROM PRAGMA_DATABASE_SIZE();

DROP TABLE unique_tbl;

CHECKPOINT;

SELECT used_blocks < 2 FROM PRAGMA_DATABASE_SIZE();

PRAGMA enable_verification;

CREATE TABLE integers (i INT, j INT);

CREATE INDEX i_index ON integers(i);

INSERT INTO integers VALUES (1, 1), (2, 2), (3, 3), (4, 4), (5, 5);

checkpoint AS restart;

SELECT j FROM integers WHERE i = 3;

DROP INDEX i_index;

CREATE TABLE tbl_deser_scan (id INT);

INSERT INTO tbl_deser_scan SELECT range FROM RANGE(0, 100000);

INSERT INTO tbl_deser_scan SELECT 424242 FROM RANGE(0, 5);

INSERT INTO tbl_deser_scan SELECT 424243 FROM RANGE(0, 5);

INSERT INTO tbl_deser_scan SELECT 1 FROM RANGE(0, 5);

CREATE INDEX idx_deser_scan ON tbl_deser_scan(id);
restart;

SELECT id FROM tbl_deser_scan WHERE id >= 424242;

CREATE TABLE max_row_id AS SELECT MAX(rowid) AS id FROM tbl_deser_scan WHERE id = 424242;
restart;

DELETE FROM tbl_deser_scan WHERE rowid = (SELECT MAX(id) FROM max_row_id);
restart;

INSERT INTO tbl_deser_scan VALUES (1);

CREATE MACRO m(x, y := 7) AS x + y;

CREATE TABLE tbl_m (x INT, y TEXT);

CREATE UNIQUE INDEX idx_m ON tbl_m(M(tbl_m.x));

INSERT INTO tbl_m VALUES (10, 'hello');

INSERT INTO tbl_m VALUES (10, 'world');

PRAGMA enable_verification;

PRAGMA disable_checkpoint_on_shutdown;

SET wal_autocheckpoint = '10GB';

CREATE TABLE history (id TEXT, type TEXT, PRIMARY KEY (id, type));

INSERT INTO history (id, type) VALUES ('5_create_aaaaaaaaaaa_mapping', 'sql');

INSERT INTO history (id, type) VALUES ('5_create_aaaaaaaaaaa_mapping', 'sql');

PRAGMA enable_verification;

PRAGMA disable_checkpoint_on_shutdown;

SET wal_autocheckpoint = '10GB';

CREATE TABLE history (id TEXT, type TEXT, PRIMARY KEY (id, type));

INSERT INTO history (id, type) VALUES ('m0001_initialize', 'sql');

INSERT INTO history (id, type) VALUES ('m0005_create_aaaaaaaaaaa_mapping_table', 'sql');

CREATE TABLE pk_integers (i INT PRIMARY KEY);

INSERT INTO pk_integers VALUES (1);

CREATE TABLE pk_integers2 (i INT PRIMARY KEY);

INSERT INTO pk_integers2 (VALUES (1)) AS restart;

SELECT i FROM pk_integers WHERE i = 1;

CREATE TABLE tbl AS SELECT i FROM RANGE(0, 10000) AS tbl(i);

CHECKPOINT;

CREATE TABLE blocks_tbl AS SELECT total_blocks, used_blocks FROM PRAGMA_DATABASE_SIZE();

CREATE UNIQUE INDEX idx ON tbl(i);

SELECT i FROM tbl WHERE i = 5000;

CHECKPOINT;

CREATE TABLE blocks_idx AS SELECT total_blocks, used_blocks FROM PRAGMA_DATABASE_SIZE();

DELETE FROM tbl;

CHECKPOINT;

CREATE TABLE blocks_del_tbl AS SELECT total_blocks, used_blocks FROM PRAGMA_DATABASE_SIZE();

INSERT INTO tbl SELECT i FROM RANGE(0, 10000) AS tbl(i);

INSERT INTO tbl SELECT i FROM RANGE(0, 10000) AS tbl(i);

BEGIN;

DELETE FROM tbl;

SELECT current.total_blocks < blocks_del_tbl.total_blocks + 4 FROM PRAGMA_DATABASE_SIZE() AS current, blocks_del_tbl;

INSERT INTO tbl SELECT i FROM RANGE(0, 10000) AS tbl(i);

COMMIT;

CHECKPOINT;

SELECT current.total_blocks < blocks_idx.total_blocks + 4 FROM PRAGMA_DATABASE_SIZE() AS current, blocks_idx;

DROP INDEX idx;

SELECT current.total_blocks < blocks_tbl.total_blocks + 4 FROM PRAGMA_DATABASE_SIZE() AS current, blocks_tbl;

PRAGMA enable_verification;

CREATE TABLE t0 (c0 BOOLEAN, c1 INT);

CREATE INDEX i0 ON t0(c1, c0);

INSERT INTO t0 (c1) VALUES (0);

SELECT * FROM t0;

CREATE TABLE duplicate_id (id UINT32, id2 BIGINT);

INSERT INTO duplicate_id SELECT range, range FROM RANGE(0, 2048, 1);

INSERT INTO duplicate_id VALUES (2047, 2047);

CREATE UNIQUE INDEX idx ON duplicate_id(id, id2);

DROP TABLE duplicate_id;

CREATE TABLE int128_first (id INT128, id2 INT128);

INSERT INTO int128_first SELECT range, range FROM RANGE(0, 5000);

CREATE UNIQUE INDEX idx_1 ON int128_first(id, id2);

CREATE TABLE uint8_first (id UINT8, id2 UINT8);

INSERT INTO uint8_first SELECT range, range FROM RANGE(0, 128);

CREATE INDEX idx_2 ON uint8_first(id, id2);

CREATE TABLE uint64_first (id UINT64, id2 UINT32, id3 UINT64, id4 REAL);

INSERT INTO uint64_first SELECT range, range, range, 0.456 + range FROM RANGE(0, 5000);

CREATE INDEX idx_3 ON uint64_first(id, id2, id3, id4);

CREATE TABLE int128_point AS SELECT CAST(range AS INT128) AS id FROM RANGE(0, 5000);

CREATE INDEX idx_int128_point ON int128_point(id);

SELECT id FROM int128_point WHERE id = 2048;

CREATE TABLE uint64_point AS SELECT CAST(range AS UINT64) AS id FROM RANGE(0, 5000);

CREATE INDEX idx_uint64_point ON uint64_point(id);

SELECT id FROM uint64_point WHERE id = 2048;

CREATE TABLE uint32_point AS SELECT CAST(range AS UINT32) AS id FROM RANGE(0, 5000);

CREATE INDEX idx_uint32_point ON uint32_point(id);

SELECT id FROM uint32_point WHERE id = 2048;

CREATE TABLE uint8_point AS SELECT CAST(range AS UINT8) AS id FROM RANGE(0, 128);

CREATE INDEX idx_uint8_point ON uint8_point(id);

SELECT id FROM uint8_point WHERE id = 100;

PRAGMA enable_verification;

CREATE TABLE numbers (i DOUBLE);

INSERT INTO numbers VALUES (CAST(0 AS DOUBLE));

INSERT INTO numbers VALUES (CAST(-0 AS DOUBLE));

CREATE INDEX i_index ON numbers(i);

SELECT COUNT(i) FROM numbers WHERE i = CAST(0 AS DOUBLE);

SELECT COUNT(i) FROM numbers WHERE i = CAST(-0 AS DOUBLE);

PRAGMA enable_verification;

CREATE TABLE integers (i BIGINT, j INT, k TEXT, l BIGINT);

CREATE INDEX i_index ON integers USING art((j + l));

INSERT INTO integers VALUES (10, 1, 'hello', 4), (11, 2, 'world', 6);

SELECT * FROM integers WHERE j + l = 5;

SELECT * FROM integers WHERE k = 'hello';

UPDATE integers SET j = 5, l = l WHERE j = 1;

UPDATE integers SET j = 5 WHERE j = 5;

SELECT * FROM integers WHERE j + l = 9;

DELETE FROM integers WHERE j + l = 8;

DELETE FROM integers WHERE j + l = 9;

SELECT COUNT(*) FROM integers;

SELECT COUNT(*) FROM integers WHERE j + l > 0;

PRAGMA enable_verification;

CREATE TABLE integers (i TINYINT, j SMALLINT, k INT, l BIGINT);

CREATE INDEX i_index1 ON integers(i);

CREATE INDEX i_index2 ON integers(j);

CREATE INDEX i_index3 ON integers(k);

CREATE INDEX i_index4 ON integers(l);

SELECT i FROM integers WHERE i > 0;

SELECT j FROM integers WHERE j < 0;

SELECT k FROM integers WHERE k >= 0;

SELECT l FROM integers WHERE l <= 0;

INSERT INTO integers VALUES (1, 1, 1, 1);

INSERT INTO integers VALUES (2, 2, 2, 2);

INSERT INTO integers VALUES (3, 3, 3, 3);

INSERT INTO integers VALUES (4, 4, 4, 4);

INSERT INTO integers VALUES (5, 5, 5, 5);

SELECT * FROM integers ORDER BY i;

SELECT i FROM integers WHERE i > CAST(0 AS TINYINT) ORDER BY i;

SELECT j FROM integers WHERE j <= CAST(2 AS SMALLINT) ORDER BY j;

SELECT k FROM integers WHERE k >= -CAST(100000 AS INT) ORDER BY k;

SELECT k FROM integers WHERE k >= CAST(100000 AS INT) ORDER BY k;

SELECT k FROM integers WHERE k >= CAST(100000 AS INT) AND k <= CAST(100001 AS INT) ORDER BY k;

SELECT l FROM integers WHERE l <= CAST(1000000000 AS BIGINT) ORDER BY i;

SELECT l FROM integers WHERE l <= -CAST(1000000000 AS BIGINT) ORDER BY i;

PRAGMA enable_verification;

CREATE TABLE numbers (i REAL);

INSERT INTO numbers VALUES (CAST(0 AS REAL));

INSERT INTO numbers VALUES (CAST(-0 AS REAL));

CREATE INDEX i_index ON numbers(i);

SELECT COUNT(i) FROM numbers WHERE i = CAST(0 AS REAL);

SELECT COUNT(i) FROM numbers WHERE i = CAST(-0 AS REAL);

PRAGMA enable_verification;

CREATE TABLE numbers (i REAL PRIMARY KEY, j INT);

INSERT INTO numbers VALUES (3.45, 4), (3.45, 5);

INSERT INTO numbers VALUES (3.45, 4), (2.2, 5);

SELECT * FROM numbers;

INSERT INTO numbers VALUES (6, 6), (3.45, 4);

INSERT INTO numbers VALUES (6, 6);

SELECT * FROM numbers;

INSERT INTO numbers VALUES (NULL, 4);

UPDATE numbers SET i = NULL;

PRAGMA enable_verification;

CREATE TABLE tbl (u_2 UNION("string" TEXT, "bool" BOOLEAN), u_1 UNION("string" TEXT), i INT, u_list UNION("int" INT, "list" INT[], "bool" BOOLEAN));

INSERT INTO tbl VALUES ('hello', 'world', 42, [1, 2, 3]), (NULL, NULL, NULL, NULL), (TRUE, NULL, 44, 45), (FALSE, 'wazzup', FALSE, [1]);

CREATE INDEX idx_u_2 ON tbl(u_2);

CREATE INDEX idx_u_1 ON tbl(u_1);

CREATE INDEX idx_i ON tbl(i);

DROP INDEX idx_i;

CREATE INDEX idx_u_list ON tbl(u_list);

CREATE INDEX idx_u_list ON tbl(i, u_list);

SELECT * FROM tbl ORDER BY ALL;

CREATE UNIQUE INDEX idx_u_2_1 ON tbl((u_2.string));

CREATE UNIQUE INDEX idx_u_2_2 ON tbl((u_2.bool));

CREATE UNIQUE INDEX idx_u_1 ON tbl((u_1.string));

CREATE UNIQUE INDEX idx_list_1 ON tbl((u_list.int));

CREATE UNIQUE INDEX idx_list_2 ON tbl((u_list.list));

CREATE UNIQUE INDEX idx_list_3 ON tbl((u_list.bool));
restart;

INSERT INTO tbl VALUES ('helloo', 'worldd', 43, [1, 2, 3, 4]);
restart;

SELECT * FROM tbl ORDER BY ALL;

SELECT u_1.string FROM tbl WHERE u_2 = 'helloo';

INSERT INTO tbl VALUES ('helloo', 'nop', 7, TRUE);

DROP INDEX idx_u_2_1;

DROP INDEX idx_u_2_2;

DROP INDEX idx_u_1;

DROP INDEX idx_list_1;

DROP INDEX idx_list_3;
restart;

CREATE UNIQUE INDEX idx_c_1 ON tbl((u_2.string), (u_1.string));

CREATE INDEX idx_c_fail ON tbl((u_2.string), u_list);

CREATE UNIQUE INDEX idx_c_2 ON tbl((u_list.int), (u_1.string), (u_2.bool));
restart;

INSERT INTO tbl VALUES ('sunshine', 'love', 85, TRUE);
restart;

SELECT * FROM tbl ORDER BY ALL;

SELECT u_list.bool FROM tbl WHERE u_1.string = 'love';

SELECT * FROM tbl ORDER BY ALL;

SELECT u_list.bool FROM tbl WHERE u_1.string = 'love';

INSERT INTO tbl VALUES ('sunshine', 'love', 85, TRUE);

PRAGMA enable_verification;

CREATE TABLE strings (i TEXT);

CREATE INDEX i_index ON strings(i);

INSERT INTO strings VALUES ('test'), ('test1'), ('vest1'), ('somesuperbigstring'), ('somesuperbigstring1'), ('somesuperbigstring2'), ('somesuperbigstring'), ('maybesomesuperbigstring'), ('maybesomesuperbigstringmaybesomesuperbigstringmaybesomesuperbigstringmaybesomesuperbigstringmaybesomesuperbigstringmaybesomesuperbigstringmaybesomesuperbigstring'), ('maybesomesuperbigstringmaybesomesuperbigstringmaybesomesuperbigstringmaybesomesuperbigstringmaybesomesuperbigstringmaybesomesuperbigstringmaybesomesuperbigstring2');

SELECT COUNT(i) FROM strings WHERE i = 'test';

SELECT COUNT(i) FROM strings WHERE i = 'somesuperbigstring';

SELECT COUNT(i) FROM strings WHERE i = 'maybesomesuperbigstringmaybesomesuperbigstringmaybesomesuperbigstringmaybesomesuperbigstringmaybesomesuperbigstringmaybesomesuperbigstringmaybesomesuperbigstring';

SELECT COUNT(i) FROM strings WHERE i = 'maybesomesuperbigstringmaybesomesuperbigstringmaybesomesuperbigstringmaybesomesuperbigstringmaybesomesuperbigstringmaybesomesuperbigstringmaybesomesuperbigstring2';

SELECT COUNT(i) FROM strings WHERE i >= 'somesuperbigstring' AND i <= 'somesuperbigstringz';

SELECT COUNT(i) FROM strings WHERE i = 'somesuperthisdoesnotexist';

DROP INDEX i_index;

PRAGMA enable_verification;

CREATE TABLE delete_vacuum (id INT);

INSERT INTO delete_vacuum SELECT 10 FROM RANGE(0, 10000);

INSERT INTO delete_vacuum SELECT 11 FROM RANGE(0, 10000);

INSERT INTO delete_vacuum SELECT 12 FROM RANGE(0, 10000);

INSERT INTO delete_vacuum SELECT 13 FROM RANGE(0, 10000);

CREATE INDEX idx ON delete_vacuum(id);

DELETE FROM delete_vacuum WHERE id = 11 OR id = 10;

CREATE TABLE reuse_buffer_tbl (i INT);

INSERT INTO reuse_buffer_tbl SELECT range FROM RANGE(0, 200000);

CREATE INDEX idx_reuse_buffer ON reuse_buffer_tbl(i);

DELETE FROM reuse_buffer_tbl WHERE i < 100000;

PRAGMA enable_verification;

CREATE FUNCTION mem_to_bytes(x) AS CASE WHEN CONTAINS(x, 'KiB') THEN CAST(REPLACE(x, 'KiB', '') AS INT) * 1024.0 WHEN CONTAINS(x, 'MiB') THEN CAST(REPLACE(x, 'MiB', '') AS INT) * 1024.0 * 1024 WHEN CONTAINS(x, 'GiB') THEN CAST(REPLACE(x, 'GiB', '') AS INT) * 1024.0 * 1024 * 1024 WHEN CONTAINS(x, 'TiB') THEN CAST(REPLACE(x, 'TiB', '') AS INT) * 1024.0 * 1024 * 1024 * 1024 WHEN x = '0 bytes' THEN 0 ELSE CAST(x AS INT) END;

CREATE TABLE temp (i INT);

CREATE TABLE empty AS SELECT MEM_TO_BYTES(memory_usage) AS usage FROM PRAGMA_DATABASE_SIZE();

INSERT INTO temp SELECT * FROM RANGE(0, 1000000);

CREATE TABLE base AS SELECT MEM_TO_BYTES(memory_usage) AS usage FROM PRAGMA_DATABASE_SIZE();

SELECT base.usage > empty.usage FROM base, empty;

DROP TABLE temp;

UPDATE empty SET usage = (SELECT MEM_TO_BYTES(current.memory_usage) FROM PRAGMA_DATABASE_SIZE() AS current);

CREATE TABLE t (i INT);

INSERT INTO t SELECT * FROM RANGE(0, 1000000);

CREATE INDEX idx ON t(i);

SELECT MEM_TO_BYTES(current.memory_usage) < 4 * base.usage FROM base, PRAGMA_DATABASE_SIZE() AS current;

INSERT INTO t SELECT range * 4 FROM RANGE(0, 250000);

CREATE TABLE db_size AS SELECT MEM_TO_BYTES(current.memory_usage) AS usage FROM PRAGMA_DATABASE_SIZE() AS current;

DELETE FROM t WHERE i > 500000;

SELECT MEM_TO_BYTES(current.memory_usage) < db_size.usage + 10000000 FROM db_size, PRAGMA_DATABASE_SIZE() AS current;

SELECT MEM_TO_BYTES(current.memory_usage) < db_size.usage + 10000000 FROM db_size, PRAGMA_DATABASE_SIZE() AS current;

SELECT MEM_TO_BYTES(current.memory_usage) < db_size.usage + 10000000 FROM db_size, PRAGMA_DATABASE_SIZE() AS current;

SELECT MEM_TO_BYTES(current.memory_usage) < db_size.usage FROM db_size, PRAGMA_DATABASE_SIZE() AS current;

UPDATE db_size SET usage = (SELECT MEM_TO_BYTES(current.memory_usage) AS usage FROM PRAGMA_DATABASE_SIZE() AS current);

DELETE FROM t;

SELECT MEM_TO_BYTES(current.memory_usage) < db_size.usage FROM db_size, PRAGMA_DATABASE_SIZE() AS current;

PRAGMA enable_verification;

CREATE FUNCTION mem_to_bytes(x) AS CASE WHEN CONTAINS(x, 'KiB') THEN CAST(REPLACE(x, 'KiB', '') AS INT) * 1024.0 WHEN CONTAINS(x, 'MiB') THEN CAST(REPLACE(x, 'MiB', '') AS INT) * 1024.0 * 1024 WHEN CONTAINS(x, 'GiB') THEN CAST(REPLACE(x, 'GiB', '') AS INT) * 1024.0 * 1024 * 1024 WHEN CONTAINS(x, 'TiB') THEN CAST(REPLACE(x, 'TiB', '') AS INT) * 1024.0 * 1024 * 1024 * 1024 WHEN x = '0 bytes' THEN 0 ELSE CAST(x AS INT) END;

CREATE TABLE temp (i TEXT);

CREATE TABLE empty AS SELECT MEM_TO_BYTES(memory_usage) AS usage FROM PRAGMA_DATABASE_SIZE();

INSERT INTO temp SELECT range || 'I am' || range || 'a long not' || range || 'inlined string' || range FROM RANGE(0, 100000) AS range;

CREATE TABLE base AS SELECT MEM_TO_BYTES(memory_usage) AS usage FROM PRAGMA_DATABASE_SIZE();

SELECT base.usage > empty.usage FROM base, empty;

DROP TABLE temp;

UPDATE empty SET usage = (SELECT MEM_TO_BYTES(current.memory_usage) FROM PRAGMA_DATABASE_SIZE() AS current);

CREATE TABLE t (i TEXT);

INSERT INTO t SELECT range || 'I am' || range || 'a long not' || range || 'inlined string' || range FROM RANGE(0, 100000) AS range;

CREATE INDEX idx ON t(i);

SELECT MEM_TO_BYTES(current.memory_usage) > 2 * base.usage AND MEM_TO_BYTES(current.memory_usage) < 4 * base.usage FROM base, PRAGMA_DATABASE_SIZE() AS current;

INSERT INTO t SELECT (range * 4) || 'I am' || (range * 4) || 'a long not' || (range * 4) || 'inlined string' || (range * 4) FROM RANGE(0, 100000) AS range;

SELECT CASE WHEN MEM_TO_BYTES(current.memory_usage) > 4 * base.usage AND MEM_TO_BYTES(current.memory_usage) <= 8 * base.usage THEN TRUE ELSE CAST(CONCAT('current mem usage not between 4X and 7X base (current ', current.memory_usage, ', base ', base.usage, ')') AS UNION(err TEXT, b BOOLEAN)) END FROM base, PRAGMA_DATABASE_SIZE() AS current;

CREATE TABLE db_size AS SELECT MEM_TO_BYTES(current.memory_usage) AS usage FROM PRAGMA_DATABASE_SIZE() AS current;

DELETE FROM t WHERE rowid > (SELECT AVG(rowid) FROM t);

SELECT MEM_TO_BYTES(current.memory_usage) < db_size.usage + 10000000 FROM db_size, PRAGMA_DATABASE_SIZE() AS current;

SELECT MEM_TO_BYTES(current.memory_usage) < db_size.usage + 10000000 FROM db_size, PRAGMA_DATABASE_SIZE() AS current;

DELETE FROM t WHERE rowid > (SELECT AVG(rowid) FROM t);
endloop;

SELECT MEM_TO_BYTES(current.memory_usage) < db_size.usage FROM db_size, PRAGMA_DATABASE_SIZE() AS current;

UPDATE db_size SET usage = (SELECT MEM_TO_BYTES(current.memory_usage) AS usage FROM PRAGMA_DATABASE_SIZE() AS current);

DELETE FROM t;

SELECT MEM_TO_BYTES(current.memory_usage) <= db_size.usage FROM db_size, PRAGMA_DATABASE_SIZE() AS current;

CREATE TABLE integers (i INT);

BEGIN;

INSERT INTO integers SELECT * FROM RANGE(0, 500000);

SELECT COUNT(*) FROM integers;

ROLLBACK;

SELECT COUNT(*) FROM integers;

PRAGMA enable_verification;

CREATE TABLE integers (i INT, j INT);

INSERT INTO integers BY NAME SELECT 42 AS j;

INSERT INTO integers BY NAME SELECT 84 AS i;

INSERT INTO integers BY NAME SELECT 99 AS j, 9 AS i;

INSERT INTO integers BY NAME SELECT 99 AS j, 9 AS i;

SELECT * FROM integers;

CREATE TABLE "My Table" ("My Column 1" INT, "My Column 2" INT);

INSERT INTO "My Table" BY NAME SELECT 1 AS "My Column 2";

SELECT * FROM "My Table";

INSERT INTO integers BY NAME SELECT 1 AS xxx;

INSERT INTO integers BY NAME SELECT 1 AS i, 2 AS i;

INSERT INTO integers (i, i) SELECT 1, 2;

INSERT INTO integers BY NAME SELECT 1 AS rowid;

CREATE TABLE tbl (price INT, total_price AS (CAST((price) AS DATE)));

INSERT INTO tbl BY NAME SELECT 1 AS total_price;

INSERT INTO integers BY NAME VALUES (42, 84);

INSERT INTO integers BY NAME VALUES (42, 84);

CREATE TABLE integers AS SELECT i, i % 2 AS j FROM GENERATE_SERIES(0, 999999, 1) AS tbl(i);

CREATE TABLE integers2 AS SELECT * FROM integers GROUP BY GROUPING SETS ((), (i), (i, j), (j));

SELECT SUM(i), SUM(j), COUNT(*), COUNT(i), COUNT(j) FROM integers;

SELECT SUM(i), SUM(j), COUNT(*), COUNT(i), COUNT(j) FROM integers2;

DROP TABLE integers;

DROP TABLE integers2;

CREATE TABLE integers AS SELECT CASE WHEN i % 2 = 0 THEN NULL ELSE i END AS i, i % 2 AS j FROM GENERATE_SERIES(0, 999999, 1) AS tbl(i);

CREATE TABLE integers2 AS SELECT * FROM integers GROUP BY GROUPING SETS ((), (i), (i, j), (j));

SELECT SUM(i), SUM(j), COUNT(*), COUNT(i), COUNT(j) FROM integers;

SELECT SUM(i), SUM(j), COUNT(*), COUNT(i), COUNT(j) FROM integers2;

CREATE TABLE integers AS SELECT * FROM RANGE(0, 1000000) AS tbl(i);

CREATE TABLE integers2 AS SELECT * FROM integers GROUP BY i;

SELECT SUM(i), COUNT(*), COUNT(i) FROM integers;

SELECT SUM(i), COUNT(*), COUNT(i) FROM integers2;

DROP TABLE integers;

DROP TABLE integers2;

CREATE TABLE integers AS SELECT CASE WHEN i % 2 = 0 THEN NULL ELSE i END AS i FROM RANGE(0, 1000000) AS tbl(i);

CREATE TABLE integers2 AS SELECT * FROM integers GROUP BY i;

SELECT SUM(i), COUNT(*), COUNT(i) FROM integers;

SELECT SUM(i), COUNT(*), COUNT(i) FROM integers2;

CREATE TABLE varchars AS SELECT CASE WHEN i % 2 = 0 THEN NULL ELSE CONCAT('thisismyvarchar-', i // 4) END AS v FROM RANGE(0, 1000000) AS tbl(i);

CREATE TABLE varchars2 AS SELECT * FROM varchars GROUP BY v;

SELECT MIN(v), MAX(v), COUNT(*), COUNT(v), COUNT(DISTINCT v) FROM varchars;

SELECT MIN(v), MAX(v), COUNT(*), COUNT(v), COUNT(DISTINCT v) FROM varchars2;

CREATE TABLE lists AS SELECT [i, NULL, i + 2] AS l FROM RANGE(0, 1000000) AS tbl(i);

CREATE TABLE lists2 AS SELECT * FROM lists GROUP BY l;

SELECT SUM(l[1]), SUM(l[2]), SUM(l[3]), COUNT(*), COUNT(l), COUNT(l[1]), COUNT(l[2]) FROM lists;

SELECT SUM(l[1]), SUM(l[2]), SUM(l[3]), COUNT(*), COUNT(l), COUNT(l[1]), COUNT(l[2]) FROM lists2;

CREATE TABLE structs AS SELECT {'i': i, 'j': NULL, 'k': i + 2} AS s FROM RANGE(0, 1000000) AS tbl(i);

CREATE TABLE structs2 AS SELECT * FROM structs GROUP BY s;

SELECT SUM(s.i), SUM(s.j), SUM(s.k), COUNT(*), COUNT(s), COUNT(s.i), COUNT(s.j) FROM structs;

SELECT SUM(s.i), SUM(s.j), SUM(s.k), COUNT(*), COUNT(s), COUNT(s.i), COUNT(s.j) FROM structs2;

PRAGMA preserve_insertion_order = FALSE;

CREATE TABLE integers AS SELECT * FROM RANGE(0, 1000000) AS tbl(i);

CREATE TABLE integers2 AS SELECT * FROM integers;

SELECT SUM(i) FROM integers;

SELECT SUM(i) FROM integers2;

DROP TABLE integers;

DROP TABLE integers2;

CREATE TABLE integers AS SELECT CASE WHEN i % 2 = 0 THEN NULL ELSE i END AS i FROM RANGE(0, 1000000) AS tbl(i);

CREATE TABLE integers2 AS SELECT * FROM integers;

SELECT SUM(i) FROM integers;

SELECT SUM(i) FROM integers2;

CREATE TABLE varchars AS SELECT CASE WHEN i % 2 = 0 THEN NULL ELSE CONCAT('thisismyvarchar-', i // 4) END AS v FROM RANGE(0, 1000000) AS tbl(i);

CREATE TABLE varchars2 AS SELECT * FROM varchars;

SELECT MIN(v), MAX(v), COUNT(*), COUNT(v), COUNT(DISTINCT v) FROM varchars;

SELECT MIN(v), MAX(v), COUNT(*), COUNT(v), COUNT(DISTINCT v) FROM varchars2;

CREATE TABLE integers (i INT);

BEGIN;

INSERT INTO integers VALUES (0), (1), (2);

SELECT COUNT(*) FROM integers;

ROLLBACK;

SELECT COUNT(*) FROM integers;

CREATE TABLE integers (i INT);

BEGIN;

BEGIN;

INSERT INTO integers SELECT * FROM RANGE(0, 500000);

INSERT INTO integers SELECT * FROM RANGE(0, 500000);

SELECT COUNT(*) FROM integers;

SELECT COUNT(*) FROM integers;

ROLLBACK;

SELECT COUNT(*) FROM integers;

SELECT COUNT(*) FROM integers;

ROLLBACK;

SELECT COUNT(*) FROM integers;

CREATE TABLE integers (i INT);

INSERT INTO integers SELECT i FROM RANGE(0, 100) AS tbl(i);

INSERT INTO integers SELECT i FROM RANGE(0, 100) AS tbl(i);

INSERT INTO integers SELECT i FROM RANGE(0, 100) AS tbl(i);

INSERT INTO integers SELECT NULL FROM RANGE(0, 100) AS tbl(i);
endloop;

SELECT COUNT(i), SUM(i), MIN(i), MAX(i), COUNT(*) FROM integers;

COMMIT;

SELECT COUNT(i), SUM(i), MIN(i), MAX(i), COUNT(*) FROM integers;

SELECT SUM(CASE WHEN i IS NULL THEN 1 ELSE 0 END) FROM integers;

CREATE OR REPLACE TABLE integers AS SELECT * FROM RANGE(0, 1000000) AS tbl(i) UNION ALL SELECT NULL;

CREATE OR REPLACE TABLE integers_not_null (i INT NOT NULL);

INSERT INTO integers_not_null SELECT * FROM integers;

CREATE OR REPLACE TABLE varchars AS SELECT CAST(i AS TEXT) AS s FROM RANGE(0, 1000000) AS tbl(i) UNION ALL SELECT 'hello';

CREATE OR REPLACE TABLE varchars_generated (s TEXT, i AS (CAST(s AS INT)));

INSERT INTO varchars_generated (s) SELECT * FROM varchars;

CREATE OR REPLACE TABLE integers AS SELECT * FROM RANGE(0, 1000000) AS tbl(i) UNION ALL SELECT 7777;

CREATE OR REPLACE TABLE integers_pk (i INT PRIMARY KEY);

INSERT INTO integers_pk SELECT * FROM integers;

CREATE OR REPLACE TABLE integers AS SELECT * FROM RANGE(0, 1000000) AS tbl(i) UNION ALL SELECT -1;

CREATE OR REPLACE TABLE integers_pk (i INT PRIMARY KEY);

INSERT INTO integers_pk SELECT * FROM RANGE(0, 1000000);

CREATE OR REPLACE TABLE integers_fk (i INT PRIMARY KEY REFERENCES integers_pk (i));

INSERT INTO integers_fk SELECT * FROM integers;

DROP TABLE integers_fk;

DROP TABLE integers_pk;

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9);

SELECT COUNT(*) FROM integers;

INSERT INTO integers SELECT * FROM integers;

SELECT COUNT(*) FROM integers;

DROP TABLE integers;

CREATE TABLE integers (i INT, j INT);

INSERT INTO integers VALUES (3, 4), (4, 3);

INSERT INTO integers VALUES (DEFAULT, 4);

INSERT INTO integers VALUES (DEFAULT, 4);

INSERT INTO integers (i) SELECT j FROM integers;

SELECT * FROM integers;

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (1), (2), (3), (4), (5);

CREATE TABLE i2 AS SELECT 1 AS i FROM integers WHERE i % 2 <> 0;

SELECT * FROM i2 ORDER BY 1;

UPDATE i2 SET i = NULL;

SELECT * FROM i2 ORDER BY 1;

CREATE TABLE IF NOT EXISTS presentations (presentation_date DATE NOT NULL UNIQUE, author TEXT NOT NULL, title TEXT NOT NULL, bio TEXT, abstract TEXT, zoom_link TEXT);

CREATE TABLE integers (i INT);

INSERT INTO integers SELECT 42;

INSERT INTO integers SELECT CAST(NULL AS TEXT);

SELECT * FROM integers;

SET default_null_order = 'nulls_first';

CREATE TABLE strings (a TEXT);

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (3), (4), (NULL);

INSERT INTO strings SELECT * FROM integers;

SELECT * FROM strings;

UPDATE strings SET a = 13 WHERE a = '3';

SELECT * FROM strings ORDER BY CAST(a AS INT);

SET immediate_transaction_mode = TRUE;

CREATE TABLE integers (i INT);

BEGIN;

INSERT INTO integers SELECT * FROM RANGE(0, 5);

BEGIN;

INSERT INTO integers SELECT * FROM RANGE(0, 17);

BEGIN;

INSERT INTO integers SELECT * FROM RANGE(0, 1007);

BEGIN;

INSERT INTO integers SELECT * FROM RANGE(0, 3020);

BEGIN;

INSERT INTO integers SELECT * FROM RANGE(0, 3);

BEGIN;

SELECT COUNT(*) FROM integers;

SELECT COUNT(*) FROM integers;

SELECT COUNT(*) FROM integers;

SELECT COUNT(*) FROM integers;

SELECT COUNT(*) FROM integers;

SELECT COUNT(*) FROM integers;

PRAGMA enable_verification;

CREATE TABLE integers AS SELECT i FROM RANGE(0, 10) AS tbl(i);

CREATE TABLE integers2 AS SELECT i FROM RANGE(0, 10) AS tbl(i);

CREATE VIEW integers_empty AS SELECT * FROM integers WHERE rowid > 100;

CREATE VIEW integers2_empty AS SELECT * FROM integers WHERE rowid > 100;

CREATE VIEW empty_join AS SELECT * FROM integers JOIN integers2_empty USING (i);

SELECT COUNT(*) FROM integers_empty JOIN integers2 USING (i);

SELECT COUNT(*) FROM integers_empty JOIN integers2 ON (integers_empty.i > integers2.i);

SELECT COUNT(*) FROM integers_empty JOIN integers2 ON (integers_empty.i <> integers2.i);

SELECT COUNT(*) FROM integers_empty JOIN integers2 ON (integers_empty.i <> integers2.i OR integers_empty.i + 1 <> integers2.i);

SELECT * FROM integers_empty JOIN integers2 USING (i);

SELECT COUNT(*) FROM integers_empty LEFT JOIN integers2 USING (i);

SELECT * FROM integers_empty LEFT JOIN integers2 USING (i);

SELECT COUNT(*) FROM integers_empty RIGHT JOIN integers2 USING (i);

SELECT COUNT(*) FROM integers_empty FULL OUTER JOIN integers2 USING (i);

SELECT COUNT(*) FROM integers JOIN integers2_empty USING (i);

SELECT * FROM integers JOIN integers2_empty USING (i);

SELECT COUNT(*) FROM integers LEFT JOIN integers2_empty USING (i);

SELECT COUNT(*) FROM integers RIGHT JOIN integers2_empty USING (i);

SELECT * FROM integers RIGHT JOIN integers2_empty USING (i);

SELECT COUNT(*) FROM integers FULL OUTER JOIN integers2_empty USING (i);

SELECT integers.*, integers2_empty.* FROM integers FULL OUTER JOIN integers2_empty USING (i);

SELECT COUNT(*) FROM integers JOIN empty_join USING (i);

SELECT COUNT(*) FROM integers LEFT JOIN empty_join USING (i);

SELECT COUNT(*) FROM integers RIGHT JOIN empty_join USING (i);

SELECT COUNT(*) FROM integers FULL OUTER JOIN empty_join USING (i);

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

CREATE TABLE test (a INT, b INT);

INSERT INTO test VALUES (4, 1), (2, 2);

CREATE TABLE test2 (b INT, c INT);

INSERT INTO test2 VALUES (1, 2), (3, 0);

SELECT * FROM test JOIN test2 ON test.a + test2.c = test.b + test2.b;

SELECT * FROM test LEFT JOIN test2 ON test.a + test2.c = test.b + test2.b ORDER BY 1;

SELECT * FROM test RIGHT JOIN test2 ON test.a + test2.c = test.b + test2.b ORDER BY 1;

SELECT * FROM test FULL OUTER JOIN test2 ON test.a + test2.c = test.b + test2.b ORDER BY 1;

PRAGMA enable_verification;

CREATE TABLE structs AS SELECT i AS id, {'i': i} AS s, i % 3 AS j FROM GENERATE_SERIES(0, 99, 1) AS tbl(i), GENERATE_SERIES(0, 1, 1);

CREATE TABLE other_table AS SELECT i AS id, i % 3 AS j FROM GENERATE_SERIES(0, 99, 1) AS tbl(i) WHERE i % 2 = 0;

SELECT COUNT(*), COUNT(s), COUNT(DISTINCT s), COUNT(DISTINCT structs.id) FROM structs;

SELECT COUNT(*), COUNT(s), COUNT(DISTINCT s), COUNT(DISTINCT structs.id) FROM structs WHERE id % 2 <> 0;

SELECT COUNT(*), COUNT(s), COUNT(DISTINCT s), COUNT(DISTINCT structs.id) FROM structs JOIN other_table USING (id);

SELECT COUNT(*), COUNT(s), COUNT(DISTINCT s), COUNT(DISTINCT structs.id) FROM structs LEFT JOIN other_table USING (id);

SELECT structs.j, COUNT(*), COUNT(s), COUNT(DISTINCT s), COUNT(DISTINCT structs.id) FROM structs LEFT JOIN other_table AS o1 USING (id) CROSS JOIN other_table WHERE ((structs.j IN (0, 1) AND (structs.id = other_table.id)) OR (structs.j = 2 AND structs.id + 1 = other_table.id)) GROUP BY ALL ORDER BY ALL;

DROP TABLE structs;

DROP TABLE other_table;

CREATE TABLE structs AS SELECT i AS id, {'i': [i, i + 1, i + 2], 'j': CASE WHEN i % 4 = 1 THEN NULL ELSE [i, i] END} AS s, i % 3 AS j FROM GENERATE_SERIES(0, 99, 1) AS tbl(i), GENERATE_SERIES(0, 1, 1);

CREATE TABLE other_table AS SELECT i AS id, i % 3 AS j FROM GENERATE_SERIES(0, 99, 1) AS tbl(i) WHERE i % 2 = 0;

SELECT COUNT(*), COUNT(s), COUNT(DISTINCT s), COUNT(DISTINCT structs.id) FROM structs;

SELECT COUNT(*), COUNT(s), COUNT(DISTINCT s), COUNT(DISTINCT structs.id) FROM structs WHERE id % 2 <> 0;

SELECT COUNT(*), COUNT(s), COUNT(DISTINCT s), COUNT(DISTINCT structs.id) FROM structs JOIN other_table USING (id);

SELECT COUNT(*), COUNT(s), COUNT(DISTINCT s), COUNT(DISTINCT structs.id) FROM structs LEFT JOIN other_table USING (id);

SELECT structs.j, COUNT(*), COUNT(s), COUNT(DISTINCT s), COUNT(DISTINCT structs.id) FROM structs LEFT JOIN other_table AS o1 USING (id) CROSS JOIN other_table WHERE ((structs.j IN (0, 1) AND (structs.id = other_table.id)) OR (structs.j = 2 AND structs.id + 1 = other_table.id)) GROUP BY ALL ORDER BY ALL;

DROP TABLE structs;

DROP TABLE other_table;

CREATE TABLE structs AS SELECT i AS id, {'i': {'j': [i + 1, i + 2, i + 3], 'k': i}, 'l': NULL} AS s, i % 3 AS j FROM GENERATE_SERIES(0, 99, 1) AS tbl(i), GENERATE_SERIES(0, 1, 1);

CREATE TABLE other_table AS SELECT i AS id, i % 3 AS j FROM GENERATE_SERIES(0, 99, 1) AS tbl(i) WHERE i % 2 = 0;

SELECT COUNT(*), COUNT(s), COUNT(DISTINCT s), COUNT(DISTINCT structs.id) FROM structs;

SELECT COUNT(*), COUNT(s), COUNT(DISTINCT s), COUNT(DISTINCT structs.id) FROM structs WHERE id % 2 <> 0;

SELECT COUNT(*), COUNT(s), COUNT(DISTINCT s), COUNT(DISTINCT structs.id) FROM structs JOIN other_table USING (id);

SELECT COUNT(*), COUNT(s), COUNT(DISTINCT s), COUNT(DISTINCT structs.id) FROM structs LEFT JOIN other_table USING (id);

SELECT structs.j, COUNT(*), COUNT(s), COUNT(DISTINCT s), COUNT(DISTINCT structs.id) FROM structs LEFT JOIN other_table AS o1 USING (id) CROSS JOIN other_table WHERE ((structs.j IN (0, 1) AND (structs.id = other_table.id)) OR (structs.j = 2 AND structs.id + 1 = other_table.id)) GROUP BY ALL ORDER BY ALL;

PRAGMA enable_verification;

WITH lhs(i, j, k) AS (SELECT * FROM (VALUES (100, 10, 1), (200, 20, 2)) AS _values), rhs(p, q, r) AS (SELECT * FROM (VALUES (100, 10, 1), (200, 20, 2)) AS _values) SELECT lhs.*, rhs.* FROM lhs, rhs WHERE i <= p AND j <> q AND k IS DISTINCT FROM r;

WITH lhs(i, j, k) AS (SELECT * FROM (VALUES (100, 10, 1), (200, 20, 2)) AS _values), rhs(p, q, r) AS (SELECT * FROM (VALUES (100, 10, 1), (200, 20, 2)) AS _values) SELECT lhs.*, rhs.* FROM lhs, rhs WHERE i <= p AND k >= r AND j <= q ORDER BY i;

CREATE TABLE wide AS (SELECT i, 10 * (i + 0) AS c0, 10 * (i + 1) AS c1, 10 * (i + 2) AS c2, 10 * (i + 3) AS c3, 10 * (i + 4) AS c4, 10 * (i + 5) AS c5, 10 * (i + 6) AS c6, 10 * (i + 7) AS c7, 10 * (i + 8) AS c8, 10 * (i + 9) AS c9 FROM RANGE(1, 10) AS tbl(i));

SELECT * FROM wide;

CREATE TABLE limits AS (SELECT 100 + (i * 17 % 100) AS z FROM RANGE(1, 10) AS tbl(i));

SELECT z FROM limits;

SELECT i, z FROM wide, limits WHERE c0 < z AND c1 < z AND c2 < z AND c3 < z AND c4 < z AND c5 < z AND c6 < z AND c7 < z AND c8 < z AND c9 < z ORDER BY 1, 2;

CREATE TABLE wide_nulls AS (SELECT i, c0, c1, c2, CASE WHEN i % 7 = 0 THEN NULL ELSE c3 END AS c3, c4, c5, c6, c7, CASE WHEN i % 5 = 0 THEN NULL ELSE c8 END AS c8, c9 FROM wide);

SELECT * FROM wide_nulls;

CREATE TABLE limits_nulls AS (SELECT CASE WHEN z % 9 = 0 THEN NULL ELSE z END AS z FROM limits);

SELECT * FROM limits_nulls;

SELECT i, z FROM wide_nulls, limits_nulls WHERE c0 < z AND c1 < z AND c2 < z AND c3 < z AND c4 < z AND c5 < z AND c6 < z AND c7 < z AND c8 < z AND c9 < z ORDER BY 1, 2;

SELECT i, z FROM wide, limits WHERE z BETWEEN c8 AND c9 ORDER BY 1, 2;

SELECT i, z FROM wide_nulls, limits_nulls WHERE z BETWEEN c8 AND c9 ORDER BY 1, 2;

SELECT i, z FROM wide, limits WHERE NOT z BETWEEN c8 AND c9 ORDER BY 1, 2;

SELECT i, z FROM wide_nulls, limits_nulls WHERE NOT z BETWEEN c8 AND c9 ORDER BY 1, 2;

SELECT lhs.i, rhs.i FROM wide_nulls AS lhs, wide_nulls AS rhs WHERE lhs.c3 < rhs.c0 AND lhs.c8 IS DISTINCT FROM rhs.c3 ORDER BY 1, 2;

EXPLAIN SELECT lhs.i, rhs.i
FROM wide_nulls lhs, wide_nulls rhs
WHERE lhs.c3 < rhs.c0
AND lhs.c8 IS DISTINCT FROM rhs.c3
ORDER BY 1, 2;

CREATE TABLE many_bounds AS (SELECT * FROM (VALUES (2000, 4000)) AS tbl(lo, hi));

CREATE TABLE many_values AS (SELECT * FROM RANGE(0, 10 * 1024) AS tbl(val));

SELECT COUNT(*) FROM many_values, many_bounds WHERE val BETWEEN lo AND hi;

PRAGMA enable_verification;

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (1), (2), (3), (NULL);

SELECT * FROM (SELECT SUM(i) AS x FROM integers) AS a, (SELECT SUM(i) AS x FROM integers) AS b WHERE a.x = b.x;

CREATE TABLE groups (i INT, j INT);

INSERT INTO groups VALUES (1, 1), (2, 1), (3, 2), (NULL, 2);

SELECT a.j, a.x, a.y, b.y FROM (SELECT j, MIN(i) AS y, SUM(i) AS x FROM groups GROUP BY j) AS a, (SELECT j, MIN(i) AS y, SUM(i) AS x FROM groups GROUP BY j) AS b WHERE a.j = b.j AND a.x = b.x ORDER BY a.j;

PRAGMA enable_verification;

CREATE VIEW list_int AS SELECT i, i % 2 AS i2, [i, i + 1, i + 2] AS l3 FROM RANGE(0, 10) AS tbl(i);

SELECT lhs.*, rhs.* FROM list_int AS lhs, list_int AS rhs WHERE lhs.i2 = rhs.i2 AND lhs.l3 <> rhs.l3 ORDER BY lhs.i, rhs.i;

SELECT lhs.*, rhs.* FROM list_int AS lhs, list_int AS rhs WHERE lhs.i2 = rhs.i2 AND lhs.l3 <= rhs.l3 ORDER BY lhs.i, rhs.i;

SELECT lhs.*, rhs.* FROM list_int AS lhs, list_int AS rhs WHERE lhs.i2 = rhs.i2 AND lhs.l3 < rhs.l3 ORDER BY lhs.i, rhs.i;

SELECT lhs.*, rhs.* FROM list_int AS lhs, list_int AS rhs WHERE lhs.i2 = rhs.i2 AND lhs.l3 >= rhs.l3 ORDER BY lhs.i, rhs.i;

SELECT lhs.*, rhs.* FROM list_int AS lhs, list_int AS rhs WHERE lhs.i2 = rhs.i2 AND lhs.l3 > rhs.l3 ORDER BY lhs.i, rhs.i;

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

CREATE VIEW intlistdim AS SELECT * FROM (VALUES ([1]), ([NULL]), ([]), ([9, 10, 11]), (NULL)) AS lv(pk);

CREATE VIEW intlists AS SELECT * FROM (VALUES (1, [1]), (2, [NULL]), (3, []), (4, [2, 3]), (5, [9, 10, 11]), (CAST(NULL AS INT), [13])) AS lv(i, fk);

SELECT i, pk, fk FROM intlistdim, intlists WHERE pk = fk ORDER BY i;

SELECT i, pk, fk FROM intlistdim LEFT OUTER JOIN intlists ON intlistdim.pk = intlists.fk ORDER BY i;

SELECT i, pk, fk FROM intlists RIGHT OUTER JOIN intlistdim ON intlistdim.pk = intlists.fk ORDER BY i;

SELECT i, pk, fk FROM intlistdim FULL OUTER JOIN intlists ON intlistdim.pk = intlists.fk ORDER BY ALL;

CREATE VIEW strlistdim AS SELECT * FROM (VALUES (['a']), ([NULL]), ([]), (['i', 'j', 'k']), (NULL)) AS lv(pk);

CREATE VIEW strlists AS SELECT * FROM (VALUES (1, ['a']), (2, [NULL]), (3, []), (4, ['Branta Canadensis', 'c']), (5, ['i', 'j', 'k']), (CAST(NULL AS INT), ['Somateria mollissima'])) AS lv(i, fk);

SELECT i, pk, fk FROM strlistdim, strlists WHERE pk = fk ORDER BY i;

SELECT i, pk, fk FROM strlistdim LEFT OUTER JOIN strlists ON strlistdim.pk = strlists.fk ORDER BY i;

SELECT i, pk, fk FROM strlists RIGHT OUTER JOIN strlistdim ON strlistdim.pk = strlists.fk ORDER BY i;

SELECT i, pk, fk FROM strlistdim FULL OUTER JOIN strlists ON strlistdim.pk = strlists.fk ORDER BY ALL;

CREATE VIEW structdim AS SELECT * FROM (VALUES ({'x': 1, 'y': 'a'}), ({'x': NULL, 'y': NULL}), ({'x': 0, 'y': ''}), ({'x': 9, 'y': 'i'}), (NULL)) AS sd(pk);

CREATE VIEW structs AS SELECT * FROM (VALUES (1, {'x': 1, 'y': 'a'}), (2, {'x': NULL, 'y': NULL}), (3, {'x': 0, 'y': ''}), (4, {'x': 2, 'y': 'c'}), (5, {'x': 9, 'y': 'i'}), (CAST(NULL AS INT), {'x': 13, 'y': 'Somateria mollissima'})) AS sv(i, fk);

SELECT i, pk, fk FROM structdim, structs WHERE pk = fk ORDER BY i;

SELECT i, pk, fk FROM structdim LEFT OUTER JOIN structs ON structdim.pk = structs.fk ORDER BY i;

SELECT i, pk, fk FROM structs RIGHT OUTER JOIN structdim ON structdim.pk = structs.fk ORDER BY i;

SELECT i, pk, fk FROM structdim FULL OUTER JOIN structs ON structdim.pk = structs.fk ORDER BY ALL;

CREATE VIEW struct_lint_lstr_dim AS SELECT * FROM (VALUES ({'x': [1], 'y': ['a']}), ({'x': [NULL], 'y': [NULL]}), ({'x': [], 'y': []}), ({'x': [2, 3], 'y': ['Branta Canadensis', 'c']}), (NULL)) AS dim(pk);

CREATE VIEW struct_lint_lstr AS SELECT * FROM (VALUES (1, {'x': [1], 'y': ['a']}), (2, {'x': [NULL], 'y': [NULL]}), (3, {'x': [], 'y': []}), (4, {'x': [2, 3], 'y': ['Branta Canadensis', 'c']}), (5, {'x': [9, 10, 11], 'y': ['i', 'j', 'k']}), (CAST(NULL AS INT), {'x': [13], 'y': ['Somateria mollissima']})) AS fact(i, fk);

SELECT i, pk, fk FROM struct_lint_lstr_dim, struct_lint_lstr WHERE pk = fk ORDER BY i;

SELECT i, pk, fk FROM struct_lint_lstr_dim LEFT OUTER JOIN struct_lint_lstr ON struct_lint_lstr_dim.pk = struct_lint_lstr.fk ORDER BY i;

SELECT i, pk, fk FROM struct_lint_lstr RIGHT OUTER JOIN struct_lint_lstr_dim ON struct_lint_lstr_dim.pk = struct_lint_lstr.fk ORDER BY i;

SELECT i, pk, fk FROM struct_lint_lstr_dim FULL OUTER JOIN struct_lint_lstr ON struct_lint_lstr_dim.pk = struct_lint_lstr.fk ORDER BY ALL;

CREATE VIEW r2l3r4l5i4i2l3v AS SELECT * FROM (VALUES (1, {'x': [{'l4': [51], 'i4': 41}], 'y': ['a']}), (2, {'x': [NULL], 'y': [NULL]}), (3, {'x': [], 'y': []}), (4, {'x': [{'l4': [52, 53], 'i4': 42}, {'l4': [54, 55], 'i4': 43}], 'y': ['Branta Canadensis', 'c']}), (5, {'x': [{'l4': [56], 'i4': 44}, {'l4': [57, 58], 'i4': 45}, {'l4': [59, 60, 61], 'i4': 46}], 'y': ['i', 'j', 'k']}), (CAST(NULL AS INT), {'x': [{'l4': [62], 'i4': 47}], 'y': ['Somateria mollissima']})) AS fact(i, fk);

CREATE VIEW r2l3r4l5i4i2l3v_dim AS SELECT * FROM (VALUES ({'x': [{'l4': [51], 'i4': 41}], 'y': ['a']}), ({'x': [NULL], 'y': [NULL]}), ({'x': [], 'y': []}), ({'x': [{'l4': [52, 53], 'i4': 42}, {'l4': [54, 55], 'i4': 43}], 'y': ['Branta Canadensis', 'c']}), (NULL)) AS dim(pk);

SELECT i, pk, fk FROM r2l3r4l5i4i2l3v_dim, r2l3r4l5i4i2l3v WHERE fk = pk ORDER BY i;

SELECT i, pk, fk FROM r2l3r4l5i4i2l3v_dim LEFT OUTER JOIN r2l3r4l5i4i2l3v ON r2l3r4l5i4i2l3v_dim.pk = r2l3r4l5i4i2l3v.fk ORDER BY i;

SELECT i, pk, fk FROM r2l3r4l5i4i2l3v_dim RIGHT OUTER JOIN r2l3r4l5i4i2l3v ON r2l3r4l5i4i2l3v_dim.pk = r2l3r4l5i4i2l3v.fk ORDER BY i;

SELECT i, pk, fk FROM r2l3r4l5i4i2l3v_dim FULL OUTER JOIN r2l3r4l5i4i2l3v ON r2l3r4l5i4i2l3v_dim.pk = r2l3r4l5i4i2l3v.fk ORDER BY ALL;

CREATE VIEW longlists AS SELECT * FROM (VALUES (1, [1]), (2, [NULL]), (3, []), (4, [2, 3]), (CAST(NULL AS INT), [13]) UNION ALL SELECT 5 AS i, LIST(r) AS pk FROM RANGE(0, 2000) AS tbl(r)) AS lv(i, fk);

CREATE VIEW longlists_dim AS SELECT * FROM (VALUES ([1]), ([NULL]), ([]), ([2, 3]), (NULL) UNION ALL SELECT LIST(r) AS pk FROM RANGE(0, 2000) AS tbl(r) UNION ALL SELECT LIST(r) AS pk FROM RANGE(0, 1050) AS tbl(r)) AS dim(pk);

SELECT i, pk, fk FROM longlists_dim, longlists WHERE fk = pk ORDER BY 1, 2, 3;

SELECT i, pk, fk FROM longlists_dim LEFT OUTER JOIN longlists ON longlists.fk = longlists_dim.pk ORDER BY 1, 2, 3;

SELECT i, pk, fk FROM longlists_dim RIGHT OUTER JOIN longlists ON longlists.fk = longlists_dim.pk ORDER BY 1, 2, 3;

SELECT i, pk, fk FROM longlists_dim FULL OUTER JOIN longlists ON longlists.fk = longlists_dim.pk ORDER BY 1, 2, 3;

SELECT * FROM ((SELECT [1, 2, 3] AS a FROM RANGE(0, 3))) AS tbl(i) JOIN ((SELECT [1, 2, 3] AS a FROM RANGE(0, 3))) AS tbl2(j) ON (i = j);

SELECT * FROM ((SELECT {'x': 1, 'y': 2, 'z': 3} AS a FROM RANGE(0, 3))) AS tbl(i) JOIN ((SELECT {'x': 1, 'y': 2, 'z': 3} AS a FROM RANGE(0, 3))) AS tbl2(j) ON (i = j);

SET default_null_order = 'nulls_first';

SET default_null_order = 'nulls_first';

SET default_null_order = 'nulls_first';

INSERT INTO tbl_1 VALUES (1, NULL), (2, 3), (NULL, NULL);

INSERT INTO tbl_1 VALUES (1, NULL), (2, 3), (NULL, NULL);

INSERT INTO tbl_2 VALUES (1), (2), (NULL);

SELECT a FROM tbl_1 WHERE a IS DISTINCT FROM b;

SELECT a FROM tbl_1 WHERE a IS NOT DISTINCT FROM b;

EXPLAIN select a,tbl_2.b from tbl_1 inner join tbl_2 on (a IS NOT DISTINCT FROM tbl_2.b);

SELECT a, tbl_2.b FROM tbl_1 INNER JOIN tbl_2 ON (a IS NOT DISTINCT FROM tbl_2.b) ORDER BY 1;

SELECT a, tbl_2.b FROM tbl_1 INNER JOIN tbl_2 ON (a IS NOT DISTINCT FROM tbl_2.b AND a <> tbl_2.b) ORDER BY 1;

EXPLAIN select a,tbl_2.b from tbl_1 inner join tbl_2 on (a IS DISTINCT FROM tbl_2.b);

SELECT a, tbl_2.b FROM tbl_1 INNER JOIN tbl_2 ON (a IS DISTINCT FROM tbl_2.b);

SELECT a, tbl_2.b FROM tbl_1 INNER JOIN tbl_2 ON (a IS DISTINCT FROM tbl_2.b AND a <> tbl_2.b) ORDER BY a, tbl_2.b;

SELECT a, tbl_2.b FROM tbl_1 INNER JOIN tbl_2 ON (a <> tbl_2.b AND a IS DISTINCT FROM tbl_2.b) ORDER BY a, tbl_2.b;

SELECT a, tbl_2.b FROM tbl_1 INNER JOIN tbl_2 ON (tbl_2.b > a AND a IS DISTINCT FROM tbl_2.b) ORDER BY a, tbl_2.b;

DROP TABLE tbl_1;

DROP TABLE tbl_2;
endloop;

SELECT a.a, b.b, a.a IS NOT DISTINCT FROM b.b AS "Is Not Distinct From" FROM (VALUES (1), (2), (NULL)) AS a(a), (VALUES (1), (2), (NULL)) AS b(b) ORDER BY 1, 2;

SELECT a.a, b.b, a.a IS DISTINCT FROM b.b AS "Is Distinct From" FROM (VALUES (1), (2), (NULL)) AS a(a), (VALUES (1), (2), (NULL)) AS b(b) ORDER BY 1, 2;

SELECT NULL IS NOT DISTINCT FROM NULL;

SELECT NULL IS DISTINCT FROM NULL;

SELECT a.a, a.a IS NOT DISTINCT FROM 1 AS "Is Not Distinct From" FROM (VALUES (1), (2), (NULL)) AS a(a);

SELECT a.a, a.a IS DISTINCT FROM 1 AS "Is Not Distinct From" FROM (VALUES (1), (2), (NULL)) AS a(a);

SELECT a.a, a.a IS NOT DISTINCT FROM NULL AS "Is Not Distinct From" FROM (VALUES (1), (2), (NULL)) AS a(a);

SELECT a.a, a.a IS DISTINCT FROM NULL AS "Is Not Distinct From" FROM (VALUES (1), (2), (NULL)) AS a(a);

CREATE TABLE test_types (a TINYINT, b SMALLINT, c INT, d BIGINT, e DOUBLE, f REAL, g TEXT);

INSERT INTO test_types VALUES (NULL, NULL, NULL, NULL, NULL, NULL, NULL), (1, 1, 1, 1, 1, 1, '1'), (10, 10, 10, 10, 10, 10, '10');

SELECT COUNT(*) FROM test_types WHERE a IS DISTINCT FROM NULL;

SELECT COUNT(*) FROM test_types WHERE b IS DISTINCT FROM NULL;

SELECT COUNT(*) FROM test_types WHERE c IS DISTINCT FROM NULL;

SELECT COUNT(*) FROM test_types WHERE d IS DISTINCT FROM NULL;

SELECT COUNT(*) FROM test_types WHERE e IS DISTINCT FROM NULL;

SELECT COUNT(*) FROM test_types WHERE f IS DISTINCT FROM NULL;

SELECT COUNT(*) FROM test_types WHERE g IS DISTINCT FROM NULL;

SELECT COUNT(*) FROM test_types WHERE a IS NOT DISTINCT FROM NULL;

SELECT COUNT(*) FROM test_types WHERE b IS NOT DISTINCT FROM NULL;

SELECT COUNT(*) FROM test_types WHERE c IS NOT DISTINCT FROM NULL;

SELECT COUNT(*) FROM test_types WHERE d IS NOT DISTINCT FROM NULL;

SELECT COUNT(*) FROM test_types WHERE e IS NOT DISTINCT FROM NULL;

SELECT COUNT(*) FROM test_types WHERE f IS NOT DISTINCT FROM NULL;

SELECT COUNT(*) FROM test_types WHERE g IS NOT DISTINCT FROM NULL;

SELECT INTERVAL '30' DAY IS DISTINCT FROM NULL;

SELECT INTERVAL '30' DAY IS NOT DISTINCT FROM NULL;

CREATE TABLE tbl_1 (a INT, b INT);

INSERT INTO tbl_1 VALUES (1, NULL), (2, 3), (NULL, NULL);

CREATE TABLE tbl_2 (b INT);

INSERT INTO tbl_2 VALUES (1), (2), (NULL);

CREATE TABLE big AS SELECT range AS a FROM RANGE(0, 10000);

INSERT INTO big VALUES (NULL);

SELECT COUNT(*) FROM big INNER JOIN tbl_2 ON (a IS NOT DISTINCT FROM tbl_2.b);

SELECT COUNT(*) FROM big INNER JOIN tbl_2 ON (a IS NOT DISTINCT FROM tbl_2.b) WHERE a > 1 AND a < 5000;

SELECT COUNT(*) FROM big INNER JOIN tbl_2 ON (big.rowid IS NOT DISTINCT FROM tbl_2.b);

SELECT a, (SELECT COUNT(*) FROM tbl_1 WHERE tbl_1.a IS DISTINCT FROM t.b) FROM tbl_1 AS t ORDER BY 1;

PRAGMA enable_verification;

PRAGMA verify_external;

CREATE TABLE test1 (i INT, s1 TEXT, s2 TEXT);

INSERT INTO test1 VALUES (1, 'thisisareallylongstring', 'thisisareallylongstringtoo');

CREATE TABLE test2 (i INT, s1 TEXT, s2 TEXT);

INSERT INTO test2 VALUES (1, 'longstringsarecool', 'coolerthanshortstrings');

SELECT t1.i, t1.s1, t1.s2, t2.s1, t2.s2 FROM test1 AS t1, test2 AS t2 WHERE t1.i = t2.i;

PRAGMA enable_verification;

CREATE TABLE events0 (begin DOUBLE, value INT);

INSERT INTO events0 VALUES (1, 0), (3, 1), (6, 2), (8, 3);

CREATE TABLE prices ("when" TIMESTAMP, symbol INT, price INT);

INSERT INTO prices VALUES ('2020-01-01 00:00:00', 1, 42);

CREATE TABLE trades ("when" TIMESTAMP, symbol INT);

CREATE TABLE trades ("when" TIMESTAMP, symbol INT);

CREATE TABLE trades ("when" TIMESTAMP, symbol INT);

SELECT t.*, p.price FROM trades AS t ASOF JOIN prices AS p ON t.symbol = p.symbol AND t."when" >= p."when";

SELECT p.ts, e.value FROM RANGE(0, 10) AS p(ts) ASOF JOIN events0 AS e ON 1 = 1 AND p.ts >= e.begin ORDER BY p.ts ASC;

WITH samples AS (SELECT col0 AS starts, col1 AS ends FROM (VALUES (5, 9), (10, 13), (14, 20), (21, 23))) SELECT s1.starts AS s1_starts, s2.starts AS s2_starts FROM samples AS s1 ASOF JOIN samples AS s2 ON s2.ends >= (s1.ends - 5) WHERE s1_starts <> s2_starts ORDER BY ALL;

SELECT p.ts, e.value FROM RANGE(0, 10) AS p(ts) ASOF JOIN events0 AS e ON p.ts <> e.begin ORDER BY p.ts ASC;

SELECT p.ts, e.value FROM RANGE(0, 10) AS p(ts) ASOF JOIN events0 AS e ON p.ts = e.begin ORDER BY p.ts ASC;

SELECT p.ts, e.value FROM RANGE(0, 10) AS p(ts) ASOF JOIN events0 AS e ON p.ts >= e.begin AND p.ts >= e.value ORDER BY p.ts ASC;

PRAGMA enable_verification;

PRAGMA verify_external;

CREATE TABLE build AS SELECT CAST('1990-03-21 13:00:00' AS TIMESTAMP) + INTERVAL (range) MINUTE AS begin, range % 4 AS key, range AS value FROM RANGE(0, 10000000);

CREATE TABLE skewed_probe (begin TIMESTAMP, key INT);

INSERT INTO skewed_probe SELECT CAST('1990-04-21 13:00:01' AS TIMESTAMP) + INTERVAL (range) MINUTE AS begin, CAST(0 AS INT) AS key FROM RANGE(0, 5);

INSERT INTO skewed_probe SELECT CAST('1990-05-21 13:00:01' AS TIMESTAMP) + INTERVAL (range) MINUTE AS begin, CAST(1 AS INT) AS key FROM RANGE(0, 10);

INSERT INTO skewed_probe SELECT CAST('1990-06-21 13:00:01' AS TIMESTAMP) + INTERVAL (range) MINUTE AS begin, CAST(2 AS INT) AS key FROM RANGE(0, 20);

INSERT INTO skewed_probe SELECT CAST('1990-03-21 13:00:01' AS TIMESTAMP) + INTERVAL (range) MINUTE AS begin, CAST(3 AS INT) AS key FROM RANGE(0, 10000000);

SELECT SUM(value), COUNT(*) FROM skewed_probe ASOF JOIN build USING (key, begin);

SELECT SUM(value), COUNT(*) FROM skewed_probe ASOF RIGHT JOIN build USING (key, begin);

PRAGMA enable_verification;

PRAGMA asof_loop_join_threshold = 0;

CREATE TABLE events0 (begin DOUBLE, value INT);

INSERT INTO events0 VALUES (1, 0), (3, 1), (6, 2), (8, 3);

SELECT p.ts, e.value FROM RANGE(0, 10) AS p(ts) JOIN (SELECT value, begin, LEAD(begin, 1, CAST('infinity' AS DOUBLE)) OVER (ORDER BY begin ASC) AS end FROM events0) AS e ON p.ts >= e.begin AND p.ts < e.end ORDER BY p.ts ASC;

SELECT p.ts, e.value FROM RANGE(0, 10) AS p(ts) ASOF JOIN events0 AS e ON p.ts >= e.begin ORDER BY p.ts ASC;

SELECT p.begin, e.value FROM RANGE(0, 10) AS p(begin) ASOF JOIN events0 AS e USING (begin) ORDER BY p.begin ASC;

SELECT p.ts, e.value FROM RANGE(0, 10) AS p(ts) LEFT JOIN (SELECT value, begin, LEAD(begin, 1, CAST('infinity' AS DOUBLE)) OVER (ORDER BY begin ASC) AS end FROM events0) AS e ON p.ts >= e.begin AND p.ts < e.end ORDER BY p.ts ASC NULLS FIRST;

SELECT p.ts, e.value FROM RANGE(0, 10) AS p(ts) ASOF LEFT JOIN events0 AS e ON p.ts >= e.begin ORDER BY p.ts ASC NULLS FIRST;

SELECT p.begin, e.value FROM RANGE(0, 10) AS p(begin) ASOF LEFT JOIN events0 AS e USING (begin) ORDER BY p.begin ASC NULLS FIRST;

INSERT INTO events0 VALUES (10, 4);

SELECT p.ts, e.value FROM RANGE(0, 10) AS p(ts) RIGHT JOIN (SELECT value, begin, LEAD(begin, 1, CAST('infinity' AS DOUBLE)) OVER (ORDER BY begin ASC) AS end FROM events0) AS e ON p.ts >= e.begin AND p.ts < e.end ORDER BY p.ts ASC;

SELECT p.ts, e.value FROM RANGE(0, 10) AS p(ts) ASOF RIGHT JOIN events0 AS e ON p.ts >= e.begin ORDER BY p.ts ASC;

SELECT p.begin, e.value FROM RANGE(0, 10) AS p(begin) ASOF RIGHT JOIN events0 AS e USING (begin) ORDER BY p.begin ASC;

CREATE TABLE events (key INT, begin DOUBLE, value INT);

INSERT INTO events VALUES (1, 1, 0), (1, 3, 1), (1, 6, 2), (1, 8, 3), (2, 0, 10), (2, 7, 20), (2, 11, 30);

CREATE TABLE probes AS SELECT key, ts FROM RANGE(1, 3) AS k(key) CROSS JOIN RANGE(0, 10) AS t(ts);

SELECT p.key, p.ts, e.value FROM probes AS p JOIN (SELECT key, value, begin, LEAD(begin, 1, CAST('infinity' AS DOUBLE)) OVER (PARTITION BY key ORDER BY begin ASC) AS end FROM events) AS e ON p.key = e.key AND p.ts >= e.begin AND p.ts < e.end ORDER BY 1, 2 ASC;

SELECT p.key, p.ts, e.value FROM probes AS p ASOF JOIN events AS e ON p.key = e.key AND p.ts >= e.begin ORDER BY 1, 2 ASC;

SELECT p.key, p.begin, e.value FROM (SELECT key, ts AS begin FROM probes) AS p ASOF JOIN events AS e USING (key, begin) ORDER BY 1, 2 ASC;

SELECT p.key, p.ts, e.value FROM probes AS p LEFT JOIN (SELECT key, value, begin, LEAD(begin, 1, CAST('infinity' AS DOUBLE)) OVER (PARTITION BY key ORDER BY begin ASC) AS end FROM events) AS e ON p.key = e.key AND p.ts >= e.begin AND p.ts < e.end ORDER BY 1, 2 ASC NULLS FIRST;

SELECT p.key, p.ts, e.value FROM probes AS p ASOF LEFT JOIN events AS e ON p.key = e.key AND p.ts >= e.begin ORDER BY 1, 2, 3 ASC NULLS FIRST;

SELECT p.key, p.begin, e.value FROM (SELECT key, ts AS begin FROM probes) AS p ASOF LEFT JOIN events AS e USING (key, begin) ORDER BY 1, 2 ASC NULLS FIRST;

SELECT p.key, p.ts, e.value FROM probes AS p RIGHT JOIN (SELECT key, value, begin, LEAD(begin, 1, CAST('infinity' AS DOUBLE)) OVER (PARTITION BY key ORDER BY begin ASC) AS end FROM events) AS e ON p.key = e.key AND p.ts >= e.begin AND p.ts < e.end ORDER BY 1 ASC NULLS FIRST, 2;

SELECT p.key, p.ts, e.value FROM probes AS p ASOF RIGHT JOIN events AS e ON p.key = e.key AND p.ts >= e.begin ORDER BY 1 ASC NULLS FIRST, 2;

SELECT p.key, p.begin, e.value FROM (SELECT key, ts AS begin FROM probes) AS p ASOF RIGHT JOIN events AS e USING (key, begin) ORDER BY 1 ASC NULLS FIRST, 2;

PRAGMA enable_verification;

CREATE TABLE events0 AS SELECT CAST('2023-03-21 13:00:00' AS TIMESTAMP) + INTERVAL (range) HOUR AS begin, range AS value FROM RANGE(0, 4);

INSERT INTO events0 VALUES (NULL, -10), ('infinity', 9), ('-infinity', -1);

CREATE TABLE probe0 AS SELECT * FROM RANGE(CAST('2023-03-21 12:00:00' AS TIMESTAMP), CAST('2023-03-21 22:00:00' AS TIMESTAMP), INTERVAL '1' HOUR) AS p(begin);

CREATE TABLE probe0 AS SELECT * FROM RANGE(CAST('2023-03-21 12:00:00' AS TIMESTAMP), CAST('2023-03-21 22:00:00' AS TIMESTAMP), INTERVAL '1' HOUR) AS p(begin);

CREATE TABLE probe0 AS SELECT * FROM RANGE(CAST('2023-03-21 12:00:00' AS TIMESTAMP), CAST('2023-03-21 22:00:00' AS TIMESTAMP), INTERVAL '1' HOUR) AS p(begin);

CREATE TABLE probe0 AS SELECT * FROM RANGE(CAST('2023-03-21 12:00:00' AS TIMESTAMP), CAST('2023-03-21 22:00:00' AS TIMESTAMP), INTERVAL '1' HOUR) AS p(begin);

SELECT p.begin, e.begin, e.value FROM probe0 AS p ASOF JOIN events0 AS e ON p.begin > e.begin ORDER BY ALL ASC;

SELECT p.begin, e.begin, e.value FROM probe0 AS p ASOF LEFT JOIN events0 AS e ON p.begin > e.begin ORDER BY ALL ASC;

SELECT p.begin, e.begin, e.value FROM probe0 AS p ASOF RIGHT JOIN events0 AS e ON p.begin > e.begin ORDER BY ALL ASC;

SELECT p.begin, e.begin, e.value FROM probe0 AS p ASOF JOIN events0 AS e ON p.begin <= e.begin ORDER BY ALL ASC;

SELECT p.begin, e.begin, e.value FROM probe0 AS p ASOF LEFT JOIN events0 AS e ON p.begin <= e.begin ORDER BY ALL ASC;

SELECT p.begin, e.begin, e.value FROM probe0 AS p ASOF RIGHT JOIN events0 AS e ON p.begin <= e.begin ORDER BY ALL ASC;

SELECT p.begin, e.begin, e.value FROM probe0 AS p ASOF JOIN events0 AS e ON p.begin < e.begin ORDER BY ALL ASC;

SELECT p.begin, e.begin, e.value FROM probe0 AS p ASOF LEFT JOIN events0 AS e ON p.begin < e.begin ORDER BY ALL ASC;

SELECT p.begin, e.begin, e.value FROM probe0 AS p ASOF RIGHT JOIN events0 AS e ON p.begin < e.begin ORDER BY ALL ASC;

PRAGMA enable_verification;

CREATE TABLE events0 (begin INT, value INT);

INSERT INTO events0 VALUES (NULL, -1), (1, 0), (3, 1), (6, 2), (8, 3), (999999, 9);

INSERT INTO events0 VALUES (NULL, -1), (1, 0), (3, 1), (6, 2), (8, 3), (999999, 9);

INSERT INTO events0 VALUES (NULL, -1), (1, 0), (3, 1), (6, 2), (8, 3), (999999, 9);

SELECT p.begin, e.value FROM probe0 AS p ASOF JOIN events0 AS e ON p.begin >= e.begin ORDER BY p.begin ASC;

SELECT p.begin, e.value FROM probe0 AS p ASOF JOIN events0 AS e USING (begin) ORDER BY p.begin ASC;

SELECT p.begin, e.value FROM probe0 AS p ASOF LEFT JOIN events0 AS e ON p.begin >= e.begin ORDER BY p.begin ASC;

SELECT p.begin, e.value FROM probe0 AS p ASOF LEFT JOIN events0 AS e USING (begin) ORDER BY p.begin ASC;

SELECT p.begin, e.value FROM probe0 AS p ASOF RIGHT JOIN events0 AS e ON p.begin >= e.begin ORDER BY ALL;

SELECT p.begin, e.value FROM probe0 AS p ASOF RIGHT JOIN events0 AS e USING (begin) ORDER BY ALL;

PRAGMA memory_limit = '400M';

PRAGMA threads = 4;

SET temp_directory = '__TEST_DIR__/temp.tmp';

PRAGMA asof_loop_join_threshold = 0;

WITH build AS (SELECT k, (CAST('2021-01-01' AS TIMESTAMP) + INTERVAL (i) SECOND) AS t, i % 37 AS v FROM RANGE(0, 3000000) AS t(i), RANGE(0, 2) AS tk(k)), probe AS (SELECT k, t FROM RANGE(0, 2) AS tk(k), RANGE(CAST('2021-01-01 00:00:30' AS TIMESTAMP), CAST('2021-02-01 00:00:30' AS TIMESTAMP), INTERVAL '1' HOUR) AS tt(t)) SELECT SUM(v) AS v, COUNT(*) AS n FROM probe ASOF JOIN build USING (k, t);

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

WITH build AS (SELECT k, CAST('2001-01-01 00:00:00' AS TIMESTAMP) + INTERVAL (v) MINUTE AS t, v FROM RANGE(0, 10) AS vals(v), RANGE(0, 5) AS keys(k)), probe AS (SELECT k * 2 AS k, t - INTERVAL (30) SECOND AS t FROM build) SELECT SUM(v) FROM probe ASOF JOIN build USING (k, t);

WITH build AS (SELECT k * 2 AS k, CAST('2001-01-01 00:00:00' AS TIMESTAMP) + INTERVAL (v) MINUTE AS t, v FROM RANGE(0, 10) AS vals(v), RANGE(0, 5) AS keys(k)), probe AS (SELECT k / 2 AS k, t - INTERVAL (30) SECOND AS t FROM build) SELECT SUM(v), COUNT(*) FROM probe ASOF JOIN build USING (k, t);

WITH build AS (SELECT k, CAST('2001-01-01 00:00:00' AS TIMESTAMP) + INTERVAL (v) MINUTE AS t, v FROM RANGE(0, 20) AS vals(v), RANGE(0, 5) AS keys(k)), probe AS (SELECT k * 2 AS k, t - INTERVAL (30) SECOND AS t FROM build) SELECT SUM(v) FROM probe ASOF JOIN build USING (k, t);

WITH build AS (SELECT k, CAST('2001-01-01 00:00:00' AS TIMESTAMP) + INTERVAL (v) MINUTE AS t, v FROM RANGE(0, 30) AS vals(v), RANGE(0, 5) AS keys(k)), probe AS (SELECT k * 2 AS k, t - INTERVAL (30) SECOND AS t FROM build) SELECT SUM(v) FROM probe ASOF JOIN build USING (k, t);

WITH build AS (SELECT k, CAST('2001-01-01 00:00:00' AS TIMESTAMP) + INTERVAL (v) MINUTE AS t, v FROM RANGE(0, 50) AS vals(v), RANGE(0, 5) AS keys(k)), probe AS (SELECT k * 2 AS k, t - INTERVAL (30) SECOND AS t FROM build) SELECT SUM(v) FROM probe ASOF JOIN build USING (k, t);

WITH build AS (SELECT k, CAST('2001-01-01 00:00:00' AS TIMESTAMP) + INTERVAL (v) MINUTE AS t, v FROM RANGE(0, 100) AS vals(v), RANGE(0, 5) AS keys(k)), probe AS (SELECT k * 2 AS k, t - INTERVAL (30) SECOND AS t FROM build) SELECT SUM(v) FROM probe ASOF JOIN build USING (k, t);

WITH build AS (SELECT k, CAST('2001-01-01 00:00:00' AS TIMESTAMP) + INTERVAL (v) MINUTE AS t, v FROM RANGE(0, 100) AS vals(v), RANGE(0, 50) AS keys(k)), probe AS (SELECT k * 2 AS k, t - INTERVAL (30) SECOND AS t FROM build) SELECT SUM(v) FROM probe ASOF JOIN build USING (k, t);

WITH build AS (SELECT k, CAST('2001-01-01 00:00:00' AS TIMESTAMP) + INTERVAL (v) MINUTE AS t, v FROM RANGE(0, 1000) AS vals(v), RANGE(0, 5) AS keys(k)), probe AS (SELECT k * 2 AS k, t - INTERVAL (30) SECOND AS t FROM build) SELECT SUM(v) FROM probe ASOF JOIN build USING (k, t);

WITH build AS (SELECT k, CAST('2001-01-01 00:00:00' AS TIMESTAMP) + INTERVAL (v) MINUTE AS t, v FROM RANGE(0, 1000) AS vals(v), RANGE(0, 50) AS keys(k)), probe AS (SELECT k * 2 AS k, t - INTERVAL (30) SECOND AS t FROM build) SELECT SUM(v) FROM probe ASOF JOIN build USING (k, t);

WITH build AS (SELECT k, CAST('2001-01-01 00:00:00' AS TIMESTAMP) + INTERVAL (v) MINUTE AS t, v FROM RANGE(0, 10000) AS vals(v), RANGE(0, 50) AS keys(k)), probe AS (SELECT k * 2 AS k, t - INTERVAL (30) SECOND AS t FROM build) SELECT SUM(v) FROM probe ASOF JOIN build USING (k, t);

PRAGMA enable_verification;

CREATE OR REPLACE TABLE right_pushdown (time INT, value REAL);

INSERT INTO right_pushdown VALUES (0, 0), (1, NULL);

CREATE TABLE issue13899 (seq_no INT, amount DECIMAL(10, 2));

CREATE TABLE issue13899 (seq_no INT, amount DECIMAL(10, 2));

CREATE TABLE issue13899 (seq_no INT, amount DECIMAL(10, 2));

SELECT d1.time, d2.time, d1.value, d2.value FROM right_pushdown AS d1 ASOF JOIN (SELECT * FROM right_pushdown WHERE NOT value IS NULL) AS d2 ON d1.time >= d2.time ORDER BY ALL;

SELECT d1.time, d2.time, d1.value, d2.value FROM right_pushdown AS d1 ASOF LEFT JOIN (SELECT * FROM right_pushdown WHERE NOT value IS NULL) AS d2 ON d1.time >= d2.time ORDER BY ALL;

CREATE OR REPLACE TABLE issue12215 AS SELECT col0 AS starts, col1 AS ends FROM (VALUES (5, 9), (10, 13), (14, 20), (21, 23));

SELECT s1.starts AS s1_starts, s2.starts AS s2_starts FROM issue12215 AS s1 ASOF JOIN issue12215 AS s2 ON s2.ends >= (s1.ends - 5) WHERE s1_starts <> s2_starts ORDER BY ALL;

WITH t AS (SELECT t1.col0 AS left_val, t2.col0 AS right_val FROM (VALUES (0), (5), (10), (15)) AS t1 ASOF JOIN (VALUES (1), (6), (11), (16)) AS t2 ON t2.col0 > t1.col0) SELECT * FROM t WHERE right_val BETWEEN 3 AND 12 ORDER BY ALL;

WITH t AS (SELECT t1.col0 AS left_val, t2.col0 AS right_val FROM (VALUES (0), (5), (10), (15)) AS t1 ASOF LEFT JOIN (VALUES (1), (6), (11), (16)) AS t2 ON t2.col0 > t1.col0) SELECT * FROM t WHERE right_val BETWEEN 3 AND 12 ORDER BY ALL;

SELECT a.seq_no, a.amount, b.amount FROM issue13899 AS a ASOF JOIN issue13899 AS b ON a.seq_no >= b.seq_no AND NOT b.amount IS NULL ORDER BY 1;

WITH t1 AS (SELECT * FROM (VALUES (1, 2), (2, 4)) AS t1(id, value)), t2 AS (SELECT * FROM (VALUES (1, 3)) AS t2(id, value)) SELECT * FROM t1 ASOF LEFT JOIN t2 ON t1.id <= t2.id ORDER BY 1;

WITH t1 AS (SELECT * FROM (VALUES (1, 2), (2, 4)) AS t1(id, value)), t2 AS (SELECT * FROM (VALUES (1, 3)) AS t2(id, value)) SELECT * FROM t1 ASOF LEFT JOIN t2 ON t1.id >= t2.id AND t1.id = 1 ORDER BY 1;

PRAGMA enable_verification;

CREATE TABLE events (begin DOUBLE, value INT);

CREATE TABLE events (begin DOUBLE, value INT);

CREATE TABLE events (begin DOUBLE, value INT);

SELECT begin, value IN (SELECT e1.value FROM (SELECT * FROM events AS e1 WHERE e1.value = events.value) AS e1 ASOF JOIN RANGE(1, 10) AS tbl(begin) USING (begin)) FROM events ORDER BY ALL;

PRAGMA enable_verification;

CREATE TABLE events0 AS SELECT CAST('2023-03-21 13:00:00' AS TIMESTAMP) + INTERVAL (range) HOUR AS begin, range AS value FROM RANGE(0, 4);

INSERT INTO events0 VALUES (NULL, -1), ('infinity', 9);

CREATE TABLE probe0 AS SELECT * FROM RANGE(CAST('2023-03-21 12:00:00' AS TIMESTAMP), CAST('2023-03-21 22:00:00' AS TIMESTAMP), INTERVAL '1' HOUR) AS p(begin);

CREATE TABLE probe0 AS SELECT * FROM RANGE(CAST('2023-03-21 12:00:00' AS TIMESTAMP), CAST('2023-03-21 22:00:00' AS TIMESTAMP), INTERVAL '1' HOUR) AS p(begin);

CREATE TABLE probe0 AS SELECT * FROM RANGE(CAST('2023-03-21 12:00:00' AS TIMESTAMP), CAST('2023-03-21 22:00:00' AS TIMESTAMP), INTERVAL '1' HOUR) AS p(begin);

SELECT p.begin, e.value FROM probe0 AS p ASOF JOIN events0 AS e ON p.begin >= e.begin ORDER BY p.begin ASC;

SELECT p.begin, e.value FROM probe0 AS p ASOF JOIN events0 AS e USING (begin) ORDER BY p.begin ASC;

SELECT p.begin, e.value FROM probe0 AS p ASOF LEFT JOIN events0 AS e ON p.begin >= e.begin ORDER BY p.begin ASC;

SELECT p.begin, e.value FROM probe0 AS p ASOF LEFT JOIN events0 AS e USING (begin) ORDER BY p.begin ASC;

SELECT p.begin, e.value FROM probe0 AS p ASOF RIGHT JOIN events0 AS e ON p.begin >= e.begin ORDER BY ALL;

SELECT p.begin, e.value FROM probe0 AS p ASOF RIGHT JOIN events0 AS e USING (begin) ORDER BY ALL;

SELECT p.begin, e.value FROM probe0 AS p ASOF LEFT JOIN (SELECT * FROM events0 WHERE LOG(value + 5) > 10) AS e ON p.begin >= e.begin ORDER BY p.begin ASC;

SELECT p.begin, e.value FROM probe0 AS p ASOF RIGHT JOIN (SELECT * FROM events0 WHERE LOG(value + 5) > 10) AS e ON p.begin >= e.begin ORDER BY p.begin ASC;

SELECT p.begin FROM probe0 AS p ASOF SEMI JOIN events0 AS e ON p.begin >= e.begin ORDER BY p.begin ASC;

SELECT p.begin FROM probe0 AS p ASOF ANTI JOIN events0 AS e ON p.begin >= e.begin ORDER BY p.begin ASC;

CALL dbgen(sf=0.1, suffix='_normal');

CREATE TABLE lineitem_dbl AS SELECT * REPLACE (CAST(l_orderkey AS DOUBLE) + 0.25 AS l_orderkey) FROM lineitem_normal;

CREATE TABLE orders_dbl AS SELECT * REPLACE (CAST(o_orderkey AS DOUBLE) AS o_orderkey) FROM orders_normal;

SELECT COUNT(*) FROM lineitem_normal JOIN orders_normal ON (l_orderkey = o_orderkey);

SELECT COUNT(*) FROM lineitem_dbl ASOF JOIN orders_dbl ON (l_orderkey >= o_orderkey);

PRAGMA enable_verification;

CREATE TABLE events0 (begin TEXT, value INT);

INSERT INTO events0 VALUES (NULL, -1), (1, 0), (3, 1), (6, 2), (8, 3), ('infinity', 9);

INSERT INTO events0 VALUES (NULL, -1), (1, 0), (3, 1), (6, 2), (8, 3), ('infinity', 9);

INSERT INTO events0 VALUES (NULL, -1), (1, 0), (3, 1), (6, 2), (8, 3), ('infinity', 9);

SELECT p.begin, e.value FROM probe0 AS p ASOF JOIN events0 AS e ON p.begin >= e.begin ORDER BY p.begin ASC;

SELECT p.begin, e.value FROM probe0 AS p ASOF JOIN events0 AS e USING (begin) ORDER BY p.begin ASC;

SELECT p.begin, e.value FROM probe0 AS p ASOF LEFT JOIN events0 AS e ON p.begin >= e.begin ORDER BY p.begin ASC;

SELECT p.begin, e.value FROM probe0 AS p ASOF LEFT JOIN events0 AS e USING (begin) ORDER BY p.begin ASC;

SELECT p.begin, e.value FROM probe0 AS p ASOF RIGHT JOIN events0 AS e ON p.begin >= e.begin ORDER BY ALL;

SELECT p.begin, e.value FROM probe0 AS p ASOF RIGHT JOIN events0 AS e USING (begin) ORDER BY ALL;

PRAGMA enable_verification;

CREATE TABLE test (a INT, b INT);

INSERT INTO test VALUES (11, 1), (12, 2);

SELECT * FROM test AS t1, test AS t2 ORDER BY 1, 2, 3, 4;

SELECT COUNT(*) FROM test AS t1, RANGE(0, 2000) AS t2;

SELECT COUNT(*) FROM RANGE(0, 2000) AS t1, test AS t2;

PRAGMA enable_verification;

PRAGMA threads = 4;

PRAGMA verify_parallelism;

CREATE TABLE integers AS SELECT * FROM RANGE(0, 5000) AS tbl(i);

SELECT COUNT(*) FROM integers AS i1, integers AS i2;

SELECT MIN(i1.i), MAX(i2.i) FROM integers AS i1, integers AS i2;

SELECT MAX(i1.i), MIN(i2.i) FROM integers AS i1, integers AS i2;

PRAGMA verify_external;

PRAGMA verify_parallelism;

CREATE TABLE test1 AS SELECT CONCAT(CAST(range AS TEXT), 'x', REPEAT('7', 1)) AS i FROM RANGE(100, 132);

CREATE TABLE test2 AS SELECT CONCAT(CAST(range AS TEXT), 'x', REPEAT('7', 1)) AS i FROM RANGE(100, 132);

INSERT INTO test2 SELECT CAST(range AS TEXT) AS i FROM RANGE(1000000000000, 1000000100000);

SELECT COUNT(*) FROM test1 JOIN test2 USING (i);

CREATE SEQUENCE seq1;

CREATE TABLE t1 AS SELECT CASE WHEN range % 10000 = 0 THEN NEXTVAL('seq1') ELSE range % 1000 END AS i FROM RANGE(0, 10000000);

CREATE SEQUENCE seq2;

CREATE TABLE t2 AS SELECT CASE WHEN range % 100000 = 0 THEN NEXTVAL('seq2') ELSE range END AS i FROM RANGE(100000000, 200000000);

SELECT COUNT(*) FROM t1 JOIN t2 USING (i);

CREATE TABLE tbl AS SELECT range AS i, range AS j FROM RANGE(0, 10000000);

SET threads = 4;

SET memory_limit = '500mb';

SET disabled_optimizers = 'join_order,build_side_probe_side';

SELECT MAX(i), MAX(t1.j), MAX(t2.j), MAX(t3.j), MAX(t4.j) FROM tbl AS t1 JOIN tbl AS t2 USING (i) JOIN tbl AS t3 USING (i) JOIN tbl AS t4 USING (i);

CREATE TABLE t1 (i TEXT);

CREATE TABLE t2 (j TEXT);

INSERT INTO t1 SELECT CONCAT(CAST(range AS TEXT), REPEAT('0', 50)) AS i FROM RANGE(0, 1000000);

INSERT INTO t2 SELECT CONCAT(CAST(range AS TEXT), REPEAT('0', 50)) AS j FROM RANGE(900000, 5000000);

PRAGMA verify_parallelism;

PRAGMA threads = 1;

PRAGMA memory_limit = '100mb';

SELECT COUNT(*) FROM t1, t2 WHERE i = j;

PRAGMA threads = 4;

SELECT COUNT(*) FROM t1, t2 WHERE i = j;

PRAGMA debug_force_external = TRUE;

PRAGMA memory_limit = '250mb';

SELECT COUNT(*) FROM t1, t2 WHERE i = j;

PRAGMA debug_force_external = FALSE;

PRAGMA memory_limit = '200mb';

INSERT INTO t1 SELECT CONCAT(CAST(range AS TEXT), REPEAT('0', 300000)) AS i FROM RANGE(0, 10);

INSERT INTO t2 SELECT CONCAT(CAST(range AS TEXT), REPEAT('0', 300000)) AS i FROM RANGE(99, -1, -1);

SELECT COUNT(*) FROM t1, t2 WHERE i = j;

CALL dbgen(sf=1);

SET threads = 4;

SET memory_limit = '1GB';

SELECT MIN(COLUMNS(*)) FROM customer AS c, lineitem AS l, nation AS n, orders AS o, part AS p, partsupp AS ps, region AS r, supplier AS s WHERE c.c_custkey = o.o_custkey AND n.n_nationkey = c.c_nationkey AND o.o_orderkey = l.l_orderkey AND p.p_partkey = ps.ps_partkey AND ps.ps_partkey = l.l_partkey AND ps.ps_suppkey = l.l_suppkey AND r.r_regionkey = n.n_regionkey AND s.s_suppkey = ps.ps_suppkey;

PRAGMA enable_verification;

PRAGMA verify_external;

CREATE TABLE smalltable AS SELECT CAST(1 AS INT) AS a;

CREATE TABLE bigtable AS SELECT CAST(a AS INT) AS a FROM GENERATE_SERIES(0, 9999, 1) AS tbl(a), GENERATE_SERIES(0, 9, 1) AS tbl2(b);

SELECT COUNT(*) FROM bigtable FULL OUTER JOIN smalltable USING (a);

SELECT COUNT(*) FROM bigtable RIGHT OUTER JOIN smalltable USING (a);

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

PRAGMA verify_external;

CREATE TABLE integers (i INT, j INT);

INSERT INTO integers VALUES (1, 1), (3, 3);

CREATE TABLE integers2 (k INT, l INT);

INSERT INTO integers2 VALUES (1, 10), (2, 20);

SELECT i, j, k, l FROM integers FULL OUTER JOIN integers2 ON integers.i = integers2.k UNION ALL SELECT i, j, k, l FROM integers FULL OUTER JOIN integers2 ON integers.i = integers2.k ORDER BY i;

SELECT i, j, k, l FROM integers FULL OUTER JOIN integers2 ON integers.i = integers2.k UNION SELECT i, j, k, l FROM integers FULL OUTER JOIN integers2 ON integers.i = integers2.k ORDER BY i;

SELECT i, j, k, l FROM integers FULL OUTER JOIN integers2 ON integers.i = integers2.k UNION SELECT i + 1, j, k, l FROM integers FULL OUTER JOIN integers2 ON integers.i = integers2.k UNION SELECT i + 2, j, k, l FROM integers FULL OUTER JOIN integers2 ON integers.i = integers2.k UNION SELECT i + 3, j, k, l FROM integers FULL OUTER JOIN integers2 ON integers.i = integers2.k UNION SELECT i + 4, j, k, l FROM integers FULL OUTER JOIN integers2 ON integers.i = integers2.k ORDER BY 1, 2, 3, 4;

SELECT DISTINCT * FROM (SELECT i, j, k, l FROM integers FULL OUTER JOIN integers2 ON integers.i = integers2.k UNION ALL SELECT i, j, k, l FROM integers FULL OUTER JOIN integers2 ON integers.i = integers2.k) AS tbl ORDER BY i;

CREATE VIEW v1 AS SELECT i, j, k, l FROM integers FULL OUTER JOIN integers2 ON integers.i = integers2.k UNION ALL SELECT i, j, k, l FROM integers FULL OUTER JOIN integers2 ON integers.i = integers2.k;

SELECT * FROM v1 FULL OUTER JOIN v1 AS v2 USING (i, j) ORDER BY 1, 2, 3, 4, 5, 6;

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

PRAGMA verify_external;

CREATE TABLE integers (i INT, j INT);

INSERT INTO integers VALUES (1, 1), (3, 3);

CREATE TABLE integers2 (k INT, l INT);

INSERT INTO integers2 VALUES (1, 10), (2, 20);

SELECT i, j, k, l FROM integers FULL OUTER JOIN integers2 ON integers.i = integers2.k ORDER BY i;

SELECT i, j, k, l FROM integers FULL OUTER JOIN integers2 ON integers.i = integers2.k AND integers.j > integers2.l ORDER BY 1, 2, 3, 4;

SELECT i, j, k, l FROM integers FULL OUTER JOIN (SELECT k, CAST(l AS TEXT) AS l FROM integers2) AS integers2 ON integers.i = integers2.k ORDER BY 1, 2, 3, 4;

SELECT i, j, k, l FROM integers FULL OUTER JOIN (SELECT * FROM integers2 WHERE 1 = 0) AS integers2 ON integers.i = integers2.k ORDER BY 1, 2, 3, 4;

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

PRAGMA verify_external;

CREATE TABLE integers (i INT, j INT);

INSERT INTO integers VALUES (1, 1);

CREATE TABLE integers2 (k INT, l INT);

INSERT INTO integers2 VALUES (1, 10);

SELECT i, j, k, l FROM integers FULL OUTER JOIN integers2 ON integers.i + integers2.k + 9 <> integers.j + integers2.l ORDER BY 1, 2, 3, 4;

SELECT i, j, k, l FROM integers FULL OUTER JOIN (SELECT * FROM integers2 WHERE 1 = 0) AS integers2 ON integers.i + integers2.k + 9 <> integers.j + integers2.l ORDER BY 1, 2, 3, 4;

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

PRAGMA verify_external;

CREATE TABLE integers (i INT, j INT);

INSERT INTO integers VALUES (1, 1);

CREATE TABLE integers2 (k INT, l INT);

INSERT INTO integers2 VALUES (1, 10);

SELECT i, j, k, l FROM integers FULL OUTER JOIN integers2 ON integers.i <> integers2.k ORDER BY 1, 2, 3, 4;

SELECT i, j, k, l FROM integers FULL OUTER JOIN (SELECT * FROM integers2 WHERE 1 = 0) AS integers2 ON integers.i <> integers2.k ORDER BY 1, 2, 3, 4;

PRAGMA enable_verification;

CREATE TABLE test (x INT, y INT);

INSERT INTO test VALUES (1, 1), (2, 2), (3, 3);

SELECT * FROM (SELECT a2.x FROM (SELECT x FROM test WHERE x > 3) AS a1 FULL OUTER JOIN (SELECT x FROM test WHERE x = 1) AS a2 ON a1.x = a2.x) AS a3 FULL OUTER JOIN (SELECT 1 AS x) AS a4 ON a3.x = a4.x;

CREATE TABLE df1 (day DATE, value INT, organization TEXT);
INSERT INTO df1 VALUES ('2022-01-01', 10, 'org1'), ('2022-01-05', 20, 'org2'), ('2022-01-10', 30, 'org3');

CREATE TABLE df2 (day DATE, value INT, organization TEXT);
INSERT INTO df2 VALUES ('2022-01-01', 100, 'org1'), ('2022-09-01', 200, 'org2'), ('2022-03-01', 300, 'org3');

CREATE TABLE df3 (day DATE, value INT, organization TEXT);
INSERT INTO df3 VALUES ('2022-01-02', 1000, 'org1'), ('2022-02-03', 2000, 'org2'), ('2022-04-01', 3000, 'org3');

SELECT COALESCE(anon_1.month, anon_2.month) AS month, COALESCE(COALESCE(CAST(anon_1.value AS REAL), 0.0) + COALESCE(CAST(anon_2.value AS REAL), 0.0), 0.0) AS value FROM (SELECT COALESCE(anon_3.month, anon_4.month) AS month, COALESCE(COALESCE(CAST(anon_3.value AS REAL), 0.0) + COALESCE(CAST(anon_4.value AS REAL), 0.0), 0.0) AS value FROM (SELECT month AS month, SUM(anon_5.value) AS value FROM (SELECT DATE_TRUNC('MONTH', day) AS month, COALESCE(SUM(value), 0.0) AS value FROM df1 WHERE day >= CAST('2022-01-01 00:00:00' AS DATE) AND day <= CAST('2022-01-31 00:00:00' AS DATE) AND (organization ILIKE 'org4') GROUP BY DATE_TRUNC('MONTH', day)) AS anon_5 GROUP BY GROUPING SETS ((month))) AS anon_3 FULL OUTER JOIN (SELECT month AS month, SUM(anon_6.value) AS value FROM (SELECT DATE_TRUNC('MONTH', day) AS month, COALESCE(SUM(value), 0.0) AS value FROM df2 WHERE day >= CAST('2022-01-01 00:00:00' AS DATE) AND day <= CAST('2022-01-31 00:00:00' AS DATE) GROUP BY DATE_TRUNC('MONTH', day)) AS anon_6 GROUP BY GROUPING SETS ((month))) AS anon_4 ON anon_3.month = anon_4.month) AS anon_1 FULL OUTER JOIN (SELECT month AS month, SUM(anon_7.value) AS value FROM (SELECT DATE_TRUNC('MONTH', day) AS month, COALESCE(SUM(value), 0.0) AS value FROM df3 WHERE day >= CAST('2022-01-01 00:00:00' AS DATE) AND day <= CAST('2022-01-31 00:00:00' AS DATE) GROUP BY DATE_TRUNC('MONTH', day)) AS anon_7 GROUP BY GROUPING SETS ((month))) AS anon_2 ON anon_1.month = anon_2.month;

SELECT COALESCE(anon_1.month, anon_2.month) AS month, COALESCE(COALESCE(CAST(anon_1.value AS REAL), 0.0) + COALESCE(CAST(anon_2.value AS REAL), 0.0), 0.0) AS value FROM (SELECT COALESCE(anon_3.month, anon_4.month) AS month, COALESCE(COALESCE(CAST(anon_3.value AS REAL), 0.0) + COALESCE(CAST(anon_4.value AS REAL), 0.0), 0.0) AS value FROM (SELECT month AS month, SUM(anon_5.value) AS value FROM (SELECT DATE_TRUNC('MONTH', day) AS month, COALESCE(SUM(value), 0.0) AS value FROM df1 WHERE day >= CAST('2022-01-01 00:00:00' AS DATE) AND day <= CAST('2022-01-31 00:00:00' AS DATE) AND (organization ILIKE 'org1') GROUP BY DATE_TRUNC('MONTH', day)) AS anon_5 GROUP BY GROUPING SETS ((month))) AS anon_3 FULL OUTER JOIN (SELECT month AS month, SUM(anon_6.value) AS value FROM (SELECT DATE_TRUNC('MONTH', day) AS month, COALESCE(SUM(value), 0.0) AS value FROM df2 WHERE day >= CAST('2022-01-01 00:00:00' AS DATE) AND day <= CAST('2022-01-31 00:00:00' AS DATE) GROUP BY DATE_TRUNC('MONTH', day)) AS anon_6 GROUP BY GROUPING SETS ((month))) AS anon_4 ON anon_3.month = anon_4.month) AS anon_1 FULL OUTER JOIN (SELECT month AS month, SUM(anon_7.value) AS value FROM (SELECT DATE_TRUNC('MONTH', day) AS month, COALESCE(SUM(value), 0.0) AS value FROM df3 WHERE day >= CAST('2022-01-01 00:00:00' AS DATE) AND day <= CAST('2022-01-31 00:00:00' AS DATE) GROUP BY DATE_TRUNC('MONTH', day)) AS anon_7 GROUP BY GROUPING SETS ((month))) AS anon_2 ON anon_1.month = anon_2.month;

SELECT COALESCE(anon_1.month, anon_2.month) AS month, COALESCE(COALESCE(CAST(anon_1.value AS REAL), 0.0) + COALESCE(CAST(anon_2.value AS REAL), 0.0), 0.0) AS value FROM (SELECT COALESCE(anon_3.month, anon_4.month) AS month, COALESCE(COALESCE(CAST(anon_3.value AS REAL), 0.0) + COALESCE(CAST(anon_4.value AS REAL), 0.0), 0.0) AS value FROM (SELECT month AS month, SUM(anon_6.value) AS value FROM (SELECT DATE_TRUNC('MONTH', day) AS month, COALESCE(SUM(value), 0.0) AS value FROM df2 WHERE day >= CAST('2022-01-01 00:00:00' AS DATE) AND day <= CAST('2022-01-31 00:00:00' AS DATE) GROUP BY DATE_TRUNC('MONTH', day)) AS anon_6 GROUP BY GROUPING SETS ((month))) AS anon_3 FULL OUTER JOIN (SELECT month AS month, SUM(anon_5.value) AS value FROM (SELECT DATE_TRUNC('MONTH', day) AS month, COALESCE(SUM(value), 0.0) AS value FROM df1 WHERE day >= CAST('2022-01-01 00:00:00' AS DATE) AND day <= CAST('2022-01-31 00:00:00' AS DATE) AND (organization ILIKE 'org4') GROUP BY DATE_TRUNC('MONTH', day)) AS anon_5 GROUP BY GROUPING SETS ((month))) AS anon_4 ON anon_3.month = anon_4.month) AS anon_1 FULL OUTER JOIN (SELECT month AS month, SUM(anon_7.value) AS value FROM (SELECT DATE_TRUNC('MONTH', day) AS month, COALESCE(SUM(value), 0.0) AS value FROM df3 WHERE day >= CAST('2022-01-01 00:00:00' AS DATE) AND day <= CAST('2022-01-31 00:00:00' AS DATE) GROUP BY DATE_TRUNC('MONTH', day)) AS anon_7 GROUP BY GROUPING SETS ((month))) AS anon_2 ON anon_1.month = anon_2.month;

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

PRAGMA verify_parallelism;

PRAGMA verify_external;

CREATE TABLE integers AS SELECT a AS i, 1 AS j FROM GENERATE_SERIES(0, 1999, 1) AS t1(a);

CREATE TABLE integers2 AS SELECT a AS k, 2 AS l FROM GENERATE_SERIES(2000, 3999, 1) AS t1(a);

SELECT COUNT(*) FROM integers FULL OUTER JOIN integers2 ON integers.i = integers2.k;

SELECT i, j, k, l FROM integers FULL OUTER JOIN integers2 ON integers.i = integers2.k ORDER BY 1, 2, 3, 4;

SELECT COUNT(*) FROM integers FULL OUTER JOIN integers2 ON integers.j > integers2.l;

SELECT i, j, k, l FROM integers FULL OUTER JOIN integers2 ON integers.j > integers2.l ORDER BY 1, 2, 3, 4;

SELECT COUNT(*) FROM integers FULL OUTER JOIN integers2 ON integers.j + 1 <> integers2.l;

SELECT i, j, k, l FROM integers FULL OUTER JOIN integers2 ON integers.j + 1 <> integers2.l ORDER BY 1, 2, 3, 4;

SELECT COUNT(*) FROM integers FULL OUTER JOIN integers2 ON integers.j + integers2.l <> 3;

SELECT i, j, k, l FROM integers FULL OUTER JOIN integers2 ON integers.j + integers2.l <> 3 ORDER BY 1, 2, 3, 4;

PRAGMA enable_verification;

PRAGMA threads = 4;

PRAGMA verify_parallelism;

PRAGMA verify_external;

CREATE TABLE integers AS SELECT * FROM RANGE(0, 75000) AS tbl(i);

CREATE TABLE integers2 AS SELECT * FROM RANGE(0, 100000) AS tbl(i) WHERE i % 2 <> 0;

SELECT COUNT(*) FROM integers JOIN integers2 ON integers.i = integers2.i;

SELECT COUNT(*) FROM integers LEFT OUTER JOIN integers2 ON integers.i = integers2.i;

SELECT COUNT(*) FROM integers RIGHT OUTER JOIN integers2 ON integers.i = integers2.i;

SELECT COUNT(*) FROM integers FULL OUTER JOIN integers2 ON integers.i = integers2.i;

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

PRAGMA verify_external;

CREATE TABLE integers (i INT, j INT);

INSERT INTO integers VALUES (1, 1);

CREATE TABLE integers2 (k INT, l INT);

INSERT INTO integers2 VALUES (1, 10);

SELECT i, j, k, l FROM integers FULL OUTER JOIN integers2 ON integers.i < integers2.k ORDER BY 1, 2, 3, 4;

SELECT i, j, k, l FROM integers FULL OUTER JOIN (SELECT * FROM integers2 WHERE 1 = 0) AS integers2 ON integers.i < integers2.k ORDER BY 1, 2, 3, 4;

SET merge_join_threshold = 0;

CREATE TABLE ota AS SELECT CAST('2019-04-25 14:10:00' AS TIMESTAMP) + CAST(CONCAT(15 * i, ' minutes') AS INTERVAL) AS ts, CAST((i * 5 % 100) AS REAL) AS val FROM GENERATE_SERIES(0, 167136, 1) AS t(i);

CREATE TABLE flags ("start" TIMESTAMP, "end" TIMESTAMP, source TEXT, "desc" TEXT);

INSERT INTO flags VALUES ('2019-04-27 06:57:07.210882', '2019-05-03 11:47:17.59408', 'legacy', '2/0');

INSERT INTO flags VALUES ('2019-05-04 18:31:02.98257', '2019-05-04 18:31:03.779477', 'legacy', '2/11');

INSERT INTO flags VALUES ('2019-05-06 05:39:26.004945', '2019-05-06 05:39:26.239315', 'legacy', '2/0');

INSERT INTO flags VALUES ('2019-05-06 20:59:33.37157', '2019-05-06 20:59:33.402848', 'legacy', '2/11');

INSERT INTO flags VALUES ('2019-05-06 21:14:39.389213', '2019-05-06 21:14:39.389213', 'legacy', '2/0');

INSERT INTO flags VALUES ('2019-05-06 21:29:41.849197', '2019-05-06 21:29:41.880455', 'legacy', '2/11');

INSERT INTO flags VALUES ('2019-05-06 23:15:11.014935', '2019-05-08 07:04:17.679436', 'legacy', '2/0');

INSERT INTO flags VALUES ('2019-05-08 12:11:59.757938', '2019-05-08 12:11:59.757938', 'legacy', '2/11');

INSERT INTO flags VALUES ('2019-05-10 18:10:50.543442', '2019-05-17 03:24:07.564913', 'legacy', '2/0');

INSERT INTO flags VALUES ('2019-05-17 10:41:08.933154', '2019-05-17 13:11:49.965971', 'legacy', '2/11');

INSERT INTO flags VALUES ('2019-05-18 09:40:48.393364', '2019-05-22 06:23:59.900634', 'legacy', '2/0');

INSERT INTO flags VALUES ('2019-05-28 22:13:49.48383', '2019-05-28 22:59:02.257043', 'legacy', '2/11');

INSERT INTO flags VALUES ('2019-05-28 23:29:10.768931', '2019-05-30 16:09:22.471287', 'legacy', '2/0');

INSERT INTO flags VALUES ('2019-06-01 22:16:21.233545', '2019-06-01 22:16:21.233545', 'legacy', '2/11');

INSERT INTO flags VALUES ('2019-06-03 15:34:27.135046', '2019-06-09 04:45:09.435281', 'legacy', '2/0');

INSERT INTO flags VALUES ('2019-06-12 16:38:47.439035', '2019-06-12 16:38:47.439035', 'legacy', '2/11');

INSERT INTO flags VALUES ('2019-06-17 02:38:42.389044', '2019-06-18 20:50:36.829324', 'legacy', '2/0');

INSERT INTO flags VALUES ('2019-06-18 22:21:02.559667', '2019-06-18 22:21:02.559667', 'legacy', '2/11');

INSERT INTO flags VALUES ('2019-06-19 18:43:23.96448', '2019-07-09 19:57:32.802906', 'legacy', '2/0');

INSERT INTO flags VALUES ('2019-07-13 21:55:11.56286', '2019-07-13 21:55:11.56286', 'legacy', '2/11');

INSERT INTO flags VALUES ('2019-07-16 00:54:34.577846', '2019-07-27 11:54:57.069538', 'legacy', '2/0');

INSERT INTO flags VALUES ('2019-07-28 09:44:50.873531', '2019-07-28 09:44:50.873531', 'legacy', '2/11');

INSERT INTO flags VALUES ('2019-07-29 04:30:55.210772', '2019-07-29 04:30:55.210772', 'legacy', '2/0');

INSERT INTO flags VALUES ('2019-08-01 13:11:12.007762', '2019-08-01 13:11:12.007762', 'legacy', '2/11');

INSERT INTO flags VALUES ('2019-08-01 20:53:00.104555', '2019-08-10 12:22:04.507877', 'legacy', '2/0');

INSERT INTO flags VALUES ('2019-08-11 13:34:13.847871', '2019-08-11 13:34:13.847871', 'legacy', '2/11');

INSERT INTO flags VALUES ('2019-08-12 03:11:45.616815', '2019-08-16 12:04:04.771614', 'legacy', '2/0');

INSERT INTO flags VALUES ('2019-08-17 03:30:05.751071', '2019-08-17 03:30:09.912299', 'legacy', '2/11');

INSERT INTO flags VALUES ('2019-08-17 10:18:52', '2019-08-18 07:01:58.625201', 'legacy', '2/0');

INSERT INTO flags VALUES ('2019-08-18 07:09:41.725062', '2019-08-18 07:09:41.725062', 'legacy', '2/11');

INSERT INTO flags VALUES ('2019-08-18 12:51:51.684778', '2019-08-18 17:23:38.404315', 'legacy', '2/0');

INSERT INTO flags VALUES ('2019-08-18 17:27:33.87348', '2019-08-19 12:48:02.813164', 'legacy', '2/11');

INSERT INTO flags VALUES ('2019-08-19 12:48:03.856232', '2019-08-19 12:48:05.153111', 'legacy', '2/0');

INSERT INTO flags VALUES ('2019-08-19 13:03:05.546246', '2019-08-19 13:03:07.014976', 'legacy', '2/11');

INSERT INTO flags VALUES ('2019-08-21 18:48:16.020933', '2019-08-21 18:48:17.22906', 'legacy', '2/0');

INSERT INTO flags VALUES ('2019-08-21 22:04:12.155626', '2019-08-24 20:54:10.580362', 'legacy', '2/11');

INSERT INTO flags VALUES ('2019-08-27 01:39:03.415172', '2019-09-02 04:50:36.592331', 'legacy', '2/0');

INSERT INTO flags VALUES ('2019-09-02 08:09:54.450194', '2019-09-02 08:09:54.450194', 'legacy', '2/11');

INSERT INTO flags VALUES ('2019-09-03 21:32:04.727393', '2019-09-04 21:39:40.521211', 'legacy', '2/0');

INSERT INTO flags VALUES ('2019-09-05 01:09:51.078083', '2019-09-05 15:59:02.204584', 'legacy', '2/11');

INSERT INTO flags VALUES ('2019-09-05 19:31:12.229758', '2019-09-06 00:21:01.320128', 'legacy', '2/0');

INSERT INTO flags VALUES ('2019-09-07 06:39:57.02327', '2019-09-07 11:46:21.22316', 'legacy', '2/11');

INSERT INTO flags VALUES ('2019-09-10 17:18:19.409298', '2019-09-10 17:18:19.409298', 'legacy', '2/0');

INSERT INTO flags VALUES ('2019-09-11 22:11:24.748004', '2019-09-11 22:11:24.748004', 'legacy', '2/11');

INSERT INTO flags VALUES ('2019-09-12 18:02:00.344891', '2019-09-12 22:33:17.289047', 'legacy', '2/0');

INSERT INTO flags VALUES ('2019-09-16 08:26:23.586698', '2019-09-16 15:13:18.378834', 'legacy', '2/11');

INSERT INTO flags VALUES ('2019-09-16 16:13:35.662604', '2019-09-16 16:28:42.196364', 'legacy', '2/0');

INSERT INTO flags VALUES ('2019-09-16 16:43:44.276961', '2019-09-16 20:29:47.941955', 'legacy', '2/11');

INSERT INTO flags VALUES ('2019-09-17 08:43:01.263386', '2019-09-24 10:06:02.384592', 'legacy', '2/0');

INSERT INTO flags VALUES ('2019-09-24 13:06:51.610235', '2019-09-24 13:06:51.610235', 'legacy', '2/11');

INSERT INTO flags VALUES ('2019-09-26 22:53:06.279389', '2019-09-26 22:53:06.279389', 'legacy', '2/0');

INSERT INTO flags VALUES ('2019-09-27 23:45:10.455638', '2019-09-28 01:45:41.915928', 'legacy', '2/11');

INSERT INTO flags VALUES ('2019-09-28 02:13:58.055097', '2019-09-28 02:13:58.055097', 'legacy', '2/0');

INSERT INTO flags VALUES ('2019-09-28 05:31:47.220773', '2019-09-28 05:31:47.220773', 'legacy', '2/11');

INSERT INTO flags VALUES ('2019-10-03 01:14:37.537529', '2019-10-03 15:23:32', 'legacy', '2/0');

INSERT INTO flags VALUES ('2019-10-03 22:40:32', '2019-10-03 22:40:32', 'legacy', '2/11');

INSERT INTO flags VALUES ('2019-10-09 15:03:43.289075', '2019-10-14 17:43:43.628362', 'legacy', '2/0');

INSERT INTO flags VALUES ('2019-10-15 06:13:34.636141', '2019-10-15 06:13:34.636141', 'legacy', '2/11');

INSERT INTO flags VALUES ('2019-10-16 08:37:10.770546', '2019-10-17 18:40:28.77581', 'legacy', '2/0');

INSERT INTO flags VALUES ('2019-10-18 08:44:15.480474', '2019-10-18 08:44:15.480474', 'legacy', '2/11');

INSERT INTO flags VALUES ('2019-10-19 02:04:31.517173', '2019-10-28 01:24:39.438477', 'legacy', '2/0');

INSERT INTO flags VALUES ('2019-10-28 23:56:25.107861', '2019-10-28 23:56:25.107861', 'legacy', '2/11');

INSERT INTO flags VALUES ('2019-10-30 21:21:25.340815', '2019-11-28 14:04:27.737957', 'legacy', '2/0');

INSERT INTO flags VALUES ('2019-11-30 16:26:26.326418', '2019-11-30 16:26:26.326418', 'legacy', '2/11');

INSERT INTO flags VALUES ('2019-12-02 03:24:55.442545', '2020-01-01 05:06:22.828287', 'legacy', '2/0');

INSERT INTO flags VALUES ('2020-01-01 07:27:16.91793', '2020-01-01 07:27:16.91793', 'legacy', '2/11');

INSERT INTO flags VALUES ('2020-01-01 08:21:57.443013', '2020-01-02 09:26:22.480784', 'legacy', '2/0');

INSERT INTO flags VALUES ('2020-01-02 15:43:47.533201', '2020-01-02 15:43:47.533201', 'legacy', '2/11');

INSERT INTO flags VALUES ('2020-01-03 00:59:06.971364', '2020-01-04 16:05:59.965927', 'legacy', '2/0');

INSERT INTO flags VALUES ('2020-01-04 16:36:05.182976', '2020-01-04 16:36:05.182976', 'legacy', '2/11');

INSERT INTO flags VALUES ('2020-01-04 22:22:05.185172', '2020-01-05 07:08:38.487131', 'legacy', '2/0');

INSERT INTO flags VALUES ('2020-01-05 22:41:22.246919', '2020-01-06 05:27:33.573642', 'legacy', '2/11');

INSERT INTO flags VALUES ('2020-01-06 06:12:41.794005', '2020-01-06 12:13:45.006863', 'legacy', '2/0');

INSERT INTO flags VALUES ('2020-01-06 15:14:32', '2020-01-06 15:44:22.120394', 'legacy', '2/11');

INSERT INTO flags VALUES ('2020-01-06 18:46:28.041729', '2020-01-10 03:59:10.738719', 'legacy', '2/0');

INSERT INTO flags VALUES ('2020-01-10 13:10:34.79698', '2020-01-10 13:10:34.79698', 'legacy', '2/11');

INSERT INTO flags VALUES ('2020-01-10 22:17:24.164384', '2020-01-12 12:13:57.267754', 'legacy', '2/0');

INSERT INTO flags VALUES ('2020-01-13 03:33:05.485806', '2020-01-13 03:33:05.485806', 'legacy', '2/11');

INSERT INTO flags VALUES ('2020-01-15 11:16:36.753327', '2020-01-16 10:54:45.773417', 'legacy', '2/0');

INSERT INTO flags VALUES ('2020-01-16 11:35:55.106627', '2020-01-16 11:35:55.106627', 'legacy', '2/11');

INSERT INTO flags VALUES ('2020-01-19 11:19:37.643996', '2020-01-19 11:19:37.643996', 'legacy', '2/0');

INSERT INTO flags VALUES ('2020-01-20 12:24:24.969721', '2020-01-20 12:24:24.969721', 'legacy', '2/11');

INSERT INTO flags VALUES ('2020-01-20 21:32:44.037711', '2020-01-22 20:42:56.2408', 'legacy', '2/0');

INSERT INTO flags VALUES ('2020-01-23 10:32:58.520895', '2020-01-24 03:16:26.692278', 'legacy', '2/11');

INSERT INTO flags VALUES ('2020-01-25 00:51:00.831728', '2020-02-08 12:12:52.627855', 'legacy', '2/0');

INSERT INTO flags VALUES ('2020-02-08 14:48:40.089071', '2020-02-08 16:03:54.498861', 'legacy', '2/11');

INSERT INTO flags VALUES ('2020-02-08 19:19:32.357072', '2020-02-10 09:56:01.144206', 'legacy', '2/0');

INSERT INTO flags VALUES ('2020-02-10 11:26:18.500557', '2020-02-10 11:26:18.500557', 'legacy', '2/11');

INSERT INTO flags VALUES ('2020-02-11 20:13:07.502813', '2020-02-15 03:22:04.688344', 'legacy', '2/0');

INSERT INTO flags VALUES ('2020-02-15 21:35:30.422594', '2020-02-15 21:35:30.422594', 'legacy', '2/11');

INSERT INTO flags VALUES ('2020-02-17 10:25:38', '2020-03-09 03:09:52', 'legacy', '2/0');

INSERT INTO flags VALUES ('2020-03-09 18:25:52', '2020-03-09 21:41:12', 'legacy', '2/11');

INSERT INTO flags VALUES ('2020-03-12 15:22:52', '2020-03-15 04:48:32', 'legacy', '2/0');

INSERT INTO flags VALUES ('2020-03-16 06:59:56.26681', '2020-03-16 06:59:56.26681', 'legacy', '2/11');

INSERT INTO flags VALUES ('2020-03-17 15:13:19.677282', '2020-03-18 23:06:58.733077', 'legacy', '2/0');

INSERT INTO flags VALUES ('2020-03-21 00:03:09', '2020-03-21 00:18:32', 'legacy', '2/11');

INSERT INTO flags VALUES ('2020-03-22 05:09:32', '2020-04-30 14:47:32', 'legacy', '2/0');

INSERT INTO flags VALUES ('2020-04-30 21:38:25.38098', '2020-04-30 21:38:25.38098', 'legacy', '2/11');

INSERT INTO flags VALUES ('2020-05-01 07:12:52', '2020-05-01 22:57:02.230289', 'legacy', '2/0');

INSERT INTO flags VALUES ('2020-05-02 17:07:32', '2020-05-02 17:07:32', 'legacy', '2/11');

INSERT INTO flags VALUES ('2020-05-05 16:25:30.373568', '2020-06-07 21:39:38.313439', 'legacy', '2/0');

INSERT INTO flags VALUES ('2020-06-08 18:58:10.377347', '2020-06-08 18:58:10.377347', 'legacy', '2/11');

INSERT INTO flags VALUES ('2020-06-09 15:37:00.810016', '2020-07-10 12:34:10.196829', 'legacy', '2/0');

INSERT INTO flags VALUES ('2020-07-11 02:11:51.973322', '2020-07-11 02:11:51.973322', 'legacy', '2/11');

INSERT INTO flags VALUES ('2020-07-23 20:11:20.543131', '2020-07-27 01:05:09.67894', 'legacy', '2/0');

INSERT INTO flags VALUES ('2020-07-28 21:53:26.927383', '2020-07-28 21:53:26.927383', 'legacy', '2/11');

INSERT INTO flags VALUES ('2020-07-29 08:52:32.951849', '2020-07-31 07:44:09.401172', 'legacy', '2/0');

INSERT INTO flags VALUES ('2020-07-31 23:19:12.810416', '2020-07-31 23:49:15.699364', 'legacy', '2/11');

INSERT INTO flags VALUES ('2020-08-01 01:14:16.073637', '2020-09-12 02:34:29.675746', 'legacy', '2/0');

INSERT INTO flags VALUES ('2020-09-24 08:26:03.75682', '2020-09-24 08:26:03.75682', 'legacy', '2/11');

INSERT INTO flags VALUES ('2020-09-25 23:33:02.184214', '2020-11-08 21:19:55.639463', 'legacy', '2/0');

INSERT INTO flags VALUES ('2020-11-11 00:32:27.659817', '2020-11-11 00:32:27.659817', 'legacy', '2/11');

INSERT INTO flags VALUES ('2020-11-11 11:53:28.539259', '2020-11-12 12:52:03.847271', 'legacy', '2/0');

INSERT INTO flags VALUES ('2020-11-12 18:21:13.479285', '2020-11-12 18:21:13.479285', 'legacy', '2/11');

INSERT INTO flags VALUES ('2020-11-15 07:59:17.818534', '2020-12-20 20:04:42.477029', 'legacy', '2/0');

INSERT INTO flags VALUES ('2020-12-21 12:06:47.735826', '2020-12-21 17:13:08.615317', 'legacy', '2/11');

INSERT INTO flags VALUES ('2020-12-25 01:43:20.82301', '2021-01-14 12:38:40.256447', 'legacy', '2/0');

INSERT INTO flags VALUES ('2021-01-15 05:57:25.559778', '2021-01-15 05:57:25.559778', 'legacy', '2/11');

INSERT INTO flags VALUES ('2021-01-15 17:08:49.239829', '2021-03-04 18:05:06.5202', 'legacy', '2/0');

INSERT INTO flags VALUES ('2021-03-14 08:30:11.882031', '2021-03-14 08:30:11.882031', 'legacy', '2/11');

INSERT INTO flags VALUES ('2021-03-14 19:34:35.48081', '2021-03-14 19:34:35.48081', 'legacy', '2/0');

INSERT INTO flags VALUES ('2021-03-14 22:23:01.795492', '2021-03-14 22:23:01.795492', 'legacy', '2/11');

INSERT INTO flags VALUES ('2021-03-19 05:18:59.392721', '2021-04-17 17:00:28.56746', 'legacy', '2/0');

INSERT INTO flags VALUES ('2021-04-17 23:53:35.259154', '2021-04-17 23:53:35.259154', 'legacy', '2/11');

INSERT INTO flags VALUES ('2021-04-19 11:43:30.867002', '2021-04-19 11:43:30.867002', 'legacy', '2/0');

INSERT INTO flags VALUES ('2021-04-20 01:03:49.924386', '2021-04-20 01:03:49.924386', 'legacy', '2/11');

INSERT INTO flags VALUES ('2021-04-21 20:38:53.726282', '2021-05-27 03:12:22.242029', 'legacy', '2/0');

INSERT INTO flags VALUES ('2021-05-28 17:17:19.470759', '2021-05-28 17:17:19.470759', 'legacy', '2/11');

INSERT INTO flags VALUES ('2021-05-29 03:51:39.812153', '2021-07-03 17:56:45.710948', 'legacy', '2/0');

INSERT INTO flags VALUES ('2021-07-17 23:26:55.653867', '2021-07-18 00:27:13.16734', 'legacy', '2/11');

INSERT INTO flags VALUES ('2021-07-20 19:46:11.260963', '2021-08-14 23:02:07.889515', 'legacy', '2/0');

INSERT INTO flags VALUES ('2021-08-16 05:25:42.109359', '2021-08-16 05:25:42.109359', 'legacy', '2/11');

INSERT INTO flags VALUES ('2021-08-17 13:55:39.394138', '2021-12-08 09:37:20.089189', 'legacy', '2/0');

INSERT INTO flags VALUES ('2021-12-16 18:34:33.00649', '2021-12-30 00:19:14.148858', 'legacy', '2/11');

INSERT INTO flags VALUES ('2021-12-31 13:43:59.460722', '2022-01-01 15:02:51.580829', 'legacy', '2/0');

INSERT INTO flags VALUES ('2022-01-04 23:18:25.547204', '2022-01-04 23:18:25.547204', 'legacy', '2/11');

INSERT INTO flags VALUES ('2022-01-11 17:02:04.353917', '2022-01-11 17:02:04.353917', 'legacy', '2/0');

INSERT INTO flags VALUES ('2022-01-13 21:51:56.523581', '2022-01-13 21:51:56.523581', 'legacy', '2/11');

INSERT INTO flags VALUES ('2022-02-03 08:43:22.323726', '2022-02-12 00:49:09.124772', 'legacy', '2/0');

INSERT INTO flags VALUES ('2022-02-18 17:16:30.997815', '2022-02-25 22:09:21.674881', 'legacy', '2/11');

INSERT INTO flags VALUES ('2022-03-05 09:08:58.713571', '2022-03-05 09:08:58.713571', 'legacy', '2/0');

INSERT INTO flags VALUES ('2022-03-07 03:52:55.376109', '2022-03-07 04:53:12.341127', 'legacy', '2/11');

INSERT INTO flags VALUES ('2022-03-27 07:54:31.78461', '2022-04-10 20:02:46.477166', 'legacy', '2/0');

INSERT INTO flags VALUES ('2022-04-11 18:58:48.622832', '2022-04-11 18:58:48.622832', 'legacy', '2/11');

INSERT INTO flags VALUES ('2022-04-23 00:44:15.138901', '2022-05-04 22:45:57.516436', 'legacy', '2/0');

INSERT INTO flags VALUES ('2022-06-09 23:49:56.08389', '2022-06-28 03:20:11.764959', 'legacy', '2/11');

INSERT INTO flags VALUES ('2022-07-05 12:24:17.554126', '2022-07-24 12:10:50.921302', 'legacy', '2/0');

INSERT INTO flags VALUES ('2022-07-26 17:32:55.715266', '2022-07-26 17:32:55.715266', 'legacy', '2/11');

INSERT INTO flags VALUES ('2022-09-12 01:05:19.825468', '2022-09-15 09:12:55.833652', 'legacy', '2/0');

INSERT INTO flags VALUES ('2022-09-29 20:35:53.243062', '2022-09-29 21:06:01.84773', 'legacy', '2/11');

INSERT INTO flags VALUES ('2022-11-01 23:59:37.478388', '2022-12-04 15:01:19.792983', 'legacy', '2/0');

INSERT INTO flags VALUES ('2022-12-05 17:47:12.476835', '2022-12-07 17:05:19.118935', 'legacy', '2/11');

INSERT INTO flags VALUES ('2022-12-09 14:25:41.405352', '2022-12-09 14:25:41.405352', 'legacy', '2/0');

INSERT INTO flags VALUES ('2022-12-15 20:02:19.636018', '2022-12-15 21:02:36.652083', 'legacy', '2/11');

INSERT INTO flags VALUES ('2022-12-27 12:59:35.191679', '2022-12-29 01:19:07.640399', 'legacy', '2/0');

INSERT INTO flags VALUES ('2023-01-06 16:31:49.633328', '2023-01-06 16:32:10.734747', 'legacy', '2/11');

INSERT INTO flags VALUES ('2023-01-10 21:49:02.442825', '2023-01-26 21:10:04.737504', 'legacy', '2/0');

INSERT INTO flags VALUES ('2023-02-10 20:18:13.432147', '2023-02-13 15:22:40.650655', 'legacy', '2/11');

CREATE TABLE inner_join AS SELECT ota.*, flags.desc AS flag FROM ota INNER JOIN flags ON ota.ts BETWEEN flags.start AND flags.end ORDER BY ts;

SELECT COUNT(*), COUNT(ts), COUNT(flag) FROM inner_join;

CREATE TABLE left_join AS SELECT ota.*, flags.desc AS flag FROM ota LEFT JOIN flags ON ota.ts BETWEEN flags.start AND flags.end ORDER BY ts;

SELECT COUNT(*), COUNT(ts), COUNT(flag) FROM left_join;

CREATE TABLE right_join AS SELECT ota.*, flags.desc AS flag FROM ota RIGHT JOIN flags ON ota.ts BETWEEN flags.start AND flags.end ORDER BY ts;

SELECT COUNT(*), COUNT(ts), COUNT(flag) FROM right_join;

CREATE TABLE full_outer_join AS SELECT ota.*, flags.desc AS flag FROM ota FULL OUTER JOIN flags ON ota.ts BETWEEN flags.start AND flags.end ORDER BY ts;

SELECT COUNT(*), COUNT(ts), COUNT(flag) FROM full_outer_join;

PRAGMA enable_verification;

CREATE TABLE test (x INT);

SET merge_join_threshold = 0;

SELECT * FROM test AS a, test AS b WHERE (a.x BETWEEN b.x AND b.x);

INSERT INTO test (x) VALUES (1), (2), (3), (NULL), (NULL), (NULL);

CREATE TABLE all_null AS SELECT * FROM test;

UPDATE all_null SET x = (NULL);

SELECT * FROM all_null AS a, all_null AS b WHERE (a.x BETWEEN b.x AND b.x);

SELECT * FROM test AS a, all_null AS b WHERE (a.x BETWEEN b.x AND b.x);

SELECT * FROM all_null AS a, test AS b WHERE (a.x BETWEEN b.x AND b.x);

PRAGMA enable_verification;

SET merge_join_threshold = 0;

CREATE TABLE calendar AS SELECT start_ts, start_ts + INTERVAL '12' HOURS AS end_ts, CAST(DATE_PART('year', start_ts) AS BIGINT) * 100 + CAST(DATE_PART('week', start_ts) AS BIGINT) AS yyyyww FROM GENERATE_SERIES(CAST('2023-01-01 06:00:00' AS TIMESTAMP), CAST('2023-06-01 00:00:00' AS TIMESTAMP), INTERVAL '12' HOURS) AS tbl(start_ts);

CREATE TABLE snapshot_data AS SELECT CAST('2023-03-01 08:00:00' AS TIMESTAMP) AS snapshot_ts, 1 AS snapshot_value FROM GENERATE_SERIES(1, 1000) AS t(i);

WITH cal_last_13 AS (SELECT * FROM calendar WHERE yyyyww IN (SELECT yyyyww FROM calendar)) SELECT COUNT(*) FROM snapshot_data AS data JOIN cal_last_13 AS cal ON data.snapshot_ts >= cal.start_ts AND data.snapshot_ts <= cal.end_ts;

WITH cal_last_13 AS (SELECT * FROM calendar WHERE yyyyww IN (SELECT yyyyww FROM calendar) UNION ALL SELECT * FROM calendar WHERE yyyyww IN (SELECT yyyyww FROM calendar)) SELECT COUNT(*) FROM snapshot_data AS data JOIN cal_last_13 AS cal ON data.snapshot_ts >= cal.start_ts AND data.snapshot_ts <= cal.end_ts;

WITH cal_last_13 AS (SELECT * FROM calendar WHERE yyyyww IN (SELECT yyyyww FROM calendar) UNION ALL SELECT * FROM calendar WHERE yyyyww IN (SELECT yyyyww FROM calendar) UNION ALL SELECT * FROM calendar WHERE yyyyww IN (SELECT yyyyww FROM calendar)) SELECT COUNT(*) FROM snapshot_data AS data JOIN cal_last_13 AS cal ON data.snapshot_ts >= cal.start_ts AND data.snapshot_ts <= cal.end_ts;

WITH cal_last_13 AS (SELECT * FROM calendar WHERE yyyyww IN (SELECT yyyyww FROM calendar) UNION ALL SELECT * FROM calendar WHERE yyyyww IN (SELECT yyyyww FROM calendar) UNION ALL SELECT * FROM calendar WHERE yyyyww IN (SELECT yyyyww FROM calendar)) SELECT COUNT(*) FROM snapshot_data AS data JOIN cal_last_13 AS cal ON data.snapshot_ts >= cal.start_ts AND data.snapshot_ts <= cal.end_ts JOIN cal_last_13 AS cal2 ON data.snapshot_ts >= cal2.start_ts AND data.snapshot_ts <= cal2.end_ts;

PRAGMA threads = 1;

SELECT SETSEED(0.8765309);

CREATE TABLE df (id INT, id2 INT, id3 INT, value_double DOUBLE, value AS (CAST(value_double AS DECIMAL(4, 3))), one_min_value AS (CAST((1.0 - value_double) AS DECIMAL(4, 3))));

INSERT INTO df SELECT CAST((RANDOM() * 100) AS INT) + 1 AS id, CAST((RANDOM() * 10) AS INT) + 1 AS id2, CAST((RANDOM() * 5) AS INT) + 1 AS id3, (ROUND(RANDOM(), 4)) AS value_double FROM RANGE(0, 5000);

SELECT SUM(id) AS id, SUM(id2) AS id2, SUM(id3) AS id3, SUM(value) AS sum_value, SUM(one_min_value) AS sum_one_min_value, sum_value + sum_one_min_value AS sum FROM df;

SELECT SUM(id) AS id, SUM(id2) AS id2, SUM(id3) AS id3, SUM(value) AS sum_value, SUM(one_min_value) AS sum_one_min_value, sum_value + sum_one_min_value AS sum FROM df;

SELECT SUM(id) AS id, SUM(id2) AS id2, SUM(id3) AS id3, SUM(value) AS sum_value, SUM(one_min_value) AS sum_one_min_value, sum_value + sum_one_min_value AS sum FROM df;

SELECT id2, id3, id3_right, SUM(value * value_right) AS value FROM (SELECT df.*, df2.id3 AS id3_right, df2.value AS value_right FROM df JOIN df AS df2 ON (df.id = df2.id AND df.id2 = df2.id2 AND df.id3 > df2.id3 AND df.id3 < df2.id3 + 30)) AS tbl GROUP BY ALL ORDER BY ALL;

CREATE TABLE bigtbl AS SELECT * FROM RANGE(0, 1000) AS t(i);

CREATE TABLE smalltbl AS SELECT i AS low, i + 1 AS high FROM RANGE(0, 100) AS t(i);

PRAGMA explain_output = 'PHYSICAL_ONLY';

SET merge_join_threshold = 0;

EXPLAIN SELECT COUNT(*) FROM bigtbl JOIN smalltbl ON (bigtbl.i BETWEEN low AND high);

SET merge_join_threshold = 1000;

EXPLAIN SELECT COUNT(*) FROM bigtbl JOIN smalltbl ON (bigtbl.i BETWEEN low AND high);

SET nested_loop_join_threshold = 1000;

EXPLAIN SELECT COUNT(*) FROM bigtbl JOIN smalltbl ON (bigtbl.i BETWEEN low AND high);

PRAGMA enable_verification;

SET merge_join_threshold = 0;

CREATE TABLE calendar AS SELECT * FROM RANGE(CAST('2022-01-01' AS DATE), CAST('2024-02-01' AS DATE), INTERVAL '1' MONTH);

CREATE TABLE scd2 AS SELECT range AS range_start, CASE WHEN DATE_PART('year', range) < 2023 THEN range + INTERVAL '4' MONTH - INTERVAL '1' DAY END AS range_end, n FROM calendar CROSS JOIN GENERATE_SERIES(1, 85) AS n;

CREATE TABLE scd2_non_null AS SELECT range AS range_start, CASE WHEN DATE_PART('year', range) < 2023 THEN range + INTERVAL '4' MONTH - INTERVAL '1' DAY ELSE '2099-01-01' END AS range_end, n FROM calendar CROSS JOIN GENERATE_SERIES(1, 85) AS n;

SELECT range, COUNT(*) AS n FROM scd2_non_null INNER JOIN calendar ON range BETWEEN range_start AND COALESCE(range_end, '2099-01-01') GROUP BY range ORDER BY range;

SELECT range, COUNT(*) AS n FROM scd2 INNER JOIN calendar ON range <= COALESCE(range_end, '2099-01-01') AND range_start <= range GROUP BY range ORDER BY range;

PRAGMA enable_verification;

SET merge_join_threshold = 0;

WITH test AS (SELECT i AS id, i AS begin, i + 10 AS end, i % 2 AS p1, i % 3 AS p2 FROM RANGE(0, 10) AS tbl(i)) SELECT lhs.id, rhs.id FROM test AS lhs, test AS rhs WHERE lhs.begin < rhs.end AND rhs.begin < lhs.end AND lhs.p1 <> rhs.p1 AND lhs.p2 <> rhs.p2 ORDER BY ALL;

WITH test AS (SELECT i AS id, i AS begin, i + 10 AS end, i % 2 AS p1, i % 3 AS p2 FROM RANGE(0, 10) AS tbl(i)), sub AS (SELECT lhs.id AS lid, rhs.id AS rid FROM test AS lhs, test AS rhs WHERE lhs.begin < rhs.end AND rhs.begin < lhs.end AND lhs.p1 <> rhs.p1 AND lhs.p2 <> rhs.p2 ORDER BY ALL) SELECT MIN(lid), MAX(rid) FROM sub;

WITH RECURSIVE t AS (SELECT 1 AS x, 0 AS begin, 4 AS end UNION ALL SELECT lhs.x + 1 AS x, GREATEST(lhs.begin, rhs.begin) AS begin, LEAST(lhs.end, rhs.end) AS end FROM t AS lhs, t AS rhs WHERE lhs.begin + 1 < rhs.end - 1 AND rhs.begin + 1 < lhs.end - 1 AND lhs.x < 3) SELECT COUNT(*) FROM t;

CREATE TABLE issue3486 AS SELECT generate_series AS ts FROM GENERATE_SERIES(CAST('2020-01-01' AS TIMESTAMP), CAST('2021-01-01' AS TIMESTAMP), INTERVAL '1' DAY);

WITH data_table AS (SELECT EPOCH(ts) AS ts FROM issue3486 WHERE NOT ts IS NULL), S AS (SELECT MIN(ts) AS minVal, MAX(ts) AS maxVal, (MAX(ts) - MIN(ts)) AS range FROM data_table), buckets AS (SELECT range AS bucket, (range) * (SELECT range FROM S) / 40 + (SELECT minVal FROM S) AS low, (range + 1) * (SELECT range FROM S) / 40 + (SELECT minVal FROM S) AS high FROM RANGE(0, 40, 1)) SELECT bucket, low, high, COUNT(data_table.ts) AS count FROM buckets LEFT JOIN data_table ON (data_table.ts >= low AND data_table.ts < high) GROUP BY bucket, low, high ORDER BY bucket;

PRAGMA enable_verification;

SET merge_join_threshold = 0;

CREATE TABLE east AS SELECT * FROM (VALUES ('r1', 100, 140, 12, 2), ('r2', 101, 100, 12, 8), ('r3', 103, 90, 5, 4)) AS east(rid, id, dur, rev, cores);

CREATE TABLE west AS SELECT * FROM (VALUES ('s1', 404, 100, 6, 4), ('s2', 498, 140, 11, 2), ('s3', 676, 80, 10, 1), ('s4', 742, 90, 5, 4)) AS west(rid, t_id, time, cost, cores);

SELECT s1.rid, s2.rid FROM west AS s1, west AS s2 WHERE s1.time > s2.time ORDER BY 1, 2;

SELECT s1.rid, s2.rid FROM west AS s1, west AS s2 WHERE s1.time > s2.time AND s1.cost < s2.cost ORDER BY 1, 2;

SELECT east.rid, west.rid FROM east, west WHERE east.dur < west.time AND east.rev > west.cost ORDER BY 1, 2;

WITH weststr AS (SELECT rid, CAST(time AS TEXT) AS time, CAST(cost AS TEXT) AS cost FROM west) SELECT s1.rid, s2.rid FROM weststr AS s1, weststr AS s2 WHERE s1.time > s2.time AND s1.cost < s2.cost ORDER BY 1, 2;

PRAGMA enable_verification;

SET merge_join_threshold = 0;

SELECT SETSEED(0.8675309);

CREATE TABLE events AS (SELECT *, "start" + INTERVAL (CASE WHEN RANDOM() < 0.1 THEN 120 ELSE (5 + CAST(ROUND(RANDOM() * 50, 0) AS BIGINT)) END) MINUTE AS "end" FROM (SELECT id, 'Event ' || CAST(id AS TEXT) AS "name", (5 + CAST(ROUND(RANDOM() * 5000, 0) AS BIGINT)) AS audience, CAST('1992-01-01' AS TIMESTAMP) + INTERVAL (CAST(ROUND(RANDOM() * 40 * 365, 0) AS BIGINT)) DAY + INTERVAL (CAST(ROUND(RANDOM() * 23, 0) AS BIGINT)) HOUR AS "start", 'Sponsor ' || (1 + CAST(ROUND(RANDOM() * 10, 0) AS BIGINT)) AS sponsor FROM RANGE(1, 1000) AS tbl(id)) AS q);

SELECT COUNT(*) FROM (SELECT r.id, s.id FROM events AS r, events AS s WHERE r.start <= s.end AND r.end >= s.start AND r.id <> s.id) AS q2;

PRAGMA enable_verification;

SET merge_join_threshold = 0;

CREATE TABLE tt (x INT, y INT, z INT);

INSERT INTO tt SELECT NULLIF(r % 3, 0), NULLIF(r % 5, 0), r FROM RANGE(0, 10) AS tbl(r);

SELECT * FROM tt AS t1 LEFT JOIN tt AS t2 ON t1.x < t2.x AND t1.y < t2.y ORDER BY t1.x NULLS FIRST, t1.y NULLS FIRST, t1.z, t2.x, t2.y, t2.z;

PRAGMA disable_optimizer;

CREATE TABLE tt2 (x INT);

INSERT INTO tt2 SELECT * FROM RANGE(0, 10);

SELECT t1.x, t1.y FROM (SELECT (CASE WHEN x < 100 THEN NULL ELSE 99 END) AS x, (CASE WHEN x < 100 THEN 99 ELSE 99 END) AS y FROM tt2) AS t1 LEFT JOIN tt2 AS t2 ON t1.x < t2.x AND t1.y < t2.x ORDER BY t1.x NULLS FIRST, t1.y NULLS FIRST;

PRAGMA enable_verification;

SET merge_join_threshold = 0;

SELECT t1.x, t2.x FROM "test/sql/join/iejoin/overlap.left.csv" AS t1, "test/sql/join/iejoin/overlap.right.csv" AS t2 WHERE t1.x < t2.x AND t1.y > t2.y;

SELECT t1.x, t2.x FROM "test/sql/join/iejoin/overlap.left.csv" AS t1, "test/sql/join/iejoin/overlap.right.csv" AS t2 WHERE t1.y > t2.y AND t1.x < t2.x;

PRAGMA verify_parallelism;

SET merge_join_threshold = 0;

SELECT lhs.begin, rhs.begin FROM (SELECT i AS id, i AS begin, i + 1 AS end FROM RANGE(1, 10000002) AS tbl(i)) AS lhs, (SELECT i - 100000000 AS id, i AS begin, i + 1 AS end FROM RANGE(10000001, 20000002) AS tbl(i)) AS rhs WHERE lhs.begin < rhs.end AND rhs.begin < lhs.end;

PRAGMA enable_verification;

CREATE TABLE t1 (c0 INT, c1 TEXT);

CREATE TABLE t2 (c0 TINYINT, PRIMARY KEY (c0));

INSERT INTO t1 (c0) VALUES (14161972);

INSERT INTO t1 (c0, c1) VALUES (-1.438515327E9, 4.43806148E8);

SELECT * FROM t1 INNER JOIN t2 ON t1.c0 = t2.c0;

PRAGMA enable_verification;

CREATE TABLE t (t_k0 TINYINT);

INSERT INTO t VALUES (-128), (127);

CREATE TABLE u (u_k0 TINYINT);

INSERT INTO u VALUES (-128), (127);

SELECT t_k0, u_k0 FROM t, u WHERE t_k0 = u_k0;

DROP TABLE t;

DROP TABLE u;

CREATE TABLE t (t_k0 SMALLINT);

INSERT INTO t VALUES (-32768), (32767);

CREATE TABLE u (u_k0 SMALLINT);

INSERT INTO u VALUES (-32768), (32767);

SELECT t_k0, u_k0 FROM t, u WHERE t_k0 = u_k0;

DROP TABLE t;

DROP TABLE u;

CREATE TABLE t (t_k0 INT);

INSERT INTO t VALUES (-2147483648), (2147483647);

CREATE TABLE u (u_k0 INT);

INSERT INTO u VALUES (-2147483648), (2147483647);

SELECT t_k0, u_k0 FROM t, u WHERE t_k0 = u_k0;

DROP TABLE t;

DROP TABLE u;

CREATE TABLE t (t_k0 BIGINT);

INSERT INTO t VALUES (-9223372036854775808), (9223372036854775807);

CREATE TABLE u (u_k0 BIGINT);

INSERT INTO u VALUES (-9223372036854775808), (9223372036854775807);

SELECT t_k0, u_k0 FROM t, u WHERE t_k0 = u_k0;

DROP TABLE t;

DROP TABLE u;

CREATE TABLE t (t_k0 INT128);

INSERT INTO t VALUES (-170141183460469231731687303715884105728), (170141183460469231731687303715884105727);

CREATE TABLE u (u_k0 INT128);

INSERT INTO u VALUES (-170141183460469231731687303715884105728), (170141183460469231731687303715884105727);

SELECT t_k0, u_k0 FROM t, u WHERE t_k0 = u_k0;

DROP TABLE t;

DROP TABLE u;

CREATE TABLE t (t_k0 UTINYINT);

INSERT INTO t VALUES (0), (255);

CREATE TABLE u (u_k0 UTINYINT);

INSERT INTO u VALUES (0), (255);

SELECT t_k0, u_k0 FROM t, u WHERE t_k0 = u_k0;

DROP TABLE t;

DROP TABLE u;

CREATE TABLE t (t_k0 USMALLINT);

INSERT INTO t VALUES (0), (65535);

CREATE TABLE u (u_k0 USMALLINT);

INSERT INTO u VALUES (0), (65535);

SELECT t_k0, u_k0 FROM t, u WHERE t_k0 = u_k0;

DROP TABLE t;

DROP TABLE u;

CREATE TABLE t (t_k0 UINTEGER);

INSERT INTO t VALUES (0), (4294967295);

CREATE TABLE u (u_k0 UINTEGER);

INSERT INTO u VALUES (0), (4294967295);

SELECT t_k0, u_k0 FROM t, u WHERE t_k0 = u_k0;

DROP TABLE t;

DROP TABLE u;

CREATE TABLE t (t_k0 UBIGINT);

INSERT INTO t VALUES (0), (18446744073709551615);

CREATE TABLE u (u_k0 UBIGINT);

INSERT INTO u VALUES (0), (18446744073709551615);

SELECT t_k0, u_k0 FROM t, u WHERE t_k0 = u_k0;

DROP TABLE t;

PRAGMA enable_verification;

PRAGMA verify_external;

CREATE TABLE smalltable AS SELECT CAST(1 AS INT) AS a;

CREATE TABLE bigtable AS SELECT CAST(a AS INT) AS a FROM GENERATE_SERIES(0, 10000, 1) AS tbl(a), GENERATE_SERIES(0, 9, 1) AS tbl2(b);

SELECT COUNT(*) FROM bigtable JOIN smalltable USING (a);

SELECT COUNT(*) FROM bigtable JOIN smalltable USING (a) JOIN smalltable AS t3 USING (a);

SELECT COUNT(*) FROM bigtable JOIN smalltable USING (a) JOIN smalltable AS t3 USING (a) JOIN smalltable AS t4 USING (a);

SELECT * FROM bigtable JOIN smalltable USING (a);

PRAGMA enable_verification;

CREATE TABLE t1 (i INT);

CREATE TABLE t2 (j INT);

CREATE TABLE t3 (k INT);

CREATE TABLE t4 (l INT);

INSERT INTO t1 VALUES (1);

INSERT INTO t2 VALUES (1);

INSERT INTO t3 VALUES (2), (3);

INSERT INTO t4 VALUES (2), (3);

SELECT * FROM t1 JOIN t2 ON (i = j), t3 JOIN t4 ON (k = l) ORDER BY 1, 2, 3, 4;

SELECT * FROM t1 JOIN t2 ON (i = j), t3 JOIN t4 ON (i + k = j + l);

SELECT * FROM t1 JOIN t2 ON (i = j), LATERAL (SELECT * FROM t3 JOIN t4 ON (i + k = j + l)) AS t(x);

PRAGMA enable_verification;

PRAGMA verify_external;

CREATE TABLE test (id INT, l TEXT[]);

INSERT INTO test SELECT i, CASE WHEN (i / 1000) % 2 = 0 THEN [CAST(1 AS TEXT), CAST(1 AS TEXT), CAST(1 AS TEXT)] ELSE [CAST(2 AS TEXT), CAST(2 AS TEXT)] END FROM GENERATE_SERIES(0, 1999, 1) AS tbl(i);

SELECT * FROM test AS t1 LEFT JOIN test AS t2 ON t1.id = t2.id WHERE t1.l <> t2.l OR t1.id <> t2.id;

PRAGMA enable_verification;

CREATE TABLE test (a INT, b INT);

INSERT INTO test VALUES (11, 1), (12, 2), (13, 3);

CREATE TABLE test2 (a INT, c INT);

INSERT INTO test2 VALUES (11, 1), (12, 1), (13, 4);

SELECT test.a, b, c FROM test, test2 WHERE test.a = test2.a AND test.b <> test2.c ORDER BY test.a;

SELECT test.a, b, c FROM test, test2 WHERE test.a = test2.a AND test.b < test2.c ORDER BY test.a;

SELECT test.a, b, c FROM test, test2 WHERE test.a = test2.a AND test.b <= test2.c ORDER BY test.a;

SELECT test.a, b, c FROM test, test2 WHERE test.a = test2.a AND test.b > test2.c ORDER BY test.a;

SELECT test.a, b, c FROM test, test2 WHERE test.a = test2.a AND test.b >= test2.c ORDER BY test.a;

DROP TABLE test;

DROP TABLE test2;

CREATE TABLE test (a INT, b INT, str TEXT);

INSERT INTO test VALUES (11, 1, 'a'), (12, 2, 'b'), (13, 3, 'c');

CREATE TABLE test2 (a INT, c INT, str2 TEXT);

INSERT INTO test2 VALUES (11, 1, 'd'), (12, 1, 'e'), (13, 4, 'f');

SELECT * FROM test WHERE EXISTS(SELECT * FROM test2 WHERE test.a = test2.a AND test.b <> test2.c) ORDER BY 2;

SELECT * FROM test WHERE EXISTS(SELECT * FROM test2 WHERE test.a = test2.a AND test.b <> test2.c) AND NOT EXISTS(SELECT * FROM test2 WHERE test.a = test2.a AND test.b < test2.c);

SELECT * FROM test WHERE NOT EXISTS(SELECT * FROM test2 WHERE test.a = test2.a AND test.b < test2.c) ORDER BY 1;

SELECT * FROM test WHERE NOT EXISTS(SELECT * FROM test2 WHERE test.a = test2.a AND test.b < test2.c) AND NOT EXISTS(SELECT * FROM test2 WHERE test.a = test2.a AND test.b > test2.c);

SELECT * FROM test WHERE EXISTS(SELECT * FROM test2 WHERE test.a = test2.a AND test.b <> test2.c) AND test.a > 11 ORDER BY b;

DROP TABLE test;

DROP TABLE test2;

CREATE TABLE test (a INT, b INT, str TEXT);

INSERT INTO test VALUES (11, 1, 'a'), (12, 2, 'b'), (13, 3, 'c');

CREATE TABLE test2 (a INT, c INT, str2 TEXT);

INSERT INTO test2 VALUES (11, 1, 'd'), (12, 1, 'e'), (13, 4, 'f');

SELECT * FROM test WHERE NOT EXISTS(SELECT * FROM test2 WHERE test.a = test2.a AND test.b < test2.c AND test2.a > 14) AND NOT EXISTS(SELECT * FROM test2 WHERE test.a = test2.a AND test.b > test2.c AND test2.a < 10) ORDER BY 1;

SELECT * FROM test WHERE NOT EXISTS(SELECT * FROM test2 WHERE test.a = test2.a AND test.b < test2.c AND test2.a = 12) AND NOT EXISTS(SELECT * FROM test2 WHERE test.a = test2.a AND test.b > test2.c AND test2.a = 12) ORDER BY 1;

SELECT * FROM test WHERE EXISTS(SELECT * FROM test2 WHERE test.a = test2.a AND test.b <> test2.c) AND test.a < 13;

PRAGMA enable_verification;

PRAGMA verify_external;

CREATE TABLE test (a INT, b INT);

INSERT INTO test VALUES (11, 1), (12, 2), (13, 3);

CREATE TABLE test2 (b INT, c INT);

INSERT INTO test2 VALUES (1, 10), (1, 20), (2, 30);

SELECT a, test.b, c FROM test, test2 WHERE test.b = test2.b ORDER BY c;

SELECT b FROM test, test2 WHERE test.b > test2.b;

SELECT a, test.b, c FROM test, test2 WHERE test.b = test2.b AND test.a - 1 = test2.c;

SELECT a, (SELECT test.a), c FROM test, test2 WHERE test.b = test2.b ORDER BY c;

SELECT a, test.b, c FROM test INNER JOIN test2 ON test.b = test2.b ORDER BY c;

SELECT a, test.b, c FROM test INNER JOIN test2 ON test2.b = test.b ORDER BY c;

SELECT a, test.b, c FROM test INNER JOIN test2 ON test2.b = test.b AND test.b = 2;

SELECT a, test.b, c FROM test INNER JOIN test2 ON test2.b = test.b AND 2 = 2 ORDER BY c;

SELECT a, test.b, c FROM test INNER JOIN test2 ON test.b = 2 ORDER BY c;

SELECT a, test.b, c FROM test INNER JOIN test2 ON NULL = 2;

SELECT * FROM (VALUES (1)) AS tbl(i) JOIN (VALUES (1)) AS tbl2(j) ON (i = j);

SELECT * FROM (VALUES (1), (2)) AS tbl(i) JOIN (VALUES (1), (2)) AS tbl2(j) ON (i = j) WHERE i + j = 2;

PRAGMA enable_verification;

PRAGMA verify_external;

PRAGMA verify_parallelism;

CREATE TABLE test (a INT, b INT);

INSERT INTO test VALUES (11, 1), (12, 2), (13, 3);

CREATE TABLE test2 AS SELECT * FROM REPEAT(1, 10 * 1024) AS t1(b), (SELECT 10) AS t2(c);

SELECT COUNT(*) FROM test2;

SELECT COUNT(*) FROM test INNER JOIN test2 ON test.b = test2.b;

PRAGMA enable_verification;

CREATE TABLE test3 AS SELECT range AS r FROM RANGE(0, 1024, 1);

CREATE TABLE test3 AS SELECT range AS r FROM RANGE(0, 1024, 1);

INSERT INTO test4 SELECT * FROM test3;
endloop;

SELECT test3.r, test4.r FROM test3, test4 WHERE test3.r = test4.r ORDER BY test3.r, test4.r;

INSERT INTO test4 SELECT * FROM test3;
endloop;

SELECT test3.r, test4.r FROM test3, test4 WHERE test3.r = test4.r ORDER BY test3.r, test4.r;

PRAGMA enable_verification;

CREATE TABLE tbl (col0 INT, col1 INT);

INSERT INTO tbl VALUES (1, 0), (1, 1);

SELECT x.col1, y.col1 FROM tbl AS x JOIN tbl AS y ON x.col0 = y.col0 AND (x.col1 IS DISTINCT FROM y.col1) ORDER BY x.col1;

SELECT x.col1, y.col1 FROM tbl AS x JOIN tbl AS y ON x.col0 = y.col0 AND x.col1 <> y.col1 ORDER BY x.col1;

INSERT INTO tbl VALUES (1, 0), (1, 1);

SELECT x.col1, y.col1 FROM tbl AS x JOIN tbl AS y ON x.col0 = y.col0 AND (x.col1 IS DISTINCT FROM y.col1) ORDER BY x.col1;

SELECT x.col1, y.col1 FROM tbl AS x JOIN tbl AS y ON x.col0 = y.col0 AND x.col1 <> y.col1 ORDER BY x.col1;

CREATE TABLE tbl_s (col0 STRUCT(x INT), col1 STRUCT(x INT));

INSERT INTO tbl_s VALUES ({'x': 1}, {'x': 0}), ({'x': 1}, {'x': 1});

SELECT x.col1, y.col1 FROM tbl_s AS x JOIN tbl_s AS y ON x.col0 = y.col0 AND (x.col1 IS DISTINCT FROM y.col1) ORDER BY x.col1;

SELECT x.col1, y.col1 FROM tbl_s AS x JOIN tbl_s AS y ON x.col0 = y.col0 AND x.col1 <> y.col1 ORDER BY x.col1;

INSERT INTO tbl_s VALUES ({'x': 1}, {'x': 0}), ({'x': 1}, {'x': 1});

SELECT x.col1, y.col1 FROM tbl_s AS x JOIN tbl_s AS y ON x.col0 = y.col0 AND (x.col1 IS DISTINCT FROM y.col1) ORDER BY x.col1;

SELECT x.col1, y.col1 FROM tbl_s AS x JOIN tbl_s AS y ON x.col0 = y.col0 AND x.col1 <> y.col1 ORDER BY x.col1;

CREATE TABLE tbl_l (col0 INT[], col1 INT[]);

INSERT INTO tbl_l VALUES ([1], [0]), ([1], [1]);

SELECT x.col1, y.col1 FROM tbl_l AS x JOIN tbl_l AS y ON x.col0 = y.col0 AND (x.col1 IS DISTINCT FROM y.col1) ORDER BY x.col1;

SELECT x.col1, y.col1 FROM tbl_l AS x JOIN tbl_l AS y ON x.col0 = y.col0 AND x.col1 <> y.col1 ORDER BY x.col1;

INSERT INTO tbl_l VALUES ([1], [0]), ([1], [1]);

SELECT x.col1, y.col1 FROM tbl_l AS x JOIN tbl_l AS y ON x.col0 = y.col0 AND (x.col1 IS DISTINCT FROM y.col1) ORDER BY x.col1;

SELECT x.col1, y.col1 FROM tbl_l AS x JOIN tbl_l AS y ON x.col0 = y.col0 AND x.col1 <> y.col1 ORDER BY x.col1;

WITH abc AS (SELECT * FROM (VALUES (1, 'x'), (1, 'x'), (1, '0'), (1, '0')) AS tbl(col0, col1)) SELECT x.col0 AS c1, x.col1 AS c2, y.col0 AS c3, y.col1 AS c4 FROM abc AS x JOIN abc AS y ON x.col0 = y.col0 AND (x.col1 IS DISTINCT FROM y.col1) ORDER BY c1, c2, c3, c4;

CREATE TABLE tbl_null (col0 INT, col1 INT);

INSERT INTO tbl_null VALUES (1, 0), (1, 1), (1, NULL), (NULL, 1), (0, NULL), (NULL, 0), (NULL, NULL);

SELECT x.col1, y.col1 FROM tbl_null AS x JOIN tbl_null AS y ON x.col0 = y.col0 AND (x.col1 IS DISTINCT FROM y.col1) ORDER BY x.col1, y.col1;

SELECT x.col1, y.col1 FROM tbl_null AS x JOIN tbl_null AS y ON x.col0 = y.col0 AND x.col1 <> y.col1 ORDER BY x.col1;

SELECT x.col1, y.col1 FROM tbl_null AS x JOIN tbl_null AS y ON x.col0 = y.col0 AND (x.col1 IS NOT DISTINCT FROM y.col1) ORDER BY x.col1;

SELECT x.col1, y.col1 FROM tbl_null AS x JOIN tbl_null AS y ON x.col0 = y.col0 AND x.col1 = y.col1 ORDER BY x.col1;

CREATE TABLE tbl_s_null (col0 STRUCT(x INT), col1 STRUCT(x INT));

INSERT INTO tbl_s_null VALUES ({'x': 1}, {'x': 0}), ({'x': 1}, {'x': 1}), ({'x': 1}, NULL), ({'x': 1}, {'x': NULL});

SELECT x.col1, y.col1 FROM tbl_s_null AS x JOIN tbl_s_null AS y ON x.col0 = y.col0 AND (x.col1 IS DISTINCT FROM y.col1) ORDER BY x.col1, y.col1;

SELECT x.col1, y.col1 FROM tbl_s_null AS x JOIN tbl_s_null AS y ON x.col0 = y.col0 AND x.col1 <> y.col1 ORDER BY x.col1.x, y.col1.x;

SELECT x.col1, y.col1 FROM tbl_s_null AS x JOIN tbl_s_null AS y ON x.col0 = y.col0 AND x.col1 > y.col1 ORDER BY x.col1.x, y.col1.x;

SELECT x.col1, y.col1 FROM tbl_s_null AS x JOIN tbl_s_null AS y ON x.col0 = y.col0 AND (x.col1 IS NOT DISTINCT FROM y.col1) ORDER BY x.col1;

SELECT x.col1, y.col1 FROM tbl_s_null AS x JOIN tbl_s_null AS y ON x.col0 = y.col0 AND x.col1 = y.col1 ORDER BY x.col1;

CREATE TABLE tbl_l_null (col0 INT[], col1 INT[]);

INSERT INTO tbl_l_null VALUES ([1], [0]), ([1], [1]), ([1], NULL), ([1], [NULL]);

SELECT x.col1, y.col1 FROM tbl_l_null AS x JOIN tbl_l_null AS y ON x.col0 = y.col0 AND (x.col1 IS DISTINCT FROM y.col1) ORDER BY x.col1, y.col1;

SELECT x.col1, y.col1 FROM tbl_l_null AS x JOIN tbl_l_null AS y ON x.col0 = y.col0 AND x.col1 <> y.col1 ORDER BY x.col1, y.col1;

SELECT x.col1, y.col1 FROM tbl_l_null AS x JOIN tbl_l_null AS y ON x.col0 = y.col0 AND (x.col1 IS NOT DISTINCT FROM y.col1) ORDER BY x.col1;

SELECT x.col1, y.col1 FROM tbl_l_null AS x JOIN tbl_l_null AS y ON x.col0 = y.col0 AND x.col1 = y.col1 ORDER BY x.col1;

CREATE TABLE tb1 AS SELECT range * 2 AS a FROM RANGE(0, 100);

CREATE TABLE tb2 AS SELECT range * 4 AS a FROM RANGE(0, 100);

INSERT INTO tb2 (SELECT NULL FROM RANGE(0, 20));

INSERT INTO tb1 (SELECT NULL FROM RANGE(0, 20));

SELECT COUNT(*) FROM tb1 AS lhs ANTI JOIN tb2 AS rhs ON (lhs.a IS DISTINCT FROM rhs.a);

CREATE OR REPLACE TABLE tb1 AS SELECT range * 2 AS a, range * 50 AS b FROM RANGE(0, 2);

CREATE OR REPLACE TABLE tb2 AS SELECT range * 4 AS a, range * 500 AS b FROM RANGE(0, 2);

INSERT INTO tb2 (SELECT NULL, NULL FROM RANGE(0, 2));

INSERT INTO tb1 (SELECT NULL, NULL FROM RANGE(0, 2));

SELECT lhs.a, rhs.a FROM tb1 AS lhs LEFT JOIN tb2 AS rhs ON (lhs.a IS DISTINCT FROM rhs.a) ORDER BY ALL;

SET default_null_order = 'nulls_first';

SET default_null_order = 'nulls_first';

SET default_null_order = 'nulls_first';

INSERT INTO test1 VALUES (11, 1), (12, 2), (13, 3);

INSERT INTO test1 VALUES (11, 1), (12, 2), (13, 3);

INSERT INTO test2 VALUES (1, 10), (2, 20), (3, 30), (1, 10), (2, 20), (3, 30), (1, 10), (2, 20), (3, 30), (1, 10), (2, 20), (3, 30), (1, 10), (2, 20), (3, 30);

SELECT a, test1.b, c FROM test1, test2 WHERE test1.b = test2.b ORDER BY a, test1.b, c;

DROP TABLE test1;

DROP TABLE test1;

DROP TABLE test1;

INSERT INTO test3 VALUES (-11, -1), (-12, -2), (13, 3);

INSERT INTO test3 VALUES (-11, -1), (-12, -2), (13, 3);

INSERT INTO test4 VALUES (-1, -10), (-2, -20), (3, 30), (-1, -10), (-2, -20), (3, 30), (-1, -10), (-2, -20), (3, 30), (-1, -10), (-2, -20), (3, 30), (-1, -10), (-2, -20), (3, 30);

SELECT a, test3.b, c FROM test3, test4 WHERE test3.b = test4.b ORDER BY a, test3.b, c;

SELECT a, test3.b, c FROM test3, test4 WHERE test3.b = test4.b ORDER BY a, test3.b, c;

INSERT INTO test5 VALUES (11, 1), (12, 2), (13, 3), (14, NULL), (NULL, 4);

INSERT INTO test5 VALUES (11, 1), (12, 2), (13, 3), (14, NULL), (NULL, 4);

INSERT INTO test6 VALUES (1, 10), (2, 20), (3, 30), (1, 10), (2, 20), (3, 30), (1, 10), (2, 20), (3, 30), (1, 10), (2, 20), (3, 30), (1, 10), (2, 20), (3, 30), (4, 40), (NULL, 30), (1, NULL);

SELECT a, test5.b, c FROM test5, test6 WHERE test5.b = test6.b ORDER BY a, test5.b, c;

SELECT a, test5.b, c FROM test5, test6 WHERE test5.b = test6.b ORDER BY a, test5.b, c;

INSERT INTO test7 VALUES (11, 1), (12, 2), (13, 3), (15, 5);

INSERT INTO test7 VALUES (11, 1), (12, 2), (13, 3), (15, 5);

INSERT INTO test8 VALUES (1, 10), (2, 20), (3, 30), (1, 10), (2, 20), (3, 30), (1, 10), (2, 20), (3, 30), (1, 10), (2, 20), (3, 30), (1, 10), (2, 20), (3, 30), (4, 40);

SELECT a, test7.b, c FROM test7, test8 WHERE test7.b = test8.b ORDER BY a, test7.b, c;

CREATE TABLE test9 AS SELECT range AS r FROM RANGE(0, 1026, 1);

CREATE TABLE test9 AS SELECT range AS r FROM RANGE(0, 1026, 1);

INSERT INTO test10 SELECT * FROM test9;
endloop;

SELECT test9.r, test10.r FROM test9, test10 WHERE test9.r = test10.r ORDER BY test9.r, test10.r;

CREATE TABLE test11 (a INT, b INT);

INSERT INTO test11 VALUES (1, 1), (50000, 2), (13, 3), (NULL, NULL), (NULL, 20000), (20000, NULL);

CREATE TABLE test12 (b INT, c INT);

INSERT INTO test12 VALUES (1, 10), (2, 20), (50000, 30), (NULL, NULL), (20000, NULL), (NULL, 20000);

SELECT a, test11.b, c FROM test11, test12 WHERE test11.b = test12.b ORDER BY a, test11.b, c;

CREATE TABLE cohort (cohort_definition_id INT, subject_id INT, cohort_start_date DATE, cohort_end_date DATE);

INSERT INTO cohort VALUES (100, 1, '2002-12-25', '2002-12-25'), (100, 1, '2007-03-01', '2007-03-01'), (100, 2, '2003-03-01', '2003-03-01'), (100, 2, '2005-03-01', '2005-03-01');

CREATE TABLE observation_period (observation_period_id INT, person_id INT, observation_period_start_date DATE, observation_period_end_date DATE, period_type_concept_id INT);

INSERT INTO observation_period VALUES (1, 1, '1963-12-31', '2010-01-01', 1), (2, 2, '1963-12-31', '2010-01-01', 2);

SELECT cohort_definition_id, subject_id, cohort_start_date, cohort_end_date, op1.observation_period_start_date, op1.observation_period_end_date, tc1.cohort_start_date >= op1.observation_period_start_date AS gt_test, tc1.cohort_start_date <= op1.observation_period_end_date AS lt_test FROM main.cohort AS tc1 INNER JOIN main.observation_period AS op1 ON tc1.subject_id = op1.person_id AND tc1.cohort_start_date >= op1.observation_period_start_date AND tc1.cohort_start_date <= op1.observation_period_end_date WHERE cohort_definition_id IN (100) ORDER BY subject_id, cohort_start_date;

PRAGMA enable_verification;

PRAGMA enable_verification;

BEGIN;

BEGIN;

BEGIN;

BEGIN;

BEGIN;

BEGIN;

BEGIN;

BEGIN;

BEGIN;

BEGIN;

BEGIN;

BEGIN;

PRAGMA enable_verification;

CREATE TABLE a AS SELECT i FROM RANGE(1, 2001, 1) AS t1(i);

SELECT COUNT(*) FROM a, (SELECT 2000 AS j) AS b WHERE i < j;

SELECT COUNT(*) FROM a, (SELECT 2000 AS j) AS b WHERE i <= j;

SELECT COUNT(*) FROM a, (SELECT 1 AS j) AS b WHERE i > j;

SELECT COUNT(*) FROM a, (SELECT 1 AS j) AS b WHERE i >= j;

PRAGMA enable_verification;

CREATE TABLE test (a INT, b INT);

INSERT INTO test VALUES (11, 1), (12, 2), (13, 3);

CREATE TABLE test2 (b INT, c INT);

INSERT INTO test2 VALUES (1, 10), (1, 20), (2, 30);

SELECT test.b, test2.b FROM test, test2 WHERE test.b < test2.b;

SELECT test.b, test2.b FROM test, test2 WHERE test.b <= test2.b ORDER BY 1, 2;

SELECT test.a, test.b, test2.b, test2.c FROM test, test2 WHERE test.a > test2.c AND test.b <= test2.b;

INSERT INTO test VALUES (11, NULL), (NULL, 1);

SELECT test.a, test.b, test2.b, test2.c FROM test, test2 WHERE test.a > test2.c AND test.b <= test2.b;

INSERT INTO test2 VALUES (1, NULL), (NULL, 10);

SELECT test.a, test.b, test2.b, test2.c FROM test, test2 WHERE test.a > test2.c AND test.b <= test2.b;

PRAGMA debug_force_external = TRUE;

CREATE TABLE issue4419 (x INT, y TEXT);

INSERT INTO issue4419 VALUES (1, 'sssssssssssssssssueufuheuooefef');

INSERT INTO issue4419 VALUES (2, 'sssssssssssssssssueufuheuooefesffff');

INSERT INTO issue4419 VALUES (2, 'sssssssssssssssssueufuheuooefesffffsssssssieiffih');

SELECT * FROM issue4419 AS t1 INNER JOIN issue4419 AS t2 ON t1.x < t2.x;

PRAGMA enable_verification;

CREATE TABLE test (a INT, b INT);

INSERT INTO test VALUES (11, 1), (12, 2), (13, 3);

CREATE TABLE test2 (b INT, c INT);

INSERT INTO test2 VALUES (1, 10), (1, 20), (2, 30);

SELECT test.b, test2.b FROM test, test2 WHERE test.b <> test2.b ORDER BY test.b, test2.b;

SELECT test.b, test2.b FROM test, test2 WHERE test.b <> test2.b AND test.b <> 1 AND test2.b <> 2 ORDER BY test.b, test2.b;

INSERT INTO test VALUES (NULL, NULL);

INSERT INTO test2 VALUES (NULL, NULL);

SELECT test.b, test2.b FROM test, test2 WHERE test.b <> test2.b ORDER BY test.b, test2.b;

SELECT test.b, test2.b FROM test, test2 WHERE test.b <> test2.b AND test.b <> 1 AND test2.b <> 2 ORDER BY test.b, test2.b;

CREATE TABLE a (i INT);

INSERT INTO a VALUES ('28579'), ('16098'), ('25281'), ('28877'), ('18048'), ('26820'), ('26971'), ('22812'), ('11757'), ('21851'), ('27752'), ('28354'), ('29843'), ('28828'), ('16668'), ('20534'), ('28222'), ('24244'), ('28877'), ('20150'), ('23451'), ('23683'), ('20419'), ('28048'), ('24244'), ('28605'), ('25752'), ('24466'), ('26557'), ('16098'), ('29454'), ('24854'), ('13298'), ('29584'), ('13394'), ('24843'), ('22477'), ('14593'), ('24244'), ('28722'), ('25124'), ('16668'), ('26787'), ('28877'), ('27752'), ('28482'), ('24408'), ('25752'), ('24136'), ('28222'), ('17683'), ('24244'), ('19275'), ('21087'), ('26594'), ('22293'), ('25281'), ('12898'), ('23451'), ('12898'), ('21757'), ('20965'), ('25709'), ('26614'), ('10399'), ('28773'), ('11933'), ('29584'), ('29003'), ('26871'), ('17746'), ('24092'), ('26192'), ('19310'), ('10965'), ('29275'), ('20191'), ('29101'), ('28059'), ('29584'), ('20399'), ('24338'), ('26192'), ('25124'), ('28605'), ('13003'), ('16668'), ('23511'), ('26534'), ('24107');

CREATE TABLE b (j INT);

INSERT INTO b VALUES ('31904'), ('31904'), ('31904'), ('31904'), ('35709'), ('31904'), ('31904'), ('35709'), ('31904'), ('31904'), ('31904'), ('31904');

SELECT COUNT(*) FROM a, b WHERE i <> j;

PRAGMA enable_verification;

CREATE TABLE test (b INT);

INSERT INTO test VALUES (1), (2);

CREATE TABLE test2 AS SELECT * FROM REPEAT(1, 10 * 1024) AS t1(b);

SELECT COUNT(*) FROM test2;

SELECT COUNT(*) FROM test INNER JOIN test2 ON test.b <> test2.b;

PRAGMA enable_verification;

CREATE TABLE t1 (a INT, b INT);

INSERT INTO t1 VALUES (1, 2);

CREATE TABLE t2 (b INT, c INT);

INSERT INTO t2 VALUES (2, 3);

CREATE TABLE t3 (c INT, d INT);

INSERT INTO t3 VALUES (3, 4);

SELECT * FROM t1 JOIN t2 USING (b) JOIN t3 USING (c) ORDER BY 1, 2, 3, 4;

SELECT * FROM t1 JOIN t2 USING (c);

SELECT * FROM t1 JOIN t2 USING (a);

DROP TABLE t1;

DROP TABLE t2;

DROP TABLE t3;

CREATE TABLE t1 (a INT, b INT, c INT);

INSERT INTO t1 VALUES (1, 2, 2);

CREATE TABLE t2 (b INT, c INT, d INT, e INT);

INSERT INTO t2 VALUES (2, 2, 3, 4);

CREATE TABLE t3 (d INT, e INT);

INSERT INTO t3 VALUES (3, 4);

SELECT * FROM t1 JOIN t2 USING (b, c) JOIN t3 USING (d, e);

PRAGMA enable_verification;

CREATE TABLE t1 (a INT, b INT, c INT);

INSERT INTO t1 VALUES (1, 2, 3);

CREATE TABLE t2 (a INT, b INT, c INT);

INSERT INTO t2 VALUES (1, 2, 3), (2, 2, 4), (1, 3, 4);

SELECT * FROM t1 JOIN t2 USING (a) JOIN t2 AS t2b USING (a) ORDER BY 1, 2, 3, 4, 5, 6, 7;

SELECT t2.a, t2.b, t2.c FROM t1 JOIN t2 USING (a) ORDER BY t2.b;

SELECT t2.a, t2.b, t2.c FROM t1 JOIN t2 USING (b) ORDER BY t2.c;

SELECT t2.a, t2.b, t2.c FROM t1 JOIN t2 USING (a, b);

SELECT t2.a, t2.b, t2.c FROM t1 JOIN t2 USING (a, b, c);

SELECT a + 1 FROM t1 JOIN t2 USING (a) ORDER BY a;

SELECT a + 1 FROM t1 JOIN t2 USING (a) ORDER BY a;

SELECT t2.a, t2.b, t2.c FROM t1 JOIN t2 USING ("");

SELECT t2.a, t2.b, t2.c FROM t1 JOIN t2 USING (d);

SELECT t2.a, t2.b, t2.c FROM t1 JOIN t2 USING (a);

SELECT * FROM t1 JOIN t2 USING (a, b);

SELECT * FROM t1 JOIN t2 USING (a) JOIN t2 AS t2b USING (b);

SELECT * FROM (VALUES (1)) AS tbl(i) JOIN ((VALUES (1)) AS tbl2(i) JOIN (VALUES (1)) AS tbl3(i) ON tbl2.i = tbl3.i) USING (i);

SELECT * FROM t1 JOIN t2 USING (a) JOIN t2 AS t2b USING (a) ORDER BY 1, 2, 3, 4, 5, 6, 7;

PRAGMA enable_verification;

SELECT * FROM (SELECT CAST(NULL AS TEXT) AS b) AS sq1, (SELECT 'asdf' AS b) AS sq2 WHERE sq1.b = sq2.b;

SELECT * FROM (SELECT 42 AS a, CAST(NULL AS TEXT) AS b) AS sq1, (SELECT 42 AS a, 'asdf' AS b) AS sq2 WHERE sq1.b <> sq2.b;

SELECT * FROM (SELECT 42 AS a, CAST(NULL AS TEXT) AS b) AS sq1, (SELECT 42 AS a, 'asdf' AS b) AS sq2 WHERE sq1.a = sq2.a AND sq1.b <> sq2.b;

SELECT * FROM (SELECT 42 AS a, 'asdf' AS b) AS sq2, (SELECT 42 AS a, CAST(NULL AS TEXT) AS b) AS sq1 WHERE sq1.b <> sq2.b;

SELECT * FROM (SELECT 42 AS a, 'asdf' AS b) AS sq2, (SELECT 42 AS a, CAST(NULL AS TEXT) AS b) AS sq1 WHERE sq1.a = sq2.a AND sq1.b <> sq2.b;

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

PRAGMA verify_external;

DROP TABLE IF EXISTS t1;

DROP TABLE IF EXISTS t2;

CREATE TABLE t1 (id TEXT);

CREATE TABLE t2 (id TEXT);

INSERT INTO t1 VALUES (NULL);

INSERT INTO t2 VALUES (1), (1);

SELECT * FROM t1 LEFT JOIN t2 ON t1.id = t2.id;

SELECT * FROM t1 LEFT JOIN t2 ON t1.id > t2.id;

SELECT * FROM t1 LEFT JOIN t2 ON t1.id <> t2.id;

INSERT INTO t2 VALUES (1);

SELECT * FROM t1 LEFT JOIN t2 ON t1.id = t2.id;

SELECT * FROM t1 LEFT JOIN t2 ON t1.id > t2.id;

SELECT * FROM t1 LEFT JOIN t2 ON t1.id <> t2.id;

INSERT INTO t2 VALUES (NULL), (NULL);

SELECT * FROM t1 LEFT JOIN t2 ON t1.id = t2.id;

SELECT * FROM t1 LEFT JOIN t2 ON t1.id > t2.id;

SELECT * FROM t1 LEFT JOIN t2 ON t1.id <> t2.id;

DROP TABLE IF EXISTS t1;

DROP TABLE IF EXISTS t2;

CREATE TABLE t1 (id TEXT);

CREATE TABLE t2 (id TEXT);

INSERT INTO t1 (id) VALUES (1), (1), (NULL);

INSERT INTO t2 (id) VALUES (1), (1), (1), (1), (1), (1);

SELECT * FROM t1 LEFT JOIN t2 ON t1.id = t2.id ORDER BY 1, 2;

INSERT INTO t2 (id) VALUES (1);

SELECT * FROM t1 LEFT JOIN t2 ON t1.id = t2.id ORDER BY 1, 2;

SET explain_output = 'optimized_only';

PRAGMA enable_verification;

CREATE OR REPLACE TABLE big_table AS SELECT i.range AS col1, CAST(RANDOM() * 1000 AS INT) AS col2 FROM RANGE(0, 100) AS i;

CREATE OR REPLACE TABLE single_col_table AS SELECT i.range AS col1 FROM RANGE(0, 50) AS i;

EXPLAIN SELECT *
FROM big_table c
LEFT OUTER JOIN single_col_table hd ON hd.col1=c.col1
AND (
FALSE
);

CREATE TABLE integers1 AS SELECT * FROM (VALUES (1), (2), (3)) AS tbl(i);

CREATE TABLE integers2 AS SELECT * FROM (VALUES (1, '1'), (2, '2'), (3, '3')) AS tbl(i, s);

CREATE TABLE integers3 AS SELECT * FROM (VALUES (1, '4'), (2, '5'), (3, '6')) AS tbl(i, s);

SELECT i1.i AS i1_i, i2.s, i3.i AS i3_i FROM integers1 AS i1 LEFT OUTER JOIN (integers2 AS i2 LEFT OUTER JOIN integers3 AS i3 ON i2.i = i3.i) ON FALSE;

PRAGMA enable_verification;

CREATE TABLE foo (ts TIMESTAMP);

CREATE TABLE bar (ts TIMESTAMP);

INSERT INTO foo VALUES ('2023-01-01 00:00:00');

INSERT INTO foo VALUES ('2023-01-01 00:00:01');

SELECT foo.ts AS foo, bar.ts AS bar FROM foo LEFT JOIN bar ON foo.ts = bar.ts;

SELECT foo.ts AS foo, bar.ts AS bar FROM foo LEFT JOIN bar ON foo.ts < bar.ts;

SELECT foo.ts AS foo, bar.ts AS bar FROM foo LEFT JOIN bar ON foo.ts > bar.ts;

CREATE TABLE a (a1 TEXT);

CREATE TABLE b (b1 TEXT, b2 TIMESTAMP, b3 TIMESTAMP, b4 TEXT, b5 TEXT, b6 TEXT, b7 TIMESTAMP, b8 TIMESTAMP, b9 TEXT, b10 TEXT, b11 TEXT, b12 TEXT, b13 TEXT, b14 TEXT);

INSERT INTO b VALUES (NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);

CREATE TABLE c (c1 TEXT);

CREATE TABLE d (d1 TEXT, d2 TEXT);

PRAGMA enable_verification;

WITH t AS (SELECT 1 AS r, [{'n': 1}, {'n': 2}] AS s UNION SELECT 2 AS r, [{'n': 3}, {'n': 4}] AS s) SELECT r, s1.s.n FROM t LEFT JOIN UNNEST(s) AS s1(s) ON TRUE ORDER BY 1, 2;

WITH t AS (SELECT 1 AS r, [1, 2, 3] AS a UNION SELECT 2 AS r, [4] AS a UNION SELECT 4 AS r, [] AS a) SELECT r, a.value FROM t LEFT JOIN UNNEST(a) AS a(value) ON TRUE ORDER BY 1, 2;

WITH t AS (SELECT 1 AS r, [1, 2, 3] AS a UNION SELECT 2 AS r, [4] AS a UNION SELECT 4 AS r, CAST([] AS INT[]) AS a) SELECT r, a.value FROM t LEFT JOIN UNNEST(a) AS a(value) ON TRUE AND a.value IS NULL ORDER BY 1, 2;

WITH t AS (SELECT 1 AS r, [1, 2, 3] AS a UNION SELECT 2 AS r, [4] AS a UNION SELECT 4 AS r, [] AS a) SELECT r, a.value FROM t LEFT JOIN UNNEST(a) AS a(value) ON (1 = 1) AND TRUE AND LIST_CONTAINS([2, 3], 2) ORDER BY 1, 2;

WITH t AS (SELECT 1 AS r, [{'n': 1}, {'n': 2}] AS s UNION SELECT 2 AS r, [{'n': 3}, {'n': 4}] AS s) SELECT r, s1.s.n FROM t LEFT JOIN UNNEST(s) AS s1(s) ON FALSE;

CREATE TABLE integers (i INT, j INT);

INSERT INTO integers VALUES (1, 2), (2, 3), (3, 4);

CREATE TABLE integers2 (k INT, l INT);

INSERT INTO integers2 VALUES (1, 10), (2, 20);

SELECT * FROM integers LEFT OUTER JOIN integers2 ON TRUE AND integers.i = integers2.k AND TRUE ORDER BY i;

SELECT * FROM integers LEFT OUTER JOIN integers2 ON TRUE AND integers.i = integers2.k AND FALSE ORDER BY i;

SELECT * FROM integers LEFT OUTER JOIN integers2 ON TRUE ORDER BY i;

PRAGMA enable_verification;

PRAGMA verify_external;

CREATE TABLE integers (i INT, j INT);

INSERT INTO integers VALUES (1, 2), (2, 3), (3, 4);

CREATE TABLE integers2 (k INT, l INT);

INSERT INTO integers2 VALUES (1, 10), (2, 20);

SELECT * FROM integers LEFT OUTER JOIN integers2 ON integers.i = integers2.k ORDER BY i;

SELECT * FROM integers2 RIGHT OUTER JOIN integers ON integers.i = integers2.k ORDER BY i;

SELECT * FROM integers LEFT OUTER JOIN integers2 ON integers.i = integers2.k WHERE NOT k IS NULL ORDER BY i;

SELECT * FROM integers LEFT OUTER JOIN integers2 ON integers.i = integers2.k AND NOT integers2.k IS NULL ORDER BY i;

SELECT * FROM integers LEFT OUTER JOIN integers2 ON i = 1 ORDER BY i, k;

SELECT * FROM integers LEFT OUTER JOIN integers2 ON 1 = 1 ORDER BY i, k;

SELECT * FROM integers LEFT OUTER JOIN (SELECT * FROM integers2 WHERE 1 <> 1) AS tbl2 ON 1 = 2 ORDER BY i;

SELECT * FROM integers LEFT OUTER JOIN integers2 ON 1 = 2 ORDER BY i;

SELECT * FROM integers LEFT OUTER JOIN integers2 ON NULL <> NULL ORDER BY i;

SELECT * FROM integers LEFT OUTER JOIN integers2 ON i = 1 ORDER BY i, k;

SELECT * FROM integers LEFT OUTER JOIN integers2 ON l = 20 ORDER BY i, k;

SELECT * FROM integers LEFT OUTER JOIN integers2 ON l > 0 ORDER BY i, k;

SELECT * FROM integers LEFT OUTER JOIN integers2 ON i = 1 OR l = 20 ORDER BY i, k;

SELECT * FROM integers LEFT OUTER JOIN integers2 ON i = 4 OR l = 17 ORDER BY i;

SELECT * FROM integers LEFT OUTER JOIN integers2 ON i + l = 21 ORDER BY i;

SELECT * FROM integers LEFT OUTER JOIN integers2 ON i + l > 12 ORDER BY i, k;

SELECT * FROM integers LEFT OUTER JOIN integers2 ON integers.i < integers2.k WHERE integers.i <= 2 ORDER BY i;

SELECT * FROM integers LEFT OUTER JOIN integers2 ON integers.i < integers2.k AND integers.i < integers2.l WHERE integers.i <= 2 ORDER BY i;

SELECT * FROM integers LEFT OUTER JOIN (SELECT * FROM integers2 WHERE k = 100) AS integers2 ON integers.i < integers2.k ORDER BY i;

SELECT * FROM (VALUES (1), (2)) AS t1(i) LEFT JOIN (VALUES (2), (3)) AS t2(i) ON t1.i = t2.i AND t1.i + t2.i = 4 ORDER BY 1, 2;

CREATE TABLE IF NOT EXISTS "names" (origin TEXT);

INSERT INTO "names" VALUES ('DFW'), ('ATL'), ('MSY'), ('ANC'), ('LAS'), ('SEA'), ('DTW'), ('LAX'), ('JFK'), ('FLL'), ('TPA'), ('SAN'), ('SLC'), ('MSP'), ('IAH'), ('SFO'), ('MCO'), ('DEN'), ('RDU'), ('BOS'), ('BHM'), ('LGA'), ('RSW'), ('BNA'), ('SNA'), ('DCA'), ('PHX'), ('MSN'), ('PHL'), ('MIA'), ('PBI'), ('BDL'), ('TLH'), ('SJU'), ('MCI'), ('TRI'), ('STT'), ('GRB'), ('PIT'), ('ORD'), ('SAV'), ('SDF'), ('BWI'), ('PDX'), ('SJC'), ('CHS'), ('JAC'), ('ORF'), ('CLE'), ('EWR'), ('OAK'), ('VPS'), ('CLT'), ('HSV'), ('GRR'), ('CAE'), ('MTJ'), ('GEG'), ('BIL'), ('SMF'), ('PHF'), ('JAN'), ('MDW'), ('MKE'), ('ATW'), ('MOB'), ('CMH'), ('CVG'), ('STL'), ('MLB'), ('SAT'), ('HNL'), ('ELP'), ('JAX'), ('SRQ'), ('OKC'), ('ROC'), ('LIT'), ('FNT'), ('IND'), ('MEM'), ('IAD'), ('OMA'), ('AUS'), ('GSP'), ('ONT'), ('BZN'), ('GSO'), ('SHV'), ('ILM'), ('PNS'), ('DAB'), ('CID'), ('EYW'), ('BUF'), ('DAY'), ('CAK'), ('ABQ'), ('RIC'), ('DAL'), ('MDT'), ('ECP'), ('TUS'), ('PWM'), ('GPT'), ('PVD'), ('KOA'), ('AGS'), ('TYS'), ('BOI'), ('FSD'), ('OGG'), ('TUL'), ('HDN'), ('HOU'), ('MYR'), ('DSM'), ('LFT'), ('CRW'), ('MHT'), ('PSP'), ('FAY'), ('ABE'), ('CHO'), ('SYR'), ('ALB'), ('RNO'), ('COS'), ('OAJ'), ('MSO'), ('ROA'), ('FAR'), ('LIH'), ('EGE'), ('ICT'), ('XNA'), ('BTR'), ('SGF'), ('AVL'), ('BIS'), ('STX'), ('LEX'), ('MFE'), ('LBB'), ('AMA'), ('FAT'), ('CRP'), ('GUC'), ('AEX'), ('ABI'), ('TYR'), ('LAW'), ('MLU'), ('LCH'), ('SAF'), ('GRK'), ('LRD'), ('GRI'), ('MAF'), ('MGM'), ('GCK'), ('SPS'), ('SPI'), ('FSM'), ('TXK'), ('CLL'), ('ACT'), ('ROW'), ('MEI'), ('PIB'), ('BTV'), ('CWA'), ('ERI'), ('EVV'), ('BRO'), ('HRL'), ('MLI'), ('LAN'), ('HOB'), ('SCE'), ('FWA'), ('AVP'), ('LNK'), ('AZO'), ('TVC'), ('PIA'), ('RST'), ('BMI'), ('DHN'), ('GNV'), ('ISP'), ('LGB'), ('BUR'), ('PSC'), ('SWF'), ('FCA'), ('GTF'), ('IDA'), ('ISN'), ('GFK'), ('MBS'), ('LSE'), ('ASE'), ('CMX'), ('EAU'), ('SBP'), ('SBA'), ('RKS'), ('GCC'), ('MKG'), ('MRY'), ('PAH'), ('DLH'), ('DVL'), ('JMS'), ('OTH'), ('LAR'), ('HYS'), ('SGU'), ('HLN'), ('MOT'), ('RDD'), ('GJT'), ('ACV'), ('MFR'), ('RDM'), ('MMH'), ('BFL'), ('SUN'), ('EUG'), ('RAP'), ('LWS'), ('COD'), ('TWF'), ('IMT'), ('APN'), ('ESC'), ('BJI'), ('CPR'), ('BTM'), ('ITH'), ('CIU'), ('EKO'), ('MQT'), ('INL'), ('BGM'), ('PIH'), ('ABR'), ('HIB'), ('CDC'), ('RHI'), ('BRD'), ('YUM'), ('FLG'), ('IFP'), ('STS'), ('BQN'), ('ORH'), ('ITO'), ('PPG'), ('ACY'), ('LBE'), ('IAG'), ('PBG'), ('CHA'), ('DRO'), ('HPN'), ('SBN'), ('PLN'), ('TOL'), ('COU'), ('MHK'), ('PSE'), ('CSG'), ('ELM'), ('BQK'), ('ABY'), ('VLD'), ('EWN'), ('TTN'), ('PGD'), ('WYS'), ('SIT'), ('KTN'), ('BGR'), ('FAI'), ('JNU'), ('ACK'), ('MVY'), ('ADQ'), ('BET'), ('SCC'), ('BRW'), ('CDV'), ('YAK'), ('PSG'), ('WRG'), ('OME'), ('OTZ'), ('ADK'), ('GUM'), ('ALO'), ('GTR'), ('BLI'), ('SJT'), ('BPT'), ('GGG'), ('JLN'), ('UST'), ('HYA'), ('SUX'), ('GST'), ('AKN'), ('DLG'), ('TKI');

INSERT INTO "names" VALUES ('DFW'), ('ATL'), ('MSY'), ('ANC'), ('LAS'), ('SEA'), ('DTW'), ('LAX'), ('JFK'), ('FLL'), ('TPA'), ('SAN'), ('SLC'), ('MSP'), ('IAH'), ('SFO'), ('MCO'), ('DEN'), ('RDU'), ('BOS'), ('BHM'), ('LGA'), ('RSW'), ('BNA'), ('SNA'), ('DCA'), ('PHX'), ('MSN'), ('PHL'), ('MIA'), ('PBI'), ('BDL'), ('TLH'), ('SJU'), ('MCI'), ('TRI'), ('STT'), ('GRB'), ('PIT'), ('ORD'), ('SAV'), ('SDF'), ('BWI'), ('PDX'), ('SJC'), ('CHS'), ('JAC'), ('ORF'), ('CLE'), ('EWR'), ('OAK'), ('VPS'), ('CLT'), ('HSV'), ('GRR'), ('CAE'), ('MTJ'), ('GEG'), ('BIL'), ('SMF'), ('PHF'), ('JAN'), ('MDW'), ('MKE'), ('ATW'), ('MOB'), ('CMH'), ('CVG'), ('STL'), ('MLB'), ('SAT'), ('HNL'), ('ELP'), ('JAX'), ('SRQ'), ('OKC'), ('ROC'), ('LIT'), ('FNT'), ('IND'), ('MEM'), ('IAD'), ('OMA'), ('AUS'), ('GSP'), ('ONT'), ('BZN'), ('GSO'), ('SHV'), ('ILM'), ('PNS'), ('DAB'), ('CID'), ('EYW'), ('BUF'), ('DAY'), ('CAK'), ('ABQ'), ('RIC'), ('DAL'), ('MDT'), ('ECP'), ('TUS'), ('PWM'), ('GPT'), ('PVD'), ('KOA'), ('AGS'), ('TYS'), ('BOI'), ('FSD'), ('OGG'), ('TUL'), ('HDN'), ('HOU'), ('MYR'), ('DSM'), ('LFT'), ('CRW'), ('MHT'), ('PSP'), ('FAY'), ('ABE'), ('CHO'), ('SYR'), ('ALB'), ('RNO'), ('COS'), ('OAJ'), ('MSO'), ('ROA'), ('FAR'), ('LIH'), ('EGE'), ('ICT'), ('XNA'), ('BTR'), ('SGF'), ('AVL'), ('BIS'), ('STX'), ('LEX'), ('MFE'), ('LBB'), ('AMA'), ('FAT'), ('CRP'), ('GUC'), ('AEX'), ('ABI'), ('TYR'), ('LAW'), ('MLU'), ('LCH'), ('SAF'), ('GRK'), ('LRD'), ('GRI'), ('MAF'), ('MGM'), ('GCK'), ('SPS'), ('SPI'), ('FSM'), ('TXK'), ('CLL'), ('ACT'), ('ROW'), ('MEI'), ('PIB'), ('BTV'), ('CWA'), ('ERI'), ('EVV'), ('BRO'), ('HRL'), ('MLI'), ('LAN'), ('HOB'), ('SCE'), ('FWA'), ('AVP'), ('LNK'), ('AZO'), ('TVC'), ('PIA'), ('RST'), ('BMI'), ('DHN'), ('GNV'), ('ISP'), ('LGB'), ('BUR'), ('PSC'), ('SWF'), ('FCA'), ('GTF'), ('IDA'), ('ISN'), ('GFK'), ('MBS'), ('LSE'), ('ASE'), ('CMX'), ('EAU'), ('SBP'), ('SBA'), ('RKS'), ('GCC'), ('MKG'), ('MRY'), ('PAH'), ('DLH'), ('DVL'), ('JMS'), ('OTH'), ('LAR'), ('HYS'), ('SGU'), ('HLN'), ('MOT'), ('RDD'), ('GJT'), ('ACV'), ('MFR'), ('RDM'), ('MMH'), ('BFL'), ('SUN'), ('EUG'), ('RAP'), ('LWS'), ('COD'), ('TWF'), ('IMT'), ('APN'), ('ESC'), ('BJI'), ('CPR'), ('BTM'), ('ITH'), ('CIU'), ('EKO'), ('MQT'), ('INL'), ('BGM'), ('PIH'), ('ABR'), ('HIB'), ('CDC'), ('RHI'), ('BRD'), ('YUM'), ('FLG'), ('IFP'), ('STS'), ('BQN'), ('ORH'), ('ITO'), ('PPG'), ('ACY'), ('LBE'), ('IAG'), ('PBG'), ('CHA'), ('DRO'), ('HPN'), ('SBN'), ('PLN'), ('TOL'), ('COU'), ('MHK'), ('PSE'), ('CSG'), ('ELM'), ('BQK'), ('ABY'), ('VLD'), ('EWN'), ('TTN'), ('PGD'), ('WYS'), ('SIT'), ('KTN'), ('BGR'), ('FAI'), ('JNU'), ('ACK'), ('MVY'), ('ADQ'), ('BET'), ('SCC'), ('BRW'), ('CDV'), ('YAK'), ('PSG'), ('WRG'), ('OME'), ('OTZ'), ('ADK'), ('GUM'), ('ALO'), ('GTR'), ('BLI'), ('SJT'), ('BPT'), ('GGG'), ('JLN'), ('UST'), ('HYA'), ('SUX'), ('GST'), ('AKN'), ('DLG'), ('TKI');

SELECT * FROM ontime AS ontime_outer WHERE NOT (depdelay < ANY (SELECT depdelay FROM ontime WHERE ontime.origin = ontime_outer.origin AND ontime.dest = ontime_outer.dest));

PRAGMA enable_verification;

PRAGMA enable_verification;

BEGIN;

BEGIN;

BEGIN;

BEGIN;

BEGIN;

BEGIN;

BEGIN;

BEGIN;

BEGIN;

BEGIN;

BEGIN;

BEGIN;

BEGIN;

BEGIN;

BEGIN;

BEGIN;

BEGIN;

PRAGMA enable_verification;

CREATE TABLE t1 (a INT, b INT);

INSERT INTO t1 VALUES (1, 2);

CREATE TABLE t2 (a INT, c INT);

INSERT INTO t2 VALUES (1, 3), (2, 4);

SELECT * FROM t1 NATURAL JOIN t2;

SELECT t1.a, t1.b, t2.c FROM t1 NATURAL JOIN t2;

SELECT t1.a, t1.b, t2.c FROM t1 NATURAL JOIN t2 ORDER BY t2.a;

CREATE TABLE t3 (a INT, b INT, c INT);

INSERT INTO t3 VALUES (1, 2, 3);

SELECT * FROM t1 NATURAL JOIN t3;

SELECT * FROM t3 NATURAL JOIN t2;

SELECT * FROM t1 NATURAL JOIN t2 NATURAL JOIN t3;

SELECT * FROM (VALUES (1)) AS tbl(a) NATURAL JOIN (VALUES (1), (2)) AS tbl2(b) ORDER BY 1, 2;

SELECT * FROM (VALUES (1)) AS tbl(a) NATURAL JOIN (VALUES (1)) AS tbl2(a) NATURAL JOIN (VALUES (1)) AS tbl3(a) NATURAL JOIN (VALUES (1)) AS tbl4(a) NATURAL JOIN (VALUES (1)) AS tbl5(a);

SELECT * FROM (SELECT 42) AS tbl(a) NATURAL JOIN (SELECT 42) AS tbl2(a);

SELECT (SELECT * FROM (SELECT 42) AS tbl(a) NATURAL JOIN (SELECT 42) AS tbl2(a));

SELECT * FROM (SELECT 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52) AS tbl1(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11) NATURAL JOIN (SELECT 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52) AS tbl2(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);

CREATE TABLE sqlancer_t0 (c0 DOUBLE, c1 DOUBLE);

INSERT INTO sqlancer_t0 VALUES (0.000000, -1570504255.000000), (0.000000, -1570504255.000000), (0.000000, -1570504255.000000), (0.000000, -1570504255.000000), (0.000000, 1.000000), (0.000000, 0.543647), (0.000000, NULL), (0.000000, 1.000000), (0.000000, 1.000000), (0.000000, 0.000000), (0.000000, 1617540830.000000), (0.000000, NULL), (0.000000, NULL), (0.000000, NULL), (0.000000, 0.497659), (0.000000, -1367407567.000000), (0.000000, NULL), (0.000000, NULL), (0.000000, NULL), (0.000000, NULL), (0.000000, NULL), (0.000000, -547966124.000000), (0.000000, NULL), (0.000000, -1417028911.000000), (0.000000, 277394703.000000), (0.000000, NULL), (0.000000, NULL), (0.000000, NULL), (0.000000, NULL), (0.000000, NULL);

CREATE VIEW sqlancer_v0 (c0, c1) AS SELECT sqlancer_t0.c0, ((sqlancer_t0.rowid) // (-1694294358)) FROM sqlancer_t0 ORDER BY CAST('1970-01-08 16:19:01' AS TIMESTAMP) ASC;

SELECT DISTINCT sqlancer_v0.c1, sqlancer_t0.rowid FROM sqlancer_v0 NATURAL FULL JOIN sqlancer_t0 ORDER BY 2 ASC;

SELECT DISTINCT sqlancer_v0.c1, sqlancer_t0.rowid FROM sqlancer_v0 NATURAL FULL JOIN sqlancer_t0 WHERE sqlancer_t0.c0 UNION SELECT DISTINCT sqlancer_v0.c1, sqlancer_t0.rowid FROM sqlancer_v0 NATURAL FULL JOIN sqlancer_t0 WHERE (NOT sqlancer_t0.c0) UNION SELECT DISTINCT sqlancer_v0.c1, sqlancer_t0.rowid FROM sqlancer_v0 NATURAL FULL JOIN sqlancer_t0 WHERE ((sqlancer_t0.c0) IS NULL) ORDER BY 2 ASC;

SELECT (SELECT * FROM (SELECT 42) AS tbl(a) NATURAL JOIN (SELECT 42) AS tbl(a));

DROP TABLE t1;

CREATE TABLE t0 (c0 DATE, c1 DATE DEFAULT ('0.5868720116119102'), c2 TINYINT, PRIMARY KEY (c1, c2, c0));

CREATE TABLE t1 (c0 TIMESTAMP, c1 DATE DEFAULT (CAST('1970-01-11 02:37:59' AS TIMESTAMP)), PRIMARY KEY (c0));

CREATE VIEW v0 (c0) AS SELECT FALSE FROM t1, t0 HAVING 1689380428;

SELECT COUNT(t1.rowid) FROM t1, v0 NATURAL RIGHT JOIN t0;

SELECT COUNT(t1.rowid) FROM t1, v0 RIGHT JOIN t0 ON v0.c0 = t0.c0;

SELECT COUNT(t1.rowid) FROM t1, v0 RIGHT JOIN t0 ON t1.c1 = t0.c1 AND v0.c0 = t0.c0;

SELECT * FROM (VALUES (1)) AS t1(i) JOIN (VALUES (1)) AS t2(i) ON (t1.i = t2.i) NATURAL JOIN (VALUES (1)) AS t3(i);

PRAGMA disable_verification;

SELECT * FROM (VALUES (1)) AS t1(i) NATURAL JOIN ((VALUES (1)) AS t2(i) JOIN (VALUES (1)) AS t3(i) ON (t2.i = t3.i));

PRAGMA enable_verification;

CREATE TABLE two (a INT, b INT);

INSERT INTO two VALUES (11, 1), (12, 2);

CREATE TABLE three AS SELECT * FROM (VALUES (11, 1), (12, 2), (13, 3)) AS tbl(a, b);

CREATE TABLE threek AS SELECT * FROM GENERATE_SERIES(0, 3001) AS tbl(id);

SELECT * FROM two AS t1 POSITIONAL JOIN two AS t2;

SELECT * FROM threek AS t1 POSITIONAL JOIN threek AS t2 WHERE t1.id <> t2.id;

SELECT * FROM two AS t1 POSITIONAL JOIN three AS t2;

SELECT * FROM three AS t1 POSITIONAL JOIN two AS t2;

SELECT COUNT(a), COUNT(id) FROM three POSITIONAL JOIN threek;

SELECT COUNT(id), COUNT(a) FROM threek POSITIONAL JOIN three;

SELECT * FROM (SELECT * FROM two WHERE a % 2 = 0) AS t1 POSITIONAL JOIN (SELECT * FROM two WHERE a % 2 = 1) AS t2;

SELECT * FROM (SELECT * FROM threek WHERE id % 2 = 0) AS t1 POSITIONAL JOIN (SELECT * FROM threek WHERE id % 2 = 1) AS t2 WHERE t1.id + 1 <> t2.id;

SELECT * FROM (SELECT * FROM three WHERE a % 2 = 1) AS t1 POSITIONAL JOIN (SELECT * FROM two WHERE a % 2 = 0) AS t2;

SELECT * FROM (SELECT * FROM two WHERE a % 2 = 0) AS t1 POSITIONAL JOIN (SELECT * FROM three WHERE a % 2 = 1) AS t2;

SELECT COUNT(t1.id), COUNT(t2.id) FROM (SELECT * FROM threek WHERE id % 2 = 0) AS t1 POSITIONAL JOIN (SELECT * FROM threek WHERE id % 3 = 0) AS t2;

SELECT COUNT(t1.id), COUNT(t2.id) FROM (SELECT * FROM threek WHERE id % 3 = 0) AS t2 POSITIONAL JOIN (SELECT * FROM threek WHERE id % 2 = 0) AS t1;

PRAGMA enable_verification;

PRAGMA enable_verification;

INSERT INTO unit2 SELECT i, 20 FROM RANGE(0, 1000) AS t(i);

SELECT * FROM unit2 JOIN (VALUES (2000)) AS t(total_profit) USING (total_profit);

SELECT * FROM unit2 JOIN (VALUES (2000)) AS t(total_profit) ON (t.total_profit = unit2.total_profit AND t.total_profit = unit2.also_total_profit);

PRAGMA enable_verification;

CREATE TABLE integers AS SELECT CASE WHEN i % 2 = 0 THEN NULL ELSE i END AS i FROM RANGE(0, 1000) AS t(i);

SELECT * FROM integers JOIN (SELECT MAX(i) AS max_i FROM integers) ON i + 2 = max_i;

SELECT * FROM integers JOIN (SELECT MAX(i) AS max_i FROM integers) ON i = max_i - 2;

SELECT * FROM integers JOIN (SELECT MAX(i) AS max_i FROM integers) ON i = max_i - 2;

SELECT * FROM integers JOIN (SELECT MAX(i) AS max_i FROM integers) ON i = max_i - 2;

SELECT * FROM integers JOIN (SELECT MAX(i) AS max_i FROM integers) ON i = max_i - 2;

SELECT * FROM integers JOIN (SELECT MAX(i) AS max_i FROM integers) ON i = max_i - 2;

SELECT * FROM integers JOIN (SELECT MAX(i) AS max_i FROM integers) ON i = max_i - 2;

SELECT * FROM (SELECT i + 2 AS i, i AS k FROM integers) JOIN (SELECT MAX(i) AS max_i FROM integers) ON i = max_i;

SELECT * FROM (SELECT i FROM integers GROUP BY i) JOIN (SELECT MAX(i) AS max_i FROM integers) ON i = max_i;

SELECT * FROM (SELECT (1000 - i) AS grp, SUM(i) AS i FROM integers GROUP BY grp) JOIN (SELECT MAX(i) AS max_i FROM integers) ON i = max_i;

SELECT * FROM (SELECT DISTINCT i FROM integers) JOIN (SELECT MAX(i) AS max_i FROM integers) ON i = max_i;

SELECT * FROM (SELECT i + 2 AS i, i AS k, ROW_NUMBER() OVER () AS rownum FROM integers) JOIN (SELECT MAX(i) AS max_i FROM integers) ON i = max_i;

CREATE TABLE lists AS SELECT CASE WHEN i % 2 = 0 THEN NULL ELSE i END AS i, [500 + i, 500 + i + 1, 500 + i + 2] AS l FROM RANGE(0, 1000) AS t(i);

SELECT * FROM (SELECT i, UNNEST(l) AS l FROM lists) JOIN (SELECT MAX(i) AS max_i FROM lists) ON i = max_i;

SELECT * FROM (SELECT i AS k, UNNEST(l) AS i FROM lists) JOIN (SELECT MAX(i) AS max_i FROM lists) ON i = max_i;

SELECT * FROM (SELECT i AS k, UNNEST(l) AS i FROM lists) JOIN (SELECT MAX(i) AS max_i FROM lists) ON i = max_i;

SELECT * FROM (SELECT i AS k, UNNEST(l) AS i FROM lists) JOIN (SELECT MAX(i) AS max_i FROM lists) ON i = max_i;

SELECT * FROM (SELECT i AS k, UNNEST(l) AS i FROM lists) JOIN (SELECT MAX(i) AS max_i FROM lists) ON i = max_i;

SELECT * FROM (SELECT i AS k, UNNEST(l) AS i FROM lists) JOIN (SELECT MAX(i) AS max_i FROM lists) ON i = max_i;

SELECT * FROM (SELECT i AS k, UNNEST(l) AS i FROM lists) JOIN (SELECT MAX(i) AS max_i FROM lists) ON i = max_i;

SELECT * FROM ((SELECT 999 AS i) EXCEPT SELECT * FROM integers) JOIN (SELECT MAX(i) AS max_i FROM integers) ON i = max_i;

CALL dbgen(sf=1);

SELECT l_orderkey, l_comment FROM lineitem WHERE l_orderkey = (SELECT MAX(l_orderkey) FROM lineitem) ORDER BY ALL;

SELECT l_orderkey, l_linenumber, l_comment FROM lineitem WHERE l_linenumber = (SELECT MAX(l_linenumber) FROM lineitem) AND l_orderkey = (SELECT MAX(l_orderkey) FROM lineitem WHERE l_linenumber = 7);

SELECT COUNT(*) FROM lineitem WHERE l_linenumber = (SELECT MAX(l_linenumber) FROM lineitem) AND l_suppkey = (SELECT MAX(s_suppkey) FROM supplier);

SELECT l_orderkey, o_orderpriority, l_suppkey, l_linenumber FROM lineitem JOIN orders ON (l_orderkey = o_orderkey) WHERE l_linenumber = (SELECT MAX(l_linenumber) FROM lineitem) AND l_suppkey = (SELECT MAX(s_suppkey) FROM supplier) AND o_orderpriority = (SELECT MAX(o_orderpriority) FROM orders) ORDER BY ALL;

PRAGMA enable_verification;

CREATE TABLE integers AS SELECT CASE WHEN i % 2 = 0 THEN NULL ELSE i END AS i FROM RANGE(0, 1000) AS t(i);

SELECT * FROM integers JOIN (SELECT MAX(i) AS max_i FROM integers) ON i = max_i;

SELECT * FROM integers RIGHT JOIN (SELECT MAX(i) AS max_i FROM integers) ON i = max_i;

SELECT COUNT(*), NOT COUNT(max_i) IS NULL FROM (SELECT * FROM integers LEFT JOIN (SELECT MAX(i) AS max_i FROM integers) ON i = max_i);

SELECT COUNT(*), NOT COUNT(max_i) IS NULL FROM (SELECT * FROM integers FULL OUTER JOIN (SELECT MAX(i) AS max_i FROM integers) ON i = max_i);

SELECT * FROM integers WHERE i = (SELECT MAX(i) FROM integers);

SELECT * FROM integers WHERE i IN (SELECT MAX(i) FROM integers);

SELECT * FROM integers WHERE i IN (997, 999);

SELECT COUNT(*), SUM(CASE WHEN in_result THEN 1 ELSE 0 END) FROM (SELECT i IN (SELECT MAX(i) FROM integers) AS in_result FROM integers);

PRAGMA enable_verification;

CREATE TABLE tbl AS SELECT CASE WHEN i % 2 = 0 THEN NULL ELSE i END AS i, CONCAT('thisisastring', i) AS s FROM RANGE(0, 1000) AS t(i);

SELECT s, i FROM tbl WHERE i > 10 AND s = (SELECT MAX(s) FROM tbl);

SELECT s, i FROM tbl JOIN (VALUES (999, 'thisisastring999')) AS t(i, s) USING (s, i);

SELECT s, i FROM tbl JOIN (VALUES (999, 'thisisastring999')) AS t(i, s) USING (s, i);

SELECT COUNT(*) FROM all_types WHERE "${col}" = (SELECT MIN("${col}") FROM all_types);

PRAGMA enable_verification;

CREATE TABLE bigtbl AS SELECT i % 2 AS small_key, i % 10 AS medium_key, i AS val FROM RANGE(0, 10000) AS t(i) ORDER BY small_key, medium_key;

CREATE TABLE smalltbl AS SELECT i AS small_key FROM RANGE(0, 2) AS t(i);

CREATE TABLE mediumtbl AS SELECT i AS medium_key FROM RANGE(0, 10) AS t(i);

SELECT COUNT(*) FROM bigtbl JOIN smalltbl USING (small_key) JOIN mediumtbl USING (medium_key);

SELECT COUNT(*) FROM bigtbl JOIN smalltbl USING (small_key) JOIN mediumtbl USING (medium_key);

SELECT COUNT(*) FROM bigtbl JOIN smalltbl USING (small_key) JOIN mediumtbl USING (medium_key);

SELECT COUNT(*) FROM bigtbl JOIN smalltbl USING (small_key) JOIN mediumtbl USING (medium_key);

SELECT COUNT(*) FROM bigtbl JOIN smalltbl USING (small_key) JOIN mediumtbl USING (medium_key);

PRAGMA enable_verification;

PRAGMA verify_external;

CREATE TABLE t0 (c0 DATE, PRIMARY KEY (c0));

CREATE TABLE t1 (c0 TEXT DEFAULT (CAST('1969-12-10' AS DATE)), c1 DOUBLE DEFAULT (0.16338108651823613));

INSERT INTO t1 (c1) VALUES (TRUE);

INSERT INTO t1 (c0) VALUES (CAST('1969-12-13 07:02:08' AS TIMESTAMP));

INSERT INTO t0 (c0) VALUES (CAST('1970-01-01' AS DATE)), (CAST('1969-12-13 17:49:43' AS TIMESTAMP));

SELECT MAX('a') FROM t0 JOIN t1 ON ((t0.c0) <= (CAST(((NULL) - (t1.rowid)) AS DATE)));

SELECT MAX('a') FROM t0 RIGHT JOIN t1 ON ((t0.c0) <= (CAST(((NULL) - (t1.rowid)) AS DATE)));

SELECT MAX(agg0) FROM (SELECT MAX('a') AS agg0 FROM t0 RIGHT JOIN t1 ON ((t0.c0) <= (((NULL) - (t1.rowid)))) WHERE t1.c0 UNION ALL SELECT MAX('a') AS agg0 FROM t0 RIGHT JOIN t1 ON ((t0.c0) <= (((NULL) - (t1.rowid)))) WHERE (NOT t1.c0) UNION ALL SELECT MAX('a') AS agg0 FROM t0 RIGHT JOIN t1 ON ((t0.c0) <= (((NULL) - (t1.rowid)))) WHERE ((t1.c0) IS NULL)) AS asdf;

PRAGMA enable_verification;

PRAGMA verify_external;

CREATE TABLE integers (i INT, j INT);

INSERT INTO integers VALUES (1, 2), (2, 3), (3, 4);

CREATE TABLE integers2 (k INT, l INT);

INSERT INTO integers2 VALUES (1, 10), (2, 20);

SELECT integers.*, integers2.* FROM integers2 RIGHT OUTER JOIN integers ON integers.i = integers2.k ORDER BY i;

SELECT integers.*, integers2.* FROM integers2 RIGHT OUTER JOIN integers ON integers.i = integers2.k WHERE NOT k IS NULL ORDER BY i;

SELECT integers.*, integers2.* FROM integers2 RIGHT OUTER JOIN integers ON integers.i = integers2.k AND NOT integers2.k IS NULL ORDER BY i;

SELECT integers.*, integers2.* FROM integers2 RIGHT OUTER JOIN integers ON i = 1 ORDER BY i, k;

SELECT integers.*, integers2.* FROM integers2 RIGHT OUTER JOIN integers ON 1 = 1 ORDER BY i, k;

SELECT integers.*, integers2.* FROM integers2 RIGHT OUTER JOIN integers ON 1 = 2 ORDER BY i;

SELECT integers.*, integers2.* FROM integers2 RIGHT OUTER JOIN integers ON NULL <> NULL ORDER BY i;

SELECT integers.*, integers2.* FROM integers2 RIGHT OUTER JOIN integers ON i = 1 ORDER BY i, k;

SELECT integers.*, integers2.* FROM integers2 RIGHT OUTER JOIN integers ON l = 20 ORDER BY i, k;

SELECT integers.*, integers2.* FROM integers2 RIGHT OUTER JOIN integers ON l > 0 ORDER BY i, k;

SELECT integers.*, integers2.* FROM integers2 RIGHT OUTER JOIN integers ON i = 1 OR l = 20 ORDER BY i, k;

SELECT integers.*, integers2.* FROM integers2 RIGHT OUTER JOIN integers ON i = 4 OR l = 17 ORDER BY i;

SELECT integers.*, integers2.* FROM integers2 RIGHT OUTER JOIN integers ON i + l = 21 ORDER BY i;

SELECT integers.*, integers2.* FROM integers2 RIGHT OUTER JOIN integers ON i + l > 12 ORDER BY i, k;

SELECT integers.*, integers2.* FROM integers2 RIGHT OUTER JOIN integers ON integers.i < integers2.k WHERE integers.i <= 2 ORDER BY i;

SELECT integers.*, integers2.* FROM integers2 RIGHT OUTER JOIN integers ON integers.i < integers2.k AND integers.i < integers2.l WHERE integers.i <= 2 ORDER BY i;

SELECT integers.*, integers2.* FROM (SELECT * FROM integers2 WHERE k = 100) AS integers2 RIGHT OUTER JOIN integers ON integers.i < integers2.k ORDER BY i;

SELECT t1.*, t2.* FROM (VALUES (2), (3)) AS t2(i) RIGHT JOIN (VALUES (1), (2)) AS t1(i) ON t1.i = t2.i AND t1.i + t2.i = 4 ORDER BY 1, 2;

CREATE TABLE test_str (k TEXT);

CREATE TABLE test_str_del (pk TEXT);

CREATE TABLE test_int (k BIGINT);

CREATE TABLE test_int_del (pk BIGINT);

INSERT INTO test_str VALUES ('abc'), ('def');

INSERT INTO test_int VALUES (1), (2);

SELECT l.* FROM test_str AS l ANTI JOIN test_str_del AS r ON l.k = r.pk;

SELECT l.* FROM test_int AS l ANTI JOIN test_int_del AS r ON l.k = r.pk;

INSERT INTO test_int VALUES (NULL);

SELECT l.* FROM test_int AS l ANTI JOIN test_int_del AS r ON l.k IS NOT DISTINCT FROM r.pk;

INSERT INTO test_int_del VALUES (NULL);

SELECT l.* FROM test_int AS l ANTI JOIN test_int_del AS r ON l.k IS NOT DISTINCT FROM r.pk;

PRAGMA enable_verification;

CREATE TABLE left_table (a INT, b INT, c INT);

INSERT INTO left_table VALUES (42, 1, 1), (43, 1, 1);

CREATE TABLE right_table (a INT, b INT);

INSERT INTO right_table VALUES (42, 1);

SELECT * FROM left_table ANTI JOIN right_table ON left_table.a = right_table.a;

SELECT * FROM left_table ANTI JOIN right_table ON left_table.a = right_table.a WHERE a > 5;

SELECT * FROM left_table ANTI JOIN right_table ON ([left_table.a, left_table.b] = [right_table.a, right_table.b]);

SELECT * FROM left_table ANTI JOIN (SELECT a AS foo FROM right_table WHERE b = 1) AS buzz ON left_table.a = buzz.foo;

SELECT * FROM left_table ANTI JOIN right_table ON left_table.a = right_table.a WHERE right_table.a < 43;

INSERT INTO left_table VALUES (43, 1, 5), (43, 1, 5), (43, 1, 5), (43, 1, 5);

SELECT * FROM left_table ANTI JOIN right_table ON (left_table.a = right_table.a);

CREATE TABLE other (a INT, b INT);

INSERT INTO other VALUES (42, 1), (43, 1);

SELECT * FROM left_table ANTI JOIN (SELECT right_table.a FROM right_table JOIN other ON (other.a = right_table.a)) AS joined_right_table ON left_table.a = joined_right_table.a;

DELETE FROM left_table WHERE c = 5;

SELECT * FROM left_table ANTI JOIN right_table USING (a);

SELECT * FROM left_table NATURAL ANTI JOIN right_table;

SELECT * FROM left_table NATURAL ANTI JOIN (SELECT right_table.a FROM right_table JOIN other ON (other.a = right_table.a)) AS joined_right_table;

SELECT * FROM left_table ANTI JOIN right_table ON (left_table.a <> right_table.a) ORDER BY a, c;

SELECT * FROM left_table ANTI JOIN right_table ON (left_table.a > right_table.a);

SELECT * FROM left_table, right_table;

SELECT * FROM left_table ANTI JOIN right_table ON (left_table.a + right_table.a = 85 OR left_table.a + right_table.b = 84) ORDER BY left_table.a, left_table.c;

INSERT INTO right_table VALUES (1, 42), (1, 42);

INSERT INTO left_table VALUES (42, 1, 5), (42, 1, 5), (42, 1, 5), (2000, 20000, 200000);

SELECT * FROM left_table ANTI JOIN right_table ON (left_table.a + right_table.a = 85 OR left_table.a + right_table.b = 84) ORDER BY left_table.a, left_table.c;

SELECT a AS outer_a, (SELECT MAX(right_table.b) FROM right_table WHERE right_table.a <> outer_a) AS right_table_b FROM left_table ANTI JOIN right_table ON (left_table.a = right_table.a) ORDER BY outer_a, right_table_b;

INSERT INTO right_table VALUES (1, 20);

SELECT a AS outer_a, (SELECT MAX(b) FROM right_table WHERE right_table.a <> outer_a) AS right_table_b FROM left_table ANTI JOIN right_table ON (left_table.a = right_table.a) ORDER BY outer_a, right_table_b;

SET scalar_subquery_error_on_multiple_rows = FALSE;

SELECT a AS outer_a, (SELECT b FROM right_table WHERE right_table.a <> outer_a) AS right_table_b FROM left_table ANTI JOIN right_table ON (left_table.a = right_table.a) ORDER BY outer_a, right_table_b;

PRAGMA enable_verification;

CREATE TABLE t1 AS SELECT * FROM (VALUES (1, 2), (2, 4), (3, 8), (6, 25), (1, 25)) AS t(a, b);

CREATE TABLE t2 AS SELECT * FROM (VALUES (4), (5)) AS t(b);

SELECT * FROM t1 SEMI JOIN t2 ON t1.a < t2.b AND t1.b > t2.b ORDER BY ALL;

SELECT * FROM t1 ANTI JOIN t2 ON t1.a < t2.b AND t1.b < t2.b ORDER BY ALL;

EXPLAIN select * from t1 anti join t2 on t1.a < t2.b and t1.b < t2.b order by all;

SELECT * FROM t1 ANTI JOIN t2 ON t1.a < t2.b AND t1.b < t2.b ORDER BY ALL;

SELECT * FROM t1 SEMI JOIN t2 ON t1.a < t2.b OR t1.b < t2.b ORDER BY ALL;

SELECT * FROM t1 SEMI JOIN t2 ON (t1.a < t2.b AND t1.b < t2.b) OR (t1.a < t2.b AND t1.b = 4) ORDER BY ALL;

SELECT * FROM t1 SEMI JOIN t2 ON (t1.a < t2.b OR t1.b < t2.b) AND (t1.a = 1 OR t1.b = 4) ORDER BY ALL;

CREATE TABLE flattened ("start" TEXT, "end" TEXT);

INSERT INTO flattened VALUES ('2023-03-15T00:00:00Z', '2023-03-20T00:00:00Z');

CREATE TABLE input_table AS SELECT * FROM (VALUES ('1', '2023-03-14T00:00:00Z', 2), ('2', '2023-03-15T00:00:00Z', 4), ('3', '2023-03-16T00:00:00Z', 7), ('4', '2023-03-17T00:00:00Z', 3), ('5', '2023-03-18T00:00:00Z', 2), ('6', '2023-03-19T23:59:59Z', 4), ('7', '2023-03-20T00:00:00Z', 7), ('8', '2023-03-21T00:00:00Z', 3)) AS t(user_id, timestamp, value);

SELECT * FROM input_table ANTI JOIN flattened ON input_table."timestamp" >= flattened.start AND input_table."timestamp" < flattened.end;

CREATE TABLE left_table (a INT, b INT, c INT);

INSERT INTO left_table VALUES (42, 1, 1), (43, 1, 1), (42, 1, 1), (41, 1, 1), (41, 2, 2), (41, 7, 7);

CREATE TABLE right_table (a INT, b INT);

INSERT INTO right_table SELECT 41, range AS b FROM RANGE(0, 375);

EXPLAIN ANALYZE SELECT * FROM left_table ANTI JOIN right_table ON left_table.a = right_table.a;

EXPLAIN analyze SELECT * FROM left_table ANTI JOIN right_table ON left_table.a = right_table.a WHERE a > 5;

EXPLAIN analyze SELECT * FROM left_table ANTI JOIN right_table ON ([left_table.a, left_table.b] = [right_table.a, right_table.b]);

EXPLAIN analyze SELECT * FROM left_table ANTI JOIN (SELECT a as foo from right_table where b > 5) buzz ON left_table.a = buzz.foo;

INSERT INTO left_table VALUES (43, 1, 5), (43, 1, 5), (43, 1, 5), (43, 1, 5);

CREATE TABLE other (a INT, b INT);

INSERT INTO other VALUES (42, 1), (43, 1);

EXPLAIN ANALYZE SELECT * FROM left_table
ANTI JOIN (select right_table.a FROM right_table JOIN other ON (other.a = right_table.a)) joined_right_table
ON left_table.a = joined_right_table.a;

DELETE FROM left_table WHERE c = 5;

EXPLAIN ANALYZE SELECT * FROM left_table ANTI JOIN right_table USING (a);

EXPLAIN analyze SELECT * FROM left_table NATURAL ANTI JOIN right_table;

EXPLAIN ANALYZE SELECT * FROM left_table
NATURAL ANTI JOIN (select right_table.a FROM right_table JOIN other ON (other.a = right_table.a)) joined_right_table;

EXPLAIN ANALYZE SELECT * FROM left_table ANTI JOIN right_table ON (left_table.a <> right_table.a) ORDER BY a, c;

EXPLAIN ANALYZE SELECT * FROM left_table ANTI JOIN right_table ON (left_table.a > right_table.a);

EXPLAIN analyze SELECT * FROM left_table ANTI JOIN right_table ON (left_table.a + right_table.a = 85 OR left_table.a + right_table.b = 84) order by left_table.a, left_table.c;

INSERT INTO right_table VALUES (1, 42), (1, 42);

INSERT INTO left_table VALUES (42, 1, 5), (42, 1, 5), (42, 1, 5), (2000, 20000, 200000);

EXPLAIN analyze SELECT * FROM left_table ANTI JOIN right_table ON (left_table.a + right_table.a = 85 OR left_table.a + right_table.b = 84) order by left_table.a, left_table.c;

EXPLAIN analyze SELECT a as outer_a, (SELECT MAX(right_table.b) FROM right_table where right_table.a != outer_a) right_table_b FROM left_table ANTI JOIN right_table ON (left_table.a = right_table.a) Order by outer_a, right_table_b;

INSERT INTO right_table VALUES (1, 20);

EXPLAIN analyze SELECT a as outer_a, (SELECT MAX(b) FROM right_table where right_table.a != outer_a) right_table_b FROM left_table ANTI JOIN right_table ON (left_table.a = right_table.a) Order by outer_a, right_table_b;

SET scalar_subquery_error_on_multiple_rows = FALSE;

EXPLAIN analyze SELECT a as outer_a, (SELECT right_table.b FROM right_table where right_table.a != outer_a) right_table_b FROM left_table ANTI JOIN right_table ON (left_table.a = right_table.a) Order by outer_a, right_table_b;

INSERT INTO right_table VALUES (1, 20);

EXPLAIN analyze SELECT a as outer_a, (SELECT b FROM right_table where right_table.a != outer_a) right_table_b FROM left_table ANTI JOIN right_table ON (left_table.a = right_table.a) Order by outer_a, right_table_b;

CREATE TABLE left_table (a INT, b INT, c INT);

INSERT INTO left_table VALUES (41, 1, 1), (42, 1, 1), (42, 1, 1), (43, 1, 1), (45, 2, 2), (46, 7, 7);

CREATE TABLE right_table (a INT, b INT);

INSERT INTO right_table SELECT 41, range AS b FROM RANGE(0, 375);

EXPLAIN ANALYZE SELECT * FROM left_table SEMI JOIN right_table ON left_table.a = right_table.a;

EXPLAIN analyze SELECT * FROM left_table SEMI JOIN right_table ON left_table.a = right_table.a WHERE a > 5;

EXPLAIN analyze SELECT * FROM left_table SEMI JOIN right_table ON ([left_table.a, left_table.b] = [right_table.a, right_table.b]);

EXPLAIN analyze SELECT * FROM left_table SEMI JOIN (SELECT a as foo from right_table where b > 1) buzz ON left_table.a = buzz.foo;

INSERT INTO left_table VALUES (43, 1, 5), (43, 1, 5), (43, 1, 5), (43, 1, 5);

CREATE TABLE other (a INT, b INT);

INSERT INTO other VALUES (42, 1), (43, 1);

EXPLAIN ANALYZE SELECT * FROM left_table
SEMI JOIN (select right_table.a FROM right_table JOIN other ON (other.a = right_table.a)) joined_right_table
ON left_table.a = joined_right_table.a;

DELETE FROM left_table WHERE c = 5;

EXPLAIN ANALYZE SELECT * FROM left_table SEMI JOIN right_table USING (a);

EXPLAIN analyze SELECT * FROM left_table NATURAL SEMI JOIN right_table;

EXPLAIN ANALYZE SELECT * FROM left_table
NATURAL SEMI JOIN (select right_table.a FROM right_table JOIN other ON (other.a = right_table.a)) joined_right_table;

EXPLAIN ANALYZE SELECT * FROM left_table SEMI JOIN right_table ON (left_table.a <> right_table.a) ORDER BY a, c;

EXPLAIN ANALYZE SELECT * FROM left_table SEMI JOIN right_table ON (left_table.a > right_table.a);

EXPLAIN analyze SELECT * FROM left_table SEMI JOIN right_table ON (left_table.a + right_table.a = 85 OR left_table.a + right_table.b = 84) order by left_table.a, left_table.c;

INSERT INTO right_table VALUES (1, 42), (1, 42);

INSERT INTO left_table VALUES (42, 1, 5), (42, 1, 5), (42, 1, 5), (2000, 20000, 200000);

EXPLAIN analyze SELECT * FROM left_table SEMI JOIN right_table ON (left_table.a + right_table.a = 85 OR left_table.a + right_table.b = 84) order by left_table.a, left_table.c;

EXPLAIN analyze SELECT a as outer_a, (SELECT MAX(right_table.b) FROM right_table where right_table.a != outer_a) right_table_b FROM left_table SEMI JOIN right_table ON (left_table.a = right_table.a) Order by outer_a, right_table_b;

INSERT INTO right_table VALUES (1, 20);

EXPLAIN analyze SELECT a as outer_a, (SELECT MAX(b) FROM right_table where right_table.a != outer_a) right_table_b FROM left_table SEMI JOIN right_table ON (left_table.a = right_table.a) Order by outer_a, right_table_b;

SET scalar_subquery_error_on_multiple_rows = FALSE;

EXPLAIN analyze SELECT a as outer_a, (SELECT right_table.b FROM right_table where right_table.a != outer_a) right_table_b FROM left_table SEMI JOIN right_table ON (left_table.a = right_table.a) Order by outer_a, right_table_b;

INSERT INTO right_table VALUES (1, 20);

EXPLAIN analyze SELECT a as outer_a, (SELECT b FROM right_table where right_table.a != outer_a) right_table_b FROM left_table SEMI JOIN right_table ON (left_table.a = right_table.a) Order by outer_a, right_table_b;

PRAGMA enable_verification;

CREATE TABLE left_table (a INT, b INT, c INT);

INSERT INTO left_table VALUES (42, 1, 1), (43, 1, 1);

CREATE TABLE right_table (a INT, b INT);

INSERT INTO right_table VALUES (42, 1);

SELECT * FROM left_table SEMI JOIN right_table ON left_table.a = right_table.a;

SELECT * FROM left_table SEMI JOIN right_table ON left_table.a = right_table.a WHERE a > 5;

SELECT * FROM left_table SEMI JOIN right_table ON ([left_table.a, left_table.b] = [right_table.a, right_table.b]);

SELECT * FROM left_table SEMI JOIN (SELECT a AS foo FROM right_table WHERE b = 1) AS buzz ON left_table.a = buzz.foo;

SELECT * FROM left_table SEMI JOIN right_table ON left_table.a = right_table.a WHERE right_table.a < 43;

INSERT INTO left_table VALUES (42, 1, 5), (42, 1, 5), (42, 1, 5), (42, 1, 5);

SELECT * FROM left_table SEMI JOIN right_table ON (left_table.a = right_table.a);

CREATE TABLE other (a INT, b INT);

INSERT INTO other VALUES (42, 1), (43, 1);

SELECT * FROM left_table SEMI JOIN (SELECT right_table.a FROM right_table JOIN other ON (other.a = right_table.a)) AS joined_right_table ON left_table.a = joined_right_table.a;

DELETE FROM left_table WHERE c = 5;

SELECT * FROM left_table SEMI JOIN right_table USING (a);

SELECT * FROM left_table NATURAL SEMI JOIN right_table;

SELECT * FROM left_table NATURAL SEMI JOIN (SELECT right_table.a FROM right_table JOIN other ON (other.a = right_table.a)) AS joined_right_table;

SELECT * FROM left_table SEMI JOIN right_table ON (left_table.a <> right_table.a) ORDER BY a, c;

SELECT * FROM left_table SEMI JOIN right_table ON (left_table.a > right_table.a);

SELECT * FROM left_table SEMI JOIN right_table ON (left_table.a + right_table.a = 85 OR left_table.a + right_table.b = 84) ORDER BY left_table.a, left_table.c;

INSERT INTO right_table VALUES (1, 42), (1, 42);

INSERT INTO left_table VALUES (42, 1, 5), (42, 1, 5), (42, 1, 5), (2000, 20000, 200000);

SELECT * FROM left_table SEMI JOIN right_table ON (left_table.a + right_table.a = 85 OR left_table.a + right_table.b = 84) ORDER BY left_table.a, left_table.c;

SELECT * FROM left_table SEMI JOIN right_table ON ((left_table.a = NULL AND right_table.a = NULL) OR left_table.a = right_table.a) ORDER BY left_table.a, left_table.c;

SELECT a AS outer_a, (SELECT ANY_VALUE(b) FROM right_table WHERE right_table.a <> outer_a) AS right_table_b FROM left_table SEMI JOIN right_table ON (left_table.a = right_table.a) ORDER BY outer_a, right_table_b;

SET scalar_subquery_error_on_multiple_rows = FALSE;

SELECT a AS outer_a, (SELECT b FROM right_table WHERE right_table.a <> outer_a) AS right_table_b FROM left_table SEMI JOIN right_table ON (left_table.a = right_table.a) ORDER BY outer_a, right_table_b;

CREATE OR REPLACE TABLE xx AS SELECT w FROM (VALUES ('a'), ('b'), ('c'), ('d'), ('e')) AS t(w);

CREATE TABLE integers AS SELECT 42 AS i;

COPY integers TO '__TEST_DIR__/integers.json.gz' WITH (FORMAT JSON, COMPRESSION GZIP);

DELETE FROM integers;

COPY integers FROM '__TEST_DIR__/integers.json.gz';

SELECT i FROM integers;

create type small_enum as enum ('DUCK_DUCK_ENUM', 'GOOSE');

SELECT * EXCLUDE (varchar, blob, bit, medium_enum, large_enum, hugeint, uhugeint, varint) REPLACE (CAST(dec_18_6 AS DOUBLE) AS dec_18_6, CAST(dec38_10 AS DOUBLE) AS dec38_10) FROM TEST_ALL_TYPES();

COPY (SELECT * EXCLUDE (varchar, blob, bit, medium_enum, large_enum, hugeint, uhugeint, varint) REPLACE (CAST(dec_18_6 AS DOUBLE) AS dec_18_6, CAST(dec38_10 AS DOUBLE) AS dec38_10) FROM TEST_ALL_TYPES()) TO '__TEST_DIR__/all_types.ndjson';

CREATE TABLE roundtrip AS SELECT * EXCLUDE (varchar, blob, bit, medium_enum, large_enum, hugeint, uhugeint, varint) REPLACE (CAST(dec_18_6 AS DOUBLE) AS dec_18_6, CAST(dec38_10 AS DOUBLE) AS dec38_10) FROM TEST_ALL_TYPES() LIMIT 0;

COPY roundtrip FROM '__TEST_DIR__/all_types.ndjson';

SELECT * FROM roundtrip;

DELETE FROM roundtrip;

COPY (SELECT * EXCLUDE (varchar, blob, bit, medium_enum, large_enum, hugeint, uhugeint, varint) REPLACE (CAST(dec_18_6 AS DOUBLE) AS dec_18_6, CAST(dec38_10 AS DOUBLE) AS dec38_10) FROM TEST_ALL_TYPES()) TO '__TEST_DIR__/all_types.json' WITH (array TRUE);

COPY roundtrip FROM '__TEST_DIR__/all_types.json' WITH (array TRUE);

SELECT * FROM roundtrip;

COPY (SELECT * FROM (VALUES (UUID(), 10), (UUID(), 10), (UUID(), 15), (UUID(), 5)) AS v(order_id, revenue)) TO '__TEST_DIR__/query.json' WITH (format json);

SELECT TYPEOF(order_id), revenue FROM "__TEST_DIR__/query.json";

COPY (SELECT v.* FROM (VALUES ({'order_id': UUID(), 'revenue': 10}), ({'order_id': UUID(), 'revenue': 10}), ({'order_id': UUID(), 'revenue': 15}), ({'order_id': UUID(), 'revenue': 5}), (T(v)))) TO '__TEST_DIR__/query.json' WITH (format json);

SELECT TYPEOF(order_id), revenue FROM "__TEST_DIR__/query.json";

COPY (SELECT order_id, * EXCLUDE (order_id) FROM (VALUES (UUID(), 10), (UUID(), 10), (UUID(), 15), (UUID(), 5)) AS v(order_id, revenue)) TO '__TEST_DIR__/query.json' WITH (format json);

SELECT TYPEOF(order_id), revenue FROM "__TEST_DIR__/query.json";

COPY (SELECT * REPLACE (revenue + 1 AS revenue) FROM (VALUES (UUID(), 10), (UUID(), 10), (UUID(), 15), (UUID(), 5)) AS v(order_id, revenue)) TO '__TEST_DIR__/query.json' WITH (format json);

SELECT TYPEOF(order_id), revenue FROM "__TEST_DIR__/query.json";

COPY (SELECT 42 AS a, a + 1) TO '__TEST_DIR__/out.json' WITH (format json);

SELECT * FROM "__TEST_DIR__/out.json";

CREATE TABLE conclusions (conclusion TEXT);

COPY conclusions FROM 'data/json/top_level_array.json';

COPY conclusions FROM 'data/json/top_level_array.json' WITH (AUTO_DETECT FALSE);

DELETE FROM conclusions;

COPY conclusions FROM 'data/json/top_level_array.json' WITH (ARRAY TRUE);

SELECT * FROM conclusions;

COPY conclusions FROM 'data/json/top_level_array.json' WITH (ARRAY FALSE);

COPY (SELECT range AS i FROM RANGE(0, 10)) TO '__TEST_DIR__/my.json' WITH (ARRAY TRUE);

SELECT * FROM READ_JSON_AUTO('__TEST_DIR__/my.json', format = 'array');

COPY (SELECT range AS i FROM RANGE(0, 10)) TO '__TEST_DIR__/my.json' WITH (COMPRESSION);

COPY (SELECT range AS i FROM RANGE(0, 10)) TO '__TEST_DIR__/my.json.gz' WITH (COMPRESSION GZIP);

CREATE TABLE my_range (i BIGINT);

COPY my_range FROM '__TEST_DIR__/my.json.gz' WITH (COMPRESSION GZIP);

COPY my_range FROM '__TEST_DIR__/my.json.gz' WITH (COMPRESSION GZIP);

COPY (SELECT range AS i FROM RANGE(0, 10)) TO '__TEST_DIR__/my.json.zst' WITH (COMPRESSION ZSTD);

SELECT * FROM "__TEST_DIR__/my.json.zst";

SELECT * FROM my_range;

SET threads = 4;

start AS transaction;

CALL dbgen(sf=0.1);

COPY lineitem TO '__TEST_DIR__/lineitem.json' WITH (ARRAY);

COPY lineitem TO '__TEST_DIR__/lineitem.json' WITH (ARRAY);

ROLLBACK;

start AS transaction;

CALL dbgen(sf=0);

SET memory_limit = '100mb';

COPY lineitem FROM '__TEST_DIR__/lineitem.json' WITH (ARRAY);

SET memory_limit = '500mb';

PRAGMA TPCH(1);

COPY lineitem TO '__TEST_DIR__/lineitem.json.gz';

SELECT * FROM "__TEST_DIR__/lineitem.json.gz";

ROLLBACK;

start AS transaction;

start AS transaction;

start AS transaction;

start AS transaction;

ROLLBACK;

CREATE VIEW lineitem AS SELECT * FROM READ_NDJSON('__TEST_DIR__/export_json_test/lineitem.json', columns = {'l_orderkey': 'INTEGER', 'l_partkey': 'INTEGER', 'l_suppkey': 'INTEGER', 'l_linenumber': 'INTEGER', 'l_quantity': 'INTEGER', 'l_extendedprice': 'DECIMAL(15,2)', 'l_discount': 'DECIMAL(15,2)', 'l_tax': 'DECIMAL(15,2)', 'l_returnflag': 'VARCHAR', 'l_linestatus': 'VARCHAR', 'l_shipdate': 'DATE', 'l_commitdate': 'DATE', 'l_receiptdate': 'DATE', 'l_shipinstruct': 'VARCHAR', 'l_shipmode': 'VARCHAR', 'l_comment': 'VARCHAR'});

CREATE VIEW orders AS SELECT * FROM READ_NDJSON('__TEST_DIR__/export_json_test/orders.json', columns = {'o_orderkey': 'INTEGER', 'o_custkey': 'INTEGER', 'o_orderstatus': 'VARCHAR', 'o_totalprice': 'DECIMAL(15,2)', 'o_orderdate': 'DATE', 'o_orderpriority': 'VARCHAR', 'o_clerk': 'VARCHAR', 'o_shippriority': 'INTEGER', 'o_comment': 'VARCHAR'});

CREATE VIEW partsupp AS SELECT * FROM READ_NDJSON('__TEST_DIR__/export_json_test/partsupp.json', columns = {'ps_partkey': 'INTEGER', 'ps_suppkey': 'INTEGER', 'ps_availqty': 'INTEGER', 'ps_supplycost': 'DECIMAL(15,2)', 'ps_comment': 'VARCHAR'});

CREATE VIEW part AS SELECT * FROM READ_NDJSON('__TEST_DIR__/export_json_test/part.json', columns = {'p_partkey': 'INTEGER', 'p_name': 'VARCHAR', 'p_mfgr': 'VARCHAR', 'p_brand': 'VARCHAR', 'p_type': 'VARCHAR', 'p_size': 'INTEGER', 'p_container': 'VARCHAR', 'p_retailprice': 'DECIMAL(15,2)', 'p_comment': 'VARCHAR'});

CREATE VIEW customer AS SELECT * FROM READ_NDJSON('__TEST_DIR__/export_json_test/customer.json', columns = {'c_custkey': 'INTEGER', 'c_name': 'VARCHAR', 'c_address': 'VARCHAR', 'c_nationkey': 'INTEGER', 'c_phone': 'VARCHAR', 'c_acctbal': 'DECIMAL(15,2)', 'c_mktsegment': 'VARCHAR', 'c_comment': 'VARCHAR'});

CREATE VIEW supplier AS SELECT * FROM READ_NDJSON('__TEST_DIR__/export_json_test/supplier.json', columns = {'s_suppkey': 'INTEGER', 's_name': 'VARCHAR', 's_address': 'VARCHAR', 's_nationkey': 'INTEGER', 's_phone': 'VARCHAR', 's_acctbal': 'DECIMAL(15,2)', 's_comment': 'VARCHAR'});

CREATE VIEW nation AS SELECT * FROM READ_NDJSON('__TEST_DIR__/export_json_test/nation.json', columns = {'n_nationkey': 'INTEGER', 'n_name': 'VARCHAR', 'n_regionkey': 'INTEGER', 'n_comment': 'VARCHAR'});

CREATE VIEW nation AS SELECT * FROM READ_NDJSON('__TEST_DIR__/export_json_test/nation.json', columns = {'n_nationkey': 'INTEGER', 'n_name': 'VARCHAR', 'n_regionkey': 'INTEGER', 'n_comment': 'VARCHAR'});

CREATE VIEW nation AS SELECT * FROM READ_NDJSON('__TEST_DIR__/export_json_test/nation.json', columns = {'n_nationkey': 'INTEGER', 'n_name': 'VARCHAR', 'n_regionkey': 'INTEGER', 'n_comment': 'VARCHAR'});

CREATE VIEW nation AS SELECT * FROM READ_NDJSON('__TEST_DIR__/export_json_test/nation.json', columns = {'n_nationkey': 'INTEGER', 'n_name': 'VARCHAR', 'n_regionkey': 'INTEGER', 'n_comment': 'VARCHAR'});

PRAGMA enable_verification;

SELECT JSON_STRUCTURE('{}');

SELECT JSON_TRANSFORM('{}', '{}');

COPY (SELECT '{"a": {}}') TO '__TEST_DIR__/my.json' WITH (FORMAT CSV, quote '', header 0);

SELECT TYPEOF(a) FROM "__TEST_DIR__/my.json";

SELECT TYPEOF(a) FROM "__TEST_DIR__/my.json";

COPY (SELECT UNNEST(['{"c1":"val11","c2":{"k1":"val11","k2":{}}}', '{"c1":"val21","c2":{"k1":"val21","k2":{}}}'])) TO '__TEST_DIR__/data.ndjson' WITH (FORMAT CSV, quote '', header 0);

CREATE OR REPLACE TABLE tbl AS SELECT * FROM READ_NDJSON_AUTO('__TEST_DIR__/data.ndjson');

SELECT TYPEOF(c1), TYPEOF(c2) FROM tbl;

COPY tbl TO '__TEST_DIR__/data.parquet';

SELECT * FROM "__TEST_DIR__/data.parquet";

PRAGMA enable_verification;

CREATE TABLE text (i TEXT);

INSERT INTO text VALUES ('bla');

INSERT INTO text VALUES ('bla');

DROP TABLE text;

DROP TABLE text;

SELECT * FROM text;

COPY text TO '__TEST_DIR__/text.json' WITH (ARRAY);

DROP TABLE text;

CREATE TABLE text (i TEXT);

COPY text FROM '__TEST_DIR__/text.json' WITH (ARRAY);

SELECT * FROM text;

SELECT * FROM "__TEST_DIR__/text.json";

PRAGMA enable_verification;

CREATE TABLE t1 AS SELECT range + 10 AS n, range AS v FROM RANGE(0, 10);

SELECT JSON_GROUP_ARRAY(v) FROM t1;

SELECT JSON_GROUP_OBJECT(n, v) FROM t1;

SELECT JSON_GROUP_OBJECT(n, v) FROM t1 GROUP BY n % 2 ORDER BY ALL;

INSERT INTO t1 VALUES (0, NULL), (20, NULL), (21, NULL), (1, 10), (2, 11);

SELECT JSON_GROUP_OBJECT(n, v) FROM t1 GROUP BY n % 2 ORDER BY ALL;

CREATE TABLE t2 (j JSON);

INSERT INTO t2 VALUES ('{"a": 42}'), ('{"a": 42.42, "b": "duck"}');

SELECT JSON_GROUP_STRUCTURE(j) FROM t2;

SELECT JSON(' { "this" : "is", "a": [ "test" ] }');

CREATE TABLE test (j JSON);

INSERT INTO test VALUES ('{"duck": 42}'), (NULL), ('{"goose": 43}');

SELECT TYPEOF(j), j FROM test;

SELECT TYPEOF(j), j FROM test;

CREATE TABLE tbl1 (i INT);

SELECT JSON_SERIALIZE_PLAN('SELECT 1 + 2 FROM tbl1');

SELECT JSON_SERIALIZE_PLAN('SELECT *, 1 + 2 FROM tbl1', skip_null := TRUE, skip_empty := TRUE);

SELECT JSON_SERIALIZE_PLAN('SELECT *, 1 + 2 FROM tbl1', skip_null := TRUE, skip_empty := TRUE, optimize := TRUE);

SELECT JSON_SERIALIZE_PLAN('SELECT AND LAUNCH ROCKETS WHERE 1 = 1');

SELECT JSON_SERIALIZE_PLAN('SELECT * FROM nonexistent_table') LIKE '%Table with name nonexistent_table does not exist%';

SELECT JSON_SERIALIZE_SQL('SELECT 1 + 2 FROM tbl1');

SELECT JSON_SERIALIZE_SQL('SELECT *, 1 + 2 FROM tbl1', skip_null := TRUE, skip_empty := TRUE);

SELECT JSON_SERIALIZE_SQL('SELECT * FROM (SELECT 1 + 2)', skip_null := TRUE, skip_empty := TRUE);

SELECT JSON_SERIALIZE_SQL('SELECT * FROM (SELECT 1 + 2)', skip_default := TRUE, skip_empty := TRUE, skip_null := TRUE, format := TRUE);

SELECT JSON_SERIALIZE_SQL('SELECT AND LAUNCH ROCKETS WHERE 1 = 1');

SELECT JSON_DESERIALIZE_SQL(JSON_SERIALIZE_SQL('SELECT 1 + 2 FROM tbl1'));

SELECT JSON_DESERIALIZE_SQL(JSON_SERIALIZE_SQL('SELECT *, 1 + 2 FROM tbl1'));

SELECT JSON_DESERIALIZE_SQL(JSON_SERIALIZE_SQL('SELECT * FROM (SELECT 1 + 2)'));

SELECT JSON_DESERIALIZE_SQL(JSON_SERIALIZE_SQL('SELECT AND LAUNCH ROCKETS WHERE 1 = 1'));

SELECT * FROM JSON_EXECUTE_SERIALIZED_SQL(JSON_SERIALIZE_SQL('SELECT 1 + 2'));

CREATE TABLE tbl2 (a INT, b INT, c INT);

INSERT INTO tbl2 VALUES (1, 2, 3), (4, 5, 6), (7, 8, 9);

SELECT * FROM JSON_EXECUTE_SERIALIZED_SQL(JSON_SERIALIZE_SQL('SELECT * FROM tbl2'));

SELECT * FROM JSON_EXECUTE_SERIALIZED_SQL(JSON_SERIALIZE_SQL('SELECT a + b + c FROM tbl2'));

PRAGMA JSON_EXECUTE_SERIALIZED_SQL('{"error":false,"statements":[{"node":{"type":"SELECT_NODE","modifiers":[],"cte_map":{"map":[]},"select_list":[{"class":"FUNCTION","type":"FUNCTION","alias":"","function_name":"+","schema":"","children":[{"class":"FUNCTION","type":"FUNCTION","alias":"","function_name":"+","schema":"","children":[{"class":"COLUMN_REF","type":"COLUMN_REF","alias":"","column_names":["a"]},{"class":"COLUMN_REF","type":"COLUMN_REF","alias":"","column_names":["b"]}],"filter":null,"order_bys":{"type":"ORDER_MODIFIER","orders":[]},"distinct":false,"is_operator":true,"export_state":false,"catalog":""},{"class":"COLUMN_REF","type":"COLUMN_REF","alias":"","column_names":["c"]}],"filter":null,"order_bys":{"type":"ORDER_MODIFIER","orders":[]},"distinct":false,"is_operator":true,"export_state":false,"catalog":""}],"from_table":{"type":"BASE_TABLE","alias":"","sample":null,"schema_name":"","table_name":"tbl2","column_name_alias":[],"catalog_name":""},"where_clause":null,"group_expressions":[],"group_sets":[],"aggregate_handling":"STANDARD_HANDLING","having":null,"sample":null,"qualify":null}}]}');

SELECT * FROM JSON_EXECUTE_SERIALIZED_SQL(JSON_SERIALIZE_SQL('SELECT * FROM tbl2', skip_null := TRUE, skip_empty := TRUE));

SELECT * FROM JSON_EXECUTE_SERIALIZED_SQL(JSON_SERIALIZE_SQL('WITH a(i) as (SELECT 1) SELECT a1.i as i1, a2.i as i2 FROM a as a1, a as a2'));

SELECT JSON_DESERIALIZE_SQL('{ "statements": [ {"expression_class": "BOUND_COMPARISON"}]}');

SELECT * FROM JSON_EXECUTE_SERIALIZED_SQL('{ "statements": [ {"expression_class": "BOUND_COMPARISON"}]}');

PRAGMA enable_verification;

CREATE TABLE j1 (x TEXT);

INSERT INTO j1 (x) VALUES ('true'), ('false'), ('null'), ('123'), ('-234'), ('34.5e+6'), ('""'), ('"\""'), ('"\\"'), ('"abcdefghijlmnopqrstuvwxyz"'), ('[]'), ('{}'), ('[true,false,null,123,-234,34.5e+6,{},[]]'), ('{"a":true,"b":{"c":false}}');

SELECT COUNT(*) FROM j1 WHERE JSON_TYPE(x) IN ('OBJECT', 'ARRAY');

SELECT x FROM j1 WHERE (x -> '$') <> x AND JSON_TYPE(x) IN ('OBJECT', 'ARRAY');

CREATE TABLE j2 (id INT PRIMARY KEY, json TEXT, src TEXT);

INSERT INTO j2 (id, json, src) VALUES (1, '{
"firstName": "John",
"lastName": "Smith",
"isAlive": true,
"age": 25,
"address": {
"streetAddress": "21 2nd Street",
"city": "New York",
"state": "NY",
"postalCode": "10021-3100"
},
"phoneNumbers": [
{
"type": "home",
"number": "212 555-1234"
},
{
"type": "office",
"number": "646 555-4567"
}
],
"children": [],
"spouse": null
}', 'https://en.wikipedia.org/wiki/JSON');

INSERT INTO j2 (id, json, src) VALUES (2, '{
"id": "0001",
"type": "donut",
"name": "Cake",
"ppu": 0.55,
"batters":
{
"batter":
[
{ "id": "1001", "type": "Regular" },
{ "id": "1002", "type": "Chocolate" },
{ "id": "1003", "type": "Blueberry" },
{ "id": "1004", "type": "Devil''s Food" }
]
},
"topping":
[
{ "id": "5001", "type": "None" },
{ "id": "5002", "type": "Glazed" },
{ "id": "5005", "type": "Sugar" },
{ "id": "5007", "type": "Powdered Sugar" },
{ "id": "5006", "type": "Chocolate with Sprinkles" },
{ "id": "5003", "type": "Chocolate" },
{ "id": "5004", "type": "Maple" }
]
}', 'https://adobe.github.io/Spry/samples/data_region/JSONDataSetSample.html');

INSERT INTO j2 (id, json, src) VALUES (3, '[
{
"id": "0001",
"type": "donut",
"name": "Cake",
"ppu": 0.55,
"batters":
{
"batter":
[
{ "id": "1001", "type": "Regular" },
{ "id": "1002", "type": "Chocolate" },
{ "id": "1003", "type": "Blueberry" },
{ "id": "1004", "type": "Devil''s Food" }
]
},
"topping":
[
{ "id": "5001", "type": "None" },
{ "id": "5002", "type": "Glazed" },
{ "id": "5005", "type": "Sugar" },
{ "id": "5007", "type": "Powdered Sugar" },
{ "id": "5006", "type": "Chocolate with Sprinkles" },
{ "id": "5003", "type": "Chocolate" },
{ "id": "5004", "type": "Maple" }
]
},
{
"id": "0002",
"type": "donut",
"name": "Raised",
"ppu": 0.55,
"batters":
{
"batter":
[
{ "id": "1001", "type": "Regular" }
]
},
"topping":
[
{ "id": "5001", "type": "None" },
{ "id": "5002", "type": "Glazed" },
{ "id": "5005", "type": "Sugar" },
{ "id": "5003", "type": "Chocolate" },
{ "id": "5004", "type": "Maple" }
]
},
{
"id": "0003",
"type": "donut",
"name": "Old Fashioned",
"ppu": 0.55,
"batters":
{
"batter":
[
{ "id": "1001", "type": "Regular" },
{ "id": "1002", "type": "Chocolate" }
]
},
"topping":
[
{ "id": "5001", "type": "None" },
{ "id": "5002", "type": "Glazed" },
{ "id": "5003", "type": "Chocolate" },
{ "id": "5004", "type": "Maple" }
]
}
]', 'https://adobe.github.io/Spry/samples/data_region/JSONDataSetSample.html');

SELECT COUNT(*) FROM j2;

SELECT id, JSON_VALID(json), JSON_TYPE(json) FROM j2 ORDER BY id;

CALL dbgen(sf=1);

CALL dbgen(sf=1);

DROP TABLE customer;

DROP TABLE lineitem;

DROP TABLE nation;

DROP TABLE orders;

DROP TABLE part;

DROP TABLE partsupp;

DROP TABLE region;

DROP TABLE supplier;

CREATE VIEW customer AS SELECT CAST(JSON['c_custkey'] AS INT) AS c_custkey, CAST(JSON['c_name'] AS TEXT) AS c_name, CAST(JSON['c_address'] AS TEXT) AS c_address, CAST(JSON['c_nationkey'] AS INT) AS c_nationkey, CAST(JSON['c_phone'] AS TEXT) AS c_phone, CAST(JSON['c_acctbal'] AS DECIMAL(15, 2)) AS c_acctbal, CAST(JSON['c_mktsegment'] AS TEXT) AS c_mktsegment, CAST(JSON['c_comment'] AS TEXT) AS c_comment FROM READ_JSON_AUTO('__TEST_DIR__/tpch_json/customer.json', records = FALSE);

CREATE VIEW lineitem AS SELECT CAST(JSON['l_orderkey'] AS INT) AS l_orderkey, CAST(JSON['l_partkey'] AS INT) AS l_partkey, CAST(JSON['l_suppkey'] AS INT) AS l_suppkey, CAST(JSON['l_linenumber'] AS INT) AS l_linenumber, CAST(JSON['l_quantity'] AS DECIMAL(15, 2)) AS l_quantity, CAST(JSON['l_extendedprice'] AS DECIMAL(15, 2)) AS l_extendedprice, CAST(JSON['l_discount'] AS DECIMAL(15, 2)) AS l_discount, CAST(JSON['l_tax'] AS DECIMAL(15, 2)) AS l_tax, CAST(JSON['l_returnflag'] AS TEXT) AS l_returnflag, CAST(JSON['l_linestatus'] AS TEXT) AS l_linestatus, CAST(JSON['l_shipdate'] AS DATE) AS l_shipdate, CAST(JSON['l_commitdate'] AS DATE) AS l_commitdate, CAST(JSON['l_receiptdate'] AS DATE) AS l_receiptdate, CAST(JSON['l_shipinstruct'] AS TEXT) AS l_shipinstruct, CAST(JSON['l_shipmode'] AS TEXT) AS l_shipmode, CAST(JSON['l_comment'] AS TEXT) AS l_comment FROM READ_JSON_AUTO('__TEST_DIR__/tpch_json/lineitem.json', records = FALSE);

CREATE VIEW nation AS SELECT CAST(JSON['n_nationkey'] AS INT) AS n_nationkey, CAST(JSON['n_name'] AS TEXT) AS n_name, CAST(JSON['n_regionkey'] AS INT) AS n_regionkey, CAST(JSON['n_comment'] AS TEXT) AS n_comment FROM READ_JSON_AUTO('__TEST_DIR__/tpch_json/nation.json', records = FALSE);

CREATE VIEW orders AS SELECT CAST(JSON['o_orderkey'] AS INT) AS o_orderkey, CAST(JSON['o_custkey'] AS INT) AS o_custkey, CAST(JSON['o_orderstatus'] AS TEXT) AS o_orderstatus, CAST(JSON['o_totalprice'] AS DECIMAL(15, 2)) AS o_totalprice, CAST(JSON['o_orderdate'] AS DATE) AS o_orderdate, CAST(JSON['o_orderpriority'] AS TEXT) AS o_orderpriority, CAST(JSON['o_clerk'] AS TEXT) AS o_clerk, CAST(JSON['o_shippriority'] AS INT) AS o_shippriority, CAST(JSON['o_comment'] AS TEXT) AS o_comment FROM READ_JSON_AUTO('__TEST_DIR__/tpch_json/orders.json', records = FALSE);

CREATE VIEW part AS SELECT CAST(JSON['p_partkey'] AS INT) AS p_partkey, CAST(JSON['p_name'] AS TEXT) AS p_name, CAST(JSON['p_mfgr'] AS TEXT) AS p_mfgr, CAST(JSON['p_brand'] AS TEXT) AS p_brand, CAST(JSON['p_type'] AS TEXT) AS p_type, CAST(JSON['p_size'] AS INT) AS p_size, CAST(JSON['p_container'] AS TEXT) AS p_container, CAST(JSON['p_retailprice'] AS DECIMAL(15, 2)) AS p_retailprice, CAST(JSON['p_comment'] AS TEXT) AS p_comment FROM READ_JSON_AUTO('__TEST_DIR__/tpch_json/part.json', records = FALSE);

CREATE VIEW partsupp AS SELECT CAST(JSON['ps_partkey'] AS INT) AS ps_partkey, CAST(JSON['ps_suppkey'] AS INT) AS ps_suppkey, CAST(JSON['ps_availqty'] AS INT) AS ps_availqty, CAST(JSON['ps_supplycost'] AS DECIMAL(15, 2)) AS ps_supplycost, CAST(JSON['ps_comment'] AS TEXT) AS ps_comment FROM READ_JSON_AUTO('__TEST_DIR__/tpch_json/partsupp.json', records = FALSE);

CREATE VIEW region AS SELECT CAST(JSON['r_regionkey'] AS INT) AS r_regionkey, CAST(JSON['r_name'] AS TEXT) AS r_name, CAST(JSON['r_comment'] AS TEXT) AS r_comment FROM READ_JSON_AUTO('__TEST_DIR__/tpch_json/region.json', records = FALSE);

CREATE VIEW supplier AS
SELECT
json['s_suppkey']::INTEGER AS s_suppkey,
json['s_name']::VARCHAR AS s_name,
json['s_address']::VARCHAR AS s_address,
json['s_nationkey']::INTEGER AS s_nationkey,
json['s_phone']::VARCHAR AS s_phone,
json['s_acctbal']::DECIMAL(15,2) AS s_acctbal,
json['s_comment']::VARCHAR AS s_comment,
FROM
read_json_auto('__TEST_DIR__/tpch_json/supplier.json', records=false)
loop i 1 9;

CREATE VIEW supplier AS
SELECT
json['s_suppkey']::INTEGER AS s_suppkey,
json['s_name']::VARCHAR AS s_name,
json['s_address']::VARCHAR AS s_address,
json['s_nationkey']::INTEGER AS s_nationkey,
json['s_phone']::VARCHAR AS s_phone,
json['s_acctbal']::DECIMAL(15,2) AS s_acctbal,
json['s_comment']::VARCHAR AS s_comment,
FROM
read_json_auto('__TEST_DIR__/tpch_json/supplier.json', records=false)
loop i 1 9;

CREATE VIEW supplier AS
SELECT
json['s_suppkey']::INTEGER AS s_suppkey,
json['s_name']::VARCHAR AS s_name,
json['s_address']::VARCHAR AS s_address,
json['s_nationkey']::INTEGER AS s_nationkey,
json['s_phone']::VARCHAR AS s_phone,
json['s_acctbal']::DECIMAL(15,2) AS s_acctbal,
json['s_comment']::VARCHAR AS s_comment,
FROM
read_json_auto('__TEST_DIR__/tpch_json/supplier.json', records=false)
loop i 1 9;

CALL dbgen(sf=0.01);

SELECT * FROM lineitem ORDER BY ALL;

CREATE TABLE lineitem_j AS SELECT JSON_QUOTE({'_0': l_orderkey, '_1': l_partkey, '_2': l_suppkey, '_3': l_linenumber, '_4': l_quantity, '_5': l_extendedprice, '_6': l_discount, '_7': l_tax, '_8': l_returnflag, '_9': l_linestatus, '_10': l_shipdate, '_11': l_commitdate, '_12': l_receiptdate, '_13': l_shipinstruct, '_14': l_shipmode, '_15': l_comment}) AS j FROM lineitem;

SELECT JSON_STRUCTURE(j) FROM lineitem_j LIMIT 1;

WITH transformed AS (SELECT JSON_TRANSFORM(j, '{"l_orderkey":"INTEGER","l_partkey":"INTEGER","l_suppkey":"INTEGER","l_linenumber":"INTEGER","l_quantity":"DECIMAL(15,2)","l_extendedprice":"DECIMAL(15,2)","l_discount":"DECIMAL(15,2)","l_tax":"DECIMAL(15,2)","l_returnflag":"VARCHAR","l_linestatus":"VARCHAR","l_shipdate":"DATE","l_commitdate":"DATE","l_receiptdate":"DATE","l_shipinstruct":"VARCHAR","l_shipmode":"VARCHAR","l_comment":"VARCHAR"}') AS j FROM lineitem_j) SELECT j.l_orderkey, j.l_partkey, j.l_suppkey, j.l_linenumber, j.l_quantity, j.l_extendedprice, j.l_discount, j.l_tax, j.l_returnflag, j.l_linestatus, j.l_shipdate, j.l_commitdate, j.l_receiptdate, j.l_shipinstruct, j.l_shipmode, j.l_comment FROM transformed ORDER BY ALL;

WITH transformed AS (SELECT JSON_TRANSFORM(j, '{"l_orderkey":"INTEGER","l_partkey":"INTEGER","l_suppkey":"INTEGER","l_linenumber":"INTEGER","l_quantity":"DECIMAL(15,2)","l_extendedprice":"DECIMAL(15,2)","l_discount":"DECIMAL(15,2)","l_tax":"DECIMAL(15,2)","l_returnflag":"VARCHAR","l_linestatus":"VARCHAR","l_shipdate":"DATE","l_commitdate":"DATE","l_receiptdate":"DATE","l_shipinstruct":"VARCHAR","l_shipmode":"VARCHAR","l_comment":"VARCHAR"}') AS j FROM lineitem_j) SELECT j.l_returnflag, j.l_linestatus, SUM(j.l_quantity) AS sum_qty, SUM(j.l_extendedprice) AS sum_base_price, SUM(j.l_extendedprice * (1 - j.l_discount)) AS sum_disc_price, SUM(j.l_extendedprice * (1 - j.l_discount) * (1 + j.l_tax)) AS sum_charge, AVG(j.l_quantity) AS avg_qty, AVG(j.l_extendedprice) AS avg_price, AVG(j.l_discount) AS avg_disc, COUNT(*) AS count_order FROM transformed WHERE j.l_shipdate <= CAST('1998-09-02' AS DATE) GROUP BY j.l_returnflag, j.l_linestatus ORDER BY j.l_returnflag, j.l_linestatus;

CALL dbgen(sf=0.1);

SELECT * FROM lineitem ORDER BY ALL;

CREATE TABLE lineitem_j AS SELECT JSON_QUOTE({'_0': l_orderkey, '_1': l_partkey, '_2': l_suppkey, '_3': l_linenumber, '_4': l_quantity, '_5': l_extendedprice, '_6': l_discount, '_7': l_tax, '_8': l_returnflag, '_9': l_linestatus, '_10': l_shipdate, '_11': l_commitdate, '_12': l_receiptdate, '_13': l_shipinstruct, '_14': l_shipmode, '_15': l_comment}) AS j FROM lineitem;

SELECT JSON_STRUCTURE(j) FROM lineitem_j LIMIT 1;

WITH transformed AS (SELECT JSON_TRANSFORM(j, '{"l_orderkey":"INTEGER","l_partkey":"INTEGER","l_suppkey":"INTEGER","l_linenumber":"INTEGER","l_quantity":"DECIMAL(15,2)","l_extendedprice":"DECIMAL(15,2)","l_discount":"DECIMAL(15,2)","l_tax":"DECIMAL(15,2)","l_returnflag":"VARCHAR","l_linestatus":"VARCHAR","l_shipdate":"DATE","l_commitdate":"DATE","l_receiptdate":"DATE","l_shipinstruct":"VARCHAR","l_shipmode":"VARCHAR","l_comment":"VARCHAR"}') AS j FROM lineitem_j) SELECT j.l_orderkey, j.l_partkey, j.l_suppkey, j.l_linenumber, j.l_quantity, j.l_extendedprice, j.l_discount, j.l_tax, j.l_returnflag, j.l_linestatus, j.l_shipdate, j.l_commitdate, j.l_receiptdate, j.l_shipinstruct, j.l_shipmode, j.l_comment FROM transformed ORDER BY ALL;

WITH transformed AS (SELECT JSON_TRANSFORM(j, '{"l_orderkey":"INTEGER","l_partkey":"INTEGER","l_suppkey":"INTEGER","l_linenumber":"INTEGER","l_quantity":"DECIMAL(15,2)","l_extendedprice":"DECIMAL(15,2)","l_discount":"DECIMAL(15,2)","l_tax":"DECIMAL(15,2)","l_returnflag":"VARCHAR","l_linestatus":"VARCHAR","l_shipdate":"DATE","l_commitdate":"DATE","l_receiptdate":"DATE","l_shipinstruct":"VARCHAR","l_shipmode":"VARCHAR","l_comment":"VARCHAR"}') AS j FROM lineitem_j) SELECT j.l_returnflag, j.l_linestatus, SUM(j.l_quantity) AS sum_qty, SUM(j.l_extendedprice) AS sum_base_price, SUM(j.l_extendedprice * (1 - j.l_discount)) AS sum_disc_price, SUM(j.l_extendedprice * (1 - j.l_discount) * (1 + j.l_tax)) AS sum_charge, AVG(j.l_quantity) AS avg_qty, AVG(j.l_extendedprice) AS avg_price, AVG(j.l_discount) AS avg_disc, COUNT(*) AS count_order FROM transformed WHERE j.l_shipdate <= CAST('1998-09-02' AS DATE) GROUP BY j.l_returnflag, j.l_linestatus ORDER BY j.l_returnflag, j.l_linestatus;

start AS transaction;

CALL dbgen(sf=1);

COPY lineitem TO '__TEST_DIR__/lineitem.json';

ROLLBACK;

CREATE VIEW lineitem_struct AS SELECT FROM_JSON(json, '{
"l_orderkey":"INTEGER",
"l_partkey":"INTEGER",
"l_suppkey":"INTEGER",
"l_linenumber":"INTEGER",
"l_quantity":"INTEGER",
"l_extendedprice":"DECIMAL(15,2)",
"l_discount":"DECIMAL(15,2)",
"l_tax":"DECIMAL(15,2)",
"l_returnflag":"VARCHAR",
"l_linestatus":"VARCHAR",
"l_shipdate":"DATE",
"l_commitdate":"DATE",
"l_receiptdate":"DATE",
"l_shipinstruct":"VARCHAR",
"l_shipmode":"VARCHAR",
"l_comment":"VARCHAR"
}') AS j FROM READ_NDJSON_OBJECTS('__TEST_DIR__/lineitem.json');

CREATE VIEW lineitem AS SELECT j['l_orderkey'] AS l_orderkey, j['l_partkey'] AS l_partkey, j['l_suppkey'] AS l_suppkey, j['l_linenumber'] AS l_linenumber, j['l_quantity'] AS l_quantity, j['l_extendedprice'] AS l_extendedprice, j['l_discount'] AS l_discount, j['l_tax'] AS l_tax, j['l_returnflag'] AS l_returnflag, j['l_linestatus'] AS l_linestatus, j['l_shipdate'] AS l_shipdate, j['l_commitdate'] AS l_commitdate, j['l_receiptdate'] AS l_receiptdate, j['l_shipinstruct'] AS l_shipinstruct, j['l_shipmode'] AS l_shipmode, j['l_comment'] AS l_comment FROM lineitem_struct;

PRAGMA TPCH(1);

PRAGMA enable_verification;

COPY (SELECT '{}') TO '__TEST_DIR__/empty_object.json' WITH (FORMAT CSV, HEADER FALSE);

SELECT TYPEOF(json) FROM "__TEST_DIR__/empty_object.json";

SELECT TYPEOF(json) FROM READ_JSON('__TEST_DIR__/empty_object.json', map_inference_threshold = -1);

SELECT * FROM "data/json/internal_3197.json";

PRAGMA enable_verification;

CREATE TABLE test AS SELECT CAST({'i': range} AS JSON) AS j FROM RANGE(0, 10);

SELECT MIN(j), MAX(j) FROM test;

PRAGMA enable_verification;

CREATE TABLE todos (userId UBIGINT, id UBIGINT, title TEXT, completed BOOLEAN);

INSERT INTO todos VALUES (42, 42, 'duck', TRUE);

COPY todos TO '__TEST_DIR__/todos.json' WITH (ARRAY);

PRAGMA enable_verification;

SELECT * FROM READ_JSON('data/json/example_n.ndjson', columns = {'id': CAST(NULL AS TEXT), 'name': CAST(NULL AS TEXT)});

CREATE OR REPLACE TABLE json_test AS SELECT * FROM READ_JSON_AUTO('data/json/10751.json', format = 'newline_delimited');

CREATE TABLE json_test AS SELECT * FROM READ_JSON_AUTO('data/json/10751.json', format = 'newline_delimited', ignore_errors = TRUE);

SELECT * FROM json_test;

SELECT * FROM READ_JSON_AUTO('data/json/11152.json');

SELECT * FROM READ_JSON_AUTO('data/json/arr.json', columns = {'v': 'VARCHAR', 'k': 'VARCHAR'});

SELECT * FROM READ_JSON_AUTO('data/json/arr.json', columns = {'v': 'VARCHAR', 'k': 'VARCHAR'}, ignore_errors = TRUE);

SELECT * FROM READ_JSON_AUTO('data/json/arr.json', columns = {'v': 'VARCHAR'});

COPY (SELECT '{"col": 277447099861456945273576150847928801582}') TO '__TEST_DIR__/10866.json' WITH (format csv, quote '', header 0);

SELECT col, HEX(col) FROM READ_JSON('__TEST_DIR__/10866.json', columns = {'col': 'uhugeint'});

SELECT JSON_TYPE(JSON('null')) = 'NULL';

SELECT JSON_TYPE(JSON('{"a": null}'), '/a') = 'NULL';

SELECT JSON_TYPE(JSON('{"a": null}'), '$.a') = 'NULL';

SELECT JSON_TYPE(JSON('{"a":1,"b":null}'), p), JSON_TYPE(JSON('{"a":1,"b":null}'), 'b') FROM (VALUES ('b')) AS t(p);

SELECT UNNEST(JSON_TYPE(JSON('{"a": null}'), ['$.a', '$.a'])) = 'NULL';

SELECT TYPEOF(field1), TYPEOF(field2) FROM "data/parquet-testing/parquet_with_json.parquet" LIMIT 1;

COPY (SELECT * FROM READ_NDJSON('data/json/12188.ndjson', maximum_depth = 1)) TO '__TEST_DIR__/my.parquet';

SELECT TYPEOF(field1), TYPEOF(field2) FROM "__TEST_DIR__/my.parquet" LIMIT 1;

CREATE TABLE tbl (test STRUCT(one BIGINT, two TEXT));

INSERT INTO tbl VALUES ({'one': 1, 'two': 2}), (NULL);

COPY tbl TO '__TEST_DIR__/fewnulls.json';

INSERT INTO tbl SELECT NULL FROM RANGE(0, 9);

COPY tbl TO '__TEST_DIR__/manynulls.json';

SELECT TYPEOF(test) FROM "__TEST_DIR__/fewnulls.json" LIMIT 1;

SELECT TYPEOF(test) FROM "__TEST_DIR__/manynulls.json" LIMIT 1;

COPY (SELECT CAST(range AS BIGINT) AS id, CAST(range AS TEXT) AS name FROM RANGE(0, 0)) TO '__TEST_DIR__/t1.json.gz' WITH (format json, compression gzip);

COPY (SELECT id, name FROM (VALUES (1, 'bob'), (2, 'tom')) AS tbl(id, name)) TO '__TEST_DIR__/t2.json.gz' WITH (format json, compression gzip);

SELECT * FROM READ_NDJSON_AUTO(['__TEST_DIR__/t1.json.gz', '__TEST_DIR__/t2.json.gz']);

SELECT * FROM READ_NDJSON(['__TEST_DIR__/t1.json.gz', '__TEST_DIR__/t2.json.gz'], columns = {'id': 'int64', 'name': 'varchar'});

SELECT * FROM READ_JSON_OBJECTS('data/json/13725/month=*/*.json', hive_partitioning = TRUE, format = auto, hive_types = {'month': int}, filename = TRUE) WHERE month = 7;

SELECT COUNT(*) FROM READ_JSON_OBJECTS('data/json/13725/month=*/*.json', hive_partitioning = TRUE, format = auto, hive_types = {'month': int}, filename = TRUE) WHERE month = 7;

SELECT * FROM READ_JSON('data/json/13725/month=*/*.json', hive_partitioning = TRUE, format = auto, hive_types = {'month': int}, filename = TRUE) WHERE month = 7;

SELECT COUNT(*) FROM READ_JSON('data/json/13725/month=*/*.json', hive_partitioning = TRUE, format = auto, hive_types = {'month': int}, filename = TRUE) WHERE month = 7;

PRAGMA enable_verification;

SELECT '{"Status / SubStatus": "test"}' -> '$."Status / SubStatus"';

WITH path AS (SELECT 'Status / SubStatus' AS p) SELECT '{"Status / SubStatus": "test"}' -> p FROM path;

SELECT '{"\"Status / SubStatus\"": "test"}' -> '$."Status / SubStatus"';

WITH path AS (SELECT NULL AS p) SELECT '{"\"Status / SubStatus\"": "test"}' -> p FROM path;

SELECT '{"Status / SubStatus": "test"}' -> '$."Status / SubStatus"';

WITH path AS (SELECT '$."Status / SubStatus"' AS p) SELECT '{"Status / SubStatus": "test"}' -> p FROM path;

SELECT '[1, 2, 3]' -> '$[0]';

WITH path AS (SELECT 0 AS p) SELECT '[1, 2, 3]' -> p FROM path;

SELECT '[1, 2, 3]' -> '0';

WITH path AS (SELECT '0' AS p) SELECT '[1, 2, 3]' -> p FROM path;

SELECT columns.v4_c6 FROM READ_NDJSON_AUTO('data/json/14167.json');

SELECT '{ "foo": ["bar", "baz"], "": 0 }' -> '/';

SELECT TO_JSON(CAST(1 AS INT128) << 100);

SELECT CAST((CAST(1 AS INT128) << 100) AS JSON);

SELECT TO_JSON(CAST(1 AS UINT128) << 100);

SELECT CAST((CAST(1 AS UINT128) << 100) AS JSON);

SELECT TO_JSON(CAST((CAST(1 AS UINT128) << 100) AS DECIMAL(38, 0)));

SELECT CAST(CAST((CAST(1 AS UINT128) << 100) AS DECIMAL(38, 0)) AS JSON);

SELECT TO_JSON(CAST((CAST(1 AS INT128) << 100) AS VARINT));

SELECT CAST(CAST((CAST(1 AS INT128) << 100) AS VARINT) AS JSON);

WITH t1 AS (SELECT 9007199254740993 AS id UNION ALL SELECT 1.2 AS id) SELECT TO_JSON(id) AS json_objects FROM t1 AS t;

WITH t1 AS (SELECT 9007199254740993 AS id UNION ALL SELECT 1.2 AS id) SELECT CAST(id AS JSON) AS json_objects FROM t1 AS t;

PRAGMA enable_verification;

SELECT * FROM "data/json/15601/fragment*.json";

PRAGMA enable_verification;

SELECT COUNT(*) FROM "data/json/sample_utf8_bom.json";

PRAGMA enable_verification;

WITH cte AS (SELECT CAST('{"a":1}' AS JSON) AS j) SELECT TYPEOF(j[2 : 3]), TYPEOF(SUBSTRING(j, 2, 3)) FROM cte;

PRAGMA enable_verification;

COPY (SELECT '00000000000000000000000000000000' AS md5) TO '__TEST_DIR__/issue16684.json';

SELECT md5, TYPEOF(md5) FROM "__TEST_DIR__/issue16684.json";

COPY (SELECT '00000000-0000-0000-0000-000000000000' AS id) TO '__TEST_DIR__/issue16684.json';

SELECT id, TYPEOF(id) FROM "__TEST_DIR__/issue16684.json";

PRAGMA enable_verification;

SELECT CAST(FROM_HEX('aa') AS JSON);

SELECT JSON(FROM_HEX('aa'));

SELECT CAST(CAST('1101' AS BIT) AS JSON);

SELECT JSON(CAST('1101' AS BIT));

PRAGMA enable_verification;

SELECT * FROM "data/json/duplicate_column_names.json";

DESCRIBE SELECT * FROM "data/json/duplicate_column_names.json";

SELECT CAST(MAX(JSON_ARRAY_LENGTH(filter_keystage)) AS INT) - 1 FROM READ_JSON_AUTO('data/json/filter_keystage.ndjson');

WITH RECURSIVE nums AS (SELECT 0 AS n UNION ALL SELECT n + 1 FROM nums WHERE n < 5) SELECT * FROM nums;

CREATE TABLE j2 (id INT, json TEXT, src TEXT);

INSERT INTO j2 (id, json, src) VALUES (3, '[
{
"id": "0001",
"type": "donut",
"name": "Cake",
"ppu": 0.55,
"batters":
{
"batter":
[
{ "id": "1001", "type": "Regular" },
{ "id": "1002", "type": "Chocolate" },
{ "id": "1003", "type": "Blueberry" },
{ "id": "1004", "type": "Devil''s Food" }
]
},
"topping":
[
{ "id": "5001", "type": "None" },
{ "id": "5002", "type": "Glazed" },
{ "id": "5005", "type": "Sugar" },
{ "id": "5007", "type": "Powdered Sugar" },
{ "id": "5006", "type": "Chocolate with Sprinkles" },
{ "id": "5003", "type": "Chocolate" },
{ "id": "5004", "type": "Maple" }
]
},
{
"id": "0002",
"type": "donut",
"name": "Raised",
"ppu": 0.55,
"batters":
{
"batter":
[
{ "id": "1001", "type": "Regular" }
]
},
"topping":
[
{ "id": "5001", "type": "None" },
{ "id": "5002", "type": "Glazed" },
{ "id": "5005", "type": "Sugar" },
{ "id": "5003", "type": "Chocolate" },
{ "id": "5004", "type": "Maple" }
]
},
{
"id": "0003",
"type": "donut",
"name": "Old Fashioned",
"ppu": 0.55,
"batters":
{
"batter":
[
{ "id": "1001", "type": "Regular" },
{ "id": "1002", "type": "Chocolate" }
]
},
"topping":
[
{ "id": "5001", "type": "None" },
{ "id": "5002", "type": "Glazed" },
{ "id": "5003", "type": "Chocolate" },
{ "id": "5004", "type": "Maple" }
]
}
]', 'https://adobe.github.io/Spry/samples/data_region/JSONDataSetSample.html');

SELECT LENGTH(json) FROM j2;

SET threads = 8;

SET memory_limit = '200MiB';

SELECT * FROM READ_JSON_OBJECTS('data/json/example_rn.ndjson', format = 'nd');

SET memory_limit = '50MiB';

SELECT * FROM READ_JSON_OBJECTS('data/json/example_rn.ndjson', format = 'nd');

CREATE TEMPORARY TABLE j1 (x JSON);

INSERT INTO j1 (x) VALUES ('[1, 2, 3]');

PRAGMA enable_verification;

CREATE TABLE t2 (blobs JSON[]);

INSERT INTO t2 VALUES (JSON('[1,2]'));

SELECT * FROM t2;

SELECT CAST(JSON('[1,2]') AS JSON[]);

SELECT CAST(['boom'] AS JSON[]);

SELECT CAST(['[1, 2]', '[3, 4]'] AS JSON[]);

SELECT CAST(['[1, 2]', '[3, 4]'] AS JSON[]);

SELECT CAST(['[1, 2]', '[3, 4]'] AS JSON[]);

SELECT CAST(['[1, 2]', '[3, 4]'] AS JSON[]);

SELECT CAST(['[1, 2]', '[3, 4]'] AS JSON[]);

SELECT CAST(['[1, 2]', '[3, 4]'] AS JSON[]);

SELECT CAST(MAP(['42'], ['88']) AS MAP(JSON, JSON));

SELECT CAST('{42=88}' AS MAP(JSON, JSON));

SELECT CAST('42' AS UNION(u JSON));

SELECT CAST(CAST('42' AS UNION(u TEXT)) AS UNION(u JSON));

SELECT CAST(['42'] AS UNION(u JSON)[]);

SELECT CAST(CAST('42' AS UNION(u TEXT)) AS JSON);

SELECT TRY_CAST('{"duck":42' AS JSON);

SELECT CAST({'duck': 42} AS JSON);

SELECT CAST(CAST('{"duck":42}' AS JSON) AS STRUCT(duck INT));

SELECT CAST(['duck'] AS JSON);

SELECT CAST(CAST('["duck"]' AS JSON) AS TEXT[]);

SELECT CAST(MAP(['duck'], [42]) AS JSON);

SELECT CAST(CAST('{"duck":42}' AS JSON) AS MAP(TEXT, INT));

SELECT CAST(CAST('{"duck":42}' AS JSON) AS STRUCT(goose INT));

SELECT CAST(CAST('["a", "b", "c"]' AS JSON) AS INT[]);

SELECT CAST(CAST('{"duck":42}' AS JSON) AS MAP(INT, INT));

SELECT TRY_CAST(CAST('{"duck":42}' AS JSON) AS STRUCT(goose INT));

SELECT TRY_CAST(CAST('["a", "b", "c"]' AS JSON) AS INT[]);

SELECT TRY_CAST(CAST('{"duck":42}' AS JSON) AS MAP(INT, INT));

SELECT TRY_CAST(CAST('{"42":"duck"}' AS JSON) AS MAP(INT, INT));

CREATE TABLE structs (v STRUCT(duck INT));

CREATE TABLE lists (v TEXT[]);

CREATE TABLE maps (v MAP(TEXT, INT));

INSERT INTO structs VALUES (CAST('{"duck":42}' AS JSON));

INSERT INTO lists VALUES (CAST('["duck"]' AS JSON));

INSERT INTO maps VALUES (CAST('{"duck":42}' AS JSON));

SELECT * FROM structs;

SELECT * FROM lists;

SELECT * FROM maps;

CREATE TABLE jsons (j JSON);

INSERT INTO jsons SELECT * FROM structs;

INSERT INTO jsons SELECT * FROM lists;

INSERT INTO jsons SELECT * FROM maps;

SELECT * FROM jsons;

create type small_enum as enum ('DUCK_DUCK_ENUM', 'GOOSE');

create type small_enum as enum ('DUCK_DUCK_ENUM', 'GOOSE');

create type small_enum as enum ('DUCK_DUCK_ENUM', 'GOOSE');

create type small_enum as enum ('DUCK_DUCK_ENUM', 'GOOSE');

SELECT * FROM roundtrip;

SELECT * FROM roundtrip;

SELECT * FROM roundtrip;

SELECT * FROM roundtrip;

SELECT * FROM roundtrip;

SELECT CAST('' AS JSON);

SELECT CAST('          ' AS JSON);

SELECT CAST(CHR(0) AS JSON);

SELECT CAST(('duck' || CHR(0)) AS JSON);

PRAGMA enable_verification;

CREATE TABLE test (j TEXT);

INSERT INTO test VALUES ('{}'), ('[]'), ('[1, 2, 3]');

SELECT JSON_ARRAY_LENGTH(j) FROM test;

SELECT JSON_ARRAY_LENGTH(j, '$[1]') FROM test;

SELECT JSON_ARRAY_LENGTH('[1,2,3,4]');

SELECT JSON_ARRAY_LENGTH('[1,2,3,4]', '$');

SELECT JSON_ARRAY_LENGTH('[1,2,3,4]', '$[2]');

SELECT JSON_ARRAY_LENGTH('{"one":[1,2,3]}');

SELECT JSON_ARRAY_LENGTH('{"one":[1,2,3]}', '$.one');

SELECT JSON_ARRAY_LENGTH('{"one":[1,2,3]}', '$.two');

CREATE TABLE testjson AS SELECT JSON('{ "key" : "value" }') AS example;

SELECT (SELECT (example) -> k AS v FROM (SELECT 'key' AS k) AS keys) FROM testjson;

SELECT (SELECT example -> k AS v FROM (SELECT 'key' AS k) AS keys) FROM testjson;

SELECT (SELECT (JSON('{ "key" : "value" }')) -> k AS v FROM (SELECT 'key' AS k) AS keys);

PRAGMA enable_verification;

SELECT JSON_CONTAINS('{"a": 1, "b": 2, "c": {"d": 3}}', '{"c": {"d": 3}}') AS Result;

SELECT JSON_CONTAINS('{"a": 1, "b": 2, "c": {"d": 3}}', '"c": {"d": 3}') AS Result;

SELECT JSON_CONTAINS('[1, 2]', '[]');

SELECT JSON_CONTAINS('[1, 2]', '2');

SELECT JSON_CONTAINS('[1, 2]', '[1, 2]');

SELECT JSON_CONTAINS('[1, 2, 3]', '[1, 2]');

SELECT JSON_CONTAINS('[1, 2]', '[2, 1]');

SELECT JSON_CONTAINS('{"a": {"b": [{"c": 1, "d": 2}]}}', '{"d": 2}');

SELECT JSON_CONTAINS('{"a": {"b": [{"c": 1, "d": 2}]}}', '{"c": 1}');

SELECT JSON_CONTAINS('{"a": {"b": [{"c": 1, "d": 2}]}}', '{"c": 1, "d": 2}');

SELECT JSON_CONTAINS('{"a": {"b": [{"c": 1, "d": 2}]}}', '[{"d": 2, "c": 1}]');

SELECT JSON_CONTAINS('{"a": {"b": [{"c": 1, "d": 2}]}}', '{"a": {"b": []}}');

SELECT JSON_CONTAINS('{"a": {"b": [{"c": 1, "d": 2}]}}', '[]');

SELECT JSON_CONTAINS(JSON('{"key":"value"}'), JSON('{"blah":"value"}'));

SELECT JSON_CONTAINS('{"a": {"b": 42}}', '{"a": 42}');

PRAGMA enable_verification;

SELECT TRY_CAST('{{P{P{{{{ASD{AS{D{' AS JSON);

SELECT JSON_QUOTE({'n': 42});

SELECT TO_JSON({'n': 42});

SELECT TO_JSON({'n': 42}, {'extra': 'argument'});

SELECT TO_JSON(UNION_VALUE(n := 42));

SELECT TO_JSON(CAST(UNION_VALUE(a := NULL) AS UNION(a INT, b TEXT)));

SELECT TO_JSON(CAST(UNION_VALUE(b := 'abc') AS UNION(a INT, b TEXT, c REAL)));

SELECT TO_JSON(CAST(i AS UNION(a TEXT, b BOOLEAN))) FROM (VALUES (NULL), ('test')) AS tbl(i);

SELECT TO_JSON(CAST(NULL AS UNION(a TEXT, b BOOLEAN)));

SELECT JSON_OBJECT('duck', 42);

SELECT JSON_OBJECT('duck', CAST('{"goose": [1, 2, 3, 4, 5, 6, 7]}' AS JSON));

SELECT JSON_OBJECT('nested', {'duck': 42});

SELECT JSON_OBJECT('nested', [{'duck': 42}, NULL]);

SELECT JSON_OBJECT('nested', MAP(['duck'], [42]));

SELECT JSON_OBJECT('nested', MAP(['duck', 'goose'], [42, 7]));

SELECT JSON_OBJECT('nested', MAP(['0', 'goose'], [42, 7]));

SELECT JSON_OBJECT('nested', MAP(['duck', 'goose'], [NULL, 7]));

SELECT JSON_OBJECT('nested', [1, 2, 3]);

SELECT JSON_OBJECT('nested', {'nested2': [1, 2, 3]});

SELECT JSON_OBJECT('nested', [{'nested2': 1}, {'nested2': 2}, {'nested2': 3}]);

CREATE TABLE test (a INT, b DOUBLE, c TEXT, d INT[], e UINTEGER);

INSERT INTO test VALUES (0, 0.5, 'short', [0, 1, 2, 3, 4, 5, 6, 7, 9], 33), (42, 1, 'looooooooooooooong', [], 42), (-42, 0.42, 2, [1, 2, 3], 1111), (777, 19.96, 'duck', NULL, 1), (-777, 4.2, 'goose', [4, 2], NULL);

SELECT JSON_QUOTE({'a': a, 'b': b, 'c': c, 'd': d, 'e': e}) FROM test;

SELECT JSON_ARRAY(a, b, c, d, e) FROM test;

SELECT JSON_OBJECT(a, a, b, b, c, c, d, d, e, e) FROM test;

SELECT JSON_QUOTE(MAP(LIST(a), LIST(b))) FROM test;

SELECT JSON_QUOTE(MAP(LIST(b), LIST(c))) FROM test;

SELECT JSON_QUOTE(MAP(LIST(c), LIST(d))) FROM test;

SELECT JSON_QUOTE(MAP(LIST(d), LIST(e))) FROM test;

SELECT JSON_QUOTE(MAP(LIST(c), LIST(e))) FROM test;

SELECT ROW_TO_JSON({'a': 42});

SELECT ROW_TO_JSON({'a': 42}, FALSE);

SELECT ROW_TO_JSON(NULL);

SELECT ROW_TO_JSON([42]);

SELECT ARRAY_TO_JSON([42]);

SELECT ARRAY_TO_JSON([42], [21]);

SELECT ARRAY_TO_JSON(NULL);

SELECT ARRAY_TO_JSON({'a': 42});

SELECT JSON_ARRAY(1, JSON_OBJECT('abc', 2.5, 'def', NULL, 'ghi', 'hello'), 99);

SELECT JSON_OBJECT('a', 1, 'b', 2.5, 'c', NULL, 'd', 'String Test');

SELECT JSON_OBJECT('a', 1, 'b', 2.5, 'c', NULL, 'd', 'String Test');

SELECT JSON_ARRAY(1, 2.5, NULL, 'hello');

SELECT JSON_ARRAY(1, '{"abc":2.5,"def":null,"ghi":hello}', 99);

SELECT JSON_ARRAY(1, JSON_QUOTE('{"abc":2.5,"def":null,"ghi":"hello"}'), 99);

SELECT JSON_ARRAY(1, JSON_OBJECT('abc', 2.5, 'def', NULL, 'ghi', 'hello'), 99);

SELECT JSON_OBJECT('ex', '[52,3.14159]');

SELECT JSON_OBJECT('ex', CAST('[52,3.14159]' AS JSON));

SELECT JSON_OBJECT('ex', JSON_ARRAY(52, 3.14159));

SELECT JSON_OBJECT('a', 2, 'c', 4);

SELECT JSON_OBJECT('a', 2, 'c', '{e:5}');

SELECT JSON_OBJECT('a', 2, 'c', JSON_OBJECT('e', 5));

SELECT JSON_ARRAY(1, 2, '3', 4);

SELECT JSON_ARRAY('[1,2]');

SELECT JSON_ARRAY(JSON_ARRAY(1, 2));

SELECT JSON_ARRAY(1, NULL, '3', '[4,5]', '{"six":7.7}');

SELECT JSON_ARRAY(1, NULL, '3', CAST('[4,5]' AS JSON), CAST('{"six":7.7}' AS JSON));

SELECT JSON_ARRAY(-9223372036854775808, 9223372036854775807, 0, 1, -1, 0.0, 1.0, -1.0, -1e99, 2e100, 'one', 'two', 'three', 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, NULL, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 'abcdefghijklmnopqrstuvwyxzABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwyxzABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwyxzABCDEFGHIJKLMNOPQRSTUVWXYZ', 99);

SELECT CAST((MAP([5, 3, 4], ['a', 'b', 'c']), 2) AS JSON);

PRAGMA enable_verification;

SELECT JSON_STRUCTURE(JSON('{"duck":"goose"}').duck);

SELECT JSON('{"foo": null}').foo;

SELECT JSON('{"foo": null}').foo.bar;

SELECT JSON('null');

SELECT JSON('[null]')."0";

SELECT JSON('{"my_field": {"my_nested_field": ["goose", "duck"]}}').my_field.my_nested_field."1";

SELECT JSON('{"my_field": {"my_nested_field": ["goose", "duck"]}}').my_field.my_nested_field[1];

SELECT (CAST('{"my_field": {"my_nested_field": ["goose", "duck"]}}' AS JSON)).my_field.my_nested_field."1";

SELECT (CAST('{"my_field": {"my_nested_field": ["goose", "duck"]}}' AS JSON)).my_field.my_nested_field[1];

SELECT (CAST('{"my_field": {"my_nested_field": ["goose", "duck"]}}' AS JSON)).my_field.my_nested_field[-1];

SELECT (CAST('{"my_field": {"my_nested_field": ["goose", "duck"]}}' AS JSON)).my_field.my_nested_field[0 : 1];

SELECT JSON('{"my_field": {"my_nested_field": ["goose", "duck"]}}').my_field.my_nested_field[1];

SELECT JSON('{"my_field": {"my_nested_field": ["goose", "duckduckduckduck"]}}').my_field.my_nested_field[1];

SELECT (CAST('{"my_field": {"my_nested_field": ["goose", "duckduckduckduck"]}}' AS JSON)).my_field.my_nested_field[1];

SELECT JSON('{"my_field": {"my_nested_field": ["goose", "duckduckduckduck"]}}').my_field.my_nested_field[1];

SELECT JSON('[1, 2, 42]')."2";

SELECT JSON('[1, 2, 42]')[2];

SELECT CAST(JSON('[1, 2, 42]')[2] AS TEXT);

SELECT (CAST('{"my_field": {"my_nested_field": ["goose", "duck"]}}' AS JSON)).my_field.my_nested_field[1];

SELECT JSON('{"a":2,"c":[4,5,{"f":7}]}').c;

SELECT JSON('{"a":2,"c":[4,5,{"f":7}]}').c[2];

SELECT JSON('{"a":2,"c":[4,5,{"f":7}]}').c[2].f;

SELECT JSON('{"a":2,"c":[4,5,{"f":7}]}').x;

CREATE TABLE obj (x TEXT);

INSERT INTO obj VALUES ('{"a":1,"b":2}');

SELECT JSON(x).b FROM obj;

SELECT JSON(x)."b" FROM obj;

CREATE TABLE t12 (x TEXT);

INSERT INTO t12 (x) VALUES ('{"settings":
{"layer2":
{"hapax.legomenon":
{"forceDisplay":true,
"transliterate":true,
"add.footnote":true,
"summary.report":true},
"dis.legomenon":
{"forceDisplay":true,
"transliterate":false,
"add.footnote":false,
"summary.report":true},
"tris.legomenon":
{"forceDisplay":true,
"transliterate":false,
"add.footnote":false,
"summary.report":false}
}
}
}');

SELECT JSON(x).settings.layer2."tris.legomenon"."summary.report" FROM t12;

SELECT (CAST(x AS JSON)).settings.layer2."tris.legomenon"."summary.report" FROM t12;

SELECT JSON('{"foo": "bar"}').foo = 'bar';

SELECT JSON('{"foo": "bar"}').foo = '"bar"';

SELECT JSON('{"foo": 1}').foo = 1;

SELECT JSON('{"foo": "bar"}') = {'foo': 'bar'};

PRAGMA enable_verification;

SELECT JSON_EXISTS('{"duck": null}', '$.duck');

WITH path AS (SELECT '$.duck' AS p) SELECT JSON_EXISTS('{"duck": null}', p) FROM path;

SELECT JSON_EXISTS('{"duck": null}', '$.goose');

WITH path AS (SELECT '$.goose' AS p) SELECT JSON_EXISTS('{"duck": null}', p) FROM path;

SELECT JSON_EXISTS('{"duck": null}', ['$.duck', '$.goose']);

PRAGMA enable_verification;

SELECT JSON_STRUCTURE("{""duck"":""goose""}" -> 'duck');

SELECT '{"foo": null}' -> '$.foo';

SELECT '{"foo": null}' -> '$.foo.bar';

SELECT 'null' -> '$';

SELECT '[null]' -> '$[0]';

SELECT '{"my_field": {"my_nested_field": ["goose", "duck"]}}' -> '/my_field/my_nested_field/1';

SELECT '{"my_field": {"my_nested_field": ["goose", "duck"]}}' -> '/my_field/my_nested_field/1';

SELECT CAST('{"my_field": {"my_nested_field": ["goose", "duck"]}}' AS JSON) -> '/my_field/my_nested_field/1';

SELECT '{"my_field": {"my_nested_field": ["goose", "duck"]}}' ->> '/my_field/my_nested_field/1';

SELECT '{"my_field": {"my_nested_field": ["goose", "duck"]}}' ->> '/my_field/my_nested_field/1';

SELECT CAST('{"my_field": {"my_nested_field": ["goose", "duck"]}}' AS JSON) ->> '/my_field/my_nested_field/1';

SELECT '{"my_field": {"my_nested_field": ["goose", "duckduckduckduck"]}}' -> '/my_field/my_nested_field/1';

SELECT CAST('{"my_field": {"my_nested_field": ["goose", "duckduckduckduck"]}}' AS JSON) -> '/my_field/my_nested_field/1';

SELECT '{"my_field": {"my_nested_field": ["goose", "duckduckduckduck"]}}' ->> '/my_field/my_nested_field/1';

SELECT CAST('{"my_field": {"my_nested_field": ["goose", "duckduckduckduck"]}}' AS JSON) ->> '/my_field/my_nested_field/1';

SELECT '[1, 2, 42]' -> '$[2]';

SELECT '[1, 2, 42]' ->> '$[2]';

SELECT (CAST('{"my_field": {"my_nested_field": ["goose", "duck"]}}' AS JSON) -> '$.my_field' -> '$.my_nested_field') ->> '$[1]';

SELECT '{"a":2,"c":[4,5,{"f":7}]}' -> '$';

SELECT '{"a":2,"c":[4,5,{"f":7}]}' -> '$.c';

SELECT '{"a":2,"c":[4,5,{"f":7}]}' -> '$.c[2]';

SELECT '{"a":2,"c":[4,5,{"f":7}]}' -> '$.c[2].f';

SELECT '{"a":2,"c":[4,5,{"f":7}]}' -> '$.x';

WITH tbl AS (SELECT '{"a":2,"c":[4,5],"f":7}' AS j, ['$.c', '$.a'] AS p) SELECT j -> p;

SELECT '{"a":2,"c":[4,5],"f":7}' -> ['$.c', '$.a'];

SELECT '{"a":2,"c":[4,5,{"f":7}]}' -> ['$.x', '$.a'];

SELECT NULL -> ['$.x', '$.a'];

CREATE TABLE t1 (j TEXT);

INSERT INTO t1 (j) VALUES ('{"a":1,"b":[1,[2,3],4],"c":99}');

SELECT j -> '$.b[#]' FROM t1;

SELECT j -> '$.b[#-0]' AS a, a = (j -> '$.b[0]') FROM t1;

SELECT j -> '$.b[#-1]' AS a, a = (j -> '$.b[-1]') FROM t1;

SELECT j -> '$.b[#-2]' AS a, a = (j -> '$.b[-2]') FROM t1;

SELECT j -> '$.b[#-02]' AS a, a = (j -> '$.b[-2]') FROM t1;

SELECT j -> '$.b[#-3]' AS a, a = (j -> '$.b[-3]') FROM t1;

SELECT j -> '$.b[#-4]', j -> '$.b[-4]' FROM t1;

SELECT j -> '$.b[#-2][#-1]' AS a, a = (j -> '$.b[-2][-1]') FROM t1;

SELECT CAST(j AS JSON) -> '$.b[#-2][#-1]' AS a, a = (CAST(j AS JSON) -> '$.b[-2][-1]') FROM t1;

SELECT j -> ['$.b[0]', '$.b[#-1]'] AS a, a = (j -> ['$.b[0]', '$.b[-1]']) FROM t1;

SELECT CAST(j AS JSON) -> ['$.b[0]', '$.b[#-1]'] AS a, a = (CAST(j AS JSON) -> ['$.b[0]', '$.b[-1]']) FROM t1;

SELECT j -> '$.a[#-1]', j -> '$.a[-1]' FROM t1;

SELECT j -> '$.b[#-000001]' AS a, a = (j -> '$.b[-1]') FROM t1;

SELECT CAST(j AS JSON) -> '$.b[#-000001]' AS a, a = (CAST(j AS JSON) -> '$.b[-1]') FROM t1;

SELECT j -> '$.b[#-]' FROM t1;

SELECT j -> '$.b[#-]' FROM t1;

SELECT j -> '$.b[#9]' FROM t1;

SELECT j -> '$.b[#+2]' FROM t1;

SELECT j -> '$.b[#-1' FROM t1;

SELECT j -> '$.b[#-1x]' FROM t1;

CREATE TABLE obj (x TEXT);

INSERT INTO obj VALUES ('{"a":1,"b":2}');

SELECT x -> '$.b' FROM obj;

SELECT x -> '$.b' FROM obj;

CREATE TABLE t12 (x TEXT);

INSERT INTO t12 (x) VALUES ('{"settings":
{"layer2":
{"hapax.legomenon":
{"forceDisplay":true,
"transliterate":true,
"add.footnote":true,
"summary.report":true},
"dis.legomenon":
{"forceDisplay":true,
"transliterate":false,
"add.footnote":false,
"summary.report":true},
"tris.legomenon":
{"forceDisplay":true,
"transliterate":false,
"add.footnote":false,
"summary.report":false}
}
}
}');

SELECT x -> '$.settings.layer2."tris.legomenon"."summary.report"' FROM t12;

SELECT CAST(x AS JSON) -> '$.settings.layer2."tris.legomenon"."summary.report"' FROM t12;

CREATE TABLE test5063 AS SELECT '{"a": 1, "b": 2}' AS js;

PREPARE q1 as SELECT js->CAST(? AS STRING) FROM test5063;

EXECUTE q1('a');

SELECT JSON('{"j[so]n_\"key": 67}') ->> '$."j[so]n_\"key"';

SELECT '{"\"duck\"": 42}' -> '$."\"duck\""';

SELECT '{"\"du\\ck\"": 42}' -> '$."\"du\\ck\""';

SELECT '{"\"du\\ck\"": 42}' -> '$."\"du\ck\""';

SELECT '{"du\\ck": 42}' -> '$."du\ck"';

SELECT '{"\"du\nck\"": 42}' -> '$."\"du\nck\""';

SELECT '{"\"du\nck\"": 42}' -> ('$."\"du' || CHR(10) || 'ck\""');

SELECT '{"duck":null}' -> '$.duck';

SELECT '{"duck":null}' ->> '$.duck';

SELECT '{"hello":1}' -> '$';

PRAGMA enable_verification;

SELECT JSON_KEYS('{"duck": 42}');

SELECT JSON_KEYS('{"duck": 42, "goose": 43}');

SELECT JSON_KEYS('["duck", "goose"]');

SELECT JSON_KEYS(NULL);

SELECT JSON_KEYS('{"duck": {"key1": 42}, "goose": {"key1": 42, "key2": 43}}', ['duck', 'goose']);

CREATE TABLE t1 AS SELECT range, CASE WHEN range % 2 = 0 THEN '{"duck": 42}' ELSE '{"duck": 42, "goose": 43}' END AS j FROM RANGE(0, 10000);

SELECT range % 2 AS g, SUM(LENGTH(JSON_KEYS(j))) AS c FROM t1 GROUP BY g ORDER BY ALL;

CREATE TABLE t2 AS SELECT range, '{"duck": {"key1": 42}, "goose": {"key1": 42, "key2": 43}}' AS j FROM RANGE(0, 10000);

SELECT SUM(LIST_SUM([LENGTH(l) FOR l IN JSON_KEYS(j, ['duck', 'goose'])])) AS s FROM t2;

PRAGMA enable_verification;

SELECT JSON_MERGE_PATCH('{"a": 1}', '{"a": 2}');

SELECT JSON_MERGE_PATCH('{"a": 1}', '{"b": 2}');

SELECT JSON_MERGE_PATCH('{"a": {"c": 1}}', '{"a": {"d": 2}}');

SELECT JSON_MERGE_PATCH('{"a": {"b": 1}}', '{"a": {"b": 2}}');

SELECT JSON_MERGE_PATCH('[1, 2]', '[true, false]');

SELECT JSON_MERGE_PATCH('{"name": "x"}', '{"id": 47}');

SELECT JSON_MERGE_PATCH('1', 'true');

SELECT JSON_MERGE_PATCH('[1, 2]', '{"id": 47}');

SELECT JSON_MERGE_PATCH('{ "a": 1, "b":2 }', '{ "a": 3, "c":4 }');

SELECT JSON_MERGE_PATCH('{ "a": 1, "b":2 }', '{ "a": 3, "c":4 }', '{ "a": 5, "d":6 }');

SELECT JSON_MERGE_PATCH('{"a":1, "b":2}', '{"b":null}');

SELECT JSON_MERGE_PATCH('{"a":{"x":1}}', '{"a":{"y":2}}');

SELECT JSON_MERGE_PATCH(NULL, '3');

SELECT JSON_MERGE_PATCH('3', NULL);

SELECT JSON_MERGE_PATCH(NULL, NULL);

SELECT JSON_MERGE_PATCH('{"a":1}', '{"b":2}', '{"c":3}');

SELECT JSON_MERGE_PATCH(NULL, '{"b":2}', '{"c":3}');

SELECT JSON_MERGE_PATCH('{"a":1}', NULL, '{"c":3}');

SELECT JSON_MERGE_PATCH('{"a":1}', '{"b":2}', NULL);

PRAGMA enable_verification;

SELECT JSON_PRETTY('[1,2,{"a":43,    "g":[true, true]}]') = '[
1,
2,
{
"a": 43,
"g": [
true,
true
]
}
]';

SELECT JSON_PRETTY(NULL);

SELECT JSON_PRETTY(CAST('null' AS JSON));

SELECT JSON_PRETTY(CAST('[1,2,null,   {"a": null},  42]' AS JSON)) = '[
1,
2,
null,
{
"a": null
},
42
]';

PRAGMA enable_verification;

SELECT JSON_STRUCTURE('42');

SELECT JSON_STRUCTURE('4.2');

SELECT JSON_STRUCTURE('null');

SELECT JSON_STRUCTURE('true');

SELECT JSON_STRUCTURE('"duck"');

SELECT JSON_STRUCTURE('{"a": 42}');

SELECT JSON_STRUCTURE('{"a": 4.2}');

SELECT JSON_STRUCTURE('{"a": "42"}');

SELECT JSON_STRUCTURE('{"a": "looooooooooooooooong"}');

SELECT JSON_STRUCTURE('{"a": null}');

SELECT JSON_STRUCTURE('{"a": true}');

SELECT JSON_STRUCTURE('{"a": []}');

SELECT JSON_STRUCTURE('{"a": [42]}');

SELECT JSON_STRUCTURE('{"a": {"b": 42}}');

SELECT JSON_STRUCTURE('[null,null]');

SELECT JSON_STRUCTURE('[true,null,false]');

SELECT JSON_STRUCTURE('[true,null,false,1]');

SELECT JSON_STRUCTURE('[true,null,false,1,-1]');

SELECT JSON_STRUCTURE('[true,null,false,1,-1,0.42]');

SELECT JSON_STRUCTURE('[true,null,false,1,-1,0.42,"42"]');

SELECT JSON_STRUCTURE('[{"a": 42}, {"a": null}]');

SELECT JSON_STRUCTURE('[{"a": 42}, {"b": 4.2}]');

SELECT JSON_STRUCTURE('[{"a": [42, null]}, {"a": [7]}]');

SELECT JSON_STRUCTURE('[{"a": [{"b": 42}, {"b": null}]}, {"a": [{"b": 7}]}]');

SELECT JSON_STRUCTURE('[{"a": [{"b": 42}, {"b": null}]}, {"a": [{"c": 7}]}]');

SELECT JSON_STRUCTURE('[1, [1]]');

SELECT JSON_STRUCTURE('[1, {"a": 1}]');

SELECT JSON_STRUCTURE('[[1], {"a": 1}]');

SELECT JSON_STRUCTURE('{"a": 42, "a": 7}');

CREATE TABLE test (j JSON);

INSERT INTO test VALUES ('{"family": "anatidae", "species": ["duck", "goose", "swan", null], "coolness": 1000}'), ('{"family": "canidae", "species": ["labrador", null, "bulldog", "shepherd"], "hair": true, "coolness": 999}'), (NULL), ('{"family": null, "species": null, "hair": null, "coolness": null}'), ('{"family": "felidae", "species": ["tiger", "lion", null, "british shorthair"], "hair": true, "coolness": 999}');

SELECT JSON_STRUCTURE(j) FROM test;

SELECT JSON_STRUCTURE('{"a": 1, "A": 1}');

PRAGMA enable_verification;

SELECT FROM_JSON('42', '"UBIGINT"');

SELECT FROM_JSON_STRICT('42', '"UBIGINT"');

SELECT FROM_JSON_STRICT('42', '"DATE"');

SELECT JSON_TRANSFORM('42', '42');

SELECT JSON_TRANSFORM('42', '"UBIGINT"');

SELECT JSON_TRANSFORM('4.2', '"DOUBLE"');

SELECT JSON_TRANSFORM('null', '"NULL"');

SELECT JSON_TRANSFORM('true', '"BOOLEAN"');

SELECT JSON_TRANSFORM('"duck"', '"VARCHAR"');

SELECT JSON_TRANSFORM('"duuuuuuuuuuuuuuuuck"', '"VARCHAR"');

SELECT JSON_TRANSFORM('{"a": 42}', '{"a":"UBIGINT"}');

SELECT JSON_TRANSFORM_STRICT('{"a": 42, "a":43}', '{"a":"UBIGINT"}');

SELECT JSON_TRANSFORM_STRICT('{}', '{"a":"UBIGINT"}');

SELECT JSON_TRANSFORM_STRICT('{}', '["UBIGINT"]');

SELECT JSON_TRANSFORM('[{}, [42]]', '[["UBIGINT"]]');

SELECT JSON_TRANSFORM('{"a": null}', '{"a":"UBIGINT"}');

SELECT JSON_TRANSFORM('{"a": 42}', '{"a":"NULL"}');

SELECT JSON_TRANSFORM('{"a": 42}', '{"a":"ARRAY"}');

SELECT JSON_TRANSFORM('[1,2,3]', '["UBIGINT", "BIGINT"]');

SELECT CAST(LIST_SUM(JSON_TRANSFORM(CAST(RANGE(0, 5000) AS JSON), '["UBIGINT"]')) AS UBIGINT) AS s;

SELECT JSON_TRANSFORM('[1,2,3]', '["UBIGINT"]');

SELECT JSON_TRANSFORM('[1,2,3]', '["NULL"]');

SELECT JSON_TRANSFORM('[{"a": 42}, {"a": null}, {"a": 7}]', '[{"a": "UBIGINT"}]');

SELECT JSON_TRANSFORM('[{"a": 42}, {"a": null, "b": 33}, {"b": 7}]', '[{"a": "UBIGINT", "b": "UBIGINT"}]');

CREATE TABLE test (j JSON);

INSERT INTO test VALUES ('{"family": "anatidae", "species": ["duck", "goose", "swan", null], "coolness": 1000}'), ('{"family": "canidae", "species": ["labrador", null, "bulldog", "shepherd"], "hair": true, "coolness": 999}'), (NULL), ('{"family": null, "species": null, "hair": null, "coolness": null}'), ('{"family": "felidae", "species": ["tiger", "lion", null, "british shorthair"], "hair": true, "coolness": 999}');

SELECT JSON_TRANSFORM(j, '{"family": "VARCHAR", "coolness": "UBIGINT", "species": ["VARCHAR"]}') FROM test;

SELECT JSON_TRANSFORM('{"a": 4, "a": 2}', '{"a": "UBIGINT", "a": "UBIGINT"}');

SELECT JSON_TRANSFORM('{"a": {"duck": 42, "goose": 7}}', '{"a": "JSON"}');

SELECT JSON_TRANSFORM('42', '"${type}"');

SELECT JSON_TRANSFORM('42.42', '"${type}"');

SELECT JSON_TRANSFORM('"42"', '"${type}"');

SELECT JSON_TRANSFORM('true', '"${type}"');

SELECT JSON_TRANSFORM('false', '"${type}"');

SELECT JSON_TRANSFORM('[]', '"${type}"');

SELECT JSON_TRANSFORM('{}', '"${type}"');

SELECT JSON_TRANSFORM_STRICT('[]', '"${type}"');

SELECT JSON_TRANSFORM_STRICT('{}', '"${type}"');

SELECT JSON_TRANSFORM('null', '"${type}"');

SELECT JSON_TRANSFORM('-42', '"INTEGER"');

SELECT JSON_TRANSFORM('-42', '"UINTEGER"');

SELECT JSON_TRANSFORM_STRICT('-42', '"UINTEGER"');

SELECT JSON_TRANSFORM('42', '"VARCHAR"');

SELECT JSON_TRANSFORM('42', '"JSON"');

SELECT JSON_TRANSFORM('42', '"BLOB"');

SELECT JSON_TRANSFORM('-42', '"VARCHAR"');

SELECT JSON_TRANSFORM('42.42', '"VARCHAR"');

SELECT JSON_TRANSFORM('true', '"VARCHAR"');

SELECT JSON_TRANSFORM('[]', '"VARCHAR"');

SELECT JSON_TRANSFORM('{}', '"VARCHAR"');

SELECT JSON_TRANSFORM('null', '"VARCHAR"');

SELECT JSON_TRANSFORM('42', '"DECIMAL"');

SELECT JSON_TRANSFORM('42', '"DECIMAL(2)"');

SELECT JSON_TRANSFORM('42', '"DECIMAL(3,1)"');

SELECT JSON_TRANSFORM('-42', '"DECIMAL(3,1)"');

SELECT JSON_TRANSFORM('"42"', '"DECIMAL(3,1)"');

SELECT JSON_TRANSFORM('42.42', '"DECIMAL(4,2)"');

SELECT JSON_TRANSFORM('42.42', '"DECIMAL(10,2)"');

SELECT JSON_TRANSFORM('42.42', '"DECIMAL(20,2)"');

SELECT JSON_TRANSFORM('42.42', '"DECIMAL(38,2)"');

SELECT JSON_TRANSFORM('42.42', '"DECIMAL(38,17)"');

SELECT JSON_TRANSFORM('true', '"DECIMAL(3,1)"');

SELECT JSON_TRANSFORM('false', '"DECIMAL(3,1)"');

SELECT JSON_TRANSFORM('null', '"DECIMAL(3,1)"');

SELECT JSON_TRANSFORM('42', '"DECIMAL(2,1)"');

SELECT JSON_TRANSFORM('[]', '"DECIMAL(2,1)"');

SELECT JSON_TRANSFORM('{}', '"DECIMAL(2,1)"');

SELECT JSON_TRANSFORM_STRICT('42', '"DECIMAL(2,1)"');

SELECT JSON_TRANSFORM('42', '"DECIMAL(39)"');

SELECT JSON_TRANSFORM('42', '"DECIMAL(2,4)"');

SELECT JSON_TRANSFORM('42', '"DECIMAL(5,1,1)"');

SELECT JSON_TRANSFORM('"A0EEBC99-9C0B-4EF8-BB6D-6BB9BD380A11"', '"UUID"');

SELECT JSON_TRANSFORM('42', '"UUID"');

SELECT JSON_TRANSFORM_STRICT('42', '"UUID"');

SELECT JSON_TRANSFORM('-42', '"UUID"');

SELECT JSON_TRANSFORM('42.42', '"UUID"');

SELECT JSON_TRANSFORM('true', '"UUID"');

SELECT JSON_TRANSFORM('false', '"UUID"');

SELECT JSON_TRANSFORM('null', '"UUID"');

SELECT JSON_TRANSFORM_STRICT('42', '"UUID"');

SELECT JSON_TRANSFORM('"1996-03-27"', '"DATE"');

SELECT JSON_TRANSFORM('"11:59:59"', '"TIME"');

SELECT JSON_TRANSFORM('42', '"DATE"');

SELECT JSON_TRANSFORM('-42', '"DATE"');

SELECT JSON_TRANSFORM('42.42', '"DATE"');

SELECT JSON_TRANSFORM('"42"', '"DATE"');

SELECT JSON_TRANSFORM('null', '"DATE"');

SELECT JSON_TRANSFORM('true', '"DATE"');

SELECT JSON_TRANSFORM('false', '"DATE"');

SELECT JSON_TRANSFORM('[]', '"DATE"');

SELECT JSON_TRANSFORM('{}', '"DATE"');

SELECT JSON_TRANSFORM_STRICT('false', '"DATE"');

SELECT JSON_TRANSFORM('"1996-03-27 11:59:59"', '"TIMESTAMP"');

SELECT JSON_TRANSFORM('"1996-03-27 11:59:59"', '"TIMESTAMP_MS"');

SELECT JSON_TRANSFORM('"1996-03-27 11:59:59"', '"TIMESTAMP_NS"');

SELECT JSON_TRANSFORM('"1996-03-27 11:59:59"', '"TIMESTAMP_S"');

SELECT JSON_TRANSFORM('null', '"TIMESTAMP"');

SELECT JSON_TRANSFORM('42', '"TIMESTAMP"');

SELECT JSON_TRANSFORM_STRICT('42', '"TIMESTAMP"');

PRAGMA enable_verification;

SELECT JSON_TYPE('{"str": 42}');

SELECT JSON_TYPE('[1, 2, 3]');

SELECT JSON_TYPE('"other"');

SELECT JSON_TYPE('42');

SELECT JSON_TYPE('NaN');

SELECT JSON_TYPE('null');

SELECT JSON_TYPE(NULL);

SELECT JSON_TYPE('{"str": 42}', 'str');

SELECT JSON_TYPE('{"str": "quack"}', 'str');

SELECT JSON_TYPE('{"str": "quack"}', 'str2');

SELECT JSON_TYPE('{"str": "quack"}', NULL);

SELECT JSON_TYPE(NULL, 'str');

SELECT JSON_TYPE('{"null": NaN}', 'null');

SELECT JSON_TYPE('{"null": nan}', 'null');

SELECT JSON_TYPE('{"null": Infinity}', 'null');

SELECT JSON_TYPE('{"null": -Infinity}', 'null');

CREATE TABLE test (json TEXT, query TEXT);

INSERT INTO test VALUES ('{"str": "quack", "int": 4, "double": 0.42, "bool": true, "arr": [], "nested": {"val": 1}}', '/nested/val'), ('{"str": "woof", "int": -4, "double": -0.42, "bool": false, "arr": [0, 1, 2], "nested": {"val": 42}}', '/arr/2'), ('{"str": null, "int": null, "double": null, "bool": null, "arr": null, "nested": null}', 'bool');

SELECT JSON_TYPE(json, 'str') FROM test;

SELECT JSON_TYPE(json, 'int') FROM test;

SELECT JSON_TYPE(json, 'double') FROM test;

SELECT JSON_TYPE(json, 'bool') FROM test;

SELECT JSON_TYPE(json, 'arr') FROM test;

SELECT JSON_TYPE(json, '/arr/0') FROM test;

SELECT JSON_TYPE(json, '/nested/val') FROM test;

SELECT JSON_TYPE(json, ['str', '/nested/val']) FROM test;

SELECT JSON_TYPE(json, query) FROM test;

SELECT JSON_TYPE('{"a":[2,3.5,true,false,null,"x"]}');

SELECT JSON_TYPE('{"a":[2,3.5,true,false,null,"x"]}', '$');

SELECT JSON_TYPE('{"a":[2,3.5,true,false,null,"x"]}', '$.a');

SELECT JSON_TYPE('{"a":[2,3.5,true,false,null,"x"]}', '$.a[0]');

SELECT JSON_TYPE('{"a":[2,3.5,true,false,null,"x"]}', '$.a[1]');

SELECT JSON_TYPE('{"a":[2,3.5,true,false,null,"x"]}', '$.a[2]');

SELECT JSON_TYPE('{"a":[2,3.5,true,false,null,"x"]}', '$.a[3]');

SELECT JSON_TYPE('{"a":[2,3.5,true,false,null,"x"]}', '$.a[4]');

SELECT JSON_TYPE('{"a":[2,3.5,true,false,null,"x"]}', '$.a[5]');

SELECT JSON_TYPE('{"a":[2,3.5,true,false,null,"x"]}', '$.a[6]');

PRAGMA enable_verification;

SELECT JSON_VALID('{"bla": inf}');

SELECT JSON_VALID('{"bla": infinity}');

CREATE TABLE j1 (x TEXT);

INSERT INTO j1 (x) VALUES ('true'), ('false'), ('null'), ('123'), ('-234'), ('34.5e+6'), ('""'), ('"\""'), ('"\\"'), ('"abcdefghijlmnopqrstuvwxyz"'), ('[]'), ('{}'), ('[true,false,null,123,-234,34.5e+6,{},[]]'), ('{"a":true,"b":{"c":false}}');

SELECT * FROM j1 WHERE NOT JSON_VALID(x);

SELECT JSON_VALID('{"a":55,"b":72,}');

SELECT JSON_VALID('{"a":55,"b":72}');

SELECT JSON_VALID('["a",55,"b",72,]');

SELECT JSON_VALID('["a",55,"b",72]');

SELECT JSON_VALID('" \  "');

SELECT JSON_VALID('" \! "');

SELECT JSON_VALID('" \" "');

SELECT JSON_VALID('" \# "');

SELECT JSON_VALID('" \$ "');

SELECT JSON_VALID('" \% "');

SELECT JSON_VALID('" \& "');

SELECT JSON_VALID('" \'' "');

SELECT JSON_VALID('" \( "');

SELECT JSON_VALID('" \) "');

SELECT JSON_VALID('" \* "');

SELECT JSON_VALID('" \+ "');

SELECT JSON_VALID('" \, "');

SELECT JSON_VALID('" \- "');

SELECT JSON_VALID('" \. "');

SELECT JSON_VALID('" \/ "');

SELECT JSON_VALID('" \0 "');

SELECT JSON_VALID('" \1 "');

SELECT JSON_VALID('" \2 "');

SELECT JSON_VALID('" \3 "');

SELECT JSON_VALID('" \4 "');

SELECT JSON_VALID('" \5 "');

SELECT JSON_VALID('" \6 "');

SELECT JSON_VALID('" \7 "');

SELECT JSON_VALID('" \8 "');

SELECT JSON_VALID('" \9 "');

SELECT JSON_VALID('" \: "');

SELECT JSON_VALID('" \; "');

SELECT JSON_VALID('" \< "');

SELECT JSON_VALID('" \= "');

SELECT JSON_VALID('" \> "');

SELECT JSON_VALID('" \? "');

SELECT JSON_VALID('" \@ "');

SELECT JSON_VALID('" \A "');

SELECT JSON_VALID('" \B "');

SELECT JSON_VALID('" \C "');

SELECT JSON_VALID('" \D "');

SELECT JSON_VALID('" \E "');

SELECT JSON_VALID('" \F "');

SELECT JSON_VALID('" \G "');

SELECT JSON_VALID('" \H "');

SELECT JSON_VALID('" \I "');

SELECT JSON_VALID('" \J "');

SELECT JSON_VALID('" \K "');

SELECT JSON_VALID('" \L "');

SELECT JSON_VALID('" \M "');

SELECT JSON_VALID('" \N "');

SELECT JSON_VALID('" \O "');

SELECT JSON_VALID('" \P "');

SELECT JSON_VALID('" \Q "');

SELECT JSON_VALID('" \R "');

SELECT JSON_VALID('" \S "');

SELECT JSON_VALID('" \T "');

SELECT JSON_VALID('" \U "');

SELECT JSON_VALID('" \V "');

SELECT JSON_VALID('" \W "');

SELECT JSON_VALID('" \X "');

SELECT JSON_VALID('" \Y "');

SELECT JSON_VALID('" \Z "');

SELECT JSON_VALID('" \[ "');

SELECT JSON_VALID('" \\ "');

SELECT JSON_VALID('" \] "');

SELECT JSON_VALID('" \^ "');

SELECT JSON_VALID('" \_ "');

SELECT JSON_VALID('" \` "');

SELECT JSON_VALID('" \a "');

SELECT JSON_VALID('" \b "');

SELECT JSON_VALID('" \c "');

SELECT JSON_VALID('" \d "');

SELECT JSON_VALID('" \e "');

SELECT JSON_VALID('" \f "');

SELECT JSON_VALID('" \g "');

SELECT JSON_VALID('" \h "');

SELECT JSON_VALID('" \i "');

SELECT JSON_VALID('" \j "');

SELECT JSON_VALID('" \k "');

SELECT JSON_VALID('" \l "');

SELECT JSON_VALID('" \m "');

SELECT JSON_VALID('" \n "');

SELECT JSON_VALID('" \o "');

SELECT JSON_VALID('" \p "');

SELECT JSON_VALID('" \q "');

SELECT JSON_VALID('" \r "');

SELECT JSON_VALID('" \s "');

SELECT JSON_VALID('" \t "');

SELECT JSON_VALID('" \u "');

SELECT JSON_VALID('" \ua "');

SELECT JSON_VALID('" \uab "');

SELECT JSON_VALID('" \uabc "');

SELECT JSON_VALID('" \uabcd "');

SELECT JSON_VALID('" \uFEDC "');

SELECT JSON_VALID('" \u1234 "');

SELECT JSON_VALID('" \v "');

SELECT JSON_VALID('" \w "');

SELECT JSON_VALID('" \x "');

SELECT JSON_VALID('" \y "');

SELECT JSON_VALID('" \z "');

SELECT JSON_VALID('" \{ "');

SELECT JSON_VALID('" \| "');

SELECT JSON_VALID('" \} "');

SELECT JSON_VALID('" \~ "');

SELECT JSON_VALID('{"x":01}');

SELECT JSON_VALID('{"x":-01}');

SELECT JSON_VALID('{"x":0}');

SELECT JSON_VALID('{"x":-0}');

SELECT JSON_VALID('{"x":0.1}');

SELECT JSON_VALID('{"x":-0.1}');

SELECT JSON_VALID('{"x":0.0000}');

SELECT JSON_VALID('{"x":-0.0000}');

SELECT JSON_VALID('{"x":01.5}');

SELECT JSON_VALID('{"x":-01.5}');

SELECT JSON_VALID('{"x":00}');

SELECT JSON_VALID('{"x":-00}');

PRAGMA enable_verification;

SELECT JSON_VALUE('{"foo": null}', '$.foo');

SELECT JSON_VALUE('{"foo": null}', '$.foo.bar');

SELECT JSON_VALUE('null', '$');

SELECT JSON_VALUE('[null]', '$[0]');

SELECT JSON_VALUE('{"my_field": {"my_nested_field": ["goose", "duck"]}}', '/my_field/my_nested_field/1');

SELECT JSON_VALUE('{"my_field": {"my_nested_field": ["goose", "duckduckduckduck"]}}', '/my_field/my_nested_field/1');

SELECT JSON_VALUE('[1, 2, 42]', 2);

SELECT JSON_VALUE('{"a":2,"c":[4,5,{"f":7}]}', '$');

SELECT JSON_VALUE('{"a":2,"c":[4,5,{"f":7}]}', '$.c');

SELECT JSON_VALUE('{"a":2,"c":[4,5,{"f":7}]}', '$.c[2]');

SELECT JSON_VALUE('{"a":2,"c":[4,5,{"f":7}]}', '$.c[2].f');

SELECT JSON_VALUE('{"a":2,"c":[4,5,{"f":7}]}', '$.x');

WITH tbl AS (SELECT '{"a":2,"c":[4,5],"f":7}' AS j, ['$.c', '$.a'] AS p) SELECT JSON_VALUE(j, p);

SELECT JSON_VALUE('{"a":2,"c":[4,5],"f":7}', ['$.c', '$.a']);

SELECT JSON_VALUE('{"a":2,"c":[4,5,{"f":7}]}', ['$.x', '$.a']);

SELECT JSON_VALUE(NULL, ['$.x', '$.a']);

CREATE TABLE t1 (j TEXT);

INSERT INTO t1 (j) VALUES ('{"a":1,"b":[1,[2,3],4],"c":99}');

SELECT JSON_VALUE(j, '$.b[#]') FROM t1;

SELECT JSON_VALUE(j, '$.a[#-1]'), JSON_VALUE(j, '$.a[-1]') FROM t1;

SELECT JSON_VALUE(j, '$.b[#-000001]') AS a, a = JSON_VALUE(j, '$.b[-000001]') FROM t1;

SELECT JSON_VALUE(j, '$.b[#-]') FROM t1;

SELECT JSON_VALUE(j, '$.b[-]') FROM t1;

SELECT JSON_VALUE(j, '$.b[#9]') FROM t1;

SELECT JSON_VALUE(j, '$.b[#+2]') FROM t1;

SELECT JSON_VALUE(j, '$.b[#-1') FROM t1;

SELECT JSON_VALUE(j, '$.b[#-1x]') FROM t1;

CREATE TABLE obj (x TEXT);

INSERT INTO obj VALUES ('{"a":1,"b":2}');

SELECT JSON_VALUE(x, '$.b') FROM obj;

SELECT JSON_VALUE(x, '$."b"') FROM obj;

CREATE TABLE t12 (x TEXT);

INSERT INTO t12 (x) VALUES ('{"settings":
{"layer2":
{"hapax.legomenon":
{"forceDisplay":true,
"transliterate":true,
"add.footnote":true,
"summary.report":true},
"dis.legomenon":
{"forceDisplay":true,
"transliterate":false,
"add.footnote":false,
"summary.report":true},
"tris.legomenon":
{"forceDisplay":true,
"transliterate":false,
"add.footnote":false,
"summary.report":false}
}
}
}');

SELECT JSON_VALUE(x, '$.settings.layer2."tris.legomenon"."summary.report"') FROM t12;

SELECT JSON_VALUE(x, '$.settings.layer2."tris.legomenon"') FROM t12;

PRAGMA enable_verification;

SELECT * FROM "data/json/empty.ndjson";

SELECT * FROM "data/json/whitespace_only.json";

SELECT * FROM READ_JSON_AUTO('data/json/empty_array.json');

SELECT * FROM READ_JSON_AUTO('data/json/empty_no_newline.json');

SELECT * FROM READ_JSON_AUTO('data/json/malformed/empty_array_malformed.json');

SELECT * FROM READ_JSON_AUTO('data/json/malformed/empty_array_trailing.json', format = 'array');

SELECT * FROM READ_JSON_AUTO('data/json/malformed/array_comma_malformed.json', format = 'array');

SELECT * FROM READ_JSON_AUTO('data/json/array_of_empty_arrays.json', format = 'array');

CREATE TABLE test AS SELECT i AS i, TO_JSON([i % 4]) AS j FROM RANGE(0, 20) AS tbl(i);

COPY test TO '__TEST_DIR__/json_part' WITH (FORMAT csv, quote '', PARTITION_BY (j), HEADER 0);

SELECT * EXCLUDE (filename), REPLACE(filename, '\', '/') AS filename FROM READ_JSON_AUTO('data/json/example_*.ndjson', filename = TRUE) ORDER BY ALL;

SELECT *, REPLACE(filename, '\', '/') FROM READ_JSON_AUTO('data/json/example_*.ndjson') ORDER BY ALL;

SELECT * FROM READ_JSON_AUTO(['data/json/example_n.ndjson', 'data/json/top_level_array.json'], union_by_name = TRUE) ORDER BY ALL;

SELECT j, COUNT(*) FROM READ_JSON_AUTO('__TEST_DIR__/json_part/j=*/*.csv', HIVE_PARTITIONING = 1) GROUP BY j ORDER BY j;

SELECT * EXCLUDE (filename), REPLACE(filename, '\', '/') AS filename FROM READ_JSON_OBJECTS_AUTO('data/json/example_*.ndjson', filename = TRUE) ORDER BY ALL;

SELECT * FROM READ_JSON_OBJECTS_AUTO(['data/json/example_n.ndjson', 'data/json/top_level_array.json'], union_by_name = TRUE) ORDER BY ALL;

SELECT j, COUNT(*) FROM READ_JSON_OBJECTS_AUTO('__TEST_DIR__/json_part/j=*/*.csv', HIVE_PARTITIONING = 1) GROUP BY j ORDER BY j;

SELECT j, COUNT(*) FROM READ_JSON_AUTO('__TEST_DIR__/json_part/j=*/*.csv', HIVE_PARTITIONING = 1) WHERE j = '[2]' GROUP BY j ORDER BY j;

SELECT j, COUNT(*) FROM READ_JSON_AUTO('__TEST_DIR__/json_part/j=*/*.csv', HIVE_PARTITIONING = 1) WHERE j > '[2]' GROUP BY j ORDER BY j;

SELECT j, COUNT(*) FROM READ_JSON_AUTO('__TEST_DIR__/json_part/j=*/*.csv', HIVE_PARTITIONING = 1) WHERE SQRT(CAST(j[2] AS INT)) > 1.5 GROUP BY j ORDER BY j;

SELECT * FROM READ_JSON_AUTO(['data/json/with_uuid.json', 'data/json/example_n.ndjson']);

SELECT * FROM READ_JSON_AUTO(['data/json/with_uuid.json', 'data/json/example_n.ndjson'], sample_size = 1, maximum_sample_files = 1);

SELECT * FROM READ_JSON_AUTO(['data/json/with_uuid.json', 'data/json/example_n.ndjson'], sample_size = 1, maximum_sample_files = 99);

SELECT * FROM READ_JSON_AUTO(['data/json/with_uuid.json', 'data/json/example_n.ndjson'], sample_size = 1, union_by_name = TRUE);

SET threads = 8;

SELECT * FROM READ_JSON('data/json/multi_file_hang/*.json', sample_size = 1, maximum_sample_files = 1);

SELECT * FROM READ_JSON('data/json/fuzzer_hang.json', ignore_errors = TRUE);

PRAGMA enable_verification;

SELECT * FROM READ_JSON('data/json/example_n.ndjson', auto_detect = FALSE);

SELECT * FROM READ_JSON('data/json/example_n.ndjson', columns = {'id': 'INTEGER', 'name': 'VARCHAR'}, format = 'array');

SELECT * FROM READ_NDJSON('data/json/example_n.ndjson', columns = {'id': 'INTEGER', 'name': 'VARCHAR'});

SELECT * FROM READ_NDJSON('data/json/example_n.ndjson', columns = {'id': 'INTEGER'});

SELECT * FROM READ_NDJSON('data/json/example_n.ndjson', columns = {'name': 'VARCHAR'});

SELECT * FROM READ_NDJSON('data/json/unterminated_quotes.ndjson', columns = {'id': 'INTEGER', 'name': 'VARCHAR'}, ignore_errors = TRUE);

SELECT * FROM READ_NDJSON('data/json/different_schemas.ndjson', columns = {'id': 'INTEGER', 'name': 'VARCHAR'});

SELECT id FROM READ_JSON('data/json/example_n.ndjson', columns = {'id': 'INTEGER', 'name': 'VARCHAR'}, format = 'unstructured');

SELECT name FROM READ_JSON('data/json/example_n.ndjson', columns = {'id': 'INTEGER', 'name': 'VARCHAR'}, format = 'unstructured');

SELECT id FROM READ_JSON('data/json/example_n.ndjson', columns = {'id': 'INTEGER', 'name': 'VARCHAR'}, format = 'newline_delimited');

SELECT name FROM READ_NDJSON('data/json/example_n.ndjson', columns = {'id': 'INTEGER', 'name': 'VARCHAR'}, format = 'nd');

SELECT * FROM READ_JSON_AUTO('data/json/example_n.ndjson');

SELECT * FROM "data/json/example_n.ndjson";

SELECT * FROM READ_JSON_AUTO('data/json/with_list.json', maximum_depth = 0);

SELECT * FROM READ_JSON_AUTO('data/json/with_list.json', maximum_depth = 1);

SELECT * FROM READ_JSON_AUTO('data/json/with_list.json', maximum_depth = 2);

SELECT * FROM READ_JSON_AUTO('data/json/with_list.json', maximum_depth = 3);

SELECT id, TYPEOF(name), UNNEST(name) FROM "data/json/with_list.json";

SELECT id, TYPEOF(name), UNNEST(name) FROM READ_JSON_AUTO('data/json/with_list.json', maximum_depth = 2);

SELECT TYPEOF(id), TYPEOF(name) FROM READ_JSON_AUTO('data/json/with_list.json', maximum_depth = 1);

SELECT id, TYPEOF(id) FROM "data/json/with_uuid.json";

SELECT * FROM READ_JSON('data/json/top_level_array.json', columns = {'conclusion': 'VARCHAR'});

SELECT * FROM READ_JSON('data/json/top_level_array.json', auto_detect = TRUE);

SELECT * FROM READ_JSON('data/json/top_level_array.json', columns = {'conclusion': 'VARCHAR'}, format = 'unstructured', records = TRUE);

SELECT * FROM READ_JSON_AUTO('data/json/example_n.ndjson', format = 'array');

COPY (SELECT 42 AS duck FROM RANGE(0, 10000)) TO '__TEST_DIR__/my_file.json' WITH (array TRUE);

SELECT COUNT(*) FROM READ_JSON('__TEST_DIR__/my_file.json', columns = {'duck': 'INTEGER'}, format = 'array');

SELECT SUM(duck) = 42 * 10000 FROM READ_JSON('__TEST_DIR__/my_file.json', columns = {'duck': 'INTEGER'}, format = 'array');

SELECT COUNT(*) FROM "__TEST_DIR__/my_file.json";

SELECT SUM(duck) = 42 * 10000 FROM "__TEST_DIR__/my_file.json";

COPY (SELECT LIST(range) FROM RANGE(0, 10)) TO '__TEST_DIR__/my_file.json' WITH (format csv, quote '', HEADER 0);

SELECT * FROM "__TEST_DIR__/my_file.json";

SELECT * FROM READ_JSON('__TEST_DIR__/my_file.json', format = 'array', columns = {'range': 'INTEGER'}, records = TRUE);

SELECT * FROM READ_JSON_AUTO('__TEST_DIR__/my_file.json', format = 'array', records = TRUE);

SELECT * FROM READ_JSON('__TEST_DIR__/my_file.json', format = 'auto', records = FALSE, auto_detect = TRUE);

SELECT * FROM READ_JSON('__TEST_DIR__/my_file.json', format = 'auto', records = 'false', auto_detect = FALSE);

SELECT * FROM READ_JSON('__TEST_DIR__/my_file.json', format = 'unstructured', records = 'false', auto_detect = TRUE);

SELECT * FROM READ_JSON('__TEST_DIR__/my_file.json', format = 'array', records = 'false', auto_detect = TRUE);

SELECT * FROM READ_JSON('__TEST_DIR__/my_file.json', format = 'array', records = 'auto', auto_detect = TRUE);

SET threads = 2;

SELECT JSON_STRUCTURE(json ->> '$.metadata') AS structure FROM READ_JSON('data/json/issue.json', format = 'array', columns = {'json': 'JSON'}, maximum_object_size = 104857600) LIMIT 1;

SELECT JSON_STRUCTURE(json ->> '$.metadata') AS structure FROM READ_JSON('data/json/issue.json', format = 'array', records = 'false', columns = {'json': 'JSON'}, maximum_object_size = 104857600) LIMIT 1;

SELECT JSON_STRUCTURE(my_json ->> '$.metadata') AS structure FROM READ_JSON('data/json/issue.json', format = 'unstructured', records = 'false', columns = {'my_json': 'JSON'}, maximum_object_size = 104857600) LIMIT 1;

PRAGMA disable_verification;

COPY (SELECT 42 AS this_is_a_very_long_field_name_yes_very_much_so FROM RANGE(0, 50000)) TO '__TEST_DIR__/my_file.json' WITH (array TRUE);

SELECT SUM(this_is_a_very_long_field_name_yes_very_much_so) = 42 * 50000 FROM "__TEST_DIR__/my_file.json";

SELECT * FROM READ_JSON_AUTO('https://github.com/duckdb/duckdb-data/releases/download/v1.0/example_rn.ndjson');

PRAGMA enable_verification;

COPY (SELECT * FROM (VALUES ('{"a": 1, "b": 2}'), (''))) TO '__TEST_DIR__/my_file.json' WITH (format csv, quote '', header 0);

SELECT * FROM "__TEST_DIR__/my_file.json";

COPY (SELECT * FROM (VALUES ('{"a": 1}'), ('{"a": 2}'), ('{"a": 3}'))) TO '__TEST_DIR__/my_file.json' WITH (format csv, quote '', header 0);

SELECT * FROM "__TEST_DIR__/my_file.json";

SELECT COUNT(*) FROM "__TEST_DIR__/my_file.json";

COPY (SELECT * FROM (VALUES ('{"a": 1,"b": 2, "c": 3}'), ('{"a": 4,"b": 5, "c": 6}'))) TO '__TEST_DIR__/my_file.json' WITH (format csv, quote '', header 0);

SELECT * FROM "__TEST_DIR__/my_file.json";

COPY (SELECT * FROM (VALUES ('{"a": 1,"b": 2, "c": "3", "d": false}'), ('{"a": 4.0, "b": -5, "c": "foo", "d": true}'), (''))) TO '__TEST_DIR__/my_file.json' WITH (format csv, quote '', header 0);

SELECT * FROM "__TEST_DIR__/my_file.json";

COPY (SELECT * FROM (VALUES ('{"a": 1, "b": 2, "c": null, "d": null, "e": null}'), ('{"a": null, "b": -5, "c": "foo", "d": null, "e": true}'), ('{"a": 4.5, "b": null, "c": "nan", "d": null,"e": false}'), (''))) TO '__TEST_DIR__/my_file.json' WITH (format csv, quote '', header 0);

SELECT * FROM "__TEST_DIR__/my_file.json";

COPY (SELECT * FROM (VALUES ('{"a": 1}'), ('{"a": 1.45}'), ('{"a": -23.456}'), ('{}'), (''))) TO '__TEST_DIR__/my_file.json' WITH (format csv, quote '', header 0);

SELECT TYPEOF(a), a FROM "__TEST_DIR__/my_file.json";

COPY (SELECT * FROM (VALUES ('{"foo": "bar", "num": 0}'), ('{"foo": "baz", "num": 1}'), (''))) TO '__TEST_DIR__/my_file.json' WITH (format csv, quote '', header 0);

SELECT * FROM "__TEST_DIR__/my_file.json";

SELECT * FROM "data/json/top_level_array.json";

SELECT COUNT(*) FROM "data/json/top_level_array.json";

SELECT * FROM READ_JSON_AUTO('data/json/top_level_array.json', maximum_depth = 0);

SELECT * FROM READ_JSON_AUTO('data/json/top_level_array.json', maximum_depth = 1);

SELECT TYPEOF(json) FROM READ_JSON_AUTO('data/json/top_level_array.json', records = 'false');

SELECT * FROM "data/json/top_level_two_arrays.json";

SELECT * FROM READ_JSON_AUTO('data/json/top_level_array.json', format = 'unstructured', records = 'true');

SELECT * FROM "data/json/projection_pushdown_example.json" WHERE status <> 'completed';

SELECT * FROM READ_JSON_AUTO('data/json/different_schemas.ndjson', sample_size = 1);

SELECT * FROM READ_JSON_AUTO('data/json/different_schemas.ndjson', sample_size = -1);

SELECT TYPEOF(COLUMNS(*)) FROM READ_JSON_AUTO('data/json/different_schemas.ndjson', field_appearance_threshold = 1) LIMIT 1;

SELECT * FROM READ_JSON_AUTO('data/json/different_schemas.ndjson', field_appearance_threshold = 1);

SELECT * FROM READ_JSON_AUTO('data/json/different_schemas.ndjson', field_appearance_threshold = 0.5);

SELECT * FROM READ_JSON_AUTO('data/json/different_schemas.ndjson', field_appearance_threshold = -1);

SELECT * FROM READ_JSON_AUTO('data/json/different_schemas.ndjson', field_appearance_threshold = 2);

SELECT * FROM READ_JSON_AUTO('data/json/inconsistent_schemas.ndjson', sample_size = 1, convert_strings_to_integers = TRUE);

SELECT * FROM READ_JSON_AUTO('data/json/inconsistent_schemas.ndjson', sample_size = 2);

COPY (SELECT * FROM (VALUES ('{"id": "26941143801"}'), ('{"id": "26941143807"}'))) TO '__TEST_DIR__/my_file.json' WITH (format csv, quote '', header 0);

SELECT TYPEOF(id) FROM READ_JSON('__TEST_DIR__/my_file.json', convert_strings_to_integers = TRUE);

SELECT * FROM READ_JSON_AUTO(['data/json/empty_array.json', 'data/json/example_n.ndjson']);

SELECT DISTINCT TYPEOF(a) FROM READ_JSON_AUTO('data/json/simple_map.jsonl');

SELECT DISTINCT TYPEOF(a) FROM READ_JSON_AUTO('data/json/simple_map.jsonl', map_inference_threshold = 1000);

SELECT DISTINCT TYPEOF(a) FROM READ_JSON_AUTO('data/json/simple_map.jsonl', map_inference_threshold = -1, field_appearance_threshold = 0);

SELECT DISTINCT TYPEOF(a) FROM READ_JSON_AUTO('data/json/simple_map.jsonl', maximum_depth = 2);

SELECT DISTINCT TYPEOF(a) FROM READ_JSON_AUTO('data/json/simple_map.jsonl', maximum_depth = 1);

SELECT DISTINCT TYPEOF(a) FROM READ_JSON_AUTO('data/json/map_of_nulls.jsonl');

SELECT DISTINCT TYPEOF(json) FROM READ_JSON_AUTO('data/json/top_level_map.jsonl');

SELECT DISTINCT TYPEOF(a) FROM READ_JSON_AUTO('data/json/map_of_structs.jsonl');

SELECT DISTINCT TYPEOF(a) FROM READ_JSON_AUTO('data/json/map_50_50.jsonl', map_inference_threshold = 10);

SELECT DISTINCT TYPEOF(a) FROM READ_JSON_AUTO('data/json/map_of_map.jsonl', map_inference_threshold = 10);

SELECT DISTINCT TYPEOF(a) FROM READ_JSON_AUTO('data/json/map_of_struct_with_nulls.jsonl', map_inference_threshold = 10);

SELECT DISTINCT TYPEOF(a) FROM READ_JSON_AUTO('data/json/map_of_dates.jsonl', map_inference_threshold = 25);

SELECT DISTINCT TYPEOF(a) FROM READ_JSON_AUTO('data/json/map_of_mixed_date_timestamps.jsonl', map_inference_threshold = 25);

SELECT DISTINCT TYPEOF(a) FROM READ_JSON_AUTO('data/json/map_incompatible.jsonl', map_inference_threshold = 10);

SELECT * FROM READ_JSON_AUTO('data/json/simple_map.jsonl', map_inference_threshold = -10);

SELECT * FROM READ_JSON_AUTO(['data/json/empty_array.json', 'data/json/example_n.ndjson'], maximum_sample_files = 1);

SELECT * FROM READ_JSON_AUTO(['data/json/empty_array.json', 'data/json/example_n.ndjson'], maximum_sample_files = -1);

SELECT * FROM READ_JSON_AUTO(['data/json/empty_array.json', 'data/json/example_n.ndjson'], maximum_sample_files = -2);

SELECT * FROM READ_JSON_AUTO(['data/json/empty_array.json', 'data/json/example_n.ndjson'], maximum_sample_files = 0);

SELECT * FROM READ_JSON_AUTO(['data/json/empty_array.json', 'data/json/example_n.ndjson'], maximum_sample_files = NULL);

SELECT * FROM READ_JSON_AUTO(['data/json/empty_array.json', 'data/json/example_n.ndjson'], maximum_sample_files = NULL);

SELECT TYPEOF("type"), TYPEOF(features) FROM READ_JSON_AUTO('https://github.com/duckdb/duckdb-data/releases/download/v1.0/canada.json', maximum_depth = 3);

SELECT TYPEOF("type"), TYPEOF(features) FROM READ_JSON_AUTO('https://github.com/duckdb/duckdb-data/releases/download/v1.0/canada.json', maximum_depth = 8);

SELECT type, features[1].type, features[1].properties.name, features[1].geometry.type, LENGTH(features[1].geometry.coordinates) FROM READ_JSON_AUTO('https://github.com/duckdb/duckdb-data/releases/download/v1.0/canada.json', maximum_depth = 8);

PRAGMA enable_verification;

SELECT * FROM READ_JSON_AUTO('data/json/simple_timestamp.json', columns = {'ts': "TIMESTAMP[]"});

CREATE TABLE date_test AS SELECT CAST('1996/03/27' AS DATE) AS d;

CREATE TABLE timestamp_test AS SELECT CAST('1996-03-27 07:42:33' AS TIMESTAMP) AS t;

COPY (SELECT d FROM date_test) TO '__TEST_DIR__/my_file.json' WITH (dateformat);

COPY (SELECT d FROM date_test) TO '__TEST_DIR__/my_file.json' WITH (timestampformat);

COPY date_test FROM 'data/json/simple_timestamp.json' WITH (dateformat);

COPY date_test FROM 'data/json/simple_timestamp.json' WITH (timestampformat);

COPY date_test FROM 'data/json/simple_timestamp.json' WITH (timestampformat);

SELECT TYPEOF(d), d FROM "__TEST_DIR__/my_file.json";

SELECT TYPEOF(d), d FROM "__TEST_DIR__/my_file.json";

SELECT TYPEOF(d), d FROM "__TEST_DIR__/my_file.json";

DROP TABLE IF EXISTS date_copy_test;

CREATE TABLE date_copy_test (d DATE);

CREATE TABLE date_copy_test (d DATE);

SELECT TYPEOF(d), d FROM date_copy_test;

SELECT TYPEOF(d), d FROM date_copy_test;

SELECT TYPEOF(t), t FROM "__TEST_DIR__/my_file.json";

SELECT TYPEOF(t), t FROM "__TEST_DIR__/my_file.json";

SELECT TYPEOF(t), t FROM "__TEST_DIR__/my_file.json";

DROP TABLE IF EXISTS timestamp_copy_test;

CREATE TABLE timestamp_copy_test (t TIMESTAMP);

CREATE TABLE timestamp_copy_test (t TIMESTAMP);

SELECT TYPEOF(t), t FROM timestamp_copy_test;

SELECT TYPEOF(createdAt), createdAt FROM "data/json/timestamp_example.json";

SELECT * FROM READ_JSON_OBJECTS('data/json/unterminated_quotes.ndjson');

SELECT * FROM READ_CSV('data/json/example_n.ndjson', columns = {'json': 'JSON'}, delim = NULL, header = 0, quote = NULL, escape = NULL, auto_detect = FALSE);

SELECT * FROM READ_NDJSON_OBJECTS('data/json/example_n.ndjson');

SELECT * FROM READ_NDJSON_OBJECTS('data/json/example_n.ndjson', records = 'false');

SELECT * FROM READ_NDJSON_OBJECTS('data/json/example_n.ndjson');

SELECT * FROM READ_JSON_OBJECTS('data/json/example_n.ndjson', format = 'auto');

SELECT * FROM READ_JSON_OBJECTS('data/json/example_r.ndjson', format = 'unstructured');

SELECT * FROM READ_JSON_OBJECTS('data/json/example_r.ndjson', format = 'auto');

SELECT * FROM READ_NDJSON_OBJECTS('data/json/example_r.ndjson');

SELECT * FROM READ_NDJSON_OBJECTS('data/json/example_rn.ndjson');

SELECT * FROM READ_NDJSON_OBJECTS('data/json/example_rn.ndjson');

SELECT * FROM READ_NDJSON_OBJECTS('data/json/example_rn.ndjson.gz');

SELECT * FROM READ_JSON_OBJECTS('data/json/example_rn.ndjson.gz', format = 'nd');

SELECT COUNT(*) FROM READ_JSON_OBJECTS(['data/json/example_n.ndjson', 'data/json/example_r.ndjson', 'data/json/example_rn.ndjson'], format = 'auto');

SELECT COUNT(*) FROM READ_NDJSON_OBJECTS(['data/json/example_n.ndjson', 'data/json/example_rn.ndjson']);

SELECT COUNT(*) FROM READ_JSON_OBJECTS('data/json/example_*.ndjson', format = 'auto');

SELECT COUNT(*) FROM READ_NDJSON_OBJECTS('data/json/example_*n.ndjson');

SELECT * FROM READ_JSON_OBJECTS('https://github.com/duckdb/duckdb-data/releases/download/v1.0/example_rn.ndjson', format = 'nd');

SELECT * FROM READ_NDJSON_OBJECTS('https://github.com/duckdb/duckdb-data/releases/download/v1.0/example_rn.ndjson');

SELECT * FROM READ_JSON_OBJECTS('data/json/empty.ndjson');

SELECT * FROM READ_NDJSON_OBJECTS('data/json/empty.ndjson');

SELECT * FROM READ_JSON_OBJECTS('data/json/unterminated_quotes.ndjson', format = 'nd');

SELECT * FROM READ_NDJSON_OBJECTS('data/json/unterminated_quotes.ndjson');

SELECT * FROM READ_JSON_OBJECTS('data/json/unterminated_quotes.ndjson', format = 'auto', ignore_errors = TRUE);

SELECT * FROM READ_JSON_OBJECTS('data/json/multiple_objects_per_line.ndjson', format = 'unstructured');

SELECT * FROM READ_NDJSON_OBJECTS('data/json/multiple_objects_per_line.ndjson');

SELECT * FROM READ_JSON_OBJECTS('data/csv/tpcds_14.csv');

SELECT * FROM READ_NDJSON_OBJECTS('data/csv/tpcds_14.csv');

SELECT * FROM READ_JSON_OBJECTS('data/parquet-testing/blob.parquet');

SELECT * FROM READ_NDJSON_OBJECTS('data/parquet-testing/blob.parquet');

SELECT * FROM READ_JSON_OBJECTS('data/json/top_level_array.json');

SELECT * FROM READ_JSON_OBJECTS('data/json/top_level_array.json', format = 'auto');

SELECT * FROM READ_JSON_OBJECTS('data/json/top_level_array.json', format = 'nd');

PRAGMA enable_verification;

SELECT data FROM READ_NDJSON('data/json/union.ndjson', columns = {'data': 'UNION(name VARCHAR, age INT, veteran BOOL)'});

SELECT * FROM READ_NDJSON('data/json/malformed/union/bad_key.ndjson', columns = {'data': 'UNION(name VARCHAR, age INT, veteran BOOL)'});

SELECT * FROM READ_NDJSON('data/json/malformed/union/empty_object.ndjson', columns = {'data': 'UNION(name VARCHAR, age INT, veteran BOOL)'});

SELECT * FROM READ_NDJSON('data/json/malformed/union/non_object.ndjson', columns = {'data': 'UNION(name VARCHAR, age INT, veteran BOOL)'});

SELECT * FROM READ_NDJSON('data/json/malformed/union/too_many_keys.ndjson', columns = {'data': 'UNION(name VARCHAR, age INT, veteran BOOL)'});

PRAGMA enable_verification;

COPY (SELECT {'goose': 42, 'pigeon': 4.2, 'nested_duck': {'nested_nested_duck': {'goose': 42, 'pigeon': 4.2, 'nested_nested_nested_duck': {'goose': 42, 'pigeon': 4.2}}, 'goose': 42, 'pigeon': 4.2}} AS duck) TO '__TEST_DIR__/nested.json';

SELECT duck.goose FROM "__TEST_DIR__/nested.json";

SELECT json.duck.goose FROM READ_JSON('__TEST_DIR__/nested.json', records = FALSE);

SELECT duck.nested_duck.goose FROM "__TEST_DIR__/nested.json";

SELECT json.duck.nested_duck.goose FROM READ_JSON('__TEST_DIR__/nested.json', records = FALSE);

SELECT duck.nested_duck.nested_nested_duck.goose FROM "__TEST_DIR__/nested.json";

SELECT json.duck.nested_duck.nested_nested_duck.goose FROM READ_JSON('__TEST_DIR__/nested.json', records = FALSE);

SELECT duck.nested_duck.nested_nested_duck.nested_nested_nested_duck.goose FROM "__TEST_DIR__/nested.json";

SELECT json.duck.nested_duck.nested_nested_duck.nested_nested_nested_duck.goose FROM READ_JSON('__TEST_DIR__/nested.json', records = FALSE);

PRAGMA enable_verification;

CREATE SCHEMA "SCH""EMA";

CREATE TYPE "EN""UM" AS ENUM('ALL');

CREATE TYPE "EN""UM" AS ENUM('ALL');

INSERT INTO "SCH""EMA"."TA""BLE" VALUES ('ALL');

SELECT "COL""UMN" FROM "SCH""EMA"."TA""BLE";

SELECT "TA""BLE"."COL""UMN" FROM "SCH""EMA"."TA""BLE";

SELECT "SCH""EMA"."TA""BLE"."COL""UMN" FROM "SCH""EMA"."TA""BLE";

DROP TABLE "SCH""EMA"."TA""BLE";

DROP TABLE "SCH""EMA"."TA""BLE";

INSERT INTO "SCH""EMA"."TA""BLE" VALUES ({'so"me': {'i"n': 3}});

SELECT "COL""UMN"."SO""ME"."I""N" FROM "SCH""EMA"."TA""BLE";

SELECT "TA""BLE"."COL""UMN"."SO""ME"."I""N" FROM "SCH""EMA"."TA""BLE";

SELECT "SCH""EMA"."TA""BLE"."COL""UMN"."SO""ME"."I""N" FROM "SCH""EMA"."TA""BLE";

SELECT (("SCH""EMA"."TA""BLE"."COL""UMN")."SO""ME")."I""N" FROM "SCH""EMA"."TA""BLE";

SELECT "SCH""EMA"."TA""BLE"."COL""UMN"['SO"ME']['I"N'] FROM "SCH""EMA"."TA""BLE";

PRAGMA enable_verification;

CREATE SCHEMA "SCHEMA";

CREATE TYPE "ENUM" AS ENUM('ALL');

CREATE TABLE "SCHEMA"."TABLE" ("COLUMN" ENUM);

CREATE TYPE E AS ENUM('ALL');

CREATE TABLE "SCHEMA"."TABLE" ("COLUMN" E);

INSERT INTO "SCHEMA"."TABLE" VALUES ('ALL');

SELECT "COLUMN" FROM "SCHEMA"."TABLE";

SELECT "TABLE"."COLUMN" FROM "SCHEMA"."TABLE";

SELECT "SCHEMA"."TABLE"."COLUMN" FROM "SCHEMA"."TABLE";

DROP TABLE "SCHEMA"."TABLE";

DROP TABLE "SCHEMA"."TABLE";

INSERT INTO "SCHEMA"."TABLE" VALUES ({'some': {'in': 3}});

SELECT "COLUMN"."SOME"."IN" FROM "SCHEMA"."TABLE";

SELECT "TABLE"."COLUMN"."SOME"."IN" FROM "SCHEMA"."TABLE";

SELECT "SCHEMA"."TABLE"."COLUMN"."SOME"."IN" FROM "SCHEMA"."TABLE";

SELECT (("SCHEMA"."TABLE"."COLUMN")."SOME")."IN" FROM "SCHEMA"."TABLE";

SELECT "SCHEMA"."TABLE"."COLUMN"['SOME']['IN'] FROM "SCHEMA"."TABLE";

PRAGMA enable_verification;

PRAGMA threads = 8;

CREATE TABLE integers AS SELECT * FROM RANGE(0, 5000000) AS tbl(i);

CREATE TABLE other_table AS SELECT 337 AS i UNION ALL SELECT 948247 UNION ALL SELECT 1779793 UNION ALL SELECT 8779793;

BEGIN;

INSERT INTO integers SELECT * FROM RANGE(5000000, 10000000) AS tbl(i);

SELECT * FROM integers LIMIT 5;

SELECT * FROM integers WHERE i > 5978321 OR i = 334 LIMIT 5;

SELECT * FROM integers WHERE i > 5978321 LIMIT 5;

SELECT * FROM integers WHERE i > 8978321 LIMIT 5;

SELECT * FROM integers WHERE i IN (SELECT * FROM other_table);

(SELECT * FROM integers WHERE i > 1978321 LIMIT 5) UNION ALL (SELECT * FROM integers WHERE i > 8978321 LIMIT 5);

DROP TABLE integers;

SELECT * FROM (SELECT SUM(i) FROM RANGE(0, 100000000000) AS tbl(i)) LIMIT 0;

PRAGMA explain_output = 'OPTIMIZED_ONLY';

EXPLAIN SELECT * FROM (SELECT SUM(i) FROM range(100000000000) tbl(i)) LIMIT 0;

PRAGMA enable_verification;

PRAGMA threads = 8;

PRAGMA threads = 8;

CREATE ${table_type} integers AS SELECT * FROM range(10000000) tbl(i);

SELECT * FROM integers LIMIT 5;

SELECT * FROM integers WHERE i > 1978321 OR i = 334 LIMIT 5;

SELECT * FROM integers WHERE i > 1978321 LIMIT 5;

SELECT * FROM integers WHERE i > 4978321 LIMIT 5;

SELECT * FROM integers WHERE i > 4978321 LIMIT 5 OFFSET 100000;

SELECT * FROM integers WHERE i > 4978321 LIMIT 5 OFFSET 1000000;

SELECT i, LEAD(i, 1) OVER () FROM integers LIMIT 5 OFFSET 4978321;

SELECT i, LEAD(i, 100000) OVER () FROM integers LIMIT 5 OFFSET 4978321;

SELECT * FROM integers WHERE i IN (SELECT * FROM other_table);

(SELECT * FROM integers WHERE i > 1978321 LIMIT 5) UNION ALL (SELECT * FROM integers WHERE i > 4978321 LIMIT 5);

PRAGMA enable_verification;

PRAGMA threads = 8;

PRAGMA threads = 8;

CREATE ${table_type} integers AS SELECT i, [i, i + 1, i + 2] AS k, {'i': i} AS l FROM range(1000000) tbl(i);

SELECT k, l FROM integers LIMIT 5;

SELECT k, l FROM integers WHERE i > 197832 OR i = 334 LIMIT 5;

SELECT k, l FROM integers WHERE i > 197832 LIMIT 5;

SELECT k, l FROM integers WHERE i > 497832 LIMIT 5;

SELECT k, l FROM integers WHERE i > 497832 LIMIT 5 OFFSET 100000;

SELECT k, l FROM integers WHERE i > 497832 LIMIT 5 OFFSET 1000000;

SELECT k, l FROM integers WHERE i IN (SELECT * FROM other_table);

(SELECT k, l FROM integers WHERE i > 197832 LIMIT 5) UNION ALL (SELECT k, l FROM integers WHERE i > 497832 LIMIT 5);

PRAGMA enable_verification;

PRAGMA threads = 8;

PRAGMA threads = 8;

CREATE ${table_type} integers AS SELECT i, case when i%2=0 then [i, NULL, i + 2] else [NULL, i + 1, NULL] end AS k, {'i': case when i%2=0 then null else i end} AS l FROM range(1000000) tbl(i);

SELECT k, l FROM integers LIMIT 5;

SELECT k, l FROM integers WHERE i > 197832 OR i = 334 LIMIT 5;

SELECT k, l FROM integers WHERE i > 197832 LIMIT 5;

SELECT k, l FROM integers WHERE i > 497832 LIMIT 5;

SELECT k, l FROM integers WHERE i > 497832 LIMIT 5 OFFSET 100000;

SELECT k, l FROM integers WHERE i > 497832 LIMIT 5 OFFSET 1000000;

SELECT k, l FROM integers WHERE i IN (SELECT * FROM other_table);

(SELECT k, l FROM integers WHERE i > 197832 LIMIT 5) UNION ALL (SELECT k, l FROM integers WHERE i > 497832 LIMIT 5);

PRAGMA enable_verification;

PRAGMA threads = 8;

PRAGMA threads = 8;

CREATE ${table_type} integers AS SELECT i, CASE WHEN i%2=0 THEN NULL ELSE i END AS k FROM range(10000000) tbl(i);

SELECT k FROM integers LIMIT 5;

SELECT k FROM integers WHERE i > 1978321 OR i = 334 LIMIT 5;

SELECT k FROM integers WHERE i > 1978321 LIMIT 5;

SELECT k FROM integers WHERE i > 4978321 LIMIT 5;

SELECT k FROM integers WHERE i > 4978321 LIMIT 5 OFFSET 100000;

SELECT k FROM integers WHERE i > 4978321 LIMIT 5 OFFSET 1000000;

SELECT k FROM integers WHERE i IN (SELECT * FROM other_table);

(SELECT k FROM integers WHERE i > 1978321 LIMIT 5) UNION ALL (SELECT k FROM integers WHERE i > 4978321 LIMIT 5);

PRAGMA enable_verification;

PRAGMA threads = 8;

PRAGMA threads = 8;

CREATE ${table_type} integers AS SELECT i, CONCAT('quackquack', i) AS k FROM range(10000000) tbl(i);

SELECT k FROM integers LIMIT 5;

SELECT k FROM integers WHERE i > 1978321 OR i = 334 LIMIT 5;

SELECT k FROM integers WHERE i > 1978321 LIMIT 5;

SELECT k FROM integers WHERE i > 4978321 LIMIT 5;

SELECT k FROM integers WHERE i > 4978321 LIMIT 5 OFFSET 100000;

SELECT k FROM integers WHERE i > 4978321 LIMIT 5 OFFSET 1000000;

SELECT k FROM integers WHERE i IN (SELECT * FROM other_table);

(SELECT k FROM integers WHERE i > 1978321 LIMIT 5) UNION ALL (SELECT k FROM integers WHERE i > 4978321 LIMIT 5);

PRAGMA enable_verification;

SET preserve_insertion_order = FALSE;

CREATE TABLE integers AS SELECT 1 AS i FROM RANGE(0, 1000000) AS t(i);

SELECT MIN(i), MAX(i), COUNT(*) FROM integers;

SELECT * FROM integers LIMIT 5;

SELECT * FROM integers LIMIT 5 OFFSET 500000;

CREATE TABLE integers2 AS SELECT * FROM RANGE(0, 1000000) AS tbl(i);

SELECT MIN(i), MAX(i), COUNT(*) FROM integers2;

SELECT * FROM integers2 WHERE i IN (337, 195723, 442578, 994375);

SELECT * FROM integers2 WHERE i IN (337, 195723, 442578, 994375) LIMIT 4;

SELECT * FROM duckdb_logs;

SET logging_level = 'debug';

SET enable_logging = TRUE;

SELECT 1;

SELECT * EXCLUDE (timestamp, connection_id, transaction_id, query_id) FROM duckdb_logs;

SET enable_logging = FALSE;

SELECT * EXCLUDE (timestamp, connection_id, transaction_id, query_id) FROM duckdb_logs;

SET logging_storage = 'stdout';

SET logging_storage = 'memory';

SET logging_storage = 'quack';

SELECT * EXCLUDE (timestamp, connection_id, transaction_id, query_id) FROM duckdb_logs;

SET enable_logging = TRUE;

set variable base_transaction_id = current_transaction_id() + 2;

set variable base_query_id = current_query_id() + 1;

SELECT WRITE_LOG('hey1', log_type := 'test_logging_autocommit');

SELECT WRITE_LOG('hey2', log_type := 'test_logging_autocommit');

SELECT transaction_id - GETVARIABLE('base_transaction_id') AS relative_transaction_id;

SELECT * FROM duckdb_logs WHERE connection_id = CURRENT_CONNECTION_ID() AND type = 'test_logging_autocommit';

set variable base_transaction_id = current_transaction_id() + 2;

set variable base_query_id = current_query_id() + 1;

BEGIN;

SELECT WRITE_LOG('hey1', log_type := 'test_logging_transaction');

SELECT WRITE_LOG('hey2', log_type := 'test_logging_transaction');

COMMIT;

SELECT transaction_id - GETVARIABLE('base_transaction_id') AS relative_transaction_id;

SELECT * FROM duckdb_logs WHERE connection_id = CURRENT_CONNECTION_ID() AND type = 'test_logging_transaction';

SELECT * FROM duckdb_logs;

PRAGMA enable_logging;

SET logging_level = 'info';

set variable base_connection_id = current_connection_id();

set variable base_transaction_id = current_transaction_id() + 2;

set variable base_query_id = current_query_id() + 1;

SELECT WRITE_LOG('hello from the global log scope', level := 'info', scope := 'database', log_type := 'global_type') FROM RANGE(0, 3);

SELECT WRITE_LOG('hello from the connection log scope', level := 'info', scope := 'connection', log_type := 'client_context_type') FROM RANGE(0, 3);

SELECT WRITE_LOG('hello from the file_opener log scope', level := 'info', scope := 'file_opener', log_type := 'opener_type') FROM RANGE(0, 3);

SELECT * FROM duckdb_logs;

SELECT * EXCLUDE (timestamp, connection_id, transaction_id, query_id, thread_id) FROM duckdb_logs WHERE STARTS_WITH(message, 'hello from the') ORDER BY query_id;

SELECT type, connection_id - GETVARIABLE('base_connection_id'), transaction_id - GETVARIABLE('base_transaction_id');

SELECT * FROM duckdb_logs WHERE STARTS_WITH(message, 'hello from the') ORDER BY query_id;

SELECT * FROM duckdb_logs;

SET enable_logging = TRUE;

SET enable_logging = TRUE;

SELECT WRITE_LOG('hi_global', level := 'info', scope := 'database') FROM RANGE(0, 25);

SELECT WRITE_LOG('hi_client', level := 'info', scope := 'connection') FROM RANGE(0, 25);

SELECT WRITE_LOG('hi_file', level := 'info', scope := 'file_opener') FROM RANGE(0, 25);
endloop;

SELECT COUNT(*), message FROM duckdb_logs WHERE STARTS_WITH(message, 'hi_') GROUP BY message ORDER BY message;

PRAGMA truncate_duckdb_logs;

SELECT COUNT(*) FROM duckdb_logs;

CREATE OR REPLACE TABLE df AS (SELECT * AS i FROM RANGE(0, 10));

CREATE OR REPLACE TABLE wtf AS (SELECT 1 AS i);

EXPLAIN FROM
df, wtf
SELECT
df.i
WHERE df.i > 8
USING SAMPLE 1;

CREATE TABLE t (i INT);

INSERT INTO t VALUES (1);

INSERT INTO t VALUES (2);

SELECT * FROM t WHERE i IN ('1', '2', 'y');

SELECT CAST(x AS TEXT) IN ('1', CAST(y AS TEXT)) FROM (VALUES (1, 2), (2, 3)) AS tbl(x, y);

SELECT CAST(x AS BIGINT) IN (CAST(1 AS BIGINT), y) FROM (VALUES (CAST(1 AS INT), CAST(2 AS BIGINT)), (CAST(2 AS INT), CAST(3 AS BIGINT))) AS tbl(x, y);

PRAGMA explain_output = 'optimized_only';

WITH t(a, b) AS (SELECT CAST(a AS INT), CAST(b AS INT) FROM (VALUES ('1', '4'), ('5', '3'), ('2', '*'), ('3', '8'), ('7', '*')) AS _(a, b) WHERE STRPOS(b, '*') = 0) SELECT a, b FROM t WHERE a < b;

EXPLAIN WITH t(a, b) AS (
SELECT a :: int, b :: int
FROM (VALUES
('1', '4'),
('5', '3'),
('2', '*'),
('3', '8'),
('7', '*')) AS _(a, b)
WHERE position('*' in b) = 0
)
SELECT a, b
FROM   t
WHERE  a < b;

WITH t(a, b) AS (SELECT CAST(a AS TEXT), CAST(b AS TEXT) FROM (VALUES (1, 2), (3, 3), (5, 6), (7, 6)) AS _(a, b) WHERE a <= b) SELECT a, b FROM t WHERE a[1] = '1';

EXPLAIN with t(a, b) as  (
select a :: varchar, b :: varchar
FROM VALUES
(1, 2),
(3, 3),
(5, 6),
(7, 6) as
_(a, b) where a <= b
) select a, b from t where a[1] = '1';

CREATE OR REPLACE TABLE mytablename2 AS SELECT * FROM (VALUES ('a0'), ('a1'), ('a2'), ('xxx-0'), ('xxx-1'), ('xxx-2'), ('xxx-3'), ('xxxx'), ('xxx0'), ('xxx1'), ('xxx2'), ('xxx3')) AS t(mycolname), RANGE(0, 4300) AS b(someothercolname);

SELECT CAST(mycolname[2 : ] AS INT) AS mycolname2 FROM mytablename2 WHERE mycolname[1 : 3] <> 'xxx' AND mycolname2 = 0 LIMIT 5;

PRAGMA enable_verification;

CREATE TABLE t1 AS SELECT i + 100 AS x FROM RANGE(0, 250000) AS t(i);

SELECT * FROM t1 WHERE rowid = 6;

EXPLAIN SELECT * FROM t1 where rowid = 6;

SELECT * FROM t1 WHERE rowid = 200000;

EXPLAIN SELECT * FROM t1 where rowid = 200000;

SELECT * FROM t1 WHERE rowid IN (SELECT rowid FROM t1 ORDER BY rowid DESC LIMIT 10) ORDER BY rowid;

SELECT * FROM t1 WHERE rowid IN (6, 9) ORDER BY ALL;

EXPLAIN SELECT * FROM t1 where rowid IN (6, 9);

SELECT * FROM t1 WHERE rowid = 6 OR rowid = 9 ORDER BY ALL;

EXPLAIN SELECT * FROM t1 where rowid = 6 OR rowid = 9 ORDER BY ALL;

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

CALL dbgen(sf=0.01);

SELECT * FROM lineitem ORDER BY l_orderkey DESC LIMIT 5;

SELECT * FROM lineitem WHERE rowid IN (SELECT rowid FROM lineitem ORDER BY l_orderkey DESC LIMIT 5);

SELECT * FROM lineitem WHERE l_orderkey % 20000 = 0;

SELECT * FROM lineitem WHERE rowid IN (SELECT rowid FROM lineitem WHERE l_orderkey % 20000 = 0);

EXPLAIN SELECT * FROM lineitem WHERE rowid = 20058;

CREATE TABLE t1 AS SELECT -1 AS c1 FROM RANGE(0, 1);

SELECT t1.c1 FROM t1;

SELECT CAST(CAST(t1.c1 AS BIT) AS INT), (1 BETWEEN -1 AND CAST(CAST(t1.c1 AS BIT) AS INT)) FROM t1;

SELECT CAST(CAST(c1 AS BIT) AS INT) AS cast_res, 1 BETWEEN -1 AND CAST(CAST(c1 AS BIT) AS INT) AS watever FROM t1;

SELECT t1.c1 FROM t1 WHERE (1 BETWEEN -1 AND CAST(CAST(t1.c1 AS BIT) AS INT));

PRAGMA enable_verification;

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (1), (2), (3);

PRAGMA explain_output = 'OPTIMIZED_ONLY';

EXPLAIN SELECT COUNT(*), COUNT(), COUNT(i) FROM integers;

SELECT COUNT(*), COUNT(), COUNT(i) FROM integers;

EXPLAIN SELECT COUNT(*), COUNT(), SUM(i), COUNT(i), SUM(i) / COUNT(i) FROM integers;

SELECT COUNT(*), COUNT(), SUM(i), COUNT(i), SUM(i) / COUNT(i) FROM integers;

INSERT INTO integers VALUES (NULL);

EXPLAIN SELECT COUNT(*), COUNT(), SUM(i), COUNT(i), SUM(i) / COUNT(i) FROM integers;

SELECT COUNT(*), COUNT(), SUM(i), COUNT(i), SUM(i) / COUNT(i) FROM integers;

CREATE TABLE groups (grp INT, aggr1 INT, aggr2 INT, aggr3 INT);

INSERT INTO groups VALUES (1, 1, 2, 3), (1, 2, 4, 6), (2, 1, 2, 3), (2, 3, 6, 9);

SELECT CAST(SUM(aggr1) AS DOUBLE) / CAST(COUNT(aggr1) AS DOUBLE) AS avg_qty, CAST(SUM(aggr2) AS DOUBLE) / CAST(COUNT(aggr2) AS DOUBLE) AS avg_price, CAST(SUM(aggr3) AS DOUBLE) / CAST(COUNT(aggr3) AS DOUBLE) AS avg_disc FROM groups GROUP BY grp ORDER BY grp;

PRAGMA enable_verification;

WITH results AS (SELECT '2023-08-17T23:00:08.539Z' AS timestamp) SELECT * FROM results WHERE CAST(timestamp AS TIME) BETWEEN CAST('22:00:00' AS TIME) AND CAST('23:59:59' AS TIME);

CREATE TABLE issue8316 (dt TIMESTAMP);

INSERT INTO issue8316 VALUES ('2016-02-14 18:00:05'), ('2016-02-15 10:04:25'), ('2016-02-16 10:04:25'), ('2016-02-16 23:59:55');

SELECT dt FROM issue8316 WHERE CAST(dt AS TIME) = CAST('10:04:25' AS TIME) ORDER BY 1;

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (1), (2), (3), (NULL);

SELECT i FROM integers WHERE (i = 1 AND i > 0) OR (i = 1 AND i < 3) ORDER BY i;

SELECT i FROM integers WHERE (i = 1) OR (i = 1) ORDER BY i;

SELECT i FROM integers WHERE (i = 1) OR (i = 1) OR (i = 1) OR (i = 1) OR (i = 1) ORDER BY i;

SELECT i FROM integers WHERE (i IS NULL AND i = 1) OR (i IS NULL AND i < 10) ORDER BY i;

SELECT i FROM integers WHERE (NOT i IS NULL AND i > 1) OR (NOT i IS NULL AND i < 10) ORDER BY i;

SELECT i FROM integers WHERE (i IS NULL AND (i + 1) IS NULL) OR (i IS NULL AND (i + 2) IS NULL) ORDER BY i;

SELECT i FROM integers WHERE i = 1 OR 1 = 1 ORDER BY i;

SELECT i FROM integers WHERE i = 1 OR 1 = 0 OR 1 = 1 ORDER BY i;

SELECT i FROM integers WHERE (i = 1 OR 1 = 0 OR i = 1) AND (0 = 1 OR 1 = 0 OR 1 = 1) ORDER BY i;

SELECT (i = 1 AND i > 0) OR (i = 1 AND i < 3) FROM integers ORDER BY i;

SELECT (i = 1) OR (i = 1) FROM integers ORDER BY i;

SELECT (i = 1) OR (i = 1) OR (i = 1) OR (i = 1) OR (i = 1) FROM integers ORDER BY i;

SELECT (i IS NULL AND i = 1) OR (i IS NULL AND i < 10) FROM integers ORDER BY i;

SELECT (NOT i IS NULL AND i > 1) OR (NOT i IS NULL AND i < 10) FROM integers ORDER BY i;

SELECT (i IS NULL AND (i + 1) IS NULL) OR (i IS NULL AND (i + 2) IS NULL) FROM integers ORDER BY i;

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

CREATE TABLE test (a INT);

INSERT INTO test VALUES (42);

SELECT (a * 2) + (a * 2) FROM test;

SELECT (a * 2) + (a * 2) + (a * 2) + (a * 2) + (a * 2) FROM test;

SELECT (a * 2) + (a * 2) + (a * 2) + (a * 2) + (a * 2), a FROM test;

SELECT SUM((a * 2) + (a * 2) + (a * 2) + (a * 2) + (a * 2)) FROM test;

SELECT a, SUM((a * 2) + (a * 2) + (a * 2) + (a * 2) + (a * 2)) FROM test GROUP BY a;

SELECT * FROM test WHERE ((a * 2) + (a * 2)) > 100;

SELECT * FROM test WHERE ((a * 2) + (a * 2) + (a * 2) + (a * 2) + (a * 2)) > 400;

CREATE TABLE test2 (a TEXT);

INSERT INTO test2 VALUES ('hello'), ('world'), (NULL);

SELECT SUBSTRING(a, 1, 3) = SUBSTRING(a, 1, 3) FROM test2 ORDER BY 1;

SELECT SUBSTRING(a, 1, 3) = SUBSTRING(a, 1, 3) AS b FROM test2 GROUP BY b ORDER BY b;

PRAGMA enable_verification;

CREATE TABLE dates (lo_commitdate DATE);

INSERT INTO dates VALUES (CAST('1992-02-10' AS DATE));

SELECT CAST('2020-02-20' AS DATE) - CAST(MIN("ta_1"."lo_commitdate") AS DATE) AS "ca_1" FROM dates AS "ta_1" HAVING CAST('2020-02-20' AS DATE) - CAST(MIN("ta_1"."lo_commitdate") AS DATE) > 4 ORDER BY "ca_1" ASC;

PRAGMA enable_verification;

PRAGMA explain_output = 'PHYSICAL_ONLY';

CREATE TABLE test (i INT, j INT, k INT);

INSERT INTO test VALUES (1, 1, 3), (2, 2, 4), (NULL, NULL, NULL);

SELECT i FROM test WHERE (i = j) OR (i IS NULL AND j IS NULL);

EXPLAIN SELECT (i=j) OR (i IS NULL AND j IS NULL) FROM test;

SELECT i FROM test WHERE i IS NOT DISTINCT FROM j;

EXPLAIN SELECT i IS NOT DISTINCT FROM j FROM test;

SELECT i FROM test WHERE (i IS NULL AND j IS NULL) OR (i = j);

EXPLAIN SELECT (i IS NULL AND j IS NULL) OR (i=j) FROM test;

SELECT test1.i FROM test AS test1, test AS test2 WHERE (test1.i = test2.j) OR (test1.i IS NULL AND test2.j IS NULL) ORDER BY 1;

EXPLAIN SELECT test1.i FROM test AS test1, test AS test2 WHERE (test1.i=test2.j) OR (test1.i IS NULL AND test2.j IS NULL);

EXPLAIN SELECT test1.i FROM test AS test1, test AS test2 WHERE (test1.i IS NULL AND test2.j IS NULL) OR (test1.i=test2.j);

SELECT i FROM test WHERE (i = k) OR (i IS NULL AND j IS NULL);

EXPLAIN SELECT i FROM test WHERE (i=k) OR (i IS NULL AND j IS NULL);

SELECT i FROM test WHERE (i = j) OR (i IS NULL AND j = 1);

EXPLAIN SELECT i FROM test WHERE (i=j) OR (i IS NULL AND j = 1);

SELECT test1.i FROM test AS test1, test AS test2 WHERE (test1.i = test2.j) OR (test2.i IS NULL AND test1.j IS NULL);

EXPLAIN SELECT test1.i FROM test AS test1, test AS test2 WHERE (test1.i=test2.j) OR (test2.i IS NULL AND test1.j IS NULL);

SELECT test1.i FROM test AS test1, test AS test2 WHERE (test1.i = test2.k) OR (test2.i IS NULL AND test2.j IS NULL);

EXPLAIN SELECT test1.i FROM test AS test1, test AS test2 WHERE (test1.i=test2.k) OR (test2.i IS NULL AND test2.j IS NULL);

PRAGMA enable_verification;

SELECT MAX(DISTINCT x) FROM RANGE(0, 10) AS tbl(x);

SELECT x, MAX(DISTINCT x) OVER (ORDER BY x DESC) FROM RANGE(0, 10) AS tbl(x);

PRAGMA enable_verification;

CREATE TABLE issue13380 (c0 TIMESTAMP);

INSERT INTO issue13380 (c0) VALUES ('2024-08-09 14:48:00');

SELECT CAST(c0 AS DATE) IN ('2024-08-09') AS d FROM issue13380;

SELECT NOT (CAST(c0 AS DATE) IN ('2024-08-09')) FROM issue13380;

SELECT NOT CAST(c0 AS DATE) IN ('2024-08-09') FROM issue13380;

PRAGMA enable_verification;

CREATE TABLE test (a INT, b INT);

INSERT INTO test VALUES (42, 10), (43, 100);

SELECT a + 0 FROM test;

SELECT 0 + a FROM test;

SELECT a - 0 FROM test;

SELECT 0 - a FROM test;

SELECT a * 1 FROM test;

SELECT 1 * a FROM test;

SELECT a * 0 FROM test;

SELECT 0 * a FROM test;

SELECT a / 1 FROM test;

SELECT 1 // a FROM test;

SELECT a // 0 FROM test;

SELECT 0 // a FROM test;

UPDATE test SET a = NULL;

SELECT a * 0 FROM test;

SELECT rowid * 0 FROM test;

SELECT 0 / a FROM test;

SET ieee_floating_point_ops = FALSE;

SELECT 0 / rowid FROM test;

PRAGMA enable_verification;

CREATE OR REPLACE TABLE table1 (timestamp_str TEXT);

INSERT INTO table1 VALUES ('2024-05-03 01:00:00'), ('2024-05-03 01:00:02');

SELECT timestamp_str, CAST(timestamp_str AS TIMESTAMP) FROM table1 WHERE CAST(timestamp_str AS TIMESTAMP) > CAST('2024-05-03 01:00:00' AS TIMESTAMP);

TRUNCATE TABLE table1;

INSERT INTO table1 VALUES ('2024-05-03T01:00:00+00:00'), ('2024-05-03T01:00:02+00:00');

SELECT timestamp_str, CAST(timestamp_str AS TIMESTAMP) FROM table1 WHERE CAST(timestamp_str AS TIMESTAMP) > CAST('2024-05-03 01:00:00' AS TIMESTAMP);

SELECT timestamp_str, CAST(timestamp_str AS TIMESTAMP) FROM table1 WHERE CAST(timestamp_str AS TIMESTAMP) > CAST('2024-05-03T01:00:00+00:00' AS TIMESTAMP);

SELECT * FROM (SELECT timestamp_str, CAST(timestamp_str AS TIMESTAMP) AS timestamp_column FROM table1) WHERE timestamp_column > CAST('2024-05-03 01:00:00' AS TIMESTAMP);

CREATE TABLE struct_pushdown_test (id INT, struct_col STRUCT(sub_col1 INT, sub_col2 BOOLEAN));

INSERT INTO struct_pushdown_test VALUES (1, {'sub_col1': 42, 'sub_col2': TRUE}), (2, NULL), (3, {'sub_col1': 84, 'sub_col2': NULL}), (4, {'sub_col1': NULL, 'sub_col2': FALSE});

COPY struct_pushdown_test TO '__TEST_DIR__/struct_pushdown_test.parquet';

COPY struct_pushdown_test TO '__TEST_DIR__/struct_pushdown_test.parquet';

EXPLAIN SELECT struct_col.sub_col2 FROM ${source};

EXPLAIN SELECT struct_col.sub_col1 FROM ${source};

EXPLAIN SELECT struct_col.sub_col1, struct_col.sub_col2 FROM ${source};

EXPLAIN SELECT struct_col.sub_col1, struct_col FROM ${source};

CREATE TABLE nested_struct_pushdown_test (id INT, struct_col STRUCT(name STRUCT(v TEXT, id INT), nested_struct STRUCT(a INT, b BOOLEAN)));

INSERT INTO nested_struct_pushdown_test VALUES (1, {'name': {'v': 'Row 1', 'id': 1}, 'nested_struct': {'a': 42, 'b': TRUE}}), (2, NULL), (3, {'name': {'v': 'Row 3', 'id': 3}, 'nested_struct': {'a': 84, 'b': NULL}}), (4, {'name': NULL, 'nested_struct': {'a': NULL, 'b': FALSE}});

COPY nested_struct_pushdown_test TO '__TEST_DIR__/nested_struct_pushdown_test.parquet' WITH (foreach source, nested_struct_pushdown_test READ_PARQUET('__TEST_DIR__/nested_struct_pushdown_test.parquet'));

EXPLAIN SELECT struct_col.name.id FROM ${source};

EXPLAIN SELECT struct_col.name.id, struct_col.name FROM ${source};

EXPLAIN SELECT struct_col.name.id, struct_col FROM ${source};

CREATE OR REPLACE TABLE nested_struct_pushdown_test (id INT, struct_col STRUCT(s STRUCT(name STRUCT(v TEXT, id INT), nested_struct STRUCT(a INT, b BOOLEAN))));

INSERT INTO nested_struct_pushdown_test VALUES (1, {'s': {'name': {'v': 'Row 1', 'id': 1}, 'nested_struct': {'a': 42, 'b': TRUE}}}), (2, NULL), (3, {'s': {'name': {'v': 'Row 3', 'id': 3}, 'nested_struct': {'a': 84, 'b': NULL}}}), (4, {'s': {'name': NULL, 'nested_struct': {'a': NULL, 'b': FALSE}}});

COPY nested_struct_pushdown_test TO '__TEST_DIR__/nested_struct_pushdown_test.parquet' WITH (foreach source, nested_struct_pushdown_test READ_PARQUET('__TEST_DIR__/nested_struct_pushdown_test.parquet'));

EXPLAIN SELECT struct_col.s.name.id FROM ${source};

EXPLAIN SELECT struct_col.s.name.id, struct_col.s.name FROM ${source};

EXPLAIN SELECT struct_col.s.name.id, struct_col FROM ${source};

PRAGMA enable_verification;

CREATE TABLE strings AS SELECT i FROM (VALUES ('pedro'), ('peter'), ('mark')) AS t1(i), RANGE(0, 100000) AS t2(j) ORDER BY j;

SELECT COUNT(i) FROM strings WHERE i = 'pedro';

SELECT COUNT(i) FROM strings WHERE i = 'peter';

SELECT COUNT(i) FROM strings WHERE i = 'mark';

SELECT COUNT(i) FROM strings WHERE i = 'diego';

INSERT INTO strings VALUES ('po');

INSERT INTO strings VALUES ('stefan manegold');

INSERT INTO strings VALUES ('tim k');

INSERT INTO strings VALUES ('tim k');

UPDATE strings SET i = 'zorro' WHERE i = 'pedro';

SELECT COUNT(i) FROM strings WHERE i >= 'tim k';

PRAGMA explain_output = 'optimized_only';

SET disabled_optimizers = 'build_side_probe_side';

EXPLAIN from range(10) r1 right join range(10) r2 using (range);

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (1), (2), (3), (NULL);

SELECT * FROM integers AS i1, integers AS i2 WHERE i1.i = i2.i ORDER BY 1;

SELECT * FROM integers AS i1, integers AS i2 WHERE i1.i = i2.i AND i1.i > 1 ORDER BY 1;

SELECT * FROM integers AS i1, integers AS i2, integers AS i3 WHERE i1.i = i2.i AND i1.i = i3.i AND i1.i > 1 ORDER BY 1;

SELECT * FROM integers AS i1 JOIN integers AS i2 ON i1.i = i2.i WHERE i1.i > 1 ORDER BY 1;

SELECT * FROM integers AS i1 LEFT OUTER JOIN integers AS i2 ON 1 = 1 WHERE i1.i > 2 ORDER BY 2;

SELECT * FROM integers AS i1 LEFT OUTER JOIN integers AS i2 ON 1 = 0 WHERE NOT i2.i IS NULL ORDER BY 2;

SELECT * FROM integers AS i1 LEFT OUTER JOIN integers AS i2 ON 1 = 0 WHERE i2.i > 1 ORDER BY 2;

SELECT * FROM integers AS i1 LEFT OUTER JOIN integers AS i2 ON 1 = 0 WHERE CASE WHEN i2.i IS NULL THEN FALSE ELSE TRUE END ORDER BY 2;

SELECT DISTINCT * FROM integers AS i1 LEFT OUTER JOIN integers AS i2 ON 1 = 0 WHERE i2.i IS NULL ORDER BY 1;

SELECT * FROM integers AS i1 LEFT OUTER JOIN integers AS i2 ON 1 = 1 WHERE i1.i = i2.i ORDER BY 1;

SELECT * FROM integers WHERE i IN ((SELECT * FROM integers)) ORDER BY i;

SELECT * FROM integers WHERE NOT i IN ((SELECT * FROM integers WHERE i = 1)) ORDER BY i;

SELECT * FROM integers WHERE i IN ((SELECT * FROM integers)) AND i < 3 ORDER BY i;

SELECT * FROM integers AS i1, integers AS i2 WHERE i1.i IN ((SELECT * FROM integers)) AND i1.i = i2.i ORDER BY 1;

SELECT * FROM integers AS i1 WHERE EXISTS(SELECT i FROM integers WHERE i = i1.i) ORDER BY i1.i;

SELECT * FROM integers AS i1 WHERE NOT EXISTS(SELECT i FROM integers WHERE i = i1.i) ORDER BY i1.i;

SELECT * FROM integers AS i1, integers AS i2 WHERE i1.i = (SELECT i FROM integers WHERE i1.i = i) AND i1.i = i2.i ORDER BY i1.i;

SELECT * FROM (SELECT i1.i AS a, i2.i AS b FROM integers AS i1, integers AS i2) AS a1 WHERE a = b ORDER BY 1;

SELECT * FROM (SELECT i1.i = i2.i AS cond FROM integers AS i1, integers AS i2) AS a1 WHERE cond ORDER BY 1;

SELECT * FROM (SELECT DISTINCT i1.i AS a, i2.i AS b FROM integers AS i1, integers AS i2) AS res WHERE a = 1 AND b = 3;

SELECT * FROM (SELECT * FROM integers AS i1 UNION SELECT * FROM integers AS i2) AS a WHERE i = 3;

SELECT * FROM (SELECT i1.i AS a, i2.i AS b, ROW_NUMBER() OVER (ORDER BY i1.i, i2.i) FROM integers AS i1, integers AS i2 WHERE NOT i1.i IS NULL AND NOT i2.i IS NULL) AS a1 WHERE a = b ORDER BY 1;

SELECT * FROM (SELECT 0 = 1 AS cond FROM integers AS i1, integers AS i2) AS a1 WHERE cond ORDER BY 1;

SELECT * FROM (SELECT 0 = 1 AS cond FROM integers AS i1, integers AS i2 GROUP BY 1) AS a1 WHERE cond ORDER BY 1;

CREATE TABLE vals1 AS SELECT i AS i, i AS j FROM RANGE(0, 10000, 1) AS t1(i);

CREATE TABLE vals2 (k INT, l INT);

INSERT INTO vals2 SELECT * FROM vals1;

SELECT COUNT(*) FROM (SELECT * FROM vals1, vals2) AS tbl1, (SELECT * FROM vals1, vals2) AS tbl2 WHERE tbl1.i + 1 = 5001 AND tbl1.i <> 5000;

SELECT COUNT(*) FROM (SELECT * FROM vals1, vals2) AS tbl1, (SELECT * FROM vals1, vals2) AS tbl2 WHERE tbl1.i - 1 = 4999 AND tbl1.i <> 5000;

SELECT COUNT(*) FROM (SELECT * FROM vals1, vals2) AS tbl1, (SELECT * FROM vals1, vals2) AS tbl2 WHERE tbl1.i * 2 = 10000 AND tbl1.i <> 5000;

SELECT COUNT(*) FROM (SELECT * FROM vals1, vals2) AS tbl1, (SELECT * FROM vals1, vals2) AS tbl2 WHERE -tbl1.i = -5000 AND tbl1.i <> 5000;

CREATE TABLE vals1 AS SELECT i AS i, i AS j FROM RANGE(0, 10000, 1) AS t1(i);

CREATE TABLE vals2 (k INT, l INT);

CREATE TABLE vals1 AS SELECT i AS i, i AS j FROM RANGE(0, 10000, 1) AS t1(i);

CREATE TABLE vals2 (k INT, l INT);

INSERT INTO vals2 SELECT * FROM vals1;

SELECT i, k FROM (SELECT i, k FROM vals1, vals2) AS tbl1 WHERE i = k AND i < 5 ORDER BY i;

SELECT i, k FROM (SELECT DISTINCT i, k FROM vals1, vals2) AS tbl1 WHERE i = k AND i < 5 ORDER BY i;

SELECT i, k, SUM(j) FROM vals1, vals2 GROUP BY i, k HAVING i = k AND i < 5 ORDER BY i;

SELECT i, k, SUM(j) FROM (SELECT * FROM vals1, vals2) AS tbl1 GROUP BY i, k HAVING i = k AND i < 5 ORDER BY i;

SELECT i, k, sum FROM (SELECT i, k, SUM(j) AS sum FROM vals1, vals2 GROUP BY i, k) AS tbl1 WHERE i = k AND i < 5 ORDER BY i;

SELECT * FROM vals1 LEFT OUTER JOIN vals2 ON 1 = 1 WHERE i = k AND k = 5;

SELECT * FROM vals1 LEFT OUTER JOIN vals2 ON 1 = 1 WHERE i = k ORDER BY i LIMIT 5;

SELECT * FROM (SELECT * FROM vals1, vals2 WHERE j = 5 AND l = 5) AS tbl1 LEFT OUTER JOIN (SELECT * FROM vals1, vals2) AS tbl2 ON tbl1.i = tbl2.i AND tbl1.k = tbl2.k WHERE tbl2.j = 5 AND tbl2.l = 5;

SELECT * FROM (SELECT * FROM vals1, vals2) AS tbl1 LEFT OUTER JOIN (SELECT * FROM vals1, vals2 WHERE i = 5 AND k = 10) AS tbl2 ON tbl1.i = tbl2.i AND tbl1.k = tbl2.k WHERE tbl1.i = 5 AND tbl1.k = 10;

SELECT * FROM (SELECT * FROM vals1, vals2 WHERE i = 5 AND k = 5) AS tbl1 LEFT OUTER JOIN (SELECT * FROM vals1, vals2) AS tbl2 ON tbl2.i = 5 AND tbl2.k = 5;

SELECT * FROM (SELECT * FROM vals1, vals2 WHERE i = 5 AND k = 5) AS tbl1 LEFT OUTER JOIN (SELECT * FROM vals1, vals2) AS tbl2 ON tbl2.i > 10000 AND tbl2.k = 5;

SELECT * FROM (SELECT * FROM vals1, vals2) AS tbl1 LEFT OUTER JOIN (SELECT * FROM vals1, vals2) AS tbl2 ON tbl1.i = tbl2.i AND tbl1.k = tbl2.k WHERE tbl1.i = 5 AND tbl1.k = 10;

SELECT * FROM (SELECT * FROM vals1, vals2) AS tbl1 LEFT OUTER JOIN (SELECT * FROM vals1, vals2) AS tbl2 ON tbl1.i = tbl2.i AND tbl1.k = tbl2.k WHERE tbl1.i > 4 AND tbl1.i < 6 AND tbl1.k = 10;

SELECT * FROM (SELECT * FROM vals1, vals2 UNION SELECT * FROM vals1, vals2) AS tbl1 WHERE i = 3 AND k = 5;

SELECT * FROM (SELECT * FROM vals1, vals2 EXCEPT SELECT * FROM vals1, vals2) AS tbl1 WHERE i = 3 AND k = 5;

SELECT * FROM (SELECT * FROM vals1, vals2 EXCEPT SELECT * FROM vals1, vals2 WHERE i <> 1) AS tbl1 WHERE i < 5 AND k < 5 ORDER BY 1, 2, 3, 4;

SELECT * FROM (SELECT * FROM vals1, vals2 INTERSECT SELECT * FROM vals1, vals2) AS tbl1 WHERE i = 3 AND k = 5;

SELECT * FROM (SELECT 0 = 1 AS cond FROM vals1, vals2) AS a1 WHERE cond ORDER BY 1;

SELECT * FROM (SELECT 1 AS a FROM vals1, vals2) AS a1 WHERE a = 0 ORDER BY 1;

SELECT * FROM (SELECT 0 = 1 AS cond FROM vals1, vals2 GROUP BY 1) AS a1 WHERE cond ORDER BY 1;

SELECT * FROM (SELECT 1 AS a FROM vals1, vals2 GROUP BY a) AS a1 WHERE a = 0 ORDER BY 1;

SELECT COUNT(*) FROM (SELECT * FROM vals1, vals2) AS tbl1, (SELECT * FROM vals1, vals2) AS tbl2 WHERE tbl1.i = tbl1.k AND tbl1.i = tbl2.k AND tbl1.i = tbl2.i AND tbl1.i = 5000;

SELECT COUNT(*) FROM (SELECT * FROM vals1, vals2) AS tbl1, (SELECT * FROM vals1, vals2) AS tbl2 WHERE tbl1.i = tbl1.k AND tbl1.i = tbl2.k AND tbl1.i = tbl2.i AND tbl1.i > 4999 AND tbl1.i < 5001;

SELECT COUNT(*) FROM (SELECT * FROM vals1, vals2) AS tbl1, (SELECT * FROM vals1, vals2) AS tbl2 WHERE tbl1.i = 5000 AND tbl1.i <> 5000;

SELECT COUNT(*) FROM (SELECT * FROM vals1, vals2) AS tbl1, (SELECT * FROM vals1, vals2) AS tbl2 WHERE tbl1.i = 5000 AND tbl1.i = tbl2.i AND tbl2.i <> 5000;

SELECT COUNT(*) FROM (SELECT * FROM vals1, vals2) AS tbl1, (SELECT * FROM vals1, vals2) AS tbl2 WHERE tbl1.i = 5000 AND tbl1.i = tbl2.i AND tbl1.i = tbl2.k AND tbl1.i = tbl1.k AND tbl2.i <> 5001;

SELECT COUNT(*) FROM (SELECT * FROM vals1, vals2) AS tbl1, (SELECT * FROM vals1, vals2) AS tbl2 WHERE tbl2.i > 10 AND tbl1.k >= 500 AND tbl2.k < 7000 AND tbl2.k <= 6000 AND tbl2.k <> 8000 AND tbl1.i <> 4000 AND tbl1.i = tbl2.i AND tbl1.i = tbl2.k AND tbl1.i = tbl1.k AND tbl1.i = 5000;

CALL dsdgen(sf=0.01);

PRAGMA explain_output = 'OPTIMIZED_ONLY';

EXPLAIN WITH ss AS MATERIALIZED
( SELECT i_manufact_id,
sum(ss_ext_sales_price) total_sales
FROM store_sales,
date_dim,
customer_address,
item
WHERE i_manufact_id IN
(SELECT i_manufact_id
FROM item
WHERE i_category IN ('Electronics'))
AND ss_item_sk = i_item_sk
AND ss_sold_date_sk = d_date_sk
AND d_year = 1998
AND d_moy = 5
AND ss_addr_sk = ca_address_sk
AND ca_gmt_offset = -5
GROUP BY i_manufact_id)
FROM ss;

PRAGMA enable_verification;

CREATE TABLE integers AS SELECT i AS i, i AS j FROM RANGE(0, 100) AS tbl(i);

SELECT j FROM integers WHERE j = 99;

SELECT j FROM integers WHERE j = 99 AND i = 99;

SELECT j FROM integers WHERE j = 99 AND i = 90;

SELECT COUNT(i) FROM integers WHERE j > 90 AND i < 95;

SELECT COUNT(i) FROM integers WHERE j > 90 AND j < 95;

PRAGMA enable_verification;

CREATE TABLE test (a INT, b INT);

INSERT INTO test VALUES (11, 1), (12, 2), (13, 3);

CREATE TABLE test2 (b INT, c INT);

INSERT INTO test2 VALUES (1, 10), (1, 20), (2, 30);

SELECT COUNT(*) FROM test, test2 WHERE test.b = test2.b;

SELECT SUM(test.a), MIN(test.a), MAX(test.a) FROM test, test2 WHERE test.b = test2.b;

SELECT COUNT(*) FROM test AS a1, test AS a2, test AS a3 WHERE a1.b = a2.b AND a2.b = a3.b;

SELECT SUM(a1.a) FROM test AS a1, test AS a2, test AS a3 WHERE a1.b = a2.b AND a2.b = a3.b;

SELECT COUNT(*) FROM test AS a1, test AS a2, test AS a3 WHERE a1.b = a2.b AND a2.b = a3.b AND a1.a = 11 AND a2.a = 11 AND a3.a = 11;

SELECT (TRUE OR a1.a = a2.b) FROM test AS a1, test AS a2 WHERE a1.a = 11 AND a2.a >= 10;

PRAGMA enable_verification;

CREATE TABLE test (a INT128);

INSERT INTO test VALUES (CAST((-170141183460469231731687303715884105728) AS INT128)), (-CAST(1111 AS INT128)), (-CAST(1 AS INT128)), (CAST(0 AS INT128)), (CAST(1 AS INT128)), (CAST(1111 AS INT128));

SELECT * FROM test ORDER BY a;

SELECT * FROM test ORDER BY a DESC;

PRAGMA enable_verification;

CREATE TABLE test (col1 INT, col2 SMALLINT[][][][][][]);

INSERT INTO test VALUES (1000000000, NULL), (1000000001, [[[[[[]]]]]]), (NULL, [[[[[[]]]]]]), (NULL, [[[[[[]]]]]]), (1, [[[[[[]]]]]]);

SELECT col1, col2 FROM test ORDER BY col1, col2;

PRAGMA enable_verification;

CREATE TABLE integers (i INT, j INT);

INSERT INTO integers VALUES (1, 1), (3, 3);

CREATE TABLE integers2 (k INT, l INT);

INSERT INTO integers2 VALUES (1, 10), (2, 20);

SELECT i, j, k, l FROM integers FULL OUTER JOIN integers2 ON integers.i = integers2.k ORDER BY ALL LIMIT 2;

SELECT COUNT(*) FROM (SELECT i, j, k, l FROM integers FULL OUTER JOIN integers2 ON integers.i = integers2.k LIMIT 2) AS tbl;

PRAGMA enable_verification;

SELECT * FROM GENERATE_SERIES(0, 10000, 1) AS tbl(i) ORDER BY i DESC LIMIT 5;

CREATE TABLE integers AS SELECT 5 AS k;

SELECT * FROM GENERATE_SERIES(0, 10000, 1) AS tbl(i) ORDER BY i DESC LIMIT (SELECT k FROM integers);

CREATE TABLE strings AS SELECT CAST('5' AS TEXT) AS k;

SELECT * FROM GENERATE_SERIES(0, 10000, 1) AS tbl(i) ORDER BY i DESC LIMIT (SELECT k FROM strings);

PREPARE v1 AS SELECT * FROM generate_series(0, 10000, 1) tbl(i) ORDER BY i DESC LIMIT ?::VARCHAR;

EXECUTE v1(5);

PREPARE v1 AS SELECT * FROM generate_series(0, 10000, 1) tbl(i) ORDER BY i DESC LIMIT ?::VARCHAR %;

EXECUTE v1('0.05');

CREATE TABLE doubles AS SELECT 0.05 AS d;

CREATE TABLE doubles AS SELECT 0.05 AS d;

PRAGMA enable_verification;

SELECT * FROM RANGE(0, 5) UNION ALL SELECT * FROM RANGE(0, 5) LIMIT 7;

SELECT COUNT(*) FROM (SELECT * FROM RANGE(0, 5) UNION ALL SELECT * FROM RANGE(0, 5) LIMIT 7) AS tbl;

PRAGMA enable_verification;

SELECT * FROM GENERATE_SERIES(0, 10, 1) LIMIT 3 OFFSET -1;

SELECT * FROM GENERATE_SERIES(0, 10, 1) LIMIT -3;

SELECT * FROM GENERATE_SERIES(0, 10, 1) LIMIT -3;

CREATE TABLE integers AS SELECT -1 AS k;

SELECT * FROM GENERATE_SERIES(0, 10, 1) LIMIT (SELECT k FROM integers);

SELECT * FROM GENERATE_SERIES(0, 10, 1) LIMIT 1 OFFSET (SELECT k FROM integers);

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

CREATE TABLE integers (g INT, i INT);

INSERT INTO integers VALUES (0, 1), (0, 2), (1, 3), (1, NULL);

SELECT * FROM integers ORDER BY ALL;

SELECT * FROM integers ORDER BY * DESC;

SELECT * FROM integers ORDER BY * DESC;

SELECT * FROM integers UNION ALL SELECT * FROM integers ORDER BY ALL;

SELECT * FROM integers UNION SELECT * FROM integers ORDER BY ALL;

SELECT 42 ORDER BY -9223372036854775808;

SET default_null_order = 'nulls_first';

PRAGMA verify_parallelism;

PRAGMA threads = 3;

PRAGMA threads = 3;

PRAGMA threads = 3;

PRAGMA memory_limit = '${mem}MB';

CREATE TABLE test AS (SELECT range AS i FROM RANGE(0, 100000));

INSERT INTO test VALUES (NULL);

SELECT * FROM test ORDER BY CAST(i AS TEXT) NULLS FIRST;

SELECT * FROM test ORDER BY i % 10, CAST(i AS TEXT);

SELECT * FROM test ORDER BY CAST(i % 10 AS TEXT), i;

SELECT * FROM test ORDER BY CAST(i % 100 AS TEXT), i % 10, CAST(i AS TEXT) NULLS FIRST;

SELECT * FROM test ORDER BY CAST(i % 1000 AS TEXT), i % 100, CAST(i % 10 AS TEXT), i;

SELECT * FROM test ORDER BY i % 100, CAST(i % 10 AS TEXT), CAST(i AS TEXT);

SELECT * FROM test ORDER BY CAST(i % 1000 AS TEXT), i % 100, i % 10, CAST(i AS TEXT);

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

PRAGMA verify_parallelism;

create table integers as select range i from range(100000) order by random()
loop i 0 20;

create table sorted_integers as select i from integers order by i
restart;

SELECT * FROM sorted_integers QUALIFY NOT (i > LAG(i) OVER () OR LAG(i) OVER () IS NULL);

SELECT * FROM sorted_integers QUALIFY NOT (i > LAG(i) OVER () OR LAG(i) OVER () IS NULL);

CREATE TABLE sorted_integers AS WITH p1 AS (SELECT i FROM integers ORDER BY i), p2 AS (SELECT i + 100000 FROM integers ORDER BY i) SELECT * FROM p1 UNION ALL SELECT * FROM p2 AS restart;

SELECT * FROM sorted_integers QUALIFY NOT (i > LAG(i) OVER () OR LAG(i) OVER () IS NULL);

PRAGMA verify_parallelism;

PRAGMA threads = 3;

CREATE TABLE test AS (SELECT range AS i FROM RANGE(0, 100000) ORDER BY i DESC);

SELECT * FROM test ORDER BY i ASC;

SELECT * FROM test ORDER BY i ASC;

SELECT * FROM test ORDER BY i ASC;

PRAGMA memory_limit = '${mem}MB';

CREATE TABLE test AS (SELECT range AS i FROM RANGE(0, 100000));

SELECT * FROM test ORDER BY i DESC;

SELECT CAST(i AS TEXT) FROM test ORDER BY i DESC;

SELECT CAST(i + 1000000000000 AS TEXT) FROM test ORDER BY i DESC;

SET default_null_order = 'nulls_first';

PRAGMA verify_parallelism;

PRAGMA verify_parallelism;

PRAGMA verify_parallelism;

PRAGMA memory_limit = '${mem}MB';

CREATE TABLE test AS (SELECT range AS i FROM RANGE(0, 100000));

INSERT INTO test VALUES (NULL);

SELECT * FROM test ORDER BY CAST(i + 1000000000000 AS TEXT) NULLS FIRST;

SELECT * FROM test ORDER BY i % 10, CAST(i + 1000000000000 AS TEXT);

SELECT * FROM test ORDER BY CAST(i % 10 + 1000000000000 AS TEXT), i;

SELECT * FROM test ORDER BY CAST(i % 100 + 1000000000000 AS TEXT), i % 10, CAST(i + 1000000000000 AS TEXT) NULLS FIRST;

SELECT * FROM test ORDER BY CAST(i % 1000 + 1000000000000 AS TEXT), i % 100, CAST(i % 10 + 1000000000000 AS TEXT), i;

SELECT * FROM test ORDER BY i % 100, CAST(i % 10 + 1000000000000 AS TEXT), CAST(i + 1000000000000 AS TEXT);

SELECT * FROM test ORDER BY CAST(i % 1000 + 1000000000000 AS TEXT), i % 100, i % 10, CAST(i + 1000000000000 AS TEXT);

PRAGMA verify_parallelism;

PRAGMA verify_parallelism;

PRAGMA verify_parallelism;

PRAGMA memory_limit = '${mem}MB';

CREATE TABLE test AS (SELECT range AS i FROM RANGE(0, 100000));

SELECT i FROM test ORDER BY CAST(i AS TEXT) DESC;

SELECT i FROM test ORDER BY [i] DESC;

SELECT i FROM test ORDER BY [0, i] DESC;

SELECT i FROM test ORDER BY {'_0': i} DESC;

SELECT i FROM test ORDER BY {'a': 0, '_1': i} DESC;

SELECT i FROM test ORDER BY CAST(i + 1000000000000 AS TEXT) DESC;

PRAGMA enable_verification;

CREATE TABLE candidate AS SELECT * FROM "data/parquet-testing/candidate.parquet";

SELECT * FROM candidate ORDER BY name;

SELECT * FROM candidate WHERE JACCARD(name, 'BATMAN') >= 0.4 ORDER BY JACCARD(name, 'BATMAN');

PRAGMA enable_verification;

CREATE TABLE test (a INT, b INT);

INSERT INTO test VALUES (11, 22), (12, 21), (13, 22);

SELECT a FROM test LIMIT 1;

SELECT a FROM test LIMIT 1.25;

SELECT a FROM test LIMIT 2 - 1;

SELECT a FROM test LIMIT a;

SELECT a FROM test LIMIT a + 1;

SELECT a FROM test LIMIT SUM(42);

SELECT a FROM test LIMIT ROW_NUMBER() OVER ();

CREATE TABLE test2 (a TEXT);

INSERT INTO test2 VALUES ('Hello World');

PREPARE v1 AS SELECT * FROM test2 LIMIT 3;

EXECUTE v1;

SELECT 1 LIMIT CAST('1992-01-01' AS DATE);

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (1), (2), (3), (4), (5);

CREATE SEQUENCE seq;

PRAGMA disable_verification;

SELECT * FROM integers LIMIT NEXTVAL('seq');

SELECT * FROM integers LIMIT NEXTVAL('seq');

SELECT * FROM integers LIMIT RANDOM();

SELECT * FROM integers AS int LIMIT (SELECT MIN(integers.i) FROM integers);

CREATE SEQUENCE of_seq;

SELECT * FROM integers OFFSET NEXTVAL('of_seq');

SELECT * FROM integers OFFSET NEXTVAL('of_seq');

SELECT * FROM integers OFFSET RANDOM();

SELECT * FROM integers AS int OFFSET (SELECT MIN(integers.i) FROM integers);

SELECT * FROM integers AS int LIMIT (SELECT MAX(integers.i) FROM integers) OFFSET (SELECT MIN(integers.i) FROM integers);

SELECT * FROM integers AS int LIMIT (SELECT MAX(integers.i) FROM integers WHERE i > 5);

SELECT * FROM integers AS int LIMIT (SELECT MAX(integers.i) FROM integers WHERE i > 5);

SELECT * FROM integers AS int LIMIT (SELECT NULL);

SELECT * FROM integers AS int LIMIT (SELECT -1);

SELECT * FROM integers AS int LIMIT (SELECT 'ab');

CREATE OR REPLACE TABLE t AS SELECT range AS x FROM RANGE(0, 10);

PRAGMA enable_verification;

SELECT * FROM t ORDER BY x;

SELECT * FROM t ORDER BY x OFFSET 5;

SELECT * FROM t ORDER BY x OFFSET (SELECT 5);

SELECT * FROM t ORDER BY x LIMIT (SELECT 5);

SELECT * FROM t ORDER BY x LIMIT (SELECT 3) OFFSET (SELECT 3);

SELECT * FROM t ORDER BY x LIMIT 3 OFFSET (SELECT 3);

SELECT * FROM t ORDER BY x LIMIT (SELECT 3) OFFSET 3;

SELECT * FROM t ORDER BY x LIMIT (SELECT -1);

SELECT * FROM t ORDER BY x OFFSET (SELECT -1);

CREATE TABLE t0 (c0 INT);

INSERT INTO t0 VALUES (1), (2), (3), (4), (5), (6), (7);

SELECT * FROM t0 ORDER BY ALL OFFSET (SELECT DISTINCT 6.5 FROM (SELECT 1) AS t1(c0) UNION ALL SELECT 3);

SET scalar_subquery_error_on_multiple_rows = FALSE;

SELECT * FROM t0 ORDER BY ALL OFFSET (SELECT DISTINCT 6.5 FROM (SELECT 1) AS t1(c0) UNION ALL SELECT 3);

PRAGMA enable_verification;

WITH cte AS (SELECT 3) SELECT * FROM RANGE(0, 10000000) LIMIT (SELECT * FROM cte);

WITH cte AS (SELECT 3) SELECT * FROM RANGE(0, 10000000) LIMIT (SELECT * FROM cte) OFFSET (SELECT * FROM cte);

PRAGMA enable_verification;

SELECT 'Test' LIMIT ?;

PREPARE v1 AS SELECT 'Test' LIMIT ?;

EXECUTE v1(1);

EXECUTE v1(0);

PREPARE v2 AS SELECT * FROM RANGE(1000000000) LIMIT ? OFFSET ?;

EXECUTE v2(3, 0);

EXECUTE v2(3, 17);

PREPARE v3 AS SELECT * FROM RANGE(1000000000) LIMIT 2 OFFSET ?;

EXECUTE v3(0);

EXECUTE v3(17);

PREPARE v4 AS SELECT * FROM RANGE(1000000000) LIMIT ? OFFSET 17;

EXECUTE v4(3);

EXECUTE v4(6);

PREPARE v5 AS SELECT * FROM RANGE(1000000000) LIMIT (SELECT ?::INT) OFFSET (SELECT ?::INT);

EXECUTE v5(3, 0);

EXECUTE v5(3, 17);

PREPARE v6 AS SELECT * FROM RANGE(1000000000) LIMIT 3+? OFFSET ?+2*?;

EXECUTE v6(1, 0, 0);

EXECUTE v6(3, 1, 2);

PREPARE v7 AS SELECT * FROM GENERATE_SERIES(0,4,1) LIMIT ? OFFSET ?;

EXECUTE v7(NULL, 2);

EXECUTE v7(2, NULL);

EXECUTE v7(NULL, 9223372036854775807);

EXECUTE v7(9223372036854775807, NULL);

EXECUTE v7(NULL, 922337203685477580700);

EXECUTE v7(NULL, 4611686018427387904);

EXECUTE v7(4611686018427387904, NULL);

SET default_null_order = 'nulls_first';
require AS skip_reload;

PRAGMA enable_verification;

CREATE TABLE test (a INT, b INT);

INSERT INTO test VALUES (11, 22), (12, 21), (13, 22), (14, 32), (15, 52);

INSERT INTO test VALUES (11, 22), (12, 21), (13, 22), (14, 32), (15, 52);

INSERT INTO test VALUES (11, 22), (12, 21), (13, 22), (14, 32), (15, 52);

INSERT INTO test VALUES (11, 22), (12, 21), (13, 22), (14, 32), (15, 52);

INSERT INTO test VALUES (11, 22), (12, 21), (13, 22), (14, 32), (15, 52);

INSERT INTO test VALUES (11, 22), (12, 21), (13, 22), (14, 32), (15, 52);

INSERT INTO test VALUES (11, 22), (12, 21), (13, 22), (14, 32), (15, 52);

INSERT INTO test VALUES (11, 22), (12, 21), (13, 22), (14, 32), (15, 52);

INSERT INTO test VALUES (11, 22), (12, 21), (13, 22), (14, 32), (15, 52);

INSERT INTO test VALUES (11, 22), (12, 21), (13, 22), (14, 32), (15, 52);

INSERT INTO test VALUES (11, 22), (12, 21), (13, 22), (14, 32), (15, 52);

INSERT INTO test VALUES (11, 22), (12, 21), (13, 22), (14, 32), (15, 52);

INSERT INTO test VALUES (11, 22), (12, 21), (13, 22), (14, 32), (15, 52);

INSERT INTO test VALUES (11, 22), (12, 21), (13, 22), (14, 32), (15, 52);

INSERT INTO test VALUES (11, 22), (12, 21), (13, 22), (14, 32), (15, 52);

INSERT INTO test VALUES (11, 22), (12, 21), (13, 22), (14, 32), (15, 52);

INSERT INTO test VALUES (11, 22), (12, 21), (13, 22), (14, 32), (15, 52);

INSERT INTO test VALUES (11, 22), (12, 21), (13, 22), (14, 32), (15, 52);

INSERT INTO test VALUES (11, 22), (12, 21), (13, 22), (14, 32), (15, 52);

SELECT a FROM test LIMIT 50 % OFFSET(((SELECT MIN(b) FROM test) - 1) / 10);

SELECT b FROM test LIMIT 70 % OFFSET(((SELECT MIN(test.a) FROM test) - 1) / 10);

SELECT b FROM test LIMIT 70 % OFFSET(((SELECT MIN(test.a) FROM test) - 1) / 10);

SELECT b FROM test LIMIT 70 % OFFSET(((SELECT MIN(test.a) FROM test) - 1) / 10);

SELECT b FROM test LIMIT 70 % OFFSET(((SELECT MIN(test.a) FROM test) - 1) / 10);

SELECT b FROM test LIMIT 70 % OFFSET(((SELECT MIN(test.a) FROM test) - 1) / 10);

SELECT b FROM test LIMIT 70 % OFFSET(((SELECT MIN(test.a) FROM test) - 1) / 10);

SELECT b FROM test LIMIT 70 % OFFSET(((SELECT MIN(test.a) FROM test) - 1) / 10);

CREATE TABLE test2 (a TEXT);

INSERT INTO test2 VALUES ('first'), ('second'), ('third'), ('4th'), ('5th');

PREPARE v1 AS SELECT * FROM test2 LIMIT 40%;

EXECUTE v1;

CREATE VIEW v3 AS SELECT i % 5 AS g, LIST(CASE WHEN i = 6 OR i = 8 THEN NULL ELSE i END) AS l FROM RANGE(0, 20) AS tbl(i) GROUP BY g;

CREATE VIEW v3 AS SELECT i % 5 AS g, LIST(CASE WHEN i = 6 OR i = 8 THEN NULL ELSE i END) AS l FROM RANGE(0, 20) AS tbl(i) GROUP BY g;

CREATE VIEW v3 AS SELECT i % 5 AS g, LIST(CASE WHEN i = 6 OR i = 8 THEN NULL ELSE i END) AS l FROM RANGE(0, 20) AS tbl(i) GROUP BY g;

CREATE TABLE struct_data (g INT, e INT);

INSERT INTO struct_data VALUES (1, 1), (1, 2), (2, 3), (2, 4), (2, 5), (3, 6), (5, NULL);

SELECT {'a': 42, 'b': 43};

SELECT {'a': 42, 'b': 43};

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (1), (2), (3), (4), (5);

INSERT INTO integers VALUES (1), (2), (3), (4), (5);

INSERT INTO integers VALUES (1), (2), (3), (4), (5);

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (1), (NULL);

SELECT * FROM integers ORDER BY i;

SELECT * FROM integers ORDER BY i NULLS FIRST;

SELECT * FROM integers ORDER BY i;

SELECT 10 AS j, i FROM integers ORDER BY j, i;

CREATE TABLE test (i INT, j INT);

INSERT INTO test VALUES (1, 1), (NULL, 1), (1, NULL);

SELECT * FROM test ORDER BY i NULLS FIRST, j;

SELECT * FROM test ORDER BY i NULLS FIRST, j NULLS FIRST;

SELECT * FROM test ORDER BY i, j NULLS FIRST;

SELECT i, j, ROW_NUMBER() OVER (PARTITION BY i ORDER BY j NULLS FIRST) FROM test ORDER BY i NULLS FIRST, j NULLS FIRST;

SELECT i, j, ROW_NUMBER() OVER (PARTITION BY i ORDER BY j) FROM test ORDER BY i NULLS FIRST, j NULLS FIRST;

SELECT * FROM test ORDER BY i NULLS FIRST, j LIMIT 2;

SELECT * FROM test ORDER BY i, j LIMIT 2;

SELECT * FROM integers ORDER BY i;

PRAGMA default_null_order = 'NULLS LAST';

SELECT * FROM integers ORDER BY i;

PRAGMA default_null_order = 'NULLS FIRST';

PRAGMA default_null_order = 'NULLS FIRST';

PRAGMA default_null_order = 'UNKNOWN';

PRAGMA default_null_order = 'UNKNOWN';

PRAGMA default_null_order = 'UNKNOWN';

PRAGMA enable_verification;

CREATE TABLE test (a INT, b INT);

INSERT INTO test VALUES (11, 22), (12, 21), (13, 22);

SELECT b FROM test WHERE a = 12;

SELECT b FROM test ORDER BY a DESC;

SELECT a, b FROM test ORDER BY a;

SELECT a, b FROM test ORDER BY a DESC;

SELECT a, b FROM test ORDER BY b, a;

SELECT a, b FROM test ORDER BY 2, 1;

SELECT a, b FROM test ORDER BY b DESC, a;

SELECT a, b FROM test ORDER BY b, a DESC;

SELECT a, b FROM test ORDER BY b, a DESC LIMIT 1;

SELECT a, b FROM test ORDER BY b, a DESC LIMIT 1 OFFSET 1;

SELECT a, b FROM test ORDER BY b, a DESC OFFSET 1;

SELECT a, b FROM test WHERE a < 13 ORDER BY b;

SELECT a, b FROM test WHERE a < 13 ORDER BY 2;

SELECT a, b FROM test WHERE a < 13 ORDER BY b DESC;

SELECT b, a FROM test WHERE a < 13 ORDER BY b DESC;

SELECT b % 2 AS f, SUM(a) FROM test GROUP BY f ORDER BY b % 2;

SELECT b % 2 AS f, a FROM test ORDER BY b % 2, a;

SELECT b % 2 AS f, SUM(a) FROM test GROUP BY f ORDER BY f;

SELECT b % 2 AS f, SUM(a) FROM test GROUP BY f ORDER BY 1;

SELECT a - 10 AS k FROM test UNION SELECT a - 10 AS l FROM test ORDER BY k;

SELECT a - 10 AS k FROM test UNION SELECT a - 10 AS l FROM test ORDER BY l;

SELECT a - 10 AS k FROM test UNION SELECT a - 10 AS l FROM test ORDER BY 1 - k;

SELECT a - 10 AS k FROM test UNION SELECT a - 10 AS l FROM test ORDER BY a - 10;

SELECT a - 10 AS k FROM test UNION SELECT a - 11 AS l FROM test ORDER BY a - 11;

SELECT a FROM test ORDER BY 'hello world', a;

SET order_by_non_integer_literal = TRUE;

SELECT a FROM test ORDER BY 'hello world', a;

PRAGMA enable_verification;

CREATE TABLE test (a INT, b INT);

INSERT INTO test VALUES (11, 22), (12, 21), (13, 22);

SELECT a FROM test ORDER BY 2;

SELECT a FROM test ORDER BY 'hello', a;

SET order_by_non_integer_literal = TRUE;

SELECT a FROM test ORDER BY 'hello', a;

SELECT a AS k, b FROM test UNION SELECT a, b AS k FROM test ORDER BY k;

SELECT a AS k, b FROM test UNION SELECT a AS k, b FROM test ORDER BY k;

SELECT a % 2, b FROM test UNION SELECT b, a % 2 AS k ORDER BY a % 2;

SELECT a % 2, b FROM test UNION SELECT a % 2 AS k, b FROM test ORDER BY a % 2;

SELECT a % 2, b FROM test UNION SELECT a % 2 AS k, b FROM test ORDER BY 3;

SELECT a % 2, b FROM test UNION SELECT a % 2 AS k, b FROM test ORDER BY -1;

SELECT a % 2, b FROM test UNION SELECT a % 2 AS k FROM test ORDER BY -1;

PRAGMA verify_parallelism;

CREATE TABLE test AS SELECT a FROM RANGE(10000, 0, -1) AS t1(a);

SELECT * FROM test ORDER BY a;

SET default_null_order = 'nulls_first';
require AS skip_reload;

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

INSERT INTO test0 VALUES ([2]), ([1]), ([1, 2]), ([]), ([2, 2]), ([NULL]), ([2, 3]);

SELECT * FROM test0 ORDER BY i;

SELECT * FROM test0 ORDER BY i DESC;

INSERT INTO test0 VALUES (NULL);

SELECT * FROM test0 ORDER BY i;

SELECT * FROM test0 ORDER BY i;

SELECT * FROM test0 ORDER BY i DESC;

SELECT * FROM test0 ORDER BY i DESC;

SELECT * FROM test0 ORDER BY i DESC;

INSERT INTO test2 VALUES ([[2]]), ([[1]]), ([NULL, []]), ([[1], [2]]), ([]), ([[]]), ([[2], [2]]), ([NULL]), (NULL), ([[2], [3]]);

SELECT * FROM test2 ORDER BY i;

SELECT * FROM test2 ORDER BY i DESC;

SELECT * FROM test2 ORDER BY i DESC;

INSERT INTO test3 VALUES ([[3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]]), ([[3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], []]), ([[3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], [5, 5, 5, 5, 1]]), ([[3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], [5, 5, 5, 5, NULL]]), ([[3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], [5, 5, 5, 5, 2]]), ([[3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], [NULL]]), ([[3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], NULL]);

SELECT * FROM test3 ORDER BY i;

SELECT * FROM test3 ORDER BY i DESC;

SELECT * FROM test3 ORDER BY i DESC;

INSERT INTO test4 VALUES ([[NULL, NULL, 0], [1, NULL, 1]]), ([[NULL, NULL, 1]]), ([[NULL, NULL, 0], [1, NULL, 0]]), ([[0, NULL, NULL, 1]]), ([[0, NULL, NULL, 0]]);

SELECT * FROM test4 ORDER BY i;

SELECT * FROM test4 ORDER BY i DESC;

SELECT * FROM test4 ORDER BY i DESC;

INSERT INTO test10 VALUES ({'i': 2, 'j': NULL}), ({'i': 1, 'j': NULL}), ({'i': 2, 'j': 3}), ({'i': 1, 'j': 2}), ({'i': 2, 'j': 2}), ({'i': NULL, 'j': NULL}), (NULL), ({'i': 2, 'j': 3});

SELECT * FROM test10 ORDER BY s;

SELECT * FROM test10 ORDER BY s DESC;

SELECT * FROM test10 ORDER BY s DESC;

INSERT INTO test11 VALUES ({'s1': NULL}), (NULL), ({'s1': {'i': NULL, 'j': 1}}), ({'s1': {'i': 0, 'j': NULL}}), ({'s1': {'i': NULL, 'j': NULL}}), ({'s1': {'i': 0, 'j': 1}});

SELECT * FROM test11 ORDER BY s;

SELECT * FROM test11 ORDER BY s DESC;

SELECT * FROM test11 ORDER BY s DESC;

INSERT INTO test13 VALUES ({'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 8}), ({'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9}), ({'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': NULL, 'f': NULL, 'g': NULL, 'h': NULL, 'i': 8, 'j': 8}), ({'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': NULL, 'f': NULL, 'g': NULL, 'h': NULL, 'i': 8, 'j': 9}), ({'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': NULL, 'i': NULL, 'j': 8}), ({'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': NULL, 'i': NULL, 'j': 9});

SELECT * FROM test13 ORDER BY s;

SELECT * FROM test13 ORDER BY s DESC;

SELECT * FROM test13 ORDER BY s DESC;

INSERT INTO test20 VALUES ([{'i': NULL}, {'i': NULL}, {'i': 0}, {'i': NULL}, {'i': NULL}, {'i': 0}]), ([{'i': NULL}, {'i': NULL}, {'i': 0}, {'i': NULL}, {'i': NULL}, {'i': 1}]), ([{'i': NULL}, {'i': NULL}, {'i': NULL}, {'i': NULL}, {'i': NULL}, {'i': 1}]), ([{'i': NULL}, {'i': NULL}, {'i': 0}, {'i': NULL}, {'i': NULL}, {'i': NULL}]), ([{'i': NULL}, {'i': NULL}, {'i': 1}, {'i': NULL}, {'i': NULL}, {'i': 0}]), ([{'i': NULL}, {'i': NULL}, {'i': 1}, {'i': NULL}, {'i': NULL}, {'i': 1}]), ([{'i': NULL}, {'i': NULL}, {'i': NULL}, {'i': NULL}, {'i': NULL}, {'i': 0}]), ([{'i': NULL}, {'i': NULL}, {'i': 1}, {'i': NULL}, {'i': NULL}, {'i': NULL}]);

SELECT * FROM test20 ORDER BY l;

SELECT * FROM test20 ORDER BY l DESC;

SELECT * FROM test20 ORDER BY l DESC;

INSERT INTO test22 VALUES ({'i': [0, NULL], 'j': [NULL, 0]}), ({'i': [0, NULL], 'j': [NULL, 1]}), ({'i': [0, NULL], 'j': [1, 2]}), ({'i': [1, NULL], 'j': [2, NULL]}), ({'i': [0, 2], 'j': [2, NULL]}), ({'i': NULL, 'j': [2, NULL]}), ({'i': [0, 2], 'j': NULL}), ({'i': NULL, 'j': [2, 3]});

SELECT * FROM test22 ORDER BY s;

SELECT * FROM test22 ORDER BY s DESC;

SELECT * FROM test22 ORDER BY s DESC;

INSERT INTO test24 VALUES ([{'l1': [{'i': 0}]}, {'l1': [{'i': 0}]}]), ([{'l1': [{'i': 0}]}, {'l1': [{'i': 1}]}]), ([{'l1': [{'i': 0}]}, {'l1': [{'i': 1}, {'i': 2}]}]), ([{'l1': [{'i': 0}]}, {'l1': [{'i': 1}, {'i': 1}]}]), ([{'l1': [{'i': 1}]}, {'l1': [{'i': 0}]}]), ([{'l1': [{'i': 1}]}, {'l1': [{'i': 1}]}]), ([{'l1': [{'i': NULL}]}, {'l1': [{'i': 0}]}]), ([{'l1': [{'i': NULL}]}, {'l1': [{'i': 1}]}]), ([{'l1': [{'i': 0}]}, {'l1': [{'i': NULL}]}, {'l1': [{'i': NULL}]}]), ([{'l1': [{'i': 1}]}, {'l1': [{'i': NULL}]}, {'l1': [{'i': 1}]}]), ([{'l1': [{'i': 0}]}, {'l1': [{'i': NULL}]}]), ([{'l1': [{'i': 1}]}, {'l1': [{'i': NULL}]}]), ([{'l1': [{'i': 1}]}, {'l1': [{'i': NULL}]}, {'l1': [{'i': NULL}]}]);

SELECT * FROM test24 ORDER BY l;

SELECT * FROM test24 ORDER BY l DESC;

DROP TABLE test0;

DROP TABLE test2;

DROP TABLE test3;

DROP TABLE test4;

DROP TABLE test10;

DROP TABLE test11;

DROP TABLE test13;

DROP TABLE test20;

DROP TABLE test22;

DROP TABLE test24;

DROP TABLE test24;

DROP TABLE test24;

DROP TABLE test24;

INSERT INTO test2 VALUES ([[1.2]]), ([[1.1]]), ([NULL, []]), ([[1.1], [1.2]]), ([]), ([[]]), ([[1.2], [1.2]]), ([NULL]), (NULL), ([[1.2], [1.3]]);

SELECT * FROM test2 ORDER BY i;

SELECT * FROM test2 ORDER BY i DESC;

SELECT * FROM test2 ORDER BY i DESC;

INSERT INTO test10 VALUES ({'i': 1.2, 'j': NULL}), ({'i': 1.1, 'j': NULL}), ({'i': 1.2, 'j': 1.3}), ({'i': 1.1, 'j': 1.2}), ({'i': 1.2, 'j': 1.2}), ({'i': NULL, 'j': NULL}), (NULL), ({'i': 1.2, 'j': 1.3});

SELECT * FROM test10 ORDER BY s;

SELECT * FROM test10 ORDER BY s DESC;

SELECT * FROM test10 ORDER BY s DESC;

INSERT INTO test24 VALUES ([{'l1': [{'i': 1.1}]}, {'l1': [{'i': 1.1}]}]), ([{'l1': [{'i': 1.1}]}, {'l1': [{'i': 1.2}]}]), ([{'l1': [{'i': 1.1}]}, {'l1': [{'i': 1.2}, {'i': 1.3}]}]), ([{'l1': [{'i': 1.1}]}, {'l1': [{'i': 1.2}, {'i': 1.2}]}]), ([{'l1': [{'i': 1.2}]}, {'l1': [{'i': 1.1}]}]), ([{'l1': [{'i': 1.2}]}, {'l1': [{'i': 1.2}]}]), ([{'l1': [{'i': NULL}]}, {'l1': [{'i': 1.1}]}]), ([{'l1': [{'i': NULL}]}, {'l1': [{'i': 1.2}]}]), ([{'l1': [{'i': 1.1}]}, {'l1': [{'i': NULL}]}, {'l1': [{'i': NULL}]}]), ([{'l1': [{'i': 1.2}]}, {'l1': [{'i': NULL}]}, {'l1': [{'i': 1.2}]}]), ([{'l1': [{'i': 1.1}]}, {'l1': [{'i': NULL}]}]), ([{'l1': [{'i': 1.2}]}, {'l1': [{'i': NULL}]}]), ([{'l1': [{'i': 1.2}]}, {'l1': [{'i': NULL}]}, {'l1': [{'i': NULL}]}]);

SELECT * FROM test24 ORDER BY l;

SELECT * FROM test24 ORDER BY l DESC;

DROP TABLE test2;

DROP TABLE test10;

DROP TABLE test24;

DROP TABLE test24;

CREATE TABLE test0 (i BOOLEAN[]);

INSERT INTO test0 VALUES ([TRUE]), ([FALSE]), ([FALSE, TRUE]), ([]), ([TRUE, TRUE]), ([NULL]), (NULL), ([FALSE, FALSE]);

SELECT * FROM test0 ORDER BY i;

SELECT * FROM test0 ORDER BY i DESC;

CREATE TABLE test10 (s STRUCT(i BOOLEAN, j BOOLEAN));

INSERT INTO test10 VALUES ({'i': TRUE, 'j': NULL}), ({'i': FALSE, 'j': NULL}), ({'i': TRUE, 'j': TRUE}), ({'i': FALSE, 'j': TRUE}), ({'i': NULL, 'j': FALSE}), ({'i': NULL, 'j': TRUE}), ({'i': NULL, 'j': NULL}), (NULL), ({'i': FALSE, 'j': FALSE});

SELECT * FROM test10 ORDER BY s;

SELECT * FROM test10 ORDER BY s DESC;

DROP TABLE test0;

DROP TABLE test10;

CREATE TABLE test0 (i INTERVAL[]);

INSERT INTO test0 VALUES (['2 years']), (['1 year']), (['1 year', '2 years']), ([]), (['2 years', '2 years']), ([NULL]), (NULL), (['1 year', '1 year']);

SELECT * FROM test0 ORDER BY i;

SELECT * FROM test0 ORDER BY i DESC;

CREATE TABLE test10 (s STRUCT(i INTERVAL, j INTERVAL));

INSERT INTO test10 VALUES ({'i': '2 years', 'j': NULL}), ({'i': '1 year', 'j': NULL}), ({'i': '2 years', 'j': '2 years'}), ({'i': '1 year', 'j': '2 years'}), ({'i': '2 years', 'j': '1 year'}), ({'i': NULL, 'j': '1 year'}), ({'i': NULL, 'j': '2 years'}), ({'i': NULL, 'j': NULL}), (NULL), ({'i': '1 year', 'j': '1 year'});

SELECT * FROM test10 ORDER BY s;

SELECT * FROM test10 ORDER BY s DESC;

CREATE TABLE test25 (hits STRUCT(znGQGrPPR BIGINT, oPTw BIGINT, faFP BIGINT, uEdoxN BIGINT, Swjmryop BOOLEAN, VIXNrOiClIevZ BOOLEAN, HcaUpnMJFZ BOOLEAN, ykHcZY BOOLEAN, DvxSpZK TEXT, YVGP STRUCT(IgDBxUoG TEXT, gNbYDDIw TEXT, yzKNPwwcg TEXT, DibXeeoeQSGYu TEXT, hrWWrsiIiUofLy TEXT, ASfMkqmeOqQuoB TEXT, uVprLfTzUvDvkP TEXT, VkUqzkNMWJgigg TEXT, rvWZXRcwRHxyBe TEXT), jadhjuVProR STRUCT(jPNTLUlLWDVzv TEXT, nAvhKBDCqvoqrnOocS BIGINT, xDBVUYlwAIswxy BIGINT, xqQhrLZoGdTMHuHWdYa BIGINT, HwCKcHtSqPK TEXT, kpJOlzKWnOqh TEXT, FWSJWhYpedcRQKrZhDCnVeB BIGINT, CPlooJwmNBreMCdWUna BIGINT, LqhwzdzEIiryXAhMTxkXdOJJ BIGINT, qqMzZNLkIpokwdLUU TEXT), QyNS STRUCT(jPNTLUlLWDVzv TEXT, TayswObIQWI TEXT, PbvWmZCBFaFstiI TEXT, abOCIKAItE TEXT, cytRvqHxcNMO BIGINT, tDrBPbtKtyb BIGINT, kpJOlzKWnOqh TEXT, WQtAsJPqBUnUMEaU BIGINT), mASndgwqPuJ STRUCT(gfObFmWyCOjcKeIHoT TEXT), jKlgxqk STRUCT(loas TEXT, eQBbpMd TEXT, Mq TEXT, IZOSPuHhhxj TEXT, CXcvMVHHwromQE TEXT, JtSEjNk TEXT, xQfpnypFfh TEXT, tnMGA TEXT, AnwyxMGchr TEXT, wPmfaFxhPPKzwfPCb TEXT, vsoBnKzcUwrNkp TEXT, XCMbItPFANv TEXT), PtAAZqHJoNJFr STRUCT(XZitsWIdUVj TEXT, YuakMMl BOOLEAN, zwLMFgPAar BIGINT, ZZYrqGPvyHqCxmz BIGINT), PBaBpTrgf STRUCT(EgANwCBEnprKw TEXT, wIOvbrWCLyJ TEXT, hKOGMlSamD TEXT, EPfWsjecqG BIGINT), okorLUP STRUCT(GIsgSGBmzK TEXT, MqnNnVixFjvXF TEXT, pWVjrJXMpemUIfzCW TEXT, noTGJwpPnvQiHm TEXT, DMbdkCaXbPqs TEXT, IycrFLnjgvRNut BIGINT, bpfoIotUEOGbLunbIol BIGINT, TjoylJjMJoiD BIGINT, aLgLncUnnGlNBduUI BIGINT, NKWyfYnlwjUnjZL BIGINT, FFpmzMxIokQSSfbXdzW BIGINT, vqZpxHuoxlbsNrdtuymeQgHY BIGINT, emdolqTMHfXc BOOLEAN, oJRmvMi BOOLEAN, qLqUHjvwVEVAcnbs STRUCT(iJwqw BIGINT, HUvFz TEXT)[], sNHhdeCoAZxDL STRUCT(iJwqw BIGINT, HUvFz BIGINT)[], SnajIRdGepAgJgh TEXT, koWzRJyBqvmiqivzlEM BIGINT, reyVgABDLNFilPVvD TEXT)[], SVGhSmWDI STRUCT(GtgKMpV TEXT, yjXiRwzVE TEXT, qgYlOUPRtAnYw TEXT, fTgoSMpOgpNJQ TEXT)[], FPKSWtghhQOVEnFBOkD STRUCT(uAubCghuPjB BOOLEAN, pfFOVEOCperm BOOLEAN), OTrWwS STRUCT(NapvwzseNIGz BIGINT, LtOAwRiqDQjfDckMm BIGINT), AcXbgyymirKTQZx STRUCT(yUwSxZiZSSr TEXT, lDTC BIGINT, UhjBpZ TEXT), bBhpQAMDWl STRUCT(RfphILWpsPYd TEXT, jEyACWwvLTaqFDfJW TEXT)[], JmBMoMkzD STRUCT(tsFDpOynl BIGINT, jBEsPfpGRXMOLE BIGINT, ZbRXIhWtIKLYujVvm BIGINT, NDcVjtQYYmiNKIJYVsSfKopA BIGINT, uSOqEmVyjD BIGINT, VPXBBGRbywnJY BIGINT, AUwjuuzTSKEXh BIGINT, uELKFfPuERKGwvQjPbcEti BIGINT, TeXtUcBFcnqrAL BIGINT, yLBcRcbcRfWivpsjmBffCfUO BIGINT, otFzPBKplrWzttldrcwMcpCPAgWQv BIGINT, IgEbHurDtzoXObIewuZnEHiMYIKuYnCV BIGINT, CTpLqGEIvocTwMVwEeRzoONDgZovhNPoRwSvnng BIGINT, TQWiiumCqxqGndAyhkVBxOcfo BIGINT, rpncrVHBmLjzcfanmjDAUZUAKczw BIGINT, aEzMpiQuuETAdZwEYvHIlJDxtGKW BIGINT, rHUiHuoBmYbRkayocVebIIIjZLRHRWSAzuilF BIGINT, uYsFSGNaxzsuXAeniZaYrhAqwcfXg BIGINT, KUyXJcDqWHQZgDHqloaD BIGINT, dpJiXgrlyHJIfEvXMahZJCffU BIGINT, xohgzXNCOTJFMmkyeCKYdWCLiXXa BIGINT, gfcZKKxRlEUJzMUXgBBSUxSzdMlldSXwtVx BIGINT, UzgmNbcAmjElKBwRPuFum BIGINT, TzlEnhCSQSvoImjUUHsaxsis BIGINT, BUsfzMIYSSUuMDiolbXuOlTj BIGINT, YfiCTxNPfBvchDaDcMEsOMeOONmxgeagA BIGINT, pxcpkGReepBqRZKMRzzQQXKdT BIGINT, IOtfUjWOT BIGINT, dUIQVUzKnzskJs BIGINT, LLPsdqyabsOKWKNFd BIGINT, ClmlNfsvRoXZlhTWSCkRodqF BIGINT, ipOEKzEGfG BIGINT, yfelArbMCP BIGINT, EKUWzPngAEAJAnOeWNIWmq BIGINT, GScdZElahOtfZj BIGINT, WPFdULdNS BIGINT, EJcZYyMpAIUcog BIGINT, eIpbtmcjgLLVFht BIGINT, mcUwKVRVbXjwhbOjS BIGINT, DgvkXnDHuKutxUsRfvj BIGINT, dxguUbIdzjzrdS BIGINT, WlXYtYZmUl BIGINT, umNLTdfGzr BIGINT, YdimQHsARK TEXT, zDokzjSEen TEXT, fsOUigHdkvGK TEXT), ykADKYbguMZVJlm STRUCT(iJwqw BIGINT, ZAvYeMTYlHUDL TEXT, THpzyEirnnGWFB TEXT)[], qLqUHjvwVEVAcnbs STRUCT(iJwqw BIGINT, HUvFz TEXT)[], sNHhdeCoAZxDL STRUCT(iJwqw BIGINT, HUvFz BIGINT)[], gfhz TEXT, TLCZOP STRUCT(HcPewmZRqcghwBjHzRkzkfkE TEXT, CjpMZoCThqMoBvimtzvxlrt TEXT, lgpkLyrQluGzHkNKTx BIGINT, RLKYfEkkNdlrvlJPovBKJuQ TEXT, nqFKVVNDCaNIl TEXT, scVtCBQcYwyNnrmgIpYpbWdQ BIGINT, ZZiHFmKGKDvmRmwmfctstfV TEXT, EDIJHetonPOYCgULGYrSkNkIwpxche TEXT), NPNDFGbRcPrfwzX STRUCT(rtBuZDmFWFmHnY BIGINT, RTibIJgjJCkQ BIGINT, GQlWYsoIaMIPTEuJ BIGINT, SYibbnqRnmYxaNt BIGINT, NsAFWTEXcfDOLESXWv BIGINT, plPdCaKdtCUzeVXj BIGINT, ZZNqWUqyRyAOvoTDvaos BIGINT, FNfoNoaWgwOqCYXWFS BIGINT, XtuDUcHXCXVTFPovlMtXdQA BIGINT, DdoFfFvEkjndgaBZoU BIGINT, fUskQHoNqzLeLFFgaSHt BIGINT, jntGEjUlojDyKFN BIGINT, YFaVhOMmHFMZxgQF BIGINT, bdogaquNxDhqVZbJeP TEXT, HjxVQylJhDzgrvuDok TEXT, MMOoWhxOKtbFYka TEXT), QoPuTOMwkHrWlOQfXP STRUCT(BWuxKiTgmIKfhQchATayvQQNK TEXT, zJHYVBvayYgYuuTKoQNBUdzU TEXT), AMEuaLMkYkWD STRUCT(uPPvDVnmYBYzy TEXT, jBMprvFduhOZV TEXT, jfYSlkuRisuBn TEXT, oVzrSeaBARUqj TEXT, fohkQzphRKBcf TEXT, wBGLxmqEjBKvzBJbjMTFG TEXT, SPxYBpYweqbLnQMSICdhZ TEXT, ZEAxzLIwQFaXXKSgbmhvK TEXT, PJfgUIDgnaitTmCtKdMQr TEXT, yqijinxAFkJMXODcQDKdN TEXT, mjLsWAhqLXRDzgvRmkinTAYD BIGINT, PVICapLQHaXgaKygxlflolcY BIGINT, NspSTjSzPPqKlIPLZAtpEDJF BIGINT, ZqqFfWfQDHysYpyVvOuObrwY BIGINT, AqCRjeBJfWwVjdwEEsqsZisL BIGINT), uRabSyccPe TEXT, XvkQOurJWuaDiZK STRUCT(tsFDpOynl BIGINT, jBEsPfpGRXMOLE BIGINT, ZbRXIhWtIKLYujVvm BIGINT, NDcVjtQYYmiNKIJYVsSfKopA BIGINT, uSOqEmVyjD BIGINT, VPXBBGRbywnJY BIGINT, AUwjuuzTSKEXh BIGINT, uELKFfPuERKGwvQjPbcEti BIGINT, TeXtUcBFcnqrAL BIGINT, yLBcRcbcRfWivpsjmBffCfUO BIGINT, otFzPBKplrWzttldrcwMcpCPAgWQv BIGINT, IgEbHurDtzoXObIewuZnEHiMYIKuYnCV BIGINT, CTpLqGEIvocTwMVwEeRzoONDgZovhNPoRwSvnng BIGINT, TQWiiumCqxqGndAyhkVBxOcfo BIGINT, rpncrVHBmLjzcfanmjDAUZUAKczw BIGINT, aEzMpiQuuETAdZwEYvHIlJDxtGKW BIGINT, rHUiHuoBmYbRkayocVebIIIjZLRHRWSAzuilF BIGINT, uYsFSGNaxzsuXAeniZaYrhAqwcfXg BIGINT, KUyXJcDqWHQZgDHqloaD BIGINT, dpJiXgrlyHJIfEvXMahZJCffU BIGINT, xohgzXNCOTJFMmkyeCKYdWCLiXXa BIGINT, gfcZKKxRlEUJzMUXgBBSUxSzdMlldSXwtVx BIGINT, UzgmNbcAmjElKBwRPuFum BIGINT, TzlEnhCSQSvoImjUUHsaxsis BIGINT, BUsfzMIYSSUuMDiolbXuOlTj BIGINT, YfiCTxNPfBvchDaDcMEsOMeOONmxgeagA BIGINT, pxcpkGReepBqRZKMRzzQQXKdT BIGINT, IOtfUjWOT BIGINT, dUIQVUzKnzskJs BIGINT, LLPsdqyabsOKWKNFd BIGINT, ClmlNfsvRoXZlhTWSCkRodqF BIGINT, ipOEKzEGfG BIGINT, yfelArbMCP BIGINT, EKUWzPngAEAJAnOeWNIWmq BIGINT, GScdZElahOtfZj BIGINT, WPFdULdNS BIGINT, EJcZYyMpAIUcog BIGINT, eIpbtmcjgLLVFht BIGINT, mcUwKVRVbXjwhbOjS BIGINT, DgvkXnDHuKutxUsRfvj BIGINT, dxguUbIdzjzrdS BIGINT, WlXYtYZmUl BIGINT, umNLTdfGzr BIGINT, YdimQHsARK TEXT, zDokzjSEen TEXT, fsOUigHdkvGK TEXT)[])[]);

INSERT INTO test25 VALUES ([{'znGQGrPPR': 1, 'oPTw': 0, 'faFP': 2, 'uEdoxN': 59, 'Swjmryop': NULL, 'VIXNrOiClIevZ': TRUE, 'HcaUpnMJFZ': TRUE, 'ykHcZY': TRUE, 'DvxSpZK': 'tGfxQbvUCWehgmxGyGgBeJhdIWntfkLtonLnpveSTCqepaZwKETAAtIPIqEppznCDDpdPQonXQXKjeIbqOgTIpivdxPviZxkKMtleUUwvqEDOvqjTHuvskrdXeeoNMGpXkrSdYOhDGNkFcgCFChKavCflzRJoXrnjLgFGogROuusCbjbCaYyUZIVdBUpOFjpoeSpbpzSHofDcPuDZSbtpjDtaOmzJreITcsXPVqXnqvEzuzpGIXvefuMeQEdxKCsFWbTNl', 'YVGP': {'IgDBxUoG': 'XyQOqOyAnyZ', 'gNbYDDIw': 'cfsRwAfwmrVimfTykGVKuWypjKNHXcm', 'yzKNPwwcg': 'RYfl', 'DibXeeoeQSGYu': NULL, 'hrWWrsiIiUofLy': NULL, 'ASfMkqmeOqQuoB': 'XyQOqOyAnyZ', 'uVprLfTzUvDvkP': '', 'VkUqzkNMWJgigg': '', 'rvWZXRcwRHxyBe': ''}, 'jadhjuVProR': NULL, 'QyNS': NULL, 'mASndgwqPuJ': NULL, 'jKlgxqk': {'loas': NULL, 'eQBbpMd': NULL, 'Mq': NULL, 'IZOSPuHhhxj': NULL, 'CXcvMVHHwromQE': NULL, 'JtSEjNk': NULL, 'xQfpnypFfh': NULL, 'tnMGA': NULL, 'AnwyxMGchr': 'afUPRYRCSQmdcdtQYydnKGvviGtorsdOovCYjwCSlY', 'wPmfaFxhPPKzwfPCb': 'afUPRYRCSQmdcdtQYydnKGvviGtorsdOovCYjwCSlY', 'vsoBnKzcUwrNkp': 'afUPRYRCSQmdcdtQYydnKGvviGtorsdOovCYjwCSlY', 'XCMbItPFANv': 0}, 'PtAAZqHJoNJFr': {'XZitsWIdUVj': NULL, 'YuakMMl': TRUE, 'zwLMFgPAar': NULL, 'ZZYrqGPvyHqCxmz': NULL}, 'PBaBpTrgf': NULL, 'okorLUP': [], 'SVGhSmWDI': [{'GtgKMpV': 'MVFWmJlKBMxAB', 'yjXiRwzVE': 'kYhtvFo', 'qgYlOUPRtAnYw': 'ijQKnKaopVcYGXaXsdNtLmOIZi', 'fTgoSMpOgpNJQ': 'AJVzA'}, {'GtgKMpV': 'MBBosQekfLHmBgESESLTW', 'yjXiRwzVE': 'zmOeIaLIr', 'qgYlOUPRtAnYw': 'ccqPBhTzhudkeFfHImrrei', 'fTgoSMpOgpNJQ': 'bSyEAmJjsLO'}, {'GtgKMpV': 'gHkbLJZKCzjMtfUmfTShD', 'yjXiRwzVE': 'XCNrflSANYjQW', 'qgYlOUPRtAnYw': 'bnVwblyKiYrmBOnj', 'fTgoSMpOgpNJQ': 'aSfdNGF'}, {'GtgKMpV': 'eEgScdEsdRGrkTODjpkBAxd', 'yjXiRwzVE': 'aZXHENozGtPolSS', 'qgYlOUPRtAnYw': 'mttKSWiRQhrlAguHXh', 'fTgoSMpOgpNJQ': 'nLdkePN'}, {'GtgKMpV': 'NkpxeWPzMqyIraIlvitxdysD', 'yjXiRwzVE': 'euIYxc', 'qgYlOUPRtAnYw': 'oixhzagMYgrRGdjApvUrQNAhCMlr', 'fTgoSMpOgpNJQ': 'pfVmSTagxMbjAvZFh'}, {'GtgKMpV': 'tEuwOvdvbaxENlzBxGudMyjFRAJ', 'yjXiRwzVE': 'lJahfprsh', 'qgYlOUPRtAnYw': 'qLcMIslAgmqMfnFoAXf', 'fTgoSMpOgpNJQ': 'RJZSKwlsBVOMMIHyI'}, {'GtgKMpV': 'QvAZuwsYVFwNLZSGImMk', 'yjXiRwzVE': 'vBcsuLVMptMc', 'qgYlOUPRtAnYw': 'tniBRScobiyWeNjFDeolXCaWY', 'fTgoSMpOgpNJQ': 'fSKVZpAlpXiUB'}, {'GtgKMpV': 'wsvEVmWnzdMOZEeMRfrVu', 'yjXiRwzVE': 'UumrECUGNgUhW', 'qgYlOUPRtAnYw': 'ftMupCdtrKzxkJlLCFINQkVHaE', 'fTgoSMpOgpNJQ': 'KNpaXiOejRPdc'}, {'GtgKMpV': 'jdnWYFIRdcfrhUeCKNXhv', 'yjXiRwzVE': 'vNrytvSkVtNxg', 'qgYlOUPRtAnYw': 'gmIacFmQlTTUtMqbemzHXXylMt', 'fTgoSMpOgpNJQ': 'aSDjzDdZLMZvn'}], 'FPKSWtghhQOVEnFBOkD': {'uAubCghuPjB': TRUE, 'pfFOVEOCperm': NULL}, 'OTrWwS': NULL, 'AcXbgyymirKTQZx': {'yUwSxZiZSSr': 0, 'lDTC': 1, 'UhjBpZ': NULL}, 'bBhpQAMDWl': [], 'JmBMoMkzD': NULL, 'ykADKYbguMZVJlm': [], 'qLqUHjvwVEVAcnbs': [], 'sNHhdeCoAZxDL': [], 'gfhz': 'waJz', 'TLCZOP': {'HcPewmZRqcghwBjHzRkzkfkE': NULL, 'CjpMZoCThqMoBvimtzvxlrt': NULL, 'lgpkLyrQluGzHkNKTx': NULL, 'RLKYfEkkNdlrvlJPovBKJuQ': NULL, 'nqFKVVNDCaNIl': 'dQTrPlzsz', 'scVtCBQcYwyNnrmgIpYpbWdQ': NULL, 'ZZiHFmKGKDvmRmwmfctstfV': 'GS', 'EDIJHetonPOYCgULGYrSkNkIwpxche': 'waA'}, 'NPNDFGbRcPrfwzX': NULL, 'QoPuTOMwkHrWlOQfXP': NULL, 'AMEuaLMkYkWD': {'uPPvDVnmYBYzy': 'dQTrPlzsz', 'jBMprvFduhOZV': 'dQTrPlzsz', 'jfYSlkuRisuBn': 'dQTrPlzsz', 'oVzrSeaBARUqj': 'dQTrPlzsz', 'fohkQzphRKBcf': 'dQTrPlzsz', 'wBGLxmqEjBKvzBJbjMTFG': 'osmgoJpKYP', 'SPxYBpYweqbLnQMSICdhZ': 'osmgoJpKYP', 'ZEAxzLIwQFaXXKSgbmhvK': 'osmgoJpKYP', 'PJfgUIDgnaitTmCtKdMQr': 'osmgoJpKYP', 'yqijinxAFkJMXODcQDKdN': 'osmgoJpKYP', 'mjLsWAhqLXRDzgvRmkinTAYD': NULL, 'PVICapLQHaXgaKygxlflolcY': NULL, 'NspSTjSzPPqKlIPLZAtpEDJF': NULL, 'ZqqFfWfQDHysYpyVvOuObrwY': NULL, 'AqCRjeBJfWwVjdwEEsqsZisL': NULL}, 'uRabSyccPe': 'oeL', 'XvkQOurJWuaDiZK': []}, {'znGQGrPPR': 2, 'oPTw': 21483, 'faFP': 3, 'uEdoxN': 0, 'Swjmryop': NULL, 'VIXNrOiClIevZ': TRUE, 'HcaUpnMJFZ': NULL, 'ykHcZY': NULL, 'DvxSpZK': 'tGfxQbvUCWehgmxGyGgBeJhdIWntfkLtonLnpveSTCqepaZwKETAAtIPIqEppznCDDpdPQonXQXKjeIbqOgTIpivdxPviZxkKMtleUUwvqEDOvqjTHuvskrdXeeoNMGpXkrSdYOhDGNkFcgCFChKavCflzRJoXrnjLgFGogROuusCbjbCaYyUZIVdBUpOFjpoeSpbpzSHofDcPuDZSbtpjDtaOmzJreITcsXPVqXnqvEzuzpGIXvefuMeQEdxKCsFWbTNl', 'YVGP': {'IgDBxUoG': 'XyQOqOyAnyZ', 'gNbYDDIw': 'cfsRwAfwmrVimfTykGVKuWypjKNHXcm', 'yzKNPwwcg': 'RYfl', 'DibXeeoeQSGYu': NULL, 'hrWWrsiIiUofLy': NULL, 'ASfMkqmeOqQuoB': 'XyQOqOyAnyZ', 'uVprLfTzUvDvkP': '', 'VkUqzkNMWJgigg': '', 'rvWZXRcwRHxyBe': ''}, 'jadhjuVProR': NULL, 'QyNS': NULL, 'mASndgwqPuJ': NULL, 'jKlgxqk': {'loas': NULL, 'eQBbpMd': NULL, 'Mq': NULL, 'IZOSPuHhhxj': NULL, 'CXcvMVHHwromQE': NULL, 'JtSEjNk': NULL, 'xQfpnypFfh': NULL, 'tnMGA': NULL, 'AnwyxMGchr': 'afUPRYRCSQmdcdtQYydnKGvviGtorsdOovCYjwCSlY', 'wPmfaFxhPPKzwfPCb': 'afUPRYRCSQmdcdtQYydnKGvviGtorsdOovCYjwCSlY', 'vsoBnKzcUwrNkp': 'afUPRYRCSQmdcdtQYydnKGvviGtorsdOovCYjwCSlY', 'XCMbItPFANv': 0}, 'PtAAZqHJoNJFr': {'XZitsWIdUVj': NULL, 'YuakMMl': TRUE, 'zwLMFgPAar': NULL, 'ZZYrqGPvyHqCxmz': NULL}, 'PBaBpTrgf': {'EgANwCBEnprKw': 'TXHLvtCPAAYjJexsMT', 'wIOvbrWCLyJ': 'XFreEKOqocIVsnw', 'hKOGMlSamD': NULL, 'EPfWsjecqG': NULL}, 'okorLUP': [], 'SVGhSmWDI': [{'GtgKMpV': 'wsvEVmWnzdMOZEeMRfrVu', 'yjXiRwzVE': 'UumrECUGNgUhW', 'qgYlOUPRtAnYw': 'ftMupCdtrKzxkJlLCFINQkVHaE', 'fTgoSMpOgpNJQ': 'KNpaXiOejRPdc'}], 'FPKSWtghhQOVEnFBOkD': {'uAubCghuPjB': NULL, 'pfFOVEOCperm': TRUE}, 'OTrWwS': NULL, 'AcXbgyymirKTQZx': {'yUwSxZiZSSr': 0, 'lDTC': 1, 'UhjBpZ': NULL}, 'bBhpQAMDWl': [], 'JmBMoMkzD': NULL, 'ykADKYbguMZVJlm': [], 'qLqUHjvwVEVAcnbs': [], 'sNHhdeCoAZxDL': [], 'gfhz': 'XYItl', 'TLCZOP': {'HcPewmZRqcghwBjHzRkzkfkE': NULL, 'CjpMZoCThqMoBvimtzvxlrt': NULL, 'lgpkLyrQluGzHkNKTx': NULL, 'RLKYfEkkNdlrvlJPovBKJuQ': NULL, 'nqFKVVNDCaNIl': 'dQTrPlzsz', 'scVtCBQcYwyNnrmgIpYpbWdQ': NULL, 'ZZiHFmKGKDvmRmwmfctstfV': 'GS', 'EDIJHetonPOYCgULGYrSkNkIwpxche': 'waA'}, 'NPNDFGbRcPrfwzX': NULL, 'QoPuTOMwkHrWlOQfXP': NULL, 'AMEuaLMkYkWD': {'uPPvDVnmYBYzy': 'dQTrPlzsz', 'jBMprvFduhOZV': 'dQTrPlzsz', 'jfYSlkuRisuBn': 'dQTrPlzsz', 'oVzrSeaBARUqj': 'dQTrPlzsz', 'fohkQzphRKBcf': 'dQTrPlzsz', 'wBGLxmqEjBKvzBJbjMTFG': 'dQTrPlzsz', 'SPxYBpYweqbLnQMSICdhZ': 'dQTrPlzsz', 'ZEAxzLIwQFaXXKSgbmhvK': 'dQTrPlzsz', 'PJfgUIDgnaitTmCtKdMQr': 'dQTrPlzsz', 'yqijinxAFkJMXODcQDKdN': 'dQTrPlzsz', 'mjLsWAhqLXRDzgvRmkinTAYD': NULL, 'PVICapLQHaXgaKygxlflolcY': NULL, 'NspSTjSzPPqKlIPLZAtpEDJF': NULL, 'ZqqFfWfQDHysYpyVvOuObrwY': NULL, 'AqCRjeBJfWwVjdwEEsqsZisL': NULL}, 'uRabSyccPe': 'oeL', 'XvkQOurJWuaDiZK': []}]);

PRAGMA enable_verification;

CREATE TABLE test (a INT, b INT);

INSERT INTO test VALUES (11, 22), (12, 21), (13, 22);

SELECT a FROM test ORDER BY a;

PRAGMA default_order = 'DESCENDING';

SELECT a FROM test ORDER BY a;

PRAGMA default_order = 'ASC';

PRAGMA default_order = 'ASC';

PRAGMA default_order = 'UNKNOWN';

PRAGMA default_order = 'UNKNOWN';

PRAGMA default_order = 'UNKNOWN';

PRAGMA enable_verification;

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (0), (0), (0), (0);

INSERT INTO integers SELECT * FROM integers;

INSERT INTO integers SELECT * FROM integers;

INSERT INTO integers SELECT * FROM integers;

INSERT INTO integers SELECT * FROM integers;

INSERT INTO integers SELECT * FROM integers;

INSERT INTO integers SELECT * FROM integers;

INSERT INTO integers SELECT * FROM integers;

INSERT INTO integers SELECT * FROM integers;

INSERT INTO integers SELECT * FROM integers;

INSERT INTO integers SELECT * FROM integers;

INSERT INTO integers SELECT * FROM integers;

INSERT INTO integers SELECT * FROM integers;

INSERT INTO integers SELECT * FROM integers;

INSERT INTO integers SELECT * FROM integers;

INSERT INTO integers SELECT * FROM integers;

SELECT SUM(i) FROM (SELECT i FROM integers ORDER BY i) AS t1;

CREATE TABLE tbl_structs AS SELECT {'a': 2.0, 'b': 'hello', 'c': [1, 2]} AS s1, CAST(1 AS BIGINT) AS i, {'k': CAST(1 AS TINYINT), 'j': CAST(0 AS BOOLEAN)} AS s2;

INSERT INTO tbl_structs VALUES ({'a': 1.0, 'b': 'yay', 'c': [10, 20]}, 42, {'k': 2, 'j': 1});

SELECT UNNEST(s1), s1.a AS id FROM tbl_structs ORDER BY id;

SELECT s1, s1.a FROM tbl_structs ORDER BY 1;

SELECT UNNEST(s1), s1.a AS id FROM tbl_structs ORDER BY 1;

SELECT UNNEST(s1), UNNEST(s2), i FROM tbl_structs ORDER BY i;

SELECT UNNEST(s1), UNNEST(s2), i FROM tbl_structs ORDER BY 2 DESC;

SELECT i, UNNEST(s1), UNNEST(s2) FROM tbl_structs ORDER BY 5 DESC;

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

PRAGMA enable_verification;

SELECT range % 2 AS i, GROUP_CONCAT('thisstringis200characterslong..........................................................................................................................................................................') AS s FROM RANGE(0, 5000) GROUP BY i ORDER BY i;

CREATE TABLE t0 (c0 TEXT);

INSERT INTO t0 VALUES ('a'), (NULL), (NULL), (NULL), (NULL), (NULL), (NULL);

SELECT * FROM t0 ORDER BY t0.c0 DESC;

CREATE TABLE test0 (job TEXT, name TEXT);

INSERT INTO test0 VALUES ('Shipping and Receiving Supervisor', 'Ackerman'), ('Shipping and Receiving Clerk', 'Berndt'), ('Shipping and Receiving Clerk', 'Kuppa'), ('Production Supervisor - WC60', 'Brown'), ('Production Supervisor - WC60', 'Campbell'), ('Production Supervisor - WC40', 'Dsa');

SELECT * FROM test0 ORDER BY job, name;

SELECT * FROM test0 ORDER BY job DESC, name DESC;

CREATE TABLE test1 (s TEXT);

INSERT INTO test1 VALUES ('2'), (NULL), ('3555555555552'), ('1'), ('355555555556'), ('10'), ('3555555555553'), ('3555555555551');

SELECT * FROM test1 ORDER BY s;

CREATE TABLE test2 AS (SELECT CAST(range AS TEXT) AS r, RANDOM() AS rand FROM RANGE(0, 10000));

CREATE TABLE test2_1 AS (SELECT * FROM test2 ORDER BY r);

SELECT COUNT(*) FROM test2_1;

CREATE TABLE test3 AS (SELECT CAST(range AS TEXT) AS r, RANDOM() AS rand FROM RANGE(0, 10000));

CREATE TABLE test3_1 AS (SELECT * FROM test3 ORDER BY rand);

SELECT COUNT(*) FROM test3_1;

CREATE TABLE test4 (i INT, j INT);

INSERT INTO test4 VALUES (3, 3), (2, 3), (2, 2), (3, 2);

SELECT * FROM test4 ORDER BY CAST(i AS TEXT), j;

SELECT * FROM test4 ORDER BY i, CAST(j AS TEXT);

SELECT * FROM test4 ORDER BY CAST(i AS TEXT), CAST(j AS TEXT);

CREATE TABLE tpch_q1_agg (l_returnflag TEXT, l_linestatus TEXT, sum_qty INT, sum_base_price DOUBLE, sum_disc_price DOUBLE, sum_charge DOUBLE, avg_qty DOUBLE, avg_price DOUBLE, avg_disc DOUBLE, count_order BIGINT);

INSERT INTO tpch_q1_agg VALUES ('N', 'O', 7459297, 10512270008.90, 9986238338.3847, 10385578376.585467, 25.545537671232875, 36000.9246880137, 0.05009595890410959, 292000), ('R', 'F', 3785523, 5337950526.47, 5071818532.9420, 5274405503.049367, 25.5259438574251, 35994.029214030925, 0.04998927856184382, 148301), ('A', 'F', 3774200, 5320753880.69, 5054096266.6828, 5256751331.449234, 25.537587116854997, 36002.12382901414, 0.05014459706340077, 147790), ('N', 'F', 95257, 133737795.84, 127132372.6512, 132286291.229445, 25.30066401062417, 35521.32691633466, 0.04939442231075697, 3765);

SELECT * FROM tpch_q1_agg ORDER BY l_returnflag, l_linestatus;

CREATE TABLE test5 (i INT, s TEXT);

INSERT INTO test5 VALUES (3, 'ababa'), (1, 'babab'), (NULL, 'abbab'), (2, NULL);

SELECT i, LIST(STR_SPLIT(s, 'b')) FROM test5 GROUP BY i ORDER BY i;

SELECT i, {'i': i, 's': s} FROM test5 ORDER BY i;

SELECT i, {'i': i, 's': STR_SPLIT(s, 'b')} FROM test5 ORDER BY i;

SELECT i, {'i': i, 's': UNNEST(STR_SPLIT(s, 'b'))} FROM test5 ORDER BY i;

SELECT i, {'i': i, 's': LIST(s)} FROM test5 GROUP BY i ORDER BY i;

SELECT i, {'i': i, 's': s} FROM test5 ORDER BY s;

SELECT i, {'i': i, 's': LIST(STR_SPLIT(s, 'b'))} FROM test5 GROUP BY i ORDER BY i;

CREATE TABLE test6 (i1 INT, s1 TEXT, i2 INT, s2 TEXT);

INSERT INTO test6 VALUES (6, '0reallylongstring1', 3, '1reallylongstring8'), (6, '0reallylongstring1', 3, '1reallylongstring7'), (6, '0reallylongstring1', 4, '1reallylongstring8'), (6, '0reallylongstring1', 4, '1reallylongstring7'), (6, '0reallylongstring2', 3, '1reallylongstring8'), (6, '0reallylongstring2', 3, '1reallylongstring7'), (6, '0reallylongstring2', 4, '1reallylongstring8'), (6, '0reallylongstring2', 4, '1reallylongstring7'), (5, '0reallylongstring1', 3, '1reallylongstring8'), (5, '0reallylongstring1', 3, '1reallylongstring7'), (5, '0reallylongstring1', 4, '1reallylongstring8'), (5, '0reallylongstring1', 4, '1reallylongstring7'), (5, '0reallylongstring2', 3, '1reallylongstring8'), (5, '0reallylongstring2', 3, '1reallylongstring7'), (5, '0reallylongstring2', 4, '1reallylongstring8'), (5, '0reallylongstring2', 4, '1reallylongstring7');

SELECT i1, s1, i2, s2 FROM test6 ORDER BY i1, s1, i2, s2;

SELECT s1, i1, i2, s2 FROM test6 ORDER BY s1, i1, i2, s2;

SELECT s1, i1, s2, i2 FROM test6 ORDER BY s1, i1, s2, i2;

SELECT s1, s2, i1, i2 FROM test6 ORDER BY s1, s2, i1, i2;

SELECT i1, i2, s1, s2 FROM test6 ORDER BY i1, i2, s1, s2;

SELECT s1, s2, i1, i2 FROM test6 ORDER BY i2 DESC, s1, s2, i1;

CREATE TABLE test7 (p_brand TEXT, p_type TEXT, p_size INT, supplier_cnt BIGINT);

INSERT INTO test7 VALUES ('Brand#11', 'ECONOMY BRUSHED COPPER', 3, 4), ('Brand#11', 'ECONOMY BRUSHED COPPER', 9, 4), ('Brand#11', 'ECONOMY BRUSHED STEEL', 36, 4), ('Brand#11', 'ECONOMY BRUSHED STEEL', 9, 4), ('Brand#11', 'ECONOMY BURNISHED BRASS', 36, 4), ('Brand#11', 'ECONOMY BURNISHED COPPER', 49, 4), ('Brand#11', 'ECONOMY BURNISHED COPPER', 9, 4), ('Brand#11', 'ECONOMY BURNISHED NICKEL', 14, 4), ('Brand#11', 'ECONOMY BURNISHED NICKEL', 49, 4);

SELECT p_brand, p_type, p_size, supplier_cnt FROM test7 ORDER BY supplier_cnt DESC, p_brand, p_type, p_size;

CREATE TABLE test8 (i INT, s TEXT);

INSERT INTO test8 VALUES (3, 'aba'), (1, 'ccbcc'), (NULL, 'dbdbd'), (2, NULL);

SELECT i, STR_SPLIT(s, 'b') FROM test8 ORDER BY i;

SELECT i, LIST(s) FROM test8 GROUP BY i ORDER BY i;

SELECT i, LIST(STR_SPLIT(s, 'b')) FROM test8 GROUP BY i ORDER BY i;

PRAGMA threads = 1;

CREATE TABLE test9 AS (SELECT range % 4 AS i, range AS j FROM RANGE(0, 5000));

INSERT INTO test9 VALUES (0, NULL), (1, NULL), (2, NULL), (3, NULL);

SELECT i, LIST(j) FROM test9 GROUP BY i ORDER BY i;

CREATE TABLE DirectReports (EmployeeID SMALLINT, Name TEXT NOT NULL, Title TEXT NOT NULL, EmployeeLevel INT NOT NULL, Sort TEXT NOT NULL);

INSERT INTO DirectReports VALUES (1, 'Ken Sánchez', 'Chief Executive Officer', 1, 'Ken Sánchez'), (273, '>Brian Welcker', 'Vice President of Sales', 2, 'Ken Sánchez>Brian Welcker'), (274, '>>Stephen Jiang', 'North American Sales Manager', 3, 'Ken Sánchez>Brian Welcker>Stephen Jiang'), (285, '>>Syed Abbas', 'Pacific Sales Manager', 3, 'Ken Sánchez>Brian Welcker>Syed Abbas'), (16, '>>David Bradley', 'Marketing Manager', 3, 'Ken Sánchez>Brian Welcker>David Bradley'), (275, '>>>Michael Blythe', 'Sales Representative', 4, 'Ken Sánchez>Brian Welcker>Stephen Jiang>Michael Blythe'), (276, '>>>Linda Mitchell', 'Sales Representative', 4, 'Ken Sánchez>Brian Welcker>Stephen Jiang>Linda Mitchell'), (286, '>>>Lynn Tsoflias', 'Sales Representative', 4, 'Ken Sánchez>Brian Welcker>Syed Abbas>Lynn Tsoflias'), (23, '>>>Mary Gibson', 'Marketing Specialist', 4, 'Ken Sánchez>Brian Welcker>David Bradley>Mary Gibson');

SELECT EmployeeID, Name, Title, EmployeeLevel FROM DirectReports ORDER BY Sort, EmployeeID;

DROP TABLE t0;

DROP TABLE test0;

DROP TABLE test1;

DROP TABLE test2;

DROP TABLE test2_1;

DROP TABLE test3;

DROP TABLE test3_1;

DROP TABLE test4;

DROP TABLE tpch_q1_agg;

DROP TABLE test5;

DROP TABLE test6;

DROP TABLE test7;

DROP TABLE test8;

DROP TABLE test9;

DROP TABLE DirectReports;

PRAGMA enable_verification;

CREATE TABLE orders_small AS SELECT * FROM PARQUET_SCAN('data/parquet-testing/orders_small_parquet.test');

SELECT o_orderkey, o_clerk, o_orderstatus, o_totalprice FROM orders_small ORDER BY o_orderkey NULLS FIRST, o_clerk NULLS FIRST, o_orderstatus NULLS FIRST, o_totalprice DESC LIMIT 360;

SELECT o_orderkey, o_clerk, o_orderstatus, o_totalprice FROM orders_small ORDER BY o_orderkey NULLS FIRST, o_clerk NULLS FIRST, o_orderstatus NULLS FIRST, o_totalprice DESC LIMIT 10 OFFSET 440;

SET threads = 8;

SET memory_limit = '1GB';

CALL dbgen(sf=1);

ALTER TABLE lineitem RENAME TO lineitem1;

CREATE TABLE lineitem2 AS SELECT * FROM lineitem1;

CREATE OR REPLACE TEMPORARY TABLE ans AS SELECT l1.* FROM lineitem1 AS l1;

SELECT COUNT(*) > 0 FROM DUCKDB_TEMPORARY_FILES();

DROP TABLE ans;

SELECT COUNT(*) > 0 FROM DUCKDB_TEMPORARY_FILES();

CREATE OR REPLACE TEMPORARY TABLE ans AS SELECT l1.*, l1.* FROM lineitem1 AS l1 ORDER BY l_orderkey, l_returnflag;

SELECT COUNT(*) > 0 FROM DUCKDB_TEMPORARY_FILES();

DROP TABLE ans;

SELECT COUNT(*) > 0 FROM DUCKDB_TEMPORARY_FILES();

SELECT COUNT(*) > 0 FROM DUCKDB_TEMPORARY_FILES();

DROP TABLE ans;

SELECT COUNT(*) > 0 FROM DUCKDB_TEMPORARY_FILES();

CREATE OR REPLACE TEMPORARY TABLE ans AS SELECT l1.*, ROW_NUMBER() OVER (PARTITION BY l_orderkey, l_linenumber ORDER BY l_orderkey) FROM lineitem1 AS l1;

SELECT COUNT(*) > 0 FROM DUCKDB_TEMPORARY_FILES();

DROP TABLE ans;

SELECT COUNT(*) > 0 FROM DUCKDB_TEMPORARY_FILES();

CREATE OR REPLACE TEMPORARY TABLE ans AS SELECT l1.*, l2.* FROM lineitem1 AS l1 JOIN lineitem2 AS l2 USING (l_orderkey, l_linenumber);

SELECT COUNT(*) > 0 FROM DUCKDB_TEMPORARY_FILES();

DROP TABLE ans;

SELECT COUNT(*) > 0 FROM DUCKDB_TEMPORARY_FILES();

PRAGMA enable_verification;

SELECT CAST(251658240 AS BIGINT) * CAST(251658240 AS BIGINT);

SELECT CAST(251658240 AS BIGINT) * CAST(1080863910568919040 AS BIGINT);

SELECT CAST(1080863910568919040 AS BIGINT) * CAST(251658240 AS BIGINT);

SELECT CAST(1080863910568919040 AS BIGINT) * CAST(1080863910568919040 AS BIGINT);

SELECT -CAST(1 AS BIGINT) * CAST(9223372036854775807 AS BIGINT);

SELECT -CAST(2 AS BIGINT) * CAST(4611686018427387905 AS BIGINT);

SELECT CAST(8589934592 AS BIGINT) * CAST(1073741823 AS BIGINT);

SELECT CAST(10737418240 AS BIGINT) * CAST(1073741823 AS BIGINT);

SELECT CAST(1073741823 AS BIGINT) * CAST(8589934592 AS BIGINT);

SELECT CAST(1073741823 AS BIGINT) * CAST(10737418240 AS BIGINT);

SELECT CAST(1073741823 AS BIGINT) * CAST(8589934592 AS BIGINT);

SELECT CAST((-9223372036854775808) AS BIGINT) * CAST(2 AS BIGINT);

SELECT CAST((-9223372036854775808) AS BIGINT) * -CAST(1 AS BIGINT);

SELECT -CAST(1 AS BIGINT) * CAST((-9223372036854775808) AS BIGINT);

SELECT -CAST(2 AS BIGINT) * CAST((-9223372036854775808) AS BIGINT);

SELECT CAST((-9223372036854775808) AS BIGINT) * CAST(0 AS BIGINT);

SELECT CAST((-9223372036854775808) AS BIGINT) * CAST(1 AS BIGINT);

SELECT CAST(0 AS BIGINT) * CAST((-9223372036854775808) AS BIGINT);

SELECT CAST(1 AS BIGINT) * CAST((-9223372036854775808) AS BIGINT);

SELECT CAST((-9223372036854775807) AS BIGINT) * CAST(2 AS BIGINT);

SELECT CAST((-9223372036854775807) AS BIGINT) * -CAST(1 AS BIGINT);

SELECT -CAST(1 AS BIGINT) * CAST((-9223372036854775807) AS BIGINT);

SELECT -CAST(2 AS BIGINT) * CAST((-9223372036854775807) AS BIGINT);

SELECT CAST((-9223372036854775807) AS BIGINT) * CAST(0 AS BIGINT);

SELECT CAST((-9223372036854775807) AS BIGINT) * CAST(1 AS BIGINT);

SELECT CAST(0 AS BIGINT) * CAST((-9223372036854775807) AS BIGINT);

SELECT CAST(1 AS BIGINT) * CAST((-9223372036854775807) AS BIGINT);

PRAGMA enable_verification;

SELECT CAST(1e308 AS DOUBLE) + CAST(1e308 AS DOUBLE);

SELECT CAST(0 AS DOUBLE) - CAST(1e308 AS DOUBLE) - CAST(1e308 AS DOUBLE);

SELECT CAST(1e308 AS DOUBLE) * CAST(1e308 AS DOUBLE);

SELECT CAST(1e308 AS DOUBLE) * CAST(1e308 AS DOUBLE);

SELECT CAST(1e308 AS DOUBLE) / 0.1;

SELECT CAST(2e38 AS REAL) + CAST(2e38 AS REAL);

SELECT CAST(2e38 AS REAL) * CAST(2e38 AS REAL);

SELECT CAST(2e38 AS REAL) / 0.1;

PRAGMA enable_verification;

CREATE TABLE integers (x INT);

SET max_expression_depth = 250;

SELECT x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x FROM integers;

PRAGMA enable_verification;

SELECT CAST(100 AS TINYINT) + CAST(1 AS TINYINT);

SELECT CAST(100 AS TINYINT) + CAST(50 AS TINYINT);

SELECT CAST(0 AS TINYINT) + -CAST(127 AS TINYINT);

SELECT -CAST(2 AS TINYINT) + -CAST(127 AS TINYINT);

SELECT CAST(30000 AS SMALLINT) + CAST(1 AS SMALLINT);

SELECT CAST(30000 AS SMALLINT) + CAST(5000 AS SMALLINT);

SELECT CAST(0 AS SMALLINT) + -CAST(32767 AS SMALLINT);

SELECT -CAST(2 AS SMALLINT) + -CAST(32767 AS SMALLINT);

SELECT CAST(2147483640 AS INT) + CAST(1 AS INT);

SELECT CAST(2147483640 AS INT) + CAST(5000 AS INT);

SELECT CAST(0 AS INT) + -CAST(2147483647 AS INT);

SELECT -CAST(2 AS INT) + -CAST(2147483647 AS INT);

SELECT CAST(9223372036854775800 AS BIGINT) + CAST(1 AS BIGINT);

SELECT CAST(9223372036854775800 AS BIGINT) + CAST(5000 AS BIGINT);

SELECT CAST(0 AS BIGINT) + -CAST(9223372036854775807 AS BIGINT);

SELECT -CAST(2 AS BIGINT) + -CAST(9223372036854775808 AS BIGINT);

SELECT -CAST(100 AS TINYINT) - CAST(1 AS TINYINT);

SELECT -CAST(100 AS TINYINT) - CAST(50 AS TINYINT);

SELECT CAST(0 AS TINYINT) - CAST(127 AS TINYINT);

SELECT -CAST(2 AS TINYINT) - CAST(127 AS TINYINT);

SELECT -CAST(30000 AS SMALLINT) - CAST(1 AS SMALLINT);

SELECT -CAST(30000 AS SMALLINT) - CAST(5000 AS SMALLINT);

SELECT CAST(0 AS SMALLINT) - CAST(32767 AS SMALLINT);

SELECT -CAST(2 AS SMALLINT) - CAST(32767 AS SMALLINT);

SELECT -CAST(2147483640 AS INT) - CAST(1 AS INT);

SELECT -CAST(2147483640 AS INT) - CAST(5000 AS INT);

SELECT CAST(0 AS INT) - CAST(2147483647 AS INT);

SELECT -CAST(2 AS INT) - CAST(2147483647 AS INT);

SELECT -CAST(9223372036854775800 AS BIGINT) - CAST(1 AS BIGINT);

SELECT -CAST(9223372036854775800 AS BIGINT) - CAST(5000 AS BIGINT);

SELECT CAST(0 AS BIGINT) - CAST(9223372036854775807 AS BIGINT);

SELECT -CAST(2 AS BIGINT) - CAST(9223372036854775807 AS BIGINT);

SELECT CAST(50 AS TINYINT) * CAST(2 AS TINYINT);

SELECT CAST(50 AS TINYINT) * CAST(3 AS TINYINT);

SELECT -CAST(1 AS TINYINT) * CAST(127 AS TINYINT);

SELECT -CAST(2 AS TINYINT) * CAST(64 AS TINYINT);

SELECT -CAST(2 AS TINYINT) * CAST(65 AS TINYINT);

SELECT CAST(15000 AS SMALLINT) * CAST(2 AS SMALLINT);

SELECT CAST(15000 AS SMALLINT) * CAST(3 AS SMALLINT);

SELECT -CAST(1 AS SMALLINT) * CAST(32767 AS SMALLINT);

SELECT -CAST(2 AS SMALLINT) * CAST(16384 AS SMALLINT);

SELECT -CAST(2 AS SMALLINT) * CAST(16385 AS SMALLINT);

SELECT CAST(1073741820 AS INT) * CAST(2 AS INT);

SELECT CAST(1073741820 AS INT) * CAST(3 AS INT);

SELECT -CAST(1 AS INT) * CAST(2147483647 AS INT);

SELECT -CAST(2 AS INT) * CAST(1073741824 AS INT);

SELECT -CAST(2 AS INT) * CAST(1073741825 AS INT);

SELECT CAST(4611686018427387900 AS BIGINT) * CAST(2 AS BIGINT);

SELECT CAST(4611686018427387900 AS BIGINT) * CAST(3 AS BIGINT);

SELECT -CAST(1 AS BIGINT) * CAST(9223372036854775807 AS BIGINT);

SELECT -CAST(2 AS BIGINT) * CAST(4611686018427387905 AS BIGINT);

CREATE TABLE tinyints (i TINYINT);

INSERT INTO tinyints VALUES (1), (10);

SELECT i + CAST(100 AS TINYINT) FROM tinyints ORDER BY 1;

SELECT i + CAST(120 AS TINYINT) FROM tinyints ORDER BY 1;

SELECT i + CAST(120 AS TINYINT) FROM tinyints WHERE i = 1 ORDER BY 1;

SELECT -CAST(100 AS TINYINT) - i FROM tinyints ORDER BY 1;

SELECT -CAST(120 AS TINYINT) - i FROM tinyints ORDER BY 1;

SELECT -CAST(120 AS TINYINT) - i FROM tinyints WHERE i = 1 ORDER BY 1;

SELECT -CAST(120 AS TINYINT) + (-i) FROM tinyints ORDER BY 1;

SELECT -CAST(120 AS TINYINT) + (-(-(-i))) FROM tinyints ORDER BY 1;

SELECT i * CAST(10 AS TINYINT) FROM tinyints ORDER BY 1;

SELECT i * CAST(15 AS TINYINT) FROM tinyints ORDER BY 1;

SELECT (i * CAST(10 AS TINYINT)) * CAST(10 AS TINYINT) FROM tinyints ORDER BY 1;

SELECT (i * CAST(10 AS TINYINT)) * CAST(10 AS TINYINT) FROM tinyints WHERE i = 1 ORDER BY 1;

SELECT (i * CAST(10 AS TINYINT)) * CAST(10 AS TINYINT) FROM (SELECT * FROM tinyints) AS tbl(i) ORDER BY 1;

SELECT (i * CAST(10 AS TINYINT)) * CAST(10 AS TINYINT) FROM (SELECT * FROM tinyints) AS tbl(i) WHERE i = 1 ORDER BY 1;

SELECT (i * CAST(10 AS TINYINT)) * CAST(10 AS TINYINT) FROM (SELECT * FROM tinyints WHERE i = 1 UNION ALL SELECT * FROM tinyints WHERE i = 10) AS tbl(i) ORDER BY 1;

CREATE TABLE smallints (i SMALLINT);

INSERT INTO smallints VALUES (1), (10);

SELECT i + CAST(32765 AS SMALLINT) FROM smallints;

SELECT i + CAST(32765 AS SMALLINT) FROM smallints WHERE i = 1;

SELECT -CAST(32765 AS SMALLINT) - i FROM smallints;

SELECT -CAST(32765 AS SMALLINT) - i FROM smallints WHERE i = 1;

SELECT i * CAST(10000 AS SMALLINT) FROM smallints;

SELECT i * CAST(10000 AS SMALLINT) FROM smallints WHERE i = 1;

SELECT CAST(i AS TINYINT) + CAST(120 AS TINYINT) FROM smallints;

SELECT CAST(i AS TINYINT) + CAST(120 AS TINYINT) FROM smallints WHERE i = 1;

INSERT INTO smallints VALUES (1000);

SELECT CAST(i AS TINYINT) FROM smallints;

SELECT CAST(i AS TINYINT) + CAST(120 AS TINYINT) FROM smallints WHERE i = 1;

INSERT INTO smallints VALUES (30000);

SELECT CAST(integers1.i AS SMALLINT) + CAST(integers2.i AS SMALLINT) FROM smallints AS integers1, smallints AS integers2 WHERE integers1.i = integers2.i;

CREATE TABLE smallints2 (j SMALLINT);

INSERT INTO smallints2 VALUES (1), (10);

SELECT i + j FROM smallints AS si_left LEFT JOIN smallints2 AS si_right ON (i = j);

INSERT INTO smallints2 VALUES (30000);

SELECT i + j FROM smallints LEFT JOIN smallints2 ON (i = j);

PRAGMA enable_verification;

SELECT 1e1000;

SELECT CAST(1e308 AS REAL);

SELECT CAST(1e1000 AS REAL);

SELECT CAST('1e1000' AS DOUBLE);

SELECT CAST('1e100' AS REAL);

SELECT SUM(i) FROM (VALUES (1e308), (1e308)) AS tbl(i);

SELECT AVG(i) FROM (VALUES (1e308), (1e308)) AS tbl(i);

SELECT 1e308+1 AS e308;

SELECT 1e308 * 2;

SELECT -1e308-1 AS e308;

SELECT 1e308 / 0.1;

SELECT CAST(2e38 AS REAL) + CAST(2e38 AS REAL);

SELECT CAST(2e38 AS REAL) * 2;

SELECT -CAST(2e38 AS REAL) - CAST(2e38 AS REAL);

SELECT CAST(2e38 AS REAL) / CAST(0.1 AS REAL);

PRAGMA enable_verification;

CREATE TABLE test (a INT, b INT);

INSERT INTO test VALUES (-1099511627776, 3);

INSERT INTO test VALUES (11, 22), (12, 21), (14, 22);

SELECT CAST(-SUM(DISTINCT -CAST(NULL AS INT)) AS INT) FROM test;

SELECT b, AVG(a) FROM test GROUP BY b ORDER BY b;

SELECT CAST(200 AS TINYINT);

SELECT CAST(-129 AS TINYINT);

SELECT CAST(100 AS TINYINT) + CAST(100 AS TINYINT);

CREATE TABLE test2 (a INT, b TINYINT);

INSERT INTO test2 VALUES (200, 60), (12, 60), (14, 60);

SELECT CAST(a AS TINYINT) FROM test2;

SELECT SUM(b) FROM test2;

SELECT CAST(100 AS TINYINT) - -CAST(50 AS TINYINT);

SELECT CAST(100 AS TINYINT) * CAST(2 AS TINYINT);

SELECT CAST(100 AS TINYINT) + CAST(b AS TINYINT) FROM test2;

SELECT CAST(100 AS TINYINT) - -CAST(b AS TINYINT) FROM test2;

SELECT CAST(100 AS TINYINT) * CAST(b AS TINYINT) FROM test2;

SELECT a + b FROM (SELECT CAST(100 AS TINYINT) AS a, CAST(100 AS TINYINT) AS b) AS tbl1;

SET threads = 8;

SET threads = 4;

SET threads = 4;

CREATE TABLE integers(i INTEGER)
concurrentloop threadid 0 20;

INSERT INTO integers SELECT * FROM RANGE(0, 100);
endloop;

SELECT COUNT(*), SUM(i) FROM integers;

CREATE TABLE integers (i INT);

CREATE INDEX i_index ON integers(i);

CREATE VIEW v1 AS SELECT * FROM integers;

CREATE VIEW v1 AS SELECT * FROM integers;

CREATE VIEW v1 AS SELECT * FROM integers;

CREATE VIEW v1 AS SELECT * FROM integers;

CREATE VIEW v1 AS SELECT * FROM integers;

CREATE VIEW v1 AS SELECT * FROM integers;

CREATE VIEW v1 AS SELECT * FROM integers;

CREATE VIEW v1 AS SELECT * FROM integers;

CREATE VIEW v1 AS SELECT * FROM integers;

CREATE VIEW v1 AS SELECT * FROM integers;

CREATE VIEW v1 AS SELECT * FROM integers;

CREATE VIEW v1 AS SELECT * FROM integers;

CREATE VIEW v1 AS SELECT * FROM integers;

CREATE VIEW v1 AS SELECT * FROM integers;

CREATE VIEW v1 AS SELECT * FROM integers;

CREATE VIEW v1 AS SELECT * FROM integers;

SELECT * FROM DUCKDB_TEMPORARY_FILES();
endloop AS endloop;

SELECT COUNT(*), SUM(i) FROM integers;

CREATE TABLE integers(i INTEGER)
concurrentloop threadid 0 10;

BEGIN;

CREATE TABLE count_table_${threadid} AS SELECT * FROM integers
loop i 0 100;

CREATE TABLE count_table_${threadid} AS SELECT * FROM integers
loop i 0 100;

CREATE TABLE count_table_${threadid} AS SELECT * FROM integers
loop i 0 100;

CREATE OR REPLACE TABLE count_table_${threadid} AS (SELECT * FROM count_table_${threadid} UNION SELECT ${threadid} * 10000 + ${i})
endloop;

CREATE OR REPLACE TABLE count_table_${threadid} AS (SELECT * FROM count_table_${threadid} UNION SELECT ${threadid} * 10000 + ${i})
endloop;

SELECT COUNT(*), SUM(i) FROM integers;

CREATE TABLE integers(i INTEGER PRIMARY KEY)
concurrentloop threadid 0 10;

BEGIN;

CREATE TABLE count_table_${threadid} AS SELECT COUNT(*) AS count FROM integers WHERE i >= 0
loop i 0 100;

CREATE TABLE count_table_${threadid} AS SELECT COUNT(*) AS count FROM integers WHERE i >= 0
loop i 0 100;

CREATE TABLE count_table_${threadid} AS SELECT COUNT(*) AS count FROM integers WHERE i >= 0
loop i 0 100;

CREATE TABLE count_table_${threadid} AS SELECT COUNT(*) AS count FROM integers WHERE i >= 0
loop i 0 100;

SELECT COUNT(*), COUNT(DISTINCT i) FROM integers;

CREATE TABLE test(a INTEGER)
concurrentloop i 0 10;

INSERT INTO test SELECT * FROM RANGE(0, 1000000) AS endloop;

SELECT COUNT(*), SUM(a) FROM test;

CREATE TABLE test(a INTEGER PRIMARY KEY)
concurrentloop threadid 0 10;

CREATE TABLE test(a INTEGER PRIMARY KEY)
concurrentloop threadid 0 10;

SELECT COUNT(*), SUM(a) FROM test;

SELECT COUNT(*), SUM(a) FROM test;

CREATE TABLE integers (i INT);

CREATE TABLE integers (i INT);

CREATE TABLE integers (i INT);

CREATE TABLE integers (i INT);

CREATE TABLE integers (i INT);

CREATE TABLE integers (i INT);

CREATE TABLE integers (i INT);

CREATE TABLE integers (i INT);

CREATE TABLE integers (i INT);

SELECT COUNT(*), SUM(i) FROM integers;

CREATE TABLE integers (i INT PRIMARY KEY, value BIGINT);

CREATE TABLE integers (i INT PRIMARY KEY, value BIGINT);

CREATE TABLE integers (i INT PRIMARY KEY, value BIGINT);

CREATE TABLE integers (i INT PRIMARY KEY, value BIGINT);

CREATE TABLE integers (i INT PRIMARY KEY, value BIGINT);

SELECT COUNT(*), SUM(i) FROM integers;

CREATE TABLE integers (i INT PRIMARY KEY);

CREATE TABLE integers (i INT PRIMARY KEY);

CREATE TABLE integers (i INT PRIMARY KEY);

CREATE TABLE integers (i INT PRIMARY KEY);

SELECT COUNT(*), SUM(i) FROM integers;

CREATE TABLE integers (i INT);

CREATE TABLE integers (i INT);

CREATE TABLE integers (i INT);

CREATE TABLE integers (i INT);

CREATE TABLE integers (i INT);

SELECT COUNT(*), SUM(i) FROM integers;
endloop AS endloop;

SELECT COUNT(*), SUM(i) FROM integers;

CREATE TABLE lists (l INT[]);

CREATE TABLE lists (l INT[]);

CREATE TABLE lists (l INT[]);

SELECT COUNT(*) >= 30000 AND COUNT(*) <= 36000, SUM(i) >= 150015000 AND SUM(i) <= 150318000 FROM (SELECT UNNEST(l) AS i FROM lists);

SELECT COUNT(*), SUM(i) FROM (SELECT UNNEST(l) AS i FROM lists);

CREATE OR REPLACE TABLE integers (i INT);

CREATE OR REPLACE TABLE integers (i INT);

CREATE OR REPLACE TABLE integers (i INT);

ALTER TABLE integers ADD COLUMN newcol_${i} INTEGER
onlyif threadid=0;

ALTER TABLE integers ADD COLUMN newcol_${i} INTEGER
onlyif threadid=0;

ALTER TABLE integers ADD COLUMN newcol_${i} INTEGER
onlyif threadid=0;

ALTER TABLE integers ADD COLUMN newcol_${i} INTEGER
onlyif threadid=0;

SELECT COUNT(*), SUM(i) FROM integers;

CREATE TABLE integers (i INT);

CREATE TABLE integers (i INT);

CREATE TABLE integers (i INT);

SELECT COUNT(*) >= 10000 AND COUNT(*) <= 12000, SUM(i) >= 49995000 AND SUM(i) <= 50094000 FROM integers;

SELECT COUNT(*), SUM(i) FROM integers;

CREATE TABLE integers (i INT);

CREATE TABLE integers (i INT);

CREATE TABLE integers (i INT);

SELECT COUNT(*) >= 10000 AND COUNT(*) <= 12000, COUNT(i) >= 10000 AND COUNT(i) <= 11000, SUM(i) >= 49995000 AND SUM(i) <= 50094000 FROM integers;

SELECT COUNT(*), COUNT(i), SUM(i) FROM integers;

CREATE OR REPLACE TABLE integers (i INT);

CREATE OR REPLACE TABLE integers (i INT);

ALTER TABLE integers RENAME TO integers_${i}
onlyif threadid=0;

ALTER TABLE integers_${i} RENAME TO integers
endloop
loop i 0 20
skipif threadid=0;

SELECT * FROM integers;

SELECT COUNT(*), SUM(i) FROM integers;

CREATE TABLE integers (i INT);

CREATE TABLE integers (i INT);

CREATE TABLE integers (i INT);

SELECT COUNT(*) = 10000, SUM(i) >= 49995000 AND SUM(i) <= 50195000 FROM integers;

SELECT COUNT(*), SUM(i) FROM integers;

CREATE TABLE t1 (i INT);

CREATE TABLE t1 (i INT);

UPDATE t1 SET i = 4 WHERE i = 2;

SET temp_directory = '';

SET memory_limit = '2GiB';

SET threads = 4;

SET threads = 4;

SELECT COUNT(*) AS c FROM (SELECT DISTINCT i FROM integers);

SELECT COUNT(*) AS c FROM (SELECT DISTINCT i FROM integers);

DROP TABLE integers;

DROP TABLE integers;

WITH c AS NOT MATERIALIZED (SELECT d0.k0 FROM doubles AS d0 JOIN doubles AS d1 ON (d0.i = d1.j)) SELECT COUNT(*) FROM (SELECT * FROM doubles UNION ALL SELECT * FROM doubles) AS d JOIN c ON (d.k0 = c.k0);

WITH c AS NOT MATERIALIZED (SELECT d0.k0 FROM doubles AS d0 JOIN doubles AS d1 ON (d0.i = d1.j)) SELECT COUNT(*) FROM (SELECT * FROM doubles UNION ALL SELECT * FROM doubles) AS d JOIN c ON (d.k0 = c.k0);

CALL dsdgen(sf=0.01);

SELECT ss_quantity AS quantity, ss_list_price AS list_price FROM store_sales, date_dim WHERE ss_sold_date_sk = d_date_sk AND d_year BETWEEN 1999 AND 1999 + 2 UNION ALL SELECT cs_quantity AS quantity, cs_list_price AS list_price FROM catalog_sales, date_dim WHERE cs_sold_date_sk = d_date_sk AND d_year BETWEEN 1999 AND 1999 + 2;

PRAGMA enable_verification;

PRAGMA threads = 16;

CREATE TABLE varchars AS SELECT CAST(i AS TEXT) AS i FROM RANGE(0, 1000000) AS tbl(i);

INSERT INTO varchars VALUES ('hello');

SELECT (SELECT MIN(CAST(i AS INT)) + tbl.k FROM varchars) FROM (VALUES (1), (2), (3)) AS tbl(k);

PRAGMA enable_verification;

PRAGMA threads = 4;

PRAGMA verify_parallelism;

CREATE TABLE integers (i INT);

CREATE TABLE other_table AS SELECT 337 AS i UNION ALL SELECT 948247 UNION ALL SELECT 1779793 UNION ALL SELECT 4779793;

INSERT INTO integers SELECT * FROM RANGE(0, 2500000);

BEGIN;

BEGIN;

SELECT * FROM integers WHERE i IN (SELECT * FROM other_table);

SELECT * FROM integers JOIN other_table USING (i);

SELECT * FROM integers WHERE i > 337 AND i < 340;

SELECT * FROM integers WHERE i IN (337, 948247, 1779793, 4779793, 99999999999999);

SELECT * FROM integers WHERE i = 337 OR (i + i > 1896494 AND i + i <= 1896498) OR (i * 2 = 9559586);

COMMIT;

PRAGMA enable_verification;

PRAGMA threads = 4;

PRAGMA verify_parallelism;

PRAGMA enable_profiling;

PRAGMA profiling_output = '__TEST_DIR__/test.json';

PRAGMA profiling_mode = detailed;

CREATE TABLE integers AS SELECT * FROM range(50000) tbl(i)
loop i 0 3;

SELECT COUNT(*) FROM integers TABLESAMPLE RESERVOIR (100 ROWS);

PRAGMA threads = 4;

PRAGMA verify_parallelism;

PRAGMA enable_profiling;

PRAGMA profiling_output = '__TEST_DIR__/test.json';

PRAGMA profiling_mode = detailed;

CREATE TABLE t AS SELECT range AS a, range % 10 AS b FROM RANGE(0, 100000);

CREATE TABLE bool (a BOOLEAN);

INSERT INTO bool SELECT i FROM (VALUES (TRUE), (FALSE)) AS tbl(i), RANGE(0, 5000);

SELECT REGR_AVGX(a, b) FROM t GROUP BY b % 2;

SELECT REGR_AVGY(a, b) FROM t GROUP BY b % 2;

SELECT REGR_COUNT(a, b) FROM t GROUP BY b % 2;

SELECT REGR_SLOPE(a, b) FROM t GROUP BY b % 2;

SELECT REGR_R2(a, b) FROM t GROUP BY b % 2;

SELECT REGR_SXX(a, b) FROM t GROUP BY b % 2;

SELECT REGR_SYY(a, b) FROM t GROUP BY b % 2;

SELECT REGR_SXY(a, b) FROM t GROUP BY b % 2;

SELECT REGR_INTERCEPT(a, b) FROM t GROUP BY b % 2;

SELECT BOOL_OR(a) AS or_result, BOOL_AND(a) AS and_result FROM bool;

SELECT APPROX_COUNT_DISTINCT(a), APPROX_COUNT_DISTINCT(b) FROM t GROUP BY b % 2;

SELECT ARG_MIN(b, a), ARG_MAX(b, a) FROM t;

SELECT CORR(a, b) FROM t GROUP BY b % 2;

SELECT ENTROPY(a) FROM t;

SELECT PRODUCT(b) FROM t WHERE a < 2000 GROUP BY b ORDER BY ALL;

SELECT KURTOSIS(a), KURTOSIS(b) FROM t WHERE a < 5000;

SELECT SKEWNESS(skw_c) FROM (SELECT CASE WHEN a % 2 = 0 THEN 1 ELSE a END AS skw_c FROM t) AS skw_tbl;

INSERT INTO t VALUES (1, 1), (2, 2);

SELECT MODE(a), MODE(b) FROM t GROUP BY b % 2 ORDER BY ALL;

SELECT HISTOGRAM(b) FROM t;

SELECT STR_SPLIT(GROUP_CONCAT('a', ','), ',')[100] FROM t GROUP BY b % 2;

SELECT STR_SPLIT(GROUP_CONCAT(NULL, ','), ',')[100] FROM t GROUP BY b % 2;

PRAGMA threads = 4;

PRAGMA verify_parallelism;

PRAGMA enable_profiling;

PRAGMA profiling_output = '__TEST_DIR__/test.json';

PRAGMA profiling_mode = detailed;

PRAGMA profiling_mode = detailed;

PRAGMA profiling_mode = detailed;

INSERT INTO t VALUES (NULL, NULL);
endloop;

SELECT COUNT(*) FROM (SELECT UNNEST(l1) AS un FROM (SELECT LIST(a) AS l1 FROM t) AS t1) AS t2 WHERE NOT un IS NULL;

SELECT COUNT(*) FROM (SELECT UNNEST(l1) AS un FROM (SELECT LIST(a) AS l1 FROM t) AS t1) AS t2 WHERE un IS NULL;

SELECT COUNT(*) FROM (SELECT UNNEST(l1) AS un FROM (SELECT LIST(a) AS l1 FROM t) AS t1) AS t2;

SELECT COUNT(*) FROM (SELECT LIST(b) AS l1 FROM t GROUP BY a) AS t1;

PRAGMA threads = 4;

PRAGMA verify_parallelism;

PRAGMA enable_profiling;

PRAGMA profiling_output = '__TEST_DIR__/test.json';

PRAGMA profiling_mode = detailed;

CREATE TABLE t AS SELECT range AS a, range % 10 AS b FROM RANGE(0, 100000);

SELECT FIRST([a]) FROM t GROUP BY b % 2;

SELECT MIN([a]), MAX([a]) FROM t GROUP BY b % 2;

SELECT MIN([-a, 1, a]), MAX([-a, 1, a]) FROM t GROUP BY b % 2;

SELECT MIN({'i': a}), MAX({'i': a}) FROM t GROUP BY b % 2 ORDER BY ALL;

SELECT MIN({'i': a, 'j': a % 2}), MAX({'i': a, 'j': a % 2}) FROM t GROUP BY b % 2;

SELECT FIRST(CAST(NULL AS INT[])) FROM t GROUP BY b % 2;

SELECT MIN(CAST(NULL AS INT[])) FROM t GROUP BY b % 2;

SELECT MIN(CAST(NULL AS INT[])) FROM t GROUP BY b % 2;

SELECT MIN(CAST(NULL AS INT[])) FROM t GROUP BY b % 2;

PRAGMA enable_profiling;

PRAGMA profiling_output = '__TEST_DIR__/test.json';

PRAGMA profiling_mode = detailed;

BEGIN;

CREATE TABLE integers AS SELECT * FROM RANGE(0, 5000) AS tbl(i);

SELECT MIN(i), MAX(i) FROM integers;

COMMIT;

SELECT MIN(i), MAX(i) FROM integers;

PRAGMA enable_verification;

PRAGMA threads = 4;

PRAGMA verify_parallelism;

SELECT MIN(i), MAX(i) FROM integers;

BEGIN;

INSERT INTO integers SELECT * FROM RANGE(5000, 10000);

SELECT MIN(i), MAX(i) FROM integers;

COMMIT;

SELECT MIN(i), MAX(i) FROM integers;

PRAGMA enable_verification;

PRAGMA threads = 4;

PRAGMA verify_parallelism;

PRAGMA enable_profiling;

PRAGMA profiling_output = '__TEST_DIR__/test.json';

PRAGMA profiling_mode = detailed;

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (1), (2), (3), (NULL);

SELECT SUM(i) FROM integers UNION ALL SELECT AVG(i) FROM integers UNION ALL SELECT MIN(i) FROM integers UNION ALL SELECT MAX(i) FROM integers;

CREATE VIEW v1 (i) AS SELECT SUM(i) FROM integers UNION ALL SELECT AVG(i) FROM integers UNION ALL SELECT MIN(i) FROM integers UNION ALL SELECT MAX(i) FROM integers;

SELECT SUM(i) FROM integers UNION ALL SELECT AVG(i) FROM integers UNION ALL SELECT MIN(CAST(i AS DATE)) FROM integers UNION ALL SELECT MAX(CAST(i AS DATE)) FROM integers;

SELECT * FROM v1 AS t1 JOIN v1 AS t2 USING (i);

PRAGMA enable_verification;

PRAGMA threads = 4;

PRAGMA verify_parallelism;

PRAGMA enable_profiling;

PRAGMA profiling_output = '__TEST_DIR__/test.json';

PRAGMA profiling_mode = detailed;

CREATE TABLE integers AS SELECT * FROM RANGE(0, 5000) AS tbl(i);

SELECT MIN(i), MAX(i) FROM integers;

SELECT MIN(i), MAX(i) FROM integers WHERE i > 2000;

CREATE TABLE integers2 AS SELECT i % 4 AS i, i AS j FROM RANGE(0, 5000) AS tbl(i);

SELECT i, SUM(j), MIN(j), MAX(j) FROM integers2 GROUP BY i ORDER BY i;

PRAGMA enable_verification;

CREATE TABLE integers AS SELECT 42 AS i, 84 AS j UNION ALL SELECT 13, 14;

SELECT i, j FROM (SELECT CAST(COLUMNS(*) AS TEXT) FROM integers);

SELECT min_i, min_j, max_i, max_j FROM (SELECT MIN(COLUMNS(*)) AS "min_\0", MAX(COLUMNS(*)) AS "max_\0" FROM integers);

CREATE TABLE numerics AS SELECT 42 AS a42, 84 AS b84, 126 AS c126, 1000 AS d;

SELECT min_a, min_b, min_c FROM (SELECT MIN(COLUMNS('([a-z])\d+')) AS "min_\1" FROM numerics);

SELECT min_, "min__1", "min__2" FROM (SELECT MIN(COLUMNS('([a-z])\d+')) AS "min_\2" FROM numerics);

SELECT "min_\a\", "min_\b\", "min_\c\" FROM (SELECT MIN(COLUMNS('([a-z])\d+')) AS "min_\\\1\\" FROM numerics);

SELECT "a42aa", "b84bb", "c126cc" FROM (SELECT MIN(COLUMNS('([a-z])(\d+)')) AS "\1\2\1\1" FROM numerics);

SELECT MIN(COLUMNS('([a-z])\d+')) AS "\" FROM numerics;

SELECT MIN(COLUMNS('([a-z])\d+')) AS "\a" FROM numerics;

SELECT MIN(COLUMNS(*)) AS "min_\1" FROM numerics;

CREATE TABLE tbl (price INT, amount_sold INT, total_profit AS (price * amount_sold));

INSERT INTO tbl VALUES (5, 4);

SELECT price, amount_sold, total_profit FROM (SELECT CAST(COLUMNS(*) AS TEXT) FROM tbl);

SELECT varchar_price, varchar_amount_sold, varchar_total_profit FROM (SELECT CAST(COLUMNS(*) AS TEXT) AS "varchar_\0" FROM tbl);

CREATE TABLE a AS SELECT 42 AS i, 80 AS j;

CREATE TABLE b AS SELECT 43 AS i, 84 AS k;

CREATE TABLE c AS SELECT 44 AS i, 84 AS l;

SELECT i, j, k FROM (SELECT CAST(COLUMNS(*) AS TEXT) FROM a FULL OUTER JOIN b USING (i)) ORDER BY 1;

SELECT i, j, k, l FROM (SELECT CAST(COLUMNS(*) AS TEXT) FROM a FULL OUTER JOIN b USING (i) FULL OUTER JOIN c USING (i)) ORDER BY 1;

PRAGMA enable_verification;

CREATE TABLE df1 AS SELECT UNNEST(['K0', 'K1', 'K2', 'K3', 'K4', 'K5']) AS key, UNNEST([11, 12, 13, 14, 15, 16]) AS A, UNNEST([21, 22, 23, 24, 25, 26]) AS B;

CREATE TABLE df2 AS SELECT UNNEST(['K0', 'K2', 'K5']) AS key, UNNEST([2, 3, 5]) AS C;

SELECT SIN(COLUMNS(df1.* EXCLUDE (key))) FROM df1 JOIN df2 USING (key);

SELECT SIN(COLUMNS(dfxx.* EXCLUDE (key))) FROM df1 JOIN df2 USING (key);

PRAGMA enable_verification;

SELECT 1 AS _2;

SELECT 1 AS _2;

SELECT CAST('1_2.1_2E1_0' AS DOUBLE);

SELECT 1 AS __2;

SELECT 1 AS _000_000;

SELECT CAST('1000_000_000' AS INT);

SELECT CAST('1000__000__000' AS INT);

SELECT CAST('_1_2' AS INT);

SELECT CAST('1_2_' AS INT);

SELECT CAST('1_2_' AS INT);

SELECT 12.1 AS _2;

SELECT 12.1 AS _2;

SELECT CAST('_12.12' AS DECIMAL(4, 2));

SELECT CAST('12._12' AS DECIMAL(4, 2));

SELECT CAST('12_.12' AS DECIMAL(4, 2));

SELECT CAST('12.12_' AS DECIMAL(4, 2));

SELECT CAST('1__2.1__2' AS REAL);

SELECT CAST('12.1_2' AS REAL);

SELECT CAST('1_2.12' AS REAL);

SELECT CAST('12.1_2e2' AS REAL);

SELECT CAST('_12.12' AS REAL) = 12.12;

SELECT CAST('12._12' AS REAL) = 12.12;

SELECT CAST('12._12e2' AS REAL) = 12.12e2;

SELECT CAST('12_.12' AS REAL) = 12.12;

SELECT CAST('12.12_' AS REAL) = 12.12;

SELECT CAST('12.12_e2' AS REAL) = 12.12e2;

SELECT CAST('12.12_e2' AS REAL) = 12.12e2;

SELECT CAST('12.12_e2' AS REAL) = 12.12e2;

SELECT CAST('12.12_e2' AS REAL) = 12.12e2;

SELECT CAST('1_000_000_000.000_000_000_5' AS DOUBLE);

SELECT CAST('_1_000_000_000_000_000_000_000' AS DOUBLE) = 1e+21;

SELECT CAST('._000_000_000_000_000_000_000_123' AS DOUBLE) = 123e-23;

SELECT CAST('1_000_000_000_000_000_000_000_' AS DOUBLE) = 1e+21;

SELECT CAST('.000_000_000_000_000_000_000_123_' AS DOUBLE) = 123e-23;

SELECT CAST('20e10_' AS REAL);

SELECT CAST('20e_10' AS REAL);

SELECT CAST('20e10_' AS BIGINT);

SELECT CAST('20e_10' AS BIGINT);

SELECT CAST('20e_10' AS BIGINT);

SELECT CAST('12e10_' AS BIGINT) = CAST(12e10 AS BIGINT);

SELECT '_12e10::BIGINT' = CAST(12e10 AS BIGINT);

SELECT CAST('0b01_01' AS INT);

SELECT CAST('0b0_1_0_1' AS INT);

SELECT CAST('0b0_1_0_1_' AS INT);

SELECT CAST('0b_0_1_0_1' AS INT);

SELECT CAST('0b0__1_0_1' AS INT);

SELECT CAST('0xFF_FF' AS INT);

SELECT CAST('0xF_F_F_F' AS INT);

SELECT CAST('0x0_F_F_F_' AS INT);

SELECT CAST('0x_F_F_F' AS INT);

SELECT CAST('0x0__F_F_F' AS INT);

SELECT CAST('0x0__F_F_F' AS INT);

SELECT CAST('0x0__F_F_F' AS INT);

SELECT CAST('1_2e1_0' AS REAL);

SELECT CAST('1_2e1_0' AS REAL);

SELECT CAST('1_2e1_0' AS BIGINT);

PRAGMA enable_verification;

SELECT 6 * 1 / 2;

SELECT 6 * 1 // 2;

SELECT (6 * 1) // 2;

SELECT 6 * (1 // 2);

SELECT 6 + 1 / 2;

SELECT 6 + 1 // 2;

SELECT ' ' = '　';

SELECT ' ' = '　';

SELECT '' = '';

SELECT '' = '';

SELECT '' = '';

SELECT '' = '';

SELECT ' ' = '　' OR ' ' = '　';

SELECT ' ' = '　' OR ' ' = '　';

SELECT ' ' = '　' OR ' ' = '　';

SELECT ' ' = '　' OR ' ' = '　';

SELECT ' $duck$ ' = '　$duck$　';

SELECT ' $duck$ ' = '　$duck$　';

SELECT 'x x' = 'x　x';

SELECT (1 + (1 + (1 + (1 + (1 + (1 + (1 + 1)))))));

SET max_expression_depth = 7;

SELECT (1 + (1 + (1 + (1 + (1 + (1 + (1 + 1)))))));

SET max_expression_depth = 1000;

PRAGMA enable_verification;

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (1), (2), (3), (NULL);

SELECT * FROM integers;

SELECT i + 1 FROM integers;

SELECT * FROM integers LIMIT 2;

SELECT * FROM integers WHERE NOT i IS NULL;

SELECT * FROM integers ORDER BY i DESC NULLS FIRST;

SELECT DISTINCT i % 2 FROM integers WHERE i > 0 ORDER BY ALL;

SELECT i % 2 AS g, SUM(i) AS sum FROM integers GROUP BY g HAVING NOT sum IS NULL ORDER BY ALL;

SELECT * FROM integers JOIN integers AS i2 USING (i);

SELECT * FROM integers JOIN integers AS i2 USING (i);

PRAGMA enable_verification;

CREATE TABLE varchars (v TEXT);

INSERT INTO varchars VALUES ('Hello'), ('World');

SELECT x.lower() FROM varchars;

SELECT main.lower() FROM varchars AS t(main);

SELECT v.lower() FROM varchars;

SELECT (v).lower() FROM varchars;

SELECT v.lowe() FROM varchars;

SELECT varchars.v.lower() FROM varchars;

SELECT v.lower().upper() FROM varchars;

SELECT v.lower()[ : 3] FROM varchars;

SELECT v.lower()[ : 3] FROM varchars;

DELETE FROM varchars;

INSERT INTO varchars VALUES ('Hello World');

SELECT v.split(' ') FROM varchars;

SELECT v.split(' ').apply(x -> x.lower()) FROM varchars;

SELECT v.split(' ').apply(x -> x.lower()).filter(x -> x[1] = 'h') FROM varchars;

SELECT v.split(' ').length() FROM varchars;

SELECT v.split(' ').aggregate('count') FROM varchars;

SELECT v.split(' ').aggregate('min') FROM varchars;

PREPARE v1 AS SELECT ?.split(' ')[1].lower();

EXECUTE v1('Hello World');

PRAGMA enable_verification;

SELECT CASE WHEN TRUE THEN {'a': 42} END.a;

SELECT ([42])[1];

SELECT ([42])[1];

SELECT ([a FOR a IN [42, 84]])[1];

PREPARE v1 as select $1[1];

EXECUTE v1([42]);

PRAGMA enable_verification;

SELECT 42;

SELECT 42;

SELECT 42;

SELECT 42;

SELECT 42;

SELECT 42;

SELECT 42;

SELEC;

S;

PRAGMA enable_verification;

SELECT t.* FROM ((VALUES (1), (2)) AS t1(a) CROSS JOIN (VALUES (3), (4)) AS t2(b)) AS t;

SELECT x, y FROM ((VALUES (1), (2)) AS t1(a) CROSS JOIN (VALUES (3), (4)) AS t2(b)) AS t(x, y);

SELECT * FROM ((VALUES (1), (2)) AS t1(a) CROSS JOIN (VALUES (3), (4)) AS t2(b)) AS t(x, y, z);

PRAGMA enable_verification;

PREPARE v1 AS SELECT POSITION(? in ?);

EXECUTE v1('e', 'hello world');

PRAGMA enable_verification;

CREATE TABLE integers AS SELECT 42 AS i, 84 AS j UNION ALL SELECT 13, 14;

SELECT * FROM integers WHERE *;

SELECT * FROM integers WHERE NOT * IS NULL;

SELECT * FROM integers WHERE COLUMNS(*) IS NULL ORDER BY ALL;

SELECT * FROM integers GROUP BY COLUMNS(*);

SELECT * FROM integers GROUP BY * + 42;

SELECT * FROM integers GROUP BY i HAVING * > 42;

SELECT * FROM integers GROUP BY i HAVING COLUMNS(*) > 42;

SELECT * FROM integers ORDER BY *, *;

SELECT * FROM integers ORDER BY * + 42;

INSERT INTO integers VALUES (*, *);

VALUES (*);

SELECT * FROM READ_CSV(*, *);

PRAGMA enable_verification;

CREATE TABLE tbl (i INT);

SELECT * FROM tbl AT (TIMESTAMP => CAST('2020-01-01' AS TIMESTAMP));

SELECT * FROM tbl AT (TIMESTAMP => CAST('2020-01-01' AS TIMESTAMP));

SELECT * FROM tbl AT (TIMESTAMP => CAST('2020-01-01' AS TIMESTAMP));

SET VARIABLE my_timestamp = TIMESTAMP '2020-01-01';

SELECT * FROM tbl AT (TIMESTAMP => GETVARIABLE('my_timestamp'));

SELECT * FROM tbl AT (TIMESTAMP => NOW() - INTERVAL '3' DAYS);

SELECT * FROM tbl AT (TIMESTAMP => CAST('2020-01-01' AS TIMESTAMP) + a);

SELECT * FROM tbl AT (TIMESTAMP => (SELECT MIN(ts) FROM tbl));

PRAGMA enable_verification;

CREATE TABLE integers AS SELECT 42 AS i, 84 AS j UNION ALL SELECT 13, 14;

SELECT COLUMNS(*) FROM integers;

SELECT MIN(COLUMNS(*)), MAX(COLUMNS(*)) FROM integers;

SELECT MIN(COLUMNS(* EXCLUDE (j))), MAX(COLUMNS(* EXCLUDE (i))) FROM integers;

SELECT MIN(COLUMNS(* REPLACE (i + j AS i))) FROM integers;

SELECT COLUMNS(*) + 1 FROM integers;

SELECT COLUMNS(*) + COLUMNS(*) FROM integers;

CREATE TABLE grouped_table AS SELECT 1 AS id, 42 AS index1, 84 AS index2 UNION ALL SELECT 2, 13, 14;

SELECT id, MIN(COLUMNS('index[0-9]')) FROM grouped_table GROUP BY ALL ORDER BY ALL;

SELECT id, MIN(COLUMNS('[0-9]')) FROM grouped_table GROUP BY ALL ORDER BY ALL;

SELECT id, MIN(COLUMNS('xxx')) FROM grouped_table GROUP BY ALL;

SELECT MIN(COLUMNS('xxx')) FROM grouped_table;

SELECT MIN(COLUMNS('[asdadd')) FROM grouped_table;

SELECT COLUMNS(*) + COLUMNS(* EXCLUDE (j)) FROM integers;

SELECT (SELECT COLUMNS(*)) FROM integers;

SELECT COLUMNS(['a', NULL]) FROM (VALUES (42)) AS t(a);

SELECT * FROM grouped_table ORDER BY COLUMNS('index[0-9]');

SELECT * FROM grouped_table ORDER BY COLUMNS(*);

PRAGMA enable_verification;

CREATE TABLE integers AS SELECT 42 AS i, 84 AS j UNION ALL SELECT 13, 14;

SELECT COLUMNS([x FOR x IN *]) FROM integers;

SELECT COLUMNS([x FOR x IN (*) IF x <> 'i']) FROM integers;

SELECT COLUMNS(x -> x <> 'i') FROM integers;

SELECT COLUMNS([x FOR x IN (*) IF x SIMILAR TO 'i']) FROM integers;

SELECT COLUMNS(['i', 'i']) FROM integers;

SELECT COLUMNS(LIST_CONCAT(['i'], ['i'])) FROM integers;

SELECT COLUMNS([x FOR x IN (* EXCLUDE (i))]) FROM integers;

SELECT COLUMNS(['i']) + COLUMNS(['i']) FROM integers;

SELECT COLUMNS([i, j]) FROM integers;

SELECT COLUMNS([x FOR x IN COLUMNS(*)]) FROM integers;

SELECT COLUMNS(COLUMNS(*)) FROM integers;

SELECT * + 42 FROM integers;

SELECT COLUMNS([x FOR x IN (*) IF x = 'k']) FROM integers;

SELECT COLUMNS(['k']) FROM integers;

SELECT COLUMNS([x FOR x IN (*) IF x LIKE 'i']) FROM integers AS i1 JOIN integers AS i2 USING (i);

SELECT COLUMNS([x FOR x IN (*) IF x LIKE 'i']) FROM integers AS i1 JOIN integers AS i2 ON (i1.i = i2.i);

SELECT COLUMNS([43]) FROM integers;

SELECT COLUMNS([NULL]) FROM integers;

SELECT COLUMNS(CAST([] AS TEXT[])) FROM integers;

SELECT COLUMNS(CAST(NULL AS TEXT[])) FROM integers;

SELECT COLUMNS(CAST(NULL AS TEXT)) FROM integers;

SELECT COLUMNS(['i']) + COLUMNS(['j']) FROM integers;

SELECT COLUMNS([x FOR x IN (* REPLACE (i AS i))]) FROM integers;

PRAGMA enable_verification;

CREATE TABLE tbl (col1 INT, col2 INT, col3 INT);

INSERT INTO tbl VALUES (1, 200, 10), (2, 100, 20), (3, 200, 0);

SELECT * FROM tbl ORDER BY COLUMNS('col1|col3');

SELECT * FROM tbl ORDER BY COLUMNS('col2|col3');

SELECT * FROM tbl ORDER BY COLUMNS('col2|col3') DESC;

SELECT * FROM tbl ORDER BY COLUMNS('col2') DESC, COLUMNS('col3') ASC;

SELECT * FROM tbl ORDER BY COLUMNS(x -> x[-1] IN ('2', '3'));

SELECT * FROM tbl UNION SELECT * FROM tbl ORDER BY COLUMNS('col2|col3') DESC;

SELECT * FROM tbl ORDER BY COLUMNS('xxxx');

PRAGMA enable_verification;

CREATE OR REPLACE TABLE my_table AS SELECT 'test1' AS column1, 1 AS column2, 'quack' AS column3 UNION ALL SELECT 'test2' AS column1, 2 AS column2, 'quacks' AS column3 UNION ALL SELECT 'test3' AS column1, 3 AS column2, 'quacking' AS column3;

PREPARE v1 as
select
COLUMNS(?)
from my_table;

EXECUTE v1('col.*1');

EXECUTE v1('col.*2');

EXECUTE v1('col.*3');

EXECUTE v1(['column1', 'column2']);

EXECUTE v1(NULL::VARCHAR);

EXECUTE v1(42);

PRAGMA enable_verification;

SELECT COALESCE(*COLUMNS(*)) FROM (SELECT NULL, 2, 3) AS t(a, b, c);

SELECT column_name FROM (DESCRIBE SELECT COALESCE(*COLUMNS(*)) FROM (SELECT NULL, 2, 3) AS t(a, b, c));

SELECT column_name FROM (DESCRIBE SELECT COALESCE(*COLUMNS(*)) AS a FROM (SELECT NULL, 2, 3) AS t(a, b, c));

CREATE TABLE contains_test AS SELECT '123abc234' AS a, 4 AS b, 'abc' AS c;

CREATE TABLE contains_test AS SELECT '123abc234' AS a, 4 AS b, 'abc' AS c;

SELECT COLUMNS('[a|c]') FROM contains_test;

SELECT *COLUMNS('[a|c]') FROM contains_test;

CREATE TABLE sales AS SELECT * FROM (VALUES (150, CAST('2017/06/12' AS DATE), 3), (125, CAST('2017/08/29' AS DATE), 2), (175, CAST('2017/06/12' AS DATE), 4)) AS t(amount, date, priority);

SELECT FIRST(amount ORDER BY date ASC, priority DESC) FROM sales;

SELECT FIRST(amount ORDER BY *COLUMNS('date|priority') ASC) FROM sales;

SELECT COALESCE(*COLUMNS(c -> c IN ('a', 'c'))) FROM (SELECT NULL, 2, 3) AS t(a, b, c);

SELECT 2 IN (*COLUMNS(*)) FROM (SELECT 1, 2, 3) AS t(a, b, c);

SELECT * FROM (VALUES (1, 2, 3), (2, 3, 0), (0, 0, 1)) AS tbl(a, b, c) WHERE 1 IN (*COLUMNS(*));

CREATE TABLE data AS (SELECT * FROM (VALUES (1, 'Alice'), (2, 'Bob'), (3, 'Alice'), (4, 'Carol')) AS t(id, name));

SELECT {'_0': *COLUMNS(*)} FROM data;

SELECT COLUMNS(*COLUMNS(*)) FROM (VALUES ('test'));

SELECT *COLUMNS(COLUMNS(*)) FROM (VALUES ('test'));

SELECT COLUMNS(*), {'_0': COLUMNS(['id'])} FROM data;

SELECT {'_0': {'_0': *COLUMNS(['id']), '_1': {'_0': *COLUMNS(['name'])}}} FROM data;

SELECT {'b': {'_0': *COLUMNS(['id'])}, 'a': {'_0': *COLUMNS(['id'])}} FROM data;

SELECT {'_0': *COLUMNS('id')} AS a, {'_0': *COLUMNS('name')} FROM data;

SELECT CONCAT(*COLUMNS(*), *COLUMNS(*)) FROM data;

SELECT COLUMNS(col -> *COLUMNS('id')) FROM data;

SELECT *COLUMNS(col -> *COLUMNS(*)) FROM data;

WITH integers AS (SELECT * FROM (VALUES (42, 31), (85, 76)) AS t(a, b)) SELECT *COLUMNS(*) + 42 FROM integers;

WITH integers AS (SELECT * FROM (VALUES (42, 31), (85, 76)) AS t(a, b)) SELECT *COLUMNS('a') + 42 FROM integers;

WITH integers AS (SELECT * FROM (VALUES (21, 42), (1337, 7331)) AS t(a, b)) SELECT [(UNPACK(a + COLUMNS(['a', 'b'])))] FROM integers;

SELECT [UNPACK([UNPACK(COLUMNS(*)), a + b])] FROM (SELECT 42 AS a, 21 AS b);

SELECT [UNPACK(CAST(COLUMNS(*) AS TEXT))] FROM (SELECT CAST(21 AS INT) AS a, CAST(TRUE AS BOOLEAN) AS b, CAST(0.1234 AS DOUBLE) AS c);

SELECT [UNPACK([COLUMNS(['a', 'b']), COLUMNS(['c'])])] FROM (SELECT 21 AS a, 42 AS b, 1337 AS c);

SELECT [UNPACK(['test'])] FROM (SELECT 21 AS a, 42 AS b, 1337 AS c);

SELECT [UNPACK([COLUMNS(CAST([] AS TEXT[]))])] FROM (SELECT 21 AS a, 42 AS b, 1337 AS c);

SELECT [UNPACK([COLUMNS(['d'])])] FROM (SELECT 21 AS a, 42 AS b, 1337 AS c);

PRAGMA enable_verification;

CREATE TABLE tbl (col1 INT, col2 INT, col3 INT);

INSERT INTO tbl VALUES (1, 200, 10), (2, 100, 20), (3, 200, 0);

SELECT * FROM tbl WHERE COLUMNS(*) >= 2 ORDER BY ALL;

SELECT * FROM tbl WHERE COLUMNS(['col1', 'col2']) >= 2 ORDER BY ALL;

SELECT * FROM tbl WHERE COLUMNS(['col1', 'col2']) >= 2 AND NOT COLUMNS(*) IS NULL ORDER BY ALL;

SELECT * FROM tbl WHERE COLUMNS(['col1', 'col2']) >= 2 AND COLUMNS(['col1', 'col3']) < 10 ORDER BY ALL;

SELECT * FROM tbl WHERE COLUMNS(['nonexistent']) >= 2 ORDER BY ALL;

SELECT * FROM tbl WHERE COLUMNS(* EXCLUDE (col1, col2, col3)) >= 2 ORDER BY ALL;

SELECT * FROM tbl WHERE * ORDER BY ALL;

SELECT * FROM tbl WHERE * >= 2 ORDER BY ALL;

;

SELECT ;

PRAGMA enable_verification;

SELECT 2 * 3 + 1;

SELECT 1 + 2 * 3;

SELECT POWER(2, 2) + 1;

SELECT POWER(2, 2) + 1;

SELECT 1 + POWER(2, 2);

SELECT 1 + POWER(2, 2);

SELECT POWER(2, 4) / 2;

SELECT POWER(2, (4 / 2));

SELECT 16 / POWER(2, 4);

SELECT POWER((16 / 2), 4);

SELECT POWER(POWER(2, 3), 2);

SELECT POWER(POWER(2, 3), 2);

SELECT POWER(POWER(2, 3), 2);

PRAGMA enable_verification;

SELECT "user" FROM (VALUES ('hello world')) AS t("user");

SELECT "user";

SELECT "UsEr";

SELECT "user" FROM (VALUES (42)) AS "user"(x);

SELECT "user" FROM (VALUES (42)) AS "user"(x);

SELECT "user" FROM (VALUES (42)) AS "user"(x);

SELECT useRrr;

SELECT 1 AS one, MAX(CAST('1000-05-01 00:00:00' AS TIMESTAMP)) AS mt GROUP BY one HAVING MAX(CAST('1000-05-01 00:00:00' AS TIMESTAMP)) <= CURRENT_TIMESTAMP;

SELECT a AS "b", "b" + 1 FROM (VALUES (84), (42)) AS t(a) ORDER BY ALL;

SELECT a AS "CURRENT_TIMESTAMP" FROM (VALUES (84), (42)) AS t(a) ORDER BY "CURRENT_TIMESTAMP" + 1;

SELECT a AS "localtime" FROM (VALUES ('2018-01-01'), ('2022-01-01')) AS t(a) WHERE "localtime" >= '2020-01-01';

PRAGMA enable_verification;

SELECT 42;

SELECT 42, 84;

SELECT DISTINCT 42, 84;

VALUES (42);

VALUES (42);

SELECT * FROM (VALUES (42));

CREATE TABLE integers (i INT, j INT);

INSERT INTO integers VALUES (42, 84);

INSERT INTO integers VALUES (42, 84);

SELECT i, SUM(j) FROM integers GROUP BY i;

UPDATE integers SET i = 100;

SELECT i FROM integers;

SELECT [1];

SELECT [1];

SELECT {'a': 42, 'b': 84};

PRAGMA enable_verification;

CREATE TABLE people (Name TEXT, STATE TEXT, Country TEXT);

DESCRIBE people;

PRAGMA enable_verification;

SELECT * FROM (VALUES (42)) AS t;

SELECT * FROM (VALUES (42)) AS t, (VALUES (84)) AS x;

SELECT * FROM pg_attribute;

SELECT * FROM pg_catalog.pg_attribute;

CREATE TABLE integers (i INT);

SELECT relname, attname, attnum FROM pg_attribute JOIN pg_class ON (pg_attribute.attrelid = pg_class.oid) WHERE relname = 'integers' AND attnum >= 0;

SELECT * FROM pg_constraint;

CREATE TABLE a (id INT, PRIMARY KEY (id));

CREATE TABLE b (id INT, foreign_a INT, FOREIGN KEY (foreign_a) REFERENCES a);

INSERT INTO a (id) VALUES (0);

INSERT INTO b (id, foreign_a) VALUES (0, 0);

SELECT * EXCLUDE (OID, CONRELID, connamespace) FROM pg_catalog.pg_constraint;

SELECT * FROM pg_database;

SELECT * FROM pg_depend ORDER BY ALL;

SELECT * FROM pg_enum;

CREATE TABLE integers (i INT, j INT, k INT);

CREATE INDEX i_index ON integers((j + 1), k);

SELECT * FROM pg_index;

SELECT * FROM pg_catalog.pg_index;

SELECT * FROM pg_indexes;

SELECT COUNT(*) FROM pg_namespace WHERE nspname = 'myschema';

CREATE SCHEMA myschema;

SELECT COUNT(*) FROM pg_namespace WHERE nspname = 'myschema';

SELECT * FROM pg_namespace;

SELECT * FROM pg_catalog.pg_namespace;

SELECT * FROM pg_namespace WHERE nspname = 'myschema';

CREATE SCHEMA bla;

CREATE SCHEMA test;

CREATE SCHEMA myschema33;

PREPARE p1 as select 42;

CREATE TABLE tbl (a TEXT);

PREPARE p2 as insert into tbl values ('test');

PREPARE p3 as select 21, $1, $2;

PREPARE p4 as select $name, $other_name;

SELECT * FROM pg_prepared_statements ORDER BY name;

PRAGMA enable_verification;

SELECT * FROM pg_proc;

CREATE MACRO add_default1(a := 3, b := 5) AS a + b;

CREATE MACRO add_default2(a, b := 5) AS a + b;

SELECT * FROM pg_proc;

SELECT DISTINCT proname FROM pg_proc WHERE proname = 'sqrt';

SELECT proisagg, prorettype, proargtypes, proargnames, pronargs, provolatile FROM pg_proc WHERE proname = 'corr';

SELECT provariadic, prorettype, proargtypes, proargnames FROM pg_proc WHERE proname = 'printf';

SELECT prokind, provolatile FROM pg_proc WHERE proname = 'random';

SELECT LENGTH(prosqlbody) > 0 FROM pg_proc WHERE proname = 'add_default1';

CREATE SEQUENCE seq;

SELECT * FROM pg_sequence;

SELECT * FROM pg_catalog.pg_sequence;

SELECT seqstart, seqincrement, seqmax, seqmin, seqcycle FROM pg_sequence;

CREATE SEQUENCE seq;

SELECT * FROM pg_sequences;

SELECT * FROM pg_catalog.pg_sequences;

SELECT sequencename, min_value, max_value, start_value, cycle FROM pg_sequences;

SET default_null_order = 'nulls_first';

SELECT * FROM pg_settings;

SELECT name, setting FROM pg_settings WHERE name = 'default_null_order';

SET default_null_order = 'nulls_last';

SELECT name, setting FROM pg_settings WHERE name = 'default_null_order';

SELECT * FROM pg_tablespace;

CREATE TYPE greeting AS ENUM('hi', 'bonjour', 'konnichiwa', 'howdy');

SELECT * FROM pg_type;

SELECT * FROM pg_catalog.pg_type;

SELECT oid FROM pg_type WHERE typname = 'int8' AND NOT oid IS NULL;

SELECT oid FROM pg_type WHERE typname = 'bytea' AND NOT oid IS NULL;

SELECT oid FROM pg_type WHERE typname = 'bit' AND NOT oid IS NULL;

SELECT oid FROM pg_type WHERE typname = 'bool' AND NOT oid IS NULL;

SELECT oid FROM pg_type WHERE typname = 'varchar' AND NOT oid IS NULL;

SELECT oid FROM pg_type WHERE typname = 'date' AND NOT oid IS NULL;

SELECT oid FROM pg_type WHERE typname = 'float8' AND NOT oid IS NULL;

SELECT oid FROM pg_type WHERE typname = 'float4' AND NOT oid IS NULL;

SELECT oid FROM pg_type WHERE typname = 'uuid' AND NOT oid IS NULL;

SELECT oid FROM pg_type WHERE typname = 'int4' AND NOT oid IS NULL;

SELECT oid FROM pg_type WHERE typname = 'int2' AND NOT oid IS NULL;

SELECT oid FROM pg_type WHERE typname = 'interval' AND NOT oid IS NULL;

SELECT oid FROM pg_type WHERE typname = 'time' AND NOT oid IS NULL;

SELECT oid FROM pg_type WHERE typname = 'timestamp' AND NOT oid IS NULL;

SELECT oid FROM pg_type WHERE typname = 'timestamptz' AND NOT oid IS NULL;

SELECT oid FROM pg_type WHERE typname = 'timetz' AND NOT oid IS NULL;

SELECT COUNT(*) FROM pg_type WHERE typname = 'greeting';

SELECT oid FROM pg_type WHERE typname = 'numeric' AND NOT oid IS NULL;

SELECT COUNT(*) FROM pg_type WHERE typname = 'enum' AND NOT oid IS NULL;

SELECT pg_catalog.format_pg_type('DECIMAL', 'test');

SELECT pg_catalog.format_pg_type('decimal', 'test');

CREATE VIEW v1 AS SELECT 42;

SELECT * FROM pg_views;

SELECT * FROM pg_catalog.pg_views;

SELECT viewname, viewowner FROM pg_views WHERE viewname = 'v1';

CREATE TYPE greeting AS ENUM('hi', 'bonjour', 'konnichiwa', 'howdy');

CREATE TABLE integral_values (j SMALLINT, k INT, l BIGINT, i REAL, z DOUBLE, m DECIMAL(4, 1), n DECIMAL(9, 2), o DECIMAL(18, 4), p DECIMAL(37, 2), q TEXT, r BLOB, s DATE, t TIME, u TIMESTAMP, v DATE[], w greeting);

SELECT DISTINCT nspname FROM pg_namespace AS " " WHERE LOWER(nspname) = 'main';

SELECT relname FROM pg_class AS c JOIN pg_namespace AS n ON n.oid = c.relnamespace WHERE pg_catalog.pg_table_is_visible(c.oid) AND relname = 'integral_values';

SELECT relname FROM pg_class AS c JOIN pg_namespace AS n ON n.oid = c.relnamespace WHERE pg_catalog.pg_table_is_visible(c.oid) AND relname = 'f';

SELECT relname FROM pg_class AS c JOIN pg_namespace AS n ON n.oid = c.relnamespace WHERE n.nspname = 'main' AND relname = 'integral_values';

SELECT relname FROM pg_class AS c JOIN pg_namespace AS n ON n.oid = c.relnamespace WHERE n.nspname = 'main' AND relname = 'f';

CREATE SEQUENCE seq;

SELECT relname FROM pg_class AS c JOIN pg_namespace AS n ON n.oid = c.relnamespace WHERE relkind = 'S' AND n.nspname = 'main' AND relname = 'seq';

SELECT relname FROM pg_class AS c JOIN pg_namespace AS n ON n.oid = c.relnamespace WHERE relkind = 'S' AND n.nspname = 'main' AND relname = 'f';

SELECT EXISTS(SELECT * FROM pg_catalog.pg_type AS t, pg_catalog.pg_namespace AS n WHERE t.typnamespace = n.oid AND t.typname = 'integer' AND n.nspname = 'main');

SELECT EXISTS(SELECT * FROM pg_catalog.pg_type AS t, pg_catalog.pg_namespace AS n WHERE t.typnamespace = n.oid AND t.typname = 'int4' AND n.nspname = 'main');

SELECT COUNT(c.oid) FROM pg_catalog.pg_class AS c LEFT JOIN pg_catalog.pg_namespace AS n ON n.oid = c.relnamespace WHERE (pg_catalog.pg_table_is_visible(c.oid)) AND c.relname = 'integral_values' AND c.relkind IN ('r', 'v', 'm', 'f', 'p');

SELECT nspname FROM pg_namespace WHERE NOT nspname LIKE 'pg_%' ORDER BY nspname;

SELECT c.relname FROM pg_class AS c JOIN pg_namespace AS n ON n.oid = c.relnamespace WHERE n.nspname = 'main' AND c.relkind IN ('r', 'p');

SELECT c.relname FROM pg_class AS c JOIN pg_namespace AS n ON n.oid = c.relnamespace WHERE n.nspname = 'main' AND c.relkind = 'f';

CREATE SCHEMA myschema;

CREATE VIEW myschema.v1 AS SELECT 42;

SELECT c.relname FROM pg_class AS c JOIN pg_namespace AS n ON n.oid = c.relnamespace WHERE n.nspname = 'myschema' AND c.relkind IN ('v', 'm');

SELECT relname FROM pg_class AS c JOIN pg_namespace AS n ON n.oid = c.relnamespace WHERE relkind = 'S' AND n.nspname = 'main';

SELECT STR_SPLIT_REGEX(PG_GET_VIEWDEF(c.oid), '\n')[1] AS view_def FROM pg_class AS c JOIN pg_namespace AS n ON n.oid = c.relnamespace WHERE n.nspname = 'myschema' AND c.relname = 'v1' AND c.relkind IN ('v', 'm');

SELECT a.attname, pg_catalog.format_type(a.atttypid, a.atttypmod), (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid) FROM pg_catalog.pg_attrdef AS d WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef) AS "DEFAULT", a.attnotnull FROM pg_catalog.pg_attribute AS a LEFT JOIN pg_catalog.pg_description AS pgd ON (pgd.objoid = a.attrelid AND pgd.objsubid = a.attnum) WHERE a.attrelid = (SELECT MIN(oid) FROM pg_class WHERE relname = 'integral_values') AND a.attnum > 0 AND NOT a.attisdropped ORDER BY a.attnum;

SELECT a.attname FROM pg_class AS t JOIN pg_index AS ix ON t.oid = ix.indrelid JOIN pg_attribute AS a ON t.oid = a.attrelid WHERE t.oid = (SELECT MIN(table_oid) FROM duckdb_tables) AND ix.indisprimary = 't' ORDER BY a.attnum;

SELECT a.attname FROM pg_attribute AS a JOIN (SELECT UNNEST(ix.indkey) AS attnum, GENERATE_SUBSCRIPTS(ix.indkey, 1) AS ord FROM pg_index AS ix WHERE ix.indrelid = (SELECT MIN(table_oid) FROM duckdb_tables) AND ix.indisprimary) AS k ON a.attnum = k.attnum WHERE a.attrelid = (SELECT MIN(table_oid) FROM duckdb_tables) ORDER BY k.ord;

SELECT r.conname, pg_catalog.pg_get_constraintdef(r.oid, TRUE) AS condef, n.nspname AS conschema FROM pg_catalog.pg_constraint AS r, pg_namespace AS n, pg_class AS c WHERE r.conrelid = (SELECT MIN(table_oid) FROM duckdb_tables) AND r.contype = 'f' AND c.oid = confrelid AND n.oid = c.relnamespace ORDER BY 1;

SELECT cons.conname AS name, cons.conkey AS key, a.attnum AS col_num, a.attname AS col_name FROM pg_catalog.pg_constraint AS cons JOIN pg_attribute AS a ON cons.conrelid = a.attrelid AND a.attnum = ANY(cons.conkey) WHERE cons.conrelid = (SELECT MIN(table_oid) FROM duckdb_tables) AND cons.contype = 'u';

SELECT cons.conname AS name, cons.conkey AS key, a.attnum AS col_num, a.attname AS col_name FROM pg_catalog.pg_constraint AS cons JOIN pg_attribute AS a ON cons.conrelid = a.attrelid AND a.attnum = ANY(cons.conkey) WHERE cons.conrelid = (SELECT MIN(table_oid) FROM duckdb_tables) AND cons.contype = 'u';

SELECT cons.conname AS name, cons.conkey AS key, a.attnum AS col_num, a.attname AS col_name FROM pg_catalog.pg_constraint AS cons JOIN pg_attribute AS a ON cons.conrelid = a.attrelid AND a.attnum = ANY(cons.conkey) WHERE cons.conrelid = (SELECT MIN(table_oid) FROM duckdb_tables) AND cons.contype = 'u';

SELECT pgd.description AS table_comment FROM pg_catalog.pg_description AS pgd WHERE pgd.objsubid = 0 AND pgd.objoid = (SELECT MIN(table_oid) FROM duckdb_tables);

CREATE TABLE check_constraint_tbl (i INT CHECK (i < 42));

SELECT cons.conname AS name, PG_GET_CONSTRAINTDEF(cons.oid) AS src FROM pg_catalog.pg_constraint AS cons WHERE cons.contype = 'c';

SELECT t.typname AS "name", pg_catalog.pg_type_is_visible(t.oid) AS "visible", n.nspname AS "schema", e.enumlabel AS "label" FROM pg_catalog.pg_type AS t LEFT JOIN pg_catalog.pg_namespace AS n ON n.oid = t.typnamespace LEFT JOIN pg_catalog.pg_enum AS e ON t.oid = e.enumtypid WHERE t.typtype = 'e' AND NOT e.enumlabel IS NULL ORDER BY e.enumsortorder;

SELECT CURRENT_USER();

SELECT "CURRENT_CATALOG";

SELECT CURRENT_DATABASE();

SELECT pg_catalog.CURRENT_DATABASE();

SELECT "USER";

SELECT "SESSION_USER";

SELECT VERSION();

SELECT CURRENT_QUERY();

SELECT pg_catalog.current_query();

SELECT 1, 2, 3, CURRENT_QUERY();

SELECT CURRENT_SCHEMA();

SELECT CURRENT_SCHEMAS(TRUE);

SELECT CURRENT_SCHEMAS(FALSE);

SELECT INET_CLIENT_ADDR(), INET_CLIENT_PORT(), INET_SERVER_ADDR(), INET_SERVER_PORT();

SELECT PG_POSTMASTER_START_TIME();

SELECT PG_IS_OTHER_TEMP_SCHEMA(33);

SELECT COL_DESCRIPTION(0, 0), OBJ_DESCRIPTION(0, 'duckdb'), SHOBJ_DESCRIPTION(0, 'duckdb');

SELECT TXID_CURRENT();

SELECT PG_TYPEOF(1);

PRAGMA enable_verification;

CREATE TABLE Cities (Country TEXT, Name TEXT, Year INT, Population INT);

INSERT INTO Cities VALUES ('NL', 'Amsterdam', 2000, 1005);

INSERT INTO Cities VALUES ('NL', 'Amsterdam', 2010, 1065);

INSERT INTO Cities VALUES ('NL', 'Amsterdam', 2020, 1158);

INSERT INTO Cities VALUES ('US', 'Seattle', 2000, 564);

INSERT INTO Cities VALUES ('US', 'Seattle', 2010, 608);

INSERT INTO Cities VALUES ('US', 'Seattle', 2020, 738);

INSERT INTO Cities VALUES ('US', 'New York City', 2000, 8015);

INSERT INTO Cities VALUES ('US', 'New York City', 2010, 8175);

INSERT INTO Cities VALUES ('US', 'New York City', 2020, 8772);

UNPIVOT Cities;

UNPIVOT Cities;

UNPIVOT Cities;

PIVOT Cities ON Year GROUP BY Country;

PIVOT (SELECT Country, Year FROM Cities) ON Year;

PRAGMA enable_verification;

CREATE TABLE p (col1 TIMESTAMP, col2 INT);

INSERT INTO p VALUES ('2024-12-04 09:30:01', 100), ('2024-12-04 09:30:02', 100), ('2024-12-04 09:30:03', 100), ('2024-12-04 09:30:04', 100), ('2024-12-04 09:30:05', 100), ('2024-12-04 09:30:06', 100), ('2024-12-04 09:30:07', 100), ('2024-12-04 09:30:08', 100);

INSERT INTO p VALUES ('2024-12-04 09:30:01', 100), ('2024-12-04 09:30:02', 100), ('2024-12-04 09:30:03', 100), ('2024-12-04 09:30:04', 100), ('2024-12-04 09:30:05', 100), ('2024-12-04 09:30:06', 100), ('2024-12-04 09:30:07', 100), ('2024-12-04 09:30:08', 100);

PRAGMA enable_verification;

CREATE TABLE cpb_tbl AS WITH CPB(CPDH, NF, JG) AS (SELECT 'C1', 2022, 10 UNION ALL SELECT 'C1', 2018, 20 UNION ALL SELECT 'C1', 2017, 0 UNION ALL SELECT 'C2', 2022, 10 UNION ALL SELECT 'C2', 2010, 30 UNION ALL SELECT 'C3', 2010, 80) SELECT * FROM CPB;

PIVOT cpb_tbl ON nf USING SUM(jg) GROUP BY cpdh;

PIVOT cpb_tbl ON nf USING SUM(jg) GROUP BY cpdh;

PIVOT cpb_tbl ON nf USING SUM(jg) GROUP BY cpdh;

WITH CPB(CPDH, NF, JG) AS (SELECT 'C1', 2022, 10 UNION ALL SELECT 'C1', 2018, 20 UNION ALL SELECT 'C1', 2017, 0 UNION ALL SELECT 'C2', 2022, 10 UNION ALL SELECT 'C2', 2010, 30 UNION ALL SELECT 'C3', 2010, 80) SELECT * FROM (PIVOT CPB ON nf USING SUM(jg) GROUP BY cpdh);

WITH CPB(CPDH, NF, JG) AS (SELECT 'C1', 2022, 10 UNION ALL SELECT 'C1', 2018, 20 UNION ALL SELECT 'C1', 2017, 0 UNION ALL SELECT 'C2', 2022, 10 UNION ALL SELECT 'C2', 2010, 30 UNION ALL SELECT 'C3', 2010, 80) SELECT * FROM (PIVOT CPB ON nf USING SUM(jg) GROUP BY cpdh);

WITH CPB(CPDH, NF, JG) AS (SELECT 'C1', 2022, 10 UNION ALL SELECT 'C1', 2018, 20 UNION ALL SELECT 'C1', 2017, 0 UNION ALL SELECT 'C2', 2022, 10 UNION ALL SELECT 'C2', 2010, 30 UNION ALL SELECT 'C3', 2010, 80) SELECT * FROM (PIVOT CPB ON nf USING SUM(jg) GROUP BY cpdh);

WITH CPB(CPDH, NF, JG) AS (SELECT 'C1', 2022, 10 UNION ALL SELECT 'C1', 2018, 20 UNION ALL SELECT 'C1', 2017, 0 UNION ALL SELECT 'C2', 2022, 10 UNION ALL SELECT 'C2', 2010, 30 UNION ALL SELECT 'C3', 2010, 80) SELECT * FROM (PIVOT CPB ON nf USING SUM(jg) GROUP BY cpdh);

WITH CPB(CPDH, NF, JG) AS (SELECT 'C1', 2022, 10 UNION ALL SELECT 'C1', 2018, 20 UNION ALL SELECT 'C1', 2017, 0 UNION ALL SELECT 'C2', 2022, 10 UNION ALL SELECT 'C2', 2010, 30 UNION ALL SELECT 'C3', 2010, 80) SELECT * FROM (PIVOT CPB ON nf USING SUM(jg) GROUP BY cpdh);

WITH CPB(CPDH, NF, JG) AS MATERIALIZED (SELECT 'C1', 2022, 10 UNION ALL SELECT 'C1', 2018, 20 UNION ALL SELECT 'C1', 2017, 0 UNION ALL SELECT 'C2', 2022, 10 UNION ALL SELECT 'C2', 2010, 30 UNION ALL SELECT 'C3', 2010, 80) SELECT * FROM (PIVOT CPB ON nf USING SUM(jg) GROUP BY cpdh);

WITH CPB(CPDH, NF, JG) AS MATERIALIZED (SELECT 'C1', 2022, 10 UNION ALL SELECT 'C1', 2018, 20 UNION ALL SELECT 'C1', 2017, 0 UNION ALL SELECT 'C2', 2022, 10 UNION ALL SELECT 'C2', 2010, 30 UNION ALL SELECT 'C3', 2010, 80) SELECT * FROM (PIVOT CPB ON nf USING SUM(jg) GROUP BY cpdh);

WITH CPB(CPDH, NF, JG) AS MATERIALIZED (SELECT 'C1', 2022, 10 UNION ALL SELECT 'C1', 2018, 20 UNION ALL SELECT 'C1', 2017, 0 UNION ALL SELECT 'C2', 2022, 10 UNION ALL SELECT 'C2', 2010, 30 UNION ALL SELECT 'C3', 2010, 80) SELECT * FROM (PIVOT CPB ON nf USING SUM(jg) GROUP BY cpdh);

PRAGMA enable_verification;

CREATE TABLE Produce AS SELECT 'Kale' AS product, 51 AS sales, 'Q1' AS quarter, 2020 AS year UNION ALL SELECT 'Kale', 23, 'Q2', 2020 UNION ALL SELECT 'Kale', 45, 'Q3', 2020 UNION ALL SELECT 'Kale', 3, 'Q4', 2020 UNION ALL SELECT 'Kale', 70, 'Q1', 2021 UNION ALL SELECT 'Kale', 85, 'Q2', 2021 UNION ALL SELECT 'Apple', 77, 'Q1', 2020 UNION ALL SELECT 'Apple', 0, 'Q2', 2020 UNION ALL SELECT 'Apple', 1, 'Q1', 2021;

SELECT * FROM Produce PIVOT(SUM(sales) FOR quarter IN ('Q1', 'Q2', 'Q3', 'Q4')) ORDER BY ALL;

SELECT * FROM (SELECT product, sales, quarter FROM Produce) PIVOT(SUM(sales) FOR quarter IN ('Q1', 'Q2', 'Q3', 'Q4')) ORDER BY ALL;

SELECT * FROM (SELECT product, sales, quarter FROM Produce) PIVOT(SUM(sales) FOR quarter IN ('Q1', 'Q2', 'Q3')) ORDER BY ALL;

SELECT * FROM (SELECT sales, quarter FROM Produce) PIVOT(SUM(sales) FOR quarter IN ('Q1', 'Q2', 'Q3')) ORDER BY ALL;

SELECT * FROM (SELECT product, sales, quarter FROM Produce) PIVOT(SUM(sales) AS total_sales, COUNT(*) AS num_records FOR quarter IN ('Q1', 'Q2')) ORDER BY ALL;

CREATE OR REPLACE TABLE Produce AS SELECT 'Kale' AS product, 51 AS Q1, 23 AS Q2, 45 AS Q3, 3 AS Q4 UNION ALL SELECT 'Apple', 77, 0, 25, 2;

SELECT * FROM Produce UNPIVOT(sales FOR quarter IN (Q1, Q2, Q3, Q4)) ORDER BY ALL;

SELECT product, first_half_sales, second_half_sales, semesters FROM Produce UNPIVOT((first_half_sales, second_half_sales) FOR semesters IN ((Q1, Q2) AS semester_1, (Q3, Q4) AS semester_2));

PRAGMA enable_verification;

CREATE TABLE Cities (Name TEXT, id INT);
INSERT INTO Cities VALUES ('Test', 1);
INSERT INTO Cities VALUES ('test', 2);

SET pivot_filter_threshold = 1;

SELECT * FROM Cities PIVOT(ARRAY_AGG(id) FOR name IN ('test', 'Test'));

SELECT * FROM Cities PIVOT(ARRAY_AGG(id), SUM(id) FOR name IN ('test', 'Test'));

PRAGMA enable_verification;

CREATE TEMPORARY VIEW sales (year, quarter, region, sales) AS VALUES (2018, 1, 'east', 100), (2018, 2, 'east', 20), (2018, 3, 'east', 40), (2018, 4, 'east', 40), (2019, 1, 'east', 120), (2019, 2, 'east', 110), (2019, 3, 'east', 80), (2019, 4, 'east', 60), (2018, 1, 'west', 105), (2018, 2, 'west', 25), (2018, 3, 'west', 45), (2018, 4, 'west', 45), (2019, 1, 'west', 125), (2019, 2, 'west', 115), (2019, 3, 'west', 85), (2019, 4, 'west', 65);

SELECT year, region, q1, q2, q3, q4 FROM sales PIVOT(SUM(sales) FOR quarter IN (1 AS q1, 2 AS q2, 3 AS q3, 4 AS q4));

SELECT year, q1_east, q1_west, q2_east, q2_west, q3_east, q3_west, q4_east, q4_west FROM sales PIVOT(SUM(sales) FOR (quarter, region) IN ((1, 'east') AS q1_east, (1, 'west') AS q1_west, (2, 'east') AS q2_east, (2, 'west') AS q2_west, (3, 'east') AS q3_east, (3, 'west') AS q3_west, (4, 'east') AS q4_east, (4, 'west') AS q4_west));

SELECT year, q1_east, q1_west, q2_east, q2_west, q3_east, q3_west, q4_east, q4_west FROM sales PIVOT(SUM(sales) FOR (quarter, region, too_many_names) IN ((1, 'east') AS q1_east, (1, 'west') AS q1_west, (2, 'east') AS q2_east, (2, 'west') AS q2_west, (3, 'east') AS q3_east, (3, 'west') AS q3_west, (4, 'east') AS q4_east, (4, 'west') AS q4_west));

SELECT year, q1_east, q1_west, q2_east, q2_west, q3_east, q3_west, q4_east, q4_west FROM sales PIVOT(SUM(sales) FOR (quarter, region) IN ((1, 'east', 'west') AS q1_east, (1, 'west') AS q1_west, (2, 'east') AS q2_east, (2, 'west') AS q2_west, (3, 'east') AS q3_east, (3, 'west') AS q3_west, (4, 'east') AS q4_east, (4, 'west') AS q4_west));

SELECT * FROM sales PIVOT(SUM(sales) FOR (quarter, region) IN ((1, 'east') AS q1_east, (1, 'east') AS q1_east_2));

SELECT year, q1, q2, q3, q4 FROM (SELECT year, quarter, sales FROM sales) AS s PIVOT(SUM(sales) FOR quarter IN (1 AS q1, 2 AS q2, 3 AS q3, 4 AS q4));

SELECT year, q1_total, q1_avg, q2_total, q2_avg, q3_total, q3_avg, q4_total, q4_avg FROM (SELECT year, quarter, sales FROM sales) AS s PIVOT(SUM(sales) AS total, AVG(sales) AS avg FOR quarter IN (1 AS q1, 2 AS q2, 3 AS q3, 4 AS q4));

SELECT * FROM (SELECT year, quarter, sales FROM sales) AS s PIVOT(SUM(sales), AVG(sales) FOR quarter IN (1 AS q1, 2 AS q2, 3 AS q3, 4 AS q4));

CREATE OR REPLACE TEMPORARY VIEW sales (location, year, q1, q2, q3, q4) AS VALUES ('Toronto', 2020, 100, 80, 70, 150), ('San Francisco', 2020, NULL, 20, 50, 60), ('Toronto', 2021, 110, 90, 80, 170), ('San Francisco', 2021, 70, 120, 85, 105);

SELECT * FROM sales UNPIVOT INCLUDE NULLS (sales FOR quarter IN (q1 AS "Jan-Mar", q2 AS "Apr-Jun", q3 AS "Jul-Sep", q4 AS "Oct-Dec"));

CREATE OR REPLACE TEMPORARY VIEW oncall (year, week, area, name1, email1, phone1, name2, email2, phone2) AS VALUES (2022, 1, 'frontend', 'Freddy', 'fred@alwaysup.org', 15551234567, 'Fanny', 'fanny@lwaysup.org', 15552345678), (2022, 1, 'backend', 'Boris', 'boris@alwaysup.org', 15553456789, 'Boomer', 'boomer@lwaysup.org', 15554567890), (2022, 2, 'frontend', 'Franky', 'frank@lwaysup.org', 15555678901, 'Fin', 'fin@alwaysup.org', 15556789012), (2022, 2, 'backend', 'Bonny', 'bonny@alwaysup.org', 15557890123, 'Bea', 'bea@alwaysup.org', 15558901234);

SELECT * FROM oncall UNPIVOT((name, email, phone) FOR precedence IN ((name1, email1, phone1) AS "primary", (name2, email2, phone2) AS secondary));

PRAGMA enable_verification;

CREATE TABLE Cities (Country TEXT, Name TEXT, Year INT, Population INT);

PIVOT Cities ON Country USING SUM(Population);

PIVOT Cities ON Country, Name USING SUM(Population);

PIVOT Cities ON Country IN ('xx') USING SUM(Population);

PIVOT Cities ON (Country, Name) IN ('xx') USING SUM(Population);

PIVOT Cities ON Country IN ('xx', 'yy') USING SUM(Population);

PRAGMA enable_verification;

CREATE OR REPLACE TABLE monthly_sales (empid INT, amount INT, month TEXT);

INSERT INTO monthly_sales VALUES (1, 10000, 'JAN'), (1, 400, 'JAN'), (2, 4500, 'JAN'), (2, 35000, 'JAN'), (1, 5000, 'FEB'), (1, 3000, 'FEB'), (2, 200, 'FEB'), (2, 90500, 'FEB'), (1, 6000, 'MAR'), (1, 5000, 'MAR'), (2, 2500, 'MAR'), (2, 9500, 'MAR'), (1, 8000, 'APR'), (1, 10000, 'APR'), (2, 800, 'APR'), (2, 4500, 'APR');

CREATE TYPE unique_months AS ENUM (SELECT DISTINCT month FROM monthly_sales ORDER BY
CASE month WHEN 'JAN' THEN 1 WHEN 'FEB' THEN 2 WHEN 'MAR' THEN 3 ELSE 4 END);

CREATE TYPE unique_months AS ENUM (SELECT DISTINCT month FROM monthly_sales ORDER BY
CASE month WHEN 'JAN' THEN 1 WHEN 'FEB' THEN 2 WHEN 'MAR' THEN 3 ELSE 4 END);

CREATE TYPE unique_months AS ENUM (SELECT DISTINCT month FROM monthly_sales ORDER BY
CASE month WHEN 'JAN' THEN 1 WHEN 'FEB' THEN 2 WHEN 'MAR' THEN 3 ELSE 4 END);

CREATE TYPE not_an_enum AS VARCHAR;

CREATE TYPE not_an_enum AS VARCHAR;

PRAGMA enable_verification;

CREATE TABLE test (i INT, j TEXT);

PIVOT test ON j IN ('a', 'b') USING SUM(i);

SET pivot_filter_threshold = 0;

PIVOT test ON j IN ('a', 'b') USING GET_CURRENT_TIMESTAMP();

SET pivot_filter_threshold = 100;

PIVOT test ON j IN ('a', 'b') USING GET_CURRENT_TIMESTAMP();

PIVOT test ON j IN ('a', 'b') USING SUM(41) OVER ();

PIVOT test ON j IN ('a', 'b') USING SUM(SUM(41) OVER ());

PIVOT test ON j IN ('a', 'b') USING SUM(SUM(41) OVER ());

PRAGMA enable_verification;

CREATE TABLE Cities (Country TEXT, Name TEXT, Year INT, Population INT);

INSERT INTO Cities VALUES ('NL', 'Amsterdam', 2000, 1005);

INSERT INTO Cities VALUES ('NL', 'Amsterdam', 2010, 1065);

INSERT INTO Cities VALUES ('NL', 'Amsterdam', 2020, 1158);

INSERT INTO Cities VALUES ('US', 'Seattle', 2000, 564);

INSERT INTO Cities VALUES ('US', 'Seattle', 2010, 608);

INSERT INTO Cities VALUES ('US', 'Seattle', 2020, 738);

INSERT INTO Cities VALUES ('US', 'New York City', 2000, 8015);

INSERT INTO Cities VALUES ('US', 'New York City', 2010, 8175);

INSERT INTO Cities VALUES ('US', 'New York City', 2020, 8772);

SET pivot_filter_threshold=99
loop i 0 2;

PIVOT Cities ON Country, Name IN ('xx') USING SUM(Population);

PIVOT Cities ON Year USING SUM(Population);

SELECT Country, Name, "2000_total_pop", "2010_total_pop", "2020_total_pop" FROM (PIVOT Cities ON Year USING SUM(Population) AS total_pop);

PIVOT Cities ON Year USING SUM(Population);

SELECT * FROM Cities PIVOT(SUM(Population) FOR Year IN (2000, 2010, 2020));

PIVOT Cities ON Year IN (2000, 2020) USING SUM(Population);

PIVOT Cities ON Year USING SUM(Population) GROUP BY Country;

PIVOT Cities ON Year USING SUM(Population) GROUP BY Country;

SELECT * FROM (PIVOT Cities ON Year USING SUM(Population) GROUP BY Country) JOIN (PIVOT Cities ON Name USING SUM(Population) GROUP BY Country) USING (Country);

PIVOT Cities ON (Country, Name) IN ('xx') USING SUM(Population);

PIVOT (SELECT Country, Population, Year FROM Cities) ON Year USING SUM(Population) AS sum_pop, COUNT(population) AS count_pop;

PIVOT Cities ON Year USING SUM(Population) AS sum_pop, COUNT(population) AS count_pop GROUP BY Country;

PIVOT Cities ON Year USING SUM(Population), COUNT(population) GROUP BY Country;

PIVOT Cities ON Year USING SUM(Population), COUNT(population) GROUP BY Country;

PIVOT Cities ON Year USING SUM(Population), COUNT(population) GROUP BY Country;

PIVOT Cities ON Year USING SUM(Population), COUNT(population) GROUP BY Country;

PIVOT Cities ON Year USING SUM(Population), COUNT(population) GROUP BY Country;

PIVOT Cities ON Year USING SUM(Population), COUNT(population) GROUP BY Country;

SET pivot_filter_threshold = 0 AS endloop;

CREATE TABLE PivotedCities AS PIVOT Cities ON Year USING SUM(Population);

UNPIVOT PivotedCities ON 2000, 2010, 2020 INTO NAME Year VALUE Population;

SELECT * FROM PivotedCities UNPIVOT(Population FOR Year IN (2000, 2010, 2020));

UNPIVOT PivotedCities ON 2000, 2010, 2020;

UNPIVOT PivotedCities ON COLUMNS('\d+');

UNPIVOT PivotedCities ON * EXCLUDE (Country, Name);

UNPIVOT PivotedCities ON * EXCLUDE (Country, Name);

UNPIVOT PivotedCities ON * EXCLUDE (Country, Name);

UNPIVOT PivotedCities ON * EXCLUDE (Country, Name);

UNPIVOT PivotedCities ON * EXCLUDE (Country, Name);

PRAGMA enable_verification;

CREATE TABLE Cities (Country TEXT, Name TEXT, Year INT, Population INT);

INSERT INTO Cities VALUES ('NL', 'Amsterdam', 2000, 1005);

INSERT INTO Cities VALUES ('NL', 'Amsterdam', 2010, 1065);

INSERT INTO Cities VALUES ('NL', 'Amsterdam', 2020, 1158);

INSERT INTO Cities VALUES ('US', 'Seattle', 2000, 564);

INSERT INTO Cities VALUES ('US', 'Seattle', 2010, 608);

INSERT INTO Cities VALUES ('US', 'Seattle', 2020, 738);

INSERT INTO Cities VALUES ('US', 'New York City', 2000, 8015);

INSERT INTO Cities VALUES ('US', 'New York City', 2010, 8175);

INSERT INTO Cities VALUES ('US', 'New York City', 2020, 8772);

PIVOT Cities ON Country || '_' || Name USING SUM(Population) GROUP BY Year;

PIVOT Cities ON (CASE WHEN Country = 'NL' THEN NULL ELSE Country END) USING SUM(Population) GROUP BY Year;

PIVOT Cities ON Country || '_' || Name USING COALESCE(SUM(Population), 0) GROUP BY Year;

PIVOT Cities ON Country || '_' || Name USING COALESCE(SUM(Population), 0) GROUP BY Year;

PIVOT Cities ON Country || '_' || Name USING COALESCE(SUM(Population), 0) GROUP BY Year;

PIVOT Cities ON Country || '_' || Name USING COALESCE(SUM(Population), 0) GROUP BY Year;

PIVOT Cities ON Country || '_' || Name USING COALESCE(SUM(Population), 0) GROUP BY Year;

PIVOT Cities ON MIN(Country) OVER () USING SUM(Population) GROUP BY Year;

PIVOT Cities ON MIN(Country) USING SUM(Population) GROUP BY Year;

PIVOT Cities ON NULL USING SUM(Population) GROUP BY Year;

PIVOT Cities ON 'hello world' USING SUM(Population) GROUP BY Year;

PIVOT Cities ON (SELECT COUNTRY) USING SUM(Population) GROUP BY Year;

PRAGMA enable_verification;

CREATE TABLE Product (DaysToManufacture INT, StandardCost INT GENERATED ALWAYS AS (DaysToManufacture * 5));

INSERT INTO Product VALUES (0), (1), (2), (4);

SELECT 'AverageCost' AS Cost_Sorted_By_Production_Days, "0", "1", "2", "3", "4" FROM (SELECT DaysToManufacture, StandardCost FROM Product) AS SourceTable PIVOT(AVG(StandardCost) FOR DaysToManufacture IN (0, 1, 2, 3, 4)) AS PivotTable;

PRAGMA enable_verification;

CREATE TABLE Cities (Country TEXT, Name TEXT, Year INT, Population INT);

INSERT INTO Cities VALUES ('NL', 'Amsterdam', 2000, 1005);

INSERT INTO Cities VALUES ('NL', 'Amsterdam', 2010, 1065);

INSERT INTO Cities VALUES ('NL', 'Amsterdam', 2020, 1158);

INSERT INTO Cities VALUES ('US', 'Seattle', 2000, 564);

INSERT INTO Cities VALUES ('US', 'Seattle', 2010, 608);

INSERT INTO Cities VALUES ('US', 'Seattle', 2020, 738);

INSERT INTO Cities VALUES ('US', 'New York City', 2000, 8015);

INSERT INTO Cities VALUES ('US', 'New York City', 2010, 8175);

INSERT INTO Cities VALUES ('US', 'New York City', 2020, 8772);

PIVOT cities ON (Country = 'NL') USING AVG(Population) GROUP BY name;

PIVOT cities ON (Country = 'NL') IN (FALSE, TRUE) USING AVG(Population) GROUP BY name;

PRAGMA enable_verification;

CREATE TABLE Cities (Country TEXT, Name TEXT, Year INT, Population INT);

INSERT INTO Cities VALUES ('NL', 'Amsterdam', 2000, 1005);

INSERT INTO Cities VALUES ('NL', 'Amsterdam', 2010, 1065);

INSERT INTO Cities VALUES ('NL', 'Amsterdam', 2020, 1158);

INSERT INTO Cities VALUES ('US', 'Seattle', 2000, 564);

INSERT INTO Cities VALUES ('US', 'Seattle', 2010, 608);

INSERT INTO Cities VALUES ('US', 'Seattle', 2020, 738);

INSERT INTO Cities VALUES ('US', 'New York City', 2000, 8015);

INSERT INTO Cities VALUES ('US', 'New York City', 2010, 8175);

INSERT INTO Cities VALUES ('US', 'New York City', 2020, 8772);

PIVOT Cities ON Year IN (SELECT Year FROM Cities ORDER BY Year DESC) USING SUM(Population);

PIVOT Cities ON Year IN (SELECT YEAR FROM (SELECT Year, SUM(POPULATION) AS popsum FROM Cities GROUP BY Year ORDER BY popsum DESC)) USING SUM(Population);

PIVOT Cities ON Year IN (SELECT '2010' UNION ALL SELECT '2000' UNION ALL SELECT '2020') USING SUM(Population);

PIVOT Cities ON Year IN (SELECT xx FROM Cities) USING SUM(Population);

CREATE OR REPLACE TABLE monthly_sales (empid INT, amount INT, month TEXT);

INSERT INTO monthly_sales VALUES (1, 10000, '1-JAN'), (1, 400, '1-JAN'), (2, 4500, '1-JAN'), (2, 35000, '1-JAN'), (1, 5000, '2-FEB'), (1, 3000, '2-FEB'), (2, 200, '2-FEB'), (2, 90500, '2-FEB'), (1, 6000, '3-MAR'), (1, 5000, '3-MAR'), (2, 2500, '3-MAR'), (2, 9500, '3-MAR'), (1, 8000, '4-APR'), (1, 10000, '4-APR'), (2, 800, '4-APR'), (2, 4500, '4-APR');

PREPARE v1 AS SELECT *
FROM monthly_sales
PIVOT(SUM(amount + ?) FOR MONTH IN ('1-JAN', '2-FEB', '3-MAR', '4-APR'))
AS p
ORDER BY EMPID;

EXECUTE v1(0);

EXECUTE v1(1);

PREPARE v2 AS
PIVOT monthly_sales ON MONTH USING SUM(AMOUNT + ?);

EXECUTE v2(1);

PREPARE v3 AS
PIVOT (SELECT empid, amount + ? AS amount, month FROM monthly_sales) ON MONTH USING SUM(AMOUNT);

PRAGMA enable_verification;

CREATE OR REPLACE TABLE monthly_sales (empid INT, amount INT, month TEXT);

INSERT INTO monthly_sales VALUES (1, 10000, 'JAN'), (1, 400, 'JAN'), (2, 4500, 'JAN'), (2, 35000, 'JAN'), (1, 5000, 'FEB'), (1, 3000, 'FEB'), (2, 200, 'FEB'), (2, 90500, 'FEB'), (1, 6000, 'MAR'), (1, 5000, 'MAR'), (2, 2500, 'MAR'), (2, 9500, 'MAR'), (1, 8000, 'APR'), (1, 10000, 'APR'), (2, 800, 'APR'), (2, 4500, 'APR');

CREATE VIEW v1 AS SELECT * FROM monthly_sales PIVOT(SUM(amount) FOR MONTH IN ('JAN', 'FEB', 'MAR', 'APR')) AS p ORDER BY EMPID;

CREATE MACRO pivot_macro(val)
as TABLE SELECT *
FROM monthly_sales
PIVOT(SUM(amount + val) FOR MONTH IN ('JAN', 'FEB', 'MAR', 'APR'))
AS p
ORDER BY EMPID;

SELECT * FROM v1;

SELECT * FROM PIVOT_MACRO(1);

SELECT * FROM v1;

SELECT * FROM PIVOT_MACRO(1);

PRAGMA enable_verification;

CREATE TABLE donnees_csv AS SELECT {'year': CAST(i AS TEXT), 'month': CAST(i AS TEXT)} AS donnee, i % 5 AS variable_id, i % 10 AS id_niv FROM RANGE(0, 1000) AS t(i);

CREATE TABLE donnees_csv AS SELECT {'year': CAST(i AS TEXT), 'month': CAST(i AS TEXT)} AS donnee, i % 5 AS variable_id, i % 10 AS id_niv FROM RANGE(0, 1000) AS t(i);

PRAGMA enable_verification;

CREATE OR REPLACE TABLE sales (empid INT, amount INT, d DATE);

INSERT INTO sales VALUES (1, 10000, CAST('2000-01-01' AS DATE)), (1, 400, CAST('2000-01-07' AS DATE)), (2, 4500, CAST('2001-01-21' AS DATE)), (2, 35000, CAST('2001-01-21' AS DATE)), (1, 5000, CAST('2000-02-03' AS DATE)), (1, 3000, CAST('2000-02-07' AS DATE)), (2, 200, CAST('2001-02-05' AS DATE)), (2, 90500, CAST('2001-02-19' AS DATE)), (1, 6000, CAST('2000-03-01' AS DATE)), (1, 5000, CAST('2000-03-09' AS DATE)), (2, 2500, CAST('2001-03-03' AS DATE)), (2, 9500, CAST('2001-03-08' AS DATE));

INSERT INTO sales VALUES (1, 10000, CAST('2000-01-01' AS DATE)), (1, 400, CAST('2000-01-07' AS DATE)), (2, 4500, CAST('2001-01-21' AS DATE)), (2, 35000, CAST('2001-01-21' AS DATE)), (1, 5000, CAST('2000-02-03' AS DATE)), (1, 3000, CAST('2000-02-07' AS DATE)), (2, 200, CAST('2001-02-05' AS DATE)), (2, 90500, CAST('2001-02-19' AS DATE)), (1, 6000, CAST('2000-03-01' AS DATE)), (1, 5000, CAST('2000-03-09' AS DATE)), (2, 2500, CAST('2001-03-03' AS DATE)), (2, 9500, CAST('2001-03-08' AS DATE));

PIVOT (PIVOT (SELECT YEAR(d) AS year, MONTH(d) AS month, empid, amount FROM sales) ON YEAR, MONTH USING SUM(AMOUNT)) ON empid USING SUM(COALESCE("2000_1", 0) + COALESCE("2000_2", 0) + COALESCE("2000_3", 0) + COALESCE("2001_1", 0) + COALESCE("2001_2", 0) + COALESCE("2001_3", 0));

CREATE VIEW pivot_view AS PIVOT (SELECT YEAR(d) AS year, MONTH(d) AS month, empid, amount FROM sales) ON YEAR, MONTH USING SUM(AMOUNT);

CREATE MACRO xt2(a) as TABLE PIVOT sales ON d USING SUM(amount);

CREATE MACRO xt2(a) as (PIVOT sales ON d USING SUM(amount));

CALL dbgen(sf=0.1);

SELECT * FROM (PIVOT lineitem ON l_shipinstruct USING SUM(l_quantity) GROUP BY l_returnflag) ORDER BY ALL;

SELECT * FROM (PIVOT lineitem ON l_shipinstruct USING SUM(l_quantity) GROUP BY l_returnflag) ORDER BY ALL;

SELECT * FROM (SELECT l_shipinstruct, l_quantity, l_returnflag FROM lineitem) PIVOT(SUM(l_quantity) FOR l_shipinstruct IN ('COLLECT COD', 'DELIVER IN PERSON', 'NONE', 'TAKE BACK RETURN')) ORDER BY ALL;

SELECT * FROM (PIVOT (SELECT YEAR(l_shipdate) AS year, l_returnflag, l_quantity FROM lineitem) ON year USING SUM(l_quantity)) ORDER BY ALL;

SELECT * FROM (SELECT YEAR(l_shipdate) AS year, l_returnflag, l_quantity FROM lineitem) PIVOT(SUM(l_quantity) FOR year IN (1992, 1993, 1994, 1995, 1996, 1997, 1998)) ORDER BY ALL;

SELECT * FROM (SELECT YEAR(l_shipdate) AS year, l_returnflag, l_quantity FROM lineitem) PIVOT(SUM(l_quantity) FOR year IN (1992, 1993, 1994, 1995, 1996, 1997, 1998)) ORDER BY ALL;

SELECT * FROM (SELECT YEAR(l_shipdate) AS year, l_returnflag, l_quantity FROM lineitem) PIVOT(SUM(l_quantity) FOR year IN (1992, 1993, 1994, 1995, 1996, 1997, 1998)) ORDER BY ALL;

PRAGMA enable_verification;

CREATE OR REPLACE TABLE sales (empid INT, amount INT, month TEXT, year INT);

INSERT INTO sales VALUES (1, 10000, 'JAN', 2020), (1, 400, 'JAN', 2021), (2, 4500, 'JAN', 2021), (2, 35000, 'JAN', 2020), (1, 5000, 'FEB', 2020), (1, 3000, 'FEB', 2021), (2, 200, 'FEB', 2021), (2, 90500, 'FEB', 2020), (1, 6000, 'MAR', 2021), (1, 5000, 'MAR', 2021), (2, 2500, 'MAR', 2021), (2, 9500, 'MAR', 2021), (1, 8000, 'APR', 2020), (1, 10000, 'APR', 2020), (2, 800, 'APR', 2021), (2, 4500, 'APR', 2020);

INSERT INTO sales VALUES (1, 10000, 'JAN', 2020), (1, 400, 'JAN', 2021), (2, 4500, 'JAN', 2021), (2, 35000, 'JAN', 2020), (1, 5000, 'FEB', 2020), (1, 3000, 'FEB', 2021), (2, 200, 'FEB', 2021), (2, 90500, 'FEB', 2020), (1, 6000, 'MAR', 2021), (1, 5000, 'MAR', 2021), (2, 2500, 'MAR', 2021), (2, 9500, 'MAR', 2021), (1, 8000, 'APR', 2020), (1, 10000, 'APR', 2020), (2, 800, 'APR', 2021), (2, 4500, 'APR', 2020);

INSERT INTO sales VALUES (1, 10000, 'JAN', 2020), (1, 400, 'JAN', 2021), (2, 4500, 'JAN', 2021), (2, 35000, 'JAN', 2020), (1, 5000, 'FEB', 2020), (1, 3000, 'FEB', 2021), (2, 200, 'FEB', 2021), (2, 90500, 'FEB', 2020), (1, 6000, 'MAR', 2021), (1, 5000, 'MAR', 2021), (2, 2500, 'MAR', 2021), (2, 9500, 'MAR', 2021), (1, 8000, 'APR', 2020), (1, 10000, 'APR', 2020), (2, 800, 'APR', 2021), (2, 4500, 'APR', 2020);

SET pivot_limit = 10000;

SET pivot_limit = 10000;

PRAGMA enable_verification;

CREATE TABLE Product (DaysToManufacture INT, StandardCost INT);

INSERT INTO Product VALUES (0, 5.0885), (1, 223.88), (2, 359.1082), (4, 949.4105);

SELECT DaysToManufacture, AVG(StandardCost) AS AverageCost FROM Product GROUP BY DaysToManufacture;

SELECT 'AverageCost' AS Cost_Sorted_By_Production_Days, "0", "1", "2", "3", "4" FROM (SELECT DaysToManufacture, StandardCost FROM Product) AS SourceTable PIVOT(AVG(StandardCost) FOR DaysToManufacture IN (0, 1, 2, 3, 4)) AS PivotTable;

CREATE OR REPLACE TABLE monthly_sales (empid INT, amount INT, month TEXT);

INSERT INTO monthly_sales VALUES (1, 10000, 'JAN'), (1, 400, 'JAN'), (2, 4500, 'JAN'), (2, 35000, 'JAN'), (1, 5000, 'FEB'), (1, 3000, 'FEB'), (2, 200, 'FEB'), (2, 90500, 'FEB'), (1, 6000, 'MAR'), (1, 5000, 'MAR'), (2, 2500, 'MAR'), (2, 9500, 'MAR'), (1, 8000, 'APR'), (1, 10000, 'APR'), (2, 800, 'APR'), (2, 4500, 'APR');

SELECT * FROM monthly_sales PIVOT(SUM(amount) FOR MONTH IN ('JAN', 'FEB', 'MAR', 'APR')) AS p ORDER BY EMPID;

SELECT * FROM monthly_sales PIVOT(SUM(amount + 1) FOR MONTH IN ('JAN', 'FEB', 'MAR', 'DEC')) AS p ORDER BY EMPID;

SELECT * FROM monthly_sales PIVOT(SUM(amount + 1) FOR MONTH IN ('JAN', 'FEB', 'MAR', 'DEC')) AS p ORDER BY EMPID;

SELECT empid, January, February, March, April FROM monthly_sales PIVOT(SUM(amount) FOR MONTH IN ('JAN' AS January, 'FEB' AS February, 'MAR' AS March, 'APR' AS April)) AS p ORDER BY EMPID;

SELECT * FROM monthly_sales PIVOT(SUM(amount) FOR MONTH IN ('JAN', 'FEB', 'MAR')) AS p ORDER BY EMPID;

SELECT * FROM monthly_sales PIVOT(SUM(amount) FOR MONTH IN ('JAN', 'FEB', 'MAR', 'DEC')) AS p ORDER BY EMPID;

SELECT * FROM monthly_sales PIVOT(SUM(amount) FOR MONTH IN ('JAN', 'FEB', 'MAR', 'APR')) AS p(EMP_ID_renamed, JAN, FEB, MAR, APR) ORDER BY EMP_ID_renamed;

INSERT INTO monthly_sales VALUES (1, 250, NULL);

SELECT * FROM monthly_sales PIVOT(SUM(amount) FOR MONTH IN (NULL, 'JAN', 'FEB', 'MAR', 'APR')) AS p ORDER BY EMPID;

SELECT * FROM monthly_sales PIVOT(SUM(amount) FOR MONTH IN (NULL, 'JAN', 'FEB', 'MAR', 'APR')) AS p UNPIVOT INCLUDE NULLS (amount FOR MONTH IN ("NULL", JAN, FEB, MAR, APR)) ORDER BY ALL;

SELECT * FROM monthly_sales PIVOT(SUM(amount) FOR MONTH IN (NULL, 'JAN', 'FEB', 'MAR', 'APR')) AS p UNPIVOT EXCLUDE NULLS (amount FOR MONTH IN ("NULL", JAN, FEB, MAR, APR)) ORDER BY ALL;

SELECT * FROM monthly_sales PIVOT(SUM(amount) FOR MONTH IN (NULL, 'JAN', 'FEB', 'MAR', 'APR')) AS p UNPIVOT EXCLUDE NULLS (amount FOR MONTH IN ("NULL", JAN, FEB, MAR, APR)) ORDER BY EMPID;

SELECT * FROM monthly_sales PIVOT(SUM(amount) FOR MONTH IN ('JAN', 'JAN')) AS p ORDER BY EMPID;

SELECT * FROM monthly_sales PIVOT(COS(amount) FOR MONTH IN ('JAN', 'FEB', 'MAR', 'APR')) AS p(EMP_ID_renamed, JAN, FEB, MAR, APR) ORDER BY EMP_ID_renamed;

SELECT * FROM monthly_sales PIVOT(SUM(amount + (SELECT 42)) FOR MONTH IN ('JAN', 'FEB', 'MAR', 'APR')) AS p(EMP_ID_renamed, JAN, FEB, MAR, APR) ORDER BY EMP_ID_renamed;

SELECT * FROM monthly_sales PIVOT(SUM(amount + ROW_NUMBER() OVER ()) FOR MONTH IN ('JAN', 'FEB', 'MAR', 'APR')) AS p(EMP_ID_renamed, JAN, FEB, MAR, APR) ORDER BY EMP_ID_renamed;

SELECT * FROM monthly_sales PIVOT(SUM(amount) FOR MONTHx IN ('JAN', 'FEB', 'MAR', 'DEC')) AS p ORDER BY EMPID;

SELECT * FROM monthly_sales PIVOT(SUM(amount) FOR MONTH IN ()) AS p ORDER BY EMPID;

SELECT * FROM monthly_sales PIVOT(SUM(amount) FOR MONTH IN (*)) AS p ORDER BY EMPID;

SELECT * FROM (SELECT DaysToManufacture, StandardCost FROM Product) AS SourceTable PIVOT(AVG(StandardCost) FOR DaysToManufacture IN ('zz')) AS PivotTable;

PRAGMA enable_verification;

CREATE OR REPLACE TABLE monthly_sales (empid INT, dept TEXT, Jan INT, Feb INT, Mar INT, April INT);

INSERT INTO monthly_sales VALUES (1, 'electronics', 100, 200, 300, 100), (2, 'clothes', 100, 300, 150, 200), (3, 'cars', 200, 400, 100, 50);

SELECT * FROM monthly_sales UNPIVOT(sales FOR month IN (jan, feb, mar, april)) ORDER BY empid;

SELECT empid, dept, april, month, sales FROM monthly_sales UNPIVOT(sales FOR month IN (jan, feb, mar)) ORDER BY empid;

SELECT * FROM monthly_sales UNPIVOT(sales FOR month IN (jan AS January, feb AS February, mar AS March, april)) ORDER BY empid;

SELECT p.id, p.type, p.m, p.vals FROM monthly_sales UNPIVOT(sales FOR month IN (jan, feb, mar, april)) AS p(id, type, m, vals);

SELECT empid, dept, month, sales_jan_feb, sales_mar_apr FROM monthly_sales UNPIVOT((sales_jan_feb, sales_mar_apr) FOR month IN ((jan, feb), (mar, april)));

SELECT * FROM monthly_sales UNPIVOT((sales_jan_feb, sales_mar_apr) FOR (month, month2) IN ((jan, feb), (mar, april)));

SELECT * FROM monthly_sales UNPIVOT(sales_jan_feb FOR month IN ((jan, feb), (mar, april)));

SELECT * FROM monthly_sales UNPIVOT((a, b, c) FOR month IN ((jan, feb), (mar, april)));

SELECT empid, dept, month, sales_jan_feb, sales_mar_apr FROM monthly_sales UNPIVOT((sales_jan_feb, sales_mar_apr) FOR month IN ((jan, feb), mar));

SELECT empid, dept, april, month, sales FROM monthly_sales UNPIVOT(sales FOR month IN (jan, feb, mar, dec)) ORDER BY empid;

SELECT * FROM monthly_sales UNPIVOT(sales FOR month IN (empid, dept, jan, feb, mar, april));

SELECT * FROM monthly_sales UNPIVOT(sales FOR month IN (empid, dept, jan, feb, mar, april));

SELECT * FROM monthly_sales UNPIVOT(sales FOR month IN ()) ORDER BY empid;

SELECT * FROM monthly_sales UNPIVOT(sales FOR month IN ('')) ORDER BY empid;

SELECT * FROM monthly_sales UNPIVOT(SUM(sales) FOR month IN (empid, dept, jan, feb, mar, april));

PRAGMA enable_verification;

CREATE TABLE t1 (id BIGINT, "Sales (05/19/2020)" BIGINT, "Sales (06/03/2020)" BIGINT, "Sales (10/23/2020)" BIGINT);

INSERT INTO t1 VALUES (10629465, 23, 47, 99);

INSERT INTO t1 VALUES (98765432, 10, 99, 33);

SELECT id, CAST(REGEXP_REPLACE(date, 'Sales [(]([0-9]+)/([0-9]+)/([0-9]+)[)]', '\3-\1-\2') AS DATE) AS date, sales FROM t1 UNPIVOT(sales FOR date IN ("Sales (05/19/2020)", "Sales (06/03/2020)", "Sales (10/23/2020)")) ORDER BY ALL;

SELECT id, CAST(REGEXP_REPLACE(date, 'Sales [(]([0-9]+)/([0-9]+)/([0-9]+)[)]', '\3-\1-\2') AS DATE) AS date, sales FROM (UNPIVOT t1 ON "Sales (05/19/2020)", "Sales (06/03/2020)", "Sales (10/23/2020)" INTO NAME date VALUE sales) ORDER BY ALL;

SELECT * FROM (UNPIVOT t1 ON "Sales (05/19/2020)" AS "2020-05-19", "Sales (06/03/2020)" AS "2020-06-03", "Sales (10/23/2020)" AS "2020-10-23" INTO NAME date VALUE sales) ORDER BY ALL;

SELECT id, CAST(REGEXP_REPLACE(date, 'Sales [(]([0-9]+)/([0-9]+)/([0-9]+)[)]', '\3-\1-\2') AS DATE) AS date, sales FROM t1 UNPIVOT(Sales FOR Date IN (COLUMNS('Sales.*'))) ORDER BY ALL;

SELECT id, CAST(REGEXP_REPLACE(date, 'Sales [(]([0-9]+)/([0-9]+)/([0-9]+)[)]', '\3-\1-\2') AS DATE) AS date, sales FROM (UNPIVOT t1 ON COLUMNS('Sales.*') INTO NAME date VALUE sales) ORDER BY ALL;

SELECT id, CAST(REGEXP_REPLACE(date, 'Sales [(]([0-9]+)/([0-9]+)/([0-9]+)[)]', '\3-\1-\2') AS DATE) AS date, sales FROM (UNPIVOT t1 ON * EXCLUDE (id) INTO NAME date VALUE sales) ORDER BY ALL;

PRAGMA enable_verification;

CREATE OR REPLACE TABLE monthly_sales (empid INT, amount INT, month TEXT);

INSERT INTO monthly_sales VALUES (1, 10000, '1-JAN'), (1, 400, '1-JAN'), (2, 4500, '1-JAN'), (2, 35000, '1-JAN'), (1, 5000, '2-FEB'), (1, 3000, '2-FEB'), (2, 200, '2-FEB'), (2, 90500, '2-FEB'), (1, 6000, '3-MAR'), (1, 5000, '3-MAR'), (2, 2500, '3-MAR'), (2, 9500, '3-MAR'), (1, 8000, '4-APR'), (1, 10000, '4-APR'), (2, 800, '4-APR'), (2, 4500, '4-APR');

PIVOT monthly_sales ON MONTH USING SUM(AMOUNT);

SELECT * FROM (PIVOT monthly_sales ON MONTH USING SUM(AMOUNT));

PIVOT monthly_sales ON MONTH USING SUM(AMOUNT) GROUP BY empid;

PIVOT monthly_sales ON MONTH IN ('1-JAN', '2-FEB', '3-MAR', '4-APR') USING SUM(AMOUNT) GROUP BY empid;

PIVOT monthly_sales ON MONTH IN ('1-JAN', '2-FEB', '3-MAR') USING SUM(AMOUNT) GROUP BY empid;

PIVOT monthly_sales ON MONTH USING SUM(AMOUNT) GROUP BY empid;

ALTER TABLE monthly_sales ADD COLUMN status TEXT;

UPDATE monthly_sales SET status = CASE WHEN amount >= 10000 THEN 'important' ELSE 'regular' END;

SELECT * FROM (PIVOT monthly_sales ON MONTH USING SUM(AMOUNT)) ORDER BY ALL;

SELECT * FROM (PIVOT monthly_sales ON MONTH USING SUM(AMOUNT)) ORDER BY ALL;

SELECT * FROM (PIVOT monthly_sales ON MONTH USING SUM(AMOUNT) GROUP BY status) ORDER BY ALL;

SELECT * FROM (PIVOT monthly_sales ON MONTH USING SUM(AMOUNT) GROUP BY status) ORDER BY ALL;

WITH pivoted_sales AS (PIVOT monthly_sales ON MONTH USING SUM(AMOUNT) GROUP BY empid) SELECT * FROM pivoted_sales ORDER BY empid DESC;

WITH pivoted_sales AS MATERIALIZED (PIVOT monthly_sales ON MONTH USING SUM(AMOUNT) GROUP BY empid) SELECT * FROM pivoted_sales ORDER BY empid DESC;

CREATE VIEW v1 AS PIVOT monthly_sales ON MONTH USING SUM(AMOUNT);

CREATE VIEW v1 AS PIVOT monthly_sales ON MONTH IN ('1-JAN', '2-FEB', '3-MAR', '4-APR') USING SUM(AMOUNT) GROUP BY empid ORDER BY ALL;

SELECT * FROM v1;

PRAGMA enable_verification;

UNPIVOT (SELECT 42 AS col1, 'woot' AS col2) ON CAST(col1 AS TEXT), col2;

UNPIVOT (SELECT 42 AS col1, 'woot' AS col2) ON CAST(COLUMNS(*) AS TEXT);

UNPIVOT (SELECT 42 AS col1, 'woot' AS col2) ON CAST((col1 + 100) AS TEXT), col2;

UNPIVOT (SELECT 42 AS col1, 'woot' AS col2) ON CAST((col1 + 100) AS TEXT) AS c, col2;

SELECT * FROM (SELECT 42 AS col1, 'woot' AS col2) UNPIVOT("value" FOR "name" IN (CAST(col1 AS TEXT), col2));

UNPIVOT (SELECT 42 AS col1, 'woot' AS col2) ON CAST((col1 + (SELECT col1)) AS TEXT), col2;

UNPIVOT (SELECT 42 AS col1, 'woot' AS col2) ON RANDOM(), col2;

UNPIVOT (SELECT 42 AS col1, 'woot' AS col2) ON col1 + col2;

UNPIVOT (SELECT 42 AS col1, 'woot' AS col2) ON CAST(col1 AS TEXT), col2;

PRAGMA enable_verification;

CREATE TABLE unpivot_names (unpivot_names TEXT, unpivot_list TEXT, unpivot_list_2 TEXT, col1 INT, col2 INT, col3 INT);

INSERT INTO unpivot_names VALUES ('unpivot_names', 'unpivot_list', 'unpivot_list_2', 1, 2, 3);

UNPIVOT unpivot_names ON COLUMNS('col*');

PRAGMA enable_verification;

CREATE TABLE integers (i INT);

UNPIVOT integers ON COLUMNS(* EXCLUDE (i));

PRAGMA enable_verification;

SELECT column_name, column_type FROM (DESCRIBE UNPIVOT (SELECT 42) ON COLUMNS(*));

SELECT column_name, column_type FROM (DESCRIBE UNPIVOT (SELECT {'n': 1}) ON COLUMNS(*));

PRAGMA enable_verification;

UNPIVOT (SELECT CAST(COLUMNS(*) AS TEXT) FROM (SELECT 42 AS col1, 'woot' AS col2)) ON COLUMNS(*);

CREATE TABLE integers (i INT);
load __TEST_DIR__/database_size_read_only.db readonly;

PRAGMA disabled_compression_methods = '${compression}' AS endloop;

PRAGMA disabled_compression_methods = 'uncompressed,rle';

PRAGMA disabled_compression_methods = 'dictionary,rle';

PRAGMA disabled_compression_methods = 'xzx';

SET enable_http_logging = FALSE;

SET enable_http_logging = TRUE;

SET http_logging_output = '__TEST_DIR__/httplog.txt';

PRAGMA ENABLE_PROFILING();

PRAGMA enable_profiling = 'unsupported';

PRAGMA profiling_output;

PRAGMA profiling_output = 'test.json';

PRAGMA profiling_output = '';

PRAGMA force_compression = '${compression}' AS endloop;

PRAGMA force_compression = 'unknown';

PRAGMA memory_limit = '1GB';

PRAGMA memory_limit = -1;

PRAGMA memory_limit = '-1';

PRAGMA memory_limit = 'none';

PRAGMA memory_limit = ' -1';

PRAGMA memory_limit = '1G';

PRAGMA memory_limit = '   1G';

PRAGMA memory_limit = '1GB';

PRAGMA memory_limit = '1gb';

PRAGMA memory_limit = '1GB';

PRAGMA memory_limit = '1.0gb';

PRAGMA memory_limit = '1.0 gb';

PRAGMA memory_limit = '488.2 MiB';

PRAGMA memory_limit = '1.0 gigabytes';

PRAGMA memory_limit = '100M';

PRAGMA memory_limit = '100MB';

PRAGMA memory_limit = '100mb';

PRAGMA memory_limit = '100 megabytes';

PRAGMA memory_limit = '10000K';

PRAGMA memory_limit = '10000KB';

PRAGMA memory_limit = '10000kb';

PRAGMA memory_limit = '10000 kilobytes';

PRAGMA memory_limit = '100000B';

PRAGMA memory_limit = '100000b';

PRAGMA memory_limit = '100000 bytes';

PRAGMA memory_limit = '0.01T';

PRAGMA memory_limit = '0.01TB';

PRAGMA memory_limit = '0.01tb';

PRAGMA memory_limit = '0.01 terabytes';

PRAGMA memory_limit = 100;

PRAGMA memory_limit = '0.01BG';

PRAGMA memory_limit = '0.01BLA';

PRAGMA memory_limit = '0.01PP';

PRAGMA memory_limit = '0.01TEST';

PRAGMA memory_limit;

PRAGMA MEMORY_LIMIT();

PRAGMA MEMORY_LIMIT(1, 2);

PRAGMA memory_limit = 'blabla';

PRAGMA enable_verification;

CREATE TABLE integers (i INT, j INT);

CHECKPOINT;

PRAGMA metadata_info;

SELECT * FROM PRAGMA_METADATA_INFO();

ATTACH '__TEST_DIR__/test_metadata_info_attach.db' AS db1;

CREATE TABLE db1.integers (i INT, j INT);

CHECKPOINT AS db1;

SELECT * FROM PRAGMA_METADATA_INFO('db1');

SELECT * FROM PRAGMA_METADATA_INFO(NULL);

PRAGMA database_list;

SELECT * FROM pragma_database_list;

SELECT name, file FROM pragma_database_list;

PRAGMA DATABASE_LIST();

PRAGMA database_size;

ATTACH '__TEST_DIR__/db_size.db' AS db1;

CREATE TABLE db1.integers AS SELECT * FROM RANGE(0, 1000000);

DROP TABLE db1.integers;

CHECKPOINT AS db1;

SELECT free_blocks > 0 FROM PRAGMA_DATABASE_SIZE() WHERE database_name = 'db1';

DETACH db1;

ATTACH '__TEST_DIR__/db_size.db' AS db1 (READ_ONLY);

SELECT free_blocks > 0 FROM PRAGMA_DATABASE_SIZE() WHERE database_name = 'db1';

PRAG;

PRAG;

PRAGMA random_unknown_pragma;

PRAGMA table_info = 3;

CREATE TABLE integers (i INT);

PRAGMA TABLE_INFO('integers');

PRAGMA version;

SELECT * FROM PRAGMA_VERSION();

SELECT library_version FROM PRAGMA_VERSION();

PRAGMA platform;

SELECT * FROM PRAGMA_PLATFORM();

SELECT platform FROM PRAGMA_PLATFORM();

SELECT COUNT(*) FROM PRAGMA_VERSION() WHERE library_version LIKE 'v%';

SELECT CURRENT_SETTING('log_query_path');

PRAGMA log_query_path = '__TEST_DIR__/query_log.txt';

SELECT 42;

SELECT 100;
SELECT 200;

SELECT CURRENT_SETTING('log_query_path');

PRAGMA log_query_path = '';

SELECT * FROM READ_CSV('__TEST_DIR__/query_log.txt', columns = {'sql': 'VARCHAR'}, auto_detect = FALSE);

CREATE TABLE integers (i INT, j INT);

CREATE TABLE "select" (i INT);

CREATE VIEW v1 AS SELECT CAST('1992-01-01' AS DATE) AS k;

CREATE TABLE t2 (id INT PRIMARY KEY, j TEXT UNIQUE);

CREATE SCHEMA s1;

CREATE TABLE s1.tbl (i INT UNIQUE);

CREATE INDEX my_index ON s1.tbl(i);

CREATE TABLE tbl (i INT PRIMARY KEY);

CREATE INDEX not_a_table ON tbl(i);

DESCRIBE s1.tbl;

DESCRIBE my_index;

DESCRIBE tbl;

DESCRIBE t2;

PRAGMA "SHOW"('t2');

SHOW TABLES;

DESCRIBE TABLES;

PRAGMA show_tables;

SHOW integers;

SHOW "select";

PRAGMA "SHOW"('integers');

DESCRIBE v1;

DESCRIBE v1;

SELECT * FROM show_tables_view ORDER BY ALL;

CREATE TEMPORARY VIEW v1 AS SELECT 42 AS a;

SHOW TABLES;

SHOW ALL TABLES;

CREATE VIEW v2 AS SELECT 42 AS b;

CREATE SCHEMA s1;

CREATE VIEW s1.v3 AS SELECT 42 AS c;

SHOW TABLES;

SHOW ALL TABLES;

SET schema = 's1';

SELECT * FROM v2;

SHOW TABLES;

PRAGMA enable_verification;

CREATE TABLE integers (i INT, j INT);

PRAGMA STORAGE_INFO('integers');

INSERT INTO integers VALUES (1, 1), (2, NULL), (3, 3), (4, 5);

PRAGMA STORAGE_INFO('integers');

CREATE VIEW v1 AS SELECT 42;

PRAGMA STORAGE_INFO('v1');

PRAGMA STORAGE_INFO('bla');

CREATE TABLE different_types (i INT, j TEXT, k STRUCT(k INT, l TEXT));

INSERT INTO different_types VALUES (1, 'hello', {'k': 3, 'l': 'hello'}), (2, 'world', {'k': 3, 'l': 'thisisaverylongstring'});

PRAGMA STORAGE_INFO('different_types');

CREATE TABLE nested_lists AS SELECT [1, 2, 3] AS i, [['hello', 'world'], [NULL]] AS j, [{'a': 3}, {'a': 4}] AS k;

CREATE TABLE integers (i INT DEFAULT 1 + 3, j INT);

PRAGMA TABLE_INFO('integers');

PRAGMA TABLE_INFO(integers);

PRAGMA table_info = 'integers';

PRAGMA table_info = integers;

CREATE VIEW v1 AS SELECT CAST(42 AS INT) AS a, 'hello' AS b;

PRAGMA TABLE_INFO('v1');

CREATE VIEW v2 (c) AS SELECT CAST(42 AS INT) AS a, 'hello' AS b;

PRAGMA TABLE_INFO('v2');

CREATE VIEW v3 (c, d) AS SELECT CAST('1992-01-01' AS DATE), 'hello' AS b;

PRAGMA TABLE_INFO('v3');

CREATE SCHEMA test;

CREATE VIEW test.v1 AS SELECT CAST(42 AS INT) AS a, 'hello' AS b;

PRAGMA TABLE_INFO('test.v1');

PRAGMA TABLE_INFO('nonexistant_table');

CREATE TABLE tconstraint1 (i INT PRIMARY KEY DEFAULT (3), j BLOB NOT NULL);

PRAGMA TABLE_INFO(tconstraint1);

CREATE TABLE tconstraint2 (i INT, j INT, k INT, l INT UNIQUE, PRIMARY KEY (i, j, k));

PRAGMA TABLE_INFO(tconstraint2);

PRAGMA TABLE_INFO(1, 2, 3);

CREATE TABLE t1 (c1 INT, c2 INT GENERATED ALWAYS AS (c1 + 1));

SELECT * FROM PRAGMA_TABLE_INFO(t1);

PRAGMA enable_verification;

CREATE VIEW v1 AS SELECT 1 AS D0, 1 AS D1, 1 AS D2, 1 AS D3, 1 AS D4, 1 AS D5, 1 AS D6, 1 AS D7, 1 AS D8, 1 AS D9, 1 AS D10, 1 AS D11, 1 AS D12, 1 AS D13, 1 AS D14, 1 AS D15, 1 AS D16, 1 AS D17, 1 AS D18, 1 AS D19, 1 AS D20, 1 AS D21, 1 AS D22, 1 AS D23, 1 AS D24, 1 AS D25, 1 AS D26, 1 AS D27, 1 AS D28, 1 AS D29, 1 AS D30, 1 AS D31, 1 AS D32, 1 AS D33, 1 AS D34, 1 AS D35, 1 AS D36, 1 AS D37, 1 AS D38, 1 AS D39, 1 AS D40, 1 AS D41, 1 AS D42, 1 AS D43, 1 AS D44, 1 AS D45, 1 AS D46, 1 AS D47, 1 AS D48, 1 AS D49, 1 AS D50, 1 AS D51, 1 AS D52, 1 AS D53, 1 AS D54, 1 AS D55, 1 AS D56, 1 AS D57, 1 AS D58, 1 AS D59, 1 AS D60, 1 AS D61, 1 AS D62, 1 AS D63, 1 AS D64, 1 AS D65, 1 AS D66, 1 AS D67, 1 AS D68, 1 AS D69, 1 AS D70, 1 AS D71, 1 AS D72, 1 AS D73, 1 AS D74, 1 AS D75, 1 AS D76, 1 AS D77, 1 AS D78, 1 AS D79, 1 AS D80, 1 AS D81, 1 AS D82, 1 AS D83, 1 AS D84, 1 AS D85, 1 AS D86, 1 AS D87, 1 AS D88, 1 AS D89, 1 AS D90, 1 AS D91, 1 AS D92, 1 AS D93, 1 AS D94, 1 AS D95, 1 AS D96, 1 AS D97, 1 AS D98, 1 AS D99, 1 AS D100, 1 AS D101, 1 AS D102, 1 AS D103, 1 AS D104, 1 AS D105, 1 AS D106, 1 AS D107, 1 AS D108, 1 AS D109, 1 AS D110, 1 AS D111, 1 AS D112, 1 AS D113, 1 AS D114, 1 AS D115, 1 AS D116, 1 AS D117, 1 AS D118, 1 AS D119, 1 AS D120, 1 AS D121, 1 AS D122, 1 AS D123, 1 AS D124, 1 AS D125, 1 AS D126, 1 AS D127, 1 AS D128, 1 AS D129, 1 AS D130, 1 AS D131, 1 AS D132, 1 AS D133, 1 AS D134, 1 AS D135, 1 AS D136, 1 AS D137, 1 AS D138, 1 AS D139, 1 AS D140, 1 AS D141, 1 AS D142, 1 AS D143, 1 AS D144, 1 AS D145, 1 AS D146, 1 AS D147, 1 AS D148, 1 AS D149, 1 AS D150, 1 AS D151, 1 AS D152, 1 AS D153, 1 AS D154, 1 AS D155, 1 AS D156, 1 AS D157, 1 AS D158, 1 AS D159, 1 AS D160, 1 AS D161, 1 AS D162, 1 AS D163, 1 AS D164, 1 AS D165, 1 AS D166, 1 AS D167, 1 AS D168, 1 AS D169, 1 AS D170, 1 AS D171, 1 AS D172, 1 AS D173, 1 AS D174, 1 AS D175, 1 AS D176, 1 AS D177, 1 AS D178, 1 AS D179, 1 AS D180, 1 AS D181, 1 AS D182, 1 AS D183, 1 AS D184, 1 AS D185, 1 AS D186, 1 AS D187, 1 AS D188, 1 AS D189, 1 AS D190, 1 AS D191, 1 AS D192, 1 AS D193, 1 AS D194, 1 AS D195, 1 AS D196, 1 AS D197, 1 AS D198, 1 AS D199, 1 AS D200, 1 AS D201, 1 AS D202, 1 AS D203, 1 AS D204, 1 AS D205, 1 AS D206, 1 AS D207, 1 AS D208, 1 AS D209, 1 AS D210, 1 AS D211, 1 AS D212, 1 AS D213, 1 AS D214, 1 AS D215, 1 AS D216, 1 AS D217, 1 AS D218, 1 AS D219, 1 AS D220, 1 AS D221, 1 AS D222, 1 AS D223, 1 AS D224, 1 AS D225, 1 AS D226, 1 AS D227, 1 AS D228, 1 AS D229, 1 AS D230, 1 AS D231, 1 AS D232, 1 AS D233, 1 AS D234, 1 AS D235, 1 AS D236, 1 AS D237, 1 AS D238, 1 AS D239, 1 AS D240, 1 AS D241, 1 AS D242, 1 AS D243, 1 AS D244, 1 AS D245, 1 AS D246, 1 AS D247, 1 AS D248, 1 AS D249, 1 AS D250, 1 AS D251, 1 AS D252, 1 AS D253, 1 AS D254, 1 AS D255, 1 AS D256, 1 AS D257, 1 AS D258, 1 AS D259, 1 AS D260, 1 AS D261, 1 AS D262, 1 AS D263, 1 AS D264, 1 AS D265, 1 AS D266, 1 AS D267, 1 AS D268, 1 AS D269, 1 AS D270, 1 AS D271, 1 AS D272, 1 AS D273, 1 AS D274, 1 AS D275, 1 AS D276, 1 AS D277, 1 AS D278, 1 AS D279, 1 AS D280, 1 AS D281, 1 AS D282, 1 AS D283, 1 AS D284, 1 AS D285, 1 AS D286, 1 AS D287, 1 AS D288, 1 AS D289, 1 AS D290, 1 AS D291, 1 AS D292, 1 AS D293, 1 AS D294, 1 AS D295, 1 AS D296, 1 AS D297, 1 AS D298, 1 AS D299, 1 AS D300, 1 AS D301, 1 AS D302, 1 AS D303, 1 AS D304, 1 AS D305, 1 AS D306, 1 AS D307, 1 AS D308, 1 AS D309, 1 AS D310, 1 AS D311, 1 AS D312, 1 AS D313, 1 AS D314, 1 AS D315, 1 AS D316, 1 AS D317, 1 AS D318, 1 AS D319, 1 AS D320, 1 AS D321, 1 AS D322, 1 AS D323, 1 AS D324, 1 AS D325, 1 AS D326, 1 AS D327, 1 AS D328, 1 AS D329, 1 AS D330, 1 AS D331, 1 AS D332, 1 AS D333, 1 AS D334, 1 AS D335, 1 AS D336, 1 AS D337, 1 AS D338, 1 AS D339, 1 AS D340, 1 AS D341, 1 AS D342, 1 AS D343, 1 AS D344, 1 AS D345, 1 AS D346, 1 AS D347, 1 AS D348, 1 AS D349, 1 AS D350, 1 AS D351, 1 AS D352, 1 AS D353, 1 AS D354, 1 AS D355, 1 AS D356, 1 AS D357, 1 AS D358, 1 AS D359, 1 AS D360, 1 AS D361, 1 AS D362, 1 AS D363, 1 AS D364, 1 AS D365, 1 AS D366, 1 AS D367, 1 AS D368, 1 AS D369, 1 AS D370, 1 AS D371, 1 AS D372, 1 AS D373, 1 AS D374, 1 AS D375, 1 AS D376, 1 AS D377, 1 AS D378, 1 AS D379, 1 AS D380, 1 AS D381, 1 AS D382, 1 AS D383, 1 AS D384, 1 AS D385, 1 AS D386, 1 AS D387, 1 AS D388, 1 AS D389, 1 AS D390, 1 AS D391, 1 AS D392, 1 AS D393, 1 AS D394, 1 AS D395, 1 AS D396, 1 AS D397, 1 AS D398, 1 AS D399, 1 AS D400, 1 AS D401, 1 AS D402, 1 AS D403, 1 AS D404, 1 AS D405, 1 AS D406, 1 AS D407, 1 AS D408, 1 AS D409, 1 AS D410, 1 AS D411, 1 AS D412, 1 AS D413, 1 AS D414, 1 AS D415, 1 AS D416, 1 AS D417, 1 AS D418, 1 AS D419, 1 AS D420, 1 AS D421, 1 AS D422, 1 AS D423, 1 AS D424, 1 AS D425, 1 AS D426, 1 AS D427, 1 AS D428, 1 AS D429, 1 AS D430, 1 AS D431, 1 AS D432, 1 AS D433, 1 AS D434, 1 AS D435, 1 AS D436, 1 AS D437, 1 AS D438, 1 AS D439, 1 AS D440, 1 AS D441, 1 AS D442, 1 AS D443, 1 AS D444, 1 AS D445, 1 AS D446, 1 AS D447, 1 AS D448, 1 AS D449, 1 AS D450, 1 AS D451, 1 AS D452, 1 AS D453, 1 AS D454, 1 AS D455, 1 AS D456, 1 AS D457, 1 AS D458, 1 AS D459, 1 AS D460, 1 AS D461, 1 AS D462, 1 AS D463, 1 AS D464, 1 AS D465, 1 AS D466, 1 AS D467, 1 AS D468, 1 AS D469, 1 AS D470, 1 AS D471, 1 AS D472, 1 AS D473, 1 AS D474, 1 AS D475, 1 AS D476, 1 AS D477, 1 AS D478, 1 AS D479, 1 AS D480, 1 AS D481, 1 AS D482, 1 AS D483, 1 AS D484, 1 AS D485, 1 AS D486, 1 AS D487, 1 AS D488, 1 AS D489, 1 AS D490, 1 AS D491, 1 AS D492, 1 AS D493, 1 AS D494, 1 AS D495, 1 AS D496, 1 AS D497, 1 AS D498, 1 AS D499, 1 AS D500, 1 AS D501, 1 AS D502, 1 AS D503, 1 AS D504, 1 AS D505, 1 AS D506, 1 AS D507, 1 AS D508, 1 AS D509, 1 AS D510, 1 AS D511, 1 AS D512, 1 AS D513, 1 AS D514, 1 AS D515, 1 AS D516, 1 AS D517, 1 AS D518, 1 AS D519, 1 AS D520, 1 AS D521, 1 AS D522, 1 AS D523, 1 AS D524, 1 AS D525, 1 AS D526, 1 AS D527, 1 AS D528, 1 AS D529, 1 AS D530, 1 AS D531, 1 AS D532, 1 AS D533, 1 AS D534, 1 AS D535, 1 AS D536, 1 AS D537, 1 AS D538, 1 AS D539, 1 AS D540, 1 AS D541, 1 AS D542, 1 AS D543, 1 AS D544, 1 AS D545, 1 AS D546, 1 AS D547, 1 AS D548, 1 AS D549, 1 AS D550, 1 AS D551, 1 AS D552, 1 AS D553, 1 AS D554, 1 AS D555, 1 AS D556, 1 AS D557, 1 AS D558, 1 AS D559, 1 AS D560, 1 AS D561, 1 AS D562, 1 AS D563, 1 AS D564, 1 AS D565, 1 AS D566, 1 AS D567, 1 AS D568, 1 AS D569, 1 AS D570, 1 AS D571, 1 AS D572, 1 AS D573, 1 AS D574, 1 AS D575, 1 AS D576, 1 AS D577, 1 AS D578, 1 AS D579, 1 AS D580, 1 AS D581, 1 AS D582, 1 AS D583, 1 AS D584, 1 AS D585, 1 AS D586, 1 AS D587, 1 AS D588, 1 AS D589, 1 AS D590, 1 AS D591, 1 AS D592, 1 AS D593, 1 AS D594, 1 AS D595, 1 AS D596, 1 AS D597, 1 AS D598, 1 AS D599, 1 AS D600, 1 AS D601, 1 AS D602, 1 AS D603, 1 AS D604, 1 AS D605, 1 AS D606, 1 AS D607, 1 AS D608, 1 AS D609, 1 AS D610, 1 AS D611, 1 AS D612, 1 AS D613, 1 AS D614, 1 AS D615, 1 AS D616, 1 AS D617, 1 AS D618, 1 AS D619, 1 AS D620, 1 AS D621, 1 AS D622, 1 AS D623, 1 AS D624, 1 AS D625, 1 AS D626, 1 AS D627, 1 AS D628, 1 AS D629, 1 AS D630, 1 AS D631, 1 AS D632, 1 AS D633, 1 AS D634, 1 AS D635, 1 AS D636, 1 AS D637, 1 AS D638, 1 AS D639, 1 AS D640, 1 AS D641, 1 AS D642, 1 AS D643, 1 AS D644, 1 AS D645, 1 AS D646, 1 AS D647, 1 AS D648, 1 AS D649, 1 AS D650, 1 AS D651, 1 AS D652, 1 AS D653, 1 AS D654, 1 AS D655, 1 AS D656, 1 AS D657, 1 AS D658, 1 AS D659, 1 AS D660, 1 AS D661, 1 AS D662, 1 AS D663, 1 AS D664, 1 AS D665, 1 AS D666, 1 AS D667, 1 AS D668, 1 AS D669, 1 AS D670, 1 AS D671, 1 AS D672, 1 AS D673, 1 AS D674, 1 AS D675, 1 AS D676, 1 AS D677, 1 AS D678, 1 AS D679, 1 AS D680, 1 AS D681, 1 AS D682, 1 AS D683, 1 AS D684, 1 AS D685, 1 AS D686, 1 AS D687, 1 AS D688, 1 AS D689, 1 AS D690, 1 AS D691, 1 AS D692, 1 AS D693, 1 AS D694, 1 AS D695, 1 AS D696, 1 AS D697, 1 AS D698, 1 AS D699, 1 AS D700, 1 AS D701, 1 AS D702, 1 AS D703, 1 AS D704, 1 AS D705, 1 AS D706, 1 AS D707, 1 AS D708, 1 AS D709, 1 AS D710, 1 AS D711, 1 AS D712, 1 AS D713, 1 AS D714, 1 AS D715, 1 AS D716, 1 AS D717, 1 AS D718, 1 AS D719, 1 AS D720, 1 AS D721, 1 AS D722, 1 AS D723, 1 AS D724, 1 AS D725, 1 AS D726, 1 AS D727, 1 AS D728, 1 AS D729, 1 AS D730, 1 AS D731, 1 AS D732, 1 AS D733, 1 AS D734, 1 AS D735, 1 AS D736, 1 AS D737, 1 AS D738, 1 AS D739, 1 AS D740, 1 AS D741, 1 AS D742, 1 AS D743, 1 AS D744, 1 AS D745, 1 AS D746, 1 AS D747, 1 AS D748, 1 AS D749, 1 AS D750, 1 AS D751, 1 AS D752, 1 AS D753, 1 AS D754, 1 AS D755, 1 AS D756, 1 AS D757, 1 AS D758, 1 AS D759, 1 AS D760, 1 AS D761, 1 AS D762, 1 AS D763, 1 AS D764, 1 AS D765, 1 AS D766, 1 AS D767, 1 AS D768, 1 AS D769, 1 AS D770, 1 AS D771, 1 AS D772, 1 AS D773, 1 AS D774, 1 AS D775, 1 AS D776, 1 AS D777, 1 AS D778, 1 AS D779, 1 AS D780, 1 AS D781, 1 AS D782, 1 AS D783, 1 AS D784, 1 AS D785, 1 AS D786, 1 AS D787, 1 AS D788, 1 AS D789, 1 AS D790, 1 AS D791, 1 AS D792, 1 AS D793, 1 AS D794, 1 AS D795, 1 AS D796, 1 AS D797, 1 AS D798, 1 AS D799, 1 AS D800, 1 AS D801, 1 AS D802, 1 AS D803, 1 AS D804, 1 AS D805, 1 AS D806, 1 AS D807, 1 AS D808, 1 AS D809, 1 AS D810, 1 AS D811, 1 AS D812, 1 AS D813, 1 AS D814, 1 AS D815, 1 AS D816, 1 AS D817, 1 AS D818, 1 AS D819, 1 AS D820, 1 AS D821, 1 AS D822, 1 AS D823, 1 AS D824, 1 AS D825, 1 AS D826, 1 AS D827, 1 AS D828, 1 AS D829, 1 AS D830, 1 AS D831, 1 AS D832, 1 AS D833, 1 AS D834, 1 AS D835, 1 AS D836, 1 AS D837, 1 AS D838, 1 AS D839, 1 AS D840, 1 AS D841, 1 AS D842, 1 AS D843, 1 AS D844, 1 AS D845, 1 AS D846, 1 AS D847, 1 AS D848, 1 AS D849, 1 AS D850, 1 AS D851, 1 AS D852, 1 AS D853, 1 AS D854, 1 AS D855, 1 AS D856, 1 AS D857, 1 AS D858, 1 AS D859, 1 AS D860, 1 AS D861, 1 AS D862, 1 AS D863, 1 AS D864, 1 AS D865, 1 AS D866, 1 AS D867, 1 AS D868, 1 AS D869, 1 AS D870, 1 AS D871, 1 AS D872, 1 AS D873, 1 AS D874, 1 AS D875, 1 AS D876, 1 AS D877, 1 AS D878, 1 AS D879, 1 AS D880, 1 AS D881, 1 AS D882, 1 AS D883, 1 AS D884, 1 AS D885, 1 AS D886, 1 AS D887, 1 AS D888, 1 AS D889, 1 AS D890, 1 AS D891, 1 AS D892, 1 AS D893, 1 AS D894, 1 AS D895, 1 AS D896, 1 AS D897, 1 AS D898, 1 AS D899, 1 AS D900, 1 AS D901, 1 AS D902, 1 AS D903, 1 AS D904, 1 AS D905, 1 AS D906, 1 AS D907, 1 AS D908, 1 AS D909, 1 AS D910, 1 AS D911, 1 AS D912, 1 AS D913, 1 AS D914, 1 AS D915, 1 AS D916, 1 AS D917, 1 AS D918, 1 AS D919, 1 AS D920, 1 AS D921, 1 AS D922, 1 AS D923, 1 AS D924, 1 AS D925, 1 AS D926, 1 AS D927, 1 AS D928, 1 AS D929, 1 AS D930, 1 AS D931, 1 AS D932, 1 AS D933, 1 AS D934, 1 AS D935, 1 AS D936, 1 AS D937, 1 AS D938, 1 AS D939, 1 AS D940, 1 AS D941, 1 AS D942, 1 AS D943, 1 AS D944, 1 AS D945, 1 AS D946, 1 AS D947, 1 AS D948, 1 AS D949, 1 AS D950, 1 AS D951, 1 AS D952, 1 AS D953, 1 AS D954, 1 AS D955, 1 AS D956, 1 AS D957, 1 AS D958, 1 AS D959, 1 AS D960, 1 AS D961, 1 AS D962, 1 AS D963, 1 AS D964, 1 AS D965, 1 AS D966, 1 AS D967, 1 AS D968, 1 AS D969, 1 AS D970, 1 AS D971, 1 AS D972, 1 AS D973, 1 AS D974, 1 AS D975, 1 AS D976, 1 AS D977, 1 AS D978, 1 AS D979, 1 AS D980, 1 AS D981, 1 AS D982, 1 AS D983, 1 AS D984, 1 AS D985, 1 AS D986, 1 AS D987, 1 AS D988, 1 AS D989, 1 AS D990, 1 AS D991, 1 AS D992, 1 AS D993, 1 AS D994, 1 AS D995, 1 AS D996, 1 AS D997, 1 AS D998, 1 AS D999, 1 AS D1000, 1 AS D1001, 1 AS D1002, 1 AS D1003, 1 AS D1004, 1 AS D1005, 1 AS D1006, 1 AS D1007, 1 AS D1008, 1 AS D1009, 1 AS D1010, 1 AS D1011, 1 AS D1012, 1 AS D1013, 1 AS D1014, 1 AS D1015, 1 AS D1016, 1 AS D1017, 1 AS D1018, 1 AS D1019, 1 AS D1020, 1 AS D1021, 1 AS D1022, 1 AS D1023, 1 AS D1024, 1 AS D1025, 1 AS D1026, 1 AS D1027, 1 AS D1028, 1 AS D1029, 1 AS D1030, 1 AS D1031, 1 AS D1032, 1 AS D1033, 1 AS D1034, 1 AS D1035, 1 AS D1036, 1 AS D1037, 1 AS D1038, 1 AS D1039, 1 AS D1040, 1 AS D1041, 1 AS D1042, 1 AS D1043, 1 AS D1044, 1 AS D1045, 1 AS D1046, 1 AS D1047, 1 AS D1048, 1 AS D1049, 1 AS D1050, 1 AS D1051, 1 AS D1052, 1 AS D1053, 1 AS D1054, 1 AS D1055, 1 AS D1056, 1 AS D1057, 1 AS D1058, 1 AS D1059, 1 AS D1060, 1 AS D1061, 1 AS D1062, 1 AS D1063, 1 AS D1064, 1 AS D1065, 1 AS D1066, 1 AS D1067, 1 AS D1068, 1 AS D1069, 1 AS D1070, 1 AS D1071, 1 AS D1072, 1 AS D1073, 1 AS D1074, 1 AS D1075, 1 AS D1076, 1 AS D1077, 1 AS D1078, 1 AS D1079, 1 AS D1080, 1 AS D1081, 1 AS D1082, 1 AS D1083, 1 AS D1084, 1 AS D1085, 1 AS D1086, 1 AS D1087, 1 AS D1088, 1 AS D1089, 1 AS D1090, 1 AS D1091, 1 AS D1092, 1 AS D1093, 1 AS D1094, 1 AS D1095, 1 AS D1096, 1 AS D1097, 1 AS D1098, 1 AS D1099, 1 AS D1100, 1 AS D1101, 1 AS D1102, 1 AS D1103, 1 AS D1104, 1 AS D1105, 1 AS D1106, 1 AS D1107, 1 AS D1108, 1 AS D1109, 1 AS D1110, 1 AS D1111, 1 AS D1112, 1 AS D1113, 1 AS D1114, 1 AS D1115, 1 AS D1116, 1 AS D1117, 1 AS D1118, 1 AS D1119, 1 AS D1120, 1 AS D1121, 1 AS D1122, 1 AS D1123, 1 AS D1124, 1 AS D1125, 1 AS D1126, 1 AS D1127, 1 AS D1128, 1 AS D1129, 1 AS D1130, 1 AS D1131, 1 AS D1132, 1 AS D1133, 1 AS D1134, 1 AS D1135, 1 AS D1136, 1 AS D1137, 1 AS D1138, 1 AS D1139, 1 AS D1140, 1 AS D1141, 1 AS D1142, 1 AS D1143, 1 AS D1144, 1 AS D1145, 1 AS D1146, 1 AS D1147, 1 AS D1148, 1 AS D1149, 1 AS D1150, 1 AS D1151, 1 AS D1152, 1 AS D1153, 1 AS D1154, 1 AS D1155, 1 AS D1156, 1 AS D1157, 1 AS D1158, 1 AS D1159, 1 AS D1160, 1 AS D1161, 1 AS D1162, 1 AS D1163, 1 AS D1164, 1 AS D1165, 1 AS D1166, 1 AS D1167, 1 AS D1168, 1 AS D1169, 1 AS D1170, 1 AS D1171, 1 AS D1172, 1 AS D1173, 1 AS D1174, 1 AS D1175, 1 AS D1176, 1 AS D1177, 1 AS D1178, 1 AS D1179, 1 AS D1180, 1 AS D1181, 1 AS D1182, 1 AS D1183, 1 AS D1184, 1 AS D1185, 1 AS D1186, 1 AS D1187, 1 AS D1188, 1 AS D1189, 1 AS D1190, 1 AS D1191, 1 AS D1192, 1 AS D1193, 1 AS D1194, 1 AS D1195, 1 AS D1196, 1 AS D1197, 1 AS D1198, 1 AS D1199;

SELECT COUNT(DISTINCT name) FROM PRAGMA_TABLE_INFO('v1');

CREATE TABLE t1 AS SELECT * FROM v1;

SELECT COUNT(DISTINCT name) FROM PRAGMA_TABLE_INFO('t1');

PRAGMA enable_checkpoint_on_shutdown;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA verify_parallelism;

PRAGMA disable_verify_parallelism;

PRAGMA explain_output = 'all';

PRAGMA explain_output = 'unknown';

PRAGMA enable_progress_bar;

PRAGMA disable_progress_bar;

PRAGMA enable_print_progress_bar;

PRAGMA disable_print_progress_bar;

PRAGMA debug_checkpoint_abort = 'none';

PRAGMA debug_checkpoint_abort = 'unknown';

PRAGMA enable_verification;

PRAGMA threads = 4;

CREATE TABLE bigdata AS SELECT i AS col_a, i AS col_b FROM RANGE(0, 10000) AS tbl(i);

PRAGMA enable_profiling = 'json';

PRAGMA profiling_output = '__TEST_DIR__/profiling_output.json';

PRAGMA custom_profiling_settings = '{"BLOCKED_THREAD_TIME": "true"}';

SELECT (SELECT COUNT(*) FROM bigdata WHERE col_a = 1) + (SELECT COUNT(*) FROM bigdata WHERE col_b = 1);

PRAGMA disable_profiling;

SELECT UNNEST(res) FROM (SELECT CURRENT_SETTING('custom_profiling_settings') AS raw_setting, raw_setting.trim('{}') AS setting, STR_SPLIT(setting, ', ') AS res) ORDER BY ALL;

PRAGMA enable_verification;

PRAGMA enable_profiling = 'json';

PRAGMA profiling_output = '__TEST_DIR__/profiling_output.json';

PRAGMA custom_profiling_settings = '{"CPU_TIME": "false", "EXTRA_INFO": "true", "OPERATOR_CARDINALITY": "true", "OPERATOR_TIMING": "true", "LATENCY": "true"}';

SELECT UNNEST(['Maia', 'Thijs', 'Mark', 'Hannes', 'Tom', 'Max', 'Carlo', 'Sam', 'Tania']) AS names ORDER BY RANDOM();

PRAGMA disable_profiling;

SELECT UNNEST(res) FROM (SELECT CURRENT_SETTING('custom_profiling_settings') AS raw_setting, raw_setting.trim('{}') AS setting, STR_SPLIT(setting, ', ') AS res) ORDER BY ALL;

CREATE OR REPLACE TABLE metrics_output AS SELECT * FROM "__TEST_DIR__/profiling_output.json";

SELECT cpu_time FROM metrics_output;

SELECT extra_info, latency FROM metrics_output;

PRAGMA custom_profiling_settings = '{"CPU_TIME": "true", "EXTRA_INFO": "true", "CUMULATIVE_CARDINALITY": "true", "CUMULATIVE_ROWS_SCANNED": "true"}';

SELECT UNNEST(res) FROM (SELECT CURRENT_SETTING('custom_profiling_settings') AS raw_setting, raw_setting.trim('{}') AS setting, STR_SPLIT(setting, ', ') AS res) ORDER BY ALL;

PRAGMA enable_profiling = 'json';

PRAGMA profiling_output = '__TEST_DIR__/profiling_output.json';

SELECT UNNEST(['Maia', 'Thijs', 'Mark', 'Hannes', 'Tom', 'Max', 'Carlo', 'Sam', 'Tania']) AS names ORDER BY RANDOM();

PRAGMA disable_profiling;

CREATE OR REPLACE TABLE metrics_output AS SELECT * FROM "__TEST_DIR__/profiling_output.json";

SELECT CASE WHEN cpu_time > 0 THEN 'true' ELSE 'false' END FROM metrics_output;

SELECT CASE WHEN cumulative_cardinality > 0 THEN 'true' ELSE 'false' END FROM metrics_output;

SELECT CASE WHEN cumulative_rows_scanned > 0 THEN 'true' ELSE 'false' END FROM metrics_output;

PRAGMA enable_verification;

PRAGMA custom_profiling_settings = '}}}}}}';

PRAGMA custom_profiling_settings = BONJOUR;

PRAGMA custom_profiling_settings = [NOT_A_JSON];

PRAGMA custom_profiling_settings = '{"INVALID_SETTING": "true"}';

PRAGMA enable_verification;

PRAGMA enable_profiling = 'json';

PRAGMA profiling_output = '__TEST_DIR__/profiling_output.json';

PRAGMA custom_profiling_settings = '{"SYSTEM_PEAK_BUFFER_MEMORY": "true", "SYSTEM_PEAK_TEMP_DIR_SIZE": "true"}';

SET memory_limit = '0.7gb';

SET memory_limit = '0.7gb';

PRAGMA disable_profiling;

CREATE OR REPLACE TABLE metrics_output AS SELECT * FROM "__TEST_DIR__/profiling_output.json";

SELECT system_peak_buffer_memory <> 0, system_peak_temp_dir_size <> 0, ROUND((system_peak_buffer_memory + system_peak_temp_dir_size) / 1e9) FROM metrics_output;

PRAGMA enable_verification;

PRAGMA enable_profiling = 'json';

PRAGMA profiling_output = '__TEST_DIR__/profiling_output.json';

PRAGMA custom_profiling_settings = '{"ALL_OPTIMIZERS": "true"}';

SELECT UNNEST(['Maia', 'Thijs', 'Mark', 'Hannes', 'Tom', 'Max', 'Carlo', 'Sam', 'Tania']) AS names ORDER BY RANDOM();

PRAGMA disable_profiling;

SELECT * FROM (SELECT UNNEST(res) AS str FROM (SELECT CURRENT_SETTING('custom_profiling_settings') AS raw_setting, raw_setting.trim('{}') AS setting, STR_SPLIT(setting, ', ') AS res)) WHERE NOT '"true"' IN str ORDER BY ALL;

PRAGMA custom_profiling_settings = '{}';

SELECT UNNEST(['Maia', 'Thijs', 'Mark', 'Hannes', 'Tom', 'Max', 'Carlo', 'Sam', 'Tania']) AS names ORDER BY RANDOM();

SELECT UNNEST(res) FROM (SELECT CURRENT_SETTING('custom_profiling_settings') AS raw_setting, raw_setting.trim('{}') AS setting, STR_SPLIT(setting, ', ') AS res);

PRAGMA custom_profiling_settings = '{"OPTIMIZER_JOIN_ORDER": "true"}';

SELECT UNNEST(['Maia', 'Thijs', 'Mark', 'Hannes', 'Tom', 'Max', 'Carlo', 'Sam', 'Tania']) AS names ORDER BY RANDOM();

PRAGMA disable_profiling;

SELECT UNNEST(res) FROM (SELECT CURRENT_SETTING('custom_profiling_settings') AS raw_setting, raw_setting.trim('{}') AS setting, STR_SPLIT(setting, ', ') AS res) ORDER BY ALL;

CREATE OR REPLACE TABLE metrics_output AS SELECT * FROM "__TEST_DIR__/profiling_output.json";

SELECT CASE WHEN optimizer_join_order > 0 THEN 'true' ELSE 'false' END FROM metrics_output;

SET disabled_optimizers = 'JOIN_ORDER';

PRAGMA custom_profiling_settings = '{"OPTIMIZER_JOIN_ORDER": "true"}';

SELECT UNNEST(['Maia', 'Thijs', 'Mark', 'Hannes', 'Tom', 'Max', 'Carlo', 'Sam', 'Tania']) AS names ORDER BY RANDOM();

SELECT UNNEST(res) FROM (SELECT CURRENT_SETTING('custom_profiling_settings') AS raw_setting, raw_setting.trim('{}') AS setting, STR_SPLIT(setting, ', ') AS res) ORDER BY ALL;

PRAGMA custom_profiling_settings = '{"CUMULATIVE_OPTIMIZER_TIMING": "true"}';

SELECT UNNEST(['Maia', 'Thijs', 'Mark', 'Hannes', 'Tom', 'Max', 'Carlo', 'Sam', 'Tania']) AS names ORDER BY RANDOM();

PRAGMA disable_profiling;

CREATE OR REPLACE TABLE metrics_output AS SELECT * FROM "__TEST_DIR__/profiling_output.json";

SELECT CASE WHEN cumulative_optimizer_timing > 0 THEN 'true' ELSE 'false' END FROM metrics_output;

RESET AS custom_profiling_settings;

SET profiling_mode = 'detailed';

PRAGMA enable_profiling;

SELECT UNNEST(['Maia', 'Thijs', 'Mark', 'Hannes', 'Tom', 'Max', 'Carlo', 'Sam', 'Tania']) AS names ORDER BY RANDOM();

SELECT * FROM (SELECT UNNEST(res) AS str FROM (SELECT CURRENT_SETTING('custom_profiling_settings') AS raw_setting, raw_setting.trim('{}') AS setting, STR_SPLIT(setting, ', ') AS res)) WHERE NOT '"true"' IN str ORDER BY ALL;

RESET AS custom_profiling_settings;

PRAGMA profiling_mode = 'standard';

SELECT UNNEST(['Maia', 'Thijs', 'Mark', 'Hannes', 'Tom', 'Max', 'Carlo', 'Sam', 'Tania']) AS names ORDER BY RANDOM();

SELECT UNNEST(res) FROM (SELECT CURRENT_SETTING('custom_profiling_settings') AS raw_setting, raw_setting.trim('{}') AS setting, STR_SPLIT(setting, ', ') AS res) ORDER BY ALL;

PRAGMA enable_verification;

PRAGMA enable_profiling = 'json';

PRAGMA profiling_output = '__TEST_DIR__/profiling_output.json';

PRAGMA profiling_output = '__TEST_DIR__/profiling_output.json';

CREATE TABLE t${i}(a int);

CREATE TABLE t${i}(a int);

SELECT t1.a FROM t1 JOIN t2 ON t1.a = t2.a JOIN t3 ON t2.a = t3.a JOIN t4 ON t3.a = t4.a JOIN t5 ON t4.a = t5.a JOIN t6 ON t5.a = t6.a JOIN t7 ON t6.a = t7.a;

PRAGMA disable_profiling;

SELECT UNNEST(res) FROM (SELECT CURRENT_SETTING('custom_profiling_settings') AS raw_setting, raw_setting.trim('{}') AS setting, STR_SPLIT(setting, ', ') AS res) ORDER BY ALL;

CREATE OR REPLACE TABLE metrics_output AS SELECT * FROM "__TEST_DIR__/profiling_output.json";

SELECT CASE WHEN physical_planner > 0 THEN 'true' ELSE 'false' END FROM metrics_output;

SELECT CASE WHEN planner > 0 THEN 'true' ELSE 'false' END FROM metrics_output;

PRAGMA enable_verification;

PRAGMA enable_profiling = 'json';

PRAGMA profiling_output = '__TEST_DIR__/profiling_output.json';

PRAGMA custom_profiling_settings = '{"RESULT_SET_SIZE": "true", "OPERATOR_CARDINALITY": "true"}';

SELECT UNNEST(['Maia', 'Thijs', 'Mark', 'Hannes', 'Tom', 'Max', 'Carlo', 'Sam', 'Tania']) AS names ORDER BY RANDOM();

PRAGMA disable_profiling;

CREATE OR REPLACE TABLE metrics_output AS SELECT * FROM "__TEST_DIR__/profiling_output.json";

CREATE TYPE Result AS UNION (
Ok BOOLEAN,
Err BIGINT
);

SELECT CASE WHEN result_set_size = 144 THEN CAST(TRUE AS Result) ELSE CAST(result_set_size AS Result) END AS result FROM metrics_output;

PRAGMA enable_verification;

PRAGMA enable_profiling = 'json';

PRAGMA profiling_output = '__TEST_DIR__/profiling_output.json';

PRAGMA custom_profiling_settings = '{"OPERATOR_CARDINALITY": "true", "OPERATOR_ROWS_SCANNED": "true", "CUMULATIVE_CARDINALITY": "true", "CUMULATIVE_ROWS_SCANNED": "true"}';

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (1), (2), (3), (NULL);

SELECT * FROM integers AS i1, integers AS i2 WHERE i1.i = i2.i ORDER BY 1;

PRAGMA disable_profiling;

CREATE OR REPLACE TABLE metrics_output AS SELECT * FROM "__TEST_DIR__/profiling_output.json";

SELECT cumulative_cardinality, cumulative_rows_scanned FROM metrics_output;

SELECT CASE WHEN cumulative_rows_scanned > 0 THEN 'true' ELSE 'false' END FROM metrics_output;

PRAGMA enable_profiling = 'json';

PRAGMA profiling_output = '__TEST_DIR__/profiling_output.json';

PRAGMA custom_profiling_settings = '{"CUMULATIVE_CARDINALITY": "true", "CUMULATIVE_ROWS_SCANNED": "true", "BLOCKED_THREAD_TIME": "true"}';

SELECT * FROM integers AS i1, integers AS i2 WHERE i1.i = i2.i ORDER BY 1;

PRAGMA disable_profiling;

CREATE OR REPLACE TABLE metrics_output AS SELECT * FROM "__TEST_DIR__/profiling_output.json";

SELECT CASE WHEN cumulative_rows_scanned > 0 THEN 'true' ELSE 'false' END FROM metrics_output;

PRAGMA enable_verification;

PRAGMA enable_profiling = 'json';

PRAGMA profiling_output = '__TEST_DIR__/profiling_output.json';

SELECT UNNEST(['Maia', 'Thijs', 'Mark', 'Hannes', 'Tom', 'Max', 'Carlo', 'Sam', 'Tania']) AS names ORDER BY RANDOM();

PRAGMA disable_profiling;

SELECT UNNEST(res) FROM (SELECT CURRENT_SETTING('custom_profiling_settings') AS raw_setting, raw_setting.trim('{}') AS setting, STR_SPLIT(setting, ', ') AS res) ORDER BY ALL;

CREATE OR REPLACE TABLE metrics_output AS SELECT * FROM "__TEST_DIR__/profiling_output.json";

PRAGMA enable_verification;

PRAGMA enable_profiling = 'json';

PRAGMA profiling_output = '__TEST_DIR__/profiling_output.json';

PRAGMA custom_profiling_settings = '{}';

SELECT UNNEST(['Maia', 'Thijs', 'Mark', 'Hannes', 'Tom', 'Max', 'Carlo', 'Sam', 'Tania']) AS names ORDER BY RANDOM();

PRAGMA disable_profiling;

SELECT UNNEST(res) FROM (SELECT CURRENT_SETTING('custom_profiling_settings') AS raw_setting, raw_setting.trim('{}') AS setting, STR_SPLIT(setting, ', ') AS res) ORDER BY ALL;

CREATE OR REPLACE TABLE metrics_output AS SELECT * FROM "__TEST_DIR__/profiling_output.json";

SELECT cpu_time FROM metrics_output;

SELECT extra_info FROM metrics_output;

SELECT operator_cardinality FROM metrics_output;

SELECT operator_timing FROM metrics_output;

SELECT cumulative_cardinality FROM metrics_output;

SELECT ?;

CREATE VIEW v1 AS SELECT ?;

PREPARE v1 as select $2::int;

EXECUTE v1(0);

PREPARE v2 as select $1::int;

EXECUTE v2('hello');

PREPARE v3 as select $1::int where 1=0;

PREPARE s1 AS SELECT CAST(? AS INTEGER), CAST(? AS STRING);

EXECUTE s1(42, 'dpfkg');

DEALLOCATE AS s1;

PREPARE s1 AS SELECT CAST(?1 AS INTEGER), CAST(?2 AS STRING);

EXECUTE s1(42, 'dpfkg');

DEALLOCATE AS s1;

PREPARE s1 AS SELECT CAST(?2 AS INTEGER), CAST(?1 AS STRING);

EXECUTE s1('dpfkg', 42);

PREPARE q123 as select $param, $other_name, $param;

EXECUTE q123(param := 5, other_name := 3);

EXECUTE q123(param := 5, 3);

PREPARE q01 as select $1, ?, $2;

EXECUTE q01(4, 2, 0);

PREPARE q02 as select $1, $param, $2;

EXECUTE q01(a, 2, 0);

PREPARE v1 AS SELECT COALESCE(COALESCE(NULL, $1) / 42::BIGINT, 0.5);

EXECUTE v1(42);

EXECUTE v1(INTERVAL '1' DAY);

PREPARE v2 AS SELECT COALESCE(CASE WHEN FALSE THEN $1 ELSE NULL END / 42::BIGINT, 0.5);

EXECUTE v2(42);

EXECUTE v2(INTERVAL '1' DAY);

PREPARE s1 AS SELECT ?::VARCHAR FROM (SELECT ?::INTEGER) tbl(i) WHERE i > ?::INTEGER;

EXECUTE s1('hello', 2, 1);

PREPARE s2 AS
SELECT FIRST(?::VARCHAR)
FROM (VALUES (?::INTEGER)) tbl(i)
WHERE i > ?::INTEGER
GROUP BY i % ?::INTEGER
HAVING SUM(i)::VARCHAR <> ?::VARCHAR;

EXECUTE s2('hello', 2, 1, 2, 'blabla');

EXECUTE s2('hello', 2, 1, 2, '2');

PREPARE s3 AS
SELECT LENGTH(?::VARCHAR)
UNION ALL
SELECT ?::INTEGER
ORDER BY 1;

EXECUTE s3('hello', 3);

PREPARE s4 AS SELECT ?::INTEGER IN (?::INTEGER, ?::INTEGER, ?::INTEGER);

EXECUTE s4(1, 2, 3, 1);

PREPARE s5 AS SELECT ?::INTEGER IN (SELECT i FROM (VALUES (?::INTEGER), (?::INTEGER), (?::INTEGER)) tbl(i));

EXECUTE s5(1, 2, 3, 1);

CREATE TABLE integers (i INT, j TEXT);

INSERT INTO integers VALUES (1, 'hello');

PREPARE s1 AS UPDATE integers SET i=?, j=?;

EXECUTE s1(2, 'world');

SELECT * FROM integers;

PREPARE s2 AS UPDATE integers SET j=? WHERE i=?;

EXECUTE s2('test', 2);

SELECT * FROM integers;

PREPARE s3 AS UPDATE integers SET j=? WHERE i=? AND j=?;

EXECUTE s3('test2', 2, 'test');

SELECT * FROM integers;

PRAGMA enable_verification;

PREPARE q1 AS
COPY (
select $1 as 'col'
) to '__TEST_DIR__/res.csv' (
FORMAT csv
);

EXECUTE q1 (42);

SELECT i FROM "__TEST_DIR__/res.csv" AS tbl(i);

PREPARE q2 AS
COPY (
select 42 as 'col'
) to $1 (
FORMAT csv
);

PRAGMA enable_verification;

PREPARE v1 AS SELECT ?;

EXECUTE v1(27);

EXECUTE v1('hello world');

EXECUTE v1([1, 2, 3]);

PREPARE v2 AS SELECT ?=?;

EXECUTE v2(27, 27);

EXECUTE v2('hello world', 'hello mars');

EXECUTE v2(1, 1.0);

EXECUTE v2([1, 2, 3], '[1, 2, 3]');

EXECUTE v2([[1, 2, 3]], [1, 2, 3]);

PREPARE v3 AS SELECT (SELECT ?);

EXECUTE v3(27);

EXECUTE v3('hello world');

EXECUTE v3([1, 2, 3]);

PREPARE v4 AS SELECT ? IS NULL;

EXECUTE v4(27);

EXECUTE v4('hello world');

EXECUTE v4(NULL);

PREPARE v5 AS SELECT ? IN (?, ?);

EXECUTE v5(27, 27, 28);

EXECUTE v5('hello world', 'hello', 'world');

EXECUTE v5(NULL, 27, 28);

PREPARE v6 AS SELECT COUNT(?);

EXECUTE v6(27);

EXECUTE v6('hello world');

EXECUTE v6(NULL);

PREPARE v7 AS SELECT printf('%s: %d', ?, ?);

EXECUTE v7('time', 27);

EXECUTE v7('hello world', [1, 2, 3]);

PREPARE v8 AS SELECT [?];

EXECUTE v8(27);

EXECUTE v8('hello world');

EXECUTE v8(NULL);

PREPARE v9 AS SELECT [?, NULL];

EXECUTE v9(27);

EXECUTE v9('hello world');

EXECUTE v9(NULL);

PREPARE v10 AS SELECT {'x': ?};

EXECUTE v10(27);

EXECUTE v10('hello world');

EXECUTE v10(NULL);

PREPARE v11 AS SELECT {'x': ?, 'y': NULL};

EXECUTE v11(27);

EXECUTE v11('hello world');

EXECUTE v11(NULL);

PREPARE v12 AS SELECT * FROM (VALUES (?, ?), (?, ?)) tbl(i, j);

EXECUTE v12(27, 28, 29, 30);

EXECUTE v12('hello', 'world', 'a', NULL);

PREPARE v13 AS SELECT CASE WHEN ? THEN ? ELSE ? END;

EXECUTE v13(1=1, 1, 2);

EXECUTE v13(1=0, 'hello', 'world');

PREPARE v14 AS SELECT ?+NULL;

EXECUTE v14(1);

PREPARE v15 AS SELECT ?=NULL;

EXECUTE v15(1);

PREPARE v16 AS SELECT CASE WHEN (? = 1) AND (? = 2) AND (? = 3) AND ((? IS NULL)) THEN 1.5 ELSE 2.5 END AS a;

EXECUTE v16(1, 2, 3, NULL);

EXECUTE v16(1, 2, 4, NULL);

PRAGMA enable_verification;

PREPARE fromFirst as from (select ? fromV) select ? selectV,*;

EXECUTE fromFirst('from', 'sel');

SELECT 'sel' AS selectV, * FROM (SELECT 'from' AS fromV);

PRAGMA enable_verification;

CREATE TABLE test (id TEXT);

PREPARE p as delete from test where ("id") in ((?));

EXECUTE p(null);

PREPARE v1 AS SELECT list_transform(?, x -> x + 1);

EXECUTE v1([1, 2, 3]);

PREPARE v2 AS SELECT list_transform([1, 2, 3], x -> x + ?);

EXECUTE v2(1);

PREPARE v3 AS SELECT list_transform(?, x -> x + ? + ?);

EXECUTE v3([1, 2, 3], 1, 1);

PREPARE v4 AS SELECT list_filter(?, x -> x > 1);

EXECUTE v4([1, 2, 3]);

PREPARE v5 AS SELECT list_filter([1, 2, 3], x -> x > ?);

EXECUTE v5(1);

PREPARE v6 AS SELECT list_filter(?, x -> x > ? AND ?);

EXECUTE v6([1, 2, 3], 1, True);

PREPARE v1 AS SELECT list_aggregate(?, 'min');

EXECUTE v1([1, 2, 3]);

EXECUTE v1(['hello', 'world']);

EXECUTE v1(NULL::INT[]);

PREPARE v2 AS SELECT array_slice(?, 1, 2);

EXECUTE v2([1, 2, 3]);

EXECUTE v2('123');

PREPARE v3 AS SELECT flatten(?);

EXECUTE v3([[1,2,3],[4,5]]);

PREPARE v4 AS SELECT list_extract(?, 2);

EXECUTE v4([1, 2, 3]);

PRAGMA enable_verification;

PREPARE v1 as select cast(111 as short) * $1;

EXECUTE v1(1665);

EXECUTE v1('1665');

EXECUTE v1('1665'::VARCHAR);

EXECUTE v1(1665::BIGINT);

EXECUTE v1(1665::SHORT);

PRAGMA enable_verification;

PREPARE v1 AS SELECT $1::INT, $1::BIGINT;

EXECUTE v1(42);

PREPARE v2 AS SELECT $1::BIGINT, $1::INT;

EXECUTE v2(42);

PREPARE v3 AS SELECT $1::BIGINT, $1::UBIGINT;

EXECUTE v3(42);

EXECUTE v3(-1);

PREPARE v4 AS SELECT $1::VARCHAR, $1::DATE;

EXECUTE v4('1992-01-01');

PREPARE v5 AS SELECT $1::INT, $1::BIGINT, $1::TINYINT, $1::HUGEINT, $1::SMALLINT;

EXECUTE v5(42);

PREPARE v6 AS SELECT $1::INT, $1::BIGINT, $1::TINYINT, $1::UBIGINT, $1::SMALLINT, $1::UHUGEINT;

EXECUTE v6(42);

PREPARE v7 AS SELECT CONCAT($1::TINYINT, $1);

EXECUTE v7(42);

PREPARE v8 AS SELECT * FROM (values ('body')) t(field) WHERE CASE WHEN $1 IS NULL THEN 1 ELSE field IN (SELECT * FROM (SELECT UNNEST(string_split($1, ','))) AS fsq) END;

EXECUTE v8('body');

PREPARE v9 AS SELECT UNNEST($1) UNION ALL SELECT * FROM range(1) WHERE $1::INT[]=[1];

PRAGMA enable_verification;

PREPARE q AS SELECT x FROM generate_series(1, 10) t(x) OFFSET ? LIMIT ?;

EXECUTE q(3, 5);

SELECT x FROM GENERATE_SERIES(1, 10) AS t(x) LIMIT 5 OFFSET 3;

PRAGMA enable_verification;

CREATE TABLE accounts AS SELECT 1 AS id, 'Mark' AS name;

SUMMARIZE SELECT * FROM accounts WHERE id = 1;

PREPARE query AS SUMMARIZE SELECT * FROM accounts WHERE id = $1;

EXECUTE query(1);

PREPARE query AS (SUMMARIZE SELECT * FROM accounts WHERE id = $1);

EXECUTE query(1);

DESCRIBE SELECT * FROM accounts WHERE id = 1;

PREPARE query AS DESCRIBE SELECT * FROM accounts WHERE id = $1;

EXECUTE query(1);

PREPARE query AS (DESCRIBE SELECT * FROM accounts WHERE id = $1);

PREPARE v1 AS SELECT SUM(?) OVER ();

EXECUTE v1(2);

EXECUTE v1(2::HUGEINT);

EXECUTE v1(0.5);

PREPARE s1 AS SELECT CAST($1 AS INTEGER), CAST($2 AS STRING);

EXECUTE s1(42, 'dpfkg');

EXECUTE s1(43, 'asdf');

EXECUTE s1(43);

EXECUTE s1(43, 'asdf', 42);

EXECUTE s1('asdf', 'asdf');

DEALLOCATE AS s1;

DEALLOCATE AS s2;

EXECUTE s1(42, 'dpfkg');

PREPARE EXPLAIN SELECT 42;

PREPARE CREATE TABLE a(i INTEGER);

SELECT * FROM a;

PREPARE s1 AS SELECT $1+$2;

DEALLOCATE AS s1;

PREPARE s1 AS SELECT NOT($1), 10+$2, $3+20, 4 IN (2, 3, $4), $5 IN (2, 3, 4);

EXECUTE s1(1, 2, 3, 4, 2);

PREPARE s1 AS SELECT $1;

PREPARE s2 AS SELECT (SELECT $1);

PRAGMA enable_verification;

PREPARE v1 AS SELECT ? + 1.0 AS a;

EXECUTE v1(2.0);

PREPARE v2 AS SELECT ? * 2.0 AS a;

EXECUTE v2(2.0);

PREPARE v3 AS SELECT ? = 2.0 AS a;

EXECUTE v3(2.0);

PREPARE v4 AS SELECT 2.0 IN (1.0, 1.5, ?);

EXECUTE v4(2.0);

EXECUTE v4(2.5);

PREPARE v5 AS SELECT ? IN (1.0, 1.5, 2.0);

EXECUTE v5(2.0);

EXECUTE v5(2.5);

PRAGMA enable_verification;

CREATE TABLE T1 (A0 TIMESTAMP, A1 INT, A2 TEXT, A3 TEXT, A4 INT, A5 DOUBLE);

PRAGMA enable_verification;

PREPARE v1 AS SELECT CASE ? WHEN ? THEN ? WHEN ? THEN ? ELSE ? END AS x;

EXECUTE V1(1, 2, 3, 4, 5, 6);

PREPARE v1 AS SELECT typeof(?);

EXECUTE v1(3::int);

EXECUTE v1('hello');

EXECUTE v1([1, 2, 3]);

PREPARE v2 AS SELECT ?;

EXECUTE v2(3::int);

EXECUTE v2('hello');

EXECUTE v2([1, 2, 3]);

PREPARE v3 AS SELECT ?=?;

EXECUTE v3(3::int, 4::bigint);

EXECUTE v3('hello', 'hello');

EXECUTE v3([1, 2, 3], [1, 2, 3]);

PREPARE v4 AS SELECT extract(year from ?);

EXECUTE v4(DATE '1992-01-01');

EXECUTE v4(TIMESTAMP '1992-01-01 23:00:20');

PREPARE v5 AS SELECT printf('%s', ?);

EXECUTE v5(4);

EXECUTE v5('hello');

PREPARE v6 AS SELECT printf('%d', ?);

EXECUTE v6(4);

EXECUTE v6('hello');

PREPARE v7 AS SELECT [?];

EXECUTE v7(1);

EXECUTE v7('hello');

EXECUTE v7([1,2,3]);

EXECUTE v7(NULL);

PREPARE v8 AS SELECT [?, ?, ?];

EXECUTE v8(1, 2, 3);

EXECUTE v8(NULL, NULL, NULL);

EXECUTE v8('hello', 'world', NULL);

PREPARE v9 AS SELECT {'a': ?};

EXECUTE v9(42);

EXECUTE v9([1,2,3]);

EXECUTE v9(NULL);

PREPARE v10 AS SELECT {'a': ?, 'b': 42, 'c': ?};

EXECUTE v10(33, [1, 2, 3]);

EXECUTE v10(NULL, {'a': 88});

PREPARE v11 AS SELECT ROW(?, ?);

EXECUTE v11(11, 'hello');

PREPARE v12 AS SELECT ? IS NULL;

EXECUTE v12('hello');

EXECUTE v12([1, 2, 3]);

EXECUTE v12(NULL);

PREPARE v13 AS SELECT (SELECT ?);

EXECUTE v13(3::int);

EXECUTE v13('hello');

EXECUTE v13([1, 2, 3]);

PREPARE v14 AS SELECT SUM(?) FROM RANGE(100);

EXECUTE v14(2);

EXECUTE v14(2::HUGEINT);

EXECUTE v14(0.005);

PREPARE v15 AS SELECT ?+?;

EXECUTE v15(0.25, 0.25);

EXECUTE v15(1000000000000000000000000000000000000::hugeint, 1000000000000000000000000000000000000::hugeint);

PREPARE v17 AS SELECT ARRAY_CONTAINS(?, ?);

EXECUTE v17([1, 2, 3], 1);

EXECUTE v17([], 1);

EXECUTE v17(['hello', NULL, 'world'], 'world');

PREPARE v18 AS SELECT ARRAY_CONTAINS([1, 2, 3], ?);

EXECUTE v18(1);

EXECUTE v18(0);

EXECUTE v18([1]);

PREPARE v19 AS SELECT ARRAY_CONTAINS(?, 1);

EXECUTE v19([1, 2, 3]);

EXECUTE v19(0);

CREATE TABLE b (i TINYINT);

INSERT INTO b VALUES (1), (2), (3), (4), (5);

PREPARE s1 AS DELETE FROM b WHERE i=$1;

SELECT * FROM b ORDER BY 1;

EXECUTE s1(3);

SELECT * FROM b ORDER BY 1;

CREATE TABLE b (i TINYINT);

INSERT INTO b VALUES (1), (2), (3), (4), (5);

PREPARE s1 AS DELETE FROM b WHERE i=$1;

SELECT * FROM b ORDER BY 1;

EXECUTE s1(3);

SELECT * FROM b ORDER BY 1;

DROP TABLE b CASCADE;

CREATE TABLE b (i TINYINT);

INSERT INTO b VALUES (1), (2), (3), (4), (5);

PREPARE s1 AS UPDATE b SET i=$1 WHERE i=$2;

SELECT * FROM b ORDER BY 1;

EXECUTE s1(6, 3);

SELECT * FROM b ORDER BY 1;

CREATE TABLE a (i TINYINT);

PREPARE p1 AS SELECT * FROM a;

EXECUTE p1;

EXECUTE p1;

DROP TABLE a;

EXECUTE p1;

PREPARE v1 AS SELECT ?::VARCHAR::INT;

EXECUTE v1('hello');

EXECUTE v1('3');

CREATE TABLE b (i TINYINT);

PREPARE s1 AS INSERT INTO b VALUES (cast($1 as tinyint)), ($2 + 1), ($3);

EXECUTE s1 (42, 41, 42);

SELECT * FROM b;

EXECUTE s1 (42, 41, 10000);

CREATE TABLE c (i INT);

PREPARE s2 AS INSERT INTO c VALUES ($1)
loop val 0 1000;

EXECUTE s2(${val})
endloop;

SELECT COUNT(*), MIN(i), MAX(i) FROM c;

DROP TABLE b;

DROP TABLE c;

DEALLOCATE AS s2;

CREATE TABLE test AS SELECT 42 AS i;

PREPARE q1 as SELECT cast(? AS VARCHAR) FROM test;

EXECUTE q1('oops');

PREPARE S1 AS SELECT (? / 1) + 1;

EXECUTE S1(42);

CREATE TABLE b (i TINYINT);

PREPARE s1 AS INSERT INTO b VALUES ($1);

EXECUTE s1 (NULL);

SELECT i FROM b;

PREPARE s2 AS UPDATE b SET i=$1;

EXECUTE s2 (NULL);

SELECT i FROM b;

PREPARE s3 AS DELETE FROM b WHERE i=$1;

EXECUTE s3 (NULL);

SELECT i FROM b;

CREATE TABLE a (i TINYINT);

INSERT INTO a VALUES (42);

PREPARE s3 AS SELECT * FROM a WHERE i=$1;

EXECUTE s3(10000);

EXECUTE s3(42);

EXECUTE s3(84);

DEALLOCATE AS s3;

SELECT * FROM a WHERE i = $1;

SELECT * FROM a WHERE i = CAST($1 AS TEXT);

PREPARE s1 AS SELECT to_years($1), CAST(list_value($1) AS BIGINT[]);

PREPARE v1 AS SELECT * FROM (SELECT $1::INTEGER) sq1;

EXECUTE v1(42);

PREPARE v2 AS SELECT * FROM (SELECT $1::INTEGER WHERE 1=0) sq1;

EXECUTE v2(42);

PREPARE v3 AS SELECT (SELECT $1::INT+sq1.i) FROM (SELECT 42 AS i) sq1;

EXECUTE v3(42);

PREPARE v4 AS SELECT (SELECT (SELECT $1::INT+sq1.i)+$2::INT+sq1.i) FROM (SELECT 42 AS i) sq1;

CREATE TABLE test (a TINYINT, b SMALLINT, c INT, d BIGINT, e REAL, f DOUBLE, g DATE, h TEXT);

PREPARE s1 AS INSERT INTO test VALUES ($1,$2,$3,$4,$5,$6,$7,$8);

EXECUTE s1(1,2,3,4,1.5,2.5,'1992-10-20', 'hello world');

SELECT * FROM test;

PRAGMA enable_verification;

CREATE TABLE "user" (name TEXT);

PREPARE s2965 AS
WITH temp_first AS (
SELECT * FROM "user"
WHERE "name" = ?
), temp_second AS (
SELECT * FROM "user"
WHERE "name" = ?
)
SELECT * FROM temp_second;

EXECUTE s2965('val1', 'val2');

CALL dbgen(sf=0.1);

COPY lineitem TO '__TEST_DIR__/progress_bar_lineitem.parquet' WITH (FORMAT 'parquet');

COPY lineitem TO '__TEST_DIR__/progress_bar_lineitem2.parquet' WITH (FORMAT 'parquet');

PRAGMA progress_bar_time = 1;

PRAGMA disable_print_progress_bar;

SELECT l_returnflag, l_linestatus, SUM(l_quantity) AS sum_qty, SUM(l_extendedprice) AS sum_base_price, SUM(l_extendedprice * (1 - l_discount)) AS sum_disc_price, SUM(l_extendedprice * (1 - l_discount) * (1 + l_tax)) AS sum_charge, AVG(l_quantity) AS avg_qty, AVG(l_extendedprice) AS avg_price, AVG(l_discount) AS avg_disc, COUNT(*) AS count_order FROM PARQUET_SCAN('__TEST_DIR__/progress_bar_lineitem.parquet') WHERE l_shipdate <= CAST('1998-09-02' AS DATE) GROUP BY l_returnflag, l_linestatus ORDER BY l_returnflag, l_linestatus;

SELECT l_returnflag, l_linestatus, SUM(l_quantity) AS sum_qty, SUM(l_extendedprice) AS sum_base_price, SUM(l_extendedprice * (1 - l_discount)) AS sum_disc_price, SUM(l_extendedprice * (1 - l_discount) * (1 + l_tax)) AS sum_charge, AVG(l_quantity) AS avg_qty, AVG(l_extendedprice) AS avg_price, AVG(l_discount) AS avg_disc, COUNT(*) AS count_order FROM PARQUET_SCAN('__TEST_DIR__/progress_bar_*.parquet') WHERE l_shipdate <= CAST('1998-09-02' AS DATE) GROUP BY l_returnflag, l_linestatus ORDER BY l_returnflag, l_linestatus;

PRAGMA threads = 4;

PRAGMA verify_parallelism;

SELECT l_returnflag, l_linestatus, SUM(l_quantity) AS sum_qty, SUM(l_extendedprice) AS sum_base_price, SUM(l_extendedprice * (1 - l_discount)) AS sum_disc_price, SUM(l_extendedprice * (1 - l_discount) * (1 + l_tax)) AS sum_charge, AVG(l_quantity) AS avg_qty, AVG(l_extendedprice) AS avg_price, AVG(l_discount) AS avg_disc, COUNT(*) AS count_order FROM PARQUET_SCAN('__TEST_DIR__/progress_bar_lineitem.parquet') WHERE l_shipdate <= CAST('1998-09-02' AS DATE) GROUP BY l_returnflag, l_linestatus ORDER BY l_returnflag, l_linestatus;

PRAGMA enable_verification;

SELECT COALESCE(1, CAST('hello' AS INT));

SELECT COALESCE(NULL, CAST('hello' AS INT));

CREATE TABLE vals AS SELECT * FROM (VALUES (1, 'hello'), (NULL, '2'), (3, NULL)) AS tbl(a, b);

SELECT COALESCE(a, CAST(b AS INT)) FROM vals;

SELECT COALESCE(NULL, CAST(b AS INT)) FROM vals;

PRAGMA enable_verification;

CREATE TABLE tbl AS SELECT CASE WHEN i % 2 = 0 THEN NULL ELSE i END AS i FROM RANGE(0, 10) AS tbl(i);

SELECT i, COALESCE(rowid + i, rowid) FROM tbl ORDER BY rowid;

SELECT i, rowid, rowid + i, COALESCE(rowid + i, NULL) IS NULL OR rowid + 3 = 6 FROM tbl ORDER BY rowid;

PRAGMA enable_verification;

CREATE TABLE integers (i INT, j INT, k INT);

INSERT INTO integers VALUES (1, 2, 3);

SELECT * EXCLUDE (i) FROM integers;

SELECT * EXCLUDE (i, j) FROM integers;

SELECT * EXCLUDE (j) FROM integers;

SELECT * EXCLUDE (j) FROM integers;

SELECT * EXCLUDE ("J") FROM integers;

SELECT * EXCLUDE (i, j, k) FROM integers;

SELECT integers.* EXCLUDE (i) FROM integers;

SELECT integers.* EXCLUDE ('i') FROM integers;

SELECT integers.* EXCLUDE (i, j) FROM integers;

SELECT integers.* EXCLUDE (j) FROM integers;

SELECT integers.* EXCLUDE (i, j), * EXCLUDE (i, j), * EXCLUDE (i, k) FROM integers;

SELECT integers.* EXCLUDE (i, j, k) FROM integers;

SELECT * EXCLUDE (i, j) FROM integers AS i1, integers AS i2;

SELECT i1.* EXCLUDE (i, j), i2.* EXCLUDE (i, j, k) FROM integers AS i1, integers AS i2;

SELECT i1.* EXCLUDE (i, j), i2.* EXCLUDE (k) FROM integers AS i1, integers AS i2;

SELECT * EXCLUDE (i) FROM integers AS i1 JOIN integers AS i2 USING (i);

SELECT * EXCLUDE (integers.i) FROM integers;

SELECT * EXCLUDE (integers.i, integers.j) FROM integers;

SELECT integers.* EXCLUDE (integers.i, integers.j) FROM integers;

SELECT * EXCLUDE (INTEGERS.i, integers.J) FROM integers;

SELECT * EXCLUDE (integers.i, integers.j, integers2.i) FROM integers;

SELECT * EXCLUDE (integers2.i) FROM integers;

SELECT * EXCLUDE (i1.i, i2.i) FROM integers AS i1 JOIN integers AS i2 USING (i);

SELECT * EXCLUDE (i, i) FROM integers;

SELECT * EXCLUDE (integers.i, i) FROM integers;

SELECT * EXCLUDE (blabla) FROM integers;

SELECT integers.* EXCLUDE (blabla) FROM integers;

PRAGMA enable_verification;

CREATE TABLE integers (col1 INT, col2 INT, k INT);

INSERT INTO integers VALUES (1, 2, 3);

SELECT COLUMNS(x -> x LIKE 'col%') FROM integers;

SELECT * LIKE 'col%' FROM integers;

SELECT NOT * LIKE 'col%' FROM integers;

SELECT * ILIKE 'COL%' FROM integers;

SELECT * SIMILAR TO '.*col.*' FROM integers;

SELECT * EXCLUDE (col1) SIMILAR TO '.*col.*' FROM integers;

SELECT c2, c1 FROM (SELECT * SIMILAR TO 'number(\d+)' AS "c\1" FROM (SELECT 1 AS number1, 2 AS number2, 3 AS end));

SELECT val FROM (SELECT NOT * LIKE '%number%' AS val FROM (SELECT 1 AS number1, 2 AS number2, 3 AS end));

SELECT * LIKE '\_%' ESCAPE '\' AS val FROM (SELECT 1 AS number1, 2 AS _number2);

SELECT NOT * LIKE '\_%' ESCAPE '\' AS val FROM (SELECT 1 AS number1, 2 AS _number2);

SELECT * ILIKE '\_NUM%' ESCAPE '\' AS val FROM (SELECT 1 AS number1, 2 AS _number2);

SELECT NOT * ILIKE '\_NUM%' ESCAPE '\' AS val FROM (SELECT 1 AS number1, 2 AS _number2);

SELECT * SIMILAR TO pattern FROM integers, (SELECT '.*col.*') AS t(pattern);

SELECT * + 42 FROM integers;

SELECT * REPLACE (col1 + 42 AS col1) SIMILAR TO '.*col.*' FROM integers;

SELECT * RENAME (col1 AS other_) SIMILAR TO '.*col.*' FROM integers;

PRAGMA enable_verification;

CREATE TABLE integers (i INT, j INT, k INT);

INSERT INTO integers VALUES (1, 2, 3);

SELECT renamed_col FROM (SELECT * RENAME (i AS renamed_col) FROM integers);

SELECT renamed_col FROM (SELECT COLUMNS(* RENAME (i AS renamed_col)) FROM integers);

SELECT renamed_col FROM (SELECT * RENAME (integers.i AS renamed_col) FROM integers);

SELECT renamed_col FROM (SELECT integers.* RENAME (integers.i AS renamed_col) FROM integers);

SELECT r1, r2 FROM (SELECT * RENAME (integers.i AS r1, j AS r2) FROM integers);

SELECT r1, r2 FROM (SELECT * RENAME (integers.i AS r1, j AS r2) FROM integers);

SELECT i FROM (SELECT * EXCLUDE (i) RENAME (j AS i) FROM integers);

SELECT r FROM (SELECT struct.* RENAME (i AS r) FROM (SELECT {'i': 42} AS struct));

SELECT new_col FROM (SELECT * RENAME (i AS new_col) FROM integers AS i1 JOIN integers AS i2 USING (i));

SELECT new_col, new_col2 FROM (SELECT * RENAME (i1.i AS new_col, i1.j AS new_col2) FROM integers AS i1 JOIN integers AS i2 USING (i));

SELECT new_col FROM (SELECT * RENAME (i AS new_col) FROM integers AS i1 LEFT JOIN integers AS i2 USING (i));

SELECT new_col FROM (SELECT * RENAME (i1.i AS new_col) FROM integers AS i1 FULL OUTER JOIN integers AS i2 USING (i));

SELECT * EXCLUDE (i) RENAME (i AS renamed_col) FROM integers;

SELECT * REPLACE (i + 1 AS i) RENAME (i AS renamed_col) FROM integers;

PRAGMA enable_verification;

CREATE TABLE integers (i INT, j INT, k INT);

INSERT INTO integers VALUES (1, 2, 3);

SELECT * REPLACE (i + 100 AS i) FROM integers;

SELECT * EXCLUDE (j, k) REPLACE (i + 100 AS i), * EXCLUDE (j) REPLACE (i + 100 AS i), * EXCLUDE (j, k) REPLACE (i + 101 AS i) FROM integers;

SELECT * REPLACE (i + 100 AS i, j + 200 AS "J") FROM integers;

SELECT integers.* REPLACE (i + 100 AS i) FROM integers;

SELECT * REPLACE (i + 100 AS i, i + 200 AS i) FROM integers;

SELECT * REPLACE (i + 100 AS blabla) FROM integers;

SELECT integers.* REPLACE (i + 100 AS blabla) FROM integers;

SELECT * EXCLUDE (i) REPLACE (i + 100 AS i) FROM integers;

PRAGMA enable_verification;

CREATE TABLE test (a STRUCT(i INT, j INT));

INSERT INTO test VALUES ({'i': 1, 'j': 2});

SELECT a.* FROM test;

SELECT a.* EXCLUDE (j) FROM test;

SELECT a.* EXCLUDE (i) FROM test;

SELECT a.* REPLACE (a.i + 3 AS i) FROM test;

SELECT a.* REPLACE (a.i + 3 AS i) FROM test;

SELECT a.* REPLACE (a.i + 3 AS i) FROM test;

SELECT i.* FROM a, b;

SET default_null_order = 'nulls_first';

SET default_null_order = 'nulls_first';

DROP TABLE IF EXISTS exprtest;

DROP TABLE IF EXISTS exprtest;

INSERT INTO exprtest VALUES (42, 10), (43, 100), (NULL, 1), (45, 0);

INSERT INTO exprtest VALUES (42, 10), (43, 100), (NULL, 1), (45, 0);

SELECT COALESCE(NULL);

SELECT COALESCE(NULL);

SELECT COALESCE(a) FROM exprtest;

SELECT COALESCE(NULL, NULL, 42, 43);

SELECT COALESCE(NULL, NULL, 42);

SELECT COALESCE(42, NULL, 43);

SELECT COALESCE(NULL, NULL, NULL);

SELECT COALESCE(a, b) FROM exprtest;

SELECT COALESCE(NULL, NULL, NULL, a, NULL, b) FROM exprtest;

SELECT * FROM exprtest WHERE b = 1 OR COALESCE(a, b) = 42 ORDER BY 1;

SELECT * FROM exprtest WHERE COALESCE(a, b) = 1 OR COALESCE(a, b) = 43 OR COALESCE(a, b) = 45 ORDER BY 1;

SELECT * FROM exprtest WHERE COALESCE(a, b) = 1 OR COALESCE(a, b) = 42 OR COALESCE(a, b) = 43 OR COALESCE(a, b) = 45 ORDER BY 1;

SELECT * FROM exprtest WHERE b = 1 AND COALESCE(a, b) = 1 ORDER BY 1;

SELECT * FROM exprtest WHERE (b = 1 AND COALESCE(a, b) = 1) OR (b = 100 AND COALESCE(a, b) = 43) ORDER BY 1;

CREATE TABLE strings (n TEXT, s TEXT);

INSERT INTO strings (s) VALUES ('thisisalongstring'), ('thisisalsoalongstring'), ('hello'), ('world'), ('duckduckduckduckduck'), (NULL);

SELECT COALESCE(n, s) FROM strings;

SELECT COALESCE(n, n, n, n, n, n, n, n, n, n, s, n, n, n, n, n, n, n) FROM strings;

SELECT COALESCE(n, n, n, n, n, n, n, n, n, n, s, n, n, n, n, n, n, n, 'default') FROM strings;

SELECT COALESCE(n, n, n, n, n, n, n, n, n, n, s, n, n, n, n, n, n, n) FROM strings WHERE NOT s LIKE 'this%';

CREATE TABLE multistrings AS SELECT * FROM (VALUES (NULL, NULL, NULL, NULL, NULL, NULL), ('thisisalongstring', NULL, NULL, NULL, NULL, NULL), (NULL, 'thisisalsoalongstring', NULL, NULL, NULL, NULL), (NULL, NULL, 'hello', NULL, NULL, NULL), (NULL, NULL, NULL, 'world', NULL, NULL), (NULL, NULL, NULL, NULL, 'duckduckduckduckduck', NULL), (NULL, NULL, NULL, NULL, NULL, NULL)) AS tbl(s1, s2, s3, s4, s5);

SELECT COALESCE(s1, s2, s3, s4, s5) FROM multistrings;

SELECT COALESCE(s5, s4, s3, s2, s1) FROM multistrings;

SELECT COALESCE(s5, s4, s3, s2, s1) FROM multistrings WHERE NOT COALESCE(s5, s4, s3, s2, s1) IS NULL;

CREATE TABLE multilists AS SELECT * FROM (VALUES (NULL, NULL, NULL, NULL, NULL, NULL), ([1, 2, 3], NULL, NULL, NULL, NULL, NULL), (NULL, [4, 5, 6, 7, 8, 9], NULL, NULL, NULL, NULL), (NULL, NULL, [], NULL, NULL, NULL), (NULL, NULL, NULL, [10, 11, NULL, 13, 14, 15, 16], NULL, NULL), (NULL, NULL, NULL, NULL, [NULL, 18, NULL, 20], NULL), (NULL, NULL, NULL, NULL, NULL, NULL)) AS tbl(s1, s2, s3, s4, s5);

SELECT COALESCE(s1, s2, s3, s4, s5) FROM multilists;

SELECT COALESCE(s5, s4, s3, s2, s1) FROM multilists;

SELECT COALESCE(s5, s4, s3, s2, s1) FROM multilists WHERE NOT COALESCE(s5, s4, s3, s2, s1) IS NULL;

CREATE TABLE nestedtypes AS SELECT * FROM (VALUES (NULL, NULL, NULL, NULL, NULL, NULL), (CAST([NULL, [NULL, NULL]] AS STRUCT(x INT[])[][]), NULL, NULL, NULL, NULL, NULL), (NULL, [[{'x': [3, 4]}], [{'x': [17]}, {'x': [22, NULL]}]], NULL, NULL, NULL, NULL), (NULL, NULL, CAST([[], [], []] AS STRUCT(x INT[])[][]), NULL, NULL, NULL), (NULL, NULL, NULL, CAST([[{'x': NULL}], NULL, [NULL, NULL], []] AS STRUCT(x INT[])[][]), NULL, NULL), (NULL, NULL, NULL, NULL, [[{'x': [10, 12, 13, 14, 15]}], [{'x': [NULL]}, NULL]], NULL), (NULL, NULL, NULL, NULL, NULL, NULL)) AS tbl(s1, s2, s3, s4, s5);

SELECT COALESCE(s1, s2, s3, s4, s5) FROM nestedtypes;

SELECT COALESCE(s5, s4, s3, s2, s1) FROM nestedtypes;

SELECT COALESCE(s5, s4, s3, s2, s1) FROM nestedtypes WHERE NOT COALESCE(s5, s4, s3, s2, s1) IS NULL;

SELECT UNNEST(COALESCE(s5, s4, s3, s2, s1)) FROM nestedtypes;

PRAGMA enable_verification;

CREATE TABLE exprtest (a INT, b INT);

INSERT INTO exprtest VALUES (42, 10), (43, 100), (NULL, 1), (45, -1);

SELECT * FROM exprtest;

SELECT a FROM exprtest WHERE a BETWEEN 43 AND 44;

SELECT a FROM exprtest WHERE NOT a BETWEEN 43 AND 44;

SELECT a FROM exprtest WHERE a BETWEEN b AND 44;

SELECT CASE a WHEN 42 THEN 100 WHEN 43 THEN 200 ELSE 300 END FROM exprtest;

SELECT CASE WHEN a = 42 THEN 100 WHEN a = 43 THEN 200 ELSE 300 END FROM exprtest;

SELECT CASE WHEN a = 42 THEN 100 WHEN a = 43 THEN 200 END FROM exprtest;

SELECT ABS(1), ABS(-1), ABS(NULL);

SELECT ABS(b) FROM exprtest;

CREATE TABLE intest (a INT, b INT, c INT);

INSERT INTO intest VALUES (42, 42, 42), (43, 42, 42), (44, 41, 44);

SELECT * FROM intest WHERE a IN (42, 43);

SELECT a IN (42, 43) FROM intest;

SELECT * FROM intest WHERE a IN (86, 103, 162);

SELECT * FROM intest WHERE a IN (NULL, NULL, NULL, NULL);

SELECT * FROM intest WHERE a IN (b);

SELECT * FROM intest WHERE a IN (b, c);

SELECT * FROM intest WHERE a IN (43, b) ORDER BY 1;

SELECT * FROM intest WHERE NOT a IN (42, 43);

SELECT * FROM intest WHERE NOT a IN (86, 103, 162) ORDER BY 1;

SELECT * FROM intest WHERE NOT a IN (NULL, NULL);

SELECT * FROM intest WHERE NOT a IN (b) ORDER BY 1;

SELECT * FROM intest WHERE NOT a IN (b, c);

SELECT * FROM intest WHERE NOT a IN (43, b);

SELECT * FROM intest WHERE NULL IN ('a', 'b');

SELECT * FROM intest WHERE NOT NULL IN ('a', 'b');

CREATE TABLE strtest (a INT, b TEXT);

INSERT INTO strtest VALUES (1, 'a'), (2, 'h'), (3, 'd');

INSERT INTO strtest VALUES (4, NULL);

SELECT a FROM strtest WHERE b = 'a';

SELECT a FROM strtest WHERE b <> 'a';

SELECT a FROM strtest WHERE b < 'h';

SELECT a FROM strtest WHERE b <= 'h';

SELECT a FROM strtest WHERE b > 'h';

SELECT a FROM strtest WHERE b >= 'h';

PRAGMA enable_verification;

CREATE VIEW vals (v

SELECT SUM(v) FROM vals;

SELECT SUM(v1.v) FROM vals AS v1, vals AS v2;

PRAGMA enable_verification;

CREATE TABLE a (i INT);

INSERT INTO a VALUES (42), (44);

SELECT rowid, * FROM a;

SELECT rowid + 1 FROM a WHERE CASE WHEN i = 42 THEN rowid = 0 ELSE rowid = 1 END;

SELECT * FROM a;

UPDATE a SET rowid = 5;

INSERT INTO a (rowid, i) VALUES (5, 6);

CREATE TABLE b (rowid INT);

INSERT INTO b VALUES (42), (22);

SELECT * FROM b ORDER BY 1;

SELECT rowid FROM b ORDER BY 1;

UPDATE b SET rowid = 5;

INSERT INTO b (rowid) VALUES (5);

SELECT * FROM b;

PRAGMA enable_verification;

CREATE TABLE a (i INT);

INSERT INTO a VALUES (42);

SELECT rowid + 1, rowid - 1, rowid + rowid, i + rowid FROM a;

SELECT -rowid, rowid, ABS(rowid) FROM a;

SELECT rowid BETWEEN -1 AND 1, 0 BETWEEN rowid AND 1, 1 BETWEEN -3 AND rowid FROM a;

SELECT rowid < i, rowid = NULL, rowid = i, rowid <> 0 FROM a;

SELECT SUM(rowid), MIN(rowid), MAX(rowid), COUNT(rowid), FIRST(rowid) FROM a;

SELECT SUM(rowid), MIN(rowid), MAX(rowid), COUNT(rowid), LAST(rowid) FROM a;

SELECT COUNT(*) FROM a;

SELECT SUM(rowid), MIN(rowid), MAX(rowid), COUNT(rowid), FIRST(rowid), LAST(rowid) FROM a GROUP BY i;

SELECT SUM(i) FROM a GROUP BY rowid;

SELECT * FROM a, a AS a2 WHERE a.rowid = a2.rowid;

SELECT * FROM a, a AS a2 WHERE a.rowid <> a2.rowid;

SELECT * FROM a, a AS a2 WHERE a.rowid >= a2.rowid;

SELECT * FROM a ORDER BY rowid;

INSERT INTO a SELECT rowid FROM a;

SELECT * FROM a ORDER BY 1;

UPDATE a SET i = rowid;

SELECT * FROM a ORDER BY 1;

SELECT * FROM a WHERE rowid = 0;

SELECT * FROM a WHERE rowid BETWEEN -100 AND 100 ORDER BY 1;

SELECT * FROM a WHERE rowid = 0 OR rowid = 1;

SELECT ROW_NUMBER() OVER (PARTITION BY rowid) FROM a ORDER BY rowid;

SELECT ROW_NUMBER() OVER (ORDER BY rowid) FROM a ORDER BY rowid;

SELECT ROW_NUMBER() OVER (ORDER BY rowid DESC) FROM a ORDER BY rowid;

SELECT (SELECT rowid FROM a LIMIT 1);

SELECT 0 IN (SELECT rowid FROM a);

SELECT EXISTS(SELECT rowid FROM a);

SELECT (SELECT a2.rowid FROM a AS a2 WHERE a.rowid = a2.rowid) FROM a;

SELECT a.rowid IN (SELECT a2.rowid FROM a AS a2 WHERE a.rowid >= a2.rowid) FROM a;

SELECT EXISTS(SELECT a2.rowid FROM a AS a2 WHERE a.rowid >= a2.rowid) FROM a;

PRAGMA enable_verification;

SELECT 42;

SELECT 42 + 1;

SELECT 2 * (42 + 1), 35 - 2;

SELECT 'hello';

SELECT CAST('3' AS INT);

SELECT CAST(3 AS TEXT);

SELECT CASE WHEN 43 > 33 THEN 43 ELSE 33 END;

SELECT 1 AS a, a * 2;

SELECT;

SELECT FROM (SELECT 42) AS v1;

SELECT CASE WHEN NOT NOT 84 BETWEEN -78 + 98 * 51 AND -((-28)) * COUNT(*) + -65 THEN NULL ELSE 16 // 34 + -98 END // 70 - (- -CASE -COALESCE(73, -66 * -89 * -72) WHEN COUNT(*) // 4 * CAST(- -18 AS INT) + COUNT(*) - -88 THEN NULL WHEN 92 THEN NULL ELSE COUNT(*) END) AS col0;

PRAGMA enable_verification;

CREATE TABLE a (i INT, j INT);

SELECT i, j FROM a;

SELECT * FROM a;

INSERT INTO a VALUES (42, 84);

SELECT * FROM a;

SELECT x, y FROM a AS i1(x, y);

CREATE TABLE test (a INT, b INT);

INSERT INTO test VALUES (11, 22), (12, 21), (13, 22);

SELECT a, b FROM test;

SELECT a + 2, b FROM test WHERE a = 11;

SELECT a + 2, b FROM test WHERE a = 12;

SELECT CAST(a AS TEXT) FROM test;

SELECT CAST(CAST(a AS TEXT) AS INT) FROM test;

PRAGMA enable_verification;

CREATE TABLE test (a INT, b INT);

INSERT INTO test VALUES (11, 22), (12, 21), (13, 22);

SELECT * FROM test;

SELECT test.* FROM test;

SELECT t.* FROM test AS t;

SELECT test.* FROM test AS t;

SELECT xyz.* FROM test;

SELECT xyz.*;

CREATE TABLE r4 (i INT, j INT);

INSERT INTO r4 (i, j) VALUES (1, 1), (1, 2), (1, 3), (1, 4), (1, 5);

SELECT t1.i, t1.j AS a, t2.j AS b FROM r4 AS t1 INNER JOIN r4 AS t2 USING (i, j) ORDER BY a;

SELECT t1.i, t1.j AS a, t2.j AS b FROM r4 AS t1 INNER JOIN r4 AS t2 ON t1.i = t2.i AND t1.j = t2.j ORDER BY a;

SELECT t1.*, t2.j AS b FROM r4 AS t1 INNER JOIN r4 AS t2 USING (i, j) ORDER BY t1.j;

SELECT t1.*, t2.j AS b FROM r4 AS t1 INNER JOIN r4 AS t2 ON t1.i = t2.i AND t1.j = t2.j ORDER BY t1.j;

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

(VALUES (1, 3), (2, 4));

SELECT * FROM (VALUES (NULL, NULL), (3, 4), (3, 7)) AS v1;

SELECT * FROM (VALUES (1, 2, 3), (1, 2, 3)) AS v1;

SELECT * FROM (VALUES (1 + 1, 2, 3), (1 + 3, 2, 3)) AS v1;

SELECT * FROM (VALUES ((SELECT 42), 2, 3), (1 + 3, 2, 3)) AS v1;

CREATE TABLE test (a INT, b INT);

INSERT INTO test VALUES (1, 2), (3, 4);

SELECT * FROM (VALUES ((SELECT MIN(a) FROM test), 2, 3), ((SELECT MAX(b) FROM test), 2, 3)) AS v1;

SELECT * FROM (VALUES ('hello', 2), (1 + 3, '5'), (CAST('1992-09-20' AS DATE), 3)) AS v1;

SELECT * FROM (VALUES (CAST('1992-09-20' AS DATE), 3), (NULL, NULL)) AS v1;

SELECT * FROM (VALUES (NULL, NULL)) AS v1;

SELECT * FROM (VALUES (NULL, NULL), (3, 4)) AS v1;

SELECT * FROM (VALUES (3), ('42')) AS v1;

SELECT * FROM (VALUES (3), ('hello')) AS v1;

SELECT TYPEOF(x) FROM (VALUES (CAST('1992-01-01' AS DATE)), ('1992-01-01')) AS v1(x) LIMIT 1;

SELECT * FROM (VALUES (NULL), ('hello')) AS v1;

SELECT * FROM (VALUES (1, 2, 3), (1, 2)) AS v1;

SELECT * FROM (VALUES (DEFAULT, 2, 3), (1, 2)) AS v1;

CREATE TABLE varchars (v TEXT);

INSERT INTO varchars VALUES (1), ('hello'), (DEFAULT);

SELECT * FROM varchars ORDER BY 1;

INSERT INTO varchars VALUES (1, 2), ('hello', 3), (DEFAULT, DEFAULT);

INSERT INTO varchars (v) VALUES (1, 2), ('hello', 3), (DEFAULT, DEFAULT);

INSERT INTO varchars (v) VALUES (1, 2), ('hello'), (DEFAULT, DEFAULT);

INSERT INTO varchars (v) VALUES (1, 2), ('hello'), (DEFAULT, DEFAULT);

CREATE TABLE v0 (c1 INT);

INSERT INTO v0 VALUES (1), (2), (3), (4) RETURNING * EXCLUDE (c1);

SELECT * FROM v0;

INSERT INTO v0 VALUES (1), (2), (3), (4), (0);

DELETE FROM v0 WHERE c1 = 0 RETURNING * EXCLUDE (c1);

SELECT * FROM v0 WHERE c1 = 0;

UPDATE v0 SET c1 = 0 WHERE TRUE RETURNING * EXCLUDE (c1);

SELECT * FROM v0 ORDER BY ALL;

SELECT * FROM v0 ORDER BY ALL;

CREATE TABLE table1 (a INT DEFAULT -1, b INT DEFAULT -2, c INT DEFAULT -3);

INSERT INTO table1 (a) SELECT * FROM RANGE(0, 4000, 1) AS t1(a);

DELETE FROM table1 WHERE a < 5 RETURNING a, b, c;

DELETE FROM table1 WHERE a = 6 RETURNING a;

DELETE FROM table1 WHERE a = 7 RETURNING *;

DELETE FROM table1 WHERE a = 8 AND b = -2 AND c = -3 RETURNING *, c, b, a;

DELETE FROM table1 WHERE a = 9 RETURNING c, b, a;

DELETE FROM table1 WHERE a >= 10 AND a <= 13 RETURNING c AS aliasc, a AS aliasa, b AS aliasb;

DELETE FROM table1 WHERE a >= 13 AND a <= 15 RETURNING SUM(a);

DELETE FROM table1 WHERE a = 14 RETURNING a + b + c;

DELETE FROM table1 WHERE a = 10 RETURNING 'duckdb';

DELETE FROM table1 WHERE a = 15 RETURNING 'duckdb';

CREATE TABLE table2 (a2 INT, b2 INT, c2 INT);

CREATE TABLE table3 (a3 INT, b3 INT, c3 INT);

INSERT INTO table2 VALUES (1, 1, 1), (2, 2, 2), (3, 3, 3), (100, 100, 100), (200, 200, 200);

INSERT INTO table3 VALUES (1, 4, 4), (2, 6, 7), (8, 8, 8);

DELETE FROM table3 WHERE a3 IN (SELECT a2 FROM table2) RETURNING *;

CREATE TABLE table4 (a4 INT, b4 INT, c4 INT);

CREATE TABLE table5 (a5 INT, b5 INT, c5 INT);

INSERT INTO table4 VALUES (1, 0, 2), (2, 0, 1), (3, 0, 0);

INSERT INTO table5 VALUES (1, 0, 0), (2, 0, 0), (3, 0, 1), (4, 0, 1), (5, 0, 2), (6, 0, 2);

DELETE FROM table4 WHERE a4 IN (SELECT SUM(a5) FROM table5 GROUP BY c5) RETURNING *;

DELETE FROM table1 WHERE a = 14 RETURNING a IN (SELECT a FROM table1);

DELETE FROM table4 WHERE a4 = 1 RETURNING CASE WHEN b4 = 0 THEN a4 ELSE b4 END;

DELETE FROM table4 WHERE a4 = 2 RETURNING CASE WHEN b4 = 1 THEN a4 ELSE b4 END;

DROP TABLE table2;

DROP TABLE table3;

DROP TABLE table4;

DROP TABLE table5;

CREATE TABLE table2 (a TEXT DEFAULT 'hello world', b INT);

INSERT INTO table2 VALUES ('duckdb', 1), ('postgres', 2), ('sqlite', 3), ('mysql', 4), ('mongo', 5);

DELETE FROM table2 WHERE b = 1 RETURNING a, b;

DELETE FROM table2 WHERE b = 2 RETURNING CAST(b AS TEXT);

DELETE FROM table2 WHERE b = 3 RETURNING {'a': a, 'b': b};

DELETE FROM table2 WHERE b = 4 RETURNING [a, CAST(b AS TEXT)];

CREATE SEQUENCE seq;

CREATE TABLE table3 (a INT DEFAULT NEXTVAL('seq'), b INT);

INSERT INTO table3 (b) VALUES (4), (5) RETURNING a, b;

DELETE FROM table3 WHERE b = 4 RETURNING *;

DROP TABLE table1;

CREATE TABLE table1 (a INT DEFAULT -1, b INT DEFAULT -2, c INT DEFAULT -3);

INSERT INTO table1 (a) SELECT * FROM RANGE(0, 4000, 1) AS t1(a);

SELECT COUNT(*) FROM table1;

DELETE FROM table1 RETURNING a;

CREATE TABLE table1 (a INT DEFAULT -1, b INT DEFAULT -2, c INT DEFAULT -3);

INSERT INTO table1 VALUES (1, 2, 3);

INSERT INTO table1 VALUES (1, 2, 3) RETURNING a;

INSERT INTO table1 VALUES (1, 2, 3) RETURNING *;

INSERT INTO table1 VALUES (1, 2, 3) RETURNING COLUMNS('a|c');

INSERT INTO table1 VALUES (1, 2, 3) RETURNING COLUMNS('a|c') + 42;

INSERT INTO table1 VALUES (10, 20, 30), (40, 50, 60), (70, 80, 90) RETURNING *, c, b, a;

INSERT INTO table1 VALUES (1, 2, 3) RETURNING c, a, b;

INSERT INTO table1 (c, b, a) VALUES (3, 2, 1) RETURNING a, b, c;

INSERT INTO table1 VALUES (1, 2, 3) RETURNING a AS alias1, b AS alias2;

INSERT INTO table1 VALUES (1, 1, 1), (2, 2, 2), (3, 3, 3) RETURNING SUM(a);

INSERT INTO table1 (a) VALUES (10) RETURNING *;

INSERT INTO table1 (a, b, c) SELECT * FROM table1 WHERE a = 10 AND b = -2 AND c = -3 RETURNING *;

INSERT INTO table1 (SELECT ROW_NUMBER() OVER (ORDER BY a) AS row_number, b, c FROM table1 LIMIT 1) RETURNING *;

INSERT INTO table1 (a, b, c) SELECT * FROM table1 WHERE a = 100000 AND b = 10000 AND c = 100000 RETURNING a, b, c;

INSERT INTO table1 (a, b, c) VALUES (10, 1000, 1000) RETURNING a IN (SELECT a FROM table1 WHERE b = -2);

INSERT INTO table1 VALUES (1, 2, 3) RETURNING CASE WHEN b = 2 THEN a ELSE b END;

INSERT INTO table1 VALUES (1, 2, 3) RETURNING CASE WHEN b = 3 THEN a ELSE b END;

INSERT INTO table1 VALUES (1, 1, -3) RETURNING a + b + c;

INSERT INTO table1 VALUES (1, 2, 3) RETURNING 'hello';

INSERT INTO table1 VALUES (1, 2, 3) RETURNING [a, b, c];

INSERT INTO table1 VALUES (1, 2, 3) RETURNING {'a': a, 'b': b, 'c': c};

INSERT INTO table1 (a) (SELECT 42) RETURNING a, b;

INSERT INTO table1 (a) (SELECT 42) RETURNING a, b;

INSERT INTO table1 VALUES (1, 2, 3) RETURNING d, e, f;

INSERT INTO table1 VALUES (1, 2, 3) RETURNING d, e, f;

INSERT INTO table1 VALUES (1, 2, 3) RETURNING [1, 2] IN (SELECT [a, b] FROM table1);

INSERT INTO table1 (a, b) VALUES (42, 43) RETURNING (SELECT a), (SELECT b), NULL;

INSERT INTO table1 VALUES (-10, -20, -30) RETURNING '-10.-20' IN (SELECT GROUP_CONCAT(a) OVER (ORDER BY b) AS GC FROM table1);

CREATE TABLE table2 (a TEXT DEFAULT 'hello world', b INT);

INSERT INTO table2 (a, b) VALUES ('hello duckdb', 1) RETURNING b, a;

INSERT INTO table2 (b) VALUES (97) RETURNING CAST(b AS TEXT);

INSERT INTO table2 (a, b) VALUES ('duckdb', 97) RETURNING {'a': a, 'b': b};

CREATE SEQUENCE seq;

CREATE TABLE table3 (a INT DEFAULT NEXTVAL('seq'), b INT);

INSERT INTO table3 (b) VALUES (4), (5) RETURNING a, b;

CREATE TABLE table1 (a INT DEFAULT -1, b INT DEFAULT -2, c INT DEFAULT -3);

INSERT INTO table1 (a) SELECT * FROM RANGE(0, 4000, 1) AS t1(a);

SELECT COUNT(*) FROM table1;

INSERT INTO table1 (a, b, c) SELECT a, b, c FROM table1 RETURNING a;

CREATE TABLE table1 (a INT DEFAULT -1, b INT DEFAULT -2, c INT DEFAULT -3);

INSERT INTO table1 (a) SELECT * FROM RANGE(0, 4000, 1) AS t1(a);

UPDATE table1 SET a = -10 WHERE a = 1 RETURNING a, b, c;

UPDATE table1 SET a = a * -2, b = b * 2, c = c * 2 WHERE a = 2 RETURNING a, b, c;

UPDATE table1 SET a = a * -2, b = b * 2, c = c * 2 WHERE a = 3 RETURNING a;

UPDATE table1 SET a = a * -2, b = b * 2, c = c * 2 WHERE a = 4 RETURNING *;

UPDATE table1 SET a = -5, b = 2, c = 1 WHERE a = 5 AND b = -2 AND c = -3 RETURNING *, c, b, a;

UPDATE table1 SET c = 1, b = 2, a = 3 WHERE a = 6 AND b = -2 AND c = -3 RETURNING c, b, a;

UPDATE table1 SET c = 1, b = 2, a = 3 WHERE a = 7 AND b = -2 AND c = -3 RETURNING c AS aliasc, a AS aliasa, b AS aliasb;

UPDATE table1 SET c = 1, b = 5, a = 7 WHERE a > 5 RETURNING SUM(a);

UPDATE table1 SET c = 15 WHERE a = 8 RETURNING *;

UPDATE table1 SET a = -9, b = b + 7 WHERE a = 9 RETURNING a + b + c;

UPDATE table1 SET a = -10 WHERE a = 10 RETURNING 'duckdb';

CREATE TABLE table2 (a2 INT, b2 INT, c2 INT);

CREATE TABLE table3 (a3 INT, b3 INT, c3 INT);

INSERT INTO table2 VALUES (1, 1, 1), (2, 2, 2), (3, 3, 3), (100, 100, 100), (200, 200, 200);

INSERT INTO table3 VALUES (1, 4, 4), (2, 6, 7), (8, 8, 8);

UPDATE table3 SET c3 = t2.c2 FROM table2 AS t2 RETURNING *;

SELECT a3, b3, c3 IN (1, 200) FROM table3;

UPDATE table3 SET b3 = t2.b2 FROM table2 AS t2 WHERE table3.a3 = t2.a2 RETURNING a3, b3, c3 IN (1, 200);

CREATE TABLE table4 (a4 INT, b4 INT, c4 INT);

CREATE TABLE table5 (a5 INT, b5 INT, c5 INT);

INSERT INTO table4 VALUES (1, 0, 2), (2, 0, 1), (3, 0, 0);

INSERT INTO table5 VALUES (1, 0, 0), (2, 0, 0), (3, 0, 1), (4, 0, 1), (5, 0, 2), (6, 0, 2);

UPDATE table4 SET b4 = temp_table.sum_a FROM (SELECT SUM(a5) AS sum_a, c5 FROM table5 GROUP BY c5 ORDER BY sum_a) AS temp_table WHERE table4.c4 = temp_table.c5 RETURNING *;

UPDATE table4 SET b4 = temp_table.row_num FROM (SELECT ROW_NUMBER() OVER (ORDER BY a4) AS row_num, c4 FROM table4) AS temp_table WHERE table4.a4 = temp_table.row_num RETURNING *;

UPDATE table1 SET a = 0, b = 0, c = 0 WHERE a = 10 RETURNING a IN (SELECT a FROM table1);

UPDATE table3 SET a3 = 0, b3 = 0, c3 = 0 FROM table3 AS t3 WHERE t3.a3 = 0 RETURNING *;

UPDATE table3 SET a3 = 0 WHERE a3 = 1 RETURNING CASE WHEN b3 = 1 THEN a3 ELSE b3 END;

UPDATE table3 SET a3 = -1 WHERE a3 = 0 RETURNING CASE WHEN b3 = 2 THEN a3 ELSE b3 END;

DROP TABLE table2;

DROP TABLE table3;

DROP TABLE table4;

DROP TABLE table5;

CREATE TABLE table2 (a TEXT DEFAULT 'hello world', b INT);

INSERT INTO table2 VALUES ('duckdb', 1);

UPDATE table2 SET a = 'hello world' WHERE b = 1 RETURNING a, b;

UPDATE table2 SET b = 100 WHERE b = 1 RETURNING CAST(b AS TEXT);

UPDATE table2 SET a = 'Mr.Duck', b = 99 WHERE b = 100 RETURNING {'a': a, 'b': b};

UPDATE table2 SET b = 98 WHERE b = 99 RETURNING [a, CAST(b AS TEXT)];

CREATE SEQUENCE seq;

CREATE TABLE table3 (a INT DEFAULT NEXTVAL('seq'), b INT);

INSERT INTO table3 (b) VALUES (4), (5) RETURNING a, b;

UPDATE table3 SET b = b + 1 RETURNING *;

CREATE TABLE table4 (a INT, b INT, c INT);

CREATE INDEX b_index ON table4(b);

INSERT INTO table4 VALUES (1, 2, 3), (4, 5, 6), (7, 8, 9);

UPDATE table4 SET b = 10 WHERE b = 2 RETURNING *;

SELECT * FROM table4;

SELECT COUNT(*) FROM table1;

UPDATE table1 SET a = 5 RETURNING a;

CREATE TABLE output (num_rows INT);

CREATE TABLE output (num_rows INT);

WITH some_tab AS (SELECT UNNEST(RANGE(0, 1000)) AS id), some_tab_unq AS (SELECT DISTINCT (id) AS id FROM some_tab), sampled AS (SELECT id FROM some_tab_unq USING SAMPLE BERNOULLI (1 PERCENT)) INSERT INTO output SELECT COUNT(*) AS n_rows FROM sampled;
endloop;

SELECT MIN(num_rows) > 0, COUNT(*) FILTER(WHERE num_rows = 0) = 0 FROM output;

SELECT AVG(rowid), MIN(rowid), MAX(rowid) FROM output WHERE num_rows = 0;

CREATE TABLE t1 AS SELECT range AS id FROM RANGE(0, 1000);

SELECT SETSEED(0.6);

SELECT id FROM t1 USING SAMPLE BERNOULLI (1 PERCENT) REPEATABLE (5);

SELECT id FROM t1 USING SAMPLE BERNOULLI (1 PERCENT) REPEATABLE (5);

PRAGMA enable_verification;

CREATE TABLE all_types AS SELECT * EXCLUDE (small_enum, medium_enum, large_enum, "union", bit) FROM TEST_ALL_TYPES();

COPY all_types TO '__TEST_DIR__/sample_all_types.csv' WITH (FORMAT CSV);

CREATE TABLE all_types_csv_1 AS SELECT * FROM READ_CSV_AUTO('__TEST_DIR__/sample_all_types.csv');

CREATE TABLE all_types_csv_2 AS SELECT * FROM READ_CSV_AUTO('__TEST_DIR__/sample_all_types.csv');

SELECT * FROM all_types_csv_1;

SELECT * FROM all_types_csv_2;

COPY (SELECT * FROM all_types) TO '__TEST_DIR__/sample_all_types.parquet' WITH (FORMAT PARQUET);

CREATE TABLE all_types_parquet_1 AS SELECT * FROM READ_PARQUET('__TEST_DIR__/sample_all_types.parquet');

CREATE TABLE all_types_parquet_2 AS SELECT * FROM READ_PARQUET('__TEST_DIR__/sample_all_types.parquet');

SELECT * FROM all_types_parquet_1;

PRAGMA memory_limit = '10G';

PRAGMA memory_limit = '10G';

PRAGMA enable_verification;

CREATE TABLE integers AS SELECT * FROM RANGE(0, 1000000);

SELECT COUNT(*) FROM integers USING SAMPLE RESERVOIR (99.0 PERCENT);

PRAGMA enable_verification;

SELECT COUNT(*) FROM RANGE(0, 10000) USING SAMPLE RESERVOIR (5 ROWS);

CREATE TABLE test2 AS SELECT i AS a, CAST(i AS TEXT) AS b, CONCAT(i, ' - ', i) AS c FROM REPEAT(1, 1000) AS tbl(i);

SELECT a, b, c FROM test2 USING SAMPLE RESERVOIR (3 ROWS);

SELECT COUNT(*) FROM RANGE(0, 200000) TABLESAMPLE RESERVOIR (90 PERCENT);

SELECT COUNT(*) FROM (SELECT * FROM RANGE(0, 200000) AS tbl(i) WHERE i % 997 <> 0) AS tbl(i) USING SAMPLE RESERVOIR (80 PERCENT);

PRAGMA enable_verification;

CREATE TABLE test (a INT, b INT);

INSERT INTO test VALUES (11, 22), (12, 21), (13, 22);

SELECT COUNT(*) FROM test USING SAMPLE RESERVOIR (0 ROWS);

SELECT COUNT(*) FROM test USING SAMPLE RESERVOIR (1 ROWS);

SELECT COUNT(*) FROM test USING SAMPLE RESERVOIR (1 ROWS);

SELECT COUNT(*) FROM test USING SAMPLE RESERVOIR (3 ROWS);

SELECT COUNT(*) FROM test USING SAMPLE RESERVOIR (10 ROWS);

SELECT COUNT(*) FROM test USING SAMPLE RESERVOIR (3 ROWS);

SELECT COUNT(*) FROM test USING SAMPLE RESERVOIR (3 ROWS) REPEATABLE (3);

SELECT * FROM test ORDER BY a, b USING SAMPLE RESERVOIR (10 ROWS);

SELECT COUNT(*) FROM RANGE(0, 10000) USING SAMPLE RESERVOIR (5 ROWS);

SELECT COUNT(*) FROM RANGE(0, 2000000) USING SAMPLE RESERVOIR (1000100 ROWS);

SELECT COUNT(*) FROM RANGE(0, 2000000) USING SAMPLE RESERVOIR (2 ROWS);

CREATE TABLE test2 AS SELECT i AS a, CAST(i AS TEXT) AS b, CONCAT(i, ' - ', i) AS c FROM REPEAT(1, 1000) AS tbl(i);

SELECT a, b, c FROM test2 USING SAMPLE RESERVOIR (3 ROWS);

SELECT (SELECT COUNT(*) FROM test USING SAMPLE RESERVOIR (1 ROWS));

SELECT (SELECT COUNT(*) + tbl.i FROM test USING SAMPLE RESERVOIR (1 ROWS)) FROM RANGE(0, 3) AS tbl(i) ORDER BY i;

SELECT (SELECT COUNT(*) + tbl.i FROM test USING SAMPLE RESERVOIR (1 ROWS)) FROM RANGE(0, 3) AS tbl(i) ORDER BY i;

SELECT COUNT(*) FROM test USING SAMPLE RESERVOIR ('hello' ROWS);

SELECT COUNT(*) FROM test USING SAMPLE RESERVOIR ('hello' ROWS);

CREATE TABLE integers AS SELECT i FROM RANGE(0, 200) AS tbl(i);

SELECT COUNT(*) FROM integers TABLESAMPLE RESERVOIR (10 ROWS);

SELECT COUNT(*) FROM integers TABLESAMPLE RESERVOIR (10 PERCENT);

SELECT COUNT(*) FROM integers TABLESAMPLE RESERVOIR (10 PERCENT);

SELECT COUNT(*) FROM integers TABLESAMPLE RESERVOIR (10 ROWS);

SELECT COUNT(*) FROM integers TABLESAMPLE RESERVOIR (10 ROWS);

SELECT COUNT(*) FROM integers TABLESAMPLE RESERVOIR (10 ROWS);

SELECT COUNT(*) FROM integers TABLESAMPLE RESERVOIR (10 ROWS);

SELECT COUNT(*) FROM integers TABLESAMPLE RESERVOIR (10 ROWS) REPEATABLE (250);

SELECT COUNT(*) FROM RANGE(0, 200) TABLESAMPLE RESERVOIR (10 PERCENT);

SELECT COUNT(*) FROM (SELECT * FROM RANGE(0, 200)) AS tbl(i) TABLESAMPLE RESERVOIR (10 PERCENT);

SELECT * FROM RANGE(0, 100) TABLESAMPLE RESERVOIR (10 ROWS) REPEATABLE (250);

SELECT * FROM RANGE(0, 100) TABLESAMPLE BERNOULLI (10 PERCENT) REPEATABLE (250);

SELECT * FROM RANGE(0, 100) TABLESAMPLE SYSTEM (10 PERCENT) REPEATABLE (250);

SELECT COUNT(*) FROM RANGE(0, 1000) USING SAMPLE RESERVOIR (0.01 PERCENT);

SELECT COUNT(*) FROM RANGE(0, 1000) USING SAMPLE RESERVOIR (0.1 PERCENT);

SELECT * FROM integers USING SAMPLE RESERVOIR (5 ROWS);

SELECT * FROM integers USING SAMPLE RESERVOIR (5 ROWS);

SELECT * FROM integers USING SAMPLE SYSTEM (10000 PERCENT);

SELECT i FROM integers USING SAMPLE RESERVOIR (1 ROWS) REPEATABLE (0);

SELECT i FROM integers USING SAMPLE RESERVOIR (1 ROWS) REPEATABLE (0);

SELECT i FROM integers ORDER BY i USING SAMPLE RESERVOIR (1 PERCENT) REPEATABLE (0);

SELECT i FROM integers ORDER BY i USING SAMPLE RESERVOIR (1 PERCENT) REPEATABLE (0);

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

SELECT COUNT(*) FROM DUCKDB_TABLE_SAMPLE('t1');

SELECT COUNT(*) FROM DUCKDB_TABLE_SAMPLE('t1') WHERE a > 1;

SELECT COUNT(*) FROM (SELECT CAST((FLOOR(range / 200000)) AS INT) AS a FROM RANGE(0, 204800) USING SAMPLE RESERVOIR (1 PERCENT)) AS t1 WHERE a >= 1;

CREATE TABLE materialized_range AS SELECT 1 AS a FROM RANGE(0, 102400);

SELECT COUNT(*) FROM DUCKDB_TABLE_SAMPLE('materialized_range');

INSERT INTO materialized_range SELECT 2 AS a FROM RANGE(0, 102400);

SELECT COUNT(*) FROM DUCKDB_TABLE_SAMPLE('materialized_range');

SELECT a, COUNT(*) FROM DUCKDB_TABLE_SAMPLE('materialized_range') GROUP BY ALL ORDER BY a;

INSERT INTO materialized_range SELECT 3 AS a FROM RANGE(0, 102400);

SELECT COUNT(*) FROM DUCKDB_TABLE_SAMPLE('materialized_range');

SELECT a, COUNT(*) > 650 FROM DUCKDB_TABLE_SAMPLE('materialized_range') GROUP BY ALL ORDER BY a;

PRAGMA enable_verification;

CREATE TABLE materialized_range AS SELECT * FROM RANGE(0, 5000000);

CREATE TABLE integers_1 AS (SELECT (range + 5) AS a, range AS b, GET_CURRENT_TIME() AS time FROM materialized_range);

SELECT CAST(a AS INT), b FROM DUCKDB_TABLE_SAMPLE('integers_1') ORDER BY ALL;

CREATE TABLE integers_2 AS (SELECT (range + 5) AS a, range AS b, GET_CURRENT_TIME() AS time FROM materialized_range);

SELECT CAST(a AS INT), b FROM DUCKDB_TABLE_SAMPLE('integers_2') ORDER BY ALL;

CREATE OR REPLACE TABLE integers_1 AS (SELECT (range + 5) AS a, range AS b FROM materialized_range);

CREATE OR REPLACE TABLE integers_2 AS (SELECT (range + 5) AS a, range AS b FROM materialized_range);

SELECT COUNT(*) FROM (SELECT b FROM DUCKDB_TABLE_SAMPLE('integers_1') INTERSECT (SELECT b FROM integers_1));

SELECT COUNT(*) FROM (SELECT b FROM DUCKDB_TABLE_SAMPLE('integers_2') INTERSECT (SELECT b FROM integers_2));

SELECT COUNT(*) FROM DUCKDB_TABLE_SAMPLE('integers_1');

SELECT COUNT(*) FROM DUCKDB_TABLE_SAMPLE('integers_2');

SELECT FLOOR(b / 1000000) AS interval, COUNT(*) AS frequency FROM DUCKDB_TABLE_SAMPLE('integers_1') GROUP BY interval ORDER BY ALL;

INSERT INTO integers_1 (SELECT (range + 5) AS a, range AS b FROM RANGE(5000000, 6000000));

SELECT FLOOR(b / 1000000) AS interval, COUNT(*) AS frequency FROM DUCKDB_TABLE_SAMPLE('integers_1') GROUP BY interval ORDER BY ALL;

INSERT INTO integers_1 (SELECT -1, -1 FROM RANGE(0, 6000000));

SELECT COUNT(*) FROM integers_1;

SELECT COUNT(*) FROM DUCKDB_TABLE_SAMPLE('integers_1') WHERE a = -1 AND b = -1;

SELECT COUNT(*) FROM DUCKDB_TABLE_SAMPLE('integers_1') WHERE a = -1 AND b = -1;

CREATE VIEW sample_view AS SELECT * FROM DUCKDB_TABLE_SAMPLE('integers_1');

INSERT INTO integers_1 (SELECT -2, -2 FROM RANGE(0, 6000000));

SELECT COUNT(*) FROM sample_view WHERE a = -2 AND b = -2;

SELECT COUNT(*) FROM sample_view WHERE a = -2 AND b = -2;

INSERT INTO integers_1 (SELECT -3, -3 FROM RANGE(0, 7000));

SELECT COUNT(*) FROM sample_view WHERE a = -3 AND b = -3;

CREATE OR REPLACE TABLE integers_1 AS SELECT range AS a, range + 1 AS b FROM RANGE(0, 102400);

SELECT COUNT(*) FROM DUCKDB_TABLE_SAMPLE('integers_1') ORDER BY ALL;

DELETE FROM integers_1 WHERE a = 3;

SELECT COUNT(*) FROM DUCKDB_TABLE_SAMPLE('integers_1') ORDER BY ALL;

CREATE OR REPLACE TABLE integers_1 AS SELECT range AS a, range + 1 AS b FROM RANGE(0, 102400);

SELECT COUNT(*) FROM DUCKDB_TABLE_SAMPLE('integers_1');

UPDATE integers_1 SET a = 5 WHERE a = 1;

SELECT * FROM DUCKDB_TABLE_SAMPLE('integers_1');

CREATE OR REPLACE TABLE integers_1 AS SELECT range AS a, range + 1 AS b FROM RANGE(0, 204800);

SELECT COUNT(*) FROM DUCKDB_TABLE_SAMPLE('integers_1');

ALTER TABLE integers_1 ADD COLUMN c DOUBLE;

SELECT * FROM DUCKDB_TABLE_SAMPLE('integers_1');

CREATE OR REPLACE TABLE integers_1 AS SELECT range AS a, range + 1 AS b FROM RANGE(0, 102400);

SELECT COUNT(*) FROM DUCKDB_TABLE_SAMPLE('integers_1');

ALTER TABLE integers_1 ALTER COLUMN b SET DATA TYPE TEXT;

SELECT * FROM DUCKDB_TABLE_SAMPLE('integers_1');

CREATE OR REPLACE TABLE integers_1 AS SELECT range AS a, range + 1 AS b FROM RANGE(0, 102400);

SELECT COUNT(*) FROM DUCKDB_TABLE_SAMPLE('integers_1');

ALTER TABLE integers_1 drop b;

SELECT * FROM DUCKDB_TABLE_SAMPLE('integers_1');

CREATE OR REPLACE TABLE integers_1 AS SELECT range AS a, range + 1 AS b FROM RANGE(0, 500);

SELECT COUNT(*) FROM DUCKDB_TABLE_SAMPLE('integers_1');

ALTER TABLE integers_1 drop b;

SELECT * FROM DUCKDB_TABLE_SAMPLE('integers_1');

INSERT INTO integers_1 SELECT range AS a FROM RANGE(0, 500);

SELECT * FROM DUCKDB_TABLE_SAMPLE('integers_1');

PRAGMA enable_verification;

CREATE TABLE string_samples AS SELECT CAST(range AS TEXT) AS a FROM RANGE(0, 204800);

SELECT COUNT(*) FROM DUCKDB_TABLE_SAMPLE('string_samples') WHERE a IS NULL;

CREATE TABLE struct_samples AS SELECT {'key1': 'quack-a-lack', 'key2': range} AS a FROM RANGE(0, 204800);

SELECT COUNT(*) FROM DUCKDB_TABLE_SAMPLE('struct_samples') WHERE a IS NULL;

CREATE TABLE blob_samples AS SELECT CAST('\xAA\xAB\xAC' AS BLOB) AS a FROM RANGE(0, 204800);

SELECT COUNT(*) FROM DUCKDB_TABLE_SAMPLE('blob_samples') WHERE a IS NULL;

CREATE TABLE integral_samples AS SELECT CAST(range AS BIGINT) AS a, CAST(range AS DOUBLE) AS b, CAST(range AS REAL) AS c, CAST(range AS INT128) AS d, INTERVAL '1' YEAR AS e FROM RANGE(0, 204800);

CREATE TABLE integral_samples AS SELECT CAST(range AS BIGINT) AS a, CAST(range AS DOUBLE) AS b, CAST(range AS REAL) AS c, CAST(range AS INT128) AS d, INTERVAL '1' YEAR AS e FROM RANGE(0, 204800);

CREATE TABLE integral_samples AS SELECT CAST(range AS BIGINT) AS a, CAST(range AS DOUBLE) AS b, CAST(range AS REAL) AS c, CAST(range AS INT128) AS d, INTERVAL '1' YEAR AS e FROM RANGE(0, 204800);

CREATE TABLE integral_samples AS SELECT CAST(range AS BIGINT) AS a, CAST(range AS DOUBLE) AS b, CAST(range AS REAL) AS c, CAST(range AS INT128) AS d, INTERVAL '1' YEAR AS e FROM RANGE(0, 204800);

CREATE TABLE integral_samples AS SELECT CAST(range AS BIGINT) AS a, CAST(range AS DOUBLE) AS b, CAST(range AS REAL) AS c, CAST(range AS INT128) AS d, INTERVAL '1' YEAR AS e FROM RANGE(0, 204800);

SELECT COUNT(*) FROM DUCKDB_TABLE_SAMPLE('integral_samples') WHERE e IS NULL;

CREATE OR REPLACE TABLE t1 AS SELECT range AS a, [1, a, 2] AS b, CAST(a AS TEXT) || 'ducktastic' AS c, GET_CURRENT_TIMESTAMP() AS d FROM RANGE(0, 1000000);

SELECT COUNT(*) FROM DUCKDB_TABLE_SAMPLE('t1') WHERE b IS NULL;

SELECT COUNT(*) FROM DUCKDB_TABLE_SAMPLE('t1') WHERE c IS NULL;

SELECT COUNT(*) FROM DUCKDB_TABLE_SAMPLE('t1') WHERE d IS NULL;

CREATE TABLE t1 AS SELECT range AS a FROM RANGE(0, 204800);

CREATE VIEW v1 AS SELECT * FROM t1;

SELECT * FROM DUCKDB_TABLE_SAMPLE('v1');

SELECT * FROM DUCKDB_TABLE_SAMPLE('a');

PRAGMA enable_verification;
require AS httpfs;

SET allow_persistent_secrets = FALSE;

reset AS s3_use_ssl;

CREATE SECRET default_provider_secret (
TYPE S3,
KEY_ID 'my_key',
SECRET 'my_secret',
REGION 'my_region',
ENDPOINT 'invalid-on-purpose'
);

SELECT name, type, scope FROM DUCKDB_SECRETS() WHERE name = 'default_provider_secret';

SELECT * FROM "s3://test-bucket/test.csv";

CREATE SECRET secret_scope_1 (
TYPE S3,
PROVIDER config,
SCOPE 's3://b1',
ENDPOINT 'invalid-on-purpose-2'
);

SELECT name, type, scope FROM DUCKDB_SECRETS() WHERE name = 'secret_scope_1';

SELECT * FROM "s3://b1/test.csv";

CREATE SECRET secret_scope_2 (
TYPE S3,
PROVIDER config,
SCOPE ['s3://b2', 's3://b3'],
ENDPOINT 'invalid-on-purpose-3'
);

SELECT name, type, scope FROM DUCKDB_SECRETS() WHERE name = 'secret_scope_2';

SELECT * FROM "s3://b2/test.csv";

PRAGMA enable_verification;
require AS httpfs;

SET allow_persistent_secrets = FALSE;

CREATE SECRET s1 (
TYPE R2,
PROVIDER config,
SCOPE ['s3://my_r2_scope', 's3://my_r2_scope2'],
ACCOUNT_ID 'some_bogus_account',
KEY_ID '123',
USE_SSL 1,
URL_COMPATIBILITY_MODE false
);

SELECT * FROM DUCKDB_SECRETS();

DROP SECRET s1;

CREATE SECRET s1 (
TYPE R2,
PROVIDER config,
SCOPE ['s3://my_r2_scope', 's3://my_r2_scope2'],
account_id 'some_bogus_account',
key_id 123,
USE_SSL 'true',
URL_COMPATIBILITY_MODE '0'
);

SELECT * FROM DUCKDB_SECRETS();

CREATE SECRET incorrect_type (
TYPE R2,
PROVIDER config,
USE_SSL 'fliepflap'
);

CREATE SECRET incorrect_type (
TYPE R2,
PROVIDER config,
FLIEPFLAP true
);

CREATE SECRET incorrect_type (
TYPE S3,
PROVIDER config,
ACCOUNT_ID 'my_acount'
);

CREATE SECRET duplicate_param (
TYPE R2,
PROVIDER config,
account_id 'some_bogus_account',
key_id 123,
KEY_ID 12098,
account_id blablabla
);

PRAGMA enable_verification;
require AS httpfs;

SET allow_persistent_secrets = FALSE;

SET s3_endpoint = 'invalid-on-purpose-setting';

SET s3_url_style = 'path';

SET s3_use_ssl = FALSE;

CREATE SECRET s1 (
TYPE S3,
REGION 'my_region',
URL_STYLE 'vhost',
SCOPE 's3://url-style-only'
);

CREATE SECRET s2 (
TYPE S3,
REGION 'my_region',
URL_STYLE 'vhost',
ENDPOINT 'invalid-on-purpose-secret',
SCOPE 's3://url-style-and-endpoint'
);

SELECT * FROM "s3://url-style-only/test.csv";

SELECT * FROM "s3://url-style-and-endpoint/test.csv";

SELECT * FROM "s3://test-bucket/test.csv";

PRAGMA enable_verification;
require AS httpfs;

SET allow_persistent_secrets = FALSE;

DROP SECRET IF EXISTS s1;

DROP SECRET IF EXISTS s1;

SELECT name, provider, type, scope FROM DUCKDB_SECRETS();

SELECT name, provider, type, scope FROM DUCKDB_SECRETS();

SELECT name, provider, type, scope FROM DUCKDB_SECRETS() ORDER BY name;

SELECT name, provider, type, scope FROM DUCKDB_SECRETS() ORDER BY name;

SELECT name, persistent, storage, provider, type, scope FROM DUCKDB_SECRETS() ORDER BY name;

PRAGMA enable_verification;

CREATE TABLE bearer_tokens AS SELECT 'blablab';

SET VARIABLE my_bearer_token='hocus pocus this token is bogus';

CREATE SECRET http (TYPE HTTP, BEARER_TOKEN getvariable('my_bearer_token'));

SELECT secret_string.split(';')[-1] FROM DUCKDB_SECRETS() WHERE name = 'http';

CREATE SECRET scope_as_struct (TYPE HTTP, BEARER_TOKEN some_field, scope ('hi', 'hello'));

SELECT scope FROM DUCKDB_SECRETS() WHERE name = 'scope_as_struct';

PRAGMA enable_verification;
require AS httpfs;

SET allow_persistent_secrets = FALSE;

reset AS s3_use_ssl;

reset AS s3_use_ssl;

SELECT name, type, provider, scope FROM DUCKDB_SECRETS();

SELECT * FROM "gcs://test-bucket/test.csv";

PRAGMA enable_verification;
require AS httpfs;

SET allow_persistent_secrets = FALSE;

CREATE SECRET hf1 (
TYPE HUGGINGFACE,
TOKEN 'bla'
);

CREATE SECRET hf2 (
TYPE HUGGINGFACE,
PROVIDER 'credential_chain'
);

SELECT name, type, provider, scope FROM DUCKDB_SECRETS() ORDER BY name;

PRAGMA enable_verification;

SET allow_persistent_secrets = FALSE;

CREATE SECRET hf1 (
TYPE HUGGINGFACE,
TOKEN 'bla'
);

CREATE SECRET hf1 (
TYPE HUGGINGFACE,
PROVIDER config,
TOKEN 'bla'
);

CREATE SECRET hf2 (
TYPE HUGGINGFACE,
PROVIDER 'credential_chain'
);

PRAGMA enable_verification;

CREATE PERSISTENT SECRET http_multimap (
TYPE HTTP,
EXTRA_HTTP_HEADERS MAP{123: 'quack1', 123 : 'quack2'}
);

CREATE PERSISTENT SECRET http_multimap (
TYPE HTTP,
EXTRA_HTTP_HEADERS MAP{NULL: 'quack1', 123 : 'quack2'}
);

PRAGMA enable_verification;

SET secret_directory = '__TEST_DIR__/create_secret_minio';

SET s3_access_key_id = '';

SET s3_secret_access_key = '';

COPY SELECT 1 AS a TO 's3://test- /test-file.parquet';

CREATE PERSISTENT SECRET (
TYPE S3,
PROVIDER config,
SCOPE 's3://test-bucket/only-this-file-gets-auth.parquet',
KEY_ID '${AWS_ACCESS_KEY_ID}',
SECRET '${AWS_SECRET_ACCESS_KEY}',
REGION '${AWS_DEFAULT_REGION}',
ENDPOINT '${DUCKDB_S3_ENDPOINT}',
USE_SSL '${DUCKDB_S3_USE_SSL}'
);

COPY (SELECT 1 AS a) TO 's3://test-bucket/test-file.parquet';

COPY (SELECT 1 AS a) TO 's3://test-bucket/only-this-file-gets-auth.parquet' WITH (restart);

SET secret_directory = '__TEST_DIR__/create_secret_minio';

COPY (SELECT 1 AS a) TO 's3://test-bucket/only-this-file-gets-auth.parquet';

COPY (SELECT 1 AS a) TO 's3://test-bucket/no-auth-here.parquet';

PRAGMA enable_verification;
load __TEST_DIR__/persistent_secrets.db
require httpfs;

SET secret_directory = '__TEST_DIR__/create_secret_name_conflicts';

CREATE TEMPORARY SECRET s1 ( TYPE S3 );

CREATE TEMPORARY SECRET s1 ( TYPE S3 );

CREATE PERSISTENT SECRET s1 ( TYPE S3 );

CREATE PERSISTENT SECRET s1 ( TYPE S3 );

DROP SECRET s1;

DROP SECRET s1 FROM bogus;

DROP TEMPORARY SECRET s1;

DROP TEMPORARY SECRET s1;

SELECT name, storage FROM DUCKDB_SECRETS();

SET secret_directory = '__TEST_DIR__/create_secret_name_conflicts';

CREATE TEMPORARY SECRET s1 ( TYPE S3 );

DROP SECRET s1;

DROP PERSISTENT SECRET s1 FROM LOCAL_FILE;

CREATE PERSISTENT SECRET IF NOT EXISTS s1 ( TYPE S3 );

SELECT name, storage FROM DUCKDB_SECRETS() ORDER BY storage;

DROP PERSISTENT SECRET s1;

PRAGMA enable_verification;
load __TEST_DIR__/create_secret_non_writable_persistent_dir.db
require httpfs;

COPY (SELECT 1 AS a) TO '__TEST_DIR__/file_to_prevent_the_secret_dir_from_being_created.csv';

SET secret_directory = '__TEST_DIR__/file_to_prevent_the_secret_dir_from_being_created.csv';

CREATE SECRET my_tmp_secret (
TYPE S3,
SCOPE 's3://bucket1'
);

CREATE PERSISTENT SECRET my_tmp_secret (
TYPE S3,
SCOPE 's3://bucket2'
);

SET secret_directory = '__TEST_DIR__/create_secret_non_writable_persistent_dir/a/deeply/nested/folder/will/be/created';

CREATE PERSISTENT SECRET my_tmp_secret (
TYPE S3,
SCOPE 's3://bucket2'
);

PRAGMA enable_verification;
require AS httpfs;

SET allow_persistent_secrets = FALSE;

CREATE SECRET my_secret (
TYPE S3,
SCOPE 's3://bucket1'
);

SELECT name, scope FROM DUCKDB_SECRETS();

CREATE SECRET my_secret (
TYPE S3,
KEY_ID 'my_key',
SECRET 'my_secret',
SCOPE 's3://bucket1'
);

CREATE OR REPLACE SECRET my_secret (
TYPE S3,
SCOPE 's3://bucket2'
);

SELECT name, scope FROM DUCKDB_SECRETS();

CREATE SECRET IF NOT EXISTS my_secret (
TYPE S3,
SCOPE 's3://bucket5'
);

SELECT name, scope FROM DUCKDB_SECRETS();

DROP SECRET my_secret_does_not_exist;

DROP SECRET my_secret;

SELECT name, scope FROM DUCKDB_SECRETS();

PRAGMA enable_verification;
load __TEST_DIR__/persistent_secrets.db
require httpfs;

SET secret_directory = '__TEST_DIR__/create_secret_persistence';

CREATE SECRET my_tmp_secret (
TYPE S3,
SCOPE 's3://bucket1'
);

CREATE TEMPORARY SECRET my_tmp_secret_2 (
TYPE S3,
SCOPE 's3://bucket2'
);

CREATE OR REPLACE PERSISTENT SECRET my_tmp_secret_3 (
TYPE S3,
SCOPE 's3://bucket3'
);

SELECT name, storage, scope FROM DUCKDB_SECRETS() WHERE storage = 'memory' ORDER BY name;

SELECT name, scope FROM DUCKDB_SECRETS() WHERE storage <> 'memory';

SET secret_directory = '__TEST_DIR__/create_secret_persistence';

SELECT name, scope FROM DUCKDB_SECRETS();

SET secret_directory = '__TEST_DIR__/create_secret_persistence';

CREATE PERSISTENT SECRET my_tmp_secret_3 (
TYPE S3,
SCOPE 's3://bucket3_not_used'
);

SET secret_directory = '__TEST_DIR__/create_secret_persistence';

CREATE PERSISTENT SECRET my_tmp_secret_3 (
TYPE S3,
SCOPE 's3://bucket3_not_used'
);

SET secret_directory = '__TEST_DIR__/create_secret_persistence';

CREATE SECRET IF NOT EXISTS my_tmp_secret_3 (
TYPE S3,
SCOPE 's3://bucket3_not_used'
);

SELECT name, storage, scope FROM DUCKDB_SECRETS() WHERE name = 'my_tmp_secret_3' ORDER BY storage;

SET secret_directory = '__TEST_DIR__/create_secret_persistence';

CREATE PERSISTENT SECRET IF NOT EXISTS my_tmp_secret_3 (
TYPE S3,
SCOPE 's3://bucket3_not_used'
);

CREATE PERSISTENT SECRET IF NOT EXISTS my_tmp_secret_3 (
TYPE S3,
SCOPE 's3://bucket3_not_used'
);

SELECT name, scope FROM DUCKDB_SECRETS();

SET secret_directory = '__TEST_DIR__/create_secret_persistence';

SELECT name, scope FROM DUCKDB_SECRETS();

CREATE OR REPLACE PERSISTENT SECRET my_tmp_secret_3 (
TYPE S3,
SCOPE 's3://bucket3_updated'
);

SELECT name, scope FROM DUCKDB_SECRETS();

SET secret_directory = '__TEST_DIR__/create_secret_persistence';

SELECT name, scope FROM DUCKDB_SECRETS();

CREATE PERSISTENT SECRET IF NOT EXISTS my_tmp_secret_4 (
TYPE S3,
SCOPE 's3://another_secret'
);

SELECT name, scope FROM DUCKDB_SECRETS() ORDER BY name;

DROP SECRET my_tmp_secret_3;

SELECT name, scope FROM DUCKDB_SECRETS();

SET secret_directory = '__TEST_DIR__/create_secret_persistence';

SELECT name, storage, scope FROM DUCKDB_SECRETS() ORDER BY name;

PRAGMA enable_verification;
load __TEST_DIR__/create_secret_persistence_error_handling.db
require httpfs;

SET secret_directory = '__TEST_DIR__/create_secret_persistence_error_handling';

COPY (SELECT 1 AS a, 2 AS b) TO '__TEST_DIR__/create_secret_persistence_error_handling/' WITH (FORMAT csv, PARTITION_BY a);

COPY (SELECT 1 AS a) TO '__TEST_DIR__/create_secret_persistence_error_handling/s1.duckdb_secret' WITH (FORMAT csv);

SELECT * FROM DUCKDB_SECRETS();

SET secret_directory = '__TEST_DIR__/create_secret_persistence_error_handling2';

CREATE PERSISTENT SECRET s1 (TYPE S3);
restart AS no_extension_load;

SET secret_directory = '__TEST_DIR__/create_secret_persistence_error_handling2';

SET autoload_known_extensions = FALSE;

SELECT * FROM DUCKDB_SECRETS();

PRAGMA enable_verification;

SET secret_directory = '__TEST_DIR__/create_secret_persistence_no_client_context';

CREATE PERSISTENT SECRET s1 ( TYPE HTTP )
restart;

SET secret_directory = '__TEST_DIR__/create_secret_persistence_no_client_context';

SET secret_directory = '__TEST_DIR__/create_secret_persistence_no_client_context';

PRAGMA enable_verification;
require AS httpfs;

SET secret_directory = '__TEST_DIR__/create_secret_r2';

SET secret_directory = '__TEST_DIR__/create_secret_r2';

SELECT name, type, provider, scope FROM DUCKDB_SECRETS();

SELECT name, type, provider, scope FROM DUCKDB_SECRETS();

SELECT name, type, provider, scope FROM DUCKDB_SECRETS();

SELECT name, type, provider, scope FROM DUCKDB_SECRETS();

PRAGMA enable_verification;

SET secret_directory = '__TEST_DIR__/create_secret_r2_serialization';

CREATE OR REPLACE PERSISTENT SECRET s1 (
TYPE S3,
PROVIDER config,
SCOPE 's3://my_scope',
KEY_ID 'mekey',
SECRET 'mesecret',
REGION 'meregion',
SESSION_TOKEN 'mesesh',
ENDPOINT 'meendpoint',
URL_STYLE 'mahstyle',
USE_SSL true,
URL_COMPATIBILITY_MODE true
);

SELECT name, type, provider, scope FROM DUCKDB_SECRETS();

SELECT * FROM DUCKDB_SECRETS();

SET secret_directory = '__TEST_DIR__/does_not_exist2';

SELECT COUNT(*) FROM DUCKDB_SECRETS();

SET secret_directory = '__TEST_DIR__/create_secret_r2_serialization';

SELECT name, type, provider, scope FROM DUCKDB_SECRETS();

SELECT * FROM DUCKDB_SECRETS();

PRAGMA enable_verification;

SET secret_directory = '__TEST_DIR__/create_secret_s3_serialization';

CREATE OR REPLACE PERSISTENT SECRET s1 (
TYPE S3,
PROVIDER config,
SCOPE 's3://my_s3_scope',
KEY_ID 'mekey',
SECRET 'mesecret',
REGION 'meregion',
SESSION_TOKEN 'mesesh',
ENDPOINT 'meendpoint',
URL_STYLE 'mahstyle',
USE_SSL true,
URL_COMPATIBILITY_MODE true
);

CREATE OR REPLACE PERSISTENT SECRET s2 (
TYPE R2,
PROVIDER config,
SCOPE 's3://my_r2_scope',
ACCOUNT_ID 'some_bogus_account',
KEY_ID 'mekey',
SECRET 'mesecret',
SESSION_TOKEN 'mesesh',
URL_STYLE 'mahstyle',
USE_SSL 1,
URL_COMPATIBILITY_MODE 1
);

CREATE OR REPLACE PERSISTENT SECRET s3 (
TYPE GCS,
PROVIDER config,
SCOPE 's3://my_gcs_scope',
KEY_ID 'mekey',
SECRET 'mesecret',
SESSION_TOKEN 'mesesh',
URL_STYLE 'mahstyle',
USE_SSL true,
URL_COMPATIBILITY_MODE true
);

SELECT name, type, provider, scope FROM DUCKDB_SECRETS() ORDER BY name;

SELECT secret_string FROM DUCKDB_SECRETS(redact = FALSE) ORDER BY type;

SET secret_directory = '__TEST_DIR__/does_not_exist1';

SELECT COUNT(*) FROM DUCKDB_SECRETS(redact = FALSE);

SET secret_directory = '__TEST_DIR__/create_secret_s3_serialization';

SELECT name, type, provider, scope FROM DUCKDB_SECRETS() ORDER BY name;

SELECT secret_string FROM DUCKDB_SECRETS(redact = FALSE) ORDER BY type;

PRAGMA enable_verification;
require AS httpfs;

SET secret_directory = '__TEST_DIR__/create_secret_scope_matching';

SELECT name FROM WHICH_SECRET('s3://', 's3');

CREATE TEMPORARY SECRET t1 ( TYPE S3 );

CREATE TEMPORARY SECRET t2 ( TYPE S3 );

CREATE SECRET p1 IN LOCAL_FILE ( TYPE S3 );

SELECT name FROM WHICH_SECRET('s3://', 's3');

SELECT * FROM WHICH_SECRET('s3://', 's3');

DROP SECRET t1;

SELECT name FROM WHICH_SECRET('s3://', 's3');

DROP SECRET t2;

SELECT name FROM WHICH_SECRET('s3://', 's3');

DROP SECRET p1;

PRAGMA enable_verification;
load __TEST_DIR__/secrets_settings.db
require httpfs;

SET secret_directory = '__TEST_DIR__/create_secret_settings1';

SET allow_persistent_secrets = TRUE;

CREATE PERSISTENT SECRET my_perm_secret (
TYPE S3,
SCOPE 's3://bucket1'
);

SELECT name, scope FROM DUCKDB_SECRETS();

SET secret_directory = '__TEST_DIR__/create_secret_settings2';

SET allow_persistent_secrets = FALSE;

SET default_secret_storage = 'local_file';

reset AS default_secret_storage;
restart;

SET allow_persistent_secrets = FALSE;

SELECT COUNT(*) FROM DUCKDB_SECRETS();

SET allow_persistent_secrets = TRUE;

SET secret_directory = '__TEST_DIR__/create_secret_settings1';

SELECT name, scope FROM DUCKDB_SECRETS();

PRAGMA enable_verification;
require AS httpfs;

SET allow_persistent_secrets = FALSE;

CREATE TEMPORARY SECRET s1 IN LOCAL_FILE ( TYPE S3 );

CREATE PERSISTENT SECRET s1 IN NON_EXISTENT_SECRET_STORAGE ( TYPE S3 );

CREATE PERSISTENT SECRET perm_s1 ( TYPE S3 );

SET allow_persistent_secrets = TRUE;

SET secret_directory = '__TEST_DIR__/create_secret_storages';

CREATE PERSISTENT SECRET perm_s1 ( TYPE S3 );

CREATE SECRET perm_s2 IN LOCAL_FILE ( TYPE S3 );

CREATE TEMPORARY SECRET temp_s1 ( TYPE s3 );

CREATE SECRET temp_s2 ( TYPE s3 );

SELECT * EXCLUDE (secret_string) FROM DUCKDB_SECRETS() ORDER BY name;

SET default_secret_storage = 'currently-non-existent';

SET secret_directory = '__TEST_DIR__/create_secret_storages';

CREATE PERSISTENT SECRET s1 ( TYPE S3 );

CREATE PERSISTENT SECRET s1 IN LOCAL_FILE ( TYPE S3 )
restart;

SET secret_directory = '__TEST_DIR__/create_secret_storages';

reset AS default_secret_storage;

CREATE PERSISTENT SECRET s2 ( TYPE S3 );

SELECT * EXCLUDE (secret_string) FROM DUCKDB_SECRETS() ORDER BY name;

DROP SECRET perm_s1;

DROP SECRET perm_s2;

CREATE PERSISTENT SECRET http (
TYPE HTTP,
EXTRA_HTTP_HEADERS MAP {
'Authorization': 'Bearer sk_test_not_valid_key'
}
);
restart;

SELECT UNNEST(data) AS customers FROM READ_JSON('https://non.existant/endpoint');

SET secret_directory = './data/secrets/http';

SELECT * FROM DUCKDB_SECRETS();

set secret_directory='./data/secrets/httpfs'
mode output_result;

SELECT * FROM DUCKDB_SECRETS() ORDER BY name;

SELECT * FROM DUCKDB_SECRET_TYPES() WHERE type IN ('s3', 'r2', 'gcs', 'http') ORDER BY type;

SELECT * FROM DUCKDB_SECRET_TYPES() WHERE type IN ('s3', 'r2', 'gcs', 'http') ORDER BY type;

PRAGMA enable_verification;

CREATE SCHEMA test;

CREATE TABLE test.tbl (col INT);

INSERT INTO test.tbl VALUES (1), (2), (3);

SELECT test.tbl.col FROM test.tbl;

SELECT test.t.col FROM test.tbl AS t;

SELECT test.tbl.col FROM test.tbl AS t;

CREATE SCHEMA t;

CREATE SCHEMA t;

INSERT INTO t.t VALUES ({'t': 42});

SELECT t FROM t.t;

SELECT t.t FROM t.t;

SELECT t.t.t FROM t.t;

SELECT t.t.t.t FROM t.t;

DROP SCHEMA t CASCADE;

CREATE SCHEMA t;

CREATE TABLE t.t AS SELECT {'t': {'t': {'t': {'t': {'t': 42}}}}} AS t;

SELECT t.t.t.t.t.t.t.t FROM t.t;

SELECT t.t.t.t.t.t.t FROM t.t;

SELECT t.t.t.t.t.t FROM t.t;

SELECT t.t.t.t.t FROM t.t;

SELECT t.t.t.t FROM t.t;

SELECT t.t.t FROM t.t;

SELECT t.t FROM t.t;

SELECT t FROM t.t;

DROP SCHEMA t CASCADE;

CREATE SCHEMA s1;

CREATE SCHEMA s2;

CREATE TABLE s1.t1 AS SELECT 42 AS t;

CREATE TABLE s2.t1 AS SELECT 84 AS t;

SELECT s1.t1.t FROM s1.t1, s2.t1;

SELECT * EXCLUDE (s1.t1.t) FROM s1.t1, s2.t1;

SELECT * EXCLUDE (S1.T1.T) FROM s1.t1, s2.t1;

SELECT s2.t1.t FROM s1.t1, s2.t1;

SELECT testX.tbl.col FROM test.tbl;

SELECT test.tblX.col FROM test.tbl;

SELECT test.tbl.colX FROM test.tbl;

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

CREATE TABLE integers ("COL1" INT, "COL2" INT);

CREATE TABLE tbl AS SELECT * FROM integers;

SELECT name FROM PRAGMA_TABLE_INFO('tbl') ORDER BY name;

DROP TABLE tbl;

CREATE TABLE tbl AS SELECT COL1, COL2 FROM integers;

SELECT name FROM PRAGMA_TABLE_INFO('tbl') ORDER BY name;

DROP TABLE tbl;

CREATE TABLE tbl AS SELECT integers.COL1, integers.COL2 FROM integers;

SELECT name FROM PRAGMA_TABLE_INFO('tbl') ORDER BY name;

DROP TABLE tbl;

CREATE SCHEMA s1;

CREATE TABLE s1.integers ("COL1" INT, "COL2" INT);

CREATE TABLE tbl AS SELECT s1.integers.COL1, s1.integers.COL2 FROM s1.integers;

SELECT name FROM PRAGMA_TABLE_INFO('tbl') ORDER BY name;

PRAGMA enable_verification;

CREATE SCHEMA s1;

CREATE TABLE s1.tbl (i INT);

SELECT s1.tbl.i FROM s1.tbl;

SELECT s2.tbl.i FROM s1.tbl;

SELECT a.tbl.i FROM RANGE(0, 10) AS tbl(i);

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

CREATE TABLE a (i INT);

INSERT INTO a VALUES (42);

SELECT j AS $i FROM a;

SELECT "j" AS $i FROM a;

SELECT * FROM b AS $a;

SELECT * FROM "b" AS $a;

SELECT i FROM b AS $a;

SELECT b.i FROM b AS $a;

SELECT a.i FROM b AS $a;

SELECT a.i FROM b AS $a;

SELECT a.i FROM b AS $a;

SELECT a.i FROM b AS $a;

SELECT a.i FROM b AS $a;

SELECT * FROM r AS $range("1");

SELECT * FROM "r" AS $range("1");

CREATE TABLE integers (i INT);

SELECT * FROM integers;

CREATE TABLE t (t TEXT);

INSERT INTO t VALUES ('foo'), ('bar'), ('baz');

CREATE TABLE t2 AS SELECT * FROM t WHERE t LIKE 'b%';

CREATE TABLE t (t TEXT);

SELECT * FROM t;

SELECT * FROM t;

SELECT * FROM t;

SELECT * FROM t;

PRAGMA enable_verification;

CREATE SCHEMA s;

CREATE TABLE s.a AS SELECT 'hello' AS col1;

CREATE VIEW s.b AS SELECT * FROM s.a;

SELECT s.b.col1 FROM s.b;

SELECT * FROM (VALUES (42, 84)) AS s1(c1, c2) UNION ALL SELECT * FROM (VALUES (84, 42)) AS s2(c2, c3) ORDER BY c1;

SELECT * FROM (VALUES (42, 84)) AS s1(c1, c2) UNION ALL SELECT * FROM (VALUES (84, 42)) AS s2(c2, c3) ORDER BY c3;

SELECT 42 WHERE 1 = 0 EXCEPT SELECT 42;

SELECT 42 EXCEPT SELECT 42 WHERE 1 = 0;

SELECT 42 WHERE 1 = 0 EXCEPT SELECT 42 WHERE 1 = 0;

SELECT 42 WHERE 1 = 0 INTERSECT SELECT 42;

SELECT 42 INTERSECT SELECT 42 WHERE 1 = 0;

SELECT 42 WHERE 1 = 0 INTERSECT SELECT 42 WHERE 1 = 0;

SELECT 42 WHERE 1 = 0 UNION ALL SELECT 42;

SELECT 42 UNION ALL SELECT 42 WHERE 1 = 0;

SELECT 42 WHERE 1 = 0 UNION ALL SELECT 42 WHERE 1 = 0;

CREATE TABLE a (i INT);

INSERT INTO a VALUES (41), (42), (43);

CREATE TABLE b (i INT);

INSERT INTO b VALUES (40), (43), (43);

SELECT * FROM a EXCEPT SELECT * FROM b ORDER BY 1;

SELECT * FROM a INTERSECT SELECT * FROM b;

PRAGMA enable_verification;

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (1), (2);

CREATE TABLE integers2 (i INT);

INSERT INTO integers2 VALUES (2), (3);

CREATE VIEW v1 AS SELECT * FROM integers UNION ALL SELECT * FROM integers;

CREATE VIEW v2 AS SELECT * FROM integers2 UNION ALL SELECT * FROM integers2;

SELECT COUNT(*) FROM v1 JOIN v2 USING (i);

SELECT COUNT(*) FROM v1 LEFT JOIN v2 USING (i);

SELECT COUNT(*) FROM v1 RIGHT JOIN v2 USING (i);

SELECT COUNT(*) FROM v1 FULL OUTER JOIN v2 USING (i);

SELECT COUNT(*) FROM v1 JOIN v1 AS v2 USING (i);

SELECT COUNT(*) FROM v1 FULL OUTER JOIN v1 AS v2 USING (i);

CREATE VIEW v3 AS SELECT (SELECT integers2.i - 1) AS i FROM integers2 UNION ALL SELECT (SELECT integers2.i - 1) AS i FROM integers2;

CREATE VIEW v4 AS SELECT (SELECT integers.i + 1) AS i FROM integers UNION ALL SELECT (SELECT integers.i + 1) AS i FROM integers;

SELECT COUNT(*) FROM v3;

SELECT COUNT(*) FROM v4;

SELECT COUNT(*) FROM v3 JOIN v4 USING (i);

SELECT COUNT(*) FROM v3 LEFT JOIN v4 USING (i);

SELECT COUNT(*) FROM v3 RIGHT JOIN v4 USING (i);

SELECT COUNT(*) FROM v3 FULL OUTER JOIN v4 USING (i);

PRAGMA enable_verification;

CREATE TABLE test AS SELECT * FROM RANGE(0, 1024, 1) AS t1(a);

CREATE TABLE test2 AS SELECT * FROM RANGE(0, 1024, 1) AS t1(b);

(SELECT * FROM test, test2 WHERE a = b) UNION (SELECT * FROM test, test2 WHERE a = b) ORDER BY 1;

WITH test_cte AS ((SELECT * FROM test, test2 WHERE a = b) UNION (SELECT * FROM test, test2 WHERE a = b)) SELECT SUM(ta.a) FROM test_cte AS ta, test_cte AS tb WHERE ta.a = tb.a;

WITH test_cte AS ((SELECT * FROM test, test2 WHERE a = b) UNION (SELECT * FROM test, test2 WHERE a = b)), results AS (SELECT SUM(ta.a) AS sum_a FROM test_cte AS ta, test_cte AS tb WHERE ta.a = tb.a) SELECT * FROM (SELECT * FROM results GROUP BY sum_a UNION SELECT * FROM results GROUP BY sum_a UNION SELECT * FROM results GROUP BY sum_a UNION SELECT * FROM results GROUP BY sum_a) AS t;

CREATE TABLE a (i INT);

CREATE TABLE b (i INT);

CREATE TABLE c (i INT);

INSERT INTO a VALUES (42), (43), (44);

INSERT INTO b VALUES (43);

INSERT INTO c VALUES (44);

SELECT * FROM a EXCEPT SELECT * FROM b EXCEPT SELECT * FROM c;

PRAGMA enable_verification;

PRAGMA threads = 4;

PRAGMA verify_parallelism;

CREATE TABLE integers AS SELECT * FROM RANGE(0, 1000000) AS tbl(i);

SELECT COUNT(*) FROM (SELECT * FROM integers UNION ALL SELECT * FROM integers) AS tbl(i);

SELECT COUNT(*) FROM (SELECT 1 UNION ALL SELECT * FROM integers) AS tbl(i);

SELECT COUNT(*) FROM (SELECT * FROM integers UNION ALL SELECT 1) AS tbl(i);

SELECT COUNT(*) FROM (SELECT * FROM integers UNION ALL SELECT * FROM integers) AS tbl(i) WHERE i < 500000;

SELECT COUNT(*) FROM (SELECT * FROM integers UNION ALL SELECT * FROM integers UNION ALL SELECT * FROM integers UNION ALL SELECT * FROM integers) AS tbl(i);

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

SELECT 1 AS two UNION SELECT 2 ORDER BY 1;

SELECT 1 AS one UNION SELECT 1 ORDER BY 1;

SELECT 1 AS two UNION ALL SELECT 2;

SELECT 1 AS two UNION ALL SELECT 1;

SELECT 1 AS three UNION SELECT 2 UNION SELECT 3 ORDER BY 1;

SELECT 1 AS two UNION SELECT 2 UNION SELECT 2 ORDER BY 1;

SELECT 1 AS three UNION SELECT 2 UNION ALL SELECT 2 ORDER BY 1;

SELECT 1.1 AS two UNION SELECT 2.2 ORDER BY 1;

SELECT 1.1 AS two UNION SELECT 2 ORDER BY 1;

SELECT 1 AS two UNION SELECT 2.2 ORDER BY 1;

SELECT 1 AS one UNION SELECT CAST(1.0 AS DOUBLE) ORDER BY 1;

SELECT 1.1 AS two UNION ALL SELECT 2 ORDER BY 1;

SELECT CAST(1.0 AS DOUBLE) AS two UNION ALL SELECT 1 ORDER BY 1;

SELECT 1.1 AS three UNION SELECT 2 UNION SELECT 3 ORDER BY 1;

SELECT CAST(1.1 AS DOUBLE) AS two UNION SELECT 2 UNION SELECT CAST(2.0 AS DOUBLE) ORDER BY 1;

SELECT 1.1 AS three UNION SELECT 2 UNION ALL SELECT 2 ORDER BY 1;

SELECT 1.1 AS two UNION (SELECT 2 UNION ALL SELECT 2) ORDER BY 1;

CREATE TABLE FLOAT8_TBL (f1 DOUBLE);

INSERT INTO FLOAT8_TBL (f1) VALUES ('0.0'), ('-34.84'), ('-1004.30'), ('-1.2345678901234e+200'), ('-1.2345678901234e-200');

CREATE TABLE INT4_TBL (f1 INT);

INSERT INTO INT4_TBL (f1) VALUES ('   0  '), ('123456     '), ('    -123456'), ('2147483647') /* largest and smallest values */, ('-2147483647');

CREATE TABLE INT8_TBL (q1 TINYINT, q2 TINYINT);

INSERT INTO INT8_TBL VALUES ('  123   ', '  456'), ('123   ', '4567890123456789'), ('4567890123456789', '123'), (4567890123456789, '4567890123456789'), ('+4567890123456789', '-4567890123456789');

CREATE TABLE CHAR_TBL (f1 TEXT);

INSERT INTO CHAR_TBL (f1) VALUES ('a'), ('ab'), ('abcd'), ('abcd    ');

CREATE TABLE VARCHAR_TBL (f1 TEXT);

INSERT INTO VARCHAR_TBL (f1) VALUES ('a'), ('ab'), ('abcd'), ('abcd    ');

SELECT f1 AS five FROM FLOAT8_TBL UNION SELECT f1 FROM FLOAT8_TBL ORDER BY 1;

SELECT f1 AS ten FROM FLOAT8_TBL UNION ALL SELECT f1 FROM FLOAT8_TBL;

SELECT f1 AS nine FROM FLOAT8_TBL UNION SELECT f1 FROM INT4_TBL ORDER BY 1;

SELECT f1 AS ten FROM FLOAT8_TBL UNION ALL SELECT f1 FROM INT4_TBL;

SELECT f1 AS five FROM FLOAT8_TBL WHERE f1 BETWEEN -1e6 AND 1e6 UNION SELECT f1 FROM INT4_TBL WHERE f1 BETWEEN 0 AND 1000000 ORDER BY 1;

SELECT CAST(f1 AS TEXT) AS three FROM VARCHAR_TBL UNION SELECT f1 FROM CHAR_TBL ORDER BY 1;

SELECT f1 AS three FROM VARCHAR_TBL UNION SELECT CAST(f1 AS TEXT) FROM CHAR_TBL ORDER BY 1;

SELECT f1 AS eight FROM VARCHAR_TBL UNION ALL SELECT f1 FROM CHAR_TBL;

SELECT f1 AS five FROM TEXT_TBL UNION SELECT f1 FROM VARCHAR_TBL UNION SELECT RTRIM(f1) FROM CHAR_TBL ORDER BY 1;

SELECT q2 FROM int8_tbl INTERSECT SELECT q1 FROM int8_tbl ORDER BY 1;

SELECT q2 FROM int8_tbl INTERSECT ALL SELECT q1 FROM int8_tbl ORDER BY 1;

SELECT q2 FROM int8_tbl EXCEPT SELECT q1 FROM int8_tbl ORDER BY 1;

SELECT q2 FROM int8_tbl EXCEPT ALL SELECT q1 FROM int8_tbl ORDER BY 1;

SELECT q2 FROM int8_tbl EXCEPT ALL SELECT DISTINCT q1 FROM int8_tbl ORDER BY 1;

SELECT q1 FROM int8_tbl EXCEPT SELECT q2 FROM int8_tbl ORDER BY 1;

SELECT q1 FROM int8_tbl EXCEPT ALL SELECT q2 FROM int8_tbl ORDER BY 1;

SELECT q1 FROM int8_tbl EXCEPT ALL SELECT DISTINCT q2 FROM int8_tbl ORDER BY 1;

SELECT q1 FROM int8_tbl EXCEPT ALL SELECT DISTINCT q2 FROM int8_tbl ORDER BY 1;

(SELECT 1, 2, 3 UNION SELECT 4, 5, 6) INTERSECT SELECT 4, 5, 6;

(SELECT 1, 2, 3 UNION SELECT 4, 5, 6 ORDER BY 1, 2) INTERSECT SELECT 4, 5, 6;

(SELECT 1, 2, 3 UNION SELECT 4, 5, 6) EXCEPT SELECT 4, 5, 6;

(SELECT 1, 2, 3 UNION SELECT 4, 5, 6 ORDER BY 1, 2) EXCEPT SELECT 4, 5, 6;

SELECT f1 FROM float8_tbl INTERSECT SELECT f1 FROM int4_tbl ORDER BY 1;

SELECT f1 FROM float8_tbl EXCEPT SELECT f1 FROM int4_tbl ORDER BY 1;

SELECT q1 FROM int8_tbl INTERSECT SELECT q2 FROM int8_tbl UNION ALL SELECT q2 FROM int8_tbl ORDER BY 1;

SELECT q1 FROM int8_tbl INTERSECT (((SELECT q2 FROM int8_tbl UNION ALL SELECT q2 FROM int8_tbl))) ORDER BY 1;

(((SELECT q1 FROM int8_tbl INTERSECT SELECT q2 FROM int8_tbl ORDER BY 1))) UNION ALL SELECT q2 FROM int8_tbl;

SELECT q1 FROM int8_tbl UNION ALL SELECT q2 FROM int8_tbl EXCEPT SELECT q1 FROM int8_tbl ORDER BY 1;

SELECT q1 FROM int8_tbl UNION ALL (((SELECT q2 FROM int8_tbl EXCEPT SELECT q1 FROM int8_tbl ORDER BY 1)));

(((SELECT q1 FROM int8_tbl UNION ALL SELECT q2 FROM int8_tbl))) EXCEPT SELECT q1 FROM int8_tbl ORDER BY 1;

SELECT q1, q2 FROM int8_tbl EXCEPT SELECT q2, q1 FROM int8_tbl ORDER BY q2, q1;

SELECT q1 FROM int8_tbl EXCEPT SELECT q2 FROM int8_tbl ORDER BY q2 LIMIT 1;

SELECT q1 FROM int8_tbl EXCEPT (((SELECT q2 FROM int8_tbl ORDER BY q2 LIMIT 1))) ORDER BY 1;

(((((SELECT * FROM int8_tbl)))));

PRAGMA enable_verification;

SELECT 1 UNION ALL SELECT 2;

SELECT 1, 'a' UNION ALL SELECT 2, 'b';

SELECT 1, 'a' UNION ALL SELECT 2, 'b' UNION ALL SELECT 3, 'c' ORDER BY 1;

SELECT 1, 'a' UNION ALL SELECT 2, 'b' UNION ALL SELECT 3, 'c' UNION ALL SELECT 4, 'd' ORDER BY 1;

SELECT NULL UNION SELECT NULL;

SELECT NULL EXCEPT SELECT NULL;

SELECT NULL INTERSECT SELECT NULL;

CREATE TABLE test (a INT, b INT);

INSERT INTO test VALUES (11, 1), (12, 1), (13, 2);

SELECT a FROM test WHERE a < 13 UNION ALL SELECT a FROM test WHERE a = 13;

SELECT b FROM test WHERE a < 13 UNION ALL SELECT b FROM test WHERE a > 11;

SELECT 1 UNION ALL SELECT 'asdf';

SELECT NULL UNION ALL SELECT 'asdf';

SELECT 1 UNION SELECT 1;

SELECT 1, 'a' UNION SELECT 2, 'b' UNION SELECT 3, 'c' UNION SELECT 1, 'a' ORDER BY 1;

SELECT b FROM test WHERE a < 13 UNION SELECT b FROM test WHERE a > 11 ORDER BY 1;

SELECT 1, 'a' UNION ALL SELECT 1, 'a' UNION SELECT 2, 'b' UNION SELECT 1, 'a' ORDER BY 1;

SELECT 1, 'a' UNION ALL SELECT 1, 'a' UNION SELECT 2, 'b' UNION SELECT 1, 'a' ORDER BY 1 DESC;

SELECT x, COUNT(*) AS c FROM ((SELECT * FROM (VALUES (1), (2), (2), (3), (3), (3), (4), (4), (4), (4)) AS s(x) EXCEPT ALL SELECT * FROM (VALUES (1), (3), (3)) AS t(x)) INTERSECT ALL SELECT * FROM (VALUES (2), (2), (2), (4), (3), (3)) AS u(x)) AS s GROUP BY x ORDER BY x;

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

CREATE TABLE t1 (x INT, y INT);

INSERT INTO t1 VALUES (3, 3), (1, 1);

CREATE TABLE t2 (y INT, z INT);

INSERT INTO t2 VALUES (2, 2), (4, 4);

SELECT x, y FROM t1 UNION ALL BY NAME SELECT y, z FROM t2;

SELECT t1.x FROM t1 UNION ALL BY NAME SELECT x FROM t1 ORDER BY t1.x;

SELECT x FROM t1 UNION ALL BY NAME SELECT x FROM t1 ORDER BY t1.x;

(SELECT x FROM t1 UNION ALL SELECT x FROM t1) UNION ALL BY NAME SELECT 5 ORDER BY t1.x;

(SELECT x FROM t1 UNION ALL SELECT y FROM t1) UNION ALL BY NAME SELECT 5 ORDER BY y;

SELECT x AS a FROM t1 UNION ALL BY NAME SELECT x AS b FROM t1 ORDER BY t1.x;

(SELECT x FROM t1 UNION ALL SELECT y FROM t1) UNION ALL BY NAME (SELECT z FROM t2 UNION ALL SELECT y FROM t2) ORDER BY y, z;

(SELECT x FROM t1 UNION ALL SELECT y FROM t1) UNION ALL BY NAME (SELECT z FROM t2 UNION ALL SELECT y FROM t2) ORDER BY t1.y;

SELECT 1 UNION ALL BY NAME SELECT * FROM RANGE(2, 100) UNION ALL BY NAME SELECT 999 LIMIT 5;

SELECT x, y FROM t1 UNION ALL BY NAME SELECT y, z FROM t2 ORDER BY z DESC;

SELECT x, y FROM t1 UNION ALL BY NAME SELECT y, z FROM t2 ORDER BY y;

SELECT x, y FROM t1 UNION ALL BY NAME SELECT y, z FROM t2 ORDER BY 3;

SELECT x, y FROM t1 UNION ALL BY NAME SELECT y, z FROM t2 ORDER BY 4;

(SELECT x FROM t1 ORDER BY y) UNION ALL BY NAME (SELECT y FROM t2 ORDER BY z) ORDER BY x DESC;

SELECT 1 UNION ALL BY NAME SELECT x, y FROM t1 UNION ALL BY NAME SELECT y, z FROM t2;

SELECT 1, 2 FROM t1 UNION SELECT x, y FROM t1 UNION ALL BY NAME SELECT y, z FROM t2;

SELECT 1, 2 FROM t1 UNION (SELECT x, y FROM t1 UNION ALL BY NAME SELECT y, z FROM t2);

SELECT x, y FROM t1 UNION ALL BY NAME SELECT y, z FROM t2 INTERSECT SELECT 2, 2 FROM t1;

SELECT x, y FROM t1 UNION ALL BY NAME SELECT y, z FROM t2 EXCEPT SELECT 2, 2 FROM t1;

(SELECT x, y FROM t1 UNION ALL BY NAME SELECT y, z FROM t2) EXCEPT SELECT NULL, 2, 2 FROM t1;

SELECT x, x FROM t1 UNION ALL BY NAME SELECT y FROM t2;

SELECT x, x AS a FROM t1 UNION ALL BY NAME SELECT y FROM t2;

SELECT x AS a FROM t1 UNION ALL BY NAME SELECT x FROM t1;

SELECT DISTINCT ON (x) x FROM (SELECT 1 AS x UNION ALL BY NAME SELECT '1' AS x);

SELECT DISTINCT ON (x) x FROM (SELECT 1 AS x UNION ALL BY NAME SELECT 1.1 AS x);

CREATE TABLE new_table AS (SELECT x, y FROM t1 UNION ALL BY NAME SELECT y, z FROM t2);

SELECT * FROM new_table;

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

CREATE TABLE test (a INT);

CREATE TABLE test2 (b INT);

INSERT INTO test VALUES (1), (2), (3), (NULL);

INSERT INTO test2 VALUES (2), (3), (4), (NULL);

(SELECT a FROM test ORDER BY a + 1) UNION SELECT b FROM test2 ORDER BY 1;

SELECT * FROM (SELECT * FROM test UNION SELECT * FROM test2) AS res ORDER BY 1;

SELECT a FROM (SELECT * FROM test UNION SELECT * FROM test2) AS res ORDER BY 1;

SELECT b FROM (SELECT * FROM test UNION SELECT * FROM test2) AS res ORDER BY 1;

SELECT b FROM (SELECT * FROM test2 UNION SELECT * FROM test) AS res ORDER BY 1;

SELECT col1 FROM (SELECT * FROM test2 UNION SELECT * FROM test) AS res(col1) ORDER BY 1;

SELECT a FROM test UNION SELECT b FROM test2 ORDER BY a;

SELECT a FROM test UNION SELECT b FROM test2 ORDER BY b;

SELECT 1, a FROM test UNION SELECT b AS a, 1 FROM test2 ORDER BY a, 1;

SELECT 1, a + 1 FROM test UNION SELECT a + 1, 1 FROM test ORDER BY a + 1;

SELECT a FROM test UNION SELECT b FROM test2 UNION SELECT b AS c FROM test2 ORDER BY c;

SELECT a FROM test UNION SELECT b FROM test2 UNION SELECT b + 1 FROM test2 ORDER BY b + 1;

SELECT a, 10 - a AS b FROM test UNION SELECT b, b + 1 FROM test2 ORDER BY 2;

SELECT a, 10 - a AS b FROM test UNION SELECT b, b + 1 FROM test2 ORDER BY b;

SELECT a FROM test UNION SELECT b FROM test2 ORDER BY 1;

SELECT a FROM test UNION SELECT b FROM test2 ORDER BY 2;

(SELECT a FROM test ORDER BY a + 1) UNION SELECT b FROM test2 ORDER BY 1;

SELECT * FROM test UNION SELECT * FROM test2 ORDER BY a;

SELECT * FROM test UNION SELECT * FROM test2 ORDER BY b;

SELECT a FROM test UNION SELECT * FROM test2 ORDER BY test.a;

SELECT a FROM test UNION SELECT b FROM test2 ORDER BY test2.b;

SELECT test.a FROM test UNION SELECT * FROM test2 ORDER BY a;

SELECT test.a FROM test UNION SELECT test2.b FROM test2 ORDER BY b;

SELECT a FROM test UNION SELECT * FROM test2 UNION SELECT * FROM test AS t1 ORDER BY test.a, test2.b, t1.a;

SELECT a FROM test UNION SELECT * FROM test2 UNION SELECT * FROM test AS t1 ORDER BY a;

SELECT a FROM (SELECT * FROM test) AS bla UNION SELECT * FROM test2 ORDER BY bla.a;

SELECT t1.a, t2.a FROM test AS t1, test AS t2 WHERE t1.a = t2.a UNION SELECT b, b - 1 FROM test2 ORDER BY t1.a, t2.a, test2.b;

SELECT NULL AS a, NULL AS b, 1 AS id UNION SELECT CAST('2015-10-11 00:00:00' AS TIMESTAMP) AS a, CAST('2015-10-11 12:34:56' AS TIMESTAMP) AS b, 2 AS id ORDER BY 3;

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

CREATE TABLE t1 (x INT, y INT);

INSERT INTO t1 VALUES (3, 3), (3, 3), (1, 1);

CREATE TABLE t2 (y INT, z INT);

INSERT INTO t2 VALUES (2, 2), (4, 4);

SELECT t1.x FROM t1 UNION BY NAME SELECT x FROM t1 ORDER BY t1.x;

SELECT x FROM t1 UNION BY NAME SELECT x FROM t1 ORDER BY t1.x;

(SELECT x FROM t1 UNION ALL SELECT x FROM t1) UNION BY NAME SELECT 5 ORDER BY t1.x;

(SELECT x FROM t1 UNION ALL SELECT y FROM t1) UNION BY NAME SELECT 5 ORDER BY y;

SELECT x AS a FROM t1 UNION BY NAME SELECT x AS b FROM t1 ORDER BY t1.x;

(SELECT x FROM t1 UNION ALL SELECT y FROM t1) UNION BY NAME (SELECT z FROM t2 UNION ALL SELECT y FROM t2) ORDER BY y, z;

(SELECT x FROM t1 UNION ALL SELECT y FROM t1) UNION BY NAME (SELECT z FROM t2 UNION ALL SELECT y FROM t2) ORDER BY y, z;

SELECT x, y FROM t1 UNION BY NAME SELECT y, z FROM t2 ORDER BY y;

SELECT x, y FROM t1 UNION BY NAME SELECT y, z FROM t2 ORDER BY 3, 1;

SELECT x, y FROM t1 UNION BY NAME SELECT y, z FROM t2 ORDER BY 4;

(SELECT 1 UNION BY NAME SELECT x, y FROM t1) UNION BY NAME SELECT y, z FROM t2 ORDER BY ALL;

(SELECT 1 UNION BY NAME SELECT x, y FROM t1) UNION BY NAME SELECT y, z FROM t2 ORDER BY ALL;

(SELECT 1 UNION BY NAME SELECT x, y FROM t1) UNION BY NAME SELECT y, z FROM t2 ORDER BY ALL;

(SELECT 1 UNION BY NAME SELECT x, y FROM t1) UNION BY NAME SELECT y, z FROM t2 ORDER BY ALL;

(SELECT 1 UNION BY NAME SELECT x, y FROM t1) UNION BY NAME SELECT y, z FROM t2 ORDER BY ALL;

SELECT '0' AS c UNION ALL SELECT 0 AS c;

SELECT '0' AS c UNION ALL BY NAME SELECT 0 AS c;

SELECT {'a': '0'} AS c UNION ALL BY NAME SELECT {'a': 0} AS c;

SELECT {'a': 'hello'} AS c UNION ALL BY NAME SELECT {'b': 'hello'} AS c;

SELECT {'a': 'hello'} AS c UNION ALL BY NAME SELECT {'a': 'hello', 'b': 'world'} AS c;

SELECT [{'a': 42}, {'b': 84}];

PRAGMA enable_verification;

SELECT CAST(x AS INT) FROM (SELECT CAST(x AS TEXT) AS x FROM RANGE(0, 10) AS tbl(x) UNION ALL SELECT 'hello' AS x) AS tbl(x);

PRAGMA enable_verification;

CREATE TABLE t (i INT);

INSERT INTO t VALUES (1), (2), (3), (4), (4);

SELECT i FROM t UNION SELECT 1 WHERE FALSE ORDER BY 1;

SELECT i FROM t EXCEPT SELECT 1 WHERE FALSE ORDER BY 1;

PRAGMA enable_verification;

SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT NULL UNION ALL SELECT 3;

SELECT MIN(1) FROM RANGE(0, 10) UNION ALL SELECT MIN(2) FROM RANGE(0, 10) UNION ALL SELECT MIN(NULL) FROM RANGE(0, 10) UNION ALL SELECT MIN(3) FROM RANGE(0, 10);

CREATE TABLE t (i INT);

INSERT INTO t VALUES (42);

SELECT i, j FROM (SELECT i, 1 AS j FROM t GROUP BY i UNION ALL SELECT i, 2 AS j FROM t GROUP BY i) AS sq1;

PRAGMA enable_verification;

SELECT 1 UNION SELECT 1.0;

SELECT 1 UNION ALL SELECT 1.0;

SELECT 1 UNION (SELECT 1 UNION SELECT 1 UNION SELECT 1);

SELECT 1 UNION (SELECT 1.0 UNION SELECT 1.0 UNION SELECT 1.0) UNION SELECT 1;

SELECT 1 UNION ALL (SELECT 1.0 UNION ALL SELECT 1.0 UNION ALL SELECT 1.0) UNION ALL SELECT 1;

SELECT 1 UNION (SELECT '1' UNION SELECT '1' UNION SELECT '1') UNION SELECT 1;

PRAGMA enable_verification;

SELECT COUNT(*) FROM RANGE(0, 1) UNION ALL SELECT COUNT(*) FROM RANGE(0, 1);

SELECT COUNT(*) FROM RANGE(0, 1) UNION ALL SELECT COUNT(*) FROM RANGE(0, 1) UNION ALL SELECT COUNT(*) FROM RANGE(0, 1) UNION ALL SELECT COUNT(*) FROM RANGE(0, 1) UNION ALL SELECT COUNT(*) FROM RANGE(0, 1);

SELECT COUNT(*) FROM RANGE(0, 1) UNION SELECT COUNT(*) FROM RANGE(0, 1);

SELECT COUNT(*) FROM RANGE(0, 1) UNION SELECT COUNT(*) FROM RANGE(0, 2) ORDER BY 1;

SELECT COUNT(*) FROM RANGE(0, 1) UNION SELECT COUNT(*) FROM RANGE(0, 2) UNION SELECT COUNT(*) FROM RANGE(0, 3) UNION SELECT COUNT(*) FROM RANGE(0, 4) UNION SELECT COUNT(*) FROM RANGE(0, 5) ORDER BY 1;

SELECT * FROM (SELECT 1 UNION ALL SELECT 1) AS tbl(i);

SELECT * FROM (SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5) AS tbl(i) ORDER BY 1;

CREATE TABLE a AS SELECT i, i + 1 AS j, i + 2 AS k, i + 3 AS l FROM RANGE(42, 43) AS t(i);

CREATE TABLE b AS SELECT i, i + 1 AS j, i + 2 AS k, i + 3 AS l FROM RANGE(40, 41) AS t(i);

SELECT COUNT(*) FROM (SELECT * FROM a UNION ALL SELECT * FROM b) AS t1 JOIN (SELECT 43) AS t2(l) ON t1.l = t2.l;

SELECT COUNT(*) FROM (SELECT * FROM a UNION ALL SELECT * FROM b) AS t1;

SELECT COUNT(*) FROM (SELECT i, j, MIN(k), MIN(l) FROM a GROUP BY i, j UNION ALL SELECT * FROM b) AS t1;

SELECT COUNT(*) FROM (SELECT DISTINCT i, j, k, l FROM a UNION ALL SELECT * FROM b) AS t1;

SELECT COUNT(*) FROM (SELECT DISTINCT * FROM (SELECT DISTINCT i, j, k, l FROM a UNION ALL SELECT * FROM b) AS t1) AS t2;

SELECT COUNT(*) FROM (SELECT * FROM a UNION ALL SELECT * FROM b UNION ALL SELECT a.i, a.j, a.k, a.l FROM a, b) AS t1;

SELECT COUNT(*) FROM (SELECT * FROM a UNION SELECT * FROM b UNION SELECT a.i, a.j, a.k, a.l FROM a, b) AS t1;

SELECT COUNT(*) FROM (SELECT * FROM a WHERE 1 = 0 UNION ALL SELECT * FROM b) AS t1;

SELECT j FROM (SELECT * FROM a WHERE i = 42 UNION ALL SELECT * FROM b) AS t1 WHERE i = 40;

SELECT j FROM (SELECT i, COUNT(*) AS j, COUNT(*) AS k, COUNT(*) AS l FROM a WHERE i = 42 GROUP BY i UNION ALL SELECT * FROM b) AS t1 WHERE i = 40;

SELECT j FROM (SELECT i AS i, i AS j, k, l FROM a UNION ALL SELECT * FROM b) AS t1 WHERE i = 40 AND j = 41;

SELECT * FROM (SELECT 'hello' AS i UNION ALL SELECT 'h' AS i) AS t1 WHERE i = 'h';

SELECT COUNT(*) FROM (SELECT * FROM a UNION ALL SELECT * FROM b) AS t1 JOIN (SELECT 43) AS t2(l) ON t1.l = t2.l;

SELECT MIN(t2.b) FROM (SELECT * FROM a UNION ALL SELECT * FROM b) AS t1 JOIN (SELECT 43, 'hello', 44, 'world') AS t2(l, a, b, c) ON t1.l = t2.l;

PRAGMA enable_verification;

SELECT 1 UNION ALL SELECT * FROM RANGE(2, 100) UNION ALL SELECT 999 LIMIT 5;

SELECT 'select count(case' AS a UNION ALL SELECT 'when a=' || range || ' then 1' FROM RANGE(0, 100) LIMIT 5;

SELECT GROUP_CONCAT(a, ' ') FROM (SELECT 'select count(case' AS a UNION ALL SELECT 'when a=' || range || ' then 1' FROM RANGE(0, 2) UNION ALL SELECT 'end) from t') AS tbl;

SELECT 'select count(case' AS a UNION ALL SELECT 'when a=' || range || ' then 1' FROM RANGE(0, 2) UNION ALL SELECT 'end) from t' LIMIT 5;

SELECT 'select count(case' AS a UNION ALL SELECT 'when a=' || range || ' then 1' FROM RANGE(0, 100) UNION ALL SELECT 'end) from t' LIMIT 5;

SELECT 1 UNION ALL (SELECT * FROM GENERATE_SERIES(10, 12, 1) UNION ALL (SELECT * FROM GENERATE_SERIES(100, 103, 1)) UNION ALL SELECT * FROM GENERATE_SERIES(1000, 1002, 1)) UNION ALL SELECT * FROM GENERATE_SERIES(10000, 10002, 1) UNION ALL (SELECT * FROM GENERATE_SERIES(100000, 100002, 1) UNION ALL SELECT * FROM GENERATE_SERIES(1000000, 1000003, 1));

SELECT ARRAY_AGG(1) UNION ALL (SELECT ARRAY_AGG(i) FROM GENERATE_SERIES(10, 12, 1) AS tbl(i) UNION ALL (SELECT ARRAY_AGG(i) FROM GENERATE_SERIES(100, 103, 1) AS tbl(i)) UNION ALL SELECT ARRAY_AGG(i) FROM GENERATE_SERIES(1000, 1002, 1) AS tbl(i)) UNION ALL SELECT ARRAY_AGG(i) FROM GENERATE_SERIES(10000, 10002, 1) AS tbl(i) UNION ALL (SELECT ARRAY_AGG(i) FROM GENERATE_SERIES(100000, 100002, 1) AS tbl(i) UNION ALL SELECT ARRAY_AGG(i) FROM GENERATE_SERIES(1000000, 1000003, 1) AS tbl(i));

SELECT 1 UNION ALL (SELECT * FROM GENERATE_SERIES(10, 12, 1) UNION ALL (SELECT * FROM GENERATE_SERIES(100, 103, 1)) UNION ALL SELECT * FROM GENERATE_SERIES(1000, 1002, 1)) UNION ALL SELECT * FROM GENERATE_SERIES(10000, 10002, 1) UNION ALL (SELECT * FROM GENERATE_SERIES(100000, 100002, 1) UNION ALL SELECT * FROM GENERATE_SERIES(1000000, 1000003, 1)) LIMIT 1000;

SELECT ARRAY_AGG(1) UNION ALL (SELECT ARRAY_AGG(i) FROM GENERATE_SERIES(10, 12, 1) AS tbl(i) UNION ALL (SELECT ARRAY_AGG(i) FROM GENERATE_SERIES(100, 103, 1) AS tbl(i)) UNION ALL SELECT ARRAY_AGG(i) FROM GENERATE_SERIES(1000, 1002, 1) AS tbl(i)) UNION ALL SELECT ARRAY_AGG(i) FROM GENERATE_SERIES(10000, 10002, 1) AS tbl(i) UNION ALL (SELECT ARRAY_AGG(i) FROM GENERATE_SERIES(100000, 100002, 1) AS tbl(i) UNION ALL SELECT ARRAY_AGG(i) FROM GENERATE_SERIES(1000000, 1000003, 1) AS tbl(i)) LIMIT 1000;

SELECT COUNT(*) FROM (SELECT * FROM RANGE(0, 1000000) AS tbl(i) UNION ALL SELECT * FROM RANGE(0, 1000000) AS tbl(i)) AS tbl(i);

CREATE TABLE t1 AS SELECT COUNT(*) FROM (SELECT * FROM RANGE(0, 1000000) AS tbl(i) UNION ALL SELECT * FROM RANGE(0, 1000000) AS tbl(i)) AS tbl(i);

SELECT * FROM t1;

SELECT COUNT(*) FROM (SELECT * FROM RANGE(0, 1000000) AS tbl(i) UNION ALL SELECT * FROM RANGE(0, 1000000) AS tbl(i) UNION ALL SELECT * FROM RANGE(0, 1000000) AS tbl(i) UNION ALL SELECT * FROM RANGE(0, 1000000) AS tbl(i) UNION ALL SELECT * FROM RANGE(0, 1000000) AS tbl(i)) AS tbl(i);

PRAGMA threads = 4;

PRAGMA verify_parallelism;

CREATE TABLE tbl AS SELECT * FROM RANGE(0, 10000) AS tbl(i) UNION ALL SELECT NULL;

SELECT SUM(i) FROM tbl UNION ALL SELECT COUNT(i) FROM tbl UNION ALL SELECT AVG(i) FROM tbl UNION ALL SELECT AVG(i) + SUM(i) FROM tbl ORDER BY 1;

PRAGMA enable_verification;

CREATE VIEW vals AS SELECT * FROM (VALUES (1, 10), (2, 5), (3, 4)) AS tbl(i, j);

SELECT * FROM vals;

CREATE VIEW vunion AS SELECT * FROM vals UNION ALL SELECT * FROM vals;

SELECT * FROM vunion ORDER BY i;

SELECT * FROM vunion ORDER BY i LIMIT 1;

SELECT * FROM (SELECT * FROM vunion ORDER BY i LIMIT 4) AS tbl ORDER BY j LIMIT 2;

SELECT * FROM vunion WHERE i = 1;

SELECT DISTINCT * FROM (SELECT * FROM vunion UNION ALL SELECT * FROM vunion) AS tbl ORDER BY 1;

SELECT * FROM (SELECT * FROM vunion INTERSECT SELECT * FROM vunion) AS tbl ORDER BY 1;

SELECT * FROM (SELECT * FROM vunion EXCEPT SELECT * FROM vunion) AS tbl;

SET access_mode = 'read_only';

SET allowed_directories = ['data/csv/glob'];

RESET AS allowed_directories;

SET allowed_directories = ['data/csv/glob', 'data/parquet-testing/glob', 'data/json', '__TEST_DIR__'];

SET enable_external_access = FALSE;

RESET AS allowed_directories;

SET allowed_directories = [];

SELECT * FROM "data/csv/glob/f_1.csv";

SELECT * FROM "data/csv/glob/a1/a1.csv";

SELECT * FROM "data/csv/glob/a1/../f_1.csv";

SELECT * FROM "data/csv/glob/./f_1.csv";

SELECT * FROM "data/csv/all_quotes.csv";

SELECT * FROM "data/csv/glob/../all_quotes.csv";

SELECT * FROM "data/csv/glob//../all_quotes.csv";

SELECT * FROM "data/csv/glob/a1/../../all_quotes.csv";

SELECT * FROM SNIFF_CSV('data/csv/glob/f_1.csv');

SELECT * FROM SNIFF_CSV('data/csv/all_quotes.csv');

SELECT REPLACE(fname, '\', '/') AS fname FROM GLOB('data/csv/glob/*.csv') AS t(fname);

SELECT * FROM GLOB('data/csv/**.csv');

COPY (SELECT 42 AS i) TO '__TEST_DIR__/permission_test.csv' WITH (FORMAT csv);

CREATE TABLE integers (i INT);

COPY integers FROM '__TEST_DIR__/permission_test.csv';

SELECT * FROM integers;

COPY (SELECT 42 AS i) TO 'permission_test.csv' WITH (FORMAT csv);

COPY integers FROM 'permission_test.csv';

ATTACH '__TEST_DIR__/attached_dir.db' AS a1;

CREATE TABLE a1.integers (i INT);

ATTACH 'test.db';

LOAD my_ext;

INSTALL AS my_ext;

INSTALL AS my_ext;

INSTALL AS my_ext;

INSTALL AS my_ext;

INSTALL AS my_ext;

SELECT * FROM "data/parquet-testing/glob/t1.parquet";

SELECT * FROM "data/parquet-testing/aws2.parquet";

SELECT * FROM "data/parquet-testing/glob/t1.parquet";

SET allowed_paths = ['data/csv/glob/f_1.csv'];

RESET AS allowed_paths;

SET allowed_paths = ['data/csv/glob/f_1.csv', '__TEST_DIR__/allowed_file.csv'];

SET enable_external_access = FALSE;

RESET AS allowed_paths;

SET allowed_paths = [];

SELECT * FROM "data/csv/glob/f_1.csv";

SELECT * FROM "data/csv/glob/a1/a1.csv";

COPY (SELECT 42 AS i) TO '__TEST_DIR__/allowed_file.csv';

COPY (SELECT 42 AS i) TO '__TEST_DIR__/not_allowed_file.csv';

PRAGMA enable_verification;

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (1), (2), (3), (NULL);

SET default_null_order = 'nulls_first';

SELECT * FROM integers ORDER BY i;

SELECT * FROM integers ORDER BY i DESC;

SELECT FIRST(i ORDER BY i), LAST(i ORDER BY i) FROM integers;

SELECT FIRST(i ORDER BY i DESC), LAST(i ORDER BY i DESC) FROM integers;

SELECT ARRAY_SORT(LIST(i)), ARRAY_REVERSE_SORT(LIST(i)) FROM integers;

SET default_null_order = 'sqlite';

SELECT * FROM integers ORDER BY i;

SELECT * FROM integers ORDER BY i DESC;

SELECT FIRST(i ORDER BY i), LAST(i ORDER BY i) FROM integers;

SELECT FIRST(i ORDER BY i DESC), LAST(i ORDER BY i DESC) FROM integers;

SELECT ARRAY_SORT(LIST(i)), ARRAY_REVERSE_SORT(LIST(i)) FROM integers;

SET default_null_order = 'postgres';

SELECT * FROM integers ORDER BY i;

SELECT * FROM integers ORDER BY i DESC;

SELECT FIRST(i ORDER BY i), LAST(i ORDER BY i) FROM integers;

SELECT FIRST(i ORDER BY i DESC), LAST(i ORDER BY i DESC) FROM integers;

SELECT ARRAY_SORT(LIST(i)), ARRAY_REVERSE_SORT(LIST(i)) FROM integers;

PRAGMA enable_verification;

CREATE SCHEMA my_schema;

SELECT CURRENT_SCHEMA();

SET schema = 'my_schema';

SELECT CURRENT_SCHEMA();

DROP SCHEMA my_schema;

SELECT CURRENT_SCHEMA();

CREATE SCHEMA schema1;

CREATE SCHEMA schema2;

SET schema = 'schema1';

SELECT CURRENT_SCHEMA();

DROP SCHEMA schema2;

SELECT CURRENT_SCHEMA();

ATTACH ':memory:' AS db2;

CREATE SCHEMA db2.schema1;

DROP SCHEMA db2.schema1;

SELECT CURRENT_SCHEMA();

DROP SCHEMA schema1;

SELECT CURRENT_SCHEMA();

PRAGMA enable_verification;

SET errors_as_json = TRUE;

SELECT * FROM nonexistent_table;

SELECT cbl FROM (VALUES (42)) AS t(col);

SELECT cbl FROM (VALUES (42)) AS t(col);

SELECT CORR('hello', 'world');

PRAGMA enable_verification;

SELECT 1 / 2;

SELECT 1 // 2;

SET integer_division = TRUE;

SELECT 1 / 2;

SELECT 1 // 2;

SET integer_division = FALSE;

SELECT 1 / 2;

SELECT 1 // 2;

PRAGMA enable_verification;

CREATE SCHEMA s1;

CREATE SCHEMA s2;

USE s1;

USE s2;

SET lock_configuration = TRUE;

USE s1;

reset AS schema;

SET Calendar = 'gregorian';

SET TimeZone = 'pacific/honolulu';

SELECT * FROM DUCKDB_SETTINGS() WHERE name = 'TimeZone';

SET TimeZone = 'Pacific/Honolooloo';

SET Calendar = 'Coptic';

SELECT * FROM DUCKDB_SETTINGS() WHERE name = 'Calendar';

SET Calendar = 'muslim';

PRAGMA default_collation = 'NOCASE';

CREATE TABLE collate_test (s TEXT);

INSERT INTO collate_test VALUES ('hEllO'), ('WöRlD'), ('wozld');

SELECT COUNT(*) FROM collate_test WHERE 'BlA' = 'bLa';

SELECT * FROM collate_test WHERE s = 'hello';

SELECT * FROM collate_test ORDER BY s;

PRAGMA default_collation = 'NOCASE.NOACCENT';

SELECT * FROM collate_test ORDER BY s;

PRAGMA default_collation = 'unknown';

SET GLOBAL default_collation = 'NOCASE';

SET disabled_optimizers = '';

SET disabled_optimizers = 'expression_rewriter';

SET disabled_optimizers = 'expression_rewriter,filter_pushdown,join_order';

SELECT CURRENT_SETTING('disabled_optimizers');

SET disabled_optimizers = 'expression_rewriteX';

SET disabled_optimizers = 'unknown_optimizer';

SET debug_window_mode = 'unknown';

SET default_order = '${default_order}';

SELECT * FROM DUCKDB_SETTINGS();
endloop;

SET default_order = 'unknown';

SET enable_external_access = TRUE;

SET profile_output='__TEST_DIR__/profile_output'
foreach enable_profiling json query_tree query_tree_optimizer;

SET enable_profiling = '${enable_profiling}';

SELECT * FROM DUCKDB_SETTINGS();
endloop;

SET enable_profiling = 'unknown';

PRAGMA disable_print_progress_bar;

SET enable_progress_bar = TRUE;

SET GLOBAL enable_progress_bar = TRUE;

SET explain_output = '${explain_output}';

SELECT * FROM DUCKDB_SETTINGS();
endloop;

SET explain_output = 'unknown';

SELECT value FROM DUCKDB_SETTINGS() WHERE name = 'preserve_identifier_case';

CREATE SCHEMA MYSCHEMA;

CREATE TABLE MYSCHEMA.INTEGERS (I INT);

SELECT duckdb_tables.schema_name, duckdb_tables.table_name, column_name FROM duckdb_tables JOIN duckdb_columns USING (table_oid);

DROP SCHEMA MYSCHEMA CASCADE;

SET preserve_identifier_case = FALSE;

SELECT value FROM DUCKDB_SETTINGS() WHERE name = 'preserve_identifier_case';

CREATE SCHEMA MYSCHEMA;

CREATE TABLE MYSCHEMA.INTEGERS (I INT);

SELECT duckdb_tables.schema_name, duckdb_tables.table_name, column_name FROM duckdb_tables JOIN duckdb_columns USING (table_oid);

SET profiling_mode = 'standard';

SET profiling_mode = 'detailed';

SET profiling_mode = 'unknown';

SET ${thread_type} TO '3';

SET ${thread_type} TO '-1';

SET ${thread_type} TO 'blabla';

PRAGMA enable_verification;

CREATE SCHEMA temp.s1;

CREATE SCHEMA system.s1;

SET schema = 'temp';

SET schema = 'system';

PRAGMA enable_verification;

SELECT CURRENT_SETTING('disabled_filesystems');

RESET AS disabled_filesystems;

RESET AS disabled_filesystems;

SET disabled_filesystems = '';

SELECT * FROM READ_CSV_AUTO('data/csv/auto/skip_row.csv');

SET disabled_filesystems = 'LocalFileSystem';

RESET AS disabled_filesystems;

SELECT * FROM READ_CSV_AUTO('data/csv/auto/skip_row.csv');

SET disabled_filesystems = 'LocalFileSystem,LocalFileSystem';

SET disabled_filesystems = '';

PRAGMA enable_verification;

SELECT CURRENT_SETTING('lock_configuration');

SET memory_limit = '8GB';

RESET AS lock_configuration;

SET lock_configuration = FALSE;

SET memory_limit = '8GB';

SET lock_configuration = TRUE;

SET memory_limit = '10GB';

SET lock_configuration = FALSE;

RESET AS memory_limit;

RESET AS lock_configuration;

SELECT CURRENT_SETTING('lock_configuration');

SET custom_user_agent = 'something else';

RESET AS custom_user_agent;

SELECT CURRENT_SETTING('custom_user_agent');

SET duckdb_api = 'something else';

SELECT REGEXP_MATCHES(user_agent, '^duckdb/.*(.*)') FROM PRAGMA_USER_AGENT();

SELECT CURRENT_SETTING('threads');

PRAGMA threads = 42;

RESET AS threads;

PRAGMA enable_verification;

SELECT column_name FROM (DESCRIBE SELECT 42 AS a);

SELECT t.column_name FROM (DESCRIBE SELECT 42 AS a) AS t;

(DESCRIBE SELECT 42 AS a);

CREATE TABLE t AS SELECT 42 AS a;

SELECT t.column_name FROM (DESCRIBE t) AS t;

SELECT * FROM (SHOW AS databases) AS t;

SELECT column_name FROM (DESCRIBE (DESCRIBE SELECT * FROM (SELECT 32 AS a)));

PRAGMA enable_verification;

CREATE TABLE "s1"".tbl" (i INT);

SELECT column_name, column_type FROM (DESCRIBE "s1"".tbl");

PRAGMA enable_verification;

CREATE TABLE integers (c1 INT PRIMARY KEY, c2 INT NOT NULL, c3 INT DEFAULT 42, c4 INT UNIQUE, c5 INT);

INSERT INTO integers VALUES (42, 42, 42, 42, 42);

INSERT INTO integers VALUES (84, 84, 84, 84, 84);

DESCRIBE SELECT * FROM integers;

DESCRIBE integers;

SELECT column_name, key FROM (DESCRIBE SELECT c4, c1 FROM integers);

SELECT column_name, key FROM (DESCRIBE SELECT c4 FROM integers WHERE c1 = 42);

SELECT column_name, key FROM (DESCRIBE SELECT c4 FROM integers LIMIT 5);

SELECT column_name, key FROM (DESCRIBE SELECT c4 FROM integers ORDER BY c1 LIMIT 5);

SELECT column_name, key FROM (DESCRIBE SELECT c4 FROM integers USING SAMPLE RESERVOIR (5 ROWS));

SELECT column_name, key FROM (DESCRIBE SELECT c4 FROM integers, (SELECT 84));

SELECT column_name, key FROM (DESCRIBE SELECT t.c1, integers.c1 FROM integers JOIN (SELECT 84 AS c1) AS t USING (c1));

CREATE VIEW my_view AS SELECT * FROM integers;

SELECT column_name, key FROM (DESCRIBE SELECT c4, c1 FROM my_view);

SELECT column_name, key FROM (DESCRIBE SELECT c4 + 1 AS expr FROM integers LIMIT 5);

CREATE TABLE base_table (base_name INT);

DESCRIBE base_table;

DESCRIBE SELECT base_name AS alias_name FROM base_table;

DESCRIBE SELECT alias_name AS alias_alias_name FROM (SELECT base_name AS alias_name FROM base_table);

DESCRIBE SELECT base_name AS alias_name FROM (VALUES (1)) AS base_table(base_name);

DESCRIBE WITH cte_rel AS (SELECT 1 AS base_name) SELECT base_name AS alias_name FROM cte_rel;

PRAGMA enable_verification;

SELECT column_name, min FROM (SUMMARIZE SELECT 42 AS a);

CREATE TABLE tbl AS SELECT 42 AS a;

SELECT column_name, min FROM (SUMMARIZE tbl);

PRAGMA enable_verification;

CREATE TABLE integers (i INT, j INT, a INT);

CREATE TABLE integers (i INT, j INT, a INT);

CREATE TABLE integers (i INT, j INT, a INT);

DROP TABLE integers;

CREATE TABLE t (plant TEXT, dt DATE, mwh BIGINT);

CREATE TABLE t (plant TEXT, dt DATE, mwh BIGINT);

PRAGMA enable_verification;

CREATE TABLE "a.b.c" (x INT);

DESCRIBE "a.b.c";

CREATE SCHEMA defg;

DROP TABLE "a.b.c";

CREATE TABLE defg."a.b.c" (x INT);

DESCRIBE defg."a.b.c";

DROP TABLE defg."a.b.c";

CREATE TABLE defg.abc (x INT);

DESCRIBE defg.abc;

DROP TABLE defg.abc;

DROP SCHEMA defg;

CREATE SCHEMA "d.e.f.g";

CREATE TABLE "d.e.f.g"."a.b.c" (x INT);

DESCRIBE "d.e.f.g"."a.b.c";

DROP TABLE "d.e.f.g"."a.b.c";

CREATE TABLE "d.e.f.g".abc (x INT);

DESCRIBE "d.e.f.g".abc;

PRAGMA enable_verification;

CREATE TABLE integers (i INT, j INT);

CREATE TABLE integers2 (i INT, j INT, st TEXT, d DATE);

INSERT INTO integers VALUES (1, 1), (2, 2), (3, 3), (NULL, NULL);

INSERT INTO integers2 VALUES (1, 30, 'a', '1992-01-01'), (8, 12, 'b', '1992-01-01'), (3, 24, 'c', '1992-01-01'), (9, 16, 'd', '1992-01-01'), (10, NULL, 'e', '1992-01-01');

SHOW SELECT * FROM integers;

DESCRIBE SELECT * FROM integers;

SHOW SELECT i FROM integers;

SHOW SELECT integers.i, integers2.st, integers2.d FROM integers, integers2 WHERE integers.i=integers2.i;

SHOW SELECT SUM(i) AS sum1, j FROM integers GROUP BY j HAVING j < 10;

PRAGMA enable_verification;

CREATE TABLE types (i INT, j TEXT, k INT128, d DOUBLE, e BLOB);

INSERT INTO types VALUES (1, 'hello', 12, 0.5, CAST('a\x00b\x00c' AS BLOB)), (2, 'world', -12, -0.5, CAST('' AS BLOB)), (3, NULL, NULL, NULL, NULL);

SELECT UNNEST(['i', 'j', 'k', 'd', 'e']) AS column_names, UNNEST(['INTEGER', 'VARCHAR', 'HUGEINT', 'DOUBLE', 'BLOB']) AS column_types, UNNEST([CAST(MIN(i) AS TEXT), CAST(MIN(j) AS TEXT), CAST(MIN(k) AS TEXT), CAST(MIN(d) AS TEXT), CAST(MIN(e) AS TEXT)]) AS min, UNNEST([CAST(MAX(i) AS TEXT), CAST(MAX(j) AS TEXT), CAST(MAX(k) AS TEXT), CAST(MAX(d) AS TEXT), CAST(MAX(e) AS TEXT)]) AS max FROM (SELECT * FROM types) AS tbl;

SUMMARIZE types;

SUMMARIZE SELECT * FROM types;

SUMMARIZE SELECT * FROM RANGE(CAST('2024-01-01' AS TIMESTAMP), CAST('2024-04-10' AS TIMESTAMP), INTERVAL '1' DAY);

SUMMARIZE SELECT CAST(range AS DATE) AS range FROM RANGE(CAST('2024-01-01' AS DATE), CAST('2024-04-10' AS DATE), INTERVAL '1' DAY);

SUMMARIZE SELECT CAST(range AS TIME) AS range FROM RANGE(CAST('2024-01-01' AS DATE), CAST('2024-04-10' AS DATE), INTERVAL '1' HOUR);

SUMMARIZE (SELECT CAST('1:02:03.000000+05:30' AS TIMETZ) AS ttz);

SUMMARIZE VALUES (1.0), (6754950520);

SUMMARIZE SELECT 9223372036854775296;

SUMMARIZE SELECT bigint FROM TEST_ALL_TYPES();

PRAGMA enable_verification;

CREATE TABLE "a.b.c" (x INT);

SUMMARIZE "a.b.c";

CREATE SCHEMA defg;

DROP TABLE "a.b.c";

CREATE TABLE defg."a.b.c" (x INT);

SUMMARIZE defg."a.b.c";

DROP TABLE defg."a.b.c";

CREATE TABLE defg.abc (x INT);

SUMMARIZE defg.abc;

DROP TABLE defg.abc;

DROP SCHEMA defg;

CREATE SCHEMA "d.e.f.g";

CREATE TABLE "d.e.f.g"."a.b.c" (x INT);

SUMMARIZE "d.e.f.g"."a.b.c";

DROP TABLE "d.e.f.g"."a.b.c";

CREATE TABLE "d.e.f.g".abc (x INT);

SUMMARIZE "d.e.f.g".abc;

PRAGMA enable_verification;

CREATE TABLE all_types AS SELECT * FROM TEST_ALL_TYPES();

SELECT * FROM TEST_ALL_TYPES();

SELECT * FROM all_types;
restart;

CREATE TABLE vals (i INT, v TEXT);

INSERT INTO vals VALUES (1, 'hello');

INSERT INTO vals SELECT i, CAST(i AS TEXT) FROM GENERATE_SERIES(2, 10000) AS t(i);

SELECT MIN(i), MAX(i), MIN(v), MAX(v) FROM vals;

SELECT MIN(i), MAX(i), MIN(v), MAX(v) FROM vals;

INSERT INTO vals SELECT i, CAST(i AS TEXT) FROM GENERATE_SERIES(10001, 100000) AS t(i);

SELECT MIN(i), MAX(i), MIN(v), MAX(v) FROM vals;

PRAGMA temp_directory = '';

PRAGMA threads = 1;

PRAGMA memory_limit = '2MB';

SELECT MIN(i), MAX(i) FROM RANGE(0, 1000001) AS tbl(i);

PRAGMA memory_limit = '10MB';

SELECT i, MIN(i), MAX(i) FROM RANGE(0, 9000) AS tbl(i) GROUP BY i;

SELECT i, MIN(i), MAX(i) FROM RANGE(0, 1000000) AS tbl(i) GROUP BY i;

SELECT i, MIN(i), MAX(i) FROM RANGE(0, 1000000) AS tbl(i) GROUP BY i;

PRAGMA memory_limit = '2MB';

CREATE TABLE t1 AS SELECT * FROM RANGE(0, 10000) AS tbl(i);

CREATE TABLE t2 AS SELECT * FROM RANGE(0, 1000000) AS tbl(i);

DROP TABLE t1;

CREATE TABLE t1 AS SELECT * FROM range(10000) tbl(i)
endloop
loop i 0 10;

DROP TABLE t1;

PRAGMA temp_directory = '';

PRAGMA memory_limit = '2MB';

CREATE TABLE t2 AS SELECT * FROM RANGE(0, 1000000);

PRAGMA temp_directory = '__TEST_DIR__/myfile.tmp';

CREATE TABLE t2 AS SELECT * FROM RANGE(0, 1000000);

PRAGMA temp_directory = '';

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

CREATE TABLE vals (i INT);

INSERT INTO vals SELECT CASE WHEN i % 2 = 0 THEN NULL ELSE i END FROM RANGE(0, 200000) AS tbl(i);

SELECT MIN(i), MAX(i), COUNT(i), COUNT(*) FROM vals;

CHECKPOINT;

SELECT MIN(i), MAX(i), COUNT(i), COUNT(*) FROM vals;

INSERT INTO vals SELECT * FROM vals;

SELECT MIN(i), MAX(i), COUNT(i), COUNT(*) FROM vals;

CREATE TABLE vals (i TINYINT);

INSERT INTO vals SELECT CAST((CASE WHEN i % 2 = 0 THEN NULL ELSE i % 100 END) AS TINYINT) AS i FROM RANGE(0, 200000) AS tbl(i);

SELECT MIN(i), MAX(i), COUNT(i), COUNT(*) FROM vals;

CHECKPOINT;

SELECT MIN(i), MAX(i), COUNT(i), COUNT(*) FROM vals;

INSERT INTO vals SELECT * FROM vals;

SELECT MIN(i), MAX(i), COUNT(i), COUNT(*) FROM vals;

CREATE TABLE integers AS SELECT * FROM RANGE(0, 100000) AS tbl(i);

CHECKPOINT;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

PRAGMA debug_checkpoint_abort = 'before_header';

SELECT MIN(i), MAX(i), COUNT(*) FROM integers;

INSERT INTO integers SELECT * FROM RANGE(100000, 200000) AS tbl(i);

SELECT MIN(i), MAX(i), COUNT(*) FROM integers;

UPDATE integers SET i = i + 1;

SELECT MIN(i), MAX(i), COUNT(*) FROM integers;

CHECKPOINT;

SELECT MIN(i), MAX(i), COUNT(*) FROM integers;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

PRAGMA debug_checkpoint_abort = 'before_header';

UPDATE integers SET i = i;

CHECKPOINT;

SELECT MIN(i), MAX(i), COUNT(*) FROM integers;

CREATE TABLE integers AS SELECT * FROM RANGE(0, 100000) AS tbl(i);

CHECKPOINT;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

PRAGMA debug_checkpoint_abort = 'after_free_list_write';

INSERT INTO integers SELECT * FROM RANGE(100000, 200000) AS tbl(i);

CHECKPOINT;

SELECT MIN(i), MAX(i), COUNT(*) FROM integers;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

PRAGMA debug_checkpoint_abort = 'after_free_list_write';

UPDATE integers SET i = i;

CHECKPOINT;

SELECT MIN(i), MAX(i), COUNT(*) FROM integers;

CREATE TABLE integers AS SELECT * FROM RANGE(0, 100000) AS tbl(i);

CHECKPOINT;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

PRAGMA debug_checkpoint_abort = 'before_header';

INSERT INTO integers SELECT * FROM RANGE(100000, 200000) AS tbl(i);

CHECKPOINT;

SELECT MIN(i), MAX(i), COUNT(*) FROM integers;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

PRAGMA debug_checkpoint_abort = 'before_header';

UPDATE integers SET i = i;

CHECKPOINT;

SELECT MIN(i), MAX(i), COUNT(*) FROM integers;

CREATE TABLE integers AS SELECT * FROM RANGE(0, 100000) AS tbl(i);

CHECKPOINT;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

PRAGMA debug_checkpoint_abort = 'before_truncate';

INSERT INTO integers SELECT * FROM RANGE(100000, 200000) AS tbl(i);

CHECKPOINT;

SELECT MIN(i), MAX(i), COUNT(*) FROM integers;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

PRAGMA debug_checkpoint_abort = 'before_truncate';

UPDATE integers SET i = i;

CHECKPOINT;

SELECT MIN(i), MAX(i), COUNT(*) FROM integers;

CREATE TABLE integers AS SELECT * FROM RANGE(0, 1024 * 100 * 8) AS tbl(i);

CHECKPOINT;

SELECT MIN(i), MAX(i), COUNT(i) FROM integers;

UPDATE integers SET i = i + 1;

SELECT MIN(i), MAX(i), COUNT(i) FROM integers;

SELECT MIN(i), MAX(i), COUNT(i) FROM integers;

DELETE FROM integers WHERE i <= 1000;

SELECT MIN(i), MAX(i), COUNT(i) FROM integers;

CREATE TABLE test (i INT);

INSERT INTO test SELECT * FROM RANGE(0, 1000000);

BEGIN;

UPDATE test SET i = i + 1;

CHECKPOINT;

ROLLBACK;

CHECKPOINT;

BEGIN;

UPDATE test SET i = i + 1;

FORCE AS CHECKPOINT;

ROLLBACK;

CHECKPOINT AS restart;

SELECT MIN(i), MAX(i), COUNT(*) FROM test;

PRAGMA enable_verification;

CREATE TABLE test (a INT PRIMARY KEY, b INT, c TEXT);

INSERT INTO test VALUES (11, 22, 'hello'), (13, 22, 'world'), (12, 21, 'test'), (10, NULL, NULL);

BEGIN;

BEGIN;

INSERT INTO test VALUES (14, 10, 'con');

INSERT INTO test VALUES (15, 10, 'con2');

INSERT INTO test VALUES (14, 10, 'con2');

COMMIT;

COMMIT;

INSERT INTO test VALUES (15, NULL, NULL);

SELECT COUNT(*), COUNT(a), COUNT(b), SUM(a), SUM(b), SUM(LENGTH(c)) FROM test;

SELECT * FROM test ORDER BY a, b, c;

PRAGMA enable_verification;

SELECT * FROM test ORDER BY a, b, c;

SELECT COUNT(*), COUNT(a), COUNT(b), SUM(a), SUM(b), SUM(LENGTH(c)) FROM test;

PRAGMA enable_verification;

SELECT COUNT(*), COUNT(a), COUNT(b), SUM(a), SUM(b), SUM(LENGTH(c)) FROM test;

SELECT * FROM test ORDER BY a, b, c;

PRAGMA wal_autocheckpoint = '1TB';

PRAGMA enable_verification;

CREATE TABLE test (a INT PRIMARY KEY, b INT, c TEXT);

INSERT INTO test VALUES (11, 22, 'hello'), (13, 22, 'world'), (12, 21, 'test'), (10, NULL, NULL);

BEGIN;

BEGIN;

INSERT INTO test VALUES (14, 10, 'con');

INSERT INTO test SELECT i, NULL, NULL FROM RANGE(15, 1000000) AS tbl(i);

INSERT INTO test VALUES (14, 10, 'con2');

COMMIT;

COMMIT;

SELECT * FROM test ORDER BY a, b, c;

INSERT INTO test VALUES (15, NULL, NULL);

INSERT INTO test VALUES (16, 24, 'blabla');

SELECT * FROM test ORDER BY a, b, c;

PRAGMA enable_verification;

SELECT * FROM test ORDER BY a, b, c;

SELECT * FROM test ORDER BY a, b, c;

PRAGMA enable_verification;

CREATE TABLE test (a INT PRIMARY KEY, b INT, c TEXT);

INSERT INTO test VALUES (11, 22, 'hello'), (13, 22, 'world'), (12, 21, 'test'), (10, NULL, NULL);

BEGIN;

BEGIN;

INSERT INTO test VALUES (14, 10, 'con');

INSERT INTO test SELECT i, NULL, NULL FROM RANGE(15, 10000) AS tbl(i);

INSERT INTO test VALUES (14, 10, 'con2');

COMMIT;

COMMIT;

SELECT * FROM test ORDER BY a, b, c;

INSERT INTO test VALUES (15, NULL, NULL);

INSERT INTO test VALUES (16, 24, 'blabla');

SELECT * FROM test ORDER BY a, b, c;

PRAGMA enable_verification;

SELECT * FROM test ORDER BY a, b, c;

SELECT * FROM test ORDER BY a, b, c;

PRAGMA enable_verification;

CREATE TABLE test (a INT PRIMARY KEY, b INT, c TEXT);

INSERT INTO test VALUES (11, 22, 'hello'), (13, 22, 'world'), (12, 21, 'test'), (10, NULL, NULL);

INSERT INTO test VALUES (14, 10, 'con');

SELECT * FROM test ORDER BY a, b, c;

DELETE FROM test WHERE a = 14;

SELECT * FROM test ORDER BY a, b, c;

INSERT INTO test VALUES (14, 11, 'bla');

SELECT * FROM test ORDER BY a, b, c;

PRAGMA enable_verification;

SELECT * FROM test ORDER BY a, b, c;

CREATE TABLE test AS SELECT range % 10 AS i, range % 30 AS j FROM RANGE(0, 100);

SELECT STATS(i), STATS(j) FROM test LIMIT 1;

SELECT STATS(i), STATS(j) FROM test LIMIT 1;

CREATE TABLE tbl (a STRUCT("id" TEXT), b STRUCT("id" TEXT));

INSERT INTO tbl SELECT {'id': LPAD(CAST(i AS TEXT), 4, '0')}, {'id': 'abc'} FROM RANGE(0, 10000) AS t(i);

SELECT COUNT(*) FROM (SELECT * FROM tbl WHERE b.id = 'abc') AS t;

SELECT COUNT(*) FROM (SELECT * FROM tbl WHERE b.id = 'abc') AS t;

SELECT COUNT(*) FROM (SELECT * FROM tbl WHERE b.id = 'abc') AS t;

SELECT COUNT(*) FROM (SELECT * FROM tbl WHERE b.id = 'bcd') AS t;

SELECT * FROM strings;

SELECT * FROM strings ORDER BY 1;

CREATE TABLE table1 (column1 INT, column2 INT);

INSERT INTO table1 (column1, column2) VALUES (1, 1);

BEGIN;

INSERT INTO table1 (column1, column2) VALUES (1, 2);

UPDATE table1 SET column2 = 3 FROM table1 AS s WHERE s.column1 = 1;

SET wal_autocheckpoint = '1GB';

CREATE TABLE tbl (n TEXT[]);

INSERT INTO tbl (n) SELECT CASE WHEN i < 100 THEN ['a', 'b'] ELSE [] END AS l FROM RANGE(0, 1026) AS t(i);

INSERT INTO tbl (n) SELECT CASE WHEN i < 100 THEN ['a', 'b'] ELSE [] END AS l FROM RANGE(0, 1026) AS t(i);

INSERT INTO tbl (n) SELECT CASE WHEN i < 100 THEN ['a', 'b'] ELSE [] END AS l FROM RANGE(0, 1026) AS t(i);
restart;

SET checkpoint_threshold = '1MB';

CREATE TABLE test AS SELECT * FROM RANGE(0, 10000000);

CHECKPOINT;

DELETE FROM test;

SELECT wal_size FROM PRAGMA_DATABASE_SIZE();

PRAGMA force_compression = 'dictionary';

CREATE TABLE test (a TEXT[]);

INSERT INTO test SELECT CASE WHEN i % 2 = 0 THEN [] ELSE ['Hello', 'World'] END FROM RANGE(0, 10000) AS t(i);

SELECT MIN(t), MAX(t), COUNT(t) FROM (SELECT a[2] FROM test) AS t(t);

SELECT SUM(CASE WHEN a IS DISTINCT FROM ['Hello', 'World'] THEN 1 ELSE 0 END) FROM test;

SELECT COUNT(*) FROM test WHERE a = ['Hello', 'World'];

SELECT DISTINCT a FROM test ORDER BY ALL;

SELECT MIN(t), MAX(t), COUNT(t) FROM (SELECT a[2 : 2] FROM test) AS t(t);

CREATE TABLE test2 AS SELECT * FROM test ORDER BY a;

SELECT * FROM test2 LIMIT 3;

SELECT * FROM test2 LIMIT 3 OFFSET 5000;

SELECT MIN(t), MAX(t) FROM (SELECT UNNEST(a) AS t FROM test) AS t(t);

SELECT COUNT(*) FROM test WHERE a IN (SELECT * FROM test);

SELECT MIN(t), MAX(t), MIN(t[1]), MAX(t[1]), MIN(t[2]), MAX(t[2]) FROM (SELECT [LOWER(x) FOR x IN a] FROM test) AS t(t);

SELECT MIN(t), MAX(t) FROM (SELECT [LOWER(x) FOR x IN a IF x <> 'Hello'] FROM test) AS t(t);

SELECT MIN(a), MAX(a), MIN(b), MAX(b) FROM (SELECT LIST_MIN(a), LIST_MAX(a) FROM test) AS t(a, b);

SELECT MIN(ARRAY_SORT(a)[2]) FROM test;

SELECT COUNT(*) FROM test WHERE ARRAY_CONTAINS(a, 'World');

CREATE TABLE test (a INT PRIMARY KEY, b INT, c TEXT);

CHECKPOINT;

DROP TABLE test;

CHECKPOINT;

CREATE TABLE test (a INT PRIMARY KEY, b INT, c TEXT);

CHECKPOINT;

SELECT COUNT(*) FROM test;

INSERT INTO test VALUES (11, 22, 'hello'), (13, 22, 'world'), (12, 21, 'test'), (10, NULL, NULL);

SELECT COUNT(*) FROM test;

CHECKPOINT;

SELECT COUNT(*) FROM test;

INSERT INTO test VALUES (11, 22, 'hello');

CHECKPOINT;

SELECT COUNT(*) FROM test;

SELECT COUNT(*) FROM test;

SELECT * FROM test ORDER BY 1, 2, 3;

CREATE VIEW v1 AS SELECT 42;

DROP VIEW v1;

SELECT total_blocks FROM PRAGMA_DATABASE_SIZE();

SELECT total_blocks * block_size < 10 * 262144 FROM PRAGMA_DATABASE_SIZE();

CREATE TABLE vals (i TINYINT);

INSERT INTO vals SELECT CAST((CASE WHEN i % 2 = 0 THEN NULL ELSE i % 100 END) AS TINYINT) AS i FROM RANGE(0, 10) AS tbl(i);

SELECT MIN(i), MAX(i), COUNT(i), COUNT(*) FROM vals;

INSERT INTO vals SELECT * FROM vals;

CHECKPOINT;

SELECT MIN(i), MAX(i), COUNT(i), COUNT(*) FROM vals;

INSERT INTO vals SELECT * FROM vals;

CHECKPOINT;

SELECT MIN(i), MAX(i), COUNT(i), COUNT(*) FROM vals;

INSERT INTO vals SELECT * FROM vals;

CHECKPOINT;

SELECT MIN(i), MAX(i), COUNT(i), COUNT(*) FROM vals;

INSERT INTO vals SELECT * FROM vals;

CHECKPOINT;

SELECT MIN(i), MAX(i), COUNT(i), COUNT(*) FROM vals;

INSERT INTO vals SELECT * FROM vals;

CHECKPOINT;

SELECT MIN(i), MAX(i), COUNT(i), COUNT(*) FROM vals;

SET immediate_transaction_mode = TRUE;

CREATE TABLE test (i INT);

INSERT INTO test SELECT * FROM RANGE(0, 1000000);

SELECT MIN(i), MAX(i), COUNT(*) FROM test;

BEGIN;

UPDATE test SET i = i + 1;

SELECT MIN(i), MAX(i), COUNT(*) FROM test;

SELECT MIN(i), MAX(i), COUNT(*) FROM test;

SELECT MIN(i), MAX(i), COUNT(*) FROM test;

FORCE AS CHECKPOINT;

SELECT MIN(i), MAX(i), COUNT(*) FROM test;

ROLLBACK;

CHECKPOINT;

SELECT MIN(i), MAX(i), COUNT(*) FROM test;

SELECT MIN(i), MAX(i), COUNT(*) FROM test;

CREATE TABLE test (i INT);

INSERT INTO test SELECT * FROM RANGE(0, 1000000);

BEGIN;

UPDATE test SET i = i + 1;

CHECKPOINT;

ROLLBACK;

SELECT MIN(i), MAX(i), COUNT(*) FROM test;

SELECT MIN(i), MAX(i), COUNT(*) FROM test;

DROP TABLE test;

CREATE TABLE test (i INT);

INSERT INTO test SELECT * FROM RANGE(0, 1000000);

BEGIN;

BEGIN;

UPDATE test SET i = i + 1 WHERE i < 1000;

BEGIN;

UPDATE test SET i = i + 1 WHERE i > 1000 AND i < 2000;

BEGIN;

UPDATE test SET i = i + 1 WHERE i > 2000 AND i < 3000;

BEGIN;

UPDATE test SET i = i + 1 WHERE i > 3000 AND i < 4000;

CHECKPOINT;

SELECT MIN(i), MAX(i), COUNT(*) FROM test;

SELECT MIN(i), MAX(i), COUNT(*) FROM test;

ROLLBACK;

SELECT MIN(i), MAX(i), COUNT(*) FROM test;

ROLLBACK;

SELECT MIN(i), MAX(i), COUNT(*) FROM test;

ROLLBACK;

SELECT MIN(i), MAX(i), COUNT(*) FROM test;

ROLLBACK;

SELECT MIN(i), MAX(i), COUNT(*) FROM test;

SELECT MIN(i), MAX(i), COUNT(*) FROM test;

CREATE TABLE test (x INT, y AS (x + 100));

INSERT INTO test SELECT range FROM RANGE(0, 100000000);

DELETE FROM test WHERE x % 10 = 7;

DELETE FROM test WHERE x % 10 = 6;

DELETE FROM test WHERE x % 10 = 5;

DELETE FROM test WHERE x % 10 = 4;

DELETE FROM test WHERE x % 10 = 3;

DELETE FROM test WHERE x % 10 = 2;

DELETE FROM test WHERE x % 10 = 1;

DELETE FROM test WHERE x % 10 = 0;

DELETE FROM test WHERE x % 10 = 8;

DELETE FROM test WHERE x % 10 = 9;

DROP TABLE test;

CHECKPOINT;

SELECT MAX(block_id) < 5 * (2621440 / GET_BLOCK_SIZE('relocate_metadata')) FROM PRAGMA_METADATA_INFO();

CREATE TABLE test (a INT, b INT);

INSERT INTO test VALUES (11, 22), (13, 22);

CREATE INDEX i_index ON test using art(a)
loop i 0 2
restart;

SELECT * FROM test ORDER BY a;

INSERT INTO test VALUES (11, 24);

SELECT a, b FROM test WHERE a = 11 ORDER BY b;

SELECT a, b FROM test WHERE a > 11 ORDER BY b;

DELETE FROM test WHERE a = 11 AND b = 24;

SELECT * FROM test ORDER BY a;

SELECT * FROM test ORDER BY a;

INSERT INTO test VALUES (11, 24);

SELECT a, b FROM test WHERE a = 11 ORDER BY b;

SELECT a, b FROM test WHERE a > 11 ORDER BY b;

DELETE FROM test WHERE a = 11 AND b = 22;

UPDATE test SET b = 22 WHERE a = 11;

SELECT * FROM test ORDER BY a;

CREATE TABLE test (a INT, b INT);

INSERT INTO test VALUES (11, 22), (13, 22);

BEGIN;

INSERT INTO test VALUES (22, 23);
restart;

SELECT * FROM test ORDER BY a;

CREATE TABLE test (a INT, b INT);

INSERT INTO test VALUES (11, 22), (13, 22);

BEGIN;

BEGIN;

SELECT * FROM test ORDER BY a;

CREATE TABLE test (a INT PRIMARY KEY, b INT);

INSERT INTO test VALUES (11, 22), (13, 22);

SELECT * FROM test ORDER BY a;

SELECT * FROM test ORDER BY a;

INSERT INTO test VALUES (11, 24);

INSERT INTO test VALUES (12, 24);

INSERT INTO test VALUES (12, 24);

SELECT * FROM test ORDER BY a;

SELECT * FROM test WHERE a = 12;

INSERT INTO test VALUES (11, 24);

INSERT INTO test VALUES (12, 24);

SELECT * FROM test ORDER BY a;

SELECT * FROM test WHERE a = 12;

SET enable_external_access = FALSE;

CREATE TABLE test (a INT PRIMARY KEY, b INT);

INSERT INTO test VALUES (11, 22), (13, 22);

SELECT * FROM test ORDER BY a;

SET force_compression = 'uncompressed';

CREATE TABLE test (a TEXT, j BIGINT);

CREATE TABLE test (a TEXT, j BIGINT);

CREATE TABLE test (a TEXT, j BIGINT);

CREATE TABLE test (a TEXT, j BIGINT);

SELECT LENGTH(a) FROM test;

SELECT LENGTH(a) FROM test;

SELECT LENGTH(a) FROM test;

SELECT LENGTH(a) FROM test;

SET force_compression = 'uncompressed';

CREATE TABLE test (a INT, b INT);

CREATE TABLE test (a INT, b INT);

INSERT INTO test SELECT * FROM test AS endloop;

SELECT SUM(a) + SUM(b) FROM test;

SELECT SUM(a) + SUM(b) FROM test;

SELECT SUM(a) + SUM(b) FROM test;

SET force_compression = 'uncompressed';

CREATE TABLE test (a TEXT);

CREATE TABLE test (a TEXT);

INSERT INTO test SELECT * FROM test AS endloop;

SELECT a, COUNT(*) FROM test GROUP BY a ORDER BY a;

SELECT a, COUNT(*) FROM test GROUP BY a ORDER BY a;

SELECT COUNT(a) FROM test WHERE a = 'a';

UPDATE test SET a = 'aaa' WHERE a = 'a';

SELECT a, COUNT(*) FROM test GROUP BY a ORDER BY a;

SET force_compression = 'uncompressed';

CREATE TABLE test (a INT, b BIGINT);

CREATE TABLE test (a INT, b BIGINT);

INSERT INTO test SELECT * FROM test AS endloop;

SELECT SUM(a) + SUM(b) FROM test;

SELECT SUM(a) + SUM(b) FROM test;

SELECT SUM(a) + SUM(b) FROM test;

CREATE TABLE a_${type} AS SELECT range::${type} i FROM range(100);

CREATE TABLE a_${type} AS SELECT range::${type} i FROM range(100);

CREATE TABLE a_${type} AS SELECT range::${type} i FROM range(100);

CREATE TABLE a_interval AS SELECT INTERVAL (range) YEAR AS i FROM RANGE(1, 1001);

SELECT MIN(i), MAX(i), COUNT(*), COUNT(i) FROM a_interval;

SELECT MIN(i), MAX(i), COUNT(*), COUNT(i) FROM a_interval WHERE i = INTERVAL '1' YEAR;

CREATE TABLE a_bool AS SELECT range % 2 = 0 AS i FROM RANGE(0, 1000);

SELECT MIN(i), MAX(i), COUNT(*), COUNT(i) FROM a_bool;

SELECT MIN(i), MAX(i), COUNT(*), COUNT(i) FROM a_bool WHERE NOT i;

SELECT MIN(i), MAX(i), COUNT(*), COUNT(i) FROM a_bool WHERE NOT i;

SELECT MIN(i), MAX(i), COUNT(*), COUNT(i) FROM a_bool WHERE NOT i;

SELECT MIN(i), MAX(i), COUNT(*), COUNT(i) FROM a_interval;

SELECT MIN(i), MAX(i), COUNT(*), COUNT(i) FROM a_interval WHERE i = INTERVAL '1' YEAR;

SELECT MIN(i), MAX(i), COUNT(*), COUNT(i) FROM a_bool;

SELECT MIN(i), MAX(i), COUNT(*), COUNT(i) FROM a_bool WHERE NOT i;

ATTACH 'data/storage/empty64.db' (READ_ONLY);

ATTACH 'data/storage/empty65.db' (READ_ONLY);

ATTACH 'data/storage/empty66.db' (READ_ONLY);

SELECT tags FROM DUCKDB_DATABASES() WHERE database_name LIKE 'empty%' ORDER BY database_name;

ATTACH '__TEST_DIR__/storage_versions65.db';

SELECT tags FROM DUCKDB_DATABASES() WHERE database_name = 'storage_versions65';

SET storage_compatibility_version = 'v0.10.2';

ATTACH '__TEST_DIR__/regular_file.db';

SELECT tags FROM DUCKDB_DATABASES() WHERE database_name = 'regular_file';

ATTACH '__TEST_DIR__/bc_0102.db.gz' AS storage_version64;

SELECT tags FROM DUCKDB_DATABASES() WHERE database_name = 'storage_version64';

ATTACH '__TEST_DIR__/storage_versions66.db';

SELECT tags FROM DUCKDB_DATABASES() WHERE database_name = 'storage_versions66';

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

CREATE TABLE integers (g INT, i INT);

INSERT INTO integers VALUES (0, 1), (0, 2), (1, 3), (1, NULL);

CREATE VIEW v1 AS SELECT g, i, g % 2, SUM(i), SUM(g) FROM integers GROUP BY ALL ORDER BY ALL;

SELECT * FROM v1;

CREATE VIEW v2 AS SELECT g, i, g % 2, SUM(i), SUM(g) FROM integers GROUP BY ALL ORDER BY ALL DESC;

SELECT * FROM v2;

SELECT * FROM v1;

SELECT * FROM v2;

CREATE TABLE test_table ("id" TEXT, "str" STRUCT(a TEXT));

INSERT INTO test_table ("id") (SELECT "id" FROM RANGE(0, 2000000) AS t(id) QUALIFY ROW_NUMBER() OVER (PARTITION BY id) = 1);

SELECT COUNT(DISTINCT id), COUNT(*), COUNT("str"), COUNT("str".a) FROM test_table;

CREATE TABLE big_string (a TEXT, id INT);

PRAGMA force_compression = 'uncompressed';

INSERT INTO big_string VALUES (REPEAT('a', 8000), 1);
INSERT INTO big_string VALUES (REPEAT('b', 10), 2);
INSERT INTO big_string VALUES (REPEAT('c', 8000), 3);
INSERT INTO big_string VALUES (REPEAT('d', 10), 4);

INSERT INTO big_string VALUES (CONCAT(CAST(RANGE(0, 500000) AS TEXT)), 5);

INSERT INTO big_string VALUES (REPEAT('f', 1), 6);
INSERT INTO big_string VALUES (REPEAT('g', 8000), 7);
INSERT INTO big_string VALUES (REPEAT('h', 10000), 8);

checkpoint AS restart;

SELECT compression FROM PRAGMA_STORAGE_INFO('big_string') WHERE segment_type ILIKE 'VARCHAR' LIMIT 1;

SELECT a[1], STRLEN(a) FROM big_string;

SELECT a[1], STRLEN(a), id FROM big_string WHERE id = 5;

SELECT a[1], STRLEN(a), id FROM big_string WHERE id = 6;

SELECT a[1], STRLEN(a), id FROM big_string WHERE a = CONCAT(CAST(RANGE(0, 500000) AS TEXT));

CREATE TABLE test (a INT, b TEXT);

SELECT COUNT(*) FROM test;

SELECT COUNT(*) FROM test;

INSERT INTO test VALUES (1, 2);

SELECT COUNT(*) FROM test;

SELECT COUNT(*) FROM test;

CREATE TABLE TBL (id INT NOT NULL, age INT NOT NULL, PRIMARY KEY (id));

INSERT INTO TBL VALUES (1, 1);

DELETE FROM TBL WHERE id = 1;

INSERT INTO TBL VALUES (1, 1);

SELECT * FROM TBL;

SELECT * FROM TBL WHERE id = 1;

SELECT * FROM TBL;

SELECT * FROM TBL WHERE id = 1;

PRAGMA wal_autocheckpoint = '1TB';

CREATE TABLE t2 (i INT, uid TEXT);

INSERT INTO t2 SELECT i.range AS i, UUID() AS uid FROM RANGE(0, 50000) AS i;

CREATE UNIQUE INDEX iu ON t2(uid);

CHECKPOINT;

SELECT total_blocks < 6291456 / GET_BLOCK_SIZE('index_checkpoint') * 1.2 FROM PRAGMA_DATABASE_SIZE();

PRAGMA force_compression = '${compression}';

PRAGMA wal_autocheckpoint = '10KB';

CREATE TABLE test (i INT);

INSERT INTO test SELECT * FROM RANGE(0, 100000) AS tbl(i);

SELECT MIN(i), MAX(i), COUNT(*) FROM test;

SELECT MIN(i), MAX(i), COUNT(*) FROM test;

BEGIN;

CREATE TABLE test (a INT, b INT);

INSERT INTO test SELECT a, b FROM (VALUES (11, 22), (13, 22), (12, 21)) AS tbl1(a, b), REPEAT(0, 100000) AS tbl2(c);

COMMIT;

DELETE FROM test WHERE a = 12;

SELECT SUM(a), SUM(b), COUNT(*) FROM test;

SELECT SUM(a), SUM(b), COUNT(*) FROM test;

CREATE TABLE test (a INT, b INT);

BEGIN;

BEGIN;

INSERT INTO test SELECT a, b FROM (VALUES (11, 22), (13, 22), (12, 21)) AS tbl1(a, b), REPEAT(0, 138345) AS tbl2(c);

INSERT INTO test SELECT a, b FROM (VALUES (14, 27), (10, 28), (13, 24)) AS tbl1(a, b), REPEAT(0, 218983) AS tbl2(c);

DELETE FROM test WHERE a = 12;

UPDATE test SET b = 30 WHERE a = 11;

DELETE FROM test WHERE a = 13;

UPDATE test SET b = 37 WHERE a = 10;

SELECT a, b, COUNT(*) FROM test GROUP BY a, b ORDER BY a, b;

SELECT a, b, COUNT(*) FROM test GROUP BY a, b ORDER BY a, b;

COMMIT;

COMMIT;

SELECT a, b, COUNT(*) FROM test GROUP BY a, b ORDER BY a, b;

SELECT a, b, COUNT(*) FROM test GROUP BY a, b ORDER BY a, b;

CREATE TABLE test (a INT, b INT);

BEGIN;

BEGIN;

INSERT INTO test SELECT a, b FROM (VALUES (11, 22), (13, 22), (12, 21)) AS tbl1(a, b), REPEAT(0, 138345) AS tbl2(c);

INSERT INTO test SELECT a, b FROM (VALUES (14, 27), (10, 28), (13, 24)) AS tbl1(a, b), REPEAT(0, 218983) AS tbl2(c);

DELETE FROM test WHERE a = 12;

DELETE FROM test WHERE a = 13;

ROLLBACK;

ROLLBACK;

BEGIN;

BEGIN;

INSERT INTO test SELECT a, b FROM (VALUES (11, 22), (13, 22), (12, 21)) AS tbl1(a, b), REPEAT(0, 138345) AS tbl2(c);

INSERT INTO test SELECT a, b FROM (VALUES (14, 27), (10, 28), (13, 24)) AS tbl1(a, b), REPEAT(0, 218983) AS tbl2(c);

UPDATE test SET b = 30 WHERE a = 11;

UPDATE test SET b = 33 WHERE a = 10;

SELECT a, b, COUNT(*) FROM test GROUP BY a, b ORDER BY a, b;

SELECT a, b, COUNT(*) FROM test GROUP BY a, b ORDER BY a, b;

COMMIT;

COMMIT;

SELECT a, b, COUNT(*) FROM test GROUP BY a, b ORDER BY a, b;

SELECT a, b, COUNT(*) FROM test GROUP BY a, b ORDER BY a, b;

COPY (SELECT CAST(((CAST(i AS DOUBLE) * 129371982737) % 2478526729) AS BIGINT) AS a, CAST(CAST(((CAST(i AS DOUBLE) * 12937198273679) % 2478527) AS BIGINT) AS TEXT) AS b FROM RANGE(0, 150000000) AS t(i)) TO '__TEST_DIR__/big.parquet' WITH (FORMAT PARQUET, COMPRESSION UNCOMPRESSED);

SELECT COUNT(*) FROM "__TEST_DIR__/big.parquet";

ATTACH '__TEST_DIR__/num${i}.db';

ATTACH '__TEST_DIR__/num${i}.db';

ATTACH '__TEST_DIR__/num${i}.db';

SELECT * FROM PARQUET_SCAN('data/parquet-testing/arrow/alltypes_plain.parquet');

SELECT * FROM PARQUET_SCAN('data/parquet-testing/arrow/alltypes_plain.parquet');

CREATE TABLE t1 AS SELECT * FROM PARQUET_SCAN('data/parquet-testing/arrow/alltypes_plain.parquet') AS restart;

SELECT * FROM PARQUET_SCAN('data/parquet-testing/arrow/alltypes_plain.parquet');

SHOW tables;

SELECT CURRENT_USER();

CREATE TABLE anno AS SELECT 42;

SHOW tables;

DROP TABLE IF EXISTS anno;

SHOW tables;

SHOW tables;

CREATE TABLE test (a INT);

INSERT INTO test (VALUES (11), (12), (13), (14), (15), (NULL)) AS restart;

SELECT * FROM test ORDER BY a;

SELECT * FROM test ORDER BY a;

DELETE FROM test WHERE a = 12;

SELECT * FROM test ORDER BY a;

SELECT * FROM test ORDER BY a;

DELETE FROM test WHERE a = 13;

SELECT * FROM test ORDER BY a;

SELECT * FROM test ORDER BY a;

PRAGMA force_compression = '${compression}';

CREATE TABLE test (a INT, b INT);

INSERT INTO test VALUES (11, 22), (13, 22), (12, 21), (NULL, NULL);

CREATE TABLE test2 (a INT);

INSERT INTO test2 VALUES (13), (12), (11);

SELECT * FROM test ORDER BY a;

SELECT * FROM test2 ORDER BY a;

CHECKPOINT;

SELECT * FROM test ORDER BY a;

SELECT * FROM test2 ORDER BY a;

SELECT * FROM test ORDER BY a;

SELECT * FROM test2 ORDER BY a;

INSERT INTO test VALUES (14, 23);

SELECT * FROM test ORDER BY a;

SELECT * FROM test ORDER BY a;

DROP TABLE test;

PRAGMA force_compression = '${compression}';

CREATE TABLE test (a INT, b TEXT);

INSERT INTO test VALUES (NULL, 'hello'), (13, 'abcdefgh'), (12, NULL);

CHECKPOINT;

SELECT a, b FROM test ORDER BY a;

SELECT a, b FROM test ORDER BY a;

CREATE TABLE test (a INT, b TEXT);

CREATE TABLE IF NOT EXISTS test (a INT, b TEXT);

PRAGMA force_checkpoint;

CALL dbgen(sf=0.01);

SELECT COUNT(*) FROM lineitem;

PRAGMA force_checkpoint;

SELECT COUNT(*) FROM lineitem;

CHECKPOINT;

SELECT COUNT(*) FROM lineitem;

PRAGMA force_checkpoint;

ALTER TABLE lineitem ADD COLUMN l_new INT;

UPDATE lineitem SET l_new = l_quantity * l_discount;

SELECT l_new FROM lineitem LIMIT 10;

CHECKPOINT;

SELECT l_new FROM lineitem LIMIT 10;

SELECT l_new FROM lineitem LIMIT 10;

CREATE TABLE test AS SELECT * FROM RANGE(0, 250000) AS t(i);

DELETE FROM test WHERE i < 150000;

CHECKPOINT;

SELECT COUNT(*) FROM test;

TRUNCATE TABLE test;

SELECT COUNT(*) FROM test;

SELECT COUNT(*) FROM test;

CREATE TABLE test (a INT, b TEXT);

INSERT INTO test VALUES (NULL, 'hello'), (13, 'abcdefgh'), (12, NULL);

SELECT a, b FROM test ORDER BY a;

PRAGMA enable_verification;

SELECT a, b FROM test ORDER BY a;

INSERT INTO test SELECT CASE WHEN i % 2 = 0 THEN i ELSE NULL END, CASE WHEN i % 2 = 0 THEN 'hello' || CAST(i AS TEXT) ELSE NULL END FROM RANGE(0, 10000) AS tbl(i);

SELECT COUNT(*), SUM(a), MIN(a), MAX(a), MIN(b), MAX(b), COUNT(a), COUNT(b) FROM test;

CREATE TABLE test (i INT, j INT);

INSERT INTO test VALUES (1, 100), (2, 200);

CREATE UNIQUE INDEX idx ON test(i);
restart;

INSERT INTO test VALUES (1, 101), (2, 201);

CREATE TABLE IF NOT EXISTS unique_index_test AS SELECT i AS ordernumber, j AS quantity FROM test;
restart;

CREATE UNIQUE INDEX unique_index_test_ordernumber_idx_unique ON unique_index_test(ordernumber);
restart;

INSERT INTO unique_index_test VALUES (1, 101), (2, 201);

CREATE TABLE test (a INT, b INT);

INSERT INTO test VALUES (11, 22), (13, 22), (12, 21), (NULL, NULL);

CREATE TABLE test2 (a INT);

INSERT INTO test2 VALUES (13), (12), (11);

SELECT * FROM test ORDER BY a;

SELECT * FROM test2 ORDER BY a;

CHECKPOINT;

SELECT * FROM test ORDER BY a;

SELECT * FROM test2 ORDER BY a;

SELECT * FROM test ORDER BY a;

SELECT * FROM test2 ORDER BY a;

INSERT INTO test VALUES (14, 23);

SELECT * FROM test ORDER BY a;

SELECT * FROM test ORDER BY a;

DROP TABLE test;

CREATE TABLE IF NOT EXISTS a (id INT PRIMARY KEY);

INSERT INTO a (id) VALUES (1);

ALTER TABLE a ADD COLUMN c REAL;

INSERT INTO a (id) VALUES (1);

INSERT INTO a (id) VALUES (1);

ALTER TABLE a ALTER COLUMN c SET DEFAULT 10;

INSERT INTO a (id) VALUES (1);

INSERT INTO a (id) VALUES (1);

ALTER TABLE a RENAME TO c, TO d;

INSERT INTO a (id) VALUES (1);

INSERT INTO a (id) VALUES (1);

ALTER TABLE a RENAME TO b;

INSERT INTO b (id) VALUES (1);

INSERT INTO b (id) VALUES (1);

ALTER TABLE b DROP d;

INSERT INTO b (id) VALUES (1);

INSERT INTO b (id) VALUES (1);

PRAGMA enable_verification;

SELECT database_name, schema_name FROM duckdb_schemas WHERE NOT internal;

PRAGMA enable_verification;

SELECT * FROM v1;

SELECT * FROM v2;

SELECT * FROM v3;

SHOW TABLES;

SELECT * FROM DUCKDB_VIEWS();

SET force_compression = 'uncompressed';

SET memory_limit = '10MB';

SET threads = 1;

CREATE TABLE test (a INT, b INT);

CREATE TABLE test (a INT, b INT);

INSERT INTO test SELECT * FROM test AS endloop;

SELECT COUNT(*), COUNT(a), SUM(a), SUM(b) FROM test;

SET force_compression = 'uncompressed';

SET memory_limit = '10MB';

SET threads = 1;

SELECT COUNT(*), COUNT(a), SUM(a), SUM(b) FROM test;

PRAGMA force_compression = 'uncompressed';

SET memory_limit = '10000000b';

SET threads = 1;

CREATE TABLE test (a INT, b INT);

CREATE TABLE test (a INT, b INT);

INSERT INTO test SELECT * FROM test AS endloop;

SELECT COUNT(*) FROM test;

SELECT SUM(a) + SUM(b) FROM test;

SET memory_limit = '10000000b';

SET threads = 1;

SELECT SUM(a) + SUM(b) FROM test;

CREATE TABLE collate_test (s TEXT COLLATE NOACCENT);

INSERT INTO collate_test VALUES ('Mühleisen'), ('Hëllö');

SELECT * FROM collate_test WHERE s = 'Muhleisen';

SELECT * FROM collate_test WHERE s = 'mühleisen';

SELECT * FROM collate_test WHERE s = 'Hello';

SELECT * FROM collate_test WHERE s = 'Muhleisen';

SELECT * FROM collate_test WHERE s = 'mühleisen';

SELECT * FROM collate_test WHERE s = 'Hello';

CREATE TABLE test (a INT CHECK (a < 10), b INT CHECK (CASE WHEN b < 10 THEN a < b ELSE a + b < 100 END));
restart;

INSERT INTO test VALUES (3, 7);

INSERT INTO test VALUES (12, 13);

INSERT INTO test VALUES (5, 3);

INSERT INTO test VALUES (9, 90);

INSERT INTO test VALUES (9, 99);

CREATE SCHEMA test;

CREATE TABLE test.test (a INT, b INT);

INSERT INTO test.test VALUES (11, 22), (13, 22);

DROP TABLE test.test;

DROP SCHEMA test;

CREATE SCHEMA test;

CREATE TABLE test.test (a INT, b INT);

INSERT INTO test.test VALUES (11, 22), (13, 22);
restart;

DROP TABLE test.test;

DROP TABLE test.test;

CREATE SCHEMA test;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

CREATE MACRO plus1(a) AS a+1;

SELECT PLUS1(2);

DROP MACRO plus1
loop i 0 2
restart;

SELECT PLUS1(2);

CREATE MACRO plus1(a) AS a+1;

SELECT PLUS1(2);

DROP MACRO plus1
endloop;

CREATE MACRO plus2(a, b := 2) AS a + b
loop i 0 2;

SELECT PLUS2(3);

SELECT PLUS2(4);

CREATE MACRO addition(a) AS a, (a,b) AS a + b;

SELECT ADDITION(2), ADDITION(1, 2);

SELECT ADDITION(2), ADDITION(1, 2);

CREATE SEQUENCE seq;

CREATE SEQUENCE seq;

INSERT INTO test_default (b) VALUES (2), (4), (6);

SELECT * FROM test_default;

SELECT * FROM test_default;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA disable_checkpoint_on_shutdown;

INSERT INTO test VALUES (NULL);

CREATE TABLE t (a INT);

PREPARE p1 AS INSERT INTO t VALUES ($1);

EXECUTE p1(42);

EXECUTE p1(43);

DEALLOCATE AS p1;

SELECT a FROM t;

SELECT a FROM t;

PREPARE p1 AS DELETE FROM t WHERE a=$1
restart;

PREPARE p1 AS DELETE FROM t WHERE a=$1;

EXECUTE p1(43);

SELECT a FROM t;

SELECT a FROM t;

SELECT a FROM t;

PREPARE p1 AS UPDATE t SET a = $1;

EXECUTE p1(43);

SELECT a FROM t;

SELECT a FROM t;

CREATE SEQUENCE seq;

BEGIN;

SELECT NEXTVAL('seq');

SELECT NEXTVAL('seq');

SELECT NEXTVAL('seq');

CREATE TABLE test (a INT, b INT);

INSERT INTO test VALUES (11, 22), (13, 22), (12, 21);

ALTER TABLE test ADD COLUMN k INT DEFAULT 2;

SELECT k FROM test ORDER BY k;

SELECT k FROM test ORDER BY k;

INSERT INTO test (a, b) VALUES (1, 1);

SELECT k FROM test ORDER BY k;

CREATE TABLE test (a INT, b INT);

INSERT INTO test (VALUES (11, 22), (13, 22), (12, 21)) AS restart;

ALTER TABLE test ADD COLUMN k INT DEFAULT 2;

SELECT k FROM test ORDER BY k;

SELECT k FROM test ORDER BY k;

CREATE TABLE test (a INT, b INT);

INSERT INTO test (VALUES (11, 22), (13, 22), (12, 21)) AS restart;

PRAGMA enable_verification;

ALTER TABLE test ALTER COLUMN b SET DATA TYPE TEXT;

SELECT * FROM test ORDER BY 1;

INSERT INTO test VALUES (10, 'hello');

SELECT * FROM test ORDER BY 1;

SELECT * FROM test WHERE b = 'hello';

DELETE FROM test WHERE b = 'hello';

SELECT * FROM test ORDER BY 1;

SELECT * FROM test ORDER BY 1;

INSERT INTO test VALUES (10, 'hello');

SELECT * FROM test ORDER BY 1;

CREATE TABLE test (a INT, b INT);

INSERT INTO test (VALUES (11, 22), (13, 22), (12, 21)) AS restart;

ALTER TABLE test ALTER COLUMN b SET DATA TYPE TEXT;

SELECT * FROM test ORDER BY 1;

INSERT INTO test VALUES (10, 'hello');

SELECT * FROM test ORDER BY 1;

SELECT * FROM test ORDER BY 1;

CREATE TABLE test (a INT DEFAULT 1, b INT);

INSERT INTO test (b) VALUES (11);

SELECT * FROM test ORDER BY b;

SELECT * FROM test ORDER BY b;

INSERT INTO test (b) VALUES (12), (13);

SELECT * FROM test ORDER BY b;

INSERT INTO test (b) VALUES (14), (15);

SELECT * FROM test ORDER BY b;

CREATE SEQUENCE seq;

SELECT NEXTVAL('seq');

CREATE TABLE test (a INT DEFAULT NEXTVAL('seq'), b INT, c INT DEFAULT CURRVAL('seq'));

INSERT INTO test (b) (VALUES (11)) AS restart;

SELECT * FROM test ORDER BY b;

INSERT INTO test (b) VALUES (12);

INSERT INTO test (b) VALUES (13);

SELECT * FROM test ORDER BY b;

INSERT INTO test (b) VALUES (14);

INSERT INTO test (b) VALUES (15);

SELECT * FROM test ORDER BY b;

CREATE TABLE test (a INT, b INT);

INSERT INTO test (VALUES (11, 22), (13, 22), (12, 21)) AS restart;

ALTER TABLE test DROP COLUMN b;

SELECT * FROM test ORDER BY 1;

SELECT * FROM test ORDER BY 1;

CREATE TABLE test (a INT, b INT);

INSERT INTO test VALUES (11, 22), (13, 22), (12, 21);

BEGIN;

SELECT a FROM test ORDER BY a;

ALTER TABLE test RENAME COLUMN a TO k;

SELECT k FROM test ORDER BY k;

SELECT k FROM test ORDER BY k;

BEGIN;

SELECT a FROM test ORDER BY a;

ALTER TABLE test RENAME COLUMN a TO k;

SELECT k FROM test ORDER BY k;

SELECT k FROM test ORDER BY k;

SELECT k FROM test ORDER BY k;

SELECT a FROM test;

CREATE TABLE test (a INT, b INT);

INSERT INTO test VALUES (11, 22), (13, 22), (12, 21);

BEGIN;

SELECT a FROM test ORDER BY a;

ALTER TABLE test RENAME TO new_name;

SELECT a FROM new_name ORDER BY 1;

SELECT a FROM new_name ORDER BY 1;

BEGIN;

SELECT a FROM test ORDER BY a;

ALTER TABLE test RENAME TO new_name;

SELECT a FROM new_name ORDER BY 1;

SELECT a FROM new_name ORDER BY 1;

SELECT a FROM new_name ORDER BY 1;

CREATE TABLE test (a INT, b INT);

INSERT INTO test VALUES (11, 22), (13, 22), (12, 21);

CREATE VIEW vtest AS SELECT * FROM test;

BEGIN;

SELECT a FROM vtest ORDER BY a;

ALTER VIEW vtest RENAME TO new_name;

SELECT a FROM new_name ORDER BY 1;

SELECT a FROM new_name ORDER BY 1;

BEGIN;

SELECT a FROM vtest ORDER BY a;

ALTER VIEW vtest RENAME TO new_name;

SELECT a FROM new_name ORDER BY 1;

SELECT a FROM new_name ORDER BY 1;

SELECT a FROM new_name ORDER BY 1;

CREATE SEQUENCE seq;

CREATE SEQUENCE seq_cycle;

SELECT NEXTVAL('seq');

SELECT NEXTVAL('seq_cycle');

SELECT NEXTVAL('seq');

SELECT NEXTVAL('seq_cycle');

SELECT NEXTVAL('seq'), NEXTVAL('seq');

SELECT NEXTVAL('seq_cycle');

DROP SEQUENCE seq;
restart;

SELECT NEXTVAL('seq');

CREATE TABLE persistent (i INT);

CREATE TEMPORARY TABLE temp.a (i INT);

INSERT INTO a VALUES (42);

DELETE FROM a;

DELETE FROM temp.a;

DELETE FROM asdf.a;

CREATE TEMPORARY SEQUENCE seq;

CREATE TEMPORARY SEQUENCE seq2;

DROP SEQUENCE seq2;

CREATE TEMPORARY VIEW v1 AS SELECT 42;

CREATE TEMPORARY VIEW v2 AS SELECT 42;

DROP VIEW v2;

INSERT INTO temp.a VALUES (43);

UPDATE temp.a SET i = 44;

UPDATE a SET i = 45;

ALTER TABLE a RENAME COLUMN i TO k;

SELECT * FROM persistent;

SELECT * FROM a AS restart;

SELECT * FROM persistent;

SELECT * FROM a;

CREATE TEMPORARY TABLE a (i INT);

CREATE TEMPORARY SEQUENCE seq;

CREATE TABLE test_tbl (id INT, name TEXT, height DOUBLE);

INSERT INTO test_tbl VALUES (1, 'tom', 1.1), (2, 'dick', 1.2), (3, 'harry', 1.2), (4, 'mary', 0.9), (5, 'mungo', 0.8), (6, 'midge', 0.5);

CREATE MACRO xt(a, _name) as TABLE SELECT * FROM test_tbl WHERE id<=a or name = _name;

SELECT * FROM XT(10, '*') ORDER BY height LIMIT 1;

CREATE TEMPORARY MACRO my_seq(start , finish, stride:=3) as TABLE SELECT  * FROM generate_series(start , finish , stride);

SELECT * FROM MY_SEQ(0, 6);

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

SELECT * FROM XT(100, 'joe');

DROP MACRO TABLE xt;

SELECT * FROM MY_SEQ(0, 10, 2);

CREATE MACRO my_range(rend) AS TABLE SELECT * FROM range(rend);

SELECT * FROM MY_RANGE(2);

SELECT * FROM XT(100, 'joe');

SELECT * FROM MY_SEQ(0, 3, 2);

SELECT * FROM MY_RANGE(2);

SET enable_view_dependencies = TRUE;

CREATE SCHEMA test;

CREATE TABLE test.t (a INT, b INT);

CREATE VIEW test.v (b, c) AS SELECT * FROM test.t;

PRAGMA TABLE_INFO('test.v');

SELECT * FROM test.v;

DROP TABLE test.t CASCADE;

PRAGMA TABLE_INFO('test.v');

PRAGMA TABLE_INFO('test.v');

SELECT * FROM test.v;

CREATE TABLE test.t (a INT, b INT);

SELECT * FROM test.t;

SELECT b, c FROM test.v;

CREATE VIEW test.v (b, c) AS SELECT * FROM test.t;

SET enable_view_dependencies = TRUE;

CREATE SCHEMA test;

CREATE TABLE test.t (a INT, b INT);

CREATE VIEW test.v AS SELECT * FROM test.t;

PRAGMA TABLE_INFO('test.v');

DROP TABLE test.t CASCADE;

PRAGMA TABLE_INFO('test.v');

SELECT * FROM test.v;

PRAGMA TABLE_INFO('test.v');

SELECT * FROM test.v;

CREATE TABLE test.t (a INT, b INT);

SELECT * FROM test.t;

SELECT * FROM test.v;

CREATE VIEW test.v AS SELECT * FROM test.t;

SELECT * FROM test.v;

PRAGMA TABLE_INFO('test.v');

CREATE SCHEMA test;

CREATE TABLE test.t (a INT, b INT);

CREATE VIEW test.v AS SELECT * FROM test.t;

PRAGMA TABLE_INFO('test.v');

DROP TABLE test.t;

PRAGMA TABLE_INFO('test.v');

SELECT * FROM test.v;

PRAGMA TABLE_INFO('test.v');

SELECT * FROM test.v;

CREATE TABLE test.t (a INT, b INT);

SELECT * FROM test.t;

SELECT * FROM test.v;

PRAGMA TABLE_INFO('test.v');

BEGIN;

ATTACH '__TEST_DIR__/rollback.db' (BLOCK_SIZE 16384);

ATTACH '__TEST_DIR__/rollback.db' (BLOCK_SIZE 16384);

ROLLBACK;

ATTACH '__TEST_DIR__/rollback.db' (BLOCK_SIZE 262144);

ATTACH 'data/storage/index_0-9-1.db' (TYPE DUCKDB, READONLY);

ATTACH 'data/storage/block_size_16kb.db' (TYPE DUCKDB, READONLY);

SELECT * FROM block_size_16kb.tbl;

ATTACH 'data/storage/index_0-9-1.db' (TYPE DUCKDB, READONLY);

ATTACH 'data/storage/vector_size_512.db' (TYPE DUCKDB, READONLY);

SELECT * FROM vector_size_512.tbl;

PRAGMA enable_verification;

PRAGMA enable_verification;

DROP TABLE T;

DROP TABLE T;

DROP TABLE T;

DROP TABLE T;

DROP TABLE T;

DROP TABLE T;

DROP TABLE T;

DROP TABLE T;

DROP TABLE T;

DROP TABLE T;

DROP TABLE T;

DROP TABLE T;

INSERT INTO T VALUES (1, 1, 1), (1, 1, 1), (1, 1, 1), (2, 2, 2), (2, 2, 2), (3, 3, 3);

SELECT * FROM T;

SELECT * FROM T;

CHECKPOINT;

SELECT COUNT(*) > 0 FROM PRAGMA_STORAGE_INFO('T') WHERE segment_type ILIKE 'INTEGER' AND compression = 'RLE';

ALTER TABLE T RENAME COLUMN a TO a_1;

ALTER TABLE T RENAME COLUMN b TO b_1;

ALTER TABLE T RENAME COLUMN c TO c_1
restart;

SELECT * FROM T;

SELECT COUNT(*) > 0 FROM PRAGMA_STORAGE_INFO('T') WHERE segment_type ILIKE 'INTEGER' AND compression = 'RLE';

ALTER TABLE T RENAME TO T_1
restart;

SELECT * FROM T_1;

SELECT COUNT(*) > 0 FROM PRAGMA_STORAGE_INFO('T_1') WHERE segment_type ILIKE 'INTEGER' AND compression = 'RLE';

ALTER TABLE T_1 DROP COLUMN c_1;

ALTER TABLE T_1 DROP COLUMN b_1
restart;

SELECT * FROM T_1;

SELECT compression FROM PRAGMA_STORAGE_INFO('T_1') WHERE segment_type ILIKE 'INTEGER' LIMIT 2;

ALTER TABLE T_1 ADD COLUMN b INTEGER DEFAULT 2
restart;

SELECT * FROM T_1;

CHECKPOINT;

SELECT compression FROM PRAGMA_STORAGE_INFO('T_1') WHERE segment_type ILIKE 'INTEGER' LIMIT 3;

ATTACH 'data/storage/block_size_16kb.db' (TYPE DUCKDB, READONLY);

ATTACH 'data/storage/vector_size_512.db' (TYPE DUCKDB, READONLY);

SET threads = 1;

PRAGMA wal_autocheckpoint = '1TB';

ATTACH '__TEST_DIR__/smaller_block_size.db' (BLOCK_SIZE 16384);

CREATE TABLE smaller_block_size.tbl AS SELECT range AS i FROM RANGE(0, 10000);

ATTACH '__TEST_DIR__/larger_block_size.db' (BLOCK_SIZE 262144);

CREATE TABLE larger_block_size.tbl AS SELECT range AS i FROM RANGE(0, 10000);

CHECKPOINT AS smaller_block_size;

CHECKPOINT AS larger_block_size;

SELECT COUNT(*) > 0 FROM PRAGMA_STORAGE_INFO('larger_block_size.tbl') WHERE compression = 'BitPacking';

SET threads = 1;

PRAGMA wal_autocheckpoint = '1TB';

ATTACH '__TEST_DIR__/no_bitpacking.db' (BLOCK_SIZE 16384);

CREATE TABLE no_bitpacking.tbl AS SELECT range AS i FROM RANGE(0, 10000);

ATTACH '__TEST_DIR__/has_bitpacking.db' (BLOCK_SIZE 262144);

CREATE TABLE has_bitpacking.tbl AS SELECT range AS i FROM RANGE(0, 10000);

CHECKPOINT AS has_bitpacking;

CHECKPOINT AS no_bitpacking;

SELECT COUNT(*) FROM PRAGMA_STORAGE_INFO('no_bitpacking.tbl') WHERE compression = 'BitPacking';

CREATE TABLE integers AS SELECT * FROM RANGE(0, 100000) AS tbl(i);

SELECT COUNT(DISTINCT block_id) < 60 FROM PRAGMA_STORAGE_INFO('integers');

SELECT MEDIAN(count) FROM PRAGMA_STORAGE_INFO('integers');

COPY integers TO '__TEST_DIR__/integers.parquet' WITH (ROW_GROUP_SIZE 777);

CREATE TABLE integers_parquet AS SELECT * FROM "__TEST_DIR__/integers.parquet";

SELECT * FROM integers_parquet LIMIT 5;

SELECT * FROM integers_parquet LIMIT 5 OFFSET 73654;

SELECT COUNT(DISTINCT block_id) < 60 FROM PRAGMA_STORAGE_INFO('integers_parquet');

SELECT MEDIAN(count) FROM PRAGMA_STORAGE_INFO('integers_parquet');

SET preserve_insertion_order = FALSE;

CREATE TABLE integers_parquet_no_order AS SELECT * FROM "__TEST_DIR__/integers.parquet";

SELECT COUNT(DISTINCT block_id) < 60 FROM PRAGMA_STORAGE_INFO('integers_parquet_no_order');

SELECT MEDIAN(count) FROM PRAGMA_STORAGE_INFO('integers_parquet_no_order');

ATTACH '__TEST_DIR__/small.db' (BLOCK_SIZE 16384);

CREATE TABLE small.tbl AS SELECT range AS i FROM RANGE(0, 10000);

ATTACH '__TEST_DIR__/large.db' (BLOCK_SIZE 262144);

CREATE TABLE large.tbl AS SELECT range AS i FROM RANGE(0, 10000);

SELECT LIST_SUM(LIST(t1.i) || LIST(t2.i)) FROM large.tbl AS t1 JOIN small.tbl AS t2 ON t1.i = t2.i;

PRAGMA force_compression = '${compression}';

CREATE TABLE nulls (i INT);

INSERT INTO nulls VALUES (NULL);

SELECT * FROM nulls;

SELECT * FROM nulls;

DROP TABLE nulls;

CREATE TABLE nulls (i INT);

INSERT INTO nulls SELECT NULL FROM RANGE(0, 70000);

SELECT COUNT(*), COUNT(i), SUM(i) FROM nulls;

SELECT COUNT(*), COUNT(i), SUM(i) FROM nulls;

INSERT INTO nulls VALUES (1), (1), (1), (2), (2), (2);

SELECT COUNT(*), COUNT(i), SUM(i) FROM nulls;

SELECT COUNT(*), COUNT(i), SUM(i) FROM nulls;

CREATE TABLE test_rle (a INT);

INSERT INTO test_rle SELECT 2147480000 FROM RANGE(0, 10000) AS tbl(i);

INSERT INTO test_rle SELECT 2147480001 FROM RANGE(0, 10000) AS tbl(i);

CHECKPOINT;

SELECT compression FROM PRAGMA_STORAGE_INFO('test_rle') WHERE segment_type ILIKE 'INTEGER' LIMIT 1;

CREATE TABLE test_constant (a INT);

INSERT INTO test_constant SELECT 1 FROM RANGE(0, 2000) AS tbl(i);

CHECKPOINT;

SELECT compression FROM PRAGMA_STORAGE_INFO('test_constant') WHERE segment_type ILIKE 'INTEGER' LIMIT 1;

CREATE TABLE test_dict (a TEXT);

INSERT INTO test_dict SELECT CONCAT('foobar-', CAST((i % 2) AS TEXT)) FROM RANGE(0, 2000) AS tbl(i);

CHECKPOINT;

SELECT compression FROM PRAGMA_STORAGE_INFO('test_dict') WHERE segment_type ILIKE 'VARCHAR' LIMIT 1;

CREATE TABLE test_bp (a INT);

INSERT INTO test_bp SELECT i FROM RANGE(0, 2000) AS tbl(i);

CHECKPOINT;

SELECT compression FROM PRAGMA_STORAGE_INFO('test_bp') WHERE segment_type ILIKE 'INTEGER' LIMIT 1;

PRAGMA force_compression = '${compression}';

CREATE TABLE test (a INT, b INT);

INSERT INTO test VALUES (11, 22), (11, 22), (12, 21), (NULL, NULL);

SELECT SUM(a), SUM(b) FROM test;

SELECT SUM(a), SUM(b) FROM test;

PRAGMA force_compression = '${compression}';

create table tbl1_${compression}(
a INTEGER DEFAULT 5,
b VARCHAR DEFAULT 'test',
c BOOL DEFAULT false,
d DOUBLE,
e TEXT default 'null',
f FLOAT
);

create table tbl2_${compression}(
a INTEGER DEFAULT 5,
b VARCHAR DEFAULT 'test',
c BOOL DEFAULT false,
d DOUBLE,
e TEXT default 'null',
f FLOAT
);

create table tbl3_${compression}(
a INTEGER DEFAULT 5,
b VARCHAR DEFAULT 'test',
c BOOL DEFAULT false,
d DOUBLE,
e TEXT default 'null',
f FLOAT
);

create table tbl3_${compression}(
a INTEGER DEFAULT 5,
b VARCHAR DEFAULT 'test',
c BOOL DEFAULT false,
d DOUBLE,
e TEXT default 'null',
f FLOAT
);

create table tbl3_${compression}(
a INTEGER DEFAULT 5,
b VARCHAR DEFAULT 'test',
c BOOL DEFAULT false,
d DOUBLE,
e TEXT default 'null',
f FLOAT
);

create table tbl3_${compression}(
a INTEGER DEFAULT 5,
b VARCHAR DEFAULT 'test',
c BOOL DEFAULT false,
d DOUBLE,
e TEXT default 'null',
f FLOAT
);

checkpoint AS endloop;

SELECT d, f FROM tbl1_uncompressed;

SELECT d, f FROM tbl1_alp;

SELECT d, f FROM tbl2_uncompressed;

SELECT d, f FROM tbl2_alp;

SELECT d, f FROM tbl3_uncompressed;

SELECT d, f FROM tbl3_alp;

SET force_compression = '${comp}';

CREATE OR REPLACE TABLE list_doubles AS SELECT 5700 AS i, [5700.0] AS l UNION ALL SELECT i, CASE WHEN i % 128 = 0 THEN [CAST(i AS DOUBLE)] ELSE CAST([] AS DOUBLE[]) END AS data FROM RANGE(0, 10000) AS tbl(i) UNION ALL SELECT 5700, [i] FROM RANGE(0, 100) AS tbl(i);

checkpoint;

SELECT * FROM list_doubles WHERE i = 5700;

PRAGMA force_compression = 'uncompressed';

CREATE TABLE random_double AS SELECT CAST(ROUND(RANDOM(), 6) AS DOUBLE) AS data FROM RANGE(0, 500000) AS tbl(i);

checkpoint;

SELECT compression FROM PRAGMA_STORAGE_INFO('random_double') WHERE segment_type = 'double' AND compression <> 'Uncompressed';

PRAGMA force_compression = 'alp';

CREATE TABLE random_alp_double AS SELECT * FROM random_double;

checkpoint;

SELECT compression FROM PRAGMA_STORAGE_INFO('random_alp_double') WHERE segment_type = 'double' AND compression <> 'ALP';

SELECT * FROM random_double;

SELECT * FROM random_alp_double;

PRAGMA force_compression = 'uncompressed';

CREATE TABLE random_float AS SELECT CAST(ROUND(RANDOM(), 3) AS REAL) AS data FROM RANGE(0, 500000) AS tbl(i);

checkpoint;

SELECT compression FROM PRAGMA_STORAGE_INFO('random_float') WHERE segment_type = 'float' AND compression <> 'Uncompressed';

PRAGMA force_compression = 'alp';

CREATE TABLE random_alp_float AS SELECT * FROM random_float;

checkpoint;

SELECT compression FROM PRAGMA_STORAGE_INFO('random_alp_float') WHERE segment_type = 'float' AND compression <> 'ALP';

SELECT * FROM random_float;

SELECT * FROM random_alp_float;

PRAGMA force_compression = 'uncompressed';

CREATE TABLE random_double AS SELECT CAST(ROUND(RANDOM(), 6) AS DOUBLE) AS data FROM RANGE(0, 110000) AS tbl(i);

checkpoint;

SELECT compression FROM PRAGMA_STORAGE_INFO('random_double') WHERE segment_type = 'double' AND compression <> 'Uncompressed';

PRAGMA force_compression = 'alp';

CREATE TABLE random_alp_double AS SELECT * FROM random_double;

checkpoint;

SELECT compression FROM PRAGMA_STORAGE_INFO('random_alp_double') WHERE segment_type = 'double' AND compression <> 'ALP';

SELECT * FROM random_double;

SELECT * FROM random_alp_double;

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

checkpoint;

SELECT compression FROM PRAGMA_STORAGE_INFO('all_types') WHERE segment_type = '${type}' AND compression <> 'ALP';

PRAGMA force_compression = 'uncompressed';

CREATE TABLE random_double AS SELECT CAST(ROUND(COS(1 / (RANDOM() + 0.001)), 5) AS DOUBLE) * -1 AS data FROM RANGE(0, 1023) AS tbl(i);
INSERT INTO random_double VALUES (-CAST(0.0 AS DOUBLE));

checkpoint;

SELECT compression FROM PRAGMA_STORAGE_INFO('random_double') WHERE segment_type = 'double' AND compression <> 'Uncompressed';

PRAGMA force_compression = 'alp';

CREATE TABLE random_alp_double AS SELECT * FROM random_double;

checkpoint;

SELECT compression FROM PRAGMA_STORAGE_INFO('random_alp_double') WHERE segment_type = 'double' AND compression <> 'ALP';

SELECT * FROM random_double;

SELECT * FROM random_alp_double;

PRAGMA force_compression = '${compression}';

create table tbl1_${compression}(
a INTEGER DEFAULT 5,
b VARCHAR DEFAULT 'test',
c BOOL DEFAULT false,
d DOUBLE,
e TEXT default 'null',
f FLOAT
);

create table tbl2_${compression}(
a INTEGER DEFAULT 5,
b VARCHAR DEFAULT 'test',
c BOOL DEFAULT false,
d DOUBLE,
e TEXT default 'null',
f FLOAT
);

create table tbl3_${compression}(
a INTEGER DEFAULT 5,
b VARCHAR DEFAULT 'test',
c BOOL DEFAULT false,
d DOUBLE,
e TEXT default 'null',
f FLOAT
);

create table tbl3_${compression}(
a INTEGER DEFAULT 5,
b VARCHAR DEFAULT 'test',
c BOOL DEFAULT false,
d DOUBLE,
e TEXT default 'null',
f FLOAT
);

create table tbl3_${compression}(
a INTEGER DEFAULT 5,
b VARCHAR DEFAULT 'test',
c BOOL DEFAULT false,
d DOUBLE,
e TEXT default 'null',
f FLOAT
);

create table tbl3_${compression}(
a INTEGER DEFAULT 5,
b VARCHAR DEFAULT 'test',
c BOOL DEFAULT false,
d DOUBLE,
e TEXT default 'null',
f FLOAT
);

checkpoint AS endloop;

SELECT d, f FROM tbl1_uncompressed;

SELECT d, f FROM tbl1_alp;

SELECT d, f FROM tbl2_uncompressed;

SELECT d, f FROM tbl2_alp;

SELECT d, f FROM tbl3_uncompressed;

SELECT d, f FROM tbl3_alp;

PRAGMA force_compression = '${compression}';

create table tbl1_${compression}(
a INTEGER DEFAULT 5,
b VARCHAR DEFAULT 'test',
c BOOL DEFAULT false,
d DOUBLE,
e TEXT default 'null',
f FLOAT
);

create table tbl1_${compression}(
a INTEGER DEFAULT 5,
b VARCHAR DEFAULT 'test',
c BOOL DEFAULT false,
d DOUBLE,
e TEXT default 'null',
f FLOAT
);

checkpoint AS endloop;

SELECT d, f FROM tbl1_uncompressed;

SELECT d, f FROM tbl1_alp;

DROP TABLE IF EXISTS temperatures;

PRAGMA threads = 1;

PRAGMA force_compression = 'alp';

CREATE TABLE temperatures (temperature DOUBLE);

INSERT INTO temperatures SELECT temp FROM "https://github.com/duckdb/duckdb-data/releases/download/v1.0/city_temperature.parquet" AS t(temp), RANGE(0, 1);

CHECKPOINT;

CREATE TABLE reference_temperatures (temperature DOUBLE);

PRAGMA force_compression = 'uncompressed';

INSERT INTO reference_temperatures SELECT temp FROM "https://github.com/duckdb/duckdb-data/releases/download/v1.0/city_temperature.parquet" AS t(temp), RANGE(0, 1);

checkpoint;

SELECT temperature FROM reference_temperatures;

SELECT temperature FROM temperatures;

PRAGMA force_compression = 'uncompressed';

CREATE TABLE random_double AS SELECT CAST(ROUND(RANDOM(), 6) AS DOUBLE) AS data FROM RANGE(0, 1024) AS tbl(i);

checkpoint;

SELECT compression FROM PRAGMA_STORAGE_INFO('random_double') WHERE segment_type = 'double' AND compression <> 'Uncompressed';

PRAGMA force_compression = 'alp';

CREATE TABLE random_alp_double AS SELECT * FROM random_double;

checkpoint;

SELECT compression FROM PRAGMA_STORAGE_INFO('random_alp_double') WHERE segment_type = 'double' AND compression <> 'ALP';

SELECT * FROM random_double;

SELECT * FROM random_alp_double;

PRAGMA force_compression = 'uncompressed';

CREATE TABLE random_float AS SELECT CAST(ROUND(RANDOM(), 6) AS REAL) AS data FROM RANGE(0, 1024) AS tbl(i);

checkpoint;

SELECT compression FROM PRAGMA_STORAGE_INFO('random_float') WHERE segment_type = 'float' AND compression <> 'Uncompressed';

PRAGMA force_compression = 'alp';

CREATE TABLE random_alp_float AS SELECT * FROM random_float;

checkpoint;

SELECT compression FROM PRAGMA_STORAGE_INFO('random_alp_float') WHERE segment_type = 'float' AND compression <> 'ALP';

SELECT * FROM random_float;

SELECT * FROM random_alp_float;

PRAGMA enable_verification;

PRAGMA disable_optimizer;

PRAGMA force_compression = 'uncompressed';

CREATE TABLE temp_table AS SELECT CAST(ROUND(RANDOM(), 6) AS DOUBLE) * 100 AS col, j FROM RANGE(0, 10240) AS tbl(j);

CREATE TABLE temp_table AS SELECT CAST(ROUND(RANDOM(), 6) AS DOUBLE) * 100 AS col, j FROM RANGE(0, 10240) AS tbl(j);

PRAGMA force_compression = '${compression}';

create table tbl_${compression} as select * from temp_table;

checkpoint;

SELECT compression FROM PRAGMA_STORAGE_INFO('tbl_${compression}') WHERE segment_type = 'double' AND compression <> '${compression}';

SELECT compression FROM PRAGMA_STORAGE_INFO('tbl_${compression}') WHERE segment_type = 'double' AND compression <> '${compression}';

PRAGMA force_compression = 'uncompressed';

PRAGMA force_compression = 'uncompressed';

PRAGMA force_compression = 'uncompressed';

PRAGMA force_compression = '${compression}';

PRAGMA force_compression = '${compression}';

PRAGMA force_compression = '${compression}';

checkpoint AS endloop;

checkpoint AS endloop;

checkpoint AS endloop;

PRAGMA force_compression = '${compression}';

PRAGMA force_compression = '${compression}';

checkpoint;

SELECT compression FROM PRAGMA_STORAGE_INFO('${compression}_tbl') WHERE segment_type = '${type}' AND compression <> '${compression}';

DROP TABLE temp_table;

DROP TABLE temp_table;

PRAGMA force_compression = 'alp';

CALL dsdgen(sf=1, suffix='_original');

CALL dsdgen(sf=1, suffix='_original');

CALL dsdgen(sf=1, suffix='_original');

CALL dsdgen(sf=1, suffix='_original');

CALL dsdgen(sf=1, suffix='_original');

CALL dsdgen(sf=1, suffix='_original');

CALL dsdgen(sf=1, suffix='_original');

CALL dsdgen(sf=1, suffix='_original');

CALL dsdgen(sf=1, suffix='_original');

CALL dsdgen(sf=1, suffix='_original');

CALL dsdgen(sf=1, suffix='_original');

CALL dsdgen(sf=1, suffix='_original');

CALL dsdgen(sf=1, suffix='_original');

CALL dsdgen(sf=1, suffix='_original');

CALL dsdgen(sf=1, suffix='_original');

CALL dsdgen(sf=1, suffix='_original');

CALL dsdgen(sf=1, suffix='_original');

CALL dsdgen(sf=1, suffix='_original');

CALL dsdgen(sf=1, suffix='_original');

CALL dsdgen(sf=1, suffix='_original');

CALL dsdgen(sf=1, suffix='_original');

CALL dsdgen(sf=1, suffix='_original');

CALL dsdgen(sf=1, suffix='_original');

CALL dsdgen(sf=1, suffix='_original');

CALL dsdgen(sf=1, suffix='_original');

CALL dsdgen(sf=1, suffix='_original');

INSERT INTO web_site SELECT * FROM web_site_original;

INSERT INTO web_sales SELECT * FROM web_sales_original;

INSERT INTO web_returns SELECT * FROM web_returns_original;

INSERT INTO web_page SELECT * FROM web_page_original;

INSERT INTO warehouse SELECT * FROM warehouse_original;

INSERT INTO time_dim SELECT * FROM time_dim_original;

INSERT INTO store_sales SELECT * FROM store_sales_original;

INSERT INTO store_returns SELECT * FROM store_returns_original;

INSERT INTO store SELECT * FROM store_original;

INSERT INTO ship_mode SELECT * FROM ship_mode_original;

INSERT INTO reason SELECT * FROM reason_original;

INSERT INTO promotion SELECT * FROM promotion_original;

INSERT INTO item SELECT * FROM item_original;

INSERT INTO inventory SELECT * FROM inventory_original;

INSERT INTO income_band SELECT * FROM income_band_original;

INSERT INTO household_demographics SELECT * FROM household_demographics_original;

INSERT INTO date_dim SELECT * FROM date_dim_original;

INSERT INTO customer_demographics SELECT * FROM customer_demographics_original;

INSERT INTO customer_address SELECT * FROM customer_address_original;

INSERT INTO customer SELECT * FROM customer_original;

INSERT INTO catalog_sales SELECT * FROM catalog_sales_original;

INSERT INTO catalog_returns SELECT * FROM catalog_returns_original;

INSERT INTO catalog_page SELECT * FROM catalog_page_original;

INSERT INTO call_center SELECT * FROM call_center_original;

INSERT INTO call_center SELECT * FROM call_center_original;

SELECT compression FROM PRAGMA_STORAGE_INFO('${tbl}') WHERE segment_type = '${type}' AND compression <> 'ALP' AND compression <> 'Constant';

SELECT compression FROM PRAGMA_STORAGE_INFO('${tbl}') WHERE segment_type = '${type}' AND compression <> 'ALP' AND compression <> 'Constant';

SELECT compression FROM PRAGMA_STORAGE_INFO('${tbl}') WHERE segment_type = '${type}' AND compression <> 'ALP' AND compression <> 'Constant';

SELECT compression FROM PRAGMA_STORAGE_INFO('${tbl}') WHERE segment_type = '${type}' AND compression <> 'ALP' AND compression <> 'Constant';

DROP TABLE web_site;

DROP TABLE web_sales;

DROP TABLE web_returns;

DROP TABLE web_page;

DROP TABLE warehouse;

DROP TABLE time_dim;

DROP TABLE store_sales;

DROP TABLE store_returns;

DROP TABLE store;

DROP TABLE ship_mode;

DROP TABLE reason;

DROP TABLE promotion;

DROP TABLE item;

DROP TABLE inventory;

DROP TABLE income_band;

DROP TABLE household_demographics;

DROP TABLE date_dim;

DROP TABLE customer_demographics;

DROP TABLE customer_address;

DROP TABLE customer;

DROP TABLE catalog_sales;

DROP TABLE catalog_returns;

DROP TABLE catalog_page;

PRAGMA threads = 1;

PRAGMA force_compression = 'alp';

PRAGMA force_compression = 'alp';

PRAGMA force_compression = 'alp';

PRAGMA force_compression = 'alp';

PRAGMA force_compression = 'alp';

PRAGMA force_compression = 'alp';

PRAGMA force_compression = 'alp';

PRAGMA force_compression = 'alp';

PRAGMA force_compression = 'alp';

PRAGMA force_compression = 'alp';

INSERT INTO lineitem SELECT * FROM lineitem_original;

INSERT INTO orders SELECT * FROM orders_original;

INSERT INTO partsupp SELECT * FROM partsupp_original;

INSERT INTO part SELECT * FROM part_original;

INSERT INTO customer SELECT * FROM customer_original;

INSERT INTO supplier SELECT * FROM supplier_original;

INSERT INTO nation SELECT * FROM nation_original;

INSERT INTO region SELECT * FROM region_original;

INSERT INTO region SELECT * FROM region_original;

INSERT INTO region SELECT * FROM region_original;

INSERT INTO region SELECT * FROM region_original;

SELECT s_suppkey, s_name, s_address, s_phone, total_revenue FROM supplier, (SELECT l_suppkey AS supplier_no, KAHAN_SUM(l_extendedprice * (1 - l_discount)) AS total_revenue FROM lineitem WHERE l_shipdate >= CAST('1996-01-01' AS DATE) AND l_shipdate < CAST('1996-04-01' AS DATE) GROUP BY supplier_no) AS revenue0 WHERE s_suppkey = supplier_no AND total_revenue = (SELECT MAX(total_revenue) FROM (SELECT l_suppkey AS supplier_no, KAHAN_SUM(l_extendedprice * (1 - l_discount)) AS total_revenue FROM lineitem WHERE l_shipdate >= CAST('1996-01-01' AS DATE) AND l_shipdate < CAST('1996-04-01' AS DATE) GROUP BY supplier_no) AS revenue1) ORDER BY s_suppkey;

SELECT s_suppkey, s_name, s_address, s_phone, total_revenue FROM supplier, (SELECT l_suppkey AS supplier_no, KAHAN_SUM(l_extendedprice * (1 - l_discount)) AS total_revenue FROM lineitem WHERE l_shipdate >= CAST('1996-01-01' AS DATE) AND l_shipdate < CAST('1996-04-01' AS DATE) GROUP BY supplier_no) AS revenue0 WHERE s_suppkey = supplier_no AND total_revenue = (SELECT MAX(total_revenue) FROM (SELECT l_suppkey AS supplier_no, KAHAN_SUM(l_extendedprice * (1 - l_discount)) AS total_revenue FROM lineitem WHERE l_shipdate >= CAST('1996-01-01' AS DATE) AND l_shipdate < CAST('1996-04-01' AS DATE) GROUP BY supplier_no) AS revenue1) ORDER BY s_suppkey;

DROP TABLE lineitem;

DROP TABLE orders;

DROP TABLE partsupp;

DROP TABLE part;

DROP TABLE customer;

DROP TABLE supplier;

DROP TABLE nation;

PRAGMA force_compression = 'uncompressed';

CREATE TABLE random_double AS SELECT CAST(0 AS DOUBLE) AS data FROM RANGE(0, 1024) AS tbl(i);

checkpoint;

SELECT compression FROM PRAGMA_STORAGE_INFO('random_double') WHERE segment_type = 'double' AND compression <> 'Uncompressed';

PRAGMA force_compression = 'alp';

CREATE TABLE random_alp_double AS SELECT * FROM random_double;

checkpoint;

SELECT compression FROM PRAGMA_STORAGE_INFO('random_alp_double') WHERE segment_type = 'double' AND compression <> 'ALP';

SELECT * FROM random_double;

SELECT * FROM random_alp_double;

PRAGMA force_compression = '${compression}';

create table tbl1_${compression}(
a INTEGER DEFAULT 5,
b VARCHAR DEFAULT 'test',
c BOOL DEFAULT false,
d DOUBLE,
e TEXT default 'null',
f FLOAT
);

create table tbl2_${compression}(
a INTEGER DEFAULT 5,
b VARCHAR DEFAULT 'test',
c BOOL DEFAULT false,
d DOUBLE,
e TEXT default 'null',
f FLOAT
);

create table tbl3_${compression}(
a INTEGER DEFAULT 5,
b VARCHAR DEFAULT 'test',
c BOOL DEFAULT false,
d DOUBLE,
e TEXT default 'null',
f FLOAT
);

create table tbl3_${compression}(
a INTEGER DEFAULT 5,
b VARCHAR DEFAULT 'test',
c BOOL DEFAULT false,
d DOUBLE,
e TEXT default 'null',
f FLOAT
);

create table tbl3_${compression}(
a INTEGER DEFAULT 5,
b VARCHAR DEFAULT 'test',
c BOOL DEFAULT false,
d DOUBLE,
e TEXT default 'null',
f FLOAT
);

create table tbl3_${compression}(
a INTEGER DEFAULT 5,
b VARCHAR DEFAULT 'test',
c BOOL DEFAULT false,
d DOUBLE,
e TEXT default 'null',
f FLOAT
);

checkpoint AS endloop;

SELECT d, f FROM tbl1_uncompressed;

SELECT d, f FROM tbl1_alprd;

SELECT d, f FROM tbl2_uncompressed;

SELECT d, f FROM tbl2_alprd;

SELECT d, f FROM tbl3_uncompressed;

SELECT d, f FROM tbl3_alprd;

PRAGMA force_compression = 'uncompressed';

CREATE TABLE random_double AS SELECT CAST(RANDOM() AS DOUBLE) AS data FROM RANGE(0, 500000) AS tbl(i);

checkpoint;

SELECT compression FROM PRAGMA_STORAGE_INFO('random_double') WHERE segment_type = 'double' AND compression <> 'Uncompressed';

PRAGMA force_compression = 'alprd';

CREATE TABLE random_alp_double AS SELECT * FROM random_double;

checkpoint;

SELECT compression FROM PRAGMA_STORAGE_INFO('random_alp_double') WHERE segment_type = 'double' AND compression <> 'ALPRD';

SELECT * FROM random_double;

SELECT * FROM random_alp_double;

PRAGMA force_compression = 'uncompressed';

CREATE TABLE random_float AS SELECT CAST(RANDOM() AS REAL) AS data FROM RANGE(0, 500000) AS tbl(i);

checkpoint;

SELECT compression FROM PRAGMA_STORAGE_INFO('random_float') WHERE segment_type = 'float' AND compression <> 'Uncompressed';

PRAGMA force_compression = 'alprd';

CREATE TABLE random_alp_float AS SELECT * FROM random_float;

checkpoint;

SELECT compression FROM PRAGMA_STORAGE_INFO('random_alp_float') WHERE segment_type = 'float' AND compression <> 'ALPRD';

SELECT * FROM random_float;

SELECT * FROM random_alp_float;

PRAGMA force_compression = 'uncompressed';

CREATE TABLE random_double AS SELECT CAST(RANDOM() AS DOUBLE) AS data FROM RANGE(0, 110000) AS tbl(i);

checkpoint;

SELECT compression FROM PRAGMA_STORAGE_INFO('random_double') WHERE segment_type = 'double' AND compression <> 'Uncompressed';

PRAGMA force_compression = 'alprd';

CREATE TABLE random_alp_double AS SELECT * FROM random_double;

checkpoint;

SELECT compression FROM PRAGMA_STORAGE_INFO('random_alp_double') WHERE segment_type = 'double' AND compression <> 'ALPRD';

SELECT * FROM random_double;

SELECT * FROM random_alp_double;

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

checkpoint;

SELECT compression FROM PRAGMA_STORAGE_INFO('all_types') WHERE segment_type = '${type}' AND compression <> 'ALPRD';

PRAGMA force_compression = 'uncompressed';

CREATE TABLE random_double AS SELECT CAST(ROUND(COS(1 / (RANDOM() + 0.001)), 15) AS DOUBLE) * -1 AS data FROM RANGE(0, 1024) AS tbl(i);

checkpoint;

SELECT compression FROM PRAGMA_STORAGE_INFO('random_double') WHERE segment_type = 'double' AND compression <> 'Uncompressed';

PRAGMA force_compression = 'alprd';

CREATE TABLE random_alp_double AS SELECT * FROM random_double;

checkpoint;

SELECT compression FROM PRAGMA_STORAGE_INFO('random_alp_double') WHERE segment_type = 'double' AND compression <> 'ALPRD';

SELECT * FROM random_double;

SELECT * FROM random_alp_double;

PRAGMA force_compression = '${compression}';

create table tbl1_${compression}(
a INTEGER DEFAULT 5,
b VARCHAR DEFAULT 'test',
c BOOL DEFAULT false,
d DOUBLE,
e TEXT default 'null',
f FLOAT
);

create table tbl2_${compression}(
a INTEGER DEFAULT 5,
b VARCHAR DEFAULT 'test',
c BOOL DEFAULT false,
d DOUBLE,
e TEXT default 'null',
f FLOAT
);

create table tbl3_${compression}(
a INTEGER DEFAULT 5,
b VARCHAR DEFAULT 'test',
c BOOL DEFAULT false,
d DOUBLE,
e TEXT default 'null',
f FLOAT
);

create table tbl3_${compression}(
a INTEGER DEFAULT 5,
b VARCHAR DEFAULT 'test',
c BOOL DEFAULT false,
d DOUBLE,
e TEXT default 'null',
f FLOAT
);

create table tbl3_${compression}(
a INTEGER DEFAULT 5,
b VARCHAR DEFAULT 'test',
c BOOL DEFAULT false,
d DOUBLE,
e TEXT default 'null',
f FLOAT
);

create table tbl3_${compression}(
a INTEGER DEFAULT 5,
b VARCHAR DEFAULT 'test',
c BOOL DEFAULT false,
d DOUBLE,
e TEXT default 'null',
f FLOAT
);

checkpoint AS endloop;

SELECT d, f FROM tbl1_uncompressed;

SELECT d, f FROM tbl1_alprd;

SELECT d, f FROM tbl2_uncompressed;

SELECT d, f FROM tbl2_alprd;

SELECT d, f FROM tbl3_uncompressed;

SELECT d, f FROM tbl3_alprd;

PRAGMA force_compression = '${compression}';

create table tbl1_${compression}(
a INTEGER DEFAULT 5,
b VARCHAR DEFAULT 'test',
c BOOL DEFAULT false,
d DOUBLE,
e TEXT default 'null',
f FLOAT
);

create table tbl1_${compression}(
a INTEGER DEFAULT 5,
b VARCHAR DEFAULT 'test',
c BOOL DEFAULT false,
d DOUBLE,
e TEXT default 'null',
f FLOAT
);

checkpoint AS endloop;

SELECT d, f FROM tbl1_uncompressed;

SELECT d, f FROM tbl1_alprd;

DROP TABLE IF EXISTS temperatures;

PRAGMA threads = 1;

PRAGMA force_compression = 'alprd';

CREATE TABLE temperatures (temperature DOUBLE);

INSERT INTO temperatures SELECT temp FROM "https://github.com/duckdb/duckdb-data/releases/download/v1.0/city_temperature.parquet" AS t(temp), RANGE(0, 1);

CHECKPOINT;

CREATE TABLE reference_temperatures (temperature DOUBLE);

PRAGMA force_compression = 'uncompressed';

INSERT INTO reference_temperatures SELECT temp FROM "https://github.com/duckdb/duckdb-data/releases/download/v1.0/city_temperature.parquet" AS t(temp), RANGE(0, 1);

checkpoint;

SELECT temperature FROM reference_temperatures;

SELECT temperature FROM temperatures;

PRAGMA force_compression = 'uncompressed';

CREATE TABLE random_double AS SELECT CAST(RANDOM() AS DOUBLE) AS data FROM RANGE(0, 1024) AS tbl(i);

checkpoint;

SELECT compression FROM PRAGMA_STORAGE_INFO('random_double') WHERE segment_type = 'double' AND compression <> 'Uncompressed';

PRAGMA force_compression = 'alprd';

CREATE TABLE random_alprd_double AS SELECT * FROM random_double;

checkpoint;

SELECT compression FROM PRAGMA_STORAGE_INFO('random_alprd_double') WHERE segment_type = 'double' AND compression <> 'ALPRD';

SELECT * FROM random_double;

SELECT * FROM random_alprd_double;

PRAGMA force_compression = 'uncompressed';

CREATE TABLE random_float AS SELECT CAST(RANDOM() AS REAL) AS data FROM RANGE(0, 1024) AS tbl(i);

checkpoint;

SELECT compression FROM PRAGMA_STORAGE_INFO('random_float') WHERE segment_type = 'float' AND compression <> 'Uncompressed';

PRAGMA force_compression = 'alprd';

CREATE TABLE random_alp_float AS SELECT * FROM random_float;

checkpoint;

SELECT compression FROM PRAGMA_STORAGE_INFO('random_alp_float') WHERE segment_type = 'float' AND compression <> 'ALPRD';

SELECT * FROM random_float;

SELECT * FROM random_alp_float;

PRAGMA enable_verification;

PRAGMA disable_optimizer;

PRAGMA force_compression = 'uncompressed';

CREATE TABLE temp_table AS SELECT CAST(RANDOM() AS DOUBLE) * 100 AS col, j FROM RANGE(0, 10240) AS tbl(j);

CREATE TABLE temp_table AS SELECT CAST(RANDOM() AS DOUBLE) * 100 AS col, j FROM RANGE(0, 10240) AS tbl(j);

PRAGMA force_compression = '${compression}';

create table tbl_${compression} as select * from temp_table;

checkpoint;

SELECT compression FROM PRAGMA_STORAGE_INFO('tbl_${compression}') WHERE segment_type = 'double' AND compression <> '${compression}';

SELECT compression FROM PRAGMA_STORAGE_INFO('tbl_${compression}') WHERE segment_type = 'double' AND compression <> '${compression}';

PRAGMA force_compression = 'uncompressed';

PRAGMA force_compression = 'uncompressed';

PRAGMA force_compression = 'uncompressed';

PRAGMA force_compression = '${compression}';

PRAGMA force_compression = '${compression}';

PRAGMA force_compression = '${compression}';

checkpoint AS endloop;

checkpoint AS endloop;

checkpoint AS endloop;

PRAGMA force_compression = '${compression}';

PRAGMA force_compression = '${compression}';

checkpoint;

SELECT compression FROM PRAGMA_STORAGE_INFO('${compression}_tbl') WHERE segment_type = '${type}' AND compression <> '${compression}';

DROP TABLE temp_table;

DROP TABLE temp_table;

PRAGMA force_compression = 'alprd';

CALL dsdgen(sf=1, suffix='_original');

CALL dsdgen(sf=1, suffix='_original');

CALL dsdgen(sf=1, suffix='_original');

CALL dsdgen(sf=1, suffix='_original');

CALL dsdgen(sf=1, suffix='_original');

CALL dsdgen(sf=1, suffix='_original');

CALL dsdgen(sf=1, suffix='_original');

CALL dsdgen(sf=1, suffix='_original');

CALL dsdgen(sf=1, suffix='_original');

CALL dsdgen(sf=1, suffix='_original');

CALL dsdgen(sf=1, suffix='_original');

CALL dsdgen(sf=1, suffix='_original');

CALL dsdgen(sf=1, suffix='_original');

CALL dsdgen(sf=1, suffix='_original');

CALL dsdgen(sf=1, suffix='_original');

CALL dsdgen(sf=1, suffix='_original');

CALL dsdgen(sf=1, suffix='_original');

CALL dsdgen(sf=1, suffix='_original');

CALL dsdgen(sf=1, suffix='_original');

CALL dsdgen(sf=1, suffix='_original');

CALL dsdgen(sf=1, suffix='_original');

CALL dsdgen(sf=1, suffix='_original');

CALL dsdgen(sf=1, suffix='_original');

CALL dsdgen(sf=1, suffix='_original');

CALL dsdgen(sf=1, suffix='_original');

CALL dsdgen(sf=1, suffix='_original');

INSERT INTO web_site SELECT * FROM web_site_original;

INSERT INTO web_sales SELECT * FROM web_sales_original;

INSERT INTO web_returns SELECT * FROM web_returns_original;

INSERT INTO web_page SELECT * FROM web_page_original;

INSERT INTO warehouse SELECT * FROM warehouse_original;

INSERT INTO time_dim SELECT * FROM time_dim_original;

INSERT INTO store_sales SELECT * FROM store_sales_original;

INSERT INTO store_returns SELECT * FROM store_returns_original;

INSERT INTO store SELECT * FROM store_original;

INSERT INTO ship_mode SELECT * FROM ship_mode_original;

INSERT INTO reason SELECT * FROM reason_original;

INSERT INTO promotion SELECT * FROM promotion_original;

INSERT INTO item SELECT * FROM item_original;

INSERT INTO inventory SELECT * FROM inventory_original;

INSERT INTO income_band SELECT * FROM income_band_original;

INSERT INTO household_demographics SELECT * FROM household_demographics_original;

INSERT INTO date_dim SELECT * FROM date_dim_original;

INSERT INTO customer_demographics SELECT * FROM customer_demographics_original;

INSERT INTO customer_address SELECT * FROM customer_address_original;

INSERT INTO customer SELECT * FROM customer_original;

INSERT INTO catalog_sales SELECT * FROM catalog_sales_original;

INSERT INTO catalog_returns SELECT * FROM catalog_returns_original;

INSERT INTO catalog_page SELECT * FROM catalog_page_original;

INSERT INTO call_center SELECT * FROM call_center_original;

INSERT INTO call_center SELECT * FROM call_center_original;

SELECT compression FROM PRAGMA_STORAGE_INFO('${tbl}') WHERE segment_type = '${type}' AND compression <> 'ALPRD' AND compression <> 'Constant';

SELECT compression FROM PRAGMA_STORAGE_INFO('${tbl}') WHERE segment_type = '${type}' AND compression <> 'ALPRD' AND compression <> 'Constant';

SELECT compression FROM PRAGMA_STORAGE_INFO('${tbl}') WHERE segment_type = '${type}' AND compression <> 'ALPRD' AND compression <> 'Constant';

SELECT compression FROM PRAGMA_STORAGE_INFO('${tbl}') WHERE segment_type = '${type}' AND compression <> 'ALPRD' AND compression <> 'Constant';

SELECT compression FROM PRAGMA_STORAGE_INFO('${tbl}') WHERE segment_type = '${type}' AND compression <> 'ALPRD' AND compression <> 'Constant';

DROP TABLE web_site;

DROP TABLE web_sales;

DROP TABLE web_returns;

DROP TABLE web_page;

DROP TABLE warehouse;

DROP TABLE time_dim;

DROP TABLE store_sales;

DROP TABLE store_returns;

DROP TABLE store;

DROP TABLE ship_mode;

DROP TABLE reason;

DROP TABLE promotion;

DROP TABLE item;

DROP TABLE inventory;

DROP TABLE income_band;

DROP TABLE household_demographics;

DROP TABLE date_dim;

DROP TABLE customer_demographics;

DROP TABLE customer_address;

DROP TABLE customer;

DROP TABLE catalog_sales;

DROP TABLE catalog_returns;

DROP TABLE catalog_page;

PRAGMA threads = 1;

PRAGMA force_compression = 'alprd';

PRAGMA force_compression = 'alprd';

PRAGMA force_compression = 'alprd';

PRAGMA force_compression = 'alprd';

PRAGMA force_compression = 'alprd';

PRAGMA force_compression = 'alprd';

PRAGMA force_compression = 'alprd';

PRAGMA force_compression = 'alprd';

PRAGMA force_compression = 'alprd';

PRAGMA force_compression = 'alprd';

INSERT INTO lineitem SELECT * FROM lineitem_original;

INSERT INTO orders SELECT * FROM orders_original;

INSERT INTO partsupp SELECT * FROM partsupp_original;

INSERT INTO part SELECT * FROM part_original;

INSERT INTO customer SELECT * FROM customer_original;

INSERT INTO supplier SELECT * FROM supplier_original;

INSERT INTO nation SELECT * FROM nation_original;

INSERT INTO region SELECT * FROM region_original;

INSERT INTO region SELECT * FROM region_original;

INSERT INTO region SELECT * FROM region_original;

INSERT INTO region SELECT * FROM region_original;

SELECT s_suppkey, s_name, s_address, s_phone, total_revenue FROM supplier, (SELECT l_suppkey AS supplier_no, KAHAN_SUM(l_extendedprice * (1 - l_discount)) AS total_revenue FROM lineitem WHERE l_shipdate >= CAST('1996-01-01' AS DATE) AND l_shipdate < CAST('1996-04-01' AS DATE) GROUP BY supplier_no) AS revenue0 WHERE s_suppkey = supplier_no AND total_revenue = (SELECT MAX(total_revenue) FROM (SELECT l_suppkey AS supplier_no, KAHAN_SUM(l_extendedprice * (1 - l_discount)) AS total_revenue FROM lineitem WHERE l_shipdate >= CAST('1996-01-01' AS DATE) AND l_shipdate < CAST('1996-04-01' AS DATE) GROUP BY supplier_no) AS revenue1) ORDER BY s_suppkey;

SELECT s_suppkey, s_name, s_address, s_phone, total_revenue FROM supplier, (SELECT l_suppkey AS supplier_no, KAHAN_SUM(l_extendedprice * (1 - l_discount)) AS total_revenue FROM lineitem WHERE l_shipdate >= CAST('1996-01-01' AS DATE) AND l_shipdate < CAST('1996-04-01' AS DATE) GROUP BY supplier_no) AS revenue0 WHERE s_suppkey = supplier_no AND total_revenue = (SELECT MAX(total_revenue) FROM (SELECT l_suppkey AS supplier_no, KAHAN_SUM(l_extendedprice * (1 - l_discount)) AS total_revenue FROM lineitem WHERE l_shipdate >= CAST('1996-01-01' AS DATE) AND l_shipdate < CAST('1996-04-01' AS DATE) GROUP BY supplier_no) AS revenue1) ORDER BY s_suppkey;

DROP TABLE lineitem;

DROP TABLE orders;

DROP TABLE partsupp;

DROP TABLE part;

DROP TABLE customer;

DROP TABLE supplier;

DROP TABLE nation;

PRAGMA force_compression = 'uncompressed';

CREATE TABLE random_double AS SELECT CAST(0 AS DOUBLE) AS data FROM RANGE(0, 1024) AS tbl(i);

checkpoint;

SELECT compression FROM PRAGMA_STORAGE_INFO('random_double') WHERE segment_type = 'double' AND compression <> 'Uncompressed';

PRAGMA force_compression = 'alprd';

CREATE TABLE random_alp_double AS SELECT * FROM random_double;

checkpoint;

SELECT compression FROM PRAGMA_STORAGE_INFO('random_alp_double') WHERE segment_type = 'double' AND compression <> 'ALPRD';

SELECT * FROM random_double;

SELECT * FROM random_alp_double;

PRAGMA force_compression = 'bitpacking';

PRAGMA force_bitpacking_mode = 'constant';

CREATE TABLE test_bitpacked AS SELECT CAST((i // CAST(119000 AS BIGINT)) AS BIGINT) AS i FROM RANGE(0, 120000000) AS tbl(i);

checkpoint;

PRAGMA force_compression = 'uncompressed';

CREATE TABLE test_uncompressed AS SELECT CAST(i AS BIGINT) FROM RANGE(0, 120000000) AS tbl(i);

checkpoint;

SELECT compression FROM PRAGMA_STORAGE_INFO('test_bitpacked') WHERE segment_type <> 'VALIDITY' AND compression <> 'BitPacking';

SELECT compression FROM PRAGMA_STORAGE_INFO('test_uncompressed') WHERE segment_type <> 'VALIDITY' AND compression <> 'Uncompressed';

SELECT (CAST(uncompressed AS REAL) / CAST(bitpacked AS REAL)) > 700, (CAST(uncompressed AS REAL) / CAST(bitpacked AS REAL)) < 1000 FROM (SELECT (SELECT COUNT(DISTINCT block_id) FROM PRAGMA_STORAGE_INFO('test_bitpacked') WHERE NOT segment_type IN ('VARCHAR', 'VALIDITY')) AS bitpacked, (SELECT COUNT(DISTINCT block_id) FROM PRAGMA_STORAGE_INFO('test_uncompressed') WHERE NOT segment_type IN ('VARCHAR', 'VALIDITY')) AS uncompressed);

DROP TABLE test_bitpacked;
DROP TABLE test_uncompressed;

PRAGMA force_compression = 'bitpacking';

PRAGMA force_bitpacking_mode = 'constant_delta';

CREATE TABLE test_bitpacked AS SELECT CAST(i AS BIGINT) AS i FROM RANGE(0, 120000000) AS tbl(i);

checkpoint;

PRAGMA force_compression = 'uncompressed';

CREATE TABLE test_uncompressed AS SELECT CAST(i AS BIGINT) AS i FROM RANGE(0, 120000000) AS tbl(i);

checkpoint;

SELECT compression FROM PRAGMA_STORAGE_INFO('test_bitpacked') WHERE segment_type <> 'VALIDITY' AND compression <> 'BitPacking';

SELECT compression FROM PRAGMA_STORAGE_INFO('test_uncompressed') WHERE segment_type <> 'VALIDITY' AND compression <> 'Uncompressed';

checkpoint;

SELECT (CAST(uncompressed AS REAL) / CAST(bitpacked AS REAL)) > 600, (CAST(uncompressed AS REAL) / CAST(bitpacked AS REAL)) < 800 FROM (SELECT (SELECT COUNT(DISTINCT block_id) FROM PRAGMA_STORAGE_INFO('test_bitpacked') WHERE NOT segment_type IN ('VARCHAR', 'VALIDITY')) AS bitpacked, (SELECT COUNT(DISTINCT block_id) FROM PRAGMA_STORAGE_INFO('test_uncompressed') WHERE NOT segment_type IN ('VARCHAR', 'VALIDITY')) AS uncompressed);

DROP TABLE test_bitpacked;
DROP TABLE test_uncompressed;

PRAGMA force_compression = 'bitpacking';

PRAGMA force_bitpacking_mode = 'delta_for';

CREATE TABLE test_bitpacked AS SELECT i // CAST(2 AS BIGINT) AS i FROM RANGE(0, 120000000) AS tbl(i);

checkpoint;

PRAGMA force_compression = 'uncompressed';

CREATE TABLE test_uncompressed AS SELECT i AS i FROM RANGE(0, 120000000) AS tbl(i);

checkpoint;

SELECT compression FROM PRAGMA_STORAGE_INFO('test_bitpacked') WHERE segment_type <> 'VALIDITY' AND compression <> 'BitPacking';

SELECT compression FROM PRAGMA_STORAGE_INFO('test_uncompressed') WHERE segment_type <> 'VALIDITY' AND compression <> 'Uncompressed';

checkpoint;

SELECT (CAST(uncompressed AS REAL) / CAST(bitpacked AS REAL)) > 50, (CAST(uncompressed AS REAL) / CAST(bitpacked AS REAL)) < 60 FROM (SELECT (SELECT COUNT(DISTINCT block_id) FROM PRAGMA_STORAGE_INFO('test_bitpacked') WHERE NOT segment_type IN ('VARCHAR', 'VALIDITY')) AS bitpacked, (SELECT COUNT(DISTINCT block_id) FROM PRAGMA_STORAGE_INFO('test_uncompressed') WHERE NOT segment_type IN ('VARCHAR', 'VALIDITY')) AS uncompressed);

DROP TABLE test_bitpacked;
DROP TABLE test_uncompressed;

PRAGMA force_compression = 'bitpacking';

PRAGMA force_bitpacking_mode = 'for';

CREATE TABLE test_bitpacked AS SELECT i % CAST(2 AS BIGINT) AS i FROM RANGE(0, 120000000) AS tbl(i);

checkpoint;

PRAGMA force_compression = 'uncompressed';

CREATE TABLE test_uncompressed AS SELECT CAST(i AS BIGINT) AS i FROM RANGE(0, 120000000) AS tbl(i);

checkpoint;

SELECT compression FROM PRAGMA_STORAGE_INFO('test_bitpacked') WHERE segment_type <> 'VALIDITY' AND compression <> 'BitPacking';

SELECT compression FROM PRAGMA_STORAGE_INFO('test_uncompressed') WHERE segment_type <> 'VALIDITY' AND compression <> 'Uncompressed';

checkpoint;

SELECT (CAST(uncompressed AS REAL) / CAST(bitpacked AS REAL)) > 50, (CAST(uncompressed AS REAL) / CAST(bitpacked AS REAL)) < 60 FROM (SELECT (SELECT COUNT(DISTINCT block_id) FROM PRAGMA_STORAGE_INFO('test_bitpacked') WHERE NOT segment_type IN ('VARCHAR', 'VALIDITY')) AS bitpacked, (SELECT COUNT(DISTINCT block_id) FROM PRAGMA_STORAGE_INFO('test_uncompressed') WHERE NOT segment_type IN ('VARCHAR', 'VALIDITY')) AS uncompressed);

DROP TABLE test_bitpacked;
DROP TABLE test_uncompressed;

DROP TABLE test_bitpacked;
DROP TABLE test_uncompressed;

PRAGMA force_compression = 'uncompressed';

PRAGMA force_compression = 'uncompressed';

checkpoint;

PRAGMA force_compression = 'bitpacking';

PRAGMA force_compression = 'bitpacking';

checkpoint;

checkpoint;

DROP TABLE test_bitpacked;

PRAGMA force_compression = 'bitpacking';

PRAGMA force_bitpacking_mode = 'constant';

CREATE TABLE test_bitpacked AS SELECT CAST((i // CAST(119000 AS BIGINT)) AS INT128) AS i FROM RANGE(0, 120000000) AS tbl(i);

checkpoint;

PRAGMA force_compression = 'uncompressed';

CREATE TABLE test_uncompressed AS SELECT CAST(i AS INT128) FROM RANGE(0, 120000000) AS tbl(i);

checkpoint;

SELECT compression FROM PRAGMA_STORAGE_INFO('test_bitpacked') WHERE segment_type <> 'VALIDITY' AND compression <> 'BitPacking';

SELECT compression FROM PRAGMA_STORAGE_INFO('test_uncompressed') WHERE segment_type <> 'VALIDITY' AND compression <> 'Uncompressed';

SELECT (CAST(uncompressed AS REAL) / CAST(bitpacked AS REAL)) > 900, (CAST(uncompressed AS REAL) / CAST(bitpacked AS REAL)) < 1200 FROM (SELECT (SELECT COUNT(DISTINCT block_id) FROM PRAGMA_STORAGE_INFO('test_bitpacked') WHERE NOT segment_type IN ('VARCHAR', 'VALIDITY')) AS bitpacked, (SELECT COUNT(DISTINCT block_id) FROM PRAGMA_STORAGE_INFO('test_uncompressed') WHERE NOT segment_type IN ('VARCHAR', 'VALIDITY')) AS uncompressed);

DROP TABLE test_bitpacked;
DROP TABLE test_uncompressed;

PRAGMA force_compression = 'bitpacking';

PRAGMA force_bitpacking_mode = 'constant_delta';

CREATE TABLE test_bitpacked AS SELECT CAST(i AS INT128) AS i FROM RANGE(0, 120000000) AS tbl(i);

checkpoint;

PRAGMA force_compression = 'uncompressed';

CREATE TABLE test_uncompressed AS SELECT CAST(i AS INT128) AS i FROM RANGE(0, 120000000) AS tbl(i);

checkpoint;

SELECT compression FROM PRAGMA_STORAGE_INFO('test_bitpacked') WHERE segment_type <> 'VALIDITY' AND compression <> 'BitPacking';

SELECT compression FROM PRAGMA_STORAGE_INFO('test_uncompressed') WHERE segment_type <> 'VALIDITY' AND compression <> 'Uncompressed';

checkpoint;

SELECT (CAST(uncompressed AS REAL) / CAST(bitpacked AS REAL)) > 600, (CAST(uncompressed AS REAL) / CAST(bitpacked AS REAL)) < 800 FROM (SELECT (SELECT COUNT(DISTINCT block_id) FROM PRAGMA_STORAGE_INFO('test_bitpacked') WHERE NOT segment_type IN ('VARCHAR', 'VALIDITY')) AS bitpacked, (SELECT COUNT(DISTINCT block_id) FROM PRAGMA_STORAGE_INFO('test_uncompressed') WHERE NOT segment_type IN ('VARCHAR', 'VALIDITY')) AS uncompressed);

DROP TABLE test_bitpacked;
DROP TABLE test_uncompressed;

PRAGMA force_compression = 'bitpacking';

PRAGMA force_bitpacking_mode = 'delta_for';

CREATE TABLE test_bitpacked AS SELECT i // CAST(2 AS INT128) AS i FROM RANGE(0, 120000000) AS tbl(i);

checkpoint;

PRAGMA force_compression = 'uncompressed';

CREATE TABLE test_uncompressed AS SELECT i AS i FROM RANGE(0, 120000000) AS tbl(i);

checkpoint;

SELECT compression FROM PRAGMA_STORAGE_INFO('test_bitpacked') WHERE segment_type <> 'VALIDITY' AND compression <> 'BitPacking';

SELECT compression FROM PRAGMA_STORAGE_INFO('test_uncompressed') WHERE segment_type <> 'VALIDITY' AND compression <> 'Uncompressed';

checkpoint;

SELECT (CAST(uncompressed AS REAL) / CAST(bitpacked AS REAL)) > 40, (CAST(uncompressed AS REAL) / CAST(bitpacked AS REAL)) < 60 FROM (SELECT (SELECT COUNT(DISTINCT block_id) FROM PRAGMA_STORAGE_INFO('test_bitpacked') WHERE NOT segment_type IN ('VARCHAR', 'VALIDITY')) AS bitpacked, (SELECT COUNT(DISTINCT block_id) FROM PRAGMA_STORAGE_INFO('test_uncompressed') WHERE NOT segment_type IN ('VARCHAR', 'VALIDITY')) AS uncompressed);

DROP TABLE test_bitpacked;
DROP TABLE test_uncompressed;

PRAGMA force_compression = 'bitpacking';

PRAGMA force_bitpacking_mode = 'for';

CREATE TABLE test_bitpacked AS SELECT i % CAST(2 AS INT128) AS i FROM RANGE(0, 120000000) AS tbl(i);

checkpoint;

PRAGMA force_compression = 'uncompressed';

CREATE TABLE test_uncompressed AS SELECT CAST(i AS INT128) AS i FROM RANGE(0, 120000000) AS tbl(i);

checkpoint;

SELECT compression FROM PRAGMA_STORAGE_INFO('test_bitpacked') WHERE segment_type <> 'VALIDITY' AND compression <> 'BitPacking';

SELECT compression FROM PRAGMA_STORAGE_INFO('test_uncompressed') WHERE segment_type <> 'VALIDITY' AND compression <> 'Uncompressed';

checkpoint;

SELECT (CAST(uncompressed AS REAL) / CAST(bitpacked AS REAL)) > 90, (CAST(uncompressed AS REAL) / CAST(bitpacked AS REAL)) < 100 FROM (SELECT (SELECT COUNT(DISTINCT block_id) FROM PRAGMA_STORAGE_INFO('test_bitpacked') WHERE NOT segment_type IN ('VARCHAR', 'VALIDITY')) AS bitpacked, (SELECT COUNT(DISTINCT block_id) FROM PRAGMA_STORAGE_INFO('test_uncompressed') WHERE NOT segment_type IN ('VARCHAR', 'VALIDITY')) AS uncompressed);

PRAGMA force_bitpacking_mode = '${bitpacking_mode}';

PRAGMA force_compression = 'bitpacking';

CREATE TABLE test (x INT128, a BIGINT, b INT, c SMALLINT, d TINYINT);

INSERT INTO test VALUES (-170141183460469231731687303715884105728, -9223372036854775808, -2147483648, -32768, -128), (170141183460469231731687303715884105727, 9223372036854775807, 2147483647, 32767, 127);

SELECT compression FROM PRAGMA_STORAGE_INFO('test') WHERE (segment_type ILIKE 'HUGEINT' OR segment_type ILIKE 'BIGINT' OR segment_type ILIKE 'INTEGER' OR segment_type ILIKE 'SMALLINT' OR segment_type ILIKE 'TINYINT');

PRAGMA force_compression = 'bitpacking';

PRAGMA force_bitpacking_mode = 'constant';

CREATE TABLE test (id TEXT, a INT128);

INSERT INTO test SELECT CAST(i AS TEXT), CAST(i AS INT128) FROM RANGE(0, 16) AS tbl(i);
INSERT INTO test SELECT CAST(i AS TEXT), 13371337 FROM RANGE(0, 16) AS tbl(i);

checkpoint;

SELECT a FROM test LIMIT 5;

SELECT compression FROM PRAGMA_STORAGE_INFO('test') WHERE segment_type ILIKE 'HUGEINT';

DROP TABLE test;

CREATE TABLE test (id TEXT, a INT128);

INSERT INTO test SELECT CAST(i AS TEXT), CAST(i AS INT128) + 3000000000 FROM RANGE(0, 16) AS tbl(i);
INSERT INTO test SELECT CAST(i AS TEXT), 13371337 FROM RANGE(0, 16) AS tbl(i);

checkpoint;

SELECT a FROM test LIMIT 5;

SELECT compression FROM PRAGMA_STORAGE_INFO('test') WHERE segment_type ILIKE 'HUGEINT';

DROP TABLE test;

CREATE TABLE test (id TEXT, a INT128);

INSERT INTO test SELECT CAST(i AS TEXT), CAST(i AS INT128) + 200000000000 FROM RANGE(0, 16) AS tbl(i);
INSERT INTO test SELECT CAST(i AS TEXT), 13371337 FROM RANGE(0, 16) AS tbl(i);

checkpoint;

SELECT a FROM test LIMIT 5;

SELECT compression FROM PRAGMA_STORAGE_INFO('test') WHERE segment_type ILIKE 'HUGEINT';

DROP TABLE test;

CREATE TABLE test (id TEXT, a INT128);

INSERT INTO test SELECT CAST(i AS TEXT), CAST(i AS INT128) + 10000000000000000000 FROM RANGE(0, 16) AS tbl(i);
INSERT INTO test SELECT CAST(i AS TEXT), 13371337 FROM RANGE(0, 16) AS tbl(i);

checkpoint;

SELECT a FROM test LIMIT 5;

SELECT compression FROM PRAGMA_STORAGE_INFO('test') WHERE segment_type ILIKE 'HUGEINT';

DROP TABLE test;

CREATE TABLE test (id TEXT, a INT128);

INSERT INTO test SELECT CAST(i AS TEXT), CAST(i AS INT128) + 500000000000000000000 FROM RANGE(0, 16) AS tbl(i);
INSERT INTO test SELECT CAST(i AS TEXT), 13371337 FROM RANGE(0, 16) AS tbl(i);

checkpoint;

SELECT a FROM test LIMIT 5;

SELECT compression FROM PRAGMA_STORAGE_INFO('test') WHERE segment_type ILIKE 'HUGEINT';

DROP TABLE test;

CREATE TABLE test (id TEXT, a INT128);

INSERT INTO test SELECT CAST(i AS TEXT), CAST(i AS INT128) + 50000000000000000000000000000 FROM RANGE(0, 16) AS tbl(i);
INSERT INTO test SELECT CAST(i AS TEXT), 13371337 FROM RANGE(0, 16) AS tbl(i);

checkpoint;

SELECT a FROM test LIMIT 5;

SELECT compression FROM PRAGMA_STORAGE_INFO('test') WHERE segment_type ILIKE 'HUGEINT';

DROP TABLE test;

CREATE TABLE test (id TEXT, a INT128);

INSERT INTO test SELECT CAST(i AS TEXT), CAST(i AS INT128) + 300000000000000000000000000000000 FROM RANGE(0, 16) AS tbl(i);
INSERT INTO test SELECT CAST(i AS TEXT), 13371337 FROM RANGE(0, 16) AS tbl(i);

checkpoint;

SELECT a FROM test LIMIT 5;

SELECT compression FROM PRAGMA_STORAGE_INFO('test') WHERE segment_type ILIKE 'HUGEINT';

DROP TABLE test;

CREATE TABLE test (id TEXT, a INT128);

INSERT INTO test SELECT CAST(i AS TEXT), CAST(i AS INT128) + 20000000000000000000000000000000000000 FROM RANGE(0, 16) AS tbl(i);
INSERT INTO test SELECT CAST(i AS TEXT), 13371337 FROM RANGE(0, 16) AS tbl(i);

checkpoint;

SELECT a FROM test LIMIT 5;

SELECT compression FROM PRAGMA_STORAGE_INFO('test') WHERE segment_type ILIKE 'HUGEINT';

PRAGMA force_compression = 'bitpacking';

SELECT CURRENT_SETTING('force_bitpacking_mode');

PRAGMA force_bitpacking_mode = 'xxx';

PRAGMA force_bitpacking_mode = '${mode}';

SELECT CURRENT_SETTING('force_bitpacking_mode') = '${mode}';

PRAGMA verify_fetch_row;

PRAGMA verify_fetch_row;

PRAGMA force_bitpacking_mode = '${bitpacking_mode}';

CREATE TABLE test (id TEXT, a BIGINT);

INSERT INTO test SELECT CAST(i AS TEXT), -i FROM RANGE(0, 10000) AS tbl(i);

INSERT INTO test SELECT CAST(i AS TEXT), 13371337 FROM RANGE(0, 10000) AS tbl(i);

checkpoint;

SELECT a FROM test LIMIT 5;

SELECT a FROM test LIMIT 5 OFFSET 12000;

SELECT AVG(a) FROM test;

SELECT compression FROM PRAGMA_STORAGE_INFO('test') WHERE segment_type ILIKE 'BIGINT';

PRAGMA verify_fetch_row;

PRAGMA verify_fetch_row;

PRAGMA force_bitpacking_mode = '${bitpacking_mode}';

CREATE TABLE test (id TEXT, a INT128);

INSERT INTO test SELECT CAST(i AS TEXT), -CAST(i AS INT128) + -CAST(1234567891011121314151617180000 AS INT128) FROM RANGE(0, 10000) AS tbl(i);

INSERT INTO test SELECT CAST(i AS TEXT), 13371337 FROM RANGE(0, 10000) AS tbl(i);

checkpoint;

SELECT a FROM test LIMIT 5;

SELECT a FROM test LIMIT 5 OFFSET 12000;

SELECT compression FROM PRAGMA_STORAGE_INFO('test') WHERE segment_type ILIKE 'HUGEINT';

PRAGMA force_compression = 'bitpacking';

CREATE OR REPLACE TABLE toy_table AS SELECT * FROM "https://github.com/duckdb/duckdb-data/releases/download/v1.0/bp_bug.parquet";

PRAGMA force_compression = 'bitpacking';

CREATE TABLE test (a INT, b INT);

INSERT INTO test VALUES (11, 22), (11, 22), (12, 21), (NULL, NULL);

CHECKPOINT;

SELECT compression FROM PRAGMA_STORAGE_INFO('test') WHERE segment_type ILIKE 'INTEGER' LIMIT 1;

CREATE TABLE test_bp (a INT);

INSERT INTO test_bp SELECT 1 FROM RANGE(0, 10000) AS tbl(i);

INSERT INTO test_bp SELECT 2 FROM RANGE(0, 10000) AS tbl(i);

CHECKPOINT;

SELECT segment_info FROM PRAGMA_STORAGE_INFO('test_bp') WHERE NOT segment_type IN ('VALIDITY');

PRAGMA force_bitpacking_mode = 'delta_for';

CREATE OR REPLACE TABLE test_bp (a INT);

INSERT INTO test_bp SELECT 3 * (i // 1000) + (i % 10) FROM RANGE(0, 10000) AS tbl(i);

CHECKPOINT;

SELECT segment_info FROM PRAGMA_STORAGE_INFO('test_bp') WHERE NOT segment_type IN ('VALIDITY');

PRAGMA force_bitpacking_mode = '${bitpacking_mode}';

PRAGMA force_compression = 'bitpacking';

CREATE TABLE test (a INT);

INSERT INTO test SELECT i FROM RANGE(0, 150000) AS tbl(i);

checkpoint;

CREATE TABLE test_2 AS SELECT a FROM test;

checkpoint;

SELECT SUM(a) FROM test;

SELECT SUM(a) FROM test_2;

DROP TABLE test;

PRAGMA force_compression = 'bitpacking';

PRAGMA force_bitpacking_mode = 'constant';

CREATE TABLE test (id TEXT, a UINT128);

INSERT INTO test SELECT CAST(i AS TEXT), CAST(i AS UINT128) FROM RANGE(0, 16) AS tbl(i);
INSERT INTO test SELECT CAST(i AS TEXT), 13371337 FROM RANGE(0, 16) AS tbl(i);

checkpoint;

SELECT a FROM test LIMIT 5;

SELECT compression FROM PRAGMA_STORAGE_INFO('test') WHERE segment_type ILIKE 'UHUGEINT';

DROP TABLE test;

CREATE TABLE test (id TEXT, a UINT128);

INSERT INTO test SELECT CAST(i AS TEXT), CAST(i AS UINT128) + CAST(3000000000 AS UINT128) FROM RANGE(0, 16) AS tbl(i);
INSERT INTO test SELECT CAST(i AS TEXT), 13371337 FROM RANGE(0, 16) AS tbl(i);

checkpoint;

SELECT a FROM test LIMIT 5;

SELECT compression FROM PRAGMA_STORAGE_INFO('test') WHERE segment_type ILIKE 'UHUGEINT';

DROP TABLE test;

CREATE TABLE test (id TEXT, a UINT128);

INSERT INTO test SELECT CAST(i AS TEXT), CAST(i AS UINT128) + CAST(200000000000 AS UINT128) FROM RANGE(0, 16) AS tbl(i);
INSERT INTO test SELECT CAST(i AS TEXT), 13371337 FROM RANGE(0, 16) AS tbl(i);

checkpoint;

SELECT a FROM test LIMIT 5;

SELECT compression FROM PRAGMA_STORAGE_INFO('test') WHERE segment_type ILIKE 'UHUGEINT';

DROP TABLE test;

CREATE TABLE test (id TEXT, a UINT128);

INSERT INTO test SELECT CAST(i AS TEXT), CAST(i AS UINT128) + CAST(10000000000000000000 AS UINT128) FROM RANGE(0, 16) AS tbl(i);
INSERT INTO test SELECT CAST(i AS TEXT), 13371337 FROM RANGE(0, 16) AS tbl(i);

checkpoint;

SELECT a FROM test LIMIT 5;

SELECT compression FROM PRAGMA_STORAGE_INFO('test') WHERE segment_type ILIKE 'UHUGEINT';

DROP TABLE test;

CREATE TABLE test (id TEXT, a UINT128);

INSERT INTO test SELECT CAST(i AS TEXT), CAST(i AS UINT128) + CAST(500000000000000000000 AS UINT128) FROM RANGE(0, 16) AS tbl(i);
INSERT INTO test SELECT CAST(i AS TEXT), 13371337 FROM RANGE(0, 16) AS tbl(i);

checkpoint;

SELECT a FROM test LIMIT 5;

SELECT compression FROM PRAGMA_STORAGE_INFO('test') WHERE segment_type ILIKE 'UHUGEINT';

DROP TABLE test;

CREATE TABLE test (id TEXT, a UINT128);

INSERT INTO test SELECT CAST(i AS TEXT), CAST(i AS UINT128) + CAST(50000000000000000000000000000 AS UINT128) FROM RANGE(0, 16) AS tbl(i);
INSERT INTO test SELECT CAST(i AS TEXT), 13371337 FROM RANGE(0, 16) AS tbl(i);

checkpoint;

SELECT a FROM test LIMIT 5;

SELECT compression FROM PRAGMA_STORAGE_INFO('test') WHERE segment_type ILIKE 'UHUGEINT';

DROP TABLE test;

CREATE TABLE test (id TEXT, a UINT128);

INSERT INTO test SELECT CAST(i AS TEXT), CAST(i AS UINT128) + CAST(300000000000000000000000000000000 AS UINT128) FROM RANGE(0, 16) AS tbl(i);
INSERT INTO test SELECT CAST(i AS TEXT), 13371337 FROM RANGE(0, 16) AS tbl(i);

checkpoint;

SELECT a FROM test LIMIT 5;

SELECT compression FROM PRAGMA_STORAGE_INFO('test') WHERE segment_type ILIKE 'UHUGEINT';

DROP TABLE test;

CREATE TABLE test (id TEXT, a UINT128);

INSERT INTO test SELECT CAST(i AS TEXT), CAST(i AS UINT128) + CAST(20000000000000000000000000000000000000 AS UINT128) FROM RANGE(0, 16) AS tbl(i);
INSERT INTO test SELECT CAST(i AS TEXT), 13371337 FROM RANGE(0, 16) AS tbl(i);

checkpoint;

SELECT a FROM test LIMIT 5;

SELECT compression FROM PRAGMA_STORAGE_INFO('test') WHERE segment_type ILIKE 'UHUGEINT';

PRAGMA force_compression = 'bitpacking';

CREATE TABLE test_bp (a INT);

INSERT INTO test_bp SELECT 1 FROM RANGE(0, 1000) AS tbl(i);

INSERT INTO test_bp SELECT 2 FROM RANGE(0, 1000) AS tbl(i);

CHECKPOINT;

SELECT compression FROM PRAGMA_STORAGE_INFO('test_bp') WHERE segment_type ILIKE 'INTEGER' LIMIT 1;

SELECT COUNT(temperature) FROM temperatures_double;

SELECT COUNT(temperature) FROM temperatures_float;

SELECT temperature FROM temperatures_double;

SELECT temperature FROM temperatures_float;

SELECT compression FROM PRAGMA_STORAGE_INFO('temperatures_double') WHERE segment_type = 'double' AND compression <> 'Chimp';

SELECT compression FROM PRAGMA_STORAGE_INFO('temperatures_float') WHERE segment_type = 'float' AND compression <> 'Chimp';

PRAGMA force_compression = 'chimp';

CREATE TABLE integers AS SELECT 1 AS i FROM RANGE(0, 1000000);

SELECT MIN(i), MAX(i), AVG(i), COUNT(*), COUNT(i) FROM integers;

SELECT MIN(i), MAX(i), AVG(i), COUNT(*), COUNT(i) FROM integers WHERE i = 1;

SELECT MIN(i), MAX(i), AVG(i), COUNT(*), COUNT(i) FROM integers;

CREATE TABLE nulls AS SELECT NULL AS i FROM RANGE(0, 1000000);

SELECT MIN(i), MAX(i), AVG(i), COUNT(*), COUNT(i) FROM nulls;

SELECT MIN(i), MAX(i), AVG(i), COUNT(*), COUNT(i) FROM nulls WHERE i IS NULL;

SELECT MIN(i), MAX(i), AVG(i), COUNT(*), COUNT(i) FROM nulls;

CREATE TABLE mixed_table AS SELECT CASE WHEN i < 1000000 THEN 1 ELSE i END AS i FROM RANGE(0, 2000000) AS tbl(i);

SELECT MIN(i), MAX(i), COUNT(*), COUNT(i) FROM mixed_table;

SELECT MIN(i), MAX(i), COUNT(*), COUNT(i) FROM mixed_table WHERE i = 1;

SELECT MIN(i), MAX(i), COUNT(*), COUNT(i) FROM mixed_table;

SELECT MIN(i), MAX(i), COUNT(*), COUNT(i) FROM mixed_table WHERE i = 1;

CREATE TABLE mixed_nulls AS SELECT CASE WHEN i < 1000000 THEN 1 ELSE NULL END AS i FROM RANGE(0, 2000000) AS tbl(i);

SELECT MIN(i), MAX(i), COUNT(*), COUNT(i) FROM mixed_nulls;

SELECT MIN(i), MAX(i), COUNT(*), COUNT(i) FROM mixed_nulls WHERE i = 1;

SELECT MIN(i), MAX(i), COUNT(*), COUNT(i) FROM mixed_nulls WHERE i IS NULL;

SELECT MIN(i), MAX(i), COUNT(*), COUNT(i) FROM mixed_nulls;

SELECT MIN(i), MAX(i), COUNT(*), COUNT(i) FROM mixed_nulls WHERE i = 1;

SELECT MIN(i), MAX(i), COUNT(*), COUNT(i) FROM mixed_nulls WHERE i IS NULL;

CREATE TABLE integers AS SELECT i AS id, CASE WHEN i < 500000 THEN 1 ELSE NULL END AS i FROM RANGE(0, 1000000) AS tbl(i);

CREATE INDEX i_index ON integers(id);

SELECT MIN(i), MAX(i), AVG(i), COUNT(*), COUNT(i) FROM integers;

SELECT * FROM integers WHERE id = 1;

SELECT * FROM integers WHERE id = 2;

SELECT * FROM integers WHERE id = 999999;

SELECT * FROM integers WHERE id = 1;

SELECT * FROM integers WHERE id = 2;

SELECT * FROM integers WHERE id = 999999;

CREATE TABLE integers AS SELECT 1 AS i FROM RANGE(0, 1000000);

INSERT INTO integers SELECT 2 FROM RANGE(0, 1000000);

SELECT * FROM integers ORDER BY i LIMIT 5;

SELECT * FROM integers ORDER BY i DESC LIMIT 5;

CREATE TABLE integers AS SELECT i AS id, 1 AS i FROM RANGE(0, 1000000) AS tbl(i);

SELECT MIN(i), MAX(i), AVG(i), COUNT(*), COUNT(i) FROM integers;

UPDATE integers SET i = i + 1 WHERE id % 2 = 0;

SELECT MIN(i), MAX(i), AVG(i), COUNT(*), COUNT(i) FROM integers;

SELECT MIN(i), MAX(i), AVG(i), COUNT(*), COUNT(i) FROM integers;

PRAGMA force_compression = 'dictionary';

CREATE TABLE test_dictionary AS SELECT CONCAT('BEEPBOOP-', CAST((i % 3) AS TEXT)) AS i FROM RANGE(0, 1250000) AS tbl(i);

CHECKPOINT;

PRAGMA force_compression = 'uncompressed';

CREATE TABLE test_uncompressed AS SELECT CONCAT('BEEPBOOP-', CAST((i % 3) AS TEXT)) AS i FROM RANGE(0, 1250000) AS tbl(i);

CHECKPOINT;

SELECT CAST(uncompressed AS REAL) / CAST(dictionary AS REAL) > 30 AND CAST(uncompressed AS REAL) / CAST(dictionary AS REAL) < 55 FROM (SELECT COUNT(DISTINCT block_id) AS dictionary FROM PRAGMA_STORAGE_INFO('test_dictionary') WHERE segment_type IN ('VARCHAR')) AS dictionary, (SELECT COUNT(DISTINCT block_id) AS uncompressed FROM PRAGMA_STORAGE_INFO('test_uncompressed') WHERE segment_type IN ('VARCHAR')) AS uncompressed;

PRAGMA force_compression = 'dictionary';

CREATE TABLE test (a TEXT, b TEXT);

INSERT INTO test VALUES ('11', '22'), ('11', '22'), ('12', '21'), (NULL, NULL);

CHECKPOINT;

SELECT compression FROM PRAGMA_STORAGE_INFO('test') WHERE segment_type ILIKE 'VARCHAR' LIMIT 1;

PRAGMA force_compression = 'dictionary';

CREATE TABLE test (a INT, b TEXT);

CREATE TABLE test (a INT, b TEXT);

CHECKPOINT AS restart;

SELECT compression FROM PRAGMA_STORAGE_INFO('test') WHERE segment_type ILIKE 'VARCHAR' LIMIT 1;

PRAGMA verify_fetch_row;

SELECT DISTINCT b FROM test ORDER BY a % 5;

PRAGMA force_compression = 'dictionary';

CREATE TABLE test_dict (a TEXT);

INSERT INTO test_dict SELECT CAST(i AS TEXT) FROM RANGE(0, 2000) AS tbl(i);

CHECKPOINT;

SELECT compression FROM PRAGMA_STORAGE_INFO('test_dict') WHERE segment_type ILIKE 'VARCHAR' LIMIT 1;

PRAGMA force_compression = 'fsst';

CREATE TABLE test_compressed AS SELECT CONCAT('BEEPBOOP-', CAST((i % 3) AS TEXT)) AS i FROM RANGE(0, 1250000) AS tbl(i);

checkpoint;

PRAGMA force_compression = 'uncompressed';

CREATE TABLE test_uncompressed AS SELECT CONCAT('BEEPBOOP-', CAST((i % 3) AS TEXT)) AS i FROM RANGE(0, 1250000) AS tbl(i);

checkpoint;

SELECT (CAST(uncompressed AS REAL) / CAST(compressed AS REAL)) AS compression_ratio FROM (SELECT (SELECT COUNT(DISTINCT block_id) FROM PRAGMA_STORAGE_INFO('test_compressed') WHERE segment_type IN ('VARCHAR')) AS compressed, (SELECT COUNT(DISTINCT block_id) FROM PRAGMA_STORAGE_INFO('test_uncompressed') WHERE segment_type IN ('VARCHAR')) AS uncompressed);

SELECT (CAST(uncompressed AS REAL) / CAST(compressed AS REAL)) > 5, (CAST(uncompressed AS REAL) / CAST(compressed AS REAL)) < 6.5 FROM (SELECT (SELECT COUNT(DISTINCT block_id) FROM PRAGMA_STORAGE_INFO('test_compressed') WHERE segment_type IN ('VARCHAR')) AS compressed, (SELECT COUNT(DISTINCT block_id) FROM PRAGMA_STORAGE_INFO('test_uncompressed') WHERE segment_type IN ('VARCHAR')) AS uncompressed);

CALL dbgen(sf=0.1);

PRAGMA force_compression = 'uncompressed';

CREATE TABLE l_comment_uncompressed AS SELECT l_comment FROM lineitem;

checkpoint;

PRAGMA force_compression = 'fsst';

CREATE TABLE l_comment_compressed AS SELECT l_comment FROM lineitem;

checkpoint;

CREATE TABLE test AS SELECT CONCAT('longprefix', i) FROM RANGE(0, 30000) AS t(i);

CHECKPOINT;

SELECT BOOL_OR(compression ILIKE '%fsst%') FROM PRAGMA_STORAGE_INFO('test');

DROP TABLE test;

SET disabled_compression_methods = 'fsst';

CREATE TABLE test AS SELECT CONCAT('longprefix', i) FROM RANGE(0, 30000) AS t(i);

CHECKPOINT;

SELECT BOOL_OR(compression ILIKE '%fsst%') FROM PRAGMA_STORAGE_INFO('test');

PRAGMA force_compression = 'fsst';

CREATE TABLE test (a TEXT, b TEXT);

INSERT INTO test VALUES ('11', '22'), ('11', '22'), ('12', '21'), (NULL, NULL);

CHECKPOINT;

SELECT compression FROM PRAGMA_STORAGE_INFO('test') WHERE segment_type ILIKE 'VARCHAR' LIMIT 1;

PRAGMA threads = 1;

CREATE TABLE TEST (col TEXT);

INSERT INTO TEST SELECT '33y93uhg3qi3f13hnh8xjrvvbz7iwevroaaif8v5ecfetwnd5yqde9mna8753399lj5r2u5rps5tuu0xsetmsxi80dacku7uz0q3r7h3r9gboq4c41t4h8brm6t7hcb2zg41g7elknivchc3ff409nhczhc7ciledplgcql5sfjb1x2ctuvf6cjdckfkq56ranj67qkzdnvj8guw8rxyd55298ziig0adhqsi0jdx60exhq6vv8hfqarfpvfma8qoqtv5kzte4mofm41w5uy0zdk4tjd5i7673pyigseb4mb3g6u5rwac1s8s1xcoobjoexp340hbr7vk1fwqdfisdm94967tvqxmirn6ml4ccaw3r7bh04e2p5txvea0vi965t29vbv1858ystdqpc8s9aalij445brgn55gpwtgmpbg8tkg7plw05aw8auijbkl9v4go9azrbqcb3yipi1hphmazfrzuta6qdys89usu672vs18qbricebs2rjhsqud8iemug1fr31hoaxu0lg7yfg2i8i9ufmrkgg8dtv5dw5edxptw48meec88iunibox2bc72eq5d59fmg2db7r8xtj1wptoak72on1v5jis1s024hvebx3nudmx78s32dszihs8mvkpt37fxsza9nccbo0jmyu7wzspkl1tqtbkx17lc043weyu2qavtp7vzvuyk9j7l7gha5kr6x295l9sk610ya8820atujz6dpcnkp4fuyatyefo4acc1g05ipcf2bwjgtz48ewzivm8p6kh7e1dp715x5as9bvs5i9n9pxvhp6jo7clnj987iojgztfk2fk9980gr8i69frtci4cj6rxlf9ig228tyljlqd53nwxnz7mvqjymohyqjsuunjdnioo199cl8m6fvv3hu8vh0v8otcohrskwan81p1ncqkf2svf97gyz2cu7bfrvbv03o6bflqdm60ojl0z1yta41m416mkdljpuxzk7gs9tj121jnvfe9piw1ow3ibu66eyrs2cmxopyhio4h7toekptm4xysmx96pdbjxx0kugwj4mfgjwj40ijkpwz0kjs39eumuexyooldizgzidhzk7hecfqamlnolbescpiuqrfyewm4evn2tx3cnoun9y3mciact4ont84q9z99r4wt76wusjtoz11xv5rgkz1t2dy3wtzog1ifhmprfymrzt0lzlsugjru5m6ubq87dmyzu9fwo8sivuea2zedogsm93sgwgrbomalj213ejyic4w9wgobnqjogd9j0h24u8dddr238elpqwk4sr2dznvw2fthow2l5ckua9z022nj3hktzae4jnyu7ckohdowy91lmh6ns10sialoa146x5sfje0fc4i1dt1dwbcygtmadjwjhytsvsq879y9tfud08fg2c1a01yzb5yy1z5cj99aherty940w91qjl0zl27p58enhtdvr0wzqpkgkxno93vj9qm7fiszrzcbmlowwfeusty9dkm9i4vskzovrgjpp91op2654acbblntyxra484e8ejbmehtecdh25patwrs016w7gqtvtzgufg9znmuxwcczrwgqpfkgwj27pfu56z5sd9241vjz8364zxfwfogjvhdxcxfgh6u4lbqmu1870ei2snna70atxputk4ybpj1r1e0ut4zcz8786eofale8on8uysws7mfs8o3uen21zjtqnc260s6e9tc1lpw2qk2vjsg10escmlj8hliba24sauabdc7ttj2pmv2xjh0photfpywqfbw7f9av3jxyplfap42nc9ttz1xqbrb3seieu2cnnwjc8vqxuacprwcdznwzrc99e28zf5q6y9c2exm9rbofy09w854xkplwlx2v2qjfm36r4jhwi953i993xhgu3um0qeisyfw8aicc52itcc53e98wer9iluwqrttx25vjr2ukk7m0olyzksbj9gaiu4tii3vcmk994ouvzse4khfd4ud9uxea4n8ahdshzpflx0feh0s1r9nv6e6fxipxiclaqs4hul93pbka016cq2l9cogc3tueqhwuximt11gws89uhjf81dhkowdrr0lh19yso5r2hclhblr3c0ykac7ieecfth4xbyz31hr3ug4gd8lbgkvh0hm5tgtyy84qnptuif7l6do0ksktathok43eyflzcq7z8wulniynjhqmnlrdjisosqt3mr02iuahfg7ldzvop71ezhxzgix6xzn93e2pjfo9ejjp5aqgocif4vob6t1be3hg0hn5597h5f66v2m6swkjed482ggfnw894rhxaurk67dsj2albqndwkz25rjxrahlj2eeinxqq93a30o86i865jter4g7wm0brhz5csy5kgb51sawjkc9kfcsqz92c4d7cf7f28kgtruroohlxli6bve96r2ff3eoqqupwifodag20lfp25t0fx61254kwm3s6runk0hcfn9opo2fsduoibmqdrzfnmmf431af441tkur3rhx1o08ovl9uf4xxachfj7acy58g7fnfkk4od5pfjvr20l85dfes3tq9vyom2vbx0m2r5sokx6c7chetqpphdk9etnpqxwwspcnqrq8hcrjka52lgc1y41fvnhxcdisx7w9b9l19p2rmdj4tqx4ezjghgi06b9vil6hkvllt3m2ym9e21mlqy1v0e5yoypwj32k5ri8et1bn2uqmjaw8gpcegsvv9wz45i2ggnntszj0nx05dl1u46mcb66y43xd2tyow6v6wokbeputut9ybaxz7o3hcq41s2p97mxpv34guz7xxbdhezhvja06m298nqx0qsh4tn14vcwt7kdv9rvpcwljzese17dwmnhmi38iqxf8hp5dannyffr8ijrwmxn3ezmfg6f4l8a4mwyhfcjvziu4uy9a62d8wrfskakvwh9h89rfjpa4k8edrq6jjkf9a7xu0vibp3g3escq0jjt209xxyztpy1u1yf9r2hgmw7mwa4j4565w74ib5ocn8q5wrawc9m17o1i8e3mvoc6bkj96nwm5iti5krq5xjwy8rd7j0tjkjzvupus5d64d1zt4fezbuvhieygyl0jlv8s8m24u3jj822tf1wwukafoksuigt1ttsni935ly51cqokl5k09t4y3hjszbj1cisjg18cqsqwqcrlai7exaefpknsa6euj7k0kaqbf4lya7f29zmytpzc32t3vqs2b0967a80ybxykz6fvyjdraj43831rnq19xh4m000gyi0bu5jgp8x53eibhya5xtqdglmdjrhen0md1fha4k0y95ze3v5cxssdeyqwj9y8a8eco858nf9uj6f83z3uk9yk7zi90lmcy8bm6es36hxwj8g1yygj5evne8ire0q6pa2e0jh9wmubpsv53tcof1pvhvvd7b03i2srdeykcq7sn88bv2huz39pmd4m012nx6jib7c53ape70i6gwefvatqetrvj94oq6bm50eqo4c72csqdwn55xpoq27pqot90zfzpnb690eund78eoss6ltg7zhkc4hk0qjvrl8me8cgzy0py4btyhhsks9i0veou0ia84nxbkwo758dn3m0kgp60jxcrgdjuyojbh5u67qlu69lthdzmzshij0mhlaa05rdrn9vdv1440v2rozpwdtvxzfvykb0tjx700eqdr164zy7d3ji8g82souaiui7n96my35ocgt0xmdrss' FROM RANGE(0, 1) AS tbl(i);

INSERT INTO TEST SELECT '5yqde9mna8753399lj5r2u5rps5tuu0xsetmsxi80dacku7uz0q3r7h3r9gboq4c41t4h8brm6t7hcb2zg41g7elknivchc3ff409nhczhc7ciledplgcql5sfjb1x2ctuvf6cjdckfkq56ranj67qkzdnvj8guw8rxyd55298ziig0adhqsi0jdx60exhq6vv8hfqarfpvfma8qoqtv5kzte4mofm41w5uy0zdk4tjd5i7673pyigseb4mb3g6u5rwac1s8s1xcoobjoexp340hbr7vk1fwqdfisdm94967tvqxmirn6ml4ccaw3r7bh04e2p5txvea0vi965t29vbv1858ystdqpc8s9aalij445brgn55gpwtgmpbg8tkg7plw05aw8auijbkl9v4go9azrbqcb3yipi1hphmazfrzuta6qdys89usu672vs18qbricebs2rjhsqud8iemug1fr31hoaxu0lg7yfg2i8i9ufmrkgg8dtv5dw5edxptw48meec88iunibox2bc72eq5d59fmg2db7r8xtj1wptoak72on1v5jis1s024hvebx3nudmx78s32dszihs8mvkpt37fxsza9nccbo0jmyu7wzspkl1tqtbkx17lc043weyu2qavtp7vzvuyk9j7l7gha5kr6x295l9sk610ya8820atujz6dpcnkp4fuyatyefo4acc1g05ipcf2bwjgtz48ewzivm8p6kh7e1dp715x5as9bvs5i9n9pxvhp6jo7clnj987iojgztfk2fk9980gr8i69frtci4cj6rxlf9ig228tyljlqd53nwxnz7mvqjymohyqjsuunjdnioo199cl8m6fvv3hu8vh0v8otcohrskwan81p1ncqkf2svf97gyz2cu7bfrvbv03o6bflqdm60ojl0z1yta41m416mkdljpuxzk7gs9tj121jnvfe9piw1ow3ibu66eyrs2cmxopyhio4h7toekptm4xysmx96pdbjxx0kugwj4mfgjwj40ijkpwz0kjs39eumuexyooldizgzidhzk7hecfqamlnolbescpiuqrfyewm4evn2tx3cnoun9y3mciact4ont84q9z99r4wt76wusjtoz11xv5rgkz1t2dy3wtzog1ifhmprfymrzt0lzlsugjru5m6ubq87dmyzu9fwo8sivuea2zedogsm93sgwgrbomalj213ejyic4w9wgobnqjogd9j0h24u8dddr238elpqwk4sr2dznvw2fthow2l5ckua9z022nj3hktzae4jnyu7ckohdowy91lmh6ns10sialoa146x5sfje0fc4i1dt1dwbcygtmadjwjhytsvsq879y9tfud08fg2c1a01yzb5yy1z5cj99aherty940w91qjl0zl27p58enhtdvr0wzqpkgkxno93vj9qm7fiszrzcbmlowwfeusty9dkm9i4vskzovrgjpp91op2654acbblntyxra484e8ejbmehtecdh25patwrs016w7gqtvtzgufg9znmuxwcczrwgqpfkgwj27pfu56z5sd9241vjz8364zxfwfogjvhdxcxfgh6u4lbqmu1870ei2snna70atxputk4ybpj1r1e0ut4zcz8786eofale8on8uysws7mfs8o3uen21zjtqnc260s6e9tc1lpw2qk2vjsg10escmlj8hliba24sauabdc7ttj2pmv2xjh0photfpywqfbw7f9av3jxyplfap42nc9ttz1xqbrb3seieu2cnnwjc8vqxuacprwcdznwzrc99e28zf5q6y9c2exm9rbofy09w854xkplwlx2v2qjfm36r4jhwi953i993xhgu3um0qeisyfw8aicc52itcc53e98wer9iluwqrttx25vjr2ukk7m0olyzksbj9gaiu4tii3vcmk994ouvzse4khfd4ud9uxea4n8ahdshzpflx0feh0s1r9nv6e6fxipxiclaqs4hul93pbka016cq2l9cogc3tueqhwuximt11gws89uhjf81dhkowdrr0lh19yso5r2hclhblr3c0ykac7ieecfth4xbyz31hr3ug4gd8lbgkvh0hm5tgtyy84qnptuif7l6do0ksktathok43eyflzcq7z8wulniynjhqmnlrdjisosqt3mr02iuahfg7ldzvop71ezhxzgix6xzn93e2pjfo9ejjp5aqgocif4vob6t1be3hg0hn5597h5f66v2m6swkjed482ggfnw894rhxaurk67dsj2albqndwkz25rjxrahlj2eeinxqq93a30o86i865jter4g7wm0brhz5csy5kgb51sawjkc9kfcsqz92c4d7cf7f28kgtruroohlxli6bve96r2ff3eoqqupwifodag20lfp25t0fx61254kwm3s6runk0hcfn9opo2fsduoibmqdrzfnmmf431af441tkur3rhx1o08ovl9uf4xxachfj7acy58g7fnfkk4od5pfjvr20l85dfes3tq9vyom2vbx0m2r5sokx6c7chetqpphdk9etnpqxwwspcnqrq8hcrjka52lgc1y41fvnhxcdisx7w9b9l19p2rmdj4tqx4ezjghgi06b9vil6hkvllt3m2ym9e21mlqy1v0e5yoypwj32k5ri8et1bn2uqmjaw8gpcegsvv9wz45i2ggnntszj0nx05dl1u46mcb66y43xd2tyow6v6wokbeputut9ybaxz7o3hcq41s2p97mxpv34guz7xxbdhezhvja06m298nqx0qsh4tn14vcwt7kdv9rvpcwljzese17dwmnhmi38iqxf8hp5dannyffr8ijrwmxn3ezmfg6f4l8a4mwyhfcjvziu4uy9a62d8wrfskakvwh9h89rfjpa4k8edrq6jjkf9a7xu0vibp3g3escq0jjt209xxyztpy1u1yf9r2hgmw7mwa4j4565w74ib5ocn8q5wrawc9m17o1i8e3mvoc6bkj96nwm5iti5krq5xjwy8rd7j0tjkjzvupus5d64d1zt4fezbuvhieygyl0jlv8s8m24u3jj822tf1wwukafoksuigt1ttsni935ly51cqokl5k09t4y3hjszbj1cisjg18cqsqwqcrlai7exaefpknsa6euj7k0kaqbf4lya7f29zmytpzc32t3vqs2b0967a80ybxykz6fvyjdraj43831rnq19xh4m000gyi0bu5jgp8x53eibhya5xtqdglmdjrhen0md1fha4k0y95ze3v5cxssdeyqwj9y8a8eco858nf9uj6f83z3uk9yk7zi90lmcy8bm6es36hxwj8g1yygj5evne8ire0q6pa2e0jh9wmubpsv53tcof1pvhvvd7b03i2srdeykcq7sn88bv2huz39pmd4m012nx6jib7c53ape70i6gwefvatqetrvj94oq6bm50eqo4c72csqdwn55xpoq27pqot90zfzpnb690eund78eoss6ltg7zhkc4hk0qjvrl8me8cgzy0py4btyhhsks9i0veou0ia84nxbkwo758dn3m0kgp60jxcrgdjuyojbh5u67qlu69lthdzmzshij0mhlaa05rdrn9vdv1440v2rozpwdtvxzfvykb0tjx700eqdr164zy7d3ji8g82souaiui7n96my35ocgt0xmdrss' FROM RANGE(0, 90) AS tbl(i);

INSERT INTO TEST SELECT '' FROM RANGE(0, 100000) AS tbl(i);

INSERT INTO TEST VALUES ('33y93uhg3qi3f13hnh8xjrvvbz7iwevroaaif8v5ecfetwnd5yqde9mna8753399lj5r2u5rps5tuu0xsetmsxi80dacku7uz0q3r7h3r9gboq4c41t4h8brm6t7hcb2zg41g7elknivchc3ff409nhczhc7ciledplgcql5sfjb1x2ctuvf6cjdckfkq56ranj67qkzdnvj8guw8rxyd55298ziig0adhqsi0jdx60exhq6vv8hfqarfpvfma8qoqtv5kzte4mofm41w5uy0zdk4tjd5i7673pyigseb4mb3g6u5rwac1s8s1xcoobjoexp340hbr7vk1fwqdfisdm94967tvqxmirn6ml4ccaw3r7bh04e2p5txvea0vi965t29vbv1858ystdqpc8s9aalij445brgn55gpwtgmpbg8tkg7plw05aw8auijbkl9v4go9azrbqcb3yipi1hphmazfrzuta6qdys89usu672vs18qbricebs2rjhsqud8iemug1fr31hoaxu0lg7yfg2i8i9ufmrkgg8dtv5dw5edxptw48meec88iunibox2bc72eq5d59fmg2db7r8xtj1wptoak72on1v5jis1s024hvebx3nudmx78s32dszihs8mvkpt37fxsza9nccbo0jmyu7wzspkl1tqtbkx17lc043weyu2qavtp7vzvuyk9j7l7gha5kr6x295l9sk610ya8820atujz6dpcnkp4fuyatyefo4acc1g05ipcf2bwjgtz48ewzivm8p6kh7e1dp715x5as9bvs5i9n9pxvhp6jo7clnj987iojgztfk2fk9980gr8i69frtci4cj6rxlf9ig228tyljlqd53nwxnz7mvqjymohyqjsuunjdnioo199cl8m6fvv3hu8vh0v8otcohrskwan81p1ncqkf2svf97gyz2cu7bfrvbv03o6bflqdm60ojl0z1yta41m416mkdljpuxzk7gs9tj121jnvfe9piw1ow3ibu66eyrs2cmxopyhio4h7toekptm4xysmx96pdbjxx0kugwj4mfgjwj40ijkpwz0kjs39eumuexyooldizgzidhzk7hecfqamlnolbescpiuqrfyewm4evn2tx3cnoun9y3mciact4ont84q9z99r4wt76wusjtoz11xv5rgkz1t2dy3wtzog1ifhmprfymrzt0lzlsugjru5m6ubq87dmyzu9fwo8sivuea2zedogsm93sgwgrbomalj213ejyic4w9wgobnqjogd9j0h24u8dddr238elpqwk4sr2dznvw2fthow2l5ckua9z022nj3hktzae4jnyu7ckohdowy91lmh6ns10sialoa146x5sfje0fc4i1dt1dwbcygtmadjwjhytsvsq879y9tfud08fg2c1a01yzb5yy1z5cj99aherty940w91qjl0zl27p58enhtdvr0wzqpkgkxno93vj9qm7fiszrzcbmlowwfeusty9dkm9i4vskzovrgjpp91op2654acbblntyxra484e8ejbmehtecdh25patwrs016w7gqtvtzgufg9znmuxwcczrwgqpfkgwj27pfu56z5sd9241vjz8364zxfwfogjvhdxcxfgh6u4lbqmu1870ei2snna70atxputk4ybpj1r1e0ut4zcz8786eofale8on8uysws7mfs8o3uen21zjtqnc260s6e9tc1lpw2qk2vjsg10escmlj8hliba24sauabdc7ttj2pmv2xjh0photfpywqfbw7f9av3jxyplfap42nc9ttz1xqbrb3seieu2cnnwjc8vqxuacprwcdznwzrc99e28zf5q6y9c2exm9rbofy09w854xkplwlx2v2qjfm36r4jhwi953i993xhgu3um0qeisyfw8aicc52itcc53e98wer9iluwqrttx25vjr2ukk7m0olyzksbj9gaiu4tii3vcmk994ouvzse4khfd4ud9uxea4n8ahdshzpflx0feh0s1r9nv6e6fxipxiclaqs4hul93pbka016cq2l9cogc3tueqhwuximt11gws89uhjf81dhkowdrr0lh19yso5r2hclhblr3c0ykac7ieecfth4xbyz31hr3ug4gd8lbgkvh0hm5tgtyy84qnptuif7l6do0ksktathok43eyflzcq7z8wulniynjhqmnlrdjisosqt3mr02iuahfg7ldzvop71ezhxzgix6xzn93e2pjfo9ejjp5aqgocif4vob6t1be3hg0hn5597h5f66v2m6swkjed482ggfnw894rhxaurk67dsj2albqndwkz25rjxrahlj2eeinxqq93a30o86i865jter4g7wm0brhz5csy5kgb51sawjkc9kfcsqz92c4d7cf7f28kgtruroohlxli6bve96r2ff3eoqqupwifodag20lfp25t0fx61254kwm3s6runk0hcfn9opo2fsduoibmqdrzfnmmf431af441tkur3rhx1o08ovl9uf4xxachfj7acy58g7fnfkk4od5pfjvr20l85dfes3tq9vyom2vbx0m2r5sokx6c7chetqpphdk9etnpqxwwspcnqrq8hcrjka52lgc1y41fvnhxcdisx7w9b9l19p2rmdj4tqx4ezjghgi06b9vil6hkvllt3m2ym9e21mlqy1v0e5yoypwj32k5ri8et1bn2uqmjaw8gpcegsvv9wz45i2ggnntszj0nx05dl1u46mcb66y43xd2tyow6v6wokbeputut9ybaxz7o3hcq41s2p97mxpv34guz7xxbdhezhvja06m298nqx0qsh4tn14vcwt7kdv9rvpcwljzese17dwmnhmi38iqxf8hp5dannyffr8ijrwmxn3ezmfg6f4l8a4mwyhfcjvziu4uy9a62d8wrfskakvwh9h89rfjpa4k8edrq6jjkf9a7xu0vibp3g3escq0jjt209xxyztpy1u1yf9r2hgmw7mwa4j4565w74ib5ocn8q5wrawc9m17o1i8e3mvoc6bkj96nwm5iti5krq5xjwy8rd7j0tjkjzvupus5d64d1zt4fezbuvhieygyl0jlv8s8m24u3jj822tf1wwukafoksuigt1ttsni935ly51cqokl5k09t4y3hjszbj1cisjg18cqsqwqcrlai7exaefpknsa6euj7k0kaqbf4lya7f29zmytpzc32t3vqs2b0967a80ybxykz6fvyjdraj43831rnq19xh4m000gyi0bu5jgp8x53eibhya5xtqdglmdjrhen0md1fha4k0y95ze3v5cxssdeyqwj9y8a8eco858nf9uj6f83z3uk9yk7zi90lmcy8bm6es36hxwj8g1yygj5evne8ire0q6pa2e0jh9wmubpsv53tcof1pvhvvd7b03i2srdeykcq7sn88bv2huz39pmd4m012nx6jib7c53ape70i6gwefvatqetrvj94oq6bm50eqo4c72csqdwn55xpoq27pqot90zfzpnb690eund78eoss6ltg7zhkc4hk0qjvrl8me8cgzy0py4btyhhsks9i0veou0ia84nxbkwo758dn3m0kgp60jxcrgdjuyojbh5u67qlu69lthdzmzshij0mhlaa05rdrn9vdv1440v2rozpwdtvxzfvykb0tjx700eqdr164zy7d3ji8g82souaiui7n96my35ocgt0xmdrss');

PRAGMA force_compression = 'fsst';

CREATE TABLE TEST2 AS SELECT * FROM TEST;

PRAGMA threads = 1;

CREATE TABLE TEST (col TEXT);

INSERT INTO TEST SELECT CASE WHEN i % 2 = 0 THEN 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' ELSE 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' END FROM RANGE(0, 2214) AS tbl(i);

PRAGMA force_compression = 'fsst';

PRAGMA force_compression = 'fsst';

SELECT COUNT(temperature) FROM temperatures_double;

SELECT COUNT(temperature) FROM temperatures_float;

SELECT temperature FROM temperatures_double;

SELECT temperature FROM temperatures_float;

SELECT compression FROM PRAGMA_STORAGE_INFO('temperatures_double') WHERE segment_type = 'double' AND compression <> 'Patas';

SELECT compression FROM PRAGMA_STORAGE_INFO('temperatures_float') WHERE segment_type = 'float' AND compression <> 'Patas';

PRAGMA force_compression = 'patas';

PRAGMA force_compression = 'rle';

CREATE TABLE test_rle (a INT);

INSERT INTO test_rle SELECT i FROM RANGE(0, 2000) AS tbl(i);

CHECKPOINT;

SELECT compression FROM PRAGMA_STORAGE_INFO('test_rle') WHERE segment_type ILIKE 'INTEGER';

PRAGMA force_compression = 'rle';

CREATE TABLE test (id INT, l INT[]);

INSERT INTO test SELECT i, CASE WHEN (i // 1000) % 2 = 0 THEN [1, 1, 1] ELSE [2, 2] END FROM RANGE(0, 200000) AS tbl(i);

SELECT compression FROM PRAGMA_STORAGE_INFO('test') WHERE segment_type ILIKE 'INTEGER' LIMIT 1;

SELECT COUNT(*), SUM(i) FROM (SELECT UNNEST(l) FROM test) AS tbl(i);

SELECT COUNT(*), SUM(i) FROM (SELECT UNNEST(l) FROM test WHERE id >= 5000 AND id < 6000) AS tbl(i);

SELECT COUNT(*), SUM(i) FROM (SELECT UNNEST(l) FROM test WHERE id >= 150000 AND id < 160000) AS tbl(i);

CREATE INDEX i_index ON test(id);

SELECT * FROM test WHERE id = 150001;

CREATE TABLE test_large_list AS SELECT i % 10 AS id, LIST(-i) AS list FROM RANGE(0, 100000) AS tbl(i) GROUP BY id;

SELECT COUNT(*), SUM(i) FROM (SELECT UNNEST(list) FROM test_large_list) AS tbl(i);

PRAGMA force_compression = 'rle';

CREATE TABLE test (a BOOLEAN);

INSERT INTO test SELECT FALSE FROM RANGE(0, 2048);

INSERT INTO test SELECT TRUE FROM RANGE(0, 2048);

SELECT COUNT(*) FROM test WHERE a = FALSE;

SELECT COUNT(*) FROM test WHERE a = FALSE;

PRAGMA force_compression = 'rle';

CREATE TABLE test_rle AS SELECT CAST((i // 5) AS BIGINT) FROM RANGE(0, 2500000) AS tbl(i);

checkpoint;

PRAGMA force_compression = 'uncompressed';

CREATE TABLE test_uncompressed AS SELECT CAST((i // 10) AS BIGINT) FROM RANGE(0, 2500000) AS tbl(i);

checkpoint;

SELECT (CAST(uncompressed AS REAL) // CAST(rle AS REAL)) > 2.5, (CAST(uncompressed AS REAL) // CAST(rle AS REAL)) < 4.5 FROM (SELECT (SELECT COUNT(DISTINCT block_id) FROM PRAGMA_STORAGE_INFO('test_rle') WHERE NOT segment_type IN ('VARCHAR', 'VALIDITY')) AS rle, (SELECT COUNT(DISTINCT block_id) FROM PRAGMA_STORAGE_INFO('test_uncompressed') WHERE NOT segment_type IN ('VARCHAR', 'VALIDITY')) AS uncompressed);

DROP TABLE test_rle;

DROP TABLE test_rle;

PRAGMA force_compression = 'uncompressed';

PRAGMA force_compression = 'uncompressed';

checkpoint;

PRAGMA force_compression = 'rle';

PRAGMA force_compression = 'rle';

checkpoint;

checkpoint;

DROP TABLE test_rle;

PRAGMA force_compression = 'rle';

CREATE TABLE test (a INT);

INSERT INTO test SELECT 0 FROM RANGE(0, 4096);

INSERT INTO test SELECT 1 FROM RANGE(0, 2048);

INSERT INTO test SELECT 2 FROM RANGE(0, 2048);

INSERT INTO test SELECT 3 FROM RANGE(0, 1024);

INSERT INTO test SELECT 4 FROM RANGE(0, 1024);

INSERT INTO test SELECT 5 FROM RANGE(0, 512);

INSERT INTO test SELECT 6 FROM RANGE(0, 512);

INSERT INTO test SELECT 7 FROM RANGE(0, 512);

INSERT INTO test SELECT 8 FROM RANGE(0, 512);

checkpoint;

SELECT DISTINCT ON (types) VECTOR_TYPE(a) AS types FROM test ORDER BY ALL;

PRAGMA disable_optimizer;

SELECT DISTINCT ON (types) types FROM (SELECT VECTOR_TYPE(a) FROM test LIMIT 8192) AS tbl(types);

SELECT DISTINCT ON (types) types FROM (SELECT VECTOR_TYPE(a) FROM test OFFSET 8192) AS tbl(types);

PRAGMA enable_verification;

PRAGMA force_compression = 'rle';

CREATE TABLE tbl AS SELECT i AS id, i // 50 AS rle_val, CASE WHEN i % 8 = 0 THEN NULL ELSE i // 50 END AS rle_val_null FROM RANGE(0, 100000) AS t(i);

SELECT * FROM tbl WHERE id = 5040 AND rle_val = 100;

SELECT * FROM tbl WHERE id = 5040 AND SUBSTRING(CAST(rle_val AS TEXT), 1, 3) = '100';

SELECT * FROM tbl WHERE id >= 5020 AND rle_val = 100;

SELECT * FROM tbl WHERE rle_val = 100;

PRAGMA enable_verification;

SET force_compression = 'rle';

SET force_compression = 'rle';

SET force_compression = 'rle';

SET force_compression = 'rle';

SET force_compression = 'rle';

PRAGMA force_compression = 'rle';

CREATE TABLE test (id TEXT, col INT);

INSERT INTO test SELECT CAST(i AS TEXT) AS id, 1 AS b FROM RANGE(0, 5000) AS tbl(i);

INSERT INTO test SELECT CAST((5000 + i) AS TEXT) AS id, 2 AS b FROM RANGE(0, 5000) AS tbl(i);

CHECKPOINT;

SELECT SUM(col), MIN(col), MAX(col), COUNT(*) FROM test WHERE col = 2;

SELECT MIN(id), MAX(id), SUM(col), MIN(col), MAX(col), COUNT(*) FROM test WHERE id = '5000';

PRAGMA force_compression = 'rle';

CREATE TABLE test (id INT PRIMARY KEY, col INT);

INSERT INTO test SELECT CAST(i AS TEXT) AS id, 1 AS b FROM RANGE(0, 5000) AS tbl(i);

INSERT INTO test SELECT CAST((5000 + i) AS TEXT) AS id, 2 AS b FROM RANGE(0, 5000) AS tbl(i);

CHECKPOINT;

SELECT compression FROM PRAGMA_STORAGE_INFO('test') WHERE segment_type ILIKE 'INTEGER' LIMIT 1;

SELECT MIN(id), MAX(id), SUM(col), MIN(col), MAX(col), COUNT(*) FROM test WHERE id = '5000';

PRAGMA force_compression = 'rle';

CREATE TABLE test_rle (a BIGINT);

INSERT INTO test_rle SELECT CAST(3 AS BIGINT) FROM RANGE(0, 65535) UNION ALL SELECT CAST(4 AS BIGINT) FROM RANGE(0, 100000);

CHECKPOINT;

SELECT a, COUNT(*) FROM test_rle GROUP BY ALL;

PRAGMA force_compression = 'rle';

CREATE TABLE test (a INT);

INSERT INTO test SELECT * FROM REPEAT(1, 1000);
INSERT INTO test SELECT * FROM REPEAT(2, 1000);
INSERT INTO test SELECT * FROM REPEAT(3, 1000);
INSERT INTO test SELECT * FROM REPEAT(4, 1000);
INSERT INTO test SELECT * FROM REPEAT(5, 1000);
INSERT INTO test SELECT * FROM REPEAT(6, 1000);

SELECT SUM(a), MIN(a), MAX(a), COUNT(*) FROM test;

SELECT SUM(a), MIN(a), MAX(a), COUNT(*) FROM test;

PRAGMA enable_verification;

PRAGMA force_compression = 'rle';

BEGIN;

PRAGMA force_compression = 'RLE';

CREATE TABLE integers (i INT);

INSERT INTO integers SELECT NULL FROM RANGE(0, 65535);

INSERT INTO integers SELECT 1;

INSERT INTO integers SELECT 2;

INSERT INTO integers SELECT 3;

COMMIT;

CHECKPOINT;

SELECT MIN(i), MAX(i), COUNT(*), COUNT(i) FROM integers;

PRAGMA enable_verification;

PRAGMA force_compression = 'rle';

CREATE TABLE tbl AS SELECT i AS id, i // 50 AS rle_val, CASE WHEN i % 8 = 0 THEN NULL ELSE i // 50 END AS rle_val_null FROM RANGE(0, 100000) AS t(i);

SELECT * FROM tbl WHERE id >= 75 AND id <= 125 AND id % 4 = 0;

SELECT * FROM tbl WHERE id >= 75 AND id <= 125 AND id % 4 = 0;

SELECT * FROM tbl WHERE id >= 33380 AND id <= 33410 AND id % 4 = 0;

CREATE TABLE tbl2 AS SELECT i AS id, i % 5 AS id_modulo, i // 50 AS rle_val, CASE WHEN i % 8 = 0 THEN NULL ELSE i // 50 END AS rle_val_null FROM RANGE(0, 100000) AS t(i);

SELECT COUNT(*), SUM(rle_val), MIN(rle_val), MAX(rle_val), SUM(rle_val_null), COUNT(rle_val_null) FROM tbl2 WHERE id >= 1500 AND id <= 2500 AND id_modulo = 3;

SELECT COUNT(*), SUM(rle_val), MIN(rle_val), MAX(rle_val), SUM(rle_val_null), COUNT(rle_val_null) FROM tbl2 WHERE id >= 1500 AND id <= 19500 AND id_modulo <= 2;

PRAGMA force_compression = 'rle';

CREATE TABLE test (a INT, b INT);

INSERT INTO test VALUES (11, 22), (11, 22), (12, 21), (NULL, NULL);

CHECKPOINT;

SELECT compression FROM PRAGMA_STORAGE_INFO('test') WHERE segment_type ILIKE 'INTEGER' LIMIT 1;

PRAGMA verify_fetch_row;

PRAGMA force_compression = 'rle';

PRAGMA force_compression = 'rle';

INSERT INTO test SELECT {'a': i} AS s FROM REPEAT(1, 1000) AS tbl(i);
INSERT INTO test SELECT {'a': i} AS s FROM REPEAT(2, 1000) AS tbl(i);
INSERT INTO test SELECT {'a': i} AS s FROM REPEAT(3, 1000) AS tbl(i);
INSERT INTO test SELECT {'a': i} AS s FROM REPEAT(4, 1000) AS tbl(i);
INSERT INTO test SELECT {'a': i} AS s FROM REPEAT(5, 1000) AS tbl(i);
INSERT INTO test SELECT {'a': i} AS s FROM REPEAT(6, 1000) AS tbl(i);

SELECT SUM(s['a']), MIN(s['a']), MAX(s['a']), COUNT(*) FROM test;

SELECT SUM(s['a']), MIN(s['a']), MAX(s['a']), COUNT(*) FROM test;

SET storage_compatibility_version='v1.2.0'
load __TEST_DIR__/test_roaring_compression_fetch_row.db;

CREATE TABLE test (a INT);

PRAGMA force_compression = 'roaring';

INSERT INTO test SELECT CASE WHEN i % 25 = 0 THEN 1337 ELSE NULL END FROM RANGE(0, 10000) AS tbl(i);

checkpoint AS restart;

SELECT compression FROM PRAGMA_STORAGE_INFO('test') WHERE segment_type ILIKE 'VALIDITY' AND compression <> 'Roaring';

PRAGMA verify_fetch_row;

SELECT COUNT(*) FROM test WHERE NOT a IS NULL;

SELECT SUM(a), MIN(a), MAX(a) FROM test;

PRAGMA disable_verify_fetch_row;

DELETE FROM test;

INSERT INTO test SELECT CASE WHEN i = 0 OR (i % 512 <> 0 AND (i % 512) < 350 OR (i % 512) > 450) THEN NULL ELSE 1337 END FROM RANGE(0, 10000) AS tbl(i);

checkpoint AS restart;

SELECT compression FROM PRAGMA_STORAGE_INFO('test') WHERE segment_type ILIKE 'VALIDITY' AND compression <> 'Roaring';

PRAGMA verify_fetch_row;

SELECT COUNT(*) FROM test WHERE NOT a IS NULL;

SELECT SUM(a), MIN(a), MAX(a) FROM test;

PRAGMA disable_verify_fetch_row;

DELETE FROM test;

INSERT INTO test SELECT CASE WHEN i % 3 = 0 THEN 1337 ELSE NULL END FROM RANGE(0, 10000) AS tbl(i);

checkpoint AS restart;

SELECT compression FROM PRAGMA_STORAGE_INFO('test') WHERE segment_type ILIKE 'VALIDITY' AND compression <> 'Roaring';

PRAGMA verify_fetch_row;

SELECT COUNT(*) FROM test WHERE NOT a IS NULL;

SELECT SUM(a), MIN(a), MAX(a) FROM test;

PRAGMA disable_verify_fetch_row;

SET storage_compatibility_version='v1.2.0'
load __TEST_DIR__/test_roaring.db;

SET logging_level = 'info';

set variable dataset_size = 122880;

PRAGMA force_compression = 'uncompressed';

SET enable_logging = TRUE;

CREATE TABLE test_uncompressed AS SELECT CASE WHEN i % 25 = 0 THEN 1337 ELSE NULL END FROM RANGE(0, GETVARIABLE('dataset_size')) AS tbl(i);

checkpoint;

SET enable_logging = FALSE;

SELECT CAST(message.split(': ')[2] AS INT) FROM duckdb_logs WHERE message.starts_with('FinalAnalyze') AND message.contains('test_uncompressed') AND message.contains('VALIDITY') AND message.contains('COMPRESSION_UNCOMPRESSED');

PRAGMA force_compression = 'roaring';

SET enable_logging = TRUE;

CREATE TABLE test_roaring AS SELECT * FROM test_uncompressed;

checkpoint;

SET enable_logging = FALSE;

SELECT CAST(message.split(': ')[2] AS INT) FROM duckdb_logs WHERE message.starts_with('FinalAnalyze') AND message.contains('test_roaring') AND message.contains('VALIDITY') AND message.contains('COMPRESSION_ROARING');

SET storage_compatibility_version='v1.2.0'
load __TEST_DIR__/test_roaring.db;

SET logging_level = 'info';

set variable dataset_size = 122880;

PRAGMA force_compression = 'uncompressed';

SET enable_logging = TRUE;

CREATE TABLE test_uncompressed AS SELECT CASE WHEN i % 3 = 0 THEN 1337 ELSE NULL END FROM RANGE(0, GETVARIABLE('dataset_size')) AS tbl(i);

checkpoint;

SET enable_logging = FALSE;

SELECT CAST(message.split(': ')[2] AS INT) FROM duckdb_logs WHERE message.starts_with('FinalAnalyze') AND message.contains('test_uncompressed') AND message.contains('VALIDITY') AND message.contains('COMPRESSION_UNCOMPRESSED');

PRAGMA force_compression = 'roaring';

SET enable_logging = TRUE;

CREATE TABLE test_roaring AS SELECT * FROM test_uncompressed;

checkpoint;

SET enable_logging = FALSE;

SELECT CAST(message.split(': ')[2] AS INT) FROM duckdb_logs WHERE message.starts_with('FinalAnalyze') AND message.contains('test_roaring') AND message.contains('VALIDITY') AND message.contains('COMPRESSION_ROARING');

SET storage_compatibility_version='v1.2.0'
load __TEST_DIR__/test_roaring.db;

SET logging_level = 'info';

set variable dataset_size = 122880;

PRAGMA force_compression = 'uncompressed';

SET enable_logging = TRUE;

CREATE TABLE test_uncompressed AS SELECT CASE WHEN i = 0 OR (i % 512 <> 0 AND (i % 512) < 350 OR (i % 512) > 450) THEN NULL ELSE 1337 END FROM RANGE(0, GETVARIABLE('dataset_size')) AS tbl(i);

checkpoint;

SET enable_logging = FALSE;

SELECT CAST(message.split(': ')[2] AS INT) FROM duckdb_logs WHERE message.starts_with('FinalAnalyze') AND message.contains('test_uncompressed') AND message.contains('VALIDITY') AND message.contains('COMPRESSION_UNCOMPRESSED');

PRAGMA force_compression = 'roaring';

SET enable_logging = TRUE;

CREATE TABLE test_roaring AS SELECT * FROM test_uncompressed;

checkpoint;

SET enable_logging = FALSE;

SELECT CAST(message.split(': ')[2] AS INT) FROM duckdb_logs WHERE message.starts_with('FinalAnalyze') AND message.contains('test_roaring') AND message.contains('VALIDITY') AND message.contains('COMPRESSION_ROARING');

SET storage_compatibility_version='v1.2.0'
load __TEST_DIR__/test_roaring_appends.db;

PRAGMA force_compression = 'roaring';

SET checkpoint_threshold = '100mb';

SET checkpoint_threshold = '100mb';

SET checkpoint_threshold = '100mb';

SET checkpoint_threshold = '100mb';

checkpoint;

checkpoint;

SET storage_compatibility_version='v1.2.0'
load __TEST_DIR__/test_roaring.db;

PRAGMA force_compression = 'roaring';

CREATE TABLE test (a BIGINT);

INSERT INTO test SELECT CASE WHEN i % 25 = 0 THEN 1337 ELSE NULL END FROM RANGE(0, 10000) AS tbl(i);

checkpoint;

SELECT compression FROM PRAGMA_STORAGE_INFO('test') WHERE segment_type ILIKE 'VALIDITY' AND compression <> 'Roaring';

SELECT COUNT(*) FROM test WHERE NOT a IS NULL;

SELECT SUM(a), MIN(a), MAX(a) FROM test;

DELETE FROM test;

DELETE FROM test;

checkpoint;

SELECT COUNT(*) FROM test WHERE NOT a IS NULL;

SELECT SUM(a), MIN(a), MAX(a) FROM test;

SET storage_compatibility_version='v1.2.0'
load __TEST_DIR__/test_roaring.db;

PRAGMA force_compression = 'roaring';

CREATE TABLE test (a BIGINT);

INSERT INTO test SELECT CASE WHEN i % 3 = 0 THEN 1337 ELSE NULL END FROM RANGE(0, 10000) AS tbl(i);

checkpoint;

SELECT compression FROM PRAGMA_STORAGE_INFO('test') WHERE segment_type ILIKE 'VALIDITY' AND compression <> 'Roaring';

SELECT COUNT(*) FROM test WHERE NOT a IS NULL;

SELECT SUM(a), MIN(a), MAX(a) FROM test;

SET storage_compatibility_version='v1.2.0'
load __TEST_DIR__/test_roaring.db;

set variable dataset_size = 120_000_000;

PRAGMA force_compression = 'roaring';

CREATE TABLE test_roaring AS SELECT CASE WHEN i % 25 = 0 THEN 1337 ELSE NULL END FROM RANGE(0, GETVARIABLE('dataset_size')) AS tbl(i);

checkpoint;

PRAGMA force_compression = 'uncompressed';

CREATE TABLE test_uncompressed AS SELECT CASE WHEN i % 25 = 0 THEN 1337 ELSE NULL END FROM RANGE(0, GETVARIABLE('dataset_size')) AS tbl(i);

checkpoint;

SELECT compression FROM PRAGMA_STORAGE_INFO('test_roaring') WHERE segment_type = 'VALIDITY' AND compression <> 'Roaring';

SELECT compression FROM PRAGMA_STORAGE_INFO('test_uncompressed') WHERE segment_type = 'VALIDITY' AND compression <> 'Uncompressed';

CREATE TYPE test_result AS UNION (
ok BOOL,
err STRUCT(
uncompressed HUGEINT,
compressed HUGEINT,
allowed_minimum_ratio DECIMAL(2,1),
allowed_maximum_ratio DECIMAL(2,1),
actual_ratio FLOAT
)
);

set variable min_ratio = 2.6;
set variable max_ratio = 2.8;

SELECT CASE WHEN (CAST(uncompressed AS REAL) / CAST(compressed AS REAL)) > GETVARIABLE('min_ratio') AND (CAST(uncompressed AS REAL) / CAST(compressed AS REAL)) <= GETVARIABLE('max_ratio') THEN CAST(TRUE AS test_result) ELSE CAST({'uncompressed': uncompressed, 'compressed': compressed, 'allowed_minimum_ratio': GETVARIABLE('min_ratio'), 'allowed_maximum_ratio': GETVARIABLE('max_ratio'), 'actual_ratio': CAST(uncompressed AS REAL) / CAST(compressed AS REAL)} AS test_result) END FROM (SELECT (SELECT COUNT(DISTINCT block_id) FROM PRAGMA_STORAGE_INFO('test_roaring') WHERE segment_type IN ('VALIDITY')) AS compressed, (SELECT COUNT(DISTINCT block_id) FROM PRAGMA_STORAGE_INFO('test_uncompressed') WHERE segment_type IN ('VALIDITY')) AS uncompressed) AS blocks_tbl;

DROP TABLE test_roaring;
DROP TABLE test_uncompressed;

PRAGMA force_compression = 'roaring';

CREATE TABLE test_roaring AS SELECT CASE WHEN i = 0 OR (i % 512 <> 0 AND (i % 512) < 350 OR (i % 512) > 450) THEN NULL ELSE 1337 END FROM RANGE(0, GETVARIABLE('dataset_size')) AS tbl(i);

checkpoint;

PRAGMA force_compression = 'uncompressed';

CREATE TABLE test_uncompressed AS SELECT CASE WHEN i = 0 OR (i % 512 <> 0 AND (i % 512) < 350 OR (i % 512) > 450) THEN NULL ELSE 1337 END FROM RANGE(0, GETVARIABLE('dataset_size')) AS tbl(i);

checkpoint;

SELECT compression FROM PRAGMA_STORAGE_INFO('test_roaring') WHERE segment_type = 'VALIDITY' AND compression <> 'Roaring';

SELECT compression FROM PRAGMA_STORAGE_INFO('test_uncompressed') WHERE segment_type = 'VALIDITY' AND compression <> 'Uncompressed';

checkpoint;

set variable min_ratio = 8.6;
set variable max_ratio = 8.8;

SELECT CASE WHEN (CAST(uncompressed AS REAL) / CAST(compressed AS REAL)) > GETVARIABLE('min_ratio') AND (CAST(uncompressed AS REAL) / CAST(compressed AS REAL)) <= GETVARIABLE('max_ratio') THEN CAST(TRUE AS test_result) ELSE CAST({'uncompressed': uncompressed, 'compressed': compressed, 'allowed_minimum_ratio': GETVARIABLE('min_ratio'), 'allowed_maximum_ratio': GETVARIABLE('max_ratio'), 'actual_ratio': CAST(uncompressed AS REAL) / CAST(compressed AS REAL)} AS test_result) END FROM (SELECT (SELECT COUNT(DISTINCT block_id) FROM PRAGMA_STORAGE_INFO('test_roaring') WHERE segment_type IN ('VALIDITY')) AS compressed, (SELECT COUNT(DISTINCT block_id) FROM PRAGMA_STORAGE_INFO('test_uncompressed') WHERE segment_type IN ('VALIDITY')) AS uncompressed) AS blocks_tbl;

DROP TABLE test_roaring;
DROP TABLE test_uncompressed;

PRAGMA force_compression = 'roaring';

CREATE TABLE test_roaring AS SELECT CASE WHEN i % 3 = 0 THEN 1337 ELSE NULL END FROM RANGE(0, GETVARIABLE('dataset_size')) AS tbl(i);

checkpoint;

PRAGMA force_compression = 'uncompressed';

CREATE TABLE test_uncompressed AS SELECT CASE WHEN i % 3 = 0 THEN 1337 ELSE NULL END FROM RANGE(0, GETVARIABLE('dataset_size')) AS tbl(i);

checkpoint;

SELECT compression FROM PRAGMA_STORAGE_INFO('test_roaring') WHERE segment_type = 'VALIDITY' AND compression <> 'Roaring';

SELECT compression FROM PRAGMA_STORAGE_INFO('test_uncompressed') WHERE segment_type = 'VALIDITY' AND compression <> 'Uncompressed';

checkpoint;

set variable min_ratio = 0.9;
set variable max_ratio = 1;

SELECT CASE WHEN (CAST(uncompressed AS REAL) / CAST(compressed AS REAL)) > GETVARIABLE('min_ratio') AND (CAST(uncompressed AS REAL) / CAST(compressed AS REAL)) <= GETVARIABLE('max_ratio') THEN CAST(TRUE AS test_result) ELSE CAST({'uncompressed': uncompressed, 'compressed': compressed, 'allowed_minimum_ratio': GETVARIABLE('min_ratio'), 'allowed_maximum_ratio': GETVARIABLE('max_ratio'), 'actual_ratio': CAST(uncompressed AS REAL) / CAST(compressed AS REAL)} AS test_result) END FROM (SELECT (SELECT COUNT(DISTINCT block_id) FROM PRAGMA_STORAGE_INFO('test_roaring') WHERE segment_type IN ('VALIDITY')) AS compressed, (SELECT COUNT(DISTINCT block_id) FROM PRAGMA_STORAGE_INFO('test_uncompressed') WHERE segment_type IN ('VALIDITY')) AS uncompressed) AS blocks_tbl;

SET storage_compatibility_version='v1.2.0'
load __TEST_DIR__/test_roaring.db;

PRAGMA force_compression = 'roaring';

CREATE TABLE test (a BIGINT);

INSERT INTO test SELECT CASE WHEN i % 25 = 0 THEN NULL ELSE 1337 END FROM RANGE(0, 10000) AS tbl(i);

checkpoint;

SELECT compression FROM PRAGMA_STORAGE_INFO('test') WHERE segment_type ILIKE 'VALIDITY' AND compression <> 'Roaring';

SELECT SUM(a), MIN(a), MAX(a) FROM test;

DELETE FROM test;

DELETE FROM test;

checkpoint;

SELECT COUNT(*) FROM test WHERE NOT a IS NULL;

SELECT SUM(a), MIN(a), MAX(a) FROM test;

SET storage_compatibility_version='v1.2.0'
load __TEST_DIR__/test_roaring.db;

PRAGMA force_compression = 'roaring';

CREATE TABLE test (a BIGINT);

INSERT INTO test SELECT CASE WHEN i = 0 OR (i % 512 <> 0 AND (i % 512) < 350 OR (i % 512) > 450) THEN 1337 ELSE NULL END FROM RANGE(0, 10000) AS tbl(i);

checkpoint;

SELECT compression FROM PRAGMA_STORAGE_INFO('test') WHERE segment_type ILIKE 'VALIDITY' AND compression <> 'Roaring';

SELECT COUNT(*) FROM test WHERE NOT a IS NULL;

SELECT SUM(a), MIN(a), MAX(a) FROM test;

SET storage_compatibility_version='v1.2.0'
load __TEST_DIR__/test_roaring.db;

PRAGMA force_compression = 'roaring';

CREATE TABLE test (a BIGINT);

INSERT INTO test SELECT CASE WHEN i = 0 OR (i % 512 <> 0 AND (i % 512) < 350 OR (i % 512) > 450) THEN NULL ELSE 1337 END FROM RANGE(0, 10000) AS tbl(i);

checkpoint;

SELECT compression FROM PRAGMA_STORAGE_INFO('test') WHERE segment_type ILIKE 'VALIDITY' AND compression <> 'Roaring';

SELECT COUNT(*) FROM test WHERE NOT a IS NULL;

SELECT SUM(a), MIN(a), MAX(a) FROM test;

DELETE FROM test;

DELETE FROM test;

checkpoint;

SELECT COUNT(*) FROM test WHERE NOT a IS NULL;

SELECT SUM(a), MIN(a), MAX(a) FROM test;

SET storage_compatibility_version='v1.2.0'
load __TEST_DIR__/test_roaring2.db;

PRAGMA force_compression = 'roaring';

SET checkpoint_threshold = '10mb';

CREATE TABLE test (a BIGINT);

INSERT INTO test SELECT CASE WHEN i % 25 = 0 THEN 1337 ELSE NULL END FROM RANGE(0, 1025) AS tbl(i);

checkpoint;

SELECT COUNT(*) FROM test WHERE NOT a IS NULL;

INSERT INTO test SELECT CASE WHEN i % 25 = 0 THEN 1337 ELSE NULL END FROM RANGE(0, 1025) AS tbl(i);

checkpoint;

SELECT COUNT(*) FROM test WHERE NOT a IS NULL;

SET enable_fsst_vectors = '${enable_fsst_vector}';

PRAGMA force_compression = '${compression}';

CREATE TABLE test_empty (a TEXT);

INSERT INTO test_empty VALUES ('');
INSERT INTO test_empty VALUES ('A');
INSERT INTO test_empty VALUES (NULL);
INSERT INTO test_empty VALUES ('B');
INSERT INTO test_empty VALUES ('');
INSERT INTO test_empty VALUES ('A');

CHECKPOINT;

SELECT * FROM test_empty;

SELECT LOWER(compression) = '${compression}' FROM PRAGMA_STORAGE_INFO('test_empty') WHERE segment_type ILIKE 'VARCHAR' LIMIT 1;

CREATE TABLE test_empty_large AS SELECT '' AS a FROM RANGE(0, 10000);

INSERT INTO test_empty_large VALUES ('A');
INSERT INTO test_empty_large VALUES ('');

CHECKPOINT;

SELECT COUNT(*), MIN(a[1]), MAX(a[1]) FROM test_empty_large LIMIT 5;

SELECT LOWER(compression) = '${compression}' FROM PRAGMA_STORAGE_INFO('test_empty_large') WHERE segment_type ILIKE 'VARCHAR' LIMIT 1;

DROP TABLE test_empty;

SET enable_fsst_vectors = '${enable_fsst_vector}';

PRAGMA threads = 1;

PRAGMA force_compression = '${compression}';

CREATE TABLE test (id INT, l TEXT[]);

INSERT INTO test SELECT i, CASE WHEN (i // 1000) % 2 = 0 THEN [CAST(1 AS TEXT), CAST(1 AS TEXT), CAST(1 AS TEXT)] ELSE [CAST(2 AS TEXT), CAST(2 AS TEXT)] END FROM RANGE(0, 200000) AS tbl(i);

SELECT COUNT(*), SUM(CAST(i AS INT)) FROM (SELECT UNNEST(l) FROM test) AS tbl(i);

SELECT COUNT(*), SUM(CAST(i AS INT)) FROM (SELECT UNNEST(l) FROM test WHERE id >= 5000 AND id < 6000) AS tbl(i);

SELECT COUNT(*), SUM(CAST(i AS INT)) FROM (SELECT UNNEST(l) FROM test WHERE id >= 150000 AND id < 160000) AS tbl(i);

CREATE INDEX i_index ON test(id);

SELECT * FROM test WHERE id = 150001;

CREATE TABLE test_large_list AS SELECT i % 100 AS id, LIST(CAST((-i) AS TEXT)) AS list FROM RANGE(0, 100000) AS tbl(i) GROUP BY id;

SELECT COUNT(*), SUM(CAST(i AS INT)) FROM (SELECT UNNEST(list) FROM test_large_list) AS tbl(i);

SELECT LOWER(compression) = '${compression}' FROM PRAGMA_STORAGE_INFO('test_large_list') WHERE segment_type ILIKE 'VARCHAR' LIMIT 1;

SELECT LOWER(compression) = '${compression}' FROM PRAGMA_STORAGE_INFO('test') WHERE segment_type ILIKE 'VARCHAR' LIMIT 1;

DROP TABLE test_large_list;

SET enable_fsst_vectors = 'true';

PRAGMA threads = 1;

PRAGMA force_compression = 'fsst';

CREATE TABLE test (l TEXT[]);

INSERT INTO test SELECT CASE WHEN (i // 1000) % 2 = 0 THEN [CAST(1 AS TEXT), CAST(1 AS TEXT), CAST(1 AS TEXT)] ELSE [CAST(2 AS TEXT), CAST(2 AS TEXT)] END FROM RANGE(0, 200000) AS tbl(i);

SELECT COUNT(*), SUM(CAST(i AS INT)) FROM (SELECT UNNEST(l) FROM test) AS tbl(i);

SET enable_fsst_vectors = '${enable_fsst_vector}';

PRAGMA force_compression = '${compression}';

CREATE TABLE test (a TEXT);

INSERT INTO test SELECT CAST((i % 500) AS TEXT) FROM RANGE(0, 10000) AS tbl(i);

SELECT SUM(CAST(a AS INT)), MIN(CAST(a AS INT)), MAX(CAST(a AS INT)), COUNT(*) FROM test;

SELECT SUM(CAST(a AS INT)), MIN(CAST(a AS INT)), MAX(CAST(a AS INT)), COUNT(*) FROM test;

CHECKPOINT;

SELECT LOWER(compression) = '${compression}' FROM PRAGMA_STORAGE_INFO('test') WHERE segment_type ILIKE 'VARCHAR' LIMIT 1;

SET enable_fsst_vectors = '${enable_fsst_vector}';

PRAGMA force_compression = '${compression}';

CREATE TABLE varchars AS SELECT CASE WHEN i % 2 = 0 THEN NULL ELSE CONCAT('thisismyvarchar-', i // 4) END AS v FROM RANGE(0, 1000000) AS tbl(i);

checkpoint;

SELECT MIN(v), MAX(v), COUNT(*), COUNT(v), COUNT(DISTINCT v) FROM varchars;

SELECT MIN(v), MAX(v), COUNT(*), COUNT(v), COUNT(DISTINCT v) FROM varchars;

SET enable_fsst_vectors = '${enable_fsst_vector}';

PRAGMA force_compression = '${compression}';

CREATE TABLE varchars AS SELECT CASE WHEN i % 2 = 0 THEN '' ELSE CONCAT('this-', i // 4) END AS v FROM RANGE(0, 1000000) AS tbl(i);

checkpoint;

SELECT MIN(v), MAX(v), COUNT(*), COUNT(v), COUNT(DISTINCT v) FROM varchars;

SET enable_fsst_vectors = '${enable_fsst_vector}';

PRAGMA force_compression = '${compression}';

CREATE TABLE test (a TEXT);

INSERT INTO test SELECT CONCAT('A-', CAST((i % 5) AS TEXT)) FROM RANGE(0, 1025) AS tbl(i);

checkpoint;

SELECT * FROM test LIMIT 5;

SELECT a[3] FROM test LIMIT 5;

SELECT LOWER(compression) = '${compression}' FROM PRAGMA_STORAGE_INFO('test') WHERE segment_type ILIKE 'VARCHAR' LIMIT 1;

SET enable_fsst_vectors = '${enable_fsst_vector}';

PRAGMA force_compression = '${compression}';

PRAGMA force_compression = '${compression}';

INSERT INTO test SELECT {'a': CONCAT('0000000000000000000', CAST((i % 250) AS TEXT))} FROM RANGE(0, 10000) AS tbl(i);
INSERT INTO test SELECT {'a': CONCAT('0000000000000000000', CAST((i % 250) AS TEXT))} FROM RANGE(22767, 32767) AS tbl(i);
INSERT INTO test SELECT {'a': CONCAT('0000000000000000000', CAST((i % 250) AS TEXT))} FROM RANGE(2147473647, 2147483647) AS tbl(i);
INSERT INTO test SELECT {'a': CONCAT('0000000000000000000', CAST((i % 250) AS TEXT))} FROM RANGE(2147473647, 2147483647) AS tbl(i);

SELECT SUM(CAST(s['a'] AS INT)), MIN(CAST(s['a'] AS INT)), MAX(CAST(s['a'] AS INT)), COUNT(*) FROM test;

SELECT SUM(CAST(s['a'] AS INT)), MIN(CAST(s['a'] AS INT)), MAX(CAST(s['a'] AS INT)), COUNT(*) FROM test;

CHECKPOINT;

SELECT LOWER(compression) = '${compression}' FROM PRAGMA_STORAGE_INFO('test') WHERE segment_type ILIKE 'VARCHAR' LIMIT 1;

SET enable_fsst_vectors = '${enable_fsst_vector}';

PRAGMA force_compression = '${compression}';

CREATE TABLE test (a TEXT);

INSERT INTO test SELECT CAST((i % 500) AS TEXT) FROM RANGE(0, 150000) AS tbl(i);

checkpoint;

CREATE TABLE test_2 AS SELECT a FROM test;

checkpoint;

SELECT SUM(CAST(a AS INT)) FROM test;

SELECT SUM(CAST(a AS INT)) FROM test_2;

SELECT LOWER(compression) = '${compression}' FROM PRAGMA_STORAGE_INFO('test') WHERE segment_type ILIKE 'VARCHAR' LIMIT 1;

SELECT LOWER(compression) = '${compression}' FROM PRAGMA_STORAGE_INFO('test_2') WHERE segment_type ILIKE 'VARCHAR' LIMIT 1;

DROP TABLE test;

SET storage_compatibility_version='v1.2.0'
load __TEST_DIR__/test_zstd_compression_fetch_row.db;

CREATE TABLE big_string (a TEXT, id INT);

PRAGMA force_compression = 'zstd';

INSERT INTO big_string VALUES (REPEAT('a', 8000), 1);
INSERT INTO big_string VALUES (REPEAT('b', 10), 2);
INSERT INTO big_string VALUES (REPEAT('c', 8000), 3);
INSERT INTO big_string VALUES (REPEAT('d', 10), 4);
INSERT INTO big_string VALUES (REPEAT('a', 8000), 1);
INSERT INTO big_string VALUES (REPEAT('b', 10), 2);
INSERT INTO big_string VALUES (REPEAT('c', 8000), 3);
INSERT INTO big_string VALUES (REPEAT('d', 10), 4);
INSERT INTO big_string VALUES (REPEAT('a', 8000), 1);
INSERT INTO big_string VALUES (REPEAT('b', 10), 2);
INSERT INTO big_string VALUES (REPEAT('c', 8000), 3);
INSERT INTO big_string VALUES (REPEAT('d', 10), 4);

INSERT INTO big_string VALUES (CONCAT(CAST(RANGE(0, 500000) AS TEXT)), 5);

INSERT INTO big_string VALUES (REPEAT('f', 1), 6);
INSERT INTO big_string VALUES (REPEAT('g', 8000), 7);
INSERT INTO big_string VALUES (REPEAT('h', 10000), 8);

checkpoint AS restart;

PRAGMA verify_fetch_row;

SELECT a[1], STRLEN(a) FROM big_string;

SET storage_compatibility_version='v1.2.0'
load __TEST_DIR__/zstd_nulls.db
require block_size 262144;

CREATE TABLE tbl (a TEXT);

set variable my_string = (
select concat(range(0,1000)::VARCHAR)
);

INSERT INTO tbl (a) SELECT CASE WHEN (i % 7) = 0 THEN NULL ELSE GETVARIABLE('my_string') || i END FROM RANGE(0, 5000) AS t(i);

PRAGMA force_compression = 'zstd';

checkpoint;

SELECT COUNT(*) FROM tbl WHERE a IS NULL;

SET storage_compatibility_version='v1.2.0'
load __TEST_DIR__/zstd_page_flushing_test1.db
require block_size 262144;

CREATE TABLE tbl (a TEXT);

set variable my_string = (
select concat(range(0,500000)::VARCHAR)
);

SET checkpoint_threshold = '10.0 GB';

INSERT INTO tbl VALUES ('aaaabbbb');
INSERT INTO tbl VALUES ('aaaabbbb');
INSERT INTO tbl VALUES ('aaaabbbb');
INSERT INTO tbl VALUES ('aaaabbbb');
INSERT INTO tbl VALUES ('aaaabbbb');
INSERT INTO tbl VALUES ('aaaabbbb');
INSERT INTO tbl VALUES ('aaaabbbb');
INSERT INTO tbl VALUES ('aaaabbbb');
INSERT INTO tbl VALUES ('aaaabbbb');
INSERT INTO tbl VALUES ('aaaabbbb');
INSERT INTO tbl VALUES ('aaaabbbb');

INSERT INTO tbl SELECT GETVARIABLE('my_string');

INSERT INTO tbl SELECT GETVARIABLE('my_string');

INSERT INTO tbl SELECT 'bbbbaaaa' FROM RANGE(0, 2036);

INSERT INTO tbl SELECT GETVARIABLE('my_string');

INSERT INTO tbl SELECT 'bbbbaaaa' FROM RANGE(0, 2047);

INSERT INTO tbl SELECT CONCAT(GETVARIABLE('my_string'), GETVARIABLE('my_string'));

INSERT INTO tbl SELECT 'bbbbaaaa' FROM RANGE(0, 2047);

INSERT INTO tbl SELECT CONCAT(GETVARIABLE('my_string'), GETVARIABLE('my_string'));

INSERT INTO tbl SELECT 'bbbbaaaa' FROM RANGE(0, 2047);

PRAGMA force_compression = 'zstd';

checkpoint;

SELECT STRLEN(a), COUNT(a) FROM tbl GROUP BY STRLEN(a) ORDER BY ALL;

SET storage_compatibility_version='v1.2.0'
load __TEST_DIR__/reclaim_space_drop_column_overflow_strings.db;

PRAGMA force_compression = 'ZSTD';

PRAGMA force_checkpoint;

CREATE TABLE strings AS SELECT i, REPEAT('X', CASE WHEN i % 17 = 0 THEN 5000 ELSE i % 7 END) AS s FROM GENERATE_SERIES(0, 150000) AS tbl(i);

CHECKPOINT;

CHECKPOINT;

SELECT AVG(STRLEN(s)), MIN(STRLEN(S)), MAX(STRLEN(S)), SUM(STRLEN(S)), MIN(S[1]), MAX(S[1]) FROM strings;

CREATE TABLE total_blocks_tbl AS SELECT total_blocks FROM PRAGMA_DATABASE_SIZE();

CREATE TABLE total_blocks_tbl AS SELECT total_blocks FROM PRAGMA_DATABASE_SIZE();

ALTER TABLE strings DROP COLUMN s;

ALTER TABLE strings ADD COLUMN s TEXT;

UPDATE strings SET s = REPEAT('X', CASE WHEN i % 17 = 0 THEN 5000 ELSE i % 7 END);

SELECT AVG(STRLEN(s)), MIN(STRLEN(S)), MAX(STRLEN(S)), SUM(STRLEN(S)), MIN(S[1]), MAX(S[1]) FROM strings;

CHECKPOINT;

CHECKPOINT;

CHECKPOINT;

SELECT AVG(STRLEN(s)), MIN(STRLEN(S)), MAX(STRLEN(S)), SUM(STRLEN(S)), MIN(S[1]), MAX(S[1]) FROM strings;

SET storage_compatibility_version='v1.2.0'
load __TEST_DIR__/reclaim_space_overflow_strings.db;

PRAGMA force_compression = 'ZSTD';

PRAGMA force_checkpoint;

CREATE TABLE strings AS SELECT REPEAT('X', CASE WHEN i % 17 = 0 THEN 5000 ELSE i % 7 END) AS s FROM GENERATE_SERIES(0, 150000) AS tbl(i);

CHECKPOINT;

CHECKPOINT;

SELECT AVG(STRLEN(s)), MIN(STRLEN(S)), MAX(STRLEN(S)), SUM(STRLEN(S)), MIN(S[1]), MAX(S[1]) FROM strings;

CREATE TABLE total_blocks_tbl AS SELECT total_blocks FROM PRAGMA_DATABASE_SIZE();

CREATE TABLE total_blocks_tbl AS SELECT total_blocks FROM PRAGMA_DATABASE_SIZE();

DROP TABLE strings;

CREATE TABLE strings AS SELECT REPEAT('X', CASE WHEN i % 17 = 0 THEN 5000 ELSE i % 7 END) AS s FROM GENERATE_SERIES(0, 150000) AS tbl(i);

SELECT AVG(STRLEN(s)), MIN(STRLEN(S)), MAX(STRLEN(S)), SUM(STRLEN(S)), MIN(S[1]), MAX(S[1]) FROM strings;

CHECKPOINT;

CHECKPOINT;

CHECKPOINT;

CHECKPOINT;
restart;

SELECT AVG(STRLEN(s)), MIN(STRLEN(S)), MAX(STRLEN(S)), SUM(STRLEN(S)), MIN(S[1]), MAX(S[1]) FROM strings;

SET default_block_size = '16384';

SET storage_compatibility_version = 'v1.2.0';

ATTACH '__TEST_DIR__/giant_list.db' AS db2;

USE db2;

PRAGMA force_compression = 'zstd';

PRAGMA checkpoint_threshold = '1gb';

SET zstd_min_string_length = 1;

SET zstd_min_string_length = 1;

force AS checkpoint;

SELECT LENGTH(lst), lst[1], lst[-1] FROM tbl;

SELECT compression FROM PRAGMA_STORAGE_INFO('tbl') WHERE segment_type = 'VARCHAR' AND compression <> 'ZSTD';

SET storage_compatibility_version='v1.2.0'
load __TEST_DIR__/zstd_vector_skipping.db;

PRAGMA force_compression = 'zstd';

SELECT SETSEED(0.42);

create table tbl as
select
i // 5_000 as num,
num::VARCHAR || list_reduce([uuid()::varchar for x in range(10)], (x, y) -> concat(x, y)) str
from range(20_000) t(i) order by num;

force AS checkpoint;

force AS checkpoint;

SET storage_compatibility_version='v1.2.0'
load __TEST_DIR__/test_zstd_storage.db;

PRAGMA force_compression = 'zstd';

CREATE TABLE test (a TEXT);

INSERT INTO test VALUES ('11'), ('11'), ('12'), (NULL);

checkpoint;

SELECT * FROM test;

SET storage_compatibility_version='v1.2.0'
load __TEST_DIR__/test_zstd_compression_ratio.db;

SET enable_logging = TRUE;

SET logging_level = 'info';

PRAGMA force_compression = 'zstd';

SELECT SETSEED(0.42);

set variable dataset_size = 100_000;

CREATE TABLE test_compressed AS (WITH cte AS (SELECT LIST_REDUCE([CAST(UUID() AS TEXT) FOR x IN RANGE(0, 128)], (x, y) -> CONCAT(x, y)) AS str FROM RANGE(0, GETVARIABLE('dataset_size'))) SELECT str FROM cte);

checkpoint;

SELECT message FROM duckdb_logs WHERE message.starts_with('FinalAnalyze') AND message.contains('test_compressed') AND message.contains('VARCHAR') ORDER BY timestamp;

PRAGMA force_compression = 'uncompressed';

SELECT SETSEED(0.42);

CREATE TABLE test_uncompressed AS (WITH cte AS (SELECT LIST_REDUCE([CAST(UUID() AS TEXT) FOR x IN RANGE(0, 128)], (x, y) -> CONCAT(x, y)) AS str FROM RANGE(0, GETVARIABLE('dataset_size'))) SELECT str FROM cte);

checkpoint;

SELECT message FROM duckdb_logs WHERE message.starts_with('FinalAnalyze') AND message.contains('test_uncompressed') AND message.contains('VARCHAR') ORDER BY timestamp;

SELECT compression FROM PRAGMA_STORAGE_INFO('test_compressed') WHERE segment_type <> 'VALIDITY' AND compression <> 'ZSTD';

SELECT compression FROM PRAGMA_STORAGE_INFO('test_uncompressed') WHERE segment_type <> 'VALIDITY' AND compression <> 'Uncompressed';

CREATE TYPE test_result AS UNION (
ok BOOL,
err STRUCT(
uncompressed HUGEINT,
compressed HUGEINT,
allowed_minimum_ratio DECIMAL(2,1),
allowed_maximum_ratio DECIMAL(2,1),
actual_ratio FLOAT
)
);

set variable min_ratio = 1.8;
set variable max_ratio = 2.5;

WITH compressed_intermediate AS (SELECT 1 + SUM(LENGTH(additional_block_ids)) AS blocks FROM PRAGMA_STORAGE_INFO('test_compressed') WHERE NOT segment_type IN ('VALIDITY') GROUP BY block_id), uncompressed_intermediate AS (SELECT 1 + SUM(LENGTH(additional_block_ids)) AS blocks FROM PRAGMA_STORAGE_INFO('test_uncompressed') WHERE NOT segment_type IN ('VALIDITY') GROUP BY block_id) SELECT CASE WHEN (CAST(uncompressed AS REAL) / CAST(compressed AS REAL)) > GETVARIABLE('min_ratio') AND (CAST(uncompressed AS REAL) / CAST(compressed AS REAL)) < GETVARIABLE('max_ratio') THEN CAST(TRUE AS test_result) ELSE CAST({'uncompressed': uncompressed, 'compressed': compressed, 'allowed_minimum_ratio': GETVARIABLE('min_ratio'), 'allowed_maximum_ratio': GETVARIABLE('max_ratio'), 'actual_ratio': CAST(uncompressed AS REAL) / CAST(compressed AS REAL)} AS test_result) END FROM (SELECT (SELECT SUM(blocks) FROM compressed_intermediate) AS compressed, (SELECT SUM(blocks) FROM uncompressed_intermediate) AS uncompressed) AS blocks_tbl;

CREATE TABLE pk_integers (i INT PRIMARY KEY);

INSERT INTO pk_integers VALUES (1), (2), (3);

CREATE TABLE fk_integers (j INT, FOREIGN KEY (j) REFERENCES pk_integers (i));

INSERT INTO fk_integers VALUES (1), (2);
restart;

INSERT INTO fk_integers VALUES (4);

INSERT INTO fk_integers VALUES (3);
restart;

DELETE FROM pk_integers WHERE i = 3;

DELETE FROM fk_integers WHERE j = 3;

DELETE FROM pk_integers WHERE i = 3;
restart;

UPDATE pk_integers SET i = 5 WHERE i = 2;

UPDATE fk_integers SET i = 4 WHERE j = 2;

UPDATE fk_integers SET i = 4 WHERE j = 2;

DROP TABLE pk_integers;

DROP TABLE fk_integers;

CREATE TABLE integers AS SELECT * FROM RANGE(0, 10000000) AS t(i);

DELETE FROM integers WHERE i >= 5000000;

SELECT COUNT(*), SUM(i) FROM integers;

ALTER TABLE integers ADD COLUMN j INT;

SELECT COUNT(*), SUM(i), SUM(j) FROM integers;

UPDATE integers SET j = i + 1;

SELECT COUNT(*), SUM(i), SUM(j) FROM integers;

SELECT COUNT(*), SUM(i), SUM(j) FROM integers;

CREATE TABLE integers AS SELECT * FROM RANGE(0, 10000000) AS t(i);

DELETE FROM integers WHERE i % 2 = 0;

SELECT COUNT(*) FROM integers;

SELECT COUNT(*) * GET_BLOCK_SIZE('drop_many_deletes') <= 262144 FROM PRAGMA_METADATA_INFO();

SELECT COUNT(*) * GET_BLOCK_SIZE('drop_many_deletes') <= 262144 FROM PRAGMA_METADATA_INFO();

SELECT COUNT(*) * GET_BLOCK_SIZE('drop_many_deletes') <= 262144 FROM PRAGMA_METADATA_INFO();

CREATE TABLE integers AS SELECT * FROM GENERATE_SERIES(0, 599999) AS t(i);

DELETE FROM integers WHERE i % 2 = 0;

ALTER TABLE integers ADD COLUMN k INT;

SELECT COUNT(*), COUNT(i), COUNT(k) FROM integers;

UPDATE integers SET k = i + 1;

SELECT COUNT(*), COUNT(i), COUNT(k), SUM(k) - SUM(i) FROM integers;

DELETE FROM integers WHERE i % 3 = 0;

SELECT COUNT(*), COUNT(i), COUNT(k), SUM(k) - SUM(i) FROM integers;

CREATE TABLE test (i INT);

INSERT INTO test SELECT * FROM GENERATE_SERIES(0, 999);

DELETE FROM test WHERE i % 2 = 0;

SELECT COUNT(*), SUM(i), MIN(i), MAX(i) FROM test;

INSERT INTO test SELECT * FROM GENERATE_SERIES(1000, 1099);

SELECT COUNT(*), SUM(i), MIN(i), MAX(i) FROM test;

DELETE FROM test WHERE i % 3 = 0;

SELECT COUNT(*), SUM(i), MIN(i), MAX(i) FROM test;

INSERT INTO test SELECT * FROM GENERATE_SERIES(1000, 1999);

SELECT COUNT(*), SUM(i), MIN(i), MAX(i) FROM test;

SELECT COUNT(*), SUM(i), MIN(i), MAX(i) FROM test;

SELECT COUNT(*) FROM test WHERE i % 7 = 0;

DELETE FROM test WHERE i % 7 = 0;

SELECT COUNT(*), SUM(i), MIN(i), MAX(i) FROM test;

DELETE FROM test WHERE i % 3 = 0;

SELECT COUNT(*), SUM(i), MIN(i), MAX(i) FROM test;

INSERT INTO test SELECT 1 FROM GENERATE_SERIES(0, 4000);

INSERT INTO test SELECT 2 FROM GENERATE_SERIES(0, 4000);

DELETE FROM test WHERE i = 1;

SELECT COUNT(*), SUM(i), MIN(i), MAX(i) FROM test;

DELETE FROM test WHERE i = 2;

SELECT COUNT(*), SUM(i), MIN(i), MAX(i) FROM test;

DELETE FROM test;

SELECT COUNT(*), SUM(i), MIN(i), MAX(i) FROM test;

BEGIN;

CREATE TABLE test (a INT, b INT);

INSERT INTO test SELECT i, i + 2 FROM RANGE(0, 1000000) AS t(i);

SELECT COUNT(*) FROM test;

DELETE FROM test WHERE a = 2;

SELECT COUNT(*) FROM test;

SELECT COUNT(*) FROM test;

SELECT COUNT(*) FROM test;

INSERT INTO test VALUES (2, 4);

SELECT COUNT(*) FROM test;

DELETE FROM test WHERE a % 2 = 0;

SELECT COUNT(*) FROM test;

BEGIN;

CREATE TABLE test (a INT, b INT);

INSERT INTO test VALUES (11, 22), (12, 21), (13, 22), (12, 21);

DELETE FROM test WHERE a = 12;

SELECT a, b FROM test ORDER BY a;

COMMIT;

CHECKPOINT;
restart;

SELECT a, b FROM test ORDER BY a;

DELETE FROM test WHERE a = 11;

SELECT a, b FROM test ORDER BY a;

INSERT INTO test VALUES (11, 24), (12, 25);

SELECT a, b FROM test ORDER BY a;

DELETE FROM test WHERE a = 12;

SELECT a, b FROM test ORDER BY a;

CHECKPOINT;
restart;

SELECT a, b FROM test ORDER BY a;

CREATE TABLE integers AS SELECT * FROM RANGE(0, 4) AS t(i);

DELETE FROM integers WHERE i % 2 = 0;

SELECT COUNT(*) FROM integers;

SELECT COUNT(*) FROM integers;

SELECT COUNT(*) FROM integers;

CREATE TABLE integers AS SELECT * FROM GENERATE_SERIES(0, 599999) AS t(i);

DELETE FROM integers WHERE i % 2 = 0;

SELECT COUNT(*) FROM integers;

INSERT INTO integers VALUES (42);

SELECT COUNT(*) FROM integers;

SELECT COUNT(*) FROM integers;

DELETE FROM integers WHERE i % 3 = 0;

SELECT COUNT(*) FROM integers;

SELECT COUNT(*) FROM integers;

INSERT INTO integers VALUES (84);

checkpoint;

checkpoint;

checkpoint;

CREATE TABLE t1(v VARCHAR DEFAULT CURRENT_SCHEMA())
restart;

INSERT INTO t1 VALUES (DEFAULT);

SELECT * FROM t1;

CREATE VIEW v1 AS SELECT CURRENT_SCHEMA();
restart;

SELECT * FROM v1;

SELECT * FROM "s3://duckdb-blobs/data/shakespeare.parquet";

EXPLAIN analyze from 's3://duckdb-blobs/data/shakespeare.parquet';

SET prefetch_all_parquet_files = TRUE;

CREATE SCHEMA tpcds;

CREATE SCHEMA tpcds;

CREATE SCHEMA tpcds;

CREATE SCHEMA tpcds;

CREATE SCHEMA tpcds;

CREATE SCHEMA tpcds;

CREATE SCHEMA tpcds;

SET prefetch_all_parquet_files = TRUE;

CREATE SCHEMA tpch;

CREATE SCHEMA tpch;

CREATE SCHEMA tpch;

CREATE SCHEMA tpch;

CREATE SCHEMA tpch;

CREATE SCHEMA tpch;

CREATE SCHEMA tpch;

EXPLAIN analyze from read_blob('s3://duckdb-blobs/data/shakespeare.parquet');

EXPLAIN analyze from read_blob('s3://duckdb-blobs/data/shakespeare.parquet');

EXPLAIN analyze from 's3://duckdb-blobs/data/shakespeare.parquet';

CREATE TABLE vals (i INT, v TEXT);

CREATE TABLE vals (i INT, v TEXT);

SELECT MIN(i) FROM vals;

SELECT MIN(v) FROM vals;

INSERT INTO vals VALUES (42, 'hello world');

SELECT MIN(i) FROM vals;

SELECT MIN(v) FROM vals;

CREATE TABLE vals (i INT PRIMARY KEY, v TEXT);

CREATE TABLE vals (i INT PRIMARY KEY, v TEXT);

CREATE TABLE vals (i INT PRIMARY KEY, v TEXT);

CREATE TABLE vals (i INT PRIMARY KEY, v TEXT);

CREATE TABLE vals (i INT, v TEXT);

CREATE TABLE vals (i INT, v TEXT);

SELECT MIN(i) FROM vals;

SELECT MIN(v) FROM vals;

CREATE TABLE vals (i INT, v TEXT);

CREATE TABLE vals (i INT, v TEXT);

CREATE TABLE vals (i INT, v TEXT);

CREATE TABLE vals (i INT, v TEXT);

CREATE TABLE vals (i INT, v TEXT);

CREATE TABLE vals (i INT, v TEXT);

CREATE TABLE vals (i INT, v TEXT);

CREATE TABLE test (a INT, b INT);

INSERT INTO test SELECT a, b FROM (VALUES (1, 3), (NULL, NULL)) AS tbl1(a, b), REPEAT(0, 1000);

SELECT a, b, COUNT(*) FROM test GROUP BY a, b ORDER BY a;

SELECT a, b, COUNT(*) FROM test GROUP BY a, b ORDER BY a;

INSERT INTO test SELECT a, b FROM (VALUES (2, 2)) AS tbl1(a, b), REPEAT(0, 347);

SELECT a, b, COUNT(*) FROM test GROUP BY a, b ORDER BY a;

SELECT a, b, COUNT(*) FROM test GROUP BY a, b ORDER BY a;

INSERT INTO test SELECT a, b FROM (VALUES (3, 3)) AS tbl1(a, b), REPEAT(0, 1987);

UPDATE test SET b = 4 WHERE a = 1;

SELECT a, b, COUNT(*) FROM test GROUP BY a, b ORDER BY a;

SELECT a, b, COUNT(*) FROM test GROUP BY a, b ORDER BY a;

UPDATE test SET a = 4, b = 4 WHERE a = 1;

SELECT a, b, COUNT(*) FROM test GROUP BY a, b ORDER BY a;

SELECT a, b, COUNT(*) FROM test GROUP BY a, b ORDER BY a;

UPDATE test SET b = 5, a = 6 WHERE a = 4;

DELETE FROM test WHERE a = 2;

SELECT a, b, COUNT(*) FROM test GROUP BY a, b ORDER BY a;

SELECT a, b, COUNT(*) FROM test GROUP BY a, b ORDER BY a;

UPDATE test SET b = 7 WHERE a = 3;

SELECT a, b, COUNT(*) FROM test GROUP BY a, b ORDER BY a;

SELECT a, b, COUNT(*) FROM test GROUP BY a, b ORDER BY a;

CREATE TABLE test (a INT, b INT);

INSERT INTO test VALUES (11, 22), (13, 22), (12, 21);

INSERT INTO test VALUES (11, 22), (13, 22), (12, 21);

INSERT INTO test VALUES (11, 22), (13, 22), (12, 21);

DELETE FROM test WHERE a = 12;

SELECT a, b FROM test ORDER BY a;

SELECT a, b FROM test ORDER BY a;

SELECT a, b FROM test ORDER BY a;

CREATE TABLE test (a INT, b TEXT);

INSERT INTO test VALUES (NULL, 'hello'), (13, 'abcdefgh'), (12, NULL);

SELECT a, b FROM test ORDER BY a;

PRAGMA enable_verification;

SELECT a, b FROM test ORDER BY a;

SELECT * FROM test WHERE a IS NULL;

UPDATE test SET b = NULL WHERE a IS NULL;

SELECT * FROM test WHERE a IS NULL;

SELECT a, b FROM test ORDER BY a;

SELECT a, b FROM test ORDER BY a;

SELECT a, b FROM test ORDER BY a;

SELECT a, b FROM test ORDER BY a;

SELECT a, b FROM test ORDER BY a;

INSERT INTO test VALUES (12, NULL);

SELECT a, b FROM test ORDER BY a;

SELECT a, b FROM test ORDER BY a;

SELECT a, b FROM test ORDER BY a;

UPDATE test SET b = 'test123' WHERE a = 12;

SELECT a, b FROM test ORDER BY a;

SELECT a, b FROM test ORDER BY a;

UPDATE test SET a = a + 1;

SELECT a, b FROM test ORDER BY a;

SELECT a, b FROM test ORDER BY a;

CREATE TABLE test (a INT);

INSERT INTO test SELECT a FROM RANGE(0, 1000) AS tbl1(a), REPEAT(0, 100) AS tbl2(b);

UPDATE test SET a = 2000 WHERE a = 1;

DELETE FROM test WHERE a = 2 OR a = 17;

SELECT SUM(a), COUNT(a) FROM test;

SELECT COUNT(a) FROM test WHERE a = 0;

SELECT COUNT(a) FROM test WHERE a = 1;

SELECT COUNT(a) FROM test WHERE a = 2;

SELECT COUNT(a) FROM test WHERE a = 17;

SELECT SUM(a), COUNT(a) FROM test;

SELECT COUNT(a) FROM test WHERE a = 0;

SELECT COUNT(a) FROM test WHERE a = 1;

SELECT COUNT(a) FROM test WHERE a = 2;

SELECT COUNT(a) FROM test WHERE a = 17;

CREATE TABLE test (a INT, b INT);

INSERT INTO test (VALUES (1, 3), (NULL, NULL)) AS restart;

SELECT * FROM test ORDER BY a;

INSERT INTO test VALUES (2, 2);

SELECT * FROM test ORDER BY a;

SELECT * FROM test ORDER BY a;

INSERT INTO test VALUES (3, 3);

UPDATE test SET b = 4 WHERE a = 1;

SELECT * FROM test ORDER BY a;

SELECT * FROM test ORDER BY a;

UPDATE test SET a = 4, b = 4 WHERE a = 1;

SELECT * FROM test ORDER BY a;

SELECT * FROM test ORDER BY a;

UPDATE test SET b = 5, a = 6 WHERE a = 4;

DELETE FROM test WHERE a = 2;

SELECT * FROM test ORDER BY a;

SELECT * FROM test ORDER BY a;

UPDATE test SET b = 7 WHERE a = 3;

SELECT * FROM test ORDER BY a;

SELECT * FROM test ORDER BY a;

CREATE TABLE test_list_2 (a INT, b STRUCT(c TEXT[], d TEXT[], e INT[]));

INSERT INTO test_list_2 SELECT 1, ROW(['a', 'b', 'c', 'd', 'e', 'f'], ['A', 'B'], [1, 5, 9]) FROM RANGE(0, 10);

CREATE TABLE test (a INT);

INSERT INTO test SELECT * FROM RANGE(0, 1000000);

SELECT SUM(a) FROM test;

INSERT INTO test SELECT * FROM RANGE(0, 1000000);

SELECT SUM(a) FROM test;

SELECT SUM(a) FROM test;

INSERT INTO test SELECT * FROM RANGE(0, 1000000) UNION ALL SELECT CAST(CONCAT('hello', i) AS INT) FROM RANGE(0, 10);

INSERT INTO test SELECT * FROM RANGE(0, 1000000) UNION ALL SELECT CAST(CONCAT('hello', i) AS INT) FROM RANGE(0, 10);

CREATE TEMPORARY TABLE new_blocks AS SELECT total_blocks FROM PRAGMA_DATABASE_SIZE();

SELECT new_blocks.total_blocks - blocks.total_blocks < 20 FROM blocks, new_blocks;

DROP TABLE blocks;

CREATE TEMPORARY TABLE blocks AS SELECT * FROM new_blocks;

DROP TABLE new_blocks;

CHECKPOINT;
endloop;

INSERT INTO test VALUES (42);

CHECKPOINT;

CREATE TEMPORARY TABLE new_blocks AS SELECT total_blocks FROM PRAGMA_DATABASE_SIZE();

SELECT new_blocks.total_blocks - blocks.total_blocks < 20 FROM blocks, new_blocks;

CREATE TABLE test (a INT);

BEGIN;

INSERT INTO test SELECT i FROM RANGE(0, 1000000) AS tbl(i);

ALTER TABLE test ALTER a SET TYPE BIGINT USING a + 1;

COMMIT;

SELECT SUM(a) FROM test;

SELECT SUM(a) FROM test;

BEGIN;

INSERT INTO test SELECT i FROM RANGE(0, 1000000) AS t(i);

ALTER TABLE test ALTER a SET TYPE VARCHAR USING concat('hello', a);

ROLLBACK;

SELECT SUM(a) FROM test;

SELECT SUM(a) FROM test;

DROP TABLE test;

CREATE TABLE test (a INT);

BEGIN;

INSERT INTO test SELECT i FROM RANGE(0, 1000000) AS tbl(i);

ALTER TABLE test ALTER a SET TYPE BIGINT USING a + 1;

COMMIT;

SELECT SUM(a) FROM test;

SELECT SUM(a) FROM test;

SELECT SUM(a) FROM test;

CHECKPOINT;

ATTACH '__TEST_DIR__/optimistic_write_custom_row_group_size.db' AS attached_db (ROW_GROUP_SIZE 204800, STORAGE_VERSION 'v1.2.0');

USE attached_db;

SET debug_skip_checkpoint_on_commit = TRUE;

PRAGMA disable_checkpoint_on_shutdown;

CREATE OR REPLACE TABLE test (a INT);

INSERT INTO test SELECT * FROM RANGE(0, 1000000);

SELECT SUM(a) FROM test;

ATTACH ':memory:' AS mem;

USE mem;

DETACH attached_db;

ATTACH '__TEST_DIR__/optimistic_write_custom_row_group_size.db' AS attached_db (ROW_GROUP_SIZE 2048);

USE attached_db;

SELECT SUM(a) FROM test;

INSERT INTO test SELECT * FROM RANGE(0, 1000000);

SELECT SUM(a) FROM test;

CREATE TABLE test (c TEXT);

BEGIN;

INSERT INTO test SELECT CASE i % 4 WHEN 0 THEN 'a' WHEN 1 THEN 'bb' WHEN 2 THEN 'ccc' ELSE NULL END AS c FROM RANGE(0, 250000) AS t(i);

INSERT INTO test SELECT * FROM test;

INSERT INTO test SELECT * FROM test;

INSERT INTO test SELECT * FROM test;

COMMIT;

SELECT MIN(c), MAX(c), SUM(LENGTH(c)), COUNT(c), COUNT(*) FROM test;

SELECT MIN(c), MAX(c), SUM(LENGTH(c)), COUNT(c), COUNT(*) FROM test;

BEGIN;

INSERT INTO test SELECT * FROM test;

ROLLBACK;

SELECT MIN(c), MAX(c), SUM(LENGTH(c)), COUNT(c), COUNT(*) FROM test;

SELECT MIN(c), MAX(c), SUM(LENGTH(c)), COUNT(c), COUNT(*) FROM test;

CREATE TABLE test (a INT);

BEGIN;

INSERT INTO test SELECT CASE WHEN i % 2 = 0 THEN NULL ELSE i END FROM RANGE(0, 250000) AS t(i);

SELECT SUM(a), COUNT(a), COUNT(*) FROM test;

INSERT INTO test SELECT * FROM test;

SELECT SUM(a), COUNT(a), COUNT(*) FROM test;

INSERT INTO test SELECT * FROM test;

SELECT SUM(a), COUNT(a), COUNT(*) FROM test;

INSERT INTO test SELECT * FROM test;

SELECT SUM(a), COUNT(a), COUNT(*) FROM test;

COMMIT;

SELECT SUM(a), COUNT(a), COUNT(*) FROM test;

SELECT SUM(a), COUNT(a), COUNT(*) FROM test;

BEGIN;

INSERT INTO test SELECT * FROM test;

ROLLBACK;

SELECT SUM(a), COUNT(a), COUNT(*) FROM test;

SELECT SUM(a), COUNT(a), COUNT(*) FROM test;

CREATE TABLE test (a INT);

BEGIN;

INSERT INTO test SELECT * FROM RANGE(0, 1000000);

DELETE FROM test WHERE a = 0;

COMMIT;

SELECT SUM(a) FROM test;

SELECT SUM(a) FROM test;

BEGIN;

INSERT INTO test SELECT * FROM RANGE(0, 1000000);

DELETE FROM test WHERE a = 1;

ROLLBACK;

SELECT SUM(a) FROM test;

CREATE TABLE foo (d DOUBLE);

BEGIN;

INSERT INTO foo SELECT RANDOM() FROM GENERATE_SERIES(1, 1000000) AS g(g);

DELETE FROM foo;

CREATE TABLE test (a INT, b INT, c INT);

BEGIN;

INSERT INTO test SELECT i, i + 1, i + 2 FROM RANGE(0, 1000000) AS tbl(i);

ALTER TABLE test DROP COLUMN c;

COMMIT;

SELECT SUM(a), SUM(b) FROM test;

SELECT SUM(a), SUM(b) FROM test;

BEGIN;

INSERT INTO test SELECT i, i FROM RANGE(0, 1000000) AS t(i);

ALTER TABLE test DROP COLUMN b;

ROLLBACK;

SELECT SUM(a), SUM(b) FROM test;

SELECT SUM(a), SUM(b) FROM test;

DROP TABLE test;

CREATE TABLE test (a INT, b INT, c INT);

BEGIN;

INSERT INTO test SELECT i, i + 1, i + 2 FROM RANGE(0, 1000000) AS tbl(i);

ALTER TABLE test DROP COLUMN c;

COMMIT;

SELECT SUM(a), SUM(b) FROM test;

SELECT SUM(a), SUM(b) FROM test;

SELECT SUM(a), SUM(b) FROM test;

CHECKPOINT;

CREATE TABLE test (a INT);

BEGIN;

INSERT INTO test SELECT * FROM RANGE(0, 1000000);

CREATE INDEX i_index ON test(a);

SELECT * FROM test WHERE a = 242773;

COMMIT;

SELECT * FROM test WHERE a = 242773;

SELECT SUM(a) FROM test;

SELECT * FROM test WHERE a = 242773;

SELECT SUM(a) FROM test;

CREATE TABLE test (val TEXT);

INSERT INTO test VALUES (NULL);

COPY (SELECT 'hello' AS str FROM RANGE(0, 250000)) TO '__TEST_DIR__/small_strings.parquet';

COPY (SELECT REPEAT('X', len) AS str FROM (VALUES (903), (4932)) AS t(len)) TO '__TEST_DIR__/large_strings.parquet';

BEGIN;

INSERT INTO test SELECT * FROM READ_PARQUET(['__TEST_DIR__/small_strings.parquet', '__TEST_DIR__/large_strings.parquet']);

SELECT MAX(STRLEN(val)) FROM test;

DELETE FROM test WHERE val = 'hello';

SELECT MAX(STRLEN(val)) FROM test;

COMMIT;

SELECT STRLEN(val) FROM test;

COPY (SELECT UUID() AS sw_id, CAST(UUID() AS TEXT) AS sw_system_object, CAST(UUID() AS TEXT) AS source_system_id, CAST(UUID() AS TEXT) AS source_system, CAST(UUID() AS TEXT) AS source_system_object, CAST(UUID() AS TEXT) AS source_system_field_name, RANDOM() <= 0.9 AS is_primary FROM RANGE(0, 728478)) TO '__TEST_DIR__/external_ids_generated.parquet';
load __TEST_DIR__/external_ids.db;

PRAGMA force_compression = 'uncompressed';

SET threads = 48;

SET preserve_insertion_order = FALSE;

SET force_compression = 'uncompressed';

CREATE TABLE main_tbl (v INT);

CREATE TABLE main_tbl (v INT);

CREATE TABLE main_tbl (v INT);

INSERT INTO main_tbl SELECT * FROM insert_tbl;
endloop;

SET force_compression = 'uncompressed';

CREATE TABLE main_tbl (v TEXT);

CREATE TABLE main_tbl (v TEXT);

CREATE TABLE main_tbl (v TEXT);

INSERT INTO main_tbl SELECT * FROM "__TEST_DIR__/file.parquet";
endloop;

CREATE TABLE test (a INT PRIMARY KEY);

BEGIN;

INSERT INTO test SELECT * FROM RANGE(0, 1000000);

SELECT * FROM test WHERE a = 242773;

COMMIT;

SELECT * FROM test WHERE a = 242773;

SELECT SUM(a) FROM test;

INSERT INTO test VALUES (42);

SELECT * FROM test WHERE a = 242773;

SELECT SUM(a) FROM test;

INSERT INTO test VALUES (42);

CREATE TABLE integers AS SELECT 42 AS i;

CHECKPOINT;

SELECT total_blocks < 10 FROM PRAGMA_DATABASE_SIZE();

CREATE TEMPORARY TABLE test (a INT);

INSERT INTO test SELECT * FROM RANGE(0, 1000000);

SELECT total_blocks < 10 FROM PRAGMA_DATABASE_SIZE();

CREATE TEMPORARY TABLE test2 (a INT);

INSERT INTO test2 SELECT * FROM RANGE(0, 1000000);

SELECT total_blocks < 10 FROM PRAGMA_DATABASE_SIZE();

CREATE TABLE test (a INT);

BEGIN;

INSERT INTO test SELECT * FROM RANGE(0, 1000000);

UPDATE test SET a = 500000 WHERE a = 0;

COMMIT;

SELECT SUM(a) FROM test;

SELECT SUM(a) FROM test;

BEGIN;

INSERT INTO test SELECT * FROM RANGE(0, 1000000);

UPDATE test SET a = 500000 WHERE a = 0;

ROLLBACK;

SELECT SUM(a) FROM test;

CREATE TABLE test (a INT);

SET checkpoint_threshold = '1GB';

PRAGMA disable_checkpoint_on_shutdown;

BEGIN;

INSERT INTO test SELECT * FROM RANGE(0, 1000000);

UPDATE test SET a = 500000 WHERE a = 0;

COMMIT;

SELECT SUM(a) FROM test;

SELECT SUM(a) FROM test;

BEGIN;

INSERT INTO test SELECT * FROM RANGE(0, 1000000);

UPDATE test SET a = 500000 WHERE a = 0;

ROLLBACK;

SELECT SUM(a) FROM test;

SET debug_skip_checkpoint_on_commit = TRUE;

PRAGMA disable_checkpoint_on_shutdown;

CREATE OR REPLACE TABLE test (a INT, big_payload TEXT DEFAULT CONCAT('longprefix_', CAST(UUID() AS TEXT)));

INSERT INTO test (a) SELECT * FROM RANGE(0, 5000);

INSERT INTO test (a) SELECT * FROM RANGE(5000, 10000);

INSERT INTO test (a) SELECT * FROM RANGE(10000, 15000);

INSERT INTO test (a) SELECT * FROM RANGE(15000, 20000);

INSERT INTO test (a) SELECT * FROM RANGE(20000, 1000000);

SELECT SUM(a), SUM(STRLEN(big_payload)) FROM test;

SELECT SUM(a), SUM(STRLEN(big_payload)) FROM test;

INSERT INTO test (a) SELECT * FROM RANGE(0, 1000000);

SELECT SUM(a), SUM(STRLEN(big_payload)) FROM test;

CREATE TABLE strings (s TEXT);

CREATE TABLE strings (s TEXT);

INSERT INTO strings SELECT REPEAT('X', CASE WHEN i % 17 = 0 THEN 5000 ELSE i % 7 END) AS s FROM GENERATE_SERIES(0, 2500) AS tbl(i);

CHECKPOINT;
endloop;

SELECT compression FROM PRAGMA_STORAGE_INFO('strings') WHERE segment_type = 'VARCHAR' AND compression <> 'Uncompressed';

SELECT EXISTS(SELECT * FROM PRAGMA_STORAGE_INFO('strings') WHERE CONTAINS(segment_info, 'Overflow String'));

SELECT total_blocks FROM PRAGMA_DATABASE_SIZE();

COPY (SELECT * FROM RANGE(0, 10000000)) TO '__TEST_DIR__/many_small_batches.parquet' WITH (row_group_size 5000);

CREATE TABLE test AS SELECT * FROM "__TEST_DIR__/many_small_batches.parquet" AS t(i) WHERE (i // 6144) % 3 = 0;

SELECT * FROM test LIMIT 5 OFFSET 500000;

SELECT * FROM test QUALIFY i <= LAG(i) OVER ();

SELECT MAX(count) FROM PRAGMA_STORAGE_INFO('test');

SELECT MEDIAN(count) > 100000 FROM PRAGMA_STORAGE_INFO('test');

DROP TABLE test;

COPY (SELECT * FROM RANGE(0, 100000) AS tbl(i)) TO '__TEST_DIR__/mix_batches_small.parquet' WITH (ROW_GROUP_SIZE 5000);

COPY (SELECT * FROM RANGE(100000, 400000) AS tbl(i)) TO '__TEST_DIR__/mix_batches_large.parquet' WITH (ROW_GROUP_SIZE 200000);

COPY (SELECT * FROM RANGE(400000, 700000) AS tbl(i)) TO '__TEST_DIR__/mix_batches_odd.parquet' WITH (ROW_GROUP_SIZE 999);

COPY (SELECT * FROM RANGE(700000, 1000000) AS tbl(i)) TO '__TEST_DIR__/mix_batches_odd_again.parquet' WITH (ROW_GROUP_SIZE 99979);

CREATE VIEW v1 AS SELECT * FROM PARQUET_SCAN(['__TEST_DIR__/mix_batches_small.parquet', '__TEST_DIR__/mix_batches_large.parquet', '__TEST_DIR__/mix_batches_odd.parquet', '__TEST_DIR__/mix_batches_odd_again.parquet']);

CREATE VIEW v2 AS SELECT * FROM v1 WHERE (i // 10000) % 2 = 0;

CREATE VIEW v2 AS SELECT * FROM v1 WHERE (i // 10000) % 2 = 0;

CREATE TABLE integers AS SELECT * FROM v1;

SELECT COUNT(DISTINCT row_group_id) < 20 FROM PRAGMA_STORAGE_INFO('integers');

SELECT SUM(i), MIN(i), MAX(i), COUNT(i), COUNT(*) FROM v1;

SELECT SUM(i), MIN(i), MAX(i), COUNT(i), COUNT(*) FROM integers;

SELECT * FROM v1 LIMIT 5 OFFSET 99998;

SELECT * FROM integers LIMIT 5 OFFSET 99998;

CREATE TABLE integers2 AS SELECT * FROM v2;

SELECT COUNT(DISTINCT row_group_id) < 20 FROM PRAGMA_STORAGE_INFO('integers2');

SELECT SUM(i), MIN(i), MAX(i), COUNT(i), COUNT(*) FROM v2;

SELECT SUM(i), MIN(i), MAX(i), COUNT(i), COUNT(*) FROM integers2;

SELECT * FROM v2 LIMIT 5 OFFSET 99998;

SELECT * FROM integers2 LIMIT 5 OFFSET 99998;

CREATE TABLE integers3 AS SELECT * FROM v3;

SELECT COUNT(DISTINCT row_group_id) < 20 FROM PRAGMA_STORAGE_INFO('integers3');

SELECT SUM(i), MIN(i), MAX(i), COUNT(i), COUNT(*) FROM v3;

SELECT SUM(i), MIN(i), MAX(i), COUNT(i), COUNT(*) FROM integers3;

SELECT * FROM v3 LIMIT 5 OFFSET 9999;

SELECT * FROM integers3 LIMIT 5 OFFSET 9999;

DROP TABLE integers;

DROP TABLE integers2;

DROP TABLE integers3;

DROP VIEW IF EXISTS v2;

DROP VIEW IF EXISTS v3;

CREATE OR REPLACE VIEW v1 AS SELECT * FROM "__TEST_DIR__/mix_batches_small.parquet" UNION ALL SELECT * FROM "__TEST_DIR__/mix_batches_large.parquet" UNION ALL SELECT * FROM "__TEST_DIR__/mix_batches_odd.parquet" UNION ALL SELECT * FROM "__TEST_DIR__/mix_batches_odd_again.parquet";

CREATE OR REPLACE VIEW v2 AS SELECT * FROM v1 WHERE (i // 10000) % 2 = 0;

CREATE OR REPLACE VIEW v3 AS SELECT * FROM v1 WHERE (i // 10000) % 2 = 0 OR (i > 200000 AND i < 400000) OR (i > 600000 AND i < 800000);
endloop;

CREATE TABLE integers4 (i INT);

BEGIN;

INSERT INTO integers4 SELECT * FROM "__TEST_DIR__/mix_batches_small.parquet";

INSERT INTO integers4 SELECT * FROM "__TEST_DIR__/mix_batches_large.parquet";

INSERT INTO integers4 SELECT * FROM "__TEST_DIR__/mix_batches_odd.parquet";

INSERT INTO integers4 SELECT * FROM "__TEST_DIR__/mix_batches_odd_again.parquet";

COMMIT;

SELECT COUNT(DISTINCT row_group_id) < 20 FROM PRAGMA_STORAGE_INFO('integers4');

SELECT SUM(i), MIN(i), MAX(i), COUNT(i), COUNT(*) FROM integers4;

SELECT * FROM integers4 LIMIT 5 OFFSET 99998;

COPY (SELECT * FROM RANGE(0, 10000000) AS tbl(i)) TO '__TEST_DIR__/row_group_size_plus_one.parquet' WITH (ROW_GROUP_SIZE 124928);

CREATE VIEW v1 AS SELECT * FROM PARQUET_SCAN('__TEST_DIR__/row_group_size_plus_one.parquet');

CREATE TABLE integers AS SELECT * FROM v1;

SELECT COUNT(DISTINCT row_group_id) < 200 FROM PRAGMA_STORAGE_INFO('integers');

SELECT SUM(i), MIN(i), MAX(i), COUNT(i), COUNT(*) FROM v1;

SELECT SUM(i), MIN(i), MAX(i), COUNT(i), COUNT(*) FROM integers;

SELECT * FROM integers LIMIT 5 OFFSET 99998;

SELECT * FROM integers LIMIT 5 OFFSET 9999998;

ATTACH '__TEST_DIR__/custom_row_group_size.db' AS custom_row_group_size (ROW_GROUP_SIZE 204800, STORAGE_VERSION 'v1.2.0');

USE custom_row_group_size;

COPY (SELECT * FROM RANGE(0, 100000) AS tbl(i)) TO '__TEST_DIR__/mix_batches_small.parquet' WITH (ROW_GROUP_SIZE 5000);

COPY (SELECT * FROM RANGE(100000, 400000) AS tbl(i)) TO '__TEST_DIR__/mix_batches_large.parquet' WITH (ROW_GROUP_SIZE 200000);

COPY (SELECT * FROM RANGE(400000, 700000) AS tbl(i)) TO '__TEST_DIR__/mix_batches_odd.parquet' WITH (ROW_GROUP_SIZE 999);

COPY (SELECT * FROM RANGE(700000, 1000000) AS tbl(i)) TO '__TEST_DIR__/mix_batches_odd_again.parquet' WITH (ROW_GROUP_SIZE 99979);

CREATE VIEW v1 AS SELECT * FROM PARQUET_SCAN(['__TEST_DIR__/mix_batches_small.parquet', '__TEST_DIR__/mix_batches_large.parquet', '__TEST_DIR__/mix_batches_odd.parquet', '__TEST_DIR__/mix_batches_odd_again.parquet']);

CREATE VIEW v2 AS SELECT * FROM v1 WHERE (i // 10000) % 2 = 0;

CREATE VIEW v3 AS SELECT * FROM v1 WHERE (i // 10000) % 2 = 0 OR (i > 200000 AND i < 400000) OR (i > 600000 AND i < 800000);

CREATE TABLE integers AS SELECT * FROM v1;

SELECT MAX(count) FROM PRAGMA_STORAGE_INFO('integers');

SELECT COUNT(DISTINCT row_group_id) < 10 FROM PRAGMA_STORAGE_INFO('integers');

SELECT SUM(i), MIN(i), MAX(i), COUNT(i), COUNT(*) FROM v1;

SELECT SUM(i), MIN(i), MAX(i), COUNT(i), COUNT(*) FROM integers;

CREATE TABLE integers2 AS SELECT * FROM v2;

DELETE FROM integers WHERE (i // 10000) % 2 <> 0;

SELECT SUM(i), MIN(i), MAX(i), COUNT(i), COUNT(*) FROM integers;

SELECT SUM(i), MIN(i), MAX(i), COUNT(i), COUNT(*) FROM integers2;

UPDATE integers SET i = i + 1 WHERE i % 2 = 0;

SELECT SUM(i), MIN(i), MAX(i), COUNT(i), COUNT(*) FROM integers;

CREATE TABLE integers3 AS SELECT * FROM v3;

SELECT COUNT(DISTINCT row_group_id) < 10 FROM PRAGMA_STORAGE_INFO('integers3');

SELECT SUM(i), MIN(i), MAX(i), COUNT(i), COUNT(*) FROM integers3;

SET preserve_insertion_order = FALSE;

CREATE TABLE integers4 AS SELECT * FROM integers;

SELECT SUM(i), MIN(i), MAX(i), COUNT(i), COUNT(*) FROM integers4;

ATTACH ':memory:' AS mem;

USE mem;

DETACH custom_row_group_size;

ATTACH '__TEST_DIR__/custom_row_group_size.db' AS custom_row_group_size;

USE custom_row_group_size;

SELECT SUM(i), MIN(i), MAX(i), COUNT(i), COUNT(*) FROM integers;

SELECT SUM(i), MIN(i), MAX(i), COUNT(i), COUNT(*) FROM integers2;

SELECT SUM(i), MIN(i), MAX(i), COUNT(i), COUNT(*) FROM integers3;

ATTACH '__TEST_DIR__/custom_row_group_size_xx.db' AS custom_row_group_size_x1 (ROW_GROUP_SIZE 0);

ATTACH '__TEST_DIR__/custom_row_group_size_xx.db' AS custom_row_group_size_x2 (ROW_GROUP_SIZE 77);

CREATE TABLE integers AS SELECT CASE WHEN i % 50000 = 0 THEN 1 ELSE 0 END AS i FROM RANGE(0, 50000000) AS tbl(i);

SELECT COUNT(DISTINCT block_id) < 4 FROM PRAGMA_STORAGE_INFO('integers');

SELECT MEDIAN(count) FROM PRAGMA_STORAGE_INFO('integers');

COPY integers TO '__TEST_DIR__/integers.parquet';

CREATE TABLE integers_parquet AS SELECT * FROM "__TEST_DIR__/integers.parquet";

SELECT * FROM integers_parquet LIMIT 5;

SELECT i, COUNT(*) FROM integers_parquet GROUP BY ALL ORDER BY ALL;

SELECT COUNT(DISTINCT block_id) < 5 FROM PRAGMA_STORAGE_INFO('integers_parquet');

CREATE TABLE integers_batched_load (i INT);

CREATE TABLE integers_batched_load (i INT);

INSERT INTO integers_batched_load SELECT CASE WHEN i % 50000 = 0 THEN 1 ELSE 0 END AS i FROM RANGE(0, 1000000) AS tbl(i);

COMMIT;

SELECT COUNT(DISTINCT block_id) < 4 FROM PRAGMA_STORAGE_INFO('integers_batched_load');

SELECT COUNT(*), COUNT(i), SUM(i) FROM integers_batched_load;

CREATE TABLE integers_batched_load_nulls (i INT);

CREATE TABLE integers_batched_load_nulls (i INT);

INSERT INTO integers_batched_load_nulls SELECT CASE WHEN i % 50000 = 0 THEN 1 ELSE NULL END AS i FROM RANGE(0, 1000000) AS tbl(i);

INSERT INTO integers_batched_load_nulls SELECT CASE WHEN i % 50000 = 0 THEN 1 ELSE NULL END AS i FROM RANGE(0, 1000000) AS tbl(i);

SELECT COUNT(DISTINCT block_id) < 8 FROM PRAGMA_STORAGE_INFO('integers_batched_load_nulls');

SELECT COUNT(*), COUNT(i), SUM(i) FROM integers_batched_load_nulls;

CREATE TABLE integers AS SELECT i, i % 2 AS j FROM GENERATE_SERIES(0, 9999999, 1) AS tbl(i);

CREATE TABLE integers2 AS SELECT * FROM integers GROUP BY GROUPING SETS ((), (i), (i, j), (j));

SELECT SUM(i), SUM(j), COUNT(*), COUNT(i), COUNT(j) FROM integers;

SELECT SUM(i), SUM(j), COUNT(*), COUNT(i), COUNT(j) FROM integers2;

DROP TABLE integers;

DROP TABLE integers2;

CREATE TABLE integers AS SELECT CASE WHEN i % 2 = 0 THEN NULL ELSE i END AS i, i % 2 AS j FROM GENERATE_SERIES(0, 9999999, 1) AS tbl(i);

CREATE TABLE integers2 AS SELECT * FROM integers GROUP BY GROUPING SETS ((), (i), (i, j), (j));

SELECT SUM(i), SUM(j), COUNT(*), COUNT(i), COUNT(j) FROM integers;

SELECT SUM(i), SUM(j), COUNT(*), COUNT(i), COUNT(j) FROM integers2;

PRAGMA preserve_insertion_order = FALSE;

CREATE TABLE integers AS SELECT * FROM RANGE(0, 10000000) AS tbl(i);

CREATE TABLE integers2 AS SELECT * FROM integers;

SELECT SUM(i) FROM integers;

SELECT SUM(i) FROM integers2;

DROP TABLE integers;

DROP TABLE integers2;

CREATE TABLE integers AS SELECT CASE WHEN i % 2 = 0 THEN NULL ELSE i END AS i FROM RANGE(0, 10000000) AS tbl(i);

CREATE TABLE integers2 AS SELECT * FROM integers;

SELECT SUM(i) FROM integers;

SELECT SUM(i) FROM integers2;

CREATE TABLE integers AS SELECT * FROM RANGE(0, 10000000) AS tbl(i);

CREATE TABLE integers2 AS SELECT * FROM integers;

SELECT SUM(i) FROM integers;

SELECT SUM(i) FROM integers2;

SELECT * FROM integers2 LIMIT 5;

SELECT * FROM integers2 LIMIT 5 OFFSET 777778;

DROP TABLE integers;

DROP TABLE integers2;

CREATE TABLE integers AS SELECT CASE WHEN i % 2 = 0 THEN NULL ELSE i END AS i FROM RANGE(0, 10000000) AS tbl(i);

CREATE TABLE integers2 AS SELECT * FROM integers;

SELECT SUM(i) FROM integers;

SELECT SUM(i) FROM integers2;

SELECT * FROM integers2 LIMIT 5;

SELECT * FROM integers2 LIMIT 5 OFFSET 777778;

CREATE TABLE integers AS SELECT * FROM RANGE(0, 10000000) AS tbl(i);

SELECT COUNT(DISTINCT block_id) < 4 FROM PRAGMA_STORAGE_INFO('integers');

SELECT MEDIAN(count) FROM PRAGMA_STORAGE_INFO('integers');

COPY integers TO '__TEST_DIR__/integers.parquet' WITH (ROW_GROUP_SIZE 77777);

CREATE TABLE integers_parquet AS SELECT * FROM "__TEST_DIR__/integers.parquet";

SELECT * FROM integers_parquet LIMIT 5;

SELECT * FROM integers_parquet LIMIT 5 OFFSET 773654;

SELECT COUNT(DISTINCT block_id) < 4 FROM PRAGMA_STORAGE_INFO('integers_parquet');

SELECT MEDIAN(count) > 100000 FROM PRAGMA_STORAGE_INFO('integers_parquet');

SET preserve_insertion_order = FALSE;

CREATE TABLE integers_parquet_no_order AS SELECT * FROM "__TEST_DIR__/integers.parquet";

SELECT COUNT(DISTINCT block_id) < 12 FROM PRAGMA_STORAGE_INFO('integers_parquet_no_order');

SELECT MEDIAN(count) > 100000 FROM PRAGMA_STORAGE_INFO('integers_parquet_no_order');

SET memory_limit='300MB'
foreach row_group_size 5000 150000 1000000;

SET memory_limit='300MB'
foreach row_group_size 5000 150000 1000000;

CREATE TABLE integers AS SELECT * FROM "__TEST_DIR__/giant_row_groups.parquet";

SELECT SUM(i), MIN(i), MAX(i), COUNT(i), COUNT(*) FROM integers;

SELECT * FROM integers LIMIT 5 OFFSET 99998;

DROP TABLE integers;

DROP TABLE integers;

CREATE TABLE integers AS SELECT * FROM "__TEST_DIR__/giant_row_groups_nulls.parquet";

SELECT SUM(i), MIN(i), MAX(i), COUNT(i), COUNT(*) FROM integers;

SELECT * FROM integers LIMIT 5 OFFSET 99998;

SET memory_limit='300MB'
foreach row_group_size 5000 150000 1000000;

SET memory_limit='300MB'
foreach row_group_size 5000 150000 1000000;

CREATE TABLE list AS SELECT * FROM "__TEST_DIR__/giant_row_groups.parquet";

SELECT SUM(i), MIN(i), MAX(i), COUNT(i), COUNT(*) FROM (SELECT UNNEST(l) AS i FROM list);

SELECT * FROM list LIMIT 5 OFFSET 99998;

DROP TABLE list;

DROP TABLE list;

CREATE TABLE list AS SELECT * FROM "__TEST_DIR__/giant_row_groups_nulls.parquet";

SELECT SUM(i), MIN(i), MAX(i), COUNT(i), COUNT(*) FROM (SELECT UNNEST(l) AS i FROM list);

SELECT * FROM list LIMIT 5 OFFSET 99998;

SET memory_limit = '300MB';

COPY (SELECT * FROM RANGE(0, 20000000) AS tbl(i)) TO '__TEST_DIR__/mixed_batches_1.parquet' WITH (ROW_GROUP_SIZE 5000);

COPY (SELECT * FROM RANGE(20000000, 30000000) AS tbl(i)) TO '__TEST_DIR__/mixed_batches_2.parquet' WITH (ROW_GROUP_SIZE 200000);

COPY (SELECT * FROM RANGE(30000000, 50000000) AS tbl(i)) TO '__TEST_DIR__/mixed_batches_3.parquet' WITH (ROW_GROUP_SIZE 999);

COPY (SELECT * FROM RANGE(50000000, 70000000) AS tbl(i)) TO '__TEST_DIR__/mixed_batches_4.parquet' WITH (ROW_GROUP_SIZE 99979);

COPY (SELECT * FROM RANGE(70000000, 90000000) AS tbl(i)) TO '__TEST_DIR__/mixed_batches_5.parquet' WITH (ROW_GROUP_SIZE 99979);

COPY (SELECT * FROM RANGE(90000000, 100000000) AS tbl(i)) TO '__TEST_DIR__/mixed_batches_6.parquet' WITH (ROW_GROUP_SIZE 33445);

CREATE TABLE integers AS SELECT * FROM READ_PARQUET(['__TEST_DIR__/mixed_batches_1.parquet', '__TEST_DIR__/mixed_batches_2.parquet', '__TEST_DIR__/mixed_batches_3.parquet', '__TEST_DIR__/mixed_batches_4.parquet', '__TEST_DIR__/mixed_batches_5.parquet', '__TEST_DIR__/mixed_batches_6.parquet']);

SELECT SUM(i), MIN(i), MAX(i), COUNT(i), COUNT(*) FROM integers;

SELECT * FROM integers LIMIT 5 OFFSET 99998;

DROP TABLE integers;

COPY (SELECT CASE WHEN i % 2 = 0 THEN NULL ELSE i END AS i FROM RANGE(0, 20000000) AS tbl(i)) TO '__TEST_DIR__/mixed_batches_1.parquet' WITH (ROW_GROUP_SIZE 5000);

COPY (SELECT CASE WHEN i % 2 = 0 THEN NULL ELSE i END AS i FROM RANGE(20000000, 30000000) AS tbl(i)) TO '__TEST_DIR__/mixed_batches_2.parquet' WITH (ROW_GROUP_SIZE 200000);

COPY (SELECT CASE WHEN i % 2 = 0 THEN NULL ELSE i END AS i FROM RANGE(30000000, 50000000) AS tbl(i)) TO '__TEST_DIR__/mixed_batches_3.parquet' WITH (ROW_GROUP_SIZE 999);

COPY (SELECT CASE WHEN i % 2 = 0 THEN NULL ELSE i END AS i FROM RANGE(50000000, 70000000) AS tbl(i)) TO '__TEST_DIR__/mixed_batches_4.parquet' WITH (ROW_GROUP_SIZE 99979);

COPY (SELECT CASE WHEN i % 2 = 0 THEN NULL ELSE i END AS i FROM RANGE(70000000, 90000000) AS tbl(i)) TO '__TEST_DIR__/mixed_batches_5.parquet' WITH (ROW_GROUP_SIZE 99979);

COPY (SELECT CASE WHEN i % 2 = 0 THEN NULL ELSE i END AS i FROM RANGE(90000000, 100000000) AS tbl(i)) TO '__TEST_DIR__/mixed_batches_6.parquet' WITH (ROW_GROUP_SIZE 33445);

CREATE TABLE integers AS SELECT * FROM READ_PARQUET(['__TEST_DIR__/mixed_batches_1.parquet', '__TEST_DIR__/mixed_batches_2.parquet', '__TEST_DIR__/mixed_batches_3.parquet', '__TEST_DIR__/mixed_batches_4.parquet', '__TEST_DIR__/mixed_batches_5.parquet', '__TEST_DIR__/mixed_batches_6.parquet']);

SELECT SUM(i), MIN(i), MAX(i), COUNT(i), COUNT(*) FROM integers;

SELECT * FROM integers LIMIT 5 OFFSET 99998;

CREATE TABLE integers AS SELECT * FROM RANGE(0, 10000000) AS tbl(i);

CREATE TABLE integers2 AS SELECT * FROM integers WHERE i % 100 = 0;

INSERT INTO integers2 SELECT * FROM integers WHERE i % 100 = 0;

SELECT SUM(i) FROM integers;

SELECT SUM(i) FROM integers2;

SELECT COUNT(DISTINCT row_group_id) < 20 FROM PRAGMA_STORAGE_INFO('integers2');

DROP TABLE integers2;

CREATE TABLE integers2 AS SELECT * FROM integers WHERE i % 100 = 0 OR (i >= 3000000 AND i <= 4000000);

SELECT SUM(i) FROM integers2;

SELECT COUNT(DISTINCT row_group_id) < 20 FROM PRAGMA_STORAGE_INFO('integers2');

DROP TABLE integers2;

COPY (SELECT * FROM RANGE(0, 10000000) AS t(i)) TO '__TEST_DIR__/integers.parquet' WITH (FORMAT PARQUET, ROW_GROUP_SIZE 200000);

CREATE VIEW integers AS SELECT * FROM "__TEST_DIR__/integers.parquet";

CREATE TABLE integers2 (i INT PRIMARY KEY);

INSERT INTO integers2 VALUES (9999999);

INSERT INTO integers2 SELECT * FROM integers;

INSERT INTO integers2 SELECT * FROM integers;

INSERT INTO integers2 SELECT * FROM integers;

BEGIN;

INSERT INTO integers2 VALUES (9999998);

INSERT INTO integers2 SELECT * FROM integers WHERE i <= 9999998;

ROLLBACK;

ROLLBACK;

ROLLBACK;

CHECKPOINT;

INSERT INTO block_count SELECT total_blocks FROM PRAGMA_DATABASE_SIZE();

INSERT INTO block_count SELECT total_blocks FROM PRAGMA_DATABASE_SIZE();

SELECT (MAX(count) - MIN(count)) < 20 FROM block_count;

SET preserve_insertion_order = FALSE;

SET preserve_insertion_order = FALSE;

CREATE TABLE integers2 (i INT);

INSERT INTO integers2 VALUES (9999999);

CREATE UNIQUE INDEX idx ON integers2(i);

CREATE TABLE total_blocks_tbl AS SELECT total_blocks FROM PRAGMA_DATABASE_SIZE();

CREATE TABLE total_blocks_tbl AS SELECT total_blocks FROM PRAGMA_DATABASE_SIZE();

BEGIN;

CHECKPOINT;

INSERT INTO integers2 VALUES (999 AS _998);

INSERT INTO integers2 VALUES (999 AS _998);

ROLLBACK;

ROLLBACK;

SET preserve_insertion_order = FALSE;

CREATE TABLE integers AS SELECT * FROM RANGE(0, 10000000) AS t(i);

CREATE TABLE integers2 (i INT PRIMARY KEY);

INSERT INTO integers2 VALUES (9999999);

INSERT INTO integers2 SELECT * FROM integers;

CREATE TABLE total_blocks_tbl AS SELECT total_blocks FROM PRAGMA_DATABASE_SIZE();

CREATE TABLE total_blocks_tbl AS SELECT total_blocks FROM PRAGMA_DATABASE_SIZE();

INSERT INTO integers2 SELECT * FROM integers;

BEGIN;

INSERT INTO integers2 VALUES (9999998);

INSERT INTO integers2 SELECT * FROM integers WHERE i <= 9999998;

ROLLBACK;

ROLLBACK;

ROLLBACK;

CHECKPOINT;

CHECKPOINT;

CHECKPOINT;

COPY (SELECT * FROM RANGE(0, 100000) AS tbl(i)) TO '__TEST_DIR__/mix_batches_small.parquet' WITH (ROW_GROUP_SIZE 5000);

COPY (SELECT * FROM RANGE(100000, 400000) AS tbl(i)) TO '__TEST_DIR__/mix_batches_large.parquet' WITH (ROW_GROUP_SIZE 200000);

COPY (SELECT * FROM RANGE(400000, 700000) AS tbl(i)) TO '__TEST_DIR__/mix_batches_odd.parquet' WITH (ROW_GROUP_SIZE 999);

COPY (SELECT * FROM RANGE(700000, 1000000) AS tbl(i)) TO '__TEST_DIR__/mix_batches_odd_again.parquet' WITH (ROW_GROUP_SIZE 99979);

CREATE TABLE integers (i INT);

CREATE TABLE block_count(count int)
loop i 0 10;

BEGIN;

INSERT INTO integers SELECT * FROM READ_PARQUET(['__TEST_DIR__/mix_batches_small.parquet', '__TEST_DIR__/mix_batches_large.parquet', '__TEST_DIR__/mix_batches_odd.parquet', '__TEST_DIR__/mix_batches_odd_again.parquet']);

ROLLBACK;

BEGIN;

INSERT INTO integers SELECT * FROM "__TEST_DIR__/mix_batches_small.parquet";

INSERT INTO integers SELECT * FROM "__TEST_DIR__/mix_batches_large.parquet";

INSERT INTO integers SELECT * FROM "__TEST_DIR__/mix_batches_odd.parquet";

INSERT INTO integers SELECT * FROM "__TEST_DIR__/mix_batches_odd_again.parquet";

ROLLBACK;

INSERT INTO block_count SELECT total_blocks FROM PRAGMA_DATABASE_SIZE();

SELECT (MAX(count) - MIN(count)) < 20 FROM block_count;

ATTACH '__TEST_DIR__/tiny_row_group_size.db' (ROW_GROUP_SIZE 2048);

USE tiny_row_group_size;

CREATE TABLE t AS SELECT * FROM RANGE(0, 1000000) AS t(i);

SELECT SUM(i), MIN(i), MAX(i), COUNT(i), COUNT(*) FROM t;

SELECT COUNT(DISTINCT row_group_id) < 1000, MAX(count) FROM PRAGMA_STORAGE_INFO('t');

SELECT * FROM t LIMIT 5 OFFSET 77777;

SELECT i, ROW_NUMBER() OVER () FROM t LIMIT 5 OFFSET 777776;

BEGIN;

CREATE TABLE integers (i0 INT, i1 INT, i2 INT, i3 INT, i4 INT, i5 INT, i6 INT, i7 INT, i8 INT, i9 INT, i10 INT, i11 INT, i12 INT, i13 INT, i14 INT, i15 INT, i16 INT, i17 INT, i18 INT, i19 INT, i20 INT, i21 INT, i22 INT, i23 INT, i24 INT, i25 INT, i26 INT, i27 INT, i28 INT, i29 INT, i30 INT, i31 INT, i32 INT, i33 INT, i34 INT, i35 INT, i36 INT, i37 INT, i38 INT, i39 INT, i40 INT, i41 INT, i42 INT, i43 INT, i44 INT, i45 INT, i46 INT, i47 INT, i48 INT, i49 INT, i50 INT, i51 INT, i52 INT, i53 INT, i54 INT, i55 INT, i56 INT, i57 INT, i58 INT, i59 INT, i60 INT, i61 INT, i62 INT, i63 INT, i64 INT, i65 INT, i66 INT, i67 INT, i68 INT, i69 INT, i70 INT, i71 INT, i72 INT, i73 INT, i74 INT, i75 INT, i76 INT, i77 INT, i78 INT, i79 INT, i80 INT, i81 INT, i82 INT, i83 INT, i84 INT, i85 INT, i86 INT, i87 INT, i88 INT, i89 INT, i90 INT, i91 INT, i92 INT, i93 INT, i94 INT, i95 INT, i96 INT, i97 INT, i98 INT, i99 INT);

INSERT INTO integers VALUES (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99);

INSERT INTO integers VALUES (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100);

INSERT INTO integers VALUES (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100);

INSERT INTO integers VALUES (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100);

ALTER TABLE integers ALTER i${i} SET DATA TYPE ${type}
endloop;

COMMIT;

CHECKPOINT;

SELECT total_blocks * block_size < 15 * 262144 FROM PRAGMA_DATABASE_SIZE();

BEGIN;

CREATE TABLE integers (i0 INT, i1 INT, i2 INT, i3 INT, i4 INT, i5 INT, i6 INT, i7 INT, i8 INT, i9 INT, i10 INT, i11 INT, i12 INT, i13 INT, i14 INT, i15 INT, i16 INT, i17 INT, i18 INT, i19 INT, i20 INT, i21 INT, i22 INT, i23 INT, i24 INT, i25 INT, i26 INT, i27 INT, i28 INT, i29 INT, i30 INT, i31 INT, i32 INT, i33 INT, i34 INT, i35 INT, i36 INT, i37 INT, i38 INT, i39 INT, i40 INT, i41 INT, i42 INT, i43 INT, i44 INT, i45 INT, i46 INT, i47 INT, i48 INT, i49 INT, i50 INT, i51 INT, i52 INT, i53 INT, i54 INT, i55 INT, i56 INT, i57 INT, i58 INT, i59 INT, i60 INT, i61 INT, i62 INT, i63 INT, i64 INT, i65 INT, i66 INT, i67 INT, i68 INT, i69 INT, i70 INT, i71 INT, i72 INT, i73 INT, i74 INT, i75 INT, i76 INT, i77 INT, i78 INT, i79 INT, i80 INT, i81 INT, i82 INT, i83 INT, i84 INT, i85 INT, i86 INT, i87 INT, i88 INT, i89 INT, i90 INT, i91 INT, i92 INT, i93 INT, i94 INT, i95 INT, i96 INT, i97 INT, i98 INT, i99 INT);

INSERT INTO integers VALUES (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99);

INSERT INTO integers VALUES (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100);

INSERT INTO integers VALUES (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100);

ALTER TABLE integers DROP COLUMN i${i};

ALTER TABLE integers ADD COLUMN i${i} INTEGER;

CHECKPOINT;

SELECT total_blocks * block_size < 10 * 262144 FROM PRAGMA_DATABASE_SIZE();

BEGIN;

CREATE TABLE integers (i0 INT, i1 INT, i2 INT, i3 INT, i4 INT, i5 INT, i6 INT, i7 INT, i8 INT, i9 INT, i10 INT, i11 INT, i12 INT, i13 INT, i14 INT, i15 INT, i16 INT, i17 INT, i18 INT, i19 INT, i20 INT, i21 INT, i22 INT, i23 INT, i24 INT, i25 INT, i26 INT, i27 INT, i28 INT, i29 INT, i30 INT, i31 INT, i32 INT, i33 INT, i34 INT, i35 INT, i36 INT, i37 INT, i38 INT, i39 INT, i40 INT, i41 INT, i42 INT, i43 INT, i44 INT, i45 INT, i46 INT, i47 INT, i48 INT, i49 INT, i50 INT, i51 INT, i52 INT, i53 INT, i54 INT, i55 INT, i56 INT, i57 INT, i58 INT, i59 INT, i60 INT, i61 INT, i62 INT, i63 INT, i64 INT, i65 INT, i66 INT, i67 INT, i68 INT, i69 INT, i70 INT, i71 INT, i72 INT, i73 INT, i74 INT, i75 INT, i76 INT, i77 INT, i78 INT, i79 INT, i80 INT, i81 INT, i82 INT, i83 INT, i84 INT, i85 INT, i86 INT, i87 INT, i88 INT, i89 INT, i90 INT, i91 INT, i92 INT, i93 INT, i94 INT, i95 INT, i96 INT, i97 INT, i98 INT, i99 INT);

INSERT INTO integers VALUES (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99);

INSERT INTO integers VALUES (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100);

CREATE TABLE integers2 (i0 INT, i1 INT, i2 INT, i3 INT, i4 INT, i5 INT, i6 INT, i7 INT, i8 INT, i9 INT, i10 INT, i11 INT, i12 INT, i13 INT, i14 INT, i15 INT, i16 INT, i17 INT, i18 INT, i19 INT, i20 INT, i21 INT, i22 INT, i23 INT, i24 INT, i25 INT, i26 INT, i27 INT, i28 INT, i29 INT, i30 INT, i31 INT, i32 INT, i33 INT, i34 INT, i35 INT, i36 INT, i37 INT, i38 INT, i39 INT, i40 INT, i41 INT, i42 INT, i43 INT, i44 INT, i45 INT, i46 INT, i47 INT, i48 INT, i49 INT, i50 INT, i51 INT, i52 INT, i53 INT, i54 INT, i55 INT, i56 INT, i57 INT, i58 INT, i59 INT, i60 INT, i61 INT, i62 INT, i63 INT, i64 INT, i65 INT, i66 INT, i67 INT, i68 INT, i69 INT, i70 INT, i71 INT, i72 INT, i73 INT, i74 INT, i75 INT, i76 INT, i77 INT, i78 INT, i79 INT, i80 INT, i81 INT, i82 INT, i83 INT, i84 INT, i85 INT, i86 INT, i87 INT, i88 INT, i89 INT, i90 INT, i91 INT, i92 INT, i93 INT, i94 INT, i95 INT, i96 INT, i97 INT, i98 INT, i99 INT);

INSERT INTO integers2 VALUES (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99);

INSERT INTO integers2 VALUES (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100);

INSERT INTO integers2 VALUES (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100);

INSERT INTO integers2 VALUES (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100);

INSERT INTO integers2 VALUES (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100);

INSERT INTO integers2 VALUES (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100);

INSERT INTO integers2 VALUES (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100);

INSERT INTO integers2 VALUES (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100);

INSERT INTO integers2 VALUES (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100);

INSERT INTO integers2 VALUES (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100);

BEGIN;

CREATE TABLE integers (i0 INT, i1 INT, i2 INT, i3 INT, i4 INT, i5 INT, i6 INT, i7 INT, i8 INT, i9 INT, i10 INT, i11 INT, i12 INT, i13 INT, i14 INT, i15 INT, i16 INT, i17 INT, i18 INT, i19 INT, i20 INT, i21 INT, i22 INT, i23 INT, i24 INT, i25 INT, i26 INT, i27 INT, i28 INT, i29 INT, i30 INT, i31 INT, i32 INT, i33 INT, i34 INT, i35 INT, i36 INT, i37 INT, i38 INT, i39 INT, i40 INT, i41 INT, i42 INT, i43 INT, i44 INT, i45 INT, i46 INT, i47 INT, i48 INT, i49 INT, i50 INT, i51 INT, i52 INT, i53 INT, i54 INT, i55 INT, i56 INT, i57 INT, i58 INT, i59 INT, i60 INT, i61 INT, i62 INT, i63 INT, i64 INT, i65 INT, i66 INT, i67 INT, i68 INT, i69 INT, i70 INT, i71 INT, i72 INT, i73 INT, i74 INT, i75 INT, i76 INT, i77 INT, i78 INT, i79 INT, i80 INT, i81 INT, i82 INT, i83 INT, i84 INT, i85 INT, i86 INT, i87 INT, i88 INT, i89 INT, i90 INT, i91 INT, i92 INT, i93 INT, i94 INT, i95 INT, i96 INT, i97 INT, i98 INT, i99 INT);

INSERT INTO integers VALUES (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99);

INSERT INTO integers VALUES (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100);

CREATE TABLE integers2 (i0 INT, i1 INT, i2 INT, i3 INT, i4 INT, i5 INT, i6 INT, i7 INT, i8 INT, i9 INT, i10 INT, i11 INT, i12 INT, i13 INT, i14 INT, i15 INT, i16 INT, i17 INT, i18 INT, i19 INT, i20 INT, i21 INT, i22 INT, i23 INT, i24 INT, i25 INT, i26 INT, i27 INT, i28 INT, i29 INT, i30 INT, i31 INT, i32 INT, i33 INT, i34 INT, i35 INT, i36 INT, i37 INT, i38 INT, i39 INT, i40 INT, i41 INT, i42 INT, i43 INT, i44 INT, i45 INT, i46 INT, i47 INT, i48 INT, i49 INT, i50 INT, i51 INT, i52 INT, i53 INT, i54 INT, i55 INT, i56 INT, i57 INT, i58 INT, i59 INT, i60 INT, i61 INT, i62 INT, i63 INT, i64 INT, i65 INT, i66 INT, i67 INT, i68 INT, i69 INT, i70 INT, i71 INT, i72 INT, i73 INT, i74 INT, i75 INT, i76 INT, i77 INT, i78 INT, i79 INT, i80 INT, i81 INT, i82 INT, i83 INT, i84 INT, i85 INT, i86 INT, i87 INT, i88 INT, i89 INT, i90 INT, i91 INT, i92 INT, i93 INT, i94 INT, i95 INT, i96 INT, i97 INT, i98 INT, i99 INT);

INSERT INTO integers2 VALUES (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99);

INSERT INTO integers2 VALUES (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100);

COMMIT;

DROP TABLE integers;

DROP TABLE integers2;

SELECT total_blocks * block_size < 15 * 262144 FROM PRAGMA_DATABASE_SIZE();

CREATE TABLE lists (i0 INT[], i1 INT[], i2 INT[], i3 INT[], i4 INT[], i5 INT[], i6 INT[], i7 INT[], i8 INT[], i9 INT[], i10 INT[], i11 INT[], i12 INT[], i13 INT[], i14 INT[], i15 INT[], i16 INT[], i17 INT[], i18 INT[], i19 INT[], i20 INT[], i21 INT[], i22 INT[], i23 INT[], i24 INT[], i25 INT[], i26 INT[], i27 INT[], i28 INT[], i29 INT[], i30 INT[], i31 INT[], i32 INT[], i33 INT[], i34 INT[], i35 INT[], i36 INT[], i37 INT[], i38 INT[], i39 INT[], i40 INT[], i41 INT[], i42 INT[], i43 INT[], i44 INT[], i45 INT[], i46 INT[], i47 INT[], i48 INT[], i49 INT[], i50 INT[], i51 INT[], i52 INT[], i53 INT[], i54 INT[], i55 INT[], i56 INT[], i57 INT[], i58 INT[], i59 INT[], i60 INT[], i61 INT[], i62 INT[], i63 INT[], i64 INT[], i65 INT[], i66 INT[], i67 INT[], i68 INT[], i69 INT[], i70 INT[], i71 INT[], i72 INT[], i73 INT[], i74 INT[], i75 INT[], i76 INT[], i77 INT[], i78 INT[], i79 INT[], i80 INT[], i81 INT[], i82 INT[], i83 INT[], i84 INT[], i85 INT[], i86 INT[], i87 INT[], i88 INT[], i89 INT[], i90 INT[], i91 INT[], i92 INT[], i93 INT[], i94 INT[], i95 INT[], i96 INT[], i97 INT[], i98 INT[], i99 INT[]);

INSERT INTO lists VALUES ([0, NULL, 0], [1, NULL, 1], [2, NULL, 2], [3, NULL, 3], [4, NULL, 4], [5, NULL, 5], [6, NULL, 6], [7, NULL, 7], [8, NULL, 8], [9, NULL, 9], [10, NULL, 10], [11, NULL, 11], [12, NULL, 12], [13, NULL, 13], [14, NULL, 14], [15, NULL, 15], [16, NULL, 16], [17, NULL, 17], [18, NULL, 18], [19, NULL, 19], [20, NULL, 20], [21, NULL, 21], [22, NULL, 22], [23, NULL, 23], [24, NULL, 24], [25, NULL, 25], [26, NULL, 26], [27, NULL, 27], [28, NULL, 28], [29, NULL, 29], [30, NULL, 30], [31, NULL, 31], [32, NULL, 32], [33, NULL, 33], [34, NULL, 34], [35, NULL, 35], [36, NULL, 36], [37, NULL, 37], [38, NULL, 38], [39, NULL, 39], [40, NULL, 40], [41, NULL, 41], [42, NULL, 42], [43, NULL, 43], [44, NULL, 44], [45, NULL, 45], [46, NULL, 46], [47, NULL, 47], [48, NULL, 48], [49, NULL, 49], [50, NULL, 50], [51, NULL, 51], [52, NULL, 52], [53, NULL, 53], [54, NULL, 54], [55, NULL, 55], [56, NULL, 56], [57, NULL, 57], [58, NULL, 58], [59, NULL, 59], [60, NULL, 60], [61, NULL, 61], [62, NULL, 62], [63, NULL, 63], [64, NULL, 64], [65, NULL, 65], [66, NULL, 66], [67, NULL, 67], [68, NULL, 68], [69, NULL, 69], [70, NULL, 70], [71, NULL, 71], [72, NULL, 72], [73, NULL, 73], [74, NULL, 74], [75, NULL, 75], [76, NULL, 76], [77, NULL, 77], [78, NULL, 78], [79, NULL, 79], [80, NULL, 80], [81, NULL, 81], [82, NULL, 82], [83, NULL, 83], [84, NULL, 84], [85, NULL, 85], [86, NULL, 86], [87, NULL, 87], [88, NULL, 88], [89, NULL, 89], [90, NULL, 90], [91, NULL, 91], [92, NULL, 92], [93, NULL, 93], [94, NULL, 94], [95, NULL, 95], [96, NULL, 96], [97, NULL, 97], [98, NULL, 98], [99, NULL, 99]);

SELECT total_blocks * block_size < 15 * 262144 FROM PRAGMA_DATABASE_SIZE();

INSERT INTO lists VALUES ([1, NULL, 1], [2, NULL, 2], [3, NULL, 3], [4, NULL, 4], [5, NULL, 5], [6, NULL, 6], [7, NULL, 7], [8, NULL, 8], [9, NULL, 9], [10, NULL, 10], [11, NULL, 11], [12, NULL, 12], [13, NULL, 13], [14, NULL, 14], [15, NULL, 15], [16, NULL, 16], [17, NULL, 17], [18, NULL, 18], [19, NULL, 19], [20, NULL, 20], [21, NULL, 21], [22, NULL, 22], [23, NULL, 23], [24, NULL, 24], [25, NULL, 25], [26, NULL, 26], [27, NULL, 27], [28, NULL, 28], [29, NULL, 29], [30, NULL, 30], [31, NULL, 31], [32, NULL, 32], [33, NULL, 33], [34, NULL, 34], [35, NULL, 35], [36, NULL, 36], [37, NULL, 37], [38, NULL, 38], [39, NULL, 39], [40, NULL, 40], [41, NULL, 41], [42, NULL, 42], [43, NULL, 43], [44, NULL, 44], [45, NULL, 45], [46, NULL, 46], [47, NULL, 47], [48, NULL, 48], [49, NULL, 49], [50, NULL, 50], [51, NULL, 51], [52, NULL, 52], [53, NULL, 53], [54, NULL, 54], [55, NULL, 55], [56, NULL, 56], [57, NULL, 57], [58, NULL, 58], [59, NULL, 59], [60, NULL, 60], [61, NULL, 61], [62, NULL, 62], [63, NULL, 63], [64, NULL, 64], [65, NULL, 65], [66, NULL, 66], [67, NULL, 67], [68, NULL, 68], [69, NULL, 69], [70, NULL, 70], [71, NULL, 71], [72, NULL, 72], [73, NULL, 73], [74, NULL, 74], [75, NULL, 75], [76, NULL, 76], [77, NULL, 77], [78, NULL, 78], [79, NULL, 79], [80, NULL, 80], [81, NULL, 81], [82, NULL, 82], [83, NULL, 83], [84, NULL, 84], [85, NULL, 85], [86, NULL, 86], [87, NULL, 87], [88, NULL, 88], [89, NULL, 89], [90, NULL, 90], [91, NULL, 91], [92, NULL, 92], [93, NULL, 93], [94, NULL, 94], [95, NULL, 95], [96, NULL, 96], [97, NULL, 97], [98, NULL, 98], [99, NULL, 99], [100, NULL, 100]);

SELECT COUNT(*) FROM PRAGMA_STORAGE_INFO('lists') WHERE block_id IS NULL;

SELECT total_blocks FROM PRAGMA_DATABASE_SIZE();

SELECT total_blocks FROM PRAGMA_DATABASE_SIZE();

SELECT total_blocks FROM PRAGMA_DATABASE_SIZE();

SELECT total_blocks FROM PRAGMA_DATABASE_SIZE();

SELECT total_blocks FROM PRAGMA_DATABASE_SIZE();

SELECT total_blocks FROM PRAGMA_DATABASE_SIZE();

PRAGMA force_compression = 'rle';

CREATE TABLE integers (i0 INT, i1 INT, i2 INT, i3 INT, i4 INT, i5 INT, i6 INT, i7 INT, i8 INT, i9 INT, i10 INT, i11 INT, i12 INT, i13 INT, i14 INT, i15 INT, i16 INT, i17 INT, i18 INT, i19 INT, i20 INT, i21 INT, i22 INT, i23 INT, i24 INT, i25 INT, i26 INT, i27 INT, i28 INT, i29 INT, i30 INT, i31 INT, i32 INT, i33 INT, i34 INT, i35 INT, i36 INT, i37 INT, i38 INT, i39 INT, i40 INT, i41 INT, i42 INT, i43 INT, i44 INT, i45 INT, i46 INT, i47 INT, i48 INT, i49 INT, i50 INT, i51 INT, i52 INT, i53 INT, i54 INT, i55 INT, i56 INT, i57 INT, i58 INT, i59 INT, i60 INT, i61 INT, i62 INT, i63 INT, i64 INT, i65 INT, i66 INT, i67 INT, i68 INT, i69 INT, i70 INT, i71 INT, i72 INT, i73 INT, i74 INT, i75 INT, i76 INT, i77 INT, i78 INT, i79 INT, i80 INT, i81 INT, i82 INT, i83 INT, i84 INT, i85 INT, i86 INT, i87 INT, i88 INT, i89 INT, i90 INT, i91 INT, i92 INT, i93 INT, i94 INT, i95 INT, i96 INT, i97 INT, i98 INT, i99 INT);

INSERT INTO integers VALUES (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99);

SELECT total_blocks * block_size < 10 * 262144 FROM PRAGMA_DATABASE_SIZE();

SELECT total_blocks * block_size < 10 * 262144 FROM PRAGMA_DATABASE_SIZE();

SELECT total_blocks * block_size < 10 * 262144 FROM PRAGMA_DATABASE_SIZE();

SELECT total_blocks * block_size < 10 * 262144 FROM PRAGMA_DATABASE_SIZE();

SELECT total_blocks * block_size < 10 * 262144 FROM PRAGMA_DATABASE_SIZE();

SELECT total_blocks * block_size < 10 * 262144 FROM PRAGMA_DATABASE_SIZE();

SELECT total_blocks * block_size < 10 * 262144 FROM PRAGMA_DATABASE_SIZE();

CREATE TABLE integers (i0 INT, i1 INT, i2 INT, i3 INT, i4 INT, i5 INT, i6 INT, i7 INT, i8 INT, i9 INT, i10 INT, i11 INT, i12 INT, i13 INT, i14 INT, i15 INT, i16 INT, i17 INT, i18 INT, i19 INT, i20 INT, i21 INT, i22 INT, i23 INT, i24 INT, i25 INT, i26 INT, i27 INT, i28 INT, i29 INT, i30 INT, i31 INT, i32 INT, i33 INT, i34 INT, i35 INT, i36 INT, i37 INT, i38 INT, i39 INT, i40 INT, i41 INT, i42 INT, i43 INT, i44 INT, i45 INT, i46 INT, i47 INT, i48 INT, i49 INT, i50 INT, i51 INT, i52 INT, i53 INT, i54 INT, i55 INT, i56 INT, i57 INT, i58 INT, i59 INT, i60 INT, i61 INT, i62 INT, i63 INT, i64 INT, i65 INT, i66 INT, i67 INT, i68 INT, i69 INT, i70 INT, i71 INT, i72 INT, i73 INT, i74 INT, i75 INT, i76 INT, i77 INT, i78 INT, i79 INT, i80 INT, i81 INT, i82 INT, i83 INT, i84 INT, i85 INT, i86 INT, i87 INT, i88 INT, i89 INT, i90 INT, i91 INT, i92 INT, i93 INT, i94 INT, i95 INT, i96 INT, i97 INT, i98 INT, i99 INT);

INSERT INTO integers VALUES (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99);

SELECT total_blocks * block_size < 10 * 262144 FROM PRAGMA_DATABASE_SIZE();

INSERT INTO integers VALUES (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100);

CHECKPOINT;

SELECT COUNT(*) FROM PRAGMA_STORAGE_INFO('integers') WHERE block_id IS NULL;

SELECT total_blocks FROM PRAGMA_DATABASE_SIZE();

SELECT total_blocks FROM PRAGMA_DATABASE_SIZE();

SELECT total_blocks FROM PRAGMA_DATABASE_SIZE();

SELECT total_blocks FROM PRAGMA_DATABASE_SIZE();

SELECT total_blocks FROM PRAGMA_DATABASE_SIZE();

SELECT total_blocks FROM PRAGMA_DATABASE_SIZE();

CREATE TABLE strings (i0 TEXT, i1 TEXT, i2 TEXT, i3 TEXT, i4 TEXT, i5 TEXT, i6 TEXT, i7 TEXT, i8 TEXT, i9 TEXT, i10 TEXT, i11 TEXT, i12 TEXT, i13 TEXT, i14 TEXT, i15 TEXT, i16 TEXT, i17 TEXT, i18 TEXT, i19 TEXT, i20 TEXT, i21 TEXT, i22 TEXT, i23 TEXT, i24 TEXT, i25 TEXT, i26 TEXT, i27 TEXT, i28 TEXT, i29 TEXT, i30 TEXT, i31 TEXT, i32 TEXT, i33 TEXT, i34 TEXT, i35 TEXT, i36 TEXT, i37 TEXT, i38 TEXT, i39 TEXT, i40 TEXT, i41 TEXT, i42 TEXT, i43 TEXT, i44 TEXT, i45 TEXT, i46 TEXT, i47 TEXT, i48 TEXT, i49 TEXT, i50 TEXT, i51 TEXT, i52 TEXT, i53 TEXT, i54 TEXT, i55 TEXT, i56 TEXT, i57 TEXT, i58 TEXT, i59 TEXT, i60 TEXT, i61 TEXT, i62 TEXT, i63 TEXT, i64 TEXT, i65 TEXT, i66 TEXT, i67 TEXT, i68 TEXT, i69 TEXT, i70 TEXT, i71 TEXT, i72 TEXT, i73 TEXT, i74 TEXT, i75 TEXT, i76 TEXT, i77 TEXT, i78 TEXT, i79 TEXT, i80 TEXT, i81 TEXT, i82 TEXT, i83 TEXT, i84 TEXT, i85 TEXT, i86 TEXT, i87 TEXT, i88 TEXT, i89 TEXT, i90 TEXT, i91 TEXT, i92 TEXT, i93 TEXT, i94 TEXT, i95 TEXT, i96 TEXT, i97 TEXT, i98 TEXT, i99 TEXT);

INSERT INTO strings VALUES (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99);

SELECT total_blocks * block_size < 15 * 262144 FROM PRAGMA_DATABASE_SIZE();

SELECT total_blocks * block_size < 15 * 262144 FROM PRAGMA_DATABASE_SIZE();

SELECT total_blocks * block_size < 15 * 262144 FROM PRAGMA_DATABASE_SIZE();

SELECT total_blocks * block_size < 15 * 262144 FROM PRAGMA_DATABASE_SIZE();

SELECT total_blocks * block_size < 15 * 262144 FROM PRAGMA_DATABASE_SIZE();

SELECT total_blocks * block_size < 15 * 262144 FROM PRAGMA_DATABASE_SIZE();

SELECT total_blocks * block_size < 15 * 262144 FROM PRAGMA_DATABASE_SIZE();

CREATE TABLE integers (i0 INT, i1 INT, i2 INT, i3 INT, i4 INT, i5 INT, i6 INT, i7 INT, i8 INT, i9 INT, i10 INT, i11 INT, i12 INT, i13 INT, i14 INT, i15 INT, i16 INT, i17 INT, i18 INT, i19 INT, i20 INT, i21 INT, i22 INT, i23 INT, i24 INT, i25 INT, i26 INT, i27 INT, i28 INT, i29 INT, i30 INT, i31 INT, i32 INT, i33 INT, i34 INT, i35 INT, i36 INT, i37 INT, i38 INT, i39 INT, i40 INT, i41 INT, i42 INT, i43 INT, i44 INT, i45 INT, i46 INT, i47 INT, i48 INT, i49 INT, i50 INT, i51 INT, i52 INT, i53 INT, i54 INT, i55 INT, i56 INT, i57 INT, i58 INT, i59 INT, i60 INT, i61 INT, i62 INT, i63 INT, i64 INT, i65 INT, i66 INT, i67 INT, i68 INT, i69 INT, i70 INT, i71 INT, i72 INT, i73 INT, i74 INT, i75 INT, i76 INT, i77 INT, i78 INT, i79 INT, i80 INT, i81 INT, i82 INT, i83 INT, i84 INT, i85 INT, i86 INT, i87 INT, i88 INT, i89 INT, i90 INT, i91 INT, i92 INT, i93 INT, i94 INT, i95 INT, i96 INT, i97 INT, i98 INT, i99 INT);

INSERT INTO integers VALUES (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99);

SELECT total_blocks * block_size < 15 * 262144 FROM PRAGMA_DATABASE_SIZE();

INSERT INTO integers VALUES (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100);

INSERT INTO integers VALUES (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100);

INSERT INTO integers VALUES (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100);

INSERT INTO integers VALUES (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100);

INSERT INTO integers VALUES (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100);

INSERT INTO integers VALUES (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100);

SELECT total_blocks * block_size < 15 * 262144 FROM PRAGMA_DATABASE_SIZE();

PRAGMA force_compression = 'Uncompressed';

PRAGMA force_checkpoint;

CREATE TABLE strings AS SELECT i, REPEAT('X', CASE WHEN i % 17 = 0 THEN 5000 ELSE i % 7 END) AS s FROM GENERATE_SERIES(0, 150000) AS tbl(i);

CHECKPOINT;

CHECKPOINT;

SELECT AVG(STRLEN(s)), MIN(STRLEN(S)), MAX(STRLEN(S)), SUM(STRLEN(S)), MIN(S[1]), MAX(S[1]) FROM strings;

CREATE TABLE total_blocks_tbl AS SELECT total_blocks FROM PRAGMA_DATABASE_SIZE();

CREATE TABLE total_blocks_tbl AS SELECT total_blocks FROM PRAGMA_DATABASE_SIZE();

ALTER TABLE strings DROP COLUMN s;

ALTER TABLE strings ADD COLUMN s TEXT;

UPDATE strings SET s = REPEAT('X', CASE WHEN i % 17 = 0 THEN 5000 ELSE i % 7 END);

SELECT AVG(STRLEN(s)), MIN(STRLEN(S)), MAX(STRLEN(S)), SUM(STRLEN(S)), MIN(S[1]), MAX(S[1]) FROM strings;

CHECKPOINT;

CHECKPOINT;

CHECKPOINT;

SELECT AVG(STRLEN(s)), MIN(STRLEN(S)), MAX(STRLEN(S)), SUM(STRLEN(S)), MIN(S[1]), MAX(S[1]) FROM strings;

PRAGMA force_compression = 'Uncompressed';

PRAGMA force_checkpoint;

CREATE TABLE strings AS SELECT REPEAT('X', CASE WHEN i % 17 = 0 THEN 5000 ELSE i % 7 END) AS s FROM GENERATE_SERIES(0, 150000) AS tbl(i);

CHECKPOINT;

CHECKPOINT;

SELECT AVG(STRLEN(s)), MIN(STRLEN(S)), MAX(STRLEN(S)), SUM(STRLEN(S)), MIN(S[1]), MAX(S[1]) FROM strings;

CREATE TABLE total_blocks_tbl AS SELECT total_blocks FROM PRAGMA_DATABASE_SIZE();

CREATE TABLE total_blocks_tbl AS SELECT total_blocks FROM PRAGMA_DATABASE_SIZE();

DROP TABLE strings;

CREATE TABLE strings AS SELECT REPEAT('X', CASE WHEN i % 17 = 0 THEN 5000 ELSE i % 7 END) AS s FROM GENERATE_SERIES(0, 150000) AS tbl(i);

SELECT AVG(STRLEN(s)), MIN(STRLEN(S)), MAX(STRLEN(S)), SUM(STRLEN(S)), MIN(S[1]), MAX(S[1]) FROM strings;

CHECKPOINT;

CHECKPOINT;

CHECKPOINT;

CHECKPOINT;
restart;

SELECT AVG(STRLEN(s)), MIN(STRLEN(S)), MAX(STRLEN(S)), SUM(STRLEN(S)), MIN(S[1]), MAX(S[1]) FROM strings;

PRAGMA force_checkpoint;

SET force_compression = 'uncompressed';

CREATE TABLE lists AS SELECT [i] AS l FROM RANGE(0, 10000000) AS tbl(i);

CHECKPOINT;

CHECKPOINT;

SELECT MIN(l[1]), MAX(l[1]), COUNT(*) FROM lists;

SELECT MIN(l[1]), MAX(l[1]), COUNT(*) FROM lists;

CREATE TABLE lists${i} AS SELECT [i] l FROM range(10000000) tbl(i);

CREATE TABLE lists${i} AS SELECT [i] l FROM range(10000000) tbl(i);

CHECKPOINT;

CHECKPOINT;

CHECKPOINT;

PRAGMA force_checkpoint;

CREATE TABLE integers AS SELECT i FROM RANGE(0, 1000000) AS tbl(i);

CHECKPOINT;

CHECKPOINT;

SELECT MIN(i), MAX(i), COUNT(*) FROM integers;

SELECT MIN(i), MAX(i), COUNT(*) FROM integers;

ALTER TABLE integers ALTER COLUMN i SET DATA TYPE BIGINT;

CHECKPOINT;

SELECT MIN(i), MAX(i), COUNT(*) FROM integers;

ALTER TABLE integers ALTER COLUMN i SET DATA TYPE INT;

CHECKPOINT;

SELECT MIN(i), MAX(i), COUNT(*) FROM integers;

CHECKPOINT;

CHECKPOINT;

CHECKPOINT;

SELECT MIN(i), MAX(i), COUNT(*) FROM integers;

PRAGMA force_checkpoint;

CREATE TABLE integers AS SELECT i FROM RANGE(0, 10000000) AS tbl(i);

CHECKPOINT;

CHECKPOINT;

SELECT MIN(i), MAX(i), COUNT(*) FROM integers;

DROP TABLE integers;

CREATE TABLE integers AS SELECT i FROM RANGE(0, 10000000) AS tbl(i);

SELECT MIN(i), MAX(i), COUNT(*) FROM integers;

CHECKPOINT;

SELECT ROUND(total_blocks / 100.0) FROM PRAGMA_DATABASE_SIZE();

SELECT MIN(i), MAX(i), COUNT(*) FROM integers;

PRAGMA force_checkpoint;

CREATE TABLE integers AS SELECT i, i AS j FROM RANGE(0, 1000000) AS tbl(i);

CHECKPOINT;

CHECKPOINT;

SELECT MIN(j), MAX(j), COUNT(*) FROM integers;

SELECT MIN(j), MAX(j), COUNT(*) FROM integers;

ALTER TABLE integers DROP COLUMN j;

ALTER TABLE integers ADD COLUMN j INT;

UPDATE integers SET j = i;

SELECT MIN(j), MAX(j), COUNT(*) FROM integers;

CHECKPOINT;

CHECKPOINT;

CHECKPOINT;

SELECT MIN(i), MAX(i), COUNT(*) FROM integers;

PRAGMA force_checkpoint;

CREATE TABLE integers AS SELECT i FROM RANGE(0, 1000000) AS tbl(i);

CHECKPOINT;

CHECKPOINT;

SELECT MIN(i), MAX(i), COUNT(*) FROM integers;

SELECT MIN(i), MAX(i), COUNT(*) FROM integers;

UPDATE integers SET i = i;

CHECKPOINT;

SELECT MIN(i), MAX(i), COUNT(*) FROM integers;

UPDATE integers SET i = i;

CHECKPOINT;

SELECT MIN(i), MAX(i), COUNT(*) FROM integers;

CHECKPOINT;

CHECKPOINT;

CHECKPOINT;

SELECT MIN(i), MAX(i), COUNT(*) FROM integers;

PRAGMA force_checkpoint;
mode AS skip;

CREATE TABLE test (a TEXT);

INSERT INTO test VALUES (REPEAT('a', 1000000));

SELECT LENGTH(SUBSTRING(a, 0, 1000000)) FROM test;

CHECKPOINT;

SELECT LENGTH(SUBSTRING(a, 0, 1000000)) FROM test;

UPDATE test SET a = CONCAT(a, 'a');

SELECT LENGTH(SUBSTRING(a, 0, 1000000)) FROM test;

CHECKPOINT;

SELECT total_blocks FROM PRAGMA_DATABASE_SIZE();

SELECT LENGTH(SUBSTRING(a, 0, 1000000)) FROM test;

SET temp_directory = '__TEST_DIR__/max_swap_space_reached';

PRAGMA memory_limit = '1024KiB';

SET max_temp_directory_size = '0KiB';

CREATE OR REPLACE TABLE t2 AS SELECT RANDOM() FROM RANGE(0, 1000000);

SELECT "size" FROM DUCKDB_TEMPORARY_FILES();

SET max_temp_directory_size = '256KiB';

CREATE OR REPLACE TABLE t2 AS SELECT RANDOM() FROM RANGE(0, 1000000);

CREATE OR REPLACE TABLE t2 AS SELECT RANDOM() FROM RANGE(0, 1000000);

SELECT "size" FROM DUCKDB_TEMPORARY_FILES();

SET max_temp_directory_size = '4MB';

PRAGMA threads = 2;

SET preserve_insertion_order = TRUE;

CREATE OR REPLACE TABLE t2 AS SELECT RANDOM() FROM RANGE(0, 200000);

CREATE OR REPLACE TABLE t2 AS SELECT * FROM RANGE(0, 1000000);

SELECT CASE WHEN SUM("size") > 1000000 THEN TRUE ELSE CAST(CONCAT('Expected size 1000000, but got ', SUM("size")) AS UNION(msg TEXT, b BOOLEAN)) END FROM DUCKDB_TEMPORARY_FILES();

SET max_temp_directory_size = '256KiB';

SET max_temp_directory_size = '256KiB';

SELECT CURRENT_SETTING('max_temp_directory_size');

SET max_temp_directory_size = '2550KiB';

SELECT CURRENT_SETTING('max_temp_directory_size');

PRAGMA memory_limit = '2MB';

SET max_temp_directory_size = '15gb';

SET temp_directory = '__TEST_DIR__/this_directory_should_not_exist__swap_space';

SELECT CURRENT_SETTING('max_temp_directory_size');

CREATE TABLE t2 AS SELECT * FROM RANGE(0, 1000000);

SELECT CURRENT_SETTING('max_temp_directory_size');

SET temp_directory = '';

PRAGMA memory_limit = '2MB';

SELECT CURRENT_SETTING('max_temp_directory_size');

SET max_temp_directory_size = '15gb';

SELECT CURRENT_SETTING('max_temp_directory_size') AS a WHERE a = '0 bytes';

reset AS max_temp_directory_size;

SELECT CURRENT_SETTING('max_temp_directory_size');

SET temp_directory = '__TEST_DIR__';

SELECT CURRENT_SETTING('max_temp_directory_size');

SET max_temp_directory_size = '15gb';

SELECT CURRENT_SETTING('max_temp_directory_size') AS a WHERE a = '0 bytes';

SELECT CURRENT_SETTING('max_temp_directory_size');

SET temp_directory = '__TEST_DIR__/does_not_exist3';

SELECT CURRENT_SETTING('max_temp_directory_size');

SET temp_directory = '__TEST_DIR__';

SELECT CURRENT_SETTING('max_temp_directory_size');

reset AS temp_directory;

SELECT CURRENT_SETTING('max_temp_directory_size');

reset AS max_temp_directory_size;

SET temp_directory = '__TEST_DIR__/does_not_exist4';

SELECT CURRENT_SETTING('max_temp_directory_size');

CREATE TABLE t2 AS SELECT * FROM RANGE(0, 1000000);

SELECT CURRENT_SETTING('max_temp_directory_size') AS a WHERE a = '0 bytes';

SELECT CURRENT_SETTING('temp_directory').split('/')[-1];

SET temp_directory = '';

PRAGMA memory_limit = '2MB';

SELECT CURRENT_SETTING('max_temp_directory_size');

SET max_temp_directory_size = '15GB';

SELECT CURRENT_SETTING('max_temp_directory_size') AS a WHERE a = '0 bytes';

RESET AS max_temp_directory_size;

SELECT CURRENT_SETTING('max_temp_directory_size');

SET temp_directory = '__TEST_DIR__';

SELECT CURRENT_SETTING('max_temp_directory_size');

SET max_temp_directory_size = '15GB';

SELECT CURRENT_SETTING('max_temp_directory_size') AS a WHERE a = '0 bytes';

SELECT CURRENT_SETTING('max_temp_directory_size');

SET temp_directory = '__TEST_DIR__/does_not_exist5';

SELECT CURRENT_SETTING('max_temp_directory_size');

SET temp_directory = '__TEST_DIR__';

SELECT CURRENT_SETTING('max_temp_directory_size');

RESET AS temp_directory;

SELECT CURRENT_SETTING('max_temp_directory_size');

RESET AS max_temp_directory_size;

SET temp_directory = '__TEST_DIR__/does_not_exist6';

SELECT CURRENT_SETTING('max_temp_directory_size');

CREATE TABLE t2 AS SELECT * FROM RANGE(0, 1000000);

SELECT CURRENT_SETTING('max_temp_directory_size') AS a WHERE a = '0 bytes';

SET temp_directory = '__TEST_DIR__/max_swap_space_reached';

PRAGMA max_temp_directory_size = '-1';

SELECT CURRENT_SETTING('max_temp_directory_size');

CREATE TABLE tbl AS FROM
range(100) t1(i)
CROSS JOIN range(100) t2(j)
CROSS JOIN range(100) t3(k)
CROSS JOIN range(100) t4(l)
CROSS JOIN range(5) t5(m)
SELECT row_number() OVER () AS i, random() AS random_value;

SET max_temp_directory_size = '1GB';

SET memory_limit = '1GB';

SELECT * FROM tbl ORDER BY random_value;

SET temp_directory = '__TEST_DIR__/test_temp_dir';

SET memory_limit = '8MB';

SET enable_external_access = FALSE;

SET temp_directory = '__TEST_DIR__/new_temp_dir';

RESET AS temp_directory;

SET temp_directory = '';

SELECT value FROM DUCKDB_SETTINGS() WHERE name = 'temp_directory';

SET temp_directory = NULL;

SELECT value FROM DUCKDB_SETTINGS() WHERE name = 'temp_directory';

PRAGMA force_compression = '${compression}';

CALL dsdgen(sf=1);

CHECKPOINT AS restart;

CHECKPOINT AS restart;

CHECKPOINT AS restart;

CHECKPOINT AS restart;

PRAGMA force_compression = '${compression}';

CALL dbgen(sf=1);

CHECKPOINT AS restart;

SELECT MIN(l_orderkey), MAX(l_orderkey), AVG(l_orderkey), COUNT(l_orderkey) FROM lineitem;

SELECT MIN(l_partkey), MAX(l_partkey), AVG(l_partkey), COUNT(l_partkey) FROM lineitem;

SELECT MIN(l_suppkey), MAX(l_suppkey), AVG(l_suppkey), COUNT(l_suppkey) FROM lineitem;

SELECT MIN(l_linenumber), MAX(l_linenumber), AVG(l_linenumber), COUNT(l_linenumber) FROM lineitem;

SELECT MIN(l_quantity), MAX(l_quantity), AVG(l_quantity), COUNT(l_quantity) FROM lineitem;

SELECT MIN(l_extendedprice), MAX(l_extendedprice), AVG(l_extendedprice), COUNT(l_extendedprice) FROM lineitem;

SELECT MIN(l_discount), MAX(l_discount), AVG(l_discount), COUNT(l_discount) FROM lineitem;

SELECT MIN(l_tax), MAX(l_tax), AVG(l_tax), COUNT(l_tax) FROM lineitem;

SELECT MIN(l_returnflag), MAX(l_returnflag), COUNT(l_returnflag) FROM lineitem;

SELECT MIN(l_linestatus), MAX(l_linestatus), COUNT(l_linestatus) FROM lineitem;

SELECT MIN(l_shipdate), MAX(l_shipdate), COUNT(l_shipdate) FROM lineitem;

SELECT MIN(l_commitdate), MAX(l_commitdate), COUNT(l_commitdate) FROM lineitem;

SELECT MIN(l_receiptdate), MAX(l_receiptdate), COUNT(l_receiptdate) FROM lineitem;

SELECT MIN(l_shipinstruct), MAX(l_shipinstruct), COUNT(l_shipinstruct) FROM lineitem;

SELECT MIN(l_shipmode), MAX(l_shipmode), COUNT(l_shipmode) FROM lineitem;

SELECT MIN(l_comment), MAX(l_comment), COUNT(l_comment) FROM lineitem;

SELECT MIN(p_partkey), MAX(p_partkey), AVG(p_partkey), COUNT(p_partkey) FROM part;

SELECT MIN(p_name), MAX(p_name), COUNT(p_name) FROM part;

SELECT MIN(p_mfgr), MAX(p_mfgr), COUNT(p_mfgr) FROM part;

SELECT MIN(p_brand), MAX(p_brand), COUNT(p_brand) FROM part;

SELECT MIN(p_type), MAX(p_type), COUNT(p_type) FROM part;

SELECT MIN(p_size), MAX(p_size), AVG(p_size), COUNT(p_size) FROM part;

SELECT MIN(p_container), MAX(p_container), COUNT(p_container) FROM part;

SELECT MIN(p_retailprice), MAX(p_retailprice), AVG(p_retailprice), COUNT(p_retailprice) FROM part;

SELECT MIN(p_comment), MAX(p_comment), COUNT(p_comment) FROM part;

SELECT MIN(p_comment), MAX(p_comment), COUNT(p_comment) FROM part;

SELECT MIN(p_comment), MAX(p_comment), COUNT(p_comment) FROM part;

CREATE TABLE bits (b BIT);

CREATE TABLE bits (b BIT);

SELECT * FROM bits;

CREATE TABLE blobs (b BLOB);

CREATE TABLE blobs (b BLOB);

SELECT * FROM blobs;

CREATE TABLE hugeints (h INT128);

CREATE TABLE hugeints (h INT128);

SELECT * FROM hugeints;

SELECT * FROM hugeints WHERE h = 42;

SELECT h FROM hugeints WHERE h < 10 ORDER BY 1;

CREATE TABLE interval (t INTERVAL);

CREATE TABLE interval (t INTERVAL);

SELECT * FROM interval;

SELECT t FROM interval WHERE t = INTERVAL '1' DAY;

SELECT t FROM interval WHERE t >= INTERVAL '1' DAY ORDER BY 1;

SELECT t FROM interval WHERE t > INTERVAL '10' YEAR ORDER BY 1;

CREATE TABLE timestamp (sec TIMESTAMP_S, milli TIMESTAMP_MS, micro TIMESTAMP, nano TIMESTAMP_NS);

INSERT INTO timestamp VALUES (NULL, NULL, NULL, NULL);

INSERT INTO timestamp VALUES ('2008-01-01 00:00:01', '2008-01-01 00:00:01.594', '2008-01-01 00:00:01.88926', '2008-01-01 00:00:01.889268321');

INSERT INTO timestamp VALUES ('2008-01-01 00:00:51', '2008-01-01 00:00:01.894', '2008-01-01 00:00:01.99926', '2008-01-01 00:00:01.999268321');

INSERT INTO timestamp VALUES ('2008-01-01 00:00:51', '2008-01-01 00:00:01.894', '2008-01-01 00:00:01.99926', '2008-01-01 00:00:01.999268321');

SELECT * FROM timestamp ORDER BY sec;

SELECT * FROM timestamp WHERE micro = CAST('2008-01-01 00:00:01.88926' AS TIMESTAMP) ORDER BY micro;

SELECT * FROM timestamp WHERE micro = CAST('2020-01-01 00:00:01.88926' AS TIMESTAMP) ORDER BY micro;

CREATE TABLE uhugeints (h UINT128);

CREATE TABLE uhugeints (h UINT128);

SELECT * FROM uhugeints;

SELECT * FROM uhugeints WHERE h = 42;

SELECT h FROM uhugeints WHERE h < 10 ORDER BY 1;

CREATE TABLE unsigned (a UTINYINT, b USMALLINT, c UINTEGER, d UBIGINT);

CREATE TABLE unsigned (a UTINYINT, b USMALLINT, c UINTEGER, d UBIGINT);

SELECT * FROM unsigned;

SELECT * FROM unsigned WHERE a = 42;

SELECT a FROM unsigned WHERE a < 10 ORDER BY 1;

SELECT * FROM unsigned WHERE b = 42;

SELECT b FROM unsigned WHERE b < 10 ORDER BY 1;

SELECT * FROM unsigned WHERE c = 42;

SELECT c FROM unsigned WHERE c < 10 ORDER BY 1;

SELECT * FROM unsigned WHERE d = 42;

SELECT d FROM unsigned WHERE d < 10 ORDER BY 1;

UPDATE unsigned SET a = 10, b = 9, c = 8, d = 7 WHERE a = 1;

SELECT * FROM unsigned;

SELECT * FROM unsigned;

CREATE TABLE uuids (u UUID);

CREATE TABLE uuids (u UUID);

SELECT * FROM uuids;

SELECT * FROM uuids WHERE u = 'A0EEBC99-9C0B-4EF8-BB6D-6BB9BD380A11';

SELECT * FROM uuids WHERE u = 'a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11';

SELECT u FROM uuids WHERE u > '10203040-5060-7080-0102-030405060708' ORDER BY 1;

CREATE TABLE a (i INT[] DEFAULT ([1, 2, 3]));

INSERT INTO a VALUES (DEFAULT);

SELECT * FROM a;

INSERT INTO a VALUES (DEFAULT);

SELECT * FROM a;

CREATE TABLE test_table (id INT, emb REAL[], emb_arr REAL[3]);

INSERT INTO test_table (id) VALUES (42);

CHECKPOINT;

SELECT * FROM test_table;

DROP TABLE test_table;

PRAGMA force_compression = '${compression}';

CREATE TABLE a AS SELECT i AS id, [1, 2, 3] AS l FROM RANGE(0, 1000000) AS t(i);

CREATE TABLE b AS SELECT i AS id, CASE WHEN id % 2 = 0 THEN NULL ELSE [1, 2, 3] END AS l FROM RANGE(0, 1000000) AS t(i);

CREATE TABLE c AS SELECT i AS id, CASE WHEN id % 2 = 0 THEN [] ELSE [1, 2, 3] END AS l FROM RANGE(0, 1000000) AS t(i);

SELECT MIN(x), MAX(x), SUM(x), COUNT(*) FROM (SELECT UNNEST(l) FROM a) AS t(x);

SELECT MIN(x), MAX(x), SUM(x), COUNT(*) FROM (SELECT UNNEST(l) FROM b) AS t(x);

SELECT MIN(x), MAX(x), SUM(x), COUNT(*) FROM (SELECT UNNEST(l) FROM c) AS t(x);

SELECT MIN(x), MAX(x), SUM(x), COUNT(*) FROM (SELECT UNNEST(l) FROM a) AS t(x);

SELECT MIN(x), MAX(x), SUM(x), COUNT(*) FROM (SELECT UNNEST(l) FROM a WHERE id >= 500000) AS t(x);

SELECT MIN(x), MAX(x), SUM(x), COUNT(*) FROM (SELECT UNNEST(l) FROM b) AS t(x);

SELECT MIN(x), MAX(x), SUM(x), COUNT(*) FROM (SELECT UNNEST(l) FROM b WHERE id >= 500000) AS t(x);

SELECT MIN(x), MAX(x), SUM(x), COUNT(*) FROM (SELECT UNNEST(l) FROM c) AS t(x);

SELECT MIN(x), MAX(x), SUM(x), COUNT(*) FROM (SELECT UNNEST(l) FROM c WHERE id >= 500000) AS t(x);

SELECT DISTINCT column_path FROM PRAGMA_STORAGE_INFO('a') ORDER BY ALL;

DROP TABLE a;

DROP TABLE b;

PRAGMA force_compression = '${compression}';

CREATE TABLE a (id INT PRIMARY KEY, c INT[]);

INSERT INTO a (VALUES (1, [1, 2, 3])) AS restart;

SELECT * FROM a WHERE id = 1;

INSERT INTO a VALUES (2, NULL);

INSERT INTO a VALUES (3, [NULL]);

INSERT INTO a VALUES (4, [4, 5, NULL, 6]);

SELECT * FROM a WHERE id = 2;

SELECT * FROM a WHERE id = 3;

SELECT * FROM a WHERE id = 4;

DROP TABLE a;

CREATE TABLE a (id INT, c INT[]);

INSERT INTO a VALUES (1, [1, 2, 3]);

INSERT INTO a VALUES (2, NULL);

INSERT INTO a VALUES (3, [NULL]);

INSERT INTO a VALUES (4, [4, 5, NULL, 6]);

CREATE INDEX a_index ON a(id);

SELECT * FROM a WHERE id = 1;

SELECT * FROM a WHERE id = 2;

SELECT * FROM a WHERE id = 3;

SELECT * FROM a WHERE id = 4;

INSERT INTO a VALUES (1, [4, 5, NULL]);

INSERT INTO a VALUES (1, NULL);

INSERT INTO a VALUES (1, [NULL]);

INSERT INTO a VALUES (1, [7, 8, 9, 10, 11, 12, 13, 14, 15]);

SELECT * FROM a WHERE id = 1 ORDER BY c[1] NULLS FIRST;

CREATE TABLE a (b INT[]);
restart;

SELECT * FROM a;

INSERT INTO a VALUES ([1, 2]), (NULL), ([3, 4, 5, 6]), ([NULL, 7]);

SELECT * FROM a;

SELECT * FROM a;

DELETE FROM a WHERE b[1] = 1;

SELECT * FROM a;

SELECT * FROM a;

CREATE TABLE b (b INT[][]);

INSERT INTO b VALUES ([[1, 2], [3, 4]]), (NULL), ([NULL, [7, 8, NULL], [2, 3]]), ([[NULL, 6], NULL, [1, 2, NULL]]);

SELECT * FROM b;

SELECT * FROM b;

DELETE FROM b WHERE b[1][1] = 1;

SELECT * FROM b;

SELECT * FROM b;

CREATE TABLE c (b TEXT[]);

INSERT INTO c VALUES (['hello', 'world']), (NULL), (['fejwfoaejwfoijwafew', 'b', 'c']), ([NULL, 'XXXXXXXXXXXXXXXXXXXXXXXX']);

SELECT * FROM c;

SELECT * FROM c;

CREATE TABLE a (b MAP(INT, INT));

INSERT INTO a VALUES (MAP([1], [2])), (MAP([1, 2, 3], [4, 5, 6]));

SELECT * FROM a;

SELECT * FROM a;

PRAGMA force_compression = '${compression}';

CREATE TABLE a AS SELECT {'r1': {'a': 'hello', 'b': 3}, 'r2': {'a': 'world', 'b': 17, 'c': NULL}} AS c;

SELECT * FROM a;

SELECT c['r1']['a'] FROM a;

PRAGMA force_compression = '${compression}';

SELECT * FROM a;

SELECT c['r1']['a'] FROM a;

UPDATE a SET c = {'r1': {'a': 'blabla', 'b': 3}, 'r2': {'a': 'world', 'b': 18, 'c': NULL}};

SELECT * FROM a;

SELECT c['r1']['a'] FROM a;

PRAGMA force_compression = '${compression}';

SELECT * FROM a;

SELECT c['r1']['a'] FROM a;

INSERT INTO a VALUES ({'r1': {'a': NULL, 'b': 3}, 'r2': {'a': NULL, 'b': 17, 'c': NULL}});

SELECT * FROM a;

INSERT INTO a VALUES ({'r1': NULL, 'r2': {'a': NULL, 'b': 17, 'c': NULL}});

SELECT * FROM a;

INSERT INTO a VALUES ({'r1': NULL, 'r2': NULL});

SELECT * FROM a;

INSERT INTO a VALUES (NULL);

SELECT * FROM a;

PRAGMA force_compression = '${compression}';

SELECT * FROM a;

SELECT column_path, stats FROM PRAGMA_STORAGE_INFO('a') WHERE stats LIKE '%[Min: -2147483648, Max: -2147483648]%';

CREATE TABLE structs AS SELECT -i - 1 AS id, {'i': -i - 1, 'j': CAST(i AS TEXT)} AS c FROM RANGE(0, 10000000) AS tbl(i);

INSERT INTO structs SELECT i AS id, {'i': i, 'j': CAST(i AS TEXT)} AS c FROM RANGE(0, 1000) AS tbl(i);

SELECT COUNT(*), COUNT(c['i']), COUNT(c['j']) FROM structs;

SELECT COUNT(*) FROM structs WHERE c['i'] >= 0;

SELECT column_path, stats FROM PRAGMA_STORAGE_INFO('structs') WHERE stats LIKE '%[Min: -2147483648, Max: -2147483648]%';

UPDATE structs SET id = NULL, c = {'i': NULL, 'j': CAST(c['i'] AS TEXT)} WHERE c['i'] >= 0 AND c['i'] % 4 = 0;

SELECT column_path, stats FROM PRAGMA_STORAGE_INFO('structs') WHERE stats LIKE '%[Min: -2147483648, Max: -2147483648]%';

UPDATE structs SET c = {'i': c['i'], 'j': NULL} WHERE c['i'] >= 0 AND c['i'] % 4 = 1;

SELECT column_path, stats FROM PRAGMA_STORAGE_INFO('structs') WHERE stats LIKE '%[Min: -2147483648, Max: -2147483648]%';

UPDATE structs SET id = NULL, c = {'i': NULL, 'j': NULL} WHERE c['i'] >= 0 AND c['i'] % 4 = 2;

SELECT column_path, stats FROM PRAGMA_STORAGE_INFO('structs') WHERE stats LIKE '%[Min: -2147483648, Max: -2147483648]%';

UPDATE structs SET id = NULL, c = NULL WHERE c['i'] >= 0 AND c['i'] % 4 = 3;

SELECT column_path, stats FROM PRAGMA_STORAGE_INFO('structs') WHERE stats LIKE '%[Min: -2147483648, Max: -2147483648]%';

SELECT COUNT(*) FROM structs WHERE c IS NULL;

SELECT COUNT(*) FROM structs WHERE c['i'] IS NULL;

SELECT COUNT(*) FROM structs WHERE c['j'] IS NULL;

SELECT COUNT(c['j']) FROM structs WHERE (c['i'] >= 0 OR c['i'] IS NULL);

SELECT SUM(id) FROM structs WHERE id >= 0;

SELECT SUM(c['i']) FROM structs WHERE c['i'] >= 0;

SELECT SUM(id) FROM structs;

SELECT SUM(c['i']) FROM structs;

SELECT COUNT(c['j']), MIN(c['j']), MAX(c['j']) FROM structs WHERE (c['i'] >= 0 OR c['i'] IS NULL);

PRAGMA force_checkpoint;

CREATE TABLE structs AS SELECT {'i': i, 'j': CAST(i AS TEXT)} AS c FROM RANGE(0, 10000000) AS tbl(i);

CHECKPOINT;

CHECKPOINT;

SELECT MIN(c['i']), MAX(c['i']), COUNT(*) FROM structs;

SELECT MIN(c['i']), MAX(c['i']), COUNT(*) FROM structs;

DROP TABLE structs;

CREATE TABLE structs AS SELECT {'i': i, 'j': CAST(i AS TEXT)} AS c FROM RANGE(0, 10000000) AS tbl(i);

SELECT MIN(c['i']), MAX(c['i']), COUNT(*) FROM structs;

CHECKPOINT;

CHECKPOINT;

CHECKPOINT;

SELECT MIN(c['i']), MAX(c['i']), COUNT(*) FROM structs;

CREATE TABLE a (b STRUCT(i INT, j INT));

INSERT INTO a VALUES ({'i': 1, 'j': 2}), (NULL), ({'i': NULL, 'j': 2}), (ROW(1, NULL));

SELECT * FROM a;

SELECT COUNT(*) FROM a WHERE b IS NULL;

SELECT * FROM a;

SELECT COUNT(*) FROM a WHERE b IS NULL;

DELETE FROM a WHERE (b).i = 1;

SELECT * FROM a;

SELECT * FROM a;

SELECT COUNT(*) FROM a WHERE b IS NULL;

UPDATE a SET b = {'i': 7, 'j': 9} WHERE b IS NULL;

SELECT * FROM a;

SELECT COUNT(*) FROM a WHERE b IS NULL;

SELECT * FROM a;

SELECT COUNT(*) FROM a WHERE b IS NULL;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

CREATE TABLE a (b STRUCT(i INT, j INT));

INSERT INTO a VALUES ({'i': 1, 'j': 2}), (NULL), ({'i': NULL, 'j': 2}), (ROW(1, NULL));

SELECT * FROM a;

SELECT COUNT(*) FROM a WHERE b IS NULL;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

SELECT * FROM a;

SELECT COUNT(*) FROM a WHERE b IS NULL;

DELETE FROM a WHERE (b).i = 1;

SELECT * FROM a;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

SELECT * FROM a;

SELECT COUNT(*) FROM a WHERE b IS NULL;

UPDATE a SET b = {'i': 7, 'j': 9} WHERE b IS NULL;

SELECT * FROM a;

SELECT COUNT(*) FROM a WHERE b IS NULL;

SELECT * FROM a;

SELECT COUNT(*) FROM a WHERE b IS NULL;

SET force_compression = 'dictionary';

CREATE OR REPLACE TABLE "everflow_daily" AS SELECT CASE WHEN i % 10 = 0 THEN CAST(UUID() AS TEXT) ELSE 'N/A' END AS sub4 FROM RANGE(0, 10000) AS t(i);

UPDATE everflow_daily SET sub4 = NULL WHERE sub4 = 'N/A';

SELECT COUNT(*) FROM everflow_daily WHERE sub4 = 'N/A';

CREATE TABLE integers AS SELECT * FROM RANGE(0, 10000000) AS t(i);

SET threads = 1;

SET memory_limit = '8MB';

SELECT COUNT(*), SUM(i) FROM integers;

UPDATE integers SET i = i + 1;

SELECT COUNT(*), SUM(i) FROM integers;

UPDATE integers SET i = i + 1 WHERE i % 2 = 0;

SELECT COUNT(*), SUM(i) FROM integers;

BEGIN;

UPDATE integers SET i = i + 1;

SET threads = 1;

CREATE TABLE integers AS SELECT * FROM RANGE(0, 10000000) AS t(i);

SET memory_limit = '16MB';

BEGIN;

SELECT COUNT(*), SUM(i) FROM integers;

UPDATE integers SET i = i + 1;

SELECT COUNT(*), SUM(i) FROM integers;

SELECT COUNT(*), SUM(i) FROM integers;

UPDATE integers SET i = i + 1 WHERE i % 2 = 0;

SELECT COUNT(*), SUM(i) FROM integers;

SELECT COUNT(*), SUM(i) FROM integers;

BEGIN;

CREATE TABLE integers AS SELECT * FROM GENERATE_SERIES(0, 10000000, 1) AS tbl(i);

SELECT SUM(i) FROM integers;

UPDATE integers SET i = i + 1;

SELECT SUM(i) FROM integers;

UPDATE integers SET i = i + 1;

SELECT SUM(i) FROM integers;

UPDATE integers SET i = i + 1;

SELECT SUM(i) FROM integers;

UPDATE integers SET i = i + 1;

SELECT SUM(i) FROM integers;

UPDATE integers SET i = i + 1;

SELECT SUM(i) FROM integers;

UPDATE integers SET i = i + 1;

SELECT SUM(i) FROM integers;

UPDATE integers SET i = i + 1;

SELECT SUM(i) FROM integers;

UPDATE integers SET i = i + 1;

SELECT SUM(i) FROM integers;

UPDATE integers SET i = i + 1;

SELECT SUM(i) FROM integers;

UPDATE integers SET i = i + 1;

SELECT SUM(i) FROM integers;

COMMIT;

SELECT SUM(i) FROM integers;

CREATE TABLE test (a INT, b INT);

INSERT INTO test VALUES (11, 22), (NULL, 22), (12, 21);

UPDATE test SET b = b + 1 WHERE a = 11;

SELECT a, b FROM test ORDER BY a;

UPDATE test SET b = b + 1 WHERE a = 11;

SELECT a, b FROM test ORDER BY a;

UPDATE test SET b = NULL WHERE a = 11;

SELECT a, b FROM test ORDER BY a;

SELECT a, b FROM test ORDER BY a;

CREATE TABLE test (a INT, b INT);

INSERT INTO test VALUES (11, 22), (13, 22), (12, 21);

UPDATE test SET b = b + 1 WHERE a = 11;

SELECT a, b FROM test ORDER BY a;

UPDATE test SET b = b + 1 WHERE a = 11;

SELECT a, b FROM test ORDER BY a;

SELECT a, b FROM test ORDER BY a;

CREATE TABLE test (pk INT);

INSERT INTO test SELECT * FROM GENERATE_SERIES(0, 1000000);

CHECKPOINT;
restart;

DELETE FROM test WHERE pk > 738645 AND pk < 978908;

SELECT COUNT(*), SUM(pk) FROM test;

DELETE FROM test WHERE pk > 282475 AND pk < 522738;

SELECT COUNT(*), SUM(pk) FROM test;

INSERT INTO test SELECT * FROM GENERATE_SERIES(1201414, 1201514);

SELECT COUNT(*), SUM(pk) FROM test;

SELECT COUNT(*), SUM(pk) FROM test;

CHECKPOINT;

SELECT COUNT(*), SUM(pk) FROM test;

CREATE TABLE uuids (i TEXT);

CREATE TABLE uuids (i TEXT);

DROP TABLE IF EXISTS integers;

INSERT INTO uuids SELECT CAST(UUID() AS TEXT) FROM RANGE(0, 1000000);

CHECKPOINT;

DELETE FROM uuids;

CHECKPOINT;

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (1), (2), (3);

CHECKPOINT;

CHECKPOINT;

CHECKPOINT;

SELECT * FROM integers;

SELECT * FROM uuids;

DELETE FROM integers;

INSERT INTO integers SELECT * FROM RANGE(0, 1000000);

SELECT SUM(i) FROM integers;

SELECT SUM(i) FROM integers;

CREATE TABLE integers (i INT PRIMARY KEY);

INSERT INTO integers SELECT * FROM RANGE(0, 1000000);

DELETE FROM integers WHERE i < 500000;

SELECT * FROM integers WHERE i = 600000;

CREATE TABLE integers (i INT);

INSERT INTO integers SELECT * FROM RANGE(0, 1000000);

SET max_vacuum_tasks = 99;

SELECT SUM(i) FROM integers WHERE i % 2 <> 0;

CHECKPOINT;

SELECT COUNT(DISTINCT row_group_id) > 6 AND COUNT(DISTINCT row_group_id) <= 10 FROM PRAGMA_STORAGE_INFO('integers');

DELETE FROM integers WHERE i % 2 = 0;

CHECKPOINT;

SELECT SUM(i) FROM integers;

SELECT COUNT(DISTINCT row_group_id) > 3 AND COUNT(DISTINCT row_group_id) <= 6 FROM PRAGMA_STORAGE_INFO('integers');

CREATE TABLE integers (i INT);

CREATE TABLE integers (i INT);

INSERT INTO integers SELECT * FROM RANGE(0, 1000000);

SELECT SUM(i) FROM integers;

DELETE FROM integers WHERE i % 2 = 0;

CHECKPOINT;

DELETE FROM integers WHERE i % 2 <> 0;

SELECT SUM(i) FROM integers;

SELECT SUM(i) FROM integers;

CREATE TABLE integers (i INT);

INSERT INTO integers SELECT * FROM RANGE(0, 1000000);

SELECT SUM(i) FROM integers WHERE i % 3 <> 0;

CHECKPOINT;

SELECT COUNT(DISTINCT row_group_id) > 6 AND COUNT(DISTINCT row_group_id) <= 10 FROM PRAGMA_STORAGE_INFO('integers');

DELETE FROM integers WHERE i % 3 = 0;

CHECKPOINT;

SELECT SUM(i) FROM integers;

SELECT COUNT(DISTINCT row_group_id) > 4 AND COUNT(DISTINCT row_group_id) <= 7 FROM PRAGMA_STORAGE_INFO('integers');

CREATE TABLE integers (i INT);

INSERT INTO integers SELECT * FROM RANGE(0, 1000000);

SELECT COUNT(DISTINCT row_group_id) > 6 AND COUNT(DISTINCT row_group_id) <= 10 FROM PRAGMA_STORAGE_INFO('integers');

DELETE FROM integers WHERE i % 2 AND i < 157353;

SELECT COUNT(*), SUM(i), MIN(i), MAX(i) FROM integers;

DELETE FROM integers WHERE i >= 157353 AND i < 433427;

SELECT COUNT(*), SUM(i), MIN(i), MAX(i) FROM integers;

DELETE FROM integers WHERE (i // 4973) % 2 = 0 AND i >= 433427 AND i < 512933;

SELECT COUNT(*), SUM(i), MIN(i), MAX(i) FROM integers;

DELETE FROM integers WHERE i % 7 = 0 AND i >= 512933 AND i < 721377;

SELECT COUNT(*), SUM(i), MIN(i), MAX(i) FROM integers;

DELETE FROM integers WHERE CAST(HASH(i) AS DOUBLE) % 3 = 0 AND i >= 721377 AND i < 909999;

SELECT COUNT(*), SUM(i), MIN(i), MAX(i) FROM integers;

DELETE FROM integers WHERE CAST(HASH(i) AS DOUBLE) % 2 = 0 AND i >= 909999;

SELECT COUNT(*), SUM(i), MIN(i), MAX(i) FROM integers;

CHECKPOINT;

SELECT COUNT(*), SUM(i), MIN(i), MAX(i) FROM integers;

SELECT COUNT(DISTINCT row_group_id) >= 4 AND COUNT(DISTINCT row_group_id) <= 7 FROM PRAGMA_STORAGE_INFO('integers');

SELECT COUNT(*), SUM(i) FROM integers;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

CREATE TABLE blobs (b BLOB);

CREATE TABLE blobs (b BLOB);

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

SELECT * FROM blobs;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

CREATE TABLE test (a INT CHECK (a < 10), b INT CHECK (CASE WHEN b < 10 THEN a < b ELSE a + b < 100 END));
restart;

INSERT INTO test VALUES (3, 7);

INSERT INTO test VALUES (12, 13);

INSERT INTO test VALUES (5, 3);

INSERT INTO test VALUES (9, 90);

INSERT INTO test VALUES (9, 99);

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

CREATE TABLE integers (i INT, j INT);

INSERT INTO integers VALUES (1, 1), (2, 2), (3, 3);

CREATE UNIQUE INDEX i_index ON integers(i);

EXPLAIN ANALYZE SELECT i, j FROM integers WHERE i = 1;

SELECT i, j FROM integers WHERE i = 1;

INSERT INTO integers VALUES (1, 1);

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

EXPLAIN ANALYZE SELECT i, j FROM integers WHERE i = 1;

SELECT i, j FROM integers WHERE i = 1;

INSERT INTO integers VALUES (1, 1);

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

DROP INDEX i_index;

INSERT INTO integers VALUES (1, 1);

DROP TABLE integers;
restart;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

CREATE TABLE integers (i INT, j INT);

INSERT INTO integers VALUES (1, 1), (2, 2), (3, 3);

CREATE UNIQUE INDEX i_index ON integers USING art((i + j));

SELECT i, j FROM integers WHERE i + j = 2;

INSERT INTO integers VALUES (1, 1);

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

SELECT i, j FROM integers WHERE i + j = 2;

INSERT INTO integers VALUES (1, 1);

DROP INDEX i_index;

INSERT INTO integers VALUES (1, 1);

DROP TABLE integers;
restart;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

CREATE TABLE integers (i INT, j INT);

INSERT INTO integers VALUES (1, 1), (2, 2), (3, 3);

CREATE UNIQUE INDEX i_index ON integers USING art((j + i));

SELECT i, j FROM integers WHERE j + i = 2;

INSERT INTO integers VALUES (1, 1);

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

SELECT i, j FROM integers WHERE j + i = 2;

INSERT INTO integers VALUES (1, 1);

DROP INDEX i_index;

INSERT INTO integers VALUES (1, 1);

DROP TABLE integers;
restart;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

CREATE TABLE integers (i INT, j INT);

INSERT INTO integers VALUES (1, 1), (2, 2), (3, 3);

CREATE UNIQUE INDEX i_index ON integers USING art((j + i), j, i);
restart;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

INSERT INTO integers VALUES (1, 1);

DROP INDEX i_index;

PRAGMA disable_checkpoint_on_shutdown;

SET checkpoint_threshold = '999999GB';

BEGIN;

CREATE TABLE bla AS SELECT 42;

DROP TABLE bla;

CREATE TABLE bla AS SELECT 84;

COMMIT;
restart;

PRAGMA disable_checkpoint_on_shutdown;

SET checkpoint_threshold = '999999GB';

SELECT * FROM bla;

DROP TABLE bla;

BEGIN;

CREATE TABLE bla AS SELECT 42;

DROP TABLE bla;

COMMIT;
restart;

PRAGMA disable_checkpoint_on_shutdown;

SET checkpoint_threshold = '999999GB';

BEGIN;

CREATE TABLE bla AS SELECT 84;

ALTER TABLE bla RENAME TO bla2;

ALTER TABLE bla RENAME TO bla2;

PRAGMA disable_checkpoint_on_shutdown;

SET checkpoint_threshold = '999999GB';

SELECT * FROM bla2;

BEGIN;

CREATE OR REPLACE TABLE bla AS SELECT 84;

CREATE OR REPLACE TABLE bla AS SELECT 42;

CREATE OR REPLACE TABLE bla AS SELECT 42;

SELECT * FROM bla;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

CREATE SCHEMA test;

CREATE TABLE test.test (a INT, b INT);

INSERT INTO test.test VALUES (11, 22), (13, 22);

DROP TABLE test.test;

DROP SCHEMA test;

CREATE SCHEMA test;

CREATE TABLE test.test (a INT, b INT);

INSERT INTO test.test VALUES (11, 22), (13, 22);
restart;

PRAGMA disable_checkpoint_on_shutdown;

DROP TABLE test.test;

DROP TABLE test.test;

CREATE SCHEMA test;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

CREATE TABLE test (a INT, b TEXT);

SELECT COUNT(*) FROM test;

SELECT COUNT(*) FROM test;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

CREATE TABLE hugeints (h INT128);

CREATE TABLE hugeints (h INT128);

PRAGMA disable_checkpoint_on_shutdown;

SELECT * FROM hugeints;

SELECT * FROM hugeints WHERE h = 42;

SELECT h FROM hugeints WHERE h < 10 ORDER BY 1;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

CREATE TABLE interval (t INTERVAL);

CREATE TABLE interval (t INTERVAL);

PRAGMA disable_checkpoint_on_shutdown;

SELECT * FROM interval;

SELECT t FROM interval WHERE t = INTERVAL '1' DAY;

SELECT t FROM interval WHERE t >= INTERVAL '1' DAY ORDER BY 1;

SELECT t FROM interval WHERE t > INTERVAL '10' YEAR ORDER BY 1;

ATTACH '__TEST_DIR__/attach_no_wal.db';

CREATE TABLE attach_no_wal.integers (i INT);

INSERT INTO attach_no_wal.integers SELECT * FROM RANGE(0, 10000);

DETACH attach_no_wal;

ATTACH '__TEST_DIR__/attach_no_wal.db';

SELECT COUNT(*) FROM GLOB('__TEST_DIR__/attach_no_wal.db.wal');

SELECT COUNT(*) FROM attach_no_wal.integers;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

CREATE TABLE a (b INT[]);
restart;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

SELECT * FROM a;

INSERT INTO a VALUES ([1, 2]), (NULL), ([3, 4, 5, 6]), ([NULL, 7]);

SELECT * FROM a;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

SELECT * FROM a;

CREATE TABLE b (b INT[][]);

INSERT INTO b VALUES ([[1, 2], [3, 4]]), (NULL), ([NULL, [7, 8, NULL], [2, 3]]), ([[NULL, 6], NULL, [1, 2, NULL]]);

SELECT * FROM b;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

SELECT * FROM b;

CREATE TABLE c (b TEXT[]);

INSERT INTO c VALUES (['hello', 'world']), (NULL), (['fejwfoaejwfoijwafew', 'b', 'c']), ([NULL, 'XXXXXXXXXXXXXXXXXXXXXXXX']);

SELECT * FROM c;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

SELECT * FROM c;

SELECT * FROM c;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

CREATE TABLE a (b MAP(INT, INT));

INSERT INTO a VALUES (MAP([1], [2])), (MAP([1, 2, 3], [4, 5, 6]));

SELECT * FROM a;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

SELECT * FROM a;

SELECT * FROM a;

SELECT * FROM a;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

CREATE TABLE t (a INT);

PREPARE p1 AS INSERT INTO t VALUES ($1);

EXECUTE p1(42);

EXECUTE p1(43);

DEALLOCATE AS p1;

SELECT a FROM t;

PRAGMA disable_checkpoint_on_shutdown;

SELECT a FROM t;

PREPARE p1 AS DELETE FROM t WHERE a=$1
restart;

PREPARE p1 AS DELETE FROM t WHERE a=$1;

EXECUTE p1(43);

SELECT a FROM t;

PRAGMA disable_checkpoint_on_shutdown;

SELECT a FROM t;

PRAGMA disable_checkpoint_on_shutdown;

SELECT a FROM t;

PREPARE p1 AS UPDATE t SET a = $1;

EXECUTE p1(43);

SELECT a FROM t;

PRAGMA disable_checkpoint_on_shutdown;

SELECT a FROM t;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

CREATE SEQUENCE seq;

BEGIN;

SELECT NEXTVAL('seq');

SELECT NEXTVAL('seq');

SELECT NEXTVAL('seq');

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA disable_checkpoint_on_shutdown;

CREATE TABLE a_${type} AS SELECT range::${type} i FROM range(100);

CREATE TABLE a_${type} AS SELECT range::${type} i FROM range(100);

CREATE TABLE a_${type} AS SELECT range::${type} i FROM range(100);

CREATE TABLE a_interval AS SELECT INTERVAL (range) YEAR AS i FROM RANGE(1, 1001);

SELECT MIN(i), MAX(i), COUNT(*), COUNT(i) FROM a_interval;

SELECT MIN(i), MAX(i), COUNT(*), COUNT(i) FROM a_interval WHERE i = INTERVAL '1' YEAR;

CREATE TABLE a_bool AS SELECT range % 2 = 0 AS i FROM RANGE(0, 1000);

SELECT MIN(i), MAX(i), COUNT(*), COUNT(i) FROM a_bool;

SELECT MIN(i), MAX(i), COUNT(*), COUNT(i) FROM a_bool WHERE NOT i;

CREATE TYPE mood AS ENUM ('sad', 'ok', 'happy');

CREATE TABLE person (name TEXT, current_mood mood);

INSERT INTO person VALUES ('Moe', 'happy');

SELECT * FROM person;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA disable_checkpoint_on_shutdown;

SELECT MIN(i), MAX(i), COUNT(*), COUNT(i) FROM a_interval;

SELECT MIN(i), MAX(i), COUNT(*), COUNT(i) FROM a_interval WHERE i = INTERVAL '1' YEAR;

SELECT MIN(i), MAX(i), COUNT(*), COUNT(i) FROM a_bool;

SELECT MIN(i), MAX(i), COUNT(*), COUNT(i) FROM a_bool WHERE NOT i;

SELECT * FROM person;

BEGIN;

DROP TABLE person;

drop TYPE mood;

drop TYPE mood;

CREATE TABLE aliens (name TEXT, current_mood mood);

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

CREATE TABLE test (a INT, b INT);

INSERT INTO test VALUES (11, 22), (13, 22), (12, 21);

ALTER TABLE test ADD COLUMN k INT DEFAULT 2;

SELECT k FROM test ORDER BY k;

SELECT k FROM test ORDER BY k;

INSERT INTO test (a, b) VALUES (1, 1);

SELECT k FROM test ORDER BY k;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

CREATE TABLE test (a INT, b INT);

INSERT INTO test (VALUES (11, 22), (13, 22), (12, 21)) AS restart;

PRAGMA disable_checkpoint_on_shutdown;

ALTER TABLE test ADD COLUMN k INT DEFAULT 2;

SELECT k FROM test ORDER BY k;

SELECT k FROM test ORDER BY k;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

CREATE TABLE test (a INT, b INT);

INSERT INTO test (VALUES (11, 22), (13, 22), (12, 21)) AS restart;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

ALTER TABLE test ALTER COLUMN b SET DATA TYPE TEXT;

SELECT * FROM test ORDER BY 1;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

SELECT * FROM test ORDER BY 1;

INSERT INTO test VALUES (10, 'hello');

SELECT * FROM test ORDER BY 1;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

SELECT * FROM test ORDER BY 1;

SELECT * FROM test ORDER BY 1;

SELECT * FROM test ORDER BY 1;

INSERT INTO test VALUES (10, 'hello');

SELECT * FROM test ORDER BY 1;

SELECT * FROM test ORDER BY 1;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

CREATE TABLE test (a INT, b INT);

INSERT INTO test (VALUES (11, 22), (13, 22), (12, 21)) AS restart;

PRAGMA disable_checkpoint_on_shutdown;

ALTER TABLE test ALTER COLUMN b SET DATA TYPE TEXT;

SELECT * FROM test ORDER BY 1;

INSERT INTO test VALUES (10, 'hello');

SELECT * FROM test ORDER BY 1;

SELECT * FROM test ORDER BY 1;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

CREATE TABLE test (a INT DEFAULT 1, b INT);

INSERT INTO test (b) VALUES (11);

SELECT * FROM test ORDER BY b;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

SELECT * FROM test ORDER BY b;

INSERT INTO test (b) VALUES (12), (13);

SELECT * FROM test ORDER BY b;

INSERT INTO test (b) VALUES (14), (15);

SELECT * FROM test ORDER BY b;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

CREATE SEQUENCE seq;

SELECT NEXTVAL('seq');

CREATE TABLE test (a INT DEFAULT NEXTVAL('seq'), b INT, c INT DEFAULT CURRVAL('seq'));

INSERT INTO test (b) (VALUES (11)) AS restart;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

SELECT * FROM test ORDER BY b;

INSERT INTO test (b) VALUES (12);

INSERT INTO test (b) VALUES (13);

SELECT * FROM test ORDER BY b;

INSERT INTO test (b) VALUES (14);

INSERT INTO test (b) VALUES (15);

SELECT * FROM test ORDER BY b;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

BEGIN;

CREATE TABLE test (a INT, b INT);

INSERT INTO test VALUES (11, 22), (12, 21), (13, 22), (12, 21);

DELETE FROM test WHERE a = 12;

SELECT a, b FROM test ORDER BY a;

SELECT a, b FROM test ORDER BY a;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

SELECT a, b FROM test ORDER BY a;

DELETE FROM test WHERE a = 11;

SELECT a, b FROM test ORDER BY a;

INSERT INTO test VALUES (11, 24), (12, 25);

SELECT a, b FROM test ORDER BY a;

DELETE FROM test WHERE a = 12;

SELECT a, b FROM test ORDER BY a;

PRAGMA disable_checkpoint_on_shutdown;

SELECT a, b FROM test ORDER BY a;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

CREATE TABLE test (a INT, b INT);

INSERT INTO test VALUES (11, 22), (13, 22), (12, 21), (NULL, NULL);

CREATE TABLE test2 (a INT);

INSERT INTO test2 (VALUES (13), (12), (11)) AS restart;

SELECT * FROM test ORDER BY a;

SELECT * FROM test2 ORDER BY a;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

CREATE TABLE test AS SELECT -i AS a, -i AS b FROM RANGE(0, 100000) AS tbl(i);

INSERT INTO test SELECT i + 1 AS a, i + 1 AS b FROM RANGE(0, 1000) AS tbl(i);

SELECT COUNT(*), SUM(a), SUM(b), MIN(a), MAX(a), MIN(b), MAX(b) FROM test WHERE a > 0;

SELECT COUNT(*) FROM test WHERE a > 0;

SELECT COUNT(*) FROM test WHERE a > 0 AND a <> b;

SELECT SUM(CASE WHEN b IS NULL THEN 1 ELSE 0 END) FROM test WHERE a > 0 AND a % 2 = 0;

UPDATE test SET b = b + 1 WHERE a > 0 AND a % 2 = 0;

SELECT * FROM test WHERE a > 0 ORDER BY 1, 2;

SELECT COUNT(*) FROM test WHERE a > 0;

SELECT COUNT(*) FROM test WHERE a > 0 AND a <> b;

SELECT * FROM test WHERE a > 0 ORDER BY 1, 2;

SELECT COUNT(*), SUM(a), SUM(b), MIN(a), MAX(a), MIN(b), MAX(b) FROM test WHERE a > 0;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

SELECT COUNT(*) FROM test WHERE a > 0 AND a % 2 = 0;

SELECT COUNT(*) FROM test WHERE a IS NULL OR b IS NULL;

SELECT COUNT(*) FROM test WHERE a > 0 AND a <> b;

SELECT * FROM test WHERE a > 0 ORDER BY 1, 2;

SELECT COUNT(*), SUM(a), SUM(b), MIN(a), MAX(a), MIN(b), MAX(b) FROM test WHERE a > 0;

UPDATE test SET b = NULL WHERE a > 0 AND a % 2 = 1;

SELECT COUNT(*), SUM(a), SUM(b), MIN(a), MAX(a), MIN(b), MAX(b) FROM test WHERE a > 0;

SELECT COUNT(*), SUM(a), SUM(b), MIN(a), MAX(a), MIN(b), MAX(b) FROM test WHERE a > 0;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

CREATE TABLE test AS SELECT -i AS a, -i AS b FROM RANGE(0, 100000) AS tbl(i);

INSERT INTO test SELECT i + 1 AS a, i + 1 AS b FROM RANGE(0, 1000) AS tbl(i);

SELECT COUNT(*), SUM(a), SUM(b), MIN(a), MAX(a), MIN(b), MAX(b) FROM test WHERE a > 0;

SELECT COUNT(*) FROM test WHERE a > 0;

SELECT COUNT(*) FROM test WHERE a > 0 AND a <> b;

UPDATE test SET b = NULL WHERE a > 0 AND a % 2 = 0;

SELECT * FROM test WHERE a > 0 ORDER BY 1, 2;

SELECT COUNT(*) FROM test WHERE a > 0;

SELECT COUNT(*) FROM test WHERE a > 0 AND b IS NULL;

SELECT * FROM test WHERE a > 0 ORDER BY 1, 2;

SELECT COUNT(*), SUM(a), SUM(b), MIN(a), MAX(a), MIN(b), MAX(b), COUNT(b) FROM test WHERE a > 0;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

SELECT COUNT(*) FROM test WHERE a > 0 AND a % 2 = 0;

SELECT COUNT(*) FROM test WHERE a IS NULL OR b IS NULL;

SELECT * FROM test WHERE a > 0 ORDER BY 1, 2;

SELECT COUNT(*), SUM(a), SUM(b), MIN(a), MAX(a), MIN(b), MAX(b), COUNT(b) FROM test WHERE a > 0;

SELECT COUNT(*), SUM(a), SUM(b), MIN(a), MAX(a), MIN(b), MAX(b), COUNT(b) FROM test WHERE a > 0;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

CREATE TABLE test (a INT, b TEXT);

INSERT INTO test (VALUES (NULL, 'hello'), (13, 'abcdefgh'), (12, NULL)) AS restart;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

SELECT a, b FROM test ORDER BY a;

CREATE TABLE test (a INT, b TEXT);

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

CREATE TABLE test (a INT, b INT);

INSERT INTO test (VALUES (11, 22), (13, 22), (12, 21)) AS restart;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

ALTER TABLE test DROP COLUMN b;

SELECT * FROM test ORDER BY 1;

SELECT * FROM test ORDER BY 1;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

CREATE TABLE test (a INT, b INT);

INSERT INTO test VALUES (11, 22), (13, 22), (12, 21);

BEGIN;

SELECT a FROM test ORDER BY a;

ALTER TABLE test RENAME COLUMN a TO k;

SELECT k FROM test ORDER BY k;

SELECT k FROM test ORDER BY k;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

BEGIN;

SELECT a FROM test ORDER BY a;

ALTER TABLE test RENAME COLUMN a TO k;

SELECT k FROM test ORDER BY k;

SELECT k FROM test ORDER BY k;

SELECT k FROM test ORDER BY k;

SELECT a FROM test;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

CREATE TABLE test (a INT, b INT);

INSERT INTO test VALUES (11, 22), (13, 22), (12, 21);

BEGIN;

SELECT a FROM test ORDER BY a;

ALTER TABLE test RENAME TO new_name;

SELECT a FROM new_name ORDER BY 1;

SELECT a FROM new_name ORDER BY 1;

BEGIN;

SELECT a FROM test ORDER BY a;

ALTER TABLE test RENAME TO new_name;

SELECT a FROM new_name ORDER BY 1;

SELECT a FROM new_name ORDER BY 1;

SELECT a FROM new_name ORDER BY 1;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

CREATE TABLE test (a INT, b INT);

INSERT INTO test VALUES (11, 22), (13, 22), (12, 21);

CREATE VIEW vtest AS SELECT * FROM test;

BEGIN;

SELECT a FROM vtest ORDER BY a;

ALTER VIEW vtest RENAME TO new_name;

SELECT a FROM new_name ORDER BY 1;

SELECT a FROM new_name ORDER BY 1;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

BEGIN;

SELECT a FROM vtest ORDER BY a;

ALTER VIEW vtest RENAME TO new_name;

SELECT a FROM new_name ORDER BY 1;

SELECT a FROM new_name ORDER BY 1;

SELECT a FROM new_name ORDER BY 1;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

CREATE SEQUENCE seq;

CREATE SEQUENCE seq_cycle;

SELECT NEXTVAL('seq');

SELECT NEXTVAL('seq_cycle');

CREATE SEQUENCE seq2;

CREATE SEQUENCE seq2;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

SELECT NEXTVAL('seq');

SELECT NEXTVAL('seq_cycle');

SELECT NEXTVAL('seq2');

SELECT NEXTVAL('seq'), NEXTVAL('seq');

SELECT NEXTVAL('seq_cycle');

DROP SEQUENCE seq;
restart;

SELECT NEXTVAL('seq');

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

CREATE TABLE persistent (i INT);

CREATE TEMPORARY TABLE temp.a (i INT);

INSERT INTO a VALUES (42);

DELETE FROM a;

DELETE FROM temp.a;

DELETE FROM asdf.a;

CREATE TEMPORARY SEQUENCE seq;

CREATE TEMPORARY SEQUENCE seq2;

DROP SEQUENCE seq2;

CREATE TEMPORARY VIEW v1 AS SELECT 42;

CREATE TEMPORARY VIEW v2 AS SELECT 42;

DROP VIEW v2;

INSERT INTO temp.a VALUES (43);

UPDATE temp.a SET i = 44;

UPDATE a SET i = 45;

ALTER TABLE a RENAME COLUMN i TO k;

SELECT * FROM persistent;

SELECT * FROM a AS restart;

SELECT * FROM persistent;

SELECT * FROM a;

CREATE TEMPORARY TABLE a (i INT);

CREATE TEMPORARY SEQUENCE seq;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

CREATE TABLE test AS SELECT -i AS a, -i AS b FROM RANGE(0, 100000) AS tbl(i);

INSERT INTO test VALUES (11, 22), (NULL, 22), (12, 21);

UPDATE test SET b = b + 1 WHERE a = 11;

SELECT a, b FROM test WHERE a > 0 OR a IS NULL ORDER BY a;

UPDATE test SET b = b + 1 WHERE a = 11;

SELECT a, b FROM test WHERE a > 0 OR a IS NULL ORDER BY a;

UPDATE test SET b = NULL WHERE a = 11;

SELECT a, b FROM test WHERE a > 0 OR a IS NULL ORDER BY a;

SELECT a, b FROM test WHERE a > 0 OR a IS NULL ORDER BY a;

SELECT a, b FROM test WHERE a > 0 OR a IS NULL ORDER BY a;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

CREATE TABLE test AS SELECT CAST((-i) AS TEXT) AS a, CAST((-i) AS TEXT) AS b FROM RANGE(0, 100000) AS tbl(i);

INSERT INTO test VALUES ('11', '22'), (NULL, '22'), ('12', '21');

UPDATE test SET b = CAST((CAST(b AS INT) + 1) AS TEXT) WHERE a = '11';

SELECT a, b FROM test WHERE CAST(a AS INT) > 0 OR a IS NULL ORDER BY a;

UPDATE test SET b = CAST((CAST(b AS INT) + 1) AS TEXT) WHERE a = '11';

SELECT a, b FROM test WHERE CAST(a AS INT) > 0 OR a IS NULL ORDER BY a;

UPDATE test SET b = NULL WHERE a = '11';

SELECT a, b FROM test WHERE CAST(a AS INT) > 0 OR a IS NULL ORDER BY a;

SELECT a, b FROM test WHERE CAST(a AS INT) > 0 OR a IS NULL ORDER BY a;

SELECT a, b FROM test WHERE CAST(a AS INT) > 0 OR a IS NULL ORDER BY a;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

CREATE TABLE test (a TEXT, b TEXT);

INSERT INTO test VALUES ('11', '22'), (NULL, '22'), ('12', '21');

UPDATE test SET b = CAST((CAST(b AS INT) + 1) AS TEXT) WHERE a = '11';

SELECT a, b FROM test ORDER BY a;

UPDATE test SET b = CAST((CAST(b AS INT) + 1) AS TEXT) WHERE a = '11';

SELECT a, b FROM test ORDER BY a;

UPDATE test SET b = NULL WHERE a = '11';

SELECT a, b FROM test ORDER BY a;

SELECT a, b FROM test ORDER BY a;

SELECT a, b FROM test ORDER BY a;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

CREATE TABLE test (a INT, b INT);

INSERT INTO test VALUES (11, 22), (13, 22), (12, 21);

UPDATE test SET b = b + 1 WHERE a = 11;

SELECT a, b FROM test ORDER BY a;

UPDATE test SET b = b + 1 WHERE a = 11;

SELECT a, b FROM test ORDER BY a;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

SELECT a, b FROM test ORDER BY a;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

CREATE TABLE timestamp (t TIMESTAMP);

CREATE TABLE timestamp (t TIMESTAMP);

PRAGMA disable_checkpoint_on_shutdown;

SELECT * FROM timestamp ORDER BY t;

SELECT * FROM timestamp WHERE t = CAST('2007-01-01 00:00:01' AS TIMESTAMP) ORDER BY t;

SELECT * FROM timestamp WHERE t = CAST('2000-01-01 00:00:01' AS TIMESTAMP) ORDER BY t;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

CREATE TABLE uhugeints (h UINT128);

CREATE TABLE uhugeints (h UINT128);

PRAGMA disable_checkpoint_on_shutdown;

SELECT * FROM uhugeints;

SELECT * FROM uhugeints WHERE h = 42;

SELECT h FROM uhugeints WHERE h < 10 ORDER BY 1;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

PRAGMA wal_autocheckpoint = '1TB';

INSERT INTO test SELECT CONCAT('helloworldxxx', i) FROM RANGE(0, 150000) AS tbl(i);

INSERT INTO test SELECT CONCAT('helloworldxxx', i) FROM RANGE(0, 16534) AS tbl(i);

INSERT INTO test SELECT CONCAT('helloworldxxx', i) FROM RANGE(0, 999) AS tbl(i);

INSERT INTO test SELECT CONCAT('helloworldxxx', i) FROM RANGE(0, 31) AS tbl(i);

INSERT INTO test SELECT CONCAT('helloworldxxx', i) FROM RANGE(0, 34569) AS tbl(i);
endloop;

SELECT MIN(a), MAX(a), COUNT(*), AVG(CAST(REPLACE(a, 'helloworldxxx', '') AS INT)) FROM test;

SELECT MIN(a), MAX(a), COUNT(*), AVG(CAST(REPLACE(a, 'helloworldxxx', '') AS INT)) FROM test;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

CREATE TABLE uuids (u UUID);

CREATE TABLE uuids (u UUID);

SELECT * FROM uuids;

SELECT * FROM uuids WHERE u = 'A0EEBC99-9C0B-4EF8-BB6D-6BB9BD380A11';

SELECT * FROM uuids WHERE u = 'a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11';

SELECT u FROM uuids WHERE u > '10203040-5060-7080-0102-030405060708' ORDER BY 1;

SET enable_view_dependencies = TRUE;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

CREATE SCHEMA test;

CREATE TABLE test.t (a INT, b INT);

CREATE VIEW test.v (b, c) AS SELECT * FROM test.t;

PRAGMA TABLE_INFO('test.v');

SELECT * FROM test.v;

SELECT * FROM test.v;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA TABLE_INFO('test.v');

SELECT * FROM test.v;

CREATE TABLE test.t (a INT, b INT);

SELECT * FROM test.t;

SELECT b, c FROM test.v;

CREATE VIEW test.v (b, c) AS SELECT * FROM test.t;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

CREATE SCHEMA test;

CREATE TABLE test.t (a INT, b INT);

CREATE VIEW test.v (b, c) AS SELECT * FROM test.t;

PRAGMA TABLE_INFO('test.v');

SELECT * FROM test.v;

DROP TABLE test.t;

PRAGMA TABLE_INFO('test.v');

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA TABLE_INFO('test.v');

SELECT * FROM test.v;

CREATE TABLE test.t (a INT, b INT);

SELECT * FROM test.t;

SELECT b, c FROM test.v;

SET enable_view_dependencies = TRUE;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

CREATE SCHEMA test;
CREATE TABLE test.t (a INT, b INT);
CREATE VIEW test.v AS SELECT * FROM test.t;

PRAGMA TABLE_INFO('test.v');

DROP TABLE test.t;

DROP TABLE test.t CASCADE;

PRAGMA TABLE_INFO('test.v');

CREATE VIEW test.v2 AS SELECT 42;

CREATE VIEW test.v2 AS SELECT 42;

PRAGMA TABLE_INFO('test.v');

SELECT * FROM test.v;

CREATE TABLE test.t (a INT, b INT);

SELECT * FROM test.t;

SELECT * FROM test.v;

CREATE VIEW test.v AS SELECT * FROM test.t;

PRAGMA TABLE_INFO('test.v');

DROP TABLE test.t;

DROP TABLE test.t CASCADE;

SELECT * FROM test.v2;

PRAGMA disable_checkpoint_on_shutdown;

PRAGMA wal_autocheckpoint = '1TB';

CREATE SCHEMA test;

CREATE TABLE test.t (a INT, b INT);

CREATE VIEW test.v AS SELECT * FROM test.t;

PRAGMA TABLE_INFO('test.v');

DROP TABLE test.t;

PRAGMA TABLE_INFO('test.v');

SELECT * FROM test.v;

CREATE VIEW test.v2 AS SELECT 42;

CREATE VIEW test.v2 AS SELECT 42;

PRAGMA TABLE_INFO('test.v');

SELECT * FROM test.v;

CREATE TABLE test.t (a INT, b INT);

SELECT * FROM test.t;

SELECT * FROM test.v;

PRAGMA TABLE_INFO('test.v');

DROP TABLE test.t;

SELECT * FROM test.v2;

PRAGMA enable_verification;

CREATE TABLE students (id INT, name TEXT, major TEXT, year INT);

CREATE TABLE exams (sid INT, course TEXT, curriculum TEXT, grade INT, year INT);

INSERT INTO students VALUES (1, 'Mark', 'CS', 2017);

INSERT INTO students VALUES (2, 'Dirk', 'CS', 2017);

INSERT INTO exams VALUES (1, 'Database Systems', 'CS', 10, 2015);

INSERT INTO exams VALUES (1, 'Graphics', 'CS', 9, 2016);

INSERT INTO exams VALUES (2, 'Database Systems', 'CS', 7, 2015);

INSERT INTO exams VALUES (2, 'Graphics', 'CS', 7, 2016);

SELECT s.name, e.course, e.grade FROM students AS s, exams AS e WHERE s.id = e.sid AND e.grade = (SELECT MAX(e2.grade) FROM exams AS e2 WHERE s.id = e2.sid) ORDER BY name, course;

SELECT s.name, e.course, e.grade FROM students AS s, exams AS e WHERE s.id = e.sid AND (s.major = 'CS' OR s.major = 'Games Eng') AND e.grade <= (SELECT AVG(e2.grade) - 1 FROM exams AS e2 WHERE s.id = e2.sid OR (e2.curriculum = s.major AND s.year >= e2.year)) ORDER BY name, course;

SELECT name, major FROM students AS s WHERE EXISTS(SELECT * FROM exams AS e WHERE e.sid = s.id AND grade = 10) OR s.name = 'Dirk' ORDER BY name;

SELECT (SELECT c0 OFFSET 1) FROM (VALUES (1)) AS c0;

PRAGMA enable_verification;

CREATE TABLE t0 (c0 INT);

CREATE TABLE t1 (c0 INT);

INSERT INTO t0 VALUES (1);

INSERT INTO t1 VALUES (1);

SELECT 1 = ANY (SELECT 1 FROM t1 JOIN (SELECT COUNT(*) GROUP BY t0.c0) AS x(x) ON TRUE) FROM t0;

PRAGMA enable_verification;

CREATE TABLE t0 (c0 TIME, c1 DOUBLE);

CREATE TABLE t1 (c0 INT);

INSERT INTO t1 VALUES (1), (10), (7), (9), (NULL), (1), (7), (7), (0), (8), (0), (9), (NULL), (5), (3), (8), (0);

SELECT (FALSE) IN (TRUE, (SELECT CAST('13:35:07' AS TIME) FROM t1) BETWEEN t0.c0 AND t0.c0) FROM t0;

SET scalar_subquery_error_on_multiple_rows = FALSE;

SELECT (FALSE) IN (TRUE, (SELECT CAST('13:35:07' AS TIME) FROM t1) BETWEEN t0.c0 AND t0.c0) FROM t0;

PRAGMA enable_verification;

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (1), (2), (3);

SELECT 2 > ANY (SELECT * FROM integers);

SELECT 1 > ANY (SELECT * FROM integers);

SELECT 4 > ALL (SELECT * FROM integers);

SELECT 1 > ALL (SELECT * FROM integers);

SELECT NULL > ANY (SELECT * FROM integers);

SELECT NULL > ALL (SELECT * FROM integers);

INSERT INTO integers VALUES (NULL);

SELECT 2 > ANY (SELECT * FROM integers);

SELECT 1 > ANY (SELECT * FROM integers);

SELECT 4 > ALL (SELECT * FROM integers);

SELECT 1 > ALL (SELECT * FROM integers);

SELECT NULL > ANY (SELECT * FROM integers);

SELECT NULL > ALL (SELECT * FROM integers);

SELECT POWER(2, ANY (SELECT * FROM integers));

SELECT POWER(2, ANY([1, 2, 3]));

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (1), (2), (3), (NULL);

SELECT i = ANY (SELECT i FROM integers WHERE i = i1.i) FROM integers AS i1 ORDER BY i;

SELECT i > ALL (SELECT (i + i1.i - 1) / 2 FROM integers WHERE NOT i IS NULL) FROM integers AS i1 ORDER BY i;

SELECT i = ALL (SELECT i FROM integers WHERE i <> i1.i) FROM integers AS i1 ORDER BY i;

SELECT i FROM integers AS i1 WHERE i = ANY (SELECT i FROM integers WHERE i = i1.i) ORDER BY i;

SELECT i FROM integers AS i1 WHERE i <> ANY (SELECT i FROM integers WHERE i = i1.i) ORDER BY i;

SELECT i FROM integers AS i1 WHERE i = ANY (SELECT i FROM integers WHERE i <> i1.i) ORDER BY i;

SELECT i FROM integers AS i1 WHERE i > ANY (SELECT i FROM integers WHERE i <> i1.i) ORDER BY i;

SELECT i FROM integers AS i1 WHERE i > ALL (SELECT (i + i1.i - 1) / 2 FROM integers WHERE NOT i IS NULL) ORDER BY i;

SELECT i = ALL (SELECT i FROM integers WHERE i = i1.i) FROM integers AS i1 ORDER BY i;

SELECT i = ANY (SELECT i FROM integers WHERE i = i1.i) FROM integers AS i1 ORDER BY i;

SELECT i <> ALL (SELECT i FROM integers WHERE i = i1.i) FROM integers AS i1 ORDER BY i;

SELECT i <> ANY (SELECT i FROM integers WHERE i = i1.i) FROM integers AS i1 ORDER BY i;

SELECT i = ALL (SELECT i FROM integers WHERE i <> i1.i) FROM integers AS i1 ORDER BY i;

SELECT i = ANY (SELECT i FROM integers WHERE i <> i1.i) FROM integers AS i1 ORDER BY i;

SELECT i > ANY (SELECT i FROM integers WHERE i <> i1.i) FROM integers AS i1 ORDER BY i;

SELECT i > ALL (SELECT (i + i1.i - 1) / 2 FROM integers) FROM integers AS i1 ORDER BY i;

SELECT i > ALL (SELECT (i + i1.i - 1) / 2 FROM integers WHERE NOT i IS NULL) FROM integers AS i1 ORDER BY i;

SELECT i = ANY (SELECT i FROM integers WHERE i = i1.i OR i IS NULL) FROM integers AS i1 ORDER BY i;

SELECT i = ALL (SELECT i FROM integers WHERE i = i1.i OR i IS NULL) FROM integers AS i1 ORDER BY i;

SELECT MIN(i) > ANY (SELECT i FROM integers WHERE i > MIN(i1.i)) FROM integers AS i1;

SELECT SUM(i) > ANY (SELECT i FROM integers WHERE i > MIN(i1.i)) FROM integers AS i1;

SELECT (SELECT SUM(i) + SUM(i1.i) FROM integers) > ANY (SELECT i FROM integers WHERE i > MIN(i1.i)) FROM integers AS i1;

SELECT i = ANY (SELECT i FROM integers WHERE i = i1.i AND i > 10) FROM integers AS i1 ORDER BY i;

PRAGMA enable_verification;

SELECT 1 = ANY (SELECT 1);

SELECT 1 = ANY (SELECT NULL);

SELECT 1 = ANY (SELECT 2);

SELECT NULL = ANY (SELECT 2);

SELECT 1 = ALL (SELECT 1);

SELECT 1 = ALL (SELECT NULL);

SELECT 1 = ALL (SELECT 2);

SELECT NULL = ALL (SELECT 2);

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

SELECT 1 IN (SELECT 1);

SELECT NULL IN (SELECT 1);

SELECT 1 IN (SELECT NULL);

SELECT 1 IN (SELECT 2);

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (1), (2), (3);

SELECT 4 IN (SELECT * FROM integers);

SELECT 1 IN (SELECT * FROM integers);

SELECT 1 IN (SELECT * FROM integers) FROM integers;

INSERT INTO integers VALUES (NULL);

SELECT 4 IN (SELECT * FROM integers);

SELECT 1 IN (SELECT * FROM integers);

SELECT * FROM integers WHERE (4 IN (SELECT * FROM integers)) IS NULL ORDER BY 1;

SELECT * FROM integers WHERE (i IN (SELECT * FROM integers)) IS NULL ORDER BY 1;

PRAGMA enable_verification;

SELECT 1 AS one WHERE 1 IN (SELECT 1);

CREATE TABLE test (id INT, b INT);

INSERT INTO test VALUES (1, 22);

INSERT INTO test VALUES (2, 21);

INSERT INTO test VALUES (3, 23);

SELECT * FROM test WHERE b IN (SELECT b FROM test WHERE b * id < 30) ORDER BY id, b;

SELECT * FROM test WHERE NOT b IN (SELECT b FROM test WHERE b * id < 30) ORDER BY id, b;

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (1), (2), (3), (NULL);

SELECT i FROM integers WHERE i >= ALL (SELECT i FROM integers);

SELECT i, i >= ALL (SELECT i FROM integers) FROM integers ORDER BY i;

SELECT i FROM integers WHERE i >= ALL (SELECT i FROM integers WHERE NOT i IS NULL);

SELECT i, i >= ALL (SELECT i FROM integers WHERE NOT i IS NULL) FROM integers ORDER BY i;

SELECT i FROM integers WHERE i >= ALL (SELECT i FROM integers WHERE NOT i IS NULL);

SELECT i FROM integers WHERE i > ALL (SELECT MIN(i) FROM integers);

SELECT i FROM integers WHERE i < ALL (SELECT MAX(i) FROM integers) ORDER BY 1;

SELECT i FROM integers WHERE i <= ALL (SELECT i FROM integers);

SELECT i FROM integers WHERE i <= ALL (SELECT i FROM integers WHERE NOT i IS NULL);

SELECT i FROM integers WHERE i = ALL (SELECT i FROM integers WHERE i = 1);

SELECT i FROM integers WHERE i <> ALL (SELECT i FROM integers WHERE i = 1);

SELECT i FROM integers WHERE i = ALL (SELECT i FROM integers WHERE NOT i IS NULL);

SELECT i FROM integers WHERE i <> ALL (SELECT i FROM integers WHERE NOT i IS NULL);

SELECT i FROM integers WHERE i <> ALL (SELECT i FROM integers WHERE i > 10) ORDER BY i;

SELECT i, i <> ALL (SELECT i FROM integers WHERE i > 10) FROM integers ORDER BY i;

SELECT i, i > ANY (SELECT i FROM integers WHERE i > 10) FROM integers ORDER BY i;

SELECT i, i = ANY (SELECT i FROM integers WHERE i > 10) FROM integers ORDER BY i;

SELECT i, i >= ANY (SELECT i FROM integers WHERE i > 10) FROM integers ORDER BY i;

SELECT i, i <= ANY (SELECT i FROM integers WHERE i > 10) FROM integers ORDER BY i;

SELECT i, i < ANY (SELECT i FROM integers WHERE i > 10) FROM integers ORDER BY i;

SELECT i, i <> ANY (SELECT i FROM integers WHERE i > 10) FROM integers ORDER BY i;

SELECT (SELECT (SELECT (SELECT 42)));

SELECT (SELECT EXISTS(SELECT * FROM integers WHERE i > 2)) FROM integers;

SELECT (SELECT MAX(i) FROM integers) AS k, SUM(i) FROM integers GROUP BY k;

SELECT i >= ALL (SELECT i FROM integers WHERE NOT i IS NULL) AS k, SUM(i) FROM integers GROUP BY k ORDER BY k;

SELECT SUM(i) FROM integers GROUP BY (i >= ALL (SELECT i FROM integers WHERE NOT i IS NULL)) ORDER BY 1;

SELECT i >= ALL (SELECT MIN(i) FROM integers WHERE NOT i IS NULL) AS k, SUM(i) FROM integers GROUP BY k ORDER BY k;

SELECT i, SUM(CASE WHEN (i >= ALL (SELECT i FROM integers WHERE i = 2)) THEN 1 ELSE 0 END) FROM integers GROUP BY i ORDER BY i;

SELECT i % 2 AS k, SUM(i) FROM integers GROUP BY k HAVING SUM(i) > (SELECT MAX(i) FROM integers);

SELECT i FROM integers WHERE NOT (i IN (SELECT i FROM integers WHERE i > 1));

SELECT (SELECT SUM(i) FROM integers), (SELECT 42);

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (1), (2), (3), (NULL);

SELECT i FROM integers WHERE i <= ANY (SELECT i FROM integers);

SELECT i FROM integers WHERE i > ANY (SELECT i FROM integers) ORDER BY 1;

SELECT i, i > ANY (SELECT i FROM integers) FROM integers ORDER BY i;

SELECT i, i > ANY (SELECT i FROM integers WHERE NOT i IS NULL) FROM integers ORDER BY i;

SELECT i, NULL > ANY (SELECT i FROM integers) FROM integers ORDER BY i;

SELECT i, NULL > ANY (SELECT i FROM integers WHERE NOT i IS NULL) FROM integers ORDER BY i;

SELECT i FROM integers WHERE i = ANY (SELECT i FROM integers) ORDER BY i;

SELECT i, i = ANY (SELECT i FROM integers WHERE i > 2) FROM integers ORDER BY i;

SELECT i, i = ANY (SELECT i FROM integers WHERE i > 2 OR i IS NULL) FROM integers ORDER BY i;

SELECT i, i <> ANY (SELECT i FROM integers WHERE i > 2) FROM integers ORDER BY i;

SELECT i, i <> ANY (SELECT i FROM integers WHERE i > 2 OR i IS NULL) FROM integers ORDER BY i;

SELECT i, i = ANY (SELECT i1.i FROM integers AS i1, integers AS i2, integers AS i3, integers AS i4, integers AS i5, integers AS i6 WHERE NOT i1.i IS NULL) FROM integers ORDER BY i;

SELECT i, i = ANY (SELECT i1.i FROM integers AS i1, integers AS i2, integers AS i3, integers AS i4, integers AS i5, integers AS i6 WHERE NOT i1.i IS NULL AND i1.i <> 2) FROM integers ORDER BY i;

SELECT i, i >= ANY (SELECT i1.i FROM integers AS i1, integers AS i2, integers AS i3, integers AS i4, integers AS i5, integers AS i6 WHERE NOT i1.i IS NULL) FROM integers ORDER BY i;

SELECT i, i >= ANY (SELECT i1.i FROM integers AS i1, integers AS i2, integers AS i3, integers AS i4, integers AS i5, integers AS i6 WHERE NOT i1.i IS NULL AND i1.i <> 1 LIMIT 1) FROM integers ORDER BY i;

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

CREATE TABLE lists (l INT[]);

INSERT INTO lists VALUES ([1]), ([2]), ([3]), (NULL), (CAST([NULL] AS INT[]));

SELECT l, (SELECT MIN(l[1]) + i1.l[1] FROM lists) FROM lists AS i1 ORDER BY l;

SELECT l, (SELECT MIN(l[1] + 2 * i1.l[1]) FROM lists) FROM lists AS i1 ORDER BY l;

SELECT l, SUM(l[1]), (SELECT SUM(l[1]) + SUM(i1.l[1]) FROM lists) FROM lists AS i1 GROUP BY l ORDER BY l;

SELECT l, SUM(l[1]), (SELECT SUM(l[1]) + COUNT(i1.l[1]) FROM lists) FROM lists AS i1 GROUP BY l ORDER BY l;

SELECT l, (SELECT COUNT(*) FROM lists AS i2 WHERE i2.l[1] > i1.l[1]) FROM lists AS i1 ORDER BY l;

SELECT l, (SELECT MIN(l[1] + 2 * i1.l[1]) FROM lists) FROM lists AS i1 ORDER BY l;

SELECT (SELECT SUM(i1.l[1])) FROM lists AS i1;

SELECT MIN(l[1]), (SELECT SUM(i1.l[1])) FROM lists AS i1;

SELECT l, (SELECT SUM(i1.l[1])) FROM lists AS i1;

SELECT l[1] + 1, (SELECT SUM(i1.l[1])) FROM lists AS i1;

SELECT MIN(l[1]), (SELECT SUM(i1.l[1])) FROM lists AS i1;

SELECT (SELECT SUM(i1.l[1])), (SELECT SUM(i1.l[1])) FROM lists AS i1;

SELECT SUM(l[1]), SUM((SELECT l[1] FROM lists WHERE l[1] = i1.l[1])) FROM lists AS i1;

SELECT SUM(l[1]), (SELECT SUM(l[1]) FROM lists WHERE l[1] > SUM(i1.l[1])) FROM lists AS i1;

SELECT SUM((SELECT SUM(l[1]))) FROM lists;

SELECT l, (SELECT MIN(l[1]) FROM lists WHERE l[1] > i1.l[1]) FROM lists AS i1 ORDER BY l;

SELECT l, (SELECT MIN(l[1]) + i1.l[1] FROM lists WHERE l[1] > i1.l[1]) FROM lists AS i1 ORDER BY l;

SELECT l, (SELECT MIN(l[1]) FROM lists GROUP BY i1.l[1]) AS j FROM lists AS i1 ORDER BY l;

SELECT l, (SELECT l[1] FROM lists GROUP BY l[1] HAVING l[1] = i1.l[1]) AS j FROM lists AS i1 ORDER BY l;

SELECT i1.l, SUM(l[1]) FROM lists AS i1 GROUP BY i1.l HAVING SUM(l[1]) = (SELECT MIN(l[1]) FROM lists WHERE l[1] <> i1.l[1] + 1) ORDER BY 1;

SELECT l[1] % 2 AS j, SUM(l[1]) FROM lists AS i1 GROUP BY j HAVING SUM(l[1]) = (SELECT SUM(l[1]) FROM lists WHERE l[1] <> j + 1) ORDER BY 1;

SELECT (SELECT l[1] + SUM(i1.l[1]) FROM lists WHERE l[1] = 1 LIMIT 1) FROM lists AS i1;

SELECT (SELECT SUM(l[1]) + SUM(i1.l[1]) FROM lists) FROM lists AS i1 ORDER BY 1;

SELECT l, (SELECT l[1] + SUM(i1.l[1]) FROM lists WHERE l[1] = 1) FROM lists AS i1 GROUP BY l ORDER BY l;

SELECT SUM((SELECT l[1] + i1.l[1] FROM lists WHERE l[1] = 1)) FROM lists AS i1;

SELECT l, SUM(i1.l[1]), (SELECT SUM(i1.l[1])) AS k FROM lists AS i1 GROUP BY l ORDER BY l;

SELECT i1.l AS j, (SELECT SUM(j[1] + l[1]) FROM lists) AS k FROM lists AS i1 GROUP BY j ORDER BY j;

SELECT (SELECT SUM(i1.l[1] * l[1]) FROM lists) FROM lists AS i1 ORDER BY l;

SELECT l, SUM(i1.l[1]) FROM lists AS i1 GROUP BY l ORDER BY (SELECT SUM(i1.l[1]));

SELECT l, SUM((SELECT SUM(l[1]) * i1.l[1] FROM lists LIMIT 0)) AS k FROM lists AS i1 GROUP BY l ORDER BY l;

SELECT (SELECT l[1] + i1.l[1] FROM lists WHERE l[1] = 1) AS k, SUM(l[1]) AS j FROM lists AS i1 GROUP BY k ORDER BY 1;

SELECT SUM(l[1]) FROM lists AS i1 WHERE l[1] > (SELECT (l[1] + i1.l[1]) / 2 FROM lists WHERE l[1] = 1);

SELECT SUM(l[1]) FROM lists AS i1 WHERE l[1] > (SELECT (SUM(l[1]) + i1.l[1]) / 2 FROM lists WHERE l[1] = 1);

SELECT l, (SELECT MIN(l[1]) FROM lists WHERE l[1] = i1.l[1]) >= ALL (SELECT l[1] FROM lists WHERE NOT l[1] IS NULL) FROM lists AS i1 ORDER BY l;

PRAGMA enable_verification;

CREATE TABLE lists (l INT[]);

INSERT INTO lists VALUES ([1]), ([2]), ([3]), (NULL);

SELECT l, l IN (SELECT i1.l FROM (SELECT * FROM lists AS i1 WHERE i1.l = lists.l) AS i1 JOIN GENERATE_SERIES(1, 2, 1) AS tbl(s) ON i1.l = [tbl.s]) FROM lists ORDER BY l;

SELECT l IN (SELECT i1.l FROM (SELECT * FROM lists AS i1 WHERE i1.l = lists.l) AS i1 LEFT JOIN GENERATE_SERIES(1, 2, 1) AS tbl(s) ON i1.l = [tbl.s]) FROM lists ORDER BY l;

SELECT l IN (SELECT i1.l FROM (SELECT * FROM lists AS i1 WHERE i1.l = lists.l) AS i1 RIGHT JOIN GENERATE_SERIES(1, 2, 1) AS tbl(s) ON i1.l = [tbl.s]) FROM lists ORDER BY l;

SELECT l IN (SELECT i1.l FROM GENERATE_SERIES(1, 2, 1) AS tbl(s) LEFT JOIN (SELECT * FROM lists AS i1 WHERE i1.l = lists.l) AS i1 ON i1.l = [tbl.s]) FROM lists ORDER BY l;

SELECT l IN (SELECT i1.l FROM GENERATE_SERIES(1, 2, 1) AS tbl(s) RIGHT JOIN (SELECT * FROM lists AS i1 WHERE i1.l = lists.l) AS i1 ON i1.l = [tbl.s]) FROM lists ORDER BY l;

SELECT l IN (SELECT i1.l FROM (SELECT * FROM lists AS i1 WHERE i1.l IS NOT DISTINCT FROM lists.l) AS i1 JOIN GENERATE_SERIES(1, 2, 1) AS tbl(s) ON i1.l = [tbl.s] OR (i1.l IS NULL AND tbl.s IS NULL)) FROM lists ORDER BY l;

SELECT l IN (SELECT i1.l FROM (SELECT * FROM lists AS i1 WHERE i1.l IS NOT DISTINCT FROM lists.l) AS i1 LEFT JOIN GENERATE_SERIES(1, 2, 1) AS tbl(s) ON i1.l = [tbl.s] OR (i1.l IS NULL AND tbl.s IS NULL)) FROM lists ORDER BY l;

SELECT l IN (SELECT i1.l FROM (SELECT * FROM lists AS i1 WHERE i1.l IS NOT DISTINCT FROM lists.l) AS i1 RIGHT JOIN GENERATE_SERIES(1, 2, 1) AS tbl(s) ON i1.l = [tbl.s] OR (i1.l IS NULL AND tbl.s IS NULL)) FROM lists ORDER BY l;

PRAGMA enable_verification;

SELECT (SELECT COUNT(*) AS value FROM (SELECT UNNEST(ARRAY_AGG(DISTINCT id))) AS a) AS total_seats FROM (SELECT UUID() AS id, 1 AS val FROM GENERATE_SERIES(0, 160)) AS m;

SELECT z % 2 AS k, (SELECT COUNT(*) AS value FROM (SELECT UNNEST(ARRAY_AGG(DISTINCT id))) AS a) AS total_seats FROM (SELECT ROW_NUMBER() OVER () AS z, UUID() AS id, 1 AS val FROM GENERATE_SERIES(0, 160)) AS m GROUP BY k ORDER BY k;

PRAGMA disable_verification;

SELECT (SELECT COUNT(*) AS value FROM (SELECT UNNEST(ARRAY_AGG(DISTINCT id))) AS a) AS total_seats FROM (SELECT UUID() AS id, 1 AS val FROM GENERATE_SERIES(0, 100000)) AS m;

SELECT (SELECT SUM(a.val) AS value FROM (SELECT UNNEST(LIST(DISTINCT {'key': m.id, 'val': m.val})) AS a) AS x) AS total_seats FROM (SELECT UUID() AS id, 1 AS val FROM RANGE(0, 100000)) AS m CROSS JOIN (SELECT * FROM RANGE(0, 3)) AS r;

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

CREATE TABLE lists (l INT[]);

INSERT INTO lists VALUES ([1]), ([2]), ([3]), (NULL);

SELECT l, (SELECT (SELECT 42 + i1.l[1]) + 42 + i1.l[1]) AS j FROM lists AS i1 ORDER BY l;

SELECT l, (SELECT (SELECT (SELECT (SELECT 42 + i1.l[1]) + i1.l[1]) + 42 + i1.l[1]) + 42 + i1.l[1]) AS j FROM lists AS i1 ORDER BY l;

SELECT l, (SELECT (SELECT i1.l[1] + SUM(i2.l[1])) FROM lists AS i2) AS j FROM lists AS i1 ORDER BY l;

SELECT l, (SELECT (SELECT (SELECT (SELECT i1.l[1] + i1.l[1] + i1.l[1] + i1.l[1] + i1.l[1])))) AS j FROM lists AS i1 ORDER BY l;

SELECT l, (SELECT SUM(l[1]) + (SELECT 42 + i1.l[1]) FROM lists) AS j FROM lists AS i1 ORDER BY l;

SELECT l, (SELECT ((SELECT ((SELECT ((SELECT SUM(l[1]) + SUM(i4.l[1]) + SUM(i3.l[1]) + SUM(i2.l[1]) + SUM(i1.l[1]) FROM lists AS i5)) FROM lists AS i4)) FROM lists AS i3)) FROM lists AS i2) AS j FROM lists AS i1 GROUP BY l ORDER BY l;

SELECT l, (SELECT (SELECT (SELECT (SELECT i1.l[1] + i1.l[1] + i1.l[1] + i1.l[1] + i1.l[1] + i2.l[1]) FROM lists AS i2 WHERE i2.l = i1.l))) AS j FROM lists AS i1 ORDER BY l;

SELECT (SELECT (SELECT SUM(i1.l[1]) + SUM(i2.l[1]) + SUM(i3.l[1]) FROM lists AS i3) FROM lists AS i2) FROM lists AS i1 ORDER BY 1;

SELECT l, (SELECT SUM(s1.l[1]) FROM lists AS s1 INNER JOIN lists AS s2 ON (SELECT i1.l[1] + s1.l[1]) = (SELECT i1.l[1] + s2.l[1])) AS j FROM lists AS i1 ORDER BY l;

SELECT l, SUM(l[1]), (SELECT (SELECT SUM(l[1]) + SUM(i1.l[1]) + SUM(i2.l[1]) FROM lists) FROM lists AS i2) FROM lists AS i1 GROUP BY l ORDER BY l;

SELECT l, (SELECT SUM(ss1.l[1]) FROM (SELECT l FROM lists AS s1 WHERE l[1] > ANY (SELECT l[1] FROM lists WHERE l <> s1.l)) AS ss1) AS j FROM lists AS i1 ORDER BY l;

SELECT l, (SELECT SUM(ss2.l[1]) FROM (SELECT l FROM lists AS s1 WHERE l = i1.l AND l = ANY (SELECT l FROM lists WHERE l = s1.l)) AS ss2) AS j FROM lists AS i1 ORDER BY l;

SELECT l, (SELECT SUM(s1.l[1]) FROM lists AS s1 LEFT OUTER JOIN lists AS s2 ON (SELECT i1.l[1] + s1.l[1]) = (SELECT i1.l[1] + s2.l[1])) AS j FROM lists AS i1 ORDER BY l;

SELECT l, (SELECT SUM(ss1.l[1]) + SUM(ss2.l[1]) FROM (SELECT l FROM lists AS s1 WHERE l > ANY (SELECT l FROM lists WHERE l <> s1.l)) AS ss1 LEFT OUTER JOIN (SELECT l FROM lists AS s1 WHERE l = ANY (SELECT l FROM lists WHERE l = s1.l)) AS ss2 ON ss1.l = ss2.l) AS j FROM lists AS i1 ORDER BY l;

SELECT l, (SELECT SUM(s1.l[1]) FROM (SELECT l FROM lists WHERE l = i1.l) AS s1 LEFT OUTER JOIN lists AS s2 ON s1.l = s2.l) AS j FROM lists AS i1 ORDER BY l;

SELECT l, (SELECT SUM(s1.l[1]) FROM (SELECT l FROM lists WHERE l <> i1.l) AS s1 LEFT OUTER JOIN lists AS s2 ON s1.l = s2.l) AS j FROM lists AS i1 ORDER BY l;

SELECT l, (SELECT SUM(s2.l[1]) FROM lists AS s1 LEFT OUTER JOIN (SELECT l FROM lists WHERE l = i1.l) AS s2 ON s1.l = s2.l) AS j FROM lists AS i1 ORDER BY l;

SELECT l, (SELECT SUM(s2.l[1]) FROM lists AS s1 LEFT OUTER JOIN (SELECT l FROM lists WHERE l <> i1.l) AS s2 ON s1.l = s2.l) AS j FROM lists AS i1 ORDER BY l;

SELECT l, (SELECT SUM(ss2.l[1]) FROM (SELECT l FROM lists AS s1 WHERE CASE WHEN (l = i1.l AND l = ANY (SELECT l FROM lists WHERE l = s1.l)) THEN TRUE ELSE FALSE END) AS ss2) AS j FROM lists AS i1 ORDER BY l;

SELECT l, (SELECT SUM(ss2.l[1]) FROM (SELECT l FROM lists AS s1 WHERE l = i1.l AND l = ANY (SELECT l FROM lists WHERE l = s1.l)) AS ss2) AS j FROM lists AS i1 ORDER BY l;

SELECT l, (SELECT SUM(ss2.l[1]) FROM (SELECT l FROM lists AS s1 WHERE l = i1.l) AS ss2) AS j FROM lists AS i1 ORDER BY l;

SELECT l, (SELECT SUM(ss2.l[1]) FROM (SELECT l FROM lists AS s1 WHERE l = ANY (SELECT l FROM lists WHERE l = s1.l)) AS ss2) AS j FROM lists AS i1 ORDER BY l;

SELECT l, (SELECT l = ANY (SELECT l FROM lists WHERE l = s1.l) FROM lists AS s1 WHERE l = i1.l) AS j FROM lists AS i1 ORDER BY l;

SELECT l, (SELECT SUM(ss2.l[1]) FROM (SELECT l FROM lists AS s1 WHERE l = i1.l OR l = ANY (SELECT l FROM lists WHERE l = s1.l)) AS ss2) AS j FROM lists AS i1 ORDER BY l;

SELECT l, (SELECT SUM(ss2.l[1]) FROM (SELECT l FROM lists AS s1 WHERE CASE WHEN (l = i1.l AND l = ANY (SELECT l FROM lists WHERE l = s1.l)) THEN TRUE ELSE FALSE END) AS ss2) AS j FROM lists AS i1 ORDER BY l;

SELECT l, (SELECT SUM(ss2.l[1]) FROM (SELECT l FROM lists AS s1 WHERE l = i1.l AND EXISTS(SELECT l FROM lists WHERE l = s1.l)) AS ss2) AS j FROM lists AS i1 ORDER BY l;

SELECT l, (SELECT SUM(ss1.l[1]) FROM (SELECT l FROM lists AS s1 WHERE l > ANY (SELECT l FROM lists WHERE l <> s1.l)) AS ss1) AS j FROM lists AS i1 ORDER BY l;

SELECT l, (SELECT SUM(ss1.l[1]) FROM (SELECT l FROM lists AS s1 WHERE l > ANY (SELECT l FROM lists WHERE l <> s1.l)) AS ss1 LEFT OUTER JOIN (SELECT l FROM lists AS s1 WHERE l = i1.l AND l = ANY (SELECT l FROM lists WHERE l = s1.l)) AS ss2 ON ss1.l = ss2.l) AS j FROM lists AS i1 ORDER BY l;

SELECT l, (SELECT SUM(ss2.l[1]) FROM (SELECT l FROM lists AS s1 WHERE l > ANY (SELECT l FROM lists WHERE l <> s1.l)) AS ss1 LEFT OUTER JOIN (SELECT l FROM lists AS s1 WHERE l = i1.l AND l = ANY (SELECT l FROM lists WHERE l = s1.l)) AS ss2 ON ss1.l = ss2.l) AS j FROM lists AS i1 ORDER BY l;

SELECT l, (SELECT SUM(ss1.l[1]) + SUM(ss2.l[1]) FROM (SELECT l FROM lists AS s1 WHERE l > ANY (SELECT l FROM lists WHERE l <> s1.l)) AS ss1 LEFT OUTER JOIN (SELECT l FROM lists AS s1 WHERE l = i1.l AND l = ANY (SELECT l FROM lists WHERE l = s1.l)) AS ss2 ON ss1.l = ss2.l) AS j FROM lists AS i1 ORDER BY l;

SELECT l, (SELECT SUM(ss1.l[1]) + SUM(ss2.l[1]) FROM (SELECT l FROM lists AS s1 WHERE l = i1.l AND l > ANY (SELECT l FROM lists WHERE l <> s1.l)) AS ss1 LEFT OUTER JOIN (SELECT l FROM lists AS s1 WHERE l = ANY (SELECT l FROM lists WHERE l = s1.l)) AS ss2 ON ss1.l = ss2.l) AS j FROM lists AS i1 ORDER BY l;

SELECT l, (SELECT SUM(ss1.l[1]) + SUM(ss2.l[1]) FROM (SELECT l FROM lists AS s1 WHERE l = i1.l AND l > ANY (SELECT l FROM lists WHERE l <> s1.l)) AS ss1 LEFT OUTER JOIN (SELECT l FROM lists AS s1 WHERE l <> i1.l OR l = ANY (SELECT l FROM lists WHERE l = s1.l)) AS ss2 ON ss1.l = ss2.l) AS j FROM lists AS i1 ORDER BY l;

SELECT l, (SELECT * FROM (SELECT (SELECT 42 + i1.l[1])) AS s1) AS j FROM lists AS i1 ORDER BY l;

SELECT l, (SELECT s1.k + s2.k FROM (SELECT (SELECT 42 + i1.l[1]) AS k) AS s1, (SELECT (SELECT 42 + i1.l[1]) AS k) AS s2) AS j FROM lists AS i1 ORDER BY l;

SELECT l, (SELECT s1.k + s2.k FROM (SELECT (SELECT 42 + i1.l[1]) AS k) AS s1 LEFT OUTER JOIN (SELECT (SELECT 42 + i1.l[1]) AS k) AS s2 ON s1.k = s2.k) AS j FROM lists AS i1 ORDER BY l;

SELECT l, (SELECT i1.l[1] IN (1, 2, 3, 4, 5, 6, 7, 8)) AS j FROM lists AS i1 ORDER BY l;

SELECT (SELECT (SELECT COVAR_POP(i1.l[1], i3.l[1]) FROM lists AS i3) FROM lists AS i2 LIMIT 1) FROM lists AS i1 ORDER BY 1;

SELECT (SELECT (SELECT COVAR_POP(i2.l[1], i3.l[1]) FROM lists AS i3) FROM lists AS i2 LIMIT 1) FROM lists AS i1 ORDER BY 1;

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

CREATE TABLE nested_lists (l INT[][]);

INSERT INTO nested_lists VALUES ([[0], [1]]), ([[2], [NULL, 3]]), ([[4, 5], [6, 7], [], [8]]), (NULL), (CAST([NULL] AS INT[][]));

SELECT UNNEST(l) FROM nested_lists;

SELECT l, (SELECT SUM(a) FROM (SELECT UNNEST(b) AS a FROM (SELECT UNNEST(l) AS b))) FROM nested_lists ORDER BY l;

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (1), (2), (3), (NULL);

SELECT i, EXISTS(SELECT i FROM integers WHERE i1.i > 2) FROM integers AS i1 ORDER BY i;

SELECT i, EXISTS(SELECT i FROM integers WHERE i = i1.i) FROM integers AS i1 ORDER BY i;

SELECT i, EXISTS(SELECT i FROM integers WHERE i IS NULL OR i > i1.i * 10) FROM integers AS i1 ORDER BY i;

SELECT i, EXISTS(SELECT i FROM integers WHERE i1.i > i OR i1.i IS NULL) FROM integers AS i1 ORDER BY i;

SELECT i FROM integers AS i1 WHERE EXISTS(SELECT i FROM integers WHERE i = i1.i) ORDER BY i;

SELECT EXISTS(SELECT i FROM integers WHERE i > MIN(i1.i)) FROM integers AS i1;

SELECT i, SUM(i) FROM integers AS i1 GROUP BY i HAVING EXISTS(SELECT i FROM integers WHERE i > MIN(i1.i)) ORDER BY i;

SELECT EXISTS(SELECT i + MIN(i1.i) FROM integers WHERE i = 3) FROM integers AS i1;

SELECT EXISTS(SELECT i + MIN(i1.i) FROM integers WHERE i = 5) FROM integers AS i1;

SELECT EXISTS(SELECT i FROM integers WHERE i = i1.i) AS g, COUNT(*) FROM integers AS i1 GROUP BY g ORDER BY g;

SELECT SUM(CASE WHEN EXISTS(SELECT i FROM integers WHERE i = i1.i) THEN 1 ELSE 0 END) FROM integers AS i1;

SELECT (SELECT COVAR_POP(i1.i, i2.i) FROM integers AS i2) FROM integers AS i1 ORDER BY 1;

SELECT (SELECT COVAR_POP(i2.i, i1.i) FROM integers AS i2) FROM integers AS i1 ORDER BY 1;

SELECT (SELECT COVAR_POP(i1.i + i2.i, i1.i + i2.i) FROM integers AS i2) FROM integers AS i1 ORDER BY 1;

SELECT (SELECT COVAR_POP(i2.i, i2.i) FROM integers AS i2) FROM integers AS i1 ORDER BY 1;

SELECT (SELECT COVAR_POP(i1.i, i1.i) FROM integers AS i2 LIMIT 1) FROM integers AS i1 ORDER BY 1;

CREATE TABLE all_types AS SELECT * EXCLUDE (small_enum, medium_enum, large_enum) FROM TEST_ALL_TYPES() LIMIT 0;

PRAGMA enable_verification;

CREATE OR REPLACE TABLE t1 (c1 BIGINT);

INSERT INTO t1 VALUES (1);

CREATE OR REPLACE TABLE t2 (c1 BIGINT);

SELECT c1, NOT EXISTS(SELECT 1 FROM t2 WHERE t1.c1 <= t2.c1) FROM t1;

SELECT c1 FROM t1 WHERE NOT EXISTS(SELECT 1 FROM t2 WHERE t1.c1 <= t2.c1);

PRAGMA enable_verification;

SELECT EXISTS(SELECT 1);

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (1), (2), (3), (NULL);

SELECT EXISTS(SELECT 1) FROM integers;

SELECT EXISTS(SELECT * FROM integers);

SELECT EXISTS(SELECT * FROM integers WHERE i IS NULL);

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (1), (2), (3), (NULL);

SELECT * FROM integers WHERE EXISTS(SELECT 1) ORDER BY i;

SELECT * FROM integers WHERE EXISTS(SELECT * FROM integers) ORDER BY i;

SELECT * FROM integers WHERE NOT EXISTS(SELECT * FROM integers) ORDER BY i;

SELECT * FROM integers WHERE EXISTS(SELECT NULL) ORDER BY i;

SELECT EXISTS(SELECT * FROM integers);

SELECT EXISTS(SELECT * FROM integers WHERE i > 10);

SELECT EXISTS(SELECT * FROM integers), EXISTS(SELECT * FROM integers);

SELECT EXISTS(SELECT * FROM integers) AND EXISTS(SELECT * FROM integers);

SELECT EXISTS(SELECT EXISTS(SELECT * FROM integers));

SELECT * FROM integers WHERE 1 IN (SELECT 1) ORDER BY i;

SELECT * FROM integers WHERE 1 IN (SELECT * FROM integers) ORDER BY i;

SELECT * FROM integers WHERE 1 IN (SELECT CAST(NULL AS INT)) ORDER BY i;

SELECT 1 IN (SELECT CAST(NULL AS INT)) FROM integers;

SELECT NULL IN (SELECT * FROM integers) FROM integers;

SELECT SUM(i) FROM integers WHERE 1 IN (SELECT * FROM integers);

PRAGMA enable_verification;

CREATE TABLE tbl (i INT, arr INT[]);

INSERT INTO tbl VALUES (1, [1, 3, 7]), (2, [8, NULL]), (3, [3, NULL, 4]), (NULL, CAST([] AS INT[]));

SELECT * FROM tbl JOIN LATERAL (SELECT UNNEST(tbl.arr)) AS t(b) ON (i = b) ORDER BY i;

SELECT * FROM tbl JOIN LATERAL (SELECT UNNEST(tbl.arr)) AS t(b) ON (i <> b) ORDER BY i, b;

SELECT * FROM tbl JOIN LATERAL (SELECT UNNEST(tbl.arr)) AS t(b) ON (i < b) ORDER BY i, b;

SELECT * FROM tbl JOIN LATERAL (SELECT UNNEST(tbl.arr)) AS t(b) ON (i >= b) ORDER BY i, b;

SELECT * FROM tbl JOIN LATERAL (SELECT UNNEST([tbl.i * tbl.i])) AS t(b) ON (i >= b) ORDER BY i, b;

SELECT * FROM tbl JOIN LATERAL (SELECT x FROM GENERATE_SERIES(0, 5, 1) AS t(x) WHERE x > i) AS t(b) ON (i >= b) ORDER BY i, b;

SELECT * FROM tbl JOIN LATERAL (SELECT x FROM GENERATE_SERIES(0, 5, 1) AS t(x) WHERE x < i) AS t(b) ON (i >= b) ORDER BY i, b;

COPY (SELECT CAST('2000-01-01' AS DATE) AS dt) TO '__TEST_DIR__/datetest.csv';

CREATE VIEW v1 AS SELECT * FROM READ_CSV('__TEST_DIR__/datetest.csv', columns = {'dt': date});

SELECT * FROM v1;

SELECT * FROM (SELECT CAST('1992-01-01' AS DATE) AS date), v1;

SELECT * FROM (SELECT 42 AS c1) AS ref, (SELECT a + b + 1 FROM (SELECT 1) AS t1(a), (SELECT (SELECT (SELECT ref.c1 + 1)) + 1) AS t2(b));

SELECT NULL FROM (SELECT 42 AS c1) AS ref, LATERAL (SELECT NULL FROM (SELECT NULL) AS r2, (SELECT (SELECT (SELECT ref.c1))) AS r3) AS r4;

PRAGMA enable_verification;

SELECT x, a, b FROM (VALUES (1), (2)) AS t2(x), LATERAL (SELECT COUNT(*), COUNT(a) FROM (SELECT 1, 2 WHERE 1 = x) AS t(a, b) GROUP BY GROUPING SETS ((), (b), (a, b))) AS t3(a, b) ORDER BY ALL;

SELECT x, a FROM (VALUES (1), (2)) AS t2(x), LATERAL (SELECT SUM(a) FROM (SELECT 1, 2 WHERE 1 = x) AS t(a, b) GROUP BY GROUPING SETS ((), (b), (a, b))) AS t3(a) ORDER BY ALL;

SELECT * FROM (VALUES (1), (2)) AS t2(x), LATERAL (SELECT SUM(a) FROM (SELECT 42 AS a) WHERE x = 1) ORDER BY ALL;

SELECT * FROM (VALUES (1), (2)) AS t2(x) LEFT JOIN (SELECT SUM(a) FROM (SELECT 42 AS a) WHERE x = 1) ON (1 = 1) ORDER BY ALL;

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (1), (2), (3), (NULL);

SELECT * FROM integers, (SELECT SUM(i)) AS t(sum);

SELECT * FROM integers, LATERAL (SELECT SUM(i)) AS t(sum);

SELECT * FROM integers AS i1, LATERAL (SELECT SUM(i + i1.i) FROM integers) AS t(sum) ORDER BY i;

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (1), (2), (3), (NULL);

SELECT * FROM integers, (SELECT [i + 1]) AS t(k), (SELECT UNNEST(k)) AS t2(l) ORDER BY i;

SELECT * FROM integers, LATERAL (SELECT [i + 1]) AS t(k), LATERAL (SELECT UNNEST(k)) AS t2(l) ORDER BY i;

SELECT * FROM integers CROSS JOIN LATERAL (SELECT [i + 1]) AS t(k) CROSS JOIN LATERAL (SELECT UNNEST(k)) AS t2(l) ORDER BY i;

SELECT * FROM integers, (SELECT integers) ORDER BY i;

SELECT * FROM integers, LATERAL (SELECT integers.*) AS t2(k) ORDER BY i;

SELECT * FROM integers, LATERAL (SELECT *) AS t2(k) ORDER BY i;

PRAGMA enable_verification;

CREATE TABLE tbl (x INT, gen_x AS (x + 5));

INSERT INTO tbl VALUES (1), (2), (3), (NULL);

SELECT * FROM tbl, (SELECT gen_x + 10) ORDER BY x;

PRAGMA enable_verification;

CREATE FUNCTION my_func(x) AS (x + x);

CREATE TABLE tbl (x INT);

INSERT INTO tbl VALUES (1), (2), (3), (NULL);

SELECT * FROM tbl, (SELECT MY_FUNC(x)) ORDER BY x;

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (1), (2), (3), (NULL);

SELECT i1.i, SUM(r2.k), COUNT(*) FROM integers AS i1, LATERAL (SELECT i1.i + i2.i FROM integers AS i2, LATERAL (SELECT i2.i + i3.i FROM integers AS i3) AS r3) AS r2(k) GROUP BY i1.i ORDER BY i1.i;

SELECT i1.i, SUM(r2.k), COUNT(*) FROM integers AS i1, LATERAL (SELECT i1.i + i2.i FROM integers AS i2, LATERAL (SELECT i1.i + i2.i + i3.i FROM integers AS i3) AS r3) AS r2(k) GROUP BY i1.i ORDER BY i1.i;

SELECT (SELECT k + l FROM (SELECT i1.i + 1) AS t1(k), LATERAL (SELECT k + 1) AS t2(l)) FROM integers AS i1 ORDER BY i;

SELECT * FROM (SELECT 42) AS t(i) WHERE i IN (SELECT l FROM (SELECT 42) AS t(l), (SELECT i * 2) AS t2(j), (SELECT i + j) AS t3(k) WHERE k IN (SELECT l * 3 FROM (SELECT 42 AS l) AS t4(l) WHERE k - i = j));

SELECT * FROM (SELECT 42) AS t(i), (SELECT * FROM (SELECT 142 AS k) AS t3(k), (SELECT 1 WHERE k - i = 100) AS t4(l));

SELECT * FROM (SELECT 42) AS t1(i), (SELECT 22) AS t2(j), (SELECT 1 WHERE i + j = 64) AS t3(l);

SELECT * FROM (SELECT 64) AS t1(i), (SELECT 22) AS t2(j), (SELECT 1 WHERE i + j = 64) AS t3(l);

SELECT * FROM (SELECT 42) AS t1(i), (SELECT 22) AS t2(j), (SELECT i + j WHERE i + j = 64) AS t3(l);

SELECT * FROM (SELECT i, j, k FROM (SELECT 42) AS t(i), (SELECT i * 2) AS t2(j), (SELECT i + j) AS t3(k));

SELECT * FROM (SELECT i, j, k FROM (SELECT 42) AS t(i), (SELECT i * 2) AS t2(j), (SELECT i + j) AS t3(k));

SELECT * FROM (SELECT 42) AS t(i), (SELECT * FROM (SELECT 142 AS k) AS t3(k), (SELECT 1 WHERE i + k = 0) AS t4(l));

SELECT * FROM (SELECT * FROM (SELECT 42) AS t1(i), (SELECT 22) AS t2(j), (SELECT 1 WHERE i + j = 64) AS t3(l));

SELECT * FROM (SELECT * FROM (SELECT 42) AS t(i), (SELECT * FROM (SELECT 142 AS k) AS t3(k), (SELECT 1 WHERE k - i = 100) AS t4(l)));

SELECT * FROM (SELECT * FROM (SELECT 42) AS t(i), (SELECT * FROM (SELECT 142 AS k) AS t3(k), (SELECT 1 WHERE i - k = -100) AS t4(l)));

SELECT * FROM (SELECT 42) AS t(i), (SELECT * FROM (SELECT 142 AS k) AS t3(k), (SELECT * FROM (SELECT 242 AS l) AS t4(l), (SELECT 1 WHERE i + l + k = 426) AS t5(m)));

SELECT i FROM (SELECT 42) AS t(i) WHERE i * 2 IN (SELECT j FROM (SELECT i) AS t(l), (SELECT l + i) AS t2(j), (SELECT i + j) AS t3(k));

SELECT * FROM (SELECT 42) AS t(i) WHERE i IN (SELECT k FROM (SELECT 42) AS t(k) WHERE k IN (SELECT l FROM (SELECT 42 AS l) AS t4(l) WHERE i - k IN (SELECT * FROM (SELECT i + 5))));

SELECT * FROM (SELECT 42) AS t(i), (SELECT * FROM (SELECT 142 AS k) AS t3(k), (SELECT 1 WHERE i + k = 0) AS t4(l));

SELECT * FROM (SELECT 42) AS t4(m), (SELECT 64) AS t5(n) WHERE m IN (SELECT j FROM (SELECT 21 * m * n) AS t(i), (SELECT m) AS t2(j));

SELECT * FROM (SELECT 42) AS t4(m) WHERE m IN (SELECT i FROM (SELECT m) AS t(i), (SELECT i * m / 2 * 2 / m) AS t2(j));

SELECT * FROM (SELECT 10) AS t(i) WHERE i IN (SELECT k FROM (SELECT 20) AS t(k) WHERE k IN (SELECT l FROM (SELECT 30) AS t4(l) WHERE i - k IN (SELECT * FROM (SELECT i + 100))));

SELECT * FROM (SELECT 42) AS t(i) WHERE i IN (SELECT k FROM (SELECT 42) AS t(k) WHERE k IN (SELECT l FROM (SELECT 42 AS l) AS t4(l) WHERE i - k IN (SELECT * FROM (SELECT 0))));

SELECT * FROM (SELECT 42) AS t(i) WHERE i IN (SELECT k FROM (SELECT 42) AS t(k) WHERE k IN (SELECT i FROM (SELECT i) AS t4 WHERE i * 2 - k IN (SELECT * FROM (SELECT i))));

SELECT * FROM (SELECT 42) AS t1(i), (SELECT 22) AS t2(j), (SELECT i + j WHERE i + j = (SELECT 64)) AS t3(l);

SELECT * FROM (SELECT 42) AS t(i) WHERE i IN (SELECT k FROM (SELECT i) AS t(k) WHERE k = 0);

SELECT * FROM (SELECT 42) AS t(i) WHERE i IN (SELECT l FROM (SELECT 42) AS t(l) WHERE l IN (SELECT l FROM (SELECT 42 AS l) AS t4(l), (SELECT l + 5) AS t5(n) WHERE i + 2 * l IN (SELECT k FROM (SELECT i + 5), (SELECT i * 2) AS t2(j), (SELECT i + j) AS t3(k) WHERE k - l IN (SELECT i * 2))));

SELECT (SELECT (SELECT k FROM (SELECT i) AS t2(j), (SELECT j) AS t3(k))) FROM (SELECT 42) AS t(i);

SELECT i FROM (SELECT 42) AS t(i) WHERE i IN (SELECT l FROM (SELECT 42) AS t(l), (SELECT 42) AS t2(j), (SELECT i + j + l) AS t3(k));

SELECT * FROM (SELECT 42) AS t(i), (SELECT * FROM (SELECT 142) AS t3(y), (SELECT * FROM (SELECT 242) AS t4(z), (SELECT 58 WHERE i + y + z = 426) AS t5(m))) WHERE z - y - m IN (SELECT l FROM (SELECT 42) AS t(l) WHERE l IN (SELECT l FROM (SELECT 42 AS l) AS t4(l), (SELECT l + 5) AS t5(n) WHERE i + 2 * l IN (SELECT k FROM (SELECT i + 5), (SELECT i * 2) AS t2(j), (SELECT i + j) AS t3(k) WHERE k - l IN (SELECT i * 2))));

SELECT (SELECT (SELECT k FROM (SELECT i) AS t2(j), (SELECT j) AS t3(k))) FROM (SELECT 42) AS t(i) WHERE i IN (SELECT l FROM (SELECT 42) AS t(l) WHERE l IN (SELECT l FROM (SELECT 42 AS l) AS t4(l), (SELECT l + 5) AS t5(n) WHERE i + 2 * l IN (SELECT k FROM (SELECT i + 5), (SELECT i * 2) AS t2(j), (SELECT i + j) AS t3(k) WHERE k - l IN (SELECT i * 2))));

SELECT * FROM (SELECT 42) AS t(i) WHERE i IN (SELECT l FROM (SELECT 42) AS t4(l) WHERE l IN (SELECT l FROM (SELECT (SELECT z - y AS l FROM (SELECT x) AS t20(y), (SELECT y + x) AS t21(z)) FROM (SELECT 42) AS t22(x)), (SELECT l + 5) AS t5(n) WHERE i + 2 * l IN (SELECT k FROM (SELECT i + 5), (SELECT i * 2) AS t2(j), (SELECT i + j) AS t3(k) WHERE k - l IN (SELECT i * 2))));

SELECT (SELECT res.* FROM (SELECT 1) AS t2(z), (SELECT (SELECT i FROM (SELECT MAX(k) FROM GENERATE_SERIES(1, 10) AS t(k)) AS t(i) GROUP BY i HAVING (COUNT(*)) = x)) AS res) FROM GENERATE_SERIES(1, 5) AS t(x);

CREATE VIEW strings AS (WITH RECURSIVE t(a) AS (SELECT 1 UNION SELECT a + 1 FROM t WHERE a < 5) SELECT * FROM t ORDER BY a);

SELECT SUM(a) FROM strings WHERE a IN (SELECT k FROM (SELECT 1) AS t(l), (SELECT 1 + l) AS t2(j), (SELECT a - j FROM strings) AS t3(k));

CREATE VIEW strings2 AS (WITH RECURSIVE t2(b) AS (SELECT 0 UNION SELECT 10 * a FROM strings WHERE a < 5) SELECT * FROM t2 ORDER BY b);

SELECT * FROM strings2 WHERE b IN (SELECT k FROM (SELECT 10) AS t(l), (SELECT 10 + l) AS t2(j), (SELECT l + 10 * a FROM strings) AS t3(k)) GROUP BY b HAVING b % 20 = 0 ORDER BY b DESC;

PRAGMA enable_verification;

SELECT total_seats FROM (SELECT LIST(DISTINCT {'key': UUID(), 'val': 1}) AS l FROM RANGE(0, 1600)) AS m, (SELECT SUM(a.val) AS value FROM (SELECT UNNEST(l) AS a) AS x) AS l(total_seats);

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (1), (2), (3), (NULL);

SELECT * FROM integers LEFT JOIN LATERAL (SELECT integers.i + 1) AS t(b) ON (i = b) ORDER BY i;

SELECT * FROM integers LEFT JOIN LATERAL (SELECT integers.i) AS t(b) ON (i = b) ORDER BY i;

SELECT * FROM integers LEFT JOIN LATERAL (SELECT * FROM integers WHERE i <> integers.i) AS t(b) ON (i = b) ORDER BY i;

SELECT * FROM integers INNER JOIN LATERAL (SELECT integers.i WHERE integers.i IN (1, 3)) AS t(b) ON (i = b) ORDER BY i;

SELECT * FROM integers LEFT JOIN LATERAL (SELECT integers.i WHERE integers.i IN (1, 3)) AS t(b) ON (i = b) ORDER BY i;

SELECT * FROM integers LEFT JOIN LATERAL (SELECT integers.i WHERE integers.i IN (1, 3)) AS t(b) ON (i + b < b) ORDER BY i;

SELECT * FROM (SELECT * FROM integers WHERE i = 2) AS t(i) FULL JOIN LATERAL (SELECT t.i WHERE t.i IN (1, 3)) AS t2(b) ON (i = b) ORDER BY i, b;

SELECT * FROM (SELECT * FROM integers WHERE i = 2) AS t(i) RIGHT JOIN LATERAL (SELECT t.i WHERE t.i IN (1, 3)) AS t2(b) ON (i = b) ORDER BY i, b;

PRAGMA enable_verification;

SELECT * FROM (SELECT 42) AS t(x), (SELECT x, ROW_NUMBER() OVER () QUALIFY NULL);

SELECT * FROM (SELECT 42) AS t(x), (SELECT x * 2 QUALIFY ROW_NUMBER() OVER () < 10);

CREATE TABLE lists AS SELECT [i, NULL, i + 1, i + 2, NULL] AS l FROM GENERATE_SERIES(0, 999999, 1) AS t(i);

SELECT SUM(k) FROM lists, UNNEST(l) AS t(k);

CREATE TABLE lists_strings AS SELECT ['longstringprefix_' || i, NULL, 'longstringprefix_' || (i + 1), 'longstringprefix_' || (i + 2), NULL] AS l FROM GENERATE_SERIES(0, 999999, 1) AS t(i);

SELECT SUM(CAST(REPLACE(k, 'longstringprefix_', '') AS BIGINT)) FROM lists_strings, UNNEST(l) AS t(k);

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (1), (2), (3), (NULL);

SELECT * FROM integers, LATERAL (VALUES (integers.i + 1)) AS t(k) ORDER BY i;

SELECT * FROM integers AS a, integers AS b JOIN LATERAL (VALUES (a.i)) AS ss(x) ON (TRUE) ORDER BY a.i, b.i;

PRAGMA enable_verification;

SELECT s1, s2, sm FROM GENERATE_SERIES(1, 3) AS s1(s1), LATERAL (SELECT s2, SUM(s1 + s2) AS sm FROM GENERATE_SERIES(1, 3) AS s2(s2) GROUP BY s2) AS ss ORDER BY 1, 2;

CREATE TABLE agg_data_1k AS SELECT g * 10 AS g FROM GENERATE_SERIES(0, 999) AS g(g);

SELECT * FROM (VALUES (100), (300), (500)) AS r(a), LATERAL (SELECT CAST((g / 2) AS INT) AS c1, ARRAY_AGG(CAST(g AS INT)) AS c2, COUNT(*) AS c3 FROM agg_data_1k WHERE g < r.a GROUP BY g / 2) AS s ORDER BY 1, 2, 4, 3;

CREATE TABLE INT2_TBL (f1 SMALLINT);

INSERT INTO INT2_TBL (f1) VALUES ('0   '), ('  1234 '), ('    -1234'), ('32767') /* largest and smallest values */, ('-32767');

CREATE TABLE INT4_TBL (f1 INT);

INSERT INTO INT4_TBL (f1) VALUES ('   0  '), ('123456     '), ('    -123456'), ('2147483647') /* largest and smallest values */, ('-2147483647');

CREATE TABLE INT8_TBL (q1 TINYINT, q2 TINYINT);

INSERT INTO INT8_TBL VALUES ('  123   ', '  456'), ('123   ', '4567890123456789'), ('4567890123456789', '123'), (4567890123456789, '4567890123456789'), ('+4567890123456789', '-4567890123456789');

CREATE TABLE TEXT_TBL (f1 TEXT);

INSERT INTO TEXT_TBL VALUES ('doh!'), ('hi de ho neighbor');

CREATE TABLE tenk1 (unique1 INT, unique2 INT, two INT, four INT, ten INT, twenty INT, hundred INT, thousand INT, twothousand INT, fivethous INT, tenthous INT, odd INT, even INT, stringu1 TEXT, stringu2 TEXT, string4 TEXT);

COPY tenk1 FROM 'data/csv/tenk.tsv.gz' WITH (DELIMITER '\t');

SELECT * FROM int4_tbl AS i41, LATERAL (SELECT 1 AS x FROM (SELECT i41.f1 AS lat, i42.f1 AS loc FROM int8_tbl AS i81, int4_tbl AS i42) AS ss1 RIGHT JOIN int4_tbl AS i43 ON (i43.f1 > 1) WHERE ss1.loc = ss1.lat) AS ss2 WHERE i41.f1 > 0;

SELECT ss1.d1 FROM tenk1 AS t1 INNER JOIN tenk1 AS t2 ON t1.tenthous = t2.ten INNER JOIN int8_tbl AS i8 LEFT JOIN int4_tbl AS i4 INNER JOIN (SELECT 64 AS d1 FROM tenk1 AS t3, LATERAL (SELECT ABS(t3.unique1) + RANDOM()) AS ss0(x) WHERE t3.fivethous < 0) AS ss1 ON i4.f1 = ss1.d1 ON i8.q1 = i4.f1 ON t1.tenthous = ss1.d1 WHERE t1.unique1 < i4.f1;

SELECT * FROM (SELECT 1 AS x) AS ss1 LEFT JOIN (SELECT 2 AS y) AS ss2 ON (TRUE), LATERAL (SELECT ss2.y AS z LIMIT 1) AS ss3;

SELECT * FROM (SELECT 0 AS z) AS t1 LEFT JOIN (SELECT TRUE AS a) AS t2 ON TRUE, LATERAL (SELECT TRUE AS b UNION ALL SELECT a AS b) AS t3 WHERE b;

SELECT * FROM text_tbl AS t1 LEFT JOIN int8_tbl AS i8 ON i8.q2 = 123, LATERAL (SELECT i8.q1, t2.f1 FROM text_tbl AS t2 LIMIT 1) AS ss WHERE t1.f1 = ss.f1;

SELECT * FROM text_tbl AS t1 LEFT JOIN int8_tbl AS i8 ON i8.q2 = 123, LATERAL (SELECT i8.q1, t2.f1 FROM text_tbl AS t2 LIMIT 1) AS ss1, LATERAL (SELECT ss1.* FROM text_tbl AS t3 LIMIT 1) AS ss2 WHERE t1.f1 = ss2.f1;

SELECT 1 FROM text_tbl AS tt1 INNER JOIN text_tbl AS tt2 ON (tt1.f1 = 'foo') LEFT JOIN text_tbl AS tt3 ON (tt3.f1 = 'foo') LEFT JOIN text_tbl AS tt4 ON (tt3.f1 = tt4.f1), LATERAL (SELECT tt4.f1 AS c0 FROM text_tbl AS tt5 LIMIT 1) AS ss1 WHERE tt1.f1 = ss1.c0;

SELECT ss2.* FROM int4_tbl AS i41 LEFT JOIN int8_tbl AS i8 JOIN (SELECT i42.f1 AS c1, i43.f1 AS c2, 42 AS c3 FROM int4_tbl AS i42, int4_tbl AS i43) AS ss1 ON i8.q1 = ss1.c2 ON i41.f1 = ss1.c1, LATERAL (SELECT i41.*, i8.*, ss1.* FROM text_tbl LIMIT 1) AS ss2 WHERE ss1.c2 = 0;

SELECT i8.*, ss.v, t.unique2 FROM int8_tbl AS i8 LEFT JOIN int4_tbl AS i4 ON i4.f1 = 1 LEFT JOIN LATERAL (SELECT i4.f1 + 1 AS v) AS ss ON TRUE LEFT JOIN tenk1 AS t ON t.unique2 = ss.v WHERE q2 = 456;

SELECT unique2, x.* FROM tenk1 AS a, LATERAL (SELECT * FROM int4_tbl AS b WHERE f1 = a.unique1) AS x;

SELECT unique2, x.* FROM int4_tbl AS x, LATERAL (SELECT unique2 FROM tenk1 WHERE f1 = unique1) AS ss;

SELECT unique2, x.* FROM int4_tbl AS x LEFT JOIN LATERAL (SELECT unique1, unique2 FROM tenk1 WHERE f1 = unique1) AS ss ON TRUE ORDER BY ALL;

SELECT *, (SELECT r FROM (SELECT q1 AS q2) AS x, (SELECT q2 AS r) AS y) FROM int8_tbl;

SELECT *, (SELECT r FROM (SELECT q1 AS q2) AS x, LATERAL (SELECT q2 AS r) AS y) FROM int8_tbl;

SELECT COUNT(*) FROM tenk1 AS a, LATERAL GENERATE_SERIES(1, two) AS g;

SELECT * FROM GENERATE_SERIES(100, 200) AS g(g), LATERAL (SELECT * FROM int8_tbl AS a WHERE g = q1 UNION ALL SELECT * FROM int8_tbl AS b WHERE g = q2) AS ss;

SELECT COUNT(*) FROM tenk1 AS a, tenk1 AS b JOIN LATERAL (VALUES (a.unique1)) AS ss(x) ON b.unique2 = ss.x;

SELECT COUNT(*) FROM tenk1 AS a, tenk1 AS b JOIN LATERAL (VALUES (a.unique1), (-1)) AS ss(x) ON b.unique2 = ss.x;

SELECT * FROM (SELECT f1 / 2 AS x FROM int4_tbl) AS ss1 JOIN int4_tbl AS i4 ON x = f1, LATERAL (SELECT x) AS ss2(y);

SELECT * FROM (SELECT f1 AS x FROM int4_tbl) AS ss1 JOIN int4_tbl AS i4 ON x = f1, LATERAL (VALUES (x)) AS ss2(y);

SELECT * FROM ((SELECT f1 / 2 AS x FROM int4_tbl) AS ss1 JOIN int4_tbl AS i4 ON x = f1) AS j, LATERAL (SELECT x) AS ss2(y);

SELECT * FROM (VALUES (1)) AS x(lb), LATERAL GENERATE_SERIES(lb, 4) AS x4 ORDER BY ALL;

SELECT * FROM (SELECT f1 / 1000000000 FROM int4_tbl) AS x(lb), LATERAL GENERATE_SERIES(lb, 4) AS x4 ORDER BY ALL;

SELECT * FROM (VALUES (1)) AS x(lb), LATERAL (VALUES (lb)) AS y(lbcopy);

SELECT * FROM (VALUES (1)) AS x(lb), LATERAL (SELECT lb FROM int4_tbl) AS y(lbcopy);

SELECT x.* FROM int8_tbl AS x LEFT JOIN (SELECT q1, COALESCE(q2, 0) AS q2 FROM int8_tbl) AS y ON x.q2 = y.q1, LATERAL (SELECT x.q1, y.q1, y.q2) AS v(xq1, yq1, yq2) ORDER BY 1, 2;

SELECT 1 FROM tenk1 AS a, LATERAL (SELECT MAX(a.unique1) FROM int4_tbl AS b) AS ss;

CREATE TABLE xx1 AS SELECT f1 AS x1, -f1 AS x2 FROM int4_tbl;

SELECT * FROM xx1;

UPDATE xx1 SET x2 = f1 FROM (SELECT * FROM int4_tbl WHERE f1 = x1) AS ss;

UPDATE xx1 SET x2 = f1 FROM (SELECT * FROM int4_tbl WHERE f1 = xx1.x1) AS ss;

UPDATE xx1 SET x2 = f1 FROM LATERAL (SELECT * FROM int4_tbl WHERE f1 = x1) AS ss;

UPDATE xx1 SET x2 = f1 FROM xx1 AS xx2, LATERAL (SELECT * FROM int4_tbl WHERE f1 = xx2.x1 AND f1 = -2147483647) AS ss;

SELECT * FROM xx1;

DELETE FROM xx1 USING (SELECT * FROM int4_tbl WHERE f1 = x1) AS ss;

DELETE FROM xx1 USING (SELECT * FROM int4_tbl WHERE f1 = xx1.x1) AS ss;

DELETE FROM xx1 USING LATERAL (SELECT * FROM int4_tbl WHERE f1 = x1) AS ss;

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

SELECT (SELECT MIN(val) FROM UNNEST((SELECT a)) AS t(val)) FROM (SELECT [1, 2, 3, NULL]) AS t(a);

SELECT (SELECT MIN(val) FROM UNNEST((SELECT (SELECT a))) AS t(val)) FROM (SELECT [1, 2, 3, NULL]) AS t(a);

SELECT * FROM (SELECT [1, 2, 3] AS a), UNNEST((SELECT (SELECT (SELECT a))));

SELECT (SELECT MIN(val) FROM UNNEST(a) AS t(val)) FROM (SELECT [1, 2, 3, NULL]) AS t(a);

SELECT * FROM (SELECT 42) AS t(a), (SELECT t.a + 1);

SELECT * FROM (SELECT 42) AS t(a) CROSS JOIN LATERAL (SELECT t.a + 1);

SELECT * FROM (SELECT 42 UNION ALL SELECT 84) AS t(a), (SELECT t.a + 1) ORDER BY ALL;

SELECT (SELECT MIN(val) FROM UNNEST(a) AS t(val)) FROM (SELECT [1, 2, 3, NULL]) AS t(a);

SELECT * FROM (SELECT [42, 43, 44]) AS t(a), (SELECT UNNEST(t.a)) ORDER BY ALL;

SELECT * FROM (SELECT [42, 43, 44]) AS t(a), (SELECT UNNEST(t.a)) AS t2(b) WHERE b = 43;

SELECT * FROM (SELECT [42, 43, 44] UNION ALL SELECT [45, NULL, 46]) AS t(a), (SELECT UNNEST(t.a)) AS t2(b) ORDER BY ALL;

SELECT SUM(b) FROM (SELECT [42, 43, 44] UNION ALL SELECT [45, NULL, 46]) AS t(a), (SELECT UNNEST(t.a)) AS t2(b);

SELECT a, SUM(b) FROM (SELECT [42, 43, 44] UNION ALL SELECT [45, NULL, 46]) AS t(a), (SELECT UNNEST(t.a)) AS t2(b) GROUP BY a ORDER BY a;

SELECT * FROM (SELECT [42, 43, 44]) AS t(a) JOIN (SELECT UNNEST(t.a)) AS t2(b) ON (TRUE) ORDER BY ALL;

SELECT * FROM (SELECT [42, 43, 44]) AS t(a) JOIN LATERAL (SELECT UNNEST(t.a)) AS t2(b) ON (TRUE) ORDER BY ALL;

SELECT * FROM (SELECT [42, 43, 44]) AS t(a) JOIN LATERAL (SELECT UNNEST(t.a)) AS t2(b) ON (a[1] = b);

SELECT * FROM (SELECT [42, 43, 44]) AS t(a) JOIN LATERAL (SELECT UNNEST(t.a)) AS t2(b) ON (a[1] < b) ORDER BY ALL;

SELECT * FROM (SELECT [42, 43, 44]) AS t(a) JOIN LATERAL (SELECT UNNEST(t.a)) AS t2(b) ON (FALSE) ORDER BY ALL;

SELECT * FROM (SELECT 42) AS t(a) JOIN LATERAL (SELECT t.a + 1) AS t2(b) ON (TRUE);

SELECT * FROM (SELECT 42) AS t(a) JOIN LATERAL (SELECT t.a + 1) AS t2(b) ON (a + b >= 80);

SELECT * FROM (SELECT [42, 43, 44]) AS t(a) JOIN LATERAL (SELECT * FROM UNNEST(t.a)) AS t2(b) ON (TRUE) ORDER BY b;

CREATE TABLE students (id INT, name TEXT, major TEXT, year INT);

CREATE TABLE exams (sid INT, course TEXT, curriculum TEXT, grade INT, year INT);

INSERT INTO students VALUES (1, 'Mark', 'CS', 2017);

INSERT INTO students VALUES (2, 'Dirk', 'CS', 2017);

INSERT INTO exams VALUES (1, 'Database Systems', 'CS', 10, 2015);

INSERT INTO exams VALUES (1, 'Graphics', 'CS', 9, 2016);

INSERT INTO exams VALUES (2, 'Database Systems', 'CS', 7, 2015);

INSERT INTO exams VALUES (2, 'Graphics', 'CS', 7, 2016);

SELECT name, total FROM students JOIN LATERAL (SELECT SUM(grade) AS total FROM exams WHERE exams.sid = students.id) AS grades ON TRUE ORDER BY total DESC;

SELECT name, total FROM students, (SELECT SUM(grade) AS total FROM exams WHERE exams.sid = students.id) AS grades ORDER BY total DESC;

PRAGMA enable_verification;

CREATE TABLE t (i INT);

INSERT INTO t VALUES (1), (2), (3), (4), (4);

SELECT ARRAY(SELECT DISTINCT i FROM t ORDER BY i DESC) AS a, ARRAY(SELECT DISTINCT i FROM t ORDER BY i DESC) AS b, ARRAY(SELECT DISTINCT i FROM t ORDER BY i DESC) AS c;

SELECT ARRAY(SELECT UNNEST(l) AS i ORDER BY i DESC) AS a FROM (VALUES ([NULL, 1, 2, 3, 4]), ([5, 6, NULL, 7, 8]), ([]), ([10, 11, 12])) AS t(l);

SELECT ARRAY(SELECT UNNEST(l) AS i ORDER BY i DESC NULLS FIRST) AS a FROM (VALUES ([NULL, 1, 2, 3, 4]), ([5, 6, NULL, 7, 8]), ([]), ([10, 11, 12])) AS t(l);

SELECT ARRAY(SELECT i FROM t ORDER BY rowid DESC);

SELECT ARRAY(SELECT i FROM t ORDER BY t.rowid);

SELECT ARRAY(SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 ORDER BY 1) AS new_array;

SELECT ARRAY(SELECT DISTINCT i FROM t ORDER BY t.i DESC) AS a;

SELECT ARRAY(SELECT DISTINCT i FROM t UNION ALL SELECT DISTINCT i FROM t ORDER BY t.i DESC) AS a;

SELECT ARRAY(SELECT DISTINCT i FROM t ORDER BY x.i DESC) AS a;

SELECT ARRAY(SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 ORDER BY 1 DESC) AS new_array;

SELECT ARRAY(SELECT * FROM UNNEST(['a', 'b']) AS _t(u) ORDER BY CASE WHEN u = 'a' THEN 100 ELSE 1 END) AS out;

SELECT ARRAY(SELECT * FROM UNNEST(['a', 'b']) AS _t(u) ORDER BY CASE WHEN u = 'a' THEN 100 ELSE 1 END DESC) AS out;

SELECT ARRAY(SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 ORDER BY -1) AS new_array;

SELECT ARRAY(SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 ORDER BY 2) AS new_array;

SELECT ARRAY(SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 ORDER BY 'hello world') AS new_array;

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (1), (2), (3), (NULL);

SELECT i, ARRAY(SELECT 42) AS top FROM integers AS i1 ORDER BY i;

SELECT i, ARRAY(SELECT i FROM integers WHERE i1.i = i) AS top FROM integers AS i1 ORDER BY i;

SELECT i, ARRAY(SELECT i FROM integers WHERE i > i1.i ORDER BY i ASC NULLS FIRST) AS top FROM integers AS i1 ORDER BY i;

SELECT i, ARRAY(SELECT i1.i FROM integers AS i1, integers AS i2, integers AS i3, integers AS i4 WHERE i1.i = integers.i LIMIT 3) AS top FROM integers ORDER BY i;

SELECT i, ARRAY(SELECT i1.i FROM integers AS i1, integers AS i2, integers AS i3, integers AS i4 WHERE i1.i = integers.i LIMIT 3 OFFSET 3) AS top FROM integers ORDER BY i;

SELECT i, ARRAY(SELECT i1.i FROM integers AS i1, integers AS i2, integers AS i3, integers AS i4 WHERE i1.i = integers.i LIMIT 3 OFFSET 62) AS top FROM integers ORDER BY i;

SELECT ARRAY(SELECT 1, 2);

PRAGMA enable_verification;

SELECT 1 FROM (SELECT 4) AS v1(vc0) WHERE NOT (3) IN (COALESCE((SELECT 1 WHERE FALSE), v1.vc0));

PRAGMA enable_verification;

CALL dbgen(sf=0);

SELECT (SELECT l_linestat FROM orders) FROM lineitem;

SELECT (SELECT l_returnfla FROM orders) FROM lineitem;

SELECT (SELECT o_totalp FROM orders) FROM lineitem;

SELECT * FROM lineitem WHERE (SELECT SUM(l_orderkey) > 0);

SELECT * FROM lineitem WHERE (SELECT SUM(o_orderke) FROM orders);

SELECT * FROM lineitem WHERE (SELECT SUM(o_orderke) OVER () FROM orders);

SELECT * FROM lineitem GROUP BY (SELECT SUM(o_orderke) OVER () FROM orders);

SELECT * FROM lineitem LIMIT (SELECT SUM(o_orderke) FROM orders LIMIT 1);

PRAGMA enable_verification;

CREATE TABLE Product (DaysToManufacture INT, StandardCost INT);

INSERT INTO Product VALUES (0, 5.0885), (1, 223.88), (2, 359.1082), (4, 949.4105);

SET pivot_filter_threshold = 0;

SELECT DaysToManufacture, StandardCost, (SELECT ["0", "1", "2", "3", "4"] FROM (SELECT DaysToManufacture, StandardCost) AS SourceTable PIVOT(AVG(StandardCost) FOR DaysToManufacture IN (0, 1, 2, 3, 4)) AS PivotTable) FROM Product;

SELECT DaysToManufacture, StandardCost, (SELECT cost FROM (SELECT DaysToManufacture, StandardCost) AS SourceTable PIVOT(AVG(StandardCost) FOR DaysToManufacture IN (0, 1, 2, 3, 4)) AS PivotTable UNPIVOT(cost FOR days IN (0, 1, 2, 3, 4))) FROM Product;

SELECT DaysToManufacture, StandardCost, (SELECT LIST(cost) FROM (SELECT DaysToManufacture, StandardCost) AS SourceTable PIVOT(AVG(StandardCost) FOR DaysToManufacture IN (0, 1, 2, 3, 4)) AS PivotTable UNPIVOT INCLUDE NULLS (cost FOR days IN (0, 1, 2, 3, 4))) FROM Product;

SET pivot_filter_threshold = DEFAULT;

SET pivot_filter_threshold = DEFAULT;

SET pivot_filter_threshold = DEFAULT;

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

CREATE TABLE test AS SELECT CAST((i % 10) AS INT) AS i, CAST(((i * 2) % 10) AS INT) AS j FROM GENERATE_SERIES(0, 9, 1) AS tbl(i);

SELECT i, j, (SELECT MAX(x) FROM (VALUES (i), (j)) AS X(x)) AS maxn FROM test ORDER BY ALL;

SELECT i, j, (SELECT MAX(x) FROM (VALUES (i), (j), (3), (NULL), (5)) AS X(x)) AS maxn FROM test ORDER BY ALL;

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (1), (2), (3), (NULL);

SELECT (SELECT MAX(x) FROM (VALUES ((SELECT i))) AS tbl(x)) FROM integers ORDER BY i;

SELECT (SELECT MAX(x) FROM (VALUES ((SELECT * FROM (VALUES (i)) AS tbl3(x)))) AS tbl(x)) FROM integers ORDER BY i;

SELECT (SELECT MAX(x) FROM (VALUES (i)) AS tbl(x) JOIN (VALUES (i)) AS tbl2(x) USING (x)) FROM integers ORDER BY i;

CREATE TABLE test2 AS SELECT CAST((i % 10) AS INT) AS i, CAST(((i * 2) % 10) AS INT) AS j FROM GENERATE_SERIES(0, 99999, 1) AS tbl(i);

SELECT SUM(i), SUM(j), SUM(GREATEST(i, j)), SUM((SELECT MAX(x) FROM (VALUES (i), (j)) AS X(x))) AS maxn FROM test2;

SELECT SUM(i), SUM(j), SUM(GREATEST(i, j)), SUM((SELECT MAX(x) FROM (VALUES (i), (j), (i), (j), (i), (j)) AS X(x))) AS maxn FROM test2;

CREATE TABLE test3 AS SELECT CASE WHEN i % 7 = 2 THEN NULL ELSE CAST((i % 10) AS INT) END AS i, CASE WHEN i % 9 = 2 THEN NULL ELSE CAST(((i * 2) % 10) AS INT) END AS j FROM GENERATE_SERIES(0, 99999, 1) AS tbl(i);

SELECT SUM(i), SUM(j), SUM((SELECT MAX(x) FROM (VALUES (i), (j)) AS X(x))) AS maxn FROM test3;

SELECT SUM(i), SUM(j), SUM((SELECT MAX(x) FROM (VALUES (i), (j), (NULL), (NULL), (6)) AS X(x))) AS maxn FROM test3;

CREATE TABLE table1 (x INT, y INT);

INSERT INTO table1 VALUES (NULL, 2), (1, NULL);

CREATE TABLE table2 (i INT);

INSERT INTO table2 VALUES (1), (2), (3);

SELECT (x, y) IN (SELECT i, i + 1 FROM table2) FROM table1;

PRAGMA enable_verification;

SELECT (SELECT MAX((SELECT subq_0.c0 AS c1))) FROM (SELECT NULL AS c0) AS subq_0;

SELECT (SELECT MAX(42) OVER (PARTITION BY (SELECT subq_0.c0 AS c1)) AS c6) FROM (SELECT NULL AS c0) AS subq_0;

SELECT (SELECT MAX((SELECT subq_0.c0 AS c1)) OVER () AS c6) FROM (SELECT NULL AS c0) AS subq_0;

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (1), (2), (3), (NULL);

SELECT i, (SELECT * FROM integers WHERE i > i1.i ORDER BY i ASC NULLS FIRST LIMIT 1) AS top FROM integers AS i1 ORDER BY i;

SELECT i, (SELECT * FROM integers WHERE i > i1.i ORDER BY i DESC NULLS FIRST LIMIT 1) AS top FROM integers AS i1 ORDER BY i;

SELECT i, ARRAY(SELECT * FROM integers WHERE i > i1.i ORDER BY i) AS top FROM integers AS i1 ORDER BY i;

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (1), (2), (3), (NULL);

SELECT (1, 2) IN (SELECT i, i + 1 FROM integers);

SELECT (CAST('1992-01-02' AS DATE), 2) IN (SELECT CAST('1992-01-01' AS DATE) + INTERVAL (i) DAYS, i + 1 FROM integers);

SELECT (1, 2) IN (SELECT (i, i + 1) FROM integers);

SELECT ROW(1) IN (SELECT i FROM integers);

SELECT ROW(1, 2) IN (SELECT i, i + 1 FROM integers);

SELECT ROW(1, 2) IN (SELECT i, i + 2 FROM integers);

SELECT ROW(1, 2) IN (SELECT i, i + 2 FROM integers WHERE NOT i IS NULL);

SELECT 1 WHERE (1, 2) IN (SELECT 1, 2);

SELECT 1 WHERE NOT (1, 2) IN (SELECT 1, 2);

SELECT (1, 2) IN (SELECT (i, i + 1, i + 2) FROM integers);

SELECT ROW(1, 2) IN (SELECT i1.i, i1.i + 1) FROM integers AS i1;

SELECT ROW(1, 2) IN (SELECT i1.i, i1.i + 1) FROM integers AS i1;

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (1), (2), (3), (NULL);

SELECT i, (SELECT s1.i FROM (SELECT * FROM integers WHERE i = i1.i) AS s1) AS j FROM integers AS i1 ORDER BY i;

SELECT i, (SELECT s1.i FROM (SELECT i FROM integers WHERE i = i1.i) AS s1 INNER JOIN (SELECT i FROM integers WHERE i = 4 - i1.i) AS s2 ON s1.i > s2.i) AS j FROM integers AS i1 ORDER BY i;

SELECT i, (SELECT s1.i FROM integers AS s1, integers AS s2 WHERE s1.i = s2.i AND s1.i = 4 - i1.i) AS j FROM integers AS i1 ORDER BY i;

SELECT i, (SELECT s1.i FROM integers AS s1 INNER JOIN integers AS s2 ON s1.i = s2.i AND s1.i = 4 - i1.i) AS j FROM integers AS i1 ORDER BY i;

SELECT * FROM integers AS s1 INNER JOIN integers AS s2 ON (SELECT 2 * SUM(i) * s1.i FROM integers) = (SELECT SUM(i) * s2.i FROM integers) ORDER BY s1.i;

SELECT * FROM integers AS s1 INNER JOIN integers AS s2 ON (SELECT s1.i = s2.i) ORDER BY s1.i;

SELECT * FROM integers AS s1 INNER JOIN integers AS s2 ON (SELECT s1.i = i FROM integers WHERE s2.i = i) ORDER BY s1.i;

SELECT * FROM integers AS s1 LEFT OUTER JOIN integers AS s2 ON (SELECT 2 * SUM(i) * s1.i FROM integers) = (SELECT SUM(i) * s2.i FROM integers) ORDER BY s1.i;

SELECT * FROM integers AS s1 LEFT OUTER JOIN integers AS s2 ON (SELECT CASE WHEN s1.i + s2.i > 10 THEN TRUE ELSE FALSE END) ORDER BY s1.i;

SELECT * FROM integers AS s1 LEFT OUTER JOIN integers AS s2 ON s1.i = s2.i AND (SELECT CASE WHEN s2.i > 2 THEN TRUE ELSE FALSE END) ORDER BY s1.i;

SELECT * FROM integers AS s1 LEFT OUTER JOIN integers AS s2 ON s1.i = s2.i AND (SELECT CASE WHEN s1.i > 2 THEN TRUE ELSE FALSE END) ORDER BY s1.i;

SELECT i, (SELECT SUM(s1.i) FROM integers AS s1 LEFT OUTER JOIN integers AS s2 ON s1.i = s2.i OR s1.i = i1.i - 1) AS j FROM integers AS i1 ORDER BY i;

SELECT i, (SELECT SUM(s1.i) FROM integers AS s1 FULL OUTER JOIN integers AS s2 ON s1.i = s2.i OR s1.i = i1.i - 1) AS j FROM integers AS i1 ORDER BY i;

SELECT i, (SELECT ROW_NUMBER() OVER (ORDER BY i)) FROM integers AS i1 ORDER BY i;

SELECT i, (SELECT i FROM integers WHERE i = i1.i UNION SELECT i FROM integers WHERE i = i1.i) AS j FROM integers AS i1 ORDER BY i;

SELECT i, (SELECT i FROM integers WHERE NOT i IS NULL EXCEPT SELECT i FROM integers WHERE i <> i1.i) AS j FROM integers AS i1 WHERE NOT i IS NULL ORDER BY i;

SELECT i, (SELECT i FROM integers WHERE i = i1.i INTERSECT SELECT i FROM integers WHERE i = i1.i) AS j FROM integers AS i1 ORDER BY i;

SELECT i, (SELECT i FROM integers WHERE i = i1.i UNION SELECT i FROM integers WHERE i <> i1.i EXCEPT SELECT i FROM integers WHERE i <> i1.i) AS j FROM integers AS i1 ORDER BY i;

SELECT i, (SELECT (SELECT SUM(i) FROM integers) + 42 + i1.i) AS j FROM integers AS i1 ORDER BY i;

PRAGMA enable_verification;

CREATE TABLE tbl (a TINYINT, b SMALLINT, c INT, d BIGINT, e TEXT, f DATE, g TIMESTAMP);

INSERT INTO tbl VALUES (1, 2, 3, 4, '5', CAST('1992-01-01' AS DATE), CAST('1992-01-01 00:00:00' AS TIMESTAMP));

SELECT EXISTS(SELECT t1.b + t1.c) FROM tbl AS t1;

SELECT t1.c + (SELECT t1.b FROM tbl AS t2 WHERE EXISTS(SELECT t1.b + t2.a)) FROM tbl AS t1;

SELECT 1 FROM tbl AS t1 JOIN tbl AS t2 ON (t1.d = t2.d) WHERE EXISTS(SELECT t1.c FROM tbl AS t3 WHERE t1.d + t3.c < 100 AND EXISTS(SELECT t2.f < CAST('2000-01-01' AS DATE)));

SELECT EXISTS(SELECT 1 WHERE (t1.c > 100 OR 1) AND t1.d < 100) FROM tbl AS t1;

SELECT EXISTS(SELECT t1.c, t1.d WHERE t1.d < 100) FROM tbl AS t1;

SELECT * FROM tbl AS t1 LEFT JOIN tbl AS t2 ON (SELECT t2.a) < 100;

SELECT * FROM tbl AS t1 LEFT JOIN tbl AS t2 ON (SELECT t2.a) > 100;

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (1), (2), (3), (NULL);

SELECT i, (SELECT MIN(i) + i1.i FROM integers) FROM integers AS i1 ORDER BY i;

SELECT i, (SELECT MIN(i + 2 * i1.i) FROM integers) FROM integers AS i1 ORDER BY i;

SELECT i, SUM(i), (SELECT SUM(i) + SUM(i1.i) FROM integers) FROM integers AS i1 GROUP BY i ORDER BY i;

SELECT i, SUM(i), (SELECT SUM(i) + COUNT(i1.i) FROM integers) FROM integers AS i1 GROUP BY i ORDER BY i;

SELECT i, (SELECT COUNT(*) FROM integers AS i2 WHERE i2.i > i1.i) FROM integers AS i1 ORDER BY i;

SELECT i, (SELECT MIN(i + 2 * i1.i) FROM integers) FROM integers AS i1 ORDER BY i;

SELECT (SELECT SUM(i1.i)) FROM integers AS i1;

SELECT MIN(i), (SELECT SUM(i1.i)) FROM integers AS i1;

SELECT i, (SELECT SUM(i1.i)) FROM integers AS i1;

SELECT i + 1, (SELECT SUM(i1.i)) FROM integers AS i1;

SELECT MIN(i), (SELECT SUM(i1.i)) FROM integers AS i1;

SELECT (SELECT SUM(i1.i)), (SELECT SUM(i1.i)) FROM integers AS i1;

SELECT SUM(i), SUM((SELECT i FROM integers WHERE i = i1.i)) FROM integers AS i1;

SELECT SUM(i), (SELECT SUM(i) FROM integers WHERE i > SUM(i1.i)) FROM integers AS i1;

SELECT SUM((SELECT SUM(i))) FROM integers;

SELECT i, (SELECT MIN(i) FROM integers WHERE i > i1.i) FROM integers AS i1 ORDER BY i;

SELECT i, (SELECT MIN(i) + i1.i FROM integers WHERE i > i1.i) FROM integers AS i1 ORDER BY i;

SELECT i, (SELECT MIN(i) FROM integers GROUP BY i1.i) AS j FROM integers AS i1 ORDER BY i;

SELECT i, (SELECT i FROM integers GROUP BY i HAVING i = i1.i) AS j FROM integers AS i1 ORDER BY i;

SELECT i1.i, SUM(i) FROM integers AS i1 GROUP BY i1.i HAVING SUM(i) = (SELECT MIN(i) FROM integers WHERE i <> i1.i + 1) ORDER BY 1;

SELECT i % 2 AS j, SUM(i) FROM integers AS i1 GROUP BY j HAVING SUM(i) = (SELECT SUM(i) FROM integers WHERE i <> j + 1) ORDER BY 1;

SELECT (SELECT i + SUM(i1.i) FROM integers WHERE i = 1 LIMIT 1) FROM integers AS i1;

SELECT (SELECT SUM(i) + SUM(i1.i) FROM integers) FROM integers AS i1 ORDER BY 1;

SELECT (SELECT SUM(i) + SUM((CASE WHEN NOT i IS NULL THEN i * 0 ELSE 0 END) + i1.i) FROM integers) FROM integers AS i1 ORDER BY 1;

SELECT i, (SELECT i + SUM(i1.i) FROM integers WHERE i = 1) FROM integers AS i1 GROUP BY i ORDER BY i;

SELECT SUM((SELECT i + i1.i FROM integers WHERE i = 1)) FROM integers AS i1;

SELECT i, SUM(i1.i), (SELECT SUM(i1.i)) AS k FROM integers AS i1 GROUP BY i ORDER BY i;

SELECT i, SUM(i1.i), (SELECT SUM(i1.i) FROM integers) AS k FROM integers AS i1 GROUP BY i ORDER BY i;

SELECT i1.i AS j, (SELECT SUM(j + i) FROM integers) AS k FROM integers AS i1 GROUP BY j ORDER BY j;

SELECT (SELECT SUM(i1.i * i) FROM integers) FROM integers AS i1 ORDER BY i;

SELECT i, (SELECT SUM(i1.i)) AS k, (SELECT SUM(i1.i)) AS l FROM integers AS i1 GROUP BY i ORDER BY i;

SELECT i, (SELECT SUM(i1.i) * SUM(i) FROM integers) AS k FROM integers AS i1 GROUP BY i ORDER BY i;

SELECT i AS j, (SELECT j * SUM(i) FROM integers) AS k FROM integers AS i1 GROUP BY j ORDER BY j;

SELECT i AS j, (SELECT i1.i * SUM(i) FROM integers) AS k FROM integers AS i1 GROUP BY j ORDER BY j;

SELECT i, SUM((SELECT SUM(i) * i1.i FROM integers)) AS k FROM integers AS i1 GROUP BY i ORDER BY i;

SELECT i, SUM((SELECT SUM(i) * SUM(i1.i) FROM integers)) AS k FROM integers AS i1 GROUP BY i ORDER BY i;

SELECT (SELECT SUM(i1.i)) FROM integers AS i1;

SELECT FIRST(i), (SELECT SUM(i1.i)) FROM integers AS i1;

SELECT i AS j, (SELECT MIN(i1.i) FROM integers GROUP BY i HAVING i = j) FROM integers AS i1 GROUP BY j ORDER BY j;

SELECT i, SUM(i1.i) FROM integers AS i1 GROUP BY i ORDER BY (SELECT SUM(i1.i));

SELECT i, SUM(i1.i) FROM integers AS i1 GROUP BY i ORDER BY (SELECT SUM(i1.i) FROM integers);

SELECT i, SUM((SELECT SUM(i) * i1.i FROM integers LIMIT 0)) AS k FROM integers AS i1 GROUP BY i ORDER BY i;

SELECT (SELECT i + i1.i FROM integers WHERE i = 1) AS k, SUM(i) AS j FROM integers AS i1 GROUP BY k ORDER BY 1;

SELECT SUM(i) FROM integers AS i1 WHERE i > (SELECT (i + i1.i) / 2 FROM integers WHERE i = 1);

SELECT SUM(i) FROM integers AS i1 WHERE i > (SELECT (SUM(i) + i1.i) / 2 FROM integers WHERE i = 1);

SELECT i, (SELECT MIN(i) FROM integers WHERE i = i1.i) >= ALL (SELECT i FROM integers WHERE NOT i IS NULL) FROM integers AS i1 ORDER BY i;

SELECT i, (SELECT MIN(i) FROM integers WHERE i <> i1.i) > ANY (SELECT i FROM integers WHERE NOT i IS NULL) FROM integers AS i1 ORDER BY i;

SELECT i, NOT ((SELECT MIN(i) FROM integers WHERE i <> i1.i) > ANY (SELECT i FROM integers WHERE NOT i IS NULL)) FROM integers AS i1 ORDER BY i;

SELECT (SELECT COVAR_POP(i1.i, i2.i) FROM integers AS i2) FROM integers AS i1 ORDER BY 1;

SELECT (SELECT COVAR_POP(i2.i, i1.i) FROM integers AS i2) FROM integers AS i1 ORDER BY 1;

SELECT (SELECT COVAR_POP(i1.i + i2.i, i1.i + i2.i) FROM integers AS i2) FROM integers AS i1 ORDER BY 1;

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (1), (2), (3), (NULL);

SELECT i, (SELECT COUNT(*) FROM (SELECT i1.i FROM integers GROUP BY GROUPING SETS (i1.i)) AS tbl) AS j FROM integers AS i1 ORDER BY i;

SELECT i, (SELECT COUNT(*) FROM (SELECT i1.i FROM integers GROUP BY GROUPING SETS ((i1.i), (), (i1.i), (i1.i, i1.i))) AS tbl) AS j FROM integers AS i1 ORDER BY i;

SELECT i, (SELECT COUNT(*) FROM (SELECT i1.i FROM integers GROUP BY ROLLUP (i1.i, i1.i, i1.i, i1.i)) AS tbl) AS j FROM integers AS i1 ORDER BY i;

SELECT i, (SELECT COUNT(*) FROM (SELECT i1.i FROM integers GROUP BY CUBE (i1.i, i1.i, i1.i, i1.i)) AS tbl) AS j FROM integers AS i1 ORDER BY i;

SELECT i, (SELECT MIN(i) FROM integers GROUP BY GROUPING SETS (i1.i, i) HAVING i1.i = i) AS j FROM integers AS i1 ORDER BY i;

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (1), (2), (3), (NULL);

SELECT i, (SELECT 42 + i1.i) AS j FROM integers AS i1 ORDER BY i;

SELECT i FROM integers AS i1 ORDER BY (SELECT 100 - i1.i);

SELECT i, (SELECT 42 + i1.i FROM integers) AS j FROM integers AS i1 ORDER BY i;

SET scalar_subquery_error_on_multiple_rows = FALSE;

SELECT i, (SELECT 42 + i1.i FROM integers) AS j FROM integers AS i1 ORDER BY i;

SET scalar_subquery_error_on_multiple_rows = TRUE;

SELECT i, (SELECT 42 + i1.i FROM integers LIMIT 1) AS j FROM integers AS i1 ORDER BY i;

SELECT i, (SELECT 42 + i1.i FROM integers LIMIT 0) AS j FROM integers AS i1 ORDER BY i;

SELECT i, (SELECT i FROM integers WHERE 1 = 0 AND i1.i = i) AS j FROM integers AS i1 ORDER BY i;

SELECT i, EXISTS(SELECT i FROM integers WHERE 1 = 0 AND i1.i = i) AS j FROM integers AS i1 ORDER BY i;

SELECT i, i = ANY (SELECT i FROM integers WHERE 1 = 0 AND i1.i = i) AS j FROM integers AS i1 ORDER BY i;

SELECT i, (SELECT i + i1.i FROM integers ORDER BY ALL LIMIT 1 OFFSET 1) AS j FROM integers AS i1 ORDER BY i;

SELECT (SELECT val + i FROM GENERATE_SERIES(1, 2, 1) AS t(i) OFFSET 1) FROM (SELECT 42 AS val) AS t;

SELECT i, (SELECT i1.i + i + i FROM GENERATE_SERIES(1, 100, 1) AS t(i) ORDER BY i DESC OFFSET 99) FROM integers AS i1 ORDER BY i;

SELECT i, (SELECT i + i1.i FROM integers ORDER BY i LIMIT 1) AS j FROM integers AS i1 ORDER BY i;

SELECT i, (SELECT i + i1.i FROM integers ORDER BY i LIMIT 1 OFFSET 1) AS j FROM integers AS i1 ORDER BY i;

SELECT i, (SELECT 42 WHERE i1.i > 2) AS j FROM integers AS i1 ORDER BY i;

SELECT i, (SELECT 42 WHERE i1.i IS NULL) AS j FROM integers AS i1 ORDER BY i;

SELECT i, (SELECT i + i1.i FROM integers WHERE i = 1) AS j FROM integers AS i1 ORDER BY i;

SELECT i, (SELECT i FROM integers WHERE i = i1.i) AS j FROM integers AS i1 ORDER BY i;

SELECT i, (SELECT i + 1 FROM integers WHERE i = i1.i) AS j FROM integers AS i1 ORDER BY i;

SELECT i, (SELECT 42 FROM integers WHERE i = i1.i) AS j FROM integers AS i1 ORDER BY i;

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

CREATE TABLE integers (i INT);

CREATE TABLE integers (i INT);

SELECT i, (WITH i2 AS (SELECT 42 + i1.i AS j) SELECT j FROM i2) AS j FROM integers AS i1 ORDER BY i;

SELECT i FROM integers AS i1 ORDER BY (WITH i2 AS (SELECT 100 - i1.i AS j) SELECT j FROM i2);

SELECT i, (WITH i2 AS (SELECT 42 + i1.i AS j FROM integers) SELECT j FROM i2) AS j FROM integers AS i1 ORDER BY i;

SET scalar_subquery_error_on_multiple_rows = FALSE;

SELECT i, (WITH i2 AS (SELECT 42 + i1.i AS j FROM integers) SELECT j FROM i2) AS j FROM integers AS i1 ORDER BY i;

SELECT i, (WITH i2 AS (SELECT 42 + i1.i AS j FROM integers) SELECT j FROM i2 LIMIT 1) AS j FROM integers AS i1 ORDER BY i;

SELECT i, (WITH i2 AS (SELECT 42 + i1.i AS j FROM integers) SELECT j FROM i2 LIMIT 0) AS j FROM integers AS i1 ORDER BY i;

SELECT i, (WITH i2 AS (SELECT i FROM integers WHERE 1 = 0 AND i1.i = i) SELECT i FROM i2) AS j FROM integers AS i1 ORDER BY i;

SELECT i, EXISTS(WITH i2 AS (SELECT i FROM integers WHERE 1 = 0 AND i1.i = i) SELECT i FROM i2) AS j FROM integers AS i1 ORDER BY i;

SELECT i, i = ANY (WITH i2 AS (SELECT i FROM integers WHERE 1 = 0 AND i1.i = i) SELECT i FROM i2) AS j FROM integers AS i1 ORDER BY i;

SELECT i, (WITH i2 AS (SELECT i + i1.i FROM integers ORDER BY ALL LIMIT 1 OFFSET 1) SELECT * FROM i2) AS j FROM integers AS i1 ORDER BY i;

SELECT i, (WITH i2 AS (SELECT i + i1.i FROM integers ORDER BY 1 LIMIT 1 OFFSET 1) SELECT * FROM i2) AS j FROM integers AS i1 ORDER BY i;

SELECT i, (WITH i2 AS (SELECT 42 WHERE i1.i > 2) SELECT * FROM i2) AS j FROM integers AS i1 ORDER BY i;

SELECT i, (WITH i2 AS (SELECT 42 WHERE i1.i IS NULL) SELECT * FROM i2) AS j FROM integers AS i1 ORDER BY i;

SELECT i, (WITH i2 AS (SELECT i + i1.i FROM integers WHERE i = 1) SELECT * FROM i2) AS j FROM integers AS i1 ORDER BY i;

SELECT i, (WITH i2 AS (SELECT i FROM integers WHERE i = i1.i) SELECT * FROM i2) AS j FROM integers AS i1 ORDER BY i;

SELECT i, (WITH i2 AS (SELECT i + 1 FROM integers WHERE i = i1.i) SELECT * FROM i2) AS j FROM integers AS i1 ORDER BY i;

SELECT i, (WITH i2 AS (SELECT 42 FROM integers WHERE i = i1.i) SELECT * FROM i2) AS j FROM integers AS i1 ORDER BY i;

PRAGMA enable_verification;

CREATE TABLE test AS SELECT * FROM (VALUES (1, 22), (1, 21), (2, 22)) AS v(id, b);

SELECT * FROM test WHERE b = (SELECT MIN(b) FROM test AS a WHERE a.id = test.id);

SELECT * FROM test WHERE b = (SELECT MIN(b) FROM test AS a WHERE a.id = test.id AND a.id < test.b);

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (1), (2), (3), (NULL);

SELECT i, (SELECT SUM(i + 1) OVER ()) FROM integers ORDER BY i;

SELECT i, (SELECT SUM((SELECT i + 1)) OVER ()) FROM integers ORDER BY i;

SELECT i, (SELECT SUM((SELECT i + 1)) OVER () WHERE i >= 2) FROM integers ORDER BY i;

SELECT i, (SELECT SUM((SELECT SUM(i))) OVER ()) FROM integers GROUP BY i ORDER BY i;

SELECT i, (SELECT SUM(win) FROM (SELECT SUM((SELECT i1.i + integers.i)) OVER () AS win FROM integers AS i1) AS t) FROM integers ORDER BY i;

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (1), (2), (3), (NULL);

SELECT i, (SELECT i FROM integers AS i2 WHERE i = (SELECT SUM(i) FROM integers AS i2 WHERE i2.i > i1.i)) FROM integers AS i1 ORDER BY 1;

SELECT i, (SELECT SUM(i) IS NULL FROM integers AS i2 WHERE i2.i > i1.i) FROM integers AS i1 ORDER BY i;

SELECT i, (SELECT COUNT(*) FROM integers AS i2 WHERE i2.i > i1.i) FROM integers AS i1 ORDER BY i;

SELECT i, (SELECT COUNT(i) FROM integers AS i2 WHERE i2.i > i1.i OR i2.i IS NULL) FROM integers AS i1 ORDER BY i;

SELECT i, (SELECT COUNT(*) FROM integers AS i2 WHERE i2.i > i1.i OR i2.i IS NULL) FROM integers AS i1 ORDER BY i;

SELECT i, (SELECT COUNT(*) FROM integers AS i2 WHERE i2.i > i1.i OR (i1.i IS NULL AND i2.i IS NULL)) FROM integers AS i1 ORDER BY i;

SELECT i FROM integers AS i1 WHERE (SELECT COUNT(*) FROM integers AS i2 WHERE i2.i > i1.i) = 0 ORDER BY i;

SELECT i, (SELECT i FROM integers AS i2 WHERE i - 2 = (SELECT COUNT(*) FROM integers AS i2 WHERE i2.i > i1.i)) FROM integers AS i1 ORDER BY 1;

SELECT i, (SELECT COUNT(*) FROM integers AS i2 WHERE i2.i > i1.i GROUP BY i1.i) FROM integers AS i1 ORDER BY i;

SELECT i, (SELECT CASE WHEN (SELECT COUNT(*) FROM integers AS i2 WHERE i2.i > i1.i) = 0 THEN 1 ELSE 0 END) FROM integers AS i1 ORDER BY i;

SELECT i, (SELECT COUNT(*) FROM integers AS i2 WHERE i2.i > i1.i) FROM integers AS i1 ORDER BY i;

PRAGMA enable_verification;

CREATE TABLE integers (id INT, i INT);

INSERT INTO integers VALUES (1, 1), (2, 2), (3, 3), (4, NULL);

DELETE FROM integers AS i1 WHERE i > (SELECT MAX(i) FROM integers WHERE i1.i <> i);

SELECT id, i FROM integers ORDER BY id;

DELETE FROM integers AS i1 WHERE i = (SELECT MAX(i) FROM integers);

SELECT id, i FROM integers ORDER BY id;

PRAGMA enable_verification;

CREATE TABLE tbl_ProductSales (ColID INT, Product_Category TEXT, Product_Name TEXT, TotalSales INT);

CREATE TABLE another_T (col1 INT, col2 INT, col3 INT, col4 INT, col5 INT, col6 INT, col7 INT, col8 INT);

INSERT INTO tbl_ProductSales VALUES (1, 'Game', 'Mobo Game', 200), (2, 'Game', 'PKO Game', 400), (3, 'Fashion', 'Shirt', 500), (4, 'Fashion', 'Shorts', 100);

INSERT INTO another_T VALUES (1, 2, 3, 4, 5, 6, 7, 8), (11, 22, 33, 44, 55, 66, 77, 88), (111, 222, 333, 444, 555, 666, 777, 888), (1111, 2222, 3333, 4444, 5555, 6666, 7777, 8888);

SELECT col1 IN (SELECT ColID FROM tbl_ProductSales) FROM another_T;

SELECT col1 IN (SELECT ColID + col1 FROM tbl_ProductSales) FROM another_T;

SELECT col1 IN (SELECT ColID + col1 FROM tbl_ProductSales) FROM another_T GROUP BY col1;

SELECT col1 IN (SELECT ColID + another_T.col1 FROM tbl_ProductSales) FROM another_T GROUP BY col1;

SELECT (col1 + 1) AS k, k IN (SELECT ColID + k FROM tbl_ProductSales) FROM another_T GROUP BY k ORDER BY 1;

SELECT (col1 + 1) IN (SELECT ColID + (col1 + 1) FROM tbl_ProductSales) FROM another_T GROUP BY (col1 + 1);

SELECT col1 + 1, col1 + 42 FROM another_T GROUP BY col1 + 1;

SELECT (col1 + 1) IN (SELECT ColID + (col1 + 42) FROM tbl_ProductSales) FROM another_T GROUP BY (col1 + 1);

SELECT col5 = ALL (SELECT 1 FROM tbl_ProductSales HAVING MIN(col8) IS NULL) FROM another_T GROUP BY col1, col2, col5, col8;

SELECT CASE WHEN 1 IN (SELECT MAX(col7) UNION ALL (SELECT MIN(ColID) FROM tbl_ProductSales INNER JOIN another_T AS t2 ON t2.col5 = t2.col1)) THEN 2 ELSE NULL END FROM another_T AS t1;

SELECT CASE WHEN 1 IN (SELECT (SELECT MAX(col7))) THEN 2 ELSE NULL END FROM another_T AS t1;

SELECT CASE WHEN 1 IN (SELECT (SELECT MAX(col7)) UNION ALL (SELECT MIN(ColID) FROM tbl_ProductSales INNER JOIN another_T AS t2 ON t2.col5 = t2.col1)) THEN 2 ELSE NULL END FROM another_T AS t1;

SELECT CASE WHEN 1 IN (SELECT (SELECT MIN(ColID) FROM tbl_ProductSales INNER JOIN another_T AS t2 ON t2.col5 = t2.col1) UNION ALL (SELECT MAX(col7))) THEN 2 ELSE NULL END FROM another_T AS t1;

SELECT (SELECT MIN(ColID) FROM tbl_ProductSales INNER JOIN another_T AS t2 ON t1.col7 <> (SELECT MAX(t1.col1 + t3.col4) FROM another_T AS t3)) FROM another_T AS t1;

SELECT (SELECT MIN(ColID) FROM tbl_ProductSales INNER JOIN another_T AS t2 ON t1.col7 <> ANY (SELECT MAX(t1.col1 + t3.col4) FROM another_T AS t3)) FROM another_T AS t1;

SELECT CASE WHEN NOT NOT col1 IN (SELECT (SELECT MAX(col7)) UNION (SELECT MIN(ColID) FROM tbl_ProductSales LEFT JOIN another_T AS t2 ON t2.col5 = t1.col1)) THEN 1 ELSE 2 END FROM another_T AS t1 GROUP BY col1 ORDER BY 1;

SELECT EXISTS(SELECT RANK() OVER (PARTITION BY SUM(DISTINCT col5))) FROM another_T AS t1;

SELECT (SELECT SUM(col2) OVER (PARTITION BY SUM(col2) ORDER BY MAX(col1 + ColID) ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) FROM tbl_ProductSales) FROM another_T AS t1 GROUP BY col1;

PRAGMA enable_verification;

CREATE TABLE test (x INT, y INT);

INSERT INTO test VALUES (1, 1), (2, 2);

SELECT (SELECT y FROM test AS t2 WHERE t1.x = 5) FROM test AS t1;

SELECT (SELECT y FROM test AS t2 WHERE t1.x = 5) IS NULL FROM test AS t1;

SELECT NOT (SELECT y FROM test AS t2 WHERE t1.x = 5) IS NULL FROM test AS t1;

CREATE TABLE r AS SELECT * FROM (VALUES (1, 1, 'a', 'A'), (1, NULL, 'b', 'B'), (1, 2, 'c', 'C'), (2, NULL, 'd', 'D')) AS t(ra, rb, x, y);

CREATE TABLE b AS SELECT * FROM (VALUES (1, 1, 1), (2, 1, 2), (3, 1, 3), (4, 1, NULL), (5, 2, 1), (6, 2, NULL), (7, 99, 99)) AS t(id, ba, bb);

SELECT (SELECT {'__matches': COUNT(*)} FROM r WHERE ba = ra AND bb = rb GROUP BY ra, rb) AS ref1 FROM b;

SELECT id, ba, bb, COALESCE((SELECT {'x': FIRST(x), 'y': FIRST(y), '__matches': COUNT(*)} FROM r WHERE ba = ra AND bb = rb GROUP BY ra, rb), {'x': NULL, 'y': NULL, '__matches': 0}) AS ref1, COALESCE((SELECT {'x': FIRST(x), 'y': FIRST(y), '__matches': COUNT(*)} FROM r WHERE ba = ra AND (bb = rb OR rb IS NULL) GROUP BY ra, rb ORDER BY bb = rb), {'x': NULL, 'y': NULL, '__matches': 0}) AS ref2, COALESCE((SELECT {'x': FIRST(x), 'y': FIRST(y), '__matches': COUNT(*)} FROM r WHERE (ba = ra OR ra IS NULL) AND (bb = rb OR rb IS NULL) GROUP BY ra, rb ORDER BY ba = ra, bb = rb), {'x': NULL, 'y': NULL, '__matches': 0}) AS ref3, COALESCE((SELECT {'x': FIRST(x), 'y': FIRST(y), '__matches': COUNT(*)} FROM r WHERE (ba = ra OR ra IS NULL) GROUP BY ra ORDER BY ba = ra), {'x': NULL, 'y': NULL, '__matches': 0}) AS ref4 FROM b;

SET scalar_subquery_error_on_multiple_rows = FALSE;

SELECT id, ba, bb, COALESCE((SELECT {'x': FIRST(x), 'y': FIRST(y), '__matches': COUNT(*)} FROM r WHERE ba = ra AND bb = rb GROUP BY ra, rb), {'x': NULL, 'y': NULL, '__matches': 0}) AS ref1, COALESCE((SELECT {'x': FIRST(x), 'y': FIRST(y), '__matches': COUNT(*)} FROM r WHERE ba = ra AND (bb = rb OR rb IS NULL) GROUP BY ra, rb ORDER BY bb = rb), {'x': NULL, 'y': NULL, '__matches': 0}) AS ref2, COALESCE((SELECT {'x': FIRST(x), 'y': FIRST(y), '__matches': COUNT(*)} FROM r WHERE (ba = ra OR ra IS NULL) AND (bb = rb OR rb IS NULL) GROUP BY ra, rb ORDER BY ba = ra, bb = rb), {'x': NULL, 'y': NULL, '__matches': 0}) AS ref3, COALESCE((SELECT {'x': FIRST(x), 'y': FIRST(y), '__matches': COUNT(*)} FROM r WHERE (ba = ra OR ra IS NULL) GROUP BY ra ORDER BY ba = ra), {'x': NULL, 'y': NULL, '__matches': 0}) AS ref4 FROM b;

PRAGMA enable_verification;

SELECT id, ba, bb, COALESCE((SELECT ROW(MIN(x), MIN(y), COUNT(*)) FROM r WHERE ba = ra AND bb = rb GROUP BY ra, rb), ROW(NULL, NULL, 0)) AS ref1, COALESCE((SELECT ROW(MIN(x), MIN(y), COUNT(*)) FROM r WHERE (ba = ra OR ra IS NULL) GROUP BY ra ORDER BY ba = ra), ROW(NULL, NULL, 0)) AS ref4 FROM b ORDER BY 1, 2, 3;

PRAGMA enable_verification;

CREATE TABLE t1 (fuel_type TEXT, location_country TEXT);

INSERT INTO t1 VALUES ('natural_gas', 'US');

CREATE TABLE t2 (__input_row_id BIGINT, "__input.fuel" TEXT);

INSERT INTO t2 VALUES (1, 'natural_gas');

SELECT (SELECT NULL FROM (SELECT fuel_type, location_country FROM "t1" WHERE "fuel_type" IS NOT DISTINCT FROM "__input.fuel" LIMIT 1) AS t1) FROM t2 AS __p;

PRAGMA enable_verification;

CREATE MACRO array_rv(arr) AS (
SELECT CASE WHEN l IS NOT NULL THEN l ELSE arr END
FROM (
SELECT array_agg(elm ORDER BY g DESC) as l
FROM (SELECT generate_subscripts(arr, 1) AS g, arr[g] AS elm)
)
);

CREATE MACRO array_rv_coal(arr) AS (
SELECT COALESCE(l,arr)
FROM (
SELECT array_agg(elm ORDER BY g DESC) as l
FROM (SELECT generate_subscripts(arr, 1) AS g, arr[g] AS elm)
)
);

CREATE TABLE t AS (SELECT [1, 2, 3] AS arr UNION ALL SELECT [4, 5] AS arr UNION ALL SELECT [] AS arr);

SELECT ARRAY_RV(arr) FROM t ORDER BY arr;

SELECT ARRAY_RV_COAL(arr) FROM t ORDER BY arr;

PRAGMA enable_verification;

CREATE TABLE test AS SELECT * FROM (VALUES (1, 22), (1, 21), (2, 22)) AS v(id, test_value);

CREATE TABLE test2 AS SELECT * FROM (VALUES (1, 44), (2, 42)) AS v(id, test2_value);

SELECT * FROM test, test2 WHERE test.id = test2.id AND test_value * test2_value = (SELECT MIN(test_value * test2_value) FROM test AS a, test2 WHERE a.id = test.id AND a.id = test2.id);

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

CREATE TABLE test (a INT, b INT, str TEXT);

INSERT INTO test VALUES (11, 1, 'a'), (12, 2, 'b'), (13, 3, 'c');

CREATE TABLE test2 (a INT, c INT, str2 TEXT);

INSERT INTO test2 VALUES (11, 1, 'a'), (12, 1, 'b'), (13, 4, 'b');

SELECT a, SUM(a), (SELECT SUM(a) + SUM(t1.b) FROM test) FROM test AS t1 GROUP BY a ORDER BY a;

SELECT (SELECT test.a + test.b + SUM(test2.a) FROM test2 WHERE str = str2) FROM test ORDER BY 1;

SELECT * FROM test WHERE EXISTS(SELECT * FROM test2 WHERE test.a = test2.a AND test.b <> test2.c) ORDER BY b;

SELECT a, a >= ANY (SELECT test2.a + c - b FROM test2 WHERE c >= b AND str = str2) FROM test ORDER BY 1;

SELECT str, str = ANY (SELECT str2 FROM test2) FROM test;

SELECT str, str = ANY (SELECT str2 FROM test2 WHERE test.a <> test2.a) FROM test;

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (1), (2), (3), (NULL);

SELECT i, (SELECT (SELECT 42 + i1.i) + 42 + i1.i) AS j FROM integers AS i1 ORDER BY i;

SELECT i, (SELECT (SELECT (SELECT (SELECT 42 + i1.i) + i1.i) + 42 + i1.i) + 42 + i1.i) AS j FROM integers AS i1 ORDER BY i;

SELECT i, (SELECT (SELECT i1.i + SUM(i2.i)) FROM integers AS i2) AS j FROM integers AS i1 ORDER BY i;

SELECT i, (SELECT (SELECT (SELECT (SELECT i1.i + i1.i + i1.i + i1.i + i1.i)))) AS j FROM integers AS i1 ORDER BY i;

SELECT i, (SELECT SUM(i) + (SELECT 42 + i1.i) FROM integers) AS j FROM integers AS i1 ORDER BY i;

SELECT i, (SELECT ((SELECT ((SELECT ((SELECT SUM(i) + SUM(i4.i) + SUM(i3.i) + SUM(i2.i) + SUM(i1.i) FROM integers AS i5)) FROM integers AS i4)) FROM integers AS i3)) FROM integers AS i2) AS j FROM integers AS i1 GROUP BY i ORDER BY i;

SELECT i, (SELECT (SELECT (SELECT (SELECT i1.i + i1.i + i1.i + i1.i + i1.i + i2.i) FROM integers AS i2 WHERE i2.i = i1.i))) AS j FROM integers AS i1 ORDER BY i;

SELECT (SELECT (SELECT SUM(i1.i) + SUM(i2.i) + SUM(i3.i) FROM integers AS i3) FROM integers AS i2) FROM integers AS i1 ORDER BY 1;

SELECT i, (SELECT SUM(s1.i) FROM integers AS s1 INNER JOIN integers AS s2 ON (SELECT i1.i + s1.i) = (SELECT i1.i + s2.i)) AS j FROM integers AS i1 ORDER BY i;

SELECT i, SUM(i), (SELECT (SELECT SUM(i) + SUM(i1.i) + SUM(i2.i) FROM integers) FROM integers AS i2) FROM integers AS i1 GROUP BY i ORDER BY i;

SELECT i, (SELECT SUM(ss1.i) FROM (SELECT i FROM integers AS s1 WHERE i > ANY (SELECT i FROM integers WHERE i <> s1.i)) AS ss1) AS j FROM integers AS i1 ORDER BY i;

SELECT i, (SELECT SUM(ss2.i) FROM (SELECT i FROM integers AS s1 WHERE i = i1.i AND i = ANY (SELECT i FROM integers WHERE i = s1.i)) AS ss2) AS j FROM integers AS i1 ORDER BY i;

SELECT i, (SELECT SUM(s1.i) FROM integers AS s1 LEFT OUTER JOIN integers AS s2 ON (SELECT i1.i + s1.i) = (SELECT i1.i + s2.i)) AS j FROM integers AS i1 ORDER BY i;

SELECT i, (SELECT SUM(ss1.i) + SUM(ss2.i) FROM (SELECT i FROM integers AS s1 WHERE i > ANY (SELECT i FROM integers WHERE i <> s1.i)) AS ss1 LEFT OUTER JOIN (SELECT i FROM integers AS s1 WHERE i = ANY (SELECT i FROM integers WHERE i = s1.i)) AS ss2 ON ss1.i = ss2.i) AS j FROM integers AS i1 ORDER BY i;

SELECT i, (SELECT SUM(s1.i) FROM (SELECT i FROM integers WHERE i = i1.i) AS s1 LEFT OUTER JOIN integers AS s2 ON s1.i = s2.i) AS j FROM integers AS i1 ORDER BY i;

SELECT i, (SELECT SUM(s1.i) FROM (SELECT i FROM integers WHERE i <> i1.i) AS s1 LEFT OUTER JOIN integers AS s2 ON s1.i = s2.i) AS j FROM integers AS i1 ORDER BY i;

SELECT i, (SELECT SUM(s2.i) FROM integers AS s1 LEFT OUTER JOIN (SELECT i FROM integers WHERE i = i1.i) AS s2 ON s1.i = s2.i) AS j FROM integers AS i1 ORDER BY i;

SELECT i, (SELECT SUM(s2.i) FROM integers AS s1 LEFT OUTER JOIN (SELECT i FROM integers WHERE i <> i1.i) AS s2 ON s1.i = s2.i) AS j FROM integers AS i1 ORDER BY i;

SELECT i, (SELECT SUM(ss2.i) FROM (SELECT i FROM integers AS s1 WHERE CASE WHEN (i = i1.i AND i = ANY (SELECT i FROM integers WHERE i = s1.i)) THEN TRUE ELSE FALSE END) AS ss2) AS j FROM integers AS i1 ORDER BY i;

SELECT i, (SELECT SUM(ss2.i) FROM (SELECT i FROM integers AS s1 WHERE i = i1.i AND i = ANY (SELECT i FROM integers WHERE i = s1.i)) AS ss2) AS j FROM integers AS i1 ORDER BY i;

SELECT i, (SELECT SUM(ss2.i) FROM (SELECT i FROM integers AS s1 WHERE i = i1.i) AS ss2) AS j FROM integers AS i1 ORDER BY i;

SELECT i, (SELECT SUM(ss2.i) FROM (SELECT i FROM integers AS s1 WHERE i = ANY (SELECT i FROM integers WHERE i = s1.i)) AS ss2) AS j FROM integers AS i1 ORDER BY i;

SELECT i, (SELECT i = ANY (SELECT i FROM integers WHERE i = s1.i) FROM integers AS s1 WHERE i = i1.i) AS j FROM integers AS i1 ORDER BY i;

SELECT i, (SELECT SUM(ss2.i) FROM (SELECT i FROM integers AS s1 WHERE i = i1.i OR i = ANY (SELECT i FROM integers WHERE i = s1.i)) AS ss2) AS j FROM integers AS i1 ORDER BY i;

SELECT i, (SELECT SUM(ss2.i) FROM (SELECT i FROM integers AS s1 WHERE CASE WHEN (i = i1.i AND i = ANY (SELECT i FROM integers WHERE i = s1.i)) THEN TRUE ELSE FALSE END) AS ss2) AS j FROM integers AS i1 ORDER BY i;

SELECT i, (SELECT SUM(ss2.i) FROM (SELECT i FROM integers AS s1 WHERE i = i1.i AND EXISTS(SELECT i FROM integers WHERE i = s1.i)) AS ss2) AS j FROM integers AS i1 ORDER BY i;

SELECT i, (SELECT SUM(ss1.i) FROM (SELECT i FROM integers AS s1 WHERE i > ANY (SELECT i FROM integers WHERE i <> s1.i)) AS ss1) AS j FROM integers AS i1 ORDER BY i;

SELECT i, (SELECT SUM(ss1.i) FROM (SELECT i FROM integers AS s1 WHERE i > ANY (SELECT i FROM integers WHERE i <> s1.i)) AS ss1 LEFT OUTER JOIN (SELECT i FROM integers AS s1 WHERE i = i1.i AND i = ANY (SELECT i FROM integers WHERE i = s1.i)) AS ss2 ON ss1.i = ss2.i) AS j FROM integers AS i1 ORDER BY i;

SELECT i, (SELECT SUM(ss2.i) FROM (SELECT i FROM integers AS s1 WHERE i > ANY (SELECT i FROM integers WHERE i <> s1.i)) AS ss1 LEFT OUTER JOIN (SELECT i FROM integers AS s1 WHERE i = i1.i AND i = ANY (SELECT i FROM integers WHERE i = s1.i)) AS ss2 ON ss1.i = ss2.i) AS j FROM integers AS i1 ORDER BY i;

SELECT i, (SELECT SUM(ss1.i) + SUM(ss2.i) FROM (SELECT i FROM integers AS s1 WHERE i > ANY (SELECT i FROM integers WHERE i <> s1.i)) AS ss1 LEFT OUTER JOIN (SELECT i FROM integers AS s1 WHERE i = i1.i AND i = ANY (SELECT i FROM integers WHERE i = s1.i)) AS ss2 ON ss1.i = ss2.i) AS j FROM integers AS i1 ORDER BY i;

SELECT i, (SELECT SUM(ss1.i) + SUM(ss2.i) FROM (SELECT i FROM integers AS s1 WHERE i = i1.i AND i > ANY (SELECT i FROM integers WHERE i <> s1.i)) AS ss1 LEFT OUTER JOIN (SELECT i FROM integers AS s1 WHERE i = ANY (SELECT i FROM integers WHERE i = s1.i)) AS ss2 ON ss1.i = ss2.i) AS j FROM integers AS i1 ORDER BY i;

SELECT i, (SELECT SUM(ss1.i) + SUM(ss2.i) FROM (SELECT i FROM integers AS s1 WHERE i = i1.i AND i > ANY (SELECT i FROM integers WHERE i <> s1.i)) AS ss1 LEFT OUTER JOIN (SELECT i FROM integers AS s1 WHERE i <> i1.i OR i = ANY (SELECT i FROM integers WHERE i = s1.i)) AS ss2 ON ss1.i = ss2.i) AS j FROM integers AS i1 ORDER BY i;

SELECT i, (SELECT * FROM (SELECT (SELECT 42 + i1.i)) AS s1) AS j FROM integers AS i1 ORDER BY i;

SELECT i, (SELECT s1.k + s2.k FROM (SELECT (SELECT 42 + i1.i) AS k) AS s1, (SELECT (SELECT 42 + i1.i) AS k) AS s2) AS j FROM integers AS i1 ORDER BY i;

SELECT i, (SELECT s1.k + s2.k FROM (SELECT (SELECT 42 + i1.i) AS k) AS s1 LEFT OUTER JOIN (SELECT (SELECT 42 + i1.i) AS k) AS s2 ON s1.k = s2.k) AS j FROM integers AS i1 ORDER BY i;

SELECT i, (SELECT i1.i IN (1, 2, 3, 4, 5, 6, 7, 8)) AS j FROM integers AS i1 ORDER BY i;

SELECT (SELECT (SELECT COVAR_POP(i1.i, i3.i) FROM integers AS i3) FROM integers AS i2 LIMIT 1) FROM integers AS i1 ORDER BY 1;

SELECT (SELECT (SELECT COVAR_POP(i2.i, i3.i) FROM integers AS i3) FROM integers AS i2 ORDER BY i LIMIT 1) FROM integers AS i1 ORDER BY 1;

PRAGMA enable_verification;

SELECT 1 + (SELECT 1);

SELECT 1 = (SELECT 1);

SELECT 1 <> (SELECT 1);

SELECT 1 = (SELECT NULL);

SELECT NULL = (SELECT 1);

SELECT (SELECT 42);

SELECT (SELECT (SELECT 42));

SELECT * FROM (SELECT 42) AS v1(a);

SELECT * FROM (SELECT 42, 41 AS x) AS v1(a);

SELECT * FROM (SELECT 42, 41 AS x) AS v1(a, b, c);

CREATE TABLE test (a INT, b INT);

INSERT INTO test VALUES (11, 22);

INSERT INTO test VALUES (12, 21);

INSERT INTO test VALUES (13, 22);

SELECT (SELECT a * 42 FROM test);

SET scalar_subquery_error_on_multiple_rows = FALSE;

SELECT (SELECT a * 42 FROM test);

SELECT a * (SELECT 42) FROM test;

CREATE TABLE t1 (a INT, b INT, c INT, d INT, e INT);

INSERT INTO t1 (e, c, b, d, a) VALUES (103, 102, 100, 101, 104);

INSERT INTO t1 (a, c, d, e, b) VALUES (107, 106, 108, 109, 105);

SELECT c - (SELECT SUM(c) FROM t1) FROM t1;

SELECT CASE WHEN c > (SELECT SUM(c) / COUNT(*) FROM t1) THEN a * 2 ELSE b * 10 END FROM t1;

SELECT a, (SELECT SUM(b) FROM test AS tsub WHERE test.a = tsub.a) FROM test;

SELECT a, (SELECT CASE WHEN test.a = 11 THEN 22 ELSE NULL END) FROM test ORDER BY a;

SELECT a, (SELECT CASE WHEN test.a = 11 THEN b ELSE NULL END FROM test AS tsub) FROM test ORDER BY a;

SELECT a, (SELECT CASE WHEN test.a = 11 THEN b ELSE NULL END FROM test AS tsub LIMIT 1) FROM test ORDER BY a;

SELECT * FROM test WHERE a = (SELECT MIN(a) FROM test AS t WHERE t.b = test.b);

SELECT * FROM test WHERE EXISTS(SELECT a FROM test AS ts WHERE ts.a = test.a AND b > 21);

SELECT * FROM (SELECT 42 AS a, 44 AS a) AS tbl1;

PRAGMA enable_verification;

SELECT 1 + (WITH cte AS (SELECT 1) SELECT * FROM cte);

SELECT 1 = (WITH cte AS (SELECT 1) SELECT * FROM cte);

SELECT 1 <> (WITH cte AS (SELECT 1) SELECT * FROM cte);

SELECT 1 = (WITH cte AS (SELECT NULL) SELECT * FROM cte);

SELECT NULL = (SELECT 1);

SELECT (WITH cte AS (SELECT 42) SELECT * FROM cte);

SELECT (WITH cte1 AS (WITH cte2 AS (SELECT 42) SELECT * FROM cte2) SELECT * FROM cte1);

SELECT * FROM (WITH cte(x) AS (SELECT 42) SELECT x FROM cte) AS v1(a);

SELECT * FROM (WITH cte AS (SELECT 42, 41 AS x) SELECT * FROM cte) AS v1(a);

SELECT * FROM (WITH cte AS (SELECT 42, 41 AS x) SELECT * FROM cte) AS v1(a, b, c);

CREATE TABLE test (a INT, b INT);

INSERT INTO test VALUES (11, 22);

INSERT INTO test VALUES (12, 21);

INSERT INTO test VALUES (13, 22);

SELECT (WITH cte AS (SELECT a * 42 FROM test) SELECT * FROM cte);

SET scalar_subquery_error_on_multiple_rows = FALSE;

SELECT (WITH cte AS (SELECT a * 42 FROM test) SELECT * FROM cte);

SELECT a * (WITH cte AS (SELECT 42) SELECT * FROM cte) FROM test;

CREATE TABLE t1 (a INT, b INT, c INT, d INT, e INT);

INSERT INTO t1 (e, c, b, d, a) VALUES (103, 102, 100, 101, 104);

INSERT INTO t1 (a, c, d, e, b) VALUES (107, 106, 108, 109, 105);

SELECT c - (WITH cte AS (SELECT SUM(c) FROM t1) SELECT * FROM cte) FROM t1;

SELECT CASE WHEN c > (WITH cte AS (SELECT SUM(c) / COUNT(*) FROM t1) SELECT * FROM cte) THEN a * 2 ELSE b * 10 END FROM t1;

SELECT a, (WITH cte AS (SELECT SUM(b) FROM test AS tsub WHERE test.a = tsub.a) SELECT * FROM cte) FROM test;

SELECT a, (WITH cte AS (SELECT CASE WHEN test.a = 11 THEN 22 ELSE NULL END) SELECT * FROM cte) FROM test ORDER BY a;

SELECT a, (WITH cte AS (SELECT CASE WHEN test.a = 11 THEN b ELSE NULL END FROM test AS tsub) SELECT * FROM cte) FROM test ORDER BY a;

SELECT a, (WITH cte AS (SELECT CASE WHEN test.a = 11 THEN b ELSE NULL END FROM test AS tsub LIMIT 1) SELECT * FROM cte) FROM test ORDER BY a;

SELECT * FROM test WHERE a = (WITH cte AS (SELECT a FROM test AS t WHERE t.b = test.b) SELECT MIN(a) FROM cte);

SELECT * FROM test WHERE EXISTS(WITH cte AS (SELECT * FROM test AS ts WHERE ts.a = test.a AND b > 21) SELECT a FROM cte);

SELECT * FROM (WITH cte AS (SELECT 42 AS a, 44 AS a) SELECT * FROM cte) AS tbl1;

PRAGMA enable_verification;

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (1), (2), (3), (NULL);

SELECT i IN (SELECT i1.i FROM (SELECT * FROM integers AS i1 WHERE i1.i = integers.i) AS i1 JOIN GENERATE_SERIES(1, 2, 1) AS tbl(i) ON i1.i = tbl.i) FROM integers ORDER BY i;

SELECT i IN (SELECT i1.i FROM (SELECT * FROM integers AS i1 WHERE i1.i = integers.i) AS i1 LEFT JOIN GENERATE_SERIES(1, 2, 1) AS tbl(i) ON i1.i = tbl.i) FROM integers ORDER BY i;

SELECT i IN (SELECT i1.i FROM (SELECT * FROM integers AS i1 WHERE i1.i = integers.i) AS i1 RIGHT JOIN GENERATE_SERIES(1, 2, 1) AS tbl(i) ON i1.i = tbl.i) FROM integers ORDER BY i;

SELECT i IN (SELECT i1.i FROM GENERATE_SERIES(1, 2, 1) AS tbl(i) LEFT JOIN (SELECT * FROM integers AS i1 WHERE i1.i = integers.i) AS i1 ON i1.i = tbl.i) FROM integers ORDER BY i;

SELECT i IN (SELECT i1.i FROM GENERATE_SERIES(1, 2, 1) AS tbl(i) RIGHT JOIN (SELECT * FROM integers AS i1 WHERE i1.i = integers.i) AS i1 ON i1.i = tbl.i) FROM integers ORDER BY i;

SELECT i IN (SELECT i1.i FROM (SELECT * FROM integers AS i1 WHERE i1.i IS NOT DISTINCT FROM integers.i) AS i1 JOIN GENERATE_SERIES(1, 2, 1) AS tbl(i) ON i1.i = tbl.i OR (i1.i IS NULL AND tbl.i IS NULL)) FROM integers ORDER BY i;

SELECT i IN (SELECT i1.i FROM (SELECT * FROM integers AS i1 WHERE i1.i IS NOT DISTINCT FROM integers.i) AS i1 LEFT JOIN GENERATE_SERIES(1, 2, 1) AS tbl(i) ON i1.i = tbl.i OR (i1.i IS NULL AND tbl.i IS NULL)) FROM integers ORDER BY i;

SELECT i IN (SELECT i1.i FROM (SELECT * FROM integers AS i1 WHERE i1.i IS NOT DISTINCT FROM integers.i) AS i1 RIGHT JOIN GENERATE_SERIES(1, 2, 1) AS tbl(i) ON i1.i = tbl.i OR (i1.i IS NULL AND tbl.i IS NULL)) FROM integers ORDER BY i;

PRAGMA enable_verification;

CREATE TABLE item (i_manufact INT);

SELECT * FROM item AS i1 WHERE (SELECT COUNT(*) AS item_cnt FROM item WHERE (i_manufact = i1.i_manufact AND i_manufact = 3) OR (i_manufact = i1.i_manufact AND i_manufact = 3)) > 0 ORDER BY 1 LIMIT 100;

SELECT * FROM item AS i1 WHERE (SELECT COUNT(*) AS item_cnt FROM item WHERE (i_manufact = i1.i_manufact AND i_manufact = 3) OR (i_manufact = i1.i_manufact AND i_manufact = 3)) ORDER BY 1 LIMIT 100;

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (1), (2), (3), (NULL);

SELECT * FROM integers WHERE i = (SELECT 1);

SELECT * FROM integers WHERE i = (SELECT SUM(1));

SELECT * FROM integers WHERE i = (SELECT MIN(i) FROM integers);

SELECT * FROM integers WHERE i = (SELECT MAX(i) FROM integers);

SELECT *, (SELECT MAX(i) FROM integers) FROM integers ORDER BY i;

SELECT (SELECT 42) AS k, MAX(i) FROM integers GROUP BY k;

SELECT i, MAX((SELECT 42)) FROM integers GROUP BY i ORDER BY i;

SELECT (SELECT * FROM integers WHERE i > 10) FROM integers;

SELECT * FROM integers WHERE i = (SELECT i FROM integers WHERE NOT i IS NULL ORDER BY i);

SET scalar_subquery_error_on_multiple_rows = FALSE;

SELECT * FROM integers WHERE i = (SELECT i FROM integers WHERE NOT i IS NULL ORDER BY i);

SELECT * FROM integers WHERE i = (SELECT i FROM integers WHERE NOT i IS NULL ORDER BY i LIMIT 1);

SELECT * FROM integers WHERE i = (SELECT 1, 2);

SELECT * FROM integers WHERE i = (SELECT i, i + 2 FROM integers);

SELECT * FROM integers WHERE EXISTS(SELECT 1, 2);

SELECT * FROM integers WHERE EXISTS(SELECT i, i + 2 FROM integers);

SELECT (SELECT * FROM integers WHERE i = 1);

SELECT (SELECT * FROM integers AS i1, integers AS i2);

SELECT (SELECT i FROM integers WHERE i = 1);

SELECT * FROM integers WHERE i > (SELECT i FROM integers WHERE i = 1) ORDER BY 1;

PRAGMA enable_verification;

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (1), (2), (3), (NULL);

CREATE TABLE strings (v TEXT);

INSERT INTO strings VALUES ('hello'), ('world'), (NULL);

SELECT NULL IN (SELECT * FROM strings);

SELECT 'hello' IN (SELECT * FROM strings);

SELECT 'bla' IN (SELECT * FROM strings);

SELECT 'bla' IN (SELECT * FROM strings WHERE NOT v IS NULL);

SELECT * FROM strings WHERE EXISTS(SELECT NULL);

SELECT * FROM strings WHERE EXISTS(SELECT v FROM strings WHERE v = 'bla');

SELECT (SELECT v FROM strings WHERE v = 'hello') FROM strings;

SELECT (SELECT v FROM strings WHERE v = 'bla') FROM strings;

PRAGMA enable_verification;

SELECT (SELECT UNNEST([1]));

SELECT (SELECT UNNEST([NULL]));

SELECT (SELECT UNNEST([]));

SELECT (SELECT UNNEST(i)) FROM (VALUES ([1])) AS tbl(i);

SELECT (SELECT UNNEST(i)) FROM (VALUES ([NULL])) AS tbl(i);

SELECT (SELECT UNNEST(i)) FROM (VALUES ([])) AS tbl(i);

SELECT (SELECT SUM(k) FROM (SELECT UNNEST(i)) AS tbl(k)) FROM (VALUES ([1, 2, 3])) AS tbl(i);

SELECT (SELECT SUM(k) + SUM(l) FROM (SELECT UNNEST(i), UNNEST(j) FROM (VALUES ([1, 2, 3])) AS tbl(j)) AS tbl(k, l)) FROM (VALUES ([1, 2, 3])) AS tbl(i);

SELECT 1 = ANY (SELECT UNNEST(i)) FROM (VALUES ([1, 2, 3])) AS tbl(i);

SELECT 4 = ANY (SELECT UNNEST(i)) FROM (VALUES ([1, 2, 3])) AS tbl(i);

SELECT NULL = ANY (SELECT UNNEST(i)) FROM (VALUES ([1, 2, 3])) AS tbl(i);

SELECT 4 = ANY (SELECT UNNEST(i)) FROM (VALUES ([1, 2, 3, NULL])) AS tbl(i);

SELECT 1 IN (SELECT UNNEST(i)) FROM (VALUES ([1, 2, 3])) AS tbl(i);

SELECT (SELECT 1 = ANY (SELECT UNNEST(i))) FROM (VALUES ([1, 2, 3])) AS tbl(i);

SELECT (SELECT 4 = ANY (SELECT UNNEST(i))) FROM (VALUES ([1, 2, 3])) AS tbl(i);

SELECT (SELECT 4 = ANY (SELECT UNNEST(i))) FROM (VALUES ([1, 2, 3, NULL])) AS tbl(i);

SELECT (SELECT 1 = ANY (SELECT UNNEST(i))) FROM (VALUES ([1, 2, 3])) AS tbl(i);

SELECT (SELECT 4 = ANY (SELECT UNNEST(i))) FROM (VALUES ([1, 2, 3])) AS tbl(i);

SELECT (SELECT 4 = ANY (SELECT UNNEST(i))) FROM (VALUES ([1, 2, 3, NULL])) AS tbl(i);

SELECT (SELECT 1 + i[1] = ANY (SELECT UNNEST(i))) FROM (VALUES ([1, 2, 3])) AS tbl(i);

PRAGMA enable_verification;

CREATE TABLE integers (id INT, i INT);

INSERT INTO integers VALUES (1, 1), (2, 2), (3, 3), (4, NULL);

UPDATE integers AS i1 SET i = (SELECT MAX(i) FROM integers WHERE i1.i <> i);

SELECT id, i FROM integers ORDER BY id;

UPDATE integers AS i1 SET i = (SELECT MAX(i) FROM integers) WHERE i = (SELECT MIN(i) FROM integers);

SELECT id, i FROM integers ORDER BY id;

UPDATE integers AS i1 SET i = (SELECT MAX(id) FROM integers WHERE id < i1.id);

SELECT id, i FROM integers ORDER BY id;

UPDATE integers AS i1 SET i = 2 WHERE i < (SELECT MAX(id) FROM integers WHERE i1.id < id);

SELECT id, i FROM integers ORDER BY id;

UPDATE integers AS i1 SET i = "DEFAULT" WHERE i = (SELECT MIN(i) FROM integers WHERE i1.id < id);

SELECT id, i FROM integers ORDER BY id;

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

CREATE TABLE strings (v TEXT);

INSERT INTO strings VALUES ('hello'), ('world'), (NULL);

SELECT NULL IN (SELECT * FROM strings WHERE v = s1.v) FROM strings AS s1 ORDER BY v;

SELECT 3 IN (SELECT * FROM strings WHERE v = s1.v) FROM strings AS s1 ORDER BY v;

SELECT '3' IN (SELECT * FROM strings WHERE v = s1.v) FROM strings AS s1 ORDER BY v;

SELECT 'hello' IN (SELECT * FROM strings WHERE v = s1.v) FROM strings AS s1 ORDER BY v;

SELECT 'bla' IN (SELECT * FROM strings WHERE v = s1.v) FROM strings AS s1 ORDER BY v;

SELECT 'hello' IN (SELECT * FROM strings WHERE v = s1.v OR v IS NULL) FROM strings AS s1 ORDER BY v;

SELECT 'bla' IN (SELECT * FROM strings WHERE v = s1.v OR v IS NULL) FROM strings AS s1 ORDER BY v;

SELECT * FROM strings WHERE EXISTS(SELECT NULL, v) ORDER BY v;

SELECT * FROM strings AS s1 WHERE EXISTS(SELECT v FROM strings WHERE v = s1.v OR v IS NULL) ORDER BY v;

SELECT * FROM strings AS s1 WHERE EXISTS(SELECT v FROM strings WHERE v = s1.v) ORDER BY v;

SELECT (SELECT v FROM strings WHERE v = s1.v) FROM strings AS s1 ORDER BY v;

SELECT (SELECT v FROM strings WHERE v = s1.v OR (v = 'hello' AND s1.v IS NULL)) FROM strings AS s1 ORDER BY v;

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (1), (2), (3), (NULL);

SELECT i, (SELECT ROW_NUMBER() OVER (ORDER BY i) FROM integers WHERE i1.i = i) FROM integers AS i1 ORDER BY i;

SELECT i1.i, (SELECT RANK() OVER (ORDER BY i) FROM integers WHERE i1.i = i) FROM integers AS i1, integers AS i2 ORDER BY i1.i;

SELECT i1.i, (SELECT ROW_NUMBER() OVER (ORDER BY i) FROM integers WHERE i1.i = i) FROM integers AS i1, integers AS i2 ORDER BY i1.i;

SELECT i, (SELECT SUM(i) OVER (ORDER BY i) FROM integers WHERE i1.i = i) FROM integers AS i1 ORDER BY i;

SELECT i, (SELECT SUM(s1.i) OVER (ORDER BY s1.i) FROM integers AS s1, integers AS s2 WHERE i1.i = s1.i LIMIT 1) FROM integers AS i1 ORDER BY i;

CREATE TABLE test AS SELECT CASE WHEN i % 7 = 2 THEN NULL ELSE CAST(i AS INT) END AS i, CASE WHEN i % 9 = 2 THEN NULL ELSE CAST(i AS INT) + 2 END AS j FROM GENERATE_SERIES(0, 9999999, 1) AS tbl(i);

SELECT SUM(i), SUM(j), SUM((SELECT MAX(x) FROM (VALUES (i), (j)) AS X(x))) AS maxn FROM test;

PRAGMA enable_verification;

CREATE TABLE a (i INT);

INSERT INTO a VALUES (42);

SELECT * FROM (SELECT i AS j FROM a GROUP BY j) AS sq1 WHERE j = 42;

SELECT * FROM (SELECT i AS j FROM a GROUP BY i) AS sq1 WHERE j = 42;

PRAGMA enable_verification;

SELECT * FROM (SELECT 42) AS sq1 UNION ALL SELECT * FROM (SELECT 43) AS sq2;

PRAGMA enable_verification;

CREATE TABLE test (i INT, j INT);

INSERT INTO test VALUES (3, 4), (4, 5), (5, 6);

SELECT * FROM (SELECT i, j AS d FROM test ORDER BY i) AS b;

SELECT b.d FROM (SELECT i * 2 + j AS d FROM test) AS b;

SELECT a.i, a.j, b.r, b.j FROM (SELECT i, j FROM test) AS a INNER JOIN (SELECT i + 1 AS r, j FROM test) AS b ON a.i = b.r ORDER BY 1;

SELECT * FROM (SELECT i, j FROM test) AS a, (SELECT i + 1 AS r, j FROM test) AS b, test WHERE a.i = b.r AND test.j = a.i ORDER BY 1;

SELECT SUM(x) FROM (SELECT i AS x FROM test GROUP BY i) AS sq;

SELECT SUM(x) FROM (SELECT i + 1 AS x FROM test GROUP BY x) AS sq;

PRAGMA enable_verification;

SELECT a FROM (SELECT 42 AS a);

SELECT * FROM (SELECT 42 AS a), (SELECT 43 AS b);

SELECT * FROM (VALUES (42, 43));

SELECT * FROM (SELECT 42 AS a), (SELECT 43 AS b), (SELECT 44 AS c), (SELECT 45 AS d);

SELECT * FROM (SELECT 42 AS a), (SELECT 43 AS b), (SELECT 44 AS c), (SELECT 45 AS d);

SELECT * FROM (SELECT unnamed_subquery.a FROM (SELECT 42 AS a)), (SELECT unnamed_subquery.b FROM (SELECT 43 AS b));

SELECT unnamed_subquery.a, unnamed_subquery2.b FROM (SELECT 42 AS a), (SELECT 43 AS b);

CREATE TEMPORARY TABLE x (x INT);

CREATE TABLE x (x INT);

SELECT COUNT(DISTINCT database_oid) FROM DUCKDB_TABLES();

set storage_compatibility_version='v0.10.2'
require noforcestorage;

PRAGMA enable_verification;

SELECT * FROM DUCKDB_COLUMNS();

SELECT * FROM duckdb_columns;

CREATE TABLE integers (i INT);

CREATE TABLE test (i INT NOT NULL, j DECIMAL(18, 3), k TEXT DEFAULT 'hello');

SELECT cols.database_name, tables.table_name, column_name, data_type, column_default, is_nullable, numeric_precision, numeric_precision_radix, numeric_scale FROM duckdb_columns AS cols JOIN duckdb_tables AS tables USING (table_oid) ORDER BY 1, 2, 3;

CREATE VIEW v1 AS SELECT * FROM test;

SELECT table_name, column_name FROM duckdb_columns WHERE table_name = 'v1';

ALTER TABLE test RENAME COLUMN j TO renamed;

SELECT table_name, column_name FROM duckdb_columns WHERE table_name = 'v1';

ALTER TABLE test RENAME COLUMN renamed TO j;

CREATE OR REPLACE VIEW v1 (a, b) AS SELECT * FROM test;

SELECT table_name, column_name FROM duckdb_columns WHERE table_name = 'v1';

ALTER TABLE test RENAME COLUMN j TO renamed;

SELECT table_name, column_name FROM duckdb_columns WHERE table_name = 'v1';

ALTER TABLE test RENAME COLUMN k TO not_k;

SELECT table_name, column_name FROM duckdb_columns WHERE table_name = 'v1';

CREATE TABLE integers (i INT PRIMARY KEY, CHECK (i < 10));

CREATE TABLE test (i TEXT UNIQUE, k TEXT, CHECK (LENGTH(i || k) < 10));

CREATE TABLE fk_integers (j INT, FOREIGN KEY (j) REFERENCES integers (i));

CREATE TABLE fk_integers_2 (k INT, FOREIGN KEY (k) REFERENCES integers (i));

SELECT * FROM DUCKDB_CONSTRAINTS();

SELECT * FROM duckdb_constraints;

SELECT table_name, constraint_index, constraint_type, UNNEST(constraint_column_names) AS col_name FROM duckdb_constraints ORDER BY table_name, constraint_index, col_name;

SELECT constraint_name, unique_constraint_name FROM information_schema.referential_constraints ORDER BY constraint_name;

SELECT column_name, constraint_name, table_name, position_in_unique_constraint FROM information_schema.key_column_usage ORDER BY constraint_name;

SELECT constraint_name, table_name, constraint_type FROM information_schema.table_constraints ORDER BY constraint_name;

CREATE TABLE tf_1 (a INT, "b c" INT, "d e" INT, PRIMARY KEY (a), UNIQUE ("b c"), UNIQUE ("d e"));

CREATE TABLE tf_3 (g INT, h INT, PRIMARY KEY (g), UNIQUE (h));

CREATE TABLE tf_2 (c INT, d INT, e INT, f INT, g INT, PRIMARY KEY (c), FOREIGN KEY (d) REFERENCES tf_1 (a), FOREIGN KEY (e) REFERENCES tf_1 ("b c"), FOREIGN KEY (f) REFERENCES tf_1 ("d e"), FOREIGN KEY (g) REFERENCES tf_3 (g));

CREATE TABLE tf_4 (h INT, FOREIGN KEY (h) REFERENCES tf_3 (h));

SELECT * EXCLUDE (schema_oid, table_oid, database_oid, constraint_name) FROM DUCKDB_CONSTRAINTS();

PRAGMA enable_verification;

CREATE TABLE t (i INT PRIMARY KEY);

SELECT constraint_text FROM DUCKDB_CONSTRAINTS() WHERE constraint_type = 'PRIMARY KEY';

CREATE TABLE u (i INT REFERENCES t);

SELECT constraint_text FROM DUCKDB_CONSTRAINTS() WHERE constraint_type = 'PRIMARY KEY';

CREATE TABLE v (i INT REFERENCES t);

SELECT constraint_text FROM DUCKDB_CONSTRAINTS() WHERE constraint_type = 'PRIMARY KEY';

DROP TABLE v;

SELECT constraint_text FROM DUCKDB_CONSTRAINTS() WHERE constraint_type = 'PRIMARY KEY';

DROP TABLE u;

SELECT constraint_text FROM DUCKDB_CONSTRAINTS() WHERE constraint_type = 'PRIMARY KEY';

PRAGMA enable_verification;

CREATE TABLE a (ID INT PRIMARY KEY);

CREATE TABLE b (id INT REFERENCES A);

SELECT constraint_name, unique_constraint_name FROM information_schema.referential_constraints;

CREATE SCHEMA s1;

CREATE TABLE s1.a (ID INT PRIMARY KEY);

CREATE TABLE s1.b (id INT REFERENCES s1.A);

SELECT COUNT(*) FROM information_schema.referential_constraints;

PRAGMA enable_verification;

SELECT * FROM DUCKDB_DATABASES();

SELECT database_name, internal, readonly, path, type FROM DUCKDB_DATABASES() ORDER BY database_name;

ATTACH '__TEST_DIR__/duckdb_databases.db' AS new_duckdb_database;

SELECT database_name, internal, STR_SPLIT(REPLACE(path, '\', '/'), '/')[-1], type FROM DUCKDB_DATABASES() WHERE NOT path IS NULL;

SELECT readonly FROM duckdb_databases WHERE database_name = 'new_duckdb_database';

SELECT database_name FROM duckdb_databases ORDER BY database_name;

SHOW databases;

SELECT datname FROM pg_catalog.pg_database ORDER BY 1;

DETACH new_duckdb_database;

ATTACH '__TEST_DIR__/duckdb_databases.db' AS readonly_duckdb_database (READONLY 1);

SELECT readonly FROM duckdb_databases WHERE database_name = 'readonly_duckdb_database';

SELECT * FROM DUCKDB_DEPENDENCIES();

CREATE TABLE integers (i INT);

CREATE INDEX i_index ON integers(i);

SELECT * FROM DUCKDB_EXTENSIONS();

SELECT aliases FROM DUCKDB_EXTENSIONS() WHERE extension_name = 'postgres_scanner';

LOAD tpch;

SELECT extension_name FROM DUCKDB_EXTENSIONS() WHERE loaded AND extension_name = 'tpch';

PRAGMA enable_verification;

SELECT * FROM DUCKDB_FUNCTIONS();

SELECT function_name FROM DUCKDB_FUNCTIONS() WHERE NOT internal ORDER BY 1;

CREATE MACRO add_default1(a := 3, b := 5) AS a + b;

CREATE MACRO add_default2(a, b := 5) AS a + b;

SELECT * FROM DUCKDB_FUNCTIONS();

SELECT * FROM DUCKDB_FUNCTIONS() WHERE function_type = 'table';

SELECT SQRT(4);

SELECT DISTINCT function_name FROM DUCKDB_FUNCTIONS() WHERE function_name = 'sqrt';

SELECT function_name FROM DUCKDB_FUNCTIONS() WHERE NOT internal ORDER BY 1;

create macro my_range(x) as table from range(x);

SELECT macro_definition FROM DUCKDB_FUNCTIONS() WHERE function_name = 'my_range';

CREATE TABLE integers (i INT, j INT, k INT);

CREATE INDEX i_index ON integers((j + 1), k);

SELECT * FROM DUCKDB_INDEXES();

SELECT * FROM duckdb_indexes;

SELECT expressions FROM duckdb_indexes WHERE table_name = 'integers';

PRAGMA enable_verification;

SET memory_limit = '20mb';

SET memory_limit = '20mb';

DROP TABLE IF EXISTS tmp1;

DROP TABLE IF EXISTS tmp1;

SELECT SUM(temporary_storage_bytes) < 150 AS _000_000 FROM DUCKDB_MEMORY() WHERE tag = 'IN_MEMORY_TABLE';

SELECT SUM(size) < 150 AS _000_000 FROM DUCKDB_TEMPORARY_FILES();

SELECT * FROM DUCKDB_OPTIMIZERS();

SELECT name FROM DUCKDB_OPTIMIZERS() WHERE name = 'join_order';

PREPARE p1 as select 42;

CREATE TABLE tbl (a TEXT);

PREPARE p2 as insert into tbl values ('test');

PREPARE p3 as select 21, $1, $2;

PREPARE p4 as select $name, $other_name;

SELECT * FROM DUCKDB_PREPARED_STATEMENTS() ORDER BY name;

SELECT COUNT(*) FROM duckdb_schemas;

CREATE SCHEMA scheme;

SELECT COUNT(*) FROM DUCKDB_SCHEMAS() WHERE schema_name = 'scheme';

SELECT COUNT(*) FROM duckdb_schemas WHERE schema_name = 'scheme';

SELECT COUNT(*) FROM DUCKDB_SEQUENCES();

CREATE SEQUENCE seq;

CREATE TEMPORARY SEQUENCE seq2;

SELECT database_name, schema_name, sequence_name, temporary, start_value, min_value, max_value, increment_by, cycle FROM DUCKDB_SEQUENCES() ORDER BY sequence_name;

SET default_null_order = 'nulls_first';

SELECT * FROM DUCKDB_SETTINGS();

SELECT name, value FROM DUCKDB_SETTINGS() WHERE name = 'default_null_order';

SET default_null_order = 'nulls_last';

SELECT name, value FROM DUCKDB_SETTINGS() WHERE name = 'default_null_order';

SET default_null_order = 'nulls_first';
require AS parquet;

SELECT * FROM DUCKDB_SETTINGS();

SELECT name, value FROM DUCKDB_SETTINGS() WHERE name = 'default_null_order';

SET default_null_order = 'nulls_last';

SELECT name, value FROM DUCKDB_SETTINGS() WHERE name = 'default_null_order';

SELECT COUNT(*) FROM DUCKDB_TABLES();

CREATE TABLE integers (i INT);

CREATE TABLE pk (i INT PRIMARY KEY, j TEXT, CHECK (i < 100));

CREATE SCHEMA myschema;

CREATE TABLE myschema.mytable (k DOUBLE);

CREATE TEMPORARY TABLE mytemp (i INT);

CREATE VIEW v1 AS SELECT 42;

SELECT database_name, schema_name, table_name, temporary, has_primary_key, estimated_size, column_count, index_count, check_constraint_count FROM DUCKDB_TABLES() ORDER BY table_name;

SELECT * FROM DUCKDB_TYPES();

SELECT COUNT(*) FROM duckdb_views;

CREATE VIEW v1 AS SELECT 42;

CREATE TEMPORARY VIEW v2 AS SELECT 42;

CREATE SCHEMA myschema;

CREATE VIEW myschema.v2 AS SELECT 42;

SELECT database_name, schema_name, view_name, temporary FROM DUCKDB_VIEWS() WHERE NOT internal ORDER BY view_name;

SELECT database_name, schema_name, view_name, temporary FROM duckdb_views ORDER BY view_name;

SET Calendar = 'gregorian';

SET TimeZone = 'America/Los_Angeles';

SELECT d FROM RANGE(CAST('1992-01-01 00:00:00-08' AS TIMESTAMPTZ), CAST('1992-01-01 12:00:00-08' AS TIMESTAMPTZ), INTERVAL (1) HOUR) AS tbl(d);

SELECT d FROM RANGE(CAST('1992-01-01 00:00:00-08' AS TIMESTAMPTZ), CAST('1991-06-01 00:00:00-07' AS TIMESTAMPTZ), INTERVAL '1' MONTH) AS tbl(d);

SELECT d FROM GENERATE_SERIES(CAST('1992-01-01 00:00:00-08' AS TIMESTAMPTZ), CAST('1991-06-01 00:00:00-07' AS TIMESTAMPTZ), -INTERVAL '1' MONTH) AS tbl(d);

SELECT d FROM RANGE(CAST('1992-01-01 00:00:00-08' AS TIMESTAMPTZ), CAST('1992-12-31 12:00:00-08' AS TIMESTAMPTZ), INTERVAL '1 MONTH 1 DAY 1 HOUR') AS tbl(d);

SELECT d FROM GENERATE_SERIES(CAST('1992-04-05 00:00:00-08' AS TIMESTAMPTZ), CAST('1992-04-05 12:00:00-07' AS TIMESTAMPTZ), INTERVAL '1' HOUR) AS tbl(d);

SELECT d FROM GENERATE_SERIES(CAST('1992-10-25 00:00:00-07' AS TIMESTAMPTZ), CAST('1992-10-25 12:00:00-08' AS TIMESTAMPTZ), INTERVAL '1' HOUR) AS tbl(d);

SELECT COUNT(*) FROM RANGE(CAST('1992-01-01 00:00:00-08' AS TIMESTAMPTZ), CAST('2020-01-01 00:00:00-08' AS TIMESTAMPTZ), INTERVAL '1' DAY) AS tbl(d);

SELECT COUNT(*) FROM GENERATE_SERIES(CAST('1992-01-01 00:00:00-08' AS TIMESTAMPTZ), CAST('2020-01-01 00:00:00-08' AS TIMESTAMPTZ), INTERVAL '1' DAY) AS tbl(d);

SELECT d FROM RANGE(CAST('1992-01-01 00:00:00-08' AS TIMESTAMPTZ), CAST('1992-12-31 12:00:00-08' AS TIMESTAMPTZ), INTERVAL '0' MONTH) AS tbl(d);

SELECT d FROM RANGE(CAST('1992-01-01 00:00:00-08' AS TIMESTAMPTZ), CAST('1992-12-31 12:00:00-08' AS TIMESTAMPTZ), INTERVAL '1' MONTH) AS tbl(d);

SELECT d FROM RANGE(CAST('1993-01-01 00:00:00-08' AS TIMESTAMPTZ), CAST('1992-01-01 00:00:00-08' AS TIMESTAMPTZ), INTERVAL '1' MONTH) AS tbl(d);

SELECT d FROM RANGE(CAST('1992-01-01 00:00:00-08' AS TIMESTAMPTZ), CAST('1992-12-31 12:00:00-08' AS TIMESTAMPTZ), INTERVAL '1' MONTH - INTERVAL '1' HOUR) AS tbl(d);

SELECT COUNT(*) FROM GENERATE_SERIES(CAST('294247-01-09' AS TIMESTAMPTZ), CAST('infinity' AS TIMESTAMPTZ), INTERVAL '1' DAY);

SELECT COUNT(*) FROM RANGE(CAST('294247-01-09' AS TIMESTAMPTZ), CAST('infinity' AS TIMESTAMPTZ), INTERVAL '1' DAY);

SELECT COUNT(*) FROM GENERATE_SERIES(CAST('-infinity' AS TIMESTAMPTZ), CAST('290303-12-11 (BC) 00:00:00' AS TIMESTAMPTZ), INTERVAL '1' DAY);

SELECT COUNT(*) FROM RANGE(CAST('-infinity' AS TIMESTAMPTZ), CAST('290303-12-11 (BC) 00:00:00' AS TIMESTAMPTZ), INTERVAL '1' DAY);

SELECT * FROM INFORMATION_SCHEMA.SCHEMATA;

SELECT * FROM information_schema.schemata;

CREATE SCHEMA scheme;

SELECT COUNT(*) FROM information_schema.schemata WHERE schema_name = 'scheme';

CREATE TABLE scheme.integers (i INT);

SELECT table_type FROM information_schema.tables WHERE table_schema = 'scheme' AND table_name = 'integers' AND NOT table_catalog IS NULL;

SELECT ordinal_position, column_name, data_type FROM information_schema.columns WHERE table_name = 'integers';

SELECT ordinal_position, column_name, data_type FROM information_schema.columns WHERE table_name = 'integers';

CREATE TEMPORARY TABLE reals (f REAL PRIMARY KEY, dec DECIMAL(16, 4), h INT128, b BIGINT, t TINYINT, d DOUBLE NOT NULL);

SELECT table_type FROM information_schema.tables WHERE table_catalog = 'temp' AND table_name = 'reals';

SELECT numeric_precision, numeric_scale, is_nullable FROM information_schema.columns WHERE table_name = 'reals' ORDER BY ordinal_position;

CREATE VIEW scheme.vintegers AS SELECT * FROM scheme.integers;

SELECT table_type FROM information_schema.tables WHERE table_schema = 'scheme' AND table_name = 'vintegers';

SELECT table_type FROM information_schema.tables WHERE table_schema = 'scheme' AND table_name = 'vintegers';

SELECT ordinal_position, column_name, data_type FROM information_schema.columns WHERE table_schema = 'scheme' AND table_name = 'vintegers' AND NOT table_catalog IS NULL;

SELECT character_set_name, character_repertoire, form_of_use, default_collate_name FROM information_schema.character_sets;

SELECT * FROM information_schema.referential_constraints;

SELECT * FROM information_schema.key_column_usage;

SELECT * FROM information_schema.table_constraints;

CREATE TABLE scheme.dept (dept_id INT PRIMARY KEY, dept_name TEXT NOT NULL);

CREATE TABLE scheme.emp (emp_id INT PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, ssn INT NOT NULL UNIQUE, salary DECIMAL(10, 2) NOT NULL CHECK (salary > 0), dept_id INT REFERENCES scheme.dept (dept_id));

SELECT table_catalog, table_schema, table_name, column_name, constraint_catalog, constraint_schema, constraint_name FROM information_schema.constraint_column_usage WHERE table_schema = 'scheme' AND table_name = 'emp' ORDER BY column_name ASC;

SELECT table_catalog, table_schema, table_name, constraint_catalog, constraint_schema, constraint_name FROM information_schema.constraint_table_usage WHERE table_schema = 'scheme' AND table_name = 'emp' ORDER BY constraint_name ASC;

SELECT constraint_catalog, constraint_schema, constraint_name, check_clause FROM information_schema.check_constraints WHERE constraint_schema = 'scheme' AND check_clause LIKE 'CHECK%';

CREATE OR REPLACE VIEW scheme.emp_dept_view AS SELECT emp.*, dept.dept_name FROM scheme.emp JOIN scheme.dept ON emp.dept_id = dept.dept_id;

SELECT table_catalog, table_schema, table_name, SUBSTRING(view_definition, 1, 32) AS view_definition_substr, check_option, is_updatable, is_insertable_into, is_trigger_updatable, is_trigger_deletable, is_trigger_insertable_into FROM information_schema.views WHERE table_schema = 'scheme' AND table_name = 'emp_dept_view';

DROP SCHEMA scheme CASCADE;

SELECT COUNT(*) FROM information_schema.schemata WHERE schema_name = 'scheme';

SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'scheme';

SELECT COUNT(*) FROM information_schema.columns WHERE table_schema = 'scheme';

CREATE TABLE t (i INT PRIMARY KEY);

CREATE TABLE u (i INT REFERENCES t);

SELECT constraint_name FROM information_schema.table_constraints WHERE constraint_type LIKE '%KEY' ORDER BY 1;

SELECT constraint_name FROM information_schema.key_column_usage ORDER BY 1;

SELECT constraint_name, unique_constraint_name FROM information_schema.referential_constraints;

DROP TABLE u;

DROP TABLE t;

CREATE TABLE target_tbl (target_col INT PRIMARY KEY);

CREATE TABLE source_tbl (source_col INT REFERENCES target_tbl (target_col));

SELECT constraint_name FROM information_schema.table_constraints WHERE constraint_type LIKE '%KEY' ORDER BY 1;

SELECT constraint_name FROM information_schema.key_column_usage ORDER BY 1;

SELECT constraint_name, unique_constraint_name FROM information_schema.referential_constraints;

DROP TABLE source_tbl;

DROP TABLE target_tbl;

CREATE TABLE a (a1 INT, a2 INT, a3 INT, UNIQUE (a1, a2), UNIQUE (a2, a3));

CREATE TABLE b (a1 INT, a2 INT, a3 INT, FOREIGN KEY (a1, a2) REFERENCES a (a1, a2), FOREIGN KEY (a2, a3) REFERENCES a (a2, a3));

SELECT constraint_name, constraint_type FROM information_schema.table_constraints ORDER BY ALL;

CREATE TABLE a (a1 INT, a2 INT, PRIMARY KEY (a1, a2));

CREATE TABLE b (a1 INT, a2 INT, FOREIGN KEY (a1, a2) REFERENCES a);

SELECT table_name, column_name, ordinal_position FROM information_schema.key_column_usage ORDER BY table_name, ordinal_position;

PRAGMA enable_verification;

SELECT table_name, column_name FROM DUCKDB_COLUMNS() WHERE database_name = 'system' AND schema_name = 'information_schema' AND data_type = 'NULL';

PRAGMA enable_verification;

SELECT * FROM READ_CSV(thisishopefullyanonexistentfile);

SELECT * FROM (SELECT 'myfile.csv' AS thisishopefullyanonexistentfile), READ_CSV(thisishopefullyanonexistentfile);

SELECT * FROM RANGE(4, 15, 6);

SELECT * FROM RANGE(-4, -15, -6);

SELECT * FROM RANGE(4, 15);

SELECT * FROM RANGE(4, 15, 3) AS a;

SELECT * FROM RANGE(-4, -15, -3) AS a;

SELECT * FROM RANGE(4, 15, 5) AS a;

SELECT * FROM RANGE(4, 19, 5) AS a;

SELECT * FROM GENERATE_SERIES(4, 19, 5) AS a;

PRAGMA enable_verification;

SELECT * FROM RANGE(1, NULL, 1);

SELECT * FROM (SELECT NULL AS a), RANGE(0, a);

SELECT * FROM (SELECT NULL AS a), RANGE(CAST('2010-01-01' AS TIMESTAMP), a, NULL);

SELECT * FROM RANGE(0, 3) AS t(i), RANGE(0, i) AS t2(j) ORDER BY i, j;

SELECT * FROM RANGE(0, 4) AS t(i), RANGE(0, i) AS t2(j), RANGE(0, j) AS t3(k) ORDER BY i, j, k;

SELECT * FROM GENERATE_SERIES(0, 2) AS t(i), GENERATE_SERIES(0, i) AS t2(j), GENERATE_SERIES(0, j) AS t3(k) ORDER BY i, j, k;

SELECT i, j, l, str FROM (SELECT ['null'], NULL, 'null' UNION ALL SELECT ['five'], 5, 'five' UNION ALL SELECT ['two'], 2, 'two') AS t(l, i, str), GENERATE_SERIES(0, i - 1) AS t2(j) ORDER BY i, j;

SELECT * FROM (SELECT 42 WHERE 42 > 84) AS t(i), RANGE(0, i) AS t2(j);

SELECT * FROM (SELECT CAST('5' AS TEXT)) AS t(str), RANGE(0, str) AS t2(j);

PREPARE v1 AS SELECT * FROM range(?);

EXECUTE v1(5);

SELECT * FROM (SELECT 3, 1, -1 UNION ALL SELECT 1, 3, 2) AS t(s, e, increment), RANGE(s, e, increment) AS t2(j) ORDER BY s, j;

SELECT * FROM (SELECT CAST('2000-01-01' AS DATE), CAST('2000-10-1' AS DATE), INTERVAL '3' MONTHS) AS t(s, e, increment), RANGE(s, e, increment) AS t2(j) ORDER BY s, j;

SELECT * FROM (SELECT CAST('2000-01-01' AS DATE), CAST('2000-10-1' AS DATE), INTERVAL '3' MONTHS) AS t(s, e, increment), GENERATE_SERIES(s, e, increment) AS t2(j) ORDER BY s, j;

SELECT * FROM (SELECT CAST('2000-01-01' AS DATE), CAST('2000-10-1' AS DATE), NULL) AS t(s, e, increment), GENERATE_SERIES(s, e, increment) AS t2(j) ORDER BY s, j;

SELECT COUNT(*) FROM (VALUES (1), (10), (100), (1000), (10000)) AS t(a), RANGE(0, a);

SET TimeZone = 'UTC';

SELECT * FROM (SELECT CAST('2000-01-01' AS TIMESTAMPTZ), CAST('2000-10-1' AS TIMESTAMPTZ), INTERVAL '3' MONTHS) AS t(s, e, increment), RANGE(s, e, increment) AS t2(j) ORDER BY s, j;

SELECT * FROM (SELECT CAST('2000-01-01' AS TIMESTAMPTZ), CAST('2000-10-1' AS TIMESTAMPTZ), NULL) AS t(s, e, increment), RANGE(s, e, increment) AS t2(j) ORDER BY s, j;

SELECT * FROM (SELECT CAST('2000-01-01' AS TIMESTAMPTZ), CAST('2000-10-1' AS TIMESTAMPTZ), NULL UNION ALL SELECT CAST('2000-10-01' AS TIMESTAMPTZ), CAST('2000-01-1' AS TIMESTAMPTZ), INTERVAL '3' MONTHS) AS t(s, e, increment), RANGE(s, e, increment) AS t2(j) ORDER BY s, j;

PRAGMA enable_verification;

SELECT COUNT(*) FROM RANGE(CURRENT_DATE, CURRENT_DATE + INTERVAL '7' DAYS, INTERVAL '1' DAY);

SELECT TO_TIMESTAMP(range) AS entry FROM RANGE(CAST(EPOCH(DATE_TRUNC('MONTH', CURRENT_DATE)) AS BIGINT), CAST(EPOCH(DATE_TRUNC('MONTH', CURRENT_DATE) + INTERVAL '1' MONTH - INTERVAL '1' DAY) AS BIGINT), CAST(EPOCH(INTERVAL '1' DAY) AS BIGINT));

SELECT CAST(d AS DATE) FROM RANGE(CAST('1992-01-01' AS DATE), CAST('1992-10-01' AS DATE), INTERVAL (1) MONTH) AS tbl(d);

SELECT * FROM RANGE(CAST('1992-01-01' AS DATE), CAST('1992-01-01' AS DATE), INTERVAL '1' MONTH);

SELECT CAST(d AS DATE) FROM GENERATE_SERIES(CAST('1992-01-01' AS DATE), CAST('1992-10-01' AS DATE), INTERVAL (1) MONTH) AS tbl(d);

SELECT d FROM RANGE(CAST('1992-01-01 00:00:00' AS TIMESTAMP), CAST('1992-01-01 12:00:00' AS TIMESTAMP), INTERVAL (1) HOUR) AS tbl(d);

SELECT * FROM RANGE(CAST('1992-01-01 00:00:00' AS TIMESTAMP), CAST('1992-01-01 00:00:00' AS TIMESTAMP), INTERVAL '1' MONTH);

SELECT * FROM RANGE(CAST('1992-01-01 00:00:00' AS TIMESTAMP), CAST('1992-01-01 00:00:01' AS TIMESTAMP), INTERVAL '1' MONTH);

SELECT d FROM RANGE(CAST('1992-01-01 00:00:00' AS TIMESTAMP), CAST('1991-06-01 00:00:00' AS TIMESTAMP), INTERVAL '1' MONTH) AS tbl(d);

SELECT d FROM GENERATE_SERIES(CAST('1992-01-01 00:00:00' AS TIMESTAMP), CAST('1991-06-01 00:00:00' AS TIMESTAMP), -INTERVAL '1' MONTH) AS tbl(d);

SELECT d FROM RANGE(CAST('1992-01-01 00:00:00' AS TIMESTAMP), CAST('1992-12-31 12:00:00' AS TIMESTAMP), INTERVAL '1 MONTH 1 DAY 1 HOUR') AS tbl(d);

SELECT COUNT(*) FROM RANGE(CAST('1992-01-01 00:00:00' AS TIMESTAMP), CAST('2020-01-01 00:00:00' AS TIMESTAMP), INTERVAL '1' DAY) AS tbl(d);

SELECT COUNT(*) FROM GENERATE_SERIES(CAST('1992-01-01 00:00:00' AS TIMESTAMP), CAST('2020-01-01 00:00:00' AS TIMESTAMP), INTERVAL '1' DAY) AS tbl(d);

SELECT COUNT(*) FROM RANGE(NULL, CAST('1992-12-31 12:00:00' AS TIMESTAMP), INTERVAL '1' MONTH) AS tbl(d);

SELECT COUNT(*) FROM GENERATE_SERIES(NULL, CAST('1992-12-31 12:00:00' AS TIMESTAMP), INTERVAL '1' MONTH) AS tbl(d);

SELECT d FROM RANGE(CAST('1992-01-01 00:00:00' AS TIMESTAMP), CAST('1992-12-31 12:00:00' AS TIMESTAMP), INTERVAL '0' MONTH) AS tbl(d);

SELECT d FROM RANGE(CAST('1992-01-01 00:00:00' AS TIMESTAMP), CAST('1992-12-31 12:00:00' AS TIMESTAMP), INTERVAL '1' MONTH) AS tbl(d);

SELECT d FROM RANGE(CAST('1993-01-01 00:00:00' AS TIMESTAMP), CAST('1992-01-01 00:00:00' AS TIMESTAMP), INTERVAL '1' MONTH) AS tbl(d);

SELECT d FROM RANGE(CAST('1992-01-01 00:00:00' AS TIMESTAMP), CAST('1992-12-31 12:00:00' AS TIMESTAMP), INTERVAL '1' MONTH - INTERVAL '1' HOUR) AS tbl(d);

SELECT COUNT(*) FROM GENERATE_SERIES(CAST('294247-01-10' AS TIMESTAMP), CAST('infinity' AS TIMESTAMP), INTERVAL '1' DAY);

SELECT COUNT(*) FROM RANGE(CAST('294247-01-10' AS TIMESTAMP), CAST('infinity' AS TIMESTAMP), INTERVAL '1' DAY);

SELECT COUNT(*) FROM GENERATE_SERIES(CAST('-infinity' AS TIMESTAMP), CAST('290309-12-22 (BC) 00:00:00' AS TIMESTAMP), INTERVAL '1' DAY);

SELECT COUNT(*) FROM RANGE(CAST('-infinity' AS TIMESTAMP), CAST('290309-12-22 (BC) 00:00:00' AS TIMESTAMP), INTERVAL '1' DAY);

SELECT COUNT(*) FROM READ_TEXT('test/sql/table_function/files/*.txt');

SELECT COUNT(*) FROM READ_BLOB('test/sql/table_function/files/*');

SELECT * FROM READ_TEXT('test/sql/table_function/files/nonexistentfile.txt') ORDER BY ALL;

SELECT PARSE_PATH(filename) FROM READ_TEXT('test/sql/table_function/files/nonexistentfile.txt') ORDER BY ALL;

SELECT PARSE_PATH(filename) FROM READ_TEXT(['test/sql/table_function/files/one.txt', 'test/sql/table_function/files/two.txt']) ORDER BY ALL;

SELECT PARSE_PATH(filename), size, content FROM READ_BLOB('test/sql/table_function/files/four.blob');

SELECT PARSE_PATH(filename), size, content FROM READ_TEXT('test/sql/table_function/files/four.blob');

SELECT size, PARSE_PATH(filename), content FROM READ_TEXT('test/sql/table_function/files/*.txt') ORDER BY filename, size;

SELECT last_modified > '2024-01-01' AND last_modified < '2500-01-01' FROM READ_BLOB('test/sql/table_function/files/*');

CREATE TABLE integers (i INT);

SELECT * FROM sqlite_master;

SELECT EXISTS(SELECT * FROM sqlite_master);

SELECT EXISTS(SELECT * FROM sqlite_master OFFSET 1);

SELECT COUNT(*) FROM sqlite_master WHERE name = 'test';

SELECT COUNT(*) FROM sqlite_master WHERE name = 'integers';

CREATE TABLE tconstraint1 (i INT PRIMARY KEY DEFAULT (3), j BLOB NOT NULL);

SELECT * FROM sqlite_master WHERE name = 'tconstraint1';

CREATE TABLE tconstraint2 (i INT, j INT, k INT, l INT UNIQUE, PRIMARY KEY (i, j, k));

SELECT * FROM sqlite_master WHERE name = 'tconstraint2';

CREATE INDEX i_index ON integers(i);

SELECT * REPLACE (TRIM(sql, CHR(10)) AS sql) FROM sqlite_master WHERE name = 'i_index';

CREATE VIEW v1 AS SELECT 42;

SELECT "type", "name", "tbl_name", rootpage FROM sqlite_master WHERE name = 'v1';

BEGIN;

BEGIN;

SELECT * FROM sqlite_master;

SELECT * FROM sqlite_master;

ROLLBACK;

ROLLBACK;

SELECT * FROM sqlite_master;

DROP VIEW sqlite_master;

CREATE TABLE "a b c" ("d e" INT, f INT);

SELECT * FROM sqlite_master;

DROP TABLE "a b c";

CREATE TABLE "inte""gers" (i INT);

SELECT * FROM sqlite_master;

DROP TABLE "inte""gers";

CREATE TABLE integers ("a b" INT, "c d" INT, PRIMARY KEY ("a b", "c d"));

SELECT * FROM sqlite_master;

DROP TABLE integers;

CREATE TABLE "1a" (a1 INT, a2 INT);

SELECT * FROM sqlite_master;

CREATE TABLE wide (col0 TEXT, col1 INT, col2 TIME, col3 TIME, col4 BIGINT, col5 BIGINT, col6 TEXT, col7 TIME, col8 TEXT, col9 INT, col10 BIGINT, col11 TIME, col12 TIME, col13 TEXT, col14 TIME, col15 TEXT, col16 TEXT, col17 INT, col18 TIME, col19 INT, col20 BIGINT, col21 TIME, col22 INT, col23 BIGINT, col24 TEXT, col25 TEXT, col26 BIGINT, col27 TIME, col28 BIGINT, col29 TIME, col30 TEXT, col31 INT, col32 INT, col33 TEXT, col34 BIGINT, col35 TEXT, col36 BIGINT, col37 TEXT, col38 INT, col39 TIME, col40 TIME, col41 TIME, col42 BIGINT, col43 TEXT, col44 BIGINT, col45 INT, col46 TIME, col47 INT, col48 INT, col49 TEXT, col50 TEXT, col51 INT, col52 TIME, col53 TEXT, col54 TEXT, col55 TEXT, col56 BIGINT, col57 TIME, col58 BIGINT, col59 TIME, col60 TIME, col61 TEXT, col62 TEXT, col63 TIME, col64 TEXT, col65 TEXT, col66 BIGINT, col67 INT, col68 BIGINT, col69 TEXT, col70 INT, col71 TEXT, col72 BIGINT, col73 BIGINT, col74 TEXT, col75 TIME, col76 TEXT, col77 INT, col78 TIME, col79 TEXT, col80 BIGINT, col81 INT, col82 BIGINT, col83 BIGINT, col84 BIGINT, col85 TIME, col86 BIGINT, col87 TIME, col88 TIME, col89 INT, col90 BIGINT, col91 BIGINT, col92 INT, col93 INT, col94 TIME, col95 TEXT, col96 TEXT, col97 TEXT, col98 TEXT, col99 INT, col100 TEXT, col101 INT, col102 TIME, col103 TEXT, col104 BIGINT, col105 TEXT, col106 INT, col107 TEXT, col108 TIME, col109 TIME, col110 BIGINT, col111 INT, col112 TIME, col113 INT, col114 TIME, col115 INT, col116 INT, col117 TIME, col118 TEXT, col119 BIGINT, col120 TIME, col121 INT, col122 INT, col123 TEXT, col124 TEXT, col125 BIGINT, col126 TEXT, col127 TEXT, col128 BIGINT, col129 TIME, col130 TIME, col131 INT, col132 TEXT, col133 TEXT, col134 BIGINT, col135 INT, col136 INT, col137 BIGINT, col138 TIME, col139 TIME, col140 TEXT, col141 TEXT, col142 TIME, col143 TEXT, col144 BIGINT, col145 BIGINT, col146 TIME, col147 TEXT, col148 BIGINT, col149 BIGINT, col150 TIME, col151 TEXT, col152 TEXT, col153 TIME, col154 TIME, col155 TEXT, col156 TIME, col157 TEXT, col158 BIGINT, col159 TIME, col160 TIME, col161 TEXT, col162 INT, col163 TIME, col164 BIGINT, col165 TIME, col166 INT, col167 INT, col168 INT, col169 BIGINT, col170 INT, col171 TEXT, col172 TEXT, col173 INT, col174 TIME, col175 INT, col176 BIGINT, col177 TIME, col178 INT, col179 INT, col180 INT, col181 BIGINT, col182 TEXT, col183 INT, col184 TIME, col185 TIME, col186 BIGINT, col187 BIGINT, col188 TEXT, col189 TEXT, col190 BIGINT, col191 INT, col192 INT, col193 INT, col194 INT, col195 TEXT, col196 TEXT, col197 TIME, col198 TEXT, col199 BIGINT, col200 TEXT, col201 TIME, col202 TEXT, col203 BIGINT, col204 BIGINT, col205 INT, col206 TEXT, col207 BIGINT, col208 BIGINT, col209 TIME, col210 TEXT, col211 INT, col212 TEXT, col213 INT, col214 BIGINT, col215 INT, col216 INT, col217 BIGINT, col218 INT, col219 INT, col220 INT, col221 INT, col222 TEXT, col223 TEXT, col224 BIGINT, col225 BIGINT, col226 INT, col227 TEXT, col228 INT, col229 TEXT, col230 BIGINT, col231 TEXT, col232 TIME, col233 BIGINT, col234 BIGINT, col235 TIME, col236 INT, col237 TIME, col238 INT, col239 BIGINT, col240 BIGINT, col241 INT, col242 TIME, col243 INT, col244 TIME, col245 BIGINT, col246 TIME, col247 TEXT, col248 TEXT, col249 INT, col250 BIGINT, col251 TEXT, col252 TEXT, col253 BIGINT, col254 TEXT, col255 TEXT, col256 TEXT, col257 BIGINT, col258 TIME, col259 TIME, col260 TEXT, col261 INT, col262 TEXT, col263 INT, col264 BIGINT, col265 TEXT, col266 INT, col267 TEXT, col268 TEXT, col269 TIME, col270 BIGINT, col271 BIGINT, col272 BIGINT, col273 TEXT, col274 TEXT, col275 TIME, col276 TIME, col277 INT, col278 BIGINT, col279 INT, col280 BIGINT, col281 INT, col282 TEXT, col283 TEXT, col284 TEXT, col285 TIME, col286 BIGINT, col287 BIGINT, col288 INT, col289 TEXT, col290 BIGINT, col291 TEXT, col292 TIME, col293 TEXT, col294 TIME, col295 TIME, col296 BIGINT, col297 INT, col298 BIGINT, col299 INT, col300 TIME, col301 TIME, col302 TEXT, col303 INT, col304 BIGINT, col305 BIGINT, col306 INT, col307 BIGINT, col308 BIGINT, col309 BIGINT, col310 BIGINT, col311 TEXT, col312 TIME, col313 BIGINT, col314 TIME, col315 INT, col316 TEXT, col317 BIGINT, col318 TIME, col319 INT, col320 INT, col321 BIGINT, col322 INT, col323 TIME, col324 TIME, col325 INT, col326 TIME, col327 BIGINT, col328 INT, col329 BIGINT, col330 INT, col331 INT, col332 INT, col333 TEXT, col334 BIGINT, col335 TIME, col336 INT, col337 BIGINT, col338 TIME, col339 BIGINT, col340 TIME, col341 BIGINT, col342 TEXT, col343 BIGINT, col344 TIME, col345 BIGINT, col346 TIME, col347 BIGINT, col348 INT, col349 TEXT, col350 TEXT, col351 INT, col352 TEXT, col353 BIGINT, col354 INT, col355 TEXT, col356 INT, col357 INT, col358 TEXT, col359 TEXT, col360 TIME, col361 BIGINT, col362 TEXT, col363 BIGINT, col364 TEXT, col365 TIME, col366 TEXT, col367 TEXT, col368 TEXT, col369 TEXT, col370 BIGINT, col371 BIGINT, col372 TIME, col373 TIME, col374 TEXT, col375 BIGINT, col376 TEXT, col377 INT, col378 BIGINT, col379 TEXT, col380 INT, col381 INT, col382 TEXT, col383 TEXT, col384 TIME, col385 TIME, col386 TEXT, col387 TEXT, col388 TEXT, col389 BIGINT, col390 TEXT, col391 INT, col392 TEXT, col393 BIGINT, col394 TIME, col395 TIME, col396 INT, col397 BIGINT, col398 TEXT, col399 TIME, col400 TEXT, col401 TEXT, col402 TIME, col403 BIGINT, col404 TEXT, col405 TIME, col406 TIME, col407 TEXT, col408 TIME, col409 TIME, col410 TEXT, col411 TIME, col412 BIGINT, col413 TEXT, col414 TIME, col415 BIGINT, col416 TIME, col417 TEXT, col418 TEXT, col419 INT, col420 BIGINT, col421 BIGINT, col422 TIME, col423 TEXT, col424 TIME, col425 INT, col426 TIME, col427 TIME, col428 TEXT, col429 BIGINT, col430 TIME, col431 TEXT, col432 TEXT, col433 INT, col434 INT, col435 TEXT, col436 TIME, col437 TIME, col438 TIME, col439 INT, col440 TEXT, col441 INT, col442 BIGINT, col443 INT, col444 BIGINT, col445 BIGINT, col446 TIME, col447 TEXT, col448 INT, col449 TIME, col450 TEXT, col451 INT, col452 TEXT, col453 INT, col454 TEXT, col455 TEXT, col456 BIGINT, col457 TIME, col458 BIGINT, col459 INT, col460 BIGINT, col461 INT, col462 TEXT, col463 TIME, col464 TEXT, col465 INT, col466 BIGINT, col467 TEXT, col468 INT, col469 BIGINT, col470 TIME, col471 INT, col472 TEXT, col473 BIGINT, col474 BIGINT, col475 BIGINT, col476 TEXT, col477 TIME, col478 BIGINT, col479 TIME, col480 INT, col481 INT, col482 BIGINT, col483 INT, col484 TEXT, col485 INT, col486 INT, col487 BIGINT, col488 BIGINT, col489 TEXT, col490 INT, col491 INT, col492 BIGINT, col493 TEXT, col494 TIME, col495 INT, col496 BIGINT, col497 TEXT, col498 TEXT, col499 TEXT, col500 TIME, col501 INT, col502 TEXT, col503 INT, col504 TIME, col505 BIGINT, col506 BIGINT, col507 INT, col508 BIGINT, col509 BIGINT, col510 BIGINT, col511 TIME, col512 TEXT, col513 TIME, col514 INT, col515 TIME, col516 TIME, col517 BIGINT, col518 INT, col519 TIME, col520 TEXT, col521 INT, col522 INT, col523 INT, col524 BIGINT, col525 TIME, col526 TIME, col527 TEXT, col528 TIME, col529 TIME, col530 TEXT, col531 INT, col532 BIGINT, col533 BIGINT, col534 INT, col535 BIGINT, col536 TEXT, col537 INT, col538 TIME, col539 TEXT, col540 BIGINT, col541 TIME, col542 BIGINT, col543 INT, col544 TIME, col545 INT, col546 BIGINT, col547 BIGINT, col548 INT, col549 INT, col550 TIME, col551 INT, col552 TIME, col553 BIGINT, col554 INT, col555 TIME, col556 BIGINT, col557 TIME, col558 BIGINT, col559 TIME, col560 TEXT, col561 BIGINT, col562 INT, col563 INT, col564 BIGINT, col565 TIME, col566 BIGINT, col567 INT, col568 BIGINT, col569 BIGINT, col570 INT, col571 INT, col572 BIGINT, col573 TIME, col574 TEXT, col575 INT, col576 INT, col577 TIME, col578 TIME, col579 TIME, col580 TEXT, col581 BIGINT, col582 TEXT, col583 TIME, col584 TEXT, col585 TIME, col586 BIGINT, col587 INT, col588 TIME, col589 INT, col590 BIGINT, col591 TIME, col592 TEXT, col593 TIME, col594 BIGINT, col595 TIME, col596 TIME, col597 TEXT, col598 TIME, col599 BIGINT, col600 INT, col601 BIGINT, col602 INT, col603 BIGINT, col604 INT, col605 TEXT, col606 TEXT, col607 INT, col608 BIGINT, col609 BIGINT, col610 TIME, col611 BIGINT, col612 TIME, col613 TIME, col614 INT, col615 TEXT, col616 BIGINT, col617 TIME, col618 TIME, col619 TIME, col620 TIME, col621 TEXT, col622 BIGINT, col623 BIGINT, col624 TEXT, col625 INT, col626 TEXT, col627 TEXT, col628 TIME, col629 TIME, col630 BIGINT, col631 BIGINT, col632 INT, col633 INT, col634 TEXT, col635 INT, col636 BIGINT, col637 BIGINT, col638 INT, col639 TIME, col640 TIME, col641 BIGINT, col642 TEXT, col643 INT, col644 TIME, col645 TEXT, col646 TIME, col647 INT, col648 INT, col649 TEXT, col650 TIME, col651 BIGINT, col652 BIGINT, col653 INT, col654 TIME, col655 INT, col656 INT, col657 INT, col658 BIGINT, col659 BIGINT, col660 TIME, col661 BIGINT, col662 INT, col663 BIGINT, col664 BIGINT, col665 TEXT, col666 TEXT, col667 TEXT, col668 TIME, col669 TIME, col670 TEXT, col671 BIGINT, col672 INT, col673 INT, col674 BIGINT, col675 BIGINT, col676 BIGINT, col677 INT, col678 TEXT, col679 TEXT, col680 TEXT, col681 BIGINT, col682 TEXT, col683 BIGINT, col684 INT, col685 TIME, col686 INT, col687 TIME, col688 TEXT, col689 TIME, col690 TEXT, col691 TEXT, col692 TEXT, col693 BIGINT, col694 TEXT, col695 TEXT, col696 TIME, col697 TIME, col698 BIGINT, col699 TEXT, col700 BIGINT, col701 INT, col702 INT, col703 TIME, col704 BIGINT, col705 TIME, col706 BIGINT, col707 INT, col708 BIGINT, col709 INT, col710 TEXT, col711 TIME, col712 TEXT, col713 BIGINT, col714 INT, col715 TIME, col716 BIGINT, col717 TIME, col718 BIGINT, col719 TEXT, col720 BIGINT, col721 TIME, col722 BIGINT, col723 INT, col724 TEXT, col725 TIME, col726 TIME, col727 INT, col728 BIGINT, col729 INT, col730 INT, col731 TIME, col732 INT, col733 INT, col734 BIGINT, col735 TEXT, col736 TEXT, col737 TEXT, col738 TIME, col739 BIGINT, col740 TEXT, col741 INT, col742 INT, col743 BIGINT, col744 TIME, col745 BIGINT, col746 BIGINT, col747 TIME, col748 TIME, col749 TIME, col750 TEXT, col751 INT, col752 TIME, col753 INT, col754 TIME, col755 INT, col756 INT, col757 BIGINT, col758 INT, col759 TIME, col760 TIME, col761 TIME, col762 INT, col763 BIGINT, col764 INT, col765 BIGINT, col766 TIME, col767 INT, col768 TIME, col769 TIME, col770 INT, col771 TEXT, col772 INT, col773 BIGINT, col774 TEXT, col775 TIME, col776 TIME, col777 BIGINT, col778 TEXT, col779 INT, col780 INT, col781 INT, col782 BIGINT, col783 INT, col784 TIME, col785 TIME, col786 TEXT, col787 INT, col788 TIME, col789 INT, col790 TEXT, col791 TEXT, col792 TIME, col793 BIGINT, col794 INT, col795 INT, col796 TEXT, col797 TIME, col798 TIME, col799 BIGINT, col800 TIME, col801 TIME, col802 BIGINT, col803 TIME, col804 BIGINT, col805 BIGINT, col806 TEXT, col807 TIME, col808 INT, col809 INT, col810 BIGINT, col811 TEXT, col812 INT, col813 TIME, col814 TIME, col815 INT, col816 TIME, col817 TEXT, col818 INT, col819 INT, col820 INT, col821 INT, col822 TEXT, col823 INT, col824 BIGINT, col825 INT, col826 INT, col827 BIGINT, col828 BIGINT, col829 TEXT, col830 INT, col831 TEXT, col832 INT, col833 TEXT, col834 BIGINT, col835 BIGINT, col836 TIME, col837 TIME, col838 TEXT, col839 INT, col840 TEXT, col841 INT, col842 BIGINT, col843 TIME, col844 TEXT, col845 TEXT, col846 INT, col847 INT, col848 TEXT, col849 TIME, col850 INT, col851 INT, col852 TIME, col853 TIME, col854 BIGINT, col855 TIME, col856 TIME, col857 TIME, col858 TIME, col859 TEXT, col860 TIME, col861 TIME, col862 INT, col863 INT, col864 TEXT, col865 BIGINT, col866 BIGINT, col867 TIME, col868 TIME, col869 TEXT, col870 TIME, col871 TIME, col872 BIGINT, col873 TIME, col874 BIGINT, col875 BIGINT, col876 TEXT, col877 BIGINT, col878 TEXT, col879 TIME, col880 TEXT, col881 BIGINT, col882 INT, col883 TEXT, col884 TIME, col885 TIME, col886 TIME, col887 TEXT, col888 TIME, col889 TIME, col890 TEXT, col891 TEXT, col892 TEXT, col893 TIME, col894 BIGINT, col895 TEXT, col896 INT, col897 BIGINT, col898 TIME, col899 TIME, col900 TIME, col901 TEXT, col902 TEXT, col903 INT, col904 TEXT, col905 TIME, col906 BIGINT, col907 TIME, col908 TEXT, col909 TIME, col910 BIGINT, col911 TEXT, col912 TIME, col913 INT, col914 BIGINT, col915 TEXT, col916 TEXT, col917 BIGINT, col918 TEXT, col919 TIME, col920 INT, col921 BIGINT, col922 TIME, col923 BIGINT, col924 TIME, col925 TEXT, col926 TEXT, col927 TEXT, col928 TEXT, col929 BIGINT, col930 TEXT, col931 INT, col932 BIGINT, col933 INT, col934 BIGINT, col935 BIGINT, col936 INT, col937 BIGINT, col938 TEXT, col939 TIME, col940 INT, col941 TIME, col942 INT, col943 TEXT, col944 BIGINT, col945 TIME, col946 BIGINT, col947 TEXT, col948 TIME, col949 TIME, col950 TIME, col951 INT, col952 TEXT, col953 BIGINT, col954 TIME, col955 TEXT, col956 INT, col957 BIGINT, col958 BIGINT, col959 BIGINT, col960 BIGINT, col961 INT, col962 TIME, col963 TEXT, col964 BIGINT, col965 TEXT, col966 BIGINT, col967 TIME, col968 TEXT, col969 TIME, col970 TIME, col971 TIME, col972 INT, col973 INT, col974 BIGINT, col975 BIGINT, col976 BIGINT, col977 TIME, col978 BIGINT, col979 TEXT, col980 TEXT, col981 BIGINT, col982 INT, col983 BIGINT, col984 TIME, col985 BIGINT, col986 INT, col987 BIGINT, col988 INT, col989 BIGINT, col990 BIGINT, col991 TIME, col992 BIGINT, col993 BIGINT, col994 BIGINT, col995 INT, col996 INT, col997 INT, col998 INT, col999 TEXT, col1000 TIME, col1001 BIGINT, col1002 BIGINT, col1003 BIGINT, col1004 TIME, col1005 TEXT, col1006 TEXT, col1007 TEXT, col1008 INT, col1009 BIGINT, col1010 BIGINT, col1011 TIME, col1012 BIGINT, col1013 TIME, col1014 INT, col1015 TEXT, col1016 TIME, col1017 TIME, col1018 INT, col1019 TEXT, col1020 TEXT, col1021 INT, col1022 BIGINT, col1023 TIME, col1024 BIGINT);

SELECT COUNT(1) FROM information_schema.columns WHERE table_name = 'wide';

SELECT COUNT(1) FROM information_schema.columns WHERE table_name = 'wide' AND column_name = 'col1024' AND data_type = 'BIGINT';

CREATE VIEW vwide AS SELECT * FROM wide;

SELECT COUNT(1) FROM information_schema.columns WHERE table_name = 'wide' OR table_name = 'vwide';

SELECT * FROM RANGE(0, 10, 1);

CALL range(10);

SELECT * FROM GENERATE_SERIES(0, 10, 1);

SELECT * FROM RANGE(10, 0, -1) ORDER BY 1 ASC;

SELECT * FROM GENERATE_SERIES(10, 0, -1) ORDER BY 1 ASC;

SELECT * FROM RANGE(0, -5, -1);

SELECT * FROM RANGE(0, 10, 0);

SELECT * FROM RANGE(0, 10, -1);

SELECT * FROM RANGE(10, 0, 1);

SELECT * FROM RANGE(0, 10);

SELECT * FROM RANGE(0, 10);

SELECT EXISTS(SELECT * FROM RANGE(0, 10));

SELECT EXISTS(SELECT * FROM RANGE(0, 0));

SELECT * FROM RANGE(0, 10) AS t1(j) WHERE j = 3;

SELECT * FROM RANGE(0, 'hello');

SELECT * FROM RANGE(10, 'hello');

SELECT * FROM RANGE(10, 10, 'hello');

SELECT * FROM GENERATE_SERIES(-2305843009213693951, 2305843009213693951, 2305843009213693951);

SELECT * FROM GENERATE_SERIES(2305843009213693951, -2305843009213693951, -2305843009213693951);

SELECT * FROM GENERATE_SERIES(0, 10, 9223372036854775807);

SELECT * FROM GENERATE_SERIES(0, 9223372036854775807, 9223372036854775807);

SELECT * FROM GENERATE_SERIES(0, -9223372036854775807, -9223372036854775807);

SELECT * FROM GENERATE_SERIES(-9223372036854775808, 9223372036854775807, 9223372036854775807);

SELECT * FROM GENERATE_SERIES(-9223372036854775807, -9223372036854775808, -1);

SELECT * FROM GENERATE_SERIES(-9223372036854775808, 9223372036854775807, 9223372036854775807);

SELECT * FROM GENERATE_SERIES(0, -9223372036854775808, -9223372036854775808);

SELECT * FROM GENERATE_SERIES(0, 9223372036854775807, 9223372036854775807);

SELECT * FROM GENERATE_SERIES(0, 10, 9223372036854775807);

SELECT * FROM GENERATE_SERIES(1, 3, 1) AS _(x), GENERATE_SERIES(x, 2, 1) AS __(y);

SELECT * FROM REPEAT(0, 3);

SELECT * FROM REPEAT(NULL, 2);

SELECT * FROM REPEAT('hello', 2);

SELECT * FROM REPEAT('thisisalongstring', 2);

SELECT * FROM REPEAT(CAST('\x00\x00hello' AS BLOB), 2);

SELECT * FROM REPEAT(1, 10000);

SELECT * FROM REPEAT(CAST('1992-01-01' AS DATE), 2);

SELECT * FROM REPEAT(INTERVAL '30' DAYS, 2);

SELECT * FROM REPEAT(INTERVAL '30' DAYS, NULL);

PRAGMA enable_verification;

CREATE TABLE integers (i INT, j INT);

SELECT * FROM PRAGMA_TABLE_INFO('integers');

SELECT name FROM PRAGMA_TABLE_INFO('integers');

SELECT blablabla FROM PRAGMA_TABLE_INFO('integers');

CREATE TABLE join_table (name TEXT, value INT);

INSERT INTO join_table VALUES ('i', 33), ('j', 44);

SELECT a.name, cid, value FROM PRAGMA_TABLE_INFO('integers') AS a INNER JOIN join_table ON a.name = join_table.name ORDER BY a.name;

SELECT cid, name FROM (SELECT * FROM PRAGMA_TABLE_INFO('integers')) AS a;

SET disable_timestamptz_casts = FALSE;

SELECT CAST(CAST('2020-01-01T00:00:00' AS TIMESTAMP) AS TIMESTAMPTZ);

SET disable_timestamptz_casts = TRUE;

SELECT CAST(CAST('2020-01-01T00:00:00' AS TIMESTAMP) AS TIMESTAMPTZ);

SET calendar = 'gregorian';

SET TimeZone = 'America/Los_Angeles';

SET disable_timestamptz_casts = FALSE;

SELECT CAST(CAST('2020-01-01T00:00:00' AS TIMESTAMP) AS TIMESTAMPTZ);

SET disable_timestamptz_casts = TRUE;

SELECT CAST(CAST('2020-01-01T00:00:00' AS TIMESTAMP) AS TIMESTAMPTZ);

SET Calendar = 'hebrew';

SET TimeZone = 'UTC';

SELECT AGE(CAST('2020-01-01' AS TIMESTAMPTZ) + INTERVAL (30) DAY, CAST('2020-01-01' AS TIMESTAMPTZ));

SELECT AGE(CAST('2020-06-01' AS TIMESTAMPTZ) + INTERVAL (230) DAY, CAST('2020-06-01' AS TIMESTAMPTZ));

SELECT AGE(CAST('2021-06-01' AS TIMESTAMPTZ), CAST('2020-06-01' AS TIMESTAMPTZ) + INTERVAL (230) DAY);

SET Calendar = 'gregorian';

SET TimeZone = 'America/Los_Angeles';

SELECT name FROM ICU_CALENDAR_NAMES() GROUP BY 1 ORDER BY 1;

SELECT * FROM DUCKDB_SETTINGS() WHERE name = 'Calendar';

SET Calendar = 'fnord';

SET TimeZone = 'Asia/Tokyo';

CREATE TABLE timestamps AS SELECT CAST(ts AS TIMESTAMPTZ) AS ts, era FROM (VALUES ('0645-06-30 00:00:00+00', 'Taika'), ('1867-01-01 00:00:00+00', 'Keiou'), ('1868-09-07 00:00:00+00', 'Keiou'), ('1868-09-08 00:00:00+00', 'Meiji'), ('1912-07-29 00:00:00+00', 'Meiji'), ('1912-07-30 00:00:00+00', 'Taisho'), ('1926-12-24 00:00:00+00', 'Taisho'), ('1926-12-25 00:00:00+00', 'Showa'), ('1989-01-06 00:00:00+00', 'Showa'), ('1989-01-08 00:00:00+00', 'Heisei'), ('2019-05-01 00:00:00+00', 'Reiwa'), ('2022-01-01 00:00:00+00', 'Reiwa')) AS tbl(ts, era);

SET Calendar = 'japanese';

SELECT * FROM DUCKDB_SETTINGS() WHERE name = 'Calendar';

SELECT era, ts, DATE_PART(['era', 'year', 'month', 'day'], ts) FROM timestamps ORDER BY 2;

SET CALENDAR = 'islamic-umalqura';

SET CALENDAR = 'islamic-umalqura';

SET CALENDAR = 'indian';

SELECT CAST('-276069-9-30 0:0:00 America/Whitehorse' AS TIMESTAMPTZ);

PRAGMA CALENDAR = 'japanese';

PRAGMA CALENDAR = 'japanese';

SET Calendar = 'gregorian';

SET TimeZone = 'Europe/Duck';

SET TimeZone = 'America/Los_Angeles';

SELECT * FROM DUCKDB_SETTINGS() WHERE name = 'TimeZone';

SELECT CAST('2001-02-16 20:38:40' AS TIMESTAMP) AT TIME ZONE 'America/Denver';

SELECT CAST('2001-02-16 20:38:40' AS TIMESTAMP) AT TIME ZONE 'america/denver';

SELECT CAST('2001-02-16 20:38:40' AS TIMESTAMP) AT TIME ZONE 'America/Donver';

SELECT CAST('2001-02-16 20:38:40-05' AS TIMESTAMPTZ) AT TIME ZONE 'America/Denver';

SELECT CAST('2001-02-16 20:38:40' AS TIMESTAMP) AT TIME ZONE 'Europe/Duck';

SELECT CAST('2001-02-16 20:38:40-05' AS TIMESTAMPTZ) AT TIME ZONE 'Europe/Duck';

SELECT CAST('2001-02-16 20:38:40-05' AS TIMESTAMPTZ) AT TIME ZONE 'Europe/Duck';

SELECT CAST('2001-02-16 20:38:40-05' AS TIMESTAMPTZ) AT TIME ZONE 'Europe/Duck';

SELECT CAST('2001-02-16 20:38:40-05' AS TIMESTAMPTZ) AT TIME ZONE 'Europe/Duck';

SELECT CAST('2001-02-16 20:38:40-05' AS TIMESTAMPTZ) AT TIME ZONE 'Europe/Duck';

SELECT CAST(NULL AS TIMESTAMP) AT TIME ZONE 'America/Denver';

SELECT CAST(NULL AS TIMESTAMPTZ) AT TIME ZONE 'America/Denver';

SELECT CAST('2001-02-16 20:38:40' AS TIMESTAMP) AT TIME ZONE NULL;

SELECT CAST('2001-02-16 20:38:40-05' AS TIMESTAMPTZ) AT TIME ZONE NULL;

SELECT CAST('12:15:37.123456-08' AS TIMETZ) AT TIME ZONE 'America/Phoenix';

SELECT TIMEZONE('America/Phoenix', CAST('12:15:37.123456-08' AS TIMETZ));

SELECT CAST(CAST('2020-01-01' AS DATE) AS TIMESTAMPTZ) AS dttz;

SELECT CAST(CAST('infinity' AS DATE) AS TIMESTAMPTZ) AS dttz;

SELECT CAST(CAST('-infinity' AS DATE) AS TIMESTAMPTZ) AS dttz;

SELECT CAST(CAST('5877642-06-25 (BC)' AS DATE) AS TIMESTAMPTZ) AS dttz;

SELECT CAST(CAST('5881580-07-10' AS DATE) AS TIMESTAMPTZ) AS dttz;

CREATE TABLE attimezone (ts TIMESTAMP, tstz TIMESTAMPTZ, ttz TIMETZ, tz TEXT);

INSERT INTO attimezone (VALUES('2001-02-16 20:38:40', '2001-02-16 19:38:40-08', '19:38:40-08', 'America/Phoenix'), ('2001-02-16 18:38:40', '2001-02-16 20:38:40-05', '20:38:40-05', 'America/Phoenix'), ('infinity', 'infinity', '19:38:40-08', 'America/Phoenix'), ('-infinity', '-infinity', '20:38:40-05', 'America/Phoenix'), (NULL, NULL, NULL, 'America/Phoenix'), ('2001-02-16 20:38:40', '2001-02-16 19:38:40-08', '19:38:40+08', 'UTC'), ('2001-02-16 18:38:40', '2001-02-16 20:38:40-05', '20:38:40+15:59', 'UTC'), ('infinity', 'infinity', '12:15:37.123456-08', 'UTC'), ('-infinity', '-infinity', '20:38:40-15:59', 'UTC'), (NULL, NULL, NULL, 'UTC'), ('2001-02-16 20:38:40', '2001-02-16 19:38:40-08', '19:38:40-08', NULL), ('2001-02-16 18:38:40', '2001-02-16 20:38:40-05', '20:38:40-05', NULL), ('infinity', 'infinity', '12:15:37.123456-08', NULL), ('-infinity', '-infinity', '20:38:40-15:59', NULL));

SELECT ts AT TIME ZONE tz, tstz AT TIME ZONE tz, ttz AT TIME ZONE tz FROM attimezone;

SELECT ts AT TIME ZONE tz, tstz AT TIME ZONE tz, ttz AT TIME ZONE tz FROM attimezone WHERE ts > CAST('2001-02-16 18:38:40' AS TIMESTAMP);

SELECT "localtimestamp";

SELECT "localtime";

SELECT CURRENT_LOCALTIMESTAMP();

SELECT CURRENT_LOCALTIME();

SELECT name, abbrev FROM PG_TIMEZONE_NAMES() ORDER BY name;

SET TimeZone = 'Asia/Amman';

SELECT CAST('2022-10-29 00:00:00+00' AS TIMESTAMPTZ);

SET TimeZone = 'America/Chihuahua';

SELECT CAST('2022-11-01 00:00:00+00' AS TIMESTAMPTZ);

SET TimeZone = 'America/Ciudad_Juarez';

SELECT CAST('2023-05-01 12:00:00+00' AS TIMESTAMPTZ);

SET TimeZone = 'Egypt';

SELECT CAST('2023-05-15 12:00:00+00' AS TIMESTAMPTZ);

SET TimeZone = 'Asia/Beirut';

SELECT CAST('2023-03-26 12:00:00+00' AS TIMESTAMPTZ), CAST('2023-04-21 12:00:00+00' AS TIMESTAMPTZ);

SET TimeZone = 'America/Nuuk';

SELECT CAST('2022-10-30 03:00:00-07' AS TIMESTAMPTZ), CAST('2023-10-30 02:00:00-07' AS TIMESTAMPTZ);

SET TimeZone = 'America/Scoresbysund';

SELECT CAST('2024-03-31 00:59:00-01' AS TIMESTAMPTZ), CAST('2024-03-31 01:00:00-01' AS TIMESTAMPTZ);

SET TimeZone = 'Asia/Almaty';

SELECT CAST('2024-02-29 00:00:00+06' AS TIMESTAMPTZ), CAST('2024-03-01 01:00:00+06' AS TIMESTAMPTZ);

SET TimeZone = 'Atlantic/Azores';

SELECT CAST('1981-09-27 01:00:00+00' AS TIMESTAMPTZ);

SET timezone = 'America/Asuncion';

SELECT CAST('2025-03-23' AS TIMESTAMPTZ);

SELECT utc_offset, is_dst FROM PG_TIMEZONE_NAMES() WHERE name = 'America/Asuncion';

SET timezone = 'America/Coyhaique';

SELECT CAST('2025-04-05' AS TIMESTAMPTZ);

SELECT utc_offset, is_dst FROM PG_TIMEZONE_NAMES() WHERE name = 'America/Coyhaique';

PRAGMA enable_verification;

CREATE TABLE test (b INT);

INSERT INTO test VALUES (22), (2), (7);

SELECT b FROM test ORDER BY b DESC LIMIT 2;

SELECT b FROM test ORDER BY b LIMIT 1 OFFSET 1;

SELECT b FROM test ORDER BY b LIMIT 10;

SELECT b FROM test ORDER BY b DESC LIMIT 10;

SELECT b FROM test ORDER BY b LIMIT 10 OFFSET 1;

SELECT b FROM test ORDER BY b LIMIT 10 OFFSET 10;

SELECT b FROM test ORDER BY b OFFSET 10;

PRAGMA enable_verification;

CREATE TABLE tbl AS SELECT [i] l FROM range(1000) tbl(i) UNION ALL SELECT NULL l FROM range(3)
loop i 0 2;

SELECT l FROM tbl ORDER BY l NULLS FIRST LIMIT 5;

SELECT l FROM tbl ORDER BY l LIMIT 5;

SELECT l FROM tbl ORDER BY l DESC NULLS FIRST LIMIT 5;

SELECT l FROM tbl ORDER BY l DESC LIMIT 5;

DROP TABLE tbl;

CREATE TABLE tbl AS SELECT NULL l FROM range(3) UNION ALL SELECT [i] l FROM range(1000) tbl(i)
endloop;

DROP TABLE tbl;

CREATE TABLE tbl AS SELECT [i] l FROM range(1000) tbl(i) UNION ALL SELECT [NULL] l FROM range(3)
loop i 0 2;

SELECT l FROM tbl ORDER BY l NULLS FIRST LIMIT 5;

SELECT l FROM tbl ORDER BY l LIMIT 5;

SELECT l FROM tbl ORDER BY l DESC NULLS FIRST LIMIT 5;

SELECT l FROM tbl ORDER BY l DESC LIMIT 5;

DROP TABLE tbl;

CREATE TABLE tbl AS SELECT [NULL] l FROM range(3) UNION ALL SELECT [i] l FROM range(1000) tbl(i)
endloop;

SELECT RANGE(0, i) AS l FROM RANGE(0, 10) AS tbl(i) ORDER BY l DESC LIMIT 3;

SELECT RANGE(0, i) AS l FROM RANGE(0, 10) AS tbl(i) ORDER BY l ASC LIMIT 3;

PRAGMA enable_verification;

CREATE TABLE tbl AS SELECT i, i % 1000 AS j FROM RANGE(0, 1000000) AS tbl(i);

SELECT * FROM tbl ORDER BY j, i LIMIT 5;

SELECT * FROM tbl ORDER BY j DESC, i DESC LIMIT 5;

PRAGMA enable_verification;

CREATE TABLE nested_struct (cik BIGINT, entityName TEXT, a STRUCT(b STRUCT(c INT, d INT), c STRUCT(e INT, f INT)));

INSERT INTO nested_struct VALUES (42, 'entity', {'b': {'c': 42, 'd': 43}, 'c': {'e': 44, 'f': 45}}), (142, 'entity2', {'b': {'c': 142, 'd': 143}, 'c': {'e': 144, 'f': 145}});

SELECT UNNEST(a, recursive := TRUE) FROM nested_struct LIMIT 1;

SELECT UNNEST(a, recursive := TRUE) FROM nested_struct ORDER BY a.b.c LIMIT 1;

SELECT UNNEST(a, recursive := TRUE) FROM nested_struct ORDER BY a.b.c DESC LIMIT 1;

PRAGMA enable_verification;

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (1), (NULL);

SELECT * FROM integers ORDER BY i NULLS FIRST LIMIT 2;

SELECT * FROM integers ORDER BY i LIMIT 2;

SELECT * FROM integers ORDER BY i DESC NULLS FIRST LIMIT 2;

SELECT * FROM integers ORDER BY i DESC LIMIT 2;

PRAGMA enable_verification;

PRAGMA threads = 4;

CREATE TABLE integers AS SELECT i, i j FROM range(1000000) tbl(i) UNION ALL SELECT NULL i, range j FROM range(1000000)
loop i 0 2;

SELECT i FROM integers ORDER BY i ASC NULLS FIRST LIMIT 5;

SELECT i FROM integers ORDER BY i ASC LIMIT 5;

SELECT i FROM integers ORDER BY i DESC NULLS FIRST LIMIT 5;

SELECT i FROM integers ORDER BY i DESC LIMIT 5;

SELECT i FROM integers ORDER BY i NULLS FIRST LIMIT 5 OFFSET 1000000;

SELECT i FROM integers ORDER BY i DESC NULLS FIRST LIMIT 5 OFFSET 1000000;

SELECT i FROM integers ORDER BY i LIMIT 5 OFFSET 1000000;

SELECT j, i FROM integers ORDER BY j, i NULLS FIRST LIMIT 5;

SELECT j, i FROM integers ORDER BY j, i LIMIT 5;

SELECT j, i FROM integers ORDER BY j DESC, i DESC NULLS FIRST LIMIT 5;

SELECT j, i FROM integers ORDER BY j DESC, i DESC LIMIT 5;

SELECT i, j FROM integers ORDER BY i DESC NULLS FIRST, j DESC LIMIT 5;

SELECT i, j FROM integers ORDER BY i DESC, j ASC LIMIT 5;

DROP TABLE integers;

PRAGMA enable_verification;

CREATE TABLE integers AS SELECT i, i j FROM range(100000) tbl(i) UNION ALL SELECT NULL i, range j FROM range(100000)
loop i 0 2;

SELECT i FROM integers ORDER BY i ASC NULLS FIRST LIMIT 5;

SELECT i FROM integers ORDER BY i ASC LIMIT 5;

SELECT i FROM integers ORDER BY i DESC NULLS FIRST LIMIT 5;

SELECT i FROM integers ORDER BY i DESC LIMIT 5;

SELECT i FROM integers ORDER BY i NULLS FIRST LIMIT 5 OFFSET 100000;

SELECT i FROM integers ORDER BY i DESC NULLS FIRST LIMIT 5 OFFSET 100000;

SELECT i FROM integers ORDER BY i LIMIT 5 OFFSET 100000;

SELECT j, i FROM integers ORDER BY j, i NULLS FIRST LIMIT 5;

SELECT j, i FROM integers ORDER BY j, i LIMIT 5;

SELECT j, i FROM integers ORDER BY j DESC, i DESC NULLS FIRST LIMIT 5;

SELECT j, i FROM integers ORDER BY j DESC, i DESC LIMIT 5;

SELECT i, j FROM integers ORDER BY i DESC NULLS FIRST, j DESC LIMIT 5;

SELECT i, j FROM integers ORDER BY i DESC, j ASC LIMIT 5;

DROP TABLE integers;

PRAGMA enable_verification;

CREATE TABLE integers AS SELECT i, i j FROM range(1000) tbl(i) UNION ALL SELECT NULL i, range j FROM range(1000)
loop i 0 2;

SELECT i FROM integers ORDER BY i ASC NULLS FIRST LIMIT 5;

SELECT i FROM integers ORDER BY i ASC LIMIT 5;

SELECT i FROM integers ORDER BY i DESC NULLS FIRST LIMIT 5;

SELECT i FROM integers ORDER BY i DESC LIMIT 5;

SELECT i FROM integers ORDER BY i NULLS FIRST LIMIT 5 OFFSET 1000;

SELECT i FROM integers ORDER BY i DESC NULLS FIRST LIMIT 5 OFFSET 1000;

SELECT i FROM integers ORDER BY i LIMIT 5 OFFSET 1000;

SELECT j, i FROM integers ORDER BY j, i NULLS FIRST LIMIT 5;

SELECT j, i FROM integers ORDER BY j, i LIMIT 5;

SELECT j, i FROM integers ORDER BY j DESC, i DESC NULLS FIRST LIMIT 5;

SELECT j, i FROM integers ORDER BY j DESC, i DESC LIMIT 5;

SELECT i, j FROM integers ORDER BY i DESC NULLS FIRST, j DESC LIMIT 5;

SELECT i, j FROM integers ORDER BY i DESC, j ASC LIMIT 5;

DROP TABLE integers;

PRAGMA enable_verification;

CREATE TABLE tbl AS SELECT {'i': i} l FROM range(1000) tbl(i) UNION ALL SELECT NULL l FROM range(3)
loop i 0 2;

SELECT l FROM tbl ORDER BY l NULLS FIRST LIMIT 5;

SELECT l FROM tbl ORDER BY l LIMIT 5;

SELECT l FROM tbl ORDER BY l DESC NULLS FIRST LIMIT 5;

SELECT l FROM tbl ORDER BY l DESC LIMIT 5;

DROP TABLE tbl;

PRAGMA enable_verification;

CREATE TABLE test AS SELECT i, i + 1 AS j, i + 2 AS k, -i AS l FROM RANGE(0, 10) AS t(i);

SET explain_output = 'optimized_only';

EXPLAIN SELECT * FROM test ORDER BY j DESC LIMIT 2;

SELECT * FROM test ORDER BY j DESC LIMIT 2;

EXPLAIN SELECT * FROM test ORDER BY j, i LIMIT 2;

SELECT * FROM test ORDER BY j, i LIMIT 2;

EXPLAIN SELECT i FROM test ORDER BY i LIMIT 2;

EXPLAIN SELECT * FROM (SELECT i + random() AS i, j, k, l FROM test) ORDER BY i LIMIT 2;

SELECT * FROM (SELECT -i AS i, -j AS j, -k AS k, -l AS l FROM test) ORDER BY -j DESC LIMIT 2;

SELECT * FROM (SELECT 100 + i AS i, 1000 + j AS j, 10000 + k AS k, 100000 + l AS l FROM (SELECT -i AS i, -j AS j, -k AS k, -l AS l FROM test)) ORDER BY j DESC LIMIT 2;

EXPLAIN SELECT * FROM test LIMIT 2 OFFSET 2;

SELECT * FROM test LIMIT 2 OFFSET 2;

EXPLAIN SELECT * FROM test USING SAMPLE 2 ROWS;

EXPLAIN SELECT * FROM test USING SAMPLE 10%;

SELECT * FROM test ORDER BY -j DESC LIMIT 2;

SELECT * FROM (SELECT -i AS i, -j AS j, -k AS k, -l AS l FROM test) ORDER BY -j DESC LIMIT 2;

SELECT * FROM (SELECT * FROM test ORDER BY j DESC LIMIT 2) WHERE i = 8;

SELECT l FROM (SELECT * FROM test ORDER BY j DESC LIMIT 2) WHERE k = 10;

CREATE OR REPLACE TABLE test AS SELECT i, PRINTF('%02d', i + 1) AS j, PRINTF('%02d', i + 2) AS k, -i AS l FROM RANGE(0, 10) AS t(i);

SELECT * FROM test ORDER BY j DESC LIMIT 2;

SELECT j, k, l, i FROM test WHERE i > 5 ORDER BY j DESC LIMIT 2;

SET late_materialization_max_rows = 0;

EXPLAIN SELECT * FROM test ORDER BY j DESC LIMIT 2;

RESET AS late_materialization_max_rows;

EXPLAIN SELECT * FROM test ORDER BY j DESC LIMIT 2;

PRAGMA enable_verification;

CREATE TABLE final (channel TEXT, i_brand_id INT, i_class_id INT, i_category_id INT, sum_sales DECIMAL(38, 2), number_sales INT128);

COPY final FROM 'data/csv/tpcds_14.csv' WITH (FORMAT CSV, DELIMITER '|', HEADER);

SELECT * FROM final ORDER BY channel NULLS FIRST, i_brand_id NULLS FIRST, i_class_id NULLS FIRST, i_category_id NULLS FIRST LIMIT 100;

SELECT * FROM final ORDER BY channel DESC NULLS FIRST, i_brand_id DESC NULLS FIRST, i_class_id DESC NULLS FIRST, i_category_id DESC NULLS FIRST LIMIT 100;

SELECT * FROM final ORDER BY channel, i_brand_id, i_class_id, i_category_id LIMIT 100;

SELECT * FROM final ORDER BY channel DESC, i_brand_id DESC, i_class_id DESC, i_category_id DESC LIMIT 100;

CREATE TABLE final (s_store_name1 TEXT, s_store_id1 TEXT, d_week_seq1 INT, "sun_sales1 / sun_sales2" DOUBLE, "mon_sales1 / mon_sales2" DOUBLE, "tue_sales1 / tue_sales2" DOUBLE, "wed_sales1 / wed_sales2" DOUBLE, "thu_sales1 / thu_sales2" DOUBLE, "fri_sales1 / fri_sales2" DOUBLE, "sat_sales1 / sat_sales2" DOUBLE);

COPY final FROM 'data/csv/tpcds_59.csv' WITH (FORMAT CSV, DELIMITER '|', HEADER);

SELECT * FROM final ORDER BY s_store_name1 NULLS FIRST, s_store_id1 NULLS FIRST, d_week_seq1 NULLS FIRST LIMIT 100;

CALL dbgen(sf=1);

SELECT * FROM lineitem ORDER BY l_extendedprice DESC, l_shipdate LIMIT 2;

SELECT l_quantity FROM lineitem WHERE l_linestatus = 'O' ORDER BY l_quantity LIMIT 10 OFFSET 100;

SELECT l_quantity FROM lineitem WHERE l_linestatus = 'O' ORDER BY l_quantity LIMIT 10 OFFSET 1000000;

SELECT SUM(l_quantity) FROM lineitem GROUP BY l_orderkey ORDER BY SUM(l_quantity) DESC LIMIT 10 OFFSET 100;

SELECT SUM(l_quantity) FROM lineitem GROUP BY l_orderkey ORDER BY SUM(l_quantity) DESC LIMIT 10 OFFSET 100000;

CREATE TABLE tbl (i INT);
load __TEST_DIR__/test_dsdgen_ro.db readonly;

CALL dsdgen(sf=0);

ATTACH '__TEST_DIR__/test_dsdgen_ro.db' AS dsdgentest (READ_ONLY);

CALL dsdgen(sf=0, catalog='dsdgentest');

CALL dsdgen(sf=1);

SELECT s_tax_percentage FROM store;

SELECT COUNT(*) FROM store_sales WHERE ss_addr_sk IS NULL;

SELECT COUNT(*) FROM store_sales WHERE ss_store_sk IS NULL;

SELECT COUNT(*) FROM web_sales WHERE ws_ship_customer_sk IS NULL;

SELECT ca_gmt_offset FROM customer_address GROUP BY 1 ORDER BY 1 DESC;

SELECT s_gmt_offset FROM store GROUP BY 1;

CALL dsdgen(sf=0);

CALL dsdgen(sf=0);

CALL dsdgen(sf=0, overwrite=true);

CALL dsdgen(sf=0.01, suffix='_bla');

SELECT COUNT(*) FROM call_center_bla;

CREATE SCHEMA tpcds;

CALL dsdgen(sf=0.01, schema='tpcds');

SELECT COUNT(*) FROM tpcds.call_center;

ATTACH ':memory:' AS db1;

CALL dsdgen(sf=0.01, catalog='db1');

SELECT COUNT(*) FROM db1.call_center;

CREATE SCHEMA db1.test_schema;

CALL dsdgen(sf=0.01, catalog='db1', schema='test_schema');

SELECT COUNT(*) FROM db1.test_schema.call_center;

CALL dsdgen(sf=NULL);

CALL dsdgen(catalog=NULL);

CALL dsdgen(sf=1, suffix=NULL);

CALL dsdgen(sf=0.01);

SELECT * FROM call_center;

SELECT * FROM catalog_page;

SELECT * FROM catalog_returns;

SELECT * FROM catalog_sales;

SELECT * FROM customer;

SELECT * FROM customer_address;

SELECT * FROM customer_demographics;

SELECT * FROM date_dim;

SELECT * FROM household_demographics;

SELECT * FROM income_band;

SELECT * FROM inventory;

SELECT * FROM item;

SELECT * FROM promotion;

SELECT * FROM reason;

SELECT * FROM ship_mode;

SELECT * FROM store;

SELECT * FROM store_returns;

SELECT * FROM store_sales;

SELECT * FROM time_dim;

SELECT * FROM warehouse;

SELECT * FROM web_page;

SELECT * FROM web_returns;

SELECT * FROM web_sales;

SELECT * FROM web_site;

DROP TABLE call_center;

DROP TABLE catalog_page;

DROP TABLE catalog_returns;

DROP TABLE catalog_sales;

DROP TABLE customer;

DROP TABLE customer_address;

DROP TABLE customer_demographics;

DROP TABLE date_dim;

DROP TABLE household_demographics;

DROP TABLE income_band;

DROP TABLE inventory;

DROP TABLE item;

DROP TABLE promotion;

DROP TABLE reason;

DROP TABLE ship_mode;

DROP TABLE store;

DROP TABLE store_returns;

DROP TABLE store_sales;

DROP TABLE time_dim;

DROP TABLE warehouse;

DROP TABLE web_page;

DROP TABLE web_returns;

DROP TABLE web_sales;

DROP TABLE web_site;

CALL dsdgen(sf=0.1);

DROP TABLE call_center;

DROP TABLE catalog_page;

DROP TABLE catalog_returns;

DROP TABLE catalog_sales;

DROP TABLE customer;

DROP TABLE customer_address;

DROP TABLE customer_demographics;

DROP TABLE date_dim;

DROP TABLE household_demographics;

DROP TABLE income_band;

DROP TABLE inventory;

DROP TABLE item;

DROP TABLE promotion;

DROP TABLE reason;

DROP TABLE ship_mode;

DROP TABLE store;

DROP TABLE store_returns;

DROP TABLE store_sales;

DROP TABLE time_dim;

DROP TABLE warehouse;

DROP TABLE web_page;

DROP TABLE web_returns;

DROP TABLE web_sales;

DROP TABLE web_site;

CALL dsdgen(sf=0.01);

SELECT * FROM call_center;

SELECT * FROM catalog_page;

SELECT * FROM catalog_returns;

SELECT * FROM catalog_sales;

SELECT * FROM customer;

SELECT * FROM customer_address;

SELECT * FROM customer_demographics;

SELECT * FROM date_dim;

SELECT * FROM household_demographics;

SELECT * FROM income_band;

SELECT * FROM inventory;

SELECT * FROM item;

SELECT * FROM promotion;

SELECT * FROM reason;

SELECT * FROM ship_mode;

SELECT * FROM store;

SELECT * FROM store_returns;

SELECT * FROM store_sales;

SELECT * FROM time_dim;

SELECT * FROM warehouse;

SELECT * FROM web_page;

SELECT * FROM web_returns;

SELECT * FROM web_sales;

SELECT * FROM web_site;

CALL dsdgen(sf=0)
loop i 1 100;

CALL dsdgen(sf=0)
loop i 1 100;

PRAGMA TPCDS(-1);

PRAGMA TPCDS(3290819023812038903);

PRAGMA TPCDS(32908301298);

PRAGMA TPCDS(1.1);

PRAGMA verify_serializer;

PRAGMA default_null_order = 'postgres';

CALL dsdgen(sf=0.01);

SELECT COUNT(*) FROM call_center;

SELECT COUNT(*) FROM catalog_page;

SELECT COUNT(*) FROM catalog_returns;

SELECT COUNT(*) FROM catalog_sales;

SELECT COUNT(*) FROM customer;

SELECT COUNT(*) FROM customer_demographics;

SELECT COUNT(*) FROM customer_address;

SELECT COUNT(*) FROM date_dim;

SELECT COUNT(*) FROM household_demographics;

SELECT COUNT(*) FROM inventory;

SELECT COUNT(*) FROM income_band;

SELECT COUNT(*) FROM item;

SELECT COUNT(*) FROM promotion;

SELECT COUNT(*) FROM reason;

SELECT COUNT(*) FROM ship_mode;

SELECT COUNT(*) FROM store;

SELECT COUNT(*) FROM store_returns;

SELECT COUNT(*) FROM store_sales;

SELECT COUNT(*) FROM time_dim;

SELECT COUNT(*) FROM warehouse;

SELECT COUNT(*) FROM web_page;

SELECT COUNT(*) FROM web_returns;

SELECT COUNT(*) FROM web_sales;

SELECT COUNT(*) FROM web_site;

SELECT COUNT(*) FROM web_site;

SELECT COUNT(*) FROM web_site;

PRAGMA default_null_order = 'NULLS LAST';

CALL dsdgen(sf=0.01, keys=true);

SELECT COUNT(*) FROM call_center;

SELECT COUNT(*) FROM catalog_page;

SELECT COUNT(*) FROM catalog_returns;

SELECT COUNT(*) FROM catalog_sales;

SELECT COUNT(*) FROM customer;

SELECT COUNT(*) FROM customer_demographics;

SELECT COUNT(*) FROM customer_address;

SELECT COUNT(*) FROM date_dim;

SELECT COUNT(*) FROM household_demographics;

SELECT COUNT(*) FROM inventory;

SELECT COUNT(*) FROM income_band;

SELECT COUNT(*) FROM item;

SELECT COUNT(*) FROM promotion;

SELECT COUNT(*) FROM reason;

SELECT COUNT(*) FROM ship_mode;

SELECT COUNT(*) FROM store;

SELECT COUNT(*) FROM store_returns;

SELECT COUNT(*) FROM store_sales;

SELECT COUNT(*) FROM time_dim;

SELECT COUNT(*) FROM warehouse;

SELECT COUNT(*) FROM web_page;

SELECT COUNT(*) FROM web_returns;

SELECT COUNT(*) FROM web_sales;

SELECT COUNT(*) FROM web_site;

SELECT COUNT(*) FROM web_site;

SELECT COUNT(*) FROM web_site;

CALL dsdgen(sf=1);

PRAGMA default_null_order = 'postgres';

SELECT COUNT(*) FROM call_center;

SELECT COUNT(*) FROM catalog_page;

SELECT COUNT(*) FROM catalog_returns;

SELECT COUNT(*) FROM catalog_sales;

SELECT COUNT(*) FROM customer;

SELECT COUNT(*) FROM customer_demographics;

SELECT COUNT(*) FROM customer_address;

SELECT COUNT(*) FROM date_dim;

SELECT COUNT(*) FROM household_demographics;

SELECT COUNT(*) FROM inventory;

SELECT COUNT(*) FROM income_band;

SELECT COUNT(*) FROM item;

SELECT COUNT(*) FROM promotion;

SELECT COUNT(*) FROM reason;

SELECT COUNT(*) FROM ship_mode;

SELECT COUNT(*) FROM store;

SELECT COUNT(*) FROM store_returns;

SELECT COUNT(*) FROM store_sales;

SELECT COUNT(*) FROM time_dim;

SELECT COUNT(*) FROM warehouse;

SELECT COUNT(*) FROM web_page;

SELECT COUNT(*) FROM web_returns;

SELECT COUNT(*) FROM web_sales;

SELECT COUNT(*) FROM web_site;

SELECT COUNT(*) FROM web_site;

SELECT COUNT(*) FROM web_site;

CALL dsdgen(sf=1, suffix='_original');

PRAGMA default_null_order = 'NULLS LAST';

PRAGMA default_null_order = 'NULLS LAST';

PRAGMA default_null_order = 'NULLS LAST';

PRAGMA default_null_order = 'NULLS LAST';

PRAGMA default_null_order = 'NULLS LAST';

PRAGMA enable_verification;

CALL dsdgen(sf=1);

SELECT * FROM customer ORDER BY c_customer_sk DESC, c_customer_id DESC LIMIT 5;

SELECT * FROM web_sales ORDER BY ws_sold_date_sk DESC, ws_sold_time_sk, ws_ship_date_sk DESC LIMIT 5;

SELECT * FROM store_sales ORDER BY ss_wholesale_cost DESC, ss_list_price DESC, ss_sales_price DESC, ss_customer_sk ASC LIMIT 5;

PRAGMA enable_verification;

SET memory_limit = '100MB';

SET temp_directory = '.unrecognized_folder/folder2';

CALL dbgen(sf=1);

CREATE TABLE tbl (i INT);
load __TEST_DIR__/test_dbgen_ro.db readonly;

CALL dbgen(sf=0);

ATTACH '__TEST_DIR__/test_dbgen_ro.db' AS dbgentest (READ_ONLY);

CALL dbgen(sf=0, catalog='dbgentest');

PRAGMA enable_verification;

CALL dbgen(sf=1);

COPY lineitem TO '__TEST_DIR__/lineitem.csv.gz' (HEADER)
load __TEST_DIR__/store_tpch_auto_detect.db;

SET memory_limit = '750MB';

CREATE OR REPLACE TABLE lineitem AS (SELECT * FROM READ_CSV_AUTO(['__TEST_DIR__/lineitem.csv.gz'], sample_size = -1));

PRAGMA TPCH(1);

CALL dbgen(sf=1, suffix='_positional');

CREATE VIEW lineitem AS (SELECT * FROM (SELECT l_returnflag FROM lineitem_positional) POSITIONAL JOIN (SELECT l_linestatus FROM lineitem_positional) POSITIONAL JOIN (SELECT l_quantity FROM lineitem_positional) POSITIONAL JOIN (SELECT l_extendedprice FROM lineitem_positional) POSITIONAL JOIN (SELECT l_discount FROM lineitem_positional) POSITIONAL JOIN (SELECT l_tax FROM lineitem_positional) POSITIONAL JOIN (SELECT l_shipdate FROM lineitem_positional));

PRAGMA TPCH(1);

CALL dbgen(sf=0.01);

SELECT STATS(1 - l_discount) FROM lineitem LIMIT 1;

SELECT STATS(1 + l_tax) FROM lineitem LIMIT 1;

SELECT STATS(l_extendedprice * (1 - l_discount)) FROM lineitem LIMIT 1;

SELECT STATS(l_extendedprice * (1 - l_discount) * (1 + l_tax)) FROM lineitem LIMIT 1;

PRAGMA threads = 4;

PRAGMA verify_parallelism;

CALL dbgen(sf=0.01);

SELECT l_returnflag, l_linestatus, SUM(l_quantity) AS sum_qty, SUM(l_extendedprice) AS sum_base_price, SUM(l_extendedprice * (1 - l_discount)) AS sum_disc_price, SUM(l_extendedprice * (1 - l_discount) * (1 + l_tax)) AS sum_charge, AVG(l_quantity) AS avg_qty, AVG(l_extendedprice) AS avg_price, AVG(l_discount) AS avg_disc, COUNT(*) AS count_order FROM (SELECT * FROM lineitem WHERE l_shipdate <= CAST('1990-09-02' AS DATE) UNION ALL SELECT * FROM lineitem WHERE l_shipdate > CAST('1990-09-02' AS DATE) AND l_shipdate <= CAST('1992-09-02' AS DATE) UNION ALL SELECT * FROM lineitem WHERE l_shipdate > CAST('1992-09-02' AS DATE) AND l_shipdate <= CAST('1994-09-02' AS DATE) UNION ALL SELECT * FROM lineitem WHERE l_shipdate > CAST('1994-09-02' AS DATE) AND l_shipdate <= CAST('1996-09-02' AS DATE) UNION ALL SELECT * FROM lineitem WHERE l_shipdate > CAST('1996-09-02' AS DATE) AND l_shipdate <= CAST('1998-09-02' AS DATE)) AS lineitem GROUP BY l_returnflag, l_linestatus ORDER BY l_returnflag, l_linestatus;

SELECT SUM(l_quantity) AS sum FROM lineitem WHERE l_shipdate <= CAST('1998-09-02' AS DATE) UNION ALL SELECT SUM(l_extendedprice) FROM lineitem WHERE l_shipdate <= CAST('1998-09-02' AS DATE) UNION ALL SELECT SUM(l_extendedprice * (1 - l_discount)) FROM lineitem WHERE l_shipdate <= CAST('1998-09-02' AS DATE) UNION ALL SELECT SUM(l_extendedprice * (1 - l_discount) * (1 + l_tax)) FROM lineitem WHERE l_shipdate <= CAST('1998-09-02' AS DATE) UNION ALL SELECT AVG(l_quantity) FROM lineitem WHERE l_shipdate <= CAST('1998-09-02' AS DATE) UNION ALL SELECT AVG(l_extendedprice) FROM lineitem WHERE l_shipdate <= CAST('1998-09-02' AS DATE) UNION ALL SELECT COUNT(*) FROM lineitem WHERE l_shipdate <= CAST('1998-09-02' AS DATE);

CALL dbgen(sf=0.01, children=-1);

CALL dbgen(sf=0.01, children=2);

CALL dbgen(sf=NULL);

CALL dbgen(sf=1, catalog=NULL);

CALL dbgen(sf=1, children =100, step = 0);

SELECT * FROM nation;

SELECT COUNT(*) FROM lineitem;

SELECT COUNT(*) FROM orders;

SELECT COUNT(*) FROM customer;

SELECT COUNT(*) FROM part;

SELECT COUNT(*) FROM partsupp;

SELECT COUNT(*) FROM region;

SELECT COUNT(*) FROM supplier;

CALL dbgen(sf=1, children =100, step = 1);

SELECT n_nationkey, n_name, n_regionkey FROM nation;

CALL dbgen(sf=1, children =100, step = ${i});
endloop;

SELECT n_nationkey, n_name, n_regionkey FROM nation;

CALL dbgen(sf=1, children =100, step = ${i});
endloop;

CALL dbgen(sf=1, children =100, step = ${i});
endloop;

CALL dbgen(sf=1, children =100, step = ${i});
endloop;

CALL dbgen(sf=1, children =100, step = ${i});
endloop;

ATTACH ':memory:' AS db1;

ATTACH ':memory:' AS db1;

ATTACH ':memory:' AS db1;

ATTACH ':memory:' AS db1;

CREATE SCHEMA db1.test_schema;

CREATE SCHEMA db1.test_schema;

CREATE SCHEMA db1.test_schema;

CREATE SCHEMA db1.test_schema;

CALL dbgen(sf=0.1, suffix='_normal');

CREATE TABLE lineitem_flt AS SELECT * REPLACE (CAST(l_orderkey AS DOUBLE) AS l_orderkey) FROM lineitem_normal;

CREATE TABLE orders_flt AS SELECT * REPLACE (CAST(o_orderkey AS DOUBLE) AS o_orderkey) FROM orders_normal;

CREATE TABLE lineitem_dbl AS SELECT * REPLACE (CAST(l_orderkey AS DOUBLE) AS l_orderkey) FROM lineitem_normal;

CREATE TABLE orders_dbl AS SELECT * REPLACE (CAST(o_orderkey AS DOUBLE) AS o_orderkey) FROM orders_normal;

SELECT COUNT(*) FROM lineitem_normal JOIN orders_normal ON (l_orderkey = o_orderkey);

SELECT COUNT(*) FROM lineitem_dbl JOIN orders_dbl ON (l_orderkey = o_orderkey);

SELECT COUNT(*) FROM lineitem_flt JOIN orders_flt ON (l_orderkey = o_orderkey);

PRAGMA threads = 4;

PRAGMA verify_parallelism;

CALL dbgen(sf=0.1);

SELECT l_returnflag, l_linestatus, SUM(l_quantity) AS sum_qty, SUM(l_extendedprice) AS sum_base_price, SUM(l_extendedprice * (1 - l_discount)) AS sum_disc_price, SUM(l_extendedprice * (1 - l_discount) * (1 + l_tax)) AS sum_charge, AVG(l_quantity) AS avg_qty, AVG(l_extendedprice) AS avg_price, AVG(l_discount) AS avg_disc, COUNT(*) AS count_order FROM lineitem GROUP BY GROUPING SETS ((l_returnflag, l_linestatus), (l_returnflag), (l_linestatus), ()) ORDER BY l_returnflag, l_linestatus;

CALL dbgen(sf=1);

COPY lineitem TO '__TEST_DIR__/lineitem_aggregate_partitioned' WITH (FORMAT parquet, PARTITION_BY (l_returnflag, l_linestatus));

DROP TABLE lineitem;

CREATE VIEW lineitem AS SELECT * FROM "__TEST_DIR__/lineitem_aggregate_partitioned/**/*.parquet";

PRAGMA TPCH(1);

SELECT COUNT(*), SUM(l_extendedprice), l_returnflag FROM lineitem GROUP BY ALL ORDER BY ALL;

SELECT COUNT(*), SUM(l_extendedprice), l_returnflag FROM lineitem WHERE l_linestatus = 'O' GROUP BY ALL ORDER BY ALL;

SELECT COUNT(*), SUM(l_extendedprice), l_linestatus FROM lineitem GROUP BY ALL ORDER BY ALL;

PRAGMA enable_verification;

CALL dbgen(sf=0.1);

SELECT COUNT(*) FROM lineitem WHERE l_comment LIKE '%horse%';

SELECT COUNT(*) FROM lineitem WHERE l_comment LIKE 'horse%';

SELECT COUNT(*) FROM lineitem WHERE l_comment LIKE '%horse';

SELECT COUNT(*) FROM lineitem WHERE l_comment LIKE '%h_rse%';

SELECT COUNT(*) FROM lineitem WHERE l_comment LIKE 'h_rse%';

SELECT COUNT(*) FROM lineitem WHERE l_comment LIKE '%h_rse';

SELECT COUNT(*) FROM lineitem WHERE NOT l_comment LIKE '%a%';

SELECT COUNT(*) FROM lineitem WHERE NOT l_comment LIKE 'h%';

SELECT COUNT(*) FROM lineitem WHERE NOT l_comment LIKE '%a';

SELECT COUNT(*) FROM lineitem WHERE NOT l_comment LIKE '%a_%';

SELECT COUNT(*) FROM lineitem WHERE NOT l_comment LIKE 'a_%';

SELECT COUNT(*) FROM lineitem WHERE NOT l_comment LIKE '%_a';

PRAGMA enable_verification;

CALL dbgen(sf=1);

CALL dbgen(sf=1);

PRAGMA threads = 4;

PRAGMA verify_parallelism;

PRAGMA verify_parallelism;

PRAGMA verify_parallelism;

PRAGMA verify_parallelism;

CALL dbgen(sf=1);

CALL dbgen(sf=1);

CALL dbgen(sf=1);

CALL dbgen(sf=1);

ATTACH '/Users/myth/Programs/duckdb-tpch-power-test/gen/sf100/tpch.duckdb' AS tpch;

USE tpch;

SELECT COUNT(*) FROM lineitem;

SET wal_autocheckpoint='100MB'
mode output_result
concurrentloop threadid 0 8;

SET wal_autocheckpoint='100MB'
mode output_result
concurrentloop threadid 0 8;

SET wal_autocheckpoint='100MB'
mode output_result
concurrentloop threadid 0 8;

SET wal_autocheckpoint='100MB'
mode output_result
concurrentloop threadid 0 8;

SET wal_autocheckpoint='100MB'
mode output_result
concurrentloop threadid 0 8;

SET wal_autocheckpoint='100MB'
mode output_result
concurrentloop threadid 0 8;

SET wal_autocheckpoint='100MB'
mode output_result
concurrentloop threadid 0 8;

SET wal_autocheckpoint='100MB'
mode output_result
concurrentloop threadid 0 8;

PRAGMA verify_external;

PRAGMA verify_serializer;

PRAGMA verify_serializer;

PRAGMA verify_serializer;

PRAGMA verify_serializer;

CALL dbgen(sf=0.01, suffix='_normal');

CREATE TABLE lineitem_struct AS SELECT {'l_orderkey': l_orderkey, 'l_partkey': l_partkey, 'l_suppkey': l_suppkey, 'l_linenumber': l_linenumber, 'l_quantity': l_quantity, 'l_extendedprice': l_extendedprice, 'l_discount': l_discount, 'l_tax': l_tax, 'l_returnflag': l_returnflag, 'l_linestatus': l_linestatus, 'l_shipdate': l_shipdate, 'l_commitdate': l_commitdate, 'l_receiptdate': l_receiptdate, 'l_shipinstruct': l_shipinstruct, 'l_shipmode': l_shipmode, 'l_comment': l_comment} AS c FROM lineitem_normal;

CREATE VIEW lineitem AS SELECT c['l_orderkey'] AS l_orderkey, c['l_partkey'] AS l_partkey, c['l_suppkey'] AS l_suppkey, c['l_linenumber'] AS l_linenumber, c['l_quantity'] AS l_quantity, c['l_extendedprice'] AS l_extendedprice, c['l_discount'] AS l_discount, c['l_tax'] AS l_tax, c['l_returnflag'] AS l_returnflag, c['l_linestatus'] AS l_linestatus, c['l_shipdate'] AS l_shipdate, c['l_commitdate'] AS l_commitdate, c['l_receiptdate'] AS l_receiptdate, c['l_shipinstruct'] AS l_shipinstruct, c['l_shipmode'] AS l_shipmode, c['l_comment'] AS l_comment FROM lineitem_struct;

CREATE TABLE orders_struct AS SELECT {'o_orderkey': o_orderkey, 'o_custkey': o_custkey, 'o_orderstatus': o_orderstatus, 'o_totalprice': o_totalprice, 'o_orderdate': o_orderdate, 'o_orderpriority': o_orderpriority, 'o_clerk': o_clerk, 'o_shippriority': o_shippriority, 'o_comment': o_comment} AS c FROM orders_normal;

CREATE VIEW orders AS SELECT c['o_orderkey'] AS o_orderkey, c['o_custkey'] AS o_custkey, c['o_orderstatus'] AS o_orderstatus, c['o_totalprice'] AS o_totalprice, c['o_orderdate'] AS o_orderdate, c['o_orderpriority'] AS o_orderpriority, c['o_clerk'] AS o_clerk, c['o_shippriority'] AS o_shippriority, c['o_comment'] AS o_comment FROM orders_struct;

CREATE TABLE part_struct AS SELECT {'p_partkey': p_partkey, 'p_name': p_name, 'p_mfgr': p_mfgr, 'p_brand': p_brand, 'p_type': p_type, 'p_size': p_size, 'p_container': p_container, 'p_retailprice': p_retailprice, 'p_comment': p_comment} AS c FROM part_normal;

CREATE VIEW part AS SELECT c['p_partkey'] AS p_partkey, c['p_name'] AS p_name, c['p_mfgr'] AS p_mfgr, c['p_brand'] AS p_brand, c['p_type'] AS p_type, c['p_size'] AS p_size, c['p_container'] AS p_container, c['p_retailprice'] AS p_retailprice, c['p_comment'] AS p_comment FROM part_struct;

CREATE TABLE partsupp_struct AS SELECT {'ps_partkey': ps_partkey, 'ps_suppkey': ps_suppkey, 'ps_availqty': ps_availqty, 'ps_supplycost': ps_supplycost, 'ps_comment': ps_comment} AS c FROM partsupp_normal;

CREATE VIEW partsupp AS SELECT c['ps_partkey'] AS ps_partkey, c['ps_suppkey'] AS ps_suppkey, c['ps_availqty'] AS ps_availqty, c['ps_supplycost'] AS ps_supplycost, c['ps_comment'] AS ps_comment FROM partsupp_struct;

CREATE TABLE customer_struct AS SELECT {'c_custkey': c_custkey, 'c_name': c_name, 'c_address': c_address, 'c_nationkey': c_nationkey, 'c_phone': c_phone, 'c_acctbal': c_acctbal, 'c_mktsegment': c_mktsegment, 'c_comment': c_comment} AS c FROM customer_normal;

CREATE VIEW customer AS SELECT c['c_custkey'] AS c_custkey, c['c_name'] AS c_name, c['c_address'] AS c_address, c['c_nationkey'] AS c_nationkey, c['c_phone'] AS c_phone, c['c_acctbal'] AS c_acctbal, c['c_mktsegment'] AS c_mktsegment, c['c_comment'] AS c_comment FROM customer_struct;

CREATE TABLE region_struct AS SELECT {'r_regionkey': r_regionkey, 'r_name': r_name, 'r_comment': r_comment} AS c FROM region_normal;

CREATE VIEW region AS SELECT c['r_regionkey'] AS r_regionkey, c['r_name'] AS r_name, c['r_comment'] AS r_comment FROM region_struct;

CREATE TABLE supplier_struct AS SELECT {'s_suppkey': s_suppkey, 's_name': s_name, 's_address': s_address, 's_nationkey': s_nationkey, 's_phone': s_phone, 's_acctbal': s_acctbal, 's_comment': s_comment} AS c FROM supplier_normal;

CREATE VIEW supplier AS SELECT c['s_suppkey'] AS s_suppkey, c['s_name'] AS s_name, c['s_address'] AS s_address, c['s_nationkey'] AS s_nationkey, c['s_phone'] AS s_phone, c['s_acctbal'] AS s_acctbal, c['s_comment'] AS s_comment FROM supplier_struct;

CREATE TABLE nation_struct AS SELECT {'n_nationkey': n_nationkey, 'n_name': n_name, 'n_regionkey': n_regionkey, 'n_comment': n_comment} AS c FROM nation_normal;

CREATE VIEW nation AS SELECT
c['n_nationkey'] AS n_nationkey,
c['n_name'] AS n_name,
c['n_regionkey'] AS n_regionkey,
c['n_comment'] AS n_comment
FROM nation_struct
loop i 1 9;

CREATE VIEW nation AS SELECT
c['n_nationkey'] AS n_nationkey,
c['n_name'] AS n_name,
c['n_regionkey'] AS n_regionkey,
c['n_comment'] AS n_comment
FROM nation_struct
loop i 1 9;

CREATE VIEW nation AS SELECT
c['n_nationkey'] AS n_nationkey,
c['n_name'] AS n_name,
c['n_regionkey'] AS n_regionkey,
c['n_comment'] AS n_comment
FROM nation_struct
loop i 1 9;

PRAGMA verify_external;

PRAGMA verify_external;

PRAGMA verify_external;

PRAGMA verify_external;

CALL dbgen(sf=1, suffix='_original');

CALL dbgen(sf=1, suffix='_original');

CALL dbgen(sf=1, suffix='_original');

CALL dbgen(sf=1, suffix='_original');

CALL dbgen(sf=1, suffix='_original');

CALL dbgen(sf=1, suffix='_normal');

CREATE TABLE lineitem_struct AS SELECT {'l_orderkey': l_orderkey, 'l_partkey': l_partkey, 'l_suppkey': l_suppkey, 'l_linenumber': l_linenumber, 'l_quantity': l_quantity, 'l_extendedprice': l_extendedprice, 'l_discount': l_discount, 'l_tax': l_tax, 'l_returnflag': l_returnflag, 'l_linestatus': l_linestatus, 'l_shipdate': l_shipdate, 'l_commitdate': l_commitdate, 'l_receiptdate': l_receiptdate, 'l_shipinstruct': l_shipinstruct, 'l_shipmode': l_shipmode, 'l_comment': l_comment} AS c FROM lineitem_normal;

CREATE VIEW lineitem AS SELECT c['l_orderkey'] AS l_orderkey, c['l_partkey'] AS l_partkey, c['l_suppkey'] AS l_suppkey, c['l_linenumber'] AS l_linenumber, c['l_quantity'] AS l_quantity, c['l_extendedprice'] AS l_extendedprice, c['l_discount'] AS l_discount, c['l_tax'] AS l_tax, c['l_returnflag'] AS l_returnflag, c['l_linestatus'] AS l_linestatus, c['l_shipdate'] AS l_shipdate, c['l_commitdate'] AS l_commitdate, c['l_receiptdate'] AS l_receiptdate, c['l_shipinstruct'] AS l_shipinstruct, c['l_shipmode'] AS l_shipmode, c['l_comment'] AS l_comment FROM lineitem_struct;

CREATE TABLE orders_struct AS SELECT {'o_orderkey': o_orderkey, 'o_custkey': o_custkey, 'o_orderstatus': o_orderstatus, 'o_totalprice': o_totalprice, 'o_orderdate': o_orderdate, 'o_orderpriority': o_orderpriority, 'o_clerk': o_clerk, 'o_shippriority': o_shippriority, 'o_comment': o_comment} AS c FROM orders_normal;

CREATE VIEW orders AS SELECT c['o_orderkey'] AS o_orderkey, c['o_custkey'] AS o_custkey, c['o_orderstatus'] AS o_orderstatus, c['o_totalprice'] AS o_totalprice, c['o_orderdate'] AS o_orderdate, c['o_orderpriority'] AS o_orderpriority, c['o_clerk'] AS o_clerk, c['o_shippriority'] AS o_shippriority, c['o_comment'] AS o_comment FROM orders_struct;

CREATE TABLE part_struct AS SELECT {'p_partkey': p_partkey, 'p_name': p_name, 'p_mfgr': p_mfgr, 'p_brand': p_brand, 'p_type': p_type, 'p_size': p_size, 'p_container': p_container, 'p_retailprice': p_retailprice, 'p_comment': p_comment} AS c FROM part_normal;

CREATE VIEW part AS SELECT c['p_partkey'] AS p_partkey, c['p_name'] AS p_name, c['p_mfgr'] AS p_mfgr, c['p_brand'] AS p_brand, c['p_type'] AS p_type, c['p_size'] AS p_size, c['p_container'] AS p_container, c['p_retailprice'] AS p_retailprice, c['p_comment'] AS p_comment FROM part_struct;

CREATE TABLE partsupp_struct AS SELECT {'ps_partkey': ps_partkey, 'ps_suppkey': ps_suppkey, 'ps_availqty': ps_availqty, 'ps_supplycost': ps_supplycost, 'ps_comment': ps_comment} AS c FROM partsupp_normal;

CREATE VIEW partsupp AS SELECT c['ps_partkey'] AS ps_partkey, c['ps_suppkey'] AS ps_suppkey, c['ps_availqty'] AS ps_availqty, c['ps_supplycost'] AS ps_supplycost, c['ps_comment'] AS ps_comment FROM partsupp_struct;

CREATE TABLE customer_struct AS SELECT {'c_custkey': c_custkey, 'c_name': c_name, 'c_address': c_address, 'c_nationkey': c_nationkey, 'c_phone': c_phone, 'c_acctbal': c_acctbal, 'c_mktsegment': c_mktsegment, 'c_comment': c_comment} AS c FROM customer_normal;

CREATE VIEW customer AS SELECT c['c_custkey'] AS c_custkey, c['c_name'] AS c_name, c['c_address'] AS c_address, c['c_nationkey'] AS c_nationkey, c['c_phone'] AS c_phone, c['c_acctbal'] AS c_acctbal, c['c_mktsegment'] AS c_mktsegment, c['c_comment'] AS c_comment FROM customer_struct;

CREATE TABLE region_struct AS SELECT {'r_regionkey': r_regionkey, 'r_name': r_name, 'r_comment': r_comment} AS c FROM region_normal;

CREATE VIEW region AS SELECT c['r_regionkey'] AS r_regionkey, c['r_name'] AS r_name, c['r_comment'] AS r_comment FROM region_struct;

CREATE TABLE supplier_struct AS SELECT {'s_suppkey': s_suppkey, 's_name': s_name, 's_address': s_address, 's_nationkey': s_nationkey, 's_phone': s_phone, 's_acctbal': s_acctbal, 's_comment': s_comment} AS c FROM supplier_normal;

CREATE VIEW supplier AS SELECT c['s_suppkey'] AS s_suppkey, c['s_name'] AS s_name, c['s_address'] AS s_address, c['s_nationkey'] AS s_nationkey, c['s_phone'] AS s_phone, c['s_acctbal'] AS s_acctbal, c['s_comment'] AS s_comment FROM supplier_struct;

CREATE TABLE nation_struct AS SELECT {'n_nationkey': n_nationkey, 'n_name': n_name, 'n_regionkey': n_regionkey, 'n_comment': n_comment} AS c FROM nation_normal;

CREATE VIEW nation AS SELECT
c['n_nationkey'] AS n_nationkey,
c['n_name'] AS n_name,
c['n_regionkey'] AS n_regionkey,
c['n_comment'] AS n_comment
FROM nation_struct
loop i 1 9;

CREATE VIEW nation AS SELECT
c['n_nationkey'] AS n_nationkey,
c['n_name'] AS n_name,
c['n_regionkey'] AS n_regionkey,
c['n_comment'] AS n_comment
FROM nation_struct
loop i 1 9;

CREATE VIEW nation AS SELECT
c['n_nationkey'] AS n_nationkey,
c['n_name'] AS n_name,
c['n_regionkey'] AS n_regionkey,
c['n_comment'] AS n_comment
FROM nation_struct
loop i 1 9;

PRAGMA enable_verification;

CALL dbgen(sf=1);

SELECT o_orderkey, o_custkey, o_orderstatus, o_totalprice, o_orderdate, o_orderpriority, o_clerk, o_shippriority FROM orders ORDER BY o_orderkey LIMIT 5;

SELECT o_orderkey, o_custkey, o_orderstatus, o_totalprice, o_orderdate, o_orderpriority, o_clerk, o_shippriority FROM orders ORDER BY o_orderkey DESC LIMIT 5;

SELECT l_orderkey, l_partkey, l_suppkey, l_linenumber, l_quantity, l_extendedprice, l_discount, l_tax, l_returnflag, l_linestatus, l_shipdate, l_commitdate, l_receiptdate, l_shipinstruct, l_shipmode FROM lineitem ORDER BY l_shipdate, l_orderkey LIMIT 5;

SELECT l_orderkey, l_partkey, l_suppkey, l_linenumber, l_quantity, l_extendedprice, l_discount, l_tax, l_returnflag, l_linestatus, l_shipdate, l_commitdate, l_receiptdate, l_shipinstruct, l_shipmode FROM lineitem ORDER BY l_orderkey DESC, l_shipdate DESC LIMIT 5;

CREATE TABLE keys (i INT PRIMARY KEY);

BEGIN;

INSERT INTO keys VALUES (1);

INSERT INTO keys VALUES (1);

COMMIT;

SELECT COUNT(*) FROM keys;

BEGIN;

INSERT INTO keys VALUES (1);

INSERT INTO keys VALUES (1);

SELECT 42;

CREATE OR REPLACE TABLE original_table AS SELECT 1 AS col FROM RANGE(0, 10);

SET immediate_transaction_mode = TRUE;

BEGIN;

BEGIN;

CREATE TABLE new_incremental AS SELECT 42 AS col FROM RANGE(0, 10000);

DROP TABLE original_table;

COMMIT;

DELETE FROM original_table WHERE rowid % 2 = 0;

COMMIT;

CREATE OR REPLACE TABLE original_table AS SELECT 1 AS col FROM RANGE(0, 10);

BEGIN;

BEGIN;

DELETE FROM original_table WHERE rowid % 2 = 0;

CREATE TABLE new_incremental AS SELECT 42 AS col FROM RANGE(0, 10000);

DROP TABLE original_table;

COMMIT;

COMMIT;

CREATE OR REPLACE TABLE original_table AS SELECT 1 AS col FROM RANGE(0, 10);

SET immediate_transaction_mode = TRUE;

BEGIN;

BEGIN;

CREATE TABLE new_incremental AS SELECT 42 AS col FROM RANGE(0, 10000);

INSERT INTO original_table SELECT * FROM new_incremental;

DROP TABLE new_incremental;

CREATE TABLE new_incremental AS SELECT 42 AS col FROM RANGE(0, 10000);

ALTER TABLE original_table RENAME TO backup_table;

CREATE TABLE temp_table AS SELECT 2 AS col FROM RANGE(0, 100);

ALTER TABLE temp_table RENAME TO original_table;

DROP TABLE backup_table;

COMMIT;

COMMIT;

PRAGMA enable_verification;

CREATE TABLE tbl (id INT);

INSERT INTO tbl SELECT * FROM RANGE(0, 10000);

SELECT COUNT(*) FROM tbl;

BEGIN;

DELETE FROM tbl WHERE id % 2 = 0;

SELECT COUNT(*) FROM tbl;

SELECT COUNT(*), COUNT(*) + 1 FROM tbl;

COMMIT;

SELECT COUNT(*) FROM tbl;

BEGIN;

INSERT INTO tbl SELECT * FROM RANGE(10000, 15000);

SELECT COUNT(*) FROM tbl;

SELECT COUNT(*) FROM tbl;

COMMIT;

SELECT COUNT(*) FROM tbl;

CREATE TABLE tbl (id INT PRIMARY KEY, payload TEXT);

INSERT INTO tbl VALUES (1, 'first payload');

BEGIN;

INSERT INTO tbl VALUES (5, 'con2 payload');

BEGIN;

DELETE FROM tbl;

COMMIT;

SELECT id, payload FROM tbl WHERE id = 1 ORDER BY ALL;

SELECT id, payload FROM tbl WHERE id = 5 ORDER BY ALL;

SELECT id, payload, rowid FROM tbl WHERE id = 1 ORDER BY ALL;

COMMIT;

SELECT id, payload FROM tbl WHERE id = 1 ORDER BY ALL;

SELECT id, payload FROM tbl WHERE id = 5 ORDER BY ALL;

CREATE OR REPLACE TABLE original_table AS SELECT 1 AS col FROM RANGE(0, 10);

SET immediate_transaction_mode = TRUE;

BEGIN;

DROP TABLE original_table;

ROLLBACK;

DELETE FROM original_table WHERE rowid % 2 = 0;

SELECT COUNT(*) FROM original_table;

CREATE TABLE tbl1 (id INT);

CREATE SEQUENCE seq;

CREATE TABLE tbl2 (id INT DEFAULT NEXTVAL('seq'));

ALTER SEQUENCE seq OWNED BY tbl1;

START AS TRANSACTION;

DROP TABLE tbl1 CASCADE;

START AS TRANSACTION;

ALTER SEQUENCE seq OWNED BY tbl2;

COMMIT;

CREATE TABLE tbl1 (id INT);

CREATE SEQUENCE seq;

START AS TRANSACTION;

DROP TABLE tbl1 CASCADE;

START AS TRANSACTION;

ALTER SEQUENCE seq OWNED BY tbl1;

COMMIT;

COMMIT;

DROP TABLE tbl1;

DROP SEQUENCE seq;

CREATE TABLE tbl1 (id INT);

CREATE SEQUENCE seq;

START AS TRANSACTION;

DROP TABLE tbl1 CASCADE;

START AS TRANSACTION;

ALTER SEQUENCE seq OWNED BY tbl1;

COMMIT;

COMMIT;

DROP TABLE tbl1;

BEGIN;

BEGIN;

CREATE TABLE integers (i INT);

SELECT * FROM integers;

SELECT * FROM integers;

ROLLBACK;

SELECT * FROM integers;

SELECT * FROM integers;

BEGIN;

CREATE TABLE integers (i INT);

COMMIT;

SELECT * FROM integers;

ROLLBACK;

SELECT * FROM integers;

BEGIN;

BEGIN;

CREATE TABLE integers2 (i INT);

CREATE TABLE integers2 (i INT);

CREATE SCHEMA foo;

START AS TRANSACTION;

DROP SCHEMA IF EXISTS foo CASCADE;

CREATE TABLE foo.bar AS SELECT 42;

COMMIT;

CREATE SCHEMA foo;

START AS TRANSACTION;

DROP SCHEMA IF EXISTS foo CASCADE;

START AS TRANSACTION;

CREATE TABLE foo.bar AS SELECT 42;

COMMIT;

COMMIT;

DROP SCHEMA foo CASCADE;

SELECT * FROM foo.bar;

SELECT schema_name FROM DUCKDB_SCHEMAS() WHERE schema_name = 'foo';

CREATE SCHEMA foo;

START AS TRANSACTION;

DROP SCHEMA IF EXISTS foo CASCADE;

START AS TRANSACTION;

CREATE TABLE foo.bar AS SELECT 42;

COMMIT;

COMMIT;

DROP SCHEMA foo CASCADE;

SELECT * FROM foo.bar;

SELECT schema_name FROM DUCKDB_SCHEMAS() WHERE schema_name = 'foo';

CREATE TABLE test AS SELECT i AS a FROM RANGE(2048, 5000, 1) AS t1(i);

INSERT INTO test VALUES (1), (2), (3);

CREATE TABLE src (b INT);

INSERT INTO src VALUES (3), (2), (1), (4);

SELECT src.rowid AS sr, b, test.rowid AS tr, a FROM src, test WHERE src.b = test.a ORDER BY a;

BEGIN;

UPDATE src SET b = 10000 WHERE src.rowid = 0 OR src.rowid = 1 OR src.rowid = 3;

SELECT b FROM src;

BEGIN;

UPDATE src SET b = 20000 FROM test WHERE src.b = test.a;

CREATE TABLE integers (i INT PRIMARY KEY, j INT);

INSERT INTO integers VALUES (1, 1), (2, 2), (3, 3);

BEGIN;

BEGIN;

INSERT INTO integers VALUES (4, 4);

INSERT INTO integers VALUES (4, 4);

UPDATE integers SET j = j + 1;

DELETE FROM integers WHERE i = 2;

CREATE TABLE test (i INT);

COMMIT;

COMMIT;

SELECT * FROM integers ORDER BY i;

SELECT * FROM test;

PRAGMA enable_verification;

CREATE TABLE integers (i INT PRIMARY KEY);

INSERT INTO integers VALUES (1);

BEGIN;

INSERT INTO integers SELECT i FROM RANGE(2, 131068, 1) AS t1(i);

INSERT INTO integers VALUES (1);

ROLLBACK;

SELECT * FROM integers;

INSERT INTO integers VALUES (2);

INSERT INTO integers VALUES (3);

INSERT INTO integers VALUES (4);

SELECT * FROM integers ORDER BY 1;

CREATE TABLE integers (i INT PRIMARY KEY);

INSERT INTO integers VALUES (1), (2), (3);

BEGIN;

INSERT INTO integers VALUES (3);

ROLLBACK;

BEGIN;

INSERT INTO integers VALUES (4);

SELECT COUNT(*) FROM integers;

UPDATE integers SET i = 3 WHERE i = 4;

ROLLBACK;

BEGIN;

INSERT INTO integers VALUES (4);

SELECT COUNT(*) FROM integers;

UPDATE integers SET i = 5 WHERE i = 4;

SELECT i FROM integers WHERE i = 5;

SELECT i FROM integers WHERE i = 4;

COMMIT;

SELECT i FROM integers ORDER BY i;

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (1), (2), (3);

BEGIN;

DELETE FROM integers WHERE i = 1;

CREATE INDEX i_index ON integers USING art(i);

COMMIT;

SELECT COUNT(*) FROM integers WHERE i = 1;

SELECT COUNT(*) FROM integers WHERE i = 1;

CREATE TABLE integers (i INT);

BEGIN;

INSERT INTO integers VALUES (1), (2), (3);

CREATE INDEX i_index ON integers USING art(i);

SELECT COUNT(*) FROM integers WHERE i = 1;

SELECT COUNT(*) FROM integers WHERE i = 1;

COMMIT;

SELECT COUNT(*) FROM integers WHERE i = 1;

SELECT COUNT(*) FROM integers WHERE i = 1;

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (1), (2), (3);

BEGIN;

UPDATE integers SET i = 4 WHERE i = 1;

CREATE INDEX i_index ON integers USING art(i);

COMMIT;

CREATE INDEX i_index ON integers USING art(i);

SELECT COUNT(*) FROM integers WHERE i = 4;

SELECT COUNT(*) FROM integers WHERE i = 4;

PRAGMA enable_verification;

CREATE TABLE integers (i INT UNIQUE);

BEGIN;

BEGIN;

INSERT INTO integers VALUES (-10);

INSERT INTO integers SELECT range FROM RANGE(2, 4097, 1);

INSERT INTO integers VALUES (-10);

COMMIT;

COMMIT;

INSERT INTO integers SELECT i FROM RANGE(2, 4097, 1) AS t1(i);

SELECT MAX(i) FROM integers;

CREATE TABLE integers (i INT PRIMARY KEY);

INSERT INTO integers VALUES (1), (2), (3);

INSERT INTO integers VALUES (1);

INSERT INTO integers VALUES (4);

UPDATE integers SET i = 1 WHERE i = 4;

UPDATE integers SET i = 5 WHERE i = 4;

DELETE FROM integers WHERE i = 1;

INSERT INTO integers VALUES (1);

DELETE FROM integers WHERE i >= 4;

SELECT COUNT(*) FROM integers;

SELECT COUNT(*) FROM integers;

BEGIN;

BEGIN;

INSERT INTO integers VALUES (4);

INSERT INTO integers VALUES (4);

SELECT COUNT(*) FROM integers;

SELECT COUNT(*) FROM integers;

SELECT COUNT(*) FROM integers WHERE i = 1;

SELECT COUNT(*) FROM integers WHERE i = 1;

SELECT COUNT(*) FROM integers WHERE i = 4;

SELECT COUNT(*) FROM integers WHERE i = 4;

COMMIT;

COMMIT;

BEGIN;

CREATE TABLE issue2241 (id TEXT PRIMARY KEY);

INSERT INTO issue2241 VALUES ('Alice');

INSERT INTO issue2241 VALUES ('Bob');

DELETE FROM issue2241 WHERE id = 'Bob';

INSERT INTO issue2241 VALUES ('Bob');

CREATE TABLE integers (i INT PRIMARY KEY);

INSERT INTO integers VALUES (1), (2), (3);

BEGIN;

SELECT i FROM integers WHERE i = 1;

SELECT i FROM integers WHERE i = 1;

DELETE FROM integers WHERE i = 1;

SELECT i FROM integers WHERE i = 1;

SELECT i FROM integers WHERE i = 1;

DELETE FROM integers WHERE i = 1;

ROLLBACK;

SELECT i FROM integers WHERE i = 1;

SELECT i FROM integers WHERE i = 1;

BEGIN;

UPDATE integers SET i = 4 WHERE i = 1;

SELECT i FROM integers WHERE i = 1;

SELECT i FROM integers WHERE i = 1;

SELECT i FROM integers WHERE i = 4;

SELECT i FROM integers WHERE i = 4;

DELETE FROM integers WHERE i = 4;

SELECT i FROM integers WHERE i = 1;

SELECT i FROM integers WHERE i = 1;

SELECT i FROM integers WHERE i = 4;

SELECT i FROM integers WHERE i = 4;

COMMIT;

SELECT i FROM integers WHERE i = 1;

SELECT i FROM integers WHERE i = 1;

SELECT i FROM integers ORDER BY i;

SELECT i FROM integers ORDER BY i;

CREATE TABLE integers (i INT PRIMARY KEY, j INT);

INSERT INTO integers VALUES (1, 1), (2, 2), (3, 3);

BEGIN;

UPDATE integers SET j = 4 WHERE i = 1;

SELECT j FROM integers WHERE i = 1;

SELECT j FROM integers WHERE i = 1;

ROLLBACK;

SELECT j FROM integers WHERE i = 1;

SELECT j FROM integers WHERE i = 1;

PRAGMA enable_verification;

CREATE TABLE integers (i INT);

BEGIN;

INSERT INTO integers VALUES (1);

BEGIN;

INSERT INTO integers VALUES (2);

SELECT SUM(i) FROM integers;

SELECT SUM(i) FROM integers;

SELECT SUM(i) FROM integers;

COMMIT;

SELECT SUM(i) FROM integers;

SELECT SUM(i) FROM integers;

SELECT SUM(i) FROM integers;

COMMIT;

SELECT SUM(i) FROM integers;

SELECT SUM(i) FROM integers;

SELECT SUM(i) FROM integers;

BEGIN;

BEGIN;

DELETE FROM integers WHERE i = 1;

DELETE FROM integers WHERE i = 2;

SELECT SUM(i) FROM integers;

SELECT SUM(i) FROM integers;

SELECT SUM(i) FROM integers;

COMMIT;

SELECT SUM(i) FROM integers;

SELECT SUM(i) FROM integers;

SELECT SUM(i) FROM integers;

COMMIT;

SELECT SUM(i) FROM integers;

SELECT SUM(i) FROM integers;

SELECT SUM(i) FROM integers;

PRAGMA enable_verification;

CREATE TABLE integers (i INT, j INT);

BEGIN;

BEGIN;

INSERT INTO integers VALUES (1, 3);

SELECT COUNT(*) FROM integers;

SELECT COUNT(*) FROM integers WHERE i = 1;

COMMIT;

SELECT COUNT(*) FROM integers;

SELECT COUNT(*) FROM integers WHERE i = 1;

COMMIT;

SELECT COUNT(*) FROM integers;

SELECT COUNT(*) FROM integers WHERE i = 1;

BEGIN;

BEGIN;

INSERT INTO integers VALUES (1, 3);

INSERT INTO integers VALUES (1, 3);

SELECT COUNT(*) FROM integers;

SELECT COUNT(*) FROM integers;

COMMIT;

COMMIT;

SELECT COUNT(*) FROM integers;

SELECT COUNT(*) FROM integers;

SELECT * FROM integers;

PRAGMA enable_verification;

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (1), (2), (3);

SELECT SUM(i) FROM integers;

SELECT SUM(i) FROM integers;

BEGIN;

UPDATE integers SET i = 5 WHERE i = 1;

SELECT SUM(i) FROM integers;

SELECT SUM(i) FROM integers;

UPDATE integers SET i = 10 WHERE i = 5;

SELECT SUM(i) FROM integers;

SELECT SUM(i) FROM integers;

DELETE FROM integers WHERE i > 5;

SELECT SUM(i) FROM integers;

SELECT SUM(i) FROM integers;

INSERT INTO integers VALUES (1), (2);

SELECT SUM(i) FROM integers;

SELECT SUM(i) FROM integers;

COMMIT;

SELECT SUM(i) FROM integers;

PRAGMA enable_verification;

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (1), (2), (3), (4);

INSERT INTO integers SELECT * FROM integers;

INSERT INTO integers SELECT * FROM integers;

INSERT INTO integers SELECT * FROM integers;

INSERT INTO integers SELECT * FROM integers;

SELECT COUNT(*) FROM integers WHERE i = 1;

INSERT INTO integers SELECT * FROM integers;

SELECT COUNT(*), COUNT(DISTINCT ROWID) FROM integers WHERE i = 1;

INSERT INTO integers SELECT * FROM integers;

SELECT COUNT(*), COUNT(DISTINCT ROWID) FROM integers WHERE i = 1;

INSERT INTO integers SELECT * FROM integers;

SELECT COUNT(*), COUNT(DISTINCT ROWID) FROM integers WHERE i = 1;

INSERT INTO integers SELECT * FROM integers;

SELECT COUNT(*), COUNT(DISTINCT ROWID) FROM integers WHERE i = 1;

INSERT INTO integers SELECT * FROM integers;

SELECT COUNT(*), COUNT(DISTINCT ROWID) FROM integers WHERE i = 1;

INSERT INTO integers SELECT * FROM integers;

SELECT COUNT(*), COUNT(DISTINCT ROWID) FROM integers WHERE i = 1;

INSERT INTO integers SELECT * FROM integers;

SELECT COUNT(*), COUNT(DISTINCT ROWID) FROM integers WHERE i = 1;

INSERT INTO integers SELECT * FROM integers;

SELECT COUNT(*), COUNT(DISTINCT ROWID) FROM integers WHERE i = 1;

INSERT INTO integers SELECT * FROM integers;

SELECT COUNT(*), COUNT(DISTINCT ROWID) FROM integers WHERE i = 1;

INSERT INTO integers SELECT * FROM integers;

SELECT COUNT(*), COUNT(DISTINCT ROWID) FROM integers WHERE i = 1;

INSERT INTO integers SELECT * FROM integers;

SELECT COUNT(*) FROM integers;

SELECT SUM(i) FROM integers;

SELECT COUNT(*), COUNT(DISTINCT ROWID) FROM integers WHERE i = 1;

SELECT COUNT(*) FROM integers WHERE i = 2;

SELECT COUNT(*) FROM integers WHERE i = 3;

SELECT COUNT(*) FROM integers WHERE i = 4;

BEGIN;

DELETE FROM integers WHERE i = 1;

SELECT COUNT(*) FROM integers;

SELECT SUM(i) FROM integers;

SELECT COUNT(*) FROM integers;

SELECT SUM(i) FROM integers;

ROLLBACK;

SELECT COUNT(*) FROM integers;

SELECT SUM(i) FROM integers;

BEGIN;

DELETE FROM integers WHERE i = 2;

SELECT COUNT(*) FROM integers;

SELECT SUM(i) FROM integers;

SELECT COUNT(*) FROM integers;

SELECT SUM(i) FROM integers;

ROLLBACK;

SELECT COUNT(*) FROM integers;

SELECT SUM(i) FROM integers;

BEGIN;

DELETE FROM integers WHERE i = 3;

SELECT COUNT(*) FROM integers;

SELECT SUM(i) FROM integers;

SELECT COUNT(*) FROM integers;

SELECT SUM(i) FROM integers;

ROLLBACK;

SELECT COUNT(*) FROM integers;

SELECT SUM(i) FROM integers;

BEGIN;

DELETE FROM integers WHERE i = 4;

SELECT COUNT(*) FROM integers;

SELECT SUM(i) FROM integers;

SELECT COUNT(*) FROM integers;

SELECT SUM(i) FROM integers;

ROLLBACK;

SELECT COUNT(*) FROM integers;

SELECT SUM(i) FROM integers;

SET immediate_transaction_mode = TRUE;

PRAGMA enable_verification;

CREATE TABLE integers (i INT, j INT);

INSERT INTO integers VALUES (NULL, 3);

SELECT * FROM integers;

BEGIN;

UPDATE integers SET i = 1, j = 1;

SELECT * FROM integers;

SELECT * FROM integers;

ROLLBACK;

SELECT * FROM integers;

PRAGMA enable_verification;

CREATE TABLE a (i INT);

INSERT INTO a VALUES (42);

INSERT INTO a VALUES (42);

SELECT * FROM a;

INSERT INTO a VALUES (48);

CREATE TABLE a (i INT);

INSERT INTO a VALUES (44);

SELECT i FROM a;

BEGIN;

DROP TABLE a;

CREATE TABLE a (i INT);

INSERT INTO a VALUES (45);

SELECT i FROM a;

ROLLBACK;

SELECT i FROM a;

BEGIN;

DROP TABLE a;

CREATE TABLE a (i INT);

INSERT INTO a VALUES (46);

SELECT i FROM a;

COMMIT;

SELECT i FROM a;

BEGIN;

BEGIN;

CREATE SEQUENCE seq;

SELECT NEXTVAL('seq');

SELECT NEXTVAL('seq');

COMMIT;

SELECT NEXTVAL('seq');

COMMIT;

SELECT NEXTVAL('seq');

BEGIN;

DROP SEQUENCE seq;

SELECT NEXTVAL('seq');

SELECT NEXTVAL('seq');

ROLLBACK;

SELECT NEXTVAL('seq');

DROP SEQUENCE seq;

SELECT NEXTVAL('seq');

SELECT NEXTVAL('seq');

PRAGMA enable_verification;

CREATE TABLE integers (i INT PRIMARY KEY);

INSERT INTO integers VALUES (1), (2);

BEGIN;

BEGIN;

SELECT 42;

SELECT * FROM nonexistanttable;

SELECT 42;

UPDATE integers SET i = 2;

SELECT 42;

ROLLBACK;

SELECT * FROM integers ORDER BY 1;

PRAGMA enable_verification;

COMMIT;

ROLLBACK;

START AS TRANSACTION;

START AS TRANSACTION;

PRAGMA enable_verification;

BEGIN;

CREATE TABLE integers (i INT, j INT);

INSERT INTO integers VALUES (1, 1), (2, 2), (3, 3);

ALTER TABLE integers ADD COLUMN k INT DEFAULT 4;

SELECT * FROM integers ORDER BY 1;

COMMIT;

SELECT * FROM integers ORDER BY 1;

PRAGMA enable_verification;

BEGIN;

CREATE TABLE integers (i INT, j INT);

INSERT INTO integers VALUES (1, 1), (2, 2), (3, 3);

ALTER TABLE integers ALTER COLUMN j SET DATA TYPE BIGINT;

SELECT * FROM integers ORDER BY 1;

COMMIT;

SELECT * FROM integers ORDER BY 1;

PRAGMA enable_verification;

BEGIN;

CREATE TABLE integers (i INT, j INT);

INSERT INTO integers VALUES (1, 3), (2, 3);

SELECT * FROM integers ORDER BY 1;

UPDATE integers SET j = 5 WHERE i = 2;

UPDATE integers SET j = 5 WHERE i = 2;

UPDATE integers SET j = 5 WHERE i = 2;

SELECT * FROM integers ORDER BY 1;

DELETE FROM integers WHERE i = 2;

SELECT * FROM integers ORDER BY 1;

COMMIT;

SELECT * FROM integers ORDER BY 1;

PRAGMA enable_verification;

BEGIN;

CREATE TABLE integers (i INT, j INT);

INSERT INTO integers VALUES (1, 1), (2, 2), (3, 3);

ALTER TABLE integers DROP COLUMN j;

SELECT * FROM integers ORDER BY 1;

COMMIT;

SELECT * FROM integers ORDER BY 1;

PRAGMA enable_verification;

CREATE TABLE integers (i INT PRIMARY KEY, j INT);

INSERT INTO integers VALUES (1, 3);

BEGIN;

INSERT INTO integers VALUES (1, 2);

ROLLBACK;

DELETE FROM integers;

PRAGMA enable_verification;

BEGIN;

CREATE TABLE integers (i INT PRIMARY KEY, j INT);

INSERT INTO integers VALUES (1, 3), (2, 3);

SELECT * FROM integers ORDER BY 1;

INSERT INTO integers VALUES (1, 2);

ROLLBACK;

BEGIN;

CREATE TABLE integers (i INT PRIMARY KEY, j INT);

INSERT INTO integers VALUES (1, 3), (2, 3);

SELECT * FROM integers ORDER BY 1;

UPDATE integers SET i = 1 WHERE i = 2;

ROLLBACK;

BEGIN;

CREATE TABLE integers (i INT PRIMARY KEY, j INT);

INSERT INTO integers VALUES (1, 3), (2, 3);

SELECT * FROM integers ORDER BY 1;

UPDATE integers SET i = 3 WHERE i = 2;

COMMIT;

SELECT * FROM integers ORDER BY 1;

DELETE FROM integers WHERE i = 1;

SELECT * FROM integers ORDER BY 1;

INSERT INTO integers VALUES (1, 3);

SELECT * FROM integers ORDER BY 1;

ROLLBACK;

COMMIT;

BEGIN;

BEGIN;

PRAGMA enable_verification;

CREATE TABLE integers (i INT);

INSERT INTO integers SELECT * FROM RANGE(0, 1000);

SET immediate_transaction_mode = TRUE;

BEGIN;

BEGIN;

INSERT INTO integers SELECT * FROM RANGE(1000, 3000);

COMMIT;

DELETE FROM integers;

COMMIT;

SELECT MIN(i), MAX(i), COUNT(*) FROM integers;

INSERT INTO integers SELECT * FROM RANGE(0, 10000);

BEGIN;

BEGIN;

INSERT INTO integers SELECT * FROM RANGE(10000, 30000);

COMMIT;

DELETE FROM integers;

COMMIT;

SELECT MIN(i), MAX(i), COUNT(*) FROM integers;

PRAGMA enable_verification;

CREATE TABLE integers (i INT);

INSERT INTO integers SELECT * FROM RANGE(0, 1000);

SET immediate_transaction_mode = TRUE;

BEGIN;

BEGIN;

INSERT INTO integers SELECT * FROM RANGE(1000, 3000);

DELETE FROM integers;

COMMIT;

COMMIT;

DELETE FROM integers;

SELECT COUNT(*) FROM integers;

PRAGMA enable_verification;

CREATE TABLE hugeints (h INT128);

INSERT INTO hugeints VALUES (CAST(100 AS INT128)), (1023819078293589341789412412), (42);

BEGIN;

UPDATE hugeints SET h = 100 WHERE h = 42;

SELECT * FROM hugeints ORDER BY 1;

SELECT COUNT(DISTINCT h) FROM hugeints;

SELECT * FROM hugeints ORDER BY 1;

SELECT COUNT(DISTINCT h) FROM hugeints;

ROLLBACK;

SELECT COUNT(DISTINCT h) FROM hugeints;

UPDATE hugeints SET h = 100 WHERE h = 42;

SELECT h, COUNT(*) FROM hugeints GROUP BY h ORDER BY 2 DESC;

SELECT COUNT(DISTINCT h) FROM hugeints;

SELECT COUNT(DISTINCT h) FROM hugeints;

UPDATE hugeints SET h = h + 1 WHERE h = 100;

SELECT COUNT(DISTINCT h) FROM hugeints;

SELECT COUNT(DISTINCT h) FROM hugeints;

PRAGMA enable_verification;

CREATE TABLE interval (t INTERVAL);

INSERT INTO interval VALUES (INTERVAL '20' DAY), (INTERVAL '1' YEAR), (INTERVAL '1' MONTH);

BEGIN;

UPDATE interval SET t = INTERVAL '1' MONTH WHERE t = INTERVAL '20' DAY;

SELECT * FROM interval ORDER BY 1;

SELECT COUNT(DISTINCT t) FROM interval;

SELECT * FROM interval ORDER BY 1;

SELECT COUNT(DISTINCT t) FROM interval;

ROLLBACK;

SELECT COUNT(DISTINCT t) FROM interval;

UPDATE interval SET t = INTERVAL '1' MONTH WHERE t = INTERVAL '20' DAY;

SELECT t, COUNT(*) FROM interval GROUP BY t ORDER BY 2 DESC;

SELECT COUNT(DISTINCT t) FROM interval;

SELECT COUNT(DISTINCT t) FROM interval;

PRAGMA enable_verification;

CREATE TABLE uhugeints (h UINT128);

INSERT INTO uhugeints VALUES (CAST(100 AS UINT128)), (1023819078293589341789412412), (42);

BEGIN;

UPDATE uhugeints SET h = 100 WHERE h = 42;

SELECT * FROM uhugeints ORDER BY 1;

SELECT COUNT(DISTINCT h) FROM uhugeints;

SELECT * FROM uhugeints ORDER BY 1;

SELECT COUNT(DISTINCT h) FROM uhugeints;

ROLLBACK;

SELECT COUNT(DISTINCT h) FROM uhugeints;

UPDATE uhugeints SET h = 100 WHERE h = 42;

SELECT h, COUNT(*) FROM uhugeints GROUP BY h ORDER BY 2 DESC;

SELECT COUNT(DISTINCT h) FROM uhugeints;

SELECT COUNT(DISTINCT h) FROM uhugeints;

UPDATE uhugeints SET h = h + 1 WHERE h = 100;

SELECT COUNT(DISTINCT h) FROM uhugeints;

SELECT COUNT(DISTINCT h) FROM uhugeints;

PRAGMA enable_verification;

SELECT * FROM TEST_ALL_TYPES();

CREATE TABLE all_types AS SELECT * FROM TEST_ALL_TYPES();

SELECT * FROM TEST_ALL_TYPES();

CREATE TABLE df (x TEXT, y BIGINT);

INSERT INTO df VALUES ('2021-01-01 12:00:00', 1);

SELECT CAST(x AS DATE) = '2021-01-01' AS a, CASE WHEN CAST(x AS DATE) = '2021-01-01' THEN y ELSE 0 END AS b, CASE WHEN CAST(x AS DATE) = '2021-01-01' THEN y ELSE 0 END AS c, CASE WHEN CAST(x AS DATE) = '2021-01-01' THEN 1 ELSE 0 END AS d FROM df;

PRAGMA enable_verification;

CREATE TABLE null_table (i NULL);

SELECT TYPEOF(i) FROM null_table;

SELECT TYPEOF(i) FROM null_table;

SELECT TYPEOF(i) FROM null_table;

SELECT TYPEOF(i) FROM null_table;

CREATE TABLE null_list (i NULL[]);

INSERT INTO null_list VALUES (NULL), ([NULL]);

SELECT i FROM null_list;

SELECT i FROM null_list;

SELECT i FROM null_list;

CREATE TABLE null_struct (i STRUCT(n NULL));

INSERT INTO null_struct VALUES (NULL), ({'n': NULL});

SELECT i FROM null_struct;

SELECT i FROM null_struct;

SELECT i FROM null_struct;

CREATE TABLE null_map (i MAP(NULL, NULL));

INSERT INTO null_map VALUES (NULL), (MAP([NULL], [NULL]));

INSERT INTO null_map VALUES (NULL), (MAP([NULL], [NULL]));

PRAGMA enable_verification;

SELECT TYPEOF(1);

CREATE TYPE my_int AS INT;

CREATE TYPE my_int_list AS my_int[];

SELECT CAST([42] AS my_int_list);

CREATE TYPE t4 AS UNION ( v0 SETOF t4 );

CREATE TYPE t4 AS t4[];

CREATE TYPE t4 AS STRUCT(a t4);

PRAGMA enable_verification;

CREATE TYPE alias AS VARCHAR;

CREATE TYPE alias AS INTEGER;

DROP TYPE alias;

DROP TYPE alias;

CREATE TYPE alias AS VARCHAR;

DROP TYPE IF EXISTS alias;

DROP TYPE IF EXISTS alias;

CREATE TYPE alias AS VARCHAR;

DROP TYPE IF EXISTS alias;

CREATE TYPE alias as BLOBL;

PRAGMA enable_verification;

CREATE TYPE str_alias as VARCHAR;

SELECT UPPER(CAST('hello' AS str_alias));

CREATE TYPE MAPPOINT AS MAP(INTEGER,INTEGER);

CREATE TABLE a (b MAPPOINT);

SELECT * FROM a;

INSERT INTO a VALUES (MAP([1], [2])), (MAP([1, 2, 3], [4, 5, 6]));

SELECT * FROM a;

PRAGMA enable_verification;

CREATE TYPE POINT AS STRUCT(i INTEGER, j INTEGER);

CREATE TABLE a (b POINT);

INSERT INTO a VALUES ({'i': 3, 'j': 4});

SELECT * FROM a;

SELECT * FROM a;

INSERT INTO a VALUES (NULL);

SELECT * FROM a;

INSERT INTO a VALUES (ROW(2, 3));

SELECT * FROM a;

INSERT INTO a VALUES (ROW(3, NULL)), (ROW(NULL, 4));

SELECT * FROM a;

INSERT INTO a VALUES (ROW(1, 2, 3));

INSERT INTO a VALUES (ROW(1));

INSERT INTO a VALUES (ROW('hello', 1));

INSERT INTO a VALUES (ROW('hello', [1, 2]));

INSERT INTO a VALUES (ROW(1, ROW(1, 7)));

PRAGMA enable_verification;

CREATE TYPE foobar AS ENUM(
'Foo',
'Bar'
);

CREATE TYPE top_nest AS STRUCT(
foobar FOOBAR
);

CREATE TABLE failing (top_nest TOP_NEST);

INSERT INTO failing VALUES ({'foobar': 'Foo'});

SELECT top_nest FROM failing;

PRAGMA enable_verification;

CREATE TYPE alias AS VARCHAR;

CREATE TABLE person (name TEXT, current_car car);

CREATE TABLE person (name TEXT, current_alias alias);

INSERT INTO person VALUES ('Moe', 'happy');

SELECT * FROM person;

INSERT INTO person VALUES ('Pedro', 'ok');

INSERT INTO person VALUES ('Mark', 'sad');

SELECT * FROM person WHERE current_alias = 'sad';

SELECT * FROM person WHERE current_alias > 'ok';

CREATE TABLE pets (name TEXT, current_alias alias);

INSERT INTO pets VALUES ('Anne', 'happy');

INSERT INTO pets VALUES ('Oogie Boogie', 'ok');

INSERT INTO pets VALUES ('Mr. Fluffles McFluffingstein', NULL);

SELECT * FROM pets;

SELECT person.name, pets.name FROM person INNER JOIN pets ON (person.current_alias = pets.current_alias);

DROP TABLE person;

DROP TABLE pets;

DROP TYPE alias;

CREATE TABLE aliens (name TEXT, current_alias alias);

CREATE TYPE alias AS VARCHAR;

CREATE TYPE intelligence AS VARCHAR;

CREATE TABLE aliens (name TEXT, current_alias alias);

INSERT INTO aliens VALUES ('Alf o Eteimoso', 'happy'), ('Dr Zoidberg', 'sad');

ALTER TABLE aliens ADD COLUMN iq_level intelligence;

SELECT * FROM aliens;

INSERT INTO aliens VALUES ('The Borg', 'ok', 'ehh');

SELECT * FROM aliens;

ALTER TABLE aliens ALTER COLUMN current_alias SET DATA TYPE TEXT;

SELECT * FROM aliens;

CREATE TYPE car_brand AS VARCHAR;

CREATE TABLE person (name TEXT, current_alias alias, last_year_alias alias, car car_brand);

INSERT INTO person VALUES ('Pedro', 'ok', 'ok', 'Seat'), ('Mark', 'sad', 'happy', 'Fiets');

SELECT * FROM person WHERE current_alias = last_year_alias;

SELECT * FROM person WHERE current_alias = 'ok';

INSERT INTO person VALUES ('Diego', 'sad', 'happy', 'Seat'), ('Tim', 'happy', 'sad', 'Fiets');

SELECT COUNT(*), current_alias FROM person GROUP BY current_alias ORDER BY ALL;

SELECT name, current_alias FROM person ORDER BY current_alias;

CREATE SCHEMA my_schema;

CREATE TYPE my_schema.my_type AS STRUCT (
a int, b int
);

CREATE TABLE my_schema.tbl (c0 my_schema.my_type);

PRAGMA enable_verification;

SELECT (CAST(2 AS BIT) & CAST(2 AS BIT)) = CAST(2 AS BIT) AS b;

SELECT (CAST(2 AS BIT) & CAST(2 AS BIT)) = CAST(2 AS BIT) AS b;

SELECT a, b, a = b, "(a = b)" FROM (SELECT (CAST(2 AS BIT) & CAST(2 AS BIT)) AS a, CAST(2 AS BIT) AS b, (a = b) AS "(a = b)");

PRAGMA enable_verification;

SELECT (CAST('0101011' AS BIT));

SELECT (CAST('0101011' AS BIT));

SELECT (CAST('0101011' AS BIT));

SELECT (CAST('0101011' AS BIT));

SELECT (CAST('0101011' AS BIT));

SELECT (CAST('0101011' AS BIT));

SELECT (CAST('0101011' AS BIT));

SELECT (CAST('0101011' AS BIT));

SELECT (CAST('0101011' AS BIT));

SELECT BITSTRING('', 0);

SELECT BITSTRING('5', 10);

SELECT BITSTRING('0101011');

INSERT INTO bits VALUES ('101011010'), ('111'), ('1010010101111111001101');

SELECT * FROM bits;

INSERT INTO bits VALUES ('0'), ('1'), ('0000000000000000000111');

SELECT * FROM bits;

SELECT * FROM bits WHERE b = '111';

INSERT INTO bits VALUES ('101211010');

INSERT INTO bits VALUES ('1A10');

SELECT (CAST('0101011' AS BIT(10)));

SELECT CAST(NULL AS BIT);

SELECT CAST('' AS BIT);

DELETE FROM bits;

INSERT INTO bits VALUES (NULL);

INSERT INTO bits VALUES ('');

SELECT * FROM bits;

SELECT TRY_CAST('101' AS BIT);

SELECT TRY_CAST('102' AS BIT);

CREATE TABLE varchars (col TEXT);

INSERT INTO varchars VALUES ('1010010101010101100001111111001101'), ('0');

SELECT CAST(col AS BIT) FROM varchars;

INSERT INTO varchars VALUES ('1011010'), ('0🦆1'), ('1'), ('3');

SELECT TRY_CAST(col AS BIT) FROM varchars;

CREATE TABLE huge_bits (big BIT);

INSERT INTO huge_bits VALUES ('');

SELECT BIT_LENGTH(big) FROM huge_bits;

SELECT CAST((CAST(CAST('ab' AS BLOB) AS BIT) << 2) AS BLOB);

PRAGMA enable_verification;

CREATE TABLE bits (b BIT);

INSERT INTO bits VALUES ('101111011010'), ('110001100100'), ('101001000110');

SELECT CAST('10101' AS BIT) & CAST('10001' AS BIT);

SELECT CAST('1000001101011111' AS BIT) & CAST('1100101101000011' AS BIT);

SELECT CAST('01011' AS BIT) & CAST('11000' AS BIT);

SELECT b & CAST('011100011011' AS BIT) FROM bits;

SELECT CAST('010110' AS BIT) & CAST('11000' AS BIT);

SELECT CAST('10001111' AS BIT) | CAST('00011011' AS BIT);

SELECT CAST('1011' AS BIT) | CAST('0001' AS BIT);

SELECT CAST('10000010011101011111' AS BIT) | CAST('11001011010011100011' AS BIT);

SELECT b | CAST('011100011011' AS BIT) FROM bits;

SELECT CAST('0110' AS BIT) | CAST('11000' AS BIT);

SELECT XOR(CAST('101' AS BIT), CAST('001' AS BIT));

SELECT XOR(CAST('10000010011101011111' AS BIT), CAST('11001011010111000011' AS BIT));

SELECT XOR(b, CAST('011100011011' AS BIT)) FROM bits;

SELECT XOR(CAST('011010110' AS BIT), CAST('11000' AS BIT));

SELECT ~(CAST('101' AS BIT));

SELECT ~(CAST('1001010101111111000111' AS BIT));

SELECT ~(b) FROM bits;

SELECT CAST('1001010101111111000111' AS BIT) << 4;

SELECT CAST('010101' AS BIT) << 50;

SELECT CAST('101' AS BIT) << 0;

SELECT CAST('010101' AS BIT) << -2;

SELECT b << 3 FROM bits;

SELECT CAST('1001010101111111000111' AS BIT) >> 10;

SELECT CAST('010101' AS BIT) >> 50;

SELECT CAST('101' AS BIT) >> 0;

SELECT b >> 5 FROM bits;

PRAGMA enable_verification;

SELECT BITSTRING('1', 6) FROM RANGE(0, 100000) GROUP BY 1;

PRAGMA enable_verification;

CREATE TABLE bits (b BIT);

INSERT INTO bits VALUES ('101001111'), ('00111'), ('100101010110000000000001'), ('111111010100');

INSERT INTO bits VALUES ('0110108');

SELECT BIT_LENGTH(CAST('1010111111101010011101011' AS BIT));

SELECT BIT_LENGTH(CAST('0' AS BIT));

SELECT BIT_LENGTH(b) FROM bits;

SELECT OCTET_LENGTH(CAST('10101111111010100111010' AS BIT));

SELECT OCTET_LENGTH(CAST('0' AS BIT));

SELECT OCTET_LENGTH(b) FROM bits;

SELECT GET_BIT(CAST('101010101010101010' AS BIT), 6);

SELECT GET_BIT(CAST('110' AS BIT), 2);

SELECT GET_BIT(CAST('1010000' AS BIT), 0);

SELECT GET_BIT(b, 4) FROM bits;

SELECT GET_BIT(CAST('10101' AS BIT), 6);

SELECT GET_BIT(CAST('001' AS BIT), -1);

SELECT SET_BIT(CAST('0101010101010101010' AS BIT), 2, 1);

SELECT SET_BIT(CAST('1111111' AS BIT), 5, 0);

SELECT SET_BIT(CAST('11111' AS BIT), 0, 0);

SELECT SET_BIT(b, 3, 0) FROM bits;

SELECT SET_BIT(CAST('11111' AS BIT), 2, 7);

SELECT SET_BIT(CAST('10101' AS BIT), 6, 1);

SELECT SET_BIT(CAST('011' AS BIT), -1, 0);

SELECT BIT_COUNT(CAST('10101' AS BIT));

SELECT BIT_COUNT(CAST('0000000' AS BIT));

SELECT BIT_COUNT(CAST('1101111111111101111111111111111101111' AS BIT));

SELECT BIT_COUNT(b) FROM bits;

SELECT BIT_POSITION(CAST('010' AS BIT), CAST('010111' AS BIT));

SELECT BIT_POSITION(CAST('010' AS BIT), CAST('1110101' AS BIT));

SELECT BIT_POSITION(CAST('010' AS BIT), CAST('11110011011011101011' AS BIT));

SELECT BIT_POSITION(CAST('010' AS BIT), CAST('1101110101011101' AS BIT));

PRAGMA enable_verification;

CREATE TABLE blobs (b BLOB);

INSERT INTO blobs VALUES ('\xaa\xff\xaa'), ('\xAA\xFF\xAA\xAA\xFF\xAA'), ('\xAA\xFF\xAA\xAA\xFF\xAA\xAA\xFF\xAA');

SELECT * FROM blobs;

DELETE FROM blobs;

INSERT INTO blobs VALUES ('\xaa\xff\xaa'), ('\xaa\xff\xaa\xaa\xff\xaa'), ('\xaa\xff\xaa\xaa\xff\xaa\xaa\xff\xaa');

SELECT * FROM blobs;

DELETE FROM blobs;

INSERT INTO blobs VALUES ('\xaa1199'), ('\xaa1199aa1199'), ('\xaa1199aa1199aa1199');

SELECT * FROM blobs;

INSERT INTO blobs VALUES ('\xGA\xFF\xAA');

INSERT INTO blobs VALUES ('\xA');

INSERT INTO blobs VALUES ('\xAA\xA');

INSERT INTO blobs VALUES ('blablabla\x');

SELECT CAST('abc �' AS BLOB);

SELECT CAST('' AS BLOB);

SELECT CAST(NULL AS BLOB);

CREATE TABLE blob_empty (b BLOB);

INSERT INTO blob_empty VALUES (''), (CAST('' AS BLOB));

INSERT INTO blob_empty VALUES (NULL), (CAST(NULL AS BLOB));

SELECT * FROM blob_empty;

SELECT CAST('ü' AS BLOB);

SELECT CAST('\x7F' AS BLOB);

PRAGMA enable_verification;

SELECT CAST(CAST('a' AS BLOB) AS TEXT);

SELECT CAST(CAST('a' AS TEXT) AS BLOB);

SELECT CAST('\x20\x00\xFF' AS BLOB);

SELECT CAST(CAST('\x20\x00\xFF' AS BLOB) AS TEXT);

SELECT CAST(CAST(CAST('\x20\x00\xFF' AS BLOB) AS TEXT) AS BLOB);

SELECT CAST(CAST(CAST(CAST('\x20\x00\xFF' AS BLOB) AS TEXT) AS BLOB) AS TEXT);

SELECT CAST(CAST(CAST(CAST('\x20\x00\xFF' AS TEXT) AS BLOB) AS TEXT) AS BLOB);

SELECT CAST(1 AS BLOB);

SELECT CAST(1.0 AS BLOB);

SELECT CAST(CAST(1 AS TINYINT) AS BLOB);

SELECT CAST(CAST(1 AS SMALLINT) AS BLOB);

SELECT CAST(CAST(1 AS INT) AS BLOB);

SELECT CAST(CAST(1 AS BIGINT) AS BLOB);

SELECT CAST(CAST(1 AS DECIMAL(18, 3)) AS BLOB);

PRAGMA enable_verification;

CREATE TABLE blobs (b BLOB);

INSERT INTO blobs VALUES (CAST('a' AS BLOB));

SELECT b || CAST('ZZ' AS BLOB) FROM blobs;

SELECT CAST('abc ' AS BLOB) || CAST('klm *\xEF\xBF\xBDT' AS BLOB);

INSERT INTO blobs VALUES (CAST('abc klm *\xEF\xBF\xBDT' AS BLOB));

SELECT COUNT(*) FROM blobs;

SELECT OCTET_LENGTH(b) FROM blobs;

DELETE FROM blobs;

INSERT INTO blobs VALUES (CAST('\xFF' AS BLOB));

SELECT b || CAST('ZZ' AS BLOB) FROM blobs;

SELECT b || CAST('\x5A\x5A' AS BLOB) FROM blobs;

SELECT b || CAST('5A5A' AS TEXT) FROM blobs;

DELETE FROM blobs;

INSERT INTO blobs VALUES (CAST('\xFF' AS BLOB));

INSERT INTO blobs VALUES (CAST('FF' AS BLOB));

INSERT INTO blobs VALUES (CAST('\x55\xAA\xFF\x55\xAA\xFF\x55\xAA\xFF\x01' AS BLOB));

INSERT INTO blobs VALUES (CAST('55AAFF55AAFF55AAFF01' AS BLOB));

SELECT OCTET_LENGTH(b) FROM blobs;

CREATE TABLE b (b BLOB);

INSERT INTO b VALUES (NULL);

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

CREATE TABLE blobs (b BLOB, g INT);

INSERT INTO blobs VALUES ('hello', 0), ('\x00whatisgoingon', 1), (NULL, 0), ('\xFF\xFE\xFB', 1);

SELECT COUNT(*), COUNT(b), MIN(b), MAX(b) FROM blobs;

SELECT * FROM blobs ORDER BY b;

INSERT INTO blobs VALUES ('hello', 3), ('\x00whatisgoingon', 9), (NULL, 0), ('\xFF\xFE\xFB', 19);

SELECT b, SUM(g) FROM blobs GROUP BY b ORDER BY b;

CREATE TABLE blobs2 (b BLOB, g INT);

INSERT INTO blobs2 VALUES ('hello', 0), ('\x00whatisgoingon', 100), (NULL, 0), ('\xFF\xFE\xFB', 200);

SELECT L.b, SUM(L.g) FROM blobs AS L JOIN blobs2 AS R ON L.b = R.b GROUP BY L.b ORDER BY L.b;

SELECT R.b, SUM(R.g) FROM blobs AS L, blobs2 AS R WHERE L.b = R.b GROUP BY R.b ORDER BY R.b;

PRAGMA enable_verification;

CREATE TABLE blobs (b BLOB);

INSERT INTO blobs VALUES ('aaaaaaaaaa');

INSERT INTO blobs SELECT b || b || b || b || b || b || b || b || b || b FROM blobs WHERE OCTET_LENGTH(b) = (SELECT MAX(OCTET_LENGTH(b)) FROM blobs);

INSERT INTO blobs SELECT b || b || b || b || b || b || b || b || b || b FROM blobs WHERE OCTET_LENGTH(b) = (SELECT MAX(OCTET_LENGTH(b)) FROM blobs);

INSERT INTO blobs SELECT b || b || b || b || b || b || b || b || b || b FROM blobs WHERE OCTET_LENGTH(b) = (SELECT MAX(OCTET_LENGTH(b)) FROM blobs);

SELECT OCTET_LENGTH(b) FROM blobs ORDER BY 1;

SELECT TRY_CAST('\\' AS BLOB);

SELECT TRY_CAST('\\x3' AS BLOB);

SELECT TRY_CAST('\\b12' AS BLOB);

SELECT TRY_CAST('\\xx2' AS BLOB);

SELECT TRY_CAST('\\x2x' AS BLOB);

SELECT TRY_CAST('ü' AS BLOB);

SELECT TRY_CAST('\x12' AS BLOB);

SELECT CAST('\\' AS BLOB);

SELECT CAST('\\x3' AS BLOB);

SELECT CAST('\\b12' AS BLOB);

SELECT CAST('\\xx2' AS BLOB);

SELECT CAST('\\x2x' AS BLOB);

SELECT CAST('ü' AS BLOB);

SELECT CAST('\x12' AS BLOB);

PRAGMA enable_verification;

SELECT CAST('1969-01-01' AS DATE);

SELECT CAST('2370-01-01' AS DATE);

SELECT CAST('5877642-06-25 (BC)' AS DATE);

SELECT CAST('5877642-06-24 (BC)' AS DATE);

SELECT CAST('5877680-06-23 (BC)' AS DATE);

SELECT CAST('99999999-06-23 (BC)' AS DATE);

SELECT CAST(CAST('290308-01-01 (BC)' AS DATE) AS TIMESTAMP);

SELECT CAST(CAST('290309-01-01 (BC)' AS DATE) AS TIMESTAMP);

SELECT CAST(CAST('5877642-06-23 (BC)' AS DATE) AS TIMESTAMP);

SELECT CAST('5877642-06-25 (BC)' AS DATE) + 1;

SELECT CAST('5877642-06-24 (BC)' AS DATE) - 1;

SELECT CAST('5877642-06-24 (BC)' AS DATE) - 365;

SELECT CAST('5877642-06-24 (BC)' AS DATE) - 2147483647;

SELECT CAST('290309-12-22 (BC)' AS DATE) + INTERVAL (1) DAY;

SELECT CAST('290309-12-22 (BC)' AS DATE) - INTERVAL (1) DAY;

SELECT CAST('290309-12-22 (BC)' AS DATE) - INTERVAL (365) DAY;

SELECT CAST('290309-12-22 (BC)' AS DATE) - INTERVAL (2147483647) DAY;

SELECT CAST('290309-12-22 (BC)' AS DATE) - INTERVAL (9999999999999) SECOND;

SELECT CAST('290309-12-22 (BC)' AS DATE) - INTERVAL (9223372036854775807) MICROSECOND;

SELECT CAST('290309-12-22 (BC)' AS DATE) - INTERVAL '1147483647 days 9223372036854775807 microseconds';

SELECT CAST('290309-12-22 (BC)' AS DATE) - INTERVAL '2147483647 days 9223372036854775807 microseconds';

SELECT CAST('290309-12-22 (BC)' AS DATE) - INTERVAL '2007483647 days 9223372036854775807 microseconds';

SELECT CAST('290309-12-22 (BC)' AS DATE) + INTERVAL (1) MONTH;

SELECT CAST('5877642-06-23 (BC)' AS DATE) - INTERVAL (1) MONTH;

SELECT CAST('5877642-06-23 (BC)' AS DATE) - INTERVAL (2147483647) MONTH;

SELECT CAST('5881580-07-10' AS DATE);

SELECT CAST('5881580-07-11' AS DATE);

SELECT CAST('5881580-08-11' AS DATE);

SELECT CAST('99999999-01-01' AS DATE);

SELECT CAST(CAST('294247-01-10' AS DATE) AS TIMESTAMP);

SELECT CAST(CAST('294247-01-11' AS DATE) AS TIMESTAMP);

SELECT CAST('5881580-07-10' AS DATE) - 1;

SELECT CAST('5881580-07-10' AS DATE) + 1;

SELECT CAST('5881580-07-10' AS DATE) + 365;

SELECT CAST('5881580-07-10' AS DATE) + 2147483647;

SELECT CAST('5877642-06-25 (BC)' AS DATE) - 1;

SELECT CAST('294247-01-10' AS DATE) - INTERVAL (1) DAY;

SELECT CAST('294247-01-10' AS DATE) + INTERVAL (1) DAY;

SELECT CAST('294247-01-10' AS DATE) + INTERVAL (365) DAY;

SELECT CAST('294247-01-10' AS DATE) + INTERVAL (2147483647) DAY;

SELECT CAST('294247-01-10' AS DATE) + INTERVAL (9999999999999) SECOND;

SELECT CAST('294247-01-10' AS DATE) + INTERVAL (9223372036854775807) MICROSECOND;

SELECT CAST('294247-01-10' AS DATE) + INTERVAL '1147483647 days 9223372036854775807 microseconds';

SELECT CAST('294247-01-10' AS DATE) + INTERVAL '2147483647 days 9223372036854775807 microseconds';

SELECT CAST('294247-01-10' AS DATE) + INTERVAL '2007483647 days 9223372036854775807 microseconds';

SELECT CAST('294247-01-10' AS DATE) + INTERVAL (1) MONTH;

SELECT CAST('294247-01-10' AS DATE) - INTERVAL (1) MONTH;

SELECT CAST('5881580-07-10' AS DATE) - CAST('5877642-06-25 (BC)' AS DATE);

PRAGMA enable_verification;

SELECT CAST(CAST('1992-01-01' AS DATE) AS TEXT) = '1992-01-01';

SELECT CAST(CAST('1992-09-20' AS DATE) AS TEXT) = '1992-09-20';

SELECT CAST(CAST('1992-02-29' AS DATE) AS TEXT) = '1992-02-29';

SELECT CAST(CAST('3600-02-29' AS DATE) AS TEXT) = '3600-02-29';

SELECT CAST(CAST('0030-01-01' AS DATE) AS TEXT) = '0030-01-01';

SELECT CAST(CAST('30000-01-01' AS DATE) AS TEXT) = '30000-01-01';

SELECT CAST(CAST('1969-01-01' AS DATE) AS TEXT) = '1969-01-01';

SELECT CAST(CAST('1970-01-01' AS DATE) AS TEXT) = '1970-01-01';

SELECT CAST(CAST('2369-01-01' AS DATE) AS TEXT) = '2369-01-01';

SELECT CAST(CAST('2370-01-01' AS DATE) AS TEXT) = '2370-01-01';

SELECT CAST(CAST('2371-01-01' AS DATE) AS TEXT) = '2371-01-01';

SELECT CAST(CAST('-1000-01-01' AS DATE) AS TEXT) = '1001-01-01 (BC)';

SELECT CAST(CAST('1992/09/20' AS DATE) AS TEXT) = '1992-09-20';

SELECT CAST(CAST('1992 09 20' AS DATE) AS TEXT) = '1992-09-20';

SELECT CAST(CAST('1992\09\20' AS DATE) AS TEXT) = '1992-09-20';

SELECT CAST(CAST('1993-01-31' AS DATE) AS TEXT);

SELECT CAST(CAST('1993-01-32' AS DATE) AS TEXT);

SELECT CAST(CAST('1993-02-28' AS DATE) AS TEXT);

SELECT CAST(CAST('1993-02-29' AS DATE) AS TEXT);

SELECT CAST(CAST('1993-03-31' AS DATE) AS TEXT);

SELECT CAST(CAST('1993-03-32' AS DATE) AS TEXT);

SELECT CAST(CAST('1993-04-30' AS DATE) AS TEXT);

SELECT CAST(CAST('1993-04-31' AS DATE) AS TEXT);

SELECT CAST(CAST('1993-05-31' AS DATE) AS TEXT);

SELECT CAST(CAST('1993-05-32' AS DATE) AS TEXT);

SELECT CAST(CAST('1993-06-30' AS DATE) AS TEXT);

SELECT CAST(CAST('1993-06-31' AS DATE) AS TEXT);

SELECT CAST(CAST('1993-07-31' AS DATE) AS TEXT);

SELECT CAST(CAST('1993-07-32' AS DATE) AS TEXT);

SELECT CAST(CAST('1993-08-31' AS DATE) AS TEXT);

SELECT CAST(CAST('1993-08-32' AS DATE) AS TEXT);

SELECT CAST(CAST('1993-09-30' AS DATE) AS TEXT);

SELECT CAST(CAST('1993-09-31' AS DATE) AS TEXT);

SELECT CAST(CAST('1993-10-31' AS DATE) AS TEXT);

SELECT CAST(CAST('1993-10-32' AS DATE) AS TEXT);

SELECT CAST(CAST('1993-11-30' AS DATE) AS TEXT);

SELECT CAST(CAST('1993-11-31' AS DATE) AS TEXT);

SELECT CAST(CAST('1993-12-31' AS DATE) AS TEXT);

SELECT CAST(CAST('1993-12-32' AS DATE) AS TEXT);

SELECT CAST(CAST('1992-01-31' AS DATE) AS TEXT);

SELECT CAST(CAST('1992-01-32' AS DATE) AS TEXT);

SELECT CAST(CAST('1992-02-29' AS DATE) AS TEXT);

SELECT CAST(CAST('1992-02-30' AS DATE) AS TEXT);

SELECT CAST(CAST('1992-03-31' AS DATE) AS TEXT);

SELECT CAST(CAST('1992-03-32' AS DATE) AS TEXT);

SELECT CAST(CAST('1992-04-30' AS DATE) AS TEXT);

SELECT CAST(CAST('1992-04-31' AS DATE) AS TEXT);

SELECT CAST(CAST('1992-05-31' AS DATE) AS TEXT);

SELECT CAST(CAST('1992-05-32' AS DATE) AS TEXT);

SELECT CAST(CAST('1992-06-30' AS DATE) AS TEXT);

SELECT CAST(CAST('1992-06-31' AS DATE) AS TEXT);

SELECT CAST(CAST('1992-07-31' AS DATE) AS TEXT);

SELECT CAST(CAST('1992-07-32' AS DATE) AS TEXT);

SELECT CAST(CAST('1992-08-31' AS DATE) AS TEXT);

SELECT CAST(CAST('1992-08-32' AS DATE) AS TEXT);

SELECT CAST(CAST('1992-09-30' AS DATE) AS TEXT);

SELECT CAST(CAST('1992-09-31' AS DATE) AS TEXT);

SELECT CAST(CAST('1992-10-31' AS DATE) AS TEXT);

SELECT CAST(CAST('1992-10-32' AS DATE) AS TEXT);

SELECT CAST(CAST('1992-11-30' AS DATE) AS TEXT);

SELECT CAST(CAST('1992-11-31' AS DATE) AS TEXT);

SELECT CAST(CAST('1992-12-31' AS DATE) AS TEXT);

SELECT CAST(CAST('1992-12-32' AS DATE) AS TEXT);

SELECT CAST(CAST('1900-02-29' AS DATE) AS TEXT);

SELECT CAST(CAST('2000-02-29' AS DATE) AS TEXT) = '2000-02-29';

SELECT CAST(CAST('0-01-01' AS DATE) AS TEXT);

SELECT CAST(CAST('1-01-01' AS DATE) AS TEXT);

SELECT CAST(CAST('-1-01-01' AS DATE) AS TEXT);

SELECT CAST(CAST('100000' AS DATE) AS TEXT);

SELECT CAST(CAST('1992-10/10' AS DATE) AS TEXT);

SELECT CAST(CAST('1992a10a10' AS DATE) AS TEXT);

SELECT CAST(CAST('1992/10-10' AS DATE) AS TEXT);

SELECT CAST(CAST('hello' AS DATE) AS TEXT);

SELECT CAST(CAST('aa-10-10' AS DATE) AS TEXT);

SELECT CAST(CAST('1992-aa-10' AS DATE) AS TEXT);

SELECT CAST(CAST('1992-10-aa' AS DATE) AS TEXT);

SELECT CAST(CAST('' AS DATE) AS TEXT);

SELECT CAST(CAST('-' AS DATE) AS TEXT);

SELECT CAST(CAST('-/10/10' AS DATE) AS TEXT);

SELECT CAST('-291000-01-01' AS DATE) AS $VARCHAR;

SELECT CAST(CAST('291000-01-01' AS DATE) AS TEXT);

SELECT CAST('291000-01-01 (BC)' AS DATE) AS $VARCHAR;

SELECT CAST(CAST('-a' AS DATE) AS TEXT);

SELECT CAST(CAST('1992-' AS DATE) AS TEXT);

SELECT CAST(CAST('1992-10' AS DATE) AS TEXT);

SELECT CAST(CAST('1992-10-' AS DATE) AS TEXT);

SELECT CAST(CAST('10000000000-01-01' AS DATE) AS TEXT);

SELECT CAST(CAST('-10000000000-01-01' AS DATE) AS TEXT);

SELECT CAST(CAST('1992-30-30' AS DATE) AS TEXT);

SELECT CAST(CAST('1992-00-50' AS DATE) AS TEXT);

SELECT CAST(CAST('1992-01-00' AS DATE) AS TEXT);

SELECT CAST(CAST('1992-10-50' AS DATE) AS TEXT);

SELECT CAST(CAST('1992-10-100' AS DATE) AS TEXT);

PRAGMA enable_verification;

SELECT TRY_CAST('' AS DATE);

SELECT TRY_CAST('    ' AS DATE);

SELECT TRY_CAST('1111' AS DATE);

SELECT TRY_CAST('  1111   ' AS DATE);

SELECT TRY_CAST('1111-' AS DATE);

SELECT TRY_CAST('1111-11' AS DATE);

SELECT TRY_CAST('1111-11-' AS DATE);

SELECT TRY_CAST('1111-111-1' AS DATE);

SELECT TRY_CAST('1111-11-111' AS DATE);

SELECT TRY_CAST('1111-11-11' AS DATE);

SELECT TRY_CAST('1111-11-11 (bc)' AS DATE);

SELECT TRY_CAST('2001-02-29' AS DATE);

SELECT TRY_CAST('2004-02-29' AS DATE);

SELECT TRY_CAST('2004/02/29' AS DATE);

SELECT TRY_CAST('2004/02-29' AS DATE);

SELECT TRY_CAST('5877642-06-25 (BC)' AS DATE);

SELECT TRY_CAST('5877642-06-24 (BC)' AS DATE);

SELECT TRY_CAST('-infinity' AS DATE);

SELECT TRY_CAST('99999999-06-22 (BC)' AS DATE);

SELECT TRY_CAST(CAST('290308-01-01 (BC)' AS DATE) AS TIMESTAMP);

SELECT TRY_CAST(CAST('290309-01-01 (BC)' AS DATE) AS TIMESTAMP);

SELECT TRY_CAST(CAST('5877642-06-25 (BC)' AS DATE) AS TIMESTAMP);

SELECT TRY_CAST('5881580-07-10' AS DATE);

SELECT TRY_CAST('5881580-07-11' AS DATE);

SELECT TRY_CAST('infinity' AS DATE);

SELECT TRY_CAST('5881580-08-11' AS DATE);

SELECT TRY_CAST('99999999-01-01' AS DATE);

SELECT TRY_CAST(CAST('294246-12-31' AS DATE) AS TIMESTAMP);

SELECT TRY_CAST(CAST('294247-12-31' AS DATE) AS TIMESTAMP);

PRAGMA enable_verification;

CREATE TABLE dates (i DATE);

INSERT INTO dates VALUES ('-1993-08-14'), (NULL);

SELECT * FROM dates;

SELECT YEAR(i) FROM dates;

SELECT CAST(i AS TEXT) FROM dates;

SELECT CAST('0000-01-01' AS DATE);

SELECT CAST('0000-01-01 (BC)' AS DATE);

SELECT CAST('-0030-01-01 (BC)' AS DATE);

SELECT CAST('1992-01-01 (BC)' AS DATE);

SELECT CAST('-1992-01-01' AS DATE);

CREATE TABLE bc_dates AS SELECT CAST('0020-01-01' AS DATE) - INTERVAL (i) YEARS AS d FROM RANGE(0, 40) AS tbl(i);

SELECT d, CAST(d AS TEXT) FROM bc_dates ORDER BY 1;

PRAGMA enable_verification;

CREATE TABLE dates (i DATE);

INSERT INTO dates VALUES ('1993-08-14'), (NULL);

SELECT * FROM dates;

SELECT YEAR(i) FROM dates;

SELECT CAST(i AS TEXT) FROM dates;

SELECT i + 5 FROM dates;

SELECT i - 5 FROM dates;

SELECT i * 3 FROM dates;

SELECT i / 3 FROM dates;

SELECT i % 3 FROM dates;

SELECT i + i FROM dates;

SELECT (i + 5) - i FROM dates;

SELECT CAST('' AS DATE);

SELECT CAST('  ' AS DATE);

SELECT CAST('1992' AS DATE);

SELECT CAST('1992-' AS DATE);

SELECT CAST('1992-01' AS DATE);

SELECT CAST('1992-01-' AS DATE);

SELECT CAST('30000307-01-01 (BC)' AS DATE);

SELECT CAST('2021-03-01' AS DATE), CAST('2021-03-01' AS DATE), CAST('2021-03-01' AS DATE);

PRAGMA enable_verification;

CREATE TABLE dates (i DATE);

CREATE TABLE timestamp (i TIMESTAMP);

INSERT INTO dates VALUES ('1993-08-14');

INSERT INTO timestamp VALUES ('1993-08-14 00:00:01');

SELECT COUNT(*) FROM dates INNER JOIN timestamp ON (CAST(timestamp.i AS DATE) = dates.i);

CREATE TABLE dates (i DATE);

INSERT INTO dates VALUES ('blabla');

INSERT INTO dates VALUES ('1993-20-14');

INSERT INTO dates VALUES ('1993-08-99');

INSERT INTO dates VALUES ('1993-02-29');

INSERT INTO dates VALUES ('1900-02-29');

INSERT INTO dates VALUES ('1992-02-29');

INSERT INTO dates VALUES ('2000-02-29');

INSERT INTO dates VALUES ('02-02-1992');

INSERT INTO dates VALUES ('1900a01a01');

INSERT INTO dates VALUES ('1900-1-1');

INSERT INTO dates VALUES ('-100000000-01-01');

INSERT INTO dates VALUES ('1000000000-01-01');

PRAGMA enable_verification;

SELECT CAST(CAST(127 AS DECIMAL(3, 0)) AS TINYINT), -CAST(CAST(127 AS DECIMAL(3, 0)) AS TINYINT), -CAST(CAST(7 AS DECIMAL(9, 1)) AS TINYINT), CAST(CAST(27 AS DECIMAL(18, 1)) AS TINYINT), CAST(CAST(33 AS DECIMAL(38, 1)) AS TINYINT);

SELECT CAST(CAST(128 AS DECIMAL(3, 0)) AS TINYINT);

SELECT -CAST(CAST(128 AS DECIMAL(9, 0)) AS TINYINT);

SELECT CAST(CAST(128 AS DECIMAL(18, 0)) AS TINYINT);

SELECT CAST(CAST(14751947891758972421513 AS DECIMAL(38, 0)) AS TINYINT);

SELECT CAST(CAST(127 AS DECIMAL(3, 0)) AS SMALLINT), -CAST(CAST(32767 AS DECIMAL(5, 0)) AS SMALLINT), -CAST(CAST(7 AS DECIMAL(9, 1)) AS SMALLINT), CAST(CAST(27 AS DECIMAL(18, 1)) AS SMALLINT), CAST(CAST(33 AS DECIMAL(38, 1)) AS SMALLINT);

SELECT -CAST(CAST(32768 AS DECIMAL(9, 0)) AS SMALLINT);

SELECT CAST(CAST(32768 AS DECIMAL(18, 0)) AS SMALLINT);

SELECT CAST(CAST(14751947891758972421513 AS DECIMAL(38, 0)) AS SMALLINT);

SELECT CAST(CAST(127 AS DECIMAL(3, 0)) AS INT), -CAST(CAST(2147483647 AS DECIMAL(10, 0)) AS INT), -CAST(CAST(7 AS DECIMAL(9, 1)) AS INT), CAST(CAST(27 AS DECIMAL(18, 1)) AS INT), CAST(CAST(33 AS DECIMAL(38, 1)) AS INT);

SELECT CAST(CAST(2147483648 AS DECIMAL(18, 0)) AS INT);

SELECT CAST(CAST(14751947891758972421513 AS DECIMAL(38, 0)) AS INT);

SELECT CAST(CAST(127 AS DECIMAL(3, 0)) AS BIGINT), -CAST(CAST(9223372036854775807 AS DECIMAL(19, 0)) AS BIGINT), -CAST(CAST(7 AS DECIMAL(9, 1)) AS BIGINT), CAST(CAST(27 AS DECIMAL(18, 1)) AS BIGINT), CAST(CAST(33 AS DECIMAL(38, 1)) AS BIGINT);

SELECT CAST(CAST(14751947891758972421513 AS DECIMAL(38, 0)) AS BIGINT);

SELECT CAST(CAST(127 AS DECIMAL(3, 0)) AS INT128), -CAST(CAST(17014118346046923173168730371588410572 AS DECIMAL(38, 0)) AS INT128), -CAST(CAST(7 AS DECIMAL(9, 1)) AS INT128), CAST(CAST(27 AS DECIMAL(18, 1)) AS INT128), CAST(CAST(33 AS DECIMAL(38, 1)) AS INT128);

SELECT CAST(CAST(127 AS DECIMAL(3, 0)) AS REAL), -CAST(CAST(17014118346046923173168730371588410572 AS DECIMAL(38, 0)) AS REAL), -CAST(CAST(7 AS DECIMAL(9, 1)) AS REAL), CAST(CAST(27 AS DECIMAL(18, 1)) AS REAL), CAST(CAST(33 AS DECIMAL(38, 1)) AS REAL);

SELECT CAST(CAST(127 AS DECIMAL(3, 0)) AS DOUBLE), -CAST(CAST(17014118346046923173168730371588410572 AS DECIMAL(38, 0)) AS DOUBLE), -CAST(CAST(7 AS DECIMAL(9, 1)) AS DOUBLE), CAST(CAST(27 AS DECIMAL(18, 1)) AS DOUBLE), CAST(CAST(33 AS DECIMAL(38, 1)) AS DOUBLE);

PRAGMA enable_verification;

SELECT CAST(CAST(100 AS TINYINT) AS DECIMAL(18, 3)), CAST(CAST(100 AS TINYINT) AS DECIMAL(3, 0)), CAST(CAST((-100) AS TINYINT) AS DECIMAL(3, 0)), CAST(CAST(0 AS TINYINT) AS DECIMAL(3, 3));

SELECT CAST(CAST(100 AS TINYINT) AS DECIMAL(38, 35)), CAST(CAST(100 AS TINYINT) AS DECIMAL(9, 6));

SELECT CAST(CAST(100 AS TINYINT) AS DECIMAL(3, 1));

SELECT CAST(CAST(1 AS TINYINT) AS DECIMAL(3, 3));

SELECT CAST(CAST(100 AS TINYINT) AS DECIMAL(18, 17));

SELECT CAST(CAST(100 AS TINYINT) AS DECIMAL(9, 7));

SELECT CAST(CAST(100 AS TINYINT) AS DECIMAL(38, 37));

SELECT CAST(CAST(100 AS SMALLINT) AS DECIMAL(18, 3)), CAST(CAST(100 AS SMALLINT) AS DECIMAL(3, 0)), CAST(CAST((-100) AS SMALLINT) AS DECIMAL(3, 0)), CAST(CAST(0 AS SMALLINT) AS DECIMAL(3, 3));

SELECT CAST(CAST(100 AS SMALLINT) AS DECIMAL(38, 35)), CAST(CAST(100 AS SMALLINT) AS DECIMAL(9, 6));

SELECT CAST(CAST(100 AS SMALLINT) AS DECIMAL(3, 1));

SELECT CAST(CAST(1 AS SMALLINT) AS DECIMAL(3, 3));

SELECT CAST(CAST(100 AS SMALLINT) AS DECIMAL(18, 17));

SELECT CAST(CAST(100 AS SMALLINT) AS DECIMAL(9, 7));

SELECT CAST(CAST(100 AS SMALLINT) AS DECIMAL(38, 37));

SELECT CAST(CAST(100 AS INT) AS DECIMAL(18, 3)), CAST(CAST(100 AS INT) AS DECIMAL(3, 0)), CAST(CAST((-100) AS INT) AS DECIMAL(3, 0)), CAST(CAST(0 AS INT) AS DECIMAL(3, 3));

SELECT CAST(CAST(100 AS INT) AS DECIMAL(38, 35)), CAST(CAST(100 AS INT) AS DECIMAL(9, 6)), CAST(CAST(2147483647 AS INT) AS DECIMAL(10, 0)), CAST(CAST((-2147483647) AS INT) AS DECIMAL(10, 0));

SELECT CAST(CAST(100 AS INT) AS DECIMAL(3, 1));

SELECT CAST(CAST(10000000 AS INT) AS DECIMAL(3, 1));

SELECT -CAST(CAST(10000000 AS INT) AS DECIMAL(3, 1));

SELECT CAST(CAST(1 AS INT) AS DECIMAL(3, 3));

SELECT CAST(CAST(100 AS INT) AS DECIMAL(18, 17));

SELECT CAST(CAST(100 AS INT) AS DECIMAL(9, 7));

SELECT CAST(CAST(100 AS INT) AS DECIMAL(38, 37));

SELECT CAST(CAST(100 AS BIGINT) AS DECIMAL(18, 3)), CAST(CAST(100 AS BIGINT) AS DECIMAL(3, 0)), CAST(CAST((-100) AS BIGINT) AS DECIMAL(3, 0)), CAST(CAST(0 AS BIGINT) AS DECIMAL(3, 3));

SELECT CAST(CAST(100 AS BIGINT) AS DECIMAL(38, 35)), CAST(CAST(100 AS BIGINT) AS DECIMAL(9, 6)), CAST(CAST(9223372036854775807 AS BIGINT) AS DECIMAL(19, 0)), CAST(CAST((-9223372036854775807) AS BIGINT) AS DECIMAL(19, 0));

SELECT CAST(CAST(922337203685477580 AS BIGINT) AS DECIMAL(18, 0)), CAST(CAST((-922337203685477580) AS BIGINT) AS DECIMAL(18, 0));

SELECT CAST(CAST(100 AS BIGINT) AS DECIMAL(3, 1));

SELECT CAST(CAST(10000000 AS BIGINT) AS DECIMAL(3, 1));

SELECT -CAST(CAST(10000000 AS BIGINT) AS DECIMAL(3, 1));

SELECT CAST(CAST(1 AS BIGINT) AS DECIMAL(3, 3));

SELECT CAST(CAST(100 AS BIGINT) AS DECIMAL(18, 17));

SELECT CAST(CAST(100 AS BIGINT) AS DECIMAL(9, 7));

SELECT CAST(CAST(100 AS BIGINT) AS DECIMAL(38, 37));

SELECT CAST(CAST(100 AS INT128) AS DECIMAL(18, 3)), CAST(CAST(100 AS INT128) AS DECIMAL(3, 0)), CAST(CAST((-100) AS INT128) AS DECIMAL(3, 0)), CAST(CAST(0 AS INT128) AS DECIMAL(3, 3));

SELECT CAST(CAST(100 AS INT128) AS DECIMAL(38, 35)), CAST(CAST(100 AS INT128) AS DECIMAL(9, 6)), CAST(CAST(17014118346046923173168730371588410572 AS INT128) AS DECIMAL(38, 0)), CAST(CAST((-17014118346046923173168730371588410572) AS INT128) AS DECIMAL(38, 0));

SELECT CAST(CAST(100 AS INT128) AS DECIMAL(3, 1));

SELECT CAST(CAST(10000000 AS INT128) AS DECIMAL(3, 1));

SELECT -CAST(CAST(10000000 AS INT128) AS DECIMAL(3, 1));

SELECT CAST(CAST(1 AS INT128) AS DECIMAL(3, 3));

SELECT CAST(CAST(100 AS INT128) AS DECIMAL(18, 17));

SELECT CAST(CAST(100 AS INT128) AS DECIMAL(9, 7));

SELECT CAST(CAST(100 AS INT128) AS DECIMAL(38, 37));

SELECT CAST(CAST(17014118346046923173168730371588410572 AS INT128) AS DECIMAL(38, 1));

SELECT CAST(CAST(17014118346046923173168730371588410572 AS INT128) AS DECIMAL(37, 0));

SELECT CAST(CAST(17014118346046923173168730371588410572 AS INT128) AS DECIMAL(18, 0));

SELECT CAST(CAST(17014118346046923173168730371588410572 AS INT128) AS DECIMAL(9, 0));

SELECT CAST(CAST(17014118346046923173168730371588410572 AS INT128) AS DECIMAL(4, 0));

SELECT CAST(CAST(100 AS REAL) AS DECIMAL(18, 3)), CAST(CAST(100 AS REAL) AS DECIMAL(3, 0)), CAST(CAST((-100) AS REAL) AS DECIMAL(3, 0)), CAST(CAST(0 AS REAL) AS DECIMAL(3, 3));

SELECT CAST(CAST(CAST(100 AS REAL) AS DECIMAL(38, 35)) AS REAL), CAST(CAST(CAST(100 AS REAL) AS DECIMAL(9, 6)) AS REAL), CAST(CAST(CAST(17014118346046923173168730371588410572 AS REAL) AS DECIMAL(38, 0)) AS REAL), CAST(CAST(CAST((-17014118346046923173168730371588410572) AS REAL) AS DECIMAL(38, 0)) AS REAL);

SELECT CAST(CAST(1.25 AS REAL) AS DECIMAL(3, 2));

SELECT CAST(CAST(100 AS REAL) AS DECIMAL(3, 1));

SELECT CAST(CAST(10000000 AS REAL) AS DECIMAL(3, 1));

SELECT -CAST(CAST(10000000 AS REAL) AS DECIMAL(3, 1));

SELECT CAST(CAST(1 AS REAL) AS DECIMAL(3, 3));

SELECT CAST(CAST(100 AS REAL) AS DECIMAL(18, 17));

SELECT CAST(CAST(100 AS REAL) AS DECIMAL(9, 7));

SELECT CAST(CAST(100 AS REAL) AS DECIMAL(38, 37));

SELECT CAST(CAST(17014118346046923173168730371588410572 AS REAL) AS DECIMAL(38, 1));

SELECT CAST(CAST(17014118346046923173168730371588410572 AS REAL) AS DECIMAL(37, 0));

SELECT CAST(CAST(17014118346046923173168730371588410572 AS REAL) AS DECIMAL(18, 0));

SELECT CAST(CAST(17014118346046923173168730371588410572 AS REAL) AS DECIMAL(9, 0));

SELECT CAST(CAST(17014118346046923173168730371588410572 AS REAL) AS DECIMAL(4, 0));

SELECT CAST(CAST(100 AS DOUBLE) AS DECIMAL(18, 3)), CAST(CAST(100 AS DOUBLE) AS DECIMAL(3, 0)), CAST(CAST((-100) AS DOUBLE) AS DECIMAL(3, 0)), CAST(CAST(0 AS DOUBLE) AS DECIMAL(3, 3));

SELECT CAST(CAST(CAST(100 AS DOUBLE) AS DECIMAL(38, 35)) AS DOUBLE), CAST(CAST(CAST(100 AS DOUBLE) AS DECIMAL(9, 6)) AS DOUBLE), CAST(CAST(CAST(17014118346046923173168730371588410572 AS DOUBLE) AS DECIMAL(38, 0)) AS DOUBLE), CAST(CAST(CAST((-17014118346046923173168730371588410572) AS DOUBLE) AS DECIMAL(38, 0)) AS DOUBLE);

SELECT CAST(CAST(1.25 AS DOUBLE) AS DECIMAL(3, 2));

SELECT CAST(CAST(100 AS DOUBLE) AS DECIMAL(3, 1));

SELECT CAST(CAST(10000000 AS DOUBLE) AS DECIMAL(3, 1));

SELECT -CAST(CAST(10000000 AS DOUBLE) AS DECIMAL(3, 1));

SELECT CAST(CAST(1 AS DOUBLE) AS DECIMAL(3, 3));

SELECT CAST(CAST(100 AS DOUBLE) AS DECIMAL(18, 17));

SELECT CAST(CAST(100 AS DOUBLE) AS DECIMAL(9, 7));

SELECT CAST(CAST(100 AS DOUBLE) AS DECIMAL(38, 37));

SELECT CAST(CAST(17014118346046923173168730371588410572 AS DOUBLE) AS DECIMAL(38, 1));

SELECT CAST(CAST(17014118346046923173168730371588410572 AS DOUBLE) AS DECIMAL(37, 0));

SELECT CAST(CAST(17014118346046923173168730371588410572 AS DOUBLE) AS DECIMAL(18, 0));

SELECT CAST(CAST(17014118346046923173168730371588410572 AS DOUBLE) AS DECIMAL(9, 0));

SELECT CAST(CAST(17014118346046923173168730371588410572 AS DOUBLE) AS DECIMAL(4, 0));

PRAGMA enable_verification;

SELECT TYPEOF(FIRST(CAST('0.1' AS DECIMAL(4, 1))));

SELECT FIRST(CAST(NULL AS DECIMAL(18, 3))), CAST(FIRST(CAST('0.1' AS DECIMAL(4, 1))) AS TEXT), CAST(FIRST(CAST('4938245.1' AS DECIMAL(9, 1))) AS TEXT), CAST(FIRST(CAST('45672564564938245.1' AS DECIMAL(18, 1))) AS TEXT), CAST(FIRST(CAST('4567645908450368043562342564564938245.1' AS DECIMAL(38, 1))) AS TEXT);

SELECT MIN(CAST(NULL AS DECIMAL(18, 3))), CAST(MIN(CAST('0.1' AS DECIMAL(4, 1))) AS TEXT), CAST(MIN(CAST('4938245.1' AS DECIMAL(9, 1))) AS TEXT), CAST(MIN(CAST('45672564564938245.1' AS DECIMAL(18, 1))) AS TEXT), CAST(MIN(CAST('4567645908450368043562342564564938245.1' AS DECIMAL(38, 1))) AS TEXT);

SELECT MAX(CAST(NULL AS DECIMAL(18, 3))), CAST(MAX(CAST('0.1' AS DECIMAL(4, 1))) AS TEXT), CAST(MAX(CAST('4938245.1' AS DECIMAL(9, 1))) AS TEXT), CAST(MAX(CAST('45672564564938245.1' AS DECIMAL(18, 1))) AS TEXT), CAST(MAX(CAST('4567645908450368043562342564564938245.1' AS DECIMAL(38, 1))) AS TEXT);

SELECT SUM(CAST(NULL AS DECIMAL(18, 3))), CAST(SUM(CAST('0.1' AS DECIMAL(4, 1))) AS TEXT), CAST(SUM(CAST('4938245.1' AS DECIMAL(9, 1))) AS TEXT), CAST(SUM(CAST('45672564564938245.1' AS DECIMAL(18, 1))) AS TEXT), CAST(SUM(CAST('4567645908450368043562342564564938245.1' AS DECIMAL(38, 1))) AS TEXT);

CREATE TABLE decimals AS SELECT CAST(i AS DECIMAL(4, 1)) AS d1, CAST((i * i) AS DECIMAL(9, 1)) AS d2, CAST((i * i * i) AS DECIMAL(18, 1)) AS d3, CAST((i * i * i * i) AS DECIMAL(38, 1)) AS d4 FROM RANGE(0, 1000) AS tbl(i);

SELECT CAST(SUM(d1) AS TEXT), CAST(SUM(d2) AS TEXT), CAST(SUM(d3) AS TEXT), CAST(SUM(d4) AS TEXT) FROM decimals;

INSERT INTO decimals VALUES ('0.1', '0.1', '0.1', '0.1'), ('0.2', '0.2', '0.2', '0.2');

SELECT CAST(SUM(d1) AS TEXT), CAST(SUM(d2) AS TEXT), CAST(SUM(d3) AS TEXT), CAST(SUM(d4) AS TEXT) FROM decimals;

PRAGMA enable_verification;

SELECT -(CAST('0.1' AS DECIMAL(18, 3))), -(CAST('-0.1' AS DECIMAL(18, 3)));

SELECT (CAST('0.1' AS DECIMAL(18, 3))), (CAST('-0.1' AS DECIMAL(18, 3)));

SELECT CAST('0.1' AS DECIMAL(18, 3)) + CAST('0.1' AS DECIMAL(18, 3));

SELECT CAST('0.1' AS DECIMAL(18, 3)) + CAST(1 AS INT);

SELECT CAST('0.5' AS DECIMAL(4, 4)) + CAST('0.5' AS DECIMAL(4, 4));

SELECT CAST('0.5' AS DECIMAL(1, 1)) + CAST('100.0' AS DECIMAL(3, 0));

SELECT CAST((CAST('0.5' AS DECIMAL(1, 1)) + 10000) AS TEXT), CAST((CAST('0.54321' AS DECIMAL(5, 5)) + 10000) AS TEXT), CAST((CAST('0.5432154321' AS DECIMAL(10, 10)) + 10000) AS TEXT), CAST((CAST('0.543215432154321' AS DECIMAL(15, 15)) + CAST(10000 AS DECIMAL(20, 15))) AS TEXT), CAST((CAST('0.54321543215432154321' AS DECIMAL(20, 20)) + 10000) AS TEXT), CAST((CAST('0.5432154321543215432154321' AS DECIMAL(25, 25)) + 10000) AS TEXT);

SELECT CAST((CAST('0.54321543215432154321543215432154321' AS DECIMAL(35, 35)) + 10000) AS TEXT);

SELECT CAST('0.5' AS DECIMAL(1, 1)) + CAST(1 AS TINYINT), CAST('0.5' AS DECIMAL(1, 1)) + CAST(1 AS SMALLINT), CAST('0.5' AS DECIMAL(1, 1)) + CAST(1 AS INT), CAST('0.5' AS DECIMAL(1, 1)) + CAST(1 AS BIGINT), CAST('0.5' AS DECIMAL(1, 1)) + CAST(1 AS INT128);

SELECT CAST('0.5' AS DECIMAL(1, 1)) + -CAST(1 AS TINYINT), CAST('0.5' AS DECIMAL(1, 1)) + -CAST(1 AS SMALLINT), CAST('0.5' AS DECIMAL(1, 1)) + -CAST(1 AS INT), CAST('0.5' AS DECIMAL(1, 1)) + -CAST(1 AS BIGINT), CAST('0.5' AS DECIMAL(1, 1)) + -CAST(1 AS INT128);

SELECT CAST('0.5' AS DECIMAL(1, 1)) - CAST(1 AS TINYINT), CAST('0.5' AS DECIMAL(1, 1)) - CAST(1 AS SMALLINT), CAST('0.5' AS DECIMAL(1, 1)) - CAST(1 AS INT), CAST('0.5' AS DECIMAL(1, 1)) - CAST(1 AS BIGINT), CAST('0.5' AS DECIMAL(1, 1)) - CAST(1 AS INT128);

SELECT CAST('0.5' AS DECIMAL(1, 1)) - -CAST(1 AS TINYINT), CAST('0.5' AS DECIMAL(1, 1)) - -CAST(1 AS SMALLINT), CAST('0.5' AS DECIMAL(1, 1)) - -CAST(1 AS INT), CAST('0.5' AS DECIMAL(1, 1)) - -CAST(1 AS BIGINT), CAST('0.5' AS DECIMAL(1, 1)) - -CAST(1 AS INT128);

CREATE TABLE decimals (d DECIMAL(3, 2));

INSERT INTO decimals VALUES ('0.1'), ('0.2');

SELECT d + 10000 FROM decimals;

SELECT d + CAST('0.1' AS DECIMAL(18, 3)), d + 10000 FROM decimals;

SELECT CAST('0.1' AS DECIMAL(18, 3)) * CAST('10.0' AS DECIMAL(18, 3));

SELECT TYPEOF(CAST('0.1' AS DECIMAL(2, 1)) * CAST('10.0' AS DECIMAL(3, 1)));

SELECT CAST('0.1' AS DECIMAL(18, 3)) * CAST('0.1' AS DECIMAL(18, 3));

SELECT CAST('0.1' AS DECIMAL(18, 3)) * CAST(10 AS INT);

SELECT CAST('5.0' AS DECIMAL(4, 3)) * CAST('5.0' AS DECIMAL(4, 3));

SELECT CAST('-5.0' AS DECIMAL(4, 3)) * CAST('5.0' AS DECIMAL(4, 3));

SELECT CAST((CAST('18.25' AS DECIMAL(4, 2)) * CAST('17.25' AS DECIMAL(4, 2))) AS TEXT);

SELECT CAST('0.001' AS DECIMAL(18, 3)) * CAST(100 AS TINYINT), CAST('0.001' AS DECIMAL(18, 3)) * CAST(10000 AS SMALLINT), CAST('0.001' AS DECIMAL(18, 3)) * CAST(1000000 AS INT), CAST('0.001' AS DECIMAL(18, 3)) * CAST(100000000 AS BIGINT), CAST('0.001' AS DECIMAL(18, 3)) * CAST(10000000000 AS INT128);

SELECT CAST('0.000000000000000000000000000001' AS DECIMAL(38, 30)) * CAST('0.000000000000000000000000000001' AS DECIMAL(38, 30));

SELECT 2.0 + 1.0, 2.0000 + 1.0000, 2.000000000000 + 1.000000000000, 2.00000000000000000000 + 1.00000000000000000000;

SELECT 2.0 - 1.0, 2.0000 - 1.0000, 2.000000000000 - 1.000000000000, 2.00000000000000000000 - 1.00000000000000000000;

SELECT 2.0 * 1.0, 2.0000 * 1.0000;

PRAGMA enable_verification;

SELECT [1.33, 10.0];

SELECT [0.1, 1.33, 10.0, 9999999.999999999];

SELECT [99999999999999999999999999999999999.9, 9.99999999999999999999999999999999999];

CREATE TABLE foo (my_struct STRUCT(my_double DOUBLE)[]);

PRAGMA enable_verification;

SELECT CAST(CAST(1.0 AS DECIMAL(4, 3)) AS DECIMAL(2, 1)), CAST(CAST(1.0 AS DECIMAL(4, 3)) AS DECIMAL(9, 1)), CAST(CAST(1.0 AS DECIMAL(4, 3)) AS DECIMAL(18, 1)), CAST(CAST(1.0 AS DECIMAL(4, 3)) AS DECIMAL(38, 1));

SELECT CAST(CAST(1.0 AS DECIMAL(9, 8)) AS DECIMAL(2, 1)), CAST(CAST(1.0 AS DECIMAL(9, 8)) AS DECIMAL(9, 1)), CAST(CAST(1.0 AS DECIMAL(9, 8)) AS DECIMAL(18, 1)), CAST(CAST(1.0 AS DECIMAL(9, 8)) AS DECIMAL(38, 1));

SELECT CAST(CAST(1.0 AS DECIMAL(18, 17)) AS DECIMAL(2, 1)), CAST(CAST(1.0 AS DECIMAL(18, 17)) AS DECIMAL(9, 1)), CAST(CAST(1.0 AS DECIMAL(18, 17)) AS DECIMAL(18, 1)), CAST(CAST(1.0 AS DECIMAL(18, 17)) AS DECIMAL(38, 1));

SELECT CAST(CAST(1.0 AS DECIMAL(38, 37)) AS DECIMAL(2, 1)), CAST(CAST(1.0 AS DECIMAL(38, 37)) AS DECIMAL(9, 1)), CAST(CAST(1.0 AS DECIMAL(38, 37)) AS DECIMAL(18, 1)), CAST(CAST(1.0 AS DECIMAL(38, 37)) AS DECIMAL(38, 1));

SELECT CAST(CAST(10.00 AS DECIMAL(4, 2)) AS DECIMAL(4, 3));

SELECT CAST(CAST(10.00 AS DECIMAL(4, 2)) AS DECIMAL(9, 8));

SELECT CAST(CAST(10.00 AS DECIMAL(4, 2)) AS DECIMAL(18, 17));

SELECT CAST(CAST(10.00 AS DECIMAL(4, 2)) AS DECIMAL(38, 37));

SELECT CAST(CAST(10.00 AS DECIMAL(4, 2)) AS DECIMAL(2, 1));

SELECT CAST(CAST(10.00 AS DECIMAL(9, 7)) AS DECIMAL(7, 6));

SELECT CAST(CAST(10.00 AS DECIMAL(18, 16)) AS DECIMAL(16, 15));

SELECT CAST(CAST(10.00 AS DECIMAL(38, 36)) AS DECIMAL(36, 35));

SELECT CAST(CAST(1.0 AS DECIMAL(3, 1)) AS DECIMAL(18, 2)), CAST(CAST(1.0 AS DECIMAL(3, 1)) AS DECIMAL(38, 2));

SELECT CAST(CAST(1.0 AS DECIMAL(3, 1)) AS DECIMAL(2, 1)), CAST(CAST(1.0 AS DECIMAL(3, 1)) AS DECIMAL(9, 1)), CAST(CAST(1.0 AS DECIMAL(3, 1)) AS DECIMAL(18, 1)), CAST(CAST(1.0 AS DECIMAL(3, 1)) AS DECIMAL(38, 1));

SELECT CAST(CAST(1.0 AS DECIMAL(9, 1)) AS DECIMAL(2, 1)), CAST(CAST(1.0 AS DECIMAL(9, 1)) AS DECIMAL(8, 1)), CAST(CAST(1.0 AS DECIMAL(9, 1)) AS DECIMAL(18, 1)), CAST(CAST(1.0 AS DECIMAL(9, 1)) AS DECIMAL(38, 1));

SELECT CAST(CAST(1.0 AS DECIMAL(18, 1)) AS DECIMAL(2, 1)), CAST(CAST(1.0 AS DECIMAL(18, 1)) AS DECIMAL(8, 1)), CAST(CAST(1.0 AS DECIMAL(18, 1)) AS DECIMAL(17, 1)), CAST(CAST(1.0 AS DECIMAL(18, 1)) AS DECIMAL(38, 1));

SELECT CAST(CAST(1.0 AS DECIMAL(38, 1)) AS DECIMAL(2, 1)), CAST(CAST(1.0 AS DECIMAL(38, 1)) AS DECIMAL(8, 1)), CAST(CAST(1.0 AS DECIMAL(38, 1)) AS DECIMAL(17, 1)), CAST(CAST(1.0 AS DECIMAL(38, 1)) AS DECIMAL(37, 1));

SELECT CAST(CAST(1.0 AS DECIMAL(3, 1)) AS DECIMAL(1, 1));

SELECT CAST(CAST(1.0 AS DECIMAL(9, 1)) AS DECIMAL(1, 1));

SELECT CAST(CAST(1.0 AS DECIMAL(18, 1)) AS DECIMAL(1, 1));

SELECT CAST(CAST(1.0 AS DECIMAL(38, 1)) AS DECIMAL(1, 1));

PRAGMA enable_verification;

SELECT CAST('9.99' AS DECIMAL(1, 0));

SELECT CAST(CAST(9.99 AS REAL) AS DECIMAL(1, 0));

SELECT CAST(CAST(9.99 AS DOUBLE) AS DECIMAL(1, 0));

SELECT CAST(9.99 AS DECIMAL(1, 0));

SELECT CAST(9.49 AS DECIMAL(1, 0));

SELECT CAST(9.5 AS DECIMAL(1, 0));

SELECT CAST(-9.99 AS DECIMAL(1, 0));

SELECT CAST(-9.5 AS DECIMAL(1, 0));

SELECT CAST(-9.01 AS DECIMAL(1, 0));

SELECT CAST(-9.999999999 AS DECIMAL(1, 0));

SELECT CAST(9.9999999999999999999999999999999 AS DECIMAL(1, 0));

SELECT CAST(-9.9999999999999999999999999999999 AS DECIMAL(1, 0));

PRAGMA enable_verification;

SELECT CAST('1e3' AS DECIMAL(18, 3)), CAST('1e-1' AS DECIMAL(18, 3)), CAST('.1e3' AS DECIMAL(18, 3)), CAST('0.1e3' AS DECIMAL(18, 3));

SELECT CAST('-1e3' AS DECIMAL(18, 3)), CAST('-0.1e3' AS DECIMAL(18, 3)), CAST('-.1e-1' AS DECIMAL(18, 3)), CAST('-0.1e-1' AS DECIMAL(18, 3));

SELECT CAST('0e1' AS DECIMAL(18, 3)), CAST('-0e1' AS DECIMAL(18, 3)), CAST('00000e1' AS DECIMAL(18, 3)), CAST('-00000e1' AS DECIMAL(18, 3));

SELECT CAST('1e-100' AS DECIMAL(18, 3));

SELECT CAST('1e-9999' AS DECIMAL(18, 3));

SELECT CAST('1E3' AS DECIMAL(4, 0));

SELECT CAST('1e8' AS DECIMAL(9, 0));

SELECT CAST('1e17' AS DECIMAL(18, 0));

SELECT CAST('1e37' AS DECIMAL(38, 0));

SELECT CAST('1e4' AS DECIMAL(4, 0));

SELECT CAST('1e9' AS DECIMAL(9, 0));

SELECT CAST('1e18' AS DECIMAL(18, 0));

SELECT CAST('1e38' AS DECIMAL(38, 0));

SELECT CAST('1e100' AS DECIMAL(18, 3));

SELECT CAST('1e100e100' AS DECIMAL(18, 3));

SELECT CAST('1e100.2' AS DECIMAL(18, 3));

SELECT CAST('1e9999999999' AS DECIMAL(18, 3));

SELECT CAST('1e-9999999999' AS DECIMAL(18, 3));

SELECT CAST('1e-99999999999999999999999999999999' AS DECIMAL(18, 3));

SELECT CAST('.1f3' AS DECIMAL(18, 3));

SELECT CAST('1f3' AS DECIMAL(18, 3));

PRAGMA enable_verification;

SELECT (CAST(99000000000000000.0 AS DECIMAL(18, 1)) + CAST(99000000000000000.0 AS DECIMAL(18, 1)));

SELECT CAST(CAST((CAST(99000000000000000.0 AS DECIMAL(18, 1)) + CAST(99000000000000000.0 AS DECIMAL(18, 1))) AS TEXT) AS DECIMAL(18, 1));

SELECT (CAST(50000000000000000.0 AS DECIMAL(18, 1)) + CAST(50000000000000000.0 AS DECIMAL(18, 1)));

SELECT (-CAST(99000000000000000.0 AS DECIMAL(18, 1)) - CAST(99000000000000000.0 AS DECIMAL(18, 1)));

SELECT (-CAST(50000000000000000.0 AS DECIMAL(18, 1)) - CAST(50000000000000000.0 AS DECIMAL(18, 1)));

SELECT (CAST(9900000000000000000000000000000000000.0 AS DECIMAL(38, 1)) + CAST(9900000000000000000000000000000000000.0 AS DECIMAL(38, 1)));

SELECT (CAST(5000000000000000000000000000000000000.0 AS DECIMAL(38, 1)) + CAST(5000000000000000000000000000000000000.0 AS DECIMAL(38, 1)));

SELECT CAST('10000000000000000000000000000000000000.0' AS DECIMAL(38, 1));

SELECT (-CAST(5000000000000000000000000000000000000.0 AS DECIMAL(38, 1)) - CAST(5000000000000000000000000000000000000.0 AS DECIMAL(38, 1)));

SELECT CAST(90000000000000000.0 AS DECIMAL(18, 1)) * CAST(10 AS DECIMAL(2, 0));

SELECT CAST(90000000000000000.0 AS DECIMAL(18, 1)) * CAST(1000 AS DECIMAL(4, 0));

SELECT CAST(5000000000000000000000000000000000000.0 AS DECIMAL(38, 1)) * CAST(2 AS DECIMAL(1, 0));

SELECT CAST(9900000000000000000000000000000000000.0 AS DECIMAL(38, 1)) * 1.0;

PRAGMA enable_verification;

CREATE TABLE decimals (d DECIMAL(18, 1));

INSERT INTO decimals VALUES (99000000000000000.0);

SELECT d + 1 FROM decimals;

SELECT d + 1000000000000000.0 FROM decimals;

SELECT -1 - d FROM decimals;

SELECT -1000000000000000.0 - d FROM decimals;

SELECT 1 * d FROM decimals;

SELECT 2 * d FROM decimals;

PRAGMA enable_verification;

SELECT CAST(1000 AS DECIMAL(3, 0));

SELECT CAST(100 AS DECIMAL(2, 0));

SELECT CAST('100' AS DECIMAL(2, 0));

SELECT CAST(CAST('100' AS DOUBLE) AS DECIMAL(2, 0));

SELECT CAST(CAST(100 AS DECIMAL(3, 0)) AS DECIMAL(2, 0));

SELECT CAST(CAST(10000 AS DECIMAL(5, 0)) AS DECIMAL(2, 0));

SELECT CAST(CAST(1000000000 AS DECIMAL(10, 0)) AS DECIMAL(2, 0));

SELECT CAST(CAST(1000000000 AS DECIMAL(20, 0)) AS DECIMAL(2, 0));

SELECT TRY_CAST(1000 AS DECIMAL(3, 0));

SELECT TRY_CAST(100 AS DECIMAL(2, 0));

SELECT TRY_CAST('100' AS DECIMAL(2, 0));

SELECT TRY_CAST(CAST('100' AS DOUBLE) AS DECIMAL(2, 0));

SELECT TRY_CAST(CAST(100 AS DECIMAL(3, 0)) AS DECIMAL(2, 0));

SELECT TRY_CAST(CAST(10000 AS DECIMAL(5, 0)) AS DECIMAL(2, 0));

SELECT TRY_CAST(CAST(1000000000 AS DECIMAL(10, 0)) AS DECIMAL(2, 0));

SELECT TRY_CAST(CAST(1000000000 AS DECIMAL(20, 0)) AS DECIMAL(2, 0));

SELECT CAST(1000000 AS DECIMAL(5, 0));

SELECT CAST('100000' AS DECIMAL(5, 0));

SELECT CAST(CAST('100000' AS DOUBLE) AS DECIMAL(5, 0));

SELECT CAST(CAST(100000 AS DECIMAL(6, 0)) AS DECIMAL(5, 0));

SELECT CAST(CAST(1000000000 AS DECIMAL(10, 0)) AS DECIMAL(2, 0));

SELECT CAST(CAST(1000000000 AS DECIMAL(20, 0)) AS DECIMAL(5, 0));

SELECT TRY_CAST(1000000 AS DECIMAL(5, 0));

SELECT TRY_CAST('100000' AS DECIMAL(5, 0));

SELECT TRY_CAST(CAST('100000' AS DOUBLE) AS DECIMAL(5, 0));

SELECT TRY_CAST(CAST(100000 AS DECIMAL(6, 0)) AS DECIMAL(5, 0));

SELECT TRY_CAST(CAST(1000000000 AS DECIMAL(10, 0)) AS DECIMAL(2, 0));

SELECT TRY_CAST(CAST(1000000000 AS DECIMAL(20, 0)) AS DECIMAL(5, 0));

SELECT CAST(10000000000 AS DECIMAL(10, 0));

SELECT CAST('10000000000' AS DECIMAL(10, 0));

SELECT CAST(CAST('10000000000' AS DOUBLE) AS DECIMAL(10, 0));

SELECT CAST(CAST(10000000000 AS DECIMAL(11, 0)) AS DECIMAL(10, 0));

SELECT CAST(CAST(10000000000 AS DECIMAL(20, 0)) AS DECIMAL(10, 0));

SELECT TRY_CAST(10000000000 AS DECIMAL(10, 0));

SELECT TRY_CAST('10000000000' AS DECIMAL(10, 0));

SELECT TRY_CAST(CAST('10000000000' AS DOUBLE) AS DECIMAL(10, 0));

SELECT TRY_CAST(CAST(10000000000 AS DECIMAL(11, 0)) AS DECIMAL(10, 0));

SELECT TRY_CAST(CAST(10000000000 AS DECIMAL(20, 0)) AS DECIMAL(10, 0));

SELECT CAST(100000000000000000000 AS DECIMAL(20, 0));

SELECT CAST('100000000000000000000' AS DECIMAL(20, 0));

SELECT CAST(CAST('100000000000000000000' AS DOUBLE) AS DECIMAL(20, 0));

SELECT CAST(CAST(100000000000000000000 AS DECIMAL(20, 0)) AS DECIMAL(20, 0));

SELECT TRY_CAST(100000000000000000000 AS DECIMAL(20, 0));

SELECT TRY_CAST('100000000000000000000' AS DECIMAL(20, 0));

SELECT TRY_CAST(CAST('100000000000000000000' AS DOUBLE) AS DECIMAL(20, 0));

SELECT TRY_CAST(CAST(100000000000000000000 AS DECIMAL(25, 0)) AS DECIMAL(20, 0));

SELECT 42.1, -10239814.1, 1049185157.12345, 102398294123451814.12345, -49238409238403918140294812084.12490812490;

SELECT TYPEOF(42.1), TYPEOF(-10239814.1), TYPEOF(1049185157.12345), TYPEOF(102398294123451814.12345), TYPEOF(-49238409238403918140294812084.12490812490);

SELECT 42., 42e3, 4.23e1, 10e20, 0.34, -2.3;

SELECT TYPEOF(42.), TYPEOF(42e3), TYPEOF(4.23e1), TYPEOF(10e20), TYPEOF(0.34), TYPEOF(-2.3), TYPEOF(10e100);

PRAGMA enable_verification;

SELECT TYPEOF(CAST('0.1' AS DECIMAL(18, 3)));

SELECT CAST(CAST('0.1' AS DECIMAL(18, 3)) AS TEXT), CAST(CAST('922337203685478.758' AS DECIMAL(18, 3)) AS TEXT);

SELECT CAST(CAST('-0.1' AS DECIMAL(18, 3)) AS TEXT), CAST(CAST('-922337203685478.758' AS DECIMAL(18, 3)) AS TEXT);

SELECT CAST(CAST('   7   ' AS DECIMAL(18, 3)) AS TEXT), CAST(CAST('9.' AS DECIMAL(18, 3)) AS TEXT), CAST(CAST('.1' AS DECIMAL(18, 3)) AS TEXT);

SELECT CAST(CAST('0.123456789' AS DECIMAL(18, 3)) AS TEXT), CAST(CAST('-0.123456789' AS DECIMAL(18, 3)) AS TEXT);

SELECT CAST('9223372036854788.758' AS DECIMAL(18, 3));

SELECT CAST(CAST('0.1' AS DECIMAL(3, 0)) AS TEXT);

SELECT CAST(CAST('123.4' AS DECIMAL(9)) AS TEXT);

SELECT CAST(CAST('0.1' AS DECIMAL(3, 3)) AS TEXT), CAST(CAST('-0.1' AS DECIMAL(3, 3)) AS TEXT);

SELECT CAST(CAST('1' AS DECIMAL(3, 3)) AS TEXT);

SELECT CAST(CAST('-1' AS DECIMAL(3, 3)) AS TEXT);

SELECT CAST(CAST(CAST('0.1' AS DECIMAL(18, 3)) AS DECIMAL(18, 3)) AS DECIMAL(18, 3));

SELECT CAST(CAST('123.4' AS DECIMAL(4, 1)) AS TEXT);

SELECT CAST(CAST('2.001' AS DECIMAL(4, 3)) AS TEXT);

SELECT CAST(CAST('123456.789' AS DECIMAL(9, 3)) AS TEXT);

SELECT CAST(CAST('123456789' AS DECIMAL(9, 0)) AS TEXT);

SELECT CAST(CAST('123456789' AS DECIMAL(18, 3)) AS TEXT);

SELECT CAST(CAST('1701411834604692317316873037.1588410572' AS DECIMAL(38, 10)) AS TEXT);

SELECT CAST(CAST('0' AS DECIMAL(38, 10)) AS TEXT);

SELECT CAST(CAST('0.00003' AS DECIMAL(38, 10)) AS TEXT);

SELECT CAST(33.846 AS DECIMAL(5, 0)) AS d0;

SELECT CAST(-33.846 AS DECIMAL(5, 0)) AS d0;

SELECT CAST(1234567890.1235 AS DECIMAL(13, 3));

SELECT CAST('0.1' AS DECIMAL(3, 4));

SELECT CAST('0.1' AS DECIMAL('hello'));

SELECT CAST('0.1' AS DECIMAL('hello'));

SELECT CAST('0.1' AS DECIMAL(1000));

SELECT CAST('0.1' AS DECIMAL(1, 2, 3));

SELECT CAST('1' AS INT(1000));

PRAGMA enable_verification;

CREATE TABLE decimals (i DECIMAL(38, 1));

CREATE TABLE decimals2 (i DECIMAL(38, 1));

INSERT INTO decimals VALUES (4642275147320176030871715840);

INSERT INTO decimals2 VALUES (4642275147320176030871715840);

SELECT COUNT(*) FROM decimals INNER JOIN decimals2 ON (decimals.i = decimals2.i);

PRAGMA enable_verification;

CREATE TABLE q (big DECIMAL(38, 10));

INSERT INTO q (big) VALUES (9999999999999999899999999999.9999999999);

INSERT INTO q (big) VALUES (-9999999999999999899999999999.9999999999);

SELECT * FROM q;

PRAGMA enable_verification;

CREATE TABLE from_values AS VALUES (1000000), (10.0000000005);

SELECT * FROM from_values;

CREATE TABLE from_list AS SELECT [1000000, 10.0000000005];

SELECT * FROM from_list;

SELECT CAST('+1e-1' AS DECIMAL(38, 3));

SELECT CAST('+1234.56789e-1' AS DECIMAL(38, 0));

SELECT CAST('+1234.56789e-1' AS DECIMAL(38, 5));

SELECT CAST(1234.56789e-1 AS DECIMAL(38, 5));

SELECT CAST(1234.56789e-1 AS DECIMAL(38, 5));

SELECT CAST('9.99' AS DECIMAL(1, 0));

PRAGMA enable_verification;

CREATE TABLE decimals (d DECIMAL(3, 2));

INSERT INTO decimals VALUES ('0.1'), ('0.2');

SELECT * FROM decimals;

SELECT * FROM decimals ORDER BY d DESC;

SELECT * FROM decimals WHERE d = CAST('0.1' AS DECIMAL(3, 2));

SELECT * FROM decimals WHERE d >= CAST('0.1' AS DECIMAL(3, 2));

SELECT * FROM decimals WHERE d = CAST('0.1' AS DECIMAL(9, 5));

SELECT * FROM decimals WHERE d >= CAST('0.1' AS DECIMAL(9, 5)) ORDER BY 1;

INSERT INTO decimals VALUES ('0.11'), ('0.21');

SELECT * FROM decimals WHERE d = CAST('0.1' AS DECIMAL(9, 1));

SELECT * FROM decimals WHERE d > CAST('0.1' AS DECIMAL(9, 1)) ORDER BY 1;

DELETE FROM decimals WHERE d <> CAST(d AS DECIMAL(9, 1));

SELECT ABS(CAST('-0.1' AS DECIMAL(18, 3))), ABS(CAST('0.1' AS DECIMAL(18, 3))), ABS(CAST(NULL AS DECIMAL(18, 3)));

SELECT ABS(CAST('-0.1' AS DECIMAL(4, 3))), ABS(CAST('-0.1' AS DECIMAL(9, 3))), ABS(CAST('-0.1' AS DECIMAL(18, 3))), ABS(CAST('-0.1' AS DECIMAL(38, 3)));

SELECT CEIL(CAST('0.0' AS DECIMAL(18, 3))), CEIL(CAST('0.1' AS DECIMAL(18, 3))), CEIL(CAST('-0.1' AS DECIMAL(18, 3))), CEIL(CAST(NULL AS DECIMAL(18, 3)));

SELECT CEIL(CAST('100.3' AS DECIMAL(18, 3))), CEIL(CAST('-127012.3' AS DECIMAL(18, 3)));

SELECT CEIL(CAST('10.5' AS DECIMAL(18, 3))), CEIL(CAST('-10.5' AS DECIMAL(18, 3)));

SELECT CEIL(CAST('999.9' AS DECIMAL(4, 1))), CEIL(CAST('99999999.9' AS DECIMAL(9, 1))), CEIL(CAST('99999999999999999.9' AS DECIMAL(18, 1))), CEIL(CAST('9999999999999999999999999999999999999.9' AS DECIMAL(38, 1)));

SELECT CEIL(CAST('-999.9' AS DECIMAL(4, 1))), CEIL(CAST('-99999999.9' AS DECIMAL(9, 1))), CEIL(CAST('-99999999999999999.9' AS DECIMAL(18, 1))), CEIL(CAST('-9999999999999999999999999999999999999.9' AS DECIMAL(38, 1)));

SELECT FLOOR(CAST('0.1' AS DECIMAL(18, 3))), FLOOR(CAST('-0.1' AS DECIMAL(18, 3))), FLOOR(CAST(NULL AS DECIMAL(18, 3)));

SELECT FLOOR(CAST('100.3' AS DECIMAL(18, 3))), FLOOR(CAST('-127012.3' AS DECIMAL(18, 3)));

SELECT FLOOR(CAST('10.5' AS DECIMAL(18, 3))), FLOOR(CAST('-10.5' AS DECIMAL(18, 3)));

SELECT FLOOR(CAST('999.9' AS DECIMAL(4, 1))), FLOOR(CAST('99999999.9' AS DECIMAL(9, 1))), FLOOR(CAST('99999999999999999.9' AS DECIMAL(18, 1))), FLOOR(CAST('9999999999999999999999999999999999999.9' AS DECIMAL(38, 1)));

SELECT FLOOR(CAST('-999.9' AS DECIMAL(4, 1))), FLOOR(CAST('-99999999.9' AS DECIMAL(9, 1))), FLOOR(CAST('-99999999999999999.9' AS DECIMAL(18, 1))), FLOOR(CAST('-9999999999999999999999999999999999999.9' AS DECIMAL(38, 1)));

SELECT ROUND(CAST('0.1' AS DECIMAL(18, 3))), ROUND(CAST('-0.1' AS DECIMAL(18, 3))), ROUND(CAST(NULL AS DECIMAL(18, 3)));

SELECT ROUND(CAST('100.3' AS DECIMAL(18, 3))), ROUND(CAST('-127012.3' AS DECIMAL(18, 3)));

SELECT ROUND(CAST('10.5' AS DECIMAL(18, 3))), ROUND(CAST('-10.5' AS DECIMAL(18, 3)));

SELECT ROUND(CAST('999.9' AS DECIMAL(4, 1))), ROUND(CAST('99999999.9' AS DECIMAL(9, 1))), ROUND(CAST('99999999999999999.9' AS DECIMAL(18, 1))), ROUND(CAST('9999999999999999999999999999999999999.9' AS DECIMAL(38, 1)));

SELECT ROUND(CAST('-999.9' AS DECIMAL(4, 1))), ROUND(CAST('-99999999.9' AS DECIMAL(9, 1))), ROUND(CAST('-99999999999999999.9' AS DECIMAL(18, 1))), ROUND(CAST('-9999999999999999999999999999999999999.9' AS DECIMAL(38, 1)));

SELECT CAST(ROUND(CAST('100.3908147521' AS DECIMAL(18, 10)), 0) AS TEXT), CAST(ROUND(CAST('100.3908147521' AS DECIMAL(18, 10)), 1) AS TEXT), CAST(ROUND(CAST('100.3908147521' AS DECIMAL(18, 10)), 2) AS TEXT), CAST(ROUND(CAST('100.3908147521' AS DECIMAL(18, 10)), 3) AS TEXT), CAST(ROUND(CAST('100.3908147521' AS DECIMAL(18, 10)), 4) AS TEXT), CAST(ROUND(CAST('100.3908147521' AS DECIMAL(18, 10)), 5) AS TEXT), CAST(ROUND(CAST('100.3908147521' AS DECIMAL(18, 10)), 6) AS TEXT), CAST(ROUND(CAST('100.3908147521' AS DECIMAL(18, 10)), 7) AS TEXT), CAST(ROUND(CAST('100.3908147521' AS DECIMAL(18, 10)), 8) AS TEXT), CAST(ROUND(CAST('100.3908147521' AS DECIMAL(18, 10)), 9) AS TEXT), CAST(ROUND(CAST('100.3908147521' AS DECIMAL(18, 10)), 10) AS TEXT), CAST(ROUND(CAST('100.3908147521' AS DECIMAL(18, 10)), 100000) AS TEXT), ROUND(CAST(NULL AS DECIMAL(18, 3)), 0);

SELECT CAST(ROUND(CAST('1049578239572094512.32415' AS DECIMAL(30, 10)), 0) AS TEXT), CAST(ROUND(CAST('1049578239572094512.32415' AS DECIMAL(30, 10)), -1) AS TEXT), CAST(ROUND(CAST('1049578239572094512.32415' AS DECIMAL(30, 10)), -2) AS TEXT), CAST(ROUND(CAST('1049578239572094512.32415' AS DECIMAL(30, 10)), -3) AS TEXT), CAST(ROUND(CAST('1049578239572094512.32415' AS DECIMAL(30, 10)), -4) AS TEXT), CAST(ROUND(CAST('1049578239572094512.32415' AS DECIMAL(30, 10)), -5) AS TEXT), CAST(ROUND(CAST('1049578239572094512.32415' AS DECIMAL(30, 10)), -6) AS TEXT), CAST(ROUND(CAST('1049578239572094512.32415' AS DECIMAL(30, 10)), -7) AS TEXT), CAST(ROUND(CAST('1049578239572094512.32415' AS DECIMAL(30, 10)), -8) AS TEXT), CAST(ROUND(CAST('1049578239572094512.32415' AS DECIMAL(30, 10)), -9) AS TEXT), CAST(ROUND(CAST('1049578239572094512.32415' AS DECIMAL(30, 10)), -10) AS TEXT), CAST(ROUND(CAST('1049578239572094512.32415' AS DECIMAL(30, 10)), -11) AS TEXT), CAST(ROUND(CAST('1049578239572094512.32415' AS DECIMAL(30, 10)), -12) AS TEXT), CAST(ROUND(CAST('1049578239572094512.32415' AS DECIMAL(30, 10)), -13) AS TEXT), CAST(ROUND(CAST('1049578239572094512.32415' AS DECIMAL(30, 10)), -14) AS TEXT), CAST(ROUND(CAST('1049578239572094512.32415' AS DECIMAL(30, 10)), -15) AS TEXT), CAST(ROUND(CAST('1049578239572094512.32415' AS DECIMAL(30, 10)), -16) AS TEXT), CAST(ROUND(CAST('1049578239572094512.32415' AS DECIMAL(30, 10)), -18) AS TEXT), CAST(ROUND(CAST('1049578239572094512.32415' AS DECIMAL(30, 10)), -19) AS TEXT), CAST(ROUND(CAST('1049578239572094512.32415' AS DECIMAL(30, 10)), -20) AS TEXT), CAST(ROUND(CAST('1049578239572094512.32415' AS DECIMAL(30, 10)), -19842) AS TEXT);

SELECT CAST(ROUND(CAST('-100.3908147521' AS DECIMAL(18, 10)), 0) AS TEXT), CAST(ROUND(CAST('-100.3908147521' AS DECIMAL(18, 10)), 1) AS TEXT), CAST(ROUND(CAST('-100.3908147521' AS DECIMAL(18, 10)), 2) AS TEXT), CAST(ROUND(CAST('-100.3908147521' AS DECIMAL(18, 10)), 3) AS TEXT), CAST(ROUND(CAST('-100.3908147521' AS DECIMAL(18, 10)), 4) AS TEXT), CAST(ROUND(CAST('-100.3908147521' AS DECIMAL(18, 10)), 5) AS TEXT), CAST(ROUND(CAST('-100.3908147521' AS DECIMAL(18, 10)), 6) AS TEXT), CAST(ROUND(CAST('-100.3908147521' AS DECIMAL(18, 10)), 7) AS TEXT), CAST(ROUND(CAST('-100.3908147521' AS DECIMAL(18, 10)), 8) AS TEXT), CAST(ROUND(CAST('-100.3908147521' AS DECIMAL(18, 10)), 9) AS TEXT), CAST(ROUND(CAST('-100.3908147521' AS DECIMAL(18, 10)), 10) AS TEXT), CAST(ROUND(CAST('-100.3908147521' AS DECIMAL(18, 10)), 100000) AS TEXT), ROUND(CAST(NULL AS DECIMAL(18, 3)), 0);

SELECT CAST(ROUND(CAST('-1049578239572094512.32415' AS DECIMAL(30, 10)), 0) AS TEXT), CAST(ROUND(CAST('-1049578239572094512.32415' AS DECIMAL(30, 10)), -1) AS TEXT), CAST(ROUND(CAST('-1049578239572094512.32415' AS DECIMAL(30, 10)), -2) AS TEXT), CAST(ROUND(CAST('-1049578239572094512.32415' AS DECIMAL(30, 10)), -3) AS TEXT), CAST(ROUND(CAST('-1049578239572094512.32415' AS DECIMAL(30, 10)), -4) AS TEXT), CAST(ROUND(CAST('-1049578239572094512.32415' AS DECIMAL(30, 10)), -5) AS TEXT), CAST(ROUND(CAST('-1049578239572094512.32415' AS DECIMAL(30, 10)), -6) AS TEXT), CAST(ROUND(CAST('-1049578239572094512.32415' AS DECIMAL(30, 10)), -7) AS TEXT), CAST(ROUND(CAST('-1049578239572094512.32415' AS DECIMAL(30, 10)), -8) AS TEXT), CAST(ROUND(CAST('-1049578239572094512.32415' AS DECIMAL(30, 10)), -9) AS TEXT), CAST(ROUND(CAST('-1049578239572094512.32415' AS DECIMAL(30, 10)), -10) AS TEXT), CAST(ROUND(CAST('-1049578239572094512.32415' AS DECIMAL(30, 10)), -11) AS TEXT), CAST(ROUND(CAST('-1049578239572094512.32415' AS DECIMAL(30, 10)), -12) AS TEXT), CAST(ROUND(CAST('-1049578239572094512.32415' AS DECIMAL(30, 10)), -13) AS TEXT), CAST(ROUND(CAST('-1049578239572094512.32415' AS DECIMAL(30, 10)), -14) AS TEXT), CAST(ROUND(CAST('-1049578239572094512.32415' AS DECIMAL(30, 10)), -15) AS TEXT), CAST(ROUND(CAST('-1049578239572094512.32415' AS DECIMAL(30, 10)), -16) AS TEXT), CAST(ROUND(CAST('-1049578239572094512.32415' AS DECIMAL(30, 10)), -18) AS TEXT), CAST(ROUND(CAST('-1049578239572094512.32415' AS DECIMAL(30, 10)), -19) AS TEXT), CAST(ROUND(CAST('-1049578239572094512.32415' AS DECIMAL(30, 10)), -20) AS TEXT), CAST(ROUND(CAST('-1049578239572094512.32415' AS DECIMAL(30, 10)), -19842) AS TEXT);

SELECT ROUND(CAST(12 AS DECIMAL(3, 0)));

SELECT ROUND(CAST(12 AS DECIMAL(3, 0)), i) FROM RANGE(0, 1) AS tbl(i);

SELECT ROUND(CAST(12 AS DECIMAL(3, 0)), NULL);

SELECT CAST(ROUND(CAST('-100.3' AS DECIMAL(4, 1)), 1) AS TEXT), CAST(ROUND(CAST('104.3' AS DECIMAL(4, 1)), 0) AS TEXT), CAST(ROUND(CAST('104.3' AS DECIMAL(4, 1)), -1) AS TEXT);

SELECT CAST(ROUND(CAST('-100.3' AS DECIMAL(9, 1)), 1) AS TEXT), CAST(ROUND(CAST('104.3' AS DECIMAL(9, 1)), 0) AS TEXT), CAST(ROUND(CAST('104.3' AS DECIMAL(9, 1)), -1) AS TEXT);

SELECT CAST(ROUND(CAST('-100.3' AS DECIMAL(18, 1)), 1) AS TEXT), CAST(ROUND(CAST('104.3' AS DECIMAL(18, 1)), 0) AS TEXT), CAST(ROUND(CAST('104.3' AS DECIMAL(18, 1)), -1) AS TEXT);

SELECT PRINTF('%.2f', CAST('0.12345' AS DECIMAL(30, 10)));

SELECT (SELECT CAST('1.0' AS DECIMAL(2, 1)));

SELECT ROUND(CAST(CAST('-100.3' AS DECIMAL(18, 1)) AS REAL), 1);

PRAGMA enable_verification;

SELECT CAST('1.023450000001' AS DECIMAL(5, 4));

SELECT CAST('1.234499999' AS DECIMAL(4, 3));

SELECT CAST('1.23499999' AS DECIMAL(4, 3));

SELECT CAST('1.234499999' AS DECIMAL(5, 4));

SELECT CAST('-1.023450000001' AS DECIMAL(5, 4));

SELECT CAST('-1.234499999' AS DECIMAL(4, 3));

SELECT CAST('-1.23499999' AS DECIMAL(4, 3));

SELECT CAST('-1.234499999' AS DECIMAL(5, 4));

PRAGMA enable_verification;

PRAGMA enable_verification;

INSERT INTO decs VALUES (0176030871715840, 2.2);

SELECT * FROM decs;

SELECT * FROM decs;

PRAGMA enable_verification;

PRAGMA enable_verification;

INSERT INTO decimals VALUES (0176030871715840, 2.2);

SELECT * FROM decimals;

SELECT * FROM decimals;

PRAGMA enable_verification;

SELECT CAST('hello' AS ENUM('world', 'hello'));

CREATE TABLE test AS SELECT CAST('hello' AS ENUM('world', 'hello')) AS h;

SELECT * FROM test;

SELECT CAST('hello' AS ENUM);

SELECT CAST('hello' AS ENUM(42));

SELECT CAST('hello' AS ENUM('zzz', 42));

PRAGMA enable_verification;

CREATE TYPE mood AS ENUM ('sad', 'ok', 'happy');

CREATE TYPE mood_2 AS ENUM ('1', '2', '3');

CREATE TABLE m (m mood);

CREATE TABLE m_2 (m mood_2);

INSERT INTO m_2 VALUES ('1');

INSERT INTO m SELECT * FROM m_2;

PRAGMA enable_verification;

CREATE TYPE mood AS ENUM ('sad', 'ok', 'happy');

CREATE TYPE mood_2 AS ENUM ('very sad', 'very ok', 'very happy');

CREATE TABLE m (m mood, m_2 mood_2);

INSERT INTO m VALUES ('sad', 'very sad');

SELECT * FROM m WHERE m = CAST('' AS TEXT);

SELECT m = '' FROM m;

PREPARE v1 AS SELECT m=? FROM m;

EXECUTE v1('');

SELECT * FROM m WHERE m = m_2;

SELECT * FROM m WHERE CAST(m AS mood_2) = m_2;

CALL DBGEN(sf=0.01);

create type orderkey_enum as enum (Select (l_orderkey/4)::VARCHAR from lineitem);

CREATE TABLE t2 (c1 orderkey_enum);

INSERT INTO t2 (SELECT CAST((l_orderkey / 4) AS TEXT) FROM lineitem);

CREATE TYPE l_comment_enum as ENUM(select l_comment from lineitem);

PRAGMA enable_verification;

CREATE TYPE mood AS ENUM ('sad', 'ok', 'happy');

CREATE TABLE a (a TEXT, b mood);

INSERT INTO a VALUES (NULL, 'happy');

INSERT INTO a VALUES ('woof', NULL);

INSERT INTO a VALUES (NULL, NULL);

INSERT INTO a VALUES ('quack', 'ok');

INSERT INTO a VALUES ('moo', 'sad');

SELECT COALESCE(a, b) FROM a;

CREATE TYPE onomatopoeia AS ENUM ('woof', 'quack', 'moo');

CREATE TABLE b (a onomatopoeia, b mood);

INSERT INTO b VALUES (NULL, 'happy');

INSERT INTO b VALUES ('woof', NULL);

INSERT INTO b VALUES (NULL, NULL);

INSERT INTO b VALUES ('quack', 'ok');

INSERT INTO b VALUES ('moo', 'sad');

SELECT COALESCE(a, b) FROM b;

SELECT * FROM a WHERE b IN ('sad', 'woof', NULL);

PRAGMA enable_verification;

CREATE TABLE person (name TEXT);

INSERT INTO person VALUES ('Pedro'), ('Mark'), ('Hannes'), ('Pedro'), ('Pedro'), ('Mark');

CREATE TYPE name_enum AS ENUM ('Pedro', 'Mark');

ALTER TABLE person ALTER COLUMN name SET DATA TYPE name_enum;

DROP TYPE name_enum;

CREATE TYPE name_enum AS ENUM ('Pedro', 'Mark', 'Hannes');

ALTER TABLE person ALTER COLUMN name SET DATA TYPE name_enum;

SELECT * FROM person;

SELECT TYPEOF(name) FROM person LIMIT 1;

DROP TYPE name_enum;

ALTER TABLE person ALTER COLUMN name SET DATA TYPE TEXT;

SELECT * FROM person;

SELECT TYPEOF(name) FROM person LIMIT 1;

ALTER TABLE person ALTER COLUMN name SET DATA TYPE bogus_name;

PRAGMA enable_verification;

CREATE TYPE mood AS ENUM ('sad', 'ok', 'happy');

SELECT CAST('happy' AS mood);

SELECT CAST('awesome-bro' AS mood);

SELECT CAST(0 AS mood);

CREATE TYPE bla AS ENUM ();

CREATE TYPE mood AS ENUM ('sad', 'ok', 'happy');

DROP TYPE bla;

CREATE TYPE bla AS ENUM (1,2,3);

CREATE TYPE bla AS ENUM ('sad',NULL);

CREATE TYPE bla AS ENUM ('sad','sad');

CREATE TYPE mood_2 AS ENUM ('sad','Sad','SAD');
mode AS skip;

ALTER TYPE mood ADD VALUE 'depressive';

ALTER TYPE mood REMOVE VALUE 'depressive';
mode AS unskip;

DROP TYPE mood;

DROP TYPE mood_2;

DROP TYPE mood;

CREATE TYPE mood AS ENUM ('sad', 'ok', 'happy');

DROP TYPE IF EXISTS mood;

DROP TYPE IF EXISTS mood;

CREATE TYPE mood AS ENUM ('sad', 'ok', 'happy');

DROP TYPE IF EXISTS mood;

CREATE TYPE mood AS ENUM ('sad', 'ok', 'happy', NULL);

CREATE TEMPORARY TYPE mood AS ENUM ('sad', 'ok', 'happy');
mode AS unskip;

CREATE TYPE mood AS ENUM ('sad', 'ok', 'happy');

SELECT CAST(['happy'] AS mood[]);

SELECT CAST([NULL, 'happy', NULL] AS mood[]);

SELECT CAST(['happy', 'ok', 'ok'] AS mood[]);

SELECT CAST(['bla'] AS mood[]);

SELECT CAST([1] AS mood[]);

SELECT CAST([] AS mood[]);

SELECT CAST([NULL] AS mood[]);

SELECT {'a': CAST('happy' AS mood)};

SELECT {'a': CAST('happy' AS mood), 'b': CAST('ok' AS mood)};

SELECT {'a': CAST('happy' AS mood), 'b': 1, 'c': CAST('ok' AS mood)};

SELECT {'a': CAST('happy' AS mood), 'b': CAST('bla' AS mood)};

SELECT {'a': CAST('bla' AS mood)};

SELECT MAP([1, 2, 3, 4], CAST(['happy', 'ok', 'ok', 'sad'] AS mood[]));

SELECT MAP([1, 2, 3, 4], CAST(['bla', 'ok', 'ok', 'sad'] AS mood[]));

drop type mood;

CREATE TYPE mood AS ENUM ();

SELECT ENUM_RANGE(CAST(NULL AS mood)) AS my_enum_range;

PRAGMA enable_verification;

CREATE TYPE "integer" AS ENUM ('1', '2', '3');

SELECT CAST(4 AS INTEGEE);

DROP TYPE "INTEGER";

DROP TYPE "INTEGEE";

CREATE TYPE integer AS ENUM ('1', '2', '3');

PRAGMA enable_verification;

CREATE TYPE E1 AS ENUM ('v1', 'v2');

CREATE TABLE t1 (v E1);

INSERT INTO t1 VALUES ('v1');

SELECT TYPEOF(CASE WHEN 1 THEN v END) FROM t1;

PRAGMA enable_verification;

CREATE TYPE mood AS ENUM ('sad', 'ok', 'happy');

CREATE TABLE person (name TEXT, current_mood mood);

INSERT INTO person VALUES ('Pedro', 'ok'), ('Mark', 'sad'), ('Moe', 'happy'), ('Diego', NULL);

SELECT * FROM person;

SELECT CAST(current_mood AS TEXT) FROM person;

CREATE TYPE years AS ENUM ('2001', '2006', '2012', '2018');

CREATE TABLE albums (name TEXT, year_release years);

INSERT INTO albums VALUES ('Tenacious D', '2001'), ('The Pick of Destiny', '2006'), ('Rize of the Fenix', '2012'), ('Post-Apocalypto', '2018'), ('Something Random', NULL);

SELECT name, CAST(year_release AS INT) FROM albums;

SELECT name FROM albums WHERE CAST(year_release AS INT) > 2010;

CREATE TYPE years_error AS ENUM ('2001', '2006', '2012', 'bla');

CREATE TABLE albums_error (name TEXT, year_release years_error);

INSERT INTO albums_error VALUES ('Tenacious D', '2001'), ('The Pick of Destiny', 'bla');

SELECT name, CAST(year_release AS INT) FROM albums_error;

SELECT name, CAST(year_release AS INT) FROM albums_error WHERE year_release = '2001';

SELECT name, TRY_CAST(year_release AS INT) FROM albums_error;

SELECT name, CAST(year_release AS DOUBLE) FROM albums;

CREATE TYPE dates AS ENUM ('2001-01-01');

CREATE TABLE dates_table (year_release dates);

INSERT INTO dates_table VALUES ('2001-01-01');

SELECT CAST(year_release AS DATE) FROM dates_table;

SELECT CAST(year_release AS TIMESTAMP) FROM dates_table;

PRAGMA enable_verification;

CREATE TYPE mood AS ENUM ('sad', 'quackity-quack', 'happy', 'ok');

CREATE TABLE person (name TEXT, current_mood mood);

INSERT INTO person VALUES ('Pedro', 'happy'), ('Mark', NULL), ('Hannes', 'quackity-quack'), ('Tim', 'ok'), ('Diego', 'sad');

CREATE TABLE robots (name TEXT, current_mood mood);

INSERT INTO robots VALUES ('Timmynator', 'sad'), ('Tars', 'ok'), ('Diggernaut', NULL);

SELECT person.name, robots.name FROM person INNER JOIN robots ON (person.current_mood = robots.current_mood);

CREATE TYPE pet_mood AS ENUM ( 'happy','beaming', 'quackity-quack');

CREATE TABLE pet (name TEXT, current_mood pet_mood);

INSERT INTO pet VALUES ('Oogie', 'happy'), ('Wilbur', 'quackity-quack'), ('Chorizo', NULL), ('Vacilo', 'beaming');

SELECT person.name, pet.name FROM person INNER JOIN pet ON (person.current_mood > pet.current_mood) WHERE person.name = 'Pedro';

SELECT person.name, pet.name FROM person INNER JOIN pet ON (person.current_mood = pet.current_mood);

SELECT person_name, pet_name FROM (SELECT person.name AS person_name, pet.name AS pet_name, person.current_mood AS person_mood, pet.current_mood AS pet_mood FROM person, pet) AS t WHERE person_mood = pet_mood;

SELECT person_name, pet_name FROM (SELECT person.name AS person_name, pet.name AS pet_name, person.current_mood AS person_mood, pet.current_mood AS pet_mood FROM person, pet) AS t WHERE pet_mood = person_mood;

SELECT person.current_mood FROM person UNION ALL SELECT pet.current_mood FROM pet;

CREATE TABLE person_pet (person_name TEXT, pet_name TEXT);

INSERT INTO person_pet VALUES ('Pedro', 'Oogie'), ('Hannes', 'Wilbur'), ('Tim', 'Chorizo'), ('Diego', 'Vacilo');

CREATE TABLE person_pet_den AS SELECT person_name, pet_name, person_mood, pet_mood FROM (SELECT person.name AS person_name, pet.name AS pet_name, person.current_mood AS person_mood, pet.current_mood AS pet_mood FROM person INNER JOIN person_pet ON (person.name = person_pet.person_name) INNER JOIN pet ON (pet.name = person_pet.pet_name));

SELECT * FROM person_pet_den;

SELECT CASE WHEN person_name = 'Tim' THEN person_mood ELSE pet_mood END FROM person_pet_den;

SELECT person_mood IN ('sad') FROM person_pet_den;

SELECT person_mood IN (CAST('beaming' AS pet_mood)) FROM person_pet_den;

SELECT [person_mood, pet_mood] FROM person_pet_den;

SELECT person_mood = pet_mood FROM person_pet_den;

SELECT * FROM person_pet_den WHERE (person_mood = pet_mood) IS NULL;

SELECT CAST(person_mood AS pet_mood) FROM person_pet_den;

SELECT SUBSTRING(person_mood, 1, 2) FROM person_pet_den;

SELECT SUBSTRING(pet_mood, 1, 2) FROM person_pet_den;

SELECT person_mood FROM person_pet_den WHERE person_mood LIKE '%a%';

SELECT person_mood FROM person_pet_den WHERE person_mood LIKE '%a%';

SELECT REGEXP_MATCHES(person_mood, '.*a.*') FROM person_pet_den;

CREATE TYPE wealth AS ENUM ('poor', 'medium-class', 'rich', 'very super rich');

CREATE TABLE test (a mood, b wealth);

INSERT INTO test VALUES ('happy', 'rich'), ('ok', 'poor');

SELECT a = b FROM test;

SELECT * FROM test WHERE a = b;

INSERT INTO test VALUES (NULL, 'very super rich');

SELECT * FROM test WHERE (a = b) IS NULL;

PRAGMA enable_verification;

SELECT type_name, logical_type FROM DUCKDB_TYPES() WHERE NOT internal;

CREATE TYPE mood AS ENUM ('sad', 'ok', 'happy');

SELECT CAST('happy' AS mood);

SELECT type_name, logical_type FROM DUCKDB_TYPES() WHERE NOT internal;

PRAGMA enable_verification;

CREATE TYPE type_a AS ENUM (SELECT '1', '2');

CREATE TYPE type_int AS ENUM (SELECT 1);

CREATE TABLE test (x TEXT, y TEXT);

CREATE TYPE a AS ENUM (SELECT * FROM test);

DROP TABLE test;

CREATE TABLE number_str AS (SELECT CAST(range AS TEXT) AS x FROM RANGE(0, 100));

CREATE TYPE number_enum AS ENUM (SELECT x FROM number_str);

CREATE TABLE test (x number_enum);

INSERT INTO test SELECT CAST(range AS TEXT) FROM RANGE(0, 100);

INSERT INTO test VALUES ('100');

DROP TABLE number_str;

DROP TABLE test;

DROP TYPE number_enum;

CREATE TABLE number_str AS (SELECT CAST(range AS TEXT) AS x FROM RANGE(0, 10000));

CREATE TYPE number_enum AS ENUM (SELECT x FROM number_str);

CREATE TABLE test (x number_enum);

INSERT INTO test SELECT CAST(range AS TEXT) FROM RANGE(0, 10000);

DROP TABLE number_str;

DROP TABLE test;

DROP TYPE number_enum;

CREATE TABLE number_str AS (SELECT CAST(range AS TEXT) AS x FROM RANGE(0, 100000));

CREATE TYPE number_enum AS ENUM (SELECT x FROM number_str);

CREATE TABLE test (x number_enum);

INSERT INTO test SELECT CAST(range AS TEXT) FROM RANGE(0, 100000);

DROP TABLE number_str;

DROP TABLE test;

DROP TYPE number_enum;

CREATE TABLE number_str (x TEXT);

INSERT INTO number_str VALUES ('1'), ('2'), ('1');

CREATE TYPE number_enum AS ENUM (SELECT x FROM number_str);

DROP TABLE number_str;

DROP TYPE number_enum;

CREATE TYPE empty_number_enum AS ENUM (SELECT NULL::VARCHAR);

CREATE TABLE number_str (x TEXT);

INSERT INTO number_str VALUES ('1'), ('3'), ('2');

CREATE TYPE number_enum AS ENUM (SELECT x FROM number_str ORDER BY x DESC);

SELECT ENUM_FIRST(CAST('1' AS number_enum));

PRAGMA enable_verification;

CREATE SCHEMA s1;

CREATE TYPE s1.mood AS ENUM ('sad', 'ok', 'happy');

SELECT CAST('happy' AS s1.mood);

DROP TYPE s1.mood;

SELECT CAST('happy' AS s1.mood);

CREATE SCHEMA foo;

CREATE TYPE foo.bar AS ENUM ('a', 'b');

CREATE TABLE foo.baz (bar_col foo.bar NOT NULL);

DROP SCHEMA foo CASCADE;

CREATE SCHEMA "foo";

CREATE TYPE "foo.bar" AS ENUM ('a', 'b');

CREATE TABLE foo.baz (bar_col foo.bar NOT NULL);

drop type "foo.bar" cascade;

DROP SCHEMA "foo" CASCADE;

CREATE SCHEMA "foo";

CREATE TYPE foo.bar AS ENUM ('a', 'b');

CREATE TABLE foo.baz (bar_col foo.bar NOT NULL);

DROP SCHEMA "foo" CASCADE;

CREATE SCHEMA "foo";

CREATE TYPE foo.bar AS ENUM ('a', 'b');

CREATE TABLE foo.baz (bar_col foo.bar NOT NULL);

drop type foo.bar;

DROP SCHEMA "foo";

CREATE SCHEMA "foo";

CREATE TYPE "foo.bar" AS ENUM ('a', 'b');

CREATE TABLE foo.baz (bar_col foo.bar NOT NULL);

drop type "foo.bar";

DROP SCHEMA "foo";

CREATE SCHEMA "foo";

CREATE TYPE "foo".bar AS ENUM ('a', 'b');

PRAGMA enable_verification;

SET storage_compatibility_version = 'v0.10.2';
load __TEST_DIR__/enum_types.db;

CREATE TYPE mood AS ENUM (
'sad',
'ok',
'happy'
);

CREATE TABLE person (id INT, c STRUCT(name TEXT, current_mood mood));

INSERT INTO person VALUES (1, ROW('Mark', 'happy'));

SELECT * FROM person;

DROP TYPE mood;

SELECT * FROM person;

ALTER TABLE person DROP COLUMN c;

DROP TYPE mood;

CREATE TYPE mood AS ENUM ('sad', 'ok', 'happy');

ALTER TABLE person ADD COLUMN c STRUCT(
name text,
current_mood mood
)
mode skip;

DROP TYPE mood;

ALTER TABLE person DROP COLUMN c;

DROP TYPE mood;

CREATE TYPE mood AS ENUM ('sad', 'ok', 'happy');

ALTER TABLE person ADD COLUMN c INT;

ALTER TABLE person ALTER COLUMN c SET DATA TYPE STRUCT(name TEXT, current_mood mood);

SELECT * FROM person;

DROP TYPE mood;

UPDATE person SET c = ROW('Mark', 'happy');

SELECT * FROM person;

DROP TABLE person;

PRAGMA enable_verification;

CREATE TYPE mood AS ENUM ('sad', 'ok', 'happy');

CREATE TABLE person (name TEXT, current_car car);

CREATE TABLE person (name TEXT, current_mood mood);

INSERT INTO person VALUES ('Moe', 'happy');

INSERT INTO person VALUES ('Moe', 'diego');

SELECT * FROM person;

INSERT INTO person VALUES ('Pedro', 'ok');

INSERT INTO person VALUES ('Mark', 'sad');

SELECT * FROM person WHERE current_mood = 'sad';

SELECT * FROM person WHERE current_mood > 'sad';

SELECT * FROM person WHERE current_mood < 'sad';

CREATE TABLE pets (name TEXT, current_mood mood);

INSERT INTO pets VALUES ('Anne', 'happy');

INSERT INTO pets VALUES ('Oogie Boogie', 'ok');

INSERT INTO pets VALUES ('Mr. Fluffles McFluffingstein', NULL);

SELECT * FROM pets;

SELECT person.name, pets.name FROM person INNER JOIN pets ON (person.current_mood = pets.current_mood);

DROP TABLE person;

DROP TABLE pets;

DROP TYPE mood;

CREATE TABLE aliens (name TEXT, current_mood mood);

CREATE TYPE mood AS ENUM ('sad', 'ok', 'happy');

CREATE TYPE intelligence AS ENUM ('dumb', 'smart', 'ehh');

CREATE TABLE aliens (name TEXT, current_mood mood);

INSERT INTO aliens VALUES ('Alf o Eteimoso', 'happy'), ('Dr Zoidberg', 'sad');

ALTER TABLE aliens ADD COLUMN iq_level intelligence;

SELECT * FROM aliens;

INSERT INTO aliens VALUES ('The Borg', 'ok', 'ehh');

SELECT * FROM aliens;

ALTER TABLE aliens ALTER COLUMN current_mood SET DATA TYPE TEXT;

SELECT * FROM aliens;

CREATE TYPE car_brand AS ENUM ('Tesla', 'VW', 'Seat', 'Fiets');

CREATE TABLE person (name TEXT, current_mood mood, last_year_mood mood, car car_brand);

INSERT INTO person VALUES ('Pedro', 'ok', 'ok', 'Seat'), ('Mark', 'sad', 'happy', 'Fiets');

SELECT * FROM person WHERE current_mood = last_year_mood;

SELECT * FROM person WHERE current_mood = 'ok';

INSERT INTO person VALUES ('Diego', 'sad', 'happy', 'Seat'), ('Tim', 'happy', 'sad', 'Fiets');

SELECT COUNT(*), current_mood FROM person GROUP BY current_mood ORDER BY ALL;

SELECT name, current_mood FROM person ORDER BY current_mood;

SELECT CAST(current_mood AS TEXT) FROM person;

SELECT TRY_CAST(current_mood AS TEXT) FROM person;

SELECT CAST('ok' AS mood);

SELECT TRY_CAST('ok' AS mood);

SELECT CAST('bla' AS mood);

SELECT TRY_CAST('bla' AS mood);

create type breed AS ENUM ('Maltese', 'Shi-tzu', 'Samoyed', 'Robot');

CREATE TABLE person_string (name TEXT, current_mood TEXT);

INSERT INTO person_string VALUES ('Pedro', 'ok'), ('Mark', 'sad');

SELECT name, CAST(current_mood AS mood) FROM person_string WHERE current_mood = 'sad';

create type midenum as enum ('0','1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59','60','61','62','63','64','65','66','67','68','69','70','71','72','73','74','75','76','77','78','79','80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','96','97','98','99','100','101','102','103','104','105','106','107','108','109','110','111','112','113','114','115','116','117','118','119','120','121','122','123','124','125','126','127','128','129','130','131','132','133','134','135','136','137','138','139','140','141','142','143','144','145','146','147','148','149','150','151','152','153','154','155','156','157','158','159','160','161','162','163','164','165','166','167','168','169','170','171','172','173','174','175','176','177','178','179','180','181','182','183','184','185','186','187','188','189','190','191','192','193','194','195','196','197','198','199','200','201','202','203','204','205','206','207','208','209','210','211','212','213','214','215','216','217','218','219','220','221','222','223','224','225','226','227','228','229','230','231','232','233','234','235','236','237','238','239','240','241','242','243','244','245','246','247','248','249','250','251','252','253','254','255');

CREATE TABLE midenum_t (test midenum);

INSERT INTO midenum_t VALUES ('0');

create type midenum_2 as enum ('0','1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59','60','61','62','63','64','65','66','67','68','69','70','71','72','73','74','75','76','77','78','79','80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','96','97','98','99','100','101','102','103','104','105','106','107','108','109','110','111','112','113','114','115','116','117','118','119','120','121','122','123','124','125','126','127','128','129','130','131','132','133','134','135','136','137','138','139','140','141','142','143','144','145','146','147','148','149','150','151','152','153','154','155','156','157','158','159','160','161','162','163','164','165','166','167','168','169','170','171','172','173','174','175','176','177','178','179','180','181','182','183','184','185','186','187','188','189','190','191','192','193','194','195','196','197','198','199','200','201','202','203','204','205','206','207','208','209','210','211','212','213','214','215','216','217','218','219','220','221','222','223','224','225','226','227','228','229','230','231','232','233','234','235','236','237','238','239','240','241','242','243','244','245','246','247','248','249','250','251','252','253','254','255');

CREATE TABLE midenum_t2 (test_2 midenum_2);

INSERT INTO midenum_t2 VALUES ('0');

CREATE TYPE large_enum AS ENUM ('Floccinaucinihilipilification', 'Antidisestablishmentarianism', 'Honorificabilitudinitatibus');

CREATE TABLE large_enum_tbl (big_word large_enum);

INSERT INTO large_enum_tbl VALUES ('Floccinaucinihilipilification'), ('Floccinaucinihilipilification'), ('Honorificabilitudinitatibus'), ('Floccinaucinihilipilification'), ('Antidisestablishmentarianism');

SELECT * FROM large_enum_tbl;

PRAGMA enable_verification;

CREATE TYPE mood AS ENUM ('sad', 'ok', 'happy');

CREATE TEMPORARY TABLE tbl_temp (name TEXT, cur_mood mood);

INSERT INTO tbl_temp VALUES ('bla', 'sad'), ('bla_2', 'happy');

SELECT COUNT(*) FROM tbl_temp;

INSERT INTO tbl_temp VALUES ('bla', 'invalid');

DROP TYPE mood;

INSERT INTO tbl_temp VALUES ('bla', 'sad'), ('bla_2', 'happy');

SELECT COUNT(*) FROM tbl_temp;

INSERT INTO tbl_temp VALUES ('bla', 'invalid');

create type enum_numstrings as enum ('1', '2', '3', '4');

CREATE TABLE t1 AS SELECT range AS a FROM RANGE(0, 10);

CREATE TABLE t2 (a enum_numstrings);

INSERT INTO t2 VALUES ('1'), ('2'), ('3');

SELECT t1.a, COUNT(*) AS num_matches FROM t1, t2 WHERE t1.a <> t2.a GROUP BY t1.a ORDER BY t1.a;

INSERT INTO t2 VALUES ('1'), ('2');

SELECT * FROM t1, t2 WHERE t1.a = t2.a ORDER BY t1.a;

DELETE FROM t2 WHERE 1 = 1;

INSERT INTO t2 VALUES (NULL), ('1');

SELECT * FROM t1, t2 ORDER BY t1.a, t2.a NULLS FIRST;

INSERT INTO t2 VALUES ('2'), ('3'), ('4');

SELECT * FROM t1, t2 WHERE NOT t2.a IN ('2', '3', '4') ORDER BY t1.a, t2.a NULLS FIRST;

INSERT INTO t2 VALUES ('1'), ('2'), ('3');

EXPLAIN select * from t1, t2 where t2.a = '2' order by t1.a;

DROP TABLE t1;

DROP TABLE t2;

create type enum_strings as enum ('hello', 'goodbye', 'mr duck');

CREATE TABLE t1 AS SELECT range AS a FROM RANGE(0, 500);

CREATE TABLE t2 (a enum_strings);

INSERT INTO t2 VALUES ('hello'), ('goodbye'), ('mr duck'), ('mr duck'), ('hello'), ('goodbye');

SELECT * FROM t1, t2 WHERE t1.a = t2.a;

SELECT * FROM t1, t2 WHERE CAST(t1.a AS TEXT) = t2.a;

DROP TABLE t1;

DROP TABLE t1;

create type new_type as enum ('1', '2', '3', '4', '5');

create type new_type as enum ('1', '2', '3', '4', '5');

CREATE TABLE t2 AS SELECT CAST(CAST((range % 4 + 1) AS TEXT) AS new_type) AS b FROM RANGE(0, 8);

SELECT a FROM t1, t2 WHERE t1.a = t2.b;

SELECT COUNT(*) FROM t1, t2 WHERE CAST(t1.a AS TEXT) < t2.b;

SELECT COUNT(*) FROM t1, t2 WHERE CAST(t1.a AS TEXT) <= t2.b;

SELECT COUNT(*) FROM t1, t2 WHERE CAST(t1.a AS TEXT) > t2.b;

SELECT COUNT(*) FROM t1, t2 WHERE CAST(t1.a AS TEXT) >= t2.b;

drop type new_type;

DROP TABLE t1;

DROP TABLE t2;
endloop;

create type new_type as enum ('294247-01-10 04:00:54.775806', '83 years 3 months 999 days 00:16:39.999999', '1677-09-21 00:12:43.145225', 'other enum type', 'another 1', '~~~');

CREATE TABLE t1 AS SELECT date, time, timestamp, timestamp_s, timestamp_ms, timestamp_ns, time_tz, timestamp_tz, interval, blob, bool FROM TEST_ALL_TYPES();

CREATE TABLE t2 AS SELECT * FROM (VALUES (CAST('294247-01-10 04:00:54.775806' AS new_type)), (CAST('83 years 3 months 999 days 00:16:39.999999' AS new_type)), (CAST('1677-09-21 00:12:43.145225' AS new_type)), (CAST('other enum type' AS new_type)), (CAST('another 1' AS new_type)), (CAST('~~~' AS new_type))) AS t(b);

SELECT COUNT(*) FROM t1, t2 WHERE t1.date = t2.b;

SELECT COUNT(*) FROM t1, t2 WHERE t1.time = t2.b;

SELECT COUNT(*) FROM t1, t2 WHERE t1.timestamp = t2.b;

SELECT COUNT(*) FROM t1, t2 WHERE t1.timestamp_s = t2.b;

SELECT COUNT(*) FROM t1, t2 WHERE t1.timestamp_ms = t2.b;

SELECT COUNT(*) FROM t1, t2 WHERE t1.timestamp_ns = t2.b;

SELECT COUNT(*) FROM t1, t2 WHERE t1.time_tz = t2.b;

SELECT COUNT(*) FROM t1, t2 WHERE t1.timestamp_tz = t2.b;

SELECT COUNT(*) FROM t1, t2 WHERE t1.interval = t2.b;

SELECT COUNT(*) FROM t1, t2 WHERE t1.blob = t2.b;

DROP TABLE t1;

DROP TABLE t2;

create type enum_bits as enum ('11001010110', '110', '0101001010101', 'some enum val that cannot be cast to bit');

CREATE TABLE t1 AS SELECT * FROM (VALUES (CAST('110010' AS BIT)), (CAST('110' AS BIT)), (CAST('110110110011' AS BIT))) AS t(a);

CREATE TABLE t2 AS SELECT * FROM (VALUES (CAST('11001010110' AS enum_bits)), (CAST('110' AS enum_bits)), (CAST('0101001010101' AS enum_bits)), (CAST('some enum val that cannot be cast to bit' AS enum_bits))) AS t(b);

SELECT COUNT(*) FROM t1, t2 WHERE t1.a = t2.b;

SET default_null_order = 'nulls_first';

SET default_null_order = 'nulls_first';

SET default_null_order = 'nulls_first';

INSERT INTO floats VALUES ('NAN'), (1), ('infinity'), ('-infinity'), (-1), (NULL);

SELECT f FROM floats ORDER BY f;

SELECT f FROM floats ORDER BY f DESC;

SELECT f FROM floats ORDER BY f DESC LIMIT 2;

SELECT f FROM floats ORDER BY f LIMIT 2;

SELECT f FROM floats ORDER BY f LIMIT 2;

SELECT f FROM floats ORDER BY f LIMIT 2;

SELECT f FROM floats ORDER BY f LIMIT 2;

SELECT f FROM floats ORDER BY f DESC LIMIT 4;

SELECT f FROM floats ORDER BY f LIMIT 4;

SELECT COUNT(*) FROM floats WHERE f > 0;

SELECT COUNT(*) FROM floats WHERE f < 0;

PRAGMA enable_verification;

SELECT [CAST('nan' AS DOUBLE)];

SELECT UNNEST([CAST('nan' AS DOUBLE)]);

SELECT {'a': CAST('nan' AS DOUBLE)};

SELECT ({'a': CAST('nan' AS DOUBLE)}).a;

SELECT CAST(251658240 AS INT128) * CAST(251658240 AS INT128);

SELECT CAST(251658240 AS INT128) * CAST(1080863910568919040 AS INT128);

SELECT CAST(251658240 AS INT128) * CAST(4642275147320176030871715840 AS INT128);

SELECT CAST(251658240 AS INT128) * CAST(19938419936773738093557105904205168640 AS INT128);

SELECT CAST(1080863910568919040 AS INT128) * CAST(251658240 AS INT128);

SELECT CAST(1080863910568919040 AS INT128) * CAST(1080863910568919040 AS INT128);

SELECT CAST(1080863910568919040 AS INT128) * CAST(4642275147320176030871715840 AS INT128);

SELECT CAST(1080863910568919040 AS INT128) * CAST(19938419936773738093557105904205168640 AS INT128);

SELECT CAST(4642275147320176030871715840 AS INT128) * CAST(251658240 AS INT128);

SELECT CAST(4642275147320176030871715840 AS INT128) * CAST(1080863910568919040 AS INT128);

SELECT CAST(4642275147320176030871715840 AS INT128) * CAST(4642275147320176030871715840 AS INT128);

SELECT CAST(4642275147320176030871715840 AS INT128) * CAST(19938419936773738093557105904205168640 AS INT128);

SELECT CAST(19938419936773738093557105904205168640 AS INT128) * CAST(251658240 AS INT128);

SELECT CAST(19938419936773738093557105904205168640 AS INT128) * CAST(1080863910568919040 AS INT128);

SELECT CAST(19938419936773738093557105904205168640 AS INT128) * CAST(4642275147320176030871715840 AS INT128);

SELECT CAST(19938419936773738093557105904205168640 AS INT128) * CAST(19938419936773738093557105904205168640 AS INT128);

SELECT CAST(85070591730234615865843651857942052863 AS INT128) * CAST(2 AS INT128);

SELECT CAST(85070591730234615865843651857942052864 AS INT128) * CAST(2 AS INT128);

SELECT CAST(85070591730234615865843651857942052865 AS INT128) * CAST(2 AS INT128);

SELECT CAST(19807040628566084398385987583 AS INT128) * CAST(8589934592 AS INT128);

SELECT CAST(19807040628566084398385987584 AS INT128) * CAST(8589934592 AS INT128);

SELECT CAST(36893488147419103231 AS INT128) * CAST(4611686018427387904 AS INT128);

SELECT CAST(36893488147419103232 AS INT128) * CAST(4611686018427387904 AS INT128);

SELECT CAST(2 AS INT128) * CAST(85070591730234615865843651857942052863 AS INT128);

SELECT CAST(2 AS INT128) * CAST(85070591730234615865843651857942052864 AS INT128);

SELECT CAST(2 AS INT128) * CAST(85070591730234615865843651857942052865 AS INT128);

SELECT CAST(8589934592 AS INT128) * CAST(19807040628566084398385987583 AS INT128);

SELECT CAST(8589934592 AS INT128) * CAST(19807040628566084398385987584 AS INT128);

SELECT CAST(4611686018427387904 AS INT128) * CAST(36893488147419103231 AS INT128);

SELECT CAST(4611686018427387904 AS INT128) * CAST(36893488147419103232 AS INT128);

SELECT CAST(10376293541461622783 AS INT128) * CAST(10376293541461622783 AS INT128);

SELECT CAST(10376293541461622783 AS INT128) * CAST(10376293541461622783 AS INT128);

SELECT CAST(17293822569102704639 AS INT128) * CAST(10376293541461622783 AS INT128);

PRAGMA enable_verification;

SELECT SUM(170141183460469231731687303715884105727) FROM RANGE(0, 10);

SELECT SUM(x) FROM (VALUES (170141183460469231731687303715884105727), (170141183460469231731687303715884105727)) AS t(x);

SELECT AVG(170141183460469231731687303715884105727) FROM RANGE(0, 10);

SELECT AVG(x) FROM (VALUES (170141183460469231731687303715884105727), (170141183460469231731687303715884105727)) AS t(x);

PRAGMA enable_verification;

SELECT CAST('170141183460469231731687303715884105728' AS INT128);

SELECT CAST(CAST('170141183460469231731687303715884105728' AS DOUBLE) AS INT128);

SELECT CAST('-170141183460469231731687303715884105729' AS INT128);

SELECT CAST(CAST('-170141183460469231731687303715884105729' AS DOUBLE) AS INT128);

SELECT TRY_CAST('170141183460469231731687303715884105728' AS INT128);

SELECT TRY_CAST(CAST('170141183460469231731687303715884105728' AS DOUBLE) AS INT128);

SELECT TRY_CAST('-170141183460469231731687303715884105729' AS INT128);

SELECT TRY_CAST(CAST('-170141183460469231731687303715884105729' AS DOUBLE) AS INT128);

PRAGMA enable_verification;

CREATE TABLE hugeints (g INT, h INT128);

INSERT INTO hugeints VALUES (1, 42.0), (2, 1267650600228229401496703205376), (2, -439847238974238975238975), (1, '-12');

SELECT MIN(h), MAX(h), SUM(h), FIRST(h), LAST(h) FROM hugeints;

SELECT g, MIN(h), MAX(h), SUM(h), FIRST(h), LAST(h) FROM hugeints GROUP BY g ORDER BY 1;

PRAGMA threads = 1;

SELECT FIRST(h), LAST(h) FROM hugeints;

SELECT g, FIRST(h), LAST(h) FROM hugeints GROUP BY g ORDER BY 1;

PRAGMA enable_verification;

SELECT CAST(10000000000000000000 AS INT128) + CAST(100 AS TINYINT), CAST(10000000000000000000 AS INT128) + CAST(100 AS SMALLINT), CAST(10000000000000000000 AS INT128) + CAST(100 AS INT), CAST(10000000000000000000 AS INT128) + CAST(100 AS BIGINT);

SELECT CAST(100 AS INT128) + 0.5;

SELECT COS(CAST(100 AS INT128));

SELECT CONCAT('hello number ', CAST(100 AS INT128));

PRAGMA enable_verification;

SELECT CAST(1 AS INT128) << 3;

SELECT CAST(27 AS INT128) << 0;

SELECT -CAST(27 AS INT128) << 1;

SELECT CAST(1 AS INT128) << 50, CAST(1 AS INT128) << 100;

SELECT (((((CAST(1 AS INT128) << 50) << 50) << 2) << 3) << 8), (CAST(1 AS INT128)) << 50 << 20 << 7 << 18 << 3 << 6 << 9;

SELECT CAST(1 AS INT128) << 64;

SELECT CAST(1 AS INT128) << 200;

SELECT CAST('1329227995784915872903807060280344576' AS INT128) << 50;

SELECT CAST(27 AS INT128) << -1;

SELECT CAST(100 AS INT128) << CAST('1329227995784915872903807060280344576' AS INT128);

SELECT CAST(8 AS INT128) >> 3;

SELECT CAST(27 AS INT128) >> 0;

SELECT -CAST(27 AS INT128) >> 1;

SELECT CAST(27 AS INT128) >> -1;

SELECT (CAST(1 AS INT128) << 100) >> 50, (CAST(1 AS INT128) << 120) >> 108;

SELECT CAST('1329227995784915872903807060280344576' AS INT128) >> 200;

SELECT -11367237885269962203896920952509169001 >> 200;

SELECT CAST('1329227995784915872903807060280344576' AS INT128) >> 64;

SELECT -11367237885269962203896920952509169001 >> 64;

SELECT CAST('1329227995784915872903807060280344576' AS INT128) >> 96;

SELECT -11367237885269962203896920952509169001 >> 96;

SELECT CAST('1329227995784915872903807060280344576' AS INT128) >> 4 >> 5 >> 7 >> 9 >> 12 >> 13;

SELECT -11367237885269962203896920952509169001 >> 4 >> 5 >> 7 >> 9 >> 12 >> 13;

SELECT CAST(1 AS INT128) & CAST(3 AS INT128);

SELECT CAST(51290852742897895128414 AS INT128) & CAST(4923847238975289723895239078235 AS INT128);

SELECT CAST(1 AS INT128) | CAST(2 AS INT128);

SELECT CAST(51290852742897895128414 AS INT128) | CAST(4923847238975289723895239078235 AS INT128);

SELECT XOR(CAST(1 AS INT128), CAST(3 AS INT128));

SELECT XOR(CAST(51290852742897895128414 AS INT128), CAST(4923847238975289723895239078235 AS INT128));

SELECT ~(CAST(1 AS INT128));

SELECT ~(CAST(4923847238975289723895239078235 AS INT128));

SELECT CAST(1 AS INT128) >> 1000;

SELECT 1 >> CAST(170141183460469231731687303715884105727 AS INT128);

SELECT CAST(1 AS INT128) << 1000;

SELECT 1 << CAST(170141183460469231731687303715884105727 AS INT128);

SELECT CAST('7' AS INT128), CAST('130' AS INT128), CAST('924829852' AS INT128);

SELECT CAST('0' AS INT128), CAST('-0' AS INT128);

SELECT CAST('-7' AS INT128), CAST('-130' AS INT128), CAST('-924829852' AS INT128);

SELECT CAST('10000000000000000000000000000' AS INT128);

SELECT CAST('1267650600228229401496703205376' AS INT128), CAST('17014118346046923173168730371588410572' AS INT128);

SELECT CAST('-1267650600228229401496703205376' AS INT128), CAST('-17014118346046923173168730371588410572' AS INT128);

SELECT CAST('1701411834604692317316873037158841057200' AS INT128);

SELECT CAST('-1701411834604692317316873037158841057200' AS INT128);

SELECT CAST('170141183460469231731687303715884105727' AS INT128), CAST('-170141183460469231731687303715884105728' AS INT128);

SELECT CAST('170141183460469231731687303715884105728' AS INT128);

SELECT CAST('-170141183460469231731687303715884105729' AS INT128);

SELECT CAST(CAST(42 AS TINYINT) AS INT128), CAST(CAST(42 AS SMALLINT) AS INT128), CAST(CAST(42 AS INT) AS INT128), CAST(CAST(42 AS BIGINT) AS INT128), CAST(CAST(42 AS REAL) AS INT128), CAST(CAST(42 AS DOUBLE) AS INT128);

SELECT CAST(CAST((-42) AS TINYINT) AS INT128), CAST(CAST((-42) AS SMALLINT) AS INT128), CAST(CAST((-42) AS INT) AS INT128), CAST(CAST((-42) AS BIGINT) AS INT128), CAST(CAST((-42) AS REAL) AS INT128), CAST(CAST((-42) AS DOUBLE) AS INT128);

SELECT CAST(CAST(42 AS INT128) AS TINYINT), CAST(CAST(42 AS INT128) AS SMALLINT), CAST(CAST(42 AS INT128) AS INT), CAST(CAST(42 AS INT128) AS BIGINT), CAST(CAST(42 AS INT128) AS REAL), CAST(CAST(42 AS INT128) AS DOUBLE);

SELECT CAST(CAST((-42) AS INT128) AS TINYINT), CAST(CAST((-42) AS INT128) AS SMALLINT), CAST(CAST((-42) AS INT128) AS INT), CAST(CAST((-42) AS INT128) AS BIGINT), CAST(CAST((-42) AS INT128) AS REAL), CAST(CAST((-42) AS INT128) AS DOUBLE);

SELECT CAST(CAST(1000 AS INT128) AS TINYINT);

SELECT CAST(CAST(128 AS INT128) AS TINYINT);

SELECT -CAST(CAST(128 AS INT128) AS TINYINT);

SELECT CAST(CAST(127 AS INT128) AS TINYINT), -CAST(CAST(127 AS INT128) AS TINYINT);

SELECT CAST(CAST(100000 AS INT128) AS SMALLINT);

SELECT CAST(CAST(32768 AS INT128) AS SMALLINT);

SELECT -CAST(CAST(32768 AS INT128) AS SMALLINT);

SELECT CAST(CAST(32767 AS INT128) AS SMALLINT), -CAST(CAST(32767 AS INT128) AS SMALLINT);

SELECT CAST(CAST(100000000000 AS INT128) AS INT);

SELECT CAST(CAST(2147483648 AS INT128) AS INT);

SELECT -CAST(CAST(2147483648 AS INT128) AS INT);

SELECT CAST(CAST(2147483647 AS INT128) AS INT), -CAST(CAST(2147483647 AS INT128) AS INT);

SELECT CAST(CAST(10000000000000000000 AS INT128) AS BIGINT);

SELECT CAST(CAST('9223372036854775808' AS INT128) AS BIGINT);

SELECT CAST(CAST('-9223372036854775809' AS INT128) AS BIGINT);

SELECT CAST(CAST(9223372036854775807 AS INT128) AS BIGINT), CAST(CAST((-9223372036854775808) AS INT128) AS BIGINT);

SELECT CAST(CAST(1e100 AS REAL) AS INT128);

SELECT CAST(CAST(1e100 AS DOUBLE) AS INT128);

SELECT TYPEOF(10), TYPEOF(10000000000), TYPEOF(170141183460469231731687303715884105727), TYPEOF(170141183460469231731687303715884105728), TYPEOF(170141183460469231731687303715884105728000);

SELECT 1e30, 1e100, 1e-1;

SELECT TYPEOF(1e30), TYPEOF(1e100), TYPEOF(1e-1);

PRAGMA enable_verification;

SELECT CAST('170141183460469231731687303715884105700e0' AS INT128);

SELECT CAST('170141183460469231731687303715884105727e0' AS INT128);

SELECT CAST('170141183460469231731687303715884105735e0' AS INT128);

SELECT CAST('1.7e39' AS INT128);

SELECT CAST('2e38' AS INT128);

PRAGMA enable_verification;

SELECT ABS(CAST(1 AS INT128)), ABS(CAST('-1329227995784915872903807060280344576' AS INT128)), ABS(CAST(0 AS INT128));

SELECT SIGN(CAST(1 AS INT128)), SIGN(CAST('-1329227995784915872903807060280344576' AS INT128)), SIGN(CAST(0 AS INT128));

SELECT ROUND(CAST(1 AS INT128), 0), ROUND(CAST('-1329227995784915872903807060280344576' AS INT128), 0), ROUND(CAST(0 AS INT128), 0);

SELECT FLOOR(CAST(1 AS INT128)), FLOOR(CAST('-1329227995784915872903807060280344576' AS INT128)), FLOOR(CAST(0 AS INT128));

SELECT CEIL(CAST(1 AS INT128)), CEIL(CAST('-1329227995784915872903807060280344576' AS INT128)), CEIL(CAST(0 AS INT128));

SELECT LEAST(CAST(1 AS INT128), CAST('-1329227995784915872903807060280344576' AS INT128), CAST(0 AS INT128));

SELECT GREATEST(CAST(1 AS INT128), CAST('-1329227995784915872903807060280344576' AS INT128), CAST(0 AS INT128));

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

SELECT CAST(NULL AS INT128);

CREATE TABLE hugeints (id INT, h INT128);

INSERT INTO hugeints VALUES (1, NULL), (1, 1), (1, 2);

SELECT id, FIRST(h), LAST(h) FROM hugeints WHERE h IS NULL GROUP BY id;

SELECT h, SUM(id) FROM hugeints GROUP BY h ORDER BY 1;

SELECT id, h1.h, h2.h FROM hugeints AS h1 JOIN hugeints AS h2 USING (id) WHERE h1.h IS NULL AND h2.h IS NULL;

SELECT (SELECT h1.h) FROM hugeints AS h1 ORDER BY 1;

SELECT NOT h1.h IN (SELECT h1.h + h2.h FROM hugeints AS h2) FROM hugeints AS h1 ORDER BY 1;

PRAGMA enable_verification;

CREATE TABLE hugeints (h INT128);

INSERT INTO hugeints VALUES (CAST(42 AS INT128)), (CAST('1267650600228229401496703205376' AS INT128));

SELECT CAST(h AS INT) FROM hugeints WHERE h < 100;

SELECT COUNT(*) FROM hugeints WHERE h = CAST(42 AS INT128);

SELECT COUNT(*) FROM hugeints WHERE h <> CAST('1267650600228229401496703205376' AS INT128);

SELECT COUNT(*) FROM hugeints WHERE h < CAST('1267650600228229401496703205376' AS INT128);

SELECT COUNT(*) FROM hugeints WHERE h <= CAST('1267650600228229401496703205376' AS INT128);

SELECT COUNT(*) FROM hugeints WHERE h > CAST('1267650600228229401496703205375' AS INT128);

SELECT COUNT(*) FROM hugeints WHERE h >= CAST(42 AS INT128);

CREATE TABLE hugeints2 (h INT128);
INSERT INTO hugeints2 VALUES (CAST(42 AS INT128));

SELECT * FROM hugeints JOIN hugeints2 USING (h);

SELECT * FROM hugeints AS t1 JOIN hugeints2 AS t2 ON t1.h <> t2.h;

SELECT * FROM hugeints AS t1 JOIN hugeints2 AS t2 ON t1.h >= t2.h ORDER BY 1 LIMIT 2;

PRAGMA enable_verification;

SELECT INTERVAL '2' DAYS;

SELECT INTERVAL (2) DAY;

SELECT INTERVAL (1 + 1) DAYS;

SELECT INTERVAL '2' DAYS;

SELECT TO_YEARS(2), TO_MONTHS(2), TO_DAYS(2), TO_HOURS(2), TO_MINUTES(2), TO_SECONDS(2);

SELECT INTERVAL (i) DAY FROM RANGE(1, 4) AS tbl(i);

SELECT INTERVAL (i + 1) DAY FROM RANGE(1, 4) AS tbl(i);

SELECT INTERVAL '2' YEARS, INTERVAL '2' YEAR;

SELECT INTERVAL '2' MONTHS, INTERVAL '2' MONTH;

SELECT INTERVAL '2' DAYS, INTERVAL '2' DAY;

SELECT INTERVAL '2' HOURS, INTERVAL '2' HOUR;

SELECT INTERVAL '2' MINUTES, INTERVAL '2' MINUTE;

SELECT INTERVAL '2' SECONDS, INTERVAL '2' SECOND;

SELECT INTERVAL '2 10' YEARS TO MONTHS;

SELECT INTERVAL '2 10' DAYS TO HOURS;

SELECT INTERVAL '12 15:06' DAYS TO MINUTES;

SELECT INTERVAL '12 15:06:04.123' DAYS TO SECONDS;

SELECT INTERVAL '12:30' HOURS TO MINUTES;

SELECT INTERVAL '15:06:04.123' HOURS TO SECONDS;

SELECT INTERVAL '12:30' MINUTES TO SECONDS;

SELECT INTERVAL '99999999999999' YEARS;

SELECT INTERVAL '214748364' YEARS;

SELECT INTERVAL '9223372036854775807' HOURS;

SELECT INTERVAL '9223372036854775807' MINUTES;

SELECT INTERVAL '9223372036854775807' SECONDS;

SELECT INTERVAL '9223372036854775807' MILLISECONDS;

SELECT INTERVAL '3' MILLISECOND, INTERVAL '3' MILLISECONDS;

SELECT INTERVAL '3' MICROSECOND, INTERVAL '3' MICROSECONDS;

SELECT (7 * INTERVAL '3' DAY), (7 * INTERVAL '3' DAY);

SELECT INTERVAL '3' DECADE, INTERVAL '3' DECADES;

SELECT INTERVAL '3' CENTURY, INTERVAL '3' CENTURIES;

SELECT INTERVAL '3' MILLENNIUM, INTERVAL '3' MILLENNIA;

SELECT CAST('1992-01-01 12:00:00' AS TIMESTAMP) + INTERVAL '3' MICROSECONDS + INTERVAL '3' MILLISECONDS;

SELECT CAST('1992-01-01 12:00:00' AS TIMESTAMP) + (INTERVAL '3' MICROSECONDS + INTERVAL '3' MILLISECONDS);

SELECT INTERVAL '10.123' SECOND;

SELECT CAST('47.210' AS INTERVAL);

SELECT CAST('-47.210' AS INTERVAL);

SELECT CAST('47.210  ' AS INTERVAL);

SELECT CAST('31.123456789' AS INTERVAL);

SELECT CAST('47.210 5' AS INTERVAL);

SELECT INTERVAL '1.5' MICROSECOND;

SELECT INTERVAL '1.5' MILLISECOND;

SELECT INTERVAL '1.5' SECOND;

SELECT INTERVAL '1.5' MINUTE;

SELECT INTERVAL '1.5' HOUR;

SELECT INTERVAL '1.5' DAY;

SELECT (7 * INTERVAL '1.5' DAY);

SELECT INTERVAL '1.5' MONTH;

SELECT INTERVAL '1.5' YEAR;

SELECT INTERVAL '1.5' DECADE;

SELECT INTERVAL '1.5' CENTURY;

SELECT INTERVAL '1.5' MILLENNIA;

SELECT INTERVAL '-1.5' MICROSECOND;

SELECT INTERVAL '-1.5' MILLISECOND;

SELECT INTERVAL '-1.5' SECOND;

SELECT INTERVAL '-1.5' MINUTE;

SELECT INTERVAL '-1.5' HOUR;

SELECT INTERVAL '-1.5' DAY;

SELECT (7 * INTERVAL '-1.5' DAY);

SELECT INTERVAL '-1.5' MONTH;

SELECT INTERVAL '-1.5' YEAR;

SELECT INTERVAL '-1.5' DECADE;

SELECT INTERVAL '-1.5' CENTURY;

SELECT INTERVAL '-1.5' MILLENNIA;

SELECT CAST('1.5 MICROSECOND' AS INTERVAL);

SELECT CAST('1.5 MILLISECOND' AS INTERVAL);

SELECT CAST('1.5 SECOND' AS INTERVAL);

SELECT CAST('1.5 MINUTE' AS INTERVAL);

SELECT CAST('1.5 HOUR' AS INTERVAL);

SELECT CAST('1.5 DAY' AS INTERVAL);

SELECT CAST('1.5 WEEK' AS INTERVAL);

SELECT CAST('1.5 MONTH' AS INTERVAL);

SELECT CAST('1.5 QUARTER' AS INTERVAL);

SELECT CAST('1.5 YEAR' AS INTERVAL);

SELECT CAST('1.5 DECADE' AS INTERVAL);

SELECT CAST('1.5 CENTURY' AS INTERVAL);

SELECT CAST('1.5 MILLENIUM' AS INTERVAL);

SELECT CAST('-1.5 MICROSECOND' AS INTERVAL);

SELECT CAST('-1.5 MILLISECOND' AS INTERVAL);

SELECT CAST('-1.5 SECOND' AS INTERVAL);

SELECT CAST('-1.5 MINUTE' AS INTERVAL);

SELECT CAST('-1.5 HOUR' AS INTERVAL);

SELECT CAST('-1.5 DAY' AS INTERVAL);

SELECT CAST('-1.5 WEEK' AS INTERVAL);

SELECT CAST('-1.5 MONTH' AS INTERVAL);

SELECT CAST('-1.5 QUARTER' AS INTERVAL);

SELECT CAST('-1.5 YEAR' AS INTERVAL);

SELECT CAST('-1.5 DECADE' AS INTERVAL);

SELECT CAST('-1.5 CENTURY' AS INTERVAL);

SELECT CAST('-1.5 MILLENIUM' AS INTERVAL);

PRAGMA enable_verification;

SELECT CAST('   ' AS INTERVAL);

SELECT CAST('AAAA' AS INTERVAL);

SELECT CAST('00:00:' AS INTERVAL);

SELECT CAST('3 doopiedoos' AS INTERVAL);

SELECT CAST('3 years 2 doy' AS INTERVAL);

SELECT CAST('3 yearweek' AS INTERVAL);

SELECT CAST(NULL AS INTERVAL);

SELECT TRY_CAST('   ' AS INTERVAL);

SELECT TRY_CAST('AAAA' AS INTERVAL);

SELECT TRY_CAST('00:00:' AS INTERVAL);

SELECT TRY_CAST('3 doopiedoos' AS INTERVAL);

SELECT TRY_CAST('3 years 2 doy' AS INTERVAL);

SELECT TRY_CAST(NULL AS INTERVAL);

PRAGMA enable_verification;

SELECT INTERVAL '2' YEARS;

SELECT INTERVAL '2' YEARS;

SELECT INTERVAL '2Y 1 M';

SELECT INTERVAL '2Y 1 month 1 M 3S 20mS 16uS';

SELECT INTERVAL '2Y 1 month 02:01:03.020016';

SELECT INTERVAL '2Y 1 month 02:01:03.020016';

SELECT INTERVAL '2 yr 1 mon 1 min 3 sec 20 msec 16 usec';

SELECT INTERVAL '2 yrs 1 mons 1 mins 3 secs 20 msecs 16 usecs';

SELECT INTERVAL '-2Y 4 days 5 Hours 1 MinUteS 3S 20mS 16uS';

SELECT INTERVAL '-2Y 4 days 5 Hours 1 MinUteS 3S 20mS 16uS';

SELECT INTERVAL '-2yr 4 d 5 hr 1 min 3 second 20 msecond 16 usecond';

SELECT INTERVAL '-2yr 4 d 5 hr 1 min 3 second 20 msecond 16 usecond';

SELECT INTERVAL '-2yr 4 d 5 hr 1 min 3 second 20 msecond 16 usecond';

SELECT INTERVAL '-2yr 4 d 5 hr 1 min 3 second 20 msecond 16 usecond';

SELECT INTERVAL '@2mons 1H';

SELECT INTERVAL '05:12:34.567890' AS test_interval;

SELECT INTERVAL '-05:12:34.567890' AS test_interval;

SELECT (CAST('35:10:00' AS INTERVAL));

SELECT CAST('876:54:32.101234' AS INTERVAL), CAST('-876:54:32.101234' AS INTERVAL);

SELECT CAST('999999999:54:32.101234' AS INTERVAL), CAST('-999999999:54:32.101234' AS INTERVAL);

SELECT CAST('9999999999:54:32.101234' AS INTERVAL);

SELECT CAST('-9999999999:54:32.101234' AS INTERVAL);

SELECT INTERVAL 'P2MT1H1M';

SELECT INTERVAL '00' T;

SELECT INTERVAL '90' DAY;

SELECT INTERVAL '90' YEAR;

SELECT (90 * INTERVAL '90' DAY);

SELECT INTERVAL '90' MONTH;

SELECT INTERVAL '90' SECOND;

SELECT INTERVAL '90' MINUTE;

SELECT INTERVAL '90' HOUR;

SELECT INTERVAL '2' MONTH + INTERVAL '1 month 3 days';

SELECT INTERVAL '2' MONTH - INTERVAL '1 month 3 days';

SELECT INTERVAL '2' MONTH * INTERVAL '1 month 3 days';

SELECT INTERVAL '1 year 2 days 2 seconds' * 2;

SELECT 2 * INTERVAL '1 year 2 days 2 seconds';

SELECT INTERVAL '1 year 2 days 2 seconds' / 2;

SELECT 2 / INTERVAL '1 year 2 days 2 seconds';

SELECT INTERVAL '1 year 2 days 2 seconds' / 0;

SELECT INTERVAL '';

SELECT INTERVAL '   	';

SELECT INTERVAL 'years';

SELECT INTERVAL '-years';

SELECT INTERVAL 'aergjaerghiuaehrgiuhaerg';

SELECT INTERVAL '100000000000000000' YEAR;

SELECT INTERVAL '100000000000000000' MONTHS;

SELECT INTERVAL '4294967296' MONTHS;

SELECT INTERVAL '1294967296' MONTHS;

SELECT INTERVAL '1294967296months 1294967296months';

SELECT INTERVAL '1294967296months -1294967296months';

SELECT INTERVAL '-1294967296months -1294967296months';

SELECT INTERVAL '100000000000000000' DAYS;

SELECT INTERVAL '1294967296days 1294967296days';

SELECT INTERVAL '100000000000000000000' MSECS;

SELECT INTERVAL '100000000000000000' HOURS;

SELECT INTERVAL '2562047788' HOURS;

SELECT INTERVAL '2562047788 hours 2562047788 hours';

SELECT INTERVAL '9223372036854775' MSECS;

SELECT INTERVAL '9223372036854775' MSECS;

SELECT (7 * INTERVAL '1' DAY);

SELECT INTERVAL '1 millennium 2 centuries 1 decade 3 quarter';

SELECT INTERVAL '1 millenniums 2 century 1 dec 3 quarter';

SELECT INTERVAL '1 mil 2 cent 1 decs 3 quarter';

SELECT INTERVAL '1 mils 2 c 1 decades 3 quarter';

SELECT INTERVAL '-2147483647 months -2147483647 days -9223372036854775msecs';

SELECT INTERVAL '2147483647 months 2147483647 days 9223372036854775msecs';

SELECT INTERVAL '9223372036854775810' MSECS;

SELECT INTERVAL '9223372036854775810' MSECS;

SELECT INTERVAL 'aa' DAY;

SELECT INTERVAL '100' MONTHS AS DAY;

SELECT CAST('100' AS INTERVAL);

SELECT CAST('100 unknowns' AS INTERVAL);

SELECT CAST('100 months a' AS INTERVAL);

SELECT CAST('100 months axo' AS INTERVAL);

SELECT CAST('100 months agb' AS INTERVAL);

SELECT CAST('100 months agob' AS INTERVAL);

PRAGMA enable_verification;

SELECT CAST('1992-03-01' AS DATE) + INTERVAL '1' YEAR;

SELECT CAST('1992-03-01' AS DATE) + INTERVAL '0' MONTH;

SELECT CAST('1992-03-01' AS DATE) - INTERVAL '0' MONTH;

SELECT CAST('1992-03-01' AS DATE) + INTERVAL '1' MONTH;

SELECT CAST('1992-03-01' AS DATE) - INTERVAL '1' MONTH;

SELECT CAST('1992-03-01' AS DATE) + INTERVAL '2' MONTH;

SELECT CAST('1992-03-01' AS DATE) - INTERVAL '2' MONTH;

SELECT CAST('1992-03-01' AS DATE) + INTERVAL '3' MONTH;

SELECT CAST('1992-03-01' AS DATE) - INTERVAL '3' MONTH;

SELECT CAST('1992-03-01' AS DATE) + INTERVAL '4' MONTH;

SELECT CAST('1992-03-01' AS DATE) - INTERVAL '4' MONTH;

SELECT CAST('1992-03-01' AS DATE) + INTERVAL '5' MONTH;

SELECT CAST('1992-03-01' AS DATE) - INTERVAL '5' MONTH;

SELECT CAST('1992-03-01' AS DATE) + INTERVAL '6' MONTH;

SELECT CAST('1992-03-01' AS DATE) - INTERVAL '6' MONTH;

SELECT CAST('1992-03-01' AS DATE) + INTERVAL '7' MONTH;

SELECT CAST('1992-03-01' AS DATE) - INTERVAL '7' MONTH;

SELECT CAST('1992-03-01' AS DATE) + INTERVAL '8' MONTH;

SELECT CAST('1992-03-01' AS DATE) - INTERVAL '8' MONTH;

SELECT CAST('1992-03-01' AS DATE) + INTERVAL '9' MONTH;

SELECT CAST('1992-03-01' AS DATE) - INTERVAL '9' MONTH;

SELECT CAST('1992-03-01' AS DATE) + INTERVAL '10' MONTH;

SELECT CAST('1992-03-01' AS DATE) - INTERVAL '10' MONTH;

SELECT CAST('1992-03-01' AS DATE) + INTERVAL '11' MONTH;

SELECT CAST('1992-03-01' AS DATE) - INTERVAL '11' MONTH;

SELECT CAST('1992-03-01' AS DATE) + INTERVAL '12' MONTH;

SELECT CAST('1992-03-01' AS DATE) - INTERVAL '12' MONTH;

SELECT CAST('1992-03-01' AS DATE) + INTERVAL '10' DAY;

SELECT CAST('1992-03-01' AS DATE) - INTERVAL '10' DAY;

SELECT CAST('1993-03-01' AS DATE) - INTERVAL '10' DAY;

SELECT CAST('1993-03-01' AS DATE) + INTERVAL '1' SECOND;

SELECT CAST('1993-03-01' AS DATE) - INTERVAL '1' SECOND;

SELECT CAST('1993-03-01' AS DATE) + INTERVAL '1000000' SECOND;

SELECT CAST('1993-03-01' AS DATE) - INTERVAL '1000000' SECOND;

SELECT INTERVAL '1000000' SECOND - CAST('1993-03-01' AS DATE);

SELECT CAST('10:00:00' AS TIME) + INTERVAL '5' SECOND;

SELECT INTERVAL '5' SECOND + CAST('10:00:00' AS TIME);

SELECT CAST('10:00:00' AS TIME) - INTERVAL '5' SECOND;

SELECT CAST('10:00:00' AS TIME) + INTERVAL '1' DAY;

SELECT CAST('23:00:00' AS TIME) + INTERVAL '1' HOUR;

SELECT CAST('00:00:00' AS TIME) - INTERVAL '1' HOUR;

SELECT CAST('00:00:00' AS TIME) + INTERVAL '-1' HOUR;

SELECT CAST('12:15:37.123456-08' AS TIMETZ) + INTERVAL '2' HOUR;

SELECT CAST('12:15:37.123456-08' AS TIMETZ) + INTERVAL '22' HOUR;

SELECT CAST('12:15:37.123456-08' AS TIMETZ) + INTERVAL '2' DAY;

SELECT INTERVAL '2' HOUR + INTERVAL '12:15:37.123456-08' :: AS TIMETZ;

SELECT INTERVAL '22' HOUR + INTERVAL '12:15:37.123456-08' :: AS TIMETZ;

SELECT INTERVAL '2' DAY + INTERVAL '12:15:37.123456-08' :: AS TIMETZ;

SELECT CAST('12:15:37.123456-08' AS TIMETZ) - INTERVAL '2' HOUR;

SELECT CAST('12:15:37.123456-08' AS TIMETZ) - INTERVAL '22' HOUR;

SELECT CAST('12:15:37.123456-08' AS TIMETZ) - INTERVAL '2' DAY;

SELECT INTERVAL '2' HOUR - CAST('12:15:37.123456-08' AS TIMETZ);

SELECT CAST('1992-01-01 10:00:00' AS TIMESTAMP) + INTERVAL '1' DAY;

SELECT INTERVAL '1' DAY + CAST('1992-01-01 10:00:00' AS TIMESTAMP);

SELECT CAST('1992-01-01 10:00:05' AS TIMESTAMP) + INTERVAL '17 years 3 months 1 day 2 hours 1 minute 57 seconds';

SELECT CAST('1992-01-01 10:00:00' AS TIMESTAMP) - INTERVAL '1' DAY;

SELECT CAST('1993-01-01 00:00:00' AS TIMESTAMP) - CAST('1991-01-01 01:00:30' AS TIMESTAMP);

CREATE TABLE issue1998 (id INT, lhs TIMESTAMP, rhs TIMESTAMP);

INSERT INTO issue1998 VALUES (0, '2020-07-07 02:01:01', '2020-08-05 07:51:47'), (1, '2020-02-08 19:26:38', '2020-09-21 10:02:28'), (2, '2020-06-19 20:45:41', '2020-01-04 05:44:42'), (3, '2020-11-18 18:22:26', '2020-06-14 02:46:55'), (4, '2020-08-24 03:31:52', '2020-07-05 19:04:34');

SELECT id, lhs - rhs FROM issue1998 ORDER BY 1;

WITH d(y) AS (SELECT UNNEST(RANGE(CAST('2023-05-11 4:00:00' AS TIMESTAMP), CAST('2023-05-11 4:00:00' AS TIMESTAMP) + TO_DAYS(7), TO_HOURS(6)))) SELECT y, y - (CAST('2023-05-11 4:00:00' AS TIMESTAMP)) AS x FROM d WHERE x BETWEEN TO_HOURS(-44) AND TO_HOURS(44);

WITH d(y) AS (SELECT UNNEST(RANGE(CAST('2023-05-11 4:00:00' AS TIMESTAMP), CAST('2023-05-11 4:00:00' AS TIMESTAMP) + TO_DAYS(7), TO_HOURS(6)))) SELECT y, y - (CAST('2023-05-11 4:00:00' AS TIMESTAMP)) AS x FROM d WHERE x >= TO_HOURS(-44) AND x <= TO_HOURS(44);

PRAGMA enable_verification;

SELECT INTERVAL '30' DAY > INTERVAL '1' MONTH;

SELECT INTERVAL '30' DAY = INTERVAL '1' MONTH;

SELECT INTERVAL '30' DAY >= INTERVAL '1' MONTH;

SELECT INTERVAL '31' DAY > INTERVAL '1' MONTH;

SELECT INTERVAL '1' HOUR < INTERVAL '1' DAY;

SELECT INTERVAL '30' HOUR <= INTERVAL '1' DAY;

SELECT INTERVAL '1' HOUR = INTERVAL '1' HOUR;

SELECT INTERVAL '1' YEAR = INTERVAL '12' MONTH;

SELECT INTERVAL '28 days 432000 seconds' = INTERVAL '1 month 3 days';

CREATE TABLE issue14384 (i INTERVAL);

INSERT INTO issue14384 (i) VALUES ('2 years 3 months'), ('-1734799452 DAYS'), ('2 DAYS'), ('13 days'), ('1 month'), ('3 days');

SELECT i FROM issue14384 ORDER BY ALL;

SELECT * FROM issue14384 INNER JOIN (SELECT INTERVAL '1000' DAY AS col0 FROM issue14384) AS sub0 ON (issue14384.i < sub0.col0) ORDER BY ALL;

SELECT * FROM issue14384 INNER JOIN (SELECT INTERVAL '1000' DAY AS col0 FROM issue14384) AS sub0 ON (issue14384.i < sub0.col0) WHERE (NOT (issue14384.i <> issue14384.i)) ORDER BY ALL;

INSERT INTO issue14384 (i) VALUES ('1000 DAY'), ('28 days 432000 seconds'), ('1 month 3 days'), ('2147483647 months 2147483647 days 9223372036854775807 microseconds'), ('-2147483648 months -2147483648 days -9223372036854775807 microseconds'), (NULL);

SELECT i FROM issue14384 ORDER BY ALL;

PRAGMA enable_verification;

CREATE TABLE interval (t INTERVAL);

INSERT INTO interval VALUES (INTERVAL '20' DAY), (INTERVAL '1' YEAR), (INTERVAL '1' MONTH);

SELECT COUNT(DISTINCT t) FROM interval;

UPDATE interval SET t = INTERVAL '1' MONTH WHERE t = INTERVAL '20' DAY;

SELECT * FROM interval AS i1 JOIN interval AS i2 USING (t) ORDER BY 1;

SELECT * FROM interval AS i1 JOIN interval AS i2 ON (i1.t <> i2.t) ORDER BY 1;

SELECT * FROM interval AS i1 JOIN interval AS i2 ON (i1.t > i2.t) ORDER BY 1;

SELECT t, ROW_NUMBER() OVER (PARTITION BY t ORDER BY t) FROM interval ORDER BY 1, 2;

PRAGMA enable_verification;

SELECT COUNT(k), MIN(k), MAX(k) FROM (SELECT UNNEST(l) FROM (SELECT LIST(i) AS l FROM RANGE(0, 20000) AS tbl(i)) AS tbl2(l)) AS tbl3(k);

SELECT COUNT(k), MIN(k), MAX(k) FROM (SELECT UNNEST(l) FROM (SELECT LIST(CAST(i AS TEXT) || '0abcdefghijklmnopqrstuvwxyz') AS l FROM RANGE(0, 20000) AS tbl(i)) AS tbl2(l)) AS tbl3(k);

SELECT hits_0.access.page."pageTitle" AS "pageTitle", COUNT(DISTINCT CONCAT(ga_sessions."__distinct_key", 'x', hits_0.__row_id)) AS "hits_count", COUNT(DISTINCT CASE WHEN product_0.access."productQuantity" > 0 THEN CONCAT(ga_sessions."__distinct_key", 'x', hits_0."__row_id") END) AS "sold_count" FROM (SELECT UUID() AS __distinct_key, * FROM "data/parquet-testing/issue_6013.parquet" AS x) AS ga_sessions, (SELECT UUID() AS __row_id, x.access FROM (SELECT UNNEST(ga_sessions.hits)) AS x(access)) AS hits_0, (SELECT UUID() AS __row_id, x.access FROM (SELECT UNNEST(hits_0.access.product)) AS x(access)) AS product_0 GROUP BY 1 ORDER BY ALL LIMIT 2;

PRAGMA enable_verification;

CREATE TABLE a (b INT[]);

INSERT INTO a SELECT LIST(i) FROM RANGE(0, 10000) AS tbl(i);

SELECT COUNT(*), MIN(i), MAX(i), COUNT(i) FROM (SELECT UNNEST(b) FROM a) AS tbl(i);

INSERT INTO a SELECT LIST(i) FROM RANGE(0, 20000) AS tbl(i);

SELECT COUNT(*) FROM a;

SELECT COUNT(*), MIN(i), MAX(i), COUNT(i) FROM (SELECT UNNEST(b) FROM a) AS tbl(i);

INSERT INTO a VALUES (NULL), ([1, 2, 3]), ([4, 5, 6, 99999999]);

SELECT COUNT(*) FROM a;

SELECT COUNT(*), MIN(i), MAX(i), COUNT(i) FROM (SELECT UNNEST(b) FROM a) AS tbl(i);

INSERT INTO a SELECT LIST(i) FROM RANGE(0, 200000) AS tbl(i);

SELECT COUNT(*), MIN(i), MAX(i), COUNT(i) FROM (SELECT UNNEST(b) FROM a) AS tbl(i);

CREATE TABLE b AS SELECT CASE WHEN i < 100000 THEN 'a' ELSE 'b' END AS g, LIST(CASE WHEN i % 2 = 0 THEN NULL ELSE i END) AS l FROM RANGE(0, 200000) AS tbl(i) GROUP BY g;

SELECT g, COUNT(*), MIN(i), MAX(i), COUNT(i) FROM (SELECT g, UNNEST(l) FROM b) AS tbl(g, i) GROUP BY g ORDER BY g;

CREATE TABLE a AS SELECT CASE WHEN i < 100000 THEN 'a' ELSE 'b' END AS g, ARRAY_AGG(CASE WHEN i % 2 = 0 THEN [i - 2, i, i + 2] ELSE [i, i + 2] END) AS l FROM GENERATE_SERIES(0, 199999, 1) AS tbl(i) GROUP BY g;

SELECT g, COUNT(*), MIN(CAST(i AS TEXT)), MAX(CAST(i AS TEXT)), COUNT(i) FROM (SELECT g, UNNEST(l) FROM a) AS tbl(g, i) GROUP BY g ORDER BY g;

CREATE TABLE b AS SELECT CASE WHEN i < 100000 THEN 'a' ELSE 'b' END AS g, LIST(CASE WHEN i % 2 = 0 THEN [i - 2, i, i + 2, NULL] ELSE [i, i + 2, NULL] END) AS l FROM RANGE(0, 200000) AS tbl(i) GROUP BY g;

SELECT g, COUNT(*), MIN(CAST(i AS TEXT)), MAX(CAST(i AS TEXT)), COUNT(i) FROM (SELECT g, UNNEST(l) FROM b) AS tbl(g, i) GROUP BY g ORDER BY g;

CREATE TABLE c AS SELECT CASE WHEN i < 100000 THEN 'a' ELSE 'b' END AS g, [LIST(CASE WHEN i % 2 = 0 THEN NULL ELSE i END)] AS l FROM RANGE(0, 200000) AS tbl(i) GROUP BY g;

SELECT g, COUNT(*), MIN(i), MAX(i), COUNT(i) FROM (SELECT g, UNNEST(l[1]) FROM c) AS tbl(g, i) GROUP BY g ORDER BY g;

CREATE TABLE d AS SELECT CASE WHEN i < 100000 THEN 'a' ELSE 'b' END AS g, [LIST(i), LIST(i + 1), LIST(i + 2), LIST(i + 3)] AS l FROM RANGE(0, 200000) AS tbl(i) GROUP BY g;

SELECT g, COUNT(*), MIN(i1), MAX(i1), MIN(i2), MAX(i2), MIN(i3), MAX(i3), MIN(i4), MAX(i4) FROM (SELECT g, UNNEST(l[1]) AS i1, UNNEST(l[2]) AS i2, UNNEST(l[3]) AS i3, UNNEST(l[4]) AS i4 FROM d) AS tbl GROUP BY g ORDER BY g;

PRAGMA enable_verification;

SELECT COUNT(k), MIN(k), MAX(k) FROM (SELECT UNNEST(l) FROM (SELECT LIST(i) AS l FROM RANGE(0, 1000000) AS tbl(i)) AS tbl2(l)) AS tbl3(k);

PRAGMA enable_verification;

SELECT CASE WHEN 1 = 1 THEN [1] ELSE [2] END;

SELECT CASE WHEN 1 = 0 THEN [1] ELSE [2] END;

SELECT CASE WHEN i % 2 = 0 THEN [i] ELSE [-i] END FROM RANGE(0, 5) AS tbl(i);

CREATE TABLE a AS SELECT CASE WHEN i % 2 = 0 THEN NULL ELSE [i] END AS i FROM RANGE(0, 10) AS tbl(i);

SELECT * FROM a;

SELECT CASE WHEN i = [1] THEN [3] ELSE [4] END FROM a;

PRAGMA enable_verification;

SELECT [1] < [2];

SELECT [1] < [1];

SELECT NULL < [1];

SELECT [1] < NULL;

SELECT [1] <= [2];

SELECT [1] <= [1];

SELECT NULL <= [1];

SELECT [1] <= NULL;

SELECT [1] = [2];

SELECT [1] = [1];

SELECT NULL = [1];

SELECT [1] = NULL;

SELECT [1] <> [2];

SELECT [1] <> [1];

SELECT NULL <> [1];

SELECT [1] <> NULL;

SELECT [1] >= [2];

SELECT [1] >= [1];

SELECT NULL >= [1];

SELECT [1] >= NULL;

SELECT [1] > [2];

SELECT [1] > [1];

SELECT NULL > [1];

SELECT [1] > NULL;

CREATE VIEW list_int1 AS SELECT * FROM (VALUES ([1], [1]), ([1], [2]), ([2], [1]), (NULL, [1]), ([2], NULL), (NULL, NULL)) AS tbl(l, r);

SELECT l < r FROM list_int1;

SELECT l <= r FROM list_int1;

SELECT l = r FROM list_int1;

SELECT l <> r FROM list_int1;

SELECT l >= r FROM list_int1;

SELECT l > r FROM list_int1;

SELECT [1] < [1, 2];

SELECT [1] < [1];

SELECT NULL < [1];

SELECT [1] < NULL;

SELECT [1] <= [1, 2];

SELECT [1] <= [1];

SELECT NULL <= [1];

SELECT [1] <= NULL;

SELECT [1] = [1, 2];

SELECT [1] = [1];

SELECT NULL = [1];

SELECT [1] = NULL;

SELECT [1] <> [1, 2];

SELECT [1] <> [1];

SELECT NULL <> [1];

SELECT [1] <> NULL;

SELECT [1] >= [1, 2];

SELECT [1] >= [1];

SELECT NULL >= [1];

SELECT [1] >= NULL;

SELECT [1] > [1, 2];

SELECT [1] > [1];

SELECT NULL > [1];

SELECT [1] > NULL;

CREATE VIEW list_int AS SELECT * FROM (VALUES ([1], [1]), ([1], [1, 2]), ([1, 2], [1]), (NULL, [1]), ([1, 2], NULL), (NULL, NULL)) AS tbl(l, r);

SELECT l < r FROM list_int;

SELECT l <= r FROM list_int;

SELECT l = r FROM list_int;

SELECT l <> r FROM list_int;

SELECT l >= r FROM list_int;

SELECT l > r FROM list_int;

SELECT [] < [1, 2];

SELECT [] < [];

SELECT NULL < [];

SELECT [] < NULL;

SELECT [] <= [1, 2];

SELECT [] <= [];

SELECT NULL <= [];

SELECT [] <= NULL;

SELECT [] = [1, 2];

SELECT [] = [];

SELECT NULL = [];

SELECT [] = NULL;

SELECT [] <> [1, 2];

SELECT [] <> [];

SELECT NULL <> [];

SELECT [] <> NULL;

SELECT [] >= [1, 2];

SELECT [] >= [];

SELECT NULL >= [];

SELECT [] >= NULL;

SELECT [] > [1, 2];

SELECT [] > [];

SELECT NULL > [];

SELECT [] > NULL;

CREATE VIEW list_int_empty AS SELECT * FROM (VALUES ([], []), ([], [1, 2]), ([1, 2], []), (NULL, []), ([1, 2], NULL), (NULL, NULL)) AS tbl(l, r);

SELECT l < r FROM list_int_empty;

SELECT l <= r FROM list_int_empty;

SELECT l = r FROM list_int_empty;

SELECT l <> r FROM list_int_empty;

SELECT l >= r FROM list_int_empty;

SELECT l > r FROM list_int_empty;

SELECT ['duck'] < ['duck', 'goose'];

SELECT ['duck'] < ['duck'];

SELECT NULL < ['duck'];

SELECT ['duck'] < NULL;

SELECT ['duck'] <= ['duck', 'goose'];

SELECT ['duck'] <= ['duck'];

SELECT NULL <= ['duck'];

SELECT ['duck'] <= NULL;

SELECT ['duck'] = ['duck', 'goose'];

SELECT ['duck'] = ['duck'];

SELECT NULL = ['duck'];

SELECT ['duck'] = NULL;

SELECT ['duck'] <> ['duck', 'goose'];

SELECT ['duck'] <> ['duck'];

SELECT NULL <> ['duck'];

SELECT ['duck'] <> NULL;

SELECT ['duck'] >= ['duck', 'goose'];

SELECT ['duck'] >= ['duck'];

SELECT NULL >= ['duck'];

SELECT ['duck'] >= NULL;

SELECT ['duck'] > ['duck', 'goose'];

SELECT ['duck'] > ['duck'];

SELECT NULL > ['duck'];

SELECT ['duck'] > NULL;

CREATE VIEW list_str AS SELECT * FROM (VALUES (['duck'], ['duck']), (['duck'], ['duck', 'goose']), (['duck', 'goose'], ['duck']), (NULL, ['duck']), (['duck', 'goose'], NULL), (NULL, NULL)) AS tbl(l, r);

SELECT l < r FROM list_str;

SELECT l <= r FROM list_str;

SELECT l = r FROM list_str;

SELECT l <> r FROM list_str;

SELECT l >= r FROM list_str;

SELECT l > r FROM list_str;

SELECT [{'x': 'duck', 'y': 1}] < [{'x': 'duck', 'y': 1}, {'x': 'goose', 'y': 2}];

SELECT [{'x': 'duck', 'y': 1}] < [{'x': 'duck', 'y': 1}];

SELECT NULL < [{'x': 'duck', 'y': 1}];

SELECT [{'x': 'duck', 'y': 1}] < NULL;

SELECT [{'x': 'duck', 'y': 1}] <= [{'x': 'duck', 'y': 1}, {'x': 'goose', 'y': 2}];

SELECT [{'x': 'duck', 'y': 1}] <= [{'x': 'duck', 'y': 1}];

SELECT NULL <= [{'x': 'duck', 'y': 1}];

SELECT [{'x': 'duck', 'y': 1}] <= NULL;

SELECT [{'x': 'duck', 'y': 1}] = [{'x': 'duck', 'y': 1}, {'x': 'goose', 'y': 2}];

SELECT [{'x': 'duck', 'y': 1}] = [{'x': 'duck', 'y': 1}];

SELECT NULL = [{'x': 'duck', 'y': 1}];

SELECT [{'x': 'duck', 'y': 1}] = NULL;

SELECT [{'x': 'duck', 'y': 1}] <> [{'x': 'duck', 'y': 1}, {'x': 'goose', 'y': 2}];

SELECT [{'x': 'duck', 'y': 1}] <> [{'x': 'duck', 'y': 1}];

SELECT NULL <> [{'x': 'duck', 'y': 1}];

SELECT [{'x': 'duck', 'y': 1}] <> NULL;

SELECT [{'x': 'duck', 'y': 1}] >= [{'x': 'duck', 'y': 1}, {'x': 'goose', 'y': 2}];

SELECT [{'x': 'duck', 'y': 1}] >= [{'x': 'duck', 'y': 1}];

SELECT NULL >= [{'x': 'duck', 'y': 1}];

SELECT [{'x': 'duck', 'y': 1}] >= NULL;

SELECT [{'x': 'duck', 'y': 1}] > [{'x': 'duck', 'y': 1}, {'x': 'goose', 'y': 2}];

SELECT [{'x': 'duck', 'y': 1}] > [{'x': 'duck', 'y': 1}];

SELECT NULL > [{'x': 'duck', 'y': 1}];

SELECT [{'x': 'duck', 'y': 1}] > NULL;

CREATE VIEW list_of_struct AS SELECT * FROM (VALUES ([{'x': 'duck', 'y': 1}], [{'x': 'duck', 'y': 1}]), ([{'x': 'duck', 'y': 1}], [{'x': 'duck', 'y': 1}, {'x': 'goose', 'y': 2}]), ([{'x': 'duck', 'y': 1}, {'x': 'goose', 'y': 2}], [{'x': 'duck', 'y': 1}]), (NULL, [{'x': 'duck', 'y': 1}]), ([{'x': 'duck', 'y': 1}, {'x': 'goose', 'y': 2}], NULL), (NULL, NULL)) AS tbl(l, r);

SELECT l < r FROM list_of_struct;

SELECT l <= r FROM list_of_struct;

SELECT l = r FROM list_of_struct;

SELECT l <> r FROM list_of_struct;

SELECT l >= r FROM list_of_struct;

SELECT l > r FROM list_of_struct;

SELECT [a, a + 1, a + 2] < [1, 2, 3] FROM RANGE(0, 5) AS tbl(a);

SELECT [a, a + 1, a + 2] <= [1, 2, 3] FROM RANGE(0, 5) AS tbl(a);

SELECT [a, a + 1, a + 2] = [1, 2, 3] FROM RANGE(0, 5) AS tbl(a);

SELECT [a, a + 1, a + 2] <> [1, 2, 3] FROM RANGE(0, 5) AS tbl(a);

SELECT [a, a + 1, a + 2] >= [1, 2, 3] FROM RANGE(0, 5) AS tbl(a);

SELECT [a, a + 1, a + 2] > [1, 2, 3] FROM RANGE(0, 5) AS tbl(a);

PRAGMA enable_verification;

SELECT (SELECT LIST(l) FROM RANGE(0, 1999) AS tbl(l)) < (SELECT LIST(r) FROM RANGE(0, 2000) AS tbl(r));

SELECT (SELECT LIST(l) FROM RANGE(0, 1999) AS tbl(l)) < (SELECT LIST(l) FROM RANGE(0, 1999) AS tbl(l));

SELECT NULL < (SELECT LIST(l) FROM RANGE(0, 1999) AS tbl(l));

SELECT (SELECT LIST(l) FROM RANGE(0, 1999) AS tbl(l)) < NULL;

SELECT (SELECT LIST(l) FROM RANGE(0, 1999) AS tbl(l)) <= (SELECT LIST(r) FROM RANGE(0, 2000) AS tbl(r));

SELECT (SELECT LIST(l) FROM RANGE(0, 1999) AS tbl(l)) <= (SELECT LIST(l) FROM RANGE(0, 1999) AS tbl(l));

SELECT NULL <= (SELECT LIST(l) FROM RANGE(0, 1999) AS tbl(l));

SELECT (SELECT LIST(l) FROM RANGE(0, 1999) AS tbl(l)) <= NULL;

SELECT (SELECT LIST(l) FROM RANGE(0, 1999) AS tbl(l)) = (SELECT LIST(r) FROM RANGE(0, 2000) AS tbl(r));

SELECT (SELECT LIST(l) FROM RANGE(0, 1999) AS tbl(l)) = (SELECT LIST(l) FROM RANGE(0, 1999) AS tbl(l));

SELECT NULL = (SELECT LIST(l) FROM RANGE(0, 1999) AS tbl(l));

SELECT (SELECT LIST(l) FROM RANGE(0, 1999) AS tbl(l)) = NULL;

SELECT (SELECT LIST(l) FROM RANGE(0, 1999) AS tbl(l)) >= (SELECT LIST(r) FROM RANGE(0, 2000) AS tbl(r));

SELECT (SELECT LIST(l) FROM RANGE(0, 1999) AS tbl(l)) >= (SELECT LIST(l) FROM RANGE(0, 1999) AS tbl(l));

SELECT NULL >= (SELECT LIST(l) FROM RANGE(0, 1999) AS tbl(l));

SELECT (SELECT LIST(l) FROM RANGE(0, 1999) AS tbl(l)) >= NULL;

SELECT (SELECT LIST(l) FROM RANGE(0, 1999) AS tbl(l)) > (SELECT LIST(r) FROM RANGE(0, 2000) AS tbl(r));

SELECT (SELECT LIST(l) FROM RANGE(0, 1999) AS tbl(l)) > (SELECT LIST(l) FROM RANGE(0, 1999) AS tbl(l));

SELECT NULL > (SELECT LIST(l) FROM RANGE(0, 1999) AS tbl(l));

SELECT (SELECT LIST(l) FROM RANGE(0, 1999) AS tbl(l)) > NULL;

CREATE VIEW list_long AS SELECT * FROM (VALUES ((SELECT LIST(l) FROM RANGE(0, 1999) AS tbl(l)), (SELECT LIST(l) FROM RANGE(0, 1999) AS tbl(l))), ((SELECT LIST(l) FROM RANGE(0, 1999) AS tbl(l)), (SELECT LIST(r) FROM RANGE(0, 2000) AS tbl(r))), ((SELECT LIST(r) FROM RANGE(0, 2000) AS tbl(r)), (SELECT LIST(l) FROM RANGE(0, 1999) AS tbl(l))), (NULL, (SELECT LIST(l) FROM RANGE(0, 1999) AS tbl(l))), ((SELECT LIST(r) FROM RANGE(0, 2000) AS tbl(r)), NULL), (NULL, NULL)) AS tbl(l, r);

SELECT l < r FROM list_long;

SELECT l <= r FROM list_long;

SELECT l = r FROM list_long;

SELECT l >= r FROM list_long;

SELECT l > r FROM list_long;

PRAGMA enable_verification;

CREATE TABLE x1 (b INT[]);

SELECT b || NULL FROM x1;

SELECT NULL || NULL FROM x1;

SELECT NULL || b || NULL FROM x1;

SELECT b || NULL || b FROM x1;

SELECT CONCAT([42]);

SELECT CONCAT([42], [43], [], [44], [], [45]);

SELECT CONCAT(CAST([42] AS INT[1]), CAST([43] AS INT[1]), CAST(NULL AS INT[1]), CAST([44] AS INT[1]), CAST(NULL AS INT[1]), CAST([45] AS INT[1]));

SELECT LIST_CONCAT([42]);

SELECT LIST_CONCAT([42], [43], [], [44], [], [45]);

SELECT LIST_CONCAT(CAST([42] AS INT[1]), CAST([43] AS INT[1]), CAST(NULL AS INT[1]), CAST([44] AS INT[1]), CAST(NULL AS INT[1]), CAST([45] AS INT[1]));

SELECT LIST_CONCAT(CAST([1] AS INT[1]), CAST([2, 3] AS INT[2]));

PRAGMA enable_verification;

CREATE VIEW v1 AS SELECT * FROM (VALUES (1, [1, 2, 3]), (2, NULL), (3, [NULL, 3, 4])) AS tbl(a, b);

SELECT * FROM v1 AS v, v1 AS w ORDER BY v.a, w.a;

SELECT * FROM v1 AS v, v1 AS w WHERE v.a >= w.a ORDER BY v.a, w.a;

SELECT * FROM v1 AS v, v1 AS w WHERE v.a <> w.a ORDER BY v.a, w.a;

SELECT * FROM v1 AS v, v1 AS w WHERE v.a <> w.a OR v.a > w.a ORDER BY v.a, w.a;

CREATE VIEW v2 AS SELECT * FROM (VALUES (1, {'a': [1, 2, 3]}), (2, NULL), (3, {'a': [NULL, 3, 4]})) AS tbl(a, b);

SELECT * FROM v2 AS v, v2 AS w ORDER BY v.a, w.a;

SELECT * FROM v2 AS v, v2 AS w WHERE v.a >= w.a ORDER BY v.a, w.a;

SELECT * FROM v2 AS v, v2 AS w WHERE v.a <> w.a ORDER BY v.a, w.a;

SELECT * FROM v2 AS v, v2 AS w WHERE v.a <> w.a OR v.a > w.a ORDER BY v.a, w.a;

CREATE VIEW v3 AS SELECT * FROM (VALUES (1, [[1, 2], [3]]), (2, NULL), (3, [[NULL, 3], [4]])) AS tbl(a, b);

SELECT * FROM v3 AS v, v3 AS w ORDER BY v.a, w.a;

SELECT * FROM v3 AS v, v3 AS w WHERE v.a >= w.a ORDER BY v.a, w.a;

SELECT * FROM v3 AS v, v3 AS w WHERE v.a <> w.a ORDER BY v.a, w.a;

SELECT * FROM v3 AS v, v3 AS w WHERE v.a <> w.a OR v.a > w.a ORDER BY v.a, w.a;

PRAGMA enable_verification;

SELECT [1] IS NOT DISTINCT FROM [2];

SELECT [1] IS NOT DISTINCT FROM [1];

SELECT NULL IS NOT DISTINCT FROM [1];

SELECT [1] IS NOT DISTINCT FROM NULL;

SELECT [1] IS DISTINCT FROM [2];

SELECT [1] IS DISTINCT FROM [1];

SELECT NULL IS DISTINCT FROM [1];

SELECT [1] IS DISTINCT FROM NULL;

CREATE VIEW list_int1 AS SELECT * FROM (VALUES ([1], [1]), ([1], [2]), ([2], [1]), (NULL, [1]), ([2], NULL), (NULL, NULL)) AS tbl(l, r);

SELECT l IS NOT DISTINCT FROM r FROM list_int1;

SELECT l IS DISTINCT FROM r FROM list_int1;

SELECT [1] IS NOT DISTINCT FROM [1, 2];

SELECT [1] IS NOT DISTINCT FROM [1];

SELECT NULL IS NOT DISTINCT FROM [1];

SELECT [1] IS NOT DISTINCT FROM NULL;

SELECT [1] IS DISTINCT FROM [1, 2];

SELECT [1] IS DISTINCT FROM [1];

SELECT NULL IS DISTINCT FROM [1];

SELECT [1] IS DISTINCT FROM NULL;

CREATE VIEW list_int AS SELECT * FROM (VALUES ([1], [1]), ([1], [1, 2]), ([1, 2], [1]), (NULL, [1]), ([1, 2], NULL), (NULL, NULL)) AS tbl(l, r);

SELECT l IS NOT DISTINCT FROM r FROM list_int;

SELECT l IS DISTINCT FROM r FROM list_int;

SELECT [] IS NOT DISTINCT FROM [1, 2];

SELECT [] IS NOT DISTINCT FROM [];

SELECT NULL IS NOT DISTINCT FROM [];

SELECT [] IS NOT DISTINCT FROM NULL;

SELECT [] IS DISTINCT FROM [1, 2];

SELECT [] IS DISTINCT FROM [];

SELECT NULL IS DISTINCT FROM [];

SELECT [] IS DISTINCT FROM NULL;

CREATE VIEW list_int_empty AS SELECT * FROM (VALUES ([], []), ([], [1, 2]), ([1, 2], []), (NULL, []), ([1, 2], NULL), (NULL, NULL)) AS tbl(l, r);

SELECT l IS NOT DISTINCT FROM r FROM list_int_empty;

SELECT l IS DISTINCT FROM r FROM list_int_empty;

SELECT ['duck'] IS NOT DISTINCT FROM ['duck', 'goose'];

SELECT ['duck'] IS NOT DISTINCT FROM ['duck'];

SELECT NULL IS NOT DISTINCT FROM ['duck'];

SELECT ['duck'] IS NOT DISTINCT FROM NULL;

SELECT ['duck'] IS DISTINCT FROM ['duck', 'goose'];

SELECT ['duck'] IS DISTINCT FROM ['duck'];

SELECT NULL IS DISTINCT FROM ['duck'];

SELECT ['duck'] IS DISTINCT FROM NULL;

CREATE VIEW list_str AS SELECT * FROM (VALUES (['duck'], ['duck']), (['duck'], ['duck', 'goose']), (['duck', 'goose'], ['duck']), (NULL, ['duck']), (['duck', 'goose'], NULL), (NULL, NULL)) AS tbl(l, r);

SELECT l IS NOT DISTINCT FROM r FROM list_str;

SELECT l IS DISTINCT FROM r FROM list_str;

SELECT [{'x': 'duck', 'y': 1}] IS NOT DISTINCT FROM [{'x': 'duck', 'y': 1}, {'x': 'goose', 'y': 2}];

SELECT [{'x': 'duck', 'y': 1}] IS NOT DISTINCT FROM [{'x': 'duck', 'y': 1}];

SELECT NULL IS NOT DISTINCT FROM [{'x': 'duck', 'y': 1}];

SELECT [{'x': 'duck', 'y': 1}] IS NOT DISTINCT FROM NULL;

SELECT [{'x': 'duck', 'y': 1}] IS DISTINCT FROM [{'x': 'duck', 'y': 1}, {'x': 'goose', 'y': 2}];

SELECT [{'x': 'duck', 'y': 1}] IS DISTINCT FROM [{'x': 'duck', 'y': 1}];

SELECT NULL IS DISTINCT FROM [{'x': 'duck', 'y': 1}];

SELECT [{'x': 'duck', 'y': 1}] IS DISTINCT FROM NULL;

CREATE VIEW list_of_struct AS SELECT * FROM (VALUES ([{'x': 'duck', 'y': 1}], [{'x': 'duck', 'y': 1}]), ([{'x': 'duck', 'y': 1}], [{'x': 'duck', 'y': 1}, {'x': 'goose', 'y': 2}]), ([{'x': 'duck', 'y': 1}, {'x': 'goose', 'y': 2}], [{'x': 'duck', 'y': 1}]), (NULL, [{'x': 'duck', 'y': 1}]), ([{'x': 'duck', 'y': 1}, {'x': 'goose', 'y': 2}], NULL), (NULL, NULL)) AS tbl(l, r);

SELECT l IS NOT DISTINCT FROM r FROM list_of_struct;

SELECT l IS DISTINCT FROM r FROM list_of_struct;

SELECT CASE WHEN a < 4 THEN [a, a + 1, a + 2] ELSE NULL END IS NOT DISTINCT FROM [1, 2, 3] FROM RANGE(0, 5) AS tbl(a);

SELECT CASE WHEN a < 4 THEN [a, a + 1, a + 2] ELSE NULL END IS DISTINCT FROM [1, 2, 3] FROM RANGE(0, 5) AS tbl(a);

PRAGMA enable_verification;

SELECT STR_SPLIT(GROUP_CONCAT(NULL, ','), ',')[100] FROM RANGE(0, 10);

CREATE TABLE a AS SELECT [{'a': 3, 'b': NULL}, NULL, {'a': NULL, 'b': 'hello'}] AS l;

SELECT * FROM a;

SELECT l[1] FROM a;

SELECT l[2] FROM a;

SELECT l[3] FROM a;

CREATE TABLE nested AS SELECT [{'a': 3, 'b': {'x': 3, 'y': [1, 2, 3]}}, NULL, {'a': NULL, 'b': {'x': NULL, 'y': [4, 5]}}, {'a': 27, 'b': NULL}, {'a': NULL, 'b': {'x': 7, 'y': NULL}}] AS l;

SELECT * FROM nested;

SELECT l[1] FROM nested;

SELECT l[2] FROM nested;

SELECT l[3] FROM nested;

SELECT l[4] FROM nested;

SELECT l[5] FROM nested;

SELECT l[5]['b'] FROM nested;

PRAGMA enable_verification;

PRAGMA enable_verification;

CREATE TABLE a AS SELECT LIST_EXTRACT(["${colname}"], 1) AS col FROM all_types;

SELECT COUNT(*) FROM a JOIN all_types ON (a.col = all_types."${colname}");

PRAGMA enable_verification;

CREATE TABLE a (id INT PRIMARY KEY, c INT[]);

INSERT INTO a VALUES (1, [1, 2, 3]);

SELECT * FROM a WHERE id = 1;

INSERT INTO a VALUES (2, NULL), (3, [NULL]), (4, [4, 5, NULL, 6]);

SELECT * FROM a WHERE id = 2;

SELECT * FROM a WHERE id = 3;

SELECT * FROM a WHERE id = 4;

DROP TABLE a;

CREATE TABLE a (id INT, c INT[]);

INSERT INTO a VALUES (1, [1, 2, 3]), (2, NULL), (3, [NULL]), (4, [4, 5, NULL, 6]);

CREATE INDEX a_index ON a(id);

SELECT * FROM a WHERE id = 1;

SELECT * FROM a WHERE id = 2;

SELECT * FROM a WHERE id = 3;

SELECT * FROM a WHERE id = 4;

INSERT INTO a VALUES (1, [4, 5, NULL]), (1, NULL), (1, [NULL]), (1, [7, 8, 9, 10, 11, 12, 13, 14, 15]);

SELECT * FROM a WHERE id = 1 ORDER BY c[1] NULLS FIRST;

CREATE TABLE test (l INT[]);

INSERT INTO test VALUES ([1, 2, 3]), ([NULL]), (NULL), ([-2, NULL, 4, 2]);

SELECT LIST_EXTRACT(l, 0) FROM test;

SELECT LIST_EXTRACT(l, 1) FROM test;

SELECT l[ : ] FROM test;

SELECT l[0 : 0] FROM test;

SELECT l[0 : 1] FROM test;

SELECT l[1 : 0] FROM test;

PRAGMA enable_verification;

CREATE TABLE a (id INT PRIMARY KEY, c INT[]);

INSERT INTO a VALUES (1, [1, 2, 3]);

BEGIN;

INSERT INTO a SELECT i AS id, NULL AS c FROM RANGE(2, 250000, 1) AS tbl(i);

INSERT INTO a VALUES (1, [4, 5]);

ROLLBACK;

SELECT c FROM a WHERE id = 1;

SELECT * FROM a;

BEGIN;

INSERT INTO a SELECT i AS id, [-i, i, 33] AS c FROM RANGE(-2, -250000, -1) AS tbl(i);

INSERT INTO a VALUES (1, [4, 5]);

ROLLBACK;

SELECT c FROM a WHERE id = 1;

SELECT * FROM a;

BEGIN;

INSERT INTO a SELECT i AS id, [1, 2, 3, 4, 5, i, -33] AS c FROM RANGE(250000, 500000, 1) AS tbl(i);

INSERT INTO a VALUES (1, [4, 5]);

ROLLBACK;

SELECT c FROM a WHERE id = 1;

SELECT * FROM a;

INSERT INTO a VALUES (2, [4, 5]);

INSERT INTO a VALUES (3, NULL);

INSERT INTO a VALUES (4, [NULL]);

SELECT * FROM a;

PRAGMA enable_verification;

CREATE TABLE a (id INT PRIMARY KEY, c INT[][]);

INSERT INTO a VALUES (1, [[1, 2, 3], [4, 5]]);

BEGIN;

INSERT INTO a SELECT i AS id, NULL AS c FROM RANGE(2, 250000, 1) AS tbl(i);

INSERT INTO a VALUES (1, [[4, 5]]);

ROLLBACK;

SELECT c FROM a WHERE id = 1;

SELECT * FROM a;

BEGIN;

INSERT INTO a SELECT i AS id, [[-i], [i, 33]] AS c FROM RANGE(-2, -250000, -1) AS tbl(i);

INSERT INTO a VALUES (1, [[4, 5]]);

ROLLBACK;

SELECT c FROM a WHERE id = 1;

SELECT * FROM a;

BEGIN;

INSERT INTO a SELECT i AS id, [[1, 2], [3, 4], [5, i, -33]] AS c FROM RANGE(250000, 500000, 1) AS tbl(i);

INSERT INTO a VALUES (1, [[4, 5]]);

ROLLBACK;

SELECT c FROM a WHERE id = 1;

SELECT * FROM a;

INSERT INTO a VALUES (2, [[4, 5]]);

INSERT INTO a VALUES (3, NULL);

INSERT INTO a VALUES (4, [NULL]);

INSERT INTO a VALUES (5, [[NULL], [NULL]]);

SELECT * FROM a;

PRAGMA enable_verification;

CREATE TABLE a (id INT PRIMARY KEY, c INT[]);

INSERT INTO a VALUES (1, [1, 2, 3]);

BEGIN;

INSERT INTO a SELECT i AS id, NULL AS c FROM RANGE(2, 2500, 1) AS tbl(i);

INSERT INTO a VALUES (1, [4, 5]);

ROLLBACK;

SELECT c FROM a WHERE id = 1;

SELECT * FROM a;

BEGIN;

INSERT INTO a SELECT i AS id, [-i, i, 33] AS c FROM RANGE(-2, -2500, -1) AS tbl(i);

INSERT INTO a VALUES (1, [4, 5]);

ROLLBACK;

SELECT c FROM a WHERE id = 1;

SELECT * FROM a;

BEGIN;

INSERT INTO a SELECT i AS id, [1, 2, 3, 4, 5, i, -33] AS c FROM RANGE(2500, 5000, 1) AS tbl(i);

INSERT INTO a VALUES (1, [4, 5]);

ROLLBACK;

SELECT c FROM a WHERE id = 1;

SELECT * FROM a;

INSERT INTO a VALUES (2, [4, 5]);

INSERT INTO a VALUES (3, NULL);

INSERT INTO a VALUES (4, [NULL]);

SELECT * FROM a;

PRAGMA enable_verification;

CREATE TABLE a (id INT PRIMARY KEY, c INT[][]);

INSERT INTO a VALUES (1, [[1, 2, 3], [4, 5]]);

BEGIN;

INSERT INTO a SELECT i AS id, NULL AS c FROM RANGE(2, 2500, 1) AS tbl(i);

INSERT INTO a VALUES (1, [[4, 5]]);

ROLLBACK;

SELECT c FROM a WHERE id = 1;

SELECT * FROM a;

BEGIN;

INSERT INTO a SELECT i AS id, [[-i], [i, 33]] AS c FROM RANGE(-2, -2500, -1) AS tbl(i);

INSERT INTO a VALUES (1, [[4, 5]]);

ROLLBACK;

SELECT c FROM a WHERE id = 1;

SELECT * FROM a;

BEGIN;

INSERT INTO a SELECT i AS id, [[1, 2], [3, 4], [5, i, -33]] AS c FROM RANGE(2500, 5000, 1) AS tbl(i);

INSERT INTO a VALUES (1, [[4, 5]]);

ROLLBACK;

SELECT c FROM a WHERE id = 1;

SELECT * FROM a;

INSERT INTO a VALUES (2, [[4, 5]]);

INSERT INTO a VALUES (3, NULL);

INSERT INTO a VALUES (4, [NULL]);

INSERT INTO a VALUES (5, [[NULL], [NULL]]);

SELECT * FROM a;

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

CREATE VIEW list_int AS SELECT * FROM (VALUES ([1]), ([1, 2]), ([1, NULL]), ([NULL, 2]), ([NULL, NULL]), ([NULL]), (NULL)) AS tbl(i);

SELECT lhs.i, rhs.i, lhs.i < rhs.i, lhs.i <= rhs.i, lhs.i = rhs.i, lhs.i <> rhs.i, lhs.i > rhs.i, lhs.i >= rhs.i, lhs.i IS NOT DISTINCT FROM rhs.i, lhs.i IS DISTINCT FROM rhs.i FROM list_int AS lhs, list_int AS rhs ORDER BY 1, 2;

CREATE VIEW list_str AS SELECT * FROM (VALUES (['duck']), (['duck', 'goose']), (['duck', NULL]), ([NULL, 'goose']), ([NULL, NULL]), ([NULL]), (NULL)) AS tbl(i);

SELECT lhs.i, rhs.i, lhs.i < rhs.i, lhs.i <= rhs.i, lhs.i = rhs.i, lhs.i <> rhs.i, lhs.i > rhs.i, lhs.i >= rhs.i, lhs.i IS NOT DISTINCT FROM rhs.i, lhs.i IS DISTINCT FROM rhs.i FROM list_str AS lhs, list_str AS rhs ORDER BY 1, 2;

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

CREATE VIEW list_int AS SELECT * FROM (VALUES (([1]), ([NULL]))) AS tbl(a, b);

SELECT tbl.a, tbl.b, tbl.a < tbl.b, tbl.a <= tbl.b, tbl.a = tbl.b, tbl.a <> tbl.b, tbl.a > tbl.b, tbl.a >= tbl.b, tbl.a IS NOT DISTINCT FROM tbl.b, tbl.a IS DISTINCT FROM tbl.b FROM list_int AS tbl;

PRAGMA enable_verification;

CREATE TABLE a AS SELECT [{'a': 3, 'b': 'hello'}, NULL, {'a': NULL, 'b': 'thisisalongstring'}] AS l;

SELECT * FROM a;

INSERT INTO a VALUES (NULL);

SELECT * FROM a;

INSERT INTO a VALUES ([{'a': 17, 'b': 'world'}]);

SELECT * FROM a;

SELECT UNNEST(l) FROM a;

CREATE TABLE b AS SELECT [{'a': {'a1': [1, 2, 3], 'a2': 17}, 'b': 'hello'}, NULL, {'a': {'a1': [NULL, 4, 5], 'a2': NULL}, 'b': 'thisisalongstring'}, {'a': {'a1': NULL, 'a2': 22}, 'b': NULL}, {'a': NULL, 'b': 'aaaaaaaaaaaaaaaaaaaaaaaa'}] AS l;

SELECT * FROM b;

SELECT UNNEST(l) FROM b;

SELECT UNNEST(l)['a']['a1'] FROM b;

SELECT UNNEST(l)['a']['a2'] FROM b;

INSERT INTO b VALUES (NULL), ([{'a': {'a1': [6, 7, 8, 9], 'a2': 17}, 'b': 'world1'}, NULL, {'a': {'a1': [10, 11, 12], 'a2': 22}, 'b': 'world2'}]);

SELECT * FROM b;

SELECT UNNEST(l) FROM b;

SELECT UNNEST(l)['a'] FROM b;

SELECT UNNEST(l)['a']['a1'] FROM b;

PRAGMA enable_verification;

SELECT CAST(REPEAT('[{"a":', 100000) AS INT[]);

SELECT STATS([3, 4]);

SELECT [3, 4];

SELECT STATS(CAST(NULL AS INT[]));

SELECT CAST(NULL AS INT[]);

SELECT STATS(['hello', 'world']);

SELECT STATS([INTERVAL '1' YEAR, INTERVAL '2' YEAR]);

SELECT ['hello', 'world'];

SELECT [INTERVAL '1' YEAR, INTERVAL '2' YEAR];

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (3), (4);

SELECT STATS([i]) FROM integers LIMIT 1;

SELECT [i] FROM integers;

INSERT INTO integers VALUES (NULL);

SELECT STATS([i]) FROM integers LIMIT 1;

SELECT [i] FROM integers;

CREATE TABLE lists AS SELECT [3, 4] AS l;

SELECT STATS(l[1]) FROM lists LIMIT 1;

SELECT l[1] FROM lists;

INSERT INTO lists VALUES ([]);

SELECT STATS(l[1]) FROM lists LIMIT 1;

SELECT l[1] FROM lists;

INSERT INTO lists VALUES (NULL);

SELECT STATS(l[1]) FROM lists LIMIT 1;

SELECT l[1] FROM lists;

INSERT INTO lists VALUES ([NULL]);

SELECT STATS(l[1]) FROM lists LIMIT 1;

SELECT l[1] FROM lists;

CREATE TABLE a (b INT[]);

INSERT INTO a VALUES ([1, 2]), (NULL), ([3, 4, 5, 6]), ([NULL, 7]);

SELECT * FROM a;

CREATE TABLE b (b INT[][]);

INSERT INTO b VALUES ([[1, 2], [3, 4]]), (NULL), ([NULL, [7, 8, NULL], [2, 3]]), ([[NULL, 6], NULL, [1, 2, NULL]]);

SELECT * FROM b;

CREATE TABLE c (b TEXT[]);

INSERT INTO c VALUES (['hello', 'world']), (NULL), (['fejwfoaejwfoijwafew', 'b', 'c']), ([NULL, 'XXXXXXXXXXXXXXXXXXXXXXXX']);

SELECT * FROM c;

CREATE TABLE lists (i INT[]);

INSERT INTO lists SELECT [i, NULL, i + 1] FROM RANGE(0, 10000) AS tbl(i);

DELETE FROM lists WHERE i[1] <= 9995;

SELECT * FROM lists;

DROP TABLE lists;

CREATE TABLE lists (i INT[][]);

INSERT INTO lists SELECT [[i], NULL, [i + 1, 4], [NULL, 1, 2]] FROM RANGE(0, 10000) AS tbl(i);

DELETE FROM lists WHERE i[1][1] <= 9995;

SELECT * FROM lists;

SELECT CONCAT_WS('.', LIST_REVERSE(STR_SPLIT('1.2..3', '.')));

CREATE TABLE a (id INT, b INT[]);

INSERT INTO a VALUES (0, [1, 2]), (1, NULL), (2, [3, 4, 5, 6]), (3, [NULL, 7]);

SELECT * FROM a ORDER BY id;

DELETE FROM a WHERE b[1] = 1;

SELECT * FROM a ORDER BY id;

UPDATE a SET b = [7, 8, 9] WHERE b IS NULL;

SELECT * FROM a ORDER BY id;

UPDATE a SET b = NULL WHERE id >= 2;

SELECT * FROM a ORDER BY id;

UPDATE a SET b = [NULL] WHERE id = 2;

SELECT * FROM a ORDER BY id;

UPDATE a SET b = NULL;

SELECT * FROM a ORDER BY id;

CREATE TABLE a (id INT, b TEXT[]);

INSERT INTO a VALUES (0, ['hello world', 'bananas']), (1, NULL), (2, ['3, 4, 5, 6', 'numbers']), (3, [NULL, 'not a number']);

SELECT * FROM a ORDER BY id;

DELETE FROM a WHERE b[1][1] = '3';

SELECT * FROM a ORDER BY id;

UPDATE a SET b = ['very very long string', '123', 'test 123 123'] WHERE b IS NULL;

SELECT * FROM a ORDER BY id;

UPDATE a SET b = NULL WHERE id >= 2;

SELECT * FROM a ORDER BY id;

UPDATE a SET b = [NULL, 'hello again', NULL] WHERE id = 1;

SELECT * FROM a ORDER BY id;

UPDATE a SET b = NULL;

SELECT * FROM a ORDER BY id;

PRAGMA enable_verification;

CREATE TABLE lists (id INT, i INT[]);

INSERT INTO lists VALUES (1, [1, 2, 3]), (2, [4, 5]), (3, [NULL]);

SELECT * FROM lists ORDER BY id;

UPDATE lists SET i = [5, 6, 7] FROM lists AS l2 WHERE lists.id = 1;

SELECT * FROM lists ORDER BY id;

CREATE TABLE t1 AS SELECT i % 5000 AS g, LIST(i) AS l FROM RANGE(0, 20000) AS tbl(i) GROUP BY g;

SELECT COUNT(*) FROM t1;

SELECT COUNT(k), MIN(k), MAX(k) FROM (SELECT UNNEST(l) FROM t1) AS tbl(k);

CREATE TABLE t2 AS SELECT i % 5000 AS g, LIST('thisisalongprefix' || CAST(i AS TEXT)) AS l FROM RANGE(0, 20000) AS tbl(i) GROUP BY g;

SELECT COUNT(*) FROM t2;

SELECT COUNT(k), MIN(k), MAX(k) FROM (SELECT UNNEST(l) FROM t2) AS tbl(k);

CREATE TABLE t3 AS SELECT i % 5000 AS g, LIST({'a': i, 'b': i + 2}) AS l FROM RANGE(0, 20000) AS tbl(i) GROUP BY g;

SELECT COUNT(*) FROM t3;

SELECT COUNT(k), MIN(k['a']), MAX(k['a']), MIN(k['b']), MAX(k['b']) FROM (SELECT UNNEST(l) FROM t3) AS tbl(k);

CREATE TABLE t4 AS SELECT i % 5000 AS g, LIST([i, i + 2]) AS l FROM RANGE(0, 20000) AS tbl(i) GROUP BY g;

SELECT COUNT(*) FROM t4;

SELECT COUNT(k), MIN(k[1]), MAX(k[1]), MIN(k[2]), MAX(k[2]) FROM (SELECT UNNEST(l) FROM t4) AS tbl(k);

SELECT [CAST(100 AS UTINYINT), CAST(10000 AS SMALLINT)];

SELECT [CAST(100 AS USMALLINT), CAST(10000 AS INT)];

SELECT [CAST(100 AS USMALLINT), 10000.5];

SELECT [CAST(100 AS USMALLINT), CAST(0.5 AS DOUBLE)];

SELECT [-CAST(100 AS TINYINT), CAST(200 AS UTINYINT)];

SELECT [-CAST(100 AS SMALLINT), CAST(50000 AS USMALLINT)];

SELECT [-CAST(100 AS INT), CAST(3000000000 AS UINTEGER)];

SELECT [-CAST(100 AS BIGINT), CAST(9999999999999999999 AS UBIGINT)];

CREATE TABLE a (id INT, b INT[][]);

INSERT INTO a VALUES (0, [[1, 2], NULL, [3, NULL]]), (1, NULL), (2, [[4, 5, 6, 7], [NULL]]);

SELECT * FROM a ORDER BY id;

SELECT id, b[1] FROM a ORDER BY id;

SELECT id, b[1][1] FROM a ORDER BY id;

SELECT id, b[0][0] FROM a ORDER BY id;

SELECT id, b[0][1] FROM a ORDER BY id;

SELECT id, b[1][0] FROM a ORDER BY id;

SELECT id, b[1][4] FROM a ORDER BY id;

SELECT * FROM a WHERE b[1][1] = 1;

SELECT * FROM a WHERE b[1][1] = 1 OR b[1][2] = 2;

CREATE TABLE nested (id INT, b INT[][][]);

INSERT INTO nested VALUES (0, [[[1, 2], [3, 4]], NULL, [NULL, [2, 5]]]), (1, NULL), (2, [[[6, 7, 8, 9], [10, 11], [12, 13]], NULL, [NULL, [10, 11], [12, 13]]]);

SELECT * FROM nested ORDER BY id;

SELECT id, b[1] FROM nested ORDER BY id;

SELECT id, b[1][1] FROM nested ORDER BY id;

SELECT id, b[1][3] FROM nested ORDER BY id;

SELECT id, b[1][3][1] FROM nested ORDER BY id;

SELECT id, b[1][3][4] FROM nested ORDER BY id;

CREATE TABLE a (id INT, b INT[][]);

INSERT INTO a VALUES (0, [[1, 2], NULL, [3, NULL]]), (1, NULL), (2, [[4, 5, 6, 7], [NULL]]);

SELECT * FROM a ORDER BY id;

SELECT id, b[0 : 1] FROM a ORDER BY id;

SELECT id, b[0 : 2] FROM a ORDER BY id;

SELECT id, b[1 : 1] FROM a ORDER BY id;

SELECT id, b[1 : 2] FROM a ORDER BY id;

SELECT id, b[0 : 0] FROM a ORDER BY id;

SELECT id, b[ : ] FROM a ORDER BY id;

SELECT id, LIST_EXTRACT(b[ : ], 0) FROM a ORDER BY id;

CREATE TABLE a (id INT, b INT[][]);

INSERT INTO a VALUES (0, [[1, 2], NULL, [3, NULL]]), (1, NULL), (2, [[4, 5, 6, 7], [NULL]]);

SELECT * FROM a ORDER BY id;

UPDATE a SET b = [[7, 8, 9], [10, 11]] WHERE b IS NULL;

SELECT * FROM a ORDER BY id;

UPDATE a SET b = NULL WHERE id >= 1;

SELECT * FROM a ORDER BY id;

UPDATE a SET b = [[NULL], NULL, [NULL]] WHERE id = 1;

SELECT * FROM a ORDER BY id;

UPDATE a SET b = NULL;

SELECT * FROM a ORDER BY id;

PRAGMA enable_verification;

SELECT UNNEST([[1, 2, 3]], recursive := TRUE);

SELECT UNNEST([[[[[1, 2], [3, 4]], [[5]]], [[[]]]]], recursive := TRUE);

SELECT UNNEST([[[[[1, 2], [3, 4]], [[5]]], [[[]]]]], RECURSIVE := TRUE);

SELECT UNNEST([[[[[1, 2], [3, 4]], [[5]]], [[[]]]]], max_depth := 1);

SELECT UNNEST([[[[[1, 2], [3, 4]], [[5]]], [[[]]]]], max_depth := 2);

SELECT UNNEST([[[[[1, 2], [3, 4]], [[5]]], [[[]]]]], max_depth := 3);

SELECT UNNEST([[[[[1, 2], [3, 4]], [[5]]], [[[]]]]], max_depth := 4);

SELECT UNNEST([[[[[1, 2], [3, 4]], [[5]]], [[[]]]]], max_depth := 5);

SELECT UNNEST([[1, 2, 3], [4, 5]]) AS a, UNNEST([1, 2, 3]) AS b;

SELECT UNNEST([[1, 2, 3], [4, 5]], recursive := TRUE) AS a, UNNEST([1, 2, 3]) AS b ORDER BY a;

SELECT UNNEST([[1, 2, 3], [4, 5]], recursive := TRUE) AS a, UNNEST([1, 2, 3]) AS b ORDER BY a;

SELECT UNNEST(a), b FROM (SELECT UNNEST([[1, 2, 3], [4, 5]]) AS a, UNNEST([1, 2, 3]) AS b);

SELECT UNNEST(UNNEST([[1, 2, 3]]));

SELECT UNNEST(UNNEST([[1, 2, 3]]));

SELECT UNNEST([1, 2, 3], 'hello');

SELECT UNNEST([1, 2, 3], recursive := 'hello');

SELECT UNNEST([1, 2, 3], rec := TRUE);

SELECT UNNEST([1, 2, 3], recursive := TRUE, recursive := TRUE);

SELECT UNNEST([1, 2, 3], max_depth := 9999, recursive := TRUE);

SELECT UNNEST([1, 2, 3], max_depth := 0);

PRAGMA enable_verification;

SELECT SUM(a) FROM UNNEST(RANGE(1, 11)) AS t(a);

CREATE OR REPLACE FUNCTION rnv(a, b) AS (SELECT a + b * PI());

SELECT RNV(0, 1) FROM UNNEST(RANGE(0, 2));

PRAGMA enable_verification;

SELECT id, UNNEST(i), UNNEST(j) FROM (VALUES (3, ['hello', NULL, 'world'], [NULL])) AS tbl(id, i, j);

SELECT id, UNNEST(i), UNNEST(j) FROM (VALUES (1, ['abcd', 'efgh'], ['123456789abcd']), (2, NULL, ['123456789efgh', '123456789klmnop']), (3, ['hello', NULL, 'world'], [NULL])) AS tbl(id, i, j);

SELECT id, UNNEST(i), UNNEST(j) FROM (VALUES (1, [1, 2], [10]), (2, NULL, [11, 12]), (3, [3, NULL, 4], [NULL])) AS tbl(id, i, j);

SELECT UNNEST(i) FROM (VALUES ([[1, 2, 3], [4, 5]]), (NULL), ([[6, 7], NULL, [8, 9, NULL]])) AS tbl(i);

SELECT UNNEST(i), UNNEST(j) FROM (VALUES ([[1, 2, 3], [4, 5]], [[10, 11], [12, 13]]), (NULL, [[14, 15], [NULL, 16], NULL, NULL]), ([[6, 7], NULL, [8, 9, NULL]], NULL)) AS tbl(i, j);

SELECT UNNEST(i) FROM (VALUES ([{'a': 10, 'b': 1}, {'a': 11, 'b': 2}]), (NULL), ([{'a': 12, 'b': 3}, NULL, {'a': NULL, 'b': NULL}])) AS tbl(i);

SELECT UNNEST(i) FROM (VALUES ([{'a': {'a1': 7, 'a2': NULL}, 'b': 1}, {'a': {'a1': 9, 'a2': 10}, 'b': 2}]), (NULL), ([{'a': {'a1': 11, 'a2': 12}, 'b': 3}, NULL, {'a': NULL, 'b': NULL}, {'a': {'a1': NULL, 'a2': NULL}, 'b': 3}])) AS tbl(i);

SELECT id, UNNEST(i), UNNEST(j) FROM (VALUES (1, [{'a': 1, 'b': NULL}, {'a': 2, 'b': 'hello'}], [[1, 2, 3], [4, 5]]), (2, NULL, [[11, 12], NULL]), (3, [{'a': 3, 'b': 'test the best unnest fest'}, NULL, {'a': 4, 'b': 'abcd'}], [NULL])) AS tbl(id, i, j);

SELECT id, UNNEST(i), UNNEST(j) FROM (VALUES (1, [{'a': [1, 2], 'b': NULL}, {'a': NULL, 'b': 'hello'}], [[1, 2, 3], [4, 5]]), (2, NULL, [[11, 12], NULL]), (3, [{'a': [NULL, 4, 5], 'b': 'test the best unnest fest'}, NULL, {'a': [6, 7, NULL, 9], 'b': 'abcd'}], [NULL])) AS tbl(id, i, j);

SELECT id, UNNEST(i) FROM (VALUES (1, CAST([[1, 2], [3, 4]] AS INT[2][])), (2, CAST([[5, NULL], [7, 8]] AS INT[2][])), (3, CAST(NULL AS INT[2][])), (4, CAST([[9, 10], NULL, [11, 12]] AS INT[2][])), (5, CAST([] AS INT[2][]))) AS tbl(id, i);

SELECT id, UNNEST(i) FROM (VALUES (1, {'a': CAST([1, 2] AS INT[2]), 'b': CAST([3, 4] AS INT[2])}), (2, {'a': CAST([5, NULL] AS INT[2]), 'b': CAST([7, 8] AS INT[2])}), (3, {'a': CAST(NULL AS INT[2]), 'b': CAST([9, 10] AS INT[2])}), (4, {'a': CAST([11, 12] AS INT[2]), 'b': CAST(NULL AS INT[2])}), (5, {'a': NULL, 'b': CAST([13, 14] AS INT[2])})) AS tbl(id, i);

PRAGMA enable_verification;

CREATE TABLE tbl1 (str TEXT, str_list TEXT[]);

INSERT INTO tbl1 VALUES ('a', ['vibrant', 'plant', 'day']);

CREATE TABLE tbl2 (data STRUCT(str TEXT, str_list TEXT[]));

INSERT INTO tbl2 VALUES (('a', ['sunny', 'vibrant', 'day']));

SELECT UNNEST(data) FROM tbl2;

SELECT UNNEST(str_list) FROM tbl1;

SELECT UNNEST(data) FROM tbl2 INTERSECT SELECT * FROM tbl1;

CREATE TABLE test (id TEXT, b STRUCT("n" TEXT, "v" STRUCT("n" TEXT, "v" BIGINT)[])[]);

SELECT DISTINCT * FROM (SELECT id, UNNEST(b, recursive := TRUE) FROM test);

PRAGMA enable_verification;

SELECT 42 HAVING UNNEST([1, 2, 3]);

SELECT ROW_NUMBER() OVER () QUALIFY UNNEST([1, 2, 3]);

PRAGMA enable_verification;

CREATE TABLE t1 AS SELECT [] AS i FROM RANGE(0, 10000);

INSERT INTO t1 SELECT [range] AS i FROM RANGE(0, 10);

SELECT UNNEST(i) FROM t1;

PRAGMA enable_verification;

CREATE TABLE people (id INT, name TEXT, address TEXT[]);

INSERT INTO people VALUES (1, 'Zuckerberg', ['New York']);

INSERT INTO people VALUES (2, 'Bezos', ['Washington', 'Space']);

INSERT INTO people VALUES (3, 'Tim', NULL);

INSERT INTO people VALUES (4, 'Elvis', [NULL, NULL, NULL]);

INSERT INTO people VALUES (5, 'Mark', CAST([] AS TEXT[]));

SELECT UNNEST(NULL);

SELECT UNNEST(CAST(NULL AS BOOLEAN[]));

SELECT name, UNNEST(address) FROM people;

SELECT name, UNNEST(address), UNNEST([1]) FROM people;

WITH t AS (SELECT 1 AS r, [1, 2, 3] AS a UNION SELECT 2 AS r, [4] AS a UNION SELECT 3 AS r, NULL AS a) SELECT r, a, UNNEST(a) AS n FROM t ORDER BY r, n;

WITH t AS (SELECT 1 AS r, [1, 2, 3] AS a UNION SELECT 2 AS r, [4] AS a UNION SELECT 3 AS r, NULL AS a) SELECT r, a.value FROM t, (SELECT UNNEST(a)) AS a(value) ORDER BY r, a.value;

WITH t AS (SELECT 1 AS r, [1, 2, 3] AS a UNION SELECT 2 AS r, [4] AS a UNION SELECT 3 AS r, NULL AS a) SELECT r, a.value FROM t, UNNEST(a) AS a(value) ORDER BY r, a.value;

CREATE TABLE t AS SELECT 5 AS r, [1, 2, 3] AS a;

INSERT INTO t VALUES (6, [4]), (7, NULL);

SELECT r, a.value FROM t, UNNEST(a) AS a(value) ORDER BY r, a.value;

WITH t AS (SELECT 5 AS r, [1, 2, 3] AS a UNION SELECT 6 AS r, [4] AS a UNION SELECT 7 AS r, NULL AS a) SELECT r, a.value FROM t, UNNEST(a) AS a(value) ORDER BY r, a.value;

PRAGMA enable_verification;

SELECT * FROM UNNEST([1, 2, 3]);

SELECT * FROM UNNEST(CAST([1, 2, 3] AS INT[]));

SELECT i FROM UNNEST([1, 2, 3]) AS tbl(i);

SELECT i FROM UNNEST([NULL, 'hello', 'world', 'bleorkbaejkoreijgaiorjgare']) AS tbl(i);

SELECT i FROM UNNEST([[1, 2], [3, 4], NULL, [4, 5, 6, 7]]) AS tbl(i);

SELECT i FROM UNNEST([{'a': [1, 2, 3], 'b': [4, 5, 6]}, {'a': [4, 5], 'b': [7, 8, 9, 10]}]) AS tbl(i);

SELECT COUNT(*) FROM UNNEST((SELECT LIST(range) FROM RANGE(0, 4000))) AS tbl(i);

SELECT i FROM UNNEST(CAST(NULL AS INT[])) AS tbl(i);

SELECT i FROM UNNEST(CAST([] AS INT[])) AS tbl(i);

SELECT * FROM UNNEST((SELECT [1, 2, 3] UNION ALL SELECT [1, 2, 3]));

SET scalar_subquery_error_on_multiple_rows = FALSE;

SELECT * FROM UNNEST((SELECT [1, 2, 3] UNION ALL SELECT [1, 2, 3]));

CREATE TABLE lists AS SELECT [1, 2, 3] AS l UNION ALL SELECT [4, 5] UNION ALL SELECT [] UNION ALL SELECT [NULL] UNION ALL SELECT [7, 8];

SELECT u FROM lists, UNNEST(l) AS unnest(u) ORDER BY l, u;

PREPARE v1 AS SELECT * FROM UNNEST(?::INT[]);

EXECUTE v1([1,2,3,4,5]);

SELECT i FROM UNNEST(NULL) AS tbl(i);

SELECT i FROM UNNEST(1) AS tbl(i);

SELECT i FROM UNNEST([1, 2], [3, 4]) AS tbl(i);

CREATE TABLE tbl AS SELECT * FROM (VALUES ('a', [4, 5, 5], [5, 7]), ('b', [2, 3], [1, 2, 3, 4]), ('c', [2, 3], [4])) AS t(k, a, b);

SELECT ARRAY_SORT(ARRAY(SELECT LIST_CONTAINS(b, ax) FROM UNNEST(a) AS ta(ax))) AS ab_intersect FROM tbl;

SELECT k, a, b, ARRAY_SORT(ARRAY(SELECT DISTINCT ax FROM UNNEST(a) AS ta(ax) WHERE ax = ANY(b) ORDER BY ALL)) AS ab_intersect FROM tbl;

SELECT unnest FROM UNNEST([1, 2, 3]);

SELECT a FROM UNNEST([1, 2, 3]) AS t(a);

SELECT unnest FROM (SELECT [1, 2, 3] AS x), UNNEST(x);

SELECT b FROM (SELECT [1, 2, 3] AS x), UNNEST(x) AS t(b);

PRAGMA enable_verification;

SELECT CAST(MAP(['a', 'b', 'c'], [1, 2, NULL]) AS MAP(TEXT, TEXT));

SELECT CAST(MAP(['a', 'b', 'c'], [1, 2, NULL]) AS MAP(TEXT, BIGINT));

SELECT CAST(MAP([1, 2, 3], [1, 2, NULL]) AS MAP(TEXT, BIGINT));

SELECT CAST(MAP([[1, 2, 3], [0], [123]], [1.0, 2.1, 4.9]) AS MAP(TEXT[], TINYINT));

SELECT CAST(MAP([1, 2, CAST('hi' AS TEXT)], [1.0, 2.1, 4.9]) AS MAP(TEXT, TINYINT));

SELECT CAST(MAP([1, 2, 3], ['A', 'B', 'C']) AS MAP(TINYINT, TEXT));

PRAGMA enable_verification;

CREATE TABLE ints (i INT);

INSERT INTO ints VALUES (1), (2), (3);

SELECT MAP(['name'], [i]) FROM ints;

SELECT MAP(['x', 'y'], [i]) FROM ints;

SELECT MAP([i], ['name']) FROM ints;

SELECT MAP([i, i + 1], ['x', 'y']) FROM ints;

SELECT MAP([i, i + 1], ['x', 'y']) FROM ints WHERE i > 1;

SELECT MAP(['x'], [m]) FROM (SELECT MAP([i], ['y']) AS m FROM ints WHERE i <> 1);

SELECT MAP(['key'], [range]) FROM RANGE(0, 5) WHERE range > 2;

SELECT MAP(['🦆', '🦤', '🐓'], [i, i + 1, i + 2]) FROM ints;

SELECT MAP([10, i, i + 1, 9], [i, 3.14, 0.12, 8.0]) FROM ints;

CREATE TABLE tbl (v TEXT[]);

INSERT INTO tbl VALUES (['test', 'string']), (['foo', 'bar']);

SELECT MAP(['x', 'y'], v) FROM tbl;

CREATE TABLE MAP_input (keys INT[], values INT[]);

INSERT INTO MAP_input VALUES ([1, 0], [2]), ([3], [4, 9]);

SELECT MAP(keys, values) FROM MAP_input;

CREATE TABLE groups (category INT, score INT);

INSERT INTO groups VALUES (1, 2), (1, 8), (1, 3), (2, 3), (2, 4), (2, 5), (3, 6), (3, 1), (3, 9);

SELECT MAP(['category', 'min', 'max'], [category, MIN(score), MAX(score)]) FROM groups GROUP BY category ORDER BY ALL;

SELECT MAP([range], ['a']) FROM RANGE(0, 10000) WHERE range = 9999;

CREATE TABLE align_tbl (i INT[]);

INSERT INTO align_tbl VALUES ([1, 2]), ([100, 200]);

SELECT MAP(['x', 'y'], i) FROM align_tbl;

INSERT INTO align_tbl VALUES ([1, 2, 3, 4, 5, 6]), ([20, 30, 40, 50]);

SELECT MAP(['x', 'y'], i) FROM align_tbl;

SELECT MAP(['x', 'y', '1', '2', '3', '4'], i) FROM align_tbl;

SELECT MAP(i, ['x', 'y']) FROM align_tbl;

CREATE TABLE allconst (i INT);

INSERT INTO allconst VALUES (1), (2), (3);

SELECT MAP(['name'], [2]) FROM allconst;

SELECT DISTINCT MAP {'*': ? IN (SELECT TRUE)};

PRAGMA enable_verification;

SELECT MAP(CAST(NULL AS INT[]), [1, 2, 3]);

SELECT MAP(NULL, [1, 2, 3]);

SELECT MAP(NULL, NULL);

SELECT MAP(NULL, [1, 2, 3]) IS NULL;

SELECT MAP([1, 2, 3], NULL);

SELECT MAP([1, 2, 3], CAST(NULL AS INT[]));

SELECT * FROM (VALUES (MAP(NULL, NULL)), (MAP(CAST(NULL AS INT[]), CAST(NULL AS INT[]))), (MAP([1, 2, 3], [1, 2, 3])));

SELECT MAP(a, b) FROM (VALUES (NULL, ['b', 'c']), (CAST(NULL AS INT[]), NULL), (CAST(NULL AS INT[]), CAST(NULL AS TEXT[])), (CAST(NULL AS INT[]), ['a', 'b', 'c']), (NULL, ['longer string than inlined', 'smol']), (NULL, NULL), ([1, 2, 3], NULL), ([1, 2, 3], ['z', 'y', 'x']), ([1, 2, 3], CAST(NULL AS TEXT[]))) AS t(a, b);

SELECT [{'i': 1, 'j': [2, 3]}, NULL];

SELECT [{'i': 1, 'j': [2, 3]}, NULL, {'i': 1, 'j': [2, 3]}];

SELECT * FROM (VALUES (MAP([1, 2], [3, 4])), (NULL), (MAP([1, 2], [3, 4])), (NULL)) AS a;

SELECT MAP([{'i': 1, 'j': 2}, {'i': 3, 'j': 4}], [{'i': 1, 'j': 2}, {'i': 3, 'j': 4}]);

SELECT * FROM (VALUES (MAP([1, 2], [3, 4])), (NULL), (MAP([1, 2], [3, 4])), (NULL)) AS a;

PRAGMA enable_verification;

CREATE TABLE tbl1 (a INT[3]);

INSERT INTO tbl1 VALUES ([1, 2, 3]), ([4, NULL, 6]), ([7, 8, 9]), (NULL), ([10, 11, 12]);

SELECT FIRST(a ORDER BY ALL), LAST(a ORDER BY ALL) FROM tbl1;

SELECT COUNT(*), MAX(a) FROM tbl1 GROUP BY LIST_SUM(CAST(a AS INT[])) % 2 = 0;

SELECT COUNT(*), MAX(a) FROM tbl1 GROUP BY LIST_SUM(CAST(a AS INT[])) % 2 = 0;

SELECT MAX(a), MIN(a) FROM tbl1;

PRAGMA enable_verification;

PRAGMA verify_external;

SELECT CAST(ARRAY_VALUE(1, 2, 3) AS TEXT);

SELECT CAST(ARRAY_VALUE(1, 2, 3) AS INT[]);

SELECT LIST_EXTRACT(ARRAY_VALUE(1, 2, 3), 2);

SELECT * FROM UNNEST(ARRAY_VALUE(1, 2, 3));

SELECT UNNEST(CAST(ARRAY_VALUE(1, 2, 3) AS INT[]));

SELECT CAST(ARRAY_VALUE('1.0', '2.0', '3.0') AS DOUBLE[3]);

SELECT CAST(ARRAY_VALUE(1, 2, 3) AS INT[2]);

SELECT CAST(ARRAY_VALUE(1, 2, 3) AS INT[4]);

SELECT CAST([1, 2, 3] AS INT[3]);

SELECT CAST(['1.0', '2.0', '3.0'] AS DOUBLE[3]);

SELECT CAST([1, 2, 3] AS BLOB[3]);

SELECT CAST(NULL AS INT[3]);

SELECT CAST([[1, 2, 3], [4, 5, 6]] AS INT[3][2]);

SELECT CAST((CAST(NULL AS INT[])) AS INT[3]);

SELECT CAST(c AS INT[3]) FROM (VALUES ([1, 2, 3]), ([4, NULL, 6]), (NULL), ([7, 8, 9])) AS t(c);

SELECT CAST([1, 2, 3] AS INT[2]);

SELECT CAST([[1, 2, 3], [4, 5, 6, 7]] AS INT[3][2]);

CREATE OR REPLACE TABLE t1 AS SELECT CAST([1, 2, 3] AS INT[3]);

CREATE OR REPLACE TABLE t2 AS SELECT CAST(['4', '5', '6'] AS TEXT[3]);

INSERT INTO t2 SELECT * FROM t1;

SELECT CAST((CAST([1, NULL, 3] AS INT[3])) AS TEXT[3]);

SELECT CAST((CAST(NULL AS INT[3])) AS TEXT);

SELECT CAST((CAST(['2', 'abc', '3'] AS TEXT[3])) AS INT[]);

SELECT CAST((CAST([1, 2, 3] AS INT[3])) AS INT);

SELECT TRY_CAST(CAST([42, 999, NULL, NULL, -42] AS INT[5]) AS TIMESTAMPTZ[]);

SELECT CAST((CAST(NULL AS INT[3])) AS TEXT[3]);

SELECT CAST('[1, 2, 3]' AS INT[3]);

SELECT TRY_CAST(l AS INT[][3]) FROM (VALUES (['foo'])) AS v(l);

PRAGMA enable_verification;

PRAGMA verify_external;

SELECT DISTINCT ARRAY_VALUE(ARRAY_VALUE(1, 2, 3), ARRAY_VALUE(4, 5, 6));

SELECT DISTINCT ARRAY_VALUE([1, 2, 3], [4, 5, 6]);

SELECT DISTINCT [ARRAY_VALUE(1, 2, 3), ARRAY_VALUE(4, 5, 6)];

SELECT * FROM (VALUES (ARRAY_VALUE(NULL, 'abc')), (ARRAY_VALUE(NULL, 'defg')), (NULL)) ORDER BY 1 DESC;

SELECT * FROM (VALUES (ARRAY_VALUE(NULL, 'ghf', NULL)), (ARRAY_VALUE(NULL, NULL, 'defg')), (NULL)) ORDER BY 1 DESC;

SELECT * FROM (VALUES (ARRAY_VALUE(NULL, NULL, 'ghf')), (ARRAY_VALUE(NULL, 'defg', NULL)), (NULL)) ORDER BY 1 DESC;

PRAGMA enable_verification;

PRAGMA verify_external;

CREATE TABLE t1 (a INT, b INT[0]);

CREATE TABLE t1 (a INT, b INT[4294967299]);

CREATE TABLE t1 (a INT, b INT[2147483647]);

SELECT ARRAY_VALUE();

CREATE TABLE t1 (a INT, b INT[-1]);

CREATE TABLE t1 (a INT, b INT[1.5]);

CREATE TABLE t1 (a INT, b INT['foobar']);

SELECT CAST((CAST([1, 2, 3] AS INT[3])) AS INT[0]);

SELECT CAST((CAST([1, 2, 3] AS INT[3])) AS INT[-1]);

SELECT CAST((CAST([1, 2, 3] AS INT[3])) AS INT[1.5]);

SELECT CAST((CAST([1, 2, 3] AS INT[3])) AS INT['foobar']);

PRAGMA enable_verification;

PRAGMA verify_external;

CREATE TABLE t1 (i INT, a INT[3]);

INSERT INTO t1 VALUES (1, ARRAY_VALUE(1, 2, 3)), (2, ARRAY_VALUE(NULL, 5, 6)), (3, ARRAY_VALUE(7, NULL, 9)), (4, ARRAY_VALUE(10, 11, NULL));

SELECT DISTINCT * FROM t1 ORDER BY ALL;

CREATE OR REPLACE TABLE t1 (i INT, a INT[][3]);

INSERT INTO t1 SELECT i, ARRAY_VALUE([i, i + 1, i + 2], [i + 3, i + 4, i + 5], [i + 6, i + 7, i + 8]) FROM RANGE(0, 9 * 9, 9) AS r(i);

SELECT DISTINCT * FROM t1 ORDER BY ALL;

SELECT DISTINCT * FROM t1 ORDER BY ALL;

SELECT DISTINCT * FROM t1 ORDER BY ALL;

SELECT * FROM t1 JOIN t2 USING (i) ORDER BY ALL;

SELECT * FROM t1 JOIN t2 ON t1.a = t2.a ORDER BY ALL;

SELECT * FROM t1 FULL OUTER JOIN t2 USING (i) ORDER BY ALL;

SELECT * FROM t1 FULL OUTER JOIN t2 USING (i) ORDER BY ALL;

SELECT * FROM t1 AS a JOIN t1 AS b ON (a.col1 <> b.col1) ORDER BY ALL;

PRAGMA enable_verification;

PRAGMA verify_external;

CREATE TABLE test_array (c1 INT[3]);

INSERT INTO test_array VALUES (NULL), ([1, 2, 3]), ([4, 5, 6]), ([7, 8, 9]);

SELECT * FROM test_array JOIN test_array AS t2 ON t2.c1 = test_array.c1;

INSERT INTO test_array VALUES (NULL);

SELECT * FROM test_array JOIN test_array AS t2 ON t2.c1 = test_array.c1;

INSERT INTO test_array VALUES ([10, 11, 12]);

SELECT * FROM test_array JOIN test_array AS t2 ON t2.c1 = test_array.c1 ORDER BY test_array.c1;

PRAGMA enable_verification;

PRAGMA verify_external;

CREATE TABLE t1 (a INT[4096]);

INSERT INTO t1 VALUES (RANGE(0, 4096));

SELECT LIST_SUM(CAST(a AS INT[])) = LIST_SUM(RANGE(0, 4096)) FROM t1;

CREATE TABLE t2 AS SELECT ARRAY_VALUE(a) AS i FROM RANGE(0, 4096) AS r(a);

SELECT SUM(i[1]) FROM t2;

CREATE TABLE t3 AS SELECT ARRAY_VALUE(a, a + 1) AS i FROM RANGE(0, 4096) AS r(a);

SELECT SUM(i[1]) = 8386560 AND SUM(i[2]) = 8390656 FROM t3;

CREATE OR REPLACE TABLE t4 AS SELECT * FROM RANGE(0, 4096) AS r(a);

UPDATE t4 SET a = NULL WHERE a % 2 = 0;

CREATE TABLE t5 AS SELECT ARRAY_VALUE(a) AS i FROM t4;

SELECT SUM(i[1]) FROM t5;

PRAGMA enable_verification;

PRAGMA verify_external;

CREATE TABLE tbl1 (a INT[3]);

INSERT INTO tbl1 VALUES ([1, 2, 3]), ([4, NULL, 6]), ([7, 8, 9]), (NULL), ([10, 11, 12]);

SELECT * FROM tbl1 LIMIT 1;

SELECT * FROM tbl1 OFFSET 1;

SELECT * FROM tbl1 LIMIT 1 OFFSET 1;

PRAGMA enable_verification;

CREATE TABLE arrays (a INT[3]);

INSERT INTO arrays VALUES ([1, 2, 3]), ([1, 2, 4]), ([7, 8, 9]), ([-1, -2, -3]), (NULL), ([4, NULL, 2]);

SELECT LIST(a) FROM arrays;

SELECT LIST(a ORDER BY a[3] ASC) FROM arrays;

SELECT LIST(a ORDER BY a[3] DESC) FROM arrays;

PRAGMA disable_verification;

SELECT LIST(ARRAY_VALUE({'foo': [10]}));

CREATE TABLE t1 (a INT, b INT, c INT);

INSERT INTO t1 VALUES (1, 2, 3), (4, 5, 6);

SELECT LIST(ARRAY_VALUE(a, b, c) ORDER BY b) FROM t1 GROUP BY c;

PRAGMA enable_verification;

PRAGMA verify_external;

CREATE TABLE arrays (a INT[3]);

INSERT INTO arrays VALUES ([1, 2, 3]), ([1, 2, 4]), ([7, 8, 9]), ([-1, -2, -3]), (NULL), ([4, NULL, 2]);

SELECT a[3] FROM arrays;

SELECT DISTINCT a FROM arrays ORDER BY ALL;

SELECT DISTINCT a FROM arrays WHERE a[1] > 0 ORDER BY ALL;

SELECT * FROM (SELECT a FROM ARRAYS UNION SELECT a FROM ARRAYS) ORDER BY ALL;

SELECT * FROM (SELECT a FROM ARRAYS WHERE a[1] > 0 UNION SELECT a FROM ARRAYS WHERE a[1] > 0) ORDER BY ALL;

SELECT FIRST(DISTINCT a ORDER BY a) FROM arrays;

SELECT CAST(a AS TEXT) FROM arrays ORDER BY ALL;

SELECT TRY_CAST(CAST(a AS INT[]) AS INT[3]) FROM ARRAYS ORDER BY ALL;

SELECT a[2 : -1] FROM arrays;

SELECT a[3 : 99] FROM arrays;

DESCRIBE SELECT * FROM arrays;

SELECT a.filter(x -> x > 0) FROM arrays;

SELECT CAST(a.apply(x -> x + 1) AS INT[3]) FROM arrays;

PRAGMA verify_external;

PRAGMA enable_verification;

CREATE OR REPLACE TABLE arrays2 (a INT[3]);

COPY (SELECT [range, range + 1, range + 2] AS a FROM RANGE(0, 3)) TO '__TEST_DIR__/arrays_csv_test.csv';

COPY arrays2 FROM '__TEST_DIR__/arrays_csv_test.csv';

SELECT * FROM arrays2;

PRAGMA verify_external;

PRAGMA enable_verification;

CREATE TABLE arrays (a INT[3]);

INSERT INTO arrays VALUES ([1, 2, 3]), ([1, 2, 4]), ([7, 8, 9]), ([-1, -2, -3]), (NULL), ([4, NULL, 2]);

SELECT CAST(a AS JSON) FROM arrays;

CREATE OR REPLACE TABLE arrays2 (a INT[3]);

COPY (SELECT [range, range + 1, range + 2] AS a FROM RANGE(0, 3)) TO '__TEST_DIR__/arrays_parquet_test.json';

COPY arrays2 FROM '__TEST_DIR__/arrays_parquet_test.json';

SELECT * FROM arrays2;

PRAGMA verify_external;

PRAGMA enable_verification;

CREATE OR REPLACE TABLE arrays2 (a INT[3]);

COPY (SELECT [range, range + 1, range + 2] AS a FROM RANGE(0, 3)) TO '__TEST_DIR__/arrays_parquet_test.parquet';

COPY arrays2 FROM '__TEST_DIR__/arrays_parquet_test.parquet';

SELECT * FROM arrays2;

CREATE TABLE arrays (id INT PRIMARY KEY, a INT[3]);

INSERT INTO arrays SELECT i, [i, i + 1, i + 2] FROM RANGE(0, 200000) AS t(i);

SELECT * FROM arrays WHERE id = 150000;

PRAGMA enable_verification;

CREATE TABLE tbl AS SELECT i % 2000 AS sparse_id, i % 200 AS avg_id, i % 20 AS dense_id, CAST([i + x FOR x IN RANGE(0, 16)] AS INT[16]) AS int_array, CAST([CONCAT('thisisalongstring_', i + x) FOR x IN RANGE(0, 16)] AS TEXT[16]) AS str_array, CAST([{'x': i + x} FOR x IN RANGE(0, 16)] AS STRUCT(x INT)[16]) AS struct_array FROM RANGE(0, 100000) AS t(i);

SELECT SUM(LIST_SUM(int_array)), SUM(LIST_SUM([CAST(REPLACE(x, 'thisisalongstring_', '') AS INT) FOR x IN str_array])), SUM(LIST_SUM([x.x FOR x IN struct_array])) FROM tbl WHERE sparse_id = 0;

SELECT SUM(LIST_SUM(int_array)), SUM(LIST_SUM([CAST(REPLACE(x, 'thisisalongstring_', '') AS INT) FOR x IN str_array])), SUM(LIST_SUM([x.x FOR x IN struct_array])) FROM tbl WHERE avg_id = 0;

SELECT SUM(LIST_SUM(int_array)), SUM(LIST_SUM([CAST(REPLACE(x, 'thisisalongstring_', '') AS INT) FOR x IN str_array])), SUM(LIST_SUM([x.x FOR x IN struct_array])) FROM tbl WHERE dense_id = 0;

PRAGMA enable_verification;

PRAGMA verify_external;

SELECT ARRAY_VALUE(1, 2, 3);

SELECT ARRAY_VALUE(i - 1, i, i + 1) FROM RANGE(1, 4) AS r(i);

CREATE TABLE t1 (c INT[2]);

INSERT INTO t1 VALUES (ARRAY_VALUE(1, 2));

SELECT * FROM t1;

INSERT INTO t1 VALUES (ARRAY_VALUE(3, 4));

SELECT * FROM t1 ORDER BY c DESC;

CREATE OR REPLACE TABLE t1 AS SELECT * FROM (VALUES (ARRAY_VALUE(6, NULL)), (ARRAY_VALUE(1, 2)), (ARRAY_VALUE(NULL, NULL)), (ARRAY_VALUE(NULL, 3)));

SELECT * FROM t1 ORDER BY 1 DESC;

SELECT * FROM t1 ORDER BY 1 ASC;

CREATE OR REPLACE TABLE t1 AS SELECT * FROM (VALUES (ARRAY_VALUE(1, 2), 1), (ARRAY_VALUE(3, 4), 2)) AS t(a, i);

SELECT MAX(i), ARG_MAX(a, i) FROM t1;

PRAGMA enable_verification;

PRAGMA verify_external;

SELECT ARRAY_VALUE(i - 1, i, i + 1) FROM RANGE(4, 1, -1) AS r(i) ORDER BY 1 DESC;

SELECT ARRAY_VALUE(i - 1, i, i + 1) FROM RANGE(4, 1, -1) AS r(i) ORDER BY 1 ASC;

SELECT * FROM (VALUES (ARRAY_VALUE(0, 1, 2, 3, 4, NULL, 6, 7, 8, 9)), (ARRAY_VALUE(10, 11, NULL, 13, 14, 15, 16, 17, NULL, 19))) ORDER BY 1 ASC;

SELECT * FROM (VALUES (ARRAY_VALUE(0, 1, 2, 3, 4, NULL, 6, 7, 8, 9)), (ARRAY_VALUE(10, 11, NULL, 13, 14, 15, 16, 17, NULL, 19))) ORDER BY 1 DESC;

SELECT * FROM (VALUES (ARRAY_VALUE(0, 1, 2, NULL)), (ARRAY_VALUE(10, 11, NULL, 13))) ORDER BY 1 ASC;

SELECT * FROM (VALUES ({'a': 0, 'b': 1, 'c': 2, 'd': NULL}), ({'a': 10, 'b': 11, 'c': NULL, 'd': 13})) ORDER BY 1 ASC;

SELECT * FROM (VALUES (ARRAY_VALUE(ARRAY_VALUE(0, 1, 2, 3, 4, NULL, 6, 7, 8, 9), ARRAY_VALUE(10, 11, NULL, 13, 14, 15, 16, 17, NULL, 19))), (ARRAY_VALUE(NULL, NULL)), (ARRAY_VALUE(NULL, ARRAY_VALUE(20, 21, 22, 23, 24, NULL, 26, 27, 28, 29))), (NULL), (ARRAY_VALUE(ARRAY_VALUE(20, 21, 22, 23, 24, NULL, 26, 27, 28, 29), ARRAY_VALUE(30, 31, NULL, 33, 34, 35, 36, 37, NULL, 39)))) ORDER BY 1 ASC;

SELECT * FROM (VALUES (ARRAY_VALUE(ARRAY_VALUE(0, 1, 2, 3, 4, NULL, 6, 7, 8, 9), ARRAY_VALUE(10, 11, NULL, 13, 14, 15, 16, 17, NULL, 19))), (ARRAY_VALUE(NULL, NULL)), (ARRAY_VALUE(NULL, ARRAY_VALUE(20, 21, 22, 23, 24, NULL, 26, 27, 28, 29))), (NULL), (ARRAY_VALUE(ARRAY_VALUE(20, 21, 22, 23, 24, NULL, 26, 27, 28, 29), ARRAY_VALUE(30, 31, NULL, 33, 34, 35, 36, 37, NULL, 39)))) ORDER BY 1 ASC;

SELECT STATS(ARRAY_VALUE(1, 2));

PRAGMA enable_verification;

CREATE TABLE t1 (i INT, a INT[3]);

checkpoint;

INSERT INTO t1 VALUES (1, CAST([1, 2, 3] AS INT[3]));

checkpoint;

SELECT * EXCLUDE (additional_block_ids) FROM PRAGMA_STORAGE_INFO('t1');

INSERT INTO t1 SELECT * FROM (VALUES (2, CAST([4, NULL, 6] AS INT[3])));

INSERT INTO t1 VALUES (3, NULL);

INSERT INTO t1 VALUES (4, CAST([7, 8, 9] AS INT[3]));

checkpoint;
restart;

SELECT * FROM t1 ORDER BY i;

SELECT * FROM t1 AS a JOIN t1 AS b ON (a.a IS DISTINCT FROM b.a) ORDER BY a.i, b.i;

SELECT * FROM t1 WHERE a = ARRAY_VALUE(1, 2, 3);

SELECT * FROM t1 WHERE a[1] = 4;

SELECT * FROM t1 LIMIT 1 OFFSET 1;

CREATE TABLE t2 (i INT, a INT[3]);

INSERT INTO t2 SELECT i, ARRAY_VALUE(i, i + 1, i + 2) FROM RANGE(0, 1501) AS t(i);

INSERT INTO t2 SELECT i, ARRAY_VALUE(i, i + 1, i + 2) FROM RANGE(1501, 3001) AS t(i);

checkpoint;
restart;

SELECT * FROM t2 WHERE i = 5;

SELECT * FROM t2 WHERE i = 3000;

SELECT * FROM t2 WHERE i = 1200;

CREATE TABLE t4 (i INT[3]);

PRAGMA enable_verification;

PRAGMA preserve_insertion_order = TRUE;

CREATE TABLE t4 (i INT[3]);

INSERT INTO t4 SELECT ARRAY_VALUE(CAST(a AS TEXT), CAST(b AS TEXT), CAST(c AS TEXT)) FROM RANGE(1, 100) AS r1(a), RANGE(1, 100) AS r2(b), RANGE(1, 50) AS r3(c);

INSERT INTO t4 SELECT ARRAY_VALUE(5, 5, 5);

SELECT * FROM t4 OFFSET 480249;

PRAGMA enable_verification;

PRAGMA preserve_insertion_order = TRUE;

CREATE TABLE tbl1 AS SELECT ARRAY_VALUE(a, a) FROM RANGE(0, 122881) AS r1(a);

SELECT * FROM tbl1 LIMIT 1 OFFSET 0;

SELECT * FROM tbl1 LIMIT 1 OFFSET 122880 // 2;

SELECT * FROM tbl1 LIMIT 1 OFFSET 122879;

SELECT * FROM tbl1 LIMIT 1 OFFSET 122880;

PRAGMA verify_external;

PRAGMA enable_verification;

CREATE TABLE test_list AS SELECT range % 4 AS g, 10000 - range AS o, CAST([range, range + 1, range + 2] AS TEXT[]) AS a, range AS i FROM RANGE(0, 10000);

SELECT g AS o, a, SUM(i) OVER (PARTITION BY g ORDER BY o) FROM test_list;

CREATE TABLE test_array AS SELECT range % 4 AS g, 10000 - range AS o, CAST([range, range + 1, range + 2] AS TEXT[3]) AS a, range AS i FROM RANGE(0, 10000);

SELECT g AS o, a, SUM(i) OVER (PARTITION BY g ORDER BY o) FROM test_array;

PRAGMA enable_verification;

CREATE TABLE arrays (a INT[3]);

INSERT INTO arrays VALUES ([1, 2, 3]), ([1, 2, 4]), ([7, 8, 9]), ([-1, -2, -3]), (NULL), ([4, NULL, 2]);

SUMMARIZE arrays;

SELECT a FROM arrays ORDER BY a LIMIT 1;

SELECT MIN(a) FROM arrays;

SELECT MAX(a) FROM arrays;

INSERT INTO arrays VALUES ([-7, -8, -9]), ([-8, -9, -10]);

SELECT MAX(a) FROM arrays;

PRAGMA enable_verification;

SELECT TRY_CAST(ARRAY_VALUE(1, 2) AS INT[3]);

SELECT CAST(ARRAY_VALUE(1, 2) AS INT[3]);

SELECT TRY_CAST(x AS INT[2][2]) FROM (VALUES ([[1, 2], [3, 4]]), ([[5, 6], [7, 8]])) AS t(x);

SELECT TRY_CAST(x AS INT[2][2]) FROM (VALUES ([[1, 2], [3, 4]]), ([[5, 6], [7, 8, 9]])) AS t(x);

SELECT CAST(x AS INT[2][2]) FROM (VALUES ([[1, 2], [3, 4]]), ([[5, 6], [7, 8, 9]])) AS t(x);

SELECT TRY_CAST(x AS INT[2][2]) FROM (VALUES ([[1, 2], [3, 4]]), ([[5, 6], [7, 8], [9, 10]])) AS t(x);

SELECT CAST(x AS INT[2][2]) FROM (VALUES ([[1, 2], [3, 4]]), ([[5, 6], [7, 8], [9, 10]])) AS t(x);

SELECT TRY_CAST('[1,2]' AS INT[3]);

SELECT CAST('[1,2]' AS INT[3]);

SELECT CAST('[NULL, [1], [NULL]]' AS INT[1][3]);

SELECT TRY_CAST('[NULL, [1], [abc]]' AS INT[1][3]);

SELECT TRY_CAST('[NULL, [1,NULL,3], [1,2,3]]' AS INT[3][3]);

SELECT CAST('[NULL, [1,NULL,3], [1,2,3]]' AS INT[3][3]);

SELECT CAST('[NULL, [1,NULL,3], [1,2]]' AS INT[3][3]);

SELECT TRY_CAST('[NULL, [1,NULL,3], [1,2]]' AS INT[3][3]);

PRAGMA enable_verification;

SELECT TRY_CAST(test_vector AS INT[2]) AS a FROM TEST_VECTOR_TYPES(CAST(NULL AS INT[]));

SELECT CAST(test_vector AS INT[2]) AS a FROM TEST_VECTOR_TYPES(CAST(NULL AS INT[]));

PRAGMA enable_verification;

PRAGMA verify_external;

CREATE TABLE t1 (i TEXT[3]);

INSERT INTO t1 VALUES (ARRAY_VALUE('1', NULL, '3')), (NULL), (ARRAY_VALUE(NULL, '5', '6'));

SELECT DISTINCT * FROM t1;

CREATE TABLE t2 (i TEXT[2][2]);

INSERT INTO t2 VALUES (ARRAY_VALUE(ARRAY_VALUE('1', NULL), ARRAY_VALUE(NULL, '2'))), (NULL), (ARRAY_VALUE(ARRAY_VALUE('3', NULL), ARRAY_VALUE(NULL, '4')));

SELECT DISTINCT * FROM t2;

CREATE TABLE t3 (i TEXT[2][]);

INSERT INTO t3 VALUES (ARRAY_VALUE(['1', NULL], [NULL, '2'])), (NULL), (ARRAY_VALUE(['3', NULL], [NULL, '4']));

SELECT DISTINCT * FROM t3;

CREATE TABLE t4 (i TEXT[][2]);

INSERT INTO t4 VALUES ([ARRAY_VALUE('1', NULL), ARRAY_VALUE(NULL, '2')]), (NULL), ([ARRAY_VALUE('3', NULL), ARRAY_VALUE(NULL, '4')]);

SELECT DISTINCT * FROM t4;

CREATE TABLE t5 (i TEXT[][2][]);

INSERT INTO t5 VALUES ([[ARRAY_VALUE('1', NULL), ARRAY_VALUE(NULL, '2')]]), (NULL), ([[ARRAY_VALUE('3', NULL), ARRAY_VALUE(NULL, '4')]]);

SELECT DISTINCT * FROM t5;

CREATE TABLE t6 (i TEXT[2][][2]);

INSERT INTO t6 VALUES (ARRAY_VALUE([ARRAY_VALUE('1', NULL)], [ARRAY_VALUE(NULL, '2')])), (NULL), (ARRAY_VALUE([ARRAY_VALUE('3', NULL)], [ARRAY_VALUE(NULL, '4')]));

SELECT DISTINCT * FROM t6;

PRAGMA enable_verification;

SELECT 1 = ALL([1, 2, 3]);

SELECT 1 = ALL([1, 2, 3, NULL]);

SELECT 1 = ANY([1, 2, 3]);

SELECT 4 = ANY([1, 2, 3]);

SELECT 4 = ANY([1, 2, 3, NULL]);

SELECT 4 > ALL([1, 2, 3]);

SELECT 4 > ALL([1, 2, 3, NULL]);

SELECT 1 = ANY(NULL);

CREATE VIEW v1 AS SELECT LIST(i) AS l FROM RANGE(0, 5) AS tbl(i);

SELECT 1 = ANY(l) FROM v1;

SELECT 6 = ANY(l) FROM v1;

SELECT NULL = ANY(l) FROM v1;

CREATE VIEW v2 AS SELECT LIST(CASE WHEN i % 2 = 0 THEN NULL ELSE i END) AS l FROM RANGE(0, 5) AS tbl(i);

SELECT 1 = ANY(l) FROM v2;

SELECT 6 = ANY(l) FROM v2;

SELECT NULL = ANY(l) FROM v2;

CREATE VIEW v3 AS SELECT i % 5 AS g, LIST(CASE WHEN i = 6 OR i = 8 THEN NULL ELSE i END) AS l FROM RANGE(0, 20) AS tbl(i) GROUP BY g;

SELECT g, 5 = ANY(l) FROM v3 ORDER BY g;

SELECT g, 3 > ANY(l) FROM v3 ORDER BY g;

SELECT g, 100 > ALL(l) FROM v3 ORDER BY g;

SELECT g, (SELECT 5 = ANY(l)) FROM v3 ORDER BY g;

PRAGMA enable_verification;

SELECT [1, 2], [NULL], ['hello', 'world'], [];

SELECT [[1, 2]], [[[1, 2], [2, 3]], [[5], [3, 4]]];

SELECT [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, NULL];

SELECT [1, i] FROM RANGE(0, 3) AS tbl(i) ORDER BY i;

SELECT [i] FROM RANGE(0, 3) AS tbl(i) WHERE ([i])[1] = 1;

SELECT [i, 'hello'] FROM GENERATE_SERIES(0, 2) AS tbl(i) WHERE ([i])[1] = 1;

SELECT [[1], ['hello']];

SELECT CAST([1] AS BIGINT[]);

SELECT CAST([1] AS BIGINT);

SELECT CAST([[1, 2], [3, 4]] AS BIGINT[][]);

SELECT CAST([[1, 2], [3, 4]] AS BIGINT[]);

SELECT CAST([[1, 2], [3, 4]] AS TEXT[]);

SELECT UNNEST(UNNEST(CAST([[1, 2], [3, 4]] AS TEXT[][])));

SELECT UNNEST(CAST([[1, 2], [3, 4]] AS TEXT[]));

SELECT CAST([[1, 2], [3, 4]] AS TEXT);

PRAGMA enable_verification;

SELECT ARRAY_AGG(NULL), ARRAY_AGG(42);

SELECT ARRAY_AGG(i) FROM RANGE(0, 3) AS tbl(i);

SELECT ARRAY_AGG(i) FROM RANGE(0, 0) AS tbl(i);

CREATE TABLE films (film_id INT, title TEXT);

CREATE TABLE actors (actor_id INT, first_name TEXT, last_name TEXT);

CREATE TABLE film_actor (film_id INT, actor_id INT);

INSERT INTO films VALUES (1, 'The Martian'), (2, 'Saving Private Ryan'), (3, 'Team America');

INSERT INTO actors VALUES (1, 'Matt', 'Damon'), (2, 'Jessica', 'Chastain'), (3, 'Tom', 'Hanks'), (4, 'Edward', 'Burns'), (5, 'Kim', 'Jong Un'), (6, 'Alec', 'Baldwin');

INSERT INTO film_actor VALUES (1, 1), (2, 1), (3, 1), (1, 2), (2, 3), (2, 4), (3, 5), (3, 6);

SELECT title, ARRAY_AGG(CASE WHEN first_name = 'Matt' AND title = 'Team America' THEN 'MATT DAAAMON' ELSE first_name || ' ' || last_name END ORDER BY actor_id) AS actors FROM films JOIN film_actor USING (film_id) JOIN actors USING (actor_id) GROUP BY title ORDER BY title;

SELECT film_id, ARRAY_AGG(actor_id ORDER BY actor_id) FROM film_actor GROUP BY film_id ORDER BY ALL;

SET threads = 1;

PRAGMA enable_verification;

CREATE OR REPLACE TABLE t1 (i INT, l INT[]);

INSERT INTO t1 VALUES (1, []), (2, []), (3, [1, 2]), (4, []), (5, [1, 2]);

SELECT i, l, ROW_NUMBER() OVER (PARTITION BY l ORDER BY i) AS rid FROM t1 ORDER BY l, i;

INSERT INTO t1 VALUES (6, NULL);

SELECT i, l, ROW_NUMBER() OVER (PARTITION BY l ORDER BY i) AS rid FROM t1 ORDER BY l NULLS FIRST, i;

PRAGMA enable_verification;

CALL dbgen(sf=0.01, suffix='_org');

CREATE TABLE lineitem_small AS SELECT * FROM lineitem_org LIMIT 1050;

CREATE OR REPLACE VIEW lineitem AS SELECT * FROM lineitem_small;

PRAGMA TPCH(1);

CREATE OR REPLACE VIEW lineitem AS SELECT l_orderkey, STRUCT_EXTRACT(struct, 'l_partkey') AS l_partkey, STRUCT_EXTRACT(struct, 'l_suppkey') AS l_suppkey, STRUCT_EXTRACT(struct, 'l_linenumber') AS l_linenumber, STRUCT_EXTRACT(struct, 'l_quantity') AS l_quantity, STRUCT_EXTRACT(struct, 'l_extendedprice') AS l_extendedprice, STRUCT_EXTRACT(struct, 'l_discount') AS l_discount, STRUCT_EXTRACT(struct, 'l_tax') AS l_tax, STRUCT_EXTRACT(struct, 'l_returnflag') AS l_returnflag, STRUCT_EXTRACT(struct, 'l_linestatus') AS l_linestatus, STRUCT_EXTRACT(struct, 'l_shipdate') AS l_shipdate, STRUCT_EXTRACT(struct, 'l_commitdate') AS l_commitdate, STRUCT_EXTRACT(struct, 'l_receiptdate') AS l_receiptdate, STRUCT_EXTRACT(struct, 'l_shipinstruct') AS l_shipinstruct, STRUCT_EXTRACT(struct, 'l_shipmode') AS l_shipmode, STRUCT_EXTRACT(struct, 'l_comment') AS l_comment FROM (SELECT l_orderkey, UNLIST(rest) AS struct FROM (SELECT l_orderkey, LIST({'_0': l_partkey, '_1': l_suppkey, '_2': l_linenumber, '_3': l_quantity, '_4': l_extendedprice, '_5': l_discount, '_6': l_tax, '_7': l_returnflag, '_8': l_linestatus, '_9': l_shipdate, '_10': l_commitdate, '_11': l_receiptdate, '_12': l_shipinstruct, '_13': l_shipmode, '_14': l_comment}) AS rest FROM (SELECT * FROM lineitem_small) AS lss GROUP BY l_orderkey) AS s1) AS s2;

PRAGMA TPCH(1);

CREATE OR REPLACE VIEW lineitem AS SELECT STRUCT_EXTRACT(ls, 'l_orderkey') AS l_orderkey, STRUCT_EXTRACT(ls, 'l_partkey') AS l_partkey, STRUCT_EXTRACT(ls, 'l_suppkey') AS l_suppkey, STRUCT_EXTRACT(ls, 'l_linenumber') AS l_linenumber, STRUCT_EXTRACT(ls, 'l_quantity') AS l_quantity, STRUCT_EXTRACT(ls, 'l_extendedprice') AS l_extendedprice, STRUCT_EXTRACT(ls, 'l_discount') AS l_discount, STRUCT_EXTRACT(ls, 'l_tax') AS l_tax, STRUCT_EXTRACT(ls, 'l_returnflag') AS l_returnflag, STRUCT_EXTRACT(ls, 'l_linestatus') AS l_linestatus, STRUCT_EXTRACT(ls, 'l_shipdate') AS l_shipdate, STRUCT_EXTRACT(ls, 'l_commitdate') AS l_commitdate, STRUCT_EXTRACT(ls, 'l_receiptdate') AS l_receiptdate, STRUCT_EXTRACT(ls, 'l_shipinstruct') AS l_shipinstruct, STRUCT_EXTRACT(ls, 'l_shipmode') AS l_shipmode, STRUCT_EXTRACT(ls, 'l_comment') AS l_comment FROM (SELECT UNNEST(lineitem) AS ls FROM (SELECT LIST({'_0': l_orderkey, '_1': l_partkey, '_2': l_suppkey, '_3': l_linenumber, '_4': l_quantity, '_5': l_extendedprice, '_6': l_discount, '_7': l_tax, '_8': l_returnflag, '_9': l_linestatus, '_10': l_shipdate, '_11': l_commitdate, '_12': l_receiptdate, '_13': l_shipinstruct, '_14': l_shipmode, '_15': l_comment}) AS lineitem FROM (SELECT * FROM lineitem_small) AS s1) AS s2) AS s3;

PRAGMA TPCH(1);

CREATE OR REPLACE VIEW lineitem AS SELECT UNNEST(STRUCT_EXTRACT(lineitem, 'll_orderkey')) AS l_orderkey, UNNEST(STRUCT_EXTRACT(lineitem, 'll_partkey')) AS l_partkey, UNNEST(STRUCT_EXTRACT(lineitem, 'll_suppkey')) AS l_suppkey, UNNEST(STRUCT_EXTRACT(lineitem, 'll_linenumber')) AS l_linenumber, UNNEST(STRUCT_EXTRACT(lineitem, 'll_quantity')) AS l_quantity, UNNEST(STRUCT_EXTRACT(lineitem, 'll_extendedprice')) AS l_extendedprice, UNNEST(STRUCT_EXTRACT(lineitem, 'll_discount')) AS l_discount, UNNEST(STRUCT_EXTRACT(lineitem, 'll_tax')) AS l_tax, UNNEST(STRUCT_EXTRACT(lineitem, 'll_returnflag')) AS l_returnflag, UNNEST(STRUCT_EXTRACT(lineitem, 'll_linestatus')) AS l_linestatus, UNNEST(STRUCT_EXTRACT(lineitem, 'll_shipdate')) AS l_shipdate, UNNEST(STRUCT_EXTRACT(lineitem, 'll_commitdate')) AS l_commitdate, UNNEST(STRUCT_EXTRACT(lineitem, 'll_receiptdate')) AS l_receiptdate, UNNEST(STRUCT_EXTRACT(lineitem, 'll_shipinstruct')) AS l_shipinstruct, UNNEST(STRUCT_EXTRACT(lineitem, 'll_shipmode')) AS l_shipmode, UNNEST(STRUCT_EXTRACT(lineitem, 'll_comment')) AS l_comment FROM (SELECT {'ll_orderkey': LIST(l_orderkey), 'll_partkey': LIST(l_partkey), 'll_suppkey': LIST(l_suppkey), 'll_linenumber': LIST(l_linenumber), 'll_quantity': LIST(l_quantity), 'll_extendedprice': LIST(l_extendedprice), 'll_discount': LIST(l_discount), 'll_tax': LIST(l_tax), 'll_returnflag': LIST(l_returnflag), 'll_linestatus': LIST(l_linestatus), 'll_shipdate': LIST(l_shipdate), 'll_commitdate': LIST(l_commitdate), 'll_receiptdate': LIST(l_receiptdate), 'll_shipinstruct': LIST(l_shipinstruct), 'll_shipmode': LIST(l_shipmode), 'll_comment': LIST(l_comment)} AS lineitem FROM (SELECT * FROM lineitem_small) AS s1) AS s2;

PRAGMA TPCH(1);

PRAGMA enable_verification;

CREATE TABLE test AS (SELECT range AS i, 0 AS j FROM RANGE(0, 70000));

SELECT LIST(i)[70000] FROM test GROUP BY j;

PRAGMA enable_verification;

SELECT MIN(CAST(i AS TEXT)), MAX(CAST(i AS TEXT)) FROM RANGE(0, 10) AS tbl(i);

SELECT MIN([i]), MAX([i]) FROM RANGE(0, 10) AS tbl(i);

SELECT MIN([-i]), MAX([i + 2]) FROM RANGE(0, 10) AS tbl(i);

CREATE VIEW list_int AS SELECT * FROM (VALUES ([1]), ([1, 2]), ([1, NULL]), ([NULL, 2]), ([NULL, NULL]), ([NULL]), (NULL)) AS tbl(i);

SELECT MIN(i), MAX(i) FROM list_int;

SELECT FIRST([i]) FROM RANGE(0, 10) AS tbl(i);

SELECT FIRST([0]) FROM RANGE(0, 10) AS tbl(i);

SELECT FIRST(i) FROM RANGE(0, 10) AS tbl(i) WHERE i = -1;

SELECT FIRST(CAST(NULL AS INT[])) FROM RANGE(0, 10) AS tbl(i) WHERE i = -1;

SELECT i % 3 AS a, FIRST([i]) FROM RANGE(0, 10) AS tbl(i) GROUP BY a ORDER BY a;

SELECT i % 3 AS a, UNNEST(FIRST([i])) FROM RANGE(0, 10) AS tbl(i) GROUP BY a ORDER BY a;

SELECT GROUP_CONCAT(CAST([i] AS TEXT), ',') FROM RANGE(0, 10) AS tbl(i);

SELECT i, i % 2, MIN([i]) OVER (PARTITION BY i % 2 ORDER BY i) FROM RANGE(0, 10) AS tbl(i) ORDER BY 1;

SELECT i, i % 2, LIST(i) OVER (PARTITION BY i % 2 ORDER BY i) FROM RANGE(0, 10) AS tbl(i) ORDER BY 2, 1;

SELECT i, i % 2, LIST(i) OVER (PARTITION BY i % 2 ORDER BY i rows BETWEEN 1 preceding AND 1 following) FROM RANGE(0, 10) AS tbl(i) ORDER BY 2, 1;

PREPARE rebind_stmt AS SELECT list(list_value({'foo': [?]}));

PRAGMA force_compression = 'dictionary';

CREATE TABLE Hosts (ips TEXT[]);

INSERT INTO Hosts SELECT * FROM "data/csv/ips.csv.gz";

SELECT MIN(LIST_STRING_AGG(ips)) FROM Hosts;

SELECT MIN(ips[1]) FROM Hosts;

SELECT MIN([x[2 : 4] FOR x IN ips IF CAST(x[1] AS INT) > 1]) FROM Hosts;

PRAGMA enable_verification;

SELECT LIST_AGGR(LIST(i), 'quantile', 0.5) FROM RANGE(1, 11) AS tbl(i);

SELECT LIST_AGGR(LIST(i), 'quantile', [0.25, 0.5, 0.75]) FROM RANGE(1, 11) AS tbl(i);

SELECT LIST_AGGR(CAST(LIST(i) AS TEXT[]), 'string_agg', '|') FROM RANGE(1, 4) AS tbl(i);

SELECT LIST_AGGR([0, 1, 2, 3], 'arg_min', i) FROM RANGE(1, 4) AS tbl(i);

SELECT LIST_AGGR(LIST(i), 'quantile') FROM RANGE(0, 10) AS tbl(i);

SELECT LIST_AGGR(LIST(i), 'min', 1) FROM RANGE(0, 10) AS tbl(i);

SELECT LIST_AGGR(LIST(i), 'quantile', 0.5, 0.3, 0.5) FROM RANGE(0, 10) AS tbl(i);

SELECT LIST_AGGR(LIST(i), 'quantile', i) FROM RANGE(0, 10) AS tbl(i);

PRAGMA enable_verification;

CREATE VIEW million_lists AS SELECT [(i + 1) % 998513, i + 1] AS l FROM RANGE(0, 999983) AS tbl(i);

SELECT MIN(l), MAX(l) FROM million_lists;

PRAGMA enable_verification;

SELECT (SELECT [1, 2]);

SELECT UNNEST((SELECT [1, 2]));

SELECT (SELECT [[1, 2], [3, 4]]);

SELECT (SELECT {'a': [1, 2, 3], 'b': 7});

SELECT (SELECT []);

SELECT (SELECT CASE WHEN 1 = 0 THEN [] ELSE NULL END);

PRAGMA enable_verification;

SELECT LIST_EXTRACT(NULL, 1);

SELECT LIST_EXTRACT(42, 1);

SELECT LIST_EXTRACT([], 1);

SELECT LIST_EXTRACT([NULL], 1);

SELECT LIST_EXTRACT([NULL], -1);

SELECT LIST_EXTRACT([42], NULL);

SELECT LIST_EXTRACT([42], 1);

SELECT LIST_ELEMENT([42], 1);

SELECT LIST_EXTRACT([42, 43], 2);

SELECT LIST_EXTRACT([42, 43, 44, 45], -1);

SELECT LIST_EXTRACT([42, 43, 44, 45], -2);

SELECT LIST_EXTRACT([42, 43, 44, 45], -4);

SELECT LIST_EXTRACT([42, 43, 44, 45], -5);

SELECT LIST_EXTRACT([42], 2);

SELECT LIST_EXTRACT(['Hello', 'World'], 1);

SELECT LIST_EXTRACT(['Hello', 'World'], 2);

SELECT LIST_EXTRACT([CAST(42 AS UTINYINT)], 1);

SELECT LIST_EXTRACT([CAST(42 AS TINYINT)], 1);

SELECT LIST_EXTRACT([CAST(42 AS USMALLINT)], 1);

SELECT LIST_EXTRACT([CAST(42 AS SMALLINT)], 1);

SELECT LIST_EXTRACT([CAST(42 AS UINTEGER)], 1);

SELECT LIST_EXTRACT([CAST(42 AS INT)], 1);

SELECT LIST_EXTRACT([CAST(42 AS UBIGINT)], 1);

SELECT LIST_EXTRACT([CAST(42 AS BIGINT)], 1);

SELECT LIST_EXTRACT([CAST(42 AS INT128)], 1);

SELECT LIST_EXTRACT([CAST(42 AS UINT128)], 1);

SELECT LIST_EXTRACT([CAST(42 AS REAL)], 1);

SELECT LIST_EXTRACT([CAST(42 AS DOUBLE)], 1);

SELECT LIST_EXTRACT([CAST('2019-11-26' AS DATE)], 1);

SELECT LIST_EXTRACT([CAST('21:42:00' AS TIME)], 1);

SELECT LIST_EXTRACT([CAST('2019-11-26 09:42:00' AS TIMESTAMP)], 1);

SELECT LIST_EXTRACT('1', 9223372036854775807);

SELECT LIST_EXTRACT('1', -9223372036854775808);

SELECT LIST_EXTRACT('1', 0);

SELECT LIST_EXTRACT('1', 1);

SELECT LIST_EXTRACT('1', -1);

SELECT LIST_EXTRACT([1, 2, 3], -9223372036854775808);

CREATE TABLE list_array_table (a INT[3][]);

INSERT INTO list_array_table VALUES ([[1, 2, 3], NULL, [4, 5, 6]]);

SELECT LIST_EXTRACT(a, 1) FROM list_array_table;

SELECT LIST_EXTRACT(a, 2) FROM list_array_table;

SELECT LIST_EXTRACT(a, 3) FROM list_array_table;

SELECT LIST_EXTRACT(a, 4) FROM list_array_table;

SELECT LIST_EXTRACT(a, -1) FROM list_array_table;

SELECT LIST_EXTRACT(a, 0) FROM list_array_table;

PRAGMA enable_verification;

CREATE TABLE struct_data (str STRUCT(val TEXT)[]);

INSERT INTO struct_data VALUES (NULL);

SELECT LIST_RESIZE(str, 1) FROM struct_data;

SELECT LIST_REDUCE(str, (a, b) -> a) FROM struct_data;

SELECT TEXT[1] FROM struct_data;

SELECT LIST_AGGREGATE(str, 'count') FROM struct_data;

SELECT LIST_AGGREGATE(str, 'count') FROM struct_data;

CREATE TABLE nested_struct_data (str STRUCT(str_nested STRUCT(val TEXT))[]);

INSERT INTO nested_struct_data VALUES ([NULL]);

SELECT LIST_TRANSFORM(str, x -> x) FROM nested_struct_data;

SELECT LIST_FILTER(str, x -> x.str_nested IS NULL) FROM nested_struct_data;

CREATE TABLE struct_data_two_lists (str STRUCT(val TEXT)[][]);

INSERT INTO struct_data_two_lists VALUES (NULL);

SELECT FLATTEN(str) FROM struct_data_two_lists;

CREATE TABLE many_structs_data (str1 STRUCT(val TEXT, str2 STRUCT(val INT[]))[]);

INSERT INTO many_structs_data VALUES (NULL), ([{'val': 'hello', 'str2': NULL}, (NULL, NULL), {'val': 'world', 'str2': {'val': [1, 2]}}]);

SELECT LIST_REDUCE(str1, (a, b) -> a) FROM many_structs_data;

WITH foo AS (SELECT str.reduce((a, b) -> a) AS str FROM struct_data) SELECT str, str.val, str.val = '', str.val IS NULL, str IS NULL FROM foo;

CREATE TABLE filter_data (foo TEXT[]);

INSERT INTO filter_data VALUES (['some value']), (['some value', 'other value']), (['some value', 'other value', 'some value']), (['some value', 'other value', 'some value', 'other value']), (['some value', 'other value', 'some value', 'other value', 'some value']), (['some value', 'other value', 'some value', 'other value', 'some value', 'other value']), (['some value', 'other value', 'some value', 'other value', 'some value', 'other value', 'some value']);

WITH transformed AS (SELECT foo.list_transform(x -> {'val': x, 'conflict': FALSE}).reduce((res, x) -> CASE WHEN res.conflict THEN res WHEN res.val = x.val THEN res ELSE {'val': NULL, 'conflict': TRUE} END) AS result FROM filter_data) SELECT result, result.val = '' FROM transformed;

WITH data_(foo) AS (SELECT * FROM (VALUES (CAST(NULL AS TEXT[])), (['a', 'b', 'c'])) AS _values), transformed AS (SELECT foo.list_transform(x -> {'val': x, 'conflict': FALSE}).reduce((res, x) -> CASE WHEN res.conflict THEN res WHEN res.val = x.val THEN res ELSE {'val': NULL, 'conflict': TRUE} END) AS result FROM data_) SELECT result, result.val = '' FROM transformed;

PRAGMA enable_verification;

SELECT a[1] FROM (VALUES ([])) AS tbl(a);

SELECT a[1] FROM (VALUES ([NULL])) AS tbl(a);

SELECT a[-1] FROM (VALUES ([NULL])) AS tbl(a);

SELECT a[NULL] FROM (VALUES ([42])) AS tbl(a);

SELECT a[1] FROM (VALUES ([42])) AS tbl(a);

SELECT a[1] FROM (VALUES ([42])) AS tbl(a);

SELECT a[b] FROM (VALUES ([42], 1)) AS tbl(a, b);

SELECT ([42])[1];

SELECT ([42])[1];

SELECT a[2 : ] FROM (VALUES ([42, 43, 44])) AS tbl(a);

SELECT a[1 : ] FROM (VALUES ([42, 43, 44])) AS tbl(a);

SELECT a[ : 1] FROM (VALUES ([42, 43, 44])) AS tbl(a);

SELECT a[0 : 1] FROM (VALUES ([42, 43, 44])) AS tbl(a);

SELECT a[0 : -1] FROM (VALUES ([42, 43, 44])) AS tbl(a);

SELECT a[-3 : -1] FROM (VALUES ([42, 43, 44])) AS tbl(a);

SELECT a[-5 : ] FROM (VALUES ([42, 43, 44])) AS tbl(a);

SELECT a[ : 5] FROM (VALUES ([42, 43, 44])) AS tbl(a);

PRAGMA enable_verification;

CREATE TABLE listdata (c0 TEXT, c1 TEXT, c2 TEXT, c3 TEXT, c4 TEXT, off INT, length INT);

INSERT INTO listdata VALUES ('h', 'e', 'l', 'l', 'o', 1, 2), ('w', 'o', 'r', 'l', 'd', 2, 3), ('b', NULL, NULL, NULL, NULL, 0, 1), (NULL, NULL, NULL, NULL, NULL, 0, 2);

CREATE VIEW lists AS SELECT CASE WHEN c0 = 'b' THEN [c0] WHEN c0 IS NULL THEN NULL ELSE [c0, c1, c2, c3, c4] END AS s, off, length FROM listdata;

SELECT s FROM lists;

CREATE TABLE duckdata (c0 TEXT, c1 TEXT, c2 TEXT);

INSERT INTO duckdata VALUES ('🦆', 'a', 'b'), ('a', 'b', 'c');

CREATE VIEW ducks AS SELECT [c0, c1, c2] AS d FROM duckdata;

CREATE VIEW hello AS SELECT s AS hello FROM lists WHERE off = 1 AND length = 2;

CREATE VIEW nulltable AS SELECT s AS n FROM lists WHERE off = 0 AND length = 2;

SELECT d FROM ducks;

SELECT d[0 : 0] FROM ducks;

SELECT s[1 : 2] FROM lists;

SELECT s[1 : 3] FROM lists;

SELECT s[off : length + off] FROM lists;

SELECT s[off : 2 + off] FROM lists;

SELECT s[0 : length] FROM lists;

SELECT hello[off : length + off] FROM lists, hello;

SELECT n[off : length + off] FROM lists, nulltable;

SELECT hello[NULL : length + NULL] FROM lists, hello;

SELECT hello[$length] FROM lists, hello;

SELECT hello[off : NULL + off] FROM lists, hello;

SELECT n[NULL : length + NULL] FROM lists, nulltable;

SELECT hello[NULL : NULL + NULL] FROM lists, hello;

SELECT n[off : NULL + off] FROM lists, nulltable;

SELECT n[NULL : NULL + NULL] FROM lists, nulltable;

SELECT n[ : ] FROM lists, nulltable;

SELECT s[-2 : ] FROM lists;

SELECT s[0 : 1] FROM lists;

SELECT s[-4 : -2] FROM lists;

SELECT s[1 : 1] FROM lists;

SELECT s[1 : ] FROM lists;

SELECT s[2 : ] FROM lists;

SELECT s[(2147483647 - 1) : 1] FROM lists;

SELECT s[(2147483647 - 1) : -1] FROM lists;

SELECT s[(-2147483646 - 1) : -1] FROM lists;

SELECT s[(-2147483646 - 1) : -2147483647] FROM lists;

SELECT ARRAY_POP_BACK(s) FROM lists;

SELECT ARRAY_POP_FRONT(s) FROM lists;

SELECT (1)[1 : 2];

PRAGMA enable_verification;

SELECT LIST_SLICE([1, 2, 3, 4, 5], 1, 3, -1);

SELECT LIST_SLICE([1, 2, 3, 4, 5], 1, 3, -2);

SELECT LIST_SLICE([1, 2, 3, 4, 5], 1, 3, -2);

SELECT LIST_SLICE([1, 2, 3, 4, 5], 1, 3, -2);

SELECT LIST_SLICE([1, 2, 3, 4, 5], 1, 3, -2);

SELECT LIST_SLICE([1, 2, 3, 4, 5], 1, 3, -2);

CREATE TABLE tbl (a INT[], start INT, stop INT, step INT);

INSERT INTO tbl VALUES ([1, 2, 3, 4, 5], 1, 3, -2);

INSERT INTO tbl VALUES ([1, 4, 5, 6, 7, 8], 3, 1, -2);

INSERT INTO tbl VALUES ([1, 2, 3, 4, 5], -4, -1, -2);

INSERT INTO tbl VALUES ([1, 2, 3, 4, 5], 1, 3, -1);

INSERT INTO tbl VALUES ([1, 2, 3, 4, 5], 1, 3, -1);

SELECT a[$stop : step] FROM tbl;

SELECT a[start : -$step] FROM tbl;

SELECT a[start : -$step] FROM tbl;

SELECT a[start : -$step] FROM tbl;

PRAGMA enable_verification;

SELECT ([1, 2, 3, 4, 5, 6])[-9223372036854775808 : 5];

SELECT ([1, 2, 3, 4, 5, 6])[-9223372036854775808 : 5];

SELECT ([1, 2, 3, 4, 5, 6])[1 : 9223372036854775807];

SELECT ([1, 2, 3, 4, 5, 6])[1 : 9223372036854775807];

SELECT ([1, 2, 3, 4, 5, 6])[9223372036854775807 : 9223372036854775807];

SELECT ([1, 2, 3, 4, 5, 6])[9223372036854775807 : -9223372036854775808];

SELECT ([1, 2, 3, 4, 5, 6])[9223372036854775807 : -9223372036854775808];

SELECT ([1, 2, 3, 4, 5, 6])[-9223372036854775808 + 1 : 5];

CREATE TABLE tbl (a INT[], start BIGINT, stop BIGINT, step BIGINT);

INSERT INTO tbl VALUES ([1, 2, 3, 4, 5], -9223372036854775808, 9223372036854775807, -1);

INSERT INTO tbl VALUES ([1, 2, 3, 4, 5], -9223372036854775808 + 1, 9223372036854775807 - 1, -1);

INSERT INTO tbl VALUES ([1, 2, 3, 4, 5], -9223372036854775808 + 1, 9223372036854775807 - 1, -1);

INSERT INTO tbl VALUES ([1, 2, 3, 4, 5], -9223372036854775808 + 1, 9223372036854775807 - 1, -1);

DROP TABLE tbl;

CREATE TABLE tbl (a INT[], start BIGINT, stop BIGINT, step BIGINT);

INSERT INTO tbl VALUES ([1, 2, 3, 4, 5], -9223372036854775808 + 1, 9223372036854775807 - 1, -1);

INSERT INTO tbl VALUES ([1, 2, 3, 4, 5], 1, 5, 9223372036854775807);

INSERT INTO tbl VALUES ([1, 2, 3, 4, 5], 1, 5, -9223372036854775808);

INSERT INTO tbl VALUES ([1, 2, 3, 4, 5], 1, 5, -9223372036854775808);

INSERT INTO tbl VALUES ([1, 2, 3, 4, 5], 1, 5, -9223372036854775808);

INSERT INTO tbl VALUES ([1, 2, 3, 4, 5], 1, 5, -9223372036854775808);

INSERT INTO tbl VALUES ([1, 2, 3, 4, 5], 1, 5, -9223372036854775808);

PRAGMA enable_verification;

SELECT ([1, 2, 3, 4, 5, 6])[-10 : -10];

SELECT ([1, 2, 3, 4, 5, 6])[-10 : -10];

SELECT ([1, 2, 3, 4, 5, 6])[-10 : -10];

SELECT ([1, 2, 3, 4, 5, 6])[5 : 3];

SELECT ([1, 2, 3, 4, 5, 6])[5 : 3];

SELECT 'abcdefg'[1 : 3];

SELECT 'abcdefg'[ : 3];

SELECT LIST_SLICE([1, 2, 3, 4, 5], 1, 3, 1);

SELECT ([])[1 : 3];

SELECT ([1, 2, 3, 4, 5])[-1 : 3];

SELECT ([1, 2, 3, 4, 5])[1 : -3];

SELECT ([1, 2, 3, 4, 5])[6 : 8];

SELECT ([1, 2, 3, 4, 5])[1 : 10];

SELECT ([1, 2, 3, 4, 5])[ : 3];

SELECT ([1, 2, 3, 4, 5])[1 : ];

SELECT ([1, 2, 3, 4, 5])[ : ];

SELECT ([1, 2, 3, 4, 5])[NULL : 3];

SELECT ([1, 2, 3, 4, 5])[NULL : 3];

SELECT ([1, 2, 3, 4, 5])[NULL : 3];

SELECT ([1, 2, 3, 4, 5])[NULL : 3];

SELECT ([1, 2, 3, 4, 5])[NULL : 3];

SELECT ([1, 2, 3, 4, 5])[NULL : 3];

CREATE TABLE tbl (a INT[], start INT, stop INT, step INT);

INSERT INTO tbl VALUES ([1, 2, 3, 4, 5], 1, 3, 2);

INSERT INTO tbl VALUES ([1, 4, 5, 6, 7, 8], 1, 3, 2);

INSERT INTO tbl VALUES ([1, 2, 3, 4, 5], -4, -1, 2);

INSERT INTO tbl VALUES ([1, 2, 3, 4, 5], 1, 3, 1);

INSERT INTO tbl VALUES ([1, 2, 3, 4, 5], 1, 3, 1);

SELECT a[$stop : step] FROM tbl;

SELECT a[start : -$step] FROM tbl;

SELECT a[ : -$step] FROM tbl;

SELECT a[ : -$step] FROM tbl;

SELECT a[ : -$step] FROM tbl;

CREATE TABLE err (a INT[], start INT, stop INT, step INT);

INSERT INTO err VALUES ([1, 2, 3, 4, 5], 1, 3, 0);

INSERT INTO err VALUES ([1, 4, 5, 6, 7, 8], 1, 3, 0);

INSERT INTO err VALUES ([1, 4, 5, 6, 7, 8], 1, 3, 0);

SELECT LIST_SLICE(NULL, 1, 3, 2);

SELECT LIST_SLICE(NULL, 0, 0);

SELECT LIST_SLICE(NULL, 1, 3, -1);

SELECT LIST_SLICE(NULL, 1, 3, -1);

SELECT LIST_SLICE(NULL, 1, 3, -1);

SELECT LIST_SLICE(NULL, 1, 3, -1);

CREATE TABLE null_tbl (a INT[], start INT, stop INT, step INT);

INSERT INTO null_tbl VALUES ([1, 2, 3, 4, 5], NULL, 3, 2);

INSERT INTO null_tbl VALUES ([1, 4, 5, 6, 7, 8], 1, NULL, 2);

INSERT INTO null_tbl VALUES ([1, 2, 3, 4, 5], -4, -1, NULL);

INSERT INTO null_tbl VALUES (NULL, 1, 3, 2);

INSERT INTO null_tbl VALUES ([1, 2, NULL], 1, 3, 2);

INSERT INTO null_tbl VALUES ([], 1, 3, 2);

INSERT INTO null_tbl VALUES ([], 1, 3, 2);

INSERT INTO null_tbl VALUES ([], 1, 3, 2);

INSERT INTO null_tbl VALUES ([], 1, 3, 2);

INSERT INTO null_tbl VALUES ([], 1, 3, 2);

INSERT INTO null_tbl VALUES ([], 1, 3, 2);

INSERT INTO null_tbl VALUES ([], 1, 3, 2);

INSERT INTO null_tbl VALUES ([], 1, 3, 2);

INSERT INTO null_tbl VALUES ([], 1, 3, 2);

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

PRAGMA threads = 1;

SELECT [{'i': 1, 'j': [2, 3]}, NULL, {'i': 1, 'j': [2, 3]}];

CREATE TABLE list_data (g INT, e INT);

INSERT INTO list_data VALUES (1, 1), (1, 2), (2, 3), (2, 4), (2, 5), (3, 6), (5, NULL);

SELECT LIST(a) AS l1 FROM (VALUES (1), (2), (3)) AS t1(a);

SELECT UNNEST(l1) FROM (SELECT LIST(a) AS l1 FROM (VALUES (1), (2), (3)) AS t1(a)) AS t1;

SELECT * FROM (SELECT LIST(a) AS l1 FROM (VALUES (1), (2), (3)) AS t1(a)) AS t1, (SELECT LIST(b) AS l2 FROM (VALUES (4), (5), (6), (7)) AS t2(b)) AS t2;

SELECT UNNEST(l1) AS u1, UNNEST(l2) AS u2 FROM (SELECT LIST(a) AS l1 FROM (VALUES (1), (2), (3)) AS t1(a)) AS t1, (SELECT LIST(b) AS l2 FROM (VALUES (4), (5), (6), (7)) AS t2(b)) AS t2;

SELECT UNNEST(l1), l2 FROM (SELECT LIST(a) AS l1 FROM (VALUES (1), (2), (3)) AS t1(a)) AS t1, (SELECT LIST(b) AS l2 FROM (VALUES (4), (5), (6), (7)) AS t2(b)) AS t2;

SELECT l1, UNNEST(l2) FROM (SELECT LIST(a) AS l1 FROM (VALUES (1), (2), (3)) AS t1(a)) AS t1, (SELECT LIST(b) AS l2 FROM (VALUES (4), (5), (6), (7)) AS t2(b)) AS t2;

SELECT UNNEST(LIST(e)) AS ue, LIST(g) FROM list_data ORDER BY 1;

SELECT g, LIST(e) FROM list_data GROUP BY g ORDER BY g;

SELECT g, LIST(e) AS l1, LIST(e) AS l2 FROM list_data GROUP BY g ORDER BY g;

SELECT g, LIST(e / 2.0) FROM list_data GROUP BY g ORDER BY g;

SELECT g, LIST(CAST(e AS TEXT)) FROM list_data GROUP BY g ORDER BY g;

SELECT LIST(e) FROM list_data;

SELECT UNNEST(LIST(e)) AS ue FROM list_data ORDER BY ue;

SELECT LIST(e), LIST(g) FROM list_data;

SELECT LIST(42);

SELECT LIST(42) FROM list_data;

SELECT UNNEST(LIST(42));

SELECT UNLIST(LIST(42));

SELECT UNNEST(LIST(e)) AS ue, UNNEST(LIST(g)) AS ug FROM list_data ORDER BY ue;

SELECT g, UNNEST(LIST(e)) AS ue, UNNEST(LIST(e + 1)) AS ue2 FROM list_data GROUP BY g ORDER BY ue;

SELECT g, UNNEST(l) AS u FROM (SELECT g, LIST(e) AS l FROM list_data GROUP BY g) AS u1 ORDER BY u;

SELECT g, UNNEST(l) + 1 AS u FROM (SELECT g, LIST(e) AS l FROM list_data GROUP BY g) AS u1 ORDER BY u;

SELECT g, {'a': g, 'b': le} AS sl FROM (SELECT g, LIST(e) AS le FROM list_data GROUP BY g) AS xx WHERE g < 3 ORDER BY g;

SELECT LIST({'a': g, 'b': le}) AS mind_blown FROM (SELECT g, LIST(e) AS le FROM list_data GROUP BY g ORDER BY g) AS xx;

SELECT g, LIST({'a': e, 'b': e + 1}) AS ls FROM list_data GROUP BY g ORDER BY g;

SELECT g, LIST({'a': e, 'b': e + 1}) AS ls FROM list_data WHERE g > 2 GROUP BY g ORDER BY g;

SELECT g2, LIST(le) FROM (SELECT g % 2 AS g2, LIST(e) AS le FROM list_data GROUP BY g ORDER BY g) AS sq GROUP BY g2 ORDER BY g2;

SELECT SUM(ue) FROM (SELECT UNNEST(le) AS ue FROM (SELECT g, LIST(e) AS le FROM list_data GROUP BY g ORDER BY g) AS xx) AS xy;

SELECT SUM(UNNEST(le)) FROM (SELECT g, LIST(e) AS le FROM list_data GROUP BY g ORDER BY g) AS xx;

SELECT LIST(LIST(42));

SELECT LIST(LIST(42));

SELECT LIST();

SELECT LIST() FROM list_data;

SELECT LIST(e, g) FROM list_data;

SELECT g, UNNEST(l + 1) AS u FROM (SELECT g, LIST(e) AS l FROM list_data GROUP BY g) AS u1;

SELECT g, UNNEST(g) AS u FROM (SELECT g, LIST(e) AS l FROM list_data GROUP BY g) AS u1;

SELECT g, UNNEST(g) AS u FROM (SELECT g, LIST(e) AS l FROM list_data GROUP BY g) AS u1;

SELECT UNNEST(42);

SELECT UNNEST(42);

SELECT UNNEST(42) FROM list_data;

SELECT UNNEST(42) FROM list_data;

SELECT g FROM (SELECT g, LIST(e) AS l FROM list_data GROUP BY g) AS u1 WHERE UNNEST(l) > 42;

PRAGMA enable_verification;

SELECT ['hello'];

SELECT CAST(['hello'] AS TEXT);

SELECT CAST(l AS TEXT) FROM (VALUES (['hello', 'world']), (['a', 'b', 'c'])) AS t(l);

CREATE TABLE list_data (g INT, e INT);

INSERT INTO list_data VALUES (1, 1), (1, 2), (2, 3), (2, 4), (2, 5), (3, 6), (5, NULL);

SELECT [1, 2, 3, '4'] AS a, ['a', 'b', 'c'] AS b, [42, NULL] AS c, [NULL, NULL, NULL] AS d, [] AS e;

SELECT a FROM (VALUES ([1, 2, 3, 4]), ([]), ([CAST(NULL AS INT)]), ([42])) AS lv(a);

SELECT a FROM (VALUES (['hello', 'world']), ([]), ([CAST(NULL AS TEXT)]), (['42'])) AS lv(a);

SELECT * FROM (VALUES (([]), ([NULL]), [1, 2])) AS lv(a);

SELECT * FROM (VALUES ([1, 2]), ([]), ([CAST(NULL AS INT)])) AS lv(a);

SELECT [1, 2, 3] UNION ALL SELECT [CAST(NULL AS INT)] UNION ALL SELECT [] UNION ALL SELECT NULL;

SELECT NULL UNION ALL SELECT [] UNION ALL SELECT [CAST(NULL AS INT)] UNION ALL SELECT [1, 2, 3];

SELECT UNNEST(a) AS ua FROM (VALUES ([1, 2, 3, 4]), ([]), ([CAST(NULL AS INT)]), ([42])) AS lv(a);

SELECT UNNEST(a) AS ua FROM (VALUES ([]), ([1, 2, 3, 4]), ([NULL]), ([42])) AS lv(a);

SELECT * FROM (VALUES ([1, 2]), ([]), (['a'])) AS lv(a);

SELECT CAST([42] AS INT);

SELECT [42] + 4;

SELECT [42, '84'];

SELECT CAST(UNNEST([42]) + 2 AS INT);

SELECT [g, e, 42, NULL] FROM list_data WHERE g > 2;

SELECT CASE WHEN g = 2 THEN [g, e, 42] ELSE [84, NULL] END FROM list_data WHERE g > 1 UNION ALL SELECT [CAST(NULL AS INT)];

SELECT CASE WHEN g = 2 THEN CAST([g, e, 42] AS TEXT[]) ELSE ['eeek'] END FROM list_data WHERE g > 1;

SELECT * FROM (VALUES ([1, NULL, 3]), ([NULL, 2, 3]), ([1, 2, NULL]), (NULL), ([1, 2, 3])) AS tbl(i);

PRAGMA enable_verification;

SELECT MAP([NULL, NULL, NULL, NULL, NULL], [10, 9, 10, 11, 13]);

SELECT MAP([1, NULL, 3], [6, 5, 4]);

SELECT MAP([1, 2, 3, 4, 1], [10, 9, 8, 7, 6]);

SELECT MAP(NULL);

CREATE TABLE tbl (a INT[], b TEXT[]);

INSERT INTO tbl VALUES ([7, 5, 7], ['a', 'b', 'c']);

SELECT MAP(a, b) FROM tbl;

SELECT MAP([10], []);

SELECT MAP(10, 12);

SELECT MAP([10], [10]);

SELECT MAP([10], 10);

SELECT MAP([10, 20], [10]);

CREATE TABLE t AS SELECT MAP([1, 2, 3], [10, 9, 10]) AS m;

SELECT STRUCT_EXTRACT(m, 'key') FROM t;

CREATE TABLE null_keys_list (k INT[], v INT[]);

INSERT INTO null_keys_list VALUES ([1], [2]), (NULL, [4]);

SELECT MAP(k, v) FROM null_keys_list;

CREATE TABLE null_values_list (k INT[], v INT[]);

INSERT INTO null_values_list VALUES ([1], [2]), ([4], NULL);

SELECT MAP(k, v) FROM null_values_list;

CREATE TABLE a (b MAP(INT, INT));

SELECT * FROM a;

INSERT INTO a VALUES (MAP([1], [2])), (MAP([1, 2, 3], [4, 5, 6]));

SELECT * FROM a;

PRAGMA enable_verification;

SELECT MAP([1, 2, 3], [10, 9, 8]);

SELECT MAP([{'i': 1, 'j': 2}, {'i': 3, 'j': 4}], [{'i': 1, 'j': 2}, {'i': 3, 'j': 4}]);

SELECT MAP([1, 2, 3], [6, NULL, 4]);

SELECT MAP([1, 2, 3, 4], [10, 9, 8, 7]);

SELECT MAP([], []);

SELECT MAP();

CREATE TABLE tbl (a INT[], b TEXT[]);

INSERT INTO tbl VALUES ([5, 7], ['test', 'string']), ([6, 3], ['foo', 'bar']);

SELECT MAP(a, b) FROM tbl;

INSERT INTO tbl VALUES ([5, 7], ['also_test', 'also_string']);

SELECT MAP(a, b) FROM tbl;

SELECT MAP([[1], [2], [3], [4]], [10, 9, 8, 7]);

PRAGMA enable_verification;

CREATE TABLE i AS SELECT STR_SPLIT('my yay', ' ') AS l, range AS i FROM RANGE(0, 3);

SELECT LIST_TRANSFORM(l, x -> {'map1': MAP {'x': CAST(1 AS TEXT), 'b': CAST(x AS TEXT)}}) FROM i;

SELECT CARDINALITY(NULL);

SELECT CARDINALITY(MAP([1, 2, 3, 4], [10, 9, 8, 7]));

SELECT CARDINALITY(MAP([], []));

SELECT CARDINALITY(MAP());

CREATE TABLE ints (a INT, b INT);

INSERT INTO ints VALUES (1, 1), (5, 2), (6, 3), (2, 2), (7, 3), (3, 3), (4, 4);

SELECT a, CARDINALITY(m) FROM (SELECT a, MAP(lsta, lstb) AS m FROM (SELECT LIST(a) AS lsta, LIST(b) AS lstb, a FROM ints GROUP BY a) AS lst_tbl) AS T ORDER BY ALL;

SELECT a, CARDINALITY(m) FROM (SELECT a, MAP(lsta, lstb) AS m FROM (SELECT LIST(a) AS lsta, LIST(b) AS lstb, a FROM ints WHERE b < 3 GROUP BY a) AS lst_tbl) AS T ORDER BY ALL;

SELECT CARDINALITY(m) FROM (SELECT MAP([1], [2]) FROM RANGE(0, 5) AS tbl(i)) AS tbl(m);

SELECT grp, m, CASE WHEN grp > 1 THEN CARDINALITY(m) ELSE 0 END FROM (SELECT grp, MAP(lsta, lstb) AS m FROM (SELECT a % 4 AS grp, LIST(a) AS lsta, LIST(a) AS lstb FROM RANGE(0, 7) AS tbl(a) GROUP BY grp) AS lst_tbl) AS T;

SELECT MAP_CONCAT(MAP([3, 4, 5], ['a', 'b', 'c']), MAP([1], ['d']));

SELECT MAP_CONCAT(MAP([3, 4, 5], ['a', 'b', 'c']), MAP([], []));

SELECT MAP_CONCAT(MAP([], []), MAP([], []));

SELECT MAP_CONCAT(MAP([], []), MAP([3, 4, 5], ['a', 'b', 'c']));

SELECT MAP_CONCAT(MAP([], []), NULL);

SELECT MAP_CONCAT(NULL, NULL);

SELECT MAP_CONCAT(MAP([1], NULL), NULL);

SELECT MAP_CONCAT(MAP([1], [1]), NULL);

SELECT MAP_CONCAT(MAP([3, 4, 5], ['a', 'b', 'c']), MAP([3, 4, 5], ['a', 'b', 'c']), MAP([3, 4, 5], ['a', 'b', 'd']));

SELECT MAP_CONCAT();

SELECT MAP_CONCAT(MAP([], []));

CREATE TABLE tbl (x MAP(BIGINT, TEXT), y MAP(BIGINT, TEXT), z MAP(BIGINT, TEXT));

INSERT INTO tbl VALUES (MAP([3, 4, 2], ['abc', 'over_twelve_characters', 'input']), MAP([3, 1, 5, 2], ['cba', 'a', 'b', 'c']), MAP([3, 7, 6], ['1', NULL, '123'])), (MAP([42, 1, 0], ['tiny', 'small', 'bigger']), MAP([0, 42, 1], ['tiny', 'small', 'bigger']), MAP([1], ['this is a long string'])), (MAP([5, 1337, 0], ['long', 'longer', 'longest']), MAP([], []), NULL), (NULL, NULL, NULL);

SELECT MAP_CONCAT(x, y, z) FROM tbl;

SELECT MAP_CONCAT(x, y, z) FROM tbl WHERE rowid <> 0;

SELECT MAP_CONCAT(x, y, z) FROM tbl WHERE rowid = 1;

DROP TABLE tbl;

CREATE TABLE tbl AS SELECT MAP(lower_range, lower_range) AS c1, MAP(upper_range, upper_range) AS c2 FROM (SELECT RANGE(0, 3000) AS lower_range, [i + 3000 FOR i IN RANGE(0, 3000)] AS upper_range);

SELECT MAP_CONCAT(c1, c2) FROM tbl;

SELECT MAP(RANGE(0, 6000), RANGE(0, 6000));

DROP TABLE tbl;

CREATE TABLE tbl AS SELECT MAP([i], [i]) AS c1, MAP([i + 1], [i + 1]) AS c2 FROM (SELECT * FROM RANGE(0, 3000) AS tbl(i));

SELECT MAP_CONCAT(c1, c2) FROM tbl;

SELECT MAP(RANGE(i, i + 2), RANGE(i, i + 2)) FROM (SELECT * FROM RANGE(0, 3000) AS tbl(i));

SELECT MAP(c1, c1) AS val FROM TEST_VECTOR_TYPES(CAST(NULL AS TEXT[])) AS tbl(c1) WHERE c1 <> [] AND c1 <> [NULL];

SELECT MAP_CONCAT(val, val, val) FROM (SELECT MAP(c1, c1) AS val FROM TEST_VECTOR_TYPES(CAST(NULL AS TEXT[])) AS tbl(c1) WHERE c1 <> [] AND c1 <> [NULL]);

PREPARE q1 as select map_concat($1, $2, $3);

EXECUTE q1(
MAP([1,2,7], ['a', 'b', 'non_inlined_string']),
MAP([], []),
MAP([2,3,4,5], ['a', 'b', 'c', 'd'])
);

PRAGMA enable_verification;

SELECT MAP {};

SELECT MAP {'hello': 'world', 'HELLO': 'WORLD'};

SELECT MAP {'1': 'a', '2': 'b'};

SELECT MAP {'i': 'a' || i} FROM RANGE(0, 5) AS t(i);

SELECT MAP {'': [i + 1]} FROM RANGE(0, 5) AS t(i);

SELECT MAP {'NULL': 'a' || i} FROM RANGE(0, 5) AS t(i);

PRAGMA enable_verification;

SELECT MAP_CONTAINS_ENTRY(MAP([1, 2, 3], [4, 5, 6]), 2, 5) AS res;

SELECT MAP_CONTAINS_VALUE(MAP([1, 2, 3], [4, 5, 6]), 10) AS res;

SELECT MAP_CONTAINS(MAP([1, 2, 3], [4, 5, 6]), 1) AS res;

SELECT MAP_CONTAINS(MAP([1, 2, 3], [4, 5, 6]), 6) AS res;

SELECT MAP_CONTAINS_VALUE(MAP([1, 2, 3], [4, 5, 6]), 4) AS res;

SELECT MAP_CONTAINS_VALUE(MAP([1, 2, 3], [4, 5, 6]), 2) AS res;

SELECT MAP_CONTAINS_ENTRY(MAP([], []), 1, 2) AS res;

SELECT MAP_CONTAINS(MAP([], []), 1) AS res;

SELECT MAP_CONTAINS_VALUE(MAP([], []), 1) AS res;

CREATE TABLE test_maps (m MAP(INT, INT), k INT, v INT, res_val BOOLEAN, res_key BOOLEAN);

INSERT INTO test_maps (m, k, v, res_key, res_val) VALUES (MAP([1, 2, 3], [4, 5, 6]), 2, 5, TRUE, TRUE), (MAP([7, 8, 9], [10, 11, 12]), 8, 11, TRUE, TRUE), (MAP([13, 14, 15], [16, 17, 18]), 14, 17, TRUE, TRUE), (MAP([19, 20, 21], [22, 23, 24]), 20, 23, TRUE, TRUE), (MAP([25, 26, 27], [28, 29, 30]), 26, 29, TRUE, TRUE), (MAP([1, 2, 3], [4, 5, 6]), 10, 7, FALSE, FALSE), (MAP([7, 8, 9], [10, 11, 12]), 1, 13, FALSE, FALSE), (MAP([13, 14, 15], [16, 17, 18]), 19, 20, FALSE, FALSE), (MAP([19, 20, 21], [22, 23, 24]), 25, 26, FALSE, FALSE), (MAP([25, 26, 27], [28, 29, 30]), 31, 32, FALSE, FALSE), (MAP([1, 2, 3], [4, 5, 6]), 2, 7, TRUE, FALSE), (MAP([7, 8, 9], [10, 11, 12]), 10, 11, FALSE, TRUE), (MAP([13, 14, 15], [16, 17, 18]), 14, 20, TRUE, FALSE), (MAP([19, 20, 21], [22, 23, 24]), 25, 23, FALSE, TRUE), (MAP([25, 26, 27], [28, 29, 30]), 26, 31, TRUE, FALSE);

SELECT BOOL_AND(MAP_CONTAINS(m, k) = res_key) = BOOL_AND(MAP_CONTAINS_VALUE(m, v) = res_val) FROM test_maps;

SELECT 'my_key' IN MAP(['my_key'], ['my_value']) AS res;

SELECT 'my_keyz' IN MAP(['my_key'], ['my_value']) AS res;

PRAGMA enable_verification;

SELECT MAP_ENTRIES(MAP());

SELECT MAP_ENTRIES(MAP_FROM_ENTRIES([('a', 5)]));

SELECT MAP_ENTRIES(MAP_FROM_ENTRIES([('a', 5), ('b', 6), ('x', 21), ('abc', 0)]));

SELECT MAP_ENTRIES(MAP([5], [NULL]));

SELECT MAP_ENTRIES(MAP_FROM_ENTRIES([('a', 5), ('b', 6), ('x', 21), ('abc', 0)]));

SELECT MAP_ENTRIES(MAP());

SELECT MAP_ENTRIES(MAP_FROM_ENTRIES([('a', 5)]));

SELECT MAP_ENTRIES(MAP_FROM_ENTRIES([('a', 5), ('b', 6), ('x', 21), ('abc', 0)]));

SELECT MAP_ENTRIES(MAP([5], [NULL]));

SELECT MAP_ENTRIES(MAP_FROM_ENTRIES([('a', 5), ('b', 6), ('x', 21), ('abc', 0)]));

SELECT MAP_ENTRIES(MAP([], []));

SELECT MAP_ENTRIES(MAP(NULL, NULL));

SELECT MAP_ENTRIES(NULL);

SELECT MAP_ENTRIES(CAST(NULL AS MAP(NULL, NULL)));

SELECT MAP_ENTRIES(CAST(NULL AS MAP(INT, BIGINT)));

PRAGMA enable_verification;

SELECT MAP_KEYS(MAP([], []));

SELECT MAP_KEYS(MAP(['a'], [5]));

SELECT MAP_KEYS(MAP(['a', 'b', 'c', 'd'], [5, 1, 8, 3]));

SELECT MAP_KEYS(NULL);

CREATE TABLE t1 (list STRUCT(a INT, b TEXT)[]);

INSERT INTO t1 VALUES ([(1, 'x'), (2, 'y'), (4, 's')]);

SELECT MAP_KEYS(MAP_FROM_ENTRIES(list)) FROM t1;

INSERT INTO t1 VALUES ([(2, 'a'), (3, 'b')]);

INSERT INTO t1 VALUES ([(6, 'h'), (7, 'g')]);

SELECT MAP_KEYS(MAP_FROM_ENTRIES(list)) FROM t1;

INSERT INTO t1 VALUES (NULL);

SELECT MAP_KEYS(MAP_FROM_ENTRIES(list)) FROM t1;

CREATE TABLE tbl (maps MAP(INT, TEXT)[]);

INSERT INTO tbl VALUES ([MAP([5, 3, 2], ['a', 'c', 'b']), MAP([1], [NULL]), MAP([7, 9, 1, 3, 5, 6], ['ab', 'c', 'd', 'ef', 'ba', 'he'])]);

SELECT LIST_APPLY(maps, x -> MAP_KEYS(x)) FROM tbl;

CREATE MACRO map_keys_macro(x) AS (map_keys(x));

SELECT MAP_KEYS_MACRO(MAP_FROM_ENTRIES(list)) FROM t1;

SELECT maps, LIST_APPLY(maps, x -> ARRAY_SORT(MAP_KEYS(x))) FROM tbl;

SELECT maps, LIST_APPLY(maps, x -> MAP(ARRAY_SORT(MAP_KEYS(x)), ARRAY_SORT(MAP_VALUES(x)))) FROM tbl;

CREATE TABLE filtered (col MAP(INT, INT), idx INT);

INSERT INTO filtered VALUES (MAP([7, 4, 9, 1], [NULL, 4, 7, 5]), 0), (MAP([6, 3, 87, 2], [0, NULL, 5, NULL]), 1), (MAP([7, 4, 9], [8, 3, 4]), 2), (MAP([9, 2, 7, 5, 8, 1], [NULL, NULL, 4, 5, 6, 7]), 3);

SELECT MAP_KEYS(col) FROM filtered WHERE idx % 2 <> 0;

SELECT MAP_KEYS(MAP([], []));

SELECT MAP_KEYS(MAP(NULL, NULL));

SELECT MAP_KEYS(NULL);

SELECT MAP_KEYS(CAST(NULL AS MAP(NULL, NULL)));

SELECT MAP_KEYS(CAST(NULL AS MAP(INT, BIGINT)));

PRAGMA enable_verification;

SELECT MAP([[1], [2], [3]], [4, 2, 0]);

CREATE TABLE tbl (a INT[][], b TEXT[]);

INSERT INTO tbl VALUES ([[2], [3], [4]], ['a', 'b', 'c']);

INSERT INTO tbl VALUES ([[5], [6], [7]], ['d', 'e', 'f']);

INSERT INTO tbl VALUES ([[8], [9], [10]], ['g', 'h', 'i']);

SELECT MAP(a, b) FROM tbl;

SELECT MAP([[1, 2], [2, 1], [3, 1], [4, 2], [4, 2, 0], [1, 2]], [NULL, NULL, NULL, NULL, NULL, NULL]);

SELECT MAP([[1, 2], [2, 1], [3, 1], [4, 2], [4, 2, 0], NULL], [NULL, NULL, NULL, NULL, NULL, NULL]);

SELECT MAP([{'foo': TRUE}, {'foo': FALSE}, {'foo': NULL}], [4, 2, 0]);

SELECT MAP([{'foo': TRUE}, {'foo': FALSE}, {'foo': NULL}, {'foo': TRUE}], ['n', 'o', 'p', 'e']);

SELECT MAP([{'foo': 0}, {'foo': 1}, NULL, {'foo': 2}, {'foo': 3}], ['e', 'r', 'r', 'o', 'r']);

SELECT MAP([MAP([5], [4]), MAP([10], [2]), MAP([2, 3], [3, 2]), MAP([10], [3]), MAP([3, 2], [2, 3])], [0, 1, 2, 3, 4]);

SELECT MAP([MAP([5], [4]), MAP([10], [2]), MAP([2, 3], [3, 2]), MAP([10], [3]), MAP([3, 2], [2, 3]), MAP([5], [4])], [0, 1, 2, 3, 4, 5]);

SELECT MAP([MAP([5], [4]), MAP([10], [2]), MAP([2, 3], [3, 2]), NULL, MAP([3, 2], [2, 3])], [0, 1, 2, 3, 4]);

PRAGMA enable_verification;

SELECT m[1] FROM (SELECT MAP([1, 2, 3, 4], [10, 9, 8, 7]) AS m) AS T;

SELECT m[0] FROM (SELECT MAP([1, 2, 3, 4, 5], [10, 9, 8, 7, 11]) AS m) AS T;

SELECT m[NULL] FROM (SELECT MAP([1, 2, 3, 4, 5, NULL], [10, 9, 8, 7, 11, 42]) AS m) AS T;

SELECT m[NULL] FROM (SELECT MAP([1, 2, 3, 4, 5], [10, 9, 8, 7, 11]) AS m) AS T;

SELECT m[2] FROM (SELECT MAP([1, 2, 3, 4, 2], [10, 9, 8, 7, 11]) AS m) AS T;

SELECT m[2] FROM (SELECT MAP([], []) AS m) AS T;

SELECT m[2] FROM (SELECT MAP() AS m) AS T;

SELECT m[CAST(2 AS TINYINT) + 0] FROM (SELECT MAP([1, 2, 3, 4, 5], [10, 9, 8, 7, 11]) AS m) AS T;

SELECT m['Jon Lajoie'] FROM (SELECT MAP(['Jon Lajoie', 'Backstreet Boys', 'Tenacious D', 'Jon Lajoie'], [10, 9, 10, 11]) AS m) AS T;

SELECT m['Spice Girls'] FROM (SELECT MAP(['Jon Lajoie', 'Backstreet Boys', 'Tenacious D'], [10, 9, 10]) AS m) AS T;

SELECT m[NULL] FROM (SELECT MAP(['Jon Lajoie', 'Backstreet Boys', 'Tenacious D'], [10, 9, 10]) AS m) AS T;

SELECT m['Tenacious D'] FROM (SELECT MAP(['Jon Lajoie', 'Backstreet Boys', 'Tenacious D'], [10, 9, 1]) AS m) AS T;

SELECT m[0] FROM (SELECT MAP(['Jon Lajoie', 'Backstreet Boys', 'Tenacious D'], [10, 9, 10]) AS m) AS T;

SELECT MAP_EXTRACT(m, 1) FROM (SELECT MAP([1, 2, 3, 4], [10, 9, 8, 7]) AS m) AS T;

SELECT m[1] FROM (SELECT MAP([1, 2, 3, 4], [10, 9, 8, 7]) AS m) AS T;

SELECT MAP_EXTRACT(m, 3) FROM (SELECT MAP([1, 2, 3, 4], [10, 9, 8, 7]) AS m) AS T;

SELECT m[3] FROM (SELECT MAP([1, 2, 3, 4], [10, 9, 8, 7]) AS m) AS T;

SELECT ELEMENT_AT(m, 1) FROM (SELECT MAP([1, 2, 3, 4], [10, 9, 8, 7]) AS m) AS T;

SELECT ELEMENT_AT(m, 3) FROM (SELECT MAP([1, 2, 3, 4], [10, 9, 8, 7]) AS m) AS T;

SELECT m[10] FROM (SELECT MAP(lst, lst) AS m FROM (SELECT LIST(i) AS lst FROM RANGE(0, 10000) AS tbl(i)) AS lst_tbl) AS T;

SELECT m[1] FROM (SELECT MAP([1, 1, 1, 4], [10, 9, 8, 7]) AS m) AS T;

SELECT m[NULL] FROM (SELECT MAP(['Jon Lajoie', NULL, 'Tenacious D', NULL, NULL], [10, 9, 10, 11, 13]) AS m) AS T;

SELECT m['Jon Lajoie'] FROM (SELECT MAP(['Jon Lajoie', 'Tenacious D'], [10, 1]) AS m) AS T;

SELECT m[10] FROM (SELECT MAP([10, 9, 1, 11, 13], [NULL, NULL, NULL, NULL, NULL]) AS m) AS T;

SELECT m[NULL] FROM (SELECT MAP([NULL, NULL, NULL, NULL, NULL], [10, 9, 10, 11, 13]) AS m) AS T;

SELECT m[NULL] FROM (SELECT MAP([NULL, NULL, NULL, NULL, NULL], [NULL, NULL, NULL, NULL, NULL]) AS m) AS T;

CREATE TABLE ints (a INT, b INT);

INSERT INTO ints VALUES (1, 1), (2, 2), (3, 3), (4, 4);

SELECT m FROM (SELECT MAP(lsta, lstb) AS m FROM (SELECT LIST(a) AS lsta, LIST(b) AS lstb FROM ints WHERE a < 4 AND b > 1) AS lst_tbl) AS T;

SELECT m[2] FROM (SELECT MAP(lsta, lstb) AS m FROM (SELECT LIST(a) AS lsta, LIST(b) AS lstb FROM ints WHERE a < 4 AND b > 1) AS lst_tbl) AS T;

INSERT INTO ints VALUES (5, 1), (1, 2), (2, 3), (6, 4);

SELECT m FROM (SELECT MAP(lsta, lstb) AS m FROM (SELECT LIST(a) AS lsta, LIST(b) AS lstb FROM ints GROUP BY b) AS lst_tbl) AS T ORDER BY ALL;

SELECT m[1] FROM (SELECT MAP(lsta, lstb) AS m FROM (SELECT LIST(a) AS lsta, LIST(b) AS lstb FROM ints GROUP BY b) AS lst_tbl) AS T ORDER BY ALL;

INSERT INTO ints VALUES (1, 4);

SELECT m[1] FROM (SELECT MAP(lsta, lstb) AS m FROM (SELECT LIST(a) AS lsta, LIST(b) AS lstb FROM ints WHERE b < 4 GROUP BY b) AS lst_tbl) AS T ORDER BY ALL;

SELECT MAP_EXTRACT(MAP([10, 9, 12, 11, 13], [10, 9, 10, 11, 13]), 10);

SELECT m[1] FROM (SELECT MAP([1], [2]) FROM RANGE(0, 5) AS tbl(i)) AS tbl(m);

SELECT grp, m, CASE WHEN grp > 1 THEN m[0] ELSE NULL END FROM (SELECT grp, MAP(lsta, lstb) AS m FROM (SELECT a % 4 AS grp, LIST(a) AS lsta, LIST(a) AS lstb FROM RANGE(0, 7) AS tbl(a) GROUP BY grp) AS lst_tbl) AS T;

SELECT MAP_EXTRACT(MAP([], []), NULL);

SELECT MAP_EXTRACT(MAP(NULL, NULL), NULL);

SELECT MAP_EXTRACT(NULL, NULL);

SELECT MAP_EXTRACT(CAST(NULL AS MAP(NULL, NULL)), NULL);

SELECT MAP_EXTRACT(CAST(NULL AS MAP(INT, BIGINT)), NULL);

SELECT MAP_EXTRACT_VALUE(MAP([], []), NULL);

SELECT MAP_EXTRACT_VALUE(MAP(NULL, NULL), NULL);

SELECT MAP_EXTRACT_VALUE(NULL, NULL);

SELECT MAP_EXTRACT_VALUE(CAST(NULL AS MAP(NULL, NULL)), NULL);

SELECT MAP_EXTRACT_VALUE(CAST(NULL AS MAP(INT, BIGINT)), NULL);

PRAGMA enable_verification;

SELECT COLUMNS(*) FROM TEST_ALL_TYPES() WHERE NOT bool IS NULL;

SELECT MAP([COLUMNS(*)], [COLUMNS(*)])[COLUMNS(*)] FROM TEST_ALL_TYPES() WHERE NOT bool IS NULL;

SELECT m[[2, 0]] FROM (SELECT MAP([[0], [1], [2, 0], [3]], [10, 9, 8, 7]) AS m) AS T;

SELECT m[[2, 3]] FROM (SELECT MAP([[0], [1], [2, 0], [3], [5]], [10, 9, 8, 7, 11]) AS m) AS T;

SELECT m[NULL] FROM (SELECT MAP([[2], [NULL], [3, 0], [NULL, NULL], [5, 4], NULL], [10, 9, 8, 7, 11, 42]) AS m) AS T;

SELECT m[NULL] FROM (SELECT MAP([{'a': 3}, {'a': 4}, {'a': 5}, {'a': 6}, {'a': 7}], [10, 9, 8, 7, 11]) AS m) AS T;

SELECT m[2] FROM (SELECT MAP([[2, 2], [2], [3, 3], [4, 4, 4], [2]], [10, 9, 8, 7, 11]) AS m) AS T;

SELECT m[[CAST(2 AS TINYINT), CAST(3 AS BIGINT)]] FROM (SELECT MAP([[1], [2, 3], [3], [2], [3, 2]], [10, 9, 8, 7, 11]) AS m) AS T;

SELECT m[[10, 11]] FROM (SELECT MAP(lst, lst) AS m FROM (SELECT LIST([i, i + 1]) AS lst FROM RANGE(0, 10000) AS tbl(i)) AS lst_tbl) AS T;

SELECT m[[1]] FROM (SELECT MAP([[1], [1], [1], [4]], [10, 9, 8, 7]) AS m) AS T;

SELECT m[['Tenacious D', 'test']] FROM (SELECT MAP([['Jon Lajoie'], ['test', NULL], ['Tenacious D', 'test'], ['test', 'Tenacious D']], [5, 10, 9, 11]) AS m) AS T;

SELECT m[['Jon Lajoie']] FROM (SELECT MAP([['Jon Lajoie'], ['Tenacious D', 'a', 'b', 'c']], [10, 1]) AS m) AS T;

CREATE TABLE ints (a INT[], b INT[]);

INSERT INTO ints VALUES ([1], [1]), ([2], [2]), ([3], [3]), ([4], [4]);

SELECT m FROM (SELECT MAP(lsta, lstb) AS m FROM (SELECT LIST(a) AS lsta, LIST(b) AS lstb FROM ints WHERE a[1] < 4 AND b[1] > 1) AS lst_tbl) AS T;

SELECT m[[2]] FROM (SELECT MAP(lsta, lstb) AS m FROM (SELECT LIST(a) AS lsta, LIST(b) AS lstb FROM ints WHERE a[1] < 4 AND b[1] > 1) AS lst_tbl) AS T;

INSERT INTO ints VALUES ([5], [1]), ([1], [2]), ([2], [3]), ([6], [4]);

SELECT m FROM (SELECT MAP(lsta, lstb) AS m FROM (SELECT LIST(a) AS lsta, LIST(b) AS lstb FROM ints GROUP BY b) AS lst_tbl) AS T;

SELECT m[[1]] FROM (SELECT MAP(lsta, lstb) AS m FROM (SELECT LIST(a) AS lsta, LIST(b) AS lstb FROM ints GROUP BY b) AS lst_tbl) AS T;

INSERT INTO ints VALUES ([1], [4]);

SELECT m[[1]] FROM (SELECT MAP(lsta, lstb) AS m FROM (SELECT LIST(a) AS lsta, LIST(b) AS lstb FROM ints WHERE b[1] < 4 GROUP BY b) AS lst_tbl) AS T;

SELECT MAP_EXTRACT(MAP([[10], [9], [12], [11], [13]], [10, 9, 10, 11, 13]), [10]);

SELECT m[{'a': 1, 'b': 2, 'c': 3}] FROM (SELECT MAP([{'a': 1, 'b': 2, 'c': 3}], [2]) FROM RANGE(0, 5) AS tbl(i)) AS tbl(m);

SELECT grp, m, CASE WHEN grp > 1 THEN m[[0]] ELSE NULL END FROM (SELECT grp, MAP(lsta, lstb) AS m FROM (SELECT a % 4 AS grp, LIST([a]) AS lsta, LIST(a) AS lstb FROM RANGE(0, 7) AS tbl(a) GROUP BY grp) AS lst_tbl) AS T;

SELECT MAP([3, 2, 1], [[[4], [4]], [[4, 3]], [[3, 3, 3], [2], [NULL, 3, 2]]])[1];

CREATE TABLE t1 (id INT, k INT[], v DECIMAL[]);

INSERT INTO t1 SELECT * FROM (VALUES (0, [1, 2, 3, 4], [1.0, 2.0, 3.0, 4.0]), (1, [5, 6, 7, 8], [5.0, 6.0, 7.0, 8.0]), (2, [9, 10, 11, 12], [9.0, 10.0, 11.0, 12.0]), (3, [13, 14, 15, 16], [13.0, 14.0, 15.0, 16.0]), (4, [17, 18, 19, 20], [17.0, 18.0, 19.0, 20.0]), (5, [21, 22, 23, 24], [21.0, 22.0, 23.0, 24.0]), (6, [25, 26, 27, 28], [25.0, 26.0, 27.0, 28.0]), (7, [29, 30, 31, 32], [29.0, 30.0, 31.0, 32.0]), (8, [33, 34, 35, 36], [33.0, 34.0, 35.0, 36.0]), (9, [37, 38, 39, 40], [37.0, 38.0, 39.0, 40.0]));

CREATE TABLE t2 (id INT, v_map MAP(INT, DECIMAL(18, 3)), k INT[]);

INSERT INTO t2 SELECT id, MAP(k, v), k FROM t1;

INSERT INTO t2 SELECT id, MAP(k, v), k FROM t1;

PRAGMA enable_verification;

SELECT TRUE AS equal FROM TEST_VECTOR_TYPES(CAST(NULL AS INT[])) AS t(c) WHERE NOT c IS NULL;

SELECT MAP([c], [c])[c] IS NOT DISTINCT FROM c AS equal FROM TEST_VECTOR_TYPES(CAST(NULL AS INT[])) AS t(c) WHERE NOT c IS NULL;

SELECT filtered, last_element, pos, TRUE FROM (SELECT LIST_DISTINCT(c) AS filtered, filtered[-1] AS last_element, CASE WHEN last_element IS NULL THEN 0 ELSE LIST_POSITION(filtered, last_element) END AS pos, CASE WHEN last_element IS NULL THEN [] ELSE [LIST_POSITION(filtered, last_element)] END AS expected_result FROM TEST_VECTOR_TYPES(CAST(NULL AS INT[])) AS t(c) WHERE NOT c IS NULL);

SELECT filtered, last_element, pos, expected_result IS NOT DISTINCT FROM result AS equal FROM (SELECT LIST_DISTINCT(c) AS filtered, MAP(filtered, RANGE(1, LENGTH(filtered) + 1)) AS mymap, filtered[-1] AS last_element, CASE WHEN last_element IS NULL THEN 0 ELSE LIST_POSITION(filtered, last_element) END AS pos, CASE WHEN last_element IS NULL THEN NULL ELSE LIST_POSITION(filtered, last_element) END AS expected_result, mymap[last_element] AS result FROM TEST_VECTOR_TYPES(CAST(NULL AS INT[])) AS t(c) WHERE NOT c IS NULL);

CREATE TABLE t1 (id INT, k INT[], v DECIMAL[]);

INSERT INTO t1 SELECT * FROM (VALUES (0, [1, 2, 3, 4], [1.0, 2.0, 3.0, 4.0]), (1, [5, 6, 7, 8], [5.0, 6.0, 7.0, 8.0]), (2, [9, 10, 11, 12], [9.0, 10.0, 11.0, 12.0]), (3, [13, 14, 15, 16], [13.0, 14.0, 15.0, 16.0]), (4, [17, 18, 19, 20], [17.0, 18.0, 19.0, 20.0]), (5, [21, 22, 23, 24], [21.0, 22.0, 23.0, 24.0]), (6, [25, 26, 27, 28], [25.0, 26.0, 27.0, 28.0]), (7, [29, 30, 31, 32], [29.0, 30.0, 31.0, 32.0]), (8, [33, 34, 35, 36], [33.0, 34.0, 35.0, 36.0]), (9, [37, 38, 39, 40], [37.0, 38.0, 39.0, 40.0]));

CREATE TABLE t2 (id INT, v_map MAP(INT, DECIMAL(18, 3)), k INT[]);

INSERT INTO t2 SELECT id, MAP(k, v), k FROM t1;

INSERT INTO t2 SELECT id, MAP(k, v), k FROM t1;

CREATE TABLE tbl (key INT, val TEXT);

INSERT INTO tbl VALUES (1, 'duck'), (2, 'DB'), (3, 'duckDB');

SELECT MAP([key], [val])[key] FROM tbl WHERE key <> '2';

PRAGMA enable_verification;

SELECT MAP_VALUES(MAP([], []));

SELECT MAP_VALUES(MAP(['a'], [5]));

SELECT MAP_VALUES(MAP(['a', 'b', 'c', 'd'], [5, 1, 8, 3]));

SELECT MAP_VALUES(NULL);

SELECT MAP_VALUES(MAP(['a', 'b', 'c', 'd', 'e'], [NULL, 0, 1, NULL, 3]));

CREATE TABLE t1 (list STRUCT(a INT, b TEXT)[]);

INSERT INTO t1 VALUES ([(1, 'x'), (2, 'y'), (4, 's')]);

SELECT MAP_VALUES(MAP_FROM_ENTRIES(list)) FROM t1;

INSERT INTO t1 VALUES ([(2, 'a'), (3, 'b')]);

INSERT INTO t1 VALUES ([(6, 'h'), (7, 'g')]);

SELECT MAP_VALUES(MAP_FROM_ENTRIES(list)) FROM t1;

INSERT INTO t1 VALUES (NULL);

SELECT MAP_VALUES(MAP_FROM_ENTRIES(list)) FROM t1;

CREATE TABLE tbl (maps MAP(INT, TEXT)[]);

INSERT INTO tbl VALUES ([MAP([5, 3, 2], ['a', 'c', 'b']), MAP([1], [NULL]), MAP([7, 9, 1, 3, 5, 6], ['ab', 'c', 'd', 'ef', 'ba', 'he'])]);

SELECT LIST_APPLY(maps, x -> MAP_VALUES(x)) FROM tbl;

CREATE MACRO map_values_macro(x) AS (map_values(x));

SELECT MAP_VALUES_MACRO(MAP_FROM_ENTRIES(list)) FROM t1;

SELECT maps, LIST_APPLY(maps, x -> ARRAY_SORT(MAP_VALUES(x))) FROM tbl;

SELECT maps, LIST_APPLY(maps, x -> MAP(ARRAY_SORT(MAP_KEYS(x)), ARRAY_SORT(MAP_VALUES(x)))) FROM tbl;

CREATE TABLE filtered (col MAP(INT, INT), idx INT);

INSERT INTO filtered VALUES (MAP([7, 4, 9, 1], [NULL, 4, 7, 5]), 0), (MAP([6, 3, 87, 2], [0, NULL, 5, NULL]), 1), (MAP([7, 4, 9], [8, 3, 4]), 2), (MAP([9, 2, 7, 5, 8, 1], [NULL, NULL, 4, 5, 6, 7]), 3);

SELECT MAP_VALUES(col) FROM filtered WHERE idx % 2 <> 0;

SELECT MAP_VALUES(MAP([], []));

SELECT MAP_VALUES(MAP(NULL, NULL));

SELECT MAP_VALUES(NULL);

SELECT MAP_VALUES(CAST(NULL AS MAP(NULL, NULL)));

SELECT MAP_VALUES(CAST(NULL AS MAP(INT, BIGINT)));

PRAGMA enable_verification;

create macro input() as table
select *
from test_vector_types(NULL::INTEGER[]) t(i) where [x for x in i if x IS NOT NULL] != [] offset 3;

SELECT TRUE, TRUE FROM INPUT();

SELECT MAP_KEYS(m) = input, MAP_VALUES(m) = input FROM (SELECT MAP(input, input) AS m, input FROM INPUT() AS t(input)) AS m;

CREATE TABLE tbl (not_filtered BOOLEAN, keys INT[], vals TEXT[]);

INSERT INTO tbl SELECT CASE WHEN i >= 500 THEN TRUE ELSE FALSE END AS not_filtered, [x FOR x IN RANGE(0, length)] AS keys, ['a' || i + x FOR x IN RANGE(0, length)] AS vals FROM (SELECT 1 + CAST((RANDOM() * 5) AS BIGINT) AS length, i FROM RANGE(0, 1000) AS t(i));

SELECT vals[1] AS val, keys[1] AS key, MAP(keys, vals)[key] AS first_map_entry FROM tbl WHERE not_filtered AND first_map_entry <> val;

CREATE TABLE data AS SELECT * FROM (VALUES ([1], [3]), ([2], [9]), ([3], [15]), ([4], [21])) AS t(l, r);

SELECT l[1], r[1], MAP(l, r) FROM data WHERE r[1] <> 3;

SELECT l[1], r[1], MAP(l, r) FROM data WHERE r[1] <> 9;

SELECT l[1], r[1], MAP(l, r) FROM data WHERE r[1] <> 15;

SELECT * FROM TEST_VECTOR_TYPES(CAST(NULL AS MAP(TEXT, INT))) LIMIT 1;

PRAGMA enable_verification;

SELECT TYPEOF(MAP_KEYS(CAST(NULL AS MAP(TEXT, BIGINT))));

SELECT TYPEOF(MAP_KEYS(NULL));

SELECT TYPEOF(MAP_VALUES(CAST(NULL AS MAP(TEXT, BIGINT))));

SELECT TYPEOF(MAP_VALUES(NULL));

SELECT TYPEOF(MAP_ENTRIES(CAST(NULL AS MAP(TEXT, BIGINT))));

SELECT TYPEOF(MAP_ENTRIES(NULL));

SELECT TYPEOF(MAP_EXTRACT(CAST(NULL AS MAP(TEXT, BIGINT)), 'a'));

SELECT TYPEOF((CAST(NULL AS MAP(TEXT, BIGINT)))['a']);

SELECT TYPEOF(MAP_EXTRACT(NULL, 'a'));

SELECT TYPEOF(MAP_EXTRACT_VALUE(NULL, 'a'));

PRAGMA enable_verification;

CREATE TABLE t1 (list STRUCT(a INT, b TEXT)[]);

INSERT INTO t1 VALUES ([(1, 'x'), (2, 'y'), (4, 's')]);

INSERT INTO t1 VALUES ([(2, 'a'), (3, 'b')]);

INSERT INTO t1 VALUES ([(6, 'h'), (7, 'g')]);

SELECT MAP_FROM_ENTRIES(list) FROM t1;

INSERT INTO t1 VALUES (NULL);

SELECT MAP_FROM_ENTRIES(list) FROM t1;

INSERT INTO t1 VALUES ([(6, 'h'), (7, 'g')]);

SELECT MAP_FROM_ENTRIES(list) FROM t1;

PRAGMA enable_verification;

CREATE TABLE t1 (list STRUCT(a INT, b TEXT)[]);

INSERT INTO t1 VALUES ([(1, 'x'), (2, 'y'), (4, 's')]);

INSERT INTO t1 VALUES ([(2, 'a'), (3, 'b')]);

INSERT INTO t1 VALUES ([(6, 'h'), (7, 'g')]);

INSERT INTO t1 VALUES ([(10, NULL), (7, 'g')]);

SELECT MAP_FROM_ENTRIES(list) FROM t1;

SELECT MAP_FROM_ENTRIES(list) FROM t1;

INSERT INTO t1 VALUES ([NULL, NULL]);

SELECT MAP_FROM_ENTRIES(list) FROM t1;

PRAGMA enable_verification;

CREATE TABLE string_key AS SELECT MAP_FROM_ENTRIES([('a', 'x'), ('b', 'y')]) AS col;

SELECT * FROM string_key;

SELECT col['a'] FROM string_key;

CREATE TABLE string_key_dup AS SELECT MAP_FROM_ENTRIES([('a', 'x'), ('a', 'y')]) AS col;

CREATE TABLE tinyint_key AS SELECT MAP_FROM_ENTRIES([(CAST(123 AS TINYINT), 'x'), (-CAST(123 AS TINYINT), 'y')]) AS col;

SELECT * FROM tinyint_key;

SELECT col[123] FROM tinyint_key;

CREATE TABLE tinyint_key_dup AS SELECT MAP_FROM_ENTRIES([(123, 'x'), (123, 'y')]) AS col;

CREATE TABLE smallint_key AS SELECT MAP_FROM_ENTRIES([(CAST(123 AS SMALLINT), 'x'), (-CAST(123 AS SMALLINT), 'y')]) AS col;

SELECT * FROM smallint_key;

SELECT col[123] FROM smallint_key;

CREATE TABLE smallint_key_dup AS SELECT MAP_FROM_ENTRIES([(123, 'x'), (123, 'y')]) AS col;

CREATE TABLE integer_key AS SELECT MAP_FROM_ENTRIES([(CAST(123 AS INT), 'x'), (-CAST(123 AS INT), 'y')]) AS col;

SELECT * FROM integer_key;

SELECT col[123] FROM integer_key;

CREATE TABLE integer_key_dup AS SELECT MAP_FROM_ENTRIES([(123, 'x'), (123, 'y')]) AS col;

CREATE TABLE bigint_key AS SELECT MAP_FROM_ENTRIES([(CAST(123 AS BIGINT), 'x'), (-CAST(123 AS BIGINT), 'y')]) AS col;

SELECT * FROM bigint_key;

SELECT col[123] FROM bigint_key;

CREATE TABLE bigint_key_dup AS SELECT MAP_FROM_ENTRIES([(123, 'x'), (123, 'y')]) AS col;

CREATE TABLE hugeint_key AS SELECT MAP_FROM_ENTRIES([(CAST(123 AS INT128), 'x'), (-CAST(123 AS INT128), 'y')]) AS col;

SELECT * FROM hugeint_key;

SELECT col[123] FROM hugeint_key;

CREATE TABLE hugeint_key AS SELECT MAP_FROM_ENTRIES([(123, 'x'), (123, 'y')]) AS col;

CREATE TABLE boolean_key AS SELECT MAP_FROM_ENTRIES([(TRUE, 'x'), (FALSE, 'y')]) AS col;

SELECT * FROM boolean_key;

SELECT col[TRUE] FROM boolean_key;

CREATE TABLE boolean_key_dup AS SELECT MAP_FROM_ENTRIES([(TRUE, 'x'), (TRUE, 'y')]) AS col;

CREATE TABLE blob_key AS SELECT MAP_FROM_ENTRIES([(CAST('\xF0\x9F\xA6\x86' AS BLOB), 'x'), (CAST('\xF0\x9F\xA6\x87' AS BLOB), 'y')]) AS col;

SELECT * FROM blob_key;

SELECT col[CAST('\xF0\x9F\xA6\x86' AS BLOB)] FROM blob_key;

CREATE TABLE blob_key_dup AS SELECT MAP_FROM_ENTRIES([(CAST('\xF0\x9F\xA6\x86' AS BLOB), 'x'), (CAST('\xF0\x9F\xA6\x86' AS BLOB), 'y')]) AS col;

CREATE TABLE date_key AS SELECT MAP_FROM_ENTRIES([(CAST('1992-09-20' AS DATE), 'x'), (CAST('1992-12-20' AS DATE), 'y')]) AS col;

SELECT * FROM date_key;

SELECT col[CAST('1992-09-20' AS DATE)] FROM date_key;

CREATE TABLE date_key_dup AS SELECT MAP_FROM_ENTRIES([(CAST('1992-09-20' AS DATE), 'x'), (CAST('1992-09-20' AS DATE), 'y')]) AS col;

CREATE TABLE double_key AS SELECT MAP_FROM_ENTRIES([(CAST('12.3' AS DOUBLE), 'x'), (CAST('12.4' AS DOUBLE), 'y')]) AS col;

SELECT * FROM double_key;

SELECT col[CAST('12.3' AS DOUBLE)] FROM double_key;

CREATE TABLE double_key_dup AS SELECT MAP_FROM_ENTRIES([(CAST('12.3' AS DOUBLE), 'x'), (CAST('12.3' AS DOUBLE), 'y')]) AS col;

CREATE TABLE real_key AS SELECT MAP_FROM_ENTRIES([(CAST('12.3' AS REAL), 'x'), (CAST('12.4' AS REAL), 'y')]) AS col;

SELECT * FROM real_key;

SELECT col[CAST('12.3' AS REAL)] FROM real_key;

CREATE TABLE real_key_dup AS SELECT MAP_FROM_ENTRIES([(CAST('12.3' AS REAL), 'x'), (CAST('12.3' AS REAL), 'y')]) AS col;

CREATE TABLE decimal_key AS SELECT MAP_FROM_ENTRIES([(CAST('12.3' AS DECIMAL(18, 3)), 'x'), (CAST('12.4' AS DECIMAL(18, 3)), 'y')]) AS col;

SELECT * FROM decimal_key;

SELECT col[CAST('12.3' AS DECIMAL(18, 3))] FROM decimal_key;

CREATE TABLE decimal_key_dup AS SELECT MAP_FROM_ENTRIES([(CAST('12.3' AS DECIMAL(18, 3)), 'x'), (CAST('12.3' AS DECIMAL(18, 3)), 'y')]) AS col;

CREATE TABLE interval_key AS SELECT MAP_FROM_ENTRIES([((CAST('2022-01-02 01:00:00' AS TIMESTAMP) - CAST('2022-01-01' AS TIMESTAMP)), 'x'), ((CAST('2022-01-02 01:00:00' AS TIMESTAMP) - CAST('2021-01-01' AS TIMESTAMP)), 'y')]) AS col;

SELECT * FROM interval_key;

SELECT col[(CAST('2022-01-02 01:00:00' AS TIMESTAMP) - CAST('2022-01-01' AS TIMESTAMP))] FROM interval_key;

CREATE TABLE interval_key_dup AS SELECT MAP_FROM_ENTRIES([((CAST('2022-01-02 01:00:00' AS TIMESTAMP) - CAST('2022-01-01' AS TIMESTAMP)), 'x'), ((CAST('2022-01-02 01:00:00' AS TIMESTAMP) - CAST('2022-01-01' AS TIMESTAMP)), 'y')]) AS col;

CREATE TABLE time_key AS SELECT MAP_FROM_ENTRIES([(CAST('12:30:00' AS TIME), 'x'), (CAST('00:30:00' AS TIME), 'y')]) AS col;

SELECT * FROM time_key;

SELECT col[CAST('12:30:00' AS TIME)] FROM time_key;

CREATE TABLE time_key_dup AS SELECT MAP_FROM_ENTRIES([(CAST('12:30:00' AS TIME), 'x'), (CAST('12:30:00' AS TIME), 'y')]) AS col;

CREATE TABLE timestamp_key AS SELECT MAP_FROM_ENTRIES([(CAST('1992-09-20 11:30:00' AS TIMESTAMP), 'x'), (CAST('1992-10-20 11:30:00' AS TIMESTAMP), 'y')]) AS col;

SELECT * FROM timestamp_key;

SELECT col[CAST('1992-09-20 11:30:00' AS TIMESTAMP)] FROM timestamp_key;

CREATE TABLE timestamp_key_dup AS SELECT MAP_FROM_ENTRIES([(CAST('1992-09-20 11:30:00' AS TIMESTAMP), 'x'), (CAST('1992-09-20 11:30:00' AS TIMESTAMP), 'y')]) AS col;

CREATE TABLE uuid_key AS SELECT MAP_FROM_ENTRIES([(CAST('eeccb8c5-9943-b2bb-bb5e-222f4e14b687' AS UUID), 'x'), (CAST('eeccb8c5-9943-b2bb-bb5e-222f4e14b600' AS UUID), 'y')]) AS col;

SELECT * FROM uuid_key;

SELECT col[CAST('eeccb8c5-9943-b2bb-bb5e-222f4e14b687' AS UUID)] FROM uuid_key;

CREATE TABLE uuid_key_dup AS SELECT MAP_FROM_ENTRIES([(CAST('eeccb8c5-9943-b2bb-bb5e-222f4e14b687' AS UUID), 'x'), (CAST('eeccb8c5-9943-b2bb-bb5e-222f4e14b687' AS UUID), 'y')]) AS col;

CREATE TABLE t1 AS SELECT id, [{'key': 0, 'value': id}] AS entry FROM RANGE(0, 1000) AS t(id);

CREATE TABLE t2 AS SELECT 0 AS id FROM RANGE(0, 5);

SELECT t1.id, MAP_FROM_ENTRIES(entry) FROM t1 JOIN t2 USING (id);

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

SELECT MAP_FROM_ENTRIES(5);

SELECT MAP_FROM_ENTRIES([5, 4, 3]);

SELECT MAP_FROM_ENTRIES([(1, 'x', 'extra'), (2, 'y', 'extra')]);

SELECT MAP_FROM_ENTRIES([(1, 'x'), (2, 'y', 'extra')]);

SELECT MAP_FROM_ENTRIES([(NULL, 2), ([3, 4], 4)]);

PRAGMA enable_verification;

SELECT MAP_FROM_ENTRIES([([1, 2], 2), ([3, 4], 4)]);

SELECT MAP_FROM_ENTRIES([([1, 2], 2), ([1, 2], 4)]);

SELECT MAP_FROM_ENTRIES([({'a': 5, 'b': 7}, 2), ({'a': 3, 'b': 8}, 4)]);

SELECT MAP_FROM_ENTRIES([({'a': 5, 'b': 7}, 2), ({'a': 5, 'b': 7}, 4)]);

SELECT MAP_FROM_ENTRIES([(MAP([5, 3, 4], ['a', 'b', 'c']), 2), (MAP([4, 3, 5], ['a', 'b', 'c']), 4)]);

SELECT MAP_FROM_ENTRIES([(MAP([5, 3, 4], ['a', 'b', 'c']), 2), (MAP([5, 3, 4], ['a', 'b', 'c']), 4)]);

SELECT MAP_FROM_ENTRIES([([{'a': 5, 'b': 7}, {'a': 5, 'b': 7}], 2), ([{'a': 5, 'b': 7}, {'a': 5, 'b': 8}], 4)]);

SELECT MAP_FROM_ENTRIES([([{'a': 5, 'b': 7}, {'a': 5, 'b': 8}], 2), ([{'a': 5, 'b': 7}, {'a': 5, 'b': 8}], 4)]);

PRAGMA enable_verification;

SELECT MAP_FROM_ENTRIES(NULL);

CREATE TABLE tbl (input STRUCT(a INT, b INT)[]);
INSERT INTO tbl VALUES (NULL);
INSERT INTO tbl VALUES (NULL);
INSERT INTO tbl VALUES (NULL);

SELECT input FROM tbl;

SELECT MAP_FROM_ENTRIES(input) FROM tbl;

INSERT INTO tbl VALUES ([(5, 3), (6, 4), (7, 3)]);

SELECT MAP_FROM_ENTRIES(input) FROM tbl;

INSERT INTO tbl VALUES (NULL);

SELECT MAP_FROM_ENTRIES(input) FROM tbl;

PRAGMA enable_verification;

SELECT MAP_FROM_ENTRIES([NULL, (1, 'x'), NULL, (2, 'y')]);

SELECT MAP_FROM_ENTRIES(NULL);

SELECT MAP_FROM_ENTRIES([(1, 'x'), (NULL, 'z'), (2, 'y')]);

CREATE TABLE tbl (input STRUCT(a INT, b INT)[]);
INSERT INTO tbl VALUES (NULL);
INSERT INTO tbl VALUES ([(5, 3), (6, 4), (7, 3)]);
INSERT INTO tbl VALUES ([(5, 3), (6, 4), (7, 3)]);
INSERT INTO tbl VALUES ([]);

SELECT MAP_FROM_ENTRIES(input) FROM tbl;

PRAGMA enable_verification;

CALL dbgen(sf=0.01, suffix='_org');

CREATE VIEW lineitem AS SELECT STRUCT_EXTRACT(struct, 'orderkey') AS l_orderkey, STRUCT_EXTRACT(struct, 'partkey') AS l_partkey, STRUCT_EXTRACT(struct, 'suppkey') AS l_suppkey, STRUCT_EXTRACT(struct, 'linenumber') AS l_linenumber, STRUCT_EXTRACT(struct, 'quantity') AS l_quantity, STRUCT_EXTRACT(struct, 'extendedprice') AS l_extendedprice, STRUCT_EXTRACT(struct, 'discount') AS l_discount, STRUCT_EXTRACT(struct, 'tax') AS l_tax, STRUCT_EXTRACT(struct, 'returnflag') AS l_returnflag, STRUCT_EXTRACT(struct, 'linestatus') AS l_linestatus, STRUCT_EXTRACT(struct, 'shipdate') AS l_shipdate, STRUCT_EXTRACT(struct, 'commitdate') AS l_commitdate, STRUCT_EXTRACT(struct, 'receiptdate') AS l_receiptdate, STRUCT_EXTRACT(struct, 'shipinstruct') AS l_shipinstruct, STRUCT_EXTRACT(struct, 'shipmode') AS l_shipmode, STRUCT_EXTRACT(struct, 'comment') AS l_comment FROM (SELECT {'quantity': l_quantity, 'extendedprice': l_extendedprice, 'discount': l_discount, 'tax': l_tax, 'returnflag': l_returnflag, 'linestatus': l_linestatus, 'shipdate': l_shipdate, 'commitdate': l_commitdate, 'receiptdate': l_receiptdate, 'shipinstruct': l_shipinstruct, 'shipmode': l_shipmode, 'COMMENT': l_comment, 'orderkey': l_orderkey, 'partkey': l_partkey, 'suppkey': l_suppkey, 'linenumber': l_linenumber} AS struct FROM lineitem_org) AS structs;

PRAGMA TPCH(1);

SELECT l_orderkey, l_partkey, l_suppkey, l_linenumber, l_quantity, l_extendedprice, l_discount, l_tax, l_returnflag, l_linestatus, l_shipdate, l_commitdate, l_receiptdate, l_shipinstruct, l_shipmode FROM lineitem ORDER BY l_shipdate, l_orderkey LIMIT 5;

SELECT l_orderkey, l_partkey, l_suppkey, l_linenumber, l_quantity, l_extendedprice, l_discount, l_tax, l_returnflag, l_linestatus, l_shipdate, l_commitdate, l_receiptdate, l_shipinstruct, l_shipmode FROM lineitem ORDER BY l_orderkey DESC, l_shipdate DESC LIMIT 5;

PRAGMA enable_verification;

SELECT MIN({'i': i, 'j': i + 2}), MAX({'i': i, 'j': i + 2}), FIRST({'i': i, 'j': i + 2}) FROM RANGE(0, 10) AS tbl(i);

SELECT MIN({'i': -i, 'j': -i - 2}), MAX({'i': i + 2, 'j': i + 4}), FIRST({'i': i, 'j': i + 2}) FROM RANGE(0, 10) AS tbl(i);

SELECT GROUP_CONCAT(CAST({'i': i, 'j': i + 2} AS TEXT), ',') FROM RANGE(0, 10) AS tbl(i);

CREATE VIEW struct_int AS SELECT * FROM (VALUES ({'x': 1, 'y': 0}), ({'x': 1, 'y': 2}), ({'x': 1, 'y': NULL}), ({'x': NULL, 'y': 2}), ({'x': NULL, 'y': NULL}), ({'x': NULL, 'y': 0}), (NULL)) AS tbl(i);

SELECT MIN(i), MAX(i) FROM struct_int;

SET threads = 1;

SELECT MIN(i), MAX(i), FIRST(i) FROM struct_int;

PRAGMA enable_verification;

SELECT {'i': 1, 'j': 2};

SELECT {'i': NULL, 'j': 2};

SELECT {'i': [], 'j': 2};

SELECT {'i': [1, 2, 3], 'j': 2};

SELECT {'i': r, 'j': 2} FROM RANGE(0, 3) AS tbl(r);

SELECT {'i': 3, 'i': 4};

SELECT {};

SELECT {'1': 3};

PRAGMA enable_verification;

CREATE TABLE tbl (data STRUCT(str TEXT)[]);

INSERT INTO tbl (data) VALUES ([{'str': 'value'}]), (NULL), (NULL), (NULL);

SELECT data[1].str AS str FROM tbl WHERE NOT str IS NULL;

PRAGMA enable_verification;

CREATE VIEW million_structs AS SELECT {'m': (i + 1) % 998513, 'i': i + 1} AS s FROM RANGE(0, 999983) AS tbl(i);

SELECT MIN(s), MAX(s) FROM million_structs;

PRAGMA enable_verification;

CREATE TABLE t1 (id INT, k INT[], v DECIMAL[]);

INSERT INTO t1 SELECT * FROM (VALUES (0, [1, 2, 3, 4], [1.0, 2.0, 3.0, 4.0]), (1, [5, 6, 7, 8], [5.0, 6.0, 7.0, 8.0]), (2, [9, 10, 11, 12], [9.0, 10.0, 11.0, 12.0]), (3, [13, 14, 15, 16], [13.0, 14.0, 15.0, 16.0]), (4, [17, 18, 19, 20], [17.0, 18.0, 19.0, 20.0]), (5, [21, 22, 23, 24], [21.0, 22.0, 23.0, 24.0]), (6, [25, 26, 27, 28], [25.0, 26.0, 27.0, 28.0]), (7, [29, 30, 31, 32], [29.0, 30.0, 31.0, 32.0]), (8, [33, 34, 35, 36], [33.0, 34.0, 35.0, 36.0]), (9, [37, 38, 39, 40], [37.0, 38.0, 39.0, 40.0]));

CREATE TABLE t2 (id INT, v_map STRUCT(key INT[], val DECIMAL[]), k INT[]);

INSERT INTO t2 SELECT id, {'key': k, 'val': v}, k FROM t1;

SELECT * FROM t2 ORDER BY id;

SELECT * FROM t2 WHERE id >= 4 ORDER BY id;

PRAGMA enable_verification;

SELECT (SELECT {'a': 3});

SELECT (SELECT {'a': 3})['a'];

SELECT (SELECT CASE WHEN 1 = 0 THEN {'a': 3} ELSE NULL END);

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

CREATE TABLE struct_data (g INT, e INT);

INSERT INTO struct_data VALUES (1, 1), (1, 2), (2, 3), (2, 4), (2, 5), (3, 6), (5, NULL);

SELECT {'a': 42, 'b': 43};

SELECT e, {'_0': e} FROM struct_data ORDER BY e LIMIT 2;

SELECT {'a': 42, 'b': 43} AS struct;

SELECT {'a': 42, 'b': 43} AS struct;

SELECT {'a': NULL, 'b': NULL} AS struct;

SELECT e, STRUCT_EXTRACT({'xx': e, 'yy': g}, 'xx') AS ee FROM struct_data;

SELECT e, ({'xx': e, 'yy': g}).xx AS ee FROM struct_data;

SELECT e, (a).xx AS ee FROM (SELECT e, {'xx': e, 'yy': g} FROM struct_data) AS tbl(e, a);

SELECT e, STRUCT_EXTRACT({'xx': e, 'yy': g}, 'xx') AS s FROM struct_data WHERE e > 4;

SELECT e, STRUCT_EXTRACT({'xx': e, 'yy': g}, 'xx') AS s FROM struct_data WHERE e IS NULL;

SELECT e, STRUCT_EXTRACT({'xx': e // 2}, 'xx') AS s FROM struct_data WHERE e > 4;

SELECT e, STRUCT_EXTRACT({'xx': e // 2}, 'xx') * 2 AS s FROM struct_data WHERE e > 4;

SELECT e, STRUCT_EXTRACT({'xx': e, 'yy': g}, 'xx') AS ee FROM struct_data ORDER BY e DESC;

SELECT e, STRUCT_EXTRACT({'a': e, 'b': ROWID, 'c': 42}, 'c') AS ee FROM struct_data ORDER BY ROWID;

SELECT STRUCT_EXTRACT({'a': 42, 'b': 43}, 'a') FROM struct_data;

SELECT STRUCT_EXTRACT({'a': 42, 'b': 43}, 'a') AS s;

SELECT STRUCT_EXTRACT(STRUCT_EXTRACT({'a': {'x': 'asdf', 'y': NULL}, 'b': 43}, 'a'), 'x') AS s;

SELECT {} FROM struct_data;

SELECT {'_0': e + 1} FROM struct_data;

SELECT {'a': e, 'a': g} FROM struct_data;

SELECT {'_0': e, '_1': e} FROM struct_data;

SELECT STRUCT_EXTRACT(e, 'e') FROM struct_data;

SELECT STRUCT_EXTRACT(e, 'e') FROM struct_data;

SELECT STRUCT_EXTRACT(e, 'e') FROM struct_data;

SELECT STRUCT_EXTRACT(e, 'e') FROM struct_data;

SELECT STRUCT_EXTRACT({'xx': e, 'yy': g}, 'zz') FROM struct_data;

SELECT STRUCT_EXTRACT({'xx': e, 'yy': g}, 'zz') FROM struct_data;

SELECT STRUCT_EXTRACT({'xx': e, 'yy': g}, g) FROM struct_data;

SELECT STRUCT_EXTRACT({'xx': e, 'yy': g}, '42') FROM struct_data;

CREATE TABLE test AS SELECT e, {'_0': e} FROM struct_data;

SELECT {'i': range, 'j': 'asdf'} FROM RANGE(0, 2);

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

SELECT 0 AND 0, 0 AND 1, 1 AND 0, 1 AND 1, NULL AND 0, NULL AND 1, 0 AND NULL, 1 AND NULL, NULL AND NULL;

SELECT 0 OR 0, 0 OR 1, 1 OR 0, 1 OR 1, NULL OR 0, NULL OR 1, 0 OR NULL, 1 OR NULL, NULL OR NULL;

SELECT NOT (0), NOT (1), NOT (NULL);

SELECT NULL IS NULL, NOT NULL IS NULL, 42 IS NULL, NOT 42 IS NULL;

SELECT NULL = NULL, NULL <> NULL, 42 = NULL, 42 <> NULL;

CREATE TABLE test (a INT, b INT);

INSERT INTO test VALUES (11, 22), (NULL, 21), (13, 22), (12, NULL), (16, NULL);

SELECT b, COUNT(a), SUM(a), MIN(a), MAX(a) FROM test GROUP BY b ORDER BY b;

CREATE TABLE test (a INT, b INT);

INSERT INTO test VALUES (11, 1), (NULL, 2), (13, 3);

SELECT a IS NULL, NOT a IS NULL, rowid IS NULL, (a = NULL) IS NULL FROM test ORDER BY b;

SELECT a IS NULL, NOT a IS NULL, rowid IS NULL, (a = NULL) IS NULL FROM test WHERE b <> 1 ORDER BY b;

PRAGMA enable_verification;

SELECT NULL;

SELECT 3 + NULL;

SELECT NULL + 3;

SELECT NULL + NULL;

SELECT 1 + (NULL + NULL);

SET ieee_floating_point_ops = FALSE;

SELECT 4 / 0;

CREATE TABLE test (a INT, b INT);

INSERT INTO test VALUES (11, 22), (NULL, 21), (13, 22);

SELECT a FROM test;

SELECT CAST(a AS BIGINT) FROM test;

SELECT a / 0 FROM test;

SELECT a / (a - a) FROM test;

SELECT a + b FROM test;

SET default_null_order = 'nulls_first';

CREATE TABLE test (a INT, b INT);

INSERT INTO test VALUES (11, 22), (NULL, 21), (13, 22);

SELECT SUM(a), MIN(a), MAX(a) FROM test;

SELECT COUNT(*), COUNT(a), COUNT(b) FROM test;

SELECT b, COUNT(a), SUM(a), MIN(a), MAX(a) FROM test GROUP BY b ORDER BY b;

INSERT INTO test VALUES (12, NULL), (16, NULL);

SELECT b, COUNT(a), SUM(a), MIN(a), MAX(a) FROM test GROUP BY b ORDER BY b;

INSERT INTO test VALUES (NULL, NULL), (NULL, 22);

SELECT b, COUNT(a), SUM(a), MIN(a), MAX(a) FROM test GROUP BY b ORDER BY b;

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

SELECT a + b FROM TEST_VECTOR_TYPES(CAST(NULL AS INT), CAST(NULL AS INT)) AS t(a, b);

PRAGMA enable_verification;

CREATE TABLE bigints AS SELECT CAST(i AS BIGINT) AS i FROM (VALUES (-9223372036854775808), (0), (9223372036854775807)) AS tbl(i);

SELECT CAST(i AS UTINYINT) FROM bigints;

SELECT CAST(i AS USMALLINT) FROM bigints;

SELECT CAST(i AS UINTEGER) FROM bigints;

SELECT CAST(i AS UBIGINT) FROM bigints;

SELECT CAST(i AS UTINYINT) FROM bigints WHERE i >= 0 ORDER BY i;

SELECT CAST(i AS USMALLINT) FROM bigints WHERE i >= 0 ORDER BY i;

SELECT CAST(i AS UINTEGER) FROM bigints WHERE i >= 0 ORDER BY i;

SELECT CAST(i AS UBIGINT) FROM bigints WHERE i >= 0 ORDER BY i;

SELECT TRY_CAST(i AS UTINYINT) FROM bigints ORDER BY i;

SELECT TRY_CAST(i AS USMALLINT) FROM bigints ORDER BY i;

SELECT TRY_CAST(i AS UINTEGER) FROM bigints ORDER BY i;

SELECT TRY_CAST(i AS UBIGINT) FROM bigints ORDER BY i;

SELECT CAST(i AS TINYINT) FROM bigints ORDER BY i;

SELECT TRY_CAST(i AS TINYINT) FROM bigints ORDER BY i;

SELECT CAST(i AS SMALLINT) FROM bigints ORDER BY i;

SELECT TRY_CAST(i AS SMALLINT) FROM bigints ORDER BY i;

SELECT CAST(i AS INT) FROM bigints ORDER BY i;

SELECT TRY_CAST(i AS INT) FROM bigints ORDER BY i;

SELECT CAST(CAST(i AS INT128) AS BIGINT) FROM bigints ORDER BY i;

SELECT CAST(i AS REAL) FROM bigints ORDER BY i;

SELECT CAST(i AS DOUBLE) FROM bigints ORDER BY i;

SELECT CAST(i AS BOOLEAN) FROM bigints ORDER BY i;

SELECT CAST(i AS TEXT) FROM bigints ORDER BY i;

CREATE TABLE strings AS SELECT * FROM (VALUES ('   '), ('blablabla'), ('-10000000000000000000'), ('-9223372036854775808'), ('0'), ('9223372036854775807'), ('10000000000000000000')) AS tbl(s);

SELECT CAST(s AS BIGINT) FROM strings;

SELECT TRY_CAST(s AS BIGINT) FROM strings;

SELECT CAST(CAST(i AS DECIMAL(3, 0)) AS BIGINT) FROM bigints ORDER BY i;

SELECT CAST(CAST(i AS DECIMAL(9, 0)) AS BIGINT) FROM bigints ORDER BY i;

SELECT CAST(CAST(i AS DECIMAL(18, 0)) AS BIGINT) FROM bigints ORDER BY i;

SELECT CAST(CAST(i AS DECIMAL(38, 0)) AS BIGINT) FROM bigints ORDER BY i;

SELECT CAST(CAST(i AS DECIMAL(38, 20)) AS BIGINT) FROM bigints ORDER BY i;

SELECT CAST(TRY_CAST(i AS DECIMAL(3, 0)) AS BIGINT) FROM bigints ORDER BY i;

SELECT CAST(TRY_CAST(i AS DECIMAL(9, 0)) AS BIGINT) FROM bigints ORDER BY i;

SELECT CAST(TRY_CAST(i AS DECIMAL(18, 0)) AS BIGINT) FROM bigints ORDER BY i;

SELECT CAST(TRY_CAST(i AS DECIMAL(38, 20)) AS BIGINT) FROM bigints ORDER BY i;

PRAGMA enable_verification;

CREATE TABLE booleans AS SELECT b::BOOLEAN b FROM (VALUES (NULL), (0), (1)) tbl(b)
foreach type <numeric> DECIMAL(9,8) DECIMAL(18,7) DECIMAL(38,1) DECIMAL(38,5) DECIMAL(4,3);

CREATE TABLE booleans AS SELECT b::BOOLEAN b FROM (VALUES (NULL), (0), (1)) tbl(b)
foreach type <numeric> DECIMAL(9,8) DECIMAL(18,7) DECIMAL(38,1) DECIMAL(38,5) DECIMAL(4,3);

CREATE TABLE booleans AS SELECT b::BOOLEAN b FROM (VALUES (NULL), (0), (1)) tbl(b)
foreach type <numeric> DECIMAL(9,8) DECIMAL(18,7) DECIMAL(38,1) DECIMAL(38,5) DECIMAL(4,3);

CREATE TABLE booleans AS SELECT b::BOOLEAN b FROM (VALUES (NULL), (0), (1)) tbl(b)
foreach type <numeric> DECIMAL(9,8) DECIMAL(18,7) DECIMAL(38,1) DECIMAL(38,5) DECIMAL(4,3);

CREATE TABLE booleans AS SELECT b::BOOLEAN b FROM (VALUES (NULL), (0), (1)) tbl(b)
foreach type <numeric> DECIMAL(9,8) DECIMAL(18,7) DECIMAL(38,1) DECIMAL(38,5) DECIMAL(4,3);

PRAGMA enable_verification;

CREATE TABLE hugeints AS SELECT CAST(i AS INT128) AS i FROM (VALUES (-170141183460469231731687303715884105728), (0), (170141183460469231731687303715884105727)) AS tbl(i);

SELECT CAST(i AS UTINYINT) FROM hugeints;

SELECT CAST(i AS USMALLINT) FROM hugeints;

SELECT CAST(i AS UINTEGER) FROM hugeints;

SELECT CAST(i AS UBIGINT) FROM hugeints;

SELECT CAST(i AS UTINYINT) FROM hugeints WHERE i >= 0 ORDER BY i;

SELECT CAST(i AS USMALLINT) FROM hugeints WHERE i >= 0 ORDER BY i;

SELECT CAST(i AS UINTEGER) FROM hugeints WHERE i >= 0 ORDER BY i;

SELECT CAST(i AS UBIGINT) FROM hugeints WHERE i >= 0 ORDER BY i;

SELECT TRY_CAST(i AS UTINYINT) FROM hugeints ORDER BY i;

SELECT TRY_CAST(i AS USMALLINT) FROM hugeints ORDER BY i;

SELECT TRY_CAST(i AS UINTEGER) FROM hugeints ORDER BY i;

SELECT TRY_CAST(i AS UBIGINT) FROM hugeints ORDER BY i;

SELECT CAST(i AS TINYINT) FROM hugeints ORDER BY i;

SELECT TRY_CAST(i AS TINYINT) FROM hugeints ORDER BY i;

SELECT CAST(i AS SMALLINT) FROM hugeints ORDER BY i;

SELECT TRY_CAST(i AS SMALLINT) FROM hugeints ORDER BY i;

SELECT CAST(i AS INT) FROM hugeints ORDER BY i;

SELECT TRY_CAST(i AS INT) FROM hugeints ORDER BY i;

SELECT CAST(i AS BIGINT) FROM hugeints ORDER BY i;

SELECT TRY_CAST(i AS BIGINT) FROM hugeints ORDER BY i;

SELECT CAST(i AS REAL) FROM hugeints ORDER BY i;

SELECT CAST(i AS DOUBLE) FROM hugeints ORDER BY i;

SELECT CAST(i AS BOOLEAN) FROM hugeints ORDER BY i;

SELECT CAST(i AS TEXT) FROM hugeints ORDER BY i;

CREATE TABLE strings AS SELECT * FROM (VALUES ('   '), ('blablabla'), ('-1000000000000000000000000000000000000000'), ('-170141183460469231731687303715884105728'), ('0'), ('170141183460469231731687303715884105727'), ('1000000000000000000000000000000000000000')) AS tbl(s);

SELECT CAST(s AS INT128) FROM strings;

SELECT TRY_CAST(s AS INT128) FROM strings;

SELECT CAST(CAST(i AS DECIMAL(3, 0)) AS INT128) FROM hugeints ORDER BY i;

SELECT CAST(CAST(i AS DECIMAL(9, 0)) AS INT128) FROM hugeints ORDER BY i;

SELECT CAST(CAST(i AS DECIMAL(18, 0)) AS INT128) FROM hugeints ORDER BY i;

SELECT CAST(CAST(i AS DECIMAL(38, 0)) AS INT128) FROM hugeints ORDER BY i;

SELECT CAST(TRY_CAST(i AS DECIMAL(3, 0)) AS INT128) FROM hugeints ORDER BY i;

SELECT CAST(TRY_CAST(i AS DECIMAL(9, 0)) AS INT128) FROM hugeints ORDER BY i;

SELECT CAST(TRY_CAST(i AS DECIMAL(18, 0)) AS INT128) FROM hugeints ORDER BY i;

SELECT CAST(TRY_CAST(i AS DECIMAL(38, 0)) AS INT128) FROM hugeints ORDER BY i;

PRAGMA enable_verification;

CREATE TABLE integers AS SELECT CAST(i AS INT) AS i FROM (VALUES (-2147483648), (0), (2147483647)) AS tbl(i);

SELECT CAST(i AS UTINYINT) FROM integers;

SELECT CAST(i AS USMALLINT) FROM integers;

SELECT CAST(i AS UINTEGER) FROM integers;

SELECT CAST(i AS UBIGINT) FROM integers;

SELECT CAST(i AS UTINYINT) FROM integers WHERE i >= 0 ORDER BY i;

SELECT CAST(i AS USMALLINT) FROM integers WHERE i >= 0 ORDER BY i;

SELECT CAST(i AS UINTEGER) FROM integers WHERE i >= 0 ORDER BY i;

SELECT CAST(i AS UBIGINT) FROM integers WHERE i >= 0 ORDER BY i;

SELECT CAST(TRY_CAST(i AS UTINYINT) AS INT) FROM integers ORDER BY i;

SELECT CAST(TRY_CAST(i AS USMALLINT) AS INT) FROM integers ORDER BY i;

SELECT CAST(TRY_CAST(i AS UINTEGER) AS INT) FROM integers ORDER BY i;

SELECT CAST(TRY_CAST(i AS UBIGINT) AS INT) FROM integers ORDER BY i;

SELECT CAST(i AS TINYINT) FROM integers ORDER BY i;

SELECT TRY_CAST(i AS TINYINT) FROM integers ORDER BY i;

SELECT CAST(i AS SMALLINT) FROM integers ORDER BY i;

SELECT TRY_CAST(i AS SMALLINT) FROM integers ORDER BY i;

SELECT CAST(CAST(i AS BIGINT) AS INT) FROM integers ORDER BY i;

SELECT CAST(CAST(i AS INT128) AS INT) FROM integers ORDER BY i;

SELECT CAST(i AS REAL) FROM integers ORDER BY i;

SELECT CAST(i AS DOUBLE) FROM integers ORDER BY i;

SELECT CAST(i AS BOOLEAN) FROM integers ORDER BY i;

SELECT CAST(i AS TEXT) FROM integers ORDER BY i;

CREATE TABLE strings AS SELECT * FROM (VALUES ('   '), ('blablabla'), ('-10000000000'), ('-2147483648'), ('0'), ('2147483647'), ('10000000000')) AS tbl(s);

SELECT CAST(s AS INT) FROM strings;

SELECT TRY_CAST(s AS INT) FROM strings;

SELECT CAST(CAST(i AS DECIMAL(3, 0)) AS INT) FROM integers ORDER BY i;

SELECT CAST(CAST(i AS DECIMAL(9, 0)) AS INT) FROM integers ORDER BY i;

SELECT CAST(CAST(i AS DECIMAL(18, 0)) AS INT) FROM integers ORDER BY i;

SELECT CAST(CAST(i AS DECIMAL(38, 0)) AS INT) FROM integers ORDER BY i;

SELECT CAST(CAST(i AS DECIMAL(3, 0)) AS INT) FROM integers ORDER BY i;

SELECT CAST(CAST(i AS DECIMAL(9, 0)) AS INT) FROM integers ORDER BY i;

SELECT CAST(CAST(i AS DECIMAL(18, 9)) AS INT) FROM integers ORDER BY i;

SELECT CAST(CAST(i AS DECIMAL(38, 29)) AS INT) FROM integers ORDER BY i;

SELECT CAST(TRY_CAST(i AS DECIMAL(3, 0)) AS INT) FROM integers ORDER BY i;

SELECT CAST(TRY_CAST(i AS DECIMAL(9, 0)) AS INT) FROM integers ORDER BY i;

SELECT CAST(TRY_CAST(i AS DECIMAL(18, 9)) AS INT) FROM integers ORDER BY i;

SELECT CAST(TRY_CAST(i AS DECIMAL(38, 29)) AS INT) FROM integers ORDER BY i;

PRAGMA enable_verification;

CREATE TABLE smallints AS SELECT CAST(i AS SMALLINT) AS i FROM (VALUES (-32768), (0), (32767)) AS tbl(i);

SELECT CAST(i AS UTINYINT) FROM smallints;

SELECT CAST(i AS USMALLINT) FROM smallints;

SELECT CAST(i AS UINTEGER) FROM smallints;

SELECT CAST(i AS UBIGINT) FROM smallints;

SELECT CAST(i AS UTINYINT) FROM smallints WHERE i >= 0 ORDER BY i;

SELECT CAST(i AS USMALLINT) FROM smallints WHERE i >= 0 ORDER BY i;

SELECT CAST(i AS UINTEGER) FROM smallints WHERE i >= 0 ORDER BY i;

SELECT CAST(i AS UBIGINT) FROM smallints WHERE i >= 0 ORDER BY i;

SELECT CAST(TRY_CAST(i AS UTINYINT) AS SMALLINT) FROM smallints ORDER BY i;

SELECT CAST(TRY_CAST(i AS USMALLINT) AS SMALLINT) FROM smallints ORDER BY i;

SELECT CAST(TRY_CAST(i AS UINTEGER) AS SMALLINT) FROM smallints ORDER BY i;

SELECT CAST(TRY_CAST(i AS UBIGINT) AS SMALLINT) FROM smallints ORDER BY i;

SELECT CAST(i AS TINYINT) FROM smallints ORDER BY i;

SELECT CAST(TRY_CAST(i AS TINYINT) AS SMALLINT) FROM smallints ORDER BY i;

SELECT CAST(CAST(i AS INT) AS SMALLINT) FROM smallints ORDER BY i;

SELECT CAST(CAST(i AS BIGINT) AS SMALLINT) FROM smallints ORDER BY i;

SELECT CAST(CAST(i AS INT128) AS SMALLINT) FROM smallints ORDER BY i;

SELECT CAST(i AS REAL) FROM smallints ORDER BY i;

SELECT CAST(i AS DOUBLE) FROM smallints ORDER BY i;

SELECT CAST(i AS BOOLEAN) FROM smallints ORDER BY i;

SELECT CAST(i AS TEXT) FROM smallints ORDER BY i;

CREATE TABLE strings AS SELECT * FROM (VALUES ('   '), ('blablabla'), ('-100000'), ('-32768'), ('0'), ('32767'), ('100000')) AS tbl(s);

SELECT CAST(s AS SMALLINT) FROM strings;

SELECT TRY_CAST(s AS SMALLINT) FROM strings;

SELECT CAST(CAST(i AS DECIMAL(3, 0)) AS SMALLINT) FROM smallints ORDER BY i;

SELECT CAST(CAST(i AS DECIMAL(9, 0)) AS SMALLINT) FROM smallints ORDER BY i;

SELECT CAST(CAST(i AS DECIMAL(18, 0)) AS SMALLINT) FROM smallints ORDER BY i;

SELECT CAST(CAST(i AS DECIMAL(38, 0)) AS SMALLINT) FROM smallints ORDER BY i;

SELECT CAST(CAST(i AS DECIMAL(3, 0)) AS SMALLINT) FROM smallints ORDER BY i;

SELECT CAST(CAST(i AS DECIMAL(9, 5)) AS SMALLINT) FROM smallints ORDER BY i;

SELECT CAST(CAST(i AS DECIMAL(18, 14)) AS SMALLINT) FROM smallints ORDER BY i;

SELECT CAST(CAST(i AS DECIMAL(38, 34)) AS SMALLINT) FROM smallints ORDER BY i;

SELECT CAST(TRY_CAST(i AS DECIMAL(3, 0)) AS SMALLINT) FROM smallints ORDER BY i;

SELECT CAST(TRY_CAST(i AS DECIMAL(9, 5)) AS SMALLINT) FROM smallints ORDER BY i;

SELECT CAST(TRY_CAST(i AS DECIMAL(18, 14)) AS SMALLINT) FROM smallints ORDER BY i;

SELECT CAST(TRY_CAST(i AS DECIMAL(38, 34)) AS SMALLINT) FROM smallints ORDER BY i;

PRAGMA enable_verification;

PRAGMA enable_verification;

INSERT INTO numerics VALUES (0176030871715840, 2.2);

SELECT * FROM numerics;

SELECT * FROM numerics;

PRAGMA enable_verification;

CREATE TABLE tinyints AS SELECT CAST(i AS TINYINT) AS i FROM (VALUES (-128), (0), (127)) AS tbl(i);

SELECT CAST(i AS UTINYINT) FROM tinyints;

SELECT CAST(i AS USMALLINT) FROM tinyints;

SELECT CAST(i AS UINTEGER) FROM tinyints;

SELECT CAST(i AS UBIGINT) FROM tinyints;

SELECT CAST(CAST(i AS UTINYINT) AS TINYINT) FROM tinyints WHERE i >= 0 ORDER BY i;

SELECT CAST(CAST(i AS USMALLINT) AS TINYINT) FROM tinyints WHERE i >= 0 ORDER BY i;

SELECT CAST(CAST(i AS UINTEGER) AS TINYINT) FROM tinyints WHERE i >= 0 ORDER BY i;

SELECT CAST(CAST(i AS UBIGINT) AS TINYINT) FROM tinyints WHERE i >= 0 ORDER BY i;

SELECT TRY_CAST(i AS UTINYINT) FROM tinyints ORDER BY i;

SELECT TRY_CAST(i AS USMALLINT) FROM tinyints ORDER BY i;

SELECT TRY_CAST(i AS UINTEGER) FROM tinyints ORDER BY i;

SELECT TRY_CAST(i AS UBIGINT) FROM tinyints ORDER BY i;

SELECT CAST(CAST(i AS SMALLINT) AS TINYINT) FROM tinyints ORDER BY i;

SELECT CAST(CAST(i AS INT) AS TINYINT) FROM tinyints ORDER BY i;

SELECT CAST(CAST(i AS BIGINT) AS TINYINT) FROM tinyints ORDER BY i;

SELECT CAST(CAST(i AS INT128) AS TINYINT) FROM tinyints ORDER BY i;

SELECT CAST(i AS REAL) FROM tinyints ORDER BY i;

SELECT CAST(i AS DOUBLE) FROM tinyints ORDER BY i;

SELECT CAST(i AS BOOLEAN) FROM tinyints ORDER BY i;

SELECT CAST(CAST(i AS TEXT) AS TINYINT) FROM tinyints ORDER BY i;

CREATE TABLE strings AS SELECT * FROM (VALUES ('   '), ('blablabla'), ('-1000'), ('-128'), ('0'), ('127'), ('1000')) AS tbl(s);

SELECT CAST(s AS TINYINT) FROM strings;

SELECT TRY_CAST(s AS TINYINT) FROM strings;

SELECT CAST(CAST(i AS DECIMAL(3, 0)) AS TINYINT) FROM tinyints ORDER BY i;

SELECT CAST(CAST(i AS DECIMAL(9, 0)) AS TINYINT) FROM tinyints ORDER BY i;

SELECT CAST(CAST(i AS DECIMAL(18, 0)) AS TINYINT) FROM tinyints ORDER BY i;

SELECT CAST(CAST(i AS DECIMAL(38, 0)) AS TINYINT) FROM tinyints ORDER BY i;

SELECT CAST(CAST(i AS DECIMAL(3, 1)) AS TINYINT) FROM tinyints ORDER BY i;

SELECT CAST(CAST(i AS DECIMAL(9, 7)) AS TINYINT) FROM tinyints ORDER BY i;

SELECT CAST(CAST(i AS DECIMAL(18, 16)) AS TINYINT) FROM tinyints ORDER BY i;

SELECT CAST(CAST(i AS DECIMAL(38, 36)) AS TINYINT) FROM tinyints ORDER BY i;

SELECT CAST(TRY_CAST(i AS DECIMAL(3, 1)) AS TINYINT) FROM tinyints ORDER BY i;

SELECT CAST(TRY_CAST(i AS DECIMAL(9, 7)) AS TINYINT) FROM tinyints ORDER BY i;

SELECT CAST(TRY_CAST(i AS DECIMAL(18, 16)) AS TINYINT) FROM tinyints ORDER BY i;

SELECT CAST(TRY_CAST(i AS DECIMAL(38, 36)) AS TINYINT) FROM tinyints ORDER BY i;

PRAGMA enable_verification;

SELECT TYPEOF(CAST(1 AS UBIGINT) + CAST(1 AS TINYINT));

SELECT TYPEOF(CAST(1 AS UBIGINT) + 1);

SELECT TYPEOF(CAST(1 AS UBIGINT) + 10000);

PRAGMA enable_verification;

CREATE TABLE ubigints AS SELECT CAST(i AS UBIGINT) AS i FROM (VALUES (0), (18446744073709551615)) AS tbl(i);

SELECT CAST(i AS UTINYINT) FROM ubigints ORDER BY i;

SELECT TRY_CAST(i AS UTINYINT) FROM ubigints ORDER BY i;

SELECT CAST(i AS USMALLINT) FROM ubigints ORDER BY i;

SELECT TRY_CAST(i AS USMALLINT) FROM ubigints ORDER BY i;

SELECT CAST(i AS UINTEGER) FROM ubigints ORDER BY i;

SELECT TRY_CAST(i AS UINTEGER) FROM ubigints ORDER BY i;

SELECT CAST(i AS TINYINT) FROM ubigints ORDER BY i;

SELECT TRY_CAST(i AS TINYINT) FROM ubigints ORDER BY i;

SELECT CAST(i AS SMALLINT) FROM ubigints ORDER BY i;

SELECT TRY_CAST(i AS SMALLINT) FROM ubigints ORDER BY i;

SELECT CAST(i AS INT) FROM ubigints ORDER BY i;

SELECT TRY_CAST(i AS INT) FROM ubigints ORDER BY i;

SELECT CAST(i AS BIGINT) FROM ubigints ORDER BY i;

SELECT TRY_CAST(i AS BIGINT) FROM ubigints ORDER BY i;

SELECT CAST(i AS INT128) FROM ubigints ORDER BY i;

SELECT CAST(i AS REAL) FROM ubigints ORDER BY i;

SELECT CAST(i AS DOUBLE) FROM ubigints ORDER BY i;

SELECT CAST(i AS BOOLEAN) FROM ubigints ORDER BY i;

SELECT CAST(i AS TEXT) FROM ubigints ORDER BY i;

CREATE TABLE strings AS SELECT * FROM (VALUES ('   '), ('blablabla'), ('-1000'), ('-1'), ('-0'), ('0'), ('18446744073709551615'), ('100000000000000000000')) AS tbl(s);

SELECT CAST(s AS UBIGINT) FROM strings;

SELECT TRY_CAST(s AS UBIGINT) FROM strings;

SELECT CAST(CAST(i AS DECIMAL(3, 0)) AS UBIGINT) FROM ubigints ORDER BY i;

SELECT CAST(CAST(i AS DECIMAL(9, 0)) AS UBIGINT) FROM ubigints ORDER BY i;

SELECT CAST(CAST(i AS DECIMAL(18, 0)) AS UBIGINT) FROM ubigints ORDER BY i;

SELECT CAST(CAST(i AS DECIMAL(38, 0)) AS UBIGINT) FROM ubigints ORDER BY i;

SELECT CAST(CAST(i AS DECIMAL(38, 20)) AS UBIGINT) FROM ubigints ORDER BY i;

SELECT CAST(TRY_CAST(i AS DECIMAL(3, 0)) AS UBIGINT) FROM ubigints ORDER BY i;

SELECT CAST(TRY_CAST(i AS DECIMAL(9, 0)) AS UBIGINT) FROM ubigints ORDER BY i;

SELECT CAST(TRY_CAST(i AS DECIMAL(18, 0)) AS UBIGINT) FROM ubigints ORDER BY i;

SELECT CAST(TRY_CAST(i AS DECIMAL(38, 20)) AS UBIGINT) FROM ubigints ORDER BY i;

PRAGMA enable_verification;

CREATE TABLE uhugeints AS SELECT CAST(i AS UINT128) AS i FROM (VALUES (CAST(0 AS UINT128)), (CAST(1 AS UINT128)), (CAST('340282366920938463463374607431768211455' AS UINT128))) AS tbl(i);

SELECT CAST(i AS TINYINT) FROM uhugeints;

SELECT CAST(i AS SMALLINT) FROM uhugeints;

SELECT CAST(i AS INT) FROM uhugeints;

SELECT CAST(i AS BIGINT) FROM uhugeints;

SELECT TRY_CAST(i AS TINYINT) FROM uhugeints ORDER BY i;

SELECT TRY_CAST(i AS SMALLINT) FROM uhugeints ORDER BY i;

SELECT TRY_CAST(i AS INT) FROM uhugeints ORDER BY i;

SELECT TRY_CAST(i AS BIGINT) FROM uhugeints ORDER BY i;

SELECT CAST(i AS UTINYINT) FROM uhugeints ORDER BY i;

SELECT TRY_CAST(i AS UTINYINT) FROM uhugeints ORDER BY i;

SELECT CAST(i AS USMALLINT) FROM uhugeints ORDER BY i;

SELECT TRY_CAST(i AS USMALLINT) FROM uhugeints ORDER BY i;

SELECT CAST(i AS UINTEGER) FROM uhugeints ORDER BY i;

SELECT TRY_CAST(i AS UINTEGER) FROM uhugeints ORDER BY i;

SELECT CAST(i AS UBIGINT) FROM uhugeints ORDER BY i;

SELECT TRY_CAST(i AS UBIGINT) FROM uhugeints ORDER BY i;

SELECT CAST(i AS REAL) FROM uhugeints ORDER BY i;

SELECT CAST(i AS DOUBLE) FROM uhugeints ORDER BY i;

SELECT CAST(i AS BOOLEAN) FROM uhugeints ORDER BY i;

SELECT CAST(i AS TEXT) FROM uhugeints ORDER BY i;

CREATE TABLE strings AS SELECT * FROM (VALUES ('   '), ('blablabla'), ('-1000000000000000000000000000000000000000'), ('0'), ('1'), ('340282366920938463463374607431768211455'), ('1000000000000000000000000000000000000000')) AS tbl(s);

SELECT CAST(s AS UINT128) FROM strings;

SELECT TRY_CAST(s AS UINT128) FROM strings;

SELECT CAST(CAST(i AS DECIMAL(3, 0)) AS UINT128) FROM uhugeints ORDER BY i;

SELECT CAST(CAST(i AS DECIMAL(9, 0)) AS UINT128) FROM uhugeints ORDER BY i;

SELECT CAST(CAST(i AS DECIMAL(18, 0)) AS UINT128) FROM uhugeints ORDER BY i;

SELECT CAST(CAST(i AS DECIMAL(38, 0)) AS UINT128) FROM uhugeints ORDER BY i;

SELECT CAST(TRY_CAST(i AS DECIMAL(3, 0)) AS UINT128) FROM uhugeints ORDER BY i;

SELECT CAST(TRY_CAST(i AS DECIMAL(9, 0)) AS UINT128) FROM uhugeints ORDER BY i;

SELECT CAST(TRY_CAST(i AS DECIMAL(18, 0)) AS UINT128) FROM uhugeints ORDER BY i;

SELECT CAST(TRY_CAST(i AS DECIMAL(38, 0)) AS UINT128) FROM uhugeints ORDER BY i;

PRAGMA enable_verification;

CREATE TABLE uintegers AS SELECT CAST(i AS UINTEGER) AS i FROM (VALUES (0), (4294967295)) AS tbl(i);

SELECT CAST(i AS UTINYINT) FROM uintegers ORDER BY i;

SELECT TRY_CAST(i AS UTINYINT) FROM uintegers ORDER BY i;

SELECT CAST(i AS USMALLINT) FROM uintegers ORDER BY i;

SELECT TRY_CAST(i AS USMALLINT) FROM uintegers ORDER BY i;

SELECT CAST(i AS UBIGINT) FROM uintegers ORDER BY i;

SELECT CAST(i AS TINYINT) FROM uintegers ORDER BY i;

SELECT TRY_CAST(i AS TINYINT) FROM uintegers ORDER BY i;

SELECT CAST(i AS SMALLINT) FROM uintegers ORDER BY i;

SELECT TRY_CAST(i AS SMALLINT) FROM uintegers ORDER BY i;

SELECT CAST(i AS INT) FROM uintegers ORDER BY i;

SELECT TRY_CAST(i AS INT) FROM uintegers ORDER BY i;

SELECT CAST(i AS BIGINT) FROM uintegers ORDER BY i;

SELECT CAST(i AS INT128) FROM uintegers ORDER BY i;

SELECT CAST(i AS REAL) FROM uintegers ORDER BY i;

SELECT CAST(i AS DOUBLE) FROM uintegers ORDER BY i;

SELECT CAST(i AS BOOLEAN) FROM uintegers ORDER BY i;

SELECT CAST(i AS TEXT) FROM uintegers ORDER BY i;

CREATE TABLE strings AS SELECT * FROM (VALUES ('   '), ('blablabla'), ('-1000'), ('-1'), ('-0'), ('0'), ('4294967295'), ('10000000000')) AS tbl(s);

SELECT CAST(s AS UINTEGER) FROM strings;

SELECT TRY_CAST(s AS UINTEGER) FROM strings;

SELECT CAST(CAST(i AS DECIMAL(3, 0)) AS UINTEGER) FROM uintegers ORDER BY i;

SELECT CAST(CAST(i AS DECIMAL(9, 0)) AS UINTEGER) FROM uintegers ORDER BY i;

SELECT CAST(CAST(i AS DECIMAL(18, 0)) AS UINTEGER) FROM uintegers ORDER BY i;

SELECT CAST(CAST(i AS DECIMAL(38, 0)) AS UINTEGER) FROM uintegers ORDER BY i;

SELECT CAST(CAST(i AS DECIMAL(18, 9)) AS UINTEGER) FROM uintegers ORDER BY i;

SELECT CAST(CAST(i AS DECIMAL(38, 29)) AS UINTEGER) FROM uintegers ORDER BY i;

SELECT CAST(TRY_CAST(i AS DECIMAL(3, 0)) AS UINTEGER) FROM uintegers ORDER BY i;

SELECT CAST(TRY_CAST(i AS DECIMAL(9, 0)) AS UINTEGER) FROM uintegers ORDER BY i;

SELECT CAST(TRY_CAST(i AS DECIMAL(18, 9)) AS UINTEGER) FROM uintegers ORDER BY i;

SELECT CAST(TRY_CAST(i AS DECIMAL(38, 29)) AS UINTEGER) FROM uintegers ORDER BY i;

PRAGMA enable_verification;

CREATE TABLE usmallints AS SELECT CAST(i AS USMALLINT) AS i FROM (VALUES (0), (65535)) AS tbl(i);

SELECT CAST(i AS UTINYINT) FROM usmallints ORDER BY i;

SELECT TRY_CAST(i AS UTINYINT) FROM usmallints ORDER BY i;

SELECT CAST(i AS UINTEGER) FROM usmallints ORDER BY i;

SELECT CAST(i AS UBIGINT) FROM usmallints ORDER BY i;

SELECT CAST(i AS TINYINT) FROM usmallints ORDER BY i;

SELECT TRY_CAST(i AS TINYINT) FROM usmallints ORDER BY i;

SELECT CAST(i AS SMALLINT) FROM usmallints ORDER BY i;

SELECT TRY_CAST(i AS SMALLINT) FROM usmallints ORDER BY i;

SELECT CAST(i AS INT) FROM usmallints ORDER BY i;

SELECT CAST(i AS BIGINT) FROM usmallints ORDER BY i;

SELECT CAST(CAST(i AS INT128) AS USMALLINT) FROM usmallints ORDER BY i;

SELECT CAST(i AS REAL) FROM usmallints ORDER BY i;

SELECT CAST(i AS DOUBLE) FROM usmallints ORDER BY i;

SELECT CAST(i AS BOOLEAN) FROM usmallints ORDER BY i;

SELECT CAST(i AS TEXT) FROM usmallints ORDER BY i;

CREATE TABLE strings AS SELECT * FROM (VALUES ('   '), ('blablabla'), ('-1000'), ('-1'), ('-0'), ('0'), ('65535'), ('100000')) AS tbl(s);

SELECT CAST(s AS USMALLINT) FROM strings;

SELECT TRY_CAST(s AS USMALLINT) FROM strings;

SELECT CAST(CAST(i AS DECIMAL(3, 0)) AS USMALLINT) FROM usmallints ORDER BY i;

SELECT CAST(CAST(i AS DECIMAL(9, 0)) AS USMALLINT) FROM usmallints ORDER BY i;

SELECT CAST(CAST(i AS DECIMAL(18, 0)) AS USMALLINT) FROM usmallints ORDER BY i;

SELECT CAST(CAST(i AS DECIMAL(38, 0)) AS USMALLINT) FROM usmallints ORDER BY i;

SELECT CAST(CAST(i AS DECIMAL(9, 5)) AS USMALLINT) FROM usmallints ORDER BY i;

SELECT CAST(CAST(i AS DECIMAL(18, 14)) AS USMALLINT) FROM usmallints ORDER BY i;

SELECT CAST(CAST(i AS DECIMAL(38, 34)) AS USMALLINT) FROM usmallints ORDER BY i;

SELECT CAST(TRY_CAST(i AS DECIMAL(3, 0)) AS USMALLINT) FROM usmallints ORDER BY i;

SELECT CAST(TRY_CAST(i AS DECIMAL(9, 5)) AS USMALLINT) FROM usmallints ORDER BY i;

SELECT CAST(TRY_CAST(i AS DECIMAL(18, 14)) AS USMALLINT) FROM usmallints ORDER BY i;

SELECT CAST(TRY_CAST(i AS DECIMAL(38, 34)) AS USMALLINT) FROM usmallints ORDER BY i;

PRAGMA enable_verification;

CREATE TABLE utinyints AS SELECT CAST(i AS UTINYINT) AS i FROM (VALUES (0), (255)) AS tbl(i);

SELECT CAST(i AS USMALLINT) FROM utinyints ORDER BY i;

SELECT CAST(i AS UINTEGER) FROM utinyints ORDER BY i;

SELECT CAST(i AS UBIGINT) FROM utinyints ORDER BY i;

SELECT CAST(i AS TINYINT) FROM utinyints ORDER BY i;

SELECT TRY_CAST(i AS TINYINT) FROM utinyints ORDER BY i;

SELECT CAST(i AS SMALLINT) FROM utinyints ORDER BY i;

SELECT CAST(i AS INT) FROM utinyints ORDER BY i;

SELECT CAST(i AS BIGINT) FROM utinyints ORDER BY i;

SELECT CAST(i AS INT128) FROM utinyints ORDER BY i;

SELECT CAST(i AS REAL) FROM utinyints ORDER BY i;

SELECT CAST(i AS DOUBLE) FROM utinyints ORDER BY i;

SELECT CAST(i AS BOOLEAN) FROM utinyints ORDER BY i;

SELECT CAST(i AS TEXT) FROM utinyints ORDER BY i;

CREATE TABLE strings AS SELECT * FROM (VALUES ('   '), ('blablabla'), ('-1000'), ('-1'), ('-0'), ('0'), ('255'), ('1000')) AS tbl(s);

SELECT CAST(s AS UTINYINT) FROM strings;

SELECT TRY_CAST(s AS UTINYINT) FROM strings;

SELECT CAST(CAST(i AS DECIMAL(3, 0)) AS UTINYINT) FROM utinyints ORDER BY i;

SELECT CAST(CAST(i AS DECIMAL(9, 0)) AS UTINYINT) FROM utinyints ORDER BY i;

SELECT CAST(CAST(i AS DECIMAL(18, 0)) AS UTINYINT) FROM utinyints ORDER BY i;

SELECT CAST(CAST(i AS DECIMAL(38, 0)) AS UTINYINT) FROM utinyints ORDER BY i;

SELECT CAST(CAST(i AS DECIMAL(3, 1)) AS UTINYINT) FROM utinyints ORDER BY i;

SELECT CAST(CAST(i AS DECIMAL(9, 7)) AS UTINYINT) FROM utinyints ORDER BY i;

SELECT CAST(CAST(i AS DECIMAL(18, 16)) AS UTINYINT) FROM utinyints ORDER BY i;

SELECT CAST(CAST(i AS DECIMAL(38, 36)) AS UTINYINT) FROM utinyints ORDER BY i;

SELECT CAST(TRY_CAST(i AS DECIMAL(3, 1)) AS UTINYINT) FROM utinyints ORDER BY i;

SELECT CAST(TRY_CAST(i AS DECIMAL(9, 7)) AS UTINYINT) FROM utinyints ORDER BY i;

SELECT CAST(TRY_CAST(i AS DECIMAL(18, 16)) AS UTINYINT) FROM utinyints ORDER BY i;

SELECT CAST(TRY_CAST(i AS DECIMAL(38, 36)) AS UTINYINT) FROM utinyints ORDER BY i;

PRAGMA enable_verification;

CREATE TABLE tinyint_limits AS SELECT CAST((-128) AS TINYINT) AS min, CAST(127 AS TINYINT) AS max;

CREATE TABLE smallint_limits AS SELECT CAST((-32768) AS SMALLINT) AS min, CAST(32767 AS SMALLINT) AS max;

CREATE TABLE integer_limits AS SELECT CAST((-2147483648) AS INT) AS min, CAST(2147483647 AS INT) AS max;

CREATE TABLE bigint_limits AS SELECT CAST((-9223372036854775808) AS BIGINT) AS min, CAST(9223372036854775807 AS BIGINT) AS max;

CREATE TABLE utinyint_limits AS SELECT CAST((0) AS UTINYINT) AS min, CAST(255 AS UTINYINT) AS max;

CREATE TABLE usmallint_limits AS SELECT CAST((0) AS USMALLINT) AS min, CAST(65535 AS USMALLINT) AS max;

CREATE TABLE uinteger_limits AS SELECT CAST((0) AS UINTEGER) AS min, CAST(4294967295 AS UINTEGER) AS max;

CREATE TABLE ubigint_limits AS SELECT CAST((0) AS UBIGINT) AS min, CAST(18446744073709551615 AS UBIGINT) AS max;

CREATE TABLE hugeint_limits AS SELECT (-17014118346046923173168730371588410572)::HUGEINT min, 17014118346046923173168730371588410572::HUGEINT max
foreach type TINYINT SMALLINT INTEGER BIGINT UTINYINT USMALLINT UINTEGER UBIGINT;

CREATE TABLE hugeint_limits AS SELECT (-17014118346046923173168730371588410572)::HUGEINT min, 17014118346046923173168730371588410572::HUGEINT max
foreach type TINYINT SMALLINT INTEGER BIGINT UTINYINT USMALLINT UINTEGER UBIGINT;

CREATE TABLE hugeint_limits AS SELECT (-17014118346046923173168730371588410572)::HUGEINT min, 17014118346046923173168730371588410572::HUGEINT max
foreach type TINYINT SMALLINT INTEGER BIGINT UTINYINT USMALLINT UINTEGER UBIGINT;

SELECT ARRAY((SELECT min FROM hugeint_limits));

SELECT ARRAY((SELECT max FROM hugeint_limits));

PRAGMA enable_verification;

SELECT TYPEOF([CAST(100 AS USMALLINT), CAST(10000 AS SMALLINT)]);

SELECT TYPEOF([CAST(100 AS USMALLINT), CAST(127 AS TINYINT)]);

SELECT TYPEOF([CAST(100 AS USMALLINT), CAST(127 AS USMALLINT)]);

SELECT TYPEOF([CAST(100 AS USMALLINT), CAST(127 AS USMALLINT)]);

SELECT TYPEOF([CAST(100 AS USMALLINT), CAST(10.5 AS DECIMAL(18, 3))]);

PRAGMA enable_verification;

SELECT TYPEOF([CAST(100 AS UTINYINT), CAST(10000 AS SMALLINT)]);

SELECT TYPEOF([CAST(100 AS UTINYINT), CAST(127 AS TINYINT)]);

SELECT TYPEOF([CAST(100 AS UTINYINT), CAST(127 AS UTINYINT)]);

SELECT TYPEOF([CAST(100 AS UTINYINT), CAST(127 AS USMALLINT)]);

SELECT TYPEOF([CAST(100 AS UTINYINT), CAST(10.5 AS DECIMAL(18, 3))]);

CREATE TABLE test (a TEXT);

INSERT INTO test VALUES ('aaaaaaaaaa');

INSERT INTO test SELECT a || a || a || a || a || a || a || a || a || a FROM test WHERE LENGTH(a) = (SELECT MAX(LENGTH(a)) FROM test);

INSERT INTO test SELECT a || a || a || a || a || a || a || a || a || a FROM test WHERE LENGTH(a) = (SELECT MAX(LENGTH(a)) FROM test);

INSERT INTO test SELECT a || a || a || a || a || a || a || a || a || a FROM test WHERE LENGTH(a) = (SELECT MAX(LENGTH(a)) FROM test);

SELECT LENGTH(a) FROM test ORDER BY 1;

PRAGMA memory_limit = 100000000;

CREATE TABLE test (a TEXT);

INSERT INTO test VALUES ('aaaaaaaaaa');

INSERT INTO test SELECT a || a || a || a || a || a || a || a || a || a FROM test WHERE LENGTH(a) = (SELECT MAX(LENGTH(a)) FROM test);

INSERT INTO test SELECT a || a || a || a || a || a || a || a || a || a FROM test WHERE LENGTH(a) = (SELECT MAX(LENGTH(a)) FROM test);

INSERT INTO test SELECT a || a || a || a || a || a || a || a || a || a FROM test WHERE LENGTH(a) = (SELECT MAX(LENGTH(a)) FROM test);

CREATE TABLE bigtable (a TEXT);

INSERT INTO bigtable SELECT a FROM test WHERE LENGTH(a) = (SELECT MAX(LENGTH(a)) FROM test);

SELECT COUNT(*), COUNT(a), MAX(LENGTH(a)), SUM(LENGTH(a)) FROM bigtable;

INSERT INTO bigtable SELECT * FROM bigtable;

SELECT COUNT(*), COUNT(a), MAX(LENGTH(a)), SUM(LENGTH(a)) FROM bigtable;

INSERT INTO bigtable SELECT * FROM bigtable;

SELECT COUNT(*), COUNT(a), MAX(LENGTH(a)), SUM(LENGTH(a)) FROM bigtable;

INSERT INTO bigtable SELECT * FROM bigtable;

SELECT COUNT(*), COUNT(a), MAX(LENGTH(a)), SUM(LENGTH(a)) FROM bigtable;

INSERT INTO bigtable SELECT * FROM bigtable;

SELECT COUNT(*), COUNT(a), MAX(LENGTH(a)), SUM(LENGTH(a)) FROM bigtable;

INSERT INTO bigtable SELECT * FROM bigtable;

SELECT COUNT(*), COUNT(a), MAX(LENGTH(a)), SUM(LENGTH(a)) FROM bigtable;

INSERT INTO bigtable SELECT * FROM bigtable;

SELECT COUNT(*), COUNT(a), MAX(LENGTH(a)), SUM(LENGTH(a)) FROM bigtable;

INSERT INTO bigtable SELECT * FROM bigtable;

SELECT COUNT(*), COUNT(a), MAX(LENGTH(a)), SUM(LENGTH(a)) FROM bigtable;

INSERT INTO bigtable SELECT * FROM bigtable;

SELECT COUNT(*), COUNT(a), MAX(LENGTH(a)), SUM(LENGTH(a)) FROM bigtable;

INSERT INTO bigtable SELECT * FROM bigtable;

SELECT COUNT(*), COUNT(a), MAX(LENGTH(a)), SUM(LENGTH(a)) FROM bigtable;

INSERT INTO bigtable SELECT * FROM bigtable;

SELECT COUNT(*), COUNT(a), MAX(LENGTH(a)), SUM(LENGTH(a)) FROM bigtable;

INSERT INTO bigtable SELECT * FROM bigtable;

SELECT COUNT(*), COUNT(a), MAX(LENGTH(a)), SUM(LENGTH(a)) FROM bigtable;

INSERT INTO bigtable SELECT * FROM bigtable;

SELECT COUNT(*), COUNT(a), MAX(LENGTH(a)), SUM(LENGTH(a)) FROM bigtable;

INSERT INTO bigtable SELECT * FROM bigtable;

SELECT COUNT(*), COUNT(a), MAX(LENGTH(a)), SUM(LENGTH(a)) FROM bigtable;

INSERT INTO bigtable SELECT * FROM bigtable;

SELECT COUNT(*), COUNT(a), MAX(LENGTH(a)), SUM(LENGTH(a)) FROM bigtable;

CREATE TABLE emojis (id INT, s TEXT);

INSERT INTO emojis VALUES (1, '🦆'), (2, '🦆🍞🦆');

SELECT * FROM emojis ORDER BY id;

SELECT SUBSTRING(s, 1, 1), SUBSTRING(s, 2, 1) FROM emojis ORDER BY id;

SELECT SUBSTRING(CAST(DECODE(CAST('u\xD5\x8D1' AS BLOB)) AS TEXT), -1);

SELECT SUBSTRING('u🦆', -2, 1);

SELECT SUBSTRING('A3🦤u🦆f', -3, 3);

SELECT SUBSTRING('🦤🦆f', -3, 2);

SELECT LENGTH(s) FROM emojis ORDER BY id;

CREATE TABLE t1 (c0 INT, c1 INET);

INSERT INTO t1 (c0, c1) VALUES (1, '192.168.1.1');

SELECT * FROM t1;

SELECT ((NULL, t1.c0, NULL) <> (t1.c1)) FROM t1;

SELECT * FROM t1 WHERE ((NULL, t1.c0, NULL) <> (t1.c1));

SELECT * FROM t1 WHERE ((NULL, t1.c0, NULL) <> (t1.c1)) UNION ALL SELECT * FROM t1 WHERE (NOT ((NULL, t1.c0, NULL) <> (t1.c1))) UNION ALL SELECT * FROM t1 WHERE ((((NULL, t1.c0, NULL) <> (t1.c1))) IS NULL);

PRAGMA enable_verification;

PRAGMA enable_verification;

INSERT INTO a VALUES ({'i': {'a': 3}, 'j': 4});

SELECT * FROM a;

SELECT ((c).i).a FROM a;

INSERT INTO a VALUES (NULL);

SELECT * FROM a;

SELECT ((c).i).a FROM a;

INSERT INTO a VALUES (ROW(ROW(NULL), 1));

INSERT INTO a VALUES (ROW(ROW(1), NULL));

INSERT INTO a VALUES (ROW(NULL, 1));

SELECT * FROM a;

CREATE TABLE b AS SELECT {'a': {'a': 1, 'b': 'hello'}} AS c;

SELECT (c).a FROM b;

INSERT INTO a VALUES (1);

INSERT INTO a VALUES (ROW(1, 2));

INSERT INTO a VALUES (ROW(ROW(1, 2, 3), 1));

PRAGMA enable_verification;

CREATE TABLE test_structs (id INT, s STRUCT(name STRUCT(v TEXT, id INT), nested_struct STRUCT(a INT, b BOOLEAN)));

INSERT INTO test_structs VALUES (1, {'name': {'v': 'Row 1', 'id': 1}, 'nested_struct': {'a': 42, 'b': TRUE}}), (2, NULL), (3, {'name': {'v': 'Row 3', 'id': 3}, 'nested_struct': {'a': 84, 'b': NULL}}), (4, {'name': NULL, 'nested_struct': {'a': NULL, 'b': FALSE}});

COPY test_structs TO '__TEST_DIR__/test_structs.parquet' WITH (foreach source, test_structs READ_PARQUET('__TEST_DIR__/test_structs.parquet'));

COPY test_structs TO '__TEST_DIR__/test_structs.parquet' WITH (foreach source, test_structs READ_PARQUET('__TEST_DIR__/test_structs.parquet'));

COPY test_structs TO '__TEST_DIR__/test_structs.parquet' WITH (foreach source, test_structs READ_PARQUET('__TEST_DIR__/test_structs.parquet'));

COPY test_structs TO '__TEST_DIR__/test_structs.parquet' WITH (foreach source, test_structs READ_PARQUET('__TEST_DIR__/test_structs.parquet'));

COPY test_structs TO '__TEST_DIR__/test_structs.parquet' WITH (foreach source, test_structs READ_PARQUET('__TEST_DIR__/test_structs.parquet'));

COPY test_structs TO '__TEST_DIR__/test_structs.parquet' WITH (foreach source, test_structs READ_PARQUET('__TEST_DIR__/test_structs.parquet'));

COPY test_structs TO '__TEST_DIR__/test_structs.parquet' WITH (foreach source, test_structs READ_PARQUET('__TEST_DIR__/test_structs.parquet'));

COPY test_structs TO '__TEST_DIR__/test_structs.parquet' WITH (foreach source, test_structs READ_PARQUET('__TEST_DIR__/test_structs.parquet'));

COPY test_structs TO '__TEST_DIR__/test_structs.parquet' WITH (foreach source, test_structs READ_PARQUET('__TEST_DIR__/test_structs.parquet'));

CREATE TABLE test_structs_nested (id INT, base STRUCT(s STRUCT(name STRUCT(v TEXT, id INT), nested_struct STRUCT(a INT, b BOOLEAN))));

INSERT INTO test_structs_nested VALUES (1, {'s': {'name': {'v': 'Row 1', 'id': 1}, 'nested_struct': {'a': 42, 'b': TRUE}}}), (2, NULL), (3, {'s': {'name': {'v': 'Row 3', 'id': 3}, 'nested_struct': {'a': 84, 'b': NULL}}}), (4, {'s': {'name': NULL, 'nested_struct': {'a': NULL, 'b': FALSE}}});

COPY test_structs_nested TO '__TEST_DIR__/test_structs.parquet' WITH (foreach source, test_structs_nested READ_PARQUET('__TEST_DIR__/test_structs.parquet'));

COPY test_structs_nested TO '__TEST_DIR__/test_structs.parquet' WITH (foreach source, test_structs_nested READ_PARQUET('__TEST_DIR__/test_structs.parquet'));

COPY test_structs_nested TO '__TEST_DIR__/test_structs.parquet' WITH (foreach source, test_structs_nested READ_PARQUET('__TEST_DIR__/test_structs.parquet'));

COPY test_structs_nested TO '__TEST_DIR__/test_structs.parquet' WITH (foreach source, test_structs_nested READ_PARQUET('__TEST_DIR__/test_structs.parquet'));

COPY test_structs_nested TO '__TEST_DIR__/test_structs.parquet' WITH (foreach source, test_structs_nested READ_PARQUET('__TEST_DIR__/test_structs.parquet'));

COPY test_structs_nested TO '__TEST_DIR__/test_structs.parquet' WITH (foreach source, test_structs_nested READ_PARQUET('__TEST_DIR__/test_structs.parquet'));

COPY test_structs_nested TO '__TEST_DIR__/test_structs.parquet' WITH (foreach source, test_structs_nested READ_PARQUET('__TEST_DIR__/test_structs.parquet'));

COPY test_structs_nested TO '__TEST_DIR__/test_structs.parquet' WITH (foreach source, test_structs_nested READ_PARQUET('__TEST_DIR__/test_structs.parquet'));

COPY test_structs_nested TO '__TEST_DIR__/test_structs.parquet' WITH (foreach source, test_structs_nested READ_PARQUET('__TEST_DIR__/test_structs.parquet'));

COPY test_structs_nested TO '__TEST_DIR__/test_structs.parquet' WITH (foreach source, test_structs_nested READ_PARQUET('__TEST_DIR__/test_structs.parquet'));

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

CREATE TABLE structs (struct_val STRUCT(i INT, j TEXT));

INSERT INTO structs VALUES ({'i': 42, 'j': 'hello world this is my string'}), (NULL), ({'i': 100, 'j': NULL}), ({'i': NULL, 'j': 'string string string'});

INSERT INTO structs VALUES ({'i': 42, 'j': 'hello world this is my string'}), (NULL), ({'i': 100, 'j': NULL}), ({'i': NULL, 'j': 'string string string'});

INSERT INTO structs VALUES ({'i': 42, 'j': 'hello world this is my string'}), (NULL), ({'i': 100, 'j': NULL}), ({'i': NULL, 'j': 'string string string'});

INSERT INTO structs VALUES ({'i': 42, 'j': 'hello world this is my string'}), (NULL), ({'i': 100, 'j': NULL}), ({'i': NULL, 'j': 'string string string'});

INSERT INTO structs VALUES ({'i': 42, 'j': 'hello world this is my string'}), (NULL), ({'i': 100, 'j': NULL}), ({'i': NULL, 'j': 'string string string'});

SELECT REMAP_STRUCT({'i': 1, 'j': 2}, NULL, {'v2': 'i'}, NULL);

SELECT REMAP_STRUCT({'i': 1, 'j': 2}, NULL, {'v2': 'i'}, NULL);

SELECT REMAP_STRUCT({'i': 1, 'j': 2}, NULL, {'v2': 'i'}, NULL);

SELECT REMAP_STRUCT({'i': 1, 'j': 2}, NULL, {'v2': 'i'}, NULL);

SELECT REMAP_STRUCT({'i': 1, 'j': 2}, NULL, {'v2': 'i'}, NULL);

SELECT REMAP_STRUCT({'i': 1, 'j': 2}, NULL, {'v2': 'i'}, NULL);

SELECT REMAP_STRUCT({'i': 1, 'j': 2}, NULL, {'v2': 'i'}, NULL);

SELECT REMAP_STRUCT({'i': 1, 'j': 2}, NULL, {'v2': 'i'}, NULL);

SELECT REMAP_STRUCT({'i': 1, 'j': 2}, NULL, {'v2': 'i'}, NULL);

PRAGMA enable_verification;

SELECT CASE WHEN 1 = 1 THEN {'i': 1} ELSE {'i': 2} END;

SELECT CASE WHEN 1 = 0 THEN {'i': 1} ELSE {'i': 2} END;

SELECT CASE WHEN 1 = 1 THEN NULL ELSE {'i': 2} END;

SELECT CASE WHEN 1 = 0 THEN NULL ELSE {'i': NULL} END;

SELECT i, CASE WHEN i % 2 = 0 THEN {'i': 1} ELSE {'i': 2} END FROM RANGE(0, 6) AS tbl(i);

SELECT i, CASE WHEN i % 2 = 0 THEN {'i': 'hello'} ELSE {'i': 'world'} END FROM RANGE(0, 6) AS tbl(i);

SELECT i, CASE WHEN i % 2 = 0 THEN {'i': 'hello', 'j': {'a': 3, 'b': NULL}} ELSE {'i': 'world', 'j': {'a': 7, 'b': 22}} END FROM RANGE(0, 6) AS tbl(i);

SELECT i, CASE WHEN i % 2 = 0 THEN {'i': [1, 2, 3]} ELSE {'i': [7, 8]} END FROM RANGE(0, 6) AS tbl(i);

SELECT i, CASE WHEN i % 2 = 0 THEN {'i': [1, 2, 3]} ELSE NULL END FROM RANGE(0, 6) AS tbl(i);

SELECT i, CASE WHEN i % 2 = 0 THEN {'i': [1, 2, 3]} ELSE {'i': NULL} END FROM RANGE(0, 6) AS tbl(i);

SELECT i, CASE WHEN i % 2 = 0 THEN {'i': [CAST(1 AS INT), CAST(2 AS INT), CAST(3 AS INT)]} ELSE {'i': [CAST(0 AS UBIGINT)]} END FROM RANGE(0, 6) AS tbl(i);

SELECT i, CASE WHEN i % 2 = 0 THEN {'i': [1, 2, 3]} ELSE {'i': ['hello']} END FROM RANGE(0, 6) AS tbl(i);

PRAGMA enable_verification;

CREATE TABLE tbl AS SELECT ({'HELLO': 3}) AS col;

SELECT col['HELLO'] FROM tbl;

SELECT col['hello'] FROM tbl;

SELECT col.hello FROM tbl;

SELECT "COL"."HELLO" FROM tbl;

SELECT ({'hello': 3, 'hello': 4}) AS col;

SELECT ({'HELLO': 3, 'HELLO': 4}) AS col;

SELECT ({'HELLO': 3, 'hello': 4}) AS col;

SELECT col['HELL'] FROM tbl;

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

SELECT ({'i': NULL, 'j': NULL})['i'];

SELECT ({'i': NULL, 'j': NULL})['i'];

SELECT ({'i': NULL, 'j': NULL})['i'];

SELECT ({'i': NULL, 'j': NULL})['i'];

SELECT ({'i': NULL, 'j': NULL})['i'];

SELECT ({'i': NULL, 'j': NULL})['i'];

SELECT ({'i': NULL, 'j': NULL})['i'];

SELECT ({'i': NULL, 'j': NULL})['i'];

SELECT ({'i': NULL, 'j': NULL})['i'];

INSERT INTO structs VALUES ({'i': 1, 'j': 2}), ({'i': NULL, 'j': 2}), ({'i': 1, 'j': NULL}), (NULL);

INSERT INTO structs VALUES ({'i': 1, 'j': 2}), ({'i': NULL, 'j': 2}), ({'i': 1, 'j': NULL}), (NULL);

INSERT INTO structs VALUES ({'i': 1, 'j': 2}), ({'i': NULL, 'j': 2}), ({'i': 1, 'j': NULL}), (NULL);

INSERT INTO nested_structs VALUES ({'i': 1, 'j': {'a': 2, 'b': 3}}), ({'i': 1, 'j': {'a': NULL, 'b': 3}}), ({'i': 1, 'j': {'a': 2, 'b': NULL}}), ({'i': 1, 'j': NULL}), (NULL);

INSERT INTO nested_structs VALUES ({'i': 1, 'j': {'a': 2, 'b': 3}}), ({'i': 1, 'j': {'a': NULL, 'b': 3}}), ({'i': 1, 'j': {'a': 2, 'b': NULL}}), ({'i': 1, 'j': NULL}), (NULL);

INSERT INTO nested_structs VALUES ({'i': 1, 'j': {'a': 2, 'b': 3}}), ({'i': 1, 'j': {'a': NULL, 'b': 3}}), ({'i': 1, 'j': {'a': 2, 'b': NULL}}), ({'i': 1, 'j': NULL}), (NULL);

SELECT CAST({'i': 42, 'j': 84} AS STRUCT(i INT)) AS result;

SELECT CAST({'i': 42} AS STRUCT(i INT, j INT)) AS result;

SELECT CAST({'a': 7, 'i': 42, 'j': 84, 'k': 42} AS STRUCT(m INT, k INT, l INT)) AS result;

PRAGMA enable_verification;

CREATE TABLE t1 (s1 STRUCT(a INT, b INT));

INSERT INTO t1 VALUES ({'a': 42, 'b': 43});

CREATE TABLE t2 (s1 STRUCT(a INT, c INT));

INSERT INTO t2 VALUES ({'a': 100, 'c': 101});

COPY t1 TO '__TEST_DIR__/struct_cast_t1.parquet' WITH (FORMAT 'parquet');

COPY t2 TO '__TEST_DIR__/struct_cast_t2.parquet' WITH (FORMAT 'parquet');

SELECT * FROM READ_PARQUET('__TEST_DIR__/struct_cast_*.parquet', union_by_name = TRUE);

SELECT {'a': {'e1': 42, 'e2': 42}} AS c UNION ALL BY NAME SELECT {'a': {'e2': 'hello', 'e3': 'world'}, 'b': '100'} AS c;

PRAGMA enable_verification;

SELECT {'x': 1} < {'x': 2};

SELECT {'x': 1} < {'x': 1};

SELECT NULL < {'x': 1};

SELECT {'x': 1} < NULL;

SELECT {'x': 1} <= {'x': 2};

SELECT {'x': 1} <= {'x': 1};

SELECT NULL <= {'x': 1};

SELECT {'x': 1} <= NULL;

SELECT {'x': 1} = {'x': 2};

SELECT {'x': 1} = {'x': 1};

SELECT NULL = {'x': 1};

SELECT {'x': 1} = NULL;

SELECT {'x': 1} <> {'x': 2};

SELECT {'x': 1} <> {'x': 1};

SELECT {'x': 1} <> NULL;

SELECT NULL <> {'x': 1};

SELECT {'x': 1} >= {'x': 2};

SELECT {'x': 1} >= {'x': 1};

SELECT NULL >= {'x': 1};

SELECT {'x': 1} >= NULL;

SELECT {'x': 1} > {'x': 2};

SELECT {'x': 1} > {'x': 1};

SELECT NULL > {'x': 1};

SELECT {'x': 1} > NULL;

CREATE VIEW struct_int AS SELECT * FROM (VALUES ({'x': 1}, {'x': 1}), ({'x': 1}, {'x': 2}), ({'x': 2}, {'x': 1}), (NULL, {'x': 1}), ({'x': 2}, NULL), (NULL, NULL)) AS tbl(l, r);

SELECT l < r FROM struct_int;

SELECT l <= r FROM struct_int;

SELECT l = r FROM struct_int;

SELECT l <> r FROM struct_int;

SELECT l >= r FROM struct_int;

SELECT l > r FROM struct_int;

SELECT {'x': 'duck'} < {'x': 'goose'};

SELECT {'x': 'duck'} < {'x': 'duck'};

SELECT NULL < {'x': 'duck'};

SELECT {'x': 'duck'} < NULL;

SELECT {'x': 'duck'} <= {'x': 'goose'};

SELECT {'x': 'duck'} <= {'x': 'duck'};

SELECT NULL <= {'x': 'duck'};

SELECT {'x': 'duck'} <= NULL;

SELECT {'x': 'duck'} = {'x': 'goose'};

SELECT {'x': 'duck'} = {'x': 'duck'};

SELECT NULL = {'x': 'duck'};

SELECT {'x': 'duck'} = NULL;

SELECT {'x': 'duck'} <> {'x': 'goose'};

SELECT {'x': 'duck'} <> {'x': 'duck'};

SELECT NULL <> {'x': 'duck'};

SELECT {'x': 'duck'} <> NULL;

SELECT {'x': 'duck'} >= {'x': 'goose'};

SELECT {'x': 'duck'} >= {'x': 'duck'};

SELECT NULL >= {'x': 'duck'};

SELECT {'x': 'duck'} >= NULL;

SELECT {'x': 'duck'} > {'x': 'goose'};

SELECT {'x': 'duck'} > {'x': 'duck'};

SELECT NULL > {'x': 'duck'};

SELECT {'x': 'duck'} > NULL;

CREATE VIEW struct_str AS SELECT * FROM (VALUES ({'x': 'duck'}, {'x': 'duck'}), ({'x': 'duck'}, {'x': 'goose'}), ({'x': 'goose'}, {'x': 'duck'}), (NULL, {'x': 'duck'}), ({'x': 'goose'}, NULL), (NULL, NULL)) AS tbl(l, r);

SELECT l < r FROM struct_str;

SELECT l <= r FROM struct_str;

SELECT l = r FROM struct_str;

SELECT l <> r FROM struct_str;

SELECT l >= r FROM struct_str;

SELECT l > r FROM struct_str;

SELECT {'x': 'duck', 'y': 1} < {'x': 'goose', 'y': 2};

SELECT {'x': 'duck', 'y': 1} < {'x': 'duck', 'y': 1};

SELECT {'x': 'duck', 'y': 1} < {'x': 'duck', 'y': 2};

SELECT NULL < {'x': 'duck', 'y': 1};

SELECT {'x': 'duck', 'y': 1} < NULL;

SELECT {'x': 'duck', 'y': 1} <= {'x': 'goose', 'y': 2};

SELECT {'x': 'duck', 'y': 1} <= {'x': 'duck', 'y': 1};

SELECT {'x': 'duck', 'y': 1} <= {'x': 'duck', 'y': 2};

SELECT NULL <= {'x': 'duck', 'y': 1};

SELECT {'x': 'duck', 'y': 1} <= NULL;

SELECT {'x': 'duck', 'y': 1} = {'x': 'goose', 'y': 2};

SELECT {'x': 'duck', 'y': 1} = {'x': 'duck', 'y': 1};

SELECT NULL = {'x': 'duck', 'y': 1};

SELECT {'x': 'duck', 'y': 1} = NULL;

SELECT {'x': 'duck', 'y': 1} <> {'x': 'goose', 'y': 2};

SELECT {'x': 'duck', 'y': 1} <> {'x': 'duck', 'y': 1};

SELECT NULL <> {'x': 'duck', 'y': 1};

SELECT {'x': 'duck', 'y': 1} <> NULL;

SELECT {'x': 'duck', 'y': 1} >= {'x': 'goose', 'y': 2};

SELECT {'x': 'duck', 'y': 1} >= {'x': 'duck', 'y': 1};

SELECT NULL >= {'x': 'duck', 'y': 1};

SELECT {'x': 'duck', 'y': 1} >= NULL;

SELECT {'x': 'duck', 'y': 1} > {'x': 'goose', 'y': 2};

SELECT {'x': 'duck', 'y': 1} > {'x': 'duck', 'y': 1};

SELECT {'x': 'duck', 'y': 2} > {'x': 'duck', 'y': 1};

SELECT NULL > {'x': 'duck', 'y': 1};

SELECT {'x': 'duck', 'y': 1} > NULL;

CREATE VIEW struct_str_int AS SELECT * FROM (VALUES ({'x': 'duck', 'y': 1}, {'x': 'duck', 'y': 1}), ({'x': 'duck', 'y': 1}, {'x': 'goose', 'y': 2}), ({'x': 'goose', 'y': 2}, {'x': 'duck', 'y': 1}), (NULL, {'x': 'duck', 'y': 1}), ({'x': 'goose', 'y': 2}, NULL), (NULL, NULL)) AS tbl(l, r);

SELECT l < r FROM struct_str_int;

SELECT l <= r FROM struct_str_int;

SELECT l = r FROM struct_str_int;

SELECT l <> r FROM struct_str_int;

SELECT l >= r FROM struct_str_int;

SELECT l > r FROM struct_str_int;

SELECT {'x': 1, 'y': {'a': 'duck', 'b': 1.5}} < {'x': 2, 'y': {'a': 'goose', 'b': 2.5}};

SELECT {'x': 1, 'y': {'a': 'duck', 'b': 1.5}} < {'x': 1, 'y': {'a': 'duck', 'b': 1.5}};

SELECT NULL < {'x': 1, 'y': {'a': 'duck', 'b': 1.5}};

SELECT {'x': 1, 'y': {'a': 'duck', 'b': 1.5}} < NULL;

SELECT {'x': 1, 'y': {'a': 'duck', 'b': 1.5}} <= {'x': 2, 'y': {'a': 'goose', 'b': 2.5}};

SELECT {'x': 1, 'y': {'a': 'duck', 'b': 1.5}} <= {'x': 1, 'y': {'a': 'duck', 'b': 1.5}};

SELECT NULL <= {'x': 1, 'y': {'a': 'duck', 'b': 1.5}};

SELECT {'x': 1, 'y': {'a': 'duck', 'b': 1.5}} <= NULL;

SELECT {'x': 1, 'y': {'a': 'duck', 'b': 1.5}} = {'x': 2, 'y': {'a': 'goose', 'b': 2.5}};

SELECT {'x': 1, 'y': {'a': 'duck', 'b': 1.5}} = {'x': 1, 'y': {'a': 'duck', 'b': 1.5}};

SELECT NULL = {'x': 1, 'y': {'a': 'duck', 'b': 1.5}};

SELECT {'x': 1, 'y': {'a': 'duck', 'b': 1.5}} = NULL;

SELECT {'x': 1, 'y': {'a': 'duck', 'b': 1.5}} <> {'x': 2, 'y': {'a': 'goose', 'b': 2.5}};

SELECT {'x': 1, 'y': {'a': 'duck', 'b': 1.5}} <> {'x': 1, 'y': {'a': 'duck', 'b': 1.5}};

SELECT NULL <> {'x': 1, 'y': {'a': 'duck', 'b': 1.5}};

SELECT {'x': 1, 'y': {'a': 'duck', 'b': 1.5}} <> NULL;

SELECT {'x': 1, 'y': {'a': 'duck', 'b': 1.5}} >= {'x': 2, 'y': {'a': 'goose', 'b': 2.5}};

SELECT {'x': 1, 'y': {'a': 'duck', 'b': 1.5}} >= {'x': 1, 'y': {'a': 'duck', 'b': 1.5}};

SELECT NULL >= {'x': 1, 'y': {'a': 'duck', 'b': 1.5}};

SELECT {'x': 1, 'y': {'a': 'duck', 'b': 1.5}} >= NULL;

SELECT {'x': 1, 'y': {'a': 'duck', 'b': 1.5}} > {'x': 2, 'y': {'a': 'goose', 'b': 2.5}};

SELECT {'x': 1, 'y': {'a': 'duck', 'b': 1.5}} > {'x': 1, 'y': {'a': 'duck', 'b': 1.5}};

SELECT NULL > {'x': 1, 'y': {'a': 'duck', 'b': 1.5}};

SELECT {'x': 1, 'y': {'a': 'duck', 'b': 1.5}} > NULL;

CREATE VIEW struct_nested AS SELECT * FROM (VALUES ({'x': 1, 'y': {'a': 'duck', 'b': 1.5}}, {'x': 1, 'y': {'a': 'duck', 'b': 1.5}}), ({'x': 1, 'y': {'a': 'duck', 'b': 1.5}}, {'x': 2, 'y': {'a': 'goose', 'b': 2.5}}), ({'x': 2, 'y': {'a': 'goose', 'b': 2.5}}, {'x': 1, 'y': {'a': 'duck', 'b': 1.5}}), (NULL, {'x': 1, 'y': {'a': 'duck', 'b': 1.5}}), ({'x': 2, 'y': {'a': 'goose', 'b': 2.5}}, NULL), (NULL, NULL)) AS tbl(l, r);

SELECT l < r FROM struct_nested;

SELECT l <= r FROM struct_nested;

SELECT l = r FROM struct_nested;

SELECT l <> r FROM struct_nested;

SELECT l >= r FROM struct_nested;

SELECT l > r FROM struct_nested;

SELECT {'x': 1, 'y': ['duck', 'somateria']} < {'x': 2, 'y': ['goose']};

SELECT {'x': 1, 'y': ['duck', 'somateria']} < {'x': 1, 'y': ['duck', 'somateria']};

SELECT NULL < {'x': 1, 'y': ['duck', 'somateria']};

SELECT {'x': 1, 'y': ['duck', 'somateria']} < NULL;

SELECT {'x': 1, 'y': ['duck', 'somateria']} <= {'x': 2, 'y': ['goose']};

SELECT {'x': 1, 'y': ['duck', 'somateria']} <= {'x': 1, 'y': ['duck', 'somateria']};

SELECT NULL <= {'x': 1, 'y': ['duck', 'somateria']};

SELECT {'x': 1, 'y': ['duck', 'somateria']} <= NULL;

SELECT {'x': 1, 'y': ['duck', 'somateria']} = {'x': 2, 'y': ['goose']};

SELECT {'x': 1, 'y': ['duck', 'somateria']} = {'x': 1, 'y': ['duck', 'somateria']};

SELECT NULL = {'x': 1, 'y': ['duck', 'somateria']};

SELECT {'x': 1, 'y': ['duck', 'somateria']} = NULL;

SELECT {'x': 1, 'y': ['duck', 'somateria']} <> {'x': 2, 'y': ['goose']};

SELECT {'x': 1, 'y': ['duck', 'somateria']} <> {'x': 1, 'y': ['duck', 'somateria']};

SELECT NULL <> {'x': 1, 'y': ['duck', 'somateria']};

SELECT {'x': 1, 'y': ['duck', 'somateria']} <> NULL;

SELECT {'x': 1, 'y': ['duck', 'somateria']} >= {'x': 2, 'y': ['goose']};

SELECT {'x': 1, 'y': ['duck', 'somateria']} >= {'x': 1, 'y': ['duck', 'somateria']};

SELECT NULL >= {'x': 1, 'y': ['duck', 'somateria']};

SELECT {'x': 1, 'y': ['duck', 'somateria']} >= NULL;

SELECT {'x': 1, 'y': ['duck', 'somateria']} > {'x': 2, 'y': ['goose']};

SELECT {'x': 1, 'y': ['duck', 'somateria']} > {'x': 1, 'y': ['duck', 'somateria']};

SELECT NULL > {'x': 1, 'y': ['duck', 'somateria']};

SELECT {'x': 1, 'y': ['duck', 'somateria']} > NULL;

CREATE VIEW list_in_struct AS SELECT * FROM (VALUES ({'x': 1, 'y': ['duck', 'somateria']}, {'x': 1, 'y': ['duck', 'somateria']}), ({'x': 1, 'y': ['duck', 'somateria']}, {'x': 2, 'y': ['goose']}), ({'x': 2, 'y': ['goose']}, {'x': 1, 'y': ['duck', 'somateria']}), (NULL, {'x': 1, 'y': ['duck', 'somateria']}), ({'x': 2, 'y': ['goose']}, NULL), (NULL, NULL)) AS tbl(l, r);

SELECT l < r FROM list_in_struct;

SELECT l <= r FROM list_in_struct;

SELECT l = r FROM list_in_struct;

SELECT l <> r FROM list_in_struct;

SELECT l >= r FROM list_in_struct;

SELECT l > r FROM list_in_struct;

SELECT {'x': a, 'y': a + 1, 'z': a + 2} < {'x': 1, 'y': 2, 'z': 3} FROM RANGE(0, 5) AS tbl(a);

SELECT {'x': a, 'y': a + 1, 'z': a + 2} <= {'x': 1, 'y': 2, 'z': 3} FROM RANGE(0, 5) AS tbl(a);

SELECT {'x': a, 'y': a + 1, 'z': a + 2} = {'x': 1, 'y': 2, 'z': 3} FROM RANGE(0, 5) AS tbl(a);

SELECT {'x': a, 'y': a + 1, 'z': a + 2} <> {'x': 1, 'y': 2, 'z': 3} FROM RANGE(0, 5) AS tbl(a);

SELECT {'x': a, 'y': a + 1, 'z': a + 2} >= {'x': 1, 'y': 2, 'z': 3} FROM RANGE(0, 5) AS tbl(a);

SELECT {'x': a, 'y': a + 1, 'z': a + 2} > {'x': 1, 'y': 2, 'z': 3} FROM RANGE(0, 5) AS tbl(a);

PRAGMA enable_verification;

CREATE VIEW v1 AS SELECT * FROM (VALUES (1, {'a': {'a1': 3, 'a2': 7}, 'b': [1, 2, 3]}), (2, NULL), (3, {'a': NULL, 'b': [4, 5, NULL]})) AS tbl(a, b);

SELECT * FROM v1 AS v, v1 AS w ORDER BY v.a, w.a;

SELECT * FROM v1 AS v, v1 AS w WHERE v.a >= w.a ORDER BY v.a, w.a;

SELECT * FROM v1 AS v, v1 AS w WHERE v.a <> w.a ORDER BY v.a, w.a;

SELECT * FROM v1 AS v, v1 AS w WHERE v.a <> w.a OR v.a > w.a ORDER BY v.a, w.a;

PRAGMA enable_verification;

CREATE TABLE wrong AS SELECT * FROM (VALUES (ROW(3)));

CREATE TABLE t1 (s STRUCT(v TEXT));

INSERT INTO t1 VALUES (ROW(NULL));

INSERT INTO t1 VALUES ({'c': 34});

SELECT s FROM t1 ORDER BY ALL;

CREATE TABLE foo (bar STRUCT(pip INT));

INSERT INTO foo VALUES ({'ignoreme': 3});

INSERT INTO foo VALUES (ROW(42));

SELECT bar FROM foo ORDER BY ALL;

CREATE OR REPLACE TABLE T AS SELECT [{'a': 'A', 'b': 'B'}] AS x, [{'b': 'BB', 'a': 'AA'}] AS y;

SELECT x, y, ARRAY_CONCAT(x, y) FROM T;

CREATE OR REPLACE TABLE T (s STRUCT(a INT, b INT));

INSERT INTO T VALUES ({'l': 1, 'm': 2}), ({'x': 3, 'y': 4});

SELECT s FROM T ORDER BY ALL;

CREATE TABLE tbl (a STRUCT(a INT, b TEXT));

INSERT INTO tbl VALUES (ROW(5, 'hello'));

CREATE TABLE tbl2 AS SELECT ROW(42, 'world') AS a;

SELECT [{'foo': TRUE}, {'bar': FALSE}, {'foobar': NULL}];

SELECT [(13, 24), {'a': 42, 'b': 84}, (43, 85), {'b': 10, 'a': 123123}] AS res;

PREPARE v1 AS SELECT ROW(?);

EXECUTE v1(42);

PRAGMA enable_verification;

CREATE TABLE integers (i INT);

INSERT INTO integers VALUES (1), (1), (3), (20), (20), (20);

SELECT UNNEST(MAP_ENTRIES(HISTOGRAM(i))) FROM integers;

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

PRAGMA enable_verification;

INSERT INTO a VALUES (1, {'i': {'a': 3}, 'j': 4});

SELECT * FROM a WHERE id = 1;

INSERT INTO a VALUES (2, NULL);

SELECT * FROM a ORDER BY id;

INSERT INTO a VALUES (3, ROW(ROW(NULL), 1));

SELECT * FROM a ORDER BY id;

INSERT INTO a VALUES (4, ROW(ROW(1), NULL));

SELECT * FROM a ORDER BY id;

INSERT INTO a VALUES (5, ROW(NULL, 1));

SELECT * FROM a ORDER BY id;

SELECT * FROM a WHERE id = 2;

SELECT * FROM a WHERE id = 3;

SELECT * FROM a WHERE id = 4;

SELECT * FROM a WHERE id = 5;

DROP TABLE a;

DROP TABLE a;

INSERT INTO a VALUES (1, {'i': {'a': 3}, 'j': 4});

INSERT INTO a VALUES (2, NULL);

INSERT INTO a VALUES (3, ROW(ROW(NULL), 1));

INSERT INTO a VALUES (4, ROW(ROW(1), NULL));

INSERT INTO a VALUES (5, ROW(NULL, 1));

CREATE INDEX a_index ON a(id);

SELECT * FROM a WHERE id = 1;

SELECT * FROM a WHERE id = 2;

SELECT * FROM a WHERE id = 3;

SELECT * FROM a WHERE id = 4;

SELECT * FROM a WHERE id = 5;

INSERT INTO a VALUES (1, NULL);

INSERT INTO a VALUES (1, ROW(ROW(NULL), 1));

INSERT INTO a VALUES (1, ROW(ROW(1), NULL));

INSERT INTO a VALUES (1, ROW(NULL, 1));

SELECT * FROM a WHERE id = 1 ORDER BY c['i']['a'];

PRAGMA enable_verification;

SELECT CAST({'a': 42, 'b': 84} AS STRUCT(b INT, a INT));

SELECT CAST({'a': ['1', '2', '3'], 'b': 84} AS STRUCT(b INT, a INT[]));

SELECT CAST({'a': ['1', '2', '3'], 'b': 84} AS STRUCT(b INT, A INT[]));

SELECT CAST({'a': ['1', '2', '3'], 'b': 84} AS STRUCT(b INT, c INT[]));

SELECT CAST(ROW(42, 84) AS STRUCT(a INT, b INT));

PRAGMA enable_verification;

CREATE VIEW struct_int AS SELECT * FROM (VALUES ({'x': 1, 'y': 0}), ({'x': 1, 'y': 2}), ({'x': 1, 'y': NULL}), ({'x': NULL, 'y': 2}), ({'x': NULL, 'y': NULL}), ({'x': NULL, 'y': 0}), (NULL)) AS tbl(i);

SELECT lhs.i, rhs.i, lhs.i < rhs.i, lhs.i <= rhs.i, lhs.i = rhs.i, lhs.i <> rhs.i, lhs.i > rhs.i, lhs.i >= rhs.i, lhs.i IS NOT DISTINCT FROM rhs.i, lhs.i IS DISTINCT FROM rhs.i FROM struct_int AS lhs, struct_int AS rhs;

CREATE VIEW list_str AS SELECT * FROM (VALUES ({'x': 'duck', 'y': ''}), ({'x': 'duck', 'y': 'goose'}), ({'x': 'duck', 'y': NULL}), ({'x': NULL, 'y': 'goose'}), ({'x': NULL, 'y': NULL}), ({'x': NULL, 'y': '0'}), (NULL)) AS tbl(i);

SELECT lhs.i, rhs.i, lhs.i < rhs.i, lhs.i <= rhs.i, lhs.i = rhs.i, lhs.i <> rhs.i, lhs.i > rhs.i, lhs.i >= rhs.i, lhs.i IS NOT DISTINCT FROM rhs.i, lhs.i IS DISTINCT FROM rhs.i FROM list_str AS lhs, list_str AS rhs;

PRAGMA enable_verification;

PRAGMA enable_verification;

INSERT INTO a VALUES (1, {'i': 1, 'j': 2});

CREATE TABLE b (id INT, j TEXT);

INSERT INTO b VALUES (1, 'hello');

SELECT * FROM a LEFT JOIN b ON a.id <> b.id;

SELECT * FROM a RIGHT JOIN b ON a.id <> b.id;

SELECT * FROM a LEFT JOIN b ON a.id > b.id;

SELECT * FROM a RIGHT JOIN b ON a.id > b.id;

SELECT (SELECT b FROM a);

PRAGMA enable_verification;

SELECT a FROM (SELECT {'a': 42, 'b': 43} AS a) AS t;

SELECT a FROM (SELECT {'a': NULL, 'b': 43} AS a) AS t;

SELECT a FROM (SELECT {'a': NULL} AS a) AS t;

SELECT a FROM (SELECT {'a': i, 'b': i} AS a FROM RANGE(0, 10000) AS tbl(i)) AS t;

PRAGMA enable_verification;

CREATE TABLE test_structs (id INT, s STRUCT(a INT, b BOOLEAN));

INSERT INTO test_structs VALUES (1, {'a': 42, 'b': TRUE}), (2, NULL), (3, {'a': 84, 'b': NULL}), (4, {'a': NULL, 'b': FALSE});

COPY test_structs TO '__TEST_DIR__/test_structs.parquet' WITH (foreach source, test_structs READ_PARQUET('__TEST_DIR__/test_structs.parquet'));

COPY test_structs TO '__TEST_DIR__/test_structs.parquet' WITH (foreach source, test_structs READ_PARQUET('__TEST_DIR__/test_structs.parquet'));

COPY test_structs TO '__TEST_DIR__/test_structs.parquet' WITH (foreach source, test_structs READ_PARQUET('__TEST_DIR__/test_structs.parquet'));

COPY test_structs TO '__TEST_DIR__/test_structs.parquet' WITH (foreach source, test_structs READ_PARQUET('__TEST_DIR__/test_structs.parquet'));

COPY test_structs TO '__TEST_DIR__/test_structs.parquet' WITH (foreach source, test_structs READ_PARQUET('__TEST_DIR__/test_structs.parquet'));

COPY test_structs TO '__TEST_DIR__/test_structs.parquet' WITH (foreach source, test_structs READ_PARQUET('__TEST_DIR__/test_structs.parquet'));

COPY test_structs TO '__TEST_DIR__/test_structs.parquet' WITH (foreach source, test_structs READ_PARQUET('__TEST_DIR__/test_structs.parquet'));

COPY test_structs TO '__TEST_DIR__/test_structs.parquet' WITH (foreach source, test_structs READ_PARQUET('__TEST_DIR__/test_structs.parquet'));

UPDATE test_structs SET s = {'a': 84, 'b': FALSE} WHERE id = 2;

SELECT s['b'], s.a FROM test_structs WHERE id = 2;

CREATE TABLE test_structs (id INT PRIMARY KEY, s STRUCT(a INT, b BOOLEAN, c TEXT, d INT[]));

INSERT INTO test_structs SELECT i, CASE WHEN i % 10 = 0 THEN NULL ELSE {'a': i, 'b': i % 2, 'c': 'thisisastring' || CAST(i AS TEXT), 'd': [i, i + 2]} END FROM RANGE(0, 1000000) AS t(i);

SELECT SUM(LENGTH(s.c)), COUNT(s.c) FROM test_structs;

SELECT s.c FROM test_structs WHERE id = 473564;

SELECT s.d FROM test_structs WHERE id = 473564;

SELECT SUM(LENGTH(s.c)), COUNT(s.c) FROM test_structs WHERE id > 47356;

SELECT STATS({'i': 3, 'j': 4});

SELECT STATS({'i': 3, 'j': 4});

CREATE TABLE integers AS SELECT 3 AS i, 4 AS j;

SELECT STATS({'i': i, 'j': j}) FROM integers;

CREATE TABLE structs AS SELECT {'i': 3, 'j': 4} AS s;

SELECT STATS(s['i']) FROM structs;

PRAGMA enable_verification;

SELECT (SELECT tbl.a['i'] + tbl.b['j'] FROM (VALUES ({'i': 1, 'j': 2})) AS tbl(b)) FROM (VALUES ({'i': 1, 'j': 2})) AS tbl(a);

SELECT (SELECT tbl2.a['i'] + tbl.b['j'] FROM (VALUES ({'i': 1, 'j': 2})) AS tbl(b)) FROM (VALUES ({'i': 1, 'j': 2})) AS tbl2(a);

SET default_null_order = 'nulls_first';
require AS skip_reload;

PRAGMA enable_verification;

PRAGMA enable_verification;

INSERT INTO a VALUES ({'i': 1, 'j': 2});

SELECT * FROM a ORDER BY (b).i;

INSERT INTO a VALUES (NULL);

SELECT * FROM a ORDER BY (b).i;

INSERT INTO a VALUES (ROW(2, 3));

SELECT * FROM a ORDER BY (b).i;

INSERT INTO a VALUES (ROW(3, NULL)), (ROW(NULL, 4));

SELECT * FROM a ORDER BY (b).i, (b).j;

INSERT INTO a VALUES (ROW(1, 2, 3));

INSERT INTO a VALUES (ROW(1));

INSERT INTO a VALUES (ROW('hello', 1));

INSERT INTO a VALUES (ROW('hello', [1, 2]));

INSERT INTO a VALUES (ROW(1, ROW(1, 7)));

PRAGMA enable_verification;

SELECT UNNEST(('1,2,3,4,,6', (1))), x AS x;

SELECT UNNEST(('1,2,3,4,,6', (CASE WHEN RANDOM() < 10 THEN 0 ELSE 1 END))), 42 AS x, x;

PRAGMA enable_verification;

PRAGMA enable_verification;

INSERT INTO a VALUES ({'i': 1, 'j': 2});

SELECT * FROM a ORDER BY (b).i;

UPDATE a SET b = {'i': 3, 'j': 4};

SELECT * FROM a ORDER BY (b).i;

UPDATE a SET b = NULL;

SELECT * FROM a ORDER BY (b).i;

UPDATE a SET b = {'i': NULL, 'j': 4};

SELECT * FROM a ORDER BY (b).i;

UPDATE a SET b = {'i': 3, 'j': NULL};

SELECT * FROM a ORDER BY (b).i;

BEGIN;

UPDATE a SET b = {'i': 3, 'j': 4};

SELECT * FROM a ORDER BY (b).i;

ROLLBACK;

SELECT * FROM a ORDER BY (b).i;

INSERT INTO a VALUES ({'i': 2, 'j': 3});

SELECT * FROM a;

INSERT INTO a VALUES ({'i': 3, 'j': 4});

SELECT * FROM a;

UPDATE a SET b = {'i': NULL, 'j': NULL} WHERE (b).j >= 3;

SELECT * FROM a;

CALL dbgen(sf=0.01, suffix='_normalized');

CREATE TABLE lineitem_struct AS SELECT lineitem_normalized AS struct_val FROM lineitem_normalized;

CREATE VIEW lineitem AS SELECT UNNEST(struct_val) FROM lineitem_struct;

SELECT l_returnflag FROM lineitem WHERE l_shipdate <= CAST('1998-09-02' AS DATE) GROUP BY l_returnflag ORDER BY l_returnflag;

PRAGMA enable_verification;

SELECT ROW(42, 'hello') UNION ALL SELECT '{'': 42,'': hello}';

SELECT ROW(42, 'hello') UNION ALL SELECT '(84, world)';

PRAGMA enable_verification;

SELECT a <> b FROM (VALUES ((NULL, 1, NULL), (5, 6, 7))) AS t(a, b);

SELECT a <> b IS NULL FROM (VALUES ((NULL, 1, NULL), (5, 6, 7))) AS t(a, b);

SELECT 1 FROM (VALUES ({'k': NULL})) AS t(a) WHERE 1 <> a.k;

SELECT [NULL, 6] <> [6, 5];

SELECT 1 FROM (VALUES ([NULL, 6], [5, 6])) AS t(a, b) WHERE a <> b;

SELECT 1 FROM (VALUES ([NULL, 1, NULL], [5, 6, 7])) AS t(a, b) WHERE a = b;

SELECT 1 FROM (VALUES ((NULL, 1, NULL), (5, 6, 7))) AS t(a, b) WHERE a <> b;

SELECT 1 FROM (VALUES ((NULL, 1, NULL), (5, 6, 7))) AS t(a, b) WHERE a <> b IS NULL;

SELECT a <> b IS NULL FROM (VALUES ((NULL, 1, NULL), (5, 6, 7))) AS t(a, b) WHERE NULL;

SELECT 1 FROM (VALUES ((NULL, 1, NULL), (5, 6, 7), (NULL, 2), (4, 5))) AS t(a, b, c, d) WHERE a <> b AND c <> d;

SELECT a <> b, c <> d FROM (VALUES ((NULL, 1, NULL), (5, 6, 7), (NULL, 2), (4, 5))) AS t(a, b, c, d) WHERE a <> b AND c <> d;

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

CREATE TABLE tbl (str STRUCT(c001 INT, c002 INT, c003 INT, c004 INT, c005 INT, c006 INT, c007 INT, c008 INT, c009 INT, c010 INT, c011 INT, c012 INT, c013 INT, c014 INT, c015 INT, c016 INT, c017 INT, c018 INT, c019 INT, c020 INT, c021 INT, c022 INT, c023 INT, c024 INT, c025 INT, c026 INT, c027 INT, c028 INT, c029 INT, c030 INT, c031 INT, c032 INT, c033 INT, c034 INT, c035 INT, c036 INT, c037 INT, c038 INT, c039 INT, c040 INT, c041 INT, c042 INT, c043 INT, c044 INT, c045 INT, c046 INT, c047 INT, c048 INT, c049 INT, c050 INT, c051 INT, c052 INT, c053 INT, c054 INT, c055 INT, c056 INT, c057 INT, c058 INT, c059 INT, c060 INT, c061 INT, c062 INT, c063 INT, c064 INT, c065 INT, c066 INT, c067 INT, c068 INT, c069 INT, c070 INT, c071 INT, c072 INT, c073 INT, c074 INT, c075 INT, c076 INT, c077 INT, c078 INT, c079 INT, c080 INT, c081 INT, c082 INT, c083 INT, c084 INT, c085 INT, c086 INT, c087 INT, c088 INT, c089 INT, c090 INT, c091 INT, c092 INT, c093 INT, c094 INT, c095 INT, c096 INT, c097 INT, c098 INT, c099 INT, c100 INT, c101 INT, c102 INT, c103 INT, c104 INT, c105 INT, c106 INT, c107 INT, c108 INT, c109 INT, c110 INT));

CREATE TABLE tbl (str STRUCT(c001 INT, c002 INT, c003 INT, c004 INT, c005 INT, c006 INT, c007 INT, c008 INT, c009 INT, c010 INT, c011 INT, c012 INT, c013 INT, c014 INT, c015 INT, c016 INT, c017 INT, c018 INT, c019 INT, c020 INT, c021 INT, c022 INT, c023 INT, c024 INT, c025 INT, c026 INT, c027 INT, c028 INT, c029 INT, c030 INT, c031 INT, c032 INT, c033 INT, c034 INT, c035 INT, c036 INT, c037 INT, c038 INT, c039 INT, c040 INT, c041 INT, c042 INT, c043 INT, c044 INT, c045 INT, c046 INT, c047 INT, c048 INT, c049 INT, c050 INT, c051 INT, c052 INT, c053 INT, c054 INT, c055 INT, c056 INT, c057 INT, c058 INT, c059 INT, c060 INT, c061 INT, c062 INT, c063 INT, c064 INT, c065 INT, c066 INT, c067 INT, c068 INT, c069 INT, c070 INT, c071 INT, c072 INT, c073 INT, c074 INT, c075 INT, c076 INT, c077 INT, c078 INT, c079 INT, c080 INT, c081 INT, c082 INT, c083 INT, c084 INT, c085 INT, c086 INT, c087 INT, c088 INT, c089 INT, c090 INT, c091 INT, c092 INT, c093 INT, c094 INT, c095 INT, c096 INT, c097 INT, c098 INT, c099 INT, c100 INT, c101 INT, c102 INT, c103 INT, c104 INT, c105 INT, c106 INT, c107 INT, c108 INT, c109 INT, c110 INT));

PRAGMA enable_verification;

SELECT UNNEST({'a': 42, 'b': 88});

SELECT a, b FROM (SELECT UNNEST({'a': 42, 'b': 88}));

SELECT UNNEST({'a': 42, 'b': {'c': 88, 'd': 99}});

SELECT UNNEST({'a': 42, 'b': {'c': 88, 'd': 99}}, recursive := TRUE);

SELECT UNNEST({'a': 42, 'b': {'c': {'x': 4}, 'd': 99}}, max_depth := 2);

SELECT a, c, d FROM (SELECT UNNEST({'a': 42, 'b': {'c': 88, 'd': 99}}, recursive := TRUE));

SELECT UNNEST([{'a': 42, 'b': 88}, {'a': NULL, 'b': 99}]);

SELECT UNNEST([{'a': 42, 'b': 88}, {'a': NULL, 'b': 99}], recursive := TRUE);

SELECT UNNEST([[{'a': 42, 'b': {'x': 99}}, {'a': NULL, 'b': {'x': NULL}}]], max_depth := 1);

SELECT UNNEST([[{'a': 42, 'b': {'x': 99}}, {'a': NULL, 'b': {'x': NULL}}]], max_depth := 2);

SELECT UNNEST([[{'a': 42, 'b': {'x': 99}}, {'a': NULL, 'b': {'x': NULL}}]], max_depth := 3);

SELECT UNNEST([[{'a': 42, 'b': {'x': 99}}, {'a': NULL, 'b': {'x': NULL}}]], max_depth := 4);

SELECT UNNEST({'a': [1, 2, 3]}, recursive := TRUE);

SELECT UNNEST({'a': 44, 'b': 88}), UNNEST([1, 2, 3]);

SELECT UNNEST({'a': 44, 'b': 88}), UNNEST([[1, 2, 3], [4, 5]], recursive := TRUE);

SELECT a, "a_1", b FROM (SELECT UNNEST({'a': 42, 'b': {'a': 88, 'b': 99}}, recursive := TRUE));

SELECT UNNEST({'a': 42, 'b': 88}) + 42;

SELECT UNNEST(UNNEST([{'a': 42, 'b': 88}, {'a': NULL, 'b': 99}]));

PRAGMA enable_verification;

CREATE TABLE tbl_structs AS SELECT {'a': 1, 'b': 2, 'c': 3} AS s;

INSERT INTO tbl_structs VALUES ({'a': 2, 'b': 3, 'c': 1});

INSERT INTO tbl_structs VALUES ({'a': 3, 'b': 1, 'c': 2});

SELECT UNNEST(s) FROM tbl_structs UNION ALL SELECT s.a, s.b, s.c FROM tbl_structs ORDER BY s.a, s.b, s.c;

SELECT * FROM tbl_structs ORDER BY UNNEST(s);

CREATE OR REPLACE TABLE tbl_structs AS SELECT {'a': 1, 'b': 2, 'c': 3} AS s;

INSERT INTO tbl_structs VALUES ({'a': 1, 'b': 3, 'c': 1});

INSERT INTO tbl_structs VALUES ({'a': 1, 'b': 1, 'c': 2});

SELECT UNNEST(s) FROM tbl_structs ORDER BY ALL;

SELECT UNNEST(s) FROM tbl_structs ORDER BY 2 COLLATE nocase;

CREATE OR REPLACE TABLE tbl_structs AS SELECT {'a': 'hello'} AS s;

INSERT INTO tbl_structs VALUES ({'a': 'WORLD'});

SELECT UNNEST(s) FROM tbl_structs ORDER BY 1 COLLATE NOCASE;

CREATE OR REPLACE TABLE tbl_structs AS SELECT {'a': 'hello', 'b': 1} AS s;

INSERT INTO tbl_structs VALUES ({'a': 'WORLD', 'b': 2});

SELECT UNNEST(s) FROM tbl_structs UNION ALL SELECT s.a, s.b FROM tbl_structs ORDER BY 1 COLLATE NOCASE;

SELECT UNNEST(s), -s.b AS id FROM tbl_structs UNION ALL SELECT s.a, s.b, s.b FROM tbl_structs ORDER BY id;

PRAGMA enable_verification;

SELECT (SELECT UNNEST(a).a) FROM (VALUES ({'a': 42, 'b': 88})) AS t(a);

SELECT UNNEST(a) FROM (VALUES ({'a': 42, 'b': 88})) AS t(a);

SELECT (SELECT t.x FROM (SELECT UNNEST(a)) AS t(x)) FROM (VALUES ({'a': 42, 'b': 88})) AS t(a);

UPDATE t0 SET (c0) = ROW();

PRAGMA enable_verification;

CREATE TABLE times (i TIME);

INSERT INTO times VALUES ('00:01:20'), ('20:08:10.998'), ('20:08:10.33'), ('20:08:10.001'), (NULL);

SELECT * FROM times;

SELECT CAST(i AS TEXT) FROM times;

SELECT CAST('' AS TIME);

SELECT CAST('  ' AS TIME);

SELECT CAST('  	' AS TIME);

SELECT CAST('1' AS TIME);

SELECT CAST('11' AS TIME);

SELECT CAST('11:' AS TIME);

SELECT CAST('11:1' AS TIME);

SELECT CAST('11:11' AS TIME);

SELECT CAST('11:11:' AS TIME);

SELECT CAST('11:11:f' AS TIME);

PRAGMA enable_verification;

CREATE TABLE times (i TIME);

CREATE TABLE timestamp (i TIMESTAMP);

INSERT INTO times VALUES ('00:00:01');

INSERT INTO timestamp VALUES ('1993-08-14 00:00:01');

SELECT COUNT(*) FROM times INNER JOIN timestamp ON (CAST(timestamp.i AS TIME) = times.i);

PRAGMA enable_verification;

SELECT CAST('02:30:00' AS TIMETZ);

SELECT CAST('02:30:00+04' AS TIMETZ);

SELECT CAST('02:30:00+04:30' AS TIMETZ);

SELECT CAST('02:30:00+04:30:45' AS TIMETZ);

SELECT CAST('2023-08-20 16:15:03.123456' AS TIMETZ);

SELECT CAST('02:30:00+1200' AS TIMETZ);

SELECT CAST('02:30:00-1200' AS TIMETZ);

SELECT CAST(CAST('2023-08-20 16:15:03.123456' AS TIMESTAMP) AS TIMETZ);

SELECT CAST(CAST('16:15:03.123456' AS TIME) AS TIMETZ);

SELECT CAST(CAST('02:30:00+04' AS TIMETZ) AS TIME);

SELECT CAST('2021-08-20' AS TIME);

CREATE TABLE timetzs (ttz TIMETZ);

INSERT INTO timetzs VALUES (NULL), ('00:00:00+1559'), ('00:00:00+1558'), ('02:30:00'), ('02:30:00+04'), ('02:30:00+04:30'), ('02:30:00+04:30:45'), ('16:15:03.123456'), ('02:30:00+1200'), ('02:30:00-1200'), ('24:00:00-1558'), ('24:00:00-1559');

SELECT * FROM timetzs ORDER BY ALL;

SELECT lhs.ttz, rhs.ttz, lhs.ttz < rhs.ttz, lhs.ttz <= rhs.ttz, lhs.ttz = rhs.ttz, lhs.ttz >= rhs.ttz, lhs.ttz > rhs.ttz, lhs.ttz <> rhs.ttz FROM timetzs AS lhs, timetzs AS rhs ORDER BY ALL;

SELECT CAST('02:30:00>04' AS TIMETZ);

SELECT CAST('02:30:00+4' AS TIMETZ);

SELECT CAST('02:30:00+4xx' AS TIMETZ);

SELECT CAST('02:30:00+2000' AS TIMETZ);

SELECT CAST('02:30:00+20:xx' AS TIMETZ);

SELECT CAST('02:30:00+20:45:xx' AS TIMETZ);

SELECT CAST('infinity' AS TIMETZ);

PRAGMA enable_verification;

CREATE TABLE timetzs (ttz TIMETZ);

CREATE TABLE timetzs (ttz TIMETZ);

CREATE TABLE timetzs (ttz TIMETZ);

CREATE TABLE timetzs (ttz TIMETZ);

CREATE TABLE timetzs (ttz TIMETZ);

CREATE TABLE timetzs (ttz TIMETZ);

CREATE TABLE timetzs (ttz TIMETZ);

CREATE TABLE timetzs (ttz TIMETZ);

CREATE TABLE timetzs (ttz TIMETZ);

CREATE TABLE timetzs (ttz TIMETZ);

CREATE TABLE timetzs (ttz TIMETZ);

CREATE TABLE timetzs (ttz TIMETZ);

PRAGMA enable_verification;

SET Calendar = 'gregorian';

SET TimeZone = 'Asia/Singapore';

CREATE OR REPLACE TABLE single (c0 TIMETZ);

INSERT INTO single (c0) VALUES ('12:34:56');

SELECT c0, CAST(c0 AS TIME) AS t, CAST(CAST(c0 AS TIME) AS TIMETZ) AS tz FROM single;

SELECT (CAST(c0 AS TIME) = '12:34:56') AS e, (CAST(c0 AS TIME) <> '12:34:56') AS u, (CAST(c0 AS TIME) IN ('12:34:56')) AS i, (NOT CAST(c0 AS TIME) IN ('12:34:56')) AS n FROM single;

PRAGMA enable_verification;

SELECT CAST('23:59:59.999999' AS TIME);

SELECT CAST('23:59:59.999999' AS TIME) + INTERVAL (1) MICROSECOND;

SELECT CAST('23:59:59.999999' AS TIME) + INTERVAL (1) SECOND;

SELECT CAST('23:59:59.999999' AS TIME) + INTERVAL (1) MINUTE;

SELECT CAST('23:59:59.999999' AS TIME) + INTERVAL (1) HOUR;

SELECT CAST('23:59:59.999999' AS TIME) + INTERVAL (1) DAY;

SELECT CAST('23:59:59.999999' AS TIME) + INTERVAL (1) MONTH;

SELECT CAST('23:59:59.999999' AS TIME) + INTERVAL (1) YEAR;

PRAGMA enable_verification;

SELECT CAST(CAST('14:42:04' AS TIME) AS TEXT);

SELECT CAST(CAST('14:42:04.35' AS TIME) AS TEXT);

SELECT CAST(CAST('14:42:04.999999' AS TIME) AS TEXT);

SELECT CAST(CAST('14:42:04.999999999' AS TIME) AS TEXT);

SELECT CAST(CAST('14:42:04.000000' AS TIME) AS TEXT);

SELECT CAST(CAST('14:42:04.500' AS TIME) AS TEXT);

SELECT CAST(CAST('50:42:04.500' AS TIME) AS TEXT);

SELECT CAST(CAST('100:42:04.500' AS TIME) AS TEXT);

SELECT CAST(CAST('14:70:04.500' AS TIME) AS TEXT);

SELECT CAST(CAST('14:100:04.500' AS TIME) AS TEXT);

SELECT CAST(CAST('14:42:70.500' AS TIME) AS TEXT);

SELECT CAST(CAST('14-42-04' AS TIME) AS TEXT);

PRAGMA enable_verification;

SELECT TRY_CAST('' AS TIME);

SELECT TRY_CAST('    ' AS TIME);

SELECT TRY_CAST('11' AS TIME);

SELECT TRY_CAST('11:' AS TIME);

SELECT TRY_CAST('11:11' AS TIME);

SELECT TRY_CAST('11:11:' AS TIME);

SELECT TRY_CAST('11:11:A' AS TIME);

SELECT TRY_CAST('11:11:A1' AS TIME);

SELECT TRY_CAST('11/11/11' AS TIME);

SELECT TRY_CAST('  11:11:11  ' AS TIME);

SELECT TRY_CAST('24:00:00' AS TIME);

SELECT TRY_CAST('24:00:01' AS TIME);

SELECT TRY_CAST('23:60:00' AS TIME);

SELECT TRY_CAST('23:59:60' AS TIME);

SELECT TRY_CAST('23:59:59' AS TIME);

SELECT TRY_CAST('23:59:59.999999' AS TIME);

SELECT TRY_CAST('24:00:00' AS TIME);

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

SELECT CAST(CAST('2023-12-08 08:51:39.123456' AS TIMESTAMP_MS) AS TIME);

SELECT CAST(CAST('2023-12-08 08:51:39.123456' AS TIMESTAMP_S) AS TIME);

SELECT CAST(CAST('2023-12-08 08:51:39.123456' AS TIMESTAMP_NS) AS TIME);

SELECT CAST('2024-05-10 11:06:33.446' AS TIMESTAMP_S);

SELECT CAST('2024-05-10 11:06:33.846' AS TIMESTAMP_S);

SELECT CAST('2024-05-10 11:06:33.123446' AS TIMESTAMP_MS);

SELECT CAST('2024-05-10 11:06:33.123846' AS TIMESTAMP_MS);

CREATE TABLE issue11995 (t TIMESTAMP);

INSERT INTO issue11995 VALUES ('2024-05-10 11:06:33.446'), ('2024-05-10 11:06:33.846'), ('2024-05-10 11:06:33.123446'), ('2024-05-10 11:06:33.523846');

SELECT t, CAST(t AS TIMESTAMP_MS), CAST(t AS TIMESTAMP_S) FROM issue11995;

SELECT CAST(CAST('1900-01-01 03:08:47' AS TIMESTAMP) AS TIMESTAMP_MS);

SELECT CAST(CAST('1969-01-01 01:03:20.45432' AS TIMESTAMP) AS TEXT);

SELECT CAST(CAST('-1000-01-01 01:03:20.45432' AS TIMESTAMP) AS TEXT);

SELECT CAST(CAST('1000-01-01 (BC) 01:03:20.45432' AS TIMESTAMP) AS TEXT);

PRAGMA enable_verification;

CREATE TABLE timestamp (t TIMESTAMP);

INSERT INTO timestamp VALUES ('blabla');

INSERT INTO timestamp VALUES ('1993-20-14 00:00:00');

INSERT INTO timestamp VALUES ('1993-08-99 00:00:00');

INSERT INTO timestamp VALUES ('1993-02-29 00:00:00');

INSERT INTO timestamp VALUES ('1900-02-29 00:00:00');

INSERT INTO timestamp VALUES ('1992-02-29 00:00:00');

INSERT INTO timestamp VALUES ('2000-02-29 00:00:00');

INSERT INTO timestamp VALUES ('02-02-1992 00:00:00');

INSERT INTO timestamp VALUES ('1900-1-1 59:59:23');

INSERT INTO timestamp VALUES ('1900a01a01 00:00:00');

INSERT INTO timestamp VALUES ('1900-1-1 00;00;00');

INSERT INTO timestamp VALUES ('1900-1-1 00a00a00');

INSERT INTO timestamp VALUES ('1900-1-1 00/00/00');

INSERT INTO timestamp VALUES ('1900-1-1 00-00-00');

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

CREATE TABLE IF NOT EXISTS timestamp (t TIMESTAMP);

INSERT INTO timestamp VALUES ('2008-01-01 00:00:01'), (NULL), ('2007-01-01 00:00:01'), ('2008-02-01 00:00:01'), ('2008-01-02 00:00:01'), ('2008-01-01 10:00:00'), ('2008-01-01 00:10:00'), ('2008-01-01 00:00:10');

SELECT CAST('2017-07-23 13:10:11' AS TIMESTAMP);

SELECT CAST('2017-07-23T13:10:11' AS TIMESTAMP), CAST('2017-07-23T13:10:11Z' AS TIMESTAMP);

SELECT CAST('    2017-07-23     13:10:11    ' AS TIMESTAMP);

SELECT CAST('    2017-07-23     13:10:11    AA' AS TIMESTAMP);

SELECT CAST('AA2017-07-23 13:10:11' AS TIMESTAMP);

SELECT CAST('2017-07-23A13:10:11' AS TIMESTAMP);

SELECT t FROM timestamp ORDER BY t;

SELECT MIN(t) FROM timestamp;

SELECT MAX(t) FROM timestamp;

SELECT SUM(t) FROM timestamp;

SELECT AVG(t) FROM timestamp;

SELECT t + t FROM timestamp;

SELECT t * t FROM timestamp;

SELECT t / t FROM timestamp;

SELECT t % t FROM timestamp;

SELECT t - t FROM timestamp;

SELECT YEAR(CAST('1992-01-01 01:01:01' AS TIMESTAMP));

SELECT YEAR(CAST('1992-01-01 01:01:01' AS TIMESTAMP));

SELECT CAST((CAST('1992-01-01 01:01:01' AS TIMESTAMP)) AS DATE);

SELECT CAST((CAST('1992-01-01 01:01:01' AS TIMESTAMP)) AS TIME);

SELECT CAST(t AS DATE) FROM timestamp WHERE EXTRACT(YEAR FROM t) = 2007 ORDER BY 1;

SELECT CAST(t AS TIME) FROM timestamp WHERE EXTRACT(YEAR FROM t) = 2007 ORDER BY 1;

SELECT CAST((CAST('1992-01-01' AS DATE)) AS TIMESTAMP);

SELECT CAST((CAST('1992-01-01' AS DATE)) AS TIMESTAMP);

SELECT CAST((CAST('1992-01-01' AS DATE)) AS TIMESTAMP);

SELECT CAST((CAST('1992-01-01' AS DATE)) AS TIMESTAMP);

SELECT CAST(REPEAT('1992-02-02 ', 100000) AS TIMESTAMP);

PRAGMA enable_verification;

CREATE TABLE timestamp1 (i TIMESTAMP);

CREATE TABLE timestamp2 (i TIMESTAMP);

INSERT INTO timestamp1 VALUES ('1993-08-14 00:00:01');

INSERT INTO timestamp2 VALUES ('1993-08-14 00:00:01');

SELECT COUNT(*) FROM timestamp2 INNER JOIN timestamp1 ON (timestamp1.i = timestamp2.i);

PRAGMA enable_verification;

CREATE TABLE timestamps (ts_SEC TIMESTAMP_S, ts_MS TIMESTAMP_MS, ts TIMESTAMP, ts_NS TIMESTAMP_NS);

INSERT INTO timestamps VALUES ('2000-01-01 01:12:23', '2000-01-01 01:12:23.123', '2000-01-01 01:12:23.123456', '2000-01-01 01:12:23.123457');

SELECT ts_SEC = ts_MS, ts_SEC = ts, ts_SEC = ts_NS, ts_MS = ts, ts_MS = ts_NS, ts = ts_NS, ts_MS = ts_SEC, ts = ts_SEC, ts_SEC = ts_NS, ts = ts_MS, ts_NS = ts_MS, ts_NS = ts FROM timestamps;

SELECT TYPEOF([CAST('2000-01-01 01:12:23.123456' AS TIMESTAMP), CAST('2000-01-01 01:12:23.123456' AS TIMESTAMP_NS)]);

SELECT TYPEOF([CAST('2000-01-01 01:12:23.123456' AS TIMESTAMP_NS), CAST('2000-01-01 01:12:23.123456' AS TIMESTAMP)]);

SELECT CAST('2001-04-20 14:42:11.123' AS TIMESTAMP) AS a, CAST('2001-04-20 14:42:11.0' AS TIMESTAMP) AS b;

SELECT CAST('2001-04-20 14:42:11.12300000000000000000' AS TIMESTAMP);

PRAGMA enable_verification;

CREATE TABLE IF NOT EXISTS timestamp (sec TIMESTAMP_S, milli TIMESTAMP_MS, micro TIMESTAMP, nano TIMESTAMP_NS);

INSERT INTO timestamp VALUES ('2008-01-01 00:00:01', '2008-01-01 00:00:01.594', '2008-01-01 00:00:01.88926', '2008-01-01 00:00:01.889268321');

SELECT * FROM timestamp;

SELECT YEAR(sec), YEAR(milli), YEAR(nano) FROM timestamp;

SELECT CAST(nano AS TIMESTAMP), CAST(milli AS TIMESTAMP), CAST(sec AS TIMESTAMP) FROM timestamp;

SELECT CAST(micro AS TIMESTAMP_S), CAST(micro AS TIMESTAMP_MS), CAST(micro AS TIMESTAMP_NS) FROM timestamp;

INSERT INTO timestamp VALUES ('2008-01-01 00:00:51', '2008-01-01 00:00:01.894', '2008-01-01 00:00:01.99926', '2008-01-01 00:00:01.999268321');

INSERT INTO timestamp VALUES ('2008-01-01 00:00:11', '2008-01-01 00:00:01.794', '2008-01-01 00:00:01.98926', '2008-01-01 00:00:01.899268321');

SELECT CAST(CAST('90000-01-19 03:14:07.999999' AS TIMESTAMP) AS TIMESTAMP_NS);

SELECT CAST(s AS TIMESTAMP_NS) FROM (VALUES ('2024-06-04 10:17:10.987654321'), ('2024-06-04 10:17:10.98765432'), ('2024-06-04 10:17:10.9876543'), ('2024-06-04 10:17:10.9876543'), ('2024-06-04 10:17:10.987654'), ('2024-06-04 10:17:10.98765'), ('2024-06-04 10:17:10.9876'), ('2024-06-04 10:17:10.987'), ('2024-06-04 10:17:10.98'), ('2024-06-04 10:17:10.9'), ('2024-06-04 10:17:10')) AS tbl(s);

SELECT CAST('2262-04-11 23:47:16.854775808' AS TIMESTAMP_NS);

SELECT CAST('1969-01-01T23:59:59.9999999' AS TIMESTAMP_NS);

SELECT CAST(sec AS TIME) FROM timestamp;

SELECT CAST(milli AS TIME) FROM timestamp;

SELECT CAST(nano AS TIME) FROM timestamp;

SELECT CAST(nano AS TIME) FROM timestamp;

SELECT CAST(nano AS TIME) FROM timestamp;

SELECT sec FROM timestamp ORDER BY sec;

SELECT milli FROM timestamp ORDER BY milli;

SELECT nano FROM timestamp ORDER BY nano;

INSERT INTO timestamp VALUES ('2008-01-01 00:00:51', '2008-01-01 00:00:01.894', '2008-01-01 00:00:01.99926', '2008-01-01 00:00:01.999268321');

INSERT INTO timestamp VALUES ('2008-01-01 00:00:11', '2008-01-01 00:00:01.794', '2008-01-01 00:00:01.98926', '2008-01-01 00:00:01.899268321');

SELECT COUNT(*), nano FROM timestamp GROUP BY nano ORDER BY nano;

SELECT COUNT(*), sec FROM timestamp GROUP BY sec ORDER BY sec;

SELECT COUNT(*), milli FROM timestamp GROUP BY milli ORDER BY milli;

CREATE TABLE IF NOT EXISTS timestamp_two (sec TIMESTAMP_S, milli TIMESTAMP_MS, micro TIMESTAMP, nano TIMESTAMP_NS);

INSERT INTO timestamp_two VALUES ('2008-01-01 00:00:11', '2008-01-01 00:00:01.794', '2008-01-01 00:00:01.98926', '2008-01-01 00:00:01.899268321');

SELECT timestamp.sec FROM timestamp INNER JOIN timestamp_two ON (timestamp.sec = timestamp_two.sec);

SELECT timestamp.milli FROM timestamp INNER JOIN timestamp_two ON (timestamp.milli = timestamp_two.milli);

SELECT timestamp.nano FROM timestamp INNER JOIN timestamp_two ON (timestamp.nano = timestamp_two.nano);

SELECT CAST('2008-01-01 00:00:11' AS TIMESTAMP) = CAST('2008-01-01 00:00:11' AS TIMESTAMP_MS);

SELECT CAST('2008-01-01 00:00:11' AS TIMESTAMP) = CAST('2008-01-01 00:00:11' AS TIMESTAMP_NS);

SELECT CAST('2008-01-01 00:00:11' AS TIMESTAMP) = CAST('2008-01-01 00:00:11' AS TIMESTAMP_S);

SELECT CAST('2008-01-01 00:00:11.1' AS TIMESTAMP) = CAST('2008-01-01 00:00:11' AS TIMESTAMP_MS);

SELECT CAST('2008-01-01 00:00:11.1' AS TIMESTAMP) = CAST('2008-01-01 00:00:11' AS TIMESTAMP_NS);

SELECT CAST('2008-01-01 00:00:11.1' AS TIMESTAMP) = CAST('2008-01-01 00:00:11.1' AS TIMESTAMP_S);

SELECT CAST('2008-01-01 00:00:11.1' AS TIMESTAMP_MS) = CAST('2008-01-01 00:00:11' AS TIMESTAMP_NS);

SELECT CAST('2008-01-01 00:00:11.1' AS TIMESTAMP_MS) = CAST('2008-01-01 00:00:11' AS TIMESTAMP_S);

SELECT CAST('2008-01-01 00:00:11.1' AS TIMESTAMP_NS) = CAST('2008-01-01 00:00:11' AS TIMESTAMP_S);

SELECT CAST('2008-01-01 00:00:11' AS TIMESTAMP_MS) = CAST('2008-01-01 00:00:11' AS TIMESTAMP_NS);

SELECT CAST('2008-01-01 00:00:11' AS TIMESTAMP_MS) = CAST('2008-01-01 00:00:11' AS TIMESTAMP_S);

SELECT CAST('2008-01-01 00:00:11' AS TIMESTAMP_NS) = CAST('2008-01-01 00:00:11' AS TIMESTAMP_S);

SELECT CAST(t0.c0 AS TIME) >= ('12:34:56') FROM (VALUES (CAST('2030-01-01' AS TIMESTAMP_S)), (CAST('1969-12-23 20:44:40' AS TIMESTAMP_S))) AS t0(c0);

SELECT NOT CAST(t0.c0 AS TIME) >= ('12:34:56') FROM (VALUES (CAST('2030-01-01' AS TIMESTAMP_MS)), (CAST('1969-12-23 20:44:40' AS TIMESTAMP_MS))) AS t0(c0);

PRAGMA enable_verification;

SELECT CAST('2021-11-15 02:30:00' AS TIMESTAMPTZ);

SELECT CAST(CAST('2021-11-15 02:30:00' AS TIMESTAMP) AS TIMESTAMPTZ);

SELECT CAST(CAST('2021-11-15 02:30:00' AS TIMESTAMP) AS TIMESTAMPTZ);

SELECT CAST('1880-05-15T12:00:00+00:50:20' AS TIMESTAMPTZ);

PRAGMA enable_verification;

SELECT CAST('1970-01-01' AS TIMESTAMP);

SELECT CAST('290309-12-22 (BC) 00:00:00' AS TIMESTAMP);

SELECT CAST('290309-12-21 (BC) 12:59:59.999999' AS TIMESTAMP);

SELECT CAST('290309-12-22 (BC) 00:00:00' AS TIMESTAMP) + INTERVAL (1) DAY;

SELECT CAST('290309-12-22 (BC) 00:00:00' AS TIMESTAMP) - INTERVAL (1) MICROSECOND;

SELECT CAST('290309-12-22 (BC) 00:00:00' AS TIMESTAMP) - INTERVAL (1) SECOND;

SELECT CAST('290309-12-22 (BC) 00:00:00' AS TIMESTAMP) - INTERVAL (1) DAY;

SELECT CAST('290309-12-22 (BC) 00:00:00' AS TIMESTAMP) - INTERVAL (1) MONTH;

SELECT CAST('290309-12-22 (BC) 00:00:00' AS TIMESTAMP) - INTERVAL (1) YEAR;

SELECT CAST('294247-01-10 04:00:54.775806' AS TIMESTAMP);

SELECT CAST('294247-01-10 04:00:54.775807' AS TIMESTAMP);

SELECT CAST('294247-01-10 04:00:54.775808' AS TIMESTAMP);

SELECT CAST('294247-01-10 04:00:54.775806' AS TIMESTAMP) + INTERVAL (1) MICROSECOND;

SELECT CAST('294247-01-10 04:00:54.775806' AS TIMESTAMP) + INTERVAL (1) SECOND;

SELECT CAST('294247-01-10 04:00:54.775806' AS TIMESTAMP) + INTERVAL (1) HOUR;

SELECT CAST('294247-01-10 04:00:54.775806' AS TIMESTAMP) + INTERVAL (1) DAY;

SELECT CAST('294247-01-10 04:00:54.775806' AS TIMESTAMP) + INTERVAL (1) MONTH;

SELECT CAST('294247-01-10 04:00:54.775806' AS TIMESTAMP) + INTERVAL (1) YEAR;

SELECT CAST('290309-12-22 (BC) 00:00:00+07:00' AS TIMESTAMP);

SELECT CAST('294247-01-10 04:00:54-07:00' AS TIMESTAMP);

SELECT EPOCH(CAST('294247-01-10 04:00:54.775806' AS TIMESTAMP)), EPOCH(CAST('290309-12-22 (BC) 00:00:00' AS TIMESTAMP));

SELECT YEAR(CAST('294247-01-10 04:00:54.775806' AS TIMESTAMP)), YEAR(CAST('290309-12-22 (BC) 00:00:00' AS TIMESTAMP));

SELECT DECADE(CAST('294247-01-10 04:00:54.775806' AS TIMESTAMP)), DECADE(CAST('290309-12-22 (BC) 00:00:00' AS TIMESTAMP));

SELECT MONTHNAME(CAST('294247-01-10 04:00:54.775806' AS TIMESTAMP)), MONTHNAME(CAST('290309-12-22 (BC) 00:00:00' AS TIMESTAMP));

SELECT AGE(CAST('294247-01-10 04:00:54.775806' AS TIMESTAMP), CAST('290309-12-22 (BC) 00:00:00' AS TIMESTAMP));

PRAGMA enable_verification;

CREATE TABLE ts_precision (sec TIMESTAMP(0), msec TIMESTAMP(3), micros TIMESTAMP(6), nanos TIMESTAMP(9));

INSERT INTO ts_precision VALUES ('2020-01-01 01:23:45.123456789', '2020-01-01 01:23:45.123456789', '2020-01-01 01:23:45.123456789', '2020-01-01 01:23:45.123456789');

SELECT CAST(sec AS TEXT), CAST(msec AS TEXT), CAST(micros AS TEXT), CAST(nanos AS TEXT) FROM ts_precision;

SELECT EXTRACT(MICROSECONDS FROM sec), EXTRACT(MICROSECONDS FROM msec), EXTRACT(MICROSECONDS FROM micros), EXTRACT(MICROSECONDS FROM nanos) FROM ts_precision;

SELECT EXTRACT(MICROSECONDS FROM sec), EXTRACT(MICROSECONDS FROM msec), EXTRACT(MICROSECONDS FROM micros), EXTRACT(MICROSECONDS FROM nanos) FROM ts_precision;

SELECT EXTRACT(MICROSECONDS FROM sec), EXTRACT(MICROSECONDS FROM msec), EXTRACT(MICROSECONDS FROM micros), EXTRACT(MICROSECONDS FROM nanos) FROM ts_precision;

SELECT EXTRACT(MICROSECONDS FROM sec), EXTRACT(MICROSECONDS FROM msec), EXTRACT(MICROSECONDS FROM micros), EXTRACT(MICROSECONDS FROM nanos) FROM ts_precision;

CREATE TABLE ts_precision (sec TIMESTAMP(10));

CREATE TABLE ts_precision (sec TIMESTAMP(99999));

CREATE TABLE ts_precision (sec TIMESTAMP(1, 1));

SELECT CAST('2262-04-11 23:47:16.854775807' AS TIMESTAMP_NS);

PRAGMA enable_verification;

SELECT CAST('2021-05-25 04:55:03.382494 UTC' AS TIMESTAMP);

SELECT CAST('2021-05-25 04:55:03.382494 utc' AS TIMESTAMP);

SELECT CAST('2021-05-25 04:55:03.382494 uTc' AS TIMESTAMP);

SELECT CAST('2021-05-25 04:55:03.382494 EST' AS TIMESTAMP);

SELECT CAST('2021-05-25 04:55:03.382494 EST' AS TIMESTAMP);

SET Calendar = 'gregorian';

SET TimeZone = 'UTC';

SELECT CAST('2021-05-25 04:55:03.382494 EST' AS TIMESTAMPTZ);

SET TimeZone = 'America/Phoenix';

SELECT DATE_DIFF('HOUR', CAST('2010-07-07 10:20:00' AS TIMESTAMP) AT TIME ZONE 'Asia/Bangkok', CAST('2010-07-07 10:20:00+00' AS TIMESTAMP)) AS hours;

PRAGMA enable_verification;

SELECT TRY_CAST('' AS TIMESTAMP);

SELECT TRY_CAST('    ' AS TIMESTAMP);

SELECT TRY_CAST('1111' AS TIMESTAMP);

SELECT TRY_CAST('  1111   ' AS TIMESTAMP);

SELECT TRY_CAST('1111-' AS TIMESTAMP);

SELECT TRY_CAST('1111-11' AS TIMESTAMP);

SELECT TRY_CAST('1111-11-' AS TIMESTAMP);

SELECT TRY_CAST('1111-111-1' AS TIMESTAMP);

SELECT TRY_CAST('1111-11-111' AS TIMESTAMP);

SELECT TRY_CAST('1111-11-11 11' AS TIMESTAMP);

SELECT TRY_CAST('1111-11-11 11:11' AS TIMESTAMP);

SELECT TRY_CAST('1111-11-11 11:11:999' AS TIMESTAMP);

SELECT TRY_CAST('1111-11-11 11:11:11.AAA' AS TIMESTAMP);

SELECT TRY_CAST('1111-11-11 11X11A11' AS TIMESTAMP);

SELECT TRY_CAST('1111-11-11 11:11:11' AS TIMESTAMP);

SELECT TRY_CAST('290309-12-21 (BC) 12:59:59.999999' AS TIMESTAMP);

SELECT TRY_CAST('294247-01-10 04:00:54.775807' AS TIMESTAMP);

SELECT TRY_CAST('290309-12-22 (BC) 00:00:00' AS TIMESTAMP);

SELECT TRY_CAST('294247-01-10 04:00:54.775806' AS TIMESTAMP);

SELECT TRY_CAST('infinity' AS TIMESTAMP);

SELECT TRY_CAST('-infinity' AS TIMESTAMP);

PRAGMA enable_verification;

SELECT CAST('2020-12-31 21:25:58.745232' AS TIMESTAMP);

SELECT CAST('2020-12-31 21:25:58.745232' AS TIMESTAMP);

SELECT CAST('2020-12-31 21:25:58.745232+00' AS TIMESTAMP);

SELECT CAST('2020-12-31 21:25:58.745232+0000' AS TIMESTAMP);

SELECT CAST('2020-12-31 21:25:58.745232+02' AS TIMESTAMP);

SELECT CAST('2020-12-31 21:25:58.745232-02' AS TIMESTAMP);

SELECT CAST('2020-12-31 21:25:58.745232+0215' AS TIMESTAMP);

SELECT CAST('2020-12-31 21:25:58.745232+02:15' AS TIMESTAMP);

SELECT CAST('2020-12-31 21:25:58.745232-0215' AS TIMESTAMP);

SELECT CAST('2020-12-31 21:25:58+02:15' AS TIMESTAMP);

PRAGMA enable_verification;

CREATE TABLE hugeints (g INT, h UINT128);

INSERT INTO hugeints VALUES (1, 42), (2, 1267650600228229401496703205376), (2, 0), (1, '8');

SELECT MIN(h), MAX(h), SUM(h), FIRST(h), LAST(h) FROM hugeints;

SELECT g, MIN(h), MAX(h), SUM(h), FIRST(h), LAST(h) FROM hugeints GROUP BY g ORDER BY 1;

PRAGMA threads = 1;

SELECT FIRST(h), LAST(h) FROM hugeints;

SELECT g, FIRST(h), LAST(h) FROM hugeints GROUP BY g ORDER BY 1;

PRAGMA enable_verification;

SELECT ~(-CAST(50 AS UINT128)), -(-(CAST(50 AS UINT128)));

SELECT -(CAST(0 AS UINT128));

SELECT CAST(42 AS UINT128) + CAST(42 AS UINT128);

SELECT CAST('100000000000000000000' AS UINT128) + CAST('100000000000000000000' AS UINT128);

SELECT CAST('340282366920938463463374607431768211455' AS UINT128) + CAST('340282366920938463463374607431768211455' AS UINT128);

SELECT CAST('340282366920938463463374607431768211455' AS UINT128) + CAST('10' AS UINT128);

SELECT CAST('340282366920938463463374607431768211455' AS UINT128) - CAST(10 AS UINT128) + CAST(10 AS UINT128);

SELECT CAST('340282366920938463463374607431768211455' AS UINT128) - CAST(10 AS UINT128) + CAST(11 AS UINT128);

SELECT CAST(100 AS UINT128) - CAST(42 AS UINT128), CAST(3 AS UINT128) - CAST(2 AS UINT128);

SELECT CAST('0' AS UINT128) - CAST('1' AS UINT128);

SELECT CAST(100 AS UINT128) * CAST(50 AS UINT128);

SELECT CAST('1701411834604692317' AS UINT128) * CAST('2' AS UINT128), CAST('100000000000000000000' AS UINT128) * CAST('1000000000000000000' AS UINT128);

SELECT CAST('340282366920938463463374607431768211455' AS UINT128) * CAST(1 AS UINT128);

SELECT CAST('340282366920938463463374607431768211455' AS UINT128) * CAST(2 AS UINT128);

SELECT CAST('34028236692093846346' AS UINT128) * CAST('33746074317682114556' AS UINT128);

SELECT CAST(100 AS UINT128) // CAST(20 AS UINT128), CAST(90 AS UINT128) // CAST(20 AS UINT128);

SELECT CAST(100 AS UINT128) // CAST(0 AS UINT128);

SELECT CAST('100000000000000000000000000000000000000' AS UINT128) // CAST('10000000000000' AS UINT128), CAST('100000000000000000000000000000000000000' AS UINT128) // CAST('2' AS UINT128);

SELECT CAST(100 AS UINT128) % CAST(20 AS UINT128), CAST(90 AS UINT128) % CAST(20 AS UINT128);

SELECT CAST(100 AS UINT128) % CAST(0 AS UINT128);

SELECT CAST('100000000000000000000000000000000000000' AS UINT128) % CAST('6587689457689375689735' AS UINT128), CAST('100000000000000000000000000000000000000' AS UINT128) % CAST('3' AS UINT128);

SELECT ABS(CAST('100' AS UINT128));

SELECT CAST('340282366920938463463374607431768211454' AS UINT128) + 1;

SELECT CAST('340282366920938463463374607431768211455' AS UINT128) - 1;

SELECT 1 + CAST('340282366920938463463374607431768211454' AS UINT128);

SELECT CAST(1 AS UINT128) + CAST('340282366920938463463374607431768211455' AS UINT128);

SELECT 1 - CAST(1 AS UINT128);

SELECT CAST(0 AS UINT128) - CAST(1 AS UINT128);

SELECT CAST('340282366920938463463374607431768211455' AS UINT128) - 1;

SELECT CAST('340282366920938463463374607431768211455' AS UINT128) // 1;

SELECT CAST('340282366920938463463374607431768211455' AS UINT128) // CAST('340282366920938463463374607431768211455' AS UINT128);

SELECT CAST('5' AS UINT128) <> CAST('5' AS UINT128), CAST('5' AS UINT128) <> CAST('18446744073709551621' AS UINT128);

PRAGMA enable_verification;

SELECT CAST(10000000000000000000 AS UINT128) + CAST(100 AS TINYINT), CAST(10000000000000000000 AS UINT128) + CAST(100 AS SMALLINT), CAST(10000000000000000000 AS UINT128) + CAST(100 AS INT), CAST(10000000000000000000 AS UINT128) + CAST(100 AS BIGINT);

SELECT CAST(100 AS UINT128) + 0.5;

SELECT COS(CAST(100 AS UINT128));

SELECT CONCAT('hello number ', CAST(100 AS UINT128));

SELECT CAST('7' AS UINT128), CAST('130' AS UINT128), CAST('924829852' AS UINT128);

SELECT CAST('0' AS UINT128), CAST('-0' AS UINT128);

SELECT CAST('10000000000000000000000000000' AS UINT128);

SELECT CAST('1267650600228229401496703205376' AS UINT128), CAST('340282366920938463463374607431768211455' AS UINT128);

SELECT CAST('-1267650600228229401496703205376' AS UINT128), CAST('-17014118346046923173168730371588410572' AS UINT128);

SELECT CAST('340282366920938463463374607431768211456' AS UINT128);

SELECT CAST('-1' AS UINT128);

SELECT CAST('340282366920938463463374607431768211455' AS UINT128), CAST('0' AS UINT128);

SELECT CAST('340282366920938463463374607431768211456' AS UINT128);

SELECT CAST('-1' AS UINT128);

SELECT CAST(CAST(42 AS TINYINT) AS UINT128), CAST(CAST(42 AS SMALLINT) AS UINT128), CAST(CAST(42 AS INT) AS UINT128), CAST(CAST(42 AS BIGINT) AS UINT128), CAST(CAST(42 AS REAL) AS UINT128), CAST(CAST(42 AS DOUBLE) AS UINT128);

SELECT CAST(CAST((-42) AS TINYINT) AS UINT128), CAST(CAST((-42) AS SMALLINT) AS UINT128), CAST(CAST((-42) AS INT) AS UINT128), CAST(CAST((-42) AS BIGINT) AS UINT128), CAST(CAST((-42) AS REAL) AS UINT128), CAST(CAST((-42) AS DOUBLE) AS UINT128);

SELECT CAST(CAST(42 AS UINT128) AS TINYINT), CAST(CAST(42 AS UINT128) AS SMALLINT), CAST(CAST(42 AS UINT128) AS INT), CAST(CAST(42 AS UINT128) AS BIGINT), CAST(CAST(42 AS UINT128) AS REAL), CAST(CAST(42 AS UINT128) AS DOUBLE);

SELECT CAST(CAST(1000 AS UINT128) AS TINYINT);

SELECT CAST(CAST(128 AS UINT128) AS TINYINT);

SELECT CAST(CAST(127 AS UINT128) AS TINYINT);

SELECT CAST(CAST(100000 AS UINT128) AS SMALLINT);

SELECT CAST(CAST(32768 AS UINT128) AS SMALLINT);

SELECT CAST(CAST(32767 AS UINT128) AS SMALLINT);

SELECT CAST(CAST(100000000000 AS UINT128) AS INT);

SELECT CAST(CAST(2147483648 AS UINT128) AS INT);

SELECT CAST(CAST(2147483647 AS UINT128) AS INT);

SELECT CAST(CAST(10000000000000000000 AS UINT128) AS BIGINT);

SELECT CAST(CAST('9223372036854775808' AS UINT128) AS BIGINT);

SELECT CAST(CAST(9223372036854775807 AS UINT128) AS BIGINT);

SELECT CAST(CAST(1e100 AS REAL) AS UINT128);

SELECT CAST(CAST(1e100 AS DOUBLE) AS UINT128);

SELECT TYPEOF(10), TYPEOF(10000000000), TYPEOF(170141183460469231731687303715884105727), TYPEOF(170141183460469231731687303715884105728), TYPEOF(170141183460469231731687303715884105728000);

SELECT 1e30, 1e100, 1e-1;

SELECT TYPEOF(1e30), TYPEOF(1e100), TYPEOF(1e-1);

PRAGMA enable_verification;

SELECT CAST('170141183460469231731687303715884105700e0' AS UINT128);

SELECT CAST('340282366920938463463374607431768211455e0' AS UINT128);

SELECT CAST(5.4321e4 AS UINT128);

SELECT CAST((0.00000000000000000000002e+44) AS UINT128);

SELECT CAST('340282366920938463463374607431768211456e0' AS UINT128);

SELECT CAST('3.4e39' AS UINT128);

SELECT CAST('3.4e38' AS UINT128);

SELECT CAST('3.5e38' AS UINT128);

PRAGMA enable_verification;

SELECT ABS(CAST(1 AS UINT128)), ABS(CAST('1329227995784915872903807060280344576' AS UINT128)), ABS(CAST(0 AS UINT128));

SELECT SIGN(CAST(1 AS UINT128)), SIGN(CAST(0 AS UINT128));

SELECT ROUND(CAST(1 AS UINT128), 0), ROUND(CAST('1329227995784915872903807060280344576' AS UINT128), 0), ROUND(CAST(0 AS UINT128), 0);

SELECT FLOOR(CAST(1 AS UINT128)), FLOOR(CAST('1329227995784915872903807060280344576' AS UINT128)), FLOOR(CAST(0 AS UINT128));

SELECT CEIL(CAST(1 AS UINT128)), CEIL(CAST('1329227995784915872903807060280344576' AS UINT128)), CEIL(CAST(0 AS UINT128));

SELECT LEAST(CAST(1 AS UINT128), CAST('1329227995784915872903807060280344576' AS UINT128), CAST(0 AS UINT128));

SELECT GREATEST(CAST(1 AS UINT128), CAST('1329227995784915872903807060280344576' AS UINT128), CAST(0 AS UINT128));

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

SELECT CAST(NULL AS UINT128);

CREATE TABLE hugeints (id INT, h UINT128);

INSERT INTO hugeints VALUES (1, NULL), (1, 1), (1, 2);

SELECT id, FIRST(h), LAST(h) FROM hugeints WHERE h IS NULL GROUP BY id;

SELECT h, SUM(id) FROM hugeints GROUP BY h ORDER BY 1;

SELECT id, h1.h, h2.h FROM hugeints AS h1 JOIN hugeints AS h2 USING (id) WHERE h1.h IS NULL AND h2.h IS NULL;

SELECT (SELECT h1.h) FROM hugeints AS h1 ORDER BY 1;

SELECT NOT h1.h IN (SELECT h1.h + h2.h FROM hugeints AS h2) FROM hugeints AS h1 ORDER BY 1;

PRAGMA enable_verification;

CREATE TABLE uhugeints (h UINT128);

INSERT INTO uhugeints VALUES (CAST(42 AS UINT128)), (CAST('1267650600228229401496703205376' AS UINT128));

SELECT CAST(h AS UINTEGER) FROM uhugeints WHERE h < CAST(100 AS UINTEGER);

SELECT COUNT(*) FROM uhugeints WHERE h = CAST(42 AS UINT128);

SELECT COUNT(*) FROM uhugeints WHERE h <> CAST('1267650600228229401496703205376' AS UINT128);

SELECT COUNT(*) FROM uhugeints WHERE h < CAST('1267650600228229401496703205376' AS UINT128);

SELECT COUNT(*) FROM uhugeints WHERE h <= CAST('1267650600228229401496703205376' AS UINT128);

SELECT COUNT(*) FROM uhugeints WHERE h > CAST('1267650600228229401496703205375' AS UINT128);

SELECT COUNT(*) FROM uhugeints WHERE h >= CAST(42 AS UINT128);

CREATE TABLE uhugeints2 (h UINT128);
INSERT INTO uhugeints2 VALUES (CAST(42 AS UINT128));

SELECT * FROM uhugeints JOIN uhugeints2 USING (h);

SELECT * FROM uhugeints AS t1 JOIN uhugeints2 AS t2 ON t1.h <> t2.h;

SELECT * FROM uhugeints AS t1 JOIN uhugeints2 AS t2 ON t1.h >= t2.h ORDER BY 1 LIMIT 2;

SELECT 340282366920938463463374607431768211455;

SELECT TYPEOF(340282366920938463463374607431768211455);

SELECT 340282366920938463463374607431768211456;

SELECT TYPEOF(340282366920938463463374607431768211456);

SELECT CAST(251658240 AS UINT128) * CAST(251658240 AS UINT128);

SELECT CAST(251658240 AS UINT128) * CAST(1080863910568919040 AS UINT128);

SELECT CAST(251658240 AS UINT128) * CAST(4642275147320176030871715840 AS UINT128);

SELECT CAST(251658240 AS UINT128) * CAST(19938419936773738093557105904205168640 AS UINT128);

SELECT CAST(1080863910568919040 AS UINT128) * CAST(251658240 AS UINT128);

SELECT CAST(1080863910568919040 AS UINT128) * CAST(1080863910568919040 AS UINT128);

SELECT CAST(1080863910568919040 AS UINT128) * CAST(4642275147320176030871715840 AS UINT128);

SELECT CAST(1080863910568919040 AS UINT128) * CAST(19938419936773738093557105904205168640 AS UINT128);

SELECT CAST(4642275147320176030871715840 AS UINT128) * CAST(251658240 AS UINT128);

SELECT CAST(4642275147320176030871715840 AS UINT128) * CAST(1080863910568919040 AS UINT128);

SELECT CAST(4642275147320176030871715840 AS UINT128) * CAST(4642275147320176030871715840 AS UINT128);

SELECT CAST(4642275147320176030871715840 AS UINT128) * CAST(19938419936773738093557105904205168640 AS UINT128);

SELECT CAST(19938419936773738093557105904205168640 AS UINT128) * CAST(251658240 AS UINT128);

SELECT CAST(19938419936773738093557105904205168640 AS UINT128) * CAST(1080863910568919040 AS UINT128);

SELECT CAST(19938419936773738093557105904205168640 AS UINT128) * CAST(4642275147320176030871715840 AS UINT128);

SELECT CAST(19938419936773738093557105904205168640 AS UINT128) * CAST(19938419936773738093557105904205168640 AS UINT128);

SELECT CAST(170141183460469231731687303715884105727 AS UINT128) * CAST(2 AS UINT128);

SELECT CAST(170141183460469231731687303715884105728 AS UINT128) * CAST(2 AS UINT128);

SELECT CAST(19807040628566084398385987583 AS UINT128) * CAST(8589934592 AS UINT128);

SELECT CAST(19807040628566084398385987584 AS UINT128) * CAST(85899345928 AS UINT128);

SELECT CAST(36893488147419103231 AS UINT128) * CAST(4611686018427387904 AS UINT128);

SELECT CAST(368934881474191032324 AS UINT128) * CAST(4611686018427387904 AS UINT128);

SELECT CAST(2 AS UINT128) * CAST(170141183460469231731687303715884105727 AS UINT128);

SELECT CAST(2 AS UINT128) * CAST(170141183460469231731687303715884105728 AS UINT128);

SELECT CAST(8589934592 AS UINT128) * CAST(19807040628566084398385987583 AS UINT128);

SELECT CAST(85899345923 AS UINT128) * CAST(19807040628566084398385987584 AS UINT128);

SELECT CAST(4611686018427387904 AS UINT128) * CAST(36893488147419103231 AS UINT128);

SELECT CAST(4611686018427387904 AS UINT128) * CAST(368934881474191032323 AS UINT128);

SELECT CAST(10376293541461622783 AS UINT128) * CAST(10376293541461622783 AS UINT128);

SELECT CAST(10376293541461622783 AS UINT128) * CAST(10376293541461622783 AS UINT128);

SELECT CAST(172938225691027046399 AS UINT128) * CAST(10376293541461622783 AS UINT128);

PRAGMA enable_verification;

SELECT CAST('340282366920938463463374607431768211456' AS UINT128);

SELECT CAST(CAST('340282366920938463463374607431768211456' AS DOUBLE) AS UINT128);

SELECT CAST('-1' AS UINT128);

SELECT TRY_CAST('340282366920938463463374607431768211456' AS UINT128);

SELECT TRY_CAST(CAST('340282366920938463463374607431768211456' AS DOUBLE) AS UINT128);

SELECT TRY_CAST('-1' AS UINT128);

BEGIN;

CREATE TABLE union_tbl (col UNION(a JSON, b INT, c TINYINT));

INSERT INTO union_tbl VALUES ({'tag': CAST(0 AS UINT8), 'a': '{"a": "hello", "b": true}', 'b': CAST(NULL AS INT), 'c': CAST(NULL AS TINYINT)});

INSERT INTO union_tbl VALUES ({'tag': CAST(0 AS UINT8), 'a': CAST('{"c": "world"}' AS JSON), 'b': CAST(NULL AS INT), 'c': CAST(NULL AS TINYINT)});

SELECT * FROM union_tbl;

SELECT * FROM union_tbl;

ROLLBACK;

ROLLBACK;

SELECT * FROM union_tbl;

CREATE TABLE union_tbl (col UNION(a BOOLEAN, b INT, c TINYINT));

INSERT INTO union_tbl VALUES ({'tag': '0', 'a': TRUE, 'b': NULL, 'c': NULL});

INSERT INTO union_tbl VALUES ({'tag': CAST(0 AS UINT8), 'a': TRUE, 'b': CAST(NULL AS INT), 'd': CAST(NULL AS TINYINT)});

INSERT INTO union_tbl VALUES ({'tag': CAST(0 AS UINT8), 'a': 1, 'b': CAST(NULL AS INT), 'c': CAST(NULL AS TINYINT)});

INSERT INTO union_tbl VALUES ({'tag': CAST(4 AS UINT8), 'a': TRUE, 'b': CAST(NULL AS INT), 'c': CAST(NULL AS TINYINT)});

CREATE TABLE struct_tbl (col STRUCT(tag UINT8, A BOOLEAN, B INT, C TINYINT));

INSERT INTO struct_tbl VALUES (ROW(0, TRUE, NULL, NULL)), (ROW(1, NULL, 23423, NULL)), (ROW(0, TRUE, NULL, NULL));

INSERT INTO union_tbl SELECT * FROM struct_tbl;

DELETE FROM struct_tbl;

INSERT INTO struct_tbl VALUES (ROW(0, TRUE, NULL, NULL)), (ROW(1, NULL, 23423, NULL)), (ROW(2, TRUE, NULL, NULL));

INSERT INTO union_tbl SELECT * FROM struct_tbl;

INSERT INTO union_tbl VALUES ({'tag': CAST(0 AS UINT8), 'a': FALSE, 'b': CAST(NULL AS INT), 'c': CAST(NULL AS TINYINT)});

INSERT INTO union_tbl VALUES ({'tag': CAST(1 AS UINT8), 'a': CAST(NULL AS BOOLEAN), 'b': 32412, 'c': CAST(123 AS TINYINT)});

DELETE FROM struct_tbl;

INSERT INTO struct_tbl VALUES (ROW(CAST(1 AS UINT8), NULL, 1, NULL)), (ROW(CAST(1 AS UINT8), NULL, 2, NULL)), (ROW(CAST(1 AS UINT8), NULL, 3, 0));

INSERT INTO union_tbl SELECT * FROM struct_tbl;

CREATE TABLE tbl1 (u UNION(num INT, str TEXT));

INSERT INTO tbl1 VALUES (1), ('bar'), (3), ('foo'), (2), ('baz');

SELECT FIRST(u), LAST(u) FROM tbl1;

SELECT UNION_TAG(u), MAX(u) FROM tbl1 GROUP BY UNION_TAG(u);

SELECT UNION_TAG(u), MIN(u) FROM tbl1 GROUP BY UNION_TAG(u);

SELECT SUM(u.num) FROM tbl1;

SELECT LAST(u) FROM tbl1 GROUP BY UNION_TAG(u) HAVING UNION_TAG(u) = 'num';

SELECT MAX(u), MIN(u) FROM tbl1;

CREATE TABLE tbl (a UNION(b INT, b INT));

CREATE TABLE tbl (a UNION(b INT, B INT));

CREATE TABLE tbl (a UNION(b INT, c INT));

INSERT INTO tbl VALUES (1), (2), (3);

INSERT INTO tbl VALUES (UNION_VALUE(b := 1)), (UNION_VALUE(c := 2)), (UNION_VALUE(b := 3));

INSERT INTO tbl VALUES (UNION_VALUE(b := 3)), (UNION_VALUE(a := 4)), (UNION_VALUE(b := 5));

SELECT a.b FROM tbl;

SELECT a.c FROM tbl;

SELECT a FROM tbl;

CREATE TABLE tbl2 (a UNION(b STRUCT(foo TEXT), c STRUCT(foo TEXT)));

INSERT INTO tbl2 VALUES ({'foo': 'bar'}), ({'foo': 'baz'});

INSERT INTO tbl2 VALUES (UNION_VALUE(b := {'foo': 'bar'})), (UNION_VALUE(c := {'foo': 'baz'})), (UNION_VALUE(d := {'foo': 'qux'}));

INSERT INTO tbl2 VALUES (UNION_VALUE(b := {'foo': 'bar'})), (UNION_VALUE(c := {'foo': 'baz'}));

SELECT a.b.foo FROM tbl2;

SELECT a.c.foo FROM tbl2;

SELECT a FROM tbl2;

CREATE TABLE tbl3 (a UNION(b INT, c STRUCT(b INT)));

INSERT INTO tbl3 VALUES (1), (UNION_VALUE(b := 2)), (UNION_VALUE(c := {'b': 3}));

SELECT a FROM tbl3;

SELECT UNION_EXTRACT(1, 'b');

SELECT UNION_EXTRACT(CAST(1 AS UNION(a INT, b REAL)), 'a');

CREATE TABLE tbl1 (u UNION(a INT, b REAL, c TEXT));

INSERT INTO tbl1 VALUES (1), ('text'), (2.0);

SELECT u.a FROM tbl1 WHERE NOT u.a IS NULL;

SELECT u.a FROM tbl1;

SELECT u.b FROM tbl1 WHERE NOT u.b IS NULL;

SELECT u.b FROM tbl1;

SELECT u.c FROM tbl1 WHERE NOT u.c IS NULL;

SELECT u.c FROM tbl1;

SELECT u.a, u.b, u.c FROM tbl1;

SELECT UNION_EXTRACT(u, 'a') FROM tbl1 WHERE NOT UNION_EXTRACT(u, 'a') IS NULL;

SELECT UNION_EXTRACT(u, 'a') FROM tbl1;

SELECT UNION_EXTRACT(u, 'b') FROM tbl1 WHERE NOT UNION_EXTRACT(u, 'b') IS NULL;

SELECT UNION_EXTRACT(u, 'b') FROM tbl1;

SELECT UNION_EXTRACT(u, 'c') FROM tbl1 WHERE NOT UNION_EXTRACT(u, 'c') IS NULL;

SELECT UNION_EXTRACT(u, 'c') FROM tbl1;

SELECT UNION_EXTRACT(u, 'a'), UNION_EXTRACT(u, 'c'), UNION_EXTRACT(u, 'b') FROM tbl1;

PREPARE p1 AS SELECT union_extract(u, ?) FROM tbl1;

EXECUTE p1('a');

EXECUTE p1('b');

EXECUTE p1('c');

PRAGMA enable_verification;

SET default_null_order = 'nulls_first';

CREATE TABLE tbl1 (id INT, a UNION(b INT, c TEXT));

CREATE TABLE tbl2 (id INT, d UNION(e INT, f TEXT));

INSERT INTO tbl1 VALUES (1, 1), (3, 'foo'), (2, 2), (4, 'bar');

INSERT INTO tbl2 VALUES (1, 'foo'), (2, 'bar'), (3, 1), (4, 2);

SELECT id, UNION_TAG(a), a.b, a.c FROM tbl1 UNION SELECT id, UNION_TAG(d), d.e, d.f FROM tbl2 ORDER BY ALL;

SELECT id, UNION_TAG(a) AS tag, a.b AS v1, a.c AS v2 FROM tbl1 UNION SELECT id, UNION_TAG(d) AS tag, d.e AS v1, d.f AS v2 FROM tbl2 ORDER BY ALL;

SELECT tbl1.a.c, tbl1.id, tbl2.id FROM tbl2 JOIN tbl1 ON tbl1.a.c = tbl2.d.f ORDER BY ALL;

SELECT t1.id FROM tbl1 AS t1 JOIN tbl1 AS t2 ON t1.a = t2.a ORDER BY ALL;

DROP TABLE tbl1;
DROP TABLE tbl2;
CREATE TABLE tbl1 (id INT, a UNION(num INT, str TEXT));
CREATE TABLE tbl2 (id INT, b UNION(num INT, str TEXT));
INSERT INTO tbl1 VALUES (1, 1), (3, 'foo'), (2, 2), (4, 'bar'), (5, 1), (4, NULL);
INSERT INTO tbl2 VALUES (1, 'foo'), (2, 'bar'), (3, 1), (4, 2), (5, 'qux');

SELECT tbl1.a, tbl1.id, tbl2.id FROM tbl2 INNER JOIN tbl1 ON tbl1.a = tbl2.b ORDER BY ALL;

SELECT tbl1.a, tbl1.id, tbl2.id FROM tbl2 FULL OUTER JOIN tbl1 ON tbl1.a = tbl2.b ORDER BY ALL;

SELECT tbl1.a, tbl1.id, tbl2.id FROM tbl2 LEFT OUTER JOIN tbl1 ON tbl1.a = tbl2.b ORDER BY ALL;

SELECT tbl1.a, tbl1.id, tbl2.id FROM tbl2 RIGHT OUTER JOIN tbl1 ON tbl1.a = tbl2.b ORDER BY ALL;

SELECT id FROM tbl1 WHERE a = UNION_VALUE(str := 'foo');

SELECT id FROM tbl1 WHERE a = CAST('foo' AS UNION(num INT, str TEXT));

SELECT UNION_TAG(CAST('foo' AS UNION(num INT, str TEXT)));

CREATE TABLE tbl1 (u UNION(a1 INT, a2 INT, a3 INT, a4 INT, a5 INT, a6 INT, a7 INT, a8 INT, a9 INT, a10 INT, a11 INT, a12 INT, a13 INT, a14 INT, a15 INT, a16 INT, a17 INT, a18 INT, a19 INT, a20 INT, a21 INT, a22 INT, a23 INT, a24 INT, a25 INT, a26 INT, a27 INT, a28 INT, a29 INT, a30 INT, a31 INT, a32 INT, a33 INT, a34 INT, a35 INT, a36 INT, a37 INT, a38 INT, a39 INT, a40 INT, a41 INT, a42 INT, a43 INT, a44 INT, a45 INT, a46 INT, a47 INT, a48 INT, a49 INT, a50 INT, a51 INT, a52 INT, a53 INT, a54 INT, a55 INT, a56 INT, a57 INT, a58 INT, a59 INT, a60 INT, a61 INT, a62 INT, a63 INT, a64 INT, a65 INT, a66 INT, a67 INT, a68 INT, a69 INT, a70 INT, a71 INT, a72 INT, a73 INT, a74 INT, a75 INT, a76 INT, a77 INT, a78 INT, a79 INT, a80 INT, a81 INT, a82 INT, a83 INT, a84 INT, a85 INT, a86 INT, a87 INT, a88 INT, a89 INT, a90 INT, a91 INT, a92 INT, a93 INT, a94 INT, a95 INT, a96 INT, a97 INT, a98 INT, a99 INT, a100 INT, a101 INT, a102 INT, a103 INT, a104 INT, a105 INT, a106 INT, a107 INT, a108 INT, a109 INT, a110 INT, a111 INT, a112 INT, a113 INT, a114 INT, a115 INT, a116 INT, a117 INT, a118 INT, a119 INT, a120 INT, a121 INT, a122 INT, a123 INT, a124 INT, a125 INT, a126 INT, a127 INT, a128 INT, a129 INT, a130 INT, a131 INT, a132 INT, a133 INT, a134 INT, a135 INT, a136 INT, a137 INT, a138 INT, a139 INT, a140 INT, a141 INT, a142 INT, a143 INT, a144 INT, a145 INT, a146 INT, a147 INT, a148 INT, a149 INT, a150 INT, a151 INT, a152 INT, a153 INT, a154 INT, a155 INT, a156 INT, a157 INT, a158 INT, a159 INT, a160 INT, a161 INT, a162 INT, a163 INT, a164 INT, a165 INT, a166 INT, a167 INT, a168 INT, a169 INT, a170 INT, a171 INT, a172 INT, a173 INT, a174 INT, a175 INT, a176 INT, a177 INT, a178 INT, a179 INT, a180 INT, a181 INT, a182 INT, a183 INT, a184 INT, a185 INT, a186 INT, a187 INT, a188 INT, a189 INT, a190 INT, a191 INT, a192 INT, a193 INT, a194 INT, a195 INT, a196 INT, a197 INT, a198 INT, a199 INT, a200 INT, a201 INT, a202 INT, a203 INT, a204 INT, a205 INT, a206 INT, a207 INT, a208 INT, a209 INT, a210 INT, a211 INT, a212 INT, a213 INT, a214 INT, a215 INT, a216 INT, a217 INT, a218 INT, a219 INT, a220 INT, a221 INT, a222 INT, a223 INT, a224 INT, a225 INT, a226 INT, a227 INT, a228 INT, a229 INT, a230 INT, a231 INT, a232 INT, a233 INT, a234 INT, a235 INT, a236 INT, a237 INT, a238 INT, a239 INT, a240 INT, a241 INT, a242 INT, a243 INT, a244 INT, a245 INT, a246 INT, a247 INT, a248 INT, a249 INT, a250 INT, a251 INT, a252 INT, a253 INT, a254 INT, a255 INT, a256 INT));

INSERT INTO tbl1 VALUES (UNION_VALUE(a256 := 1337)), (UNION_VALUE(a1 := 42));

SELECT u.a256 FROM tbl1;

SELECT u.a1 FROM tbl1;

CREATE TABLE tbl1 (u UNION(a1 INT, a2 INT, a3 INT, a4 INT, a5 INT, a6 INT, a7 INT, a8 INT, a9 INT, a10 INT, a11 INT, a12 INT, a13 INT, a14 INT, a15 INT, a16 INT, a17 INT, a18 INT, a19 INT, a20 INT, a21 INT, a22 INT, a23 INT, a24 INT, a25 INT, a26 INT, a27 INT, a28 INT, a29 INT, a30 INT, a31 INT, a32 INT, a33 INT, a34 INT, a35 INT, a36 INT, a37 INT, a38 INT, a39 INT, a40 INT, a41 INT, a42 INT, a43 INT, a44 INT, a45 INT, a46 INT, a47 INT, a48 INT, a49 INT, a50 INT, a51 INT, a52 INT, a53 INT, a54 INT, a55 INT, a56 INT, a57 INT, a58 INT, a59 INT, a60 INT, a61 INT, a62 INT, a63 INT, a64 INT, a65 INT, a66 INT, a67 INT, a68 INT, a69 INT, a70 INT, a71 INT, a72 INT, a73 INT, a74 INT, a75 INT, a76 INT, a77 INT, a78 INT, a79 INT, a80 INT, a81 INT, a82 INT, a83 INT, a84 INT, a85 INT, a86 INT, a87 INT, a88 INT, a89 INT, a90 INT, a91 INT, a92 INT, a93 INT, a94 INT, a95 INT, a96 INT, a97 INT, a98 INT, a99 INT, a100 INT, a101 INT, a102 INT, a103 INT, a104 INT, a105 INT, a106 INT, a107 INT, a108 INT, a109 INT, a110 INT, a111 INT, a112 INT, a113 INT, a114 INT, a115 INT, a116 INT, a117 INT, a118 INT, a119 INT, a120 INT, a121 INT, a122 INT, a123 INT, a124 INT, a125 INT, a126 INT, a127 INT, a128 INT, a129 INT, a130 INT, a131 INT, a132 INT, a133 INT, a134 INT, a135 INT, a136 INT, a137 INT, a138 INT, a139 INT, a140 INT, a141 INT, a142 INT, a143 INT, a144 INT, a145 INT, a146 INT, a147 INT, a148 INT, a149 INT, a150 INT, a151 INT, a152 INT, a153 INT, a154 INT, a155 INT, a156 INT, a157 INT, a158 INT, a159 INT, a160 INT, a161 INT, a162 INT, a163 INT, a164 INT, a165 INT, a166 INT, a167 INT, a168 INT, a169 INT, a170 INT, a171 INT, a172 INT, a173 INT, a174 INT, a175 INT, a176 INT, a177 INT, a178 INT, a179 INT, a180 INT, a181 INT, a182 INT, a183 INT, a184 INT, a185 INT, a186 INT, a187 INT, a188 INT, a189 INT, a190 INT, a191 INT, a192 INT, a193 INT, a194 INT, a195 INT, a196 INT, a197 INT, a198 INT, a199 INT, a200 INT, a201 INT, a202 INT, a203 INT, a204 INT, a205 INT, a206 INT, a207 INT, a208 INT, a209 INT, a210 INT, a211 INT, a212 INT, a213 INT, a214 INT, a215 INT, a216 INT, a217 INT, a218 INT, a219 INT, a220 INT, a221 INT, a222 INT, a223 INT, a224 INT, a225 INT, a226 INT, a227 INT, a228 INT, a229 INT, a230 INT, a231 INT, a232 INT, a233 INT, a234 INT, a235 INT, a236 INT, a237 INT, a238 INT, a239 INT, a240 INT, a241 INT, a242 INT, a243 INT, a244 INT, a245 INT, a246 INT, a247 INT, a248 INT, a249 INT, a250 INT, a251 INT, a252 INT, a253 INT, a254 INT, a255 INT, a256 INT, a257));

CREATE TABLE tbl1 (u UNION(a1 INT, a2 INT, a3 INT, a4 INT, a5 INT, a6 INT, a7 INT, a8 INT, a9 INT, a10 INT, a11 INT, a12 INT, a13 INT, a14 INT, a15 INT, a16 INT, a17 INT, a18 INT, a19 INT, a20 INT, a21 INT, a22 INT, a23 INT, a24 INT, a25 INT, a26 INT, a27 INT, a28 INT, a29 INT, a30 INT, a31 INT, a32 INT, a33 INT, a34 INT, a35 INT, a36 INT, a37 INT, a38 INT, a39 INT, a40 INT, a41 INT, a42 INT, a43 INT, a44 INT, a45 INT, a46 INT, a47 INT, a48 INT, a49 INT, a50 INT, a51 INT, a52 INT, a53 INT, a54 INT, a55 INT, a56 INT, a57 INT, a58 INT, a59 INT, a60 INT, a61 INT, a62 INT, a63 INT, a64 INT, a65 INT, a66 INT, a67 INT, a68 INT, a69 INT, a70 INT, a71 INT, a72 INT, a73 INT, a74 INT, a75 INT, a76 INT, a77 INT, a78 INT, a79 INT, a80 INT, a81 INT, a82 INT, a83 INT, a84 INT, a85 INT, a86 INT, a87 INT, a88 INT, a89 INT, a90 INT, a91 INT, a92 INT, a93 INT, a94 INT, a95 INT, a96 INT, a97 INT, a98 INT, a99 INT, a100 INT, a101 INT, a102 INT, a103 INT, a104 INT, a105 INT, a106 INT, a107 INT, a108 INT, a109 INT, a110 INT, a111 INT, a112 INT, a113 INT, a114 INT, a115 INT, a116 INT, a117 INT, a118 INT, a119 INT, a120 INT, a121 INT, a122 INT, a123 INT, a124 INT, a125 INT, a126 INT, a127 INT, a128 INT, a129 INT, a130 INT, a131 INT, a132 INT, a133 INT, a134 INT, a135 INT, a136 INT, a137 INT, a138 INT, a139 INT, a140 INT, a141 INT, a142 INT, a143 INT, a144 INT, a145 INT, a146 INT, a147 INT, a148 INT, a149 INT, a150 INT, a151 INT, a152 INT, a153 INT, a154 INT, a155 INT, a156 INT, a157 INT, a158 INT, a159 INT, a160 INT, a161 INT, a162 INT, a163 INT, a164 INT, a165 INT, a166 INT, a167 INT, a168 INT, a169 INT, a170 INT, a171 INT, a172 INT, a173 INT, a174 INT, a175 INT, a176 INT, a177 INT, a178 INT, a179 INT, a180 INT, a181 INT, a182 INT, a183 INT, a184 INT, a185 INT, a186 INT, a187 INT, a188 INT, a189 INT, a190 INT, a191 INT, a192 INT, a193 INT, a194 INT, a195 INT, a196 INT, a197 INT, a198 INT, a199 INT, a200 INT, a201 INT, a202 INT, a203 INT, a204 INT, a205 INT, a206 INT, a207 INT, a208 INT, a209 INT, a210 INT, a211 INT, a212 INT, a213 INT, a214 INT, a215 INT, a216 INT, a217 INT, a218 INT, a219 INT, a220 INT, a221 INT, a222 INT, a223 INT, a224 INT, a225 INT, a226 INT, a227 INT, a228 INT, a229 INT, a230 INT, a231 INT, a232 INT, a233 INT, a234 INT, a235 INT, a236 INT, a237 INT, a238 INT, a239 INT, a240 INT, a241 INT, a242 INT, a243 INT, a244 INT, a245 INT, a246 INT, a247 INT, a248 INT, a249 INT, a250 INT, a251 INT, a252 INT, a253 INT, a254 INT, a255 INT, a256 INT, a257));

PRAGMA enable_verification;

CREATE TABLE tbl1 (u UNION(num INT, str TEXT));

INSERT INTO tbl1 VALUES (1), ('bar'), (2), ('foo'), (3), ('baz');

SELECT * FROM tbl1 LIMIT 1;

SELECT * FROM tbl1 OFFSET 1;

SELECT * FROM tbl1 LIMIT 1 OFFSET 1;

SELECT * FROM tbl1 WHERE NOT u.str IS NULL OFFSET 1;

SELECT * FROM tbl1 WHERE NOT u.str IS NULL LIMIT 1 OFFSET 1;

CREATE TABLE tbl1 (union_list UNION(str TEXT, num INT)[]);

INSERT INTO tbl1 VALUES ([CAST(1 AS UNION(str TEXT, num INT)), 'one']), ([CAST('two' AS UNION(str TEXT, num INT)), 2]), ([CAST(3 AS UNION(str TEXT, num INT)), 'three', '3']), ([4]), (['five']), ([6]);

SELECT * FROM tbl1;

CREATE TABLE tbl2 (union_with_list UNION(list INT[], num INT));

INSERT INTO tbl2 VALUES ([1, 2, 3]), (4), ([5]), (6), (NULL), (7), ([8, 9, 10]);

SELECT * FROM tbl2;

SELECT * FROM tbl2 WHERE union_with_list = [5];

SELECT union_with_list.num FROM tbl2;

SELECT union_list[1] FROM tbl2 JOIN tbl1 ON union_with_list.num = union_list[1].num;

SELECT union_list[1] FROM tbl2 JOIN tbl1 ON union_with_list.num = union_list[1];

CREATE TABLE tbl3 (union_with_lists UNION(strs TEXT[], nums INT[]));

INSERT INTO tbl3 VALUES (UNION_VALUE(strs := ['one', 'two'])), (UNION_VALUE(nums := [1, 2])), (UNION_VALUE(strs := ['three', NULL])), (UNION_VALUE(nums := [3, 4])), (UNION_VALUE(strs := ['five'])), (UNION_VALUE(nums := [5])), (UNION_VALUE(strs := ['six'])), (UNION_VALUE(nums := [NULL, 6])), (UNION_VALUE(strs := NULL)), (UNION_VALUE(strs := [1]));

SELECT UNION_TAG(union_with_lists), union_with_lists FROM tbl3;

SET default_null_order = 'nulls_first';

CREATE TABLE tbl (a UNION(a INT, b INT));

INSERT INTO tbl VALUES (UNION_VALUE(b := 1)), (UNION_VALUE(a := 4)), (UNION_VALUE(a := 1)), (UNION_VALUE(b := 2)), (UNION_VALUE(a := 3)), (NULL);

SELECT UNION_TAG(a), a FROM tbl ORDER BY a ASC;

SELECT UNION_TAG(a), a FROM tbl ORDER BY a DESC;

CREATE TABLE tbl5 (a UNION(lft INT, u UNION(lft TEXT, rght INT)));

INSERT INTO tbl5 VALUES (UNION_VALUE(lft := 1));

CREATE TABLE tbl2 (u UNION(lft INT, u UNION(lft TEXT, rght INT)));

INSERT INTO tbl2 VALUES (UNION_VALUE(lft := 1));

INSERT INTO tbl2 VALUES (NULL);

INSERT INTO tbl2 VALUES (UNION_VALUE(u := UNION_VALUE(rght := 2)));

INSERT INTO tbl2 VALUES (UNION_VALUE(u := UNION_VALUE(lft := '3')));

INSERT INTO tbl2 VALUES (UNION_VALUE(u := '4'));

SELECT u, UNION_TAG(u), UNION_TAG(u.u) FROM tbl2 ORDER BY u;

CREATE TABLE tbl1 (union_struct UNION(str TEXT, obj STRUCT(k TEXT, v INT)));

INSERT INTO tbl1 VALUES ({'k': 'key1', 'v': 1}), ('not a struct'), (NULL), ({'k': NULL, 'v': 1}), ({'k': 'key2', 'v': NULL}), ('key2');

SELECT * FROM tbl1;

SELECT union_struct.obj.k FROM tbl1;

SELECT union_struct.obj.v FROM tbl1;

SELECT union_struct.str FROM tbl1;

SELECT * FROM tbl1 AS l JOIN tbl1 AS r ON l.union_struct.str = r.union_struct.obj.k;

CREATE TABLE tbl2 (struct_union STRUCT(str TEXT, alt UNION(k TEXT, v INT)));

INSERT INTO tbl2 VALUES ({'str': 'key1', 'alt': 1}), ({'str': 'key2', 'alt': 'key2'}), ({'str': NULL, 'alt': NULL}), ({'str': NULL, 'alt': UNION_VALUE(v := NULL)}), ({'str': 'key3', 'alt': UNION_VALUE(k := NULL)}), ({'str': 'key4', 'alt': 'key2'});

SELECT * FROM tbl2;

SELECT * FROM tbl1 JOIN tbl2 ON tbl1.union_struct.str = tbl2.struct_union.alt.k ORDER BY ALL;

SELECT UNION_TAG(1);

SELECT UNION_TAG(CAST(1 AS UNION(a INT, b TEXT)));

CREATE TABLE tbl1 (u UNION(a INT, b REAL, c TEXT));

INSERT INTO tbl1 VALUES (1), ('text'), (2.0);

SELECT UNION_TAG(u) FROM tbl1;

SELECT u FROM tbl1;

SELECT UNION_TAG(u) FROM tbl1 WHERE u = (CAST(1 AS UNION(a INT, b REAL, c TEXT)));

SELECT ENUM_FIRST(UNION_TAG(u)) FROM tbl1 LIMIT 1;

SELECT ENUM_LAST(UNION_TAG(u)) FROM tbl1 LIMIT 1;

SELECT ENUM_RANGE(UNION_TAG(u)) FROM tbl1 LIMIT 1;

SELECT UNION_TAG(CAST('foo' AS UNION(num INT, str TEXT)));

PREPARE p1 as SELECT union_tag(u) FROM tbl1;

EXECUTE p1;

PREPARE p2 as SELECT union_tag(?);

EXECUTE p2(1);

EXECUTE p2('woo'::UNION(a INT, b VARCHAR));

CREATE TABLE tbl (u UNION(i INT, f REAL));

INSERT INTO tbl VALUES (CAST(1 AS INT));

SELECT * FROM tbl;

INSERT INTO tbl VALUES (CAST(2.0 AS REAL));

SELECT * FROM tbl;

SELECT u.i FROM tbl;

SELECT UNION_TAG(u) FROM tbl;

INSERT INTO tbl SELECT i FROM RANGE(0, 10) AS tbl(i);

CREATE TABLE tbl2 (k TEXT, u UNION(num INT, str TEXT) DEFAULT 'not set');

INSERT INTO tbl2 (k) VALUES ('a'), ('b'), ('c');

SELECT u FROM tbl2;

CREATE TABLE tbl3 (k TEXT, u UNION(numeric UNION(i INT, f REAL), str TEXT) DEFAULT CAST(13.37 AS REAL));

INSERT INTO tbl3 (k) VALUES ('a'), ('b'), ('c');

SELECT u.numeric.f FROM tbl3;

PRAGMA enable_verification;

CREATE TABLE tbl (u UNION(a INT, b TEXT));

INSERT INTO tbl VALUES (1), (NULL), (CAST(NULL AS TEXT)), (CAST(NULL AS INT));

DELETE FROM tbl;

INSERT INTO tbl VALUES (1), (NULL), (CAST(NULL AS TEXT)), (CAST(NULL AS INT));

SELECT UNION_TAG(u) AS tag, u AS val FROM tbl;

CREATE TABLE tbl (u UNION(num INT, str TEXT));

INSERT INTO tbl VALUES (UNION_VALUE(num := 1));

INSERT INTO tbl VALUES (UNION_VALUE());

INSERT INTO tbl VALUES (UNION_VALUE(num := 1, other := 2));

INSERT INTO tbl VALUES (UNION_VALUE(key := 1));

INSERT INTO tbl VALUES (UNION_VALUE(num := 1)), (1), (UNION_VALUE(str := 'hello')), (2), ('world');

INSERT INTO tbl SELECT CAST(UNION_VALUE(num := 1) AS UNION(num INT, str TEXT)) UNION ALL SELECT CAST(UNION_VALUE(str := 'hello') AS UNION(num INT, str TEXT));

SELECT CASE WHEN UNION_TAG(u) = 'num' THEN u ELSE NULL END AS num FROM tbl;

CREATE TABLE tbl3 (u UNION(num INT, str TEXT));

INSERT INTO tbl3 VALUES (UNION_VALUE(num := 1)), (UNION_VALUE(num := NULL)), (UNION_VALUE(str := '3')), (UNION_VALUE(str := NULL));

SELECT u FROM tbl3 WHERE u = NULL;

SELECT UNION_VALUE(str := NULL) IS NULL;

SELECT UNION_TAG(UNION_VALUE(str := NULL));

SELECT UNION_TAG(u), u FROM tbl3;

PRAGMA enable_verification;

CREATE TABLE unsigned (a UTINYINT, b USMALLINT, c UINTEGER, d UBIGINT);

INSERT INTO unsigned VALUES (1, 1, 1, 1), (2, 2, 2, 2);

SELECT * FROM unsigned;

SELECT CAST((200) AS UTINYINT) + CAST((200) AS UTINYINT);

SELECT CAST((20) AS UTINYINT) + CAST((200) AS USMALLINT);

SELECT CAST((20) AS UBIGINT) + CAST((200) AS UBIGINT);

SELECT CAST((18446744073709551615) AS UBIGINT) + CAST((18446744073709551615) AS UBIGINT);

SELECT CAST((200) AS UTINYINT) * CAST((200) AS UTINYINT);

SELECT CAST((200) AS UTINYINT) * CAST((200) AS USMALLINT);

SELECT CAST((200) AS UBIGINT) * CAST((200) AS UBIGINT);

SELECT CAST((18446744073709551615) AS UBIGINT) * CAST((3) AS UBIGINT);

SELECT CAST((200) AS UTINYINT) - CAST((201) AS UTINYINT);

SELECT CAST((200) AS UTINYINT) - CAST((201) AS USMALLINT);

SELECT CAST((200) AS UTINYINT) - CAST((20) AS USMALLINT);

SELECT CAST(100 AS UTINYINT) // CAST(20 AS UTINYINT), CAST(90 AS UTINYINT) // CAST(20 AS UTINYINT);

SELECT CAST(100 AS UTINYINT) // CAST(20 AS UBIGINT), CAST(90 AS UTINYINT) // CAST(20 AS UBIGINT);

SELECT CAST(100 AS UTINYINT) // CAST(0 AS UTINYINT);

SELECT CAST(100 AS UTINYINT) % CAST(20 AS UTINYINT), CAST(90 AS UTINYINT) % CAST(20 AS UTINYINT);

SELECT CAST(100 AS UTINYINT) % CAST(0 AS UTINYINT);

PRAGMA enable_verification;

SELECT CAST(200 AS UTINYINT) + 0.5;

SELECT COS(CAST(100 AS UTINYINT));

SELECT CONCAT('hello number ', CAST(100 AS UTINYINT));

SELECT CAST(100000000 AS INT) + CAST(100 AS USMALLINT);

SELECT CAST(100 AS USMALLINT) + 0.5;

SELECT COS(CAST(100 AS USMALLINT));

SELECT CONCAT('hello number ', CAST(100 AS USMALLINT));

SELECT CAST(100000000 AS INT) + CAST(100 AS UINTEGER);

SELECT CAST(100 AS UINTEGER) + 0.5;

SELECT COS(CAST(100 AS UINTEGER));

SELECT CONCAT('hello number ', CAST(100 AS UINTEGER));

SELECT CAST(100000000 AS INT) + CAST(100 AS UBIGINT);

SELECT CAST(100 AS UBIGINT) + 0.5;

SELECT COS(CAST(100 AS UBIGINT));

SELECT CONCAT('hello number ', CAST(100 AS UBIGINT));

SELECT CAST('255' AS UTINYINT);

SELECT CAST('256' AS UTINYINT);

SELECT CAST('255' AS USMALLINT);

SELECT CAST('65536' AS USMALLINT);

SELECT CAST('65535' AS UINTEGER);

SELECT CAST('4294967296' AS UINTEGER);

SELECT CAST('4294967295' AS UBIGINT);

SELECT CAST('18446744073709551616' AS UBIGINT);

SELECT CAST('18446744073709551615' AS UBIGINT);

SELECT CAST((CAST(100 AS UTINYINT)) AS DECIMAL(3, 0));

SELECT CAST((CAST(100 AS UTINYINT)) AS DECIMAL(2, 0));

SELECT CAST(100 AS UTINYINT) * CAST(100 AS DECIMAL(3, 0));

SELECT CAST((CAST(100 AS USMALLINT)) AS DECIMAL(3, 0));

SELECT CAST((CAST(100 AS USMALLINT)) AS DECIMAL(2, 0));

SELECT CAST(100 AS USMALLINT) * CAST(100 AS DECIMAL(3, 0));

SELECT CAST((CAST(100 AS UINTEGER)) AS DECIMAL(3, 0));

SELECT CAST((CAST(100 AS UINTEGER)) AS DECIMAL(2, 0));

SELECT CAST(100 AS UINTEGER) * CAST(100 AS DECIMAL(3, 0));

SELECT CAST((CAST(100 AS UBIGINT)) AS DECIMAL(3, 0));

SELECT CAST((CAST(100 AS UBIGINT)) AS DECIMAL(2, 0));

SELECT CAST(100 AS UBIGINT) * CAST(100 AS DECIMAL(3, 0));

PRAGMA enable_verification;

SELECT CAST('7' AS UTINYINT), CAST('130' AS UTINYINT), CAST('255' AS UTINYINT);

SELECT CAST('7' AS USMALLINT), CAST('130' AS USMALLINT), CAST('65535' AS USMALLINT);

SELECT CAST('7' AS UINTEGER), CAST('130' AS UINTEGER), CAST('4294967295' AS UINTEGER);

SELECT CAST('7' AS UBIGINT), CAST('130' AS UBIGINT), CAST('18446744073709551615' AS UBIGINT);

SELECT CAST('265' AS UTINYINT);

SELECT CAST('65536' AS USMALLINT);

SELECT CAST('4294967296' AS UINTEGER);

SELECT CAST('18446744073709551616' AS UBIGINT);

SELECT CAST('-1' AS UTINYINT);

SELECT CAST('-1' AS USMALLINT);

SELECT CAST('-1' AS UINTEGER);

SELECT CAST('-1' AS UBIGINT);

SELECT CAST('0' AS UTINYINT), CAST('-0' AS UTINYINT);

SELECT CAST(CAST(42 AS TINYINT) AS UTINYINT), CAST(CAST(42 AS SMALLINT) AS UTINYINT), CAST(CAST(42 AS INT) AS UTINYINT), CAST(CAST(42 AS BIGINT) AS UTINYINT), CAST(CAST(42 AS REAL) AS UTINYINT), CAST(CAST(42 AS DOUBLE) AS UTINYINT);

SELECT CAST(CAST(42 AS TINYINT) AS USMALLINT), CAST(CAST(42 AS SMALLINT) AS USMALLINT), CAST(CAST(42 AS INT) AS USMALLINT), CAST(CAST(42 AS BIGINT) AS USMALLINT), CAST(CAST(42 AS REAL) AS USMALLINT), CAST(CAST(42 AS DOUBLE) AS USMALLINT);

SELECT CAST(CAST(42 AS TINYINT) AS UINTEGER), CAST(CAST(42 AS SMALLINT) AS UINTEGER), CAST(CAST(42 AS INT) AS UINTEGER), CAST(CAST(42 AS BIGINT) AS UINTEGER), CAST(CAST(42 AS REAL) AS UINTEGER), CAST(CAST(42 AS DOUBLE) AS UINTEGER);

SELECT CAST(CAST(42 AS TINYINT) AS UBIGINT), CAST(CAST(42 AS SMALLINT) AS UBIGINT), CAST(CAST(42 AS INT) AS UBIGINT), CAST(CAST(42 AS BIGINT) AS UBIGINT), CAST(CAST(42 AS REAL) AS UBIGINT), CAST(CAST(42 AS DOUBLE) AS UBIGINT);

SELECT CAST(CAST((9223372036854775807) AS BIGINT) AS UTINYINT);

SELECT CAST(CAST((9223372036854775807) AS BIGINT) AS USMALLINT);

SELECT CAST(CAST((9223372036854775807) AS BIGINT) AS UINTEGER);

SELECT CAST(CAST((9223372036854775807) AS BIGINT) AS UBIGINT);

SELECT CAST(CAST((9223372036854775808) AS INT128) AS UBIGINT);

SELECT CAST(CAST((9223372036854775808) AS UINT128) AS UBIGINT);

SELECT CAST(CAST((-42) AS TINYINT) AS UTINYINT);

SELECT CAST(CAST((-42) AS TINYINT) AS USMALLINT);

SELECT CAST(CAST((-42) AS TINYINT) AS UINTEGER);

SELECT CAST(CAST((-42) AS TINYINT) AS UBIGINT);

SELECT -CAST(CAST(42 AS TINYINT) AS UTINYINT);

SELECT -CAST(CAST(42 AS TINYINT) AS USMALLINT);

SELECT -CAST(CAST(42 AS TINYINT) AS UINTEGER);

SELECT -CAST(CAST(42 AS TINYINT) AS UBIGINT);

SELECT CAST(CAST((-42) AS SMALLINT) AS UTINYINT);

SELECT CAST(CAST((-42) AS SMALLINT) AS USMALLINT);

SELECT CAST(CAST((-42) AS SMALLINT) AS UINTEGER);

SELECT CAST(CAST((-42) AS SMALLINT) AS UBIGINT);

SELECT -CAST(CAST(42 AS SMALLINT) AS UTINYINT);

SELECT -CAST(CAST(42 AS SMALLINT) AS USMALLINT);

SELECT -CAST(CAST(42 AS SMALLINT) AS UINTEGER);

SELECT -CAST(CAST(42 AS SMALLINT) AS UBIGINT);

SELECT CAST(CAST((-42) AS INT) AS UTINYINT);

SELECT CAST(CAST((-42) AS INT) AS USMALLINT);

SELECT CAST(CAST((-42) AS INT) AS UINTEGER);

SELECT CAST(CAST((-42) AS INT) AS UBIGINT);

SELECT -CAST(CAST(42 AS INT) AS UTINYINT);

SELECT -CAST(CAST(42 AS INT) AS USMALLINT);

SELECT -CAST(CAST(42 AS INT) AS UINTEGER);

SELECT -CAST(CAST(42 AS INT) AS UBIGINT);

SELECT CAST(CAST((-42) AS BIGINT) AS UTINYINT);

SELECT CAST(CAST((-42) AS BIGINT) AS USMALLINT);

SELECT CAST(CAST((-42) AS BIGINT) AS UINTEGER);

SELECT CAST(CAST((-42) AS BIGINT) AS UBIGINT);

SELECT -CAST(CAST(42 AS BIGINT) AS UTINYINT);

SELECT -CAST(CAST(42 AS BIGINT) AS USMALLINT);

SELECT -CAST(CAST(42 AS BIGINT) AS UINTEGER);

SELECT -CAST(CAST(42 AS BIGINT) AS UBIGINT);

SELECT CAST(CAST((-42) AS REAL) AS UTINYINT);

SELECT CAST(CAST((-42) AS REAL) AS USMALLINT);

SELECT CAST(CAST((-42) AS REAL) AS UINTEGER);

SELECT CAST(CAST((-42) AS REAL) AS UBIGINT);

SELECT -CAST(CAST(42 AS REAL) AS UTINYINT);

SELECT -CAST(CAST(42 AS REAL) AS USMALLINT);

SELECT -CAST(CAST(42 AS REAL) AS UINTEGER);

SELECT -CAST(CAST(42 AS REAL) AS UBIGINT);

SELECT CAST(CAST((-42) AS DOUBLE) AS UTINYINT);

SELECT CAST(CAST((-42) AS DOUBLE) AS USMALLINT);

SELECT CAST(CAST((-42) AS DOUBLE) AS UINTEGER);

SELECT CAST(CAST((-42) AS DOUBLE) AS UBIGINT);

SELECT -CAST(CAST(42 AS DOUBLE) AS UTINYINT);

SELECT -CAST(CAST(42 AS DOUBLE) AS USMALLINT);

SELECT -CAST(CAST(42 AS DOUBLE) AS UINTEGER);

SELECT -CAST(CAST(42 AS DOUBLE) AS UBIGINT);

SELECT CAST(CAST((200) AS UTINYINT) AS TINYINT);

SELECT CAST(CAST((10) AS UTINYINT) AS TINYINT);

SELECT CAST(CAST((10) AS UTINYINT) AS SMALLINT);

SELECT CAST(CAST((10) AS UTINYINT) AS INT);

SELECT CAST(CAST((10) AS UTINYINT) AS BIGINT);

SELECT CAST(CAST((200) AS USMALLINT) AS TINYINT);

SELECT CAST(CAST((33000) AS USMALLINT) AS SMALLINT);

SELECT CAST(CAST((10) AS USMALLINT) AS TINYINT);

SELECT CAST(CAST((10) AS USMALLINT) AS SMALLINT);

SELECT CAST(CAST((10) AS USMALLINT) AS INT);

SELECT CAST(CAST((10) AS USMALLINT) AS BIGINT);

SELECT CAST(CAST((200) AS UINTEGER) AS TINYINT);

SELECT CAST(CAST((33000) AS UINTEGER) AS SMALLINT);

SELECT CAST(CAST((3147483647) AS UINTEGER) AS INT);

SELECT CAST(CAST((10) AS UINTEGER) AS TINYINT);

SELECT CAST(CAST((10) AS UINTEGER) AS SMALLINT);

SELECT CAST(CAST((10) AS UINTEGER) AS INT);

SELECT CAST(CAST((10) AS UINTEGER) AS BIGINT);

SELECT CAST(CAST((200) AS UBIGINT) AS TINYINT);

SELECT CAST(CAST((33000) AS UBIGINT) AS SMALLINT);

SELECT CAST(CAST((3147483647) AS UBIGINT) AS INT);

SELECT CAST(CAST((10223372036854775807) AS UBIGINT) AS INT);

SELECT CAST(CAST((10) AS UBIGINT) AS TINYINT);

SELECT CAST(CAST((10) AS UBIGINT) AS SMALLINT);

SELECT CAST(CAST((10) AS UBIGINT) AS INT);

SELECT CAST(CAST((10) AS UBIGINT) AS BIGINT);

SELECT CAST(CAST((9223372036854775807) AS BIGINT) AS USMALLINT);

SELECT CAST(CAST((9223372036854775807) AS BIGINT) AS UINTEGER);

SELECT CAST(CAST((9223372036854775807) AS BIGINT) AS UBIGINT);

SELECT CAST(CAST((9223372036854775808) AS INT128) AS UBIGINT);

SELECT CAST(CAST((9223372036854775808) AS UINT128) AS UBIGINT);

SELECT CAST(CAST((200.32) AS DECIMAL(18, 3)) AS UTINYINT);

SELECT CAST(CAST((260.32) AS DECIMAL(18, 3)) AS UTINYINT);

SELECT CAST(CAST((200.32) AS DECIMAL(18, 3)) AS USMALLINT);

SELECT CAST(CAST((65535.32) AS DECIMAL(18, 3)) AS USMALLINT);

SELECT CAST(CAST((65536.32) AS DECIMAL(18, 3)) AS USMALLINT);

SELECT CAST(CAST((200.32) AS DECIMAL(18, 3)) AS UINTEGER);

SELECT CAST(CAST((4294967295.32) AS DECIMAL(18, 3)) AS UINTEGER);

SELECT CAST(CAST((4294967296.32) AS DECIMAL(18, 3)) AS UINTEGER);

SELECT CAST(CAST((200.32) AS DECIMAL(18, 3)) AS UBIGINT);

SELECT CAST(CAST((200.32) AS REAL) AS UTINYINT);

SELECT CAST(CAST((260.32) AS REAL) AS UTINYINT);

SELECT CAST(CAST((200.32) AS REAL) AS USMALLINT);

SELECT CAST(CAST((65534.32) AS REAL) AS USMALLINT);

SELECT CAST(CAST((65536.32) AS REAL) AS USMALLINT);

SELECT CAST(CAST((200.32) AS REAL) AS UINTEGER);

SELECT CAST(CAST((200.32) AS REAL) AS UINTEGER);

SELECT CAST(CAST((4294967296.32) AS REAL) AS UBIGINT);

PRAGMA enable_verification;

SELECT CAST([] AS uint16[]);

SELECT CAST([] AS uint32[]);

SELECT CAST([] AS uint64[]);

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

CREATE TABLE IF NOT EXISTS uuid (u UUID);

INSERT INTO uuid VALUES ('A0EEBC99-9C0B-4EF8-BB6D-6BB9BD380A11'), (NULL), ('47183823-2574-4bfd-b411-99ed177d3e43'), ('{10203040506070800102030405060708}'), ('A0EEBC99-9C0B-4EF8-BB6D-6BB9BD380A11'), (NULL), ('47183823-2574-4bfd-b411-99ed177d3e43'), ('{10203040506070800102030405060708}'), ('00000000-0000-0000-0000-000000000000'), ('00000000-0000-0000-0000-000000000001'), ('00000000-0000-0000-8000-000000000001'), ('80000000-0000-0000-0000-000000000000'), ('80000000-0000-0000-8000-000000000000'), ('80000000-0000-0000-8fff-ffffffffffff'), ('80000000-0000-0000-ffff-ffffffffffff'), ('8fffffff-ffff-ffff-0000-000000000000'), ('8fffffff-ffff-ffff-8000-000000000000'), ('8fffffff-ffff-ffff-8fff-ffffffffffff'), ('8fffffff-ffff-ffff-ffff-ffffffffffff'), ('ffffffff-ffff-ffff-ffff-ffffffffffff');

SELECT CAST('A0EEBC99-9C0B-4EF8-BB6D-6BB9BD380A11' AS UUID);

SELECT 'a0ee-bc99-9c0b-4ef8-bb6d-6bb9-bd38-0a11';

SELECT CAST('a0ee-bc99-9c0b-4ef8-bb6d-6bb9-bd38-0a11' AS UUID);

SELECT CAST(CAST('a0ee-bc99-9c0b-4ef8-bb6d-6bb9-bd38-0a11' AS UUID) AS TEXT);

SELECT CAST(CAST(CAST('a0ee-bc99-9c0b-4ef8-bb6d-6bb9-bd38-0a11' AS UUID) AS TEXT) AS UUID);

SELECT CAST(CAST(CAST(CAST('a0ee-bc99-9c0b-4ef8-bb6d-6bb9-bd38-0a11' AS UUID) AS TEXT) AS UUID) AS TEXT);

SELECT CAST('{a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11' AS UUID);

SELECT CAST('47183823-2574-4bfd-b411-99ed177d3e4' AS UUID);

SELECT u FROM uuid ORDER BY u;

SELECT u FROM uuid ORDER BY CAST(u AS TEXT);

SELECT MIN(u) FROM uuid;

SELECT MAX(u) FROM uuid;

SELECT u FROM uuid WHERE u = '8fffffff-ffff-ffff-ffff-ffffffffffff';

SELECT u FROM uuid WHERE u <> 'a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11' ORDER BY u;

SELECT u FROM uuid WHERE u >= '80000000-0000-0000-0000-000000000000' ORDER BY u;

SELECT u FROM uuid WHERE u < '80000000-0000-0000-0000-000000000000' ORDER BY u;

SELECT u, COUNT(1) FROM uuid WHERE u < '80000000-0000-0000-0000-000000000000' GROUP BY u ORDER BY u;

CREATE FUNCTION hex_char(i) AS SUBSTRING('0123456789abcdef', CAST((i % 16) AS INT) + 1, 1);

CREATE FUNCTION hex_char_repeat(i, j, rep) AS REPEAT(HEX_CHAR(i) || HEX_CHAR(j), rep);

CREATE FUNCTION uuid_generate(i, j) AS CONCAT(HEX_CHAR_REPEAT(i, j, 4), '-', HEX_CHAR_REPEAT(i, j, 2), '-', HEX_CHAR_REPEAT(i, j, 2), '-', HEX_CHAR_REPEAT(i, j, 2), '-', HEX_CHAR_REPEAT(i, j, 6));

CREATE VIEW uuid_generated AS SELECT UUID_GENERATE(i, j) AS uuid FROM RANGE(0, 16) AS tbl(i), RANGE(0, 16) AS tbl2(j);

SELECT CAST(uuid AS TEXT) FROM uuid_generated ORDER BY 1;

SELECT CAST(uuid AS UUID) FROM uuid_generated ORDER BY 1;

SELECT CAST(CAST(uuid AS UUID) AS TEXT) = uuid FROM uuid_generated ORDER BY 1;

SELECT uuid = uuid FROM uuid_generated ORDER BY 1;

SELECT COUNT(*) FROM uuid_generated AS u1, uuid_generated AS u2 WHERE CAST(u1.uuid AS TEXT) >= CAST(u2.uuid AS TEXT);

SELECT COUNT(*) FROM uuid_generated AS u1, uuid_generated AS u2 WHERE CAST(u1.uuid AS UUID) >= CAST(u2.uuid AS UUID);

SELECT COUNT(*) FROM uuid_generated AS u1, uuid_generated AS u2 WHERE CAST(u1.uuid AS TEXT) <= CAST(u2.uuid AS TEXT);

SELECT COUNT(*) FROM uuid_generated AS u1, uuid_generated AS u2 WHERE CAST(u1.uuid AS UUID) <= CAST(u2.uuid AS UUID);

SELECT COUNT(*) FROM uuid_generated AS u1, uuid_generated AS u2 WHERE CAST(u1.uuid AS TEXT) = CAST(u2.uuid AS TEXT);

SELECT COUNT(*) FROM uuid_generated AS u1, uuid_generated AS u2 WHERE CAST(u1.uuid AS UUID) = CAST(u2.uuid AS UUID);

SELECT SUM(u) FROM uuid;

SELECT AVG(u) FROM uuid;

SELECT u + u FROM uuid;

SELECT u * u FROM uuid;

SELECT u / u FROM uuid;

SELECT u % u FROM uuid;

SELECT u - u FROM uuid;

SELECT CAST(CAST('a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11' AS UUID) AS INT128);

SELECT CAST('' AS UUID);

SELECT CAST('aaaa' AS UUID);

SELECT CAST('a0eebc99-9c0b-4ef8-bb6d-6bb9bd380Z11' AS UUID);

PRAGMA enable_verification;

CREATE TABLE t AS SELECT CAST(CONCAT('1', REPEAT('0', i)) AS varint) AS a FROM RANGE(0, 100) AS tbl(i);

SELECT SUM(a) FROM t;

SELECT SUM(a) FROM t WHERE a < CAST(10000000 AS DOUBLE);

PRAGMA enable_verification;

SELECT CAST(CAST(179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368 AS DOUBLE) AS varint);

SELECT CAST(CAST((-179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368) AS DOUBLE) AS varint);

SELECT CAST(CAST(33999999014383402399481480781255147520 AS REAL) AS varint);

SELECT CAST(CAST(33999999014383402399481480781255147520 AS DOUBLE) AS varint);

SELECT CAST(CAST(0 AS DOUBLE) AS varint);

SELECT CAST(CAST((-0) AS DOUBLE) AS varint);

SELECT CAST(CAST(1 AS DOUBLE) AS varint);

SELECT CAST(CAST(100000 AS DOUBLE) AS varint);

SELECT CAST(CAST(100000.595 AS DOUBLE) AS varint);

SELECT CAST(1797693134862315708145274237317043567980705675258449965989174768031572607800285387605895586327668781715404589535143824642343213268894641827684675467035375169860499105765512820762454900903893289440758685084551339423045832369032229481658085593321233482747978262041447231687381771809192998812504040261841248583700 AS varint);

SELECT CAST(CAST('-1e310' AS DOUBLE) AS varint);

PRAGMA enable_verification;

SELECT DISTINCT CAST(CAST(i AS TEXT) AS varint) = CAST(i AS varint) FROM RANGE(0, 2147483646) AS t(i);

PRAGMA enable_verification;

SELECT CAST(CAST('340282366920938463463374607431768211455' AS UINT128) AS varint);

SELECT DISTINCT CAST(CAST(i AS TEXT) AS varint) = CAST(i AS varint) FROM RANGE(-1000, 1000) AS t(i);

SELECT CAST('2147483646' AS varint) = CAST(2147483646 AS varint);

SELECT CAST(CAST('340282366920938463463374607431768211455' AS UINT128) AS varint) = CAST('340282366920938463463374607431768211455' AS varint);

SELECT CAST('-2147483646' AS varint) = CAST((-2147483646) AS varint);

SELECT CAST('100' AS varint) = CAST(100 AS varint);

SELECT CAST('256' AS varint) = CAST(256 AS varint);

SELECT CAST('256' AS varint);

SELECT CAST('2147483646' AS varint);

SELECT CAST('21474836460000000000958' AS varint);

SELECT CAST('-21474836460000000000958' AS varint);

SELECT CAST('-21474836460000000000958214748364600000000009582147483646000000000095821474836460000000000958' AS varint);

SELECT CAST('-21474836460000000000958214748364600000000009582147483646000000000095821474836460000000000958' AS varint) < CAST('-21474836460000000000958214748364600000000009582147483646000000000095821474836460000000000957' AS varint);

PRAGMA enable_verification;

SELECT CAST('-0' AS VARINT);

SELECT CAST('+0' AS VARINT);

SELECT CAST('+-0' AS VARINT);

SELECT CAST('-+0' AS VARINT);

SELECT CAST('-' AS VARINT);

SELECT CAST('-0010' AS VARINT);

SELECT CAST('-0010.' AS VARINT);

SELECT CAST('-0010.5' AS VARINT);

SELECT CAST('-0010.4999' AS VARINT);

SELECT CAST('0010.5' AS VARINT);

SELECT CAST('0010.4999' AS VARINT);

SELECT CAST('00-0010' AS VARINT);

SELECT CAST('-0010.2' AS VARINT);

SELECT CAST('-0010.9' AS VARINT);

SELECT CAST('0010.2' AS VARINT);

SELECT CAST('0010.9' AS VARINT);

SELECT CAST('' AS VARINT);

SELECT CAST((-0) AS VARINT);

SELECT CAST('bla' AS VARINT);

SELECT CAST('1000bla' AS VARINT);

SELECT CAST('1000.bla' AS VARINT);

SELECT CAST('1000...' AS VARINT);

SELECT CAST('1000.0.0' AS VARINT);

PRAGMA enable_verification;

SELECT CAST(CAST(tinyint AS TEXT) AS varint) = CAST(tinyint AS varint), CAST(CAST(smallint AS TEXT) AS varint) = CAST(smallint AS varint), CAST(CAST(int AS TEXT) AS varint) = CAST(int AS varint), CAST(CAST(bigint AS TEXT) AS varint) = CAST(bigint AS varint), CAST(CAST(hugeint AS TEXT) AS varint) = CAST(hugeint AS varint), CAST(CAST(uhugeint AS TEXT) AS varint) = CAST(uhugeint AS varint), CAST(CAST(utinyint AS TEXT) AS varint) = CAST(utinyint AS varint), CAST(CAST(usmallint AS TEXT) AS varint) = CAST(usmallint AS varint), CAST(CAST(uint AS TEXT) AS varint) = CAST(uint AS varint), CAST(CAST(ubigint AS TEXT) AS varint) = CAST(ubigint AS varint) FROM TEST_ALL_TYPES() WHERE NOT tinyint IS NULL;

SELECT CAST(tinyint AS TEXT) = CAST(CAST(tinyint AS varint) AS TEXT), CAST(smallint AS TEXT) = CAST(CAST(smallint AS varint) AS TEXT), CAST(int AS TEXT) = CAST(CAST(int AS varint) AS TEXT), CAST(bigint AS TEXT) = CAST(CAST(bigint AS varint) AS TEXT), CAST(hugeint AS TEXT) = CAST(CAST(hugeint AS varint) AS TEXT), CAST(uhugeint AS TEXT) = CAST(CAST(uhugeint AS varint) AS TEXT), CAST(utinyint AS TEXT) = CAST(CAST(utinyint AS varint) AS TEXT), CAST(usmallint AS TEXT) = CAST(CAST(usmallint AS varint) AS TEXT), CAST(uint AS TEXT) = CAST(CAST(uint AS varint) AS TEXT), CAST(CAST(ubigint AS TEXT) AS varint) = CAST(CAST(ubigint AS varint) AS TEXT) FROM TEST_ALL_TYPES() WHERE NOT tinyint IS NULL;

SELECT CAST(CAST(1.7976931348623157E+308 AS DOUBLE) AS varint) = CAST('179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368' AS varint);

SELECT CAST(CAST((-1.7976931348623157E+308) AS DOUBLE) AS varint) = CAST('-179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368' AS varint);

SELECT CAST(CAST('179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368' AS varint) AS DOUBLE) = CAST('1.7976931348623157E+308' AS DOUBLE);

SELECT CAST(CAST('-179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368' AS varint) AS DOUBLE) = CAST('-1.7976931348623157E+308' AS DOUBLE);

SELECT CAST(CAST(3.4028235E+38 AS REAL) AS varint) = CAST('340282346638528859811704183484516925440' AS varint);

SELECT CAST(CAST((-3.4028235E+38) AS REAL) AS varint) = CAST('-340282346638528859811704183484516925440' AS varint);

PRAGMA enable_verification;

CREATE TABLE varint_comparisons (a varint);

INSERT INTO varint_comparisons VALUES (CAST('9223372036854775807' AS varint)), (CAST('-9223372036854775808' AS varint)), (CAST('2147483647' AS varint)), (CAST('-2147483648' AS varint)), (CAST('32767' AS varint)), (CAST('-32768' AS varint)), (CAST('255' AS varint)), (CAST('0' AS varint)), (CAST('-1' AS varint)), (CAST('1' AS varint)), (CAST('340282366920938463463374607431768211455' AS varint)), (CAST('-170141183460469231731687303715884105727' AS varint)), (CAST('170141183460469231731687303715884105727' AS varint)), (CAST('340282366920938463463374607431768211455987' AS varint)), (CAST('-340282366920938463463374607431768211455987' AS varint));

SELECT a, a < CAST('9223372036854775807' AS varint) FROM varint_comparisons;

SELECT a, a <= CAST('9223372036854775807' AS varint) FROM varint_comparisons;

SELECT a, a = CAST('9223372036854775807' AS varint) FROM varint_comparisons;

SELECT a, a > CAST('9223372036854775807' AS varint) FROM varint_comparisons;

SELECT a, a >= CAST('9223372036854775807' AS varint) FROM varint_comparisons;

SELECT a, a <> CAST('9223372036854775807' AS varint) FROM varint_comparisons;

SELECT a, a < CAST('2147483647' AS varint) FROM varint_comparisons;

SELECT a, a <= CAST('2147483647' AS varint) FROM varint_comparisons;

SELECT a, a = CAST('2147483647' AS varint) FROM varint_comparisons;

SELECT a, a > CAST('2147483647' AS varint) FROM varint_comparisons;

SELECT a, a >= CAST('2147483647' AS varint) FROM varint_comparisons;

PRAGMA enable_verification;

SELECT CAST(CAST('100' AS varint) AS DOUBLE);

SELECT CAST(CAST('100000' AS varint) AS DOUBLE);

SELECT CAST(CAST('1000000000000000' AS varint) AS DOUBLE);

SELECT CAST(CAST('340282366920938463463374607431768211455' AS varint) AS DOUBLE);

SELECT CAST(CAST('-100' AS varint) AS DOUBLE);

SELECT CAST(CAST('-100000' AS varint) AS DOUBLE);

SELECT CAST(CAST('-1000000000000000' AS varint) AS DOUBLE);

SELECT CAST(CAST('-340282366920938463463374607431768211455' AS varint) AS DOUBLE);

SELECT CAST(CAST(179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368 AS varint) AS DOUBLE);

SELECT CAST(CAST(1797693134862315708145274237317043567980705675258449965989174768031572607800285387605895586327668781715404589535143824642343213268894641827684675467035375169860499105765512820762454900903893289440758685084551339423045832369032229481658085593321233482747978262041447231687381771809192998812504040261841248583700 AS varint) AS DOUBLE);

SELECT CAST(CAST('1797693134862315708145274237317043567980705675258449965989174768031572607800285387605895586327668781715404589535143824642343213268894641827684675467035375169860499105765512820762454900903893289440758685084551339423045832369032229481658085593321233482747978262041447231687381771809192998812504040261841248583700' AS varint) AS DOUBLE);

PRAGMA enable_verification;

SELECT CAST(85070591730234614260976917445211069672 AS VARINT);

SELECT CAST((-85070591730234614260976917445211069672) AS VARINT);

CREATE TABLE t AS SELECT CAST((10 * POWER(10, i)) AS INT128) AS i FROM RANGE(0, 38) AS t(i);

SELECT DISTINCT CAST(i AS TEXT) = CAST(CAST(i AS varint) AS TEXT) FROM t;

SELECT DISTINCT CAST((-i) AS TEXT) = CAST(CAST((-i) AS varint) AS TEXT) FROM t;

SELECT DISTINCT CAST(CAST(i AS UINT128) AS TEXT) = CAST(CAST(CAST(i AS UINT128) AS varint) AS TEXT) FROM t;

PRAGMA enable_verification;

CREATE TABLE t (a varint);

INSERT INTO t VALUES (1), (10), (1000), (CAST(33999999014383402399481480781255147520 AS DOUBLE)), (17976931348623157081452742373170435679807056752584499659891747);

SELECT SUM(a) FROM t;

INSERT INTO t VALUES (-17976931348623157081452742373170435679807056752584499659891747680315726078002853876058);

SELECT SUM(a) FROM t;

DROP TABLE t;

CREATE TABLE t (a varint);

INSERT INTO t VALUES (1000000000000000000000000000000000000000000000000000000000000000000000000), (100000000000000000000000000000000000000000000000000000000000000000000000), (10000000000000000000000000000000000000000000000000000000000000000000000), (1000000000000000000000000000000000000000000000000000000000000000000000), (100000000000000000000000000000000000000000000000000000000000000000000);

SELECT SUM(a) FROM t;

CREATE TABLE test AS SELECT * FROM RANGE(0, 50000, 1) AS t1(i);

SELECT COUNT(i), SUM(i) FROM test;

UPDATE test SET i = i + 1;

SELECT COUNT(i), SUM(i) FROM test;

UPDATE test SET i = i + 1;

SELECT COUNT(i), SUM(i) FROM test;

INSERT INTO test SELECT * FROM test;

SELECT COUNT(i), SUM(i) FROM test;

UPDATE test SET i = i + 1;

SELECT COUNT(i), SUM(i) FROM test;

UPDATE test SET i = i + 1;

SELECT COUNT(i), SUM(i) FROM test;

CREATE TABLE t (id INT, col TEXT);

INSERT INTO t (id) SELECT range AS id FROM RANGE(0, 1000000);

SELECT COUNT(*), COUNT(id), COUNT(col) FROM t;

UPDATE t SET col = 'x';

SELECT COUNT(*), COUNT(id), COUNT(col) FROM t;

UPDATE t SET col = NULL;

SELECT COUNT(*), COUNT(id), COUNT(col) FROM t;

CREATE TABLE test (id INT, a INT);

INSERT INTO test VALUES (1, 1), (2, 2), (3, 3), (4, NULL);

SELECT * FROM test ORDER BY id;

UPDATE test SET a = CASE WHEN id = 1 THEN 7 ELSE NULL END WHERE id <= 2;

SELECT * FROM test ORDER BY id;

UPDATE test SET a = 17 WHERE id > 2;

SELECT * FROM test ORDER BY id;

UPDATE test SET a = CASE WHEN id = 4 THEN 1 ELSE NULL END;

SELECT * FROM test ORDER BY id;

UPDATE test SET a = 2 WHERE id >= 2 AND id <= 3;

SELECT * FROM test ORDER BY id;

UPDATE test SET a = NULL WHERE id >= 3;

SELECT * FROM test ORDER BY id;

UPDATE test SET a = id WHERE id <> 3;

SELECT * FROM test ORDER BY id;

UPDATE test SET a = NULL WHERE id <> 3;

SELECT * FROM test ORDER BY id;

UPDATE test SET a = 3 WHERE id <> 2;

SELECT * FROM test ORDER BY id;

UPDATE test SET a = 7 WHERE id <> 3;

SELECT * FROM test ORDER BY id;

UPDATE test SET a = NULL;

SELECT * FROM test ORDER BY id;

CREATE TABLE test (id INT, a INT);

INSERT INTO test VALUES (1, 1), (2, 2), (3, 3), (4, NULL);

SELECT * FROM test ORDER BY id;

BEGIN;

UPDATE test SET a = CASE WHEN a IS NULL THEN 1 ELSE NULL END;

SELECT * FROM test ORDER BY id;

UPDATE test SET a = 2 WHERE id >= 2 AND id <= 3;

SELECT * FROM test ORDER BY id;

UPDATE test SET a = NULL WHERE id >= 3;

SELECT * FROM test ORDER BY id;

UPDATE test SET a = id WHERE id <> 3;

SELECT * FROM test ORDER BY id;

UPDATE test SET a = NULL WHERE id <> 3;

SELECT * FROM test ORDER BY id;

UPDATE test SET a = 3 WHERE id <> 2;

SELECT * FROM test ORDER BY id;

UPDATE test SET a = 7 WHERE id <> 3;

SELECT * FROM test ORDER BY id;

UPDATE test SET a = NULL;

SELECT * FROM test ORDER BY id;

COMMIT;

SELECT * FROM test ORDER BY id;

CREATE VIEW test_table_view AS SELECT * FROM "data/csv/issue2471.csv";

CREATE TABLE test_table (isin TEXT, value TEXT);

INSERT INTO test_table SELECT * FROM test_table_view;

UPDATE test_table SET value = tdv.value FROM test_table_view AS tdv WHERE tdv.isin = test_table.isin;

SELECT COUNT(DISTINCT isin), MIN(isin), MAX(isin), MIN(value), MAX(value) FROM test_table;

BEGIN;

CREATE TABLE t1 (a TEXT PRIMARY KEY, b INT);

INSERT INTO t1 VALUES ('    4-abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ', 2 + 1);

INSERT INTO t1 VALUES ('   34-abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ', 18);

INSERT INTO t1 SELECT b, b + 1 FROM t1 WHERE b < 5;

SELECT * FROM t1;

UPDATE t1 SET a = CONCAT(a, 'x') WHERE b % 2 = 0;

SELECT * FROM t1;

CREATE TABLE test (a TEXT);

INSERT INTO test VALUES ('abcdefghijklmnopqrstuvwxyz');

INSERT INTO test SELECT a || a || a || a || a || a || a || a || a || a FROM test;

DELETE FROM test WHERE LENGTH(a) = (SELECT MIN(LENGTH(a)) FROM test);

INSERT INTO test SELECT a || a || a || a || a || a || a || a || a || a FROM test;

DELETE FROM test WHERE LENGTH(a) = (SELECT MIN(LENGTH(a)) FROM test);

INSERT INTO test SELECT a || a || a || a || a || a || a || a || a || a FROM test;

DELETE FROM test WHERE LENGTH(a) = (SELECT MIN(LENGTH(a)) FROM test);

INSERT INTO test SELECT a || a || a || a || a || a || a || a || a || a FROM test;

DELETE FROM test WHERE LENGTH(a) = (SELECT MIN(LENGTH(a)) FROM test);

INSERT INTO test SELECT a || a || a || a || a || a || a || a || a || a FROM test;

DELETE FROM test WHERE LENGTH(a) = (SELECT MIN(LENGTH(a)) FROM test);

SELECT LENGTH(a) FROM test;

BEGIN;

UPDATE test SET a = 'a';

SELECT LENGTH(a) FROM test;

SELECT LENGTH(a) FROM test;

COMMIT;

SELECT LENGTH(a) FROM test;

SELECT LENGTH(a) FROM test;

BEGIN;

CREATE TABLE test AS SELECT i AS a, 'hello' AS b FROM RANGE(0, 3000, 1) AS t1(i);

INSERT INTO test SELECT * FROM test;

INSERT INTO test SELECT * FROM test;

INSERT INTO test SELECT * FROM test;

INSERT INTO test SELECT * FROM test;

INSERT INTO test SELECT * FROM test;

INSERT INTO test SELECT * FROM test;

INSERT INTO test SELECT * FROM test;

COMMIT;

SELECT SUM(a), SUM(LENGTH(b)) FROM test;

SELECT SUM(a), SUM(LENGTH(b)) FROM test;

BEGIN;

SELECT SUM(a), SUM(LENGTH(b)) FROM test;

UPDATE test SET a = a + 2, b = 'hellohello' WHERE a % 2 = 0;

SELECT SUM(a), SUM(LENGTH(b)) FROM test;

SELECT SUM(a), SUM(LENGTH(b)) FROM test;

UPDATE test SET a = a + 2, b = 'hellohello' WHERE a % 2 = 1;

SELECT SUM(a), SUM(LENGTH(b)) FROM test;

SELECT SUM(a), SUM(LENGTH(b)) FROM test;

UPDATE test SET a = a + 2, b = 'hellohellohellohello';

SELECT SUM(a), SUM(LENGTH(b)) FROM test;

SELECT SUM(a), SUM(LENGTH(b)) FROM test;

COMMIT;

SELECT SUM(a), SUM(LENGTH(b)) FROM test;

SELECT SUM(a), SUM(LENGTH(b)) FROM test;

SET default_null_order = 'nulls_first';

SET immediate_transaction_mode = TRUE;

BEGIN;

CREATE TABLE integers (id INT, val INT);

INSERT INTO integers SELECT i, i FROM RANGE(0, 10000) AS t(i);

PRAGMA checkpoint_threshold = '1GB';

UPDATE integers SET val = val + 1000000 WHERE id = 1;

BEGIN;

UPDATE integers SET val = val + 1000000 WHERE id = 2;

BEGIN;

UPDATE integers SET val = val + 1000000 WHERE id = 3;

COMMIT;

SELECT COUNT(*) FROM integers WHERE val > 1000000;

CHECKPOINT;

COMMIT;

COMMIT;

BEGIN;

CHECKPOINT;

SELECT COUNT(*) FROM integers WHERE val > 1000000;

CREATE TABLE tbl (key INT, fruit TEXT, cost INT);

INSERT INTO tbl VALUES (1, 'apple', 2), (2, 'orange', 3);

UPDATE tbl SET (key, fruit, cost) = (1, 'pear', 2);

SELECT * FROM tbl;

UPDATE tbl SET (key, fruit, cost) = (2, 'apple', 3);

SELECT * FROM tbl;

UPDATE tbl SET (key, fruit, cost) = 3;

SELECT * FROM tbl;

UPDATE tbl SET (key, fruit, cost) = (1, 2);

UPDATE tbl SET (key, fruit, cost) = (1, 2, 3, 4);

UPDATE tbl SET (key, fruit, cost) = ADD(key, cost);

SELECT * FROM tbl;

UPDATE tbl SET () = (key, fruit);

UPDATE tbl SET (key, fruit) = ();

SET default_null_order = 'nulls_first';
require AS skip_reload;

CREATE TABLE test (a INT);

INSERT INTO test VALUES (1), (2), (3), (NULL);

SELECT * FROM test ORDER BY a;

BEGIN;

UPDATE test SET a = NULL WHERE a = 2;

SELECT * FROM test ORDER BY a;

SELECT * FROM test ORDER BY a;

COMMIT;

SELECT * FROM test ORDER BY a;

SELECT * FROM test ORDER BY a;

BEGIN;

UPDATE test SET a = NULL WHERE a = 3;

SELECT * FROM test ORDER BY a;

SELECT * FROM test ORDER BY a;

ROLLBACK;

SELECT * FROM test ORDER BY a;

SELECT * FROM test ORDER BY a;

BEGIN;

UPDATE test SET a = 10 WHERE a IS NULL;

SELECT * FROM test ORDER BY a;

SELECT * FROM test ORDER BY a;

ROLLBACK;

SELECT * FROM test ORDER BY a;

SELECT * FROM test ORDER BY a;

BEGIN;

UPDATE test SET a = 10 WHERE a IS NULL;

SELECT * FROM test ORDER BY a;

SELECT * FROM test ORDER BY a;

COMMIT;

SELECT * FROM test ORDER BY a;

SELECT * FROM test ORDER BY a;

CREATE TABLE test (a TEXT);

INSERT INTO test VALUES ('hello'), ('world');

BEGIN;

SELECT * FROM test ORDER BY a;

SELECT * FROM test ORDER BY a;

UPDATE test SET a = 'test' WHERE a = 'hello';

SELECT * FROM test ORDER BY a;

UPDATE test SET a = 'test2' WHERE a = 'world';

SELECT * FROM test ORDER BY a;

SELECT * FROM test ORDER BY a;

COMMIT;

SELECT * FROM test ORDER BY a;

CREATE TABLE test (a TEXT);

INSERT INTO test VALUES ('hello'), ('world');

BEGIN;

SELECT * FROM test ORDER BY a;

SELECT * FROM test ORDER BY a;

DELETE FROM test WHERE a = 'hello';

SELECT * FROM test ORDER BY a;

SELECT * FROM test ORDER BY a;

UPDATE test SET a = 'hello';

SELECT * FROM test ORDER BY a;

SELECT * FROM test ORDER BY a;

COMMIT;

SELECT * FROM test ORDER BY a;

SET default_null_order = 'nulls_first';

CREATE TABLE test (a TEXT);

INSERT INTO test VALUES ('a'), ('b'), ('c'), (NULL);

INSERT INTO test SELECT * FROM test;

INSERT INTO test SELECT * FROM test;

INSERT INTO test SELECT * FROM test;

INSERT INTO test SELECT * FROM test;

INSERT INTO test SELECT * FROM test;

INSERT INTO test SELECT * FROM test;

INSERT INTO test SELECT * FROM test;

INSERT INTO test SELECT * FROM test;

SELECT DISTINCT a FROM test ORDER BY a;

SELECT DISTINCT a FROM test ORDER BY a;

BEGIN;

UPDATE test SET a = 'aa' WHERE a = 'a';

SELECT DISTINCT a FROM test ORDER BY a;

SELECT DISTINCT a FROM test ORDER BY a;

ROLLBACK;

SELECT DISTINCT a FROM test ORDER BY a;

SELECT DISTINCT a FROM test ORDER BY a;

UPDATE test SET a = 'aa' WHERE a = 'a';

SELECT DISTINCT a FROM test ORDER BY a;

SELECT DISTINCT a FROM test ORDER BY a;

SET default_null_order = 'nulls_first';

SET immediate_transaction_mode = TRUE;

CREATE TABLE test (a TEXT);

INSERT INTO test VALUES ('hello'), ('world');

BEGIN;

UPDATE test SET a = NULL WHERE a = 'world';

SELECT * FROM test ORDER BY a;

SELECT * FROM test ORDER BY a;

COMMIT;

SELECT * FROM test ORDER BY a;

CREATE TABLE test (a TEXT);

INSERT INTO test VALUES ('hello'), ('world');

BEGIN;

UPDATE test SET a = 'test' WHERE a = 'hello';

SELECT * FROM test ORDER BY a;

SELECT * FROM test ORDER BY a;

ROLLBACK;

SELECT * FROM test ORDER BY a;

SELECT * FROM test ORDER BY a;

UPDATE test SET a = 'test' WHERE a = 'hello';

BEGIN;

UPDATE test SET a = 'test2' WHERE a = 'test';

SELECT * FROM test ORDER BY a;

SELECT * FROM test ORDER BY a;

ROLLBACK;

SELECT * FROM test ORDER BY a;

SELECT * FROM test ORDER BY a;

BEGIN;

UPDATE test SET a = 'test2' WHERE a = 'world';

SELECT * FROM test ORDER BY a;

SELECT * FROM test ORDER BY a;

ROLLBACK;

SELECT * FROM test ORDER BY a;

SELECT * FROM test ORDER BY a;

SET default_null_order = 'nulls_first';

CREATE TABLE test (a TEXT);

INSERT INTO test VALUES ('test'), ('world');

BEGIN;

UPDATE test SET a = NULL WHERE a = 'world';

SELECT * FROM test ORDER BY a;

SELECT * FROM test ORDER BY a;

ROLLBACK;

SELECT * FROM test ORDER BY a;

SELECT * FROM test ORDER BY a;

UPDATE test SET a = NULL WHERE a = 'world';

SELECT * FROM test ORDER BY a;

BEGIN;

UPDATE test SET a = 'world' WHERE a IS NULL;

SELECT * FROM test ORDER BY a;

SELECT * FROM test ORDER BY a;

ROLLBACK;

SELECT * FROM test ORDER BY a;

SELECT * FROM test ORDER BY a;

PRAGMA enable_verification;

CREATE TABLE t1 AS SELECT * FROM GENERATE_SERIES(0, 1999, 1) AS tbl(i);

CREATE TABLE t2 AS SELECT * FROM GENERATE_SERIES(0, 4999, 1) AS tbl(i);

SELECT SUM(i) FROM t1;

SELECT SUM(i) FROM t2;

SELECT COUNT(*) FROM t1, t2 WHERE t1.i < 33;

SELECT COUNT(*) FROM t1, t2 WHERE t2.i < 33;

UPDATE t1 SET i = 33 FROM t2 WHERE t1.i < 33;

UPDATE t2 SET i = 33 FROM t1 WHERE t2.i < 33;

SELECT SUM(i) FROM t1;

SELECT SUM(i) FROM t2;

UPDATE t1 SET i = 34 FROM t2 WHERE t1.i = 33 AND t1.i <> t2.i;

UPDATE t2 SET i = 34 FROM t1 WHERE t2.i = 33 AND t1.i <> t2.i;

SELECT SUM(i) FROM t1;

SELECT SUM(i) FROM t2;

UPDATE t1 SET i = 35 FROM t2 WHERE t1.i = 34 AND t1.i < t2.i;

UPDATE t2 SET i = 35 FROM t1 WHERE t2.i = 34 AND t2.i < t1.i;

SELECT SUM(i) FROM t1;

SELECT SUM(i) FROM t2;

PRAGMA enable_verification;

CREATE TABLE test (a INT);

INSERT INTO test VALUES (3);

SELECT * FROM test;

SELECT * FROM test WHERE a = 3;

BEGIN;

UPDATE test SET a = 1;

SELECT * FROM test;

SELECT * FROM test WHERE a = 1;

SELECT * FROM test;

SELECT * FROM test WHERE a = 3;

COMMIT;

SELECT * FROM test;

SELECT * FROM test;

BEGIN;

UPDATE test SET a = 4;

SELECT * FROM test;

SELECT * FROM test;

ROLLBACK;

SELECT * FROM test;

SELECT * FROM test WHERE a = 1;

SELECT * FROM test;

CREATE TABLE test (a INT);

INSERT INTO test VALUES (1), (2), (3);

BEGIN;

BEGIN;

UPDATE test SET a = a + 1;

DELETE FROM test;

SELECT * FROM test ORDER BY a;

SELECT * FROM test ORDER BY a;

COMMIT;

COMMIT;

CREATE TABLE test (a INT);

INSERT INTO test VALUES (3);

CREATE TABLE src (a INT);

INSERT INTO src VALUES (2);

SELECT * FROM test;

SELECT * FROM src;

UPDATE test SET a = test.a + s.a FROM src AS s;

SELECT * FROM test;

UPDATE test SET a = test.a + t.a FROM test AS t;

SELECT * FROM test;

UPDATE test SET a = t.a + s.a FROM test AS t, src AS s;

SELECT * FROM test;

UPDATE test SET a = s.q FROM (SELECT a + 1 AS q FROM src) AS s;

SELECT * FROM test;

CREATE VIEW vt AS (SELECT 17 AS v);

UPDATE test SET a = v FROM vt;

SELECT * FROM test;

UPDATE test SET a = s.a FROM src AS s WHERE s.a = 2;

SELECT * FROM test;

UPDATE test AS t SET a = 1 FROM src AS s WHERE s.a = t.a;

SELECT * FROM test;

UPDATE test AS t SET a = 9 FROM src AS s WHERE s.a = t.a;

SELECT * FROM test;

INSERT INTO src VALUES (7);

UPDATE test SET a = s.a FROM src AS s;

SELECT * FROM test;

CREATE TABLE terms (docid INT, term INT);

CREATE TABLE docs (id INT, len INT);

INSERT INTO docs VALUES (1, 0), (2, 0);

INSERT INTO terms VALUES (1, 1);

INSERT INTO terms VALUES (2, 1);

INSERT INTO terms VALUES (2, 2);

INSERT INTO terms VALUES (2, 3);

UPDATE docs SET len = sq.len FROM (SELECT docid AS id, COUNT(term) AS len FROM terms GROUP BY docid ORDER BY docid) AS sq WHERE docs.id = sq.id;

SELECT * FROM docs;

PRAGMA enable_verification;

CREATE TABLE student (id INT, name TEXT, PRIMARY KEY (id));

INSERT INTO student SELECT i, 'creator' FROM RANGE(0, 260001) AS tbl(i);

SELECT name FROM student WHERE id = 122879;

SELECT name FROM student WHERE id = 122881;

SELECT name FROM student WHERE id = 245780;

SELECT name FROM student WHERE id = 150881;

UPDATE student SET name = 'updator0' WHERE id = 122879;

UPDATE student SET name = 'updator1' WHERE id = 122881;

UPDATE student SET name = 'updator2' WHERE id = 245780;

UPDATE student SET name = 'updator3' WHERE id = 150881;

SELECT name FROM student WHERE id = 122879;

SELECT name FROM student WHERE id = 122881;

SELECT name FROM student WHERE id = 245780;

SELECT name FROM student WHERE id = 150881;

CREATE TABLE student (id INT, name TEXT, PRIMARY KEY (id));

INSERT INTO student SELECT i, 'creator' FROM RANGE(0, 130001) AS tbl(i);

SELECT id, name FROM student WHERE id = 122881;

UPDATE student SET name = 'updator' WHERE id = 122881;

SELECT id, name FROM student WHERE id = 122881;

SELECT id, name FROM student WHERE id = 122881;

SET immediate_transaction_mode = TRUE;

CREATE TABLE test (a INT);

INSERT INTO test VALUES (1), (2), (3);

BEGIN;

UPDATE test SET a = 4 WHERE a = 1;

BEGIN;

UPDATE test SET a = 5 WHERE a = 2;

BEGIN;

UPDATE test SET a = 6 WHERE a = 3;

BEGIN;

SELECT * FROM test ORDER BY a;

SELECT * FROM test ORDER BY a;

SELECT * FROM test ORDER BY a;

SELECT * FROM test ORDER BY a;

UPDATE test SET a = 99 WHERE a = 1;

UPDATE test SET a = 99 WHERE a = 2;

UPDATE test SET a = 99 WHERE a = 3;

UPDATE test SET a = a - 3;

ROLLBACK;

ROLLBACK;

ROLLBACK;

ROLLBACK;

BEGIN;

UPDATE test SET a = 4 WHERE a = 1;

BEGIN;

UPDATE test SET a = 5 WHERE a = 2;

BEGIN;

UPDATE test SET a = 6 WHERE a = 3;

BEGIN;

SELECT * FROM test ORDER BY a;

SELECT * FROM test ORDER BY a;

SELECT * FROM test ORDER BY a;

SELECT * FROM test ORDER BY a;

UPDATE test SET a = 7 WHERE a = 4;

UPDATE test SET a = 8 WHERE a = 5;

UPDATE test SET a = 9 WHERE a = 6;

SELECT * FROM test ORDER BY a;

SELECT * FROM test ORDER BY a;

SELECT * FROM test ORDER BY a;

SELECT * FROM test ORDER BY a;

SELECT * FROM test ORDER BY a;

COMMIT;

SELECT * FROM test ORDER BY a;

SELECT * FROM test ORDER BY a;

SELECT * FROM test ORDER BY a;

SELECT * FROM test ORDER BY a;

COMMIT;

SELECT * FROM test ORDER BY a;

SELECT * FROM test ORDER BY a;

SELECT * FROM test ORDER BY a;

SELECT * FROM test ORDER BY a;

COMMIT;

SELECT * FROM test ORDER BY a;

SELECT * FROM test ORDER BY a;

SELECT * FROM test ORDER BY a;

SELECT * FROM test ORDER BY a;

COMMIT;

SELECT * FROM test ORDER BY a;

SET default_null_order = 'nulls_first';

SET immediate_transaction_mode = TRUE;

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

PRAGMA enable_verification;

CREATE TABLE test (a INT);

INSERT INTO test VALUES (1), (2), (3);

BEGIN;

UPDATE test SET a = NULL WHERE a = 1;

BEGIN;

UPDATE test SET a = NULL WHERE a = 2;

BEGIN;

UPDATE test SET a = NULL WHERE a = 3;

BEGIN;

SELECT COUNT(*) FROM test WHERE a IS NULL;

UPDATE test SET a = 99 WHERE a IS NULL;

BEGIN;

SELECT * FROM test ORDER BY a;

SELECT * FROM test ORDER BY a;

SELECT * FROM test ORDER BY a;

SELECT * FROM test ORDER BY a;

SELECT * FROM test ORDER BY a;

UPDATE test SET a = 99 WHERE a = 1;

UPDATE test SET a = 99 WHERE a = 2;

UPDATE test SET a = 99 WHERE a = 3;

UPDATE test SET a = 99 WHERE a IS NULL;

SET immediate_transaction_mode = TRUE;

CREATE TABLE test (a INT);

INSERT INTO test VALUES (1), (2), (3);

SELECT SUM(a) FROM test;

BEGIN;

INSERT INTO test VALUES (4), (5), (6);

SELECT SUM(a) FROM test;

SELECT SUM(a) FROM test;

DELETE FROM test WHERE a < 4;

SELECT SUM(a) FROM test;

SELECT SUM(a) FROM test;

UPDATE test SET a = a - 3;

SELECT SUM(a) FROM test;

SELECT SUM(a) FROM test;

COMMIT;

SELECT SUM(a) FROM test;

SELECT SUM(a) FROM test;

CREATE TABLE test (a TEXT);

INSERT INTO test VALUES ('hello'), ('world');

BEGIN;

UPDATE test SET a = 'test' WHERE a = 'hello';

SELECT * FROM test ORDER BY a;

UPDATE test SET a = 'test2' WHERE a = 'world';

SELECT * FROM test ORDER BY a;

COMMIT;

SELECT * FROM test ORDER BY a;

PRAGMA enable_verification;

CREATE TABLE test (a INT);

INSERT INTO test VALUES (1), (2), (3);

SELECT * FROM test ORDER BY a;

BEGIN;

UPDATE test SET a = a + 1;

SELECT * FROM test;

SELECT * FROM test WHERE a = 4;

SELECT * FROM test;

UPDATE test SET a = a + 1;

SELECT * FROM test ORDER BY a;

SELECT * FROM test ORDER BY a;

COMMIT;

SELECT * FROM test ORDER BY a;

SELECT * FROM test ORDER BY a;

BEGIN;

SELECT * FROM test;

SELECT * FROM test WHERE a = 5;

UPDATE test SET a = 9 WHERE a = 5;

SELECT * FROM test ORDER BY a;

UPDATE test SET a = a + 1;

SELECT * FROM test ORDER BY a;

UPDATE test SET a = 7 WHERE a = 3;

SELECT * FROM test ORDER BY a;

UPDATE test SET a = a + 1;

SELECT * FROM test ORDER BY a;

UPDATE test SET a = 8 WHERE a = 4;

SELECT * FROM test ORDER BY a;

UPDATE test SET a = a + 1;

SELECT * FROM test ORDER BY a;

COMMIT;

SELECT * FROM test ORDER BY a;

SELECT * FROM test ORDER BY a;

PRAGMA enable_verification;

CREATE TABLE a (b INT);

BEGIN;

INSERT INTO a VALUES (1);

UPDATE a SET b = b + 10;

COMMIT;

UPDATE a SET b = b + 10;

SELECT * FROM a;

CREATE TABLE t1 (c0 INT);

INSERT INTO t1 (c0) VALUES (1), (2), (3);

SET wal_autocheckpoint = '1TB';

CREATE TABLE test (id BIGINT PRIMARY KEY, c1 TEXT);

INSERT INTO test (id, c1) VALUES (1, 'foo');

INSERT INTO test (id, c1) VALUES (2, 'bar');

BEGIN;

DELETE FROM test WHERE id = 1;

UPDATE test SET c1 = 'baz' WHERE id = 2;

COMMIT;

SELECT * FROM test ORDER BY id;

SELECT * FROM test ORDER BY id;

SET wal_autocheckpoint = '1TB';

CREATE TABLE t (i INT, j INT);

INSERT INTO t SELECT ii, NULL FROM RANGE(0, 1024) AS tbl(ii);

SELECT COUNT(j), MIN(j), MAX(j) FROM t;

CHECKPOINT;

SELECT COUNT(j), MIN(j), MAX(j) FROM t;

UPDATE t SET j = 1;

SELECT COUNT(j), MIN(j), MAX(j) FROM t;

PRAGMA enable_verification;

CREATE TABLE tbl (a INT, b INT UNIQUE, c INT DEFAULT 10);

INSERT INTO tbl (a, b) VALUES (1, 2), (2, 1);

INSERT OR replace INTO tbl (a, b, c) VALUES (5, 2, 20), (10, 1, 30);

SELECT a, b, c FROM tbl;

INSERT OR replace INTO tbl (a, b) VALUES (5, 2);

SELECT c FROM tbl;

INSERT OR replace INTO tbl AS not_tbl(a, b) VALUES (5, 2);

SELECT c FROM tbl;

PRAGMA enable_verification;

CREATE OR REPLACE TABLE tbl (i INT PRIMARY KEY, j INT UNIQUE, k INT);

INSERT INTO tbl VALUES (1, 10, 1), (2, 20, 1), (3, 30, 2);

SELECT * FROM tbl;

INSERT INTO tbl VALUES (3, 5, 1) ON CONFLICT(i) DO UPDATE SET k = k + excluded.k;

SELECT * FROM tbl;

PRAGMA enable_verification;

CREATE OR REPLACE TABLE tbl (a INT DEFAULT 3);

INSERT INTO tbl VALUES ((3 + "DEFAULT"));

PRAGMA enable_verification;

SET preserve_insertion_order = FALSE;

CREATE TABLE integers (i INT UNIQUE, j INT DEFAULT 0, k INT DEFAULT 0);

INSERT INTO integers (i) SELECT i FROM RANGE(0, 5000) AS tbl(i);

SELECT COUNT(*) FROM integers;

INSERT INTO integers SELECT * FROM integers ON CONFLICT DO NOTHING;

INSERT INTO integers SELECT * FROM integers ON CONFLICT DO UPDATE SET j = 10;

SELECT COUNT(*) FILTER(WHERE j = 10) FROM integers;

INSERT INTO integers (i, j) SELECT i % 5, i FROM RANGE(4995, 5000) AS tbl(i) ON CONFLICT DO UPDATE SET j = excluded.j, k = excluded.i;

SELECT j FROM integers LIMIT 5;

INSERT INTO integers (i, j) SELECT CASE WHEN i % 2 = 0 THEN 4999 - (i // 2) ELSE i - ((i // 2) + 1) END, i FROM RANGE(0, 5000) AS tbl(i) ON CONFLICT DO UPDATE SET j = excluded.j;

SELECT j FROM integers LIMIT 5;

SELECT j FROM integers LIMIT 5 OFFSET 4995;

UPDATE integers SET j = 0;

INSERT INTO integers (i, j) SELECT CASE WHEN i % 2 = 0 THEN 4999 - (i // 2) ELSE i - ((i // 2) + 1) END, i FROM RANGE(0, 5000) AS tbl(i) ON CONFLICT DO UPDATE SET j = excluded.j WHERE i % 2 = 0 AND excluded.j % 2 = 0;

SELECT COUNT(j) FILTER(WHERE j <> 0) FROM integers;

PRAGMA enable_verification;

SET preserve_insertion_order = FALSE;

CREATE TABLE integers (i INT UNIQUE, j INT DEFAULT 0, k INT DEFAULT 0);

INSERT INTO integers (i) SELECT i FROM RANGE(0, 5000) AS tbl(i);

INSERT INTO integers (i, j) SELECT i % 5, i FROM RANGE(0, 5000) AS tbl(i) ON CONFLICT DO UPDATE SET j = excluded.j, k = excluded.i;

CREATE TABLE users (id BIGINT PRIMARY KEY, username TEXT UNIQUE, email TEXT);
mode AS skip;

INSERT INTO users (id, username, email) VALUES (3, 'inner_conflict', 'test'), (3, 'inner_conflict2', 'other_test'), (3, 'inner_conflict3', 'filtered_out') ON CONFLICT(id) DO UPDATE SET email = EXCLUDED.email WHERE EXCLUDED.email <> 'filtered_out';

INSERT INTO users (id, username, email) VALUES (3, 'inner_conflict', 'test'), (3, 'inner_conflict2', 'other_test'), (3, 'inner_conflict3', 'yet_another_test'), (3, 'inner_conflict4', 'dont_skip_me') ON CONFLICT(id) DO UPDATE SET email = EXCLUDED.email WHERE email <> 'other_test' OR EXCLUDED.email = 'dont_skip_me' RETURNING *;

PRAGMA enable_verification;

CREATE TABLE tbl (i INT, j INT UNIQUE);

INSERT INTO tbl VALUES (5, 3), (6, 7);

INSERT INTO tbl VALUES (5, 3), (6, 7);

SELECT * FROM tbl;

INSERT INTO tbl AS test VALUES (2, 3) ON CONFLICT DO UPDATE SET i = test.i;

SELECT * FROM tbl;

SELECT * FROM tbl;

SELECT * FROM tbl;

SELECT * FROM tbl;

INSERT INTO tbl AS test(j, i) VALUES (5, 3) ON CONFLICT(j) DO UPDATE SET i = 10 WHERE test.j <= 3;

SELECT * FROM tbl;

INSERT INTO tbl AS test(j, i) VALUES (5, 3) ON CONFLICT(j) DO UPDATE SET i = 10 WHERE test.j > 3;

SELECT * FROM tbl;

INSERT INTO tbl AS excluded VALUES (8, 3) ON CONFLICT(j) DO UPDATE SET i = 5;

PRAGMA enable_verification;

CREATE OR REPLACE TABLE tbl (i INT PRIMARY KEY, j INT UNIQUE, k INT);

INSERT INTO tbl VALUES (1, 10, 1), (2, 20, 1), (3, 30, 2);

INSERT INTO tbl VALUES (3, 5, 1) ON CONFLICT(i) DO UPDATE SET i = i + 1;

SELECT i, j, k FROM tbl ORDER BY ALL;

SELECT i, j, k FROM tbl WHERE i = 4;

INSERT INTO tbl VALUES (4, 30, 2) ON CONFLICT(i) DO UPDATE SET i = i - 1;

SELECT i, j, k FROM tbl ORDER BY ALL;

INSERT INTO tbl VALUES (3, 30, 2) ON CONFLICT(i) DO UPDATE SET i = i - 2;

INSERT INTO tbl VALUES (3, 5, 1) ON CONFLICT(i) DO UPDATE SET k = k + excluded.k;

SELECT * FROM tbl;

INSERT INTO tbl VALUES (3, 5, 1) ON CONFLICT(k) DO UPDATE SET k = excluded.k;

INSERT INTO tbl VALUES (3, 5, 1) ON CONFLICT(i) DO UPDATE SET k = excluded.k;

SELECT * FROM tbl;

INSERT INTO tbl VALUES (4, 2, 3), (3, 5, 10) ON CONFLICT(i) DO NOTHING;

SELECT * FROM tbl;

INSERT INTO tbl VALUES (3, 1, 5), (3, 3, 10) ON CONFLICT(i) DO UPDATE SET k = excluded.k;

SELECT * FROM tbl;

SELECT * FROM tbl;

SELECT * FROM tbl;

SELECT * FROM tbl;

INSERT INTO tbl VALUES (3, 5, 3) ON CONFLICT(i) DO UPDATE SET k = 10 WHERE k <> 1;

SELECT * FROM tbl;

INSERT INTO tbl VALUES (3, 5, 3) ON CONFLICT(i) DO UPDATE SET k = 10 WHERE k = 1;

SELECT * FROM tbl;

INSERT INTO tbl VALUES (5, 1, 0), (3, 5, 20) ON CONFLICT DO NOTHING;

SELECT * FROM tbl;

INSERT INTO tbl VALUES (5, 1, 0), (3, 5, 20) ON CONFLICT DO UPDATE SET k = excluded.k;

CREATE OR REPLACE TABLE single_constraint (i INT PRIMARY KEY, j INT, k TEXT);

INSERT INTO single_constraint VALUES (5, 1, 'hello'), (1, 10, 'test');

INSERT INTO single_constraint VALUES (1, 5, 'bye'), (3, 10, 'quack') ON CONFLICT DO UPDATE SET j = excluded.j, k = CONCAT(k, excluded.k);

SELECT * FROM single_constraint;

PRAGMA enable_verification;

CREATE OR REPLACE TABLE tbl (a INT, b INT, c INT, PRIMARY KEY (a, b));

INSERT INTO tbl VALUES (1, 2, 3), (1, 2, 3);

INSERT INTO tbl VALUES (1, 2, 3), (1, 4, 5);

INSERT INTO tbl VALUES (1, 4, 7), (1, 8, 4) ON CONFLICT(a) DO UPDATE SET c = 5;

INSERT INTO tbl VALUES (1, 4, 7), (1, 8, 4) ON CONFLICT(b) DO UPDATE SET c = 5;

INSERT INTO tbl VALUES (1, 4, 7), (1, 8, 4) ON CONFLICT(a, b) DO UPDATE SET c = 5;

SELECT a, b, c FROM tbl ORDER BY ALL;

PRAGMA enable_verification;

CREATE OR REPLACE TABLE index_tbl (i INT, j INT);

INSERT INTO index_tbl VALUES (5, 3);

CREATE UNIQUE INDEX other_index ON index_tbl(i);

INSERT INTO index_tbl VALUES (5, 5);

SELECT * FROM index_tbl;

INSERT INTO index_tbl VALUES (5, 10) ON CONFLICT ON CONSTRAINT other_index DO UPDATE SET j = excluded.j;

PRAGMA enable_verification;

CREATE TABLE tbl (a INT, b INT UNIQUE, c INT UNIQUE, d INT UNIQUE);

INSERT INTO tbl (b, c, d) VALUES (1, 2, 3), (2, 3, 1), (3, 1, 2);

PRAGMA enable_verification;

CREATE TABLE tbl (a INT DEFAULT 5, b INT UNIQUE, c INT DEFAULT 10);

INSERT INTO tbl (b) VALUES (3), (5), (6);

INSERT INTO tbl (b) VALUES (7), (3), (4) ON CONFLICT DO UPDATE SET c = 5, a = 10;

SELECT * FROM tbl;

CREATE TABLE t (i INT PRIMARY KEY, j INT);

INSERT INTO t VALUES (1, 1) ON CONFLICT DO NOTHING;

INSERT INTO t VALUES (1, 1) ON CONFLICT DO NOTHING;

INSERT INTO t VALUES (1, 1) ON CONFLICT(i) DO UPDATE SET j = excluded.i;

PRAGMA enable_verification;

CREATE OR REPLACE TABLE tbl (a INT PRIMARY KEY DEFAULT 4, b INT DEFAULT 3);

INSERT INTO tbl VALUES (2, 3), (4, 5);

SELECT * FROM tbl;

INSERT INTO tbl VALUES (DEFAULT, 6) ON CONFLICT(a) DO UPDATE SET b = "DEFAULT";

SELECT * FROM tbl;

SELECT * FROM tbl;

INSERT INTO tbl VALUES (4, 3) ON CONFLICT(a) DO UPDATE SET b = excluded.b WHERE excluded.b = "DEFAULT" * 2;

PRAGMA enable_verification;

CREATE OR REPLACE TABLE tbl (a INT PRIMARY KEY DEFAULT 5, b INT);

CREATE OR REPLACE TABLE tbl (a INT PRIMARY KEY DEFAULT 5, b INT);

SELECT * FROM tbl;

PRAGMA enable_verification;

CREATE OR REPLACE TABLE tbl (a INT PRIMARY KEY DEFAULT 5, b INT);

INSERT INTO tbl (b) VALUES (10);

SELECT * FROM tbl;

INSERT INTO tbl (b) VALUES (10);

INSERT INTO tbl (b) VALUES (10) ON CONFLICT(a) DO NOTHING;

SELECT * FROM tbl;

INSERT INTO tbl (b) VALUES (10) ON CONFLICT(a) DO UPDATE SET b = excluded.b * 2;

SELECT * FROM tbl;

CREATE TABLE test_table_raw (id TEXT, name TEXT);

INSERT INTO test_table_raw VALUES ('abc001', 'foo'), ('abc002', 'bar'), ('abc001', 'foo2'), ('abc002', 'bar2');

CREATE TABLE test_table (id TEXT PRIMARY KEY, name TEXT);

INSERT INTO test_table SELECT DISTINCT (id) AS id, name FROM test_table_raw;

INSERT INTO test_table SELECT DISTINCT (id) AS id, name FROM test_table_raw;

INSERT OR IGNORE INTO test_table SELECT DISTINCT (id) AS id, name FROM test_table_raw;

PRAGMA enable_verification;
require AS parquet;

CREATE TABLE tmp_edges (from_v TEXT, to_v TEXT, PRIMARY KEY (from_v, to_v));

PRAGMA enable_verification;

CREATE OR REPLACE TABLE tbl (a INT PRIMARY KEY, b INT);

INSERT INTO tbl VALUES (1, 2), (2, 2);

SELECT * FROM tbl;

INSERT INTO tbl VALUES (1, 3), (3, 4);

INSERT INTO tbl VALUES (1, 3), (3, 4) ON CONFLICT(a) DO UPDATE SET b = excluded.b;

SELECT * FROM tbl;

SELECT * FROM tbl;

SELECT * FROM tbl;

SELECT * FROM tbl;

INSERT INTO tbl VALUES (3, 8), (2, 2), (7, 2) ON CONFLICT(a) DO UPDATE SET b = b * 2 WHERE b = excluded.b;

SELECT * FROM tbl;

PRAGMA enable_verification;

CREATE TABLE tbl (i INT, j INT);

INSERT INTO tbl VALUES (5, 3), (3, 2);

CREATE UNIQUE INDEX my_index ON tbl(i);

INSERT INTO tbl VALUES (5, 2) ON CONFLICT(i) DO UPDATE SET j = 10;

SELECT i, j FROM tbl ORDER BY ALL DESC;

DROP TABLE tbl CASCADE;

CREATE TABLE tbl (i INT PRIMARY KEY, j INT);

INSERT INTO tbl VALUES (42, 21), (21, 42);

CREATE INDEX my_index ON tbl(j);

INSERT INTO tbl VALUES (42, 20) ON CONFLICT DO UPDATE SET j = 30;

SELECT i, j, rowid FROM tbl WHERE j = 30;

SELECT i, j, rowid FROM tbl ORDER BY ALL;

CREATE TABLE tbl (number INT PRIMARY KEY, str TEXT);

INSERT INTO tbl VALUES (1, 'd'), (3, 'nope'), (2, 'n');

INSERT INTO tbl VALUES (1, 'a') /* conflict (existing) */, (6, 'yep'), (3, 'abc') /* conflict (existing) */, (4, 'abc'), (7, 'tes'), (2, 'b') /* conflict (existing) */, (1, 'c') /* conflict (existing + inner) */, (5, 'abc'), (7, 'tes') /* conflict (inner) */, (2, 'b') /* conflict (existing + inner) */ ON CONFLICT(number) DO UPDATE SET str = excluded.str || 'e';

SELECT * FROM tbl;

CREATE TABLE tbl (i INT PRIMARY KEY);

INSERT INTO tbl VALUES (1);

INSERT INTO tbl SELECT 1 FROM RANGE(0, 2) ON CONFLICT DO NOTHING;

SELECT * FROM tbl;

PRAGMA enable_verification;

CREATE OR REPLACE TABLE foo (pk_col INT PRIMARY KEY, str TEXT, str_list TEXT[], payload_col INT);

INSERT INTO foo SELECT 1, 'hello', ['x', 'y', 'z'], 40 ON CONFLICT DO UPDATE SET str = LIST_REDUCE(EXCLUDED.str_list, (x, y) -> x || '||' || y);

SELECT * FROM foo;

INSERT INTO foo SELECT 1, 'world', ['a', 'b', 'c'], 41 ON CONFLICT DO UPDATE SET str = LIST_REDUCE(EXCLUDED.str_list, (x, y) -> x || '||' || y);

SELECT * FROM foo;

INSERT INTO foo SELECT 1, '', ['1', '2'], 42 ON CONFLICT DO UPDATE SET str = LIST_REDUCE(EXCLUDED.str_list, (x, y) -> x || '||' || y), payload_col = EXCLUDED.payload_col;

SELECT * FROM foo;

INSERT INTO foo SELECT 1, '', ['l', 'm', 'n'], 43 ON CONFLICT DO UPDATE SET str = LIST_REDUCE(str_list, (x, y) -> x || '||' || y);

SELECT * FROM foo;

INSERT INTO foo SELECT 1, 'world', ['s', 't'], 42 ON CONFLICT DO UPDATE SET str = LIST_REDUCE(EXCLUDED.str_list, (x, y) -> x || str || y || EXCLUDED.str);

SELECT * FROM foo;

INSERT INTO foo SELECT 1, 'motorcycle', ['brrr', 'brrrrrr'], 1042 ON CONFLICT DO UPDATE SET str = 'black-bellied whistling duck' WHERE LIST_REDUCE(EXCLUDED.str_list, (x, y) -> x || str || y || EXCLUDED.str) = 'brrrsx||y||ztworldbrrrrrrmotorcycle';

SELECT * FROM foo;

PRAGMA enable_verification;

CREATE TABLE tbl (a SMALLINT PRIMARY KEY, b SMALLINT);

INSERT INTO tbl (a, b) VALUES (1, 2);

BEGIN;

INSERT INTO tbl (a, b) VALUES (1, 2) ON CONFLICT DO NOTHING;

SELECT * FROM tbl WHERE a = 1;

INSERT INTO tbl (a, b) VALUES (1, 2) ON CONFLICT DO NOTHING;

SELECT * FROM tbl WHERE a = 1;

COMMIT;

BEGIN;

INSERT INTO tbl (a, b) VALUES (5, 4);

INSERT INTO tbl (a, b) VALUES (1, 2) ON CONFLICT DO NOTHING;

SELECT * FROM tbl ORDER BY a;

PRAGMA enable_verification;

CREATE OR REPLACE TABLE tbl (i INT UNIQUE, j INT, k INT PRIMARY KEY);

INSERT INTO tbl VALUES (3, 4, 2), (5, 3, 1);

SELECT * FROM tbl;

INSERT INTO tbl (k, i) VALUES (2, 3), (4, 4), (1, 8) ON CONFLICT(k) DO UPDATE SET j = excluded.j;

SELECT * FROM tbl;

INSERT INTO tbl (i, k) VALUES (3, 2), (5, 5) ON CONFLICT(k) DO UPDATE SET j = 10;

SELECT * FROM tbl;

INSERT INTO tbl (i, k) VALUES (3, 10), (6, 2) ON CONFLICT(i) DO UPDATE SET j = 10;

SELECT * FROM tbl;

PRAGMA enable_verification;

CREATE OR REPLACE TABLE tbl (a INT PRIMARY KEY, b INT);

INSERT INTO tbl VALUES (1, 3), (2, 2), (3, 10), (4, 3);

INSERT INTO tbl VALUES (3, 8), (2, 2) ON CONFLICT(a) DO UPDATE SET b = b * 2 WHERE b = excluded.b;

SELECT * FROM tbl;

CREATE TABLE users (id BIGINT PRIMARY KEY, username TEXT UNIQUE, email TEXT);

INSERT INTO users (id, username, email) VALUES (1, 'john_doe', 'john@example.com') ON CONFLICT(username) DO NOTHING RETURNING *;

INSERT INTO users (id, username, email) VALUES (1, 'john_doe', 'john@example.com') ON CONFLICT(username) DO NOTHING RETURNING *;

INSERT INTO users (id, username, email) VALUES (1, 'john_doe', 'john_new@example.com') ON CONFLICT(id) DO UPDATE SET email = EXCLUDED.email WHERE EXCLUDED.email <> 'john_new@example.com' RETURNING *;

INSERT INTO users (id, username, email) VALUES (1, 'john_doe', 'john_new@example.com'), (2, 'not_john_doe', 'not_john_new@example.com') ON CONFLICT(id) DO UPDATE SET email = EXCLUDED.email WHERE EXCLUDED.email <> 'john_new@example.com' RETURNING *;

INSERT INTO users (id, username, email) VALUES (3, 'inner_conflict', 'test'), (4, 'a', ''), (5, 'b', ''), (6, 'c', ''), (3, 'inner_conflict2', 'other_test'), (7, 'd', ''), (8, 'e', ''), (9, 'f', ''), (3, 'inner_conflict3', 'yet_another_test') ON CONFLICT(id) DO UPDATE SET email = EXCLUDED.email WHERE EXCLUDED.email <> 'test' RETURNING *;

PRAGMA enable_verification;

CREATE OR REPLACE TABLE tbl (i INT PRIMARY KEY, j INT UNIQUE, k INT);

INSERT INTO tbl VALUES (1, 10, 1), (2, 20, 1), (3, 30, 2);

INSERT INTO tbl VALUES (3, 5, 1) ON CONFLICT(i) DO UPDATE SET k = 5;

SELECT * FROM tbl;

INSERT INTO tbl VALUES (3, 5, 1) ON CONFLICT(i) DO UPDATE SET k = 1 + excluded.k;

SELECT * FROM tbl;

INSERT INTO tbl VALUES (3, 5, 1) ON CONFLICT(i) DO UPDATE SET k = k + excluded.k;

SELECT * FROM tbl;

PRAGMA enable_verification;

CREATE TABLE tbl (a INT, b INT UNIQUE);

INSERT INTO tbl VALUES (1, 2), (2, 1);

INSERT INTO tbl VALUES (1, 2) ON CONFLICT DO UPDATE SET a = excluded.a;

INSERT OR replace INTO tbl VALUES (4, 3) ON CONFLICT DO NOTHING;

INSERT OR ignore INTO tbl VALUES (1, 2), (2, 1);

INSERT OR replace INTO tbl VALUES (5, 2), (10, 1);

SELECT * FROM tbl;

CREATE OR REPLACE TABLE tbl (a INT UNIQUE, b INT UNIQUE);

INSERT OR replace INTO tbl VALUES (1, 2);

BEGIN;

CREATE TABLE tbl (a SMALLINT PRIMARY KEY, b SMALLINT);

INSERT INTO tbl VALUES (1, 2) ON CONFLICT(a) DO UPDATE SET b = excluded.b;

INSERT INTO tbl VALUES (1, 3) ON CONFLICT(a) DO UPDATE SET b = excluded.b;

SELECT * FROM tbl;

COMMIT;

SELECT * FROM tbl;

BEGIN;

INSERT INTO tbl VALUES (2, 1), (3, 1), (4, 1);

INSERT INTO tbl VALUES (2, 1), (3, 1), (4, 1) ON CONFLICT(a) DO NOTHING;

COMMIT;

BEGIN;

INSERT INTO tbl VALUES (5, 0);

INSERT INTO tbl VALUES (5, 0), (5, 1) ON CONFLICT(a) DO UPDATE SET b = excluded.b;

COMMIT;

BEGIN;

INSERT INTO tbl VALUES (6, 0);

INSERT INTO tbl VALUES (5, 0), (6, 0), (7, 0) ON CONFLICT(a) DO UPDATE SET b = excluded.b;

INSERT INTO tbl VALUES (-1, 0), (5, 0), (6, 0) ON CONFLICT(a) DO NOTHING;

COMMIT;

BEGIN;

CREATE OR REPLACE TABLE tbl (a SMALLINT PRIMARY KEY, b SMALLINT);

INSERT INTO tbl (SELECT i, 0 FROM RANGE(0, 2500) AS tbl(i));

SELECT MAX(b) FROM tbl;

INSERT INTO tbl (SELECT i, i FROM RANGE(0, 2500) AS tbl(i)) ON CONFLICT(a) DO UPDATE SET b = excluded.b;

SELECT MAX(b) FROM tbl;

PRAGMA enable_verification;

CREATE OR REPLACE TABLE tbl (a INT UNIQUE, b INT);

INSERT INTO tbl VALUES (3, 2), (1, 3);

INSERT INTO tbl (b) VALUES (5) ON CONFLICT(a) DO UPDATE SET b = 8;

SELECT * FROM tbl;

INSERT INTO tbl (b) VALUES (5) ON CONFLICT(a) DO UPDATE SET b = 8;

SELECT * FROM tbl;

CREATE TABLE tbl (a INT, b INT, c INT, PRIMARY KEY (a, b, c));

CREATE INDEX non_unique ON tbl(b);

INSERT OR replace INTO tbl VALUES (1, 2, 3);

INSERT OR replace INTO tbl VALUES (1, 2, 3);

SELECT * FROM tbl;

CREATE TABLE tbl (a INT, b INT, c INT, PRIMARY KEY (a, b, c));

INSERT OR replace INTO tbl VALUES (1, 2, 3);

INSERT OR replace INTO tbl VALUES (1, 2, 3);

SELECT * FROM tbl;

CREATE TABLE foo (bar TEXT PRIMARY KEY, baz BIGINT);

INSERT OR replace INTO foo (bar, baz) VALUES ('baz', 1) RETURNING bar;

INSERT OR replace INTO foo (bar, baz) VALUES ('baz', 2) RETURNING bar;

INSERT OR replace INTO foo (bar, baz) VALUES ('baz', 1), ('bar', 2) RETURNING bar;

CREATE SEQUENCE seq;

CREATE TABLE bug (id INT PRIMARY KEY DEFAULT NEXTVAL('seq'), name TEXT);

CREATE UNIQUE INDEX idx ON bug(name);

INSERT OR IGNORE INTO bug VALUES (DEFAULT, 'toto') RETURNING (id);

INSERT OR IGNORE INTO bug VALUES (DEFAULT, 'toto') RETURNING (id);

INSERT OR IGNORE INTO bug VALUES (DEFAULT, 'toto'), (DEFAULT, 'yoyo') RETURNING (id);

CREATE TABLE tbl (a INT, b INT, c INT);

CREATE UNIQUE INDEX "unique" ON tbl(a, b);

CREATE INDEX non_unique ON tbl(a, b);

INSERT OR replace INTO tbl VALUES (1, 2, 3);

INSERT OR replace INTO tbl VALUES (1, 2, 3);

SELECT * FROM tbl;

CREATE TABLE tbl (a INT UNIQUE, b INT);

INSERT OR replace INTO tbl VALUES (1, 2);

INSERT OR replace INTO tbl VALUES (1, 2);

SELECT * FROM tbl;

CREATE TABLE multiple_unique (a INT UNIQUE, b INT UNIQUE, c INT);

INSERT OR replace INTO multiple_unique VALUES (1, 2, 3);

CREATE TABLE tbl (a INT UNIQUE, b INT);

CREATE INDEX non_unique ON tbl(a, b);

INSERT OR replace INTO tbl VALUES (1, 2);

INSERT OR replace INTO tbl VALUES (1, 2);

SELECT * FROM tbl;

CREATE TABLE multiple_unique (a INT UNIQUE, b INT UNIQUE, c INT);

INSERT OR replace INTO multiple_unique VALUES (1, 2, 3);

CREATE TABLE tbl (a INT, b INT, c INT);

CREATE UNIQUE INDEX "unique" ON tbl(a, b);

INSERT OR replace INTO tbl VALUES (1, 2, 3);

INSERT OR replace INTO tbl VALUES (1, 2, 3);

SELECT * FROM tbl;

CREATE UNIQUE INDEX idx3 ON tbl(b, c);

INSERT OR replace INTO tbl VALUES (1, 2, 3);

PRAGMA enable_verification;

CREATE TABLE insertconflicttest (key INT, fruit TEXT, other INT, UNIQUE (key, fruit));

INSERT INTO insertconflicttest VALUES (0, 'Crowberry', 0) ON CONFLICT(key) DO NOTHING;

INSERT INTO insertconflicttest VALUES (0, 'Crowberry', 0) ON CONFLICT(fruit) DO NOTHING;

INSERT INTO insertconflicttest VALUES (0, 'Crowberry', 0) ON CONFLICT(key, fruit) DO NOTHING;

INSERT INTO insertconflicttest VALUES (0, 'Crowberry', 0) ON CONFLICT(fruit, key, fruit, key) DO NOTHING;

INSERT INTO insertconflicttest VALUES (0, 'Crowberry', 0) ON CONFLICT(key, fruit) DO UPDATE SET other = 1 WHERE EXISTS(SELECT 1 FROM insertconflicttest AS ii WHERE ii.key = excluded.key);

INSERT INTO insertconflicttest VALUES (7, 'Raspberry', 0) ON CONFLICT(key, fruit) DO UPDATE SET other = 1;

INSERT INTO insertconflicttest VALUES (8, 'Lime', 0) ON CONFLICT(fruit, key) DO UPDATE SET other = 1;

INSERT INTO insertconflicttest VALUES (9, 'Banana', 0) ON CONFLICT(key) DO UPDATE SET other = 1;

INSERT INTO insertconflicttest VALUES (10, 'Blueberry', 0) ON CONFLICT(key, key, key) DO UPDATE SET other = 1;

INSERT INTO insertconflicttest VALUES (11, 'Cherry', 0) ON CONFLICT(key, fruit) DO UPDATE SET other = 1;

INSERT INTO insertconflicttest VALUES (12, 'Date', 0) ON CONFLICT(fruit, key) DO UPDATE SET other = 1;

CREATE UNIQUE INDEX part_comp_key_index ON insertconflicttest(key, fruit) WHERE key < 5;

CREATE UNIQUE INDEX expr_part_comp_key_index ON insertconflicttest(key, fruit) WHERE key < 5;

CREATE UNIQUE INDEX expr_key_index ON insertconflicttest(fruit);

INSERT INTO insertconflicttest VALUES (20, 'Quince', 0) ON CONFLICT(fruit) DO UPDATE SET other = 1;

INSERT INTO insertconflicttest VALUES (21, 'Pomegranate', 0) ON CONFLICT(fruit, fruit) DO UPDATE SET other = 1;

CREATE UNIQUE INDEX expr_comp_key_index ON insertconflicttest(key, fruit);

CREATE UNIQUE INDEX tricky_expr_comp_key_index ON insertconflicttest(key, fruit, fruit);

INSERT INTO insertconflicttest VALUES (24, 'Plum', 0) ON CONFLICT(key, fruit) DO UPDATE SET other = 1;

INSERT INTO insertconflicttest VALUES (25, 'Peach', 0) ON CONFLICT(fruit, key) DO UPDATE SET other = 1;

PRAGMA enable_verification;

CREATE TABLE insertconflicttest (key INT, fruit TEXT, other INT, UNIQUE (key), UNIQUE (fruit));

INSERT INTO insertconflicttest VALUES (25, 'Fig', 0) ON CONFLICT(fruit) DO UPDATE SET other = 1;

INSERT INTO insertconflicttest VALUES (25, 'Fig', 0) ON CONFLICT(fruit) DO UPDATE SET other = 1;

INSERT INTO insertconflicttest VALUES (25, 'Fig', 0) ON CONFLICT(fruit) DO UPDATE SET other = 1;

INSERT INTO insertconflicttest AS i VALUES (23, 'Jackfruit', 0) ON CONFLICT(key) DO UPDATE SET other = 1;

INSERT INTO insertconflicttest AS i VALUES (23, 'Jackfruit', 0) ON CONFLICT(key) DO UPDATE SET other = 1;

INSERT INTO insertconflicttest AS i VALUES (23, 'Jackfruit', 0) ON CONFLICT(key) DO UPDATE SET other = 1;

INSERT INTO insertconflicttest AS i VALUES (23, 'Avocado', 0) ON CONFLICT(key) DO UPDATE SET other = 1;

INSERT INTO insertconflicttest AS i VALUES (23, 'Avocado', 0) ON CONFLICT(key) DO UPDATE SET other = 1;

INSERT INTO insertconflicttest AS i VALUES (23, 'Avocado', 0) ON CONFLICT(key) DO UPDATE SET other = 1;

PRAGMA enable_verification;

CREATE TABLE insertconflicttest (key INT, fruit TEXT, UNIQUE (key));

INSERT INTO insertconflicttest VALUES (0, 'Bilberry') ON CONFLICT(key) DO UPDATE SET fruit = excluded.fruit;

INSERT INTO insertconflicttest VALUES (0, 'Bilberry') ON CONFLICT(key) DO UPDATE SET fruit = excluded.fruit WHERE insertconflicttest.fruit <> 'Cawesh';

INSERT INTO insertconflicttest VALUES (0, 'Crowberry') ON CONFLICT(key) DO UPDATE SET fruit = excluded.fruit WHERE excluded.fruit <> 'Elderberry';

INSERT INTO insertconflicttest VALUES (0, 'Bilberry') ON CONFLICT(key) DO UPDATE SET fruit = excluded.fruit WHERE insertconflicttest.fruit <> 'Lime' RETURNING *;

INSERT INTO insertconflicttest VALUES (1, 'Apple') ON CONFLICT DO UPDATE SET fruit = excluded.fruit;

INSERT INTO insertconflicttest VALUES (1, 'Apple') ON CONFLICT(key) DO UPDATE SET fruit = excluded.fruit;

INSERT INTO insertconflicttest VALUES (2, 'Orange') ON CONFLICT(key, key, key) DO UPDATE SET fruit = excluded.fruit;

INSERT INTO insertconflicttest VALUES (1, 'Apple'), (2, 'Orange') ON CONFLICT(key) DO UPDATE SET fruit = excluded.fruit, key = excluded.key;

INSERT INTO insertconflicttest VALUES (1, 'Apple') ON CONFLICT(key) DO UPDATE SET fruit = excluded.fruit RETURNING excluded.fruit;

INSERT INTO insertconflicttest VALUES (1, 'Apple') ON CONFLICT(keyy) DO UPDATE SET fruit = excluded.fruit;

INSERT INTO insertconflicttest VALUES (1, 'Apple') ON CONFLICT(key) DO UPDATE SET fruit = excluded.fruitt;

INSERT INTO insertconflicttest VALUES (3, 'Kiwi') ON CONFLICT(key, fruit) DO UPDATE SET fruit = excluded.fruit;

INSERT INTO insertconflicttest VALUES (4, 'Mango') ON CONFLICT(fruit, key) DO UPDATE SET fruit = excluded.fruit;

INSERT INTO insertconflicttest VALUES (5, 'Lemon') ON CONFLICT(fruit) DO UPDATE SET fruit = excluded.fruit;

INSERT INTO insertconflicttest VALUES (6, 'Passionfruit') ON CONFLICT(fruit) DO UPDATE SET fruit = excluded.fruit;

INSERT INTO insertconflicttest AS ict VALUES (6, 'Passionfruit') ON CONFLICT(key) DO UPDATE SET fruit = excluded.fruit;

INSERT INTO insertconflicttest AS ict VALUES (6, 'Passionfruit') ON CONFLICT(key) DO UPDATE SET fruit = ict.fruit;

INSERT INTO insertconflicttest AS ict VALUES (6, 'Passionfruit') ON CONFLICT(key) DO UPDATE SET fruit = insertconflicttest.fruit;

ANALYZE;

VACUUM;

VACUUM test;

ANALYZE test;

CREATE TABLE test (i INT, j INT);

ANALYZE test;

CREATE VIEW testview AS SELECT * FROM test;

ANALYZE testview;

INSERT INTO test SELECT range % 5000, range % 5000 FROM RANGE(0, 10000);

SELECT STATS(i) FROM test LIMIT 1;

SELECT STATS(j) FROM test LIMIT 1;

PRAGMA verify_parallelism;

ANALYZE TEST(i);

VACUUM test(i);

PRAGMA disable_verify_parallelism;

SELECT STATS(i) FROM test LIMIT 1;

SELECT STATS(j) FROM test LIMIT 1;

PRAGMA verify_parallelism;

ANALYZE test;

PRAGMA disable_verify_parallelism;

SELECT STATS(i) FROM test LIMIT 1;

SELECT STATS(j) FROM test LIMIT 1;

CREATE TABLE test (x INT[], y AS (x || [100]));

ANALYZE TEST(x);

PRAGMA enable_verification;

SET VARIABLE animal = 'duck';

SELECT GETVARIABLE('animal');

PREPARE v1 AS SELECT GETVARIABLE($1);

EXECUTE v1('animal');

CREATE MACRO _(x) AS getvariable(x);

SELECT _('animal');

SET VARIABLE animal='bird';

SELECT GETVARIABLE('animal');

SELECT * FROM DUCKDB_VARIABLES();

SHOW VARIABLES;

SHOW VARIABLES;

SELECT GETVARIABLE('animal');

CREATE TABLE animal_list (a TEXT);

INSERT INTO animal_list VALUES ('duck'), ('goose');

SET VARIABLE animals=(SELECT LIST(a) FROM animal_list);

SELECT GETVARIABLE('animals');

SET VARIABLE animals=UNNEST([1,2,3]);

SELECT GETVARIABLE('xxx');

PRAGMA enable_verification;

CREATE TABLE empsalary (depname TEXT, empno BIGINT, salary INT, enroll_date DATE);

INSERT INTO empsalary VALUES ('develop', 10, 5200, '2007-08-01'), ('sales', 1, 5000, '2006-10-01'), ('personnel', 5, 3500, '2007-12-10'), ('sales', 4, 4800, '2007-08-08'), ('personnel', 2, 3900, '2006-12-23'), ('develop', 7, 4200, '2008-01-01'), ('develop', 9, 4500, '2008-01-01'), ('sales', 3, 4800, '2007-08-01'), ('develop', 8, 6000, '2006-10-01'), ('develop', 11, 5200, '2007-08-15');

SELECT depname, empno, salary, SUM(salary) OVER (PARTITION BY depname ORDER BY empno) FROM empsalary ORDER BY depname, empno;

SELECT SUM(salary) OVER (PARTITION BY depname ORDER BY salary) AS ss FROM empsalary ORDER BY depname, ss;

SELECT ROW_NUMBER() OVER (PARTITION BY depname ORDER BY salary) AS rn FROM empsalary ORDER BY depname, rn;

SELECT empno, FIRST_VALUE(empno) OVER (PARTITION BY depname ORDER BY empno) AS fv FROM empsalary ORDER BY 2 DESC, 1 ASC;

SELECT depname, empno, LAST_VALUE(empno) OVER (PARTITION BY depname ORDER BY empno ASC ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) AS fv FROM empsalary ORDER BY 1, 2;

SELECT depname, salary, DENSE_RANK() OVER (PARTITION BY depname ORDER BY salary) FROM empsalary ORDER BY depname, salary;

SELECT depname, salary, RANK() OVER (PARTITION BY depname ORDER BY salary) FROM empsalary ORDER BY depname, salary;

SELECT depname, MIN(salary) OVER (PARTITION BY depname ORDER BY salary, empno) AS m1, MAX(salary) OVER (PARTITION BY depname ORDER BY salary, empno) AS m2, AVG(salary) OVER (PARTITION BY depname ORDER BY salary, empno) AS m3 FROM empsalary ORDER BY depname, empno;

SELECT depname, STDDEV_POP(salary) OVER (PARTITION BY depname ORDER BY salary, empno) AS s FROM empsalary ORDER BY depname, empno;

SELECT depname, COVAR_POP(salary, empno) OVER (PARTITION BY depname ORDER BY salary, empno) AS c FROM empsalary ORDER BY depname, empno;

PRAGMA enable_verification;

CREATE TABLE tenk1 (unique1 INT, unique2 INT, two INT, four INT, ten INT, twenty INT, hundred INT, thousand INT, twothousand INT, fivethous INT, tenthous INT, odd INT, even INT, stringu1 TEXT, stringu2 TEXT, string4 TEXT);

INSERT INTO tenk1 VALUES (4, 1621, 0, 0, 4, 4, 4, 4, 4, 4, 4, 8, 9, 'EAAAAA', 'JKCAAA', 'HHHHxx'), (2, 2716, 0, 2, 2, 2, 2, 2, 2, 2, 2, 4, 5, 'CAAAAA', 'MAEAAA', 'AAAAxx'), (1, 2838, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 'BAAAAA', 'EFEAAA', 'OOOOxx'), (6, 2855, 0, 2, 6, 6, 6, 6, 6, 6, 6, 12, 13, 'GAAAAA', 'VFEAAA', 'VVVVxx'), (9, 4463, 1, 1, 9, 9, 9, 9, 9, 9, 9, 18, 19, 'JAAAAA', 'RPGAAA', 'VVVVxx'), (8, 5435, 0, 0, 8, 8, 8, 8, 8, 8, 8, 16, 17, 'IAAAAA', 'BBIAAA', 'VVVVxx'), (5, 5557, 1, 1, 5, 5, 5, 5, 5, 5, 5, 10, 11, 'FAAAAA', 'TFIAAA', 'HHHHxx'), (3, 5679, 1, 3, 3, 3, 3, 3, 3, 3, 3, 6, 7, 'DAAAAA', 'LKIAAA', 'VVVVxx'), (7, 8518, 1, 3, 7, 7, 7, 7, 7, 7, 7, 14, 15, 'HAAAAA', 'QPMAAA', 'OOOOxx'), (0, 9998, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 'AAAAAA', 'OUOAAA', 'OOOOxx');

SELECT SUM(unique1) OVER (ORDER BY unique1 rows BETWEEN 2 preceding AND 2 following) AS su FROM tenk1 ORDER BY unique1;

SELECT SUM(unique1) OVER (ORDER BY unique1 rows BETWEEN 2 preceding AND 1 preceding) AS su FROM tenk1 ORDER BY unique1;

SELECT SUM(unique1) OVER (ORDER BY unique1 rows BETWEEN 1 following AND 3 following) AS su FROM tenk1 ORDER BY unique1;

SELECT SUM(unique1) OVER (ORDER BY unique1 rows BETWEEN UNBOUNDED preceding AND 1 following) AS su FROM tenk1 ORDER BY unique1;

SELECT SUM(unique1) OVER (ORDER BY unique1 rows BETWEEN 5 following AND 10 following) AS su FROM tenk1 ORDER BY unique1;

CREATE TABLE issue1472 (permno REAL, date DATE, ret REAL);

INSERT INTO issue1472 VALUES (10000.0, CAST('1986-02-28' AS DATE), -0.2571428716182709), (10000.0, CAST('1986-03-31' AS DATE), 0.36538460850715637), (10000.0, CAST('1986-04-30' AS DATE), -0.09859155118465424), (10000.0, CAST('1986-05-30' AS DATE), -0.22265625), (10000.0, CAST('1986-06-30' AS DATE), -0.005025125574320555);

SELECT permno, SUM(LOG(ret + 1)) OVER (PARTITION BY permno ORDER BY date rows BETWEEN 12 preceding AND 2 preceding), ret FROM issue1472 ORDER BY permno, date;

CREATE TABLE issue1697 AS SELECT b % 100 AS a, b FROM (SELECT b FROM RANGE(0, 10000) AS tbl(b)) AS t;

CALL dbgen(sf=0.01);

SELECT l_orderkey, l_shipmode, l_linenumber, MODE(l_linenumber ORDER BY l_linenumber DESC) OVER w AS l_mode FROM lineitem WINDOW w AS (PARTITION BY l_shipmode) ORDER BY ALL LIMIT 10;

PRAGMA enable_verification;

SELECT i, (i * 29) % 11 AS outside, i // 2 AS inside, CUME_DIST( ORDER BY inside DESC) OVER w FROM RANGE(0, 10) AS tbl(i) WINDOW w AS (ORDER BY outside) ORDER BY inside DESC, i;

SELECT i, i // 2 AS inside, CUME_DIST( ORDER BY i // 2) OVER w AS cd FROM RANGE(0, 10) AS tbl(i) WINDOW w AS (ORDER BY i // 2 ROWS BETWEEN 3 PRECEDING AND 3 FOLLOWING) ORDER BY 1;

CALL dbgen(sf=0.1);

PRAGMA temp_directory = '__TEST_DIR__/window_spooling';

PRAGMA memory_limit = '50MB';

PRAGMA threads = 4;

PRAGMA enable_verification;

SELECT SUM(s), SUM(q), SUM(m), ROUND(SUM(d), -4) FROM (SELECT SUM(l_extendedprice) OVER w AS s, QUANTILE(l_extendedprice, 0.5) OVER w AS q, MAD(l_extendedprice) OVER w AS m, MODE(l_linenumber) OVER w AS d FROM lineitem WINDOW w AS (PARTITION BY l_suppkey ORDER BY l_shipdate, l_orderkey, l_linenumber ROWS BETWEEN 20 PRECEDING AND 20 FOLLOWING)) AS t;

PRAGMA enable_verification;

WITH t AS (SELECT i, DENSE_RANK() OVER (ORDER BY i % 50) AS d FROM RANGE(0, 3000) AS tbl(i)), w AS (SELECT d, COUNT(*) AS c FROM t GROUP BY ALL) SELECT COUNT(*), MIN(d), MAX(d), MIN(c), MAX(c) FROM w;

WITH t AS (SELECT i, DENSE_RANK() OVER (PARTITION BY i // 3000 ORDER BY i % 50) AS d FROM RANGE(0, 9000) AS tbl(i)), w AS (SELECT d, COUNT(*) AS c FROM t GROUP BY ALL) SELECT COUNT(*), MIN(d), MAX(d), MIN(c), MAX(c) FROM w;

CREATE TABLE issue9416 (idx TEXT, source TEXT, project TEXT, specimen TEXT, sample_id TEXT);

INSERT INTO issue9416 VALUES ('197bc9528efbc76a523d796b749a69f6', 'json', '0bf0b46fb9c01829c55e', 'e4de2878', NULL), ('0f62e5fa923495012f3863e7ea05f566', 'json', 'd98171d6fe06b3', '440ce2bf', '9fc93ee404d6bccb69'), ('9b15a709814582ecbec00d8397852865', 'json', '24ed1657', 'c3d1f46c', '06c234e260a7484'), ('8569d67b0ccbbf316b360be3bb4fe418', 'json', 'd98171d6fe06b3', '14875a37', '3416100f300c7bd'), ('d2f02b24d59696079e3d649b403fbb22', 'json', '82e092e750a', 'e7deeb7f', '6d8dded6f044'), ('60a2b8898440b2f4531268e27b7d3495', 'json', 'f657d34b6', '46afa8e7', '7bb186ce013b'), ('5aa1982136f3991ad5ed537793d40a0f', 'json', 'd58e2b351518', 'a98b2b0c', 'ac594941b5d9'), ('cc70cc91af828c833b5bf20785b91918', 'json', '4953ff4b', '8450467c', 'd1509d0abde0'), ('7cf99d6372183aab6a9a22205e1b0e96', 'json', '14b5b262c52400', 'e7deeb7f', '6d8dded6f044'), ('3cf6f7ec6609c6456f6587c441310ace', 'json', '0c155a1ba5', 'e984dd5b', 'd374014b756d'), ('e1223eb2cc51161d32495ff0ad8b34ae', 'json', 'f05964c5c4', '4f3354c3', '10eebe991cf9'), ('7b8b64bac7c7dc692d1fe76f6eeff2bb', 'json', '6bd9ce7f1d8', '492f260c', '314d3e061be7'), ('7b8b64bac7c7dc692d1fe76f6eeff2bb', 'json', '249f40c5d97', '492f260c', '314d3e061be7'), ('cd29186ef73b658079d848fca1ebe839', 'json', '6bd9ce7f1d8', '492f260c', '314d3e061be7'), ('d67a74eb29392e06b97161d9f3121705', 'json', '0bf0b46fb9c01829c55e', '2d28e9ee', '0deb6a6b189d309'), ('9dcc686429408e3319161c39b008f705', 'json', '24ed1657', '8450467c', 'd1509d0abde0'), ('11788bb5a0477c1bfb31a9f33af80c40', 'json', '4ea4e97b39c4b', '4f3354c3', '10eebe991cf9'), ('59bceab687b4004dbeed6291f07af37d', 'json', '6d00cb7409', '4f3354c3', '10eebe991cf9'), ('76b23210847e653b6060104da0e86d5b', 'json', '24ed1657', '22f4528f', '7632cf8f4849404'), ('2605143ff05ae1ce66b1cc70f80fe53d', 'json', '249f40c5d97', 'b93c50ce', 'be70d8b88fff'), ('1a1864b5f4ed27acfbbf6e5069348a5a', 'json', '6bd9ce7f1d8', '6c082f61', 'ee109745d498'), ('92200c3306e18e53a41550c6306a3ee4', 'json', '8271fea91bc236c', 'd6f24fd5', NULL), ('dd39e08b282cf4a6429bcfefaa2af071', 'json', '249f40c5d97', '1396d8b6', '3826343264acc9'), ('3afcae2318313f112b62536fa160678d', 'json', '24ed1657', '5311f290', '129c0a0fd3e82a8'), ('3afcae2318313f112b62536fa160678d', 'json', '24ed1657', '08b8de7c543d', '129c0a0fd3e82a8'), ('3afcae2318313f112b62536fa160678d', 'json', '24ed1657', 'ce001fa3a2a4', '129c0a0fd3e82a8'), ('79acd6669071e95a5b2fe5456216ab32', 'json', '24ed1657', '5311f290', '129c0a0fd3e82a8'), ('79acd6669071e95a5b2fe5456216ab32', 'json', '24ed1657', '08b8de7c543d', '129c0a0fd3e82a8'), ('79acd6669071e95a5b2fe5456216ab32', 'json', '24ed1657', 'ce001fa3a2a4', '129c0a0fd3e82a8'), ('d0a7e9d3eda115120021a895a81db8be', 'json', '24ed1657', '5311f290', '129c0a0fd3e82a8'), ('d0a7e9d3eda115120021a895a81db8be', 'json', '24ed1657', '08b8de7c543d', '129c0a0fd3e82a8'), ('d0a7e9d3eda115120021a895a81db8be', 'json', '24ed1657', 'ce001fa3a2a4', '129c0a0fd3e82a8'), ('a59a3a4ad8d2ab867c9b830974588645', 'json', '24ed1657', '5311f290', '129c0a0fd3e82a8'), ('a59a3a4ad8d2ab867c9b830974588645', 'json', '24ed1657', '08b8de7c543d', '129c0a0fd3e82a8'), ('a59a3a4ad8d2ab867c9b830974588645', 'json', '24ed1657', 'ce001fa3a2a4', '129c0a0fd3e82a8'), ('6193ffd18b0da96e80e2a38baac9a7e4', 'json', '14b5b262c52400', '3c03d64c34', '1b5cfdd6a5de'), ('6193ffd18b0da96e80e2a38baac9a7e4', 'rprt', '1a5cf3833', NULL, '1b5cfdd6a5de'), ('ecf1739fed72151784dab88dbe2f2aa9', 'json', '14b5b262c52400', '3c03d64c34', '1b5cfdd6a5de'), ('ecf1739fed72151784dab88dbe2f2aa9', 'rprt', '1a5cf3833', NULL, '1b5cfdd6a5de'), ('204cd9b011e2cab64bcdf1b3d668a9ef', 'json', '7d9a79908fcc', '8274fbb94a', '5a928f187ed19b2'), ('c8360bd0e28ea5bbffd66e76886bbccb', 'json', 'd6b3921920', 'a63d8', '0e06e1f9f6580fb'), ('c8360bd0e28ea5bbffd66e76886bbccb', 'rprt', 'd6b3921920', NULL, '0e06e1f9f6580fb'), ('c6eb00fb5a023557439a9b898c7cc3ea', 'json', 'd6b3921920', 'a63d8', 'f891b965f2561d9'), ('c6eb00fb5a023557439a9b898c7cc3ea', 'rprt', 'd6b3921920', NULL, 'f891b965f2561d9'), ('f2dacff642ad3f805229d7e976810f1d', 'rprt', 'd6b3921920', NULL, '6817ec9d3b7b726'), ('8def2cd0450b56c3e0c9bb6da67b842b', 'rprt', 'd6b3921920', NULL, '6817ec9d3b7b726'), ('6db7ef8b4a9e41bb41971dced546131b', 'rprt', 'd6b3921920', NULL, 'bc32d9059dde8ba'), ('4524efca2bf1aa0565f03a9aaf9771d2', 'json', '14b5b262c52400', 'cf3b1945e2', '5c0157ef5367'), ('6f63a84401944c32b9a329af08d6473c', 'json', '8b736466c7adc6', 'd0acb13cd9', 'd734a9d755ef6276'), ('8ef4bc6ac39585b2ec45218ad1d06464', 'rprt', '67b7fd541ae7e', 'c117f7db3b', 'cf94993616ef'), ('01899ea72c60bd5e614132c99fffd48e', 'json', '14b5b262c52400', '2a50feb98b', 'eead79cf6ef0'), ('b1407bdda20fad91cb9072c08c5c23a8', 'json', '3608008ba4c9', 'e4840a8e75', '139e04ae890beb8'), ('2091d4939af33d3911b057ed446367f1', 'rprt', '6522e2c00f5b87d5b', 'f2b8d4d02d', '23de2ff19778'), ('81f36975a777a353b0861874e03d0f95', 'rprt', '14b5b262c52400', 'e05f1a1ec2', 'acf577df3840'), ('5b3961bf4255e83ee1e7e795e14c8119', 'rprt', 'b9cbf09f3366297', '1109e52066', '47afce7dacb5'), ('0b53312f91b22db1bf7c18251a199d36', 'json', '14b5b262c52400', 'c8561fe22f', '6e30638eaaf6'), ('e277322f26cd477bae52240c46678286', 'json', '14b5b262c52400', 'd185c22b68', '42a062d827c'), ('71150d87b4e7852448a524e03817efc4', 'json', 'bb87c32c765d1', '3e60145162', '8e072527a7cf82d'), ('1039fc7de3c12dad1e7d3bd9e73827de', 'json', 'd6b3921920', '65c0a3e2a9', '9ff56f55c850390'), ('3c67c976516f8a5a1044ad9a8935cf02', 'rprt', 'bdc5a7fd6ca', 'dfc9fd824b', 'bfbef96674e73829'), ('56ab3e25a40913b6e961cff217a83750', 'json', '24ed1657', '724e7df1', 'fc81c8a39465'), ('5f726fff8b638d0ac1ba9dcb9a4037be', 'json', '14b5b262c52400', 'b1bddeb160', '1e2b4afd36f'), ('4448f84ff7496b6d1a0d311838be238d', 'json', '14b5b262c52400', '50a45c4db0', '83ef23a7f827'), ('216414a29307f00aecfc9e5cba7ac821', 'json', 'c05bced980e6381', '949ae57ce4', '05f77bf546f'), ('5327f9ec2dc334bde0222b52de4d65ef', 'json', '67b7fd541ae7e', '8aea85ada0', 'c0048c2b539e'), ('d3c9b836ce61a53daf39d813c97a36b9', 'json', '249f40c5d97', '35d05d68', 'db4853c8a41'), ('6d4affc7041c65d0f56551f4d4370a7d', 'rprt', 'd6b3921920', NULL, '84624aa9753a681'), ('caab5b21770a321067fb2052c2eea792', 'rprt', '14b5b262c52400', '8b8da80085', 'd427763bd611'), ('eecdf1e7e87c04c56328b0d37fb06349', 'json', '14b5b262c52400', '3bfabeb9d9', '7c613b2d73cc'), ('b533aa0c674433a09cee8555b35b7ca6', 'json', '9c3b3335f959', 'f9d8c52aa2', 'd082926c94a8a60'), ('6dfe749835d6a895a3a116580dc4217a', 'rprt', '14b5b262c52400', '6dd9b2d650', 'b3d88f29e3e5'), ('6150133032c53a35ce28c6308931137d', 'rprt', 'b04a2a75f0c4a9', '9f3026e2', 'a1bcb7232a50'), ('47e77fd2d027114df5ac9daa17237934', 'json', 'b04a2a75f0c4a9', '6e07291b', '564347d748e0'), ('0d66c06fd2a29247b4bc798591f15cbc', 'rprt', '093a316f6c9c0856b', 'ebcca53e20', '4c767b833785b25b072e'), ('997371252646aed7ac3fa43da1f69ef2', 'rprt', 'd6b3921920', '5be2b052', '612fc8691ec7852'), ('e963d96d34e35ba06cea05ff78e84e41', 'json', '33debfe262d7', '114a0c85', 'f6d1ea3976b0a03'), ('f50959f1079cd24b7dcb6370d8e63344', 'rprt', '1a5cf3833', NULL, 'a1b77be48d05'), ('4e44d4c96d3d26290d13e5f9bc14d8dd', 'rprt', '67b7fd541ae7e', 'c117f7db3b', '18d653ec3c0'), ('797c887ce1edab55fefaa7a690065843', 'rprt', '14b5b262c52400', '22efccc05e', '7a9348e1538f'), ('ffbc9337bb6f6c7d43ab32a9398474da', 'rprt', 'b04a2a75f0c4a9', '6e07291b', '564347d748e0'), ('3ac840afe9d088e5c490ed4cd48d2269', 'json', '67b7fd541ae7e', 'ffaa35275c', 'c58867f82d10'), ('72cedda51ecfb6678f4e3a3956066311', 'json', '402423768220bca1f', '9a28c664', 'eed0f9697609'), ('92488464899a3b31ea1bc61a2ebc2013', 'json', '14b5b262c52400', '1a10cdadd7', 'ee4cacc7ce10'), ('c85e95cfec9f42fff138d498101cd7ea', 'json', '14b5b262c52400', 'f1b4cf931e', '3b4f71a3ddde'), ('399edac903f69ac760fa36a8b68cdfb0', 'rprt', '67b7fd541ae7e', 'a539fb31c3', '4c920da298bd'), ('a223c0e6017570f5a1039003e767e692', 'json', '67b7fd541ae7e', '7bfb6b3721', '5ae5c617d126'), ('1503860c3c6391385807ab9b6cdd1934', 'json', '67b7fd541ae7e', '4936ad40b0', '94fbcb7cd167'), ('6f269d7f6cf850a9cd0d4d804eef24a0', 'rprt', '14b5b262c52400', '943c04e54b', 'cc79fc503d80'), ('732a12aa44489aeef05b614a1e8dbd2d', 'rprt', '14b5b262c52400', 'a2335b4159', '45e7e30aa621'), ('b876617f4b7bdb3abc694da31b09d838', 'rprt', '14b5b262c52400', '93a91bf863', 'b824ed7a5f67'), ('fd63b4bf7ee546b2c0c55200ae968872', 'rprt', '67b7fd541ae7e', '62cd05887b', '9c1940a4032a'), ('50a00a903778fb65ef92a736bd9fe262', 'json', '67b7fd541ae7e', '7e81c8b2f3', '00eb98252668113'), ('053891bc9d52d48986302c5e13adf276', 'json', '67b7fd541ae7e', 'a1762f3d79', 'e06b767a6ed2'), ('f537b4d753bb441436ff8d73af423691', 'json', 'efdfcef7da0', '98c6db64', '4c9b34c566ae'), ('8dc4f5e5bb2663f09218b369be5bf524', 'rprt', '03b000865c98e', 'f31af55c63', 'a02983ae108ced0449cb4'), ('d69d899aba162c4f14593f9c6a062bdd', 'rprt', '67b7fd541ae7e', '7bfb6b3721', 'c32aa62b7207'), ('88b784ce065a5cf2360e7616c4b3f7f6', 'json', '62769691cd4e', 'ebdf919e', '37e16f2e5319832f'), ('cdda71f56ad05dae20b1e22ee19b227b', 'rprt', '67b7fd541ae7e', '17d7c8f29a', '21c1f8fadde3'), ('5e1d22685085f0d85553eb2b7b4155a6', 'rprt', '14b5b262c52400', '737542af23', '092dcc6fdef7'), ('7f387dad4f9bef7c2301977590cec0f2', 'json', '67b7fd541ae7e', '09591aea45', 'ab584388528d'), ('a83145a960baebcf1bff9c462f8489e5', 'json', '14b5b262c52400', '2ea6e3e6fb', '4fe26b0e2203'), ('4d7a36c58267592481297676d57c9e84', 'json', '581d813a840d3d6391', '54239e1a8e', '232d99055474'), ('31f0b71e67e64d42079098a53374e094', 'json', '14b5b262c52400', 'a43ad72889', '7d702f310fbe'), ('6ddc75b9771136d9a6366aaa5d951f1a', 'rprt', '14b5b262c52400', '75263a6f0c', '7309f2e8695a'), ('4595e59a1225042680842f63736481d4', 'json', '14b5b262c52400', '44f5fdb8b1', '9c2c14ec6924'), ('66c1f24117ee34a1b3d587a22047fad1', 'rprt', '14b5b262c52400', 'bfe39ca56f', 'b49aa5fad4d5'), ('37027bc152a681b87d5ffb9a37c325a5', 'rprt', 'efdfcef7da0', '9f1668a8', '682ff39acb86'), ('c3b46edd87eb14842b6444c001ae6456', 'json', '3608008ba4c9', 'f650844d13', '5326d2a94e28825'), ('82beaa8e1c8c482d792f601b37a40b8a', 'rprt', '14b5b262c52400', 'c86e0093c2', '5ae33221b17'), ('333aa3a45ab3f01ad95b2a312870aa1e', 'json', '14b5b262c52400', '57f7ec0030', '8545146eeba5'), ('16b64ffcb514bf69c6936eaf4e86889e', 'rprt', '14b5b262c52400', '2a50feb98b', '64bb80701037'), ('01d42ee5515c3b500018e723278e27c1', 'json', '67b7fd541ae7e', '958967a48a', '97453818ba51'), ('2a031d3176c7d4f19c532e5d2e7b411e', 'rprt', '14b5b262c52400', '164c3bb214', '3389fe2776be'), ('8d3b5d415e43df82b6b560effeb6ee80', 'json', '67b7fd541ae7e', '9205577d7c', 'bc96b93082c6'), ('339690825234f32fd7da02fd567d5109', 'rprt', 'b04a2a75f0c4a9', '9f3026e2', 'a1bcb7232a50'), ('13c6d4555db02b653d8f2b5ce06bb143', 'json', '402423768220bca1f', '49d58dba', '59b0906f7fcb'), ('39a39a7e3c48c1b3b262e8653b1a3ec4', 'rprt', '14b5b262c52400', '7b34590a85', 'eec88226d871'), ('fdd9d71a087b9048b8ac7dd29186cedf', 'rprt', '315316c7af745a97', '8a7c0917d4', '743680a0303171bbd'), ('f37e684c9ec0d0690a3c6feeaf6b1301', 'json', '14b5b262c52400', '0059c84703', '8426f8984729'), ('3787d0c9ead3866324d7586044747d65', 'rprt', 'b9cbf09f3366297', '3822b4212e', '611f4b0f498e');

WITH dups AS (SELECT ROW_NUMBER() OVER same_idx AS dup, COUNT(*) OVER same_idx AS n_dup, (DENSE_RANK() OVER asc_spcmn) + (DENSE_RANK() OVER desc_spcmn) - 1 AS n_spcmn, * FROM issue9416 WINDOW same_idx AS (PARTITION BY idx ORDER BY source, project, specimen ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING), asc_spcmn AS (PARTITION BY idx ORDER BY specimen ASC NULLS FIRST ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING), desc_spcmn AS (PARTITION BY idx ORDER BY specimen DESC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)) SELECT * FROM dups WHERE n_spcmn > 1 ORDER BY idx, dup;

PRAGMA enable_verification;

CREATE TABLE t1 (id INT, ch TEXT);

INSERT INTO t1 VALUES (1, 'A');

INSERT INTO t1 VALUES (2, 'B');

INSERT INTO t1 VALUES (2, 'B');

INSERT INTO t1 VALUES (2, 'B');

INSERT INTO t1 VALUES (2, 'B');

INSERT INTO t1 VALUES (2, 'B');

INSERT INTO t1 VALUES (2, 'B');

INSERT INTO t1 VALUES (2, 'B');

INSERT INTO t1 VALUES (2, 'B');

INSERT INTO t1 VALUES (2, 'B');

INSERT INTO t1 VALUES (2, 'B');

INSERT INTO t1 VALUES (2, 'B');

SELECT id, GROUP_CONCAT(id, ' ') OVER (PARTITION BY ch ORDER BY id ROWS BETWEEN 1 FOLLOWING AND 2 FOLLOWING) FROM t1 ORDER BY 1;

SELECT id, BITSTRING_AGG(id, 1, 3) OVER (PARTITION BY ch ORDER BY id ROWS BETWEEN 1 FOLLOWING AND 2 FOLLOWING) FROM t1 ORDER BY 1;

PRAGMA enable_verification;

SELECT * FROM (SELECT LAG(i, -1) OVER () AS negative, LEAD(i, 1) OVER () AS positive FROM GENERATE_SERIES(0, 10, 1) AS tbl(i)) AS w WHERE negative <> positive;

CREATE TABLE empsalary (depname TEXT, empno BIGINT, salary INT, enroll_date DATE);

INSERT INTO empsalary VALUES ('develop', 10, 5200, '2007-08-01'), ('sales', 1, 5000, '2006-10-01'), ('personnel', 5, 3500, '2007-12-10'), ('sales', 4, 4800, '2007-08-08'), ('personnel', 2, 3900, '2006-12-23'), ('develop', 7, 4200, '2008-01-01'), ('develop', 9, 4500, '2008-01-01'), ('sales', 3, 4800, '2007-08-01'), ('develop', 8, 6000, '2006-10-01'), ('develop', 11, 5200, '2007-08-15');

SELECT depname, SUM(SUM(salary)) OVER (PARTITION BY depname ORDER BY salary) FROM empsalary GROUP BY depname, salary ORDER BY depname, salary;

SELECT empno, SUM(salary * 2) OVER (PARTITION BY depname ORDER BY empno) FROM empsalary ORDER BY depname, empno;

SELECT empno, 2 * SUM(salary) OVER (PARTITION BY depname ORDER BY empno) FROM empsalary ORDER BY depname, empno;

SELECT depname, SUM(salary) * 100.0000 / SUM(SUM(salary)) OVER (PARTITION BY depname ORDER BY salary) AS revenueratio FROM empsalary GROUP BY depname, salary ORDER BY depname, revenueratio;

PRAGMA enable_verification;

CREATE TABLE issue2549 AS SELECT * FROM (VALUES (0, 1, 614), (1, 1, NULL), (2, 1, NULL), (3, 1, 639), (4, 1, 2027)) AS tbl(id, user_id, order_id);

SELECT id, user_id, order_id, LAST_VALUE(order_id IGNORE NULLS) OVER (PARTITION BY user_id ORDER BY id ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING) AS last_order_id FROM issue2549 ORDER BY ALL;

SELECT id, user_id, order_id, FIRST_VALUE(order_id IGNORE NULLS) OVER (PARTITION BY user_id ORDER BY id ROWS BETWEEN 1 PRECEDING AND UNBOUNDED FOLLOWING) AS last_order_id FROM issue2549 ORDER BY ALL;

SELECT id, user_id, order_id, NTH_VALUE(order_id, 2 IGNORE NULLS) OVER (PARTITION BY user_id ORDER BY id ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING) AS last_order_id FROM issue2549 ORDER BY ALL;

SELECT id, user_id, order_id, LEAD(order_id, 1, -1 IGNORE NULLS) OVER (PARTITION BY user_id ORDER BY id) AS last_order_id FROM issue2549 ORDER BY ALL;

SELECT id, user_id, order_id, LAG(order_id, 1, -1 IGNORE NULLS) OVER (PARTITION BY user_id ORDER BY id) AS last_order_id FROM issue2549 ORDER BY ALL;

SELECT id, user_id, order_id, LAG(order_id, 0, -1 IGNORE NULLS) OVER (PARTITION BY user_id ORDER BY id) AS last_order_id FROM issue2549 ORDER BY ALL;

SELECT id, user_id, order_id, LAST_VALUE(order_id RESPECT NULLS) OVER (PARTITION BY user_id ORDER BY id ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING) AS last_order_id FROM issue2549 ORDER BY ALL;

SELECT id, user_id, order_id, FIRST_VALUE(order_id RESPECT NULLS) OVER (PARTITION BY user_id ORDER BY id ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING) AS last_order_id FROM issue2549 ORDER BY ALL;

SELECT id, user_id, order_id, NTH_VALUE(order_id, 2 RESPECT NULLS) OVER (PARTITION BY user_id ORDER BY id ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING) AS last_order_id FROM issue2549 ORDER BY ALL;

SELECT id, user_id, order_id, LEAD(order_id, 1, -1 RESPECT NULLS) OVER (PARTITION BY user_id ORDER BY id) AS last_order_id FROM issue2549 ORDER BY ALL;

SELECT id, user_id, order_id, LAG(order_id, 1, -1 RESPECT NULLS) OVER (PARTITION BY user_id ORDER BY id) AS last_order_id FROM issue2549 ORDER BY ALL;

SELECT id, user_id, order_id, LAG(order_id, 0, -1 RESPECT NULLS) OVER (PARTITION BY user_id ORDER BY id) AS last_order_id FROM issue2549 ORDER BY ALL;

CREATE TABLE IF NOT EXISTS issue6635 (index INT, data INT);

INSERT INTO issue6635 VALUES (1, 1), (2, 2), (3, NULL), (4, NULL), (5, 5), (6, NULL), (7, NULL);

SELECT *, FIRST(data) OVER w, LAST(data) OVER w, NTH_VALUE(data, 1 IGNORE NULLS) OVER w FROM issue6635 WINDOW w AS (ORDER BY index ROWS BETWEEN 1 FOLLOWING AND UNBOUNDED FOLLOWING);

WITH gen AS (SELECT *, ((id * 1327) % 9973) / 10000.0 AS rnd FROM GENERATE_SERIES(1, 10000) AS tbl(id)), lvl AS (SELECT id, rnd, CASE WHEN rnd <= 0.1 THEN 'shallow' WHEN rnd >= 0.9 THEN 'high' END AS water_level FROM gen) SELECT *, LAST_VALUE(water_level IGNORE NULLS) OVER (ORDER BY id) AS grade FROM lvl ORDER BY id;

SELECT v, LEAD(v) OVER (ORDER BY id), LEAD(v IGNORE NULLS) OVER (ORDER BY id) FROM (VALUES (1, 1), (2, NULL), (3, 2), (4, NULL), (5, 3), (6, NULL)) AS tbl(id, v);

SELECT v, LEAD(v) OVER (ORDER BY id), LEAD(v IGNORE NULLS) OVER (ORDER BY id) FROM (VALUES (1, 1), (2, NULL), (3, 2), (4, NULL), (5, 3), (6, NULL)) AS tbl(id, v);

SELECT v, LEAD(v) OVER (ORDER BY id), LEAD(v IGNORE NULLS) OVER (ORDER BY id) FROM (VALUES (1, 1), (2, NULL), (3, 2), (4, NULL), (5, 3), (6, NULL)) AS tbl(id, v);

SELECT v, LEAD(v) OVER (ORDER BY id), LEAD(v IGNORE NULLS) OVER (ORDER BY id) FROM (VALUES (1, 1), (2, NULL), (3, 2), (4, NULL), (5, 3), (6, NULL)) AS tbl(id, v);

PRAGMA enable_verification;

CREATE TABLE empsalary (depname TEXT, empno BIGINT, salary INT, enroll_date DATE);

INSERT INTO empsalary VALUES ('develop', 10, 5200, '2007-08-01'), ('sales', 1, 5000, '2006-10-01'), ('personnel', 5, 3500, '2007-12-10'), ('sales', 4, 4800, '2007-08-08'), ('personnel', 2, 3900, '2006-12-23'), ('develop', 7, 4200, '2008-01-01'), ('develop', 9, 4500, '2008-01-01'), ('sales', 3, 4800, '2007-08-01'), ('develop', 8, 6000, '2006-10-01'), ('develop', 11, 5200, '2007-08-15');

SELECT depname, MIN(salary) OVER (PARTITION BY depname ORDER BY salary, empno) AS m1 FROM empsalary GROUP BY m1 ORDER BY depname, empno;

SELECT depname, MIN(salary) OVER (PARTITION BY depname ORDER BY salary, empno) AS m1 FROM empsalary GROUP BY m1 ORDER BY depname, empno;

SELECT depname, MIN(salary) OVER (PARTITION BY depname ORDER BY salary, empno) AS m1 FROM empsalary GROUP BY m1 ORDER BY depname, empno;

SELECT LIST(salary ORDER BY enroll_date) OVER (PARTITION BY depname) FROM empsalary ORDER BY ALL DESC;

SELECT LIST(salary ORDER BY enroll_date) OVER (PARTITION BY depname) FROM empsalary ORDER BY ALL DESC;

SELECT LIST(salary ORDER BY enroll_date) OVER (PARTITION BY depname) FROM empsalary ORDER BY ALL DESC;

SELECT LIST(salary ORDER BY enroll_date) OVER (PARTITION BY depname) FROM empsalary ORDER BY ALL DESC;

SELECT LIST(salary ORDER BY enroll_date) OVER (PARTITION BY depname) FROM empsalary ORDER BY ALL DESC;

SELECT LIST(salary ORDER BY enroll_date) OVER (PARTITION BY depname) FROM empsalary ORDER BY ALL DESC;

SELECT LIST(salary ORDER BY enroll_date) OVER (PARTITION BY depname) FROM empsalary ORDER BY ALL DESC;

PRAGMA enable_verification;

SELECT i, (i * 29) % 11 AS outside, i // 2 AS inside, LEAD(i ORDER BY inside DESC, i) OVER w, LAG(i ORDER BY inside DESC, i) OVER w FROM RANGE(0, 10) AS tbl(i) WINDOW w AS (ORDER BY outside) ORDER BY inside DESC, i;

SELECT c1, LEAD(c1, 2) OVER (ORDER BY c0 rows BETWEEN 2 preceding AND 4 preceding) AS b FROM (VALUES (1, 2), (2, 3), (3, 4), (4, 5)) AS a(c0, c1);

CREATE TABLE win (id INT, v INT, t INT, f REAL, s TEXT);

INSERT INTO win VALUES (1, 1, 2, 0.54, 'h'), (1, 1, 1, 0.21, 'e'), (1, 2, 3, 0.001, 'l'), (2, 10, 4, 0.04, 'l'), (2, 11, -1, 10.45, 'o'), (3, -1, 0, 13.32, ','), (3, 5, -2, 9.87, 'wor'), (3, NULL, 10, 6.56, 'ld');

SELECT id, v, t, LAG(v, 2, NULL) OVER (PARTITION BY id ORDER BY t ASC) FROM win ORDER BY id, t;

CREATE TABLE issue14398 (date DATE, "group" INT, count INT, status TEXT);

INSERT INTO issue14398 VALUES ('2024-01-01', 1, 1000, 'ordered'), ('2024-02-01', 1, 1000, 'dispatched'), ('2024-03-01', 1, 1000, 'dispatched'), ('2024-01-01', 2, 2000, 'ordered'), ('2024-02-01', 2, 2000, 'ordered'), ('2024-03-01', 2, 2000, 'ordered'), ('2024-01-01', 3, 3000, 'ordered'), ('2024-02-01', 3, 3000, 'ordered'), ('2024-03-01', 3, 3000, 'late'), ('2024-01-01', 4, 4000, 'ordered'), ('2024-02-01', 4, 4000, 'ordered'), ('2024-03-01', 4, 4000, 'ordered'), ('2024-01-01', 5, 5000, 'ordered'), ('2024-02-01', 5, 5000, 'late'), ('2024-03-01', 5, 5000, 'ordered'), ('2024-01-01', 6, 1000, 'dispatched'), ('2024-02-01', 6, 1000, 'dispatched'), ('2024-03-01', 6, 1000, 'dispatched'), ('2024-01-01', 7, 1000, 'late'), ('2024-02-01', 7, 1000, 'dispatched'), ('2024-03-01', 7, 1000, 'dispatched');

SELECT "t0"."date", "t0"."group", "t0"."count", "t0"."status", LEAD("t0"."date", 2) OVER (PARTITION BY "t0"."group" ORDER BY "t0"."date" ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS "end_date", LEAD("t0"."status", 2) OVER (PARTITION BY "t0"."group" ORDER BY "t0"."date" ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS "end_status" FROM "issue14398" AS "t0" ORDER BY 2, 1;

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

CREATE TABLE list_extract_test (i INT, g INT);

INSERT INTO list_extract_test VALUES (1, 1), (2, 1), (3, 2), (NULL, 3), (42, 3);

CREATE VIEW list_window AS SELECT g, LIST(i) OVER (PARTITION BY g ORDER BY i ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS l FROM list_extract_test;

SELECT * FROM list_window ORDER BY g;

SELECT FIRST(LIST_EXTRACT(l, 1)) FROM list_window GROUP BY g ORDER BY g;

SELECT FIRST(LIST_EXTRACT(l, 2)) FROM list_window GROUP BY g ORDER BY g;

SELECT FIRST(LIST_EXTRACT(l, 3)) FROM list_window GROUP BY g ORDER BY g;

CREATE TABLE list_combine_test AS SELECT range % 3 AS j, CAST(range AS TEXT) AS s, CASE WHEN range % 3 = 0 THEN '-' ELSE '|' END AS sep FROM RANGE(1, 65);

SELECT j, s, LIST(s) OVER (PARTITION BY j ORDER BY s) FROM list_combine_test ORDER BY j, s;

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

CREATE TABLE mads AS SELECT range AS r FROM RANGE(0, 20) UNION ALL VALUES (NULL), (NULL), (NULL);

SELECT r % 2 AS p, r, r / 3.0, MAD(r / 3.0) OVER (PARTITION BY r % 2 ORDER BY r) FROM mads ORDER BY 1, 2;

SELECT r, r / 3.0, MAD(r / 3.0) OVER (ORDER BY r rows BETWEEN 1 preceding AND 1 following) FROM mads ORDER BY 1, 2;

SELECT r, r / 3.0, MAD(r / 3.0) OVER (ORDER BY r rows BETWEEN 1 preceding AND 3 following) FROM mads ORDER BY 1, 2;

SELECT r % 3 AS p, r, n, MAD(n) OVER (PARTITION BY r % 3 ORDER BY r) FROM (SELECT r, CASE r % 2 WHEN 0 THEN r ELSE NULL END AS n FROM mads) AS nulls ORDER BY 1, 2;

SELECT r, n, MAD(n) OVER (ORDER BY r rows BETWEEN 1 preceding AND 1 following) FROM (SELECT r, CASE r % 2 WHEN 0 THEN r ELSE NULL END AS n FROM mads) AS nulls ORDER BY 1;

SELECT r, n, MAD(n) OVER (ORDER BY r rows BETWEEN 1 preceding AND 3 following) FROM (SELECT r, CASE r % 2 WHEN 0 THEN r ELSE NULL END AS n FROM mads) AS nulls ORDER BY 1;

SELECT r, n, MAD(n) OVER (ORDER BY r rows BETWEEN UNBOUNDED preceding AND UNBOUNDED following) FROM (SELECT r, CASE r % 2 WHEN 0 THEN r ELSE NULL END AS n FROM mads) AS nulls ORDER BY 1;

CREATE TABLE coverage AS SELECT * FROM (VALUES (1), (2), (3), (1)) AS tbl(r);

SELECT r, MAD(r) OVER (ORDER BY r ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) FROM coverage ORDER BY 1;

SELECT r, MAD(r) OVER (ORDER BY r ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) FROM coverage ORDER BY 1;

SELECT r % 2 AS p, r, r / 3.0, MAD(r / 3.0) OVER (PARTITION BY r % 2 ORDER BY r) FROM mads ORDER BY 1, 2;

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

PRAGMA verify_external;

CREATE TABLE modes AS SELECT range AS r FROM RANGE(0, 10) UNION ALL VALUES (NULL), (NULL), (NULL);

SELECT r % 2, r, r // 3, MODE(r // 3) OVER (PARTITION BY r % 2 ORDER BY r) FROM modes ORDER BY 1, 2;

SELECT r, r // 3, MODE(r // 3) OVER (ORDER BY r rows BETWEEN 1 preceding AND 1 following) FROM modes ORDER BY ALL;

SELECT r, r // 3, MODE(r // 3) OVER (ORDER BY r rows BETWEEN 1 preceding AND 3 following) FROM modes ORDER BY 1, 2;

SELECT r, r // 3, n, MODE(n) OVER (PARTITION BY r % 3 ORDER BY r) FROM (SELECT r, CASE r % 2 WHEN 0 THEN r ELSE NULL END AS n FROM modes) AS nulls ORDER BY 1;

SELECT r, n, MODE(n) OVER (ORDER BY r rows BETWEEN 1 preceding AND 1 following) FROM (SELECT r, CASE r % 2 WHEN 0 THEN r ELSE NULL END AS n FROM modes) AS nulls ORDER BY ALL;

SELECT r, n, MODE(n) OVER (ORDER BY r rows BETWEEN 1 preceding AND 3 following) FROM (SELECT r, CASE r % 2 WHEN 0 THEN r ELSE NULL END AS n FROM modes) AS nulls ORDER BY 1;

SELECT r, n, MODE(n) OVER (ORDER BY r rows BETWEEN UNBOUNDED preceding AND UNBOUNDED following) FROM (SELECT r, CASE r % 2 WHEN 0 THEN r ELSE NULL END AS n FROM modes) AS nulls ORDER BY 1;

SELECT r, n, MODE(n) OVER (ORDER BY r rows BETWEEN UNBOUNDED preceding AND UNBOUNDED following) FROM (SELECT r, CASE r % 2 WHEN 0 THEN r ELSE NULL END AS n FROM modes) AS nulls ORDER BY 1;

WITH t(r) AS (SELECT * FROM (VALUES (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (NULL), (NULL), (NULL)) AS _values) SELECT r, r // 3, MODE(r // 3) OVER (ORDER BY r rows BETWEEN 1 preceding AND 1 following) FROM t ORDER BY ALL;

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

PRAGMA debug_window_mode = separate;

CREATE TABLE empsalary (depname TEXT, empno BIGINT, salary INT, enroll_date DATE);

INSERT INTO empsalary VALUES ('develop', 10, 5200, '2007-08-01'), ('sales', 1, 5000, '2006-10-01'), ('personnel', 5, 3500, '2007-12-10'), ('sales', 4, 4800, '2007-08-08'), ('personnel', 2, 3900, '2006-12-23'), ('develop', 7, 4200, '2008-01-01'), ('develop', 9, 4500, '2008-01-01'), ('sales', 3, 4800, '2007-08-01'), ('develop', 8, 6000, '2006-10-01'), ('develop', 11, 5200, '2007-08-15');

SELECT depname, empno, salary, SUM(salary) OVER (PARTITION BY depname ORDER BY empno) FROM empsalary ORDER BY depname, empno;

SELECT SUM(salary) OVER (PARTITION BY depname ORDER BY salary) AS ss FROM empsalary ORDER BY depname, ss;

SELECT depname, MIN(salary) OVER (PARTITION BY depname ORDER BY salary, empno) AS m1, MAX(salary) OVER (PARTITION BY depname ORDER BY salary, empno) AS m2, AVG(salary) OVER (PARTITION BY depname ORDER BY salary, empno) AS m3 FROM empsalary ORDER BY depname, empno;

SELECT depname, STDDEV_POP(salary) OVER (PARTITION BY depname ORDER BY salary, empno) AS s FROM empsalary ORDER BY depname, empno;

SELECT depname, COVAR_POP(salary, empno) OVER (PARTITION BY depname ORDER BY salary, empno) AS c FROM empsalary ORDER BY depname, empno;

CREATE TABLE filtering AS SELECT x, ROUND(x * 0.333, 0) % 3 AS y, ROUND(x * 0.333, 0) % 3 AS z FROM GENERATE_SERIES(0, 10) AS tbl(x);

SELECT x, y, z, AVG(x) OVER (PARTITION BY y) AS plain_window, AVG(x) FILTER(WHERE x = 1) OVER (PARTITION BY y) AS x_filtered_window, AVG(x) FILTER(WHERE z = 0) OVER (PARTITION BY y) AS z_filtered_window FROM filtering ORDER BY y, x;

SELECT x, y, z, COUNT(*) OVER (PARTITION BY y) AS plain_window, COUNT(*) FILTER(WHERE x = 1) OVER (PARTITION BY y) AS x_filtered_window, COUNT(*) FILTER(WHERE z = 0) OVER (PARTITION BY y) AS z_filtered_window FROM filtering ORDER BY y, x;

SELECT x, y, z, MEDIAN(x) OVER (PARTITION BY y) AS plain_window, MEDIAN(x) FILTER(WHERE x = 1) OVER (PARTITION BY y) AS x_filtered_window, MEDIAN(x) FILTER(WHERE z = 0) OVER (PARTITION BY y) AS z_filtered_window FROM filtering ORDER BY y, x;

SELECT x, COUNT(x) FILTER(WHERE x % 2 = 0) OVER (ORDER BY x ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING) FROM GENERATE_SERIES(0, 10) AS tbl(x);

CREATE TABLE figure1 AS SELECT * FROM (VALUES (1, 'a'), (2, 'b'), (3, 'b'), (4, 'c'), (5, 'c'), (6, 'b'), (7, 'c'), (8, 'a')) AS v(i, s);

SELECT i, s, COUNT(DISTINCT s) OVER (ORDER BY i ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING) AS c FROM figure1 ORDER BY i;

SELECT i, s, COUNT(DISTINCT s) OVER (ORDER BY i ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING) AS c FROM figure1 ORDER BY i;

SELECT i // 10 AS p, i, ANY_VALUE(i ORDER BY i DESC) OVER (PARTITION BY i // 10 ORDER BY i ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING) AS c FROM RANGE(0, 20) AS tbl(i) ORDER BY ALL;

SELECT i // 10 AS p, i, LIST(i ORDER BY i DESC) OVER (PARTITION BY i // 10 ORDER BY i ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING) AS c FROM RANGE(0, 20) AS tbl(i) ORDER BY ALL;

SELECT i // 10 AS p, i, LIST(DISTINCT i // 2 ORDER BY i DESC) OVER (PARTITION BY i // 10 ORDER BY i ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING) AS c FROM RANGE(0, 20) AS tbl(i) ORDER BY ALL;

SELECT i // 10 AS p, i, LIST(DISTINCT i // 2 ORDER BY i DESC) FILTER(WHERE i > 1) OVER (PARTITION BY i // 10 ORDER BY i ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING) AS c FROM RANGE(0, 20) AS tbl(i) ORDER BY ALL;

PRAGMA enable_verification;

CREATE OR REPLACE TABLE issue10855 (i INT, v REAL);

INSERT INTO issue10855 VALUES (0, 1), (1, 2), (2, 3);

SELECT i, v, SUM(v) OVER (ORDER BY i RANGE BETWEEN 1 PRECEDING AND -1 FOLLOWING) FROM issue10855;

SELECT i, v, SUM(v) OVER (ORDER BY i RANGE BETWEEN -1 FOLLOWING AND 1 FOLLOWING) FROM issue10855;

SELECT i, v, SUM(v) OVER (ORDER BY i RANGE BETWEEN -1 PRECEDING AND 1 FOLLOWING) FROM issue10855;

SELECT i, v, SUM(v) OVER (ORDER BY i RANGE BETWEEN 1 PRECEDING AND -1 PRECEDING) FROM issue10855;

SELECT i, v, SUM(v) OVER (ORDER BY i DESC RANGE BETWEEN 1 PRECEDING AND -1 FOLLOWING) FROM issue10855;

SELECT i, v, SUM(v) OVER (ORDER BY i DESC RANGE BETWEEN -1 FOLLOWING AND 1 FOLLOWING) FROM issue10855;

SELECT i, v, SUM(v) OVER (ORDER BY i DESC RANGE BETWEEN -1 PRECEDING AND 1 FOLLOWING) FROM issue10855;

SELECT i, v, SUM(v) OVER (ORDER BY i DESC RANGE BETWEEN 1 PRECEDING AND -1 PRECEDING) FROM issue10855;

PRAGMA enable_verification;

CREATE TABLE tenk1d (ten INT, four INT);

INSERT INTO tenk1d VALUES (0, 0), (1, 1), (3, 3), (2, 2), (4, 2), (9, 1), (4, 0), (7, 3), (0, 2), (2, 0), (5, 1), (1, 3), (3, 1), (6, 0), (8, 0), (9, 3), (8, 2), (6, 2), (7, 1), (5, 3);

SELECT four, ten, SUM(ten) OVER (PARTITION BY four ORDER BY ten) AS st, LAST_VALUE(ten) OVER (PARTITION BY four ORDER BY ten) AS lt FROM tenk1d ORDER BY four, ten;

SELECT four, ten, SUM(ten) OVER (PARTITION BY four ORDER BY ten range BETWEEN UNBOUNDED preceding AND CURRENT ROW) AS st, LAST_VALUE(ten) OVER (PARTITION BY four ORDER BY ten range BETWEEN UNBOUNDED preceding AND CURRENT ROW) AS lt FROM tenk1d ORDER BY four, ten;

SELECT four, ten, SUM(ten) OVER (PARTITION BY four ORDER BY ten range BETWEEN UNBOUNDED preceding AND UNBOUNDED following) AS st, LAST_VALUE(ten) OVER (PARTITION BY four ORDER BY ten range BETWEEN UNBOUNDED preceding AND UNBOUNDED following) AS lt FROM tenk1d ORDER BY four, ten;

SELECT four, ten // 4 AS two, SUM(ten // 4) OVER (PARTITION BY four ORDER BY ten // 4 range BETWEEN UNBOUNDED preceding AND CURRENT ROW) AS st, LAST_VALUE(ten // 4) OVER (PARTITION BY four ORDER BY ten // 4 range BETWEEN UNBOUNDED preceding AND CURRENT ROW) AS lt FROM tenk1d ORDER BY four, ten // 4;

SELECT four, ten // 4 AS two, SUM(ten // 4) OVER w AS st, LAST_VALUE(ten // 4) OVER w AS lt FROM tenk1d WINDOW w AS (PARTITION BY four ORDER BY ten // 4 range BETWEEN UNBOUNDED preceding AND CURRENT ROW) ORDER BY four, ten // 4;

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

CREATE TABLE empsalary (depname TEXT, empno BIGINT, salary INT, enroll_date DATE);

INSERT INTO empsalary VALUES ('develop', 10, 5200, '2007-08-01'), ('sales', 1, 5000, '2006-10-01'), ('personnel', 5, 3500, '2007-12-10'), ('sales', 4, 4800, '2007-08-08'), ('personnel', 2, 3900, '2006-12-23'), ('develop', 7, 4200, '2008-01-01'), ('develop', 9, 4500, '2008-01-01'), ('sales', 3, 4800, '2007-08-01'), ('develop', 8, 6000, '2006-10-01'), ('develop', 11, 5200, '2007-08-15');

SELECT depname, empno, NTH_VALUE(empno, 2) OVER (PARTITION BY depname ORDER BY empno ASC ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) AS fv FROM empsalary ORDER BY 1, 2;

SELECT depname, empno, NTH_VALUE(empno, NULL) OVER (PARTITION BY depname ORDER BY empno ASC ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) AS fv FROM empsalary ORDER BY 1, 2;

SELECT depname, empno, NTH_VALUE(NULL, 2) OVER (PARTITION BY depname ORDER BY empno ASC ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) AS fv FROM empsalary ORDER BY 1, 2;

SELECT depname, empno, NTH_VALUE(empno, CASE empno % 3 WHEN 1 THEN 2 ELSE NULL END) OVER (PARTITION BY depname ORDER BY empno ASC ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) AS fv FROM empsalary ORDER BY 1, 2;

CREATE VIEW empno_nulls AS SELECT depname, CASE empno % 2 WHEN 1 THEN empno ELSE NULL END AS empno, salary, enroll_date FROM empsalary;

SELECT depname, empno, NTH_VALUE(empno, 2) OVER (PARTITION BY depname ORDER BY empno ASC ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) AS fv FROM empno_nulls ORDER BY 1, 2;

SELECT depname, empno, 1 + empno % 3 AS "offset", NTH_VALUE(empno, 1 + empno % 3) OVER (PARTITION BY depname ORDER BY empno ASC ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) AS fv FROM empsalary ORDER BY 1, 2;

SELECT depname, empno, empno % 3 AS "offset", NTH_VALUE(empno, empno % 3) OVER (PARTITION BY depname ORDER BY empno ASC ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) AS fv FROM empsalary ORDER BY 1, 2;

SELECT depname, empno, NTH_VALUE(-1, 2) OVER (PARTITION BY depname ORDER BY empno ASC ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) AS fv FROM empsalary ORDER BY 1, 2;

SELECT depname, empno, NTH_VALUE(-1, 2) OVER (PARTITION BY depname ORDER BY empno ASC ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) AS fv FROM empsalary ORDER BY 1, 2;

SELECT depname, empno, NTH_VALUE(-1, 2) OVER (PARTITION BY depname ORDER BY empno ASC ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) AS fv FROM empsalary ORDER BY 1, 2;

CREATE TABLE Scoreboard (TeamName TEXT, Player TEXT, Score INT);

INSERT INTO Scoreboard VALUES ('Mongrels', 'Apu', 350);

INSERT INTO Scoreboard VALUES ('Mongrels', 'Ned', 666);

INSERT INTO Scoreboard VALUES ('Mongrels', 'Meg', 1030);

INSERT INTO Scoreboard VALUES ('Mongrels', 'Burns', 1270);

INSERT INTO Scoreboard VALUES ('Simpsons', 'Homer', 1);

INSERT INTO Scoreboard VALUES ('Simpsons', 'Lisa', 710);

INSERT INTO Scoreboard VALUES ('Simpsons', 'Marge', 990);

INSERT INTO Scoreboard VALUES ('Simpsons', 'Bart', 2010);

SELECT TeamName, Player, Score, NTILE(2) OVER (PARTITION BY TeamName ORDER BY Score ASC) AS NTILE FROM ScoreBoard AS s ORDER BY TeamName, Score;

SELECT TeamName, Player, Score, NTILE(2) OVER (ORDER BY Score ASC) AS NTILE FROM ScoreBoard AS s ORDER BY Score;

SELECT TeamName, Player, Score, NTILE(1000) OVER (PARTITION BY TeamName ORDER BY Score ASC) AS NTILE FROM ScoreBoard AS s ORDER BY TeamName, Score;

SELECT TeamName, Player, Score, NTILE(1) OVER (PARTITION BY TeamName ORDER BY Score ASC) AS NTILE FROM ScoreBoard AS s ORDER BY TeamName, Score;

SELECT TeamName, Player, Score, NTILE(NULL) OVER (PARTITION BY TeamName ORDER BY Score ASC) AS NTILE FROM ScoreBoard AS s ORDER BY TeamName, Score;

SELECT TeamName, Player, Score, NTILE() OVER (PARTITION BY TeamName ORDER BY Score ASC) AS NTILE FROM ScoreBoard AS s ORDER BY TeamName, Score;

SELECT TeamName, Player, Score, NTILE(1, 2) OVER (PARTITION BY TeamName ORDER BY Score ASC) AS NTILE FROM ScoreBoard AS s ORDER BY TeamName, Score;

SELECT TeamName, Player, Score, NTILE(1, 2, 3) OVER (PARTITION BY TeamName ORDER BY Score ASC) AS NTILE FROM ScoreBoard AS s ORDER BY TeamName, Score;

SELECT TeamName, Player, Score, NTILE(1, 2, 3, 4) OVER (PARTITION BY TeamName ORDER BY Score ASC) AS NTILE FROM ScoreBoard AS s ORDER BY TeamName, Score;

SELECT TeamName, Player, Score, NTILE(-1) OVER (PARTITION BY TeamName ORDER BY Score ASC) AS NTILE FROM ScoreBoard AS s ORDER BY TeamName, Score;

SELECT TeamName, Player, Score, NTILE(0) OVER (PARTITION BY TeamName ORDER BY Score ASC) AS NTILE FROM ScoreBoard AS s ORDER BY TeamName, Score;

PRAGMA enable_verification;

SELECT i, j, ROW_NUMBER() OVER (ORDER BY ALL) AS rn FROM (SELECT i, j FROM GENERATE_SERIES(1, 5) AS s(i) CROSS JOIN GENERATE_SERIES(1, 2) AS t(j)) AS t;

PRAGMA threads = 4;

PRAGMA verify_parallelism;

PRAGMA enable_profiling;

PRAGMA profiling_output = '__TEST_DIR__/test.json';

PRAGMA profiling_mode = detailed;

CREATE TABLE image (id SMALLINT PRIMARY KEY, width INT NOT NULL, height INT NOT NULL);

INSERT INTO image (id, width, height) VALUES (1, 500, 297);

SELECT SETSEED(0.8675309);

CREATE TABLE pixel (image_id INT NOT NULL, x INT NOT NULL, y INT NOT NULL, red UTINYINT NOT NULL, green UTINYINT NOT NULL, blue UTINYINT NOT NULL);

INSERT INTO pixel SELECT 1 AS image_id, r % 500 AS x, r // 500 AS y, RANDOM() * 255 AS red, RANDOM() * 255 AS green, RANDOM() * 255 AS blue FROM (SELECT range AS r FROM RANGE(0, 297 * 500)) AS r;

SELECT COUNT(*) FROM pixel;

CREATE TEMPORARY TABLE delta1 AS SELECT range AS delta FROM RANGE(-1, 2);

CREATE TEMPORARY TABLE delta2 AS SELECT x.delta AS dx, y.delta AS dy FROM delta1 AS x, delta1 AS y;

CREATE SEQUENCE patchids;

CREATE TABLE patch AS SELECT p.* FROM (SELECT NEXTVAL('patchids') AS id, 1 AS params_id, image_id, x + dx AS x_pos, y + dy AS y_pos, AVG(red) AS red_avg, AVG(green) AS green_avg, AVG(blue) AS blue_avg FROM pixel, delta2 GROUP BY params_id, image_id, x_pos, y_pos) AS p, image AS i WHERE x_pos >= 1 AND x_pos < i.width - 1 AND y_pos >= 1 AND y_pos < i.height - 1;

SELECT COUNT(*) FROM patch;

CREATE TEMPORARY TABLE channel (channel TEXT);

INSERT INTO channel (channel) VALUES ('R'), ('G'), ('B');

SELECT COUNT(*) FROM (SELECT patch_id, channel, COALESCE(SQRT(grad_x * grad_x + grad_y * grad_y), 0.) AS grad_mag, COALESCE(ATAN2(grad_y, grad_x), 0.) AS grad_angle FROM (SELECT patch_id, channel, (CASE channel WHEN 'R' THEN r_x WHEN 'G' THEN g_x ELSE b_x END) AS grad_x, (CASE channel WHEN 'R' THEN r_y WHEN 'G' THEN g_y ELSE b_y END) AS grad_y FROM (SELECT patch_id, (CAST(r_x_1 AS INT) - CAST(r_x_0 AS INT)) / 2.0 AS r_x, (CAST(r_y_1 AS INT) - CAST(r_y_0 AS INT)) / 2.0 AS r_y, (CAST(g_x_1 AS INT) - CAST(g_x_0 AS INT)) / 2.0 AS g_x, (CAST(g_y_1 AS INT) - CAST(g_y_0 AS INT)) / 2.0 AS g_y, (CAST(b_x_1 AS INT) - CAST(b_x_0 AS INT)) / 2.0 AS b_x, (CAST(b_y_1 AS INT) - CAST(b_y_0 AS INT)) / 2.0 AS b_y FROM (SELECT px.*, LEAD(red, 1) OVER w AS r_x_1, LAG(red, 1) OVER w AS r_x_0, LEAD(green, 1) OVER w AS g_x_1, LAG(green, 1) OVER w AS g_x_0, LEAD(blue, 1) OVER w AS b_x_1, LAG(blue, 1) OVER w AS b_x_0, LEAD(red, 3) OVER w AS r_y_1, LAG(red, 3) OVER w AS r_y_0, LEAD(green, 3) OVER w AS g_y_1, LAG(green, 3) OVER w AS g_y_0, LEAD(blue, 3) OVER w AS b_y_1, LAG(blue, 3) OVER w AS b_y_0 FROM (SELECT p.id AS patch_id, px.* FROM (SELECT x + dx AS x_pos, y + dy AS y_pos, px.* FROM pixel AS px, delta2 AS d) AS px, patch AS p WHERE px.x_pos = p.x_pos AND px.y_pos = p.y_pos AND px.image_id = p.image_id AND p.params_id = 1) AS px WINDOW w AS (PARTITION BY patch_id ORDER BY y, x)) AS g WHERE x_pos = x AND y_pos = y) AS g, channel AS c) AS g) AS f;

PRAGMA threads = 4;

PRAGMA verify_parallelism;

CREATE TABLE integers AS SELECT range AS i FROM RANGE(0, 1000000);

SELECT SUM(s) FROM (SELECT MAX(i) OVER (PARTITION BY i % 1024 ORDER BY i / 1024) AS s FROM integers) AS q;

SELECT SUM(s) FROM (SELECT MAX(i) OVER (PARTITION BY i % 1023 ORDER BY i / 1023) AS s FROM integers) AS q;

SELECT SUM(s) FROM (SELECT MAX(i) OVER (PARTITION BY i % 1025 ORDER BY i / 1025) AS s FROM integers) AS q;

CREATE TABLE strings AS SELECT i, CAST(i AS TEXT) AS s, CAST((i % 1023) AS TEXT) AS ms, CAST((i / 2023) AS TEXT) AS ds FROM integers;

SELECT MIN(LENGTH(w)), MAX(LENGTH(w)) FROM (SELECT MAX(s) OVER (PARTITION BY ms ORDER BY ds) AS w FROM strings) AS q;

CREATE TABLE "data" ("Store" INT, "Dept" INT, "Date" DATE, "Weekly_Sales" DOUBLE, "IsHoliday" BOOLEAN);

INSERT INTO data SELECT * FROM READ_CSV_AUTO('test/sql/window/walmart.csv.gz');

PRAGMA threads = 4;

SELECT "Store", "Weekly_Sales" FROM (SELECT "Store", "Date", "Weekly_Sales", ROW_NUMBER() OVER (PARTITION BY "Store" ORDER BY "Date" DESC, "Dept") AS r FROM data) AS w WHERE r = 1 ORDER BY 1;

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

PRAGMA verify_external;

CREATE TABLE quantiles AS SELECT range AS r FROM RANGE(0, 10) UNION ALL VALUES (NULL), (NULL), (NULL);

SELECT r % 2, r, MEDIAN(r) OVER (PARTITION BY r % 2 ORDER BY r) FROM quantiles ORDER BY 1, 2;

SELECT r, MEDIAN(r) OVER (ORDER BY r rows BETWEEN 1 preceding AND 1 following) FROM quantiles ORDER BY 1, 2;

SELECT r, MEDIAN(r) OVER (ORDER BY r rows BETWEEN 1 preceding AND 3 following) FROM quantiles ORDER BY 1, 2;

SELECT r, QUANTILE(r, 0.5) OVER (ORDER BY r rows BETWEEN 1 preceding AND 3 following) FROM quantiles ORDER BY 1, 2;

SELECT r % 2, r, MEDIAN(CAST(r AS TEXT)) OVER (PARTITION BY r % 2 ORDER BY r) FROM quantiles ORDER BY 1, 2;

SELECT r, MEDIAN(CAST(r AS TEXT)) OVER (ORDER BY r rows BETWEEN 1 preceding AND 1 following) FROM quantiles ORDER BY 1, 2;

SELECT r, QUANTILE(CAST(r AS TEXT), 0.5) OVER (ORDER BY r rows BETWEEN 1 preceding AND 3 following) FROM quantiles ORDER BY 1, 2;

SELECT r, MEDIAN('prefix-' || CAST(r AS TEXT) || '-suffix') OVER (ORDER BY r rows BETWEEN 1 preceding AND 1 following) FROM quantiles ORDER BY 1, 2;

SELECT r % 3, r, n, MEDIAN(n) OVER (PARTITION BY r % 3 ORDER BY r) FROM (SELECT r, CASE r % 2 WHEN 0 THEN r ELSE NULL END AS n FROM quantiles) AS nulls ORDER BY 1, 2;

SELECT r, n, MEDIAN(n) OVER (ORDER BY r rows BETWEEN 1 preceding AND 1 following) FROM (SELECT r, CASE r % 2 WHEN 0 THEN r ELSE NULL END AS n FROM quantiles) AS nulls ORDER BY 1;

SELECT r, n, MEDIAN(n) OVER (ORDER BY r rows BETWEEN 1 preceding AND 3 following) FROM (SELECT r, CASE r % 2 WHEN 0 THEN r ELSE NULL END AS n FROM quantiles) AS nulls ORDER BY 1;

SELECT r, n, MEDIAN(n) OVER (ORDER BY r rows BETWEEN UNBOUNDED preceding AND UNBOUNDED following) FROM (SELECT r, CASE r % 2 WHEN 0 THEN r ELSE NULL END AS n FROM quantiles) AS nulls ORDER BY 1;

WITH t(i, p, f) AS (SELECT * FROM (VALUES (0, 1, 1), (1, 1, 1), (2, 1, 1), (3, 3, 1), (4, 1, 1), (5, 3, 1)) AS _values) SELECT i, MEDIAN(i) OVER (ORDER BY i ROWS BETWEEN p PRECEDING AND f FOLLOWING) FROM t ORDER BY 1;

WITH t(r, i, p, f) AS (SELECT * FROM (VALUES (0, 0, 1, 1), (1, 1, 1, 1), (2, 2, 1, 1), (3, 0, 1, 1), (4, 1, 1, 1), (5, 2, 1, 1)) AS _values) SELECT r, MEDIAN(i) OVER (ORDER BY r ROWS BETWEEN p PRECEDING AND f FOLLOWING) FROM t ORDER BY 1;

WITH t(r, i, p, f) AS (SELECT * FROM (VALUES (0, 0, 1, 2), (1, 1, 1, 2), (2, 2, 1, 2), (3, 3, 1, 2), (4, 4, 1, 2), (5, 5, 1, 2)) AS _values) SELECT r, QUANTILE_DISC(i, [0.25, 0.5, 0.75]) OVER (ORDER BY r ROWS BETWEEN p PRECEDING AND f FOLLOWING) FROM t ORDER BY 1;

WITH t(r, i, p, f) AS (SELECT * FROM (VALUES (0, NULL, 1, 2), (1, 1, 1, 2), (2, 2, 1, 2), (3, 3, 1, 2), (4, 4, 1, 2), (5, 5, 1, 2)) AS _values) SELECT r, QUANTILE_DISC(i, [0.25, 0.5, 0.75]) OVER (ORDER BY r ROWS BETWEEN p PRECEDING AND f FOLLOWING) FROM t ORDER BY 1;

WITH t(r, i, p, f) AS (SELECT * FROM (VALUES (0, NULL, 1, 2), (1, NULL, 1, 2), (2, NULL, 1, 2), (3, NULL, 1, 2), (4, NULL, 1, 2), (5, NULL, 1, 2)) AS _values) SELECT r, QUANTILE_DISC(i, [0.25, 0.5, 0.75]) OVER (ORDER BY r ROWS BETWEEN p PRECEDING AND f FOLLOWING) FROM t ORDER BY 1;

WITH t(r, i, p, f) AS (SELECT * FROM (VALUES (0, 0, 1, 2), (1, 1, 1, 2), (2, 2, 1, 2), (3, 3, 1, 2), (4, 4, 1, 2), (5, 5, 1, 2)) AS _values) SELECT r, QUANTILE_CONT(i, [0.25, 0.5, 0.75]) OVER (ORDER BY r ROWS BETWEEN p PRECEDING AND f FOLLOWING) FROM t ORDER BY 1;

WITH t(r, i, p, f) AS (SELECT * FROM (VALUES (0, 0, 1, 2), (1, 1, 1, 2), (2, 2, 1, 2), (3, 0, 1, 2), (4, 1, 1, 2), (5, 2, 1, 2)) AS _values) SELECT r, QUANTILE_CONT(i, [0.25, 0.5, 0.75]) OVER (ORDER BY r ROWS BETWEEN p PRECEDING AND f FOLLOWING) FROM t ORDER BY 1;

SELECT r, QUANTILE_DISC(i, 0.5) OVER (ORDER BY r ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) AS q FROM (VALUES (0, 0), (1, 1), (2, 2), (3, 0), (4, 1)) AS tbl(r, i) ORDER BY 1, 2;

SELECT r, QUANTILE_CONT(i, 0.5) OVER (ORDER BY r ROWS BETWEEN 2 PRECEDING AND 1 FOLLOWING) AS q FROM (VALUES (0, 0), (1, 1), (2, 2), (3, 3), (4, 0), (5, 1)) AS tbl(r, i) ORDER BY 1, 2;

SELECT r, QUANTILE_CONT(i, 0.5) OVER (ORDER BY r ROWS BETWEEN 2 PRECEDING AND 1 FOLLOWING) AS q FROM (VALUES (0, NULL), (1, 1), (2, 2), (3, 3), (4, NULL), (5, 1)) AS tbl(r, i) ORDER BY 1, 2;

SELECT r, QUANTILE_CONT(i, 0.5) OVER (ORDER BY r ROWS BETWEEN 2 PRECEDING AND 1 FOLLOWING) AS q FROM (VALUES (0, NULL), (1, 1), (2, 2), (3, 3), (4, NULL), (5, 1)) AS tbl(r, i) ORDER BY 1, 2;

WITH t(r, i, p, f) AS (SELECT * FROM (VALUES (0, 0, 1, 1), (1, 1, 1, 1), (2, 2, 1, 1), (3, 0, 1, 1), (4, 1, 1, 1), (5, 2, 1, 1)) AS _values) SELECT r, MEDIAN(i) OVER (ORDER BY r ROWS BETWEEN p PRECEDING AND f FOLLOWING) FROM t ORDER BY 1;

WITH t(r, i, p, f) AS (SELECT * FROM (VALUES (0, 0, 1, 1), (1, 1, 1, 1), (2, 2, 1, 1), (3, 0, 1, 1), (4, 1, 1, 1), (5, 2, 1, 1)) AS _values) SELECT r, QUANTILE_DISC(i, 0.5) OVER (ORDER BY r ROWS BETWEEN p PRECEDING AND f FOLLOWING) FROM t ORDER BY 1;

WITH t(r, i, p, f) AS (SELECT * FROM (VALUES (0, NULL, 1, 2), (1, 1, 1, 2), (2, 2, 1, 2), (3, 3, 1, 2), (4, 4, 1, 2), (5, 5, 1, 2)) AS _values) SELECT r, QUANTILE_DISC(i, [0.25, 0.5, 0.75]) OVER (ORDER BY r ROWS BETWEEN p PRECEDING AND f FOLLOWING) FROM t ORDER BY 1;

WITH t(r, i, p, f) AS (SELECT * FROM (VALUES (0, 0, 1, 2), (1, 1, 1, 2), (2, 2, 1, 2), (3, 0, 1, 2), (4, 1, 1, 2), (5, 2, 1, 2)) AS _values) SELECT r, QUANTILE_CONT(i, [0.25, 0.5, 0.75]) OVER (ORDER BY r ROWS BETWEEN p PRECEDING AND f FOLLOWING) FROM t ORDER BY 1;

CREATE TABLE rides (id INT, requested_date DATE, city TEXT, wait_time INT);

INSERT INTO rides VALUES (0, '2023-01-05', 'San Francisco', 2925), (1, '2023-01-03', 'San Francisco', 755), (2, '2023-01-03', 'San Francisco', 2880), (3, '2023-01-05', 'San Francisco', 1502), (4, '2023-01-03', 'San Francisco', 2900), (5, '2023-01-01', 'San Francisco', 1210), (6, '2023-01-04', 'San Francisco', 200), (7, '2023-01-02', 'San Francisco', 980), (8, '2023-01-02', 'San Francisco', 430), (9, '2023-01-05', 'San Francisco', 2999), (10, '2023-01-01', 'San Francisco', 856), (11, '2023-01-02', 'San Francisco', 490), (12, '2023-01-02', 'San Francisco', 720);

SELECT "id", "requested_date", "city", "wait_time", MIN("wait_time") OVER win_3d FROM rides WINDOW win_3d AS (PARTITION BY "city" ORDER BY requested_date ASC RANGE BETWEEN INTERVAL '3' DAYS PRECEDING AND INTERVAL '1' DAYS PRECEDING) ORDER BY "requested_date", "city", "id";

PRAGMA enable_verification;

WITH t AS (SELECT i, RANK() OVER (ORDER BY i % 50) AS d FROM RANGE(0, 3000) AS tbl(i)), w AS (SELECT d, COUNT(*) AS c FROM t GROUP BY ALL) SELECT COUNT(*), MIN(d), MAX(d), MIN(c), MAX(c) FROM w;

WITH t AS (SELECT i, RANK() OVER (PARTITION BY i // 3000 ORDER BY i % 50) AS d FROM RANGE(0, 9000) AS tbl(i)), w AS (SELECT d, COUNT(*) AS c FROM t GROUP BY ALL) SELECT COUNT(*), MIN(d), MAX(d), MIN(c), MAX(c) FROM w;

SELECT *, RANK() OVER (ORDER BY x NULLS FIRST) AS rank_nulls_first, RANK() OVER (ORDER BY x) AS rank_nulls_last FROM (VALUES (1), (1), (1), (NULL)) AS issue8315(x) ORDER BY x;

PRAGMA enable_verification;

SELECT i, (i * 29) % 11 AS outside, RANK( ORDER BY (i // 2) DESC) OVER w, PERCENT_RANK( ORDER BY (i // 2) DESC) OVER w FROM RANGE(0, 10) AS tbl(i) WINDOW w AS (ORDER BY (i * 29) % 11) ORDER BY 2;

SELECT i, (i * 29) % 11 AS outside, RANK( ORDER BY (i // 2) DESC) OVER w, PERCENT_RANK( ORDER BY (i // 2) DESC) OVER w FROM RANGE(0, 10) AS tbl(i) WINDOW w AS (ORDER BY (i * 29) % 11) ORDER BY 2;

PRAGMA enable_verification;

SELECT i, (i * 29) % 11 AS outside, ROW_NUMBER( ORDER BY (i // 2) DESC) OVER w, NTILE(4 ORDER BY (i // 2) DESC) OVER w FROM RANGE(0, 10) AS tbl(i) WINDOW w AS (ORDER BY (i * 29) % 11) ORDER BY 2;

PRAGMA enable_verification;

SELECT ROW_NUMBER() OVER ();

SELECT AVG(42) OVER ();

SELECT AVG(42) OVER ();

SELECT NONEXISTINGFUNCTION() OVER ();

SELECT AVG(ROW_NUMBER() OVER ()) OVER ();

SELECT AVG(42) OVER (PARTITION BY ROW_NUMBER() OVER ());

SELECT AVG(42) OVER (ORDER BY ROW_NUMBER() OVER ());

PRAGMA enable_verification;

CREATE TABLE partsupp AS SELECT CAST(UUID() AS TEXT) AS c5 FROM RANGE(0, 8000);

PRAGMA enable_verification;

PRAGMA explain_output = PHYSICAL_ONLY;

EXPLAIN SELECT i, LAG(i, 1) OVER() AS i1
FROM range(10) tbl(i);

SELECT i, LAG(i, 1) OVER () AS i1 FROM RANGE(0, 10) AS tbl(i);

EXPLAIN SELECT i, LAG(i, -1) OVER() AS i1
FROM range(10) tbl(i);

SELECT i, LAG(i, -1) OVER () AS i1 FROM RANGE(0, 10) AS tbl(i);

EXPLAIN SELECT i, LEAD(i, -1) OVER() AS i1
FROM range(10) tbl(i);

SELECT i, LEAD(i, -1) OVER () AS i1 FROM RANGE(0, 10) AS tbl(i);

EXPLAIN SELECT i, LEAD(i, 1) OVER() AS i1
FROM range(10) tbl(i);

SELECT i, LEAD(i, 1) OVER () AS i1 FROM RANGE(0, 10) AS tbl(i);

EXPLAIN SELECT i, LAG(i, 1) OVER() AS i1
FROM range(3000) tbl(i)
WHERE i % 2 = 0
QUALIFY i1 <> i - 2;

SELECT i, LAG(i, 1) OVER () AS i1 FROM RANGE(0, 3000) AS tbl(i) WHERE i % 2 = 0 QUALIFY i1 <> i - 2;

EXPLAIN SELECT i, LAG(i, 1, 50) OVER() AS i1
FROM range(10) tbl(i);

SELECT i, LAG(i, 1, 50) OVER () AS i1 FROM RANGE(0, 10) AS tbl(i);

EXPLAIN SELECT i, LEAD(i, 1, 50) OVER() AS i1
FROM range(10) tbl(i);

SELECT i, LEAD(i, 1, 50) OVER () AS i1 FROM RANGE(0, 10) AS tbl(i);

EXPLAIN SELECT i, LEAD(i, 2) OVER() AS i1
FROM range(3000) tbl(i)
WHERE i % 2048 = 0;

SELECT i, LEAD(i, 2) OVER () AS i1 FROM RANGE(0, 3000) AS tbl(i) WHERE i % 2048 = 0;

EXPLAIN SELECT i, LEAD(i, 2) OVER() AS i1
FROM range(5000) tbl(i)
WHERE i % 2048 = 0;

SELECT i, LEAD(i, 2) OVER () AS i1 FROM RANGE(0, 5000) AS tbl(i) WHERE i % 2048 = 0;

EXPLAIN SELECT i, LAG(i, 3000) OVER() AS i1
FROM range(5000) tbl(i);

EXPLAIN SELECT i, LEAD(i, 3000) OVER() AS i1
FROM range(5000) tbl(i);

SELECT i, LEAD(i, 1) OVER (), LEAD(i, 2) OVER () FROM RANGE(0, 10) AS tbl(i);

SELECT * FROM (SELECT id, LEAD(id, 2047, -1) OVER () AS l FROM RANGE(0, 6144) AS tbl(id) WHERE id <> 1 AND id <> 2 AND id <> 2500 AND id <> 2501 AND id <> 2502) WHERE id >= 2040 AND id <= 2050;

PRAGMA enable_verification;

PRAGMA explain_output = PHYSICAL_ONLY;

EXPLAIN SELECT
lag(COLUMNS(*), 1) OVER (),
lead(COLUMNS(*), -1) OVER()
FROM test_all_types();

SELECT LAG(COLUMNS(*), 1) OVER (), LEAD(COLUMNS(*), -1) OVER () FROM TEST_ALL_TYPES();

EXPLAIN SELECT
lag(COLUMNS(*), -1) OVER(),
lead(COLUMNS(*), 1) OVER()
FROM test_all_types();

SELECT LAG(COLUMNS(*), -1) OVER (), LEAD(COLUMNS(*), 1) OVER () FROM TEST_ALL_TYPES();

create table all_types as from test_all_types()
foreach col <all_types_columns>;

EXPLAIN SELECT lead(lag, -1) over () IS NOT DISTINCT FROM lag(lead, 1) over ()
FROM (
SELECT lag("${col}", 1) OVER () AS lag, lead("${col}", -1) OVER () AS lead
FROM test_all_types()
)
QUALIFY row_number() over ()==2;

SELECT LEAD(lag, -1) OVER () IS NOT DISTINCT FROM LAG(lead, 1) OVER () FROM (SELECT LAG("${col}", 1) OVER () AS lag, LEAD("${col}", -1) OVER () AS lead FROM TEST_ALL_TYPES()) QUALIFY ROW_NUMBER() OVER () = 2;

EXPLAIN SELECT lead(lag, 1) over () IS NOT DISTINCT FROM lag(lead, -1) over ()
FROM (
SELECT lag("${col}", -1) OVER () AS lag, lead("${col}", 1) OVER () AS lead
FROM test_all_types()
)
QUALIFY row_number() over ()==2;

SELECT LEAD(lag, 1) OVER () IS NOT DISTINCT FROM LAG(lead, -1) OVER () FROM (SELECT LAG("${col}", -1) OVER () AS lag, LEAD("${col}", 1) OVER () AS lead FROM TEST_ALL_TYPES()) QUALIFY ROW_NUMBER() OVER () = 2;

PRAGMA enable_verification;

PRAGMA explain_output = PHYSICAL_ONLY;

CREATE TABLE integers (i INT, j INT);

INSERT INTO integers VALUES (2, 2), (2, 1), (1, 2), (1, NULL);

EXPLAIN select first_value(i IGNORE NULLS) over () from integers;

EXPLAIN SELECT i, COUNT(*) OVER() FROM integers;

EXPLAIN SELECT i, SUM(i) OVER() FROM integers;

EXPLAIN SELECT j, COUNT(j) FILTER(WHERE i = 2) OVER(ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) FROM integers;

EXPLAIN SELECT j, COUNT(*) FILTER(WHERE i = 2) OVER(ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) FROM integers;

EXPLAIN SELECT j, SUM(j) FILTER(WHERE i = 2) OVER(ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) FROM integers;

EXPLAIN select row_number() over (), i, j from integers;

SELECT ROW_NUMBER() OVER (), i, j FROM integers;

EXPLAIN select rank() over (), i, j from integers;

SELECT RANK() OVER (), i, j FROM integers;

EXPLAIN select dense_rank() over (), i, j from integers;

SELECT DENSE_RANK() OVER (), i, j FROM integers;

EXPLAIN select percent_rank() over (), i, j from integers;

SELECT PERCENT_RANK() OVER (), i, j FROM integers;

EXPLAIN SELECT i, LAG(i, 1) OVER() AS i1
FROM range(10) tbl(i);

SELECT i, LAG(i, 1) OVER () AS i1 FROM RANGE(0, 10) AS tbl(i);

EXPLAIN SELECT i, LAG(i, -1) OVER() AS i1
FROM range(10) tbl(i);

SELECT i, LAG(i, -1) OVER () AS i1 FROM RANGE(0, 10) AS tbl(i);

EXPLAIN SELECT i, LEAD(i, -1) OVER() AS i1
FROM range(10) tbl(i);

SELECT i, LEAD(i, -1) OVER () AS i1 FROM RANGE(0, 10) AS tbl(i);

EXPLAIN SELECT i, LEAD(i, 1) OVER() AS i1
FROM range(10) tbl(i);

SELECT i, LEAD(i, 1) OVER () AS i1 FROM RANGE(0, 10) AS tbl(i);

EXPLAIN SELECT i, COUNT(*) OVER(ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) FROM integers;

SELECT i, COUNT(*) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) FROM integers;

EXPLAIN SELECT i, COUNT(*) FILTER(WHERE i = 2) OVER(ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) FROM integers;

SELECT i, COUNT(*) FILTER(WHERE i = 2) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) FROM integers;

EXPLAIN SELECT j, COUNT(j) OVER(ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) FROM integers;

SELECT j, COUNT(j) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) FROM integers;

EXPLAIN SELECT i, SUM(i) OVER(ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) FROM integers;

EXPLAIN SELECT i, SUM(i) OVER(ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) FROM integers;

SELECT i, SUM(i) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) FROM integers;

EXPLAIN SELECT SUM(s) FROM (
SELECT SUM(i) OVER(ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) s
FROM range(5000) tbl(i)
);

SELECT SUM(s) FROM (SELECT SUM(i) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS s FROM RANGE(0, 5000) AS tbl(i));

EXPLAIN select i, j, first_value(i) over (), first_value(j) over () from integers;

SELECT i, j, FIRST_VALUE(i) OVER (), FIRST_VALUE(j) OVER () FROM integers;

SELECT ROW_NUMBER() OVER (), FIRST_VALUE(i) OVER (), FIRST_VALUE(j) OVER () FROM integers;

SELECT ROW_NUMBER() OVER (), ROW_NUMBER() OVER () FROM integers;

EXPLAIN select first_value(i IGNORE NULLS) over () from integers;

EXPLAIN select first_value(i) over (), last_value(i) over () from integers;

EXPLAIN select last_value(i) over (), first_value(i) over () from integers;

EXPLAIN select first_value(i) over (), last_value(i) over (order by j) from integers;

EXPLAIN select last_value(i) over (order by j), first_value(i) over () from integers;

CREATE TABLE v1 (id BIGINT);

CREATE TABLE v2 (id BIGINT);

INSERT INTO v1 VALUES (11), (12), (13);

INSERT INTO v2 VALUES (21), (22);

CREATE VIEW vertices_view AS SELECT * FROM v1 UNION ALL SELECT * FROM v2;

SELECT id AS sparse_id, ROW_NUMBER() OVER () AS rnum FROM vertices_view;

WITH RECURSIVE rte AS (SELECT 1 AS l, CAST(1 AS BIGINT) AS r UNION ALL SELECT l + 1, ROW_NUMBER() OVER () FROM rte WHERE l < 3) SELECT * FROM rte;

PREPARE sw1 AS
SELECT i, row_number() OVER() AS row_no
FROM range(10, 20) tbl(i)
QUALIFY row_no <= ?::BIGINT;

EXECUTE sw1(10);

EXECUTE sw1(2);

SELECT LIST(col0) OVER (rows BETWEEN UNBOUNDED preceding AND CURRENT ROW) AS result FROM (VALUES ({'key': 'A'}), ({'key': 'B'}), ({'key': 'C'}));

PRAGMA enable_verification;

PRAGMA explain_output = PHYSICAL_ONLY;

EXPLAIN SELECT i,
SUM(DISTINCT i % 3) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
FROM range(10) tbl(i);

SELECT i, SUM(DISTINCT i % 3) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) FROM RANGE(0, 10) AS tbl(i);

EXPLAIN SELECT
LIST(DISTINCT col0) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS result
FROM (VALUES ({'key': 'A'}), ({'key': 'B'}), ({'key': 'A'}));

SELECT LIST(DISTINCT col0) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS result FROM (VALUES ({'key': 'A'}), ({'key': 'B'}), ({'key': 'A'}));

EXPLAIN SELECT i,
SUM(DISTINCT i % 5) FILTER (i % 3 = 0) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
FROM range(20) tbl(i);

SELECT i, SUM(DISTINCT i % 5) FILTER(WHERE i % 3 = 0) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) FROM RANGE(0, 20) AS tbl(i);

SELECT LIST(row_number) OVER (rows BETWEEN UNBOUNDED preceding AND CURRENT ROW) FROM GENERATE_SERIES(0, 5000) AS t(row_number);

SELECT COUNT(*), SUM(LENGTH(list_aggr)), MIN(LENGTH(list_aggr)), MAX(LENGTH(list_aggr)) FROM (SELECT LIST(row_number) OVER (rows BETWEEN UNBOUNDED preceding AND CURRENT ROW) FROM GENERATE_SERIES(0, 5000) AS t(row_number)) AS t(list_aggr);

PRAGMA enable_verification;

SELECT submission_date, dbsystem, tps, COUNT(DISTINCT dbsystem) OVER w AS competing, RANK( ORDER BY tps DESC) OVER w AS new_rank, FIRST_VALUE(tps ORDER BY tps DESC) OVER w AS best_performance, FIRST_VALUE(dbsystem ORDER BY tps DESC) OVER w AS best_system, LEAD(tps ORDER BY tps DESC) OVER w AS second_performance, LEAD(dbsystem ORDER BY tps DESC) OVER w AS second_system FROM "data/csv/tpcc_results.csv" WINDOW w AS (ORDER BY submission_date range BETWEEN UNBOUNDED preceding AND CURRENT ROW) ORDER BY submission_date;

PRAGMA enable_verification;

BEGIN;

CREATE TABLE wintest (item INT, return_ratio DECIMAL(18, 3), currency_ratio DECIMAL(18, 3));

INSERT INTO wintest VALUES (7539, 0.590000, 0.590000), (3337, 0.626506, 0.626506), (15597, 0.661972, 0.661972), (2915, 0.698630, 0.698630), (11933, 0.717172, 0.717172), (483, 0.800000, 0.800000), (85, 0.857143, 0.857143), (97, 0.903614, 0.903614), (117, 0.925000, 0.925000), (5299, 0.927083, 0.927083), (10055, 0.945652, 0.945652), (4231, 0.977778, 0.977778), (5647, 0.987805, 0.987805), (8679, 0.988764, 0.988764), (10323, 0.977778, 1.111111), (3305, 0.737500, 1.293860);

SELECT item, RANK() OVER (ORDER BY return_ratio) AS return_rank, RANK() OVER (ORDER BY currency_ratio) AS currency_rank FROM wintest ORDER BY item;

PRAGMA enable_verification;

SELECT i, (i * 29) % 11 AS outside, FIRST_VALUE(i ORDER BY i DESC) OVER w, LAST_VALUE(i ORDER BY i DESC) OVER w, NTH_VALUE(i, 2 ORDER BY i DESC) OVER w FROM RANGE(0, 10) AS tbl(i) WINDOW w AS (ORDER BY (i * 29) % 11 ROWS BETWEEN 3 PRECEDING AND 3 FOLLOWING) ORDER BY 2;

SELECT i, (i * 29) % 11 AS outside, FIRST_VALUE(i ORDER BY i DESC) OVER w, LAST_VALUE(i ORDER BY i DESC) OVER w, NTH_VALUE(i, 2 ORDER BY i DESC) OVER w FROM RANGE(0, 10) AS tbl(i) WINDOW w AS (ORDER BY (i * 29) % 11 ROWS BETWEEN 3 PRECEDING AND 3 FOLLOWING) ORDER BY 2;

SELECT SETSEED(0.8675309);

SELECT LIST(RANDOM()) OVER (ORDER BY id), MAX(RANDOM()) OVER (ORDER BY id) FROM RANGE(0, 3) AS t(id);

PRAGMA enable_verification;

CREATE TABLE data (id INT, value INT, PRIMARY KEY (id));

INSERT INTO data (id, value) SELECT id, RANDOM() * 100000 AS value FROM (SELECT range AS id FROM RANGE(0, 1000000)) AS ids;

SELECT COUNT(*) FROM (SELECT value, ROW_NUMBER() OVER (ORDER BY id) FROM data) AS w;

PRAGMA enable_verification;

CREATE TABLE integers (i INT);

SELECT MIN(a) OVER (PARTITION BY i ORDER BY i) FROM integers;

SELECT MIN(i) OVER (PARTITION BY a ORDER BY i) FROM integers;

SELECT MIN(i) OVER (PARTITION BY i ORDER BY a) FROM integers;

SELECT MIN(i) OVER (PARTITION BY i, a ORDER BY i) FROM integers;

SELECT MIN(i) OVER (PARTITION BY i ORDER BY i, a) FROM integers;

SELECT MIN(i) OVER (PARTITION BY i ORDER BY i) FROM integers;

PRAGMA enable_verification;

SELECT i, LAG(i) OVER named_window FROM (VALUES (1), (2), (3)) AS t(i) WINDOW named_window AS (ORDER BY i);

WITH subquery AS (SELECT i, LAG(i) OVER named_window FROM (VALUES (1), (2), (3)) AS t(i) WINDOW named_window AS (ORDER BY i)) SELECT * FROM subquery;

SELECT * FROM (SELECT i, LAG(i) OVER named_window FROM (VALUES (1), (2), (3)) AS t(i) WINDOW named_window AS (ORDER BY i)) AS t1;

CREATE VIEW v1 AS SELECT i, LAG(i) OVER named_window FROM (VALUES (1), (2), (3)) AS t(i) WINDOW named_window AS (ORDER BY i);

SELECT * FROM v1;

SELECT * FROM (SELECT i, LAG(i) OVER named_window FROM (VALUES (1), (2), (3)) AS t(i) WINDOW named_window AS (ORDER BY i)) AS t1, (SELECT i, LAG(i) OVER named_window FROM (VALUES (1), (2), (3)) AS t(i) WINDOW named_window AS (ORDER BY i)) AS t2 ORDER BY 1, 2, 3, 4;

WITH subquery AS (SELECT i, LAG(i) OVER named_window FROM (VALUES (1), (2), (3)) AS t(i)) SELECT * FROM subquery WINDOW named_window AS (ORDER BY i);

SELECT i, LAG(i) OVER named_window FROM (VALUES (1), (2), (3)) AS t(i) WINDOW named_window AS (ORDER BY i), named_window AS (ORDER BY j);

CREATE TABLE a (id INT);

PRAGMA enable_verification;

CREATE TABLE a AS SELECT range % 2 = 0 AS j, CAST(range AS INT) AS i FROM RANGE(1, 5, 1);

SELECT j, i, SUM(i) OVER () FROM a ORDER BY 1, 2;

SELECT j, i, SUM(i) OVER (PARTITION BY j) FROM a ORDER BY 1, 2;

SELECT j, i, SUM(i) OVER (PARTITION BY j ORDER BY i) FROM a ORDER BY 1, 2;

DROP TABLE a;

CREATE TABLE a AS SELECT range % 2 AS j, range % 3 = 0 AS i FROM RANGE(1, 5, 1);

SELECT j, i, BOOL_AND(i) OVER (), BOOL_OR(i) OVER () FROM a ORDER BY 1, 2;

SELECT j, i, BOOL_AND(i) OVER (PARTITION BY j), BOOL_OR(i) OVER (PARTITION BY j) FROM a ORDER BY 1, 2;

SELECT j, i, BOOL_AND(NOT i) OVER (PARTITION BY j ORDER BY i), BOOL_AND(i) OVER (PARTITION BY j ORDER BY i), BOOL_OR(i) OVER (PARTITION BY j ORDER BY i) FROM a ORDER BY 1, 2;

PRAGMA enable_verification;

CREATE TABLE integers AS SELECT range AS i FROM RANGE(0, 16);

SELECT MAX(base), MAX(referenced), SUM(refined), SUM(unrefined) FROM (SELECT ROW_NUMBER() OVER w AS base, ROW_NUMBER() OVER w AS referenced, SUM(i % 4) OVER (w rows BETWEEN 1 preceding AND 1 following) AS refined, SUM(i % 4) OVER (rows BETWEEN 1 preceding AND 1 following) AS unrefined FROM integers WINDOW w AS (PARTITION BY i // 4 ORDER BY i % 4)) AS q;

SELECT x, y, COUNT(*) OVER (PARTITION BY y ORDER BY x), COUNT(*) OVER (w ORDER BY x) FROM (VALUES (1, 1), (2, 1), (3, 2), (4, 2)) AS t(x, y) WINDOW w AS (PARTITION BY y) ORDER BY x;

SELECT x, y, COUNT(*) OVER (PARTITION BY y ORDER BY x), COUNT(*) OVER (w ORDER BY x) FROM (VALUES (1, 1), (2, 1), (3, 2), (4, 2)) AS t(x, y) WINDOW w AS (PARTITION BY y ORDER BY x DESC) ORDER BY x;

SELECT x, y, COUNT(*) OVER (PARTITION BY y ORDER BY x), COUNT(*) OVER (w PARTITION BY y) FROM (VALUES (1, 1), (2, 1), (3, 2), (4, 2)) AS t(x, y) WINDOW w AS (PARTITION BY x) ORDER BY x;

SELECT i, SUM(i) OVER w AS smoothed FROM integers WINDOW w AS (ORDER BY i rows BETWEEN 1 preceding AND 1 following) ORDER BY i;

SELECT SUM(1) OVER cumulativeSum FROM integers WINDOW cumulativeSum AS (), cumulativesum AS (ORDER BY i rows BETWEEN 1 preceding AND 1 following);

PRAGMA enable_verification;

SELECT part, id, SUM(val) OVER (PARTITION BY part ORDER BY id), LEAD(val) OVER (PARTITION BY part ORDER BY id) FROM (SELECT range AS id, range % 5 AS part, range AS val FROM RANGE(0, 13)) AS t ORDER BY ALL;

SELECT part, id, ARRAY_SORT(LIST(val) OVER (PARTITION BY part)) FROM (SELECT range AS id, range % 5 AS part, range AS val FROM RANGE(0, 13)) AS t ORDER BY ALL;

SELECT part, MIN(const) AS lo, MAX(const) AS hi FROM (SELECT part, SUM(val) OVER (PARTITION BY part) AS const FROM ((SELECT 1 AS part, range AS val FROM RANGE(0, 73)) UNION ALL (SELECT 2 AS part, range AS val FROM RANGE(0, 75)) UNION ALL (SELECT 3 AS part, range AS val FROM RANGE(0, 77)) UNION ALL (SELECT 4 AS part, range AS val FROM RANGE(0, 79)) UNION ALL (SELECT 5 AS part, range AS val FROM RANGE(0, 81)) UNION ALL (SELECT 6 AS part, range AS val FROM RANGE(0, 83))) AS u) AS t GROUP BY ALL ORDER BY ALL;

SELECT part, MIN(const) AS lo, MAX(const) AS hi FROM (SELECT part, SUM(val) OVER (PARTITION BY part) AS const FROM (SELECT part, val FROM ((SELECT range AS part, RANDOM() AS val FROM RANGE(0, 10)) AS r CROSS JOIN RANGE(0, 3000)) AS p) AS t) AS w GROUP BY ALL HAVING lo <> hi ORDER BY ALL;

CREATE TABLE issue7353 (Season TEXT, Medal TEXT, Sex TEXT, Ct INT, Depth INT);

INSERT INTO issue7353 (Season, Medal, Sex, Ct, Depth) VALUES (NULL, NULL, NULL, 271116, 0), ('Summer', NULL, NULL, 222552, 1), ('Winter', NULL, NULL, 48564, 1), ('Summer', 'NA', NULL, 188464, 2), ('Summer', 'Gold', NULL, 11459, 2), ('Winter', 'NA', NULL, 42869, 2), ('Summer', 'Bronze', NULL, 11409, 2), ('Winter', 'Bronze', NULL, 1886, 2), ('Winter', 'Gold', NULL, 1913, 2), ('Winter', 'Silver', NULL, 1896, 2), ('Summer', 'Silver', NULL, 11220, 2), ('Summer', 'NA', 'M', 138463, 3), ('Summer', 'Gold', 'M', 8319, 3), ('Winter', 'NA', 'F', 13268, 3), ('Winter', 'NA', 'M', 29601, 3), ('Summer', 'NA', 'F', 50001, 3), ('Summer', 'Bronze', 'M', 8235, 3), ('Winter', 'Bronze', 'M', 1289, 3), ('Winter', 'Gold', 'M', 1306, 3), ('Winter', 'Silver', 'M', 1289, 3), ('Summer', 'Gold', 'F', 3140, 3), ('Summer', 'Silver', 'M', 8092, 3), ('Summer', 'Bronze', 'F', 3174, 3), ('Summer', 'Silver', 'F', 3128, 3), ('Winter', 'Bronze', 'F', 597, 3), ('Winter', 'Gold', 'F', 607, 3), ('Winter', 'Silver', 'F', 607, 3);

PRAGMA default_null_order = 'NULLS LAST';

SELECT *, MAX(Ct) FILTER(WHERE Depth = 1) OVER (PARTITION BY Season) AS value_depth1 FROM issue7353 ORDER BY ALL;

SELECT i // 10 AS p, i, GROUP_CONCAT(i, ',' ORDER BY i DESC) OVER (PARTITION BY p) AS c FROM RANGE(0, 20) AS tbl(i) ORDER BY ALL;

SELECT i // 10 AS p, i, GROUP_CONCAT(i, ',' ORDER BY i DESC) OVER (PARTITION BY p) AS c FROM RANGE(0, 20) AS tbl(i) ORDER BY ALL;

WITH table_1 AS (SELECT CAST('fb30cf47-6f6b-42ef-dec2-3f984479a2aa' AS UUID) AS id, UNNEST(GENERATE_SERIES(CAST('2024-04-01' AS DATE), CAST('2025-03-01' AS DATE), INTERVAL '1' MONTH)) AS date UNION ALL BY NAME SELECT CAST('7d1cc557-2d45-6900-a1ed-b2c64f5d9200' AS UUID) AS id, UNNEST(GENERATE_SERIES(CAST('2024-02-01' AS DATE), CAST('2025-01-01' AS DATE), INTERVAL '1' MONTH)) AS date), table_2 AS (SELECT CAST('fb30cf47-6f6b-42ef-dec2-3f984479a2aa' AS UUID) AS id, UNNEST(GENERATE_SERIES(CAST('2024-04-01' AS DATE), CAST('2025-03-01' AS DATE), INTERVAL '1' MONTH)) AS date, 1 AS value UNION ALL BY NAME SELECT CAST('7d1cc557-2d45-6900-a1ed-b2c64f5d9200' AS UUID) AS id, UNNEST(GENERATE_SERIES(CAST('2022-12-01' AS DATE), CAST('2023-12-01' AS DATE), INTERVAL '1' MONTH)) AS date, 1 AS value), output AS (SELECT table_1.id, table_1.date, SUM(table_2.value) OVER (PARTITION BY table_1.id ORDER BY table_1.date ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS test_sum FROM table_1 LEFT JOIN table_2 ON table_1.id = table_2.id AND table_1.date = table_2.date) SELECT * FROM output ORDER BY id DESC, date DESC;

WITH repro2 AS (SELECT range // 59 AS id, RANDOM() AS value FROM RANGE(0, 1475)), X AS (SELECT LIST(value) OVER (PARTITION BY id ORDER BY value ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS values FROM repro2) SELECT COUNT(*) FROM X WHERE values[1] <> LIST_AGGREGATE(VALUES ('min'));

PRAGMA enable_verification;

PRAGMA explain_output = PHYSICAL_ONLY;

SELECT SETSEED(0.867309);

CREATE TABLE eventlog AS SELECT ts, CHR(CAST((RANDOM() * 3 + 65) AS INT)) AS activity_name, CAST((RANDOM() * 100) AS INT) AS case_id FROM GENERATE_SERIES(CAST('2023-01-01' AS TIMESTAMP), CAST('2023-02-01' AS TIMESTAMP), INTERVAL '1' HOUR) AS tbl(ts);

CREATE VIEW cse AS WITH t AS (SELECT GROUP_CONCAT(activity_name, ',' ORDER BY ts ASC, activity_name) AS trace, 1 AS cnt FROM eventlog GROUP BY case_id) SELECT trace, SUM(cnt) AS cnt_trace, SUM(cnt_trace) OVER () AS cnt_total, SUM(cnt) / SUM(cnt_trace) OVER () AS rel, SUM(cnt_trace) OVER (ORDER BY cnt_trace DESC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) / SUM(cnt_trace) OVER () AS rel FROM t GROUP BY trace ORDER BY cnt_trace DESC;

EXPLAIN FROM cse;

EXPLAIN FROM cse;

EXPLAIN FROM cse;

EXPLAIN FROM cse;

CREATE VIEW noncse AS SELECT QUANTILE(x, 0.3) OVER () AS q3, QUANTILE(x, 0.7) OVER () AS q7 FROM GENERATE_SERIES(1, 10) AS tbl(x);

EXPLAIN FROM noncse;

PRAGMA enable_verification;

CREATE TABLE dbplyr_052 (x INT, g DOUBLE, w INT);

INSERT INTO dbplyr_052 VALUES (1, 1, 42), (2, 1, 42), (3, 1, 42), (2, 2, 42), (3, 2, 42), (4, 2, 42);

SELECT x, g FROM (SELECT x, g, SUM(x) OVER (PARTITION BY g ORDER BY x ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS zzz67 FROM (SELECT x, g FROM dbplyr_052 ORDER BY x) AS dbplyr_053) AS dbplyr_054 WHERE (zzz67 > 3.0);

SELECT x, g FROM (SELECT x, g, SUM(x) OVER (PARTITION BY g ORDER BY x ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS zzz67 FROM (SELECT x, g FROM dbplyr_052 ORDER BY w) AS dbplyr_053) AS dbplyr_054 WHERE (zzz67 > 3.0);

SELECT x, g FROM (SELECT x, g, SUM(x) OVER (PARTITION BY g ORDER BY x ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS zzz67 FROM (SELECT * FROM dbplyr_052 ORDER BY x) AS dbplyr_053) AS dbplyr_054 WHERE (zzz67 > 3.0);

PRAGMA enable_verification;

SELECT COUNT(DISTINCT 42) OVER ();

WITH t AS (SELECT col0 AS a, col1 AS b FROM (VALUES (1, 2), (1, 1), (1, 2), (2, 1), (2, 1), (2, 2), (2, 3), (2, 4)) AS v) SELECT *, COUNT(b) OVER (PARTITION BY a), COUNT(DISTINCT b) OVER (PARTITION BY a) FROM t ORDER BY 1, 2;

CREATE TABLE figure1 AS SELECT * FROM (VALUES (1, 'a'), (2, 'b'), (3, 'b'), (4, 'c'), (5, 'c'), (6, 'b'), (7, 'c'), (8, 'a')) AS v(i, s);

SELECT i, s, COUNT(DISTINCT s) OVER (ORDER BY i ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING) AS c FROM figure1 ORDER BY i;

WITH uncascaded AS (SELECT i, i % 29 AS v FROM RANGE(0, 1000) AS tbl(i)) SELECT i, v, COUNT(DISTINCT v) OVER (ORDER BY i ROWS BETWEEN 25 PRECEDING AND 25 FOLLOWING) AS w FROM uncascaded ORDER BY i;

WITH cascaded AS (SELECT i, i % 29 AS v FROM RANGE(0, 10000) AS tbl(i)) SELECT i, v, COUNT(DISTINCT v) OVER (ORDER BY i ROWS BETWEEN 25 PRECEDING AND 25 FOLLOWING) AS w FROM cascaded ORDER BY i;

WITH cascaded AS (SELECT i, i % 29 AS v FROM RANGE(0, 10000) AS tbl(i)) SELECT i, v, COUNT(DISTINCT v) OVER (ORDER BY i ROWS BETWEEN 25 PRECEDING AND 25 FOLLOWING) AS w FROM cascaded ORDER BY i;

INSERT INTO figure1 VALUES (9, NULL), (NULL, 'b'), (NULL, NULL);

SELECT i, s, COUNT(DISTINCT s) OVER (ORDER BY i ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING) AS c FROM figure1 ORDER BY i;

CREATE TABLE nested AS SELECT i, s, {'m': i % 2, 's': s} AS n, [CAST((i % 2) AS TEXT), s] AS l, i * i AS r FROM figure1;

SELECT i, n, COUNT(DISTINCT n) OVER (ORDER BY i ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING) AS c FROM nested ORDER BY i;

SELECT i, l, COUNT(DISTINCT l) OVER (ORDER BY i ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING) AS c FROM nested ORDER BY i;

SELECT r, s, COUNT(DISTINCT s) OVER (ORDER BY r RANGE BETWEEN 10 PRECEDING AND 10 FOLLOWING) AS c FROM nested ORDER BY i;

SELECT i, s, GROUP_CONCAT(DISTINCT s, ', ') OVER (ORDER BY i ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING) AS c FROM nested ORDER BY i;

SELECT i, s, MEDIAN(DISTINCT s) OVER (ORDER BY i ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING) AS c FROM nested ORDER BY i;

SELECT i, s, COUNT(DISTINCT s) FILTER(WHERE i % 3 = 0) OVER (ORDER BY i ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING) AS c FROM nested ORDER BY i;

SELECT i, s, COUNT(DISTINCT s) FILTER(WHERE i % 3 = 1) OVER (ORDER BY i ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING) AS c FROM nested ORDER BY i;

SELECT i, s, COUNT(DISTINCT s) FILTER(WHERE i % 3 = 2) OVER (ORDER BY i ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING) AS c FROM nested ORDER BY i;

CALL dbgen(sf=1);

PRAGMA temp_directory = '__TEST_DIR__/window_distinct';

SELECT l_orderkey, l_linenumber, l_returnflag, COUNT(DISTINCT l_returnflag) OVER (PARTITION BY l_orderkey ORDER BY l_linenumber) FROM lineitem ORDER BY ALL;

PRAGMA threads = 4;

PRAGMA memory_limit = '500MB';

WITH t AS (SELECT range AS i, CHR(CAST((65 + i % 26) AS INT)) AS c FROM RANGE(0, CAST(1e6 AS BIGINT))) SELECT i, c, COUNT(DISTINCT c) OVER (ORDER BY i DESC) AS n FROM t ORDER BY ALL;

PRAGMA enable_verification;

CREATE TABLE tenk1d (unique1 INT, four INT, col INT);

INSERT INTO tenk1d (unique1, four, col) VALUES (0, 0, NULL), (1, 1, 1), (2, 2, NULL), (3, 3, 3), (4, 0, NULL), (5, 1, 1), (6, 2, NULL), (7, 3, 3), (8, 0, NULL), (9, 1, 1);

CREATE TABLE empsalary (depname TEXT, empno BIGINT, salary INT, enroll_date DATE);

INSERT INTO empsalary VALUES ('develop', 10, 5200, '2007-08-01'), ('sales', 1, 5000, '2006-10-01'), ('personnel', 5, 3500, '2007-12-10'), ('sales', 4, 4800, '2007-08-08'), ('personnel', 2, 3900, '2006-12-23'), ('develop', 7, 4200, '2008-01-01'), ('develop', 9, 4500, '2008-01-01'), ('sales', 3, 4800, '2007-08-01'), ('develop', 8, 6000, '2006-10-01'), ('develop', 11, 5200, '2007-08-15');

INSERT INTO empsalary VALUES ('develop', 10, 5200, '2007-08-01'), ('sales', 1, 5000, '2006-10-01'), ('personnel', 5, 3500, '2007-12-10'), ('sales', 4, 4800, '2007-08-08'), ('personnel', 2, 3900, '2006-12-23'), ('develop', 7, 4200, '2008-01-01'), ('develop', 9, 4500, '2008-01-01'), ('sales', 3, 4800, '2007-08-01'), ('develop', 8, 6000, '2006-10-01'), ('develop', 11, 5200, '2007-08-15');

INSERT INTO empsalary VALUES ('develop', 10, 5200, '2007-08-01'), ('sales', 1, 5000, '2006-10-01'), ('personnel', 5, 3500, '2007-12-10'), ('sales', 4, 4800, '2007-08-08'), ('personnel', 2, 3900, '2006-12-23'), ('develop', 7, 4200, '2008-01-01'), ('develop', 9, 4500, '2008-01-01'), ('sales', 3, 4800, '2007-08-01'), ('develop', 8, 6000, '2006-10-01'), ('develop', 11, 5200, '2007-08-15');

INSERT INTO empsalary VALUES ('develop', 10, 5200, '2007-08-01'), ('sales', 1, 5000, '2006-10-01'), ('personnel', 5, 3500, '2007-12-10'), ('sales', 4, 4800, '2007-08-08'), ('personnel', 2, 3900, '2006-12-23'), ('develop', 7, 4200, '2008-01-01'), ('develop', 9, 4500, '2008-01-01'), ('sales', 3, 4800, '2007-08-01'), ('develop', 8, 6000, '2006-10-01'), ('develop', 11, 5200, '2007-08-15');

INSERT INTO empsalary VALUES ('develop', 10, 5200, '2007-08-01'), ('sales', 1, 5000, '2006-10-01'), ('personnel', 5, 3500, '2007-12-10'), ('sales', 4, 4800, '2007-08-08'), ('personnel', 2, 3900, '2006-12-23'), ('develop', 7, 4200, '2008-01-01'), ('develop', 9, 4500, '2008-01-01'), ('sales', 3, 4800, '2007-08-01'), ('develop', 8, 6000, '2006-10-01'), ('develop', 11, 5200, '2007-08-15');

INSERT INTO empsalary VALUES ('develop', 10, 5200, '2007-08-01'), ('sales', 1, 5000, '2006-10-01'), ('personnel', 5, 3500, '2007-12-10'), ('sales', 4, 4800, '2007-08-08'), ('personnel', 2, 3900, '2006-12-23'), ('develop', 7, 4200, '2008-01-01'), ('develop', 9, 4500, '2008-01-01'), ('sales', 3, 4800, '2007-08-01'), ('develop', 8, 6000, '2006-10-01'), ('develop', 11, 5200, '2007-08-15');

INSERT INTO empsalary VALUES ('develop', 10, 5200, '2007-08-01'), ('sales', 1, 5000, '2006-10-01'), ('personnel', 5, 3500, '2007-12-10'), ('sales', 4, 4800, '2007-08-08'), ('personnel', 2, 3900, '2006-12-23'), ('develop', 7, 4200, '2008-01-01'), ('develop', 9, 4500, '2008-01-01'), ('sales', 3, 4800, '2007-08-01'), ('develop', 8, 6000, '2006-10-01'), ('develop', 11, 5200, '2007-08-15');

INSERT INTO empsalary VALUES ('develop', 10, 5200, '2007-08-01'), ('sales', 1, 5000, '2006-10-01'), ('personnel', 5, 3500, '2007-12-10'), ('sales', 4, 4800, '2007-08-08'), ('personnel', 2, 3900, '2006-12-23'), ('develop', 7, 4200, '2008-01-01'), ('develop', 9, 4500, '2008-01-01'), ('sales', 3, 4800, '2007-08-01'), ('develop', 8, 6000, '2006-10-01'), ('develop', 11, 5200, '2007-08-15');

INSERT INTO empsalary VALUES ('develop', 10, 5200, '2007-08-01'), ('sales', 1, 5000, '2006-10-01'), ('personnel', 5, 3500, '2007-12-10'), ('sales', 4, 4800, '2007-08-08'), ('personnel', 2, 3900, '2006-12-23'), ('develop', 7, 4200, '2008-01-01'), ('develop', 9, 4500, '2008-01-01'), ('sales', 3, 4800, '2007-08-01'), ('develop', 8, 6000, '2006-10-01'), ('develop', 11, 5200, '2007-08-15');

INSERT INTO empsalary VALUES ('develop', 10, 5200, '2007-08-01'), ('sales', 1, 5000, '2006-10-01'), ('personnel', 5, 3500, '2007-12-10'), ('sales', 4, 4800, '2007-08-08'), ('personnel', 2, 3900, '2006-12-23'), ('develop', 7, 4200, '2008-01-01'), ('develop', 9, 4500, '2008-01-01'), ('sales', 3, 4800, '2007-08-01'), ('develop', 8, 6000, '2006-10-01'), ('develop', 11, 5200, '2007-08-15');

INSERT INTO empsalary VALUES ('develop', 10, 5200, '2007-08-01'), ('sales', 1, 5000, '2006-10-01'), ('personnel', 5, 3500, '2007-12-10'), ('sales', 4, 4800, '2007-08-08'), ('personnel', 2, 3900, '2006-12-23'), ('develop', 7, 4200, '2008-01-01'), ('develop', 9, 4500, '2008-01-01'), ('sales', 3, 4800, '2007-08-01'), ('develop', 8, 6000, '2006-10-01'), ('develop', 11, 5200, '2007-08-15');

INSERT INTO empsalary VALUES ('develop', 10, 5200, '2007-08-01'), ('sales', 1, 5000, '2006-10-01'), ('personnel', 5, 3500, '2007-12-10'), ('sales', 4, 4800, '2007-08-08'), ('personnel', 2, 3900, '2006-12-23'), ('develop', 7, 4200, '2008-01-01'), ('develop', 9, 4500, '2008-01-01'), ('sales', 3, 4800, '2007-08-01'), ('develop', 8, 6000, '2006-10-01'), ('develop', 11, 5200, '2007-08-15');

INSERT INTO empsalary VALUES ('develop', 10, 5200, '2007-08-01'), ('sales', 1, 5000, '2006-10-01'), ('personnel', 5, 3500, '2007-12-10'), ('sales', 4, 4800, '2007-08-08'), ('personnel', 2, 3900, '2006-12-23'), ('develop', 7, 4200, '2008-01-01'), ('develop', 9, 4500, '2008-01-01'), ('sales', 3, 4800, '2007-08-01'), ('develop', 8, 6000, '2006-10-01'), ('develop', 11, 5200, '2007-08-15');

INSERT INTO empsalary VALUES ('develop', 10, 5200, '2007-08-01'), ('sales', 1, 5000, '2006-10-01'), ('personnel', 5, 3500, '2007-12-10'), ('sales', 4, 4800, '2007-08-08'), ('personnel', 2, 3900, '2006-12-23'), ('develop', 7, 4200, '2008-01-01'), ('develop', 9, 4500, '2008-01-01'), ('sales', 3, 4800, '2007-08-01'), ('develop', 8, 6000, '2006-10-01'), ('develop', 11, 5200, '2007-08-15');

INSERT INTO empsalary VALUES ('develop', 10, 5200, '2007-08-01'), ('sales', 1, 5000, '2006-10-01'), ('personnel', 5, 3500, '2007-12-10'), ('sales', 4, 4800, '2007-08-08'), ('personnel', 2, 3900, '2006-12-23'), ('develop', 7, 4200, '2008-01-01'), ('develop', 9, 4500, '2008-01-01'), ('sales', 3, 4800, '2007-08-01'), ('develop', 8, 6000, '2006-10-01'), ('develop', 11, 5200, '2007-08-15');

INSERT INTO empsalary VALUES ('develop', 10, 5200, '2007-08-01'), ('sales', 1, 5000, '2006-10-01'), ('personnel', 5, 3500, '2007-12-10'), ('sales', 4, 4800, '2007-08-08'), ('personnel', 2, 3900, '2006-12-23'), ('develop', 7, 4200, '2008-01-01'), ('develop', 9, 4500, '2008-01-01'), ('sales', 3, 4800, '2007-08-01'), ('develop', 8, 6000, '2006-10-01'), ('develop', 11, 5200, '2007-08-15');

INSERT INTO empsalary VALUES ('develop', 10, 5200, '2007-08-01'), ('sales', 1, 5000, '2006-10-01'), ('personnel', 5, 3500, '2007-12-10'), ('sales', 4, 4800, '2007-08-08'), ('personnel', 2, 3900, '2006-12-23'), ('develop', 7, 4200, '2008-01-01'), ('develop', 9, 4500, '2008-01-01'), ('sales', 3, 4800, '2007-08-01'), ('develop', 8, 6000, '2006-10-01'), ('develop', 11, 5200, '2007-08-15');

INSERT INTO empsalary VALUES ('develop', 10, 5200, '2007-08-01'), ('sales', 1, 5000, '2006-10-01'), ('personnel', 5, 3500, '2007-12-10'), ('sales', 4, 4800, '2007-08-08'), ('personnel', 2, 3900, '2006-12-23'), ('develop', 7, 4200, '2008-01-01'), ('develop', 9, 4500, '2008-01-01'), ('sales', 3, 4800, '2007-08-01'), ('develop', 8, 6000, '2006-10-01'), ('develop', 11, 5200, '2007-08-15');

INSERT INTO empsalary VALUES ('develop', 10, 5200, '2007-08-01'), ('sales', 1, 5000, '2006-10-01'), ('personnel', 5, 3500, '2007-12-10'), ('sales', 4, 4800, '2007-08-08'), ('personnel', 2, 3900, '2006-12-23'), ('develop', 7, 4200, '2008-01-01'), ('develop', 9, 4500, '2008-01-01'), ('sales', 3, 4800, '2007-08-01'), ('develop', 8, 6000, '2006-10-01'), ('develop', 11, 5200, '2007-08-15');

INSERT INTO empsalary VALUES ('develop', 10, 5200, '2007-08-01'), ('sales', 1, 5000, '2006-10-01'), ('personnel', 5, 3500, '2007-12-10'), ('sales', 4, 4800, '2007-08-08'), ('personnel', 2, 3900, '2006-12-23'), ('develop', 7, 4200, '2008-01-01'), ('develop', 9, 4500, '2008-01-01'), ('sales', 3, 4800, '2007-08-01'), ('develop', 8, 6000, '2006-10-01'), ('develop', 11, 5200, '2007-08-15');

EXPLAIN SELECT unique1, COUNT(*) OVER(ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW EXCLUDE CURRENT ROW) FROM tenk1d;

EXPLAIN SELECT unique1, COUNT(*) OVER(ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW EXCLUDE CURRENT ROW) FROM tenk1d;

EXPLAIN SELECT unique1, COUNT(*) OVER(ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW EXCLUDE CURRENT ROW) FROM tenk1d;

EXPLAIN SELECT unique1, COUNT(*) OVER(ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW EXCLUDE CURRENT ROW) FROM tenk1d;

EXPLAIN SELECT unique1, COUNT(*) OVER(ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW EXCLUDE CURRENT ROW) FROM tenk1d;

EXPLAIN SELECT unique1, COUNT(*) OVER(ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW EXCLUDE CURRENT ROW) FROM tenk1d;

EXPLAIN SELECT unique1, COUNT(*) OVER(ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW EXCLUDE CURRENT ROW) FROM tenk1d;

EXPLAIN SELECT unique1, COUNT(*) OVER(ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW EXCLUDE CURRENT ROW) FROM tenk1d;

EXPLAIN SELECT unique1, COUNT(*) OVER(ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW EXCLUDE CURRENT ROW) FROM tenk1d;

EXPLAIN SELECT unique1, COUNT(*) OVER(ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW EXCLUDE CURRENT ROW) FROM tenk1d;

EXPLAIN SELECT unique1, COUNT(*) OVER(ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW EXCLUDE CURRENT ROW) FROM tenk1d;

EXPLAIN SELECT unique1, COUNT(*) OVER(ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW EXCLUDE CURRENT ROW) FROM tenk1d;

EXPLAIN SELECT unique1, COUNT(*) OVER(ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW EXCLUDE CURRENT ROW) FROM tenk1d;

EXPLAIN SELECT unique1, COUNT(*) OVER(ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW EXCLUDE CURRENT ROW) FROM tenk1d;

EXPLAIN SELECT unique1, COUNT(*) OVER(ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW EXCLUDE CURRENT ROW) FROM tenk1d;

EXPLAIN SELECT unique1, COUNT(*) OVER(ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW EXCLUDE CURRENT ROW) FROM tenk1d;

EXPLAIN SELECT unique1, COUNT(*) OVER(ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW EXCLUDE CURRENT ROW) FROM tenk1d;

EXPLAIN SELECT unique1, COUNT(*) OVER(ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW EXCLUDE CURRENT ROW) FROM tenk1d;

EXPLAIN SELECT unique1, COUNT(*) OVER(ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW EXCLUDE CURRENT ROW) FROM tenk1d;

EXPLAIN SELECT unique1, COUNT(*) OVER(ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW EXCLUDE CURRENT ROW) FROM tenk1d;

EXPLAIN SELECT unique1, COUNT(*) OVER(ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW EXCLUDE CURRENT ROW) FROM tenk1d;

SELECT FIRST_VALUE(salary) OVER (ORDER BY salary range BETWEEN 1000 preceding AND 1000 following) AS first_value, LEAD(salary) OVER (ORDER BY salary range BETWEEN 1000 preceding AND 1000 following) AS lead, NTH_VALUE(salary, 1) OVER (ORDER BY salary range BETWEEN 1000 preceding AND 1000 following), salary FROM empsalary ORDER BY first_value, lead;

SELECT LAST_VALUE(salary) OVER (ORDER BY salary range BETWEEN 1000 preceding AND 1000 following) AS last_value, LAG(salary) OVER (ORDER BY salary range BETWEEN 1000 preceding AND 1000 following) AS lag, salary FROM empsalary ORDER BY last_value, lag;

SELECT LAST_VALUE(salary) OVER (ORDER BY salary range BETWEEN 1000 preceding AND 1000 following) AS last_value, LAG(salary) OVER (ORDER BY salary range BETWEEN 1000 preceding AND 1000 following) AS lag, salary FROM empsalary ORDER BY last_value, lag;

SELECT LAST_VALUE(salary) OVER (ORDER BY salary range BETWEEN 1000 preceding AND 1000 following) AS last_value, LAG(salary) OVER (ORDER BY salary range BETWEEN 1000 preceding AND 1000 following) AS lag, salary FROM empsalary ORDER BY last_value, lag;

SELECT LAST_VALUE(salary) OVER (ORDER BY salary range BETWEEN 1000 preceding AND 1000 following) AS last_value, LAG(salary) OVER (ORDER BY salary range BETWEEN 1000 preceding AND 1000 following) AS lag, salary FROM empsalary ORDER BY last_value, lag;

SELECT LAST_VALUE(salary) OVER (ORDER BY salary range BETWEEN 1000 preceding AND 1000 following) AS last_value, LAG(salary) OVER (ORDER BY salary range BETWEEN 1000 preceding AND 1000 following) AS lag, salary FROM empsalary ORDER BY last_value, lag;

PRAGMA enable_verification;

CREATE TABLE testing AS SELECT x, ROUND(x * 0.333, 0) % 3 AS y, ROUND(x * 0.333, 0) % 3 AS z FROM GENERATE_SERIES(0, 10) AS tbl(x);

SELECT x, y, z, AVG(x) OVER (PARTITION BY y) AS plain_window, AVG(x) FILTER(WHERE x = 1) OVER (PARTITION BY y) AS x_filtered_window, AVG(x) FILTER(WHERE z = 0) OVER (PARTITION BY y) AS z_filtered_window FROM testing ORDER BY y, x;

SELECT x, y, z, COUNT(*) OVER (PARTITION BY y) AS plain_window, COUNT(*) FILTER(WHERE x = 1) OVER (PARTITION BY y) AS x_filtered_window, COUNT(*) FILTER(WHERE z = 0) OVER (PARTITION BY y) AS z_filtered_window FROM testing ORDER BY y, x;

SELECT x, y, z, MEDIAN(x) OVER (PARTITION BY y) AS plain_window, MEDIAN(x) FILTER(WHERE x = 1) OVER (PARTITION BY y) AS x_filtered_window, MEDIAN(x) FILTER(WHERE z = 0) OVER (PARTITION BY y) AS z_filtered_window FROM testing ORDER BY y, x;

SELECT x, COUNT(x) FILTER(WHERE x % 2 = 0) OVER (ORDER BY x ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING) FROM GENERATE_SERIES(0, 10) AS tbl(x);

SELECT x, COUNT(x) FILTER(WHERE x % 2 = 0) OVER (ORDER BY x ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING) FROM GENERATE_SERIES(0, 10) AS tbl(x);

SELECT x, COUNT(x) FILTER(WHERE x % 2 = 0) OVER (ORDER BY x ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING) FROM GENERATE_SERIES(0, 10) AS tbl(x);

SELECT x, COUNT(x) FILTER(WHERE x % 2 = 0) OVER (ORDER BY x ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING) FROM GENERATE_SERIES(0, 10) AS tbl(x);

PRAGMA enable_verification;

CREATE TABLE lineitem (l_extendedprice DECIMAL(15, 2), l_partkey INT, l_orderkey INT);

INSERT INTO lineitem (VALUES(29733.00, 1, 2883), (1802.00, 1, 5121), (4505.00, 1, 6179), (29733.00, 1, 6273), (30634.00, 1, 8645), (41446.00, 1, 12005), (36040.00, 1, 16135), (29733.00, 1, 16198), (26129.00, 1, 20199), (24327.00, 1, 22117), (19822.00, 1, 24866), (24327.00, 1, 26756), (9010.00, 1, 27558), (45050.00, 1, 29859), (2703.00, 1, 34692), (11713.00, 1, 36611), (18020.00, 1, 38051), (21624.00, 1, 42465), (36040.00, 1, 42758), (39644.00, 1, 47620), (28832.00, 1, 50498), (12614.00, 1, 51970), (2703.00, 1, 53189), (22525.00, 1, 53825), (21624.00, 1, 54592), (36941.00, 1, 59202), (18942.00, 2, 548), (17138.00, 2, 807), (24354.00, 2, 2117), (9020.00, 2, 2528), (28864.00, 2, 4102), (42394.00, 2, 4452), (11726.00, 2, 7458), (39688.00, 2, 27969), (37884.00, 2, 28900), (9922.00, 2, 30278), (12628.00, 2, 30597), (7216.00, 2, 33058), (41492.00, 2, 37026), (40590.00, 2, 37123), (36982.00, 2, 39809), (36080.00, 2, 41415), (18942.00, 2, 42147), (24354.00, 2, 42533), (41492.00, 2, 43650), (45100.00, 2, 44103), (17138.00, 2, 46913), (31570.00, 2, 50499), (37884.00, 2, 54086), (26158.00, 2, 54436), (4510.00, 2, 54436), (3608.00, 2, 54630), (41492.00, 2, 55136));

SELECT l_extendedprice, l_partkey, l_orderkey, SUM(l_extendedprice) OVER () FROM lineitem ORDER BY l_partkey, l_orderkey, l_extendedprice;

SELECT l_extendedprice, l_partkey, l_orderkey, SUM(l_extendedprice) OVER (ORDER BY l_partkey) FROM lineitem ORDER BY l_partkey, l_orderkey, l_extendedprice;

SELECT l_extendedprice, l_partkey, l_orderkey, SUM(l_extendedprice) OVER (ORDER BY l_partkey, l_orderkey) FROM lineitem ORDER BY l_partkey, l_orderkey, l_extendedprice DESC;

SELECT l_extendedprice, l_partkey, l_orderkey, SUM(l_extendedprice) OVER (ORDER BY l_partkey, l_orderkey DESC) FROM lineitem ORDER BY l_partkey, l_orderkey, l_extendedprice DESC;

SELECT l_extendedprice, l_partkey, l_orderkey, SUM(l_extendedprice) OVER (), SUM(l_extendedprice) OVER (ORDER BY l_partkey), SUM(l_extendedprice) OVER (ORDER BY l_partkey, l_orderkey), SUM(l_extendedprice) OVER (ORDER BY l_partkey, l_orderkey DESC) FROM lineitem ORDER BY l_partkey, l_orderkey, l_extendedprice DESC;

SELECT l_extendedprice, l_partkey, l_orderkey, SUM(l_extendedprice) OVER (PARTITION BY l_partkey) FROM lineitem ORDER BY l_partkey, l_orderkey, l_extendedprice DESC;

SELECT l_extendedprice, l_partkey, l_orderkey, SUM(l_extendedprice) OVER (PARTITION BY l_partkey ORDER BY l_orderkey) FROM lineitem ORDER BY l_partkey, l_orderkey, l_extendedprice DESC;

SELECT l_extendedprice, l_partkey, l_orderkey, SUM(l_extendedprice) OVER (PARTITION BY l_partkey ORDER BY l_orderkey DESC) FROM lineitem ORDER BY l_partkey, l_orderkey, l_extendedprice DESC;

SELECT l_extendedprice, l_partkey, l_orderkey, SUM(l_extendedprice) OVER (PARTITION BY l_partkey), SUM(l_extendedprice) OVER (PARTITION BY l_partkey ORDER BY l_orderkey), SUM(l_extendedprice) OVER (PARTITION BY l_partkey ORDER BY l_orderkey DESC) FROM lineitem ORDER BY l_partkey, l_orderkey, l_extendedprice DESC;

SELECT l_extendedprice, l_partkey, l_orderkey, SUM(l_extendedprice) OVER (), SUM(l_extendedprice) OVER (ORDER BY l_partkey), SUM(l_extendedprice) OVER (ORDER BY l_partkey, l_orderkey), SUM(l_extendedprice) OVER (PARTITION BY l_partkey ORDER BY l_orderkey DESC) FROM lineitem ORDER BY l_partkey, l_orderkey, l_extendedprice DESC;

PRAGMA enable_verification;

CREATE TABLE t3 (a TEXT, b TEXT, c INT);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

PRAGMA enable_verification;

CREATE TABLE a AS SELECT CASE WHEN range % 2 = 0 THEN INTERVAL '1' YEAR ELSE INTERVAL '2' YEARS END AS j, CAST(range AS INT) AS i FROM RANGE(1, 5, 1);

SELECT j, i, SUM(i) OVER () FROM a ORDER BY 1, 2;

SELECT j, i, SUM(i) OVER (PARTITION BY j) FROM a ORDER BY 1, 2;

SELECT j, i, SUM(i) OVER (PARTITION BY j ORDER BY i) FROM a ORDER BY 1, 2;

PRAGMA enable_verification;

SELECT *, ARRAY_AGG(col) OVER (PARTITION BY id ORDER BY col COLLATE nocase) AS lead_col_nocase FROM (SELECT UNNEST([1, 1, 1, 1]) AS id, UNNEST(['A', 'a', 'b', 'B']) AS col);

CREATE TABLE db_city (name TEXT, city TEXT COLLATE NOCASE);

INSERT INTO db_city VALUES ('DuckDB', 'Amsterdam'), ('MonetDB', 'amsterdam'), ('VectorWise', 'Amstërdam');

SELECT name, city, ROW_NUMBER() OVER (PARTITION BY city) AS row_id FROM db_city;

SELECT name, city, ROW_NUMBER() OVER (PARTITION BY city COLLATE NOCASE) AS row_id FROM db_city;

PRAGMA enable_verification;

CREATE TABLE t1 (a REAL, b INT);

INSERT INTO t1 VALUES (5, 10), (10, 20), (13, 26), (13, 26), (15, 30), (20, 40), (22, 80), (30, 90);

SELECT CAST(a AS INT), SUM(b) OVER win FROM t1 WINDOW win AS (ORDER BY a, b RANGE BETWEEN 5 PRECEDING AND 5 FOLLOWING);

SELECT CAST(a AS INT), SUM(b) OVER win FROM t1 WINDOW win AS (ORDER BY a RANGE BETWEEN 'a' PRECEDING AND 'a' FOLLOWING);

SELECT CAST(a AS INT), SUM(b) OVER win FROM t1 WINDOW win AS (ORDER BY a RANGE BETWEEN 'a' PRECEDING AND 'a' FOLLOWING);

SELECT CAST(a AS INT), SUM(b) OVER win FROM t1 WINDOW win AS (ORDER BY a RANGE BETWEEN 'a' PRECEDING AND 'a' FOLLOWING);

DROP VIEW c1;
endloop;

CREATE VIEW c1 AS SELECT INTERVAL (a) DAYS AS a, b FROM t1;

SELECT a, SUM(b) OVER win FROM c1 WINDOW win AS (ORDER BY a RANGE BETWEEN INTERVAL '5' DAYS PRECEDING AND INTERVAL '5' DAYS FOLLOWING);

DROP VIEW c1;

CREATE VIEW c1 AS SELECT CAST('2021-07-28' AS DATE) + INTERVAL (a) DAYS AS a, b FROM t1;

SELECT a, SUM(b) OVER win FROM c1 WINDOW win AS (ORDER BY a RANGE BETWEEN INTERVAL '5' DAYS PRECEDING AND INTERVAL '5' DAYS FOLLOWING);

DROP VIEW c1;

CREATE VIEW c1 AS SELECT CAST('2021-07-28' AS TIMESTAMP) + INTERVAL (a) HOURS AS a, b FROM t1;

SELECT a, SUM(b) OVER win FROM c1 WINDOW win AS (ORDER BY a RANGE BETWEEN INTERVAL '5' HOURS PRECEDING AND INTERVAL '5' HOURS FOLLOWING);

DROP VIEW c1;

CREATE TABLE t_time (t TIME);

INSERT INTO t_time VALUES ('12:30:00'), ('22:30:00'), ('13:30:00'), ('01:30:00'), ('15:30:00'), ('20:30:00'), ('04:30:00'), ('06:30:00'), ('18:30:00'), ('21:30:00'), ('00:30:00'), ('00:31:00');

SELECT t, FIRST_VALUE(t) OVER w AS fv FROM t_time WINDOW w AS (ORDER BY t RANGE BETWEEN INTERVAL '2' HOUR PRECEDING AND CURRENT ROW);

SELECT t, FIRST_VALUE(t) OVER w AS fv FROM t_time WINDOW w AS (ORDER BY t RANGE BETWEEN INTERVAL '2' HOUR PRECEDING AND CURRENT ROW);

SELECT a, SUM(b) OVER win FROM c1 WINDOW win AS (ORDER BY a RANGE BETWEEN 5 PRECEDING AND 5 FOLLOWING);

DROP VIEW c1;
endloop;

CREATE TABLE t3 (a TEXT, b TEXT, c INT);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

SELECT CAST(a AS INT), SUM(b) OVER win FROM t1 WINDOW win AS (ORDER BY a RANGE BETWEEN 5 PRECEDING AND 5 FOLLOWING);

SELECT CAST(a AS INT), SUM(b) OVER win FROM t1 WINDOW win AS (ORDER BY a RANGE BETWEEN 10 PRECEDING AND 5 PRECEDING);

SELECT CAST(a AS INT), SUM(b) OVER win FROM t1 WINDOW win AS (ORDER BY a RANGE BETWEEN 2 FOLLOWING AND 3 FOLLOWING);

SELECT CAST(a AS INT), SUM(b) OVER win FROM t1 WINDOW win AS (ORDER BY a DESC RANGE BETWEEN 5 PRECEDING AND 5 FOLLOWING);

SELECT CAST(a AS INT), SUM(b) OVER win FROM t1 WINDOW win AS (ORDER BY a DESC RANGE BETWEEN 10 PRECEDING AND 5 PRECEDING);

SELECT CAST(a AS INT), SUM(b) OVER win FROM t1 WINDOW win AS (ORDER BY a DESC RANGE BETWEEN 2 FOLLOWING AND 3 FOLLOWING);

SELECT CAST(a AS INT), SUM(b) OVER win FROM t1 WINDOW win AS (ORDER BY a RANGE BETWEEN 5.1 PRECEDING AND 5.3 FOLLOWING);

SELECT CAST(a AS INT), SUM(b) OVER win FROM t1 WINDOW win AS (ORDER BY a RANGE BETWEEN 10.2 PRECEDING AND 5.4 PRECEDING);

SELECT CAST(a AS INT), SUM(b) OVER win FROM t1 WINDOW win AS (ORDER BY a RANGE BETWEEN 2.6 FOLLOWING AND 3.5 FOLLOWING);

SELECT CAST(a AS INT), SUM(b) OVER win FROM t1 WINDOW win AS (ORDER BY a DESC RANGE BETWEEN 5.7 PRECEDING AND 5.8 FOLLOWING);

SELECT CAST(a AS INT), SUM(b) OVER win FROM t1 WINDOW win AS (ORDER BY a DESC RANGE BETWEEN UNBOUNDED PRECEDING AND 5.9 PRECEDING);

SELECT CAST(a AS INT), SUM(b) OVER win FROM t1 WINDOW win AS (ORDER BY a DESC RANGE BETWEEN 2.1 FOLLOWING AND UNBOUNDED FOLLOWING);

SELECT CAST(a AS INT), SUM(b) OVER win FROM t1 WINDOW win AS (ORDER BY a RANGE BETWEEN 5.1 PRECEDING AND CURRENT ROW);

DROP TABLE IF EXISTS t1;

CREATE TABLE t1 (a INT, b INT);

INSERT INTO t1 VALUES (NULL, 1), (NULL, 2), (NULL, 3), (10, 4), (10, 5);

SELECT SUM(b) OVER (ORDER BY a RANGE BETWEEN 5 PRECEDING AND 10 FOLLOWING) FROM t1 ORDER BY 1;

SELECT SUM(b) OVER (ORDER BY a DESC RANGE BETWEEN 5 PRECEDING AND 10 FOLLOWING) FROM t1 ORDER BY 1;

SELECT SUM(b) OVER (ORDER BY a RANGE BETWEEN 5 FOLLOWING AND 10 FOLLOWING) FROM t1 ORDER BY 1 NULLS FIRST;

SELECT SUM(b) OVER (ORDER BY a RANGE BETWEEN 5 FOLLOWING AND 10 FOLLOWING) FROM t1 ORDER BY 1;

SELECT SUM(b) OVER (ORDER BY a DESC RANGE BETWEEN 5 FOLLOWING AND 10 FOLLOWING) FROM t1 ORDER BY 1 NULLS FIRST;

SELECT SUM(b) OVER (ORDER BY a DESC RANGE BETWEEN 5 FOLLOWING AND 10 FOLLOWING) FROM t1 ORDER BY 1;

SELECT SUM(b) OVER (ORDER BY a NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND 10 FOLLOWING) FROM t1 ORDER BY 1 NULLS FIRST;

SELECT SUM(b) OVER (ORDER BY a RANGE BETWEEN UNBOUNDED PRECEDING AND 10 FOLLOWING) FROM t1 ORDER BY 1;

SELECT SUM(b) OVER (ORDER BY a ASC RANGE BETWEEN UNBOUNDED PRECEDING AND 10 FOLLOWING) FROM t1 ORDER BY 1;

SELECT SUM(b) OVER (ORDER BY a DESC NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND 10 FOLLOWING) FROM t1 ORDER BY 1;

SELECT SUM(b) OVER (ORDER BY a NULLS FIRST RANGE BETWEEN CURRENT ROW AND 10 FOLLOWING) FROM t1 ORDER BY 1 NULLS FIRST;

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

DROP TABLE IF EXISTS t2;

CREATE TABLE t2 (a TEXT, b INT);

INSERT INTO t2 VALUES ('A', NULL);

INSERT INTO t2 VALUES ('B', NULL);

INSERT INTO t2 VALUES ('C', 1);

SELECT GROUP_CONCAT(a, '.') OVER (ORDER BY b NULLS FIRST RANGE BETWEEN 7 PRECEDING AND 2 PRECEDING) FROM t2;

SELECT GROUP_CONCAT(a, '.') OVER (ORDER BY b DESC RANGE BETWEEN 7 PRECEDING AND 2 PRECEDING) FROM t2;

DROP TABLE IF EXISTS t2;

CREATE TABLE t2 (a INT, b INT);

INSERT INTO t2 VALUES (1, 65);

INSERT INTO t2 VALUES (2, NULL);

INSERT INTO t2 VALUES (3, NULL);

INSERT INTO t2 VALUES (4, NULL);

INSERT INTO t2 VALUES (5, 66);

INSERT INTO t2 VALUES (6, 67);

SELECT SUM(a) OVER win FROM t2 WINDOW win AS (ORDER BY b RANGE BETWEEN 6 FOLLOWING AND UNBOUNDED FOLLOWING);

SELECT SUM(a) OVER win FROM t2 WINDOW win AS (ORDER BY b RANGE BETWEEN 1 PRECEDING AND 2 PRECEDING);

SELECT SUM(a) OVER win FROM t2 WINDOW win AS (ORDER BY b RANGE BETWEEN 2 FOLLOWING AND 1 FOLLOWING);

SELECT SUM(a) OVER win FROM t2 WINDOW win AS (ORDER BY b NULLS FIRST RANGE BETWEEN 1 PRECEDING AND 2 PRECEDING);

SELECT SUM(a) OVER win FROM t2 WINDOW win AS (ORDER BY b NULLS FIRST RANGE BETWEEN 2 FOLLOWING AND 1 FOLLOWING);

SELECT SUM(a) OVER win FROM t2 WINDOW win AS (ORDER BY b RANGE BETWEEN 1000 PRECEDING AND 2 PRECEDING);

SELECT SUM(a) OVER win FROM t2 WINDOW win AS (ORDER BY b RANGE BETWEEN 2000 FOLLOWING AND 1000 FOLLOWING);

SELECT SUM(a) OVER win FROM t2 WINDOW win AS (ORDER BY b NULLS FIRST RANGE BETWEEN 1000 PRECEDING AND 2000 PRECEDING);

SELECT SUM(a) OVER win FROM t2 WINDOW win AS (ORDER BY b NULLS FIRST RANGE BETWEEN 2000 FOLLOWING AND 1000 FOLLOWING);

SELECT MIN(a) OVER win FROM t2 WINDOW win AS (ORDER BY b RANGE BETWEEN 6 FOLLOWING AND UNBOUNDED FOLLOWING);

SELECT MIN(a) OVER win FROM t2 WINDOW win AS (ORDER BY b RANGE BETWEEN 1 PRECEDING AND 2 PRECEDING);

SELECT MIN(a) OVER win FROM t2 WINDOW win AS (ORDER BY b RANGE BETWEEN 2 FOLLOWING AND 1 FOLLOWING);

SELECT MIN(a) OVER win FROM t2 WINDOW win AS (ORDER BY b NULLS FIRST RANGE BETWEEN 1 PRECEDING AND 2 PRECEDING);

SELECT MIN(a) OVER win FROM t2 WINDOW win AS (ORDER BY b NULLS FIRST RANGE BETWEEN 2 FOLLOWING AND 1 FOLLOWING);

SELECT MIN(a) OVER win FROM t2 WINDOW win AS (ORDER BY b RANGE BETWEEN 1000 PRECEDING AND 2 PRECEDING);

SELECT MIN(a) OVER win FROM t2 WINDOW win AS (ORDER BY b RANGE BETWEEN 2000 FOLLOWING AND 1000 FOLLOWING);

SELECT MIN(a) OVER win FROM t2 WINDOW win AS (ORDER BY b NULLS FIRST RANGE BETWEEN 1000 PRECEDING AND 2000 PRECEDING);

SELECT MIN(a) OVER win FROM t2 WINDOW win AS (ORDER BY b NULLS FIRST RANGE BETWEEN 2000 FOLLOWING AND 1000 FOLLOWING);

SELECT SUM(a) OVER win FROM t2 WINDOW win AS (ORDER BY b RANGE BETWEEN 6 FOLLOWING AND UNBOUNDED FOLLOWING);

SELECT SUM(a) OVER win FROM t2 WINDOW win AS (ORDER BY b RANGE BETWEEN 1 PRECEDING AND 2 PRECEDING);

SELECT SUM(a) OVER win FROM t2 WINDOW win AS (ORDER BY b RANGE BETWEEN 2 FOLLOWING AND 1 FOLLOWING);

SELECT SUM(a) OVER win FROM t2 WINDOW win AS (ORDER BY b NULLS FIRST RANGE BETWEEN 1 PRECEDING AND 2 PRECEDING);

SELECT SUM(a) OVER win FROM t2 WINDOW win AS (ORDER BY b NULLS FIRST RANGE BETWEEN 2 FOLLOWING AND 1 FOLLOWING);

SELECT SUM(a) OVER win FROM t2 WINDOW win AS (ORDER BY b RANGE BETWEEN 1000 PRECEDING AND 2 PRECEDING);

SELECT SUM(a) OVER win FROM t2 WINDOW win AS (ORDER BY b RANGE BETWEEN 2000 FOLLOWING AND 1000 FOLLOWING);

SELECT SUM(a) OVER win FROM t2 WINDOW win AS (ORDER BY b NULLS FIRST RANGE BETWEEN 1000 PRECEDING AND 2000 PRECEDING);

SELECT SUM(a) OVER win FROM t2 WINDOW win AS (ORDER BY b NULLS FIRST RANGE BETWEEN 2000 FOLLOWING AND 1000 FOLLOWING);

SELECT MAX(a) OVER win FROM t2 WINDOW win AS (ORDER BY b RANGE BETWEEN 6 FOLLOWING AND UNBOUNDED FOLLOWING);

SELECT MAX(a) OVER win FROM t2 WINDOW win AS (ORDER BY b RANGE BETWEEN 1 PRECEDING AND 2 PRECEDING);

SELECT MAX(a) OVER win FROM t2 WINDOW win AS (ORDER BY b RANGE BETWEEN 2 FOLLOWING AND 1 FOLLOWING);

SELECT MAX(a) OVER win FROM t2 WINDOW win AS (ORDER BY b NULLS FIRST RANGE BETWEEN 1 PRECEDING AND 2 PRECEDING);

SELECT MAX(a) OVER win FROM t2 WINDOW win AS (ORDER BY b NULLS FIRST RANGE BETWEEN 2 FOLLOWING AND 1 FOLLOWING);

SELECT MAX(a) OVER win FROM t2 WINDOW win AS (ORDER BY b RANGE BETWEEN 1000 PRECEDING AND 2 PRECEDING);

SELECT MAX(a) OVER win FROM t2 WINDOW win AS (ORDER BY b RANGE BETWEEN 2000 FOLLOWING AND 1000 FOLLOWING);

SELECT MAX(a) OVER win FROM t2 WINDOW win AS (ORDER BY b NULLS FIRST RANGE BETWEEN 1000 PRECEDING AND 2000 PRECEDING);

SELECT MAX(a) OVER win FROM t2 WINDOW win AS (ORDER BY b NULLS FIRST RANGE BETWEEN 2000 FOLLOWING AND 1000 FOLLOWING);

SELECT x, SUM(x) OVER (ORDER BY x RANGE BETWEEN 5 PRECEDING AND 0 PRECEDING) AS y FROM GENERATE_SERIES(1, 10) AS tbl(x);

DROP TABLE IF EXISTS tx;

CREATE TABLE tx (a INT PRIMARY KEY);

INSERT INTO tx VALUES (1), (2), (3), (4), (5), (6);

DROP TABLE IF EXISTS map;

CREATE TABLE map (v INT PRIMARY KEY, t TEXT);

INSERT INTO map VALUES (1, 'odd'), (2, 'even'), (3, 'odd'), (4, 'even'), (5, 'odd'), (6, 'even');

SELECT SUM(a) OVER (PARTITION BY (SELECT t FROM map WHERE v = a) ORDER BY a) FROM tx ORDER BY ALL;

SELECT SUM(a) OVER win FROM tx WINDOW win AS (PARTITION BY (SELECT t FROM map WHERE v = a) ORDER BY a) ORDER BY ALL;

WITH map2 AS (SELECT * FROM map) SELECT SUM(a) OVER (PARTITION BY (SELECT t FROM map2 WHERE v = a) ORDER BY a) FROM tx ORDER BY ALL;

WITH map2 AS (SELECT * FROM map) SELECT SUM(a) OVER win FROM tx WINDOW win AS (PARTITION BY (SELECT t FROM map2 WHERE v = a) ORDER BY a) ORDER BY ALL;

DROP TABLE IF EXISTS t1;

DROP TABLE IF EXISTS t2;

CREATE TABLE t1 (a INT);

CREATE TABLE t2 (y INT);

SELECT (SELECT MAX(a) OVER (ORDER BY (SELECT SUM(a) FROM t1)) + MIN(a) OVER ()) FROM t1;

SELECT b, SUM(b) OVER (ORDER BY a RANGE BETWEEN UNBOUNDED PRECEDING AND 10 FOLLOWING) FROM (SELECT CASE WHEN b < 70 THEN NULL ELSE 10 END AS a, b FROM RANGE(1, 129) AS tbl(b)) AS t1 ORDER BY 1;

PRAGMA enable_verification;

PRAGMA threads = 10;

CREATE TABLE df AS SELECT d, i AS v1 FROM RANGE(CAST('2017-01-01' AS DATE), CAST('2020-12-31' AS DATE), INTERVAL '1' DAY) AS t(d), RANGE(0, 3000) AS i;

SELECT COUNT(*) FROM (SELECT PERCENT_RANK() OVER (PARTITION BY d ORDER BY v1) AS rank_v1 FROM df);

PRAGMA enable_verification;

CREATE TABLE t3 (a TEXT, b TEXT, c INT);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

INSERT INTO t3 VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);

DROP TABLE IF EXISTS t1;

CREATE TABLE t1 (a INT, b INT);

INSERT INTO t1 VALUES (NULL, 1), (NULL, 2), (NULL, 3), (10, 4), (10, 5);

SELECT SUM(b) OVER (ORDER BY a NULLS FIRST ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) FROM t1 ORDER BY 1 NULLS FIRST;

SELECT SUM(b) OVER (ORDER BY a ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) FROM t1 ORDER BY 1;

SELECT SUM(b) OVER (ORDER BY a DESC ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) FROM t1 ORDER BY 1 NULLS FIRST;

SELECT SUM(b) OVER (ORDER BY a DESC ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) FROM t1 ORDER BY 1;

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

INSERT INTO t3 VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);

PRAGMA threads = 4;

CALL dbgen(sf=1);

PRAGMA verify_parallelism;

CREATE TABLE lineitem_d AS (SELECT DISTINCT ON (l_extendedprice) * FROM lineitem);

CREATE TABLE lineitem_d AS (SELECT DISTINCT ON (l_extendedprice) * FROM lineitem);

WITH lineitem_ord AS (SELECT * FROM lineitem_d ORDER BY l_extendedprice), lag_window AS (SELECT *, CASE WHEN l_extendedprice < LAG(l_extendedprice) OVER () THEN 1 ELSE 0 END AS incorrect_order FROM lineitem_ord) SELECT * FROM lag_window ORDER BY l_extendedprice;

WITH lag_window AS (SELECT *, CASE WHEN l_extendedprice < LAG(l_extendedprice) OVER (ORDER BY l_extendedprice) THEN 1 ELSE 0 END AS incorrect_order FROM lineitem_d) SELECT * FROM lag_window ORDER BY l_extendedprice;

WITH lineitem_ord AS (SELECT * FROM lineitem_d ORDER BY l_extendedprice), rownum_window AS (SELECT l_extendedprice, {'sd': l_shipdate, 'cd': l_commitdate, 'rd': l_receiptdate}, ROW_NUMBER() OVER () FROM lineitem_ord) SELECT * FROM rownum_window ORDER BY l_extendedprice;

WITH rownum_window AS (SELECT l_extendedprice, {'sd': l_shipdate, 'cd': l_commitdate, 'rd': l_receiptdate}, ROW_NUMBER() OVER (ORDER BY l_extendedprice) FROM lineitem_d) SELECT * FROM rownum_window ORDER BY l_extendedprice;

WITH lineitem_ord AS (SELECT * FROM lineitem_d ORDER BY l_extendedprice), rownum_window AS (SELECT l_extendedprice, {'si': l_shipinstruct, 'sm': l_shipmode, 'c': l_comment}, ROW_NUMBER() OVER () FROM lineitem_ord) SELECT * FROM rownum_window ORDER BY l_extendedprice;

WITH rownum_window AS (SELECT l_extendedprice, {'si': l_shipinstruct, 'sm': l_shipmode, 'c': l_comment}, ROW_NUMBER() OVER (ORDER BY l_extendedprice) FROM lineitem_d) SELECT * FROM rownum_window ORDER BY l_extendedprice;

WITH lineitem_ord AS (SELECT * FROM lineitem_d ORDER BY l_extendedprice), rownum_window AS (SELECT l_extendedprice, [l_shipdate], [l_commitdate], [l_receiptdate], ROW_NUMBER() OVER () FROM lineitem_ord) SELECT * FROM rownum_window ORDER BY l_extendedprice;

SELECT l_extendedprice, [l_shipdate], [l_commitdate], [l_receiptdate], ROW_NUMBER() OVER (ORDER BY l_extendedprice) FROM lineitem_d;

WITH lineitem_ord AS (SELECT * FROM lineitem_d ORDER BY l_extendedprice), rownum_window AS (SELECT l_extendedprice, [l_shipinstruct], [l_shipmode], [l_comment], ROW_NUMBER() OVER () FROM lineitem_ord) SELECT * FROM rownum_window ORDER BY l_extendedprice;

WITH rownum_window AS (SELECT l_extendedprice, [l_shipinstruct], [l_shipmode], [l_comment], ROW_NUMBER() OVER (ORDER BY l_extendedprice) FROM lineitem_d) SELECT * FROM rownum_window ORDER BY l_extendedprice;

PRAGMA enable_verification;

CREATE TABLE a AS SELECT range % 3 AS j, CAST(range AS TEXT) AS s, CASE WHEN range % 3 = 0 THEN '-' ELSE '|' END AS sep FROM RANGE(1, 7, 1);

SELECT j, s, GROUP_CONCAT(s) OVER (PARTITION BY j ORDER BY s) FROM a ORDER BY j, s;

SELECT j, s, GROUP_CONCAT(s, '|') OVER (PARTITION BY j ORDER BY s) FROM a ORDER BY j, s;

SELECT j, s, GROUP_CONCAT(s, sep) OVER (PARTITION BY j ORDER BY s) FROM a ORDER BY j, s;

PRAGMA enable_verification;

BEGIN;

CREATE TABLE item (i_category TEXT, i_brand TEXT, i_price INT);

INSERT INTO item VALUES ('toys', 'fisher-price', 100);

SELECT i_category, i_brand, AVG(SUM(i_price)) OVER (PARTITION BY i_category), RANK() OVER (PARTITION BY i_category ORDER BY i_category, i_brand) AS rn FROM item GROUP BY i_category, i_brand;

ROLLBACK;

BEGIN;

CREATE TABLE item (i_category TEXT, i_brand TEXT, i_item_sk INT);

CREATE TABLE store (s_store_name TEXT, s_company_name TEXT, s_store_sk INT);

CREATE TABLE date_dim (d_year INT, d_moy INT, d_date_sk INT);

CREATE TABLE store_sales (ss_sales_price DECIMAL(18, 3), ss_item_sk INT, ss_sold_date_sk INT, ss_store_sk INT);

INSERT INTO item VALUES ('Music', 'exportischolar', 1);

INSERT INTO store VALUES ('ought', 'Unknown', 1);

INSERT INTO date_dim VALUES (1999, 1, 1);

INSERT INTO store_sales VALUES (2.8, 1, 1, 1);

SELECT i_category, i_brand, s_store_name, s_company_name, d_year, d_moy, SUM(ss_sales_price) AS sum_sales, AVG(SUM(ss_sales_price)) OVER (PARTITION BY i_category, i_brand, s_store_name, s_company_name, d_year) AS avg_monthly_sales, RANK() OVER (PARTITION BY i_category, i_brand, s_store_name, s_company_name ORDER BY d_year, d_moy) AS rn FROM item, store_sales, date_dim, store WHERE ss_item_sk = i_item_sk AND ss_sold_date_sk = d_date_sk AND ss_store_sk = s_store_sk AND (d_year = 1999 OR (d_year = 1999 - 1 AND d_moy = 12) OR (d_year = 1999 + 1 AND d_moy = 1)) GROUP BY i_category, i_brand, s_store_name, s_company_name, d_year, d_moy;

CREATE TABLE tbl AS SELECT 42 AS i;

SELECT SUM(i) OVER (ROWS BETWEEN UNNEST([1]) PRECEDING AND 1 FOLLOWING) FROM tbl;

SELECT SUM(i) OVER (ROWS BETWEEN 1 PRECEDING AND UNNEST([1]) FOLLOWING) FROM tbl;

SELECT LEAD(c0, UNNEST([1])) OVER (ROWS BETWEEN 2 PRECEDING AND 4 PRECEDING) FROM (VALUES (1, 2)) AS a(c0);

SELECT x, COUNT(x) FILTER(WHERE x % 2 = UNNEST([2])) OVER (ORDER BY x ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING) FROM GENERATE_SERIES(0, 10) AS tbl(x);

SELECT LEAD(c0, 0, UNNEST([1])) OVER (ROWS BETWEEN 2 PRECEDING AND 4 PRECEDING) FROM (VALUES (1, 2)) AS a(c0);

SELECT SUM(i) OVER (ROWS BETWEEN (SELECT UNNEST([1])) PRECEDING AND 1 FOLLOWING) FROM tbl;

SELECT LEAD(c0, (SELECT UNNEST([0])), (SELECT UNNEST([1]))) OVER (ROWS BETWEEN 2 PRECEDING AND 4 PRECEDING) FROM (VALUES (1, 2)) AS a(c0);

CREATE TABLE "data" ("Store" INT, "Dept" INT, "Date" DATE, "Weekly_Sales" DOUBLE, "IsHoliday" BOOLEAN);

INSERT INTO data SELECT * FROM READ_CSV_AUTO('test/sql/window/walmart.csv.gz');

PRAGMA threads = 4;

SELECT *, LAG(Weekly_Sales, 1) OVER (PARTITION BY "Store", "Dept" ORDER BY "Date" ASC) AS Lag_1, LAG(Weekly_Sales, 2) OVER (PARTITION BY "Store", "Dept" ORDER BY "Date" ASC) AS Lag_2, LAG(Weekly_Sales, 3) OVER (PARTITION BY "Store", "Dept" ORDER BY "Date" ASC) AS Lag_3, LAG(Weekly_Sales, 4) OVER (PARTITION BY "Store", "Dept" ORDER BY "Date" ASC) AS Lag_4, LAG(Weekly_Sales, 5) OVER (PARTITION BY "Store", "Dept" ORDER BY "Date" ASC) AS Lag_5, LAG(Weekly_Sales, 6) OVER (PARTITION BY "Store", "Dept" ORDER BY "Date" ASC) AS Lag_6, LAG(Weekly_Sales, 7) OVER (PARTITION BY "Store", "Dept" ORDER BY "Date" ASC) AS Lag_7, LAG(Weekly_Sales, 8) OVER (PARTITION BY "Store", "Dept" ORDER BY "Date" ASC) AS Lag_8, LAG(Weekly_Sales, 9) OVER (PARTITION BY "Store", "Dept" ORDER BY "Date" ASC) AS Lag_9, LAG(Weekly_Sales, 10) OVER (PARTITION BY "Store", "Dept" ORDER BY "Date" ASC) AS Lag_10 FROM data;

SELECT *, LAG(Weekly_Sales, 1) OVER (PARTITION BY "Store", "Dept" ORDER BY "Date" ASC) AS Lag_1, LAG(Weekly_Sales, 2) OVER (PARTITION BY "Store", "Dept" ORDER BY "Date" ASC) AS Lag_2, LAG(Weekly_Sales, 3) OVER (PARTITION BY "Store", "Dept" ORDER BY "Date" ASC) AS Lag_3, LAG(Weekly_Sales, 4) OVER (PARTITION BY "Store", "Dept" ORDER BY "Date" ASC) AS Lag_4, LAG(Weekly_Sales, 5) OVER (PARTITION BY "Store", "Dept" ORDER BY "Date" ASC) AS Lag_5, LAG(Weekly_Sales, 6) OVER (PARTITION BY "Store", "Dept" ORDER BY "Date" ASC) AS Lag_6, LAG(Weekly_Sales, 7) OVER (PARTITION BY "Store", "Dept" ORDER BY "Date" ASC) AS Lag_7, LAG(Weekly_Sales, 8) OVER (PARTITION BY "Store", "Dept" ORDER BY "Date" ASC) AS Lag_8, LAG(Weekly_Sales, 9) OVER (PARTITION BY "Store", "Dept" ORDER BY "Date" ASC) AS Lag_9, LAG(Weekly_Sales, 10) OVER (PARTITION BY "Store", "Dept" ORDER BY "Date" ASC) AS Lag_10 FROM data;

PRAGMA enable_verification;

SELECT SETSEED(0.618033);

CREATE TABLE flog AS SELECT CAST((RANDOM() * 100) AS INT) AS laufzeit, CAST('2020-10-15 16:45:00' AS TIMESTAMP) + INTERVAL (RANDOM() * 15 * 60) SECOND AS "timestamp" FROM RANGE(0, 26000);

SELECT timestamp, MEDIAN(laufzeit) OVER w, COUNT(*) OVER w FROM flog WINDOW w AS (ORDER BY timestamp ASC range BETWEEN INTERVAL '55' SECONDS preceding AND INTERVAL '58' SECONDS following) ORDER BY 3 DESC LIMIT 1;

SET default_null_order = 'nulls_first';

PRAGMA enable_verification;

CREATE TABLE tenk1 (unique1 INT, unique2 INT, two INT, four INT, ten INT, twenty INT, hundred INT, thousand INT, twothousand INT, fivethous INT, tenthous INT, odd INT, even INT, stringu1 TEXT, stringu2 TEXT, string4 TEXT);

INSERT INTO tenk1 VALUES (8800, 0, 0, 0, 0, 0, 0, 800, 800, 3800, 8800, 0, 1, 'MAAAAA', 'AAAAAA', 'AAAAxx'), (1891, 1, 1, 3, 1, 11, 91, 891, 1891, 1891, 1891, 182, 183, 'TUAAAA', 'BAAAAA', 'HHHHxx'), (3420, 2, 0, 0, 0, 0, 20, 420, 1420, 3420, 3420, 40, 41, 'OBAAAA', 'CAAAAA', 'OOOOxx'), (9850, 3, 0, 2, 0, 10, 50, 850, 1850, 4850, 9850, 100, 101, 'WOAAAA', 'DAAAAA', 'VVVVxx'), (7164, 4, 0, 0, 4, 4, 64, 164, 1164, 2164, 7164, 128, 129, 'OPAAAA', 'EAAAAA', 'AAAAxx'), (8009, 5, 1, 1, 9, 9, 9, 9, 9, 3009, 8009, 18, 19, 'BWAAAA', 'FAAAAA', 'HHHHxx'), (5057, 6, 1, 1, 7, 17, 57, 57, 1057, 57, 5057, 114, 115, 'NMAAAA', 'GAAAAA', 'OOOOxx'), (6701, 7, 1, 1, 1, 1, 1, 701, 701, 1701, 6701, 2, 3, 'TXAAAA', 'HAAAAA', 'VVVVxx'), (4321, 8, 1, 1, 1, 1, 21, 321, 321, 4321, 4321, 42, 43, 'FKAAAA', 'IAAAAA', 'AAAAxx'), (3043, 9, 1, 3, 3, 3, 43, 43, 1043, 3043, 3043, 86, 87, 'BNAAAA', 'JAAAAA', 'HHHHxx');

SELECT COUNT(*) OVER () FROM tenk1;

SELECT SUM(four) OVER (PARTITION BY ten ORDER BY unique2) AS sum_1, ten, four FROM tenk1 WHERE unique2 < 10 ORDER BY ten, unique2;

SELECT ROW_NUMBER() OVER (ORDER BY unique2) AS rn FROM tenk1 WHERE unique2 < 10 ORDER BY rn;

SELECT RANK() OVER (PARTITION BY four ORDER BY ten) AS rank_1, ten, four FROM tenk1 WHERE unique2 < 10 ORDER BY four, ten;

SELECT DENSE_RANK() OVER (PARTITION BY four ORDER BY ten) FROM tenk1 WHERE unique2 < 10 ORDER BY four, ten;

SELECT FIRST_VALUE(ten) OVER (PARTITION BY four ORDER BY ten) FROM tenk1 WHERE unique2 < 10 ORDER BY four, ten;

SELECT CAST(PERCENT_RANK() OVER (PARTITION BY four ORDER BY ten) * 10 AS INT) FROM tenk1 ORDER BY four, ten;

SELECT CAST(CUME_DIST() OVER (PARTITION BY four ORDER BY ten) * 10 AS INT) FROM tenk1 WHERE unique2 < 10 ORDER BY four, ten;

SELECT NTILE(2) OVER (ORDER BY ten, four) AS nn FROM tenk1 ORDER BY ten, four, nn;

SELECT NTILE(3) OVER (ORDER BY ten, four) AS nn FROM tenk1 ORDER BY ten, four, nn;

SELECT NTILE(4) OVER (ORDER BY ten, four) AS nn FROM tenk1 ORDER BY ten, four, nn;

SELECT NTILE(5) OVER (ORDER BY ten, four) AS nn FROM tenk1 ORDER BY ten, four, nn;

SELECT LAG(ten) OVER (PARTITION BY four ORDER BY ten) AS lt FROM tenk1 ORDER BY four, ten, lt;

SELECT LEAD(ten) OVER (PARTITION BY four ORDER BY ten) AS lt FROM tenk1 ORDER BY four, ten, lt;

SELECT LAG(ten, four) OVER (PARTITION BY four ORDER BY ten) AS lt FROM tenk1 ORDER BY four, ten, lt;

SELECT LAG(ten, four, 0) OVER (PARTITION BY four ORDER BY ten) AS lt FROM tenk1 ORDER BY four, ten, lt;

SELECT LAG(ten, four, 0) OVER (PARTITION BY four ORDER BY ten) AS lt FROM tenk1 ORDER BY four, ten, lt;

SELECT LEAD(ten) OVER (PARTITION BY four ORDER BY ten) AS lt FROM tenk1 ORDER BY four, ten, lt;

SELECT LEAD(ten * 2, 1) OVER (PARTITION BY four ORDER BY ten) AS lt FROM tenk1 ORDER BY four, ten, lt;

SELECT LEAD(ten * 2, 1, -1) OVER (PARTITION BY four ORDER BY ten) AS lt FROM tenk1 ORDER BY four, ten, lt;

SELECT COUNT(*) OVER w AS c, SUM(four) OVER w AS s, CAST(AVG(ten) OVER w * 10 AS INT) AS a, RANK() OVER w AS r, DENSE_RANK() OVER w AS dr, ROW_NUMBER() OVER w AS rn FROM tenk1 WINDOW w AS () ORDER BY rn;

SELECT COUNT(*) OVER w AS c, SUM(four) OVER w AS s, CAST(AVG(ten) OVER w * 10 AS INT) AS a, RANK() OVER w AS r, DENSE_RANK() OVER w AS dr, ROW_NUMBER() OVER w AS rn FROM tenk1 WINDOW w AS (rows BETWEEN 1 preceding AND 1 following) ORDER BY rn;

PRAGMA enable_verification;

CREATE TABLE mtcars (mpg DECIMAL(18, 3), cyl INT, disp DECIMAL(18, 3), hp INT, drat DECIMAL(18, 3), wt DECIMAL(18, 3), qsec DECIMAL(18, 3), vs INT, am INT, gear INT, carb INT);

INSERT INTO mtcars VALUES ('21.0', '6', '160.0', '110', '3.90', '2.620', '16.46', '0', '1', '4', '4');

INSERT INTO mtcars VALUES ('21.0', '6', '160.0', '110', '3.90', '2.875', '17.02', '0', '1', '4', '4');

INSERT INTO mtcars VALUES ('22.8', '4', '108.0', '93', '3.85', '2.320', '18.61', '1', '1', '4', '1');

INSERT INTO mtcars VALUES ('21.4', '6', '258.0', '110', '3.08', '3.215', '19.44', '1', '0', '3', '1');

INSERT INTO mtcars VALUES ('18.7', '8', '360.0', '175', '3.15', '3.440', '17.02', '0', '0', '3', '2');

INSERT INTO mtcars VALUES ('18.1', '6', '225.0', '105', '2.76', '3.460', '20.22', '1', '0', '3', '1');

INSERT INTO mtcars VALUES ('14.3', '8', '360.0', '245', '3.21', '3.570', '15.84', '0', '0', '3', '4');

INSERT INTO mtcars VALUES ('24.4', '4', '146.7', '62', '3.69', '3.190', '20.00', '1', '0', '4', '2');

INSERT INTO mtcars VALUES ('22.8', '4', '140.8', '95', '3.92', '3.150', '22.90', '1', '0', '4', '2');

INSERT INTO mtcars VALUES ('19.2', '6', '167.6', '123', '3.92', '3.440', '18.30', '1', '0', '4', '4');

INSERT INTO mtcars VALUES ('17.8', '6', '167.6', '123', '3.92', '3.440', '18.90', '1', '0', '4', '4');

INSERT INTO mtcars VALUES ('16.4', '8', '275.8', '180', '3.07', '4.070', '17.40', '0', '0', '3', '3');

INSERT INTO mtcars VALUES ('17.3', '8', '275.8', '180', '3.07', '3.730', '17.60', '0', '0', '3', '3');

INSERT INTO mtcars VALUES ('15.2', '8', '275.8', '180', '3.07', '3.780', '18.00', '0', '0', '3', '3');

INSERT INTO mtcars VALUES ('10.4', '8', '472.0', '205', '2.93', '5.250', '17.98', '0', '0', '3', '4');

INSERT INTO mtcars VALUES ('10.4', '8', '460.0', '215', '3.00', '5.424', '17.82', '0', '0', '3', '4');

INSERT INTO mtcars VALUES ('14.7', '8', '440.0', '230', '3.23', '5.345', '17.42', '0', '0', '3', '4');

INSERT INTO mtcars VALUES ('32.4', '4', '78.7', '66', '4.08', '2.200', '19.47', '1', '1', '4', '1');

INSERT INTO mtcars VALUES ('30.4', '4', '75.7', '52', '4.93', '1.615', '18.52', '1', '1', '4', '2');

INSERT INTO mtcars VALUES ('33.9', '4', '71.1', '65', '4.22', '1.835', '19.90', '1', '1', '4', '1');

INSERT INTO mtcars VALUES ('21.5', '4', '120.1', '97', '3.70', '2.465', '20.01', '1', '0', '3', '1');

INSERT INTO mtcars VALUES ('15.5', '8', '318.0', '150', '2.76', '3.520', '16.87', '0', '0', '3', '2');

INSERT INTO mtcars VALUES ('15.2', '8', '304.0', '150', '3.15', '3.435', '17.30', '0', '0', '3', '2');

INSERT INTO mtcars VALUES ('13.3', '8', '350.0', '245', '3.73', '3.840', '15.41', '0', '0', '3', '4');

INSERT INTO mtcars VALUES ('19.2', '8', '400.0', '175', '3.08', '3.845', '17.05', '0', '0', '3', '2');

INSERT INTO mtcars VALUES ('27.3', '4', '79.0', '66', '4.08', '1.935', '18.90', '1', '1', '4', '1');

INSERT INTO mtcars VALUES ('26.0', '4', '120.3', '91', '4.43', '2.140', '16.70', '0', '1', '5', '2');

INSERT INTO mtcars VALUES ('30.4', '4', '95.1', '113', '3.77', '1.513', '16.90', '1', '1', '5', '2');

INSERT INTO mtcars VALUES ('15.8', '8', '351.0', '264', '4.22', '3.170', '14.50', '0', '1', '5', '4');

INSERT INTO mtcars VALUES ('19.7', '6', '145.0', '175', '3.62', '2.770', '15.50', '0', '1', '5', '6');

INSERT INTO mtcars VALUES ('15.0', '8', '301.0', '335', '3.54', '3.570', '14.60', '0', '1', '5', '8');

INSERT INTO mtcars VALUES ('21.4', '4', '121.0', '109', '4.11', '2.780', '18.60', '1', '1', '4', '2');

SELECT mpg, SUM(mpg) OVER (ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) AS mpg_roll FROM mtcars;

CREATE OR REPLACE TABLE big_table AS SELECT CAST((i % 500) AS SMALLINT) AS "Pid", CAST((i % 5000) AS SMALLINT) AS "Planid", LEFT(CAST(UUID() AS TEXT), 10) AS "Claimid" FROM RANGE(0, CAST(2e7 AS INT)) AS tbl(i);

PRAGMA temp_directory = '__TEST_DIR__/window_paging';

PRAGMA memory_limit = '1GB';

PRAGMA verify_external;

WITH new_table AS (SELECT Pid, Planid, Claimid, 'CLAIM' || DENSE_RANK() OVER (PARTITION BY Pid, Planid ORDER BY Claimid) AS Fake_Claimid FROM big_table) SELECT MAX(Fake_Claimid), COUNT(*) FROM new_table;

PRAGMA enable_verification;

CREATE TABLE temp AS SELECT * FROM RANGE(0, 10000) AS temp(x);

SELECT *, expected = x_roll FROM (SELECT x, rowid, CASE WHEN x = 0 THEN 0 ELSE x * 2 - 1 END AS expected, SUM(x) OVER (ORDER BY rowid ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) AS x_roll FROM temp) AS t1(x) WHERE x BETWEEN 892 AND 902 ORDER BY x;

