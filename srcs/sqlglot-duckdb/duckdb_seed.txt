CREATE TABLE x AS SELECT x AS x, RANDOM() FROM x UNION ALL VALUES (NULL, 0.1), (NULL, 0.5), (NULL, 0.9) ORDER BY 2;
PRAGMA x;
PRAGMA x;
SELECT QUANTILE_DISC(CAST(0.1 AS DECIMAL(4, 1)), [0.1, 0.5, 0.9]);
SELECT QUANTILE_CONT("x", 0.5 ORDER BY "x") FROM x;
SELECT QUANTILE_CONT("x", 0.5 ORDER BY "x") FROM x;
SELECT QUANTILE_CONT("x", 0.5 ORDER BY "x") FROM x;
SELECT QUANTILE_CONT("x", 0.5 ORDER BY "x") FROM x;
SELECT QUANTILE_CONT("x", 0.5 ORDER BY "x") FROM x;
SELECT QUANTILE_CONT("x", 0.5 ORDER BY "x") FROM x;
SELECT QUANTILE_CONT(NULL, CAST(NULL AS DOUBLE[]));
SET x = 8;
SET x = 8;
PRAGMA x;
CREATE TABLE x AS SELECT x % 5 AS x, CAST(LOG(1 + x * x) AS INT) AS x FROM x AS x;
SELECT ARRAY_SORT(APPROX_TOP_K(x, 10)) FROM x;
SELECT APPROX_TOP_K(x, 5) FROM x;
SELECT APPROX_TOP_K(CONCAT('this is a long prefix', CAST(x AS TEXT)), 5) FROM x;
SELECT APPROX_TOP_K([x], 5) FROM x;
SELECT APPROX_TOP_K({'x': x}, 5) FROM x;
SELECT APPROX_TOP_K(x, 0) FROM x AS x;
SELECT APPROX_TOP_K(x, -1) FROM x AS x;
SELECT APPROX_TOP_K(x, 999999999999999) FROM x AS x;
SELECT APPROX_TOP_K(x, NULL) FROM x AS x;
CREATE TABLE x AS SELECT 0 AS x FROM x UNION ALL SELECT 1 FROM x UNION ALL SELECT 2 FROM x;
SELECT APPROX_TOP_K(x, 3) FROM x;
CREATE TABLE x AS SELECT CASE WHEN x % 3 = 0 THEN 1 ELSE 0 END AS x FROM x AS x;
SELECT APPROX_TOP_K(x, 2) FROM x;
CREATE TABLE x AS SELECT UNNEST(APPROX_TOP_K(x, 100000)) FROM x AS x ORDER BY 1;
CREATE TABLE x AS SELECT * FROM x AS x ORDER BY 1;
SELECT * FROM x EXCEPT SELECT * FROM x;
PRAGMA x;
SELECT MIN("x") IS NOT DISTINCT FROM ARG_MIN("x", "x") FROM x;
SELECT MAX("x") IS NOT DISTINCT FROM ARG_MAX("x", "x") FROM x;
PRAGMA x;
CREATE TABLE x (x TEXT, x INT);
INSERT INTO x VALUES ('a', 2), ('a', 1), ('b', 5), ('b', 4), ('a', 3), ('b', 6);
SELECT ARG_MAX(x, x, 3 ORDER BY x DESC) FROM x;
SELECT LIST(x.x) FROM (SELECT x, x, ROW_NUMBER() OVER (ORDER BY x DESC) AS x FROM x ORDER BY x) AS x WHERE x < 4;
SELECT ARG_MAX(x, x, 2 ORDER BY x) FROM x GROUP BY x;
CREATE TABLE x AS SELECT x % 5 AS x, x FROM x AS x;
SELECT ARG_MAX(x, x, 3) FROM x;
SELECT ARG_MAX(x, x, 3) FROM x;
SELECT ARG_MAX(x, x, 3) FROM x;
SELECT ARG_MAX(x, x, 3) FROM x;
SELECT ARG_MAX(x, x, 3) FROM x;
SELECT ARG_MAX(x, x, 3) FROM x;
SELECT ARG_MAX(x, x, 3) FROM x;
PRAGMA x;
SELECT MIN("x", 1) IS NOT DISTINCT FROM ARG_MIN("x", "x", 1) FROM x;
SELECT MAX("x", 1) IS NOT DISTINCT FROM ARG_MAX("x", "x", 1) FROM x;
SELECT MAX("x", 2) IS NOT DISTINCT FROM (SELECT LIST(x."x") FROM (SELECT "x", ROW_NUMBER() OVER (ORDER BY "x" DESC) AS x FROM x ORDER BY "x" DESC) AS x WHERE x < 3) FROM x;
SELECT MIN("x", 2) IS NOT DISTINCT FROM (SELECT LIST(x."x") FROM (SELECT "x", ROW_NUMBER() OVER (ORDER BY "x" ASC) AS x FROM x ORDER BY "x" ASC) AS x WHERE x < 3) FROM x;
SELECT ARG_MAX("x", "x", 2) IS NOT DISTINCT FROM (SELECT LIST(x."x") FROM (SELECT "x", ROW_NUMBER() OVER (ORDER BY "x" DESC) AS x FROM x ORDER BY "x" DESC) AS x WHERE x < 3) FROM x;
SELECT ARG_MIN("x", "x", 2) IS NOT DISTINCT FROM (SELECT LIST(x."x") FROM (SELECT "x", ROW_NUMBER() OVER (ORDER BY "x" ASC) AS x FROM x ORDER BY "x" ASC) AS x WHERE x < 3) FROM x;
PRAGMA x;
SELECT MIN(x, 3) FROM x;
SELECT MAX(x, 3) FROM x;
SELECT x, MAX(CASE WHEN x = 'R' THEN NULL ELSE x END, CASE WHEN x = 'N' THEN 5 ELSE 3 END) FROM x GROUP BY ALL ORDER BY ALL;
SELECT * FROM x;
SELECT x, MAX(x, 3) FROM x GROUP BY ALL ORDER BY ALL;
SELECT * FROM x;
PRAGMA x;
SELECT EQUI_WIDTH_BINS(0, 10, 2, TRUE);
SELECT EQUI_WIDTH_BINS(1000000, 1000010, 2, TRUE);
SELECT EQUI_WIDTH_BINS(99, 101, 2, TRUE);
SELECT EQUI_WIDTH_BINS(9, 11, 2, TRUE);
SELECT EQUI_WIDTH_BINS(10, 11, 2, TRUE);
SELECT EQUI_WIDTH_BINS(0, 5, 10, TRUE);
SELECT EQUI_WIDTH_BINS(0, 10, 5, TRUE);
SELECT EQUI_WIDTH_BINS(-10, 0, 5, TRUE);
SELECT EQUI_WIDTH_BINS(-10, 10, 5, TRUE);
SELECT EQUI_WIDTH_BINS(0, 9, 5, TRUE);
SELECT EQUI_WIDTH_BINS(0, 1734, 10, TRUE);
SELECT EQUI_WIDTH_BINS(0, 1724, 10, TRUE);
SELECT EQUI_WIDTH_BINS(0, 1734, 10, FALSE);
SELECT EQUI_WIDTH_BINS(0, 39343341, 10, TRUE);
SELECT EQUI_WIDTH_BINS(1, 6000000, 7, TRUE);
SELECT EQUI_WIDTH_BINS(1, 6000000, 7, FALSE);
SELECT EQUI_WIDTH_BINS(-9223372036854775808, 9223372036854775807, 5, TRUE);
SELECT EQUI_WIDTH_BINS(-9223372036854775808, 9223372036854775807, 10, TRUE);
SELECT EQUI_WIDTH_BINS(-9223372036854775808, 9223372036854775807, 20, TRUE);
SELECT EQUI_WIDTH_BINS(-9223372036854775808, 9223372036854775807, 30, TRUE);
SELECT EQUI_WIDTH_BINS(0.0, 9.0, 5, TRUE);
SELECT EQUI_WIDTH_BINS(0.0, 9.0, 7, TRUE);
SELECT UNNEST(EQUI_WIDTH_BINS(0.0, 9.0, 7, FALSE));
SELECT EQUI_WIDTH_BINS(0.0, 90.0, 5, TRUE);
SELECT EQUI_WIDTH_BINS(0.0, 1.0, 5, TRUE);
SELECT EQUI_WIDTH_BINS(0.0, 1.0, 5, TRUE);
SELECT EQUI_WIDTH_BINS(-1.0, 0.0, 5, TRUE);
SELECT EQUI_WIDTH_BINS(-1.0, 1.0, 5, TRUE);
SELECT UNNEST(EQUI_WIDTH_BINS(-1e308, 1e308, 5, TRUE));
SELECT EQUI_WIDTH_BINS(0.0, 6.347, 3, TRUE) AS x;
SELECT EQUI_WIDTH_BINS(0.0, 6.347, 7, TRUE) AS x;
SELECT EQUI_WIDTH_BINS(0.0, 6.347, 10, TRUE) AS x;
SELECT EQUI_WIDTH_BINS(0.0, 6.347, 20, TRUE) AS x;
SELECT EQUI_WIDTH_BINS(0.0, 6.347, 30, TRUE) AS x;
SELECT EQUI_WIDTH_BINS(0.0, 3.974, 5, TRUE) AS x;
SELECT EQUI_WIDTH_BINS(0.0, 3.974, 7, TRUE) AS x;
SELECT EQUI_WIDTH_BINS(0.0, 3.974, 10, TRUE) AS x;
SELECT EQUI_WIDTH_BINS(0.0, 3.974, 20, TRUE) AS x;
SELECT EQUI_WIDTH_BINS(0.0, 3.974, 40, TRUE) AS x;
SELECT EQUI_WIDTH_BINS(0, 101, 5, TRUE);
SELECT EQUI_WIDTH_BINS(0, 101.5, 5, TRUE);
SELECT EQUI_WIDTH_BINS(CAST('1992-01-01' AS DATE), CAST('2000-01-01' AS DATE), 2, TRUE);
SELECT EQUI_WIDTH_BINS(CAST('1992-01-01' AS TIMESTAMP), CAST('2000-01-01' AS TIMESTAMP), 2, TRUE);
SELECT EQUI_WIDTH_BINS(CAST('1992-01-01 12:23:37' AS TIMESTAMP), CAST('2000-01-01 04:03:21' AS TIMESTAMP), 2, TRUE);
SELECT EQUI_WIDTH_BINS(CAST('1992-01-01 12:23:37' AS TIMESTAMP), CAST('2000-01-01 04:03:21' AS TIMESTAMP), 5, TRUE);
SELECT EQUI_WIDTH_BINS(CAST('1992-01-01 12:23:37' AS TIMESTAMP), CAST('1992-12-01 04:03:21' AS TIMESTAMP), 4, TRUE);
SELECT EQUI_WIDTH_BINS(CAST('1992-01-01 12:23:37' AS TIMESTAMP), CAST('1992-01-31 04:03:21' AS TIMESTAMP), 4, TRUE);
SELECT EQUI_WIDTH_BINS(CAST('1992-01-01 01:23:37.999' AS TIMESTAMP), CAST('1992-01-01 23:03:21.3' AS TIMESTAMP), 4, TRUE);
SELECT EQUI_WIDTH_BINS(CAST('1992-01-01 01:23:37.999' AS TIMESTAMP), CAST('1992-01-01 01:53:21.3' AS TIMESTAMP), 4, TRUE);
SELECT EQUI_WIDTH_BINS(CAST('1992-01-01 01:23:01.999' AS TIMESTAMP), CAST('1992-01-01 01:23:49.377' AS TIMESTAMP), 4, TRUE);
SELECT EQUI_WIDTH_BINS(CAST('1992-01-01 01:23:01.2' AS TIMESTAMP), CAST('1992-01-01 01:23:01.943' AS TIMESTAMP), 4, TRUE);
SELECT EQUI_WIDTH_BINS(CAST('2024-06-21 15:00:00' AS TIMESTAMP), CAST('2024-06-22 9:00:00' AS TIMESTAMP), 4, TRUE);
SELECT EQUI_WIDTH_BINS(CAST('2024-06-21 15:00:00' AS TIMESTAMP), CAST('2024-07-21 9:00:00' AS TIMESTAMP), 4, TRUE);
SELECT EQUI_WIDTH_BINS(CAST('2024-06-21 15:00:00.123456' AS TIMESTAMP), CAST('2024-06-21 15:00:00.123458' AS TIMESTAMP), 10, TRUE);
SELECT EQUI_WIDTH_BINS(0, 10, 5999, TRUE);
SELECT EQUI_WIDTH_BINS(0, 10, 5999, FALSE);
SELECT EQUI_WIDTH_BINS(-0.0, -1.0, 5, TRUE);
SELECT EQUI_WIDTH_BINS(0.0, CAST('inf' AS DOUBLE), 5, TRUE);
SELECT EQUI_WIDTH_BINS(0.0, CAST('nan' AS DOUBLE), 5, TRUE);
SELECT EQUI_WIDTH_BINS(0.0, 1.0, -1, TRUE);
SELECT EQUI_WIDTH_BINS(0.0, 1.0, 99999999, TRUE);
SELECT EQUI_WIDTH_BINS(CAST('a' AS TEXT), CAST('z' AS TEXT), 2, TRUE);
SET x = 1;
SET x = '500mb';
PRAGMA x;
CREATE TABLE x AS SELECT * FROM x;
SELECT * FROM x LIMIT 1;
SELECT FIRST(COLUMNS(*)) FROM x;
SELECT * FROM x LIMIT 1 OFFSET 2;
PRAGMA x;
CREATE TABLE x (x BIGINT);
INSERT INTO x VALUES (0), (5), (7), (12), (20), (23), (24), (25), (26), (28), (31), (34), (36), (41), (47);
SELECT HISTOGRAM_EXACT(x, [10, 20, 30, 40, 50]) FROM x;
SELECT HISTOGRAM_EXACT(CAST(x AS DOUBLE), [10, 20, 30, 40, 50]) FROM x;
SELECT HISTOGRAM_EXACT(CAST((CAST('2000-01-01' AS DATE) + INTERVAL (x) DAYS) AS DATE), [CAST('2000-01-01' AS DATE) + INTERVAL (x) DAYS FOR x IN [10, 20, 30, 40, 50]]) FROM x;
SELECT HISTOGRAM_EXACT(CAST(x AS TEXT), [10, 20, 30, 40, 50]) FROM x;
SELECT HISTOGRAM_EXACT([x], [[x] FOR x IN [10, 20, 30, 40, 50]]) FROM x;
SELECT CASE WHEN IS_HISTOGRAM_OTHER_BIN(x) THEN '(other values)' ELSE CAST(x AS TEXT) END AS x, x FROM (SELECT UNNEST(MAP_KEYS(x)) AS x, UNNEST(MAP_VALUES(x)) AS x FROM (SELECT HISTOGRAM_EXACT(x, [10, 20, 30, 40, 50]) AS x FROM x));
SELECT CASE WHEN IS_HISTOGRAM_OTHER_BIN(x) THEN '(other values)' ELSE CAST(x AS TEXT) END AS x, x FROM (SELECT UNNEST(MAP_KEYS(x)) AS x, UNNEST(MAP_VALUES(x)) AS x FROM (SELECT HISTOGRAM(x, [10, 20, 30, 40]) AS x FROM x));
SELECT HISTOGRAM_EXACT(x, [0, 1, 2, 3]) FROM x AS x;
SELECT IS_HISTOGRAM_OTHER_BIN(NULL);
SELECT IS_HISTOGRAM_OTHER_BIN([[1]]);
SELECT IS_HISTOGRAM_OTHER_BIN(CAST([] AS INT[][][]));
SELECT IS_HISTOGRAM_OTHER_BIN({'x': CAST(NULL AS INT[][])});
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (42);
INSERT INTO x VALUES (84);
SELECT * FROM x;
SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
SELECT * FROM x;
SELECT x, x FROM x;
INSERT INTO x VALUES (99999999);
SELECT COUNT(*), AVG(x) FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT COUNT(*), AVG(x) FROM x;
SELECT x, x FROM x;
CREATE TABLE x (x BOOLEAN);
INSERT INTO x SELECT CASE WHEN x % 4 = 0 THEN TRUE ELSE FALSE END FROM x AS x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
SELECT x[x], x[x] FROM (SELECT HISTOGRAM("x") AS x, MIN("x") AS x, MAX("x") AS x FROM x);
SELECT x[x], x[x] FROM (SELECT HISTOGRAM("x", ARRAY((SELECT MIN("x") FROM x))) AS x, MIN("x") AS x, MAX("x") AS x FROM x);
SELECT HISTOGRAM(x, RANGE(0, 7000000, 1000000)) FROM x;
SELECT HISTOGRAM(x // 1000000) FROM x;
SELECT HISTOGRAM(x, RANGE((SELECT MIN(x) FROM x), (SELECT MAX(x) FROM x), INTERVAL '1' YEAR)) FROM x;
SELECT x, HISTOGRAM(x, RANGE(0, 7000000, 1000000)) FROM x GROUP BY x ORDER BY x;
SELECT x, MAP {'x': CASE WHEN SUM(1) FILTER(WHERE x <= 0) IS NULL THEN 0 END, 'x': SUM(1) FILTER(WHERE x > 0 AND x <= 1000000), 'x': SUM(1) FILTER(WHERE x > 1000000 AND x <= 2000000), 'x': SUM(1) FILTER(WHERE x > 2000000 AND x <= 3000000), 'x': SUM(1) FILTER(WHERE x > 3000000 AND x <= 4000000), 'x': SUM(1) FILTER(WHERE x > 4000000 AND x <= 5000000), 'x': SUM(1) FILTER(WHERE x > 5000000 AND x <= 6000000)} FROM x GROUP BY x ORDER BY x;
SELECT x, x FROM x;
SELECT x, x FROM x;
SELECT x, x FROM x;
SELECT x, x FROM x;
SELECT x, x FROM x;
SELECT UNNEST(MAP_KEYS(HISTOGRAM(x))) FROM x;
SELECT DISTINCT x FROM x ORDER BY x;
SELECT ARRAY_SORT(APPROX_TOP_K(x, 5)) FROM x;
PRAGMA x;
CREATE OR REPLACE TABLE x AS SELECT * FROM x AS x;
CREATE OR REPLACE TABLE x AS SELECT x AS x, MAX(x, 2) AS x FROM x GROUP BY ALL ORDER BY ALL;
SELECT * FROM (SELECT * FROM x ORDER BY x) EXCEPT SELECT * FROM (SELECT * FROM x ORDER BY x);
PRAGMA x;
SELECT x IS NOT DISTINCT FROM x FROM (SELECT MODE(x) AS x, MIN(x) AS x FROM (SELECT "x" AS x FROM x UNION ALL SELECT MIN("x") FROM x));
SELECT x IS NOT DISTINCT FROM x FROM (SELECT MODE(x) AS x, MAX(x) AS x FROM (SELECT "x" AS x FROM x UNION ALL SELECT MAX("x") FROM x));
SELECT x, MODE(x) FROM x WHERE x <> 'N' GROUP BY x;
SELECT AVG(STRLEN(x)) FROM (SELECT MODE(x) OVER (ORDER BY x ROWS BETWEEN 5 PRECEDING AND 5 FOLLOWING) AS x FROM x);
SELECT MODE(x), MODE([x]), MODE({'x': x}) FROM x;
SELECT x, MODE(x), MODE([x]), MODE({'x': x}) FROM x GROUP BY x ORDER BY x;
PRAGMA x;
SELECT QUANTILE_DISC("x", 0.2) IS NOT DISTINCT FROM MIN("x"), QUANTILE_DISC("x", 0.8) IS NOT DISTINCT FROM MAX("x"), QUANTILE_DISC("x", [0.8, 0.2]) IS NOT DISTINCT FROM [MAX("x"), MIN("x")] FROM x;
PRAGMA x;
WITH x AS (SELECT CAST('text1' AS TEXT) AS x UNION ALL SELECT CAST('text1' AS TEXT) AS x UNION ALL SELECT CAST('text1' AS TEXT) AS x) SELECT GROUP_CONCAT(x, ', ') AS x FROM x;
WITH x AS (SELECT 1 AS x, CAST('text1' AS TEXT) AS x UNION ALL SELECT 1 AS x, CAST('text1' AS TEXT) AS x UNION ALL SELECT 1 AS x, CAST('text1' AS TEXT) AS x) SELECT GROUP_CONCAT(x, ', ') AS x FROM x GROUP BY x;
CREATE TABLE x (x TEXT, x INT);
INSERT INTO x VALUES ('hello', 0), ('world', 1), (NULL, 0), ('r', 1);
SELECT COUNT(*), COUNT(x), MIN(x), MAX(x) FROM x;
SELECT COUNT(*), COUNT(x), MIN(x), MAX(x) FROM x WHERE x IS NULL;
SELECT GROUP_CONCAT(x, ' '), GROUP_CONCAT(x, ''), GROUP_CONCAT('', ''), GROUP_CONCAT('hello', ' ') FROM x;
SELECT x, COUNT(*), COUNT(x), MIN(x), MAX(x), GROUP_CONCAT(x, ' ') FROM x GROUP BY x ORDER BY x;
SELECT x, COUNT(*), COUNT(x), MIN(x), MAX(x), GROUP_CONCAT(DISTINCT CAST(x AS TEXT) ORDER BY CAST(x AS TEXT) DESC) FROM x GROUP BY x ORDER BY x;
SELECT x, COUNT(*), COUNT(x), MIN(x), MAX(x), GROUP_CONCAT(DISTINCT x ORDER BY x ASC) FROM x GROUP BY x ORDER BY x;
SELECT x, COUNT(*), COUNT(x), MIN(x), MAX(x), GROUP_CONCAT(x, ' ') FROM x WHERE x IS NULL OR x <> 'hello' GROUP BY x ORDER BY x;
SELECT SUM(x) FROM x GROUP BY x ORDER BY x;
SELECT AVG(x) FROM x GROUP BY x ORDER BY x;
CREATE TABLE x (x BOOLEAN, x INT);
INSERT INTO x VALUES (FALSE, 0), (TRUE, 1), (NULL, 0), (FALSE, 1);
SELECT COUNT(*), COUNT(x), MIN(x), MAX(x) FROM x;
SELECT COUNT(*), COUNT(x), MIN(x), MAX(x) FROM x WHERE x IS NULL;
SELECT x, COUNT(*), COUNT(x), MIN(x), MAX(x) FROM x GROUP BY x ORDER BY x;
SELECT x, COUNT(*), COUNT(x), MIN(x), MAX(x) FROM x WHERE x IS NULL OR x = TRUE GROUP BY x ORDER BY x;
SELECT SUM(x) FROM x GROUP BY x ORDER BY x;
SELECT AVG(x) FROM x GROUP BY x ORDER BY x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (12, 0), (22, 1), (NULL, 0), (14, 1);
SELECT COUNT(*), COUNT(x), MIN(x), MAX(x), SUM(x) FROM x;
SELECT COUNT(*), COUNT(x), MIN(x), MAX(x), SUM(x) FROM x WHERE x IS NULL;
SELECT x, COUNT(*), COUNT(x), MIN(x), MAX(x), SUM(x) FROM x GROUP BY x ORDER BY x;
SELECT x, COUNT(*), COUNT(x), MIN(x), MAX(x), SUM(x) FROM x WHERE x IS NULL OR x > 15 GROUP BY x ORDER BY x;
SELECT COUNT(), COUNT(1), COUNT(*), COUNT(NULL), COUNT('hello'), COUNT(CAST('1992-02-02' AS DATE));
SELECT COUNT(1, 2);
SELECT SUM(1), SUM(NULL), SUM(33.3);
SELECT SUM(TRUE);
SELECT SUM('hello');
SELECT SUM(CAST('1992-02-02' AS DATE));
SELECT SUM(CAST('1992-02-02' AS DATE));
SELECT SUM(CAST('1992-02-02' AS DATE));
SELECT MIN(1), MIN(NULL), MIN(33.3), MIN('hello'), MIN(TRUE), MIN(CAST('1992-02-02' AS DATE)), MIN(CAST('2008-01-01 00:00:01' AS TIMESTAMP));
SELECT MIN(1), MIN(NULL), MIN(33.3), MIN('hello'), MIN(TRUE), MIN(CAST('1992-02-02' AS DATE)), MIN(CAST('2008-01-01 00:00:01' AS TIMESTAMP));
SELECT MIN(1, 2);
SELECT MAX(1), MAX(NULL), MAX(33.3), MAX('hello'), MAX(TRUE), MAX(CAST('1992-02-02' AS DATE)), MAX(CAST('2008-01-01 00:00:01' AS TIMESTAMP));
SELECT MAX(1), MAX(NULL), MAX(33.3), MAX('hello'), MAX(TRUE), MAX(CAST('1992-02-02' AS DATE)), MAX(CAST('2008-01-01 00:00:01' AS TIMESTAMP));
SELECT MAX(1, 2);
SELECT FIRST(1), FIRST(NULL), FIRST(33.3), FIRST('hello'), FIRST(TRUE), FIRST(CAST('1992-02-02' AS DATE)), FIRST(CAST('2008-01-01 00:00:01' AS TIMESTAMP));
SELECT FIRST(1), FIRST(NULL), FIRST(33.3), FIRST('hello'), FIRST(TRUE), FIRST(CAST('1992-02-02' AS DATE)), FIRST(CAST('2008-01-01 00:00:01' AS TIMESTAMP));
SELECT FIRST(1), FIRST(NULL), FIRST(33.3), FIRST('hello'), FIRST(TRUE), FIRST(CAST('1992-02-02' AS DATE)), FIRST(CAST('2008-01-01 00:00:01' AS TIMESTAMP));
SELECT LAST(1), LAST(NULL), LAST(33.3), LAST('hello'), LAST(TRUE), LAST(CAST('1992-02-02' AS DATE)), LAST(CAST('2008-01-01 00:00:01' AS TIMESTAMP));
SELECT LAST(1), LAST(NULL), LAST(33.3), LAST('hello'), LAST(TRUE), LAST(CAST('1992-02-02' AS DATE)), LAST(CAST('2008-01-01 00:00:01' AS TIMESTAMP));
SELECT LAST(1), LAST(NULL), LAST(33.3), LAST('hello'), LAST(TRUE), LAST(CAST('1992-02-02' AS DATE)), LAST(CAST('2008-01-01 00:00:01' AS TIMESTAMP));
SELECT AVG(1), AVG(NULL), AVG(33.3);
SELECT AVG(TRUE);
SELECT AVG('hello');
SELECT AVG(CAST('1992-02-02' AS DATE));
SELECT AVG(CAST('1992-02-02' AS DATE));
SELECT AVG(CAST('1992-02-02' AS DATE));
SELECT GROUP_CONCAT('hello');
SELECT GROUP_CONCAT('hello', ' '), GROUP_CONCAT('hello', NULL), GROUP_CONCAT(NULL, ' '), GROUP_CONCAT(NULL, NULL), GROUP_CONCAT('', '');
SELECT GROUP_CONCAT('hello', ' '), GROUP_CONCAT('hello', NULL), GROUP_CONCAT(NULL, ' '), GROUP_CONCAT(NULL, NULL), GROUP_CONCAT('', '');
SELECT GROUP_CONCAT(1, 2, 3);
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3), (3), (2);
SELECT GROUP_CONCAT(DISTINCT CAST(x AS TEXT) ORDER BY CAST(x AS TEXT) DESC) FROM x;
SELECT COUNT(NULL), GROUP_CONCAT(DISTINCT CAST(x AS TEXT) ORDER BY CAST(x AS TEXT) ASC) FROM x;
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (NULL), (2), (3);
SELECT ANY_VALUE(x) AS x FROM x;
SELECT ANY_VALUE(x) AS x FROM x;
SELECT ANY_VALUE(x) AS x FROM x;
SELECT ANY_VALUE(x) FROM x;
SELECT x % 3 AS x, ANY_VALUE(x) FROM x GROUP BY 1 ORDER BY 1;
SELECT ANY_VALUE(x ORDER BY 5 - x) FROM x;
SELECT x % 3 AS x, ANY_VALUE(x ORDER BY 5 - x) FROM x GROUP BY 1 ORDER BY 1;
SELECT x % 3 AS x, ANY_VALUE(x ORDER BY 5 - x) FROM x GROUP BY 1 ORDER BY 1;
SELECT x % 3 AS x, ANY_VALUE(x ORDER BY 5 - x) FROM x GROUP BY 1 ORDER BY 1;
SELECT ANY_VALUE(x ORDER BY 5 - x) FROM x;
SELECT CAST(x AS INT) % 3 AS x, ANY_VALUE(x ORDER BY 5 - x) FROM x GROUP BY 1 ORDER BY 1;
SELECT CAST(x AS INT) % 3 AS x, ANY_VALUE(x ORDER BY 5 - x) FROM x GROUP BY 1 ORDER BY 1;
CREATE TABLE x AS SELECT 1 AS x, CAST(NULL AS DATE) AS x, CAST(NULL AS TIMESTAMP) AS x, CAST(NULL AS TIME) AS x, CAST(NULL AS INTERVAL) AS x UNION ALL SELECT CAST(x AS INT) AS x, CAST('2021-08-20' AS DATE) + CAST(x AS INT) AS x, CAST('2021-08-20' AS TIMESTAMP) + INTERVAL (x) HOUR AS x, CAST('14:59:37' AS TIME) + INTERVAL (x) MINUTE AS x, INTERVAL (x) SECOND AS x FROM x AS x;
SELECT ANY_VALUE(x), ANY_VALUE(x), ANY_VALUE(x), ANY_VALUE(x) FROM x;
SELECT x % 3 AS x, ANY_VALUE(x), ANY_VALUE(x), ANY_VALUE(x), ANY_VALUE(x) FROM x GROUP BY 1 ORDER BY 1;
SELECT ANY_VALUE(x ORDER BY 5 - x), ANY_VALUE(x ORDER BY 5 - x), ANY_VALUE(x ORDER BY 5 - x), ANY_VALUE(x ORDER BY 5 - x) FROM x;
SELECT x % 3 AS x, ANY_VALUE(x ORDER BY 5 - x), ANY_VALUE(x ORDER BY 5 - x), ANY_VALUE(x ORDER BY 5 - x), ANY_VALUE(x ORDER BY 5 - x) FROM x GROUP BY 1 ORDER BY 1;
SELECT ANY_VALUE(CAST(x AS TIMESTAMPTZ)), ANY_VALUE(CAST(x AS TIMETZ)) FROM x;
SELECT x % 3 AS x, ANY_VALUE(CAST(x AS TIMESTAMPTZ)), ANY_VALUE(CAST(x AS TIMETZ)) FROM x GROUP BY 1 ORDER BY 1;
SELECT ANY_VALUE(CAST(x AS TIMESTAMPTZ) ORDER BY 5 - x), ANY_VALUE(CAST(x AS TIMETZ) ORDER BY 5 - x) FROM x;
SELECT x % 3 AS x, ANY_VALUE(CAST(x AS TIMESTAMPTZ) ORDER BY 5 - x), ANY_VALUE(CAST(x AS TIMETZ) ORDER BY 5 - x) FROM x GROUP BY 1 ORDER BY 1;
DROP TABLE x;
CREATE TABLE x AS SELECT 1 AS x, CAST(NULL AS TEXT) AS x, CAST(NULL AS BIGINT[]) AS x, NULL AS x UNION ALL SELECT CAST(x AS INT) AS x, CAST(x AS TEXT) AS x, [x] AS x, {'x': x} AS x FROM x AS x;
SELECT ANY_VALUE(x), ANY_VALUE(x), ANY_VALUE(x) FROM x;
SELECT x % 3 AS x, ANY_VALUE(x), ANY_VALUE(x), ANY_VALUE(x) FROM x GROUP BY 1 ORDER BY 1;
SELECT ANY_VALUE(x ORDER BY 5 - x), ANY_VALUE(x ORDER BY 5 - x), ANY_VALUE(x ORDER BY 5 - x) FROM x;
SELECT x % 3 AS x, ANY_VALUE(x ORDER BY 5 - x), ANY_VALUE(x ORDER BY 5 - x), ANY_VALUE(x ORDER BY 5 - x) FROM x GROUP BY 1 ORDER BY 1;
DROP TABLE x;
SELECT ANY_VALUE(x) OVER () AS x FROM x AS x;
PRAGMA x;
CREATE TABLE x (x INT, x TEXT);
INSERT INTO x VALUES (1, NULL), (2, 'thisisalongstring'), (3, 'thisisalsoalongstring');
SELECT ANY_VALUE(x) FROM x;
SELECT ANY_VALUE(x) FROM x WHERE x = 2;
SELECT ANY_VALUE(x) FROM x WHERE x = 1;
SELECT ANY_VALUE(x) FROM x WHERE x = 1 GROUP BY x;
SELECT ANY_VALUE(x) FROM x WHERE x = 0;
SELECT ANY_VALUE(x) FROM x WHERE x = 0 GROUP BY x;
SELECT x, ANY_VALUE(x) FROM x GROUP BY x ORDER BY x;
SELECT ANY_VALUE(x) FROM (VALUES (CAST(NULL AS INT))) AS x;
PRAGMA x;
PRAGMA x;
SELECT APPROX_COUNT_DISTINCT(*);
SELECT APPROX_COUNT_DISTINCT(1);
SELECT APPROX_COUNT_DISTINCT(NULL);
SELECT APPROX_COUNT_DISTINCT('hello');
SELECT APPROX_COUNT_DISTINCT(10), APPROX_COUNT_DISTINCT('hello') FROM x;
SELECT APPROX_COUNT_DISTINCT(x) FROM x AS x WHERE 1 = 0;
CREATE TABLE IF NOT EXISTS x (x DATE);
INSERT INTO x VALUES ('2008-01-01'), (NULL), ('2007-01-01'), ('2008-02-01'), ('2008-01-02'), ('2008-01-01'), ('2008-01-01'), ('2008-01-01');
CREATE TABLE IF NOT EXISTS x (x TIMESTAMP);
INSERT INTO x VALUES ('2008-01-01 00:00:01'), (NULL), ('2007-01-01 00:00:01'), ('2008-02-01 00:00:01'), ('2008-01-02 00:00:01'), ('2008-01-01 10:00:00'), ('2008-01-01 00:10:00'), ('2008-01-01 00:00:10');
CREATE TABLE IF NOT EXISTS x (x TEXT);
INSERT INTO x VALUES ('Pedro'), (NULL), ('Pedro'), ('Pedro'), ('Mark'), ('Mark'), ('Mark'), ('Hannes-Muehleisen'), ('Hannes-Muehleisen');
CREATE TABLE x AS SELECT x AS x, x % 10 AS x FROM x;
SELECT COUNT(x), APPROX_COUNT_DISTINCT(x), APPROX_COUNT_DISTINCT(x) FROM x;
SELECT APPROX_COUNT_DISTINCT(x) FROM x GROUP BY x % 2 ORDER BY ALL;
SELECT COUNT(*) FROM x WHERE x < 10;
SELECT APPROX_COUNT_DISTINCT(x) OVER (PARTITION BY x % 2) FROM x WHERE x < 10;
SELECT COUNT(x), APPROX_COUNT_DISTINCT(x) FROM x;
SELECT COUNT(x), APPROX_COUNT_DISTINCT(x) FROM x;
SELECT COUNT(x), APPROX_COUNT_DISTINCT(x) FROM x;
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('Customer#000000001'), ('Customer#000000002'), ('Customer#000000003'), ('Customer#000000004');
SELECT APPROX_COUNT_DISTINCT(x) FROM x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3);
PRAGMA x;
PRAGMA x;
SELECT SETSEED(0.8675309);
CREATE TABLE x AS SELECT x AS x, RANDOM() FROM x UNION ALL VALUES (NULL, 0.1), (NULL, 0.5), (NULL, 0.9) ORDER BY 2;
SELECT x, COUNT(*) AS x FROM x WHERE x = 'reservoir_quantile' GROUP BY ALL HAVING x <> 2 ORDER BY ALL;
SELECT CASE WHEN (x BETWEEN (x - 100) AND (x + 100)) THEN TRUE ELSE FALSE END FROM (SELECT APPROX_QUANTILE(x, 0.5) AS x, QUANTILE(x, 0.5) AS x FROM x) AS x;
SELECT CASE WHEN (x BETWEEN (x - 100) AND (x + 100)) THEN TRUE ELSE FALSE END FROM (SELECT APPROX_QUANTILE(x, 1.0) AS x, QUANTILE(x, 1.0) AS x FROM x) AS x;
SELECT CASE WHEN (x BETWEEN (x - 100) AND (x + 100)) THEN TRUE ELSE FALSE END FROM (SELECT APPROX_QUANTILE(x, 0.0) AS x, QUANTILE(x, 0.0) AS x FROM x) AS x;
SELECT APPROX_QUANTILE(NULL, 0.5) AS x, QUANTILE(NULL, 0.5) AS x;
SELECT CASE WHEN (x BETWEEN (x - 100) AND (x + 100)) THEN TRUE ELSE FALSE END FROM (SELECT APPROX_QUANTILE(42, 0.5) AS x, QUANTILE(42, 0.5) AS x) AS x;
SELECT APPROX_QUANTILE(NULL, 0.5) AS x, QUANTILE(NULL, 0.5) AS x FROM x;
SELECT APPROX_QUANTILE(1, 0.5) AS x, QUANTILE(1, 0.5) AS x FROM x;
SELECT CASE WHEN (x BETWEEN (x - 100) AND (x + 100)) THEN TRUE ELSE FALSE END FROM (SELECT APPROX_QUANTILE(42, 0.5) AS x, QUANTILE(42, 0.5) AS x) AS x;
SELECT CASE WHEN (x BETWEEN (x - 100) AND (x + 100)) THEN TRUE ELSE FALSE END FROM (SELECT APPROX_QUANTILE(x, 0.1) AS x, QUANTILE(x, 0.1) AS x FROM x) AS x;
SELECT CASE WHEN (x BETWEEN (x - 100) AND (x + 100)) THEN TRUE ELSE FALSE END FROM (SELECT APPROX_QUANTILE(x, 0.9) AS x, QUANTILE(x, 0.9) AS x FROM x) AS x;
SELECT APPROX_QUANTILE(CAST('1:02:03.000000+05:30' AS TIMETZ), 0.5);
SELECT [(x[1] BETWEEN (x[1] - 100) AND (x[1] + 100)), (x[2] BETWEEN (x[2] - 100) AND (x[2] + 100)), (x[3] BETWEEN (x[3] - 100) AND (x[3] + 100))] FROM (SELECT APPROX_QUANTILE(x, [0.25, 0.5, 0.75]) AS x, QUANTILE(x, [0.25, 0.5, 0.75]) AS x FROM x) AS x;
SELECT [(x[1] BETWEEN (x[1] - 100) AND (x[1] + 100)), (x[2] BETWEEN (x[2] - 100) AND (x[2] + 100)), (x[3] BETWEEN (x[3] - 100) AND (x[3] + 100))] FROM (SELECT RESERVOIR_QUANTILE(x, [0.25, 0.5, 0.75], 4096) AS x, QUANTILE(x, [0.25, 0.5, 0.75]) AS x FROM x) AS x;
SELECT APPROX_QUANTILE(x, [0.5, 0.4, 0.1]) AS x FROM (VALUES (0), (1), (2), (10)) AS x;
SELECT APPROX_QUANTILE(x, ARRAY_VALUE(0.5, 0.4, 0.1)) AS x FROM (VALUES (0), (1), (2), (10)) AS x;
SELECT APPROX_QUANTILE(x, -0.1) FROM x;
SELECT APPROX_QUANTILE(x, 1.1) FROM x;
SELECT APPROX_QUANTILE(x, NULL) FROM x;
SELECT APPROX_QUANTILE(x, x) FROM x;
SELECT APPROX_QUANTILE(CAST(x AS TEXT), 0.5) FROM x;
SELECT APPROX_QUANTILE(CAST(x AS TEXT), 0.5) FROM x;
SELECT APPROX_QUANTILE(x, 0.1, 0.2) FROM x;
SELECT APPROX_QUANTILE(42, CAST(NULL AS INT[]));
PRAGMA x = 4;
PRAGMA x;
SELECT CASE WHEN (x BETWEEN (x - (x * 0.01)) AND (x + (x * 0.01))) THEN TRUE ELSE FALSE END FROM (SELECT APPROX_QUANTILE(x, 0.1) AS x, QUANTILE(x, 0.1) AS x, SUM(x) AS x FROM x) AS x;
SELECT CASE WHEN (x BETWEEN (x - (x * 0.01)) AND (x + (x * 0.01))) THEN TRUE ELSE FALSE END FROM (SELECT APPROX_QUANTILE(x, 0.9) AS x, QUANTILE(x, 0.9) AS x, SUM(x) AS x FROM x) AS x;
SELECT CASE WHEN (x BETWEEN (x - (x * 0.01)) AND (x + (x * 0.01))) THEN TRUE ELSE FALSE END FROM (SELECT APPROX_QUANTILE(x, 0.5) AS x, QUANTILE(x, 0.5) AS x, SUM(x) AS x FROM x) AS x;
CREATE TABLE x (x DECIMAL(15, 2));
SELECT APPROX_QUANTILE(x, 0.5) FROM x;
SELECT APPROX_QUANTILE(x, [0.5]) FROM x;
PRAGMA x;
PRAGMA x;
SELECT RESERVOIR_QUANTILE(x, 0.9) FROM x;
SELECT RESERVOIR_QUANTILE(x, 0.9, 1000) FROM x;
SELECT RESERVOIR_QUANTILE(1, 0.5, 1) FROM x;
SELECT RESERVOIR_QUANTILE(x, 0.5) FROM (SELECT 'a' AS x, 1.0 AS x) AS x GROUP BY x;
SELECT APPROX_QUANTILE(x, 0.5) FROM (SELECT 'a' AS x, 1.0 AS x UNION ALL SELECT 'a' AS x, 1.0 AS x UNION ALL SELECT 'b' AS x, 1.0 AS x) AS x GROUP BY x;
SELECT RESERVOIR_QUANTILE(x, x) FROM x;
SELECT RESERVOIR_QUANTILE(x, NULL) FROM x;
SELECT RESERVOIR_QUANTILE(x, x, x) FROM x;
SELECT RESERVOIR_QUANTILE(x, 0.9, NULL) FROM x;
SELECT RESERVOIR_QUANTILE(x, 0.9, x) FROM x;
SELECT RESERVOIR_QUANTILE(x, CAST(RANDOM() AS REAL)) FROM x;
SELECT RESERVOIR_QUANTILE(x, 0.9, CAST(RANDOM() AS REAL)) FROM x;
SELECT RESERVOIR_QUANTILE(0., 0.9, 1000);
PRAGMA x;
PRAGMA x;
PRAGMA x;
SELECT ARG_MIN(NULL, NULL);
SELECT ARG_MIN(1, 1);
SELECT ARG_MIN(1, 1);
SELECT ARG_MIN(x, x) FROM x AS x;
SELECT ARG_MIN(x, x) FROM x AS x WHERE 1 = 0;
SELECT ARG_MIN(x, x) FROM x AS x WHERE 1 = 0;
SELECT ARG_MAX(NULL, NULL);
SELECT ARG_MAX(1, 1);
SELECT ARG_MAX(1, 1);
SELECT ARG_MAX(x, x) FROM x AS x;
SELECT ARG_MAX(x, x) FROM x AS x WHERE 1 = 0;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (2, 2), (8, 8), (10, 10);
SELECT ARG_MIN(x, x), ARG_MAX(x, x) FROM x;
SELECT ARG_MIN(x, x), ARG_MAX(x, x) FROM x GROUP BY x % 2 ORDER BY ARG_MIN(x, x);
CREATE TABLE x (x INT128);
INSERT INTO x VALUES (-168123123123200005565479978461862821890), (-168123123123200005565479978461862821889), (-168123123123200005565479978461862821888), (-168123123123200005565479978461862821893);
SELECT MIN(x) - ARG_MIN(x, x) FROM x;
CREATE TABLE x (x BLOB, x BIGINT);
INSERT INTO x VALUES ('\xaa\xff\xaa', 5), ('\xAA\xFF\xAA\xAA\xFF\xAA', 30), ('\xAA\xFF\xAA\xAA\xFF\xAA\xAA\xFF\xAA', 20);
SELECT ARG_MIN(x, x), ARG_MAX(x, x) FROM x;
SELECT ARG_MIN(x, x), ARG_MAX(x, x) FROM x;
SELECT ARG_MIN(x, x) OVER (PARTITION BY x % 2) FROM x;
SELECT ARG_MAX(x, x) OVER (PARTITION BY x % 2) FROM x;
CREATE TABLE x (x TEXT, x INT);
INSERT INTO x VALUES ('Pedro', 10), ('Hannes', 20), ('Mark', 15), ('Hubert-Blaine-Wolfeschlegelsteinhausenbergerdorff', 30);
SELECT ARG_MIN(x, x), ARG_MAX(x, x) FROM x;
SELECT ARG_MIN(x, x), ARG_MAX(x, x) FROM x;
SELECT ARG_MIN(x, x), ARG_MAX(x, x) FROM x;
SELECT ARG_MIN(x, x), ARG_MAX(x, x) FROM x;
CREATE OR REPLACE TABLE x (x DECIMAL(18, 3), x DECIMAL(18, 3), x DECIMAL(18, 3));
CREATE OR REPLACE TABLE x (x DECIMAL(18, 3), x DECIMAL(18, 3), x DECIMAL(18, 3));
CREATE OR REPLACE TABLE x (x DECIMAL(18, 3), x DECIMAL(18, 3), x DECIMAL(18, 3));
SELECT ARG_MAX(x, x) AS x FROM x;
SELECT ARG_MIN(x, x) AS x FROM x;
SELECT ARG_MAX(x, x) FROM (VALUES (1, NULL)) AS x;
PRAGMA x;
PRAGMA x;
SELECT SETSEED(0.8675309);
CREATE TABLE x ("x" DATE, "x" TIMESTAMP, "x" INT, "x" BIGINT, "x" DOUBLE, "x" TEXT);
INSERT INTO x SELECT CAST('1992-01-02' AS DATE) + INTERVAL (CAST((RANDOM() * 300) AS INT)) DAYS AS x, CAST('1992-01-02 23:20:11' AS TIMESTAMP) + INTERVAL (CAST((RANDOM() * 300) AS INT)) DAYS + INTERVAL (CAST((RANDOM() * 60 * 60) AS INT)) SECONDS AS x, 50 + CAST((RANDOM() * 6000) AS INT) AS x, 10 + CAST((RANDOM() * 899999999) AS BIGINT) AS x, 1 + RANDOM() * 99 AS x, CONCAT(CHR(98 + CAST((RANDOM() * 24) AS INT)), CHR(98 + CAST((RANDOM() * 24) AS INT)), CHR(98 + CAST((RANDOM() * 24) AS INT)), CHR(98 + CAST((RANDOM() * 24) AS INT)), REPEAT(CHR(98 + CAST((RANDOM() * 24) AS INT)), 29)) AS x FROM x;
INSERT INTO x VALUES (CAST('1992-01-01' AS DATE), CAST('1992-01-01 23:20:11' AS TIMESTAMP), 42, 0, 0.5, 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa');
INSERT INTO x VALUES (CAST('1993-01-01' AS DATE), CAST('1993-01-01 23:20:11' AS TIMESTAMP), 8400, 999999999, 100.5, 'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz');
INSERT INTO x VALUES (CAST('1993-01-01' AS DATE), CAST('1993-01-01 23:20:11' AS TIMESTAMP), 8400, 999999999, 100.5, 'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz');
INSERT INTO x VALUES (CAST('1993-01-01' AS DATE), CAST('1993-01-01 23:20:11' AS TIMESTAMP), 8400, 999999999, 100.5, 'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz');
INSERT INTO x VALUES (CAST('1993-01-01' AS DATE), CAST('1993-01-01 23:20:11' AS TIMESTAMP), 8400, 999999999, 100.5, 'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz');
INSERT INTO x VALUES (CAST('1993-01-01' AS DATE), CAST('1993-01-01 23:20:11' AS TIMESTAMP), 8400, 999999999, 100.5, 'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz');
SELECT ARG_MIN(["x", "x" + INTERVAL '1' DAY, NULL, "x"], "x") FROM x;
SELECT ARG_MAX(["x", "x" + INTERVAL '1' DAY, NULL, "x"], "x") FROM x;
SELECT ARG_MIN(["x", "x" + INTERVAL '1' DAY, NULL, "x"], "x") FROM x;
SELECT ARG_MAX(["x", "x" + INTERVAL '1' DAY, NULL, "x"], "x") FROM x;
SELECT ARG_MIN({'x': ["x", "x" + INTERVAL '1' DAY, NULL, "x"], 'x': "x", 'x': "x", 'x': "x"}, "x") FROM x;
SELECT ARG_MAX({'x': ["x", "x" + INTERVAL '1' DAY, NULL, "x"], 'x': "x", 'x': "x", 'x': "x"}, "x") FROM x;
SELECT ARG_MIN({'x': ["x", "x" + INTERVAL '1' DAY, NULL, "x"], 'x': "x", 'x': "x", 'x': "x"}, "x") FROM x;
SELECT ARG_MAX({'x': ["x", "x" + INTERVAL '1' DAY, NULL, "x"], 'x': "x", 'x': "x", 'x': "x"}, "x") FROM x;
PRAGMA x;
PRAGMA x;
SELECT ARG_MIN_NULL();
SELECT ARG_MIN_NULL(NULL, NULL);
SELECT ARG_MIN_NULL(1, 1);
SELECT ARG_MIN_NULL(*);
SELECT ARG_MIN_NULL(x, x) FROM x AS x;
SELECT ARG_MIN_NULL(x, x) FROM x AS x WHERE 1 = 0;
SELECT ARG_MAX_NULL();
SELECT ARG_MAX_NULL(NULL, NULL);
SELECT ARG_MAX_NULL(1, 1);
SELECT ARG_MAX_NULL(*);
SELECT ARG_MAX_NULL(x, x) FROM x AS x;
SELECT ARG_MAX_NULL(x, x) FROM x AS x WHERE 1 = 0;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (2, 2), (8, 8), (10, 10);
SELECT ARG_MIN_NULL(x, x), ARG_MAX_NULL(x, x) FROM x;
SELECT ARG_MIN_NULL(x, x), ARG_MAX_NULL(x, x) FROM x GROUP BY x % 2 ORDER BY ARG_MIN_NULL(x, x);
INSERT INTO x VALUES (NULL, 0), (NULL, 12);
SELECT ARG_MIN_NULL(x, x), ARG_MAX_NULL(x, x) FROM x;
SELECT ARG_MIN_NULL(x, x), ARG_MAX_NULL(x, x) FROM x GROUP BY x % 2 ORDER BY ARG_MIN_NULL(x, x);
CREATE TABLE x (x BLOB, x BIGINT);
INSERT INTO x VALUES ('\xaa\xff\xaa', 5), ('\xAA\xFF\xAA\xAA\xFF\xAA', 30), ('\xAA\xFF\xAA\xAA\xFF\xAA\xAA\xFF\xAA', 20);
SELECT ARG_MIN_NULL(x, x), ARG_MAX_NULL(x, x) FROM x;
SELECT ARG_MIN_NULL(x, x), ARG_MAX_NULL(x, x) FROM x;
SELECT ARG_MIN_NULL(x, x) OVER (PARTITION BY x % 2) FROM x;
SELECT ARG_MAX_NULL(x, x) OVER (PARTITION BY x % 2) FROM x;
CREATE TABLE x (x TEXT, x INT);
INSERT INTO x VALUES ('Pedro', 10), ('Hannes', 20), ('Mark', 15), ('Hubert-Blaine-Wolfeschlegelsteinhausenbergerdorff', 30);
SELECT ARG_MIN_NULL(x, x), ARG_MAX_NULL(x, x) FROM x;
SELECT ARG_MIN_NULL(x, x), ARG_MAX_NULL(x, x) FROM x;
PRAGMA x;
PRAGMA x;
SELECT SETSEED(0.8675309);
CREATE TABLE x ("x" DATE, "x" TIMESTAMP, "x" INT, "x" BIGINT, "x" DOUBLE, "x" TEXT);
INSERT INTO x SELECT CAST('1992-01-02' AS DATE) + INTERVAL (CAST((RANDOM() * 300) AS INT)) DAYS AS x, CAST('1992-01-02 23:20:11' AS TIMESTAMP) + INTERVAL (CAST((RANDOM() * 300) AS INT)) DAYS + INTERVAL (CAST((RANDOM() * 60 * 60) AS INT)) SECONDS AS x, 50 + CAST((RANDOM() * 6000) AS INT) AS x, 10 + CAST((RANDOM() * 899999999) AS BIGINT) AS x, 1 + RANDOM() * 99 AS x, CONCAT(CHR(98 + CAST((RANDOM() * 24) AS INT)), CHR(98 + CAST((RANDOM() * 24) AS INT)), CHR(98 + CAST((RANDOM() * 24) AS INT)), CHR(98 + CAST((RANDOM() * 24) AS INT)), REPEAT(CHR(98 + CAST((RANDOM() * 24) AS INT)), 29)) AS x FROM x;
INSERT INTO x VALUES (CAST('1992-01-01' AS DATE), CAST('1992-01-01 23:20:11' AS TIMESTAMP), 42, 0, 0.5, 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa');
INSERT INTO x VALUES (CAST('1993-01-01' AS DATE), CAST('1993-01-01 23:20:11' AS TIMESTAMP), 8400, 999999999, 100.5, 'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz');
INSERT INTO x VALUES (CAST('1993-01-01' AS DATE), CAST('1993-01-01 23:20:11' AS TIMESTAMP), 8400, 999999999, 100.5, 'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz');
INSERT INTO x VALUES (CAST('1993-01-01' AS DATE), CAST('1993-01-01 23:20:11' AS TIMESTAMP), 8400, 999999999, 100.5, 'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz');
INSERT INTO x VALUES (CAST('1993-01-01' AS DATE), CAST('1993-01-01 23:20:11' AS TIMESTAMP), 8400, 999999999, 100.5, 'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz');
INSERT INTO x VALUES (CAST('1993-01-01' AS DATE), CAST('1993-01-01 23:20:11' AS TIMESTAMP), 8400, 999999999, 100.5, 'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz');
SELECT ARG_MIN_NULL(["x", "x" + INTERVAL '1' DAY, NULL, "x"], "x") FROM x;
SELECT ARG_MAX_NULL(["x", "x" + INTERVAL '1' DAY, NULL, "x"], "x") FROM x;
SELECT ARG_MIN_NULL(["x", "x" + INTERVAL '1' DAY, NULL, "x"], "x") FROM x;
SELECT ARG_MAX_NULL(["x", "x" + INTERVAL '1' DAY, NULL, "x"], "x") FROM x;
SELECT ARG_MIN_NULL({'x': ["x", "x" + INTERVAL '1' DAY, NULL, "x"], 'x': "x", 'x': "x", 'x': "x"}, "x") FROM x;
SELECT ARG_MAX_NULL({'x': ["x", "x" + INTERVAL '1' DAY, NULL, "x"], 'x': "x", 'x': "x", 'x': "x"}, "x") FROM x;
SELECT ARG_MIN_NULL({'x': ["x", "x" + INTERVAL '1' DAY, NULL, "x"], 'x': "x", 'x': "x", 'x': "x"}, "x") FROM x;
SELECT ARG_MAX_NULL({'x': ["x", "x" + INTERVAL '1' DAY, NULL, "x"], 'x': "x", 'x': "x", 'x': "x"}, "x") FROM x;
INSERT INTO x VALUES (CAST('1991-01-01' AS DATE), CAST('1991-01-01 23:20:11' AS TIMESTAMP), 41, -1, 0.25, NULL);
INSERT INTO x VALUES (CAST('1991-01-01' AS DATE), CAST('1991-01-01 23:20:11' AS TIMESTAMP), 41, -1, 0.25, NULL);
INSERT INTO x VALUES (CAST('1991-01-01' AS DATE), CAST('1991-01-01 23:20:11' AS TIMESTAMP), 41, -1, 0.25, NULL);
INSERT INTO x VALUES (CAST('1991-01-01' AS DATE), CAST('1991-01-01 23:20:11' AS TIMESTAMP), 41, -1, 0.25, NULL);
INSERT INTO x VALUES (CAST('1991-01-01' AS DATE), CAST('1991-01-01 23:20:11' AS TIMESTAMP), 41, -1, 0.25, NULL);
SELECT ARG_MIN_NULL(["x", "x" + INTERVAL '1' DAY, NULL, "x"], "x") FROM x;
SELECT ARG_MAX_NULL(["x", "x" + INTERVAL '1' DAY, NULL, "x"], "x") FROM x;
SELECT ARG_MIN_NULL(["x", "x" + INTERVAL '1' DAY, NULL, "x"], "x") FROM x;
SELECT ARG_MAX_NULL(["x", "x" + INTERVAL '1' DAY, NULL, "x"], "x") FROM x;
SELECT ARG_MIN_NULL({'x': ["x", "x" + INTERVAL '1' DAY, NULL, "x"], 'x': "x", 'x': "x", 'x': "x"}, "x") FROM x;
SELECT ARG_MAX_NULL({'x': ["x", "x" + INTERVAL '1' DAY, NULL, "x"], 'x': "x", 'x': "x", 'x': "x"}, "x") FROM x;
SELECT ARG_MIN_NULL({'x': ["x", "x" + INTERVAL '1' DAY, NULL, "x"], 'x': "x", 'x': "x", 'x': "x"}, "x") FROM x;
SELECT ARG_MAX_NULL({'x': ["x", "x" + INTERVAL '1' DAY, NULL, "x"], 'x': "x", 'x': "x", 'x': "x"}, "x") FROM x;
INSERT INTO x VALUES (CAST('1994-01-01' AS DATE), CAST('1994-01-01 23:20:11' AS TIMESTAMP), 9400, 9999999999, 101.5, NULL);
INSERT INTO x VALUES (CAST('1994-01-01' AS DATE), CAST('1994-01-01 23:20:11' AS TIMESTAMP), 9400, 9999999999, 101.5, NULL);
INSERT INTO x VALUES (CAST('1994-01-01' AS DATE), CAST('1994-01-01 23:20:11' AS TIMESTAMP), 9400, 9999999999, 101.5, NULL);
INSERT INTO x VALUES (CAST('1994-01-01' AS DATE), CAST('1994-01-01 23:20:11' AS TIMESTAMP), 9400, 9999999999, 101.5, NULL);
INSERT INTO x VALUES (CAST('1994-01-01' AS DATE), CAST('1994-01-01 23:20:11' AS TIMESTAMP), 9400, 9999999999, 101.5, NULL);
SELECT ARG_MIN_NULL(["x", "x" + INTERVAL '1' DAY, NULL, "x"], "x") FROM x;
SELECT ARG_MAX_NULL(["x", "x" + INTERVAL '1' DAY, NULL, "x"], "x") FROM x;
SELECT ARG_MIN_NULL(["x", "x" + INTERVAL '1' DAY, NULL, "x"], "x") FROM x;
SELECT ARG_MAX_NULL(["x", "x" + INTERVAL '1' DAY, NULL, "x"], "x") FROM x;
SELECT ARG_MIN_NULL({'x': ["x", "x" + INTERVAL '1' DAY, NULL, "x"], 'x': "x", 'x': "x", 'x': "x"}, "x") FROM x;
SELECT ARG_MAX_NULL({'x': ["x", "x" + INTERVAL '1' DAY, NULL, "x"], 'x': "x", 'x': "x", 'x': "x"}, "x") FROM x;
SELECT ARG_MIN_NULL({'x': ["x", "x" + INTERVAL '1' DAY, NULL, "x"], 'x': "x", 'x': "x", 'x': "x"}, "x") FROM x;
SELECT ARG_MAX_NULL({'x': ["x", "x" + INTERVAL '1' DAY, NULL, "x"], 'x': "x", 'x': "x", 'x': "x"}, "x") FROM x;
PRAGMA x;
PRAGMA x;
CREATE TABLE x ("x" DATE, "x" TIMESTAMP, "x" INT, "x" BIGINT, "x" DOUBLE, "x" TEXT);
INSERT INTO x SELECT CAST('1992-01-02' AS DATE) + INTERVAL (CAST((RANDOM() * 300) AS INT)) DAYS AS x, CAST('1992-01-02 23:20:11' AS TIMESTAMP) + INTERVAL (CAST((RANDOM() * 300) AS INT)) DAYS + INTERVAL (CAST((RANDOM() * 60 * 60) AS INT)) SECONDS AS x, 50 + CAST((RANDOM() * 6000) AS INT) AS x, 10 + CAST((RANDOM() * 899999999) AS BIGINT) AS x, 1 + RANDOM() * 99 AS x, CONCAT(CHR(98 + CAST((RANDOM() * 24) AS INT)), CHR(98 + CAST((RANDOM() * 24) AS INT)), CHR(98 + CAST((RANDOM() * 24) AS INT)), CHR(98 + CAST((RANDOM() * 24) AS INT)), REPEAT(CHR(98 + CAST((RANDOM() * 24) AS INT)), 29)) AS x FROM x;
INSERT INTO x VALUES (CAST('1992-01-01' AS DATE), CAST('1992-01-01 23:20:11' AS TIMESTAMP), 42, 0, 0.5, 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa');
INSERT INTO x VALUES (CAST('1992-01-01' AS DATE), CAST('1992-01-01 23:20:11' AS TIMESTAMP), 42, 0, 0.5, 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa');
SELECT ARG_MIN_NULL("x", "x") FROM x;
SELECT ARG_MIN_NULL("x", "x") FROM x EXCEPT SELECT MIN("x") FROM x;
SELECT ARG_MAX_NULL("x", "x") FROM x;
SELECT ARG_MAX_NULL("x", "x") FROM x EXCEPT SELECT MAX("x") FROM x;
SELECT ARG_MAX_NULL("x", "x") FROM x EXCEPT SELECT MAX("x") FROM x;
SELECT ARG_MIN_NULL("x", "x") FROM x;
SELECT ARG_MAX_NULL("x", "x") FROM x;
SELECT ARG_MAX_NULL("x", "x") FROM x;
SELECT ARG_MIN_NULL("x", "x") FROM x;
SELECT ARG_MAX_NULL("x", "x") FROM x;
PRAGMA x;
PRAGMA x;
CREATE TABLE x ("x" DATE, "x" TIMESTAMP, "x" INT, "x" BIGINT, "x" DOUBLE, "x" TEXT);
INSERT INTO x SELECT CAST('1992-01-02' AS DATE) + INTERVAL (CAST((RANDOM() * 300) AS INT)) DAYS AS x, CAST('1992-01-02 23:20:11' AS TIMESTAMP) + INTERVAL (CAST((RANDOM() * 300) AS INT)) DAYS + INTERVAL (CAST((RANDOM() * 60 * 60) AS INT)) SECONDS AS x, 50 + CAST((RANDOM() * 6000) AS INT) AS x, 10 + CAST((RANDOM() * 899999999) AS BIGINT) AS x, 1 + RANDOM() * 99 AS x, CONCAT(CHR(98 + CAST((RANDOM() * 24) AS INT)), CHR(98 + CAST((RANDOM() * 24) AS INT)), CHR(98 + CAST((RANDOM() * 24) AS INT)), CHR(98 + CAST((RANDOM() * 24) AS INT)), REPEAT(CHR(98 + CAST((RANDOM() * 24) AS INT)), 29)) AS x FROM x;
INSERT INTO x VALUES (CAST('1992-01-01' AS DATE), CAST('1992-01-01 23:20:11' AS TIMESTAMP), 42, 0, 0.5, 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa');
INSERT INTO x VALUES (CAST('1992-01-01' AS DATE), CAST('1992-01-01 23:20:11' AS TIMESTAMP), 42, 0, 0.5, 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa');
SELECT ARG_MIN("x", "x") FROM x;
SELECT ARG_MIN("x", "x") FROM x EXCEPT SELECT MIN("x") FROM x;
SELECT ARG_MAX("x", "x") FROM x;
SELECT ARG_MAX("x", "x") FROM x EXCEPT SELECT MAX("x") FROM x;
SELECT AVG(3), AVG(NULL);
SELECT AVG(CAST(3 AS SMALLINT)), AVG(CAST(NULL AS SMALLINT));
SELECT AVG(CAST(3 AS DOUBLE)), AVG(CAST(NULL AS DOUBLE));
CREATE SEQUENCE x;
SELECT AVG(NEXTVAL('seq'));
SELECT AVG(NEXTVAL('seq'));
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3);
SELECT AVG(x), AVG(1), AVG(DISTINCT x), AVG(NULL) FROM x;
SELECT AVG(x) FROM x WHERE x > 100;
CREATE TABLE x (x INTERVAL);
INSERT INTO x VALUES ('1 day'), ('30 days'), ('30 days'), ('30 days'), ('30 days');
SELECT AVG(x), AVG(DISTINCT x) FROM x;
CREATE TABLE x (x INTERVAL);
INSERT INTO x (x) VALUES ('@ 1 minute'), ('@ 5 hour'), ('@ 10 day'), ('@ 34 year'), ('@ 3 months'), ('@ 14 seconds ago'), ('1 day 2 hours 3 minutes 4 seconds'), ('6 years'), ('5 months'), ('5 months 12 hours');
SELECT AVG(x) FROM x;
SELECT AVG(x) FROM x;
SELECT AVG(x) FROM x;
SELECT AVG(AVG(1));
CREATE TABLE x (x INT, x DOUBLE, x INT128);
INSERT INTO x VALUES (NULL, NULL, NULL);
SELECT AVG(x), AVG(x), AVG(x) FROM x;
CREATE OR REPLACE TABLE x AS SELECT x AS x FROM x;
SELECT AVG(CAST(x AS DATE)) FROM x;
SELECT AVG(x) FROM x;
SELECT AVG(CAST(x AS TIMESTAMPTZ)) FROM x;
CREATE OR REPLACE TABLE x AS SELECT x AS x FROM x;
SELECT AVG(CAST(x AS TIME)) FROM x;
CREATE TABLE x (x TIMETZ);
INSERT INTO x VALUES (NULL), ('00:00:00+1559'), ('00:00:00+1558'), ('02:30:00'), ('02:30:00+04'), ('02:30:00+04:30'), ('02:30:00+04:30:45'), ('16:15:03.123456'), ('02:30:00+1200'), ('02:30:00-1200'), ('24:00:00-1558'), ('24:00:00-1559');
SELECT AVG(x) FROM x;
CREATE TABLE x (x INT128);
INSERT INTO x (x) VALUES (CAST('9007199254740992' AS INT128)), (CAST(1 AS INT128)), (CAST(0 AS INT128));
SELECT CAST(AVG(x) AS DOUBLE) - CAST('3002399751580331' AS DOUBLE) FROM x;
PRAGMA x;
CREATE TABLE x (x BIGINT);
INSERT INTO x VALUES (0), (5), (7), (12), (20), (23), (24), (25), (26), (28), (31), (34), (36), (41), (47);
SELECT HISTOGRAM(x, [10, 20, 30, 40, 50]) FROM x;
SELECT HISTOGRAM(x, [10, 20, 30, 40]) FROM x;
SELECT HISTOGRAM(CAST(x AS DOUBLE), [10, 20, 30, 40]) FROM x;
SELECT HISTOGRAM(x, []) FROM x;
SELECT HISTOGRAM(x, [10, 40, 50, 30, 20]) FROM x;
SELECT x % 2 = 0 AS x, HISTOGRAM(x, [10, 20, 30, 40, 50]) FROM x GROUP BY x ORDER BY x;
SELECT x % 2 = 0 AS x, HISTOGRAM(x, CASE WHEN x % 2 = 0 THEN [10, 20, 30, 40, 50] ELSE [11, 21, 31, 41, 51] END) FROM x GROUP BY x ORDER BY x;
SELECT HISTOGRAM(x, [10, 20, 30, 40, 50]) FROM x;
SELECT HISTOGRAM(x, RANGE(999, 10000, 1000)) FROM x AS x;
SELECT HISTOGRAM(x, [-9223372036854775808, -9223372036854775807, 9223372036854775807]) FROM (VALUES (-9223372036854775808), (-9223372036854775807), (0), (9223372036854775807)) AS x;
SELECT HISTOGRAM(x, [CAST('-infinity' AS DOUBLE), -10, 0, 10, 'infinity']) FROM (VALUES (-1e308), (-0.5), (0), ('inf'), ('-inf'), (0.5)) AS x;
SELECT HISTOGRAM(x, RANGE(CAST('2000-01-01' AS TIMESTAMP), CAST('2005-01-01' AS TIMESTAMP), INTERVAL '1' YEAR)) FROM (VALUES (CAST('2000-01-01' AS TIMESTAMP)), (CAST('2003-01-01' AS TIMESTAMP))) AS x;
SELECT HISTOGRAM(x, ['a', 'b', 'c', 'z']) FROM (VALUES ('a'), ('aaaa'), ('b'), ('c'), ('d')) AS x;
SELECT HISTOGRAM(CONCAT('thisisalongprefix_', x), ['thisisalongprefix_' || x FOR x IN ['a', 'b', 'c', 'z']]) FROM (VALUES ('a'), ('aaaa'), ('b'), ('c'), ('d')) AS x;
SELECT HISTOGRAM({'x': x}, [{'x': x} FOR x IN [10, 20, 30, 40, 50]]) FROM x;
SELECT HISTOGRAM([x], [[x] FOR x IN [10, 20, 30, 40, 50]]) FROM x;
SELECT HISTOGRAM(x, [10, 10, 10, 10]) FROM x;
SELECT HISTOGRAM(x, [10, 20, NULL]) FROM x;
SELECT HISTOGRAM(x, CAST(NULL AS BIGINT[])) FROM x;
SELECT BIT_AND(3), BIT_AND(NULL);
CREATE SEQUENCE x;
SELECT BIT_AND(NEXTVAL('seq'));
SELECT BIT_AND(NEXTVAL('seq'));
CREATE TABLE x (x INT);
INSERT INTO x VALUES (3), (7), (15), (31), (3), (15);
SELECT BIT_AND(x), BIT_AND(1), BIT_AND(DISTINCT x), BIT_AND(NULL) FROM x;
SELECT BIT_AND(x) FROM x WHERE x > 100;
SELECT BIT_AND();
SELECT BIT_AND(1, 2, 3);
SELECT BIT_AND(BIT_AND(1));
CREATE TABLE x (x BIT);
INSERT INTO x VALUES ('1110101011'), ('0111010101'), ('0101011101'), ('1111111111'), ('0100010011'), ('1100110011');
SELECT BIT_AND(x) FROM x;
SELECT BIT_AND(x) FROM x WHERE GET_BIT(x, 2) = 1;
SELECT BIT_AND(CAST('010110' AS BIT));
SELECT BIT_OR(3), BIT_OR(NULL);
CREATE SEQUENCE x;
SELECT BIT_OR(NEXTVAL('seq'));
SELECT BIT_OR(NEXTVAL('seq'));
CREATE TABLE x (x INT);
INSERT INTO x VALUES (3), (7), (15), (31), (3), (15);
SELECT BIT_OR(x), BIT_OR(1), BIT_OR(DISTINCT x), BIT_OR(NULL) FROM x;
SELECT BIT_OR(x) FROM x WHERE x > 100;
SELECT BIT_OR();
SELECT BIT_OR(1, 2, 3);
SELECT BIT_OR(BIT_AND(1));
CREATE TABLE x (x BIT);
INSERT INTO x VALUES ('1010101001'), ('0011010101'), ('0001011101'), ('1011111101'), ('0000010001'), ('1000110001');
SELECT BIT_OR(x) FROM x;
SELECT BIT_OR(x) FROM x WHERE GET_BIT(x, 3) = 0;
SELECT BIT_OR(CAST('111010' AS BIT));
SELECT BIT_XOR(3), BIT_XOR(NULL);
CREATE SEQUENCE x;
SELECT BIT_XOR(NEXTVAL('seq'));
SELECT BIT_XOR(NEXTVAL('seq'));
CREATE TABLE x (x INT);
INSERT INTO x VALUES (3), (7), (15), (31), (3), (15);
SELECT BIT_XOR(x), BIT_XOR(1), BIT_XOR(DISTINCT x), BIT_XOR(NULL) FROM x;
SELECT BIT_XOR(x) FROM x WHERE x > 100;
SELECT BIT_XOR();
SELECT BIT_XOR(1, 2, 3);
SELECT BIT_XOR(BIT_XOR(1));
CREATE TABLE x (x BIT);
INSERT INTO x VALUES ('1010101001'), ('0011010101'), ('0001011101'), ('1011111101'), ('0000010001'), ('1000110001');
SELECT BIT_XOR(x) FROM x;
SELECT BIT_XOR(x) FROM x WHERE GET_BIT(x, 3) = 1;
SELECT BIT_XOR(CAST('101011' AS BIT));
SELECT BIT_XOR(CAST('0010101010101010101101011' AS BIT)) FROM x;
SET x = 'nulls_first';
SELECT BOOL_OR(0);
SELECT BOOL_AND(0);
SELECT BOOL_OR(NULL);
SELECT BOOL_AND(NULL);
SELECT BOOL_AND(NULL);
SELECT BOOL_AND(NULL);
SELECT BOOL_OR(*);
SELECT BOOL_AND(*);
SELECT BOOL_OR(TRUE) FROM x;
SELECT BOOL_AND(TRUE) FROM x;
SELECT BOOL_OR(TRUE) FROM x AS x WHERE 1 = 0;
SELECT BOOL_AND(TRUE) FROM x AS x WHERE 1 = 0;
CREATE TABLE x (x DATE);
INSERT INTO x VALUES (CAST('2021-02-09' AS DATE) - 1), (CAST('2021-02-09' AS DATE) + 1), (NULL);
SELECT BOOL_OR(x > '2021-02-09') AS x, BOOL_AND(x > '2021-02-09') AS x FROM x;
SELECT x, BOOL_OR(x > '2021-02-09') AS x, BOOL_AND(x > '2021-02-09') AS x FROM x GROUP BY x ORDER BY x;
SELECT BOOL_OR(x > '2021-02-09') OVER (PARTITION BY x) FROM x ORDER BY x;
SELECT BOOL_AND(x > '2021-02-09') OVER (PARTITION BY x) FROM x ORDER BY x;
PRAGMA x;
PRAGMA x;
SELECT CORR(NULL, NULL);
SELECT CORR(1, 1);
SELECT CORR(1, 1);
CREATE TABLE x (x INT, x DECIMAL(10, 2), x DECIMAL(10, 2));
INSERT INTO x VALUES (1, 10, NULL), (2, 10, 11), (2, 20, 22), (2, 25, NULL), (2, 30, 35);
SELECT x, CORR(x, x) FROM x GROUP BY x ORDER BY ALL;
SELECT CORR(x, x) FROM x;
SELECT CORR(x, x) OVER (PARTITION BY x) FROM x;
SELECT CORR(x, x) FROM (VALUES (1e301, 0), (-1e301, 0)) AS x;
SELECT CORR(x, x) FROM (VALUES (1e301, 0), (-1e301, 0)) AS x;
PRAGMA x;
SELECT COUNT(*), COUNT(1), COUNT(100), COUNT(NULL), COUNT(DISTINCT 1);
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (NULL);
SELECT COUNT(*), COUNT(1), COUNT(x), COUNT(COALESCE(x, 1)), COUNT(DISTINCT x), COUNT(DISTINCT 1) FROM x;
SELECT COUNT(1 ORDER BY 1);
SELECT COUNT(DISTINCT *) FROM x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (3, 4), (3, 4), (2, 4);
SELECT x, COUNT(*) FROM x GROUP BY x ORDER BY x;
SELECT x, COUNT() FROM x GROUP BY x ORDER BY x;
CREATE TABLE x (x INT);
SELECT COUNT(*), COUNT(x), STDDEV_SAMP(x), SUM(x), SUM(DISTINCT x), FIRST(x), LAST(x), MAX(x), MIN(x) FROM x WHERE x > 100;
CREATE TABLE x (x INT);
SELECT COUNT(*) FROM x;
SELECT SUM(x), COUNT(x), COUNT(DISTINCT x), COUNT(*), AVG(x), COUNT(*) + 1, COUNT(x) + 1, MIN(x), MIN(x + 1), MIN(x) + 1 FROM x;
PRAGMA x;
PRAGMA x;
SELECT ENTROPY();
SELECT ENTROPY(NULL);
SELECT ENTROPY(1);
SELECT ENTROPY(*);
CREATE TABLE x (x INT);
INSERT INTO x VALUES (0), (1), (1), (1), (4), (0), (3), (3), (2), (2), (4), (4), (2), (4), (0), (0), (0), (1), (2), (3), (4), (2), (3), (3), (1);
SELECT ENTROPY(x) FROM x;
SELECT ENTROPY(2) FROM x;
SELECT ENTROPY(x) FROM x GROUP BY x % 2 ORDER BY ALL;
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('pedro'), ('pedro'), ('pedro'), ('hannes'), ('hannes'), ('mark'), (NULL);
SELECT ENTROPY(x) FROM x;
CREATE TABLE x AS SELECT CASE WHEN x IS NULL THEN NULL ELSE [x] END AS x FROM x;
SELECT ENTROPY(x) FROM x;
CREATE TABLE x AS SELECT CASE WHEN x IS NULL THEN NULL ELSE [{'x': x}] END AS x FROM x;
SELECT ENTROPY(x) FROM x;
SELECT ENTROPY(x) OVER (PARTITION BY x % 2) FROM x;
SELECT ENTROPY(x) FROM x AS x WHERE 1 = 0;
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, NULL), (2, 3), (3, 2), (NULL, 1);
SELECT FIRST(x ORDER BY x) FROM x;
SELECT FIRST(x ORDER BY x NULLS FIRST) FROM x;
SELECT ANY_VALUE(x ORDER BY x NULLS FIRST) FROM x;
SELECT ANY_VALUE(x ORDER BY x) FROM x;
SELECT ARG_MIN(x, x) FROM x;
SELECT FIRST(x ORDER BY x DESC) FROM x;
SELECT ANY_VALUE(x ORDER BY x DESC NULLS FIRST) FROM x;
SELECT ANY_VALUE(x ORDER BY x DESC) FROM x;
SELECT ARG_MAX(x, x) FROM x;
SELECT LAST(x ORDER BY x NULLS FIRST) FROM x;
SELECT ARG_MAX(x, x) FROM x;
SELECT LAST(x ORDER BY x DESC NULLS FIRST) FROM x;
SELECT ARG_MIN(x, x) FROM x;
PRAGMA x;
CREATE TABLE x (x INT, x TEXT);
INSERT INTO x VALUES (1, NULL), (2, 'thisisalongstring'), (3, 'thisisalsoalongstring');
SELECT FIRST(x) FROM x WHERE x = 2;
SELECT ARBITRARY(x) FROM x WHERE x = 2;
SELECT FIRST(x) FROM x WHERE x = 1;
SELECT FIRST(x) FROM x WHERE x = 1 GROUP BY x;
SELECT FIRST(x) FROM x WHERE x = 0;
SELECT FIRST(x) FROM x WHERE x = 0 GROUP BY x;
SELECT x, FIRST(x) FROM x GROUP BY x ORDER BY x;
SELECT FIRST(x) FROM (VALUES (CAST(NULL AS INT))) AS x;
CREATE TABLE x AS SELECT x, 1 AS x FROM x AS x UNION ALL SELECT x, 2 AS x FROM x AS x;
SELECT SUM(x), SUM(x) FROM (SELECT x, SUM(x) AS x FROM x GROUP BY x) AS x;
SELECT SUM(x + x + x + x + x + x + x + x + x + x + x), SUM(x) FROM (SELECT x + 0 AS x, x + 1 AS x, x + 2 AS x, x + 3 AS x, x + 4 AS x, x + 5 AS x, x + 6 AS x, x + 7 AS x, x + 8 AS x, x + 9 AS x, x + 10 AS x, SUM(x) AS x FROM x GROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11) AS x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (3, 4), (3, 5), (3, 7);
SELECT x * 2 FROM x GROUP BY x * 2 ORDER BY x * 2;
SELECT x.x * 2 FROM x GROUP BY x * 2 ORDER BY x * 2;
SELECT x * 2 FROM x GROUP BY x.x * 2 ORDER BY x * 2;
SELECT x * 2 FROM x GROUP BY x * 2 ORDER BY x.x * 2;
SELECT x.x * 2 FROM x GROUP BY x * 2 ORDER BY x.x * 2;
SELECT x * 2 FROM x GROUP BY x.x * 2 ORDER BY x.x * 2;
SELECT x.x * 2 FROM x GROUP BY x.x * 2 ORDER BY x * 2;
SELECT x.x * 2 FROM x GROUP BY x.x * 2 ORDER BY x.x * 2;
SELECT x * 2 AS x FROM x GROUP BY x * 2 ORDER BY x;
PRAGMA x;
PRAGMA x;
SELECT HISTOGRAM(NULL);
SELECT HISTOGRAM(x) FROM x AS x WHERE 1 = 0;
SELECT HISTOGRAM(1);
SELECT HISTOGRAM('、');
SELECT HISTOGRAM(2) FROM x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (1, 2), (2, 3), (2, 4), (2, 5), (3, 6), (5, NULL);
SELECT HISTOGRAM(x) FROM x;
SELECT HISTOGRAM(x) FROM x;
SELECT HISTOGRAM(x) FROM x GROUP BY x % 2 = 0 ORDER BY x % 2 = 0;
SELECT HISTOGRAM(x) FROM x WHERE x < 3;
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('pedro'), ('pedro'), ('pedro'), ('hannes'), ('hannes'), ('mark'), (NULL), ('Hubert Blaine Wolfeschlegelsteinhausenbergerdorff Sr.');
SELECT HISTOGRAM(x) FROM x;
SELECT HISTOGRAM(CAST('2021-08-20' AS TIMESTAMP_S));
SELECT HISTOGRAM(CAST('2021-08-20' AS TIMESTAMP_MS));
SELECT HISTOGRAM(CAST('2021-08-20' AS TIMESTAMP_NS));
SELECT HISTOGRAM(CAST('15:05:42' AS TIME));
SELECT HISTOGRAM(CAST('15:05:42+00' AS TIMETZ));
SELECT HISTOGRAM(CAST('2022-01-02' AS DATE));
SELECT x, HISTOGRAM(x) OVER (PARTITION BY x % 2) FROM x;
SELECT HISTOGRAM();
SELECT HISTOGRAM(*);
CREATE TABLE x (x mood);
INSERT INTO x VALUES ('happy'), ('ok');
SELECT HISTOGRAM(x) FROM x;
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (0, 0), (1, 1), (2, 0), (0, 1), (1, 0), (2, 1), (0, 0), (1, 1), (2, 0), (0, 1);
SELECT x, HISTOGRAM(x) FROM x GROUP BY x ORDER BY ALL;
SELECT COUNT(1, 2, 3);
SELECT COUNT(COUNT(1));
SELECT COUNT(COUNT(1));
SELECT COUNT(COUNT(1));
SELECT STDDEV_SAMP(STDDEV_SAMP(1));
SELECT STDDEV_SAMP(STDDEV_SAMP(1));
SELECT STDDEV_SAMP(STDDEV_SAMP(1));
SELECT SUM(SUM(1));
SELECT SUM(SUM(1));
SELECT SUM(SUM(1));
SELECT FIRST(FIRST(1));
SELECT FIRST(FIRST(1));
SELECT MAX(1, 2, 3);
SELECT MAX(MAX(1));
SELECT MAX(MAX(1));
SELECT MIN(1, 2, 3);
SELECT MIN(MIN(1));
CREATE TABLE x (x DOUBLE);
INSERT INTO x (x) VALUES (CAST('9007199254740992' AS DOUBLE)), (CAST(1 AS DOUBLE)), (CAST(1 AS DOUBLE)), (CAST(0 AS DOUBLE));
SELECT FAVG(x) - CAST('2251799813685248.5' AS DOUBLE) FROM x;
CREATE TABLE x (x DOUBLE);
INSERT INTO x (x) VALUES (CAST('9007199254740992' AS DOUBLE)), (CAST(1 AS DOUBLE)), (CAST(1 AS DOUBLE)), (CAST(0 AS DOUBLE));
SELECT CAST(FSUM(x) AS BIGINT) FROM x;
SELECT CAST(SUMKAHAN(x) AS BIGINT) FROM x;
SELECT CAST(KAHAN_SUM(x) AS BIGINT) FROM x;
PRAGMA x;
SELECT KURTOSIS();
SELECT KURTOSIS(NULL);
SELECT KURTOSIS(1);
SELECT KURTOSIS(*);
SELECT KURTOSIS(x) FROM (VALUES (0), (0), (0), (0), (0), (0)) AS x;
SELECT KURTOSIS(x) FROM (VALUES (2e304), (2e305), (2e306), (2e307)) AS x;
SELECT KURTOSIS(10) FROM x;
SELECT KURTOSIS(10) FROM x WHERE 1 = 0;
CREATE TABLE x (x INT, x INT, x INT);
INSERT INTO x VALUES (1, 10, NULL), (2, 10, 11), (2, 10, 15), (2, 10, 18), (2, 20, 22), (2, 20, 25), (2, 25, NULL), (2, 30, 35), (2, 30, 40), (2, 30, 50), (2, 30, 51);
SELECT KURTOSIS(x), KURTOSIS(x), KURTOSIS(x) FROM x;
SELECT KURTOSIS_POP(x), KURTOSIS_POP(x), KURTOSIS_POP(x) FROM x;
WITH x AS (SELECT CAST(x AS REAL) AS x FROM x) SELECT KURTOSIS_POP(x) FROM x;
SELECT KURTOSIS(x) FROM x GROUP BY x ORDER BY ALL;
SELECT KURTOSIS(x) OVER (PARTITION BY x) FROM x;
PRAGMA x;
CREATE TABLE x (x INT, x TEXT);
INSERT INTO x VALUES (1, NULL), (2, 'thisisalongstring'), (3, 'thisisalsoalongstring');
SELECT LAST(x) FROM x WHERE x = 2;
SELECT LAST(x) FROM x WHERE x = 1;
SELECT LAST(x) FROM x WHERE x = 1 GROUP BY x;
SELECT LAST(x) FROM x WHERE x = 0;
SELECT LAST(x) FROM x WHERE x = 0 GROUP BY x;
SELECT x, LAST(x) FROM x GROUP BY x ORDER BY x;
SELECT LAST(x) FROM (VALUES (CAST(NULL AS INT))) AS x;
SET x = 'nulls_first';
PRAGMA x;
PRAGMA x = 1;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (2, 1), (3, 2), (NULL, 3), (42, 3);
SELECT x, LIST_EXTRACT(LIST(x), 1) FROM x GROUP BY x ORDER BY ALL;
SELECT x, LIST_EXTRACT(LIST(x), 2) FROM x GROUP BY x ORDER BY ALL;
SELECT x, LIST_EXTRACT(LIST(x), 3) FROM x GROUP BY x ORDER BY ALL;
PRAGMA x = 4;
WITH x AS (SELECT * FROM (VALUES ('a', 1), ('c', 3), ('b', 2)) AS x) SELECT LIST(x ORDER BY x) FROM x;
SELECT x, LIST(x ORDER BY x ASC) FROM x GROUP BY x ORDER BY ALL;
SELECT x, LIST(x ORDER BY x ASC NULLS FIRST) FROM x GROUP BY x ORDER BY ALL;
SELECT x, LIST(x ORDER BY x ASC) FROM x GROUP BY x ORDER BY ALL;
SELECT x, LIST(x ORDER BY x DESC) FROM x GROUP BY x ORDER BY ALL;
SELECT x, LIST(x ORDER BY x DESC NULLS FIRST) FROM x GROUP BY x ORDER BY ALL;
SELECT x, LIST(x ORDER BY x DESC) FROM x GROUP BY x ORDER BY ALL;
SELECT x, LIST(x ORDER BY x ASC) FILTER(WHERE x <> 3) FROM x GROUP BY x ORDER BY ALL;
SELECT x, LIST(x ORDER BY x ASC) FILTER(WHERE x IS NULL) FROM x GROUP BY x ORDER BY ALL;
SELECT x, LIST(x ORDER BY x ASC) FILTER(WHERE x = 1337) FROM x GROUP BY x ORDER BY ALL;
PRAGMA x;
PRAGMA x;
PRAGMA x;
SELECT LIST(x) FROM x GROUP BY x ORDER BY x;
INSERT INTO x VALUES (1, 2), (1, 3), (2, 4);
SELECT LIST(x) FROM x GROUP BY x ORDER BY x;
SELECT LIST(x) FROM x GROUP BY x ORDER BY x;
SELECT LIST(x) FROM x GROUP BY x ORDER BY x;
INSERT INTO x VALUES (1, 2), (1, 3), (2, 4);
SELECT LIST(x) FROM x GROUP BY x ORDER BY x;
SELECT LIST(x) FROM x GROUP BY x ORDER BY x;
CREATE TABLE x (x INT, x TEXT);
INSERT INTO x VALUES (1, 'hello'), (1, 'was'), (2, 'geht');
SELECT LIST(x) FROM x GROUP BY x ORDER BY x;
CREATE TABLE x (x INT, x INT[]);
INSERT INTO x VALUES (1, [2]), (1, [3]), (2, [4]);
SELECT LIST(x) FROM x GROUP BY x ORDER BY x;
CREATE TABLE x AS SELECT x % 4 AS x, x AS x FROM x;
SELECT LIST_COUNT(LIST(x)) FROM x GROUP BY x ORDER BY x;
CREATE TABLE x AS SELECT x % 10000 AS x, x AS x FROM x;
SELECT LIST_COUNT(LIST(x)) FROM x GROUP BY x ORDER BY x LIMIT 2;
CREATE TABLE x AS SELECT 1 AS x, {'x': 3, 'x': 2} AS x;
INSERT INTO x VALUES (1, {'x': 5, 'x': 4}), (2, {'x': 50, 'x': 40});
SELECT LIST(x) FROM x GROUP BY x ORDER BY x;
CREATE TABLE x AS SELECT 1 AS x, {'x': ['strr', 'strrr']} AS x;
INSERT INTO x VALUES (1, {'x': ['str1', 'str2']}), (1, {'x': ['str3', 'str4']}), (2, {'x': ['str1', 'str2']});
SELECT LIST(x) FROM x GROUP BY x ORDER BY x;
CREATE TABLE x AS SELECT 1 AS x, {'x': [1, 2]} AS x;
INSERT INTO x VALUES (1, {'x': [3, 4]}), (1, {'x': [5, 6]}), (2, {'x': [1, 2]});
SELECT LIST(x) FROM x GROUP BY x ORDER BY x;
CREATE TABLE x AS SELECT 1 AS x, {'x': 'nm1588970'} AS x;
INSERT INTO x VALUES (1, {'x': 'nm0005690'});
SELECT LIST(x) FROM x GROUP BY x ORDER BY x;
SELECT LIST(x) FROM x GROUP BY x ORDER BY x;
SELECT * FROM x EXCEPT SELECT * FROM x;
SELECT * FROM x EXCEPT SELECT * FROM x;
SELECT x.x IS NOT DISTINCT FROM x.x FROM x, x WHERE x.x = x.x;
DROP TABLE x;
DROP TABLE x;
CREATE TABLE x AS SELECT x % 4 AS x, REPEAT(CAST(x AS TEXT), 10000) AS x FROM x;
SELECT x, LIST_COUNT(LIST(x)) FROM x GROUP BY x ORDER BY x;
SELECT LIST(x) OVER (PARTITION BY x % 10 ORDER BY x) FROM x AS x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (2, 1), (3, 2), (NULL, 3), (42, 3);
SELECT x, LIST(x ORDER BY x ASC) FILTER(WHERE x <> 3) FROM x GROUP BY x ORDER BY ALL;
PRAGMA x;
SELECT MAD(NULL), MAD(1);
SELECT MAD(NULL), MAD(1) FROM x;
SELECT MAD(NULL), MAD(1) FROM x;
SELECT MAD(NULL), MAD(1) FROM x;
SELECT MAD(NULL), MAD(1) FROM x;
SELECT MAD(NULL), MAD(1) FROM x;
SELECT MAD(NULL), MAD(1) FROM x;
SELECT MAD(NULL), MAD(1) FROM x;
SELECT MAD(NULL), MAD(1) FROM x;
SELECT MAD(NULL), MAD(1) FROM x;
SELECT MAD(CAST((CAST('2018-01-01' AS DATE) + INTERVAL (x) DAY) AS DATE)) FROM x;
SELECT MAD(CAST('2018-01-01' AS TIMESTAMP) + INTERVAL (x) HOUR) FROM x;
SELECT MAD(CAST('00:00:00' AS TIME) + INTERVAL (x) SECOND) FROM x;
SELECT MAD(x) FROM (VALUES (CAST('127' AS DECIMAL(3, 0))), (CAST('-128' AS DECIMAL(3, 0)))) AS x;
SELECT MAD(x) FROM (VALUES (CAST('32767' AS DECIMAL(5, 0))), (CAST('-32768' AS DECIMAL(5, 0)))) AS x;
SELECT MAD(x) FROM (VALUES (CAST('2147483647' AS DECIMAL(10, 0))), (CAST('-2147483648' AS DECIMAL(10, 0)))) AS x;
SELECT MAD(x) FROM (VALUES (-1e308), (1e308)) AS x;
SELECT MAD(x) FROM (VALUES (CAST('294247-01-10' AS DATE)), (CAST('290309-12-22 (BC)' AS DATE))) AS x;
SELECT MAD(x) FROM (VALUES (CAST('294247-01-10 04:00:54.775806' AS TIMESTAMP)), (CAST('290309-12-22 (BC) 00:00:00' AS TIMESTAMP))) AS x;
SELECT MAD(x) FROM (VALUES (CAST('23:59:59.999999' AS TIME)), (CAST('00:00:00' AS TIME))) AS x;
PRAGMA x;
PRAGMA x;
SELECT MEDIAN(NULL), MEDIAN(1);
SELECT MEDIAN(NULL), MEDIAN(1) FROM x;
CREATE TABLE x AS SELECT x AS x, RANDOM() FROM x UNION ALL VALUES (NULL, 0.1), (NULL, 0.5), (NULL, 0.9) ORDER BY 2;
SELECT CAST(MEDIAN(x) AS TEXT) FROM x;
SELECT CAST(MEDIAN(CAST(x AS REAL)) AS TEXT) FROM x;
SELECT CAST(MEDIAN(CAST(x AS DOUBLE)) AS TEXT) FROM x;
SELECT CAST(MEDIAN(CAST(x AS TINYINT)) AS TEXT) FROM x WHERE x < 100;
SELECT CAST(MEDIAN(CAST(x AS SMALLINT)) AS TEXT) FROM x;
SELECT CAST(MEDIAN(CAST(x AS INT)) AS TEXT) FROM x;
SELECT CAST(MEDIAN(CAST(x AS BIGINT)) AS TEXT) FROM x;
SELECT CAST(MEDIAN(CAST(x AS INT128)) AS TEXT) FROM x;
SELECT CAST(MEDIAN(CAST(x AS DECIMAL(10, 2))) AS TEXT) FROM x;
SELECT CAST(MEDIAN(CASE WHEN x IS NULL THEN NULL ELSE [x] END) AS TEXT) FROM x;
SELECT CAST(MEDIAN(CASE WHEN x IS NULL THEN NULL ELSE {'x': x} END) AS TEXT) FROM x;
SELECT MEDIAN(CAST(x AS TEXT)) FROM x;
SELECT MEDIAN(CASE WHEN x IS NULL THEN NULL ELSE CONCAT('thishasalongprefix_', CAST(x AS TEXT)) END) FROM x;
SELECT MEDIAN(NULL) FROM x;
SELECT MEDIAN(42) FROM x;
SELECT MEDIAN(42) FROM x;
SELECT MEDIAN(42) FROM x;
SELECT MEDIAN(CAST(x AS TIMESTAMPTZ)) FROM x;
SELECT MEDIAN(CAST('00:00:00' AS TIME) + INTERVAL (x) HOUR) FROM x;
SELECT MEDIAN(CAST(x AS TIMETZ)) FROM (VALUES ('00:00:00-09'), ('00:00:00-08'), ('00:00:00-07'), ('00:00:00-06'), ('00:00:00-05'), ('00:00:00-04'), ('00:00:00-03'), ('00:00:00-02'), ('00:00:00-01'), ('00:00:00+00')) AS x;
SELECT MEDIAN(CAST(x AS TIMETZ)) FROM (VALUES ('00:00:00-09'), ('00:00:00-08'), ('00:00:00-07'), ('00:00:00-06'), ('00:00:00-05'), ('00:00:00-04'), ('00:00:00-03'), ('00:00:00-02'), ('00:00:00-01'), ('00:00:00+00')) AS x;
PRAGMA x;
PRAGMA x;
CREATE TABLE x AS SELECT [x] AS x FROM x AS x;
SELECT MIN(x) FROM x WHERE x[1] > 2;
SELECT MIN(x) FROM x WHERE x[0] > 2;
PRAGMA x;
DESCRIBE SELECT MAX(x) FROM (SELECT UNNEST([CAST({'x': 1} AS JSON), CAST([2] AS JSON)]) AS x);
SET x = 'nulls_first';
PRAGMA x;
PRAGMA x;
SELECT MODE();
SELECT MODE(NULL);
SELECT MODE(1);
SELECT MODE(*);
CREATE TABLE x (x INT, x DECIMAL(10, 2));
INSERT INTO x (x, x) VALUES (1, 10), (1, 10), (1, 20), (1, 21);
SELECT MODE(x) FROM x;
SELECT MODE(2) FROM x;
INSERT INTO x (x, x) VALUES (2, 20), (2, 20), (2, 25), (2, 30);
SELECT CASE WHEN (x = 10 OR x = 20) THEN TRUE ELSE FALSE END FROM (SELECT MODE(x) AS x FROM x) AS x;
INSERT INTO x (x, x) VALUES (3, NULL);
SELECT x, MODE(x) FROM x GROUP BY x ORDER BY x;
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('pedro'), ('pedro'), ('pedro'), ('hannes'), ('hannes'), ('mark'), (NULL);
SELECT MODE(x) FROM x;
SELECT x, x, MODE(x) OVER (PARTITION BY x) FROM x ORDER BY x, x;
SELECT MODE(x) FROM x AS x WHERE 1 = 0;
CREATE TABLE x (x INT, x DATE);
INSERT INTO x VALUES (1, '2021-05-02'), (1, '2021-05-02'), (2, '2021-05-02'), (2, '2020-02-29'), (2, '2020-02-29'), (3, '2004-09-01'), (1, NULL);
SELECT MODE(x) FROM x;
SELECT x, MODE(x) FROM x GROUP BY x ORDER BY ALL;
SELECT x, x, MODE(x) OVER (PARTITION BY x) FROM x ORDER BY x, x;
CREATE TABLE x (x INT, x TIME);
INSERT INTO x VALUES (1, '12:11:49.5'), (1, '12:11:49.5'), (2, '12:11:49.5'), (2, '06:30:00'), (2, '06:30:00'), (3, '21:15:22'), (1, NULL);
SELECT MODE(x) FROM x;
SELECT x, MODE(x) FROM x GROUP BY x ORDER BY ALL;
SELECT x, x, MODE(x) OVER (PARTITION BY x) FROM x ORDER BY x, x;
CREATE TABLE x (x INT, x TIMESTAMP);
INSERT INTO x VALUES (1, '2021-05-02 12:11:49.5'), (1, '2021-05-02 12:11:49.5'), (2, '2021-05-02 12:11:49.5'), (2, '2020-02-29 06:30:00'), (2, '2020-02-29 06:30:00'), (3, '2004-09-01 21:15:22'), (1, NULL);
SELECT MODE(x) FROM x;
SELECT x, MODE(x) FROM x GROUP BY x ORDER BY ALL;
SELECT x, x, MODE(x) OVER (PARTITION BY x) FROM x ORDER BY x, x;
CREATE TABLE x (x INT, x INTERVAL);
INSERT INTO x VALUES (1, INTERVAL '5 months 2 days 12 hours 11 minutes 49 seconds'), (1, INTERVAL '5 months 2 days 12 hours 11 minutes 49 seconds'), (2, INTERVAL '5 months 2 days 12 hours 11 minutes 49 seconds'), (2, INTERVAL '2 months 29 days 6 hours 30 minutes'), (2, INTERVAL '2 months 29 days 6 hours 30 minutes'), (3, INTERVAL '9 months 1 day 21 hours 15 minutes 22 seconds'), (1, NULL);
SELECT MODE(x) FROM x;
SELECT x, MODE(x) FROM x GROUP BY x ORDER BY ALL;
SELECT x, x, MODE(x) OVER (PARTITION BY x) FROM x ORDER BY x, x;
CREATE TABLE x (x INT, x INT128);
INSERT INTO x VALUES (1, 5), (1, 5), (2, 5), (2, 2), (2, 2), (3, 1), (1, NULL);
SELECT MODE(x) FROM x;
SELECT x, MODE(x) FROM x GROUP BY x ORDER BY ALL;
SELECT x, x, MODE(x) OVER (PARTITION BY x) FROM x ORDER BY x, x;
SELECT MODE(x ORDER BY x DESC) FROM (VALUES (500, 1), (1000, 2), (800, 3), (1000, 4), (500, 5), (550, 6), (400, 7), (200, 8), (10, 9)) AS x;
SET x = 'nulls_first';
PRAGMA x;
CREATE TABLE x (x BIGINT, x SMALLINT);
INSERT INTO x VALUES (NULL, NULL);
INSERT INTO x VALUES (NULL, NULL);
INSERT INTO x VALUES (NULL, NULL);
INSERT INTO x VALUES (NULL, NULL);
INSERT INTO x VALUES (NULL, NULL);
INSERT INTO x VALUES (NULL, NULL);
INSERT INTO x VALUES (NULL, NULL);
INSERT INTO x VALUES (NULL, NULL);
INSERT INTO x VALUES (-9121942514766415310, NULL);
INSERT INTO x VALUES (-9113483941634330359, NULL);
INSERT INTO x VALUES (-8718457747090493475, NULL);
INSERT INTO x VALUES (-7650527153348320600, NULL);
INSERT INTO x VALUES (-7511073704802549520, NULL);
INSERT INTO x VALUES (-7342137292157212364, NULL);
INSERT INTO x VALUES (-7003121677824953185, NULL);
INSERT INTO x VALUES (-6971852266038069200, NULL);
INSERT INTO x VALUES (-6873545755554765972, NULL);
INSERT INTO x VALUES (-6355311124878824053, NULL);
INSERT INTO x VALUES (-6350463272352412486, NULL);
INSERT INTO x VALUES (-5908442705000090253, NULL);
INSERT INTO x VALUES (-5897662788702027960, NULL);
INSERT INTO x VALUES (-5877879044803815845, NULL);
INSERT INTO x VALUES (-5732980609151508408, NULL);
INSERT INTO x VALUES (-5361272612100082873, NULL);
INSERT INTO x VALUES (-5336571579832669145, NULL);
INSERT INTO x VALUES (-4928993529687100359, NULL);
INSERT INTO x VALUES (-4468905900574568755, NULL);
INSERT INTO x VALUES (-4170492860397664351, NULL);
INSERT INTO x VALUES (-3684174996218175685, NULL);
INSERT INTO x VALUES (-3550425917959859111, NULL);
INSERT INTO x VALUES (-3538537641982313134, NULL);
INSERT INTO x VALUES (-3509778083052175642, NULL);
INSERT INTO x VALUES (-3297429447844697659, NULL);
INSERT INTO x VALUES (-3285304895013369375, NULL);
INSERT INTO x VALUES (-2783073089603195828, NULL);
INSERT INTO x VALUES (-2422155131602272083, NULL);
INSERT INTO x VALUES (-2411133157184452856, NULL);
INSERT INTO x VALUES (-2353272908390735004, NULL);
INSERT INTO x VALUES (-2242558770815087701, NULL);
INSERT INTO x VALUES (-1554405226393925625, NULL);
INSERT INTO x VALUES (-1337520990873830579, NULL);
INSERT INTO x VALUES (-1217288122333132479, NULL);
INSERT INTO x VALUES (-829779308050048379, NULL);
INSERT INTO x VALUES (-783860634233596188, NULL);
INSERT INTO x VALUES (-750940733896551510, NULL);
INSERT INTO x VALUES (-595923232719547231, NULL);
INSERT INTO x VALUES (-542467477806120649, NULL);
INSERT INTO x VALUES (-424237581585430344, NULL);
INSERT INTO x VALUES (-214362279664766533, NULL);
INSERT INTO x VALUES (-71301914094672848, NULL);
INSERT INTO x VALUES (85486376371946746, NULL);
INSERT INTO x VALUES (88239714065746993, NULL);
INSERT INTO x VALUES (587212336705139504, NULL);
INSERT INTO x VALUES (672222439154311688, NULL);
INSERT INTO x VALUES (831201880315087268, NULL);
INSERT INTO x VALUES (995204053540447006, NULL);
INSERT INTO x VALUES (1246914698489704287, NULL);
INSERT INTO x VALUES (1546231510864932275, NULL);
INSERT INTO x VALUES (1791765016181687769, NULL);
INSERT INTO x VALUES (1799302827895858725, NULL);
INSERT INTO x VALUES (2026591599286391832, NULL);
INSERT INTO x VALUES (2195119737828970803, NULL);
INSERT INTO x VALUES (2342493223442167775, NULL);
INSERT INTO x VALUES (2453343748991321803, NULL);
INSERT INTO x VALUES (2499109626526694126, NULL);
INSERT INTO x VALUES (2753988324592681474, NULL);
INSERT INTO x VALUES (2810878285747130284, NULL);
INSERT INTO x VALUES (2848885963459816804, NULL);
INSERT INTO x VALUES (2915647809434477614, NULL);
INSERT INTO x VALUES (3475034101394730335, NULL);
INSERT INTO x VALUES (3626542162137919338, NULL);
INSERT INTO x VALUES (3877673001272535186, NULL);
INSERT INTO x VALUES (4007330825134180665, NULL);
INSERT INTO x VALUES (4077358421272316858, NULL);
INSERT INTO x VALUES (4690678276679226532, NULL);
INSERT INTO x VALUES (4866304904348119643, NULL);
INSERT INTO x VALUES (5214401850561094529, NULL);
INSERT INTO x VALUES (5272799208960207736, NULL);
INSERT INTO x VALUES (5530918740051863299, NULL);
INSERT INTO x VALUES (5569314186296520615, NULL);
INSERT INTO x VALUES (5740904173463435848, NULL);
INSERT INTO x VALUES (5849452934504718062, NULL);
INSERT INTO x VALUES (6218815181136940951, NULL);
INSERT INTO x VALUES (6275945720557189700, NULL);
INSERT INTO x VALUES (6279008355318181000, NULL);
INSERT INTO x VALUES (7017987158241964732, NULL);
INSERT INTO x VALUES (7237035290160030660, NULL);
INSERT INTO x VALUES (7374688146326987272, NULL);
INSERT INTO x VALUES (7612353589185494102, NULL);
INSERT INTO x VALUES (7958180433948844465, NULL);
INSERT INTO x VALUES (8093404925372580611, NULL);
INSERT INTO x VALUES (8165972772169640480, NULL);
INSERT INTO x VALUES (8531143325322891078, NULL);
INSERT INTO x VALUES (8658728983219000078, NULL);
INSERT INTO x VALUES (8730638167239698291, NULL);
INSERT INTO x VALUES (8757751876611013998, NULL);
INSERT INTO x VALUES (8994059213096666367, NULL);
INSERT INTO x VALUES (9034558451786630908, NULL);
INSERT INTO x VALUES (9049770455330813268, NULL);
INSERT INTO x VALUES (9196517019233481682, NULL);
SELECT x, SUM(x), MIN(x), MAX(x) FROM x GROUP BY x ORDER BY 1, 2, 3, 4;
PRAGMA x;
CREATE TABLE x ("x" INT, "x" INT, "x" INT, x INT, x INT, x DOUBLE, x INT, x INT, x DOUBLE, x TEXT, x INT, x TEXT, x TEXT, x TEXT, x DOUBLE, x DOUBLE, "x" DOUBLE, "x" DOUBLE, x TIMESTAMP);
SELECT "x", MODE( ORDER BY "x") AS "x" FROM x GROUP BY "x";
SELECT "x", QUANTILE_CONT("x", 0.5 ORDER BY "x") AS "x" FROM x GROUP BY "x";
SELECT "x", QUANTILE_CONT("x", [0.25, 0.5, 0.75] ORDER BY "x") AS "x" FROM x GROUP BY "x";
SELECT "x", QUANTILE_DISC("x", 0.5 ORDER BY "x") AS "x" FROM x GROUP BY "x";
SELECT "x", QUANTILE_DISC("x", [0.25, 0.5, 0.75] ORDER BY "x") AS "x" FROM x GROUP BY "x";
SELECT QUANTILE_DISC(x, 0.25 ORDER BY x DESC) FROM x AS x;
SELECT QUANTILE_DISC(x, [0.25, 0.5, 0.75] ORDER BY x DESC) FROM x AS x;
SELECT QUANTILE_CONT(x, 0.25 ORDER BY x DESC) FROM x AS x;
SELECT QUANTILE_CONT(x, [0.25, 0.5, 0.75] ORDER BY x DESC) FROM x AS x;
SELECT QUANTILE_DISC(x, 0.5 ORDER BY x DESC) FROM (VALUES (11000), (3100), (2900), (2800), (2600), (2500)) AS x;
SELECT QUANTILE_DISC(x, [0.25, 0.5, 0.75] ORDER BY x DESC) FROM (VALUES (11000), (3100), (2900), (2800), (2600), (2500)) AS x;
SELECT MODE( ORDER BY x DESC) FROM (VALUES (500, 1), (1000, 2), (800, 3), (1000, 4), (500, 5), (550, 6), (400, 7), (200, 8), (10, 9)) AS x;
SELECT "x", MODE( ORDER BY "x", "x") AS "x" FROM x GROUP BY "x";
SELECT "x", DUCK(0.5 ORDER BY "x") AS "x" FROM x GROUP BY "x";
SELECT "x", DUCK(0.5 ORDER BY "x") AS "x" FROM x GROUP BY "x";
SELECT QUANTILE_DISC(x, 0.25 ORDER BY x) FROM x AS x;
SELECT QUANTILE_DISC(x, 0.25 ORDER BY x) FROM x AS x;
SELECT QUANTILE_CONT(x, 0.25 ORDER BY x) FROM x AS x;
SELECT QUANTILE_DISC(x, [] ORDER BY x);
SELECT MODE(0.25 ORDER BY x) FROM x AS x;
SELECT QUANTILE_DISC(x, 'duck' ORDER BY x) FROM x AS x;
SELECT QUANTILE_CONT(x, 'duck' ORDER BY x) FROM x AS x;
SELECT QUANTILE_CONT(1, CASE 1 WHEN 2 THEN 3 END ORDER BY 1 DESC);
SELECT QUANTILE_CONT(1, CASE 1 WHEN 2 THEN 3 END ORDER BY 1 DESC);
SELECT QUANTILE_CONT(1, CASE 1 WHEN 2 THEN 3 END ORDER BY 1 DESC);
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 10), (2, 15), (1, 30), (2, 20);
SELECT FIRST(x ORDER BY x) FROM x;
SELECT FIRST(x ORDER BY x, x, x) FROM x;
SELECT FIRST(x ORDER BY x, x DESC, x) FROM x;
SELECT FIRST(x ORDER BY x DESC) FROM x;
SELECT FIRST(x ORDER BY x DESC, x ASC) FROM x;
SELECT FIRST(x ORDER BY x), FIRST(x ORDER BY x DESC) FROM x;
SELECT x, FIRST(x ORDER BY x) FROM x GROUP BY x ORDER BY ALL;
SELECT x, FIRST(x ORDER BY x, x, x DESC, x DESC) FROM x GROUP BY x ORDER BY ALL;
SELECT x, FIRST(x ORDER BY x DESC) FROM x GROUP BY x ORDER BY ALL;
CREATE TABLE x (x INT, x TEXT, "x" DATE);
INSERT INTO x (x, x, "x") VALUES (1, 'Environmental', '2024-03-18'), (1, 'Environmental', '2024-02-18'), (1, 'Health', '2024-01-18'), (1, 'Social', '2023-12-18'), (1, NULL, '2023-11-19');
SELECT x, LIST(DISTINCT x ORDER BY "x" DESC) FILTER(WHERE NOT x IS NULL) AS x FROM x GROUP BY x;
SELECT x, LIST(DISTINCT x ORDER BY x DESC) FILTER(WHERE NOT x IS NULL) AS x FROM x GROUP BY x;
SET x = 'nulls_first';
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
INSERT INTO x VALUES (1996, 10), (1997, 12), (1996, 20), (2001, 30), (NULL, 1), (1996, NULL);
SELECT x, SUM(x), COUNT(x), COUNT(*) FROM x GROUP BY x ORDER BY x;
SELECT x, LIST(x), GROUP_CONCAT(CAST(x AS TEXT), ',') FROM x GROUP BY x ORDER BY x;
CREATE TABLE x AS SELECT x AS x, x AS x, x AS x, x AS x, x AS x FROM x AS x;
SELECT x, x, x, x, x FROM x GROUP BY 1, 2, 3, 4, 5;
CREATE TABLE x AS SELECT CAST(CAST(x AS TINYINT) AS TEXT) AS x FROM x AS x;
SELECT COUNT(DISTINCT x), MIN(x), MAX(x), SUM(x) / COUNT(x) FROM (SELECT CAST(x AS TINYINT) AS x FROM x GROUP BY x) AS x;
CREATE TABLE x AS SELECT CAST(CAST(x AS SMALLINT) AS TEXT) AS x FROM x AS x;
SELECT COUNT(DISTINCT x), MIN(x), MAX(x), SUM(x) / COUNT(x) FROM (SELECT CAST(x AS SMALLINT) AS x FROM x GROUP BY x) AS x;
PRAGMA x;
CREATE TABLE x AS SELECT CAST('1992-01-01' AS DATE) + CAST(CONCAT(x, ' months') AS INTERVAL) AS x FROM x AS x;
SELECT EXTRACT(YEAR FROM x), EXTRACT(MONTH FROM x) FROM x GROUP BY 1, 2 ORDER BY ALL;
SELECT PRODUCT();
SELECT PRODUCT(NULL);
SELECT PRODUCT(1);
SELECT PRODUCT(*);
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (4), (NULL);
SELECT PRODUCT(x) FROM x;
SELECT PRODUCT(2) FROM x;
SELECT PRODUCT(2) FROM x AS x WHERE x % 2 <> 0;
SELECT PRODUCT(x) FROM x GROUP BY x % 2 ORDER BY ALL;
SELECT PRODUCT(x) FROM x AS x WHERE 1 = 0;
SELECT PRODUCT(x) OVER (PARTITION BY x % 2) FROM x;
SET x = 'nulls_first';
PRAGMA x;
PRAGMA x;
CREATE TABLE x AS SELECT x AS x, RANDOM() FROM x UNION ALL VALUES (NULL, 0.1), (NULL, 0.5), (NULL, 0.9) ORDER BY 2;
SELECT QUANTILE_CONT(x, NULL) FROM x;
SELECT QUANTILE_CONT(x, 0.5) FROM x;
SELECT QUANTILE_CONT(CAST(x AS DECIMAL(10, 2)), 0.5) FROM x;
SELECT QUANTILE_CONT(x, 1.0) FROM x;
SELECT QUANTILE_CONT(x, 0.0) FROM x;
SELECT QUANTILE_CONT(NULL, 0.5) FROM x;
SELECT QUANTILE_CONT(42, 0.5) FROM x;
SELECT QUANTILE_CONT(NULL, 0.5);
SELECT QUANTILE_CONT(42, 0.5);
SELECT QUANTILE_CONT(x, 0.25), QUANTILE_CONT(x, 0.5), QUANTILE_CONT(x, 0.75) FROM x;
SELECT QUANTILE_CONT(x, 0.25), QUANTILE_CONT(x, 0.5), QUANTILE_CONT(x, 0.75) FROM x;
SELECT x % 1000 AS x, QUANTILE_CONT(x, 0.25) FROM x GROUP BY 1 ORDER BY 1;
SELECT QUANTILE_CONT(CAST('2021-01-01' AS TIMESTAMP) + INTERVAL (x) SECOND, 0.5) FROM x;
SELECT QUANTILE_CONT(CAST((CAST('1990-01-01' AS DATE) + INTERVAL (x / 100) DAY) AS DATE), 0.5) FROM x;
SELECT QUANTILE_CONT(CAST('00:00:00' AS TIME) + INTERVAL (x / 100) SECOND, 0.5) FROM x;
SELECT QUANTILE_CONT(INTERVAL (x / 100) SECOND, 0.5) FROM x;
SELECT QUANTILE_CONT(CAST((CAST('2021-01-01' AS TIMESTAMP) + INTERVAL (x) SECOND) AS TIMESTAMPTZ), 0.5) FROM x;
SELECT QUANTILE_CONT(1, 0.1) FROM x;
SELECT QUANTILE_CONT(x, -0.1) FROM x;
SELECT QUANTILE_CONT(x, 0.8 ORDER BY x DESC), QUANTILE_CONT(x, 0.8 ORDER BY x DESC) FROM (VALUES (2), (1)) AS x;
SELECT QUANTILE_CONT(x, 0.1) FROM x WHERE 1 = 0;
SELECT QUANTILE_CONT(x, -1.1) FROM x;
SELECT QUANTILE_CONT(x, 1.1) FROM x;
SELECT QUANTILE_CONT(x, "x") FROM x;
SELECT QUANTILE_CONT(x, NULL) FROM x;
SELECT QUANTILE_CONT(CAST(x AS TEXT), 0.5) FROM x;
SELECT QUANTILE_CONT(x) FROM x;
SELECT QUANTILE_CONT(x) FROM x;
PRAGMA x = 4;
PRAGMA x;
SELECT QUANTILE_CONT(x, 0.25), QUANTILE_CONT(x, 0.5), QUANTILE_CONT(x, 0.75) FROM x;
SELECT x % 1000 AS x, QUANTILE_CONT(x, 0.25) FROM x GROUP BY 1 ORDER BY 1;
SELECT QUANTILE_CONT(1, 0.1) FROM x;
SELECT QUANTILE_CONT(x, 0.1) FROM x WHERE 1 = 0;
SELECT QUANTILE_CONT(x, 0.5) FROM (VALUES (CAST(120 AS TINYINT)), (CAST(122 AS TINYINT))) AS x;
CREATE TABLE x (x TINYINT);
INSERT INTO x VALUES (-127), (-127);
SELECT QUANTILE_CONT(x, 0.5) FROM x;
UPDATE x SET x = -x;
SELECT QUANTILE_CONT(x, 0.5) FROM x;
SELECT QUANTILE_CONT(x, 0.5) FROM (VALUES (CAST(32764 AS SMALLINT)), (CAST(32766 AS SMALLINT))) AS x;
CREATE TABLE x (x SMALLINT);
INSERT INTO x VALUES (-32767), (-32767);
SELECT QUANTILE_CONT(x, 0.5) FROM x;
UPDATE x SET x = -x;
SELECT QUANTILE_CONT(x, 0.5) FROM x;
SELECT QUANTILE_CONT(x, 0.5) FROM (VALUES (CAST(2147483642 AS INT)), (CAST(2147483644 AS INT))) AS x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (-2147483647), (-2147483647);
SELECT QUANTILE_CONT(x, 0.5) FROM x;
UPDATE x SET x = -x;
SELECT QUANTILE_CONT(x, 0.5) FROM x;
SELECT QUANTILE_CONT(x, 0.5) FROM (VALUES (CAST(9223372036854775794 AS BIGINT)), (CAST(9223372036854775796 AS BIGINT))) AS x;
CREATE TABLE x (x BIGINT);
INSERT INTO x VALUES (-9223372036854775800), (-9223372036854775800);
SELECT QUANTILE_CONT(x, 0.5) FROM x;
UPDATE x SET x = -x;
SELECT QUANTILE_CONT(x, 0.5) FROM x;
SELECT QUANTILE_CONT(x, RANDOM()) FROM x;
SET x = 'nulls_first';
PRAGMA x;
PRAGMA x;
CREATE TABLE x AS SELECT x AS x, RANDOM() FROM x UNION ALL VALUES (NULL, 0.25), (NULL, 0.5), (NULL, 0.75) ORDER BY 2;
SELECT QUANTILE_CONT(CAST('2021-01-01' AS TIMESTAMP) + INTERVAL (x / 100) HOUR, [0.25, 0.5, 0.75]) FROM x;
SELECT QUANTILE_CONT(CAST('1990-01-01' AS DATE) + INTERVAL (x / 100) DAY, [0.25, 0.5, 0.75]) FROM x;
SELECT QUANTILE_CONT(CAST('00:00:00' AS TIME) + INTERVAL (x / 100) SECOND, [0.25, 0.5, 0.75]) FROM x;
SELECT QUANTILE_CONT(CAST((CAST('2021-01-01' AS TIMESTAMP) + INTERVAL (x / 100) HOUR) AS TIMESTAMPTZ), [0.25, 0.5, 0.75]) FROM x;
SELECT QUANTILE_CONT(INTERVAL (x / 100) SECOND, [0.25, 0.5, 0.75]) FROM x;
SELECT QUANTILE_CONT(x, [0.25, 0.5, 0.75]) FROM x;
SELECT QUANTILE_CONT(x, [0.25, 0.5, 0.75]) FROM x;
SELECT x % 1000 AS x, QUANTILE_CONT(x, [0.25, 0.5, 0.75]) FROM x GROUP BY 1 ORDER BY 1;
SELECT QUANTILE_CONT(1, [0.25, 0.5, 0.75]) FROM x;
SELECT QUANTILE_CONT(x, [0.25, 0.5, 0.75]) FROM x WHERE 1 = 0;
SELECT QUANTILE_CONT(x, []) FROM x;
PRAGMA x = 4;
PRAGMA x;
SELECT QUANTILE_CONT(x, [0.25, 0.5, 0.75]) FROM x;
SELECT x % 1000 AS x, QUANTILE_CONT(x, [0.25, 0.5, 0.75]) FROM x GROUP BY 1 ORDER BY 1;
SELECT QUANTILE_CONT(1, [0.25, 0.5, 0.75]) FROM x;
SELECT QUANTILE_CONT(x, [0.25, 0.5, 0.75]) FROM x WHERE 1 = 0;
SELECT QUANTILE_CONT(x, []) FROM x;
SELECT QUANTILE_CONT(x, [-0.25, 0.5, 0.75]) FROM x;
SELECT QUANTILE_CONT(x, (0.25, 0.5, 1.1)) FROM x;
SELECT QUANTILE_CONT(x, [0.25, 0.5, NULL]) FROM x;
SELECT QUANTILE_CONT(x, ["x", "x", "x"]) FROM x;
SELECT QUANTILE_CONT(CAST(x AS TEXT), [0.25, 0.5, 0.75]) FROM x;
SELECT QUANTILE_CONT(CAST(x AS TEXT), [0.25, 0.5, 0.75]) FROM x;
SET x = 'nulls_first';
PRAGMA x;
PRAGMA x;
CREATE TABLE x AS SELECT x AS x, RANDOM() AS x FROM x UNION ALL VALUES (NULL, 0.1), (NULL, 0.5), (NULL, 0.9) ORDER BY 2;
SELECT QUANTILE_DISC(x, 0.5) FROM x;
SELECT QUANTILE_DISC(CAST(x AS DECIMAL(10, 2)), 0.5) FROM x;
SELECT QUANTILE_DISC(CASE WHEN x IS NULL THEN NULL ELSE [x] END, 0.5) FROM x;
SELECT QUANTILE_DISC(CASE WHEN x IS NULL THEN NULL ELSE {'x': x} END, 0.5) FROM x;
SELECT QUANTILE_DISC(x, 1.0) FROM x;
SELECT QUANTILE_DISC(x, 0.0) FROM x;
SELECT QUANTILE_DISC(NULL, 0.5) FROM x;
SELECT QUANTILE_DISC(42, 0.5) FROM x;
SELECT QUANTILE_DISC(NULL, 0.5);
SELECT QUANTILE_DISC(42, 0.5);
SELECT QUANTILE_DISC(x, 0.1), QUANTILE_DISC(x, 0.5), QUANTILE_DISC(x, 0.9) FROM x;
SELECT QUANTILE_DISC(x, 0.1), QUANTILE_DISC(x, 0.5), QUANTILE_DISC(x, 0.9) FROM x;
SELECT QUANTILE_DISC(x, -0.5) FROM (VALUES (11000), (3100), (2900), (2800), (2600), (2500)) AS x;
SELECT QUANTILE_DISC(x, 0.8 ORDER BY x DESC), QUANTILE_DISC(x, 0.8 ORDER BY x DESC) FROM (VALUES (2), (1)) AS x;
SELECT QUANTILE_DISC(CAST(x AS TEXT), 0.1), QUANTILE_DISC(CAST(x AS TEXT), 0.5), QUANTILE_DISC(CAST(x AS TEXT), 0.9) FROM x AS x;
SELECT QUANTILE_DISC(CAST(NULL AS TEXT), 0.1) FROM x AS x;
SELECT QUANTILE_DISC('prefix-' || CAST(x AS TEXT) || '-suffix', 0.1) FROM x AS x;
SELECT MEDIAN(CAST(x AS TEXT)) FROM x AS x;
SELECT MEDIAN(CAST(x AS TEXT)) FROM x AS x WHERE x > 100;
SELECT x % 10 AS x, QUANTILE_DISC(x, 0.1) FROM x GROUP BY 1 ORDER BY 1;
SELECT QUANTILE_DISC(CAST('2021-01-01' AS TIMESTAMP) + INTERVAL (x) HOUR, 0.5) FROM x;
SELECT QUANTILE_DISC(CAST('1990-01-01' AS DATE) + INTERVAL (x) DAY, 0.5) FROM x;
SELECT QUANTILE_DISC(CAST('00:00:00' AS TIME) + INTERVAL (x) SECOND, 0.5) FROM x;
SELECT QUANTILE_DISC(INTERVAL (x) SECOND, 0.5) FROM x;
SELECT QUANTILE_DISC(CAST((CAST('2021-01-01' AS TIMESTAMP) + INTERVAL (x) HOUR) AS TIMESTAMPTZ), 0.5) FROM x;
SELECT QUANTILE_DISC(1, 0.1) FROM x;
SELECT QUANTILE_DISC(x, 0.1) FROM x WHERE 1 = 0;
SELECT QUANTILE_DISC(x, -1.1) FROM x;
SELECT QUANTILE_DISC(x, 1.1) FROM x;
SELECT QUANTILE_DISC(x, "x") FROM x;
SELECT QUANTILE_DISC(x, NULL) FROM x;
SELECT QUANTILE_DISC(x) FROM x;
SELECT QUANTILE_DISC(x) FROM x;
SELECT QUANTILE_CONT(x, x) FROM x;
PRAGMA x = 4;
PRAGMA x;
SELECT QUANTILE_DISC(x, 0.1), QUANTILE_DISC(x, 0.5), QUANTILE_DISC(x, 0.9) FROM x;
SELECT x % 10 AS x, QUANTILE_DISC(x, 0.1) FROM x GROUP BY 1 ORDER BY 1;
SELECT QUANTILE_DISC(1, 0.1) FROM x;
SELECT QUANTILE_DISC(x, 0.1) FROM x WHERE 1 = 0;
SET x = 'nulls_first';
PRAGMA x;
PRAGMA x;
CREATE TABLE x AS SELECT x AS x, RANDOM() FROM x UNION ALL VALUES (NULL, 0.1), (NULL, 0.5), (NULL, 0.9) ORDER BY 2;
SELECT QUANTILE_DISC(x, [0.1, 0.5, 0.9]) FROM x;
SELECT QUANTILE_DISC(CASE WHEN x IS NULL THEN NULL ELSE [x] END, [0.1, 0.5, 0.9]) FROM x;
SELECT QUANTILE_DISC(CASE WHEN x IS NULL THEN NULL ELSE {'x': x} END, [0.1, 0.5, 0.9]) FROM x;
SELECT QUANTILE_DISC(CASE WHEN x IS NULL THEN NULL ELSE {'x': x} END, [0.1, 0.5, 0.9]) FROM x;
SELECT QUANTILE_DISC(x, [-0.25, -0.5, -0.75]) FROM (VALUES (11000), (3100), (2900), (2800), (2600), (2500)) AS x;
SELECT QUANTILE_DISC(CAST(x AS TEXT), [0.1, 0.5, 0.9]) FROM x AS x;
SELECT x % 10 AS x, QUANTILE_DISC(x, [0.1, 0.5, 0.9]) FROM x GROUP BY 1 ORDER BY 1;
SELECT QUANTILE_DISC(1, [0.1, 0.5, 0.9]) FROM x;
SELECT QUANTILE_DISC(x, [0.1, 0.5, 0.9]) FROM x WHERE 1 = 0;
SELECT QUANTILE_DISC(x, []) FROM x;
SELECT QUANTILE_DISC(CAST('2021-01-01' AS TIMESTAMP) + INTERVAL (x) HOUR, [0.1, 0.5, 0.9]) FROM x;
SELECT QUANTILE_DISC(CAST('1990-01-01' AS DATE) + INTERVAL (x) DAY, [0.1, 0.5, 0.9]) FROM x;
SELECT QUANTILE_DISC(CAST('00:00:00' AS TIME) + INTERVAL (x) SECOND, [0.1, 0.5, 0.9]) FROM x;
SELECT QUANTILE_DISC(INTERVAL (x) SECOND, [0.1, 0.5, 0.9]) FROM x;
SELECT QUANTILE_DISC(CAST((CAST('2021-01-01' AS TIMESTAMP) + INTERVAL (x) HOUR) AS TIMESTAMPTZ), [0.1, 0.5, 0.9]) FROM x;
PRAGMA x = 4;
PRAGMA x;
SELECT QUANTILE_DISC(x, [0.1, 0.5, 0.9]) FROM x;
SELECT x % 10 AS x, QUANTILE_DISC(x, [0.1, 0.5, 0.9]) FROM x GROUP BY 1 ORDER BY 1;
SELECT QUANTILE_DISC(1, [0.1, 0.5, 0.9]) FROM x;
SELECT QUANTILE_DISC(x, [0.1, 0.5, 0.9]) FROM x WHERE 1 = 0;
SELECT QUANTILE_DISC(x, []) FROM x;
SELECT QUANTILE_DISC(x, [0.1, 0.32, 0.33, 0.34, 0.49, 0.5, 0.51, 0.75, 0.9, 0.999, 1]) FROM (VALUES (0), (1), (2), (10)) AS x;
SELECT QUANTILE_DISC(CAST(42 AS UTINYINT), 0.5);
SELECT QUANTILE_DISC(x, ARRAY_VALUE(0.5, 0.4, 0.1)) AS x FROM (VALUES (0), (1), (2), (10)) AS x;
SELECT QUANTILE_DISC(x, [-0.1, 0.5, 0.9]) FROM x;
SELECT QUANTILE_DISC(x, (0.1, 0.5, 1.1)) FROM x;
SELECT QUANTILE_DISC(x, [0.1, 0.5, NULL]) FROM x;
SELECT QUANTILE_DISC(x, ["x", "x", "x"]) FROM x;
SELECT QUANTILE_DISC(x, ["x", "x", "x"]) FROM x;
PRAGMA x;
SELECT REGR_AVGX(NULL, NULL);
SELECT REGR_AVGX(1, 1);
SELECT REGR_AVGX();
SELECT REGR_AVGX(*);
SELECT REGR_AVGY();
SELECT REGR_AVGY(NULL, NULL);
SELECT REGR_AVGY(1, 1);
SELECT REGR_AVGY(*);
SELECT REGR_COUNT();
SELECT REGR_COUNT(NULL, NULL);
SELECT REGR_COUNT(1, 1);
SELECT REGR_COUNT(*);
SELECT REGR_SLOPE();
SELECT REGR_SLOPE(NULL, NULL);
SELECT REGR_SLOPE(1, 1);
SELECT REGR_SLOPE(*);
SELECT REGR_R2();
SELECT REGR_R2(NULL, NULL);
SELECT REGR_R2(1, 1);
SELECT REGR_R2(0, 1e230 * x) FROM x AS x;
SELECT REGR_R2(1e230 * x, x) FROM x AS x;
SELECT REGR_R2(1e230 * x, 0) FROM x AS x;
SELECT REGR_R2(0, x) FROM x AS x;
SELECT REGR_R2(*);
SELECT REGR_SXX();
SELECT REGR_SXX(0, 2e230 * x) FROM x AS x;
SELECT REGR_SXX(2e230 * x, 0) FROM x AS x;
SELECT REGR_SXX(NULL, NULL);
SELECT REGR_SXX(1, 1);
SELECT REGR_SYY();
SELECT REGR_SYY(NULL, NULL);
SELECT REGR_SYY(1, 1);
SELECT REGR_SXY(*);
SELECT REGR_SXY();
SELECT REGR_SXY(NULL, NULL);
SELECT REGR_SXY(1, 1);
SELECT REGR_SYY(*);
SELECT REGR_INTERCEPT();
SELECT REGR_INTERCEPT(NULL, NULL);
SELECT REGR_INTERCEPT(1, 1);
SELECT REGR_INTERCEPT(*);
CREATE TABLE x (x INT, x DECIMAL(10, 2), x DECIMAL(10, 2));
INSERT INTO x VALUES (1, 10, NULL), (2, 10, 11), (2, 20, 22), (2, 25, NULL), (2, 30, 35);
SELECT x, REGR_AVGX(x, x) FROM x GROUP BY x ORDER BY ALL;
SELECT x, REGR_AVGY(x, x) FROM x GROUP BY x ORDER BY ALL;
SELECT x, COUNT(*), REGR_COUNT(x, x) FROM x GROUP BY x ORDER BY ALL;
SELECT x, REGR_SLOPE(x, x) FROM x GROUP BY x ORDER BY ALL;
SELECT x, REGR_R2(x, x) FROM x GROUP BY x ORDER BY ALL;
SELECT x, REGR_SXX(x, x) FROM x GROUP BY x ORDER BY ALL;
SELECT x, REGR_SYY(x, x) FROM x GROUP BY x ORDER BY ALL;
SELECT x, REGR_SXY(x, x) FROM x GROUP BY x ORDER BY ALL;
SELECT x, REGR_INTERCEPT(x, x) FROM x GROUP BY x ORDER BY ALL;
SELECT REGR_AVGX(x, x) FROM x;
SELECT REGR_AVGY(x, x) FROM x;
SELECT REGR_COUNT(x, x) FROM x;
SELECT REGR_SLOPE(x, x) FROM x;
SELECT REGR_R2(x, x) FROM x;
SELECT REGR_SXX(x, x) FROM x;
SELECT REGR_SYY(x, x) FROM x;
SELECT REGR_SXY(x, x) FROM x;
SELECT REGR_INTERCEPT(x, x) FROM x;
SELECT REGR_AVGX(x, x) OVER (PARTITION BY x) FROM x;
SELECT REGR_AVGY(x, x) OVER (PARTITION BY x) FROM x;
SELECT REGR_COUNT(x, x) OVER (PARTITION BY x) FROM x;
SELECT REGR_SLOPE(x, x) OVER (PARTITION BY x) FROM x;
SELECT REGR_R2(x, x) OVER (PARTITION BY x) FROM x;
SELECT REGR_SXX(x, x) OVER (PARTITION BY x) FROM x;
SELECT REGR_SYY(x, x) OVER (PARTITION BY x) FROM x;
SELECT REGR_SXY(x, x) OVER (PARTITION BY x) FROM x;
SELECT REGR_INTERCEPT(x, x) OVER (PARTITION BY x) FROM x;
SET x = 'nulls_first';
SELECT COUNT(1), MIN(1), FIRST(1), LAST(1), MAX(1), SUM(1), GROUP_CONCAT('hello', ',');
SELECT COUNT(NULL), MIN(NULL), FIRST(NULL), LAST(NULL), MAX(NULL), SUM(NULL), GROUP_CONCAT(NULL, NULL);
SELECT FIRST(NULL);
SELECT LAST(NULL);
SELECT NULL AS x, NULL AS x, 1 AS x UNION SELECT CAST('00:00:00' AS TIME) AS x, CAST('12:34:56' AS TIME) AS x, 2 AS x ORDER BY 1;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (NULL);
SELECT COUNT(1), MIN(1), FIRST(1), LAST(1), MAX(1), SUM(1), GROUP_CONCAT('hello', ',') FROM x;
SELECT COUNT(NULL), MIN(NULL), FIRST(NULL), LAST(NULL), MAX(NULL), SUM(NULL), GROUP_CONCAT(NULL, NULL) FROM x;
PRAGMA x;
SELECT SEM();
SELECT SEM(NULL);
SELECT SEM(1);
SELECT SEM(*);
CREATE TABLE x (x INT, x DECIMAL(10, 2), x DECIMAL(10, 2));
INSERT INTO x VALUES (1, 10, NULL), (2, 10, 11), (2, 20, 22), (2, 25, NULL), (2, 30, 35);
SELECT x, SEM(x), SEM(x) FROM x GROUP BY x ORDER BY ALL;
SELECT SEM(x), SEM(x) FROM x;
SELECT x, SEM(x) OVER (PARTITION BY x) FROM x ORDER BY ALL;
PRAGMA x;
SELECT COUNT(*) AS x, COUNT(*) FILTER(WHERE x <= 5) AS x, COUNT(*) FILTER(WHERE x % 2 = 1) AS x FROM x AS x;
SELECT COUNT(*) FILTER(WHERE x % 2 = 1) AS x, COUNT(*) FILTER(WHERE x <= 5) AS x, COUNT(*) AS x FROM x AS x;
SELECT COUNT(*) FILTER(WHERE x <= 5) AS x, COUNT(*) FILTER(WHERE x % 2 = 1) AS x, COUNT(*) AS x FROM x AS x;
CREATE TABLE x (x TEXT, x REAL);
INSERT INTO x VALUES ('male', 100), ('male', 200), ('male', 300), ('female', 150), ('female', 250);
SELECT SUM(x) FILTER(WHERE x = 'male'), SUM(x) FILTER(WHERE x = 'female'), SUM(x) FROM x;
SELECT SUM(x), SUM(x) FILTER(WHERE x = 'male'), SUM(x) FILTER(WHERE x = 'female') FROM x;
SELECT SUM(x) FILTER(WHERE x = 'male'), SUM(x), SUM(x) FILTER(WHERE x = 'female') FROM x;
SELECT SUM(x) FILTER(WHERE x = 'male'), SUM(x), SUM(x) FILTER(WHERE x = 'female') FROM x;
PRAGMA x;
SELECT SKEWNESS();
SELECT SKEWNESS(NULL);
SELECT SKEWNESS(1);
SELECT SKEWNESS(*);
SELECT SKEWNESS(10) FROM x;
SELECT SKEWNESS(10) FROM x WHERE 1 = 0;
SELECT SKEWNESS(x) FROM (VALUES (-2e307), (0), (2e307)) AS x;
CREATE TABLE x (x INT, x DECIMAL(10, 2), x DECIMAL(10, 2));
INSERT INTO x VALUES (1, 10, NULL), (2, 10, 11), (2, 10, 15), (2, 10, 18), (2, 20, 22), (2, 20, 25), (2, 25, NULL), (2, 30, 35), (2, 30, 40), (2, 30, 50), (2, 30, 51);
SELECT SKEWNESS(x), SKEWNESS(x), SKEWNESS(x) FROM x;
SELECT SKEWNESS(x) FROM x GROUP BY x ORDER BY ALL;
SELECT SKEWNESS(x) OVER (PARTITION BY x) FROM x ORDER BY x;
PRAGMA x;
CREATE TABLE x AS SELECT x % 10 AS x, x AS x FROM x;
SELECT COUNT(*), COUNT(x), SUM(x), CAST(AVG(x) AS INT), MIN(x), MAX(x) FROM x;
SELECT COUNT(*), COUNT(x), SUM(x), CAST(AVG(x) AS INT), MIN(x), MAX(x) FROM x;
SELECT x, COUNT(*), COUNT(x), SUM(x), CAST(AVG(x) AS INT), MIN(x), MAX(x) FROM x GROUP BY x ORDER BY x;
SELECT x, COUNT(*), COUNT(x), SUM(x), CAST(AVG(x) AS INT), MIN(x), MAX(x) FROM x GROUP BY x ORDER BY x;
SELECT x, FINALIZE(x), FINALIZE(x), FINALIZE(x), CAST(FINALIZE(x) AS INT), FINALIZE(x), FINALIZE(x) FROM x ORDER BY x;
SELECT SUM(x) * 2 FROM x;
SELECT SUM(x) * 2 FROM x;
SELECT x, SUM(x) * 2 AS x FROM x GROUP BY x ORDER BY x;
SELECT x, SUM(x) * 2 AS x FROM x GROUP BY x ORDER BY x;
SELECT COUNT(*), COUNT(x), SUM(x), CAST(AVG(x) AS INT), MIN(x), MAX(x) FROM x WHERE FALSE;
SELECT COUNT(*), COUNT(x), SUM(x), CAST(AVG(x) AS INT), MIN(x), MAX(x) FROM x WHERE FALSE;
SELECT COUNT(*), COUNT(x), SUM(x), CAST(AVG(x) AS INT), MIN(x), MAX(x) FROM (SELECT CAST(NULL AS INT) AS x);
SELECT COUNT(*), COUNT(x), SUM(x), CAST(AVG(x) AS INT), MIN(x), MAX(x) FROM (SELECT CAST(NULL AS INT) AS x);
SELECT COUNT(*), COUNT(x), SUM(x), CAST(AVG(x) AS INT), MIN(x), MAX(x) FROM (SELECT CAST(NULL AS INT) AS x, x FROM x);
SELECT COUNT(*), COUNT(x), SUM(x), CAST(AVG(x) AS INT), MIN(x), MAX(x) FROM (SELECT CAST(NULL AS INT) AS x, x FROM x);
SELECT ARG_MIN(x, x), ARG_MAX(x, x) FROM (VALUES (1, 1), (2, 2), (8, 8), (10, 10)) AS x;
SELECT ARG_MIN(x, x), ARG_MAX(x, x) FROM (VALUES (1, 1), (2, 2), (8, 8), (10, 10)) AS x;
SELECT x, FIRST(x), LAST(x), FSUM(x), FAVG(x), PRODUCT(x), BIT_XOR(x), BOOL_AND(x > 5) FROM x GROUP BY x ORDER BY x;
SELECT x, FIRST(x), LAST(x), FSUM(x), FAVG(x), PRODUCT(x), BIT_XOR(x), BOOL_AND(x > 5) FROM x GROUP BY x ORDER BY x;
SELECT CORR(x, x + 1), COVAR_POP(x, x + 1) FROM x;
SELECT CORR(x, x + 1), COVAR_POP(x, x + 1) FROM x;
SELECT LIST(x) AS x FROM x;
SELECT GROUP_CONCAT(x, ',') AS x FROM x;
SELECT GROUP_CONCAT(x) AS x FROM x;
SELECT GROUP_CONCAT(x) AS x FROM x;
SELECT COMBINE(NULL, NULL);
SELECT COMBINE(42, 42);
SELECT FINALIZE(NULL);
SELECT FINALIZE(42);
SELECT FINALIZE(SUM(x)) FROM x;
SELECT FINALIZE(SUM(x)) FROM x GROUP BY x;
SELECT FINALIZE(SUM(x)) FROM x GROUP BY x;
SELECT FINALIZE(SUM(x)) FROM x GROUP BY x;
CREATE TABLE x AS SELECT x % 10 AS x, x AS x FROM x;
SELECT x, COUNT(*), COUNT(x), SUM(x), CAST(AVG(x) AS INT), MIN(x), MAX(x) FROM x GROUP BY x ORDER BY x;
SELECT x, FINALIZE(x), FINALIZE(x), FINALIZE(x), CAST(FINALIZE(x) AS INT), FINALIZE(x), FINALIZE(x) FROM x ORDER BY x;
SELECT x, FINALIZE(x), FINALIZE(x), FINALIZE(x), CAST(FINALIZE(x) AS INT), FINALIZE(x), FINALIZE(x) FROM x ORDER BY x;
SELECT CAST((SUM(42) AS x) AS BLOB);
SELECT CAST((SUM(42) AS x) AS BLOB);
SELECT CAST((SUM(42) AS x) AS INT);
SELECT CAST((SUM(42) AS x) AS INT);
SELECT CAST((SUM(42) AS x) AS INT);
SELECT CAST((SUM(42) AS x) AS INT);
COPY (SELECT x, CAST((SUM(x) AS x) AS BLOB) AS x FROM x GROUP BY x) TO '__TEST_DIR__/state.parquet' WITH (FORMAT PARQUET);
COPY (SELECT x, CAST((SUM(x) AS x) AS BLOB) AS x FROM x GROUP BY x) TO '__TEST_DIR__/state.parquet' WITH (FORMAT PARQUET);
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (42, 1), (43, 1), (42, 2), (1000, 2), (NULL, 1), (NULL, 3);
SELECT STDDEV_SAMP(1);
SELECT VARIANCE(1);
SELECT ROUND(STDDEV_SAMP(x), 1) FROM x;
SELECT ROUND(STDDEV_SAMP(x), 1) FROM x WHERE NOT x IS NULL;
SELECT x, SUM(x), ROUND(STDDEV_SAMP(x), 1), MIN(x) FROM x GROUP BY x ORDER BY x;
SELECT x, SUM(x), ROUND(STDDEV_SAMP(x), 1), MIN(x) FROM x WHERE NOT x IS NULL GROUP BY x ORDER BY x;
SELECT ROUND(STDDEV_POP(x), 1) FROM x;
SELECT ROUND(STDDEV_POP(x), 1) FROM x WHERE NOT x IS NULL;
SELECT x, SUM(x), ROUND(STDDEV_POP(x), 1), MIN(x) FROM x GROUP BY x ORDER BY x;
SELECT x, SUM(x), ROUND(STDDEV_POP(x), 1), MIN(x) FROM x WHERE NOT x IS NULL GROUP BY x ORDER BY x;
SELECT ROUND(VARIANCE(x), 1) FROM x;
SELECT ROUND(VARIANCE(x), 1) FROM x;
SELECT ROUND(VARIANCE(x), 1) FROM x WHERE NOT x IS NULL;
SELECT x, SUM(x), ROUND(VARIANCE(x), 1), MIN(x) FROM x GROUP BY x ORDER BY x;
SELECT x, SUM(x), ROUND(VARIANCE(x), 1), MIN(x) FROM x WHERE NOT x IS NULL GROUP BY x ORDER BY x;
SELECT ROUND(VAR_POP(x), 1) FROM x;
SELECT ROUND(VAR_POP(x), 1) FROM x WHERE NOT x IS NULL;
SELECT x, SUM(x), ROUND(VAR_POP(x), 2), MIN(x) FROM x GROUP BY x ORDER BY x;
SELECT x, SUM(x), ROUND(VAR_POP(x), 2), MIN(x) FROM x WHERE NOT x IS NULL GROUP BY x ORDER BY x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (42, 1), (43, 1), (42, 2), (1000, 2), (NULL, 1), (NULL, 3);
SELECT ROUND(STDDEV(x), 1) FROM x;
SELECT STDDEV(0) FROM x;
SELECT STDDEV(x) FROM (VALUES (1e301), (-1e301)) AS x;
SELECT VARIANCE(x) FROM (VALUES (1e301), (-1e301)) AS x;
SELECT VAR_POP(x) FROM (VALUES (1e301), (-1e301)) AS x;
SET x = 'nulls_first';
PRAGMA x;
PRAGMA x;
PRAGMA x;
SELECT GROUP_CONCAT('a', 'b', 'c');
SELECT GROUP_CONCAT(GROUP_CONCAT('a', ','));
SELECT GROUP_CONCAT('a', ',');
SELECT GROUP_CONCAT('a', ','), GROUP_CONCAT(NULL, ','), GROUP_CONCAT('a', NULL), GROUP_CONCAT(NULL, NULL);
CREATE TABLE x (x INT, x TEXT, x TEXT);
INSERT INTO x VALUES (1, 'a', '/'), (1, 'b', '-'), (2, 'i', '/'), (2, NULL, '-'), (2, 'j', '+'), (3, 'p', '/'), (4, 'x', '/'), (4, 'y', '-'), (4, 'z', '+');
SELECT GROUP_CONCAT(x, ','), GROUP_CONCAT(x, x) FROM x;
SELECT x, GROUP_CONCAT(x, '|') FROM x GROUP BY x ORDER BY x;
SELECT GROUP_CONCAT(x, ',') FROM x WHERE x > 100;
SELECT GROUP_CONCAT(1, 2);
SELECT GROUP_CONCAT('a', ',');
SELECT GROUP_CONCAT('a');
SELECT x, GROUP_CONCAT(x) FROM x GROUP BY x ORDER BY x;
PRAGMA x;
SELECT GROUP_CONCAT(x ORDER BY x ASC), GROUP_CONCAT(x, '|' ORDER BY x ASC) FROM x;
SELECT GROUP_CONCAT(x ORDER BY x DESC), GROUP_CONCAT(x, '|' ORDER BY x DESC) FROM x;
SELECT x, GROUP_CONCAT(x ORDER BY x ASC), GROUP_CONCAT(x, '|' ORDER BY x ASC) FROM x GROUP BY x ORDER BY 1;
SELECT x, GROUP_CONCAT(x ORDER BY x DESC), GROUP_CONCAT(x, '|' ORDER BY x DESC) FROM x GROUP BY x ORDER BY 1;
SELECT x, GROUP_CONCAT(x, x ORDER BY x ASC) FROM x GROUP BY x ORDER BY 1;
SELECT x, GROUP_CONCAT(x, x ORDER BY x DESC) FROM x GROUP BY x ORDER BY 1;
SELECT GROUP_CONCAT(CAST(x AS TEXT), ',' ORDER BY CONCAT(x, x) ASC) FROM x ORDER BY 1;
SELECT GROUP_CONCAT(CAST(x AS TEXT), ',' ORDER BY x, x) FROM x ORDER BY 1;
SELECT GROUP_CONCAT(x, ',' ORDER BY x DESC), GROUP_CONCAT(x, ',' ORDER BY x ASC) FROM x;
SELECT x, GROUP_CONCAT(x, ',' ORDER BY x DESC) FILTER(WHERE x < 3) FROM x GROUP BY x ORDER BY 1;
SELECT x, GROUP_CONCAT(DISTINCT CASE WHEN x IS NULL THEN NULL WHEN ',' IS NULL THEN NULL ELSE (x, ',') END ORDER BY x DESC) FILTER(WHERE x < 4) FROM x GROUP BY x ORDER BY 1;
CREATE TABLE x (x INT);
INSERT INTO x (VALUES(1), (2), (3), (NULL));
SELECT x.x, (SELECT GROUP_CONCAT(CAST(x AS TEXT), ',' ORDER BY x.x + x) FROM x WHERE x <= x.x) AS x FROM x AS x ORDER BY 1;
SELECT GROUP_CONCAT(DISTINCT CASE WHEN x IS NULL THEN NULL WHEN '&' IS NULL THEN NULL ELSE (x, '&') END ORDER BY LIST_POSITION(['L900', 'L1800', 'L2100', 'L2600'], x)) FROM (VALUES ('L900'), ('L2600'), ('L2100'), ('L2100'), ('L1800')) AS x;
SELECT FIRST(DISTINCT x ORDER BY RANDOM() * x) FROM (VALUES (900), (2600), (2100), (2100), (1800)) AS x;
SELECT FIRST(DISTINCT RANDOM() * x ORDER BY x) FROM (VALUES (900), (2600), (2100), (2100), (1800)) AS x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
CREATE TABLE x AS SELECT CAST(x AS TEXT) AS x, CAST((x * 10 + x) AS TEXT) AS x FROM x AS x, x AS x;
SELECT COUNT(*) FROM (SELECT x, GROUP_CONCAT(x, ',') FROM x GROUP BY x) AS x;
SELECT x, GROUP_CONCAT(x ORDER BY x DESC) FROM x GROUP BY x ORDER BY 1, 2;
SELECT x, GROUP_CONCAT(x, ',' ORDER BY x DESC) FROM x GROUP BY x ORDER BY 1, 2;
PRAGMA x;
PRAGMA x;
CREATE TABLE x AS SELECT x, 'hello' AS x FROM x AS x;
SELECT x, GROUP_CONCAT(x, ',') FROM x GROUP BY x ORDER BY x;
SELECT 1, GROUP_CONCAT(x, ',') FROM x GROUP BY 1 ORDER BY 1;
SELECT GROUP_CONCAT(x, ','), SUM(CAST(x AS BIGINT)) FROM (SELECT CAST(x AS TEXT) FROM x UNION ALL SELECT CAST(x AS TEXT) FROM x) AS x;
SELECT 1, GROUP_CONCAT(x, ',' ORDER BY x DESC) FROM x GROUP BY 1 ORDER BY 1;
CREATE TABLE x AS SELECT x AS x, CAST(x AS TEXT) AS x FROM x AS x;
SELECT GROUP_CONCAT(x, ',' ORDER BY x DESC) FROM x WHERE x % 100000 = 0;
CREATE TABLE x (x INT);
INSERT INTO x SELECT * FROM x;
SELECT SUM(x) FROM x;
INSERT INTO x SELECT * FROM x;
SELECT SUM(x) FROM x;
INSERT INTO x SELECT * FROM x;
SELECT SUM(x) FROM x;
SELECT SUM(1) FROM x;
SELECT SUM(-1) FROM x;
SELECT SUM(-1) FROM x WHERE x = -1;
SELECT SUM(-1) FROM x WHERE x > 10000;
CREATE TABLE x (x BIGINT);
INSERT INTO x SELECT * FROM x;
SELECT SUM(x) FROM x;
SELECT CAST(SUM(x) AS BIGINT) FROM x;
CREATE TABLE x (x DOUBLE);
INSERT INTO x (x) VALUES (CAST('9007199254740992' AS DOUBLE)), (CAST(1 AS DOUBLE)), (CAST(1 AS DOUBLE)), (CAST(0 AS DOUBLE));
SELECT CAST(SUM(x ORDER BY ABS(x)) AS BIGINT) FROM x;
SELECT CAST((SUM(x ORDER BY ABS(x))) AS BIGINT) FROM x;
SELECT WEIGHTED_AVG(3, 3), WEIGHTED_AVG(3, NULL), WEIGHTED_AVG(NULL, 3), WEIGHTED_AVG(NULL, NULL);
SELECT WEIGHTED_AVG(3, 0), WEIGHTED_AVG(3, 0.0), WEIGHTED_AVG(0, 3), WEIGHTED_AVG(0.0, 3);
SELECT WAVG(3, 3);
CREATE TABLE x (x TEXT, x INT, x INT);
INSERT INTO x VALUES ('Alice', 8, 6), ('Alice', 6, 2), ('Bob', 6, 3), ('Bob', 8, 3), ('Bob', 6, 6);
SELECT x, WEIGHTED_AVG(x, x) FROM x GROUP BY x ORDER BY x;
INSERT INTO x VALUES ('Alice', 42, 0);
SELECT x, WEIGHTED_AVG(x, x) FROM x GROUP BY x ORDER BY x;
INSERT INTO x VALUES ('Alice', 42, NULL);
SELECT x, WEIGHTED_AVG(x, x) FROM x GROUP BY x ORDER BY x;
INSERT INTO x VALUES ('Alice', NULL, 42);
SELECT x, WEIGHTED_AVG(x, x) FROM x GROUP BY x ORDER BY x;
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (2, 3), (4, 5), (2, NULL), (NULL, NULL);
SELECT DISTINCT ON (x) x, x FROM x ORDER BY x;
SELECT DISTINCT ON (x) x, x FROM x ORDER BY x, x;
SELECT DISTINCT ON (x) x, x FROM x ORDER BY x NULLS FIRST, x NULLS FIRST;
SELECT DISTINCT ON (x) x, x FROM x ORDER BY x, x NULLS FIRST;
CREATE TABLE x (x INT, x TEXT, x INT[], x INT);
INSERT INTO x VALUES (1, 'hello', [1], 42) /* ASC */, (1, 'hello', [1], 42), (1, 'hello', [1], 43) /* DESC */, (2, NULL, NULL, 0) /* ASC */, (2, NULL, NULL, 1), (2, NULL, NULL, NULL) /* DESC */, (3, 'thisisalongstring', NULL, 0) /* ASC */, (3, 'thisisalongstringbutlonger', NULL, 1), (3, 'thisisalongstringbutevenlonger', [1, 2, 3, 4, 5, 6, 7, 8, 9], 2) /* DESC */;
SELECT DISTINCT ON (x) * FROM x ORDER BY x, x, x, x;
SELECT DISTINCT ON (x) * FROM x WHERE x <> 2 ORDER BY x, x, x, x;
SELECT DISTINCT ON (x) * FROM x ORDER BY x, x DESC NULLS FIRST, x DESC NULLS FIRST, x DESC NULLS FIRST;
SELECT DISTINCT ON (x) * FROM x WHERE x <> 2 ORDER BY x, x DESC NULLS FIRST, x DESC NULLS FIRST, x DESC NULLS FIRST;
PRAGMA x;
CREATE TABLE x (x INT, x INT, x INT);
INSERT INTO x VALUES (2, 3, 5), (4, 5, 6), (2, 7, 6);
SELECT DISTINCT ON (x) x, x FROM x ORDER BY x, x DESC;
SELECT DISTINCT ON (x) x, x FROM x ORDER BY x, x;
SELECT DISTINCT ON (x) x, x FROM x ORDER BY x DESC;
SELECT DISTINCT ON (x) x, x FROM x ORDER BY x;
SELECT x, x, (SELECT DISTINCT ON (x) x) AS x FROM x ORDER BY x, x;
SELECT x, x, (SELECT DISTINCT ON (x) x ORDER BY x, x DESC) AS x FROM x ORDER BY x, x;
SELECT x, x, (SELECT DISTINCT ON (x) x ORDER BY x, x) AS x FROM x ORDER BY x, x;
INSERT INTO x VALUES (2, 3, 7), (4, 5, 11);
SELECT DISTINCT ON (x) x, x, x FROM x ORDER BY x, x ASC, x ASC;
SELECT DISTINCT ON (x) x, x, x FROM x ORDER BY x, x ASC, x DESC;
INSERT INTO x VALUES (2, NULL, 27), (4, 88, NULL);
SELECT DISTINCT ON (x) x, x, x FROM x ORDER BY x, x NULLS FIRST, x DESC;
SELECT DISTINCT ON (x) x, x, x FROM x ORDER BY x, x NULLS FIRST, x NULLS FIRST;
SELECT DISTINCT ON (x) x, x, x FROM x ORDER BY x, x NULLS FIRST, x NULLS FIRST;
CREATE TABLE x (x REAL, x REAL);
INSERT INTO x VALUES (1, 69), (1, 420), (2, 69), (2, 420);
SELECT DISTINCT ON (x) x, x FROM x ORDER BY x ASC;
SELECT DISTINCT ON (x) x, x FROM x ORDER BY x DESC;
CREATE TABLE x (x INT, x INT, x INT, x DATE);
INSERT INTO x (x, x, x, x) VALUES (1, 2, 1, '2000-01-01') /* Moved to first house */, (5, 2, 2, '2004-08-19') /* Went to uni */, (9, 2, 1, '2007-06-12') /* Moved back home */, (2, 4, 3, '2007-05-18') /* Moved to first house */, (3, 4, 4, '2016-02-09') /* Moved to new house */;
SELECT DISTINCT ON (x) * FROM x ORDER BY x, x ASC;
SELECT DISTINCT ON (x) * FROM x ORDER BY x, x DESC;
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (1, 2);
SELECT DISTINCT x FROM x ORDER BY x, x;
SELECT DISTINCT ON (1) x, x FROM x ORDER BY x, x;
SELECT DISTINCT x FROM x UNION SELECT DISTINCT x FROM x ORDER BY x;
SELECT DISTINCT x FROM x UNION ALL SELECT DISTINCT x FROM x ORDER BY x;
CREATE TABLE x (x INT, x INT, x INT, x INT, x INT);
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (2, 1), (2, 2);
SELECT * FROM (SELECT DISTINCT ON (x) x, x FROM x ORDER BY x, x DESC) AS x;
SELECT * FROM (SELECT DISTINCT ON (x) x, x FROM x ORDER BY x, x DESC) AS x WHERE x <> 2;
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (11, 22), (13, 22), (11, 21), (11, 22);
SELECT DISTINCT x, x FROM x ORDER BY x, x;
SELECT DISTINCT x.x, x FROM x ORDER BY x, x;
SELECT DISTINCT x FROM x ORDER BY x;
SELECT DISTINCT x FROM x ORDER BY x;
SELECT DISTINCT x, SUM(x) FROM x GROUP BY x ORDER BY x;
SELECT DISTINCT MAX(x) FROM x GROUP BY x;
SELECT DISTINCT CASE WHEN x > 11 THEN 11 ELSE x END FROM x;
CREATE TABLE x AS (SELECT * FROM (VALUES (['TGTA']), (['CGGT']), (['CCTC']), (['TCTA']), (['AGGG']), (NULL)) AS x);
PRAGMA x;
CREATE TABLE x (x INT, x INT, x INT);
INSERT INTO x VALUES (2, 3, 5), (4, 5, 6), (2, 7, 6);
SELECT DISTINCT ON (x) x, x FROM x WHERE x <> 2;
SELECT DISTINCT ON (x) x, x FROM x WHERE x <> 2;
SELECT DISTINCT ON (x, x) x, x FROM x WHERE x <> 2;
SELECT DISTINCT ON (x + 1, x * 3) x, x FROM x WHERE x <> 2;
SELECT DISTINCT ON (1) x, x FROM x ORDER BY x;
SELECT DISTINCT ON (1) x, x FROM x ORDER BY x LIMIT 1;
SELECT DISTINCT ON (1) x, x FROM x ORDER BY x LIMIT 1 OFFSET 1;
SELECT DISTINCT ON (2) x, x FROM x ORDER BY 2;
SELECT DISTINCT ON (2) x, x FROM x ORDER BY 2;
SELECT DISTINCT ON (3) x, x, x FROM x ORDER BY 2;
SELECT DISTINCT ON (3) x, x, x FROM x ORDER BY 3;
SELECT DISTINCT ON (2) x, (SELECT x FROM x WHERE x = 2 LIMIT 1) FROM x ORDER BY 2;
SELECT DISTINCT ON (2) x, (SELECT DISTINCT ON (x) x FROM x ORDER BY 1 LIMIT 1) FROM x ORDER BY 2;
SELECT DISTINCT ON (x) x, x FROM x ORDER BY x;
SELECT * FROM (SELECT DISTINCT ON (x) x, x FROM x) AS x WHERE x <> 2;
SELECT DISTINCT ON (x) x, x FROM x ORDER BY x;
SELECT DISTINCT ON (x) x, x, x FROM x ORDER BY x;
SELECT DISTINCT ON (x.x) x, x FROM x ORDER BY 1, 2;
SELECT DISTINCT ON (x) x.x, x.x FROM x ORDER BY 1, 2;
SELECT DISTINCT ON (x.x) x.x, x.x FROM x ORDER BY x, x;
SELECT DISTINCT ON (2) x FROM x;
SELECT DISTINCT ON (x, 'literal') x FROM x;
SET x = TRUE;
SELECT DISTINCT ON (x, 'literal') x FROM x ORDER BY ALL;
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3);
SELECT DISTINCT x % 2 FROM x ORDER BY 1;
SELECT DISTINCT x % 2 FROM x WHERE x < 3 ORDER BY x;
SELECT DISTINCT ON (1) x % 2, x FROM x WHERE x < 3 ORDER BY x;
SELECT DISTINCT x.x FROM x ORDER BY x DESC;
SELECT DISTINCT x FROM x ORDER BY x.x DESC;
SELECT DISTINCT x.x FROM x ORDER BY x.x DESC;
SET x = 'nulls_first';
PRAGMA x;
PRAGMA x;
CREATE TABLE x (x TEXT, x TEXT, x BIGINT);
INSERT INTO x (x, x, x) VALUES ('CS', 'Bachelor', 34), ('CS', 'Bachelor', 34), ('CS', 'PhD', 12), ('Math', 'Masters', 12), ('CS', NULL, 10), ('CS', NULL, 12), ('Math', NULL, 12), ('Math', NULL, NULL);
SELECT GROUPING(x), x, SUM(DISTINCT x), COUNT(*) FROM x GROUP BY x ORDER BY ALL;
SELECT SUM(DISTINCT x), GROUPING_ID(x), x, COUNT(*) FROM x GROUP BY x ORDER BY ALL;
SELECT GROUPING(x), GROUPING(x), x, x, SUM(DISTINCT x), COUNT(*), SUM(DISTINCT x) FROM x GROUP BY x, x ORDER BY ALL;
SELECT GROUPING(x), GROUPING(x), AVG(DISTINCT x), x, x, COUNT(*), SUM(DISTINCT x) FROM x GROUP BY CUBE (x, x) ORDER BY ALL;
SELECT SUM(DISTINCT x), GROUPING(x, x), x, x, COUNT(*), SUM(DISTINCT x) FROM x GROUP BY CUBE (x, x) ORDER BY ALL;
SELECT GROUPING(x), GROUPING(x), SUM(DISTINCT x), GROUPING(x) + GROUPING(x), x, x, COUNT(DISTINCT x), COUNT(*) FROM x GROUP BY CUBE (x, x) ORDER BY ALL;
SELECT GROUPING(x, x, x, x, x, x, x, x), AVG(DISTINCT x), AVG(x), AVG(DISTINCT x), x, x, COUNT(*) FROM x GROUP BY CUBE (x, x, x) ORDER BY ALL;
SELECT GROUPING(x.x), GROUPING(x.x), SUM(DISTINCT x), GROUPING(x) + GROUPING(x), x, AVG(DISTINCT x), x, COUNT(*) FROM x GROUP BY CUBE (x, x, x) ORDER BY ALL;
SELECT GROUPING(x), GROUPING(x), AVG(x), GROUPING(x) + GROUPING(x), AVG(DISTINCT x), x, x, COUNT(*) FROM x GROUP BY CUBE (x.x, x.x) ORDER BY ALL;
SELECT GROUPING(x), GROUPING(x), x, SUM(DISTINCT x), COUNT(*) FROM x GROUP BY CUBE (x, x) HAVING GROUPING(x) = 0 ORDER BY ALL;
SELECT GROUPING(x), GROUPING(x), SUM(DISTINCT x), x, x, SUM(DISTINCT x), AVG(DISTINCT x), COUNT(*) FROM x GROUP BY CUBE (x, x, x, x) HAVING GROUPING(x.x) = 0 ORDER BY ALL;
SELECT x, COUNT(*), AVG(x), SUM(DISTINCT x), AVG(DISTINCT x) FROM x GROUP BY CUBE (x, x) ORDER BY GROUPING(x), GROUPING(x), 1, 2, 3, 4, 5;
WITH RECURSIVE x AS (SELECT 1 AS x UNION SELECT SUM(DISTINCT x + 1) FROM x WHERE x < 3 GROUP BY x) SELECT * FROM x ORDER BY x;
CREATE TABLE x AS SELECT x, x % 5 AS x FROM x AS x;
SELECT COUNT(DISTINCT x % 5) FROM x GROUP BY x;
SELECT COUNT(DISTINCT (SELECT x % 5)) FROM x GROUP BY x;
SELECT COUNT(DISTINCT (SELECT x % 5)) FROM x GROUP BY x;
CREATE TABLE x AS SELECT x % 20 AS x, [x + x FOR x IN RANGE(0, 280)] AS x FROM x AS x;
SELECT COUNT(x), AVG(x), COUNT(DISTINCT x), x FROM x GROUP BY x ORDER BY x LIMIT 10;
CREATE TABLE x AS SELECT UUID() AS x, x AS x FROM x AS x;
SELECT COUNT(x), COUNT(DISTINCT x) FROM x GROUP BY x ORDER BY x LIMIT 10;
PRAGMA x;
PRAGMA x;
PRAGMA x;
SELECT GROUPING(x, x), x, x, COUNT(DISTINCT x), COUNT(DISTINCT x) FROM x GROUP BY CUBE (x, x) ORDER BY ALL;
SELECT COUNT(DISTINCT x), COUNT(DISTINCT x), COUNT(*), MIN(x), MAX(x), MIN(x), MAX(x), SUM(x), AVG(x) FROM (SELECT x, x, COUNT(DISTINCT x) AS x FROM x GROUP BY CUBE (x, x));
CREATE TABLE x AS SELECT x % CAST(50 AS BIGINT) AS x, x % CAST(5 AS BIGINT) AS x FROM x AS x;
SELECT COUNT(DISTINCT x), MIN(DISTINCT x), MAX(DISTINCT x), SUM(DISTINCT x), PRODUCT(DISTINCT x) FROM x GROUP BY x ORDER BY ALL;
PRAGMA x;
PRAGMA x;
WITH x AS (SELECT * FROM (VALUES ('1', '123', '7'), ('1', '456', '7')) AS x) SELECT "x", COUNT(DISTINCT "x") FILTER(WHERE "x" = '456') AS x FROM x GROUP BY "x";
CREATE OR REPLACE TABLE x AS SELECT * FROM (VALUES ([REPEAT('a', 1000000)]), ([REPEAT('a', 1000000)]), ([REPEAT('a', 1000000)]), ([REPEAT('a', 1000000)]), ([REPEAT('b', 1000000)]), ([REPEAT('b', 1000000)]), ([REPEAT('b', 1000000)]), ([REPEAT('b', 1000000)])) AS x;
SELECT (CAST(MIN(DISTINCT x) AS TEXT))[2 : 2] FROM x GROUP BY x ORDER BY ALL;
PRAGMA x;
PRAGMA x;
PRAGMA x;
CREATE TABLE x AS SELECT x % 81982 AS x, x % 20000 AS x FROM x AS x;
CREATE TABLE x AS SELECT CASE WHEN x % 2343 = 0 THEN NULL ELSE x % 63423 END AS x, x % 20000 AS x FROM x AS x;
CREATE TABLE x AS SELECT CASE WHEN x % 7 = 0 THEN x ELSE NULL END AS x, x % 20000 AS x FROM x AS x;
SELECT AVG(DISTINCT x), SUM(DISTINCT x), AVG(x), COUNT(DISTINCT x) FROM x GROUP BY x ORDER BY x;
SELECT AVG(DISTINCT x), SUM(DISTINCT x), AVG(x), COUNT(DISTINCT x) FROM x GROUP BY x ORDER BY x;
SELECT AVG(DISTINCT x), SUM(DISTINCT x), AVG(x), COUNT(DISTINCT x) FROM x GROUP BY x ORDER BY x;
CREATE TABLE x AS SELECT 1 AS x, x AS x FROM x AS x;
SELECT SUM(DISTINCT x), COUNT(DISTINCT x), AVG(DISTINCT x), SUM(DISTINCT x) FROM x GROUP BY x ORDER BY x;
SELECT SUM(x), COUNT(x), AVG(x), SUM(x) FROM x GROUP BY x ORDER BY x;
PRAGMA x;
PRAGMA x;
PRAGMA x = 4;
PRAGMA x = '4gb';
SELECT x, COUNT(DISTINCT x) FROM x GROUP BY 1 ORDER BY ALL DESC LIMIT 10;
SET x = 'nulls_first';
PRAGMA x;
PRAGMA x;
CREATE TABLE x (x TEXT, x TEXT, x BIGINT);
INSERT INTO x (x, x, x) VALUES ('CS', 'Bachelor', 20), ('CS', 'Bachelor', 10), ('CS', 'PhD', -20), ('Math', 'Masters', 10), ('CS', NULL, -15), ('CS', NULL, 10), ('Math', NULL, 15);
SELECT x, x, COUNT(*), SUM(DISTINCT x) FROM x GROUP BY x, x ORDER BY ALL;
SELECT x, x, COUNT(*), SUM(DISTINCT x) FROM x GROUP BY (x, x) ORDER BY ALL;
SELECT x, COUNT(*), SUM(DISTINCT x) FROM x GROUP BY (), x, () ORDER BY ALL;
SELECT COUNT(*), x, x, SUM(DISTINCT x) FROM x GROUP BY GROUPING SETS ((x), (x)) ORDER BY ALL;
SELECT SUM(DISTINCT x), COUNT(*), x, AVG(DISTINCT x), x FROM x GROUP BY GROUPING SETS (x), GROUPING SETS (x) ORDER BY ALL;
SELECT SUM(DISTINCT x), COUNT(*), COUNT(DISTINCT x), x, x FROM x GROUP BY x, GROUPING SETS (x) ORDER BY ALL;
SELECT SUM(DISTINCT x), COUNT(*), COUNT(DISTINCT x), x, x FROM x GROUP BY x, GROUPING SETS (x) ORDER BY ALL;
SELECT SUM(DISTINCT x), COUNT(*), x, x FROM x GROUP BY GROUPING SETS ((x, x), (x)) ORDER BY ALL;
SELECT SUM(DISTINCT x), COUNT(*), x, x FROM x GROUP BY GROUPING SETS ((x, x), (x)) ORDER BY ALL;
SELECT SUM(DISTINCT x), COUNT(*), x, x FROM x GROUP BY GROUPING SETS ((x, x), (x)) ORDER BY ALL;
SELECT COUNT(*), SUM(DISTINCT x), x, x FROM x GROUP BY GROUPING SETS ((x), (), (x)) ORDER BY ALL;
SELECT COUNT(*), COUNT(DISTINCT x), SUM(DISTINCT x), x, x FROM x GROUP BY GROUPING SETS (x, ()), GROUPING SETS (x) ORDER BY ALL;
SELECT SUM(DISTINCT x), COUNT(*), x, x, SUM(DISTINCT x) FROM x GROUP BY x, GROUPING SETS (x, ()) ORDER BY ALL;
SELECT SUM(DISTINCT x) FILTER(WHERE x % 10 <> 0), COUNT(*), x, x, SUM(DISTINCT x) FROM x GROUP BY GROUPING SETS ((x, x), (x)) ORDER BY ALL;
SELECT COUNT(*), SUM(DISTINCT x), x, x FROM x GROUP BY GROUPING SETS ((3, 4), (4)) ORDER BY ALL;
SELECT COUNT(*), x AS x, SUM(DISTINCT x), x AS x FROM x GROUP BY GROUPING SETS ((x, x), (x)) ORDER BY ALL;
SELECT COUNT(*), x AS x, SUM(DISTINCT x), x AS x FROM x GROUP BY GROUPING SETS ((x, x), (x)) ORDER BY ALL;
SET x = 1;
SELECT x, x, COUNT(*), SUM(DISTINCT x) FROM x GROUP BY x, x ORDER BY ALL;
PRAGMA x;
CREATE TABLE x AS SELECT x % 100 AS x, x % 100000 AS x, x % 5 AS x FROM x AS x;
SELECT COUNT(DISTINCT x) FROM x GROUP BY x;
SELECT COUNT(DISTINCT x) FROM x GROUP BY x;
SELECT COUNT(DISTINCT x), COUNT(DISTINCT x) FROM x GROUP BY x;
SELECT COUNT(DISTINCT x), COUNT(DISTINCT x) FROM x GROUP BY x;
SELECT COUNT(DISTINCT x), COUNT(x), COUNT(DISTINCT x) FROM x GROUP BY x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (11, 22), (12, 19), (13, 23), (13, 22), (12, 21), (12, 19);
SELECT x, SUM(DISTINCT x), SUM(DISTINCT x + 2), AVG(x) FROM x GROUP BY x ORDER BY x;
CREATE TABLE x AS SELECT CAST(((RANDOM() * 100) % 2) AS BIGINT) AS x, (x % 10) AS x FROM x AS x;
PRAGMA x = 8;
SELECT SUM(DISTINCT x) FROM x GROUP BY x ORDER BY x;
PRAGMA x = 1;
SELECT SUM(DISTINCT x) FROM x GROUP BY x ORDER BY x;
SET x = 'nulls_first';
PRAGMA x;
PRAGMA x;
CREATE TABLE x (x INT, x TEXT, x TEXT);
INSERT INTO x VALUES (1, 'a', '/'), (1, 'b', '-'), (2, 'i', '/'), (2, NULL, '-'), (2, 'j', '+'), (3, 'p', '/'), (4, 'x', '/'), (4, 'y', '-'), (4, 'z', '+');
SELECT x, GROUP_CONCAT(DISTINCT CASE WHEN x IS NULL THEN NULL WHEN ',' IS NULL THEN NULL ELSE (x, ',') END ORDER BY x DESC) FILTER(WHERE x < 4) FROM x GROUP BY x ORDER BY 1;
SELECT x, COUNT(x), GROUP_CONCAT(DISTINCT CASE WHEN x IS NULL THEN NULL WHEN ',' IS NULL THEN NULL ELSE (x, ',') END ORDER BY x DESC) FILTER(WHERE x < 4), SUM(1) FROM x GROUP BY x ORDER BY 1;
SELECT x, GROUP_CONCAT(DISTINCT x ORDER BY x, '_') FILTER(WHERE x < 4) FROM x GROUP BY x ORDER BY 1;
SET x = TRUE;
SELECT x, GROUP_CONCAT(DISTINCT x ORDER BY x, '_') FILTER(WHERE x < 4) FROM x GROUP BY x ORDER BY 1;
PRAGMA x;
PRAGMA x;
CREATE TABLE x AS (SELECT x % 50 AS x, x % 100 AS x FROM x AS x);
SELECT COUNT(DISTINCT x) FROM x;
SELECT SUM(DISTINCT x), SUM(x), SUM(x) FROM x;
SELECT SUM(x), SUM(x), SUM(DISTINCT x) FROM x;
SELECT SUM(x), SUM(DISTINCT x), SUM(x) FROM x;
SELECT SUM(DISTINCT x), COUNT(x), SUM(DISTINCT x) FROM x;
SELECT SUM(x), SUM(DISTINCT x), COUNT(x), SUM(DISTINCT x) FROM x;
SELECT SUM(x), SUM(DISTINCT x), COUNT(x), SUM(DISTINCT x) FROM x;
SELECT SUM(DISTINCT x), COUNT(x), SUM(DISTINCT x), SUM(x) FROM x;
SELECT COUNT(DISTINCT x) FILTER(WHERE x >= 20) FROM x;
SELECT SUM(DISTINCT x), SUM(x) FILTER(WHERE x < 20), SUM(x) FILTER(WHERE x >= 20) FROM x;
SELECT SUM(x), SUM(x) FILTER(WHERE x = 0), SUM(DISTINCT x) FILTER(WHERE x = 0) FROM x;
SELECT SUM(x) FILTER(WHERE x = 5), SUM(DISTINCT x), SUM(x) FILTER(WHERE x = 5) FROM x;
SELECT SUM(DISTINCT x) FILTER(WHERE x = 5), COUNT(x), SUM(DISTINCT x) FILTER(WHERE x = 5) FROM x;
SELECT SUM(x) FILTER(WHERE x = 5), SUM(DISTINCT x) FILTER(WHERE x = 5), COUNT(x), SUM(DISTINCT x) FROM x;
SELECT SUM(x) FILTER(WHERE x = 5), SUM(DISTINCT x), COUNT(x), SUM(DISTINCT x) FILTER(WHERE x = 5) FROM x;
SELECT SUM(DISTINCT x), COUNT(x), SUM(DISTINCT x) FILTER(WHERE x = 5), SUM(x) FILTER(WHERE x = 5) FROM x;
SET x = 'nulls_first';
WITH RECURSIVE x AS (SELECT 1 AS x UNION SELECT SUM(DISTINCT x + 1) FROM x WHERE x < 3) SELECT * FROM x ORDER BY x;
CREATE TABLE x AS SELECT * FROM x AS x;
SELECT COUNT(DISTINCT x % 5) FROM x;
SELECT COUNT(DISTINCT (SELECT x % 5)) FROM x;
SELECT COUNT(DISTINCT (SELECT x % 5)) FROM x;
PRAGMA x;
CREATE TABLE x AS SELECT x % 100 AS x, x % 100000 AS x FROM x AS x;
SELECT COUNT(DISTINCT x) FROM x;
SELECT COUNT(DISTINCT x) FROM x;
SELECT COUNT(DISTINCT x), COUNT(DISTINCT x) FROM x;
SELECT COUNT(DISTINCT x), COUNT(DISTINCT x) FROM x;
SELECT COUNT(DISTINCT x), COUNT(x), COUNT(DISTINCT x) FROM x;
CREATE TABLE x AS SELECT x % 50 AS x FROM x AS x;
SELECT COUNT(DISTINCT x), MIN(DISTINCT x), MAX(DISTINCT x), SUM(DISTINCT x), PRODUCT(DISTINCT x) FROM x;
PRAGMA x;
CREATE TABLE x AS (SELECT CASE WHEN x % 4 = 0 THEN NULL ELSE 'thisisalongstring' || x END AS x, CASE WHEN x % 8 = 0 THEN NULL ELSE {'x': 'thisisalongstring' || x} END AS x, CASE WHEN x % 16 = 0 THEN NULL ELSE ['thisisalongstring' || x] END AS x FROM (SELECT * FROM x AS x ORDER BY RANDOM()) CROSS JOIN (SELECT * FROM x AS x ORDER BY RANDOM()) CROSS JOIN (SELECT * FROM x AS x ORDER BY RANDOM()));
SELECT COUNT(*) FROM (SELECT DISTINCT * FROM x);
PRAGMA x = 4;
CREATE TABLE x (x BIGINT, x BIGINT, x BIGINT, x TEXT);
INSERT INTO x SELECT x AS x, x AS x, x AS x, CONCAT(CAST(x AS TEXT), REPEAT('0', 50)) AS x FROM x;
SET x = 'compressed_materialization';
PRAGMA x = '1.5GB';
SELECT COUNT(*) FROM (SELECT DISTINCT * FROM x);
INSERT INTO x SELECT x AS x, x AS x, x AS x, CONCAT(CAST(x AS TEXT), REPEAT('0', 300000)) AS x FROM x;
SELECT COUNT(*) FROM (SELECT DISTINCT * FROM x);
CREATE TABLE x (x BIGINT, x BIGINT, x BIGINT, x BIGINT);
INSERT INTO x SELECT x AS x, x AS x, x AS x, x AS x FROM (SELECT * FROM (SELECT * FROM x UNION ALL SELECT x % 2048 FROM x UNION ALL SELECT * FROM x));
SET x = 'compressed_materialization';
SET x = 4;
PRAGMA x = '400mb';
SELECT COUNT(*) FROM (SELECT DISTINCT * FROM x);
SET x = 'nulls_first';
PRAGMA x;
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (0, 1), (0, 2), (1, 3), (1, NULL);
SELECT x, SUM(x) FROM x GROUP BY ALL ORDER BY 1;
SELECT SUM(x), x FROM x GROUP BY ALL ORDER BY 2;
SELECT x, SUM(x) FROM x GROUP BY * ORDER BY 1;
SELECT x, SUM(x) FROM x GROUP BY 1 ORDER BY ALL;
SELECT x, SUM(x) FROM x GROUP BY 1 ORDER BY *;
SELECT x, SUM(x), COUNT(*), COUNT(x), SUM(x) FROM x GROUP BY ALL ORDER BY 1;
SELECT x % 2, SUM(x), SUM(x) FROM x GROUP BY ALL ORDER BY 1;
SELECT x % 2, SUM(x), SUM(x) FROM x GROUP BY 1 ORDER BY 1;
SELECT x % 2, SUM(x), SUM(x) FROM x GROUP BY x ORDER BY 1 NULLS FIRST, 2;
SELECT (x + x) % 2, SUM(x), SUM(x) FROM x GROUP BY ALL ORDER BY 1 NULLS FIRST;
SELECT (x + x) % 2, SUM(x), SUM(x) FROM x GROUP BY 1 ORDER BY 1 NULLS FIRST;
SELECT (x + x) % 2, SUM(x), SUM(x) FROM x GROUP BY x, x ORDER BY 1 NULLS FIRST, 2;
SELECT (x + x) % 2 + SUM(x), SUM(x), SUM(x) FROM x GROUP BY ALL ORDER BY 1;
SELECT x, x, x % 2, SUM(x), SUM(x) FROM x GROUP BY 1, 2, 3 ORDER BY 1, 2, 3, 4;
SELECT x, x, x % 2, SUM(x), SUM(x) FROM x GROUP BY ALL ORDER BY 1, 2 NULLS FIRST, 3, 4;
PRAGMA x;
SELECT * FROM (SELECT 1) AS x GROUP BY x HAVING x > 0;
SELECT x FROM (SELECT 1) AS x GROUP BY ALL HAVING x > 0;
SELECT x FROM (SELECT 1, 1 UNION ALL SELECT 1, 2) AS x GROUP BY ALL ORDER BY x;
SELECT x FROM (SELECT 1, 1 UNION ALL SELECT 1, 2) AS x GROUP BY ALL HAVING x > 0 ORDER BY x;
PRAGMA x;
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (0, 1), (0, 2), (1, 3), (1, NULL);
SELECT SUM(x) FROM x;
SELECT SUM(x) FROM x GROUP BY ALL;
SELECT SUM(x) FROM x GROUP BY ALL ORDER BY ALL;
SELECT SUM(x) FROM x GROUP BY ALL ORDER BY x;
SELECT x, SUM(x) FROM x GROUP BY ALL ORDER BY x;
PRAGMA x;
CREATE TABLE x (x TINYINT);
INSERT INTO x VALUES (-128), (127);
SELECT x, COUNT(*) FROM x GROUP BY x ORDER BY 1;
DROP TABLE x;
CREATE TABLE x (x SMALLINT);
INSERT INTO x VALUES (-32768), (32767);
SELECT x, COUNT(*) FROM x GROUP BY x ORDER BY 1;
DROP TABLE x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (-2147483648), (2147483647);
SELECT x, COUNT(*) FROM x GROUP BY x ORDER BY 1;
DROP TABLE x;
CREATE TABLE x (x BIGINT);
INSERT INTO x VALUES (-9223372036854775808), (9223372036854775807);
SELECT x, COUNT(*) FROM x GROUP BY x ORDER BY 1;
DROP TABLE x;
CREATE TABLE x (x INT128);
INSERT INTO x VALUES (-170141183460469231731687303715884105728), (170141183460469231731687303715884105727);
SELECT x, COUNT(*) FROM x GROUP BY x ORDER BY 1;
DROP TABLE x;
CREATE TABLE x (x UTINYINT);
INSERT INTO x VALUES (0), (255);
SELECT x, COUNT(*) FROM x GROUP BY x ORDER BY 1;
DROP TABLE x;
CREATE TABLE x (x USMALLINT);
INSERT INTO x VALUES (0), (65535);
SELECT x, COUNT(*) FROM x GROUP BY x ORDER BY 1;
DROP TABLE x;
CREATE TABLE x (x UINTEGER);
INSERT INTO x VALUES (0), (4294967295);
SELECT x, COUNT(*) FROM x GROUP BY x ORDER BY 1;
DROP TABLE x;
CREATE TABLE x (x UBIGINT);
INSERT INTO x VALUES (0), (18446744073709551615);
SELECT x, COUNT(*) FROM x GROUP BY x ORDER BY 1;
DROP TABLE x;
CREATE TABLE x (x UINT128);
INSERT INTO x VALUES (0), (CAST('340282366920938463463374607431768211455' AS UINT128));
SELECT x, COUNT(*) FROM x GROUP BY x ORDER BY 1;
SET x = 'nulls_first';
PRAGMA x;
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (11, 22), (13, 22), (12, 21);
SELECT SUM(SUM(41)), COUNT(*);
SELECT SUM(x), COUNT(*), AVG(x) FROM x;
SELECT COUNT(*) FROM x;
SELECT SUM(x), COUNT(*) FROM x WHERE x = 11;
SELECT SUM(x), SUM(x), SUM(x) + SUM(x) FROM x;
SELECT SUM(x + 2), SUM(x) + 2 * COUNT(*) FROM x;
SELECT x, SUM(x), SUM(x + 2), AVG(x) FROM x GROUP BY x ORDER BY x;
SELECT x, SUM(x) FROM x GROUP BY x ORDER BY COUNT(x);
SELECT x, SUM(x) FROM x GROUP BY x ORDER BY COUNT(x) DESC;
SELECT x, SUM(x), COUNT(*), SUM(x + 2) FROM x GROUP BY x ORDER BY x;
SELECT x % 2 AS x, SUM(x) FROM x GROUP BY x ORDER BY x;
SELECT x, SUM(x), COUNT(*), SUM(x + 2) FROM x WHERE x <= 12 GROUP BY x ORDER BY x;
SELECT x % 2 AS x, COUNT(SUM(x)) FROM x GROUP BY x;
INSERT INTO x VALUES (12, 21), (12, 21), (12, 21);
SELECT x, SUM(x), COUNT(*), SUM(x + 2) FROM x WHERE x <= 12 GROUP BY x ORDER BY x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (3, 4), (3, 4), (2, 4);
SELECT x, x + 10 FROM x GROUP BY x ORDER BY x;
SELECT x, SUM(x), x FROM x GROUP BY x ORDER BY x;
SELECT x, SUM(x), FIRST(x) FROM x GROUP BY x ORDER BY x;
SELECT x, SUM(x), LAST(x) FROM x GROUP BY x ORDER BY x;
SELECT 1 AS x, SUM(x) FROM x GROUP BY x ORDER BY 2;
SELECT 1 AS x, SUM(x) FROM x GROUP BY x ORDER BY 2;
SELECT x % 2 AS x, SUM(x) FROM x GROUP BY x, x ORDER BY 1;
DROP TABLE x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3), (NULL);
SELECT x, SUM(x) FROM x GROUP BY x ORDER BY 1;
SELECT x, x % 2 AS x, SUM(x) FROM x GROUP BY x ORDER BY 1;
SELECT 1 AS x, SUM(x) FROM x GROUP BY x + 1 ORDER BY 2;
SELECT x.x, SUM(x) FROM x GROUP BY x ORDER BY COUNT(x) DESC;
SET x = 'nulls_first';
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3), (NULL);
SELECT x % 2 AS x, SUM(x) FROM x WHERE NOT x IS NULL GROUP BY x HAVING x > 0;
SELECT x % 2 AS x, SUM(x) FROM x WHERE NOT x IS NULL GROUP BY x HAVING x % 2 > 0;
SELECT x % 2 AS x, SUM(x) FROM x WHERE NOT x IS NULL GROUP BY 1 HAVING x % 2 > 0;
SELECT x % 2 AS x, SUM(x) FROM x WHERE NOT x IS NULL GROUP BY 42 HAVING x % 2 > 0;
SELECT x, x % 2 AS x, SUM(x) FROM x GROUP BY x ORDER BY x, 3;
SELECT x, x % 2 AS x, SUM(x) FROM x GROUP BY x ORDER BY x, 3;
SELECT x, x % 2 AS x, SUM(x) FROM x GROUP BY x ORDER BY x;
SELECT x % 2 AS x, SUM(x) FROM x GROUP BY x;
SELECT x, SUM(x) FROM x GROUP BY x ORDER BY x;
SELECT (10 - x) AS x, SUM(x) FROM x GROUP BY x ORDER BY x;
SELECT (10 - x) AS x, SUM(x) FROM x GROUP BY x ORDER BY FIRST(x);
PRAGMA x;
CREATE TABLE x (x INT);
SELECT * FROM x GROUP BY "x";
SELECT * FROM x GROUP BY SUM(41);
PRAGMA x;
PRAGMA x;
CREATE TABLE x (x TEXT, x INT);
INSERT INTO x VALUES ('helloworld', 22), ('thisisalongstring', 22), ('helloworld', 21);
SELECT x, SUM(x) FROM x GROUP BY x ORDER BY x;
CREATE TABLE x (x INT, x INT, x INT);
INSERT INTO x VALUES (1, 1, 2), (1, 2, 2), (1, 1, 2), (2, 1, 2), (1, 2, 4), (1, 2, NULL);
SELECT x, x, SUM(x), COUNT(*), COUNT(x) FROM x GROUP BY x, x ORDER BY 1, 2;
SET x = 'nulls_first';
SET x = 'nulls_first';
SELECT x, SUM(x) FROM x GROUP BY x ORDER BY 2;
SELECT x, LEAST(x, 21) AS x, SUM(x) FROM x GROUP BY x, x ORDER BY 2, 3;
SELECT x, SUM(x) FROM x GROUP BY x ORDER BY 2;
SELECT x, LEAST(x, 21) AS x, SUM(x) FROM x GROUP BY x, x ORDER BY 2, 3;
SELECT x, SUM(x) FROM x GROUP BY x ORDER BY 2;
SELECT x, LEAST(x, 21) AS x, SUM(x) FROM x GROUP BY x, x ORDER BY 2, 3;
SELECT x, SUM(x) FROM x GROUP BY x ORDER BY 2;
SELECT x, LEAST(x, 21) AS x, SUM(x) FROM x GROUP BY x, x ORDER BY 2, 3;
SELECT x, SUM(x) FROM x GROUP BY x ORDER BY 2;
SELECT x, LEAST(x, 21) AS x, SUM(x) FROM x GROUP BY x, x ORDER BY 2, 3;
SELECT x, SUM(x) FROM x GROUP BY x ORDER BY 2;
SELECT x, LEAST(x, 21) AS x, SUM(x) FROM x GROUP BY x, x ORDER BY 2, 3;
SELECT [1, 2, 3] AS x, COUNT(*) FROM x AS x GROUP BY x;
SELECT {'x': 1, 'x': 2, 'x': 3} AS x, COUNT(*) FROM x AS x GROUP BY x;
PRAGMA x = 4;
PRAGMA x;
CREATE TEMPORARY TABLE x AS SELECT x % 100 AS x, 42 AS x FROM x;
SELECT x, COUNT(*), MIN(x), MAX(x) AS x FROM x GROUP BY x ORDER BY x LIMIT 10;
DROP TABLE x;
CREATE TEMPORARY TABLE x AS SELECT x % 100000 AS x, 42 AS x FROM x;
SELECT x, COUNT(*), MIN(x), MAX(x) AS x FROM x GROUP BY x ORDER BY x LIMIT 10;
DROP TABLE x;
CREATE TEMPORARY TABLE x AS SELECT x % 1000000 AS x, 42 AS x FROM x;
SELECT x, COUNT(*), MIN(x), MAX(x) AS x FROM x GROUP BY x ORDER BY x LIMIT 10;
SET x = 'nulls_first';
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (3, 4), (NULL, 4), (2, 4);
SELECT x, SUM(x) FROM x GROUP BY x ORDER BY x;
PRAGMA x;
SELECT x, x, SUM(x) AS x, SUM(x) AS x, SUM(x * (1 - x)) AS x, SUM(x * (1 - x) * (1 + x)) AS x, AVG(x) AS x, AVG(x) AS x, AVG(x) AS x, COUNT(*) AS x FROM x WHERE x <= CAST('1998-09-02' AS DATE) GROUP BY ALL ORDER BY ALL;
SELECT x, SUM(x * (1 - x)) AS x, x, x FROM x, x, x WHERE x = 'BUILDING' AND x = x AND x = x AND x < CAST('1995-03-15' AS DATE) AND x > CAST('1995-03-15' AS DATE) GROUP BY x, x, x ORDER BY x DESC, x LIMIT 10;
SELECT x, x, SUM(x * (1 - x)) AS x, x, x, x, x, x FROM x, x, x, x WHERE x = x AND x = x AND x >= CAST('1993-10-01' AS DATE) AND x < CAST('1994-01-01' AS DATE) AND x = 'R' AND x = x GROUP BY x, x, x, x, x, x, x ORDER BY x DESC LIMIT 20;
SELECT x, COUNT(*) AS x FROM (SELECT x, COUNT(x) FROM x LEFT OUTER JOIN x ON x = x AND NOT x LIKE '%special%requests%' GROUP BY x) AS x GROUP BY x ORDER BY x DESC, x DESC;
SET x = 'nulls_first';
PRAGMA x;
CREATE TABLE x (x TEXT, x TEXT, x INT);
INSERT INTO x (x, x, x) VALUES ('CS', 'Bachelor', 8), ('CS', 'Bachelor', 8), ('CS', 'PhD', 10), ('Math', 'Masters', NULL), ('CS', NULL, 7), ('CS', NULL, 7), ('Math', NULL, 8);
SELECT x, COUNT(*) FROM x GROUP BY CUBE (x) ORDER BY 1, 2;
SELECT x, x, COUNT(*) FROM x GROUP BY CUBE (x, x) ORDER BY 1, 2, 3;
SELECT x, x, COUNT(*) FROM x GROUP BY CUBE ((x, x)) ORDER BY 1, 2, 3;
SELECT x, x, COUNT(*) FROM x GROUP BY CUBE (x, x, x) ORDER BY 1, 2, 3;
SELECT x, x, x, COUNT(*) FROM x GROUP BY CUBE (x, x, x) ORDER BY 1, 2, 3, 4;
SELECT x, x, COUNT(*) FROM x GROUP BY CUBE (x), CUBE (x) ORDER BY 1, 2, 3;
SELECT x AS x, x, COUNT(*) FROM x GROUP BY (), x, CUBE (x) ORDER BY 1, 2, 3;
SELECT x AS x, x, COUNT(*) FROM x GROUP BY (), x, CUBE (x) ORDER BY 1, 2, 3;
SELECT x, COUNT(*) FROM x GROUP BY WITH CUBE ORDER BY 1, 2;
SELECT x, COUNT(*) FROM x GROUP BY WITH CUBE ORDER BY 1, 2;
SELECT x, COUNT(*) FROM x GROUP BY CUBE (GROUPING_SETS(x)) ORDER BY 1, 2;
SELECT x, x, COUNT(*) FROM x GROUP BY CUBE (x, x, x, x, x, x, x, x, x, x, x, x, (x, x), (x, x), x, x) ORDER BY 1, 2, 3;
SELECT x, x, COUNT(*) FROM x GROUP BY CUBE (x, x, x, x, x), CUBE (x, x, x, x), CUBE (x, x, x, (x, x), (x, x), x, x) ORDER BY 1, 2, 3;
SET x = 'nulls_first';
PRAGMA x;
CREATE TABLE x (x TEXT, x TEXT);
INSERT INTO x (x, x) VALUES ('CS', 'Bachelor'), ('CS', 'Bachelor'), ('CS', 'PhD'), ('Math', 'Masters'), ('CS', NULL), ('CS', NULL), ('Math', NULL);
SELECT GROUPING(x), x, COUNT(*) FROM x GROUP BY x ORDER BY 1, 2, 3;
SELECT GROUPING_ID(x), x, COUNT(*) FROM x GROUP BY x ORDER BY 1, 2, 3;
SELECT GROUPING(x), GROUPING(x), x, x, COUNT(*) FROM x GROUP BY x, x ORDER BY 1, 2, 3, 4, 5;
SELECT GROUPING(x), GROUPING(x), x, x, COUNT(*) FROM x GROUP BY CUBE (x, x) ORDER BY 1, 2, 3, 4, 5;
SELECT GROUPING(x, x), x, x, COUNT(*) FROM x GROUP BY CUBE (x, x) ORDER BY 1, 2, 3, 4;
SELECT GROUPING(x), GROUPING(x), GROUPING(x) + GROUPING(x), x, x, COUNT(*) FROM x GROUP BY CUBE (x, x) ORDER BY 1, 2, 3, 4, 5;
SELECT GROUPING(x, x, x, x, x, x, x), x, x, COUNT(*) FROM x GROUP BY CUBE (x, x) ORDER BY 1, 2, 3, 4;
SELECT GROUPING(x.x), GROUPING(x.x), GROUPING(x) + GROUPING(x), x, x, COUNT(*) FROM x GROUP BY CUBE (x, x) ORDER BY 1, 2, 3, 4, 5;
SELECT GROUPING(x), GROUPING(x), GROUPING(x) + GROUPING(x), x, x, COUNT(*) FROM x GROUP BY CUBE (x.x, x.x) ORDER BY 1, 2, 3, 4, 5;
SELECT GROUPING(x), GROUPING(x), x, x, COUNT(*) FROM x GROUP BY CUBE (x, x) HAVING GROUPING(x) = 0 ORDER BY 1, 2, 3, 4, 5;
SELECT GROUPING(x), GROUPING(x), x, x, COUNT(*) FROM x GROUP BY CUBE (x, x) HAVING GROUPING(x.x) = 0 ORDER BY 1, 2, 3, 4, 5;
SELECT x, x, COUNT(*) FROM x GROUP BY CUBE (x, x) ORDER BY GROUPING(x), GROUPING(x), 1, 2, 3;
SELECT GROUPING();
SELECT GROUPING() FROM x;
SELECT GROUPING(NULL) FROM x;
SELECT GROUPING(x) FROM x;
SELECT GROUPING(x) FROM x GROUP BY ();
SELECT GROUPING(x) FROM x GROUP BY x;
SELECT GROUPING(x) FROM x WHERE GROUPING(x) = 0 GROUP BY x;
SELECT GROUPING(x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x), x, x, COUNT(*) FROM x GROUP BY CUBE (x, x) ORDER BY 1, 2, 3, 4;
SET x = 'nulls_first';
PRAGMA x;
CREATE TABLE x (x TEXT, x TEXT);
INSERT INTO x (x, x) VALUES ('CS', 'Bachelor'), ('CS', 'Bachelor'), ('CS', 'PhD'), ('Math', 'Masters'), ('CS', NULL), ('CS', NULL), ('Math', NULL);
SELECT 1 FROM x GROUP BY ();
SELECT COUNT(*) FROM x GROUP BY ();
SELECT x, x, COUNT(*) FROM x GROUP BY x, x ORDER BY 1, 2, 3;
SELECT x, x, COUNT(*) FROM x GROUP BY (x, x) ORDER BY 1, 2, 3;
SELECT x, COUNT(*) FROM x GROUP BY (), x, () ORDER BY 1;
SELECT COUNT(*), x, x FROM x GROUP BY GROUPING SETS ((x), (x)) ORDER BY 1, 2, 3;
SELECT COUNT(*), x, x FROM x GROUP BY GROUPING SETS (x), GROUPING SETS (x) ORDER BY 1, 2, 3;
SELECT COUNT(*), x, x FROM x GROUP BY x, GROUPING SETS (x) ORDER BY 1, 2, 3;
SELECT COUNT(*), x, x FROM x GROUP BY x, GROUPING SETS (x, ()) ORDER BY 1, 2, 3;
SELECT COUNT(*), x, x FROM x GROUP BY GROUPING SETS ((x, x), (x)) ORDER BY 1, 2, 3;
SELECT COUNT(*), x, x FROM x GROUP BY GROUPING SETS ((x, x), (x)) ORDER BY 1, 2, 3;
SELECT COUNT(*), x, x FROM x GROUP BY GROUPING SETS ((x, x), (x)) ORDER BY 1, 2, 3;
SELECT COUNT(*), x, x FROM x GROUP BY GROUPING SETS ((x), (), (x)) ORDER BY 1, 2, 3;
SELECT COUNT(*), x, x FROM x GROUP BY GROUPING SETS (x, ()), GROUPING SETS (x) ORDER BY 1, 2, 3;
SELECT COUNT(*), x, x FROM x GROUP BY x, GROUPING SETS (x, ()) ORDER BY 1, 2, 3;
SELECT COUNT(*), x, x FROM x GROUP BY GROUPING SETS ((x, x), (x)) ORDER BY 1, 2, 3;
SELECT COUNT(*), x, x FROM x GROUP BY GROUPING SETS ((2, 3), (3)) ORDER BY 1, 2, 3;
SELECT COUNT(*), x AS x, x AS x FROM x GROUP BY GROUPING SETS ((x, x), (x)) ORDER BY 1, 2, 3;
SELECT COUNT(*), x AS x, x AS x FROM x GROUP BY GROUPING SETS ((x, x), (x)) ORDER BY 1, 2, 3;
SELECT x FROM x GROUP BY ();
SET x = 'nulls_first';
PRAGMA x;
CREATE TABLE x (x TEXT, x TEXT);
INSERT INTO x (x, x) VALUES ('CS', 'Bachelor'), ('CS', 'Bachelor'), ('CS', 'PhD'), ('Math', 'Masters'), ('CS', NULL), ('CS', NULL), ('Math', NULL);
SELECT x, COUNT(*) FROM x GROUP BY GROUPING SETS ((), (x)) HAVING x LIKE 'C%' ORDER BY 1, 2;
SELECT x, COUNT(*) FROM x GROUP BY GROUPING SETS ((), (x)) HAVING x LIKE 'C%' OR NOT x LIKE 'C%' OR x IS NULL ORDER BY 1, 2;
SELECT x, COUNT(*) FROM x GROUP BY GROUPING SETS ((), (x)) HAVING RANDOM() < 1000 ORDER BY ALL;
SELECT x, COUNT(*) FROM x GROUP BY GROUPING SETS ((), (x)) HAVING RANDOM() > 1000;
PRAGMA x;
CREATE TABLE x (x BIGINT, x TEXT);
INSERT INTO x VALUES (1, 'yes'), (1, 'no'), (1, 'yes'), (2, 'no'), (2, 'no');
CREATE TABLE x (x BIGINT, "x" TEXT);
INSERT INTO x VALUES (1, 'alice'), (2, 'bob');
SELECT x, x, COUNT(DISTINCT x) FROM x JOIN x USING (x) GROUP BY CUBE (x, x) ORDER BY 1, 2, 3;
CREATE TABLE x AS SELECT x, CAST(x AS TEXT) AS x FROM x AS x;
SELECT COUNT(*) FROM (SELECT * FROM x GROUP BY CUBE (x, x)) AS x;
SELECT COUNT(*) FROM (SELECT * FROM x GROUP BY ROLLUP (x, x)) AS x;
PRAGMA x;
SELECT COUNT(*) GROUP BY GROUPING SETS ((), ());
SET x = 'nulls_first';
PRAGMA x;
CREATE TABLE x (x TEXT, x TEXT);
INSERT INTO x (x, x) VALUES ('CS', 'Bachelor'), ('CS', 'Bachelor'), ('CS', 'PhD'), ('Math', 'Masters'), ('CS', NULL), ('CS', NULL), ('Math', NULL);
SELECT x, COUNT(*) FROM x GROUP BY ROLLUP (x) ORDER BY 1, 2;
SELECT x, x, COUNT(*) FROM x GROUP BY ROLLUP (x, x) ORDER BY 1, 2, 3;
SELECT x, x, COUNT(*) FROM x GROUP BY ROLLUP ((x, x)) ORDER BY 1, 2, 3;
SELECT x, x, COUNT(*) FROM x GROUP BY ROLLUP (x, x, x) ORDER BY 1, 2, 3;
SELECT x, x, COUNT(*) FROM x GROUP BY GROUPING SETS ((x, x), (x), ()) ORDER BY 1, 2, 3;
SELECT x, x, COUNT(*) FROM x GROUP BY ROLLUP (x), ROLLUP (x) ORDER BY 1, 2, 3;
SELECT x AS x, x, COUNT(*) FROM x GROUP BY (), x, ROLLUP (x) ORDER BY 1, 2, 3;
SELECT x AS x, x, COUNT(*) FROM x GROUP BY (), x, ROLLUP (x) ORDER BY 1, 2, 3;
SELECT x, COUNT(*) FROM x GROUP BY WITH ROLLUP ORDER BY 1, 2;
SELECT x, COUNT(*) FROM x GROUP BY WITH ROLLUP ORDER BY 1, 2;
SELECT x, COUNT(*) FROM x GROUP BY ROLLUP (GROUPING_SETS(x)) ORDER BY 1, 2;
PRAGMA x;
SELECT x, SUM(x) AS x FROM (VALUES (1, 0), (1, 1)) AS x GROUP BY x HAVING x > 0 ORDER BY ALL;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (42), (84);
SELECT x + 1 AS x FROM x GROUP BY x HAVING x = 42;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (42), (84), (42);
SELECT x AS x, SUM(x) AS x FROM x GROUP BY x HAVING x = 42;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (11, 22), (13, 22), (12, 21);
SELECT x, SUM(x) AS x FROM x GROUP BY x HAVING x = 21 ORDER BY x;
SELECT x, SUM(x) FROM x GROUP BY x HAVING SUM(x) < 20 ORDER BY x;
SELECT x, SUM(x) AS x FROM x GROUP BY x HAVING x < 20 ORDER BY x;
SELECT x, SUM(x) AS x FROM x GROUP BY x HAVING SUM(x) < 20 ORDER BY x;
SELECT x, SUM(x) AS x FROM x GROUP BY x HAVING COUNT(*) = 1 ORDER BY x;
SELECT x, SUM(x) FROM x GROUP BY x HAVING SUM(x) + 10 > 28;
SELECT x, SUM(x) FROM x GROUP BY x HAVING SUM(x) > (SELECT SUM(x.x) * 0.5 FROM x AS x);
SELECT x.x, SUM(x) FROM x GROUP BY x.x HAVING SUM(x) = (SELECT SUM(x) FROM x AS x WHERE x.x = x.x) ORDER BY x.x;
SELECT x.x, SUM(x) FROM x GROUP BY x.x HAVING SUM(x) * 2 = (SELECT SUM(x) + SUM(x.x) FROM x AS x WHERE x.x = x.x) ORDER BY x.x;
SELECT x.x, SUM(x) FROM x GROUP BY x.x HAVING SUM(x) * 2 + 2 = (SELECT SUM(x) + SUM(x.x) + COUNT(x.x) FROM x AS x WHERE x.x = x.x) ORDER BY x.x;
SELECT x.x, SUM(x) FROM x GROUP BY x.x ORDER BY (SELECT SUM(x) FROM x AS x WHERE x.x = x.x) DESC;
SELECT 42 HAVING 42 > 20;
SELECT 42 HAVING 42 > 80;
SELECT SUM(42) HAVING AVG(42) > MIN(20);
SELECT SUM(42) HAVING SUM(42) > SUM(80);
SELECT SUM(42) + COUNT(*) + COUNT(1), 3 HAVING SUM(42) + MAX(20) + AVG(30) > SUM(120) - MIN(100);
SELECT SUM(42) HAVING (SELECT SUM(42)) > SUM(80);
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (11, 22), (13, 22), (12, 21);
SELECT x FROM x WHERE x = 13 HAVING x > 11;
SELECT x FROM x WHERE x = 13 HAVING SUM(x) > 11;
SELECT SUM(x) FROM x WHERE x = 13 HAVING SUM(x) > 11;
SELECT SUM(x) FROM x WHERE x = 13 HAVING SUM(x) > 20;
SELECT SUM(x) FROM x HAVING SUM(x) > 10;
SELECT SUM(x) FROM x HAVING SUM(x) < 10;
SELECT SUM(x) FROM x HAVING COUNT(*) > 1;
SELECT SUM(x) FROM x HAVING COUNT(*) > 10;
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (11, 22), (13, 22), (12, 21);
CREATE TABLE x (x INT, x TEXT, x INT);
INSERT INTO x VALUES (1, 'A', 1), (2, 'A', 2), (3, 'B', 1), (4, 'B', 2);
SELECT * FROM x QUALIFY ROW_NUMBER() OVER (PARTITION BY x ORDER BY x) = 1 ORDER BY x;
SELECT x, x, x, ROW_NUMBER() OVER (PARTITION BY x ORDER BY x) AS x FROM x QUALIFY x = 1 ORDER BY x;
CREATE TABLE x (x TEXT, x TEXT, x INT);
INSERT INTO x VALUES ('Lily', 'Maths', 65), ('Lily', 'Science', 80), ('Lily', 'english', 70), ('Isabella', 'Maths', 50), ('Isabella', 'Science', 70), ('Isabella', 'english', 90), ('Olivia', 'Maths', 55), ('Olivia', 'Science', 60), ('Olivia', 'english', 89);
SELECT * FROM x QUALIFY RANK() OVER (ORDER BY x DESC) = 4;
SELECT * FROM x QUALIFY RANK() OVER (PARTITION BY x ORDER BY x DESC) = 2 ORDER BY x;
SELECT * FROM x WINDOW x AS (ORDER BY x) QUALIFY ROW_NUMBER() OVER x >= 1 AND (RANK() OVER x) <= 2 ORDER BY x;
SELECT * FROM x QUALIFY FIRST_VALUE(x) OVER (PARTITION BY x ORDER BY x) >= 60 ORDER BY x;
SELECT * FROM x QUALIFY LAST_VALUE(x) OVER (PARTITION BY x ORDER BY x) >= 85 ORDER BY x;
CREATE TABLE x (x TEXT, x DATE, x INT);
INSERT INTO x VALUES ('Boston', '2019-01-02', 564337), ('Boston', '2019-01-03', 507405), ('Boston', '2019-01-04', 528523), ('Boston', '2019-01-05', 469538), ('Boston', '2019-01-06', 474163), ('Boston', '2019-01-07', 507213), ('Boston', '2019-01-08', 613040), ('Boston', '2019-01-09', 582588), ('Boston', '2019-01-10', 499506), ('Boston', '2019-01-11', 482014), ('Boston', '2019-01-12', 486134), ('Boston', '2019-01-13', 531518), ('Worcester', '2019-01-02', 118860), ('Worcester', '2019-01-03', 101977), ('Worcester', '2019-01-04', 106054), ('Worcester', '2019-01-05', 92182), ('Worcester', '2019-01-06', 94492), ('Worcester', '2019-01-07', 99932), ('Worcester', '2019-01-08', 118854), ('Worcester', '2019-01-09', 113506), ('Worcester', '2019-01-10', 96644), ('Worcester', '2019-01-11', 93806), ('Worcester', '2019-01-12', 98963), ('Worcester', '2019-01-13', 107170);
SELECT * FROM x QUALIFY RANK() OVER (PARTITION BY x ORDER BY x DESC) = 2 ORDER BY x;
SELECT * FROM (SELECT x, x, AVG(x) OVER (PARTITION BY x ORDER BY x ASC RANGE BETWEEN INTERVAL '3' DAYS PRECEDING AND INTERVAL '3' DAYS FOLLOWING) AS x FROM x ORDER BY x, x DESC) QUALIFY ROW_NUMBER() OVER (PARTITION BY x ORDER BY x DESC) = 1 ORDER BY x;
SELECT x, SUM(x) AS x FROM x GROUP BY x QUALIFY ROW_NUMBER() OVER (PARTITION BY x) >= 1 AND x < 20 ORDER BY x;
SELECT x, SUM(x) AS x FROM x GROUP BY x QUALIFY ROW_NUMBER() OVER (PARTITION BY x) > x * 10;
SELECT * FROM x QUALIFY ROW_NUMBER() OVER (PARTITION BY x ORDER BY x) = (SELECT MAX(x) FROM x) ORDER BY x;
CREATE TABLE x (x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x TEXT, x TEXT, x TEXT);
INSERT INTO x VALUES (8800, 0, 0, 0, 0, 0, 0, 800, 800, 3800, 8800, 0, 1, 'MAAAAA', 'AAAAAA', 'AAAAxx'), (1891, 1, 1, 3, 1, 11, 91, 891, 1891, 1891, 1891, 182, 183, 'TUAAAA', 'BAAAAA', 'HHHHxx'), (3420, 2, 0, 0, 0, 0, 20, 420, 1420, 3420, 3420, 40, 41, 'OBAAAA', 'CAAAAA', 'OOOOxx'), (9850, 3, 0, 2, 0, 10, 50, 850, 1850, 4850, 9850, 100, 101, 'WOAAAA', 'DAAAAA', 'VVVVxx'), (7164, 4, 0, 0, 4, 4, 64, 164, 1164, 2164, 7164, 128, 129, 'OPAAAA', 'EAAAAA', 'AAAAxx'), (8009, 5, 1, 1, 9, 9, 9, 9, 9, 3009, 8009, 18, 19, 'BWAAAA', 'FAAAAA', 'HHHHxx'), (5057, 6, 1, 1, 7, 17, 57, 57, 1057, 57, 5057, 114, 115, 'NMAAAA', 'GAAAAA', 'OOOOxx'), (6701, 7, 1, 1, 1, 1, 1, 701, 701, 1701, 6701, 2, 3, 'TXAAAA', 'HAAAAA', 'VVVVxx'), (4321, 8, 1, 1, 1, 1, 21, 321, 321, 4321, 4321, 42, 43, 'FKAAAA', 'IAAAAA', 'AAAAxx'), (3043, 9, 1, 3, 3, 3, 43, 43, 1043, 3043, 3043, 86, 87, 'BNAAAA', 'JAAAAA', 'HHHHxx');
SELECT x FROM x QUALIFY CAST(CUME_DIST() OVER (PARTITION BY x ORDER BY x) * 10 AS INT) = 5 ORDER BY x, x;
SELECT x FROM x QUALIFY FIRST_VALUE(x) OVER (PARTITION BY x ORDER BY x) = 1 ORDER BY x, x;
SELECT x FROM x QUALIFY LEAD(x * 2, 1, -1) OVER (PARTITION BY x ORDER BY x) = -1 ORDER BY x, x;
SELECT * FROM (SELECT x FROM x AS x GROUP BY x QUALIFY RANK() OVER (PARTITION BY x.x) = 1) QUALIFY ROW_NUMBER() OVER (PARTITION BY x) = 1 ORDER BY 1;
SELECT * FROM x QUALIFY ROW_NUMBER() OVER (PARTITION BY x.x) = (SELECT MAX(x) FROM x GROUP BY x.x QUALIFY RANK() OVER (PARTITION BY x.x) = 1 ORDER BY x.x LIMIT 1);
SELECT * FROM x WINDOW x AS (ORDER BY x) QUALIFY ROW_NUMBER() OVER x = 1;
SELECT * FROM x WINDOW x AS (ORDER BY x) QUALIFY ROW_NUMBER() OVER x = 1;
SELECT x, AVG(x) AS x FROM x GROUP BY x QUALIFY x > 10;
SELECT x FROM x QUALIFY AVGA() > 10;
SELECT x, SUM(x) FROM x GROUP BY x QUALIFY ROW_NUMBER() OVER (PARTITION BY x) > x;
PRAGMA x;
PRAGMA x = '1TB';
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (11, 22), (13, 22), (12, 21);
SELECT PLUS1(3);
SELECT PLUS1(5);
SELECT PLUS1(2);
SET x = TRUE;
PRAGMA x;
PRAGMA x = '1TB';
CREATE SCHEMA x.x;
CREATE TABLE x.x (x INT, x INT);
INSERT INTO x.x VALUES (11, 22), (13, 22), (12, 21);
CREATE VIEW x.x AS SELECT * FROM x.x QUALIFY ROW_NUMBER() OVER (PARTITION BY x) = 1;
SELECT x, SUM(x) FROM x.x GROUP BY x QUALIFY ROW_NUMBER() OVER (PARTITION BY x) = 1 ORDER BY ALL;
DROP TABLE x.x;
DROP TABLE x.x;
CREATE TABLE x.x (x INT, x INT);
INSERT INTO x.x VALUES (11, 22), (13, 22), (12, 21);
CREATE VIEW x.x AS SELECT * FROM x.x QUALIFY ROW_NUMBER() OVER (PARTITION BY x) = 1;
SELECT x, SUM(x) FROM x.x GROUP BY x QUALIFY ROW_NUMBER() OVER (PARTITION BY x) = 1 ORDER BY ALL;
DROP TABLE x.x CASCADE;
SELECT * FROM x.x;
PRAGMA x;
PRAGMA x = '1TB';
CREATE SCHEMA x.x;
CREATE TABLE x.x (x INT, x INT);
INSERT INTO x.x VALUES (11, 22), (13, 22), (12, 21);
CREATE VIEW x.x AS SELECT * FROM x.x QUALIFY ROW_NUMBER() OVER (PARTITION BY x) = 1;
SELECT x, SUM(x) FROM x.x GROUP BY x QUALIFY ROW_NUMBER() OVER (PARTITION BY x) = 1 ORDER BY ALL;
SELECT x, SUM(x) FROM x.x GROUP BY x QUALIFY ROW_NUMBER() OVER (PARTITION BY x) = 1 ORDER BY ALL;
CREATE TABLE x.x (x INT, x INT);
INSERT INTO x.x VALUES (11, 22), (13, 22), (12, 21);
SELECT x, SUM(x) FROM x.x GROUP BY x QUALIFY ROW_NUMBER() OVER (PARTITION BY x) = 1 ORDER BY ALL;
DROP TABLE x.x;
SELECT * FROM x.x;
PRAGMA x;
CREATE TABLE x (x INT);
PRAGMA x;
CREATE TABLE x (x INT);
ALTER TABLE IF EXISTS x ADD COLUMN x INT;
INSERT INTO x VALUES (42);
ALTER TABLE IF EXISTS x ADD COLUMN IF NOT EXISTS x INT;
INSERT INTO x VALUES (42);
CREATE TABLE x (x INT);
ALTER TABLE x ADD COLUMN IF NOT EXISTS x INT;
INSERT INTO x VALUES (42);
ALTER TABLE x ADD COLUMN x INT;
ALTER TABLE x ADD COLUMN x INT;
INSERT INTO x VALUES (42, 43);
ALTER TABLE x ADD COLUMN IF NOT EXISTS x INT;
INSERT INTO x VALUES (42, 43, 44);
ALTER TABLE IF EXISTS x DROP COLUMN IF EXISTS x;
ALTER TABLE IF EXISTS x DROP COLUMN IF EXISTS x;
ALTER TABLE x DROP COLUMN IF EXISTS x;
ALTER TABLE x DROP COLUMN x;
ALTER TABLE x DROP COLUMN x;
ALTER TABLE x DROP COLUMN IF EXISTS x;
ALTER TABLE IF EXISTS x DROP COLUMN x;
ALTER TABLE IF EXISTS x ALTER COLUMN x SET DATA TYPE TEXT;
ALTER TABLE IF EXISTS x ALTER COLUMN CASE WHEN x THEN x END SET DATA TYPE TEXT;
CREATE TABLE x (x INT, x INT);
ALTER TABLE x DROP COLUMN IF EXISTS x;
SELECT x FROM x;
INSERT INTO x VALUES (10, 5);
SELECT x FROM x;
ALTER TABLE x ADD COLUMN x INT;
INSERT INTO x VALUES (20, 10, 1337);
ALTER TABLE x DROP COLUMN IF EXISTS x;
INSERT INTO x VALUES (30, 20);
ALTER TABLE x ADD COLUMN IF NOT EXISTS x INT;
INSERT INTO x VALUES (40, 30, 1337);
ALTER TABLE x ADD COLUMN IF NOT EXISTS x INT;
ALTER TABLE x DROP COLUMN x;
SELECT x FROM x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (2, 2);
ALTER TABLE x ADD COLUMN x INT;
SELECT * FROM x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (2, 2);
BEGIN;
INSERT INTO x VALUES (3, 3);
ALTER TABLE x ADD COLUMN x INT;
ALTER TABLE x ADD COLUMN x INT;
ALTER TABLE x ADD COLUMN x INT DEFAULT 3;
SELECT * FROM x;
ROLLBACK;
SELECT * FROM x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (2, 2);
ALTER TABLE x ADD COLUMN x INT DEFAULT 3;
SELECT x, x, x FROM x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (2, 2);
CREATE SEQUENCE x;
ALTER TABLE x ADD COLUMN x INT DEFAULT NEXTVAL('seq');
SELECT * FROM x;
ALTER TABLE x ADD COLUMN x INT DEFAULT CURRVAL('seq');
SELECT * FROM x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (2, 2);
ALTER TABLE x ADD COLUMN x INT;
CREATE VIEW x (x) AS (SELECT 1);
ALTER VIEW x ADD COLUMN x INT;
ALTER TABLE x ADD COLUMN x INT, ADD COLUMN x INT;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (2, 2);
BEGIN;
ALTER TABLE x ADD COLUMN x INT DEFAULT 2;
CREATE INDEX x ON x(x);
COMMIT;
INSERT INTO x VALUES (3, 3, 3);
SELECT * FROM x WHERE x = 2;
SELECT * FROM x WHERE x = 3;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (2, 2);
BEGIN;
ALTER TABLE x ADD COLUMN x INT;
CREATE INDEX x ON x(x);
ROLLBACK;
INSERT INTO x VALUES (3, 3);
SELECT * FROM x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (2, 2);
BEGIN;
INSERT INTO x VALUES (3, 3);
ALTER TABLE x ADD COLUMN x INT;
SELECT * FROM x;
ROLLBACK;
SELECT * FROM x;
INSERT INTO x VALUES (3, 3);
SELECT * FROM x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (2, 2);
CREATE SEQUENCE x;
ALTER TABLE x ADD COLUMN x INT DEFAULT NEXTVAL('seq');
SELECT * FROM x;
SELECT * FROM x WHERE x = 2;
SELECT STATS(x) FROM x LIMIT 1;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (2, 2);
BEGIN;
ALTER TABLE x ADD COLUMN x INT;
ALTER TABLE x ADD COLUMN x INT;
COMMIT;
ALTER TABLE x ADD COLUMN x INT;
DROP TABLE x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (2, 2);
BEGIN;
ALTER TABLE x ADD COLUMN x INT;
INSERT INTO x (x, x) VALUES (3, 3);
DELETE FROM x WHERE x = 1;
SELECT * FROM x;
SELECT * FROM x;
UPDATE x SET x = 100;
SELECT * FROM x;
UPDATE x SET x = 100;
COMMIT;
SELECT * FROM x;
DROP TABLE x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (2, 2);
BEGIN;
INSERT INTO x VALUES (3, 3);
ALTER TABLE x ADD COLUMN x INT;
COMMIT;
CREATE SCHEMA x.x;
CREATE TABLE x.x (x INT);
CREATE TABLE x (x INT);
ALTER TABLE x ADD COLUMN x test_int;
ALTER TABLE x.x ADD COLUMN x main_int;
PRAGMA x;
CREATE TABLE x (x INT, x INT, x TEXT);
INSERT INTO x VALUES (3, 4, 'hello'), (44, 45, '56');
ALTER TABLE x ADD PRIMARY KEY (x, x);
INSERT INTO x VALUES (1, 1, 'foo'), (1, 2, 'bar');
INSERT INTO x VALUES (1, 2, 'oops');
INSERT INTO x VALUES (NULL, 2, 'nada');
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1);
ALTER TABLE x ADD PRIMARY KEY (x);
SELECT * FROM x;
INSERT INTO x VALUES (1, 2);
INSERT INTO x VALUES (2, 1);
INSERT INTO x VALUES (2, NULL);
ALTER TABLE x ADD PRIMARY KEY (x);
ALTER TABLE x ADD PRIMARY KEY (x);
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 2);
ALTER TABLE x ADD PRIMARY KEY (x, x);
INSERT INTO x VALUES (1, 2);
INSERT INTO x (x, x) VALUES (2, 1);
CREATE TABLE x (x INT, x INT);
INSERT INTO x SELECT x, x + 1 FROM x;
ALTER TABLE x ADD PRIMARY KEY (x);
SELECT * FROM x WHERE x = 2;
PRAGMA x;
CREATE TABLE x (x INT, x INT);
ALTER TABLE x ADD PRIMARY KEY (x);
INSERT INTO x VALUES (1, 1);
BEGIN;
ALTER TABLE x ALTER COLUMN x SET NOT NULL;
INSERT INTO x VALUES (2, 1);
ROLLBACK;
INSERT INTO x VALUES (2, 1);
PRAGMA x;
CREATE TABLE x (x INT, x INT);
ALTER TABLE x ADD PRIMARY KEY (x);
INSERT INTO x VALUES (1, 1);
ATTACH ':memory:' AS x;
USE x;
DETACH test_add_pk_attach;
ATTACH '__TEST_DIR__/test_add_pk_attach.db' AS x;
USE x;
ALTER TABLE x ADD PRIMARY KEY (x);
INSERT INTO x VALUES (2, 1);
PRAGMA x;
CREATE TABLE x (x INT, x INT);
ALTER TABLE x ADD PRIMARY KEY (x);
ALTER TABLE x ADD PRIMARY KEY (x, x);
CREATE TABLE x (x INT UNIQUE, x INT);
INSERT INTO x VALUES (1, 10), (2, 20), (3, 30);
INSERT INTO x VALUES (1, 100);
ALTER TABLE x ADD PRIMARY KEY (x);
INSERT INTO x VALUES (1, 101);
INSERT INTO x VALUES (NULL, 100);
PRAGMA x;
CREATE TABLE x (x INT, x INT);
BEGIN;
INSERT INTO x VALUES (1, 1);
ALTER TABLE x ADD PRIMARY KEY (x);
COMMIT;
INSERT INTO x VALUES (2, 1);
PRAGMA x;
CREATE TABLE x (x INT, x INT);
ALTER TABLE x ADD PRIMARY KEY (x);
INSERT INTO x VALUES (1, 1);
INSERT INTO x VALUES (1, 1);
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1);
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x SELECT * FROM x;
SELECT x FROM x WHERE x = 100;
DELETE FROM x WHERE x = 42;
ALTER TABLE x ADD PRIMARY KEY (x);
SELECT x FROM x WHERE x = 100;
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 10), (2, 20), (3, 30), (1, 100);
ALTER TABLE x ADD PRIMARY KEY (x);
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 10), (2, NULL), (3, 30), (4, 40);
ALTER TABLE x ADD PRIMARY KEY (x, x);
DROP TABLE x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (5, 10), (NULL, 20), (7, 30), (8, 100);
ALTER TABLE x ADD PRIMARY KEY (x);
CREATE TABLE x (x INT, x INT, x TEXT);
INSERT INTO x VALUES (1, 10, 'hello'), (2, 20, 'world'), (NULL, NULL, NULL), (3, 100, 'yay');
ALTER TABLE x ADD PRIMARY KEY (x, x);
PRAGMA x;
CREATE TABLE x (x INT[], x INT);
ALTER TABLE x ADD PRIMARY KEY (x);
ALTER TABLE x ADD PRIMARY KEY (x, x);
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1);
CREATE INDEX x ON x(x);
ALTER TABLE x ADD PRIMARY KEY (x);
PRAGMA x;
ALTER TABLE x ADD PRIMARY KEY (x);
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1);
ALTER TABLE x ADD PRIMARY KEY (x);
CREATE INDEX x ON x(x);
PRAGMA x;
PRAGMA x = '1TB';
PRAGMA x;
PRAGMA x;
PRAGMA x;
CREATE TABLE x (x INT, x INT);
BEGIN;
INSERT INTO x VALUES (1, 1);
ALTER TABLE x ADD PRIMARY KEY (x);
INSERT INTO x VALUES (2, 1);
COMMIT;
INSERT INTO x VALUES (1, 1), (2, 1), (2, NULL);
CREATE TABLE x (x INT, x INT);
BEGIN;
INSERT INTO x VALUES (1, 1), (2, 1);
ALTER TABLE x ADD PRIMARY KEY (x);
COMMIT;
PRAGMA x;
CREATE TABLE x (x INT, x INT);
ALTER TABLE x ADD PRIMARY KEY (x);
ALTER TABLE x ADD PRIMARY KEY (x);
INSERT INTO x VALUES (2, 1);
PRAGMA x;
PRAGMA x = '1TB';
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 2), (3, 4);
ALTER TABLE x ADD PRIMARY KEY (x);
INSERT INTO x VALUES (2, 2);
PRAGMA x;
PRAGMA x;
INSERT INTO x VALUES (5, 4);
ALTER TABLE x ADD PRIMARY KEY (x);
ALTER TABLE x ADD PRIMARY KEY (x, x);
ALTER TABLE x ADD PRIMARY KEY (x);
INSERT INTO x VALUES (1, 4);
PRAGMA x;
CREATE TABLE x (x INT, x INT);
BEGIN;
ALTER TABLE x ADD PRIMARY KEY (x);
BEGIN;
ALTER TABLE x ADD PRIMARY KEY (x);
BEGIN;
ROLLBACK;
ROLLBACK;
ALTER TABLE x ADD PRIMARY KEY (x);
COMMIT;
INSERT INTO x VALUES (1, 1), (1, 1);
PRAGMA x;
CREATE TABLE x (x INT, x INT);
BEGIN;
ALTER TABLE x ADD PRIMARY KEY (x);
ALTER TABLE x ADD PRIMARY KEY (x);
COMMIT;
CREATE TABLE x (x INT PRIMARY KEY, x INT);
ALTER TABLE x ADD PRIMARY KEY (x, x);
ALTER TABLE x ADD PRIMARY KEY (x);
ALTER TABLE x ADD PRIMARY KEY (x);
PRAGMA x;
CREATE TABLE x (x INT, x INT NOT NULL);
INSERT INTO x VALUES (1, 1), (2, 2);
INSERT INTO x VALUES (3, NULL);
SELECT * FROM x;
ALTER TABLE x ALTER COLUMN x DROP NOT NULL;
INSERT INTO x VALUES (3, NULL);
SELECT * FROM x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (2, 2);
ALTER TABLE x ALTER COLUMN x DROP NOT NULL;
INSERT INTO x VALUES (3, NULL);
DROP TABLE IF EXISTS x;
CREATE TABLE x (x AS (1), x INT NOT NULL);
INSERT INTO x VALUES (1), (2);
INSERT INTO x VALUES (NULL);
SELECT * FROM x;
ALTER TABLE x ALTER COLUMN x DROP NOT NULL;
ALTER TABLE x ALTER COLUMN x DROP NOT NULL;
INSERT INTO x VALUES (NULL);
SELECT * FROM x;
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x SELECT x, x FROM x AS x;
BEGIN;
INSERT INTO x VALUES (9999, NULL);
ALTER TABLE x ALTER COLUMN x SET NOT NULL;
ROLLBACK;
INSERT INTO x VALUES (9999, NULL);
ALTER TABLE x ALTER COLUMN x SET NOT NULL;
SELECT x FROM x WHERE x IS NULL;
DROP TABLE IF EXISTS x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x SELECT x, x FROM x AS x;
BEGIN;
INSERT INTO x VALUES (8888, 8888);
ALTER TABLE x ALTER COLUMN x SET NOT NULL;
COMMIT;
INSERT INTO x VALUES (9999, NULL);
SELECT * FROM x WHERE x = 8888;
DROP TABLE IF EXISTS x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x SELECT 1, 1 FROM x;
BEGIN;
ALTER TABLE x ALTER COLUMN x SET NOT NULL;
INSERT INTO x VALUES (2, 2);
ALTER TABLE x ALTER COLUMN x DROP NOT NULL;
INSERT INTO x VALUES (3, NULL);
COMMIT;
INSERT INTO x VALUES (4, NULL);
SELECT * FROM x WHERE x IS NULL;
DROP TABLE IF EXISTS x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x SELECT 1, 1 FROM x;
BEGIN;
ALTER TABLE x ALTER COLUMN x SET NOT NULL;
INSERT INTO x VALUES (8888, 8888);
ROLLBACK;
INSERT INTO x VALUES (9999, NULL);
SELECT x FROM x WHERE x IS NULL;
DROP TABLE IF EXISTS x;
CREATE TABLE x (x INT, x INT);
ALTER TABLE x ALTER COLUMN x SET NOT NULL;
INSERT INTO x SELECT 1, 1 FROM x;
BEGIN;
ALTER TABLE x ALTER COLUMN x DROP NOT NULL;
INSERT INTO x VALUES (7777, NULL);
ROLLBACK;
INSERT INTO x VALUES (8888, NULL);
SELECT COUNT(*) FROM x WHERE x IS NULL;
DROP TABLE IF EXISTS x;
BEGIN;
CREATE TABLE x (x INT);
ALTER TABLE x ALTER COLUMN x SET NOT NULL;
INSERT INTO x SELECT 1 FROM x;
COMMIT;
INSERT INTO x VALUES (NULL);
DROP TABLE IF EXISTS x;
BEGIN;
CREATE TABLE x (x INT NOT NULL);
INSERT INTO x SELECT 1 FROM x;
ALTER TABLE x ALTER COLUMN x DROP NOT NULL;
INSERT INTO x VALUES (NULL);
COMMIT;
COMMIT;
DROP TABLE IF EXISTS x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x SELECT 1, 1 FROM x;
INSERT INTO x VALUES (2, NULL);
BEGIN;
DELETE FROM x WHERE x = 2;
ALTER TABLE x ALTER COLUMN x SET NOT NULL;
COMMIT;
INSERT INTO x VALUES (3, NULL);
SELECT COUNT(*) FROM x WHERE x IS NULL;
PRAGMA x;
CREATE TABLE x (x INT, x INT);
BEGIN;
ALTER TABLE x ALTER COLUMN x SET NOT NULL;
BEGIN;
INSERT INTO x VALUES (7777, NULL);
INSERT INTO x VALUES (7, 7);
ROLLBACK;
COMMIT;
SELECT x FROM x;
DROP TABLE IF EXISTS x;
CREATE TABLE x (x INT, x INT);
BEGIN;
BEGIN;
INSERT INTO x VALUES (7777, NULL);
ALTER TABLE x ALTER COLUMN x SET NOT NULL;
COMMIT;
COMMIT;
INSERT INTO x VALUES (7777, NULL);
SELECT COUNT(*) FROM x;
DROP TABLE IF EXISTS x;
CREATE TABLE x (x INT, x INT);
BEGIN;
ALTER TABLE x ALTER COLUMN x SET NOT NULL;
BEGIN;
INSERT INTO x VALUES (1, 1);
COMMIT;
ROLLBACK;
SELECT COUNT(*) FROM x;
DROP TABLE IF EXISTS x;
CREATE TABLE x (x INT, x INT);
BEGIN;
BEGIN;
ALTER TABLE x ALTER COLUMN x SET NOT NULL;
COMMIT;
INSERT INTO x VALUES (1, NULL);
ROLLBACK;
SELECT COUNT(*) FROM x;
DROP TABLE IF EXISTS x;
CREATE TABLE x (x INT, x INT);
BEGIN;
BEGIN;
INSERT INTO x VALUES (1, NULL);
ALTER TABLE x ALTER COLUMN x SET NOT NULL;
COMMIT;
COMMIT;
INSERT INTO x VALUES (2, NULL);
SELECT COUNT(*) FROM x;
DROP TABLE IF EXISTS x;
CREATE TABLE x (x INT, x INT);
BEGIN;
BEGIN;
INSERT INTO x VALUES (1, NULL);
ALTER TABLE x ALTER COLUMN x SET NOT NULL;
COMMIT;
COMMIT;
INSERT INTO x VALUES (2, NULL);
SELECT COUNT(*) FROM x;
DROP TABLE IF EXISTS x;
CREATE TABLE x (x INT, x INT);
BEGIN;
BEGIN;
INSERT INTO x VALUES (1, NULL);
COMMIT;
ALTER TABLE x ALTER COLUMN x SET NOT NULL;
ROLLBACK;
SELECT COUNT(*) FROM x;
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (2, 2);
ALTER TABLE x ALTER COLUMN x SET NOT NULL;
INSERT INTO x VALUES (3, NULL);
ALTER TABLE x ALTER COLUMN x SET NOT NULL;
INSERT INTO x VALUES (3, NULL);
SELECT * FROM x;
INSERT INTO x SELECT 5, 5 FROM x;
ALTER TABLE x ALTER COLUMN x SET NOT NULL;
INSERT INTO x VALUES (6, NULL);
SELECT COUNT(*) FROM x WHERE x IS NULL;
DROP TABLE IF EXISTS x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (2, 2), (3, NULL);
INSERT INTO x SELECT 4, 4 FROM x;
ALTER TABLE x ALTER COLUMN x SET NOT NULL;
INSERT INTO x VALUES (5, NULL);
SELECT * FROM x WHERE x IS NULL;
DROP TABLE IF EXISTS x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x SELECT 1, 1 FROM x;
ALTER TABLE x ALTER COLUMN x SET NOT NULL;
INSERT INTO x VALUES (2, NULL);
ALTER TABLE x ALTER COLUMN x DROP NOT NULL;
INSERT INTO x VALUES (3, NULL);
SELECT * FROM x WHERE x IS NULL;
CREATE TABLE x (x AS (1), x INT);
ALTER TABLE x ALTER COLUMN x SET NOT NULL;
DROP TABLE IF EXISTS x;
CREATE TABLE x (x AS (1), x INT);
INSERT INTO x SELECT 1 FROM x;
ALTER TABLE x ALTER COLUMN x SET NOT NULL;
ALTER TABLE x ALTER COLUMN x SET NOT NULL;
INSERT INTO x VALUES (NULL);
ALTER TABLE x ALTER COLUMN x DROP NOT NULL;
INSERT INTO x VALUES (NULL);
SELECT * FROM x WHERE x IS NULL;
CREATE TABLE x AS SELECT {'x': 42} AS x;
SELECT * FROM x;
SELECT * FROM x;
DROP TABLE x;
CREATE TABLE x AS SELECT {'x': 42} AS x;
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (2, 2);
ALTER TABLE x ALTER COLUMN x SET DATA TYPE TEXT;
SELECT * FROM x ORDER BY ALL;
SELECT * FROM x WHERE x = '1';
ALTER TABLE x ALTER COLUMN x SET DATA TYPE INT;
SELECT * FROM x WHERE x = 1;
PRAGMA x;
SELECT STATS(x) FROM x LIMIT 1;
PRAGMA x;
ALTER TABLE x ALTER COLUMN x SET DATA TYPE INT;
CREATE TABLE x (x STRUCT(x INT));
INSERT INTO x SELECT {'x': x} FROM x;
ALTER TABLE x ALTER COLUMN x DROP DEFAULT;
INSERT INTO x VALUES ({'x': 10000, 'x': NULL, 'x': 'hello'});
SELECT x FROM x ORDER BY x DESC LIMIT 3;
ALTER TABLE x ALTER COLUMN x DROP DEFAULT;
CREATE TABLE x (x INT CHECK (x < 10), x INT);
INSERT INTO x VALUES (1, 1), (2, 2);
ALTER TABLE x ALTER COLUMN x SET DATA TYPE TEXT;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (2, 2);
ALTER TABLE x ALTER COLUMN x SET DATA TYPE TEXT USING CAST(x AS TEXT);
ALTER TABLE x ALTER COLUMN x SET DATA TYPE INT USING CAST(x AS INT);
ALTER TABLE x ALTER COLUMN x SET DATA TYPE TEXT USING CAST(x AS TEXT);
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (2, 2);
ALTER TABLE x ALTER COLUMN x SET DATA TYPE BIGINT USING x + 100;
SELECT * FROM x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (2, 2);
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (2, 2);
CREATE INDEX x ON x(x);
ALTER TABLE x ALTER COLUMN x SET DATA TYPE TEXT;
DROP INDEX x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (2, 2);
BEGIN;
INSERT INTO x VALUES (3, 3);
ALTER TABLE x ALTER COLUMN x SET DATA TYPE BIGINT;
SELECT * FROM x;
COMMIT;
SELECT * FROM x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (2, 2);
ALTER TABLE x ALTER COLUMN x SET DATA TYPE INT USING 2 * (x + x);
SELECT * FROM x;
CREATE TABLE x (x INT NOT NULL, x INT);
INSERT INTO x VALUES (1, 1), (2, 2);
INSERT INTO x VALUES (NULL, 4);
ALTER TABLE x ALTER COLUMN x SET DATA TYPE TEXT;
INSERT INTO x VALUES ('hello', 3);
INSERT INTO x VALUES (NULL, 4);
SELECT * FROM x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (2, 2);
BEGIN;
ALTER TABLE x ALTER COLUMN x SET DATA TYPE TEXT;
UPDATE x SET x = 'hello';
SELECT * FROM x;
ROLLBACK;
SELECT * FROM x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (2, 2);
BEGIN;
ALTER TABLE x ALTER COLUMN x SET DATA TYPE TEXT;
ALTER TABLE x ALTER COLUMN x SET DATA TYPE TEXT;
COMMIT;
ALTER TABLE x ALTER COLUMN x SET DATA TYPE TEXT;
DROP TABLE x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (2, 2);
BEGIN;
ALTER TABLE x ALTER COLUMN x SET DATA TYPE TEXT;
INSERT INTO x (x, x) VALUES (3, 3);
DELETE FROM x WHERE x = 1;
SELECT * FROM x;
SELECT * FROM x;
UPDATE x SET x = 1000;
UPDATE x SET x = 100;
SELECT * FROM x;
COMMIT;
SELECT * FROM x;
DROP TABLE x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (2, 2);
BEGIN;
INSERT INTO x VALUES (3, 3);
ALTER TABLE x ALTER COLUMN x SET DATA TYPE TEXT;
COMMIT;
DROP TABLE x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (2, 2);
BEGIN;
ALTER TABLE x ALTER COLUMN x SET DATA TYPE TEXT;
ALTER TABLE x ALTER COLUMN x SET DATA TYPE TEXT;
CREATE TABLE x (x INT UNIQUE, x INT);
INSERT INTO x VALUES (1, 1), (2, 2);
ALTER TABLE x ALTER COLUMN x SET DATA TYPE TEXT;
ALTER TABLE x ALTER COLUMN x SET DATA TYPE TEXT;
SELECT * FROM x;
PRAGMA x;
CREATE TABLE x (x AS (1), x INT);
INSERT INTO x VALUES (1), (2);
ALTER TABLE x ALTER COLUMN x SET DATA TYPE TEXT;
ALTER TABLE x ALTER COLUMN x SET DATA TYPE TEXT;
SELECT * FROM x;
PRAGMA x;
CREATE TABLE x (x INT, x INT);
ALTER TABLE x ALTER COLUMN x DROP DEFAULT;
INSERT INTO x VALUES (1, 0), (2, 1);
ALTER TABLE x ALTER COLUMN x DROP DEFAULT;
ALTER TABLE x ALTER COLUMN x DROP DEFAULT;
ALTER TABLE x ALTER COLUMN x DROP DEFAULT;
ALTER TABLE x ALTER COLUMN x DROP DEFAULT;
ALTER TABLE x ALTER COLUMN x DROP DEFAULT;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (2, 2);
ALTER TABLE x ALTER COLUMN x SET DEFAULT 3;
INSERT INTO x (x) VALUES (3);
SELECT * FROM x;
ALTER TABLE x ALTER COLUMN x DROP DEFAULT;
INSERT INTO x (x) VALUES (4);
SELECT * FROM x;
CREATE SEQUENCE x;
ALTER TABLE x ALTER COLUMN x SET DEFAULT NEXTVAL('seq');
INSERT INTO x (x) VALUES (5), (6);
SELECT * FROM x;
CREATE TABLE x (x INT PRIMARY KEY, x INT);
ALTER TABLE x ALTER COLUMN x SET DEFAULT 3;
INSERT INTO x (x) VALUES (2);
SELECT * FROM x;
ALTER TABLE x ALTER COLUMN x SET DEFAULT 3;
ALTER TABLE x ALTER COLUMN x DROP DEFAULT;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (2, 2);
ALTER TABLE x DROP COLUMN x;
SELECT * FROM x;
CREATE TABLE x (x INT, x INT CHECK (x < 10));
INSERT INTO x VALUES (1, 1), (2, 2);
SELECT * FROM x;
ALTER TABLE x DROP COLUMN x;
INSERT INTO x VALUES (3);
SELECT * FROM x;
CREATE TABLE x (x INT, x INT CHECK (x + x < 10));
INSERT INTO x VALUES (1, 1), (2, 2);
SELECT * FROM x;
ALTER TABLE x DROP COLUMN x;
CREATE TABLE x (x INT, x INT CHECK (x < 10));
INSERT INTO x VALUES (1, 1), (2, 2);
SELECT * FROM x;
ALTER TABLE x DROP COLUMN x;
INSERT INTO x VALUES (20);
INSERT INTO x VALUES (3);
SELECT * FROM x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (2, 2);
ALTER TABLE x DROP COLUMN x;
ALTER TABLE x DROP COLUMN IF EXISTS x;
ALTER TABLE x DROP COLUMN x;
ALTER TABLE x DROP COLUMN x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (2, 2);
CREATE INDEX x ON x(x);
ALTER TABLE x DROP COLUMN x;
ALTER TABLE x DROP COLUMN x;
CREATE TABLE x (x INT, x INT NOT NULL);
INSERT INTO x VALUES (1, 1), (2, 2);
SELECT * FROM x;
ALTER TABLE x DROP COLUMN x;
INSERT INTO x VALUES (3);
SELECT * FROM x;
CREATE TABLE x (x INT, x INT, x INT NOT NULL);
INSERT INTO x VALUES (1, 1, 11), (2, 2, 12);
SELECT * FROM x;
ALTER TABLE x DROP COLUMN x;
INSERT INTO x VALUES (3, NULL);
INSERT INTO x VALUES (3, 13);
SELECT * FROM x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x SELECT x, x FROM x AS x;
ALTER TABLE x DROP COLUMN x;
DELETE FROM x WHERE x % 2 = 0;
SELECT COUNT(x), SUM(x) FROM x;
UPDATE x SET x = x + 100;
SELECT COUNT(x), SUM(x) FROM x;
CREATE TABLE x (x INT PRIMARY KEY, x INT);
INSERT INTO x VALUES (1, 1), (2, 2);
ALTER TABLE x DROP COLUMN x;
ALTER TABLE x DROP COLUMN x;
INSERT INTO x VALUES (3);
SELECT * FROM x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (2, 2);
BEGIN;
ALTER TABLE x DROP COLUMN x;
SELECT * FROM x;
ROLLBACK;
SELECT * FROM x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (2, 2);
BEGIN;
ALTER TABLE x DROP COLUMN x;
ALTER TABLE x ADD COLUMN x INT;
COMMIT;
ALTER TABLE x ADD COLUMN x INT;
DROP TABLE x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (2, 2);
BEGIN;
ALTER TABLE x DROP COLUMN x;
INSERT INTO x (x, x) VALUES (3, 3);
DELETE FROM x WHERE x = 1;
SELECT * FROM x;
SELECT * FROM x;
UPDATE x SET x = 100;
SELECT * FROM x;
UPDATE x SET x = 100;
COMMIT;
SELECT * FROM x;
DROP TABLE x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (2, 2);
BEGIN;
INSERT INTO x VALUES (3, 3);
ALTER TABLE x DROP COLUMN x;
COMMIT;
DROP TABLE x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (2, 2);
BEGIN;
ALTER TABLE x DROP COLUMN x;
ALTER TABLE x DROP COLUMN x;
CREATE TABLE x (x INT, x AS (2), x INT, x AS (3), x INT);
ALTER TABLE x DROP COLUMN x;
ALTER TABLE x DROP COLUMN x;
ALTER TABLE x DROP COLUMN x;
CREATE TABLE x (x INT, x INT);
ALTER TABLE x RENAME COLUMN x TO x;
SELECT * FROM x;
CREATE TABLE x (x INT CHECK (x < 10), x INT);
INSERT INTO x (x, x) VALUES (1, 2), (2, 3);
INSERT INTO x (x, x) VALUES (100, 2);
ALTER TABLE x RENAME COLUMN x TO x;
INSERT INTO x (x, x) VALUES (1, 2), (2, 3);
INSERT INTO x (x, x) VALUES (100, 2);
CREATE TABLE x (x INT, x INT);
ALTER TABLE x RENAME COLUMN x TO x;
CREATE TABLE x (x INT, x INT);
ALTER TABLE x RENAME COLUMN x TO x;
ALTER TABLE x RENAME COLUMN x TO x;
CREATE TABLE x (x INT NOT NULL, x INT);
INSERT INTO x (x, x) VALUES (1, 2), (2, 3);
INSERT INTO x (x, x) VALUES (NULL, 2);
ALTER TABLE x RENAME COLUMN x TO x;
INSERT INTO x (x, x) VALUES (1, 2), (2, 3);
INSERT INTO x (x, x) VALUES (NULL, 2);
CREATE TABLE x (x INT, x INT);
ALTER TABLE x RENAME COLUMN x TO x;
SELECT x FROM x;
SELECT x FROM x;
ROLLBACK;
SELECT x FROM x;
SELECT x FROM x;
CREATE TABLE x (x INT, x INT);
ALTER TABLE x RENAME COLUMN x TO x;
SELECT x FROM x;
SELECT x FROM x;
SELECT x FROM x;
SELECT x FROM x;
COMMIT;
SELECT x FROM x;
SELECT x FROM x;
COMMIT;
SELECT x FROM x;
CREATE TABLE x (x INT, x INT, PRIMARY KEY (x, x));
INSERT INTO x (x, x) VALUES (1, 1), (2, 2);
INSERT INTO x (x, x) VALUES (1, 1);
ALTER TABLE x RENAME COLUMN x TO x;
INSERT INTO x (x, x) VALUES (3, 3), (4, 4);
INSERT INTO x (x, x) VALUES (1, 1);
CREATE SCHEMA x.x;
SET x = public;
CREATE TABLE x (x INT);
ALTER TABLE x.x RENAME TO x;
ALTER TABLE x RENAME TO x;
CREATE VIEW x AS SELECT 42;
ALTER VIEW x.x RENAME TO x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (999), (100);
BEGIN;
ALTER TABLE x RENAME TO x;
SELECT * FROM x;
SELECT * FROM x;
ROLLBACK;
SELECT * FROM x;
SELECT * FROM x;
BEGIN;
ALTER TABLE x RENAME TO x;
COMMIT;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
BEGIN;
ALTER TABLE x RENAME TO x;
ALTER TABLE x RENAME TO x;
ALTER TABLE x RENAME TO x;
ROLLBACK;
SELECT * FROM x;
SELECT * FROM x;
BEGIN;
ALTER TABLE x RENAME TO x;
ALTER TABLE x RENAME TO x;
ALTER TABLE x RENAME TO x;
COMMIT;
SELECT * FROM x;
SELECT * FROM x;
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
INSERT INTO x VALUES (42);
ALTER TABLE x RENAME TO x;
SELECT * FROM x;
SELECT * FROM x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1);
SELECT * FROM x;
BEGIN;
ALTER TABLE x RENAME TO x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (2);
ALTER TABLE x RENAME TO x;
ALTER TABLE x RENAME TO x;
CREATE TABLE x (x INT);
ALTER TABLE x RENAME TO x;
ALTER TABLE x RENAME TO x;
ALTER TABLE x RENAME TO x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
COMMIT;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1);
SELECT * FROM x;
BEGIN;
ALTER TABLE x RENAME TO x;
CREATE TABLE x (x INT);
ALTER TABLE x RENAME TO x;
ALTER TABLE x RENAME TO x;
CREATE TABLE x (x INT);
ALTER TABLE x RENAME TO x;
ALTER TABLE x RENAME TO x;
ALTER TABLE x RENAME TO x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
ROLLBACK;
SELECT * FROM x;
SELECT * FROM x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3);
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES (4), (5), (6);
BEGIN;
DROP TABLE x;
ALTER TABLE x RENAME TO x;
SELECT x FROM x ORDER BY x;
SELECT x FROM x ORDER BY x;
SELECT x FROM x ORDER BY x;
COMMIT;
SELECT x FROM x ORDER BY x;
SELECT * FROM x;
BEGIN;
ALTER TABLE x RENAME TO x;
SELECT x FROM x ORDER BY x;
SELECT x FROM x ORDER BY x;
SELECT x FROM x ORDER BY x;
DROP TABLE x;
SELECT x FROM x ORDER BY x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (7), (8), (9);
SELECT x FROM x ORDER BY x;
ROLLBACK;
SELECT x FROM x ORDER BY x;
SELECT x FROM x ORDER BY x;
BEGIN;
BEGIN;
ALTER TABLE x RENAME TO x;
CREATE TABLE x (x INT);
ROLLBACK;
ROLLBACK;
BEGIN;
BEGIN;
ALTER TABLE x RENAME TO x;
ALTER TABLE x RENAME TO x;
ROLLBACK;
ROLLBACK;
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
BEGIN;
BEGIN;
DROP TABLE x;
DROP TABLE x;
ALTER TABLE x RENAME TO x;
ALTER TABLE x RENAME TO x;
ROLLBACK;
CREATE TABLE x (x INT PRIMARY KEY, x INT CHECK (x < 10));
INSERT INTO x VALUES (999, 4), (1000, 5);
INSERT INTO x VALUES (999, 4), (1000, 5);
INSERT INTO x VALUES (9999, 0), (10000, 1);
INSERT INTO x VALUES (777, 10), (888, 10);
SELECT * FROM x;
ALTER TABLE x RENAME TO x;
INSERT INTO x VALUES (999, 0), (1000, 1);
INSERT INTO x VALUES (9999, 0), (10000, 1);
INSERT INTO x VALUES (1, 10), (2, 999);
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
ALTER TABLE x RENAME TO x;
ALTER TABLE x RENAME TO x;
SET x = TRUE;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (999), (100);
BEGIN;
ALTER TABLE x RENAME TO x;
BEGIN;
ALTER TABLE x RENAME TO x;
BEGIN;
ALTER TABLE x RENAME TO x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (999), (100);
BEGIN;
BEGIN;
ALTER TABLE x RENAME TO x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
COMMIT;
COMMIT;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
DROP TABLE x;
CREATE TABLE x (x INT);
ALTER TABLE x RENAME TO x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (999), (100);
CREATE VIEW x AS SELECT * FROM x;
ALTER TABLE x RENAME TO x;
SELECT * FROM x;
CREATE TABLE x (x INT);
CREATE UNIQUE INDEX x ON x(x);
ALTER TABLE x RENAME TO x;
CREATE TABLE x (x INT);
ALTER TABLE x RENAME TO x;
DROP TABLE x;
ANALYZE x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1);
BEGIN;
INSERT INTO x VALUES (2);
ALTER TABLE x RENAME TO x;
COMMIT;
SELECT * FROM x;
CREATE TABLE x (x INT);
BEGIN;
ALTER VIEW x RENAME TO x;
SELECT * FROM x;
SELECT * FROM x;
ROLLBACK;
SELECT * FROM x;
SELECT * FROM x;
BEGIN;
ALTER VIEW x RENAME TO x;
COMMIT;
SELECT * FROM x;
SELECT * FROM x;
CREATE VIEW x AS SELECT x + 1 AS x FROM x;
SELECT * FROM x;
ALTER VIEW x RENAME TO x;
ALTER VIEW x RENAME TO x;
CREATE TABLE x (x INT);
CREATE VIEW x AS SELECT * FROM x;
CREATE VIEW x AS SELECT 1729 AS x;
ALTER VIEW x RENAME TO x;
ALTER VIEW x RENAME TO x;
SET x = TRUE;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (999), (100);
CREATE VIEW x AS SELECT * FROM x;
BEGIN;
ALTER VIEW x RENAME TO x;
BEGIN;
ALTER VIEW x RENAME TO x;
BEGIN;
ALTER VIEW x RENAME TO x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (999), (100);
CREATE VIEW x AS SELECT * FROM x;
ALTER VIEW x RENAME TO x;
SELECT * FROM x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (999), (100);
CREATE VIEW x AS SELECT * FROM x;
BEGIN;
BEGIN;
ALTER VIEW x RENAME TO x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
COMMIT;
COMMIT;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
CREATE TABLE x (x STRUCT(x STRUCT(x INT, x INT)));
INSERT INTO x VALUES (ROW(ROW(1, 1))), (ROW(ROW(2, 2)));
SELECT * FROM x;
SELECT * FROM x;
CREATE TABLE x (x STRUCT(x INT, x INT));
INSERT INTO x VALUES (ROW(1, 1)), (ROW(2, 2));
SELECT * FROM x;
SELECT * FROM x;
BEGIN;
SELECT * FROM x;
ROLLBACK;
SELECT * FROM x;
SELECT * FROM x;
CREATE TABLE x (x STRUCT(x INT, x STRUCT(x INT, x INT)));
INSERT INTO x VALUES (ROW(42, ROW(1, 1))), (ROW(84, ROW(2, 2)));
ALTER TABLE x DROP s.s2.v1;
SELECT * FROM x;
ALTER TABLE x DROP COLUMN x.x.x;
ALTER TABLE x DROP COLUMN IF EXISTS x.x.x;
ALTER TABLE x DROP COLUMN x.x;
SELECT * FROM x;
CREATE TABLE x (x STRUCT(x INT, x INT));
INSERT INTO x VALUES (ROW(1, 1)), (ROW(2, 2));
ALTER TABLE x DROP COLUMN x.x;
SELECT * FROM x;
ALTER TABLE x DROP COLUMN x.x;
ALTER TABLE x DROP COLUMN x.x;
ALTER TABLE x DROP COLUMN IF EXISTS x.x;
ALTER TABLE x DROP COLUMN x.x.x;
ALTER TABLE x DROP COLUMN x.x;
ALTER TABLE x DROP COLUMN x.x.x;
CREATE TABLE x (x STRUCT(x STRUCT(x INT, x INT)));
INSERT INTO x VALUES (ROW(ROW(1, 1))), (ROW(ROW(2, 2)));
SELECT * FROM x;
ALTER TABLE x RENAME COLUMN x.x.x TO x;
ALTER TABLE x RENAME COLUMN x.x TO x;
SELECT * FROM x;
CREATE TABLE x (x STRUCT(x INT, x INT));
INSERT INTO x VALUES (ROW(1, 1)), (ROW(2, 2));
SELECT * FROM x;
BEGIN;
SELECT * FROM x;
ROLLBACK;
SELECT * FROM x;
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3), (NULL);
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
SELECT COUNT(*), COUNT(x), SUM(x) FROM x;
ATTACH '__TEST_DIR__/attach_all_types.db' AS x;
CREATE TABLE x.x AS SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x.x;
DETACH db1;
ATTACH '__TEST_DIR__/attach_all_types.db' AS x;
PRAGMA x;
ATTACH '__TEST_DIR__/attach_vacuum.db' AS x;
CREATE TABLE x.x (x INT);
ATTACH '__TEST_DIR__/concurrent_checkpoint.db' AS x;
ATTACH '__TEST_DIR__/concurrent_checkpoint.db' AS x;
INSERT INTO x.x SELECT * FROM x;
SELECT COUNT(*), SUM(x) FROM x.x;
ATTACH ':memory:' AS x;
CREATE TABLE x.x (x INT, x INT, x TEXT);
COPY x.x FROM 'data/csv/test/test.csv';
COPY x.x.x FROM 'data/csv/test/test.csv';
COPY x.x.x TO '__TEST_DIR__/test.csv';
USE x;
COPY x FROM 'data/csv/test/test.csv';
ATTACH '' AS x;
CREATE TABLE x.x (x INT);
ATTACH ':memory:' AS x;
CREATE TABLE x (x INT);
CREATE INDEX x ON x(x);
CREATE INDEX x ON x ON TEST(x);
CREATE TABLE x.x (x mood);
CREATE TABLE x (x mood);
SELECT CAST('happy' AS mood);
USE x;
SELECT CAST('happy' AS mood);
PRAGMA x;
ATTACH '__TEST_DIR__/not_pow_of_two.db' (BLOCK_SIZE 123456);
ATTACH '__TEST_DIR__/exceeds_maximum.db' (BLOCK_SIZE 2147483648);
ATTACH '__TEST_DIR__/not_default.db' (BLOCK_SIZE 16384);
ATTACH '__TEST_DIR__/too_small.db' (BLOCK_SIZE 128);
ATTACH '__TEST_DIR__/default_size.db' (BLOCK_SIZE 262144);
DETACH default_size;
ATTACH '__TEST_DIR__/default_size.db' (BLOCK_SIZE 16384);
ATTACH '__TEST_DIR__/default_size.db';
DETACH default_size;
ATTACH '__TEST_DIR__/dbname.db' (BLOCK_SIZE 16384);
DETACH dbname;
ATTACH '__TEST_DIR__/dbname.db';
SET x = '123456';
SET x = '16384';
SET x = '128';
SET x = '262144';
PRAGMA x;
ATTACH '__TEST_DIR__/attach_database_size.db' AS x;
SELECT x FROM x ORDER BY 1;
ATTACH ':memory:' AS x;
SELECT x FROM x ORDER BY 1;
ATTACH ':memory:' AS "x";
CREATE TABLE "x".x (x INT);
INSERT INTO "x".x VALUES (42);
USE x;
SELECT * FROM x;
USE x;
CREATE SCHEMA "x"."x".x;
CREATE TABLE "x"."x".x (x INT);
INSERT INTO "x"."x".x VALUES (84);
USE "x".x;
SELECT * FROM x;
CREATE SCHEMA "x".x;
PRAGMA x;
ATTACH ':memory:' AS x;
ATTACH ':memory:' AS x;
ATTACH ':memory:';
ATTACH '__TEST_DIR__/test.db' AS x (default_table 'my_table');
SELECT * FROM x;
CREATE OR REPLACE TABLE x.x AS (SELECT 1337 AS x);
SELECT * FROM x;
SELECT * FROM x.x;
SELECT * FROM x.x.x;
CREATE TABLE x AS SELECT 42 AS x;
SELECT * FROM x;
SELECT * FROM x.x.x;
SELECT x.x, x.x FROM x.x.x AS x JOIN x.x.x AS x ON x.x <> x.x;
USE x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x.x;
USE x;
DROP TABLE x.x.x;
CREATE VIEW x AS SELECT 1;
SELECT * FROM x;
CREATE TABLE x (x INT PRIMARY KEY, x TEXT UNIQUE);
CREATE TABLE x (x INT REFERENCES x (x));
CREATE TABLE x (x INT, x INT, x INT NOT NULL, x INT, x INT, x INT, x INT DEFAULT 10, x INT);
ALTER TABLE x ADD COLUMN x INT;
ALTER TABLE x ALTER COLUMN x SET DATA TYPE TEXT USING CONCAT(x, '_', 'yay');
ALTER TABLE x ALTER COLUMN x DROP NOT NULL;
ALTER TABLE x DROP rm;
ALTER TABLE x ALTER COLUMN x SET DEFAULT 10;
ALTER TABLE x ALTER COLUMN x DROP DEFAULT;
ALTER TABLE x ALTER COLUMN x SET NOT NULL;
ATTACH '__TEST_DIR__/fk.db';
ATTACH ':memory:' AS x;
CREATE TABLE x (x INT);
CREATE TABLE x.x (x INT);
SELECT * FROM x;
CREATE SCHEMA x.x.x;
CREATE TABLE x.x.x (x INT);
SELECT * FROM x;
SET x = 0;
SELECT * FROM x;
USE x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x.x;
SELECT * FROM x;
SELECT * FROM x.x;
USE x.x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x.x.x;
SELECT * FROM x;
PRAGMA x;
ATTACH '__TEST_DIR__/attach_alias.db' AS x;
CREATE TABLE x.x AS SELECT 1 AS x;
SELECT * FROM x.x;
DETACH alias1;
ATTACH '__TEST_DIR__/attach_alias.db' AS x;
SELECT * FROM x.x;
PRAGMA x;
ATTACH '__TEST_DIR__/first.db' (TYPE x);
SELECT x FROM x ORDER BY 1;
ATTACH '__TEST_DIR__/error.db' (TYPE x, HELLO, OPTION 2);
ATTACH '__TEST_DIR__/error.db' (HELLO, OPTION 2);
ATTACH '__TEST_DIR__/attach_access1.db' AS x;
ATTACH '__TEST_DIR__/attach_access2.db' AS x;
SET x = FALSE;
CREATE TABLE x.x (x INT PRIMARY KEY, x INT);
CREATE TABLE x.x (x INT PRIMARY KEY, x INT);
ATTACH '__TEST_DIR__/attach_access3.db' AS x;
PRAGMA x;
ATTACH '__TEST_DIR__/encrypted.duckdb' AS x (ENCRYPTION_KEY 'asdf');
ATTACH '__TEST_DIR__/unencrypted.duckdb' (STORAGE_VERSION 'v1.0.0');
CREATE OR REPLACE TABLE x.x AS SELECT * FROM x AS x;
CREATE OR REPLACE TABLE x.x AS SELECT * FROM x AS x;
SELECT SUM(x) FROM x.x;
SELECT SUM(x) FROM x.x;
DETACH encrypted;
DETACH unencrypted;
ATTACH '__TEST_DIR__/encrypted.duckdb' AS x;
ATTACH '__TEST_DIR__/unencrypted.duckdb' AS x (ENCRYPTION_KEY 'asdf');
ATTACH '__TEST_DIR__/unencrypted.duckdb';
ATTACH '__TEST_DIR__/encrypted.duckdb' AS x (ENCRYPTION_KEY 'asdf');
SELECT SUM(x) FROM x.x;
SELECT x FROM x WHERE x LIKE '%encrypted%' ORDER BY x;
DETACH encrypted;
PRAGMA x;
ATTACH '__TEST_DIR__/attach_enums.db' AS x;
SELECT ENUM_RANGE(CAST(NULL AS db1.mood)) AS x;
SELECT ENUM_RANGE(CAST(NULL AS db1.main.mood)) AS x;
SELECT ENUM_RANGE(CAST(NULL AS xx.db1.main.mood)) AS x;
CREATE TABLE x.x (x TEXT, x mood);
INSERT INTO x.x VALUES ('Moe', 'happy');
SELECT * FROM x.x;
DETACH db1;
ATTACH '__TEST_DIR__/attach_enums.db' AS x (READ_ONLY);
SELECT * FROM x.x;
ATTACH '__TEST_DIR__/attach_enums_2.db' AS x;
CREATE TABLE x.x (x TEXT, x mood);
INSERT INTO x.x VALUES ('Moe', 'kkcry');
SELECT * FROM x.x;
SELECT * FROM x.x;
ATTACH ':memory:' AS x;
ATTACH ':memory:' AS x;
USE x;
CREATE TABLE x.x (x INT);
INSERT INTO x.x VALUES (1), (2), (3), (NULL);
CREATE VIEW x.x AS SELECT * FROM x;
BEGIN;
CREATE TABLE x.x (x INT);
CREATE TABLE x.x (x INT);
ROLLBACK;
DROP TABLE x.x CASCADE;
SELECT * FROM x;
DROP VIEW x;
DROP VIEW x;
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
SELECT * FROM x.x;
SET x = FALSE;
ATTACH ':memory:' AS x;
ATTACH 'mydb.db' AS x;
ATTACH ':memory:' AS x;
CREATE TABLE x (x INT, x TEXT, x TEXT, UNIQUE (x, x));
CREATE TABLE x.x (x INT, x INT, x TEXT, x TEXT, FOREIGN KEY (x, x) REFERENCES x (x, x));
USE x;
CREATE TABLE x (x INT, x TEXT, x TEXT, UNIQUE (x, x));
INSERT INTO x VALUES (1, 'A', 'A_cover'), (2, 'B', 'B_cover'), (3, 'C', 'C_cover'), (4, 'D', 'D_cover');
CREATE TABLE x (x INT, x INT, x TEXT, x TEXT, FOREIGN KEY (x, x) REFERENCES x (x, x));
ATTACH ':memory:' AS x;
USE x;
ATTACH 'dummy_extension:/hello.world';
ATTACH 'file://dummy.csv';
PRAGMA x;
ATTACH '__TEST_DIR__/home_dir.db' AS x;
CREATE TABLE x.x AS SELECT * FROM x AS x;
SELECT SUM(x) FROM x.x;
DETACH s1;
SET x = '__TEST_DIR__';
ATTACH '~/home_dir.db' AS x;
SELECT SUM(x) FROM x.x;
ATTACH '${S3_ATTACH_DB_PRESIGNED_URL}' AS x (READONLY 1);
SELECT * FROM x.x;
CREATE TABLE x.x (x INT);
SELECT * FROM x.x;
SELECT * FROM x.x;
ATTACH '__TEST_DIR__/german_collation.db' AS x;
SELECT * FROM x.x;
SELECT * FROM x.x ORDER BY 1;
PRAGMA x;
ATTACH '__TEST_DIR__/attach_if_not_exists.db' AS x;
ATTACH IF NOT EXISTS '__TEST_DIR__/attach_if_not_exists.db' AS x;
ATTACH IF NOT EXISTS ':memory:' AS x;
CREATE TABLE x.x (x INT);
ATTACH IF NOT EXISTS '__TEST_DIR__/attach_if_not_exists.db' AS x;
ATTACH ':memory:' AS x;
DETACH db1;
ATTACH '__TEST_DIR__/attach_if_not_exists.db' AS x (READ_WRITE);
ATTACH IF NOT EXISTS '__TEST_DIR__/attach_if_not_exists.db' AS x (READ_ONLY);
ATTACH IF NOT EXISTS '__TEST_DIR__/attach_if_not_exists.db' AS x;
DETACH db1;
ATTACH '__TEST_DIR__/attach_if_not_exists.db' AS x (READ_ONLY);
ATTACH IF NOT EXISTS '__TEST_DIR__/attach_if_not_exists.db' AS x (READ_WRITE);
ATTACH '__TEST_DIR__/attach_index_db.db';
USE x;
CREATE TABLE x (x INT PRIMARY KEY, x TEXT NOT NULL);
CREATE INDEX x ON x(x);
INSERT INTO x VALUES (1, 'x');
INSERT INTO x VALUES (2, 'y');
SELECT * FROM x WHERE x = 2;
USE x;
DETACH attach_index_db;
ATTACH '__TEST_DIR__/attach_index_db.db';
SELECT * FROM x.x WHERE x = 2;
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('a');
ATTACH '__TEST_DIR__/issue16122_new.db' AS x;
CREATE TABLE x.x (x TEXT);
INSERT INTO x.x SELECT * FROM x;
SELECT * FROM x.x;
ATTACH ':memory:' AS x;
USE x;
CREATE SCHEMA x.x;
CREATE TABLE x.x AS SELECT 1 AS x;
SET x = 'schema2';
SET x = 'schema1';
ATTACH ':memory:' AS x;
USE x;
DETACH test;
USE x;
PRAGMA x;
ATTACH ':memory:' AS x;
USE x;
CREATE TABLE x AS SELECT 1 AS x;
SELECT * FROM x.x;
SELECT * FROM x.x;
USE x;
DETACH test;
DETACH test;
SELECT * FROM x;
PRAGMA x;
ATTACH ':memory:' AS x;
CREATE TABLE x.x AS SELECT 42 AS x, 3 AS x;
SELECT x.two_x_plus_y(x, x) FROM x.x;
SELECT x.x.two_x_plus_y(x, x) FROM x.x;
USE x;
SELECT TWO_X_PLUS_Y(x, x) FROM x.x;
PRAGMA x;
ATTACH ':memory:' AS x;
BEGIN;
CREATE TABLE x.x (x INT);
CREATE TABLE x (x INT);
ROLLBACK;
CREATE TABLE x.x (x INT);
CREATE TABLE x (x INT);
INSERT INTO x.x SELECT * FROM x;
BEGIN;
INSERT INTO x SELECT * FROM x;
INSERT INTO x.x SELECT * FROM x;
PRAGMA x;
ATTACH ':memory:' AS x;
ATTACH ':memory:' AS x;
CREATE SCHEMA x.x.x;
CREATE SCHEMA x.x.x;
CREATE TABLE x.x.x (x INT);
CREATE TABLE x.x.x (x INT);
INSERT INTO x.x.x VALUES (42);
INSERT INTO x.x.x SELECT x * 2 FROM x.x.x;
SELECT * FROM x.x.x, x.x.x;
SELECT x.x.x, x.x.x FROM x.x.x, x.x.x;
SELECT x.x.x.x, x.x.x.x FROM x.x.x, x.x.x;
SELECT * EXCLUDE (x.x.x.x) FROM x.x.x, x.x.x;
SELECT * EXCLUDE (x.x.x.x) FROM x.x.x, x.x.x;
SELECT * EXCLUDE (x.x.x) FROM x.x.x, (SELECT 42) AS x;
SELECT * EXCLUDE (x) FROM (SELECT * RENAME (x.x.x.x AS x) FROM x.x.x, x.x.x);
SELECT * EXCLUDE (x) FROM (SELECT * RENAME (x.x.x.x AS x) FROM x.x.x, x.x.x);
SELECT * EXCLUDE (x) FROM (SELECT * RENAME (x.x.x AS x) FROM x.x.x, (SELECT 42) AS x);
SELECT x.x.x, x.x.x FROM x.x.x, x.x.x;
SELECT x.x, x.x FROM x.x.x, x.x.x;
SELECT x FROM x.x.x, x.x.x;
SELECT x.x FROM x.x.x, x.x.x;
SELECT x.x.x FROM x.x.x, x.x.x;
SELECT x.x.x.x FROM x.x.x, x.x.x;
CREATE OR REPLACE TABLE x.x.x (x INT, x AS (x * x));
INSERT INTO x.x.x VALUES (42);
SELECT * FROM x.x.x, x.x.x;
PRAGMA x;
ATTACH ':memory:' AS x;
CREATE SCHEMA x.x.x;
CREATE SCHEMA x.x.x;
INSERT INTO x.x.x VALUES ({'x': 42});
SELECT x.x."x".x.x FROM x.x.x;
SELECT x.x."x".x FROM x.x.x;
SELECT x.x."x" FROM x.x.x;
SELECT x.x."x" FROM x.x.x;
SELECT x."x" FROM x.x.x;
SELECT "x" FROM x.x.x;
USE DATABASE x;
SELECT "x" FROM x;
SELECT x."x" FROM x;
SELECT x."x" FROM x;
SELECT x.x."x" FROM x;
PRAGMA x;
ATTACH '__TEST_DIR__/test_new_compression.db' AS x (STORAGE_VERSION 'v1.0.0');
SET x = 'roaring';
CREATE TABLE x.x AS SELECT CASE WHEN x % 2 = 0 THEN NULL ELSE x END AS x FROM x AS x;
SET x = 'zstd';
CREATE TABLE x.x AS SELECT GROUP_CONCAT('long_string_' || x, '-') FROM x AS x;
SELECT COUNT(*) > 0 FROM x WHERE x = 'Roaring';
SELECT COUNT(*) > 0 FROM x WHERE x = 'ZSTD';
DETACH db1;
ATTACH '__TEST_DIR__/test_new_compression.db' AS x (STORAGE_VERSION 'v1.2.0');
SET x = 'roaring';
CREATE TABLE x.x AS SELECT * FROM x.x;
SET x = 'zstd';
CREATE TABLE x.x AS SELECT * FROM x.x;
SELECT COUNT(*) > 0 FROM x WHERE x = 'Roaring';
SELECT COUNT(*) > 0 FROM x WHERE x = 'ZSTD';
PRAGMA x;
ATTACH '__TEST_DIR__/attach_or_replace.db' AS x;
CREATE TABLE x.x AS SELECT * FROM x;
ATTACH '__TEST_DIR__/attach_or_replace_new.db' AS x;
CREATE TABLE x.x AS SELECT * FROM x;
DETACH db2;
DETACH db2;
SELECT * FROM x.x;
SELECT * FROM x.x;
SELECT * FROM x.x;
SELECT * FROM x.x;
SELECT * FROM x.x;
SELECT * FROM x.x;
ATTACH '__TEST_DIR__/attach_or_replace.db' AS x;
PRAGMA x;
ATTACH '__TEST_DIR__/persistent_attach.db';
ATTACH '__TEST_DIR__/persistent_attach.db';
CREATE TABLE x.x (x INT);
INSERT INTO x.x VALUES (42);
SELECT SUM(x) FROM x.x;
DETACH persistent_attach;
SELECT SUM(x) FROM x.x;
ATTACH '__TEST_DIR__/persistent_attach.db';
SELECT SUM(x) FROM x.x;
ATTACH '__TEST_DIR__/database.db' AS x;
CREATE OR REPLACE TABLE x.x (x INT);
INSERT INTO x.x VALUES (5);
SELECT x FROM x;
PRAGMA x;
ATTACH ':memory:' AS x (READONLY 1);
ATTACH ':memory:' AS x (BLABLABLA 1);
ATTACH '__TEST_DIR__/attach_read_only.db' AS x (READONLY 1);
ATTACH '__TEST_DIR__/attach_read_only.db' AS x;
CREATE TABLE x.x AS SELECT * FROM x AS x;
DETACH db1;
ATTACH '__TEST_DIR__/attach_read_only.db' AS x (READONLY 1);
SELECT SUM(x) FROM x.x;
CREATE TABLE x.x AS SELECT * FROM x AS x;
ATTACH ':memory:' AS x;
CREATE TABLE x.x AS SELECT * FROM x.x;
SELECT SUM(x) FROM x.x;
SELECT SUM(x) FROM x;
CREATE TABLE x AS SELECT * FROM x AS x;
ATTACH ':memory:' AS x (READ_WRITE);
CREATE TABLE x.x AS SELECT * FROM x;
CREATE TABLE x AS SELECT * FROM x.x;
PRAGMA x;
ATTACH ':memory:' AS x;
CREATE TABLE x.x (x INT);
INSERT INTO x.x VALUES (42);
INSERT INTO x.x VALUES (42);
SELECT * FROM x.x;
INSERT INTO x.x VALUES (48);
ATTACH 'https://duckdb.org/non_existing.db' AS x (READ_ONLY);
ATTACH 'https://duckdb.org/non_existing.db' AS x;
ATTACH 'https://duckdb.org/non_existing.db' AS x (READ_WRITE);
PRAGMA x;
ATTACH '__TEST_DIR__/temp.db';
CREATE TABLE x.x (x INT);
DETACH temp_db;
ATTACH '__TEST_DIR__/system.db';
CREATE TABLE x.x (x INT);
DETACH system_db;
ATTACH ':memory:' AS x;
ATTACH ':memory:' AS x;
ATTACH ':memory:' AS x;
PRAGMA x;
ATTACH '__TEST_DIR__/attach_row_group_size.db' AS x (STORAGE_VERSION 'v1.0.0', ROW_GROUP_SIZE 245760);
ATTACH '__TEST_DIR__/attach_row_group_size.db' AS x (STORAGE_VERSION 'v1.0.0');
CREATE TABLE x.x AS SELECT * FROM x AS x;
DETACH db1;
ATTACH '__TEST_DIR__/attach_row_group_size.db' AS x (STORAGE_VERSION 'v1.2.0', ROW_GROUP_SIZE 245760);
PRAGMA x;
ATTACH '__TEST_DIR__/attach_same_db.db' AS x;
ATTACH '__TEST_DIR__/attach_same_db.db' AS x;
BEGIN;
DETACH db1;
ATTACH '__TEST_DIR__/attach_same_db.db' AS x;
PRAGMA x;
ATTACH ':memory:' AS x;
CREATE SCHEMA x.x.x;
CREATE SCHEMA IF NOT EXISTS x.x.x;
ATTACH '__TEST_DIR__/attach_seq.db' AS x;
CREATE SEQUENCE x;
CREATE TABLE x.x (x INT DEFAULT NEXTVAL('seq'));
CREATE SEQUENCE x.x;
CREATE TABLE x.x (x INT DEFAULT NEXTVAL('db1.seq'));
SELECT NEXTVAL('db1.seq');
SELECT NEXTVAL('seq');
CREATE TABLE x (x INT DEFAULT NEXTVAL('db1.seq'));
DETACH db1;
SET x = 'latest';
ATTACH '__TEST_DIR__/db1.db';
USE x;
CREATE TABLE x (x INT PRIMARY KEY, x TEXT, x INT);
CREATE INDEX x ON x(x);
CREATE TABLE x (x INT REFERENCES x (x));
USE x;
DETACH db1;
ATTACH '__TEST_DIR__/db1.db' AS x;
PRAGMA x;
PRAGMA x = '1TB';
ATTACH '__TEST_DIR__/db2.db';
USE x;
CREATE TABLE x (x INT PRIMARY KEY, x TEXT, x INT);
CREATE INDEX x ON x(x);
CREATE TABLE x (x INT REFERENCES x (x));
USE x;
DETACH db2;
PRAGMA x;
ATTACH ':memory:' AS x;
CREATE SCHEMA x.x.x;
CREATE TABLE x (x INT);
CREATE TABLE x.x (x INT);
CREATE TABLE x.x.x (x INT);
PRAGMA x;
ATTACH ':memory:' AS x;
ATTACH ':memory:' AS x;
CREATE TABLE x.x (x INT);
CREATE TABLE x.x (x INT);
CREATE SCHEMA x.x.x;
CREATE TABLE x.x.x (x INT);
USE x;
USE x;
USE x;
USE x.x;
USE x.x;
SELECT * FROM x;
PRAGMA x;
ATTACH '__TEST_DIR__/version_1_2_0.db' (STORAGE_VERSION 'v1.2.0');
SELECT x['storage_version'] FROM x WHERE x = 'version_1_2_0';
DETACH version_1_2_0;
ATTACH '__TEST_DIR__/version_1_2_0.db' (STORAGE_VERSION 'v1.0.0');
ATTACH '__TEST_DIR__/version_1_2_0.db' (STORAGE_VERSION 'v1.4.0');
ATTACH '__TEST_DIR__/version_1_2_0.db' (STORAGE_VERSION 'v1.2.0');
SELECT x['storage_version'] FROM x WHERE x = 'version_1_2_0';
DETACH version_1_2_0;
ATTACH '__TEST_DIR__/version_1_2_0.db';
SELECT x['storage_version'] FROM x WHERE x = 'version_1_2_0';
DETACH version_1_2_0;
SET x = 'v0.10.2';
ATTACH '__TEST_DIR__/default_version.db';
CREATE TABLE x.x (x TEXT);
SELECT x['storage_version'] FROM x WHERE x = 'default_version';
DETACH default_version;
ATTACH '__TEST_DIR__/default_version.db' (STORAGE_VERSION 'v1.2.0');
SELECT x['storage_version'] FROM x WHERE x = 'default_version';
SET x = 'zstd';
INSERT INTO x.x VALUES ('abcd'), ('efgh'), ('hello'), ('world'), (NULL);
DETACH default_version;
ATTACH '__TEST_DIR__/default_version.db';
SELECT x['storage_version'] FROM x WHERE x = 'default_version';
SELECT * FROM x.x;
DETACH default_version;
ATTACH '__TEST_DIR__/default_version.db' (STORAGE_VERSION 'v1.2.0');
SELECT * FROM x.x;
DETACH default_version;
ATTACH '__TEST_DIR__/default_version.db' (STORAGE_VERSION 'v1.0.0');
SET x = 'v1.2.0';
ATTACH '__TEST_DIR__/modified_default_setting.db';
SELECT x['storage_version'] FROM x WHERE x = 'modified_default_setting';
PRAGMA x;
ATTACH '__TEST_DIR__/constraint_test.db' AS x;
CREATE TABLE x.x (x INT PRIMARY KEY);
SELECT x, x, x FROM x.x LIMIT 1;
PRAGMA x;
ATTACH ':memory:' AS x;
ATTACH ':memory:' AS x;
ATTACH ':memory:' AS x;
ATTACH ':memory:' AS x;
ATTACH ':memory:' AS x;
ATTACH ':memory:' AS x;
ATTACH ':memory:' AS x;
ATTACH ':memory:' AS x;
ATTACH ':memory:' AS x;
ATTACH ':memory:' AS x;
ATTACH ':memory:' AS x;
ATTACH ':memory:' AS x;
ATTACH ':memory:' AS x;
ATTACH ':memory:' AS x;
ATTACH ':memory:' AS x;
ATTACH ':memory:' AS x;
ATTACH ':memory:' AS x;
ATTACH ':memory:' AS x;
ATTACH ':memory:' AS x;
ATTACH ':memory:' AS x;
ATTACH ':memory:' AS x;
ATTACH ':memory:' AS x;
PRAGMA x;
ATTACH ':memory:' AS x;
CREATE TABLE x.x (x INT);
PRAGMA TABLE_INFO('new_database.integers');
CREATE SCHEMA x.x.x;
CREATE TABLE x.x.x (x INT);
PRAGMA TABLE_INFO('new_database.new_schema.integers');
SELECT CURRENT_DATABASE();
USE x.x;
PRAGMA TABLE_INFO('integers');
SELECT CURRENT_DATABASE();
PRAGMA x;
BEGIN;
ATTACH '__TEST_DIR__/attach_transaction.db';
ROLLBACK;
BEGIN;
ATTACH '__TEST_DIR__/attach_transaction.db';
CREATE TABLE x.x (x INT);
INSERT INTO x.x VALUES (42);
ROLLBACK;
BEGIN;
ATTACH '__TEST_DIR__/attach_transaction.db';
CREATE TABLE x.x (x INT);
INSERT INTO x.x VALUES (42);
COMMIT;
BEGIN;
DETACH attach_transaction;
ROLLBACK;
DETACH attach_transaction;
BEGIN;
ATTACH '__TEST_DIR__/attach_transaction.db';
INSERT INTO x.x VALUES (84);
DETACH attach_transaction;
ROLLBACK;
BEGIN;
ATTACH '__TEST_DIR__/attach_transaction.db';
SELECT * FROM x.x;
INSERT INTO x.x VALUES (84);
DETACH attach_transaction;
COMMIT;
ATTACH '__TEST_DIR__/attach_transaction.db';
SELECT * FROM x.x ORDER BY 1;
PRAGMA x;
ATTACH ':memory:' AS x;
CREATE TABLE x AS SELECT 42 AS x;
CREATE TABLE x AS SELECT 42 AS x;
CREATE TABLE x AS SELECT 42 AS x;
CREATE TABLE x AS SELECT 42 AS x;
CREATE TABLE x AS SELECT 42 AS x;
CREATE TABLE x AS SELECT 42 AS x;
CREATE TABLE x AS SELECT 42 AS x;
CREATE TABLE x AS SELECT 42 AS x;
CREATE TABLE x AS SELECT 42 AS x;
CREATE TABLE x AS SELECT 42 AS x;
CREATE TABLE x AS SELECT 42 AS x;
CREATE TABLE x AS SELECT 42 AS x;
CREATE TABLE x AS SELECT 42 AS x;
PRAGMA x;
ATTACH '__TEST_DIR__/view_search_path.db' AS x;
USE x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (42);
CREATE VIEW x AS SELECT * FROM x;
SELECT * FROM x;
CREATE SCHEMA x.x;
USE x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (84);
CREATE VIEW x AS SELECT * FROM x;
SELECT * FROM x;
USE x;
SELECT * FROM x.x;
SELECT * FROM x.x.x;
DETACH view_search_path;
ATTACH '__TEST_DIR__/view_search_path.db' AS x;
SELECT * FROM x.x;
SELECT * FROM x.x.x;
PRAGMA x;
ATTACH '__TEST_DIR__/wal_crash.db' AS x;
USE x;
CREATE TABLE x (x INT);
SET x = '1TB';
PRAGMA x;
ALTER TABLE x ALTER COLUMN x SET DEFAULT 0;
ATTACH ':memory:' AS x;
USE x;
DETACH db1;
ATTACH '__TEST_DIR__/wal_crash.db' AS x;
ATTACH '__TEST_DIR__/wal_crash.db' AS x;
SELECT * FROM x.x;
PRAGMA x;
PRAGMA x = '1TB';
ATTACH '__TEST_DIR__/attach_wal_with_sequence.db' AS x;
CREATE SEQUENCE x.x;
CREATE TABLE x.x (x INT DEFAULT NEXTVAL('seq'), x INT, x INT DEFAULT CURRVAL('seq'));
INSERT INTO x.x (x) VALUES (1);
ALTER TABLE x.x RENAME TO x;
INSERT INTO x.x (x) VALUES (10);
SELECT * FROM x.x;
DETACH db1;
ATTACH '__TEST_DIR__/attach_wal_with_sequence.db' AS x;
INSERT INTO x.x (x) VALUES (100);
SELECT * FROM x.x;
PRAGMA x;
ATTACH ':memory:' AS x;
PRAGMA x;
ATTACH ':memory:' AS x;
CREATE TABLE x.x (x INT);
INSERT INTO x.x VALUES (42);
INSERT INTO x.x.x VALUES (84);
SELECT * FROM x;
SELECT * FROM x.x ORDER BY x;
SELECT * FROM x.x.x ORDER BY x;
SELECT * FROM x.x ORDER BY x.x;
SELECT * FROM x.x ORDER BY x.x.x;
SELECT * FROM x.x.x ORDER BY x.x.x.x;
ATTACH '__TEST_DIR__/reattach_schema.db' AS x;
CREATE SCHEMA x.x.x;
CREATE TABLE x.x.x (x INT);
INSERT INTO x.x.x VALUES (42);
CREATE VIEW x.x.x AS SELECT 84;
CREATE SEQUENCE x.x.x;
SELECT x.x.one();
SELECT * FROM x.x.x;
DETACH new_db;
ATTACH '__TEST_DIR__/reattach_schema.db' AS x;
SELECT * FROM x.x.x;
SELECT * FROM x.x.x;
SELECT NEXTVAL('new_name.my_schema.my_sequence');
SELECT x.x.one();
SELECT * FROM x.x.x;
USE x.x;
USE x.x.x;
SELECT * FROM x;
SELECT * FROM x;
SELECT NEXTVAL('my_sequence');
SELECT ONE();
SELECT * FROM x;
PRAGMA x;
ATTACH ':memory:' AS x;
SELECT x FROM x ORDER BY x;
USE x;
CREATE TABLE x AS SELECT 42 AS x;
SELECT * FROM x.x;
USE x;
PRAGMA x;
DETACH system;
DETACH temp;
CREATE SCHEMA x.x.x;
CREATE TABLE x.x.x (x INT);
CREATE VIEW x.x.x AS SELECT 42;
CREATE SEQUENCE x.x.x;
PRAGMA x;
WITH x AS (SELECT 'foo' AS x) SELECT x.x AS x FROM x WHERE NOT x IS NULL;
PRAGMA x;
SELECT COUNT(*) FROM (SELECT RANDOM() AS x FROM x WHERE x > 0.9) WHERE x <= 0.9;
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (2), (1), (3);
SELECT x AS "x" FROM x GROUP BY "x";
SELECT x AS "x" FROM x GROUP BY "x" HAVING "x" = 1;
SELECT x AS "x" FROM x ORDER BY "x";
SELECT x AS "x" FROM x GROUP BY "x" ORDER BY "x";
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (42);
SELECT COUNT(*) FROM x, x;
SELECT * FROM (SELECT 42 AS x) AS x, (SELECT 84 AS x) AS x;
SELECT x.x, x.x FROM (SELECT 42 AS x) AS x, (SELECT 84 AS x) AS x;
SELECT x.x FROM (SELECT 42 AS x) AS x, (SELECT 84 AS x) AS x;
SELECT x.x FROM x, x;
PRAGMA x;
CREATE TABLE x AS SELECT 'my_name' AS x;
SELECT x AS x, REPLACE(x, '_', ' ') AS x FROM x GROUP BY ALL;
PRAGMA x;
CREATE SCHEMA IF NOT EXISTS x.x;
CREATE TABLE x.x (x DATE, x TEXT, x TEXT, x TEXT);
SELECT x, x FROM x.x GROUP BY x, x.x.x ORDER BY x;
SELECT x, x.x FROM x.x GROUP BY x, x.x.x ORDER BY x.x;
PRAGMA x;
CREATE TABLE x (x TEXT, x INT, x INT, x TEXT);
CREATE TABLE x (x TEXT, x TEXT);
WITH x AS (SELECT *, RANK() OVER (ORDER BY x) AS x FROM x WHERE x <= 42) SELECT * FROM x JOIN x USING (x);
CREATE TABLE x AS SELECT 42 AS x, '5' AS x;
SELECT x >= x FROM x;
SELECT x[1] FROM x;
SELECT [x, x] FROM x;
SET x = TRUE;
SELECT x[1] FROM x;
SELECT x >= x FROM x;
SELECT [x, x] FROM x;
PRAGMA x;
CREATE TABLE x ("x" TEXT, x TIMESTAMP, x TEXT, "x" TEXT, x BIGINT, x BOOLEAN, x BOOLEAN, x BOOLEAN, x BIGINT, x BOOLEAN);
CREATE VIEW x AS SELECT DISTINCT ON (x, DATE_TRUNC('DAY', x)) DATE_TRUNC('DAY', x) AS x, "x", x, x, x, x, x, x FROM x WHERE x = 'events' ORDER BY x, x DESC;
SELECT x, COUNT(*) AS x FROM x WHERE 1 = 1 AND x >= '2023-12-01' AND x < '2023-12-13' GROUP BY x;
PRAGMA x;
CREATE SCHEMA IF NOT EXISTS x.x;
CREATE SCHEMA IF NOT EXISTS x.x;
CREATE SCHEMA IF NOT EXISTS x.x;
CREATE TABLE x.x (x INT);
CREATE TABLE x.x (x INT);
CREATE TABLE x.x (x INT);
CREATE TABLE x (x INT);
INSERT INTO x.x VALUES (10);
INSERT INTO x.x VALUES (100);
INSERT INTO x.x VALUES (1000);
INSERT INTO x VALUES (1);
SELECT * FROM x, x.x, x.x;
SELECT * FROM x, x.x, x.x, x.x;
SELECT x.x FROM x.x, x.x;
SELECT x.x FROM x.x, x.x, x.x;
SELECT x.x, x.x, x.x FROM x.x, x.x, x.x;
CREATE TABLE x.x AS SELECT 1 AS x, 's1.t' AS x UNION ALL SELECT 10 AS x, 'AAA' AS x;
CREATE TABLE x.x AS SELECT 1 AS x, 's2.t' AS x UNION ALL SELECT 100 AS x, 'BBB' AS x;
CREATE TABLE x.x AS SELECT 1 AS x, 's3.t' AS x UNION ALL SELECT 1000 AS x, 'CCC' AS x;
SELECT * FROM x.x JOIN x.x USING (x) JOIN x.x USING (x);
SELECT x FROM x.x JOIN x.x USING (x) JOIN x.x USING (x);
SELECT * FROM x.x NATURAL JOIN x.x NATURAL JOIN x.x;
SELECT x, x.x.x, x.x.x, x.x.x, x.x.x, x.x.x, x.x.x FROM x.x LEFT JOIN x.x USING (x) LEFT JOIN x.x USING (x) ORDER BY ALL;
SELECT x, x.x.x, x.x.x, x.x.x, x.x.x, x.x.x, x.x.x FROM x.x RIGHT JOIN x.x USING (x) RIGHT JOIN x.x USING (x) ORDER BY ALL;
SELECT x, x.x.x, x.x.x, x.x.x, x.x.x, x.x.x, x.x.x FROM x.x FULL OUTER JOIN x.x USING (x) FULL OUTER JOIN x.x USING (x) ORDER BY ALL;
CREATE OR REPLACE TABLE x.x (x INT);
CREATE OR REPLACE TABLE x.x (x INT);
CREATE OR REPLACE TABLE x.x (x INT);
INSERT INTO x.x VALUES (10);
INSERT INTO x.x VALUES (100);
INSERT INTO x.x VALUES (1000);
SELECT * FROM x, x.x, x.x, x.x;
SELECT x.x FROM x.x, x.x;
SELECT x.x FROM x.x, x.x, x.x;
SELECT x.x, x.x, x.x FROM x.x, x.x, x.x;
PRAGMA x;
CREATE TABLE x (x INT);
SELECT * FROM x;
SELECT x FROM x;
CREATE TABLE x (x INT);
SELECT * FROM x;
SELECT * FROM x;
SELECT JARO_WINKLER_('x', 'y');
CREATE SCHEMA x.x;
CREATE TABLE x.x (x INT);
SELECT * FROM x;
SELECT * FROM x;
CREATE TABLE x.x (x INT);
SELECT * FROM x;
PRAGMA x;
SELECT '01' = 1;
SELECT COS('0');
SELECT CAST('1992-01-01' AS DATE) > '1991-01-01';
SELECT CAST('2023-12-11' AS DATE) < '2023-12-11 15:54:45.119';
CREATE TABLE x ("x" DATE, x TEXT);
INSERT INTO x VALUES ('2023-08-01', 1), ('2023-08-02', 2), ('2023-08-03', 3), ('2023-08-04', 4), ('2023-08-05', 5), ('2023-08-06', 6), ('2023-08-07', 7);
SELECT * FROM x WHERE x >= '2023-08-05 00:00:00' AND x < '2023-08-06 00:00:00';
SELECT '[hello]'[1];
SELECT LIST('hello world');
SELECT 1 IN ('1', '2');
SELECT COALESCE(1, '1');
SELECT x = 1 FROM (VALUES ('01')) AS x;
SELECT x IN (1) FROM (VALUES ('01')) AS x;
WITH x AS (SELECT '01' AS x) SELECT 1 = x AS x FROM x;
WITH x AS (SELECT '01' AS x) SELECT 1 IN (x) AS x FROM x;
SELECT x > 1 FROM (VALUES ('01')) AS x;
SELECT CAST('1992-01-01' AS DATE) > x FROM (VALUES ('1991-01-01')) AS x;
SELECT x[1] FROM (VALUES (CAST('1992-01-01' AS DATE))) AS x;
SET x = 'nulls_first';
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3), (NULL);
SELECT x.x FROM x AS "x" ORDER BY ALL;
SELECT x.x FROM x AS x ORDER BY ALL;
PRAGMA x;
CREATE SCHEMA x.x;
CREATE VIEW x.x AS SELECT 42 AS x;
CREATE TABLE x.x AS SELECT 42 AS x;
SELECT x.x.x, x.x, x FROM x.x;
SELECT x.x.x, x.x, x FROM x.x;
SELECT x.x.x, x.x, x FROM x.x AS x;
SELECT x.x.x FROM x.x AS x;
SELECT x.x.x FROM x.x AS x;
SELECT x.x.x FROM x.x AS x;
SET x = 'nulls_first';
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3), (NULL);
SELECT x % 2 AS x, SUM(x) AS x FROM x GROUP BY x ORDER BY 1;
SELECT ALIAS(x % 2) AS x, ALIAS(SUM(x)) AS x FROM x GROUP BY x ORDER BY 1;
SELECT x + 1 + 1 + 1 AS x, ABS(x) AS x FROM x WHERE x = 1 ORDER BY 1;
SELECT ALIAS(x + 1 + 1 + 1) AS x, ALIAS(ABS(x)) AS x FROM x WHERE x = 1 ORDER BY 1;
SELECT ALIAS(x) AS x, ALIAS(x IN (1)) AS x, ALIAS(x >= 10) AS x, ALIAS(1 = 0) AS x FROM x WHERE x = 1 ORDER BY 1;
SELECT ALIAS(CASE WHEN x = 1 THEN 19 ELSE 0 END) AS x, ALIAS(CAST(x AS TEXT)) AS x FROM x WHERE x = 1 ORDER BY 1;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (42, 10), (43, 100);
SELECT x, x, x * 2 AS x, x * (x * 2) AS x FROM x ORDER BY x;
SELECT ALIAS(x), ALIAS(x), ALIAS(x * 2) AS x, ALIAS(x * (x * 2)) AS x FROM x ORDER BY x;
SELECT x AS x, x AS x, x AS x, x AS x FROM x WHERE x = 3;
CREATE OR REPLACE TABLE x (x TEXT);
INSERT INTO x VALUES ('hello');
SELECT (WITH x AS (SELECT x AS x), x AS (SELECT x.x, x AS x FROM x WHERE NOT x IS NULL) SELECT x.x FROM x) FROM x;
CREATE OR REPLACE TABLE x (x JSON);
INSERT INTO x VALUES ('{ "location" : { "address" : "123 Main St" }, "sampleField" : null, "anotherField" : 123, "yetAnotherField" : "abc" }');
SELECT (WITH x AS (SELECT UNNEST(JSON_KEYS(x)) AS x), x AS (SELECT x.x, (x -> x).x AS x FROM x WHERE NOT NULLIF(x, 'null') IS NULL) SELECT JSON_GROUP_OBJECT(x.x, x.x) FROM x) FROM x;
SELECT STRIP_NULL_VALUE('{ "location" : { "address" : "123 Main St" }, "sampleField" : null, "anotherField" : 123, "yetAnotherField" : "abc" }') AS x;
CREATE OR REPLACE TABLE x (x JSON);
INSERT INTO x VALUES ('{ "location" : { "address" : "123 Main St" }, "sampleField" : null, "anotherField" : 123, "yetAnotherField" : "abc" }');
SELECT STRIP_NULL_VALUE(x) FROM x;
WITH x AS (SELECT '{ "location" : { "address" : "123 Main St" }, "sampleField" : null, "anotherField" : 123, "yetAnotherField" : "abc" }' AS x) SELECT STRIP_NULL_VALUE(x.x) AS x FROM x;
PRAGMA x;
CREATE TABLE x ("x" INT);
INSERT INTO x VALUES (1);
SELECT x FROM x;
SELECT x FROM x;
SELECT "x" FROM x;
SELECT "x" FROM x;
SELECT "x" FROM x;
SELECT ALIAS(x) FROM x;
SELECT ALIAS(x) FROM x;
SELECT ALIAS(x) FROM (SELECT x AS x FROM x) AS x;
SELECT x.x FROM x;
SELECT x.x FROM x;
SELECT x."x" FROM x;
SELECT x."x" FROM x;
SELECT x."x" FROM x;
UPDATE x SET x = 3;
UPDATE x SET x = 3;
DROP TABLE x;
CREATE TABLE x ("x" INT, "x" INT);
CREATE TABLE x ("x" INT);
CREATE TABLE x ("x" INT);
SELECT x FROM x, x;
SELECT x FROM x, x;
SELECT "x" FROM x, x;
SELECT "x" FROM x, x;
SELECT "x" FROM x, x;
SELECT x.x FROM x, x;
SELECT x.x FROM x, x;
SELECT x."x" FROM x, x;
SELECT x."x" FROM x, x;
SELECT x."x" FROM x, x;
SELECT x.x FROM x, x;
SELECT x.x FROM x, x;
SELECT x."x" FROM x, x;
SELECT x."x" FROM x, x;
SELECT x."x" FROM x, x;
SELECT * FROM x JOIN x USING (x);
SELECT x FROM (SELECT 42) AS x;
PRAGMA x;
SELECT 'test' || ' more testing' AS x, x.substr(5) AS x;
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('>>%Test<<'), ('%FUNCTION%'), ('Chaining');
SELECT x.lower() FROM x;
SELECT x.lower() FROM x;
SELECT x.trim('><') AS x, x.replace('%', '') AS x, x.lower() AS x FROM x;
SELECT x.x.trim('><') AS x, x.replace('%', '') AS x, x.lower() AS x FROM x;
DELETE FROM x;
INSERT INTO x VALUES ('Test Function Chainging Alias');
SELECT CAST(x.split(' ') AS TEXT) AS x, x.lower() AS x, x.upper() AS x FROM x;
SELECT x.split(' ') AS x, x.apply(x -> x.lower()).filter(x -> x[1] = 't') AS x, x.apply(x -> x.upper()).filter(x -> x[1] = 'T') AS x, x + x AS x FROM x;
INSERT INTO x VALUES ('Another longggggg String');
SELECT x.split(' ') AS x, x.apply(x -> x.lower()).filter(x -> x[1] = 't' OR x[1] = 'a') AS x, x.apply(x -> x.upper()).filter(x -> x[1] = 'T' OR x[1] = 'A') AS x, x + x AS x FROM x WHERE x[1] = 'test';
SELECT x.split(' ') AS x, x.apply(x -> x.lower()).filter(x -> x[1] = 't' OR x[1] = 'a') AS x, x.apply(x -> x.upper()).filter(x -> x[1] = 'T' OR x[1] = 'A') AS x, x + x AS x FROM x WHERE x[1] = 'another';
WITH x AS (SELECT 'woot' AS x) SELECT x.substr(2) AS x, x.substr(2) AS x FROM x WHERE x = 'ot';
PRAGMA x;
CREATE TABLE x AS SELECT * FROM x AS x;
SELECT x, COUNT(*) AS x FROM x GROUP BY x HAVING x = 1 ORDER BY x;
SELECT x, COUNT(*) AS x FROM x GROUP BY x HAVING x.x = 1 ORDER BY x;
SELECT 1 AS x, COUNT(*) FROM x GROUP BY x HAVING x = 2;
SELECT x AS x, COUNT(*) AS x FROM x GROUP BY x HAVING x.x = 1 ORDER BY x;
SELECT x AS x, COUNT(*) AS x FROM x GROUP BY x HAVING x = 1 ORDER BY x;
SELECT COUNT(x) AS x FROM x HAVING x = 5;
SELECT COUNT(x) AS x FROM x HAVING x = 5;
SELECT COUNT(x) AS x FROM x GROUP BY x HAVING x = 5;
SELECT COUNT(x) AS x FROM x HAVING x = 5 ORDER BY x;
SELECT COUNT(x) AS x FROM x HAVING x = x;
SELECT COUNT(*) FROM (SELECT x, SUM(RANDOM()) AS x FROM x GROUP BY x HAVING x = x) AS x;
SELECT COUNT(x) AS x FROM x HAVING x.x = 5 ORDER BY x;
SELECT x + x AS x FROM x HAVING x = 5 ORDER BY x;
PRAGMA x;
CREATE TABLE x AS SELECT x AS x FROM x;
SELECT x FROM x;
SELECT x FROM x.x;
SELECT x.x FROM x.x;
SELECT x FROM x AS x;
SELECT x FROM (SELECT * FROM x) AS x;
SELECT x.x FROM x.x AS x;
SELECT x.x FROM x.x AS x;
WITH x AS (SELECT 1 AS x, 2 AS x, 3 AS x) SELECT x FROM x AS x;
CREATE TABLE x AS SELECT 3 AS x;
SELECT x.x FROM x, x;
SELECT x FROM x, x;
CREATE TABLE x AS SELECT {'x': 4} AS x;
SELECT x.x FROM x, x;
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('ABCDE'), ('aBcDe');
INSERT INTO x VALUES ('àbcdë');
INSERT INTO x VALUES ('ÀbCdÈ');
SELECT * FROM x WHERE x IN ('AbCdE');
SELECT * FROM x WHERE x COLLATE nocase IN ('abcde');
SELECT * FROM x WHERE x COLLATE noaccent IN ('abcde');
SELECT * FROM x WHERE x COLLATE x.x IN ('abcde');
SELECT * FROM x WHERE NOT x IN ('abcde');
SELECT * FROM x WHERE NOT x COLLATE nocase IN ('abcde');
SELECT * FROM x WHERE NOT x COLLATE noaccent IN ('abcde');
SELECT * FROM x WHERE NOT x COLLATE x.x IN ('abcde');
PRAGMA x;
SELECT NULL;
SELECT NULL UNION ALL SELECT CAST(1 AS BOOLEAN);
SELECT NULL UNION ALL SELECT NULL;
SELECT NULL UNION ALL SELECT NULL UNION ALL SELECT NULL UNION ALL SELECT NULL UNION ALL SELECT CAST(1 AS BOOLEAN);
SELECT (SELECT NULL) UNION ALL SELECT CAST(1 AS BOOLEAN);
SELECT * FROM (SELECT NULL) AS x UNION ALL SELECT CAST(1 AS BOOLEAN);
SELECT * FROM (SELECT (SELECT NULL) UNION ALL SELECT CAST(1 AS BOOLEAN)) AS x;
SELECT * FROM (SELECT NULL) AS x UNION ALL SELECT NULL;
SELECT BOOL_AND(x) FROM (SELECT * FROM (SELECT NULL) AS x UNION ALL SELECT CAST(1 AS BOOLEAN)) AS x;
SELECT BOOL_AND(x) FROM (SELECT * FROM (SELECT CAST(NULL AS INT)) AS x UNION ALL SELECT CAST(1 AS BOOLEAN)) AS x;
SELECT * FROM (SELECT NULL) AS x, (SELECT NULL) AS x;
SELECT BOOL_AND(x), BOOL_AND(x) FROM (SELECT NULL) AS x, (SELECT NULL) AS x;
SELECT NULL AS x, NULL AS x, 1 AS x UNION SELECT CAST(1 AS BOOLEAN) AS x, CAST(0 AS BOOLEAN) AS x, 2 AS x;
SELECT CAST(1 AS BOOLEAN) AS x, CAST(0 AS BOOLEAN) AS x, 1 AS x UNION SELECT NULL AS x, NULL AS x, 2 AS x;
SELECT CAST(NULL AS INT) AS x, CAST(NULL AS INT) AS x, 1 AS x UNION SELECT CAST(1 AS BOOLEAN) AS x, CAST(0 AS BOOLEAN) AS x, 2 AS x;
SELECT CAST(1 AS BOOLEAN) AS x, CAST(0 AS BOOLEAN) AS x, 1 AS x UNION SELECT CAST(NULL AS INT) AS x, CAST(NULL AS INT) AS x, 2 AS x;
CREATE TABLE x AS SELECT NULL UNION ALL SELECT NULL;
SELECT * FROM x;
SELECT * FROM x;
CREATE VIEW x AS SELECT NULL;
SELECT * FROM x;
SELECT * FROM x UNION ALL SELECT CAST(1 AS BOOLEAN);
SELECT * FROM x UNION ALL SELECT CAST(1 AS BOOLEAN);
CREATE VIEW x AS SELECT NULL UNION ALL SELECT NULL;
SELECT * FROM x;
SELECT * FROM x UNION ALL SELECT CAST(1 AS BOOLEAN);
SELECT * FROM x UNION ALL SELECT CAST(1 AS BOOLEAN);
SELECT [NULL];
SELECT [NULL] UNION ALL SELECT [TRUE];
SELECT {'x': NULL};
SELECT {'x': NULL} UNION ALL SELECT {'x': TRUE};
WITH x AS (SELECT NULL) SELECT * FROM x;
WITH x AS (SELECT NULL) SELECT * FROM x UNION ALL SELECT CAST(1 AS BOOLEAN);
PRAGMA x;
CREATE TABLE x AS SELECT * FROM (VALUES (42, 43), (44, 45)) AS x;
CREATE TABLE x AS SELECT * FROM (VALUES (42, 43), (44, 45)) AS x;
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3);
SELECT x + 1 AS x, x + 1 AS x FROM x ORDER BY x;
SELECT x + 1 AS x, x + x AS x, x + x AS x, x + x AS x FROM x ORDER BY x;
SELECT x + 1 AS x, x + 1 AS x FROM x ORDER BY x;
SELECT x + 1 AS x, x + 1 AS x FROM x;
SELECT RANDOM() AS x, x + 1 AS x FROM x;
CREATE TABLE x AS SELECT CAST(RANDOM() * 100 AS INT) + 1 AS x, CAST('2020-01-01' AS DATE) + INTERVAL (CAST(RANDOM() * 365 * 10 AS INT)) DAYS AS x, CAST(RANDOM() * 1000 AS INT) AS x FROM x ORDER BY x;
SELECT (SELECT DISTINCT DATE_TRUNC('MONTH', x) FROM x) AS x, (SELECT SUM(x) FROM x WHERE DATE_TRUNC('MONTH', x) = x) AS x;
PRAGMA x;
CREATE TABLE x (x INT);
SELECT x AS "x" FROM x;
SELECT x AS "x" FROM x;
SELECT x AS "x" FROM x;
SELECT x AS "x" FROM x;
SELECT "x".x FROM x AS "x";
SELECT "x".x FROM x AS "x";
PRAGMA x;
SELECT TRUE = 1;
SELECT TRUE = 0;
SELECT FALSE = 0;
SELECT FALSE = 1;
SELECT 1 = TRUE;
SELECT 0 = TRUE;
SELECT 0 = FALSE;
SELECT 1 = FALSE;
SELECT TRUE = '1';
SELECT TRUE = CAST('1' AS TEXT);
SELECT TRUE = '0';
SELECT FALSE = '0';
SELECT FALSE = '1';
SELECT TRUE = 'true';
SELECT TRUE = 'false';
SELECT FALSE = 'false';
SELECT FALSE = 'true';
SELECT '1' = TRUE;
SELECT '0' = TRUE;
SELECT '0' = FALSE;
SELECT '1' = FALSE;
SELECT TRUE = 'true';
SELECT TRUE = 'false';
SELECT FALSE = 'false';
SELECT FALSE = 'true';
SELECT FALSE = 'unknownbool';
SELECT 'unknownbool' = FALSE;
PRAGMA x;
SELECT CAST(1 AS STRUCT(x INT));
SELECT CAST(1000 AS UTINYINT);
SELECT CAST('hello' AS INT);
SELECT CAST(1000 AS DECIMAL(2, 1));
SELECT CAST(CAST(1000.0 AS DECIMAL(5, 1)) AS DECIMAL(2, 1));
SELECT CAST([1000] AS UTINYINT[]);
SELECT CAST([1000] AS UTINYINT[]);
SELECT CAST(1e308 AS REAL);
SELECT CAST(1e308 AS INT128);
SELECT CAST(CAST(1000000000000000000000000000000 AS INT128) AS INT);
SELECT NTH_VALUE(42, 'hello') OVER ();
SELECT CAST('1900' AS DATE);
SELECT CAST(42 AS UTINYINT) + 'hello';
SELECT CAST(BITSTRING('1', 9) AS BOOLEAN);
SELECT CAST([1, 2, 3] AS INT[2]);
SELECT CAST('\x' AS BLOB);
SELECT CAST('\x' AS BLOB);
INSERT INTO x VALUES (1000, 'hello', 1000.0, [1000], {'x': 1000}, 1e308, 1000000000000000000000000000000, '\x');
SELECT CAST(x AS UTINYINT) FROM x;
SELECT CAST(x AS INT) FROM x;
SELECT CAST(x AS DECIMAL(2, 1)) FROM x;
SELECT CAST(x AS DECIMAL(2, 1)) FROM x;
SELECT CAST(x AS UTINYINT[]) FROM x;
SELECT CAST(x AS UTINYINT[]) FROM x;
SELECT CAST(x AS REAL) FROM x;
SELECT CAST(x AS INT128) FROM x;
SELECT CAST(CAST(x AS INT128) AS INT) FROM x;
SELECT CAST(x AS INT[3]) FROM x;
SELECT CAST(x AS BLOB) FROM x;
PRAGMA x;
SELECT CAST(100000000000000000000 AS DOUBLE) < CAST(99999999999999999999.99999 AS DOUBLE);
SELECT 100000000000000000000 > 99999999999999999999.99999;
SELECT CAST(999999999999999.9999 AS DOUBLE) <= CAST(999999999999999.99999999 AS DOUBLE);
PRAGMA x;
SELECT CAST(1e308 AS REAL);
SELECT CAST('1e308' AS REAL);
SELECT CAST('1e310' AS DOUBLE);
SELECT CAST('-1e308' AS REAL);
SELECT CAST('-1e310' AS DOUBLE);
PRAGMA x;
SELECT CAST('[12,13,14]' AS INT[]);
SELECT CAST('["hello", "world", "!"]' AS TEXT[]);
SELECT CAST('[Hello World!]' AS TEXT[]);
SELECT CAST('[[Hello World!], hello, universe]' AS TEXT[]);
SELECT CAST('[Cast like this]' AS TEXT[]);
SELECT UNNEST(CAST('[NULL, , NULL]' AS TEXT[]));
SELECT UNNEST(CAST('[NULL,, NULL]' AS TEXT[]));
SELECT UNNEST(CAST('[NULL,   , NULL]' AS TEXT[]));
SELECT UNNEST(CAST('[NULL, NULL , ]' AS TEXT[]));
SELECT UNNEST(CAST('[NULL, NULL ,]' AS TEXT[]));
SELECT UNNEST(CAST('[NULL, NULL,]' AS TEXT[]));
SELECT CAST('[ [12,13,14], [8, 9], [4], [2, 1, 0] ]' AS INT[][]) AS x, CAST(CAST(x AS TEXT) AS INT[][]) AS x, x = x;
SELECT CAST('[ [[12,13,14], [8, 9]], [[4]], [[2, 1, 0], [99]] ]' AS INT[][][]);
SELECT CAST('[ [12,13,14], [8, 9], [4], [2,  1,  0] ]' AS TEXT[]);
SELECT CAST('[[ [🦆, 🦆, 🦆]], [[duck, db, 🦆], [🦆]], [[🦆, duck, db]]]' AS TEXT[][][]);
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('["hello","world","!"]'), ('["Amazing","text"]'), ('[Hello World!]');
SELECT CAST(x AS TEXT[]) FROM x;
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('[["hello"], ["world"],["!"]]'), ('[["Amazing"],["text"]]'), ('[[Hello World!]]');
SELECT CAST(x AS TEXT[][]) FROM x;
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('[[[[["hello"]]], [[["world"],["!"]]]]]'), ('[[[[["Amazing"]],[["text"]]]]]'), ('[[[[[Hello World!]]]]]');
SELECT CAST(x AS TEXT[][][][][]) FROM x;
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('[1,2,2]'), ('[345,67865,44,4]'), ('[5,6,7]');
SELECT CAST(x AS INT[]) FROM x;
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('[[1,2],[2]]'), ('[[345],[67865,44,4]]'), ('[[5],[6,7]]');
SELECT CAST(x AS INT[][]) FROM x;
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('[[[1,2],[3]]]'), ('[[[4]]]');
SELECT CAST(x AS INT[][][]) FROM x;
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('[[[[[[1]],[[3,4,9]]],[[[0,1]]]]]]'), ('[[[[[[4]]]]]]');
SELECT CAST(x AS INT[][][][][][]) FROM x;
SELECT CAST('[''hello'',''world'', ''!'']' AS TEXT[]);
SELECT CAST('[\\''hello\\'',\\''world\\'', \\''!\\'']' AS TEXT[]);
SELECT CAST('[[ [''🦆, 🦆, 🦆'']], [[duck, db, ''🦆''] ]]' AS TEXT[][][]);
SELECT CAST('[can\\''t, you\\''re, i\\''m]' AS TEXT[]);
SELECT CAST('["]", "hello", "world"]' AS TEXT[]);
SELECT CAST('['']'', "hello", "world"]' AS TEXT[]);
SELECT CAST('[ [12,     13,14], [8, 9         ], [ 4    ], [    2, 1,     0] ]  ' AS INT[][]);
SELECT CAST('[          [ [12,     13,14], [8, 9         ]  ],[[ 4    ]   ],        [[    2, 1,     0 ]         ] ]  ' AS INT[][][]);
SELECT CAST('["   hello","          \\"''  world", "!         "]' AS TEXT[]);
SELECT CAST('[   hello     ,   world      , !         ]' AS TEXT[]);
SELECT CAST('[    [ "   hello"]  ,["            world"        ],[ "!        "           ]      ]' AS TEXT[][]);
SELECT CAST('[]' AS TEXT[]);
SELECT CAST('[]' AS INT[]);
SELECT CAST('[]' AS INT[][][][]);
SELECT CAST('[[1, 2, 3], [], [	], [  ]]' AS INT[][]);
SELECT CAST('[[1, 2, 3], [], NULL, [NULL], [4, NULL]]' AS INT[][]);
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES (NULL), (NULL), ('[NULL]');
SELECT CAST(x AS INT[]) FROM x;
SELECT CAST(NULL AS INT[]);
SELECT CAST('[NULL]' AS INT[]);
SELECT CAST('[NULL]' AS INT[][]);
SELECT CAST('[[12,13,14], [8, 9], NULL, [2, 1]]' AS INT[][]);
SELECT CAST('[[12,13,14], [8, 9], [2, NULL, 1]]' AS INT[][]);
SELECT CAST('[ [[12,13,14], NULL], [[4]], NULL, [[2, NULL, 1, 0], [99]] ]' AS INT[][][]);
SELECT TRY_CAST('Hello World' AS INT[]);
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('[1,2,X,2]'), ('[hello DuckDB]'), ('[345,oops,44,4.0]'), ('[12345678901]'), ('[5,6,7]'), ('[3 0, 1]');
SELECT TRY_CAST(x AS INT[]) FROM x;
SELECT CAST('{[3]}' AS INT[]);
SELECT CAST('Hello World' AS INT[]);
SELECT CAST('[3]]' AS INT[]);
SELECT CAST('[3],[[]' AS INT[][]);
SELECT CAST('[3], [[1]]' AS INT[][]);
SELECT CAST('[[3 1]]' AS INT[][]);
SELECT CAST('[[3,, 1]]' AS INT[][]);
SELECT CAST('[[3], [[5], [4]]' AS INT[][]);
SELECT CAST('][3]' AS INT[]);
SELECT CAST('[[[[[]][3][[]][][[[][]]]]]' AS INT[][][][]);
SELECT * FROM x WHERE CAST(x AS INT[]) = [1, 2, 2];
SELECT x FROM x WHERE LENGTH(CAST(x AS INT[])) < 4;
SELECT CAST(x AS INT[]) FROM x WHERE LENGTH(CAST(x AS INT[])) < 4;
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('[{a: "hii"}, {a: "hellooo"}]');
SELECT CAST(x AS STRUCT(x TEXT)[]) FROM x;
SELECT CAST('[ [{a:[12,13,14], b:"🦆"}], [{a:[12,13,14], b:"🦆", c:100}] ]' AS STRUCT(x INT[], x TEXT, x REAL)[][]);
SELECT CAST('[{a:[12,13,14], b:"🦆", c:{a:[[a], [b, c]], b:[123]}}]' AS STRUCT(x INT[], x TEXT, x STRUCT(x TEXT[][], x INT[]))[]);
SELECT CAST('[{a: hii}, {a: "{" }]' AS STRUCT(x TEXT)[]) FROM x;
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('[{a: 7, b:"Duck"}, {a: 7000, b: "🦆🦆🦆🦆🦆🦆"}]');
SELECT CAST(x AS STRUCT(x INT, x TEXT)[]) FROM x;
CREATE TABLE x (x INT[]);
COPY (SELECT [1, 2, 3]) TO '__TEST_DIR__/int_list.csv';
COPY x FROM '__TEST_DIR__/int_list.csv';
SELECT x FROM x;
CREATE TABLE x (x INT[], x TEXT[], x DATE[]);
COPY (SELECT [8, 7, 6], '[hello, Duck\\\\''DB]', '[2022-12-2, 1929-01-25]') TO '__TEST_DIR__/assorted_lists.csv' WITH (Header 0);
COPY x FROM '__TEST_DIR__/assorted_lists.csv';
SELECT * FROM x;
SELECT CAST('[{"bar":"\""}]' AS TEXT[]);
SELECT CAST('[{"bar":"\\""}]' AS TEXT[]);
SELECT CAST('[{"bar":"\\""}]' AS STRUCT(x TEXT)[]);
SELECT CAST('[{"bar":"\\\""}]' AS STRUCT(x TEXT)[]);
SELECT CAST('[{"bar":"\"\"\\\"\"\"\\"}]' AS STRUCT(x TEXT)[]) AS x, CAST(CAST(x AS TEXT) AS STRUCT(x TEXT)[]) AS x, x = x;
SELECT CAST('[\\  \\\\abc\\\\ \\ , def, ghi]' AS TEXT[]) AS x, x[1], LENGTH(x[1]);
SELECT CAST('["\\  \\\\abc\\\\ \\ ", def, ghi]' AS TEXT[]) AS x, x[1], LENGTH(x[1]);
SELECT CAST('[hello, world]' AS TEXT[]);
SELECT CAST('["hello\\ world", world]' AS TEXT[]);
SELECT CAST('[hello\\ world, world]' AS TEXT[]);
SELECT CAST('[hello\\,world, test]' AS TEXT[]);
SELECT CAST('["hello\\,world", test]' AS TEXT[]);
SELECT CAST('["hello\\,", test]' AS TEXT[]);
SELECT CAST('[hello\\,, test]' AS TEXT[]);
SELECT CAST('['''']' AS TEXT[]) AS x, CAST(CAST(x AS TEXT) AS TEXT[]) AS x, x = x;
SELECT CAST('[hello\\"quoted\\"text, more]' AS TEXT[]);
SELECT CAST('[escaped\\\\backslash, test]' AS TEXT[]);
SELECT CAST('["escaped\\\\backslash", test]' AS TEXT[]);
SELECT CAST('[nested[brackets], test]' AS TEXT[]);
SELECT CAST('[nested[bracket, test]' AS TEXT[]);
SELECT CAST('[nested"["bracket, test]' AS TEXT[]);
SELECT CAST('[quote\\''in\\''string, test]' AS TEXT[]);
SELECT CAST('[mix\\ of\\ special\\,chars]' AS TEXT[]);
SELECT CAST('["mix\\ of\\ special\\,chars"]' AS TEXT[]);
SELECT CAST('["mix\\ of\\ special\\,"chars]' AS TEXT[]);
SELECT CAST('["ends with space ", "trailing space "]' AS TEXT[]);
SELECT CAST('["ends with comma,", "another,"]' AS TEXT[]);
SELECT CAST('["quote at end\\"", "\\""]' AS TEXT[]);
SELECT CAST('["ends with bracket]", "[bracket"]' AS TEXT[]);
SELECT CAST('["backslash at end\\\\", "\\\\"]' AS TEXT[]);
SELECT CAST('[" space at start", " leading space"]' AS TEXT[]);
SELECT CAST('[",comma at start", ",leading comma"]' AS TEXT[]);
SELECT CAST('["\\"quote at start", "\\"leading quote"]' AS TEXT[]);
SELECT CAST('["[bracket at start", "[leading bracket"]' AS TEXT[]);
SELECT CAST('["\\\\backslash at start", "\\\\leading backslash"]' AS TEXT[]);
SELECT CAST('[" space at start and end ", " leading and trailing space "]' AS TEXT[]);
SELECT CAST('[",comma at start and end,", ",leading and trailing comma,"]' AS TEXT[]);
SELECT CAST('["\\"quote at start and end\\"", "\\"leading and trailing quote\\""]' AS TEXT[]);
SELECT CAST('["[bracket at start and end]", "[leading and trailing bracket]"]' AS TEXT[]);
SELECT CAST('["\\\\backslash at start and end\\\\", "\\\\leading and trailing backslash\\\\"]' AS TEXT[]);
SELECT CAST('[" mix, of special\\ characters " , "[various] \\"combinations\\" "]' AS TEXT[]);
SELECT CAST('[", starts and ends with ,", "[brackets] and ,commas,"]' AS TEXT[]);
SELECT CAST('["\\"quotes\\" and \\ spaces ", "\\ leading and trailing \\ "]' AS TEXT[]);
SELECT CAST('["[complex\\ combination, of\\" special]", "\\\\all cases covered\\\\"]' AS TEXT[]);
SELECT CAST('["hello, world"]' AS TEXT[]);
SELECT CAST('["missing quote]]' AS TEXT[]);
SELECT CAST('["backslash at end\\"]' AS TEXT[]);
SELECT CAST('[unescaped[bracket]' AS TEXT[]);
SELECT CAST('[unterminated string]"]' AS TEXT[]);
SELECT CAST('[]' AS TEXT[]);
SELECT CAST('[""]' AS TEXT[]);
SELECT CAST('[" "]' AS TEXT[]);
SELECT CAST('["\\\\"]' AS TEXT[]);
SELECT CAST('["\\""]' AS TEXT[]);
SELECT CAST('[\\,]' AS TEXT[]);
SELECT CAST('["\\,"]' AS TEXT[]);
SELECT CAST('[","]' AS TEXT[]);
SELECT CAST('[NULL, ''null'', ''nUlL'', NuLl, "NULLz", "NULL"]' AS TEXT[]) AS x, CAST(CAST(x AS TEXT) AS TEXT[]) AS x, x = x;
SELECT CAST('[\\"abc\\", def, ghi]' AS TEXT[]) AS x, CAST(CAST(x AS TEXT) AS TEXT[]) AS x, x = x;
COPY (SELECT CAST('[\\"abc\\", def, ghi]' AS TEXT[]) AS x) TO '__TEST_DIR__/copy_test.csv' WITH (FORMAT CSV);
SELECT x, CAST(x AS TEXT[]) FROM x AS x;
SELECT CAST('["  \\"abc\\"  ", def, ghi]' AS TEXT[]) AS x, CAST(CAST(x AS TEXT) AS TEXT[]) AS x, x = x;
SELECT CAST('[\\  \\\\abc\\\\ \\ , def, ghi]' AS TEXT[]) AS x, CAST(CAST(x AS TEXT) AS TEXT[]) AS x, x = x;
SELECT CAST('["\\  \\\\abc\\\\ \\ ", def, ghi]' AS TEXT[]) AS x, CAST(CAST(x AS TEXT) AS TEXT[]) AS x, x = x;
SELECT CAST('[{}]' AS TEXT[]) AS x, CAST(CAST(x AS TEXT) AS TEXT[]) AS x, x = x;
PRAGMA x;
SELECT CAST('{a=1, b=2, c=3}' AS MAP(TEXT, INT));
SELECT CAST('{key_A=Duck, key_B="hello world"}' AS MAP(TEXT, TEXT));
SELECT CAST('{1=Duck, 2=hello world, 3=!}' AS MAP(INT, TEXT));
SELECT CAST('{greetings=[Hello World!, Hello DuckDB, Howdy], farewells=[Bye World, Bye DuckDB]}' AS MAP(TEXT, TEXT[]));
SELECT CAST('{"key=A"=Duck, "key=B"="hello=world"}' AS MAP(TEXT, TEXT));
SELECT CAST('{a=1, b=2, a=3}' AS MAP(TEXT, INT));
SELECT CAST('{{1=100, 2=200}=value}' AS MAP(MAP(INT, INT), TEXT));
SELECT CAST('{{1=100, 2=200}={3=c, 5=e, 7=g}}' AS MAP(MAP(INT, INT), MAP(INT, TEXT)));
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('{1=Duck, 2=DB}'), ('{999=🦆}'), ('{7=Hello, 8=World, 2=!}');
SELECT CAST(x AS MAP(INT, TEXT)) FROM x;
SELECT CAST('{''hello''=2, ''world''=50, ''!''=12}' AS MAP(TEXT, INT));
SELECT CAST('{\\''hello\\''=hello, \\''world\\''=world, \\''!\\''=!}' AS MAP(TEXT, TEXT));
SELECT CAST('{[[\\''🦆, 🦆, 🦆\\'']]=100, [[duck, db, \\''🦆\\'']]=101}' AS MAP(TEXT[][], INT));
SELECT CAST('{"can''t"="you''re", "i''m"="q''u''o''t''e"}' AS MAP(TEXT, TEXT));
SELECT CAST('{"{"="}", "["="]"}' AS MAP(TEXT, TEXT)) AS x, CAST(CAST(x AS TEXT) AS MAP(TEXT, TEXT)) AS x, x = x;
SELECT CAST('{''}''="{", '']''="["}' AS MAP(TEXT, TEXT)) AS x, CAST(CAST(x AS TEXT) AS MAP(TEXT, TEXT)) AS x, x = x;
SELECT CAST(' {greetings    =[    Hello World  !, Hello     DuckDB  , Howdy ]  ,      farewells=  [Bye World, Bye DuckDB  ] }    ' AS MAP(TEXT, TEXT[]));
SELECT CAST('{ [12,     13,14]=val, [       8, 9         ]      =val, [ 4    ]=val   }' AS MAP(INT[], TEXT));
SELECT CAST('   { { a:[2,    3], b:  Duckster      }=         {50.0        =50}, {a    : [9,1,4], b:Duck          }
={  1      =    0}  }' AS MAP(STRUCT(x INT[], x TEXT), MAP(INT, DOUBLE)));
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES (NULL), ('{key=NULL}'), ('{zero=0, key=NULL}');
SELECT CAST(x AS MAP(TEXT, TEXT)) FROM x;
SELECT CAST(NULL AS MAP(INT, TEXT));
SELECT CAST('{12=34, 56=NULL, 910=1112, 1314=NULL}' AS MAP(INT, INT));
SELECT CAST('{NULL=5}' AS MAP(INT, INT));
SELECT CAST('{}' AS MAP(INT, INT));
SELECT TRY_CAST('Hello World' AS MAP(TEXT, TEXT));
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('{1=2, XXX=2}'), ('{NULL=DuckDB}'), ('{3=oops, 5=5 44=4.0}'), ('{12345678901=0}'), ('{5=6!, 7=7000}'), ('{3 0, 1=1}');
SELECT TRY_CAST(x AS MAP(INT, INT)) FROM x;
SELECT CAST('{3==3}' AS MAP(INT, INT));
SELECT CAST('{[5]=5}' AS MAP(INT, INT));
SELECT CAST('{3=three}}' AS MAP(INT, TEXT));
SELECT CAST('{Ducky=, DB=ok}' AS MAP(TEXT, INT));
SELECT CAST('{5=5,, 3=3}' AS MAP(INT, INT));
SELECT CAST('{3=3, 4=4' AS MAP(INT, INT));
SELECT CAST('{3=3, 4=4} bla' AS MAP(INT, INT));
SELECT CAST('{                                                                      ' AS MAP(INT, INT));
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('{1=Duck, 3=DB}'), ('{12=DuckDB}'), ('{3=DB, 5=🦆 4=Ducky, 7=Duckster}'), ('{0=DuckParty}'), ('{5=DBDuck, 7=Duckster, 1=🦆}'), ('{1="final Quack"}');
SELECT * FROM x WHERE CAST(x AS MAP(INT, TEXT))[7] = 'Duckster';
SELECT CAST(x AS MAP(INT, TEXT)) FROM x WHERE CARDINALITY(CAST(x AS MAP(INT, TEXT))) < 3;
SELECT CAST('{A={a:[12,13,14], b:"🦆", c:0.12}, B={a:[12,13,14], b:DuckDuck, c:9.03}}' AS MAP(TEXT, STRUCT(x INT[], x TEXT, x REAL)));
SELECT CAST('{{a:Meow=Meow}={a:12, b:0.8, c:MeowMeow}, {a:Quack}={a:13, b:3.2, c:QuackQuack}}' AS MAP(STRUCT(x TEXT), STRUCT(x INT, x DOUBLE, x TEXT)));
SELECT CAST('{{A:AAA}={a:[12,13,14], b:"🦆", c:{a:[[a], [b, c]], b:[123]}}}' AS MAP(STRUCT(x TEXT), STRUCT(x INT[], x TEXT, x STRUCT(x TEXT[][], x INT[]))));
SELECT CAST('{[[a, b], [c, d], [e]]= {a:2000}, [[aaa]]={a:100}, [[z],[y], [x]]={}}' AS MAP(TEXT[][], STRUCT(x INT)));
SELECT CAST('{a=True, b=False, z=true, X=FALSE}' AS MAP(TEXT, BOOLEAN));
SELECT CAST('{True=[true, FALSE, true], False=[false, false, false]}' AS MAP(BOOLEAN, BOOLEAN[]));
SELECT CAST('{True=[true, FALSE, true], False=[false, false, false]}' AS MAP(BOOLEAN, BOOLEAN[]));
SELECT CAST('{True=[true, FALSE, true], False=[false, false, false]}' AS MAP(BOOLEAN, BOOLEAN[]));
SELECT CAST('{🦆=ok, duck=happy}' AS MAP(TEXT, MOOD));
SELECT CAST('{ok=happy, sad=ok}' AS MAP(MOOD, MOOD));
SELECT CAST('{sadDucky: nothappy}' AS MAP(TEXT, MOOD));
CREATE TABLE x AS SELECT CAST(CAST(MAP([x], [x + 1]) AS TEXT) AS MAP(INT, INT)) AS x FROM x AS x;
SELECT MAX(CAST(x AS MAP(INT, INT))) FROM x;
CREATE TABLE x (x MAP(INT, TEXT));
COPY (SELECT '{8="hello, DuckDB"}') TO '__TEST_DIR__/assembled_maps.csv';
COPY x FROM '__TEST_DIR__/assembled_maps.csv';
SELECT * FROM x;
SELECT CAST('{"key\\ with\\ space" = "value\\ with\\ space"}' AS MAP(TEXT, TEXT));
SELECT CAST('{\\"key\\" = \\"value\\"}' AS MAP(TEXT, TEXT));
SELECT CAST('{"key\\ with\\ backslash" = "value\\ with\\ backslash"}' AS MAP(TEXT, TEXT));
SELECT CAST('{"key\\ with\\, comma" = "value\\ with\\, comma"}' AS MAP(TEXT, TEXT));
SELECT CAST('{"key\\ with\\ colon\\:" = "value\\ with\\ colon\\:"}' AS MAP(TEXT, TEXT));
SELECT CAST('{key with space = value with space}' AS MAP(TEXT, TEXT));
SELECT CAST('{key"with"quote = value}' AS MAP(TEXT, TEXT));
SELECT CAST('{key = value"with"quote}' AS MAP(TEXT, TEXT));
SELECT CAST('{key,with,comma = value}' AS MAP(TEXT, TEXT));
SELECT CAST('{key = value,with,comma}' AS MAP(TEXT, TEXT));
SELECT CAST('{key{with}bracket = value}' AS MAP(TEXT, TEXT));
SELECT CAST('{key = value{with}bracket}' AS MAP(TEXT, TEXT));
SELECT CAST('{"key\\with\\backslash" = value}' AS MAP(TEXT, TEXT));
SELECT CAST('{key = "value\\with\\backslash"}' AS MAP(TEXT, TEXT));
SELECT CAST('{key=with=equals = value}' AS MAP(TEXT, TEXT)) AS x, x['key'];
SELECT CAST('{"key\\=with" = equals = value}' AS MAP(TEXT, TEXT)) AS x, x['key=with'];
SELECT CAST('{"key\\=with\\=equals" = value}' AS MAP(TEXT, TEXT)) AS x, x['key=with=equals'];
SELECT CAST('{}' AS MAP(TEXT, TEXT));
SELECT CAST('{=}' AS MAP(TEXT, TEXT));
SELECT CAST('{\\{escaped\\brace\\} = \\}escaped\\brace\\\\}' AS MAP(TEXT, TEXT));
SELECT CAST('{"\\{escaped\\brace\\}" = "\\}escaped\\brace\\\\"}' AS MAP(TEXT, TEXT));
SELECT CAST('{key=}' AS MAP(TEXT, TEXT));
SELECT CAST('{=value}' AS MAP(TEXT, TEXT));
SELECT CAST('{''NULL''=true}' AS MAP(TEXT, TEXT)) AS x, CAST(CAST(x AS TEXT) AS MAP(TEXT, TEXT)) AS x, x = x;
SELECT CAST('{''a''=''NULL''}' AS MAP(TEXT, TEXT)) AS x, CAST(CAST(x AS TEXT) AS MAP(TEXT, TEXT)) AS x, x = x;
PRAGMA x;
SELECT CAST('[[True,False], [true], [FALSE], [false, true]]' AS BOOLEAN[][]);
SELECT CAST('[[True,False], [true], [FALSE], [false, true]]' AS BOOLEAN[][]);
SELECT CAST('[[True,False], [true], [FALSE], [false, true]]' AS BOOLEAN[][]);
SELECT CAST('[ok,happy]' AS MOOD[]);
SELECT CAST('[nothappy]' AS MOOD[]);
SELECT CAST(CAST(LIST(x) AS TEXT) AS DATE[]) AS x, CAST(CAST(x AS TEXT) AS DATE[]) AS x, x = x FROM x;
SELECT CAST(CAST(LIST(x) AS TEXT) AS TIME[]) FROM x;
SELECT CAST(CAST(LIST(x) AS TEXT) AS TIME[]) FROM x;
SELECT CAST(CAST(LIST(x) AS TEXT) AS TIME[]) FROM x;
SELECT CAST(CAST(LIST(x) AS TEXT) AS TIME[]) FROM x;
SELECT CAST(CAST(LIST(x) AS TEXT) AS TIME[]) FROM x;
SELECT CAST(CAST(LIST(x) AS TEXT) AS BLOB[]) FROM x;
SELECT CAST(CAST(LIST(x) AS TEXT) AS INTERVAL[]) FROM x;
CREATE TABLE x (x INT[]);
COPY (SELECT CAST([x, NULL] AS TEXT) FROM x AS x) TO '__TEST_DIR__/big_list.csv' WITH (HEADER 0);
COPY x FROM '__TEST_DIR__/big_list.csv';
SELECT COUNT(x) FROM x;
SELECT CAST('{a: True, b: False, c:[true]}' AS STRUCT(x BOOLEAN, x BOOLEAN, x BOOLEAN[], x STRUCT(x BOOLEAN, x BOOLEAN)));
SELECT CAST('{a: True, b: False, c:[true]}' AS STRUCT(x BOOLEAN, x BOOLEAN, x BOOLEAN[], x STRUCT(x BOOLEAN, x BOOLEAN)));
SELECT CAST('{a: True, b: False, c:[true]}' AS STRUCT(x BOOLEAN, x BOOLEAN, x BOOLEAN[], x STRUCT(x BOOLEAN, x BOOLEAN)));
SELECT CAST('{a: ok, b: happy}' AS STRUCT(x MOOD, x MOOD));
SELECT CAST('{a: nothappy}' AS STRUCT(x MOOD));
PRAGMA x;
SELECT CAST('{key_A:0}' AS STRUCT(x INT));
SELECT CAST('{key_A: 2, key_B: 46, key_C: -3000}' AS STRUCT(x INT, x INT, x INT));
SELECT CAST('{key_A: 2, key_B: 3, key_C: 8}' AS STRUCT(x INT, x DOUBLE, x REAL));
SELECT CAST('{"key_A": 2, "key_B": hello world}' AS STRUCT(x INT, x TEXT));
SELECT CAST('{🦆: Quack, 🦤: ....}' AS STRUCT(x TEXT, x TEXT));
SELECT CAST('{a:{c:1}, b:900}' AS STRUCT(x STRUCT(x INT), x INT));
SELECT CAST('{a:{b:DuckDB, c:12}, b:900, c:{a:"DuckParty"}}' AS STRUCT(x STRUCT(x TEXT, x INT), x INT, x STRUCT(x TEXT)));
SELECT CAST('{a:{b:DuckDB, c:{a:{a:0.9, b:{a:"DuckieDuck"}, c:{a:9000}, d:{a:5881580-07-10}}, b:"🦆"}}, b:900, c:{a:"DuckParty"}}' AS STRUCT(x STRUCT(x TEXT, x STRUCT(x STRUCT(x REAL, x STRUCT(x TEXT), x STRUCT(x INT), x STRUCT(x DATE)), x TEXT)), x INT, x STRUCT(x TEXT)));
SELECT CAST('{a:{b:{c:{d:{e:{f:"Hello World"}}}}}}' AS STRUCT(x STRUCT(x STRUCT(x STRUCT(x STRUCT(x STRUCT(x TEXT)))))));
CREATE TABLE x (x TEXT);
INSERT INTO x (VALUES('{a:1, b:3}'));
SELECT CAST(x AS STRUCT(x INT, x INT)) FROM x;
CREATE TABLE x (x TEXT);
INSERT INTO x (VALUES('{a:1, b:"hello, world"}'));
SELECT CAST(x AS STRUCT(x INT, x TEXT)) AS x, CAST(CAST(x AS TEXT) AS STRUCT(x INT, x TEXT)) AS x, x = x FROM x;
CREATE TABLE x (x TEXT);
INSERT INTO x (VALUES('{a:DUCK, b:9.999, c:12}'), ('{a:"DB", b:1.111, c:21}'));
SELECT CAST(x AS STRUCT(x TEXT, x REAL, x INT)) FROM x;
CREATE TABLE x (x TEXT);
INSERT INTO x (VALUES('{a:{b:1}}'));
SELECT CAST(x AS STRUCT(x STRUCT(x INT))) FROM x;
SELECT CAST('{key_A: [2, 3, 4], key_B: [Hello, World]}' AS STRUCT(x INT[], x TEXT[]));
SELECT CAST('{key_A: [[2, 3], [4]], key_B: [Hello, World]}' AS STRUCT(x INT[][], x TEXT[]));
SELECT CAST('{key_A: [[{a: 5, b: 900}, {a:3, b:34}], [{a:2, b: 0}]], key_B: [Hello, World]}' AS STRUCT(x STRUCT(x INT, x INT)[][], x TEXT[]));
SELECT CAST('{key_B: 2, key_A: 46}' AS STRUCT(x INT, x INT));
SELECT CAST('{c:{a:"DuckParty"}, b:900, a:{b:DuckDB, c:{a:{a:0.9, b:{a:"DuckieDuck"}, c:{a:9000}, d:{a:5881580-07-10}}, b:"🦆"}}}' AS STRUCT(x STRUCT(x TEXT, x STRUCT(x STRUCT(x REAL, x STRUCT(x TEXT), x STRUCT(x INT), x STRUCT(x DATE)), x TEXT)), x INT, x STRUCT(x TEXT)));
SELECT CAST('{key_D: "World Hello", key_B: [Hello, World], key_C : 5000, key_A: [[{a: 5, b: 900}, {a:3, b:34}], [{a:2, b: 0}]]}' AS STRUCT(x STRUCT(x INT, x INT)[][], x TEXT[], x INT, x TEXT));
SELECT (CAST('{a: "can''t", b: "you''re", c: "i''m"}' AS STRUCT(x TEXT, x TEXT, x TEXT)));
SELECT (CAST('{a:"}", b: hello universe}' AS STRUCT(x TEXT, x TEXT)));
SELECT (CAST('{a:''}'', b: "hello world"}' AS STRUCT(x TEXT, x TEXT)));
SELECT CAST('{  key_A:     2, key_B: hello world    }' AS STRUCT(x INT, x TEXT));
SELECT CAST('    {a:        {b:         DuckDB,    c:12  }, b:  900, c          :{a
:   "DuckParty  "}       }    ' AS STRUCT(x STRUCT(x TEXT, x INT), x INT, x STRUCT(x TEXT)));
SELECT CAST('{key_A     : [      [{      a: 5    , b  : 900          }, { a: 3, b:    34}],      [   {a:
2, b: 0    }    ] ],     key_B: [Hello       , World]   }' AS STRUCT(x STRUCT(x INT, x INT)[][], x TEXT[]));
SELECT CAST('{a  :  {c   : 9000}, b    : NULL
, c:{ d: "Ducky", e:        NULL     }       }     ' AS STRUCT(x STRUCT(x INT), x TEXT, x STRUCT(x TEXT, x DOUBLE)));
SELECT CAST(' {      }   ' AS STRUCT(x INT, x DATE));
SELECT CAST('{  key_A:     2, key_B: {key_C: hello world    }     X   }' AS STRUCT(x INT, x STRUCT(x TEXT)));
SELECT CAST(NULL AS STRUCT(x INT));
SELECT CAST('{a: NULL}' AS STRUCT(x TEXT));
SELECT CAST('{a:12, b:NULL}' AS STRUCT(x INT, x INT));
SELECT CAST('{a:{c: NULL}, b: NULL, c:{d: "Ducky", e: NULL}}' AS STRUCT(x STRUCT(x INT), x TEXT, x STRUCT(x TEXT, x DOUBLE)));
SELECT CAST('{key_A: 2, key_C: 8}' AS STRUCT(x INT, x INT, x REAL));
SELECT CAST('{key_C: 8, key_A: 2}' AS STRUCT(x INT, x DOUBLE, x REAL));
SELECT CAST('{key_C: Quack}' AS STRUCT(x INT, x TEXT, x TEXT));
SELECT CAST(CAST({'x': 2, 'x': 4} AS TEXT) AS STRUCT(x INT, x TEXT, x TEXT));
SELECT CAST('{key_A:0}' AS STRUCT(x INT, x TEXT));
SELECT CAST('{key_C: {key_B: 3, key_E: 🦆}, key_A: 2}' AS STRUCT(x INT, x STRUCT(x INT, x INT, x TEXT)));
SELECT CAST('{a:{b:{b:300}, c:12}, c:{a:"DuckParty"}}' AS STRUCT(x STRUCT(x STRUCT(x INT, x TEXT), x INT), x INT, x STRUCT(x TEXT, x STRUCT(x INT))));
SELECT CAST('{}' AS STRUCT(x INT, x TEXT));
SELECT TRY_CAST('{key_B: "hello", key_Z: 2, key_A: 46}' AS STRUCT(x INT, x TEXT));
SELECT TRY_CAST('{key_B: "hello", key_Z: 2, key_A: 46}' AS STRUCT(x INT, x TEXT, x INT));
SELECT TRY_CAST('{key_B: "hello", key_A: 46}' AS STRUCT(x INT, x INT));
SELECT TRY_CAST('{a:4, b:''Ducky'', c:''🦆''}' AS STRUCT(x INT, x DOUBLE, x TEXT));
CREATE TABLE x (x TEXT);
INSERT INTO x (VALUES('{a:{d:1}, b:100, c:"🦆"}'), ('{a:{X:1}, b:100, c:"🦆"}'), ('{a:{d:1}, b:100, X:"🦆"}'), ('{a:"oh oh", b:100, c:"🦆"}'), ('{a:{d:"oops"}, b:100, c:"🦆"}'), ('{a:{d:"oops"}, b:100, Z: "undercover", c:"🦆"}'));
SELECT TRY_CAST(x AS STRUCT(x STRUCT(x INT), x DOUBLE, x TEXT)) FROM x;
SELECT CAST('[{a:3}]' AS STRUCT(x INT));
SELECT CAST('Hello World' AS STRUCT(x TEXT));
SELECT CAST('{a: 3}}' AS STRUCT(x INT));
SELECT CAST('{a: 3, b:{c: 8}}}' AS STRUCT(x INT, x STRUCT(x INT)));
SELECT CAST('{{a: 3}' AS STRUCT(x INT));
SELECT CAST('{a:3}, {b:1}' AS STRUCT(x INT, x INT));
SELECT CAST('{a:{a:3}, b:{{b:1}}}' AS STRUCT(x STRUCT(x INT), x STRUCT(x INT)));
SELECT CAST('{a: 3 1}' AS STRUCT(x INT));
SELECT CAST('{a:3,, b:1}' AS STRUCT(x INT, x INT));
SELECT CAST('}{a:5}' AS STRUCT(x INT));
SELECT CAST('{a:{b:{d: 800}, {c: "Duck"}}}' AS STRUCT(x STRUCT(x STRUCT(x INT), x STRUCT(x TEXT))));
SELECT CAST('{[{]}}' AS STRUCT(x TEXT[]));
CREATE TABLE x (x TEXT);
INSERT INTO x (VALUES('{a:DUCK, b:12}'), ('{a:"DB", b:21}'), ('{a:"Quack", b:2}'));
SELECT CAST(x AS STRUCT(x TEXT, x INT)).x FROM x WHERE CAST(x AS STRUCT(x TEXT, x INT)).x = 12;
CREATE TABLE x (x STRUCT(x INT, x TEXT));
COPY (SELECT '{a: 8, b: "hello, DuckDB"}') TO '__TEST_DIR__/assorted_structs.csv';
COPY x FROM '__TEST_DIR__/assorted_structs.csv';
SELECT * FROM x;
CREATE TABLE x (x TEXT);
INSERT INTO x (VALUES('{
"id": "0001",
"type": "donut",
"name": "Cake",
"ppu": 0.55,
"batters":
{
"batter":
[
{ "id": "1001", "type": "Regular" },
{ "id": "1002", "type": "Chocolate" },
{ "id": "1003", "type": "Blueberry" },
{ "id": "1004", "type": "Devil''s Food" }
]
},
"topping":
[
{ "id": "5001", "type": "None" },
{ "id": "5002", "type": "Glazed" },
{ "id": "5005", "type": "Sugar" },
{ "id": "5007", "type": "Powdered Sugar" },
{ "id": "5006", "type": "Chocolate with Sprinkles" },
{ "id": "5003", "type": "Chocolate" },
{ "id": "5004", "type": "Maple" }
]
}'));
SELECT CAST(x AS STRUCT(x TEXT, x TEXT, x TEXT, x REAL, x STRUCT(x STRUCT(x TEXT, x TEXT)[]), x STRUCT(x TEXT, x TEXT)[])) FROM x;
CREATE TABLE x (x JSON);
INSERT INTO x (VALUES('{"A": "Ducky", "B": [3, 50, 8, 43], "C":{"A": "TEST", "B": 0.9, "C": [0.0, 9, 30.2]} }'), ('{"A": "TESTY", "B": [4], "C":{"A": "🦆", "B": 6.12, "C": [0.099, 1.6]} }'), ('{"A": "Hello World", "B": [0, 0, 2, 500, 0, 8], "C":{"A": "DuckieDuck !", "B": 3000, "C": [0]} }'), ('{"A": "", "B": [], "C":{"A": "", "B": 0, "C": []} }'));
SELECT CAST(CAST(x AS TEXT) AS STRUCT(x TEXT, x INT[], x STRUCT(x TEXT, x REAL, x DOUBLE[]))) FROM x;
SELECT CAST('{name: value, age: 30}' AS STRUCT(x TEXT, x INT));
SELECT CAST('{name: John, city: "New York"}' AS STRUCT(x TEXT, x TEXT));
SELECT CAST('{quote_at_start: "\\"test\\"", age: 30}' AS STRUCT(x TEXT, x INT));
SELECT CAST('{user_name: Alice, status: active}' AS STRUCT(x TEXT, x TEXT));
SELECT CAST('{special_characters: "comma, backslash\\\\", age: 30}' AS STRUCT(x TEXT, x INT));
SELECT CAST('{a: 10, b: "hello world"}' AS STRUCT(x INT, x TEXT));
SELECT CAST('{first_name: "John", last_name: "Doe", age: 28}' AS STRUCT(x TEXT, x TEXT, x INT));
SELECT CAST('{first name: John, age: 30}' AS STRUCT("x" TEXT, x INT));
SELECT CAST('{name: "John "Doe"}' AS STRUCT(x TEXT));
SELECT CAST('{name: John, age, 30}' AS STRUCT(x TEXT, x INT));
SELECT CAST('{user,name: Alice, age: 30}' AS STRUCT("x" TEXT, x INT));
SELECT CAST('{name: Alice, age: 30})' AS STRUCT(x TEXT, x INT));
SELECT CAST('{"backslash\\name": value}' AS STRUCT("x" TEXT));
SELECT CAST('{backslash\\name: value}' AS STRUCT("x" TEXT)) AS x, CAST(CAST(x AS TEXT) AS STRUCT("x" TEXT)) AS x, x = x;
SELECT CAST('{name: test, value: 30}' AS STRUCT("x" TEXT, x INT));
SELECT CAST('{name\\:: test, value: 30}' AS STRUCT("x" TEXT, x INT));
SELECT CAST('{"name\\:": test, value: 30}' AS STRUCT("x" TEXT, x INT));
SELECT CAST('{{name}: John, age: 3}' AS STRUCT("x" TEXT, x INT));
SELECT CAST('{{\\"name\\"}: John, age: 3}' AS STRUCT("x" TEXT, x INT));
SELECT CAST('{{\\''name\\''}: John, age: 3}' AS STRUCT("x" TEXT, x INT));
SELECT CAST('{name: "John, age: 30}' AS STRUCT(x TEXT, x INT));
SELECT CAST('{}' AS STRUCT(x TEXT, x INT));
SELECT CAST('{name : John, age : 30}' AS STRUCT(x TEXT, x INT));
SELECT CAST('{path: "C:\\\\Users\\\\John"}' AS STRUCT(x TEXT));
SELECT CAST('{description: "Special characters: \\\\, \\", \\'', (, )"}' AS STRUCT(x TEXT));
SELECT CAST('{first\\ name: "John", age: 30}' AS STRUCT("x" TEXT, x INT));
SELECT CAST('{"first\\ name": "John", age: 30}' AS STRUCT("x" TEXT, x INT));
SELECT CAST('{\\"quote at start\\": "value", age: 30}' AS STRUCT("x" TEXT, x INT));
SELECT CAST('{backslash\\\\name: "John Doe", age: 30}' AS STRUCT("x" TEXT, x INT));
SELECT CAST('{"backslash\\\\name": "John Doe", age: 30}' AS STRUCT("x" TEXT, x INT));
SELECT CAST('{user\\,name: "Alice", age: 25}' AS STRUCT("x" TEXT, x INT));
SELECT CAST('{"user\\,name": "Alice", age: 25}' AS STRUCT("x" TEXT, x INT));
SELECT CAST('{"user,name": "Alice", age: 25}' AS STRUCT("x" TEXT, x INT));
SELECT CAST('{user\\(name\\): "Alice", status: "active"}' AS STRUCT("x" TEXT, x TEXT));
SELECT CAST('{"user\\(name\\)": "Alice", status: "active"}' AS STRUCT("x" TEXT, x TEXT));
SELECT CAST('{user(name): "Alice", status: "active"}' AS STRUCT("x" TEXT, x TEXT));
SELECT CAST('{"user\\ name\\ ": "Alice", "age ": 25}' AS STRUCT("x" TEXT, "x" INT));
SELECT CAST('{user\\ name\\ : "Alice", age\\ : 25}' AS STRUCT("x" TEXT, "x" INT));
SELECT CAST('{"quote"start": "value", age: 30}' AS STRUCT("x" TEXT, x INT));
SELECT CAST('{backslash\\name: "John", age: 30}' AS STRUCT("x" TEXT, x INT));
SELECT CAST('{user(name: "Alice", age: 25}' AS STRUCT("x" TEXT, x INT));
SELECT CAST('{\\": "value", age: 30}' AS STRUCT("x" TEXT, x INT));
SELECT CAST('{\\\\: "escaped", age: 30}' AS STRUCT("x" TEXT, x INT));
SELECT CAST('{"\\\\": "escaped", age: 30}' AS STRUCT("x" TEXT, x INT));
SELECT CAST('{@: "value", age: 30}' AS STRUCT("x" TEXT, x INT));
SELECT CAST('[{''a'': test}, {''a'': NULL}, {''a'': ''null''}, {''a'': ''nUlL''}, {''a'': NULL}, {''a'': NULLz}, {''a'': ''NULL''}]' AS STRUCT(x TEXT)[]) AS x, CAST(CAST(x AS TEXT) AS STRUCT(x TEXT)[]) AS x, x = x;
SELECT CAST('{
a:{
b:{
b:300
},
c:12
},
c:{
a:"\\{DuckParty\\}"
}
}' AS STRUCT(x STRUCT(x STRUCT(x INT, x TEXT), x INT), x INT, x STRUCT(x TEXT, x STRUCT(x INT))));
SELECT CAST('{"  test  ": 42}' AS STRUCT("x" INT)) AS x, CAST(CAST(x AS TEXT) AS STRUCT("x" INT)) AS x, x = x;
SELECT CAST('{"  \\"test\\"  ": 42}' AS STRUCT("x" INT)) AS x, CAST(CAST(x AS TEXT) AS STRUCT("x" INT)) AS x, x = x;
SELECT CAST('{"  \\''test\\''  ": 42}' AS STRUCT("x" INT)) AS x, CAST(CAST(x AS TEXT) AS STRUCT("x" INT)) AS x, x = x;
SELECT CAST('{"\\\\  test  \\\\": 42}' AS STRUCT("x" INT)) AS x, CAST(CAST(x AS TEXT) AS STRUCT("x" INT)) AS x, x = x;
SELECT CAST('{"test": \\\\  test  \\\\}' AS STRUCT("x" TEXT)) AS x, CAST(CAST(x AS TEXT) AS STRUCT("x" TEXT)) AS x, x = x;
SELECT [ROW('a'), '(abc)'];
SELECT [ROW('a', 'b', 'c'), '(abc, def, ghi)'];
SELECT [ROW('a'), '()'];
SELECT [ROW('a'), '('''')'];
SELECT [ROW({'x': 21}), '({''amount'': 42})'];
SELECT [ROW(ROW(21)), '((42))'];
SELECT [ROW(ROW(21), {'x': 42}), '((42), {amount: 21})'];
SELECT [ROW([7, 8, 9], [10, 11, 12]), '([1,2,3], [4,5,6])'];
SELECT [ROW([4, 5, 6]), '([1,2,3],)'];
SELECT [ROW([4, 5, 6], 'abc'), '([1,2,3],)'];
SELECT [{'x': [4, 5, 6], 'x': 'abc'}, '{''a'': [1,2,3],''b'':}'];
SELECT [[ROW(ROW('  test  ')), {'x': {'x': '\  test  \'}}], '[(("  test  ")), {''a'': (\\\\  test  \\\\)}]'];
SELECT [ROW('test'), '(NULL)', '(''null'')', '(''nUlL'')', '(NuLl)', '("NULLz")', '("NULL")'] AS x, CAST(CAST(x AS TEXT) AS STRUCT(x TEXT)[]) AS x, x = x;
PRAGMA x;
CREATE TABLE x (x BIT);
INSERT INTO x VALUES ('00001111');
SELECT CAST(BITSTRING('1', 9) AS BOOLEAN);
SELECT CAST(x AS BOOLEAN) FROM x;
SELECT CAST(CAST('1' AS BIT) AS BOOLEAN);
SELECT CAST(CAST('0' AS BIT) AS BOOLEAN);
SELECT CAST(x AS TINYINT) FROM x;
SELECT CAST(x AS SMALLINT) FROM x;
SELECT CAST(x AS INT) FROM x;
SELECT CAST(x AS BIGINT) FROM x;
SELECT CAST(x AS UTINYINT) FROM x;
SELECT CAST(x AS USMALLINT) FROM x;
SELECT CAST(x AS UINTEGER) FROM x;
SELECT CAST(x AS UBIGINT) FROM x;
SELECT CAST(x AS INT128) FROM x;
SELECT CAST(x AS UINT128) FROM x;
SELECT CAST(x AS REAL) FROM x;
SELECT CAST(x AS DOUBLE) FROM x;
SELECT CAST(CAST('100001111000011110000111100001111' AS BIT) AS BIGINT);
SELECT CAST(CAST(15 AS BOOLEAN) AS BIT);
SELECT CAST(CAST(15 AS TINYINT) AS BIT);
SELECT CAST(CAST(15 AS SMALLINT) AS BIT);
SELECT CAST(15 AS BIT);
SELECT CAST(CAST(15 AS BIGINT) AS BIT);
SELECT CAST(CAST(15 AS INT128) AS BIT);
SELECT CAST(CAST(15 AS UINT128) AS BIT);
SELECT CAST(CAST(2.1e-44 AS REAL) AS BIT);
SELECT CAST(7.4e-323 AS BIT);
SELECT CAST(BITSTRING('1', 9) AS TINYINT);
SELECT CAST(BITSTRING('1', 17) AS SMALLINT);
SELECT CAST(BITSTRING('1', 33) AS INT);
SELECT CAST(BITSTRING('1', 65) AS BIGINT);
SELECT CAST(BITSTRING('1', 33) AS REAL);
SELECT CAST(BITSTRING('1', 65) AS DOUBLE);
SELECT CAST(x AS BLOB) FROM x;
SELECT CAST(BITSTRING('1111', 32) AS BLOB);
SELECT CAST(CAST('1111' AS BIT) AS BLOB);
SELECT CAST(CAST(CAST('ab' AS BLOB) AS BIT) AS BLOB);
SELECT CAST(CAST(CAST('a' AS BLOB) AS BIT) AS BLOB);
SELECT CAST(BITSTRING('1111', 33) AS BLOB);
SELECT CAST(CAST('AAAA' AS BLOB) AS BIT);
SELECT CAST(CAST('' AS BLOB) AS BIT);
SELECT CAST(CAST((-15) AS TINYINT) AS BIT);
SELECT CAST(CAST((-15) AS INT128) AS BIT);
SELECT CAST(CAST((127) AS TINYINT) AS BIT);
SELECT CAST(CAST((-128) AS TINYINT) AS BIT);
SELECT CAST(CAST((32767) AS SMALLINT) AS BIT);
SELECT CAST(CAST((-32768) AS SMALLINT) AS BIT);
SELECT CAST(CAST((2147483647) AS INT) AS BIT);
SELECT CAST(CAST((-2147483648) AS INT) AS BIT);
SELECT CAST(CAST((9223372036854775807) AS BIGINT) AS BIT);
SELECT CAST(CAST((-9223372036854775808) AS BIGINT) AS BIT);
SELECT CAST(CAST((170141183460469231731687303715884105727) AS INT128) AS BIT);
SELECT CAST(CAST((-170141183460469231731687303715884105728) AS INT128) AS BIT);
SELECT CAST(CAST('01111111' AS BIT) AS TINYINT);
SELECT CAST(CAST('10000000' AS BIT) AS TINYINT);
SELECT CAST(CAST('0111111111111111' AS BIT) AS SMALLINT);
SELECT CAST(CAST('1000000000000000' AS BIT) AS SMALLINT);
SELECT CAST(CAST('01111111111111111111111111111111' AS BIT) AS INT);
SELECT CAST(CAST('10000000000000000000000000000000' AS BIT) AS INT);
SELECT CAST(CAST('0111111111111111111111111111111111111111111111111111111111111111' AS BIT) AS BIGINT);
SELECT CAST(CAST('1000000000000000000000000000000000000000000000000000000000000000' AS BIT) AS BIGINT);
SELECT CAST(CAST('01111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111' AS BIT) AS INT128);
SELECT CAST(CAST('10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000' AS BIT) AS INT128);
SELECT CAST(CAST((255) AS UTINYINT) AS BIT);
SELECT CAST(CAST((65535) AS USMALLINT) AS BIT);
SELECT CAST(CAST((4294967295) AS UINTEGER) AS BIT);
SELECT CAST(CAST((18446744073709551615) AS UBIGINT) AS BIT);
SELECT CAST(CAST('340282366920938463463374607431768211455' AS UINT128) AS BIT);
SELECT CAST(CAST('11111111' AS BIT) AS UTINYINT);
SELECT CAST(CAST('1111111111111111' AS BIT) AS USMALLINT);
SELECT CAST(CAST('11111111111111111111111111111111' AS BIT) AS UINTEGER);
SELECT CAST(CAST('1111111111111111111111111111111111111111111111111111111111111111' AS BIT) AS UBIGINT);
SELECT CAST(CAST((3.4028235e+38) AS REAL) AS BIT);
SELECT CAST(CAST((1.7976931348623157e+308) AS DOUBLE) AS BIT);
SELECT CAST(CAST('01111111011111111111111111111111' AS BIT) AS REAL);
SELECT CAST(CAST('0111111111101111111111111111111111111111111111111111111111111111' AS BIT) AS DOUBLE);
SELECT CAST(NULL AS BIT);
SELECT CAST(CAST(NULL AS BIT) AS INT);
PRAGMA x;
SELECT CAST(1 = 1 AS TEXT);
SELECT CAST(1 = 0 AS TEXT);
SELECT CAST(12345 AS BOOLEAN);
SELECT CAST('true' AS BOOLEAN);
SELECT CAST('t' AS BOOLEAN);
SELECT CAST('TRUE' AS BOOLEAN);
SELECT CAST('yes' AS BOOLEAN);
SELECT CAST('YeS' AS BOOLEAN);
SELECT CAST('y' AS BOOLEAN);
SELECT CAST('false' AS BOOLEAN);
SELECT CAST('f' AS BOOLEAN);
SELECT CAST('FALSE' AS BOOLEAN);
SELECT CAST('no' AS BOOLEAN);
SELECT CAST('nO' AS BOOLEAN);
SELECT CAST('n' AS BOOLEAN);
SELECT CAST('12345' AS BOOLEAN);
CREATE TABLE x AS SELECT 0 AS x;
SELECT CAST(x AS BOOLEAN) FROM x;
SELECT CAST(x AS BOOLEAN);
SELECT CAST(CAST('12345' AS INT) AS BOOLEAN);
SELECT CAST(CAST('0' AS INT) AS BOOLEAN);
SELECT CAST(CAST('1' AS TINYINT) AS BOOLEAN);
SELECT CAST(CAST('0' AS TINYINT) AS BOOLEAN);
SELECT CAST(CAST('1' AS SMALLINT) AS BOOLEAN);
SELECT CAST(CAST('0' AS SMALLINT) AS BOOLEAN);
SELECT CAST(CAST('1' AS INT) AS BOOLEAN);
SELECT CAST(CAST('0' AS INT) AS BOOLEAN);
SELECT CAST(CAST('1' AS BIGINT) AS BOOLEAN);
SELECT CAST(CAST('0' AS BIGINT) AS BOOLEAN);
SELECT CAST(CAST('1' AS DECIMAL(18, 3)) AS BOOLEAN);
SELECT CAST(CAST('0' AS DECIMAL(18, 3)) AS BOOLEAN);
SELECT CAST(CAST('1' AS DECIMAL(1, 0)) AS BOOLEAN);
SELECT CAST(CAST('0' AS DECIMAL(1, 0)) AS BOOLEAN);
SELECT CAST(CAST('1' AS DECIMAL(9, 0)) AS BOOLEAN);
SELECT CAST(CAST('0' AS DECIMAL(9, 0)) AS BOOLEAN);
SELECT CAST(CAST('1' AS DECIMAL(38, 0)) AS BOOLEAN);
SELECT CAST(CAST('0' AS DECIMAL(38, 0)) AS BOOLEAN);
SELECT CAST(CAST('1' AS REAL) AS BOOLEAN);
SELECT CAST(CAST('0' AS REAL) AS BOOLEAN);
SELECT CAST(CAST('1' AS DOUBLE) AS BOOLEAN);
SELECT CAST(CAST('0' AS DOUBLE) AS BOOLEAN);
SELECT CAST(CAST('1' AS INT128) AS BOOLEAN);
SELECT CAST(CAST('0' AS INT128) AS BOOLEAN);
SELECT CAST(CAST('1' AS UINT128) AS BOOLEAN);
SELECT CAST(CAST('0' AS UINT128) AS BOOLEAN);
PRAGMA x;
SELECT CAST('e1' AS INT);
SELECT CAST('  e1' AS INT);
SELECT CAST('  E1' AS INT);
SELECT CAST('e1' AS DOUBLE);
SELECT CAST('  e1' AS DOUBLE);
SELECT CAST('  E1' AS DOUBLE);
SELECT CAST('1e1' AS INT);
SELECT CAST('  1e1' AS INT);
SELECT CAST('1e1' AS DOUBLE);
SELECT CAST('   1e1' AS DOUBLE);
SELECT CAST('${prefix}' AS INT);
SELECT CAST('${prefix}2' AS INT);
SELECT CAST('${prefix}10105' AS INT);
SELECT CAST('${prefix}-1' AS INT);
SELECT CAST('-${prefix}1' AS INT);
SELECT CAST('${prefix}1' AS INT);
SELECT CAST('${prefix}10' AS INT);
SELECT CAST('${prefix}11' AS INT);
SELECT CAST('${prefix}0000000' AS INT);
SELECT CAST('${prefix}1_0' AS INT);
SELECT CAST('${prefix}1_0_0' AS INT);
SELECT CAST('${prefix}11110000_11110000' AS INT);
SELECT CAST('${prefix}_1' AS INT);
SELECT CAST('${prefix}1_' AS INT);
SELECT CAST('${prefix}1_0_' AS INT);
SELECT CAST('${prefix}_1_0' AS INT);
WITH x AS (SELECT REPLACE('${binary}', '_', '') AS x) SELECT CAST(LIST_SUM([(CASE WHEN TEXT[x + 1] = '0' THEN 0 ELSE 1 END) * (POWER(2, (LENGTH(x) - (x + 1)))) FOR x IN RANGE(0, LENGTH(x))]) AS INT) = CAST('${prefix}${binary}' AS INT) FROM x;
SELECT CAST('${prefix}0000000000000000000000000000000001111111' AS TINYINT);
SELECT CAST('${prefix}0000000000000000000000000000000011111111' AS UINT8);
SELECT CAST('${prefix}00000000000000000000000000000000111111111' AS TINYINT);
SELECT CAST('${prefix}1111111111111111111111111111111' AS INT);
SELECT CAST('${prefix}11111111111111111111111111111111' AS INT);
SELECT CAST('${prefix}01111111111111111111111111111111' AS UINT32);
SELECT CAST('${prefix}11111111111111111111111111111111' AS UINT32);
SELECT CAST('${prefix}11111111111111111111111111111111' AS BIGINT);
SELECT CAST('${prefix}111111111111111111111111111111111111111111111111111111111111111' AS BIGINT);
SELECT CAST('${prefix}1111111111111111111111111111111111111111111111111111111111111111' AS BIGINT);
SELECT CAST('${prefix}1111111111111111111111111111111111111111111111111111111111111111' AS UINT64);
PRAGMA x;
SELECT CAST((1 = 1) AS TEXT), CAST((1 = 0) AS TEXT), CAST(CAST(NULL AS BOOLEAN) AS TEXT);
SELECT CAST(CAST(1 AS TINYINT) AS TEXT), CAST(CAST(12 AS TINYINT) AS TEXT), CAST(CAST((-125) AS TINYINT) AS TEXT);
SELECT CAST(CAST(1 AS SMALLINT) AS TEXT), CAST(CAST(12442 AS SMALLINT) AS TEXT), CAST(CAST((-32153) AS SMALLINT) AS TEXT);
SELECT CAST(CAST(1 AS INT) AS TEXT), CAST(CAST(12442952 AS INT) AS TEXT), CAST(CAST((-2000000111) AS INT) AS TEXT);
SELECT CAST(CAST(1 AS BIGINT) AS TEXT), CAST(CAST(1244295295289253 AS BIGINT) AS TEXT), CAST(CAST((-2000000111551166) AS BIGINT) AS TEXT);
SELECT CAST(CAST(2 AS REAL) AS TEXT), CAST(CAST(0.5 AS REAL) AS TEXT), CAST(CAST((-128.5) AS REAL) AS TEXT);
SELECT CAST(CAST(2 AS DOUBLE) AS TEXT), CAST(CAST(0.5 AS DOUBLE) AS TEXT), CAST(CAST((-128.5) AS DOUBLE) AS TEXT);
SELECT CAST('0xF' AS INT), CAST('0x0' AS INT), CAST('0xFEE' AS INT), CAST('0xfee' AS INT), CAST('0x00FEE' AS INT);
SELECT CAST('0x' AS INT);
SELECT CAST('0X' AS INT);
SELECT CAST('0xHELLO' AS INT);
SELECT CAST('0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' AS INT);
SELECT CAST('0x7F' AS TINYINT), CAST('0x7FFF' AS SMALLINT), CAST('0x7FFFFFFF' AS INT), CAST('0x7FFFFFFFFFFFFFFF' AS BIGINT);
SELECT CAST('0xFF' AS UINT8), CAST('0xFFFF' AS UINT16), CAST('0xFFFFFFFF' AS UINT32), CAST('0xFFFFFFFFFFFFFFFF' AS UINT64);
SELECT CAST('0x000000000000000000000000000000000000000000000000000000000000000000' AS INT);
SELECT CAST('0x80' AS TINYINT);
SELECT CAST('0x8000' AS SMALLINT);
SELECT CAST('0x80000000' AS INT);
SELECT CAST('0x8000000000000000' AS BIGINT);
SELECT CAST('0x100' AS UINT8);
SELECT CAST('0x10000' AS UINT16);
SELECT CAST('0x100000000' AS UINT32);
SELECT CAST('0x10000000000000000' AS UINT64);
SELECT TRY_CAST('0x80' AS TINYINT);
SELECT TRY_CAST('0x8000' AS SMALLINT);
SELECT TRY_CAST('0x80000000' AS INT);
SELECT TRY_CAST('0x8000000000000000' AS BIGINT);
SELECT TRY_CAST('0x100' AS UINT8);
SELECT TRY_CAST('0x10000' AS UINT16);
SELECT TRY_CAST('0x100000000' AS UINT32);
SELECT TRY_CAST('0x10000000000000000' AS UINT64);
SELECT TRY_CAST('0x10000000000000000' AS UINT64);
SELECT TRY_CAST('0x10000000000000000' AS UINT64);
SELECT TRY_CAST('0x10000000000000000' AS UINT64);
SELECT CAST('${hex}' AS INT);
SELECT CAST('${hex}' AS INT);
SELECT CAST('${hex}' AS INT);
SELECT CAST('${hex}' AS INT);
SELECT CAST('${hex}' AS INT);
SELECT CAST('${hex}' AS INT);
PRAGMA x;
SELECT TRY_CAST('hello' AS INT);
SELECT CAST('hello' AS INT);
SELECT TRY_CAST(3 AS BIGINT), CAST(3 AS BIGINT), TRY_CAST(2 AS BIGINT), CAST(3 AS INT);
CREATE TABLE x (x INT);
INSERT INTO x VALUES (3);
SELECT x FROM x;
SELECT TRY_CAST(x AS BIGINT) FROM x;
SELECT TRY_CAST(TRY_CAST(x AS INT) AS INT) FROM x;
PRAGMA x;
CREATE TABLE x AS SELECT CAST('2021-02-04 19:30:00' AS TIMESTAMP) AS x;
SELECT * FROM x WHERE (CAST(x AS DATE)) = CAST('2021-02-04' AS DATE);
SELECT * FROM x WHERE (CAST(x AS DATE)) = '2021-02-04';
SELECT * FROM x WHERE (CAST(x AS DATE)) = '2021-02-04';
CREATE TABLE x (x INT, "x" INT);
ALTER TABLE x ALTER COLUMN x SET DATA TYPE TEXT;
ALTER TABLE x DROP COLUMN x;
SELECT x FROM x;
ALTER TABLE x ADD COLUMN "x" TEXT;
ALTER TABLE x ALTER COLUMN x SET DEFAULT 3;
INSERT INTO x (x) VALUES (DEFAULT);
SELECT x FROM x;
ALTER TABLE x ALTER COLUMN x DROP DEFAULT;
SELECT x FROM x;
CREATE TABLE x (x INT);
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
ALTER TABLE x ADD COLUMN x INT;
ALTER TABLE x RENAME TO x;
DROP TABLE x;
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
SELECT * FROM x;
SELECT * FROM x;
ALTER TABLE x ADD COLUMN x INT;
ALTER TABLE x ADD COLUMN "x" INT;
CREATE TABLE x (x INT, x INT);
SELECT "x" FROM x;
ALTER TABLE x DROP COLUMN "x";
ALTER TABLE x ADD COLUMN x INT;
ALTER TABLE x ALTER COLUMN "x" SET DEFAULT 3;
PRAGMA x;
WITH x AS (SELECT 42 AS "x") SELECT x FROM x;
WITH "x" AS (SELECT 42) SELECT * FROM x;
SET x = 'nulls_first';
SET x = 'nulls_first';
CREATE TABLE x (x INT);
INSERT INTO x (x) VALUES (1), (2), (3), (NULL);
SELECT x.x FROM x ORDER BY x;
SELECT x.x AS x FROM x GROUP BY x ORDER BY "x"."x";
SELECT x.x AS "x" FROM x GROUP BY "x" ORDER BY "x"."x";
WITH "x" AS (SELECT x.x AS "x" FROM x GROUP BY "x") SELECT * FROM x ORDER BY x;
WITH "x" AS (SELECT x.x AS "x" FROM x GROUP BY "x") SELECT * FROM x ORDER BY x;
UPDATE x SET x = x.x + 1;
SELECT x FROM x ORDER BY x.x;
DELETE FROM x WHERE x IS NULL;
SELECT x FROM x ORDER BY x.x;
ALTER TABLE x ADD COLUMN x INT;
SELECT x, x FROM x ORDER BY x.x;
UPDATE x SET x = x.x;
ALTER TABLE x DROP COLUMN x;
SELECT x FROM x ORDER BY x.x;
SELECT x.x FROM (SELECT x FROM x) AS x ORDER BY x;
DROP TABLE x;
DROP TABLE x;
INSERT INTO x VALUES ({'x': {'x': 42}});
SELECT x.x.x.x, "x"."x"."x"."x", "x"."x"."x"."x" FROM x;
SELECT "x"."x"."x"."x" FROM x GROUP BY "x"."x"."x"."x";
SELECT x.x.x.x FROM x GROUP BY x.x.x.x;
DROP TABLE x;
CREATE TABLE x AS SELECT 1 AS "x", 2 AS "x";
CREATE TABLE x AS SELECT 1 AS "x", 3 AS "x";
SELECT * FROM x JOIN x USING (x);
SELECT * FROM x JOIN x USING ("x");
DROP TABLE x;
DROP TABLE x;
CREATE TABLE x AS SELECT 1 AS "x", 2 AS "x";
CREATE TABLE x AS SELECT 1 AS x, 3 AS "x";
SELECT * FROM x JOIN x USING (x);
SELECT * FROM x JOIN x USING (x);
DROP TABLE x;
DROP TABLE x;
CREATE TABLE x AS SELECT 1 AS "x", 2 AS x;
CREATE TABLE x AS SELECT 1 AS "x", 3 AS x;
CREATE TABLE x AS SELECT 1 AS "x", 4 AS x;
CREATE TABLE x AS SELECT 1 AS "x", 5 AS x;
CREATE TABLE x AS SELECT 1 AS "x", 6 AS x;
SELECT * FROM x JOIN x USING (x);
SELECT * FROM x JOIN x USING (x, "x");
SELECT * FROM x JOIN x USING (x) JOIN x USING (x);
SELECT * FROM x JOIN x USING (x) JOIN x USING ("x");
SELECT * FROM x JOIN x USING (x) JOIN x USING (x) JOIN x USING (x);
SELECT * FROM x JOIN x USING ("x") JOIN x USING ("x") JOIN x USING (x);
SELECT * FROM x JOIN x USING (x) JOIN x USING (x) JOIN x USING (x) JOIN x USING (x);
SELECT * FROM x FULL OUTER JOIN x USING (x);
SELECT * FROM x FULL OUTER JOIN x USING (x) FULL OUTER JOIN x USING (x);
SELECT * FROM x FULL OUTER JOIN x USING (x) FULL OUTER JOIN x USING (x) FULL OUTER JOIN x USING (x);
SELECT * FROM x FULL OUTER JOIN x USING (x) FULL OUTER JOIN x USING (x) FULL OUTER JOIN x USING (x) FULL OUTER JOIN x USING (x);
SELECT * FROM x NATURAL JOIN x;
SELECT * FROM x NATURAL JOIN x NATURAL JOIN x;
SELECT * FROM x NATURAL JOIN x NATURAL JOIN x NATURAL JOIN x;
SELECT * FROM x NATURAL JOIN x NATURAL JOIN x NATURAL JOIN x NATURAL JOIN x;
SELECT * FROM (x NATURAL JOIN x NATURAL JOIN x) NATURAL JOIN (x NATURAL JOIN x);
SELECT * FROM x NATURAL FULL OUTER JOIN x;
SELECT * FROM x NATURAL FULL OUTER JOIN x NATURAL FULL OUTER JOIN x;
SELECT * FROM x NATURAL FULL OUTER JOIN x NATURAL FULL OUTER JOIN x NATURAL FULL OUTER JOIN x;
SELECT * FROM x NATURAL FULL OUTER JOIN x NATURAL FULL OUTER JOIN x NATURAL FULL OUTER JOIN x NATURAL FULL OUTER JOIN x;
SELECT * FROM (x NATURAL FULL OUTER JOIN x NATURAL FULL OUTER JOIN x) NATURAL FULL OUTER JOIN (x NATURAL FULL OUTER JOIN x);
SELECT * FROM (SELECT 1 AS "x", 2 AS "x") NATURAL JOIN (SELECT 1 AS "x", 2 AS "x");
SELECT * FROM (SELECT 1 AS "x", 2 AS "x") NATURAL JOIN (SELECT 1 AS "x", 2 AS "x");
SELECT * FROM (SELECT 1 AS "x", 2 AS "x") AS x, (SELECT 1 AS "x", 2 AS "x") AS x;
SELECT * FROM (SELECT 1 AS "x", 2 AS "x") AS x JOIN (SELECT 1 AS "x", 2 AS "x") AS x USING (x);
SELECT * FROM (SELECT 1 AS "x", 2 AS "x") AS x JOIN (SELECT 1 AS "x", 2 AS "x") AS x USING (x);
SELECT x FROM (x JOIN x USING (x)), (x JOIN x USING (x));
CREATE TABLE x AS SELECT 1 AS x;
SELECT x FROM x WHERE x = 'test_table_column';
COMMENT ON COLUMN x.x IS 'very gezellige column';
SELECT x FROM x WHERE x = 'test_table_column';
SELECT x FROM x WHERE x = 'test_table_column';
CREATE VIEW x AS SELECT x AS x FROM x;
SELECT x FROM x WHERE x = 'test_view_column';
COMMENT ON COLUMN x.x IS 'very gezellige view column';
SELECT x FROM x WHERE x = 'test_view_column';
SELECT x FROM x WHERE x = 'test_view_column';
SELECT x, x, x, x FROM x WHERE x IS FALSE;
SELECT x, x, x, x FROM x WHERE x IS FALSE;
SELECT x, x, x, x FROM x WHERE x IS FALSE;
SELECT x, x, x, x FROM x WHERE x IS FALSE;
SELECT x, x, x, x FROM x WHERE x IS FALSE;
CREATE TABLE x AS SELECT 1 AS x;
CREATE INDEX x ON x USING art(x);
COMMENT ON TABLE x IS 'very niceee';
CREATE TABLE x (x INT);
CREATE VIEW x AS SELECT CAST(x AS TEXT) AS x FROM x;
COMMENT ON TABLE x IS 'a table';
COMMENT ON COLUMN x.x IS 'a column';
COMMENT ON VIEW x IS 'a view';
COMMENT ON COLUMN x.x IS 'a column';
SELECT x FROM x WHERE x = 'i';
SELECT x FROM x WHERE x = 'a';
SELECT x FROM x WHERE x = 'b';
SELECT x FROM x WHERE x = 'j';
ATTACH '__TEST_DIR__/comment_on_extended_1.db' AS x;
ATTACH '__TEST_DIR__/comment_on_extended_2.db' AS x;
CREATE SCHEMA x.x.x;
CREATE SCHEMA x.x.x;
CREATE TABLE x.x.x AS SELECT 1 AS x;
CREATE TABLE x.x.x AS SELECT 2 AS x;
CREATE TABLE x.x.x AS SELECT 3 AS x;
CREATE TABLE x.x.x AS SELECT 4 AS x;
CREATE INDEX x ON x.x.x USING art(x);
CREATE INDEX x ON x.x.x USING art(x);
SELECT COUNT(*) FROM x WHERE NOT x IS NULL;
SELECT COUNT(*) FROM x WHERE NOT x IS NULL;
COMMENT ON TABLE x.x.x IS 'very gezellige table 1';
SELECT x FROM x WHERE x = 't1';
USE x.x;
COMMENT ON TABLE x IS 'very gezellige table 2';
SELECT x FROM x WHERE x = 't2';
COMMENT ON TABLE x.x IS 'another very gezellige table 2';
SELECT x FROM x WHERE x = 't2';
COMMENT ON TABLE x.x IS 'yet another very gezellige table 2';
SELECT x FROM x WHERE x = 't2';
SELECT x FROM x WHERE x = 't2';
SELECT x FROM x WHERE x = 'test_index' AND x = 'db1';
SELECT x FROM x WHERE x = 'test_index' AND x = 'db1';
SELECT x, x, x FROM x WHERE x = 'test_index' ORDER BY x;
COMMENT ON COLUMN x IS 'no bueno';
COMMENT ON COLUMN x.x.x."x".x IS 'no bueno';
COMMENT ON COLUMN x.x IS 'bla';
COMMENT ON COLUMN x.x.x.x IS 'very gezellige column 1';
SELECT x, x, x, x FROM x WHERE x = 'c1' ORDER BY x;
COMMENT ON COLUMN x.x.x IS 'very gezellige column 2';
SELECT x, x, x, x FROM x WHERE x = 'c2' ORDER BY x;
COMMENT ON COLUMN x.x.x IS 'another very gezellige column 2';
SELECT x, x, x, x FROM x WHERE x = 'c2' ORDER BY x;
COMMENT ON COLUMN x.x IS 'yet another very gezellige column 2';
SELECT x, x, x, x FROM x WHERE x = 'c2' ORDER BY x;
CREATE TABLE x AS SELECT 1 AS x;
COMMENT ON TABLE x IS 'comment-1';
COMMENT ON COLUMN x.x IS 'comment-2';
CREATE VIEW x AS SELECT * FROM x;
COMMENT ON COLUMN x.x IS 'comment-2.5';
CREATE INDEX x ON x(x);
COMMENT ON VIEW x IS 'comment-3';
COMMENT ON INDEX x IS 'comment-4';
CREATE SEQUENCE x;
COMMENT ON SEQUENCE x IS 'comment-5';
CREATE FUNCTION x(x, x) AS x + x;
SELECT x.x, x.x FROM x AS x LEFT JOIN x AS x ON x.x = x.x AND x.x = x.x WHERE x.x = 0 AND x.x = 'test';
SELECT x.x, x.x FROM x AS x LEFT JOIN x AS x ON x.x = x.x AND x.x = x.x WHERE x.x = 1 AND x.x = 'test';
SELECT x.x, x.x FROM x AS x LEFT JOIN x AS x ON x.x = x.x AND x.x = x.x WHERE x.x = 1 AND x.x = 'test_view';
SELECT x.x, x.x FROM x AS x LEFT JOIN x AS x ON x.x = x.x AND x.x = x.x WHERE x.x = 0 AND x.x = 'test_view';
SELECT x.x, x.x FROM x AS x LEFT JOIN x AS x ON x.x = x.x AND x.x = x.x WHERE x.x = 'test_index';
SELECT x.x, x.x FROM x AS x LEFT JOIN x AS x ON x.x = x.x AND x.x = x.x WHERE x.x = 'seq';
SELECT x.x, x.x FROM x AS x LEFT JOIN x AS x ON x.x = x.x AND x.x = x.x WHERE x.x = 'test_type';
SELECT x.x, x.x FROM x AS x LEFT JOIN x AS x ON x.x = x.x AND x.x = x.x WHERE x.x = 'test_table_macro';
SELECT x.x, x.x FROM x AS x LEFT JOIN x AS x ON x.x = x.x AND x.x = x.x WHERE x.x = 'test_function';
SET x = '10.0 GB';
PRAGMA x;
PRAGMA x;
COMMENT ON TABLE x IS 'blablabloebloe';
CREATE TABLE x AS SELECT 1 AS x;
SELECT x FROM x WHERE x = 'test_table';
COMMENT ON TABLE x IS 'very gezellige table';
SELECT x FROM x WHERE x = 'test_table';
SELECT x FROM x WHERE x = 'test_table';
SELECT x FROM x WHERE x = 'test_table';
SELECT x FROM x WHERE x = 'test_table';
SELECT * FROM x;
CREATE VIEW x AS SELECT 1 AS x;
SELECT x FROM x WHERE x = 'test_view';
COMMENT ON VIEW x IS 'very gezellige view';
SELECT x FROM x WHERE x = 'test_view';
SELECT x FROM x WHERE x = 'test_view';
SELECT * FROM x;
DROP VIEW x;
CREATE INDEX x ON x USING art(x);
SELECT x FROM x WHERE x = 'test_index';
COMMENT ON INDEX x IS 'very gezellige index';
SELECT x FROM x WHERE x = 'test_index';
SELECT x FROM x WHERE x = 'test_index';
SELECT * FROM x WHERE x = 1;
DROP INDEX x;
CREATE SEQUENCE x;
SELECT x FROM x WHERE x = 'test_sequence';
COMMENT ON SEQUENCE x IS 'very gezellige sequence';
SELECT x FROM x WHERE x = 'test_sequence';
SELECT x FROM x WHERE x = 'test_sequence';
SELECT NEXTVAL('test_sequence');
DROP SEQUENCE x;
SELECT x FROM x WHERE x = 'test_type';
SELECT x FROM x WHERE x = 'test_type';
SELECT x FROM x WHERE x = 'test_type';
SELECT CAST(1 AS test_type) AS x;
SELECT x FROM x WHERE x = 'test_table_column';
COMMENT ON COLUMN x.x IS 'very gezellige column';
SELECT x FROM x WHERE x = 'test_table_column';
SELECT x FROM x WHERE x = 'test_table_column';
ALTER TABLE x RENAME COLUMN x TO x;
SELECT x FROM x WHERE x = 'test_table_column_renamed';
SELECT x FROM x WHERE x = 'test_macro';
SELECT x FROM x WHERE x = 'test_macro';
SELECT x FROM x WHERE x = 'test_macro';
SELECT TEST_MACRO(1, 2);
CREATE FUNCTION x(x, x) AS x + x;
SELECT x FROM x WHERE x = 'test_function';
COMMENT ON FUNCTION x IS 'very gezellige function';
SELECT x FROM x WHERE x = 'test_function';
SELECT x FROM x WHERE x = 'test_function';
SELECT x FROM x WHERE x = 'test_table_macro';
SELECT x FROM x WHERE x = 'test_table_macro';
SELECT x FROM x WHERE x = 'test_table_macro';
SELECT * FROM x;
COMMENT ON DATABASE x IS 'bloebloe';
COMMENT ON SCHEMA x IS 'bloebloe';
CREATE TABLE x (x INT);
CREATE SCHEMA x.x;
CREATE TABLE x.x (x INT);
SELECT * FROM x;
SELECT * FROM x;
CREATE SCHEMA x.x;
SELECT * FROM x;
CREATE SCHEMA x.x;
SELECT * FROM x;
CREATE SCHEMA x.x;
SELECT * FROM x;
SELECT * FROM x.x;
PRAGMA x;
CREATE TABLE x (x TEXT);
BEGIN;
DROP TABLE IF EXISTS x;
CREATE TABLE x (x TEXT);
SELECT x FROM x;
ROLLBACK;
SELECT x FROM x;
PRAGMA x;
CREATE TABLE x.x.x (x INT);
CREATE TABLE x.x (x INT);
CREATE TABLE x.x (x INT);
PRAGMA x;
CREATE SCHEMA "x".x;
CREATE TABLE x (x INT);
CREATE VIEW x AS SELECT 42;
CREATE OR REPLACE VIEW x AS SELECT 42;
DROP VIEW x;
DROP TABLE x;
ALTER TABLE x RENAME COLUMN x TO x;
DROP TABLE IF EXISTS x;
CREATE INDEX x ON x(x);
CREATE INDEX x ON x(x);
CREATE INDEX IF NOT EXISTS x ON x(x);
DROP INDEX x;
DROP INDEX x;
DROP INDEX IF EXISTS x;
CREATE UNIQUE INDEX x ON x(x);
CREATE UNIQUE INDEX x ON x(x);
CREATE UNIQUE INDEX IF NOT EXISTS x ON x(x);
DROP TABLE x;
DROP INDEX x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (3), (4), (5);
SELECT * FROM x;
INSERT INTO x SELECT x + 3 FROM x;
SELECT * FROM x;
CREATE TABLE x AS SELECT x, x + 2 AS x FROM x;
SELECT * FROM x ORDER BY x;
SELECT x FROM x ORDER BY x;
SELECT x FROM x ORDER BY x;
SELECT FROM_JSON('data/json/array_of_empty_arrays.json');
CREATE TABLE IF NOT EXISTS x (x INT, x INT);
CREATE TABLE IF NOT EXISTS x (x INT, x INT);
CREATE TABLE IF NOT EXISTS x AS SELECT 42;
CREATE TABLE IF NOT EXISTS x AS SELECT 42;
CREATE VIEW IF NOT EXISTS x AS SELECT 42;
DROP VIEW IF EXISTS x;
DROP TABLE IF EXISTS x;
DROP TABLE IF EXISTS x;
CREATE TABLE x (x INT, PRIMARY KEY (x));
CREATE TABLE x (x INT, PRIMARY KEY (x, x));
CREATE TABLE x (x INT, PRIMARY KEY (x, x));
CREATE TABLE x (x INT, PRIMARY KEY (x, x));
ATTACH ':memory:' AS x;
ATTACH ':memory:' AS x;
CREATE TABLE x.x (x INT, x INT);
INSERT INTO x.x VALUES (1, 2), (3, 4);
USE x;
SELECT CURRENT_SETTING('search_path');
USE x;
DETACH db1;
SELECT * FROM x.x;
SELECT * FROM x.x.x;
CREATE TABLE x.x AS SELECT 42;
SELECT * FROM x.x;
USE x;
SELECT CURRENT_SETTING('search_path');
CREATE TABLE x ("x" INT);
INSERT INTO x VALUES (33);
SELECT "x" FROM x;
CREATE TABLE x ("x" TEXT);
INSERT INTO x ("x") VALUES ('quote_escaped_quote_''');
SELECT "x"."x", "x" FROM x;
SET x = TRUE;
CREATE SCHEMA x.x;
CREATE OR REPLACE SCHEMA x.x;
CREATE TABLE x.x (x INT);
CREATE OR REPLACE SCHEMA x.x;
BEGIN;
DROP TABLE x.x;
DROP SCHEMA x.x;
COMMIT;
CREATE SCHEMA x.x;
CREATE TABLE x.x (x INT);
INSERT INTO x.x VALUES (2), (3), (4);
BEGIN;
BEGIN;
DROP TABLE x.x;
DROP SCHEMA x.x;
COMMIT;
SELECT * FROM x.x;
ROLLBACK;
SELECT * FROM x.x;
BEGIN;
BEGIN;
CREATE SCHEMA x.x;
CREATE SCHEMA x.x;
COMMIT;
ROLLBACK;
BEGIN;
BEGIN;
DROP SCHEMA x.x;
DROP SCHEMA x.x;
ROLLBACK;
ROLLBACK;
CREATE SCHEMA x.x;
CREATE SCHEMA x.x;
SET SESSION x = 'test';
CREATE TABLE x.x (x INT);
CREATE TABLE x (x INT);
CREATE TABLE x.x (x INT);
SELECT * FROM x.x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x.x;
SELECT * FROM x.x;
SELECT * FROM x.x;
INSERT INTO x.x (x) VALUES (1);
INSERT INTO x (x) VALUES (1);
INSERT INTO x.x (x) VALUES (2), (3);
INSERT INTO x (x) VALUES (4);
INSERT INTO x.x (x) VALUES (5), (6);
INSERT INTO x (x) VALUES (7);
INSERT INTO x.x (x) VALUES (8), (9);
DELETE FROM x.x WHERE x = 3;
DELETE FROM x.x WHERE x = 5;
DELETE FROM x WHERE x = 8;
DELETE FROM x.x WHERE x = 1;
DELETE FROM x WHERE x = 2;
DELETE FROM x.x WHERE x = 4;
DELETE FROM x WHERE x = 5;
DELETE FROM x.x WHERE x = 8;
SELECT x FROM x;
SELECT x FROM x.x;
SELECT x FROM x.x;
UPDATE x.x SET x = 10 WHERE x = 1;
UPDATE x SET x = 30 WHERE x = 3;
UPDATE x.x SET x = 300 WHERE x = 30;
UPDATE x SET x = 60 WHERE x = 6;
UPDATE x.x SET x = 600 WHERE x = 60;
SELECT x FROM x;
SELECT x FROM x;
CREATE TEMPORARY TABLE x (x INT);
SELECT * FROM x.x.x;
SELECT * FROM x.x;
SELECT * FROM x;
SELECT * FROM x.x;
SELECT ABS(x) FROM x;
SELECT SUM(x) FROM x;
CREATE VIEW x AS SELECT * FROM x;
CREATE VIEW x.x AS SELECT * FROM x.x;
CREATE VIEW x.x AS SELECT * FROM x.x;
SELECT * FROM x.x;
SELECT * FROM x.x;
SELECT * FROM x;
SELECT * FROM x.x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x.x;
SET SESSION x = 'main';
CREATE VIEW x AS SELECT * FROM x;
SET SESSION x = 'test';
DROP VIEW x.x;
DROP VIEW x;
DROP VIEW x;
DROP VIEW x;
DROP VIEW x.x;
SELECT x.test_macro(1, 2);
SELECT OOP_MACRO(1, 2);
SELECT MAIN_MACRO(1, 2);
SELECT x.main_macro(1, 2);
SELECT x.test_macro(1, 2);
SELECT TEST_MACRO(1, 2);
SELECT x.oop_macro(1, 2);
CREATE SEQUENCE x;
CREATE SEQUENCE x;
CREATE SEQUENCE x.x;
CREATE SEQUENCE x.x;
SELECT x.nextval('main.test_sequence');
SELECT x.nextval('test.test_sequence');
SELECT x.nextval('test_sequence');
SELECT x.nextval('main.main_sequence');
SELECT x.nextval('main_sequence');
SELECT x.nextval('oop_sequence');
SELECT x.nextval('out_of_path.oop_sequence');
DROP SEQUENCE x.x;
DROP SEQUENCE x;
DROP SEQUENCE x.x;
DROP SEQUENCE x;
DROP SEQUENCE x;
DROP SEQUENCE x.x;
ALTER TABLE x.x ADD COLUMN x INT;
ALTER TABLE x.x ADD COLUMN x INT;
ALTER TABLE x ADD COLUMN x INT;
ALTER TABLE x ADD COLUMN x INT;
ALTER TABLE x.x ADD COLUMN x INT;
ALTER TABLE x ADD COLUMN x INT;
ALTER TABLE x.x ADD COLUMN x INT;
DROP TABLE x.x;
DROP TABLE x.x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x.x;
CREATE TABLE x (x INT);
DROP TABLE x.x;
CREATE TABLE x (x INT);
DROP TABLE IF EXISTS x;
DROP TABLE IF EXISTS x;
CREATE TABLE x (x INT);
DROP TABLE IF EXISTS x.x;
DROP TABLE IF EXISTS x.x;
CREATE TABLE x.x (x INT);
DROP TABLE IF EXISTS x.x;
CREATE TABLE x (x INT);
CREATE SCHEMA x.x;
CREATE TABLE x.x (x INT);
CREATE SCHEMA x.x;
CREATE TABLE x.x (x INT);
CREATE SCHEMA x.x;
CREATE SCHEMA x.x;
CREATE SCHEMA x.x;
CREATE TABLE x.x (x INT);
SELECT CURRENT_SETTING('search_path');
SELECT CURRENT_SETTING('schema');
SET x = 'test';
SET x = 'test,test2';
SET x = '"test","test2"';
SET x = '"test","test2"';
SET x = 'does_not_exist';
SET x = 'test';
SET x = 'test,test2';
SET x = 'does_not_exist';
SET x = 'test,test2';
SET x = '"invalid quoted string list';
SELECT x.CURRENT_SETTING('search_path');
SELECT x.CURRENT_SCHEMAS(FALSE);
SELECT x.CURRENT_SCHEMAS(FALSE);
SET x = 'test';
SELECT x.CURRENT_SETTING('search_path');
SELECT x.CURRENT_SCHEMA();
SELECT x.CURRENT_SCHEMA();
SELECT CURRENT_SCHEMA();
SELECT CURRENT_SCHEMAS(TRUE);
SELECT CURRENT_SCHEMAS(FALSE);
SET x = 'test2';
SELECT CURRENT_SETTING('search_path');
SET x = 'test3';
SELECT CURRENT_SETTING('search_path');
SET x = 'test,test2';
SELECT x FROM x;
SELECT x FROM x;
SELECT x FROM x;
CREATE TABLE x.x (x INT);
CREATE TABLE x.x (x INT);
CREATE TABLE x.x (x INT);
SELECT x FROM x;
SELECT x FROM x;
SELECT x FROM x;
SET x = 'test,test2,test3,test4,test5';
SELECT x FROM x;
SELECT x FROM x;
SELECT x FROM x;
SELECT x FROM x;
SET x = 'test,test,test2';
SELECT x FROM x;
SELECT x FROM x;
SELECT x FROM x;
SET x = 'test';
SET x = 'test2';
SELECT x FROM x;
SELECT x FROM x;
SELECT x FROM x;
SELECT x FROM x;
SET x = pg_catalog;
SELECT CURRENT_DATABASE();
SELECT CURRENT_CATALOG();
SELECT CURRENT_SCHEMA();
SELECT CURRENT_SCHEMAS(TRUE);
SELECT CURRENT_QUERY();
DROP SCHEMA x.x CASCADE;
CREATE SCHEMA x.x;
DROP SCHEMA x.x;
CREATE SCHEMA x.x;
CREATE SCHEMA x.x;
CREATE SCHEMA IF NOT EXISTS x.x;
CREATE TABLE x.x (x INT);
CREATE TABLE x.x (x INT);
INSERT INTO x.x VALUES (2), (3), (4);
SELECT * FROM x;
SELECT * FROM x.x;
DROP SCHEMA x.x;
DROP SCHEMA x.x CASCADE;
DROP SCHEMA IF EXISTS x;
DROP SCHEMA x.x;
CREATE TEMPORARY TABLE x (x INT);
CREATE TEMPORARY TABLE x (x INT);
CREATE TEMPORARY TABLE x.x (x INT);
CREATE TEMPORARY TABLE x AS SELECT 42;
SELECT * FROM x.x;
SELECT * FROM x;
CREATE TABLE x.x (x INT);
CREATE SCHEMA x.x;
CREATE TABLE x.x (x INT);
CREATE TABLE x.x.x (x INT);
DROP SCHEMA x.x CASCADE;
DROP TABLE x.x.x;
DROP TABLE x;
CREATE TEMPORARY TABLE x.x (x INT);
DROP TABLE x.x;
CREATE TEMPORARY TABLE x (x INT);
CREATE TEMPORARY TABLE x (x INT);
INSERT INTO x VALUES (42);
SELECT x FROM x;
BEGIN;
CREATE TEMPORARY TABLE x (x INT);
CREATE TEMPORARY SEQUENCE x;
CREATE TEMPORARY VIEW x AS SELECT 42;
INSERT INTO x VALUES (42);
SELECT x FROM x;
SELECT NEXTVAL('seq');
SELECT * FROM x;
COMMIT;
SELECT x FROM x;
SELECT NEXTVAL('seq');
SELECT * FROM x;
BEGIN;
CREATE TEMPORARY TABLE x (x INT);
INSERT INTO x VALUES (42);
SELECT x FROM x;
ROLLBACK;
SELECT x FROM x;
INSERT INTO x VALUES (42);
CREATE TABLE x (x INT PRIMARY KEY, x TEXT, x DATE);
CREATE TABLE x (x INT PRIMARY KEY, x TEXT);
CREATE TABLE x (x INT PRIMARY KEY, x TEXT, x TEXT, x INT);
CREATE TABLE x (x INT, x INT, x TEXT);
INSERT INTO x VALUES (1, 'Jeff', '2019-01-01'), (2, 'Annie', '2019-01-01');
INSERT INTO x VALUES (1, 'Herman Melville'), (2, 'Lewis Carroll');
INSERT INTO x VALUES (1, 'Alice in Wonderland', '🔮', 2), (2, 'Moby Dick', '📖', 1), (3, 'Through the Looking-Glass', '🔮', 2);
INSERT INTO x VALUES (1, 1, '😍'), (1, 2, '🤢'), (2, 2, '🙂');
SELECT x.x AS x, x.x AS x FROM x JOIN x ON x.x = x.x JOIN x ON x.x = x.x ORDER BY x, x;
SELECT x.x, x.x FROM x JOIN x ON x.x = x.x JOIN x ON x.x = x.x WHERE x.x = 'Moby Dick' ORDER BY x.x;
SELECT x, x FROM x WHERE x = '👤' ORDER BY x;
PRAGMA x;
CREATE TABLE x (x TEXT PRIMARY KEY);
CREATE TABLE x (x TEXT, FOREIGN KEY (x) REFERENCES x (x));
INSERT INTO x VALUES ('abc');
INSERT INTO x VALUES ('abc');
ALTER TABLE x ADD COLUMN x INT DEFAULT 5;
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
CREATE TABLE x (x TEXT DEFAULT 'abc');
INSERT INTO x VALUES (DEFAULT);
SELECT * FROM x;
ALTER TABLE x ADD COLUMN x INT DEFAULT 5;
SELECT * FROM x;
PRAGMA x;
CREATE TABLE x (x TEXT DEFAULT 'abc');
INSERT INTO x VALUES (DEFAULT);
CREATE VIEW x AS SELECT * FROM x;
SELECT * FROM x;
ALTER TABLE x ADD COLUMN x INT DEFAULT 5;
SELECT * FROM x;
PRAGMA x;
CREATE TABLE x (x TEXT, x INT);
CREATE INDEX x ON x(x);
PRAGMA x;
CREATE TABLE x (x TEXT, x INT);
CREATE INDEX x ON x(x);
ALTER TABLE x DROP COLUMN x;
PRAGMA x;
CREATE TABLE x (x TEXT);
CREATE INDEX x ON x(x);
PRAGMA x;
CREATE TABLE x (x TEXT);
CREATE VIEW x AS SELECT * FROM x;
ALTER VIEW x RENAME TO x;
SELECT * FROM x;
PRAGMA x;
CREATE TABLE x (x TEXT, x INT);
CREATE INDEX x ON x(x);
ALTER TABLE x ALTER COLUMN x SET DEFAULT 'test';
CREATE SEQUENCE x;
CREATE TABLE x (x INT);
DROP TABLE x;
SELECT NEXTVAL('sequence1');
CREATE SEQUENCE x.x;
CREATE TABLE x.x (x INT);
DROP TABLE x.x;
SELECT NEXTVAL('main.sequence1');
CREATE SEQUENCE x;
CREATE TABLE x (x INT);
DROP SEQUENCE x CASCADE;
SELECT * FROM x;
CREATE SEQUENCE x;
CREATE TABLE x (x INT);
DROP SEQUENCE x;
DROP TABLE x;
CREATE SEQUENCE x;
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
DROP TABLE x;
DROP TABLE x;
CREATE SEQUENCE x;
CREATE TABLE x (x INT);
DROP TABLE x;
CREATE SEQUENCE x;
CREATE SEQUENCE x;
CREATE SEQUENCE x;
CREATE TABLE x (x INT);
DROP TABLE x;
SELECT NEXTVAL('sequence1');
SELECT NEXTVAL('sequence2');
SELECT NEXTVAL('sequence3');
CREATE SEQUENCE x;
CREATE SEQUENCE x;
CREATE TABLE x (x INT DEFAULT NEXTVAL('sequence1'), x INT DEFAULT NEXTVAL('sequence2'), x INT, x REAL, x TEXT);
INSERT INTO x VALUES (DEFAULT, DEFAULT, 10, 2.0, 'aaaa');
INSERT INTO x VALUES (DEFAULT, DEFAULT, 20, 3.0, 'bbbb');
SELECT x, x, x, x, x FROM x;
DROP TABLE x;
DROP SEQUENCE x;
CREATE SEQUENCE x;
CREATE TABLE x (x INT);
ALTER TABLE x RENAME TO x;
CREATE TABLE x (x INT);
DROP SEQUENCE x;
CREATE OR REPLACE SEQUENCE x;
DROP TABLE x;
DROP TABLE x;
CREATE SEQUENCE x;
CREATE TABLE x (x INT);
ALTER TABLE x ADD COLUMN x INT DEFAULT NEXTVAL('sequence1');
DROP SEQUENCE x;
DROP TABLE x;
CREATE SEQUENCE x;
CREATE TABLE x (x INT, x INT DEFAULT NEXTVAL('sequence1'));
ALTER TABLE x DROP colname2;
DROP SEQUENCE x;
DROP TABLE x;
CREATE SEQUENCE x;
CREATE TABLE x (x INT DEFAULT NEXTVAL('sequence1'));
ALTER TABLE x ALTER COLUMN x SET DATA TYPE REAL;
DROP SEQUENCE x;
DROP TABLE x;
CREATE SEQUENCE x;
CREATE TABLE x (x INT DEFAULT NEXTVAL('sequence1'), x INT DEFAULT NEXTVAL('sequence1'), x INT DEFAULT NEXTVAL('sequence1'), x INT DEFAULT NEXTVAL('sequence1'));
ALTER TABLE x DROP colname4;
DROP SEQUENCE x;
ALTER TABLE x DROP colname3;
DROP SEQUENCE x;
ALTER TABLE x DROP colname2;
DROP SEQUENCE x;
DROP TABLE x;
CREATE SEQUENCE x;
CREATE TABLE x (x INT DEFAULT NEXTVAL('sequence1'));
BEGIN;
DROP TABLE x;
SELECT NEXTVAL('sequence1');
ROLLBACK;
SELECT NEXTVAL('sequence1');
DROP SEQUENCE x;
DROP TABLE x;
CREATE SEQUENCE x;
CREATE VIEW x (x) AS SELECT 42;
DROP SEQUENCE x;
DROP VIEW x;
SELECT NEXTVAL('sequence1');
CREATE SEQUENCE x;
CREATE SEQUENCE x;
DROP SEQUENCE x;
DROP SEQUENCE x;
SELECT NEXTVAL('sequence1');
CREATE SEQUENCE x;
CREATE SEQUENCE x;
DROP SEQUENCE x;
CREATE SEQUENCE x;
CREATE SEQUENCE x;
CREATE SEQUENCE x;
CREATE SEQUENCE x;
DROP SEQUENCE x;
DROP SEQUENCE x;
SELECT NEXTVAL('sequence1');
SELECT NEXTVAL('sequence2');
SELECT NEXTVAL('sequence3');
SELECT NEXTVAL('sequence4');
PRAGMA x;
CREATE SEQUENCE x;
CREATE SEQUENCE x;
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
CREATE SEQUENCE x;
DROP TABLE x;
SELECT NEXTVAL('sequence1');
CREATE SEQUENCE x;
CREATE SEQUENCE x;
CREATE TABLE x (x INT DEFAULT NEXTVAL('other_seq'));
ALTER TABLE x RENAME TO x;
DROP SEQUENCE x;
DROP SEQUENCE x;
DROP TABLE x;
DROP SEQUENCE x;
CREATE TABLE x AS (SELECT 42);
CREATE SEQUENCE x;
CREATE SEQUENCE x;
ALTER TABLE x RENAME TO x;
ALTER TABLE x RENAME TO x;
CREATE SEQUENCE x;
CREATE TABLE x (x INT DEFAULT NEXTVAL('seq'), x INT);
INSERT INTO x (x) VALUES (1), (1), (1), (1), (1);
SELECT SUM(x) FROM x;
DROP SEQUENCE x;
DROP SEQUENCE x CASCADE;
SELECT * FROM x;
CREATE SEQUENCE x;
CREATE SEQUENCE x;
CREATE SEQUENCE x;
CREATE TABLE x (x INT DEFAULT NEXTVAL('seq' || CAST(NEXTVAL('seq') AS TEXT)), x INT);
CREATE TABLE x (x INT DEFAULT NEXTVAL('seq1') + NEXTVAL('seq2'), x INT);
INSERT INTO x (x) VALUES (1);
DROP SEQUENCE x;
DROP SEQUENCE x;
DROP SEQUENCE x CASCADE;
SELECT * FROM x;
CREATE TABLE x (x INT);
DROP TABLE x CASCADE;
CREATE SEQUENCE x;
DROP SEQUENCE x CASCADE;
SET x = TRUE;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3), (4), (5);
BEGIN;
DROP TABLE x CASCADE;
DROP TABLE x CASCADE;
ROLLBACK;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3), (4), (5);
BEGIN;
DROP TABLE x;
COMMIT;
CREATE SCHEMA x.x;
CREATE TABLE x.x (x INT);
SELECT * FROM x.x;
DROP SCHEMA x.x;
SELECT * FROM x.x;
DROP SCHEMA x.x CASCADE;
SELECT * FROM x.x;
CREATE SCHEMA x.x;
CREATE TABLE x.x (x INT);
BEGIN;
BEGIN;
DROP TABLE x.x;
DROP SCHEMA x.x;
ROLLBACK;
ROLLBACK;
SELECT * FROM x.x;
BEGIN;
BEGIN;
DROP SCHEMA x.x CASCADE;
SELECT * FROM x.x;
COMMIT;
SELECT * FROM x.x;
ROLLBACK;
CREATE TABLE x.x (x INT);
CREATE TABLE x (x INT);
INSERT INTO x VALUES (5);
BEGIN;
ALTER TABLE x RENAME TO x;
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('test');
COMMIT;
SELECT * FROM x;
SELECT * FROM x;
ATTACH ':memory:' AS x;
BEGIN;
CREATE TABLE x AS SELECT UNNEST([42, 43]) AS x;
USE x;
SELECT * FROM x;
BEGIN;
USE x;
CREATE TABLE x AS SELECT UNNEST([42, 43]) AS x;
SELECT * FROM x.x;
PRAGMA x;
PRAGMA x;
CREATE TABLE x AS SELECT * FROM x AS x;
SELECT MIN_FROM_TBL(x, x);
SELECT MIN_FROM_TBL(x, x);
SELECT MIN_FROM_TBL(x, x);
SELECT MIN_FROM_TBL(x, x) FROM (VALUES ('integers')) AS x;
PRAGMA x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
CREATE TABLE x (x INT, x INT, x INT);
SELECT * FROM x;
INSERT INTO x VALUES (1, 2, 3), (4, 5, 6), (7, 8, 9);
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT QUERY(SELECT 1);
SELECT * FROM x;
CREATE TABLE x AS SELECT 42;
CREATE TABLE x AS SELECT 'duckdb';
CREATE TABLE x AS SELECT '1?ch@racter$';
CREATE TABLE x AS SELECT '';
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
CREATE TABLE x (x INT, x INT, x INT);
INSERT INTO x VALUES (9, 8, 7), (6, 5, 4), (3, 2, 1);
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (100);
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT x.* FROM x AS x;
SELECT x.x FROM x AS x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
SELECT MY_EXTRACT({'x': {'x': 42}});
SELECT MY_SUBQUERY_EXTRACT({'x': {'x': 42}});
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1);
SELECT CTE_SQ(3, 4);
SELECT NESTED_CTE(2, '2,2,2,2');
SELECT IFELSE(1, IFELSE(1, 'a', 'b'), 'c');
SELECT IFELSE(1, IFELSE(0, 'a', 'b'), 'c');
SELECT IFELSE(0, IFELSE(1, 'a', 'b'), 'c');
SELECT IFELSE(1, IFELSE(1, x, 'b'), 'c') FROM x;
SELECT IFELSE(1, IFELSE(1, x, 1), x) FROM x;
SELECT F1(42) FROM x;
SELECT MOD_TWO(x), SUM(x) FROM x GROUP BY MOD_TWO(x);
SELECT DOUBLE_ADD(1, 2, 3);
SELECT TRIPLE_ADD1(1, 2, 3, 4);
SELECT TRIPLE_ADD2(1, 2, 3, 4);
INSERT INTO x VALUES (41);
SELECT ADD((SELECT MIN(x) FROM x), (SELECT MAX(x) FROM x));
SELECT (SELECT MAX(ADD(x.x, x)) FROM x) FROM x AS x;
CREATE TABLE x (x TEXT, x TEXT);
INSERT INTO x VALUES ('doc1', ' QUÁCK+QUÁCK+QUÁCK'), ('doc2', ' BÁRK+BÁRK+BÁRK+BÁRK'), ('doc3', ' MÉOW+MÉOW+MÉOW+MÉOW+MÉOW');
CREATE SCHEMA x.x;
CREATE TABLE x.x AS (SELECT ROW_NUMBER() OVER () AS x, x AS x FROM x.x);
CREATE TABLE x.x AS (SELECT x, x, ROW_NUMBER() OVER (PARTITION BY x) AS x FROM (SELECT UNNEST(STR_SPLIT_REGEX(REGEXP_REPLACE(LOWER(STRIP_ACCENTS(x)), '[^a-z]', ' ', 'g'), '\s+')) AS x, ROW_NUMBER() OVER () AS x FROM x.x) AS x WHERE x <> '');
ALTER TABLE x.x ADD COLUMN x INT;
UPDATE x.x AS x SET x = (SELECT COUNT(x) FROM x.x AS x WHERE x.x = x.x);
CREATE TABLE x.x AS WITH x AS (SELECT DISTINCT x, x FROM x.x ORDER BY x) SELECT ROW_NUMBER() OVER () AS x, x FROM x;
ALTER TABLE x.x ADD COLUMN x INT;
UPDATE x.x AS x SET x = (SELECT x FROM x.x AS x WHERE x.x = x.x);
ALTER TABLE x.x DROP term;
ALTER TABLE x.x ADD COLUMN x INT;
UPDATE x.x AS x SET x = (SELECT COUNT(DISTINCT x) FROM x.x AS x WHERE x.x = x.x GROUP BY x);
WITH x AS (SELECT UNNEST(STR_SPLIT_REGEX(REGEXP_REPLACE(LOWER(STRIP_ACCENTS('QUÁCK BÁRK')), '[^a-z]', ' ', 'g'), '\s+')) AS x), x AS (SELECT x FROM x.x AS x JOIN x USING (x)), x AS (SELECT x, x FROM x.x AS x WHERE x IN (SELECT x.x FROM x)), x AS (SELECT x.x, x, x.x, x, x, (LOG((3 - x + 0.5) / (x + 0.5)) * ((x * (1.2 + 1) / (x + 1.2 * (1 - 0.75 + 0.75 * (x / 4)))))) AS x FROM (SELECT x, x, COUNT(*) AS x FROM x GROUP BY x, x) AS x JOIN (SELECT DISTINCT x FROM x) AS x ON x.x = x.x JOIN x.x AS x ON x.x = x.x JOIN x.x AS x ON x.x = x.x) SELECT x, x FROM (SELECT x, SUM(x) AS x FROM x GROUP BY x) AS x JOIN x.x AS x ON x.x = x.x ORDER BY x DESC LIMIT 1000;
SELECT * FROM x WHERE FTS_MATCH(x, 'QUÁCK BÁRK');
WITH x AS (SELECT x % 3 AS x, x AS x FROM x) SELECT DISTINCT x, MYWINDOW(x, x) FROM x ORDER BY x;
SELECT MY_SECOND_MACRO();
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1);
SELECT PARAMETERIZED_CTE(42);
SELECT IN_WITH_CTE(1);
SELECT IN_WITH_CTE(2);
SELECT PLUS42(42);
SELECT PLUS42(x) FROM x;
SELECT PLUS42(3) + x FROM x;
SELECT PLUS42(42) + x FROM x;
SELECT PLUS1(3);
SELECT PLUS42(x) + PLUS1(x) FROM x;
SELECT DEEP_CTE(42);
SET x = 'v0.10.2';
PRAGMA x;
SELECT F();
SELECT F(x := 41);
SELECT F(x := (SELECT 41));
SELECT F(x := (SELECT 1 AS x));
SELECT F(x := x) FROM (SELECT 41) AS x;
CREATE TABLE x AS SELECT 41 AS x;
SELECT F(x := x) FROM x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (5), (10), (13);
SELECT MY_MACRO2(x);
DROP TABLE x;
SELECT MY_MACRO2(5);
CREATE TABLE x (x INT, x INT);
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (1, 2), (2, 2), (3, 4);
INSERT INTO x VALUES (4, 1), (2, 10), (6, 2), (2, 6);
SELECT * FROM x AS x INNER JOIN (SELECT * FROM x) AS x ON (EQ(x := x.x, x := x.x));
SELECT * FROM x AS x INNER JOIN (SELECT * FROM x) AS x ON (EQ(x := x.x, x := x.x));
PRAGMA x;
SELECT F();
SELECT F(x := 42);
CREATE TABLE x AS SELECT 42 AS x;
SELECT F(x := x) FROM x;
SELECT F(x := x) FROM x;
SELECT F(x := CAST('42' AS INT));
SELECT F(x := 42 IS NULL);
ATTACH '__TEST_DIR__/macro_default_arg.db' (STORAGE_VERSION 'v1.0.0');
USE x;
SET x = TRUE;
PRAGMA x;
SELECT F();
SELECT F(x := 41);
SELECT F(x := (SELECT 41));
SELECT F(x := (SELECT 1 AS x));
SELECT F(x := x) FROM (SELECT 41) AS x;
CREATE TABLE x AS SELECT 41 AS x;
SELECT F(x := x) FROM x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (5), (10), (13);
SELECT MY_MACRO2(x);
DROP TABLE x;
DROP TABLE x CASCADE;
SELECT MY_MACRO2(5);
CREATE TABLE x (x INT, x INT);
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (1, 2), (2, 2), (3, 4);
INSERT INTO x VALUES (4, 1), (2, 10), (6, 2), (2, 6);
SELECT * FROM x AS x INNER JOIN (SELECT * FROM x) AS x ON (EQ(x := x.x, x := x.x));
SELECT * FROM x AS x INNER JOIN (SELECT * FROM x) AS x ON (EQ(x := x.x, x := x.x));
SELECT MY_MACRO();
SELECT MY_MACRO();
SELECT MY_MACRO();
SELECT MY_MACRO();
PRAGMA x;
SELECT MULTI_ADD(), MULTI_ADD(42), MULTI_ADD(42, 1), MULTI_ADD(42, 1, 1), MULTI_ADD(42, 1, 1, 1), MULTI_ADD(42, 1, 1, 1, 1);
SELECT MULTI_ADD(1, 1, 1, 1, 1, 1, 1, 1, 1, 1);
SELECT ARITHMETIC(42, 84), ARITHMETIC(42, 84, x := 10), ARITHMETIC(100, 200, 300), ARITHMETIC(100, 200, 300, x := 10);
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT x, x FROM x WHERE x IN ('arithmetic', 'multi_add', 'generate_numbers') ORDER BY x, LENGTH(x);
PRAGMA x;
PRAGMA x = '1TB';
SELECT TEST(4, 2);
SELECT TEST(4, 2);
SELECT TEST(4, 2);
SELECT TEST(4, 2);
SELECT TEST(4, 2);
SELECT TEST(4, 2);
SELECT TEST(4, 2);
SET x = TRUE;
SELECT SUM(1);
SELECT SUM(1) WHERE 42 = 0;
SELECT SUM(1);
SELECT SUM(1) WHERE 42 = 0;
SELECT SUM(1);
SELECT SUM(1) WHERE 42 = 0;
SELECT SUM(1);
SELECT SUM(1) WHERE 42 = 0;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (42), (42);
CREATE SEQUENCE x;
SELECT IN_NEXT_N(3, 'seq', 5);
SELECT IN_NEXT_N(3, 'seq', 5);
SELECT IN_NEXT_N(12, 'seq', 5);
SELECT IN_NEXT_N2(17, 'seq', 5);
DROP SEQUENCE x;
CREATE SEQUENCE x;
CREATE SEQUENCE x;
SELECT TEST('seq1', 'seq2', x) FROM x;
DROP SEQUENCE x;
DROP SEQUENCE x;
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1);
SELECT ONE();
SELECT ONE(1);
SELECT ONE(NULL);
SELECT HAVING_MACRO(1);
SELECT HAVING_MACRO(6);
SELECT UNION_MACRO(1, 2, 3);
SELECT UNION_MACRO(1, 2, 1);
SELECT UNION_MACRO(1, 1, 2);
SELECT IN_EXPRESSION_LIST(1, 2, 3);
SELECT IN_EXPRESSION_LIST(1, 2, 1);
SELECT IN_EXPRESSION_LIST(1, 1, 2);
CREATE FUNCTION x() AS (SELECT 2);
SELECT TWO();
DROP FUNCTION x;
SELECT ADD_MACRO(x, x) FROM x;
CREATE TABLE x (x REAL);
INSERT INTO x VALUES (0.5);
SELECT ADD_MACRO(x, 2) + ADD_MACRO(3, x) FROM x, x;
SELECT STR_SPLIT(1, 2);
SELECT IFELSE(1, 'true', 'false');
SELECT IFELSE(1, 'true', 'false');
SELECT IFELSE(0, 'true', 'false');
SELECT IFELSE(x = 1, 'true', 'false') FROM x;
SELECT IFELSE(x = 0, 'true', 'false') FROM x;
SELECT IFELSE();
SELECT IFELSE(1);
SELECT IFELSE(1, 2);
SELECT IFELSE(1, 2, 3, 4);
SELECT IFELSE('1', 'random', CAST(RANDOM() AS TEXT));
CREATE SCHEMA x.x;
SELECT x.add_macro(40, 2);
INSERT INTO x VALUES (21), (41);
SELECT MYAVG(x) FROM x;
SELECT WEIRD_AVG(x) FROM x;
SELECT ADD_DEFAULT5(3, 6);
SELECT ADD_DEFAULT5(3);
SELECT ADD_DEFAULT5(3, x := 6);
SELECT ADD_DEFAULT5(x := 6, 3);
SELECT TWO_DEFAULT_PARAMS();
SELECT TWO_DEFAULT_PARAMS(x := 5);
SELECT TWO_DEFAULT_PARAMS(x := 3);
SELECT TWO_DEFAULT_PARAMS(x := 5, x := 3);
SELECT TWO_DEFAULT_PARAMS(x := 5, x := 3);
SELECT MY_MACRO(x := 42);
SELECT MY_MACRO(x := 42, x := 42);
SELECT ZZ1(1), ZZ2(2);
SELECT x, x, x FROM x WHERE x LIKE 'zz%' AND x LIKE '%macro_parameters%';
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1);
SELECT SUBQUERY(1);
SELECT SUBQUERY(NULL);
SELECT SUBQUERY(3) + x FROM x;
SELECT SUBQUERY(x) FROM x;
SELECT A1(3);
SELECT A1(3) + x FROM x;
SELECT A2(3);
PRAGMA x;
CREATE TABLE x (x INT, x TEXT);
CREATE TABLE x (x INT, x TEXT);
CREATE TABLE x (x INT, x TEXT);
INSERT INTO x VALUES (1, 'tom'), (2, 'dick'), (3, 'harry'), (4, 'mary'), (5, 'mungo'), (6, 'midge');
INSERT INTO x VALUES (20, 'andrew'), (21, 'boris'), (22, 'Caleb'), (23, 'david'), (24, 'evan');
INSERT INTO x VALUES (1, 'alpha'), (2, 'beta'), (3, 'gamma'), (4, 'delta'), (5, 'epsilon'), (6, 'zeta'), (7, 'eta'), (8, 'theta'), (9, 'iota'), (10, 'kappa');
(SELECT * FROM x UNION SELECT * FROM x) INTERSECT SELECT * FROM x;
(SELECT * FROM x EXCEPT SELECT * FROM x) INTERSECT SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x WHERE x >= (SELECT MAX(x) FROM x);
SELECT * FROM x WHERE x <= (SELECT MIN(x) FROM x);
SELECT x, x, x, x, x, x, x, x, x FROM x WHERE x = 'table_macro' AND (x = 'sgreek' OR x = 'xt') ORDER BY x;
CREATE TABLE x (x INT, x TEXT, x TEXT);
INSERT INTO x VALUES (1, 'ace', 'clubs'), (11, 'jack', 'clubs'), (12, 'queen', 'clubs'), (13, 'king', 'clubs');
INSERT INTO x VALUES (1, 'ace', 'diamonds'), (11, 'jack', 'diamonds'), (12, 'queen', 'diamonds'), (13, 'king', 'diamonds');
INSERT INTO x VALUES (1, 'ace', 'hearts'), (11, 'jack', 'hearts'), (12, 'queen', 'hearts'), (13, 'king', 'hearts');
INSERT INTO x VALUES (1, 'ace', 'spades'), (11, 'jack', 'spades'), (12, 'queen', 'spades'), (13, 'king', 'spades');
SELECT DISTINCT x FROM x;
SELECT * FROM x;
SELECT * FROM x ORDER BY x;
SELECT COUNT(x) FROM x GROUP BY ALL;
SELECT * FROM x;
SELECT * FROM x;
SELECT x FROM x ORDER BY x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT SUM(x) FROM x;
SELECT MAX(x) FROM x;
SELECT * FROM x;
SELECT * FROM x;
SET x = 'nulls_first';
CREATE TABLE x (x /* define columns (name / type / default value / nullable) */ DECIMAL(18, 3), x TEXT, x TEXT, x DECIMAL(18, 3) CHECK (x BETWEEN 1970 AND 2020), x DECIMAL(18, 3) CHECK (x >= 0), CONSTRAINT x PRIMARY KEY (x));
INSERT INTO x VALUES (1, 'VW', 'Golf', 2005, 5), (2, 'VW', 'Golf', 2006, 2), (3, 'VW', 'Golf', 2007, 3), (4, 'VW', 'Golf', 2008, 3), (5, 'VW', 'Passat', 2005, 5), (6, 'VW', 'Passat', 2006, 1), (7, 'VW', 'Beetle', 2005, 1), (8, 'VW', 'Beetle', 2006, 2), (9, 'VW', 'Beetle', 2008, 4), (10, 'Toyota', 'Corolla', 2005, 4), (11, 'Toyota', 'Corolla', 2006, 3), (12, 'Toyota', 'Corolla', 2007, 2), (13, 'Toyota', 'Corolla', 2008, 4), (14, 'Toyota', 'Prius', 2005, 1), (15, 'Toyota', 'Prius', 2006, 1), (16, 'Toyota', 'Hilux', 2005, 1), (17, 'Toyota', 'Hilux', 2006, 1), (18, 'Toyota', 'Hilux', 2008, 1);
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
SELECT MY_AGG(x) FROM x;
SELECT MY_AGG(x) OVER () FROM x;
SELECT MY_FUNC(x) FROM x;
SELECT MY_FUNC(x) OVER () FROM x;
SELECT MY_CASE(x) FROM x;
SELECT MY_CASE(x) OVER () FROM x;
CREATE SEQUENCE x;
SELECT NEXTVAL('minseq') FROM x;
CREATE SEQUENCE x;
SELECT NEXTVAL('xx');
SELECT NEXTVAL('xx');
CREATE SEQUENCE x;
SELECT NEXTVAL('seq1') FROM x;
CREATE SEQUENCE x;
SELECT NEXTVAL('seq2') FROM x;
CREATE SEQUENCE x;
SELECT NEXTVAL('seq3') FROM x;
CREATE SEQUENCE x;
SELECT NEXTVAL('seq4') FROM x;
CREATE SEQUENCE x;
SELECT NEXTVAL('seq5') FROM x;
CREATE SEQUENCE x;
SELECT NEXTVAL('seq6') FROM x;
CREATE SEQUENCE x;
SELECT NEXTVAL('seq7') FROM x;
CREATE SEQUENCE x;
SELECT NEXTVAL('my_seq');
SELECT x FROM x;
CREATE SEQUENCE x;
CREATE SEQUENCE x;
CREATE SEQUENCE IF NOT EXISTS x;
SELECT NEXTVAL('seq');
CREATE OR REPLACE SEQUENCE x;
SELECT NEXTVAL('seq');
SELECT CURRVAL('seq');
SELECT CURRVAL('seq');
SELECT NEXTVAL('seq');
SELECT CURRVAL('seq');
SELECT CURRVAL('seq');
SELECT NEXTVAL('seq'), NEXTVAL('seq');
SELECT NEXTVAL(NULL);
SELECT CURRVAL(NULL);
SELECT NEXTVAL(x) FROM (VALUES ('seq'), (NULL), ('seq')) AS x;
SELECT CURRVAL(x) FROM (VALUES ('seq'), (NULL), ('seq')) AS x;
CREATE SEQUENCE x;
DROP SEQUENCE x;
DROP SEQUENCE x;
DROP SEQUENCE IF EXISTS x;
CREATE SEQUENCE x;
SELECT NEXTVAL('seq');
SELECT NEXTVAL('"seq"');
SELECT CURRVAL('"seq"');
DROP SEQUENCE x;
CREATE SEQUENCE x;
SELECT NEXTVAL('seq');
SELECT NEXTVAL('seq');
DROP SEQUENCE x;
CREATE SEQUENCE x;
SELECT NEXTVAL('seq');
SELECT NEXTVAL('seq');
SELECT NEXTVAL('seq');
DROP SEQUENCE x;
CREATE SEQUENCE x;
SELECT NEXTVAL('seq');
SELECT NEXTVAL('seq');
SELECT CURRVAL('seq');
SELECT NEXTVAL('seq');
SELECT CURRVAL('seq');
DROP SEQUENCE x;
CREATE SEQUENCE x;
SELECT NEXTVAL('seq');
SELECT CURRVAL('seq');
SELECT NEXTVAL('seq');
SELECT CURRVAL('seq');
SELECT NEXTVAL('seq');
SELECT CURRVAL('seq');
DROP SEQUENCE x;
CREATE SEQUENCE x;
SELECT NEXTVAL('seq');
SELECT NEXTVAL('seq');
SELECT NEXTVAL('seq');
SELECT CURRVAL('seq');
SELECT NEXTVAL('seq');
SELECT CURRVAL('seq');
DROP SEQUENCE x;
CREATE SEQUENCE x;
SELECT NEXTVAL('seq');
SELECT NEXTVAL('seq');
SELECT NEXTVAL('seq');
SELECT NEXTVAL('seq');
DROP SEQUENCE x;
CREATE SEQUENCE x;
SELECT NEXTVAL('seq');
SELECT NEXTVAL('seq');
SELECT NEXTVAL('seq');
DROP SEQUENCE x;
CREATE SEQUENCE x;
SELECT NEXTVAL('seq');
SELECT NEXTVAL('seq');
SELECT NEXTVAL('seq');
DROP SEQUENCE x;
CREATE SEQUENCE x;
SELECT NEXTVAL('seq');
SELECT NEXTVAL('seq');
SELECT NEXTVAL('seq');
DROP SEQUENCE x;
CREATE SEQUENCE x;
CREATE SEQUENCE x;
CREATE SCHEMA x.x;
CREATE SCHEMA x.x;
CREATE SEQUENCE x.x;
CREATE SEQUENCE x.x;
SELECT NEXTVAL('a.seq'), NEXTVAL('b.seq');
SELECT CURRVAL('a.seq'), CURRVAL('b.seq');
SELECT NEXTVAL('"a"."seq"'), NEXTVAL('"b".seq');
SELECT CURRVAL('"a"."seq"'), CURRVAL('"b".seq');
SELECT NEXTVAL('"a"."seq');
SELECT NEXTVAL('a.b.c.d');
CREATE SEQUENCE x;
CREATE SEQUENCE x;
CREATE SEQUENCE x;
CREATE SEQUENCE x;
CREATE SEQUENCE x;
CREATE SEQUENCE x;
SELECT NEXTVAL('s' || 'e' || 'q');
DROP SEQUENCE x;
CREATE SEQUENCE x;
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('seq'), ('seq2');
SELECT x, NEXTVAL('seq') FROM x;
SELECT x, CURRVAL('seq') FROM x;
SELECT x, NEXTVAL(x) FROM x;
SELECT x, CURRVAL(x) FROM x;
INSERT INTO x VALUES ('nonexistant_seq');
SELECT x, NEXTVAL(x) FROM x;
CREATE SEQUENCE x;
SELECT CURRVAL('fresh');
SELECT NEXTVAL(1 + 1);
SELECT CURRVAL(TRUE);
CREATE SEQUENCE x;
CREATE SEQUENCE x;
CREATE SEQUENCE x;
CREATE SEQUENCE x;
CREATE SEQUENCE x;
CREATE TABLE x (x INT DEFAULT NEXTVAL('seq'));
DROP SEQUENCE x;
BEGIN;
DROP TABLE x;
DROP SEQUENCE x;
CREATE TABLE x (x INT);
CREATE TABLE IF NOT EXISTS x AS SELECT x.x FROM x AS x;
CREATE TABLE x AS SELECT x.x FROM x AS x;
CREATE TABLE x (x INT DEFAULT ?);
CREATE TABLE x (x INT CHECK (?));
CREATE TABLE x ("x" INT);
SELECT "x" FROM x;
CREATE TABLE x ("x" INT);
SELECT "x" FROM x;
PRAGMA x;
PRAGMA x = 4;
PRAGMA x;
CREATE TABLE x AS (SELECT GROUP_CONCAT(CAST(x AS TEXT), '🦆 ') AS x, x % 10000 AS x FROM x GROUP BY x);
CREATE TABLE x AS (SELECT UNNEST(STR_SPLIT(x, ' ')) FROM x);
SELECT COUNT(*) FROM x;
CREATE TABLE x AS (SELECT * FROM x ORDER BY x);
SELECT COUNT(*) FROM x;
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x (x) VALUES (3);
INSERT INTO x VALUES (DEFAULT, DEFAULT);
SELECT * FROM x;
DROP TABLE x;
CREATE TABLE x (x INT NOT NULL, x INT);
INSERT INTO x (x) VALUES (3);
DROP TABLE x;
CREATE TABLE x (x INT DEFAULT 1, x INT);
INSERT INTO x (x) VALUES (3);
SELECT * FROM x;
DROP TABLE x;
CREATE TABLE x (x INT DEFAULT 1 + 1, x INT);
INSERT INTO x (x) VALUES (3);
SELECT * FROM x;
DROP TABLE x;
CREATE TABLE x (x INT DEFAULT 1 + 1, x INT);
INSERT INTO x (x) SELECT 3;
SELECT * FROM x;
DROP TABLE x;
CREATE SEQUENCE x;
CREATE TABLE x (x INT DEFAULT NEXTVAL('seq'), x INT);
INSERT INTO x (x) VALUES (2), (4), (6), (2), (4);
SELECT * FROM x ORDER BY 1;
DROP SEQUENCE x;
DROP TABLE x;
DROP SEQUENCE x;
CREATE SEQUENCE x;
CREATE TABLE x (x INT DEFAULT NEXTVAL('seq'), x INT);
INSERT INTO x (x) VALUES (1);
UPDATE x SET x = "x";
SELECT * FROM x ORDER BY 1;
CREATE TABLE x (x INT DEFAULT (SELECT 42), x INT);
CREATE TABLE x (x INT DEFAULT SUM(42), x INT);
CREATE TABLE x (x INT DEFAULT ROW_NUMBER() OVER (), x INT);
CREATE TABLE x (x INT DEFAULT x + 1, x INT);
DROP TABLE x;
CREATE TABLE x (x DOUBLE DEFAULT RANDOM(), x INT);
INSERT INTO x (x) VALUES (1);
INSERT INTO x (x) VALUES (2);
SELECT COUNT(DISTINCT x) FROM x;
PRAGMA x;
CREATE TABLE x (x INT DEFAULT 1, x INT DEFAULT 2);
CREATE TABLE x (x INT DEFAULT 1, x INT DEFAULT 2);
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
DROP TABLE x;
CREATE TABLE x (x INT PRIMARY KEY DEFAULT 1, x INT DEFAULT 2);
CREATE TABLE x (x INT PRIMARY KEY DEFAULT 1, x INT DEFAULT 2);
CREATE TABLE x (x INT PRIMARY KEY DEFAULT 1, x INT DEFAULT 2);
CREATE TABLE x (x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT);
INSERT INTO x (x, x) VALUES (2, 3), (3, 4), (5, 6);
SELECT x, x, x FROM x;
CREATE TABLE x (x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT);
INSERT INTO x SELECT 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867, 1868, 1869, 1870, 1871, 1872, 1873, 1874, 1875, 1876, 1877, 1878, 1879, 1880, 1881, 1882, 1883, 1884, 1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100, 2101, 2102, 2103, 2104, 2105, 2106, 2107, 2108, 2109, 2110, 2111, 2112, 2113, 2114, 2115, 2116, 2117, 2118, 2119, 2120, 2121, 2122, 2123, 2124, 2125, 2126, 2127, 2128, 2129, 2130, 2131, 2132, 2133, 2134, 2135, 2136, 2137, 2138, 2139, 2140, 2141, 2142, 2143, 2144, 2145, 2146, 2147, 2148, 2149, 2150, 2151, 2152, 2153, 2154, 2155, 2156, 2157, 2158, 2159, 2160, 2161, 2162, 2163, 2164, 2165, 2166, 2167, 2168, 2169, 2170, 2171, 2172, 2173, 2174, 2175, 2176, 2177, 2178, 2179, 2180, 2181, 2182, 2183, 2184, 2185, 2186, 2187, 2188, 2189, 2190, 2191, 2192, 2193, 2194, 2195, 2196, 2197, 2198, 2199, 2200, 2201, 2202, 2203, 2204, 2205, 2206, 2207, 2208, 2209, 2210, 2211, 2212, 2213, 2214, 2215, 2216, 2217, 2218, 2219, 2220, 2221, 2222, 2223, 2224, 2225, 2226, 2227, 2228, 2229, 2230, 2231, 2232, 2233, 2234, 2235, 2236, 2237, 2238, 2239, 2240, 2241, 2242, 2243, 2244, 2245, 2246, 2247, 2248, 2249, 2250, 2251, 2252, 2253, 2254, 2255, 2256, 2257, 2258, 2259, 2260, 2261, 2262, 2263, 2264, 2265, 2266, 2267, 2268, 2269, 2270, 2271, 2272, 2273, 2274, 2275, 2276, 2277, 2278, 2279, 2280, 2281, 2282, 2283, 2284, 2285, 2286, 2287, 2288, 2289, 2290, 2291, 2292, 2293, 2294, 2295, 2296, 2297, 2298, 2299, 2300, 2301, 2302, 2303, 2304, 2305, 2306, 2307, 2308, 2309, 2310, 2311, 2312, 2313, 2314, 2315, 2316, 2317, 2318, 2319, 2320, 2321, 2322, 2323, 2324, 2325, 2326, 2327, 2328, 2329, 2330, 2331, 2332, 2333, 2334, 2335, 2336, 2337, 2338, 2339, 2340, 2341, 2342, 2343, 2344, 2345, 2346, 2347, 2348, 2349, 2350, 2351, 2352, 2353, 2354, 2355, 2356, 2357, 2358, 2359, 2360, 2361, 2362, 2363, 2364, 2365, 2366, 2367, 2368, 2369, 2370, 2371, 2372, 2373, 2374, 2375, 2376, 2377, 2378, 2379, 2380, 2381, 2382, 2383, 2384, 2385, 2386, 2387, 2388, 2389, 2390, 2391, 2392, 2393, 2394, 2395, 2396, 2397, 2398, 2399, 2400, 2401, 2402, 2403, 2404, 2405, 2406, 2407, 2408, 2409, 2410, 2411, 2412, 2413, 2414, 2415, 2416, 2417, 2418, 2419, 2420, 2421, 2422, 2423, 2424, 2425, 2426, 2427, 2428, 2429, 2430, 2431, 2432, 2433, 2434, 2435, 2436, 2437, 2438, 2439, 2440, 2441, 2442, 2443, 2444, 2445, 2446, 2447, 2448, 2449, 2450, 2451, 2452, 2453, 2454, 2455, 2456, 2457, 2458, 2459, 2460, 2461, 2462, 2463, 2464, 2465, 2466, 2467, 2468, 2469, 2470, 2471, 2472, 2473, 2474, 2475, 2476, 2477, 2478, 2479, 2480, 2481, 2482, 2483, 2484, 2485, 2486, 2487, 2488, 2489, 2490, 2491, 2492, 2493, 2494, 2495, 2496, 2497, 2498, 2499, 2500, 2501, 2502, 2503, 2504, 2505, 2506, 2507, 2508, 2509, 2510, 2511, 2512, 2513, 2514, 2515, 2516, 2517, 2518, 2519, 2520, 2521, 2522, 2523, 2524, 2525, 2526, 2527, 2528, 2529, 2530, 2531, 2532, 2533, 2534, 2535, 2536, 2537, 2538, 2539, 2540, 2541, 2542, 2543, 2544, 2545, 2546, 2547, 2548, 2549, 2550, 2551, 2552, 2553, 2554, 2555, 2556, 2557, 2558, 2559, 2560, 2561, 2562, 2563, 2564, 2565, 2566, 2567, 2568, 2569, 2570, 2571, 2572, 2573, 2574, 2575, 2576, 2577, 2578, 2579, 2580, 2581, 2582, 2583, 2584, 2585, 2586, 2587, 2588, 2589, 2590, 2591, 2592, 2593, 2594, 2595, 2596, 2597, 2598, 2599, 2600, 2601, 2602, 2603, 2604, 2605, 2606, 2607, 2608, 2609, 2610, 2611, 2612, 2613, 2614, 2615, 2616, 2617, 2618, 2619, 2620, 2621, 2622, 2623, 2624, 2625, 2626, 2627, 2628, 2629, 2630, 2631, 2632, 2633, 2634, 2635, 2636, 2637, 2638, 2639, 2640, 2641, 2642, 2643, 2644, 2645, 2646, 2647, 2648, 2649, 2650, 2651, 2652, 2653, 2654, 2655, 2656, 2657, 2658, 2659, 2660, 2661, 2662, 2663, 2664, 2665, 2666, 2667, 2668, 2669, 2670, 2671, 2672, 2673, 2674, 2675, 2676, 2677, 2678, 2679, 2680, 2681, 2682, 2683, 2684, 2685, 2686, 2687, 2688, 2689, 2690, 2691, 2692, 2693, 2694, 2695, 2696, 2697, 2698, 2699, 2700, 2701, 2702, 2703, 2704, 2705, 2706, 2707, 2708, 2709, 2710, 2711, 2712, 2713, 2714, 2715, 2716, 2717, 2718, 2719, 2720, 2721, 2722, 2723, 2724, 2725, 2726, 2727, 2728, 2729, 2730, 2731, 2732, 2733, 2734, 2735, 2736, 2737, 2738, 2739, 2740, 2741, 2742, 2743, 2744, 2745, 2746, 2747, 2748, 2749, 2750, 2751, 2752, 2753, 2754, 2755, 2756, 2757, 2758, 2759, 2760, 2761, 2762, 2763, 2764, 2765, 2766, 2767, 2768, 2769, 2770, 2771, 2772, 2773, 2774, 2775, 2776, 2777, 2778, 2779, 2780, 2781, 2782, 2783, 2784, 2785, 2786, 2787, 2788, 2789, 2790, 2791, 2792, 2793, 2794, 2795, 2796, 2797, 2798, 2799, 2800, 2801, 2802, 2803, 2804, 2805, 2806, 2807, 2808, 2809, 2810, 2811, 2812, 2813, 2814, 2815, 2816, 2817, 2818, 2819, 2820, 2821, 2822, 2823, 2824, 2825, 2826, 2827, 2828, 2829, 2830, 2831, 2832, 2833, 2834, 2835, 2836, 2837, 2838, 2839, 2840, 2841, 2842, 2843, 2844, 2845, 2846, 2847, 2848, 2849, 2850, 2851, 2852, 2853, 2854, 2855, 2856, 2857, 2858, 2859, 2860, 2861, 2862, 2863, 2864, 2865, 2866, 2867, 2868, 2869, 2870, 2871, 2872, 2873, 2874, 2875, 2876, 2877, 2878, 2879, 2880, 2881, 2882, 2883, 2884, 2885, 2886, 2887, 2888, 2889, 2890, 2891, 2892, 2893, 2894, 2895, 2896, 2897, 2898, 2899, 2900, 2901, 2902, 2903, 2904, 2905, 2906, 2907, 2908, 2909, 2910, 2911, 2912, 2913, 2914, 2915, 2916, 2917, 2918, 2919, 2920, 2921, 2922, 2923, 2924, 2925, 2926, 2927, 2928, 2929, 2930, 2931, 2932, 2933, 2934, 2935, 2936, 2937, 2938, 2939, 2940, 2941, 2942, 2943, 2944, 2945, 2946, 2947, 2948, 2949, 2950, 2951, 2952, 2953, 2954, 2955, 2956, 2957, 2958, 2959, 2960, 2961, 2962, 2963, 2964, 2965, 2966, 2967, 2968, 2969, 2970, 2971, 2972, 2973, 2974, 2975, 2976, 2977, 2978, 2979, 2980, 2981, 2982, 2983, 2984, 2985, 2986, 2987, 2988, 2989, 2990, 2991, 2992, 2993, 2994, 2995, 2996, 2997, 2998, 2999, 3000, 3001, 3002, 3003, 3004, 3005, 3006, 3007, 3008, 3009, 3010, 3011, 3012, 3013, 3014, 3015, 3016, 3017, 3018, 3019, 3020, 3021, 3022, 3023, 3024, 3025, 3026, 3027, 3028, 3029, 3030, 3031, 3032, 3033, 3034, 3035, 3036, 3037, 3038, 3039, 3040, 3041, 3042, 3043, 3044, 3045, 3046, 3047, 3048, 3049, 3050, 3051, 3052, 3053, 3054, 3055, 3056, 3057, 3058, 3059, 3060, 3061, 3062, 3063, 3064, 3065, 3066, 3067, 3068, 3069, 3070, 3071, 3072, 3073, 3074, 3075, 3076, 3077, 3078, 3079, 3080, 3081, 3082, 3083, 3084, 3085, 3086, 3087, 3088, 3089, 3090, 3091, 3092, 3093, 3094, 3095, 3096, 3097, 3098, 3099, 3100, 3101, 3102, 3103, 3104, 3105, 3106, 3107, 3108, 3109, 3110, 3111, 3112, 3113, 3114, 3115, 3116, 3117, 3118, 3119, 3120, 3121, 3122, 3123, 3124, 3125, 3126, 3127, 3128, 3129, 3130, 3131, 3132, 3133, 3134, 3135, 3136, 3137, 3138, 3139, 3140, 3141, 3142, 3143, 3144, 3145, 3146, 3147, 3148, 3149, 3150, 3151, 3152, 3153, 3154, 3155, 3156, 3157, 3158, 3159, 3160, 3161, 3162, 3163, 3164, 3165, 3166, 3167, 3168, 3169, 3170, 3171, 3172, 3173, 3174, 3175, 3176, 3177, 3178, 3179, 3180, 3181, 3182, 3183, 3184, 3185, 3186, 3187, 3188, 3189, 3190, 3191, 3192, 3193, 3194, 3195, 3196, 3197, 3198, 3199, 3200, 3201, 3202, 3203, 3204, 3205, 3206, 3207, 3208, 3209, 3210, 3211, 3212, 3213, 3214, 3215, 3216, 3217, 3218, 3219, 3220, 3221, 3222, 3223, 3224, 3225, 3226, 3227, 3228, 3229, 3230, 3231, 3232, 3233, 3234, 3235, 3236, 3237, 3238, 3239, 3240, 3241, 3242, 3243, 3244, 3245, 3246, 3247, 3248, 3249, 3250, 3251, 3252, 3253, 3254, 3255, 3256, 3257, 3258, 3259, 3260, 3261, 3262, 3263, 3264, 3265, 3266, 3267, 3268, 3269, 3270, 3271, 3272, 3273, 3274, 3275, 3276, 3277, 3278, 3279, 3280, 3281, 3282, 3283, 3284, 3285, 3286, 3287, 3288, 3289, 3290, 3291, 3292, 3293, 3294, 3295, 3296, 3297, 3298, 3299, 3300, 3301, 3302, 3303, 3304, 3305, 3306, 3307, 3308, 3309, 3310, 3311, 3312, 3313, 3314, 3315, 3316, 3317, 3318, 3319, 3320, 3321, 3322, 3323, 3324, 3325, 3326, 3327, 3328, 3329, 3330, 3331, 3332, 3333, 3334, 3335, 3336, 3337, 3338, 3339, 3340, 3341, 3342, 3343, 3344, 3345, 3346, 3347, 3348, 3349, 3350, 3351, 3352, 3353, 3354, 3355, 3356, 3357, 3358, 3359, 3360, 3361, 3362, 3363, 3364, 3365, 3366, 3367, 3368, 3369, 3370, 3371, 3372, 3373, 3374, 3375, 3376, 3377, 3378, 3379, 3380, 3381, 3382, 3383, 3384, 3385, 3386, 3387, 3388, 3389, 3390, 3391, 3392, 3393, 3394, 3395, 3396, 3397, 3398, 3399, 3400, 3401, 3402, 3403, 3404, 3405, 3406, 3407, 3408, 3409, 3410, 3411, 3412, 3413, 3414, 3415, 3416, 3417, 3418, 3419, 3420, 3421, 3422, 3423, 3424, 3425, 3426, 3427, 3428, 3429, 3430, 3431, 3432, 3433, 3434, 3435, 3436, 3437, 3438, 3439, 3440, 3441, 3442, 3443, 3444, 3445, 3446, 3447, 3448, 3449, 3450, 3451, 3452, 3453, 3454, 3455, 3456, 3457, 3458, 3459, 3460, 3461, 3462, 3463, 3464, 3465, 3466, 3467, 3468, 3469, 3470, 3471, 3472, 3473, 3474, 3475, 3476, 3477, 3478, 3479, 3480, 3481, 3482, 3483, 3484, 3485, 3486, 3487, 3488, 3489, 3490, 3491, 3492, 3493, 3494, 3495, 3496, 3497, 3498, 3499, 3500, 3501, 3502, 3503, 3504, 3505, 3506, 3507, 3508, 3509, 3510, 3511, 3512, 3513, 3514, 3515, 3516, 3517, 3518, 3519, 3520, 3521, 3522, 3523, 3524, 3525, 3526, 3527, 3528, 3529, 3530, 3531, 3532, 3533, 3534, 3535, 3536, 3537, 3538, 3539, 3540, 3541, 3542, 3543, 3544, 3545, 3546, 3547, 3548, 3549, 3550, 3551, 3552, 3553, 3554, 3555, 3556, 3557, 3558, 3559, 3560, 3561, 3562, 3563, 3564, 3565, 3566, 3567, 3568, 3569, 3570, 3571, 3572, 3573, 3574, 3575, 3576, 3577, 3578, 3579, 3580, 3581, 3582, 3583, 3584, 3585, 3586, 3587, 3588, 3589, 3590, 3591, 3592, 3593, 3594, 3595, 3596, 3597, 3598, 3599, 3600, 3601, 3602, 3603, 3604, 3605, 3606, 3607, 3608, 3609, 3610, 3611, 3612, 3613, 3614, 3615, 3616, 3617, 3618, 3619, 3620, 3621, 3622, 3623, 3624, 3625, 3626, 3627, 3628, 3629, 3630, 3631, 3632, 3633, 3634, 3635, 3636, 3637, 3638, 3639, 3640, 3641, 3642, 3643, 3644, 3645, 3646, 3647, 3648, 3649, 3650, 3651, 3652, 3653, 3654, 3655, 3656, 3657, 3658, 3659, 3660, 3661, 3662, 3663, 3664, 3665, 3666, 3667, 3668, 3669, 3670, 3671, 3672, 3673, 3674, 3675, 3676, 3677, 3678, 3679, 3680, 3681, 3682, 3683, 3684, 3685, 3686, 3687, 3688, 3689, 3690, 3691, 3692, 3693, 3694, 3695, 3696, 3697, 3698, 3699, 3700, 3701, 3702, 3703, 3704, 3705, 3706, 3707, 3708, 3709, 3710, 3711, 3712, 3713, 3714, 3715, 3716, 3717, 3718, 3719, 3720, 3721, 3722, 3723, 3724, 3725, 3726, 3727, 3728, 3729, 3730, 3731, 3732, 3733, 3734, 3735, 3736, 3737, 3738, 3739, 3740, 3741, 3742, 3743, 3744, 3745, 3746, 3747, 3748, 3749, 3750, 3751, 3752, 3753, 3754, 3755, 3756, 3757, 3758, 3759, 3760, 3761, 3762, 3763, 3764, 3765, 3766, 3767, 3768, 3769, 3770, 3771, 3772, 3773, 3774, 3775, 3776, 3777, 3778, 3779, 3780, 3781, 3782, 3783, 3784, 3785, 3786, 3787, 3788, 3789, 3790, 3791, 3792, 3793, 3794, 3795, 3796, 3797, 3798, 3799, 3800, 3801, 3802, 3803, 3804, 3805, 3806, 3807, 3808, 3809, 3810, 3811, 3812, 3813, 3814, 3815, 3816, 3817, 3818, 3819, 3820, 3821, 3822, 3823, 3824, 3825, 3826, 3827, 3828, 3829, 3830, 3831, 3832, 3833, 3834, 3835, 3836, 3837, 3838, 3839, 3840, 3841, 3842, 3843, 3844, 3845, 3846, 3847, 3848, 3849, 3850, 3851, 3852, 3853, 3854, 3855, 3856, 3857, 3858, 3859, 3860, 3861, 3862, 3863, 3864, 3865, 3866, 3867, 3868, 3869, 3870, 3871, 3872, 3873, 3874, 3875, 3876, 3877, 3878, 3879, 3880, 3881, 3882, 3883, 3884, 3885, 3886, 3887, 3888, 3889, 3890, 3891, 3892, 3893, 3894, 3895, 3896, 3897, 3898, 3899, 3900, 3901, 3902, 3903, 3904, 3905, 3906, 3907, 3908, 3909, 3910, 3911, 3912, 3913, 3914, 3915, 3916, 3917, 3918, 3919, 3920, 3921, 3922, 3923, 3924, 3925, 3926, 3927, 3928, 3929, 3930, 3931, 3932, 3933, 3934, 3935, 3936, 3937, 3938, 3939, 3940, 3941, 3942, 3943, 3944, 3945, 3946, 3947, 3948, 3949, 3950, 3951, 3952, 3953, 3954, 3955, 3956, 3957, 3958, 3959, 3960, 3961, 3962, 3963, 3964, 3965, 3966, 3967, 3968, 3969, 3970, 3971, 3972, 3973, 3974, 3975, 3976, 3977, 3978, 3979, 3980, 3981, 3982, 3983, 3984, 3985, 3986, 3987, 3988, 3989, 3990, 3991, 3992, 3993, 3994, 3995, 3996, 3997, 3998, 3999, 4000, 4001, 4002, 4003, 4004, 4005, 4006, 4007, 4008, 4009, 4010, 4011, 4012, 4013, 4014, 4015, 4016, 4017, 4018, 4019, 4020, 4021, 4022, 4023, 4024, 4025, 4026, 4027, 4028, 4029, 4030, 4031, 4032, 4033, 4034, 4035, 4036, 4037, 4038, 4039, 4040, 4041, 4042, 4043, 4044, 4045, 4046, 4047, 4048, 4049, 4050, 4051, 4052, 4053, 4054, 4055, 4056, 4057, 4058, 4059, 4060, 4061, 4062, 4063, 4064, 4065, 4066, 4067, 4068, 4069, 4070, 4071, 4072, 4073, 4074, 4075, 4076, 4077, 4078, 4079, 4080, 4081, 4082, 4083, 4084, 4085, 4086, 4087, 4088, 4089, 4090, 4091, 4092, 4093, 4094, 4095, 4096, 4097, 4098, 4099, 4100, 4101, 4102, 4103, 4104, 4105, 4106, 4107, 4108, 4109, 4110, 4111, 4112, 4113, 4114, 4115, 4116, 4117, 4118, 4119, 4120, 4121, 4122, 4123, 4124, 4125, 4126, 4127, 4128, 4129, 4130, 4131, 4132, 4133, 4134, 4135, 4136, 4137, 4138, 4139, 4140, 4141, 4142, 4143, 4144, 4145, 4146, 4147, 4148, 4149, 4150, 4151, 4152, 4153, 4154, 4155, 4156, 4157, 4158, 4159, 4160, 4161, 4162, 4163, 4164, 4165, 4166, 4167, 4168, 4169, 4170, 4171, 4172, 4173, 4174, 4175, 4176, 4177, 4178, 4179, 4180, 4181, 4182, 4183, 4184, 4185, 4186, 4187, 4188, 4189, 4190, 4191, 4192, 4193, 4194, 4195, 4196, 4197, 4198, 4199, 4200, 4201, 4202, 4203, 4204, 4205, 4206, 4207, 4208, 4209, 4210, 4211, 4212, 4213, 4214, 4215, 4216, 4217, 4218, 4219, 4220, 4221, 4222, 4223, 4224, 4225, 4226, 4227, 4228, 4229, 4230, 4231, 4232, 4233, 4234, 4235, 4236, 4237, 4238, 4239, 4240, 4241, 4242, 4243, 4244, 4245, 4246, 4247, 4248, 4249, 4250, 4251, 4252, 4253, 4254, 4255, 4256, 4257, 4258, 4259, 4260, 4261, 4262, 4263, 4264, 4265, 4266, 4267, 4268, 4269, 4270, 4271, 4272, 4273, 4274, 4275, 4276, 4277, 4278, 4279, 4280, 4281, 4282, 4283, 4284, 4285, 4286, 4287, 4288, 4289, 4290, 4291, 4292, 4293, 4294, 4295, 4296, 4297, 4298, 4299, 4300, 4301, 4302, 4303, 4304, 4305, 4306, 4307, 4308, 4309, 4310, 4311, 4312, 4313, 4314, 4315, 4316, 4317, 4318, 4319, 4320, 4321, 4322, 4323, 4324, 4325, 4326, 4327, 4328, 4329, 4330, 4331, 4332, 4333, 4334, 4335, 4336, 4337, 4338, 4339, 4340, 4341, 4342, 4343, 4344, 4345, 4346, 4347, 4348, 4349, 4350, 4351, 4352, 4353, 4354, 4355, 4356, 4357, 4358, 4359, 4360, 4361, 4362, 4363, 4364, 4365, 4366, 4367, 4368, 4369, 4370, 4371, 4372, 4373, 4374, 4375, 4376, 4377, 4378, 4379, 4380, 4381, 4382, 4383, 4384, 4385, 4386, 4387, 4388, 4389, 4390, 4391, 4392, 4393, 4394, 4395, 4396, 4397, 4398, 4399, 4400, 4401, 4402, 4403, 4404, 4405, 4406, 4407, 4408, 4409, 4410, 4411, 4412, 4413, 4414, 4415, 4416, 4417, 4418, 4419, 4420, 4421, 4422, 4423, 4424, 4425, 4426, 4427, 4428, 4429, 4430, 4431, 4432, 4433, 4434, 4435, 4436, 4437, 4438, 4439, 4440, 4441, 4442, 4443, 4444, 4445, 4446, 4447, 4448, 4449, 4450, 4451, 4452, 4453, 4454, 4455, 4456, 4457, 4458, 4459, 4460, 4461, 4462, 4463, 4464, 4465, 4466, 4467, 4468, 4469, 4470, 4471, 4472, 4473, 4474, 4475, 4476, 4477, 4478, 4479, 4480, 4481, 4482, 4483, 4484, 4485, 4486, 4487, 4488, 4489, 4490, 4491, 4492, 4493, 4494, 4495, 4496, 4497, 4498, 4499, 4500, 4501, 4502, 4503, 4504, 4505, 4506, 4507, 4508, 4509, 4510, 4511, 4512, 4513, 4514, 4515, 4516, 4517, 4518, 4519, 4520, 4521, 4522, 4523, 4524, 4525, 4526, 4527, 4528, 4529, 4530, 4531, 4532, 4533, 4534, 4535, 4536, 4537, 4538, 4539, 4540, 4541, 4542, 4543, 4544, 4545, 4546, 4547, 4548, 4549, 4550, 4551, 4552, 4553, 4554, 4555, 4556, 4557, 4558, 4559, 4560, 4561, 4562, 4563, 4564, 4565, 4566, 4567, 4568, 4569, 4570, 4571, 4572, 4573, 4574, 4575, 4576, 4577, 4578, 4579, 4580, 4581, 4582, 4583, 4584, 4585, 4586, 4587, 4588, 4589, 4590, 4591, 4592, 4593, 4594, 4595, 4596, 4597, 4598, 4599, 4600, 4601, 4602, 4603, 4604, 4605, 4606, 4607, 4608, 4609, 4610, 4611, 4612, 4613, 4614, 4615, 4616, 4617, 4618, 4619, 4620, 4621, 4622, 4623, 4624, 4625, 4626, 4627, 4628, 4629, 4630, 4631, 4632, 4633, 4634, 4635, 4636, 4637, 4638, 4639, 4640, 4641, 4642, 4643, 4644, 4645, 4646, 4647, 4648, 4649, 4650, 4651, 4652, 4653, 4654, 4655, 4656, 4657, 4658, 4659, 4660, 4661, 4662, 4663, 4664, 4665, 4666, 4667, 4668, 4669, 4670, 4671, 4672, 4673, 4674, 4675, 4676, 4677, 4678, 4679, 4680, 4681, 4682, 4683, 4684, 4685, 4686, 4687, 4688, 4689, 4690, 4691, 4692, 4693, 4694, 4695, 4696, 4697, 4698, 4699, 4700, 4701, 4702, 4703, 4704, 4705, 4706, 4707, 4708, 4709, 4710, 4711, 4712, 4713, 4714, 4715, 4716, 4717, 4718, 4719, 4720, 4721, 4722, 4723, 4724, 4725, 4726, 4727, 4728, 4729, 4730, 4731, 4732, 4733, 4734, 4735, 4736, 4737, 4738, 4739, 4740, 4741, 4742, 4743, 4744, 4745, 4746, 4747, 4748, 4749, 4750, 4751, 4752, 4753, 4754, 4755, 4756, 4757, 4758, 4759, 4760, 4761, 4762, 4763, 4764, 4765, 4766, 4767, 4768, 4769, 4770, 4771, 4772, 4773, 4774, 4775, 4776, 4777, 4778, 4779, 4780, 4781, 4782, 4783, 4784, 4785, 4786, 4787, 4788, 4789, 4790, 4791, 4792, 4793, 4794, 4795, 4796, 4797, 4798, 4799, 4800, 4801, 4802, 4803, 4804, 4805, 4806, 4807, 4808, 4809, 4810, 4811, 4812, 4813, 4814, 4815, 4816, 4817, 4818, 4819, 4820, 4821, 4822, 4823, 4824, 4825, 4826, 4827, 4828, 4829, 4830, 4831, 4832, 4833, 4834, 4835, 4836, 4837, 4838, 4839, 4840, 4841, 4842, 4843, 4844, 4845, 4846, 4847, 4848, 4849, 4850, 4851, 4852, 4853, 4854, 4855, 4856, 4857, 4858, 4859, 4860, 4861, 4862, 4863, 4864, 4865, 4866, 4867, 4868, 4869, 4870, 4871, 4872, 4873, 4874, 4875, 4876, 4877, 4878, 4879, 4880, 4881, 4882, 4883, 4884, 4885, 4886, 4887, 4888, 4889, 4890, 4891, 4892, 4893, 4894, 4895, 4896, 4897, 4898, 4899, 4900, 4901, 4902, 4903, 4904, 4905, 4906, 4907, 4908, 4909, 4910, 4911, 4912, 4913, 4914, 4915, 4916, 4917, 4918, 4919, 4920, 4921, 4922, 4923, 4924, 4925, 4926, 4927, 4928, 4929, 4930, 4931, 4932, 4933, 4934, 4935, 4936, 4937, 4938, 4939, 4940, 4941, 4942, 4943, 4944, 4945, 4946, 4947, 4948, 4949, 4950, 4951, 4952, 4953, 4954, 4955, 4956, 4957, 4958, 4959, 4960, 4961, 4962, 4963, 4964, 4965, 4966, 4967, 4968, 4969, 4970, 4971, 4972, 4973, 4974, 4975, 4976, 4977, 4978, 4979, 4980, 4981, 4982, 4983, 4984, 4985, 4986, 4987, 4988, 4989, 4990, 4991, 4992, 4993, 4994, 4995, 4996, 4997, 4998, 4999, 5000 FROM x;
SELECT COUNT(*) FROM (SELECT DISTINCT * FROM x);
SET x = 'v0.10.2';
PRAGMA x;
CREATE TABLE IF NOT EXISTS x (x INT);
INSERT INTO x (x) VALUES (1), (2), (3);
CREATE OR REPLACE VIEW x AS (SELECT * FROM x);
CREATE OR REPLACE VIEW x AS (SELECT * FROM x);
SELECT * FROM x;
CREATE OR REPLACE VIEW x AS (SELECT * FROM x);
CREATE OR REPLACE VIEW x AS (SELECT * FROM x);
CREATE OR REPLACE VIEW x AS (SELECT (SELECT * FROM x));
SELECT * FROM x;
SET x = 'v1.0.0';
SET x = TRUE;
PRAGMA x;
CREATE TABLE IF NOT EXISTS x (x INT);
INSERT INTO x (x) VALUES (1), (2), (3);
CREATE OR REPLACE VIEW x AS (SELECT * FROM x);
CREATE OR REPLACE VIEW x AS (SELECT * FROM x);
CREATE OR REPLACE VIEW x AS (SELECT * FROM x);
CREATE OR REPLACE VIEW x AS (SELECT * FROM x);
CREATE OR REPLACE VIEW x AS (SELECT (SELECT * FROM x));
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (41), (42), (43), (44);
CREATE VIEW x (x, x) AS SELECT x, x + 1 FROM x WHERE x > 41;
CREATE VIEW x (x, x, x) AS SELECT x, x, x + x FROM x WHERE x > 42;
CREATE VIEW x (x, x) AS SELECT x, x FROM x WHERE x > 43;
SELECT x + 1 FROM x WHERE x > 42;
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (41), (42), (43);
CREATE VIEW x AS SELECT x AS x FROM x WHERE x < 43;
CREATE VIEW x AS SELECT 'whatever';
SELECT x FROM x WHERE x > 41;
SELECT x FROM x AS x WHERE x > 41;
DROP VIEW x;
SELECT x FROM x WHERE x > 41;
CREATE VIEW x AS SELECT 'whatever';
SELECT * FROM x;
CREATE OR REPLACE VIEW x AS SELECT 42;
SELECT * FROM x;
INSERT INTO x VALUES (1);
DROP VIEW x;
DROP VIEW x;
DROP VIEW IF EXISTS x;
CREATE VIEW x AS SELECT * FROM x;
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (41), (42), (43);
CREATE VIEW x (x, "x") AS SELECT * FROM x;
CREATE VIEW x (x, "x") AS SELECT x, x + 1 FROM x;
SELECT x, x FROM x;
DROP VIEW x;
CREATE VIEW x (x, "x") AS SELECT x, x + 1, x + 2 FROM x;
SELECT x, x FROM x;
DROP VIEW x;
CREATE VIEW x (x, "x") AS SELECT x, x + 1, x + 2 AS x FROM x;
SELECT x, x, x FROM x;
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (41), (42), (43);
CREATE VIEW x AS SELECT x AS x FROM x WHERE x < 43;
DELETE FROM x;
UPDATE x SET x = 1;
CREATE TEMPORARY VIEW x AS SELECT 0, 0, 0 FROM x;
SET x = 'v0.10.2';
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (41), (42), (43);
CREATE VIEW x AS SELECT * FROM x;
SELECT * FROM x;
DROP TABLE x;
CREATE TABLE x (x DATE);
SELECT * FROM x;
DROP TABLE x;
CREATE TABLE x (x INT, x INT);
SELECT * FROM x;
DROP TABLE x;
CREATE TABLE x (x INT);
SELECT * FROM x;
DROP TABLE x;
CREATE TABLE x (x INT);
SELECT * FROM x;
ALTER TABLE x ALTER COLUMN x SET DATA TYPE TEXT;
SELECT * FROM x;
ALTER TABLE x ALTER COLUMN x SET DATA TYPE INT;
SELECT * FROM x;
SELECT * FROM x;
SET x = 'v1.0.0';
SET x = TRUE;
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (41), (42), (43);
CREATE VIEW x AS SELECT * FROM x;
SELECT * FROM x;
DROP TABLE x;
DROP TABLE x CASCADE;
CREATE TABLE x (x DATE);
SELECT * FROM x;
DROP TABLE x;
CREATE TABLE x (x INT, x INT);
SELECT * FROM x;
DROP TABLE x;
CREATE TABLE x (x INT);
SELECT * FROM x;
DROP TABLE x;
CREATE TABLE x (x INT);
SELECT * FROM x;
CREATE VIEW x AS SELECT * FROM x;
ALTER TABLE x ALTER COLUMN x SET DATA TYPE TEXT;
DROP VIEW x;
ALTER TABLE x ALTER COLUMN x SET DATA TYPE TEXT;
CREATE VIEW x AS SELECT * FROM x;
DROP VIEW x;
SET x = 'v0.10.2';
PRAGMA x;
CREATE SCHEMA x.x;
CREATE VIEW x.x (x) AS SELECT 'x' AS x, 'y' AS x;
SELECT TRIM(x, CHR(10)) FROM x WHERE x = FALSE;
ALTER VIEW x.x RENAME TO x;
SELECT TRIM(x, CHR(10)) FROM x WHERE x = FALSE;
DROP SCHEMA x.x CASCADE;
SELECT TRIM(x, CHR(10)) FROM x WHERE x = FALSE;
CREATE TABLE x (x INT, x TEXT);
CREATE VIEW x AS SELECT * FROM x;
SELECT TRIM(x, CHR(10)) FROM x WHERE x = FALSE;
ALTER TABLE x RENAME COLUMN x TO x;
SELECT TRIM(x, CHR(10)) FROM x WHERE x = FALSE;
CREATE OR REPLACE VIEW x (x, x) AS SELECT * FROM x;
CREATE OR REPLACE TABLE x ("x" INT, "x" TEXT);
CREATE OR REPLACE VIEW x AS SELECT * FROM x;
DROP VIEW x;
SELECT TRIM(x, CHR(10)) FROM x WHERE x = FALSE;
DROP VIEW x;
CREATE SCHEMA "x".x;
CREATE VIEW "x".x ("x", "x") AS SELECT * FROM x;
SELECT TRIM(x, CHR(10)) FROM x WHERE x = FALSE;
SET x = 'v1.0.0';
SET x = TRUE;
PRAGMA x;
CREATE SCHEMA x.x;
CREATE VIEW x.x (x) AS SELECT 'x' AS x, 'y' AS x;
SELECT TRIM(x, CHR(10)) FROM x WHERE x = FALSE;
ALTER VIEW x.x RENAME TO x;
SELECT TRIM(x, CHR(10)) FROM x WHERE x = FALSE;
DROP SCHEMA x.x CASCADE;
SELECT TRIM(x, CHR(10)) FROM x WHERE x = FALSE;
CREATE TABLE x (x INT, x TEXT);
CREATE VIEW x AS SELECT * FROM x;
SELECT TRIM(x, CHR(10)) FROM x WHERE x = FALSE;
ALTER TABLE x RENAME COLUMN x TO x;
DROP VIEW x;
ALTER TABLE x RENAME COLUMN x TO x;
CREATE VIEW x AS SELECT * FROM x;
SELECT TRIM(x, CHR(10)) FROM x WHERE x = FALSE;
CREATE OR REPLACE VIEW x (x, x) AS SELECT * FROM x;
CREATE OR REPLACE TABLE x ("x" INT, "x" TEXT);
CREATE OR REPLACE VIEW x AS SELECT * FROM x;
DROP VIEW x;
SELECT TRIM(x, CHR(10)) FROM x WHERE x = FALSE;
DROP VIEW x;
CREATE SCHEMA "x".x;
CREATE VIEW "x".x ("x", "x") AS SELECT * FROM x;
SELECT TRIM(x, CHR(10)) FROM x WHERE x = FALSE;
PRAGMA x;
CREATE VIEW x AS SELECT 42;
CREATE VIEW IF NOT EXISTS x AS SELECT 84;
SELECT * FROM x;
PRAGMA x;
CREATE TABLE x (x BOOLEAN, PRIMARY KEY (x));
CREATE TABLE x (x TEXT COLLATE x, PRIMARY KEY (x));
INSERT INTO x (x) VALUES (0.7);
INSERT INTO x (x) VALUES ('1');
SELECT x.x FROM x NATURAL LEFT JOIN x;
PRAGMA x;
SELECT 'a' LIKE 'A' COLLATE NOCASE;
SELECT NOT 'a' LIKE 'A' COLLATE NOCASE;
SELECT 'A' COLLATE NOCASE LIKE 'a';
SELECT 'a' LIKE 'A%' COLLATE NOCASE;
SELECT 'A' COLLATE NOCASE LIKE '%A' COLLATE NOCASE;
SELECT 'a' COLLATE NOCASE LIKE '%A%' COLLATE NOCASE;
SELECT 'OX' COLLATE x.x LIKE 'ö%';
CREATE TABLE x (x TEXT, x TEXT);
INSERT INTO x VALUES ('A', 'a'), ('a', 'A'), ('AAAA', 'AaAa'), ('aaaa', 'baba');
SELECT x FROM x WHERE x LIKE x;
SELECT x FROM x WHERE x LIKE x COLLATE NOCASE;
SELECT 'a%ö' COLLATE NOACCENT LIKE 'a$%ö' ESCAPE '$';
SELECT NOT 'a%ö' COLLATE NOACCENT LIKE 'a$%ö' ESCAPE '$';
SELECT 'oX' ILIKE 'Ö%';
SELECT 'OX' COLLATE NOACCENT ILIKE 'ö%';
SELECT NOT 'öX' COLLATE NOACCENT ILIKE 'Ö%';
SELECT 'oX' GLOB 'O*';
SELECT 'oX' COLLATE NOCASE GLOB 'O*';
PRAGMA x;
PRAGMA x = x;
SELECT TYPEOF(x) FROM (SELECT CAST(1 AS INT) AS x GROUP BY x);
PRAGMA x;
CREATE TABLE x (x INT, x TEXT);
INSERT INTO x VALUES (0, 'a'), (1, 'B');
SELECT LIST(x ORDER BY x COLLATE nocase) FROM x;
PRAGMA x;
CREATE TABLE x (x BIGINT, x TEXT);
CREATE TABLE x (x BIGINT, x BIGINT);
INSERT INTO x VALUES (1, 'A'), (2, 'z');
INSERT INTO x VALUES (1, 100), (2, 0);
SELECT x AS "x", x.x AS x FROM x JOIN x USING (x) ORDER BY "x" COLLATE NOCASE;
SELECT x AS "x", x.x AS x FROM x JOIN x USING (x) ORDER BY "x" COLLATE NOCASE;
PRAGMA x;
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('XXX');
SELECT (SELECT x FROM x) COLLATE nocase;
SELECT (SELECT x FROM x) COLLATE nocase = 'xxx';
CREATE TABLE x (x TEXT, x TEXT);
INSERT INTO x VALUES ('ö', '>>>>>ö<<<<<'), ('o', '>>>>>o<<<<<'), ('p', '>>>>>p<<<<<');
SELECT CONCAT(x COLLATE de, x) FROM x ORDER BY ALL;
SELECT LOWER(x COLLATE de) FROM x ORDER BY ALL;
SELECT UPPER(x COLLATE de) FROM x ORDER BY ALL;
SELECT TRIM(x COLLATE de, '<>') FROM x ORDER BY ALL;
SELECT LTRIM(x COLLATE de, '<>') FROM x ORDER BY ALL;
SELECT RTRIM(x COLLATE de, '<>') FROM x ORDER BY ALL;
SELECT REPEAT(x COLLATE de, 10) FROM x ORDER BY ALL;
SELECT LEFT(x COLLATE de, 6) FROM x ORDER BY ALL;
SELECT RIGHT(x COLLATE de, 6) FROM x ORDER BY ALL;
SELECT RIGHT(LEFT(x COLLATE de, 6), 1) FROM x ORDER BY ALL;
SELECT REVERSE(x COLLATE de) FROM x ORDER BY ALL;
SELECT x FROM x WHERE CONTAINS(x COLLATE de, 'o') ORDER BY ALL;
SELECT x FROM x WHERE STARTS_WITH(x COLLATE de, '>>>>>o') ORDER BY ALL;
SELECT x FROM x WHERE x COLLATE de LIKE '%>o<%' ORDER BY ALL;
CREATE TABLE x (x TEXT COLLATE x);
INSERT INTO x VALUES ('Mühleisen'), ('Hëllö');
SELECT * FROM x WHERE x = 'Muhleisen';
SELECT * FROM x WHERE x = 'mühleisen';
SELECT * FROM x WHERE x = 'Hello';
CREATE TABLE x (x TEXT, x INT);
INSERT INTO x VALUES ('Hello', 1), ('Muhleisen', 3);
SELECT x.x, x.x, x FROM x JOIN x ON (x.x = x.x) ORDER BY 1;
DROP TABLE x;
CREATE TABLE x (x TEXT COLLATE x);
INSERT INTO x VALUES ('Hällo'), ('Hallo'), ('Hello');
SELECT * FROM x ORDER BY x;
DROP TABLE x;
CREATE TABLE x (x TEXT COLLATE x);
INSERT INTO x VALUES ('Hällo'), ('Hallo');
SELECT DISTINCT x FROM x;
SET x = c;
CREATE TABLE x (x INT, x TEXT, x INT, x DECIMAL(10, 2));
INSERT INTO x VALUES (1, 'North', 2020, 1000.00), (1, 'North', 2021, 1500.00), (1, 'South', 2020, 800.00), (1, 'South', 2021, 700.00), (2, 'North', 2020, 500.00), (2, 'North', 2021, 600.00), (2, 'South', 2020, 400.00), (2, 'South', 2021, 550.00);
SET x = c;
SELECT x, x, SUM(x) AS x FROM x GROUP BY GROUPING SETS ((x), (x), ()) ORDER BY x, x, x;
SET x = en_us;
SELECT x, x, SUM(x) AS x FROM x GROUP BY GROUPING SETS ((x), (x), ()) ORDER BY x, x, x;
SET x = c;
SELECT NULL AS x, x, SUM(x) FROM x GROUP BY x UNION ALL SELECT NULL AS x, NULL AS x, SUM(x) FROM x UNION ALL SELECT x, NULL AS x, SUM(x) FROM x GROUP BY x ORDER BY 1, 2;
SET x = en_us;
SELECT NULL AS x, x, SUM(x) FROM x GROUP BY x UNION ALL SELECT NULL AS x, NULL AS x, SUM(x) FROM x UNION ALL SELECT x, NULL AS x, SUM(x) FROM x GROUP BY x ORDER BY 1, 2;
SELECT x, x, SUM(x) AS x FROM x GROUP BY GROUPING SETS ((x), (x), ()) ORDER BY x, x, x;
CREATE TABLE x (x TEXT, x TEXT);
INSERT INTO x VALUES ('mark', 'muhleisen');
SELECT COUNT(*) FROM x WHERE 'mórritz' BETWEEN x AND x;
SELECT COUNT(*) FROM x WHERE 'mórritz' COLLATE NOACCENT BETWEEN x AND x;
SELECT COUNT(*) FROM x WHERE 'mórritz' BETWEEN (x COLLATE NOACCENT) AND x;
SELECT COUNT(*) FROM x WHERE 'mórritz' BETWEEN x AND (x COLLATE NOACCENT);
PRAGMA x = 'NOACCENT';
SELECT COUNT(*) FROM x WHERE 'mórritz' BETWEEN x AND x;
CREATE TABLE x (x TEXT COLLATE x);
INSERT INTO x VALUES ('hello'), ('WoRlD'), ('world'), ('Mühleisen');
SELECT * FROM x WHERE x = 'HeLlo';
SELECT * FROM x WHERE x = 'MÜhleisen';
SELECT * FROM x WHERE x = 'world';
CREATE TABLE x (x TEXT, x INT);
INSERT INTO x VALUES ('HeLlO', 1), ('mÜHLEISEN', 3);
SELECT x.x, x.x, x FROM x JOIN x ON (x.x = x.x) ORDER BY x;
DROP TABLE x;
CREATE TABLE x (x TEXT COLLATE x);
INSERT INTO x VALUES ('Hallo'), ('ham'), ('HELLO'), ('hElp');
SELECT * FROM x ORDER BY x;
DROP TABLE x;
CREATE TABLE x (x TEXT COLLATE x);
INSERT INTO x VALUES ('Hallo'), ('hallo');
SELECT DISTINCT x FROM x;
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('hEllO'), ('WöRlD'), ('wozld');
SELECT 'hëllo' COLLATE NOACCENT = 'hello';
SELECT 'hëllo' COLLATE POSIX = 'hello';
SELECT 'hëllo' COLLATE C = 'hello';
SELECT * FROM x WHERE x = 'hello';
SELECT * FROM x WHERE x = 'hello' COLLATE NOCASE;
SELECT * FROM x WHERE x COLLATE NOCASE = 'hello';
SELECT * FROM x WHERE x COLLATE NOCASE = 'hello' COLLATE NOACCENT;
SELECT * FROM x ORDER BY x COLLATE NOCASE;
SELECT * FROM x ORDER BY x COLLATE x.x;
PRAGMA x;
PRAGMA x = 3;
PRAGMA x;
SELECT 'a' AS x ORDER BY 1 COLLATE NOCASE;
SELECT 'a' ORDER BY 1 COLLATE NOCASE;
SELECT 'A', 'B' ORDER BY 2 COLLATE NOCASE;
SELECT CAST(999 AS TEXT) ORDER BY 1 COLLATE NOCASE;
SELECT CAST(999 AS TEXT) ORDER BY 1 COLLATE NOCASE;
SELECT CAST(999 AS TEXT) ORDER BY 1 COLLATE NOCASE;
SELECT CAST(999 AS TEXT) ORDER BY 1 COLLATE NOCASE;
SELECT CAST(999 AS TEXT) ORDER BY 1 COLLATE NOCASE;
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('ã'), ('B'), ('a'), ('A');
SELECT x FROM x ORDER BY 1 COLLATE NOCASE;
SELECT x FROM x ORDER BY x COLLATE NOCASE;
SELECT CONCAT(x, x) FROM x ORDER BY 1 COLLATE NOCASE;
SELECT CONCAT(x, x) AS x, x FROM x ORDER BY 2 COLLATE NOCASE;
SELECT x.x FROM x ORDER BY 1 COLLATE NOCASE;
SELECT CASE WHEN x[1] = 'a' THEN x ELSE NULL END FROM x ORDER BY 1 COLLATE NOCASE;
SELECT (SELECT x) FROM x ORDER BY 1 COLLATE NOCASE;
SELECT (SELECT x) AS x FROM x ORDER BY x COLLATE NOCASE;
SELECT CONCAT('a', (SELECT x)) FROM x ORDER BY 1 COLLATE NOCASE;
PRAGMA x = x;
CREATE TABLE x (x TEXT, x TEXT, x INT, x INT);
INSERT INTO x VALUES ('NL', 'Amsterdam', 2010, 1005);
INSERT INTO x VALUES ('NL', 'Amsterdam', 2011, 1065);
INSERT INTO x VALUES ('NL', 'Amsterdam', 2012, 1158);
INSERT INTO x VALUES ('US', 'Seattle', 2013, 564);
INSERT INTO x VALUES ('US', 'Seattle', 2014, 608);
INSERT INTO x VALUES ('US', 'Seattle', 2015, 738);
INSERT INTO x VALUES ('US', 'New York City', 2016, 8015);
INSERT INTO x VALUES ('US', 'New York City', 2017, 8175);
INSERT INTO x VALUES ('US', 'New York City', 2018, 8772);
INSERT INTO x VALUES ('US', 'New York City', 2019, 8772);
INSERT INTO x VALUES ('US', 'New York City', 2020, 8772);
PIVOT x ON x USING SUM(x);
CREATE TABLE x (x TEXT, x TEXT);
INSERT INTO x VALUES ('ö', '>>>>>ö<<<<<'), ('o', '>>>>>o<<<<<'), ('p', '>>>>>p<<<<<');
SELECT x FROM x WHERE CONTAINS(x COLLATE nocase, 'O') ORDER BY ALL;
SELECT CONCAT(x COLLATE noaccent, x) FROM x ORDER BY ALL;
SELECT LOWER(x COLLATE noaccent) FROM x ORDER BY ALL;
SELECT UPPER(x COLLATE noaccent) FROM x ORDER BY ALL;
SELECT TRIM(x COLLATE noaccent, '<>') FROM x ORDER BY ALL;
SELECT LTRIM(x COLLATE noaccent, '<>') FROM x ORDER BY ALL;
SELECT RTRIM(x COLLATE noaccent, '<>') FROM x ORDER BY ALL;
SELECT REPEAT(x COLLATE noaccent, 10) FROM x ORDER BY ALL;
SELECT LEFT(x COLLATE noaccent, 6) FROM x ORDER BY ALL;
SELECT RIGHT(x COLLATE noaccent, 6) FROM x ORDER BY ALL;
SELECT RIGHT(LEFT(x COLLATE noaccent, 6), 1) FROM x ORDER BY ALL;
SELECT REVERSE(x COLLATE noaccent) FROM x ORDER BY ALL;
SELECT x FROM x WHERE CONTAINS(x COLLATE noaccent, 'o') ORDER BY ALL;
SELECT x FROM x WHERE CONTAINS(x, 'ö' COLLATE noaccent) ORDER BY ALL;
SELECT x FROM x WHERE CONTAINS(x COLLATE nocase, 'O') ORDER BY ALL;
SELECT x FROM x WHERE STARTS_WITH(x COLLATE noaccent, '>>>>>o') ORDER BY ALL;
CREATE TABLE x (x TEXT COLLATE x.x);
INSERT INTO x VALUES ('Mühleisen'), ('Hëllö');
SELECT * FROM x WHERE x = 'Muhleisen';
SELECT * FROM x WHERE x = 'muhleisen';
SELECT * FROM x WHERE x = 'hEllô';
PRAGMA x = 'NOCASE';
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('hEllO'), ('WöRlD'), ('wozld');
SELECT COUNT(*) FROM x WHERE 'BlA' = 'bLa';
SELECT * FROM x WHERE x = 'hello';
SELECT * FROM x ORDER BY x;
PRAGMA x = 'NOCASE.NOACCENT';
SELECT * FROM x ORDER BY x;
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('Gabel'), ('Göbel'), ('Goethe'), ('Goldmann'), ('Göthe'), ('Götz');
SELECT * FROM x ORDER BY x COLLATE de;
SELECT * FROM x WHERE 'Goethe' > x COLLATE de ORDER BY 1;
SELECT * FROM x WHERE 'Goethe' > x ORDER BY 1;
SELECT * FROM x WHERE 'goethe' > x COLLATE x.x ORDER BY 1;
SELECT * FROM x WHERE 'goethe' > x COLLATE x.x ORDER BY 1;
SELECT * FROM x WHERE 'goethe' > x COLLATE x.x ORDER BY 1;
DELETE FROM x;
INSERT INTO x VALUES ('賃貸人側連絡先 (Lessor side contact)'), ('賃借人側連絡先 (Lessee side contact)'), ('解約連絡先 (Termination contacts)'), ('更新連絡先 (Update contact)');
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x COLLATE x.x;
SELECT ICU_SORT_KEY('Ş', 'ro');
SELECT ICU_SORT_KEY('goose', 'DUCK_DUCK_ENUM');
SELECT ICU_SORT_KEY('æ', 'icu_noaccent');
SELECT ICU_SORT_KEY('Æ', 'icu_noaccent');
SELECT CHR(2 * 16 * 256 + 1 * 256 + 2 * 16 + 11) COLLATE da = CHR(12 * 16 + 5) COLLATE da;
SELECT ICU_SORT_KEY(CHR(2 * 16 * 256 + 1 * 256 + 2 * 16 + 11), 'da') = ICU_SORT_KEY(CHR(12 * 16 + 5), 'da');
SELECT CHR(2 * 16 * 256 + 1 * 256 + 2 * 16 + 11) COLLATE da > CHR(12 * 16 + 5) COLLATE da;
SELECT CHR(2 * 16 * 256 + 1 * 256 + 2 * 16 + 11) COLLATE da > CHR(12 * 16 + 5) COLLATE da;
SELECT COUNT(*) FROM (SELECT CHR(2 * 16 * 256 + 1 * 256 + 2 * 16 + 11) UNION SELECT CHR(12 * 16 + 5)) AS x GROUP BY x COLLATE da;
SELECT NFC_NORMALIZE(CHR(2 * 16 * 256 + 1 * 256 + 2 * 16 + 11)) = NFC_NORMALIZE(CHR(12 * 16 + 5));
SELECT COUNT(*) FROM (SELECT CHR(2 * 16 * 256 + 1 * 256 + 2 * 16 + 11) UNION SELECT CHR(12 * 16 + 5)) AS x GROUP BY x COLLATE nfc;
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('z'), ('Z'), ('a'), ('A'), ('æ'), ('Æ'), ('à'), ('À'), ('á'), ('Á'), ('â'), ('Â'), ('ã'), ('Ã'), ('ä'), ('Ä'), ('å'), ('Å'), ('b'), ('B');
SELECT GROUP_CONCAT(x, '') AS x FROM x GROUP BY x COLLATE "x" ORDER BY x COLLATE "x";
SELECT 'Á' COLLATE "x";
BEGIN;
CREATE TABLE x (x TEXT COLLATE "x");
INSERT INTO x VALUES ('ŉ'), ('b'), ('T'), ('O'), ('M'), ('z'), ('ï'), ('F'), ('â'), ('h'), ('u'), ('V'), ('Q'), ('Î'), ('l'), ('m'), ('a'), ('o'), ('E'), ('W'), ('D'), ('i'), ('û'), ('Ê'), ('w'), ('Ï'), ('é'), ('n'), ('Ë'), ('j'), ('H'), ('x'), ('t'), ('L'), ('k'), ('Ô'), ('ô'), ('r'), ('f'), ('c'), ('î'), ('Ö'), ('g'), ('P'), ('X'), ('Á'), ('q'), ('ë'), ('U'), ('G'), ('S'), ('y'), ('á'), ('A'), ('s'), ('I'), ('B'), ('K'), ('Y'), ('Z'), ('R'), ('è'), ('Â'), ('J'), ('É'), ('C'), ('ö'), ('È'), ('N'), ('ê'), ('p'), ('e'), ('Û'), ('d'), ('v');
SELECT x FROM x ORDER BY x, x;
ROLLBACK;
BEGIN;
CREATE TABLE x (x TEXT COLLATE "x");
INSERT INTO x VALUES ('Tĥ'), ('Nǰ'), ('Ë'), ('Dȟ'), ('XȞ'), ('Xȟ'), ('rṝ'), ('tẖ'), ('RŖ'), ('Sḫ'), ('B'), ('ḛ̈'), ('lĺ'), ('M'), ('Sȟ'), ('p'), ('TȞ'), ('J'), ('Lĺ'), ('H'), ('Ẹ̈'), ('Xḣ'), ('dḣ'), ('SĤ'), ('rȑ'), ('zḩ'), ('ḉ'), ('Dẖ'), ('TḢ'), ('Rṛ'), ('NJ'), ('Dḫ'), ('Zḧ'), ('a'), ('L'), ('lḽ'), ('Zḩ'), ('Zḫ'), ('RṜ'), ('Ḙ̈'), ('DĤ'), ('sẖ'), ('Dḥ'), ('LĽ'), ('sḧ'), ('tḥ'), ('Rř'), ('ç'), ('GJ'), ('K'), ('c'), ('XḤ'), ('Th'), ('o'), ('RR'), ('Sẖ'), ('zẖ'), ('rŕ'), ('ZḢ'), ('Tḧ'), ('lḻ'), ('zḧ'), ('rṟ'), ('XḦ'), ('LḼ'), ('rr'), ('DḢ'), ('Zḣ'), ('Dḧ'), ('x'), ('zȟ'), ('sḫ'), ('SḦ'), ('NĴ'), ('LḶ'), ('xḥ'), ('G'), ('Tḩ'), ('Xḥ'), ('Xĥ'), ('DH'), ('xḫ'), ('Sĥ'), ('Xḫ'), ('zĥ'), ('Lḽ'), ('RȒ'), ('lḹ'), ('Tȟ'), ('lľ'), ('LĹ'), ('Gǰ'), ('SḢ'), ('ZḨ'), ('Tẖ'), ('gĵ'), ('O'), ('I'), ('s'), ('dȟ'), ('SḤ'), ('U'), ('LL'), ('Sh'), ('rȓ'), ('dḩ'), ('xẖ'), ('Lļ'), ('XH'), ('Ḉ'), ('SH'), ('Y'), ('Xḧ'), ('Gj'), ('TḪ'), ('xḧ'), ('F'), ('Xh'), ('LḺ'), ('xh'), ('GĴ'), ('C'), ('sḩ'), ('Rŗ'), ('sĥ'), ('XḪ'), ('u'), ('tḫ'), ('m'), ('v'), ('th'), ('k'), ('Rṟ'), ('Gĵ'), ('Ç'), ('t'), ('y'), ('RṚ'), ('TḨ'), ('Rȓ'), ('xḩ'), ('zḥ'), ('Ę̈'), ('Z'), ('RṞ'), ('dḥ'), ('Tḣ'), ('ZḤ'), ('Xẖ'), ('dḫ'), ('ZḪ'), ('D'), ('Tḫ'), ('xĥ'), ('b'), ('zh'), ('Tḥ'), ('l'), ('tḣ'), ('Rṙ'), ('LĻ'), ('gj'), ('Q'), ('e'), ('Lḷ'), ('tḩ'), ('Ḛ̈'), ('lḷ'), ('Rȑ'), ('sȟ'), ('h'), ('gǰ'), ('XĤ'), ('lļ'), ('dẖ'), ('RṘ'), ('Sḣ'), ('Zĥ'), ('E'), ('Nj'), ('Dḣ'), ('sḣ'), ('TḤ'), ('SḪ'), ('zḫ'), ('RŘ'), ('n'), ('ll'), ('z'), ('xḣ'), ('rṙ'), ('ZH'), ('tḧ'), ('N'), ('Sḩ'), ('sh'), ('Sḧ'), ('Nĵ'), ('DȞ'), ('T'), ('RȐ'), ('Dĥ'), ('X'), ('DḤ'), ('nǰ'), ('ZĤ'), ('ZḦ'), ('dĥ'), ('r'), ('ȩ̈'), ('rṛ'), ('Sḥ'), ('Xḩ'), ('j'), ('DḦ'), ('Dḩ'), ('R'), ('nj'), ('DḨ'), ('g'), ('TH'), ('Lḻ'), ('Zḥ'), ('RŔ'), ('sḥ'), ('Lḹ'), ('i'), ('dh'), ('A'), ('Lľ'), ('SḨ'), ('zḣ'), ('TḦ'), ('Ll'), ('xȟ'), ('Ȩ̈'), ('Rr'), ('d'), ('q'), ('ę̈'), ('DḪ'), ('f'), ('P'), ('TĤ'), ('S'), ('Rṝ'), ('ë'), ('LḸ'), ('Dh'), ('ẹ̈'), ('Zẖ'), ('ḙ̈'), ('dḧ'), ('rř'), ('rŗ'), ('tȟ'), ('ZȞ'), ('SȞ'), ('XḨ'), ('Rŕ'), ('XḢ'), ('V'), ('tĥ'), ('Zȟ'), ('Zh'), ('nĵ');
SELECT x FROM x ORDER BY x, x;
ROLLBACK;
BEGIN;
CREATE TABLE x (x TEXT COLLATE "x");
INSERT INTO x VALUES ('ጺ'), ('ቸ'), ('ዥ'), ('ረ'), ('ጣ'), ('ኰ'), ('ጸ'), ('ቋ'), ('ኼ'), ('ኂ'), ('ዬ'), ('ሁ'), ('ደ'), ('ጌ'), ('ኟ'), ('ኝ'), ('ኖ'), ('ሏ'), ('ቁ'), ('ጳ'), ('ሆ'), ('ቡ'), ('ዤ'), ('ሳ'), ('ሑ'), ('ፏ'), ('ሪ'), ('ቃ'), ('ጶ'), ('ሮ'), ('ኚ'), ('ጇ'), ('ጩ'), ('ጂ'), ('ቬ'), ('ይ'), ('ወ'), ('ፌ'), ('ታ'), ('ሚ'), ('ጄ'), ('ሖ'), ('ኮ'), ('ዡ'), ('ዲ'), ('ሽ'), ('ፅ'), ('ጓ'), ('አ'), ('ካ'), ('ፑ'), ('ቾ'), ('ሜ'), ('ጃ'), ('ተ'), ('ቢ'), ('ኃ'), ('ና'), ('ሕ'), ('ጔ'), ('ጻ'), ('ሺ'), ('ዷ'), ('ቀ'), ('ቨ'), ('ሿ'), ('ሻ'), ('ዔ'), ('ኹ'), ('ዑ'), ('ዋ'), ('ዖ'), ('ኜ'), ('ዙ'), ('ቌ'), ('ቪ'), ('ኒ'), ('ቴ'), ('ል'), ('ፕ'), ('ኦ'), ('ኛ'), ('ቿ'), ('ዩ'), ('ፄ'), ('ዮ'), ('ሟ'), ('ዪ'), ('ፉ'), ('ቶ'), ('ብ'), ('ጰ'), ('ኔ'), ('ሎ'), ('ሗ'), ('ጠ'), ('ኁ'), ('ግ'), ('ዛ'), ('ዦ'), ('ሡ'), ('ች'), ('ነ'), ('ጹ'), ('ቦ'), ('ኋ'), ('ኴ'), ('ሢ'), ('ማ'), ('ኙ'), ('ኆ'), ('ኣ'), ('ያ'), ('ር'), ('ጋ'), ('ቤ'), ('ቆ'), ('ኺ'), ('ሠ'), ('ሤ'), ('ኤ'), ('ኽ'), ('ሓ'), ('ቊ'), ('ጾ'), ('ቮ'), ('ጽ'), ('ኪ'), ('ጅ'), ('ሦ'), ('የ'), ('ፋ'), ('ድ'), ('ሷ'), ('ዞ'), ('ሹ'), ('ፐ'), ('ጕ'), ('ዜ'), ('ሯ'), ('ጤ'), ('ቹ'), ('ቈ'), ('ጭ'), ('ጐ'), ('ዉ'), ('ኧ'), ('ጵ'), ('ሞ'), ('ፎ'), ('ኻ'), ('ጧ'), ('ቧ'), ('ዣ'), ('ጦ'), ('ባ'), ('ጫ'), ('ራ'), ('ሾ'), ('ላ'), ('ቄ'), ('ኸ'), ('ሔ'), ('ሃ'), ('ጆ'), ('ዕ'), ('ዳ'), ('ሸ'), ('ዐ'), ('ኢ'), ('ዓ'), ('ጴ'), ('ህ'), ('ጢ'), ('ኲ'), ('ፊ'), ('ኌ'), ('ጡ'), ('ከ'), ('ሂ'), ('ሀ'), ('ሶ'), ('ኑ'), ('ዢ'), ('ኩ'), ('ጬ'), ('ፒ'), ('ሲ'), ('ዝ'), ('ዊ'), ('ፃ'), ('ቼ'), ('ፓ'), ('ገ'), ('ክ'), ('ሧ'), ('ሥ'), ('ኞ'), ('ሄ'), ('መ'), ('ቲ'), ('ኅ'), ('ጮ'), ('ኈ'), ('ዠ'), ('ጱ'), ('ጲ'), ('ቺ'), ('ሊ'), ('ጪ'), ('ጥ'), ('እ'), ('ጊ'), ('ኬ'), ('ጼ'), ('ጿ'), ('ፀ'), ('ዌ'), ('ሣ'), ('ሌ'), ('ኗ'), ('ሐ'), ('ን'), ('ቩ'), ('ፆ'), ('ቱ'), ('ቫ'), ('ኀ'), ('ዱ'), ('ስ'), ('ሉ'), ('ጎ'), ('ዘ'), ('ኄ'), ('ፖ'), ('ቂ'), ('ጨ'), ('ሰ'), ('ው'), ('ቯ'), ('ጷ'), ('ቅ'), ('ጒ'), ('ኾ'), ('ሒ'), ('ቻ'), ('ኳ'), ('ም'), ('ኡ'), ('ፈ'), ('ዟ'), ('ዧ'), ('ዎ'), ('ፔ'), ('ዒ'), ('ሬ'), ('ሴ'), ('ፍ'), ('ጁ'), ('ዚ'), ('ሱ'), ('ጯ'), ('ኵ'), ('ፁ'), ('ት'), ('ዶ'), ('ሩ'), ('ቷ'), ('ጀ'), ('ፂ'), ('ቭ'), ('ኘ'), ('ኊ'), ('ዴ'), ('ኍ'), ('በ'), ('ሼ'), ('ጉ'), ('ሙ'), ('ቍ'), ('ፗ'), ('ለ');
SELECT x FROM x ORDER BY x, x;
ROLLBACK;
BEGIN;
CREATE TABLE x (x TEXT COLLATE "x");
INSERT INTO x VALUES ('լ'), ('վ'), ('եւ'), ('գ'), ('Մ'), ('Ր'), ('ո'), ('յ'), ('և'), ('Ե'), ('ձ'), ('ջ'), ('Օ'), ('ճ'), ('Ֆ'), ('ի'), ('դ'), ('պ'), ('ր'), ('թ'), ('Պ'), ('Ը'), ('Ս'), ('Բ'), ('Տ'), ('Է'), ('Յ'), ('տ'), ('մ'), ('Ջ'), ('Լ'), ('Հ'), ('չ'), ('Ն'), ('Վ'), ('հ'), ('Ւ'), ('ղ'), ('ծ'), ('Ա'), ('Դ'), ('Ռ'), ('Զ'), ('ա'), ('ժ'), ('խ'), ('ռ'), ('Ց'), ('ե'), ('շ'), ('Կ'), ('ւ'), ('Փ'), ('Ձ'), ('ը'), ('Ժ'), ('Ծ'), ('կ'), ('ֆ'), ('փ'), ('ն'), ('զ'), ('Խ'), ('բ'), ('օ'), ('Ո'), ('ց'), ('Թ'), ('Ղ'), ('Գ'), ('է'), ('Ք'), ('Չ'), ('Շ'), ('Ի'), ('Եւ'), ('Ճ'), ('ք'), ('ս');
SELECT x FROM x ORDER BY x, x;
ROLLBACK;
BEGIN;
CREATE TABLE x (x TEXT COLLATE "x");
INSERT INTO x VALUES ('ৃ'), ('গ'), ('ঁ'), ('দ'), ('ৈ'), ('ু'), ('ি'), ('ো'), ('ড়'), ('য়'), ('ী'), ('ও'), ('ঊ'), ('ণ'), ('ঠ'), ('ঈ'), ('অ'), ('ভ'), ('ক'), ('স'), ('জ'), ('ছ'), ('ঔ'), ('আ'), ('এ'), ('ব'), ('ঘ'), ('ে'), ('ৰ'), ('ঞ'), ('ঙ'), ('ৌ'), ('ত্‍'), ('ঃ'), ('ৱ'), ('ন'), ('ঢ়'), ('ই'), ('ড'), ('হ'), ('ঢ'), ('প'), ('ট'), ('ত'), ('ং'), ('ঝ'), ('ঋ'), ('ম'), ('শ'), ('ক্ষ'), ('ষ'), ('ঐ'), ('চ'), ('ূ'), ('থ'), ('ধ'), ('য'), ('্'), ('়'), ('া'), ('খ'), ('ল'), ('উ'), ('ৎ'), ('ফ');
SELECT x FROM x ORDER BY x, x;
ROLLBACK;
BEGIN;
CREATE TABLE x (x TEXT COLLATE "x");
INSERT INTO x VALUES ('โบ'), ('Ï'), ('ﺄ'), ('ใฉ'), ('ﺉ'), ('แข'), ('เฅ'), ('w'), ('โฃ'), ('ǘ'), ('I'), ('ى'), ('แซ'), ('ﻲ'), ('โด'), ('แฑ'), ('ə'), ('เฎ'), ('แส'), ('R'), ('เฃ'), ('แผ'), ('B'), ('Ŵ'), ('โฆ'), ('เส'), ('เว'), ('โฏ'), ('เศ'), ('ȫ'), ('إ'), ('ۥ'), ('โอ'), ('แก'), ('ẋ'), ('โว'), ('แช'), ('ؤ'), ('แฤ'), ('แฟ'), ('ใฑ'), ('โข'), ('Ọ̈'), ('โฅ'), ('Ḭ'), ('แภ'), ('c'), ('โถ'), ('โฝ'), ('Ì'), ('ﺍ'), ('ợ̈'), ('Ị'), ('Ö'), ('Ẇ'), ('Í'), ('Ư̈'), ('โช'), ('ة'), ('เธ'), ('โย'), ('ﻳ'), ('ﺅ'), ('โส'), ('ṷ̈'), ('f'), ('ọ̈'), ('C'), ('โผ'), ('เก'), ('t'), ('เฏ'), ('โฐ'), ('แว'), ('แถ'), ('Ẁ'), ('โฦ'), ('แษ'), ('เค'), ('n'), ('Ṳ̈'), ('Ǐ'), ('r'), ('แธ'), ('เต'), ('ﻰ'), ('Z'), ('แน'), ('โก'), ('Ự̈'), ('J'), ('ใก'), ('เฦ'), ('ų̈'), ('Ȫ'), ('ự̈'), ('ö'), ('โท'), ('เฒ'), ('ﺂ'), ('ﻪ'), ('โฒ'), ('โค'), ('Ü'), ('เฆ'), ('ụ̈'), ('x'), ('โภ'), ('โต'), ('แฃ'), ('ǜ'), ('ẇ'), ('โป'), ('d'), ('o'), ('ﻭ'), ('Ợ̈'), ('Ẅ'), ('แฐ'), ('F'), ('โง'), ('ẅ'), ('ş'), ('เด'), ('ۦ'), ('Ǖ'), ('แย'), ('s'), ('ǖ'), ('أ'), ('ç'), ('แฆ'), ('ﺃ'), ('ư̈'), ('ﻬ'), ('A'), ('K'), ('ﻱ'), ('m'), ('Ǘ'), ('Ģ̆'), ('โญ'), ('ใช'), ('โศ'), ('เฟ'), ('ẘ'), ('เข'), ('แอ'), ('แฬ'), ('z'), ('เฉ'), ('โฤ'), ('โฬ'), ('ﻯ'), ('เฤ'), ('Į̇'), ('Ǫ̈'), ('Ȉ'), ('เน'), ('ใฐ'), ('ﺔ'), ('แฎ'), ('เฌ'), ('เซ'), ('l'), ('เห'), ('Ỉ'), ('ü'), ('โล'), ('Ǜ'), ('ﺆ'), ('ṳ̈'), ('P'), ('เช'), ('ﯩ'), ('Ų̈'), ('H'), ('แจ'), ('N'), ('โฎ'), ('โฟ'), ('ģ̆'), ('y'), ('G'), ('เบ'), ('แง'), ('ใง'), ('ı'), ('ﺎ'), ('โห'), ('V'), ('โษ'), ('เผ'), ('ﻩ'), ('Ơ̈'), ('Ğ'), ('ﻮ'), ('โฑ'), ('แฝ'), ('เฬ'), ('เณ'), ('p'), ('แม'), ('เจ'), ('โซ'), ('เป'), ('Ḭ̇'), ('เฑ'), ('แศ'), ('ơ̈'), ('เษ'), ('Ḯ'), ('แญ'), ('โจ'), ('v'), ('ใญ'), ('เฐ'), ('เท'), ('เง'), ('เภ'), ('ǚ'), ('แท'), ('แฉ'), ('Ṷ̈'), ('O'), ('ﺋ'), ('เพ'), ('Ṵ̈'), ('โม'), ('เย'), ('آ'), ('L'), ('Ẉ'), ('ǫ̈'), ('ใซ'), ('ﺈ'), ('แพ'), ('D'), ('İ'), ('ใฌ'), ('Ḉ'), ('k'), ('แฦ'), ('ẁ'), ('แด'), ('แณ'), ('g'), ('ẃ'), ('ใฎ'), ('Ç'), ('ẍ'), ('X'), ('ﻴ'), ('j'), ('U'), ('Ĭ'), ('แล'), ('ใฅ'), ('S'), ('ใฏ'), ('Q'), ('Î'), ('เญ'), ('แฅ'), ('แห'), ('ใจ'), ('ﺁ'), ('แต'), ('แฏ'), ('Ĩ'), ('เล'), ('Ə'), ('u'), ('ﺓ'), ('ḉ'), ('โฮ'), ('เถ'), ('Y'), ('โร'), ('Ȋ'), ('ใค'), ('Ǚ'), ('Ī'), ('W'), ('ئ'), ('Ẋ'), ('Ụ̈'), ('q'), ('แฮ'), ('แป'), ('โน'), ('เม'), ('Ị̇'), ('แร'), ('E'), ('แฌ'), ('ṵ̈'), ('ﺌ'), ('โพ'), ('b'), ('ŵ'), ('ﯨ'), ('ﻫ'), ('Į'), ('เอ'), ('Ẃ'), ('a'), ('ﺊ'), ('เร'), ('i'), ('ใฆ'), ('โธ'), ('โณ'), ('ใฃ'), ('h'), ('แค'), ('M'), ('Ẍ'), ('เฝ'), ('ﺇ'), ('แฒ'), ('e'), ('Ş'), ('เฮ'), ('โฌ'), ('ẉ'), ('ใข'), ('แบ'), ('โฉ'), ('ğ'), ('T');
SELECT x FROM x ORDER BY x, x;
ROLLBACK;
BEGIN;
CREATE TABLE x (x TEXT COLLATE "x");
INSERT INTO x VALUES ('а'), ('дз'), ('г'), ('Ф'), ('в'), ('Ё'), ('К'), ('Ы'), ('у'), ('ш'), ('д'), ('я'), ('б'), ('т'), ('е'), ('к'), ('х'), ('Ц'), ('Ў'), ('М'), ('Ь'), ('Т'), ('Н'), ('Я'), ('э'), ('ж'), ('П'), ('ў'), ('І'), ('р'), ('м'), ('Х'), ('Е'), ('дж'), ('н'), ('о'), ('л'), ('О'), ('ц'), ('У'), ('Э'), ('ь'), ('ё'), ('А'), ('Г'), ('С'), ('З'), ('ф'), ('ю'), ('Й'), ('п'), ('Л'), ('Д'), ('ч'), ('Р'), ('ы'), ('с'), ('з'), ('й'), ('Б'), ('і'), ('Ч'), ('В'), ('Ш'), ('Ж'), ('Ю');
SELECT x FROM x ORDER BY x, x;
ROLLBACK;
BEGIN;
CREATE TABLE x (x TEXT COLLATE "x");
INSERT INTO x VALUES ('З'), ('ш'), ('У'), ('Д'), ('П'), ('т'), ('Ш'), ('е'), ('А'), ('л'), ('Н'), ('О'), ('Л'), ('Й'), ('р'), ('п'), ('Ю'), ('Я'), ('я'), ('щ'), ('с'), ('з'), ('Ц'), ('Б'), ('ц'), ('о'), ('Т'), ('С'), ('ь'), ('к'), ('ф'), ('Ф'), ('ю'), ('м'), ('Р'), ('д'), ('й'), ('у'), ('Х'), ('а'), ('И'), ('ъ'), ('М'), ('б'), ('В'), ('Г'), ('г'), ('н'), ('Ь'), ('Ч'), ('К'), ('в'), ('ч'), ('Е'), ('и'), ('Ъ'), ('Щ'), ('х'), ('ж'), ('Ж');
SELECT x FROM x ORDER BY x, x;
ROLLBACK;
BEGIN;
CREATE TABLE x (x TEXT COLLATE "x");
INSERT INTO x VALUES ('ာဉ္'), ('ဥဓ္'), ('ဣန္'), ('ေါန္'), ('ဧဍ္'), ('ဠ'), ('ုဃ်'), ('ဥဃ်'), ('ေဆ်'), ('ဧဏ်'), ('ဍ္'), ('ိုသ္'), ('ဖ္'), ('ာဟ်'), ('ဣက်'), ('ဣဏ်'), ('ာဖ်'), ('ုဉ်'), ('ျွှ'), ('ဥတ္'), ('ါဃ်'), ('ဧဃ်'), ('ုတ္'), ('ေဋ္'), ('ဩောမ်'), ('ိဒ်'), ('ောဓ်'), ('ေဂ်'), ('ခ်'), ('ေဇ္'), ('တ်'), ('ဧစ္'), ('ါဋ္'), ('ဧခ်'), ('ဩောခ္'), ('ိဓ္'), ('ောည္'), ('ဩဖ္'), ('ာဂ်'), ('ိုသ်'), ('ိုဏ်'), ('ုထ်'), ('ိုဋ်'), ('ဣသ္'), ('ာဟ္'), ('ုံ့'), ('ဩဘ္'), ('ေါက်'), ('ုမ့်'), ('ဣထ္'), ('ဩောဒ်'), ('င်'), ('ဩောမ္'), ('အ်'), ('ဎ'), ('ဃ'), ('ုပ်'), ('ိုဃ်'), ('ိည္'), ('ဩင်'), ('ေါည္'), ('ဩဋ္'), ('ဣတ်'), ('ောပ္'), ('ဥဿ'), ('ေန္'), ('ဣဌ္'), ('စ်'), ('ေစ်'), ('ဩောဟ္'), ('ဍ'), ('ါဎ္'), ('ိုင်္'), ('ောဘ္'), ('ုံ'), ('ဩဃ်'), ('ါဠ်'), ('ဥဒ်'), ('ဟ'), ('ေဖ်'), ('ို'), ('ေဗ်'), ('ောဏ်'), ('ဣထ်'), ('ဓ်'), ('ိုခ္'), ('ောက်ျ'), ('ါရ်'), ('ာထ်'), ('ျ'), ('ိဈ်'), ('ေါဍ်'), ('ဩဏ္'), ('ာဂ္'), ('ာဆ်'), ('ိပ်'), ('ဥဃ္'), ('န္'), ('ောဍ်'), ('ဧဓ္'), ('ေါဍ္'), ('ေါဗ္'), ('ဣလ်'), ('ောဃ္'), ('ါ'), ('ါဍ္'), ('ာဒ်'), ('ဩောည္'), ('ေခ်'), ('ုထ္'), ('ေဘ်'), ('ိုစ်'), ('ောဈ်'), ('ဌ်'), ('ာဎ္'), ('ောဟ်'), ('ုအ်'), ('ုဓ္'), ('ောလ်'), ('ိမ်'), ('ဧဖ်'), ('ေဟ္'), ('္'), ('ောဝ်'), ('ၟ'), ('ဆ္'), ('ွ'), ('ုဟ္'), ('ါဒ္'), ('ေဗ္'), ('ိုဇ္'), ('ြှ'), ('ဩဃ္'), ('ဥ'), ('ဩယ္'), ('ါဓ်'), ('ဣယ္'), ('ယ်'), ('ာယ်'), ('ါအ်'), ('ဣတ္'), ('ိုမ္'), ('ါဗ္'), ('ဥဆ်'), ('ာလ်'), ('ေါပ္'), ('ဩောလ်'), ('ေမ္'), ('ိုအ်'), ('ိုဓ်'), ('ဩောဂ္'), ('ဣဎ္'), ('ြ'), ('ုက္'), ('ေမ်'), ('ေဍ်'), ('ောက်'), ('ဩ'), ('ေဒ်'), ('၎င်း'), ('ဧ'), ('ါဏ်'), ('ဩောဘ္'), ('ဣဗ္'), ('ါလ္'), ('ုယ္'), ('ုဟ်'), ('ာဗ္'), ('ုန္'), ('ခ္'), ('ောထ်'), ('ဥဇ်'), ('ေါဆ္'), ('ာဓ္'), ('ဧဓ်'), ('ဂ်'), ('ေထ်'), ('ဩောယ္'), ('ဋ'), ('ိုပ်'), ('ုံး'), ('ဩောဉ္'), ('ိသ္'), ('ဉ္'), ('ဩဎ္'), ('့'), ('ေါခ္'), ('ေါဗ်'), ('ဥဋ္'), ('ုဈ်'), ('ဌ'), ('ါဆ်'), ('ဥဍ်'), ('ဧဇ္'), ('ါထ်'), ('ဋ္'), ('ေက္'), ('ါခ္'), ('ရ'), ('ဩဓ္'), ('ေရ်'), ('ဩောဃ္'), ('ိခ္'), ('ဩောသ္'), ('ောအ်'), ('ုဆ္'), ('စ္'), ('ေါဎ်'), ('ာင်္'), ('ေါဘ်'), ('ါဓ္'), ('ဣလ္'), ('ဩဌ္'), ('ါယ္'), ('ိုဉ်'), ('ာန္'), ('ေါ'), ('ဥထ်'), ('ေင်'), ('ဩည္'), ('ဥဒ္'), ('ောဉ္'), ('ေါဈ်'), ('ဥဉ္'), ('ဥပ္'), ('ိဟ်'), ('ဏ်'), ('ေယ်'), ('ဩပ္'), ('ဥမ်'), ('ုဖ္'), ('ါဇ္'), ('ာဓ်'), ('ဩောဟ်'), ('ေဘ္'), ('ိဿ'), ('င်္'), ('ုစ္'), ('ဧဂ်'), ('ိဖ်'), ('ေါသ္'), ('ောဓ္'), ('ဥင္'), ('ဩောဗ်'), ('ါဂ္'), ('ာရ္'), ('ဂ'), ('ဩသ္'), ('ဈ်'), ('ုမ္'), ('ါဋ်'), ('ဧဆ္'), ('ဥစ္'), ('ိမ်း'), ('ောဉ်'), ('န်'), ('ဩယ်'), ('ာက္'), ('ုဓ်'), ('ါဘ္'), ('ါည်'), ('ဥရ်'), ('ှ'), ('ိုဍ္'), ('ိဎ်'), ('ေါဓ္'), ('ါမ္'), ('ောတ်'), ('ဧတ်'), ('ောဒ္'), ('ေအ်'), ('ဒ္'), ('ါဍ်'), ('ဩမ်'), ('ဣဍ္'), ('ာပ္'), ('ိုမ်'), ('ိုဈ်'), ('ိုယ္'), ('ဩောဍ္'), ('ာန်'), ('ဥစ်'), ('ဏ'), ('ိဃ္'), ('ိဏ်'), ('ဥဖ်'), ('ဩောဇ်'), ('ိဖ္'), ('ါရ္'), ('ထ္'), ('ိုဟ်'), ('ဧပ်'), ('ဥဘ္'), ('ိဟ္'), ('ာဍ္'), ('ဥက္'), ('ိန္'), ('ိုဎ္'), ('ောဒ်'), ('ဧဒ္'), ('ေါဘ္'), ('ုယ်'), ('ောဌ်'), ('ဩောထ္'), ('ေါဇ်'), ('ဥဇ္'), ('ဓ'), ('ာင်'), ('ေဎ်'), ('ါည္'), ('ေါဂ္'), ('ဧရ်'), ('ဧဃ္'), ('ဥခ္'), ('ျွ'), ('ြွှ'), ('ဩောဏ်'), ('ိုဆ္'), ('ိုရ္'), ('ဩရ္'), ('ါယ်'), ('ောဆ္'), ('ေါန်'), ('ေါဏ်'), ('ဩဎ်'), ('ဣဂ်'), ('ါက်'), ('ေါမ်'), ('ုခ်'), ('ဩဉ်'), ('ဩောတ်'), ('ေည္'), ('ေတ်'), ('ါဂ်'), ('ဥတ်'), ('ေဃ်'), ('ါက္'), ('ါဇ်'), ('က'), ('ိုလ္'), ('ိုဘ်'), ('ေဒ္'), ('ေဉ္'), ('ဥယ္'), ('ောမ်'), ('ဧလ္'), ('ဉ်'), ('ေဏ္'), ('ါင်္'), ('ဧက္'), ('ွှ'), ('လ္'), ('ဧသ်'), ('ောင်္'), ('ည္'), ('ိလ်'), ('ေည်'), ('ဣဍ်'), ('ါဖ္'), ('ေါဆ်'), ('ဩဗ်'), ('ဩောဘ်'), ('ောထ္'), ('ောရ္'), ('ိုန်'), ('န'), ('ေါဒ်'), ('ဧစ်'), ('ည'), ('လ'), ('ေဏ်'), ('ဘ္'), ('ဣည္'), ('ိဂ်'), ('ဩောန်'), ('ယ္'), ('ောယ္'), ('ေပ်'), ('ေါဟ္'), ('ါပ္'), ('ဣမ်'), ('ါဎ်'), ('ိုပ္'), ('ဧဘ္'), ('ောတ္'), ('ခ'), ('ဧဆ်'), ('ဉ'), ('ဩတ်'), ('ိုဝ်'), ('န်ုပ်'), ('ဇ်'), ('ည်'), ('မ်'), ('ဥင်'), ('ာဌ်'), ('ိဗ္'), ('ေယ္'), ('ုရ်'), ('ဩင္'), ('ိထ်'), ('ေက်'), ('ုဒ္'), ('ုဂ္'), ('ေဇ်'), ('ဤ'), ('ဩဇ္'), ('ုဎ်'), ('ိဒ္'), ('ဩောဒ္'), ('ဇ္'), ('ိုဌ်'), ('ုဍ်'), ('ေါဠ်'), ('ိုဗ္'), ('ဩဂ်'), ('ဩဍ္'), ('ိုဏ္'), ('ဧည်'), ('ဣဆ္'), ('ေါဒ္'), ('ဣသ်'), ('ိုဆ်'), ('ိဃ်'), ('ဣက္'), ('်'), ('ာဖ္'), ('ဨ'), ('ဩဓ်'), ('ဧဌ္'), ('ုက်'), ('ဥဗ်'), ('ာဇ္'), ('ေါတ္'), ('ဩောဏ္'), ('ုဠ်'), ('ာယ္'), ('ဣပ်'), ('ိလ္'), ('ော်'), ('ဧဉ္'), ('ောဌ္'), ('ါလ်'), ('ါဘ်'), ('ိုည်'), ('ေဍ္'), ('ေါခ်'), ('ေန်'), ('ဩောသ်'), ('ိယ္'), ('ဩက္'), ('ေါဇ္'), ('ိဠ်'), ('ာတ္'), ('သ'), ('သ္'), ('ဥဓ်'), ('ောရ်'), ('ောက္'), ('ံ'), ('ိုတ္'), ('ဧပ္'), ('ိုဖ်'), ('ဩောဇ္'), ('ဩောထ်'), ('ဣန်'), ('ောဃ်'), ('ပ္'), ('ိုန္'), ('ြွ'), ('ေလ်'), ('ဥဟ္'), ('ဧဗ်'), ('ဣဋ္'), ('ဩည်'), ('ဥဂ်'), ('ဧဗ္'), ('ဩဆ်'), ('ေါဖ္'), ('ိုဠ်'), ('ါစ္'), ('ောစ်'), ('ဣဃ်'), ('ေဉ်'), ('ါဌ္'), ('ေါရ်'), ('က္'), ('ုဏ်'), ('ောဖ္'), ('သ္မီ'), ('ာဉ်'), ('ာလ္'), ('ုဘ္'), ('ိခ်'), ('ဥမ္'), ('ိန်'), ('ဥဎ္'), ('ိုခ်'), ('ိည်'), ('ဩဒ္'), ('ဩက်'), ('ာရ်'), ('ဣဂ္'), ('ဣဎ်'), ('ဩဇ်'), ('ေဆ္'), ('ေဋ်'), ('ိတ္'), ('ောင်'), ('င'), ('ိုထ္'), ('ာဘ္'), ('ိဗ်'), ('ုဋ်'), ('ဌ္'), ('ါပ်'), ('ဥဆ္'), ('ေလ္'), ('ီ'), ('ာထ္'), ('ု'), ('ာဍ်'), ('ဩောခ်'), ('ာဋ္'), ('ောဇ္'), ('ဗ်'), ('ယ'), ('ဣဟ္'), ('ေါတ်'), ('ုဝ်'), ('ိအ်'), ('ိဉ်'), ('ါသ္'), ('ဥက်'), ('ုဇ္'), ('ဦ'), ('ဩောဖ်'), ('ဣဿ'), ('ာ'), ('ိုဟ္'), ('ိုဎ်'), ('ိဉ္'), ('ောဎ္'), ('ဍ်'), ('ောဎ်'), ('ိဎ္'), ('ာဏ္'), ('ိရ္'), ('ဩဖ်'), ('ိသ်'), ('ဩလ္'), ('ိဓ်'), ('ောဗ္'), ('ောစ္'), ('ုဉ္'), ('ုဒ်'), ('ုမ်း'), ('ုလ္'), ('ဣ'), ('ဣယ်'), ('ေါဝ်'), ('ဪ'), ('ဥဌ္'), ('ေဎ္'), ('ိုည္'), ('ိုဂ်'), ('ောန္'), ('ေါည်'), ('ဘ်'), ('ဆ်'), ('ိုဗ်'), ('ဧဖ္'), ('ောသ်'), ('ဩောတ္'), ('ဩထ်'), ('ိတ်'), ('ေါလ်'), ('ဩောင္'), ('ဩဒ်'), ('ေါဋ်'), ('ေါယ်'), ('ေတ္'), ('ေဓ္'), ('ဣခ္'), ('ာဃ္'), ('ေါဋ္'), ('ဣဏ္'), ('ိပ္'), ('ါတ္'), ('ါတ်'), ('ါဖ်'), ('ိုဉ္'), ('ဩဍ်'), ('ေဟ်'), ('ဣဘ်'), ('ႂ'), ('ဧဟ်'), ('ဿ'), ('ဥခ်'), ('ထ'), ('ဗ'), ('ဣခ်'), ('ဩဗ္'), ('ိစ္'), ('စ'), ('ာဃ်'), ('တ္'), ('ဧဂ္'), ('ါသ်'), ('ောဏ္'), ('ောခ္'), ('ိင်္'), ('ဥလ္'), ('ိုထ်'), ('ဣဋ်'), ('ဣဉ်'), ('ဈ'), ('ဘ'), ('ိဌ်'), ('ဇ'), ('ိုဇ်'), ('ိဇ်'), ('ဖ'), ('လက်ျာ'), ('ဥဉ်'), ('ိဏ္'), ('ဩဂ္'), ('ာဇ်'), ('ိုဌ္'), ('ဩောဓ္'), ('ဧဒ်'), ('ဥဂ္'), ('ဣဆ်'), ('ိုဒ်'), ('ုလ်'), ('ိက္'), ('ာဒ္'), ('ေါမ္'), ('ဧဎ္'), ('ဩလ်'), ('ဧမ်'), ('ါဝ်'), ('ေါ်'), ('ေဃ္'), ('မ'), ('ဥဖ္'), ('ောဂ်'), ('ဧခ္'), ('ာစ္'), ('သ်'), ('း'), ('ိုက္'), ('ဥလ်'), ('ေဿ'), ('ါဏ္'), ('ဩောဎ္'), ('ုန်'), ('ေဓ်'), ('ောဗ်'), ('ေ'), ('ေါဉ်'), ('ဝ်'), ('ဝ'), ('ောဆ်'), ('ဩန်'), ('ဧထ္'), ('ောဂ္'), ('ုည္'), ('ါဌ်'), ('ဧဟ္'), ('ဎ္'), ('ဥဏ်'), ('ဗ္'), ('ုဿ'), ('ဩောဋ္'), ('ိုဓ္'), ('ိဍ်'), ('ါစ်'), ('မ္'), ('ောဋ္'), ('ေခ္'), ('ဩောဉ်'), ('ဥဏ္'), ('ေသ်'), ('ိမ္'), ('ဠ်'), ('ေဝ်'), ('ဥဗ္'), ('ဥန်'), ('ဥယ်'), ('ေဌ္'), ('ောဟ္'), ('ဧဍ်'), ('ျှ'), ('ါဈ်'), ('ာည္'), ('ိုယ်'), ('ုခ္'), ('ေါဃ်'), ('ေါဌ္'), ('ာဎ်'), ('ါန္'), ('ဩောရ်'), ('ေါယ္'), ('ဣည်'), ('ါဟ်'), ('ုင်'), ('ဩောည်'), ('ုဌ်'), ('ဃ်'), ('ိုဂ္'), ('ေါအ်'), ('ေစ္'), ('ဩောဎ်'), ('ာဈ်'), ('ဣစ္'), ('ေါစ္'), ('ာဠ်'), ('ေါဎ္'), ('ိုင်'), ('ဩောပ္'), ('ိံ့'), ('၍'), ('ဏ္'), ('ာသ္'), ('ေထ္'), ('ုဆ်'), ('ိ'), ('ဆ'), ('ိုလ်'), ('ောပ်'), ('ပ်'), ('ေါစ်'), ('ိဍ္'), ('ဩောန္'), ('ိင်'), ('ောယ်'), ('ေါလ္'), ('ေါင်္'), ('ဩပ်'), ('ိက်'), ('ေပ္'), ('ိုဃ္'), ('ဒ်'), ('ဧဋ္'), ('ဩဘ်'), ('ေဂ္'), ('ါဉ်'), ('ဧင္'), ('ုဌ္'), ('ဧလ်'), ('ရ်'), ('ဥည္'), ('ေင်္'), ('အ'), ('လ်'), ('ုဍ္'), ('ဣဖ္'), ('ါဒ်'), ('ေဠ်'), ('ဩောစ်'), ('ဥုံ'), ('ဩစ္'), ('ေါသ်'), ('ါဟ္'), ('ုသ္'), ('ဩောဃ်'), ('ိဇ္'), ('ုပ္'), ('ာခ္'), ('ေါဟ်'), ('ဧဎ်'), ('ေသ္'), ('ဩတ္'), ('ိုဘ္'), ('ုတ်'), ('ေါဃ္'), ('ဩဆ္'), ('ဟ်'), ('ိဌ္'), ('ောဖ်'), ('ဩောဗ္'), ('ာက်'), ('ောန်'), ('ဥန္'), ('က်'), ('ဩောစ္'), ('ေဈ်'), ('ထ်'), ('ောဘ်'), ('ဧထ်'), ('ိထ္'), ('ဩောရ္'), ('ဣရ္'), ('ဩောလ္'), ('ိုဋ္'), ('ဣဒ်'), ('ေါဏ္'), ('ါခ်'), ('ဥဌ်'), ('ာခ်'), ('ဣင်'), ('ဣဓ္'), ('ဥရ္'), ('ရ္'), ('တ'), ('ဩဟ္'), ('ဥဎ်'), ('ောဠ်'), ('ောည်'), ('ိဘ်'), ('ာဘ်'), ('ိဋ်'), ('ောဍ္'), ('ေါပ်'), ('ဩဏ်'), ('ဩဋ်'), ('ုဎ္'), ('ိဝ်'), ('ုဗ်'), ('ုင်္'), ('ၞ'), ('ုစ်'), ('ိစ်'), ('ဥဟ်'), ('ဩောယ်'), ('ုမ်'), ('ါဗ်'), ('ုဘ်'), ('ဧင်'), ('ဣဖ်'), ('ုသ်'), ('ိယ်'), ('ောဋ်'), ('ဥထ္'), ('ေါဂ်'), ('ာဌ္'), ('ဩန္'), ('ာသ်'), ('ါဆ္'), ('ော'), ('ိုရ်'), ('ုဇ်'), ('ဣရ်'), ('ိဆ်'), ('ဣဇ္'), ('ုည်'), ('ဥသ္'), ('ါင်'), ('ပ'), ('ဧက်'), ('ဩောက်'), ('ဧည္'), ('ဣင္'), ('ဧသ္'), ('ဟ္'), ('ောလ္'), ('ာအ်'), ('ဣဃ္'), ('ဧန်'), ('၌'), ('ာမ်'), ('ာဏ်'), ('ဎ်'), ('ဧယ္'), ('ဩောဓ်'), ('ိုဖ္'), ('လ္ဘက်'), ('ဧဋ်'), ('ဩောဂ်'), ('ဲ'), ('ဩရ်'), ('ဩစ်'), ('ဧဘ်'), ('ါဉ္'), ('ဋ်'), ('ဩောဋ်'), ('ဣဓ်'), ('ိုဍ်'), ('ဥည်'), ('ေါဓ်'), ('ူ'), ('ဣဉ္'), ('ဂ္'), ('ိရ်'), ('ေါရ္'), ('ေါထ္'), ('ဩဉ္'), ('ာဋ်'), ('ဩဌ်'), ('ါဃ္'), ('ဩောဍ်'), ('ဣဟ်'), ('ောဇ်'), ('ဩောဌ်'), ('ာမ္'), ('ာည်'), ('ဥဍ္'), ('ဩောဆ်'), ('ုဋ္'), ('ဖ်'), ('ာဗ်'), ('ိုက်'), ('ဩောဖ္'), ('ိုတ်'), ('့း'), ('ဒ'), ('ၠ'), ('ိဂ္'), ('ဩောပ်'), ('ဣဒ္'), ('ဣဘ္'), ('ိံ'), ('ဧဇ်'), ('ဣမ္'), ('ဧမ္'), ('ောမ္'), ('ဥပ်'), ('ဧန္'), ('ဩမ္'), ('ဧဉ်'), ('ဣပ္'), ('ဣဌ်'), ('ိမ့်'), ('ာဝ်'), ('ုဂ်'), ('ဩောဌ္'), ('ိဘ္'), ('ိုစ္'), ('ာတ်'), ('ဥဘ်'), ('ုဃ္'), ('ဓ္'), ('ါန်'), ('ဩခ္'), ('၏'), ('ာဆ္'), ('ဥဋ်'), ('ဩသ်'), ('ဧယ်'), ('ဧတ္'), ('ေရ္'), ('ုရ္'), ('ဧရ္'), ('ိဆ္'), ('ဣဗ်'), ('ုဗ္'), ('ဩောဆ္'), ('ဧဏ္'), ('ာစ်'), ('ဩခ်'), ('ေဖ္'), ('ထ္မင်း'), ('ေါဌ်'), ('ဃ္'), ('ဩောင်'), ('ဣဇ်'), ('ေါင်'), ('ုဖ်'), ('ိံး'), ('ဩောက္'), ('ဥသ်'), ('ါထ္'), ('ဩထ္'), ('ဣစ်'), ('ိဋ္'), ('ေဌ်'), ('ေါထ်'), ('ေါဖ်'), ('ေါက္'), ('ောသ္'), ('ေါဉ္'), ('ိုဒ္'), ('ုဏ္'), ('ဧဌ်'), ('ာပ်'), ('ောခ်'), ('ါမ်'), ('ဩဟ်');
SELECT x FROM x ORDER BY x, x;
ROLLBACK;
BEGIN;
CREATE TABLE x (x TEXT COLLATE "x");
INSERT INTO x VALUES ('Ꮡ'), ('ꮇ'), ('Ꮖ'), ('ꭰ'), ('Ꮷ'), ('ꮄ'), ('Ꭸ'), ('Ꮻ'), ('ꮑ'), ('Ꮘ'), ('Ꮊ'), ('ꮌ'), ('Ᏸ'), ('Ᏹ'), ('ꮆ'), ('Ꭶ'), ('Ꮑ'), ('Ꭼ'), ('ꭸ'), ('ꮠ'), ('ꮐ'), ('ꮟ'), ('Ꮿ'), ('Ꮌ'), ('Ꮦ'), ('Ꮥ'), ('ꮰ'), ('ꭲ'), ('Ꮩ'), ('Ꮭ'), ('Ꮚ'), ('ꮽ'), ('ᏹ'), ('Ꮆ'), ('Ꭲ'), ('ꮢ'), ('ꭷ'), ('Ᏻ'), ('Ꮛ'), ('ꮚ'), ('ꮉ'), ('ꮕ'), ('ꮵ'), ('Ꮓ'), ('Ꮯ'), ('Ꮄ'), ('ꮞ'), ('Ᏺ'), ('ꮻ'), ('ꮍ'), ('ꮗ'), ('Ꮵ'), ('Ꭵ'), ('Ꮃ'), ('ᏸ'), ('ꮘ'), ('Ꮶ'), ('ꮸ'), ('Ꮧ'), ('ꮒ'), ('ꮓ'), ('ꮊ'), ('ꭺ'), ('ꮶ'), ('ᏺ'), ('ꮃ'), ('ꮳ'), ('Ꮲ'), ('Ꮸ'), ('Ꮣ'), ('ꮦ'), ('ꭵ'), ('ꮬ'), ('ꭴ'), ('Ꮈ'), ('Ꮂ'), ('ꭽ'), ('Ꮾ'), ('ꮀ'), ('ꮅ'), ('ꮴ'), ('ꮏ'), ('Ꭷ'), ('Ꮽ'), ('Ꮉ'), ('Ꭾ'), ('ꮺ'), ('Ꭺ'), ('ꮱ'), ('Ꮱ'), ('ꭶ'), ('ꭿ'), ('Ꮗ'), ('ꭼ'), ('ꮧ'), ('Ꭿ'), ('Ꮜ'), ('Ꮒ'), ('ꮮ'), ('Ꮏ'), ('Ꮋ'), ('Ꮍ'), ('ꭹ'), ('Ꮁ'), ('Ꮹ'), ('ꮭ'), ('Ꭴ'), ('ꮁ'), ('Ꮼ'), ('ꮪ'), ('Ꮤ'), ('ꭻ'), ('Ꭻ'), ('Ꮫ'), ('Ꮺ'), ('ᏻ'), ('Ꮎ'), ('ꮥ'), ('ꮙ'), ('Ꮰ'), ('ꮡ'), ('Ꮠ'), ('ꮔ'), ('Ꮙ'), ('ꮝ'), ('ꮨ'), ('ꭱ'), ('Ꮢ'), ('ꮈ'), ('Ꮨ'), ('Ꮇ'), ('Ᏼ'), ('ꮯ'), ('Ꭽ'), ('Ꭱ'), ('Ꮳ'), ('Ꮔ'), ('Ꮝ'), ('Ꭹ'), ('Ꮬ'), ('ꮹ'), ('Ꮟ'), ('ꮫ'), ('ꮼ'), ('Ꮕ'), ('ꮖ'), ('Ꮪ'), ('ꭳ'), ('Ꮮ'), ('ᏼ'), ('ꮂ'), ('ꮿ'), ('Ꭳ'), ('ꮲ'), ('Ꮀ'), ('Ꮐ'), ('ꮤ'), ('Ꮴ'), ('Ꭰ'), ('ꮷ'), ('ꮎ'), ('ꮋ'), ('ꮜ'), ('Ꮞ'), ('ꭾ'), ('ꮣ'), ('ꮾ'), ('ꮛ'), ('Ꮅ'), ('ꮩ');
SELECT x FROM x ORDER BY x, x;
ROLLBACK;
BEGIN;
CREATE TABLE x (x TEXT COLLATE "x");
INSERT INTO x VALUES ('Ǔ'), ('Ğ'), ('E'), ('Õ'), ('Ḩ'), ('G'), ('Ṋ'), ('Ǵ'), ('Ṉ'), ('Ẇ'), ('Ẏ'), ('Ľ'), ('Ù'), ('Ŭ'), ('Ȋ'), ('Ổ'), ('Ṵ'), ('Y'), ('Ṣ'), ('Ĵ'), ('Ḽ'), ('È'), ('Ā'), ('W'), ('Ű'), ('Ẹ'), ('Ǎ'), ('Ṑ'), ('Ȩ'), ('Ṃ'), ('Ż'), ('Ḗ'), ('Ǡ'), ('Ī'), ('Ǩ'), ('Ǧ'), ('Ẩ'), ('Ễ'), ('M'), ('Ớ'), ('Ẋ'), ('Ṡ'), ('Ợ'), ('Ọ'), ('Ḑ'), ('X'), ('Ố'), ('Š'), ('Ḋ'), ('Ȕ'), ('Ȗ'), ('Ỵ'), ('Ž'), ('F'), ('Ÿ'), ('Ề'), ('Z'), ('Ȉ'), ('Ẅ'), ('L'), ('Ř'), ('Ĩ'), ('Ḳ'), ('Ậ'), ('Ṕ'), ('Ȱ'), ('Ử'), ('Ȳ'), ('Ļ'), ('Ǹ'), ('Å'), ('Ằ'), ('Ỏ'), ('Ă'), ('Ṱ'), ('Ḝ'), ('Ĉ'), ('Ý'), ('U'), ('Ǜ'), ('Ṹ'), ('P'), ('Ĕ'), ('Č'), ('Q'), ('Ḓ'), ('Ư'), ('Ȏ'), ('N'), ('Ṥ'), ('Ę'), ('Ȃ'), ('Ȧ'), ('İ'), ('Î'), ('Ȇ'), ('Ǐ'), ('Û'), ('Ṽ'), ('Ṓ'), ('À'), ('Ẳ'), ('Ṗ'), ('Ỷ'), ('S'), ('Ộ'), ('Ŏ'), ('R'), ('Ỡ'), ('Ŕ'), ('Ū'), ('Ṿ'), ('Ǘ'), ('Ė'), ('Ấ'), ('Ḥ'), ('Ĭ'), ('Ò'), ('Ě'), ('Ų'), ('Ş'), ('Ừ'), ('Ḧ'), ('Ỳ'), ('Ȁ'), ('Ì'), ('Ṷ'), ('Ḇ'), ('Ș'), ('Ȯ'), ('O'), ('Ự'), ('Ḅ'), ('Ặ'), ('Ḉ'), ('Ŗ'), ('Ï'), ('Ắ'), ('Ú'), ('Ô'), ('Ȓ'), ('Á'), ('Ĥ'), ('Ḏ'), ('Ṙ'), ('Ȭ'), ('Ẁ'), ('Ņ'), ('Ō'), ('Ḯ'), ('Ế'), ('Ṻ'), ('J'), ('I'), ('C'), ('Ṇ'), ('Ẫ'), ('Ṩ'), ('B'), ('Ṝ'), ('Ẉ'), ('Ǖ'), ('Ĺ'), ('Ŝ'), ('Ṛ'), ('Ë'), ('Ê'), ('Ḙ'), ('Ẑ'), ('Ü'), ('Ỗ'), ('Ĝ'), ('Ḃ'), ('Ầ'), ('Ǭ'), ('Ṫ'), ('Ȅ'), ('Ź'), ('Ḿ'), ('D'), ('Ŵ'), ('Ụ'), ('Ḫ'), ('T'), ('Ȑ'), ('Ċ'), ('Ḵ'), ('Ṯ'), ('Ģ'), ('Ț'), ('Ờ'), ('Â'), ('Ď'), ('Ã'), ('Ȟ'), ('Ḛ'), ('Ǻ'), ('Ů'), ('Í'), ('Ć'), ('Ṍ'), ('Ḁ'), ('Ö'), ('Ň'), ('Ũ'), ('Ṅ'), ('Ķ'), ('Ő'), ('Ť'), ('K'), ('Ả'), ('Ṏ'), ('Ể'), ('Ǟ'), ('Ḱ'), ('Ą'), ('A'), ('Ȍ'), ('Ủ'), ('Ē'), ('Ẃ'), ('Ẍ'), ('Ó'), ('Ẵ'), ('Ñ'), ('Ơ'), ('Ẽ'), ('Ḹ'), ('Ţ'), ('Ǚ'), ('Ṭ'), ('H'), ('V'), ('Ệ'), ('Ỉ'), ('Ḭ'), ('Ṟ'), ('Ǒ'), ('Ä'), ('Ṳ'), ('Ạ'), ('Ḍ'), ('Ç'), ('Ồ'), ('Ȫ'), ('Ṧ'), ('Ẻ'), ('Į'), ('Ń'), ('Ỹ'), ('É'), ('Ġ'), ('Ḻ'), ('Ǫ'), ('Ứ'), ('Ṁ'), ('Ữ'), ('Ở'), ('Ẕ'), ('Ḣ'), ('Ŷ'), ('Ḷ'), ('Ị'), ('Ḕ'), ('Ḟ'), ('Ś'), ('Ḡ'), ('Ẓ');
SELECT x FROM x ORDER BY x, x;
ROLLBACK;
BEGIN;
CREATE TABLE x (x TEXT COLLATE "x");
INSERT INTO x VALUES ('Ḁ̈'), ('Ǜ'), ('ǘ'), ('ḁ̊'), ('S'), ('ǣ'), ('Ŋ'), ('Ǫ̈'), ('Ǥ'), ('F'), ('Ʒ'), ('l'), ('š'), ('ǿ'), ('z'), ('b'), ('h'), ('Ø'), ('ȫ'), ('ọ̈'), ('Ŧ'), ('Ö'), ('ų̈'), ('C'), ('ự̈'), ('Ṳ̈'), ('Ǻ'), ('E'), ('ǚ'), ('M'), ('ạ̊'), ('Ǟ'), ('y'), ('n'), ('e'), ('j'), ('ǽ'), ('Ạ̈'), ('Q'), ('X'), ('ŧ'), ('W'), ('o'), ('ǫ̈'), ('æ'), ('ṵ̈'), ('ǥ'), ('ợ̈'), ('ư̈'), ('B'), ('Ơ̈'), ('ṳ̈'), ('Ǘ'), ('N'), ('Å'), ('Y'), ('v'), ('p'), ('đ'), ('å'), ('u'), ('a'), ('ǻ'), ('Ạ̊'), ('ụ̈'), ('Ǯ'), ('Æ'), ('Z'), ('V'), ('Ọ̈'), ('ö'), ('R'), ('ǜ'), ('Ü'), ('ǖ'), ('Ȫ'), ('G'), ('c'), ('m'), ('ž'), ('T'), ('Ą̈'), ('A'), ('q'), ('ʒ'), ('ä'), ('ą̈'), ('Ǽ'), ('Ợ̈'), ('Đ'), ('Ą̊'), ('Ǣ'), ('w'), ('U'), ('Ḁ̊'), ('Ǚ'), ('ạ̈'), ('L'), ('I'), ('ǟ'), ('Ž'), ('Š'), ('Ự̈'), ('Ä'), ('K'), ('s'), ('Ǖ'), ('f'), ('H'), ('Ụ̈'), ('k'), ('D'), ('ơ̈'), ('ǯ'), ('ḁ̈'), ('P'), ('O'), ('Ư̈'), ('Ṵ̈'), ('ṷ̈'), ('Ṷ̈'), ('x'), ('d'), ('g'), ('J'), ('ü'), ('i'), ('r'), ('ą̊'), ('t'), ('ø'), ('Ų̈'), ('Ǿ'), ('ŋ');
SELECT x FROM x ORDER BY x, x;
ROLLBACK;
BEGIN;
CREATE TABLE x (x TEXT COLLATE "x");
INSERT INTO x VALUES ('ί'), ('Ύ'), ('ϴ'), ('Ί'), ('ΐ'), ('ι'), ('ϑ'), ('Υ'), ('α'), ('Ο'), ('υ'), ('ή'), ('Α'), ('Τ'), ('ξ'), ('ά'), ('Κ'), ('χ'), ('ϰ'), ('ρ'), ('ψ'), ('β'), ('Ή'), ('Ϊ'), ('ω'), ('γ'), ('Λ'), ('Δ'), ('μ'), ('Ω'), ('θ'), ('σ'), ('ό'), ('Β'), ('δ'), ('ε'), ('ϐ'), ('ύ'), ('Ι'), ('ϕ'), ('Ε'), ('ο'), ('Έ'), ('ΰ'), ('Θ'), ('Ρ'), ('Η'), ('Π'), ('Σ'), ('ϱ'), ('ϖ'), ('Ώ'), ('Ό'), ('ν'), ('Γ'), ('Χ'), ('ζ'), ('ϋ'), ('Ν'), ('Ξ'), ('έ'), ('ϊ'), ('Φ'), ('Μ'), ('Ψ'), ('τ'), ('Ά'), ('Ϋ'), ('η'), ('ώ'), ('κ'), ('λ'), ('φ'), ('π'), ('Ζ'), ('ς'), ('µ'), ('ϵ');
SELECT x FROM x ORDER BY x, x;
ROLLBACK;
BEGIN;
CREATE TABLE x (x TEXT COLLATE "x");
INSERT INTO x VALUES ('ặ'), ('Ț'), ('ấ'), ('N'), ('o'), ('ă'), ('F'), ('Ầ'), ('G'), ('ằ'), ('B'), ('ẩ'), ('Ẳ'), ('R'), ('J'), ('O'), ('Ą̆'), ('Ţ'), ('f'), ('e'), ('ḁ̆'), ('D'), ('Ẫ'), ('M'), ('C'), ('Ẵ'), ('d'), ('â'), ('ą̆'), ('Į̂'), ('Ị̂'), ('ầ'), ('T'), ('k'), ('Î'), ('u'), ('Ắ'), ('Ă'), ('s'), ('i'), ('K'), ('r'), ('p'), ('z'), ('Ấ'), ('v'), ('S'), ('ḁ̂'), ('Â'), ('ậ'), ('h'), ('Ậ'), ('H'), ('E'), ('Ḁ̆'), ('ẫ'), ('ẵ'), ('ḭ̂'), ('ţ'), ('ț'), ('L'), ('b'), ('V'), ('Ằ'), ('ą̂'), ('A'), ('P'), ('Ą̂'), ('Ḁ̂'), ('c'), ('Ẩ'), ('ắ'), ('l'), ('Ş'), ('n'), ('t'), ('ş'), ('X'), ('Z'), ('g'), ('î'), ('x'), ('U'), ('a'), ('Ặ'), ('Ș'), ('į̂'), ('j'), ('I'), ('m'), ('ș'), ('ẳ'), ('ị̂'), ('Ḭ̂');
SELECT x FROM x ORDER BY x, x;
ROLLBACK;
BEGIN;
CREATE TABLE x (x TEXT COLLATE "x");
INSERT INTO x VALUES ('г'), ('н'), ('Ш'), ('М'), ('з'), ('Ц'), ('З'), ('ж'), ('у'), ('п'), ('П'), ('к'), ('Ч'), ('Д'), ('У'), ('Я'), ('ч'), ('Ю'), ('а'), ('х'), ('Щ'), ('І'), ('Т'), ('о'), ('Ь'), ('л'), ('ї'), ('В'), ('Ф'), ('і'), ('р'), ('и'), ('Ж'), ('Г'), ('К'), ('с'), ('й'), ('м'), ('Л'), ('Й'), ('И'), ('Ї'), ('Н'), ('б'), ('Б'), ('ґ'), ('ю'), ('С'), ('О'), ('Ґ'), ('ш'), ('щ'), ('Е'), ('я'), ('А'), ('ь'), ('д'), ('ꙶ'), ('ф'), ('Є'), ('ʼ'), ('є'), ('ц'), ('т'), ('Р'), ('Х'), ('в'), ('е');
SELECT x FROM x ORDER BY x, x;
ROLLBACK;
BEGIN;
CREATE TABLE x (x TEXT COLLATE "x");
INSERT INTO x VALUES ('X'), ('c'), ('é'), ('U'), ('R'), ('t'), ('a'), ('N'), ('d'), ('Ṇ̃'), ('á'), ('g'), ('ṋ̃'), ('r'), ('T'), ('K'), ('I'), ('Z'), ('q'), ('M'), ('S'), ('j'), ('Ṋ̃'), ('B'), ('u'), ('f'), ('i'), ('G'), ('p'), ('Ņ̃'), ('Á'), ('O'), ('É'), ('ñ'), ('P'), ('s'), ('F'), ('W'), ('Ṉ̃'), ('Ó'), ('ü'), ('D'), ('V'), ('m'), ('e'), ('C'), ('ṇ̃'), ('b'), ('z'), ('w'), ('h'), ('Ú'), ('Q'), ('H'), ('k'), ('E'), ('J'), ('L'), ('í'), ('l'), ('Ñ'), ('x'), ('o'), ('n'), ('Y'), ('Ü'), ('ú'), ('Í'), ('A'), ('y'), ('ņ̃'), ('ṉ̃'), ('ó'), ('v');
SELECT x FROM x ORDER BY x, x;
ROLLBACK;
BEGIN;
CREATE TABLE x (x TEXT COLLATE "x");
INSERT INTO x VALUES ('ớ'), ('Ó'), ('m'), ('f'), ('Ṣ́'), ('Ł'), ('ṇ́'), ('k'), ('b'), ('a'), ('ṉ́'), ('l'), ('C'), ('e'), ('L'), ('Ẕ̇'), ('n'), ('w'), ('ș́'), ('S'), ('r'), ('T'), ('ẕ́'), ('Ș́'), ('F'), ('ḉ'), ('ņ́'), ('N'), ('Ṋ́'), ('Ń'), ('ş́'), ('Ẕ́'), ('o'), ('Ṥ'), ('Ş́'), ('ẓ́'), ('Ẓ́'), ('p'), ('Ą'), ('s'), ('u'), ('ṋ́'), ('ó'), ('Ọ́'), ('y'), ('M'), ('Ņ́'), ('Ḉ'), ('g'), ('E'), ('Ś'), ('ợ́'), ('Ć'), ('h'), ('Ę'), ('ṥ'), ('ą'), ('j'), ('H'), ('Ớ'), ('Ż'), ('ọ́'), ('R'), ('W'), ('t'), ('c'), ('Ṉ́'), ('P'), ('ṣ́'), ('ę'), ('ż'), ('ś'), ('O'), ('U'), ('ł'), ('K'), ('d'), ('D'), ('G'), ('A'), ('Ẓ̇'), ('ẓ̇'), ('Ǫ́'), ('J'), ('Z'), ('Ṇ́'), ('ẕ̇'), ('Ź'), ('ź'), ('Ợ́'), ('i'), ('B'), ('ǫ́'), ('ń'), ('z'), ('ć'), ('I'), ('Y');
SELECT x FROM x ORDER BY x, x;
ROLLBACK;
BEGIN;
CREATE TABLE x (x TEXT COLLATE "x");
INSERT INTO x VALUES ('佳'), ('苛'), ('嫁'), ('茄'), ('迦'), ('暇'), ('軻'), ('賈'), ('跏'), ('痂'), ('伽'), ('訶'), ('價'), ('嘉'), ('稼'), ('哥'), ('柯'), ('街'), ('架'), ('枷'), ('歌'), ('袈'), ('駕'), ('可'), ('呵'), ('加'), ('珂'), ('家'), ('假');
SELECT x FROM x ORDER BY x, x;
ROLLBACK;
BEGIN;
CREATE TABLE x (x TEXT COLLATE "x");
INSERT INTO x VALUES ('Ǻ'), ('i'), ('Ǫ̂'), ('Æ'), ('ự̋'), ('ọ̈'), ('ü'), ('ẘ'), ('Ǜ'), ('Ư̋'), ('ǫ̈'), ('ụ̈'), ('W'), ('ǻ'), ('ä'), ('Ơ̈'), ('Ǣ'), ('ṷ̋'), ('Ổ'), ('Ọ̋'), ('C'), ('ǫ̂'), ('ȫ'), ('ǣ'), ('ṵ̋'), ('ǟ'), ('Å'), ('ḁ̊'), ('ẇ'), ('Ä'), ('Œ'), ('w'), ('h'), ('Ơ̋'), ('Ṷ̋'), ('Ǫ̋'), ('ự̈'), ('d'), ('ư̋'), ('j'), ('ą̊'), ('A'), ('D'), ('Ǚ'), ('G'), ('ǿ'), ('ṳ̈'), ('Ȫ'), ('ų̈'), ('Ṵ̋'), ('Þ'), ('v'), ('ǫ̋'), ('ẉ'), ('ợ̈'), ('ụ̋'), ('ǖ'), ('ọ̋'), ('æ'), ('b'), ('Ṽ'), ('ǘ'), ('k'), ('ő'), ('Y'), ('Ṵ̈'), ('Ḁ̊'), ('ẃ'), ('Ợ̂'), ('ṷ̈'), ('p'), ('Đ'), ('r'), ('s'), ('ḁ̈'), ('Ạ̊'), ('Ụ̋'), ('Ỗ'), ('ǽ'), ('n'), ('Ḁ̈'), ('N'), ('F'), ('Ǟ'), ('ą̈'), ('t'), ('Z'), ('Ø'), ('e'), ('O'), ('ẅ'), ('đ'), ('U'), ('ẁ'), ('Ự̋'), ('Ǘ'), ('Ọ̈'), ('K'), ('Ǽ'), ('ű'), ('Ṿ'), ('L'), ('ổ'), ('ư̈'), ('l'), ('Ạ̈'), ('Ẉ'), ('q'), ('å'), ('ǚ'), ('Ą̊'), ('ơ̂'), ('ǜ'), ('ṳ̋'), ('Ợ̋'), ('Ự̈'), ('V'), ('Ǫ̈'), ('Ę'), ('ę'), ('R'), ('ạ̊'), ('Ű'), ('a'), ('f'), ('I'), ('Ẃ'), ('Ẇ'), ('ỗ'), ('Ų̋'), ('T'), ('Ṷ̈'), ('Ü'), ('Ẅ'), ('ô'), ('Ô'), ('Ợ̈'), ('Ö'), ('Ṳ̋'), ('ồ'), ('Ǖ'), ('À'), ('Ṳ̈'), ('c'), ('Ų̈'), ('u'), ('z'), ('ø'), ('X'), ('Ǿ'), ('ộ'), ('Q'), ('ợ̋'), ('x'), ('œ'), ('ơ̋'), ('é'), ('B'), ('m'), ('ạ̈'), ('Ð'), ('Ụ̈'), ('g'), ('Ą̈'), ('ơ̈'), ('Ő'), ('ố'), ('þ'), ('y'), ('É'), ('ð'), ('ŵ'), ('E'), ('Ẁ'), ('Ư̈'), ('Ộ'), ('ų̋'), ('o'), ('J'), ('H'), ('Ŵ'), ('ö'), ('Ơ̂'), ('P'), ('Ố'), ('Ồ'), ('à'), ('ṵ̈'), ('M'), ('ợ̂'), ('S');
SELECT x FROM x ORDER BY x, x;
ROLLBACK;
BEGIN;
CREATE TABLE x (x TEXT COLLATE "x");
INSERT INTO x VALUES ('ê'), ('Æ'), ('R'), ('o'), ('m'), ('g'), ('r'), ('I'), ('È'), ('ç'), ('i'), ('Z'), ('ù'), ('É'), ('Î'), ('M'), ('X'), ('f'), ('a'), ('Ô'), ('ÿ'), ('J'), ('d'), ('C'), ('h'), ('y'), ('œ'), ('e'), ('k'), ('w'), ('è'), ('N'), ('A'), ('K'), ('u'), ('î'), ('ï'), ('é'), ('T'), ('E'), ('S'), ('L'), ('s'), ('ü'), ('ô'), ('U'), ('G'), ('n'), ('Ç'), ('ë'), ('P'), ('x'), ('q'), ('Ù'), ('H'), ('V'), ('c'), ('Ê'), ('û'), ('Ë'), ('j'), ('t'), ('Y'), ('v'), ('F'), ('Ÿ'), ('p'), ('æ'), ('Ü'), ('Û'), ('l'), ('à'), ('O'), ('W'), ('Q'), ('B'), ('Ï'), ('À'), ('b'), ('Œ'), ('Â'), ('z'), ('D'), ('â');
SELECT x FROM x ORDER BY x, x;
CREATE TABLE x (x TEXT COLLATE x);
CREATE TABLE x (x INT COLLATE x);
CREATE TABLE x (x TEXT COLLATE x.x);
CREATE TABLE x (x TEXT COLLATE 1);
CREATE TABLE x (x TEXT COLLATE 'hello');
PRAGMA x = 'blabla';
PRAGMA x;
CREATE TABLE x (x INT PRIMARY KEY, x INT, x REAL, x TEXT, x INT, x REAL, x TEXT);
INSERT INTO x VALUES (0, 22, 43.95999908447265625, 'yoyca', 0, 80.1399993896484375, 'eoenc');
INSERT INTO x VALUES (1, 51, 34.900001525878905361, 'zeqhw', 44, 13.489999771118164062, 'easox');
INSERT INTO x VALUES (2, 42, 59.759998321533203125, 'ylshk', 15, 4.4499998092651367187, 'xgrvy');
INSERT INTO x VALUES (3, 67, 90.660003662109378552, 'rnadc', 77, 50.360000610351560723, 'knooo');
INSERT INTO x VALUES (4, 48, 53.099998474121097302, 'txhlv', 75, 9.770000457763671875, 'gvudx');
INSERT INTO x VALUES (5, 18, 40.580001831054683947, 'wgfxz', 96, 12.5, 'mmxbj');
INSERT INTO x VALUES (6, 84, 24.239999771118165838, 'ttodp', 31, 72.999999999999998223, 'wujjl');
INSERT INTO x VALUES (7, 86, 67.449996948242185723, 'mwgbl', 38, 10.479999542236329013, 'ypcha');
INSERT INTO x VALUES (8, 68, 38.470001220703125, 'kaoqh', 8, 41.500000000000003552, 'fyhzl');
INSERT INTO x VALUES (9, 29, 19.600000381469726562, 'kbenw', 20, 19.579999923706054687, 'gsszq');
SELECT x FROM x WHERE (x BETWEEN 67 AND 0 OR x > 17 AND (x > 3));
CREATE TABLE x (x INT, x INT CHECK (x + x < 5), x INT);
INSERT INTO x VALUES (1, 2, 4);
UPDATE x SET x = 7;
UPDATE x SET x = x, x = 3;
UPDATE x SET x = x, x = 3;
UPDATE x SET x = x, x = 10;
UPDATE x SET x = x, x = 10;
UPDATE x SET x = 2;
UPDATE x SET x = 10;
SELECT * FROM x;
DROP TABLE x;
CREATE TABLE x (x INT NOT NULL, x INT NOT NULL);
INSERT INTO x VALUES (1, 2);
UPDATE x SET x = 3;
UPDATE x SET x = NULL;
UPDATE x SET x = NULL;
SELECT * FROM x;
CREATE TABLE x (x INT NOT NULL);
INSERT INTO x VALUES (3);
INSERT INTO x VALUES (NULL);
UPDATE x SET x = 4;
UPDATE x SET x = NULL;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (3), (4), (5), (NULL);
INSERT INTO x (x) SELECT * FROM x;
INSERT INTO x (x) SELECT * FROM x WHERE NOT x IS NULL;
SELECT * FROM x ORDER BY x;
UPDATE x SET x = 4 WHERE x > 4;
SELECT * FROM x ORDER BY x;
PRAGMA x;
PRAGMA x;
INSERT INTO x VALUES ({'x': 43});
INSERT INTO x VALUES ({'x': 42});
DROP TABLE x;
DROP TABLE x;
INSERT INTO x VALUES ({'x': 43});
CREATE TABLE x (x INT CHECK (x < 5));
INSERT INTO x VALUES (3);
INSERT INTO x VALUES (7);
INSERT INTO x VALUES (NULL);
SELECT * FROM x;
DROP TABLE x;
CREATE TABLE x (x INT CHECK (x + x < 10), x INT);
INSERT INTO x VALUES (3, 3);
INSERT INTO x VALUES (5, 5);
INSERT INTO x VALUES (3, 3), (5, 5);
SELECT * FROM x;
CREATE TABLE x (x INT, CHECK (x > (2 * (SELECT (1)))));
CREATE TABLE x (x INT CHECK (x > (SELECT 42)), x INT);
CREATE TABLE x (x INT CHECK (x > SUM(x)), x INT);
CREATE TABLE x (x INT CHECK (x < 10), x INT);
CREATE TABLE x (x INT CHECK (x.x < 10), x INT);
CREATE TABLE x (x INT CHECK (x.x < 10), x INT);
PRAGMA x;
CREATE TABLE x (x INT, x INT, x INT, PRIMARY KEY (x), UNIQUE (x), UNIQUE (x));
CREATE TABLE x (x INT, x INT, x INT, FOREIGN KEY (x) REFERENCES x (x), FOREIGN KEY (x) REFERENCES x (x), FOREIGN KEY (x) REFERENCES x (x));
INSERT INTO x VALUES (1, 1, 1);
INSERT INTO x VALUES (1, 1, 1);
INSERT INTO x VALUES (2, 1, 1);
INSERT INTO x VALUES (1, 2, 1);
INSERT INTO x VALUES (1, 1, 2);
INSERT INTO x VALUES (1, 1, 1);
INSERT INTO x VALUES (2, NULL, NULL);
INSERT INTO x VALUES (2, NULL, NULL);
DELETE FROM x WHERE x = 2;
DELETE FROM x WHERE x = 2;
DELETE FROM x WHERE x = 2;
INSERT INTO x VALUES (2, 3, NULL);
INSERT INTO x VALUES (1, 3, 1);
DELETE FROM x WHERE x = 2;
DELETE FROM x WHERE x = 2 OR x = 3;
DELETE FROM x WHERE x = 2;
INSERT INTO x VALUES (2, NULL, 4);
INSERT INTO x VALUES (1, 1, 4);
DELETE FROM x WHERE x = 2;
CREATE TABLE x (x INT, PRIMARY KEY (x));
CREATE TABLE x (x INT, FOREIGN KEY (x) REFERENCES x (x));
SELECT COUNT(*) FROM x WHERE x = 'NOT NULL';
PRAGMA x;
CREATE TABLE x (x INT NOT NULL, CONSTRAINT x PRIMARY KEY (x));
CREATE TABLE x (x INT REFERENCES x (x));
DROP TABLE x;
DROP TABLE x;
CREATE TABLE x (x INT PRIMARY KEY);
CREATE TABLE x (x INT REFERENCES x (x));
PRAGMA x;
CREATE TABLE x (x INT PRIMARY KEY);
CREATE TABLE x (x INT REFERENCES x);
INSERT INTO x VALUES (1);
INSERT INTO x VALUES (1);
INSERT INTO x VALUES (1);
DROP TABLE x;
DROP TABLE x;
CREATE TABLE x (x INT);
CREATE TABLE x (x INT REFERENCES x);
DROP TABLE x;
CREATE TABLE x (x INT, x INT, PRIMARY KEY (x, x));
CREATE TABLE x (x INT REFERENCES x);
PRAGMA x;
CREATE TABLE x (x TEXT PRIMARY KEY, x TEXT, FOREIGN KEY (x) REFERENCES x);
CREATE TABLE x (x TEXT PRIMARY KEY, x TEXT UNIQUE NOT NULL);
CREATE TABLE x (x TEXT PRIMARY KEY, x TEXT, FOREIGN KEY (x, x) REFERENCES x);
CREATE TABLE x (x TEXT PRIMARY KEY, x TEXT, FOREIGN KEY (x) REFERENCES x);
INSERT INTO x VALUES (1, 1);
INSERT INTO x VALUES (1, 1);
INSERT INTO x VALUES (1, 1);
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
CREATE TABLE x (x TEXT, x TEXT NOT NULL);
CREATE TABLE x (x TEXT PRIMARY KEY, x TEXT, FOREIGN KEY (x) REFERENCES x);
CREATE TABLE x (x TEXT PRIMARY KEY, x TEXT, FOREIGN KEY (x) REFERENCES x);
INSERT INTO x VALUES (1, NULL);
INSERT INTO x VALUES (2, 2);
INSERT INTO x VALUES (2, 1);
DROP TABLE x;
DROP TABLE x;
CREATE TABLE x (x TEXT, x TEXT, x TEXT NOT NULL, PRIMARY KEY (x, x));
CREATE TABLE x (x INT PRIMARY KEY);
CREATE TABLE x (x INT PRIMARY KEY, x INT, FOREIGN KEY (x) REFERENCES x (x));
CREATE TABLE x (x INT PRIMARY KEY, x INT, FOREIGN KEY (x) REFERENCES x (x) ON UPDATE NO ACTION);
CREATE TABLE x (x INT PRIMARY KEY, x INT, FOREIGN KEY (x) REFERENCES x (x) ON DELETE NO ACTION);
CREATE TABLE x (x INT PRIMARY KEY, x INT, FOREIGN KEY (x) REFERENCES x (x) ON UPDATE RESTRICT);
CREATE TABLE x (x INT PRIMARY KEY, x INT, FOREIGN KEY (x) REFERENCES x (x) ON DELETE RESTRICT);
CREATE TABLE x (x INT PRIMARY KEY, x INT, FOREIGN KEY (x) REFERENCES x (x) ON UPDATE CASCADE);
CREATE TABLE x (x INT PRIMARY KEY, x INT, FOREIGN KEY (x) REFERENCES x (x) ON DELETE CASCADE);
CREATE TABLE x (x INT PRIMARY KEY, x INT, FOREIGN KEY (x) REFERENCES x (x) ON UPDATE SET DEFAULT);
CREATE TABLE x (x INT PRIMARY KEY, x INT, FOREIGN KEY (x) REFERENCES x (x) ON DELETE SET DEFAULT);
CREATE TABLE x (x INT PRIMARY KEY, x INT, FOREIGN KEY (x) REFERENCES x (x) ON UPDATE SET NULL);
CREATE TABLE x (x INT PRIMARY KEY, x INT, FOREIGN KEY (x) REFERENCES x (x) ON DELETE SET NULL);
CREATE TABLE x (x INT PRIMARY KEY, x TEXT NOT NULL);
CREATE TABLE x (x INT PRIMARY KEY, x TEXT NOT NULL, x INT REFERENCES x (x));
DROP TABLE x;
ALTER TABLE x RENAME TO x;
DROP TABLE x;
CREATE TABLE x (x INT UNIQUE);
INSERT INTO x VALUES (1), (2), (3), (4);
CREATE TABLE x (x INT PRIMARY KEY, FOREIGN KEY (x) REFERENCES x (x));
INSERT INTO x VALUES (1), (2), (3);
CREATE TABLE x (x INT UNIQUE, FOREIGN KEY (x) REFERENCES x (x));
INSERT INTO x VALUES (1), (2);
CREATE TABLE x (x INT, FOREIGN KEY (x) REFERENCES x (x));
INSERT INTO x VALUES (1);
INSERT INTO x VALUES (5);
INSERT INTO x VALUES (4);
INSERT INTO x VALUES (3);
INSERT INTO x VALUES (4);
INSERT INTO x VALUES (3);
INSERT INTO x VALUES (2);
DELETE FROM x WHERE x = 4;
DELETE FROM x WHERE x = 3;
DELETE FROM x WHERE x = 2;
DELETE FROM x WHERE x = 4;
DELETE FROM x WHERE x = 3;
DELETE FROM x WHERE x = 2;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
CREATE TABLE x (x INT PRIMARY KEY);
INSERT INTO x VALUES (1), (2), (3);
BEGIN;
CREATE TABLE x (x INT, FOREIGN KEY (x) REFERENCES x (x));
INSERT INTO x VALUES (1);
DROP TABLE x;
DROP TABLE x;
CREATE TABLE x (x INT, FOREIGN KEY (x) REFERENCES x (x));
ROLLBACK;
CREATE TABLE x (x INT, FOREIGN KEY (x) REFERENCES x (x));
INSERT INTO x VALUES (1), (2);
INSERT INTO x VALUES (4), (5);
CREATE TABLE x (x custom_type PRIMARY KEY);
CREATE TABLE x (x custom_type REFERENCES x);
DROP TABLE x;
CREATE TABLE x (x INT REFERENCES x);
DROP TABLE x;
CREATE SCHEMA x.x;
CREATE SCHEMA x.x;
CREATE TABLE x.x (x INT PRIMARY KEY);
INSERT INTO x.x VALUES (1), (2), (3);
CREATE TABLE x.x (x INT, FOREIGN KEY (x) REFERENCES x.x (x));
PRAGMA x;
SET x = 'v0.10.3';
ATTACH '__TEST_DIR__/test_fk_eager.db' AS x;
USE x;
CREATE TABLE x (x INT PRIMARY KEY, x STRUCT(x TEXT, x INT[]));
INSERT INTO x VALUES (1, {'x': 'hello', 'x': [42]}), (2, {'x': 'world', 'x': [43]});
CREATE TABLE x (x INT REFERENCES x (x));
INSERT INTO x VALUES (1), (1), (1);
USE x;
DETACH fk_db;
ATTACH '__TEST_DIR__/test_fk_eager.db' AS x;
UPDATE x.x SET x = {'x': 'new hello', 'x': [7]} WHERE x = 1;
CREATE TABLE x (x INT PRIMARY KEY);
CREATE TABLE x (x INT, FOREIGN KEY (x) REFERENCES x (x));
INSERT INTO x VALUES (1), (2), (3);
INSERT INTO x VALUES (1), (2);
INSERT INTO x VALUES (1), (2);
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
INSERT INTO x VALUES (4);
INSERT INTO x VALUES (3);
DELETE FROM x WHERE x = 3;
DELETE FROM x WHERE x = 3;
DELETE FROM x WHERE x = 3;
UPDATE x SET x = 5 WHERE x = 2;
UPDATE x SET x = 4 WHERE x = 2;
UPDATE x SET x = 4 WHERE x = 2;
DROP TABLE x;
DROP TABLE x;
CREATE TABLE x (x INT PRIMARY KEY CHECK (x < 3), x INT UNIQUE);
CREATE TABLE x (x INT PRIMARY KEY CHECK (x < 3), x INT UNIQUE);
CREATE TABLE x (x INT, x INT, FOREIGN KEY (x) REFERENCES x (x), FOREIGN KEY (x) REFERENCES x (x));
CREATE TABLE x (x INT, x INT, FOREIGN KEY (x) REFERENCES x (x), FOREIGN KEY (x) REFERENCES x (x));
INSERT INTO x VALUES (3, 11);
INSERT INTO x VALUES (101, 1000);
INSERT INTO x VALUES (1, 11), (2, 12);
INSERT INTO x VALUES (101, 1001), (102, 1002);
INSERT INTO x VALUES (3, 101);
INSERT INTO x VALUES (2, 103);
INSERT INTO x VALUES (1, 102), (2, 101);
INSERT INTO x VALUES (13, 1002);
INSERT INTO x VALUES (12, 1003);
INSERT INTO x VALUES (12, 1001), (11, 1002);
DELETE FROM x WHERE x = 1;
DELETE FROM x WHERE x = 102;
DELETE FROM x WHERE x = 1;
DELETE FROM x WHERE x = 1;
DELETE FROM x WHERE x = 11;
DELETE FROM x WHERE x = 1;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
UPDATE x SET x = 3, x = 13 WHERE x = 2;
UPDATE x SET x = 103, x = 1003 WHERE x = 101;
UPDATE x SET x = 103, x = 1003 WHERE x = 102;
DELETE FROM x WHERE x = 2;
DELETE FROM x WHERE x = 12;
UPDATE x SET x = 1, x = 11 WHERE x = 2;
UPDATE x SET x = 104, x = 1004 WHERE x = 101;
SELECT * FROM x;
SELECT * FROM x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
CREATE TABLE x AS SELECT * FROM (VALUES ('v2')) AS x;
CREATE VIEW x AS SELECT * FROM x;
CREATE TABLE x (x TEXT, FOREIGN KEY (x) REFERENCES x (x));
CREATE TABLE x (x INT PRIMARY KEY);
INSERT INTO x VALUES (1);
BEGIN;
CREATE TABLE x (x INT, FOREIGN KEY (x) REFERENCES x (x));
DROP TABLE x;
ROLLBACK;
DROP TABLE x;
CREATE TABLE x (x INT PRIMARY KEY);
INSERT INTO x VALUES (1), (2);
CREATE TABLE x (x INT, FOREIGN KEY (x) REFERENCES x (x));
INSERT INTO x VALUES (2);
BEGIN;
DROP TABLE x;
ROLLBACK;
DELETE FROM x WHERE x = 2;
INSERT INTO x VALUES (3);
DROP TABLE x;
PRAGMA x;
CREATE TABLE x (x INT PRIMARY KEY, x INT, x TEXT, FOREIGN KEY (x) REFERENCES x (x));
CREATE TABLE x (x INT PRIMARY KEY, x INT, x TEXT, FOREIGN KEY (x) REFERENCES x (x));
INSERT INTO x VALUES (1, NULL, 'Smith'), (2, NULL, 'Jhon'), (3, NULL, 'Romeo');
INSERT INTO x VALUES (4, 4, 'Mark');
INSERT INTO x VALUES (4, 2, 'Mark');
UPDATE x SET x = 5 WHERE x = 2;
DELETE FROM x WHERE x = 2;
DELETE FROM x WHERE x = 4;
SELECT * FROM x ORDER BY ALL;
UPDATE x SET x = 'Juliet' WHERE x = 3;
SELECT * FROM x ORDER BY ALL;
UPDATE x SET x = 2 WHERE x = 3;
UPDATE x SET x = 4 WHERE x = 3;
SELECT * FROM x ORDER BY ALL;
UPDATE x SET x = 5 WHERE x = 4;
UPDATE x SET x = 2 WHERE x = 4;
SELECT * FROM x ORDER BY ALL;
UPDATE x SET x = 5, x = 2 WHERE x = 4;
SELECT * FROM x WHERE x = 2;
ALTER TABLE x RENAME COLUMN x TO x;
ALTER TABLE x RENAME COLUMN x TO x;
ALTER TABLE x ALTER COLUMN x SET DATA TYPE TEXT;
ALTER TABLE x ALTER COLUMN x SET DATA TYPE TEXT;
ALTER TABLE x DROP COLUMN x;
ALTER TABLE x DROP COLUMN x;
ALTER TABLE x DROP COLUMN x;
CREATE TEMPORARY TABLE x (x INT, x TEXT, x TEXT, UNIQUE (x, x));
INSERT INTO x VALUES (1, 'A', 'A_cover'), (2, 'B', 'B_cover'), (3, 'C', 'C_cover'), (4, 'D', 'D_cover');
CREATE TEMPORARY TABLE x (x INT, x INT, x TEXT, x TEXT, FOREIGN KEY (x, x) REFERENCES x (x, x));
INSERT INTO x VALUES (11, 1, 'A', 'A_song'), (12, 2, 'E', 'B_song'), (13, 3, 'C', 'C_song');
INSERT INTO x VALUES (11, 1, 'A', 'A_song'), (12, 5, 'D', 'B_song'), (13, 3, 'C', 'C_song');
INSERT INTO x VALUES (11, 1, 'A', 'A_song'), (12, 2, 'B', 'B_song'), (13, 3, 'C', 'C_song');
DELETE FROM x WHERE x = 'C';
DELETE FROM x WHERE x = 'D';
SELECT * FROM x;
UPDATE x SET x = 5, x = 'A' WHERE x = 'B_song';
UPDATE x SET x = 1, x = 'A' WHERE x = 'B_song';
SELECT * FROM x;
SELECT * FROM x;
UPDATE x SET x = 'B' WHERE x = 'C_cover';
UPDATE x SET x = 'E' WHERE x = 'C_song';
UPDATE x SET x = 5, x = 'D' WHERE x = 'B_cover';
SELECT * FROM x;
UPDATE x SET x = 'C_cover_new' WHERE x = 3;
UPDATE x SET x = 'C_song_new' WHERE x = 3;
SELECT * FROM x;
SELECT * FROM x;
ALTER TABLE x RENAME COLUMN x TO x;
ALTER TABLE x RENAME COLUMN x TO x;
ALTER TABLE x RENAME COLUMN x TO x;
ALTER TABLE x ALTER COLUMN x SET DATA TYPE TEXT;
ALTER TABLE x ALTER COLUMN x SET DATA TYPE TEXT;
ALTER TABLE x ALTER COLUMN x SET DATA TYPE TEXT;
ALTER TABLE x DROP COLUMN x;
ALTER TABLE x DROP COLUMN x;
DROP TABLE x;
DROP TABLE x;
ALTER TABLE x RENAME COLUMN x TO x;
ALTER TABLE x ALTER COLUMN x SET DATA TYPE TEXT;
ALTER TABLE x DROP COLUMN x;
DROP TABLE x;
CREATE TABLE x (x INT UNIQUE, x INT UNIQUE);
INSERT INTO x VALUES (1, 11), (2, 12), (3, 13);
CREATE TABLE x (x INT, x INT UNIQUE, FOREIGN KEY (x) REFERENCES x (x));
CREATE INDEX x ON x(x);
CREATE INDEX x ON x(x);
INSERT INTO x VALUES (1, 101), (2, 102);
INSERT INTO x VALUES (4, 104);
INSERT INTO x VALUES (3, 103);
DELETE FROM x WHERE x = 13;
DELETE FROM x WHERE x = 103;
DELETE FROM x WHERE x = 13;
UPDATE x SET x = 5 WHERE x = 12;
UPDATE x SET x = 4 WHERE x = 102;
UPDATE x SET x = 4 WHERE x = 102;
DROP INDEX x;
DROP INDEX x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
CREATE SCHEMA x.x;
CREATE TABLE x.x (x INT PRIMARY KEY);
CREATE TABLE x.x (x INT, FOREIGN KEY (x) REFERENCES x.x (x));
INSERT INTO x.x VALUES (1), (2), (3), (4), (5);
INSERT INTO x.x VALUES (2), (3);
INSERT INTO x.x VALUES (6);
INSERT INTO x.x VALUES (1);
DELETE FROM x.x WHERE x = 2;
DELETE FROM x.x WHERE x = 5;
DROP TABLE x.x;
DROP TABLE x.x;
DROP TABLE x.x;
CREATE TABLE x (x INT UNIQUE);
CREATE TABLE x (x INT, FOREIGN KEY (x) REFERENCES x (x));
CREATE TABLE x (x INT NOT NULL PRIMARY KEY, x TEXT NOT NULL, x TEXT);
CREATE TABLE x (x INT NOT NULL PRIMARY KEY, x TEXT NOT NULL, x TEXT NOT NULL, x TEXT NOT NULL, x TEXT NOT NULL, x INT NOT NULL, x TEXT NOT NULL, x DECIMAL(15, 2) NOT NULL, x TEXT NOT NULL);
CREATE TABLE x (x INT NOT NULL PRIMARY KEY, x TEXT NOT NULL, x INT NOT NULL, x TEXT, FOREIGN KEY (x) REFERENCES x (x));
CREATE TABLE x (x INT NOT NULL PRIMARY KEY, x TEXT NOT NULL, x TEXT NOT NULL, x INT NOT NULL, x TEXT NOT NULL, x DECIMAL(15, 2) NOT NULL, x TEXT NOT NULL, FOREIGN KEY (x) REFERENCES x (x));
CREATE TABLE x (x INT NOT NULL, x INT NOT NULL, x INT NOT NULL, x DECIMAL(15, 2) NOT NULL, x TEXT NOT NULL, PRIMARY KEY (x, x), FOREIGN KEY (x) REFERENCES x (x), FOREIGN KEY (x) REFERENCES x (x));
CREATE TABLE x (x INT NOT NULL PRIMARY KEY, x TEXT NOT NULL, x TEXT NOT NULL, x INT NOT NULL, x TEXT NOT NULL, x DECIMAL(15, 2) NOT NULL, x TEXT NOT NULL, x TEXT NOT NULL, FOREIGN KEY (x) REFERENCES x (x));
CREATE TABLE x (x INT NOT NULL PRIMARY KEY, x INT NOT NULL, x TEXT NOT NULL, x DECIMAL(15, 2) NOT NULL, x DATE NOT NULL, x TEXT NOT NULL, x TEXT NOT NULL, x INT NOT NULL, x TEXT NOT NULL, FOREIGN KEY (x) REFERENCES x (x));
CREATE TABLE x (x INT NOT NULL, x INT NOT NULL, x INT NOT NULL, x INT NOT NULL, x DECIMAL(15, 2) NOT NULL, x DECIMAL(15, 2) NOT NULL, x DECIMAL(15, 2) NOT NULL, x DECIMAL(15, 2) NOT NULL, x TEXT NOT NULL, x TEXT NOT NULL, x DATE NOT NULL, x DATE NOT NULL, x DATE NOT NULL, x TEXT NOT NULL, x TEXT NOT NULL, x TEXT NOT NULL, PRIMARY KEY (x, x), FOREIGN KEY (x) REFERENCES x (x), FOREIGN KEY (x, x) REFERENCES x (x, x));
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
CREATE TABLE x (x INT PRIMARY KEY);
CREATE TABLE x (x INT, FOREIGN KEY (x) REFERENCES x (x));
BEGIN;
INSERT INTO x VALUES (1);
INSERT INTO x VALUES (1);
ROLLBACK;
INSERT INTO x VALUES (1);
BEGIN;
INSERT INTO x VALUES (2);
INSERT INTO x VALUES (3);
ROLLBACK;
BEGIN;
INSERT INTO x VALUES (1);
DELETE FROM x WHERE x = 1;
ROLLBACK;
BEGIN;
DELETE FROM x WHERE x = 1;
INSERT INTO x VALUES (1);
ROLLBACK;
BEGIN;
INSERT INTO x VALUES (2);
INSERT INTO x VALUES (1), (2);
DELETE FROM x WHERE x = 1;
DELETE FROM x WHERE x = 1;
COMMIT;
DELETE FROM x WHERE x = 2;
DELETE FROM x WHERE x = 2;
DELETE FROM x WHERE x = 2;
INSERT INTO x VALUES (3);
BEGIN;
DELETE FROM x WHERE x = 3;
INSERT INTO x VALUES (3);
ROLLBACK;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
BEGIN;
CREATE TABLE x (x INT PRIMARY KEY);
CREATE TABLE x (x INT, FOREIGN KEY (x) REFERENCES x (x));
INSERT INTO x VALUES (1), (2);
INSERT INTO x VALUES (1), (2);
DELETE FROM x;
CREATE TABLE x (x INT, x TEXT, x TEXT, UNIQUE (x, x));
INSERT INTO x VALUES (1, 'A', 'A_cover'), (2, 'B', 'B_cover'), (3, 'C', 'C_cover'), (4, 'D', 'D_cover');
CREATE TABLE x (x INT, x INT, x TEXT, x TEXT, FOREIGN KEY (x, x) REFERENCES x (x));
CREATE TABLE x (x INT, x INT, x TEXT, x TEXT, FOREIGN KEY (x) REFERENCES x (x, x));
CREATE TABLE x (x INT, x INT, x TEXT, x TEXT, FOREIGN KEY (x, x) REFERENCES x (x, x));
CREATE TABLE x (x INT, x INT, x TEXT, x TEXT, FOREIGN KEY (x, x) REFERENCES x (x, x));
CREATE TABLE x (x INT, x INT, x TEXT, x TEXT, FOREIGN KEY (x, x) REFERENCES x (x, x));
CREATE TABLE x (x INT, x INT, x TEXT, x TEXT, FOREIGN KEY (x, x) REFERENCES x (x, x));
INSERT INTO x VALUES (11, 1, 'A', 'A_song'), (12, 2, 'E', 'B_song'), (13, 3, 'C', 'C_song');
INSERT INTO x VALUES (11, 1, 'A', 'A_song'), (12, 5, 'D', 'B_song'), (13, 3, 'C', 'C_song');
INSERT INTO x VALUES (11, 1, 'A', 'A_song'), (12, 2, 'B', 'B_song'), (13, 3, 'C', 'C_song');
DELETE FROM x WHERE x = 'C';
DELETE FROM x WHERE x = 'D';
SELECT * FROM x;
UPDATE x SET x = 5, x = 'A' WHERE x = 'B_song';
UPDATE x SET x = 1, x = 'A' WHERE x = 'B_song';
SELECT * FROM x;
SELECT * FROM x;
UPDATE x SET x = 'B' WHERE x = 'C_cover';
UPDATE x SET x = 'E' WHERE x = 'C_song';
UPDATE x SET x = 5, x = 'D' WHERE x = 'B_cover';
SELECT * FROM x;
UPDATE x SET x = 'C_cover_new' WHERE x = 3;
UPDATE x SET x = 'C_song_new' WHERE x = 3;
SELECT * FROM x;
SELECT * FROM x;
ALTER TABLE x RENAME COLUMN x TO x;
ALTER TABLE x RENAME COLUMN x TO x;
ALTER TABLE x RENAME COLUMN x TO x;
ALTER TABLE x ALTER COLUMN x SET DATA TYPE TEXT;
ALTER TABLE x ALTER COLUMN x SET DATA TYPE TEXT;
ALTER TABLE x ALTER COLUMN x SET DATA TYPE TEXT;
ALTER TABLE x DROP COLUMN x;
ALTER TABLE x DROP COLUMN x;
DROP TABLE x;
DROP TABLE x;
ALTER TABLE x RENAME COLUMN x TO x;
ALTER TABLE x ALTER COLUMN x SET DATA TYPE TEXT;
ALTER TABLE x DROP COLUMN x;
DROP TABLE x;
CREATE TABLE x (x INT UNIQUE, x INT UNIQUE);
INSERT INTO x VALUES (1, 11), (2, 12), (3, 13);
CREATE TABLE x (x INT, x INT UNIQUE, FOREIGN KEY (x) REFERENCES x (x));
CREATE INDEX x ON x(x);
CREATE INDEX x ON x(x);
INSERT INTO x VALUES (1, 101), (2, 102);
INSERT INTO x VALUES (4, 104);
INSERT INTO x VALUES (3, 103);
DELETE FROM x WHERE x = 13;
DELETE FROM x WHERE x = 103;
DELETE FROM x WHERE x = 13;
UPDATE x SET x = 5 WHERE x = 12;
UPDATE x SET x = 4 WHERE x = 102;
UPDATE x SET x = 4 WHERE x = 102;
DROP INDEX x;
DROP INDEX x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
CREATE SCHEMA x.x;
CREATE TABLE x.x (x INT PRIMARY KEY);
CREATE TABLE x.x (x INT, FOREIGN KEY (x) REFERENCES x.x (x));
INSERT INTO x.x VALUES (1), (2), (3), (4), (5);
INSERT INTO x.x VALUES (2), (3);
INSERT INTO x.x VALUES (6);
INSERT INTO x.x VALUES (1);
DELETE FROM x.x WHERE x = 2;
DELETE FROM x.x WHERE x = 5;
DROP TABLE x.x;
DROP TABLE x.x;
DROP TABLE x.x;
CREATE TABLE x (x INT UNIQUE);
CREATE TABLE x (x INT, FOREIGN KEY (x) REFERENCES x (x));
INSERT INTO x VALUES (NULL);
CREATE TABLE x (x INT PRIMARY KEY, x INT REFERENCES x (x));
INSERT INTO x VALUES (1, NULL);
INSERT INTO x VALUES (2, 1), (3, 1);
TRUNCATE TABLE x;
CREATE TABLE x (x INT, x BOOLEAN, PRIMARY KEY (x, x));
INSERT INTO x VALUES (1, FALSE), (1, TRUE), (2, FALSE);
INSERT INTO x VALUES (1, FALSE);
INSERT INTO x VALUES (2, TRUE);
SELECT * FROM x ORDER BY 1, 2;
CREATE TABLE x (x INT, x INT, x INT, x INT, x INT, PRIMARY KEY (x, x));
INSERT INTO x VALUES (1, 1, 1, 1, 1), (1, 1, 1, 1, 1);
INSERT INTO x VALUES (1, 1, 1, 1, 1), (1, 2, 1, 1, 1), (2, 1, 2, 1, 1), (2, 2, 2, 2, 2);
INSERT INTO x VALUES (1, 1, 1, 1, 1), (1, 5, 1, 1, 4);
INSERT INTO x VALUES (1, 5, 1, 1, 4);
UPDATE x SET x = 1 WHERE x = 2;
UPDATE x SET x = 1 WHERE x = 2;
CREATE TABLE x (x INT PRIMARY KEY);
INSERT INTO x VALUES (1), (2), (3);
BEGIN;
UPDATE x SET x = 4 WHERE x = 2;
UPDATE x SET x = 4 WHERE x = 2;
UPDATE x SET x = 5 WHERE x = 2;
DELETE FROM x WHERE x = 2;
UPDATE x SET x = 5 WHERE x = 3;
ROLLBACK;
BEGIN;
UPDATE x SET x = 4 WHERE x = 2;
UPDATE x SET x = 5 WHERE x = 3;
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
COMMIT;
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
CREATE TABLE x (x INT, x INT, x INT, x INT, x INT, PRIMARY KEY (x, x, x, x, x));
INSERT INTO x VALUES (1, 1, 1, 1, 1), (1, 1, 1, 1, 1);
INSERT INTO x VALUES (1, 1, 1, 1, 1), (1, 2, 1, 1, 1), (1, 1, 2, 1, 1), (2, 2, 2, 2, 2);
INSERT INTO x VALUES (1, 1, 1, 1, 1), (1, 1, 1, 1, 4);
INSERT INTO x VALUES (1, 1, 1, 1, 4);
UPDATE x SET x = 1 WHERE x = 2;
CREATE TABLE x (x INT, x TEXT, PRIMARY KEY (x, x));
INSERT INTO x VALUES (3, 'hello'), (3, 'world');
SELECT * FROM x;
INSERT INTO x VALUES (6, 'bla'), (3, 'hello');
INSERT INTO x VALUES (6, 'bla');
SELECT * FROM x;
CREATE TABLE x (x TEXT, x TEXT, PRIMARY KEY (x, x));
INSERT INTO x VALUES ('hell', 'hello'), ('hell', 'hello');
INSERT INTO x VALUES ('hell', 'hello'), ('hello', 'hell'), ('hel', 'hell'), ('hell', 'hel');
INSERT INTO x VALUES ('hell', 'hello'), ('hel', 'hello');
INSERT INTO x VALUES ('hel', 'hello');
UPDATE x SET x = 'hello' WHERE x = 'hel';
CREATE TABLE x (x INT PRIMARY KEY);
BEGIN;
INSERT INTO x VALUES (1);
ROLLBACK;
INSERT INTO x VALUES (1);
SELECT * FROM x;
CREATE TABLE x (x TEXT PRIMARY KEY, x INT);
INSERT INTO x VALUES ('1', 4), ('1', 5);
INSERT INTO x VALUES ('1', 4), ('2', 5);
SELECT * FROM x;
INSERT INTO x VALUES ('6', 6), ('1', 4);
INSERT INTO x VALUES ('6', 6);
SELECT * FROM x;
INSERT INTO x VALUES (NULL, 4);
UPDATE x SET x = NULL;
CREATE TABLE x (x INT PRIMARY KEY, x INT);
INSERT INTO x VALUES (11, 1), (12, 2), (13, 3);
UPDATE x SET x = 2 WHERE x = 3;
UPDATE x SET x = x + 1 WHERE x = 1;
UPDATE x SET x = 4;
SELECT * FROM x;
DELETE FROM x WHERE x = 11;
SELECT * FROM x ORDER BY x;
INSERT INTO x VALUES (11, 1);
SELECT * FROM x ORDER BY x;
INSERT INTO x VALUES (11, 1);
SELECT * FROM x ORDER BY x;
UPDATE x SET x = 4 WHERE x = 1;
SELECT * FROM x ORDER BY x;
UPDATE x SET x = NULL WHERE x = 1;
UPDATE x SET x = NULL;
CREATE TABLE x (x INT PRIMARY KEY);
BEGIN;
INSERT INTO x VALUES (1);
UPDATE x SET x = 33;
ROLLBACK;
INSERT INTO x VALUES (1);
INSERT INTO x VALUES (33);
SELECT * FROM x ORDER BY x;
DROP TABLE x;
CREATE TABLE x (x INT PRIMARY KEY);
INSERT INTO x VALUES (1);
UPDATE x SET x = 33;
INSERT INTO x VALUES (1);
SELECT * FROM x ORDER BY x;
PRAGMA x;
CREATE TABLE x (x INT, x TEXT, PRIMARY KEY (x, x));
INSERT INTO x VALUES (11, 'hello'), (12, 'world'), (13, 'blablabla');
UPDATE x SET x = 'pandas';
SELECT * FROM x ORDER BY ALL;
UPDATE x SET x = x + 3;
SELECT * FROM x ORDER BY ALL;
UPDATE x SET x = 15 WHERE x = 14;
UPDATE x SET x = 4;
SELECT * FROM x ORDER BY x;
UPDATE x SET x = x - 3;
SELECT * FROM x ORDER BY ALL;
DELETE FROM x WHERE x = 12;
SELECT * FROM x ORDER BY x;
INSERT INTO x VALUES (12, 'pandas');
SELECT * FROM x ORDER BY x;
INSERT INTO x VALUES (12, 'pandas');
DELETE FROM x WHERE x = 12;
SELECT * FROM x ORDER BY x;
INSERT INTO x VALUES (12, 'other pandas');
UPDATE x SET x = 4 WHERE x = 42;
UPDATE x SET x = 4 WHERE x = 12;
SELECT * FROM x ORDER BY x;
UPDATE x SET x = NULL WHERE x = 13;
CREATE TABLE x (x INT PRIMARY KEY, x INT);
INSERT INTO x VALUES (3, 4), (3, 5);
INSERT INTO x VALUES (3, 4), (2, 5);
SELECT * FROM x;
INSERT INTO x VALUES (6, 6), (3, 4);
INSERT INTO x VALUES (6, 6);
SELECT * FROM x;
INSERT INTO x VALUES (NULL, 4);
UPDATE x SET x = NULL;
BEGIN;
BEGIN;
INSERT INTO x VALUES (7, 8);
INSERT INTO x VALUES (7, 33);
COMMIT;
COMMIT;
SET x = 'nulls_first';
CREATE TABLE x (x INT UNIQUE, x INT);
INSERT INTO x VALUES (3, 4), (2, 5);
SELECT * FROM x;
INSERT INTO x VALUES (6, 6), (3, 4);
INSERT INTO x VALUES (NULL, 6), (NULL, 7);
UPDATE x SET x = 77 WHERE x IS NULL;
SELECT * FROM x ORDER BY x, x;
UPDATE x SET x = 77 WHERE x IS NULL AND x = 6;
SELECT * FROM x ORDER BY x, x;
INSERT INTO x VALUES (NULL, 6), (NULL, 7);
INSERT INTO x VALUES (NULL, 6), (NULL, 7);
INSERT INTO x VALUES (NULL, 6), (NULL, 7);
INSERT INTO x VALUES (NULL, 6), (NULL, 7);
INSERT INTO x VALUES (NULL, 6), (NULL, 7);
INSERT INTO x VALUES (NULL, 6), (NULL, 7);
INSERT INTO x VALUES (NULL, 6), (NULL, 7);
INSERT INTO x VALUES (NULL, 6), (NULL, 7);
INSERT INTO x VALUES (NULL, 6), (NULL, 7);
INSERT INTO x VALUES (NULL, 6), (NULL, 7);
INSERT INTO x VALUES (NULL, 6), (3, 7);
CREATE TEMPORARY TABLE x (x INT, x TEXT);
INSERT INTO x VALUES (3, '4'), (2, '4');
CREATE UNIQUE INDEX x ON x(x);
SET x = 'nulls_first';
CREATE TEMPORARY TABLE x (x INT, x INT);
CREATE UNIQUE INDEX x ON x(x, x);
INSERT INTO x VALUES (3, 4), (2, 5);
SELECT * FROM x;
INSERT INTO x VALUES (6, 6), (3, 4);
INSERT INTO x VALUES (NULL, 6), (NULL, 6), (NULL, 7);
UPDATE x SET x = 77 WHERE x IS NULL;
SELECT * FROM x ORDER BY x, x;
UPDATE x SET x = 77 WHERE x IS NULL AND x = 7;
SELECT * FROM x ORDER BY x, x;
INSERT INTO x VALUES (NULL, 6), (NULL, 7);
INSERT INTO x VALUES (NULL, 6), (NULL, 7);
INSERT INTO x VALUES (NULL, 6), (NULL, 7);
INSERT INTO x VALUES (NULL, 6), (NULL, 7);
INSERT INTO x VALUES (NULL, 6), (NULL, 7);
INSERT INTO x VALUES (NULL, 6), (NULL, 7);
INSERT INTO x VALUES (NULL, 6), (NULL, 7);
INSERT INTO x VALUES (NULL, 6), (NULL, 7);
INSERT INTO x VALUES (NULL, 6), (NULL, 7);
INSERT INTO x VALUES (NULL, 6), (NULL, 7);
INSERT INTO x VALUES (3, 4);
CREATE TABLE x (x INT PRIMARY KEY, x INT UNIQUE);
INSERT INTO x VALUES (1, 1), (2, 2);
INSERT INTO x VALUES (3, 3), (4, 1);
INSERT INTO x VALUES (3, 3), (4, 4);
INSERT INTO x VALUES (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12), (13, 13), (14, 14), (15, 15), (16, 16), (17, 17), (18, 18), (19, 19), (20, 20), (21, 21), (22, 22), (23, 23), (24, 24), (25, 25), (26, 26), (27, 27), (28, 28), (29, 29), (30, 30), (31, 31), (32, 32), (33, 33), (34, 34), (35, 35), (36, 36), (37, 37), (38, 38), (39, 39), (40, 40), (41, 41), (42, 42), (43, 43), (44, 44), (45, 45), (46, 46), (47, 47), (48, 48), (49, 49), (50, 50), (51, 51), (52, 52), (53, 53), (54, 54), (55, 55), (56, 56), (57, 57), (58, 58), (59, 59), (60, 60), (61, 61), (62, 62), (63, 63), (64, 64), (65, 65), (66, 66), (67, 67), (68, 68), (69, 69), (70, 70), (71, 71), (72, 72), (73, 73), (74, 74), (75, 75), (76, 76), (77, 77), (78, 78), (79, 79), (80, 80), (81, 81), (82, 82), (83, 83), (84, 84), (85, 85), (86, 86), (87, 87), (88, 88), (89, 89), (90, 90), (91, 91), (92, 92), (93, 93), (94, 94), (95, 95), (96, 96), (97, 97), (98, 98), (99, 99), (5, 5), (NULL, NULL), (NULL, NULL), (NULL, NULL), (NULL, NULL);
SELECT * FROM x WHERE x > 0 ORDER BY 1;
INSERT INTO x VALUES (5, 5), (6, 6);
SELECT * FROM x WHERE x > 0 ORDER BY 1;
UPDATE x SET x = 4, x = 100 WHERE x = 1;
UPDATE x SET x = 100, x = 4 WHERE x = 1;
INSERT INTO x VALUES (100, 100);
SELECT * FROM x WHERE x > 0 ORDER BY 1;
CREATE TEMPORARY TABLE x (x INT, x TEXT);
CREATE UNIQUE INDEX "x" ON x("x");
INSERT INTO x VALUES (3, '4'), (2, '5');
SELECT * FROM x;
INSERT INTO x VALUES (6, '6'), (3, '4');
INSERT INTO x VALUES (6, NULL), (7, NULL);
UPDATE x SET x = '77' WHERE x IS NULL;
SELECT * FROM x ORDER BY x, x;
UPDATE x SET x = '7777777777777777777777777777' WHERE x IS NULL AND x = 6;
INSERT INTO x VALUES (6, NULL), (7, NULL);
INSERT INTO x VALUES (6, NULL), (7, NULL);
INSERT INTO x VALUES (6, NULL), (7, NULL);
INSERT INTO x VALUES (6, NULL), (7, NULL);
INSERT INTO x VALUES (6, NULL), (7, NULL);
INSERT INTO x VALUES (6, NULL), (7, NULL);
INSERT INTO x VALUES (6, NULL), (7, NULL);
INSERT INTO x VALUES (6, NULL), (7, NULL);
INSERT INTO x VALUES (6, NULL), (7, NULL);
INSERT INTO x VALUES (6, NULL), (7, NULL);
INSERT INTO x VALUES (3, '4');
INSERT INTO x VALUES (3, '4');
SET x = 'nulls_first';
CREATE TEMPORARY TABLE x (x INT, x INT);
CREATE UNIQUE INDEX x ON x(x);
INSERT INTO x VALUES (3, 4), (2, 5);
SELECT * FROM x;
INSERT INTO x VALUES (6, 6), (3, 4);
INSERT INTO x VALUES (NULL, 6), (NULL, 7);
UPDATE x SET x = 77 WHERE x IS NULL;
SELECT * FROM x ORDER BY x, x;
UPDATE x SET x = 77 WHERE x IS NULL AND x = 6;
SELECT * FROM x ORDER BY x, x;
INSERT INTO x VALUES (NULL, 6), (NULL, 7);
INSERT INTO x VALUES (NULL, 6), (NULL, 7);
INSERT INTO x VALUES (NULL, 6), (NULL, 7);
INSERT INTO x VALUES (NULL, 6), (NULL, 7);
INSERT INTO x VALUES (NULL, 6), (NULL, 7);
INSERT INTO x VALUES (NULL, 6), (NULL, 7);
INSERT INTO x VALUES (NULL, 6), (NULL, 7);
INSERT INTO x VALUES (NULL, 6), (NULL, 7);
INSERT INTO x VALUES (NULL, 6), (NULL, 7);
INSERT INTO x VALUES (NULL, 6), (NULL, 7);
INSERT INTO x VALUES (NULL, 6), (3, 7);
CREATE TABLE x AS SELECT x AS x, x AS x FROM x AS x;
SET x = 1;
COPY (SELECT * FROM x) TO '__TEST_DIR__/file_size_bytes_csv1' WITH (FORMAT CSV, FILE_SIZE_BYTES 1000);
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
COPY (SELECT * FROM x) TO '__TEST_DIR__/file_size_bytes_csv2' WITH (FORMAT CSV, FILE_SIZE_BYTES '1kb');
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
COPY (SELECT * FROM x) TO '__TEST_DIR__/file_size_bytes_json' WITH (FORMAT JSON, FILE_SIZE_BYTES '1kb');
SELECT COUNT(*) FROM x;
SELECT COUNT(*) >= 3 AND COUNT(*) <= 12 FROM x;
COPY (SELECT CAST(HASH(x) AS DOUBLE), CAST(HASH(x) AS DOUBLE) FROM x) TO '__TEST_DIR__/file_size_bytes_parquet' WITH (FORMAT PARQUET, ROW_GROUP_SIZE 2000, FILE_SIZE_BYTES '1kb');
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
INSERT INTO x SELECT x.* FROM x, x;
PRAGMA x;
PRAGMA x = 4;
COPY (SELECT * FROM x) TO '__TEST_DIR__/file_size_bytes_csv3' WITH (FORMAT CSV, FILE_SIZE_BYTES '500kb');
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
COPY (SELECT * FROM x) TO '__TEST_DIR__/file_size_bytes_csv4' WITH (FORMAT CSV, FILE_SIZE_BYTES '200kb');
SELECT COUNT(*) FROM x;
SELECT COUNT(*) BETWEEN 3 AND 5 FROM x;
COPY (SELECT * FROM x) TO '__TEST_DIR__/file_size_bytes_csv5' WITH (FORMAT CSV, FILE_SIZE_BYTES '700kb', PER_THREAD_OUTPUT TRUE);
SELECT COUNT(*) FROM x;
SELECT COUNT(*) > 1 FROM x;
COPY (SELECT * FROM x) TO '__TEST_DIR__/file_size_bytes_csv6' WITH (FORMAT CSV, FILE_SIZE_BYTES '190kb', PER_THREAD_OUTPUT TRUE);
SELECT COUNT(*) FROM x;
SELECT COUNT(*) BETWEEN 5 AND 10 FROM x;
COPY (SELECT * FROM x) TO '__TEST_DIR__/file_size_bytes_csv7' WITH (FORMAT CSV, FILE_SIZE_BYTES '190kb', USE_TMP_FILE TRUE);
COPY (SELECT * FROM x) TO '__TEST_DIR__/file_size_bytes_csv7' WITH (FORMAT CSV, FILE_SIZE_BYTES '190kb', PARTITION_BY col_a);
SET x = 4;
CREATE TABLE x AS SELECT x AS x, x AS x FROM x AS x;
COPY (SELECT * FROM x) TO '__TEST_DIR__/file_size_bytes_csv42' WITH (FORMAT CSV, FILE_SIZE_BYTES '1mb');
SELECT COUNT(*) FROM x;
SELECT AVG(x), AVG(x) FROM x;
SELECT COUNT(*) BETWEEN 100 AND 200 FROM x;
COPY (SELECT * FROM x) TO '__TEST_DIR__/file_size_bytes_csv43' WITH (FORMAT CSV, FILE_SIZE_BYTES '1mb', PER_THREAD_OUTPUT TRUE);
SELECT COUNT(*) FROM x;
SELECT AVG(x), AVG(x) FROM x;
SELECT COUNT(*) BETWEEN 100 AND 200 FROM x;
PRAGMA x;
PRAGMA x;
PRAGMA x = 4;
CREATE TABLE x AS SELECT x AS x, (x * 2) AS x, POWER(x, 2) AS x FROM x AS x;
CREATE TABLE x AS SELECT x AS x, (x * 3) AS x, POWER(x, 3) AS x FROM x AS x;
CREATE TABLE x AS SELECT x AS x, (x * 4) AS x, POWER(x, 4) AS x FROM x AS x;
CREATE TABLE x AS SELECT x AS x, (x * 5) AS x, POWER(x, 5) AS x FROM x AS x;
CREATE TABLE x AS SELECT x AS x, (x * 10) AS x, (x * 100) AS x FROM x AS x;
SELECT * FROM x;
COPY x TO '__TEST_DIR__/part' WITH (FORMAT PARQUET, PARTITION_BY (x), FILENAME_PATTERN "x");
SELECT * FROM x;
COPY x TO '__TEST_DIR__/part' WITH (FORMAT PARQUET, PARTITION_BY (x), overwrite_or_ignore TRUE, FILENAME_PATTERN "x");
SELECT * FROM x;
SELECT * FROM x;
COPY x TO '__TEST_DIR__/part' WITH (FORMAT PARQUET, PARTITION_BY (x), overwrite_or_ignore TRUE);
SELECT * FROM x;
SELECT * FROM x;
COPY x TO '__TEST_DIR__/part' WITH (FORMAT PARQUET, PARTITION_BY (x), overwrite_or_ignore TRUE, FILENAME_PATTERN "x");
SELECT * FROM x;
SELECT * FROM x;
COPY x TO '__TEST_DIR__/part' WITH (FORMAT PARQUET, PARTITION_BY (x));
COPY x TO '__TEST_DIR__/to_be_overwritten' WITH (FORMAT PARQUET, PARTITION_BY (x), FILENAME_PATTERN);
COPY x TO '__TEST_DIR__/to_be_overwritten' WITH (FORMAT PARQUET, PARTITION_BY (x), FILENAME_PATTERN a_file_name);
SELECT COUNT(*) FROM x;
SELECT * FROM x;
COPY x TO '__TEST_DIR__/incorrect_pos' WITH (FORMAT PARQUET, PARTITION_BY (x), filename_pattern "x");
SELECT * FROM x;
COPY x TO '__TEST_DIR__/pto' WITH (FORMAT PARQUET, PER_THREAD_OUTPUT TRUE, OVERWRITE_OR_IGNORE TRUE, FILENAME_PATTERN "x");
SELECT COUNT(*) FROM x;
SELECT COUNT(*) >= 1 FROM x;
PRAGMA x = 1;
COPY x TO '__TEST_DIR__/to_be_overwritten2' WITH (FORMAT PARQUET, PARTITION_BY (x), OVERWRITE_OR_IGNORE);
SELECT COUNT(*) FROM x;
SELECT * FROM x;
COPY x TO '__TEST_DIR__/directory0' WITH (FORMAT PARQUET, PARTITION_BY (x), overwrite_or_ignore TRUE, FILENAME_PATTERN "x");
SELECT COUNT(*) FROM x;
SELECT * FROM x;
COPY x TO '__TEST_DIR__/to_be_overwritten2' WITH (FORMAT PARQUET, PARTITION_BY (x), OVERWRITE_OR_IGNORE, WRITE_PARTITION_COLUMNS);
SELECT COUNT(*) FROM x;
SELECT * FROM x;
PRAGMA x;
COPY x TO '__TEST_DIR__/partition' WITH (format parquet, partition_by (x, x, x));
SELECT TYPEOF(x), TYPEOF(x), TYPEOF(x) FROM x LIMIT 1;
SELECT TYPEOF(x), TYPEOF(x), TYPEOF(x) FROM x LIMIT 1;
SELECT TYPEOF(x), TYPEOF(x), TYPEOF(x) FROM x LIMIT 1;
SELECT x, x, x FROM x LIMIT 1;
SELECT * FROM x;
SELECT TYPEOF(x) FROM x LIMIT 1;
SELECT * FROM x;
SELECT * FROM x;
SELECT TYPEOF(x), TYPEOF(x), TYPEOF(x) FROM x LIMIT 1;
SELECT TYPEOF(x), TYPEOF(x), TYPEOF(x) FROM x LIMIT 1;
SELECT TYPEOF(x), TYPEOF(x), TYPEOF(x) FROM x LIMIT 1;
SELECT TYPEOF(x), TYPEOF(x), TYPEOF(x) FROM x LIMIT 1;
SELECT TYPEOF(x), TYPEOF(x), TYPEOF(x) FROM x LIMIT 1;
SELECT TYPEOF(x), TYPEOF(x), TYPEOF(x) FROM x LIMIT 1;
COPY (SELECT 1 AS x, 1 AS x, '123' AS x UNION ALL SELECT 2, 2, '1992-01-01' UNION ALL SELECT 3, 3, 'abc') TO '__TEST_DIR__/partition_types' WITH (FORMAT PARQUET, PARTITION_BY (x));
SELECT * FROM x ORDER BY 1;
SELECT * FROM x;
COPY x TO '__TEST_DIR__/partition-written' WITH (format parquet, partition_by (x, x, x), write_partition_columns);
SELECT TYPEOF(x), TYPEOF(x), TYPEOF(x) FROM x LIMIT 1;
PRAGMA x;
PRAGMA x = 4;
CREATE TABLE x AS SELECT x AS x, x AS x FROM x AS x;
CREATE TABLE x AS SELECT x AS x, x AS x FROM x AS x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) > 1 AS x FROM x ORDER BY x;
SELECT COUNT(*) > 1 AS x FROM x ORDER BY x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) > 2 AS x FROM x ORDER BY x;
COPY (SELECT * FROM x) TO '__TEST_DIR__/per_thread_output2/' WITH (FORMAT PARQUET, PER_THREAD_OUTPUT TRUE);
SELECT COUNT(*) FROM x;
COPY (SELECT * FROM x) TO '__TEST_DIR__/per_thread_output2/' WITH (FORMAT PARQUET, PER_THREAD_OUTPUT TRUE);
SELECT COUNT(*) FROM x;
COPY (SELECT * FROM x) TO '__TEST_DIR__/per_thread_output3' WITH (FORMAT PARQUET, PER_THREAD_OUTPUT TRUE, USE_TMP_FILE TRUE);
CREATE TABLE x AS SELECT x AS x FROM x;
SET x = FALSE;
COPY x TO '__TEST_DIR__/test_copy_to_file.parquet' WITH (RETURN_FILES);
SET x = TRUE;
COPY x TO '__TEST_DIR__/test_batch_copy_to_file.parquet' WITH (RETURN_FILES TRUE);
SET x = 2;
COPY x TO '__TEST_DIR__/test_per_thread_output' WITH (RETURN_FILES, PER_THREAD_OUTPUT);
SET x = 1;
CREATE TABLE x AS SELECT x AS x, x % 4 AS x FROM x;
COPY x TO '__TEST_DIR__/test_partition_by' WITH (RETURN_FILES TRUE, PARTITION_BY j);
CREATE TABLE x AS SELECT x AS x FROM x;
CREATE TABLE x AS SELECT x AS x, x % 10 AS x, CASE WHEN x % 2 = 0 THEN NULL ELSE x END AS x FROM x;
CREATE TABLE x AS SELECT CASE WHEN x % 10 = 0 THEN NULL ELSE x / 10.0 END AS x FROM x AS x;
CREATE TABLE x AS SELECT CASE WHEN x % 10 = 0 THEN CAST('nan' AS DOUBLE) WHEN x % 4 = 0 THEN NULL ELSE x / 10.0 END AS x FROM x AS x;
CREATE TABLE x AS SELECT CAST('nan' AS REAL) AS x;
CREATE TABLE x AS SELECT CONCAT('thisisalongstring_', x) AS x FROM x;
CREATE TABLE x AS SELECT CAST((CAST('2000-01-01' AS TIMESTAMP) + INTERVAL (x) DAY) AS DATE) AS x, CAST('2000-01-01 12:12:12.123456' AS TIMESTAMP) + INTERVAL (x) DAY AS x, CAST((CAST('2000-01-01 12:12:12' AS TIMESTAMP) + INTERVAL (x) DAY) AS TIMESTAMP_S) AS x, CAST((CAST('2000-01-01 12:12:12.123' AS TIMESTAMP) + INTERVAL (x) DAY) AS TIMESTAMP_MS) AS x, CAST(CONCAT(CAST((CAST('2000-01-01 12:12:12.123456' AS TIMESTAMP) + INTERVAL (x) DAY) AS TEXT), '789') AS TIMESTAMP_NS) AS x, CAST('00:00:00' AS TIME) + INTERVAL (10 * x) SECOND AS x FROM x;
CREATE TABLE x AS SELECT * FROM x LIMIT 0;
CREATE TABLE x AS SELECT CAST('' AS BLOB) AS x UNION ALL SELECT CAST('\x80\x00\x80' AS BLOB);
CREATE TABLE x AS SELECT CAST(25.3 AS DECIMAL(4, 1)) AS x, CAST(123456.789 AS DECIMAL(9, 3)) AS x, CAST(123456789123.456 AS DECIMAL(18, 3)) AS x UNION ALL SELECT CAST(1.1 AS DECIMAL(4, 1)), CAST(2.123 AS DECIMAL(9, 3)), CAST(3.456 AS DECIMAL(18, 3));
CREATE TABLE x AS SELECT CASE WHEN x % 10 = 0 THEN NULL ELSE {'x': x, 'x': CASE WHEN x % 2 = 0 THEN 100 + x ELSE NULL END} END AS x FROM x AS x;
CREATE TABLE x AS SELECT [x] AS x, CASE WHEN x % 10 = 0 THEN NULL ELSE [CASE WHEN x % 2 = 0 THEN 100 + x ELSE NULL END] END AS x FROM x AS x;
CREATE TABLE x AS SELECT {'x': {'x': x}, 'x': {'x': {'x': x}, 'x': [x]}} AS x FROM x AS x;
CREATE TABLE x AS SELECT {'x': 42} AS "x";
CREATE TABLE x AS SELECT MAP {'x': x} AS x FROM x AS x;
CREATE TABLE x AS SELECT CAST([x, x + 1, x + 2] AS INT[3]) AS x FROM x AS x;
CREATE TABLE x AS SELECT x % 2 AS x, x AS x FROM x;
CREATE TABLE x AS SELECT x % 2 AS x, x % 3 AS x, x AS x FROM x;
CREATE TABLE x AS SELECT REPEAT('A', 254) || '🦆' AS x UNION ALL SELECT REPEAT('Z', 254) || '🦆';
CREATE TABLE x AS SELECT CAST(REPEAT('\x81', 4000) AS BLOB) AS x UNION ALL SELECT CAST(REPEAT('\x80', 4000) AS BLOB);
CREATE TABLE x AS SELECT CAST(REPEAT('\x81', 4000) AS BLOB) AS x UNION ALL SELECT CAST(REPEAT('\x80', 4000) AS BLOB);
CREATE TABLE x AS SELECT CAST(REPEAT('\x81', 4000) AS BLOB) AS x UNION ALL SELECT CAST(REPEAT('\x80', 4000) AS BLOB);
COPY x TO '__TEST_DIR__/test_copy_to_file.parquet' WITH (RETURN_STATS);
COPY x TO '__TEST_DIR__/multi_column_copy.parquet' WITH (RETURN_STATS);
COPY x TO '__TEST_DIR__/string_test.parquet' WITH (RETURN_STATS);
COPY x TO '__TEST_DIR__/date_test.parquet' WITH (RETURN_STATS);
COPY x TO '__TEST_DIR__/empty_test.parquet' WITH (RETURN_STATS);
COPY x TO '__TEST_DIR__/blob_test.parquet' WITH (RETURN_STATS);
COPY x TO '__TEST_DIR__/decimal_test.parquet' WITH (RETURN_STATS);
COPY x TO '__TEST_DIR__/fp.parquet' WITH (RETURN_STATS);
COPY x TO '__TEST_DIR__/fp_nan.parquet' WITH (RETURN_STATS);
COPY x TO '__TEST_DIR__/fp_nan_only.parquet' WITH (RETURN_STATS);
COPY x TO '__TEST_DIR__/test_large_string.parquet' WITH (RETURN_STATS);
COPY x TO '__TEST_DIR__/test_large_blob.parquet' WITH (RETURN_STATS);
COPY x TO '__TEST_DIR__/test_uuids.parquet' WITH (RETURN_STATS);
COPY x TO '__TEST_DIR__/struct_test.parquet' WITH (RETURN_STATS);
COPY x TO '__TEST_DIR__/list_test.parquet' WITH (RETURN_STATS);
COPY x TO '__TEST_DIR__/nested_struct_test.parquet' WITH (RETURN_STATS);
COPY x TO '__TEST_DIR__/funky_names.parquet' WITH (RETURN_STATS);
COPY x TO '__TEST_DIR__/map_test.parquet' WITH (RETURN_STATS);
COPY x TO '__TEST_DIR__/array_test.parquet' WITH (RETURN_STATS);
COPY x TO '__TEST_DIR__/partitioned_test' WITH (FORMAT PARQUET, PARTITION_BY (x), RETURN_STATS, OVERWRITE);
COPY x TO '__TEST_DIR__/multi_partitioned_test' WITH (FORMAT PARQUET, PARTITION_BY (x, x), RETURN_STATS, OVERWRITE);
COPY (SELECT * FROM x) TO '__TEST_DIR__/test_all_types.parquet' WITH (RETURN_STATS);
COPY x TO '__TEST_DIR__/test_copy_to_file.csv' WITH (RETURN_STATS);
PRAGMA x;
COPY (SELECT CAST(REPEAT('\xFF', 300) AS BLOB) AS x) TO '__TEST_DIR__/test_truncate_blob.parquet' WITH (RETURN_STATS);
SELECT x, x FROM x;
COPY (SELECT CAST(('\xFE' || REPEAT('\xFF', 300)) AS BLOB) AS x) TO '__TEST_DIR__/test_truncate_blob.parquet' WITH (RETURN_STATS);
SELECT x, x FROM x;
COPY (SELECT REPEAT('🦆', 300) AS x) TO '__TEST_DIR__/test_truncate_string.parquet' WITH (RETURN_STATS);
SELECT x, x FROM x;
COPY (SELECT 'B' || REPEAT('🦆', 300) AS x) TO '__TEST_DIR__/test_truncate_string.parquet' WITH (RETURN_STATS);
SELECT x, x FROM x;
CREATE TABLE x AS SELECT x AS x, x AS x FROM x AS x;
SET x = 1;
COPY x TO '__TEST_DIR__/row_groups_per_file1' WITH (FORMAT PARQUET, ROW_GROUP_SIZE 2000, ROW_GROUPS_PER_FILE 1);
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
COPY x TO '__TEST_DIR__/row_groups_per_file2' WITH (FORMAT PARQUET, ROW_GROUP_SIZE 4000, ROW_GROUPS_PER_FILE 1);
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
COPY x TO '__TEST_DIR__/row_groups_per_file3' WITH (FORMAT PARQUET, ROW_GROUP_SIZE 2000, ROW_GROUPS_PER_FILE 2);
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
PRAGMA x;
SET x = 4;
COPY x TO '__TEST_DIR__/row_groups_per_file4' WITH (FORMAT PARQUET, ROW_GROUP_SIZE 2000, ROW_GROUPS_PER_FILE 1);
SELECT COUNT(*) FROM x;
SELECT COUNT(*) BETWEEN 1 AND 10 FROM x;
COPY x TO '__TEST_DIR__/row_groups_per_file5' WITH (FORMAT PARQUET, ROW_GROUP_SIZE 4000, ROW_GROUPS_PER_FILE 1);
SELECT COUNT(*) FROM x;
SELECT COUNT(*) BETWEEN 1 AND 10 FROM x;
COPY x TO '__TEST_DIR__/row_groups_per_file6' WITH (FORMAT PARQUET, ROW_GROUP_SIZE 2000, ROW_GROUPS_PER_FILE 2);
SELECT COUNT(*) FROM x;
SELECT COUNT(*) BETWEEN 1 AND 10 FROM x;
COPY x TO '__TEST_DIR__/row_groups_per_file7' WITH (FORMAT PARQUET, PER_THREAD_OUTPUT TRUE, ROW_GROUP_SIZE 2000, ROW_GROUPS_PER_FILE 1);
SELECT COUNT(*) FROM x;
SELECT COUNT(*) BETWEEN 1 AND 10 FROM x;
COPY x TO '__TEST_DIR__/row_groups_per_file8' WITH (FORMAT PARQUET, PER_THREAD_OUTPUT TRUE, ROW_GROUP_SIZE 4000, ROW_GROUPS_PER_FILE 1);
SELECT COUNT(*) FROM x;
SELECT COUNT(*) BETWEEN 1 AND 10 FROM x;
COPY x TO '__TEST_DIR__/row_groups_per_file9' WITH (FORMAT PARQUET, PER_THREAD_OUTPUT TRUE, ROW_GROUP_SIZE 2000, ROW_GROUPS_PER_FILE 2);
SELECT COUNT(*) FROM x;
SELECT COUNT(*) BETWEEN 1 AND 10 FROM x;
COPY x TO '__TEST_DIR__/row_groups_per_file_error' WITH (FORMAT PARQUET, ROW_GROUPS_PER_FILE 1, USE_TMP_FILE TRUE);
COPY x TO '__TEST_DIR__/row_groups_per_file_error' WITH (FORMAT PARQUET, ROW_GROUPS_PER_FILE 1, PARTITION_BY col_a);
SET x = 4;
CREATE TABLE x AS SELECT x AS x, x AS x FROM x AS x;
COPY x TO '__TEST_DIR__/row_groups_per_file42' WITH (FORMAT PARQUET, ROW_GROUP_SIZE 122880, ROW_GROUPS_PER_FILE 4);
SELECT COUNT(*) FROM x;
SELECT AVG(x), AVG(x) FROM x;
SELECT COUNT(*) BETWEEN 10 AND 25 FROM x;
COPY x TO '__TEST_DIR__/row_groups_per_file43' WITH (FORMAT PARQUET, ROW_GROUP_SIZE 122880, ROW_GROUPS_PER_FILE 4, PER_THREAD_OUTPUT TRUE);
SELECT COUNT(*) FROM x;
SELECT AVG(x), AVG(x) FROM x;
SELECT COUNT(*) BETWEEN 10 AND 25 FROM x;
COPY (SELECT 42 AS x) TO '__TEST_DIR__/foo';
COPY (SELECT 42 AS x) TO '__TEST_DIR__/foo';
COPY (SELECT 36) TO '__TEST_DIR__/.a.b';
COPY (SELECT 37 AS x) TO '__TEST_DIR__/.a.b';
SELECT * FROM x;
COPY (SELECT 50) TO '__TEST_DIR__/.a.b.c.d.e..';
PRAGMA x;
SELECT * FROM x;
SELECT x FROM x;
SELECT * FROM x;
SELECT x FROM x;
PRAGMA x;
SELECT COUNT(*) FROM x;
SELECT * FROM x ORDER BY ALL LIMIT 5;
PRAGMA x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
PRAGMA x;
SELECT * FROM x;
SELECT x FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x WHERE x = 'D' AND x = 'DREGION' AND x = '2';
SELECT * FROM x WHERE x = 'D' AND x = 'DREGION' AND x = '2';
PRAGMA x;
CREATE TABLE x AS SELECT * FROM x;
SELECT x, x, x, x, x FROM x;
CREATE TABLE x AS SELECT * FROM x;
SELECT x, x, x, x, x FROM x;
CREATE TABLE x AS SELECT * FROM x;
SELECT x, x, x, x, x FROM x;
PRAGMA x;
CREATE TABLE x (x INT, x INT, x TEXT);
COPY x FROM 'data/csv/test/test.csv';
PRAGMA x;
PRAGMA x;
COPY (SELECT * FROM x AS x) TO '__TEST_DIR__/copy_to_overwrite.csv' WITH (HEADER);
SELECT * FROM x;
COPY (SELECT * FROM x AS x) TO '__TEST_DIR__/copy_to_overwrite.csv' WITH (HEADER);
SELECT * FROM x;
COPY (SELECT * FROM x AS x) TO '__TEST_DIR__/copy_to_overwrite.csv.gz' WITH (HEADER);
SELECT * FROM x;
COPY (SELECT * FROM x AS x) TO '__TEST_DIR__/copy_to_overwrite.csv.gz' WITH (HEADER);
SELECT * FROM x;
PRAGMA x;
CREATE TABLE x (x INT NOT NULL PRIMARY KEY, x INT NOT NULL, x INT NOT NULL, x INT NOT NULL, x INT NOT NULL, x SMALLINT NOT NULL, x SMALLINT NOT NULL, x DECIMAL(8, 2), x DECIMAL(8, 2), x TIMESTAMP);
PRAGMA x;
CREATE TABLE x AS SELECT * FROM x;
CREATE TABLE x AS SELECT * FROM x;
SELECT x, x FROM x;
SELECT TYPEOF(x), TYPEOF(x) FROM x LIMIT 1;
CREATE TABLE x AS SELECT * FROM x;
CREATE TABLE x AS SELECT * FROM x;
CREATE TABLE x AS SELECT * FROM x;
SELECT x, x FROM x;
SELECT TYPEOF(x), TYPEOF(x) FROM x LIMIT 1;
CREATE TABLE x AS SELECT * FROM x;
SELECT x, x FROM x;
CREATE TABLE x AS SELECT * FROM x;
SELECT x, x FROM x;
SELECT TYPEOF(x), TYPEOF(x) FROM x LIMIT 1;
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
SELECT TYPEOF(x), TYPEOF(x) FROM x LIMIT 1;
SELECT TYPEOF(x), TYPEOF(x) FROM x LIMIT 1;
SELECT TYPEOF(x), TYPEOF(x) FROM x LIMIT 1;
SELECT TYPEOF(x), TYPEOF(x) FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
PRAGMA x;
CREATE TABLE x (x BIGINT);
CREATE TABLE x (x INT, x INT);
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1), (2), (9223372036854775807);
INSERT INTO x VALUES (3, 4), (5, 6);
INSERT INTO x VALUES (100, 101), (102, 103);
COPY x TO '__TEST_DIR__/ubn1.csv' WITH (DELIMITER ',');
COPY x TO '__TEST_DIR__/ubn2.csv' WITH (DELIMITER ',');
COPY x TO '__TEST_DIR__/ubn3.csv' WITH (DELIMITER ',');
SELECT TYPEOF(x), TYPEOF(x), TYPEOF(x) FROM x LIMIT 1;
SELECT TYPEOF(x), TYPEOF(x), TYPEOF(x) FROM x LIMIT 1;
SELECT TYPEOF(x), TYPEOF(x), TYPEOF(x) FROM x LIMIT 1;
SELECT TYPEOF(x), TYPEOF(x), TYPEOF(x) FROM x LIMIT 1;
SELECT TYPEOF(x), TYPEOF(x), TYPEOF(x) FROM x LIMIT 1;
PRAGMA x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
SELECT * FROM x;
COPY (SELECT CAST(x AS TEXT) AS x FROM x AS x UNION ALL SELECT 'hello') TO '__TEST_DIR__/int_parse_error.csv' WITH (HEADER, DELIMITER '|');
SELECT * FROM x;
SELECT * FROM x;
COPY (SELECT CAST(x AS TEXT) AS x FROM x AS x UNION ALL SELECT 'hello') TO '__TEST_DIR__/int_parse_error.csv' WITH (HEADER 0, DELIMITER '|');
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
CREATE TABLE x (x DATE);
COPY x FROM 'data/csv/test/date.csv';
SET x = FALSE;
SELECT * FROM x;
SELECT * FROM x;
COPY x FROM 'data/csv/test/date.csv';
COPY x TO '__TEST_DIR__/date.csv';
SET x = TRUE;
SELECT * FROM x;
PRAGMA x;
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
CREATE TABLE x AS SELECT 1 AS x, 'value1' AS x;
SELECT x, x, REPLACE(x, '\', '/') FROM x ORDER BY x;
SELECT x, x, x, x FROM x ORDER BY x;
SELECT x, x, x, x FROM x ORDER BY x;
SELECT * FROM x;
SELECT * FROM x;
SELECT x, x, x, x FROM x WHERE x = 'a';
SELECT x, x, x, x FROM x WHERE x = 'b';
SELECT x, x, CAST(x AS INT) AS x, CAST(x AS DATE) AS x FROM x WHERE x > 0 AND x < 5000;
SELECT x, x, CAST(x AS INT) AS x, CAST(x AS DATE) AS x FROM x WHERE x > 5000;
SELECT x, x, CAST(x AS INT) AS x, CAST(x AS DATE) AS x FROM x WHERE x > CAST('2000-01-01' AS DATE) AND x < CAST('2012-12-12' AS DATE);
SELECT x, x, CAST(x AS INT) AS x, CAST(x AS DATE) AS x FROM x WHERE x > CAST('2000-01-01' AS DATE) ORDER BY x;
SELECT x, x, CAST(x AS INT) AS x, CAST(x AS DATE) AS x FROM x WHERE x = CAST('2012-01-01' AS DATE) OR x = 9000 ORDER BY x;
SELECT x, x, CAST(x AS INT) AS x, CAST(x AS DATE) AS x FROM x WHERE (x = CAST('2012-01-01' AS DATE) AND CONCAT(CAST(x AS TEXT), CAST(x AS TEXT)) = '2012-01-011000') OR (x = 9000) ORDER BY x;
SELECT x, x, CAST(x AS INT) AS x, CAST(x AS DATE) AS x FROM x WHERE (x = CAST('2012-01-01' AS DATE) AND CONCAT(CAST(x AS TEXT), CAST(x AS TEXT)) = 'foobar') OR (x = 9000) ORDER BY x;
SELECT x, x, CAST(x AS INT) AS x, CAST(x AS DATE) AS x FROM x WHERE (x = CAST('2012-01-01' AS DATE) AND CONCAT(CAST(x AS TEXT), CAST(x AS TEXT)) = '2012-01-011000') OR (x = 1337) ORDER BY x;
SELECT x, x, CAST(x AS INT) AS x, CAST(x AS DATE) AS x FROM x WHERE (x = CAST('2012-01-01' AS DATE) AND CONCAT(CAST(x AS TEXT), CAST(x AS TEXT)) = 'foobar') OR (x = 1337) ORDER BY x;
SELECT x FROM x ORDER BY 1;
SELECT x FROM x ORDER BY 1;
SELECT x FROM x ORDER BY 1;
PRAGMA x;
SELECT x.replace('\', '/').split('/')[-2] FROM x ORDER BY 1;
SELECT x, x.replace('\', '/').split('/')[-2], x FROM x ORDER BY 1;
SELECT x, x.replace('\', '/').split('/')[-2], x FROM x ORDER BY 1;
SELECT * EXCLUDE (x) FROM x ORDER BY 1;
SELECT * FROM x ORDER BY 1;
SELECT * EXCLUDE (x), x.replace('\', '/').split('/')[-2] FROM x ORDER BY 1;
SELECT x, x.replace('\', '/').split('/')[-2], x, x FROM x ORDER BY 1;
SELECT * EXCLUDE (x) FROM x ORDER BY 1;
SELECT * FROM x ORDER BY 1;
SELECT x, x, x FROM x ORDER BY 2;
SELECT x, x, x, x FROM x ORDER BY 2;
PRAGMA x;
SET x = '__TEST_DIR__';
CREATE TABLE x AS SELECT * FROM x;
COPY x TO '__TEST_DIR__/integers.csv' WITH (FORMAT CSV);
SELECT * FROM x;
CREATE TABLE x (x INT);
COPY x FROM '~/integers.csv';
SELECT * FROM x;
COPY x TO '__TEST_DIR__/homedir_integers1.csv';
COPY x TO '__TEST_DIR__/homedir_integers2.csv';
SELECT COUNT(*) FROM x;
PRAGMA x;
CREATE TABLE x AS SELECT * FROM x AS x;
CREATE TABLE x AS SELECT * FROM x AS x;
SELECT COUNT(*) FROM x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
SET x = '512MB';
SET x = 16;
COPY (SELECT x, x // 5 AS x FROM x AS x) TO '__TEST_DIR__/integers.csv';
SELECT COUNT(*) FROM x;
COPY (SELECT x, x // 5 AS x FROM x AS x) TO '__TEST_DIR__/integers.csv.gz';
SET x = '';
SET x = '80MB';
SET x = 1;
SELECT COUNT(*) FROM x;
PRAGMA x;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x;
SELECT x, x, x, x FROM x LIMIT 1;
SELECT x, x, x, x FROM x LIMIT 1;
SELECT x, x, x, x FROM x LIMIT 1;
SELECT x, x, x, x FROM x LIMIT 1;
SELECT x, x, x, x FROM x LIMIT 1;
SELECT x, x FROM x LIMIT 1;
SELECT x, x, x, x FROM x LIMIT 1;
SELECT x, x, x, x FROM x LIMIT 1;
SELECT x, x, x, x FROM x LIMIT 1;
SELECT x, x, x, x FROM x LIMIT 1;
SELECT x FROM x;
SELECT * FROM x;
SELECT x FROM x;
SELECT * FROM x;
SELECT x FROM x;
SELECT * FROM x;
SELECT x FROM x;
SELECT x FROM x;
SELECT x FROM x;
SELECT * FROM x;
PRAGMA x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT x FROM x;
SELECT x FROM x;
SELECT * FROM x;
CREATE TABLE x (x TEXT, x TEXT, x TEXT);
CREATE TABLE x (x TEXT, x TEXT, x TEXT);
COPY x FROM 'data/csv/null/multiple_nulls.csv' WITH (nullstr NULL, HEADER 1);
COPY x FROM 'data/csv/null/multiple_nulls.csv' WITH (nullstr NULL, HEADER 1);
COPY x FROM 'data/csv/null/multiple_nulls.csv' WITH (nullstr NULL, HEADER 1);
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
CREATE TABLE x (x INT, x TEXT, x DATE);
INSERT INTO x VALUES (42, 'hello world', NULL), (NULL, NULL, CAST('1992-01-01' AS DATE)), (100, 'thisisalongstring', CAST('2000-01-01' AS DATE));
COPY x TO '__TEST_DIR__/projection_pushdown.csv' WITH (FORMAT CSV);
CREATE VIEW x AS SELECT * FROM x;
SELECT COUNT(*) FROM x;
SELECT x, x, x FROM x ORDER BY x;
SELECT x FROM x ORDER BY x;
SELECT x FROM x ORDER BY x;
SELECT x.replace('\', '/').split('/')[-1] FROM x LIMIT 1;
PRAGMA x;
PRAGMA x;
PRAGMA x;
COPY (SELECT NULL) TO '__TEST_DIR__/single_null.csv' WITH (HEADER 0);
CREATE TABLE x (x INT);
COPY x FROM '__TEST_DIR__/single_null.csv' WITH (HEADER 0);
SELECT * FROM x;
PRAGMA x;
SELECT * FROM x;
SELECT * FROM x AS x WHERE x LIKE '%date.csv';
ATTACH '__TEST_DIR__/windows_test.db' AS x;
CREATE TABLE x.x AS SELECT * FROM x AS x;
SELECT SUM(x) FROM x.x;
DETACH s1;
ATTACH '__TEST_DIR__\windows_test.db' AS x;
SELECT SUM(x) FROM x.x;
PRAGMA x;
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
CREATE TABLE x (x INT, x TEXT, x INT, x INT, x INT, x INT, x INT, x TEXT, x TEXT, x TEXT, x TEXT, x INT, x INT, x INT, x TEXT, x TEXT, x TEXT, x INT);
COPY x FROM 'data/csv/customer.csv' WITH (FORMAT 'csv', quote '"', delimiter ',', header 0);
SELECT * FROM x;
CREATE TABLE x (x INT, x TEXT, x INT, x INT, x INT, x INT, x INT, x TEXT, x TEXT, x TEXT, x TEXT, x INT, x INT, x INT, x TEXT, x TEXT, x TEXT, x INT);
INSERT INTO x SELECT * FROM x;
SELECT COUNT(x) FROM x;
PRAGMA x;
COPY (SELECT 1 AS x, 2 AS x) TO '__TEST_DIR__/mismatch_types_except.csv';
SELECT * FROM x EXCEPT SELECT 'bla' AS x, 1 AS x;
PRAGMA x;
SELECT * FROM x;
PRAGMA x;
SELECT * FROM x;
PRAGMA x;
SELECT * FROM x;
SELECT x FROM x;
PRAGMA x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
CREATE TABLE x AS SELECT * FROM x;
SELECT x FROM x LIMIT 1;
SELECT TYPEOF(x) FROM x LIMIT 1;
CREATE TABLE x AS SELECT * FROM x;
SELECT * FROM x;
SELECT TYPEOF(x), TYPEOF(x), TYPEOF(x) FROM x LIMIT 1;
SELECT CAST('09001' AS INT);
SELECT CAST('00009001' AS INT);
PRAGMA x;
CREATE TABLE x (x INT, x TEXT, x INT);
INSERT INTO x SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
CREATE TABLE x (x TEXT, x INT, x INT);
INSERT INTO x SELECT * FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
CREATE TABLE x (x TEXT, x INT, x INT, x INT);
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
PRAGMA x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
CREATE OR REPLACE TABLE x AS (SELECT * FROM (VALUES ('a' || CHR(0) || 'b')) AS x);
COPY x TO '__TEST_DIR__/csv2tsv.tsv' WITH (header FALSE, delimiter '\t', escape '', quote '');
SELECT * FROM x;
PRAGMA x;
DESCRIBE SELECT * FROM x;
PRAGMA x;
CREATE TABLE x AS SELECT * FROM x;
SELECT x FROM x;
SELECT TYPEOF(x) FROM x LIMIT 1;
PRAGMA x;
WITH x AS (SELECT 'a.csv' AS x UNION ALL SELECT 'b.csv') SELECT * FROM x WHERE x.x > -1.0 LIMIT 10;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
CREATE TABLE x AS SELECT * FROM x;
SELECT [x.replace('\', '/') FOR x IN GETVARIABLE('csv_files')];
SELECT * FROM x ORDER BY 1;
PRAGMA x;
CREATE VIEW x AS SELECT * FROM x;
WITH RECURSIVE x AS (SELECT 1, 0 UNION ALL (SELECT x + 1, x + x FROM x, x WHERE x <= x)) SELECT * FROM x ORDER BY x;
PRAGMA x;
WITH RECURSIVE x AS (SELECT * FROM x WHERE '2003-01-01' < "x" AND "x" < '2010-01-01' AND "x" > 1000000), x AS (SELECT x, "x" AS x, "x" AS x, [{'x': "x", 'x': "x", 'x': "x"}] AS x FROM x WHERE "x" = 'Condo' UNION ALL SELECT x.x, x.x, x."x" AS x, LIST_APPEND(x.x, {'x': "x", 'x': "x", 'x': "x"}) AS x FROM x, x WHERE x.x = x.x AND ((LENGTH(x.x) = 1 AND LIST_CONTAINS(['Residential', 'Single Family'], x."x")) OR (LENGTH(x.x) = 2 AND x."x" = 'Condo') OR (LENGTH(x.x) = 3 AND LIST_CONTAINS(['Residential', 'Single Family'], x."x"))) AND x.x < x."x" AND x."x" < (x.x + INTERVAL '6' DAYS)) SELECT * FROM x ORDER BY ALL;
SET x = 'expression_rewriter';
WITH RECURSIVE x AS (SELECT * FROM x WHERE '2003-01-01' < "x" AND "x" < '2010-01-01' AND "x" > 1000000), x AS (SELECT x, "x" AS x, "x" AS x, [{'x': "x", 'x': "x", 'x': "x"}] AS x FROM x WHERE "x" = 'Condo' UNION ALL SELECT x.x, x.x, x."x" AS x, LIST_APPEND(x.x, {'x': "x", 'x': "x", 'x': "x"}) AS x FROM x, x WHERE x.x = x.x AND ((LENGTH(x.x) = 1 AND LIST_CONTAINS(['Residential', 'Single Family'], x."x")) OR (LENGTH(x.x) = 2 AND x."x" = 'Condo') OR (LENGTH(x.x) = 3 AND LIST_CONTAINS(['Residential', 'Single Family'], x."x"))) AND x.x < x."x" AND x."x" < (x.x + INTERVAL '6' DAYS)) SELECT * FROM x ORDER BY ALL;
PRAGMA x;
CREATE TABLE x AS SELECT * FROM x;
WITH RECURSIVE x AS (SELECT 1, CAST(NULL AS DATE) UNION ALL (SELECT x + 1, x FROM x, x WHERE x < 5)) SELECT * FROM x ORDER BY x;
WITH RECURSIVE x AS (SELECT 1, CAST(NULL AS DATE) UNION ALL (SELECT x + 1, x FROM x, x WHERE x < 5)) SELECT * FROM x ORDER BY x;
SELECT * FROM x;
WITH RECURSIVE x AS (SELECT 1, CAST(NULL AS DATE) UNION ALL (SELECT x + 1, x FROM x, x AS x WHERE x < 5)) SELECT * FROM x ORDER BY x;
PRAGMA x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
CREATE TABLE x AS SELECT * FROM x;
SELECT COUNT(*) FROM x;
DROP TABLE x;
CREATE TABLE x AS SELECT * FROM x;
CREATE TABLE x AS SELECT * FROM x;
DROP TABLE x;
CREATE TABLE x AS SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
SELECT * FROM x;
PRAGMA x;
SELECT * FROM x ORDER BY 1;
PRAGMA x;
SELECT * FROM x;
SELECT x FROM x;
PRAGMA x;
SELECT * FROM x;
SELECT COUNT(*) FROM x;
PRAGMA x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
SET x = 1;
SELECT COUNT(*) FROM x;
PRAGMA x;
SELECT x FROM x;
SELECT x FROM x;
SELECT x FROM x;
SELECT x FROM x;
SELECT x FROM x;
CREATE TABLE x AS SELECT '2024/12/12' AS x, '01:02:03' AS x, '2020/01/01 01:02:03' AS x FROM x;
INSERT INTO x VALUES ('1', '1', '1');
COPY x TO '__TEST_DIR__/date_int.csv' WITH (FORMAT CSV);
SELECT x FROM x;
PRAGMA x;
SELECT x, x, MIN(x) AS x, MAX(x) AS x FROM x GROUP BY x, x ORDER BY ALL LIMIT 10;
PRAGMA x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
SELECT x FROM x;
PRAGMA x;
CREATE TABLE x (x DATE);
COPY x FROM 'data/csv/auto_date/date_example_1.csv';
COPY x FROM 'data/csv/auto_date/date_example_2.csv';
SELECT * FROM x;
DROP TABLE x;
CREATE TABLE x (x DATE);
COPY x FROM 'data/csv/auto_date/date_example_1.csv' WITH (dateformat 'AUTO');
COPY x FROM 'data/csv/auto_date/date_example_2.csv' WITH (dateformat 'AUTO');
SELECT * FROM x;
CREATE TABLE x (x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x DATE, x TEXT, x TEXT, x TEXT, x BOOLEAN, x INT, x INT, x DATE);
COPY x FROM 'data/csv/auto_date/device_metadata_1.csv' WITH (delimiter ',', skip '1', header 'false');
SELECT * FROM x;
PRAGMA x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
CREATE TABLE x AS SELECT * FROM x;
SELECT COUNT(*) FROM x;
CREATE TABLE x AS SELECT * FROM x;
SELECT COUNT(*) FROM x;
PRAGMA x;
COPY x TO '__TEST_DIR__/lineitem_100.csv.gz';
CREATE TABLE x (x INT NOT NULL, x INT NOT NULL, x INT NOT NULL, x INT NOT NULL, x DECIMAL(15, 2) NOT NULL, x DECIMAL(15, 2) NOT NULL, x DECIMAL(15, 2) NOT NULL, x DECIMAL(15, 2) NOT NULL, x TEXT NOT NULL, x TEXT NOT NULL, x DATE NOT NULL, x DATE NOT NULL, x DATE NOT NULL, x TEXT NOT NULL, x TEXT NOT NULL, x TEXT NOT NULL);
INSERT INTO x SELECT * FROM x;
SELECT COUNT(*) FROM x;
PRAGMA x;
CREATE TABLE x (x INT, x TEXT, x TEXT, x TEXT);
COPY x FROM 'data/csv/test/big_header.csv' WITH (DELIMITER '	', HEADER FALSE, SKIP 2);
SELECT COUNT(x) FROM x WHERE x = '!';
INSERT INTO x SELECT * FROM x;
SELECT COUNT(x) FROM x WHERE x = '!';
INSERT INTO x SELECT * FROM x;
SELECT COUNT(x) FROM x WHERE x = '!';
PRAGMA x;
COPY (SELECT 1 AS x, REPEAT('a', 40000000) AS x FROM x) TO '__TEST_DIR__/bigval.csv';
CREATE TABLE x AS SELECT * FROM x;
CREATE TABLE x AS SELECT * FROM x;
SELECT COUNT(*) FROM x;
PRAGMA x;
CREATE TABLE x (x BLOB);
COPY x FROM 'data/csv/test/blob.csv' WITH (HEADER 0, AUTO_DETECT 0);
SELECT x FROM x;
COPY x TO '__TEST_DIR__/blob.csv';
DELETE FROM x;
COPY x FROM '__TEST_DIR__/blob.csv';
SELECT x FROM x;
COPY x TO '__TEST_DIR__/blob.csv' WITH (DELIMITER 'A', QUOTE 'B', ESCAPE 'C');
DELETE FROM x;
COPY x FROM '__TEST_DIR__/blob.csv' WITH (DELIMITER 'A', QUOTE 'B', ESCAPE 'C');
SELECT x FROM x;
PRAGMA x;
SELECT * FROM x;
PRAGMA x;
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
COPY (SELECT 'name' AS x, 1 AS x FROM x UNION ALL SELECT 'name', 'hello world' UNION ALL SELECT 'name', 'xxxxx' UNION ALL SELECT 'name', 1 FROM x) TO '__TEST_DIR__/bigcsv.csv';
SELECT COUNT(*) FROM x;
SELECT COUNT(x), COUNT(*) FROM x;
SELECT x, x, COUNT(*) FROM x GROUP BY ALL;
SELECT x, x, COUNT(*) FROM x GROUP BY ALL ORDER BY ALL;
PRAGMA x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x LIMIT 5;
SELECT * FROM x WHERE x = 20;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
PRAGMA x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x LIMIT 5;
SELECT * FROM x WHERE x = 20;
SELECT COUNT(*) FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT x, x FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT x, x FROM x;
SELECT x, x FROM x;
SELECT x, x FROM x;
PRAGMA x;
CREATE TABLE x (x INT NOT NULL, x INT NOT NULL, x INT NOT NULL);
COPY x FROM 'data/csv/test/test_comp.csv.gzz' WITH (COMPRESSION 'gzip', AUTO_DETECT 1);
SELECT COUNT(*) FROM x;
SELECT x, x, x FROM x ORDER BY x;
DROP TABLE x;
CREATE TABLE x (x INT NOT NULL, x INT NOT NULL, x INT NOT NULL);
COPY x FROM 'data/csv/test/test_comp.csv.gz' WITH (COMPRESSION 'infer', AUTO_DETECT 1);
SELECT COUNT(*) FROM x;
SELECT x, x, x FROM x ORDER BY x;
DROP TABLE x;
COPY x FROM 'data/csv/test/test_comp.csv.gz' WITH (COMPRESSION 'none');
CREATE TABLE x AS SELECT * FROM x;
SELECT COUNT(*) FROM x;
SELECT x, x, x FROM x ORDER BY x;
DROP TABLE x;
CREATE TABLE x AS SELECT * FROM x;
SELECT COUNT(*) FROM x;
SELECT x, x, x FROM x ORDER BY x;
PRAGMA x;
CREATE TABLE x (x INT, x INT, x TEXT);
COPY x FROM 'data/csv/test/test.csv';
SELECT COUNT(x), SUM(x) FROM x;
SELECT * FROM x ORDER BY 1 LIMIT 3;
COPY x TO '__TEST_DIR__/test2.csv';
CREATE TABLE x (x INT, x INT, x TEXT);
COPY x FROM '__TEST_DIR__/test2.csv';
SELECT * FROM x ORDER BY 1 LIMIT 3;
CREATE TABLE x (x INT, x INT, x TEXT, x INT);
COPY x FROM '__TEST_DIR__/test2.csv' WITH (NULL_PADDING 0);
COPY (SELECT x, x FROM x WHERE x < 4000) TO '__TEST_DIR__/test3.csv';
CREATE TABLE x (x INT, x INT);
COPY x FROM '__TEST_DIR__/test3.csv';
SELECT * FROM x ORDER BY 1 LIMIT 3;
COPY x (x, x) TO '__TEST_DIR__/test4.csv' WITH (DELIMITER ',', HEADER FALSE);
CREATE TABLE x (x INT, x INT, x TEXT);
COPY x (x, x) FROM '__TEST_DIR__/test4.csv' WITH (DELIM ',');
SELECT * FROM x ORDER BY 1 LIMIT 3;
COPY x (x, x) FROM '__TEST_DIR__/test4.csv' WITH (SEP ',', HEADER 0.2);
COPY x (x, x) FROM '__TEST_DIR__/test4.csv' WITH (SEP);
COPY x (x, x) FROM '__TEST_DIR__/test4.csv' WITH (SEP 1);
COPY x (x, x) FROM '__TEST_DIR__/test4.csv' WITH (FORMAT 'csv', FORMAT 'some_other_copy_function');
COPY x (x, x) FROM '__TEST_DIR__/test4.csv' WITH (FORMAT 'some_other_copy_function', FORMAT 'csv');
COPY x (x, x) FROM '__TEST_DIR__/test4.csv' WITH (ESCAPE 1);
COPY x (x, x) FROM '__TEST_DIR__/test4.csv' WITH (ESCAPE);
COPY x (x, x) FROM '__TEST_DIR__/test4.csv' WITH (QUOTE 1);
COPY x (x, x) FROM '__TEST_DIR__/test4.csv' WITH (QUOTE);
COPY x (x, x) FROM '__TEST_DIR__/test4.csv' WITH (FORMAT);
COPY x (x, x) FROM '__TEST_DIR__/test4.csv' WITH (ENCODING);
COPY x (x, x) FROM '__TEST_DIR__/test4.csv' WITH (ENCODING 42);
COPY x (x, x) FROM '__TEST_DIR__/test4.csv' WITH (ENCODING 'utf-42');
COPY x (x, x) FROM '__TEST_DIR__/test4.csv' WITH (MAGIC '42');
COPY x TO '__TEST_DIR__/test_crlf.csv' WITH (new_line '\r\n');
SELECT COUNT(*) FROM x;
COPY x TO '__TEST_DIR__/test_r.csv' WITH (new_line '\r');
SELECT COUNT(*) FROM x;
COPY x TO '__TEST_DIR__/test_n.csv' WITH (new_line '\n');
SELECT COUNT(*) FROM x;
COPY x TO '__TEST_DIR__/test_crlfe.csv' WITH (new_line e'\r\n');
SELECT COUNT(*) FROM x;
COPY x TO '__TEST_DIR__/test_re.csv' WITH (new_line e'\r');
SELECT COUNT(*) FROM x;
COPY x TO '__TEST_DIR__/test_en.csv' WITH (new_line e'\n');
SELECT COUNT(*) FROM x;
DROP TABLE x;
CREATE TABLE x (x INT, x INT, x TEXT);
COPY x FROM 'data/csv/test/test_pipe.csv' WITH (SEPARATOR '|');
COPY x FROM 'data/csv/test/too_many_values.csv';
COPY x FROM 'data/csv/test/test_null_csv.csv' WITH (DELIMITER '|');
COPY x FROM 'data/csv/test/invalid_utf.csv' WITH (DELIMITER '|');
CREATE TABLE x (x INT, x INT, x TEXT);
COPY x FROM 'data/csv/test/empty.csv' WITH (HEADER 0);
CREATE TABLE x (x TEXT);
COPY x FROM 'data/csv/test/unterminated.csv' WITH (HEADER 0, AUTO_DETECT FALSE, strict_mode TRUE);
CREATE TABLE x (x INT, x INT, x TEXT);
COPY x FROM 'data/csv/test/vsize.csv';
PRAGMA x;
CREATE TABLE x (x INT, x TEXT DEFAULT ('hello'), x INT DEFAULT (3 + 4));
COPY x (x) FROM 'data/csv/test/test_default.csv';
COPY x (x) FROM 'data/csv/test/test_default.csv';
SELECT COUNT(x), COUNT(x), COUNT(x), MIN(LENGTH(x)), MAX(LENGTH(x)), SUM(x), SUM(x) FROM x;
PRAGMA x;
CREATE TABLE x (x INT NOT NULL, x INT NOT NULL, x INT NOT NULL, x INT NOT NULL, x INT NOT NULL, x DECIMAL(15, 2) NOT NULL, x DECIMAL(15, 2) NOT NULL, x DECIMAL(15, 2) NOT NULL, x TEXT NOT NULL, x TEXT NOT NULL, x DATE NOT NULL, x DATE NOT NULL, x DATE NOT NULL, x TEXT NOT NULL, x TEXT NOT NULL, x TEXT NOT NULL);
COPY x FROM 'data/csv/lineitem1k.tbl.gz' WITH (DELIMITER '|');
SELECT COUNT(*) FROM x;
SELECT x FROM x WHERE x = 1 ORDER BY x;
COPY x TO '__TEST_DIR__/lineitem1k.csv.gz' WITH (DELIMITER '|', HEADER);
CREATE TABLE x AS SELECT * FROM x;
CREATE TABLE x AS SELECT * FROM x;
PRAGMA x;
CREATE TABLE x (x INT);
COPY x FROM 'data/csv/test/many_empty_lines.csv' WITH (HEADER 0);
SELECT SUM(x) FROM x;
PRAGMA x;
CREATE TABLE x (x INT, x TEXT, x TEXT, x TEXT, x TEXT);
COPY x FROM 'data/csv/test/test_null_option.csv' WITH (NULL 'NULL');
SELECT * FROM x ORDER BY 1 LIMIT 3;
DELETE FROM x;
COPY x FROM 'data/csv/test/test_null_option.csv' WITH (NULL '');
SELECT * FROM x ORDER BY 1 LIMIT 3;
DELETE FROM x;
COPY x FROM 'data/csv/test/test_null_option.csv' WITH (NULL 'test');
SELECT * FROM x ORDER BY 1 LIMIT 3;
DELETE FROM x;
COPY x FROM 'data/csv/test/test_null_option.csv' WITH (NULL 'null');
SELECT * FROM x ORDER BY 1 LIMIT 3;
COPY x FROM 'data/csv/test/test_null_option.csv' WITH (NULL NULL);
COPY x FROM 'data/csv/test/test_null_option.csv' WITH (NULL 'null,', DELIMITER ',');
COPY x FROM 'data/csv/test/test_null_option.csv' WITH (DELIMITER 'null', NULL 'null');
COPY x FROM 'data/csv/test/test_null_option.csv' WITH (DELIMITER 'null', NULL 'nu');
COPY x FROM 'data/csv/test/test_null_option.csv' WITH (NULL);
CREATE TABLE x (x INT, x INT, x TEXT, x TEXT);
COPY x FROM 'data/csv/test/test_null_option.csv' WITH (NULL 'null');
COPY x TO '__TEST_DIR__/test_null_option_2.csv';
DELETE FROM x;
COPY x FROM '__TEST_DIR__/test_null_option_2.csv';
SELECT * FROM x ORDER BY 1 LIMIT 3;
COPY x TO '__TEST_DIR__/test_null_option_3.csv' WITH (NULL '');
DELETE FROM x;
COPY x FROM '__TEST_DIR__/test_null_option_3.csv' WITH (NULL '');
SELECT * FROM x ORDER BY 1 LIMIT 3;
COPY x TO '__TEST_DIR__/test_null_option_4.csv' WITH (NULL 'null');
DELETE FROM x;
COPY x FROM '__TEST_DIR__/test_null_option_4.csv' WITH (NULL 'null');
SELECT * FROM x ORDER BY 1 LIMIT 3;
PRAGMA x;
CREATE TABLE x (x DATE, x TEXT, x INT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x INT);
COPY x FROM 'data/csv/real/tmp2013-06-15.csv.gz' WITH (DELIMITER ',', HEADER);
SELECT * FROM x LIMIT 5;
PRAGMA x;
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
COPY (SELECT 1 AS x, 2 AS x, 3 AS x) TO '__TEST_DIR__/dupe_cols.csv' WITH (FORMAT CSV, HEADER);
SELECT x, "x", "x" FROM x;
COPY (SELECT 1 AS x, 2 AS x, 3 AS "x") TO '__TEST_DIR__/dupe_cols.csv' WITH (FORMAT CSV, HEADER);
SELECT x, "x", "x" FROM x;
COPY (SELECT 1 AS x, 3 AS "x", 2 AS x) TO '__TEST_DIR__/dupe_cols.csv' WITH (FORMAT CSV, HEADER);
SELECT x, "x", "x" FROM x;
PRAGMA x;
CREATE TABLE x (x SMALLINT NOT NULL /* PRIMARY KEY */, x TEXT, x TEXT, x TEXT, x INT);
COPY x FROM 'data/csv/venue_pipe.csv';
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
CREATE TABLE x (x SMALLINT NOT NULL /* PRIMARY KEY */, x TEXT, x TEXT, x TEXT, x TEXT);
INSERT INTO x SELECT * FROM x;
SELECT COUNT(*) FROM x;
DROP TABLE x;
CREATE TABLE x (x SMALLINT NOT NULL /* PRIMARY KEY */, x TEXT, x TEXT, x TEXT, x TEXT);
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
COPY x FROM 'data/csv/venue_pipe_big.csv';
SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
PRAGMA x;
PRAGMA x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
CREATE TABLE x (x INT, x INT, x TEXT);
COPY x FROM 'data/csv/test/no_newline.csv';
SELECT * FROM x LIMIT 5;
PRAGMA x;
SELECT x, x FROM x;
SELECT COUNT(*) FROM x;
CREATE VIEW x AS SELECT * FROM x;
SELECT COUNT(*) FROM x;
SELECT x, x, x FROM x;
PRAGMA x;
COPY (SELECT CAST('1992-01-01' AS DATE) AS x, 42 AS x, 'hello' AS x) TO '__TEST_DIR__/projection_pushdown_f1.csv' WITH (HEADER, DELIMITER '|');
COPY (SELECT CAST('1993-01-01' AS DATE) AS x, 84 AS x, 'world' AS x) TO '__TEST_DIR__/projection_pushdown_f2.csv' WITH (HEADER, DELIMITER '|');
COPY (SELECT CAST('1994-01-01' AS DATE) AS x, 100 AS x, 'this is a long string' AS x) TO '__TEST_DIR__/projection_pushdown_f3.csv' WITH (HEADER, DELIMITER '|');
CREATE VIEW x AS SELECT * FROM x;
PRAGMA x;
SELECT * FROM x ORDER BY 1;
SELECT * FROM x ORDER BY ALL;
SELECT * FROM x ORDER BY 1;
SELECT * FROM x ORDER BY ALL;
SELECT * FROM x;
PRAGMA x;
SELECT COUNT(*), MIN(x), MAX(x), MIN(STRLEN(x)), MAX(STRLEN(x)), AVG(STRLEN(x)) FROM x;
PRAGMA x;
COPY (SELECT CAST('2021-05-25 04:55:03.382494 UTC' AS TIMESTAMP) AS x, CAST('2021-05-25 04:55:03.382494 UTC' AS TIMESTAMPTZ) AS x) TO '__TEST_DIR__/timestamps.csv' WITH (timestampformat '%A');
SET x = 'UTC';
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT x FROM x;
SELECT * FROM x;
SELECT x FROM x;
SELECT * FROM x;
CREATE TABLE x AS SELECT '1; 2020-01-01 00:00:00+00' AS x FROM x;
COPY x TO '__TEST_DIR__/timetz.csv';
SELECT x FROM x;
INSERT INTO x VALUES ('2; thisisastring');
COPY x TO '__TEST_DIR__/timetz_2.csv';
SELECT x FROM x;
PRAGMA x;
CREATE TABLE x (x DATE);
COPY x FROM 'data/csv/test/date.csv';
SELECT CAST(x AS TEXT) FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
CREATE TABLE x (x DATE);
COPY x FROM 'data/csv/test/dateformat.csv' WITH (AUTO_DETECT 0, HEADER 0);
COPY x FROM 'data/csv/test/dateformat.csv' WITH (HEADER 0, DATEFORMAT '%d/%m/%Y');
SELECT * FROM x;
COPY x FROM 'data/csv/test/dateformat.csv' WITH (HEADER 0, DATEFORMAT '%m/%d/%Y');
SELECT * FROM x ORDER BY x;
CREATE TABLE x (x DATE);
COPY x TO '__TEST_DIR__/dateformat.csv' WITH (HEADER 0, DATEFORMAT '%d/%m/%Y');
COPY x FROM '__TEST_DIR__/dateformat.csv' WITH (HEADER 0, DATEFORMAT '%d/%m/%Y');
SELECT * FROM x ORDER BY 1;
CREATE TABLE x (x TIMESTAMP);
COPY x FROM 'data/csv/test/timestampformat.csv' WITH (HEADER 0, DELIMITER '|', TIMESTAMPFORMAT '%a %d, %B %Y, %I:%M:%S %p');
SELECT * FROM x;
CREATE TABLE x (x TIMESTAMP);
COPY x TO '__TEST_DIR__/timestampformat.csv' WITH (HEADER 0, TIMESTAMPFORMAT '%a %d, %B %Y, %I:%M:%S %p');
COPY x FROM '__TEST_DIR__/timestampformat.csv' WITH (HEADER 0, TIMESTAMPFORMAT '%a %d, %B %Y, %I:%M:%S %p');
SELECT * FROM x ORDER BY 1;
DELETE FROM x;
COPY x TO '__TEST_DIR__/timestampformat.csv' WITH (HEADER 0, TIMESTAMPFORMAT ISO);
COPY x FROM '__TEST_DIR__/timestampformat.csv' WITH (HEADER 0);
SELECT * FROM x ORDER BY 1;
COPY x FROM 'data/csv/test/dateformat.csv' WITH (HEADER 0, DATEFORMAT '%');
COPY x FROM 'data/csv/test/timestampformat.csv' WITH (HEADER 0, DELIMITER '|', TIMESTAMPFORMAT '%');
SELECT x FROM x;
SELECT x FROM x;
PRAGMA x;
SELECT * FROM x;
SELECT x FROM x;
SELECT * FROM x;
SELECT x[1].x FROM x;
SELECT x FROM x;
SELECT * FROM x;
SELECT x[1].x, x[2].x FROM x;
SELECT * FROM x;
SELECT x FROM x;
PRAGMA x;
SELECT * FROM x;
SELECT TYPEOF(x) FROM x;
SELECT * FROM x;
SELECT TYPEOF(x) FROM x;
SELECT * FROM x;
SELECT TYPEOF(x) FROM x;
SELECT TYPEOF(x) FROM x;
SELECT TYPEOF(x) FROM x;
SELECT TYPEOF(x) FROM x;
SELECT TYPEOF(x) FROM x;
PRAGMA x;
SELECT TYPEOF(x) FROM x LIMIT 1;
SELECT TYPEOF(x) FROM x LIMIT 1;
SELECT TYPEOF(x) FROM x LIMIT 1;
SELECT TYPEOF(x) FROM x LIMIT 1;
SELECT TYPEOF(x) FROM x LIMIT 1;
PRAGMA x;
CREATE TABLE x (x TEXT, x TEXT);
COPY x FROM 'data/csv/no_quote.csv' WITH (QUOTE '', ESCAPE '', DELIM '|');
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
CREATE TABLE x (x INT, x INT, x TEXT);
COPY x FROM 'data/csv/test/test.csv' WITH (encoding 'utf-8');
SELECT * FROM x;
COPY x TO 'data/csv/test/test.csv' WITH (encoding 'utf-16');
SELECT * FROM x;
DROP TABLE x;
CREATE TABLE x (x TEXT, x INT);
COPY x FROM 'data/csv/encodings/latin1.csv' WITH (encoding 'latin-1');
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT COUNT(*) FROM x;
PRAGMA x;
SELECT * FROM x;
PRAGMA x;
COPY (SELECT * REPLACE (CASE WHEN ROW_NUMBER() OVER () = 1234567 THEN 'thisisnotanumber' ELSE CAST(x AS TEXT) END AS x) FROM x) TO '__TEST_DIR__/lineitem_malformed.csv';
COPY x FROM '__TEST_DIR__/lineitem_malformed.csv';
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (42);
INSERT INTO x VALUES (42);
DROP TABLE x;
DROP TABLE x;
SELECT * FROM x;
PRAGMA x;
BEGIN;
CREATE TABLE x (x TEXT NOT NULL);
INSERT INTO x VALUES ('');
INSERT INTO x VALUES ('');
BEGIN;
BEGIN;
BEGIN;
BEGIN;
CREATE TABLE x (x TEXT NOT NULL, x TEXT NOT NULL, x TEXT NOT NULL, x TEXT);
INSERT INTO x VALUES ('', '', '', '');
INSERT INTO x VALUES ('', '', '', '');
SELECT * FROM x;
PRAGMA x;
SELECT * FROM x;
PRAGMA x;
SELECT x, x, x, x.replace('\', '/') FROM x;
SELECT x, x, x, x.replace('\', '/') FROM x WHERE x LIKE '%d.csv';
SELECT x, x, x, x.replace('\', '/') FROM x WHERE x LIKE '%d.csv';
SELECT x, x, x, x.replace('\', '/') FROM x WHERE x LIKE '%d.csv';
PRAGMA x;
CREATE TABLE x (x INT, x TEXT, x TEXT);
COPY x FROM 'data/csv/test/force_not_null.csv' WITH (FORCE_NOT_NULL (x), NULL 'test', HEADER 0, allow_quoted_nulls FALSE);
SELECT * FROM x ORDER BY 1;
DELETE FROM x;
COPY x (x, x, x) FROM 'data/csv/test/force_not_null.csv' WITH (FORCE_NOT_NULL (x), NULL 'test', HEADER 0, allow_quoted_nulls FALSE);
SELECT * FROM x ORDER BY 1;
COPY x TO 'data/csv/test/force_not_null.csv' WITH (FORCE_NOT_NULL (x), NULL 'test', HEADER 0);
COPY x FROM 'data/csv/test/force_not_null.csv' WITH (FORCE_NOT_NULL, NULL 'test');
COPY x FROM 'data/csv/test/force_not_null.csv' WITH (FORCE_NOT_NULL 42, NULL 'test');
COPY x (x, x) FROM 'data/csv/test/force_not_null_reordered.csv' WITH (FORCE_NOT_NULL (x, x));
COPY x FROM 'data/csv/test/force_not_null_reordered.csv' WITH (FORCE_NOT_NULL (x, x));
COPY x FROM 'data/csv/test/force_not_null.csv' WITH (FORCE_NOT_NULL (x), HEADER 0);
COPY x FROM 'data/csv/test/force_not_null_inull.csv' WITH (FORCE_NOT_NULL (x), HEADER 0);
PRAGMA x;
CREATE TABLE x (x INT, x TEXT, x TEXT);
COPY x FROM 'data/csv/test/force_quote.csv' WITH (HEADER 0);
COPY x TO '__TEST_DIR__/test_star.csv' WITH (FORCE_QUOTE *, HEADER 0);
COPY x TO '__TEST_DIR__/test_chosen_columns.csv' WITH (FORCE_QUOTE (x, x), QUOTE 't', NULL 'ea');
CREATE TABLE x (x INT, x TEXT, x TEXT);
COPY x FROM '__TEST_DIR__/test_chosen_columns.csv' WITH (QUOTE 't', NULL 'ea');
SELECT * FROM x;
COPY x (x, x, x) TO '__TEST_DIR__/test_reorder.csv' WITH (FORCE_QUOTE (x, x), NULL 'test');
CREATE TABLE x (x INT, x TEXT, x TEXT);
COPY x (x, x, x) FROM '__TEST_DIR__/test_reorder.csv' WITH (NULL 'test');
SELECT * FROM x;
COPY x (x, x) TO '__TEST_DIR__/test_reorder.csv' WITH (FORCE_QUOTE (x, x));
COPY x TO '__TEST_DIR__/test_reorder.csv' WITH (FORCE_QUOTE (x, x));
COPY x FROM '__TEST_DIR__/test_reorder.csv' WITH (FORCE_QUOTE (x, x));
COPY x TO '__TEST_DIR__/test_reorder.csv' WITH (FORCE_QUOTE);
COPY x TO '__TEST_DIR__/test_reorder.csv' WITH (FORCE_QUOTE 42);
PRAGMA x;
COPY (SELECT x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x FROM x LIMIT 10000 OFFSET 0) TO '__TEST_DIR__/lineitem_part1.csv';
COPY (SELECT x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x FROM x LIMIT 10000 OFFSET 10000) TO '__TEST_DIR__/lineitem_part2.csv';
COPY (SELECT x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x FROM x LIMIT 10000 OFFSET 20000) TO '__TEST_DIR__/lineitem_part3.csv';
COPY (SELECT x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x FROM x LIMIT 10000 OFFSET 30000) TO '__TEST_DIR__/lineitem_part4.csv';
COPY (SELECT x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x AS x FROM x LIMIT 10000 OFFSET 40000) TO '__TEST_DIR__/lineitem_part5.csv';
CREATE TABLE x AS SELECT * FROM x;
SELECT COUNT(*) FROM x;
DROP TABLE x;
CREATE TABLE x AS SELECT * FROM x;
SELECT COUNT(*) FROM x;
PRAGMA x;
CREATE TABLE x AS SELECT 1 AS x, 1 AS x FROM x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x SELECT NULL AS x, NULL AS x FROM x;
INSERT INTO x VALUES (3, 4);
COPY x TO '__TEST_DIR__/null_glob_reorder_1.csv';
COPY x TO '__TEST_DIR__/null_glob_reorder_2.csv';
SELECT x, x FROM x WHERE NOT x IS NULL ORDER BY ALL;
PRAGMA x;
CREATE TABLE x AS SELECT x, NFC_NORMALIZE(x) AS x, x FROM x;
SELECT * FROM x ORDER BY 1;
COPY x TO '__TEST_DIR__/greek_utf8.csv' WITH (DELIMITER ' ', HEADER);
DELETE FROM x;
SELECT * FROM x;
COPY x FROM '__TEST_DIR__/greek_utf8.csv' WITH (DELIMITER ' ', HEADER);
SELECT * FROM x ORDER BY 1;
PRAGMA x;
SELECT x FROM x;
SELECT x FROM x;
PRAGMA x;
SELECT x FROM x;
SELECT x FROM x;
SELECT REGEXP_MATCHES(x, 'foo') FROM (SELECT x FROM x);
SELECT REGEXP_MATCHES(x, 'foo') FROM (SELECT x FROM x);
SELECT REGEXP_MATCHES(x, 'foo') FROM (SELECT x FROM x);
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
CREATE TABLE x (x INT, x INT);
COPY x FROM 'data/csv/test/error_too_little.csv' WITH (HEADER, IGNORE_ERRORS, NULL_PADDING FALSE);
COPY x FROM 'data/csv/test/error_too_little.csv' WITH (HEADER, NULL_PADDING FALSE);
SELECT * FROM x AS x;
DELETE FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
SELECT * FROM x AS x;
DELETE FROM x;
COPY x FROM 'data/csv/test/error_too_little_single.csv' WITH (HEADER, IGNORE_ERRORS, NULL_PADDING 0);
COPY x FROM 'data/csv/test/error_too_little_single.csv' WITH (HEADER, NULL_PADDING 0);
SELECT * FROM x AS x;
DELETE FROM x;
DELETE FROM x;
COPY x FROM 'data/csv/test/error_too_many.csv' WITH (HEADER);
SELECT * FROM x AS x;
DELETE FROM x;
COPY x FROM 'data/csv/test/error_invalid_type.csv' WITH (HEADER, IGNORE_ERRORS);
COPY x FROM 'data/csv/test/error_invalid_type.csv' WITH (HEADER);
SELECT * FROM x AS x;
CREATE TABLE x (x INT, x TEXT, x TEXT, x TEXT);
COPY x FROM 'data/csv/test/test_incompatible_type_with_nullable.csv';
SELECT * FROM x;
SELECT * FROM x LIMIT 10;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
CREATE TABLE x (x INT, x INT);
COPY x FROM 'data/csv/test/error_too_little_end_of_filled_chunk.csv' WITH (HEADER, IGNORE_ERRORS, NULL_PADDING 0, AUTO_DETECT 0);
COPY x FROM 'data/csv/test/error_too_little_end_of_filled_chunk.csv' WITH (HEADER, NULL_PADDING 0, AUTO_DETECT 0);
SELECT * FROM x LIMIT 1;
SELECT COUNT(*) FROM x;
DROP TABLE x;
CREATE TABLE x (x INT, x INT);
COPY x FROM 'data/csv/test/error_too_little_end_of_filled_chunk.csv' WITH (HEADER, IGNORE_ERRORS, NULL_PADDING 0);
COPY x FROM 'data/csv/test/error_too_little_end_of_filled_chunk.csv' WITH (HEADER, NULL_PADDING 0);
SELECT * FROM x LIMIT 1;
SELECT COUNT(*) FROM x;
PRAGMA x;
SELECT * FROM x;
PRAGMA x;
CREATE TABLE x (x INT NOT NULL PRIMARY KEY, x INT NOT NULL, x INT NOT NULL, x TEXT NOT NULL, x TEXT);
COPY x FROM 'data/csv/real/imdb_movie_info_escaped.csv' WITH (DELIMITER ',', ESCAPE '\');
SELECT * FROM x;
PRAGMA x;
CREATE TABLE x (x INT NOT NULL /* primary key */, x TEXT NOT NULL, x TEXT);
INSERT INTO x SELECT * FROM x;
SELECT * FROM x ORDER BY ALL;
DROP TABLE x;
PRAGMA x;
CREATE TABLE x (x INT NOT NULL /* primary key */, x TEXT NOT NULL, x TEXT);
INSERT INTO x SELECT * FROM x;
SELECT * FROM x;
CREATE TABLE x (x INT NOT NULL /* primary key */);
INSERT INTO x SELECT x FROM x;
SELECT * FROM x;
INSERT INTO x SELECT x FROM x;
DROP TABLE x;
CREATE TABLE x (x TEXT NOT NULL, x INT NOT NULL /* primary key */);
INSERT INTO x SELECT x, x FROM x;
SELECT * FROM x;
INSERT INTO x SELECT x, x FROM x;
DROP TABLE x;
CREATE TABLE x (x TEXT, x INT NOT NULL /* primary key */);
INSERT INTO x SELECT x, x FROM x;
SELECT * FROM x;
INSERT INTO x SELECT x, x FROM x;
DROP TABLE x;
CREATE TABLE x (x TEXT, x TEXT NOT NULL /* primary key */);
INSERT INTO x SELECT x, CAST(x AS INT) FROM x;
DROP TABLE x;
CREATE TABLE x (x TEXT, x INT NOT NULL /* primary key */);
INSERT INTO x SELECT 'Pedro', x FROM x;
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('alice'), ('bob'), ('pedro');
INSERT INTO x SELECT x.x, x FROM x AS x INNER JOIN x ON (x.x = x.x);
INSERT INTO x SELECT x.x, x FROM x AS x INNER JOIN x ON (x.x = x.x);
DROP TABLE x;
CREATE TABLE x (x INT NOT NULL /* primary key */, x TEXT NOT NULL, x TEXT);
INSERT INTO x SELECT * FROM x;
SELECT * FROM x ORDER BY ALL;
DROP TABLE x;
CREATE TABLE x (x TEXT, x INT NOT NULL);
INSERT INTO x SELECT x, x FROM x;
SELECT * FROM x ORDER BY ALL;
CREATE TABLE x (x INT NOT NULL, x TEXT NOT NULL, x TEXT, x INT);
INSERT INTO x SELECT * FROM x;
SELECT * FROM x;
CREATE TABLE x (x TIMESTAMP, x DATE);
INSERT INTO x SELECT x, x FROM x;
SELECT * FROM x;
PRAGMA x;
CREATE TABLE x AS SELECT * FROM x;
SELECT x, x FROM x ORDER BY x LIMIT 10;
PRAGMA x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
SELECT * FROM x LIMIT 10;
PRAGMA x;
CREATE TABLE x (x INT NOT NULL, x INT NOT NULL, x INT NOT NULL, x INT NOT NULL, x INT NOT NULL, x DECIMAL(15, 2) NOT NULL, x DECIMAL(15, 2) NOT NULL, x DECIMAL(15, 2) NOT NULL, x TEXT NOT NULL, x TEXT NOT NULL, x DATE NOT NULL, x DATE NOT NULL, x DATE NOT NULL, x TEXT NOT NULL, x TEXT NOT NULL, x TEXT NOT NULL);
COPY x FROM 'data/csv/real/lineitem_sample.csv' WITH (DELIMITER '|');
SELECT x, x FROM x WHERE x = 1 ORDER BY x;
COPY x TO '__TEST_DIR__/lineitem.csv' WITH (DELIMITER ' ', HEADER);
DELETE FROM x;
SELECT * FROM x;
COPY x FROM '__TEST_DIR__/lineitem.csv' WITH (DELIMITER ' ', HEADER);
SELECT x, x FROM x WHERE x = 1 ORDER BY x;
PRAGMA x;
SELECT * FROM x;
PRAGMA x;
CREATE TABLE x (x INT, x TEXT, x INT);
COPY x FROM 'data/csv/test/test_long_line.csv';
SELECT LENGTH(x) FROM x ORDER BY x;
SELECT SUM(x), SUM(x) FROM x;
PRAGMA x;
CREATE TABLE x AS SELECT * FROM x;
PRAGMA x;
CREATE TABLE x (x INT, x TEXT, x INT);
INSERT INTO x VALUES (10, REPEAT('a', 1504857), 20), (10, REPEAT('a', 10485760), 20);
COPY x TO '__TEST_DIR__/test.csv' WITH (HEADER 0);
CREATE TABLE x (x INT, x TEXT, x INT);
COPY x FROM '__TEST_DIR__/test.csv';
COPY x FROM '__TEST_DIR__/test.csv' WITH (max_line_size 10485770);
PRAGMA x;
SELECT * FROM x ORDER BY ALL;
SELECT * FROM x ORDER BY ALL;
SELECT * FROM x ORDER BY ALL;
SELECT * FROM x;
SELECT * FROM x ORDER BY ALL;
SELECT * FROM x ORDER BY ALL;
SELECT * FROM x ORDER BY ALL;
SELECT * FROM x ORDER BY ALL;
PRAGMA x;
SELECT * FROM x;
PRAGMA x;
SELECT * FROM x;
SELECT COUNT(*) FROM x;
SELECT * FROM x ORDER BY ALL LIMIT 10;
PRAGMA x;
CREATE TABLE x (x INT, x TEXT, x INT);
INSERT INTO x SELECT * FROM x;
PRAGMA x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT x LIKE '%one%' AND x LIKE '%two%' AS x FROM x;
SELECT x LIKE '%one%' AND x LIKE '%two%' AS x FROM x;
SELECT x FROM x;
SELECT x LIKE '%one%' AND x LIKE '%two%' AS x FROM x;
SELECT x LIKE '%one%' AND x LIKE '%two%' AS x FROM x;
SELECT x FROM x;
SELECT x LIKE '%one%' AND x LIKE '%two%' AS x FROM x;
SELECT x LIKE '%one%' AND x LIKE '%two%' AS x FROM x;
SET x = '';
COPY x TO '__TEST_DIR__/lineitem.csv.gz';
DROP TABLE x;
CREATE TABLE x (x INT NOT NULL, x INT NOT NULL, x INT NOT NULL, x INT NOT NULL, x DECIMAL(15, 2) NOT NULL, x DECIMAL(15, 2) NOT NULL, x DECIMAL(15, 2) NOT NULL, x DECIMAL(15, 2) NOT NULL, x TEXT NOT NULL, x TEXT NOT NULL, x DATE NOT NULL, x DATE NOT NULL, x DATE NOT NULL, x TEXT NOT NULL, x TEXT NOT NULL, x TEXT NOT NULL);
SELECT COUNT(*) FROM x;
PRAGMA x;
CREATE TABLE IF NOT EXISTS x (x INT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT);
COPY x FROM 'data/csv/real/ncvoter.csv' WITH (DELIMITER '	');
SELECT x, x, x, x FROM x;
COPY x TO '__TEST_DIR__/ncvoter.csv' WITH (DELIMITER 'A', HEADER);
DELETE FROM x;
SELECT * FROM x;
COPY x FROM '__TEST_DIR__/ncvoter.csv' WITH (DELIMITER 'A', HEADER);
SELECT x, x, x, x FROM x;
PRAGMA x;
CREATE TABLE x (x TEXT);
COPY x FROM 'data/csv/test/nfc.csv' WITH (HEADER 0);
SELECT COUNT(*) FROM x WHERE x COLLATE NFC = 'ü';
PRAGMA x;
CREATE TABLE x (x TEXT, x TEXT, x TEXT);
COPY x FROM 'data/csv/real/nfc_normalization.csv' WITH (DELIMITER '|', HEADER 0);
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x WHERE x COLLATE NFC = x;
SELECT COUNT(*) FROM x WHERE x COLLATE NFC = x;
DROP TABLE x;
CREATE TABLE x (x TEXT, x TEXT, x TEXT);
COPY x FROM 'data/csv/real/nfc_normalization_rn.csv' WITH (DELIMITER '|', HEADER 0);
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x WHERE x COLLATE NFC = x;
SELECT COUNT(*) FROM x WHERE x COLLATE NFC = x;
DROP TABLE IF EXISTS x;
SELECT * FROM x ORDER BY ALL LIMIT 5;
SELECT * EXCLUDE (x) FROM x ORDER BY ALL LIMIT 5;
PRAGMA x;
SELECT * FROM x;
CREATE VIEW x AS SELECT * FROM x;
SELECT * FROM x;
SELECT x FROM x;
SELECT x, x FROM x;
SELECT * FROM x;
SELECT x, x FROM x;
SELECT x FROM x;
SELECT x FROM x;
SELECT * FROM x WHERE x = 100;
SELECT * FROM x WHERE x = 10 AND x = 10000;
SELECT * FROM x WHERE x = 10 AND x = 10000;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SET x = 1;
CREATE VIEW x AS SELECT x, x, x, x, x, CAST(x AS DOUBLE) AS x, CAST(x AS DOUBLE) AS x, CAST(x AS DOUBLE) AS x, CAST(x AS DOUBLE) AS x, CAST(x AS DOUBLE) AS x, CAST(x AS DOUBLE) AS x, CAST(x AS DOUBLE) AS x, CAST(x AS DOUBLE) AS x, CAST(x AS DOUBLE) AS x, CAST(x AS DOUBLE) AS x, CAST(x AS DOUBLE) AS x, CAST(x AS DOUBLE) AS x, CAST(x AS DOUBLE) AS x, CAST(x AS DOUBLE) AS x, CAST(x AS DOUBLE) AS x, CAST(x AS DOUBLE) AS x, CAST(x AS DOUBLE) AS x, CAST(x AS DOUBLE) AS x, CAST("x" AS DOUBLE) AS "x", CAST(x AS DOUBLE) AS x, CAST(x AS DOUBLE) AS x, CAST(x AS DOUBLE) AS x, CAST(x AS DOUBLE) AS x, CAST(x AS DOUBLE) AS x, CAST(x AS DOUBLE) AS x, CAST(x AS DOUBLE) AS x, CAST(x AS DOUBLE) AS x, CAST(x AS DOUBLE) AS x, CAST(x AS DOUBLE) AS x, CAST(x AS DOUBLE) AS x, CAST(x AS DOUBLE) AS x, CAST(x AS DOUBLE) AS x, CAST(x AS DOUBLE) AS x, CAST(x AS DOUBLE) AS x, CAST(x AS DOUBLE) AS x, CAST(x AS DOUBLE) AS x, CAST(x AS DOUBLE) AS x, CAST(x AS DOUBLE) AS x, CAST(x AS DOUBLE) AS x, CAST(x AS DOUBLE) AS x, CAST(x AS DOUBLE) AS x, CAST(x AS DOUBLE) AS x, CAST(x AS DOUBLE) AS x, CAST(x AS DOUBLE) AS x, CAST(x AS DOUBLE) AS x, CAST(x AS DOUBLE) AS x, CAST(x AS DOUBLE) AS x, CAST(x AS DOUBLE) AS x, CAST(x AS DOUBLE) AS x FROM (SELECT * FROM x WHERE ((x = 'D') AND (x = 'DUNIT')));
CREATE VIEW x AS SELECT * EXCLUDE (x, x, x, x), CAST(x AS TIMESTAMP) AS x, STR_SPLIT(x, '/')[8] AS x, ISOYEAR(CAST(x AS TIMESTAMP)) AS "x" FROM x;
SELECT COUNT(*) FROM x;
PRAGMA x;
SET x = 'nulls_first';
CREATE VIEW x AS SELECT x, x, x, x FROM x ORDER BY x, x, x, x;
SELECT * FROM x LIMIT 10;
SELECT COUNT(*) FROM x WHERE x IS NULL;
SELECT COUNT(*) FROM x WHERE x IS NULL;
SELECT COUNT(*) FROM x WHERE x IS NULL;
SELECT COUNT(*) FROM x WHERE x IS NULL;
PRAGMA x;
CREATE TABLE x (x SMALLINT, x SMALLINT, x SMALLINT, x SMALLINT, x SMALLINT, x DATE, x TEXT, x DECIMAL(8, 2), x TEXT, x TEXT, x TEXT, x INT, x INT, x INT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x DECIMAL(8, 2), x INT, x INT, x INT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x DECIMAL(8, 2), x DECIMAL(8, 2), x DECIMAL(8, 2), x DECIMAL(8, 2), x DECIMAL(8, 2), x DECIMAL(8, 2), x DECIMAL(8, 2), x TEXT, x DECIMAL(8, 2), x DECIMAL(8, 2), x DECIMAL(8, 2), x DECIMAL(8, 2), x DECIMAL(8, 2), x DECIMAL(8, 2), x DECIMAL(8, 2), x DECIMAL(8, 2), x DECIMAL(8, 2), x DECIMAL(8, 2), x TEXT, x SMALLINT, x TEXT, x SMALLINT, x DECIMAL(8, 2), x DECIMAL(8, 2), x DECIMAL(8, 2), x DECIMAL(8, 2), x DECIMAL(8, 2), x SMALLINT, x DECIMAL(8, 2), x DECIMAL(8, 2), x DECIMAL(8, 2), x DECIMAL(8, 2), x DECIMAL(8, 2), x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x INT, x INT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x INT, x INT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x INT, x INT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x INT, x INT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x INT, x INT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT);
COPY x FROM 'data/csv/real/ontime_sample.csv' WITH (DELIMITER ',', HEADER);
SELECT x, x, x, x, x FROM x;
COPY x TO '__TEST_DIR__/ontime.csv' WITH (DELIMITER ',', HEADER);
DELETE FROM x;
COPY x FROM '__TEST_DIR__/ontime.csv' WITH (DELIMITER ',', HEADER);
SELECT x, x, x, x, x FROM x;
PRAGMA x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT * FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT * FROM x;
PRAGMA x;
COPY (SELECT 42) TO '__TEST_DIR__/file.csv' WITH (prefix 'a');
COPY (SELECT 42) TO '__TEST_DIR__/file.csv' WITH (prefix 'a', suffix 'b', header);
COPY (SELECT 42) TO '__TEST_DIR__/file.csv' WITH (escape 'null', null 'null');
PRAGMA x;
CREATE TABLE x AS SELECT '1, "Oogie Boogie"' FROM x;
INSERT INTO x VALUES ('2, """sir"" Oogie Boogie"');
COPY x TO '__TEST_DIR__/out.csv' WITH (FORMAT CSV, HEADER 0, QUOTE '');
SELECT x, x FROM x;
CREATE TABLE x AS SELECT '1, "Oogie Boogie"' FROM x;
INSERT INTO x VALUES ('2, "\"sir\" Oogie Boogie"');
COPY x TO '__TEST_DIR__/out_2.csv' WITH (FORMAT CSV, HEADER 0, QUOTE '');
SELECT x, x FROM x;
PRAGMA x;
CREATE TABLE x (x TEXT, x INT);
COPY x FROM 'data/csv/test/quoted_newline.csv' WITH (DELIMITER ',', AUTO_DETECT 0);
SELECT SUM(x) FROM x;
SELECT STR_SPLIT_REGEX(x, '[\r\n]+') FROM x ORDER BY x;
PRAGMA x;
SELECT * FROM x WHERE x = 1;
SELECT * FROM x WHERE x = 1;
PRAGMA x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
CREATE TABLE x (x DATE);
INSERT INTO x SELECT * FROM x;
SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
SELECT * FROM x ORDER BY 1;
CREATE TABLE x AS SELECT * FROM x;
SELECT * FROM x;
CREATE VIEW x AS SELECT * FROM x;
SELECT COUNT(*) FROM x;
SELECT x, RTRIM(x) FROM x WHERE x = 1 ORDER BY x;
SELECT * FROM x;
PRAGMA x;
SELECT * FROM x;
SELECT * FROM x, x;
SELECT x.x FROM x AS x;
SELECT x.x FROM x AS x;
SELECT x.x FROM x AS x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
SELECT * EXCLUDE (x) FROM x;
SELECT * EXCLUDE (x) FROM x;
SELECT * EXCLUDE (x) FROM x;
SELECT * EXCLUDE (x) FROM x;
SELECT * EXCLUDE (x) FROM x;
SELECT * EXCLUDE (x) FROM x;
SELECT * EXCLUDE (x) FROM x;
SELECT * EXCLUDE (x) FROM x;
SELECT * EXCLUDE (x) FROM x;
SELECT * EXCLUDE (x) FROM x;
CREATE TABLE x (x TEXT);
INSERT INTO x SELECT '#This is a comment' FROM x;
INSERT INTO x SELECT '1,2,3' FROM x;
COPY x TO '__TEST_DIR__/skip_2.csv' WITH (HEADER 0, delim ';');
SELECT * FROM x;
SELECT * EXCLUDE (x) FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
COPY x TO '__TEST_DIR__/lineitem.csv' WITH (DELIMITER '|', HEADER);
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
PRAGMA x;
CREATE TABLE x AS SELECT * FROM x;
SELECT * FROM x;
CREATE TABLE x AS SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
SELECT * FROM x;
PRAGMA x;
SELECT x FROM x;
SELECT x FROM x;
SELECT x FROM x;
SELECT x FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
SELECT * FROM x;
PRAGMA x;
SELECT COUNT(*) FROM x;
PRAGMA x;
SELECT * FROM x;
SELECT * FROM x;
SELECT x, x FROM x;
CREATE TABLE x AS SELECT * FROM x;
SELECT COUNT(*) FROM x;
SELECT * FROM x LIMIT 1;
PRAGMA x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT x FROM x;
PRAGMA x;
SELECT * FROM x;
SELECT * FROM x;
CREATE TABLE x (x TIMESTAMPTZ);
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
SELECT x, TYPEOF(x) FROM x AS x;
PRAGMA x;
SET x = 'nulls_first';
CREATE TABLE x (x BIGINT);
CREATE TABLE x (x INT, x INT);
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1), (2), (9223372036854775807);
INSERT INTO x VALUES (3, 4), (5, 6);
INSERT INTO x VALUES (100, 101), (102, 103);
COPY x TO '__TEST_DIR__/ubn1.csv' WITH (DELIMITER ',');
COPY x TO '__TEST_DIR__/ubn2.csv' WITH (DELIMITER ',');
COPY x TO '__TEST_DIR__/ubn3.csv' WITH (DELIMITER ',');
SELECT * FROM x;
SELECT x, x, x FROM x ORDER BY x;
SELECT x, x, x, REPLACE(REPLACE(x, '__TEST_DIR__', ''), '\', '/')[2 : ] FROM x ORDER BY x;
SELECT COUNT(x), COUNT(x), COUNT(x), COUNT(x) FROM x;
SELECT TYPEOF(x), TYPEOF(x), TYPEOF(x) FROM x LIMIT 1;
SELECT * FROM x;
SELECT x, x, x, x, x FROM x ORDER BY x, x, x;
SELECT TYPEOF(x), TYPEOF(x), TYPEOF(x), TYPEOF(x), TYPEOF(x) FROM x LIMIT 1;
SELECT x, x FROM x ORDER BY x, x;
SELECT x FROM x ORDER BY x;
SELECT TYPEOF(x), TYPEOF(x), TYPEOF(x) FROM x LIMIT 1;
SELECT x, x, x, x, REPLACE(x, '\', '/') FROM x ORDER BY x, x, x;
SELECT TYPEOF(x), TYPEOF(x), TYPEOF(x), TYPEOF(x) FROM x LIMIT 1;
SELECT TYPEOF(x) FROM x LIMIT 1;
SELECT x, x, x, REPLACE(x, '\', '/') FROM x ORDER BY x;
SELECT * FROM x;
SELECT x, x, x, x FROM x ORDER BY x;
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
PRAGMA x;
SELECT * FROM x ORDER BY ALL LIMIT 1;
PRAGMA x;
SELECT * FROM x;
PRAGMA x;
PRAGMA x;
CREATE TABLE x (x INT NOT NULL, x TEXT NOT NULL, x DATE, x DATE, x INT, x INT, x TEXT, x INT, x TEXT, x TEXT, x INT, x INT, x INT, x INT, PRIMARY KEY (x));
COPY x FROM 'data/csv/real/web_page.csv' WITH (DELIMITER '|');
SELECT * FROM x ORDER BY x LIMIT 3;
COPY x TO '__TEST_DIR__/web_page.csv' WITH (DELIMITER ' ', HEADER);
DELETE FROM x;
SELECT * FROM x;
COPY x FROM '__TEST_DIR__/web_page.csv' WITH (DELIMITER ' ', HEADER);
SELECT * FROM x ORDER BY x LIMIT 3;
PRAGMA x;
CREATE TABLE x (x INT, x TEXT, x INT);
COPY x FROM 'data/csv/test/windows_newline.csv';
SELECT SUM(x), MIN(LENGTH(x)), MAX(LENGTH(x)), SUM(LENGTH(x)), SUM(x) FROM x;
DELETE FROM x;
COPY x FROM 'data/csv/test/windows_newline.csv' WITH (QUOTE 'BLABLABLA', AUTO_DETECT FALSE);
DROP TABLE x;
CREATE TABLE x (x INT);
COPY x FROM 'data/csv/test/windows_newline_empty.csv' WITH (HEADER 0);
SELECT SUM(x) FROM x;
PRAGMA x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
CREATE TABLE x (x INT, x TIMESTAMP);
COPY x FROM 'data/csv/timestamp_with_tz.csv' WITH (HEADER);
CREATE TABLE x (x INT, x TIMESTAMPTZ);
COPY x FROM 'data/csv/timestamp_with_tz.csv' WITH (HEADER);
SET x = 'UTC';
SELECT * FROM x;
PRAGMA x;
CREATE TABLE x (x INT, x TEXT);
INSERT INTO x VALUES (1, 'Mark'), (2, 'Hannes');
COPY x TO '__TEST_DIR__/test.tsv' WITH (DELIMITER '\t');
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x ORDER BY 1;
SELECT * FROM x ORDER BY 1;
PRAGMA x;
COPY (SELECT x, x, x FROM x) TO '__TEST_DIR__/union_by_name_lineitem1.csv' WITH (HEADER);
COPY (SELECT x, x, x FROM x) TO '__TEST_DIR__/union_by_name_lineitem2.csv' WITH (HEADER);
SELECT SUM(x), SUM(x), SUM(x) FROM x;
PRAGMA x;
CREATE OR REPLACE TABLE x (x INT, x INT, x INT);
CREATE OR REPLACE TABLE x (x INT, x INT, x INT);
CREATE OR REPLACE TABLE x (x INT, x INT, x INT);
CREATE OR REPLACE TABLE x (x INT, x INT, x INT);
CREATE OR REPLACE TABLE x (x INT, x INT, x INT);
CREATE OR REPLACE TABLE x (x INT, x INT, x INT);
CREATE OR REPLACE TABLE x (x INT, x INT, x INT);
CREATE OR REPLACE TABLE x (x INT, x INT, x INT);
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (NULL);
COPY x TO '__TEST_DIR__/t_default.tsv' WITH (DELIMITER '\t');
SELECT * FROM x;
COPY x TO '__TEST_DIR__/t_default.tsv' WITH (DELIMITER '\t');
SELECT * FROM x;
COPY x TO '__TEST_DIR__/t_default.tsv' WITH (DELIMITER '\t', HEADER 0);
SELECT * FROM x;
PRAGMA x;
SELECT * FROM x;
PRAGMA x;
SELECT COUNT(x) FROM x;
SELECT * FROM x;
SELECT COUNT(x) FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
SELECT COUNT(x) FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
SELECT COUNT(*) FROM (SELECT * FROM x) AS x;
PRAGMA x;
PRAGMA x;
SELECT COUNT(*) FROM x;
PRAGMA x;
PRAGMA x;
SELECT COUNT(*) FROM x;
PRAGMA x;
CREATE VIEW x AS SELECT * FROM x;
SELECT * FROM x;
DESCRIBE x;
PRAGMA x;
PRAGMA x;
SELECT TYPEOF(x), TYPEOF(CAST(x AS DECIMAL(25, 3))) FROM x;
SELECT TYPEOF(x), TYPEOF(CAST(x AS DECIMAL(25, 3))) FROM x;
PRAGMA x;
PRAGMA x;
SELECT * FROM x;
PRAGMA x;
PRAGMA x;
SELECT COUNT(*) FROM x;
PRAGMA x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
CREATE TABLE x AS SELECT * FROM x;
SELECT COUNT(*) FROM x;
SELECT * FROM x LIMIT 5;
PRAGMA x;
CREATE TABLE x AS SELECT * FROM x;
(SELECT * FROM x EXCEPT SELECT * FROM x) UNION ALL (SELECT * FROM x EXCEPT SELECT * FROM x);
PRAGMA x;
CREATE TABLE IF NOT EXISTS x (x INT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT);
COPY x FROM 'data/csv/real/ncvoter.csv' WITH (FORMAT CSV, AUTO_DETECT TRUE);
SELECT x, x, x, x FROM x;
PRAGMA x;
CREATE TABLE x AS SELECT * FROM x LIMIT 0;
COPY x FROM 'data/csv/real/ncvoter.csv' WITH (FORMAT CSV, AUTO_DETECT TRUE);
(SELECT * FROM x EXCEPT SELECT * FROM x) UNION ALL (SELECT * FROM x EXCEPT SELECT * FROM x);
PRAGMA x;
PRAGMA x;
CREATE TABLE x AS SELECT x, NFC_NORMALIZE(x) AS x, x FROM x AS x;
SELECT COUNT(*) FROM x;
SELECT * FROM x ORDER BY 1;
SELECT x, NFC_NORMALIZE(x) AS x, x FROM x AS x;
PRAGMA x;
CREATE TABLE x AS SELECT * FROM x;
SELECT COUNT(*) FROM x;
CREATE TABLE x AS SELECT * FROM x;
CREATE TABLE x AS SELECT * FROM x;
PRAGMA x;
CREATE TABLE x (x INT NOT NULL, x INT NOT NULL, x INT NOT NULL, x INT NOT NULL, x INT NOT NULL, x DECIMAL(15, 2) NOT NULL, x DECIMAL(15, 2) NOT NULL, x DECIMAL(15, 2) NOT NULL, x TEXT NOT NULL, x TEXT NOT NULL, x DATE NOT NULL, x DATE NOT NULL, x DATE NOT NULL, x TEXT NOT NULL, x TEXT NOT NULL, x TEXT NOT NULL);
COPY x FROM 'data/csv/real/lineitem_sample.csv' WITH (FORMAT CSV, AUTO_DETECT TRUE);
SELECT COUNT(*) FROM x;
SELECT x, x FROM x WHERE x = 1 ORDER BY x;
PRAGMA x;
CREATE TABLE x AS SELECT * FROM x LIMIT 0;
COPY x FROM 'data/csv/real/lineitem_sample.csv' WITH (FORMAT CSV, AUTO_DETECT TRUE);
(SELECT * FROM x EXCEPT SELECT * FROM x) UNION ALL (SELECT * FROM x EXCEPT SELECT * FROM x);
PRAGMA x;
CREATE TABLE x (x SMALLINT, x SMALLINT, x SMALLINT, x SMALLINT, x SMALLINT, x DATE, x TEXT, x DECIMAL(8, 2), x TEXT, x TEXT, x TEXT, x INT, x INT, x INT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x DECIMAL(8, 2), x INT, x INT, x INT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x DECIMAL(8, 2), x DECIMAL(8, 2), x DECIMAL(8, 2), x DECIMAL(8, 2), x DECIMAL(8, 2), x DECIMAL(8, 2), x DECIMAL(8, 2), x TEXT, x DECIMAL(8, 2), x DECIMAL(8, 2), x DECIMAL(8, 2), x DECIMAL(8, 2), x DECIMAL(8, 2), x DECIMAL(8, 2), x DECIMAL(8, 2), x DECIMAL(8, 2), x DECIMAL(8, 2), x DECIMAL(8, 2), x TEXT, x DECIMAL(8, 2), x TEXT, x DECIMAL(8, 2), x DECIMAL(8, 2), x DECIMAL(8, 2), x DECIMAL(8, 2), x DECIMAL(8, 2), x DECIMAL(8, 2), x DECIMAL(8, 2), x DECIMAL(8, 2), x DECIMAL(8, 2), x DECIMAL(8, 2), x DECIMAL(8, 2), x DECIMAL(8, 2), x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x INT, x INT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x INT, x INT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x INT, x INT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x INT, x INT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x INT, x INT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT);
COPY x FROM 'data/csv/real/ontime_sample.csv';
SELECT x, x, x, x, x FROM x;
PRAGMA x;
CREATE TABLE x AS SELECT * FROM x LIMIT 0;
COPY x FROM 'data/csv/real/ontime_sample.csv';
(SELECT * FROM x EXCEPT SELECT * FROM x) UNION ALL (SELECT * FROM x EXCEPT SELECT * FROM x);
PRAGMA x;
CREATE TABLE x AS SELECT * FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
PRAGMA x;
CREATE TABLE x AS SELECT * FROM x;
(SELECT * FROM x EXCEPT SELECT * FROM x) UNION ALL (SELECT * FROM x EXCEPT SELECT * FROM x);
CREATE TABLE x AS SELECT * FROM x;
SELECT COUNT(*) FROM x;
SELECT * FROM x ORDER BY x LIMIT 3;
PRAGMA x;
CREATE TABLE x AS SELECT * FROM x;
(SELECT * FROM x EXCEPT SELECT * FROM x) UNION ALL (SELECT * FROM x EXCEPT SELECT * FROM x);
PRAGMA x;
PRAGMA x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT x FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
CREATE TABLE x AS SELECT * FROM x;
SELECT * FROM x ORDER BY x;
DROP TABLE x;
CREATE TABLE x AS SELECT * FROM x;
SELECT * FROM x ORDER BY x;
DROP TABLE x;
CREATE TABLE x AS SELECT * FROM x;
SELECT * FROM x ORDER BY x;
DROP TABLE x;
CREATE TABLE x AS SELECT * FROM x;
SELECT * FROM x ORDER BY x;
DROP TABLE x;
CREATE TABLE x AS SELECT * FROM x;
SELECT * FROM x ORDER BY x;
DROP TABLE x;
CREATE TABLE x AS SELECT * FROM x;
SELECT * FROM x ORDER BY x;
DROP TABLE x;
CREATE TABLE x AS SELECT * FROM x;
SELECT * FROM x ORDER BY x;
DROP TABLE x;
CREATE TABLE x AS SELECT * FROM x;
SELECT * FROM x ORDER BY x;
DROP TABLE x;
CREATE TABLE x AS SELECT * FROM x;
SELECT * FROM x ORDER BY x;
DROP TABLE x;
CREATE TABLE x AS SELECT * FROM x;
SELECT * FROM x ORDER BY x;
DROP TABLE x;
CREATE TABLE x AS SELECT * FROM x;
SELECT * FROM x ORDER BY x;
DROP TABLE x;
CREATE TABLE x AS SELECT * FROM x;
SELECT * FROM x ORDER BY x;
DROP TABLE x;
CREATE TABLE x AS SELECT * FROM x;
SELECT * FROM x ORDER BY x;
DROP TABLE x;
CREATE TABLE x AS SELECT * FROM x;
SELECT * FROM x ORDER BY x;
DROP TABLE x;
CREATE TABLE x AS SELECT * FROM x;
SELECT x, x FROM x;
PRAGMA x;
SELECT * FROM x;
PRAGMA x;
CREATE VIEW x AS SELECT * FROM x;
DESCRIBE x;
DESCRIBE SELECT * FROM x;
PRAGMA x;
DESCRIBE SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
SELECT * FROM x;
PRAGMA x;
PRAGMA x;
CREATE TABLE x AS SELECT * FROM x;
SELECT TYPEOF(x), TYPEOF(x), TYPEOF(x), TYPEOF(x) FROM x LIMIT 1;
SELECT TYPEOF(x), TYPEOF(x), TYPEOF(x), TYPEOF(x) FROM x LIMIT 1;
CREATE TABLE x AS SELECT * FROM x;
CREATE TABLE x AS SELECT * FROM x;
SELECT TYPEOF(x), TYPEOF(x), TYPEOF(x), TYPEOF(x) FROM x LIMIT 1;
PRAGMA x;
CREATE TABLE x AS SELECT * FROM x;
SELECT x, x, x FROM x ORDER BY x;
DROP TABLE x;
CREATE TABLE x AS SELECT * FROM x;
SELECT x, x, x FROM x ORDER BY x;
DROP TABLE x;
CREATE TABLE x AS SELECT * FROM x;
SELECT x, x, x, x FROM x ORDER BY x;
DROP TABLE x;
CREATE TABLE x AS SELECT * FROM x;
SELECT x, x, x FROM x ORDER BY x;
DROP TABLE x;
CREATE TABLE x AS SELECT * FROM x;
SELECT x, x, x FROM x;
DROP TABLE x;
CREATE TABLE x AS SELECT * FROM x;
SELECT x, x, x, x FROM x;
DROP TABLE x;
CREATE TABLE x AS SELECT * FROM x;
SELECT x, x, x, x, x, x FROM x;
DROP TABLE x;
CREATE TABLE x AS SELECT * FROM x;
SELECT x, x, x, x, x, x, x, x, x, x, x, x, x FROM x;
PRAGMA x;
CREATE TABLE x AS SELECT * FROM x;
SELECT x, x, x FROM x ORDER BY x;
DROP TABLE x;
CREATE TABLE x AS SELECT * FROM x;
SELECT x, x, x FROM x ORDER BY x;
DROP TABLE x;
CREATE TABLE x AS SELECT * FROM x;
SELECT x, x, x FROM x ORDER BY x;
DROP TABLE x;
CREATE TABLE x AS SELECT * FROM x;
SELECT x, x, x FROM x ORDER BY x;
DROP TABLE x;
CREATE TABLE x AS SELECT * FROM x;
SELECT * FROM x ORDER BY x;
DROP TABLE x;
CREATE TABLE x AS SELECT * FROM x;
SELECT x, x FROM x ORDER BY x;
DROP TABLE x;
CREATE TABLE x AS SELECT * FROM x;
SELECT x, x FROM x ORDER BY x;
DROP TABLE x;
CREATE TABLE x AS SELECT * FROM x;
SELECT * FROM x;
DROP TABLE x;
CREATE TABLE x AS SELECT * FROM x;
SELECT * FROM x;
DROP TABLE x;
CREATE TABLE x AS SELECT * FROM x;
SELECT * FROM x;
SELECT x FROM x;
DROP TABLE x;
CREATE TABLE x (x TEXT, x TEXT, x TEXT);
INSERT INTO x VALUES ('Hello', 'Beautiful', 'World');
COPY x TO '__TEST_DIR__/varchar_header.csv' WITH (HEADER 1);
COPY x TO '__TEST_DIR__/varchar_no_header.csv' WITH (HEADER 0);
COPY x FROM '__TEST_DIR__/varchar_header.csv';
COPY x FROM '__TEST_DIR__/varchar_no_header.csv' WITH (HEADER 0);
SELECT * FROM x;
COPY x TO '__TEST_DIR__/big_varchar.csv';
COPY x FROM '__TEST_DIR__/big_varchar.csv';
SELECT * FROM x;
PRAGMA x;
SELECT x FROM x;
CREATE TABLE x AS SELECT * FROM x;
SELECT x, x, x FROM x ORDER BY x;
DROP TABLE x;
CREATE TABLE x AS SELECT * FROM x;
SELECT x, x, x FROM x ORDER BY x;
DROP TABLE x;
SELECT x FROM x;
CREATE TABLE x AS SELECT * FROM x;
SELECT x, x, x FROM x ORDER BY x;
DROP TABLE x;
CREATE TABLE x AS SELECT * FROM x;
SELECT x, x, x FROM x ORDER BY x;
DROP TABLE x;
CREATE TABLE x AS SELECT * FROM x;
SELECT x, x, x FROM x ORDER BY x;
DROP TABLE x;
CREATE TABLE x AS SELECT * FROM x;
SELECT x, x, x FROM x ORDER BY x;
DROP TABLE x;
CREATE TABLE x AS SELECT * FROM x;
SELECT x, x, x FROM x ORDER BY x;
DROP TABLE x;
SELECT x FROM x;
PRAGMA x;
CREATE TABLE x AS SELECT * FROM x;
SELECT TYPEOF(x), TYPEOF(x), TYPEOF(x), TYPEOF(x) FROM x LIMIT 1;
DROP TABLE x;
CREATE TABLE x AS SELECT * FROM x;
SELECT TYPEOF(x), TYPEOF(x), TYPEOF(x), TYPEOF(x) FROM x LIMIT 1;
DROP TABLE x;
CREATE TABLE x AS SELECT * FROM x;
SELECT x, x, x, x FROM x WHERE NOT x IS NULL;
SELECT TYPEOF(x), TYPEOF(x), TYPEOF(x), TYPEOF(x) FROM x LIMIT 1;
DROP TABLE x;
CREATE TABLE x AS SELECT * FROM x;
SELECT x, x, x, x FROM x WHERE NOT x IS NULL;
SELECT TYPEOF(x), TYPEOF(x), TYPEOF(x), TYPEOF(x) FROM x LIMIT 1;
DROP TABLE x;
CREATE TABLE x AS SELECT * FROM x;
SELECT x, x, x, x FROM x WHERE NOT x IS NULL;
SELECT TYPEOF(x), TYPEOF(x), TYPEOF(x), TYPEOF(x) FROM x LIMIT 1;
DROP TABLE x;
CREATE TABLE x (x INT, x DOUBLE, x TEXT, x TEXT);
COPY x FROM 'data/csv/auto/issue_811.csv' WITH (AUTO_DETECT TRUE);
DROP TABLE x;
CREATE TABLE x (x INT, x DOUBLE, x TEXT, x TEXT);
CREATE TABLE x (x INT, x DOUBLE, x TEXT, x TEXT);
PRAGMA x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
CREATE TABLE x (x BLOB);
COPY x FROM 'data/csv/test/blob.csv';
SELECT COUNT(*) FROM x;
PRAGMA x;
SELECT * FROM x;
PRAGMA x;
PRAGMA x;
CREATE OR REPLACE TABLE x (x TEXT, x REAL, x TEXT, x TEXT, x TEXT, x TEXT, x REAL);
COPY x FROM 'data/csv/timings.csv' WITH (HEADER, DELIMITER '|');
PRAGMA x;
CREATE TABLE x (x INT, x DOUBLE, x TEXT);
INSERT INTO x VALUES (1, 1.1, 'bla');
COPY (SELECT * FROM x) TO '__TEST_DIR__/csv_file.csv' WITH (FORMAT CSV, DELIMITER '|', HEADER 0);
SELECT * FROM x;
SELECT TYPEOF(x), TYPEOF(x), TYPEOF(x) FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT TYPEOF(x), TYPEOF(x), TYPEOF(x) FROM x;
SELECT * FROM x;
SELECT TYPEOF(x), TYPEOF(x), TYPEOF(x) FROM x;
SELECT * FROM x;
SELECT TYPEOF(x), TYPEOF(x), TYPEOF(x) FROM x;
SELECT * FROM x;
SELECT TYPEOF(x), TYPEOF(x), TYPEOF(x) FROM x;
SELECT * FROM x;
SELECT TYPEOF(x), TYPEOF(x), TYPEOF(x) FROM x;
SELECT * FROM x;
SELECT TYPEOF(x), TYPEOF(x), TYPEOF(x) FROM x;
SELECT * FROM x;
SELECT TYPEOF(x), TYPEOF(x), TYPEOF(x) FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
CREATE TABLE x AS SELECT * FROM x;
SELECT x, x, x FROM x LIMIT 3;
SELECT TYPEOF(x), TYPEOF(x), TYPEOF(x) FROM x LIMIT 1;
SELECT x, x, x FROM x WHERE x > 27000 LIMIT 3;
SELECT COUNT(*) FROM x;
DROP TABLE x;
CREATE TABLE x AS SELECT * FROM x;
SELECT x, x, x, x, x FROM x ORDER BY x;
SELECT TYPEOF(x), TYPEOF(x), TYPEOF(x), TYPEOF(x), TYPEOF(x) FROM x LIMIT 1;
DROP TABLE x;
CREATE TABLE x AS SELECT * FROM x;
SELECT x, x, x, x, x, x FROM x ORDER BY x;
SELECT TYPEOF(x), TYPEOF(x), TYPEOF(x), TYPEOF(x), TYPEOF(x), TYPEOF(x) FROM x LIMIT 1;
DROP TABLE x;
CREATE TABLE x AS SELECT * FROM x;
SELECT x, x, x, x, x FROM x ORDER BY x;
SELECT TYPEOF(x), TYPEOF(x), TYPEOF(x), TYPEOF(x), TYPEOF(x) FROM x LIMIT 1;
DROP TABLE x;
CREATE TABLE x AS SELECT * FROM x;
SELECT x, x, x, x, x FROM x ORDER BY x;
SELECT TYPEOF(x), TYPEOF(x), TYPEOF(x), TYPEOF(x), TYPEOF(x) FROM x LIMIT 1;
DROP TABLE x;
CREATE TABLE x AS SELECT * FROM x;
SELECT x, x, x, x, x FROM x ORDER BY x;
SELECT TYPEOF(x), TYPEOF(x), TYPEOF(x), TYPEOF(x), TYPEOF(x) FROM x LIMIT 1;
DROP TABLE x;
CREATE TABLE x AS SELECT * FROM x;
SELECT x, x, x, x, x FROM x ORDER BY x;
SELECT TYPEOF(x), TYPEOF(x), TYPEOF(x), TYPEOF(x), TYPEOF(x) FROM x LIMIT 1;
DROP TABLE x;
CREATE TABLE x AS SELECT * FROM x;
SELECT x, x, x, x, x FROM x ORDER BY x;
SELECT TYPEOF(x), TYPEOF(x), TYPEOF(x), TYPEOF(x), TYPEOF(x) FROM x LIMIT 1;
DROP TABLE x;
CREATE TABLE x AS SELECT * FROM x;
SELECT x, x, x, x, x FROM x ORDER BY x;
SELECT TYPEOF(x), TYPEOF(x), TYPEOF(x), TYPEOF(x), TYPEOF(x) FROM x LIMIT 1;
DROP TABLE x;
CREATE TABLE x AS SELECT * FROM x;
SELECT x FROM x ORDER BY x;
SELECT TYPEOF(x), TYPEOF(x) FROM x LIMIT 1;
PRAGMA x;
COPY (SELECT * FROM x AS x) TO '__TEST_DIR__/mix_batches_small.parquet' WITH (ROW_GROUP_SIZE 5000);
COPY (SELECT * FROM x AS x) TO '__TEST_DIR__/mix_batches_large.parquet' WITH (ROW_GROUP_SIZE 200000);
COPY (SELECT * FROM x AS x) TO '__TEST_DIR__/mix_batches_odd.parquet' WITH (ROW_GROUP_SIZE 999);
COPY (SELECT * FROM x AS x) TO '__TEST_DIR__/mix_batches_odd_again.parquet' WITH (ROW_GROUP_SIZE 99979);
CREATE VIEW x AS SELECT * FROM x;
CREATE VIEW x AS SELECT * FROM x WHERE (x // 10000) % 2 = 0;
CREATE VIEW x AS SELECT * FROM x WHERE (x // 10000) % 2 = 0 OR (x > 200000 AND x < 400000) OR (x > 600000 AND x < 800000);
COPY x TO '__TEST_DIR__/mixed_batches_v1.csv' WITH (HEADER);
CREATE TABLE x AS SELECT * FROM x;
CREATE TABLE x AS SELECT * FROM x;
CREATE TABLE x AS SELECT * FROM x;
COPY x TO '__TEST_DIR__/mixed_batches_v2.csv' WITH (HEADER);
CREATE TABLE x AS SELECT * FROM x;
CREATE TABLE x AS SELECT * FROM x;
CREATE TABLE x AS SELECT * FROM x;
COPY x TO '__TEST_DIR__/mixed_batches_v3.csv' WITH (HEADER);
CREATE TABLE x AS SELECT * FROM x;
CREATE TABLE x AS SELECT * FROM x;
CREATE TABLE x AS SELECT * FROM x;
COPY x TO '__TEST_DIR__/mixed_batches_v4.csv' WITH (HEADER);
CREATE TABLE x AS SELECT CAST(x AS BIGINT) AS x FROM x;
CREATE TABLE x AS SELECT CAST(x AS BIGINT) AS x FROM x;
CREATE TABLE x AS SELECT CAST(x AS BIGINT) AS x FROM x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP VIEW IF EXISTS x;
DROP VIEW IF EXISTS x;
DROP VIEW IF EXISTS x;
CREATE OR REPLACE VIEW x AS SELECT * FROM x UNION ALL SELECT * FROM x UNION ALL SELECT * FROM x UNION ALL SELECT * FROM x;
CREATE OR REPLACE VIEW x AS SELECT * FROM x WHERE (x // 10000) % 2 = 0;
CREATE OR REPLACE VIEW x AS SELECT * FROM x WHERE (x // 10000) % 2 = 0 OR (x > 200000 AND x < 400000) OR (x > 600000 AND x < 800000);
PRAGMA x;
CREATE TABLE x AS SELECT x, x // 5 AS x FROM x AS x;
COPY x TO '__TEST_DIR__/batched_integers.csv' WITH (HEADER);
CREATE TABLE x AS SELECT * FROM x;
SELECT SUM(x), SUM(x), COUNT(*), COUNT(x), COUNT(x) FROM x;
SELECT * FROM x LIMIT 5;
SELECT * FROM x LIMIT 5 OFFSET 99997;
SELECT * FROM x QUALIFY x <= LAG(x) OVER ();
CREATE VIEW x AS SELECT * FROM x WHERE (x % 2 = 0 AND x < 300000) OR (x BETWEEN 500000 AND 700000);
COPY x TO '__TEST_DIR__/batched_integers_filters.csv' WITH (HEADER);
PRAGMA x;
COPY (SELECT * FROM x AS x) TO '__TEST_DIR__/mix_batches_small.parquet' WITH (ROW_GROUP_SIZE 5000);
COPY (SELECT * FROM x AS x) TO '__TEST_DIR__/mix_batches_large.parquet' WITH (ROW_GROUP_SIZE 200000);
COPY (SELECT * FROM x AS x) TO '__TEST_DIR__/mix_batches_odd.parquet' WITH (ROW_GROUP_SIZE 999);
COPY (SELECT * FROM x AS x) TO '__TEST_DIR__/mix_batches_odd_again.parquet' WITH (ROW_GROUP_SIZE 99979);
CREATE VIEW x AS SELECT * FROM x;
CREATE VIEW x AS SELECT * FROM x WHERE (x // 10000) % 2 = 0;
CREATE VIEW x AS SELECT * FROM x WHERE (x // 10000) % 2 = 0 OR (x > 200000 AND x < 400000) OR (x > 600000 AND x < 800000);
CREATE TABLE x AS SELECT * FROM x;
CREATE TABLE x AS SELECT * FROM x;
CREATE TABLE x AS SELECT * FROM x;
CREATE TABLE x AS SELECT * FROM x;
CREATE TABLE x AS SELECT * FROM x;
CREATE TABLE x AS SELECT * FROM x;
CREATE TABLE x AS SELECT * FROM x;
CREATE TABLE x AS SELECT * FROM x;
CREATE TABLE x AS SELECT * FROM x;
CREATE TABLE x AS SELECT * FROM x;
CREATE TABLE x AS SELECT * FROM x;
CREATE TABLE x AS SELECT * FROM x;
CREATE TABLE x AS SELECT CAST(x AS BIGINT) AS x FROM x AS x;
CREATE TABLE x AS SELECT CAST(x AS BIGINT) AS x FROM x AS x;
CREATE TABLE x AS SELECT CAST(x AS BIGINT) AS x FROM x AS x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
PRAGMA x;
COPY (SELECT x, x // 5 AS x FROM x AS x) TO '__TEST_DIR__/large_integers.parquet';
SET x = '300MB';
COPY x TO '__TEST_DIR__/large_integers.csv';
SET x = '-1';
SELECT * FROM x EXCEPT SELECT * FROM x;
PRAGMA x;
CREATE TABLE x AS SELECT x, (x + 1) AS x FROM x AS x;
COPY x TO '__TEST_DIR__/t1.csv' WITH (FORMAT CSV, DELIMITER '|', HEADER);
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
PRAGMA x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
CREATE TABLE x AS SELECT x, (x + 1) AS x FROM x AS x;
COPY x TO '__TEST_DIR__/t1.csv' WITH (FORMAT CSV, DELIMITER '|', HEADER);
PRAGMA x = '2M';
PRAGMA x = 2;
SELECT COUNT(*) FROM x;
PRAGMA x;
SELECT * FROM x;
SELECT * FROM x;
SELECT COUNT(*) FROM x;
PRAGMA x;
SELECT COUNT(*) FROM x;
CREATE TABLE x AS SELECT * FROM x;
DESCRIBE x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
CREATE TABLE x AS SELECT * FROM x;
SELECT COUNT(*) FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
PRAGMA x;
SELECT * FROM x;
CREATE TABLE x AS SELECT * EXCLUDE (x, x, x) FROM x LIMIT 0;
SELECT DISTINCT NULL, x, (x <= x), (x BETWEEN x AND x) FROM x AS x WHERE x GROUP BY x LIMIT ('c4000757-69ca-400e-b58a-1dac73b85595' IS NULL);
PRAGMA x;
CREATE TABLE x (x DATE);
COPY x FROM 'data/csv/glob/a?/*.csv' WITH (AUTO_DETECT 1);
SELECT * FROM x ORDER BY 1;
COPY x FROM READ_CSV('data/csv/glob/*/a*a.csv', x = 1);
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
SELECT * FROM x ORDER BY 1;
SELECT * FROM x ORDER BY 1;
SELECT * FROM x ORDER BY 1;
SELECT * FROM x ORDER BY 1;
SELECT * FROM x ORDER BY 1;
SELECT * FROM x ORDER BY 1;
SELECT x, x LIKE '%a1.csv%' FROM x AS x ORDER BY 1;
SELECT * FROM x ORDER BY 1;
SELECT * FROM x ORDER BY 1;
SELECT x, x LIKE '%a_.csv' FROM x AS x ORDER BY 1;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT * FROM x ORDER BY 1;
SELECT * FROM x ORDER BY 1;
SELECT * FROM x ORDER BY 1;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x LIMIT 10;
SELECT COUNT(*) FROM x LIMIT 10;
SET x = 'data/csv/glob';
SELECT COUNT(*) FROM x;
SET x = 'data/csv/glob/a1,data/csv/glob/a2';
SELECT COUNT(*) FROM x;
SET x = 'data/csv/glob,garbage';
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SET x = '';
SELECT COUNT(*) FROM x;
SELECT * FROM x ORDER BY 1;
SELECT * FROM x ORDER BY 1;
SELECT * FROM x ORDER BY 1;
SELECT * FROM x ORDER BY 1;
SELECT * FROM x ORDER BY 1;
SELECT * FROM x ORDER BY 1;
SET x = 1;
SELECT * FROM x;
PRAGMA x;
SELECT COUNT(*) > 0 FROM x;
SELECT COUNT(*) FROM x;
PRAGMA x;
SELECT * FROM x ORDER BY 2;
SELECT * FROM x ORDER BY 2;
SELECT * FROM x;
SELECT SUM(x) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT SUM(x) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT SUM(x) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT * FROM x;
CREATE TABLE x AS SELECT (x % 2) AS x, (x % 3) AS x, (x * x) AS x FROM x AS x;
COPY x TO '__TEST_DIR__/partitioned0' WITH (PARTITION_BY (x, x));
SELECT * FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
COPY x TO '__TEST_DIR__/partitioned0/data_1.csv';
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT * FROM x;
SELECT SUM(x) FROM x;
PRAGMA x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x ORDER BY ALL;
PRAGMA x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
CREATE TABLE x (x TEXT, x TEXT, x TEXT);
COPY x FROM 'data/csv/multidelimiter/abac.csv' WITH (DELIMITER 'ABAC', AUTO_DETECT FALSE);
SELECT * FROM x;
DELETE FROM x;
DROP TABLE x;
CREATE TABLE x (x TEXT);
COPY x FROM 'data/csv/multidelimiter/simple_unterminated_quote.csv' WITH (QUOTE '"', AUTO_DETECT FALSE, strict_mode TRUE);
DROP TABLE x;
CREATE TABLE x (x TEXT);
COPY x FROM 'data/csv/multidelimiter/file_ends_in_quoted_value.csv' WITH (QUOTE '"', AUTO_DETECT FALSE);
SELECT * FROM x;
DROP TABLE x;
CREATE TABLE x (x TEXT);
COPY x FROM 'data/csv/multidelimiter/file_ends_in_quoted_value.csv' WITH (QUOTE '"', DELIMITER 'AAAB', AUTO_DETECT FALSE);
SELECT * FROM x;
DROP TABLE x;
CREATE TABLE x (x TEXT);
COPY x FROM 'data/csv/multidelimiter/unterminated_quote_with_escape.csv' WITH (QUOTE '"', ESCAPE '|', AUTO_DETECT FALSE, strict_mode TRUE);
DROP TABLE x;
CREATE TABLE x (x TEXT);
COPY x FROM 'data/csv/multidelimiter/unterminated_quote_escape.csv' WITH (QUOTE '"', ESCAPE '"', AUTO_DETECT FALSE, strict_mode TRUE);
DROP TABLE x;
CREATE TABLE x (x TEXT);
COPY x FROM 'data/csv/multidelimiter/unterminated_escape.csv' WITH (QUOTE '"', ESCAPE '''', AUTO_DETECT FALSE, strict_mode TRUE);
DROP TABLE x;
CREATE TABLE x (x TEXT);
COPY x FROM 'data/csv/multidelimiter/incomplete_multibyte_delimiter.csv' WITH (DELIMITER 'ABAC', AUTO_DETECT FALSE, quote '"', strict_mode TRUE);
COPY x FROM 'data/csv/multidelimiter/incomplete_multibyte_delimiter.csv' WITH (DELIMITER 'AB', AUTO_DETECT FALSE, quote '"');
DROP TABLE x;
CREATE TABLE x (x TEXT);
COPY x FROM 'data/csv/multidelimiter/abac.csv' WITH (DELIMITER 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', AUTO_DETECT FALSE);
DROP TABLE x;
CREATE TABLE x (x TEXT, x TEXT);
COPY x FROM 'data/csv/multidelimiter/carriage_feed_newline.csv' WITH (DELIMITER 'BA', AUTO_DETECT FALSE);
SELECT * FROM x;
DROP TABLE x;
CREATE TABLE x (x TEXT, x TEXT);
COPY x FROM 'data/csv/multidelimiter/windows_newline.csv' WITH (DELIMITER 'BA', AUTO_DETECT FALSE);
SELECT * FROM x;
DROP TABLE x;
CREATE TABLE x (x TEXT);
COPY x FROM 'data/csv/multidelimiter/unterminated_quote_multi_line.csv' WITH (DELIMITER 'BA', AUTO_DETECT FALSE, strict_mode TRUE);
DROP TABLE x;
CREATE TABLE x (x TEXT, x TEXT);
COPY x FROM 'data/csv/multidelimiter/unquote_without_delimiter.csv' WITH (DELIMITER 'BA', AUTO_DETECT FALSE, strict_mode TRUE);
DROP TABLE x;
CREATE TABLE x (x TEXT);
COPY x FROM 'data/csv/multidelimiter/trailing_delimiter_complex.csv' WITH (DELIMITER 'BA', AUTO_DETECT FALSE);
SELECT * FROM x;
DROP TABLE x;
CREATE TABLE x (x TEXT);
COPY x FROM 'data/csv/multidelimiter/trailing_delimiter.csv' WITH (DELIMITER '|', AUTO_DETECT FALSE);
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
CREATE TABLE x (x INT, x TEXT);
INSERT INTO x VALUES (1, 'hello'), (2, 'world '), (3, ' xx');
SELECT * FROM x ORDER BY 1;
COPY x TO '__TEST_DIR__/overwrite.csv';
COPY (SELECT * FROM x LIMIT 2) TO '__TEST_DIR__/overwrite.csv';
DELETE FROM x;
COPY x FROM '__TEST_DIR__/overwrite.csv';
SELECT * FROM x ORDER BY 1;
COPY (SELECT x FROM x AS x UNION ALL SELECT CAST(CONCAT('hello', x) AS INT) AS x FROM x AS x) TO '__TEST_DIR__/overwrite.csv';
DELETE FROM x;
COPY x FROM '__TEST_DIR__/overwrite.csv';
SELECT * FROM x ORDER BY 1;
COPY (SELECT x FROM x AS x UNION ALL SELECT CAST(CONCAT('hello', x) AS INT) AS x FROM x AS x) TO '__TEST_DIR__/overwrite.csv' WITH (USE_TMP_FILE FALSE);
SELECT * FROM x;
PRAGMA x;
SELECT SUM(x), SUM(x), SUM(x) FROM x;
SELECT SUM(x) FROM x;
SELECT SUM(x) FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT SUM(x) FROM x;
SELECT SUM(x) FROM x;
SELECT SUM(x) FROM x;
SELECT SUM(x) FROM x;
SELECT SUM(x) FROM x;
SELECT SUM(x) FROM x;
PRAGMA x;
CREATE TABLE x (x BIGINT NOT NULL, x SMALLINT NOT NULL, x TEXT, x SMALLINT NOT NULL, x TIMESTAMP NOT NULL, x DATE NOT NULL, x INT NOT NULL, x INT NOT NULL, x INT NOT NULL, x BIGINT NOT NULL, x SMALLINT NOT NULL, x SMALLINT NOT NULL, x SMALLINT NOT NULL, x TEXT, x TEXT, x SMALLINT NOT NULL, x SMALLINT NOT NULL, x INT NOT NULL, x SMALLINT NOT NULL, x INT NOT NULL, x SMALLINT NOT NULL, x SMALLINT NOT NULL, x SMALLINT NOT NULL, x SMALLINT NOT NULL, x SMALLINT NOT NULL, x TEXT, x SMALLINT NOT NULL, x SMALLINT NOT NULL, x SMALLINT NOT NULL, x TEXT NOT NULL, x SMALLINT NOT NULL, x SMALLINT NOT NULL, x SMALLINT NOT NULL, x SMALLINT NOT NULL, x TEXT, x TEXT, x INT NOT NULL, x SMALLINT NOT NULL, x SMALLINT NOT NULL, x TEXT, x SMALLINT NOT NULL, x SMALLINT NOT NULL, x SMALLINT NOT NULL, x SMALLINT NOT NULL, x SMALLINT NOT NULL, x TIMESTAMP NOT NULL, x SMALLINT NOT NULL, x SMALLINT NOT NULL, x INT NOT NULL, x SMALLINT NOT NULL, x TEXT, x INT NOT NULL, x SMALLINT NOT NULL, x SMALLINT NOT NULL, x SMALLINT NOT NULL, x BIGINT NOT NULL, x TEXT, x INT NOT NULL, x SMALLINT NOT NULL, x SMALLINT NOT NULL, x SMALLINT NOT NULL, x SMALLINT NOT NULL, x SMALLINT NOT NULL, x TEXT NOT NULL, x TIMESTAMP NOT NULL, x SMALLINT NOT NULL, x SMALLINT NOT NULL, x SMALLINT NOT NULL, x SMALLINT NOT NULL, x SMALLINT NOT NULL, x INT NOT NULL, x INT NOT NULL, x INT NOT NULL, x SMALLINT NOT NULL, x TEXT, x TEXT, x TEXT, x TEXT, x SMALLINT NOT NULL, x INT NOT NULL, x INT NOT NULL, x INT NOT NULL, x INT NOT NULL, x INT NOT NULL, x INT NOT NULL, x SMALLINT NOT NULL, x TEXT, x BIGINT NOT NULL, x TEXT, x TEXT, x SMALLINT NOT NULL, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x SMALLINT NOT NULL, x BIGINT NOT NULL, x BIGINT NOT NULL, x INT NOT NULL, PRIMARY KEY (x, x, x, x, x));
INSERT INTO x SELECT * FROM x;
SELECT COUNT(*) FROM x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
PRAGMA x = 4;
PRAGMA x;
PRAGMA x = '__TEST_DIR__/test.json';
PRAGMA x = x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (3);
SELECT MIN(x + x) FROM x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (42, 10), (43, 100), (NULL, 1), (45, -1);
SELECT MIN(x + x) FROM x;
SELECT x FROM x WHERE x BETWEEN 43 AND 44;
SELECT CASE x WHEN 42 THEN 100 WHEN 43 THEN 200 ELSE 300 END FROM x;
PRAGMA x = '__TEST_DIR__/test_2.json';
SELECT COUNT(*) > 0 FROM x WHERE CONTAINS(x, 'Optimizer');
PRAGMA x = 4;
PRAGMA x = 4;
PRAGMA x = 4;
PRAGMA x = 4;
PRAGMA x = 4;
PRAGMA x = 4;
PRAGMA x = 4;
PRAGMA x = 'NULLS LAST';
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
PRAGMA x = 4;
PRAGMA x = 4;
PRAGMA x = 4;
PRAGMA x = 4;
PRAGMA x = 4;
PRAGMA x = 4;
PRAGMA x = 4;
PRAGMA x = 4;
PRAGMA x = 4;
PRAGMA x;
PRAGMA x;
SELECT x, x, x.replace('\', '/').split('/')[-2], x.replace('\', '/').split('/')[-3] FROM x ORDER BY x;
SELECT x, x, x, x FROM x ORDER BY x;
SELECT x, x, x FROM x ORDER BY 1;
PRAGMA x;
SET x = 'nulls_first';
PRAGMA x;
SELECT x, x, x, x FROM x ORDER BY x;
SELECT x, x, x, REPLACE(x, '\', '/') FROM x ORDER BY x;
SELECT x, x, x, x, x FROM x ORDER BY x, x, x;
SELECT TYPEOF(x), TYPEOF(x), TYPEOF(x), TYPEOF(x), TYPEOF(x) FROM x LIMIT 1;
SELECT x, x FROM x ORDER BY x, x;
SELECT x FROM x ORDER BY x;
PRAGMA x;
PRAGMA x;
SELECT x ->> '$.duck' FROM x;
PRAGMA x;
PRAGMA x;
SELECT * FROM x;
SELECT * FROM x;
SELECT x, COUNT(1) AS x FROM x GROUP BY x ORDER BY x DESC;
SELECT x, COUNT(1) AS x FROM x GROUP BY x ORDER BY x DESC;
PRAGMA x;
PRAGMA x;
SELECT * FROM x ORDER BY ALL;
PRAGMA x = 2;
SELECT * FROM x;
PRAGMA x;
SELECT COUNT(*) FROM x;
PRAGMA x;
PRAGMA x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
PRAGMA x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
PRAGMA x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * EXCLUDE (x) FROM x ORDER BY ALL;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
SELECT * EXCLUDE (x, x) FROM x ORDER BY ALL;
DROP TABLE x;
SELECT * FROM x;
SELECT * EXCLUDE (x) FROM x ORDER BY ALL;
DROP TABLE x;
DROP TABLE x;
SELECT * FROM x;
SELECT * EXCLUDE (x) FROM x ORDER BY ALL;
DROP TABLE x;
DROP TABLE x;
SELECT * FROM x;
SELECT * EXCLUDE (x) FROM x ORDER BY ALL;
DROP TABLE x;
DROP TABLE x;
SELECT * FROM x;
SELECT * EXCLUDE (x) FROM x ORDER BY ALL;
DROP TABLE x;
DROP TABLE x;
SELECT * FROM x;
SELECT * EXCLUDE (x) FROM x ORDER BY ALL;
SELECT TYPEOF(FIRST(x)), TYPEOF(FIRST(x)), COUNT(*), SUM(x), MAX(LENGTH(x)) FROM x;
SELECT * EXCLUDE (x) FROM x ORDER BY ALL;
DROP TABLE x;
DROP TABLE x;
SELECT SUM(x) FROM x;
SELECT COUNT(*) FROM x;
DROP TABLE x;
DROP TABLE x;
SELECT SUM(x) FROM x;
SELECT COUNT(*) FROM x;
SELECT FIRST(x), FIRST(x), TYPEOF(FIRST(x)), TYPEOF(FIRST(x)), COUNT(*) FROM x;
SELECT * EXCLUDE (x) FROM x ORDER BY ALL;
SELECT * FROM x;
SELECT * EXCLUDE (x) FROM x ORDER BY ALL;
SELECT * FROM x;
SELECT * EXCLUDE (x) FROM x ORDER BY ALL;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
SELECT * EXCLUDE (x) FROM x ORDER BY ALL;
DROP TABLE x;
DROP TABLE x;
SELECT * FROM x;
SELECT * EXCLUDE (x) FROM x ORDER BY ALL;
DROP TABLE x;
DROP TABLE x;
SELECT * FROM x;
SELECT * EXCLUDE (x) FROM x ORDER BY ALL;
DROP TABLE x;
SELECT * FROM x;
SELECT * EXCLUDE (x) FROM x;
DROP TABLE x;
DROP TABLE x;
SELECT * FROM x;
SELECT * EXCLUDE (x) FROM x ORDER BY ALL;
DROP TABLE x;
DROP TABLE x;
SELECT * FROM x;
SELECT * EXCLUDE (x) FROM x ORDER BY ALL;
DROP TABLE x;
DROP TABLE x;
SELECT * FROM x;
SELECT COUNT(*) FROM x;
DROP TABLE x;
DROP TABLE x;
SELECT SUM(x) FROM x;
SELECT * EXCLUDE (x) FROM x ORDER BY ALL;
DROP TABLE x;
DROP TABLE x;
SELECT SUM(x) FROM x;
SELECT * EXCLUDE (x) FROM x ORDER BY ALL;
DROP TABLE x;
DROP TABLE x;
SELECT SUM(x) FROM x;
SELECT * EXCLUDE (x) FROM x ORDER BY ALL;
DROP TABLE x;
DROP TABLE x;
SELECT * FROM x AS x JOIN x AS x ON x.x = x.x;
SELECT * EXCLUDE (x, x) FROM x ORDER BY ALL;
SELECT * EXCLUDE (x, x) FROM x ORDER BY ALL;
DROP TABLE x;
DROP TABLE x;
SELECT * FROM x AS x JOIN x AS x ON x.x = x.x;
SELECT * EXCLUDE (x, x) FROM x ORDER BY ALL;
DROP TABLE x;
DROP TABLE x;
SELECT * FROM x;
SELECT * EXCLUDE (x, x) FROM x ORDER BY x;
DROP TABLE x;
DROP TABLE x;
SELECT * FROM x;
SELECT * EXCLUDE (x, x) FROM x ORDER BY x;
DROP TABLE x;
DROP TABLE x;
SELECT * FROM x;
SELECT * EXCLUDE (x, x) FROM x ORDER BY x;
DROP TABLE x;
SELECT TYPEOF(FIRST(x)), TYPEOF(FIRST(x)), COUNT(*), SUM(x), MAX(LENGTH(x)) FROM x;
SELECT * EXCLUDE (x) FROM x ORDER BY ALL;
SELECT * EXCLUDE (x) FROM x ORDER BY ALL;
SELECT TYPEOF(FIRST(x)), TYPEOF(FIRST(x)), COUNT(*), SUM(x), MAX(LENGTH(x)) FROM x;
DROP TABLE x;
SELECT TYPEOF(FIRST(x)), TYPEOF(FIRST(x)), COUNT(*), SUM(x), MAX(LENGTH(x)) FROM x;
SELECT * EXCLUDE (x) FROM x ORDER BY ALL;
SELECT * EXCLUDE (x) FROM x ORDER BY ALL;
DROP TABLE x;
SELECT TYPEOF(FIRST(x)), TYPEOF(FIRST(x)), COUNT(*), SUM(x), MAX(LENGTH(x)) FROM x;
SELECT * EXCLUDE (x) FROM x ORDER BY ALL;
SELECT * EXCLUDE (x) FROM x ORDER BY ALL;
SELECT TYPEOF(FIRST(x)), TYPEOF(FIRST(x)), COUNT(*), SUM(x), MAX(LENGTH(x)) FROM x;
SELECT * EXCLUDE (x) FROM x ORDER BY ALL;
SELECT * EXCLUDE (x) FROM x ORDER BY ALL;
DROP TABLE x;
DROP TABLE x;
CREATE TEMPORARY TABLE x (x INT);
SELECT TYPEOF(FIRST(x)), TYPEOF(FIRST(x)), COUNT(*), SUM(x), MAX(LENGTH(x)) FROM x;
SELECT TYPEOF(FIRST(x)), TYPEOF(FIRST(x)), COUNT(*), SUM(x), MAX(LENGTH(x)) FROM x;
SELECT TYPEOF(FIRST(x)), TYPEOF(FIRST(x)), COUNT(*), SUM(x), MAX(LENGTH(x)) FROM x;
SELECT TYPEOF(FIRST(x)), TYPEOF(FIRST(x)), COUNT(*), SUM(x), MAX(LENGTH(x)) FROM x;
SELECT TYPEOF(FIRST(x)), TYPEOF(FIRST(x)), COUNT(*), SUM(x), MAX(LENGTH(x)) FROM x;
SELECT TYPEOF(FIRST(x)), TYPEOF(FIRST(x)), COUNT(*), SUM(x), MAX(LENGTH(x)) FROM x;
SELECT TYPEOF(FIRST(x)), TYPEOF(FIRST(x)), COUNT(*), SUM(x), MAX(LENGTH(x)) FROM x;
SELECT TYPEOF(FIRST(x)), TYPEOF(FIRST(x)), COUNT(*), SUM(x), MAX(LENGTH(x)) FROM x;
SELECT TYPEOF(FIRST(x)), TYPEOF(FIRST(x)), COUNT(*), SUM(x), MAX(LENGTH(x)) FROM x;
SELECT TYPEOF(FIRST(x)), TYPEOF(FIRST(x)), COUNT(*), SUM(x), MAX(LENGTH(x)) FROM x;
SELECT TYPEOF(FIRST(x)), TYPEOF(FIRST(x)), COUNT(*), SUM(x), MAX(LENGTH(x)) FROM x;
SELECT * FROM x;
SELECT REGEXP_REPLACE(x, '\\', '/', 'g'), x, x, x, x, x, x, x FROM x INNER JOIN x ON (x.x = x.x AND x.x = x.x);
DROP TABLE x;
DROP TABLE x;
SELECT * FROM x;
SELECT REGEXP_REPLACE(x, '\\', '/', 'g'), x, x, x, x, x, x FROM x INNER JOIN x ON (x.x = x.x AND x.x = x.x);
DROP TABLE x;
DROP TABLE x;
SELECT * FROM x;
SELECT REGEXP_REPLACE(x, '\\', '/', 'g'), x, x, x, x, x, x, x FROM x INNER JOIN x ON (x.x = x.x AND x.x = x.x);
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
SELECT REGEXP_REPLACE(x, '\\', '/', 'g'), x, x, x, x, x, x, x FROM x INNER JOIN x ON (x.x = x.x AND x.x = x.x);
DROP TABLE x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT TYPEOF(FIRST(x)), TYPEOF(FIRST(x)), COUNT(*) FROM x;
SELECT * FROM x;
SELECT * EXCLUDE (x) FROM x ORDER BY ALL;
SELECT * FROM x;
SELECT * EXCLUDE (x) FROM x ORDER BY ALL;
SELECT * FROM x;
SELECT * EXCLUDE (x) FROM x ORDER BY ALL;
DROP TABLE x;
DROP TABLE x;
SELECT * FROM x;
SELECT * EXCLUDE (x) FROM x ORDER BY ALL;
DROP TABLE x;
DROP TABLE x;
SELECT * FROM x;
SELECT * EXCLUDE (x) FROM x ORDER BY ALL;
DROP TABLE x;
DROP TABLE x;
SELECT * FROM x;
SELECT * EXCLUDE (x) FROM x ORDER BY ALL;
DROP TABLE x;
DROP TABLE x;
SELECT * FROM x;
SELECT * EXCLUDE (x) FROM x ORDER BY ALL;
DROP TABLE x;
DROP TABLE x;
SELECT * FROM x;
SELECT * EXCLUDE (x) FROM x ORDER BY ALL;
DROP TABLE x;
DROP TABLE x;
SELECT * FROM x;
SELECT * EXCLUDE (x) FROM x ORDER BY x;
DROP TABLE x;
DROP TABLE x;
SELECT * FROM x;
SELECT * EXCLUDE (x) FROM x ORDER BY x;
DROP TABLE x;
DROP TABLE x;
SELECT * FROM x;
SELECT * EXCLUDE (x) FROM x ORDER BY x;
DROP TABLE x;
DROP TABLE x;
SELECT * FROM x;
SELECT * EXCLUDE (x) FROM x ORDER BY x;
DROP TABLE x;
DROP TABLE x;
SELECT * FROM x;
SELECT * EXCLUDE (x) FROM x ORDER BY x;
DROP TABLE x;
DROP TABLE x;
SELECT * FROM x;
SELECT * EXCLUDE (x) FROM x ORDER BY x;
DROP TABLE x;
DROP TABLE x;
SELECT * FROM x;
SELECT * EXCLUDE (x) FROM x ORDER BY x;
DROP TABLE x;
DROP TABLE x;
SELECT * FROM x;
SELECT * EXCLUDE (x) FROM x ORDER BY x;
DROP TABLE x;
DROP TABLE x;
SELECT * FROM x;
SELECT * EXCLUDE (x) FROM x ORDER BY x, x;
DROP TABLE x;
DROP TABLE x;
SELECT * FROM x;
SELECT * EXCLUDE (x) FROM x ORDER BY x;
DROP TABLE x;
DROP TABLE x;
SELECT * FROM x;
SELECT * EXCLUDE (x) FROM x ORDER BY x;
DROP TABLE x;
DROP TABLE x;
SELECT * FROM x;
SELECT * EXCLUDE (x) FROM x ORDER BY ALL;
PRAGMA x;
CREATE TABLE x AS SELECT x, LIST_SELECT([e'\\', e'\t', e'\n', e'\\\\', e'\\\t', e'\\\n', e'\t\\', e'\t\t', e'\t\n', e'\n\\', e'\n\t', e'\n\n', '', 'a', 'b', 'c'], LIST_TRANSFORM([HASH(x), HASH(x * 7 + 251), HASH(x * x + 4093)], x -> CAST((x % 16 + 1) AS INT))) AS x FROM x AS x;
COPY (SELECT CONCAT_WS(e'\t', x, x, x, x) FROM (SELECT x, REPLACE(REPLACE(REPLACE(COLUMNS(* EXCLUDE (x)), '\', '\\'), e'\t', e'\\\t'), e'\n', e'\\\n') FROM (SELECT x, x[1] AS x, x[2] AS x, x[3] AS x FROM x))) TO '__TEST_DIR__/pseudorandom_fields.tsv' WITH (HEADER FALSE, QUOTE '', ESCAPE '');
SELECT CAST(LOG(2, COUNT(*)) AS INT), CAST(BOOL_AND(x[1] = x AND x[2] = x AND x[3] = x) AS INT) FROM x JOIN x AS x ON x = x;
PRAGMA x;
SELECT * FROM x;
CREATE TABLE x (x INT, x TEXT);
CREATE TABLE x (x INT, x TEXT);
SELECT CAST(BOOL_AND(x = REPLACE(x, e'\r\n', e'\n')) AS INT) FROM x JOIN x AS x ON x = x;
PRAGMA x;
CREATE TABLE x AS SELECT REPLACE(COLUMNS(*), '    ', e'\t') FROM x;
DELETE FROM x WHERE CAST(SPLIT_PART(x, '/', 2) AS INT) >= 10;
CREATE TABLE x (x TEXT, x TEXT, x TEXT, x TEXT, x TEXT);
CREATE TABLE x (x TEXT, x TEXT, x TEXT, x TEXT, x TEXT);
TRUNCATE TABLE x;
TRUNCATE TABLE x;
INSERT INTO x SELECT REPLACE(COLUMNS(*), e'\r\n', e'\n') FROM x;
INSERT INTO x SELECT REPLACE(COLUMNS(*), e'\r\n', e'\n') FROM x;
SELECT COUNT(*), CAST(BOOL_AND(x.x = x.x AND x.x = x.x AND x.x = x.x AND x.x = x.x AND x.x = x.x AND x.x = x.x AND x.x = x.x AND x.x = x.x AND x.x = x.x AND x.x = x.x) AS INT) FROM x AS x, x AS x, x AS x WHERE x.x = x.x AND x.x = x.x;
PRAGMA x;
SELECT CONCAT('#', COLUMNS(*), '#') FROM x;
PRAGMA x;
SELECT HAMMING(REPLACE(GROUP_CONCAT(x, '|' ORDER BY x), e'\r\n', e'\n'), e'\\|,|"|\n'), HAMMING(GROUP_CONCAT(x, '|' ORDER BY x), '"|"a"|"b|c"'), CAST(BOOL_AND(x = CONCAT(x, '"', x)) AS INT) FROM x;
PRAGMA x;
ATTACH '__TEST_DIR__/unencrypted.duckdb' AS x;
ATTACH '__TEST_DIR__/v_0_10_2.duckdb' AS x (STORAGE_VERSION 'v0.10.2');
CREATE OR REPLACE TABLE x.x AS SELECT * FROM x AS x;
CREATE OR REPLACE TABLE x.x AS SELECT * FROM x AS x;
SELECT SUM(x) FROM x.x;
SELECT SUM(x) FROM x.x;
DETACH unencrypted;
DETACH v_0_10_2;
ATTACH '__TEST_DIR__/encrypted.duckdb' AS x (ENCRYPTION_KEY 'asdf');
ATTACH '__TEST_DIR__/encrypted_v2.duckdb' AS x (ENCRYPTION_KEY 'asdf');
ATTACH '__TEST_DIR__/v_0_10_2.duckdb' AS x;
ATTACH '__TEST_DIR__/unencrypted.duckdb' AS x;
COPY SELECT * FROM x AS x TO x;
COPY SELECT * FROM x AS x TO x;
DETACH unencrypted;
DETACH v_0_10_2;
DETACH encrypted;
DETACH encrypted_v2;
ATTACH '__TEST_DIR__/encrypted.duckdb' AS x (ENCRYPTION_KEY 'asdf');
ATTACH '__TEST_DIR__/encrypted_v2.duckdb' AS x (ENCRYPTION_KEY 'asdf');
SELECT SUM(x) FROM x.x;
SELECT SUM(x) FROM x.x;
ATTACH '__TEST_DIR__/unencrypted_new.duckdb' AS x;
ATTACH '__TEST_DIR__/unencrypted_v_1_2_0.duckdb' AS x (STORAGE_VERSION 'v1.2.0');
COPY SELECT * FROM x AS x TO x;
COPY SELECT * FROM x AS x TO x;
DETACH unencrypted_new;
DETACH encrypted;
DETACH encrypted_v2;
DETACH unencrypted_v_1_2_0;
ATTACH '__TEST_DIR__/unencrypted_v_1_2_0.duckdb' AS x (ENCRYPTION_KEY 'asdf');
ATTACH '__TEST_DIR__/unencrypted_v_1_2_0.duckdb' AS x (STORAGE_VERSION 'v1.0.0');
ATTACH '__TEST_DIR__/unencrypted_v_1_2_0.duckdb' AS x;
SELECT x['storage_version'] FROM x WHERE x = 'unencrypted_v_1_2_0';
ATTACH '__TEST_DIR__/unencrypted_new.duckdb' AS x;
SELECT SUM(x) FROM x.x;
SELECT SUM(x) FROM x.x;
PRAGMA x;
SELECT * FROM x;
PRAGMA x;
SELECT * FROM x;
SELECT * FROM x WHERE x = CAST('2022-11-22 00:01:13.175' AS TIMESTAMP);
PRAGMA x;
SELECT * FROM x;
COPY (SELECT CAST((x.x * 10) AS BIGINT) AS x, CAST(x AS SMALLINT) AS x, CAST(x AS INT) AS x, CAST(x AS DOUBLE) AS x, CAST(x AS REAL) AS x, 'string_' || CAST(x AS TEXT) AS x, CAST(('blob_' || CAST(x AS TEXT)) AS BLOB) AS x FROM x AS x, x ORDER BY x) TO '__TEST_DIR__/bloom1.parquet' WITH (format parquet, ROW_GROUP_SIZE 10000, dictionary_size_limit 1000);
SELECT x, BOOL_AND(x > 4), BOOL_AND(x > 1) FROM x GROUP BY x ORDER BY x;
SELECT BOOL_AND(x) FROM x;
SELECT BOOL_AND(x) FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
COPY (SELECT CAST((x.x * 10) AS BIGINT) AS x FROM x AS x, x ORDER BY x) TO '__TEST_DIR__/bloom2.parquet' WITH (format parquet, ROW_GROUP_SIZE 10000, dictionary_size_limit 10);
SELECT x, NOT x IS NULL, NOT x IS NULL FROM x ORDER BY x;
COPY (SELECT CAST((x.x * 10) AS BIGINT) AS x FROM x AS x, x ORDER BY x) TO '__TEST_DIR__/bloom3.parquet' WITH (format parquet, ROW_GROUP_SIZE 10000, dictionary_size_limit 99);
SELECT x, NOT x IS NULL, NOT x IS NULL FROM x ORDER BY x;
COPY (SELECT CAST((x.x * 10) AS BIGINT) AS x FROM x AS x, x ORDER BY x) TO '__TEST_DIR__/bloom4.parquet' WITH (format parquet, ROW_GROUP_SIZE 10000, dictionary_size_limit 100);
SELECT x, NOT x IS NULL, NOT x IS NULL FROM x ORDER BY x;
COPY (SELECT CAST((x.x * 10) AS BIGINT) AS x FROM x AS x, x ORDER BY x) TO '__TEST_DIR__/bloom5.parquet' WITH (format parquet, ROW_GROUP_SIZE 10000, dictionary_size_limit 1000);
SELECT x, NOT x IS NULL, NOT x IS NULL FROM x ORDER BY x;
COPY (SELECT CAST((x.x * 10) AS BIGINT) AS x FROM x AS x, x ORDER BY x) TO '__TEST_DIR__/bloom6.parquet' WITH (format parquet, ROW_GROUP_SIZE 10000, dictionary_size_limit 1000, bloom_filter_false_positive_ratio 0.01);
SELECT x, x FROM x ORDER BY x;
COPY (SELECT CAST((x.x * 10) AS BIGINT) AS x FROM x AS x, x ORDER BY x) TO '__TEST_DIR__/bloom7.parquet' WITH (format parquet, ROW_GROUP_SIZE 10000, dictionary_size_limit 1000, bloom_filter_false_positive_ratio 0.5);
SELECT x, x FROM x ORDER BY x;
COPY (SELECT CAST((x.x * 10) AS BIGINT) AS x FROM x AS x, x ORDER BY x) TO '__TEST_DIR__/bloom8.parquet' WITH (format parquet, ROW_GROUP_SIZE 10000, dictionary_size_limit 1000, bloom_filter_false_positive_ratio 0.001);
SELECT x, x FROM x ORDER BY x;
COPY (SELECT CAST((x.x * 10) AS BIGINT) AS x FROM x AS x, x ORDER BY x) TO '__TEST_DIR__/bloom8.parquet' WITH (format parquet, ROW_GROUP_SIZE 10000, dictionary_size_limit 1000, bloom_filter_false_positive_ratio 0.0001);
SELECT x, x FROM x ORDER BY x;
SELECT x, x FROM x ORDER BY x;
COPY (SELECT CAST((x.x * 10) AS BIGINT) AS x FROM x AS x, x ORDER BY x) TO '__TEST_DIR__/bloom8.parquet' WITH (format parquet, ROW_GROUP_SIZE 10000, dictionary_size_limit 1000, bloom_filter_false_positive_ratio 0);
COPY (SELECT CAST((x.x * 10) AS TEXT) AS x FROM x AS x, x ORDER BY x) TO '__TEST_DIR__/bloom9.parquet' WITH (format parquet, ROW_GROUP_SIZE 10000, string_dictionary_page_size_limit 10);
SELECT x, NOT x IS NULL, NOT x IS NULL FROM x ORDER BY x;
COPY (SELECT CAST((x.x * 10) AS TEXT) AS x FROM x AS x, x ORDER BY x) TO '__TEST_DIR__/bloom9.parquet' WITH (format parquet, ROW_GROUP_SIZE 10000, string_dictionary_page_size_limit 100000);
SELECT x, NOT x IS NULL, NOT x IS NULL FROM x ORDER BY x;
COPY (SELECT CAST((x.x * 10) AS TEXT) AS x FROM x AS x, x ORDER BY x) TO '__TEST_DIR__/bloom9.parquet' WITH (format parquet, ROW_GROUP_SIZE 10000, string_dictionary_page_size_limit 4294967295);
COPY (SELECT CAST((x.x * 10) AS TEXT) AS x FROM x AS x, x ORDER BY x) TO '__TEST_DIR__/bloom9.parquet' WITH (format parquet, ROW_GROUP_SIZE 10000, string_dictionary_page_size_limit 0);
COPY (SELECT CAST((x.x * 10) AS TEXT) AS x FROM x AS x, x ORDER BY x) TO '__TEST_DIR__/bloom9.parquet' WITH (format parquet, ROW_GROUP_SIZE 10000, string_dictionary_page_size_limit 0);
SELECT x FROM x;
SELECT x FROM x;
SELECT x = 'RLE_DICTIONARY' FROM x;
PRAGMA x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT * FROM x;
PRAGMA x;
SELECT * FROM x;
SELECT x FROM x;
SET x = FALSE;
CREATE TABLE x AS SELECT * FROM x AS x;
COPY x TO '__TEST_DIR__/force_order_preserve.parquet' WITH (PRESERVE_ORDER);
CREATE VIEW x AS SELECT * FROM x;
SELECT SUM(x) FROM x;
SELECT SUM(x) FROM x;
SET x = TRUE;
SELECT * FROM x LIMIT 5;
SELECT * FROM x LIMIT 5 OFFSET 777778;
COPY x TO '__TEST_DIR__/force_order_preserve_2.parquet' WITH (PRESERVE_ORDER, PARTITION_BY (x), WRITE_PARTITION_COLUMNS);
SELECT x FROM x GROUP BY x;
PRAGMA x;
SELECT x FROM x GROUP BY x;
PRAGMA x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
SELECT * FROM x;
SELECT * FROM x;
CREATE TABLE x AS SELECT * FROM x;
SELECT COUNT(*) FROM x;
SELECT MIN(STRLEN(x)), MAX(STRLEN(x)) FROM x;
DESCRIBE x;
DESCRIBE x;
CREATE TABLE x AS SELECT 'thisisaverylongstringbutitrepeatsmanytimessoitshighlycompressible' || (x % 10) AS x FROM x;
CREATE TABLE x AS SELECT 'thisisaverylongstringbutitrepeatsmanytimessoitshighlycompressible' || (x % 10) AS x FROM x;
COPY x TO '__TEST_DIR__/dictionary_compression_ratio_threshold.parquet';
SELECT x IS NULL FROM x;
SELECT x IS NULL FROM x;
SELECT x IS NULL FROM x;
COPY x TO '__TEST_DIR__/dictionary_compression_ratio_threshold.parquet' WITH (dictionary_compression_ratio_threshold 10);
SELECT x IS NULL FROM x;
COPY x TO '__TEST_DIR__/dictionary_compression_ratio_threshold.parquet' WITH (dictionary_compression_ratio_threshold 20);
SELECT x IS NULL FROM x;
CREATE OR REPLACE TABLE x AS SELECT 'coolstring' || x AS x FROM x;
COPY x TO '__TEST_DIR__/dictionary_compression_ratio_threshold.parquet';
SELECT x IS NULL FROM x;
COPY x TO '__TEST_DIR__/dictionary_compression_ratio_threshold.parquet' WITH (dictionary_compression_ratio_threshold 0);
SELECT x IS NULL FROM x;
PRAGMA x;
SELECT * FROM x;
SELECT * FROM x;
SELECT x FROM x;
PRAGMA x;
SELECT x, x, x FROM x WHERE x = 'x';
SELECT TYPEOF(x) FROM x LIMIT 1;
SELECT x FROM x ORDER BY x;
SELECT x FROM x WHERE x > 1.1 ORDER BY x;
PRAGMA x;
COPY (SELECT x // 50 AS x, {'x': x, 'x': 21} AS x FROM x AS x) TO '__TEST_DIR__/hive_partitioned_struct_col' WITH (FORMAT PARQUET, PARTITION_BY (x));
SELECT * FROM x WHERE x.x = 42;
SELECT x.x FROM x WHERE x.x = 42;
COPY (SELECT x AS x, {'x': x // 2} AS x FROM x AS x) TO '__TEST_DIR__/hive_partitioned_struct' WITH (FORMAT PARQUET, PARTITION_BY (x));
SELECT * FROM x WHERE x.x = 42 ORDER BY ALL;
PRAGMA x;
SELECT SETSEED(0.8675309);
CREATE TABLE x (x TIMESTAMP_S NOT NULL, x INT NOT NULL);
INSERT INTO x SELECT *, CAST((RANDOM() * 500) AS INT) FROM x;
CREATE TABLE x AS (SELECT DATE_TRUNC('HOUR', x) AS x, CAST(SUM(x) AS BIGINT) AS x FROM x GROUP BY x);
SELECT * FROM x ORDER BY ALL LIMIT 5;
COPY (SELECT * FROM x) TO '__TEST_DIR__/hive' WITH (FORMAT 'PARQUET', COMPRESSION 'SNAPPY', PARTITION_BY (x), OVERWRITE_OR_IGNORE);
SELECT x, x FROM x ORDER BY ALL LIMIT 5;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
CREATE TABLE x AS SELECT * FROM x AS x;
COPY x TO '__TEST_DIR__/integers.parquet';
SELECT SUM(x) FROM x;
COPY x TO '__TEST_DIR__/integers.csv';
SELECT SUM(x) FROM x AS x;
CREATE TABLE x AS SELECT * FROM x;
SELECT x[1] -> '$.block_hash' FROM x;
CREATE TABLE x AS SELECT * FROM x;
PRAGMA TPCH(1);
PRAGMA TPCH(6);
DROP TABLE x;
CREATE VIEW x AS SELECT * FROM x;
PRAGMA TPCH(1);
PRAGMA TPCH(6);
COPY (SELECT 42 AS x) TO '__TEST_DIR__/conversion_error1.parquet';
COPY (SELECT CAST('hello world' AS BLOB) AS x) TO '__TEST_DIR__/conversion_error2.parquet';
SELECT * FROM x;
CREATE TABLE x (x INT);
COPY x FROM '__TEST_DIR__/conversion_error*.parquet';
PRAGMA x;
PRAGMA x = 4;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT x FROM x OFFSET 4968;
SELECT x FROM x LIMIT 10;
SELECT x FROM x LIMIT 100;
SELECT x FROM x LIMIT 100;
SELECT MIN(x), MAX(x), SUM(x), COUNT(x), MIN(x), MAX(x), SUM(x), COUNT(x) FROM x;
SELECT MIN(x), MAX(x), SUM(x), COUNT(x) FROM x;
SELECT * FROM x;
SELECT x FROM x LIMIT 10;
SELECT x FROM x;
SELECT * FROM x;
SELECT * FROM x LIMIT 1;
SELECT x FROM x OFFSET 1;
SELECT x FROM (DESCRIBE SELECT * FROM x);
SELECT x FROM x OFFSET 1;
SELECT x FROM (DESCRIBE SELECT * FROM x);
SELECT COUNT(x) FROM x WHERE x = 200;
SELECT x, COUNT(x) FROM x GROUP BY x ORDER BY x;
PRAGMA x;
CREATE TABLE x (x BOOLEAN);
INSERT INTO x VALUES (TRUE);
SELECT COUNT(*) FROM x WHERE x = 1;
SELECT COUNT(*) FROM x WHERE x = CAST('1' AS BOOLEAN);
SELECT x FROM x WHERE x = 1;
SELECT COUNT(*) FROM x WHERE x = 1;
SELECT COUNT(*) FROM x WHERE x = CAST('1' AS BOOLEAN);
SELECT COUNT(*) FROM x WHERE (x = 1 AND (x = 0 OR x = 1));
PRAGMA x;
SELECT x FROM x LIMIT 1;
SELECT "x"['str_field'] FROM x;
SELECT "x"['f64_field'] FROM x;
SELECT "x" FROM x;
SELECT STRUCT_EXTRACT("x", 'f64_field') FROM x;
SELECT ("x")."x" FROM x;
SELECT "x"['f64_field'] FROM x;
SELECT * FROM x;
CREATE TABLE x AS SELECT * FROM x;
CREATE TABLE x AS SELECT * FROM x;
CREATE TABLE x AS SELECT * FROM x;
SELECT COUNT(*) FROM x WHERE x IS NULL;
CREATE TABLE x AS SELECT x.x AS x, x.x AS x FROM x AS x JOIN x AS x ON x.x = x.x AND x.x = 1;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x WHERE x IS NULL;
CREATE TABLE x AS SELECT x.x AS x, x.x AS x FROM x AS x LEFT JOIN x AS x ON x.x = x.x AND x.x = 1;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x WHERE x IS NULL;
CREATE TABLE x AS SELECT x.x AS x, x.x AS x FROM x AS x LEFT JOIN x AS x ON x.x = x.x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x WHERE x IS NULL;
SELECT * FROM x;
SELECT x[1] FROM x;
PRAGMA x;
CREATE VIEW x AS SELECT MAP([2], [{'x': MAP([3, 4], [1, 2]), 'x': 2}]) AS x;
SELECT * FROM x;
COPY x TO '__TEST_DIR__/map.parquet' WITH (FORMAT 'parquet');
SELECT * FROM x;
CREATE VIEW x AS SELECT MAP([2], [{'x': MAP([3, 4], [1, 2]), 'x': 2}]) AS x UNION ALL SELECT MAP([2], [{'x': MAP([3, 4], [1, 2]), 'x': 2}]);
SELECT * FROM x;
COPY x TO '__TEST_DIR__/map.parquet' WITH (FORMAT 'parquet');
SELECT * FROM x;
CREATE VIEW x AS SELECT {'x': [2], 'x': [{'x': {'x': [3, 4], 'x': [1, 2]}, 'x': 2}]} AS x;
SELECT * FROM x;
COPY x TO '__TEST_DIR__/map.parquet' WITH (FORMAT 'parquet');
SELECT * FROM x;
CREATE VIEW x AS SELECT {'x': [2], 'x': [{'x': {'x': [3, 4], 'x': [1, 2]}, 'x': [2]}]} AS x;
SELECT * FROM x;
COPY x TO '__TEST_DIR__/map.parquet' WITH (FORMAT 'parquet');
SELECT * FROM x;
CREATE TABLE x AS SELECT x AS x, [x] AS x FROM x AS x;
COPY x TO '__TEST_DIR__/list_bug_test.parquet';
SELECT x FROM x WHERE x = 5000;
SELECT * FROM x;
SELECT x FROM x LIMIT 10;
SET x = 1;
CREATE TABLE x AS SELECT x FROM x;
COPY x TO '__TEST_DIR__/test_5209.parquet' WITH (ROW_GROUP_SIZE 1000, PARQUET_VERSION 'V1');
SELECT SUM(x) > 10000, SUM(x) > 10000, SUM(x) > SUM(x) FROM x;
CREATE TABLE x AS SELECT * FROM x;
SELECT COUNT(*) FROM x;
SELECT * FROM x LIMIT 5;
COPY (SELECT 0.9 AS x) TO '__TEST_DIR__/tiny_decimal.parquet' WITH (format 'parquet', codec 'zstd');
SELECT * FROM x;
SELECT *, EPOCH_MS(x * 1000) FROM x WHERE x <= -9214570800 LIMIT 10;
SELECT DISTINCT x, TRUE AS x FROM x WHERE "x" BETWEEN '2023-01-26 20:00:00' AND '2023-01-28 04:00:00' AND (x = TRUE OR x <> '' OR x = 'SUSPENDED') AND x IS NULL;
SELECT DISTINCT x, TRUE AS x FROM x WHERE "x" BETWEEN '2023-01-26 20:00:00' AND '2023-01-28 04:00:00' AND (x = TRUE OR x <> '' OR x = 'SUSPENDED') AND x IS NULL;
PRAGMA x;
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('Test value 1!');
INSERT INTO x VALUES ('Test value 2!');
COPY x TO '__TEST_DIR__/output1.parquet' WITH (FORMAT PARQUET);
CREATE TABLE x (x TEXT, x INT);
INSERT INTO x VALUES ('Other test value', 1);
INSERT INTO x VALUES ('Other test value', 2);
COPY x TO '__TEST_DIR__/output2.parquet' WITH (FORMAT PARQUET);
SET x = TRUE;
SELECT x, x FROM x ORDER BY x, x;
PRAGMA x;
SELECT * FROM x ORDER BY 1;
SELECT * FROM x ORDER BY 1;
PRAGMA x;
SELECT * FROM x;
PRAGMA x;
PRAGMA x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT x FROM x;
SET x = TRUE;
SET x = TRUE;
SET x = TRUE;
SELECT * FROM x;
SET x = FALSE;
SET x = FALSE;
SELECT * FROM x;
PRAGMA x = 1;
PRAGMA x = 1;
SELECT * FROM x;
PRAGMA x;
SELECT SUM(CASE WHEN x THEN 1 ELSE 0 END), SUM(CASE WHEN x THEN 1 ELSE 0 END), SUM(CASE WHEN x THEN 1 ELSE 0 END), SUM(CASE WHEN x THEN 1 ELSE 0 END), SUM(CASE WHEN x THEN 1 ELSE 0 END) FROM x;
PRAGMA x;
SET x = 'v1.1.0';
CREATE TABLE x (x INT);
COPY (SELECT CAST('1992-01-01' AS DATE) AS x) TO '__TEST_DIR__/single_date.parquet' WITH (FORMAT parquet);
COPY x FROM '__TEST_DIR__/single_date.parquet';
COPY (SELECT CAST('1992-01-01' AS DATE) AS x, 42 AS x) TO '__TEST_DIR__/too_many_columns.parquet' WITH (FORMAT parquet);
COPY x FROM '__TEST_DIR__/too_many_columns.parquet';
COPY (SELECT 42 AS x) TO '__TEST_DIR__/f2.parquet' WITH (FORMAT parquet);
COPY (SELECT CAST('1992-01-01' AS DATE) AS x, 84 AS x) TO '__TEST_DIR__/f1.parquet' WITH (FORMAT parquet);
COPY x FROM '__TEST_DIR__/f*.parquet' WITH (FORMAT parquet);
SELECT * FROM x;
COPY (SELECT x AS x, x AS x, CAST(x AS SMALLINT) AS x, CAST(x AS DOUBLE) AS x, 'prefix_' || CAST(x AS TEXT) AS x, 'constant' AS x FROM x AS x) TO '__TEST_DIR__/skip.parquet' WITH (PARQUET_VERSION '${parquet_version}');
SELECT * FROM x WHERE x > 2995;
COPY (SELECT x AS x, [x, x + 1, x + 2] AS x, {'x': x, 'x': [x, x + 1, x + 2]} AS x, [{'x': x}, {'x': x + 1}, {'x': x + 2}] AS x FROM x AS x) TO '__TEST_DIR__/skip_nested.parquet' WITH (PARQUET_VERSION '${parquet_version}');
SELECT * FROM x WHERE x > 2995;
PRAGMA ADD_PARQUET_KEY('key128', '0123456789112345');
PRAGMA ADD_PARQUET_KEY('key128', '0123456789112345');
PRAGMA ADD_PARQUET_KEY('key128', '0123456789112345');
PRAGMA ADD_PARQUET_KEY('key128', '0123456789112345');
PRAGMA ADD_PARQUET_KEY('key128', '0123456789112345');
PRAGMA ADD_PARQUET_KEY('key128', '0123456789112345');
PRAGMA ADD_PARQUET_KEY('key128', '0123456789112345');
CREATE VIEW x AS SELECT * FROM x;
CREATE VIEW x AS SELECT * FROM x;
CREATE VIEW x AS SELECT * FROM x;
CREATE VIEW x AS SELECT * FROM x;
CREATE VIEW x AS SELECT * FROM x;
CREATE VIEW x AS SELECT * FROM x;
CREATE VIEW x AS SELECT * FROM x;
CREATE VIEW x AS SELECT * FROM x;
CREATE VIEW x AS SELECT * FROM x;
CREATE VIEW x AS SELECT * FROM x;
PRAGMA x;
PRAGMA ADD_PARQUET_KEY('my_cool_key', '42');
PRAGMA ADD_PARQUET_KEY('my_invalid_duck_key', 'ZHVjaw==');
PRAGMA ADD_PARQUET_KEY('my_invalid_duck_key', 'ZHVjaw==');
PRAGMA ADD_PARQUET_KEY('my_invalid_duck_key', 'ZHVjaw==');
PRAGMA ADD_PARQUET_KEY('key128', '0123456789112345');
PRAGMA ADD_PARQUET_KEY('key192', '012345678911234501234567');
PRAGMA ADD_PARQUET_KEY('key192', '012345678911234501234567');
PRAGMA ADD_PARQUET_KEY('key192', '012345678911234501234567');
SELECT * FROM x;
CREATE OR REPLACE TABLE x (x INT);
CREATE OR REPLACE TABLE x (x INT);
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
COPY (SELECT 42 AS x) TO '__TEST_DIR__/unencrypted.parquet';
SELECT * FROM x;
PRAGMA ADD_PARQUET_KEY('key256base64', 'MDEyMzQ1Njc4OTExMjM0NTAxMjM0NTY3ODkxMTIzNDU=');
SELECT * FROM x;
PRAGMA x;
PRAGMA ADD_PARQUET_KEY('key128', '0123456789112345');
PRAGMA ADD_PARQUET_KEY('key192', '012345678911234501234567');
PRAGMA ADD_PARQUET_KEY('key192', '012345678911234501234567');
PRAGMA ADD_PARQUET_KEY('key192', '012345678911234501234567');
SELECT * FROM x;
CREATE OR REPLACE TABLE x (x INT);
CREATE OR REPLACE TABLE x (x INT);
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
COPY (SELECT 42 AS x) TO '__TEST_DIR__/unencrypted.parquet';
SELECT * FROM x;
PRAGMA x;
PRAGMA ADD_PARQUET_KEY('key128', '0123456789112345');
PRAGMA ADD_PARQUET_KEY('key192', '012345678911234501234567');
PRAGMA ADD_PARQUET_KEY('key192', '012345678911234501234567');
PRAGMA ADD_PARQUET_KEY('key192', '012345678911234501234567');
PRAGMA ADD_PARQUET_KEY('key192', '012345678911234501234567');
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
PRAGMA ADD_PARQUET_KEY('key128', '0123456789112345');
PRAGMA ADD_PARQUET_KEY('key128', '0123456789112345');
PRAGMA ADD_PARQUET_KEY('key128', '0123456789112345');
PRAGMA ADD_PARQUET_KEY('key128', '0123456789112345');
PRAGMA ADD_PARQUET_KEY('key128', '0123456789112345');
PRAGMA ADD_PARQUET_KEY('key128', '0123456789112345');
PRAGMA ADD_PARQUET_KEY('key128', '0123456789112345');
CREATE VIEW x AS SELECT * FROM x;
CREATE VIEW x AS SELECT * FROM x;
CREATE VIEW x AS SELECT * FROM x;
CREATE VIEW x AS SELECT * FROM x;
CREATE VIEW x AS SELECT * FROM x;
CREATE VIEW x AS SELECT * FROM x;
CREATE VIEW x AS SELECT * FROM x;
CREATE VIEW x AS SELECT * FROM x;
CREATE VIEW x AS SELECT * FROM x;
CREATE VIEW x AS SELECT * FROM x;
PRAGMA x;
SELECT * FROM x;
CREATE TABLE x AS SELECT x, 'thisisalongstring' || CAST((x % 5000) AS TEXT) AS x FROM x AS x;
COPY x TO '__TEST_DIR__/parquet_expr.parquet';
CREATE VIEW x AS SELECT * FROM x;
SELECT COUNT(*) FROM x WHERE LEAST(x, 'thisisalongstring50') = x;
SELECT COUNT(*) FROM x WHERE LEAST(x, 'thisisalongstring50') = x AND x >= 'this';
SELECT COUNT(*) FROM x WHERE LEAST(x, 'thisisalongstring50') = x AND x >= 'thisisalongstring2000' AND x <= 'thisisalongstring4000';
CREATE TABLE x AS SELECT * FROM x;
SET x = FALSE;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
COPY x FROM 'data/parquet-testing/arrow/lineitem-arrow.parquet';
COPY x TO '__TEST_DIR__/lineitem.parquet';
SET x = TRUE;
SELECT x, x, REPLACE(x, '\', '/') FROM x ORDER BY x;
SELECT x, x, REPLACE(x, '\', '/') AS x FROM x WHERE x = 'data/parquet-testing/glob2/t1.parquet';
SELECT COUNT(x) FROM x WHERE x < 1000;
SELECT COUNT(x) FROM x WHERE x >= 'data';
SELECT REPLACE(x, '\', '/') FROM x WHERE x = 2;
CREATE TABLE x AS SELECT 1 AS x, 'test_csv_content' AS x;
COPY x TO '__TEST_DIR__/filename_as_column.csv' WITH (HEADER);
SELECT x, x FROM x;
CREATE TABLE x AS SELECT 1 AS x, 'test' AS x;
COPY x TO '__TEST_DIR__/filename_as_column.parquet';
SELECT * FROM x;
CREATE TABLE x (x INT, x TEXT, x TEXT);
INSERT INTO x SELECT * FROM x;
SELECT x, x, REPLACE(x, '\', '/') FROM x;
INSERT INTO x SELECT * FROM x;
SELECT x, x, REPLACE(x, '\', '/') FROM x;
COPY x FROM 'data/parquet-testing/glob/t1.parquet';
CREATE TABLE x AS SELECT * FROM x AS x;
COPY x TO '__TEST_DIR__/test_table_large.parquet' WITH (ROW_GROUP_SIZE 1000);
SELECT SUM(x), MAX(REGEXP_REPLACE(x, '^.*/', '')) FROM x WHERE x > 5000;
SELECT x, x, REPLACE(x, '\', '/') AS x FROM x WHERE x LIKE '%t1%';
SELECT x, x AS x, x FROM x WHERE x = 'value1';
SELECT x, x, x FROM x ORDER BY x;
SELECT x, x, x AS x FROM x WHERE x = 'data/parquet-testing/glob2/t1.parquet' OR x = 'data/parquet-testing/glob/t2.parquet' ORDER BY x;
SELECT x, x, x AS x FROM x WHERE x = 'data/parquet-testing/glob2/t1.parquet' AND x = 3 ORDER BY x;
SELECT x, x, x AS x FROM x WHERE x = 'data/parquet-testing/glob2/t1.parquet' AND x = 2 ORDER BY x;
SELECT x, x, x, x FROM x ORDER BY x;
SELECT x, x, x, x FROM x WHERE CONCAT(x, x) = '2013-01-01data/parquet-testing/hive-partitioning/different_order/part=b/date=2013-01-01/test.parquet';
SELECT x, x, x, x FROM x WHERE CONCAT(x, x) = '2012-01-01data/parquet-testing/hive-partitioning/different_order/date=2012-01-01/part=a/test.parquet';
SELECT x, x AS x, x FROM x WHERE x = 'value2';
SELECT x, x AS x, x FROM x WHERE x = 'value1';
SELECT x, x AS x, x FROM x WHERE x = 'value1';
SET x = TRUE;
SELECT x, x FROM x WHERE x LIKE '%mismatching_count%' AND x > 1;
SELECT x, x FROM x WHERE x LIKE '%mismatching_count%' AND x > 1;
SELECT x, x FROM x WHERE x LIKE '%mismatching_count%' AND x = 'value1';
SELECT x, x FROM x WHERE x LIKE '%mismatching_count%' AND x = 'value2';
SELECT x, x FROM x WHERE x LIKE '%simple%' AND x = 'value1';
SELECT x, x FROM x WHERE x LIKE '%simple%' AND x = 'value2';
PRAGMA x;
CREATE VIEW x AS SELECT * FROM x;
SELECT x FROM x LIMIT 10;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x WHERE x <= '2017-03-01' AND x >= '2017-03-01' AND x <= '2017-03-01' AND x >= '2017-03-01' AND x = 'CODE';
SELECT MIN(x), MAX(x), MIN(x), MAX(x), MIN(x), MAX(x), MIN(x), MAX(x), MIN(x), MAX(x), MIN(x), MAX(x) FROM x;
PRAGMA x;
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
SELECT * FROM x;
SELECT COUNT(*) FROM x;
SELECT * FROM x;
CREATE TABLE x (x INT, x BLOB);
COPY x FROM 'data/parquet-testing/glob/t?.parquet' WITH (FORMAT PARQUET);
SELECT * FROM x ORDER BY 1;
CREATE TABLE x (x INT, x INT);
COPY x FROM '*/sql/*/parquet/*/glob/t?.parquet' WITH (FORMAT PARQUET);
COPY (SELECT * FROM x) TO 's3://test-bucket/parquet_glob_s3/glob/t1.parquet';
CREATE TABLE x (x INT, x BLOB);
COPY x FROM 's3://test-bucket/parquet_glob_s3/glob/t[0-9].parquet' WITH (FORMAT PARQUET);
SELECT * FROM x ORDER BY 1, 2;
CREATE TABLE x (x INT, x INT);
COPY x FROM 's3://test-bucket/parquet_glob_s3/nonexistentfolderblablabla/t*.parquet' WITH (FORMAT PARQUET);
SET x = '${urlstyle}';
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
PRAGMA x = 4;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SET x = TRUE;
COPY x TO 's3://test-bucket/the_horror/?.*[1-0]parquetta??' WITH (FORMAT parquet);
SELECT COUNT(*) FROM x;
SET x = FALSE;
SET x = TRUE;
PRAGMA x;
SELECT * FROM x;
SELECT x, x, x, x FROM x ORDER BY x;
SELECT x, x, x, x FROM x ORDER BY x;
SELECT x, x FROM x WHERE x = '2013-01-01';
SELECT x, x FROM x WHERE x = '2012-01-01';
SELECT x, x FROM x WHERE x = '2018-01-01';
SELECT x, x, x, x FROM x WHERE x = 'a' OR x = 'b' ORDER BY x;
SELECT x, x FROM x WHERE x = '2013-01-01' AND x = 2;
SELECT x, x FROM x WHERE x = '2013-01-01' AND x = 1;
SELECT x, x, x FROM x WHERE x = '2012-01-01' AND x = 1;
SELECT x, x, x FROM x WHERE x = '2012-01-01' OR x <= 2 ORDER BY x;
SELECT * FROM x;
SELECT * FROM x WHERE x = x;
SELECT * FROM x;
SELECT x, x, x, CAST(x AS DATE) AS x FROM x WHERE CONCAT(CAST(x AS TEXT), x) = '2013-01-01b';
SELECT x, x, x, CAST(x AS DATE) AS x FROM x WHERE CONCAT(CAST(x AS TEXT), x) = '2012-01-01a';
SELECT x, x, REPLACE(x, '\', '/') AS x FROM x ORDER BY x;
SELECT x, x, REPLACE(x, '\', '/') AS x FROM x ORDER BY x;
SELECT x, x, x, x FROM x ORDER BY x;
SELECT x, x, x, x FROM x ORDER BY x;
SELECT x, x, x, x FROM x ORDER BY x;
COPY (SELECT * FROM x) TO '__TEST_DIR__/hive_filters' WITH (FORMAT PARQUET, PARTITION_BY c);
COPY (SELECT * FROM x) TO '__TEST_DIR__/hive_filters_2' WITH (FORMAT PARQUET, PARTITION_BY (x, x));
CREATE OR REPLACE TABLE x (x INT, x INT, x INT);
INSERT INTO x SELECT x % 12 + 1, x, x FROM x AS x, x AS x;
COPY (SELECT 2000 + (x // 12) AS x, x, x, x FROM x) TO '__TEST_DIR__/orders_m' WITH (FORMAT PARQUET, PARTITION_BY (x));
SELECT AVG(x), AVG(x), AVG(x), AVG(x) FROM x;
COPY (SELECT 2000 + (x // 12) AS x, x, x, x FROM x) TO '__TEST_DIR__/orders_y' WITH (FORMAT PARQUET, PARTITION_BY (x));
SELECT AVG(x), AVG(x), AVG(x), AVG(x) FROM x;
COPY (SELECT 2000 + (x // 12) AS x, x, x, x FROM x) TO '__TEST_DIR__/orders_ym' WITH (FORMAT PARQUET, PARTITION_BY (x, x));
SELECT AVG(x), AVG(x), AVG(x), AVG(x) FROM x;
COPY (SELECT 2000 + (x // 12) AS x, x, x, x FROM x ORDER BY RANDOM()) TO '__TEST_DIR__/orders_ym_rand' WITH (FORMAT PARQUET, PARTITION_BY (x, x));
SELECT AVG(x), AVG(x), AVG(x), AVG(x) FROM x;
SELECT * FROM x ORDER BY ALL;
SELECT * FROM x WHERE x IS NULL;
SELECT * FROM x WHERE x = 'a';
SELECT * FROM x WHERE x = '';
CREATE TABLE x AS SELECT x % 5 AS x, x % 2 AS x FROM x AS x;
CREATE TABLE x AS SELECT x % 5 AS x, x % 2 AS x FROM x AS x;
SELECT * FROM x ORDER BY ALL;
CREATE TABLE x AS SELECT x % 5 AS x, x % 2 AS x, x AS x FROM x AS x;
CREATE TABLE x AS SELECT x % 5 AS x, x % 2 AS x, x AS x FROM x AS x;
SELECT * FROM x ORDER BY ALL;
CREATE TABLE x (x INT, x INT);
INSERT INTO x (SELECT (x % 2) * 2, (x % 2) * 2 FROM x AS x);
COPY x TO 's3://test-bucket/skip_delay.parquet';
CREATE TABLE x AS SELECT * FROM x WHERE x = 1;
SELECT COUNT(*) FROM x;
PRAGMA x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT COUNT(*) > 0 FROM x;
SELECT COUNT(*) > 0 FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
COPY (SELECT * FROM (VALUES (CAST('\x0An\xC3\xB5' AS BLOB)), (CAST('\xFFXl\x9D' AS BLOB))) AS x) TO '__TEST_DIR__/blobs.parquet';
SELECT x FROM x;
SELECT MIN(x) FROM x;
SELECT x FROM x;
SELECT MAX(x) FROM x;
SELECT HEX(CAST(x AS BLOB)) FROM x;
SELECT HEX(MIN(x)) FROM x;
SELECT HEX(CAST(x AS BLOB)) FROM x;
SELECT HEX(MAX(x)) FROM x;
SET x = TRUE;
SELECT * FROM x;
SELECT * FROM x;
COPY (SELECT * FROM x) TO '__TEST_DIR__/cached.parquet' WITH (FORMAT 'parquet');
SELECT * FROM x;
COPY (SELECT * FROM x) TO '__TEST_DIR__/cached.parquet' WITH (FORMAT 'parquet');
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT COUNT(*) FROM x;
SELECT * FROM x ORDER BY 1;
SELECT * FROM x WHERE x = 'nan';
SELECT * FROM x WHERE x > 10;
SELECT * FROM x WHERE x = 'nan';
SELECT * FROM x WHERE x > 10;
PRAGMA x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x ORDER BY 1;
PRAGMA x;
CREATE TABLE x AS SELECT 337 AS x UNION ALL SELECT 948247 UNION ALL SELECT 1779793 UNION ALL SELECT 4779793;
COPY (SELECT * FROM x AS x) TO '__TEST_DIR__/integers.parquet' WITH (FORMAT PARQUET);
CREATE VIEW x AS SELECT * FROM x;
SELECT * FROM x LIMIT 5;
SELECT * FROM x WHERE x > 1978321 OR x = 334 LIMIT 5;
SELECT * FROM x WHERE x > 1978321 LIMIT 5;
SELECT * FROM x WHERE x > 4978321 LIMIT 5;
SELECT * FROM x WHERE x IN (SELECT * FROM x);
(SELECT * FROM x WHERE x > 1978321 LIMIT 5) UNION ALL (SELECT * FROM x WHERE x > 4978321 LIMIT 5);
PRAGMA x;
CREATE TABLE x AS SELECT 337 AS x UNION ALL SELECT 948247 UNION ALL SELECT 1779793 UNION ALL SELECT 4779793;
COPY (SELECT * FROM x AS x) TO '__TEST_DIR__/integers1.parquet' WITH (FORMAT PARQUET);
CREATE VIEW x AS SELECT * FROM x;
SELECT * FROM x LIMIT 5;
SELECT * FROM x WHERE x > 1978321 OR x = 334 LIMIT 5;
SELECT * FROM x WHERE x > 1978321 LIMIT 5;
SELECT * FROM x WHERE x > 4978321 LIMIT 5;
SELECT * FROM x WHERE x IN (SELECT * FROM x);
(SELECT * FROM x WHERE x > 1978321 LIMIT 5) UNION ALL (SELECT * FROM x WHERE x > 4978321 LIMIT 5);
SELECT "x", "x", "x" FROM x ORDER BY 1;
SELECT x, x, x, x FROM x;
SELECT x, x, x, x FROM x;
SELECT * FROM x;
SELECT x, x, x, x FROM x;
SELECT * FROM x;
SELECT x, x, x, x FROM x;
SELECT * FROM x;
SELECT x, x, x, x FROM x;
SELECT MIN(x), MAX(x), MIN("x"), MAX("x") FROM x;
SELECT * FROM x;
SELECT x, x, x, x FROM x;
SELECT * FROM x;
SELECT x, x, x, x FROM x;
SELECT * FROM x;
SELECT x, x, x, x FROM x;
SELECT * FROM x;
SELECT x, x, x, x FROM x;
SELECT * FROM x;
SELECT * FROM x;
COPY (SELECT '' AS x) TO '__TEST_DIR__/test.parquet';
SELECT x IS NULL AS x FROM x;
SELECT x IS NULL AS x, x IS NULL AS x FROM x;
SET x = 'nulls_first';
SET x = 'nulls_first';
CREATE OR REPLACE TABLE x (x BIGINT);
CREATE OR REPLACE TABLE x (x INT, x INT);
CREATE OR REPLACE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1), (2), (9223372036854775807);
INSERT INTO x VALUES (3, 4), (5, 6);
INSERT INTO x VALUES (100, 101), (102, 103);
COPY x TO '__TEST_DIR__/ubn1.parquet' WITH (FORMAT PARQUET);
COPY x TO '__TEST_DIR__/ubn2.parquet' WITH (FORMAT PARQUET);
COPY x TO '__TEST_DIR__/ubn3.parquet' WITH (FORMAT PARQUET);
SELECT x, x, x FROM x;
SELECT x, x, x FROM x ORDER BY x;
SELECT x FROM x ORDER BY x;
SELECT x FROM x ORDER BY x;
SELECT x FROM x ORDER BY x;
SELECT x FROM x ORDER BY x;
SELECT TYPEOF(x), TYPEOF(x), TYPEOF(x) FROM x LIMIT 1;
COPY (SELECT [CAST(42 AS INT)] AS x, [CAST(43 AS INT)] AS x) TO '__TEST_DIR__/listubn1.parquet' WITH (FORMAT PARQUET);
COPY (SELECT [CAST(44 AS BIGINT)] AS x, [CAST(45 AS INT)] AS x) TO '__TEST_DIR__/listubn2.parquet' WITH (FORMAT PARQUET);
SELECT x, x, x FROM x ORDER BY x;
SELECT TYPEOF(x), TYPEOF(x), TYPEOF(x) FROM x LIMIT 1;
PRAGMA x;
COPY (SELECT x, x, x FROM x) TO '__TEST_DIR__/union_by_name_lineitem1.parquet' WITH (FORMAT PARQUET);
COPY (SELECT x, x, x FROM x) TO '__TEST_DIR__/union_by_name_lineitem2.parquet' WITH (FORMAT PARQUET);
SELECT SUM(x), SUM(x), SUM(x) FROM x;
SELECT x FROM x;
SELECT x, x, x FROM x;
SELECT x, x, x FROM x WHERE x = 1;
SELECT x FROM x;
SELECT x, x, REPLACE(x, '\', '/') FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
SELECT x, x, REPLACE(x, '\', '/') FROM x WHERE x = 'data/parquet-testing/glob/t1.parquet';
SELECT x FROM x;
SELECT x FROM x WHERE x = 0;
SELECT x, x, REPLACE(x, '\', '/'), x FROM x ORDER BY x;
COPY (SELECT 42, 'hello') TO '__TEST_DIR__/${codec}.parquet' WITH (FORMAT 'parquet', CODEC '${codec}');
SELECT * FROM x;
COPY (SELECT * FROM x) TO '__TEST_DIR__/userdata-${codec}.parquet' WITH (FORMAT 'parquet', CODEC '${codec}', ROW_GROUP_SIZE 10);
SELECT * FROM x;
COPY (SELECT 42, 'hello') TO '__TEST_DIR__/gzip.parquet' WITH (FORMAT 'parquet', CODEC 'BLABLABLA');
COPY (SELECT 42, 'hello') TO '__TEST_DIR__/gzip.parquet' WITH (FORMAT 'parquet', CODEC);
COPY (SELECT 42, 'hello') TO '__TEST_DIR__/gzip.parquet' WITH (FORMAT 'parquet', CODEC 3);
PRAGMA x;
COPY (SELECT * FROM (VALUES (['asdf', 'fdsa'])) JOIN VALUES (1), (2) ON TRUE) TO '__TEST_DIR__/lists.parquet';
SELECT * FROM x;
SET x = 'nulls_first';
SELECT * FROM x ORDER BY 1;
PRAGMA x;
PRAGMA x;
CREATE VIEW x AS SELECT * FROM x;
WITH RECURSIVE x AS (SELECT 1, 0 UNION ALL (SELECT x + 1, x + x FROM x, x WHERE x <= x)) SELECT * FROM x ORDER BY x, x;
PRAGMA x;
COPY (SELECT 42 AS x) TO '__TEST_DIR__/lists.my_file_extension' WITH (FORMAT PARQUET);
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
SELECT COUNT(*) FROM x;
SELECT x, x, TRIM(x) FROM x;
SELECT * FROM x;
PRAGMA x;
SELECT x['A'], * FROM x WHERE x = '0';
PRAGMA x;
SELECT * FROM x LIMIT 100;
SELECT COUNT(*), MIN(x), MAX(x), SUM(x) FROM x AS x;
SELECT COUNT(*), MIN(x), MAX(x), SUM(x) FROM x AS x;
PRAGMA x = 4;
SELECT COUNT(*), MIN(x), MAX(x), SUM(x) FROM x AS x;
SELECT COUNT(*), MIN(x), MAX(x), SUM(x) FROM x AS x;
PRAGMA x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x LIMIT 10;
SELECT * FROM x LIMIT 10;
COPY (SELECT 1 AS x, 2 AS x, 3 AS x) TO '__TEST_DIR__/dupe_cols.parquet';
SELECT x, "x", "x" FROM x;
COPY (SELECT 1 AS x, 2 AS x, 3 AS "x") TO '__TEST_DIR__/dupe_cols.parquet';
SELECT x, "x", "x" FROM x;
COPY (SELECT 1 AS x, 3 AS "x", 2 AS x) TO '__TEST_DIR__/dupe_cols.parquet';
SELECT x, "x", "x" FROM x;
PRAGMA x;
SELECT COUNT(*) FROM x WHERE x > 500;
SELECT COUNT(*) FROM x WHERE x < 500;
SELECT COUNT(*) FROM x WHERE x > 100 AND x < 900;
SELECT COUNT(*) FROM x WHERE x BETWEEN 100 AND 900;
SELECT x, x, x, x, x FROM x WHERE x = 42;
SELECT COUNT(*) FROM x WHERE x = 42;
SELECT COUNT(*) FROM x WHERE x < 1000;
SELECT COUNT(*) FROM x WHERE x < 1000;
SELECT x, x FROM x WHERE x = 'Mark' AND x <> '';
SELECT x, x FROM x WHERE x = 'Mark' AND x <> '';
SELECT COUNT(*) FROM x WHERE x = 'Male' AND x = 'Mark';
SELECT x FROM x WHERE x > 'Mark' AND x > 'Germany' AND x > 0 ORDER BY x LIMIT 10;
SELECT LENGTH(x) FROM x WHERE x = 1 ORDER BY x;
SELECT * FROM x WHERE x < CAST('1978-01-01' AS DATE);
SELECT * FROM x WHERE x > CAST('1982-01-01' AS DATE) AND x < CAST('1986-01-01' AS DATE);
SELECT * FROM x WHERE x >= CAST('1990-01-01' AS DATE);
SELECT COUNT(*) FROM x WHERE x = CAST('1970-01-01' AS DATE);
SELECT COUNT(*) FROM x WHERE x > CAST('1970-01-01' AS DATE);
SELECT COUNT(*) FROM x WHERE x >= CAST('1982-01-01' AS DATE) AND x < CAST('1985-01-01' AS DATE);
SELECT COUNT(*) FROM x WHERE x < CAST('1970-01-01' AS DATE);
SELECT COUNT(*) FROM x WHERE x BETWEEN CAST('1975-01-01' AS DATE) AND CAST('1976-01-01' AS DATE);
SELECT COUNT(*) FROM x WHERE x >= CAST('1975-01-01' AS DATE) AND x < CAST('1976-01-01' AS DATE);
SELECT COUNT(*) FROM x WHERE x < CAST('1975-01-01' AS DATE) AND x > CAST('1976-01-01' AS DATE);
SELECT COUNT(*) FROM x WHERE x < CAST('1975-01-01' AS DATE) OR x > CAST('1976-01-01' AS DATE);
SELECT COUNT(*) FROM x WHERE x < CAST('1975-01-01' AS DATE) OR x > CAST('1976-01-01' AS DATE);
SELECT COUNT(*) FROM x WHERE x < CAST('1975-01-01' AS DATE) OR x >= CAST('1976-01-01' AS DATE);
SELECT COUNT(*) FROM x WHERE x IS NULL;
SET x = TRUE;
SET x = FALSE;
SELECT COUNT(*) FROM x;
SET x = FALSE;
SELECT COUNT(*) FROM x;
SET x = TRUE;
SET x = 1;
CREATE TABLE x AS SELECT * FROM x UNION ALL SELECT * FROM x UNION ALL SELECT * FROM x UNION ALL SELECT * FROM x UNION ALL SELECT * FROM x UNION ALL SELECT * FROM x UNION ALL SELECT * FROM x UNION ALL SELECT * FROM x UNION ALL SELECT * FROM x;
COPY (SELECT * FROM x) TO 's3://test-bucket/row-user-data.parquet' WITH (FORMAT PARQUET, ROW_GROUP_SIZE 4096);
COPY (SELECT * FROM x) TO 's3://test-bucket/row-user-data.parquet' WITH (FORMAT PARQUET, ROW_GROUP_SIZE 4096);
PRAGMA x = 10;
PRAGMA x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SET x = FALSE;
SELECT COUNT(*) FROM x;
SET x = TRUE;
SELECT COUNT(*) FROM (SELECT * FROM x UNION ALL SELECT * FROM x) AS x;
SET x = FALSE;
SELECT COUNT(*) FROM (SELECT * FROM x UNION ALL SELECT * FROM x) AS x;
PRAGMA x;
SELECT * FROM x;
SELECT * FROM x AS x LIMIT 3;
SELECT * FROM x;
SELECT UNNEST(x) FROM x;
SELECT * FROM x;
SELECT x, x FROM x LIMIT 10;
SELECT * FROM (SELECT x, UNNEST(x) AS x FROM x) AS x WHERE NOT x IS NULL LIMIT 10;
SELECT x, x FROM x LIMIT 10;
SELECT x, UNNEST(x) FROM x LIMIT 20;
SELECT x, STRUCT_EXTRACT(UNNEST(x), 'name'), STRUCT_EXTRACT(UNNEST(x), 'id') FROM x LIMIT 20;
PRAGMA x;
SELECT COUNT(x) FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT x, x, x, x FROM x LIMIT 10;
SELECT x, x, x, x FROM x LIMIT 10;
SELECT x, x, x, x FROM x LIMIT 10;
SELECT x, x, x, x FROM x LIMIT 1;
SELECT x, x, x, x FROM x LIMIT 1;
SELECT COUNT(x) FROM x WHERE x = 200;
SELECT x, COUNT(x) FROM x GROUP BY x ORDER BY x;
SELECT x FROM x WHERE x = 1;
SELECT x FROM x LIMIT 1;
SELECT * FROM x;
SELECT "x"['str_field'] FROM x;
SELECT "x"['f64_field'] FROM x;
SELECT "x" FROM x;
SELECT "x"['f64_field'] FROM x;
SELECT * FROM x;
SELECT x[1] FROM x;
SELECT * FROM x;
SELECT * FROM x LIMIT 2;
PRAGMA x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT x.* FROM x AS x;
SELECT x.x FROM x AS x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT COUNT(*) FROM x;
CREATE VIEW x AS SELECT * FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(x), COUNT(x), COUNT(x), COUNT(x), COUNT(x), COUNT(x), COUNT(x), COUNT(x), COUNT(x), COUNT(x), COUNT(x), COUNT(x), COUNT(x) FROM x;
SELECT MIN(x), MAX(x) FROM x;
SELECT MIN(x), MAX(x) FROM x;
SELECT FIRST(x) OVER x, LAST(x) OVER x FROM x WINDOW x AS (ORDER BY x RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) LIMIT 1;
SELECT MIN(x), MAX(x) FROM x;
SELECT FIRST(x) OVER x, LAST(x) OVER x FROM x WINDOW x AS (ORDER BY x RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) LIMIT 1;
SELECT MIN(x), MAX(x) FROM x;
SELECT FIRST(x) OVER x, LAST(x) OVER x FROM x WINDOW x AS (ORDER BY x RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) LIMIT 1;
SELECT MIN(x), MAX(x) FROM x;
SELECT FIRST(x) OVER x, LAST(x) OVER x FROM x WINDOW x AS (ORDER BY x RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) LIMIT 1;
SELECT MIN(x), MAX(x) FROM x;
SELECT FIRST(x) OVER x, LAST(x) OVER x FROM x WINDOW x AS (ORDER BY x RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) LIMIT 1;
SELECT MIN(x), MAX(x) FROM x;
SELECT FIRST(x) OVER x, LAST(x) OVER x FROM x WINDOW x AS (ORDER BY x RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) LIMIT 1;
SELECT MIN(x), MAX(x) FROM x;
SELECT FIRST(x) OVER x, LAST(x) OVER x FROM x WINDOW x AS (ORDER BY x RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) LIMIT 1;
SELECT MIN(x), MAX(x) FROM x;
SELECT FIRST(x) OVER x, LAST(x) OVER x FROM x WINDOW x AS (ORDER BY x RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) LIMIT 1;
SELECT MIN(x), MAX(x) FROM x;
SELECT FIRST(x) OVER x, LAST(x) OVER x FROM x WINDOW x AS (ORDER BY x RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) LIMIT 1;
SELECT MIN(x), MAX(x) FROM x;
SELECT FIRST(x) OVER x, LAST(x) OVER x FROM x WINDOW x AS (ORDER BY x RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) LIMIT 1;
SELECT MIN(x), MAX(x) FROM x;
SELECT FIRST(x) OVER x, LAST(x) OVER x FROM x WINDOW x AS (ORDER BY x RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) LIMIT 1;
SELECT MIN(x), MAX(x) FROM x;
SELECT FIRST(x) OVER x, LAST(x) OVER x FROM x WINDOW x AS (ORDER BY x RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) LIMIT 1;
SELECT * FROM x;
PRAGMA x = x;
SET x = TRUE;
SELECT x FROM x WHERE x > '2020-10-06';
PRAGMA x;
CREATE TABLE x AS SELECT * FROM x;
PRAGMA x;
SELECT MIN(CAST(x AS TEXT)), MAX(CAST(x AS TEXT)), MIN(CAST(x AS TEXT)), MAX(CAST(x AS TEXT)), MIN(CAST(x AS TEXT)), MAX(CAST(x AS TEXT)), MIN(CAST(x AS TEXT)), MAX(CAST(x AS TEXT)), MIN(CAST(x AS TEXT)), MAX(CAST(x AS TEXT)), MIN(CAST(x AS TEXT)), MAX(CAST(x AS TEXT)), MIN(CAST(x AS TEXT)), MAX(CAST(x AS TEXT)), MIN(CAST(x AS TEXT)), MAX(CAST(x AS TEXT)), MIN(CAST(x AS TEXT)), MAX(CAST(x AS TEXT)), MIN(CAST(x AS TEXT)), MAX(CAST(x AS TEXT)), MIN(CAST(x AS TEXT)), MAX(CAST(x AS TEXT)), MIN(CAST(x AS TEXT)), MAX(CAST(x AS TEXT)), MIN(CAST(x AS TEXT)), MAX(CAST(x AS TEXT)), MIN(CAST(x AS TEXT)), MAX(CAST(x AS TEXT)), MIN(CAST(x AS TEXT)), MAX(CAST(x AS TEXT)), MIN(CAST(x AS TEXT)), MAX(CAST(x AS TEXT)), MIN(CAST(x AS TEXT)), MAX(CAST(x AS TEXT)), MIN(CAST(x AS TEXT)), MAX(CAST(x AS TEXT)), MIN(CAST(x AS TEXT)), MAX(CAST(x AS TEXT)) FROM x;
COPY x TO '__TEST_DIR__/yellowcab.parquet' WITH (FORMAT PARQUET);
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
SELECT x FROM x ORDER BY 1;
SELECT x FROM x WHERE x >= '2022-11-27 00:00:00';
PRAGMA x;
SELECT * FROM x ORDER BY 1;
PRAGMA x;
SELECT TYPEOF(x) FROM x LIMIT 1;
SET x = 'UTC';
SELECT x FROM x;
CREATE SCHEMA x.x;
COPY (SELECT CAST(x AS UBIGINT) AS x, CAST(x AS BIGINT) AS x, CAST(x AS SMALLINT) AS x, CAST(x AS UINTEGER), CAST(x AS SMALLINT) AS x, CAST(x AS DECIMAL(18, 4)) AS x, CAST(x AS DECIMAL(8, 3)) AS x, CAST(x AS DECIMAL(38, 4)) AS x, x, x, CAST(x AS TIMESTAMP) AS x, CAST(x AS TIMESTAMP) AS x, CAST(x AS TEXT) AS x, x, x, x FROM x.x) TO '__TEST_DIR__/lineitem_different_types.parquet' WITH (FORMAT PARQUET);
CREATE TABLE x AS SELECT * FROM x.x LIMIT 0;
COPY x FROM '__TEST_DIR__/lineitem_different_types.parquet';
PRAGMA TPCH(1);
PRAGMA TPCH(6);
CREATE SCHEMA x.x;
COPY (SELECT x, x, x, x, x, x, x, x, x, x, x, x FROM x.x LIMIT 30000) TO '__TEST_DIR__/schema_evolution_lineitem1.parquet' WITH (FORMAT PARQUET);
COPY (SELECT x, x, CAST(x AS TIMESTAMP) AS x, x, CAST(x AS SMALLINT) AS x, CAST(x AS BIGINT) AS x, x, x, CAST(x AS TEXT) AS x, x, CAST(x AS DECIMAL(18, 4)) AS x, CAST(x AS BIGINT) AS x, CAST(x AS INT128) AS x, CAST(x AS DECIMAL(8, 3)) AS x, CAST(x AS TIMESTAMP) AS x, x FROM x.x OFFSET 30000) TO '__TEST_DIR__/schema_evolution_lineitem2.parquet' WITH (FORMAT PARQUET);
CREATE VIEW x AS SELECT * FROM x;
PRAGMA TPCH(1);
PRAGMA TPCH(6);
SELECT * FROM x;
SELECT x, x, x, x FROM x ORDER BY x, x;
SELECT x, x, x, x FROM x ORDER BY x;
SELECT x, x, x, x FROM x WHERE x = 2 ORDER BY x;
CREATE TABLE x AS SELECT 2 AS x;
SELECT x, x, x, x FROM x WHERE x = (SELECT MAX(x) FROM x) ORDER BY x;
SELECT x, x, x, x FROM x ORDER BY x;
SELECT x, x, x, x FROM x WHERE x IS NULL ORDER BY x;
SELECT x, x, x, x FROM x WHERE x IS NOT DISTINCT FROM NULL ORDER BY x;
SELECT x, x, x, x FROM x WHERE x > 0 ORDER BY x;
SELECT x, x, x, x, x.replace('\', '/').split('/')[-2] FROM x WHERE x > 0 ORDER BY x;
SELECT x, x, x, x, x.replace('\', '/').split('/')[-2] FROM x WHERE x.replace('\', '/') >= 'data/parquet-testing/hive-partitioning/union_by_name/x=2' ORDER BY x;
SELECT x, x, x, x, x.replace('\', '/').split('/')[-2] FROM x WHERE x.replace('\', '/') < 'data/parquet-testing/hive-partitioning/union_by_name/x=2' ORDER BY x;
SELECT x, x, x, x, x.replace('\', '/').split('/')[-2] FROM x WHERE x.replace('\', '/') < 'data/parquet-testing/hive-partitioning/union_by_name/x=1' ORDER BY x;
COPY (SELECT 42 AS x, 84 AS x) TO '__TEST_DIR__/union_by_name_pushdown1.parquet';
COPY (SELECT 128 AS x, 33 AS x) TO '__TEST_DIR__/union_by_name_pushdown2.parquet';
SELECT * FROM x;
SELECT x FROM x;
SELECT x FROM x;
SELECT * FROM x WHERE x > 0;
SELECT * FROM x WHERE x > 0 OR x IS NULL;
SELECT * FROM x WHERE x > 0;
CREATE TABLE x AS SELECT x, x // 5 AS x FROM x AS x;
COPY x TO '__TEST_DIR__/batched_integers.parquet';
CREATE TABLE x AS SELECT * FROM x;
SELECT SUM(x), SUM(x), COUNT(*), COUNT(x), COUNT(x) FROM x;
SELECT * FROM x ORDER BY x LIMIT 5;
SELECT * FROM x ORDER BY x LIMIT 5 OFFSET 99997;
SELECT * FROM x QUALIFY x <= LAG(x) OVER ();
CREATE VIEW x AS SELECT * FROM x WHERE (x % 2 = 0 AND x < 300000) OR (x BETWEEN 500000 AND 700000);
COPY x TO '__TEST_DIR__/batched_integers_filters.parquet';
SELECT SETSEED(0.72);
COPY (SELECT CAST(UUID() AS TEXT) AS x, UUID() AS x FROM x AS x) TO '__TEST_DIR__/random_uuids.parquet';
SET x = '650MB';
COPY x TO '__TEST_DIR__/random_uuids_copy.parquet';
SET x = '2GB';
SELECT *, ROW_NUMBER() OVER () AS x FROM x EXCEPT SELECT *, ROW_NUMBER() OVER () AS x FROM x;
COPY (SELECT * FROM x AS x) TO '__TEST_DIR__/mem_usage_mix_batches_small.parquet' WITH (ROW_GROUP_SIZE 5000);
COPY (SELECT * FROM x AS x) TO '__TEST_DIR__/mem_usage_mix_batches_large.parquet' WITH (ROW_GROUP_SIZE 200000);
COPY (SELECT * FROM x AS x) TO '__TEST_DIR__/mem_usage_mix_batches_odd.parquet' WITH (ROW_GROUP_SIZE 999);
COPY (SELECT * FROM x AS x) TO '__TEST_DIR__/mem_usage_mix_batches_odd_again.parquet' WITH (ROW_GROUP_SIZE 99979);
CREATE VIEW x AS SELECT * FROM x;
SET x = '500MB';
COPY x TO '__TEST_DIR__/mem_usage_mix_result.parquet';
SET x = '2GB';
SELECT *, ROW_NUMBER() OVER () AS x FROM x EXCEPT SELECT *, ROW_NUMBER() OVER () AS x FROM x;
SELECT SETSEED(0.72);
COPY (SELECT CAST(UUID() AS TEXT) AS x, UUID() AS x FROM x AS x) TO '__TEST_DIR__/random_uuids.parquet';
SET x = '750MB';
COPY x TO '__TEST_DIR__/lineitem_memory_usage.parquet' WITH (restart);
SET x = '500MB';
COPY x TO '__TEST_DIR__/lineitem_memory_usage_copy.parquet';
SET x = '2GB';
SELECT *, ROW_NUMBER() OVER () AS x FROM x EXCEPT SELECT *, ROW_NUMBER() OVER () AS x FROM x;
CREATE TABLE x AS SELECT x, x // 5 AS x FROM x AS x;
CREATE TABLE x AS SELECT x, x // 5 AS x FROM x AS x;
SELECT x FROM x;
SELECT x FROM x;
SELECT x FROM x;
COPY (SELECT * FROM x AS x) TO '__TEST_DIR__/mix_batches_small.parquet' WITH (ROW_GROUP_SIZE 5000);
COPY (SELECT * FROM x AS x) TO '__TEST_DIR__/mix_batches_large.parquet' WITH (ROW_GROUP_SIZE 200000);
COPY (SELECT * FROM x AS x) TO '__TEST_DIR__/mix_batches_odd.parquet' WITH (ROW_GROUP_SIZE 999);
COPY (SELECT * FROM x AS x) TO '__TEST_DIR__/mix_batches_odd_again.parquet' WITH (ROW_GROUP_SIZE 99979);
CREATE VIEW x AS SELECT * FROM x;
CREATE VIEW x AS SELECT * FROM x WHERE (x // 10000) % 2 = 0;
CREATE VIEW x AS SELECT * FROM x WHERE (x // 10000) % 2 = 0 OR (x > 200000 AND x < 400000) OR (x > 600000 AND x < 800000);
COPY x TO '__TEST_DIR__/mixed_batches_v1.parquet';
CREATE TABLE x AS SELECT * FROM x;
CREATE TABLE x AS SELECT * FROM x;
CREATE TABLE x AS SELECT * FROM x;
COPY x TO '__TEST_DIR__/mixed_batches_v2.parquet';
CREATE TABLE x AS SELECT * FROM x;
CREATE TABLE x AS SELECT * FROM x;
CREATE TABLE x AS SELECT * FROM x;
COPY x TO '__TEST_DIR__/mixed_batches_v3.parquet';
CREATE TABLE x AS SELECT * FROM x;
CREATE TABLE x AS SELECT * FROM x;
CREATE TABLE x AS SELECT * FROM x;
COPY x TO '__TEST_DIR__/mixed_batches_v4.parquet';
CREATE TABLE x AS SELECT * FROM x;
CREATE TABLE x AS SELECT * FROM x;
CREATE TABLE x AS SELECT * FROM x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP VIEW IF EXISTS x;
DROP VIEW IF EXISTS x;
DROP VIEW IF EXISTS x;
CREATE OR REPLACE VIEW x AS SELECT * FROM x UNION ALL SELECT * FROM x UNION ALL SELECT * FROM x UNION ALL SELECT * FROM x;
CREATE OR REPLACE VIEW x AS SELECT * FROM x WHERE (x // 10000) % 2 = 0;
CREATE OR REPLACE VIEW x AS SELECT * FROM x WHERE (x // 10000) % 2 = 0 OR (x > 200000 AND x < 400000) OR (x > 600000 AND x < 800000);
PRAGMA x;
COPY (SELECT * FROM (VALUES ('f1', CAST(42 AS INT)), ('f1', CAST(8 AS INT)), ('f1', CAST(NULL AS INT))) AS x) TO '__TEST_DIR__/multi_file_filter_f1.parquet';
COPY (SELECT * FROM (VALUES (CAST(42 AS BIGINT), 'f2'), (CAST(124 AS BIGINT), 'f2'), (CAST(NULL AS BIGINT), 'f2')) AS x) TO '__TEST_DIR__/multi_file_filter_f2.parquet';
CREATE VIEW x AS SELECT * FROM x;
CREATE VIEW x AS SELECT * FROM x;
SELECT x, x FROM x WHERE x = '042';
SELECT x, x FROM x WHERE x = '042' ORDER BY ALL;
SELECT x, x FROM x WHERE x > 10 ORDER BY ALL;
SELECT x, x FROM x WHERE x > '10' ORDER BY ALL;
SELECT x, x FROM x WHERE x IS NULL;
PRAGMA x;
COPY (SELECT * FROM (VALUES ('f1', 42), ('f1', 8), ('f1', NULL)) AS x) TO '__TEST_DIR__/multi_file_filter_f1.parquet';
COPY (SELECT * FROM (VALUES ('042', 'f2'), ('124', 'f2'), (NULL, 'f2')) AS x) TO '__TEST_DIR__/multi_file_filter_f2.parquet';
CREATE VIEW x AS SELECT * FROM x;
CREATE VIEW x AS SELECT * FROM x;
SELECT x, x FROM x WHERE x = '042';
SELECT x, x FROM x WHERE x = '042';
SELECT x, x FROM x WHERE x > 10 ORDER BY ALL;
SELECT x, x FROM x WHERE x > '10' ORDER BY ALL;
SELECT x, x FROM x WHERE x IS NULL;
COPY (SELECT {'x': x, 'x': x} AS x FROM (VALUES ('f1', CAST(42 AS INT)), ('f1', CAST(8 AS INT)), ('f1', CAST(NULL AS INT))) AS x) TO '__TEST_DIR__/multi_file_filter_f1.parquet';
COPY (SELECT {'x': x, 'x': x} AS x FROM (VALUES (CAST(42 AS BIGINT), 'f2'), (CAST(124 AS BIGINT), 'f2'), (CAST(NULL AS BIGINT), 'f2')) AS x) TO '__TEST_DIR__/multi_file_filter_f2.parquet';
CREATE VIEW x AS SELECT * FROM x;
CREATE VIEW x AS SELECT * FROM x;
SELECT x.x FROM x ORDER BY ALL;
SELECT x.x, x.x FROM x WHERE x.x = '042';
SELECT x.x FROM x WHERE x.x = '042' ORDER BY ALL;
SELECT x.x, x.x FROM x WHERE x.x > 10 ORDER BY ALL;
SELECT x.x FROM x WHERE x.x > '10' ORDER BY ALL;
SELECT x.x, x.x FROM x WHERE x.x IS NULL;
CREATE TABLE x AS SELECT LIST(x % 2 = 0) AS x FROM x AS x UNION ALL SELECT [TRUE, FALSE, NULL, FALSE, TRUE] UNION ALL SELECT [] UNION ALL SELECT NULL UNION ALL SELECT LIST(x % 3 = 0) AS x FROM x AS x UNION ALL SELECT [TRUE, FALSE, NULL, FALSE, TRUE];
SELECT COUNT(*), COUNT(x), SUM(CASE WHEN x THEN 1 ELSE 0 END) FROM (SELECT UNNEST(x) AS x FROM x);
COPY x TO '__TEST_DIR__/list_of_bools.parquet' WITH (FORMAT PARQUET);
SELECT COUNT(*), COUNT(x), SUM(CASE WHEN x THEN 1 ELSE 0 END) FROM (SELECT UNNEST(x) AS x FROM x);
CREATE TABLE x AS SELECT [1, 0, 1] AS x FROM x UNION ALL SELECT [] UNION ALL SELECT NULL UNION ALL SELECT [1, 0, NULL, 0, 1] UNION ALL SELECT [1, 0, NULL, 1] AS x FROM x AS x;
SELECT COUNT(*), COUNT(x), SUM(x) FROM (SELECT UNNEST(x) AS x FROM x);
COPY x TO '__TEST_DIR__/many_ints.parquet' WITH (FORMAT PARQUET);
SELECT COUNT(*), COUNT(x), SUM(x) FROM (SELECT UNNEST(x) AS x FROM x);
CREATE TABLE x AS SELECT [TRUE, FALSE, TRUE] AS x FROM x UNION ALL SELECT [] UNION ALL SELECT NULL UNION ALL SELECT [TRUE, FALSE, NULL, FALSE, TRUE] UNION ALL SELECT [TRUE, FALSE, NULL, TRUE] AS x FROM x AS x;
SELECT COUNT(*), COUNT(x), SUM(CASE WHEN x THEN 1 ELSE 0 END) FROM (SELECT UNNEST(x) AS x FROM x);
COPY x TO '__TEST_DIR__/many_bools.parquet' WITH (FORMAT PARQUET);
SELECT COUNT(*), COUNT(x), SUM(CASE WHEN x THEN 1 ELSE 0 END) FROM (SELECT UNNEST(x) AS x FROM x);
CREATE TABLE x AS SELECT REPEAT('duckduck', 10000 + x) AS x FROM x AS x;
SELECT MIN(STRLEN(x)), MAX(STRLEN(x)), AVG(STRLEN(x)) FROM x;
COPY x TO '__TEST_DIR__/largestrings.parquet' WITH (FORMAT PARQUET);
SELECT * FROM x;
PRAGMA x;
CREATE TABLE x AS SELECT * EXCLUDE (x, "x") REPLACE (CASE WHEN EXTRACT(MONTH FROM x) <> 0 THEN INTERVAL '1 month 1 day 12:13:34.123' ELSE x END AS x) FROM x;
CREATE TABLE x AS SELECT * EXCLUDE (x, "x") REPLACE (CASE WHEN EXTRACT(MONTH FROM x) <> 0 THEN INTERVAL '1 month 1 day 12:13:34.123' ELSE x END AS x) FROM x;
SELECT * REPLACE (CAST(x AS DOUBLE) AS x, CAST(x AS DOUBLE) AS x, CAST(CAST(x AS TIME) AS TIMETZ) AS x) FROM x;
SELECT * FROM x;
PRAGMA x;
CREATE TABLE x (x BOOLEAN);
INSERT INTO x SELECT CASE WHEN x % 2 = 0 THEN NULL ELSE x % 7 = 0 OR x % 3 = 0 END AS x FROM x AS x;
SELECT COUNT(*), COUNT(x), BOOL_AND(x), BOOL_OR(x), SUM(CASE WHEN x THEN 1 ELSE 0 END) AS x, SUM(CASE WHEN x THEN 0 ELSE 1 END) AS x FROM x;
COPY x TO '__TEST_DIR__/bools.parquet' WITH (FORMAT 'parquet');
SELECT COUNT(*), COUNT(x), BOOL_AND(x), BOOL_OR(x), SUM(CASE WHEN x THEN 1 ELSE 0 END) AS x, SUM(CASE WHEN x THEN 0 ELSE 1 END) AS x FROM x;
SELECT TYPEOF(x) FROM x LIMIT 1;
PRAGMA x;
CREATE TABLE x AS SELECT * FROM x AS x;
COPY x TO '__TEST_DIR__/compress_level.parquet' WITH (FORMAT 'parquet', COMPRESSION_LEVEL 10);
COPY x TO '__TEST_DIR__/compress_level.parquet' WITH (FORMAT 'parquet', CODEC ZSTD, COMPRESSION_LEVEL 0);
COPY x TO '__TEST_DIR__/compress_level.parquet' WITH (FORMAT 'parquet', CODEC ZSTD, COMPRESSION_LEVEL 23);
COPY x TO '__TEST_DIR__/compress_level.parquet' WITH (FORMAT 'parquet', CODEC ZSTD, COMPRESSION_LEVEL 23);
COPY x TO '__TEST_DIR__/compress_level.parquet' WITH (FORMAT 'parquet', CODEC ZSTD, COMPRESSION_LEVEL 23);
COPY x TO '__TEST_DIR__/compress_level.parquet' WITH (FORMAT 'parquet', CODEC ZSTD, COMPRESSION_LEVEL 1);
COPY x TO '__TEST_DIR__/compress_level2.parquet' WITH (FORMAT 'parquet', CODEC ZSTD, COMPRESSION_LEVEL 22);
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
CREATE TABLE x (x DATE);
INSERT INTO x VALUES (CAST('1992-01-01' AS DATE)), (CAST('1900-01-01' AS DATE)), (NULL), (CAST('2020-09-27' AS DATE));
SELECT * FROM x;
COPY x TO '__TEST_DIR__/dates.parquet' WITH (FORMAT 'parquet');
SELECT * FROM x;
SELECT TYPEOF(x) FROM x LIMIT 1;
SELECT * FROM x WHERE x = '1992-01-01';
PRAGMA x;
CREATE TABLE x (x DECIMAL(4, 1), x DECIMAL(9, 2), x DECIMAL(18, 3), x DECIMAL(38, 4));
INSERT INTO x VALUES (-999.9, -9999999.99, -999999999999999.999, -999999999999999999999999999999999.9999), (NULL, NULL, NULL, NULL), (42, 42, 42, 42), (-42, -42, -42, -42), (0, 0, 0, 0), (999.9, 9999999.99, 999999999999999.999, 999999999999999999999999999999999.9999);
COPY x TO '__TEST_DIR__/decimals.parquet';
SELECT * FROM x;
SELECT * FROM x;
SELECT x, x, x, x FROM x;
DELETE FROM x WHERE x < -42 OR x > 42;
DELETE FROM x WHERE x < -42 OR x > 42;
DELETE FROM x WHERE x < -42 OR x > 42;
DELETE FROM x WHERE x < -42 OR x > 42;
DELETE FROM x WHERE x < -42 OR x > 42;
PRAGMA x;
SELECT STATS(x), STATS(x), STATS(x), STATS(x) FROM x LIMIT 1;
PRAGMA x;
CREATE TABLE x (x mood);
INSERT INTO x VALUES ('happy'), ('happy'), ('joy'), ('joy'), ('happy'), ('happy'), ('joy'), ('joy'), ('happy'), ('happy'), ('joy'), ('joy'), ('happy'), ('happy'), ('joy'), ('joy'), ('happy'), ('happy'), ('joy'), ('joy'), ('happy'), ('happy'), ('joy'), ('joy'), ('happy'), ('happy'), ('joy'), ('joy'), ('joy');
COPY x TO '__TEST_DIR__/enums.parquet' WITH (FORMAT PARQUET);
SELECT * FROM x;
UPDATE x SET x = NULL WHERE x = 'joy';
COPY x TO '__TEST_DIR__/enums.parquet' WITH (FORMAT PARQUET);
SELECT * FROM x;
UPDATE x SET x = NULL;
COPY x TO '__TEST_DIR__/enums.parquet' WITH (FORMAT PARQUET);
SELECT * FROM x;
COPY (SELECT x AS x FROM x) TO '__TEST_DIR__/my.parquet' WITH (FIELD_IDS);
COPY (SELECT x AS x FROM x) TO '__TEST_DIR__/my.parquet' WITH (FIELD_IDS);
COPY (SELECT x AS x FROM x) TO '__TEST_DIR__/my.parquet' WITH (FIELD_IDS);
COPY (SELECT x AS x FROM x) TO '__TEST_DIR__/my.parquet' WITH (FIELD_IDS);
SELECT x FROM x WHERE x = 'i';
SELECT x FROM x WHERE x = 'i';
SELECT x FROM x WHERE x = 'i';
SELECT x FROM x WHERE x = 'i';
SELECT x FROM x WHERE x = 'i';
SELECT x FROM x WHERE x = 'i';
SELECT x FROM x WHERE x = 'i';
SELECT x FROM x WHERE x = 'i';
SELECT x FROM x WHERE x = 'i';
COPY (SELECT x AS x FROM x) TO '__TEST_DIR__/my.parquet' WITH (FIELD_IDS 'oops');
COPY (SELECT x AS x FROM x) TO '__TEST_DIR__/my.parquet' WITH (FIELD_IDS 'oops');
COPY (SELECT x AS x FROM x) TO '__TEST_DIR__/my.parquet' WITH (FIELD_IDS 'oops');
COPY (SELECT x AS x FROM x) TO '__TEST_DIR__/my.parquet' WITH (FIELD_IDS 'oops');
SELECT x FROM x WHERE x = 'i';
SELECT x FROM x WHERE x = 'j';
SELECT x FROM x WHERE x = 'j';
SELECT x FROM x WHERE x = 'i';
SELECT x FROM x WHERE x = 'j';
SELECT x FROM x WHERE x = 'j';
SELECT x FROM x WHERE x = 'i';
SELECT x FROM x WHERE x = 'j';
SELECT x FROM x WHERE x = 'j';
SELECT x FROM x WHERE x = 'j';
SELECT x FROM x WHERE x = 'i';
SELECT x FROM x WHERE x = 'element';
SELECT x FROM x WHERE x = 'element';
SELECT x FROM x WHERE x = 'i';
SELECT x FROM x WHERE x = 'element';
SELECT x FROM x WHERE x = 'element';
SELECT x FROM x WHERE x = 'element';
SELECT x FROM x WHERE x = 'i' AND x > 0;
SELECT x FROM x WHERE x = 'f';
SELECT x FROM x WHERE x = 'f';
SELECT x FROM x WHERE x = 'f';
SELECT x FROM x WHERE x = 'i' AND x > 0;
SELECT x FROM x WHERE x = 'key';
SELECT x FROM x WHERE x = 'value';
SELECT x FROM x WHERE x = 'value';
COPY (SELECT x AS x, x AS x FROM x) TO '__TEST_DIR__/my.parquet' WITH (FIELD_IDS 'auto');
SELECT x FROM x WHERE x = 'i';
SELECT x FROM x WHERE x = 'j';
SELECT x FROM x WHERE x = 'j';
SELECT x, x FROM x WHERE x IN ('i', 'key', 'value', 'element', 'j') ORDER BY x;
SELECT x, x FROM x WHERE x IN ('i', 'key', 'value', 'element', 'j') ORDER BY x;
SELECT x, x FROM x WHERE x IN ('i', 'key', 'value', 'element', 'j') ORDER BY x;
COPY (SELECT RANGE(x, x + 3) AS x FROM x) TO '__TEST_DIR__/my.parquet' WITH (FIELD_IDS 'auto');
SELECT x FROM x WHERE x = 'i';
SELECT x FROM x WHERE x = 'element';
COPY (SELECT {'x': x} AS x FROM x) TO '__TEST_DIR__/my.parquet' WITH (FIELD_IDS 'auto');
SELECT x FROM x WHERE x = 'i' AND x > 0;
SELECT x FROM x WHERE x = 'f';
COPY (SELECT MAP {'x': 10 - x} AS x FROM x) TO '__TEST_DIR__/my.parquet' WITH (FIELD_IDS 'auto');
SELECT x FROM x WHERE x = 'i' AND x > 0;
SELECT x FROM x WHERE x = 'key';
SELECT x FROM x WHERE x = 'value';
COPY (SELECT MAP {'x': [{'x': 42}]} AS x) TO '__TEST_DIR__/my.parquet' WITH (FIELD_IDS 'auto');
SELECT x, x FROM x WHERE x IN ('i', 'key', 'value', 'element', 'j') ORDER BY x;
SELECT x, x FROM x WHERE x IN ('i', 'key', 'value', 'element', 'j') ORDER BY x;
SELECT x, x FROM x WHERE x IN ('i', 'key', 'value', 'element', 'j') ORDER BY x;
SELECT x, x FROM x WHERE x IN ('i', 'key', 'value', 'element', 'j') ORDER BY x;
SELECT x FROM x WHERE x = 'i';
SELECT x FROM x WHERE x = 'i';
SELECT x FROM x WHERE x = 'I';
SELECT x FROM x WHERE x = 'I';
SELECT x FROM x WHERE x = 'i' AND x > 0;
SELECT x FROM x WHERE x = 'f';
SELECT x FROM x WHERE x = 'f';
SELECT x FROM x WHERE x = 'I' AND x > 0;
SELECT x FROM x WHERE x = 'F';
PRAGMA x;
SET x = '__TEST_DIR__';
CREATE TABLE x AS SELECT * FROM x;
COPY x TO '__TEST_DIR__/integers.parquet' WITH (FORMAT PARQUET);
SELECT * FROM x;
CREATE TABLE x (x INT);
COPY x FROM '~/integers.parquet';
SELECT * FROM x;
COPY x TO '__TEST_DIR__/homedir_integers1.parquet';
COPY x TO '__TEST_DIR__/homedir_integers2.parquet';
SELECT COUNT(*) FROM x;
PRAGMA x;
CREATE TABLE x (x INT128);
INSERT INTO x VALUES (-1180591620717411303424), (0), (NULL), (1180591620717411303424);
COPY x TO '__TEST_DIR__/hugeints.parquet' WITH (FORMAT 'parquet');
SELECT * FROM x;
SELECT TYPEOF(x) FROM x LIMIT 1;
SET x = 'nulls_first';
PRAGMA x;
CREATE TABLE IF NOT EXISTS x (x INTERVAL);
INSERT INTO x VALUES (INTERVAL '1' DAY), (INTERVAL '00:00:01'), (NULL), (INTERVAL '0' MONTH), (INTERVAL '1' MONTH);
COPY x TO '__TEST_DIR__/intervals.parquet';
SELECT * FROM x ORDER BY 1;
COPY (SELECT -INTERVAL '1' DAY) TO '__TEST_DIR__/intervals.parquet';
CREATE TABLE x (x INT[]);
INSERT INTO x SELECT [] FROM x UNION ALL SELECT [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
COPY (SELECT * FROM x LIMIT 10) TO '__TEST_DIR__/emptylist_int.parquet';
SELECT * FROM x;
CREATE TABLE x (x TEXT[]);
INSERT INTO x SELECT [] FROM x UNION ALL SELECT ['hello', 'world', 'this', 'is', 'a', 'varchar', 'list'];
COPY (SELECT * FROM x LIMIT 10) TO '__TEST_DIR__/emptylist_varchar.parquet';
SELECT * FROM x;
CREATE TABLE x (x INT[][]);
INSERT INTO x SELECT [] FROM x UNION ALL SELECT [[1, 2, 3], [4, 5], [6, 7, 8]];
COPY (SELECT * FROM x LIMIT 10) TO '__TEST_DIR__/empty_list_nested.parquet';
SELECT * FROM x;
COPY (SELECT x, x // 5 AS x FROM x AS x) TO '__TEST_DIR__/large_integers.parquet';
SET x = '0.3GB';
SET x = FALSE;
COPY x TO '__TEST_DIR__/large_integers2.parquet';
SET x = '-1';
SELECT * FROM x EXCEPT SELECT * FROM x;
SET x = '${memory_limit}';
SET x = '${memory_limit}';
SET x = '4gb';
SELECT SUM(x) = (COUNT(*) * (COUNT(*) - 1)) // 2 FROM x;
PRAGMA x;
CREATE TABLE x AS SELECT CAST(x AS TINYINT) AS x FROM (VALUES (-128), (42), (NULL), (127)) AS x;
CREATE TABLE x AS SELECT CAST(x AS SMALLINT) AS x FROM (VALUES (-32768), (42), (NULL), (32767)) AS x;
CREATE TABLE x AS SELECT CAST(x AS INT) AS x FROM (VALUES (-2147483648), (42), (NULL), (2147483647)) AS x;
CREATE TABLE x AS SELECT CAST(x AS INT) AS x FROM (VALUES (-2147483648), (42), (NULL), (2147483647)) AS x;
CREATE TABLE x AS SELECT CAST(x AS INT) AS x FROM (VALUES (-2147483648), (42), (NULL), (2147483647)) AS x;
CREATE TABLE x AS SELECT CAST(x AS INT) AS x FROM (VALUES (-2147483648), (42), (NULL), (2147483647)) AS x;
COPY x TO '__TEST_DIR__/signed.parquet' WITH (FORMAT 'parquet');
SELECT * FROM x EXCEPT SELECT * FROM x;
SELECT * FROM x EXCEPT SELECT * FROM x;
SELECT * FROM x WHERE x = 42;
SELECT COUNT(*) FROM x WHERE x > 42;
SELECT COUNT(*) FROM x WHERE x >= 42;
SELECT COUNT(*) FROM x WHERE x < 42;
SELECT COUNT(*) FROM x WHERE x <= 42;
SELECT TYPEOF(x) = '${type}' FROM x LIMIT 1;
PRAGMA x;
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('happy'), ('happy'), ('joy'), ('joy'), ('happy'), ('happy'), ('joy'), ('joy'), ('happy'), ('happy'), ('joy'), ('joy'), ('happy'), ('happy'), ('joy'), ('joy'), ('happy'), ('happy'), ('joy'), ('joy'), ('happy'), ('happy'), ('joy'), ('joy'), ('happy'), ('happy'), ('joy'), ('joy'), ('surprise');
COPY x TO '__TEST_DIR__/strings.parquet' WITH (FORMAT PARQUET);
SELECT x FROM x;
SELECT * FROM x;
SELECT x FROM x;
UPDATE x SET x = NULL WHERE x = 'joy';
COPY x TO '__TEST_DIR__/strings.parquet' WITH (FORMAT PARQUET);
SELECT * FROM x;
UPDATE x SET x = NULL;
COPY x TO '__TEST_DIR__/strings.parquet' WITH (FORMAT PARQUET);
SELECT * FROM x;
DELETE FROM x;
COPY x TO '__TEST_DIR__/strings.parquet' WITH (FORMAT PARQUET);
SELECT * FROM x;
DELETE FROM x;
INSERT INTO x VALUES ('0'), ('1'), ('2'), ('3'), ('4'), ('5'), ('6'), ('7'), ('8'), ('9'), ('10'), ('11'), ('12'), ('13'), ('14'), ('15'), ('16'), ('17'), ('18'), ('19'), ('20'), ('21'), ('22'), ('23'), ('24'), ('25'), ('26'), ('27'), ('28'), ('29');
COPY x TO '__TEST_DIR__/strings.parquet' WITH (FORMAT PARQUET);
SELECT x FROM x;
SELECT * FROM x;
SELECT x FROM x;
DELETE FROM x;
INSERT INTO x VALUES ('0'), ('1'), ('2'), (NULL), ('4'), ('5'), ('6'), (NULL), ('8'), ('9'), ('10'), ('11'), ('12'), ('13'), ('14'), ('15'), ('16'), ('17'), ('18'), ('19'), ('20'), (NULL), ('22'), ('23'), ('24'), ('25'), (NULL), ('27'), ('28'), ('29');
COPY x TO '__TEST_DIR__/strings.parquet' WITH (FORMAT PARQUET);
SELECT * FROM x;
PRAGMA x;
COPY (SELECT 'hello' FROM x) TO '__TEST_DIR__/string_dict.parquet';
SELECT x FROM x;
PRAGMA x = 'NULLS LAST';
CREATE SCHEMA x.x;
CREATE SCHEMA x.x;
CREATE SCHEMA x.x;
CREATE SCHEMA x.x;
CREATE SCHEMA x.x;
CREATE SCHEMA x.x;
CREATE SCHEMA x.x;
CREATE SCHEMA x.x;
CREATE SCHEMA x.x;
CREATE SCHEMA x.x;
CREATE SCHEMA x.x;
CREATE SCHEMA x.x;
CREATE SCHEMA x.x;
CREATE SCHEMA x.x;
CREATE SCHEMA x.x;
CREATE VIEW x AS SELECT LIST({'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x}) AS x FROM x.x;
COPY x TO '__TEST_DIR__/lineitem.parquet' WITH (FORMAT 'PARQUET', COMPRESSION 'ZSTD');
COPY x TO '__TEST_DIR__/lineitem.parquet' WITH (FORMAT 'PARQUET', COMPRESSION 'ZSTD');
COPY x TO '__TEST_DIR__/lineitem.parquet' WITH (FORMAT 'PARQUET', COMPRESSION 'ZSTD');
COPY x TO '__TEST_DIR__/lineitem.parquet' WITH (FORMAT 'PARQUET', COMPRESSION 'ZSTD');
COPY x TO '__TEST_DIR__/lineitem.parquet' WITH (FORMAT 'PARQUET', COMPRESSION 'ZSTD');
COPY x TO '__TEST_DIR__/lineitem.parquet' WITH (FORMAT 'PARQUET', COMPRESSION 'ZSTD');
PRAGMA x;
CREATE TABLE x (x UINT128);
INSERT INTO x VALUES (0), (1), (NULL), (1180591620717411303424);
COPY x TO '__TEST_DIR__/hugeints.parquet' WITH (FORMAT 'parquet');
SELECT * FROM x;
SELECT TYPEOF(x) FROM x LIMIT 1;
PRAGMA x;
CREATE TABLE x AS SELECT CAST(x AS UTINYINT) AS x FROM (VALUES (0), (42), (NULL), (255)) AS x;
CREATE TABLE x AS SELECT CAST(x AS USMALLINT) AS x FROM (VALUES (0), (42), (NULL), (65535)) AS x;
CREATE TABLE x AS SELECT CAST(x AS UINTEGER) AS x FROM (VALUES (0), (42), (NULL), (4294967295)) AS x;
CREATE TABLE x AS SELECT CAST(x AS UINTEGER) AS x FROM (VALUES (0), (42), (NULL), (4294967295)) AS x;
CREATE TABLE x AS SELECT CAST(x AS UINTEGER) AS x FROM (VALUES (0), (42), (NULL), (4294967295)) AS x;
CREATE TABLE x AS SELECT CAST(x AS UINTEGER) AS x FROM (VALUES (0), (42), (NULL), (4294967295)) AS x;
COPY x TO '__TEST_DIR__/unsigned.parquet' WITH (FORMAT 'parquet');
SELECT * FROM x EXCEPT SELECT * FROM x;
SELECT * FROM x EXCEPT SELECT * FROM x;
SELECT * FROM x WHERE x = 42;
SELECT COUNT(*) FROM x WHERE x > 42;
SELECT COUNT(*) FROM x WHERE x >= 42;
SELECT COUNT(*) FROM x WHERE x < 42;
SELECT COUNT(*) FROM x WHERE x <= 42;
SELECT TYPEOF(x) = '${type}' FROM x LIMIT 1;
SET x = 'nulls_first';
PRAGMA x;
CREATE TABLE IF NOT EXISTS x (x UUID);
INSERT INTO x VALUES ('A0EEBC99-9C0B-4EF8-BB6D-6BB9BD380A11'), (NULL), ('47183823-2574-4bfd-b411-99ed177d3e43'), ('{10203040506070800102030405060708}'), ('A0EEBC99-9C0B-4EF8-BB6D-6BB9BD380A11'), (NULL), ('00112233-4455-6677-8899-aabbccddeeff'), ('47183823-2574-4bfd-b411-99ed177d3e43'), ('{10203040506070800102030405060708}'), ('00000000-0000-0000-0000-000000000000'), ('00000000-0000-0000-0000-000000000001'), ('00000000-0000-0000-8000-000000000001'), ('80000000-0000-0000-0000-000000000000'), ('80000000-0000-0000-8000-000000000000'), ('80000000-0000-0000-8fff-ffffffffffff'), ('80000000-0000-0000-ffff-ffffffffffff'), ('8fffffff-ffff-ffff-0000-000000000000'), ('8fffffff-ffff-ffff-8000-000000000000'), ('8fffffff-ffff-ffff-8fff-ffffffffffff'), ('8fffffff-ffff-ffff-ffff-ffffffffffff'), ('ffffffff-ffff-ffff-ffff-ffffffffffff');
COPY x TO '__TEST_DIR__/uuid.parquet';
SELECT * FROM x ORDER BY 1;
SELECT x, x, x, x FROM x;
CREATE TABLE x AS SELECT CAST('47183823-2574-4bfd-b411-99ed177d3e43' AS UUID) AS x UNION ALL SELECT CAST('00112233-4455-6677-8899-aabbccddeeff' AS UUID);
COPY x TO '__TEST_DIR__/uuid2.parquet';
SELECT x, x, x, x FROM x;
COPY (SELECT * FROM x LIMIT 25000) TO '__TEST_DIR__/duckseq.parquet' WITH (FORMAT 'PARQUET', CODEC 'ZSTD', ROW_GROUP_SIZE 25000);
SELECT COUNT(*), MIN(x), MAX(x), MIN(STRLEN(x)), MAX(STRLEN(x)), AVG(STRLEN(x)) FROM x;
COPY (SELECT CAST(x AS TEXT[]) AS x, CAST(x AS TEXT[]) AS x FROM (VALUES ([], []), (NULL, NULL), ([], [])) AS x UNION ALL SELECT * FROM (SELECT LIST(x) AS x, LIST(x) AS x FROM x LIMIT 10000) UNION ALL SELECT * FROM (VALUES ([], []), (NULL, NULL), ([], []))) TO '__TEST_DIR__/duckseq2.parquet' WITH (FORMAT 'PARQUET', CODEC 'ZSTD');
SELECT COUNT(*) FROM x;
SELECT COUNT(*), MIN(x), MAX(x), MIN(STRLEN(x)), MAX(STRLEN(x)), AVG(STRLEN(x)) FROM (SELECT UNNEST(x) AS x, UNNEST(x) AS x FROM x);
SET x = FALSE;
COPY (SELECT 42) TO '__TEST_DIR__/tbl.parquet' WITH (ROW_GROUP_SIZE_BYTES);
COPY (SELECT x AS x, x AS x, x AS x, x AS x, x AS x, x AS x, x AS x, x AS x FROM x) TO '__TEST_DIR__/tbl.parquet' WITH (ROW_GROUP_SIZE_BYTES '1mb');
SELECT MAX(x) FROM x;
SELECT MIN(x) <> 0 FROM x;
COPY (SELECT x AS x, x AS x, x AS x, x AS x, x AS x, x AS x, x AS x, x AS x FROM x) TO '__TEST_DIR__/tbl.parquet' WITH (ROW_GROUP_SIZE_BYTES 500000);
SELECT MAX(x) FROM x;
COPY (SELECT x AS x, x AS x, x AS x, x AS x, x AS x, x AS x, x AS x, x AS x FROM x) TO '__TEST_DIR__/tbl.parquet' WITH (ROW_GROUP_SIZE 10000, ROW_GROUP_SIZE_BYTES '1GB');
SELECT MAX(x) FROM x;
COPY (SELECT x || REPEAT('0', 50) AS x FROM x) TO '__TEST_DIR__/tbl.parquet' WITH (ROW_GROUP_SIZE_BYTES 200000);
SELECT MAX(x) FROM x;
COPY (SELECT x || REPEAT('0', 50) AS x FROM x) TO '__TEST_DIR__/tbl.parquet' WITH (ROW_GROUP_SIZE_BYTES 650000);
SELECT MAX(x) FROM x;
PRAGMA x;
CREATE TABLE x (x INT, x TEXT);
CREATE TABLE x AS SELECT * FROM x AS x UNION ALL SELECT 100000;
COPY (SELECT 42 WHERE 42 = 84) TO '__TEST_DIR__/empty.parquet' WITH (WRITE_EMPTY_FILE FALSE);
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
COPY (SELECT 42 WHERE 42 = 84) TO '__TEST_DIR__/empty.parquet' WITH (WRITE_EMPTY_FILE FALSE, RETURN_STATS);
COPY x TO '__TEST_DIR__/empty.parquet' WITH (WRITE_EMPTY_FILE FALSE, RETURN_STATS);
COPY x TO '__TEST_DIR__/empty.parquet' WITH (WRITE_EMPTY_FILE FALSE, RETURN_FILES);
COPY x TO '__TEST_DIR__/empty.parquet' WITH (WRITE_EMPTY_FILE FALSE, RETURN_FILES);
COPY x TO '__TEST_DIR__/empty.parquet' WITH (WRITE_EMPTY_FILE FALSE, ROW_GROUPS_PER_FILE 1);
COPY x TO '__TEST_DIR__/empty.parquet' WITH (WRITE_EMPTY_FILE FALSE, PARTITION_BY (x));
COPY x TO '__TEST_DIR__/empty.parquet' WITH (WRITE_EMPTY_FILE FALSE, PER_THREAD_OUTPUT);
CREATE TABLE x (x INT, x TEXT);
INSERT INTO x VALUES (1, 'hello'), (2, 'world '), (3, ' xx');
SELECT * FROM x ORDER BY 1;
COPY x TO '__TEST_DIR__/overwrite.parquet' WITH (FORMAT PARQUET);
COPY (SELECT * FROM x LIMIT 2) TO '__TEST_DIR__/overwrite.parquet' WITH (FORMAT PARQUET);
DELETE FROM x;
COPY x FROM '__TEST_DIR__/overwrite.parquet' WITH (FORMAT PARQUET);
SELECT * FROM x ORDER BY 1;
COPY (SELECT x FROM x AS x UNION ALL SELECT CAST(CONCAT('hello', x) AS INT) AS x FROM x AS x) TO '__TEST_DIR__/overwrite.parquet' WITH (FORMAT PARQUET);
DELETE FROM x;
COPY x FROM '__TEST_DIR__/overwrite.parquet' WITH (FORMAT PARQUET);
SELECT * FROM x ORDER BY 1;
COPY (SELECT x FROM x AS x UNION ALL SELECT CAST(CONCAT('hello', x) AS INT) AS x FROM x AS x) TO '__TEST_DIR__/overwrite.parquet' WITH (FORMAT PARQUET, USE_TMP_FILE FALSE);
SELECT * FROM x;
COPY (SELECT 42) TO '__TEST_DIR__/scalar.parquet' WITH (FORMAT 'parquet');
SELECT * FROM x;
CREATE TABLE x (x INT);
COPY (SELECT * FROM x) TO '__TEST_DIR__/empty.parquet' WITH (FORMAT 'parquet');
SELECT COUNT(*) FROM x;
SET x = 4;
COPY (SELECT * FROM x) TO '__TEST_DIR__/empty_multithread' WITH (FORMAT 'parquet', PER_THREAD_OUTPUT TRUE);
SELECT COUNT(*) FROM x;
SELECT * FROM x;
COPY (SELECT * FROM x) TO '__TEST_DIR__/alltypes_dictionary.parquet' WITH (FORMAT 'PARQUET');
SELECT * FROM x;
SELECT * FROM x LIMIT 10;
COPY (SELECT * FROM x) TO '__TEST_DIR__/bug687_nulls.parquet' WITH (FORMAT 'PARQUET');
SELECT * FROM x LIMIT 10;
COPY (SELECT TRUE AS x UNION ALL SELECT TRUE) TO '__TEST_DIR__/bug1637_booleans.parquet' WITH (FORMAT 'PARQUET');
SELECT COUNT(*) FROM x WHERE x;
SELECT * FROM x ORDER BY 1 LIMIT 10;
COPY (SELECT * FROM x) TO '__TEST_DIR__/userdata1.parquet' WITH (FORMAT 'PARQUET');
SELECT * FROM x ORDER BY 1 LIMIT 10;
COPY (SELECT * FROM x) TO '__TEST_DIR__/userdata1-gzip.parquet' WITH (FORMAT 'PARQUET', CODEC 'GZIP');
SELECT * FROM x ORDER BY 1 LIMIT 10;
COPY (SELECT * FROM x) TO '__TEST_DIR__/userdata1-uncompressed.parquet' WITH (FORMAT 'PARQUET', CODEC 'UNCOMPRESSED');
SELECT * FROM x ORDER BY 1 LIMIT 10;
COPY (SELECT * FROM x) TO '__TEST_DIR__/userdata1-zstd.parquet' WITH (FORMAT 'PARQUET', CODEC 'ZSTD');
SELECT * FROM x ORDER BY 1 LIMIT 10;
CREATE TABLE x AS SELECT * FROM x;
COPY x TO '__TEST_DIR__/test_round_trip.parquet';
CREATE TABLE x AS SELECT * FROM x;
SELECT COUNT(*) FROM x EXCEPT SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM (SELECT * FROM x EXCEPT SELECT * FROM x);
DROP TABLE x;
CREATE TABLE x AS SELECT LIST(CASE WHEN x % 2 = 0 THEN NULL ELSE x END) AS x FROM x AS x;
SELECT SUM(x) FROM (SELECT UNNEST(x) FROM x) AS x;
COPY x TO '__TEST_DIR__/big_list.parquet' WITH (FORMAT 'parquet');
SELECT SUM(x) FROM (SELECT UNNEST(x) FROM x) AS x;
CREATE TABLE x AS SELECT * FROM (VALUES ({'x': [1, 2, 3], 'x': ['hello', 'world']}), ({'x': [4, NULL, 5], 'x': ['duckduck', 'goose']}), ({'x': NULL, 'x': ['longlonglonglonglonglong', NULL, NULL]}), (NULL), ({'x': [], 'x': []}), ({'x': [1, 2, 3], 'x': NULL})) AS x;
COPY x TO '__TEST_DIR__/complex_list.parquet' WITH (FORMAT 'parquet');
SELECT x FROM x;
CREATE TABLE x AS SELECT * FROM (VALUES ([{'x': 1, 'x': 100}, NULL, {'x': 2, 'x': 101}]), (NULL), ([]), ([{'x': NULL, 'x': 102}, {'x': 3, 'x': NULL}, NULL])) AS x;
COPY x TO '__TEST_DIR__/complex_list.parquet' WITH (FORMAT 'parquet');
SELECT x FROM x;
CREATE TABLE x AS SELECT * FROM (VALUES ([{'x': {'x': 33}, 'x': {'x': 42, 'x': 99}}, NULL, {'x': {'x': NULL}, 'x': {'x': 43, 'x': 100}}]), (NULL), ([]), ([{'x': NULL, 'x': {'x': NULL, 'x': 101}}, {'x': {'x': 34}, 'x': {'x': 43, 'x': NULL}}]), ([{'x': NULL, 'x': NULL}])) AS x;
COPY x TO '__TEST_DIR__/complex_list.parquet' WITH (FORMAT 'parquet');
SELECT x FROM x;
CREATE TABLE x AS SELECT * FROM (VALUES ([[1, 2, 3], [4, 5]]), ([[6, 7]]), ([[8, 9, 10], [11, 12]])) AS x;
COPY x TO '__TEST_DIR__/complex_list.parquet' WITH (FORMAT 'parquet');
SELECT x FROM x;
CREATE TABLE x AS SELECT * FROM (VALUES ([[1, 2, 3], [4, 5], [], [6, 7]]), ([[8, NULL, 10], NULL, []]), ([]), (NULL), ([[11, 12, 13, 14], [], NULL, [], [], [15], [NULL, NULL, NULL]])) AS x;
COPY x TO '__TEST_DIR__/complex_list.parquet' WITH (FORMAT 'parquet');
SELECT x FROM x;
CREATE TABLE x AS SELECT [LIST(x)] AS x FROM x UNION ALL SELECT NULL UNION ALL SELECT [NULL] UNION ALL SELECT [[], NULL, [], []] UNION ALL SELECT [[[NULL, NULL, [NULL]], NULL, [[], [7, 8, 9], [NULL], NULL, []]], [], [NULL]];
COPY x TO '__TEST_DIR__/complex_list.parquet' WITH (FORMAT 'parquet');
SELECT x FROM x;
CREATE TABLE x AS SELECT * FROM (VALUES ([1, 2, 3]), ([4, 5]), ([6, 7]), ([8, 9, 10, 11])) AS x;
COPY x TO '__TEST_DIR__/test_list.parquet' WITH (FORMAT 'parquet');
SELECT x FROM x;
CREATE TABLE x AS SELECT * FROM (VALUES ([1, 2, 3]), ([4, 5]), ([6, 7]), ([NULL]), ([]), ([]), ([]), ([]), ([8, NULL, 10, 11]), (NULL)) AS x;
COPY x TO '__TEST_DIR__/test_list.parquet' WITH (FORMAT 'parquet');
SELECT * FROM x;
COPY (SELECT CAST([] AS INT[])) TO '__TEST_DIR__/test_empty_list.parquet' WITH (FORMAT 'parquet');
SELECT * FROM x;
COPY (SELECT CAST(NULL AS INT[])) TO '__TEST_DIR__/test_null_list.parquet' WITH (FORMAT 'parquet');
SELECT * FROM x;
CREATE TABLE x (x MAP(INT, INT));
INSERT INTO x VALUES (MAP([42, 84], [1, 2])), (MAP([101, 201, 301], [3, NULL, 5])), (MAP([55, 66, 77], [6, 7, NULL]));
COPY x TO '__TEST_DIR__/int_map.parquet' WITH (FORMAT PARQUET);
SELECT * FROM x;
INSERT INTO x VALUES (MAP([NULL], [NULL]));
COPY x TO '__TEST_DIR__/int_maps.parquet' WITH (FORMAT PARQUET);
CREATE TABLE x (x MAP(TEXT, TEXT));
INSERT INTO x VALUES (MAP(['key1', 'key2'], ['value1', 'value2'])), (MAP(['best band', 'best boyband', 'richest person'], ['Tenacious D', 'Backstreet Boys', 'Jon Lajoie'])), (MAP([], [])), (NULL), (MAP(['option'], [NULL]));
COPY x TO '__TEST_DIR__/string_map.parquet' WITH (FORMAT PARQUET);
SELECT * FROM x;
INSERT INTO x VALUES (MAP([NULL], [NULL]));
CREATE TABLE x (x MAP(INT[], INT[]));
INSERT INTO x VALUES (MAP([[1, 2, 3], [], [4, 5]], [[6, 7, 8], NULL, [NULL]])), (MAP([], [])), (MAP([[1]], [NULL])), (MAP([[10, 12, 14, 16, 18, 20], []], [[1], [2]]));
COPY x TO '__TEST_DIR__/list_map.parquet' WITH (FORMAT PARQUET);
SELECT * FROM x;
INSERT INTO x VALUES (MAP([NULL], [NULL]));
PRAGMA x;
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES (NULL), ('hello'), (NULL), ('world'), (NULL);
COPY x TO '__TEST_DIR__/bigvarchar.parquet';
SELECT x, x, x, x, x, x FROM x;
INSERT INTO x SELECT REPEAT('A', 100000) AS x;
COPY x TO '__TEST_DIR__/bigvarchar.parquet';
SELECT x, x, x, x, x, x FROM x;
PRAGMA x;
PRAGMA x = x;
CREATE TABLE x AS SELECT CAST((FALSE) AS BOOLEAN) AS x, CAST(TRUE AS BOOLEAN) AS x;
CREATE TABLE x AS SELECT CAST((-128) AS TINYINT) AS x, CAST(127 AS TINYINT) AS x;
CREATE TABLE x AS SELECT CAST((-32768) AS SMALLINT) AS x, CAST(32767 AS SMALLINT) AS x;
CREATE TABLE x AS SELECT CAST((-2147483648) AS INT) AS x, CAST(2147483647 AS INT) AS x;
CREATE TABLE x AS SELECT CAST((-9223372036854775808) AS BIGINT) AS x, CAST(9223372036854775807 AS BIGINT) AS x;
CREATE TABLE x AS SELECT CAST((-0.5) AS REAL) AS x, CAST(0.5 AS REAL) AS x;
CREATE TABLE x AS SELECT CAST((-0.5) AS DOUBLE) AS x, CAST(0.5 AS DOUBLE) AS x;
CREATE TABLE x AS SELECT 'hello world 👤🏠📕' AS x, 'look at my ducks 🦆🦆🦆' AS x;
CREATE TABLE x AS SELECT CAST('\x00hello\x00world\x00' AS BLOB) AS x, CAST('\x00look\x00at\x00my\x00nullbytes\x00' AS BLOB) AS x;
CREATE TABLE x AS SELECT CAST('1900-01-01' AS DATE) AS x, CAST('2030-12-31' AS DATE) AS x;
CREATE TABLE x AS SELECT CAST('00:00:00' AS TIME) AS x, CAST('23:59:59' AS TIME) AS x;
CREATE TABLE x AS SELECT CAST('1900-01-01 00:00:00' AS TIMESTAMP) AS x, CAST('2030-12-31 23:59:59' AS TIMESTAMP) AS x;
CREATE TABLE x AS SELECT CAST('1900-01-01 00:00:00' AS TIMESTAMP_S) AS x, CAST('2030-12-31 23:59:59' AS TIMESTAMP_S) AS x;
CREATE TABLE x AS SELECT CAST('1900-01-01 00:00:00' AS TIMESTAMP_MS) AS x, CAST('2030-12-31 23:59:59' AS TIMESTAMP_MS) AS x;
CREATE TABLE x AS SELECT CAST('1900-01-01 00:00:00' AS TIMESTAMP_MS) AS x, CAST('2030-12-31 23:59:59' AS TIMESTAMP_MS) AS x;
CREATE TABLE x AS SELECT CAST('1900-01-01 00:00:00' AS TIMESTAMP_MS) AS x, CAST('2030-12-31 23:59:59' AS TIMESTAMP_MS) AS x;
INSERT INTO x SELECT NULL;
COPY x TO '__TEST_DIR__/${type}_stats.parquet' WITH (FORMAT PARQUET);
COPY x TO '__TEST_DIR__/${type}_stats.parquet' WITH (FORMAT PARQUET);
COPY x TO '__TEST_DIR__/${type}_stats.parquet' WITH (FORMAT PARQUET);
COPY x TO '__TEST_DIR__/${type}_stats.parquet' WITH (FORMAT PARQUET);
COPY x TO '__TEST_DIR__/${type}_stats.parquet' WITH (FORMAT PARQUET);
COPY x TO '__TEST_DIR__/${type}_stats.parquet' WITH (FORMAT PARQUET);
COPY x TO '__TEST_DIR__/${type}_stats.parquet' WITH (FORMAT PARQUET);
COPY x TO '__TEST_DIR__/${type}_stats.parquet' WITH (FORMAT PARQUET);
COPY x TO '__TEST_DIR__/${type}_stats.parquet' WITH (FORMAT PARQUET);
COPY x TO '__TEST_DIR__/${type}_stats.parquet' WITH (FORMAT PARQUET);
CREATE TABLE x AS SELECT CAST((0) AS UTINYINT) AS x, CAST(255 AS UTINYINT) AS x;
CREATE TABLE x AS SELECT CAST((0) AS USMALLINT) AS x, CAST(65535 AS USMALLINT) AS x;
CREATE TABLE x AS SELECT CAST(0 AS UINTEGER) AS x, CAST(4294967295 AS UINTEGER) AS x;
INSERT INTO x SELECT NULL;
COPY x TO '__TEST_DIR__/${type}_stats.parquet' WITH (FORMAT PARQUET);
COPY x TO '__TEST_DIR__/${type}_stats.parquet' WITH (FORMAT PARQUET);
COPY x TO '__TEST_DIR__/${type}_stats.parquet' WITH (FORMAT PARQUET);
COPY x TO '__TEST_DIR__/${type}_stats.parquet' WITH (FORMAT PARQUET);
COPY x TO '__TEST_DIR__/${type}_stats.parquet' WITH (FORMAT PARQUET);
COPY x TO '__TEST_DIR__/${type}_stats.parquet' WITH (FORMAT PARQUET);
COPY x TO '__TEST_DIR__/${type}_stats.parquet' WITH (FORMAT PARQUET);
COPY x TO '__TEST_DIR__/${type}_stats.parquet' WITH (FORMAT PARQUET);
COPY x TO '__TEST_DIR__/${type}_stats.parquet' WITH (FORMAT PARQUET);
COPY x TO '__TEST_DIR__/${type}_stats.parquet' WITH (FORMAT PARQUET);
COPY x TO '__TEST_DIR__/${type}_stats.parquet' WITH (FORMAT PARQUET);
COPY x TO '__TEST_DIR__/${type}_stats.parquet' WITH (FORMAT PARQUET);
COPY x TO '__TEST_DIR__/${type}_stats.parquet' WITH (FORMAT PARQUET);
COPY x TO '__TEST_DIR__/${type}_stats.parquet' WITH (FORMAT PARQUET);
COPY x TO '__TEST_DIR__/${type}_stats.parquet' WITH (FORMAT PARQUET);
COPY x TO '__TEST_DIR__/${type}_stats.parquet' WITH (FORMAT PARQUET);
COPY x TO '__TEST_DIR__/${type}_stats.parquet' WITH (FORMAT PARQUET);
COPY x TO '__TEST_DIR__/${type}_stats.parquet' WITH (FORMAT PARQUET);
PRAGMA x;
PRAGMA x = x;
COPY (SELECT 42 AS x) TO '__TEST_DIR__/stats.parquet' WITH (FORMAT PARQUET);
SELECT x FROM x;
SELECT COUNT(*) FROM x WHERE x IS NULL;
COPY (SELECT NULL AS x) TO '__TEST_DIR__/stats.parquet' WITH (FORMAT PARQUET);
SELECT x FROM x;
SELECT COUNT(*) FROM x WHERE x IS NULL;
COPY (SELECT [42, NULL, 43] AS x) TO '__TEST_DIR__/stats.parquet' WITH (FORMAT PARQUET);
SELECT x FROM x;
COPY (SELECT {'x': NULL, 'x': 42} AS x) TO '__TEST_DIR__/stats.parquet' WITH (FORMAT PARQUET);
SELECT x FROM x;
CREATE TABLE x AS SELECT {'x': NULL, 'x': 'hello'} AS x UNION ALL SELECT NULL UNION ALL SELECT {'x': 84, 'x': 'world'};
COPY x TO '__TEST_DIR__/stats.parquet' WITH (FORMAT PARQUET);
SELECT x FROM x;
CREATE TABLE x AS SELECT * FROM (VALUES ({'x': 42, 'x': 84}), ({'x': 33, 'x': 32}), ({'x': 42, 'x': 27})) AS x;
COPY x TO '__TEST_DIR__/test_struct.parquet' WITH (FORMAT 'parquet');
SELECT * FROM x;
CREATE TABLE x AS SELECT * FROM (VALUES ({'x': 42, 'x': 84}), ({'x': NULL, 'x': 32}), (NULL), ({'x': 42, 'x': NULL})) AS x;
COPY x TO '__TEST_DIR__/test_struct_nulls.parquet' WITH (FORMAT 'parquet');
SELECT * FROM x;
CREATE TABLE x AS SELECT * FROM (VALUES ({'x': {'x': 3, 'x': 22}, 'x': {'x': 27, 'x': 44}}), ({'x': {'x': 9, 'x': 26}, 'x': {'x': 1, 'x': 999}}), ({'x': {'x': 17, 'x': 23}, 'x': {'x': 3, 'x': 9999}})) AS x;
COPY x TO '__TEST_DIR__/struct_nested.parquet' WITH (FORMAT 'parquet');
SELECT * FROM x;
CREATE TABLE x AS SELECT * FROM (VALUES ({'x': {'x': 3, 'x': 22}, 'x': {'x': NULL, 'x': 44}}), ({'x': {'x': NULL, 'x': 26}, 'x': {'x': 1, 'x': NULL}}), ({'x': {'x': 17, 'x': NULL}, 'x': {'x': 3, 'x': 9999}}), (NULL), ({'x': NULL, 'x': NULL})) AS x;
COPY x TO '__TEST_DIR__/struct_nested_null.parquet' WITH (FORMAT 'parquet');
SELECT * FROM x;
CREATE TABLE x AS SELECT * FROM (VALUES ({'x': 42}), ({'x': 33}), ({'x': 42})) AS x;
COPY x TO '__TEST_DIR__/single_struct.parquet' WITH (FORMAT 'parquet');
SELECT * FROM x;
CREATE TABLE x AS SELECT * FROM (VALUES ({'x': 42}), ({'x': NULL}), (NULL)) AS x;
COPY x TO '__TEST_DIR__/single_struct_null.parquet' WITH (FORMAT 'parquet');
SELECT * FROM x;
CREATE TABLE x AS SELECT * FROM (VALUES ({'x': {'x': 42}}), ({'x': {'x': NULL}}), ({'x': NULL}), (NULL)) AS x;
COPY x TO '__TEST_DIR__/nested_single_struct.parquet' WITH (FORMAT 'parquet');
SELECT * FROM x;
COPY (SELECT CAST(x AS TEXT) AS x, CAST((x * 10) AS TEXT) AS x, CAST((x * 100) AS TEXT) AS x FROM x AS x) TO '__TEST_DIR__/hive_pushdown_bug' WITH (FORMAT PARQUET, PARTITION_BY c);
COPY (SELECT CAST(x AS TEXT) AS x, CAST((x * 10) AS TEXT) AS x, CAST((x * 100) AS TEXT) AS x FROM x AS x) TO '__TEST_DIR__/hive_pushdown_bug_csv' WITH (FORMAT CSV, PARTITION_BY c);
PRAGMA x;
CREATE TABLE x AS SELECT x % 2 AS x, x % 3 AS x, x % 4 AS x, x % 5 AS x FROM x AS x;
COPY x TO '__TEST_DIR__/csv_partition_1' WITH (partition_by (x));
SELECT COUNT(*) FROM x;
SELECT ALIAS(COLUMNS(*)) FROM x LIMIT 1;
SELECT ALIAS(COLUMNS(*)) FROM x LIMIT 1;
SELECT ALIAS(COLUMNS(*)) FROM x LIMIT 1;
COPY x TO '__TEST_DIR__/csv_partition_2' WITH (partition_by (x, x));
SELECT COUNT(*) FROM x;
SELECT ALIAS(COLUMNS(*)) FROM x LIMIT 1;
SELECT ALIAS(COLUMNS(*)) FROM x LIMIT 1;
SELECT ALIAS(COLUMNS(*)) FROM x LIMIT 1;
SELECT COUNT(*) FROM x;
COPY x TO '__TEST_DIR__/bad_file.csv';
SELECT COUNT(*) FROM x;
SELECT ALIAS(COLUMNS(*)) FROM x LIMIT 1;
SELECT ALIAS(COLUMNS(*)) FROM x LIMIT 1;
SELECT ALIAS(COLUMNS(*)) FROM x LIMIT 1;
SELECT ALIAS(COLUMNS(*)) FROM x LIMIT 1;
SELECT ALIAS(COLUMNS(*)) FROM x LIMIT 1;
SELECT ALIAS(COLUMNS(*)) FROM x LIMIT 1;
COPY x TO '__TEST_DIR__/parquet_partition_1' WITH (format parquet, partition_by (x));
SELECT COUNT(*) FROM x;
SELECT ALIAS(COLUMNS(*)) FROM x LIMIT 1;
SELECT ALIAS(COLUMNS(*)) FROM x LIMIT 1;
SELECT ALIAS(COLUMNS(*)) FROM x LIMIT 1;
COPY x TO '__TEST_DIR__/parquet_partition_2' WITH (format parquet, partition_by (x, x));
SELECT COUNT(*) FROM x;
SELECT ALIAS(COLUMNS(*)) FROM x LIMIT 1;
SELECT ALIAS(COLUMNS(*)) FROM x LIMIT 1;
SELECT ALIAS(COLUMNS(*)) FROM x LIMIT 1;
SELECT COUNT(*) FROM x;
COPY x TO '__TEST_DIR__/t.parquet' WITH (format parquet);
SELECT COUNT(*) FROM x;
SELECT ALIAS(COLUMNS(*)) FROM x LIMIT 1;
SELECT ALIAS(COLUMNS(*)) FROM x LIMIT 1;
SELECT ALIAS(COLUMNS(*)) FROM x LIMIT 1;
SELECT ALIAS(COLUMNS(*)) FROM x LIMIT 1;
SELECT ALIAS(COLUMNS(*)) FROM x LIMIT 1;
SELECT ALIAS(COLUMNS(*)) FROM x LIMIT 1;
COPY x TO '__TEST_DIR__/csv_partition_1' WITH (partition_by (x), overwrite_or_ignore, write_partition_columns);
SELECT COUNT(*) FROM x;
SELECT ALIAS(COLUMNS(*)) FROM x LIMIT 1;
SELECT ALIAS(COLUMNS(*)) FROM x LIMIT 1;
SELECT ALIAS(COLUMNS(*)) FROM x LIMIT 1;
COPY x TO '__TEST_DIR__/csv_partition_2' WITH (partition_by (x, x), overwrite_or_ignore, write_partition_columns);
SELECT COUNT(*) FROM x;
SELECT ALIAS(COLUMNS(*)) FROM x LIMIT 1;
SELECT ALIAS(COLUMNS(*)) FROM x LIMIT 1;
SELECT ALIAS(COLUMNS(*)) FROM x LIMIT 1;
SELECT COUNT(*) FROM x;
COPY x TO '__TEST_DIR__/bad_file.csv';
SELECT COUNT(*) FROM x;
SELECT ALIAS(COLUMNS(*)) FROM x LIMIT 1;
SELECT ALIAS(COLUMNS(*)) FROM x LIMIT 1;
SELECT ALIAS(COLUMNS(*)) FROM x LIMIT 1;
SELECT ALIAS(COLUMNS(*)) FROM x LIMIT 1;
SELECT ALIAS(COLUMNS(*)) FROM x LIMIT 1;
SELECT ALIAS(COLUMNS(*)) FROM x LIMIT 1;
COPY x TO '__TEST_DIR__/parquet_partition_1' WITH (format parquet, partition_by (x), overwrite_or_ignore, write_partition_columns);
SELECT COUNT(*) FROM x;
SELECT ALIAS(COLUMNS(*)) FROM x LIMIT 1;
SELECT ALIAS(COLUMNS(*)) FROM x LIMIT 1;
SELECT ALIAS(COLUMNS(*)) FROM x LIMIT 1;
COPY x TO '__TEST_DIR__/parquet_partition_2' WITH (format parquet, partition_by (x, x), overwrite_or_ignore, write_partition_columns);
SELECT COUNT(*) FROM x;
SELECT ALIAS(COLUMNS(*)) FROM x LIMIT 1;
SELECT ALIAS(COLUMNS(*)) FROM x LIMIT 1;
SELECT ALIAS(COLUMNS(*)) FROM x LIMIT 1;
COPY x TO '__TEST_DIR__/t.parquet' WITH (format parquet);
SELECT COUNT(*) FROM x;
SELECT ALIAS(COLUMNS(*)) FROM x LIMIT 1;
SELECT ALIAS(COLUMNS(*)) FROM x LIMIT 1;
SELECT ALIAS(COLUMNS(*)) FROM x LIMIT 1;
SELECT ALIAS(COLUMNS(*)) FROM x LIMIT 1;
SELECT ALIAS(COLUMNS(*)) FROM x LIMIT 1;
SELECT ALIAS(COLUMNS(*)) FROM x LIMIT 1;
SELECT x, x, x, x FROM x ORDER BY x, x;
SELECT x, x, x, x FROM x ORDER BY x, x;
SELECT x, x, x, x FROM x ORDER BY x, x;
CREATE TABLE x AS SELECT x % 2 AS x, (x + 1) % 5 AS x, x AS x FROM x AS x;
COPY x TO '__TEST_DIR__/partitioned1' WITH (FORMAT PARQUET, PARTITION_BY (x));
SELECT x, x, x FROM x ORDER BY x;
SELECT x, x, x FROM x ORDER BY x;
COPY (SELECT * EXCLUDE (x), CAST('prefix-' AS TEXT) || CAST(x AS TEXT) AS x FROM x) TO '__TEST_DIR__/partitioned2' WITH (FORMAT PARQUET, PARTITION_BY (x));
SELECT x, x, x FROM x ORDER BY x;
SELECT x, x, x FROM x ORDER BY x;
COPY x TO '__TEST_DIR__/partitioned3' WITH (FORMAT PARQUET, PARTITION_BY '*', WRITE_PARTITION_COLUMNS);
SELECT MIN(x) AS x FROM x GROUP BY x ORDER BY x;
COPY x TO '__TEST_DIR__/partitioned4' WITH (FORMAT PARQUET, PARTITION_BY part_col);
SELECT x, x, x FROM x WHERE x = 0 ORDER BY x;
COPY x TO '__TEST_DIR__/partitioned4' WITH (FORMAT PARQUET, PARTITION_BY part_col);
COPY x TO '__TEST_DIR__/partitioned5/' WITH (FORMAT PARQUET, PARTITION_BY part_col);
SELECT x, x, x FROM x ORDER BY x;
COPY x TO '__TEST_DIR__/partitioned6' WITH (FORMAT PARQUET, PARTITION_BY part_col, USE_TMP_FILE TRUE);
COPY x TO '__TEST_DIR__/partitioned6' WITH (FORMAT PARQUET, PARTITION_BY part_col, PER_THREAD_OUTPUT TRUE);
COPY x TO '__TEST_DIR__/partitioned7' WITH (FORMAT CSV, PARTITION_BY part_col);
SELECT x, x, x FROM x ORDER BY x;
SELECT x, x, x FROM x ORDER BY x;
COPY x TO '__TEST_DIR__/partitioned8' WITH (FORMAT PARQUET, PARTITION_BY pArt_cOl);
SELECT x, x, x FROM x ORDER BY x;
COPY x TO '__TEST_DIR__/partitioned9' WITH (FORMAT PARQUET, PARTITION_BY (x, x));
SELECT MIN(x) AS x FROM x GROUP BY x ORDER BY x;
COPY x TO '__TEST_DIR__/partitioned10' WITH (FORMAT PARQUET, PARTITION_BY (x, x));
SELECT MIN(x) AS x FROM x GROUP BY x ORDER BY x;
PRAGMA x = '100mb';
COPY (SELECT x % CAST(2 AS INT) AS x, CAST(x AS INT) FROM x AS x) TO '__TEST_DIR__/partitioned_memory_spill' WITH (FORMAT parquet, PARTITION_BY part_col);
PRAGMA x = '-1';
COPY x TO '__TEST_DIR__/lineitem_sf1_partitioned' WITH (FORMAT PARQUET, PARTITION_BY (x, x));
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
COPY (SELECT 42 AS x, 43 AS x) TO '__TEST_DIR__/overwrite_test' WITH (FORMAT PARQUET, PARTITION_BY (x));
COPY (SELECT 84 AS x, 85 AS x) TO '__TEST_DIR__/overwrite_test' WITH (FORMAT PARQUET, PARTITION_BY (x));
COPY (SELECT 84 AS x, 85 AS x) TO '__TEST_DIR__/overwrite_test' WITH (FORMAT PARQUET, PARTITION_BY (x), OVERWRITE 1);
SELECT * FROM x;
COPY (SELECT 42 AS x) TO '__TEST_DIR__/overwrite_test2' WITH (FORMAT PARQUET);
COPY (SELECT 84 AS x, 85 AS x) TO '__TEST_DIR__/overwrite_test2' WITH (FORMAT PARQUET, PARTITION_BY (x));
COPY (SELECT 84 AS x, 85 AS x) TO '__TEST_DIR__/overwrite_test2' WITH (FORMAT PARQUET, PARTITION_BY (x), OVERWRITE 1);
SELECT * FROM x;
COPY (SELECT 84 AS x) TO '__TEST_DIR__/overwrite_test' WITH (FORMAT PARQUET, PARTITION_BY (x), OVERWRITE 1, OVERWRITE_OR_IGNORE 1);
CREATE TABLE x (x TIMESTAMP, x INT);
INSERT INTO x VALUES (CAST('2000-01-01 01:02:03' AS TIMESTAMP), 42), (CAST('2000-02-01 01:02:03' AS TIMESTAMP), 100), (CAST('2000-03-01 12:11:10' AS TIMESTAMP), 1000);
COPY (SELECT YEAR(x) AS x, MONTH(x) AS x, * FROM x) TO '__TEST_DIR__/partitioned_append' WITH (FORMAT PARQUET, PARTITION_BY (x, x), APPEND);
SELECT x, x, SUM(x) FROM x GROUP BY ALL ORDER BY ALL;
DELETE FROM x;
INSERT INTO x VALUES (CAST('2000-01-01 02:02:03' AS TIMESTAMP), 62), (CAST('2000-03-01 13:11:10' AS TIMESTAMP), 50);
COPY (SELECT YEAR(x) AS x, MONTH(x) AS x, * FROM x) TO '__TEST_DIR__/partitioned_append' WITH (FORMAT PARQUET, PARTITION_BY (x, x), APPEND, FILENAME_PATTERN 'my_pattern_{uuid}');
SELECT x, x, SUM(x) FROM x GROUP BY ALL ORDER BY ALL;
COPY (SELECT YEAR(x) AS x, MONTH(x) AS x, * FROM x) TO '__TEST_DIR__/partitioned_append' WITH (FORMAT PARQUET, PARTITION_BY (x, x), FILENAME_PATTERN 'my_pattern_{uuid}', APPEND);
SELECT x, x, SUM(x) FROM x GROUP BY ALL ORDER BY ALL;
COPY (SELECT YEAR(x) AS x, MONTH(x) AS x, * FROM x) TO '__TEST_DIR__/partitioned_append' WITH (FORMAT PARQUET, PARTITION_BY (x, x), APPEND, FILENAME_PATTERN 'my_pattern_without_uuid');
SELECT * FROM x ORDER BY ALL;
SELECT * FROM x ORDER BY ALL;
CREATE SEQUENCE x;
CREATE TABLE x (x INT DEFAULT NEXTVAL('seq'), x TEXT);
INSERT INTO x (x) VALUES ('/'), ('\/\/'), ('==='), ('value with strings'), ('?:&'), ('🦆'), ('==='), ('===');
COPY x TO '__TEST_DIR__/escaped_partitions' WITH (FORMAT PARQUET, PARTITION_BY (x));
SELECT x, COUNT(*) FROM x GROUP BY ALL ORDER BY ALL;
ALTER TABLE x RENAME COLUMN x TO "x";
COPY x TO '__TEST_DIR__/escaped_partitions_names' WITH (FORMAT PARQUET, PARTITION_BY ("x"));
SELECT "x", COUNT(*) FROM x GROUP BY ALL ORDER BY ALL;
COPY x TO '__TEST_DIR__/escaped_partitions_names' WITH (FORMAT PARQUET, PARTITION_BY ("x"), OVERWRITE, WRITE_PARTITION_COLUMNS);
SELECT "x", COUNT(*) FROM x GROUP BY ALL ORDER BY ALL;
CREATE TABLE x AS SELECT x // 1000 AS x, x FROM x AS x;
COPY x TO '__TEST_DIR__/partition_join_pushdown' WITH (FORMAT parquet, PARTITION_BY (x));
SELECT COUNT(*), MIN(x), MAX(x), SUM(x) FROM x WHERE x = (SELECT MAX(x) FROM x);
SELECT COUNT(*), MIN(x), MAX(x), SUM(x) FROM x WHERE x >= 9980 AND x = (SELECT MAX(x) FROM x);
SELECT COUNT(*), MIN(x), MAX(x), SUM(x) FROM x WHERE x > 5 AND x = (SELECT MAX(x) FROM x);
CREATE TABLE x AS SELECT CAST((CAST('2000-01-01' AS DATE) + INTERVAL (x // 2000) YEARS) AS DATE) AS x, x % 2 AS x, x FROM x AS x;
COPY x TO '__TEST_DIR__/partition_join_pushdown_multi' WITH (FORMAT parquet, PARTITION_BY (x, x));
SELECT COUNT(*), MIN(x), MAX(x), MIN(x), MAX(x), SUM(x) FROM x WHERE x = (SELECT MAX(x) FROM x) AND x = (SELECT MAX(x) FROM x);
SELECT COUNT(*), MIN(x), MAX(x), MIN(x), MAX(x), SUM(x) FROM x WHERE x = (SELECT MAX(x) FROM x) AND x = CAST('2004-01-01' AS DATE);
SELECT COUNT(*) FROM x WHERE x = (SELECT MAX(x) FROM x);
CREATE TABLE x AS SELECT 2000 + x % 10 AS x, 1 + x % 3 AS x, x % 4 AS x, x % 5 AS x FROM x AS x;
COPY x TO '__TEST_DIR__/partition_rec_cte' WITH (FORMAT PARQUET, PARTITION_BY (x, x));
COPY x TO '__TEST_DIR__/partition_rec_cte' WITH (FORMAT PARQUET, PARTITION_BY (x, x));
WITH RECURSIVE x AS (SELECT 0 AS x, 1999 AS x UNION ALL SELECT COUNT(*) AS x, MAX(x.x) FROM x, (SELECT MAX(x) AS x FROM x) WHERE x.x = (SELECT MAX(x) + 1 FROM x) HAVING COUNT(*) > 0) SELECT SUM(x), MIN(x), MAX(x) FROM x WHERE x > 0;
CREATE TABLE x AS SELECT x % 2 AS x, x AS x, x // 7 AS x, CAST((x % 3) AS TEXT) AS x FROM x AS x;
COPY x TO '__TEST_DIR__/partition_group_by' WITH (FORMAT parquet, PARTITION_BY (x));
DROP TABLE x;
CREATE VIEW x AS SELECT * FROM x;
SELECT x, SUM(x) FROM x GROUP BY x ORDER BY ALL;
SELECT x, COUNT(DISTINCT x) FROM x GROUP BY x ORDER BY ALL;
SELECT x, SUM(x) FROM x GROUP BY GROUPING SETS ((), (x)) ORDER BY ALL;
SELECT x, SUM(x) FILTER(WHERE x % 7 > 2) FROM x GROUP BY x ORDER BY ALL;
SELECT SUM(x), x FROM x GROUP BY x ORDER BY ALL;
SELECT x, SUM(x) FROM x WHERE x > 100 GROUP BY x ORDER BY ALL;
CREATE TABLE x AS SELECT x % 2 AS x, x % 3 AS x, x AS x, x + 1 AS x FROM x AS x;
COPY x TO '__TEST_DIR__/partition_group_by_multiple' WITH (FORMAT parquet, PARTITION_BY (x, x));
DROP TABLE x;
CREATE VIEW x AS SELECT * FROM x;
SELECT x, x, SUM(x) FROM x GROUP BY x, x ORDER BY ALL;
SELECT x, SUM(x) FROM x GROUP BY x ORDER BY ALL;
SELECT x, SUM(x) FROM x GROUP BY x ORDER BY ALL;
SELECT x, SUM(x) FROM x WHERE x = 0 GROUP BY x ORDER BY ALL;
SELECT x, x, SUM(x) FROM x GROUP BY GROUPING SETS ((x), (x)) ORDER BY ALL;
SET x = 10000;
COPY x TO '__TEST_DIR__/lineitem_partitioned_parquet' WITH (FORMAT PARQUET, PARTITION_BY (x, x));
COPY x TO '__TEST_DIR__/lineitem_partitioned_csv' WITH (FORMAT CSV, PARTITION_BY (x, x));
DROP TABLE x;
DROP VIEW x;
COPY (SELECT NULL AS x, NULL AS x FROM x) TO '__TEST_DIR__/issue6304_null' WITH (format parquet, partition_by (x), overwrite_or_ignore);
COPY (SELECT 1 AS x, 2 AS x FROM x) TO '__TEST_DIR__/issue6304_constant' WITH (format parquet, partition_by (x), overwrite_or_ignore);
COPY (SELECT NULL AS x FROM x) TO '__TEST_DIR__/issue6304_null' WITH (format parquet, partition_by (x), overwrite_or_ignore, write_partition_columns);
CREATE TABLE x AS SELECT x % 2 AS x, (x + 1) % 5 AS x, x AS x FROM x AS x;
COPY x TO '__TEST_DIR__/no-part-cols' WITH (FORMAT PARQUET, PARTITION_BY (x));
SELECT x, x, x FROM x ORDER BY x;
COPY x TO '__TEST_DIR__/no-part-cols-explicit' WITH (FORMAT PARQUET, PARTITION_BY (x), WRITE_PARTITION_COLUMNS FALSE);
SELECT x, x, x FROM x ORDER BY x;
COPY x TO '__TEST_DIR__/no-part-cols2' WITH (FORMAT PARQUET, PARTITION_BY (x, x));
SELECT x, x, x FROM x ORDER BY x;
COPY (SELECT * EXCLUDE (x), CAST('prefix-' AS TEXT) || CAST(x AS TEXT) AS x FROM x) TO '__TEST_DIR__/no-part-cols3' WITH (FORMAT PARQUET, PARTITION_BY (x));
SELECT x, x, x FROM x ORDER BY x;
COPY (SELECT 1 AS x, 2 AS x, 3 AS x, 4 AS x, 5 AS x, 6 AS x, 7 AS x, 8 AS x, 9 AS x, 10 AS x) TO '__TEST_DIR__/no-part-cols4' WITH (FORMAT PARQUET, PARTITION_BY (x));
SELECT x, x, x, x, x, x, x, x, x, x FROM x ORDER BY 1;
COPY (SELECT 1 AS x, 2 AS x, 3 AS x, 4 AS x, 5 AS x, 6 AS x, 7 AS x, 8 AS x, 9 AS x, 10 AS x) TO '__TEST_DIR__/no-part-cols5' WITH (FORMAT PARQUET, PARTITION_BY (x));
SELECT x, x, x, x, x, x, x, x, x, x FROM x ORDER BY 1;
COPY (SELECT 1 AS x, 2 AS x, 3 AS x, 4 AS x, 5 AS x, 6 AS x, 7 AS x, 8 AS x, 9 AS x, 10 AS x) TO '__TEST_DIR__/no-part-cols6' WITH (FORMAT PARQUET, PARTITION_BY (x, x));
SELECT x, x, x, x, x, x, x, x, x, x FROM x ORDER BY 1;
COPY (SELECT 1 AS x, 2 AS x, 3 AS x, 4 AS x, 5 AS x, 6 AS x, 7 AS x, 8 AS x, 9 AS x, 10 AS x) TO '__TEST_DIR__/no-part-cols7' WITH (FORMAT PARQUET, PARTITION_BY (x, x, x));
SELECT x, x, x, x, x, x, x, x, x, x FROM x ORDER BY 1;
COPY x TO '__TEST_DIR__/no-part-cols8' WITH (FORMAT PARQUET, PARTITION_BY (x, x, x));
COPY x TO '__TEST_DIR__/no-part-cols8' WITH (FORMAT PARQUET, OVERWRITE, PARTITION_BY (x, x, x), WRITE_PARTITION_COLUMNS);
SELECT x, x, x FROM x ORDER BY x;
COPY x TO '__TEST_DIR__/no-part-cols9' WITH (FORMAT PARQUET, PARTITION_BY '*');
COPY x TO '__TEST_DIR__/no-part-cols9' WITH (FORMAT PARQUET, PARTITION_BY '*', OVERWRITE, WRITE_PARTITION_COLUMNS);
SELECT x, x, x FROM x ORDER BY x;
COPY x TO '__TEST_DIR__/no-part-cols9' WITH (FORMAT PARQUET, PARTITION_BY '*', WRITE_PARTITION_COLUMNS FALSE);
COPY x TO '__TEST_DIR__/csv-no-part-cols' WITH (FORMAT CSV, PARTITION_BY (x));
SELECT x, x, x FROM x ORDER BY x;
COPY x TO '__TEST_DIR__/csv-no-part-cols-explicit' WITH (FORMAT CSV, PARTITION_BY (x), WRITE_PARTITION_COLUMNS FALSE);
SELECT x, x, x FROM x ORDER BY x;
COPY x TO '__TEST_DIR__/csv-no-part-cols2' WITH (FORMAT CSV, PARTITION_BY (x, x));
SELECT x, x, x FROM x ORDER BY x;
COPY (SELECT * EXCLUDE (x), CAST('prefix-' AS TEXT) || CAST(x AS TEXT) AS x FROM x) TO '__TEST_DIR__/csv-no-part-cols3' WITH (FORMAT CSV, PARTITION_BY (x));
SELECT x, x, x FROM x ORDER BY x;
COPY (SELECT 1 AS x, 2 AS x, 3 AS x, 4 AS x, 5 AS x, 6 AS x, 7 AS x, 8 AS x, 9 AS x, 10 AS x) TO '__TEST_DIR__/csv-no-part-cols4' WITH (FORMAT CSV, PARTITION_BY (x));
SELECT x, x, x, x, x, x, x, x, x, x FROM x ORDER BY 1;
COPY (SELECT 1 AS x, 2 AS x, 3 AS x, 4 AS x, 5 AS x, 6 AS x, 7 AS x, 8 AS x, 9 AS x, 10 AS x) TO '__TEST_DIR__/csv-no-part-cols5' WITH (FORMAT CSV, PARTITION_BY (x));
SELECT x, x, x, x, x, x, x, x, x, x FROM x ORDER BY 1;
COPY (SELECT 1 AS x, 2 AS x, 3 AS x, 4 AS x, 5 AS x, 6 AS x, 7 AS x, 8 AS x, 9 AS x, 10 AS x) TO '__TEST_DIR__/csv-no-part-cols6' WITH (FORMAT CSV, PARTITION_BY (x, x));
SELECT x, x, x, x, x, x, x, x, x, x FROM x ORDER BY 1;
COPY (SELECT 1 AS x, 2 AS x, 3 AS x, 4 AS x, 5 AS x, 6 AS x, 7 AS x, 8 AS x, 9 AS x, 10 AS x) TO '__TEST_DIR__/csv-no-part-cols7' WITH (FORMAT CSV, PARTITION_BY (x, x, x));
SELECT x, x, x, x, x, x, x, x, x, x FROM x ORDER BY 1;
COPY x TO '__TEST_DIR__/csv-no-part-cols8' WITH (FORMAT CSV, PARTITION_BY (x, x, x));
COPY x TO '__TEST_DIR__/csv-no-part-cols8' WITH (FORMAT CSV, PARTITION_BY (x, x, x), OVERWRITE, WRITE_PARTITION_COLUMNS);
SELECT x, x, x FROM x ORDER BY x;
COPY x TO '__TEST_DIR__/csv-no-part-cols9' WITH (FORMAT CSV, PARTITION_BY '*');
COPY x TO '__TEST_DIR__/csv-no-part-cols9' WITH (FORMAT CSV, PARTITION_BY '*', OVERWRITE, WRITE_PARTITION_COLUMNS);
SELECT x, x, x FROM x ORDER BY x;
COPY x TO '__TEST_DIR__/csv-no-part-cols9' WITH (FORMAT CSV, PARTITION_BY '*', WRITE_PARTITION_COLUMNS FALSE);
CREATE TABLE x AS SELECT * FROM x AS x;
SET x = 'false_pw';
SET x = 'path';
COPY x TO 's3://test-bucket/s3_query_params/test.csv';
COPY x TO 's3://test-bucket/s3_query_params/test.csv?s3_access_key_id=${AWS_ACCESS_KEY_ID}&s3_secret_access_key=${AWS_SECRET_ACCESS_KEY}';
SELECT x FROM x LIMIT 3;
COPY x TO 's3://test-bucket/s3_query_params/test.parquet?s3_access_key_id=${AWS_ACCESS_KEY_ID}&s3_secret_access_key=${AWS_SECRET_ACCESS_KEY}' WITH (FORMAT 'parquet');
SELECT x FROM x LIMIT 3;
SELECT x FROM x LIMIT 3;
SELECT CURRENT_SETTING('s3_access_key_id');
SELECT CURRENT_SETTING('s3_secret_access_key');
CREATE TABLE x AS SELECT * FROM x AS x;
COPY x TO 's3://test-bucket/s3_query_params/test_2.csv?s3_access_key_id=minio_duckdb_user_2&s3_secret_access_key=minio_duckdb_user_2_password';
SELECT x FROM x LIMIT 3;
SELECT x.x, x.x FROM x AS x INNER JOIN x AS x ON x.x + 100 = x.x LIMIT 3;
SET x = '${AWS_SECRET_ACCESS_KEY}';
SET x = 'false_region';
SELECT x FROM x LIMIT 3;
SET x = '${AWS_DEFAULT_REGION}';
SET x = 'false_endpoint';
SELECT x FROM x LIMIT 3;
SET x = '${DUCKDB_S3_ENDPOINT}';
SET x = 'false_acces_key';
SELECT x FROM x LIMIT 3;
SET x = '${AWS_SECRET_ACCESS_KEY}';
SET x = 'false_acces_key_id';
SELECT x FROM x LIMIT 3;
SET x = '${AWS_ACCESS_KEY_ID}';
SELECT x FROM x LIMIT 3;
SELECT x FROM x LIMIT 3;
SELECT x FROM x LIMIT 3;
SET x = 'path';
SET x = 'false_id';
SELECT x FROM x LIMIT 3;
SET x = '${AWS_ACCESS_KEY_ID}';
SELECT x FROM x LIMIT 3;
SELECT x FROM x LIMIT 3;
SET x = '${DUCKDB_S3_ENDPOINT}/test-bucket';
SELECT x FROM x LIMIT 3;
SET x = 'vhost';
SELECT x FROM x LIMIT 3;
SET x = '${DUCKDB_S3_ENDPOINT}/s3_query_params';
SELECT x FROM x LIMIT 3;
SET x = 120000;
SET x = 6;
SET x = 6;
SELECT SUM(x) FROM x;
SELECT SUM(x) FROM x;
SELECT SUM(x) FROM x;
PRAGMA x = '200MB';
SET x = 120000;
SET x = 6;
COPY (SELECT x % CAST(2 AS INT) AS x, CAST(x AS INT) FROM x AS x) TO 's3://test-bucket/partitioned_memory_spill' WITH (FORMAT parquet, PARTITION_BY part_col, overwrite_or_ignore TRUE);
PRAGMA x = '-1';
COPY x TO 's3://test-bucket/lineitem_sf1_partitioned' WITH (FORMAT PARQUET, PARTITION_BY (x, x), overwrite_or_ignore TRUE);
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
PRAGMA x;
COPY (SELECT 'value-1' AS x) TO 's3://test-bucket/proxy-test/test.parquet';
SELECT * FROM x;
SET x = 'blabla:1337';
SET x = 'xxx';
SET x = 'yyy';
SELECT * FROM x;
SET x = '${HTTP_PROXY_PUBLIC}';
SELECT * FROM x;
SET x = 'http://${HTTP_PROXY_PUBLIC}';
SELECT * FROM x;
SET x = 'blabla:1337';
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
COPY (SELECT 'value-1' AS x) TO 's3://test-bucket/http-secret-test/test.parquet';
PRAGMA x;
SELECT * FROM x;
CREATE TABLE x AS SELECT * FROM x AS x;
CREATE TABLE x AS SELECT * FROM x AS x;
SET x = TRUE;
COPY (SELECT * FROM x AS x) TO 's3://test-bucket-public/root-dir/metadata_cache/test1.parquet';
PRAGMA x = 'NULLS LAST';
SET x = TRUE;
SET x = 120000;
SET x = 6;
CREATE SCHEMA x.x;
CREATE SCHEMA x.x;
CREATE SCHEMA x.x;
CREATE SCHEMA x.x;
CREATE SCHEMA x.x;
CREATE SCHEMA x.x;
CREATE SCHEMA x.x;
CREATE SCHEMA x.x;
SET x = TRUE;
SET x = 120000;
SET x = 6;
COPY x TO 's3://test-bucket/tpch-sf0_01/lineitem.parquet';
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
CREATE TABLE x AS SELECT 1 AS x, 'value1' AS x;
COPY x TO 's3://test-bucket/hive-partitioning/simple/key_!-_.*()=zisiswurking1/test.parquet';
SELECT x, x, "x" FROM x;
CREATE TABLE x AS SELECT x FROM x AS x;
COPY x TO 's3://test-bucket/hive-partitioning/medium/part=1/part2=1/test.parquet';
SELECT MIN(x), MAX(x) FROM x WHERE x = 2;
SELECT MIN(x), MAX(x) FROM x WHERE x = 1;
SELECT MIN(x), MAX(x) FROM x WHERE x = 2;
SELECT MIN(x), MAX(x) FROM x WHERE x = 1;
SELECT MIN(x), MAX(x) FROM x WHERE x = 1;
SELECT MIN(x), MAX(x) FROM x WHERE x = 1;
COPY (SELECT * FROM x) TO 's3://test-bucket/hive-partitioning/filter-test-parquet' WITH (FORMAT PARQUET, PARTITION_BY c, OVERWRITE_OR_IGNORE);
COPY (SELECT * FROM x) TO 's3://test-bucket/hive-partitioning/filter-test-csv' WITH (FORMAT CSV, PARTITION_BY c, OVERWRITE_OR_IGNORE);
COPY (SELECT * FROM x) TO 's3://test-bucket/hive-partitioning/filter-test-parquet' WITH (FORMAT PARQUET, PARTITION_BY c, OVERWRITE);
SELECT x FROM x;
SELECT x FROM x;
SET x = 120000;
SET x = 6;
SELECT SUM(x * x) AS x FROM x WHERE x >= CAST('1994-01-01' AS DATE) AND x < CAST('1995-01-01' AS DATE) AND x BETWEEN 0.05 AND 0.07 AND x < 24;
CREATE TABLE x AS SELECT x AS x, (x * 2) AS x, POWER(x, 2) AS x FROM x AS x;
SELECT * FROM x;
SELECT * FROM x;
COPY x TO 's3://test-bucket/glob_ss/t0.csv';
SELECT * FROM x;
SELECT * FROM x;
COPY x TO 's3://test-bucket/glob_ss/a/t0.csv';
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
COPY x TO 's3://test-bucket/glob_ss/a/b/t0.csv';
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT COUNT(*) FROM x;
COPY x TO 's3://test-bucket/glob_ss/partitioned' WITH (FORMAT PARQUET, PARTITION_BY (x, x));
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
COPY x TO 's3://test-bucket/glob_ss/a/b/a/t0.csv';
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
COPY x TO 's3://test-bucket/glob_ss/a/b/a/b/a/b/c/d/e/t0.csv';
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT COUNT(*) FROM x;
SET x = 120000;
SET x = 6;
SELECT SUM(x * x) AS x FROM x WHERE x >= CAST('1994-01-01' AS DATE) AND x < CAST('1995-01-01' AS DATE) AND x BETWEEN 0.05 AND 0.07 AND x < 24;
SELECT SUM(x * x) AS x FROM x WHERE x >= CAST('1994-01-01' AS DATE) AND x < CAST('1995-01-01' AS DATE) AND x BETWEEN 0.05 AND 0.07 AND x < 24;
COPY x TO 's3://test-bucket/multipart/export_large_${threadid}.parquet' WITH (FORMAT 'parquet');
SELECT SUM(x * x) AS x FROM x WHERE x >= CAST('1994-01-01' AS DATE) AND x < CAST('1995-01-01' AS DATE) AND x BETWEEN 0.05 AND 0.07 AND x < 24;
SELECT SUM(x * x) AS x FROM x WHERE x >= CAST('1994-01-01' AS DATE) AND x < CAST('1995-01-01' AS DATE) AND x BETWEEN 0.05 AND 0.07 AND x < 24;
SELECT SUM(x * x) AS x FROM x WHERE x >= CAST('1994-01-01' AS DATE) AND x < CAST('1995-01-01' AS DATE) AND x BETWEEN 0.05 AND 0.07 AND x < 24;
SET x = 1;
COPY x TO 's3://test-bucket/multipart/export_small_${threadid}.parquet' WITH (FORMAT 'parquet');
SELECT SUM(x * x) AS x FROM x WHERE x >= CAST('1994-01-01' AS DATE) AND x < CAST('1995-01-01' AS DATE) AND x BETWEEN 0.05 AND 0.07 AND x < 24;
SET x = '2.5GB';
SET x = 120000;
SET x = 6;
PRAGMA x = '';
SET x = 5;
SELECT SUM(x * x) AS x FROM x WHERE x >= CAST('1994-01-01' AS DATE) AND x < CAST('1995-01-01' AS DATE) AND x BETWEEN 0.05 AND 0.07 AND x < 24;
COPY x TO 's3://test-bucket/multipart/export_large.parquet' WITH (FORMAT 'parquet');
SELECT SUM(x * x) AS x FROM x WHERE x >= CAST('1994-01-01' AS DATE) AND x < CAST('1995-01-01' AS DATE) AND x BETWEEN 0.05 AND 0.07 AND x < 24;
SET x = 120000;
SET x = 6;
SELECT SUM(x * x) AS x FROM x WHERE x >= CAST('1994-01-01' AS DATE) AND x < CAST('1995-01-01' AS DATE) AND x BETWEEN 0.05 AND 0.07 AND x < 24;
COPY x TO 's3://test-bucket/multipart/export_large.json' WITH (FORMAT 'json');
SELECT SUM(x * x) AS x FROM x WHERE x >= CAST('1994-01-01' AS DATE) AND x < CAST('1995-01-01' AS DATE) AND x BETWEEN 0.05 AND 0.07 AND x < 24;
SELECT SUM(x * x) / 3 AS x FROM x WHERE x >= CAST('1994-01-01' AS DATE) AND x < CAST('1995-01-01' AS DATE) AND x BETWEEN 0.05 AND 0.07 AND x < 24;
CREATE TABLE x AS (SELECT * FROM x);
SELECT * FROM x LIMIT 10;
COPY x TO 's3://test-bucket/multipart/web_page.parquet' WITH (FORMAT 'parquet');
SELECT * FROM x LIMIT 10;
COPY x TO 's3://test-bucket/multipart/web_page.csv';
SELECT * FROM x LIMIT 10;
ATTACH ':memory:' AS x;
USE x;
CREATE TABLE x (x INT, x INT, x TEXT);
INSERT INTO x VALUES (42, 88, 'hello');
CREATE UNIQUE INDEX x ON x(x);
CREATE VIEW x AS SELECT * FROM x;
CREATE TABLE x (x mood);
INSERT INTO x VALUES ('ok'), ('sad'), (NULL);
SELECT * FROM x.x;
CREATE SEQUENCE x;
SELECT NEXTVAL('seq');
CREATE FUNCTION x(x, x) AS x + x;
COPY SELECT * FROM x AS x TO x;
USE x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
INSERT INTO x VALUES (42, 88, 'hello');
INSERT INTO x VALUES (43, 88, 'hello');
SELECT * FROM x;
SELECT NEXTVAL('seq');
SELECT MY_ADD(1, 2);
PRAGMA x;
ATTACH ':memory:' AS x;
ATTACH ':memory:' AS x;
COPY SELECT * FROM x AS x TO x;
CREATE TABLE x.x (x INT, x INT, x TEXT);
INSERT INTO x.x VALUES (42, 84, 'hello');
COPY SELECT * FROM x AS x TO x;
ATTACH '__TEST_DIR__/read_only.db' AS x;
CREATE TABLE x.x (x INT);
DETACH read_only;
ATTACH '__TEST_DIR__/read_only.db' AS x (READ_ONLY);
COPY SELECT * FROM x AS x TO x;
PRAGMA x;
CREATE TABLE x (x INT, x AS (x + 100));
INSERT INTO x VALUES (42);
SELECT * FROM x;
ATTACH '__TEST_DIR__/myotherdb.db';
COPY SELECT * FROM x AS x TO x;
SELECT * FROM x.x;
PRAGMA x;
ATTACH ':memory:' AS x;
USE x;
CREATE TABLE x (x INT, x INT, x TEXT);
CREATE INDEX x ON x(x);
INSERT INTO x SELECT x, 88, 'hello' FROM x;
SELECT x, x, x FROM x.x WHERE x = 42;
COPY SELECT * FROM x AS x TO x;
USE x;
SELECT * FROM x WHERE x = 42;
DROP INDEX x;
PRAGMA x;
ATTACH ':memory:' AS x;
ATTACH ':memory:' AS x;
CREATE TABLE x.x AS SELECT * FROM x AS x;
COPY SELECT * FROM x AS x TO x;
COPY SELECT * FROM x AS x TO x;
SELECT * FROM x.x;
PRAGMA x;
ATTACH ':memory:' AS x;
CREATE TABLE x.x (x INT, x INT, x TEXT);
INSERT INTO x.x VALUES (42, 88, 'hello');
COPY SELECT * FROM x AS x TO x;
SELECT * FROM x.x;
COPY SELECT * FROM x AS x TO x;
COPY SELECT * FROM x AS x TO x;
ATTACH ':memory:' AS x;
COPY SELECT * FROM x AS x TO x;
COPY SELECT * FROM x AS x TO x;
COPY SELECT * FROM x AS x TO x;
COPY SELECT * FROM x AS x TO x;
PRAGMA x;
ATTACH ':memory:' AS x;
USE x;
CREATE TABLE x AS SELECT x, CAST(HASH(x) AS TEXT) AS x FROM x AS x;
ALTER TABLE x ALTER COLUMN x SET NOT NULL;
CREATE INDEX x ON x(x);
ATTACH ':memory:' AS x;
COPY SELECT * FROM x AS x TO x;
SELECT x, x, x FROM x ORDER BY ALL;
SELECT x, x, x FROM x ORDER BY ALL;
PRAGMA x;
ATTACH '__TEST_DIR__/copy_db_old.db' AS x;
CREATE TABLE x.x (x INT, x INT UNIQUE);
INSERT INTO x.x VALUES (1, 1), (2, 2), (3, 3);
CREATE UNIQUE INDEX x ON x.x(x);
ATTACH '__TEST_DIR__/copy_db_new1.db' AS x;
COPY SELECT * FROM x AS x TO NEW1(x);
COPY SELECT * FROM x AS x TO NEW1(x);
SELECT x, x FROM x.x ORDER BY ALL;
INSERT INTO x.x VALUES (1, 4);
INSERT INTO x.x VALUES (4, 1);
DETACH new1;
ATTACH '__TEST_DIR__/copy_db_new1.db' AS x;
INSERT INTO x.x VALUES (1, 4);
INSERT INTO x.x VALUES (4, 1);
PRAGMA x;
ATTACH '__TEST_DIR__/backup.db';
CREATE SEQUENCE x;
CREATE TABLE x (x INT DEFAULT NEXTVAL('seq'));
INSERT INTO x VALUES (DEFAULT);
COPY SELECT * FROM x AS x TO x;
DROP SEQUENCE x CASCADE;
SELECT * FROM x.x;
SELECT CURRVAL('backup.main.seq');
DROP SEQUENCE x.x.x CASCADE;
CREATE SCHEMA x.x;
CREATE SEQUENCE x.x;
CREATE TABLE x (x INT DEFAULT NEXTVAL('my_schema.seq'));
COPY SELECT * FROM x AS x TO x;
DROP SEQUENCE x.x CASCADE;
DROP SEQUENCE x.x.x CASCADE;
CREATE SCHEMA x.x;
CREATE SEQUENCE x.x.x;
CREATE TABLE x (x INT DEFAULT NEXTVAL('backup.seq'));
DROP SCHEMA x.x CASCADE;
CREATE SCHEMA x.x;
CREATE SEQUENCE x.x.x;
CREATE TABLE x (x INT DEFAULT NEXTVAL('memory.backup.seq'));
COPY SELECT * FROM x AS x TO x;
DROP SEQUENCE x.x.x CASCADE;
PRAGMA x;
CREATE TABLE x AS SELECT * FROM x AS x;
CREATE TABLE x AS SELECT * FROM x;
SELECT COUNT(*), SUM(x) FROM x;
SELECT * FROM x LIMIT 5;
SELECT * FROM x LIMIT 5 OFFSET 77777;
INSERT INTO x SELECT x + 1000000 FROM x;
SELECT * FROM x LIMIT 5 OFFSET 1000000;
SELECT * FROM x LIMIT 5 OFFSET 1077777;
PRAGMA x;
CREATE TABLE x AS SELECT x, CONCAT('thisisalongstring', x) AS x FROM x AS x;
CREATE TABLE x AS SELECT * FROM x;
SELECT COUNT(*), SUM(CAST(REPLACE(x, 'thisisalongstring', '') AS INT)) FROM x;
SELECT * FROM x LIMIT 5;
SELECT * FROM x LIMIT 5 OFFSET 77777;
INSERT INTO x SELECT x + 1000000, CONCAT('thisisalongstring', x + 1000000) AS x FROM x;
SELECT * FROM x LIMIT 5 OFFSET 1000000;
SELECT * FROM x LIMIT 5 OFFSET 1077777;
PRAGMA x;
CREATE TABLE x AS SELECT 1;
SELECT * FROM x;
CREATE TABLE x AS SELECT 2 AS x;
SELECT * FROM x;
CREATE OR REPLACE TABLE x AS SELECT 3;
SELECT * FROM x;
CREATE TABLE x AS SELECT 3;
CREATE OR REPLACE TABLE x AS SELECT 4;
SELECT * FROM x;
CREATE OR REPLACE TABLE x AS SELECT 'hello' UNION ALL SELECT 'world';
SELECT * FROM x;
CREATE OR REPLACE TABLE x AS SELECT 5 WHERE FALSE;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
CREATE TABLE x (x, x) AS SELECT 1, 'hello';
SELECT * FROM x;
CREATE OR REPLACE TABLE x (x, x) AS SELECT 2, 'duck';
SELECT * FROM x;
CREATE TABLE IF NOT EXISTS x (x, x) AS SELECT 3, 'database';
SELECT * FROM x;
CREATE OR REPLACE TABLE x (x, "x") AS SELECT 3.5, 'quote';
SELECT * FROM x;
CREATE TABLE x (x) AS SELECT 4, 'mismatch';
SELECT * FROM x;
CREATE TABLE x (x, x) AS SELECT 5;
CREATE TABLE x AS SELECT 42;
SELECT COUNT(*) FROM x;
CREATE TABLE x AS SELECT 42;
SELECT COUNT(*) FROM x;
CREATE TABLE x (x INT[]);
INSERT INTO x SELECT CASE WHEN x <= 520 THEN [0, 0] ELSE [0] END FROM x AS x;
CREATE DATABASE x;
CREATE DATABASE x AS SELECT * FROM x;
DROP DATABASE x;
CREATE SCHEMA x.x;
USE x;
CREATE TABLE x (x BIGINT PRIMARY KEY, x INT, x INT);
CREATE INDEX x ON x(x);
CREATE UNIQUE INDEX x ON x(x);
CREATE SCHEMA x.x;
CREATE TABLE x AS SELECT * FROM x AS x;
CREATE VIEW x AS SELECT * FROM x AS x;
CREATE SEQUENCE x;
PRAGMA x;
CREATE TABLE x (x INT);
CREATE OR REPLACE TABLE x (x INT, x INT);
CREATE VIEW x AS SELECT 42;
CREATE OR REPLACE TABLE x (x INT);
CREATE TABLE IF NOT EXISTS x (x INT);
INSERT INTO x VALUES (1, 2);
CREATE OR REPLACE TABLE IF NOT EXISTS x (x INT);
PRAGMA x;
SELECT * FROM x AS x JOIN x AS x ON x.x = x.x;
SELECT x, x FROM x AS x;
SELECT * FROM (SELECT x, x FROM x AS x) AS x;
SELECT * FROM (SELECT x, x, x, x FROM x AS x) AS x;
CREATE TABLE x AS SELECT x, x FROM x AS x;
SELECT * FROM x;
CREATE TABLE x AS SELECT x, x, x, x FROM x AS x;
SELECT * FROM (SELECT x, x, x, x FROM x AS x) AS x;
SELECT * FROM (SELECT * FROM x AS x JOIN x AS x ON x.x = x.x) AS x;
CREATE TABLE x AS SELECT x.x, x.x FROM x AS x JOIN x AS x ON x.x = x.x;
SELECT * FROM x;
CREATE TABLE x AS SELECT * FROM x AS x JOIN x AS x ON x.x = x.x;
SELECT * FROM x;
PRAGMA x;
CREATE TABLE x;
PRAGMA x;
PRAGMA x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
INSERT INTO x VALUES (1, 1, 1), (1, 1, 1), (1, 1, 1), (2, 2, 2), (2, 2, 2), (3, 3, 3);
SELECT * FROM x;
SELECT * FROM x;
SELECT x FROM x WHERE x ILIKE 'INTEGER' LIMIT 3;
ALTER TABLE x RENAME COLUMN x TO x;
ALTER TABLE x RENAME COLUMN x TO x;
SELECT * FROM x;
SELECT x FROM x WHERE x ILIKE 'INTEGER' LIMIT 3;
SELECT * FROM x;
SELECT x FROM x WHERE x ILIKE 'INTEGER' LIMIT 3;
ALTER TABLE x DROP COLUMN x;
SELECT * FROM x;
SELECT x FROM x WHERE x ILIKE 'INTEGER' LIMIT 2;
SELECT * FROM x;
SELECT x FROM x WHERE x ILIKE 'INTEGER' LIMIT 3;
CREATE TABLE x (x ENUM('hide', 'visible')[]);
SELECT x FROM (DESCRIBE x);
ATTACH ':memory:' AS x;
CREATE SCHEMA x.x;
CREATE SCHEMA x.x.x;
CREATE TABLE x (x schema2.foo[]);
CREATE TABLE x (x db2.schema3.bar[]);
PRAGMA x;
CREATE TABLE x AS WITH x AS (SELECT * FROM (VALUES (1, 42)) AS x), x AS MATERIALIZED (SELECT 42) SELECT x FROM x JOIN x ON x.x = x.x;
SELECT x FROM x;
PRAGMA x;
DESCRIBE SELECT 42 AS x;
WITH x AS (SELECT 42 AS x) SELECT * FROM (DESCRIBE x);
WITH x AS (SELECT 42 AS x) SELECT * FROM (DESCRIBE x);
SUMMARIZE SELECT 42 AS x;
WITH x AS (SELECT 42 AS x) SELECT * FROM (SUMMARIZE TABLE x);
WITH x AS (SELECT 42 AS x) SELECT * FROM (SUMMARIZE TABLE x);
WITH x AS (SELECT 42 AS x) SELECT * FROM (SUMMARIZE TABLE x);
WITH x AS (SELECT 42 AS x) SELECT * FROM (SUMMARIZE TABLE x);
CREATE TABLE x AS SELECT * FROM x AS x;
WITH RECURSIVE x AS (SELECT 2, 3 UNION SELECT 3, 3 UNION SELECT 4, 3), x AS (SELECT 1 AS x, x, x FROM x /* generation 1 is initial board setup */ UNION ALL SELECT x + 1, x, x /* generation n+1 */ FROM (SELECT x, x + x AS x, x + x AS x, MAX(x) OVER (PARTITION BY x + 1, x + x, x + x) AS x FROM x, (SELECT x.x AS x, x.x AS x, CASE WHEN x.x = 0 AND x.x = 0 THEN 1 ELSE 0 END AS x FROM x AS x, x AS x /* join 2 row generators to get 9 pairs */) AS x WHERE x < 100) AS x GROUP BY x + 1, x, x, x /* from all impacts back to cells */ HAVING (x = 1 AND COUNT(*) < 5 AND COUNT(*) > 2) OR COUNT(*) = 3 /* decide if cell is alive */) SELECT * FROM x WHERE x = 4 ORDER BY x, x, x;
WITH RECURSIVE x AS (SELECT 2, 3 UNION SELECT 3, 3 UNION SELECT 4, 3), x AS (SELECT 1 AS x, x, x FROM x /* generation 1 is initial board setup */ UNION ALL SELECT x + 1, x, x /* generation n+1 */ FROM (SELECT x, x + x AS x, x + x AS x, MAX(x) OVER (PARTITION BY x + 1, x + x, x + x) AS x FROM x, (SELECT x.x AS x, x.x AS x, CASE WHEN x.x = 0 AND x.x = 0 THEN 1 ELSE 0 END AS x FROM x AS x, x AS x /* join 2 row generators to get 9 pairs */) AS x WHERE x < 100) AS x GROUP BY x + 1, x, x, x /* from all impacts back to cells */ HAVING (x = 1 AND COUNT(*) < 5 AND COUNT(*) > 2) OR COUNT(*) = 3 /* decide if cell is alive */) SELECT * FROM x WHERE x = 4 ORDER BY x, x, x;
WITH RECURSIVE x AS (SELECT 42) SELECT * FROM x;
WITH RECURSIVE x AS (SELECT 1 AS x INTERSECT SELECT x + 1 FROM x WHERE x < 3) SELECT * FROM x ORDER BY x;
WITH RECURSIVE x AS (SELECT 1 AS x EXCEPT SELECT x + 1 FROM x WHERE x < 3) SELECT * FROM x ORDER BY x;
PRAGMA x;
CREATE TABLE x (x INT, x INT);
CREATE TABLE x (x INT);
INSERT INTO x WITH x AS (INSERT INTO x SELECT 1, 2 RETURNING x) SELECT x FROM x;
PRAGMA x;
CREATE TABLE x (x TINYINT);
INSERT INTO x VALUES (1);
WITH RECURSIVE x AS (SELECT 1, [1, 2, 3, 4, 5, 6] UNION ALL SELECT x + 1, x[$loc] FROM x, x WHERE x < 10) SELECT * FROM x;
WITH RECURSIVE x AS (SELECT 1, [1, 2, 3, 4, 5, 6] UNION ALL SELECT x + 1, x FROM x, x WHERE x < 10 AND x = x) SELECT * FROM x;
WITH RECURSIVE x AS (SELECT 1, [1, 2, 3, 4, 5, 6] UNION ALL SELECT x + 1, x[$loc] FROM x, x WHERE x < 10 AND x = x) SELECT * FROM x;
WITH RECURSIVE x AS (SELECT [1, 2, 3, 4, 5, 6] UNION ALL SELECT x[x[1] + 1 : 6] FROM x WHERE x[1] < 6) SELECT * FROM x;
PRAGMA x;
WITH RECURSIVE x AS (SELECT 1 AS x UNION SELECT x.x + x.x + x.x AS x FROM x AS x, x AS x, x AS x WHERE x.x < 100) SELECT * FROM x ORDER BY 1;
WITH RECURSIVE x AS (SELECT 1 AS x UNION SELECT CAST((x.x + x.x + x.x) AS INT128) AS x FROM x AS x, x AS x, x AS x WHERE x.x < 100) SELECT * FROM x ORDER BY 1;
CREATE TABLE x AS SELECT * FROM x AS x;
WITH RECURSIVE x AS (SELECT 1 AS x UNION SELECT SUM(x) AS x FROM x, x WHERE x < 1000000) SELECT * FROM x ORDER BY 1;
WITH RECURSIVE x AS (SELECT 1 AS x UNION SELECT SUM(x) AS x FROM x, x WHERE x < 1000000 AND x.x = x.x) SELECT * FROM x ORDER BY 1;
WITH RECURSIVE x AS (SELECT 1 AS x UNION SELECT SUM(x) FROM (SELECT SUM(x) FROM x) AS x, x WHERE x < 1000) SELECT * FROM x ORDER BY 1;
WITH RECURSIVE x AS (SELECT 1 AS x UNION SELECT (SELECT x + 1 FROM x) AS x FROM x WHERE x < 5) SELECT * FROM x ORDER BY 1;
WITH RECURSIVE x AS (SELECT 1 AS x UNION SELECT (SELECT x.x + x.x FROM x AS x LIMIT 1) AS x FROM x WHERE x < 10) SELECT * FROM x ORDER BY 1;
WITH RECURSIVE x AS (SELECT * FROM (VALUES ('53..7....6..195....98....6.8...6...34..8.3..17...2...6.6....28....419..5....8..79')) AS x), x AS (SELECT CAST(x + 1 AS TEXT), CAST(x AS INT) + 1 FROM x AS x), x AS (SELECT x, STRPOS(x, '.') FROM x UNION ALL SELECT SUBSTRING(x, 1, CAST(x AS INT) - 1) || x || SUBSTRING(x, CAST(x AS INT) + 1), STRPOS(SUBSTRING(x, 1, CAST(x AS INT) - 1) || x || SUBSTRING(x, CAST(x AS INT) + 1), '.') FROM x, x AS x WHERE CAST(x AS INT) > 0 AND NOT EXISTS(SELECT 1 FROM x AS x WHERE x.x = SUBSTRING(x, ((CAST(x AS INT) - 1) // 9) * 9 + x, 1) OR x.x = SUBSTRING(x, ((CAST(x AS INT) - 1) % 9) + (x - 1) * 9 + 1, 1) OR x.x = SUBSTRING(x, (((CAST(x AS INT) - 1) // 3) % 3) * 3 + ((CAST(x AS INT) - 1) // 27) * 27 + x + ((x - 1) // 3) * 6, 1))) SELECT x FROM x WHERE CAST(x AS INT) = 0;
PRAGMA x;
CREATE TABLE x (x INT, x TEXT, x INT);
INSERT INTO x VALUES (7, 'Music', 9), (8, 'Movies', 9), (9, 'Art', NULL);
WITH RECURSIVE x AS (SELECT x, x, x AS x, NULL AS x /* this should be '' for correct behaviour */ FROM x WHERE x IS NULL UNION ALL SELECT x.x, x.x, x.x || ' <- ' || x.x, x.x AS x FROM x, x WHERE x.x = x.x) SELECT x, x, x FROM x;
PRAGMA x;
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
SELECT * FROM x.x;
WITH RECURSIVE x AS (SELECT 1 UNION SELECT x.x + 1 FROM x AS x, x.x AS x WHERE x.x < 2) SELECT * FROM x;
WITH RECURSIVE x AS (SELECT 1, NULL UNION SELECT x.x + 1, x.x FROM x AS x, (SELECT * FROM x.x) AS x WHERE x.x < 2) SELECT * FROM x;
WITH RECURSIVE x AS (SELECT 1, NULL UNION SELECT x.x + 1, x.x FROM x AS x, (SELECT * FROM x.x) AS x WHERE x.x < 2) SELECT * FROM x;
WITH RECURSIVE x AS (SELECT 1, NULL UNION SELECT x.x + 1, x.x FROM x AS x, (SELECT * FROM x.x) AS x WHERE x.x < 2) SELECT * FROM x;
WITH RECURSIVE x AS (SELECT 1 UNION SELECT x.x + 1 FROM x AS x, (SELECT * FROM x.x) AS x WHERE x.x < 2) SELECT * FROM x;
WITH RECURSIVE x AS (SELECT 1 UNION SELECT x.x + 1 FROM x AS x, (SELECT * FROM x.x) AS x WHERE x.x < 2) SELECT * FROM x;
WITH RECURSIVE x AS (SELECT 1 UNION SELECT x.x + 1 FROM x AS x, (SELECT * FROM x.x) AS x WHERE x.x < 2) SELECT * FROM x;
CREATE OR REPLACE TABLE x (x INT);
INSERT INTO x VALUES (0), (1), (2), (3), (4), (5), (6);
CREATE OR REPLACE TABLE x (x INT, x INT);
INSERT INTO x VALUES (0, 4), (4, 0), (0, 3), (3, 0), (1, 4), (4, 1), (3, 4), (4, 3), (2, 5), (5, 2);
INSERT INTO x VALUES (0, 4), (4, 0), (0, 3), (3, 0), (1, 4), (4, 1), (3, 4), (4, 3), (2, 5), (5, 2);
CREATE OR REPLACE TABLE x (x TEXT /* source node */, x TEXT /* target node */, x INT /* edge weight */, PRIMARY KEY (x, x));
INSERT INTO x (x, x, x) VALUES ('v0', 'v1', 9), ('v0', 'v2', 3), ('v1', 'v2', 6), ('v1', 'v4', 2), ('v2', 'v1', 2), ('v2', 'v3', 1), ('v3', 'v2', 2), ('v3', 'v4', 2);
DROP TABLE x;
CREATE OR REPLACE VIEW x (x) AS SELECT x.x FROM x AS x UNION SELECT x.x FROM x AS x;
CREATE OR REPLACE VIEW x (x) AS SELECT x.x FROM x AS x UNION SELECT x.x FROM x AS x;
CREATE OR REPLACE VIEW x (x) AS SELECT x.x FROM x AS x UNION SELECT x.x FROM x AS x;
CREATE OR REPLACE VIEW x (x) AS SELECT x.x FROM x AS x UNION SELECT x.x FROM x AS x;
CREATE OR REPLACE VIEW x (x) AS SELECT x.x FROM x AS x UNION SELECT x.x FROM x AS x;
CREATE OR REPLACE VIEW x (x) AS SELECT x.x FROM x AS x UNION SELECT x.x FROM x AS x;
CREATE OR REPLACE VIEW x (x) AS SELECT x.x FROM x AS x UNION SELECT x.x FROM x AS x;
CREATE OR REPLACE VIEW x (x) AS SELECT x.x FROM x AS x UNION SELECT x.x FROM x AS x;
CREATE OR REPLACE VIEW x (x) AS SELECT x.x FROM x AS x UNION SELECT x.x FROM x AS x;
CREATE OR REPLACE VIEW x (x) AS SELECT x.x FROM x AS x UNION SELECT x.x FROM x AS x;
CREATE OR REPLACE VIEW x (x) AS SELECT x.x FROM x AS x UNION SELECT x.x FROM x AS x;
CREATE OR REPLACE VIEW x (x) AS SELECT x.x FROM x AS x UNION SELECT x.x FROM x AS x;
CREATE OR REPLACE VIEW x (x) AS SELECT x.x FROM x AS x UNION SELECT x.x FROM x AS x;
CREATE OR REPLACE VIEW x (x) AS SELECT x.x FROM x AS x UNION SELECT x.x FROM x AS x;
CREATE OR REPLACE VIEW x (x) AS SELECT x.x FROM x AS x UNION SELECT x.x FROM x AS x;
CREATE OR REPLACE VIEW x (x) AS SELECT x.x FROM x AS x UNION SELECT x.x FROM x AS x;
CREATE OR REPLACE VIEW x (x) AS SELECT x.x FROM x AS x UNION SELECT x.x FROM x AS x;
PRAGMA x;
WITH RECURSIVE x AS (SELECT * FROM (VALUES (1, 1, 2), (2, 2, 4), (3, 1, 4), (4, 2, -1), (5, 1, 2), (6, 2, 7), (7, 1, -1)) AS x), x AS (SELECT * FROM (VALUES (1, 1, 2), (2, 2, 4), (3, 1, 4), (4, 2, -1), (5, 1, 2), (6, 2, 7), (7, 1, -1)) AS x), x AS (SELECT * FROM x UNION ALL SELECT x, x + 2, x FROM x) SELECT * FROM x ORDER BY x, x, x;
WITH RECURSIVE x AS (SELECT * FROM (VALUES (1, 1, 2), (2, 2, 4), (3, 1, 4), (4, 2, -1), (5, 1, 2), (6, 2, 7), (7, 1, -1)) AS x), x AS (SELECT * FROM (VALUES (1, 1, 2), (2, 2, 4), (3, 1, 4), (4, 2, -1), (5, 1, 2), (6, 2, 7), (7, 1, -1)) AS x) SELECT * FROM x UNION ALL SELECT x, x + 2, x FROM x ORDER BY x, x, x;
WITH x AS (SELECT * FROM (VALUES (1, 1, 2), (2, 2, 4), (3, 1, 4), (4, 2, -1), (5, 1, 2), (6, 2, 7), (7, 1, -1)) AS x), x AS (SELECT * FROM (VALUES (1, 1, 2), (2, 2, 4), (3, 1, 4), (4, 2, -1), (5, 1, 2), (6, 2, 7), (7, 1, -1)) AS x), x AS (SELECT * FROM x UNION ALL SELECT x, x + 2, x FROM x) SELECT * FROM x ORDER BY x, x, x;
CREATE VIEW x AS WITH RECURSIVE x AS (SELECT * FROM (VALUES (1, 1, 2), (2, 2, 4), (3, 1, 4), (4, 2, -1), (5, 1, 2), (6, 2, 7), (7, 1, -1)) AS x), x AS (SELECT * FROM (VALUES (1, 1, 2), (2, 2, 4), (3, 1, 4), (4, 2, -1), (5, 1, 2), (6, 2, 7), (7, 1, -1)) AS x) SELECT * FROM x UNION ALL SELECT x, x + 2, x FROM x;
SELECT * FROM x;
PRAGMA x;
WITH x AS (SELECT * FROM (VALUES (1), (2), (3)) AS x) SELECT * FROM x LIMIT 0 OFFSET 1;
PRAGMA x;
SELECT x, x FROM x AS x, LATERAL (WITH RECURSIVE x AS (SELECT x.x UNION ALL SELECT x + 1 FROM x WHERE x < 3) SELECT * FROM x) AS x ORDER BY x, x;
SELECT x, x FROM x AS x, LATERAL (WITH RECURSIVE x AS (SELECT 1 UNION ALL SELECT x + x.x FROM x WHERE x < 3) SELECT * FROM x) AS x ORDER BY x, x;
SELECT x, x FROM x AS x, LATERAL (WITH RECURSIVE x AS (SELECT x.x UNION ALL SELECT x + x.x FROM x WHERE x < 3) SELECT * FROM x) AS x ORDER BY x, x;
SELECT x, x FROM x AS x, LATERAL (WITH RECURSIVE x AS (SELECT x.x UNION ALL SELECT x.x + x.x + x.x FROM x AS x, x AS x WHERE x.x < 3) SELECT * FROM x) AS x ORDER BY x, x;
SELECT x, x, (WITH RECURSIVE x AS (SELECT x + x UNION ALL SELECT x + 1 FROM x WHERE x < 3) SELECT SUM(x) FROM x) AS x FROM x AS x, x AS x ORDER BY ALL;
SELECT x, x, (WITH RECURSIVE x AS (SELECT x + x UNION ALL SELECT x + 1 FROM (WITH RECURSIVE x AS (SELECT x.x FROM x UNION ALL SELECT x.x + (x + x) / 2 FROM x WHERE x.x < 3) SELECT * FROM x) AS x WHERE x < 5) SELECT SUM(x) FROM x) AS x FROM x AS x, x AS x ORDER BY ALL;
CREATE TABLE x AS SELECT * FROM x AS x;
SELECT x.* FROM (VALUES (1000000)) AS x, LATERAL (WITH RECURSIVE x AS (SELECT 1 AS x UNION SELECT SUM(x) AS x FROM x, x WHERE x < x) SELECT * FROM x) AS x ORDER BY 1;
SELECT x.* FROM (VALUES (10)) AS x, LATERAL (WITH RECURSIVE x AS (SELECT 1 AS x UNION SELECT (SELECT x.x + x.x FROM x AS x LIMIT 1) AS x FROM x WHERE x < x) SELECT * FROM x) AS x ORDER BY 1;
SELECT x.* FROM (VALUES (1)) AS x, LATERAL (WITH RECURSIVE x AS (SELECT x, x, 0 FROM (WITH RECURSIVE x AS (SELECT x UNION ALL SELECT x + x FROM x WHERE x < 10) SELECT * FROM x) AS x UNION ALL (SELECT x, CASE WHEN x % 2 = x THEN x * 3 + x ELSE x / 2 END, x + x FROM x, (WITH RECURSIVE x AS (SELECT x UNION ALL SELECT x + x FROM x WHERE x < x) SELECT * FROM x) AS x WHERE x <> x)) SELECT * FROM x WHERE x = x ORDER BY x) AS x;
SELECT x, x FROM x AS x, LATERAL (WITH RECURSIVE x AS (SELECT x.x UNION SELECT x + 1 FROM x WHERE x < 3) SELECT * FROM x) AS x ORDER BY x, x;
SELECT x, x FROM x AS x, LATERAL (WITH RECURSIVE x AS (SELECT 1 UNION SELECT x + x.x FROM x WHERE x < 3) SELECT * FROM x) AS x ORDER BY x, x;
SELECT x, x FROM x AS x, LATERAL (WITH RECURSIVE x AS (SELECT x.x UNION SELECT x + x.x FROM x WHERE x < 3) SELECT * FROM x) AS x ORDER BY x, x;
SELECT x, x FROM x AS x, LATERAL (WITH RECURSIVE x AS (SELECT x.x UNION SELECT x.x + x.x + x.x FROM x AS x, x AS x WHERE x.x < 3) SELECT * FROM x) AS x ORDER BY x, x;
SELECT x, x, (WITH RECURSIVE x AS (SELECT x + x UNION SELECT x + 1 FROM x WHERE x < 3) SELECT SUM(x) FROM x) AS x FROM x AS x, x AS x ORDER BY ALL;
SELECT x, x, (WITH RECURSIVE x AS (SELECT x + x UNION SELECT x + 1 FROM (WITH RECURSIVE x AS (SELECT x.x FROM x UNION SELECT x.x + (x + x) / 2 FROM x WHERE x.x < 3) SELECT * FROM x) AS x WHERE x < 5) SELECT SUM(x) FROM x) AS x FROM x AS x, x AS x ORDER BY ALL;
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (42);
WITH x AS (SELECT x AS x FROM x) SELECT * FROM x;
WITH x AS (SELECT x AS x FROM x) SELECT x FROM x AS x;
WITH x AS (SELECT x AS x FROM x) SELECT x FROM x;
WITH x AS (SELECT x AS x FROM x) SELECT x FROM x AS x;
WITH x AS (SELECT x AS x FROM x), x AS (SELECT x.x AS x FROM x AS x), x AS (SELECT x.x + 1 AS x FROM x AS x) SELECT * FROM x, x;
WITH x AS (SELECT x AS x FROM x), x AS (SELECT x.x AS x FROM x AS x), x AS (SELECT x.x + 1 AS x FROM x AS x) SELECT * FROM x UNION ALL SELECT * FROM x;
WITH x AS (SELECT 42), x AS (SELECT 42) SELECT * FROM x;
WITH x AS (SELECT x AS x FROM x) SELECT * FROM x AS x, x AS x;
WITH x AS (SELECT x AS x FROM x) SELECT * FROM x WHERE x = (SELECT MAX(x) FROM x AS x);
WITH x AS (SELECT 42 AS x, 84 AS x) SELECT x, x FROM x AS x;
CREATE VIEW x AS (WITH x AS (SELECT x AS x FROM x) SELECT * FROM x);
SELECT * FROM x;
WITH x AS (SELECT * FROM x) SELECT * FROM x;
CREATE VIEW x AS (WITH x AS (SELECT x AS x FROM x), x AS (SELECT x.x + 1 AS x FROM x AS x) SELECT * FROM x);
SELECT * FROM x;
SELECT 1 UNION ALL (WITH x AS (SELECT 42) SELECT * FROM x);
WITH RECURSIVE x AS (SELECT 1 UNION ALL (WITH x AS (SELECT * FROM x) SELECT x + 1 FROM x WHERE FALSE)) SELECT MAX(x) FROM x;
WITH x AS (SELECT 1) SELECT x AS x, x AS x FROM x WHERE x > 0;
WITH x AS (SELECT 1) SELECT x AS x, x AS x FROM x WHERE x > 0;
WITH x AS (SELECT 1) SELECT x AS x, x AS x FROM x WHERE x > 0;
WITH RECURSIVE x AS MATERIALIZED ((WITH x AS (SELECT 5), x AS (SELECT * FROM x AS x UNION SELECT 7 FROM x AS x) SELECT * FROM x)) SELECT * FROM x ORDER BY x;
WITH RECURSIVE x AS MATERIALIZED ((WITH x AS (SELECT 5) SELECT * FROM x AS x UNION SELECT 7)) SELECT * FROM x ORDER BY x;
WITH x AS (SELECT x.x AS x FROM x AS x), x AS (SELECT x AS x FROM x), x AS (SELECT x.x + 1 AS x FROM x AS x) SELECT * FROM x UNION ALL SELECT * FROM x;
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (42);
WITH x AS (SELECT x AS x FROM x) SELECT * FROM x;
WITH x AS (WITH x AS (SELECT x AS x FROM x) SELECT x FROM x) SELECT x FROM x AS x;
WITH x AS (WITH x AS (SELECT x AS x FROM x) SELECT x FROM x) SELECT x FROM x;
WITH x AS (WITH x AS (SELECT x AS x FROM x) SELECT x FROM x), x AS (WITH x AS (SELECT x.x + 1 AS x FROM x AS x) SELECT x FROM x) SELECT * FROM x, x;
WITH x AS (SELECT 42), x AS (SELECT 42) SELECT * FROM x;
WITH x AS (SELECT x AS x FROM x) SELECT * FROM (WITH x AS (SELECT MAX(x) AS x FROM x) SELECT * FROM x) AS x;
WITH x AS (SELECT x AS x FROM x) SELECT * FROM x WHERE x = (WITH x AS (SELECT MAX(x) AS x FROM x) SELECT x FROM x);
WITH x AS (SELECT x AS x FROM x) SELECT * FROM x WHERE x = (WITH x AS (SELECT MAX(x) AS x FROM x) SELECT x FROM x);
WITH x AS (SELECT * FROM x) SELECT * FROM x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1729);
CREATE VIEW x AS (WITH x AS (SELECT * FROM x) SELECT * FROM x);
WITH x AS (SELECT * FROM x) SELECT * FROM x;
PRAGMA x;
CREATE OR REPLACE TABLE x (x INT);
CREATE OR REPLACE TABLE x (x INT);
INSERT INTO x VALUES (1);
INSERT INTO x VALUES (1);
WITH x AS (SELECT * FROM x.x WHERE x >= (SELECT MAX(x) FROM x.x)), x AS (SELECT * FROM x) SELECT * FROM x;
WITH x AS (SELECT * FROM x WHERE x >= (SELECT MAX(x) FROM x)), x AS (SELECT * FROM x) SELECT * FROM x;
PRAGMA x;
WITH RECURSIVE x AS (SELECT 1 UNION ALL SELECT x + 1 FROM x WHERE x < 4), x AS (SELECT * FROM x UNION ALL SELECT x.x * 2 + x.x FROM x, x WHERE x.x < 32) SELECT * FROM x ORDER BY x LIMIT 5;
WITH RECURSIVE x AS (SELECT x, x, 0 FROM (WITH RECURSIVE x AS (SELECT 1 UNION ALL SELECT x + 1 FROM x WHERE x < 10) SELECT * FROM x) AS x UNION ALL (SELECT x, CASE WHEN x % 2 = 1 THEN x * 3 + x ELSE x / 2 END, x + x FROM x, (WITH RECURSIVE x AS (SELECT 1 UNION ALL SELECT x + 1 FROM x WHERE x < 1) SELECT * FROM x) AS x WHERE x <> 1)) SELECT * FROM x WHERE x = 1 ORDER BY x;
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3);
WITH RECURSIVE x AS (SELECT 1 UNION ALL SELECT x + 1 FROM (SELECT x.x + 1 FROM x AS x FULL OUTER JOIN x ON x.x = x) AS x WHERE x < 10) SELECT * FROM x AS x RIGHT OUTER JOIN x ON x.x = x ORDER BY x, x;
PRAGMA x;
CREATE TABLE x (x INT PRIMARY KEY, x TEXT, x TEXT, x INT, x DATE, x DOUBLE, x DOUBLE, x INT);
INSERT INTO x VALUES (7839, 'KING', 'PRESIDENT', NULL, CAST('1981-11-17' AS DATE), 5000.00, NULL, 10);
WITH RECURSIVE x AS (SELECT x, x FROM x WHERE x = 7566 UNION ALL SELECT x.x, x.x FROM x JOIN x ON x.x = x.x) SELECT * FROM x;
WITH RECURSIVE x AS (SELECT x, x, 0 AS x FROM x WHERE x = 7566 UNION ALL SELECT x.x, x.x, x.x + 1 FROM x JOIN x ON x.x = x.x) SELECT * FROM x;
WITH RECURSIVE x AS (SELECT x, x, x AS x FROM x WHERE x = 7566 UNION ALL SELECT x.x, x.x, x.x || ' -> ' || x.x FROM x JOIN x ON x.x = x.x) SELECT * FROM x;
CREATE VIEW x AS (WITH RECURSIVE x AS (SELECT x, x, x AS x FROM x WHERE x = 7566 UNION ALL SELECT x.x, x.x, x.x || ' -> ' || x.x FROM x JOIN x ON x.x = x.x) SELECT * FROM x);
SELECT * FROM x;
WITH RECURSIVE x AS (SELECT 1 AS x, CAST(1 AS BIGINT) AS "x", CAST(1 AS BIGINT) AS "x" UNION ALL SELECT x + 1, "x", "x" + "x" FROM x) SELECT x, "x" FROM x LIMIT 20;
PRAGMA x;
WITH RECURSIVE x AS (SELECT 1 AS x UNION SELECT x + 1 FROM x WHERE x < 3) SELECT * FROM x ORDER BY x;
WITH RECURSIVE x AS (SELECT 1 UNION SELECT x + 1 FROM x WHERE x < 3) SELECT * FROM x ORDER BY x;
WITH RECURSIVE x AS (SELECT 1 UNION SELECT x + 1 FROM x WHERE x < 3) SELECT x FROM x AS x ORDER BY x;
WITH RECURSIVE x AS (SELECT 1 UNION SELECT x + 1 FROM x AS x WHERE x < 3) SELECT x FROM x AS x ORDER BY x;
WITH RECURSIVE x AS (SELECT 1 AS x UNION SELECT x FROM x) SELECT * FROM x;
WITH RECURSIVE x AS (SELECT 1 AS x UNION SELECT x + 1 FROM x AS x WHERE x.x < 3) SELECT * FROM x ORDER BY x;
WITH RECURSIVE x AS (SELECT 1 AS x UNION SELECT x.x + x.x FROM x AS x, x AS x WHERE x.x < 3) SELECT * FROM x ORDER BY x;
WITH RECURSIVE x AS (SELECT 1 AS x, 'hello' AS x UNION SELECT x + 1, x || '-' || 'hello' FROM x WHERE x < 3) SELECT * FROM x ORDER BY x;
WITH RECURSIVE x AS (SELECT 1 AS x UNION SELECT x + 1 FROM x WHERE x < 3) SELECT MIN(x.x) FROM x AS x, x AS x;
WITH RECURSIVE x AS (SELECT 1 AS x UNION SELECT x + (SELECT 1) FROM x WHERE x < 3) SELECT * FROM x ORDER BY x;
WITH RECURSIVE x AS (SELECT 1 AS x UNION ALL SELECT * FROM (SELECT x FROM x WHERE x < 5) AS x JOIN (SELECT 1) AS x USING (x)) SELECT * FROM x LIMIT 3;
WITH RECURSIVE x AS (SELECT 1 AS x UNION ALL SELECT * FROM (SELECT 1) AS x JOIN (SELECT x FROM x WHERE x < 5) AS x USING (x)) SELECT * FROM x LIMIT 3;
WITH RECURSIVE x AS (SELECT 1 AS x UNION ALL SELECT * FROM (SELECT x FROM x WHERE x < 5) AS x JOIN (SELECT FIRST(x) FROM (VALUES (1)) AS x LIMIT 1) AS x USING (x)) SELECT * FROM x LIMIT 3;
WITH RECURSIVE x AS (SELECT 1 AS x UNION ALL SELECT * FROM (SELECT FIRST(x) FROM (VALUES (1)) AS x LIMIT 1) AS x JOIN (SELECT x FROM x WHERE x < 5) AS x USING (x)) SELECT * FROM x LIMIT 3;
WITH RECURSIVE x AS (SELECT 1 AS x UNION SELECT x + (SELECT 1 + x.x) FROM x WHERE x < 5) SELECT * FROM x ORDER BY x;
CREATE TABLE x AS WITH RECURSIVE x AS (SELECT 1 AS x UNION SELECT x + 1 FROM x WHERE x < 3) SELECT * FROM x;
WITH RECURSIVE x AS (SELECT (SELECT MIN(x) FROM x) AS x UNION SELECT x + 1 FROM x WHERE x < 3) SELECT * FROM x ORDER BY x;
WITH RECURSIVE x AS (SELECT 1 AS x UNION SELECT SUM(x + 1) FROM x WHERE x < 3) SELECT * FROM x ORDER BY 1;
WITH RECURSIVE x AS (SELECT 1 AS x UNION SELECT SUM(x + 1) FROM x WHERE x < 3 ORDER BY x) SELECT * FROM x;
WITH RECURSIVE x AS (SELECT 1 AS x UNION SELECT SUM(x + 1) FROM x WHERE x < 3 LIMIT 1) SELECT * FROM x;
WITH RECURSIVE x AS (SELECT 1 AS x UNION SELECT SUM(x + 1) FROM x WHERE x < 3 OFFSET 1) SELECT * FROM x;
WITH RECURSIVE x AS (SELECT 1 AS x UNION SELECT SUM(x + 1) FROM x WHERE x < 3 LIMIT 1 OFFSET 1) SELECT * FROM x;
CREATE VIEW x AS (WITH RECURSIVE x AS (SELECT 1 UNION SELECT x + 1 FROM x WHERE x < 3) SELECT * FROM x ORDER BY x);
SELECT * FROM x;
PRAGMA x;
WITH RECURSIVE x AS (SELECT 1 AS x UNION ALL SELECT x + 1 FROM x WHERE x < 3) SELECT * FROM x;
WITH RECURSIVE x AS (SELECT 1 AS x UNION ALL SELECT x + 1 FROM x AS x WHERE x.x < 3) SELECT * FROM x;
WITH RECURSIVE x AS (SELECT 1 AS x UNION ALL SELECT x.x + x.x FROM x AS x, x AS x WHERE x.x < 3) SELECT * FROM x;
WITH RECURSIVE x AS (SELECT 1 AS x, 'hello' AS x UNION ALL SELECT x + 1, x || '-' || 'hello' FROM x WHERE x < 3) SELECT * FROM x;
WITH RECURSIVE x AS (SELECT 1 AS x UNION ALL SELECT x + 1 FROM x WHERE x < 3) SELECT MIN(x.x) FROM x AS x, x AS x;
WITH RECURSIVE x AS (SELECT 1 AS x UNION ALL SELECT x + (SELECT 1) FROM x WHERE x < 3) SELECT * FROM x;
CREATE TABLE x AS WITH RECURSIVE x AS (SELECT 1 AS x UNION ALL SELECT x + 1 FROM x WHERE x < 3) SELECT * FROM x;
WITH RECURSIVE x AS (SELECT (SELECT MIN(x) FROM x) AS x UNION ALL SELECT x + 1 FROM x WHERE x < 3) SELECT * FROM x;
WITH RECURSIVE x AS (SELECT 1 AS x UNION ALL SELECT SUM(x + 1) AS x FROM x WHERE x < 3 GROUP BY x) SELECT * FROM x;
WITH RECURSIVE x AS (SELECT 1 AS x UNION ALL SELECT SUM(x + 1) AS x FROM x WHERE x < 3) SELECT * FROM (SELECT * FROM x LIMIT 10) AS x ORDER BY x;
WITH RECURSIVE x AS (SELECT 1 AS x UNION ALL SELECT x FROM x, x AS x WHERE x = x + 1) SELECT * FROM x;
WITH RECURSIVE x AS (SELECT 1 AS x UNION ALL SELECT x + 1 FROM x WHERE x < 3 ORDER BY x) SELECT * FROM x;
WITH RECURSIVE x AS (SELECT 1 AS x UNION ALL SELECT x + 1 FROM x WHERE x < 3 LIMIT 1) SELECT * FROM x;
WITH RECURSIVE x AS (SELECT 1 AS x UNION ALL SELECT x + 1 FROM x WHERE x < 3 OFFSET 1) SELECT * FROM x;
WITH RECURSIVE x AS (SELECT 1 AS x UNION ALL SELECT x + 1 FROM x WHERE x < 3 LIMIT 1 OFFSET 1) SELECT * FROM x;
CREATE TABLE x (x TEXT, x TIMESTAMP, x INTERVAL);
CREATE TABLE x (x TEXT, x TIMESTAMP, x TIMESTAMP);
PRAGMA x;
PRAGMA x = 'OPTIMIZED_ONLY';
WITH x AS MATERIALIZED (SELECT * FROM x), x AS MATERIALIZED (SELECT * FROM x WHERE x < 8) SELECT * FROM x WHERE x % 3 = 1 ORDER BY x;
CREATE TABLE x AS SELECT * FROM x AS x;
WITH RECURSIVE x AS MATERIALIZED (SELECT 2, 3 UNION SELECT 3, 3 UNION SELECT 4, 3), x AS MATERIALIZED (SELECT 1 AS x, x, x FROM x /* generation 1 is initial board setup */ UNION ALL SELECT x + 1, x, x /* generation n+1 */ FROM (SELECT x, x + x AS x, x + x AS x, MAX(x) OVER (PARTITION BY x + 1, x + x, x + x) AS x FROM x, (SELECT x.x AS x, x.x AS x, CASE WHEN x.x = 0 AND x.x = 0 THEN 1 ELSE 0 END AS x FROM x AS x, x AS x /* join 2 row generators to get 9 pairs */) AS x WHERE x < 100) AS x GROUP BY x + 1, x, x, x /* from all impacts back to cells */ HAVING (x = 1 AND COUNT(*) < 5 AND COUNT(*) > 2) OR COUNT(*) = 3 /* decide if cell is alive */) SELECT * FROM x WHERE x = 4 ORDER BY x, x, x;
WITH RECURSIVE x AS MATERIALIZED (SELECT 2, 3 UNION SELECT 3, 3 UNION SELECT 4, 3), x AS MATERIALIZED (SELECT 1 AS x, x, x FROM x /* generation 1 is initial board setup */ UNION ALL SELECT x + 1, x, x /* generation n+1 */ FROM (SELECT x, x + x AS x, x + x AS x, MAX(x) OVER (PARTITION BY x + 1, x + x, x + x) AS x FROM x, (SELECT x.x AS x, x.x AS x, CASE WHEN x.x = 0 AND x.x = 0 THEN 1 ELSE 0 END AS x FROM x AS x, x AS x /* join 2 row generators to get 9 pairs */) AS x WHERE x < 100) AS x GROUP BY x + 1, x, x, x /* from all impacts back to cells */ HAVING (x = 1 AND COUNT(*) < 5 AND COUNT(*) > 2) OR COUNT(*) = 3 /* decide if cell is alive */) SELECT * FROM x WHERE x = 4 ORDER BY x, x, x;
WITH RECURSIVE x AS MATERIALIZED (SELECT 42) SELECT * FROM x;
WITH RECURSIVE x AS MATERIALIZED (SELECT 1 AS x INTERSECT SELECT x + 1 FROM x WHERE x < 3) SELECT * FROM x ORDER BY x;
WITH RECURSIVE x AS MATERIALIZED (SELECT 1 AS x EXCEPT SELECT x + 1 FROM x WHERE x < 3) SELECT * FROM x ORDER BY x;
PRAGMA x;
CREATE TABLE x (x TINYINT);
INSERT INTO x VALUES (1);
WITH RECURSIVE x AS MATERIALIZED (SELECT 1, [1, 2, 3, 4, 5, 6] UNION ALL SELECT x + 1, x[$loc] FROM x, x WHERE x < 10) SELECT * FROM x;
WITH RECURSIVE x AS MATERIALIZED (SELECT 1, [1, 2, 3, 4, 5, 6] UNION ALL SELECT x + 1, x FROM x, x WHERE x < 10 AND x = x) SELECT * FROM x;
WITH RECURSIVE x AS MATERIALIZED (SELECT 1, [1, 2, 3, 4, 5, 6] UNION ALL SELECT x + 1, x[$loc] FROM x, x WHERE x < 10 AND x = x) SELECT * FROM x;
WITH RECURSIVE x AS MATERIALIZED (SELECT [1, 2, 3, 4, 5, 6] UNION ALL SELECT x[x[1] + 1 : 6] FROM x WHERE x[1] < 6) SELECT * FROM x;
PRAGMA x;
WITH RECURSIVE x AS MATERIALIZED (SELECT 1 AS x UNION SELECT x.x + x.x + x.x AS x FROM x AS x, x AS x, x AS x WHERE x.x < 100) SELECT * FROM x ORDER BY 1;
WITH RECURSIVE x AS MATERIALIZED (SELECT 1 AS x UNION SELECT CAST((x.x + x.x + x.x) AS INT128) AS x FROM x AS x, x AS x, x AS x WHERE x.x < 100) SELECT * FROM x ORDER BY 1;
CREATE TABLE x AS SELECT * FROM x AS x;
WITH RECURSIVE x AS MATERIALIZED (SELECT 1 AS x UNION SELECT SUM(x) AS x FROM x, x WHERE x < 1000000) SELECT * FROM x ORDER BY 1;
WITH RECURSIVE x AS MATERIALIZED (SELECT 1 AS x UNION SELECT SUM(x) AS x FROM x, x WHERE x < 1000000 AND x.x = x.x) SELECT * FROM x ORDER BY 1;
WITH RECURSIVE x AS MATERIALIZED (SELECT 1 AS x UNION SELECT SUM(x) FROM (SELECT SUM(x) FROM x) AS x, x WHERE x < 1000) SELECT * FROM x ORDER BY 1;
WITH RECURSIVE x AS MATERIALIZED (SELECT 1 AS x UNION SELECT (SELECT x + 1 FROM x) AS x FROM x WHERE x < 5) SELECT * FROM x ORDER BY 1;
WITH RECURSIVE x AS MATERIALIZED (SELECT 1 AS x UNION SELECT (SELECT x.x + x.x FROM x AS x LIMIT 1) AS x FROM x WHERE x < 10) SELECT * FROM x ORDER BY 1;
WITH RECURSIVE x AS MATERIALIZED (SELECT * FROM (VALUES ('53..7....6..195....98....6.8...6...34..8.3..17...2...6.6....28....419..5....8..79')) AS x), x AS MATERIALIZED (SELECT CAST(x + 1 AS TEXT), CAST(x AS INT) + 1 FROM x AS x), x AS MATERIALIZED (SELECT x, STRPOS(x, '.') FROM x UNION ALL SELECT SUBSTRING(x, 1, CAST(x AS INT) - 1) || x || SUBSTRING(x, CAST(x AS INT) + 1), STRPOS(SUBSTRING(x, 1, CAST(x AS INT) - 1) || x || SUBSTRING(x, CAST(x AS INT) + 1), '.') FROM x, x AS x WHERE CAST(x AS INT) > 0 AND NOT EXISTS(SELECT 1 FROM x AS x WHERE x.x = SUBSTRING(x, ((CAST(x AS INT) - 1) // 9) * 9 + x, 1) OR x.x = SUBSTRING(x, ((CAST(x AS INT) - 1) % 9) + (x - 1) * 9 + 1, 1) OR x.x = SUBSTRING(x, (((CAST(x AS INT) - 1) // 3) % 3) * 3 + ((CAST(x AS INT) - 1) // 27) * 27 + x + ((x - 1) // 3) * 6, 1))) SELECT x FROM x WHERE CAST(x AS INT) = 0;
PRAGMA x;
CREATE TABLE x (x INT, x TEXT, x INT);
INSERT INTO x VALUES (7, 'Music', 9), (8, 'Movies', 9), (9, 'Art', NULL);
WITH RECURSIVE x AS MATERIALIZED (SELECT x, x, x AS x, NULL AS x /* this should be '' for correct behaviour */ FROM x WHERE x IS NULL UNION ALL SELECT x.x, x.x, x.x || ' <- ' || x.x, x.x AS x FROM x, x WHERE x.x = x.x) SELECT x, x, x FROM x;
PRAGMA x;
WITH RECURSIVE x AS MATERIALIZED (SELECT * FROM (VALUES (1, 1, 2), (2, 2, 4), (3, 1, 4), (4, 2, -1), (5, 1, 2), (6, 2, 7), (7, 1, -1)) AS x), x AS MATERIALIZED (SELECT * FROM (VALUES (1, 1, 2), (2, 2, 4), (3, 1, 4), (4, 2, -1), (5, 1, 2), (6, 2, 7), (7, 1, -1)) AS x), x AS MATERIALIZED (SELECT * FROM x UNION ALL SELECT x, x + 2, x FROM x) SELECT * FROM x ORDER BY x, x, x;
WITH RECURSIVE x AS MATERIALIZED (SELECT * FROM (VALUES (1, 1, 2), (2, 2, 4), (3, 1, 4), (4, 2, -1), (5, 1, 2), (6, 2, 7), (7, 1, -1)) AS x), x AS MATERIALIZED (SELECT * FROM (VALUES (1, 1, 2), (2, 2, 4), (3, 1, 4), (4, 2, -1), (5, 1, 2), (6, 2, 7), (7, 1, -1)) AS x) SELECT * FROM x UNION ALL SELECT x, x + 2, x FROM x ORDER BY x, x, x;
WITH x AS MATERIALIZED (SELECT * FROM (VALUES (1, 1, 2), (2, 2, 4), (3, 1, 4), (4, 2, -1), (5, 1, 2), (6, 2, 7), (7, 1, -1)) AS x), x AS MATERIALIZED (SELECT * FROM (VALUES (1, 1, 2), (2, 2, 4), (3, 1, 4), (4, 2, -1), (5, 1, 2), (6, 2, 7), (7, 1, -1)) AS x), x AS MATERIALIZED (SELECT * FROM x UNION ALL SELECT x, x + 2, x FROM x) SELECT * FROM x ORDER BY x, x, x;
CREATE VIEW x AS WITH RECURSIVE x AS MATERIALIZED (SELECT * FROM (VALUES (1, 1, 2), (2, 2, 4), (3, 1, 4), (4, 2, -1), (5, 1, 2), (6, 2, 7), (7, 1, -1)) AS x), x AS MATERIALIZED (SELECT * FROM (VALUES (1, 1, 2), (2, 2, 4), (3, 1, 4), (4, 2, -1), (5, 1, 2), (6, 2, 7), (7, 1, -1)) AS x) SELECT * FROM x UNION ALL SELECT x, x + 2, x FROM x;
SELECT * FROM x ORDER BY x, x, x;
PRAGMA x;
WITH x AS MATERIALIZED (SELECT * FROM (VALUES (1), (2), (3)) AS x) SELECT * FROM x LIMIT 0 OFFSET 1;
PRAGMA x;
SELECT x, x FROM x AS x, LATERAL (WITH RECURSIVE x AS MATERIALIZED (SELECT x.x UNION ALL SELECT x + 1 FROM x WHERE x < 3) SELECT * FROM x) AS x ORDER BY x, x;
SELECT x, x FROM x AS x, LATERAL (WITH RECURSIVE x AS MATERIALIZED (SELECT 1 UNION ALL SELECT x + x.x FROM x WHERE x < 3) SELECT * FROM x) AS x ORDER BY x, x;
SELECT x, x FROM x AS x, LATERAL (WITH RECURSIVE x AS MATERIALIZED (SELECT x.x UNION ALL SELECT x + x.x FROM x WHERE x < 3) SELECT * FROM x) AS x ORDER BY x, x;
SELECT x, x FROM x AS x, LATERAL (WITH RECURSIVE x AS MATERIALIZED (SELECT x.x UNION ALL SELECT x.x + x.x + x.x FROM x AS x, x AS x WHERE x.x < 3) SELECT * FROM x) AS x ORDER BY x, x;
SELECT x, x, (WITH RECURSIVE x AS MATERIALIZED (SELECT x + x UNION ALL SELECT x + 1 FROM x WHERE x < 3) SELECT SUM(x) FROM x) AS x FROM x AS x, x AS x ORDER BY ALL;
SELECT x, x, (WITH RECURSIVE x AS MATERIALIZED (SELECT x + x UNION ALL SELECT x + 1 FROM (WITH RECURSIVE x AS MATERIALIZED (SELECT x.x FROM x UNION ALL SELECT x.x + (x + x) / 2 FROM x WHERE x.x < 3) SELECT * FROM x) AS x WHERE x < 5) SELECT SUM(x) FROM x) AS x FROM x AS x, x AS x ORDER BY ALL;
SELECT x, x FROM x AS x, LATERAL (WITH RECURSIVE x AS MATERIALIZED (SELECT x.x UNION SELECT x + 1 FROM x WHERE x < 3) SELECT * FROM x) AS x ORDER BY x, x;
SELECT x, x FROM x AS x, LATERAL (WITH RECURSIVE x AS MATERIALIZED (SELECT 1 UNION SELECT x + x.x FROM x WHERE x < 3) SELECT * FROM x) AS x ORDER BY x, x;
SELECT x, x FROM x AS x, LATERAL (WITH RECURSIVE x AS MATERIALIZED (SELECT x.x UNION SELECT x + x.x FROM x WHERE x < 3) SELECT * FROM x) AS x ORDER BY x, x;
SELECT x, x FROM x AS x, LATERAL (WITH RECURSIVE x AS MATERIALIZED (SELECT x.x UNION SELECT x.x + x.x + x.x FROM x AS x, x AS x WHERE x.x < 3) SELECT * FROM x) AS x ORDER BY x, x;
SELECT x, x, (WITH RECURSIVE x AS MATERIALIZED (SELECT x + x UNION SELECT x + 1 FROM x WHERE x < 3) SELECT SUM(x) FROM x) AS x FROM x AS x, x AS x ORDER BY ALL;
SELECT x, x, (WITH RECURSIVE x AS MATERIALIZED (SELECT x + x UNION SELECT x + 1 FROM (WITH RECURSIVE x AS MATERIALIZED (SELECT x.x FROM x UNION SELECT x.x + (x + x) / 2 FROM x WHERE x.x < 3) SELECT * FROM x) AS x WHERE x < 5) SELECT SUM(x) FROM x) AS x FROM x AS x, x AS x ORDER BY ALL;
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (42);
WITH x AS MATERIALIZED (SELECT x AS x FROM x) SELECT * FROM x;
WITH x AS MATERIALIZED (WITH x AS MATERIALIZED (SELECT x AS x FROM x) SELECT x FROM x) SELECT x FROM x AS x;
WITH x AS MATERIALIZED (WITH x AS MATERIALIZED (SELECT x AS x FROM x) SELECT x FROM x) SELECT x FROM x;
WITH x AS MATERIALIZED (WITH x AS MATERIALIZED (SELECT x AS x FROM x) SELECT x FROM x), x AS MATERIALIZED (WITH x AS MATERIALIZED (SELECT x.x + 1 AS x FROM x AS x) SELECT x FROM x) SELECT * FROM x, x;
WITH x AS MATERIALIZED (SELECT 42), x AS MATERIALIZED (SELECT 42) SELECT * FROM x;
WITH x AS MATERIALIZED (SELECT x AS x FROM x) SELECT * FROM (WITH x AS MATERIALIZED (SELECT MAX(x) AS x FROM x) SELECT * FROM x) AS x;
WITH x AS MATERIALIZED (SELECT x AS x FROM x) SELECT * FROM x WHERE x = (WITH x AS MATERIALIZED (SELECT MAX(x) AS x FROM x) SELECT x FROM x);
WITH x AS MATERIALIZED (SELECT x AS x FROM x) SELECT * FROM x WHERE x = (WITH x AS (SELECT MAX(x) AS x FROM x) SELECT x FROM x);
WITH x AS MATERIALIZED (SELECT x AS x FROM x) SELECT * FROM x WHERE x = (WITH x AS MATERIALIZED (SELECT MAX(x) AS x FROM x) SELECT x FROM x);
WITH x AS MATERIALIZED (SELECT * FROM x) SELECT * FROM x;
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (42);
WITH x AS MATERIALIZED (SELECT x AS x FROM x) SELECT * FROM x;
WITH x AS MATERIALIZED (SELECT x AS x FROM x) SELECT x FROM x AS x;
WITH x AS MATERIALIZED (SELECT x AS x FROM x) SELECT x FROM x;
WITH x AS MATERIALIZED (SELECT x AS x FROM x) SELECT x FROM x AS x;
WITH x AS MATERIALIZED (SELECT x AS x FROM x), x AS MATERIALIZED (SELECT x.x AS x FROM x AS x), x AS MATERIALIZED (SELECT x.x + 1 AS x FROM x AS x) SELECT * FROM x, x;
WITH x AS MATERIALIZED (SELECT x AS x FROM x), x AS MATERIALIZED (SELECT x.x AS x FROM x AS x), x AS MATERIALIZED (SELECT x.x + 1 AS x FROM x AS x) SELECT * FROM x UNION ALL SELECT * FROM x;
WITH x AS MATERIALIZED (SELECT 42), x AS MATERIALIZED (SELECT 42) SELECT * FROM x;
WITH x AS MATERIALIZED (SELECT x.x AS x FROM x AS x), x AS MATERIALIZED (SELECT x AS x FROM x), x AS MATERIALIZED (SELECT x.x + 1 AS x FROM x AS x) SELECT * FROM x UNION ALL SELECT * FROM x;
WITH x AS MATERIALIZED (SELECT x AS x FROM x) SELECT * FROM x AS x, x AS x;
WITH x AS MATERIALIZED (SELECT x AS x FROM x) SELECT * FROM x WHERE x = (SELECT MAX(x) FROM x AS x);
WITH x AS MATERIALIZED (SELECT 42 AS x, 84 AS x) SELECT x, x FROM x AS x;
CREATE VIEW x AS (WITH x AS MATERIALIZED (SELECT x AS x FROM x) SELECT * FROM x);
SELECT * FROM x;
WITH x AS MATERIALIZED (SELECT * FROM x) SELECT * FROM x;
CREATE VIEW x AS (WITH x AS MATERIALIZED (SELECT x AS x FROM x), x AS MATERIALIZED (SELECT x.x + 1 AS x FROM x AS x) SELECT * FROM x);
SELECT * FROM x;
SELECT 1 UNION ALL (WITH x AS MATERIALIZED (SELECT 42) SELECT * FROM x);
WITH RECURSIVE x AS MATERIALIZED (SELECT 1 UNION ALL (WITH x AS (SELECT * FROM x) SELECT x + 1 FROM x WHERE FALSE)) SELECT MAX(x) FROM x;
WITH x AS MATERIALIZED (SELECT 1) SELECT x AS x, x AS x FROM x WHERE x > 0;
WITH RECURSIVE x AS (SELECT 1, CAST([] AS INT[]) UNION ALL (WITH x AS MATERIALIZED (SELECT 1) SELECT x.x, (SELECT ARRAY_AGG(x) FROM x) FROM x, LATERAL (SELECT x.x + 1) AS x WHERE x.x < 5)) SELECT * FROM x ORDER BY x;
WITH RECURSIVE x AS (SELECT 1, CAST([] AS INT[]) UNION ALL (WITH x AS MATERIALIZED (SELECT 1) SELECT x.x, (SELECT ARRAY_AGG(x) FROM x) FROM x, LATERAL (SELECT x.x + 1) AS x WHERE x.x < 5)) SELECT * FROM x ORDER BY x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1729);
CREATE VIEW x AS (WITH x AS MATERIALIZED (SELECT * FROM x) SELECT * FROM x);
WITH x AS MATERIALIZED (SELECT * FROM x) SELECT * FROM x;
PRAGMA x;
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
INSERT INTO x (x) VALUES (1);
INSERT INTO x (x) VALUES (1);
WITH x AS MATERIALIZED (SELECT x, * FROM x LEFT JOIN (SELECT x AS x FROM x) ON x.x = x) SELECT x FROM x;
PRAGMA x;
WITH x AS MATERIALIZED (SELECT 1) SELECT * FROM x;
WITH x AS MATERIALIZED (SELECT x FROM x AS x) SELECT x.x, 1 AS x FROM x AS x ORDER BY x;
WITH x AS MATERIALIZED (SELECT x FROM x AS x) SELECT x.x, x.x FROM x AS x ORDER BY x;
WITH x AS MATERIALIZED (SELECT x FROM x AS x) SELECT x.x, x.x FROM x AS x, x AS x ORDER BY x.x, x.x;
WITH x AS MATERIALIZED (SELECT 1), x AS MATERIALIZED (SELECT 2) SELECT * FROM x FULL OUTER JOIN x ON TRUE;
WITH x AS MATERIALIZED (SELECT x FROM x AS x LIMIT 4) SELECT DISTINCT x FROM x ORDER BY x DESC;
WITH x AS MATERIALIZED (SELECT x FROM x AS x LIMIT 4) SELECT DISTINCT x FROM x ORDER BY x DESC LIMIT 2;
WITH x AS MATERIALIZED (WITH x AS MATERIALIZED (SELECT 42) SELECT * FROM x) SELECT * FROM x;
WITH x AS MATERIALIZED (WITH x AS MATERIALIZED (SELECT 42) SELECT * FROM x) SELECT * FROM x;
WITH x AS MATERIALIZED (SELECT x FROM x), x AS MATERIALIZED (SELECT 1) SELECT * FROM x;
PRAGMA x;
WITH RECURSIVE x AS MATERIALIZED (SELECT 1 UNION ALL SELECT x + 1 FROM x WHERE x < 4), x AS MATERIALIZED (SELECT * FROM x UNION ALL SELECT x.x * 2 + x.x FROM x, x WHERE x.x < 32) SELECT * FROM x ORDER BY x LIMIT 5;
WITH RECURSIVE x AS MATERIALIZED (SELECT x, x, 0 FROM (WITH RECURSIVE x AS (SELECT 1 UNION ALL SELECT x + 1 FROM x WHERE x < 10) SELECT * FROM x) AS x UNION ALL (SELECT x, CASE WHEN x % 2 = 1 THEN x * 3 + x ELSE x / 2 END, x + x FROM x, (WITH RECURSIVE x AS (SELECT 1 UNION ALL SELECT x + 1 FROM x WHERE x < 1) SELECT * FROM x) AS x WHERE x <> 1)) SELECT * FROM x WHERE x = 1 ORDER BY x;
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3);
WITH RECURSIVE x AS MATERIALIZED (SELECT 1 UNION ALL SELECT x + 1 FROM (SELECT x.x + 1 FROM x AS x FULL OUTER JOIN x ON x.x = x) AS x WHERE x < 10) SELECT * FROM x AS x RIGHT OUTER JOIN x ON x.x = x ORDER BY x, x;
PRAGMA x;
CREATE TABLE x (x INT PRIMARY KEY, x TEXT, x TEXT, x INT, x DATE, x DOUBLE, x DOUBLE, x INT);
INSERT INTO x VALUES (7839, 'KING', 'PRESIDENT', NULL, CAST('1981-11-17' AS DATE), 5000.00, NULL, 10);
WITH RECURSIVE x AS MATERIALIZED (SELECT x, x FROM x WHERE x = 7566 UNION ALL SELECT x.x, x.x FROM x JOIN x ON x.x = x.x) SELECT * FROM x;
WITH RECURSIVE x AS MATERIALIZED (SELECT x, x, 0 AS x FROM x WHERE x = 7566 UNION ALL SELECT x.x, x.x, x.x + 1 FROM x JOIN x ON x.x = x.x) SELECT * FROM x;
WITH RECURSIVE x AS MATERIALIZED (SELECT x, x, x AS x FROM x WHERE x = 7566 UNION ALL SELECT x.x, x.x, x.x || ' -> ' || x.x FROM x JOIN x ON x.x = x.x) SELECT * FROM x;
CREATE VIEW x AS (WITH RECURSIVE x AS MATERIALIZED (SELECT x, x, x AS x FROM x WHERE x = 7566 UNION ALL SELECT x.x, x.x, x.x || ' -> ' || x.x FROM x JOIN x ON x.x = x.x) SELECT * FROM x);
SELECT * FROM x;
WITH RECURSIVE x AS MATERIALIZED (SELECT 1 AS x, CAST(1 AS BIGINT) AS "x", CAST(1 AS BIGINT) AS "x" UNION ALL SELECT x + 1, "x", "x" + "x" FROM x WHERE x <= 20) SELECT x, "x" FROM x LIMIT 20;
PRAGMA x;
WITH RECURSIVE x AS MATERIALIZED (SELECT 1 AS x UNION ALL SELECT x + 1 FROM x WHERE x < 3) SELECT * FROM x;
WITH RECURSIVE x AS MATERIALIZED (SELECT 1 AS x UNION ALL SELECT x + 1 FROM x AS x WHERE x.x < 3) SELECT * FROM x;
WITH RECURSIVE x AS MATERIALIZED (SELECT 1 AS x UNION ALL SELECT x.x + x.x FROM x AS x, x AS x WHERE x.x < 3) SELECT * FROM x;
WITH RECURSIVE x AS MATERIALIZED (SELECT 1 AS x, 'hello' AS x UNION ALL SELECT x + 1, x || '-' || 'hello' FROM x WHERE x < 3) SELECT * FROM x;
WITH RECURSIVE x AS MATERIALIZED (SELECT 1 AS x UNION ALL SELECT x + 1 FROM x WHERE x < 3) SELECT MIN(x.x) FROM x AS x, x AS x;
WITH RECURSIVE x AS MATERIALIZED (SELECT 1 AS x UNION ALL SELECT x + (SELECT 1) FROM x WHERE x < 3) SELECT * FROM x;
CREATE TABLE x AS WITH RECURSIVE x AS MATERIALIZED (SELECT 1 AS x UNION ALL SELECT x + 1 FROM x WHERE x < 3) SELECT * FROM x;
WITH RECURSIVE x AS MATERIALIZED (SELECT (SELECT MIN(x) FROM x) AS x UNION ALL SELECT x + 1 FROM x WHERE x < 3) SELECT * FROM x;
WITH RECURSIVE x AS MATERIALIZED (SELECT 1 AS x UNION ALL SELECT SUM(x + 1) AS x FROM x WHERE x < 3 GROUP BY x) SELECT * FROM x;
WITH RECURSIVE x AS MATERIALIZED (SELECT 1 AS x UNION ALL SELECT x FROM x, x AS x WHERE x = x + 1) SELECT * FROM x;
WITH RECURSIVE x AS MATERIALIZED (SELECT 1 AS x UNION ALL SELECT x + 1 FROM x WHERE x < 3 ORDER BY x) SELECT * FROM x;
WITH RECURSIVE x AS MATERIALIZED (SELECT 1 AS x UNION ALL SELECT x + 1 FROM x WHERE x < 3 LIMIT 1) SELECT * FROM x;
WITH RECURSIVE x AS MATERIALIZED (SELECT 1 AS x UNION ALL SELECT x + 1 FROM x WHERE x < 3 OFFSET 1) SELECT * FROM x;
WITH RECURSIVE x AS MATERIALIZED (SELECT 1 AS x UNION ALL SELECT x + 1 FROM x WHERE x < 3 LIMIT 1 OFFSET 1) SELECT * FROM x;
PRAGMA x;
WITH RECURSIVE x AS MATERIALIZED (SELECT 1 AS x UNION SELECT x + 1 FROM x WHERE x < 3) SELECT * FROM x ORDER BY x;
WITH RECURSIVE x AS MATERIALIZED (SELECT 1 UNION SELECT x + 1 FROM x WHERE x < 3) SELECT * FROM x ORDER BY x;
WITH RECURSIVE x AS MATERIALIZED (SELECT 1 UNION SELECT x + 1 FROM x WHERE x < 3) SELECT x FROM x AS x ORDER BY x;
WITH RECURSIVE x AS MATERIALIZED (SELECT 1 UNION SELECT x + 1 FROM x AS x WHERE x < 3) SELECT x FROM x AS x ORDER BY x;
WITH RECURSIVE x AS MATERIALIZED (SELECT 1 AS x UNION SELECT x FROM x) SELECT * FROM x;
WITH RECURSIVE x AS MATERIALIZED (SELECT 1 AS x UNION SELECT x + 1 FROM x AS x WHERE x.x < 3) SELECT * FROM x ORDER BY x;
WITH RECURSIVE x AS MATERIALIZED (SELECT 1 AS x UNION SELECT x.x + x.x FROM x AS x, x AS x WHERE x.x < 3) SELECT * FROM x ORDER BY x;
WITH RECURSIVE x AS MATERIALIZED (SELECT 1 AS x, 'hello' AS x UNION SELECT x + 1, x || '-' || 'hello' FROM x WHERE x < 3) SELECT * FROM x ORDER BY x;
WITH RECURSIVE x AS MATERIALIZED (SELECT 1 AS x UNION SELECT x + 1 FROM x WHERE x < 3) SELECT MIN(x.x) FROM x AS x, x AS x;
WITH RECURSIVE x AS MATERIALIZED (SELECT 1 AS x UNION SELECT x + (SELECT 1) FROM x WHERE x < 3) SELECT * FROM x ORDER BY x;
WITH RECURSIVE x AS MATERIALIZED (SELECT 1 AS x UNION SELECT x + (SELECT 1 + x.x) FROM x WHERE x < 5) SELECT * FROM x ORDER BY x;
CREATE TABLE x AS WITH RECURSIVE x AS MATERIALIZED (SELECT 1 AS x UNION SELECT x + 1 FROM x WHERE x < 3) SELECT * FROM x;
WITH RECURSIVE x AS MATERIALIZED (SELECT (SELECT MIN(x) FROM x) AS x UNION SELECT x + 1 FROM x WHERE x < 3) SELECT * FROM x ORDER BY x;
WITH RECURSIVE x AS MATERIALIZED (SELECT 1 AS x UNION SELECT SUM(x + 1) FROM x WHERE x < 3) SELECT * FROM x ORDER BY 1;
WITH RECURSIVE x AS MATERIALIZED (SELECT 1 AS x UNION SELECT SUM(x + 1) FROM x WHERE x < 3 ORDER BY x) SELECT * FROM x;
WITH RECURSIVE x AS MATERIALIZED (SELECT 1 AS x UNION SELECT SUM(x + 1) FROM x WHERE x < 3 LIMIT 1) SELECT * FROM x;
WITH RECURSIVE x AS MATERIALIZED (SELECT 1 AS x UNION SELECT SUM(x + 1) FROM x WHERE x < 3 OFFSET 1) SELECT * FROM x;
WITH RECURSIVE x AS MATERIALIZED (SELECT 1 AS x UNION SELECT SUM(x + 1) FROM x WHERE x < 3 LIMIT 1 OFFSET 1) SELECT * FROM x;
CREATE VIEW x AS (WITH RECURSIVE x AS MATERIALIZED (SELECT 1 UNION SELECT x + 1 FROM x WHERE x < 3) SELECT * FROM x ORDER BY x);
SELECT * FROM x;
CREATE TABLE x (x INT);
INSERT INTO x SELECT * FROM x AS x;
SET x = TRUE;
BEGIN;
BEGIN;
DELETE FROM x WHERE x BETWEEN 200 AND 300;
DELETE FROM x WHERE x <= 500;
COMMIT;
ROLLBACK;
DELETE FROM x WHERE x <= 500;
PRAGMA x;
CREATE TABLE x AS SELECT * FROM x AS x;
BEGIN;
SELECT COUNT(*) FROM x;
DELETE FROM x WHERE x % 2 = 0;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
COMMIT;
SELECT COUNT(*) FROM x;
PRAGMA x;
CREATE TABLE x (x INT[]);
INSERT INTO x VALUES ([0, 1, 1, 1, 4, 0, 3, 3, 2, 2, 4, 4, 2, 4, 0, 0, 0, 1, 2, 3, 4, 2, 3, 3, 1]);
INSERT INTO x VALUES ([]), ([NULL]), (NULL), ([0, 1, 1, 1, 4, NULL, 0, 3, 3, 2, NULL, 2, 4, 4, 2, 4, 0, 0, 0, 1, NULL, 2, 3, 4, 2, 3, 3, 1]);
SELECT COUNT(x) FROM x;
DELETE FROM x;
SELECT COUNT(x) FROM x;
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (42);
SELECT COUNT(*) FROM x;
DELETE FROM x;
SELECT COUNT(*) FROM x;
INSERT INTO x VALUES (42);
SELECT COUNT(*) FROM x;
BEGIN;
DELETE FROM x;
SELECT COUNT(*) FROM x;
ROLLBACK;
SELECT COUNT(*) FROM x;
PRAGMA x;
CREATE TABLE x (x INT PRIMARY KEY, x TEXT, x BIGINT);
CREATE INDEX x ON x(x);
INSERT INTO x VALUES (1, 'a', 10), (2, 'b', 20), (3, 'c', 30);
SELECT * FROM x ORDER BY x;
DELETE FROM x WHERE x = 2;
SELECT * FROM x ORDER BY x;
DELETE FROM x WHERE x = 30;
SELECT * FROM x ORDER BY x;
INSERT INTO x VALUES (4, 'd', 40), (5, 'e', 50);
BEGIN;
DELETE FROM x WHERE x > 10;
SELECT * FROM x ORDER BY x;
ROLLBACK;
SELECT * FROM x ORDER BY x;
DELETE FROM x;
SELECT COUNT(*) FROM x;
INSERT INTO x VALUES (1, 'a', 10), (2, 'b', 20), (3, 'c', 30);
BEGIN;
DELETE FROM x WHERE x >= 20;
INSERT INTO x VALUES (2, 'new_20', 20), (3, 'new_30', 30);
SELECT * FROM x WHERE x = 20;
SELECT * FROM x WHERE x = 30;
COMMIT;
SELECT * FROM x WHERE x = 20;
SELECT * FROM x WHERE x = 30;
BEGIN;
DELETE FROM x WHERE x >= 20;
INSERT INTO x VALUES (2, 'tmp_20', 20), (3, 'tmp_30', 30);
SELECT * FROM x WHERE x = 20;
SELECT * FROM x WHERE x = 30;
ROLLBACK;
SELECT * FROM x WHERE x = 20;
SELECT * FROM x WHERE x = 30;
SELECT * FROM x WHERE x >= 20 ORDER BY x;
CREATE TABLE x (x TIMESTAMP NOT NULL, x BIGINT NOT NULL, x BIGINT NOT NULL);
CREATE TABLE x (x TIMESTAMP NOT NULL, x BIGINT);
COPY x FROM 'https://github.com/duckdb/duckdb-data/releases/download/v1.0/Person_likes_Comment.csv' WITH (DELIMITER '|', TIMESTAMPFORMAT '%Y-%m-%dT%H:%M:%S.%g+00:00');
COPY x FROM 'https://github.com/duckdb/duckdb-data/releases/download/v1.0/Person_Delete_candidates.csv' WITH (DELIMITER '|', HEADER, TIMESTAMPFORMAT '%Y-%m-%dT%H:%M:%S.%g+00:00');
DELETE FROM x USING x WHERE x.x = x.x;
SELECT COUNT(*) FROM x, x WHERE x.x = x.x;
PRAGMA x;
CREATE TABLE x AS SELECT * FROM x AS x;
SELECT COUNT(*) FROM x WHERE x >= 2000 AND x < 5000;
DELETE FROM x WHERE x >= 2000 AND x < 5000;
SELECT COUNT(*) FROM x;
PRAGMA x = 2;
PRAGMA x;
CREATE TABLE x AS SELECT * FROM x AS x;
SELECT COUNT(*) FROM x;
DELETE FROM x WHERE x >= 2000 AND x < 5000;
SELECT COUNT(*) FROM x;
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (42);
TRUNCATE TABLE x;
TRUNCATE TABLE x;
SELECT COUNT(*) FROM x;
INSERT INTO x VALUES (42);
SELECT COUNT(*) FROM x;
BEGIN;
TRUNCATE TABLE x;
SELECT COUNT(*) FROM x;
ROLLBACK;
SELECT COUNT(*) FROM x;
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3);
DELETE FROM x USING (VALUES (1)) AS x WHERE x.x = x.x;
SELECT * FROM x;
DELETE FROM x USING (VALUES (1)) AS x;
SELECT * FROM x;
INSERT INTO x VALUES (1), (2), (3);
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
DELETE FROM x USING (VALUES (4)) AS x WHERE x.x = x.x;
SELECT * FROM x;
DELETE FROM x USING x AS x WHERE x.x > x.x;
SELECT * FROM x;
DELETE FROM x USING x WHERE x.x = x.x;
DELETE FROM x USING x AS x WHERE x.x = x.x;
CREATE TABLE x AS SELECT * FROM x;
CREATE TABLE x AS SELECT * FROM x;
DELETE FROM x USING x;
SELECT COUNT(*) FROM x;
DROP TABLE x;
DROP TABLE x;
BEGIN;
CREATE TABLE x AS SELECT * FROM x;
CREATE TABLE x AS SELECT * FROM x;
DELETE FROM x USING x;
SELECT COUNT(*) FROM x;
COMMIT;
SELECT COUNT(*) FROM x;
PRAGMA x;
PRAGMA x = '__TEST_DIR__/test.json';
PRAGMA x = x;
PRAGMA x = 4;
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x = '__TEST_DIR__/test.json';
PRAGMA x = x;
PRAGMA x = x;
PRAGMA x = x;
PRAGMA x = x;
PRAGMA x;
PRAGMA x = '__TEST_DIR__/test.json';
PRAGMA x = x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (3);
SELECT MIN(x + x) FROM x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (42, 10), (43, 100), (NULL, 1), (45, -1);
SELECT MIN(x + x) FROM x;
SELECT x FROM x WHERE x BETWEEN 43 AND 44;
SELECT CASE x WHEN 42 THEN 100 WHEN 43 THEN 200 ELSE 300 END FROM x;
PRAGMA x = '__TEST_DIR__/test_2.json';
SELECT COUNT(*) > 0 FROM x WHERE CONTAINS(x, 'Optimizer');
CREATE TABLE x AS SELECT x % 20 AS x, x AS x FROM x AS x;
SELECT COUNT(DISTINCT x) FROM x GROUP BY x ORDER BY x LIMIT 10;
SELECT DISTINCT ON (x) COUNT(DISTINCT x) FROM x GROUP BY x;
SET x = TRUE;
SELECT * FROM x;
CREATE VIEW x AS SELECT CASE WHEN x % 2 <> 0 THEN [1] ELSE NULL END FROM x AS x;
SELECT COUNT(*) FROM x WHERE x IS DISTINCT FROM NULL;
SELECT DBGEN();
SELECT DBGEN();
SELECT * FROM x;
SELECT * FROM x;
SET x = 'UTC';
SELECT * FROM x;
SELECT DBGEN();
SET x = 'UTC';
CREATE TABLE x (x BIGINT NOT NULL, x BIGINT NOT NULL, x BIGINT NOT NULL, x BIGINT NOT NULL, x DECIMAL(15, 2) NOT NULL, x DECIMAL(15, 2) NOT NULL, x DECIMAL(15, 2) NOT NULL, x DECIMAL(15, 2) NOT NULL, x TEXT NOT NULL, x TEXT NOT NULL, x DATE NOT NULL, x DATE NOT NULL, x DATE NOT NULL, x TEXT NOT NULL, x TEXT NOT NULL, x TEXT NOT NULL);
SELECT * FROM x WHERE x = 5;
SELECT * FROM x, x AS x WHERE x = 5;
SELECT * FROM x WHERE x.x = 5;
SELECT x, x, SUM(x) AS x, SUM(x) AS x, SUM(x * (1 - x)) AS x, SUM(x * (1 - x) * (1 + x)) AS x, AVG(x) AS x, AVG(x) AS x, AVG(x) AS x, COUNT(*) AS x FROM x WHERE x <= CAST('1998-09-02' AS DATE) + CAST('2020-01-01' AS TIMESTAMP) GROUP BY x, x ORDER BY x, x;
SELECT x, x, SUM(x) AS x, SUM(x) AS x, SUM(x * (1 - x)) AS x, SUM(x * (1 - x) * (1 + x)) AS x, AVG(x) AS x, AVG(x) AS x, AVG(x) AS x, COUNT(*) AS x FROM x WHERE x <= CAST('1998-09-02' AS DATE) + CAST('2020-01-01' /* this has a really long comment that ends up requiring truncation in the error message */ AS TIMESTAMP) GROUP BY x, x ORDER BY x, x;
SELECT x, x, SUM(x) AS x, SUM(x) AS x, SUM(x * (1 - x)) AS x, SUM(x * (1 - x) * (1 + x)) AS x, AVG(x) AS x, AVG(x) AS x, AVG(x) AS x, COUNT(*) AS x FROM x WHERE x <= CAST('1998-09-02' AS DATE) + CAST('2020-01-01' AS TIMESTAMP) GROUP BY x, x ORDER BY x, x;
SELECT CAST('' AS blobb);
CREATE TABLE x (x TEXT, x TEXT, x INT, x DOUBLE, x INT);
SELECT FIRST(x), FIRST(x) FROM x GROUP BY x ORDER BY x DESC;
SELECT FIRST(x) || x FROM x;
SELECT (SELECT 42, 84);
SELECT READ_CSV('test.csv');
PRAGMA x;
SELECT CAST('abc' AS INT);
SELECT ~CAST('abc' AS INT);
SELECT ~CAST('abc' AS INT);
SELECT CAST('abc' AS INT) IS NULL;
SELECT NOT CAST('abc' AS INT) IS NULL;
SELECT CAST('abc' AS INT) = 'abc';
SELECT CAST('abc' AS INT) = 'abc';
SELECT CAST('abc' AS INT) <> 'abc';
SELECT LN(0);
WITH x AS (SELECT * FROM (VALUES ('123'), ('test'), ('235')) AS x) SELECT CAST(x AS INT) FROM x;
WITH x AS (SELECT * FROM (VALUES ('123'), ('test'), ('235')) AS x) SELECT CAST(x AS INT) FROM x;
WITH x AS (SELECT * FROM (VALUES ('123'), ('test'), ('235')) AS x) SELECT CAST(x AS INT) FROM x;
SELECT CAST(CASE WHEN RANDOM() > 2.0 THEN '123' ELSE 'abc' END AS TINYINT);
SELECT CAST((SELECT 'ABC') AS INT);
SELECT SUBSTRING('hello', 3, 2) OVER ();
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1);
SELECT * FROM x;
SELECT F(1);
SELECT F(1);
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (2, 2), (3, 3), (NULL, NULL);
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (2, 2), (3, 3), (NULL, NULL);
PRAGMA x = 'optimized_only';
PRAGMA x;
CREATE TABLE x AS SELECT * FROM x AS x;
PRAGMA x;
PRAGMA x;
PRAGMA x = '__TEST_DIR__/test.json';
PRAGMA x = 'json';
SELECT 42;
PRAGMA x;
SELECT * FROM x;
PRAGMA x = 'json';
PRAGMA x;
PRAGMA x = '__TEST_DIR__/test_2.json';
SELECT * FROM x;
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (2, 2), (3, 3), (NULL, NULL);
PRAGMA x;
SET x = 'nulls_first';
BEGIN;
CREATE TABLE x (x INT, x INT, CHECK (x + x < 10));
CREATE TABLE x (x TEXT, x DATE, PRIMARY KEY (x));
CREATE TABLE x (x mood);
INSERT INTO x VALUES (1, 3), (4, 2), (NULL, 1);
INSERT INTO x VALUES ('NULL', CAST('1992-01-01' AS DATE)), (NULL, CAST('1993-01-01' AS DATE));
INSERT INTO x VALUES ('sad'), ('ok'), ('sad'), ('happy');
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (4), (NULL);
CREATE TABLE x ("x" TEXT);
INSERT INTO x ("x") VALUES ('quote_escaped_quote_''');
CREATE TABLE x (x INT, x INT);
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (2, 2);
CREATE VIEW x AS SELECT * FROM x WHERE x > 3;
CREATE VIEW x AS SELECT * FROM x WHERE x IS NULL;
CREATE SEQUENCE x;
SELECT NEXTVAL('seq');
SELECT * FROM x ORDER BY 1;
SELECT * FROM x ORDER BY 1;
SELECT * FROM x ORDER BY 1;
SELECT * FROM x ORDER BY 1;
SELECT * FROM x ORDER BY 1;
SELECT * FROM x ORDER BY 1;
SELECT * FROM x ORDER BY 1;
SELECT * FROM x ORDER BY 1;
SELECT * FROM x ORDER BY 1;
SELECT "x"."x", "x" FROM x;
SELECT * FROM x ORDER BY 1;
SELECT * FROM x ORDER BY x;
CREATE SCHEMA x.x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (2, 2);
SELECT * FROM x ORDER BY x;
SELECT * FROM x.x ORDER BY x;
SELECT * FROM x.x ORDER BY x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
ROLLBACK;
ROLLBACK;
SELECT * FROM x ORDER BY 1;
SELECT * FROM x ORDER BY 1;
SELECT * FROM x ORDER BY 1;
SELECT * FROM x ORDER BY 1;
SELECT * FROM x ORDER BY 1;
SELECT * FROM x ORDER BY 1;
SELECT NEXTVAL('seq');
SELECT * FROM x ORDER BY 1;
SELECT * FROM x ORDER BY 1;
SELECT "x"."x", "x" FROM x;
SELECT * FROM x ORDER BY 1;
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
SELECT * FROM x.x ORDER BY x;
SELECT * FROM x.x ORDER BY x;
INSERT INTO x VALUES (5, 6);
INSERT INTO x VALUES (NULL, NULL);
PRAGMA x;
BEGIN;
CREATE TABLE x (x INT, x INT, CHECK (x + x < 10));
CREATE TABLE x (x INT, x INT, CHECK (x + x < 10));
ROLLBACK;
SET x = FALSE;
SET x = FALSE;
SET x = FALSE;
PRAGMA x;
BEGIN;
CREATE TABLE x (x DATE DEFAULT CURRENT_DATE, x TIMETZ DEFAULT CURRENT_TIME, x TIMESTAMP DEFAULT CURRENT_TIMESTAMP, x TEXT DEFAULT CURRENT_USER(), "x" TEXT DEFAULT "x", x TEXT DEFAULT "x", x TEXT DEFAULT "x", x TEXT DEFAULT x);
CREATE TABLE x (x DATE DEFAULT CURRENT_DATE, x TIMETZ DEFAULT CURRENT_TIME, x TIMESTAMP DEFAULT CURRENT_TIMESTAMP, x TEXT DEFAULT CURRENT_USER(), "x" TEXT DEFAULT "x", x TEXT DEFAULT "x", x TEXT DEFAULT "x", x TEXT DEFAULT x);
ROLLBACK;
PRAGMA x = 'v1.1.0';
PRAGMA x;
BEGIN;
CREATE TABLE x (x INT, x AS (MY_MACRO(x)));
INSERT INTO x VALUES (5);
INSERT INTO x VALUES (2, 3);
ALTER TABLE x DROP COLUMN x;
ALTER TABLE x DROP COLUMN x;
ROLLBACK;
ROLLBACK;
SELECT * FROM x;
INSERT INTO x VALUES (2, 3);
ALTER TABLE x DROP COLUMN x;
BEGIN;
CREATE TABLE x (x INT, x TEXT);
CREATE UNIQUE INDEX x ON x(ELABORATE_MACRO(x.x));
SELECT x FROM x;
SELECT x FROM x;
ROLLBACK;
ROLLBACK;
SELECT x FROM x;
SELECT ELABORATE_MACRO(28, x := 5);
INSERT INTO x VALUES (10, 'hello');
INSERT INTO x VALUES (10, 'world');
SET x = TRUE;
PRAGMA x;
BEGIN;
CREATE SCHEMA x.x;
ROLLBACK;
ROLLBACK;
SELECT x.elaborate_macro(28, x := 5);
SELECT MAX(x) FROM x.x;
SELECT MAX(x) FROM x.x;
PRAGMA x;
BEGIN;
CREATE TABLE x (x group);
CREATE TABLE x (x group);
ROLLBACK;
PRAGMA x;
BEGIN;
CREATE TABLE x (x STRUCT("x" TEXT));
INSERT INTO x VALUES ({'x': 'hello'});
SELECT * FROM x;
SELECT * FROM x;
ROLLBACK;
ROLLBACK;
SELECT * FROM x;
PRAGMA x;
BEGIN;
CREATE TABLE x (x UNION("x" TEXT, "x" BOOLEAN));
INSERT INTO x VALUES (UNION_VALUE("x" := 'hello'));
SELECT * FROM x;
SELECT * FROM x;
ROLLBACK;
ROLLBACK;
SELECT * FROM x;
SELECT UNION_TAG(COLUMNS(*)) FROM x;
BEGIN;
CREATE TABLE x (x mood, x doom);
CREATE TABLE x (x STRUCT(x mood, x doom));
CREATE TABLE x (x doom_mood);
CREATE TABLE x (x doom_mood);
ROLLBACK;
PRAGMA x;
BEGIN;
CREATE TABLE x (x INT NOT NULL, x INT);
INSERT INTO x SELECT x, x + 1 FROM x AS x;
SELECT SUM(x), SUM(x) FROM x;
SELECT SUM(x), SUM(x) FROM x;
ROLLBACK;
ROLLBACK;
SELECT SUM(x), SUM(x) FROM x;
INSERT INTO x VALUES (NULL, NULL);
DROP TABLE x;
BEGIN;
CREATE TABLE x (x INT NOT NULL, x INT);
INSERT INTO x SELECT x, x + 1 FROM x AS x;
SELECT SUM(x), SUM(x) FROM x;
SELECT SUM(x), SUM(x) FROM x;
ROLLBACK;
ROLLBACK;
SELECT SUM(x), SUM(x) FROM x;
INSERT INTO x VALUES (NULL, NULL);
DROP TABLE x;
BEGIN;
CREATE TABLE x (x INT NOT NULL, x INT);
INSERT INTO x SELECT x, x + 1 FROM x AS x;
SELECT SUM(x), SUM(x) FROM x;
SELECT SUM(x), SUM(x) FROM x;
ROLLBACK;
ROLLBACK;
SELECT SUM(x), SUM(x) FROM x;
INSERT INTO x VALUES (NULL, NULL);
BEGIN;
CREATE TABLE x AS SELECT "x" FROM x, x;
SELECT * FROM x;
SELECT * FROM x;
ROLLBACK;
ROLLBACK;
SELECT * FROM x;
BEGIN;
CREATE TABLE x (x my_enum);
CREATE TABLE x AS SELECT CAST('hello''world' AS ENUM('hello''world'));
INSERT INTO x VALUES ('1'), (NULL), ('3');
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
ROLLBACK;
ROLLBACK;
SELECT * FROM x;
SELECT * FROM x;
BEGIN;
CREATE TABLE x AS SELECT "x" FROM x, x;
SELECT * FROM x;
SELECT * FROM x;
ROLLBACK;
ROLLBACK;
SELECT * FROM x;
BEGIN;
CREATE TABLE x AS SELECT x FROM (SELECT JSON_STRUCTURE('{"a": 42}') AS x), x;
SELECT * FROM x;
SELECT * FROM x;
ROLLBACK;
ROLLBACK;
SELECT * FROM x;
BEGIN;
CREATE TABLE x AS SELECT x FROM (SELECT [CAST('01010101' AS BIT), CAST('01011101001' AS BIT)] AS x), x;
SELECT * FROM x;
SELECT * FROM x;
ROLLBACK;
ROLLBACK;
SELECT * FROM x;
BEGIN;
CREATE TABLE x AS SELECT x FROM (SELECT MAP {'x': CAST('01010101000' AS BIT), 'x': CAST(NULL AS BIT)} AS x), x;
CREATE TABLE x AS SELECT x FROM (SELECT MAP {'x': 'hello', 'x': 'world'} AS x), x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
ROLLBACK;
ROLLBACK;
SELECT * FROM x;
SELECT * FROM x;
BEGIN;
CREATE TABLE x AS SELECT x FROM (SELECT {'x': CAST('01010101000' AS BIT), 'x': TRUE, 'x': NULL} AS x), x;
SELECT * FROM x;
SELECT * FROM x;
ROLLBACK;
ROLLBACK;
SELECT * FROM x;
BEGIN;
CREATE TABLE x AS SELECT "x" FROM x, x;
CREATE TABLE x (x UNION(x BIT, x BOOLEAN));
INSERT INTO x VALUES (CAST('00101010' AS BIT)), (CAST(TRUE AS BOOLEAN)), (CAST(NULL AS BIT));
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
ROLLBACK;
ROLLBACK;
SELECT * FROM x;
SELECT * FROM x;
SET x = TRUE;
SET x = FALSE;
SET x = TRUE;
SET x = TRUE;
ATTACH '__TEST_DIR__/my_sqlite' AS x (TYPE x);
CREATE TABLE x.x.x (x INT);
INSERT INTO x.x.x VALUES (1);
ALTER TABLE x.x.x ADD PRIMARY KEY (x);
SET x = TRUE;
SET x = TRUE;
SET x = TRUE;
SELECT COUNT(*) FROM x WHERE x <> '' AND x = 'httpfs';
SET x = TRUE;
SET x = TRUE;
SET GLOBAL x = TRUE;
SELECT COUNT(*) FROM x WHERE x <> '' AND x = 'sqlite_scanner';
PRAGMA x;
CREATE TABLE x AS SELECT x FROM x AS x, x AS x;
SELECT COUNT(*) FROM x WHERE x < 5;
SELECT COUNT(*) FROM (SELECT * FROM x WHERE (x > 1 AND x < 10) OR x > 9995) AS x WHERE x < 5;
SELECT COUNT(*) FROM (SELECT * FROM (SELECT * FROM x WHERE (x <> 3 AND x < 50) OR (x > 9995)) WHERE x > 1 AND x < 20) AS x WHERE x < 5;
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3), (NULL);
SELECT x % 2 AS x FROM x WHERE x <> 0;
SELECT x % 2 AS x FROM x WHERE x.x <> 0;
SELECT x % 2 AS x FROM x WHERE x <> 0;
SELECT x % 2 AS x FROM x WHERE x.x <> 0;
SELECT x % 2 AS x FROM x WHERE x = x;
SELECT x % 2 AS x, COUNT(x) AS x FROM x WHERE x = 0 GROUP BY x;
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (2, 12);
SELECT * FROM x WHERE 2 = 2;
SELECT * FROM x WHERE 2 = 3;
SELECT * FROM x WHERE 2 <> 3;
SELECT * FROM x WHERE 2 <> 2;
SELECT * FROM x WHERE 2 > 1;
SELECT * FROM x WHERE 2 > 2;
SELECT * FROM x WHERE 2 >= 2;
SELECT * FROM x WHERE 2 >= 3;
SELECT * FROM x WHERE 2 < 3;
SELECT * FROM x WHERE 2 < 2;
SELECT * FROM x WHERE 2 <= 2;
SELECT * FROM x WHERE 2 <= 1;
SELECT x = NULL FROM x;
SELECT NULL = x FROM x;
SELECT * FROM x WHERE 2 IN (2, 3, 4, 5);
SELECT * FROM x WHERE NOT 2 IN (2, 3, 4, 5);
SELECT * FROM x WHERE 2 IN (((1 * 2) + (1 * 0)) * 1, 3, 4, 5);
SELECT * FROM x WHERE 2 IN ((1 + 1) * 2, 3, 4, 5);
SELECT CASE WHEN 1 THEN 13 ELSE 12 END;
SELECT * FROM x WHERE CASE WHEN 2 = 2 THEN TRUE ELSE FALSE END;
PRAGMA x;
PRAGMA x;
SELECT COUNT(*) AS x, COUNT(*) FILTER(WHERE x < 5) AS x FROM x;
SELECT COUNT(*) AS x, COUNT(*) FILTER(WHERE x > 5 AND x < 10) AS x FROM x;
SELECT SUM(x) AS x, SUM(x) FILTER(WHERE x < 5) AS x FROM x;
SELECT SUM(x) AS x, SUM(x) FILTER(WHERE x BETWEEN 5 AND 10) AS x FROM x;
SELECT SUM(x) AS x, SUM(x) FILTER(WHERE x < 2) AS x FROM x;
SELECT SUM(x) FILTER(WHERE x < 10) FROM x;
SELECT SUM(x) FILTER(WHERE x < (SELECT 10)) FROM x;
SELECT SUM(x) FILTER(WHERE x < (SELECT x FROM x AS x WHERE x.x = x.x)) FROM x;
SELECT (SELECT SUM(x.x) FILTER(WHERE x.x < 10) FROM x AS x) AS x FROM x ORDER BY x LIMIT 5;
SELECT SUM(x) FILTER(WHERE x < 10), SUM(x) FILTER(WHERE x < 5) FROM x;
SELECT SUM(x) AS x, SUM(x) FILTER(WHERE x < 5) AS x FROM x GROUP BY x ORDER BY x;
SELECT COUNT(*) AS x, COUNT(*) FILTER(WHERE x > 5 AND x < 10) AS x, x FROM x GROUP BY x ORDER BY x;
SELECT SUM(x) AS x, SUM(x) FILTER(WHERE x BETWEEN 5 AND 10) AS x FROM x GROUP BY x ORDER BY x;
SELECT SUM(x) AS x, SUM(x) FILTER(WHERE x = 1) AS x, x FROM x GROUP BY x ORDER BY x;
SELECT SUM(x) FILTER(WHERE x < 10) FROM x GROUP BY x ORDER BY x;
SELECT SUM(x) FILTER(WHERE x < (SELECT 10)) FROM x GROUP BY x ORDER BY x;
SELECT SUM(x) FILTER(WHERE x < (SELECT x FROM x AS x WHERE x.x = x.x)) FROM x GROUP BY x ORDER BY x;
SELECT (SELECT SUM(x.x) FILTER(WHERE x.x < 10) FROM x AS x) FROM x GROUP BY x ORDER BY x LIMIT 5;
SELECT SUM(x) FILTER(WHERE x < 10), SUM(x) FILTER(WHERE x < 5) FROM x GROUP BY x ORDER BY x;
SELECT SUM(x) AS x, SUM(x) FILTER(WHERE x < 5) AS x FROM x GROUP BY x ORDER BY x;
SELECT COUNT(*) AS x, COUNT(*) FILTER(WHERE x > 5 AND x < 10) AS x FROM x GROUP BY x ORDER BY x;
SELECT SUM(x) AS x, SUM(x) FILTER(WHERE x BETWEEN 5 AND 10) AS x FROM x GROUP BY x ORDER BY x;
SELECT SUM(x) AS x, SUM(x) FILTER(WHERE x = 1) AS x, x FROM x GROUP BY x ORDER BY x;
SELECT SUM(x) FILTER(WHERE x < 10) FROM x GROUP BY x ORDER BY x;
SELECT SUM(x) FILTER(WHERE x < (SELECT 10)) FROM x GROUP BY x ORDER BY x;
SELECT SUM(x) FILTER(WHERE x < (SELECT x FROM x AS x WHERE x.x = x.x)) FROM x GROUP BY x ORDER BY x;
SELECT (SELECT SUM(x.x) FILTER(WHERE x.x < 10) FROM x AS x) FROM x GROUP BY x ORDER BY x LIMIT 5;
SELECT SUM(x) FILTER(WHERE x < 10), SUM(x) FILTER(WHERE x < 5) FROM x GROUP BY x ORDER BY x;
SELECT (SELECT SUM(x.x) FILTER(WHERE x.x = x.x) FROM x AS x) AS x FROM x WHERE x < 5 ORDER BY x;
PRAGMA x = 0 AS x;
CREATE TEMPORARY TABLE x AS SELECT x AS x, LENGTH(CAST(x AS TEXT)) AS x, x % 100 AS x, 5 AS x, 10000 AS x FROM x;
SELECT COUNT(x) FILTER(WHERE x > 10 AND x < 15), COUNT(x) FILTER(WHERE x BETWEEN 1 AND 3), COUNT(x) FILTER(WHERE x < 10), COUNT(x) FILTER(WHERE x = 5), COUNT(x) FILTER(WHERE x < 10) FROM x;
SELECT COUNT(x) FILTER(WHERE x > 10 AND x < 15), COUNT(x) FILTER(WHERE x BETWEEN 1 AND 3), COUNT(x) FILTER(WHERE x < 10), COUNT(x) FILTER(WHERE x = 5), COUNT(x) FILTER(WHERE x < 10) FROM x GROUP BY x ORDER BY x;
SELECT COVAR_POP(x, x) FILTER(WHERE x < 100), COVAR_POP(x, x) FILTER(WHERE x < 5) FROM x;
SELECT COVAR_POP(x, x) FILTER(WHERE x < 100), COVAR_POP(x, x) FILTER(WHERE x < 50) FROM x GROUP BY x ORDER BY x;
CREATE TABLE x (x INT, x TEXT);
CREATE TABLE x (x INT, x TEXT, x TEXT);
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 'The Martian'), (2, 'Saving Private Ryan'), (3, 'Team America');
INSERT INTO x VALUES (1, 'Matt', 'Damon'), (2, 'Jessica', 'Chastain'), (3, 'Tom', 'Hanks'), (4, 'Edward', 'Burns'), (5, 'Kim', 'Jong Un'), (6, 'Alec', 'Baldwin');
INSERT INTO x VALUES (1, 1), (2, 1), (3, 1), (1, 2), (2, 3), (2, 4), (3, 5), (3, 6);
SELECT x, ARRAY_AGG(x || ' ' || x) FILTER(WHERE x = 'Matt') AS x FROM x JOIN x USING (x) JOIN x USING (x) GROUP BY x ORDER BY x;
SELECT x, GROUP_CONCAT(x || ' ' || x) FILTER(WHERE x = 'Matt') AS x FROM x JOIN x USING (x) JOIN x USING (x) GROUP BY x ORDER BY x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (1), (2), (2), (3), (4), (8);
SELECT SUM(DISTINCT x) FILTER(WHERE x > 1 AND x < 5) FROM x;
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (2, 12);
SELECT * FROM x WHERE SUM(x) > 10;
SET x = 'nulls_first';
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 10), (2, 12), (3, 14), (4, 16), (5, NULL), (NULL, NULL);
SELECT * FROM x WHERE TRUE ORDER BY 1;
SELECT * FROM x WHERE FALSE ORDER BY 1;
SELECT * FROM x WHERE NULL ORDER BY 1;
SELECT * FROM x WHERE x = 2 AND x = 2;
SELECT * FROM x WHERE x = 2 AND x > 0;
SELECT * FROM x WHERE x > 0 AND x = 2;
SELECT * FROM x WHERE x = 2 AND x < 4;
SELECT * FROM x WHERE x < 4 AND x = 2;
SELECT * FROM x WHERE x = 2 AND x <= 2;
SELECT * FROM x WHERE x = 2 AND x >= 2;
SELECT * FROM x WHERE x > 2 AND x > 4;
SELECT * FROM x WHERE x > 4 AND x > 2;
SELECT * FROM x WHERE x > 4 AND x >= 4;
SELECT * FROM x WHERE x >= 4 AND x > 4;
SELECT * FROM x WHERE x < 2 AND x < 4;
SELECT * FROM x WHERE x < 4 AND x < 2;
SELECT * FROM x WHERE x < 2 AND x <= 2;
SELECT * FROM x WHERE x <= 2 AND x < 2;
SELECT * FROM x WHERE x < 2 AND x <> 3;
SELECT * FROM x WHERE x <= 1 AND x <> 3;
SELECT * FROM x WHERE x > 4 AND x <> 2;
SELECT * FROM x WHERE x >= 5 AND x <> 2;
SELECT * FROM x WHERE x >= 4 AND x <> 4 AND x <> 4;
SELECT * FROM x WHERE x < 3 AND x < 4 AND x < 5 AND x < 10 AND x < 2 AND x < 20;
SELECT * FROM x WHERE x = 2 AND x = 4;
SELECT * FROM x WHERE x = 2 AND x > 4;
SELECT * FROM x WHERE x > 4 AND x = 2;
SELECT * FROM x WHERE x = 2 AND x > 2;
SELECT * FROM x WHERE x >= 4 AND x = 2;
SELECT * FROM x WHERE x = 4 AND x < 2;
SELECT * FROM x WHERE x < 2 AND x = 4;
SELECT * FROM x WHERE x = 2 AND x < 2;
SELECT * FROM x WHERE x <= 2 AND x = 4;
SELECT * FROM x WHERE x < 2 AND x > 4;
SELECT * FROM x WHERE x = 2 AND x <> 2;
SELECT * FROM x WHERE x <> 2 AND x = 2;
SELECT * FROM x WHERE 0;
SELECT * FROM x WHERE x < 2 AND 0;
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('hello'), ('world'), (NULL);
SELECT * FROM x WHERE x = 'hello' AND x = 'hello';
SELECT * FROM x WHERE x = 'hello' AND x = 'world';
SELECT * FROM x WHERE x = 'hello' AND x <> 'hello';
SELECT * FROM x WHERE x = 'hello' AND x <> 'world';
SELECT * FROM x WHERE x = 'hello' AND x > 'a';
SELECT * FROM x WHERE x = 'hello' AND x >= 'hello';
SELECT * FROM x WHERE x = 'hello' AND x <= 'hello';
SELECT * FROM x WHERE x = 'hello' AND x < 'z';
SELECT * FROM x WHERE x = 'hello' AND x <= 'a';
SELECT * FROM x WHERE x = 'hello' AND x < 'hello';
SELECT * FROM x WHERE x = 'hello' AND x > 'hello';
SELECT * FROM x WHERE x = 'hello' AND x >= 'z';
SELECT * FROM x WHERE x <> 'hello' AND x <= 'a';
SELECT * FROM x WHERE x <> 'hello' AND x < 'hello';
SELECT * FROM x WHERE x <> 'hello' AND x > 'hello';
SELECT * FROM x WHERE x <> 'world' AND x >= 'hello';
PRAGMA x = x;
CREATE TABLE x AS SELECT x AS x, 'foo' || CAST((x % 100) AS TEXT) AS x, 100000 - x AS x, CAST('1992-01-01' AS TIMESTAMP) + INTERVAL (x * 20) MINUTE AS x FROM x;
SELECT COUNT(*) FROM x WHERE x < 5 OR x = 'foo8';
SELECT x FROM x WHERE x = 5 OR x = 899999;
SELECT x FROM x WHERE x = CAST('1992-01-01 01:40:00' AS TIMESTAMP) OR x = CAST('2026-03-22 23:40:00' AS TIMESTAMP);
PRAGMA x;
CREATE TABLE x (x STRUCT(x INT, x BOOLEAN));
INSERT INTO x VALUES ({'x': 1, 'x': TRUE}), ({'x': 2, 'x': FALSE}), (NULL), ({'x': 3, 'x': TRUE}), ({'x': NULL, 'x': NULL});
SELECT * FROM x WHERE x.x < 2;
SELECT * FROM x WHERE x.x > 2;
SELECT * FROM x WHERE x.x < 2;
SELECT * FROM x WHERE x.x IS NULL;
SELECT * FROM x WHERE x.x = 2 OR x.x IS NULL ORDER BY 1 DESC NULLS FIRST;
CREATE TABLE x (x STRUCT(x TEXT, x TEXT));
INSERT INTO x VALUES ({'x': 'foo', 'x': 'bar'}), ({'x': 'baz', 'x': 'qux'}), (NULL), ({'x': 'foo', 'x': NULL});
SELECT * FROM x WHERE x.x = 'foo';
CREATE TABLE x (x STRUCT(x INT, x BOOLEAN));
INSERT INTO x SELECT {'x': x, 'x': x % 2 = 0} FROM x AS x;
SELECT MIN(x.x), MAX(x.x), COUNT(*) FROM x WHERE x.x > 150000;
CREATE TABLE x (x STRUCT(x STRUCT(x INT, x BOOLEAN), x STRUCT(x INT, x TEXT)));
INSERT INTO x VALUES ({'x': {'x': 1, 'x': FALSE}, 'x': {'x': 2, 'x': 'foo'}}), (NULL), ({'x': {'x': 3, 'x': TRUE}, 'x': {'x': 4, 'x': 'bar'}}), ({'x': {'x': NULL, 'x': TRUE}, 'x': {'x': 5, 'x': 'qux'}}), ({'x': NULL, 'x': NULL});
SELECT * FROM x WHERE x.x.x < 2;
SELECT * FROM x WHERE x.x.x = TRUE AND x.x.x = 5;
SELECT * FROM x WHERE x.x.x = 'bar';
COPY (SELECT * FROM x) TO '__TEST_DIR__/test_structs.parquet' WITH (FORMAT PARQUET);
SELECT * FROM x WHERE x.x < 2;
SELECT * FROM x WHERE x.x = TRUE OR x.x IS NULL ORDER BY ALL;
COPY (SELECT * FROM x) TO '__TEST_DIR__/string_structs.parquet' WITH (FORMAT PARQUET);
SELECT * FROM x WHERE x.x = 'foo';
COPY (SELECT * FROM x) TO '__TEST_DIR__/nested_structs.parquet' WITH (FORMAT PARQUET);
SELECT * FROM x WHERE x.x.x < 2;
SELECT * FROM x WHERE x.x.x = TRUE AND x.x.x = 5;
COPY (SELECT {'x': x} AS x FROM x AS x) TO '__TEST_DIR__/large.parquet' WITH (FORMAT 'parquet', ROW_GROUP_SIZE 3000);
SELECT MIN(x.x), MAX(x.x) FROM x WHERE x.x >= 500 AND x.x < 5000;
PRAGMA x;
CREATE TABLE x AS SELECT x AS x, x AS x FROM x AS x;
INSERT INTO x SELECT x, x + 1 FROM x;
INSERT INTO x SELECT DISTINCT (x), x - 1 FROM x ORDER BY x;
SELECT * FROM x WHERE x = 5 AND x >= x;
SELECT * FROM x WHERE x > 9 AND x >= x;
SELECT * FROM x WHERE x >= 10 AND x >= x;
SELECT * FROM x WHERE x < 1 AND x >= x;
SELECT * FROM x WHERE x <= 0 AND x >= x;
SELECT * FROM x WHERE x = 5 AND x <= x;
SELECT * FROM x WHERE x > 9 AND x <= x;
SELECT * FROM x WHERE x >= 10 AND x <= x;
SELECT * FROM x WHERE x < 1 AND x <= x;
SELECT * FROM x WHERE x <= 0 AND x <= x;
SELECT * FROM x WHERE x = 5 AND x > x;
SELECT * FROM x WHERE x > 9 AND x > x;
SELECT * FROM x WHERE x >= 10 AND x > x;
SELECT * FROM x WHERE x < 1 AND x > x;
SELECT * FROM x WHERE x <= 0 AND x > x;
SELECT * FROM x WHERE x = 5 AND x < x;
SELECT * FROM x WHERE x > 9 AND x < x;
SELECT * FROM x WHERE x >= 10 AND x < x;
SELECT * FROM x WHERE x < 1 AND x < x;
SELECT * FROM x WHERE x <= 0 AND x < x;
SELECT * FROM x WHERE x >= x AND x = 5;
SELECT * FROM x WHERE x >= x AND x > 9;
SELECT * FROM x WHERE x >= x AND x >= 10;
SELECT * FROM x WHERE x >= x AND x < 1;
SELECT * FROM x WHERE x >= x AND x <= 0;
SELECT * FROM x WHERE x <= x AND x = 5;
SELECT * FROM x WHERE x <= x AND x > 9;
SELECT * FROM x WHERE x <= x AND x >= 10;
SELECT * FROM x WHERE x <= x AND x < 1;
SELECT * FROM x WHERE x <= x AND x <= 0;
SELECT * FROM x WHERE x > x AND x = 5;
SELECT * FROM x WHERE x > x AND x > 9;
SELECT * FROM x WHERE x > x AND x >= 10;
SELECT * FROM x WHERE x > x AND x < 1;
SELECT * FROM x WHERE x > x AND x <= 0;
SELECT * FROM x WHERE x < x AND x = 5;
SELECT * FROM x WHERE x < x AND x > 9;
SELECT * FROM x WHERE x < x AND x >= 10;
SELECT * FROM x WHERE x < x AND x < 1;
SELECT * FROM x WHERE x < x AND x <= 0;
CREATE TABLE x (x BIGINT, x BIGINT);
INSERT INTO x SELECT * FROM x;
SELECT * FROM x, x WHERE x > 9 AND x <= x AND x >= x AND x < 11 ORDER BY 2 DESC, 4 DESC;
SELECT * FROM x, x WHERE x > 9 AND x >= x AND x >= x ORDER BY x;
SELECT * FROM x, x WHERE x > 9 AND x >= x AND x >= x AND x >= x;
SELECT * FROM x, x WHERE x < 1 AND x <= x AND x <= x AND x <= x;
PRAGMA x = x;
CREATE TEMPORARY TABLE x AS SELECT x AS x, LENGTH(x) AS x, x % 10000 AS x, 5 AS x, 10000 AS x FROM x;
SELECT COUNT(*) FROM x WHERE x > 500 OR x <= 700;
SELECT COUNT(*) FROM x WHERE (x > 500 AND x = 3) OR (x > 7000 AND x = 2);
SELECT COUNT(*) FROM x WHERE (x > 500 AND x = 3) OR (x > 400) OR (x > 300 AND x = 4) OR (x > 600 AND x > 300);
SELECT COUNT(*) FROM x WHERE (x > 500 AND x = 3) OR (x > 400) OR (x > 300 AND x = 4) OR (x > 600 AND x > 300);
SELECT COUNT(*) FROM x WHERE (x > 500 AND x = 3) OR (x > 400) OR (x > 300 AND x = 4) OR (x > 600 AND x > 300);
SELECT COUNT(*) FROM x WHERE (x > 500 AND x = 1) OR x < 2;
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x SELECT 1 FROM x;
INSERT INTO x SELECT 2 FROM x;
INSERT INTO x SELECT 3 FROM x;
SELECT SUM(x) FROM x WHERE x = 1;
SELECT SUM(x) FROM x WHERE x = 2;
SELECT SUM(x) FROM x WHERE x = 3;
SELECT SUM(x) FROM x WHERE x = 4;
SELECT SUM(x) FROM x WHERE x = 1;
SELECT SUM(x) FROM x WHERE x = 2;
SELECT SUM(x) FROM x WHERE x = 3;
SELECT SUM(x) FROM x WHERE x = 4;
INSERT INTO x SELECT 4 FROM x;
INSERT INTO x SELECT 5 FROM x;
SELECT SUM(x) FROM x WHERE x = 4;
SELECT SUM(x) FROM x WHERE x = 5;
SELECT SUM(x) FROM x WHERE x = 1;
SELECT SUM(x) FROM x WHERE x = 2;
SELECT SUM(x) FROM x WHERE x = 3;
SELECT SUM(x) FROM x WHERE x = 4;
SELECT SUM(x) FROM x WHERE x = 5;
SELECT SUM(x) FROM x WHERE x = 6;
PRAGMA x;
SELECT MAP([MAP([ARRAY_VALUE('1', NULL), ARRAY_VALUE(NULL, '2')], [1, 2])], [1]);
SELECT MAP([2], [{'x': MAP([ARRAY_VALUE('1', NULL), ARRAY_VALUE(NULL, '2')], [1, 2])}]);
SELECT [MAP([2], [{'x': MAP([ARRAY_VALUE('1', NULL), ARRAY_VALUE(NULL, '2')], [1, 2]), 'x': 2}])];
PRAGMA x;
SELECT FLATTEN(CAST(['a', 'b', 'c'] AS TEXT[3]));
SELECT FLATTEN(CAST([['a'], ['b'], ['c']] AS TEXT[1][3]));
PRAGMA x;
SELECT ARRAY_INNER_PRODUCT('foo', 'bar');
SELECT ARRAY_INNER_PRODUCT(CAST([1, 2, 3] AS INT[3]), CAST(['a', 'b', 'c'] AS TEXT[3]));
SELECT ARRAY_DISTANCE(CAST(['a', 'b'] AS TEXT[2]), CAST(['foo', 'bar'] AS TEXT[2]));
SELECT ARRAY_DISTANCE(CAST(['a', 'b'] AS TEXT[2]), CAST(['foo', 'bar'] AS TEXT[2]));
SELECT ARRAY_DISTANCE(CAST(['a', 'b'] AS TEXT[2]), CAST(['foo', 'bar'] AS TEXT[2]));
INSERT INTO x VALUES ([1, 2, 3]), ([1, 2, 4]), ([7, 8, 9]), ([-1, -2, -3]), (NULL);
INSERT INTO x VALUES ([1, 2, 3]), ([1, 2, 4]), ([7, 8, 9]), ([-1, -2, -3]), (NULL);
INSERT INTO x VALUES ([1, 2, 3]), ([1, 2, 4]), ([7, 8, 9]), ([-1, -2, -3]), (NULL);
INSERT INTO x VALUES ([1, 2, 3]), ([1, 2, 4]), ([7, 8, 9]), ([-1, -2, -3]), (NULL);
INSERT INTO x VALUES ([1, 2, 3]), ([1, 2, 4]), ([7, 8, 9]), ([-1, -2, -3]), (NULL);
PRAGMA x;
SELECT LENGTH(ARRAY_VALUE(1, 2, 3));
CREATE TABLE x (x INT[3]);
INSERT INTO x VALUES ([1, 2, 3]), ([4, 5, 6]);
SELECT LENGTH(x) FROM x;
SELECT LENGTH(CAST(NULL AS INT[3])) FROM x;
INSERT INTO x VALUES (NULL);
SELECT LENGTH(x) FROM x;
SELECT ARRAY_LENGTH(ARRAY_VALUE(ARRAY_VALUE(1, 2, 2), ARRAY_VALUE(3, 4, 3)), 1);
SELECT ARRAY_LENGTH(ARRAY_VALUE(ARRAY_VALUE(1, 2, 2), ARRAY_VALUE(3, 4, 3)), 2);
SELECT ARRAY_LENGTH(ARRAY_VALUE(ARRAY_VALUE(1, 2, 2), ARRAY_VALUE(3, 4, 3)), 3);
SELECT ARRAY_LENGTH(ARRAY_VALUE(ARRAY_VALUE(1, 2, 2), ARRAY_VALUE(3, 4, 3)), 0);
PRAGMA x;
SELECT LIST_DISTINCT(ARRAY_VALUE(1, 1, 2, 3, 3)) = LIST_DISTINCT([1, 1, 2, 3, 3]);
SELECT ARRAY_SORT(ARRAY_VALUE(3, 2, 1)) = ARRAY_SORT([3, 2, 1]);
SELECT LIST_SLICE(ARRAY_VALUE(1, 2, 3, 4, 5), 1, 3) = LIST_SLICE([1, 2, 3, 4, 5], 1, 3);
SELECT LIST_TRANSFORM(ARRAY_VALUE(3, 2, 1), x -> x + 1) = LIST_TRANSFORM([3, 2, 1], x -> x + 1);
SELECT LIST_FILTER(ARRAY_VALUE(3, 2, 1), x -> x > 1) = LIST_FILTER([3, 2, 1], x -> x > 1);
SELECT LIST_CONCAT(ARRAY_VALUE(1, 2, 3), ARRAY_VALUE(4, 5, 6));
SELECT LIST_CONCAT(ARRAY_VALUE(1, 2, 3), NULL), LIST_CONCAT(NULL, ARRAY_VALUE(4, 5, 6));
SELECT LIST_RESIZE(ARRAY_VALUE(1, 2), 3);
SELECT LIST_RESIZE(ARRAY_VALUE(1, 2), 1);
SELECT LIST_RESIZE(ARRAY_VALUE(1, 2), 0);
SELECT LIST_POSITION(ARRAY_VALUE(1, 2, 3), 2);
SELECT LIST_POSITION(ARRAY_VALUE(1, 2, 3), 4);
SELECT LIST_CONTAINS(ARRAY_VALUE(1, 2, 3), 2);
SELECT LIST_CONTAINS(ARRAY_VALUE(1, 2, 3), 4);
SELECT LIST_EXTRACT(ARRAY_VALUE(4, 5, 6), 2);
SELECT LIST_EXTRACT(ARRAY_VALUE(4, 5, 6), 4);
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
CREATE TABLE x (x INT);
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
ATTACH ':memory:' AS x;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
CREATE SCHEMA x.x;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
CREATE SCHEMA "x".x;
SELECT * FROM x LIMIT 1;
ATTACH ':memory:' AS x;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
CREATE TABLE x (x INT);
SELECT * FROM x LIMIT 1;
CREATE SCHEMA x.x;
CREATE TABLE x.x (x INT);
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
CREATE SCHEMA x.x;
CREATE TABLE x (x INT);
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
CREATE TABLE x (x INT);
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
CREATE TABLE x (x TEXT);
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
CREATE TABLE x (x INT);
SELECT * FROM x LIMIT 1;
CREATE SCHEMA x.x;
CREATE TABLE x.x (x INT);
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
SELECT * FROM x LIMIT 1;
PRAGMA x;
SELECT BASE64(ENCODE(''));
SELECT BASE64(ENCODE('a'));
SELECT BASE64(ENCODE('ab'));
SELECT BASE64(ENCODE('abc'));
SELECT BASE64(ENCODE('üäabcdef'));
SELECT BASE64(ENCODE('iJWERiuhjruhwuiehr8493231'));
SELECT BASE64(ENCODE('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890'));
SELECT TO_BASE64(ENCODE('base64 encoded string'));
SELECT FROM_BASE64(BASE64(ENCODE('')));
SELECT FROM_BASE64(BASE64(ENCODE('a')));
SELECT FROM_BASE64(BASE64(ENCODE('ab')));
SELECT FROM_BASE64(BASE64(ENCODE('abc')));
SELECT FROM_BASE64(BASE64(ENCODE('iJWERiuhjruhwuiehr8493231')));
SELECT FROM_BASE64(BASE64(ENCODE('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890')));
SELECT FROM_BASE64('AAAA');
SELECT FROM_BASE64('ab');
SELECT FROM_BASE64('üab');
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3), (NULL);
SELECT * FROM x ORDER BY CREATE_SORT_KEY(x, 'ASC NULLS LAST');
SELECT * FROM x ORDER BY CREATE_SORT_KEY(x, 'ASC NULLS FIRST');
SELECT * FROM x ORDER BY CREATE_SORT_KEY(x, 'DESC NULLS LAST');
SELECT * FROM x ORDER BY CREATE_SORT_KEY(x, 'DESC NULLS FIRST');
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('hello'), ('hello' || CHR(0) || CHR(0)), ('world'), (''), (NULL);
SELECT * FROM x ORDER BY CREATE_SORT_KEY(x, 'ASC NULLS LAST');
SELECT * FROM x ORDER BY CREATE_SORT_KEY(x, 'ASC NULLS FIRST');
SELECT * FROM x ORDER BY CREATE_SORT_KEY(x, 'DESC NULLS LAST');
SELECT * FROM x ORDER BY CREATE_SORT_KEY(x, 'DESC NULLS FIRST');
CREATE TABLE x (x INT[]);
INSERT INTO x VALUES ([1, 2, 3]), ([]), ([1]), ([2]), ([NULL]), (NULL);
SELECT x FROM x ORDER BY CREATE_SORT_KEY(x, 'ASC NULLS LAST');
SELECT x FROM x ORDER BY CREATE_SORT_KEY(x, 'DESC NULLS LAST');
SELECT x FROM x ORDER BY CREATE_SORT_KEY(x, 'ASC NULLS FIRST');
SELECT x FROM x ORDER BY CREATE_SORT_KEY(x, 'DESC NULLS FIRST');
SELECT x FROM x ORDER BY CREATE_SORT_KEY(x, 'DESC NULLS FIRST');
INSERT INTO x VALUES ({'x': 42, 'x': 'hello'}), ({'x': 42, 'x': 'hello' || CHR(0)}), ({'x': 43, 'x': ''}), (NULL), ({'x': 42, 'x': NULL}), ({'x': NULL, 'x': ''});
SELECT * FROM x ORDER BY CREATE_SORT_KEY(x, 'ASC NULLS LAST');
SELECT x.x, x.x FROM x ORDER BY CREATE_SORT_KEY(x.x, 'ASC NULLS LAST', x.x, 'ASC NULLS LAST');
SELECT * FROM x ORDER BY CREATE_SORT_KEY(x, 'DESC NULLS FIRST');
SELECT x.x, x.x FROM x ORDER BY CREATE_SORT_KEY(x.x, 'DESC NULLS FIRST', x.x, 'DESC NULLS FIRST');
SELECT x.x, x.x FROM x ORDER BY CREATE_SORT_KEY(x.x, 'DESC NULLS FIRST', x.x, 'DESC NULLS FIRST');
INSERT INTO x VALUES ([{'x': 42, 'x': 'hello'}]), ([]), ([{'x': 42, 'x': 'hello'}, {'x': 84, 'x': ''}]), ([{'x': 43, 'x': ''}]), (NULL), ([NULL]), ([{'x': 42, 'x': NULL}]), ([{'x': NULL, 'x': ''}]), ([{'x': 42, 'x': 'hello'}, {'x': 84, 'x': CHR(0)}]), ([{'x': 42, 'x': 'hello'}, NULL, {'x': 84, 'x': ''}]);
SELECT * FROM x ORDER BY CREATE_SORT_KEY(x, 'ASC NULLS LAST');
SELECT * FROM x ORDER BY CREATE_SORT_KEY(x, 'DESC NULLS FIRST');
CREATE TABLE x (x INT[][]);
INSERT INTO x VALUES ([]), ([[], []]), (NULL), ([NULL]), ([[NULL]]), ([[42, 84]]), ([[42], [84]]), ([[42], NULL, [84]]), ([[42], [NULL], [84]]), ([[1, 2, 3, 4, 5, 6, 7, 8, 9]]);
SELECT * FROM x ORDER BY CREATE_SORT_KEY(x, 'ASC NULLS LAST');
SELECT * FROM x ORDER BY CREATE_SORT_KEY(x, 'DESC NULLS FIRST');
CREATE TABLE x (x BLOB, x BLOB);
INSERT INTO x VALUES (NULL, NULL), ('hello\x00\x00\x00\x00\x00', NULL), ('hello', 'world'), ('hello\x01\x01\x01', 'world'), ('', ''), ('hello\x00\x00\x00\x00\x00', 'world'), ('hello\x00', NULL);
SELECT x FROM x ORDER BY CREATE_SORT_KEY(x, 'ASC NULLS LAST');
SELECT x FROM x ORDER BY CREATE_SORT_KEY(x, 'DESC NULLS FIRST');
SELECT * FROM x ORDER BY CREATE_SORT_KEY(x, 'ASC NULLS LAST', x, 'ASC NULLS LAST');
SELECT * FROM x ORDER BY CREATE_SORT_KEY(x, 'DESC NULLS FIRST', x, 'DESC NULLS FIRST');
CREATE TABLE x (x INT[3]);
INSERT INTO x VALUES ([1, 2, 3]), (NULL), ([NULL, NULL, NULL]), ([1, NULL, 3]), ([2, 3, 4]);
SELECT x FROM x ORDER BY CREATE_SORT_KEY(x, 'ASC NULLS LAST');
SELECT x FROM x ORDER BY CREATE_SORT_KEY(x, 'DESC NULLS FIRST');
PRAGMA x;
SELECT ENCODE('ü');
SELECT DECODE(ENCODE('ü'));
SELECT DECODE(CAST('\xF0\x9F\xA6\x86' AS BLOB));
SELECT DECODE(CAST('\x00' AS BLOB));
SELECT DECODE(CAST('\xFF' AS BLOB));
SELECT DECODE(ENCODE(x)) || x FROM (VALUES ('hello'), ('world')) AS x;
PRAGMA x;
SELECT ARRAY_SLICE(CAST('\x00\x01\x02\x03\x04\x05' AS BLOB), 2, 4);
SELECT ARRAY_SLICE(CAST('\x00\x01\x02\x03\x04\x05' AS BLOB), 0, 2);
SELECT ARRAY_SLICE(CAST('\x00\x01\x02\x03\x04\x05' AS BLOB), 0, 2);
SELECT ARRAY_SLICE(CAST('\x00\x01\x02\x03\x04\x05' AS BLOB), 4, 10);
SELECT OCTET_LENGTH(ARRAY_SLICE(CAST('\x00\x01\x02\x03\x04\x05' AS BLOB), 4, 3));
SELECT ARRAY_SLICE(CAST('\x00\x01\x02\x03\x04\x05' AS BLOB), 2, -2);
SELECT ARRAY_SLICE(CAST('\x00\x01\x02\x03\x04\x05' AS BLOB), -4, -2);
SELECT ARRAY_SLICE(CAST('\x00\xF0\x9F\xA6\x86\x00' AS BLOB), 2, 3);
SELECT ARRAY_SLICE(CAST('\x00\xF0\x9F\xA6\x86\x00' AS BLOB), 4, 6);
SELECT ARRAY_SLICE(CAST(NULL AS BLOB), 4, 6);
SELECT ARRAY_SLICE('hello world', 1, 8, 2);
PRAGMA x;
SELECT CAST('aaa\x80' AS BLOB) || CAST('aaa\x80' AS BLOB);
SELECT TYPEOF(CAST('aaa\x80' AS BLOB) || CAST('aaa\x80' AS BLOB));
SELECT CONCAT(CAST('aaa\x80' AS BLOB), CAST('aaa\x80' AS BLOB));
SELECT TYPEOF(CONCAT(CAST('aaa\x80' AS BLOB), CAST('aaa\x80' AS BLOB)));
PRAGMA x;
CREATE TABLE x (x DATE);
INSERT INTO x VALUES (CAST('1992-01-01' AS DATE));
SELECT CAST('2008-12-25' AS DATE) + INTERVAL (INTERVAL '5' DAY) DAY AS x;
SELECT CAST('2008-12-25 00:00:00' AS TIMESTAMP) + INTERVAL (INTERVAL '5' DAY) DAY AS x;
PRAGMA x;
CREATE TABLE x (x DATE);
SELECT EXTRACT(YEAR FROM x) FROM x;
SELECT EXTRACT(MONTH FROM x) FROM x;
SELECT EXTRACT(DAY FROM x) FROM x;
SELECT EXTRACT(DECADE FROM x) FROM x;
SELECT EXTRACT(CENTURY FROM x) FROM x;
SELECT EXTRACT(MILLENNIUM FROM x) FROM x;
SELECT EXTRACT(MICROSECONDS FROM x) FROM x;
SELECT EXTRACT(MILLISECONDS FROM x) FROM x;
SELECT EXTRACT(SECOND FROM x) FROM x;
SELECT EXTRACT(MINUTE FROM x) FROM x;
SELECT EXTRACT(HOUR FROM x) FROM x;
SELECT EXTRACT(EPOCH FROM x) FROM x;
SELECT EXTRACT(DOW FROM x) FROM x;
SELECT EXTRACT(ISODOW FROM x) FROM x;
SELECT EXTRACT(WEEK FROM x) FROM x;
SELECT EXTRACT(DOY FROM x) FROM x;
SELECT EXTRACT(QUARTER FROM x) FROM x;
SELECT YEARWEEK(x) FROM x;
SELECT DAYOFMONTH(x) FROM x;
SELECT WEEKDAY(x) FROM x;
SELECT WEEKOFYEAR(x) FROM x;
PRAGMA x;
INSERT INTO x VALUES (CAST('1992-01-01' AS DATE)), (CAST('2000-12-31' AS DATE));
SELECT STATS(EXTRACT(YEAR FROM x)) FROM x LIMIT 1;
SELECT STATS(EXTRACT(MONTH FROM x)) FROM x LIMIT 1;
SELECT STATS(EXTRACT(DAY FROM x)) FROM x LIMIT 1;
SELECT STATS(EXTRACT(DECADE FROM x)) FROM x LIMIT 1;
SELECT STATS(EXTRACT(CENTURY FROM x)) FROM x LIMIT 1;
SELECT STATS(EXTRACT(MILLENNIUM FROM x)) FROM x LIMIT 1;
SELECT STATS(EXTRACT(MICROSECONDS FROM x)) FROM x LIMIT 1;
SELECT STATS(EXTRACT(MILLISECONDS FROM x)) FROM x LIMIT 1;
SELECT STATS(EXTRACT(SECOND FROM x)) FROM x LIMIT 1;
SELECT STATS(EXTRACT(MINUTE FROM x)) FROM x LIMIT 1;
SELECT STATS(EXTRACT(HOUR FROM x)) FROM x LIMIT 1;
SELECT STATS(EXTRACT(DOW FROM x)) FROM x LIMIT 1;
SELECT STATS(EXTRACT(ISODOW FROM x)) FROM x LIMIT 1;
SELECT STATS(EXTRACT(WEEK FROM x)) FROM x LIMIT 1;
SELECT STATS(EXTRACT(DOY FROM x)) FROM x LIMIT 1;
SELECT STATS(EXTRACT(QUARTER FROM x)) FROM x LIMIT 1;
SELECT STATS(YEARWEEK(x)) FROM x LIMIT 1;
SELECT STATS(DAYOFMONTH(x)) FROM x LIMIT 1;
SELECT STATS(WEEKDAY(x)) FROM x LIMIT 1;
SELECT STATS(WEEKOFYEAR(x)) FROM x LIMIT 1;
PRAGMA x;
CREATE TABLE x (x TIMESTAMP);
INSERT INTO x VALUES ('2016-12-16T00:00:00.000Z');
INSERT INTO x VALUES ('2020-02-17T23:59:59.998Z');
INSERT INTO x VALUES ('2020-02-17T23:59:59.999Z');
INSERT INTO x VALUES ('2020-02-18T00:00:00.000Z');
SELECT * FROM x WHERE (DATE_TRUNC('DAY', x.x) < (CAST('2020-02-17T23:59:59.999Z' AS TIMESTAMP))) ORDER BY 1;
PRAGMA x;
CREATE TABLE x (x TIMESTAMP);
SELECT DATE_TRUNC('DAY', x) FROM x;
SELECT DATE_TRUNC('MILLISECONDS', CAST('-2005205-7-28' AS DATE));
SET x = 'nulls_first';
PRAGMA x;
CREATE TABLE x (x DATE, x TEXT);
INSERT INTO x VALUES ('1992-01-01', 'year'), ('1992-03-03', 'month'), ('1992-05-05', 'day'), ('2022-01-01', 'isoyear'), ('044-03-15 (BC)', 'millennium'), ('infinity', 'century'), ('-infinity', 'decade'), (NULL, 'weekday');
INSERT INTO x VALUES ('1992-01-01', 'year'), ('1992-03-03', 'month'), ('1992-05-05', 'day'), ('2022-01-01', 'isoyear'), ('044-03-15 (BC)', 'millennium'), ('infinity', 'century'), ('-infinity', 'decade'), (NULL, 'weekday');
INSERT INTO x VALUES ('${partcode}');
SELECT DATE_PART(CAST(NULL AS TEXT), CAST(NULL AS TIMESTAMP)) FROM x;
SELECT DATE_PART(x, CAST(NULL AS TIMESTAMP)) FROM x;
SELECT DATE_PART(NULL, x) FROM x;
SELECT DATE_PART(x, CAST('1992-01-01' AS DATE)) FROM x;
SELECT DATE_PART('year', x) FROM x;
SELECT DATE_PART('isoyear', x) FROM x;
SELECT DATE_PART(x, x) FROM x;
SELECT DATE_PART('era', x) FROM x;
SELECT DATE_PART('julian', x) FROM x;
SELECT DATE_PART('timezone', x) FROM x;
SELECT DATE_PART('timezone_hour', x) FROM x;
SELECT DATE_PART('timezone_minute', x) FROM x;
SELECT DATE_PART(NULL, CAST(x AS TIMESTAMP)) FROM x;
SELECT DATE_PART(x, CAST('1992-01-01' AS TIMESTAMP)) FROM x;
SELECT DATE_PART('year', CAST(x AS TIMESTAMP)) FROM x;
SELECT DATE_PART('isoyear', CAST(x AS TIMESTAMP)) FROM x;
SELECT DATE_PART(x, CAST(x AS TIMESTAMP)) FROM x;
SELECT DATE_PART('era', CAST(x AS TIMESTAMP)) FROM x;
SELECT DATE_PART('timezone', CAST(x AS TIMESTAMP)) FROM x;
SELECT DATE_PART('timezone_hour', CAST(x AS TIMESTAMP)) FROM x;
SELECT DATE_PART('timezone_minute', CAST(x AS TIMESTAMP)) FROM x;
SELECT DATE_PART('year', CAST(x AS DATE)) * 10 FROM x AS x WHERE x = '2050-12-31';
SELECT TIMEZONE(INTERVAL '4' MINUTE, CAST('12:15:37.123456-08' AS TIMETZ));
SELECT LAST_DAY(CAST('1900-02-12' AS DATE)), LAST_DAY(CAST('1992-02-12' AS DATE)), LAST_DAY(CAST('2000-02-12' AS DATE));
SELECT LAST_DAY(x) FROM x;
SELECT LAST_DAY(CAST(x AS TIMESTAMP)) FROM x;
SELECT MONTHNAME(x) FROM x;
SELECT DAYNAME(x) FROM x;
SELECT YEARWEEK(x) FROM x;
SELECT DAYOFMONTH(x) FROM x;
SELECT WEEKDAY(x) FROM x;
SELECT WEEKOFYEAR(x) FROM x;
SELECT JULIAN(x) FROM x;
SELECT DATE_PART('quarter', CAST('1992-01-20' AS DATE)), DATE_PART('quarter', CAST('1992-02-20' AS DATE)), DATE_PART('quarter', CAST('1992-03-20' AS DATE)), DATE_PART('quarter', CAST('1992-04-20' AS DATE)), DATE_PART('quarter', CAST('1992-05-20' AS DATE)), DATE_PART('quarter', CAST('1992-06-20' AS DATE)), DATE_PART('quarter', CAST('1992-07-20' AS DATE)), DATE_PART('quarter', CAST('1992-08-20' AS DATE)), DATE_PART('quarter', CAST('1992-09-20' AS DATE)), DATE_PART('quarter', CAST('1992-10-20' AS DATE)), DATE_PART('quarter', CAST('1992-11-20' AS DATE)), DATE_PART('quarter', CAST('1992-12-20' AS DATE));
SELECT DATE_PART('quarter', CAST('1992-01-20' AS DATE)), DATE_PART('quarter', CAST('1992-02-20' AS DATE)), DATE_PART('quarter', CAST('1992-03-20' AS DATE)), DATE_PART('quarter', CAST('1992-04-20' AS DATE)), DATE_PART('quarter', CAST('1992-05-20' AS DATE)), DATE_PART('quarter', CAST('1992-06-20' AS DATE)), DATE_PART('quarter', CAST('1992-07-20' AS DATE)), DATE_PART('quarter', CAST('1992-08-20' AS DATE)), DATE_PART('quarter', CAST('1992-09-20' AS DATE)), DATE_PART('quarter', CAST('1992-10-20' AS DATE)), DATE_PART('quarter', CAST('1992-11-20' AS DATE)), DATE_PART('quarter', CAST('1992-12-20' AS DATE));
SELECT x, EPOCH_NS(x) FROM x WHERE x <> '0044-03-15 (BC)' OR x IS NULL ORDER BY ALL;
SELECT x, EPOCH_US(x) FROM x ORDER BY ALL;
SELECT x, EPOCH_MS(x) FROM x ORDER BY ALL;
SELECT x, NANOSECOND(x) FROM x ORDER BY ALL;
SELECT x, DATE_PART('${partcode}', x) AS x, DATE_PART(['${partcode}'], x) AS x FROM x WHERE x IS DISTINCT FROM x['${partcode}'];
SELECT x, DATE_PART(['year', 'month', 'day', 'epoch'], x) AS x FROM x ORDER BY 1;
SELECT x, DATE_PART(['era', 'millennium', 'century', 'decade', 'quarter'], x) AS x FROM x ORDER BY 1;
SELECT x, DATE_PART(['weekday', 'isodow', 'doy', 'julian'], x) AS x FROM x ORDER BY 1;
SELECT DATE_PART(['weekday', 'isodow', 'doy', 'julian'], CAST('2022-01-01' AS DATE)) AS x;
SELECT x, DATE_PART(['isoyear', 'week', 'yearweek'], x) AS x FROM x ORDER BY 1;
SELECT x, DATE_PART(['year', 'month', 'day'], x) AS x FROM x WHERE x = 'day' ORDER BY 1;
SELECT x, DATE_PART(['${datepart}'], x) AS x FROM x ORDER BY 1;
SELECT DATE_PART(['hour', 'minute'], CAST('2023-09-17' AS DATE)) AS x;
SELECT DATE_PART(['hour', 'minute'], CAST('2023-09-17' AS DATE)) AS x;
SELECT DATE_PART(['hour', 'minute'], CAST('2023-09-17' AS DATE)) AS x;
SELECT DATE_PART(['hour', 'minute'], CAST('2023-09-17' AS DATE)) AS x;
WITH x AS (SELECT CAST(NULL AS TEXT) AS x FROM x) SELECT DATE_PART(x, CAST('2019-01-06 04:03:02' AS TIMESTAMP)) FROM x;
PRAGMA x;
CREATE TABLE x (x DATE, x TEXT);
CREATE TABLE x (x TIMESTAMP, x TEXT);
INSERT INTO x VALUES ('1992-12-02', 'year'), ('1993-03-03', 'month'), ('1994-05-05', 'day'), ('2022-01-01', 'isoyear');
INSERT INTO x VALUES ('-infinity', 'year'), ('1992-02-02 02:02:03', 'millennium'), ('1992-02-02 02:02:03', 'century'), ('1992-02-02 02:02:03', 'decade'), ('1992-02-02 02:02:03', 'year'), ('1992-02-02 02:02:03', 'quarter'), ('1992-02-02 02:02:03', 'month'), ('1992-02-02 02:02:03', 'week'), ('1992-02-02 02:02:03', 'day'), ('1992-02-02 02:02:03', 'hour'), ('1992-02-02 02:02:03', 'minute'), ('1992-02-02 02:02:03', 'second'), ('1992-02-02 02:02:03', 'milliseconds'), ('1992-02-02 02:02:03', 'microseconds'), ('infinity', 'month');
SELECT DATE_TRUNC('NULL', CAST(NULL AS TIMESTAMP)) FROM x;
SELECT DATE_TRUNC('SECOND', CAST(NULL AS TIMESTAMP)) FROM x;
SELECT DATE_TRUNC('NULL', x) FROM x;
SELECT DATE_TRUNC('NULL', CAST(NULL AS TIMESTAMP)) FROM x LIMIT 3;
SELECT DATE_TRUNC('SECOND', CAST(NULL AS TIMESTAMP)) FROM x LIMIT 3;
SELECT DATE_TRUNC('NULL', x) FROM x LIMIT 3;
SELECT DATE_TRUNC('MONTH', CAST('1992-02-02' AS DATE)) FROM x LIMIT 1;
SELECT DATE_TRUNC('SECOND', x) FROM x;
SELECT DATE_TRUNC('SECOND', x) FROM x;
SELECT DATE_TRUNC('SECOND', x) FROM x;
SELECT DATE_TRUNC('MINUTE', CAST('1992-02-02 04:03:02' AS TIMESTAMP)) FROM x LIMIT 1;
SELECT DATE_TRUNC('SECOND', x) FROM x;
SELECT DATE_TRUNC('SECOND', CAST(x AS DATE)) FROM x;
SELECT DATE_TRUNC('WEEK', CAST('2020-01-01 04:03:02' AS TIMESTAMP)) FROM x LIMIT 1;
SELECT DATE_TRUNC('WEEK', CAST('2019-01-06 04:03:02' AS TIMESTAMP)) FROM x LIMIT 1;
SELECT DATE_TRUNC('YEARWEEK', CAST('2020-01-01 04:03:02' AS TIMESTAMP)) FROM x LIMIT 1;
SELECT DATE_TRUNC('YEARWEEK', CAST('2019-01-06 04:03:02' AS TIMESTAMP)) FROM x LIMIT 1;
SELECT DATE_TRUNC('QUARTER', CAST('2020-12-02 04:03:02' AS TIMESTAMP)) FROM x LIMIT 1;
SELECT DATE_TRUNC('QUARTER', CAST('2019-01-06 04:03:02' AS TIMESTAMP)) FROM x LIMIT 1;
SELECT DATE_TRUNC('MILLENNIUM', CAST('1996-01-06 04:03:02' AS TIMESTAMP)) FROM x LIMIT 1;
SELECT DATE_TRUNC('CENTURY', CAST('2019-01-06 04:03:02' AS TIMESTAMP)) FROM x LIMIT 1;
SELECT DATE_TRUNC('DECADE', CAST('2019-01-06 04:03:02' AS TIMESTAMP)) FROM x LIMIT 1;
SELECT DATE_TRUNC('YEAR', CAST('2019-01-06 04:03:02' AS TIMESTAMP)) FROM x LIMIT 1;
SELECT DATE_TRUNC('DAY', CAST('2019-01-06 04:03:02' AS TIMESTAMP)) FROM x LIMIT 1;
SELECT DATE_TRUNC('HOUR', CAST('2019-01-06 04:03:02' AS TIMESTAMP)) FROM x LIMIT 1;
SELECT DATE_TRUNC('MILLISECONDS', CAST('2019-01-06 04:03:02.123456' AS TIMESTAMP)) FROM x LIMIT 1;
SELECT DATE_TRUNC('MICROSECONDS', CAST('2019-01-06 04:03:02.123456' AS TIMESTAMP));
SELECT DATE_TRUNC('EPOCH', CAST('2019-01-06 04:03:02.5' AS TIMESTAMP)) FROM x LIMIT 1;
SELECT CAST(x AS DATE), CAST(DATE_TRUNC('ISOYEAR', x) AS DATE) FROM x AS x;
SELECT DATE_TRUNC('DUCK', CAST('2019-01-06 04:03:02' AS TIMESTAMP)) FROM x LIMIT 1;
PRAGMA x;
SELECT STATS(DATE_TRUNC('YEAR', x)) FROM x LIMIT 1;
SELECT STATS(DATE_TRUNC('QUARTER', x)) FROM x LIMIT 1;
SELECT STATS(DATE_TRUNC('MONTH', x)) FROM x LIMIT 1;
SELECT STATS(DATE_TRUNC('DAY', x)) FROM x LIMIT 1;
SELECT STATS(DATE_TRUNC('${DAYPART}', x)) FROM x LIMIT 1;
WITH x AS (SELECT CAST(NULL AS TEXT) AS x FROM x) SELECT DATE_TRUNC('PART', CAST('2019-01-06 04:03:02' AS TIMESTAMP)) FROM x;
PRAGMA x;
CREATE TABLE x (x DATE);
INSERT INTO x VALUES ('1993-08-14'), (NULL);
SELECT EXTRACT(YEAR FROM x) FROM x;
SELECT EXTRACT(MONTH FROM x) FROM x;
SELECT EXTRACT(QUARTER FROM x) FROM x;
SELECT EXTRACT(DAY FROM x) FROM x;
SELECT EXTRACT(DECADE FROM x) FROM x;
SELECT EXTRACT(CENTURY FROM x) FROM x;
SELECT EXTRACT(DOW FROM x) FROM x;
SELECT EXTRACT(DOY FROM x) FROM x;
SELECT EXTRACT(EPOCH FROM x) FROM x;
SELECT EXTRACT(ISODOW FROM x) FROM x;
SELECT EXTRACT(WEEK FROM x) FROM x;
SELECT EXTRACT(YEARWEEK FROM x) FROM x;
SELECT EXTRACT(MILLENNIUM FROM x) FROM x;
SELECT EXTRACT(SECOND FROM x) FROM x;
SELECT EXTRACT(MINUTE FROM x) FROM x;
SELECT EXTRACT(HOUR FROM x) FROM x;
SELECT EXTRACT(MILLISECONDS FROM x) FROM x;
SELECT EXTRACT(MICROSECOND FROM x) FROM x;
SELECT EXTRACT(CENTURY FROM CAST('2000-10-10' AS DATE));
SELECT EXTRACT(CENTURY FROM CAST('2001-10-10' AS DATE));
SELECT EXTRACT(MILLENNIUM FROM CAST('2000-10-10' AS DATE));
SELECT EXTRACT(MILLENNIUM FROM CAST('2001-10-10' AS DATE));
SELECT EXTRACT(DOW FROM CAST('1970-01-01' AS DATE) + 0);
SELECT EXTRACT(DOW FROM CAST('1970-01-01' AS DATE) - 0);
SELECT EXTRACT(DOW FROM CAST('1970-01-01' AS DATE) + 1);
SELECT EXTRACT(DOW FROM CAST('1970-01-01' AS DATE) - 1);
SELECT EXTRACT(DOW FROM CAST('1970-01-01' AS DATE) + 2);
SELECT EXTRACT(DOW FROM CAST('1970-01-01' AS DATE) - 2);
SELECT EXTRACT(DOW FROM CAST('1970-01-01' AS DATE) + 3);
SELECT EXTRACT(DOW FROM CAST('1970-01-01' AS DATE) - 3);
SELECT EXTRACT(DOW FROM CAST('1970-01-01' AS DATE) + 4);
SELECT EXTRACT(DOW FROM CAST('1970-01-01' AS DATE) - 4);
SELECT EXTRACT(DOW FROM CAST('1970-01-01' AS DATE) + 5);
SELECT EXTRACT(DOW FROM CAST('1970-01-01' AS DATE) - 5);
SELECT EXTRACT(DOW FROM CAST('1970-01-01' AS DATE) + 6);
SELECT EXTRACT(DOW FROM CAST('1970-01-01' AS DATE) - 6);
SELECT EXTRACT(DOW FROM CAST('1793-05-26' AS DATE));
SELECT EXTRACT(ISODOW FROM CAST('1793-05-26' AS DATE));
SELECT EXTRACT(WEEK FROM CAST('2005-01-01' AS DATE));
SELECT EXTRACT(WEEK FROM CAST('2006-01-01' AS DATE));
SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE));
SELECT EXTRACT(WEEK FROM CAST('2008-01-01' AS DATE));
SELECT EXTRACT(WEEK FROM CAST('2009-01-01' AS DATE));
SELECT EXTRACT(WEEK FROM CAST('2010-01-01' AS DATE));
SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 0);
SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 7);
SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 14);
SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 21);
SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 28);
SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 35);
SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 42);
SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 49);
SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 56);
SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 63);
SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 70);
SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 77);
SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 84);
SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 91);
SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 98);
SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 105);
SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 112);
SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 119);
SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 126);
SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 133);
SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 140);
SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 147);
SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 154);
SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 161);
SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 168);
SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 175);
SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 182);
SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 189);
SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 196);
SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 203);
SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 210);
SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 217);
SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 224);
SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 231);
SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 238);
SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 245);
SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 252);
SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 259);
SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 266);
SELECT EXTRACT(WEEK FROM CAST('2007-01-01' AS DATE) + 273);
PRAGMA x;
SELECT CAST('1992-01-01' AS DATE) + INTERVAL (x) DAYS, MONTH(CAST('1992-01-01' AS DATE) + INTERVAL (x) DAYS) FROM x AS x;
SELECT CAST('1993-01-01' AS DATE) + INTERVAL (x) DAYS, MONTH(CAST('1993-01-01' AS DATE) + INTERVAL (x) DAYS) FROM x AS x;
PRAGMA x;
CREATE TABLE x AS SELECT CAST('1970-01-01' AS DATE) + CAST(CONCAT(x, ' years') AS INTERVAL) AS x FROM x AS x;
CREATE TABLE x AS SELECT CAST('1970-01-01' AS DATE) + CAST(CONCAT(x * 6, ' months') AS INTERVAL) AS x FROM x AS x;
SELECT EXTRACT(YEAR FROM x) FROM x ORDER BY 1;
SELECT EXTRACT(YEAR FROM x) FROM x ORDER BY 1;
SET x = 'nulls_first';
PRAGMA x;
SELECT STRFTIME(CAST('1992-01-01' AS DATE), '%Y');
SELECT STRFTIME('%Y', CAST('1992-01-01' AS DATE));
SELECT STRFTIME('%Y', CAST('1992-01-01' AS TIMESTAMP));
SELECT STRFTIME(CAST('1992-01-01' AS DATE), '(%Y)');
SELECT STRFTIME(CAST('1992-01-01' AS DATE), '%% %Y %%');
SELECT STRFTIME(CAST('1992-01-01' AS DATE), '%%%%%% %Y %%%%%%');
SELECT STRFTIME(CAST('1992-02-01' AS DATE), '%d/%m/%Y');
SELECT STRFTIME(CAST('1992-02-01' AS DATE), '%Y %Y %Y %Y');
CREATE TABLE x (x DATE);
SELECT STRFTIME(x, '%d/%m/%Y') FROM x ORDER BY x;
SELECT STRFTIME(CAST(NULL AS DATE), '%d/%m/%Y') FROM x ORDER BY x;
SELECT STRFTIME(x, NULL) FROM x ORDER BY x;
SELECT STRFTIME(CAST(NULL AS TIMESTAMP), NULL) FROM x;
SELECT STRFTIME(CAST(NULL AS TIMESTAMP), '%%%%%% %Y %%%%%%') FROM x;
SELECT STRFTIME(CAST('1992-01-01' AS DATE), 'hello world');
SELECT STRFTIME(CAST('2019-01-23' AS DATE), '42');
SELECT STRFTIME(CAST('2019-01-23' AS DATE), '42');
SELECT STRFTIME(CAST('2019-01-23' AS DATE), '42');
SELECT STRFTIME(x, CAST(x AS TEXT)) FROM x ORDER BY x;
SELECT STRFTIME(CAST('1992-01-01' AS DATE), '%');
SELECT STRFTIME(CAST('1992-01-01' AS DATE), '%R');
SELECT STRFTIME(STRPTIME('023', '%g'), '%g'), STRFTIME(STRPTIME('0', '%g'), '%g'), STRFTIME(STRPTIME('000', '%g'), '%g'), STRFTIME(STRPTIME('999', '%g'), '%g');
SELECT STRPTIME('-1', '%g');
SELECT STRPTIME('1000', '%g');
SELECT STRFTIME('%Y', '1992-01-01');
SET x = 'nulls_first';
PRAGMA x;
CREATE TABLE x (x DATE);
SELECT STRFTIME(x, '%a') FROM x ORDER BY x;
SELECT STRFTIME(x, '%A') FROM x ORDER BY x;
SELECT STRFTIME(x, '%w') FROM x ORDER BY x;
SELECT STRFTIME(x, '%u') FROM x ORDER BY x;
SELECT STRFTIME(x, '%d') FROM x ORDER BY x;
SELECT STRFTIME(x, '%-d') FROM x ORDER BY x;
SELECT STRFTIME(x, '%b') FROM x ORDER BY x;
SELECT STRFTIME(x, '%h') FROM x ORDER BY x;
SELECT STRFTIME(x, '%B') FROM x ORDER BY x;
SELECT STRFTIME(x, '%m') FROM x ORDER BY x;
SELECT STRFTIME(x, '%-m') FROM x ORDER BY x;
SELECT STRFTIME(x, '%y') FROM x ORDER BY x;
SELECT STRFTIME(x, '%-y') FROM x ORDER BY x;
SELECT STRFTIME(CAST('2001-01-01' AS DATE), '%-y');
SELECT STRFTIME(x, '%Y') FROM x ORDER BY x;
SELECT STRFTIME(x, '%G') FROM x ORDER BY x;
SELECT STRFTIME(x, '%H') FROM x ORDER BY x;
SELECT STRFTIME(x, '%-H') FROM x ORDER BY x;
SELECT STRFTIME(x, '%I') FROM x ORDER BY x;
SELECT STRFTIME(x, '%-I') FROM x ORDER BY x;
SELECT STRFTIME(x, '%p') FROM x ORDER BY x;
SELECT STRFTIME(x, '%M') FROM x ORDER BY x;
SELECT STRFTIME(x, '%-M') FROM x ORDER BY x;
SELECT STRFTIME(x, '%S') FROM x ORDER BY x;
SELECT STRFTIME(x, '%-S') FROM x ORDER BY x;
SELECT STRFTIME(x, '%f') FROM x ORDER BY x;
SELECT STRFTIME(x, '%z') FROM x ORDER BY x;
SELECT STRFTIME(x, '%Z') FROM x ORDER BY x;
SELECT STRFTIME(x, '%j') FROM x ORDER BY x;
SELECT STRFTIME(x, '%-j') FROM x ORDER BY x;
SELECT STRFTIME(x, '%U') FROM x ORDER BY x;
SELECT STRFTIME(x, '%W') FROM x ORDER BY x;
SELECT STRFTIME(x, '%V') FROM x ORDER BY x;
SELECT STRFTIME(x, '%c') FROM x ORDER BY x;
SELECT STRFTIME(x, 'XX%cXX') FROM x ORDER BY x;
SELECT STRFTIME(x, '%x') FROM x ORDER BY x;
SELECT STRFTIME(x, '%X') FROM x ORDER BY x;
SELECT STRFTIME(x, 'XX%cXX%xXX%XXX') FROM x ORDER BY x;
SELECT STRFTIME(CAST('-99999-01-01' AS DATE), '%Y');
SELECT STRFTIME(CAST('99999-01-01' AS DATE), '%Y');
SELECT STRFTIME(CAST('99999-01-01' AS DATE), '%y');
SELECT STRFTIME(CAST('-99999-01-01' AS DATE), '%y');
SELECT STRFTIME(CAST('-4869706-10-11' AS DATE), '%-yi');
SELECT STRFTIME(CAST('-99999-01-01' AS DATE), CAST(RANDOM() AS TEXT));
PRAGMA x;
CREATE TABLE x (x INTERVAL, x DATE, x INTERVAL, x DATE);
INSERT INTO x VALUES ('10 days', '-infinity', '0 days', '1970-01-05'), ('10 days', '3000-01-02 (BC)', '3 days', '3000-01-01 (BC)'), ('2 months', '1024-04-10 (BC)', '10 days', '1024-03-01 (BC)'), ('10 days', '0044-06-15 (BC)', '6 days', '0044-02-01 (BC)'), ('10 days', '0794-11-15', '1 week', '0790-11-01'), ('10 days', '1700-01-01', '0 days', '1700-01-05'), ('1 week', '1832-05-03', '0 days', '1970-05-05'), ('10 days', '1897-07-05', '2 days', '1970-06-07'), ('10 days', '1906-02-08', '-2 days', '1970-10-03'), ('2 months', '1946-09-14', '0 months', '1970-07-05'), ('2 months', '2000-01-01', '1 month 1 week', '1970-05-01'), ('2 months', '2000-01-03', '-1 month 1 week', '1970-08-20'), ('2 year', '2004-05-20', '6 months', '1970-12-31'), ('2 year', '2032-12-06', '-6 months', '1969-07-01'), ('10 days', 'infinity', '0 days', '1970-01-01');
SELECT x, TIME_BUCKET(CAST('3 days' AS INTERVAL), x) FROM x;
SELECT x, TIME_BUCKET(CAST('3 years' AS INTERVAL), x) FROM x;
SELECT x, TIME_BUCKET(CAST(NULL AS INTERVAL), x) FROM x;
SELECT x, x, TIME_BUCKET(x, x) FROM x;
SELECT x, TIME_BUCKET(CAST('4 days' AS INTERVAL), x, CAST('6 hours' AS INTERVAL)) FROM x;
SELECT x, TIME_BUCKET(CAST('2 weeks' AS INTERVAL), x, CAST('6 days' AS INTERVAL)) FROM x;
SELECT x, TIME_BUCKET(CAST('3 months' AS INTERVAL), x, CAST('6 days' AS INTERVAL)) FROM x;
SELECT x, TIME_BUCKET(CAST(NULL AS INTERVAL), x, CAST('6 days' AS INTERVAL)) FROM x;
SELECT TIME_BUCKET(CAST('3 months' AS INTERVAL), CAST(NULL AS DATE), CAST('6 days' AS INTERVAL)) FROM x;
SELECT x, TIME_BUCKET(CAST('3 months' AS INTERVAL), x, CAST(NULL AS INTERVAL)) FROM x;
SELECT x, x, x, TIME_BUCKET(x, x, SHIFT) FROM x;
SELECT x, TIME_BUCKET(CAST('5 days' AS INTERVAL), x, CAST('1970-01-04' AS DATE)) FROM x;
SELECT x, TIME_BUCKET(CAST('3 months' AS INTERVAL), x, CAST('1970-01-04' AS DATE)) FROM x;
SELECT x, TIME_BUCKET(CAST('3 years' AS INTERVAL), x, CAST('1970-01-04' AS DATE)) FROM x;
SELECT x, TIME_BUCKET(CAST(NULL AS INTERVAL), x, CAST('1970-01-04' AS DATE)) FROM x;
SELECT TIME_BUCKET(CAST('3 years' AS INTERVAL), CAST(NULL AS DATE), CAST('1970-01-04' AS DATE)) FROM x;
SELECT x, TIME_BUCKET(CAST('3 years' AS INTERVAL), x, CAST(NULL AS DATE)) FROM x;
SELECT x, x, x, TIME_BUCKET(x, x, ORIGIN) FROM x;
SELECT TIME_BUCKET(CAST('-3 hours' AS INTERVAL), CAST('2019-04-05' AS DATE));
SELECT TIME_BUCKET(CAST('-3 hours' AS INTERVAL), CAST('2019-04-05' AS DATE), CAST('1 hour 30 minutes' AS INTERVAL));
SELECT TIME_BUCKET(CAST('-3 hours' AS INTERVAL), CAST('2019-04-05' AS DATE), CAST('2019-04-05' AS DATE));
SELECT TIME_BUCKET(CAST('-1 month' AS INTERVAL), CAST('2019-04-05' AS DATE));
SELECT TIME_BUCKET(CAST('-1 month' AS INTERVAL), CAST('2019-04-05' AS DATE), CAST('1 week' AS INTERVAL));
SELECT TIME_BUCKET(CAST('-1 month' AS INTERVAL), CAST('2019-04-05' AS DATE), CAST('2019-04-05' AS DATE));
SELECT TIME_BUCKET(CAST('1 day - 172800 seconds' AS INTERVAL), CAST('2018-05-05' AS DATE));
SELECT TIME_BUCKET(CAST('1 day - 172800 seconds' AS INTERVAL), CAST('2018-05-05' AS DATE), CAST('1 hour 30 minutes' AS INTERVAL));
SELECT TIME_BUCKET(CAST('1 day - 172800 seconds' AS INTERVAL), CAST('2018-05-05' AS DATE), CAST('2018-05-05' AS DATE));
SELECT TIME_BUCKET(CAST('1 month 1 day' AS INTERVAL), CAST('2018-05-05' AS DATE));
SELECT TIME_BUCKET(CAST('1 month 1 day' AS INTERVAL), CAST('2018-05-05' AS DATE), CAST('1 week' AS INTERVAL));
SELECT TIME_BUCKET(CAST('1 month 1 day' AS INTERVAL), CAST('2019-05-05' AS DATE), CAST('2019-05-05' AS DATE));
SELECT TIME_BUCKET(CAST('3 days' AS INTERVAL), CAST('2019-05-05' AS DATE), CAST('2000000000 months' AS INTERVAL));
SELECT TIME_BUCKET(CAST('3 days' AS INTERVAL), CAST('2019-05-05' AS DATE), CAST('-2000000000 months' AS INTERVAL));
SELECT TIME_BUCKET(CAST('3 months' AS INTERVAL), CAST('2019-05-05' AS DATE), CAST('2000000000 months' AS INTERVAL));
SELECT TIME_BUCKET(CAST('3 months' AS INTERVAL), CAST('2019-05-05' AS DATE), CAST('-2000000000 months' AS INTERVAL));
SELECT TIME_BUCKET(CAST('1 month' AS INTERVAL), CAST('5877642-06-25 (BC)' AS DATE));
SELECT TIME_BUCKET(CAST('1 month' AS INTERVAL), CAST('5877642-07-01 (BC)' AS DATE));
SELECT TIME_BUCKET(CAST('1 week' AS INTERVAL), CAST('5877642-07-01 (BC)' AS DATE));
SELECT TIME_BUCKET(CAST('1 month' AS INTERVAL), CAST('5881580-07-10' AS DATE), CAST('-1 day' AS INTERVAL));
SELECT TIME_BUCKET(CAST('1 month' AS INTERVAL), CAST('5881580-07-10' AS DATE));
SELECT TIME_BUCKET(CAST('1 week' AS INTERVAL), CAST('290309-12-21 (BC)' AS DATE));
SELECT TIME_BUCKET(CAST('1 week' AS INTERVAL), CAST('290309-12-22 (BC)' AS DATE));
SELECT TIME_BUCKET(CAST('1 day' AS INTERVAL), CAST('290309-12-21 (BC)' AS DATE));
SELECT TIME_BUCKET(CAST('1 day' AS INTERVAL), CAST('290309-12-22 (BC)' AS DATE));
SELECT TIME_BUCKET(CAST('1 week' AS INTERVAL), CAST('294247-01-11' AS DATE));
SELECT TIME_BUCKET(CAST('1 week' AS INTERVAL), CAST('294247-01-10' AS DATE));
SELECT TIME_BUCKET(CAST('1 day' AS INTERVAL), CAST('294247-01-11' AS DATE));
SELECT TIME_BUCKET(CAST('1 day' AS INTERVAL), CAST('294247-01-10' AS DATE));
SELECT TIME_BUCKET(CAST('1 month 1 day' AS INTERVAL), CAST(NULL AS DATE));
SELECT TIME_BUCKET(CAST('1 month 1 day' AS INTERVAL), CAST(NULL AS DATE), CAST('6 days' AS INTERVAL));
SELECT TIME_BUCKET(CAST('1 month 1 day' AS INTERVAL), CAST(NULL AS DATE), CAST('2022-12-20' AS DATE));
SELECT TIME_BUCKET(CAST('-1 month' AS INTERVAL), CAST(NULL AS DATE));
SELECT TIME_BUCKET(CAST('-1 month' AS INTERVAL), CAST(NULL AS DATE), CAST('6 days' AS INTERVAL));
SELECT TIME_BUCKET(CAST('-1 month' AS INTERVAL), CAST('2022-12-22' AS DATE), CAST(NULL AS INTERVAL));
SELECT TIME_BUCKET(CAST('-1 month' AS INTERVAL), CAST(NULL AS DATE), CAST('2022-12-20' AS DATE));
SELECT TIME_BUCKET(CAST('-1 month' AS INTERVAL), CAST('2022-12-22' AS DATE), CAST(NULL AS DATE));
WITH x AS (SELECT CAST(NULL AS INTERVAL I), CAST(NULL AS DATE) AS x, CAST(NULL AS TIMESTAMP) AS x FROM x) SELECT TIME_BUCKET(x, x) FROM x;
WITH x AS (SELECT CAST(NULL AS INTERVAL I), CAST(NULL AS DATE) AS x, CAST(NULL AS TIMESTAMP) AS x FROM x) SELECT TIME_BUCKET(x, x) FROM x;
WITH x AS (SELECT CAST(NULL AS INTERVAL I), CAST(NULL AS DATE) AS x, CAST(NULL AS TIMESTAMP) AS x FROM x) SELECT TIME_BUCKET(x, x, I) FROM x;
WITH x AS (SELECT CAST(NULL AS INTERVAL I), CAST(NULL AS DATE) AS x, CAST(NULL AS TIMESTAMP) AS x FROM x) SELECT TIME_BUCKET(x, x, I) FROM x;
WITH x AS (SELECT CAST(NULL AS INTERVAL I), CAST(NULL AS DATE) AS x, CAST(NULL AS TIMESTAMP) AS x FROM x) SELECT TIME_BUCKET(x, x, DAY) FROM x;
WITH x AS (SELECT CAST(NULL AS INTERVAL I), CAST(NULL AS DATE) AS x, CAST(NULL AS TIMESTAMP) AS x FROM x) SELECT TIME_BUCKET(x, x, T) FROM x;
PRAGMA x;
CREATE TABLE x (x mood);
INSERT INTO x VALUES ('ok'), ('sad'), ('anxious'), ('happy');
SELECT ENUM_CODE(x) FROM x;
SELECT ENUM_CODE('bla');
PRAGMA x;
SELECT ENUM_FIRST(CAST(NULL AS rainbow));
SELECT ENUM_FIRST('bla');
PRAGMA x;
SELECT ENUM_LAST(CAST(NULL AS rainbow));
SELECT ENUM_LAST('bla');
PRAGMA x;
SELECT ENUM_RANGE(CAST(NULL AS rainbow));
SELECT ENUM_RANGE_BOUNDARY(CAST('orange' AS rainbow), CAST('green' AS rainbow));
SELECT ENUM_RANGE_BOUNDARY(CAST('green' AS rainbow), CAST('orange' AS rainbow));
SELECT ENUM_RANGE_BOUNDARY(NULL, CAST('green' AS rainbow));
SELECT ENUM_RANGE_BOUNDARY(CAST('orange' AS rainbow), NULL);
SELECT ENUM_RANGE_BOUNDARY(CAST('orange' AS rainbow), CAST('brl' AS currency));
SELECT ENUM_RANGE_BOUNDARY(NULL, NULL);
SELECT ENUM_LAST('bla');
SELECT ENUM_RANGE_BOUNDARY(CAST('orange' AS rainbow), 1);
SELECT ENUM_RANGE_BOUNDARY(1, CAST('orange' AS rainbow));
SELECT BIGCASE(x) FROM x AS x;
SELECT BIGCASE(x) FROM (VALUES (477), (832), (1), (3421), (8)) AS x;
SELECT SUM(BIGCASE(x)), SUM(x) FROM x AS x;
SELECT SUM(BIGCASE(x)), SUM(x) FROM x AS x;
PRAGMA x;
CREATE TABLE x AS SELECT * FROM x AS x;
SELECT CAN_CAST_IMPLICITLY(x, CAST(NULL AS BIGINT)) FROM x LIMIT 1;
SELECT CAN_CAST_IMPLICITLY(x, CAST(NULL AS INT128)) FROM x LIMIT 1;
SELECT CAN_CAST_IMPLICITLY(x, CAST(NULL AS INT)) FROM x LIMIT 1;
SELECT CAN_CAST_IMPLICITLY(x, CAST(NULL AS TEXT)) FROM x LIMIT 1;
PRAGMA x;
CREATE TABLE x AS SELECT * FROM x AS x;
SELECT * FROM x WHERE CASE WHEN x % 2 = 0 THEN 1 ELSE 0 END AND CASE WHEN x < 5 THEN 1 ELSE 0 END;
PRAGMA x;
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('1'), ('0'), ('');
SELECT x, CASE WHEN x <> '' AND CAST(SUBSTRING(x, 1, 1) AS INT) <= 0 THEN '0' WHEN x <> '' AND CAST(SUBSTRING(x, 1, 1) AS INT) > 0 THEN '1' ELSE '2' END AS x FROM x ORDER BY x;
PRAGMA x;
CREATE TABLE x AS SELECT x, 'thisisalongstring' || CAST(x AS TEXT) AS x FROM x AS x;
SELECT x, x, CASE WHEN x % 2 = 0 THEN x ELSE x END FROM x;
SELECT x, x, CASE WHEN x % 2 = 0 THEN x ELSE x END FROM (SELECT x, x || '_suffix' FROM x) AS x;
PRAGMA x;
SELECT CAST_TO_TYPE('  42', CAST(NULL AS INT));
SELECT CAST_TO_TYPE('hello', CAST(NULL AS INT));
SELECT TRY_TRIM_NULL(42) AS x, TRY_TRIM_NULL('  col  ') AS x, TRY_TRIM_NULL('') AS x;
CREATE TABLE x (x INT, x TEXT);
INSERT INTO x VALUES (42, ' hello '), (100, '   ');
SELECT TRY_TRIM_NULL(COLUMNS(*)) FROM x;
SELECT CAST_TO_TYPE(42, NULL);
PRAGMA x;
SELECT CONSTANT_OR_NULL(1, NULL), CONSTANT_OR_NULL(1, 10);
SELECT CONSTANT_OR_NULL(1, CASE WHEN x % 2 = 0 THEN NULL ELSE x END) FROM x AS x;
SELECT CONSTANT_OR_NULL(1, CASE WHEN x % 2 = 0 THEN NULL ELSE x END, CASE WHEN x % 2 = 1 THEN NULL ELSE x END) FROM x AS x;
SELECT CONSTANT_OR_NULL(1);
SELECT CONSTANT_OR_NULL();
PRAGMA x;
SELECT ERROR('test');
SELECT CASE WHEN x = 'foo' THEN 'Value is foo.' ELSE ERROR(CONCAT('Found unexpected value: ', x)) END AS x FROM (SELECT 'foo' AS x UNION ALL SELECT 'baz' AS x);
SELECT * FROM (SELECT 4 AS x) WHERE CASE WHEN x % 2 = 0 THEN TRUE ELSE ERROR(FORMAT('x must be even number but is {}', x)) END;
SELECT * FROM (SELECT 3 AS x) WHERE CASE WHEN x % 2 = 0 THEN TRUE ELSE ERROR(FORMAT('x must be even but is {}', x)) END;
SELECT 42 = ERROR('hello world');
SELECT ERROR('hello world') IS NULL;
PRAGMA x;
SELECT GREATEST(CAST('x' AS t), CAST('z' AS t)), CAST('x' AS t) > CAST('z' AS t);
SELECT LEAST((SELECT MAX("x") FROM x), (SELECT MIN("x") FROM x)) IS NOT DISTINCT FROM (SELECT MIN("x") FROM x);
SELECT GREATEST((SELECT MAX("x") FROM x), (SELECT MIN("x") FROM x)) IS NOT DISTINCT FROM (SELECT MAX("x") FROM x);
SELECT * FROM x;
SET x = 'nulls_first';
PRAGMA x;
SELECT 10 BETWEEN 10 AND 20;
SELECT 9 BETWEEN 10 AND 20;
SELECT 10 BETWEEN NULL AND 20;
SELECT 30 BETWEEN NULL AND 20;
SELECT 10 BETWEEN 10 AND NULL;
SELECT 9 BETWEEN 10 AND NULL;
SELECT NULL BETWEEN 10 AND 20;
SELECT NULL BETWEEN NULL AND 20;
SELECT NULL BETWEEN 10 AND NULL;
SELECT NULL BETWEEN NULL AND NULL;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3), (NULL);
SELECT x BETWEEN 1 AND 2 FROM x ORDER BY x;
SELECT x BETWEEN NULL AND 2 FROM x ORDER BY x;
SELECT x BETWEEN 2 AND NULL FROM x ORDER BY x;
SELECT COUNT(*) FROM x WHERE 10 BETWEEN 10 AND 20;
SELECT COUNT(*) FROM x WHERE 9 BETWEEN 10 AND 20;
SELECT COUNT(*) FROM x WHERE 10 BETWEEN NULL AND 20;
SELECT COUNT(*) FROM x WHERE 30 BETWEEN NULL AND 20;
SELECT COUNT(*) FROM x WHERE 10 BETWEEN 10 AND NULL;
SELECT COUNT(*) FROM x WHERE 9 BETWEEN 10 AND NULL;
SELECT COUNT(*) FROM x WHERE NULL BETWEEN 10 AND 20;
SELECT COUNT(*) FROM x WHERE NULL BETWEEN NULL AND 20;
SELECT COUNT(*) FROM x WHERE NULL BETWEEN 10 AND NULL;
SELECT COUNT(*) FROM x WHERE NULL BETWEEN NULL AND NULL;
SELECT COUNT(*) FROM x WHERE x BETWEEN 1 AND 2;
SELECT COUNT(*) FROM x WHERE x BETWEEN NULL AND 2;
SELECT COUNT(*) FROM x WHERE x BETWEEN 2 AND NULL;
SELECT COUNT(*) FROM x WHERE NULL BETWEEN -1 AND 1;
SELECT COUNT(*) FROM x WHERE 0 BETWEEN -1 AND 1;
SELECT COUNT(*) FROM x WHERE x BETWEEN x - 1 AND x + 1;
SELECT COUNT(*) FROM x WHERE x BETWEEN x - 1 AND 10;
SELECT COUNT(*) FROM x WHERE x BETWEEN NULL AND NULL;
SELECT COUNT(*) FROM x WHERE x BETWEEN x - 1 AND NULL;
SELECT COUNT(*) FROM x WHERE x BETWEEN 0 AND x + 1;
SELECT COUNT(*) FROM x WHERE x BETWEEN NULL AND x + 1;
SELECT COUNT(*) FROM x WHERE 1 BETWEEN x - 1 AND x + 1;
SELECT COUNT(*) FROM x WHERE NULL BETWEEN x - 1 AND x + 1;
SELECT COUNT(*) FROM x WHERE NULL BETWEEN x - 1 AND NULL;
SELECT COUNT(*) FROM x WHERE 1 BETWEEN x - 1 AND 100;
SELECT COUNT(*) FROM x WHERE 1 BETWEEN 0 AND x - 1;
SELECT * FROM x WHERE x >= 1 AND x < 2;
SELECT * FROM x WHERE x > 1 AND x <= 2;
SELECT * FROM x AS x WHERE x >= 1 AND x < 2;
SELECT * FROM x AS x WHERE x > 1 AND x <= 2;
CREATE TABLE x (x INT);
PRAGMA x;
SELECT CAST((RANDOM() * 10) AS INT) BETWEEN 6 AND 5;
SELECT NOT CAST((RANDOM() * 10) AS INT) BETWEEN 6 AND 5;
PRAGMA x;
SELECT TRUE IS TRUE;
SELECT FALSE IS TRUE;
SELECT NULL IS TRUE;
SELECT 42 IS TRUE;
SELECT 0 IS TRUE;
SELECT NOT TRUE IS TRUE;
SELECT NOT FALSE IS TRUE;
SELECT NOT NULL IS TRUE;
SELECT NOT 42 IS TRUE;
SELECT NOT 0 IS TRUE;
SELECT NULL IS NULL;
SELECT 42 IS NULL;
SELECT NOT NULL IS NULL;
SELECT NOT 42 IS NULL;
SELECT NOT 42 IS NULL;
SELECT NOT 42 IS NULL;
SELECT NOT 42 IS NULL;
SELECT NOT 42 IS NULL;
PRAGMA x;
SELECT CASE WHEN TRUE THEN 1 ELSE 10 END, CASE WHEN FALSE THEN 1 ELSE 10 END, CASE WHEN NULL THEN 1 ELSE 10 END;
SELECT CASE WHEN TRUE THEN 20 ELSE 2000 END, CASE WHEN FALSE THEN 20 ELSE 2000 END, CASE WHEN NULL THEN 20 ELSE 2000 END;
SELECT CASE WHEN TRUE THEN 20.5 ELSE 2000 END, CASE WHEN FALSE THEN 20 ELSE 2000.5 END, CASE WHEN NULL THEN 20 ELSE 2000.5 END;
SELECT CASE WHEN TRUE THEN CAST('2020-05-05' AS DATE) ELSE CAST('1996-11-05 10:11:56' AS TIMESTAMP) END, CASE WHEN FALSE THEN CAST('2020-05-05' AS DATE) ELSE CAST('1996-11-05 10:11:56' AS TIMESTAMP) END, CASE WHEN NULL THEN CAST('2020-05-05' AS DATE) ELSE CAST('1996-11-05 10:11:56' AS TIMESTAMP) END;
SELECT CASE WHEN TRUE THEN 'true' ELSE 'false' END, CASE WHEN FALSE THEN 'true' ELSE 'false' END, CASE WHEN NULL THEN 'true' ELSE 'false' END;
SELECT COALESCE(NULL, NULL), COALESCE(NULL, 10), COALESCE(1, 10);
SELECT COALESCE(NULL, 2000), COALESCE(20.5, 2000);
SELECT COALESCE(NULL, CAST('1996-11-05 10:11:56' AS TIMESTAMP)), COALESCE(CAST('2020-05-05' AS DATE), CAST('1996-11-05 10:11:56' AS TIMESTAMP));
SELECT COALESCE(NULL, 'not NULL'), COALESCE('NULL', 'not NULL');
SET x = 'nulls_first';
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3), (NULL);
SELECT * FROM x WHERE x IN (1, 2) ORDER BY x;
SELECT * FROM x WHERE x IN (1, 2, 3, 4, 5, 6, 7, 8) ORDER BY x;
SELECT x, x IN (1, 2, 3, 4, 5, 6, 7, 8) FROM x ORDER BY x;
SELECT x, NOT x IN (1, 3, 4, 5, 6, 7, 8) FROM x ORDER BY x;
SELECT x, x IN (1, 2, NULL, 4, 5, 6, 7, 8) FROM x ORDER BY x;
SELECT x, x IN (x + 1) FROM x ORDER BY x;
SELECT x, x IN (x + 1, 42, x) FROM x ORDER BY x;
SELECT x, 1 IN (x - 1, x, x + 1) FROM x ORDER BY x;
SELECT x, NOT 1 IN (x - 1, x, x + 1) FROM x ORDER BY x;
SELECT x, x IN (11, 12, 13, 14, 15, 16, 17, 18, 1, x) FROM x ORDER BY x;
SELECT x, NOT x IN (11, 12, 13, 14, 15, 16, 17, 18, 1, x) FROM x ORDER BY x;
SELECT x, 1 IN (11, 12, 13, 14, 15, 16, 17, 18, 1, x) FROM x ORDER BY x;
SELECT x, NOT 1 IN (11, 12, 13, 14, 15, 16, 17, 18, 1, x) FROM x ORDER BY x;
SELECT x, x IN ((SELECT MAX(x) FROM x), (SELECT MIN(x) FROM x)) FROM x ORDER BY x;
SELECT x, (SELECT MAX(x) FROM x WHERE x <> x.x), (SELECT MIN(x) FROM x WHERE x <= x.x) FROM x AS x ORDER BY x;
SELECT x, x IN ((SELECT MAX(x) FROM x WHERE x <> x.x), (SELECT MIN(x) FROM x WHERE x <= x.x)) FROM x AS x ORDER BY x;
SELECT 1 IN (1, 2, 3);
SELECT 1 IN (2, 2, 3);
SELECT 1 IN ();
SET x = 'nulls_first';
PRAGMA x;
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('HXR'), ('NUT'), ('ZZZ'), (NULL);
SELECT * FROM x WHERE x IN ('QOY', 'AAZ', 'AOR', 'VJR', 'ROL', 'KOS', 'JBC', 'EMZ', 'LQT', 'HYX', 'IYA', 'YAA', 'XMR', 'HGJ', 'LDR', 'MVT', 'XEQ', 'NPX', 'ZKV', 'HET', 'GZI', 'PLI', 'ABK', 'LOJ', 'KYB', 'UKG', 'PNY', 'SBV', 'VSJ', 'FAR', 'AXH', 'XWO', 'NKA', 'CPE', 'GSC', 'TWK', 'SXK', 'SUU', 'KPX', 'NXU', 'ZMR', 'BZG', 'CBO', 'SQA', 'VNE', 'NUT', 'LKF', 'IWL', 'CQE', 'UED', 'BHQ', 'RQR', 'FVG', 'EZZ', 'SRJ', 'UPA', 'JUV', 'AXP', 'JGL', 'HKC', 'CYM', 'AAK', 'WUM', 'NWK', 'DCQ', 'YXT', 'DQZ', 'WXB', 'YVG', 'YXL', 'FWG', 'PLN', 'YPK', 'UPA', 'GIC', 'IPS', 'WQB', 'NSR', 'WRT', 'WOP', 'JAX', 'XWZ', 'TIM', 'EAO', 'ANC', 'NAT', 'KFL', 'XJA', 'HUG', 'SVP', 'HVX', 'APA', 'RJI', 'QKP', 'MZB', 'MME', 'GJW', 'TBX', 'TRT', 'IRL', 'BUR', 'OWP', 'DAK', 'IGZ', 'OJL', 'BON', 'KLG', 'SSI', 'UOD', 'SCW', 'LGT', 'KTL', 'DPA', 'WTC', 'NSW', 'TEQ', 'HNU', 'GEI', 'OFK', 'UQB', 'QWI', 'ACS', 'MMR', 'EHZ', 'PXR', 'SPK', 'POO', 'CMF', 'UEE', 'QUK', 'BZR', 'ZBH', 'KJV', 'RIV', 'HOX', 'GZU', 'PQO', 'NLU', 'BRV', 'XND', 'APA', 'QXV', 'QEW', 'AJR', 'OYC', 'YTA', 'FMS', 'GSK', 'MCC', 'QVQ', 'FYD', 'QQJ', 'VBM', 'EYV', 'ELQ', 'KHI', 'HTU', 'KDQ', 'YRI', 'CEB', 'WGP', 'HIY', 'XSM', 'FTD', 'EHU', 'KFE', 'FCN', 'YRC', 'WFC', 'YRC', 'PZH', 'ZAG', 'AAM', 'UBM', 'JIH', 'CRQ', 'BOE', 'KLI', 'SAB', 'TYY', 'AGX', 'FEH', 'ZPX', 'PRU', 'GXA', 'HDC', 'UJG', 'OCO', 'BLZ', 'ZFH', 'LRN', 'GYF', 'FBR', 'OVH', 'XTL', 'FQZ', 'MKP', 'UKA', 'RMN', 'IWX', 'RYF', 'WTB', 'KWU', 'MKN', 'JFM', 'VUU', 'UTU', 'CLW', 'HKQ', 'SJA', 'ADT', 'RTN', 'ZPJ', 'NUX', 'HMY', 'RDA', 'YQQ', 'COL', 'JRB', 'PYV', 'YAU', 'AYM', 'STV', 'BDC', 'PIZ', 'CAK', 'VWS', 'GNU', 'SZA', 'PMP', 'WOV', 'LPL', 'PJY', 'FWV', 'CLH', 'IVC', 'YHN', 'QWB', 'SCE', 'PFN', 'WDI', 'PIN', 'QSN', 'WDE', 'JOZ', 'DPZ', 'WFX', 'IQS', 'TBZ', 'FXQ', 'PLM', 'WQH', 'BEJ', 'KFM', 'KLH', 'ZVT', 'MBV', 'JQT', 'RIR', 'FDB', 'AOV', 'GZV', 'CTN', 'YCY', 'XSB', 'UUI', 'EWM', 'MQR', 'SKE', 'ACO', 'AGP', 'RWD', 'XGR', 'PCO', 'OSY', 'QHG', 'YEW', 'DHQ', 'FNH', 'QWX', 'RSL', 'GKL', 'VEP', 'SME', 'TKH', 'JOQ', 'XZY', 'ZBF', 'UJP', 'UKD', 'QIZ', 'VQF', 'QUW', 'XGX', 'TPG', 'LYD', 'WBX', 'GRI', 'YDC', 'PJU', 'EFU', 'MZV', 'GBN', 'EJE', 'JYH', 'XTC', 'ZNI', 'JJE', 'XJD', 'SJU', 'SNP', 'ZLL', 'ZRL', 'CUC', 'EOQ', 'IZU', 'MZH', 'UMQ', 'ULS', 'ETH', 'AUT', 'NPL', 'IYB', 'OXQ', 'CXH', 'QRI', 'RHM', 'PNO', 'QGF', 'THK', 'KYU', 'OIE', 'OGO', 'UDS', 'OIS', 'DXJ', 'ETV', 'UWI', 'VLX', 'SOG', 'KNW', 'FOR', 'CCT', 'PHH', 'YNI', 'BOW', 'AJR', 'LJE', 'PUB', 'NPF', 'ELB', 'SIE', 'NAC', 'IZD', 'BQE', 'SUH', 'YQE', 'AVC', 'CIV', 'SOK', 'VRB', 'YUG', 'JFO', 'FCB', 'LEY', 'IPX', 'PEZ', 'BFV', 'BCV', 'RWZ', 'BHX', 'OJV', 'QPZ', 'QQX', 'ECG', 'MCD', 'UEI', 'IAE', 'VKD', 'QUJ', 'WYL', 'UOI', 'XDP', 'JTW', 'LFJ', 'AHH', 'XRL', 'QQM', 'AGA', 'RLE', 'MFI', 'UYI', 'HEM', 'KKJ', 'VLN', 'PYN', 'ZZA', 'WGI', 'PTH', 'BMR', 'MZK', 'IPY', 'SLA', 'JOS', 'ZLT', 'ZDF', 'XWY', 'OHJ', 'RPL', 'BPE', 'NVZ', 'YIF', 'HWM', 'BGM', 'VUO', 'YIW', 'UBS', 'EAW', 'AYN', 'UCE', 'UIB', 'DNV', 'YAQ', 'TBE', 'GMT', 'EOW', 'RWL', 'TYU', 'UTX', 'SRJ', 'FZZ', 'RJU', 'QJB', 'MFY', 'PID', 'RWM', 'PWH', 'PJS', 'BNK', 'IUO', 'POW', 'MBL', 'XMH', 'YWN', 'FTC', 'XME', 'MUS', 'XYD', 'BVI', 'FGU', 'BCJ', 'KRH', 'XPM', 'HDV', 'SQS', 'PFE', 'SIU', 'PZL', 'APT', 'CZK', 'HHL', 'EVI', 'GOE', 'RWG', 'PZF', 'DPS', 'GXN', 'WVC', 'ZDE', 'BDQ', 'WYP', 'PLB', 'SZZ', 'HPM', 'BUL', 'VRY', 'ZNG', 'XUS', 'SLU', 'SLQ', 'UOH', 'YHR', 'FGE', 'RJY', 'CMO', 'NGZ', 'PCG', 'PFN', 'EPG', 'ILE', 'RXF', 'NLD', 'PYW', 'WTG', 'HKL', 'IGB', 'YNF', 'TAL', 'MBR', 'YEK', 'VKO', 'ZGO', 'UKH', 'GJN', 'QCD', 'OQD', 'HEU', 'GWT', 'THS', 'LAS', 'JLU', 'TNV', 'UQB', 'YDO', 'ZFI', 'XBV', 'VYI', 'GAC', 'GDU', 'DLL', 'JXX', 'GUP', 'FUF', 'KQI', 'TLC', 'DAQ', 'OMN', 'FYT', 'GIZ', 'NON', 'UGU', 'CSI', 'NEO', 'SVA', 'ZBM', 'GGU', 'PFF', 'QFB', 'JZH', 'OBB', 'VHM', 'PAJ', 'BKD', 'JEI', 'ZQG', 'GBX', 'UCR', 'TXS', 'PAK', 'HYP', 'CAI', 'WJY', 'VLH', 'QLY', 'XKI', 'SDS', 'QEF', 'KKF', 'XBQ', 'FTE', 'CEX', 'PJM', 'RTA', 'TXQ', 'BSK', 'OXU', 'ELZ', 'WII', 'THG', 'RDY', 'LFS', 'JNY', 'ORJ', 'FXD', 'OTG', 'BUG', 'EDF', 'DDM', 'HTZ', 'IAA', 'RWR', 'XBL', 'PXV', 'FVH', 'OSB', 'UQW', 'CUP', 'OIF', 'VQZ', 'KCT', 'VWJ', 'IRP', 'UAZ', 'CCF', 'MCY', 'GGP', 'HDT', 'SZT', 'JSR', 'HDR', 'MQR', 'OCP', 'XQD', 'QYT', 'NSA', 'LPC', 'MGS', 'DAZ', 'SDQ', 'BMS', 'EJL', 'ADY', 'JFP', 'YQD', 'CIP', 'CST', 'ATU', 'JTD', 'HDI', 'JMF', 'LJO', 'SEC', 'ZCN', 'EMG', 'RLJ', 'AMV', 'BVT', 'IZV', 'DND', 'VCJ', 'HNY', 'DSI', 'DWM', 'EDI', 'LQO', 'NDN', 'GGA', 'EXH', 'XFP', 'NLU', 'DNC', 'OTA', 'KQD', 'JRJ', 'JXV', 'UAK', 'TNB', 'ZXJ', 'YTU', 'MMS', 'NCV', 'VIR', 'EUI', 'KND', 'PTL', 'LKF', 'FUT', 'VUX', 'PWI', 'ETZ', 'IHN', 'GYS', 'KAQ', 'UYN', 'HOQ', 'END', 'WHD', 'NMT', 'HEW', 'OBN', 'RDZ', 'SKP', 'LHN', 'HQS', 'YTY', 'GXW', 'EKC', 'BCD', 'BRQ', 'CSX', 'OCI', 'OZP', 'TBN', 'HHG', 'VFZ', 'WJY', 'VBT', 'LNT', 'YDL', 'KOC', 'IJF', 'HSB', 'USO', 'HOK', 'MEK', 'WXT', 'DRT', 'SNE', 'WAI', 'EMP', 'IGC', 'QPJ', 'GCF', 'CJW', 'ONH', 'XQO', 'KFY', 'CZQ', 'AUC', 'BQD', 'KBH', 'GFS', 'BVT', 'QLX', 'TYO', 'WWE', 'TXE', 'MQM', 'WNC', 'WKC', 'ZLW', 'RDJ', 'WCZ', 'UOV', 'IBT', 'HOQ', 'VIA', 'DPE', 'AJX', 'AYA', 'DEM', 'YDD', 'SOU', 'KZU', 'ATH', 'BPS', 'GTM', 'ALW', 'ODR', 'DBZ', 'KYG', 'CES', 'NWC', 'QER', 'FFA', 'UZS', 'GPL', 'MTD', 'TPI', 'GMR', 'WXV', 'YYY', 'FAX', 'MNL', 'JUS', 'SVJ', 'ZNX', 'QDQ', 'FIH', 'EXR', 'XSM', 'OQX', 'GUW', 'KEG', 'DHJ', 'GXH', 'ROZ', 'TCT', 'UNU', 'XGS', 'ODG', 'GZH', 'TZV', 'LFP', 'CDF', 'LJZ', 'RLL', 'QBY', 'CEQ', 'JWH', 'GYJ', 'LSJ', 'CQV', 'HJT', 'PVB', 'DLH', 'BFI', 'RIV', 'UCG', 'KOG', 'TXS', 'JDF', 'DKD', 'FOE', 'UIO', 'GDY', 'OIG', 'FWH', 'YSY', 'HGV', 'GIS', 'CMB', 'SDT', 'ROH', 'NMU', 'YHA', 'WDJ', 'VDV', 'LDE', 'PUR', 'UNS', 'NDY', 'YCZ', 'SAQ', 'OJW', 'OIP', 'IWC', 'WPT', 'PJI', 'PMP', 'CEB', 'WRZ', 'LSI', 'QUA', 'HMA', 'VWZ', 'KWX', 'RTA', 'IXL', 'XZH', 'UOT', 'IWF', 'LXN', 'VXY', 'DMU', 'EKC', 'JRF', 'EMA', 'LNG', 'JWT', 'NLH', 'EPH', 'FFJ', 'RTR', 'XJE', 'OAW', 'HSP', 'AFE', 'EPI', 'RSV', 'OIZ', 'BEC', 'ILJ', 'UPU', 'JZC', 'HGP', 'HLT', 'GSY', 'XGP', 'NYL', 'VHY', 'CQN', 'WEE', 'GFJ', 'LGE', 'IBM', 'NCI', 'OPR', 'TIO', 'DPL', 'TFD', 'XKJ', 'DWM', 'DPV', 'RIE', 'UKK', 'OBM', 'NLJ', 'VUM', 'IRE', 'DNR', 'KVP', 'PZX', 'FBD', 'GDI', 'YAW', 'MKG', 'EAX', 'CBM', 'TCH', 'LGX', 'UCY', 'EWE', 'ZUN', 'DPM', 'BUH', 'NQJ', 'RFX', 'XUI', 'BHB', 'BMM', 'MGZ', 'PTR', 'RUM', 'FVC', 'BRO', 'ZVP', 'YMV', 'PNX', 'WRO', 'KKR', 'WCE', 'UFT', 'QWG', 'UNY', 'IZE', 'ZFX', 'KBC', 'DPS', 'QYY', 'ZNO', 'DHR', 'GWP', 'UTY', 'CSO', 'SQH', 'TBU', 'CYF', 'ROH', 'GYF', 'BWT', 'RKM', 'WLV', 'FSB', 'EWV', 'DHJ', 'RPB', 'NVJ', 'LUF', 'TTV', 'WPT', 'APQ', 'IXF', 'HAQ', 'OVS', 'JTE', 'LOQ', 'PXF', 'MAZ', 'AHV', 'TZO', 'LHO', 'ATL', 'MII', 'LTR', 'KPQ', 'ZXP', 'JPI', 'GLF', 'VKG', 'CAM', 'GVX', 'JUO', 'YWZ', 'NNQ', 'RGV', 'CDS', 'CYA', 'QPX', 'HHG', 'DDF', 'YXE', 'ZKL', 'XDJ', 'HLC', 'ORZ', 'UEX', 'FKH', 'RWT', 'RKN', 'USW', 'UBC', 'QGT', 'MGN', 'WXC', 'ENU', 'RLW', 'OFP', 'XGN', 'PSX', 'JTD', 'LFK', 'PBI', 'BWD', 'JVG', 'HFG', 'WLM', 'XNC', 'HWH', 'FGZ', 'JEK', 'HRL', 'NBL', 'THW', 'WKI', 'IME', 'UIY', 'WAA', 'XQO', 'UUD', 'IRS', 'FBF', 'JZV', 'CCR', 'YLF', 'RXP', 'UIP', 'OGN', 'IID', 'ENW', 'XPL', 'PFE', 'MEX', 'GPH', 'RBW', 'JML', 'ZVR', 'YWL', 'QPJ', 'LYY', 'NKS', 'VIJ', 'SAZ', 'LNC', 'NGU', 'RRD', 'PJK', 'FOH', 'ORW', 'YLQ', 'GFG', 'NOW', 'IDV', 'WHE', 'RTH', 'NVL', 'BAQ', 'HAK', 'SKH', 'LTZ', 'HDF', 'SIB', 'PHY', 'PWZ', 'CWY', 'JNE', 'CXW', 'EPN', 'LAO', 'WEI', 'AGK', 'XJQ', 'ILR', 'CVO', 'MEX', 'BGD', 'AEK', 'DHK', 'KAC', 'DQL', 'WDA', 'GVU', 'RUN', 'XQU', 'EXU', 'WER', 'UBS', 'XOK', 'WML', 'XQM', 'XBW', 'VTT', 'SMF', 'DRX', 'XGZ', 'KXD', 'IVV', 'OIJ', 'KAW', 'SEW', 'URD', 'QAW', 'RFL', 'ZGP', 'VVR', 'ZLA', 'LXV', 'OWU', 'YGF', 'BJO', 'OTZ', 'RSD', 'GTT', 'CEP', 'HVH', 'ZNI', 'BHV', 'IKT', 'GCF', 'XYF', 'FOL', 'NLV', 'NFL', 'TOO', 'GYY', 'POS', 'JGL', 'BUE', 'DYK', 'VVV', 'RMJ', 'LBS', 'WSL', 'FHZ', 'RWB', 'DLC', 'XPL', 'YLW', 'OYK', 'HQN', 'MRA', 'QAJ', 'MIX', 'ICY', 'WZS', 'IJG', 'VYF', 'XON', 'AZB', 'RQC', 'AYK', 'CUV', 'JST', 'BNP', 'UCF', 'DIG', 'ANC', 'XVQ', 'CEC', 'TND', 'SHS', 'YTJ', 'XFX', 'TBI', 'JRE', 'WBD', 'ZVA', 'TSG', 'DYY', 'XUB', 'JDH', 'VSO', 'NMU', 'QWP', 'SKI', 'XMG', 'RVK', 'XVO', 'OAV', 'NYW', 'NRR', 'QRY', 'EBG', 'OYJ', 'ZDN', 'LLU', 'ACT', 'MYP', 'KUK', 'TDO', 'CUB', 'QHL', 'QRO', 'FTD', 'KBL', 'YEY', 'NQD', 'OAH', 'ACU', 'EDM', 'QYP', 'OUO', 'PDK', 'VSP', 'PKW', 'JZF', 'GAL', 'COS', 'RFL', 'DIM', 'MPZ', 'IZX', 'KBU', 'LVK', 'DTP', 'PWC', 'EUQ', 'ESR', 'PIL', 'PTW', 'DNF', 'VLW', 'NBA', 'DFW', 'RDK', 'PYF', 'NIA', 'LLQ', 'WUE', 'SLJ', 'TEF', 'GNC', 'FIC', 'EQD', 'ERL', 'IKZ', 'UKG', 'TNT', 'XCP', 'NRV', 'GVU', 'XFZ', 'VEL', 'GCR', 'XAE', 'GTN', 'VRZ', 'WSY', 'RKD', 'WIA', 'ZPB', 'EWE', 'AVT', 'EZD', 'YCN', 'TJY', 'PCS', 'PXA', 'EAR', 'CIE', 'PPO', 'PFP', 'PFJ', 'SZK', 'IBH', 'LQB', 'EDI', 'ELJ', 'OJS', 'QBC', 'GTV', 'GXH', 'MFG', 'QQO', 'PIK', 'LDF', 'KIX', 'CSV', 'MAP', 'ALA', 'KZH', 'QPA', 'BCG', 'DWQ', 'MUM', 'UJT', 'ZIK', 'XPU', 'CQL', 'DZH', 'ZGR', 'UCU', 'LAT', 'NXO', 'QYM', 'PNV', 'UTV', 'SGK', 'EXJ', 'NTQ', 'LPQ', 'RVT', 'GHZ', 'FSE', 'PGQ', 'WJL', 'JQI', 'IWL', 'SWW', 'DEQ', 'VLF', 'NUD', 'ZNG', 'DCR', 'LCI', 'NZK', 'QAK', 'GHL', 'UCZ', 'ESU', 'JQG', 'NJL', 'PPD', 'QGA', 'GSW', 'YDG', 'QNJ', 'EYF', 'NNZ', 'EAG', 'RFE', 'CBE', 'ENO', 'HDT', 'WFV', 'CFE', 'MGY', 'PAE', 'WUG', 'LPU', 'HZD', 'GFM', 'JHE', 'TPQ', 'DAO', 'KBZ', 'GBA', 'NFH', 'DDS', 'HYA', 'VWS', 'ZLG', 'XKO', 'HFE', 'OJS', 'ZNK', 'OAT', 'YFE', 'NYJ', 'RDP', 'NTN', 'BEW', 'IGK', 'AYV', 'QXZ', 'NJB', 'QYE', 'GGE', 'DVI', 'UFG', 'AWY', 'JAN', 'GPW', 'GYE', 'BKS', 'REI', 'XYZ', 'VTY', 'NCD', 'EMH', 'YZE', 'LKN', 'JFF', 'IHZ', 'KUE', 'VNJ', 'SAW', 'NWS', 'HTH', 'ZXC', 'IAW', 'EPV', 'ONR', 'NFN', 'KMQ', 'CCE', 'ASU', 'SYF', 'PIQ', 'EHB', 'IWX', 'TAV', 'PJV', 'KET', 'BCR', 'UTS', 'OCI', 'PBE', 'XDJ', 'XSN', 'CUS', 'XBF', 'ZQF', 'RTW', 'CJI', 'XPI', 'KGD', 'ZNS', 'JCM', 'SRD', 'ADD', 'NJY', 'TQU', 'RNK', 'IQR', 'FYF', 'VDQ', 'IUO', 'SXI', 'DRM', 'XSX', 'FBH', 'YQE', 'BTM', 'GZJ', 'JJR', 'ONH', 'NLJ', 'XVR', 'XCP', 'VLW', 'ISS', 'FDK', 'FAS', 'HDE', 'ETY', 'KIA', 'BJX', 'ZZM', 'EIB', 'HWD', 'HDY', 'QGB', 'BQH', 'PFT', 'MBI', 'NND', 'DRP', 'IWC', 'TFF', 'PDU', 'YTB', 'WHR', 'QNY', 'IUB', 'QZK', 'NXL', 'JOB', 'FEF', 'DZC', 'DAL', 'IJK', 'HBO', 'ZRR', 'JJH', 'MXI', 'YSP', 'BRV', 'JRA', 'JQE', 'XWQ', 'GVY', 'CEN', 'NYY', 'JCW', 'BIN', 'QGA', 'SCX', 'LZV', 'SPA', 'CRQ', 'RUJ', 'PYJ', 'BCG', 'QFR', 'QED', 'RLR', 'JXV', 'NIQ', 'WHL', 'UQJ', 'EPN', 'HEF', 'IUR', 'MCH', 'THC', 'WTN', 'OCP', 'DSM', 'LXW', 'ZQJ', 'FMU', 'VNW', 'IXM', 'BYF', 'NXY', 'CJO', 'IIY', 'CGW', 'PNE', 'WFH', 'SHG', 'SBO', 'XFA', 'KLO', 'YMJ', 'INZ', 'PMK', 'RYE', 'KHB', 'YXB', 'TZK', 'LES', 'ZZN', 'FXH', 'EMP', 'PDI', 'JIS', 'GQW', 'SMX', 'UCU', 'IFF', 'VZI', 'DPN', 'LIK', 'CJO', 'DOC', 'BJP', 'NUB', 'GPH', 'GRQ', 'SOU', 'TZH', 'WUN', 'PDC', 'EWB', 'YMX', 'OEF', 'MEB', 'QBU', 'JUQ', 'HEQ', 'UJF', 'QDF', 'MMK', 'ZVU', 'JRP', 'JOS', 'TCC', 'TIO', 'RPM', 'GVB', 'GOH', 'CUV', 'DUW', 'EAK', 'CII', 'PGT', 'CHN', 'HMM', 'RLO', 'ARC', 'EFW', 'HVX', 'HJV', 'OHY', 'GPG', 'MQO', 'GBU', 'YPD', 'FNW', 'MDP', 'KXQ', 'PSB', 'NVZ', 'BYC', 'IUC', 'URT', 'BVP', 'VZP', 'UTL', 'BXW', 'FKT', 'PGM', 'DGD', 'AIV', 'TMY', 'RUN', 'QYG', 'GXF', 'VPF', 'UNY', 'MOZ', 'INN', 'VEV', 'PWC', 'AWY', 'MKI', 'TXG', 'BQU', 'QAU', 'ILO', 'IBH', 'PCO', 'RDH', 'UNP', 'LLB', 'DER', 'YRP', 'MWZ', 'NIH', 'MCS', 'ZCL', 'IOI', 'UPU', 'MNS', 'JDR', 'OWF', 'XTA', 'OAZ', 'WCV', 'FFI', 'NLI', 'BFD', 'LDD', 'FZR', 'HNP', 'IRL', 'WEA', 'PDE', 'IEN', 'GGR', 'YUP', 'VWA', 'WEM', 'QPZ', 'ZBA', 'GLU', 'CUH', 'VDK', 'KLF', 'OLF', 'PMD', 'FLZ', 'JQV', 'SGP', 'JZZ', 'HIO', 'LFV', 'PTG', 'FEL', 'WNX', 'LDU', 'EXI', 'JMT', 'RID', 'TXZ', 'PGC', 'GLC', 'JLI', 'CLT', 'VDK', 'FBI', 'WSW', 'ELJ', 'YJY', 'YXU', 'XWC', 'MII', 'YXM', 'HCJ', 'JVC', 'RPF', 'NXE', 'UFO', 'BYH', 'EFA', 'EGO', 'XVS', 'VWG', 'LOY', 'LCG', 'TRQ', 'IKL', 'OQA', 'HTU', 'XNU', 'AZS', 'BOR', 'XWR', 'UQN', 'YFH', 'TDS', 'RLP', 'PHC', 'AYP', 'BVL', 'CQI', 'HSC', 'JRS', 'YZU', 'YFY', 'WEI', 'ITW', 'MYU', 'ORF', 'OTD', 'CAO', 'UJN', 'UFW', 'UUP', 'IQG', 'SEG', 'BAQ', 'KJD', 'DNG', 'BZL', 'DVT', 'KJY', 'XLW', 'TMH', 'DCX', 'MVJ', 'JFU', 'VCL', 'FQX', 'WRS', 'OXS', 'QGT', 'UPJ', 'QTI', 'AOU', 'CHR', 'AMC', 'VCN', 'OUC', 'JDK', 'CNL', 'HVI', 'WTS', 'VPC', 'THK', 'SVV', 'IGZ', 'ZPC', 'OBU', 'EQP', 'UMD', 'BQX', 'CKN', 'FOW', 'RGD', 'LNP', 'YEG', 'GVT', 'BSV', 'KKI', 'JEZ', 'GQH', 'DHB', 'TFV', 'TFS', 'WVS', 'ZFS', 'ZPG', 'PLN', 'OBM', 'BRE', 'HXC', 'JBF', 'GKA', 'RKS', 'PUS', 'XGS', 'QYD', 'IOK', 'DZR', 'IRX', 'NIJ', 'EAJ', 'SCY', 'KXB', 'VII', 'ETT', 'UPQ', 'JPW', 'ZTS', 'CZC', 'DFE', 'JLR', 'ZAC', 'XTQ', 'JZY', 'MUW', 'EXR', 'OQC', 'QLF', 'VAL', 'CBQ', 'SQO', 'HXA', 'SCI', 'ZAM', 'EDK', 'HVB', 'LSH', 'EOR', 'KZF', 'TLA', 'JIK', 'ULN', 'CJY', 'YKP', 'RQQ', 'XQJ', 'EFK', 'WEA', 'VHL', 'ANA', 'VYI', 'GTV', 'FRN', 'BXI', 'QYM', 'WUJ', 'FHW', 'RAH', 'RCK', 'RXY', 'KXC', 'IFA', 'OCZ', 'PTB', 'IHO', 'SDL', 'YEP', 'RFX', 'ZUR', 'FKV', 'WFA', 'VAF', 'ZHK', 'KZO', 'AAN', 'IME', 'MIF', 'VCG', 'BYQ', 'QOY', 'LSG', 'IRT', 'PUI', 'UAB', 'MPY', 'CKS', 'PZL', 'EUW', 'JIO', 'WXL', 'JEV', 'SBT', 'WUQ', 'GBH', 'QEG', 'ZCJ', 'OKQ', 'AAX', 'LJN', 'OYH', 'EIJ', 'ZNK', 'JIA', 'TDN', 'DPU', 'BTR', 'SEP', 'VKZ', 'HEX', 'WFB', 'DKR', 'FQH', 'CTQ', 'NPX', 'DHG', 'ZSN', 'ZYF', 'MLP', 'IUH', 'ZIX', 'UYI', 'SRK', 'GEG', 'SCW', 'TED', 'XOP', 'PML', 'RNK', 'KTA', 'KJJ', 'UXS', 'MRX', 'FJH', 'NRA', 'ZJJ', 'WGU', 'NPD', 'GPA', 'UBR', 'GXI', 'YQP', 'SEI', 'MOZ', 'UIR', 'SIH', 'EAP', 'IXV', 'EKD', 'YVX', 'PPZ', 'MBK', 'NTQ', 'BSZ', 'BVD', 'LMV', 'MDB', 'BOK', 'XLL', 'QJJ', 'CTH', 'BLQ', 'ZOR', 'RVD', 'MNW', 'OCC', 'FCN', 'MAK', 'OMZ', 'PLJ', 'QMP', 'PTZ', 'AXB', 'YJG', 'JZX', 'HUH', 'FOL', 'BUV', 'BEI', 'ZYN', 'JHS', 'JND', 'TIB', 'JMM', 'UTZ', 'GEZ', 'LTQ', 'IBJ', 'WOY', 'IGT', 'ZUV', 'MWP', 'GSJ', 'FET', 'LXM', 'ZBE', 'VTI', 'WLW', 'PYT', 'DJQ', 'NFU', 'BKX', 'MDD', 'YPX', 'SBG', 'TKI', 'QRU', 'IKG', 'SRQ', 'AOB', 'KHN', 'IZN', 'NQU', 'NQC', 'HVS', 'JCP', 'HUL', 'MXN', 'DOW', 'HXR', 'GZT', 'GNL', 'INF', 'AOU', 'RXX', 'UEP', 'OXY', 'VWA', 'GLH', 'WPM', 'NVR', 'HIP', 'RIM', 'JJJ', 'JDN', 'RBB', 'BDI', 'XVJ', 'ERO', 'RXJ', 'ZMA', 'TVU', 'HPE', 'VAU', 'GVU', 'ZGK', 'KCK', 'DHB', 'RNZ', 'HDO', 'CZF', 'UTI', 'SAQ', 'SWA', 'VXK', 'FEH', 'RFJ', 'ZKQ', 'DOJ', 'DKK', 'SDL', 'FSX', 'ZJF', 'KTA', 'NLG', 'PHJ', 'WOH', 'AXU', 'HSI', 'SZW') ORDER BY x;
SELECT x, x IN ('QOY', 'AAZ', 'AOR', 'VJR', 'ROL', 'KOS', 'JBC', 'EMZ', 'LQT', 'HYX', 'IYA', 'YAA', 'XMR', 'HGJ', 'LDR', 'MVT', 'XEQ', 'NPX', 'ZKV', 'HET', 'GZI', 'PLI', 'ABK', 'LOJ', 'KYB', 'UKG', 'PNY', 'SBV', 'VSJ', 'FAR', 'AXH', 'XWO', 'NKA', 'CPE', 'GSC', 'TWK', 'SXK', 'SUU', 'KPX', 'NXU', 'ZMR', 'BZG', 'CBO', 'SQA', 'VNE', 'NUT', 'LKF', 'IWL', 'CQE', 'UED', 'BHQ', 'RQR', 'FVG', 'EZZ', 'SRJ', 'UPA', 'JUV', 'AXP', 'JGL', 'HKC', 'CYM', 'AAK', 'WUM', 'NWK', 'DCQ', 'YXT', 'DQZ', 'WXB', 'YVG', 'YXL', 'FWG', 'PLN', 'YPK', 'UPA', 'GIC', 'IPS', 'WQB', 'NSR', 'WRT', 'WOP', 'JAX', 'XWZ', 'TIM', 'EAO', 'ANC', 'NAT', 'KFL', 'XJA', 'HUG', 'SVP', 'HVX', 'APA', 'RJI', 'QKP', 'MZB', 'MME', 'GJW', 'TBX', 'TRT', 'IRL', 'BUR', 'OWP', 'DAK', 'IGZ', 'OJL', 'BON', 'KLG', 'SSI', 'UOD', 'SCW', 'LGT', 'KTL', 'DPA', 'WTC', 'NSW', 'TEQ', 'HNU', 'GEI', 'OFK', 'UQB', 'QWI', 'ACS', 'MMR', 'EHZ', 'PXR', 'SPK', 'POO', 'CMF', 'UEE', 'QUK', 'BZR', 'ZBH', 'KJV', 'RIV', 'HOX', 'GZU', 'PQO', 'NLU', 'BRV', 'XND', 'APA', 'QXV', 'QEW', 'AJR', 'OYC', 'YTA', 'FMS', 'GSK', 'MCC', 'QVQ', 'FYD', 'QQJ', 'VBM', 'EYV', 'ELQ', 'KHI', 'HTU', 'KDQ', 'YRI', 'CEB', 'WGP', 'HIY', 'XSM', 'FTD', 'EHU', 'KFE', 'FCN', 'YRC', 'WFC', 'YRC', 'PZH', 'ZAG', 'AAM', 'UBM', 'JIH', 'CRQ', 'BOE', 'KLI', 'SAB', 'TYY', 'AGX', 'FEH', 'ZPX', 'PRU', 'GXA', 'HDC', 'UJG', 'OCO', 'BLZ', 'ZFH', 'LRN', 'GYF', 'FBR', 'OVH', 'XTL', 'FQZ', 'MKP', 'UKA', 'RMN', 'IWX', 'RYF', 'WTB', 'KWU', 'MKN', 'JFM', 'VUU', 'UTU', 'CLW', 'HKQ', 'SJA', 'ADT', 'RTN', 'ZPJ', 'NUX', 'HMY', 'RDA', 'YQQ', 'COL', 'JRB', 'PYV', 'YAU', 'AYM', 'STV', 'BDC', 'PIZ', 'CAK', 'VWS', 'GNU', 'SZA', 'PMP', 'WOV', 'LPL', 'PJY', 'FWV', 'CLH', 'IVC', 'YHN', 'QWB', 'SCE', 'PFN', 'WDI', 'PIN', 'QSN', 'WDE', 'JOZ', 'DPZ', 'WFX', 'IQS', 'TBZ', 'FXQ', 'PLM', 'WQH', 'BEJ', 'KFM', 'KLH', 'ZVT', 'MBV', 'JQT', 'RIR', 'FDB', 'AOV', 'GZV', 'CTN', 'YCY', 'XSB', 'UUI', 'EWM', 'MQR', 'SKE', 'ACO', 'AGP', 'RWD', 'XGR', 'PCO', 'OSY', 'QHG', 'YEW', 'DHQ', 'FNH', 'QWX', 'RSL', 'GKL', 'VEP', 'SME', 'TKH', 'JOQ', 'XZY', 'ZBF', 'UJP', 'UKD', 'QIZ', 'VQF', 'QUW', 'XGX', 'TPG', 'LYD', 'WBX', 'GRI', 'YDC', 'PJU', 'EFU', 'MZV', 'GBN', 'EJE', 'JYH', 'XTC', 'ZNI', 'JJE', 'XJD', 'SJU', 'SNP', 'ZLL', 'ZRL', 'CUC', 'EOQ', 'IZU', 'MZH', 'UMQ', 'ULS', 'ETH', 'AUT', 'NPL', 'IYB', 'OXQ', 'CXH', 'QRI', 'RHM', 'PNO', 'QGF', 'THK', 'KYU', 'OIE', 'OGO', 'UDS', 'OIS', 'DXJ', 'ETV', 'UWI', 'VLX', 'SOG', 'KNW', 'FOR', 'CCT', 'PHH', 'YNI', 'BOW', 'AJR', 'LJE', 'PUB', 'NPF', 'ELB', 'SIE', 'NAC', 'IZD', 'BQE', 'SUH', 'YQE', 'AVC', 'CIV', 'SOK', 'VRB', 'YUG', 'JFO', 'FCB', 'LEY', 'IPX', 'PEZ', 'BFV', 'BCV', 'RWZ', 'BHX', 'OJV', 'QPZ', 'QQX', 'ECG', 'MCD', 'UEI', 'IAE', 'VKD', 'QUJ', 'WYL', 'UOI', 'XDP', 'JTW', 'LFJ', 'AHH', 'XRL', 'QQM', 'AGA', 'RLE', 'MFI', 'UYI', 'HEM', 'KKJ', 'VLN', 'PYN', 'ZZA', 'WGI', 'PTH', 'BMR', 'MZK', 'IPY', 'SLA', 'JOS', 'ZLT', 'ZDF', 'XWY', 'OHJ', 'RPL', 'BPE', 'NVZ', 'YIF', 'HWM', 'BGM', 'VUO', 'YIW', 'UBS', 'EAW', 'AYN', 'UCE', 'UIB', 'DNV', 'YAQ', 'TBE', 'GMT', 'EOW', 'RWL', 'TYU', 'UTX', 'SRJ', 'FZZ', 'RJU', 'QJB', 'MFY', 'PID', 'RWM', 'PWH', 'PJS', 'BNK', 'IUO', 'POW', 'MBL', 'XMH', 'YWN', 'FTC', 'XME', 'MUS', 'XYD', 'BVI', 'FGU', 'BCJ', 'KRH', 'XPM', 'HDV', 'SQS', 'PFE', 'SIU', 'PZL', 'APT', 'CZK', 'HHL', 'EVI', 'GOE', 'RWG', 'PZF', 'DPS', 'GXN', 'WVC', 'ZDE', 'BDQ', 'WYP', 'PLB', 'SZZ', 'HPM', 'BUL', 'VRY', 'ZNG', 'XUS', 'SLU', 'SLQ', 'UOH', 'YHR', 'FGE', 'RJY', 'CMO', 'NGZ', 'PCG', 'PFN', 'EPG', 'ILE', 'RXF', 'NLD', 'PYW', 'WTG', 'HKL', 'IGB', 'YNF', 'TAL', 'MBR', 'YEK', 'VKO', 'ZGO', 'UKH', 'GJN', 'QCD', 'OQD', 'HEU', 'GWT', 'THS', 'LAS', 'JLU', 'TNV', 'UQB', 'YDO', 'ZFI', 'XBV', 'VYI', 'GAC', 'GDU', 'DLL', 'JXX', 'GUP', 'FUF', 'KQI', 'TLC', 'DAQ', 'OMN', 'FYT', 'GIZ', 'NON', 'UGU', 'CSI', 'NEO', 'SVA', 'ZBM', 'GGU', 'PFF', 'QFB', 'JZH', 'OBB', 'VHM', 'PAJ', 'BKD', 'JEI', 'ZQG', 'GBX', 'UCR', 'TXS', 'PAK', 'HYP', 'CAI', 'WJY', 'VLH', 'QLY', 'XKI', 'SDS', 'QEF', 'KKF', 'XBQ', 'FTE', 'CEX', 'PJM', 'RTA', 'TXQ', 'BSK', 'OXU', 'ELZ', 'WII', 'THG', 'RDY', 'LFS', 'JNY', 'ORJ', 'FXD', 'OTG', 'BUG', 'EDF', 'DDM', 'HTZ', 'IAA', 'RWR', 'XBL', 'PXV', 'FVH', 'OSB', 'UQW', 'CUP', 'OIF', 'VQZ', 'KCT', 'VWJ', 'IRP', 'UAZ', 'CCF', 'MCY', 'GGP', 'HDT', 'SZT', 'JSR', 'HDR', 'MQR', 'OCP', 'XQD', 'QYT', 'NSA', 'LPC', 'MGS', 'DAZ', 'SDQ', 'BMS', 'EJL', 'ADY', 'JFP', 'YQD', 'CIP', 'CST', 'ATU', 'JTD', 'HDI', 'JMF', 'LJO', 'SEC', 'ZCN', 'EMG', 'RLJ', 'AMV', 'BVT', 'IZV', 'DND', 'VCJ', 'HNY', 'DSI', 'DWM', 'EDI', 'LQO', 'NDN', 'GGA', 'EXH', 'XFP', 'NLU', 'DNC', 'OTA', 'KQD', 'JRJ', 'JXV', 'UAK', 'TNB', 'ZXJ', 'YTU', 'MMS', 'NCV', 'VIR', 'EUI', 'KND', 'PTL', 'LKF', 'FUT', 'VUX', 'PWI', 'ETZ', 'IHN', 'GYS', 'KAQ', 'UYN', 'HOQ', 'END', 'WHD', 'NMT', 'HEW', 'OBN', 'RDZ', 'SKP', 'LHN', 'HQS', 'YTY', 'GXW', 'EKC', 'BCD', 'BRQ', 'CSX', 'OCI', 'OZP', 'TBN', 'HHG', 'VFZ', 'WJY', 'VBT', 'LNT', 'YDL', 'KOC', 'IJF', 'HSB', 'USO', 'HOK', 'MEK', 'WXT', 'DRT', 'SNE', 'WAI', 'EMP', 'IGC', 'QPJ', 'GCF', 'CJW', 'ONH', 'XQO', 'KFY', 'CZQ', 'AUC', 'BQD', 'KBH', 'GFS', 'BVT', 'QLX', 'TYO', 'WWE', 'TXE', 'MQM', 'WNC', 'WKC', 'ZLW', 'RDJ', 'WCZ', 'UOV', 'IBT', 'HOQ', 'VIA', 'DPE', 'AJX', 'AYA', 'DEM', 'YDD', 'SOU', 'KZU', 'ATH', 'BPS', 'GTM', 'ALW', 'ODR', 'DBZ', 'KYG', 'CES', 'NWC', 'QER', 'FFA', 'UZS', 'GPL', 'MTD', 'TPI', 'GMR', 'WXV', 'YYY', 'FAX', 'MNL', 'JUS', 'SVJ', 'ZNX', 'QDQ', 'FIH', 'EXR', 'XSM', 'OQX', 'GUW', 'KEG', 'DHJ', 'GXH', 'ROZ', 'TCT', 'UNU', 'XGS', 'ODG', 'GZH', 'TZV', 'LFP', 'CDF', 'LJZ', 'RLL', 'QBY', 'CEQ', 'JWH', 'GYJ', 'LSJ', 'CQV', 'HJT', 'PVB', 'DLH', 'BFI', 'RIV', 'UCG', 'KOG', 'TXS', 'JDF', 'DKD', 'FOE', 'UIO', 'GDY', 'OIG', 'FWH', 'YSY', 'HGV', 'GIS', 'CMB', 'SDT', 'ROH', 'NMU', 'YHA', 'WDJ', 'VDV', 'LDE', 'PUR', 'UNS', 'NDY', 'YCZ', 'SAQ', 'OJW', 'OIP', 'IWC', 'WPT', 'PJI', 'PMP', 'CEB', 'WRZ', 'LSI', 'QUA', 'HMA', 'VWZ', 'KWX', 'RTA', 'IXL', 'XZH', 'UOT', 'IWF', 'LXN', 'VXY', 'DMU', 'EKC', 'JRF', 'EMA', 'LNG', 'JWT', 'NLH', 'EPH', 'FFJ', 'RTR', 'XJE', 'OAW', 'HSP', 'AFE', 'EPI', 'RSV', 'OIZ', 'BEC', 'ILJ', 'UPU', 'JZC', 'HGP', 'HLT', 'GSY', 'XGP', 'NYL', 'VHY', 'CQN', 'WEE', 'GFJ', 'LGE', 'IBM', 'NCI', 'OPR', 'TIO', 'DPL', 'TFD', 'XKJ', 'DWM', 'DPV', 'RIE', 'UKK', 'OBM', 'NLJ', 'VUM', 'IRE', 'DNR', 'KVP', 'PZX', 'FBD', 'GDI', 'YAW', 'MKG', 'EAX', 'CBM', 'TCH', 'LGX', 'UCY', 'EWE', 'ZUN', 'DPM', 'BUH', 'NQJ', 'RFX', 'XUI', 'BHB', 'BMM', 'MGZ', 'PTR', 'RUM', 'FVC', 'BRO', 'ZVP', 'YMV', 'PNX', 'WRO', 'KKR', 'WCE', 'UFT', 'QWG', 'UNY', 'IZE', 'ZFX', 'KBC', 'DPS', 'QYY', 'ZNO', 'DHR', 'GWP', 'UTY', 'CSO', 'SQH', 'TBU', 'CYF', 'ROH', 'GYF', 'BWT', 'RKM', 'WLV', 'FSB', 'EWV', 'DHJ', 'RPB', 'NVJ', 'LUF', 'TTV', 'WPT', 'APQ', 'IXF', 'HAQ', 'OVS', 'JTE', 'LOQ', 'PXF', 'MAZ', 'AHV', 'TZO', 'LHO', 'ATL', 'MII', 'LTR', 'KPQ', 'ZXP', 'JPI', 'GLF', 'VKG', 'CAM', 'GVX', 'JUO', 'YWZ', 'NNQ', 'RGV', 'CDS', 'CYA', 'QPX', 'HHG', 'DDF', 'YXE', 'ZKL', 'XDJ', 'HLC', 'ORZ', 'UEX', 'FKH', 'RWT', 'RKN', 'USW', 'UBC', 'QGT', 'MGN', 'WXC', 'ENU', 'RLW', 'OFP', 'XGN', 'PSX', 'JTD', 'LFK', 'PBI', 'BWD', 'JVG', 'HFG', 'WLM', 'XNC', 'HWH', 'FGZ', 'JEK', 'HRL', 'NBL', 'THW', 'WKI', 'IME', 'UIY', 'WAA', 'XQO', 'UUD', 'IRS', 'FBF', 'JZV', 'CCR', 'YLF', 'RXP', 'UIP', 'OGN', 'IID', 'ENW', 'XPL', 'PFE', 'MEX', 'GPH', 'RBW', 'JML', 'ZVR', 'YWL', 'QPJ', 'LYY', 'NKS', 'VIJ', 'SAZ', 'LNC', 'NGU', 'RRD', 'PJK', 'FOH', 'ORW', 'YLQ', 'GFG', 'NOW', 'IDV', 'WHE', 'RTH', 'NVL', 'BAQ', 'HAK', 'SKH', 'LTZ', 'HDF', 'SIB', 'PHY', 'PWZ', 'CWY', 'JNE', 'CXW', 'EPN', 'LAO', 'WEI', 'AGK', 'XJQ', 'ILR', 'CVO', 'MEX', 'BGD', 'AEK', 'DHK', 'KAC', 'DQL', 'WDA', 'GVU', 'RUN', 'XQU', 'EXU', 'WER', 'UBS', 'XOK', 'WML', 'XQM', 'XBW', 'VTT', 'SMF', 'DRX', 'XGZ', 'KXD', 'IVV', 'OIJ', 'KAW', 'SEW', 'URD', 'QAW', 'RFL', 'ZGP', 'VVR', 'ZLA', 'LXV', 'OWU', 'YGF', 'BJO', 'OTZ', 'RSD', 'GTT', 'CEP', 'HVH', 'ZNI', 'BHV', 'IKT', 'GCF', 'XYF', 'FOL', 'NLV', 'NFL', 'TOO', 'GYY', 'POS', 'JGL', 'BUE', 'DYK', 'VVV', 'RMJ', 'LBS', 'WSL', 'FHZ', 'RWB', 'DLC', 'XPL', 'YLW', 'OYK', 'HQN', 'MRA', 'QAJ', 'MIX', 'ICY', 'WZS', 'IJG', 'VYF', 'XON', 'AZB', 'RQC', 'AYK', 'CUV', 'JST', 'BNP', 'UCF', 'DIG', 'ANC', 'XVQ', 'CEC', 'TND', 'SHS', 'YTJ', 'XFX', 'TBI', 'JRE', 'WBD', 'ZVA', 'TSG', 'DYY', 'XUB', 'JDH', 'VSO', 'NMU', 'QWP', 'SKI', 'XMG', 'RVK', 'XVO', 'OAV', 'NYW', 'NRR', 'QRY', 'EBG', 'OYJ', 'ZDN', 'LLU', 'ACT', 'MYP', 'KUK', 'TDO', 'CUB', 'QHL', 'QRO', 'FTD', 'KBL', 'YEY', 'NQD', 'OAH', 'ACU', 'EDM', 'QYP', 'OUO', 'PDK', 'VSP', 'PKW', 'JZF', 'GAL', 'COS', 'RFL', 'DIM', 'MPZ', 'IZX', 'KBU', 'LVK', 'DTP', 'PWC', 'EUQ', 'ESR', 'PIL', 'PTW', 'DNF', 'VLW', 'NBA', 'DFW', 'RDK', 'PYF', 'NIA', 'LLQ', 'WUE', 'SLJ', 'TEF', 'GNC', 'FIC', 'EQD', 'ERL', 'IKZ', 'UKG', 'TNT', 'XCP', 'NRV', 'GVU', 'XFZ', 'VEL', 'GCR', 'XAE', 'GTN', 'VRZ', 'WSY', 'RKD', 'WIA', 'ZPB', 'EWE', 'AVT', 'EZD', 'YCN', 'TJY', 'PCS', 'PXA', 'EAR', 'CIE', 'PPO', 'PFP', 'PFJ', 'SZK', 'IBH', 'LQB', 'EDI', 'ELJ', 'OJS', 'QBC', 'GTV', 'GXH', 'MFG', 'QQO', 'PIK', 'LDF', 'KIX', 'CSV', 'MAP', 'ALA', 'KZH', 'QPA', 'BCG', 'DWQ', 'MUM', 'UJT', 'ZIK', 'XPU', 'CQL', 'DZH', 'ZGR', 'UCU', 'LAT', 'NXO', 'QYM', 'PNV', 'UTV', 'SGK', 'EXJ', 'NTQ', 'LPQ', 'RVT', 'GHZ', 'FSE', 'PGQ', 'WJL', 'JQI', 'IWL', 'SWW', 'DEQ', 'VLF', 'NUD', 'ZNG', 'DCR', 'LCI', 'NZK', 'QAK', 'GHL', 'UCZ', 'ESU', 'JQG', 'NJL', 'PPD', 'QGA', 'GSW', 'YDG', 'QNJ', 'EYF', 'NNZ', 'EAG', 'RFE', 'CBE', 'ENO', 'HDT', 'WFV', 'CFE', 'MGY', 'PAE', 'WUG', 'LPU', 'HZD', 'GFM', 'JHE', 'TPQ', 'DAO', 'KBZ', 'GBA', 'NFH', 'DDS', 'HYA', 'VWS', 'ZLG', 'XKO', 'HFE', 'OJS', 'ZNK', 'OAT', 'YFE', 'NYJ', 'RDP', 'NTN', 'BEW', 'IGK', 'AYV', 'QXZ', 'NJB', 'QYE', 'GGE', 'DVI', 'UFG', 'AWY', 'JAN', 'GPW', 'GYE', 'BKS', 'REI', 'XYZ', 'VTY', 'NCD', 'EMH', 'YZE', 'LKN', 'JFF', 'IHZ', 'KUE', 'VNJ', 'SAW', 'NWS', 'HTH', 'ZXC', 'IAW', 'EPV', 'ONR', 'NFN', 'KMQ', 'CCE', 'ASU', 'SYF', 'PIQ', 'EHB', 'IWX', 'TAV', 'PJV', 'KET', 'BCR', 'UTS', 'OCI', 'PBE', 'XDJ', 'XSN', 'CUS', 'XBF', 'ZQF', 'RTW', 'CJI', 'XPI', 'KGD', 'ZNS', 'JCM', 'SRD', 'ADD', 'NJY', 'TQU', 'RNK', 'IQR', 'FYF', 'VDQ', 'IUO', 'SXI', 'DRM', 'XSX', 'FBH', 'YQE', 'BTM', 'GZJ', 'JJR', 'ONH', 'NLJ', 'XVR', 'XCP', 'VLW', 'ISS', 'FDK', 'FAS', 'HDE', 'ETY', 'KIA', 'BJX', 'ZZM', 'EIB', 'HWD', 'HDY', 'QGB', 'BQH', 'PFT', 'MBI', 'NND', 'DRP', 'IWC', 'TFF', 'PDU', 'YTB', 'WHR', 'QNY', 'IUB', 'QZK', 'NXL', 'JOB', 'FEF', 'DZC', 'DAL', 'IJK', 'HBO', 'ZRR', 'JJH', 'MXI', 'YSP', 'BRV', 'JRA', 'JQE', 'XWQ', 'GVY', 'CEN', 'NYY', 'JCW', 'BIN', 'QGA', 'SCX', 'LZV', 'SPA', 'CRQ', 'RUJ', 'PYJ', 'BCG', 'QFR', 'QED', 'RLR', 'JXV', 'NIQ', 'WHL', 'UQJ', 'EPN', 'HEF', 'IUR', 'MCH', 'THC', 'WTN', 'OCP', 'DSM', 'LXW', 'ZQJ', 'FMU', 'VNW', 'IXM', 'BYF', 'NXY', 'CJO', 'IIY', 'CGW', 'PNE', 'WFH', 'SHG', 'SBO', 'XFA', 'KLO', 'YMJ', 'INZ', 'PMK', 'RYE', 'KHB', 'YXB', 'TZK', 'LES', 'ZZN', 'FXH', 'EMP', 'PDI', 'JIS', 'GQW', 'SMX', 'UCU', 'IFF', 'VZI', 'DPN', 'LIK', 'CJO', 'DOC', 'BJP', 'NUB', 'GPH', 'GRQ', 'SOU', 'TZH', 'WUN', 'PDC', 'EWB', 'YMX', 'OEF', 'MEB', 'QBU', 'JUQ', 'HEQ', 'UJF', 'QDF', 'MMK', 'ZVU', 'JRP', 'JOS', 'TCC', 'TIO', 'RPM', 'GVB', 'GOH', 'CUV', 'DUW', 'EAK', 'CII', 'PGT', 'CHN', 'HMM', 'RLO', 'ARC', 'EFW', 'HVX', 'HJV', 'OHY', 'GPG', 'MQO', 'GBU', 'YPD', 'FNW', 'MDP', 'KXQ', 'PSB', 'NVZ', 'BYC', 'IUC', 'URT', 'BVP', 'VZP', 'UTL', 'BXW', 'FKT', 'PGM', 'DGD', 'AIV', 'TMY', 'RUN', 'QYG', 'GXF', 'VPF', 'UNY', 'MOZ', 'INN', 'VEV', 'PWC', 'AWY', 'MKI', 'TXG', 'BQU', 'QAU', 'ILO', 'IBH', 'PCO', 'RDH', 'UNP', 'LLB', 'DER', 'YRP', 'MWZ', 'NIH', 'MCS', 'ZCL', 'IOI', 'UPU', 'MNS', 'JDR', 'OWF', 'XTA', 'OAZ', 'WCV', 'FFI', 'NLI', 'BFD', 'LDD', 'FZR', 'HNP', 'IRL', 'WEA', 'PDE', 'IEN', 'GGR', 'YUP', 'VWA', 'WEM', 'QPZ', 'ZBA', 'GLU', 'CUH', 'VDK', 'KLF', 'OLF', 'PMD', 'FLZ', 'JQV', 'SGP', 'JZZ', 'HIO', 'LFV', 'PTG', 'FEL', 'WNX', 'LDU', 'EXI', 'JMT', 'RID', 'TXZ', 'PGC', 'GLC', 'JLI', 'CLT', 'VDK', 'FBI', 'WSW', 'ELJ', 'YJY', 'YXU', 'XWC', 'MII', 'YXM', 'HCJ', 'JVC', 'RPF', 'NXE', 'UFO', 'BYH', 'EFA', 'EGO', 'XVS', 'VWG', 'LOY', 'LCG', 'TRQ', 'IKL', 'OQA', 'HTU', 'XNU', 'AZS', 'BOR', 'XWR', 'UQN', 'YFH', 'TDS', 'RLP', 'PHC', 'AYP', 'BVL', 'CQI', 'HSC', 'JRS', 'YZU', 'YFY', 'WEI', 'ITW', 'MYU', 'ORF', 'OTD', 'CAO', 'UJN', 'UFW', 'UUP', 'IQG', 'SEG', 'BAQ', 'KJD', 'DNG', 'BZL', 'DVT', 'KJY', 'XLW', 'TMH', 'DCX', 'MVJ', 'JFU', 'VCL', 'FQX', 'WRS', 'OXS', 'QGT', 'UPJ', 'QTI', 'AOU', 'CHR', 'AMC', 'VCN', 'OUC', 'JDK', 'CNL', 'HVI', 'WTS', 'VPC', 'THK', 'SVV', 'IGZ', 'ZPC', 'OBU', 'EQP', 'UMD', 'BQX', 'CKN', 'FOW', 'RGD', 'LNP', 'YEG', 'GVT', 'BSV', 'KKI', 'JEZ', 'GQH', 'DHB', 'TFV', 'TFS', 'WVS', 'ZFS', 'ZPG', 'PLN', 'OBM', 'BRE', 'HXC', 'JBF', 'GKA', 'RKS', 'PUS', 'XGS', 'QYD', 'IOK', 'DZR', 'IRX', 'NIJ', 'EAJ', 'SCY', 'KXB', 'VII', 'ETT', 'UPQ', 'JPW', 'ZTS', 'CZC', 'DFE', 'JLR', 'ZAC', 'XTQ', 'JZY', 'MUW', 'EXR', 'OQC', 'QLF', 'VAL', 'CBQ', 'SQO', 'HXA', 'SCI', 'ZAM', 'EDK', 'HVB', 'LSH', 'EOR', 'KZF', 'TLA', 'JIK', 'ULN', 'CJY', 'YKP', 'RQQ', 'XQJ', 'EFK', 'WEA', 'VHL', 'ANA', 'VYI', 'GTV', 'FRN', 'BXI', 'QYM', 'WUJ', 'FHW', 'RAH', 'RCK', 'RXY', 'KXC', 'IFA', 'OCZ', 'PTB', 'IHO', 'SDL', 'YEP', 'RFX', 'ZUR', 'FKV', 'WFA', 'VAF', 'ZHK', 'KZO', 'AAN', 'IME', 'MIF', 'VCG', 'BYQ', 'QOY', 'LSG', 'IRT', 'PUI', 'UAB', 'MPY', 'CKS', 'PZL', 'EUW', 'JIO', 'WXL', 'JEV', 'SBT', 'WUQ', 'GBH', 'QEG', 'ZCJ', 'OKQ', 'AAX', 'LJN', 'OYH', 'EIJ', 'ZNK', 'JIA', 'TDN', 'DPU', 'BTR', 'SEP', 'VKZ', 'HEX', 'WFB', 'DKR', 'FQH', 'CTQ', 'NPX', 'DHG', 'ZSN', 'ZYF', 'MLP', 'IUH', 'ZIX', 'UYI', 'SRK', 'GEG', 'SCW', 'TED', 'XOP', 'PML', 'RNK', 'KTA', 'KJJ', 'UXS', 'MRX', 'FJH', 'NRA', 'ZJJ', 'WGU', 'NPD', 'GPA', 'UBR', 'GXI', 'YQP', 'SEI', 'MOZ', 'UIR', 'SIH', 'EAP', 'IXV', 'EKD', 'YVX', 'PPZ', 'MBK', 'NTQ', 'BSZ', 'BVD', 'LMV', 'MDB', 'BOK', 'XLL', 'QJJ', 'CTH', 'BLQ', 'ZOR', 'RVD', 'MNW', 'OCC', 'FCN', 'MAK', 'OMZ', 'PLJ', 'QMP', 'PTZ', 'AXB', 'YJG', 'JZX', 'HUH', 'FOL', 'BUV', 'BEI', 'ZYN', 'JHS', 'JND', 'TIB', 'JMM', 'UTZ', 'GEZ', 'LTQ', 'IBJ', 'WOY', 'IGT', 'ZUV', 'MWP', 'GSJ', 'FET', 'LXM', 'ZBE', 'VTI', 'WLW', 'PYT', 'DJQ', 'NFU', 'BKX', 'MDD', 'YPX', 'SBG', 'TKI', 'QRU', 'IKG', 'SRQ', 'AOB', 'KHN', 'IZN', 'NQU', 'NQC', 'HVS', 'JCP', 'HUL', 'MXN', 'DOW', 'HXR', 'GZT', 'GNL', 'INF', 'AOU', 'RXX', 'UEP', 'OXY', 'VWA', 'GLH', 'WPM', 'NVR', 'HIP', 'RIM', 'JJJ', 'JDN', 'RBB', 'BDI', 'XVJ', 'ERO', 'RXJ', 'ZMA', 'TVU', 'HPE', 'VAU', 'GVU', 'ZGK', 'KCK', 'DHB', 'RNZ', 'HDO', 'CZF', 'UTI', 'SAQ', 'SWA', 'VXK', 'FEH', 'RFJ', 'ZKQ', 'DOJ', 'DKK', 'SDL', 'FSX', 'ZJF', 'KTA', 'NLG', 'PHJ', 'WOH', 'AXU', 'HSI', 'SZW') AS x FROM x ORDER BY x;
SELECT x, x IN ('QOY', 'AAZ', 'AOR', 'VJR', 'ROL', 'KOS', 'JBC', 'EMZ', 'LQT', 'HYX', 'IYA', 'YAA', 'XMR', 'HGJ', 'LDR', 'MVT', 'XEQ', 'NPX', 'ZKV', 'HET', 'GZI', 'PLI', 'ABK', 'LOJ', 'KYB', 'UKG', 'PNY', 'SBV', 'VSJ', 'FAR', 'AXH', 'XWO', 'NKA', 'CPE', 'GSC', 'TWK', 'SXK', 'SUU', 'KPX', 'NXU', 'ZMR', 'BZG', 'CBO', 'SQA', 'VNE', 'NUT', 'LKF', 'IWL', 'CQE', 'UED', 'BHQ', 'RQR', 'FVG', 'EZZ', 'SRJ', 'UPA', 'JUV', 'AXP', 'JGL', 'HKC', 'CYM', 'AAK', 'WUM', 'NWK', 'DCQ', 'YXT', 'DQZ', 'WXB', 'YVG', 'YXL', 'FWG', 'PLN', 'YPK', 'UPA', 'GIC', 'IPS', 'WQB', 'NSR', 'WRT', 'WOP', 'JAX', 'XWZ', 'TIM', 'EAO', 'ANC', 'NAT', 'KFL', 'XJA', 'HUG', 'SVP', 'HVX', 'APA', 'RJI', 'QKP', 'MZB', 'MME', 'GJW', 'TBX', 'TRT', 'IRL', 'BUR', 'OWP', 'DAK', 'IGZ', 'OJL', 'BON', 'KLG', 'SSI', 'UOD', 'SCW', 'LGT', 'KTL', 'DPA', 'WTC', 'NSW', 'TEQ', 'HNU', 'GEI', 'OFK', 'UQB', 'QWI', 'ACS', 'MMR', 'EHZ', 'PXR', 'SPK', 'POO', 'CMF', 'UEE', 'QUK', 'BZR', 'ZBH', 'KJV', 'RIV', 'HOX', 'GZU', 'PQO', 'NLU', 'BRV', 'XND', 'APA', 'QXV', 'QEW', 'AJR', 'OYC', 'YTA', 'FMS', 'GSK', 'MCC', 'QVQ', 'FYD', 'QQJ', 'VBM', 'EYV', 'ELQ', 'KHI', 'HTU', 'KDQ', 'YRI', 'CEB', 'WGP', 'HIY', 'XSM', 'FTD', 'EHU', 'KFE', 'FCN', 'YRC', 'WFC', 'YRC', 'PZH', 'ZAG', 'AAM', 'UBM', 'JIH', 'CRQ', 'BOE', 'KLI', 'SAB', 'TYY', 'AGX', 'FEH', 'ZPX', 'PRU', 'GXA', 'HDC', 'UJG', 'OCO', 'BLZ', 'ZFH', 'LRN', 'GYF', 'FBR', 'OVH', 'XTL', 'FQZ', 'MKP', 'UKA', 'RMN', 'IWX', 'RYF', 'WTB', 'KWU', 'MKN', 'JFM', 'VUU', 'UTU', 'CLW', 'HKQ', 'SJA', 'ADT', 'RTN', 'ZPJ', 'NUX', 'HMY', 'RDA', 'YQQ', 'COL', 'JRB', 'PYV', 'YAU', 'AYM', 'STV', 'BDC', 'PIZ', 'CAK', 'VWS', 'GNU', 'SZA', 'PMP', 'WOV', 'LPL', 'PJY', 'FWV', 'CLH', 'IVC', 'YHN', 'QWB', 'SCE', 'PFN', 'WDI', 'PIN', 'QSN', 'WDE', 'JOZ', 'DPZ', 'WFX', 'IQS', 'TBZ', 'FXQ', 'PLM', 'WQH', 'BEJ', 'KFM', 'KLH', 'ZVT', 'MBV', 'JQT', 'RIR', 'FDB', 'AOV', 'GZV', 'CTN', 'YCY', 'XSB', 'UUI', 'EWM', 'MQR', 'SKE', 'ACO', 'AGP', 'RWD', 'XGR', 'PCO', 'OSY', 'QHG', 'YEW', 'DHQ', 'FNH', 'QWX', 'RSL', 'GKL', 'VEP', 'SME', 'TKH', 'JOQ', 'XZY', 'ZBF', 'UJP', 'UKD', 'QIZ', 'VQF', 'QUW', 'XGX', 'TPG', 'LYD', 'WBX', 'GRI', 'YDC', 'PJU', 'EFU', 'MZV', 'GBN', 'EJE', 'JYH', 'XTC', 'ZNI', 'JJE', 'XJD', 'SJU', 'SNP', 'ZLL', 'ZRL', 'CUC', 'EOQ', 'IZU', 'MZH', 'UMQ', 'ULS', 'ETH', 'AUT', 'NPL', 'IYB', 'OXQ', 'CXH', 'QRI', 'RHM', 'PNO', 'QGF', 'THK', 'KYU', 'OIE', 'OGO', 'UDS', 'OIS', 'DXJ', 'ETV', 'UWI', 'VLX', 'SOG', 'KNW', 'FOR', 'CCT', 'PHH', 'YNI', 'BOW', 'AJR', 'LJE', 'PUB', 'NPF', 'ELB', 'SIE', 'NAC', 'IZD', 'BQE', 'SUH', 'YQE', 'AVC', 'CIV', 'SOK', 'VRB', 'YUG', 'JFO', 'FCB', 'LEY', 'IPX', 'PEZ', 'BFV', 'BCV', 'RWZ', 'BHX', 'OJV', 'QPZ', 'QQX', 'ECG', 'MCD', 'UEI', 'IAE', 'VKD', 'QUJ', 'WYL', 'UOI', 'XDP', 'JTW', 'LFJ', 'AHH', 'XRL', 'QQM', 'AGA', 'RLE', 'MFI', 'UYI', 'HEM', 'KKJ', 'VLN', 'PYN', 'ZZA', 'WGI', 'PTH', 'BMR', 'MZK', 'IPY', 'SLA', 'JOS', 'ZLT', 'ZDF', 'XWY', 'OHJ', 'RPL', 'BPE', 'NVZ', 'YIF', 'HWM', 'BGM', 'VUO', 'YIW', 'UBS', 'EAW', 'AYN', 'UCE', 'UIB', 'DNV', 'YAQ', 'TBE', 'GMT', 'EOW', 'RWL', 'TYU', 'UTX', 'SRJ', 'FZZ', 'RJU', 'QJB', 'MFY', 'PID', 'RWM', 'PWH', 'PJS', 'BNK', 'IUO', 'POW', 'MBL', 'XMH', 'YWN', 'FTC', 'XME', 'MUS', 'XYD', 'BVI', 'FGU', 'BCJ', 'KRH', 'XPM', 'HDV', 'SQS', 'PFE', 'SIU', 'PZL', 'APT', 'CZK', 'HHL', 'EVI', 'GOE', 'RWG', 'PZF', 'DPS', 'GXN', 'WVC', 'ZDE', 'BDQ', 'WYP', 'PLB', 'SZZ', 'HPM', 'BUL', 'VRY', 'ZNG', 'XUS', 'SLU', 'SLQ', 'UOH', 'YHR', 'FGE', 'RJY', 'CMO', 'NGZ', 'PCG', 'PFN', 'EPG', 'ILE', 'RXF', 'NLD', 'PYW', 'WTG', 'HKL', 'IGB', 'YNF', 'TAL', 'MBR', 'YEK', 'VKO', 'ZGO', 'UKH', 'GJN', 'QCD', 'OQD', 'HEU', 'GWT', 'THS', 'LAS', 'JLU', 'TNV', 'UQB', 'YDO', 'ZFI', 'XBV', 'VYI', 'GAC', 'GDU', 'DLL', 'JXX', 'GUP', 'FUF', 'KQI', 'TLC', 'DAQ', 'OMN', 'FYT', 'GIZ', 'NON', 'UGU', 'CSI', 'NEO', 'SVA', 'ZBM', 'GGU', 'PFF', 'QFB', 'JZH', 'OBB', 'VHM', 'PAJ', 'BKD', 'JEI', 'ZQG', 'GBX', 'UCR', 'TXS', 'PAK', 'HYP', 'CAI', 'WJY', 'VLH', 'QLY', 'XKI', 'SDS', 'QEF', 'KKF', 'XBQ', 'FTE', 'CEX', 'PJM', 'RTA', 'TXQ', 'BSK', 'OXU', 'ELZ', 'WII', 'THG', 'RDY', 'LFS', 'JNY', 'ORJ', 'FXD', 'OTG', 'BUG', 'EDF', 'DDM', 'HTZ', 'IAA', 'RWR', 'XBL', 'PXV', 'FVH', 'OSB', 'UQW', 'CUP', 'OIF', 'VQZ', 'KCT', 'VWJ', 'IRP', 'UAZ', 'CCF', 'MCY', 'GGP', 'HDT', 'SZT', 'JSR', 'HDR', 'MQR', 'OCP', 'XQD', 'QYT', 'NSA', 'LPC', 'MGS', 'DAZ', 'SDQ', 'BMS', 'EJL', 'ADY', 'JFP', 'YQD', 'CIP', 'CST', 'ATU', 'JTD', 'HDI', 'JMF', 'LJO', 'SEC', 'ZCN', 'EMG', 'RLJ', 'AMV', 'BVT', 'IZV', 'DND', 'VCJ', 'HNY', 'DSI', 'DWM', 'EDI', 'LQO', 'NDN', 'GGA', 'EXH', 'XFP', 'NLU', 'DNC', 'OTA', 'KQD', 'JRJ', 'JXV', 'UAK', 'TNB', 'ZXJ', 'YTU', 'MMS', 'NCV', 'VIR', 'EUI', 'KND', 'PTL', 'LKF', 'FUT', 'VUX', 'PWI', 'ETZ', 'IHN', 'GYS', 'KAQ', 'UYN', 'HOQ', 'END', 'WHD', 'NMT', 'HEW', 'OBN', 'RDZ', 'SKP', 'LHN', 'HQS', 'YTY', 'GXW', 'EKC', 'BCD', 'BRQ', 'CSX', 'OCI', 'OZP', 'TBN', 'HHG', 'VFZ', 'WJY', 'VBT', 'LNT', 'YDL', 'KOC', 'IJF', 'HSB', 'USO', 'HOK', 'MEK', 'WXT', 'DRT', 'SNE', 'WAI', 'EMP', 'IGC', 'QPJ', 'GCF', 'CJW', 'ONH', 'XQO', 'KFY', 'CZQ', 'AUC', 'BQD', 'KBH', 'GFS', 'BVT', 'QLX', 'TYO', 'WWE', 'TXE', 'MQM', 'WNC', 'WKC', 'ZLW', 'RDJ', 'WCZ', 'UOV', 'IBT', 'HOQ', 'VIA', 'DPE', 'AJX', 'AYA', 'DEM', 'YDD', 'SOU', 'KZU', 'ATH', 'BPS', 'GTM', 'ALW', 'ODR', 'DBZ', 'KYG', 'CES', 'NWC', 'QER', 'FFA', 'UZS', 'GPL', 'MTD', 'TPI', 'GMR', 'WXV', 'YYY', 'FAX', 'MNL', 'JUS', 'SVJ', 'ZNX', 'QDQ', 'FIH', 'EXR', 'XSM', 'OQX', 'GUW', 'KEG', 'DHJ', 'GXH', 'ROZ', 'TCT', 'UNU', 'XGS', 'ODG', 'GZH', 'TZV', 'LFP', 'CDF', 'LJZ', 'RLL', 'QBY', 'CEQ', 'JWH', 'GYJ', 'LSJ', 'CQV', 'HJT', 'PVB', 'DLH', 'BFI', 'RIV', 'UCG', 'KOG', 'TXS', 'JDF', 'DKD', 'FOE', 'UIO', 'GDY', 'OIG', 'FWH', 'YSY', 'HGV', 'GIS', 'CMB', 'SDT', 'ROH', 'NMU', 'YHA', 'WDJ', 'VDV', 'LDE', 'PUR', 'UNS', 'NDY', 'YCZ', 'SAQ', 'OJW', 'OIP', 'IWC', 'WPT', 'PJI', 'PMP', 'CEB', 'WRZ', 'LSI', 'QUA', 'HMA', 'VWZ', 'KWX', 'RTA', 'IXL', 'XZH', 'UOT', 'IWF', 'LXN', 'VXY', 'DMU', 'EKC', 'JRF', 'EMA', 'LNG', 'JWT', 'NLH', 'EPH', 'FFJ', 'RTR', 'XJE', 'OAW', 'HSP', 'AFE', 'EPI', 'RSV', 'OIZ', 'BEC', 'ILJ', 'UPU', 'JZC', 'HGP', 'HLT', 'GSY', 'XGP', 'NYL', 'VHY', 'CQN', 'WEE', 'GFJ', 'LGE', 'IBM', 'NCI', 'OPR', 'TIO', 'DPL', 'TFD', 'XKJ', 'DWM', 'DPV', 'RIE', 'UKK', 'OBM', 'NLJ', 'VUM', 'IRE', 'DNR', 'KVP', 'PZX', 'FBD', 'GDI', 'YAW', 'MKG', 'EAX', 'CBM', 'TCH', 'LGX', 'UCY', 'EWE', 'ZUN', 'DPM', 'BUH', 'NQJ', 'RFX', 'XUI', 'BHB', 'BMM', 'MGZ', 'PTR', 'RUM', 'FVC', 'BRO', 'ZVP', 'YMV', 'PNX', 'WRO', 'KKR', 'WCE', 'UFT', 'QWG', 'UNY', 'IZE', 'ZFX', 'KBC', 'DPS', 'QYY', 'ZNO', 'DHR', 'GWP', 'UTY', 'CSO', 'SQH', 'TBU', 'CYF', 'ROH', 'GYF', 'BWT', 'RKM', 'WLV', 'FSB', 'EWV', 'DHJ', 'RPB', 'NVJ', 'LUF', 'TTV', 'WPT', 'APQ', 'IXF', 'HAQ', 'OVS', 'JTE', 'LOQ', 'PXF', 'MAZ', 'AHV', 'TZO', 'LHO', 'ATL', 'MII', 'LTR', 'KPQ', 'ZXP', 'JPI', 'GLF', 'VKG', 'CAM', 'GVX', 'JUO', 'YWZ', 'NNQ', 'RGV', 'CDS', 'CYA', 'QPX', 'HHG', 'DDF', 'YXE', 'ZKL', 'XDJ', 'HLC', 'ORZ', 'UEX', 'FKH', 'RWT', 'RKN', 'USW', 'UBC', 'QGT', 'MGN', 'WXC', 'ENU', 'RLW', 'OFP', 'XGN', 'PSX', 'JTD', 'LFK', 'PBI', 'BWD', 'JVG', 'HFG', 'WLM', 'XNC', 'HWH', 'FGZ', 'JEK', 'HRL', 'NBL', 'THW', 'WKI', 'IME', 'UIY', 'WAA', 'XQO', 'UUD', 'IRS', 'FBF', 'JZV', 'CCR', 'YLF', 'RXP', 'UIP', 'OGN', 'IID', 'ENW', 'XPL', 'PFE', 'MEX', 'GPH', 'RBW', 'JML', 'ZVR', 'YWL', 'QPJ', 'LYY', 'NKS', 'VIJ', 'SAZ', 'LNC', 'NGU', 'RRD', 'PJK', 'FOH', 'ORW', 'YLQ', 'GFG', 'NOW', 'IDV', 'WHE', 'RTH', 'NVL', 'BAQ', 'HAK', 'SKH', 'LTZ', 'HDF', 'SIB', 'PHY', 'PWZ', 'CWY', 'JNE', 'CXW', 'EPN', 'LAO', 'WEI', 'AGK', 'XJQ', 'ILR', 'CVO', 'MEX', 'BGD', 'AEK', 'DHK', 'KAC', 'DQL', 'WDA', 'GVU', 'RUN', 'XQU', 'EXU', 'WER', 'UBS', 'XOK', 'WML', 'XQM', 'XBW', 'VTT', 'SMF', 'DRX', 'XGZ', 'KXD', 'IVV', 'OIJ', 'KAW', 'SEW', 'URD', 'QAW', 'RFL', 'ZGP', 'VVR', 'ZLA', 'LXV', 'OWU', 'YGF', 'BJO', 'OTZ', 'RSD', 'GTT', 'CEP', 'HVH', 'ZNI', 'BHV', 'IKT', 'GCF', 'XYF', 'FOL', 'NLV', 'NFL', 'TOO', 'GYY', 'POS', 'JGL', 'BUE', 'DYK', 'VVV', 'RMJ', 'LBS', 'WSL', 'FHZ', 'RWB', 'DLC', 'XPL', 'YLW', 'OYK', 'HQN', 'MRA', 'QAJ', 'MIX', 'ICY', 'WZS', 'IJG', 'VYF', 'XON', 'AZB', 'RQC', 'AYK', 'CUV', 'JST', 'BNP', 'UCF', 'DIG', 'ANC', 'XVQ', 'CEC', 'TND', 'SHS', 'YTJ', 'XFX', 'TBI', 'JRE', 'WBD', 'ZVA', 'TSG', 'DYY', 'XUB', 'JDH', 'VSO', 'NMU', 'QWP', 'SKI', 'XMG', 'RVK', 'XVO', 'OAV', 'NYW', 'NRR', 'QRY', 'EBG', 'OYJ', 'ZDN', 'LLU', 'ACT', 'MYP', 'KUK', 'TDO', 'CUB', 'QHL', 'QRO', 'FTD', 'KBL', 'YEY', 'NQD', 'OAH', 'ACU', 'EDM', 'QYP', 'OUO', 'PDK', 'VSP', 'PKW', 'JZF', 'GAL', 'COS', 'RFL', 'DIM', 'MPZ', 'IZX', 'KBU', 'LVK', 'DTP', 'PWC', 'EUQ', 'ESR', 'PIL', 'PTW', 'DNF', 'VLW', 'NBA', 'DFW', 'RDK', 'PYF', 'NIA', 'LLQ', 'WUE', 'SLJ', 'TEF', 'GNC', 'FIC', 'EQD', 'ERL', 'IKZ', 'UKG', 'TNT', 'XCP', 'NRV', 'GVU', 'XFZ', 'VEL', 'GCR', 'XAE', 'GTN', 'VRZ', 'WSY', 'RKD', 'WIA', 'ZPB', 'EWE', 'AVT', 'EZD', 'YCN', 'TJY', 'PCS', 'PXA', 'EAR', 'CIE', 'PPO', 'PFP', 'PFJ', 'SZK', 'IBH', 'LQB', 'EDI', 'ELJ', 'OJS', 'QBC', 'GTV', 'GXH', 'MFG', 'QQO', 'PIK', 'LDF', 'KIX', 'CSV', 'MAP', 'ALA', 'KZH', 'QPA', 'BCG', 'DWQ', 'MUM', 'UJT', 'ZIK', 'XPU', 'CQL', 'DZH', 'ZGR', 'UCU', 'LAT', 'NXO', 'QYM', 'PNV', 'UTV', 'SGK', 'EXJ', 'NTQ', 'LPQ', 'RVT', 'GHZ', 'FSE', 'PGQ', 'WJL', 'JQI', 'IWL', 'SWW', 'DEQ', 'VLF', 'NUD', 'ZNG', 'DCR', 'LCI', 'NZK', 'QAK', 'GHL', 'UCZ', 'ESU', 'JQG', 'NJL', 'PPD', 'QGA', 'GSW', 'YDG', 'QNJ', 'EYF', 'NNZ', 'EAG', 'RFE', 'CBE', 'ENO', 'HDT', 'WFV', 'CFE', 'MGY', 'PAE', 'WUG', 'LPU', 'HZD', 'GFM', 'JHE', 'TPQ', 'DAO', 'KBZ', 'GBA', 'NFH', 'DDS', 'HYA', 'VWS', 'ZLG', 'XKO', 'HFE', 'OJS', 'ZNK', 'OAT', 'YFE', 'NYJ', 'RDP', 'NTN', 'BEW', 'IGK', 'AYV', 'QXZ', 'NJB', 'QYE', 'GGE', 'DVI', 'UFG', 'AWY', 'JAN', 'GPW', 'GYE', 'BKS', 'REI', 'XYZ', 'VTY', 'NCD', 'EMH', 'YZE', 'LKN', 'JFF', 'IHZ', 'KUE', 'VNJ', 'SAW', 'NWS', 'HTH', 'ZXC', 'IAW', 'EPV', 'ONR', 'NFN', 'KMQ', 'CCE', 'ASU', 'SYF', 'PIQ', 'EHB', 'IWX', 'TAV', 'PJV', 'KET', 'BCR', 'UTS', 'OCI', 'PBE', 'XDJ', 'XSN', 'CUS', 'XBF', 'ZQF', 'RTW', 'CJI', 'XPI', 'KGD', 'ZNS', 'JCM', 'SRD', 'ADD', 'NJY', 'TQU', 'RNK', 'IQR', 'FYF', 'VDQ', 'IUO', 'SXI', 'DRM', 'XSX', 'FBH', 'YQE', 'BTM', 'GZJ', 'JJR', 'ONH', 'NLJ', 'XVR', 'XCP', 'VLW', 'ISS', 'FDK', 'FAS', 'HDE', 'ETY', 'KIA', 'BJX', 'ZZM', 'EIB', 'HWD', 'HDY', 'QGB', 'BQH', 'PFT', 'MBI', 'NND', 'DRP', 'IWC', 'TFF', 'PDU', 'YTB', 'WHR', 'QNY', 'IUB', 'QZK', 'NXL', 'JOB', 'FEF', 'DZC', 'DAL', 'IJK', 'HBO', 'ZRR', 'JJH', 'MXI', 'YSP', 'BRV', 'JRA', 'JQE', 'XWQ', 'GVY', 'CEN', 'NYY', 'JCW', 'BIN', 'QGA', 'SCX', 'LZV', 'SPA', 'CRQ', 'RUJ', 'PYJ', 'BCG', 'QFR', 'QED', 'RLR', 'JXV', 'NIQ', 'WHL', 'UQJ', 'EPN', 'HEF', 'IUR', 'MCH', 'THC', 'WTN', 'OCP', 'DSM', 'LXW', 'ZQJ', 'FMU', 'VNW', 'IXM', 'BYF', 'NXY', 'CJO', 'IIY', 'CGW', 'PNE', 'WFH', 'SHG', 'SBO', 'XFA', 'KLO', 'YMJ', 'INZ', 'PMK', 'RYE', 'KHB', 'YXB', 'TZK', 'LES', 'ZZN', 'FXH', 'EMP', 'PDI', 'JIS', 'GQW', 'SMX', 'UCU', 'IFF', 'VZI', 'DPN', 'LIK', 'CJO', 'DOC', 'BJP', 'NUB', 'GPH', 'GRQ', 'SOU', 'TZH', 'WUN', 'PDC', 'EWB', 'YMX', 'OEF', 'MEB', 'QBU', 'JUQ', 'HEQ', 'UJF', 'QDF', 'MMK', 'ZVU', 'JRP', 'JOS', 'TCC', 'TIO', 'RPM', 'GVB', 'GOH', 'CUV', 'DUW', 'EAK', 'CII', 'PGT', 'CHN', 'HMM', 'RLO', 'ARC', 'EFW', 'HVX', 'HJV', 'OHY', 'GPG', 'MQO', 'GBU', 'YPD', 'FNW', 'MDP', 'KXQ', 'PSB', 'NVZ', 'BYC', 'IUC', 'URT', 'BVP', 'VZP', 'UTL', 'BXW', 'FKT', 'PGM', 'DGD', 'AIV', 'TMY', 'RUN', 'QYG', 'GXF', 'VPF', 'UNY', 'MOZ', 'INN', 'VEV', 'PWC', 'AWY', 'MKI', 'TXG', 'BQU', 'QAU', 'ILO', 'IBH', 'PCO', 'RDH', 'UNP', 'LLB', 'DER', 'YRP', 'MWZ', 'NIH', 'MCS', 'ZCL', 'IOI', 'UPU', 'MNS', 'JDR', 'OWF', 'XTA', 'OAZ', 'WCV', 'FFI', 'NLI', 'BFD', 'LDD', 'FZR', 'HNP', 'IRL', 'WEA', 'PDE', 'IEN', 'GGR', 'YUP', 'VWA', 'WEM', 'QPZ', 'ZBA', 'GLU', 'CUH', 'VDK', 'KLF', 'OLF', 'PMD', 'FLZ', 'JQV', 'SGP', 'JZZ', 'HIO', 'LFV', 'PTG', 'FEL', 'WNX', 'LDU', 'EXI', 'JMT', 'RID', 'TXZ', 'PGC', 'GLC', 'JLI', 'CLT', 'VDK', 'FBI', 'WSW', 'ELJ', 'YJY', 'YXU', 'XWC', 'MII', 'YXM', 'HCJ', 'JVC', 'RPF', 'NXE', 'UFO', 'BYH', 'EFA', 'EGO', 'XVS', 'VWG', 'LOY', 'LCG', 'TRQ', 'IKL', 'OQA', 'HTU', 'XNU', 'AZS', 'BOR', 'XWR', 'UQN', 'YFH', 'TDS', 'RLP', 'PHC', 'AYP', 'BVL', 'CQI', 'HSC', 'JRS', 'YZU', 'YFY', 'WEI', 'ITW', 'MYU', 'ORF', 'OTD', 'CAO', 'UJN', 'UFW', 'UUP', 'IQG', 'SEG', 'BAQ', 'KJD', 'DNG', 'BZL', 'DVT', 'KJY', 'XLW', 'TMH', 'DCX', 'MVJ', 'JFU', 'VCL', 'FQX', 'WRS', 'OXS', 'QGT', 'UPJ', 'QTI', 'AOU', 'CHR', 'AMC', 'VCN', 'OUC', 'JDK', 'CNL', 'HVI', 'WTS', 'VPC', 'THK', 'SVV', 'IGZ', 'ZPC', 'OBU', 'EQP', 'UMD', 'BQX', 'CKN', 'FOW', 'RGD', 'LNP', 'YEG', 'GVT', 'BSV', 'KKI', 'JEZ', 'GQH', 'DHB', 'TFV', 'TFS', 'WVS', 'ZFS', 'ZPG', 'PLN', 'OBM', 'BRE', 'HXC', 'JBF', 'GKA', 'RKS', 'PUS', 'XGS', 'QYD', 'IOK', 'DZR', 'IRX', 'NIJ', 'EAJ', 'SCY', 'KXB', 'VII', 'ETT', 'UPQ', 'JPW', 'ZTS', 'CZC', 'DFE', 'JLR', 'ZAC', 'XTQ', 'JZY', 'MUW', 'EXR', 'OQC', 'QLF', 'VAL', 'CBQ', 'SQO', 'HXA', 'SCI', 'ZAM', 'EDK', 'HVB', 'LSH', 'EOR', 'KZF', 'TLA', 'JIK', 'ULN', 'CJY', 'YKP', 'RQQ', 'XQJ', 'EFK', 'WEA', 'VHL', 'ANA', 'VYI', 'GTV', 'FRN', 'BXI', 'QYM', 'WUJ', 'FHW', 'RAH', 'RCK', 'RXY', 'KXC', 'IFA', 'OCZ', 'PTB', 'IHO', 'SDL', 'YEP', 'RFX', 'ZUR', 'FKV', 'WFA', 'VAF', 'ZHK', 'KZO', 'AAN', 'IME', 'MIF', 'VCG', 'BYQ', 'QOY', 'LSG', 'IRT', 'PUI', 'UAB', 'MPY', 'CKS', 'PZL', 'EUW', 'JIO', 'WXL', 'JEV', 'SBT', 'WUQ', 'GBH', 'QEG', 'ZCJ', 'OKQ', 'AAX', 'LJN', 'OYH', 'EIJ', 'ZNK', 'JIA', 'TDN', 'DPU', 'BTR', 'SEP', 'VKZ', 'HEX', 'WFB', 'DKR', 'FQH', 'CTQ', 'NPX', 'DHG', 'ZSN', 'ZYF', 'MLP', 'IUH', 'ZIX', 'UYI', 'SRK', 'GEG', 'SCW', 'TED', 'XOP', 'PML', 'RNK', 'KTA', 'KJJ', 'UXS', 'MRX', 'FJH', 'NRA', 'ZJJ', 'WGU', 'NPD', 'GPA', 'UBR', 'GXI', 'YQP', 'SEI', 'MOZ', 'UIR', 'SIH', 'EAP', 'IXV', 'EKD', 'YVX', 'PPZ', 'MBK', 'NTQ', 'BSZ', 'BVD', 'LMV', 'MDB', 'BOK', 'XLL', 'QJJ', 'CTH', 'BLQ', 'ZOR', 'RVD', 'MNW', 'OCC', 'FCN', 'MAK', 'OMZ', 'PLJ', 'QMP', 'PTZ', 'AXB', 'YJG', 'JZX', 'HUH', 'FOL', 'BUV', 'BEI', 'ZYN', 'JHS', 'JND', 'TIB', 'JMM', 'UTZ', 'GEZ', 'LTQ', 'IBJ', 'WOY', 'IGT', 'ZUV', 'MWP', 'GSJ', 'FET', 'LXM', 'ZBE', 'VTI', 'WLW', 'PYT', 'DJQ', 'NFU', 'BKX', 'MDD', 'YPX', 'SBG', 'TKI', 'QRU', 'IKG', 'SRQ', 'AOB', 'KHN', 'IZN', 'NQU', 'NQC', 'HVS', 'JCP', 'HUL', 'MXN', 'DOW', 'HXR', 'GZT', 'GNL', 'INF', 'AOU', 'RXX', 'UEP', 'OXY', 'VWA', 'GLH', 'WPM', 'NVR', 'HIP', 'RIM', 'JJJ', 'JDN', 'RBB', 'BDI', 'XVJ', 'ERO', 'RXJ', 'ZMA', 'TVU', 'HPE', 'VAU', 'GVU', 'ZGK', 'KCK', 'DHB', 'RNZ', 'HDO', 'CZF', 'UTI', 'SAQ', 'SWA', 'VXK', 'FEH', 'RFJ', 'ZKQ', 'DOJ', 'DKK', 'SDL', 'FSX', 'ZJF', 'KTA', 'NLG', 'PHJ', 'WOH', 'AXU', 'HSI', 'SZW', NULL) AS x FROM x ORDER BY x;
SELECT x, NOT x IN ('QOY', 'AAZ', 'AOR', 'VJR', 'ROL', 'KOS', 'JBC', 'EMZ', 'LQT', 'HYX', 'IYA', 'YAA', 'XMR', 'HGJ', 'LDR', 'MVT', 'XEQ', 'NPX', 'ZKV', 'HET', 'GZI', 'PLI', 'ABK', 'LOJ', 'KYB', 'UKG', 'PNY', 'SBV', 'VSJ', 'FAR', 'AXH', 'XWO', 'NKA', 'CPE', 'GSC', 'TWK', 'SXK', 'SUU', 'KPX', 'NXU', 'ZMR', 'BZG', 'CBO', 'SQA', 'VNE', 'NUT', 'LKF', 'IWL', 'CQE', 'UED', 'BHQ', 'RQR', 'FVG', 'EZZ', 'SRJ', 'UPA', 'JUV', 'AXP', 'JGL', 'HKC', 'CYM', 'AAK', 'WUM', 'NWK', 'DCQ', 'YXT', 'DQZ', 'WXB', 'YVG', 'YXL', 'FWG', 'PLN', 'YPK', 'UPA', 'GIC', 'IPS', 'WQB', 'NSR', 'WRT', 'WOP', 'JAX', 'XWZ', 'TIM', 'EAO', 'ANC', 'NAT', 'KFL', 'XJA', 'HUG', 'SVP', 'HVX', 'APA', 'RJI', 'QKP', 'MZB', 'MME', 'GJW', 'TBX', 'TRT', 'IRL', 'BUR', 'OWP', 'DAK', 'IGZ', 'OJL', 'BON', 'KLG', 'SSI', 'UOD', 'SCW', 'LGT', 'KTL', 'DPA', 'WTC', 'NSW', 'TEQ', 'HNU', 'GEI', 'OFK', 'UQB', 'QWI', 'ACS', 'MMR', 'EHZ', 'PXR', 'SPK', 'POO', 'CMF', 'UEE', 'QUK', 'BZR', 'ZBH', 'KJV', 'RIV', 'HOX', 'GZU', 'PQO', 'NLU', 'BRV', 'XND', 'APA', 'QXV', 'QEW', 'AJR', 'OYC', 'YTA', 'FMS', 'GSK', 'MCC', 'QVQ', 'FYD', 'QQJ', 'VBM', 'EYV', 'ELQ', 'KHI', 'HTU', 'KDQ', 'YRI', 'CEB', 'WGP', 'HIY', 'XSM', 'FTD', 'EHU', 'KFE', 'FCN', 'YRC', 'WFC', 'YRC', 'PZH', 'ZAG', 'AAM', 'UBM', 'JIH', 'CRQ', 'BOE', 'KLI', 'SAB', 'TYY', 'AGX', 'FEH', 'ZPX', 'PRU', 'GXA', 'HDC', 'UJG', 'OCO', 'BLZ', 'ZFH', 'LRN', 'GYF', 'FBR', 'OVH', 'XTL', 'FQZ', 'MKP', 'UKA', 'RMN', 'IWX', 'RYF', 'WTB', 'KWU', 'MKN', 'JFM', 'VUU', 'UTU', 'CLW', 'HKQ', 'SJA', 'ADT', 'RTN', 'ZPJ', 'NUX', 'HMY', 'RDA', 'YQQ', 'COL', 'JRB', 'PYV', 'YAU', 'AYM', 'STV', 'BDC', 'PIZ', 'CAK', 'VWS', 'GNU', 'SZA', 'PMP', 'WOV', 'LPL', 'PJY', 'FWV', 'CLH', 'IVC', 'YHN', 'QWB', 'SCE', 'PFN', 'WDI', 'PIN', 'QSN', 'WDE', 'JOZ', 'DPZ', 'WFX', 'IQS', 'TBZ', 'FXQ', 'PLM', 'WQH', 'BEJ', 'KFM', 'KLH', 'ZVT', 'MBV', 'JQT', 'RIR', 'FDB', 'AOV', 'GZV', 'CTN', 'YCY', 'XSB', 'UUI', 'EWM', 'MQR', 'SKE', 'ACO', 'AGP', 'RWD', 'XGR', 'PCO', 'OSY', 'QHG', 'YEW', 'DHQ', 'FNH', 'QWX', 'RSL', 'GKL', 'VEP', 'SME', 'TKH', 'JOQ', 'XZY', 'ZBF', 'UJP', 'UKD', 'QIZ', 'VQF', 'QUW', 'XGX', 'TPG', 'LYD', 'WBX', 'GRI', 'YDC', 'PJU', 'EFU', 'MZV', 'GBN', 'EJE', 'JYH', 'XTC', 'ZNI', 'JJE', 'XJD', 'SJU', 'SNP', 'ZLL', 'ZRL', 'CUC', 'EOQ', 'IZU', 'MZH', 'UMQ', 'ULS', 'ETH', 'AUT', 'NPL', 'IYB', 'OXQ', 'CXH', 'QRI', 'RHM', 'PNO', 'QGF', 'THK', 'KYU', 'OIE', 'OGO', 'UDS', 'OIS', 'DXJ', 'ETV', 'UWI', 'VLX', 'SOG', 'KNW', 'FOR', 'CCT', 'PHH', 'YNI', 'BOW', 'AJR', 'LJE', 'PUB', 'NPF', 'ELB', 'SIE', 'NAC', 'IZD', 'BQE', 'SUH', 'YQE', 'AVC', 'CIV', 'SOK', 'VRB', 'YUG', 'JFO', 'FCB', 'LEY', 'IPX', 'PEZ', 'BFV', 'BCV', 'RWZ', 'BHX', 'OJV', 'QPZ', 'QQX', 'ECG', 'MCD', 'UEI', 'IAE', 'VKD', 'QUJ', 'WYL', 'UOI', 'XDP', 'JTW', 'LFJ', 'AHH', 'XRL', 'QQM', 'AGA', 'RLE', 'MFI', 'UYI', 'HEM', 'KKJ', 'VLN', 'PYN', 'ZZA', 'WGI', 'PTH', 'BMR', 'MZK', 'IPY', 'SLA', 'JOS', 'ZLT', 'ZDF', 'XWY', 'OHJ', 'RPL', 'BPE', 'NVZ', 'YIF', 'HWM', 'BGM', 'VUO', 'YIW', 'UBS', 'EAW', 'AYN', 'UCE', 'UIB', 'DNV', 'YAQ', 'TBE', 'GMT', 'EOW', 'RWL', 'TYU', 'UTX', 'SRJ', 'FZZ', 'RJU', 'QJB', 'MFY', 'PID', 'RWM', 'PWH', 'PJS', 'BNK', 'IUO', 'POW', 'MBL', 'XMH', 'YWN', 'FTC', 'XME', 'MUS', 'XYD', 'BVI', 'FGU', 'BCJ', 'KRH', 'XPM', 'HDV', 'SQS', 'PFE', 'SIU', 'PZL', 'APT', 'CZK', 'HHL', 'EVI', 'GOE', 'RWG', 'PZF', 'DPS', 'GXN', 'WVC', 'ZDE', 'BDQ', 'WYP', 'PLB', 'SZZ', 'HPM', 'BUL', 'VRY', 'ZNG', 'XUS', 'SLU', 'SLQ', 'UOH', 'YHR', 'FGE', 'RJY', 'CMO', 'NGZ', 'PCG', 'PFN', 'EPG', 'ILE', 'RXF', 'NLD', 'PYW', 'WTG', 'HKL', 'IGB', 'YNF', 'TAL', 'MBR', 'YEK', 'VKO', 'ZGO', 'UKH', 'GJN', 'QCD', 'OQD', 'HEU', 'GWT', 'THS', 'LAS', 'JLU', 'TNV', 'UQB', 'YDO', 'ZFI', 'XBV', 'VYI', 'GAC', 'GDU', 'DLL', 'JXX', 'GUP', 'FUF', 'KQI', 'TLC', 'DAQ', 'OMN', 'FYT', 'GIZ', 'NON', 'UGU', 'CSI', 'NEO', 'SVA', 'ZBM', 'GGU', 'PFF', 'QFB', 'JZH', 'OBB', 'VHM', 'PAJ', 'BKD', 'JEI', 'ZQG', 'GBX', 'UCR', 'TXS', 'PAK', 'HYP', 'CAI', 'WJY', 'VLH', 'QLY', 'XKI', 'SDS', 'QEF', 'KKF', 'XBQ', 'FTE', 'CEX', 'PJM', 'RTA', 'TXQ', 'BSK', 'OXU', 'ELZ', 'WII', 'THG', 'RDY', 'LFS', 'JNY', 'ORJ', 'FXD', 'OTG', 'BUG', 'EDF', 'DDM', 'HTZ', 'IAA', 'RWR', 'XBL', 'PXV', 'FVH', 'OSB', 'UQW', 'CUP', 'OIF', 'VQZ', 'KCT', 'VWJ', 'IRP', 'UAZ', 'CCF', 'MCY', 'GGP', 'HDT', 'SZT', 'JSR', 'HDR', 'MQR', 'OCP', 'XQD', 'QYT', 'NSA', 'LPC', 'MGS', 'DAZ', 'SDQ', 'BMS', 'EJL', 'ADY', 'JFP', 'YQD', 'CIP', 'CST', 'ATU', 'JTD', 'HDI', 'JMF', 'LJO', 'SEC', 'ZCN', 'EMG', 'RLJ', 'AMV', 'BVT', 'IZV', 'DND', 'VCJ', 'HNY', 'DSI', 'DWM', 'EDI', 'LQO', 'NDN', 'GGA', 'EXH', 'XFP', 'NLU', 'DNC', 'OTA', 'KQD', 'JRJ', 'JXV', 'UAK', 'TNB', 'ZXJ', 'YTU', 'MMS', 'NCV', 'VIR', 'EUI', 'KND', 'PTL', 'LKF', 'FUT', 'VUX', 'PWI', 'ETZ', 'IHN', 'GYS', 'KAQ', 'UYN', 'HOQ', 'END', 'WHD', 'NMT', 'HEW', 'OBN', 'RDZ', 'SKP', 'LHN', 'HQS', 'YTY', 'GXW', 'EKC', 'BCD', 'BRQ', 'CSX', 'OCI', 'OZP', 'TBN', 'HHG', 'VFZ', 'WJY', 'VBT', 'LNT', 'YDL', 'KOC', 'IJF', 'HSB', 'USO', 'HOK', 'MEK', 'WXT', 'DRT', 'SNE', 'WAI', 'EMP', 'IGC', 'QPJ', 'GCF', 'CJW', 'ONH', 'XQO', 'KFY', 'CZQ', 'AUC', 'BQD', 'KBH', 'GFS', 'BVT', 'QLX', 'TYO', 'WWE', 'TXE', 'MQM', 'WNC', 'WKC', 'ZLW', 'RDJ', 'WCZ', 'UOV', 'IBT', 'HOQ', 'VIA', 'DPE', 'AJX', 'AYA', 'DEM', 'YDD', 'SOU', 'KZU', 'ATH', 'BPS', 'GTM', 'ALW', 'ODR', 'DBZ', 'KYG', 'CES', 'NWC', 'QER', 'FFA', 'UZS', 'GPL', 'MTD', 'TPI', 'GMR', 'WXV', 'YYY', 'FAX', 'MNL', 'JUS', 'SVJ', 'ZNX', 'QDQ', 'FIH', 'EXR', 'XSM', 'OQX', 'GUW', 'KEG', 'DHJ', 'GXH', 'ROZ', 'TCT', 'UNU', 'XGS', 'ODG', 'GZH', 'TZV', 'LFP', 'CDF', 'LJZ', 'RLL', 'QBY', 'CEQ', 'JWH', 'GYJ', 'LSJ', 'CQV', 'HJT', 'PVB', 'DLH', 'BFI', 'RIV', 'UCG', 'KOG', 'TXS', 'JDF', 'DKD', 'FOE', 'UIO', 'GDY', 'OIG', 'FWH', 'YSY', 'HGV', 'GIS', 'CMB', 'SDT', 'ROH', 'NMU', 'YHA', 'WDJ', 'VDV', 'LDE', 'PUR', 'UNS', 'NDY', 'YCZ', 'SAQ', 'OJW', 'OIP', 'IWC', 'WPT', 'PJI', 'PMP', 'CEB', 'WRZ', 'LSI', 'QUA', 'HMA', 'VWZ', 'KWX', 'RTA', 'IXL', 'XZH', 'UOT', 'IWF', 'LXN', 'VXY', 'DMU', 'EKC', 'JRF', 'EMA', 'LNG', 'JWT', 'NLH', 'EPH', 'FFJ', 'RTR', 'XJE', 'OAW', 'HSP', 'AFE', 'EPI', 'RSV', 'OIZ', 'BEC', 'ILJ', 'UPU', 'JZC', 'HGP', 'HLT', 'GSY', 'XGP', 'NYL', 'VHY', 'CQN', 'WEE', 'GFJ', 'LGE', 'IBM', 'NCI', 'OPR', 'TIO', 'DPL', 'TFD', 'XKJ', 'DWM', 'DPV', 'RIE', 'UKK', 'OBM', 'NLJ', 'VUM', 'IRE', 'DNR', 'KVP', 'PZX', 'FBD', 'GDI', 'YAW', 'MKG', 'EAX', 'CBM', 'TCH', 'LGX', 'UCY', 'EWE', 'ZUN', 'DPM', 'BUH', 'NQJ', 'RFX', 'XUI', 'BHB', 'BMM', 'MGZ', 'PTR', 'RUM', 'FVC', 'BRO', 'ZVP', 'YMV', 'PNX', 'WRO', 'KKR', 'WCE', 'UFT', 'QWG', 'UNY', 'IZE', 'ZFX', 'KBC', 'DPS', 'QYY', 'ZNO', 'DHR', 'GWP', 'UTY', 'CSO', 'SQH', 'TBU', 'CYF', 'ROH', 'GYF', 'BWT', 'RKM', 'WLV', 'FSB', 'EWV', 'DHJ', 'RPB', 'NVJ', 'LUF', 'TTV', 'WPT', 'APQ', 'IXF', 'HAQ', 'OVS', 'JTE', 'LOQ', 'PXF', 'MAZ', 'AHV', 'TZO', 'LHO', 'ATL', 'MII', 'LTR', 'KPQ', 'ZXP', 'JPI', 'GLF', 'VKG', 'CAM', 'GVX', 'JUO', 'YWZ', 'NNQ', 'RGV', 'CDS', 'CYA', 'QPX', 'HHG', 'DDF', 'YXE', 'ZKL', 'XDJ', 'HLC', 'ORZ', 'UEX', 'FKH', 'RWT', 'RKN', 'USW', 'UBC', 'QGT', 'MGN', 'WXC', 'ENU', 'RLW', 'OFP', 'XGN', 'PSX', 'JTD', 'LFK', 'PBI', 'BWD', 'JVG', 'HFG', 'WLM', 'XNC', 'HWH', 'FGZ', 'JEK', 'HRL', 'NBL', 'THW', 'WKI', 'IME', 'UIY', 'WAA', 'XQO', 'UUD', 'IRS', 'FBF', 'JZV', 'CCR', 'YLF', 'RXP', 'UIP', 'OGN', 'IID', 'ENW', 'XPL', 'PFE', 'MEX', 'GPH', 'RBW', 'JML', 'ZVR', 'YWL', 'QPJ', 'LYY', 'NKS', 'VIJ', 'SAZ', 'LNC', 'NGU', 'RRD', 'PJK', 'FOH', 'ORW', 'YLQ', 'GFG', 'NOW', 'IDV', 'WHE', 'RTH', 'NVL', 'BAQ', 'HAK', 'SKH', 'LTZ', 'HDF', 'SIB', 'PHY', 'PWZ', 'CWY', 'JNE', 'CXW', 'EPN', 'LAO', 'WEI', 'AGK', 'XJQ', 'ILR', 'CVO', 'MEX', 'BGD', 'AEK', 'DHK', 'KAC', 'DQL', 'WDA', 'GVU', 'RUN', 'XQU', 'EXU', 'WER', 'UBS', 'XOK', 'WML', 'XQM', 'XBW', 'VTT', 'SMF', 'DRX', 'XGZ', 'KXD', 'IVV', 'OIJ', 'KAW', 'SEW', 'URD', 'QAW', 'RFL', 'ZGP', 'VVR', 'ZLA', 'LXV', 'OWU', 'YGF', 'BJO', 'OTZ', 'RSD', 'GTT', 'CEP', 'HVH', 'ZNI', 'BHV', 'IKT', 'GCF', 'XYF', 'FOL', 'NLV', 'NFL', 'TOO', 'GYY', 'POS', 'JGL', 'BUE', 'DYK', 'VVV', 'RMJ', 'LBS', 'WSL', 'FHZ', 'RWB', 'DLC', 'XPL', 'YLW', 'OYK', 'HQN', 'MRA', 'QAJ', 'MIX', 'ICY', 'WZS', 'IJG', 'VYF', 'XON', 'AZB', 'RQC', 'AYK', 'CUV', 'JST', 'BNP', 'UCF', 'DIG', 'ANC', 'XVQ', 'CEC', 'TND', 'SHS', 'YTJ', 'XFX', 'TBI', 'JRE', 'WBD', 'ZVA', 'TSG', 'DYY', 'XUB', 'JDH', 'VSO', 'NMU', 'QWP', 'SKI', 'XMG', 'RVK', 'XVO', 'OAV', 'NYW', 'NRR', 'QRY', 'EBG', 'OYJ', 'ZDN', 'LLU', 'ACT', 'MYP', 'KUK', 'TDO', 'CUB', 'QHL', 'QRO', 'FTD', 'KBL', 'YEY', 'NQD', 'OAH', 'ACU', 'EDM', 'QYP', 'OUO', 'PDK', 'VSP', 'PKW', 'JZF', 'GAL', 'COS', 'RFL', 'DIM', 'MPZ', 'IZX', 'KBU', 'LVK', 'DTP', 'PWC', 'EUQ', 'ESR', 'PIL', 'PTW', 'DNF', 'VLW', 'NBA', 'DFW', 'RDK', 'PYF', 'NIA', 'LLQ', 'WUE', 'SLJ', 'TEF', 'GNC', 'FIC', 'EQD', 'ERL', 'IKZ', 'UKG', 'TNT', 'XCP', 'NRV', 'GVU', 'XFZ', 'VEL', 'GCR', 'XAE', 'GTN', 'VRZ', 'WSY', 'RKD', 'WIA', 'ZPB', 'EWE', 'AVT', 'EZD', 'YCN', 'TJY', 'PCS', 'PXA', 'EAR', 'CIE', 'PPO', 'PFP', 'PFJ', 'SZK', 'IBH', 'LQB', 'EDI', 'ELJ', 'OJS', 'QBC', 'GTV', 'GXH', 'MFG', 'QQO', 'PIK', 'LDF', 'KIX', 'CSV', 'MAP', 'ALA', 'KZH', 'QPA', 'BCG', 'DWQ', 'MUM', 'UJT', 'ZIK', 'XPU', 'CQL', 'DZH', 'ZGR', 'UCU', 'LAT', 'NXO', 'QYM', 'PNV', 'UTV', 'SGK', 'EXJ', 'NTQ', 'LPQ', 'RVT', 'GHZ', 'FSE', 'PGQ', 'WJL', 'JQI', 'IWL', 'SWW', 'DEQ', 'VLF', 'NUD', 'ZNG', 'DCR', 'LCI', 'NZK', 'QAK', 'GHL', 'UCZ', 'ESU', 'JQG', 'NJL', 'PPD', 'QGA', 'GSW', 'YDG', 'QNJ', 'EYF', 'NNZ', 'EAG', 'RFE', 'CBE', 'ENO', 'HDT', 'WFV', 'CFE', 'MGY', 'PAE', 'WUG', 'LPU', 'HZD', 'GFM', 'JHE', 'TPQ', 'DAO', 'KBZ', 'GBA', 'NFH', 'DDS', 'HYA', 'VWS', 'ZLG', 'XKO', 'HFE', 'OJS', 'ZNK', 'OAT', 'YFE', 'NYJ', 'RDP', 'NTN', 'BEW', 'IGK', 'AYV', 'QXZ', 'NJB', 'QYE', 'GGE', 'DVI', 'UFG', 'AWY', 'JAN', 'GPW', 'GYE', 'BKS', 'REI', 'XYZ', 'VTY', 'NCD', 'EMH', 'YZE', 'LKN', 'JFF', 'IHZ', 'KUE', 'VNJ', 'SAW', 'NWS', 'HTH', 'ZXC', 'IAW', 'EPV', 'ONR', 'NFN', 'KMQ', 'CCE', 'ASU', 'SYF', 'PIQ', 'EHB', 'IWX', 'TAV', 'PJV', 'KET', 'BCR', 'UTS', 'OCI', 'PBE', 'XDJ', 'XSN', 'CUS', 'XBF', 'ZQF', 'RTW', 'CJI', 'XPI', 'KGD', 'ZNS', 'JCM', 'SRD', 'ADD', 'NJY', 'TQU', 'RNK', 'IQR', 'FYF', 'VDQ', 'IUO', 'SXI', 'DRM', 'XSX', 'FBH', 'YQE', 'BTM', 'GZJ', 'JJR', 'ONH', 'NLJ', 'XVR', 'XCP', 'VLW', 'ISS', 'FDK', 'FAS', 'HDE', 'ETY', 'KIA', 'BJX', 'ZZM', 'EIB', 'HWD', 'HDY', 'QGB', 'BQH', 'PFT', 'MBI', 'NND', 'DRP', 'IWC', 'TFF', 'PDU', 'YTB', 'WHR', 'QNY', 'IUB', 'QZK', 'NXL', 'JOB', 'FEF', 'DZC', 'DAL', 'IJK', 'HBO', 'ZRR', 'JJH', 'MXI', 'YSP', 'BRV', 'JRA', 'JQE', 'XWQ', 'GVY', 'CEN', 'NYY', 'JCW', 'BIN', 'QGA', 'SCX', 'LZV', 'SPA', 'CRQ', 'RUJ', 'PYJ', 'BCG', 'QFR', 'QED', 'RLR', 'JXV', 'NIQ', 'WHL', 'UQJ', 'EPN', 'HEF', 'IUR', 'MCH', 'THC', 'WTN', 'OCP', 'DSM', 'LXW', 'ZQJ', 'FMU', 'VNW', 'IXM', 'BYF', 'NXY', 'CJO', 'IIY', 'CGW', 'PNE', 'WFH', 'SHG', 'SBO', 'XFA', 'KLO', 'YMJ', 'INZ', 'PMK', 'RYE', 'KHB', 'YXB', 'TZK', 'LES', 'ZZN', 'FXH', 'EMP', 'PDI', 'JIS', 'GQW', 'SMX', 'UCU', 'IFF', 'VZI', 'DPN', 'LIK', 'CJO', 'DOC', 'BJP', 'NUB', 'GPH', 'GRQ', 'SOU', 'TZH', 'WUN', 'PDC', 'EWB', 'YMX', 'OEF', 'MEB', 'QBU', 'JUQ', 'HEQ', 'UJF', 'QDF', 'MMK', 'ZVU', 'JRP', 'JOS', 'TCC', 'TIO', 'RPM', 'GVB', 'GOH', 'CUV', 'DUW', 'EAK', 'CII', 'PGT', 'CHN', 'HMM', 'RLO', 'ARC', 'EFW', 'HVX', 'HJV', 'OHY', 'GPG', 'MQO', 'GBU', 'YPD', 'FNW', 'MDP', 'KXQ', 'PSB', 'NVZ', 'BYC', 'IUC', 'URT', 'BVP', 'VZP', 'UTL', 'BXW', 'FKT', 'PGM', 'DGD', 'AIV', 'TMY', 'RUN', 'QYG', 'GXF', 'VPF', 'UNY', 'MOZ', 'INN', 'VEV', 'PWC', 'AWY', 'MKI', 'TXG', 'BQU', 'QAU', 'ILO', 'IBH', 'PCO', 'RDH', 'UNP', 'LLB', 'DER', 'YRP', 'MWZ', 'NIH', 'MCS', 'ZCL', 'IOI', 'UPU', 'MNS', 'JDR', 'OWF', 'XTA', 'OAZ', 'WCV', 'FFI', 'NLI', 'BFD', 'LDD', 'FZR', 'HNP', 'IRL', 'WEA', 'PDE', 'IEN', 'GGR', 'YUP', 'VWA', 'WEM', 'QPZ', 'ZBA', 'GLU', 'CUH', 'VDK', 'KLF', 'OLF', 'PMD', 'FLZ', 'JQV', 'SGP', 'JZZ', 'HIO', 'LFV', 'PTG', 'FEL', 'WNX', 'LDU', 'EXI', 'JMT', 'RID', 'TXZ', 'PGC', 'GLC', 'JLI', 'CLT', 'VDK', 'FBI', 'WSW', 'ELJ', 'YJY', 'YXU', 'XWC', 'MII', 'YXM', 'HCJ', 'JVC', 'RPF', 'NXE', 'UFO', 'BYH', 'EFA', 'EGO', 'XVS', 'VWG', 'LOY', 'LCG', 'TRQ', 'IKL', 'OQA', 'HTU', 'XNU', 'AZS', 'BOR', 'XWR', 'UQN', 'YFH', 'TDS', 'RLP', 'PHC', 'AYP', 'BVL', 'CQI', 'HSC', 'JRS', 'YZU', 'YFY', 'WEI', 'ITW', 'MYU', 'ORF', 'OTD', 'CAO', 'UJN', 'UFW', 'UUP', 'IQG', 'SEG', 'BAQ', 'KJD', 'DNG', 'BZL', 'DVT', 'KJY', 'XLW', 'TMH', 'DCX', 'MVJ', 'JFU', 'VCL', 'FQX', 'WRS', 'OXS', 'QGT', 'UPJ', 'QTI', 'AOU', 'CHR', 'AMC', 'VCN', 'OUC', 'JDK', 'CNL', 'HVI', 'WTS', 'VPC', 'THK', 'SVV', 'IGZ', 'ZPC', 'OBU', 'EQP', 'UMD', 'BQX', 'CKN', 'FOW', 'RGD', 'LNP', 'YEG', 'GVT', 'BSV', 'KKI', 'JEZ', 'GQH', 'DHB', 'TFV', 'TFS', 'WVS', 'ZFS', 'ZPG', 'PLN', 'OBM', 'BRE', 'HXC', 'JBF', 'GKA', 'RKS', 'PUS', 'XGS', 'QYD', 'IOK', 'DZR', 'IRX', 'NIJ', 'EAJ', 'SCY', 'KXB', 'VII', 'ETT', 'UPQ', 'JPW', 'ZTS', 'CZC', 'DFE', 'JLR', 'ZAC', 'XTQ', 'JZY', 'MUW', 'EXR', 'OQC', 'QLF', 'VAL', 'CBQ', 'SQO', 'HXA', 'SCI', 'ZAM', 'EDK', 'HVB', 'LSH', 'EOR', 'KZF', 'TLA', 'JIK', 'ULN', 'CJY', 'YKP', 'RQQ', 'XQJ', 'EFK', 'WEA', 'VHL', 'ANA', 'VYI', 'GTV', 'FRN', 'BXI', 'QYM', 'WUJ', 'FHW', 'RAH', 'RCK', 'RXY', 'KXC', 'IFA', 'OCZ', 'PTB', 'IHO', 'SDL', 'YEP', 'RFX', 'ZUR', 'FKV', 'WFA', 'VAF', 'ZHK', 'KZO', 'AAN', 'IME', 'MIF', 'VCG', 'BYQ', 'QOY', 'LSG', 'IRT', 'PUI', 'UAB', 'MPY', 'CKS', 'PZL', 'EUW', 'JIO', 'WXL', 'JEV', 'SBT', 'WUQ', 'GBH', 'QEG', 'ZCJ', 'OKQ', 'AAX', 'LJN', 'OYH', 'EIJ', 'ZNK', 'JIA', 'TDN', 'DPU', 'BTR', 'SEP', 'VKZ', 'HEX', 'WFB', 'DKR', 'FQH', 'CTQ', 'NPX', 'DHG', 'ZSN', 'ZYF', 'MLP', 'IUH', 'ZIX', 'UYI', 'SRK', 'GEG', 'SCW', 'TED', 'XOP', 'PML', 'RNK', 'KTA', 'KJJ', 'UXS', 'MRX', 'FJH', 'NRA', 'ZJJ', 'WGU', 'NPD', 'GPA', 'UBR', 'GXI', 'YQP', 'SEI', 'MOZ', 'UIR', 'SIH', 'EAP', 'IXV', 'EKD', 'YVX', 'PPZ', 'MBK', 'NTQ', 'BSZ', 'BVD', 'LMV', 'MDB', 'BOK', 'XLL', 'QJJ', 'CTH', 'BLQ', 'ZOR', 'RVD', 'MNW', 'OCC', 'FCN', 'MAK', 'OMZ', 'PLJ', 'QMP', 'PTZ', 'AXB', 'YJG', 'JZX', 'HUH', 'FOL', 'BUV', 'BEI', 'ZYN', 'JHS', 'JND', 'TIB', 'JMM', 'UTZ', 'GEZ', 'LTQ', 'IBJ', 'WOY', 'IGT', 'ZUV', 'MWP', 'GSJ', 'FET', 'LXM', 'ZBE', 'VTI', 'WLW', 'PYT', 'DJQ', 'NFU', 'BKX', 'MDD', 'YPX', 'SBG', 'TKI', 'QRU', 'IKG', 'SRQ', 'AOB', 'KHN', 'IZN', 'NQU', 'NQC', 'HVS', 'JCP', 'HUL', 'MXN', 'DOW', 'HXR', 'GZT', 'GNL', 'INF', 'AOU', 'RXX', 'UEP', 'OXY', 'VWA', 'GLH', 'WPM', 'NVR', 'HIP', 'RIM', 'JJJ', 'JDN', 'RBB', 'BDI', 'XVJ', 'ERO', 'RXJ', 'ZMA', 'TVU', 'HPE', 'VAU', 'GVU', 'ZGK', 'KCK', 'DHB', 'RNZ', 'HDO', 'CZF', 'UTI', 'SAQ', 'SWA', 'VXK', 'FEH', 'RFJ', 'ZKQ', 'DOJ', 'DKK', 'SDL', 'FSX', 'ZJF', 'KTA', 'NLG', 'PHJ', 'WOH', 'AXU', 'HSI', 'SZW') AS x FROM x ORDER BY x;
SELECT x, NOT x IN ('QOY', 'AAZ', 'AOR', 'VJR', 'ROL', 'KOS', 'JBC', 'EMZ', 'LQT', 'HYX', 'IYA', 'YAA', 'XMR', 'HGJ', 'LDR', 'MVT', 'XEQ', 'NPX', 'ZKV', 'HET', 'GZI', 'PLI', 'ABK', 'LOJ', 'KYB', 'UKG', 'PNY', 'SBV', 'VSJ', 'FAR', 'AXH', 'XWO', 'NKA', 'CPE', 'GSC', 'TWK', 'SXK', 'SUU', 'KPX', 'NXU', 'ZMR', 'BZG', 'CBO', 'SQA', 'VNE', 'NUT', 'LKF', 'IWL', 'CQE', 'UED', 'BHQ', 'RQR', 'FVG', 'EZZ', 'SRJ', 'UPA', 'JUV', 'AXP', 'JGL', 'HKC', 'CYM', 'AAK', 'WUM', 'NWK', 'DCQ', 'YXT', 'DQZ', 'WXB', 'YVG', 'YXL', 'FWG', 'PLN', 'YPK', 'UPA', 'GIC', 'IPS', 'WQB', 'NSR', 'WRT', 'WOP', 'JAX', 'XWZ', 'TIM', 'EAO', 'ANC', 'NAT', 'KFL', 'XJA', 'HUG', 'SVP', 'HVX', 'APA', 'RJI', 'QKP', 'MZB', 'MME', 'GJW', 'TBX', 'TRT', 'IRL', 'BUR', 'OWP', 'DAK', 'IGZ', 'OJL', 'BON', 'KLG', 'SSI', 'UOD', 'SCW', 'LGT', 'KTL', 'DPA', 'WTC', 'NSW', 'TEQ', 'HNU', 'GEI', 'OFK', 'UQB', 'QWI', 'ACS', 'MMR', 'EHZ', 'PXR', 'SPK', 'POO', 'CMF', 'UEE', 'QUK', 'BZR', 'ZBH', 'KJV', 'RIV', 'HOX', 'GZU', 'PQO', 'NLU', 'BRV', 'XND', 'APA', 'QXV', 'QEW', 'AJR', 'OYC', 'YTA', 'FMS', 'GSK', 'MCC', 'QVQ', 'FYD', 'QQJ', 'VBM', 'EYV', 'ELQ', 'KHI', 'HTU', 'KDQ', 'YRI', 'CEB', 'WGP', 'HIY', 'XSM', 'FTD', 'EHU', 'KFE', 'FCN', 'YRC', 'WFC', 'YRC', 'PZH', 'ZAG', 'AAM', 'UBM', 'JIH', 'CRQ', 'BOE', 'KLI', 'SAB', 'TYY', 'AGX', 'FEH', 'ZPX', 'PRU', 'GXA', 'HDC', 'UJG', 'OCO', 'BLZ', 'ZFH', 'LRN', 'GYF', 'FBR', 'OVH', 'XTL', 'FQZ', 'MKP', 'UKA', 'RMN', 'IWX', 'RYF', 'WTB', 'KWU', 'MKN', 'JFM', 'VUU', 'UTU', 'CLW', 'HKQ', 'SJA', 'ADT', 'RTN', 'ZPJ', 'NUX', 'HMY', 'RDA', 'YQQ', 'COL', 'JRB', 'PYV', 'YAU', 'AYM', 'STV', 'BDC', 'PIZ', 'CAK', 'VWS', 'GNU', 'SZA', 'PMP', 'WOV', 'LPL', 'PJY', 'FWV', 'CLH', 'IVC', 'YHN', 'QWB', 'SCE', 'PFN', 'WDI', 'PIN', 'QSN', 'WDE', 'JOZ', 'DPZ', 'WFX', 'IQS', 'TBZ', 'FXQ', 'PLM', 'WQH', 'BEJ', 'KFM', 'KLH', 'ZVT', 'MBV', 'JQT', 'RIR', 'FDB', 'AOV', 'GZV', 'CTN', 'YCY', 'XSB', 'UUI', 'EWM', 'MQR', 'SKE', 'ACO', 'AGP', 'RWD', 'XGR', 'PCO', 'OSY', 'QHG', 'YEW', 'DHQ', 'FNH', 'QWX', 'RSL', 'GKL', 'VEP', 'SME', 'TKH', 'JOQ', 'XZY', 'ZBF', 'UJP', 'UKD', 'QIZ', 'VQF', 'QUW', 'XGX', 'TPG', 'LYD', 'WBX', 'GRI', 'YDC', 'PJU', 'EFU', 'MZV', 'GBN', 'EJE', 'JYH', 'XTC', 'ZNI', 'JJE', 'XJD', 'SJU', 'SNP', 'ZLL', 'ZRL', 'CUC', 'EOQ', 'IZU', 'MZH', 'UMQ', 'ULS', 'ETH', 'AUT', 'NPL', 'IYB', 'OXQ', 'CXH', 'QRI', 'RHM', 'PNO', 'QGF', 'THK', 'KYU', 'OIE', 'OGO', 'UDS', 'OIS', 'DXJ', 'ETV', 'UWI', 'VLX', 'SOG', 'KNW', 'FOR', 'CCT', 'PHH', 'YNI', 'BOW', 'AJR', 'LJE', 'PUB', 'NPF', 'ELB', 'SIE', 'NAC', 'IZD', 'BQE', 'SUH', 'YQE', 'AVC', 'CIV', 'SOK', 'VRB', 'YUG', 'JFO', 'FCB', 'LEY', 'IPX', 'PEZ', 'BFV', 'BCV', 'RWZ', 'BHX', 'OJV', 'QPZ', 'QQX', 'ECG', 'MCD', 'UEI', 'IAE', 'VKD', 'QUJ', 'WYL', 'UOI', 'XDP', 'JTW', 'LFJ', 'AHH', 'XRL', 'QQM', 'AGA', 'RLE', 'MFI', 'UYI', 'HEM', 'KKJ', 'VLN', 'PYN', 'ZZA', 'WGI', 'PTH', 'BMR', 'MZK', 'IPY', 'SLA', 'JOS', 'ZLT', 'ZDF', 'XWY', 'OHJ', 'RPL', 'BPE', 'NVZ', 'YIF', 'HWM', 'BGM', 'VUO', 'YIW', 'UBS', 'EAW', 'AYN', 'UCE', 'UIB', 'DNV', 'YAQ', 'TBE', 'GMT', 'EOW', 'RWL', 'TYU', 'UTX', 'SRJ', 'FZZ', 'RJU', 'QJB', 'MFY', 'PID', 'RWM', 'PWH', 'PJS', 'BNK', 'IUO', 'POW', 'MBL', 'XMH', 'YWN', 'FTC', 'XME', 'MUS', 'XYD', 'BVI', 'FGU', 'BCJ', 'KRH', 'XPM', 'HDV', 'SQS', 'PFE', 'SIU', 'PZL', 'APT', 'CZK', 'HHL', 'EVI', 'GOE', 'RWG', 'PZF', 'DPS', 'GXN', 'WVC', 'ZDE', 'BDQ', 'WYP', 'PLB', 'SZZ', 'HPM', 'BUL', 'VRY', 'ZNG', 'XUS', 'SLU', 'SLQ', 'UOH', 'YHR', 'FGE', 'RJY', 'CMO', 'NGZ', 'PCG', 'PFN', 'EPG', 'ILE', 'RXF', 'NLD', 'PYW', 'WTG', 'HKL', 'IGB', 'YNF', 'TAL', 'MBR', 'YEK', 'VKO', 'ZGO', 'UKH', 'GJN', 'QCD', 'OQD', 'HEU', 'GWT', 'THS', 'LAS', 'JLU', 'TNV', 'UQB', 'YDO', 'ZFI', 'XBV', 'VYI', 'GAC', 'GDU', 'DLL', 'JXX', 'GUP', 'FUF', 'KQI', 'TLC', 'DAQ', 'OMN', 'FYT', 'GIZ', 'NON', 'UGU', 'CSI', 'NEO', 'SVA', 'ZBM', 'GGU', 'PFF', 'QFB', 'JZH', 'OBB', 'VHM', 'PAJ', 'BKD', 'JEI', 'ZQG', 'GBX', 'UCR', 'TXS', 'PAK', 'HYP', 'CAI', 'WJY', 'VLH', 'QLY', 'XKI', 'SDS', 'QEF', 'KKF', 'XBQ', 'FTE', 'CEX', 'PJM', 'RTA', 'TXQ', 'BSK', 'OXU', 'ELZ', 'WII', 'THG', 'RDY', 'LFS', 'JNY', 'ORJ', 'FXD', 'OTG', 'BUG', 'EDF', 'DDM', 'HTZ', 'IAA', 'RWR', 'XBL', 'PXV', 'FVH', 'OSB', 'UQW', 'CUP', 'OIF', 'VQZ', 'KCT', 'VWJ', 'IRP', 'UAZ', 'CCF', 'MCY', 'GGP', 'HDT', 'SZT', 'JSR', 'HDR', 'MQR', 'OCP', 'XQD', 'QYT', 'NSA', 'LPC', 'MGS', 'DAZ', 'SDQ', 'BMS', 'EJL', 'ADY', 'JFP', 'YQD', 'CIP', 'CST', 'ATU', 'JTD', 'HDI', 'JMF', 'LJO', 'SEC', 'ZCN', 'EMG', 'RLJ', 'AMV', 'BVT', 'IZV', 'DND', 'VCJ', 'HNY', 'DSI', 'DWM', 'EDI', 'LQO', 'NDN', 'GGA', 'EXH', 'XFP', 'NLU', 'DNC', 'OTA', 'KQD', 'JRJ', 'JXV', 'UAK', 'TNB', 'ZXJ', 'YTU', 'MMS', 'NCV', 'VIR', 'EUI', 'KND', 'PTL', 'LKF', 'FUT', 'VUX', 'PWI', 'ETZ', 'IHN', 'GYS', 'KAQ', 'UYN', 'HOQ', 'END', 'WHD', 'NMT', 'HEW', 'OBN', 'RDZ', 'SKP', 'LHN', 'HQS', 'YTY', 'GXW', 'EKC', 'BCD', 'BRQ', 'CSX', 'OCI', 'OZP', 'TBN', 'HHG', 'VFZ', 'WJY', 'VBT', 'LNT', 'YDL', 'KOC', 'IJF', 'HSB', 'USO', 'HOK', 'MEK', 'WXT', 'DRT', 'SNE', 'WAI', 'EMP', 'IGC', 'QPJ', 'GCF', 'CJW', 'ONH', 'XQO', 'KFY', 'CZQ', 'AUC', 'BQD', 'KBH', 'GFS', 'BVT', 'QLX', 'TYO', 'WWE', 'TXE', 'MQM', 'WNC', 'WKC', 'ZLW', 'RDJ', 'WCZ', 'UOV', 'IBT', 'HOQ', 'VIA', 'DPE', 'AJX', 'AYA', 'DEM', 'YDD', 'SOU', 'KZU', 'ATH', 'BPS', 'GTM', 'ALW', 'ODR', 'DBZ', 'KYG', 'CES', 'NWC', 'QER', 'FFA', 'UZS', 'GPL', 'MTD', 'TPI', 'GMR', 'WXV', 'YYY', 'FAX', 'MNL', 'JUS', 'SVJ', 'ZNX', 'QDQ', 'FIH', 'EXR', 'XSM', 'OQX', 'GUW', 'KEG', 'DHJ', 'GXH', 'ROZ', 'TCT', 'UNU', 'XGS', 'ODG', 'GZH', 'TZV', 'LFP', 'CDF', 'LJZ', 'RLL', 'QBY', 'CEQ', 'JWH', 'GYJ', 'LSJ', 'CQV', 'HJT', 'PVB', 'DLH', 'BFI', 'RIV', 'UCG', 'KOG', 'TXS', 'JDF', 'DKD', 'FOE', 'UIO', 'GDY', 'OIG', 'FWH', 'YSY', 'HGV', 'GIS', 'CMB', 'SDT', 'ROH', 'NMU', 'YHA', 'WDJ', 'VDV', 'LDE', 'PUR', 'UNS', 'NDY', 'YCZ', 'SAQ', 'OJW', 'OIP', 'IWC', 'WPT', 'PJI', 'PMP', 'CEB', 'WRZ', 'LSI', 'QUA', 'HMA', 'VWZ', 'KWX', 'RTA', 'IXL', 'XZH', 'UOT', 'IWF', 'LXN', 'VXY', 'DMU', 'EKC', 'JRF', 'EMA', 'LNG', 'JWT', 'NLH', 'EPH', 'FFJ', 'RTR', 'XJE', 'OAW', 'HSP', 'AFE', 'EPI', 'RSV', 'OIZ', 'BEC', 'ILJ', 'UPU', 'JZC', 'HGP', 'HLT', 'GSY', 'XGP', 'NYL', 'VHY', 'CQN', 'WEE', 'GFJ', 'LGE', 'IBM', 'NCI', 'OPR', 'TIO', 'DPL', 'TFD', 'XKJ', 'DWM', 'DPV', 'RIE', 'UKK', 'OBM', 'NLJ', 'VUM', 'IRE', 'DNR', 'KVP', 'PZX', 'FBD', 'GDI', 'YAW', 'MKG', 'EAX', 'CBM', 'TCH', 'LGX', 'UCY', 'EWE', 'ZUN', 'DPM', 'BUH', 'NQJ', 'RFX', 'XUI', 'BHB', 'BMM', 'MGZ', 'PTR', 'RUM', 'FVC', 'BRO', 'ZVP', 'YMV', 'PNX', 'WRO', 'KKR', 'WCE', 'UFT', 'QWG', 'UNY', 'IZE', 'ZFX', 'KBC', 'DPS', 'QYY', 'ZNO', 'DHR', 'GWP', 'UTY', 'CSO', 'SQH', 'TBU', 'CYF', 'ROH', 'GYF', 'BWT', 'RKM', 'WLV', 'FSB', 'EWV', 'DHJ', 'RPB', 'NVJ', 'LUF', 'TTV', 'WPT', 'APQ', 'IXF', 'HAQ', 'OVS', 'JTE', 'LOQ', 'PXF', 'MAZ', 'AHV', 'TZO', 'LHO', 'ATL', 'MII', 'LTR', 'KPQ', 'ZXP', 'JPI', 'GLF', 'VKG', 'CAM', 'GVX', 'JUO', 'YWZ', 'NNQ', 'RGV', 'CDS', 'CYA', 'QPX', 'HHG', 'DDF', 'YXE', 'ZKL', 'XDJ', 'HLC', 'ORZ', 'UEX', 'FKH', 'RWT', 'RKN', 'USW', 'UBC', 'QGT', 'MGN', 'WXC', 'ENU', 'RLW', 'OFP', 'XGN', 'PSX', 'JTD', 'LFK', 'PBI', 'BWD', 'JVG', 'HFG', 'WLM', 'XNC', 'HWH', 'FGZ', 'JEK', 'HRL', 'NBL', 'THW', 'WKI', 'IME', 'UIY', 'WAA', 'XQO', 'UUD', 'IRS', 'FBF', 'JZV', 'CCR', 'YLF', 'RXP', 'UIP', 'OGN', 'IID', 'ENW', 'XPL', 'PFE', 'MEX', 'GPH', 'RBW', 'JML', 'ZVR', 'YWL', 'QPJ', 'LYY', 'NKS', 'VIJ', 'SAZ', 'LNC', 'NGU', 'RRD', 'PJK', 'FOH', 'ORW', 'YLQ', 'GFG', 'NOW', 'IDV', 'WHE', 'RTH', 'NVL', 'BAQ', 'HAK', 'SKH', 'LTZ', 'HDF', 'SIB', 'PHY', 'PWZ', 'CWY', 'JNE', 'CXW', 'EPN', 'LAO', 'WEI', 'AGK', 'XJQ', 'ILR', 'CVO', 'MEX', 'BGD', 'AEK', 'DHK', 'KAC', 'DQL', 'WDA', 'GVU', 'RUN', 'XQU', 'EXU', 'WER', 'UBS', 'XOK', 'WML', 'XQM', 'XBW', 'VTT', 'SMF', 'DRX', 'XGZ', 'KXD', 'IVV', 'OIJ', 'KAW', 'SEW', 'URD', 'QAW', 'RFL', 'ZGP', 'VVR', 'ZLA', 'LXV', 'OWU', 'YGF', 'BJO', 'OTZ', 'RSD', 'GTT', 'CEP', 'HVH', 'ZNI', 'BHV', 'IKT', 'GCF', 'XYF', 'FOL', 'NLV', 'NFL', 'TOO', 'GYY', 'POS', 'JGL', 'BUE', 'DYK', 'VVV', 'RMJ', 'LBS', 'WSL', 'FHZ', 'RWB', 'DLC', 'XPL', 'YLW', 'OYK', 'HQN', 'MRA', 'QAJ', 'MIX', 'ICY', 'WZS', 'IJG', 'VYF', 'XON', 'AZB', 'RQC', 'AYK', 'CUV', 'JST', 'BNP', 'UCF', 'DIG', 'ANC', 'XVQ', 'CEC', 'TND', 'SHS', 'YTJ', 'XFX', 'TBI', 'JRE', 'WBD', 'ZVA', 'TSG', 'DYY', 'XUB', 'JDH', 'VSO', 'NMU', 'QWP', 'SKI', 'XMG', 'RVK', 'XVO', 'OAV', 'NYW', 'NRR', 'QRY', 'EBG', 'OYJ', 'ZDN', 'LLU', 'ACT', 'MYP', 'KUK', 'TDO', 'CUB', 'QHL', 'QRO', 'FTD', 'KBL', 'YEY', 'NQD', 'OAH', 'ACU', 'EDM', 'QYP', 'OUO', 'PDK', 'VSP', 'PKW', 'JZF', 'GAL', 'COS', 'RFL', 'DIM', 'MPZ', 'IZX', 'KBU', 'LVK', 'DTP', 'PWC', 'EUQ', 'ESR', 'PIL', 'PTW', 'DNF', 'VLW', 'NBA', 'DFW', 'RDK', 'PYF', 'NIA', 'LLQ', 'WUE', 'SLJ', 'TEF', 'GNC', 'FIC', 'EQD', 'ERL', 'IKZ', 'UKG', 'TNT', 'XCP', 'NRV', 'GVU', 'XFZ', 'VEL', 'GCR', 'XAE', 'GTN', 'VRZ', 'WSY', 'RKD', 'WIA', 'ZPB', 'EWE', 'AVT', 'EZD', 'YCN', 'TJY', 'PCS', 'PXA', 'EAR', 'CIE', 'PPO', 'PFP', 'PFJ', 'SZK', 'IBH', 'LQB', 'EDI', 'ELJ', 'OJS', 'QBC', 'GTV', 'GXH', 'MFG', 'QQO', 'PIK', 'LDF', 'KIX', 'CSV', 'MAP', 'ALA', 'KZH', 'QPA', 'BCG', 'DWQ', 'MUM', 'UJT', 'ZIK', 'XPU', 'CQL', 'DZH', 'ZGR', 'UCU', 'LAT', 'NXO', 'QYM', 'PNV', 'UTV', 'SGK', 'EXJ', 'NTQ', 'LPQ', 'RVT', 'GHZ', 'FSE', 'PGQ', 'WJL', 'JQI', 'IWL', 'SWW', 'DEQ', 'VLF', 'NUD', 'ZNG', 'DCR', 'LCI', 'NZK', 'QAK', 'GHL', 'UCZ', 'ESU', 'JQG', 'NJL', 'PPD', 'QGA', 'GSW', 'YDG', 'QNJ', 'EYF', 'NNZ', 'EAG', 'RFE', 'CBE', 'ENO', 'HDT', 'WFV', 'CFE', 'MGY', 'PAE', 'WUG', 'LPU', 'HZD', 'GFM', 'JHE', 'TPQ', 'DAO', 'KBZ', 'GBA', 'NFH', 'DDS', 'HYA', 'VWS', 'ZLG', 'XKO', 'HFE', 'OJS', 'ZNK', 'OAT', 'YFE', 'NYJ', 'RDP', 'NTN', 'BEW', 'IGK', 'AYV', 'QXZ', 'NJB', 'QYE', 'GGE', 'DVI', 'UFG', 'AWY', 'JAN', 'GPW', 'GYE', 'BKS', 'REI', 'XYZ', 'VTY', 'NCD', 'EMH', 'YZE', 'LKN', 'JFF', 'IHZ', 'KUE', 'VNJ', 'SAW', 'NWS', 'HTH', 'ZXC', 'IAW', 'EPV', 'ONR', 'NFN', 'KMQ', 'CCE', 'ASU', 'SYF', 'PIQ', 'EHB', 'IWX', 'TAV', 'PJV', 'KET', 'BCR', 'UTS', 'OCI', 'PBE', 'XDJ', 'XSN', 'CUS', 'XBF', 'ZQF', 'RTW', 'CJI', 'XPI', 'KGD', 'ZNS', 'JCM', 'SRD', 'ADD', 'NJY', 'TQU', 'RNK', 'IQR', 'FYF', 'VDQ', 'IUO', 'SXI', 'DRM', 'XSX', 'FBH', 'YQE', 'BTM', 'GZJ', 'JJR', 'ONH', 'NLJ', 'XVR', 'XCP', 'VLW', 'ISS', 'FDK', 'FAS', 'HDE', 'ETY', 'KIA', 'BJX', 'ZZM', 'EIB', 'HWD', 'HDY', 'QGB', 'BQH', 'PFT', 'MBI', 'NND', 'DRP', 'IWC', 'TFF', 'PDU', 'YTB', 'WHR', 'QNY', 'IUB', 'QZK', 'NXL', 'JOB', 'FEF', 'DZC', 'DAL', 'IJK', 'HBO', 'ZRR', 'JJH', 'MXI', 'YSP', 'BRV', 'JRA', 'JQE', 'XWQ', 'GVY', 'CEN', 'NYY', 'JCW', 'BIN', 'QGA', 'SCX', 'LZV', 'SPA', 'CRQ', 'RUJ', 'PYJ', 'BCG', 'QFR', 'QED', 'RLR', 'JXV', 'NIQ', 'WHL', 'UQJ', 'EPN', 'HEF', 'IUR', 'MCH', 'THC', 'WTN', 'OCP', 'DSM', 'LXW', 'ZQJ', 'FMU', 'VNW', 'IXM', 'BYF', 'NXY', 'CJO', 'IIY', 'CGW', 'PNE', 'WFH', 'SHG', 'SBO', 'XFA', 'KLO', 'YMJ', 'INZ', 'PMK', 'RYE', 'KHB', 'YXB', 'TZK', 'LES', 'ZZN', 'FXH', 'EMP', 'PDI', 'JIS', 'GQW', 'SMX', 'UCU', 'IFF', 'VZI', 'DPN', 'LIK', 'CJO', 'DOC', 'BJP', 'NUB', 'GPH', 'GRQ', 'SOU', 'TZH', 'WUN', 'PDC', 'EWB', 'YMX', 'OEF', 'MEB', 'QBU', 'JUQ', 'HEQ', 'UJF', 'QDF', 'MMK', 'ZVU', 'JRP', 'JOS', 'TCC', 'TIO', 'RPM', 'GVB', 'GOH', 'CUV', 'DUW', 'EAK', 'CII', 'PGT', 'CHN', 'HMM', 'RLO', 'ARC', 'EFW', 'HVX', 'HJV', 'OHY', 'GPG', 'MQO', 'GBU', 'YPD', 'FNW', 'MDP', 'KXQ', 'PSB', 'NVZ', 'BYC', 'IUC', 'URT', 'BVP', 'VZP', 'UTL', 'BXW', 'FKT', 'PGM', 'DGD', 'AIV', 'TMY', 'RUN', 'QYG', 'GXF', 'VPF', 'UNY', 'MOZ', 'INN', 'VEV', 'PWC', 'AWY', 'MKI', 'TXG', 'BQU', 'QAU', 'ILO', 'IBH', 'PCO', 'RDH', 'UNP', 'LLB', 'DER', 'YRP', 'MWZ', 'NIH', 'MCS', 'ZCL', 'IOI', 'UPU', 'MNS', 'JDR', 'OWF', 'XTA', 'OAZ', 'WCV', 'FFI', 'NLI', 'BFD', 'LDD', 'FZR', 'HNP', 'IRL', 'WEA', 'PDE', 'IEN', 'GGR', 'YUP', 'VWA', 'WEM', 'QPZ', 'ZBA', 'GLU', 'CUH', 'VDK', 'KLF', 'OLF', 'PMD', 'FLZ', 'JQV', 'SGP', 'JZZ', 'HIO', 'LFV', 'PTG', 'FEL', 'WNX', 'LDU', 'EXI', 'JMT', 'RID', 'TXZ', 'PGC', 'GLC', 'JLI', 'CLT', 'VDK', 'FBI', 'WSW', 'ELJ', 'YJY', 'YXU', 'XWC', 'MII', 'YXM', 'HCJ', 'JVC', 'RPF', 'NXE', 'UFO', 'BYH', 'EFA', 'EGO', 'XVS', 'VWG', 'LOY', 'LCG', 'TRQ', 'IKL', 'OQA', 'HTU', 'XNU', 'AZS', 'BOR', 'XWR', 'UQN', 'YFH', 'TDS', 'RLP', 'PHC', 'AYP', 'BVL', 'CQI', 'HSC', 'JRS', 'YZU', 'YFY', 'WEI', 'ITW', 'MYU', 'ORF', 'OTD', 'CAO', 'UJN', 'UFW', 'UUP', 'IQG', 'SEG', 'BAQ', 'KJD', 'DNG', 'BZL', 'DVT', 'KJY', 'XLW', 'TMH', 'DCX', 'MVJ', 'JFU', 'VCL', 'FQX', 'WRS', 'OXS', 'QGT', 'UPJ', 'QTI', 'AOU', 'CHR', 'AMC', 'VCN', 'OUC', 'JDK', 'CNL', 'HVI', 'WTS', 'VPC', 'THK', 'SVV', 'IGZ', 'ZPC', 'OBU', 'EQP', 'UMD', 'BQX', 'CKN', 'FOW', 'RGD', 'LNP', 'YEG', 'GVT', 'BSV', 'KKI', 'JEZ', 'GQH', 'DHB', 'TFV', 'TFS', 'WVS', 'ZFS', 'ZPG', 'PLN', 'OBM', 'BRE', 'HXC', 'JBF', 'GKA', 'RKS', 'PUS', 'XGS', 'QYD', 'IOK', 'DZR', 'IRX', 'NIJ', 'EAJ', 'SCY', 'KXB', 'VII', 'ETT', 'UPQ', 'JPW', 'ZTS', 'CZC', 'DFE', 'JLR', 'ZAC', 'XTQ', 'JZY', 'MUW', 'EXR', 'OQC', 'QLF', 'VAL', 'CBQ', 'SQO', 'HXA', 'SCI', 'ZAM', 'EDK', 'HVB', 'LSH', 'EOR', 'KZF', 'TLA', 'JIK', 'ULN', 'CJY', 'YKP', 'RQQ', 'XQJ', 'EFK', 'WEA', 'VHL', 'ANA', 'VYI', 'GTV', 'FRN', 'BXI', 'QYM', 'WUJ', 'FHW', 'RAH', 'RCK', 'RXY', 'KXC', 'IFA', 'OCZ', 'PTB', 'IHO', 'SDL', 'YEP', 'RFX', 'ZUR', 'FKV', 'WFA', 'VAF', 'ZHK', 'KZO', 'AAN', 'IME', 'MIF', 'VCG', 'BYQ', 'QOY', 'LSG', 'IRT', 'PUI', 'UAB', 'MPY', 'CKS', 'PZL', 'EUW', 'JIO', 'WXL', 'JEV', 'SBT', 'WUQ', 'GBH', 'QEG', 'ZCJ', 'OKQ', 'AAX', 'LJN', 'OYH', 'EIJ', 'ZNK', 'JIA', 'TDN', 'DPU', 'BTR', 'SEP', 'VKZ', 'HEX', 'WFB', 'DKR', 'FQH', 'CTQ', 'NPX', 'DHG', 'ZSN', 'ZYF', 'MLP', 'IUH', 'ZIX', 'UYI', 'SRK', 'GEG', 'SCW', 'TED', 'XOP', 'PML', 'RNK', 'KTA', 'KJJ', 'UXS', 'MRX', 'FJH', 'NRA', 'ZJJ', 'WGU', 'NPD', 'GPA', 'UBR', 'GXI', 'YQP', 'SEI', 'MOZ', 'UIR', 'SIH', 'EAP', 'IXV', 'EKD', 'YVX', 'PPZ', 'MBK', 'NTQ', 'BSZ', 'BVD', 'LMV', 'MDB', 'BOK', 'XLL', 'QJJ', 'CTH', 'BLQ', 'ZOR', 'RVD', 'MNW', 'OCC', 'FCN', 'MAK', 'OMZ', 'PLJ', 'QMP', 'PTZ', 'AXB', 'YJG', 'JZX', 'HUH', 'FOL', 'BUV', 'BEI', 'ZYN', 'JHS', 'JND', 'TIB', 'JMM', 'UTZ', 'GEZ', 'LTQ', 'IBJ', 'WOY', 'IGT', 'ZUV', 'MWP', 'GSJ', 'FET', 'LXM', 'ZBE', 'VTI', 'WLW', 'PYT', 'DJQ', 'NFU', 'BKX', 'MDD', 'YPX', 'SBG', 'TKI', 'QRU', 'IKG', 'SRQ', 'AOB', 'KHN', 'IZN', 'NQU', 'NQC', 'HVS', 'JCP', 'HUL', 'MXN', 'DOW', 'HXR', 'GZT', 'GNL', 'INF', 'AOU', 'RXX', 'UEP', 'OXY', 'VWA', 'GLH', 'WPM', 'NVR', 'HIP', 'RIM', 'JJJ', 'JDN', 'RBB', 'BDI', 'XVJ', 'ERO', 'RXJ', 'ZMA', 'TVU', 'HPE', 'VAU', 'GVU', 'ZGK', 'KCK', 'DHB', 'RNZ', 'HDO', 'CZF', 'UTI', 'SAQ', 'SWA', 'VXK', 'FEH', 'RFJ', 'ZKQ', 'DOJ', 'DKK', 'SDL', 'FSX', 'ZJF', 'KTA', 'NLG', 'PHJ', 'WOH', 'AXU', 'HSI', 'SZW', NULL) AS x FROM x ORDER BY x;
PRAGMA x;
SELECT LEAST(1);
SELECT LEAST('hello world');
SELECT LEAST(1, 3);
SELECT LEAST(1, 3, 0);
SELECT LEAST(1, 3, 0, 2, 7, 8, 10, 11, -100, 30);
SELECT LEAST(1, 3, 0, 2, 7, 8, 10, 11, -100, 30, NULL);
SELECT LEAST(NULL, 3, 0, 2, 7, 8, 10, 11, -100, 30, 1);
SELECT GREATEST(NULL, CAST(1.0 AS REAL));
SELECT LEAST(1.0, 10.0);
SELECT LEAST('hello', 'world');
SELECT LEAST('hello', 'world', 'blabla', 'tree');
SELECT LEAST('hello', 'world', 'blabla', 'tree');
SELECT LEAST(CAST('1992-01-01' AS DATE), CAST('1994-02-02' AS DATE), CAST('1991-01-01' AS DATE));
SELECT LEAST(CAST('1992-01-01' AS DATE), CAST('1994-02-02' AS DATE), CAST('1991-01-01' AS DATE), NULL);
SELECT LEAST(CAST('1992-01-01' AS DATE), CAST('1994-02-02' AS DATE), CAST('1991-01-01' AS DATE), CAST('infinity' AS DATE), CAST('-infinity' AS DATE));
SELECT GREATEST(CAST('1992-01-01' AS DATE), CAST('1994-02-02' AS DATE), CAST('1991-01-01' AS DATE), CAST('infinity' AS DATE), CAST('-infinity' AS DATE));
SELECT LEAST(CAST('1992-01-01 13:45:21.890123' AS TIMESTAMP), CAST('1994-02-02 05:43:21' AS TIMESTAMP), CAST('1991-01-01 01:23:45' AS TIMESTAMP));
SELECT LEAST(CAST('1992-01-01 13:45:21.890123' AS TIMESTAMP), CAST('1994-02-02 05:43:21' AS TIMESTAMP), CAST('1991-01-01 01:23:45' AS TIMESTAMP), NULL);
SELECT LEAST(CAST('1992-01-01 13:45:21.890123' AS TIMESTAMP), CAST('1994-02-02 05:43:21' AS TIMESTAMP), CAST('1991-01-01 01:23:45' AS TIMESTAMP), CAST('infinity' AS TIMESTAMP), CAST('-infinity' AS TIMESTAMP));
SELECT GREATEST(CAST('1992-01-01 13:45:21.890123' AS TIMESTAMP), CAST('1994-02-02 05:43:21' AS TIMESTAMP), CAST('1991-01-01 01:23:45' AS TIMESTAMP), CAST('infinity' AS TIMESTAMP), CAST('-infinity' AS TIMESTAMP));
SELECT LEAST(CAST('1992-01-01' AS DATE), 'hello', 123);
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, NULL), (2, 1), (3, 7);
SELECT LEAST(x, x), GREATEST(x, x) FROM x ORDER BY x;
SELECT LEAST(x, x + 1, x), GREATEST(x, x - 1, x) FROM x ORDER BY x;
SELECT LEAST(x, 800, x + 1, 1000, x), GREATEST(x, -1000, x - 1, -700, x, -800) FROM x ORDER BY x;
SELECT LEAST(x, 800, x + 1, 1000, x, NULL), GREATEST(x, -1000, x - 1, -700, x, -800) FROM x ORDER BY x;
SELECT LEAST(x, x), GREATEST(x, x) FROM x WHERE NOT x IS NULL ORDER BY x;
SELECT LEAST(x + 10, x, x), GREATEST(x, x + 4, x) FROM x WHERE NOT x IS NULL ORDER BY x;
SELECT LEAST(REPEAT(CAST(x AS TEXT), 20), CAST(x AS TEXT)) FROM x;
SELECT GREATEST(CAST(52392441565678.308 AS DECIMAL(17, 3)), CAST(52392441565678.308 AS DECIMAL(17, 3)));
PRAGMA x;
SELECT NULLIF(NULLIF('hello', 'world'), 'blabla');
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('hello'), ('world'), ('test');
CREATE TABLE x (x TEXT, x TEXT);
INSERT INTO x VALUES ('blabla', 'b'), ('blabla2', 'c'), ('blabla3', 'd');
SELECT NULLIF(NULLIF((SELECT x FROM x LIMIT 1 OFFSET 1), x), x) FROM x;
DROP TABLE x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (11, 22), (13, 22), (12, 21);
SELECT NULLIF(CAST(x AS TEXT), '11') FROM x;
SELECT x, CASE WHEN x > 11 THEN CAST(x AS TEXT) ELSE CAST(x AS TEXT) END FROM x ORDER BY 1;
PRAGMA x;
SELECT CURRENT_SETTING('a');
SELECT CURRENT_SETTING('memori_limit');
SELECT CURRENT_SETTING('default_null_order');
SET x = 'nulls_last';
SET x = CONCAT('nulls', '_', 'last');
SELECT CURRENT_SETTING('default_null_order');
SELECT CURRENT_SETTING('DEFAULT_NULL_ORDER');
SELECT * FROM x UNION ALL SELECT NULL ORDER BY 1;
SELECT CURRENT_SETTING(CAST(x AS TEXT)) FROM x AS x;
SELECT CURRENT_SETTING(NULL);
SELECT CURRENT_SETTING(CAST(NULL AS TEXT));
SELECT CURRENT_SETTING('');
SET x = x || '_last';
SET x = (SELECT 'nulls_last');
SELECT 1 = 1;
SELECT STATS(5);
SELECT STATS(7);
SELECT STATS('hello');
SELECT STATS('1234567ü');
SELECT STATS(5 + 2);
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3);
SELECT STATS(x) FROM x LIMIT 1;
SELECT STATS(x + 2) FROM x LIMIT 1;
SELECT STATS(x - 5) FROM x LIMIT 1;
SELECT STATS(x * 2) FROM x LIMIT 1;
SELECT STATS(x * -1) FROM x LIMIT 1;
PRAGMA x;
SELECT STATS(x + 1) FROM x LIMIT 1;
PRAGMA x;
SELECT STATS(x * -1) FROM x LIMIT 1;
PRAGMA x;
CREATE TABLE x (x DOUBLE, x DOUBLE);
INSERT INTO x VALUES (1, 10), (42, 420);
SELECT * FROM x;
PRAGMA x = 4;
PRAGMA x;
SELECT * FROM x;
PRAGMA x;
CREATE TABLE x (x INTERVAL, x TEXT);
INSERT INTO x VALUES ('2 years', 'year'), ('16 months', 'quarter'), ('42 days', 'day'), ('2066343400 microseconds', 'minute');
SELECT DATE_PART(CAST(NULL AS TEXT), CAST(NULL AS INTERVAL)) FROM x;
SELECT DATE_PART(x, CAST(NULL AS INTERVAL)) FROM x;
SELECT DATE_PART(NULL, x) FROM x;
SELECT DATE_PART(x, INTERVAL '4 years 5 months 18 days 128 seconds') FROM x;
SELECT DATE_PART('seconds', x) FROM x;
SELECT DATE_PART('epoch', x) FROM x;
SELECT DATE_PART(x, x) FROM x;
SELECT DAYOFWEEK(x) FROM x;
SELECT ISODOW(x) FROM x;
SELECT DAYOFYEAR(x) FROM x;
SELECT WEEK(x) FROM x;
SELECT ERA(x) FROM x;
SELECT JULIAN(x) FROM x;
SELECT EXTRACT(ERA FROM x) FROM x;
SELECT EXTRACT(JULIAN FROM x) FROM x;
SELECT DATE_PART('era', x) FROM x;
SELECT DATE_PART('julian', x) FROM x;
SELECT DATE_PART('offset', x) FROM x;
SELECT DATE_PART('offset', x) FROM x;
SELECT x, DATE_PART('${partcode}', x) AS x, DATE_PART(['${partcode}'], x) AS x FROM x WHERE x <> x['${partcode}'];
SELECT x, DATE_PART(['year', 'month', 'day'], x) AS x FROM x ORDER BY 1;
SELECT x, DATE_PART(['millennium', 'century', 'decade', 'quarter'], x) AS x FROM x ORDER BY 1;
SELECT x, DATE_PART(['hour', 'minute', 'second', 'epoch'], x) AS x FROM x ORDER BY 1;
SELECT x, EPOCH_NS(x) AS x FROM x ORDER BY 1;
SELECT x, EPOCH_US(x) AS x FROM x ORDER BY 1;
SELECT x, EPOCH_MS(x) AS x FROM x ORDER BY 1;
SELECT x, NANOSECOND(x) AS x FROM x ORDER BY 1;
SELECT x, DATE_PART(['${datepart}'], x) AS x FROM x ORDER BY 1;
PRAGMA x;
CREATE TABLE x (x INTERVAL);
INSERT INTO x VALUES ('2 years'), ('16 months'), ('42 days'), ('2066343400 microseconds'), (NULL);
SELECT EXTRACT(YEAR FROM x) FROM x;
SELECT EXTRACT(MONTH FROM x) FROM x;
SELECT EXTRACT(DAY FROM x) FROM x;
SELECT EXTRACT(DECADE FROM x) FROM x;
SELECT EXTRACT(CENTURY FROM x) FROM x;
SELECT EXTRACT(MILLENNIUM FROM x) FROM x;
SELECT EXTRACT(QUARTER FROM x) FROM x;
SELECT EXTRACT(DAYOFWEEK FROM x) FROM x;
SELECT EXTRACT(ISODOW FROM x) FROM x;
SELECT EXTRACT(DAYOFYEAR FROM x) FROM x;
SELECT EXTRACT(WEEK FROM x) FROM x;
SELECT EXTRACT(YEARWEEK FROM x) FROM x;
SELECT EXTRACT(EPOCH FROM x) FROM x;
SELECT EXTRACT(MICROSECOND FROM x) FROM x;
SELECT EXTRACT(MILLISECOND FROM x) FROM x;
SELECT EXTRACT(SECOND FROM x) FROM x;
SELECT EXTRACT(MINUTE FROM x) FROM x;
SELECT EXTRACT(HOUR FROM x) FROM x;
SELECT EXTRACT(YEAR FROM INTERVAL '14' MONTHS);
SELECT EXTRACT(MONTH FROM INTERVAL '14' MONTHS);
SELECT EXTRACT(DAY FROM INTERVAL '157' DAYS);
SELECT EXTRACT(DECADE FROM INTERVAL '140' MONTHS);
SELECT EXTRACT(CENTURY FROM INTERVAL '1400' MONTHS);
SELECT EXTRACT(MILLENNIUM FROM INTERVAL '14000' MONTHS);
SELECT EXTRACT(QUARTER FROM INTERVAL '14' MONTHS);
SELECT EXTRACT(QUARTER FROM INTERVAL '21' MONTHS);
SELECT EXTRACT(EPOCH FROM INTERVAL '6' MONTHS);
SELECT EXTRACT(DOY FROM INTERVAL '6' MONTHS);
SELECT EXTRACT(DOW FROM INTERVAL '6' MONTHS);
PRAGMA x;
CREATE TABLE x (x INTERVAL);
INSERT INTO x VALUES ('41 months 12 days 360:00'), ('-41 months -12 days 360:00'), ('-12 days'), ('9 months -27 days 12:34:56'), ('-3 years 482 days 76:54:32.189'), ('4 months'), ('14 months'), ('999 months 999 days');
SELECT x * 0.3 AS x FROM x;
SELECT x * 8.2 AS x FROM x;
SELECT x / 10 AS x FROM x;
SELECT x / 100 AS x FROM x;
PRAGMA x;
CREATE TABLE x (x INTERVAL, x TEXT);
INSERT INTO x VALUES ('1247 years 4 months', 'millennium'), ('-1448 years -5 months', 'millennium'), ('548 years 7 months', 'century'), ('-118 years -3 months', 'century'), ('45 years 1 months', 'decade'), ('-97 years -11 months', 'decade'), ('5 years 6 months', 'year'), ('-4 years -8 months', 'year'), ('2 years 2 months', 'quarter'), ('-3 years -10 months', 'quarter'), ('3 years 4 months 5 days', 'month'), ('-7 years -3 months 29 days', 'month'), ('4 months 22 days', 'week'), ('-3 months -3 days', 'week'), ('5 months 7 days 12:34:56.789012', 'day'), ('-3 months -3 days 12:34:56.789012', 'day'), ('1 month 11 days 12:34:56.789012', 'hour'), ('-1 month -2 days 12:34:56.789012', 'hour'), ('1 month 16 days 12:34:56.789012', 'minute'), ('-1 month -9 days 12:34:56.789012', 'minute'), ('1 month 24 days 12:34:56.789012', 'second'), ('-1 month -17 days 12:34:56.789012', 'second'), ('1 month 29 days 12:34:56.789012', 'milliseconds'), ('-1 month -26 days 12:34:56.789012', 'milliseconds'), ('1 month 7 days 12:34:56.789012', 'microseconds'), ('-1 month -29 days 12:34:56.789012', 'microseconds'), (NULL, NULL);
SELECT x FROM x;
SELECT DATE_TRUNC('MILLENNIUM', x) FROM x;
SELECT DATE_TRUNC('CENTURY', x) FROM x;
SELECT DATE_TRUNC('DECADE', x) FROM x;
SELECT DATE_TRUNC('${DATEPART}', x) FROM x;
SELECT DATE_TRUNC('${DATEPART}', x) FROM x;
SELECT DATE_TRUNC('${DATEPART}', x) FROM x;
SELECT DATE_TRUNC('HOUR', x) FROM x;
SELECT DATE_TRUNC('MINUTE', x) FROM x;
SELECT DATE_TRUNC('${DATEPART}', x) FROM x;
SELECT DATE_TRUNC('MILLISECOND', x) FROM x;
SELECT DATE_TRUNC('MICROSECOND', x) FROM x;
SELECT DATE_TRUNC('SECOND', x) FROM x;
SELECT DATE_TRUNC('NULL', x) FROM x;
PRAGMA x;
SELECT LENGTH([1, 2, 3]);
SELECT LENGTH([]);
SELECT LENGTH(NULL);
SELECT ARRAY_LENGTH([1, 2, 3], 1);
SELECT ARRAY_LENGTH([1, 2, 3], 2);
SELECT ARRAY_LENGTH([1, 2, 3], 0);
SELECT LENGTH([1]) FROM x;
CREATE TABLE x AS SELECT * FROM (VALUES ([1, 2]), ([NULL]), (NULL), ([]), ([3, 4, 5, 6, 7])) AS x;
SELECT LENGTH(x) FROM x;
PRAGMA x;
SELECT ARRAY_TO_STRING([1, 2, 3], '');
SELECT ARRAY_TO_STRING([1, 2, 3], '-');
SELECT ARRAY_TO_STRING(NULL, '-');
SELECT ARRAY_TO_STRING([1, 2, 3], NULL);
SELECT ARRAY_TO_STRING([], '-');
SELECT ARRAY_TO_STRING([x, x + 1], '-') FROM x AS x WHERE x <= 2 OR x > 4;
SELECT ARRAY_TO_STRING([1, 2, 3], x) FROM x AS x;
PRAGMA x;
SELECT ARRAY_TO_STRING_COMMA_DEFAULT([1, 2, 3]);
SELECT ARRAY_TO_STRING_COMMA_DEFAULT([1, 2, 3], x := ',');
SELECT ARRAY_TO_STRING_COMMA_DEFAULT([1, 2, 3], x := '');
SELECT ARRAY_TO_STRING_COMMA_DEFAULT([1, 2, 3], x := '-');
SELECT ARRAY_TO_STRING_COMMA_DEFAULT(NULL, x := '-');
SELECT ARRAY_TO_STRING_COMMA_DEFAULT([1, 2, 3], x := NULL);
SELECT ARRAY_TO_STRING_COMMA_DEFAULT([], x := '-');
SELECT ARRAY_TO_STRING_COMMA_DEFAULT([x, x + 1], x := '-') FROM x AS x WHERE x <= 2 OR x > 4;
SELECT ARRAY_TO_STRING_COMMA_DEFAULT([1, 2, 3], x := x) FROM x AS x;
PRAGMA x;
SELECT FLATTEN([[1, 2, 3, 4]]);
SELECT FLATTEN([[1, 2], [3, 4]]);
SELECT FLATTEN(1);
SELECT FLATTEN([[], []]);
SELECT FLATTEN([[1, 2], [], [3, 4]]);
SELECT FLATTEN([[1, 2], []]);
SELECT FLATTEN([[], [1, 2]]);
SELECT FLATTEN(NULL);
SELECT FLATTEN([NULL]);
SELECT FLATTEN([[NULL]]);
SELECT FLATTEN([NULL, [1], [2, 3], NULL, [4, NULL], [NULL, NULL]]);
SELECT FLATTEN([[[1, 2], [3, 4]], [[5, 6], [7, 8]]]);
SELECT FLATTEN(FLATTEN(FLATTEN([[[[1], [2]], [[3], [4]]], [[[5], [6]], [[7], [8]]]])));
SELECT FLATTEN([[[1, 2], [3, 4]], [], [[5, 6], [7, 8]]]);
SELECT FLATTEN([[[1, 2], [3, 4]], [[]], [[5, 6], [7, 8]]]);
SELECT FLATTEN([[[]], [[]]]);
SELECT FLATTEN(FLATTEN([[[]], [[]]]));
CREATE TABLE x AS SELECT x % 8 AS x, x AS x FROM x;
CREATE TABLE x AS SELECT x % 4 AS x, LIST(x ORDER BY x) AS x FROM x GROUP BY x;
CREATE TABLE x AS SELECT x, ARRAY_SORT(LIST(x ORDER BY x)) AS x FROM x GROUP BY x ORDER BY x;
SELECT * FROM x;
SELECT x, FLATTEN(x) FROM x;
SELECT x, FLATTEN(x) FROM x WHERE x % 2 <> 0;
SELECT x, FLATTEN([[1, 2], [3, 4]]) FROM x;
SELECT FLATTEN(42);
SELECT FLATTEN([1, 2]);
SELECT FLATTEN(NULL);
WITH x AS (SELECT * FROM (VALUES ('a', [1, 2, 3]), ('b', [4, 5]), ('a', [2, 6]))), x AS (SELECT x.*, ARRAY_AGG(x.x) OVER (PARTITION BY x.x ORDER BY x.x) FROM x AS x) SELECT x.*, FLATTEN(x.x) FROM x AS x;
PRAGMA x;
SELECT RANGE(0, 3);
SELECT GENERATE_SERIES(0, 3);
SELECT RANGE(0, 3) FROM x;
SELECT RANGE(0, x) FROM x AS x;
SELECT RANGE(0, NULL) FROM x AS x;
SELECT RANGE(0, CASE WHEN x % 2 = 0 THEN NULL ELSE x END) FROM x AS x;
SELECT RANGE(0, 0);
SELECT RANGE(0, -1);
SELECT RANGE(0, NULL);
SELECT RANGE(1, 3);
SELECT GENERATE_SERIES(1, 3);
SELECT RANGE(1, 1);
SELECT RANGE(-10, -5);
SELECT GENERATE_SERIES(1, 1);
SELECT RANGE(3, 1);
SELECT RANGE(NULL, 1);
SELECT RANGE(1, NULL);
SELECT RANGE(NULL, NULL);
SELECT RANGE(x, 5) FROM x AS x;
SELECT RANGE(0, x) FROM x AS x;
SELECT RANGE(1, 6, 2);
SELECT GENERATE_SERIES(1, 6, 2);
SELECT GENERATE_SERIES(1, 7, 2);
SELECT RANGE(1, 10, 100);
SELECT RANGE(1, 10, 0);
SELECT RANGE(3, 1, -1);
SELECT GENERATE_SERIES(3, 1, -1);
SELECT RANGE(3, 1, 1);
SELECT RANGE(1, 3, -1);
SELECT RANGE(4, 1, -1);
SELECT RANGE(50, 1, -20);
SELECT GENERATE_SERIES(50, 1, -20);
SELECT GENERATE_SERIES(50, -10, -20);
SELECT RANGE(NULL, 1, 1);
SELECT RANGE(1, NULL, 1);
SELECT RANGE(1, 1, NULL);
SELECT RANGE(NULL, NULL, NULL);
PRAGMA x;
SELECT GENERATE_SERIES(CAST('2020-01-01' AS TIMESTAMP), CAST('2020-07-01' AS TIMESTAMP), INTERVAL '3' MONTH);
SELECT RANGE(CAST('2020-01-01' AS TIMESTAMP), CAST('2020-07-01' AS TIMESTAMP), INTERVAL '3' MONTH);
SELECT GENERATE_SERIES(CAST('2020-06-01' AS TIMESTAMP), CAST('2020-01-01' AS TIMESTAMP), -INTERVAL '3' MONTH);
SELECT GENERATE_SERIES(CAST('2020-01-01' AS TIMESTAMP), CAST('2020-01-01' AS TIMESTAMP), INTERVAL '1' DAY);
SELECT RANGE(CAST('2020-01-01' AS TIMESTAMP), CAST('2020-01-01' AS TIMESTAMP), INTERVAL '1' DAY);
SELECT GENERATE_SERIES(CAST('2020-06-01' AS TIMESTAMP), CAST('2020-01-01' AS TIMESTAMP), INTERVAL '3' MONTH);
SELECT GENERATE_SERIES(CAST('2020-01-01' AS TIMESTAMP), CAST('2020-06-01' AS TIMESTAMP), -INTERVAL '3' MONTH);
SELECT GENERATE_SERIES(NULL, CAST('2020-06-01' AS TIMESTAMP), -INTERVAL '3' MONTH);
SELECT GENERATE_SERIES(CAST('2020-01-01' AS TIMESTAMP), NULL, -INTERVAL '3' MONTH);
SELECT GENERATE_SERIES(CAST('2020-01-01' AS TIMESTAMP), CAST('2020-06-01' AS TIMESTAMP), NULL);
SELECT GENERATE_SERIES(CAST('2020-01-01' AS TIMESTAMP), CAST('2020-06-01' AS TIMESTAMP), INTERVAL '3' MONTH - INTERVAL '3' DAY);
SELECT GENERATE_SERIES(CAST('294247-01-10' AS TIMESTAMP), CAST('infinity' AS TIMESTAMP), INTERVAL '1' DAY);
SELECT RANGE(CAST('294247-01-10' AS TIMESTAMP), CAST('infinity' AS TIMESTAMP), INTERVAL '1' DAY);
SELECT GENERATE_SERIES(CAST('-infinity' AS TIMESTAMP), CAST('290309-12-22 (BC) 00:00:00' AS TIMESTAMP), INTERVAL '1' DAY);
SELECT RANGE(CAST('-infinity' AS TIMESTAMP), CAST('290309-12-22 (BC) 00:00:00' AS TIMESTAMP), INTERVAL '1' DAY);
PRAGMA x;
SELECT COUNT(*) FROM (SELECT UNNEST(GENERATE_SERIES(CAST('2000-01-01' AS TIMESTAMP), CAST('2020-06-01' AS TIMESTAMP), INTERVAL '1' DAY)));
PRAGMA x;
SELECT GENERATE_SUBSCRIPTS([4, 5, 6], 1);
SELECT GENERATE_SUBSCRIPTS([], 1);
SELECT GENERATE_SUBSCRIPTS(NULL, 1);
SELECT GENERATE_SUBSCRIPTS([[1, 2], [3, 4], [5, 6]], 2);
SET x = 'gregorian';
SET x = 'America/Los_Angeles';
SELECT GENERATE_SERIES(CAST('2020-01-01' AS TIMESTAMPTZ), CAST('2020-07-01' AS TIMESTAMPTZ), INTERVAL '3' MONTH);
SELECT RANGE(CAST('2020-01-01' AS TIMESTAMPTZ), CAST('2020-07-01' AS TIMESTAMPTZ), INTERVAL '3' MONTH);
SELECT GENERATE_SERIES(CAST('2020-06-01' AS TIMESTAMPTZ), CAST('2020-01-01' AS TIMESTAMPTZ), -INTERVAL '3' MONTH);
SELECT GENERATE_SERIES(CAST('2020-01-01' AS TIMESTAMPTZ), CAST('2020-01-01' AS TIMESTAMPTZ), INTERVAL '1' DAY);
SELECT RANGE(CAST('2020-01-01' AS TIMESTAMPTZ), CAST('2020-01-01' AS TIMESTAMPTZ), INTERVAL '1' DAY);
SELECT GENERATE_SERIES(CAST('2020-06-01' AS TIMESTAMPTZ), CAST('2020-01-01' AS TIMESTAMPTZ), INTERVAL '3' MONTH);
SELECT GENERATE_SERIES(CAST('2020-01-01' AS TIMESTAMPTZ), CAST('2020-06-01' AS TIMESTAMPTZ), -INTERVAL '3' MONTH);
SELECT GENERATE_SERIES(NULL, CAST('2020-06-01' AS TIMESTAMP), -INTERVAL '3' MONTH);
SELECT GENERATE_SERIES(CAST('2020-01-01' AS TIMESTAMP), NULL, -INTERVAL '3' MONTH);
SELECT GENERATE_SERIES(CAST('2020-01-01' AS TIMESTAMP), CAST('2020-06-01' AS TIMESTAMP), NULL);
SELECT COUNT(*) FROM (SELECT UNNEST(GENERATE_SERIES(CAST('2000-01-01' AS TIMESTAMPTZ), CAST('2020-06-01' AS TIMESTAMPTZ), INTERVAL '1' DAY)));
SELECT GENERATE_SERIES(x, x, x) FROM (VALUES (CAST('2020-01-01' AS TIMESTAMPTZ), CAST('2020-07-01' AS TIMESTAMPTZ), INTERVAL '3' MONTH), (CAST('2020-12-04' AS TIMESTAMPTZ), CAST('2020-09-01' AS TIMESTAMPTZ), INTERVAL '-1 month -1 day'), (CAST('2020-03-08' AS TIMESTAMPTZ), CAST('2020-03-09' AS TIMESTAMPTZ), INTERVAL '6' HOUR), (CAST('2020-11-02' AS TIMESTAMPTZ), CAST('2020-11-01' AS TIMESTAMPTZ), INTERVAL '-43200' SECOND)) AS x;
SELECT RANGE(x, x, x) FROM (VALUES (CAST('2020-01-01' AS TIMESTAMPTZ), CAST('2020-07-01' AS TIMESTAMPTZ), INTERVAL '3' MONTH), (CAST('2020-12-04' AS TIMESTAMPTZ), CAST('2020-09-01' AS TIMESTAMPTZ), INTERVAL '-1 month -1 day'), (CAST('2020-03-08' AS TIMESTAMPTZ), CAST('2020-03-09' AS TIMESTAMPTZ), INTERVAL '6' HOUR), (CAST('2020-11-02' AS TIMESTAMPTZ), CAST('2020-11-01' AS TIMESTAMPTZ), INTERVAL '-43200' SECOND)) AS x;
SELECT GENERATE_SERIES(CAST('2020-01-01' AS TIMESTAMPTZ), CAST('2020-06-01' AS TIMESTAMPTZ), INTERVAL '3' MONTH - INTERVAL '3' DAY);
SELECT GENERATE_SERIES(CAST('294247-01-10' AS TIMESTAMPTZ), CAST('infinity' AS TIMESTAMPTZ), INTERVAL '1' DAY);
SELECT RANGE(CAST('294247-01-10' AS TIMESTAMPTZ), CAST('infinity' AS TIMESTAMPTZ), INTERVAL '1' DAY);
SELECT GENERATE_SERIES(CAST('-infinity' AS TIMESTAMPTZ), CAST('290309-12-22 (BC) 00:00:00' AS TIMESTAMPTZ), INTERVAL '1' DAY);
SELECT RANGE(CAST('-infinity' AS TIMESTAMPTZ), CAST('290309-12-22 (BC) 00:00:00' AS TIMESTAMPTZ), INTERVAL '1' DAY);
SELECT QUANTILE(NULL, LIST_FILTER(NULL, (x -> 'babea54a-2261-4b0c-b14b-1d0e9b794e1a')));
PRAGMA x;
SELECT LIST_CONCAT([1, 2], [3, 4]);
SELECT ARRAY_CONCAT([1, 2], [3, 4]);
SELECT LIST_CONCAT(NULL, [3, 4]);
SELECT LIST_CONCAT([1, 2], NULL);
SELECT LIST_CONCAT([], []);
SELECT LIST_CONCAT([], [3, 4]);
SELECT LIST_CONCAT([1, 2], []);
SELECT LIST_CONCAT([1, 2], [3, 4], [5, 6]);
SELECT LIST_CONCAT([1, 2], [3, 4], []);
SELECT LIST_CONCAT([1, 2], [], [5, 6]);
SELECT LIST_CONCAT([], [3, 4], [5, 6]);
SELECT LIST_CONCAT([], [], [5, 6]);
SELECT LIST_CONCAT([1, 2], [3, 4], [5, 6], [7, 8]);
SELECT LIST_CONCAT([1, 2], 3);
SELECT [1, 2] || [3, 4];
SELECT [1, 2] + [3, 4];
SELECT [1, 2] + [3, 4];
SELECT LIST_CONCAT(CAST([1.000000, 2.000000] AS REAL[]), CAST([3.000000, 4.000000] AS DOUBLE[]));
SELECT LIST_CONCAT(CAST([1.000000, 2.000000] AS DOUBLE[]), CAST([3.000000, 4.000000] AS REAL[]));
SELECT LIST_CONCAT([NULL], [NULL]);
SELECT LIST_CONCAT([1, 2], [NULL]);
SELECT LIST_CONCAT([NULL], [3, 4]);
SELECT LIST_CONCAT([1, 2], [3, 4], [NULL]);
SELECT LIST_CONCAT([1, 2], [3, 4], NULL);
SELECT LIST_CONCAT(NULL, [3, 4], [5, 6]);
SELECT LIST_CONCAT([[1, 2]], [[3, 4]]);
SELECT LIST_CONCAT([[1, 2]], [[3, 4]], [[5, 6]]);
SELECT LIST_CONCAT([{'x': 1}, {'x': 2}], [{'x': 3}, {'x': 4}]);
SELECT LIST_CONCAT([{'x': 1}, {'x': 2}], [{'x': 3}, {'x': 4}], [{'x': 5}, {'x': 6}]);
SELECT LIST_CONCAT([[[1], [2]], [[3], [4]]], [[[5], [6]], [[7], [8]]]);
SELECT LIST_CONCAT([[[1], [2]], [[3], [4]]], [[[5], [6]], [[7], [8]]], [[[9], [10]], [[11], [12]]]);
CREATE TABLE x AS SELECT x % 4 AS x, x AS x, x AS x FROM x;
CREATE TABLE x AS SELECT x, LIST(x) AS x, LIST(x) AS x FROM x GROUP BY x;
SELECT x, LIST_CONCAT(x, x) FROM x;
SELECT x, LIST_CONCAT(x, x, x, x, x, x) FROM x;
SELECT x, LIST_CONCAT(x, CAST(x AS TEXT)) FROM x;
SELECT LIST_APPEND([1, 2], 3);
SELECT LIST_APPEND([1, 2], NULL);
SELECT LIST_APPEND(NULL, 3);
SELECT x, LIST_APPEND(LIST_CONCAT(x, x), x) FROM x ORDER BY x;
SELECT LIST_PREPEND(1, [2, 3]);
SELECT ARRAY_PREPEND(1, [2, 3]);
SELECT ARRAY_PUSH_BACK([1, 2], 3);
SELECT ARRAY_PUSH_BACK(NULL, 3);
SELECT ARRAY_PUSH_FRONT([2, 3], 1);
SELECT ARRAY_PUSH_FRONT(NULL, 1);
SELECT [1, 2] || NULL;
SELECT [1, 2] || x FROM (VALUES (CAST(NULL AS INT[]))) AS x;
SELECT x || x FROM (VALUES ([1, 2, 3], CAST(NULL AS INT[]))) AS x;
SELECT CONCAT([42], [84], 'str');
PRAGMA x;
CREATE TABLE x (x INT[], x INT);
INSERT INTO x VALUES ([2, 1, 3], 2), ([2, 3, 4], 5), ([1], NULL);
SELECT LIST_CONTAINS(x, x) FROM x;
CREATE TABLE x (x INT[]);
INSERT INTO x VALUES ([2, 1, 3]), ([2, 3, 4]), ([1]);
SELECT x, LIST_CONTAINS(x, 1) FROM x;
SELECT x, LIST_CONTAINS(x, 4.0) FROM x;
DROP TABLE x;
CREATE TABLE x (x TEXT[]);
INSERT INTO x VALUES (['a', 'b', 'c']), (['d', 'a', 'e']), (['b']), (['aaaaaaaaaaaaaaaaaaaaaaaa']);
SELECT x, LIST_CONTAINS(x, 'a') FROM x;
SELECT x, LIST_CONTAINS(x, 'aaaaaaaaaaaaaaaaaaaaaaaa') FROM x;
SELECT x, LIST_CONTAINS(x, '0') FROM x;
SELECT x, LIST_CONTAINS(x, NULL) FROM x;
DROP TABLE x;
SELECT LIST_CONTAINS([7, 2, 5], 7);
SELECT LIST_CONTAINS([], 7);
SELECT LIST_CONTAINS([1, 2, 3], 1.0);
SELECT LIST_CONTAINS([1.0, 2.0, 3.0, 4.0], 1);
SELECT LIST_CONTAINS([1, 2, 3], 4.0);
SELECT LIST_CONTAINS([1.0, 2.0, 3.0], 4);
SELECT LIST_CONTAINS([1.0, 2.0, 3.0], 'a');
SELECT LIST_CONTAINS('a', 'a');
SELECT LIST_CONTAINS(NULL, NULL);
SELECT LIST_CONTAINS([7], 5);
SELECT LIST_CONTAINS([1, 2, 3, 4], 4);
SELECT LIST_CONTAINS([1, 2, 3, 4], 5);
SELECT LIST_CONTAINS([1.0, 2.0, 3.0, 4.0], 5.0);
SELECT LIST_CONTAINS([1.0, 2.0, 3.0, 4.0], 4.0);
SELECT LIST_CONTAINS([TRUE, FALSE], TRUE);
SELECT LIST_CONTAINS([TRUE, TRUE], FALSE);
SELECT LIST_CONTAINS(['test', 'notest'], 'notest');
SELECT LIST_CONTAINS(['test', 'notest'], 'a');
SELECT LIST_CONTAINS(NULL, 1);
SELECT LIST_CONTAINS([1], NULL);
SELECT LIST_CONTAINS([NULL], NULL);
SELECT LIST_CONTAINS([NULL, 1], NULL);
SELECT LIST_CONTAINS([NULL, 1], 1);
SELECT LIST_CONTAINS([NULL, 0], 1);
SELECT LIST_CONTAINS([], NULL);
SELECT LIST_CONTAINS([NULL, 7], 7);
SELECT LIST_CONTAINS([NULL, 7], 7);
SELECT LIST_CONTAINS([[1, 2, 3], [1], [1, 2, 3]]);
SELECT LIST_CONTAINS(1);
SELECT LIST_CONTAINS(1, 1);
SELECT LIST_CONTAINS(1, 1);
SELECT LIST_CONTAINS(1, 1);
INSERT INTO x VALUES ([2]), ([1]), ([1, 2]), ([]), ([2, 2]), ([NULL]), ([2, 3]);
SELECT LIST_CONTAINS(x, 1) FROM x;
DROP TABLE x;
DROP TABLE x;
SELECT LIST_CONTAINS([[1, 2, 3], [1]], [1]);
SELECT LIST_CONTAINS([[1, 2, 3], [1]], [2]);
SELECT LIST_CONTAINS([[1, 2, 3], [1]], [1, 2, 3]);
SELECT LIST_CONTAINS([[1, 3], [1]], [1, 2, 3]);
SELECT LIST_CONTAINS([[1, 3], [1], [1, 2, 3]], [1, 2, 3]);
SELECT LIST_CONTAINS([[NULL], [1], [1, 2, 3]], NULL);
SELECT LIST_CONTAINS([[NULL], [1], [1, 2, 3]], [NULL]);
SELECT LIST_CONTAINS([[1, NULL], [1], [1, 2, 3]], [1, NULL]);
SELECT LIST_CONTAINS([[1, NULL], [1], [1, 2, 3]], [0, NULL]);
SELECT LIST_CONTAINS([{'x': 1}, {'x': 2}], {'x': 2});
SELECT LIST_CONTAINS([{'x': 1}, {'x': 2}], {'x': 3});
SELECT LIST_CONTAINS([{'x': 1, 'x': 3}, {'x': 2, 'x': 2}], {'x': 2, 'x': 2});
SELECT LIST_CONTAINS([{'x': 1, 'x': 3}, {'x': 2, 'x': 2}], {'x': 1, 'x': 2});
SELECT LIST_CONTAINS([MAP([1], [2])], MAP([1], [2]));
SELECT LIST_CONTAINS([MAP([1], [2])], MAP([1], [3]));
SELECT LIST_CONTAINS([MAP([1], [2])], MAP([1], [3]));
SELECT LIST_CONTAINS([MAP([1], [2])], MAP([1], [3]));
INSERT INTO x VALUES ([2.0]), ([1.0]), ([1.0, 2.0]), ([]), ([2.0, 2.0]), ([NULL]), ([2.0, 3.0]);
SELECT LIST_CONTAINS(x, 1.0) FROM x;
DROP TABLE x;
DROP TABLE x;
CREATE TABLE x (x TEXT, x TEXT, x TEXT[]);
INSERT INTO x VALUES ('last_day', 'scalar', ['TIMESTAMP']), ('dayname', 'else', ['TIMESTAMP']), ('date_part', 'scalar', ['DATE', 'VARCHAR']), ('scalar_part', 'scalar', ['VARCHAR', 'TIMESTAMP']);
SELECT x FROM x WHERE x = 'scalar' AND ARRAY_CONTAINS(x, 'TIMESTAMP');
CREATE TABLE x (x INT, x TEXT[]);
INSERT INTO x VALUES (1, ['U2']), (2, ['Blur', 'Rock']), (3, ['Oasis', '2Pac']);
SELECT x, x FROM x WHERE ARRAY_CONTAINS(x, '2Pac');
SELECT x, x FROM x WHERE x IN (2, 3) AND ARRAY_CONTAINS(x, '2Pac');
WITH x AS (SELECT x, x FROM x WHERE x IN (2, 3)) SELECT x, x FROM x WHERE ARRAY_CONTAINS(x, '2Pac');
SELECT x, x FROM x WHERE x IN (2, 3) AND CAST(x AS TEXT) ILIKE '%2Pac%';
CREATE TABLE x (x INT[][], x INT[][]);
INSERT INTO x VALUES ([NULL], [NULL]);
SELECT LIST_FILTER(x, x -> LIST_CONTAINS(x, x)) FROM x;
SELECT LIST_DISTINCT(NULL);
SELECT LIST_DISTINCT([NULL]);
SELECT LIST_DISTINCT([]);
SELECT LIST_DISTINCT([]) WHERE 1 = 0;
SELECT LIST_DISTINCT();
SELECT LIST_DISTINCT(*);
SELECT LIST_DISTINCT([1, 2], 2);
SELECT LIST_DISTINCT(CAST(NULL AS BOOLEAN));
SELECT UNNEST(LIST_DISTINCT([1, 1, 2, 2, 2, 3])) AS x ORDER BY x;
SELECT UNNEST(LIST_DISTINCT([1, 1, NULL, 2, 2, 2, 3, NULL, NULL])) AS x ORDER BY x;
SELECT UNNEST(LIST_DISTINCT(LIST_DISTINCT([1, 1, -5, 10, 10, 2]))) AS x ORDER BY x;
CREATE TABLE x (x INT[]);
INSERT INTO x VALUES ([1, 1, 1]), ([1, NULL, 1, NULL]);
INSERT INTO x VALUES ([NULL]), (NULL), ([]);
SELECT LIST_DISTINCT(x) FROM x;
SELECT UNNEST(ARRAY_DISTINCT([1, 2, 2, NULL])) AS x ORDER BY x;
SELECT UNNEST(LIST_DISTINCT([TRUE, TRUE, FALSE, NULL])) AS x ORDER BY x;
SELECT LIST_DISTINCT([CAST(NULL AS BOOLEAN)]);
SELECT UNNEST(LIST_DISTINCT(['aa', 'aa', 'cd', NULL, '42'])) AS x ORDER BY x;
SELECT LIST_DISTINCT([CAST(NULL AS TEXT)]);
SELECT LIST_DISTINCT([CAST(NULL AS TEXT)]);
SELECT LIST_DISTINCT([CAST(NULL AS TEXT)]);
SELECT LIST_DISTINCT([CAST(NULL AS TEXT)]);
SELECT LIST_DISTINCT([CAST(NULL AS TEXT)]);
SELECT LIST_DISTINCT([CAST('2021-08-20' AS DATE)]);
SELECT LIST_DISTINCT([CAST('14:59:37' AS TIME)]);
SELECT LIST_DISTINCT([CAST('2021-08-20' AS TIMESTAMP)]);
SELECT LIST_DISTINCT([CAST('2021-08-20' AS TIMESTAMP_S)]);
SELECT LIST_DISTINCT([CAST('2021-08-20 00:00:00.123' AS TIMESTAMP_MS)]);
SELECT LIST_DISTINCT([CAST('2021-08-20 00:00:00.123456' AS TIMESTAMP_NS)]);
SELECT LIST_DISTINCT([CAST('14:59:37' AS TIMETZ)]);
SELECT LIST_DISTINCT([CAST('2021-08-20' AS TIMESTAMPTZ)]);
SELECT LIST_DISTINCT([INTERVAL '1' YEAR]);
SELECT LIST_DISTINCT([INTERVAL '1' YEAR]);
CREATE TABLE x (x mood[]);
INSERT INTO x VALUES (['happy', 'ok']);
SELECT ARRAY_SORT(LIST_DISTINCT(x)) FROM x;
CREATE TABLE x (x TEXT, x INT[]);
INSERT INTO x VALUES ('one1', [2, 3, 3, 4, NULL, 2]), ('one2', [NULL, NULL, 2]), ('two1', [1, 2, 3, 10, 15]), ('one3', [2, 3, 4]), ('two2', NULL), ('two3', [10, 11, 12]);
SELECT x FROM x WHERE x ILIKE 'one%' AND LIST_UNIQUE(LIST_DISTINCT(x)) > 1;
SELECT x FROM x WHERE x ILIKE 'two%' AND LIST_UNIQUE(LIST_DISTINCT(x)) > 3;
SELECT ARRAY_SORT(LIST_DISTINCT(['a', 'b、c', 'a']));
CREATE TABLE x AS SELECT * FROM x;
PRAGMA x;
PRAGMA x = 'ASC';
PRAGMA x = 'NULLS FIRST';
SELECT LIST_GRADE_UP(CAST(NULL AS INT[]));
SELECT LIST_GRADE_UP(x) FROM (VALUES ([1, 2, 3]), (NULL)) AS x;
SELECT LIST_GRADE_UP([NULL]);
SELECT LIST_GRADE_UP([]);
SELECT LIST_GRADE_UP([]) WHERE 1 = 0;
SELECT LIST_GRADE_UP();
SELECT LIST_GRADE_UP(*);
SELECT LIST_GRADE_UP([1, 2], 2);
SELECT LIST_GRADE_UP([1, 2], 'DESC', 2);
SELECT LIST_GRADE_UP([1, 2], 2, 2);
SELECT LIST_GRADE_UP([1, 2]);
SELECT LIST_GRADE_UP([1, 3, NULL, 5, NULL, -5]);
CREATE TABLE x AS SELECT LIST(x) AS x FROM x AS x;
INSERT INTO x VALUES ([NULL]), ([]), (CAST(NULL AS INT[]));
SELECT LIST_GRADE_UP(x) FROM x;
SELECT LIST_GRADE_UP([1, 3, NULL, 2], 'ASC');
SELECT LIST_GRADE_UP([1, 3, NULL, 2], 'DESC');
SELECT LIST_GRADE_UP([1, 3, NULL, 2], 'DESC', 'NULLS LAST');
SELECT LIST_GRADE_UP([1, 3, NULL, 2], 'deSc', 'nuLls LAST');
SELECT LIST_GRADE_UP([1, 3, NULL, 2], 'DESC', 'NULLS FIRST');
SELECT LIST_GRADE_UP([1, 3, NULL, 2], 'ASC', 'NULLS FIRST');
SELECT LIST_GRADE_UP([1, 3, NULL, 2], 'ASC', 'NULLS LAST');
SELECT LIST_GRADE_UP([TRUE, FALSE, NULL, TRUE, TRUE, NULL]);
SELECT LIST_GRADE_UP([CAST(NULL AS BOOLEAN)]);
SELECT LIST_GRADE_UP(['aa', 'a', 'cd', NULL, '42']);
SELECT LIST_GRADE_UP([CAST(NULL AS TEXT)]);
SELECT LIST_GRADE_UP([CAST(NULL AS TEXT)]);
SELECT LIST_GRADE_UP([CAST(NULL AS TEXT)]);
SELECT LIST_GRADE_UP([CAST(NULL AS TEXT)]);
SELECT LIST_GRADE_UP([CAST(NULL AS TEXT)]);
SELECT LIST_GRADE_UP([CAST('2021-08-20' AS DATE)]);
SELECT LIST_GRADE_UP([CAST('14:59:37' AS TIME)]);
SELECT LIST_GRADE_UP([CAST('2021-08-20' AS TIMESTAMP)]);
SELECT LIST_GRADE_UP([CAST('2021-08-20' AS TIMESTAMP_S)]);
SELECT LIST_GRADE_UP([CAST('2021-08-20 00:00:00.123' AS TIMESTAMP_MS)]);
SELECT LIST_GRADE_UP([CAST('2021-08-20 00:00:00.123456' AS TIMESTAMP_NS)]);
SELECT LIST_GRADE_UP([CAST('14:59:37' AS TIMETZ)]);
SELECT LIST_GRADE_UP([CAST('2021-08-20' AS TIMESTAMPTZ)]);
SELECT LIST_GRADE_UP([INTERVAL '1' YEAR]);
SELECT LIST_GRADE_UP([INTERVAL '1' YEAR]);
SELECT LIST_GRADE_UP([CAST('{a: 1}' AS BLOB), CAST('{a: 3}' AS BLOB)]);
SELECT LIST_GRADE_UP([CAST(NULL AS BLOB)]);
CREATE TABLE x (x mood[]);
INSERT INTO x VALUES (['happy', 'sad']);
SELECT LIST_GRADE_UP(x) FROM x;
SELECT LIST_GRADE_UP([[1], [1, 2], NULL, [NULL], [], [1, 2, 3]]);
SELECT LIST_GRADE_UP([{'x': 1}, {'x': 5}, {'x': 3}]);
SELECT LIST_GRADE_UP(RANGE(0, 3000));
SELECT x, LIST_GRADE_UP(x, 'DESC') FROM (VALUES ([1, 2, 3, 4])) AS x;
SELECT x, x, MAP(x, x), MAP(x, x)[(LIST_GRADE_UP(x, 'DESC'))[1]] FROM (VALUES ([1, 2, 3, 4], [2, 3, 4, 5])) AS x;
CREATE TABLE x AS SELECT * FROM x;
CREATE TABLE x (x TEXT[]);
INSERT INTO x SELECT LIST_GRADE_UP(STR_SPLIT(x, ',')) AS x FROM x;
SELECT ARRAY_GRADE_UP(ARRAY_VALUE(4, 5, 3), 'ASC');
SELECT ARRAY_GRADE_UP(ARRAY_VALUE(4, 5, 3), 'DESC');
SELECT ARRAY_GRADE_UP(CAST(NULL AS INT[3]));
CREATE TABLE x (x INT[], x INT[]);
INSERT INTO x VALUES (RANGE(1, 3000), RANGE(2000, 3000));
INSERT INTO x VALUES (RANGE(0, 3000), RANGE(0, 3000));
SELECT LIST_HAS_ANY(x, x) FROM x;
SELECT LIST_HAS_ALL(x, x) FROM x;
PRAGMA x;
SELECT LIST_HAS_ANY([1, 2, 3], [2, 3, 4]);
SELECT LIST_HAS_ALL([1, 2, 3], [2, 3, 4]);
CREATE TABLE x (x INT[], x INT[]);
INSERT INTO x VALUES (NULL, NULL);
INSERT INTO x VALUES (NULL, [1, 2, 3]);
INSERT INTO x VALUES ([1, 2, 3], NULL);
INSERT INTO x VALUES ([1, 2, 3], [2, 3, NULL]);
INSERT INTO x VALUES ([1, 2, NULL], [2, 3, NULL]);
INSERT INTO x VALUES ([1, 2, NULL], [NULL, 3, 4]);
INSERT INTO x VALUES ([1, 2, 3], [1, 2, 3]);
INSERT INTO x VALUES ([1, 2, 3], [1, 2, NULL]);
SELECT LIST_HAS_ANY(x, x) FROM x;
SELECT LIST_HAS_ALL(x, x) FROM x;
DROP TABLE x;
CREATE TABLE x (x INT[][], x INT[][]);
INSERT INTO x VALUES (NULL, NULL);
INSERT INTO x VALUES ([[1, 2, 3], NULL, [3, 2, 1]], [[2, 3, 4], NULL, [1, 2, 3]]);
INSERT INTO x VALUES ([[1, 2, 3], NULL, [3, 2, 1]], [[8, 8, 8], NULL, [8, 8, 8]]);
INSERT INTO x VALUES ([[1, 2, 3], NULL, [8, 8, 8]], [[8, 8, 8], NULL, [1, 2, 3]]);
SELECT LIST_HAS_ANY(x, x) FROM x;
SELECT LIST_HAS_ALL(x, x) FROM x;
DROP TABLE x;
CREATE TABLE x (x TEXT[], x TEXT[]);
INSERT INTO x VALUES (NULL, NULL);
INSERT INTO x VALUES ([NULL, 'a', 'b', 'c'], [NULL, 'b', 'c', 'd']);
INSERT INTO x VALUES (['a', 'b', 'c'], ['a', 'b', 'c']);
INSERT INTO x VALUES (['here is a very long long string that is def more than 12 bytes', 'and a shorty'], ['here is a very long long string that is def more than 12 bytes', 'here is a very long long string that is def more than 12 bytes', 'c', 'd']);
INSERT INTO x VALUES (['here is a very long long string that is def more than 12 bytes', 'and a shorty'], ['here is a very long string that is def more than 12 bytes', 'here is a very long string that is def more than 12 bytes', 'c', 'd']);
INSERT INTO x VALUES (['here is a very long long string that is def more than 12 bytes', 'and a shorty'], ['here is a very long long string that is def more than 12 bytes', 'and a shorty']);
SELECT LIST_HAS_ANY(x, x) FROM x;
SELECT LIST_HAS_ALL(x, x) FROM x;
SELECT LIST_HAS_ANY(x) FROM x;
SELECT LIST_HAS_ANY(x, x, x) FROM x;
SELECT LIST_HAS_ALL(x) FROM x;
SELECT LIST_HAS_ALL(x, x, x) FROM x;
SELECT LIST_HAS_ALL([1, 2], 1);
SELECT LIST_HAS_ANY([[1, 2], [2, 4]], ['abc', 'def']);
CREATE TABLE x (x INT[], x INT[]);
INSERT INTO x VALUES ([1, 2, 3], [2, 3, 4]);
INSERT INTO x VALUES ([1, 2, 3], [2, 3, 4]);
DROP TABLE x;
CREATE TABLE x (x INT[], x INT[]);
INSERT INTO x VALUES ([1, 2, 3, 4, 5, 6], [2, 3, 4]);
INSERT INTO x VALUES ([1, 2, 3], [1, 2, 3, 4, 7, 8, 9]);
SELECT LIST_HAS_ANY(x, x) FROM x;
SELECT LIST_HAS_ALL(x, x) FROM x;
SELECT LIST_HAS_ALL(x, x) FROM x;
SELECT x && x FROM x;
SELECT 'hello' && x FROM x;
SELECT NULL && [NULL];
SELECT x && NULL FROM x;
SELECT x @> x FROM x;
SELECT x @> x FROM x;
SELECT 'hello' @> x FROM x;
SELECT x @> 'hello' FROM x;
SELECT x @> NULL FROM x;
SELECT NULL @> x FROM x;
SELECT LIST_INNER_PRODUCT([], []);
SELECT LIST_INNER_PRODUCT([], []);
SELECT LIST_INNER_PRODUCT([], []);
INSERT INTO x VALUES ([1, 2, 3]), ([1, 2, 4]), ([7, 8, 9]), ([-1, -2, -3]), (NULL);
SELECT LIST_INNER_PRODUCT(x, [1, 2, 3]) FROM x;
SELECT LIST_INNER_PRODUCT(x, [1, 2, 3]) FROM x;
SELECT LIST_INNER_PRODUCT(x, [1, 2, 3]) FROM x;
SELECT LIST_INNER_PRODUCT(x, [1, 2, 3]) FROM x;
SELECT LIST_INNER_PRODUCT(x, [1, 2, 3]) FROM x;
PRAGMA x;
CREATE TABLE x (x INT[], x INT);
INSERT INTO x VALUES ([2, 1, 3], 2), ([2, 3, 4], 5), ([1], NULL);
SELECT LIST_POSITION(x, x) FROM x;
CREATE TABLE x (x INT[]);
INSERT INTO x VALUES ([2, 1, 3]), ([2, 3, 4]), ([1]);
SELECT x, LIST_POSITION(x, 1) FROM x;
SELECT x, LIST_POSITION(x, 4.0) FROM x;
DROP TABLE x;
CREATE TABLE x (x TEXT[]);
INSERT INTO x VALUES (['a', 'b', 'c']), (['d', 'a', 'e']), (['b']), (['aaaaaaaaaaaaaaaaaaaaaaaa']);
SELECT x, LIST_POSITION(x, 'a') FROM x;
SELECT x, LIST_POSITION(x, 'aaaaaaaaaaaaaaaaaaaaaaaa') FROM x;
SELECT x, LIST_POSITION(x, '0') FROM x;
SELECT x, LIST_POSITION(x, NULL) FROM x;
DROP TABLE x;
SELECT LIST_POSITION([7, 2, 5], 7);
SELECT LIST_POSITION([], 7);
SELECT LIST_POSITION([1, 2, 3], 1.0);
SELECT LIST_POSITION([1.0, 2.0, 3.0, 4.0], 1);
SELECT LIST_POSITION([1, 2, 3], 4.0);
SELECT LIST_POSITION([1.0, 2.0, 3.0], 4);
SELECT LIST_POSITION([1.0, 2.0, 3.0], 'a');
SELECT LIST_POSITION(CAST([1.0, 2.0, 3.0] AS TEXT[]), 'a');
SELECT LIST_POSITION('a', 'a');
SELECT LIST_POSITION(NULL, NULL);
SELECT LIST_POSITION([7], 5);
SELECT LIST_POSITION([1, 2, 3, 4], 4);
SELECT LIST_POSITION([1, 2, 3, 4], 5);
SELECT LIST_POSITION([1.0, 2.0, 3.0, 4.0], 5.0);
SELECT LIST_POSITION([1.0, 2.0, 3.0, 4.0], 4.0);
SELECT LIST_POSITION([TRUE, FALSE], TRUE);
SELECT LIST_POSITION([TRUE, TRUE], FALSE);
SELECT LIST_POSITION(['test', 'notest'], 'notest');
SELECT LIST_POSITION(['test', 'notest'], 'a');
SELECT LIST_POSITION(NULL, 1);
SELECT LIST_POSITION([1], NULL);
SELECT LIST_POSITION([NULL], NULL);
SELECT LIST_POSITION([NULL, 1], NULL);
SELECT LIST_POSITION([NULL, 1], 1);
SELECT LIST_POSITION([NULL, 0], 1);
SELECT LIST_POSITION([], NULL);
SELECT LIST_POSITION([NULL, 7], 7);
SELECT LIST_POSITION([NULL, 7], 7);
SELECT LIST_POSITION([[1, 2, 3], [1], [1, 2, 3]]);
SELECT LIST_POSITION(1);
SELECT LIST_POSITION(1, 1);
SELECT LIST_POSITION(1, 1);
SELECT LIST_POSITION(1, 1);
INSERT INTO x VALUES ([2]), ([1]), ([1, 2]), ([]), ([2, 2]), ([NULL]), ([2, 3]);
INSERT INTO x VALUES ([2]), ([1]), ([1, 2]), ([]), ([2, 2]), ([NULL]), ([2, 3]);
DROP TABLE x;
DROP TABLE x;
SELECT LIST_POSITION([[1, 2, 3], [1]], [1]);
SELECT LIST_POSITION([[1, 2, 3], [1]], [2]);
SELECT LIST_POSITION([[1, 2, 3], [1]], [1, 2, 3]);
SELECT LIST_POSITION([[1, 3], [1]], [1, 2, 3]);
SELECT LIST_POSITION([[1, 3], [1], [1, 2, 3]], [1, 2, 3]);
SELECT LIST_POSITION([[NULL], [1], [1, 2, 3]], NULL);
SELECT LIST_POSITION([[NULL], [1], [1, 2, 3]], [NULL]);
SELECT LIST_POSITION([[1, NULL], [1], [1, 2, 3]], [1, NULL]);
SELECT LIST_POSITION([[1, NULL], [1], [1, 2, 3]], [0, NULL]);
SELECT LIST_POSITION([{'x': 1}, {'x': 2}], {'x': 2});
SELECT LIST_POSITION([{'x': 1}, {'x': 2}], {'x': 3});
SELECT LIST_POSITION([{'x': 1, 'x': 3}, {'x': 2, 'x': 2}], {'x': 2, 'x': 2});
SELECT LIST_POSITION([{'x': 1, 'x': 3}, {'x': 2, 'x': 2}], {'x': 1, 'x': 2});
SELECT LIST_POSITION([MAP([1], [2])], MAP([1], [2]));
SELECT LIST_POSITION([MAP([1], [2])], MAP([1], [3]));
SELECT LIST_POSITION([MAP([1], [2])], MAP([1], [3]));
SELECT LIST_POSITION([MAP([1], [2])], MAP([1], [3]));
INSERT INTO x VALUES ([2.0]), ([1.0]), ([1.0, 2.0]), ([]), ([2.0, 2.0]), ([NULL]), ([2.0, 3.0]);
SELECT LIST_POSITION(x, 1.0) FROM x;
DROP TABLE x;
PRAGMA x;
SELECT LIST_POSITION([CAST('NaN' AS DOUBLE)], CAST('NaN' AS DOUBLE));
SELECT LIST_POSITION([NULL, 0, CAST('NaN' AS DOUBLE)], CAST('NaN' AS DOUBLE));
SELECT LIST_CONTAINS([NULL, 0, CAST('NaN' AS DOUBLE)], CAST('NaN' AS DOUBLE));
SELECT LIST_POSITION([[[NULL, 42]]], [[NULL, 42]]);
PRAGMA x;
SELECT LIST_RESIZE([1, 2, 4], 2);
CREATE TABLE x (x INT[], x INT);
INSERT INTO x VALUES ([5, 4, 3], 3);
INSERT INTO x VALUES ([1, 2, 3], 5);
INSERT INTO x VALUES (NULL, 8);
INSERT INTO x VALUES ([10, 11, 12], 2);
SELECT LIST_RESIZE(x, x) FROM x;
SELECT LIST_RESIZE([], 2);
CREATE TABLE x (x TEXT[], x INT);
INSERT INTO x VALUES (['abc', 'def'], 3);
INSERT INTO x VALUES (['d', 'ef', 'ghij'], 8);
INSERT INTO x VALUES (['lmnopqrs'], 5);
INSERT INTO x VALUES (['here is a little story about a duck,', 'whose name is harold.', 'He is a cool duck who lives in a cool world'], 5);
SELECT LIST_RESIZE(x, x) FROM x;
SELECT LIST_RESIZE(NULL, 1, 1);
SELECT LIST_RESIZE(NULL, 2, NULL);
SELECT LIST_RESIZE(NULL, NULL, NULL);
SELECT LIST_RESIZE([1, 2, 3], NULL);
CREATE TABLE x (x INT[], x INT);
INSERT INTO x VALUES ([1, 2, 3], 2), (NULL, 6), ([], 4), ([NULL, NULL, 5, 6, NULL], 6);
SELECT LIST_RESIZE(x, x) FROM x;
SELECT * FROM (SELECT LIST_RESIZE(NULL, 1, 1));
SELECT LIST_RESIZE([[1], [1, 2], NULL, [NULL], [], [1, 2, 3]], 3);
CREATE TABLE x (x INT[][], x INT);
INSERT INTO x VALUES ([[1, 2, 3], [4, 5, 6]], 3);
INSERT INTO x VALUES ([[7, 8, 9], [10, NULL, 6], [9, 8, 7]], 5);
INSERT INTO x VALUES ([[1, 2, 3], NULL, [4, 5, 6]], 2);
SELECT LIST_RESIZE(x, x) FROM x;
SELECT LIST_RESIZE([{'x': 1, 'x': 2}, NULL, {'x': 3, 'x': 4}], 2);
SELECT LIST_RESIZE([{'x': 1, 'x': [2, 3]}, NULL, {'x': 1, 'x': [2, 3]}], 4);
SELECT LIST_RESIZE([{'x': 1, 'x': [{'x': 1, 'x': 2}, {'x': 3, 'x': 4}]}, NULL, {'x': 1, 'x': [{'x': 1, 'x': 2}, {'x': 3, 'x': 4}]}], 4);
SELECT LIST_RESIZE([{'x': 1, 'x': [{'x': 1, 'x': [2, 3]}, {'x': 3, 'x': [4, 5]}]}, NULL, {'x': 1, 'x': [{'x': 1, 'x': [2, 3]}, {'x': 3, 'x': [4, 5]}]}], 4);
SELECT LIST_RESIZE([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9]], [[10, 11, 12], [13, 14, 15]]], 2);
SELECT LIST_RESIZE([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], NULL], NULL, [NULL], [[10, 11, 12], [13, 14, 15]]], 8);
SELECT LIST_RESIZE([1, 2, 3], LENGTH(LIST_RESIZE([1, 2, 3], 2)));
SELECT LIST_RESIZE(LIST_FILTER([1, 2, 3, 4, 5, 6], x -> x > 1), 4);
SELECT LIST_RESIZE([1, 2], 3, 4);
CREATE TABLE x (x INT[], x INT, x INT);
INSERT INTO x VALUES ([1, 2, 3], 5, 4), ([4, 5, 6], 6, NULL), ([7, 8, NULL], 3, 10);
SELECT LIST_RESIZE(x, x, x) FROM x;
SELECT LIST_RESIZE([1, 2], 3, NULL);
SELECT LIST_RESIZE([{'x': 1, 'x': [2, 3]}, NULL, {'x': 1, 'x': [2, 3]}], 4, {'x': 5, 'x': [10, 10]});
SELECT LIST_RESIZE([{'x': 1, 'x': [2, 3]}, NULL, {'x': 1, 'x': [2, 3]}], 6, NULL);
SELECT LIST_RESIZE(RANGE(0, 10000), 4000);
SELECT LIST_RESIZE([1, 2, 3], 4000);
CREATE TABLE x (x BOOLEAN[], x INT);
INSERT INTO x VALUES ([TRUE, FALSE, TRUE], 1);
INSERT INTO x VALUES ([FALSE, TRUE, FALSE], 2);
INSERT INTO x VALUES ([TRUE, TRUE, NULL], 3);
SELECT LIST_RESIZE(x, x) FROM x;
SELECT LIST_RESIZE([TRUE], 2);
SELECT LIST_RESIZE([FALSE], 2);
SELECT LIST_RESIZE([NULL], 2);
SELECT LIST_RESIZE([1, 2, 3], 9999999999999999999);
SELECT LIST_RESIZE([1, 2, 3], 4000999999999999999);
SELECT LIST_RESIZE(CAST([1, 2, 3] AS BIGINT[]), 5, 42);
PRAGMA x;
CREATE TABLE x (x INT, x STRUCT(x INT, x DOUBLE, x TEXT)[]);
INSERT INTO x SELECT x, [{'x': 1, 'x': 1.1, 'x': 'one'}, {'x': 2, 'x': 2.2, 'x': 'two'}, {'x': 3, 'x': 3.3, 'x': 'three'}] FROM x;
PRAGMA x;
PRAGMA x;
SELECT LIST_RESIZE(x, 3) FROM x AS x;
SELECT LIST_RESIZE(x, 1) FROM x AS x;
SELECT LIST_RESIZE(x, 1) FROM x AS x;
PRAGMA x;
SELECT LIST_REVERSE(NULL);
SELECT LIST_REVERSE([]);
SELECT LIST_REVERSE([NULL]);
SELECT LIST_REVERSE([1, 42, 2]);
SELECT ARRAY_REVERSE([1, 42, 2]);
SELECT LIST_REVERSE([1, 42, NULL, 2]);
SELECT LIST_REVERSE(LIST_REVERSE([1, 3, 3, 42, 117, 69, NULL]));
SELECT LIST_REVERSE([[1, 2, 42], [3, 4]]);
CREATE OR REPLACE TABLE x AS SELECT RANGE(0, 5000) AS x;
SELECT ARRAY_SORT((x)) = LIST_REVERSE(x) FROM x;
CREATE TABLE x (x INT, x INT[]);
INSERT INTO x VALUES (1, [NULL, 3, 117, 42, 1]), (2, NULL), (3, [1, 8, 9]), (4, NULL), (5, NULL), (6, [NULL]);
SELECT x, LIST_REVERSE(x) FROM x ORDER BY x;
DROP TABLE x;
CREATE TABLE x (x INT, x INT[]);
INSERT INTO x VALUES (1, [1, 2, 3]), (1, [4, 5, 6]), (3, [7, 8, 9]);
SELECT x, LIST_REVERSE(x) FROM x ORDER BY x;
DROP TABLE x;
SELECT LIST_REVERSE(LIST_REVERSE(COLUMNS(['int_array', 'varchar_array', 'nested_int_array', 'array_of_structs', 'timestamp_array', 'double_array', 'date_array', 'timestamptz_array']))) IS NOT DISTINCT FROM COLUMNS(['int_array', 'varchar_array', 'nested_int_array', 'array_of_structs', 'timestamp_array', 'double_array', 'date_array', 'timestamptz_array']) FROM x;
SELECT LIST_REVERSE(x) FROM x;
SELECT LIST_REVERSE(x) FROM x;
SELECT TRUE FROM x;
SELECT ARRAY_SORT((x)) IS NOT DISTINCT FROM x FROM (SELECT LIST_REVERSE(x) AS x FROM x);
SELECT ARRAY_SORT((x)) IS NOT DISTINCT FROM x FROM (SELECT LIST_REVERSE(x) AS x FROM x);
SELECT LIST_REVERSE();
SELECT LIST_REVERSE(42);
SELECT LIST_REVERSE([1, 3, 2, 42, 117, NULL]);
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('racecar'), ('civic'), ('defied'), ('repaper'), ('kayak'), ('rotator'), ('tattarrattat'), ('saippuakivikauppias'), ('malayalam');
SELECT LIST_AGGR(LIST_REVERSE(STR_SPLIT(x, '')), 'string_agg', '') FROM x ORDER BY x;
DROP TABLE x;
WITH x AS (SELECT [1, 2, 3] AS x UNION ALL SELECT [4, 5] AS x UNION ALL SELECT [] AS x) SELECT LIST_REVERSE(x) AS x FROM x ORDER BY LENGTH(x) DESC;
SELECT LIST_REVERSE();
SELECT LIST_REVERSE(*);
SELECT LIST_REVERSE([1, 2], 2);
SELECT LIST_REVERSE([1, 42, 39, 58]);
SELECT LIST_REVERSE([1, NULL, 42, 39, NULL, 58]);
SELECT LIST_REVERSE([1, 42, -39, 58, -1, 18]);
SELECT LIST_REVERSE(LIST_REVERSE([11, -100, 678]));
CREATE OR REPLACE TABLE x AS SELECT LIST(x) AS x FROM x AS x;
INSERT INTO x VALUES ([NULL]), (NULL), ([]);
SELECT LIST_REVERSE(x) FROM x;
SELECT (x).list_reverse() FROM x;
SELECT LIST_REVERSE([[1], [1, 2], NULL, [NULL], [], [1, 2, 3]]);
SELECT ([[1], [1, 2], NULL, [NULL], [], [1, 2, 3]]).list_reverse();
CREATE OR REPLACE TABLE x AS SELECT x % 4 AS x, LIST(x) AS x FROM x GROUP BY x % 4;
CREATE OR REPLACE TABLE x AS SELECT x % 4 AS x, LIST(x) AS x FROM x GROUP BY x % 4;
WITH x AS (SELECT [1, 2, 3] AS x UNION ALL SELECT [4, 5] AS x UNION ALL SELECT [] AS x) SELECT LIST_REVERSE(x) AS x FROM x ORDER BY LENGTH(x) DESC;
PRAGMA x;
PRAGMA x;
SELECT LIST_REVERSE(["x"]) FROM x;
CREATE TABLE x AS SELECT RANGE(0, 5000) AS x;
SELECT ARRAY_SORT(RANGE(0, 5000));
SELECT LIST_REVERSE(x) FROM x;
SELECT LIST_REVERSE(x) FROM x;
PRAGMA x;
PRAGMA x;
SELECT LIST_REVERSE(["x"]) FROM x;
CREATE TABLE x AS SELECT RANGE(0, 5000) AS x;
SELECT ARRAY_SORT(RANGE(0, 5000));
SELECT LIST_REVERSE(x) FROM x;
PRAGMA x;
CREATE TABLE x (x INT[]);
INSERT INTO x VALUES ([1, 2, 3]), ([4, 5, 6]), (NULL), ([]), ([NULL]), ([4]);
CREATE TABLE x (x INT[]);
INSERT INTO x VALUES ([2, 1]), ([3, 1, 3]), ([]), (NULL);
SELECT LIST_SELECT([], []);
SELECT LIST_SELECT(NULL, []);
SELECT LIST_SELECT([], NULL);
SELECT LIST_SELECT([1, 2, 3], [1, 2, 3]);
SELECT LIST_SELECT([1, 2, 3], [3, 2, 3, 3]);
SELECT LIST_SELECT([1, 2, 3], [1, 2]);
SELECT LIST_SELECT([1, 2, 3], [3, 2, 1, 4]);
SELECT LIST_SELECT([1, 2, 3], [3, 2, 3, -1]);
SELECT LIST_SELECT(x, [1, 2]) FROM x;
SELECT LIST_SELECT(x, x) FROM x, x ORDER BY x, x;
SELECT LIST_SELECT([1, 2, 3], [NULL]);
SELECT LIST_SELECT(x, [2, 3, 4]) FROM x;
SELECT LIST_SELECT([TRUE, FALSE, NULL, TRUE, TRUE, NULL], [1, 3, 2]);
SELECT LIST_SELECT([CAST(NULL AS BOOLEAN)], [1]);
SELECT LIST_SELECT(['aa', 'a', 'cd', NULL, '42'], [4, 5, 2, 1, 3]);
SELECT LIST_SELECT([CAST(NULL AS TEXT)], [1]);
SELECT LIST_SELECT([CAST(NULL AS TEXT)], [1]);
SELECT LIST_SELECT([CAST(NULL AS TEXT)], [1]);
SELECT LIST_SELECT([CAST(NULL AS TEXT)], [1]);
SELECT LIST_SELECT([CAST(NULL AS TEXT)], [1]);
SELECT LIST_SELECT([CAST('2021-08-20' AS DATE)], [1]);
SELECT LIST_SELECT([CAST('14:59:37' AS TIME)], [1]);
SELECT LIST_SELECT([CAST('2021-08-20' AS TIMESTAMP)], [1]);
SELECT LIST_SELECT([CAST('2021-08-20' AS TIMESTAMP_S)], [1]);
SELECT LIST_SELECT([CAST('2021-08-20 00:00:00.123' AS TIMESTAMP_MS)], [1]);
SELECT LIST_SELECT([CAST('2021-08-20 00:00:00.123456' AS TIMESTAMP_NS)], [1]);
SELECT LIST_SELECT([CAST('14:59:37' AS TIMETZ)], [1]);
SELECT LIST_SELECT([CAST('2021-08-20' AS TIMESTAMPTZ)], [1]);
SELECT LIST_SELECT([INTERVAL '1' YEAR], [1]);
SELECT LIST_SELECT([INTERVAL '1' YEAR], [1]);
SELECT LIST_SELECT([CAST('{a: 1}' AS BLOB), CAST('{a: 3}' AS BLOB)], [1, 2]);
SELECT LIST_SELECT([CAST(NULL AS BLOB)], [1]);
CREATE TABLE x (x mood[]);
INSERT INTO x VALUES (['happy', 'sad']);
SELECT LIST_SELECT(x, [2, 1]) FROM x;
SELECT LIST_SELECT([[1], [1, 2], NULL, [NULL], [], [1, 2, 3]], [3, 5, 1, 2, 6, 4]);
SELECT LIST_SELECT([{'x': 1}, {'x': 5}, {'x': 3}], [1, 3, 2]);
CREATE TABLE x AS SELECT x % 4 AS x, LIST(x) AS x FROM x GROUP BY x % 4;
WITH x AS (SELECT x, LIST_SELECT(x, RANGE(0, 5)) AS x FROM x), x AS (SELECT x, UNNEST(x) AS x FROM x) SELECT COUNT(*) FROM x;
SELECT LIST_SELECT(RANGE(0, 6000), RANGE(0, 6000));
SELECT x FROM x WHERE [4] = LIST_SELECT(x, [1]);
SELECT (LIST_SELECT([1, 2, 3], [2, 3]))[1];
SELECT LIST_SELECT([1, 2], 'hello');
SELECT LIST_SELECT([1, 2], ['hello']);
CREATE TABLE x AS SELECT * EXCLUDE (x, x, x) FROM x;
SELECT LIST_SELECT(x, 'enum_0') FROM x AS x, x AS x;
SELECT LIST_SELECT(ARRAY_VALUE('1', NULL), [1, 2, 3]);
PRAGMA x;
PRAGMA x = 'ASC';
PRAGMA x = 'ASC';
PRAGMA x = 'ASC';
PRAGMA x = 'ASC';
PRAGMA x = 'ASC';
PRAGMA x = 'ASC';
PRAGMA x = 'ASC';
PRAGMA x = 'ASC';
PRAGMA x = 'ASC';
PRAGMA x = 'ASC';
PRAGMA x = 'ASC';
SELECT ARRAY_SORT([1, 2]);
SELECT ARRAY_SORT([1, 2]);
SELECT ARRAY_SORT([1, 2]);
SELECT ARRAY_SORT(ARRAY_SORT([1, 2]));
SELECT ARRAY_REVERSE_SORT([1, 2]);
SELECT ARRAY_REVERSE_SORT(ARRAY_REVERSE_SORT([1, 2]));
SELECT ARRAY_SORT([1, 3, NULL, 5, NULL, -5]);
SELECT ARRAY_REVERSE_SORT([1, 3, NULL, 5, NULL, -5]);
CREATE TABLE x AS SELECT LIST(x) AS x FROM x AS x;
INSERT INTO x VALUES ([NULL]), (NULL), ([]);
SELECT ARRAY_SORT(x) FROM x;
SELECT ARRAY_REVERSE_SORT(x) FROM x;
SELECT ARRAY_REVERSE_SORT(x) FROM x;
SELECT ARRAY_REVERSE_SORT(x) FROM x;
SELECT ARRAY_REVERSE_SORT(x);
SELECT ARRAY_REVERSE_SORT(x);
SELECT ARRAY_REVERSE_SORT(x);
SELECT ARRAY_SORT([1, 2]);
SELECT ARRAY_REVERSE_SORT([1, 2]);
SELECT ARRAY_SORT([1, 3, NULL, 2]);
SELECT ARRAY_SORT([1, 3, NULL, 2]);
SELECT ARRAY_SORT([1, 3, NULL, 2]);
SELECT ARRAY_SORT([1, 3, NULL, 2]);
SELECT ARRAY_SORT([1, 3, NULL, 2]);
SELECT ARRAY_SORT([1, 3, NULL, 2]);
SELECT ARRAY_SORT([1, 3, NULL, 2]);
SELECT ARRAY_SORT([1, 3, NULL, 2]);
SELECT ARRAY_REVERSE_SORT([1, 3, NULL, 2]);
SELECT ARRAY_REVERSE_SORT([1, 3, NULL, 2]);
SELECT ARRAY_SORT([TRUE, FALSE, NULL, TRUE, TRUE, NULL]);
SELECT ARRAY_SORT([CAST(NULL AS BOOLEAN)]);
SELECT ARRAY_SORT(['aa', 'a', 'cd', NULL, '42']);
SELECT ARRAY_SORT([CAST(NULL AS TEXT)]);
SELECT ARRAY_SORT([CAST(NULL AS TEXT)]);
SELECT ARRAY_SORT([CAST(NULL AS TEXT)]);
SELECT ARRAY_SORT([CAST(NULL AS TEXT)]);
SELECT ARRAY_SORT([CAST(NULL AS TEXT)]);
SELECT ARRAY_SORT([CAST('2021-08-20' AS DATE)]);
SELECT ARRAY_SORT([CAST('14:59:37' AS TIME)]);
SELECT ARRAY_SORT([CAST('2021-08-20' AS TIMESTAMP)]);
SELECT ARRAY_SORT([CAST('2021-08-20' AS TIMESTAMP_S)]);
SELECT ARRAY_SORT([CAST('2021-08-20 00:00:00.123' AS TIMESTAMP_MS)]);
SELECT ARRAY_SORT([CAST('2021-08-20 00:00:00.123456' AS TIMESTAMP_NS)]);
SELECT ARRAY_SORT([CAST('14:59:37' AS TIMETZ)]);
SELECT ARRAY_SORT([CAST('2021-08-20' AS TIMESTAMPTZ)]);
SELECT ARRAY_SORT([INTERVAL '1' YEAR]);
SELECT ARRAY_SORT([INTERVAL '1' YEAR]);
SELECT ARRAY_SORT([CAST('{a: 1}' AS BLOB), CAST('{a: 3}' AS BLOB)]);
SELECT ARRAY_SORT([CAST(NULL AS BLOB)]);
CREATE TABLE x (x mood[]);
INSERT INTO x VALUES (['happy', 'sad']);
SELECT ARRAY_SORT(x) FROM x;
SELECT ARRAY_SORT([[1], [1, 2], NULL, [NULL], [], [1, 2, 3]]);
SELECT ARRAY_SORT([{'x': 1}, {'x': 5}, {'x': 3}]);
CREATE TABLE x AS SELECT x % 4 AS x, LIST(x) AS x FROM x GROUP BY x % 4;
CREATE TABLE x AS SELECT x % 4 AS x, LIST(x) AS x FROM x GROUP BY x % 4;
SELECT x, ARRAY_SORT(x) FROM (VALUES ([1, 2, 3, 4])) AS x;
SELECT x, x, MAP(x, x), MAP(x, x)[(ARRAY_SORT(x))[1]] FROM (VALUES ([1, 2, 3, 4], [2, 3, 4, 5])) AS x;
SELECT x, LIST(DISTINCT x ORDER BY x) FROM (VALUES (1, '10'), (1, '15'), (2, '10')) AS x GROUP BY ALL ORDER BY x;
SELECT x, LIST(DISTINCT x ORDER BY x) FROM (VALUES (1, '10'), (1, '10'), (1, '15'), (2, '10')) AS x GROUP BY x ORDER BY x;
SELECT x, LIST(x ORDER BY x) FROM (VALUES (1, '10'), (1, '10'), (1, '15'), (2, '10')) AS x GROUP BY x ORDER BY x;
SELECT x, LIST(DISTINCT x ORDER BY x) FROM (VALUES (1, '10'), (1, '10'), (1, '15'), (2, '10')) AS x GROUP BY x ORDER BY x;
SELECT x, LIST(DISTINCT x ORDER BY x) FROM (VALUES (1, '10', 2), (1, '15', 1), (2, '10', 1)) AS x GROUP BY ALL ORDER BY x;
SELECT LIST(DISTINCT x % 2 ORDER BY x) AS x FROM x AS x;
CREATE TABLE x AS SELECT * FROM x;
CREATE TABLE x (x TEXT[]);
PRAGMA x;
CREATE OR REPLACE TABLE x AS (SELECT 'new_customers' AS x, 'dim_model_7' AS x UNION ALL SELECT 'exposure_1' AS x, 'dim_model_7' AS x UNION ALL SELECT 'exposure_1' AS x, 'exposure_1' AS x UNION ALL SELECT 'fct_model_6' AS x, 'fct_model_6' AS x UNION ALL SELECT 'exposure_1' AS x, 'fct_model_6' AS x UNION ALL SELECT 'report_1' AS x, 'fct_model_6' AS x UNION ALL SELECT 'report_2' AS x, 'fct_model_6' AS x UNION ALL SELECT 'report_3' AS x, 'fct_model_6' AS x UNION ALL SELECT 'fct_model_9' AS x, 'fct_model_9' AS x UNION ALL SELECT 'stg_model_5' AS x, 'fct_model_9' AS x UNION ALL SELECT 'int_model_4' AS x, 'int_model_4' AS x UNION ALL SELECT 'int_model_5' AS x, 'int_model_4' AS x UNION ALL SELECT 'dim_model_7' AS x, 'int_model_4' AS x UNION ALL SELECT 'new_customers' AS x, 'int_model_4' AS x UNION ALL SELECT 'exposure_1' AS x, 'int_model_4' AS x UNION ALL SELECT 'int_model_5' AS x, 'int_model_5' AS x UNION ALL SELECT 'dim_model_7' AS x, 'int_model_5' AS x UNION ALL SELECT 'new_customers' AS x, 'int_model_5' AS x UNION ALL SELECT 'exposure_1' AS x, 'int_model_5' AS x UNION ALL SELECT 'model_8' AS x, 'model_8' AS x UNION ALL SELECT 'new_customers' AS x, 'new_customers' AS x UNION ALL SELECT 'report_1' AS x, 'report_1' AS x UNION ALL SELECT 'report_2' AS x, 'report_2' AS x UNION ALL SELECT 'report_3' AS x, 'report_3' AS x);
SELECT x, COUNT(*) AS x, ARRAY_SORT(LIST(x)) AS x FROM x GROUP BY 1 HAVING x > 1;
SELECT LIST_UNIQUE(NULL);
SELECT LIST_UNIQUE([NULL]);
SELECT LIST_UNIQUE([]);
SELECT LIST_UNIQUE([]) WHERE 1 = 0;
SELECT LIST_UNIQUE();
SELECT LIST_UNIQUE(*);
SELECT LIST_UNIQUE([1, 2], 2);
SELECT LIST_UNIQUE(CAST(NULL AS TINYINT));
SELECT LIST_UNIQUE([1, 1, 2, 2, 2, 3]);
SELECT LIST_UNIQUE([1, 1, NULL, 2, 2, 2, 3, NULL, NULL]);
SELECT LIST_UNIQUE([1, 1, -5, 10, 10, 2]);
CREATE TABLE x (x INT[]);
INSERT INTO x VALUES ([1, 1, 2, 2, 2, 3]), ([1, NULL, 1, NULL]);
INSERT INTO x VALUES ([NULL]), (NULL), ([]);
SELECT LIST_UNIQUE(x) FROM x;
SELECT ARRAY_UNIQUE([1, 2, 2, NULL]);
SELECT LIST_UNIQUE([TRUE, TRUE, FALSE, NULL]);
SELECT LIST_UNIQUE([CAST(NULL AS BOOLEAN)]);
SELECT LIST_UNIQUE(['aa', 'aa', 'cd', NULL, '42']);
SELECT LIST_UNIQUE([CAST(NULL AS TEXT)]);
SELECT LIST_UNIQUE([CAST(NULL AS TEXT)]);
SELECT LIST_UNIQUE([CAST(NULL AS TEXT)]);
SELECT LIST_UNIQUE([CAST(NULL AS TEXT)]);
SELECT LIST_UNIQUE([CAST(NULL AS TEXT)]);
SELECT LIST_UNIQUE([CAST('2021-08-20' AS DATE)]);
SELECT LIST_UNIQUE([CAST('14:59:37' AS TIME)]);
SELECT LIST_UNIQUE([CAST('2021-08-20' AS TIMESTAMP)]);
SELECT LIST_UNIQUE([CAST('2021-08-20' AS TIMESTAMP_S)]);
SELECT LIST_UNIQUE([CAST('2021-08-20 00:00:00.123' AS TIMESTAMP_MS)]);
SELECT LIST_UNIQUE([CAST('2021-08-20 00:00:00.123456' AS TIMESTAMP_NS)]);
SELECT LIST_UNIQUE([CAST('14:59:37' AS TIMETZ)]);
SELECT LIST_UNIQUE([CAST('2021-08-20' AS TIMESTAMPTZ)]);
SELECT LIST_UNIQUE([INTERVAL '1' YEAR]);
SELECT LIST_UNIQUE([INTERVAL '1' YEAR]);
CREATE TABLE x (x mood[]);
INSERT INTO x VALUES (['happy', 'ok']);
SELECT LIST_UNIQUE(x) FROM x;
SELECT LIST_UNIQUE(['a', 'b、c', 'a']);
PRAGMA x;
SELECT [[1, 7], [2], [3]];
SELECT [[1, 7], [2], [3], NULL];
SELECT [[1, 7], [2], NULL, [3]];
SELECT [[1, 7], [NULL], [2], [3]];
CREATE TABLE x (x INT[], x INT[], x INT[]);
INSERT INTO x VALUES ([1, 1], [2, 2], [3]);
INSERT INTO x VALUES ([4], [5, 5, 5], [6, 6]);
INSERT INTO x VALUES ([7, 7, 7, 7], [8], [9, 9, 9]);
INSERT INTO x VALUES ([], [], []);
INSERT INTO x VALUES ([-1, -1, NULL], NULL, [-2, -2]);
SELECT [x, x, x] FROM x;
SELECT [ROW(1, 1), ROW(2, 2), ROW(3, 3)];
SELECT [ROW(1, 1), ROW(2, 2), ROW(3, 3), NULL];
SELECT [ROW(1, 1), ROW(NULL, 2), NULL, ROW(3, 3)];
SELECT [ROW(1, 1), ROW(NULL, 2), NULL, ROW(3, 3)];
INSERT INTO x VALUES ([ROW(1, 1), ROW(2, 2)], [ROW(3, 3), ROW(4, 4)], [ROW(5, 5), ROW(6, 6)]);
INSERT INTO x VALUES ([ROW(7, 7), ROW(8, 8)], [ROW(9, 9)], [ROW(10, 10), ROW(11, 11), ROW(12, 12)]);
INSERT INTO x VALUES ([ROW(13, 13)], [ROW(14, 14), ROW(15, 15), ROW(16, 16)], [ROW(17, 17), ROW(18, 18)]);
INSERT INTO x VALUES ([NULL, ROW(20, 20)], NULL, [ROW(23, 23), ROW(24, 24), ROW(25, 25), ROW(26, 26)]);
SELECT [x, x, x] FROM x;
SELECT [['a', 'a'], ['b', 'b', 'b'], ['c']];
SELECT [['a', 'a'], ['b', 'b', 'b'], ['c'], NULL];
SELECT [['a', 'a'], ['b', 'b', NULL], NULL, ['c']];
CREATE TABLE x (x TEXT[], x TEXT[], x TEXT[]);
INSERT INTO x VALUES (['a', 'a'], ['b', 'b', 'b'], ['c']);
INSERT INTO x VALUES (['d'], ['e', 'e', 'e', 'e'], ['f', 'f']);
INSERT INTO x VALUES (['g', 'g', 'g', 'g'], ['h'], ['i', 'i', 'i']);
INSERT INTO x VALUES (['j', 'j'], NULL, ['k', 'k', 'k']);
INSERT INTO x VALUES (['l', 'l', 'l'], ['m', 'm'], [NULL, 'n', 'n']);
SELECT [x, x, x] FROM x;
SELECT [[[1, 1], [2]], [[3, 3], [4, 4, 4, 4], [5, 5]], [[6, 6]]];
SELECT [[[1, 1], [2]], [[3, 3], [4, 4, 4, 4], [5, 5]], [[6, 6]], NULL];
SELECT [[[1, 1], [2]], [[3, 3], [4, 4, NULL, 4], [5, 5]], NULL, [[6, 6]]];
CREATE TABLE x (x INT[][], x INT[][], x INT[][]);
INSERT INTO x VALUES ([[1, 1, 1], [2]], [[3, 3], [4, 4, 4, 4], [5, 5]], [[6, 6]]);
INSERT INTO x VALUES ([[7, 7], [8, 8, 8]], [[9]], [[10, 10], [11, 11, 11]]);
INSERT INTO x VALUES ([[12, NULL]], [NULL, [13, 13, 13]], NULL);
SELECT [x, x, x] FROM x;
SELECT [[1, 1], ['a', 'a'], [ROW(2, 2), ROW(3, 3)]];
CREATE TABLE x (x INT[], x INT[], x INT[]);
INSERT INTO x SELECT [x, x, x], [x + 1, x + 1], [x + 2] FROM x AS x;
SELECT [x, x, x] FROM x WHERE x[1] = 1;
PRAGMA x;
CREATE TABLE x (x INT[]);
INSERT INTO x VALUES ([1, 2, 3]), ([4, 5, 6]);
CREATE TABLE x (x BOOLEAN[]);
INSERT INTO x VALUES ([TRUE, FALSE, TRUE]), ([FALSE, TRUE, FALSE]);
SELECT LIST_WHERE([0, 1, 2], [TRUE, FALSE, FALSE]);
SELECT LIST_WHERE(x, [TRUE, FALSE, TRUE]) FROM x;
SELECT LIST_WHERE(x, x) FROM x, x ORDER BY ALL;
SELECT LIST_WHERE([1, 2, 3], [TRUE, NULL, FALSE]);
SELECT LIST_WHERE([1, 2, 3], [TRUE, TRUE, FALSE, FALSE]);
SELECT LIST_WHERE([1, 2, 3], [TRUE, FALSE]);
CREATE TABLE x AS SELECT x % 4 AS x, LIST(x) AS x FROM x GROUP BY x % 4;
CREATE TABLE x AS SELECT x % 4 AS x, LIST(CAST((x % 2) AS BOOLEAN)) AS x FROM x GROUP BY x % 4;
SELECT x, LIST_WHERE(x, x) AS x FROM x, x;
SELECT LIST_WHERE([TRUE, FALSE, NULL, TRUE, TRUE, NULL], [TRUE, FALSE, TRUE, TRUE, TRUE, TRUE]);
SELECT LIST_WHERE([CAST(NULL AS BOOLEAN)], [TRUE]);
SELECT LIST_WHERE(['aa', 'a', 'cd', NULL, '42'], [TRUE, TRUE, FALSE, FALSE, FALSE]);
SELECT LIST_WHERE([CAST(NULL AS TEXT)], [TRUE]);
SELECT LIST_WHERE([CAST(NULL AS TEXT)], [TRUE]);
SELECT LIST_WHERE([CAST(NULL AS TEXT)], [TRUE]);
SELECT LIST_WHERE([CAST(NULL AS TEXT)], [TRUE]);
SELECT LIST_WHERE([CAST(NULL AS TEXT)], [TRUE]);
SELECT LIST_WHERE([CAST('2021-08-20' AS DATE)], [TRUE]);
SELECT LIST_WHERE([CAST('14:59:37' AS TIME)], [TRUE]);
SELECT LIST_WHERE([CAST('2021-08-20' AS TIMESTAMP)], [TRUE]);
SELECT LIST_WHERE([CAST('2021-08-20' AS TIMESTAMP_S)], [TRUE]);
SELECT LIST_WHERE([CAST('2021-08-20 00:00:00.123' AS TIMESTAMP_MS)], [TRUE]);
SELECT LIST_WHERE([CAST('2021-08-20 00:00:00.123456' AS TIMESTAMP_NS)], [TRUE]);
SELECT LIST_WHERE([CAST('14:59:37' AS TIMETZ)], [TRUE]);
SELECT LIST_WHERE([CAST('2021-08-20' AS TIMESTAMPTZ)], [TRUE]);
SELECT LIST_WHERE([INTERVAL '1' YEAR], [TRUE]);
SELECT LIST_WHERE([INTERVAL '1' YEAR], [TRUE]);
SELECT LIST_WHERE([CAST('{a: 1}' AS BLOB), CAST('{a: 3}' AS BLOB)], [TRUE, FALSE]);
SELECT LIST_WHERE([CAST(NULL AS BLOB)], [TRUE]);
CREATE TABLE x (x mood[]);
INSERT INTO x VALUES (['happy', 'sad']);
SELECT LIST_WHERE(x, [FALSE, TRUE]) FROM x;
SELECT LIST_WHERE([[1], [1, 2], NULL, [NULL], [], [1, 2, 3]], [TRUE, FALSE, FALSE, TRUE, TRUE, FALSE]);
SELECT LIST_WHERE([{'x': 1}, {'x': 5}, {'x': 3}], [TRUE, TRUE, TRUE]);
SELECT LIST_WHERE(CAST([1, 2, 3] AS INT[3]), CAST([TRUE, FALSE, TRUE] AS BOOLEAN[3]));
SELECT LIST_WHERE(ARRAY_VALUE('1', NULL), [TRUE, TRUE, TRUE]);
SELECT LIST_WHERE(ARRAY_VALUE('1', NULL), [TRUE, TRUE, FALSE]);
PRAGMA x;
CREATE TABLE x (x INT[]);
INSERT INTO x VALUES ([1, 2, 3]), ([4, 5, 6]);
CREATE TABLE x (x BOOLEAN);
INSERT INTO x VALUES (FALSE), (TRUE);
CREATE TABLE x (x INT[]);
INSERT INTO x VALUES ([]), (NULL);
SELECT LIST_ZIP([1, 2, 3]);
SELECT LIST_ZIP([1, 2, 3], [2, 3, 4], [3, 4, 5], []);
SELECT LIST_ZIP([1, 2, 3], [1, 2, 3]);
SELECT LIST_ZIP([1, 2, 3], [1, 2]);
SELECT LIST_ZIP(CAST([1, 2, 3] AS INT[3]), CAST([1, 2] AS INT[2]), TRUE);
SELECT LIST_ZIP(CAST([1, 2, 3] AS INT[3]), CAST([1, 2, 3] AS INT[3]));
SELECT LIST_ZIP(CAST([1, '2', 3] AS INT[]), CAST([1, 2, 3] AS INT[3]));
SELECT LIST_ZIP([1, 2], [1, 2, 3]);
SELECT LIST_ZIP([1, 2, 3], NULL);
SELECT LIST_ZIP([1, 2, 3], []);
SELECT LIST_ZIP([1, 2, 3], NULL, TRUE);
SELECT LIST_ZIP([1, 2, 3], [], TRUE);
SELECT LIST_ZIP([1, 2, 3], [2, 3, 4], [3, 4, 5], [], TRUE);
SELECT LIST_ZIP(x.x, x.x) AS x FROM x AS x, x AS x ORDER BY ALL;
SELECT LIST_ZIP(x.x, x.x, x.x) FROM x AS x, x AS x ORDER BY ALL;
SELECT LIST_ZIP([1, 2, 3], TRUE);
SELECT LIST_ZIP([1, 2, 3], [1, 2, 3], TRUE);
SELECT LIST_ZIP([1, 2, 3], [1, 2], TRUE);
SELECT LIST_ZIP([1, 2], [1, 2, 3], TRUE);
SELECT LIST_ZIP(x, x, x) FROM x, x, x ORDER BY ALL DESC;
CREATE TABLE x AS SELECT x % 4 AS x, LIST(x) AS x FROM x GROUP BY x % 4;
SELECT x, LIST_ZIP(x, x) AS x FROM x, x;
SELECT LIST_ZIP([1, 2, 3], [TRUE, FALSE, NULL], [{'x': 1}, {'x': 2}, {'x': 3}], ['a', 'b', 'c'], [CAST('2021-08-20' AS DATE), CAST('2021-08-21' AS DATE), CAST('2021-08-22' AS DATE)], [1.0, 2.0, 3.0], [NULL, NULL, NULL]);
SELECT LIST_ZIP([TRUE, FALSE, NULL]);
SELECT LIST_ZIP([CAST(NULL AS BOOLEAN), TRUE]);
SELECT LIST_ZIP(['aa', 'a']);
SELECT LIST_ZIP([CAST(NULL AS TEXT)]);
SELECT LIST_ZIP([CAST(NULL AS TEXT)]);
SELECT LIST_ZIP([CAST(NULL AS TEXT)]);
SELECT LIST_ZIP([CAST(NULL AS TEXT)]);
SELECT LIST_ZIP([CAST(NULL AS TEXT)]);
SELECT LIST_ZIP([CAST('2021-08-20' AS DATE)]);
SELECT LIST_ZIP([CAST('14:59:37' AS TIME)]) AS x, CAST(CAST(x AS TEXT) AS STRUCT("x" TIME)[]) AS x, x = x;
SELECT LIST_ZIP([CAST('2021-08-20' AS TIMESTAMP)]);
SELECT LIST_ZIP([CAST('2021-08-20' AS TIMESTAMP_S)]);
SELECT LIST_ZIP([CAST('2021-08-20 00:00:00.123' AS TIMESTAMP_MS)]);
SELECT LIST_ZIP([CAST('2021-08-20 00:00:00.123456' AS TIMESTAMP_NS)]);
SELECT LIST_ZIP([CAST('14:59:37' AS TIMETZ)]);
SELECT LIST_ZIP([CAST('2021-08-20' AS TIMESTAMPTZ)]);
SELECT LIST_ZIP([INTERVAL '1' YEAR]);
SELECT LIST_ZIP([INTERVAL '1' YEAR]);
SELECT LIST_ZIP([CAST('{a: 1}' AS BLOB), CAST('{a: 3}' AS BLOB)]);
SELECT LIST_ZIP([CAST('{a: 1' AS BLOB), CAST('{a: 3' AS BLOB)]) AS x, CAST(CAST(x AS TEXT) AS STRUCT(x BLOB)[]) AS x, x = x;
SELECT LIST_ZIP([CAST(NULL AS BLOB)]);
CREATE TABLE x (x mood[]);
INSERT INTO x VALUES (['happy', 'sad']);
SELECT LIST_ZIP(x) FROM x;
SELECT LIST_ZIP([[1], [1, 2], NULL]);
SELECT LIST_ZIP([{'x': 1}, {'x': 5}, {'x': 3}]);
SELECT LIST_ZIP('');
SELECT LIST_ZIP(3, 4);
SELECT LIST_ZIP(FALSE);
SELECT LIST_ZIP(TRUE);
PRAGMA x;
SELECT REPEAT([1], 10);
SELECT REPEAT([{'x': 1}], 5);
SELECT REPEAT([[1]], 10);
SELECT REPEAT([1, 2], 5);
SELECT REPEAT([[[], [], [NULL], NULL]], 3);
SELECT REPEAT(['hello', 'thisisalongstring'], 5);
SELECT REPEAT([], 10);
SELECT REPEAT([], -1);
SELECT REPEAT(CAST(NULL AS INT[]), 10);
SELECT REPEAT(REPEAT([1], 50), 50) = REPEAT([1], 2500);
SELECT REPEAT(x, 2) FROM x AS x;
SELECT REPEAT([1], 99999999999999999);
SELECT LIST_AGGR([NULL, 1, 2], 'any_value');
SELECT LIST_ANY_VALUE();
SELECT LIST_ANY_VALUE();
INSERT INTO x VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);
SELECT LIST_ANY_VALUE(x) FROM x;
SELECT LIST_ANY_VALUE(x) FROM x;
CREATE TABLE x AS SELECT LIST(CAST(NULLIF(x, 0) AS INT)) AS x, LIST(CAST('2021-08-20' AS DATE) + CAST(NULLIF(x, 0) AS INT)) AS x, LIST(CAST('2021-08-20' AS TIMESTAMP) + INTERVAL (NULLIF(x, 0)) HOUR) AS x, LIST(CAST('14:59:37' AS TIME) + INTERVAL (NULLIF(x, 0)) MINUTE) AS x, LIST(INTERVAL (NULLIF(x, 0)) SECOND) AS x FROM x AS x;
SELECT LIST_ANY_VALUE(x), LIST_ANY_VALUE(x), LIST_ANY_VALUE(x), LIST_ANY_VALUE(x) FROM x;
DROP TABLE x;
CREATE TABLE x AS SELECT LIST(CAST((CAST('2021-08-20' AS TIMESTAMP) + INTERVAL (NULLIF(x, 0)) HOUR) AS TIMESTAMPTZ)) AS x, LIST(CAST((CAST('14:59:37' AS TIME) + INTERVAL (NULLIF(x, 0)) MINUTE) AS TIMETZ)) AS x FROM x AS x;
SELECT LIST_ANY_VALUE(x), LIST_ANY_VALUE(x) FROM x;
DROP TABLE x;
CREATE TABLE x AS SELECT LIST(CAST(NULLIF(x, 0) AS INT)) AS x, LIST(CAST(NULLIF(x, 0) AS TEXT)) AS x, LIST([NULLIF(x, 0)]) AS x, LIST({'x': NULLIF(x, 0)}) AS x FROM x AS x;
SELECT LIST_ANY_VALUE(x), LIST_ANY_VALUE(x), LIST_ANY_VALUE(x) FROM x;
SELECT LIST_ANY_VALUE(x), LIST_ANY_VALUE(x), LIST_ANY_VALUE(x) FROM x;
SELECT LIST_ANY_VALUE(x), LIST_ANY_VALUE(x), LIST_ANY_VALUE(x) FROM x;
INSERT INTO x VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);
SELECT LIST_ANY_VALUE(x) FROM x;
CREATE TABLE x (x INT[]);
INSERT INTO x SELECT LIST(x) FROM x AS x;
SELECT LIST_APPROX_COUNT_DISTINCT([10]), LIST_APPROX_COUNT_DISTINCT(['hello']) FROM x;
SELECT LIST_APPROX_COUNT_DISTINCT(x), LIST_APPROX_COUNT_DISTINCT(['hello']) FROM x;
SELECT LIST_APPROX_COUNT_DISTINCT([]) FROM x;
INSERT INTO x VALUES ([]), (NULL), ([NULL]);
SELECT LIST_APPROX_COUNT_DISTINCT(x) FROM x;
CREATE TABLE IF NOT EXISTS x (x DATE[]);
INSERT INTO x VALUES (['2008-01-01', NULL, '2007-01-01', '2008-02-01', '2008-01-02', '2008-01-01', '2008-01-01', '2008-01-01']);
SELECT LIST_COUNT(x), LIST_APPROX_COUNT_DISTINCT(x) FROM x;
CREATE TABLE IF NOT EXISTS x (x TIMESTAMP[]);
INSERT INTO x VALUES (['2008-01-01 00:00:01', NULL, '2007-01-01 00:00:01', '2008-02-01 00:00:01', '2008-01-02 00:00:01', '2008-01-01 10:00:00', '2008-01-01 00:10:00', '2008-01-01 00:00:10']);
SELECT LIST_COUNT(x), LIST_APPROX_COUNT_DISTINCT(x) FROM x;
CREATE TABLE IF NOT EXISTS x (x TEXT[]);
INSERT INTO x VALUES (['Pedro', NULL, 'Pedro', 'Pedro', 'Mark', 'Mark', 'Mark', 'Hannes-Muehleisen', 'Hannes-Muehleisen']);
SELECT LIST_COUNT(x), LIST_APPROX_COUNT_DISTINCT(x) FROM x;
CREATE TABLE x (x INT[], x INT[]);
INSERT INTO x SELECT LIST(x), LIST(x % 10) FROM x AS x;
SELECT LIST_COUNT(x), LIST_APPROX_COUNT_DISTINCT(x), LIST_APPROX_COUNT_DISTINCT(x) FROM x;
DELETE FROM x;
INSERT INTO x SELECT LIST(x), NULL FROM x AS x WHERE x % 2 = 0;
INSERT INTO x SELECT LIST(x), NULL FROM x AS x WHERE x % 2 = 1;
SELECT LIST_APPROX_COUNT_DISTINCT(x) FROM x;
CREATE SEQUENCE x;
SELECT LIST_AVG([NEXTVAL('seq')]);
SELECT LIST_AVG([NEXTVAL('seq')]);
CREATE TABLE x (x INT[]);
INSERT INTO x VALUES ([1, 2, 3]), ([6, 3, 2, 5]), ([]), ([NULL]), (NULL), ([1, NULL, 2, 3]);
SELECT LIST_AVG(x) FROM x;
SELECT LIST_AVG();
CREATE TABLE x (x INT[], x INT128[]);
INSERT INTO x VALUES ([NULL, NULL], [NULL, NULL, NULL]);
SELECT LIST_AVG(x), LIST_AVG(x) FROM x;
CREATE TABLE x (x INT128[]);
INSERT INTO x (x) VALUES ([CAST('9007199254740992' AS INT128), CAST(1 AS INT128), CAST(0 AS INT128)]);
SELECT CAST(LIST_AVG(x) AS DOUBLE) - CAST('3002399751580331' AS DOUBLE) FROM x;
CREATE TABLE x (x DOUBLE[]);
INSERT INTO x (x) VALUES ([CAST('9007199254740992' AS DOUBLE), CAST(1 AS DOUBLE), CAST(1 AS DOUBLE), CAST(0 AS DOUBLE)]);
SELECT LIST_AGGR(x, 'favg') - CAST('2251799813685248.5' AS DOUBLE) FROM x;
CREATE TABLE x (x BIGINT[]);
INSERT INTO x VALUES ([1, 2, 3]);
SELECT LIST_SUM(x) FROM x;
SELECT LIST_AVG(x) FROM x;
DELETE FROM x;
INSERT INTO x VALUES ([1, 2, 3, 9223372036854775806]);
SELECT LIST_SUM(x) FROM x;
SELECT LIST_AVG(x) FROM x;
DELETE FROM x;
INSERT INTO x VALUES ([-1, -2, -3]);
SELECT LIST_SUM(x) FROM x;
SELECT LIST_AVG(x) FROM x;
DELETE FROM x;
INSERT INTO x VALUES ([-1, -2, -3, -9223372036854775806]);
SELECT LIST_SUM(x) FROM x;
SELECT LIST_AVG(x) FROM x;
CREATE TABLE x (x DECIMAL(18, 1)[]);
INSERT INTO x VALUES ([1, 2, 3]);
SELECT LIST_SUM(x) FROM x;
SELECT LIST_AVG(x) FROM x;
DELETE FROM x;
INSERT INTO x VALUES ([99999999999999999.9, 99999999999999999.9, 99999999999999999.9, 99999999999999999.9, 99999999999999999.9, 99999999999999999.9, 99999999999999999.9, 99999999999999999.9, 99999999999999999.9, 99999999999999999.9, 1.0, 2.0, 3.0]);
SELECT LIST_SUM(x) FROM x;
SELECT LIST_AVG(x) FROM x;
CREATE SEQUENCE x;
SELECT LIST_BIT_AND([NEXTVAL('seq')]);
SELECT LIST_BIT_AND([NEXTVAL('seq')]);
CREATE TABLE x (x INT[]);
INSERT INTO x VALUES ([3, 7, 15, 31, 3, 15]);
SELECT LIST_BIT_AND([]) FROM x;
INSERT INTO x VALUES ([]), (NULL), ([NULL]), ([3, 7, NULL, 15, 31, 3, 15, NULL]);
SELECT LIST_BIT_AND(x), LIST_BIT_AND([1, 1, 1, 1, 1, 1]), LIST_BIT_AND(NULL) FROM x;
SELECT LIST_BIT_AND();
CREATE SEQUENCE x;
SELECT LIST_BIT_OR([NEXTVAL('seq')]);
SELECT LIST_BIT_OR([NEXTVAL('seq')]);
CREATE TABLE x (x INT[]);
INSERT INTO x VALUES ([3, 7, 15, 31, 3, 15]);
SELECT LIST_BIT_OR([]) FROM x;
INSERT INTO x VALUES ([]), (NULL), ([NULL]), ([3, 7, NULL, 15, 31, 3, 15, NULL]);
SELECT LIST_BIT_OR(x), LIST_BIT_OR([1, 1, 1, 1, 1, 1]), LIST_BIT_OR(NULL) FROM x;
SELECT LIST_BIT_OR();
CREATE SEQUENCE x;
SELECT LIST_BIT_XOR([NEXTVAL('seq')]);
SELECT LIST_BIT_XOR([NEXTVAL('seq')]);
CREATE TABLE x (x INT[]);
INSERT INTO x VALUES ([3, 7, 15, 31, 3, 15]);
SELECT LIST_BIT_XOR([]) FROM x;
INSERT INTO x VALUES ([]), (NULL), ([NULL]), ([3, 7, NULL, 15, 31, 3, 15, NULL]);
SELECT LIST_BIT_XOR(x), LIST_BIT_XOR([1, 1, 1, 1, 1, 1]), LIST_BIT_XOR(NULL) FROM x;
SELECT LIST_BIT_XOR();
SELECT LIST_BOOL_OR();
SELECT LIST_BOOL_AND();
CREATE TABLE x (x BOOLEAN[]);
INSERT INTO x SELECT LIST(TRUE) FROM x AS x;
INSERT INTO x SELECT LIST(FALSE) FROM x AS x;
INSERT INTO x VALUES ([TRUE, FALSE]);
INSERT INTO x VALUES ([]), ([NULL]), (NULL), ([NULL, TRUE, FALSE, NULL]);
SELECT LIST_BOOL_OR(x) FROM x;
SELECT LIST_BOOL_AND(x) FROM x;
SELECT LIST_COUNT([1, 2, 3]);
SELECT LIST_COUNT([1]) FROM x;
CREATE TABLE x (x INT[]);
INSERT INTO x VALUES ([1, 2]), ([NULL]), (NULL), ([]), ([3, 4, 5, 6, 7]), ([1, 2, NULL, 1, NULL]);
SELECT LIST_COUNT(x) FROM x;
SELECT LIST_COUNT();
SELECT LIST_ENTROPY();
SELECT LIST_ENTROPY([1]);
CREATE TABLE x (x INT[]);
INSERT INTO x VALUES ([0, 1, 1, 1, 4, 0, 3, 3, 2, 2, 4, 4, 2, 4, 0, 0, 0, 1, 2, 3, 4, 2, 3, 3, 1]);
INSERT INTO x VALUES ([]), ([NULL]), (NULL), ([0, 1, 1, 1, 4, NULL, 0, 3, 3, 2, NULL, 2, 4, 4, 2, 4, 0, 0, 0, 1, NULL, 2, 3, 4, 2, 3, 3, 1]);
SELECT LIST_ENTROPY(x) FROM x;
CREATE TABLE x (x INT[]);
INSERT INTO x SELECT LIST(2) FROM x AS x;
SELECT LIST_ENTROPY(x) FROM x;
CREATE TABLE x (x INT[]);
INSERT INTO x VALUES ([0, 4, 0, 2, 2, 4, 4, 2, 4, 0, 0, 0, 2, 4, 2]);
INSERT INTO x VALUES ([1, 1, 1, 3, 3, 1, 3, 3, 3, 1]);
SELECT LIST_ENTROPY(x) FROM x;
CREATE TABLE x (x TEXT[]);
INSERT INTO x VALUES (['pedro', 'pedro', 'pedro', 'hannes', 'hannes', 'mark', NULL]);
SELECT LIST_ENTROPY(x) FROM x;
SELECT LIST_AGGR([1, 2], 'arbitrary');
SELECT LIST_FIRST();
SELECT LIST_FIRST();
INSERT INTO x VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);
SELECT LIST_FIRST(x) FROM x;
SELECT LIST_FIRST(x) FROM x;
CREATE TABLE x AS SELECT LIST(CAST(x AS INT)) AS x, LIST(CAST('2021-08-20' AS DATE) + CAST(x AS INT)) AS x, LIST(CAST('2021-08-20' AS TIMESTAMP) + INTERVAL (x) HOUR) AS x, LIST(CAST('14:59:37' AS TIME) + INTERVAL (x) MINUTE) AS x, LIST(INTERVAL (x) SECOND) AS x FROM x AS x;
SELECT LIST_FIRST(x), LIST_FIRST(x), LIST_FIRST(x), LIST_FIRST(x) FROM x;
DROP TABLE x;
CREATE TABLE x AS SELECT LIST(CAST((CAST('2021-08-20' AS TIMESTAMP) + INTERVAL (x) HOUR) AS TIMESTAMPTZ)) AS x, LIST(CAST((CAST('14:59:37' AS TIME) + INTERVAL (x) MINUTE) AS TIMETZ)) AS x FROM x AS x;
SELECT LIST_FIRST(x), LIST_FIRST(x) FROM x;
DROP TABLE x;
CREATE TABLE x AS SELECT LIST(CAST(x AS INT)) AS x, LIST(CAST(x AS TEXT)) AS x, LIST([x]) AS x, LIST({'x': x}) AS x FROM x AS x;
SELECT LIST_FIRST(x), LIST_FIRST(x), LIST_FIRST(x) FROM x;
SELECT LIST_FIRST(x), LIST_FIRST(x), LIST_FIRST(x) FROM x;
SELECT LIST_FIRST(x), LIST_FIRST(x), LIST_FIRST(x) FROM x;
INSERT INTO x VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);
SELECT LIST_FIRST(x) FROM x;
CREATE TABLE x AS SELECT LIST(2) AS x FROM x AS x;
SELECT LIST_HISTOGRAM(x) FROM x;
SELECT LIST_HISTOGRAM([1]);
CREATE TABLE x (x INT[]);
INSERT INTO x VALUES ([1, 1, 2, 2, 2, 3, 5]), ([1, 2, 3, 4, 5, 6, NULL]), ([]), (NULL), ([NULL]);
SELECT LIST_HISTOGRAM(x) FROM x;
CREATE TABLE x (x TEXT[]);
INSERT INTO x VALUES (['pedro', 'pedro', 'pedro', 'hannes', 'hannes', 'mark', NULL, 'Hubert Blaine Wolfeschlegelsteinhausenbergerdorff Sr.']);
SELECT LIST_HISTOGRAM(x) FROM x;
SELECT LIST_HISTOGRAM();
SELECT LIST_HISTOGRAM([CAST('2021-08-20' AS TIMESTAMP)]);
SELECT LIST_HISTOGRAM([CAST('2021-08-20' AS TIMESTAMP_S)]);
SELECT LIST_HISTOGRAM([CAST('2021-08-20' AS TIMESTAMP_MS)]);
SELECT LIST_HISTOGRAM([CAST('2021-08-20' AS TIMESTAMP_NS)]);
SELECT LIST_HISTOGRAM([CAST('2021-08-20' AS TIMESTAMPTZ)]);
SELECT LIST_HISTOGRAM([CAST('2022-01-02' AS DATE)]);
SELECT LIST_HISTOGRAM([CAST('15:00:07' AS TIME)]);
SELECT LIST_HISTOGRAM([CAST('15:00:07' AS TIMETZ)]);
SELECT LIST_HISTOGRAM([INTERVAL '1' YEAR]);
PRAGMA x;
WITH x AS (SELECT * FROM (VALUES (0.0), (9.9)) AS x) SELECT * FROM x;
CREATE TABLE x (x INT128[]);
INSERT INTO x VALUES ([NULL, 1, 2]), (NULL), ([]), ([NULL]), ([1, 2, 3]);
SELECT LIST_FIRST(x), LIST_LAST(x), LIST_SUM(x) FROM x;
DELETE FROM x;
INSERT INTO x VALUES ([42.0, 1267650600228229401496703205376, -439847238974238975238975, '-12']);
SELECT LIST_MIN(x), LIST_MAX(x), LIST_SUM(x), LIST_FIRST(x), LIST_LAST(x) FROM x;
SELECT LIST_AGGR([1], 2);
SELECT LIST_AGGR([1], TRUE);
SELECT LIST_AGGR([1], NULL);
SELECT LIST_AGGR('${func_name}');
SELECT LIST_AGGR(*, '${func_name}');
SELECT LIST_AGGR('hello', '${func_name}');
SELECT LIST_AGGR(1, 2, '${func_name}');
SELECT LIST_AGGR(1, 2, '${func_name}');
SELECT LIST_AGGR([1, 2, NULL], 'count_star');
SELECT LIST_AGGR([1, 2, NULL], 'corr');
SELECT LIST_AGGR([1, 2, NULL], 'covar_pop');
SELECT LIST_AGGR([1, 2, NULL], 'covar_samp');
SELECT LIST_AGGR([1, 2, NULL], 'regr_intercept');
SELECT LIST_AGGR([1, 2, NULL], 'regr_sxy');
SELECT LIST_AGGR([1, 2, NULL], 'regr_sxx');
SELECT LIST_AGGR([1, 2, NULL], 'regr_syy');
SELECT LIST_AGGR([1, 2, NULL], 'regr_r2');
SELECT LIST_AGGR([1, 2, NULL], 'regr_slope');
SELECT LIST_AGGR([1, 2, NULL], 'regr_count');
SELECT LIST_AGGR([1, 2, NULL], 'regr_avgy');
SELECT LIST_AGGR([1, 2, NULL], 'regr_avgx');
SELECT LIST_AGGR([1, 2, NULL], 'reservoir_quantile');
SELECT LIST_AGGR([1, 2, NULL], 'approx_quantile');
SELECT LIST_AGGR([1, 2, NULL], 'quantile');
SELECT LIST_AGGR([1, 2, NULL], 'quantile_cont');
SELECT LIST_AGGR([1, 2, NULL], 'quantile_disc');
SELECT LIST_AGGR([1, 2, NULL], 'arg_max');
SELECT LIST_AGGR([1, 2, NULL], 'max_by');
SELECT LIST_AGGR([1, 2, NULL], 'argmax');
SELECT LIST_AGGR([1, 2, NULL], 'arg_min');
SELECT LIST_AGGR([1, 2, NULL], 'min_by');
SELECT LIST_AGGR([1, 2, NULL], 'argmin');
SELECT LIST_KURTOSIS([1]);
SELECT LIST_KURTOSIS([0, 0, 0, 0, 0, 0]);
SELECT LIST_KURTOSIS([2e304, 2e305, 2e306, 2e307]);
CREATE TABLE x (x INT[]);
INSERT INTO x VALUES ([1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), ([10, 10, 10, 10, 20, 20, 25, 30, 30, 30, 30]), ([NULL, 11, 15, 18, 22, 25, NULL, 35, 40, 50, 51]), (NULL), ([]), ([NULL]);
SELECT LIST_KURTOSIS(x) FROM x;
SELECT LIST_KURTOSIS_POP(x) FROM x;
SELECT LIST_KURTOSIS();
SELECT LIST_LAST();
SELECT LIST_LAST();
INSERT INTO x VALUES (NULL), ([NULL]), ([]), ([1, 2, NULL]);
SELECT LIST_LAST(x) FROM x;
SELECT LIST_LAST(x) FROM x;
CREATE TABLE x AS SELECT LIST(CAST(x AS INT)) AS x, LIST(CAST('2021-08-20' AS DATE) + CAST(x AS INT)) AS x, LIST(CAST('2021-08-20' AS TIMESTAMP) + INTERVAL (x) HOUR) AS x, LIST(CAST('14:59:37' AS TIME) + INTERVAL (x) MINUTE) AS x, LIST(INTERVAL (x) SECOND) AS x FROM x AS x;
SELECT LIST_LAST(x), LIST_LAST(x), LIST_LAST(x), LIST_LAST(x) FROM x;
DROP TABLE x;
CREATE TABLE x AS SELECT LIST(CAST((CAST('2021-08-20' AS TIMESTAMP) + INTERVAL (x) HOUR) AS TIMESTAMPTZ)) AS x, LIST(CAST((CAST('14:59:37' AS TIME) + INTERVAL (x) MINUTE) AS TIMETZ)) AS x FROM x AS x;
SELECT LIST_LAST(x), LIST_LAST(x) FROM x;
DROP TABLE x;
CREATE TABLE x AS SELECT LIST(CAST(x AS INT)) AS x, LIST(CAST(x AS TEXT)) AS x, LIST([x]) AS x, LIST({'x': x}) AS x FROM x AS x;
SELECT LIST_LAST(x), LIST_LAST(x), LIST_LAST(x) FROM x;
SELECT LIST_LAST(x), LIST_LAST(x), LIST_LAST(x) FROM x;
SELECT LIST_LAST(x), LIST_LAST(x), LIST_LAST(x) FROM x;
INSERT INTO x VALUES (NULL), ([NULL]), ([]), ([1, 2, NULL]);
SELECT LIST_LAST(x) FROM x;
SELECT LIST_MAD([1]);
CREATE TABLE x AS SELECT LIST(1) AS x FROM x AS x;
SELECT LIST_MAD(x) FROM x;
SELECT LIST_MAD(x) FROM x;
SELECT LIST_MAD(x) FROM x;
SELECT LIST_MAD(x) FROM x;
SELECT LIST_MAD(x) FROM x;
SELECT LIST_MAD(x) FROM x;
SELECT LIST_MAD(x) FROM x;
CREATE TABLE x AS SELECT LIST(CAST((CAST('2018-01-01' AS DATE) + INTERVAL (x) DAY) AS DATE)) AS x FROM x AS x;
SELECT LIST_MAD(x) FROM x;
CREATE TABLE x AS SELECT LIST(CAST('2018-01-01' AS TIMESTAMP) + INTERVAL (x) HOUR) AS x FROM x AS x;
SELECT LIST_MAD(x) FROM x;
CREATE TABLE x AS SELECT LIST(CAST('00:00:00' AS TIME) + INTERVAL (x) SECOND) AS x FROM x AS x;
SELECT LIST_MAD(x) FROM x;
SELECT LIST_MAD(x) FROM (VALUES ([CAST('294247-01-10' AS DATE), CAST('290309-12-22 (BC)' AS DATE)])) AS x;
SELECT LIST_MAD(x) FROM (VALUES ([CAST('294247-01-10 04:00:54.775806' AS TIMESTAMP), CAST('290309-12-22 (BC) 00:00:00' AS TIMESTAMP)])) AS x;
SELECT LIST_MAD(x) FROM (VALUES ([CAST('23:59:59.999999' AS TIME), CAST('00:00:00' AS TIME)])) AS x;
SELECT LIST_MAD(x) FROM (VALUES ([CAST('23:59:59.999999' AS TIME), CAST('00:00:00' AS TIME)])) AS x;
SELECT LIST_MAD(x) FROM (VALUES ([CAST('23:59:59.999999' AS TIME), CAST('00:00:00' AS TIME)])) AS x;
SELECT LIST_MAD([INTERVAL '1' YEAR]);
SELECT LIST_MAD([CAST(NULL AS INTERVAL)]);
SELECT LIST_MAD(x) FROM (VALUES ([CAST('127' AS DECIMAL(3, 0)), CAST('-128' AS DECIMAL(3, 0))])) AS x;
SELECT LIST_MAD(x) FROM (VALUES ([CAST('32767' AS DECIMAL(5, 0)), CAST('-32768' AS DECIMAL(5, 0))])) AS x;
SELECT LIST_MAD(x) FROM (VALUES ([CAST('2147483647' AS DECIMAL(10, 0)), CAST('-2147483648' AS DECIMAL(10, 0))])) AS x;
SELECT LIST_MAX();
SELECT LIST_MAX();
INSERT INTO x VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);
SELECT LIST_MAX(x) FROM x;
SELECT LIST_MAX(x) FROM x;
CREATE TABLE x AS SELECT LIST(CAST(x AS INT)) AS x, LIST(CAST('2021-08-20' AS DATE) + CAST(x AS INT)) AS x, LIST(CAST('2021-08-20' AS TIMESTAMP) + INTERVAL (x) HOUR) AS x, LIST(CAST('14:59:37' AS TIME) + INTERVAL (x) MINUTE) AS x, LIST(INTERVAL (x) SECOND) AS x FROM x AS x;
SELECT LIST_MAX(x), LIST_MAX(x), LIST_MAX(x), LIST_MAX(x) FROM x;
DROP TABLE x;
CREATE TABLE x AS SELECT LIST(CAST((CAST('2021-08-20' AS TIMESTAMP) + INTERVAL (x) HOUR) AS TIMESTAMPTZ)) AS x, LIST(CAST((CAST('14:59:37' AS TIME) + INTERVAL (x) MINUTE) AS TIMETZ)) AS x FROM x AS x;
SELECT LIST_MAX(x), LIST_MAX(x) FROM x;
DROP TABLE x;
CREATE TABLE x AS SELECT LIST(CAST(x AS INT)) AS x, LIST(CAST(x AS TEXT)) AS x, LIST([x]) AS x, LIST({'x': x}) AS x FROM x AS x;
SELECT LIST_MAX(x), LIST_MAX(x), LIST_MAX(x) FROM x;
SELECT LIST_MAX(x), LIST_MAX(x), LIST_MAX(x) FROM x;
SELECT LIST_MAX(x), LIST_MAX(x), LIST_MAX(x) FROM x;
INSERT INTO x VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);
SELECT LIST_MAX(x) FROM x;
SELECT LIST_MIN();
SELECT LIST_MIN();
INSERT INTO x VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);
SELECT LIST_MIN(x) FROM x;
SELECT LIST_MIN(x) FROM x;
CREATE TABLE x AS SELECT LIST(CAST(x AS INT)) AS x, LIST(CAST('2021-08-20' AS DATE) + CAST(x AS INT)) AS x, LIST(CAST('2021-08-20' AS TIMESTAMP) + INTERVAL (x) HOUR) AS x, LIST(CAST('14:59:37' AS TIME) + INTERVAL (x) MINUTE) AS x, LIST(INTERVAL (x) SECOND) AS x FROM x AS x;
SELECT LIST_MIN(x), LIST_MIN(x), LIST_MIN(x), LIST_MIN(x) FROM x;
DROP TABLE x;
CREATE TABLE x AS SELECT LIST(CAST((CAST('2021-08-20' AS TIMESTAMP) + INTERVAL (x) HOUR) AS TIMESTAMPTZ)) AS x, LIST(CAST((CAST('14:59:37' AS TIME) + INTERVAL (x) MINUTE) AS TIMETZ)) AS x FROM x AS x;
SELECT LIST_MIN(x), LIST_MIN(x) FROM x;
DROP TABLE x;
CREATE TABLE x AS SELECT LIST(CAST(x AS INT)) AS x, LIST(CAST(x AS TEXT)) AS x, LIST([x]) AS x, LIST({'x': x}) AS x FROM x AS x;
SELECT LIST_MIN(x), LIST_MIN(x), LIST_MIN(x) FROM x;
SELECT LIST_MIN(x), LIST_MIN(x), LIST_MIN(x) FROM x;
SELECT LIST_MIN(x), LIST_MIN(x), LIST_MIN(x) FROM x;
INSERT INTO x VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);
SELECT LIST_MIN(x) FROM x;
PRAGMA x;
PRAGMA x;
SELECT MIN({'x': "x"}).x IS NOT DISTINCT FROM (SELECT "x" FROM x ORDER BY "x" LIMIT 1) FROM x WHERE NOT x IS NULL;
SELECT MAX({'x': "x"}).x IS NOT DISTINCT FROM (SELECT "x" FROM x ORDER BY "x" DESC LIMIT 1) FROM x WHERE NOT x IS NULL;
PRAGMA x;
CREATE TABLE x AS SELECT {'x': x} AS x FROM x AS x;
SELECT MIN(x), MAX(x) FROM x;
INSERT INTO x VALUES ({'x': 99999999});
SELECT MIN(x), MAX(x) FROM x;
INSERT INTO x VALUES ({'x': -9223372036854775808}), ({'x': 9223372036854775807});
SELECT MIN(x), MAX(x) FROM x;
INSERT INTO x VALUES ({'x': NULL}), (NULL);
SELECT MIN(x), MAX(x) FROM x;
CREATE TABLE x AS SELECT {'x': CONCAT('long_prefix_', x)} AS x FROM x AS x;
SELECT MIN(x), MAX(x) FROM x;
INSERT INTO x VALUES ({'x': CHR(0)}), ({'x': 'zzzzz' || CHR(0)});
SELECT MIN(x), MAX(x) FROM x;
CREATE TABLE x AS SELECT {'x': CAST(CONCAT('long_prefix_', '\x', 16 + x % 239) AS BLOB)} AS x FROM x AS x;
SELECT MIN(x), MAX(x) FROM x;
INSERT INTO x VALUES ({'x': CAST('\x00z\x00\x00z\x00zzzz\x00' AS BLOB)}), ({'x': CAST('zzzzzz\x01\x01\x01\x00\x01\x01\x00' AS BLOB)});
SELECT MIN(x), MAX(x) FROM x;
CREATE TABLE x AS SELECT {'x': (1000 - x) // 5, 'x': x} AS x FROM x AS x;
SELECT MIN(x), MAX(x) FROM x;
CREATE TABLE x AS SELECT CASE WHEN x < 500 THEN [x, x + 1, x + 2] ELSE [x, 0] END AS x FROM x AS x;
SELECT MIN(x), MAX(x) FROM x;
INSERT INTO x VALUES ([]), (NULL), ([NULL, NULL, NULL]);
SELECT MIN(x), MAX(x) FROM x;
CREATE TABLE x AS SELECT CASE WHEN x < 500 THEN [{'x': x}, {'x': x + 1}, {'x': x + 2}] ELSE [{'x': x}, {'x': 0}] END AS x FROM x AS x;
SELECT MIN(x), MAX(x) FROM x;
INSERT INTO x VALUES ([{'x': NULL}, {'x': 100}, NULL, {'x': NULL}]);
SELECT MIN(x), MAX(x) FROM x;
INSERT INTO x VALUES ([]), (NULL), ([NULL, NULL, NULL]);
SELECT MIN(x), MAX(x) FROM x;
CREATE TABLE x AS SELECT [NULL, {'x': (1000 - x) // 5, 'x': x}, NULL] AS x FROM x AS x;
SELECT MIN(x), MAX(x) FROM x;
INSERT INTO x VALUES ([{'x': NULL, 'x': 42}]), ([NULL, NULL, {'x': 84, 'x': NULL}]);
SELECT MIN(x), MAX(x) FROM x;
CREATE TABLE x AS SELECT {'x': CASE WHEN x < 500 THEN [x, x + 1, x + 2] ELSE [x, 0] END} AS x FROM x AS x;
SELECT MIN(x), MAX(x) FROM x;
INSERT INTO x VALUES ({'x': []}), (NULL), ({'x': [NULL, NULL, NULL]});
SELECT MIN(x), MAX(x) FROM x;
INSERT INTO x VALUES ({'x': NULL});
SELECT MAX(x) FROM x;
CREATE TABLE x AS SELECT CAST((CASE WHEN x < 500 THEN [x, x + 1, x + 2] ELSE [x, 0, 0] END) AS BIGINT[3]) AS x FROM x AS x;
SELECT MIN(x), MAX(x) FROM x;
INSERT INTO x VALUES (NULL), ([NULL, NULL, NULL]);
SELECT MIN(x), MAX(x) FROM x;
CREATE TABLE x (x REAL);
INSERT INTO x VALUES ('0'), ('-3.4e38'), ('3.4e38'), ('nan'), ('inf'), ('-inf');
SELECT x, (SELECT MIN({'x': x}) FROM (VALUES (x)) AS x) FROM x;
CREATE TABLE x (x DOUBLE);
INSERT INTO x VALUES ('0'), ('-1e308'), ('1e308'), ('nan'), ('inf'), ('-inf');
SELECT x, (SELECT MIN({'x': x}) FROM (VALUES (x)) AS x) FROM x;
SELECT LIST_MODE();
CREATE TABLE x AS SELECT LIST(2) AS x FROM x AS x;
SELECT LIST_MODE(x) FROM x;
CREATE TABLE x (x TEXT[]);
INSERT INTO x VALUES (['pedro', 'pedro', 'pedro', 'hannes', 'hannes', 'mark', NULL]);
SELECT LIST_MODE(x) FROM x;
CREATE TABLE x (x DATE[]);
INSERT INTO x VALUES (['2021-05-02', '2021-05-02', '2021-05-02', '2020-02-29', '2020-02-29', '2004-09-01', NULL]);
SELECT LIST_MODE(x) FROM x;
CREATE TABLE x (x TIME[]);
INSERT INTO x VALUES (['12:11:49.5', '12:11:49.5', '12:11:49.5', '06:30:00', '06:30:00', '21:15:22', NULL]);
SELECT LIST_MODE(x) FROM x;
CREATE TABLE x (x TIMESTAMP[]);
INSERT INTO x VALUES (['2021-05-02 12:11:49.5', '2021-05-02 12:11:49.5', '2021-05-02 12:11:49.5', '2020-02-29 06:30:00', '2020-02-29 06:30:00', '2004-09-01 21:15:22', NULL]);
SELECT LIST_MODE(x) FROM x;
CREATE TABLE x (x INTERVAL[]);
INSERT INTO x VALUES ([INTERVAL '5 months 2 days 12 hours 11 minutes 49 seconds', INTERVAL '5 months 2 days 12 hours 11 minutes 49 seconds', INTERVAL '5 months 2 days 12 hours 11 minutes 49 seconds', INTERVAL '2 months 29 days 6 hours 30 minutes', INTERVAL '2 months 29 days 6 hours 30 minutes', INTERVAL '9 months 1 day 21 hours 15 minutes 22 seconds', NULL]);
SELECT LIST_MODE(x) FROM x;
CREATE TABLE x (x INT128[]);
INSERT INTO x VALUES ([5, 5, 5, 2, 2, 1, NULL]);
SELECT LIST_MODE(x) FROM x;
CREATE TABLE x (x DECIMAL(10, 2)[]);
INSERT INTO x VALUES ([10, 10, 20, 21]), ([20, 20, 25, 30]), ([NULL]), ([]), (NULL);
SELECT LIST_MODE(x) FROM x;
SELECT LIST_MIN(LIST_CONCAT([1, 2], [-1]));
SELECT LIST_MIN(LIST_AGGR([1, 2], 'list'));
CREATE TABLE x (x INT[], x INT[]);
INSERT INTO x VALUES ([1, 2, 3], [4]), ([NULL, 1, -4, NULL], [NULL]), (NULL, NULL), ([NULL], [-4]), ([], []);
SELECT LIST_LAST(LIST_CONCAT(x, x)) FROM x;
SELECT LIST_CONCAT(LIST(LIST_LAST(x)), LIST(LIST_FIRST(x))) FROM x;
SELECT ARRAY_AGGREGATE([1, 2], 'min');
SELECT ARRAY_AGGR([1, 2], 'min');
SELECT LIST_AGGREGATE([1, 2], 'min');
SELECT LIST_AGGR(NULL, '${func_name}');
SELECT LIST_AGGR([NULL], '${func_name}');
SELECT LIST_AGGR([NULL], '${func_name}');
SELECT LIST_AGGR([NULL], '${func_name}');
SELECT LIST_AGGR([], '${func_name}');
SELECT * FROM (SELECT LIST_AGGR(NULL, '${func_name}'));
SELECT LIST_AGGR([], '${func_name}');
SELECT LIST_AGGR([], '${func_name}') WHERE 1 = 0;
SELECT LIST_PRODUCT();
CREATE TABLE x (x INT[]);
INSERT INTO x VALUES ([1, 2, 4]), (NULL), ([]), ([NULL]), ([1, 2, NULL, 4, NULL]);
SELECT LIST_PRODUCT(x) FROM x;
CREATE TABLE x AS SELECT LIST(2) AS x FROM x AS x;
SELECT LIST_PRODUCT(x) FROM x;
DROP TABLE x;
CREATE TABLE x AS SELECT LIST(2) AS x FROM x AS x;
SELECT LIST_PRODUCT(x) FROM x;
SELECT LIST_SEM();
SELECT LIST_SEM([1]);
CREATE TABLE x (x INT[], x DECIMAL(10, 2)[], x DECIMAL(10, 2)[]);
INSERT INTO x VALUES ([1, 2, 2, 2, 2], [10, 10, 20, 25, 30], [NULL, 11, 22, NULL, 35]);
SELECT LIST_SEM(x), LIST_SEM(x), LIST_SEM(x) FROM x;
CREATE TABLE x (x INT[]);
INSERT INTO x VALUES ([1, 2, 2, 2, 2]), ([1, 2, NULL, 2, 2, NULL, 2]), ([]), ([NULL]), (NULL);
SELECT LIST_SEM(x) FROM x;
SELECT LIST_SKEWNESS();
SELECT LIST_SKEWNESS([1]);
CREATE TABLE x AS SELECT LIST(10) AS x FROM x AS x;
SELECT LIST_SKEWNESS(x) FROM x;
SELECT LIST_SKEWNESS([1, 2]);
SELECT LIST_SKEWNESS([-2e307, 0, 2e307]);
CREATE TABLE x (x INT[], x DECIMAL(10, 2)[], x DECIMAL(10, 2)[]);
INSERT INTO x VALUES ([1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [10, 10, 10, 10, 20, 20, 25, 30, 30, 30, 30], [NULL, 11, 15, 18, 22, 25, NULL, 35, 40, 50, 51]), ([], NULL, [NULL]);
SELECT LIST_SKEWNESS(x), LIST_SKEWNESS(x), LIST_SKEWNESS(x) FROM x;
CREATE TABLE x (x DECIMAL(10, 2)[]);
INSERT INTO x VALUES ([NULL, 11, 15, 18]), ([22, 25]), ([NULL]), ([35, 40, 50, 51]);
SELECT LIST_SKEWNESS(x) FROM x;
SELECT LIST_STRING_AGG();
SELECT LIST_STRING_AGG(['a', ',']);
SELECT LIST_STRING_AGG(['a']);
CREATE TABLE x (x TEXT[]);
INSERT INTO x VALUES (['a', ',']), ([NULL, ',']), (['a', NULL]), ([NULL, NULL]), (NULL), ([]), ([NULL]);
SELECT LIST_STRING_AGG(x) FROM x;
CREATE TABLE x (x INT[], x TEXT[], x TEXT[]);
INSERT INTO x VALUES ([1, 1, 2, 2, 2, 3, 4, 4, 4], ['a', 'b', 'i', NULL, 'j', 'p', 'x', 'y', 'z'], ['/', '-', '/', '-', '+', '/', '/', '-', '+']);
SELECT LIST_STRING_AGG(x), LIST_STRING_AGG(x), LIST_STRING_AGG(CAST(x AS TEXT[])) FROM x;
SELECT LIST_STRING_AGG(x) FROM x WHERE x > [100];
SELECT LIST_STRING_AGG([1, 2]);
SELECT LIST_STRING_AGG(CAST([1, 2] AS TEXT[]));
SELECT LIST_AGGR(['a'], 'group_concat');
CREATE TABLE x AS SELECT LIST('a') AS x FROM x AS x, x AS x;
SELECT LIST_COUNT(x), LIST_COUNT(x) FROM x;
SELECT LIST_STRING_AGG(x) FROM x;
SELECT LIST_SUM([2, 2]);
CREATE TABLE x (x INT[]);
INSERT INTO x SELECT LIST(x) FROM x AS x;
INSERT INTO x SELECT LIST(x) FROM x AS x;
INSERT INTO x SELECT LIST(x) FROM x AS x;
INSERT INTO x VALUES (NULL), ([NULL]), ([]);
SELECT LIST_SUM(x) FROM x;
CREATE TABLE x (x DOUBLE[]);
INSERT INTO x (x) VALUES ([CAST('9007199254740992' AS DOUBLE), CAST(1 AS DOUBLE), CAST(1 AS DOUBLE), CAST(0 AS DOUBLE)]);
SELECT LIST_AGGR(x, 'fsum') FROM x;
SELECT LIST_AGGR(x, 'sumKahan') FROM x;
SELECT LIST_AGGR(x, 'kahan_sum') FROM x;
CREATE TABLE x (x BIGINT[]);
INSERT INTO x SELECT LIST(x) FROM x AS x;
SELECT LIST_SUM(x) FROM x;
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x SELECT CASE WHEN x % 3 = 0 THEN NULL ELSE x END AS x FROM x AS x;
SELECT SUM(x > 500), SUM(x = 1), SUM(x IS NULL) FROM x;
SELECT COUNT_IF(x > 500), COUNT_IF(x = 1), COUNT_IF(x IS NULL) FROM x;
PRAGMA x;
SELECT SUM_NO_OVERFLOW(42);
SELECT SUM_NO_OVERFLOW(42.5);
CREATE TABLE x (x UINT128[]);
INSERT INTO x VALUES ([NULL, 1, 2]), (NULL), ([]), ([NULL]), ([1, 2, 3]);
SELECT LIST_FIRST(x), LIST_LAST(x), LIST_SUM(x) FROM x;
DELETE FROM x;
INSERT INTO x VALUES ([42.0, 1267650600228229401496703205376, 0, '1']);
SELECT LIST_MIN(x), LIST_MAX(x), LIST_SUM(x), LIST_FIRST(x), LIST_LAST(x) FROM x;
CREATE TABLE x (x INT[]);
INSERT INTO x VALUES ([42, 43, 42, 1000, NULL, NULL]), ([1, 1, 2, 2, 1, 3]), ([]), ([NULL]), (NULL);
SELECT LIST_STDDEV_SAMP([1]);
SELECT LIST_VAR_SAMP([1]);
SELECT ROUND(LIST_STDDEV_SAMP(x), 1) FROM x;
SELECT LIST_SUM(x), ROUND(LIST_STDDEV_SAMP(x), 1), LIST_MIN(x) FROM x;
SELECT ROUND(LIST_STDDEV_POP(x), 1) FROM x;
SELECT LIST_SUM(x), ROUND(LIST_STDDEV_POP(x), 1), LIST_MIN(x) FROM x;
SELECT ROUND(LIST_VAR_SAMP(x), 1) FROM x;
SELECT ROUND(LIST_AGGR(x, 'variance'), 1) FROM x;
SELECT LIST_SUM(x), ROUND(LIST_VAR_SAMP(x), 1), LIST_MIN(x) FROM x;
SELECT ROUND(LIST_VAR_POP(x), 1) FROM x;
SELECT LIST_SUM(x), ROUND(LIST_VAR_POP(x), 1), LIST_MIN(x) FROM x;
SELECT ROUND(LIST_AGGR(x, 'stddev'), 1) FROM x;
SELECT LIST_AGGR([0], 'stddev');
SELECT LIST_AGGR([0, 0], 'stddev');
SELECT LIST_AGGR([1e301, -1e301], 'stddev');
SELECT LIST_VAR_SAMP([1e301, -1e301]);
SELECT LIST_VAR_POP([1e301, -1e301]);
SELECT LIST_STDDEV_SAMP();
CREATE TABLE x (x DOUBLE[]);
INSERT INTO x VALUES ([1E200, 0]);
SELECT LIST_STDDEV_POP(x) FROM x;
PRAGMA x;
SELECT LIST_TRANSFORM([10], x -> SUM(1) + x);
SELECT LIST_FILTER([10], x -> SUM(1) > 0);
SELECT LIST_TRANSFORM([NULL, CAST('1992-09-20' AS DATE), CAST('2021-09-20' AS DATE)], x -> EXTRACT('year' FROM x) BETWEEN 2000 AND 2022);
SELECT LIST_FILTER([NULL, CAST('1992-09-20' AS DATE), CAST('2021-09-20' AS DATE)], x -> EXTRACT('year' FROM x) BETWEEN 2000 AND 2022);
SELECT LIST_TRANSFORM(['hello', 'duck', 'sunshine'], x -> CASE WHEN x LIKE '%e%' THEN 'e' ELSE 'other' END);
SELECT LIST_FILTER(['hello', 'duck', 'sunshine'], x -> (CASE WHEN x LIKE '%e%' THEN 'e' ELSE 'other' END) LIKE 'e');
SELECT LIST_TRANSFORM([CAST(2.0 AS DOUBLE)], x -> CAST(x AS INT));
SELECT LIST_FILTER([2], x -> CAST(x AS DOUBLE) = 2);
SELECT LIST_TRANSFORM([2.4, NULL, -4.7], x -> x <> 10.4);
SELECT LIST_FILTER([2.4, NULL, -4.7], x -> x <> -4.7);
SELECT LIST_TRANSFORM([TRUE, FALSE, NULL], x -> x AND TRUE);
SELECT LIST_FILTER([TRUE, FALSE, NULL], x -> x AND TRUE);
SELECT LIST_TRANSFORM([CAST('1992-03-22' AS TIMESTAMP), CAST('209-03-22' AS TIMESTAMP), CAST('1700-03-22' AS TIMESTAMP)], x -> CENTURY(x));
SELECT LIST_FILTER([CAST('1992-03-22' AS TIMESTAMP), CAST('209-03-22' AS TIMESTAMP), CAST('1700-03-22' AS TIMESTAMP)], x -> CENTURY(x) > 16);
SELECT LIST_TRANSFORM([2], x -> x + x);
SELECT LIST_FILTER([2], x -> x + x = 4);
SELECT LIST_TRANSFORM([2], x -> (SELECT 1 - x) * x);
SELECT LIST_FILTER([2], x -> (SELECT 1 - x) * x > 2);
SELECT LIST_FILTER([[1, 2, 1], [1, 2, 3], [1, 1, 1]], x -> LIST_CONTAINS_MACRO(x, 3));
SELECT LIST_TRANSFORM([1], x -> x = UNNEST([1]));
SELECT LIST_FILTER([1], x -> x = UNNEST([1]));
CREATE TABLE x (x INT[], x INT, x INT);
INSERT INTO x VALUES ([1], 1, 1), ([1, NULL, 2], 1, 2), ([], 2, 3), (NULL, NULL, NULL), ([1, 2], 2, 4);
SELECT LIST(LIST_TRANSFORM(x, x -> x + 1)) OVER (PARTITION BY x ORDER BY x) FROM x ORDER BY ALL;
PRAGMA x;
SELECT [1] AS x, LIST_FILTER([1], x -> x > 1);
SELECT LIST_FILTER(NULL, x -> x > 1);
SELECT LIST_FILTER([TRUE], x -> x);
SELECT LIST_FILTER(['duck', 'a', 'ö'], x -> CONTAINS(CONCAT(x, 'DB'), 'duck'));
SELECT LIST_FILTER([1, 2, 3], x -> x % 2 = 0);
SELECT LIST_FILTER([], x -> x > 1);
SELECT LIST_FILTER([1, NULL, -2, NULL], x -> x % 2 <> 0);
SELECT LIST_FILTER([5, -6, NULL, 7], x -> x > 0);
SELECT LIST_FILTER([5, NULL, 7, NULL], x -> NOT x IS NULL);
CREATE TABLE x (x INT, x INT[]);
INSERT INTO x VALUES (1, [1]), (2, [1, 2, 3]), (3, NULL), (4, [-1, NULL, 2]);
SELECT LIST_FILTER(x, x -> x + 1 <= 2) FROM x;
SELECT LIST_FILTER(x, x -> x <= x) FROM x;
SELECT LIST_FILTER(x, x -> NOT x IS NULL) FROM x;
SELECT LIST_FILTER(['x', 'abc', 'z'], x -> CONTAINS(x || '0', 'a'));
SELECT LIST_TRANSFORM([[1, 3], [2, 3, 1], [2, 4, 2]], x -> LIST_FILTER(x, x -> x <= 2));
SELECT LIST_CONCAT(CAST(LIST_FILTER([42, -42, 8, -5, 2], x -> x > 0) AS TEXT[]), LIST_FILTER(['enjoy', 'life', 'to', 'the', 'fullest'], x -> x ILIKE '%e%'));
SELECT LIST_FILTER([1, NULL], x -> x < 4);
CREATE TABLE x (x INT[]);
INSERT INTO x VALUES ([]), ([]), ([]), ([1, NULL, -1]), ([]), (NULL), (NULL), ([]), ([1, 2, 3]), ([]), ([]), ([]);
SELECT LIST_FILTER(x, x -> x > 0) FROM x;
CREATE TABLE x AS SELECT x % 4 AS x, LIST(x) AS x FROM x GROUP BY x % 4;
SELECT x, LIST_COUNT(LIST_FILTER(x, x -> x % 2 = 0)) FROM x ORDER BY x;
CREATE TABLE x (x INT, x TEXT[], x INT);
INSERT INTO x VALUES (1, ['a', '11', '23'], 1), (3, [NULL, '2', 'hello', 'wie gehts'], 1), (NULL, NULL, 1), (0, [], 1);
SELECT x FROM x WHERE LIST_COUNT(LIST_FILTER(x, x -> LENGTH(x) >= x)) >= x;
SELECT x.x FROM x AS x WHERE LIST_COUNT(x.x) < (SELECT LIST_COUNT(LIST_FILTER(LIST_CONCAT(CAST(LIST(x.x) AS TEXT[]), x.x), x -> LENGTH(x) >= 1)) FROM x AS x GROUP BY x.x) ORDER BY x.x;
SELECT (SELECT LIST_FILTER(x, x -> LENGTH(x) >= 1)) FROM x;
SELECT (SELECT LIST_FILTER(x, x -> LENGTH(x) >= x)) FROM x;
SELECT (SELECT (SELECT (SELECT LIST_FILTER(x, x -> LENGTH(x) >= 1)))) FROM x;
SELECT (SELECT (SELECT (SELECT LIST_FILTER(x, x -> LENGTH(x) >= 1)))) FROM x;
CREATE TABLE x AS SELECT [5, 6] AS x, [4, 8] AS x;
SELECT LIST_APPLY(x, x -> LIST_FILTER(x, x -> x)) FROM x;
SELECT LIST_APPLY([5, 6], x -> LIST_FILTER([4, 8], x -> x));
SELECT LIST_APPLY([[5, 6]], x -> LIST_FILTER(x, x -> x));
SELECT LIST_TRANSFORM([['abc']], x -> LIST_FILTER(x, x -> x));
SELECT [[x] FOR x IN RANGE(0, 5)] AS x, [x FOR x IN x IF NOT x IS NULL];
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
SELECT LIST_REDUCE([1], x -> x, 3);
SELECT LIST_REDUCE([TRUE], x -> x, x -> x);
SELECT [STR_SPLIT('01:08:22', ':'), x -> CAST(x AS INT)];
SELECT LIST_APPLY(x, x -> x * 3 + 2 / x) FROM (VALUES ([1, 2, 3])) AS x;
SELECT (x -> x) + 1 FROM (VALUES ([1, 2, 3])) AS x;
SELECT LIST_APPLY(x, x + (1 -> x) + 1) FROM (VALUES ([1, 2, 3])) AS x;
SELECT LIST_APPLY(x, (x.x -> x) + 1) FROM (VALUES ([1, 2, 3])) AS x;
SELECT LIST_APPLY(x, x -> x + 1 AND x + 1) FROM (VALUES ([1, 2, 3])) AS x;
CREATE TABLE x (x INT[]);
SELECT LIST_TRANSFORM([1, 2], (x, x, x) -> x + x + x);
SELECT LIST_FILTER([1, 2], (x, x, x) -> x >= x AND x >= x);
SELECT COS(x -> x + 1);
SELECT COS([1], x -> x + 1);
CREATE TABLE x (x BIGINT[], CHECK (LIST_FILTER(x, x -> x % 2 = 0) = []));
CREATE TABLE x (x BIGINT[], CHECK (LIST_TRANSFORM(x, x -> x % 2) = []));
CREATE TABLE x (x BIGINT[], CHECK ([x + 1 FOR x IN x IF x > 0] = []));
CREATE TABLE x (x BIGINT[], x BIGINT[], CHECK ((LIST_APPLY(x, x -> LIST_COUNT(LIST_FILTER(x, x -> x % 2 = 0)) + x)) = []));
CREATE TABLE x (x BIGINT[], x BIGINT[], CHECK ((LIST_APPLY(x, x -> LIST_COUNT(LIST_FILTER(x, x -> x % 2 = 0)) + x)) = []));
CREATE TABLE x AS SELECT {'x': 10} AS x;
SELECT LIST_TRANSFORM(UNNEST(x), x -> UNNEST(x)) FROM x;
CREATE TABLE x (x INT[][], x INT[]);
INSERT INTO x VALUES ([[1, 2]], [3, 4]);
SELECT LIST_TRANSFORM(x, x -> UNNEST(x)) FROM x;
SELECT LIST_TRANSFORM(x, x -> UNNEST(x)) FROM x;
CREATE TABLE x (x MAP(INT, INT));
SELECT [UNNEST([x.x FOR x IN RANGE(0, x.x)]) FOR x IN MAP_ENTRIES(x)] FROM x;
SELECT LIST_TRANSFORM(MAP_ENTRIES(x), x -> UNNEST(RANGE(0, x.x))) FROM x;
CREATE OR REPLACE FUNCTION x(x, x) AS TABLE(SELECT LIST_TRANSFORM(RANGE(0, x), x -> x) AS x);
SELECT * FROM x;
CREATE OR REPLACE FUNCTION x(x, x) AS TABLE(SELECT LIST_TRANSFORM(RANGE(0, x), x -> 0 + x) AS x);
SELECT * FROM x;
CREATE OR REPLACE FUNCTION x(x, x) AS TABLE(SELECT LIST_TRANSFORM(RANGE(0, x), x -> (x -> '$.a')) AS x);
SELECT * FROM x;
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('milk chickpeas apples'), ('chocolate pepper');
SELECT x, LIST_AGGR(LIST_TRANSFORM(STR_SPLIT(x, ' '), x -> LOWER(x)), 'string_agg', ',') AS x FROM x GROUP BY x ORDER BY ALL;
SELECT 1, LIST_TRANSFORM([5, 4, 3], x -> x + 1) AS x GROUP BY 1;
CREATE TABLE x AS SELECT 'gold' AS x, 10 AS x UNION ALL SELECT 'blue', 15 UNION ALL SELECT 'red', 300;
SELECT LIST(x).list_transform(x -> x + 10) FROM x;
SELECT * FROM (SELECT 1) GROUP BY ALL HAVING LIST_FILTER(NULL, x -> x);
SELECT * FROM x GROUP BY ALL HAVING ARRAY_INTERSECT(NULL, NULL);
SELECT x FROM (VALUES (42)) AS x GROUP BY x HAVING LIST_FILTER(NULL, x -> x = 1);
PRAGMA x;
CREATE TABLE x AS SELECT x AS x FROM x;
SELECT LIST_FILTER([[1, 2, 1], [1, 2, 3], [1, 1, 1]], x -> LIST_CONTAINS_MACRO(x, 3));
SELECT LIST_FILTER([[1, 2], NULL, [3], [4, NULL]], x -> LIST_COUNT(MACRO_WITH_LAMBDA(x, 2)) > 1);
SELECT SOME_MACRO([1, 2], 3, 4);
SELECT REDUCE_MACRO([1, 2, 3, 4], 5);
SELECT OTHER_REDUCE_MACRO([1, 2, 3, 4], 5, 6);
SELECT SCOPING_MACRO([11, 22], 3, 4);
CREATE TABLE x AS SELECT [1, 2, 3] AS x;
SELECT LIST_APPLY(['hello'], x -> x) FROM x;
CREATE TABLE x AS SELECT [[1], [2], [3]] AS x;
SELECT LIST_TRANSFORM([[1], [2], [3]], x -> x[1]) FROM x;
CREATE TABLE x (x INT[]);
INSERT INTO x VALUES ([1, 2, 3]);
SELECT x, LIST_TRANSFORM(x, x -> x + 1) FROM x;
CREATE TABLE x (x INT[]);
INSERT INTO x VALUES ([1, 2]);
SELECT x, LIST_FILTER(x, x -> x > 1) FROM x;
SELECT LIST_APPLY(x, (x.x -> x).x + 1) FROM (VALUES ([1, 2, 3])) AS x;
CREATE TABLE x (x INT[]);
INSERT INTO x VALUES ([1, 2]);
SELECT LIST_TRANSFORM(x.x, x -> (x.x)[1] + 1 + x) FROM x;
SELECT LIST_TRANSFORM(x.x, (x.x -> x).x + 1) FROM x;
SELECT LIST_TRANSFORM([1, 2], x -> LIST_TRANSFORM([3, 4], x -> x));
SELECT LIST_HAS_ALL([x FOR x IN ['a']], ['b']) AS x;
SELECT LIST_HAS_ALL(LIST_TRANSFORM(['a'], x -> x), ['b']) AS x;
SELECT LIST_HAS_ANY(['b'], LIST_TRANSFORM(['a'], x -> x)) AS x;
SELECT LIST_INTERSECT(LIST_INTERSECT([1], [1]), [1]);
SELECT LIST_INTERSECT([1], LIST_INTERSECT([1], [1]));
SELECT LIST_HAS_ANY([LIST_HAS_ANY([1], [1])], [1]);
SELECT LIST_HAS_ANY([1], [LIST_HAS_ANY([1], [1])]);
SELECT LIST_HAS_ALL([LIST_HAS_ALL([1], [1])], [1]);
SELECT LIST_HAS_ALL([1], [LIST_HAS_ALL([1], [1])]);
SELECT LIST_HAS_ANY([LIST_HAS_ALL(LIST_INTERSECT([1], [1]), [1])], [1]);
SELECT LIST_HAS_ALL([LIST_HAS_ANY(LIST_INTERSECT([1], [1]), [1])], [1]);
SELECT LIST_INTERSECT([LIST_HAS_ALL([LIST_HAS_ANY([1], [1])], [1])], [1]);
SELECT LIST_INTERSECT(LIST_INTERSECT([1, 2, 3, 4], [4, 5, 6, 7]), LIST_INTERSECT([4, 5, 6, 7], [1, 2, 3, 4]));
CREATE TABLE x AS SELECT 42 AS x;
SELECT x, LIST_TRANSFORM([1], x -> x) FROM x;
SELECT LIST_TRANSFORM([1, 2, 3], (SQRT(x.x) -> x).x + 1) AS x;
SELECT LIST_TRANSFORM([1, 2, 3], "x" -> "x" + x.x) AS x FROM (VALUES (42), (84)) AS x;
SELECT LIST_TRANSFORM([1, 2, 3], "x" -> "x" + x.x) AS x FROM (VALUES (42), (84)) AS x;
PRAGMA x;
SELECT LIST_TRANSFORM(LIST_FILTER([0, 1, 2, 3, 4, 5], x -> x % 2 = 0), x -> x * x);
SELECT [x * x FOR x IN [0, 1, 2, 3, 4, 5] IF x % 2 = 0];
SELECT LIST_FILTER(LIST_FILTER([2, 4, 3, 1, 20, 10, 3, 30], x -> x % 2 = 0), x -> x % 5 = 0);
SELECT [x FOR x IN [x FOR x IN [2, 4, 3, 1, 20, 10, 3, 30] IF x % 2 = 0] IF x % 5 = 0];
SELECT LIST_FILTER(['apple', 'banana', 'cherry', 'kiwi', 'mango'], x -> CONTAINS(x, 'a'));
SELECT [x FOR x IN ['apple', 'banana', 'cherry', 'kiwi', 'mango'] IF CONTAINS(x, 'a')];
CREATE TABLE x AS SELECT ['apple', 'banana', 'cherry', 'kiwi', 'mango'] AS x;
SELECT [x FOR x IN x IF CONTAINS(x, 'a')] FROM x;
SELECT LIST_TRANSFORM([[1, NULL, 2], [3, NULL]], x -> LIST_FILTER(x, x -> NOT x IS NULL));
SELECT [LENGTH(x) FOR x IN ['goodbye', 'cruel', 'world']];
CREATE TABLE x AS SELECT ['goodbye', 'cruel', 'world'] AS x;
SELECT [LENGTH(x) FOR x IN x] FROM x;
SELECT [LENGTH(x) FOR x IN x] FROM x;
SELECT [LENGTH(x) FOR x IN x] FROM x;
WITH x AS (SELECT [4, 5, 6] AS x) SELECT [x + 5 FOR x IN x] AS x FROM x;
WITH x AS (SELECT [4, 5, 6] AS x) SELECT [x + 5 FOR x IN x] AS x FROM x;
WITH x AS (SELECT [4, 5, 6] AS x) SELECT [x + 5 FOR x IN x] AS x FROM x;
PRAGMA x;
SELECT LIST_REDUCE([1, 2, 3], (x, x) -> x + x);
SELECT LIST_REDUCE([1, 2, 3], (x, x) -> x * x);
SELECT LIST_REDUCE([100, 10, 1], (x, x, x) -> x - x - x);
SELECT LIST_REDUCE([1, 2, 3], (x, x) -> x - x);
SELECT LIST_REDUCE([1, 2, 3], (x, x) -> x - x);
SELECT LIST_REDUCE([1, 2, 3], (x, x, x) -> x + x + x);
SELECT LIST_REDUCE([NULL], (x, x, x) -> x + x + x);
SELECT LIST_REDUCE(NULL, (x, x, x) -> x + x + x);
SELECT LIST_REDUCE(['Once', 'upon', 'a', 'time'], (x, x) -> x || ' ' || x);
SELECT LIST_REDUCE(['a', 'b', 'c', 'd'], (x, x, x) -> x || ' - ' || CAST(x AS TEXT) || ' - ' || x);
SELECT LIST_REDUCE([], (x, x, x) -> x + x + x);
SELECT LIST_REDUCE([1, 2, 3], (x, x) -> CAST((x * x) AS TEXT) || 'please work');
SELECT LIST_REDUCE([1, 2], x -> x);
SELECT LIST_REDUCE([1, 2], NULL);
SELECT LIST_REDUCE([1, 2], NULL);
CREATE TABLE x (x INT[]);
INSERT INTO x VALUES ([1, 2, 3]);
INSERT INTO x VALUES ([666]);
INSERT INTO x VALUES (NULL);
INSERT INTO x VALUES ([44, 55]);
INSERT INTO x VALUES ([-1, NULL, -2]);
SELECT LIST_REDUCE(x, (x, x) -> x + x) FROM x;
SELECT LIST_REDUCE(x, (x, x, x) -> x + x + x) FROM x;
INSERT INTO x VALUES ([]);
SELECT LIST_REDUCE(x, (x, x) -> x + x) FROM x;
DROP TABLE x;
CREATE TABLE x (x TEXT[]);
INSERT INTO x VALUES (['Once', 'upon', 'a', 'time']), (NULL), (['there', 'was', 'a', 'table']), (['with', 'a', 'list', 'of', 'strings']), (['and', 'it', 'was', NULL]);
SELECT LIST_REDUCE(x, (x, x) -> x || ' ' || x) FROM x;
INSERT INTO x VALUES ([]);
SELECT LIST_REDUCE(x, (x, x) -> x || ' ' || x) FROM x;
CREATE TABLE x (x TEXT[], x INT);
INSERT INTO x VALUES (['blue', 'babbling', 'brook'], 1), (['dogs', 'doing', 'dishes'], 2), (['she', 'sells', 'seashells'], 3);
SELECT LIST_REDUCE(x, (x, x) -> x[x]) FROM x;
SELECT LIST_REDUCE([1, 2, 3], (x, x) -> LIST_REDUCE([4, 5, 6], (x, x) -> x + x + x + x));
SELECT LIST_REDUCE([1, 2, 3], (x, x) -> LIST_REDUCE([], (x, x) -> x + x + x + x));
SELECT LIST_REDUCE([1, 2, 3], (x, x, x) -> LIST_REDUCE([4, 5, 6], (x, x, x) -> x + x + x + x + x + x));
SELECT LIST_REDUCE([1, 2, 3], (x, x, x) -> LIST_REDUCE([], (x, x, x) -> x + x + x + x + x + x));
SELECT LIST_REDUCE([[10, 20], [30, 40], [50, 60]], (x, x) -> LIST_PACK(LIST_REDUCE(x, (x, x) -> x + x) + LIST_REDUCE(x, (x, x) -> x + x)));
SELECT LIST_REDUCE([[1, 2, 3], [4, 5, 6], [7, 8, 9]], (x, x) -> LIST_PACK(LIST_REDUCE(x, (x, x) -> x + x) + LIST_REDUCE(x, (x, x) -> x + x)));
SELECT LIST_REDUCE([[10, 20], [30, 40], NULL, [NULL, 60], NULL], (x, x) -> LIST_PACK(LIST_REDUCE(x, (x, x) -> x + x) + LIST_REDUCE(x, (x, x) -> x + x)));
SELECT LIST_REDUCE(['a', 'b', 'c', 'd'], (x, x) -> LIST_REDUCE(['1', '2', '3', '4'], (x, x) -> x || x || x || x));
SELECT LIST_REDUCE([['a', 'b'], ['c', 'd'], ['e', 'f']], (x, x) -> LIST_PACK(LIST_REDUCE(x, (x, x) -> x || x) || LIST_REDUCE(x, (x, x) -> x || x)));
CREATE TABLE x (x INT[], x INT[]);
INSERT INTO x VALUES ([1, 2, 3], [4, 5, 6]), (NULL, NULL), (NULL, [110, 111, 112]), ([77, 88, 99], [55, 66, NULL]);
SELECT LIST_REDUCE(x, (x, x) -> LIST_REDUCE(x, (x, x) -> x + x + x + x)) FROM x;
SELECT LIST_REDUCE(x, (x, x, x) -> LIST_REDUCE(x, (x, x, x) -> x + x + x + x + x + x)) FROM x;
SELECT LIST_REDUCE(x, (x, x, x) -> LIST_REDUCE(x, (x, x, x) -> x + x + x < x + x + x)) FROM x;
INSERT INTO x VALUES ([4, 5, 6], []);
SELECT LIST_REDUCE(x, (x, x) -> LIST_REDUCE(x, (x, x) -> x + x + x + x)) FROM x;
DROP TABLE x;
CREATE TABLE x (x INT[][]);
INSERT INTO x VALUES ([[10, 20], [30, 40], [50, 60]]), ([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), (NULL), ([[NULL, 60], [70, NULL], [NULL, NULL]]);
SELECT LIST_REDUCE(x, (x, x) -> LIST_PACK(LIST_REDUCE(x, (x, x) -> x + x) + LIST_REDUCE(x, (x, x) -> x + x))) FROM x;
INSERT INTO x VALUES ([[4, 5, 6], []]);
SELECT LIST_REDUCE(x, (x, x) -> LIST_PACK(LIST_REDUCE(x, (x, x) -> x + x) + LIST_REDUCE(x, (x, x) -> x + x))) FROM x;
DROP TABLE x;
CREATE TABLE x (x TEXT[], x TEXT[]);
INSERT INTO x VALUES (['a', 'b', 'c', 'd'], ['1', '2', '3', '4']), (NULL, NULL), (NULL, ['110', '111', '112']), (['77', '88', '99'], ['55', '66', NULL]);
SELECT LIST_REDUCE(x, (x, x) -> LIST_REDUCE(x, (x, x) -> x || x || x || x)) FROM x;
DROP TABLE x;
SELECT LIST_REDUCE([1, 2, 3], (x, x) -> LIST_REDUCE([4, 5, 6], (x, x) -> LIST_REDUCE([7, 8, 9], (x, x) -> x + x + x + x + x + x)));
SELECT LIST_REDUCE([1, 2, 3], (x, x, x) -> LIST_REDUCE([4, 5, 6], (x, x, x) -> LIST_REDUCE([7, 8, 9], (x, x, x) -> x + x + x + x + x + x + x + x + x)));
SELECT LIST_REDUCE([[[10, 20], [100, 200]], [[30, 40], [300, 400]], [[50, 60], [500, 600]]], (x, x) -> LIST_PACK(LIST_REDUCE(x, (x, x) -> LIST_PACK(LIST_REDUCE(x, (x, x) -> x + x) + LIST_REDUCE(x, (x, x) -> x + x))) + LIST_REDUCE(x, (x, x) -> LIST_PACK(LIST_REDUCE(x, (x, x) -> x + x) + LIST_REDUCE(x, (x, x) -> x + x)))));
CREATE TABLE x (x INT[], x INT[], x INT[]);
INSERT INTO x VALUES ([1, 2, 3], [4, 5, 6], [7, 8, 9]), (NULL, NULL, NULL), (NULL, [110, 111, 112], [113, 114, 115]), ([77, 88, 99], [55, 66, NULL], [44, 33, 22]);
SELECT LIST_REDUCE(x, (x, x) -> LIST_REDUCE(x, (x, x) -> LIST_REDUCE(x, (x, x) -> x + x + x + x + x + x))) FROM x;
DROP TABLE x;
CREATE TABLE x (x INT[][][]);
INSERT INTO x VALUES ([[[10, 20], [100, 200]], [[30, 40], [300, 400]], [[50, 60], [500, 600]]]), ([[[1, 2, 3], [4, 5, 6], [7, 8, 9]]]), (NULL), ([[[NULL, 60], [70, NULL], [NULL, NULL]]]);
SELECT LIST_REDUCE(x, (x, x) -> LIST_PACK(LIST_REDUCE(x, (x, x) -> LIST_PACK(LIST_REDUCE(x, (x, x) -> x + x) + LIST_REDUCE(x, (x, x) -> x + x))) + LIST_REDUCE(x, (x, x) -> LIST_PACK(LIST_REDUCE(x, (x, x) -> x + x) + LIST_REDUCE(x, (x, x) -> x + x))))) FROM x;
CREATE TABLE x (x INT[]);
INSERT INTO x VALUES ([10, 2, 1]), ([1, 2, 3]), ([15, 4, 3]), ([3, 4, 5]), ([11, 2, 3, 4, 5]), ([5, 4, 3, 2, 1]), ([100, 2, 3, 4, 5, 6, 7, 8, 9, 10]);
SELECT x FROM x WHERE LIST_REDUCE(x, (x, x) -> x - x) > 0;
CREATE TABLE x (x STRUCT(x TEXT, x INT)[]);
INSERT INTO x VALUES ([ROW('a', 1), ROW('b', 2)]), ([ROW('c', 3), ROW('d', 4)]), ([ROW('e', 5), ROW('f', 6)]), ([ROW('g', 7), ROW('h', 8)]), ([ROW('i', 9), ROW('j', 10)]);
SELECT LIST_REDUCE(x, (x, x) -> ROW(x.x || x.x, x.x + x.x)) FROM x;
CREATE OR REPLACE TABLE x (x STRUCT(x INT, x INT)[]);
INSERT INTO x VALUES ([ROW(0, 0), ROW(0, 1), ROW(0, 2)]);
SELECT LIST_REDUCE(x, (x, x) -> {'x': x.x + (x.x - x.x), 'x': x.x}) FROM x;
SELECT LIST_REDUCE([{'x': 0, 'x': 0}, {'x': 0, 'x': 1}, {'x': 0, 'x': 2}], (x, x) -> {'x': x.x + (x.x - x.x), 'x': x.x});
PRAGMA x;
SELECT LIST_REDUCE([1, 2, 3], (x, x) -> x + x, 100);
SELECT LIST_REDUCE([1, 2, 3], (x, x) -> x * x, -1);
SELECT LIST_REDUCE([100, 10, 1], (x, x, x) -> x - x - x, 1000);
SELECT LIST_REDUCE([1, 2, 3], (x, x) -> x - x, -1);
SELECT LIST_REDUCE([1, 2, 3], (x, x) -> x - x, 10);
SELECT LIST_REDUCE([1, 2, 3], (x, x, x) -> x + x + x, -1);
SELECT LIST_REDUCE([1, 2, 3], (x, x) -> x + x, NULL);
SELECT LIST_REDUCE([NULL], (x, x, x) -> x + x + x, 100);
SELECT LIST_REDUCE(NULL, (x, x, x) -> x + x + x, 100);
SELECT LIST_REDUCE(['Once', 'upon', 'a', 'time'], (x, x) -> x || ' ' || x, '-->');
SELECT LIST_REDUCE([], (x, x) -> x + x, 100);
SELECT LIST_REDUCE(['a', 'b', 'c'], (x, x) -> x || x, NULL);
SELECT LIST_REDUCE([1, 2, 3], (x, x) -> (x * x), 'i dare you to cast me');
SELECT LIST_REDUCE([1, 2], x -> x, 100);
SELECT LIST_REDUCE([1, 2], NULL, 100);
SELECT LIST_REDUCE([1, 2], NULL, 100);
CREATE TABLE x (x INT[], x INT);
INSERT INTO x VALUES ([1, 2, 3], 100);
INSERT INTO x VALUES ([666], 1000);
INSERT INTO x VALUES ([1, 2, 3], NULL);
INSERT INTO x VALUES (NULL, 2);
INSERT INTO x VALUES ([44, 55], 3);
INSERT INTO x VALUES ([-1, NULL, -2], 4);
SELECT LIST_REDUCE(x, (x, x) -> x + x, x) FROM x;
SELECT LIST_REDUCE(x, (x, x, x) -> x + x + x, x) FROM x;
INSERT INTO x VALUES ([], 100);
SELECT LIST_REDUCE(x, (x, x) -> x + x) FROM x;
SELECT LIST_REDUCE(x, (x, x) -> x + x, x) FROM x;
DROP TABLE x;
CREATE TABLE x (x TEXT[], x TEXT);
INSERT INTO x VALUES (['a', 'b'], '1:'), (NULL, '2:'), (['e', 'f'], '3:');
SELECT LIST_REDUCE(x, (x, x) -> x || ' ' || x, x) FROM x;
INSERT INTO x VALUES (['h', NULL], '4:'), (['i', 'j'], '5:');
SELECT LIST_REDUCE(x, (x, x) -> x || ' ' || x, x) FROM x;
INSERT INTO x VALUES (['x', 'y'], NULL);
SELECT LIST_REDUCE(x, (x, x) -> x || ' ' || x, x) FROM x;
INSERT INTO x VALUES ([], '7:');
SELECT LIST_REDUCE(x, (x, x) -> x || ' ' || x) FROM x;
SELECT LIST_REDUCE(x, (x, x) -> x || ' ' || x, x) FROM x;
CREATE TABLE x (x TEXT[], x INT);
INSERT INTO x VALUES (['blue', 'babbling', 'brook'], 1), (['dogs', 'doing', 'dishes'], 2), (['she', 'sells', 'seashells'], 3);
SELECT LIST_REDUCE(x, (x, x) -> x[x]) FROM x;
SELECT LIST_REDUCE([1, 2, 3], (x, x) -> LIST_REDUCE([4, 5, 6], (x, x) -> x + x + x + x, 100), 1000);
SELECT LIST_REDUCE([1, 2, 3], (x, x) -> LIST_REDUCE([], (x, x) -> x + x + x + x), 1000);
SELECT LIST_REDUCE([1, 2, 3], (x, x, x) -> LIST_REDUCE([4, 5, 6], (x, x, x) -> x + x + x + x + x + x, 100), 1000);
SELECT LIST_REDUCE([1, 2, 3], (x, x, x) -> LIST_REDUCE([], (x, x, x) -> x + x + x + x + x + x), 1000);
SELECT LIST_REDUCE([[10, 20], [30, 40], [50, 60]], (x, x) -> LIST_PACK(LIST_REDUCE(x, (x, x) -> x + x) + LIST_REDUCE(x, (x, x) -> x + x)), [100, 200]);
SELECT LIST_REDUCE([[1, 2, 3], [4, 5, 6], [7, 8, 9]], (x, x) -> LIST_PACK(LIST_REDUCE(x, (x, x) -> x + x) + LIST_REDUCE(x, (x, x) -> x + x)), [100]);
SELECT LIST_REDUCE([[10, 20], [30, 40], NULL, [NULL, 60], NULL], (x, x) -> LIST_PACK(LIST_REDUCE(x, (x, x) -> x + x) + LIST_REDUCE(x, (x, x) -> x + x)), [100]);
SELECT LIST_REDUCE(['a', 'b'], (x, x) -> LIST_REDUCE(['1', '2'], (x, x) -> x || x || x || x, 'B'), 'A');
SELECT LIST_REDUCE([['a', 'b'], ['c', 'd'], ['e', 'f']], (x, x) -> LIST_PACK(LIST_REDUCE(x, (x, x) -> x || x) || LIST_REDUCE(x, (x, x) -> x || x)), ['->']);
CREATE TABLE x (x INT[], x INT[], x INT);
INSERT INTO x VALUES ([1, 2, 3], [4, 5, 6], 100), (NULL, NULL, 100), (NULL, [110, 111, 112], 44), ([77, 88, 99], [55, 66, NULL], 1);
SELECT LIST_REDUCE(x, (x, x) -> LIST_REDUCE(x, (x, x) -> x + x + x + x), x) FROM x;
SELECT LIST_REDUCE(x, (x, x, x) -> LIST_REDUCE(x, (x, x, x) -> x + x + x + x + x + x), x) FROM x;
SELECT LIST_REDUCE(x, (x, x, x) -> LIST_REDUCE(x, (x, x, x) -> x + x + x < x + x + x), x) FROM x;
INSERT INTO x VALUES ([4, 5, 6], [], -1);
SELECT LIST_REDUCE(x, (x, x) -> LIST_REDUCE(x, (x, x) -> x + x + x + x), x) FROM x;
DROP TABLE x;
CREATE TABLE x (x INT[][], x INT[]);
INSERT INTO x VALUES ([[10, 20], [30, 40], [50, 60]], [100]), ([[1, 2, 3], [4, 5, 6], [7, 8, 9]], [1000]), (NULL, [-1]), ([[NULL, 60], [70, NULL], [NULL, NULL]], [NULL]);
SELECT LIST_REDUCE(x, (x, x) -> LIST_PACK(LIST_REDUCE(x, (x, x) -> x + x) + LIST_REDUCE(x, (x, x) -> x + x)), x) FROM x;
INSERT INTO x VALUES ([[4, 5, 6], []], [9]);
SELECT LIST_REDUCE(x, (x, x) -> LIST_PACK(LIST_REDUCE(x, (x, x) -> x + x) + LIST_REDUCE(x, (x, x) -> x + x)), x) FROM x;
DROP TABLE x;
CREATE TABLE x (x TEXT[], x TEXT[], x TEXT, x TEXT);
INSERT INTO x VALUES (['a', 'b'], ['1', '2'], 'A', 'B'), (NULL, NULL, 'C', 'D'), (NULL, ['110', '111', '112'], 'X', 'Y'), (['77', '88', '99'], ['55', '66', NULL], 'E', 'F');
SELECT LIST_REDUCE(x, (x, x) -> LIST_REDUCE(x, (x, x) -> x || x || x || x, x), x) FROM x;
DROP TABLE x;
SELECT LIST_REDUCE([1, 2, 3], (x, x) -> LIST_REDUCE([4, 5, 6], (x, x) -> LIST_REDUCE([7, 8, 9], (x, x) -> x + x + x + x + x + x, 1000), 100), 10);
SELECT LIST_REDUCE([1, 2, 3], (x, x, x) -> LIST_REDUCE([4, 5, 6], (x, x, x) -> LIST_REDUCE([7, 8, 9], (x, x, x) -> x + x + x + x + x + x + x + x + x, 1000), 100), 10);
CREATE TABLE x (x INT[], x INT[], x INT[], x INT);
INSERT INTO x VALUES ([1, 2, 3], [4, 5, 6], [7, 8, 9], 100), (NULL, NULL, NULL, NULL), (NULL, [110, 111, 112], [113, 114, 115], NULL), ([77, 88, 99], [55, 66, NULL], [44, 33, 22], 1);
SELECT LIST_REDUCE(x, (x, x) -> LIST_REDUCE(x, (x, x) -> LIST_REDUCE(x, (x, x) -> x + x + x + x + x + x, x), x), x) FROM x;
DROP TABLE x;
CREATE TABLE x (x INT[][][], x INT[][]);
INSERT INTO x VALUES ([[[10, 20], [100, 200]], [[30, 40], [300, 400]], [[50, 60], [500, 600]]], [[1]]), ([[[1, 2, 3], [4, 5, 6], [7, 8, 9]]], [[2]]), (NULL, [[3]]), ([[[NULL, 60], [70, NULL], [NULL, NULL]]], [[4]]);
SELECT LIST_REDUCE(x, (x, x) -> LIST_PACK(LIST_REDUCE(x, (x, x) -> LIST_PACK(LIST_REDUCE(x, (x, x) -> x + x) + LIST_REDUCE(x, (x, x) -> x + x))) + LIST_REDUCE(x, (x, x) -> LIST_PACK(LIST_REDUCE(x, (x, x) -> x + x) + LIST_REDUCE(x, (x, x) -> x + x))))) FROM x;
CREATE TABLE x (x STRUCT(x TEXT, x INT)[], x STRUCT(x TEXT, x INT));
INSERT INTO x VALUES ([ROW('a', 1), ROW('b', 2)], ROW('->', 1)), ([ROW('c', 3), ROW('d', 4)], ROW('-->', 2)), ([ROW('e', 5), ROW('f', 6)], ROW('--->', 3)), ([ROW('g', 7), ROW('h', 8)], ROW('---->', 4)), ([ROW('i', 9), ROW('j', 10)], ROW('----->', 5));
SELECT LIST_REDUCE(x, (x, x) -> ROW(x.x || x.x, x.x + x.x), x) FROM x;
CREATE OR REPLACE TABLE x (x STRUCT(x INT, x INT)[], x STRUCT(x INT, x INT));
INSERT INTO x VALUES ([ROW(0, 0), ROW(0, 1), ROW(0, 2)], ROW(-2, -3));
SELECT LIST_REDUCE(x, (x, x) -> {'x': x.x + (x.x - x.x), 'x': x.x}, x) FROM x;
SELECT LIST_REDUCE([{'x': 0, 'x': 0}, {'x': 0, 'x': 1}, {'x': 0, 'x': 2}], (x, x) -> {'x': x.x + (x.x - x.x), 'x': x.x}, {'x': -2, 'x': -3});
CREATE TABLE x (x INT[], x INT);
INSERT INTO x VALUES ([10, 2, 1], 10), ([1, 2, 3], 20), ([15, 4, 3], 30), ([3, 4, 5], 40), ([11, 2, 3, 4, 5], 50), ([5, 4, 3, 2, 1], 60), ([100, 2, 3, 4, 5, 6, 7, 8, 9, 10], 70);
SELECT x FROM x WHERE LIST_REDUCE(x, (x, x) -> x - x, x) > 0;
CREATE TABLE x AS SELECT x % 4 AS x, LIST(x) AS x, 100 AS x FROM x GROUP BY x % 4;
SELECT LIST_REDUCE(x, (x, x) -> LEAST(x, x), x) FROM x ORDER BY x;
SELECT LIST_REDUCE(x, (x, x) -> x + x, x) FROM x ORDER BY x;
CREATE TABLE x AS SELECT LIST_REDUCE(RANGE(0, 5000), (x, x) -> x + x, 1) AS x FROM x;
SELECT COUNT(*) FROM x WHERE x = 12497501;
CREATE TABLE x AS SELECT x % 4 AS x, LIST(x) AS x FROM x GROUP BY x % 4;
SELECT LIST_REDUCE(x, (x, x) -> LEAST(x, x)) FROM x ORDER BY x;
SELECT LIST_REDUCE(x, (x, x) -> x + x) FROM x ORDER BY x;
CREATE TABLE x AS SELECT LIST_REDUCE(RANGE(0, 5000), (x, x) -> x + x) AS x FROM x;
SELECT COUNT(*) FROM x WHERE x = 12497500;
PRAGMA x;
SELECT LIST_APPLY([1, 2], x -> LIST_APPLY([3, 4], x -> {'x': x, 'x': x})) AS x;
SELECT LIST_TRANSFORM([1, 2], x -> LIST_TRANSFORM([3, 4], x -> x + x));
SELECT LIST_TRANSFORM([1, 2], x -> LIST_TRANSFORM([3, 4], x -> LIST_TRANSFORM([5, 6], x -> x + x + x)));
SELECT LIST_TRANSFORM([1, 2, 3, 4], x -> LIST_FILTER([4, 5, 1, 2, 3, 3, 3, 5, 1, 4], x -> x <> x));
SELECT LIST_TRANSFORM([[2, 4, 6]], x -> LIST_TRANSFORM(x, x -> LIST_SUM([x] || x)));
SELECT LIST_APPLY(RANGE(0, 5), x -> {'x': x, 'x': LIST_FILTER(RANGE(0, 5), x -> ABS(x - x) < 2)});
SELECT LIST_APPLY(RANGE(0, 8), x -> LIST_AGGR(LIST_APPLY(RANGE(0, 8), x -> LIST_ELEMENT('▁▂▃▄▅▆▇█', 1 + ABS(x - x))), 'string_agg', ''));
CREATE TABLE x (x INT, x TEXT[]);
INSERT INTO x VALUES (1, ['a', 'b', 'c']), (8, NULL), (3, ['duck', 'db', 'tests']), (NULL, NULL), (NULL, ['lambdas!']);
SELECT LIST_TRANSFORM(x, x -> LIST_TRANSFORM(x, x -> x || x)) FROM x;
SELECT LIST_TRANSFORM(x, x -> LIST_TRANSFORM(x, x -> LIST_TRANSFORM(x, x -> x || x || x))) FROM x;
SELECT LIST_TRANSFORM(x, x -> [LIST_TRANSFORM([':-)'], x -> x || x || '-#lambdaLove')] || LIST_FILTER(LIST_TRANSFORM(['B-)'], x -> [x] || [x]), x -> LIST_CONTAINS(x, 'a') OR LIST_CONTAINS(x, 'duck'))) FROM x;
CREATE TABLE x AS SELECT [x, x + 1] AS x FROM x;
SELECT x, [[{'x': x + x, 'x': x, 'x': x, 'x': x} FOR x IN [42, 43]] FOR x IN x] FROM x;
PRAGMA x;
SELECT MY_TRANSFORM([1, 2, 3]);
SELECT MY_FILTER([41, 42, NULL, 43, 44]);
SELECT MY_REDUCE([1, 2, 3]);
SELECT MY_NESTED_LAMBDAS([[40, NULL], [20, 21], [10, 10, 20]]);
SELECT MY_TRANSFORM([1, 2, 3]);
SELECT MY_FILTER([41, 42, NULL, 43, 44]);
SELECT MY_REDUCE([1, 2, 3]);
SELECT MY_NESTED_LAMBDAS([[40, NULL], [20, 21], [10, 10, 20]]);
CREATE TABLE x AS SELECT x AS x FROM x;
COPY x TO '__TEST_DIR__/my_file_cba.parquet' WITH (FORMAT PARQUET);
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
COPY x TO '__TEST_DIR__/my_file_ac.parquet' WITH (FORMAT PARQUET);
SELECT COUNT(*) FROM x;
COPY x TO '__TEST_DIR__/my_file_a=1,b=2,c=3.parquet' WITH (FORMAT PARQUET);
SELECT COUNT(*) FROM x;
CREATE TABLE x AS SELECT * FROM (VALUES ('Amsterdam', [90, 10]), ('London', [89, 102])) AS x;
ALTER TABLE x ALTER COLUMN x SET DATA TYPE INT[] USING LIST_FILTER(x.x, x -> x < 100);
SELECT x, x AS x FROM x;
PRAGMA x;
SELECT [1] AS x, LIST_TRANSFORM([1], x -> x + 1);
SELECT LIST_TRANSFORM(NULL, x -> x + 1);
SELECT LIST_TRANSFORM([1], x -> x);
SELECT LIST_TRANSFORM(['duck', 'a', 'ö'], x -> CONCAT(x, 'DB'));
SELECT LIST_TRANSFORM([1, 2, 3], x -> 1);
SELECT LIST_TRANSFORM([], x -> x + 1);
SELECT LIST_TRANSFORM([1, 2, 3], x -> x + 1);
SELECT LIST_TRANSFORM([1, NULL, -2, NULL], x -> x + 1);
CREATE TABLE x (x INT, x INT[]);
INSERT INTO x VALUES (1, [1]), (2, [1, 2, 3]), (3, NULL), (4, [-1, NULL, 2]);
SELECT LIST_TRANSFORM(x, x -> x) FROM x;
SELECT LIST_TRANSFORM(x, x -> x + x) FROM x;
SELECT LIST_TRANSFORM(x, x -> x < 2) FROM x;
SELECT LIST_TRANSFORM(['x', 'abc', 'z'], x -> x || '0');
SELECT LIST_TRANSFORM([[1], [2, 3], [NULL], NULL], x -> LIST_TRANSFORM(x, x -> x + 1));
SELECT LIST_TRANSFORM([[1], [2], [3]], x -> LIST_CONCAT(x, x));
SELECT LIST_TRANSFORM([5, NULL, 6], x -> CAST(POWER(x, 2) AS INT));
SELECT LIST_TRANSFORM([5, NULL, 6], x -> COALESCE(x, 0) + 1);
SELECT LIST_TRANSFORM([LIST_UNIQUE(LIST_CONCAT([1, 2], [2, 2]))], x -> CAST((x + 1) AS INT));
SELECT ARRAY_SORT(LIST_TRANSFORM(LIST_DISTINCT(LIST_CONCAT([1, 2], [2, 2])), x -> x + 1));
SELECT LIST_TRANSFORM([[1], [2], [3]], x -> LIST_CONCAT(LIST_TRANSFORM(x, x -> x + 1), LIST_TRANSFORM(x, x -> x - 1)));
SELECT LIST_TRANSFORM([[1], [4], NULL, [1], [8]], x -> LIST_CONCAT(LIST_TRANSFORM(x, x -> CASE WHEN x > 1 THEN 'yay' ELSE 'nay' END), x));
SELECT LIST_TRANSFORM([[1], [4], NULL, [1], [8]], x -> LIST_CONCAT(LIST_TRANSFORM(x, x -> CASE WHEN x > 1 THEN 'yay' ELSE 'nay' END), CAST(x AS TEXT[])));
SELECT ARRAY_TRANSFORM([1, NULL], x -> x - 4);
SELECT ARRAY_APPLY([1, NULL], x -> x - 4);
SELECT LIST_APPLY([1, NULL], x -> x - 4);
SELECT LIST_APPLY(x, x -> (6 + 2 * 12) // x) FROM (VALUES ([1, 2, 3])) AS x;
SELECT LIST_APPLY(x, x -> x + 1 AND x + 1) FROM (VALUES ([1, 2, 3])) AS x;
CREATE TABLE x AS SELECT x % 4 AS x, LIST(x) AS x FROM x GROUP BY x % 4;
CREATE TABLE x (x INT, x INT[]);
INSERT INTO x (SELECT x + 1, LIST_TRANSFORM(x, x -> x + 1) FROM x WHERE x <> 3);
INSERT INTO x (SELECT x - 3, LIST_TRANSFORM(x, x -> x - 3) FROM x WHERE x = 3);
SELECT x.x = x.x FROM x AS x, x AS x WHERE x.x = x.x;
SELECT LIST_TRANSFORM([{'x': 1}], x -> x.x);
SELECT LIST_TRANSFORM([{'x': [1, 2, 3]}], x -> x.x[2]);
SELECT LIST_TRANSFORM([{'x': {'x': 1}}], x -> x.x.x);
SELECT LIST_TRANSFORM([{'x': {'x': 42, 'x': 43}}], x -> x.x.x);
SELECT LIST_TRANSFORM([{'x': {'x': [{'x': 77}], 'x': 43}}], x -> x.x.x.x.x.x[1].x);
CREATE TABLE x (x INT, x INT[], x INT);
INSERT INTO x VALUES (1, [2, 1, 1], 1), (3, [NULL, 2, 4, 4], 1), (NULL, NULL, 1), (0, [], 1);
SELECT x FROM x WHERE LIST_SUM(LIST_TRANSFORM(x, x -> x - x)) >= x;
SELECT x.x FROM x AS x WHERE LIST_COUNT(x.x) < (SELECT LIST_COUNT(LIST_TRANSFORM(LIST_CONCAT(LIST(x.x), x.x), x -> x)) FROM x AS x GROUP BY x.x) ORDER BY x.x;
SELECT (SELECT LIST_TRANSFORM(x, x -> x + 1)) FROM x;
SELECT (SELECT LIST_TRANSFORM(x, x -> x + x)) FROM x;
SELECT (SELECT (SELECT (SELECT LIST_TRANSFORM(x, x -> x + 1)))) FROM x;
SELECT (SELECT (SELECT (SELECT LIST_TRANSFORM(x, x -> x + 1)))) FROM x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 2), (1, 3), (1, 4), (2, 2), (2, 3), (2, 4), (3, 2), (3, 3), (3, 4);
SELECT LIST_TRANSFORM(x, x -> [x, x]), x, x FROM (SELECT LIST(x) OVER x AS x, FIRST(x) OVER x AS x FROM x WINDOW x AS (ORDER BY x ASC, x ASC rows BETWEEN 4 preceding AND CURRENT ROW) QUALIFY ROW_NUMBER() OVER x > 4);
SELECT LIST_TRANSFORM([[2, 3], [4]], x -> LIST_TRANSFORM([42], x -> x + 1));
SELECT LIST_TRANSFORM([[2, 3], [4]], x -> LIST_TRANSFORM(x, x -> x + 1));
SELECT LIST_TRANSFORM([[2, 3], [4]], x -> LIST_TRANSFORM([1], x -> x || [x]));
SELECT LIST_TRANSFORM([[2, 3], [4]], x -> LIST_TRANSFORM(x, x -> x || [x]));
PRAGMA x;
SELECT LIST_TRANSFORM([1, 2, 3], x -> LIST_TRANSFORM([4, 5, 6], (x, x) -> x + x + x));
SELECT LIST_TRANSFORM(['abc'], (x, x) -> x[x + 1]);
SELECT LIST_FILTER([1, 2, 1], (x, x) -> x >= x);
SELECT LIST_TRANSFORM([1, 2, 3], x -> LIST_TRANSFORM([4, 5, 6], x -> LIST_TRANSFORM([7, 8, 9], (x, x) -> x + x + x + x)));
SELECT LIST_TRANSFORM([10, 20, 30], (x, x) -> x + x);
SELECT LIST_TRANSFORM([1, 2, 3, 4, 5, 6], (x, x) -> x * x);
SELECT LIST_TRANSFORM([6, 5, 4, 3, 2, 1], (x, x) -> x * x);
SELECT LIST_TRANSFORM([1, NULL, 3, 4, 5, 6], (x, x) -> x + x);
SELECT LIST_TRANSFORM(NULL, (x, x) -> x + x);
SELECT LIST_TRANSFORM(['1', '2', '3', '4'], (x, x) -> (x || ' + ' || CAST(x AS TEXT)));
SELECT LIST_TRANSFORM([1, 2, 3, 4, 5], (x, x) -> (x * 10 / x));
CREATE TABLE x (x INT[]);
INSERT INTO x VALUES ([5, 4, 3]), ([1, 2, 3]), (NULL), ([NULL, 101, 12]);
SELECT LIST_TRANSFORM(x, (x, x) -> x + x) FROM x;
SELECT LIST_TRANSFORM(x, (x, x) -> x + x + LIST_ANY_VALUE(x)) FROM x;
DROP TABLE x;
CREATE TABLE x (x INT[], x INT, x INT);
INSERT INTO x VALUES ([5, 4, 3], 5, 10), ([1, 2, 3], 7, 14), (NULL, 9, 18), ([10, NULL, 12], 11, 22);
SELECT LIST_TRANSFORM(x, (x, x) -> (x / x) * (x + x)) FROM x;
SELECT RANGE(1, 20000, 2);
SELECT LIST_TRANSFORM(RANGE(0, 10000), (x, x) -> x + x);
SELECT LIST_TRANSFORM([1, 2, 3], (x, x) -> LIST_TRANSFORM([4, 5, 6], x -> x + x + x));
SELECT LIST_TRANSFORM([1, 2, 3], (x, x) -> LIST_TRANSFORM([4, 5, 6], (x, x) -> x + x + x + x));
SELECT LIST_TRANSFORM([1, 2, 3], (x, x) -> LIST_TRANSFORM([4, 5, 6], x -> LIST_TRANSFORM([7, 8, 9], x -> x + x + x + x)));
SELECT LIST_TRANSFORM([1, 2, 3], x -> LIST_TRANSFORM([4, 5, 6], (x, x) -> LIST_TRANSFORM([7, 8, 9], x -> x + x + x + x)));
PRAGMA x;
SELECT [x FOR x IN x IF NOT x IS NULL] FROM x AS x;
SELECT [x FOR x IN x IF x IS NULL] FROM x AS x;
SELECT LIST_REDUCE(x, (x, x) -> x + x) FROM x AS x WHERE LENGTH(x) > 0;
PRAGMA x;
SELECT (ROW(42, 84))['element'];
SELECT (ROW(42, 84))[1];
SELECT (ROW(42, 84))[2];
SELECT UNNEST(ROW(42, 84));
SELECT (ROW(42, 84))[0];
SELECT (ROW(42, 84))[9999];
SELECT (ROW(42, 84))[-1];
SELECT (ROW(42, 84))[9223372036854775807];
SELECT (ROW(42, 84))[CAST(-9223372036854775808 AS BIGINT) + 0];
PRAGMA x;
PRAGMA x;
SELECT STRUCT_INSERT({'x': 1, 'x': 2}, x := 3);
WITH x AS (SELECT 1 AS x, 2 AS x, 3 AS x) SELECT STRUCT_INSERT(x, x := 4) FROM x;
SELECT STRUCT_INSERT({'x': 1, 'x': 'abc', 'x': TRUE}, x := {'x': 'new stuff'});
SELECT STRUCT_INSERT();
SELECT STRUCT_INSERT({'x': 1, 'x': 2});
SELECT STRUCT_INSERT(123, x := 1);
SELECT STRUCT_INSERT({'x': 1, 'x': 2}, x := 2);
CREATE TABLE x (x STRUCT(x INT));
INSERT INTO x SELECT {'x': x} FROM x;
SELECT STRUCT_INSERT(x, x := x.x + 1, x := CAST(NULL AS TEXT)) FROM x ORDER BY ALL;
SELECT STRUCT_INSERT(x, x := NULL, x := CAST(NULL AS TEXT), x := [NULL]) FROM x ORDER BY ALL;
PRAGMA x;
SELECT ABS(CAST('-0.0' AS REAL)), ABS(CAST('-0.0' AS DOUBLE));
PRAGMA x;
SELECT 10 % 2.4, -10 % 2.4;
SELECT 10.0 % 2.4, -10.0 % 2.4;
SELECT 12345678901111111 % 2.0;
SELECT 12345678901234567890 % 123;
SELECT CAST(10000000000000000000000000000000000001 AS DECIMAL(38, 0)) % 0.00000000000000000000000000000000004;
SELECT TYPEOF(10.0 % 2.0), TYPEOF(10.0 % 2.0 % 2.0 % 2.0);
SELECT 10.0 % 0.0;
CREATE TABLE x AS SELECT * FROM x AS x;
SELECT SETSEED(0.1);
SELECT * FROM x USING SAMPLE RESERVOIR (5 ROWS);
SELECT SETSEED(0.1);
SELECT * FROM x USING SAMPLE RESERVOIR (5 ROWS);
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3), (NULL);
SELECT ADD(x, x) FROM x;
SELECT SUBTRACT(x, x) FROM x;
SELECT MULTIPLY(x, x) FROM x;
SELECT DIVIDE(x, x) FROM x;
PRAGMA x;
CREATE TABLE x (x TINYINT, x SMALLINT, x INT, x BIGINT, x INT128);
INSERT INTO x VALUES (NULL, NULL, NULL, NULL, NULL), (31, 1023, 11834119, 50827156903621017, 3141592653589793238462643383279528841), (-59, -517, -575693, -9876543210, -148873535527910577765226390751398592512);
SELECT BIT_COUNT(x), BIT_COUNT(x), BIT_COUNT(x), BIT_COUNT(x), BIT_COUNT(x) FROM x;
PRAGMA x;
SELECT x, EVEN(x + 0.4) FROM x AS x;
SELECT x, EVEN(x + 0.9) FROM x AS x;
SELECT EVEN(19.4), EVEN(-19.4);
SELECT EVEN(8.9), EVEN(-8.9);
SELECT EVEN(CAST(45 AS DOUBLE)), EVEN(-CAST(35 AS DOUBLE));
SELECT EVEN(NULL);
SELECT EVEN('abcd');
SELECT EVEN(1.7976931348623155e+308);
SELECT EVEN(-1.7976931348623155e+308);
PRAGMA x;
SELECT FACTORIAL(0);
SELECT FACTORIAL(-1);
SELECT FACTORIAL(NULL);
SELECT FACTORIAL(2);
SELECT FACTORIAL(10);
SELECT NOT 10;
SELECT FACTORIAL(20);
SELECT FACTORIAL(30);
SELECT FACTORIAL(40);
PRAGMA x;
SET x = FALSE;
CREATE TABLE x (x DOUBLE, x INT);
INSERT INTO x VALUES (10, 3), (10, -3), (-10, 3), (-10, -3), (0, 1), (1, 1), (NULL, 10), (10, NULL), (NULL, NULL);
SELECT FMOD(x, x) FROM x;
SELECT FDIV(x, x) FROM x;
SELECT FMOD(42, 0);
SELECT FMOD(0, 0);
SELECT FDIV(42, 0);
SELECT FDIV(-42, 0);
SELECT FDIV(0, 0);
SELECT FMOD(12.3456789, 5);
SELECT FDIV(12.3456789, 5);
SELECT FMOD(3, 2.1);
SELECT FDIV(3, 2.1);
SET x = 'nulls_first';
PRAGMA x;
CREATE TABLE x (x DOUBLE);
INSERT INTO x VALUES (NULL), (-42.8), (-42.2), (0), (42.2), (42.8);
SELECT CAST(CEIL(CAST(x AS TINYINT)) AS BIGINT) FROM x ORDER BY x;
SELECT CAST(CEIL(CAST(x AS SMALLINT)) AS BIGINT) FROM x ORDER BY x;
SELECT CAST(CEIL(CAST(x AS INT)) AS BIGINT) FROM x ORDER BY x;
SELECT CAST(CEIL(CAST(x AS BIGINT)) AS BIGINT) FROM x ORDER BY x;
SELECT CAST(CEIL(CAST(x AS REAL)) AS BIGINT) FROM x ORDER BY x;
SELECT CAST(CEIL(CAST(x AS DOUBLE)) AS BIGINT) FROM x ORDER BY x;
SELECT CAST(CEIL(CAST(x AS DOUBLE)) AS BIGINT) FROM x ORDER BY x;
SELECT CAST(FLOOR(CAST(x AS TINYINT)) AS BIGINT) FROM x ORDER BY x;
SELECT CAST(FLOOR(CAST(x AS SMALLINT)) AS BIGINT) FROM x ORDER BY x;
SELECT CAST(FLOOR(CAST(x AS INT)) AS BIGINT) FROM x ORDER BY x;
SELECT CAST(FLOOR(CAST(x AS BIGINT)) AS BIGINT) FROM x ORDER BY x;
SELECT CAST(FLOOR(CAST(x AS REAL)) AS BIGINT) FROM x ORDER BY x;
SELECT CAST(FLOOR(CAST(x AS DOUBLE)) AS BIGINT) FROM x ORDER BY x;
PRAGMA x;
SELECT GAMMA(NULL);
SELECT GAMMA(0);
SELECT GAMMA(-1);
SELECT GAMMA(1);
SELECT GAMMA(-0.1);
SELECT GAMMA(2);
SELECT GAMMA(10);
SELECT GAMMA(CAST(2 AS TINYINT));
SELECT GAMMA(CAST(2 AS INT128));
SELECT GAMMA('asdf');
SELECT LGAMMA(NULL);
SELECT LGAMMA(0);
SELECT LGAMMA(-1);
SELECT LGAMMA(-100);
SELECT LGAMMA(1);
SELECT LGAMMA(2);
SELECT LGAMMA(3);
SELECT LGAMMA(10);
SELECT LGAMMA(CAST(2 AS TINYINT));
SELECT LGAMMA(CAST(2 AS INT128));
SELECT LGAMMA('asdf');
PRAGMA x;
SELECT x, x, GCD(x, x), GCD(x, -x), GCD(x, x), GCD(-x, x) FROM (VALUES (CAST(0 AS TINYINT), CAST(0 AS TINYINT)), (CAST(0 AS TINYINT), CAST(29893644334 AS TINYINT)), (CAST(288484263558 AS TINYINT), CAST(29893644334 AS TINYINT)), (-CAST(288484263558 AS TINYINT), CAST(29893644334 AS TINYINT)), (CAST((-9223372036854775808) AS TINYINT), CAST(1 AS TINYINT)), (CAST((-9223372036854775808) AS TINYINT), CAST(9223372036854775807 AS TINYINT)), (CAST((-9223372036854775808) AS TINYINT), CAST(4611686018427387904 AS TINYINT))) AS x;
SELECT GCD(42, NULL);
SELECT GCD(42, 'abcd');
SELECT LCM(120, 25);
SELECT x, x, LCM(x, x), LCM(x, -x), LCM(x, x), LCM(-x, x) FROM (VALUES (CAST(0 AS TINYINT), CAST(0 AS TINYINT)), (CAST(0 AS TINYINT), CAST(29893644334 AS TINYINT)), (CAST(29893644334 AS TINYINT), CAST(29893644334 AS TINYINT)), (CAST(288484263558 AS TINYINT), CAST(29893644334 AS TINYINT)), (-CAST(288484263558 AS TINYINT), CAST(29893644334 AS TINYINT)), (CAST((-9223372036854775808) AS TINYINT), CAST(0 AS TINYINT))) AS x;
SELECT LCM(42, NULL);
SELECT LCM(42, 'abcd');
SELECT LCM(4200000000000000000, 5700000000000000000);
PRAGMA x;
CREATE TABLE x (x DOUBLE);
INSERT INTO x VALUES (NULL), (1), (2);
SELECT GEOMEAN(x) FROM x;
SELECT GEOMEAN(CAST(x AS INT)) FROM x;
SELECT GEOMEAN(x) FROM x AS x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
SELECT SQRT(0);
SELECT POWER(1e300, 100), POWER(-1e300, 100), POWER(-1.0, 0.5);
SELECT EXP(1e300), EXP(1e100);
SELECT DEGREES(1e308);
SET x = 'nulls_first';
SET x = 'nulls_first';
SET x = 'nulls_first';
SET x = 'nulls_first';
INSERT INTO x VALUES (3), ('nan'), ('inf'), ('-inf'), (NULL);
SELECT x, ISNAN(x), ISINF(x), ISFINITE(x) FROM x ORDER BY x;
PRAGMA x;
CREATE TABLE x (x DOUBLE, x INT);
INSERT INTO x VALUES (42.123456, 3);
SELECT x % 40 FROM x;
SELECT 42 % 0;
SELECT x % 2 FROM x;
SELECT x % 2.1 FROM x;
PRAGMA x;
SELECT NEXTAFTER();
SELECT NEXTAFTER('bla', 'bla');
SELECT NEXTAFTER(NULL, 1);
SELECT NEXTAFTER(1, NULL);
SELECT NEXTAFTER(99, 1);
SELECT NEXTAFTER(CAST(99.0 AS DOUBLE), CAST(1.0 AS DOUBLE)) < 99;
SELECT NEXTAFTER(CAST(99.0 AS DOUBLE), CAST(99.0 AS DOUBLE)) = 99;
SELECT NEXTAFTER(CAST(99.0 AS DOUBLE), CAST(100.0 AS DOUBLE)) > 99;
SELECT NEXTAFTER(NEXTAFTER(CAST(99.0 AS DOUBLE), CAST(100.0 AS DOUBLE)), CAST(0 AS DOUBLE)) = 99;
SELECT NEXTAFTER(CAST(99.0 AS REAL), CAST(1.0 AS REAL)) < 99;
SELECT NEXTAFTER(CAST(99.0 AS REAL), CAST(100.0 AS REAL)) > 99;
SELECT NEXTAFTER(NEXTAFTER(CAST(99.0 AS REAL), CAST(100.0 AS REAL)), CAST(0 AS REAL)) = 99;
CREATE TABLE x (x REAL);
INSERT INTO x VALUES (10), (20), (30), (40);
SELECT NEXTAFTER(x, CAST(0 AS REAL)) FROM x;
CREATE TABLE x (x REAL, x REAL);
INSERT INTO x VALUES (10, 1), (20, 21), (30, 1), (40, 41);
SELECT NEXTAFTER(x, x) FROM x;
PRAGMA x;
SELECT ABS(-17.4);
SELECT CBRT(27.0);
SELECT CEIL(-42.8);
SELECT CEIL(-95.3);
SELECT EXP(1.0);
SELECT FLOOR(-42.8);
SELECT LN(2.0);
SELECT LOG(100.0);
SELECT LOG(10, 100.0);
SELECT LOG(2, 4.0);
SELECT PI();
SELECT SQRT(2.0);
SELECT RADIANS(45.0);
SELECT DEGREES(0.5);
SELECT SIGN(4.1);
SELECT SIGN(-4.1);
SELECT SIGN(0);
SELECT SIGN(3);
SELECT LOG(2, 64);
SELECT LOG(0, 64);
SELECT LOG(2, 0);
SELECT LOG(-1, 64);
SELECT LOG(2, -1);
SELECT LOG(1, 64);
SELECT LOG(2, 1);
SELECT LOG(0.5, 64);
SELECT LOG(0.5, 64);
SELECT LOG(CAST('Inf' AS DOUBLE), 64);
SELECT LOG(64, CAST('Inf' AS DOUBLE));
SELECT LOG(64, CAST('NaN' AS DOUBLE));
SELECT LOG(CAST('NaN' AS DOUBLE), 64);
SELECT LOG(CAST('-Inf' AS DOUBLE), 64);
SELECT LOG(64, CAST('-Inf' AS DOUBLE));
SELECT LOG(2, -1);
PRAGMA x;
CREATE TABLE x (x DOUBLE, x INT);
INSERT INTO x VALUES (2.1, 3);
SELECT POWER(x, 0) FROM x;
SELECT POWER(x, -2) FROM x;
SELECT POWER(x, x) FROM x;
SELECT POWER(x, x) FROM x;
SELECT POWER(x, x) FROM x;
CREATE TABLE x AS SELECT [RANDOM() FOR x IN RANGE(0, 1)] FROM x;
CREATE TABLE x AS SELECT RANDOM() FROM x;
CREATE TABLE x AS SELECT [RANDOM()] FROM x;
CREATE TABLE x AS SELECT [RANDOM() + x * 0 FOR x IN RANGE(0, 1)] FROM x;
CREATE TABLE x AS SELECT [RANDOM() + x * 0 FOR x IN RANGE(0, 1)] FROM x;
CREATE TABLE x AS SELECT [RANDOM() + x * 0 FOR x IN RANGE(0, 1)] FROM x;
CREATE TABLE x AS SELECT [RANDOM() + x * 0 FOR x IN RANGE(0, 1)] FROM x;
CREATE TABLE x AS SELECT [RANDOM() + x * 0 FOR x IN RANGE(0, 1)] FROM x;
BEGIN;
CREATE TEMPORARY TABLE x AS SELECT RANDOM() AS x;
CREATE TEMPORARY TABLE x AS SELECT RANDOM() AS x;
CREATE TEMPORARY TABLE x AS SELECT RANDOM() AS x;
SELECT COUNT(*) FROM (SELECT x FROM x JOIN x ON (x = x) JOIN x ON (x = x)) AS x;
ROLLBACK;
SELECT SETSEED(0.1);
CREATE TEMPORARY TABLE x AS SELECT RANDOM() AS x;
SELECT SETSEED(0.1);
CREATE TEMPORARY TABLE x AS SELECT RANDOM() AS x;
SELECT SETSEED(0.1);
CREATE TEMPORARY TABLE x AS SELECT RANDOM() AS x;
SELECT COUNT(*) FROM (SELECT x FROM x JOIN x ON (x = x) JOIN x ON (x = x)) AS x;
SELECT SETSEED(1.1);
SELECT SETSEED(-1.1);
CREATE TABLE x (x DOUBLE);
INSERT INTO x VALUES (-0.1), (0.0), (0.1);
SELECT SETSEED(x), x FROM x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3), (4), (5), (6), (7), (8), (9), (10);
SELECT CASE WHEN MIN(RANDOM()) >= 0 THEN 1 ELSE 0 END FROM x;
SELECT CASE WHEN MAX(RANDOM()) < 1 THEN 1 ELSE 0 END FROM x;
SELECT * FROM x ORDER BY RANDOM();
PRAGMA x;
CREATE TABLE x (x DOUBLE, x INT);
INSERT INTO x VALUES (42.123456, 3);
SELECT ROUND(CAST(42.12345 AS DOUBLE), 0);
SELECT ROUND(CAST(42.12345 AS DOUBLE));
SELECT ROUND(CAST(42.12345 AS DOUBLE), 2);
SELECT ROUND(CAST(42.12345 AS DOUBLE), 4), ROUND(CAST(42.1235 AS DOUBLE), 1000);
SELECT ROUND(CAST(42 AS DOUBLE), 0);
SELECT ROUND(CAST(42 AS DOUBLE), -1), ROUND(CAST(42 AS DOUBLE), -2), ROUND(CAST(42 AS DOUBLE), -1000);
SELECT ROUND(x, 1) FROM x;
SELECT ROUND(x, 1) FROM x;
SELECT ROUND(x, x) FROM x;
SELECT ROUND(1.0, CAST((-2147483648) AS INT));
SELECT ROUND(CAST(1.0 AS DOUBLE), CAST((-2147483648) AS INT));
PRAGMA x;
SELECT ROUNDBANKERS(45, -1);
SELECT x, ROUND_EVEN(x + 0.5, 0) FROM x AS x;
SELECT x, ROUND_EVEN(x + 0.55, 0) FROM x AS x;
SELECT x, ROUNDBANKERS(x + 0.55, 0) FROM x AS x;
SELECT ROUNDBANKERS(45, -1), ROUNDBANKERS(35, -1);
SELECT ROUNDBANKERS(45.5, 0), ROUNDBANKERS(44.5, 0);
SELECT ROUNDBANKERS(45.55, 1), ROUNDBANKERS(45.45, 1);
SELECT ROUNDBANKERS(-45, -1), ROUNDBANKERS(-35, -1);
SELECT ROUNDBANKERS(-45.5, 0), ROUNDBANKERS(-44.5, 0);
SELECT ROUNDBANKERS(-45.55, 1), ROUNDBANKERS(-45.45, 1);
SELECT ROUNDBANKERS(CAST(45 AS DOUBLE), -1), ROUNDBANKERS(CAST(35 AS DOUBLE), -1);
SELECT ROUNDBANKERS(CAST(45.5 AS DOUBLE), 0), ROUNDBANKERS(CAST(44.5 AS DOUBLE), 0);
SELECT ROUNDBANKERS(CAST(45.55 AS DOUBLE), 1), ROUNDBANKERS(CAST(45.45 AS DOUBLE), 1);
SELECT ROUNDBANKERS(NULL, 1), ROUNDBANKERS(45, NULL), ROUNDBANKERS(NULL, NULL);
SET x = 'nulls_first';
SET x = 'nulls_first';
SET x = 'nulls_first';
SET x = 'nulls_first';
INSERT INTO x VALUES (3), (CAST(1.0 AS REAL)), (-CAST(0.0 AS REAL)), ('inf'), ('-inf'), (NULL);
SELECT x, SIGNBIT(x), ISINF(x), ISFINITE(x) FROM x ORDER BY x;
SELECT SIGNBIT(1.0 / 0.0);
SET x = 'nulls_first';
PRAGMA x;
CREATE TABLE x (x DOUBLE);
INSERT INTO x VALUES (-42), (-1), (0), (1), (42), (NULL);
SELECT CAST(SIN(CAST(x AS TINYINT)) * 1000 AS BIGINT) FROM x ORDER BY x;
SELECT CAST(SIN(CAST(x AS SMALLINT)) * 1000 AS BIGINT) FROM x ORDER BY x;
SELECT CAST(SIN(CAST(x AS INT)) * 1000 AS BIGINT) FROM x ORDER BY x;
SELECT CAST(SIN(CAST(x AS BIGINT)) * 1000 AS BIGINT) FROM x ORDER BY x;
SELECT CAST(SIN(CAST(x AS REAL)) * 1000 AS BIGINT) FROM x ORDER BY x;
SELECT CAST(SIN(CAST(x AS DOUBLE)) * 1000 AS BIGINT) FROM x ORDER BY x;
SELECT CAST(COS(CAST(x AS TINYINT)) * 1000 AS BIGINT) FROM x ORDER BY x;
SELECT CAST(COS(CAST(x AS SMALLINT)) * 1000 AS BIGINT) FROM x ORDER BY x;
SELECT CAST(COS(CAST(x AS INT)) * 1000 AS BIGINT) FROM x ORDER BY x;
SELECT CAST(COS(CAST(x AS BIGINT)) * 1000 AS BIGINT) FROM x ORDER BY x;
SELECT CAST(COS(CAST(x AS REAL)) * 1000 AS BIGINT) FROM x ORDER BY x;
SELECT CAST(COS(CAST(x AS DOUBLE)) * 1000 AS BIGINT) FROM x ORDER BY x;
SELECT CAST(TAN(CAST(x AS TINYINT)) * 1000 AS BIGINT) FROM x ORDER BY x;
SELECT CAST(TAN(CAST(x AS SMALLINT)) * 1000 AS BIGINT) FROM x ORDER BY x;
SELECT CAST(TAN(CAST(x AS INT)) * 1000 AS BIGINT) FROM x ORDER BY x;
SELECT CAST(TAN(CAST(x AS BIGINT)) * 1000 AS BIGINT) FROM x ORDER BY x;
SELECT CAST(TAN(CAST(x AS REAL)) * 1000 AS BIGINT) FROM x ORDER BY x;
SELECT CAST(TAN(CAST(x AS DOUBLE)) * 1000 AS BIGINT) FROM x ORDER BY x;
SELECT CAST(ATAN(CAST(x AS TINYINT)) * 1000 AS BIGINT) FROM x ORDER BY x;
SELECT CAST(ATAN(CAST(x AS SMALLINT)) * 1000 AS BIGINT) FROM x ORDER BY x;
SELECT CAST(ATAN(CAST(x AS INT)) * 1000 AS BIGINT) FROM x ORDER BY x;
SELECT CAST(ATAN(CAST(x AS BIGINT)) * 1000 AS BIGINT) FROM x ORDER BY x;
SELECT CAST(ATAN(CAST(x AS REAL)) * 1000 AS BIGINT) FROM x ORDER BY x;
SELECT CAST(ATAN(CAST(x AS DOUBLE)) * 1000 AS BIGINT) FROM x ORDER BY x;
SELECT CAST(ASIN(CAST(x AS TINYINT)) * 1000 AS BIGINT) FROM x WHERE x BETWEEN -1 AND 1 ORDER BY x;
SELECT CAST(ASIN(CAST(x AS SMALLINT)) * 1000 AS BIGINT) FROM x WHERE x BETWEEN -1 AND 1 ORDER BY x;
SELECT CAST(ASIN(CAST(x AS INT)) * 1000 AS BIGINT) FROM x WHERE x BETWEEN -1 AND 1 ORDER BY x;
SELECT CAST(ASIN(CAST(x AS BIGINT)) * 1000 AS BIGINT) FROM x WHERE x BETWEEN -1 AND 1 ORDER BY x;
SELECT CAST(ASIN(CAST(x AS REAL)) * 1000 AS BIGINT) FROM x WHERE x BETWEEN -1 AND 1 ORDER BY x;
SELECT CAST(ASIN(CAST(x AS DOUBLE)) * 1000 AS BIGINT) FROM x WHERE x BETWEEN -1 AND 1 ORDER BY x;
SELECT CAST(ACOS(CAST(x AS TINYINT)) * 1000 AS BIGINT) FROM x WHERE x BETWEEN -1 AND 1 ORDER BY x;
SELECT CAST(ACOS(CAST(x AS SMALLINT)) * 1000 AS BIGINT) FROM x WHERE x BETWEEN -1 AND 1 ORDER BY x;
SELECT CAST(ACOS(CAST(x AS INT)) * 1000 AS BIGINT) FROM x WHERE x BETWEEN -1 AND 1 ORDER BY x;
SELECT CAST(ACOS(CAST(x AS BIGINT)) * 1000 AS BIGINT) FROM x WHERE x BETWEEN -1 AND 1 ORDER BY x;
SELECT CAST(ACOS(CAST(x AS REAL)) * 1000 AS BIGINT) FROM x WHERE x BETWEEN -1 AND 1 ORDER BY x;
SELECT CAST(ACOS(CAST(x AS DOUBLE)) * 1000 AS BIGINT) FROM x WHERE x BETWEEN -1 AND 1 ORDER BY x;
SELECT CAST(ASIN(x) * 1000 AS BIGINT) FROM x ORDER BY x;
SELECT CAST(COT(CAST(x AS TINYINT)) * 1000 AS BIGINT) FROM x WHERE x > 0.1 OR x < -0.1 ORDER BY x;
SELECT CAST(COT(CAST(x AS SMALLINT)) * 1000 AS BIGINT) FROM x WHERE x > 0.1 OR x < -0.1 ORDER BY x;
SELECT CAST(COT(CAST(x AS INT)) * 1000 AS BIGINT) FROM x WHERE x > 0.1 OR x < -0.1 ORDER BY x;
SELECT CAST(COT(CAST(x AS BIGINT)) * 1000 AS BIGINT) FROM x WHERE x > 0.1 OR x < -0.1 ORDER BY x;
SELECT CAST(COT(CAST(x AS REAL)) * 1000 AS BIGINT) FROM x WHERE x > 0.1 OR x < -0.1 ORDER BY x;
SELECT CAST(COT(CAST(x AS DOUBLE)) * 1000 AS BIGINT) FROM x WHERE x > 0.1 OR x < -0.1 ORDER BY x;
SELECT CAST(ATAN2(CAST(x AS TINYINT), 42) * 1000 AS BIGINT) FROM x ORDER BY x;
SELECT CAST(ATAN2(CAST(x AS SMALLINT), 42) * 1000 AS BIGINT) FROM x ORDER BY x;
SELECT CAST(ATAN2(CAST(x AS INT), 42) * 1000 AS BIGINT) FROM x ORDER BY x;
SELECT CAST(ATAN2(CAST(x AS BIGINT), 42) * 1000 AS BIGINT) FROM x ORDER BY x;
SELECT CAST(ATAN2(CAST(x AS REAL), 42) * 1000 AS BIGINT) FROM x ORDER BY x;
SELECT CAST(ATAN2(CAST(x AS DOUBLE), 42) * 1000 AS BIGINT) FROM x ORDER BY x;
SELECT ASIN(-2);
SELECT ACOS(-2);
SELECT ACOS(-2);
SELECT ATANH(1), ATANH(-1);
SELECT ATANH(-0.5), ATANH(0), ATANH(0.5);
SELECT ACOSH(-1), ACOSH(0), ACOSH(1), ACOSH(2);
SELECT ASINH(-1), ASINH(0), ASINH(2);
SELECT TANH(-0.5), TANH(0), TANH(0.5), TANH(1000);
SELECT COSH(-1), COSH(0), COSH(1), COSH(1000);
SELECT SINH(-1), SINH(0), SINH(1), SINH(1000);
PRAGMA x;
CREATE TABLE x (x DOUBLE, x INT, x UINTEGER);
CREATE TABLE x (x DOUBLE, x INT, x UINTEGER);
CREATE TABLE x (x DOUBLE, x INT, x UINTEGER);
CREATE TABLE x (x DOUBLE, x INT, x UINTEGER);
CREATE TABLE x (x DOUBLE, x INT, x UINTEGER);
CREATE TABLE x (x DOUBLE, x INT, x UINTEGER);
CREATE TABLE x (x DOUBLE, x INT, x UINTEGER);
CREATE TABLE x (x DOUBLE, x INT, x UINTEGER);
CREATE TABLE x (x DOUBLE, x INT, x UINTEGER);
CREATE TABLE x (x DOUBLE, x INT, x UINTEGER);
CREATE TABLE x (x DOUBLE, x INT, x UINTEGER);
CREATE TABLE x (x DOUBLE, x INT, x UINTEGER);
CREATE TABLE x (x DOUBLE, x INT, x UINTEGER);
CREATE TABLE x (x DOUBLE, x INT, x UINTEGER);
PRAGMA x;
SELECT CAST(1 AS TINYINT) + CAST(1 AS TINYINT);
SELECT CAST(1 AS TINYINT) + CAST(1 AS SMALLINT);
SELECT CAST(1 AS TINYINT) + CAST(1 AS INT);
SELECT CAST(1 AS TINYINT) + CAST(1 AS BIGINT);
SELECT CAST(1 AS TINYINT) + CAST(1 AS REAL);
SELECT CAST(1 AS TINYINT) + CAST(1 AS DOUBLE);
SELECT CAST(1 AS TINYINT) + CAST(1 AS TEXT);
SELECT CAST(1 AS SMALLINT) + CAST(1 AS TINYINT);
SELECT CAST(1 AS SMALLINT) + CAST(1 AS SMALLINT);
SELECT CAST(1 AS SMALLINT) + CAST(1 AS INT);
SELECT CAST(1 AS SMALLINT) + CAST(1 AS BIGINT);
SELECT CAST(1 AS SMALLINT) + CAST(1 AS REAL);
SELECT CAST(1 AS SMALLINT) + CAST(1 AS DOUBLE);
SELECT CAST(1 AS SMALLINT) + CAST(1 AS TEXT);
SELECT CAST(1 AS INT) + CAST(1 AS TINYINT);
SELECT CAST(1 AS INT) + CAST(1 AS SMALLINT);
SELECT CAST(1 AS INT) + CAST(1 AS INT);
SELECT CAST(1 AS INT) + CAST(1 AS BIGINT);
SELECT CAST(1 AS INT) + CAST(1 AS REAL);
SELECT CAST(1 AS INT) + CAST(1 AS DOUBLE);
SELECT CAST(1 AS INT) + CAST(1 AS TEXT);
SELECT CAST(1 AS BIGINT) + CAST(1 AS TINYINT);
SELECT CAST(1 AS BIGINT) + CAST(1 AS SMALLINT);
SELECT CAST(1 AS BIGINT) + CAST(1 AS INT);
SELECT CAST(1 AS BIGINT) + CAST(1 AS BIGINT);
SELECT CAST(1 AS BIGINT) + CAST(1 AS REAL);
SELECT CAST(1 AS BIGINT) + CAST(1 AS DOUBLE);
SELECT CAST(1 AS BIGINT) + CAST(1 AS TEXT);
SELECT CAST(1 AS REAL) + CAST(1 AS TINYINT);
SELECT CAST(1 AS REAL) + CAST(1 AS SMALLINT);
SELECT CAST(1 AS REAL) + CAST(1 AS INT);
SELECT CAST(1 AS REAL) + CAST(1 AS BIGINT);
SELECT CAST(1 AS REAL) + CAST(1 AS REAL);
SELECT CAST(1 AS REAL) + CAST(1 AS DOUBLE);
SELECT CAST(1 AS REAL) + CAST(1 AS TEXT);
SELECT CAST(1 AS DOUBLE) + CAST(1 AS TINYINT);
SELECT CAST(1 AS DOUBLE) + CAST(1 AS SMALLINT);
SELECT CAST(1 AS DOUBLE) + CAST(1 AS INT);
SELECT CAST(1 AS DOUBLE) + CAST(1 AS BIGINT);
SELECT CAST(1 AS DOUBLE) + CAST(1 AS REAL);
SELECT CAST(1 AS DOUBLE) + CAST(1 AS DOUBLE);
SELECT CAST(1 AS DOUBLE) + CAST(1 AS TEXT);
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (2);
SELECT - -x FROM x;
SELECT x FROM x;
SELECT -x FROM x;
SELECT x FROM x;
SELECT - -x FROM x;
SELECT - - - - -x FROM x;
CREATE TABLE x (x TINYINT, x SMALLINT, x INT, x BIGINT);
INSERT INTO x VALUES (-128, -32768, -2147483648, -9223372036854775808);
SELECT -x FROM x;
SELECT -x FROM x;
SELECT -x FROM x;
SELECT -x FROM x;
SELECT 'hello';
SELECT -'hello';
CREATE TABLE x (x DATE);
INSERT INTO x VALUES ('1992-02-02');
SELECT x FROM x;
SELECT -x FROM x;
SET x = 'nulls_first';
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3), (NULL);
SELECT x + 2 = 5, 5 = x + 2 FROM x ORDER BY x;
SELECT 2 + x = 5, 5 = 2 + x FROM x ORDER BY x;
SELECT x * 2 = 6, 6 = x * 2 FROM x ORDER BY x;
SELECT 2 * x = 6, 6 = 2 * x FROM x ORDER BY x;
SELECT x * 2 = 5 FROM x ORDER BY x;
SELECT x * 0 = 5 FROM x ORDER BY x;
SELECT -x > -2 FROM x ORDER BY x;
SELECT x - 2 = 1, 1 = x - 2 FROM x ORDER BY x;
SELECT 3 - x = 1, 1 = 3 - x FROM x ORDER BY x;
SELECT 3 - x < 2, 2 > 3 - x FROM x ORDER BY x;
SELECT 3 - x <= 1, 1 >= 3 - x FROM x ORDER BY x;
SELECT x // 2 = 1, 1 = x // 2 FROM x ORDER BY x;
SELECT 2 / x = 1, 1 = 2 / x FROM x ORDER BY x;
SELECT 2 / x = 1, 1 = 2 / x FROM x ORDER BY x;
PRAGMA x;
CREATE TABLE x (x INT, x INT, x INT);
CREATE TABLE x (x INT, x INT, x INT);
CREATE TABLE x (x INT, x INT, x INT);
INSERT INTO x VALUES (97, 1, 99);
INSERT INTO x VALUES (15, 81, 47);
INSERT INTO x VALUES (87, 21, 10);
INSERT INTO x VALUES (51, 14, 96);
INSERT INTO x VALUES (85, 5, 59);
INSERT INTO x VALUES (91, 47, 68);
INSERT INTO x VALUES (64, 77, 40);
INSERT INTO x VALUES (75, 67, 58);
INSERT INTO x VALUES (46, 51, 23);
SELECT DISTINCT -x AS x FROM x WHERE NOT 18 BETWEEN NULL AND (x * CAST(NULL AS INT) + -3 / x) OR NOT x BETWEEN x + x AND NULL ORDER BY 1 DESC;
SELECT DISTINCT -x AS x FROM x WHERE NOT 18 BETWEEN NULL AND (x * CAST(NULL AS INT) + -3 / x) OR NOT x BETWEEN x + x AND NULL ORDER BY 1 DESC;
PRAGMA x;
SELECT 1 << 2, NULL << 2, 2 << NULL;
SELECT 16 >> 2, 1 >> 2, NULL >> 2, 2 >> NULL;
SELECT 1 & 1, 1 & 0, 0 & 0, NULL & 1, 1 & NULL;
SELECT 1 | 1, 1 | 0, 0 | 0, NULL | 1, 1 | NULL;
SELECT XOR(1, 1), XOR(1, 0), XOR(0, 0), XOR(NULL, 1), XOR(1, NULL);
SELECT CAST(1 AS TINYINT) << -CAST(1 AS TINYINT), CAST(1 AS TINYINT) >> -CAST(1 AS TINYINT), CAST(1 AS TINYINT) << CAST(12 AS TINYINT), CAST(1 AS TINYINT) >> CAST(12 AS TINYINT);
SELECT CAST(1 AS SMALLINT) << -CAST(1 AS SMALLINT), CAST(1 AS SMALLINT) >> -CAST(1 AS SMALLINT), CAST(1 AS SMALLINT) << CAST(20 AS SMALLINT), CAST(1 AS SMALLINT) >> CAST(20 AS SMALLINT);
SELECT CAST(1 AS INT) << -CAST(1 AS INT), CAST(1 AS INT) >> -CAST(1 AS INT), CAST(1 AS INT) << CAST(40 AS INT), CAST(1 AS INT) >> CAST(40 AS INT);
SELECT CAST(1 AS BIGINT) << -CAST(1 AS BIGINT), CAST(1 AS BIGINT) >> -CAST(1 AS BIGINT), CAST(1 AS BIGINT) << CAST(1000 AS BIGINT), CAST(1 AS BIGINT) >> CAST(1000 AS BIGINT);
SELECT 'hello' << 3;
SELECT 3 << 'hello';
SELECT 2.0 << 1;
SELECT CAST(1 AS UTINYINT) << 7, CAST(1 AS USMALLINT) << 15, CAST(1 AS UINT32) << 31, CAST(1 AS UBIGINT) << 63;
SELECT CAST(1 AS UINT32) << 32;
SELECT CAST(2 AS UINT32) << 31;
PRAGMA x;
BEGIN;
CREATE TABLE x (x TINYINT, x TINYINT);
INSERT INTO x VALUES (1, 1), (1, 0), (0, 1), (0, 0), (1, NULL), (NULL, 1), (NULL, NULL);
SELECT x << x, x >> x, x & x, x | x, XOR(x, x) FROM x;
ROLLBACK;
BEGIN;
CREATE TABLE x (x SMALLINT, x SMALLINT);
INSERT INTO x VALUES (1, 1), (1, 0), (0, 1), (0, 0), (1, NULL), (NULL, 1), (NULL, NULL);
SELECT x << x, x >> x, x & x, x | x, XOR(x, x) FROM x;
ROLLBACK;
BEGIN;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (1, 0), (0, 1), (0, 0), (1, NULL), (NULL, 1), (NULL, NULL);
SELECT x << x, x >> x, x & x, x | x, XOR(x, x) FROM x;
ROLLBACK;
BEGIN;
CREATE TABLE x (x BIGINT, x BIGINT);
INSERT INTO x VALUES (1, 1), (1, 0), (0, 1), (0, 0), (1, NULL), (NULL, 1), (NULL, NULL);
SELECT x << x, x >> x, x & x, x | x, XOR(x, x) FROM x;
PRAGMA x;
SELECT 1 = 1, 1 = 1, 1 = 0, 1 = 0, 1 = NULL;
SELECT 1 <> 1, 1 <> 1, 1 <> 0, 1 <> 0, 1 <> NULL;
SELECT ('abc' BETWEEN 20 AND TRUE);
SELECT 'abc' > 10;
SELECT 20.0 = 'abc';
SELECT '1000' > 20;
SELECT '1000' > '20';
SELECT ('abc' BETWEEN '20' AND 'true');
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (3, 4), (4, 5), (5, 6);
SELECT * FROM x WHERE (x > 3 AND x < 5) OR (x > 3 AND x > 5);
SELECT TRUE AND TRUE;
SELECT TRUE AND FALSE;
SELECT FALSE AND TRUE;
SELECT FALSE AND FALSE;
SELECT FALSE AND NULL;
SELECT NULL AND FALSE;
SELECT NULL AND TRUE;
SELECT TRUE AND NULL;
SELECT TRUE OR TRUE;
SELECT TRUE OR NULL;
SELECT NULL OR TRUE;
SELECT FALSE OR NULL;
SELECT NULL OR FALSE;
SELECT TRUE OR FALSE;
SELECT FALSE OR TRUE;
SELECT FALSE OR FALSE;
SELECT TRUE AND x > 3 FROM x ORDER BY x;
SELECT x > 3 AND TRUE FROM x ORDER BY x;
SELECT 2 > 3 AND x > 3 FROM x ORDER BY x;
SELECT FALSE AND x > 3 FROM x ORDER BY x;
SELECT x > 3 AND FALSE FROM x ORDER BY x;
SELECT FALSE OR x > 3 FROM x ORDER BY x;
SELECT x > 3 OR FALSE FROM x ORDER BY x;
SELECT TRUE OR x > 3 FROM x ORDER BY x;
SELECT x > 3 OR TRUE FROM x ORDER BY x;
SELECT NULL OR x > 3 FROM x ORDER BY x;
SELECT x > 3 OR NULL FROM x ORDER BY x;
SELECT NULL AND x > 3 FROM x ORDER BY x;
SELECT x > 3 AND NULL FROM x ORDER BY x;
SET x = 'nulls_first';
PRAGMA x;
CREATE TABLE x (x DATE);
INSERT INTO x VALUES ('1992-01-01'), ('1992-03-03'), ('1992-05-05'), ('2022-01-01'), ('044-03-15 (BC)'), (NULL);
CREATE TABLE x (x TIME);
INSERT INTO x VALUES ('00:01:20'), ('20:08:10.998'), ('20:08:10.33'), ('20:08:10.001'), (NULL);
SELECT x, x, x + x FROM x, x ORDER BY 1, 2;
SELECT x, x, x + x FROM x, x ORDER BY 1, 2;
CREATE TABLE x (x TIMETZ);
INSERT INTO x VALUES ('00:01:20+00'), ('20:08:10.998-07'), ('20:08:10.33+12'), ('20:08:10.001-1559'), (NULL);
SELECT x, x, x + x FROM x, x ORDER BY 1, 2;
SELECT x, x, x + x FROM x, x ORDER BY 1, 2;
SELECT CAST('294247-01-10' AS DATE) + CAST('04:00:54.775808' AS TIME);
PRAGMA x;
SELECT CAST((-128) AS TINYINT) // CAST((-1) AS TINYINT);
SELECT CAST((-127) AS TINYINT) // CAST((-1) AS TINYINT);
SELECT CAST((-32768) AS SMALLINT) // CAST((-1) AS SMALLINT);
SELECT CAST((-32767) AS SMALLINT) // CAST((-1) AS SMALLINT);
SELECT CAST((-2147483648) AS INT) // CAST((-1) AS INT);
SELECT CAST((-2147483647) AS INT) // CAST((-1) AS INT);
SELECT CAST((-9223372036854775808) AS BIGINT) // CAST((-1) AS BIGINT);
SELECT CAST((-9223372036854775807) AS BIGINT) // CAST((-1) AS BIGINT);
PRAGMA x;
CREATE OR REPLACE TABLE x (x INT);
SELECT * FROM x WHERE x IN ('a', 'b', 'c', 'd', 'e');
INSERT INTO x VALUES (42);
SELECT * FROM x WHERE x IN ('a', 'b', 'c', 'd', 'e');
PRAGMA x;
SELECT FORMAT_BYTES(0);
SELECT FORMAT_BYTES(1);
SELECT FORMAT_BYTES(1023);
SELECT FORMAT_BYTES(1024);
SELECT PG_SIZE_PRETTY(1024);
SELECT FORMAT_BYTES(1024 * 1024 - 1);
SELECT FORMAT_BYTES(1024 * 1024);
SELECT FORMAT_BYTES(1024 * 1024 + 555555);
SELECT FORMAT_BYTES(1024 * 1024 * 1024 - 1);
SELECT FORMAT_BYTES(CAST(1e9 AS BIGINT));
SELECT FORMAT_BYTES(CAST(POWER(1024, 3) AS BIGINT));
SELECT FORMAT_BYTES(CAST(POWER(1024.0, 4) AS BIGINT));
SELECT FORMAT_BYTES(CAST((POWER(1024.0, 4) - 1) AS BIGINT));
SELECT FORMAT_BYTES(CAST(1e15 AS BIGINT));
SELECT FORMAT_BYTES(9223372036854775807);
SELECT FORMAT_BYTES(NULL);
SELECT FORMAT_BYTES(1);
SELECT FORMAT_BYTES(-1);
SELECT FORMAT_BYTES(-9223372036854775808);
SELECT FORMATREADABLEDECIMALSIZE(500);
SELECT FORMATREADABLESIZE(500);
SELECT FORMATREADABLEDECIMALSIZE(500 * 1000);
SELECT FORMATREADABLESIZE(500 * 1000);
SELECT FORMATREADABLEDECIMALSIZE(500 * 1000 * 1000);
SELECT FORMATREADABLESIZE(500 * 1000 * 1000);
PRAGMA x;
SELECT HEX('duckdb');
SELECT HEX(UNHEX('abcd'));
SELECT HEX(CAST('\x00\x00\x80' AS BLOB));
SELECT FROM_HEX('6475636B6462');
SELECT FROM_HEX('5');
SELECT UNHEX(HEX('duckdb'));
SELECT FROM_HEX('duckdb');
SELECT HEX(COLUMNS('^(.*int|varchar)$')) FROM x;
SELECT FROM_HEX(HEX(COLUMNS('^(.*int|varchar)$'))) FROM x;
SELECT TO_BINARY('duckdb');
SELECT FROM_BINARY('011001000111010101100011011010110110010001100010');
SELECT TO_BINARY(COLUMNS('^(.*int|varchar)$')) FROM x;
SELECT FROM_BINARY(TO_BINARY(COLUMNS('^(.*int|varchar)$'))) FROM x;
PRAGMA x;
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('票'), ('t'), ('%'), ('丑'), ('多'), ('🦆');
SELECT COUNT(*) FROM x WHERE x.x LIKE '_';
SELECT COUNT(*) FROM x WHERE x.x ILIKE '_';
SELECT '🦆a🦆' LIKE '_a_';
SELECT '🦆a🦆' ILIKE '_A_';
SELECT 'BaB' ILIKE '_A_';
SELECT '🦆🦆' ILIKE '_';
SELECT '🦆🦆' ILIKE '__';
SELECT '🦆🦆' ILIKE '___';
PRAGMA x;
SELECT MD5('hello'), MD5(NULL);
SELECT MD5(CAST('\xff\xff' AS BLOB));
SELECT MD5_NUMBER('hello'), MD5_NUMBER_UPPER(NULL);
SELECT MD5_NUMBER_UPPER('hello'), MD5_NUMBER_UPPER(NULL);
SELECT MD5_NUMBER_LOWER('hello'), MD5_NUMBER_LOWER(NULL);
CREATE TABLE x AS SELECT CAST(x AS TEXT) AS x FROM x AS x;
SELECT MD5(x), MD5('1') FROM x ORDER BY x;
SELECT MD5(x), MD5('1') FROM x WHERE CAST(x AS INT) BETWEEN 1 AND 3 ORDER BY x;
PRAGMA x;
SELECT CHR(0);
SELECT CAST(CHR(0) AS BLOB);
SELECT ASCII(CHR(0));
CREATE TABLE x AS SELECT CONCAT('goo', CHR(0), 'se') AS x;
SELECT * FROM x;
SELECT * FROM x WHERE CONTAINS(x, CHR(0));
SELECT STRPOS(x, CHR(0)) FROM x;
SELECT * FROM x WHERE x LIKE CONCAT('%', CHR(0), '%');
SELECT * FROM x WHERE REGEXP_MATCHES(x, CHR(0));
SELECT * FROM x WHERE REGEXP_FULL_MATCH(x, CONCAT('goo', CHR(0), 'se'));
SELECT {'x': x} FROM x;
SELECT [x] FROM x;
SELECT LENGTH(x) FROM x;
SELECT STRLEN(x) FROM x;
SELECT LENGTH_GRAPHEME(x) FROM x;
SELECT x || x FROM x;
SELECT PRINTF('%s - zzz', x) FROM x;
SELECT SUBSTRING(x, 4) FROM x;
CREATE TABLE x AS SELECT 1 AS x, x FROM x UNION ALL SELECT 2 AS x, SUBSTRING(x, 4, 1) FROM x UNION ALL SELECT 3 AS x, x FROM x;
SELECT * FROM x ORDER BY x, x;
SELECT x, SUM(x) FROM x GROUP BY x ORDER BY ALL;
SELECT x, SUM(x) FROM x GROUP BY x ORDER BY ALL;
SELECT COUNT(*) FROM x JOIN x USING (x);
PRAGMA x;
SELECT REGEXP_SPLIT_TO_TABLE('a b c', ' ');
SELECT REGEXP_SPLIT_TO_TABLE('axbyc', '[x|y]');
SELECT REGEXP_SPLIT_TO_TABLE('axbyc', '[x|y]'), 42;
PRAGMA x;
CREATE TABLE x (x INT, x TEXT);
INSERT INTO x VALUES (32, '00' || CHR(32) || '001'), (160, '00' || CHR(160) || '001'), (0, '00🦆001');
SELECT * FROM x WHERE REGEXP_MATCHES(x, '^00\x{0020}001$');
SELECT * FROM x WHERE REGEXP_MATCHES(x, '^00\x{00A0}001$');
SELECT * FROM x WHERE REGEXP_MATCHES(x, '\x{00A0}001$');
SELECT * FROM x WHERE REGEXP_MATCHES(x, '^00\x{1F986}001$');
SELECT * FROM x WHERE REGEXP_MATCHES(x, '\x{1F986}');
SELECT * FROM x WHERE REGEXP_MATCHES(x, '^00\x{00A0}001$') AND REGEXP_MATCHES(x, '^00\x{0020}001$');
SELECT REGEXP_MATCHES(x, '^00\x{FFFFFFFF}001$') FROM x;
PRAGMA x;
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('rundate_2023-01-01_pass_1'), ('rundate_2023-01-01_pass_2'), ('rundate_2023-01-01_pass_3'), ('rundate_2023-01-10_pass_1'), ('rundate_2023-01-10_pass_2'), ('rundate_2023-02-14_pass_1'), ('invalid'), (NULL);
WITH x AS (SELECT x.*, x FROM x AS x, x AS x), x AS (SELECT REGEXP_EXTRACT(x, 'rundate_(\d+-\d+-\d+)_pass_(\d+)', ['rundate', 'pass']) AS x, x FROM x) SELECT CAST(x.x AS DATE) AS x, CAST(x.x AS SMALLINT) AS x, SUM(x) FROM x WHERE LENGTH(x.x) > 0 GROUP BY ALL;
WITH x AS (SELECT x.*, x FROM x AS x, x AS x), x AS (SELECT REGEXP_EXTRACT(x, 'rundate_(\d+-\d+-\d+)_pass_(\d+)', ['rundate', 'pass']) AS x, x FROM x) SELECT CAST(x.x AS DATE) AS x, CAST(x.x AS SMALLINT) AS x, SUM(x) FROM x WHERE LENGTH(x.x) > 0 GROUP BY ALL;
WITH x AS (SELECT x.*, x FROM x AS x, x AS x), x AS (SELECT REGEXP_EXTRACT(x, 'rundate_(\d+-\d+-\d+)_([a-z]+?)_(\d+)', ['rundate', 'opt', 'pass']) AS x, x FROM x) SELECT CAST(x.x AS DATE) AS x, x.x AS x, CAST(x.x AS SMALLINT) AS x, SUM(x) FROM x WHERE LENGTH(x.x) > 0 GROUP BY ALL;
WITH x AS (SELECT x.*, x FROM x AS x, x AS x), x AS (SELECT REGEXP_EXTRACT(x, 'rundate_(\d+-\d+-\d+)_([0-9]+?)_(\d+)', ['rundate', 'opt', 'pass']) AS x, x FROM x) SELECT CAST(x.x AS DATE) AS x, x.x AS x, CAST(x.x AS SMALLINT) AS x, SUM(x) FROM x WHERE LENGTH(x.x) > 0 GROUP BY ALL;
SELECT REGEXP_EXTRACT(x, 'rundate_(\d+-\d+-\d+)_pass_(\d+)', []) AS x FROM x;
WITH x AS (SELECT 'rundate_(\d+-\d+-\d+)_pass_(\d+)' AS x FROM x) SELECT REGEXP_EXTRACT(x, x, ['rundate', 'pass']) AS x FROM x, x;
SELECT REGEXP_EXTRACT(x, 'rundate_(\d+-\d+-\d+)_pass_(\d+)', ['rundate', NULL]) AS x FROM x;
SELECT REGEXP_EXTRACT(x, 'rundate_(\d+-\d+-\d+)_pass_(\d+)', ['rundate', 'rundate']) AS x FROM x;
SELECT REGEXP_EXTRACT(x, 'rundate_(\d+-\d+-\d+)_pass_(\d+)', ['rundate', 'RUNDATE']) AS x FROM x;
SELECT REGEXP_EXTRACT(x, 'rundate_(\d+-\d+-\d+)_pass_(\d+)', ['rundate', 'pass', 'overflow']) AS x FROM x;
SELECT REGEXP_EXTRACT(x, NULL, ['rundate', 'pass']) AS x FROM x;
PRAGMA x;
SELECT REGEXP_ESCAPE('https://duckdb.org');
SELECT REGEXP_ESCAPE('abc123ABC');
SELECT REGEXP_ESCAPE('a.b[c]*');
SELECT REGEXP_ESCAPE('a b c');
SELECT REGEXP_ESCAPE('\n');
SELECT REGEXP_ESCAPE('line1\nline2');
SELECT REGEXP_ESCAPE('@');
SELECT REGEXP_ESCAPE('path\to\wonderland');
SELECT REGEXP_ESCAPE('$()*+.?[\]^{|}-');
CREATE TABLE x (x TEXT);
INSERT INTO x SELECT 'a)*.?[\]b^{2.+_c' FROM x;
INSERT INTO x (x) SELECT '1?ch@racter$' FROM x;
SELECT REGEXP_ESCAPE(x) FROM x;
WITH x AS (SELECT x FROM x LIMIT 500) SELECT SUM(CAST(REGEXP_ESCAPE(x) = 'a\)\*\.\?\[\\\]b\^\{2\.\+_c' AS INT)) FROM x;
WITH x AS (SELECT x FROM x LIMIT 500 OFFSET 500) SELECT SUM(CAST(REGEXP_ESCAPE(x) = '1\?ch\@racter\$' AS INT)) FROM x;
PRAGMA x;
SELECT REGEXP_EXTRACT('foobarbaz', 'b..');
SELECT REGEXP_EXTRACT('foobarbaz', 'B..');
SELECT REGEXP_EXTRACT('foobarbaz', 'B..', 0, 'i');
SELECT REGEXP_EXTRACT('foobarbaz', 'b..', 1);
SELECT REGEXP_EXTRACT('foobarbaz', '(b..)(b..)');
SELECT REGEXP_EXTRACT('foobarbaz', '(b..)(b..)', 1);
SELECT REGEXP_EXTRACT('foobarbaz', '(b..)(b..)', 2);
SELECT REGEXP_EXTRACT('foobarbaz', '(b..)(b..)', -1);
SELECT REGEXP_EXTRACT('foobarbaz', '(b..)(b..)', 42);
CREATE TABLE x (x TEXT, x TEXT, x INT);
INSERT INTO x VALUES ('foobarbaz', 'b..', 0), ('foobarbaz', 'b..', 1), ('foobarbaz', '(b..)(b..)', 0), ('foobarbaz', '(b..)(b..)', 1), ('foobarbaz', '(b..)(b..)', 2);
SELECT REGEXP_EXTRACT(x, x, x) FROM x;
SELECT REGEXP_EXTRACT(x, x) FROM x;
SELECT REGEXP_EXTRACT(x, 'b..') FROM x;
SELECT REGEXP_EXTRACT(x, '(b..)(b..)', x) FROM x;
SELECT REGEXP_EXTRACT('foobarbaz', NULL);
SELECT REGEXP_EXTRACT('foobarbaz', 'b..', NULL);
SELECT REGEXP_EXTRACT(NULL, 'b..');
SELECT REGEXP_EXTRACT('foobarbaz', 'b..', '1');
PRAGMA x;
SELECT REGEXP_EXTRACT_ALL('1a 2b 14m', '(\d+)', 1);
SELECT REGEXP_EXTRACT_ALL('1a 2b 14m', '(\d+)([a-z]+)', 2);
SELECT REGEXP_EXTRACT_ALL('test', '.', 0);
SELECT REGEXP_EXTRACT_ALL('1a 2b 14m', '(\\d+)([a-z]+)', -1);
SELECT REGEXP_EXTRACT_ALL('1a 2b 14m', '\\d+', 0);
SELECT REGEXP_EXTRACT_ALL('1a 2b 14m', '\\d+', 0);
SELECT REGEXP_EXTRACT_ALL('1a 2b 14m', '\\d+', 1);
SELECT REGEXP_EXTRACT_ALL('1a 2b 14m', '\\d+', 2);
SELECT REGEXP_EXTRACT_ALL('1a 2b 14m', '\\d+', -1);
SELECT REGEXP_EXTRACT_ALL('1a 2b 14m', '(\\d+)?', 1);
SELECT REGEXP_EXTRACT_ALL('a 2b 14m', '(\\d+)?', 1);
SELECT REGEXP_EXTRACT_ALL('1a 2b 14m', '(\\d+)([a-z]+)', 0);
SELECT REGEXP_EXTRACT_ALL('1a 2b 14m', '(\\d+)([a-z]+)', 0);
SELECT REGEXP_EXTRACT_ALL('1a 2b 14m', '(\\d+)([a-z]+)', 1);
SELECT REGEXP_EXTRACT_ALL('1a 2b 14m', '(\\d+)([a-z]+)', 2);
SELECT REGEXP_EXTRACT_ALL('1a 2b 14m', '(\\d+)([a-z]+)', 3);
SELECT REGEXP_EXTRACT_ALL('1a 2b 14m', '(\\d+)([a-z]+)', -1);
SELECT REGEXP_EXTRACT_ALL('1a 2b 14m', '(\\d+)?([a-z]+)', 1);
SELECT REGEXP_EXTRACT_ALL('a 2b 14m', '(\\d+)?([a-z]+)', 1);
SELECT REGEXP_EXTRACT_ALL('AbCdE', '([[:lower:]]+)C([[:lower:]]+)', 1);
SELECT REGEXP_EXTRACT_ALL('AbCdEfCg', '([[:lower:]]+)C([[:lower:]]+)', 1);
SELECT REGEXP_EXTRACT_ALL('abc=111, def=222, ghi=333', '("[^"]+"|\w+)=("[^"]+"|\w+)', 1);
SELECT REGEXP_EXTRACT_ALL('', NULL, 0);
SELECT REGEXP_EXTRACT_ALL(NULL, '', 0);
SELECT REGEXP_EXTRACT_ALL('', '', 0);
SELECT REGEXP_EXTRACT_ALL('', 'abc', 0);
SELECT REGEXP_EXTRACT_ALL('abc', '.', 0);
SELECT REGEXP_EXTRACT_ALL('aaa', '^a', 0);
SELECT REGEXP_EXTRACT_ALL('abc', 'abc', 0);
SELECT REGEXP_EXTRACT_ALL('abcdef', 'a.c.*f', 0);
SELECT REGEXP_EXTRACT_ALL('abcdef', 'ac.*e.', 0);
SELECT REGEXP_EXTRACT_ALL('abcdef', 'bcde', 0);
SELECT REGEXP_EXTRACT_ALL('aabca', 'a*', 0);
SELECT REGEXP_EXTRACT_ALL('aaba', 'a?', 0);
SELECT REGEXP_EXTRACT_ALL('baac', 'a*', 0);
SELECT REGEXP_EXTRACT_ALL('abcd', 'a(bc)*', 0);
SELECT REGEXP_EXTRACT_ALL('щцф', '.', 0);
SELECT REGEXP_EXTRACT_ALL('щцф', '.{3}', 0);
SELECT REGEXP_EXTRACT_ALL('щцф', '.{6}', 0);
SELECT REGEXP_EXTRACT_ALL('щццф', 'ц*', 0);
SELECT REGEXP_EXTRACT_ALL('abba', 'b*', 0);
SELECT REGEXP_EXTRACT_ALL('', '()', 0);
SELECT REGEXP_EXTRACT_ALL('', '(abc)', 0);
SELECT REGEXP_EXTRACT_ALL('', '(abc)?', 0);
SELECT REGEXP_EXTRACT_ALL('abc', 'a(b)c', 0);
SELECT REGEXP_EXTRACT_ALL('abbb', '^a*(b)', 0);
SELECT REGEXP_EXTRACT_ALL('XbASDZb', '(.)b', 0);
SELECT REGEXP_EXTRACT_ALL('abcdef', 'a(.c.*)f', 0);
SELECT REGEXP_EXTRACT_ALL('abcdef', '(bcde)', 0);
SELECT REGEXP_EXTRACT_ALL('this_is__a___Test', '(.*?)(?:_|$)', 0);
SELECT REGEXP_EXTRACT_ALL('щцф', 'щ(.).', 1);
SELECT REGEXP_EXTRACT_ALL('щцф', '(.{6})', 0);
SELECT REGEXP_EXTRACT_ALL('abc', '((a))', 0);
SELECT REGEXP_EXTRACT_ALL('abc', '(a)(b)', 0);
SELECT REGEXP_EXTRACT_ALL('', '(', 0);
SELECT REGEXP_EXTRACT_ALL('abcdef', 'ac.*e.', 0);
SELECT REGEXP_EXTRACT_ALL('щцф', '.{2}', 0);
SELECT REGEXP_EXTRACT_ALL('abc', '.{2}', 0);
SELECT REGEXP_EXTRACT_ALL('\001\002\003', '\002?', 0);
SELECT REGEXP_EXTRACT_ALL('', '()', 0);
SELECT REGEXP_EXTRACT_ALL('', '(abc)', 0);
SELECT REGEXP_EXTRACT_ALL('', '(abc)?', 0);
SELECT REGEXP_EXTRACT_ALL('this__test_case', '(.*?)(?:_|$)', 0);
SELECT REGEXP_EXTRACT_ALL('щцф', 'щ(..)..', 0);
SELECT x, REGEXP_EXTRACT_ALL(x, 'ab?cd', 0) AS x FROM (VALUES ('acd'), ('abcd'), ('abcdacd'), ('abbcd'), ('abbbcd'), ('ab1cd')) AS x;
SELECT x, REGEXP_EXTRACT_ALL(x, 'a(bc)?d', 0) AS x FROM (VALUES ('ad'), ('abd'), ('acd'), ('abcd'), ('abce'), ('abcxd'), ('abcbcd')) AS x;
SELECT x, REGEXP_EXTRACT_ALL(x, 'a[bc]?d', 0) AS x FROM (VALUES ('ad'), ('abd'), ('acd'), ('acde'), ('abcd'), ('abbd')) AS x;
SELECT x, REGEXP_EXTRACT_ALL(x, 'X[\d]?Y[\d]?', 0) AS x FROM (VALUES ('XY'), ('X1Y'), ('X123Y'), ('X1Y23')) AS x;
SELECT x, REGEXP_EXTRACT_ALL(x, 'ab*cd', 0) AS x FROM (VALUES ('acd'), ('abcd'), ('abcdacd'), ('abbcd'), ('abbbcd'), ('ab1cd')) AS x;
SELECT x, REGEXP_EXTRACT_ALL(x, 'a(bc)*d', 0) AS x FROM (VALUES ('ad'), ('abd'), ('acd'), ('abcd'), ('abcxd'), ('abcbcd'), ('abcbce')) AS x;
SELECT x, REGEXP_EXTRACT_ALL(x, 'a[bc]*d', 0) AS x FROM (VALUES ('ad'), ('abd'), ('acd'), ('abcd'), ('abcbbcd'), ('abce')) AS x;
SELECT x, REGEXP_EXTRACT_ALL(x, 'X[\d]*Y[\d]*', 0) AS x FROM (VALUES ('XY'), ('X1Y'), ('X123Y'), ('X1Y23'), ('X12Z34Y')) AS x;
SELECT x, REGEXP_EXTRACT_ALL(x, 'ab+cd', 0) AS x FROM (VALUES ('acd'), ('abcd'), ('abcdacd'), ('abbcd'), ('abbbcd'), ('ab1cd')) AS x;
SELECT x, REGEXP_EXTRACT_ALL(x, '(ab)+cd', 0) AS x FROM (VALUES ('bcd'), ('abcd'), ('abbcd'), ('ababcd'), ('ababxcd')) AS x;
SELECT x, REGEXP_EXTRACT_ALL(x, 'a[bc]+d', 0) AS x FROM (VALUES ('ad'), ('abd'), ('acd'), ('abcd'), ('abce'), ('abcbd')) AS x;
SELECT x, REGEXP_EXTRACT_ALL(x, 'X[\d]+Y[\d]*', 0) AS x FROM (VALUES ('XY'), ('X1Y'), ('X123Y'), ('X1Y23'), ('X12Z34Y')) AS x;
SELECT x, REGEXP_EXTRACT_ALL(x, 'ab{3}cd', 0) AS x, REGEXP_EXTRACT_ALL(x, 'ab{1,}cd', 0) AS x, REGEXP_EXTRACT_ALL(x, 'ab{1,2}cd', 0) AS x, REGEXP_EXTRACT_ALL(x, 'ab{0,2}cd', 0) AS x FROM (VALUES ('acd'), ('abcd'), ('abcdacd'), ('abbcd'), ('abbbcd'), ('ab1cd')) AS x;
SELECT x, REGEXP_EXTRACT_ALL(x, '(ab){2}cd', 0) AS x, REGEXP_EXTRACT_ALL(x, '(ab){1,}cd', 0) AS x, REGEXP_EXTRACT_ALL(x, '(ab){1,2}cd', 0) AS x, REGEXP_EXTRACT_ALL(x, '(ab){0,2}cd', 0) AS x FROM (VALUES ('acd'), ('bcd'), ('abcd'), ('abbcd'), ('ababcd'), ('ab1cd')) AS x;
SELECT x, REGEXP_EXTRACT_ALL(x, '[\d]{3}', 0) AS x, REGEXP_EXTRACT_ALL(x, '[\d]{5}', 0) AS x, REGEXP_EXTRACT_ALL(x, '[\d]{1,}', 0) AS x, REGEXP_EXTRACT_ALL(x, '[\d]{1,2}', 0) AS x, REGEXP_EXTRACT_ALL(x, '[\d]{0,2}', 0) AS x FROM (VALUES ('03-123-4567')) AS x;
SELECT x, REGEXP_EXTRACT_ALL(x, 'ab++', 0) AS x FROM (VALUES ('acd'), ('abcd'), ('abbcd'), ('abbbcd')) AS x;
SELECT REGEXP_EXTRACT_ALL('123456789', '^[0-9]*$', 0) AS x, REGEXP_EXTRACT_ALL('abcdefg', '^[a-z]*$', 0) AS x, REGEXP_EXTRACT_ALL('ABCDEFG', '^[A-Z]*$', 0) AS x, REGEXP_EXTRACT_ALL('ABCdefg', '^[a-zA-Z]*$', 0) AS x, REGEXP_EXTRACT_ALL('12aaAA', '^[0-9a-zA-Z]*$', 0) AS x, REGEXP_EXTRACT_ALL('123-1234', '^[0-9]{3}-[0-9]{4}$', 0) AS x, REGEXP_EXTRACT_ALL('2009/7/29', '^[0-9]{4}/[01]?[0-9]/[0123]?[0-9]$', 0) AS x;
WITH x AS (SELECT x FROM (VALUES ('https://docs.fluentd.org/v0.12/articles/out_file'), ('https://docs.fluentd.org/v0.12/articles/out_forward'), ('https://www.fluentd.org/v0.12/articles/out_file'), ('out_file/article/docs.fluentd.org/')) AS x) SELECT x, REGEXP_EXTRACT_ALL(x, 'docs.fluentd.org.*out_file', 0) AS x, REGEXP_EXTRACT_ALL(x, 'docs.fluentd.org|out_file', 0) AS x FROM x;
SELECT REGEXP_EXTRACT_ALL('hello', '.', 2);
SELECT REGEXP_EXTRACT_ALL('https://www.emakina.nl/?utm_source=sf_mail&user_id=7h87hte51kj_9866c', '([^\?&]+)=', 0) AS x, REGEXP_EXTRACT_ALL('https://www.emakina.nl/?utm_source=sf_mail&user_id=7h87hte51kj_9866c', '=([^&]+)', 0) AS x;
SELECT REGEXP_EXTRACT_ALL('si1si2', 'si\d$', 0);
SELECT REGEXP_EXTRACT_ALL('si1si2', '^(si\d)(?:.*)$', 1);
SELECT REGEXP_EXTRACT_ALL('aabb', '^((aa)(bb))$', 3);
WITH x AS (SELECT * FROM (VALUES (NULL), ('(a)'), ('(a)(a)(a)'), ('()'), ('(a)(a)'), (NULL), ('(a)'), ('(a)(b)?(a)'), ('(a)(a)(a)(a)(a)(a)(a)'), (NULL)) AS x) SELECT REGEXP_EXTRACT_ALL('aaaaaaaa', x, 0) FROM x;
WITH x AS (SELECT * FROM (VALUES (NULL, NULL, 0), (NULL, NULL, 1), ('aaaaaaaa', '(a)', 0), ('aaaaaaaa', '(a)(a)(a)', 0), ('aaaaaaaa', '()', 1), ('aaaaaaaa', '(a)(a)', 0), (NULL, NULL, NULL), ('aaaaaaaa', '(a)', 0), ('aaaaaaaa', '(a)(b)?(a)', NULL), ('aaa', '(a)(a)(a)(a)(a)(a)(a)', 0), ('aaaaaaaaaaa', '(a)(a)(a)(a)(a)(a)(a)', 0), (NULL, '()', NULL)) AS x) SELECT REGEXP_EXTRACT_ALL(x, x, x) FROM x;
SELECT REGEXP_EXTRACT_ALL('foobarbaz', '(BA[R|Z])', 'i', 1);
WITH x AS (SELECT * FROM (VALUES (NULL, NULL, 0), (NULL, NULL, 1), ('aaaaaaaa', '(A)', 0), ('aaaaaaaa', '(a)(A)(a)', 0), ('aaaaaaaa', '()', 1), ('aaaaaaaa', '(a)(A)', 0), (NULL, NULL, NULL), ('aaaaaaaa', '(a)', 0), ('aaaaaaaa', '(a)(B)?(a)', NULL), ('aaa', '(a)(a)(A)(A)(a)(A)(a)', 0), ('aaaaaaaaaaa', '(a)(A)(a)(a)(a)(a)(a)', 0), (NULL, '()', NULL)) AS x) SELECT REGEXP_EXTRACT_ALL(x, x, 'i', x) FROM x;
PRAGMA x;
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('asdf'), ('xxxx'), ('aaaa');
SELECT x FROM x WHERE REGEXP_MATCHES(x, 'as(c|d|e)f');
SELECT x FROM x WHERE NOT REGEXP_MATCHES(x, 'as(c|d|e)f');
SELECT x FROM x WHERE REGEXP_MATCHES(x, 'as(c|d|e)f') AND x = 'asdf';
SELECT x FROM x WHERE REGEXP_MATCHES(x, 'as(c|d|e)f') AND REGEXP_MATCHES(x, 'as[a-z]f');
PRAGMA x;
SELECT REGEXP_REPLACE('foobarbaz', 'b..', 'X');
SELECT REGEXP_REPLACE('ana ana', 'ana', 'banana', 'g');
SELECT REGEXP_REPLACE('ANA ana', 'ana', 'banana', 'gi');
SELECT REGEXP_REPLACE('ana', 'ana', 'banana', 'c');
SELECT REGEXP_REPLACE('ANA', 'ana', 'banana', 'i');
SELECT REGEXP_REPLACE('as^/$df', '^/$', '', 'l');
SELECT REGEXP_REPLACE('as^/$df', '^/$', '');
SELECT REGEXP_REPLACE('hello
world', '.*', 'x', 'sg');
SELECT COUNT(*) FROM (SELECT 'x
x') AS x JOIN (SELECT REGEXP_REPLACE('hello
world', '.*', 'x', 'ng')) AS x USING (x);
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('hello'), ('HELLO');
SELECT REGEXP_REPLACE(x, 'h.*', 'world', 'i') FROM x ORDER BY x;
SELECT REGEXP_REPLACE(x, 'h.*', 'world', 'c') FROM x ORDER BY x;
SELECT REGEXP_REPLACE(x, 'h.*', 'world', x) FROM x ORDER BY x;
SELECT REGEXP_REPLACE('asdf', '.*SD.*', 'a', 'q');
SELECT REGEXP_MATCHES('abc', '*');
SELECT REGEXP_REPLACE('abc', '*', 'X');
CREATE TABLE x (x TEXT, x TEXT);
INSERT INTO x VALUES ('abc', '*');
SELECT REGEXP_MATCHES(x, x) FROM x;
SELECT REGEXP_REPLACE(x, x, 'X') FROM x;
PRAGMA x;
CREATE TABLE x AS SELECT * FROM (VALUES ('asdf')) AS x;
SELECT REGEXP_MATCHES(x, NULL) FROM x;
SELECT REGEXP_MATCHES(x, '.*sd.*') FROM x;
SELECT REGEXP_MATCHES(x, '.*yu.*') FROM x;
SELECT REGEXP_MATCHES(x, '') FROM x;
SELECT REGEXP_MATCHES(x, 'sd') FROM x;
SELECT REGEXP_FULL_MATCH(x, 'sd') FROM x;
SELECT REGEXP_FULL_MATCH(x, '.sd.') FROM x;
SELECT REGEXP_MATCHES(x, '^sdf$') FROM x;
SELECT REGEXP_MATCHES('', '.*yu.*');
SELECT REGEXP_MATCHES('', '.*');
SELECT REGEXP_MATCHES(x, CAST(NULL AS TEXT)) FROM x;
SELECT REGEXP_MATCHES(CAST(NULL AS TEXT), '.*sd.*');
SELECT REGEXP_MATCHES(CAST(NULL AS TEXT), CAST(NULL AS TEXT));
SELECT REGEXP_MATCHES('foobarbequebaz', '(bar)(beque)');
SELECT REGEXP_MATCHES('', '\X');
CREATE TABLE x (x TEXT, x TEXT);
INSERT INTO x VALUES ('asdf', 'sd'), ('asdf', '^sd'), (NULL, '^sd'), ('asdf', NULL);
SELECT REGEXP_MATCHES(x, '.*') FROM x;
SELECT REGEXP_MATCHES(x, x) FROM x;
SELECT REGEXP_MATCHES(x, '.*SD.*', 'i') FROM x;
SELECT REGEXP_MATCHES(x, '.*SD.*', 'c') FROM x;
SELECT REGEXP_MATCHES('as^/$df', '^/$', 'l');
SELECT REGEXP_MATCHES('as^/$df', '^/$');
SELECT REGEXP_MATCHES('hello
world', '.*', 's');
SELECT REGEXP_FULL_MATCH('hello
world', '.*', 'n');
SELECT REGEXP_MATCHES(x, '.*SD.*', ' i 	') FROM x;
SELECT REGEXP_MATCHES(x, '.*SD.*', NULL) FROM x;
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('hello'), ('HELLO');
SELECT REGEXP_MATCHES(x, 'h.*', 'i') FROM x ORDER BY x;
SELECT REGEXP_MATCHES(x, 'h.*', 'c') FROM x ORDER BY x;
SELECT REGEXP_MATCHES(x, 'h.*', x) FROM x ORDER BY x;
SELECT REGEXP_MATCHES(x, '.*SD.*', 'q') FROM x;
SELECT REGEXP_MATCHES(x, '.*SD.*', 'g') FROM x;
INSERT INTO x VALUES ('asdf', '(');
SELECT REGEXP_MATCHES(x, x) FROM x;
PRAGMA x;
SELECT SHA1('hello'), SHA1(NULL);
SELECT SHA1('');
SELECT SHA1(CAST('\xff\xff' AS BLOB));
CREATE TABLE x AS SELECT CAST(x AS TEXT) AS x FROM x AS x;
SELECT SHA1(x), SHA1('1') FROM x ORDER BY x;
SELECT SHA1(x), SHA1('1') FROM x WHERE CAST(x AS INT) BETWEEN 1 AND 3 ORDER BY x;
SELECT SHA1(x), SHA1('1') FROM x WHERE CAST(x AS INT) BETWEEN 1 AND 3 ORDER BY x;
SELECT SHA1(CAST('' AS BLOB));
SELECT SHA1(42);
PRAGMA x;
SELECT SHA256('hello'), SHA256(NULL);
SELECT SHA256('');
SELECT SHA256(CAST('\xff\xff' AS BLOB));
CREATE TABLE x AS SELECT CAST(x AS TEXT) AS x FROM x AS x;
SELECT SHA256(x), SHA256('1') FROM x ORDER BY x;
SELECT SHA256(x), SHA256('1') FROM x WHERE CAST(x AS INT) BETWEEN 1 AND 3 ORDER BY x;
SELECT SHA256();
SELECT STRIP_ACCENTS('hello'), STRIP_ACCENTS('héllo');
SELECT STRIP_ACCENTS('mühleisen'), STRIP_ACCENTS('hannes mühleisen');
CREATE TABLE x (x TEXT, x TEXT);
INSERT INTO x VALUES ('äää', 'aaa');
INSERT INTO x VALUES ('hännës mühlëïsën', 'hannes muhleisen');
INSERT INTO x VALUES ('olá', 'ola');
INSERT INTO x VALUES ('ôâêóáëòõç', 'oaeoaeooc');
SELECT STRIP_ACCENTS(x) = STRIP_ACCENTS(x) FROM x;
PRAGMA x;
CREATE TABLE x (x TEXT, x INT);
INSERT INTO x VALUES ('hello', 1), ('world', 2), ('b', 1), (NULL, 2);
SELECT ARRAY_EXTRACT('🦆ab', 4), ARRAY_EXTRACT('abc', 4);
SELECT ARRAY_EXTRACT(x, 2) FROM x;
SELECT ARRAY_EXTRACT(x, 3) FROM x;
SELECT ARRAY_EXTRACT(x, x) FROM x;
SELECT ARRAY_EXTRACT(x, 2) FROM x;
SELECT ARRAY_EXTRACT('hello', x) FROM x;
SELECT ARRAY_EXTRACT(CAST(NULL AS TEXT), x) FROM x;
SELECT ARRAY_EXTRACT('hello', NULL) FROM x;
SELECT ARRAY_EXTRACT(CAST(NULL AS TEXT), NULL) FROM x;
SELECT ARRAY_EXTRACT(CAST(NULL AS TEXT), x) FROM x;
SELECT ARRAY_EXTRACT(CAST(NULL AS TEXT), NULL) FROM x;
SELECT ARRAY_EXTRACT(x, -1) FROM x;
SELECT ARRAY_EXTRACT(x, 1) FROM x;
SELECT ARRAY_EXTRACT(x, 6) FROM x;
SELECT ARRAY_EXTRACT(x, 2147483646) FROM x;
SELECT ARRAY_EXTRACT(x, -2147483647) FROM x;
SELECT LIST_EXTRACT('1', -1);
SELECT ARRAY_EXTRACT('1', 9223372036854775807);
SELECT ARRAY_EXTRACT('0', -9223372036854775808);
PRAGMA x;
SELECT ASCII('x');
SELECT ASCII('a');
SELECT ASCII('ABC');
SELECT ASCII('Ω');
SELECT ASCII('ΩΩ');
SELECT ASCII('Ä');
SELECT ASCII('5');
SELECT ASCII(NULL);
SELECT ASCII();
SELECT CHR(97);
SELECT CHR(196);
SELECT CHR(937);
SELECT CHR(NULL);
SELECT CHR(-10);
SELECT CHR(1073741824);
SELECT CHR(1073741824);
PRAGMA x;
SELECT BAR(x * x, 0, 100) FROM x AS x;
SELECT BAR(9, 10, 20);
SELECT BAR(120, -10, 100, 10);
SELECT BAR(40, 20, 0);
SELECT BAR(100, 200, 0);
SELECT BAR(-10, 20, 0);
SELECT BAR(CAST('nan' AS DOUBLE), 0, 10);
SELECT BAR(CAST('infinity' AS DOUBLE), 0, 10);
SELECT BAR(CAST('-infinity' AS DOUBLE), 0, 10);
SELECT BAR(NULL, 0, 10);
SELECT BAR(1, CAST('nan' AS DOUBLE), 10);
SELECT BAR(1, CAST('-infinity' AS DOUBLE), 10);
SELECT BAR(1, CAST('infinity' AS DOUBLE), 10);
SELECT BAR(1, NULL, 10);
SELECT BAR(1, 0, CAST('nan' AS DOUBLE));
SELECT BAR(1, 0, CAST('-infinity' AS DOUBLE));
SELECT BAR(1, 0, CAST('infinity' AS DOUBLE));
SELECT BAR(1, 0, 10, CAST('nan' AS DOUBLE));
SELECT BAR(1, 0, 10, CAST('infinity' AS DOUBLE));
SELECT BAR(1, 0, 10, CAST('-infinity' AS DOUBLE));
SELECT BAR(1, 0, 10, 1000);
SELECT BAR(1, 0, 10, 1001);
SELECT BAR(1, 0, 10, 1);
SELECT BAR(10, 10, 10, 10);
SELECT BAR(1, 0, 10, 0.99);
SELECT BAR(1, 0, 1, 1.125);
SELECT BAR(1, 0, 1, 1.25);
SELECT BAR(1, 0, 1, 1.375);
SELECT BAR(1, 0, 1, 1.5);
SELECT BAR(1, 0, 1, 1.625);
SELECT BAR(1, 0, 1, 1.75);
SELECT BAR(1, 0, 1, 1.875);
SELECT BAR(1, 0, 1, 2);
SELECT BAR(1, 0, 1, x) FROM (VALUES (1), (1.125), (1.25), (1.375), (1.5), (1.625), (1.75), (1.875), (2)) AS x;
PRAGMA x;
SELECT BIT_LENGTH(NULL), BIT_LENGTH(''), BIT_LENGTH('$'), BIT_LENGTH('¢'), BIT_LENGTH('€'), BIT_LENGTH('𐍈');
CREATE TABLE x (x TEXT, x TEXT);
INSERT INTO x VALUES ('', 'Zero'), ('$', NULL), ('¢', 'Two'), ('€', NULL), ('𐍈', 'Four');
SELECT BIT_LENGTH(x) FROM x;
SELECT BIT_LENGTH(x) FROM x;
SELECT BIT_LENGTH(x) FROM x WHERE NOT x IS NULL;
SELECT BIT_LENGTH();
SELECT BIT_LENGTH(1, 2);
PRAGMA x;
SELECT UPPER('áaaá'), UPPER('ö'), LOWER('S̈'), UPPER('ω');
SELECT UPPER('Αα Ββ Γγ Δδ Εε Ζζ  Ηη Θθ Ιι Κκ Λλ Μμ Νν Ξξ Οο Ππ Ρρ Σσς Ττ Υυ Φφ Χχ Ψψ Ωω'), LOWER('Αα Ββ Γγ Δδ Εε Ζζ  Ηη Θθ Ιι Κκ Λλ Μμ Νν Ξξ Οο Ππ Ρρ Σσς Ττ Υυ Φφ Χχ Ψψ Ωω');
SELECT UPPER(''), UPPER('hello'), UPPER('MotörHead'), UPPER(NULL);
SELECT LOWER(''), LOWER('hello'), LOWER('MotörHead'), LOWER(NULL);
SELECT UPPER(''), UPPER('hello'), UPPER('MotörHead'), UPPER(NULL);
SELECT LOWER(''), LOWER('hello'), LOWER('MotörHead'), LOWER(NULL);
CREATE TABLE x (x TEXT, x TEXT);
INSERT INTO x VALUES ('Hello', 'World'), ('HuLlD', NULL), ('MotörHead', 'RÄcks');
SELECT UPPER(x), UPPER(x) FROM x;
SELECT LOWER(x), LOWER(x) FROM x;
SELECT LOWER(x), LOWER(x) FROM x;
SELECT UPPER(x), LOWER(x), UPPER(x), LOWER(x) FROM x WHERE NOT x IS NULL;
PRAGMA x;
SELECT LENGTH_GRAPHEME('S̈a');
SELECT LENGTH_GRAPHEME('🤦🏼‍♂️');
SELECT LENGTH_GRAPHEME('🤦🏼‍♂️ L🤦🏼‍♂️R 🤦🏼‍♂️');
SELECT LENGTH('S̈a');
SELECT LENGTH('🤦🏼‍♂️');
SELECT LENGTH('🤦🏼‍♂️ L🤦🏼‍♂️R 🤦🏼‍♂️');
SELECT STRLEN('🤦🏼‍♂️');
SELECT STRLEN('S̈a');
SELECT REVERSE('S̈a︍');
SELECT REVERSE('Z͑ͫ̓ͪ̂ͫ̽͏̴̙̤̞͉͚̯̞̠͍A̴̵̜̰͔ͫ͗͢');
SELECT REVERSE('🤦🏼‍♂️');
SELECT REVERSE('🤦🏼‍♂️ L🤦🏼‍♂️R 🤦🏼‍♂️');
SELECT REVERSE('MotörHead');
SELECT SUBSTRING_GRAPHEME('🤦🏼‍♂️🤦🏼‍♂️🤦🏼‍♂️', 1, 1);
SELECT SUBSTRING_GRAPHEME('S̈a︍', 2, 1);
SELECT SUBSTRING_GRAPHEME('test: 🤦🏼‍♂️hello🤦🏼‍♂️ world', 7, 7);
SELECT SUBSTRING_GRAPHEME('S̈a', 1, 1);
SELECT SUBSTRING_GRAPHEME('S̈a︍', -1, 1);
SET x = 'nulls_first';
PRAGMA x;
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('hello'), ('world'), (NULL);
SELECT x || ' ' || x FROM x ORDER BY x;
SELECT x || ' ' || '🦆' FROM x ORDER BY x;
SELECT x || ' ' || '🦆' FROM x ORDER BY x;
SELECT x || ' ' || '🦆' || NULL FROM x ORDER BY x;
SELECT x || ' ' || '🦆' || NULL FROM x ORDER BY x;
SELECT CONCAT('hello');
SELECT CONCAT('hello', 33, 22);
SELECT CONCAT('hello', 33, NULL, 22, NULL);
SELECT CONCAT('hello', ' ', x) FROM x ORDER BY x;
PRAGMA x;
SET x = 'nulls_first';
SELECT [1] || [2];
SELECT [1] || NULL;
SELECT LIST_CONCAT([1], NULL);
SELECT CONCAT('hello');
SELECT [1] || [2];
SELECT [1] || [NULL];
SELECT LIST_CONCAT([1], [NULL]);
SELECT [1] || CAST(NULL AS INT[]);
SELECT CONCAT([1], 'hello');
SELECT LIST_CONCAT([1, 2], ['3', '4']);
SELECT LIST_CONCAT([1, 2], 4);
SELECT 'hi' || NULL;
SELECT LIST_CONCAT([1], [2], [3]);
SELECT [1] || [2] || [3];
PRAGMA x;
CREATE TABLE x (x TEXT, x TEXT);
INSERT INTO x VALUES ('Hello', 'World'), ('HuLlD', NULL), ('MotörHead', 'RÄcks');
SELECT CONCAT(x, 'SUFFIX') FROM x;
SELECT CONCAT('PREFIX', x) FROM x;
SELECT CONCAT(x, x) FROM x;
SELECT CONCAT(x, x, 'SUFFIX') FROM x;
SELECT CONCAT(x, x, x) FROM x;
SELECT CONCAT('1', '2', '3', '4', '5', '6', '7', '8', '9', '0');
SELECT '1234567890' || '1234567890', '1234567890' || NULL;
SELECT CONCAT('1234567890', '1234567890'), CONCAT('1234567890', NULL);
PRAGMA x;
CREATE TABLE x (x TEXT, x TEXT);
INSERT INTO x VALUES ('Hello', 'World'), ('HuLlD', NULL), ('MotörHead', 'RÄcks');
SELECT CONCAT_WS(',', x, 'SUFFIX') FROM x;
SELECT CONCAT_WS('@', 'PREFIX', x) FROM x;
SELECT CONCAT_WS('$', x, x) FROM x;
SELECT CONCAT_WS(x, x, 'SUFFIX') FROM x;
SELECT CONCAT_WS(x, x, x) FROM x;
SELECT CONCAT_WS('@', '1', '2', '3', '4', '5', '6', '7', '8', '9');
SELECT CONCAT_WS(x, '[', ']') FROM x ORDER BY x;
SELECT CONCAT_WS(',', x, 'SUFFIX') FROM x WHERE x <> 'Hello';
SELECT CONCAT_WS(',', x, 'SUFFIX') FROM x WHERE x <> 'Hello';
SELECT CONCAT_WS(',');
SELECT CONCAT_WS(',', 'hello');
SELECT CONCAT_WS(NULL, 'hello');
SELECT CONCAT_WS(',', NULL);
SELECT CONCAT_WS(NULL, x, 'SUFFIX') FROM x;
SELECT CONCAT_WS(',', NULL, 'SUFFIX') FROM x;
SELECT CONCAT_WS(',', '', '');
SELECT CONCAT_WS(',', '', '', '');
SELECT CONCAT_WS(',', NULL, NULL);
SELECT CONCAT_WS(',', NULL, NULL, NULL);
SELECT CONCAT_WS(',', NULL, NULL, 'hello');
SELECT CONCAT_WS(x, '', NULL, '') FROM x ORDER BY x;
SELECT CONCAT_WS(x, NULL, '', '') FROM x ORDER BY x;
SELECT CONCAT_WS(x, NULL, x, '') FROM x ORDER BY x;
PRAGMA x;
SELECT CONTAINS('hello world', 'h'), CONTAINS('hello world', 'he'), CONTAINS('hello world', 'hel'), CONTAINS('hello world', 'hell'), CONTAINS('hello world', 'hello'), CONTAINS('hello world', 'hello '), CONTAINS('hello world', 'hello w'), CONTAINS('hello world', 'hello wo'), CONTAINS('hello world', 'hello wor'), CONTAINS('hello world', 'hello worl');
SELECT CONTAINS('hello world', 'a'), CONTAINS('hello world', 'ha'), CONTAINS('hello world', 'hea'), CONTAINS('hello world', 'hela'), CONTAINS('hello world', 'hella'), CONTAINS('hello world', 'helloa'), CONTAINS('hello world', 'hello a'), CONTAINS('hello world', 'hello wa'), CONTAINS('hello world', 'hello woa'), CONTAINS('hello world', 'hello wora');
SELECT CONTAINS('hello', ''), CONTAINS('', ''), CONTAINS(NULL, '');
CREATE TABLE x (x TEXT, x INT, x INT);
INSERT INTO x VALUES ('hello', 1, 2), ('world', 2, 3), ('b', 1, 1), (NULL, 2, 2);
SELECT CONTAINS(x, 'h') FROM x;
SELECT CONTAINS(x, 'e') FROM x;
SELECT CONTAINS(x, 'd') FROM x;
SELECT CONTAINS(x, 'he') FROM x;
SELECT CONTAINS(x, 'ello') FROM x;
SELECT CONTAINS(x, 'lo') FROM x;
SELECT CONTAINS(x, 'he-man') FROM x;
SELECT CONTAINS(x, 'o') FROM x;
SELECT CONTAINS(NULL, 'o') FROM x;
SELECT CONTAINS(x, NULL) FROM x;
SELECT CONTAINS(NULL, NULL) FROM x;
SELECT CONTAINS(x, '') FROM x;
PRAGMA x;
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('átomo');
INSERT INTO x VALUES ('olá mundo');
INSERT INTO x VALUES ('你好世界');
INSERT INTO x VALUES ('two ñ three ₡ four 🦆 end');
SELECT CONTAINS(x, 'á') FROM x;
SELECT CONTAINS(x, 'olá mundo') FROM x;
SELECT CONTAINS(x, '你好世界') FROM x;
SELECT CONTAINS(x, 'two ñ thr') FROM x;
SELECT CONTAINS(x, 'ñ') FROM x;
SELECT CONTAINS(x, '₡ four 🦆 e') FROM x;
SELECT CONTAINS(x, '🦆 end') FROM x;
PRAGMA x;
SELECT DAMERAU_LEVENSHTEIN('out', 'out');
SELECT DAMERAU_LEVENSHTEIN('three', 'there');
SELECT DAMERAU_LEVENSHTEIN('potion', 'option');
SELECT DAMERAU_LEVENSHTEIN('letter', 'lettre');
SELECT DAMERAU_LEVENSHTEIN('three', 'there');
SELECT DAMERAU_LEVENSHTEIN('out', 'to');
SELECT DAMERAU_LEVENSHTEIN('to', 'out');
SELECT DAMERAU_LEVENSHTEIN('laos', 'also');
SELECT DAMERAU_LEVENSHTEIN('tomato', 'otamot');
SELECT DAMERAU_LEVENSHTEIN('abcdefg', 'bacedgf');
SELECT DAMERAU_LEVENSHTEIN('abcdefg', 'bacedgf');
SELECT DAMERAU_LEVENSHTEIN('abcdefghi', 'bzacdefig');
SELECT DAMERAU_LEVENSHTEIN('bzacdefig', 'abcdefghi');
SELECT DAMERAU_LEVENSHTEIN('at', 'tarokk');
SELECT DAMERAU_LEVENSHTEIN('tarokk', 'at');
SELECT DAMERAU_LEVENSHTEIN('organ', 'no');
SELECT DAMERAU_LEVENSHTEIN('trips', 'strip');
SELECT DAMERAU_LEVENSHTEIN('cat', 'cats');
SELECT DAMERAU_LEVENSHTEIN('rat', 'brat');
SELECT DAMERAU_LEVENSHTEIN('amanaplanacanalpanama', 'm23aanaplancaanaalnama');
SELECT DAMERAU_LEVENSHTEIN('', 'great');
SELECT DAMERAU_LEVENSHTEIN('great', '');
SELECT DAMERAU_LEVENSHTEIN('', '');
SELECT DAMERAU_LEVENSHTEIN(NULL, 'drive');
SELECT DAMERAU_LEVENSHTEIN('drive', NULL);
SELECT DAMERAU_LEVENSHTEIN(NULL, NULL);
SELECT DAMERAU_LEVENSHTEIN('', NULL);
SELECT DAMERAU_LEVENSHTEIN(NULL, '');
SELECT DAMERAU_LEVENSHTEIN('one', 'two', 'three');
SELECT DAMERAU_LEVENSHTEIN('one');
SELECT DAMERAU_LEVENSHTEIN();
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('here'), ('heres'), ('there'), ('three'), ('threes');
SELECT DAMERAU_LEVENSHTEIN(x, 'theres') FROM x ORDER BY x;
SELECT DAMERAU_LEVENSHTEIN('herse', x) FROM x ORDER BY x;
SELECT DAMERAU_LEVENSHTEIN(NULL, x) FROM x;
SELECT DAMERAU_LEVENSHTEIN(NULL, x) FROM x;
SELECT DAMERAU_LEVENSHTEIN('', x) FROM x ORDER BY x;
SELECT DAMERAU_LEVENSHTEIN(x, '') FROM x ORDER BY x;
DROP TABLE x;
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES (NULL);
SELECT DAMERAU_LEVENSHTEIN(x, NULL) FROM x;
SELECT DAMERAU_LEVENSHTEIN(NULL, x) FROM x;
SELECT DAMERAU_LEVENSHTEIN('test', x) FROM x;
SELECT DAMERAU_LEVENSHTEIN(x, 'test') FROM x;
SELECT DAMERAU_LEVENSHTEIN('null', x) FROM x;
SELECT DAMERAU_LEVENSHTEIN('', x) FROM x;
SELECT DAMERAU_LEVENSHTEIN(x, '') FROM x;
DROP TABLE x;
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('');
SELECT DAMERAU_LEVENSHTEIN(NULL, x) FROM x;
SELECT DAMERAU_LEVENSHTEIN(x, NULL) FROM x;
SELECT DAMERAU_LEVENSHTEIN(x, '') FROM x;
SELECT DAMERAU_LEVENSHTEIN('', x) FROM x;
SELECT DAMERAU_LEVENSHTEIN(x, 'test') FROM x;
SELECT DAMERAU_LEVENSHTEIN('test', x) FROM x;
SELECT DAMERAU_LEVENSHTEIN('null', x) FROM x;
DROP TABLE x;
CREATE TABLE x (x TEXT, x TEXT);
INSERT INTO x VALUES ('identical', 'identical'), ('dientical', 'identical'), ('dinetcila', 'identical'), ('abcdefghijk', 'bacdfzzeghki'), ('abcd', 'bcda'), ('great', 'greta'), ('abcdefghijklmnopqrstuvwxyz', 'abdcpoxwz'), ('a_considerably_longer_string', 'a_ocnsiderably_longre_tsrig'), ('another-quite-long-string', 'naothre-quit-elongstrnig'), ('littlehampton', 'littlerhamptoner'), ('an_incredibly_long_string_to_compare', 'na_incerdibl_ylong_sr56ting_ot_ocmrpe'), ('smaller', 'notsmaller,longer'), ('againalongerstring', 'string'), (NULL, NULL), ('', ''), (NULL, 'test'), ('test', NULL), ('four', ''), ('', 'four'), (NULL, ''), ('', NULL);
SELECT DAMERAU_LEVENSHTEIN(x, x) FROM x;
PRAGMA x;
SELECT FORMAT('hello'), FORMAT(NULL);
SELECT FORMAT('{}', 'hello'), FORMAT('{}: {}', 'hello', 'world');
SELECT FORMAT('{}', NULL), FORMAT(NULL, 'hello', 'world');
SELECT FORMAT('{} {}', TRUE, FALSE);
SELECT FORMAT('{}', 33), FORMAT('{} + {} = {}', 3, 5, 3 + 5);
SELECT FORMAT('{} {} = {}', CAST('1992-01-01' AS DATE), CAST('12:01:00' AS TIME), CAST('1992-01-01 12:01:00' AS TIMESTAMP));
SELECT FORMAT('{}', CAST('\x00hello' AS BLOB));
SELECT FORMAT('{}', CAST(120381902481294715712 AS INT128));
SELECT FORMAT('{}', CAST(120381902481294715712 AS UINT128));
SELECT FORMAT('{:.3f}', CAST('1.234' AS DECIMAL(18, 3)));
SELECT FORMAT('{:04d}', 33), FORMAT('{} {:02d}:{:02d}:{:02d} {}', 'time', 12, 3, 16, 'AM'), FORMAT('{:10d}', 1992);
SELECT FORMAT('{1} {1} {0} {0}', 1, 2);
SELECT FORMAT('{:x}', 123456789);
SELECT FORMAT('{:b}', 123456789);
SELECT FORMAT('{:.2}', 0.00023404094995959);
SELECT FORMAT('{:.3}', 0.0);
SELECT FORMAT('{}');
SELECT FORMAT('{} {}', 'hello');
SELECT FORMAT('{}', 'hello', 'world');
SELECT FORMAT('{:s}', 42);
SELECT FORMAT('{:d}', 'hello');
PRAGMA x;
SELECT PRINTF('%,d', 123456789);
SELECT FORMAT('{:d}', 123456789);
SELECT PRINTF('%.d', 123456789);
SELECT PRINTF('%_d', 123456789);
SELECT PRINTF('%''d', 123456789);
SELECT PRINTF('%.0d', 123456789);
SELECT FORMAT('{:,}', 123456789);
SELECT FORMAT('{:_}', 123456789);
SELECT FORMAT('{:''}', 123456789);
SELECT FORMAT('{:t }', 123456789);
SELECT FORMAT('{:t|}', 123456789);
SELECT FORMAT('{:tss}', 123456789);
SELECT FORMAT('{:,}', 123456789.123);
SELECT FORMAT('{:_}', 123456789.123);
SELECT PRINTF('%,.3f', CAST(123456.789 AS DOUBLE));
SELECT PRINTF('%,.3f', CAST(123456.789 AS DOUBLE));
SELECT FORMAT('{:t}', 123456789);
SELECT FORMAT('{0:d} {0:L}', 123456789);
SELECT FORMAT('{1}', 123456789);
SELECT FORMAT('{L}', 123456789);
SELECT PRINTF('%:', 123456789);
SELECT PRINTF('%:', 123456789.123);
SELECT PRINTF('%:', 'str');
PRAGMA x;
SELECT 'aaa' GLOB 'bbb';
SELECT 'aaa' GLOB 'aaa';
SELECT 'aaa' GLOB '*';
SELECT 'aaa' GLOB '*a';
SELECT 'aaa' GLOB '*b';
SELECT 'aaa' GLOB 'a*';
SELECT 'aaa' GLOB 'b*';
SELECT 'aaa' GLOB 'a?a';
SELECT 'aaa' GLOB 'a?';
SELECT 'aaa' GLOB '??*';
SELECT 'aaa' GLOB '????*';
SELECT 'ababac' GLOB '*abac';
SELECT '3' GLOB '[0-9]';
SELECT 'a' GLOB '[0-9]';
SELECT '012' GLOB '[0-9][0-9][0-9]';
SELECT '012' GLOB '[0-9][0-9][0-9]a';
SELECT '012a' GLOB '[0-9][0-9][0-9]';
SELECT 'b3' GLOB '[abc0-9][abc0-9]';
SELECT 'd3' GLOB '[abc0-9][abc0-9]';
SELECT 'a' GLOB '[!0-9]';
SELECT '1' GLOB '[!0-9]';
SELECT '*' GLOB '\*';
SELECT 'a' GLOB '\*';
SELECT '\' GLOB '\\';
SELECT 'a' GLOB '\\';
SELECT '3]' GLOB '[]3][]]';
SELECT '3]' GLOB '[]3][]]';
SELECT '3' GLOB '[3';
SELECT '3' GLOB '[3-';
SELECT '3' GLOB '\\';
SELECT '3' GLOB '\';
SELECT '3' GLOB '3***';
SELECT '1245' GLOB '**1***2*******4*5***';
SELECT 'aaaaaaaaaaaaaaaaaaaaaaa' GLOB '*a';
SELECT '?' GLOB '[?]';
SELECT '3' GLOB '[?]';
SELECT '*' GLOB '[*]';
SELECT '3' GLOB '[*]';
SELECT '6' GLOB '[1-35-7]';
SELECT '4' GLOB '[1-35-7]';
SELECT '4' GLOB '[';
CREATE TABLE x (x TEXT, x TEXT);
INSERT INTO x VALUES ('abab', 'ab*'), ('aaa', 'a?a'), ('aaa', '*b*');
SELECT x FROM x WHERE x GLOB 'ab*';
SELECT x FROM x WHERE 'aba' GLOB x;
SELECT x FROM x WHERE x GLOB x;
PRAGMA x;
SELECT 'aaa' ILIKE 'bbb';
SELECT 'aaa' ILIKE 'aAa';
SELECT 'aaa' ILIKE '%';
SELECT 'aaa' ILIKE '%A';
SELECT 'aaa' ILIKE '%b';
SELECT 'aaa' ILIKE 'A%';
SELECT 'aaa' ILIKE 'b%';
SELECT 'aaa' ILIKE 'A_a';
SELECT 'aaa' ILIKE 'a_';
SELECT 'aaa' ILIKE '__%';
SELECT 'aaa' ILIKE '____%';
SELECT 'ababac' ILIKE '%abac';
SELECT 'ababac' ILIKE '%%%aBac';
SELECT 'ababac' ILIKE 'abab%%%%%';
SELECT 'ababac' ILIKE '%%%a%%%b%%a%b%%%%%a%c%%';
SELECT 'ababac' ILIKE '%%%a%%%b%%a%b%%%%%a%d%%';
SELECT NOT 'ababac' ILIKE '%Abac';
CREATE TABLE x (x TEXT, x TEXT);
INSERT INTO x VALUES ('abab', 'Ab%'), ('aaa', 'A_a'), ('aaa', '%b%');
SELECT x FROM x WHERE x LIKE 'ab%';
SELECT x FROM x WHERE 'aba' ILIKE x;
SELECT x FROM x WHERE NOT 'aba' ILIKE x;
SELECT x FROM x WHERE x ILIKE x;
SELECT x FROM x WHERE NOT x ILIKE x;
SELECT 'MÜHLEISEN' ILIKE 'mühleisen';
CREATE TABLE x (x TEXT, x TEXT);
INSERT INTO x VALUES ('öäb', 'Ö%B'), ('aaÄ', 'A_ä'), ('aaa', '%b%');
SELECT x FROM x WHERE x ILIKE x;
SELECT x FROM x WHERE NOT x ILIKE x;
PRAGMA x;
SELECT 'a%c' ILIKE 'a$%C' ESCAPE '$';
SELECT 'A%C' ILIKE 'a$%c' ESCAPE '$';
SELECT 'a%c' ILIKE 'a$%C' ESCAPE '/';
SELECT NULL ILIKE 'a$%C' ESCAPE '/';
SELECT 'a%c' ILIKE NULL ESCAPE '$';
SELECT 'a%c' ILIKE NULL ESCAPE '$';
CREATE TABLE x (x TEXT, x TEXT);
INSERT INTO x VALUES ('a%c', 'a$%C');
SELECT x ILIKE x ESCAPE '$' FROM x;
SELECT NOT x ILIKE x ESCAPE '$' FROM x;
SELECT NULL ILIKE x ESCAPE '$' FROM x;
SELECT x ILIKE NULL ESCAPE '$' FROM x;
SELECT x ILIKE NULL ESCAPE '$' FROM x;
SELECT 'a%c' ILIKE 'a$%C' ESCAPE '///';
SELECT 'a%c' ILIKE 'a$%C' ESCAPE '///';
PRAGMA x;
CREATE TABLE x (x TEXT, x INT, x INT);
INSERT INTO x VALUES ('hello', 1, 2), ('world', 2, 3), ('b', 1, 1), (NULL, 2, 2);
SELECT STRPOS(x, 'h') FROM x;
SELECT STRPOS(x, 'h') FROM x;
SELECT STRPOS(x, 'e') FROM x;
SELECT STRPOS(x, 'd') FROM x;
SELECT STRPOS(x, 'he') FROM x;
SELECT STRPOS(x, 'he') FROM x;
SELECT STRPOS(x, 'ello') FROM x;
SELECT STRPOS(x, 'lo') FROM x;
SELECT STRPOS(x, 'he-man') FROM x;
SELECT STRPOS(x, 'o'), x FROM x;
SELECT STRPOS(NULL, 'o') FROM x;
SELECT STRPOS(x, NULL) FROM x;
SELECT STRPOS(NULL, NULL) FROM x;
PRAGMA x;
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('átomo');
INSERT INTO x VALUES ('olá mundo');
INSERT INTO x VALUES ('你好世界');
INSERT INTO x VALUES ('two ñ three ₡ four 🦆 end');
SELECT STRPOS(x, 'á') FROM x;
SELECT STRPOS(x, 'á') FROM x;
SELECT STRPOS(x, 'olá mundo') FROM x;
SELECT STRPOS(x, '你好世界') FROM x;
SELECT STRPOS(x, 'two ñ thr') FROM x;
SELECT STRPOS(x, 'ñ') FROM x;
SELECT STRPOS(x, '₡ four 🦆 e') FROM x;
SELECT STRPOS(x, '🦆 end') FROM x;
PRAGMA x;
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('hello1'), ('hello2'), ('hello3'), ('world1'), ('world2'), ('world3');
SELECT COUNT(*) FROM x WHERE x LIKE '%o%';
SELECT COUNT(*) FROM x WHERE x LIKE '%rld%';
SELECT COUNT(*) FROM x WHERE x LIKE '%o%' OR (x LIKE '%o%' AND x LIKE '%rld%');
SELECT COUNT(*) FROM x WHERE (x LIKE '%o%' AND x LIKE '%rld%') OR x LIKE '%o%';
SELECT COUNT(*) FROM x WHERE (x LIKE '%o%' AND x LIKE '%rld%') OR (x LIKE '%o%') OR (x LIKE '%o%');
SELECT COUNT(*) FROM x WHERE (x LIKE '%o%' AND x LIKE '%rld%') OR (x LIKE '%o%') OR (x LIKE '%o%' AND x LIKE 'blabla%');
SELECT COUNT(*) FROM x WHERE (x LIKE '%o%' AND x LIKE '%1%') OR (x LIKE '%o%' AND x LIKE '%1%' AND x LIKE 'blabla%') OR (x LIKE '%o%' AND x LIKE '%1%' AND x LIKE 'blabla2%');
PRAGMA x;
SELECT JACCARD('hello', 'hello');
SELECT JACCARD('hello', NULL);
SELECT JACCARD(NULL, 'hello');
SELECT JACCARD(NULL, NULL);
SELECT JACCARD('ab', 'aabb');
SELECT JACCARD('aabb', 'ab');
SELECT JACCARD('ab', 'cd');
SELECT JACCARD('cd', 'ab');
SELECT ROUND(JACCARD('ab', 'aabbcc'), 3);
SELECT ROUND(JACCARD('aabbcc', 'ab'), 3);
SELECT ROUND(JACCARD('aabbccddeeff', 'ab'), 3);
SELECT ROUND(JACCARD('ab', 'aabbccddeeff'), 3);
SELECT ROUND(JACCARD('aabbccddeeffg', 'ab'), 3);
SELECT ROUND(JACCARD('ab', 'aaaabbbccddeeffgabcccc'), 3);
SELECT ROUND(JACCARD('ababababababba', 'aaaabbbccddeeffgabcccc'), 3);
SELECT JACCARD('hello', '');
SELECT JACCARD('', 'hello');
SELECT JACCARD('', '');
CREATE TABLE x (x TEXT, x TEXT);
INSERT INTO x VALUES ('hello', 'hallo'), ('aloha', 'fello'), ('fellow', 'ducks'), (NULL, NULL);
SELECT ROUND(JACCARD(x, x), 1) FROM x;
SELECT ROUND(JACCARD(x, 'hallo'), 1) FROM x;
SELECT ROUND(JACCARD('hallo', x), 1) FROM x;
SELECT ROUND(JACCARD(NULL, x), 1) FROM x;
SELECT ROUND(JACCARD(x, NULL), 1) FROM x;
SELECT ROUND(JACCARD('', x), 1) FROM x;
SELECT ROUND(JACCARD(x, ''), 1) FROM x;
PRAGMA x;
SELECT JARO_WINKLER_SIMILARITY('CRATE', 'TRACE');
SELECT JARO_WINKLER_SIMILARITY('DwAyNE', 'DuANE');
SELECT JARO_WINKLER_SIMILARITY('0', '0');
SELECT JARO_WINKLER_SIMILARITY('00', '00');
SELECT JARO_WINKLER_SIMILARITY('0', '00');
SELECT JARO_WINKLER_SIMILARITY('00000000000000000000000000000000000000000000000000000000000000000', '00000000000000000000000000000000000000000000000000000000000000000');
SELECT JARO_WINKLER_SIMILARITY('0000000000000000000000000000000000000000000000000000000000000000', '00000000000000000000000000000000000000000000000000000000000000000');
SELECT JARO_WINKLER_SIMILARITY('000000000000000000000000000000000000000000000000000000000000000', '00000000000000000000000000000000000000000000000000000000000000000');
SELECT JARO_WINKLER_SIMILARITY('10000000000000000000000000000000000000000000000000000000000000020', '00000000000000000000000000000000000000000000000000000000000000000');
SELECT JARO_WINKLER_SIMILARITY('0000000000000000000000000000000000000000000000000000000000000000000000000000001', '00000000000000100000000000000000000000010000000000000000000000000');
SELECT JARO_WINKLER_SIMILARITY('01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', '00000000000000000000000000000000000000000000000000000000000000000');
SELECT JARO_WINKLER_SIMILARITY(NULL, NULL);
SELECT JARO_WINKLER_SIMILARITY('foo', NULL);
SELECT JARO_WINKLER_SIMILARITY(NULL, 'foo');
SELECT JARO_WINKLER_SIMILARITY('', '');
SELECT JARO_WINKLER_SIMILARITY('foo', 'foo');
SELECT JARO_WINKLER_SIMILARITY('foo', 'foo ');
SELECT JARO_WINKLER_SIMILARITY('foo', 'foo  ');
SELECT JARO_WINKLER_SIMILARITY('foo', ' foo ');
SELECT JARO_WINKLER_SIMILARITY('foo', '  foo');
SELECT JARO_WINKLER_SIMILARITY('', 'a');
SELECT JARO_WINKLER_SIMILARITY('aaapppp', '');
SELECT JARO_WINKLER_SIMILARITY('frog', 'fog');
SELECT JARO_WINKLER_SIMILARITY('fly', 'ant');
SELECT JARO_WINKLER_SIMILARITY('elephant', 'hippo');
SELECT JARO_WINKLER_SIMILARITY('hippo', 'elephant');
SELECT JARO_WINKLER_SIMILARITY('hippo', 'zzzzzzzz');
SELECT JARO_WINKLER_SIMILARITY('hello', 'hallo');
SELECT JARO_WINKLER_SIMILARITY('ABC Corporation', 'ABC Corp');
SELECT JARO_WINKLER_SIMILARITY('D N H Enterprises Inc', 'D &amp; H Enterprises, Inc.');
SELECT JARO_WINKLER_SIMILARITY('My Gym Children''s Fitness Center', 'My Gym. Childrens Fitness');
SELECT JARO_WINKLER_SIMILARITY('PENNSYLVANIA', 'PENNCISYLVNIA');
SELECT JARO_WINKLER_SIMILARITY('CRATE', 'TRACE', 0.6);
SELECT JARO_WINKLER_SIMILARITY('CRATE', 'TRACE', 0.8);
SELECT JARO_WINKLER_SIMILARITY('000000000000000000000000000000000000000000000000000000000000000', '00000000000000000000000000000000000000000000000000000000000000000', 0.9);
SELECT JARO_WINKLER_SIMILARITY('000000000000000000000000000000000000000000000000000000000000000', '00000000000000000000000000000000000000000000000000000000000000000', 0.995);
SELECT JARO_WINKLER_SIMILARITY('000000000000000000000000000000000000000000000000000000000000000', '00000000000000000000000000000000000000000000000000000000000000000', 0.995);
SELECT AVG(JARO_WINKLER_SIMILARITY('00000000', x)) FROM x;
SELECT AVG(JARO_WINKLER_SIMILARITY(x, '00000000')) FROM x;
SET x = 'nulls_first';
PRAGMA x;
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('hello'), ('world'), (NULL);
SELECT LENGTH(x) FROM x ORDER BY x;
SELECT LENGTH(x || ' ' || '🦆') FROM x ORDER BY x;
SELECT LENGTH('asdf'), LENGTH('asdf');
PRAGMA x;
SELECT LEVENSHTEIN('hallo', 'hallo');
SELECT LEVENSHTEIN('hallo', 'hello');
SELECT LEVENSHTEIN('hello', 'hallo');
SELECT LEVENSHTEIN('lawn', 'flaw');
SELECT LEVENSHTEIN('flaw', 'lawn');
SELECT LEVENSHTEIN('kitten', 'sitting');
SELECT LEVENSHTEIN('sitting', 'kitten');
SELECT LEVENSHTEIN('hallo', 'hoi');
SELECT LEVENSHTEIN('hoi', 'hallo');
SELECT LEVENSHTEIN(NULL, 'hi');
SELECT LEVENSHTEIN('hi', NULL);
SELECT LEVENSHTEIN(NULL, NULL);
SELECT LEVENSHTEIN('', NULL);
SELECT LEVENSHTEIN(NULL, '');
SELECT LEVENSHTEIN('', 'hi');
SELECT LEVENSHTEIN('hi', '');
SELECT LEVENSHTEIN('', '');
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('hello'), ('hallo'), ('aloha'), ('fello'), ('fellow'), ('ducks');
SELECT LEVENSHTEIN(x, 'hallo') FROM x ORDER BY x;
SELECT LEVENSHTEIN('hallo', x) FROM x ORDER BY x;
SELECT LEVENSHTEIN(NULL, x) FROM x;
SELECT LEVENSHTEIN(NULL, x) FROM x;
SELECT LEVENSHTEIN('', x) FROM x ORDER BY x;
SELECT LEVENSHTEIN(x, '') FROM x ORDER BY x;
DROP TABLE x;
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES (NULL);
SELECT LEVENSHTEIN(x, NULL) FROM x;
SELECT LEVENSHTEIN(NULL, x) FROM x;
SELECT LEVENSHTEIN('hi', x) FROM x;
SELECT LEVENSHTEIN(x, 'hi') FROM x;
SELECT LEVENSHTEIN('', x) FROM x;
SELECT LEVENSHTEIN(x, '') FROM x;
DROP TABLE x;
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('');
SELECT LEVENSHTEIN(NULL, x) FROM x;
SELECT LEVENSHTEIN(x, NULL) FROM x;
SELECT LEVENSHTEIN(x, '') FROM x;
SELECT LEVENSHTEIN('', x) FROM x;
SELECT LEVENSHTEIN(x, 'hi') FROM x;
SELECT LEVENSHTEIN('hi', x) FROM x;
SELECT LEVENSHTEIN('hallo', 'hello');
SELECT LEVENSHTEIN(x, 'hello') FROM x;
DROP TABLE x;
CREATE TABLE x (x TEXT, x TEXT);
INSERT INTO x VALUES ('hello', 'hello'), ('hello', 'hallo'), ('flaw', 'lawn'), ('sitting', 'kitten'), ('hallo', 'aloha'), ('hello', 'aloha'), (NULL, NULL), ('', ''), (NULL, 'bora'), ('bora', NULL), ('hi', ''), ('', 'hi'), (NULL, ''), ('', NULL);
SELECT LEVENSHTEIN(x, x) AS x FROM x;
PRAGMA x;
SELECT 'aaa' LIKE 'bbb';
SELECT 'aaa' LIKE 'abab';
SELECT 'aaa' LIKE 'aaa';
SELECT 'aaa' LIKE '%';
SELECT 'aaa' LIKE '%a';
SELECT 'aaa' LIKE '%b';
SELECT 'aaa' LIKE 'a%';
SELECT 'aaa' LIKE 'b%';
SELECT 'aaa' LIKE 'a_a';
SELECT 'aaa' LIKE 'a_';
SELECT 'aaa' LIKE '__%';
SELECT 'aaa' LIKE '____%';
SELECT 'ababac' LIKE '%abac';
SELECT 'ababac' LIKE '%%%abac';
SELECT 'ababac' LIKE 'abab%%%%%';
SELECT 'ababac' LIKE '%%%a%%%b%%a%b%%%%%a%c%%';
SELECT 'ababac' LIKE '%%%a%%%b%%a%b%%%%%a%d%%';
SELECT NOT 'ababac' LIKE '%abac';
SELECT 'aabbccc' LIKE '%aa%bb%cc';
SELECT 'zebra elephant tiger horse' LIKE '';
SELECT 'zebra elephant tiger horse' LIKE '%';
SELECT 'zebra elephant tiger horse' LIKE 'zebra';
SELECT 'zebra elephant tiger horse' LIKE 'zebra elephant tiger horse';
SELECT 'zebra elephant tiger horse' LIKE 'zebra elephant tiger horse%';
SELECT 'zebra elephant tiger horse' LIKE '%zebra elephant tiger horse%';
SELECT 'zebra elephant tiger horse' LIKE '%zebra elephant tiger horse blabla';
SELECT 'zebra elephant tiger horse' LIKE 'zebra elephant tiger horse blabla%';
SELECT 'zebra elephant tiger horse' LIKE 'zebra%';
SELECT 'zebra elephant tiger horse' LIKE '%horse';
SELECT 'zebra elephant tiger horse' LIKE 'zebra%elephant%horse';
SELECT 'zebra elephant tiger horse' LIKE 'zebra%elephant%tiger%horse';
SELECT 'zebra elephant tiger horse' LIKE '%zebra%elephant%tiger%horse';
SELECT 'zebra elephant tiger horse' LIKE 'zebra%elephant%tiger%horse%';
SELECT 'zebra elephant tiger horse' LIKE '%zebra%elephant%tiger%horse%';
SELECT 'zebra elephant tiger horse' LIKE '%%zebra %%%ele%phan%t t%ig%er% horse%';
SELECT 'zebra elephant tiger horse' LIKE 'zebra%tiger%horse';
SELECT 'zebra elephant tiger horse' LIKE 'zebra%tiger%elephant%horse';
SELECT NOT 'zebra elephant tiger horse' LIKE '';
SELECT NOT 'zebra elephant tiger horse' LIKE '%';
SELECT NOT 'zebra elephant tiger horse' LIKE 'zebra';
SELECT NOT 'zebra elephant tiger horse' LIKE 'zebra elephant tiger horse';
SELECT NOT 'zebra elephant tiger horse' LIKE 'zebra%';
SELECT NOT 'zebra elephant tiger horse' LIKE '%horse';
SELECT NOT 'zebra elephant tiger horse' LIKE 'zebra%elephant%horse';
SELECT NOT 'zebra elephant tiger horse' LIKE 'zebra%elephant%tiger%horse';
SELECT NOT 'zebra elephant tiger horse' LIKE '%zebra%elephant%tiger%horse';
SELECT NOT 'zebra elephant tiger horse' LIKE 'zebra%elephant%tiger%horse%';
SELECT NOT 'zebra elephant tiger horse' LIKE '%zebra%elephant%tiger%horse%';
SELECT NOT 'zebra elephant tiger horse' LIKE '%%zebra %%%ele%phan%t t%ig%er% horse%';
SELECT NOT 'zebra elephant tiger horse' LIKE 'zebra%tiger%horse';
SELECT NOT 'zebra elephant tiger horse' LIKE 'zebra%tiger%elephant%horse';
CREATE TABLE x (x TEXT, x TEXT);
INSERT INTO x VALUES ('abab', 'ab%'), ('aaa', 'a_a'), ('aaa', '%b%');
SELECT x FROM x WHERE x LIKE 'ab%';
SELECT x FROM x WHERE 'aba' LIKE x;
SELECT x FROM x WHERE x LIKE x;
SELECT 'hello' LIKE 'hê?llo' COLLATE idontexist;
SELECT '%++' LIKE '*%++' ESCAPE '*';
SELECT NOT '%++' LIKE '*%++' ESCAPE '*';
SELECT '%' LIKE '%' ESCAPE '%';
SELECT '%' LIKE '*' ESCAPE '*';
SELECT '\' LIKE '\\' ESCAPE '\';
SELECT '\\' LIKE '\\' ESCAPE '\';
SELECT '%' LIKE '*%' ESCAPE '*';
SELECT '_ ' LIKE '*_ ' ESCAPE '*';
SELECT ' a ' LIKE '*_ ' ESCAPE '*';
SELECT '%_' LIKE '%_' ESCAPE '';
SELECT NOT '*%' LIKE '*%' ESCAPE '*';
SELECT '%_' LIKE '%_' ESCAPE '\\';
SELECT '%_' LIKE '%_' ESCAPE '**';
CREATE TABLE x (x TEXT, x TEXT);
INSERT INTO x VALUES ('abab', 'ab%'), ('aaa', 'a*_a'), ('aaa', '*%b'), ('bbb', 'a%');
SELECT x FROM x;
SELECT x FROM x;
SELECT x FROM x WHERE x LIKE 'a*%' ESCAPE '*';
SELECT x FROM x WHERE 'aba' LIKE x ESCAPE '*';
SELECT x FROM x WHERE x LIKE x ESCAPE '*';
SELECT x FROM x WHERE x LIKE x ESCAPE '*';
SET x = 'nulls_first';
PRAGMA x;
SELECT MISMATCHES('hallo', 'hallo');
SELECT MISMATCHES('hello', 'hallo');
SELECT MISMATCHES('hallo', 'hello');
SELECT MISMATCHES('aloha', 'hallo');
SELECT MISMATCHES('hallo', 'aloha');
SELECT MISMATCHES(NULL, 'hallo');
SELECT MISMATCHES('hello', NULL);
SELECT MISMATCHES(NULL, NULL);
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('hello'), ('hallo'), ('aloha'), ('world'), (NULL);
SELECT MISMATCHES(x, 'hallo') FROM x ORDER BY x;
SELECT MISMATCHES('hallo', x) FROM x ORDER BY x;
SELECT MISMATCHES('', '');
SELECT MISMATCHES(NULL, x) FROM x ORDER BY x;
SELECT MISMATCHES(x, NULL) FROM x ORDER BY x;
SELECT MISMATCHES('hoi', 'hallo');
SELECT MISMATCHES('hallo', 'hoi');
SELECT MISMATCHES('', 'hallo');
SELECT MISMATCHES('hi', '');
SELECT MISMATCHES('', x) FROM x ORDER BY x;
SELECT MISMATCHES(x, '') FROM x ORDER BY x;
DROP TABLE x;
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('hello'), ('halo'), (NULL);
SELECT MISMATCHES(x, 'hallo') FROM x;
SELECT MISMATCHES('hallo', x) FROM x;
SELECT HAMMING('hallo', 'hallo');
SELECT HAMMING('hello', 'hallo');
SELECT HAMMING(x, 'hallo') FROM x WHERE x = 'hello';
DROP TABLE x;
CREATE TABLE x (x TEXT, x TEXT);
INSERT INTO x VALUES ('hello', 'world'), ('hallo', 'ola'), ('hello', ''), (NULL, NULL), ('', ''), ('bora', 'bora');
SELECT x, x, HAMMING(x, x) AS x FROM x WHERE LENGTH(x) = LENGTH(x);
SELECT HAMMING(x, x) FROM x;
PRAGMA x;
SELECT LPAD(NULL, 7, '-'), LPAD('Base', NULL, '-'), LPAD('Base', 7, NULL), LPAD(NULL, NULL, '-'), LPAD(NULL, 7, NULL), LPAD('Base', NULL, NULL), LPAD(NULL, NULL, NULL);
SELECT RPAD(NULL, 7, '-'), RPAD('Base', NULL, '-'), RPAD('Base', 7, NULL), RPAD(NULL, NULL, '-'), RPAD(NULL, 7, NULL), RPAD('Base', NULL, NULL), RPAD(NULL, NULL, NULL);
SELECT LPAD('Base', 7, '-'), LPAD('Base', 4, '-'), LPAD('Base', 2, ''), LPAD('Base', -1, '-');
SELECT RPAD('Base', 7, '-'), RPAD('Base', 4, '-'), RPAD('Base', 2, ''), RPAD('Base', -1, '-');
SELECT LPAD('Base', 7, '-|'), LPAD('Base', 6, '-|'), LPAD('Base', 5, '-|'), LPAD('Base', 4, '-|');
SELECT RPAD('Base', 7, '-|'), RPAD('Base', 6, '-|'), RPAD('Base', 5, '-|'), RPAD('Base', 4, '-|');
SELECT LPAD('MotörHead', 16, 'RÄcks'), LPAD('MotörHead', 12, 'RÄcks'), LPAD('MotörHead', 10, 'RÄcks');
SELECT RPAD('MotörHead', 16, 'RÄcks'), RPAD('MotörHead', 12, 'RÄcks'), RPAD('MotörHead', 10, 'RÄcks');
CREATE TABLE x (x TEXT, x TEXT);
INSERT INTO x VALUES ('Hello', 'World'), ('HuLlD', NULL), ('MotörHead', 'RÄcks');
SELECT LPAD(x, 16, x), RPAD(x, 16, x) FROM x;
SELECT LPAD(x, 12, x), RPAD(x, 12, x), UPPER(x), LOWER(x) FROM x WHERE NOT x IS NULL;
SELECT LPAD(x, 12, x), RPAD(x, 12, x), UPPER(x), LOWER(x) FROM x WHERE NOT x IS NULL;
SELECT LPAD(x, 12, x), RPAD(x, 12, x), UPPER(x), LOWER(x) FROM x WHERE NOT x IS NULL;
SELECT LPAD(1, 2, ' ');
SELECT LPAD('Hello', 10, '');
SELECT LPAD('a', 100000000000000000, 0);
SELECT LPAD('a', 100000000000000000, 0);
SELECT LPAD('a', 100000000000000000, 0);
SELECT RPAD(1, 2, ' ');
SELECT RPAD('Hello', 10, '');
SELECT RPAD('a', 100000000000000000, 0);
SET x = 'nulls_first';
PRAGMA x;
SELECT PREFIX('abcd', 'a');
SELECT PREFIX('abcd', 'ab');
SELECT PREFIX('abcd', 'abc');
SELECT PREFIX('abcd', 'abcd');
SELECT PREFIX('abcd', 'b');
SELECT PREFIX('abcdefgh', 'a');
SELECT PREFIX('abcdefgh', 'ab');
SELECT PREFIX('abcdefgh', 'abc');
SELECT PREFIX('abcdefgh', 'abcd');
SELECT PREFIX('abcdefgh', 'abcde');
SELECT PREFIX('abcdefgh', 'b');
SELECT PREFIX('abcdefghijklmnopqrstuvwxyz', 'a');
SELECT PREFIX('abcdefghijklmnopqrstuvwxyz', 'ab');
SELECT PREFIX('abcdefghijklmnopqrstuvwxyz', 'abc');
SELECT PREFIX('abcdefghijklmnopqrstuvwxyz', 'abcd');
SELECT PREFIX('abcdefghijklmnopqrstuvwxyz', 'abcde');
SELECT PREFIX('abcdefghijklmnopqrstuvwxyz', 'b');
SELECT PREFIX('abcdefghijklmnopqrstuvwxyz', 'abcdefghijklmnopqrstuvwx');
SELECT PREFIX('abcdefghijklmnopqrstuvwxyz', 'abcfefghijklmnopqrstuvwx');
SELECT PREFIX('', 'aaa');
SELECT PREFIX('aaa', '');
CREATE TABLE x (x TEXT);
SELECT * FROM x WHERE PREFIX(x.x, '');
SELECT PREFIX('átomo', 'á');
SELECT PREFIX('átomo', 'á');
SELECT PREFIX('átomo', 'a');
SELECT PREFIX('olá mundo', 'olá');
SELECT PREFIX('olá mundo', 'olá');
SELECT PREFIX('olá mundo', 'ola');
SELECT PREFIX('ñeft', 'ñ');
SELECT PREFIX('ñeft', 'ñ');
SELECT PREFIX('ñeft', 'ñeft');
SELECT PREFIX('ñeft', 'neft');
SELECT PREFIX('two ñ three ₡ four 🦆 end', 'two ñ');
SELECT PREFIX('two ñ three ₡ four 🦆 end', 'two ñ');
SELECT PREFIX('two ñ three ₡ four 🦆 end', 'two n');
SELECT PREFIX('two ñ three ₡ four 🦆 end', 'two ñ three');
SELECT PREFIX('two ñ three ₡ four 🦆 end', 'two ñ three ₡');
SELECT PREFIX('two ñ three ₡ four 🦆 end', 'two ñ three ₡ four 🦆');
SELECT PREFIX('two ñ three ₡ four 🦆 end', 'two ñ three ₡ four 🦆 end');
SELECT PREFIX('two ñ three ₡ four 🦆 end', 'two ñ three ₡ four 🦆 end');
INSERT INTO x VALUES ('a'), ('b'), ('d');
SELECT COUNT(*) FROM x WHERE PREFIX(x.x, '');
SELECT x, PREFIX(x.x, '') FROM x WHERE x <> 'b' ORDER BY x.x;
INSERT INTO x VALUES (NULL);
SELECT COUNT(*) FROM x WHERE PREFIX(x.x, '');
SELECT x, PREFIX(x.x, '') FROM x WHERE x IS NULL OR x <> 'b' ORDER BY x.x;
PRAGMA x;
SELECT PRINTF('hello'), PRINTF(NULL);
SELECT PRINTF('%s', 'hello'), PRINTF('%s: %s', 'hello', 'world');
SELECT PRINTF('%s', NULL), PRINTF(NULL, 'hello', 'world');
SELECT PRINTF('%d', TRUE);
SELECT PRINTF('%d', 33), PRINTF('%d + %d = %d', 3, 5, 3 + 5);
SELECT PRINTF('%04d', 33), PRINTF('%s %02d:%02d:%02d %s', 'time', 12, 3, 16, 'AM'), PRINTF('%10d', 1992);
SELECT PRINTF('%hhd %hd %d %lld', CAST(33 AS TINYINT), CAST(12 AS SMALLINT), CAST(40 AS INT), CAST(80 AS BIGINT));
SELECT PRINTF('%d %lld %hhd %hd', CAST(33 AS TINYINT), CAST(12 AS SMALLINT), CAST(40 AS INT), CAST(80 AS BIGINT));
SELECT PRINTF('%s %s = %s', CAST('1992-01-01' AS DATE), CAST('12:01:00' AS TIME), CAST('1992-01-01 12:01:00' AS TIMESTAMP));
SELECT PRINTF('%s', CAST('\x01\xa0' AS BLOB));
SELECT PRINTF('%s', CAST(120381902481294715712 AS INT128));
SELECT PRINTF('%s', CAST(120381902481294715712 AS UINT128));
SELECT PRINTF('%x', CAST(255 AS UTINYINT));
SELECT PRINTF('%x', CAST(65535 AS USMALLINT));
SELECT PRINTF('%x', CAST(4294967295 AS UINTEGER));
SELECT PRINTF('%x', CAST(18446744073709551615 AS UBIGINT));
SELECT PRINTF('%.3f', CAST('1.234' AS DECIMAL(18, 3)));
SELECT PRINTF('%d %x %o %#x %#o', 100, 100, 100, 100, 100);
SELECT PRINTF('%c', 65);
SELECT PRINTF('%*d', 5, 10);
SELECT PRINTF('%.2f', CAST(10.0 AS REAL)), PRINTF('%.4f', 0.5);
SELECT PRINTF('floats: %4.2f %+.0e %E', 3.1416, 3.1416, 3.1416);
SELECT PRINTF('%s');
SELECT PRINTF('%s %s', 'hello');
SELECT PRINTF('%s', 'hello', 'world');
SELECT PRINTF('%s', 42);
SELECT PRINTF('%d', 'hello');
CREATE TABLE x (x INT, x TEXT, x INT, x TEXT);
INSERT INTO x VALUES (1, '%d: %s', 10, 'hello');
INSERT INTO x VALUES (2, 'blabla %d blabla %s', 20, 'blabla');
INSERT INTO x VALUES (3, NULL, 30, 'abcde');
SELECT PRINTF(x) FROM x ORDER BY x;
SELECT PRINTF(CASE WHEN x < 15 THEN NULL ELSE CAST(x AS TEXT) END) FROM x ORDER BY x;
SELECT PRINTF(x, x, x) FROM x ORDER BY x;
SELECT PRINTF(x, 10, x) FROM x ORDER BY x;
SELECT PRINTF('%s: %s', x, x) FROM x ORDER BY x;
SELECT PRINTF('%s: %s', x, x) FROM x WHERE x <> 2 ORDER BY x;
SELECT PRINTF('%d %d %d %d', CAST(100 AS TINYINT), CAST(1000 AS SMALLINT), CAST(1000 AS INT), CAST(1000 AS BIGINT));
PRAGMA x;
SELECT REPEAT(NULL, NULL), REPEAT(NULL, 3), REPEAT('MySQL', NULL);
SELECT REPEAT('', 3), REPEAT('MySQL', 3), REPEAT('MotörHead', 2), REPEAT('Hello', -1);
CREATE TABLE x (x TEXT, x TEXT);
INSERT INTO x VALUES ('Hello', 'World'), ('HuLlD', NULL), ('MotörHead', 'RÄcks'), ('', NULL);
SELECT REPEAT(x, 3) FROM x;
SELECT REPEAT(x, 2) FROM x;
SELECT REPEAT(x, 4) FROM x WHERE NOT x IS NULL;
SELECT REPEAT('', 99);
SELECT REPEAT('hello world', 0);
SELECT REPEAT('hello world', -1);
SELECT REPEAT(CAST('00' AS BLOB), 2);
SELECT REPEAT(CAST('00' AS BLOB), 2);
SELECT REPEAT(CAST('00' AS BLOB), 2);
SELECT REPEAT('hello', 'world');
SELECT REPEAT('hello', 'world');
PRAGMA x;
SELECT REPLACE('This is the main test string', NULL, 'ALT');
SELECT REPLACE(NULL, 'main', 'ALT');
SELECT REPLACE('This is the main test string', 'main', NULL);
SELECT REPLACE('This is the main test string', 'main', 'ALT');
SELECT REPLACE('This is the main test string', 'main', 'larger-main');
SELECT REPLACE('aaaaaaa', 'a', '0123456789');
CREATE TABLE x (x TEXT, x TEXT);
INSERT INTO x VALUES ('Hello', 'World'), ('HuLlD', NULL), ('MotörHead', 'RÄcks'), ('', NULL);
SELECT REPLACE(x, 'l', '-') FROM x;
SELECT REPLACE(x, 'Ä', '--') FROM x;
SELECT REPLACE(x, 'H', '') FROM x WHERE NOT x IS NULL;
SELECT REPLACE(1);
SELECT REPLACE(1, 2);
SELECT REPLACE(1, 2, 3, 4);
PRAGMA x;
SELECT REVERSE(''), REVERSE('Hello'), REVERSE('MotörHead'), REVERSE(NULL);
CREATE TABLE x (x TEXT, x TEXT);
INSERT INTO x VALUES ('Hello', 'World'), ('HuLlD', NULL), ('MotörHead', 'RÄcks'), ('', NULL);
SELECT REVERSE(x) FROM x;
SELECT REVERSE(x) FROM x;
SELECT REVERSE(x) FROM x WHERE NOT x IS NULL;
SELECT REVERSE();
SELECT REVERSE(1, 2);
SELECT REVERSE('hello', 'world');
SELECT 'aaa' SIMILAR TO 'bbb';
SELECT 'aaa' SIMILAR TO 'aaa';
SELECT 'aaa' SIMILAR TO '.*';
SELECT 'aaa' SIMILAR TO 'a.*';
SELECT 'aaa' SIMILAR TO '.*a';
SELECT 'aaa' SIMILAR TO '.*b';
SELECT 'aaa' SIMILAR TO 'b.*';
SELECT 'aaa' SIMILAR TO 'a[a-z]a';
SELECT 'aaa' SIMILAR TO 'a[a-z]{2}';
SELECT 'aaa' SIMILAR TO 'a[a-z].*';
SELECT 'aaa' SIMILAR TO '[a-z][a-z].*';
SELECT 'aaa' SIMILAR TO '[a-z]{3}';
SELECT NOT 'aaa' SIMILAR TO '[b-z]{3}';
SELECT REGEXP_MATCHES('aaa', 'aaa');
SELECT REGEXP_MATCHES('aaa', 'aaa');
SELECT REGEXP_MATCHES('aaa', '^a');
SELECT REGEXP_MATCHES('aaa', '^a+');
SELECT REGEXP_MATCHES('aaa', '(a|b)*');
SELECT REGEXP_MATCHES('abc', '^(b|c)');
CREATE TABLE x (x TEXT, x TEXT);
INSERT INTO x VALUES ('aaa', 'a[a-z]a'), ('abab', 'ab.*'), ('aaa', 'a[a-z]a'), ('aaa', '.*b.*');
SELECT x FROM x WHERE x SIMILAR TO 'ab.*';
SELECT x FROM x WHERE 'aba' SIMILAR TO x;
SELECT x FROM x WHERE x SIMILAR TO x;
SELECT x FROM x WHERE NOT x SIMILAR TO x;
SELECT x FROM x WHERE NOT x SIMILAR TO x;
PRAGMA x;
SELECT SPLIT_PART('a,b,c', ',', 1);
SELECT SPLIT_PART('a,b,c', ',', 2);
SELECT SPLIT_PART('a,,b,,c', ',,', 2);
SELECT SPLIT_PART('a,b,c', '|', 1);
SELECT SPLIT_PART('a,b,c', ',', -1);
SELECT SPLIT_PART('a,b,c', ',', -2);
SELECT SPLIT_PART('a,b,c', ',', 0);
SELECT SPLIT_PART('a,b,c', ',', 5);
SELECT SPLIT_PART('a,b,c', ',', -5);
SELECT SPLIT_PART('', '', 1);
SELECT SPLIT_PART('a,b,c', '', 3);
SELECT SPLIT_PART('', ',', 1);
SELECT SPLIT_PART(NULL, NULL, 1);
SELECT SPLIT_PART('a,b,c', NULL, 1);
SELECT SPLIT_PART(NULL, ',', 1);
SELECT SPLIT_PART('a,b,c', ',', NULL);
SELECT SPLIT_PART('a,b,c', ',', NULL);
SELECT SPLIT_PART('a,b,c', ',', NULL);
SELECT SPLIT_PART('a,b,c', ',', NULL);
PRAGMA x;
SELECT STARTS_WITH('hello world', 'h'), STARTS_WITH('hello world', 'he'), STARTS_WITH('hello world', 'hel'), STARTS_WITH('hello world', 'hell'), STARTS_WITH('hello world', 'hello'), STARTS_WITH('hello world', 'hello '), STARTS_WITH('hello world', 'hello w'), STARTS_WITH('hello world', 'hello wo'), STARTS_WITH('hello world', 'hello wor'), STARTS_WITH('hello world', 'hello worl');
SELECT STARTS_WITH('hello world', 'a'), STARTS_WITH('hello world', 'ha'), STARTS_WITH('hello world', 'hea'), STARTS_WITH('hello world', 'hela'), STARTS_WITH('hello world', 'hella'), STARTS_WITH('hello world', 'helloa'), STARTS_WITH('hello world', 'hello a'), STARTS_WITH('hello world', 'hello wa'), STARTS_WITH('hello world', 'hello woa'), STARTS_WITH('hello world', 'hello wora');
SELECT STARTS_WITH('hello', ''), STARTS_WITH('', ''), STARTS_WITH(NULL, '');
CREATE TABLE x (x TEXT, x INT, x INT);
INSERT INTO x VALUES ('hello', 1, 2), ('world', 2, 3), ('h', 1, 1), (NULL, 2, 2);
SELECT STARTS_WITH(x, 'h') FROM x;
SELECT STARTS_WITH(x, 'he') FROM x;
SELECT STARTS_WITH(x, 'he-man') FROM x;
SELECT STARTS_WITH(NULL, 'h') FROM x;
SELECT STARTS_WITH(x, NULL) FROM x;
SELECT STARTS_WITH(NULL, NULL) FROM x;
SELECT STARTS_WITH(x, '') FROM x;
PRAGMA x;
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('átomo');
INSERT INTO x VALUES ('olá mundo');
INSERT INTO x VALUES ('你好世界');
INSERT INTO x VALUES ('two ñ three ₡ four 🦆 end');
SELECT STARTS_WITH(x, 'á') FROM x;
SELECT STARTS_WITH(x, 'olá mundo') FROM x;
SELECT STARTS_WITH(x, '你好世界') FROM x;
SELECT STARTS_WITH(x, 'two ñ thr') FROM x;
SELECT STARTS_WITH(x, 'ñ') FROM x;
SELECT STARTS_WITH(x, '₡ four 🦆 e') FROM x;
PRAGMA x;
SELECT STARTS_WITH('hello world', 'h'), STARTS_WITH('hello world', 'he'), STARTS_WITH('hello world', 'hel'), STARTS_WITH('hello world', 'hell'), STARTS_WITH('hello world', 'hello'), STARTS_WITH('hello world', 'hello '), STARTS_WITH('hello world', 'hello w'), STARTS_WITH('hello world', 'hello wo'), STARTS_WITH('hello world', 'hello wor'), STARTS_WITH('hello world', 'hello worl');
SELECT STARTS_WITH('hello world', 'a'), STARTS_WITH('hello world', 'ha'), STARTS_WITH('hello world', 'hea'), STARTS_WITH('hello world', 'hela'), STARTS_WITH('hello world', 'hella'), STARTS_WITH('hello world', 'helloa'), STARTS_WITH('hello world', 'hello a'), STARTS_WITH('hello world', 'hello wa'), STARTS_WITH('hello world', 'hello woa'), STARTS_WITH('hello world', 'hello wora');
SELECT STARTS_WITH('hello', ''), STARTS_WITH('', ''), STARTS_WITH(NULL, '');
CREATE TABLE x (x TEXT, x INT, x INT);
INSERT INTO x VALUES ('hello', 1, 2), ('world', 2, 3), ('h', 1, 1), (NULL, 2, 2);
SELECT STARTS_WITH(x, 'h') FROM x;
SELECT STARTS_WITH(x, 'he') FROM x;
SELECT STARTS_WITH(x, 'he-man') FROM x;
SELECT STARTS_WITH(NULL, 'h') FROM x;
SELECT STARTS_WITH(x, NULL) FROM x;
SELECT STARTS_WITH(NULL, NULL) FROM x;
SELECT STARTS_WITH(x, '') FROM x;
PRAGMA x;
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('átomo');
INSERT INTO x VALUES ('olá mundo');
INSERT INTO x VALUES ('你好世界');
INSERT INTO x VALUES ('two ñ three ₡ four 🦆 end');
SELECT STARTS_WITH(x, 'á') FROM x;
SELECT STARTS_WITH(x, 'olá mundo') FROM x;
SELECT STARTS_WITH(x, '你好世界') FROM x;
SELECT STARTS_WITH(x, 'two ñ thr') FROM x;
SELECT STARTS_WITH(x, 'ñ') FROM x;
SELECT STARTS_WITH(x, '₡ four 🦆 e') FROM x;
PRAGMA x;
SELECT 'hello'[0 : 2];
SELECT ('hello')[0 : 2];
CREATE TABLE x (x TEXT, x INT, x INT);
INSERT INTO x VALUES ('hello', 0, 2), ('world', 1, 3), ('b', 0, 1), (NULL, 1, 2);
SELECT ARRAY_SLICE('🦆ab', 0, 0), ARRAY_SLICE('abc', 0, 0);
SELECT ARRAY_SLICE(x, 0, 2) FROM x;
SELECT LIST_SLICE(x, 0, 2) FROM x;
SELECT ARRAY_SLICE(x, 1, 3) FROM x;
SELECT ARRAY_SLICE(x, 2, 3) FROM x;
SELECT ARRAY_SLICE(x, x, x + x) FROM x;
SELECT ARRAY_SLICE(x, x, 2 + x) FROM x;
SELECT ARRAY_SLICE(x, 0, x) FROM x;
SELECT ARRAY_SLICE('hello', x, x + x) FROM x;
SELECT ARRAY_SLICE(CAST(NULL AS TEXT), x, x + x) FROM x;
SELECT ARRAY_SLICE('hello', NULL, x + NULL) FROM x;
SELECT ARRAY_SLICE('hello', x + 1, NULL + x) FROM x;
SELECT ARRAY_SLICE(CAST(NULL AS TEXT), NULL, x + NULL) FROM x;
SELECT ARRAY_SLICE('hello', NULL, NULL + NULL) FROM x;
SELECT ARRAY_SLICE(CAST(NULL AS TEXT), x, NULL + x) FROM x;
SELECT ARRAY_SLICE(CAST(NULL AS TEXT), NULL, NULL + NULL) FROM x;
SELECT ARRAY_SLICE(x, -2, NULL) FROM x;
SELECT ARRAY_SLICE(x, 0, 1) FROM x;
SELECT ARRAY_SLICE(x, -4, -2) FROM x;
SELECT ARRAY_SLICE(x, 1, 0) FROM x;
SELECT ARRAY_SLICE(x, 2, NULL) FROM x;
SELECT ARRAY_SLICE(x, (2147483647 - 1), 1) FROM x;
SELECT ARRAY_SLICE(x, (2147483647 - 1), -1) FROM x;
SELECT ARRAY_SLICE(x, (-2147483646 - 1), -1) FROM x;
SELECT ARRAY_SLICE(x, (-2147483646 - 1), -2147483647) FROM x;
SELECT ARRAY_SLICE([], -1, -9223372036854775808);
SELECT * FROM (SELECT LIST_SLICE(NULL, 1, 3, 2));
SELECT x[1 : 2] FROM (SELECT NULL) AS x;
SELECT * FROM (SELECT LIST_SLICE(CAST(NULL AS INT[3]), 1, 3, 2));
PRAGMA x;
CREATE TABLE x (x TEXT, x INT, x INT);
INSERT INTO x VALUES ('hello', 0, 2), ('world', 1, 3), ('b', 0, 1), (NULL, 1, 2);
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES (NULL);
INSERT INTO x VALUES (NULL);
INSERT INTO x VALUES (NULL);
INSERT INTO x VALUES (NULL);
INSERT INTO x VALUES (NULL);
INSERT INTO x VALUES (NULL);
SELECT '🦆ab'[0 : 0], 'abc'[0 : 0];
SELECT 'MotörHead'[ : 5];
SELECT x[0 : 2] FROM x;
SELECT x[1 : 3] FROM x;
SELECT x[2 : 3] FROM x;
SELECT x[x : x + x] FROM x;
SELECT x[x : 2 + x] FROM x;
SELECT x[0 : x] FROM x;
SELECT 'hello'[x : x + x] FROM x;
SELECT x[x : x + x] FROM x, x;
SELECT 'hello'[NULL : x + NULL] FROM x;
SELECT 'hello'[x : NULL + x] FROM x;
SELECT 'hello'[x + 1 : NULL + x] FROM x;
SELECT x[NULL : x + NULL] FROM x, x;
SELECT 'hello'[NULL : NULL + NULL] FROM x;
SELECT x[x : NULL + x] FROM x, x;
SELECT x[NULL : NULL + NULL] FROM x, x;
SELECT x[-2 : ] FROM x;
SELECT x[0 : 1] FROM x;
SELECT x[-4 : -2] FROM x;
SELECT x[1 : 0] FROM x;
SELECT x[2 : ] FROM x;
SELECT x[(2147483647 - 1) : 1] FROM x;
SELECT x[(2147483647 - 1) : -1] FROM x;
SELECT x[(-2147483646 - 1) : -1] FROM x;
SELECT x[(-2147483646 - 1) : -2147483647] FROM x;
PRAGMA x;
SELECT STR_SPLIT(NULL, NULL);
SELECT * FROM (VALUES (STR_SPLIT('hello world', ' ')), (STR_SPLIT(NULL, ' ')), (STR_SPLIT('a b c', NULL)), (STR_SPLIT('a b c', ' '))) AS x;
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('aba'), (NULL), ('ababa');
SELECT UNNEST(STR_SPLIT(x, 'b')) FROM x;
SELECT UNNEST(STR_SPLIT(NULL, ' ')) IS NULL LIMIT 5;
SELECT UNNEST(STR_SPLIT('üüüüü', '◌̈'));
SELECT UNNEST(STR_SPLIT('üüüüü', '◌'));
SELECT UNNEST(STR_SPLIT_REGEX('üüüüü', '◌̈'));
SELECT UNNEST(STR_SPLIT_REGEX('üüüüü', '◌'));
SELECT UNNEST(STR_SPLIT(' 🦆🦆  🦆🦆', '  '));
SELECT UNNEST(STR_SPLIT('a a a a a', ' '));
SELECT UNNEST(STR_SPLIT('🦆 🦆 🦆 🦆 🦆', ' '));
SELECT UNNEST(STR_SPLIT('🦆🐈🐈🦆🐈🐈🦆🐈🐈🦆🐈🐈🦆', '🐈🐈'));
SELECT UNNEST(STR_SPLIT('', 'delim'));
SELECT UNNEST(STR_SPLIT('aaaaa', ''));
SELECT UNNEST(STR_SPLIT('🦆🦆🦆🦆🦆', ''));
SELECT UNNEST(STR_SPLIT('abab', 'b'));
SELECT UNNEST(STR_SPLIT('🦆b🦆b', 'b'));
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('baabbaa'), ('aabbaab'), ('ababababa'), ('b🦆🦆bb🦆🦆'), ('🦆🦆bb🦆🦆b'), ('🦆b🦆b🦆b🦆b🦆');
SELECT UNNEST(STR_SPLIT(x, 'bb')) FROM x WHERE 1;
SELECT UNNEST(STR_SPLIT(x, 'bb')) FROM x WHERE x LIKE 'b%';
SELECT GROUP_CONCAT(x, 'bb') FROM (SELECT x AS x, UNNEST(STR_SPLIT(x, 'bb')) AS x FROM x) AS x GROUP BY x ORDER BY x;
SELECT UNNEST(STR_SPLIT_REGEX('a1a11a111a', '[0-9]+'));
SELECT UNNEST(STR_SPLIT_REGEX('aaaaa', ''));
SELECT UNNEST(STR_SPLIT_REGEX('a a  a   a', '\s+'));
SELECT UNNEST(STR_SPLIT('aaaaa', NULL));
SELECT UNNEST(STR_SPLIT('1|2|3', '|'));
SELECT UNNEST(STR_SPLIT('1|2|3|', '|'));
SELECT UNNEST(STR_SPLIT('1||2|3||', '||'));
SELECT UNNEST(STR_SPLIT('1|2|3', ''));
SELECT UNNEST(STR_SPLIT('', '|'));
SELECT UNNEST(STR_SPLIT('1|2|3', NULL));
SELECT STR_SPLIT(NULL, '|') IS NULL;
SELECT UNNEST(STR_SPLIT('abc', ''));
SELECT UNNEST(STR_SPLIT_REGEX('abc', '(|abc)'));
SELECT UNNEST(STR_SPLIT_REGEX('abc', '(abc|)'));
SELECT UNNEST(STR_SPLIT('abc', ','));
SELECT UNNEST(STR_SPLIT_REGEX('abc', '(,|abc)'));
SELECT UNNEST(STR_SPLIT_REGEX('abc', '(abc|,)'));
SELECT UNNEST(STR_SPLIT('1,2,3,4,,6', ','));
SELECT UNNEST(STR_SPLIT_REGEX('1,2,3,4,,6', '(,|)'));
SELECT UNNEST(STR_SPLIT_REGEX('1,2,3,4,,6', '(|,)'));
SELECT UNNEST(STR_SPLIT_REGEX('1,2,3,4,*,6', '(,|\*)'));
SELECT UNNEST(STR_SPLIT_REGEX('1,2,3,4,*,6', '(\*|,)'));
SELECT UNNEST(STR_SPLIT_REGEX('1,2,3,4,*,6', '(\*|,)'));
SELECT UNNEST(STR_SPLIT_REGEX('1,2,3,4,*,6', '(\*|,)'));
SELECT STR_SPLIT_REGEX(x, '[') FROM x ORDER BY x;
SELECT UNNEST(STR_SPLIT(GROUP_CONCAT(x, 'DUCK '), ' ')) AS x, x % 100 AS x FROM x GROUP BY x ORDER BY x;
SELECT UNNEST(STR_SPLIT(GROUP_CONCAT(x, '🦆 '), ' ')) AS x, x % 100 AS x FROM x GROUP BY x ORDER BY x;
SELECT UNNEST(STR_SPLIT_REGEX(GROUP_CONCAT(x, 'DUCK '), '\s')) AS x, x % 100 AS x FROM x GROUP BY x ORDER BY x;
PRAGMA x;
CREATE TABLE x (x TEXT, x INT);
INSERT INTO x VALUES ('hello', 1), ('world', 2), ('b', 1), (NULL, 2);
SELECT '🦆ab'[1], 'abc'[2];
SELECT x[2] FROM x;
SELECT x[3] FROM x;
SELECT x[x] FROM x;
SELECT x[2] FROM x;
SELECT 'hello'[x] FROM x;
SELECT CAST(NULL AS TEXT[x]) FROM x;
SELECT 'hello'[NULL] FROM x;
SELECT CAST(NULL AS TEXT[NULL]) FROM x;
SELECT CAST(NULL AS TEXT[x]) FROM x;
SELECT CAST(NULL AS TEXT[NULL]) FROM x;
SELECT x[-1] FROM x;
SELECT x[1] FROM x;
SELECT x[6] FROM x;
SELECT x[2147483646] FROM x;
SELECT x[-2147483647] FROM x;
SELECT ([1, 2, 3])[-2147483647];
PRAGMA x;
CREATE TABLE x (x TEXT, x INT, x INT);
CREATE TABLE x (x TEXT, x INT, x INT);
CREATE TABLE x (x TEXT, x INT, x INT);
SELECT SUBSTRING(x, 1, 2) FROM x;
SELECT SUBSTRING(x, 2, 2) FROM x;
SELECT SUBSTRING(x, x, x) FROM x;
SELECT SUBSTRING(x, x, 2) FROM x;
SELECT SUBSTRING(x, 1, x) FROM x;
SELECT SUBSTRING('hello', x, x) FROM x;
SELECT SUBSTRING(NULL, x, x) FROM x;
SELECT SUBSTRING('hello', NULL, x) FROM x;
SELECT SUBSTRING('hello', x, NULL) FROM x;
SELECT SUBSTRING(NULL, NULL, x) FROM x;
SELECT SUBSTRING('hello', NULL, NULL) FROM x;
SELECT SUBSTRING(NULL, x, NULL) FROM x;
SELECT SUBSTRING(NULL, NULL, NULL) FROM x;
SELECT SUBSTRING(x, -2, 2) FROM x;
SELECT SUBSTRING(x, 0, x) FROM x;
SELECT SUBSTRING(x, 0, x) FROM x;
SELECT SUBSTRING(x, 0, x) FROM x;
SELECT SUBSTRING(x, 0, x) FROM x;
SELECT SUBSTRING(x, 0, x) FROM x;
SELECT SUBSTRING(x, 0, x) FROM x;
SELECT SUBSTRING(x, 0, x) FROM x;
SELECT SUBSTRING(x, 0, x) FROM x;
SELECT SUBSTRING(x, 0, x) FROM x;
SELECT SUBSTRING(x, 0, x) FROM x;
SELECT SUBSTRING(x, 0, x) FROM x;
SELECT SUBSTRING(x, 0, x) FROM x;
SELECT SUBSTRING(x, 0, x) FROM x;
SELECT SUBSTRING(x, 0, x) FROM x;
SELECT SUBSTRING(x, 0, x) FROM x;
SELECT SUBSTRING(x, 0, x) FROM x;
SELECT SUBSTRING(x, 0, x) FROM x;
SELECT SUBSTRING(x, 0, x) FROM x;
SELECT SUBSTRING(x, 0, x) FROM x;
SELECT SUBSTRING(x, 0, x) FROM x;
SELECT SUBSTRING(x, 0, x) FROM x;
SELECT SUBSTRING(x, 0, x) FROM x;
SELECT SUBSTRING(x, 0, x) FROM x;
SELECT SUBSTRING(x, 0, x) FROM x;
PRAGMA x;
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('twoñthree₡four🦆end');
SELECT SUBSTRING(x, 1, 7) FROM x;
SELECT SUBSTRING(x, 10, 7) FROM x;
SELECT SUBSTRING(x, 15, 7) FROM x;
SELECT SUBSTRING(x, 15, 7) FROM x;
SELECT SUBSTRING(x, 15, 7) FROM x;
SELECT SUBSTRING(x, 15, 7) FROM x;
SELECT SUBSTRING(x, 15, 7) FROM x;
SELECT SUBSTRING(x, 15, 7) FROM x;
SELECT SUBSTRING(x, 15, 7) FROM x;
PRAGMA x;
SELECT SUFFIX('abcd', 'd');
SELECT SUFFIX('abcd', 'cd');
SELECT SUFFIX('abcd', 'bcd');
SELECT SUFFIX('abcd', 'abcd');
SELECT SUFFIX('abcd', 'X');
SELECT SUFFIX('abcdefgh', 'h');
SELECT SUFFIX('abcdefgh', 'gh');
SELECT SUFFIX('abcdefgh', 'fgh');
SELECT SUFFIX('abcdefgh', 'efgh');
SELECT SUFFIX('abcdefgh', 'defgh');
SELECT SUFFIX('abcdefgh', 'X');
SELECT SUFFIX('abcdefgh', 'abcdefgh');
SELECT SUFFIX('abcdefghijklmnopqrstuvwxyz', 'z');
SELECT SUFFIX('abcdefghijklmnopqrstuvwxyz', 'yz');
SELECT SUFFIX('abcdefghijklmnopqrstuvwxyz', 'xyz');
SELECT SUFFIX('abcdefghijklmnopqrstuvwxyz', 'wxyz');
SELECT SUFFIX('abcdefghijklmnopqrstuvwxyz', 'vwxyz');
SELECT SUFFIX('abcdefghijklmnopqrstuvwxyz', 'X');
SELECT SUFFIX('abcdefghijklmnopqrstuvwxyz', 'defghijklmnopqrstuvwxyz');
SELECT SUFFIX('', 'aaa');
SELECT SUFFIX('aaa', '');
SELECT SUFFIX(NULL, 'aaa');
SELECT SUFFIX('aaa', NULL);
SELECT SUFFIX(NULL, NULL);
SELECT SUFFIX('omotá', 'á');
SELECT SUFFIX('omotá', 'á');
SELECT SUFFIX('omotá', 'a');
SELECT SUFFIX('mundo olá', 'olá');
SELECT SUFFIX('mundo olá', 'olá');
SELECT SUFFIX('mundo olá', 'mundo olá');
SELECT SUFFIX('mundo olá', 'ola');
SELECT SUFFIX('eftñ', 'ñ');
SELECT SUFFIX('ñeft', 'ñeft');
SELECT SUFFIX('ñeft', 'neft');
SELECT SUFFIX('two ñ three ₡ four 🦆 end', '🦆 end');
SELECT SUFFIX('two ñ three ₡ four 🦆 end', '🦆 end');
SELECT SUFFIX('two ñ three ₡ four 🦆 end', 'three ₡ four 🦆 end');
SELECT SUFFIX('two ñ three ₡ four 🦆 end', 'three ₡ four 🦆 end');
SELECT SUFFIX('two ñ three ₡ four 🦆 end', 'two ñ three ₡ four 🦆 end');
SELECT SUFFIX('two ñ three ₡ four 🦆 end', 'two ñ three ₡ four 🦆 end');
SELECT SUFFIX('two ñ three ₡ four 🦆 end', 'two ñ three ₡ four 🦆 end');
SELECT SUFFIX('two ñ three ₡ four 🦆 end', 'two n three ₡ four 🦆 end');
SELECT SUFFIX('two ñ three ₡ four 🦆 end', 'XXXtwo ñ three ₡ four 🦆 end');
PRAGMA x;
SELECT TO_BASE(-10, 2);
SELECT TO_BASE(-10, 2);
SELECT TO_BASE(10, 1);
SELECT TO_BASE(10, 37);
SELECT TO_BASE(10, 0, 10);
SELECT TO_BASE(10, 37, 10);
SELECT TO_BASE(10, 2, -10);
SELECT TO_BASE(10, 2);
SELECT TO_BASE(10, 2, 64);
SELECT TO_BASE(10, 3);
SELECT TO_BASE(10, 16);
SELECT TO_BASE(10, 36);
SELECT TO_BASE(42, 36);
SELECT TO_BASE(x, 2), TO_BASE(x, 2, 8), TO_BASE(x, 16), TO_BASE(x, 16, 2), TO_BASE(x, 36), TO_BASE(x, 36, 2) FROM x ORDER BY x;
CREATE TABLE x AS SELECT * FROM (VALUES (0), (1), (1), (2), (3), (5), (8), (13), (21), (34), (55), (89), (144), (233), (377), (610), (987), (1597), (2584), (4181), (6765), (10946), (17711), (28657), (46368));
SELECT TO_BASE(x, 2) FROM x ORDER BY x;
SELECT TO_BASE(x, 16) FROM x ORDER BY x;
SELECT TO_BASE(x, 36) FROM x ORDER BY x;
PRAGMA x;
SELECT TRANSLATE('This is the main test string', NULL, 'ALT');
SELECT TRANSLATE(NULL, 'main', 'ALT');
SELECT TRANSLATE('This is the main test string', 'main', NULL);
SELECT TRANSLATE('12', '2', 'a');
SELECT TRANSLATE('abcde', 'abcde', 'fghij');
SELECT TRANSLATE('abcde', 'aabcc', '14235');
SELECT TRANSLATE('https://dxyzdb.org', 'zyx.orghttps:/', 'kcu');
SELECT TRANSLATE('12345', '14367', 'ax');
SELECT TRANSLATE('hacco worcdxxx', 'acx2', 'el');
SELECT TRANSLATE('hacCo worcd', 'acC', 'ellaabb');
SELECT TRANSLATE('RÄcks', 'Ä', 'A');
SELECT TRANSLATE('🦆', '🦆', 'D');
SELECT TRANSLATE('MotörHeadΩ', 'aeΩ', 'eÄ');
SELECT TRANSLATE('This is 🐱.', '🐱', '🦆');
SELECT TRANSLATE('Äañt₡Xá你好世界我', 'ñá世界我xyz', 'naDBá');
CREATE TABLE x (x TEXT, x TEXT);
INSERT INTO x VALUES ('Hello', 'World'), ('HuLlD', NULL), ('MotörHead', 'RÄcks'), ('', NULL), ('Hi', '🦆');
SELECT TRANSLATE(x, 'öHl', 'oA-') FROM x;
SELECT TRANSLATE(x, 'loD', '🦆') FROM x;
SELECT TRANSLATE(x, 'ÄW🦆l', 'ow🐱') FROM x;
SELECT TRANSLATE(x, 'oel', 'OEL') FROM x WHERE NOT x IS NULL;
SELECT TRANSLATE(1);
SELECT TRANSLATE(1, 2);
SELECT TRANSLATE(1, 2, 3, 4);
PRAGMA x;
SELECT LTRIM(''), LTRIM('Neither'), LTRIM(' Leading'), LTRIM('Trailing   '), LTRIM(' Both '), LTRIM(NULL), LTRIM('     ');
SELECT RTRIM(''), RTRIM('Neither'), RTRIM(' Leading'), RTRIM('Trailing   '), RTRIM(' Both '), RTRIM(NULL), RTRIM('    ');
SELECT TRIM(''), TRIM('Neither'), TRIM(' Leading'), TRIM('Trailing   '), TRIM(' Both '), TRIM(NULL), TRIM('     ');
CREATE TABLE x (x TEXT, x TEXT);
INSERT INTO x VALUES ('', 'Neither'), (' Leading', NULL), (' Both ', 'Trailing   '), ('', NULL);
SELECT LTRIM(x) FROM x;
SELECT LTRIM(x) FROM x;
SELECT LTRIM(x) FROM x WHERE NOT x IS NULL;
SELECT RTRIM(x) FROM x;
SELECT RTRIM(x) FROM x;
SELECT RTRIM(x) FROM x WHERE NOT x IS NULL;
SELECT LTRIM('', 'ho'), LTRIM('hello', 'ho'), LTRIM('papapapa', 'pa'), LTRIM('blaHblabla', 'bla'), LTRIM('blabla', NULL), LTRIM(NULL, 'blabla'), LTRIM('blabla', '');
SELECT RTRIM('', 'ho'), RTRIM('hello', 'ho'), RTRIM('papapapa', 'pa'), RTRIM('blaHblabla', 'bla'), RTRIM('blabla', NULL), RTRIM(NULL, 'blabla'), RTRIM('blabla', '');
SELECT TRIM('', 'ho'), TRIM('hello', 'ho'), TRIM('papapapa', 'pa'), TRIM('blaHblabla', 'bla'), TRIM('blabla', NULL), TRIM(NULL, 'blabla'), TRIM('blabla', '');
CREATE TABLE x (x TEXT, x TEXT);
INSERT INTO x VALUES ('hello', 'ho'), ('test', 't'), ('mühleisen', 'mün'), (NULL, ' '), ('', NULL), ('', ''), (NULL, NULL);
SELECT LTRIM(x, x), RTRIM(x, x), TRIM(x, x) FROM x;
SELECT LTRIM(x, x), RTRIM(x, x), TRIM(x, x) FROM x;
SELECT LTRIM('hello', 'world');
SELECT LTRIM('hello', 'world');
SELECT RTRIM('hello', 'world');
SELECT RTRIM('hello', 'world');
SELECT RTRIM('hello', 'world');
PRAGMA x;
SELECT UNICODE(NULL), UNICODE(''), UNICODE('$'), UNICODE('¢'), UNICODE('€'), UNICODE('𐍈');
CREATE TABLE x (x TEXT, x TEXT);
INSERT INTO x VALUES ('', 'Zero'), ('$', NULL), ('¢', 'Two'), ('€', NULL), ('𐍈', 'Four');
SELECT UNICODE(x) FROM x;
SELECT UNICODE(x) FROM x;
SELECT UNICODE(x) FROM x WHERE NOT x IS NULL;
SELECT UNICODE(x) FROM x WHERE NOT x IS NULL;
SELECT UNICODE(x) FROM x WHERE NOT x IS NULL;
PRAGMA x;
SELECT URL_ENCODE(''), URL_DECODE('');
SELECT URL_ENCODE(NULL), URL_DECODE(NULL);
SELECT URL_DECODE(URL_ENCODE('http://www.google.com/this is a long url'));
SELECT COUNT(*) FROM x AS x WHERE URL_DECODE(URL_ENCODE(CHR(CAST(x AS INT)))) = CHR(CAST(x AS INT));
SELECT URL_DECODE('%'), URL_DECODE('%5'), URL_DECODE('%X'), URL_DECODE('%%');
SELECT URL_DECODE('%FF%FF%FF');
PRAGMA x;
SELECT EPOCH(CAST('14:21:13' AS TIME));
SELECT EXTRACT(EPOCH FROM CAST('14:21:13' AS TIME));
SELECT EXTRACT(SECONDS FROM CAST('14:21:13' AS TIME));
PRAGMA x;
CREATE TABLE x (x TIME, x TEXT);
INSERT INTO x VALUES ('00:01:20', 'hour'), ('20:08:10.998', 'minute'), ('20:08:10.33', 'second'), ('20:08:10.001', 'millisecond');
SELECT DATE_PART(CAST(NULL AS TEXT), CAST(NULL AS TIME)) FROM x;
SELECT DATE_PART(x, CAST(NULL AS TIME)) FROM x;
SELECT DATE_PART(NULL, x) FROM x;
SELECT DATE_PART(x, CAST('14:28:50.447' AS TIME)) FROM x;
SELECT DATE_PART('hour', x) FROM x;
SELECT DATE_PART(x, x) FROM x;
SELECT DATE_PART('${datepart}', CAST('10:00:00' AS TIME));
SELECT ERA(x) FROM x;
SELECT YEAR(x) FROM x;
SELECT MONTH(x) FROM x;
SELECT DAY(x) FROM x;
SELECT DECADE(x) FROM x;
SELECT CENTURY(x) FROM x;
SELECT MILLENNIUM(x) FROM x;
SELECT QUARTER(x) FROM x;
SELECT DAYOFWEEK(x) FROM x;
SELECT ISODOW(x) FROM x;
SELECT DAYOFYEAR(x) FROM x;
SELECT WEEK(x) FROM x;
SELECT YEARWEEK(x) FROM x;
SELECT EXTRACT(DOW FROM CAST('10:00:00' AS TIME));
SELECT EXTRACT(DOY FROM CAST('10:00:00' AS TIME));
SELECT EXTRACT(YEARWEEK FROM CAST('10:00:00' AS TIME));
SELECT EXTRACT(CENTURY FROM CAST('10:00:00' AS TIME));
SELECT ERA(x) FROM x;
SELECT EXTRACT(ERA FROM CAST('10:00:00' AS TIME));
SELECT DATE_PART('era', CAST('10:00:00' AS TIME));
SELECT EXTRACT(JULIAN FROM CAST('10:00:00' AS TIME));
SELECT DATE_PART('julian', CAST('10:00:00' AS TIME));
SELECT DATE_PART('julian', CAST('10:00:00' AS TIME));
SELECT x, DATE_PART('${partcode}', x) AS x, DATE_PART(['${partcode}'], x) AS x FROM x WHERE x <> x['${partcode}'];
SELECT x, DATE_PART(['hour', 'minute', 'microsecond'], x) AS x FROM x ORDER BY 1;
SELECT x, DATE_PART(['epoch', 'second', 'timezone', 'timezone_hour', 'timezone_minute'], x) AS x FROM x ORDER BY 1;
SELECT x, EPOCH_NS(x) FROM x ORDER BY ALL;
SELECT x, EPOCH_US(x) FROM x ORDER BY ALL;
SELECT x, EPOCH_MS(x) FROM x ORDER BY ALL;
SELECT x, NANOSECOND(x) FROM x ORDER BY ALL;
SELECT x, DATE_PART(['${datepart}'], x) AS x FROM x ORDER BY 1;
PRAGMA x;
CREATE TABLE x (x TIME);
INSERT INTO x VALUES ('00:01:20'), ('20:08:10.998'), ('20:08:10.33'), ('20:08:10.001'), (NULL);
SELECT EXTRACT(SECOND FROM x) FROM x;
SELECT EXTRACT(MINUTE FROM x) FROM x;
SELECT EXTRACT(HOUR FROM x) FROM x;
SELECT EXTRACT(MILLISECONDS FROM x) FROM x;
SELECT EXTRACT(MICROSECONDS FROM x) FROM x;
SELECT EXTRACT(EPOCH FROM x) FROM x;
SELECT EXTRACT(YEAR FROM x) FROM x;
SELECT EXTRACT(MONTH FROM x) FROM x;
SELECT EXTRACT(DAY FROM x) FROM x;
SELECT EXTRACT(DECADE FROM x) FROM x;
SELECT EXTRACT(CENTURY FROM x) FROM x;
SELECT EXTRACT(MILLENNIUM FROM x) FROM x;
SELECT EXTRACT(QUARTER FROM x) FROM x;
SELECT EXTRACT(DAYOFWEEK FROM x) FROM x;
SELECT EXTRACT(ISODOW FROM x) FROM x;
SELECT EXTRACT(DAYOFYEAR FROM x) FROM x;
SELECT EXTRACT(WEEK FROM x) FROM x;
SELECT EXTRACT(YEARWEEK FROM x) FROM x;
PRAGMA x;
CREATE TABLE x (x TIME);
INSERT INTO x VALUES ('00:01:20'), ('20:08:10.998'), ('20:08:10.33'), ('20:08:10.001'), (NULL);
PRAGMA x;
SELECT STATS(EXTRACT(SECOND FROM x)) FROM x LIMIT 1;
SELECT STATS(EXTRACT(MINUTE FROM x)) FROM x LIMIT 1;
SELECT STATS(EXTRACT(HOUR FROM x)) FROM x LIMIT 1;
SELECT STATS(EXTRACT(MILLISECONDS FROM x)) FROM x LIMIT 1;
SELECT STATS(EXTRACT(MICROSECONDS FROM x)) FROM x LIMIT 1;
SELECT STATS(EXTRACT(EPOCH FROM x)) FROM x LIMIT 1;
SELECT AGE(CAST('1957-06-13' AS TIMESTAMP)) AS x;
SELECT AGE(CAST('2001-04-10' AS TIMESTAMP), CAST('1957-06-13' AS TIMESTAMP));
SELECT AGE(CAST('2014-04-25' AS TIMESTAMP), CAST('2014-04-17' AS TIMESTAMP));
SELECT AGE(CAST('2014-04-25' AS TIMESTAMP), CAST('2014-01-01' AS TIMESTAMP));
SELECT AGE(CAST('2019-06-11' AS TIMESTAMP), CAST('2019-06-11' AS TIMESTAMP));
SELECT CAST(AGE(CAST('2019-06-11' AS TIMESTAMP), CAST('2019-06-11' AS TIMESTAMP)) AS TEXT);
SELECT AGE(CAST('2019-06-11 12:00:00' AS TIMESTAMP), CAST('2019-07-11 11:00:00' AS TIMESTAMP));
CREATE TABLE x (x TIMESTAMP, x TIMESTAMP);
INSERT INTO x VALUES ('2001-04-10', '1957-06-13');
INSERT INTO x VALUES ('2014-04-25', '2014-04-17');
INSERT INTO x VALUES ('2014-04-25', '2014-01-01');
INSERT INTO x VALUES ('2019-06-11', '2019-06-11');
INSERT INTO x VALUES (NULL, '2019-06-11');
INSERT INTO x VALUES ('2019-06-11', NULL);
INSERT INTO x VALUES (NULL, NULL);
SELECT AGE(x, CAST('1957-06-13' AS TIMESTAMP)) FROM x;
SELECT AGE(CAST('2001-04-10' AS TIMESTAMP), x) FROM x;
SELECT AGE(x, x) FROM x;
SELECT x - x FROM x;
SELECT AGE(x, x) FROM x WHERE x > '2001-12-12';
SELECT AGE(NULL, NULL);
SELECT AGE(CAST('1957-06-13' AS TIMESTAMP), NULL);
SELECT AGE(NULL, CAST('1957-06-13' AS TIMESTAMP));
SELECT INTERVAL '1' DAY < AGE(CAST('1900-06-13' AS DATE));
SELECT AGE(CAST('1900-01-01' AS DATE), CAST('1950-01-01' AS DATE));
SELECT AGE(CAST('1992-01-01 01:01:02.400' AS TIMESTAMP), CAST('1992-01-01 01:01:02.200' AS TIMESTAMP));
SELECT AGE(CAST('1992-01-01 01:01:02.200' AS TIMESTAMP), CAST('1992-01-01 01:01:02.400' AS TIMESTAMP));
SELECT AGE(CAST('1992-01-01 01:01:01.400' AS TIMESTAMP), CAST('1992-01-01 01:01:02.200' AS TIMESTAMP));
SELECT AGE(CAST('${lspecial}' AS TIMESTAMP));
SELECT AGE(CAST('${lspecial}' AS TIMESTAMP), CAST('${rspecial}' AS TIMESTAMP));
SELECT AGE(CAST('${rspecial}' AS TIMESTAMP), CAST('${lspecial}' AS TIMESTAMP));
SET x = 'gregorian';
SELECT CAST(CURRENT_TIME AS TEXT), CAST(CURRENT_DATE AS TEXT), CAST(CURRENT_TIMESTAMP AS TEXT), CAST(NOW() AS TEXT);
SELECT TYPEOF(CURRENT_TIME);
SELECT TYPEOF(CURRENT_DATE);
SELECT TYPEOF(CURRENT_TIMESTAMP);
SELECT TYPEOF(GET_CURRENT_TIME());
SELECT TYPEOF(GET_CURRENT_TIME());
SELECT TYPEOF(GET_CURRENT_TIME());
SELECT CURRENT_TIME AS x;
SELECT CURRENT_TIME + INTERVAL (1) SECOND AS x;
SET x = 'Pacific/Honolulu';
SELECT CURRENT_TIMESTAMP;
SELECT CURRENT_TIME;
SET x = 'gregorian';
SET x = 'America/Chihuahua';
PRAGMA x;
SELECT EXTRACT(MILLENNIUM FROM NOW());
SELECT SUFFIX(CAST(CURRENT_TIMESTAMP AS TEXT), '-06');
SELECT SUFFIX(CAST(CURRENT_TIMESTAMP AS TEXT), '-06');
PRAGMA x;
PRAGMA x;
SELECT DATE_DIFF('${DATEPART}', x, x) FROM x;
SELECT DATE_DIFF('${DATEPART}', x, x) FROM x;
SELECT DATE_DIFF('HOUR', x, x) FROM x;
SELECT DATE_DIFF('MINUTE', x, x) FROM x;
SELECT DATE_DIFF('SECOND', x, x) FROM x;
SELECT DATE_DIFF('MILLISECOND', x, x) FROM x;
SELECT DATE_DIFF('MICROSECOND', x, x) FROM x;
SELECT DATE_DIFF('ISOYEAR', x, x) FROM x;
SELECT DATE_DIFF('${DATEPART}', x, x) + DATE_DIFF('${DATEPART}', x, x) FROM x;
SELECT DATE_DIFF('${DATEPART}', x, x) + DATE_DIFF('${DATEPART}', x, x) FROM x;
SELECT DATE_DIFF('MICROSECONDS', CAST('4151706-4-6' AS DATE), CAST('-5559461-6-26' AS DATE));
SELECT DATE_DIFF('ISODOW', CAST('4765396-11-24' AS DATE), CAST('-4389735-12-13' AS DATE));
SELECT DATE_DIFF('ISODOW', CAST('4765396-11-24' AS DATE), CAST('-4389735-12-13' AS DATE));
SELECT DATE_DIFF('${DATEPART}', x, x) FROM x;
SELECT DATE_DIFF('${DATEPART}', x, x) FROM x;
SELECT DATE_DIFF('${DATEPART}', x, x) + DATE_DIFF('${DATEPART}', x, x) FROM x;
SELECT DATE_DIFF('${DATEPART}', x, x) + DATE_DIFF('${DATEPART}', x, x) FROM x;
SELECT DATE_DIFF('${DATEPART}', x, x) + DATE_DIFF('${DATEPART}', x, x) FROM x;
SELECT DATE_DIFF('${DATEPART}', x, x) FROM x;
SELECT DATE_DIFF('HOUR', x, x) FROM x;
SELECT DATE_DIFF('MINUTE', x, x) FROM x;
SELECT DATE_DIFF('SECOND', x, x) FROM x;
SELECT DATE_DIFF('MILLISECOND', x, x) FROM x;
SELECT DATE_DIFF('MICROSECOND', x, x) FROM x;
SELECT DATE_DIFF('WEEK', CAST('2023-01-22' AS DATE), CAST('2024-09-13' AS DATE)) AS "x";
SELECT DATE_DIFF('WEEK', CAST('2023-01-22 05:30:00' AS TIMESTAMP), CAST('2024-09-13 05:30:00' AS TIMESTAMP)) AS "x";
SELECT DATE_DIFF('${DATEPART}', x, x) + DATE_DIFF('${DATEPART}', x, x) FROM x;
SELECT DATE_DIFF('${DATEPART}', x, x) + DATE_DIFF('${DATEPART}', x, x) FROM x;
SELECT DATE_DIFF('${DATEPART}', x, x) + DATE_DIFF('${DATEPART}', x, x) FROM x;
SELECT DATE_DIFF('${DATEPART}', x, x) + DATE_DIFF('${DATEPART}', x, x) FROM x;
SELECT DATE_DIFF('${DATEPART}', x, x) + DATE_DIFF('${DATEPART}', x, x) FROM x;
SELECT DATE_DIFF('${DATEPART}', x, x) + DATE_DIFF('${DATEPART}', x, x) FROM x;
SELECT DATE_DIFF('${DATEPART}', x, NULL) FROM (SELECT CAST('2021-07-30' AS TIMESTAMP) + INTERVAL (x) DAY AS x FROM x AS x) AS x;
SELECT DATE_DIFF('${DATEPART}', NULL, x) FROM (SELECT CAST('2021-07-30' AS TIMESTAMP) + INTERVAL (x) DAY AS x FROM x AS x) AS x;
SELECT DATE_DIFF('${DATEPART}', CAST(NULL AS TIMESTAMP), NULL) FROM (SELECT CAST('2021-07-30' AS TIMESTAMP) + INTERVAL (x) DAY AS x FROM x AS x) AS x;
SELECT DATE_DIFF('NULL', x, x + INTERVAL '1' HOUR) FROM (SELECT CAST('2021-07-30' AS TIMESTAMP) + INTERVAL (x) DAY AS x FROM x AS x) AS x;
SELECT DATE_DIFF('NULL', x, x + INTERVAL '1' HOUR) FROM (SELECT CAST('2021-07-30' AS TIMESTAMP) + INTERVAL (x) DAY AS x FROM x AS x) AS x;
SELECT DATE_DIFF('MICROSECONDS', CAST('276858-10-21 9:36:33' AS TIMESTAMP), CAST('-222154-6-30 5:19:49' AS TIMESTAMP));
CREATE TABLE x (x TEXT);
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('${datepart}');
SELECT x, DATE_DIFF('DATEPART', CAST('2005-12-31 23:59:59.9999999' AS TIMESTAMP), CAST('2006-01-01 00:00:00.0000000' AS TIMESTAMP)) FROM x;
INSERT INTO x VALUES ('duck');
SELECT x, DATE_DIFF('DATEPART', CAST('2005-12-31 23:59:59.9999999' AS TIMESTAMP), CAST('2006-01-01 00:00:00.0000000' AS TIMESTAMP)) FROM x;
PRAGMA x;
CREATE TABLE x AS SELECT CAST('2004-01-31' AS DATE) AS x, CAST('2004-02-29' AS DATE) AS x;
SELECT DATESUB('month', CAST('2004-01-31' AS DATE), CAST('2004-02-29' AS DATE));
SELECT DATESUB('month', CAST('2004-01-29' AS DATE), CAST('2004-02-29' AS DATE));
SELECT DATESUB('quarter', CAST('2004-01-31' AS DATE), CAST('2004-04-30' AS DATE));
SELECT DATESUB('year', CAST('2004-02-29' AS DATE), CAST('2005-02-28' AS DATE));
SELECT DATESUB('isoyear', CAST('2004-02-29' AS DATE), CAST('2005-02-28' AS DATE));
SELECT DATESUB('decade', CAST('1994-02-28' AS DATE), CAST('2004-02-29' AS DATE));
SELECT DATESUB('century', CAST('1904-02-29' AS DATE), CAST('2005-02-28' AS DATE));
SELECT DATESUB('millennium', CAST('1004-02-29' AS DATE), CAST('2004-02-29' AS DATE));
SELECT DATESUB('${datepart}', CAST('2004-01-31' AS DATE), CAST('2004-02-29' AS DATE));
SELECT DATESUB('${datepart}', CAST('2004-01-31' AS DATE), CAST('2004-02-29' AS DATE));
SELECT DATESUB('hour', CAST('2004-01-31' AS DATE), CAST('2004-02-01' AS DATE));
SELECT DATESUB('minute', CAST('2004-02-29' AS DATE), CAST('2004-03-01' AS DATE));
SELECT DATESUB('second', CAST('2004-02-29' AS DATE), CAST('2004-03-01' AS DATE));
SELECT DATESUB('millisecond', CAST('2004-02-29' AS DATE), CAST('2004-03-01' AS DATE));
SELECT DATESUB('microsecond', CAST('2004-02-29' AS DATE), CAST('2004-03-01' AS DATE));
SELECT DATESUB('${datepart}', x, x) + DATESUB('${datepart}', x, x) FROM x;
SELECT DATESUB('${datepart}', x, x) + DATESUB('${datepart}', x, x) FROM x;
CREATE TABLE x AS SELECT CAST('2004-01-31 12:00:00' AS TIMESTAMP) AS x, CAST('2004-02-29 13:05:00' AS TIMESTAMP) AS x;
SELECT DATESUB('month', CAST('2004-01-31 12:00:00' AS TIMESTAMP), CAST('2004-02-29 13:00:00' AS TIMESTAMP));
SELECT DATESUB('month', CAST('2004-01-29 12:00:00' AS TIMESTAMP), CAST('2004-02-29 13:00:00' AS TIMESTAMP));
SELECT DATESUB('month', CAST('2004-02-29 12:00:00' AS TIMESTAMP), CAST('2004-03-31 13:00:00' AS TIMESTAMP));
SELECT DATESUB('month', CAST('2004-02-29 13:00:00' AS TIMESTAMP), CAST('2004-03-31 12:00:00' AS TIMESTAMP));
SELECT DATESUB('quarter', CAST('2004-01-31 12:00:00' AS TIMESTAMP), CAST('2004-04-30 13:00:00' AS TIMESTAMP));
SELECT DATESUB('year', CAST('2004-02-29 12:00:00' AS TIMESTAMP), CAST('2005-02-28 13:00:00' AS TIMESTAMP));
SELECT DATESUB('isoyear', CAST('2004-02-29 12:00:00' AS TIMESTAMP), CAST('2005-02-28 13:00:00' AS TIMESTAMP));
SELECT DATESUB('decade', CAST('1994-02-28 12:00:00' AS TIMESTAMP), CAST('2004-02-29 13:00:00' AS TIMESTAMP));
SELECT DATESUB('century', CAST('1904-02-29 12:00:00' AS TIMESTAMP), CAST('2005-02-28 13:00:00' AS TIMESTAMP));
SELECT DATESUB('month', CAST('2004-01-31 13:00:00' AS TIMESTAMP), CAST('2004-02-29 12:00:00' AS TIMESTAMP));
SELECT DATESUB('month', CAST('2004-01-29 13:00:00' AS TIMESTAMP), CAST('2004-02-29 12:00:00' AS TIMESTAMP));
SELECT DATESUB('quarter', CAST('2004-01-31 13:00:00' AS TIMESTAMP), CAST('2004-04-30 12:00:00' AS TIMESTAMP));
SELECT DATESUB('year', CAST('2004-02-29 13:00:00' AS TIMESTAMP), CAST('2005-02-28 12:00:00' AS TIMESTAMP));
SELECT DATESUB('isoyear', CAST('2004-02-29 13:00:00' AS TIMESTAMP), CAST('2005-02-28 12:00:00' AS TIMESTAMP));
SELECT DATESUB('decade', CAST('1992-02-29 13:00:00' AS TIMESTAMP), CAST('2002-02-28 12:00:00' AS TIMESTAMP));
SELECT DATESUB('century', CAST('1904-02-29 13:00:00' AS TIMESTAMP), CAST('2004-02-28 12:00:00' AS TIMESTAMP));
SELECT DATESUB('millennium', CAST('1004-02-29 12:00:00' AS TIMESTAMP), CAST('2004-02-28 13:00:00' AS TIMESTAMP));
SELECT DATESUB('${datepart}', CAST('2004-01-31 12:00:00' AS TIMESTAMP), CAST('2004-02-29 13:00:00' AS TIMESTAMP));
SELECT DATESUB('${datepart}', CAST('2004-01-31 13:00:00' AS TIMESTAMP), CAST('2004-02-29 12:00:00' AS TIMESTAMP));
SELECT DATESUB('${datepart}', CAST('2004-01-31 12:00:00' AS TIMESTAMP), CAST('2004-02-28 13:00:00' AS TIMESTAMP));
SELECT DATESUB('${datepart}', CAST('2004-01-31 13:00:00' AS TIMESTAMP), CAST('2004-02-28 12:00:00' AS TIMESTAMP));
SELECT DATESUB('hour', CAST('2004-01-31 12:00:00' AS TIMESTAMP), CAST('2004-02-01 13:05:00' AS TIMESTAMP));
SELECT DATESUB('hour', CAST('2004-01-31 12:00:00' AS TIMESTAMP), CAST('2004-02-01 12:00:00' AS TIMESTAMP));
SELECT DATESUB('hour', CAST('2004-01-31 13:00:00' AS TIMESTAMP), CAST('2004-02-01 12:05:00' AS TIMESTAMP));
SELECT DATESUB('minute', CAST('2004-01-31 12:00:00' AS TIMESTAMP), CAST('2004-02-01 13:05:00' AS TIMESTAMP));
SELECT DATESUB('minute', CAST('2004-01-31 12:00:00' AS TIMESTAMP), CAST('2004-02-01 12:00:00' AS TIMESTAMP));
SELECT DATESUB('minute', CAST('2004-01-31 13:00:00' AS TIMESTAMP), CAST('2004-02-01 12:05:00' AS TIMESTAMP));
SELECT DATESUB('second', CAST('2004-01-31 12:00:00' AS TIMESTAMP), CAST('2004-02-01 12:00:05' AS TIMESTAMP));
SELECT DATESUB('second', CAST('2004-01-31 12:00:00' AS TIMESTAMP), CAST('2004-02-01 12:00:00' AS TIMESTAMP));
SELECT DATESUB('second', CAST('2004-01-31 12:00:05' AS TIMESTAMP), CAST('2004-02-01 12:00:00' AS TIMESTAMP));
SELECT DATESUB('millisecond', CAST('2004-01-31 12:00:00' AS TIMESTAMP), CAST('2004-02-01 12:00:00.050' AS TIMESTAMP));
SELECT DATESUB('millisecond', CAST('2004-01-31 12:00:00' AS TIMESTAMP), CAST('2004-02-01 12:00:00' AS TIMESTAMP));
SELECT DATESUB('millisecond', CAST('2004-01-31 12:00:00.050' AS TIMESTAMP), CAST('2004-02-01 12:00:00' AS TIMESTAMP));
SELECT DATESUB('microsecond', CAST('2004-01-31 12:00:00' AS TIMESTAMP), CAST('2004-02-01 12:00:00.000050' AS TIMESTAMP));
SELECT DATESUB('microsecond', CAST('2004-01-31 12:00:00' AS TIMESTAMP), CAST('2004-02-01 12:00:00' AS TIMESTAMP));
SELECT DATESUB('microsecond', CAST('2004-01-31 12:00:00.000050' AS TIMESTAMP), CAST('2004-02-01 12:00:00' AS TIMESTAMP));
SELECT DATESUB('${datepart}', x, x) + DATESUB('${datepart}', x, x) FROM x;
SELECT DATESUB('${datepart}', x, x) + DATESUB('${datepart}', x, x) FROM x;
SELECT DATESUB('week', CAST('-214169-1-18 21:29:6' AS TIMESTAMP), CAST('93495-11-19 13:3:22' AS TIMESTAMP));
SELECT DATESUB('dayofyear', CAST('-109502-12-4 20:26:13' AS TIMESTAMP), CAST('252823-4-6 9:56:28' AS TIMESTAMP));
SELECT DATESUB('epoch', CAST('153520-4-1 20:33:43' AS TIMESTAMP), CAST('-269898-3-29 12:9:14' AS TIMESTAMP));
CREATE TABLE x AS SELECT CAST('12:00:00' AS TIME) AS x, CAST('13:35:47.123456' AS TIME) AS x;
SELECT DATESUB('hour', CAST('12:00:00' AS TIME), CAST('13:05:00' AS TIME));
SELECT DATESUB('hour', CAST('12:00:00' AS TIME), CAST('12:05:00' AS TIME));
SELECT DATESUB('hour', CAST('13:00:00' AS TIME), CAST('12:05:00' AS TIME));
SELECT DATESUB('minute', CAST('12:00:00' AS TIME), CAST('13:05:00' AS TIME));
SELECT DATESUB('minute', CAST('12:00:00' AS TIME), CAST('13:00:00' AS TIME));
SELECT DATESUB('minute', CAST('13:00:00' AS TIME), CAST('12:05:00' AS TIME));
SELECT DATESUB('second', CAST('12:00:00' AS TIME), CAST('12:00:05' AS TIME));
SELECT DATESUB('second', CAST('12:00:00' AS TIME), CAST('12:00:00' AS TIME));
SELECT DATESUB('second', CAST('12:00:05' AS TIME), CAST('12:00:00' AS TIME));
SELECT DATESUB('millisecond', CAST('12:00:00' AS TIME), CAST('12:00:00.050' AS TIME));
SELECT DATESUB('millisecond', CAST('12:00:00' AS TIME), CAST('12:00:00' AS TIME));
SELECT DATESUB('millisecond', CAST('12:00:00.050' AS TIME), CAST('12:00:00' AS TIME));
SELECT DATESUB('microsecond', CAST('12:00:00' AS TIME), CAST('12:00:00.000050' AS TIME));
SELECT DATESUB('microsecond', CAST('12:00:00' AS TIME), CAST('12:00:00' AS TIME));
SELECT DATESUB('microsecond', CAST('12:00:00.000050' AS TIME), CAST('12:00:00' AS TIME));
SELECT DATESUB('${datepart}', CAST('12:00:00.000050' AS TIME), CAST('12:00:00' AS TIME));
SELECT DATESUB('${datepart}', CAST('12:00:00.000050' AS TIME), CAST('12:00:00' AS TIME));
SELECT DATESUB('${datepart}', CAST('12:00:00.000050' AS TIME), CAST('12:00:00' AS TIME));
SELECT DATESUB('${datepart}', CAST('12:00:00.000050' AS TIME), CAST('12:00:00' AS TIME));
SELECT DATESUB('${datepart}', CAST('12:00:00.000050' AS TIME), CAST('12:00:00' AS TIME));
SELECT DATESUB('${datepart}', CAST('12:00:00.000050' AS TIME), CAST('12:00:00' AS TIME));
SELECT DATESUB('${datepart}', CAST('12:00:00.000050' AS TIME), CAST('12:00:00' AS TIME));
SELECT DATESUB('${datepart}', CAST('12:00:00.000050' AS TIME), CAST('12:00:00' AS TIME));
CREATE TABLE x (x TEXT);
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('${datepart}');
SELECT x, DATESUB(x, CAST('2004-01-31 12:00:00' AS TIMESTAMP), CAST('2004-02-29 13:05:47.123456' AS TIMESTAMP)) FROM x;
SELECT x, DATESUB(x, CAST('2004-01-31 12:00:00' AS TIMESTAMP), CAST('2004-02-29 13:05:47.123456' AS TIMESTAMP)) FROM x;
INSERT INTO x VALUES ('duck');
SELECT x, DATESUB(x, CAST('2004-01-31 12:00:00' AS TIMESTAMP), CAST('2004-02-29 13:05:47.123456' AS TIMESTAMP)) FROM x;
SELECT EPOCH_MS(0) AS x, EPOCH_MS(1574802684123) AS x, EPOCH_MS(-291044928000) AS x, EPOCH_MS(-291081600000) AS x, EPOCH_MS(-291081600001) AS x, EPOCH_MS(-290995201000) AS x;
SELECT TO_TIMESTAMP(0), TO_TIMESTAMP(1), TO_TIMESTAMP(1574802684), TO_TIMESTAMP(-1);
SELECT TO_TIMESTAMP(1284352323.5);
SELECT TO_TIMESTAMP(CAST(1284352323 AS DOUBLE) * 100000000);
PRAGMA x;
CREATE TABLE IF NOT EXISTS x (x DATE);
INSERT INTO x VALUES (NULL), ('-99999-01-01'), ('-1993-08-14'), ('1992-01-01 (BC)'), ('-1992-01-01'), ('0044-03-15 (BC)'), ('0000-01-01'), ('0020-01-01'), ('1992-01-01'), ('1992-01-20'), ('1992-02-01'), ('1992-02-02'), ('1992-02-12'), ('1992-02-20'), ('1992-03-03'), ('1992-03-20'), ('1992-04-20'), ('1992-05-05'), ('1992-05-20'), ('1992-06-20'), ('1992-07-20'), ('1992-08-20'), ('1992-09-20'), ('1992-10-20'), ('1992-11-20'), ('1992-12-02'), ('1992-12-20'), ('1993-03-20'), ('1993-03-03'), ('1994-05-05'), ('1993-08-14'), ('2000-12-31'), ('2000-02-12'), ('2001-01-01'), ('2007-01-01'), ('2008-01-01'), ('2008-01-02'), ('2008-02-01'), ('2020-08-09'), ('2020-08-10'), ('2020-09-27'), ('99999-01-01');
SELECT x FROM (SELECT x, MAKE_DATE(YEAR(x), MONTH(x), DAY(x)) AS x FROM x) AS x WHERE x IS DISTINCT FROM x;
SELECT x FROM (SELECT x, MAKE_DATE(DATE_PART(['year', 'month', 'day'], x)) AS x FROM x) AS x WHERE x IS DISTINCT FROM x;
SELECT x FROM (SELECT MAKE_DATE(NULL, MONTH(x), DAY(x)) AS x FROM x) AS x WHERE NOT x IS NULL;
SELECT x FROM (SELECT MAKE_DATE(YEAR(x), NULL, DAY(x)) AS x FROM x) AS x WHERE NOT x IS NULL;
SELECT x FROM (SELECT MAKE_DATE(YEAR(x), MONTH(x), NULL) AS x FROM x) AS x WHERE NOT x IS NULL;
SELECT * FROM x WHERE x <> MAKE_DATE(CAST((x - CAST('1970-01-01' AS DATE)) AS INT));
SELECT MAKE_DATE(2021, 12, 30), MAKE_DATE(NULL, 12, 30), MAKE_DATE(2021, NULL, 30), MAKE_DATE(2021, 12, NULL);
CREATE TABLE x (x TIMESTAMP);
INSERT INTO x VALUES ('1001-03-15 (BC) 20:38:40'), ('0044-03-15 (BC) 20:38:40'), ('1962-07-31 12:20:48.123456'), ('1969-01-01 01:03:20.45432'), ('1992-01-01 01:01:01.400'), ('1992-01-01 01:01:02.200'), ('1992-01-01 01:01:02.400'), ('1993-08-14 08:22:33.42'), ('2001-04-20 14:42:11.0'), ('2001-04-20 14:42:11.123'), ('2004-01-31 12:00:00.000050'), ('2004-01-31 12:00:00.050'), ('2004-02-01 12:00:00.000050'), ('2004-02-01 12:00:00.050'), ('2004-02-29 13:05:47.123456'), ('2008-01-01 00:00:01.5'), ('2008-01-01 00:00:01.594'), ('2008-01-01 00:00:01.794'), ('2008-01-01 00:00:01.88926'), ('2008-01-01 00:00:01.894'), ('2008-01-01 00:00:01.98926'), ('2008-01-01 00:00:01.99926'), ('2008-01-01 00:00:11.1'), ('2019-01-06 04:03:02.123456'), ('2019-01-06 04:03:02.5'), ('2020-01-01 00:00:01.88926'), ('2020-12-31 21:25:58.745232'), ('2021-04-15 14:55:17.915'), ('2021-04-15 14:55:17.915000'), ('2021-05-02 12:11:49.5'), ('2021-12-01 13:54:48.123456'), ('1993-08-14 08:22:33'), (NULL);
SELECT x, x FROM (SELECT x, MAKE_TIMESTAMP(YEAR(x), MONTH(x), DAY(x), HOUR(x), MINUTE(x), MICROSECOND(x) / 1000000.0) AS x FROM x) AS x WHERE x IS DISTINCT FROM x;
SELECT x FROM (SELECT MAKE_TIMESTAMP(NULL, MONTH(x), DAY(x), HOUR(x), MINUTE(x), MICROSECOND(x) / 1000000.0) AS x FROM x) AS x WHERE NOT x IS NULL;
SELECT x FROM (SELECT MAKE_TIMESTAMP(YEAR(x), NULL, DAY(x), HOUR(x), MINUTE(x), MICROSECOND(x) / 1000000.0) AS x FROM x) AS x WHERE NOT x IS NULL;
SELECT x FROM (SELECT MAKE_TIMESTAMP(YEAR(x), MONTH(x), NULL, HOUR(x), MINUTE(x), MICROSECOND(x) / 1000000.0) AS x FROM x) AS x WHERE NOT x IS NULL;
SELECT x FROM (SELECT MAKE_TIMESTAMP(YEAR(x), MONTH(x), DAY(x), NULL, MINUTE(x), MICROSECOND(x) / 1000000.0) AS x FROM x) AS x WHERE NOT x IS NULL;
SELECT x FROM (SELECT MAKE_TIMESTAMP(YEAR(x), MONTH(x), DAY(x), HOUR(x), NULL, MICROSECOND(x) / 1000000.0) AS x FROM x) AS x WHERE NOT x IS NULL;
SELECT x FROM (SELECT MAKE_TIMESTAMP(YEAR(x), MONTH(x), DAY(x), HOUR(x), MINUTE(x), NULL) AS x FROM x) AS x WHERE NOT x IS NULL;
SELECT MAKE_TIMESTAMP(2021, 12, 30, 12, 41, 46.123456), MAKE_TIMESTAMP(NULL, 12, 30, 12, 41, 46.123456), MAKE_TIMESTAMP(2021, NULL, 30, 12, 41, 46.123456), MAKE_TIMESTAMP(2021, 12, NULL, 12, 41, 46.123456), MAKE_TIMESTAMP(2021, 12, 30, NULL, 41, 46.123456), MAKE_TIMESTAMP(2021, 12, 30, 12, NULL, 46.123456), MAKE_TIMESTAMP(2021, 12, 30, 12, 41, NULL);
SELECT MAKE_TIMESTAMP(0), MAKE_TIMESTAMP(1684509234845000);
SELECT MAKE_TIMESTAMP(9223372036854775807);
SELECT MAKE_TIMESTAMP_NS(0), MAKE_TIMESTAMP_NS(1684509234845000123);
SELECT MAKE_TIMESTAMP_NS(9223372036854775806);
SELECT MAKE_TIMESTAMP_NS(9223372036854775807);
CREATE TABLE x (x TIME);
INSERT INTO x VALUES (NULL), ('00:00:01'), ('00:01:20'), ('01:00:00'), ('02:30:01'), ('06:30:00'), ('12:00:30.1234'), ('12:20:48.123456'), ('12:11:49.5'), ('14:55:17.915000'), ('21:15:22'), ('20:08:10.001'), ('20:08:10.33'), ('20:08:10.998'), ('21:25:58.745232');
SELECT x, x FROM (SELECT x, MAKE_TIME(HOUR(x), MINUTE(x), MICROSECOND(x) / 1000000.0) AS x FROM x) AS x WHERE x IS DISTINCT FROM x;
SELECT x FROM (SELECT MAKE_TIME(NULL, MINUTE(x), MICROSECOND(x) / 1000000.0) AS x FROM x) AS x WHERE NOT x IS NULL;
SELECT x FROM (SELECT MAKE_TIME(HOUR(x), NULL, MICROSECOND(x) / 1000000.0) AS x FROM x) AS x WHERE NOT x IS NULL;
SELECT x FROM (SELECT MAKE_TIME(HOUR(x), MINUTE(x), NULL) AS x FROM x) AS x WHERE NOT x IS NULL;
SELECT MAKE_TIME(12, 41, 46.123456), MAKE_TIME(NULL, 41, 46.123456), MAKE_TIME(12, NULL, 46.123456), MAKE_TIME(12, 41, NULL);
SELECT MAKE_TIMESTAMP(294247, 1, 10, 4, 0, 54.775807);
PRAGMA x;
SELECT x, x, DATE_DIFF('DAY', x, x) AS x FROM (VALUES (CAST('1970-01-03 12:12:12' AS TIMESTAMP), CAST('1969-12-25 05:05:05' AS TIMESTAMP))) AS x;
SELECT x, x, DATE_DIFF('HOUR', x, x) AS x FROM (VALUES (CAST('1970-01-01 12:12:12' AS TIMESTAMP), CAST('1969-12-31 05:05:05' AS TIMESTAMP))) AS x;
SELECT x, x, DATE_DIFF('MINUTE', x, x) AS x FROM (VALUES (CAST('1970-01-01 00:12:12' AS TIMESTAMP), CAST('1969-12-31 23:05:05' AS TIMESTAMP))) AS x;
SELECT x, x, DATE_DIFF('SECOND', x, x) AS x FROM (VALUES (CAST('1970-01-01 00:00:12.456' AS TIMESTAMP), CAST('1969-12-31 23:59:05.123' AS TIMESTAMP))) AS x;
SELECT x, x, DATE_DIFF('MILLISECOND', x, x) AS x FROM (VALUES (CAST('1970-01-01 00:00:12.456789' AS TIMESTAMP), CAST('1969-12-31 23:59:05.123456' AS TIMESTAMP))) AS x;
SET x = 'nulls_first';
PRAGMA x;
CREATE TABLE x (x TIMESTAMP);
INSERT INTO x VALUES ('-infinity'), ('1962-07-31 12:20:48.123456'), ('1969-01-01 01:03:20.45432'), ('1992-01-01 01:01:01.400'), ('1992-01-01 01:01:02.200'), ('1992-01-01 01:01:02.400'), ('1993-08-14 08:22:33'), ('1993-08-14 08:22:33.42'), ('2001-04-20 14:42:11.0'), ('2001-04-20 14:42:11.123'), ('2004-01-31 12:00:00.000050'), ('2004-01-31 12:00:00.050'), ('2004-02-01 12:00:00.000050'), ('2004-02-01 12:00:00.050'), ('2004-02-29 13:05:47.123456'), ('2008-01-01 00:00:01.5'), ('2008-01-01 00:00:01.594'), ('2008-01-01 00:00:01.794'), ('2008-01-01 00:00:01.88926'), ('2008-01-01 00:00:01.894'), ('2008-01-01 00:00:01.98926'), ('2008-01-01 00:00:01.99926'), ('2008-01-01 00:00:11.1'), ('2019-01-06 04:03:02.123456'), ('2019-01-06 04:03:02.5'), ('2020-01-01 00:00:01.88926'), ('2020-12-31 21:25:58.745232'), ('2021-04-15 14:55:17.915'), ('2021-04-15 14:55:17.915000'), ('2021-05-02 12:11:49.5'), ('2021-12-01 13:54:48.123456'), ('2022-01-01 00:00:41'), ('infinity'), (NULL);
CREATE TABLE x AS SELECT * FROM (VALUES (CAST('1001-03-15 (BC) 20:38:40' AS TIMESTAMP)), (CAST('0044-03-15 (BC) 20:38:40' AS TIMESTAMP)), (CAST('0998-02-16 20:38:40' AS TIMESTAMP)), (CAST('1998-02-16 20:38:40' AS TIMESTAMP)), (CAST('2001-02-16 20:38:40' AS TIMESTAMP))) AS x;
SELECT x, DATE_PART('millennium', x) FROM x;
SELECT x, DATE_PART('century', x) FROM x;
SELECT DATE_PART('isoyear', x), x FROM x ORDER BY 2;
SELECT DATE_PART('isoyear', x), x FROM x AS x;
SELECT DATE_PART('julian', x), x FROM x ORDER BY 2;
SELECT DATE_PART('julian', x), x FROM x ORDER BY 2;
SELECT DATE_PART('julian', x), x FROM x ORDER BY 2;
SELECT DATE_PART('julian', x), x FROM x ORDER BY 2;
SELECT x, DATE_PART('${partcode}', x) AS x, DATE_PART(['${partcode}'], x) AS x FROM x WHERE x <> x['${partcode}'];
SELECT CAST(x AS DATE) AS x, DATE_PART(['year', 'month', 'day'], x) AS x FROM x ORDER BY 1;
SELECT CAST(x AS DATE) AS x, DATE_PART(['year', 'month', 'day'], x) AS x FROM x ORDER BY 1;
SELECT CAST(x AS DATE) AS x, DATE_PART(['era', 'millennium', 'century', 'decade', 'quarter'], x) AS x FROM x ORDER BY 1;
SELECT CAST(x AS DATE) AS x, DATE_PART(['era', 'millennium', 'century', 'decade', 'quarter'], x) AS x FROM x ORDER BY 1;
SELECT CAST(x AS DATE) AS x, DATE_PART(['weekday', 'isodow', 'doy', 'julian'], x) AS x FROM x ORDER BY 1;
SELECT DATE_PART(['weekday', 'isodow', 'doy', 'julian'], CAST('2008-01-01 00:00:01.894' AS TIMESTAMP)) AS x;
SELECT CAST(x AS DATE) AS x, DATE_PART(['weekday', 'isodow', 'doy', 'julian'], x) AS x FROM x ORDER BY 1;
SELECT CAST(x AS DATE) AS x, DATE_PART(['isoyear', 'week', 'yearweek'], x) AS x FROM x ORDER BY 1;
SELECT CAST(x AS DATE) AS x, DATE_PART(['isoyear', 'week', 'yearweek'], x) AS x FROM x ORDER BY 1;
SELECT x, DATE_PART(['hour', 'minute', 'microsecond'], x) AS x FROM x ORDER BY 1;
SELECT x, DATE_PART(['hour', 'minute', 'microsecond'], x) AS x FROM x ORDER BY 1;
SELECT x, DATE_PART(['epoch', 'timezone', 'timezone_hour', 'timezone_minute'], x) AS x FROM x ORDER BY 1;
SELECT x, DATE_PART(['epoch', 'timezone', 'timezone_hour', 'timezone_minute'], x) AS x FROM x ORDER BY 1;
SELECT DATE_PART(['hour', 'minute', 'microsecond'], CAST(NULL AS TIMESTAMP));
SELECT DATE_PART(['hour', 'minute', 'microsecond'], CAST('1962-07-31 12:20:48.123456' AS TIMESTAMP));
SELECT DATE_PART(['month', 'months', 'mon'], CAST('1962-07-31 12:20:48.123456' AS TIMESTAMP));
SELECT CAST(x AS DATE) AS x, DATE_PART(['year', 'month', 'months'], x) AS x FROM x ORDER BY 1;
SELECT x, EPOCH_US(x) FROM x ORDER BY ALL;
SELECT CAST(x AS TIMESTAMPTZ), EPOCH_US(CAST(x AS TIMESTAMPTZ)) FROM x ORDER BY ALL;
SELECT x, EPOCH_MS(x) FROM x ORDER BY ALL;
SELECT CAST(x AS TIMESTAMPTZ), EPOCH_MS(CAST(x AS TIMESTAMPTZ)) FROM x ORDER BY ALL;
SELECT EPOCH_MS(9223372036854775807);
SELECT EPOCH_MS(-9223372036854775808);
SELECT x, EPOCH_NS(x) FROM x ORDER BY ALL;
SELECT CAST(x AS TIMESTAMPTZ), EPOCH_NS(CAST(x AS TIMESTAMPTZ)) FROM x ORDER BY ALL;
SELECT x, NANOSECOND(x) FROM x ORDER BY ALL;
SELECT CAST(x AS TIMESTAMPTZ), NANOSECOND(CAST(x AS TIMESTAMPTZ)) FROM x ORDER BY ALL;
SELECT NANOSECOND(x) FROM (VALUES (CAST('1992-01-01 12:03:27.123456789' AS TIMESTAMP_NS)), (CAST('1900-01-01 03:08:47.987654' AS TIMESTAMP_NS)), (CAST(NULL AS TIMESTAMP_NS)), (CAST('2020-09-27 13:12:01' AS TIMESTAMP_NS))) AS x;
SELECT x, DATE_PART(['duck', 'month', 'day'], x) AS x FROM x ORDER BY 1;
SELECT x, DATE_PART(['year', 'month', 'day', 'year'], x) AS x FROM x ORDER BY 1;
SELECT DATE_PART([], x) FROM x;
SELECT DATE_PART(['year', NULL, 'month'], x) FROM x;
WITH x AS (SELECT * FROM (VALUES (['year', 'month', 'day']), (['hour', 'minute', 'microsecond'])) AS x) SELECT DATE_PART(x, x) FROM x, x;
SELECT EPOCH_NS(MAKE_TIMESTAMP_NS(1732118940123456789));
PRAGMA x;
CREATE TABLE x (x TIMESTAMP);
INSERT INTO x VALUES ('1993-08-14 08:22:33'), (NULL);
SELECT EXTRACT(YEAR FROM x) FROM x;
SELECT EXTRACT(MONTH FROM x) FROM x;
SELECT EXTRACT(DAY FROM x) FROM x;
SELECT EXTRACT(WEEK FROM x) FROM x;
SELECT EXTRACT(YEARWEEK FROM x) FROM x;
SELECT EXTRACT(QUARTER FROM x) FROM x;
SELECT EXTRACT(DECADE FROM x) FROM x;
SELECT EXTRACT(CENTURY FROM x) FROM x;
SELECT EXTRACT(DOW FROM x) FROM x;
SELECT EXTRACT(DOY FROM x) FROM x;
SELECT EXTRACT(EPOCH FROM x) FROM x;
SELECT EXTRACT(ISODOW FROM x) FROM x;
SELECT EXTRACT(MILLENNIUM FROM x) FROM x;
SELECT EXTRACT(SECOND FROM x) FROM x;
SELECT EXTRACT(MINUTE FROM x) FROM x;
SELECT EXTRACT(HOUR FROM x) FROM x;
SELECT EXTRACT(MILLISECONDS FROM x) FROM x;
PRAGMA x;
CREATE TABLE x (x TIMESTAMP);
INSERT INTO x VALUES ('1993-08-14 08:22:33.42'), (NULL);
SELECT EXTRACT(SECOND FROM x) FROM x;
SELECT EXTRACT(MINUTE FROM x) FROM x;
SELECT EXTRACT(MILLISECONDS FROM x) FROM x;
SELECT EXTRACT(MICROSECONDS FROM x) FROM x;
SET x = 'gregorian';
SET x = 'America/Los_Angeles';
SELECT AGE(CAST('1957-06-13' AS TIMESTAMPTZ)) AS x;
SELECT AGE(CAST('2001-04-10 00:00:00-07' AS TIMESTAMP), CAST('1957-06-13 00:00:00-07' AS TIMESTAMP));
SELECT AGE(CAST('2014-04-25 00:00:00-07' AS TIMESTAMP), CAST('2014-04-17 00:00:00-07' AS TIMESTAMP));
SELECT AGE(CAST('2014-04-25' AS TIMESTAMPTZ), CAST('2014-01-01' AS TIMESTAMPTZ));
SELECT AGE(CAST('2019-06-11' AS TIMESTAMPTZ), CAST('2019-06-11' AS TIMESTAMPTZ));
SELECT CAST(AGE(CAST('2019-06-11' AS TIMESTAMPTZ), CAST('2019-06-11' AS TIMESTAMPTZ)) AS TEXT);
SELECT AGE(CAST('2019-06-11 12:00:00-07' AS TIMESTAMPTZ), CAST('2019-07-11 11:00:00-07' AS TIMESTAMPTZ));
CREATE TABLE x (x TIMESTAMPTZ, x TIMESTAMPTZ);
INSERT INTO x VALUES ('2001-04-10', '1957-06-13'), ('2014-04-25', '2014-04-17'), ('2014-04-25', '2014-01-01'), ('2019-06-11', '2019-06-11'), (NULL, '2019-06-11'), ('2019-06-11', NULL), (NULL, NULL);
SELECT AGE(x, CAST('1957-06-13' AS TIMESTAMPTZ)) FROM x;
SELECT AGE(CAST('2001-04-10' AS TIMESTAMPTZ), x) FROM x;
SELECT AGE(x, x) FROM x;
SELECT x - x FROM x;
SELECT AGE(x, x) FROM x WHERE x > '2001-12-12';
SELECT AGE(NULL, NULL);
SELECT AGE(CAST('1957-06-13' AS TIMESTAMPTZ), NULL);
SELECT AGE(NULL, CAST('1957-06-13' AS TIMESTAMPTZ));
SELECT AGE(CAST('1992-01-01 01:01:02.400' AS TIMESTAMPTZ), CAST('1992-01-01 01:01:02.200' AS TIMESTAMPTZ));
SELECT AGE(CAST('1992-01-01 01:01:02.200' AS TIMESTAMPTZ), CAST('1992-01-01 01:01:02.400' AS TIMESTAMPTZ));
SELECT AGE(CAST('1992-01-01 01:01:01.400' AS TIMESTAMPTZ), CAST('1992-01-01 01:01:02.200' AS TIMESTAMPTZ));
SET x = 'gregorian';
SET x = 'America/Los_Angeles';
SELECT CAST('2021-12-01 13:54:48Z' AS TIMESTAMPTZ) + INTERVAL '1' DAY;
CREATE TABLE x AS SELECT x FROM (VALUES (INTERVAL '1' YEAR), (INTERVAL (-1) YEAR), (INTERVAL '1' MONTH), (INTERVAL (-1) MONTH), (INTERVAL '13' MONTH), (INTERVAL (-15) MONTH), (INTERVAL '1' DAY), (INTERVAL (-1) DAY), (INTERVAL '32' DAY), (INTERVAL (-40) DAY), (INTERVAL '1' HOUR), (INTERVAL (-1) HOUR), (INTERVAL '11' HOUR), (INTERVAL (-14) HOUR), (INTERVAL '1' MINUTE), (INTERVAL (-1) MINUTE), (INTERVAL '6' MINUTE), (INTERVAL (-72) MINUTE), (INTERVAL '1' SECOND), (INTERVAL (-1) SECOND), (INTERVAL '23' SECOND), (INTERVAL (-118) SECOND), (INTERVAL '1' MILLISECOND), (INTERVAL (-1) MILLISECOND), (INTERVAL '910' MILLISECOND), (INTERVAL (-150) MILLISECOND), (INTERVAL '1' MICROSECOND), (INTERVAL (-1) MICROSECOND), (INTERVAL '612' MICROSECOND), (INTERVAL (-485) MICROSECOND)) AS x;
SELECT x, CAST('2021-12-01 13:54:48.123456Z' AS TIMESTAMPTZ) + x FROM x;
SELECT CAST('1999-12-31 16:00:00-08' AS TIMESTAMPTZ) + INTERVAL '2400' HOURS;
SELECT CAST('epoch' AS TIMESTAMPTZ) + CAST('9223372036854775000 microseconds' AS INTERVAL);
SELECT CAST('epoch' AS TIMESTAMPTZ) + CAST('9223372036854774999 microseconds' AS INTERVAL);
SELECT CAST('epoch' AS TIMESTAMPTZ) + CAST('-9223372022400001001 microseconds' AS INTERVAL);
SELECT CAST('epoch' AS TIMESTAMPTZ) + CAST('-9223372022400001000 microseconds' AS INTERVAL);
SELECT x, x + CAST('2021-12-01 13:54:48.123456Z' AS TIMESTAMPTZ) FROM x;
SELECT INTERVAL '2400' HOURS + INTERVAL '1999-12-31 16:00:00-08' :: AS x;
SELECT CAST('9223372036854775000 microseconds' AS INTERVAL) + CAST('epoch' AS TIMESTAMPTZ);
SELECT CAST('9223372036854774999 microseconds' AS INTERVAL) + CAST('epoch' AS TIMESTAMPTZ);
SELECT CAST('-9223372022400001001 microseconds' AS INTERVAL) + CAST('epoch' AS TIMESTAMPTZ);
SELECT CAST('-9223372022400001000 microseconds' AS INTERVAL) + CAST('epoch' AS TIMESTAMPTZ);
SELECT CAST('infinity' AS TIMESTAMPTZ) + CAST('1 microsecond' AS INTERVAL);
SELECT CAST('1 microsecond' AS INTERVAL) + CAST('infinity' AS TIMESTAMPTZ);
SELECT CAST('-infinity' AS TIMESTAMPTZ) + CAST('1 microsecond' AS INTERVAL);
SELECT CAST('1 microsecond' AS INTERVAL) + CAST('-infinity' AS TIMESTAMPTZ);
SELECT x, CAST('2021-12-01 13:54:48.123456Z' AS TIMESTAMPTZ) - x FROM x;
SELECT CAST('2000-04-09 17:00:00-07' AS TIMESTAMPTZ) - INTERVAL '2400' HOURS;
SELECT CAST('epoch' AS TIMESTAMPTZ) - CAST('9223372022400001001 microseconds' AS INTERVAL);
SELECT CAST('epoch' AS TIMESTAMPTZ) - CAST('9223372022400001000 microseconds' AS INTERVAL);
SELECT CAST('infinity' AS TIMESTAMPTZ) - CAST('1 day' AS INTERVAL);
SELECT CAST('-infinity' AS TIMESTAMPTZ) - CAST('1 day' AS INTERVAL);
SELECT x, CAST('1962-07-31 12:20:48.123456Z' AS TIMESTAMPTZ) + x FROM x;
CREATE TABLE x AS SELECT x, x FROM (VALUES (CAST('290309-12-22 (BC) 00:00:00Z' AS TIMESTAMPTZ), 'tsmin'), (CAST('294247-01-10 04:00:54.775806Z' AS TIMESTAMPTZ), 'tsmax')) AS x;
SELECT x, x + x FROM x, x WHERE x = 'tsmin' AND x >= INTERVAL '0' SECONDS;
SELECT x + (INTERVAL (-1) YEAR) FROM x WHERE x = 'tsmin';
SELECT x + (INTERVAL (-1) MONTH) FROM x WHERE x = 'tsmin';
SELECT x + (INTERVAL (-15) MONTH) FROM x WHERE x = 'tsmin';
SELECT x + (INTERVAL (-1) DAY) FROM x WHERE x = 'tsmin';
SELECT x + (INTERVAL (-40) DAY) FROM x WHERE x = 'tsmin';
SELECT x + (INTERVAL (-1) HOUR) FROM x WHERE x = 'tsmin';
SELECT x + (INTERVAL (-14) HOUR) FROM x WHERE x = 'tsmin';
SELECT x + (INTERVAL (-1) MINUTE) FROM x WHERE x = 'tsmin';
SELECT x + (INTERVAL (-72) MINUTE) FROM x WHERE x = 'tsmin';
SELECT x + (INTERVAL (-1) SECOND) FROM x WHERE x = 'tsmin';
SELECT x + (INTERVAL (-118) SECOND) FROM x WHERE x = 'tsmin';
SELECT x + (INTERVAL (-1) MILLISECOND) FROM x WHERE x = 'tsmin';
SELECT x + (INTERVAL (-150) MILLISECOND) FROM x WHERE x = 'tsmin';
SELECT x + (INTERVAL (-1) MICROSECOND) FROM x WHERE x = 'tsmin';
SELECT x + (INTERVAL (-485) MICROSECOND) FROM x WHERE x = 'tsmin';
SELECT x + INTERVAL (-150) MILLISECOND FROM x WHERE x = 'tsmin';
SELECT x + INTERVAL (-485) MICROSECOND FROM x WHERE x = 'tsmin';
SELECT x, x + x FROM x, x WHERE x = 'tsmax' AND x < (INTERVAL (-1) MILLISECOND);
SELECT x + (INTERVAL (-485) MICROSECOND) FROM x WHERE x = 'tsmax';
SELECT x + (INTERVAL (-1) MICROSECOND) FROM x WHERE x = 'tsmax';
SELECT x + (INTERVAL (-1) MILLISECOND) FROM x WHERE x = 'tsmax';
SELECT x + (INTERVAL '1' YEAR) FROM x WHERE x = 'tsmax';
SELECT x + (INTERVAL '1' MONTH) FROM x WHERE x = 'tsmax';
SELECT x + (INTERVAL '13' MONTH) FROM x WHERE x = 'tsmax';
SELECT x + (INTERVAL '1' DAY) FROM x WHERE x = 'tsmax';
SELECT x + (INTERVAL '32' DAY) FROM x WHERE x = 'tsmax';
SELECT x + (INTERVAL '1' HOUR) FROM x WHERE x = 'tsmax';
SELECT x + (INTERVAL '11' HOUR) FROM x WHERE x = 'tsmax';
SELECT x + (INTERVAL '1' MINUTE) FROM x WHERE x = 'tsmax';
SELECT x + (INTERVAL '6' MINUTE) FROM x WHERE x = 'tsmax';
SELECT x + (INTERVAL '1' SECOND) FROM x WHERE x = 'tsmax';
SELECT x + (INTERVAL '23' SECOND) FROM x WHERE x = 'tsmax';
SELECT x + (INTERVAL '1' MILLISECOND) FROM x WHERE x = 'tsmax';
SELECT x + (INTERVAL '910' MILLISECOND) FROM x WHERE x = 'tsmax';
SELECT x + (INTERVAL '1' MICROSECOND) FROM x WHERE x = 'tsmax';
SELECT x + (INTERVAL '612' MICROSECOND) FROM x WHERE x = 'tsmax';
SET x = 'Europe/London';
CREATE TABLE x AS (SELECT * FROM (VALUES (CAST('2000-10-29 03:00:00+00' AS TIMESTAMPTZ), CAST('2000-03-26 03:00:00+01' AS TIMESTAMPTZ), CAST('2000-01-03 00:00:00+00' AS TIMESTAMPTZ))) AS x);
SELECT x + (x - x) FROM x;
SELECT x + (x - x) FROM x;
SET x = 'Asia/Kolkata';
SELECT CAST((CAST('1920-12-12 01:02:02+05:30' AS TIMESTAMPTZ) + INTERVAL '-1 month 400 day') AS TIMESTAMPTZ) AS x;
SELECT CAST((CAST('1920-12-12 01:02:02+05:30' AS TIMESTAMPTZ) + INTERVAL '1 month -400 day') AS TIMESTAMPTZ) AS x;
SELECT CAST('Infinity' AS TIMESTAMPTZ) - CAST('Infinity' AS TIMESTAMPTZ);
SELECT CAST('Infinity' AS TIMESTAMPTZ) - CAST('-Infinity' AS TIMESTAMPTZ);
SELECT CAST('Infinity' AS TIMESTAMPTZ) - CAST('2020-01-01' AS TIMESTAMPTZ);
SET x = 'gregorian';
SET x = 'America/Los_Angeles';
SET x = 'America/Los_Angeles';
SELECT DATE_DIFF('${DATEPART}', x, x) FROM x;
SELECT DATE_DIFF('${DATEPART}', x, x) FROM x;
SELECT DATE_DIFF('ISOYEAR', CAST('2022-01-01 00:00:00-08' AS TIMESTAMPTZ), CAST('2022-01-03 00:00:00-08' AS TIMESTAMPTZ));
SELECT DATE_DIFF('${SPECIFIER}', CAST('${lspecial}' AS TIMESTAMPTZ), CAST('${rspecial}' AS TIMESTAMPTZ));
SELECT DATE_DIFF('${SPECIFIER}', CAST('${rspecial}' AS TIMESTAMPTZ), CAST('${lspecial}' AS TIMESTAMPTZ));
SELECT DATE_DIFF('${DATEPART}', x, x) + DATE_DIFF('${DATEPART}', x, x) FROM x;
SELECT DATE_DIFF('${DATEPART}', x, x) + DATE_DIFF('${DATEPART}', x, x) FROM x;
SELECT *, DATE_DIFF('WEEK', x, x) FROM (SELECT CAST((x - INTERVAL '9' HOUR) AS TIMESTAMPTZ) AS x, CAST((x + INTERVAL '7' HOUR) AS TIMESTAMPTZ) AS x FROM x AS x);
SELECT DATE_DIFF('WEEK', CAST('2015-10-06 04:22:11' AS TIMESTAMPTZ), CAST('2016-11-25 23:19:37' AS TIMESTAMPTZ));
SET x = 'CET';
CREATE TABLE x (x TIMESTAMPTZ, x TIMESTAMPTZ);
INSERT INTO x VALUES ('2022-10-30 02:17:00+02', '2022-10-30 02:00:21+01');
INSERT INTO x VALUES ('2021-10-31 02:39:00+02', '2021-10-31 02:38:20+01');
SELECT x, x, DATE_DIFF('MINUTE', x, x) FROM x;
SET x = 'nulls_first';
SET x = 'gregorian';
SET x = 'America/Los_Angeles';
CREATE TABLE x AS SELECT * FROM (VALUES (CAST('0044-03-13 (BC) 10:33:41.987654+01' AS TIMESTAMPTZ), 'era'), (CAST('1962-07-31 12:20:48.123456+00' AS TIMESTAMPTZ), 'epoch'), (CAST('2021-01-01 00:00:00+00' AS TIMESTAMPTZ), 'year'), (CAST('2021-02-02 00:00:00+00' AS TIMESTAMPTZ), 'month'), (CAST('2021-11-26 10:15:13.123456+00' AS TIMESTAMPTZ), 'microsecond'), (CAST('2021-11-15 02:30:00-08' AS TIMESTAMPTZ), 'hour'), (CAST('2021-11-15 02:30:00-07' AS TIMESTAMPTZ), 'minute'), (CAST('2021-12-25 00:00:00+02' AS TIMESTAMPTZ), 'day'), (CAST('infinity' AS TIMESTAMPTZ), 'second'), (CAST('-infinity' AS TIMESTAMPTZ), 'decade'), (CAST(NULL AS TIMESTAMPTZ), 'century')) AS x;
SELECT YEAR(x), YEAR(CAST(x AS TIMESTAMP)) FROM x;
SELECT MONTH(x), MONTH(CAST(x AS TIMESTAMP)) FROM x;
SELECT DAY(x), DAY(CAST(x AS TIMESTAMP)) FROM x;
SELECT DECADE(x), DECADE(CAST(x AS TIMESTAMP)) FROM x;
SELECT CENTURY(x), CENTURY(CAST(x AS TIMESTAMP)) FROM x;
SELECT MILLENNIUM(x), MILLENNIUM(CAST(x AS TIMESTAMP)) FROM x;
SELECT MICROSECOND(x), MICROSECOND(CAST(x AS TIMESTAMP)) FROM x;
SELECT MILLISECOND(x), MILLISECOND(CAST(x AS TIMESTAMP)) FROM x;
SELECT SECOND(x), SECOND(CAST(x AS TIMESTAMP)) FROM x;
SELECT MINUTE(x), MINUTE(CAST(x AS TIMESTAMP)) FROM x;
SELECT HOUR(x), HOUR(CAST(x AS TIMESTAMP)) FROM x;
SELECT DAYOFWEEK(x), DAYOFWEEK(CAST(x AS TIMESTAMP)) FROM x;
SELECT ISODOW(x), ISODOW(CAST(x AS TIMESTAMP)) FROM x;
SELECT DATE_PART('isodow', x), DATE_PART('isodow', CAST(x AS TIMESTAMP)) FROM x AS x;
SELECT DATE_PART('dow', x), DATE_PART('dow', CAST(x AS TIMESTAMP)) FROM x AS x;
SELECT WEEK(x), WEEK(CAST(x AS TIMESTAMP)) FROM x;
SELECT DAYOFYEAR(x), DAYOFYEAR(CAST(x AS TIMESTAMP)) FROM x;
SELECT QUARTER(x), QUARTER(CAST(x AS TIMESTAMP)) FROM x;
SELECT YEARWEEK(x), YEARWEEK(CAST(x AS TIMESTAMP)) FROM x;
SELECT ISOYEAR(x), ISOYEAR(CAST(x AS TIMESTAMP)) FROM x;
SELECT EPOCH(x), EPOCH(CAST(x AS TIMESTAMP)) FROM x;
SELECT DATE_PART(x, x), DATE_PART(x, CAST(x AS TIMESTAMP)), x FROM x WHERE NOT x IN ('epoch', 'julian');
SELECT ERA(x) FROM x;
SELECT DATE_PART('era', x) FROM x;
SELECT DATE_PART('julian', CAST('0044-03-15 (BC) 12:00:00' AS TIMESTAMPTZ));
SELECT JULIAN(x) FROM x;
SELECT DATE_PART('julian', x) FROM x;
SELECT DATE_PART('timezone', x) FROM x;
SELECT DATE_PART('timezone_hour', x) FROM x;
SELECT DATE_PART('timezone_minute', x) FROM x;
SELECT DATE_PART('timezone', CAST('2021-07-31 00:00:00-07' AS TIMESTAMPTZ));
SELECT DATE_PART('timezone_hour', CAST('2021-07-31 00:00:00-07' AS TIMESTAMPTZ));
SELECT DATE_PART('timezone_minute', CAST('2021-07-31 00:00:00-07' AS TIMESTAMPTZ));
SELECT MAX(EXTRACT(YEAR FROM x)), MAX(EXTRACT(MONTH FROM x)), MAX(EXTRACT(DAY FROM x)), MAX(EXTRACT(DECADE FROM x)), MAX(EXTRACT(CENTURY FROM x)) FROM x;
SELECT DAYOFMONTH(x), DAYOFMONTH(CAST(x AS TIMESTAMP)) FROM x;
SELECT WEEKDAY(x), WEEKDAY(CAST(x AS TIMESTAMP)) FROM x;
SELECT WEEKOFYEAR(x), WEEKOFYEAR(CAST(x AS TIMESTAMP)) FROM x;
SELECT WEEKOFYEAR(x), WEEKOFYEAR(CAST(x AS TIMESTAMP)) FROM x;
SELECT x, DATE_PART('${partcode}', x) AS x, DATE_PART(['${partcode}'], x) AS x FROM x WHERE x IS DISTINCT FROM x['${partcode}'];
SELECT DATE_PART(['era', 'year', 'month', 'day', 'julian'], x), x FROM x ORDER BY 2;
SELECT DATE_PART(['hour', 'minute', 'microsecond'], x), x FROM x ORDER BY 2;
SELECT DATE_PART(['millennium', 'century', 'decade', 'quarter'], x), x FROM x ORDER BY 2;
SELECT DATE_PART(['weekday', 'isodow', 'doy'], x), x FROM x ORDER BY 2;
SELECT DATE_PART(['isoyear', 'week', 'yearweek'], x), x FROM x ORDER BY 2;
SELECT DATE_PART(['epoch', 'second', 'timezone', 'timezone_hour', 'timezone_minute'], x), x FROM x ORDER BY 2;
SELECT x, DATE_PART('${partcode}', x) AS x, DATE_PART(['${partcode}'], x) AS x FROM x WHERE x IS DISTINCT FROM x['${partcode}'];
SELECT x, DATE_PART(['year', 'month', 'day'], x) AS x FROM x WHERE x = 'day' ORDER BY 1;
SELECT DATE_PART(['duck', 'minute', 'microsecond', 'timezone'], x), x FROM x ORDER BY 2;
SELECT DATE_PART(['era', 'year', 'month', 'era'], x), x FROM x ORDER BY 2;
SELECT DATE_PART([], x) FROM x;
SELECT DATE_PART(['year', NULL, 'month'], x) FROM x;
WITH x AS (SELECT * FROM (VALUES (['year', 'month', 'day']), (['hour', 'minute', 'microsecond'])) AS x) SELECT DATE_PART(x, x) FROM x, x;
CREATE TABLE x AS SELECT CAST(x AS TIMESTAMPTZ) AS x FROM (VALUES ('1900-02-12'), ('1992-02-12'), ('2000-02-12')) AS x;
SELECT x, LAST_DAY(x), LAST_DAY(CAST(x AS TIMESTAMP)) FROM x;
SELECT x, LAST_DAY(x), LAST_DAY(CAST(x AS TIMESTAMP)) FROM x;
SELECT DAYNAME(x), MONTHNAME(x) FROM x;
SET x = 'Asia/Kathmandu';
SELECT DATE_PART(['timezone', 'timezone_hour', 'timezone_minute'], CAST('2021-12-22' AS TIMESTAMPTZ));
SET x = 'Canada/Newfoundland';
SELECT DATE_PART(['timezone', 'timezone_hour', 'timezone_minute'], CAST('2021-12-22' AS TIMESTAMPTZ));
SET x = 'hebrew';
SELECT YEAR(x), MONTH(x), MONTHNAME(x) FROM x AS x GROUP BY ALL ORDER BY ALL;
SET x = 'gregorian';
SET x = 'America/Los_Angeles';
SELECT DATESUB('month', CAST('2004-01-31 12:00:00-08' AS TIMESTAMPTZ), CAST('2004-02-29 13:00:00-08' AS TIMESTAMPTZ));
SELECT DATESUB('month', CAST('2004-01-29 12:00:00-08' AS TIMESTAMPTZ), CAST('2004-02-29 13:00:00-08' AS TIMESTAMPTZ));
SELECT DATESUB('month', CAST('2004-02-29 12:00:00-08' AS TIMESTAMPTZ), CAST('2004-03-31 13:00:00-08' AS TIMESTAMPTZ));
SELECT DATESUB('month', CAST('2004-02-29 13:00:00-08' AS TIMESTAMPTZ), CAST('2004-03-31 12:00:00-08' AS TIMESTAMPTZ));
SELECT DATESUB('quarter', CAST('2004-01-31 12:00:00-07' AS TIMESTAMPTZ), CAST('2004-04-30 13:00:00-07' AS TIMESTAMPTZ));
SELECT DATESUB('year', CAST('2004-02-29 12:00:00-08' AS TIMESTAMPTZ), CAST('2005-02-28 13:00:00-08' AS TIMESTAMPTZ));
SELECT DATESUB('isoyear', CAST('2004-02-29 12:00:00-08' AS TIMESTAMPTZ), CAST('2005-02-28 13:00:00-08' AS TIMESTAMPTZ));
SELECT DATESUB('decade', CAST('1994-02-28 12:00:00-08' AS TIMESTAMPTZ), CAST('2004-02-29 13:00:00-08' AS TIMESTAMPTZ));
SELECT DATESUB('century', CAST('1904-02-29 12:00:00-08' AS TIMESTAMPTZ), CAST('2005-02-28 13:00:00-08' AS TIMESTAMPTZ));
SELECT DATESUB('month', CAST('2004-01-31 13:00:00-08' AS TIMESTAMPTZ), CAST('2004-02-29 12:00:00-08' AS TIMESTAMPTZ));
SELECT DATESUB('month', CAST('2004-01-29 13:00:00-08' AS TIMESTAMPTZ), CAST('2004-02-29 12:00:00-08' AS TIMESTAMPTZ));
SELECT DATESUB('quarter', CAST('2004-01-31 13:00:00-08' AS TIMESTAMPTZ), CAST('2004-04-30 12:00:00-07' AS TIMESTAMPTZ));
SELECT DATESUB('year', CAST('2004-02-29 13:00:00-08' AS TIMESTAMPTZ), CAST('2005-02-28 12:00:00-08' AS TIMESTAMPTZ));
SELECT DATESUB('isoyear', CAST('2004-02-29 13:00:00-08' AS TIMESTAMPTZ), CAST('2005-02-28 12:00:00-08' AS TIMESTAMPTZ));
SELECT DATESUB('decade', CAST('1992-02-29 13:00:00-08' AS TIMESTAMPTZ), CAST('2002-02-28 12:00:00-08' AS TIMESTAMPTZ));
SELECT DATESUB('century', CAST('1904-02-29 13:00:00-08' AS TIMESTAMPTZ), CAST('2004-02-28 12:00:00-08' AS TIMESTAMPTZ));
SELECT DATESUB('millennium', CAST('1004-02-29 11:00:00-08' AS TIMESTAMPTZ), CAST('2004-02-29 11:00:00-08' AS TIMESTAMPTZ));
SELECT DATESUB('${datepart}', CAST('2004-01-31 12:00:00-08' AS TIMESTAMPTZ), CAST('2004-02-29 13:00:00-08' AS TIMESTAMPTZ));
SELECT DATESUB('${datepart}', CAST('2004-01-31 13:00:00-08' AS TIMESTAMPTZ), CAST('2004-02-29 12:00:00-08' AS TIMESTAMPTZ));
SELECT DATESUB('${datepart}', CAST('2004-01-31 12:00:00-08' AS TIMESTAMPTZ), CAST('2004-02-28 13:00:00-08' AS TIMESTAMPTZ));
SELECT DATESUB('${datepart}', CAST('2004-01-31 13:00:00-08' AS TIMESTAMPTZ), CAST('2004-02-28 12:00:00-08' AS TIMESTAMPTZ));
SELECT DATESUB('hour', CAST('2004-01-31 12:00:00-08' AS TIMESTAMPTZ), CAST('2004-02-01 13:05:00-08' AS TIMESTAMPTZ));
SELECT DATESUB('hour', CAST('2004-01-31 12:00:00-08' AS TIMESTAMPTZ), CAST('2004-02-01 12:00:00-08' AS TIMESTAMPTZ));
SELECT DATESUB('hour', CAST('2004-01-31 13:00:00-08' AS TIMESTAMPTZ), CAST('2004-02-01 12:05:00-08' AS TIMESTAMPTZ));
SELECT DATESUB('minute', CAST('2004-01-31 12:00:00-08' AS TIMESTAMPTZ), CAST('2004-02-01 13:05:00-08' AS TIMESTAMPTZ));
SELECT DATESUB('minute', CAST('2004-01-31 12:00:00-08' AS TIMESTAMPTZ), CAST('2004-02-01 12:00:00-08' AS TIMESTAMPTZ));
SELECT DATESUB('minute', CAST('2004-01-31 13:00:00-08' AS TIMESTAMPTZ), CAST('2004-02-01 12:05:00-08' AS TIMESTAMPTZ));
SELECT DATESUB('second', CAST('2004-01-31 12:00:00-08' AS TIMESTAMPTZ), CAST('2004-02-01 12:00:05-08' AS TIMESTAMPTZ));
SELECT DATESUB('second', CAST('2004-01-31 12:00:00-08' AS TIMESTAMPTZ), CAST('2004-02-01 12:00:00-08' AS TIMESTAMPTZ));
SELECT DATESUB('second', CAST('2004-01-31 12:00:05-08' AS TIMESTAMPTZ), CAST('2004-02-01 12:00:00-08' AS TIMESTAMPTZ));
SELECT DATESUB('millisecond', CAST('2004-01-31 12:00:00-08' AS TIMESTAMPTZ), CAST('2004-02-01 12:00:00.050-08' AS TIMESTAMPTZ));
SELECT DATESUB('millisecond', CAST('2004-01-31 12:00:00-08' AS TIMESTAMPTZ), CAST('2004-02-01 12:00:00-08' AS TIMESTAMPTZ));
SELECT DATESUB('millisecond', CAST('2004-01-31 12:00:00.050-08' AS TIMESTAMPTZ), CAST('2004-02-01 12:00:00-08' AS TIMESTAMPTZ));
SELECT DATESUB('microsecond', CAST('2004-01-31 12:00:00-08' AS TIMESTAMPTZ), CAST('2004-02-01 12:00:00.000050-08' AS TIMESTAMPTZ));
SELECT DATESUB('microsecond', CAST('2004-01-31 12:00:00-08' AS TIMESTAMPTZ), CAST('2004-02-01 12:00:00-08' AS TIMESTAMPTZ));
SELECT DATESUB('microsecond', CAST('2004-01-31 12:00:00.000050-08' AS TIMESTAMPTZ), CAST('2004-02-01 12:00:00-08' AS TIMESTAMPTZ));
SELECT DATESUB('${specifier}', CAST('${lspecial}' AS TIMESTAMPTZ), CAST('${rspecial}' AS TIMESTAMPTZ));
SELECT DATESUB('${specifier}', CAST('${rspecial}' AS TIMESTAMPTZ), CAST('${lspecial}' AS TIMESTAMPTZ));
CREATE TABLE x AS SELECT CAST('2004-01-31 12:00:00-08' AS TIMESTAMPTZ) AS x, CAST('2004-02-29 13:05:00-08' AS TIMESTAMPTZ) AS x;
CREATE TABLE x AS SELECT x FROM (VALUES ('year'), ('quarter'), ('month'), ('day'), ('dayofyear'), ('hour'), ('minute'), ('second'), ('millisecond'), ('microsecond'), ('decade'), ('century'), ('millennium'), ('week'), ('yearweek'), ('isoyear')) AS x;
SELECT DATESUB(x, x, x) + DATESUB(x, x, x), x FROM x, x;
SELECT DATESUB(x, x, x) + DATESUB(x, x, x), x FROM x, x;
SET x = 'gregorian';
SET x = 'America/Los_Angeles';
CREATE TABLE x (x TIMESTAMPTZ, x TEXT);
INSERT INTO x VALUES ('-infinity', 'year'), ('1992-02-02 02:02:03.123456-08', 'millennium'), ('1992-02-02 02:02:03.123456-08', 'century'), ('1992-02-02 02:02:03.123456-08', 'decade'), ('1992-02-02 02:02:03.123456-08', 'year'), ('1992-02-02 02:02:03.123456-08', 'quarter'), ('1992-02-02 02:02:03.123456-08', 'month'), ('1992-02-02 02:02:03.123456-08', 'week'), ('1992-02-02 02:02:03.123456-08', 'day'), ('1992-02-02 02:02:03.123456-08', 'hour'), ('1992-02-02 02:02:03.123456-08', 'minute'), ('1992-02-02 02:02:03.123456-08', 'second'), ('1992-02-02 02:02:03.123456-08', 'milliseconds'), ('1992-02-02 02:02:03.123456-08', 'microseconds'), ('infinity', 'month');
SELECT DATE_TRUNC('NULL', CAST(NULL AS TIMESTAMPTZ)) FROM x LIMIT 3;
SELECT DATE_TRUNC('SECOND', CAST(NULL AS TIMESTAMPTZ)) FROM x LIMIT 3;
SELECT DATE_TRUNC('NULL', x) FROM x LIMIT 3;
SELECT DATE_TRUNC('MINUTE', CAST('1992-02-02 04:03:02Z' AS TIMESTAMPTZ)) FROM x LIMIT 1;
SELECT DATE_TRUNC('SECOND', x), x FROM x;
SELECT DATE_TRUNC('SECOND', x), x FROM x;
SELECT DATE_TRUNC('WEEK', CAST('2019-01-06 04:03:02-08' AS TIMESTAMPTZ)) FROM x LIMIT 1;
SELECT DATE_TRUNC('YEARWEEK', CAST('2019-01-06 04:03:02-08' AS TIMESTAMPTZ)) FROM x LIMIT 1;
SELECT DATE_TRUNC('WEEK', CAST('2020-01-01 04:03:02-08' AS TIMESTAMPTZ)) FROM x LIMIT 1;
SELECT DATE_TRUNC('YEARWEEK', CAST('2020-01-01 04:03:02-08' AS TIMESTAMPTZ)) FROM x LIMIT 1;
SELECT DATE_TRUNC('QUARTER', CAST('2020-12-02 04:03:02-08' AS TIMESTAMPTZ)) FROM x LIMIT 1;
SELECT DATE_TRUNC('QUARTER', CAST('2019-01-06 04:03:02-08' AS TIMESTAMPTZ)) FROM x LIMIT 1;
SELECT DATE_TRUNC('MILLENNIUM', CAST('1996-01-06 04:03:02-08' AS TIMESTAMPTZ)) FROM x LIMIT 1;
SELECT DATE_TRUNC('CENTURY', CAST('2019-01-06 04:03:02-08' AS TIMESTAMPTZ)) FROM x LIMIT 1;
SELECT DATE_TRUNC('DECADE', CAST('2019-01-06 04:03:02-08' AS TIMESTAMPTZ)) FROM x LIMIT 1;
SELECT DATE_TRUNC('YEAR', CAST('2019-01-06 04:03:02-08' AS TIMESTAMPTZ)) FROM x LIMIT 1;
SELECT DATE_TRUNC('DAY', CAST('2019-01-06 04:03:02-08' AS TIMESTAMPTZ)) FROM x LIMIT 1;
SELECT DATE_TRUNC('HOUR', CAST('2019-01-06 04:03:02-08' AS TIMESTAMPTZ)) FROM x LIMIT 1;
SELECT DATE_TRUNC('MILLISECONDS', CAST('2019-01-06 04:03:02.123456-08' AS TIMESTAMPTZ)) FROM x LIMIT 1;
SELECT DATE_TRUNC('MICROSECONDS', CAST('2019-01-06 04:03:02.123456-08' AS TIMESTAMPTZ));
SELECT DATE_TRUNC('EPOCH', CAST('2019-01-06 04:03:02.5-08' AS TIMESTAMPTZ)) FROM x LIMIT 1;
SELECT x, DATE_TRUNC('${DAYPART}', x) FROM (SELECT DISTINCT x FROM x) AS x;
SELECT x, DATE_TRUNC('ISOYEAR', CAST(x AS TIMESTAMPTZ)) FROM x AS x;
SELECT DATE_TRUNC('DUCK', CAST('2019-01-06 04:03:02-08' AS TIMESTAMPTZ)) FROM x LIMIT 1;
SET x = 'CET';
SELECT DATE_TRUNC('MINUTE', CAST('2022-10-30 02:17:00+02' AS TIMESTAMPTZ));
SELECT DATE_TRUNC('DAY', CAST('2024-05-06 16:09:28+05:00' AS TIMESTAMPTZ)) >= CAST('2024-05-06 17:19:18+05:20' AS DATE) AS x;
PRAGMA x;
SET x = 'gregorian';
SET x = 'America/Los_Angeles';
CREATE TABLE x (x TIMESTAMPTZ);
INSERT INTO x VALUES ('1001-03-15 (BC) 20:38:40+00'), ('0044-03-15 (BC) 20:38:40+00'), ('1962-07-31 12:20:48.123456+00'), ('1969-01-01 01:03:20.45432+00'), ('1992-01-01 01:01:01.400+00'), ('1992-01-01 01:01:02.200+00'), ('1992-01-01 01:01:02.400+00'), ('1993-08-14 08:22:33+00'), ('1993-08-14 08:22:33.42+00'), ('2001-04-20 14:42:11.0+00'), ('2001-04-20 14:42:11.123+00'), ('2004-01-31 12:00:00.000050+00'), ('2004-01-31 12:00:00.050+00'), ('2004-02-01 12:00:00.000050+00'), ('2004-02-01 12:00:00.050+00'), ('2004-02-29 13:05:47.123456+00'), ('2008-01-01 00:00:01.5+00'), ('2008-01-01 00:00:01.594+00'), ('2008-01-01 00:00:01.794+00'), ('2008-01-01 00:00:01.88926+00'), ('2008-01-01 00:00:01.894+00'), ('2008-01-01 00:00:01.98926+00'), ('2008-01-01 00:00:01.99926+00'), ('2008-01-01 00:00:11.1+00'), ('2019-01-06 04:03:02.123456+00'), ('2019-01-06 04:03:02.5+00'), ('2020-01-01 00:00:01.88926+00'), ('2020-12-31 21:25:58.745232+00'), ('2021-04-15 14:55:17.915+00'), ('2021-04-15 14:55:17.915000+00'), ('2021-05-02 12:11:49.5+00'), ('2021-12-01 13:54:48.123456+00'), (NULL);
SELECT ERA(x), YEAR(x), x FROM x;
SELECT x, x FROM (SELECT x, MAKE_TIMESTAMPTZ(YEARTZ(x), MONTH(x), DAY(x), HOUR(x), MINUTE(x), MICROSECOND(x) / 1000000.0) AS x FROM x) AS x WHERE x IS DISTINCT FROM x ORDER BY 1;
SELECT x, x FROM (SELECT x, MAKE_TIMESTAMPTZ(YEARTZ(x), NULL, DAY(x), HOUR(x), MINUTE(x), MICROSECOND(x) / 1000000.0) AS x FROM x) AS x WHERE NOT x IS NULL;
SELECT MAKE_TIMESTAMPTZ(2021, 13, 1, 0, 0, 0) AS x;
SELECT MAKE_TIMESTAMPTZ(2021, -1, 1, 0, 0, 0) AS x;
SELECT MAKE_TIMESTAMPTZ(0), MAKE_TIMESTAMPTZ(1684509234845000);
SELECT MAKE_TIMESTAMPTZ(2021, 12, 30, 10, 12, 4.123, 'America/New_York');
SELECT MAKE_TIMESTAMPTZ(NULL, 12, 30, 10, 12, 4.123, 'America/New_York');
SELECT MAKE_TIMESTAMPTZ(2021, NULL, 30, 10, 12, 4.123, 'America/New_York');
SELECT MAKE_TIMESTAMPTZ(2021, 12, NULL, 10, 12, 4.123, 'America/New_York');
SELECT MAKE_TIMESTAMPTZ(2021, 12, 30, NULL, 12, 4.123, 'America/New_York');
SELECT MAKE_TIMESTAMPTZ(2021, 12, 30, 10, NULL, 4.123, 'America/New_York');
SELECT MAKE_TIMESTAMPTZ(2021, 12, 30, 10, 12, NULL, 'America/New_York');
SELECT MAKE_TIMESTAMPTZ(2021, 12, 30, 10, 12, 4.123, NULL);
CREATE TABLE x AS (SELECT x, x FROM (VALUES (1, 'America/New_York'), (2, 'America/Los_Angeles'), (3, 'Europe/Rome'), (4, 'Asia/Kathmandu'), (5, 'Canada/Newfoundland'), (7, 'Pacific/Auckland'), (8, 'Asia/Hong_Kong'), (12, 'US/Hawaii')) AS x);
CREATE TABLE x AS (SELECT x, YEARTZ(x) AS x, MONTH(x) AS x, DAY(x) AS x, HOUR(x) AS x, MINUTE(x) AS x, MICROSECOND(x) / 1000000.0 AS x, x FROM x AS x LEFT JOIN x AS x ON (MONTH(x.x) = x.x));
SELECT * FROM x;
SELECT x, MAKE_TIMESTAMPTZ(x, x, x, x, x, x, 'America/New_York'), MAKE_TIMESTAMPTZ(x, x, x, x, x, x) FROM x;
SELECT x, MAKE_TIMESTAMPTZ(x, NULL, x, x, x, x, x) AS x FROM x WHERE NOT x IS NULL;
SELECT x, MAKE_TIMESTAMPTZ(x, x, x, x, x, x, NULL) AS x FROM x WHERE NOT x IS NULL;
SELECT x, x, MAKE_TIMESTAMPTZ(x, x, x, x, x, x, x) FROM x;
SELECT x, MAKE_TIMESTAMPTZ(x, x, x, x, x, x, 'Europe/Duck') AS x FROM x;
SELECT x, CAST(x AS DATE) FROM x;
WITH x AS (SELECT * EXCLUDE (x, x, x) FROM x) SELECT MAKE_TIMESTAMPTZ(CAST(CENTURY(CAST(x."x" AS INTERVAL)) AS BIGINT), CAST(x."x" AS BIGINT), CAST(x."x" AS BIGINT), CAST(x."x" AS BIGINT), CAST(x."x" AS BIGINT), CAST(TXID_CURRENT() AS BIGINT), 'UTC') FROM x AS x;
SELECT MAKE_TIMESTAMPTZ(9223372036854775807);
SELECT MAKE_TIMESTAMPTZ(294248, 1, 10, 4, 0, 54.775807);
SET x = 'gregorian';
SET x = 'America/Los_Angeles';
PRAGMA x;
CREATE TABLE x AS SELECT CAST(x AS TIMESTAMPTZ) AS x FROM (VALUES ('-infinity'), ('0044-03-13 (BC) 10:33:41.987654+01'), ('1962-07-31 12:20:48.123456+00'), ('epoch'), ('2021-01-01 00:00:00+00'), ('2021-02-02 00:00:00+00'), ('2021-11-26 10:15:13.123456+00'), ('2021-11-15 02:30:00-08'), ('2021-11-15 02:30:00-07'), ('2021-12-25 00:00:00+02'), ('infinity'), (NULL)) AS x;
SELECT CAST(x AS TEXT) FROM x;
SELECT x, STRFTIME(x, '%Y-%m-%d %H:%M:%S.%f %Z') FROM x;
SELECT x, STRFTIME(x, '%Z %Y-%m-%d %H:%M:%S.%f') FROM x;
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('%Y-%m-%d %H:%M:%S.%f %Z'), ('%Y-%m-%d %H:%M:%S.%f'), ('%Y'), ('(%Y)'), ('%% %Y %%'), ('%%%%%% %Y %%%%%%'), ('%d/%m/%Y'), ('%Y %Y %Y %Y'), ('%d/%m/%Y'), ('hello world'), ('%g'), ('%a'), ('%A'), ('%w'), ('%d'), ('%-d'), ('%b'), ('%h'), ('%B'), ('%m'), ('%-m'), ('%y'), ('%-y'), ('%-y'), ('%Y'), ('%H'), ('%-H'), ('%I'), ('%-I'), ('%p'), ('%M'), ('%-M'), ('%S'), ('%-S'), ('%f'), ('%z'), ('%Z'), ('%j'), ('%-j'), ('%U'), ('%W'), ('%c'), ('XX%cXX'), ('%x'), ('%X'), ('XX%cXX%xXX%XXX'), ('%Y'), ('%Y'), ('%y'), ('%y'), ('%V'), ('%G'), ('%u'), (NULL);
SELECT STRFTIME(CAST('2022-04-07 18:12:15.123456+00' AS TIMESTAMPTZ), x) FROM x;
SET x = 'Asia/Kathmandu';
SELECT x, STRFTIME(x, '%Y-%m-%d %H:%M:%S.%f %Z') FROM x;
SELECT x, STRFTIME(x, '%Y-%m-%d %H:%M:%S.%f %z') FROM x;
SET x = 'Canada/Newfoundland';
SELECT x, STRFTIME(x, '%Y-%m-%d %H:%M:%S.%f %Z') FROM x;
SELECT x, STRFTIME(x, '%Y-%m-%d %H:%M:%S.%f %z') FROM x;
SELECT x, STRFTIME(x, '%C') FROM x;
PRAGMA x = 'Asia/Baghdad';
PRAGMA x = 'Asia/Baghdad';
PRAGMA x = 'Pacific/Truk';
SELECT STRFTIME(CAST('-204873-8-9 6:35:55 America/North_Dakota/Beulah' AS TIMESTAMPTZ), 'x%Z');
SET x = 'gregorian';
SET x = 'America/Los_Angeles';
PRAGMA x;
SELECT STRPTIME('2022-03-05 17:59:17.877 CST', '%Y-%m-%d %H:%M:%S.%g %Z');
SELECT STRPTIME('2022-03-05 17:59:17.877 CST', NULL);
SELECT STRPTIME(NULL, '%Y-%m-%d %H:%M:%S.%g %Z');
SELECT STRPTIME('2022-03-05 17:59:17.123456 CST', '%Y-%m-%d %H:%M:%S.%f %Z');
SELECT STRPTIME('2022-03-05 17:59:17.123456789 CST', '%Y-%m-%d %H:%M:%S.%n %Z');
SELECT STRPTIME('2022-03-05 17:59:17.123456789 CST', '%Y-%m-%d %H:%M:%S.%n %Z');
SELECT STRPTIME('2022-03-05 17:59:17.123456789 CST', '%Y-%m-%d %H:%M:%S.%n %Z');
SELECT STRPTIME('2022-03-05 17:59:17.123456789 CST', '%Y-%m-%d %H:%M:%S.%n %Z');
SELECT CAST('1582-01-01 10:33:41+01' AS TIMESTAMPTZ);
SELECT CAST('1582-06-01 10:40:43+01' AS TIMESTAMPTZ);
SELECT CAST('0044-03-13 (BC) 10:33:41+01' AS TIMESTAMPTZ);
SELECT CAST('1582-10-10' AS TIMESTAMPTZ) AS x;
CREATE TABLE x AS (SELECT * FROM (VALUES ('Etc/GMT-14'), ('NZ-CHAT'), ('Pacific/Auckland'), ('Pacific/Enderbury'), ('Australia/LHI'), ('Australia/Melbourne'), ('Pacific/Efate'), ('Australia/Darwin'), ('Asia/Tokyo'), ('Australia/Eucla'), ('Asia/Shanghai'), ('Asia/Novosibirsk'), ('Asia/Yangon'), ('Asia/Omsk'), ('Asia/Kathmandu'), ('Asia/Colombo'), ('Asia/Oral'), ('Asia/Kabul'), ('Europe/Astrakhan'), ('Asia/Tehran'), ('Asia/Kuwait'), ('Asia/Nicosia'), ('Europe/Budapest'), ('Etc/GMT-0'), ('Atlantic/Azores'), ('America/Cayenne'), ('America/Nuuk'), ('CNT'), ('America/Martinique'), ('America/Louisville'), ('America/Rainy_River'), ('America/Shiprock'), ('Mexico/BajaNorte'), ('America/Sitka'), ('Pacific/Marquesas'), ('Pacific/Johnston'), ('Pacific/Niue'), ('Etc/GMT+12')) AS x);
CREATE TABLE x AS (SELECT * FROM (VALUES ('Etc/GMT-14'), ('NZ-CHAT'), ('NZ'), ('Pacific/Enderbury'), ('Australia/Hobart'), ('Australia/LHI'), ('Pacific/Efate'), ('Australia/Adelaide'), ('Etc/GMT-9'), ('Australia/Eucla'), ('CTT'), ('Asia/Phnom_Penh'), ('Asia/Yangon'), ('Asia/Thimbu'), ('Asia/Kathmandu'), ('IST'), ('Asia/Qyzylorda'), ('Asia/Kabul'), ('Europe/Samara'), ('Iran'), ('EAT'), ('CAT'), ('Europe/Bratislava'), ('GMT'), ('Atlantic/Azores'), ('America/Cayenne'), ('America/Nuuk'), ('CNT'), ('PRT'), ('America/Panama'), ('America/Rankin_Inlet'), ('Canada/Yukon'), ('PST'), ('America/Nome'), ('Pacific/Marquesas'), ('Pacific/Johnston'), ('Pacific/Niue'), ('Etc/GMT+12')) AS x);
CREATE TABLE x AS (SELECT * FROM (VALUES ('Etc/GMT-14'), ('NZ-CHAT'), ('NZ'), ('Pacific/Enderbury'), ('Australia/Hobart'), ('Australia/LHI'), ('Pacific/Efate'), ('Australia/Adelaide'), ('Etc/GMT-9'), ('Australia/Eucla'), ('CTT'), ('Asia/Phnom_Penh'), ('Asia/Yangon'), ('Asia/Thimbu'), ('Asia/Kathmandu'), ('IST'), ('Asia/Qyzylorda'), ('Asia/Kabul'), ('Europe/Samara'), ('Iran'), ('EAT'), ('CAT'), ('Europe/Bratislava'), ('GMT'), ('Atlantic/Azores'), ('America/Cayenne'), ('America/Nuuk'), ('CNT'), ('PRT'), ('America/Panama'), ('America/Rankin_Inlet'), ('Canada/Yukon'), ('PST'), ('America/Nome'), ('Pacific/Marquesas'), ('Pacific/Johnston'), ('Pacific/Niue'), ('Etc/GMT+12')) AS x);
CREATE TABLE x AS (SELECT * FROM (VALUES ('Etc/GMT-14'), ('NZ-CHAT'), ('NZ'), ('Pacific/Enderbury'), ('Australia/Hobart'), ('Australia/LHI'), ('Pacific/Efate'), ('Australia/Adelaide'), ('Etc/GMT-9'), ('Australia/Eucla'), ('CTT'), ('Asia/Phnom_Penh'), ('Asia/Yangon'), ('Asia/Thimbu'), ('Asia/Kathmandu'), ('IST'), ('Asia/Qyzylorda'), ('Asia/Kabul'), ('Europe/Samara'), ('Iran'), ('EAT'), ('CAT'), ('Europe/Bratislava'), ('GMT'), ('Atlantic/Azores'), ('America/Cayenne'), ('America/Nuuk'), ('CNT'), ('PRT'), ('America/Panama'), ('America/Rankin_Inlet'), ('Canada/Yukon'), ('PST'), ('America/Nome'), ('Pacific/Marquesas'), ('Pacific/Johnston'), ('Pacific/Niue'), ('Etc/GMT+12')) AS x);
CREATE TABLE x AS (SELECT * FROM (VALUES ('Etc/GMT-14'), ('NZ-CHAT'), ('NZ'), ('Pacific/Enderbury'), ('Australia/Hobart'), ('Australia/LHI'), ('Pacific/Efate'), ('Australia/Adelaide'), ('Etc/GMT-9'), ('Australia/Eucla'), ('CTT'), ('Asia/Phnom_Penh'), ('Asia/Yangon'), ('Asia/Thimbu'), ('Asia/Kathmandu'), ('IST'), ('Asia/Qyzylorda'), ('Asia/Kabul'), ('Europe/Samara'), ('Iran'), ('EAT'), ('CAT'), ('Europe/Bratislava'), ('GMT'), ('Atlantic/Azores'), ('America/Cayenne'), ('America/Nuuk'), ('CNT'), ('PRT'), ('America/Panama'), ('America/Rankin_Inlet'), ('Canada/Yukon'), ('PST'), ('America/Nome'), ('Pacific/Marquesas'), ('Pacific/Johnston'), ('Pacific/Niue'), ('Etc/GMT+12')) AS x);
CREATE TABLE x AS (SELECT * FROM (VALUES ('Etc/GMT-14'), ('NZ-CHAT'), ('NZ'), ('Pacific/Enderbury'), ('Australia/Hobart'), ('Australia/LHI'), ('Pacific/Efate'), ('Australia/Adelaide'), ('Etc/GMT-9'), ('Australia/Eucla'), ('CTT'), ('Asia/Phnom_Penh'), ('Asia/Yangon'), ('Asia/Thimbu'), ('Asia/Kathmandu'), ('IST'), ('Asia/Qyzylorda'), ('Asia/Kabul'), ('Europe/Samara'), ('Iran'), ('EAT'), ('CAT'), ('Europe/Bratislava'), ('GMT'), ('Atlantic/Azores'), ('America/Cayenne'), ('America/Nuuk'), ('CNT'), ('PRT'), ('America/Panama'), ('America/Rankin_Inlet'), ('Canada/Yukon'), ('PST'), ('America/Nome'), ('Pacific/Marquesas'), ('Pacific/Johnston'), ('Pacific/Niue'), ('Etc/GMT+12')) AS x);
CREATE TABLE x AS (SELECT * FROM (VALUES ('Etc/GMT-14'), ('NZ-CHAT'), ('NZ'), ('Pacific/Enderbury'), ('Australia/Hobart'), ('Australia/LHI'), ('Pacific/Efate'), ('Australia/Adelaide'), ('Etc/GMT-9'), ('Australia/Eucla'), ('CTT'), ('Asia/Phnom_Penh'), ('Asia/Yangon'), ('Asia/Thimbu'), ('Asia/Kathmandu'), ('IST'), ('Asia/Qyzylorda'), ('Asia/Kabul'), ('Europe/Samara'), ('Iran'), ('EAT'), ('CAT'), ('Europe/Bratislava'), ('GMT'), ('Atlantic/Azores'), ('America/Cayenne'), ('America/Nuuk'), ('CNT'), ('PRT'), ('America/Panama'), ('America/Rankin_Inlet'), ('Canada/Yukon'), ('PST'), ('America/Nome'), ('Pacific/Marquesas'), ('Pacific/Johnston'), ('Pacific/Niue'), ('Etc/GMT+12')) AS x);
CREATE TABLE x AS (SELECT * FROM (VALUES ('Etc/GMT-14'), ('NZ-CHAT'), ('NZ'), ('Pacific/Enderbury'), ('Australia/Hobart'), ('Australia/LHI'), ('Pacific/Efate'), ('Australia/Adelaide'), ('Etc/GMT-9'), ('Australia/Eucla'), ('CTT'), ('Asia/Phnom_Penh'), ('Asia/Yangon'), ('Asia/Thimbu'), ('Asia/Kathmandu'), ('IST'), ('Asia/Qyzylorda'), ('Asia/Kabul'), ('Europe/Samara'), ('Iran'), ('EAT'), ('CAT'), ('Europe/Bratislava'), ('GMT'), ('Atlantic/Azores'), ('America/Cayenne'), ('America/Nuuk'), ('CNT'), ('PRT'), ('America/Panama'), ('America/Rankin_Inlet'), ('Canada/Yukon'), ('PST'), ('America/Nome'), ('Pacific/Marquesas'), ('Pacific/Johnston'), ('Pacific/Niue'), ('Etc/GMT+12')) AS x);
CREATE TABLE x AS (SELECT * FROM (VALUES ('Etc/GMT-14'), ('NZ-CHAT'), ('NZ'), ('Pacific/Enderbury'), ('Australia/Hobart'), ('Australia/LHI'), ('Pacific/Efate'), ('Australia/Adelaide'), ('Etc/GMT-9'), ('Australia/Eucla'), ('CTT'), ('Asia/Phnom_Penh'), ('Asia/Yangon'), ('Asia/Thimbu'), ('Asia/Kathmandu'), ('IST'), ('Asia/Qyzylorda'), ('Asia/Kabul'), ('Europe/Samara'), ('Iran'), ('EAT'), ('CAT'), ('Europe/Bratislava'), ('GMT'), ('Atlantic/Azores'), ('America/Cayenne'), ('America/Nuuk'), ('CNT'), ('PRT'), ('America/Panama'), ('America/Rankin_Inlet'), ('Canada/Yukon'), ('PST'), ('America/Nome'), ('Pacific/Marquesas'), ('Pacific/Johnston'), ('Pacific/Niue'), ('Etc/GMT+12')) AS x);
SELECT TRY_STRPTIME('2022-03-05 17:59:17.877 ' || x, '%m/%d/%Y  %H:%M:%S.%g %Z') AS x, x FROM x WHERE NOT x IS NULL ORDER BY ALL;
CREATE TABLE x (x TEXT, x TEXT);
INSERT INTO x VALUES ('2022-03-05 17:59:17.877 CST', '%Y-%m-%d %H:%M:%S.%g %Z'), ('2022-03-05 17:59:17.877', '%Y-%m-%d %H:%M:%S.%g');
SELECT STRPTIME(x, x) FROM x;
SELECT STRPTIME('2022-03-05 17:59:17.877 CST', '%C');
SELECT STRPTIME('2022-03-05 17:59:17.877 CST', '%Y-%m-%d %H:%M:%S.%g');
SELECT CAST('fnord' AS TIMESTAMPTZ);
SELECT TRY_CAST('fnord' AS TIMESTAMPTZ);
SELECT CAST('2022-03-05 17:59:17.123456 CST' AS TIMESTAMPTZ);
SELECT CAST('infinity' AS TIMESTAMPTZ);
SELECT CAST('-infinity' AS TIMESTAMPTZ);
SELECT CAST('epoch' AS TIMESTAMPTZ);
SELECT CAST('294247-01-10 04:00:54.7758' AS TIMESTAMPTZ);
SELECT TRY_STRPTIME('2015-01-05 00:00:00 FNORD', '%Y-%m-%d %H:%M:%S %Z');
SET x = 'gregorian';
SET x = 'America/Los_Angeles';
CREATE TABLE x (x INTERVAL, x TIMESTAMPTZ, x INTERVAL, x TIMESTAMPTZ, x TEXT);
INSERT INTO x VALUES ('10 days', '-infinity', '0 days', '1970-01-05 00:00:00+00', 'UTC'), ('333 microseconds', '1907-11-20 04:00:00+08', '0 microseconds', '1970-03-06 00:00:00+00', 'UTC'), ('333 microseconds', '1970-01-01 00:00:00+00', '444 microseconds', '1970-01-05 00:05:05.006006+03', 'America/Los_Angeles'), ('333 microseconds', '1979-04-10 02:02:05.003003-03', '-444 microseconds', '1962-12-10 00:05:05.006006-03', 'America/Los_Angeles'), ('333 milliseconds', '1981-09-30 02:02:06.003003+00', '0 milliseconds', '1970-02-05 00:00:00+00', 'UTC'), ('333 milliseconds', '1982-06-15 02:02:07.003003+04', '444 milliseconds', '1970-11-15 00:05:05.006006+04', 'Asia/Aden'), ('333 milliseconds', '1985-02-20 02:02:08.003003-04', '-444 milliseconds', '1980-08-05 00:05:05.006006-04', 'Asia/Aden'), ('333 seconds', '1989-06-08 02:02:09.003003+00', '0 seconds', '1970-11-25 00:00:00+00', 'UTC'), ('333 seconds', '1990-07-11 02:02:10.003003+02', '444 seconds', '1970-04-10 00:05:05.006006+02', 'Pacific/Guam'), ('333 seconds', '1991-05-12 02:02:11.003003-02', '-444 seconds', '1971-01-05 00:05:05.006006-02', 'Pacific/Guam'), ('333 minutes', '1992-10-17 02:02:12.003003+00', '0 minutes', '1950-04-24 00:00:00+00', 'UTC'), ('333 minutes', '1994-12-05 02:02:13.003003+05', '444 minute', '1970-06-09 00:05:05.006006+05', 'Europe/Berlin'), ('333 minutes', '1997-01-02 02:02:14.003003-05', '-444 minute', '1970-07-06 00:05:05.006006-05', 'Europe/Berlin'), ('333 hours', '1999-04-26 02:02:15.003003+00', '0 hours', '1970-02-05 00:00:00+00', 'UTC'), ('333 hours', '2000-01-01 00:00:00+00', '444 hours', '1970-01-05 00:05:05.006006+01', 'Europe/London'), ('333 hours', '2000-01-03 00:00:00+00', '-444 hours', '1970-03-15 00:05:05.006006-01', 'Europe/London'), ('333 hours', '2000-03-26 02:00:00+01', '0 hours', '1980-10-05 00:00:00+00', 'Europe/London'), ('333 hours', '2000-04-02 03:00:00-07', '0 hours', '1990-05-20 00:00:00+00', 'Europe/London'), ('333 hours', '2000-10-29 01:00:00+00', '0 hours', '2010-07-27 00:00:00+00', 'Europe/London'), ('333 hours', '2000-10-29 01:00:00-08', '0 hours', '2010-07-27 00:00:00+00', 'Europe/London'), ('10 days', '2008-12-31 23:59:59.999999+00', '0 days', '1970-02-27 00:00:00+00', 'UTC'), ('1 week', '2010-05-03 02:02:19.003003+00', '0 days', '1970-07-25 00:00:00+00', 'UTC'), ('10 days', '2013-08-19 02:02:20.003003+02', '2 days 4 hours', '2003-03-24 00:05:05.006006+02', 'Asia/Kolkata'), ('10 days', '2014-07-15 02:02:21.003003-02', '-2 days 4 hours', '1970-04-12 00:05:05.006006-02', 'Asia/Kolkata'), ('2 months', '2016-03-21 02:02:22.003003+00', '0 months', '1970-11-05 00:00:00+00', 'UTC'), ('2 months', '2018-02-01 02:02:23.003003+09', '1 month 1 week', '1970-05-07 00:05:05.006006+09', 'Australia/Sydney'), ('2 months', '2019-09-30 02:02:24.003003-09', '-1 month 1 week', '1969-10-09 00:05:05.006006-09', 'Australia/Sydney'), ('2 year', '2020-03-20 02:02:25.003003+11', '6 months', '2032-06-29 00:05:05.006006+11', 'Asia/Yekaterinburg'), ('2 year', '2022-07-20 02:02:26.003003-11', '-6 months', '1969-11-14 00:05:05.006006-11', 'Asia/Yekaterinburg'), ('10 days', '2024-08-12 02:02:26.003003+07', '1 year', '-infinity', 'Asia/Tokyo'), ('10 days', '2032-12-18 02:02:26.003003-07', '-1 year', 'infinity', 'Asia/Tokyo'), ('10 days', 'infinity', '0 days', '1970-01-01 00:00:00+00', 'UTC');
SELECT x, TIME_BUCKET(CAST('56 seconds' AS INTERVAL), x) FROM x;
SELECT x, TIME_BUCKET(CAST('3 days' AS INTERVAL), x) FROM x;
SELECT x, TIME_BUCKET(CAST('3 years' AS INTERVAL), x) FROM x;
SELECT x, TIME_BUCKET(CAST(NULL AS INTERVAL), x) FROM x;
SELECT TIME_BUCKET(CAST('3 years' AS INTERVAL), CAST(NULL AS TIMESTAMPTZ)) FROM x;
SELECT x, x, TIME_BUCKET(x, x) FROM x;
SELECT x, TIME_BUCKET(CAST('4 seconds' AS INTERVAL), x, CAST('2 seconds' AS INTERVAL)) FROM x;
SELECT x, TIME_BUCKET(CAST('4 days' AS INTERVAL), x, CAST('6 hours' AS INTERVAL)) FROM x;
SELECT x, TIME_BUCKET(CAST('3 months' AS INTERVAL), x, CAST('6 days 11 hours' AS INTERVAL)) FROM x;
SELECT x, TIME_BUCKET(CAST(NULL AS INTERVAL), x, CAST('2 seconds' AS INTERVAL)) FROM x;
SELECT TIME_BUCKET(CAST('3 months' AS INTERVAL), CAST(NULL AS TIMESTAMPTZ), CAST('2 seconds' AS INTERVAL)) FROM x;
SELECT x, TIME_BUCKET(CAST('3 months' AS INTERVAL), x, CAST(NULL AS INTERVAL)) FROM x;
SELECT x, x, x, TIME_BUCKET(x, x, SHIFT) FROM x;
SELECT x, TIME_BUCKET(CAST('11 seconds' AS INTERVAL), x, CAST('1990-12-10 08:08:10+03' AS TIMESTAMPTZ)) FROM x;
SELECT x, TIME_BUCKET(CAST('11 days' AS INTERVAL), x, CAST('1990-01-06 08:08:10+09' AS TIMESTAMPTZ)) FROM x;
SELECT x, TIME_BUCKET(CAST('7 months' AS INTERVAL), x, CAST('1990-01-06 08:08:10+01' AS TIMESTAMPTZ)) FROM x;
SELECT x, TIME_BUCKET(CAST(NULL AS INTERVAL), x, CAST('1990-01-06 08:08:10' AS TIMESTAMPTZ)) FROM x;
SELECT TIME_BUCKET(CAST('7 months' AS INTERVAL), CAST(NULL AS TIMESTAMPTZ), CAST('1990-01-06 08:08:10' AS TIMESTAMPTZ)) FROM x;
SELECT x, TIME_BUCKET(CAST('7 months' AS INTERVAL), x, CAST(NULL AS TIMESTAMPTZ)) FROM x;
SELECT x, x, x, TIME_BUCKET(x, x, ORIGIN) FROM x;
SELECT x, TIME_BUCKET(CAST('11 seconds' AS INTERVAL), x, x / x) FROM x;
SELECT x, TIME_BUCKET(CAST('5 months' AS INTERVAL), x, x / x) FROM x;
SELECT x, TIME_BUCKET(CAST('11 seconds' AS INTERVAL), x, x / x) FROM x;
SELECT x, TIME_BUCKET(CAST('5 months' AS INTERVAL), x, x / x) FROM x;
SELECT x, TIME_BUCKET(CAST('11 seconds' AS INTERVAL), x, x / x) FROM x;
SELECT x, TIME_BUCKET(CAST(NULL AS INTERVAL), x, x / x) FROM x;
SELECT TIME_BUCKET(CAST('11 seconds' AS INTERVAL), CAST(NULL AS TIMESTAMPTZ), x / x) FROM x;
SELECT x, TIME_BUCKET(CAST('11 seconds' AS INTERVAL), x, CAST(NULL AS TEXT)) FROM x;
SELECT x, x, x, TIME_BUCKET(x, x, TIMEZONE) FROM x;
SELECT TIME_BUCKET(CAST('-3 hours' AS INTERVAL), CAST('2019-04-05 00:00:00+03' AS TIMESTAMPTZ));
SELECT TIME_BUCKET(CAST('-3 hours' AS INTERVAL), CAST('2019-04-05 00:00:00+03' AS TIMESTAMPTZ), CAST('1 hour 30 minutes' AS INTERVAL));
SELECT TIME_BUCKET(CAST('-3 hours' AS INTERVAL), CAST('2019-04-05 00:00:00+03' AS TIMESTAMPTZ), CAST('2019-04-05 00:00:00+03' AS TIMESTAMPTZ));
SELECT TIME_BUCKET(CAST('-1 month' AS INTERVAL), CAST('2019-04-05 00:00:00-11' AS TIMESTAMPTZ));
SELECT TIME_BUCKET(CAST('-1 month' AS INTERVAL), CAST('2019-04-05 00:00:00-11' AS TIMESTAMPTZ), CAST('1 hour 30 minutes' AS INTERVAL));
SELECT TIME_BUCKET(CAST('-1 month' AS INTERVAL), CAST('2019-04-05 00:00:00-11' AS TIMESTAMPTZ), CAST('2018-04-05 00:00:00+11' AS TIMESTAMPTZ));
SELECT TIME_BUCKET(CAST('1 day - 172800 seconds' AS INTERVAL), CAST('2018-05-05 00:00:00+07' AS TIMESTAMPTZ));
SELECT TIME_BUCKET(CAST('1 day - 172800 seconds' AS INTERVAL), CAST('2018-05-05 00:00:00+07' AS TIMESTAMPTZ), CAST('1 hour 30 minutes' AS INTERVAL));
SELECT TIME_BUCKET(CAST('1 day - 172800 seconds' AS INTERVAL), CAST('2018-05-05 00:00:00+07' AS TIMESTAMPTZ), CAST('2018-05-05 00:00:00+07' AS TIMESTAMPTZ));
SELECT TIME_BUCKET(CAST('1 month 1 day' AS INTERVAL), CAST('2018-05-05 00:00:00+02' AS TIMESTAMPTZ));
SELECT TIME_BUCKET(CAST('1 month 1 day' AS INTERVAL), CAST('2018-05-05 00:00:00+02' AS TIMESTAMPTZ), CAST('1 hour 30 minutes' AS INTERVAL));
SELECT TIME_BUCKET(CAST('1 month 1 day' AS INTERVAL), CAST('2018-05-05 00:00:00+02' AS TIMESTAMPTZ), CAST('2018-05-05 00:00:00+02' AS TIMESTAMPTZ));
SELECT TIME_BUCKET(CAST('3 days' AS INTERVAL), CAST('2019-05-05 00:00:00+09' AS TIMESTAMPTZ), CAST('2000000000 months' AS INTERVAL));
SELECT TIME_BUCKET(CAST('3 days' AS INTERVAL), CAST('2019-05-05 00:00:00+09' AS TIMESTAMPTZ), CAST('-2000000000 months' AS INTERVAL));
SELECT TIME_BUCKET(CAST('3 months' AS INTERVAL), CAST('2019-05-05 00:00:00+00' AS TIMESTAMPTZ), CAST('2000000000 months' AS INTERVAL));
SELECT TIME_BUCKET(CAST('3 months' AS INTERVAL), CAST('2019-05-05 00:00:00+00' AS TIMESTAMPTZ), CAST('-2000000000 months' AS INTERVAL));
SELECT TIME_BUCKET(CAST('1 microseconds' AS INTERVAL), CAST('290279-12-24 (BC) 19:59:05.224191+00' AS TIMESTAMPTZ));
SELECT TIME_BUCKET(CAST('1 microseconds' AS INTERVAL), CAST('290279-12-24 (BC) 19:59:05.224192+00' AS TIMESTAMPTZ));
SELECT TIME_BUCKET(CAST('1 microseconds' AS INTERVAL), CAST('294247-01-10 04:00:54.775+00' AS TIMESTAMPTZ));
SELECT TIME_BUCKET(CAST('0.' AS INTERVAL), CAST('2000-01-01 00:00:00+00' AS TIMESTAMPTZ));
SELECT TIME_BUCKET(CAST('1 microseconds' AS INTERVAL), CAST('294247-01-10 04:00:54.774999+00' AS TIMESTAMPTZ));
WITH x AS (SELECT CAST('2000-03-26 00:00:00' AS TIMESTAMPTZ) + CAST((CAST(x AS TEXT) || 'hours') AS INTERVAL) AS x FROM x AS x) SELECT x, TIME_BUCKET(CAST('10 seconds' AS INTERVAL), x, x / x) FROM x;
WITH x AS (SELECT CAST('2000-10-28 00:00:00' AS TIMESTAMPTZ) + CAST((CAST(x AS TEXT) || 'hours') AS INTERVAL) AS x FROM x AS x) SELECT x, TIME_BUCKET(CAST('10 seconds' AS INTERVAL), x, x / x) FROM x;
SELECT TIME_BUCKET(INTERVAL '1' DAY, CAST('2000-01-03 17:40:00+00' AS TIMESTAMPTZ), ORIGIN) FROM x AS x ORDER BY x;
SET x = 'UTC';
SELECT TIME_BUCKET(INTERVAL '1' DAY, CAST('2023-10-07 16:08:09+00' AS TIMESTAMPTZ), ORIGIN) FROM x AS x ORDER BY x;
SET x = 'America/St_Johns';
SELECT TIME_BUCKET(INTERVAL '1' DAY, CAST('2023-10-07 16:08:09+03' AS TIMESTAMPTZ), ORIGIN) FROM x AS x ORDER BY x;
SELECT BOOL_AND(DATE_PART('epoch', TIME_BUCKET(INTERVAL '3' DAY, CAST('2023-06-07 16:08:09+00' AS TIMESTAMPTZ), ORIGIN)) = DATE_PART('epoch', TIME_BUCKET(INTERVAL '3' DAY, CAST('2023-06-07 16:08:09' AS TIMESTAMP), x AT TIME ZONE 'UTC'))) FROM x AS x;
PRAGMA x;
BEGIN;
CREATE TABLE x (x TIMESTAMP);
INSERT INTO x VALUES (NOW());
INSERT INTO x SELECT NOW();
SELECT COUNT(DISTINCT x) FROM x;
PRAGMA x;
CREATE TABLE x (x TIMESTAMP);
SELECT COUNT(DISTINCT x) FROM x;
CREATE TABLE x (x TIMESTAMP DEFAULT NOW());
CREATE TABLE x (x TIMESTAMP DEFAULT NOW());
CREATE TABLE x (x TIMESTAMP DEFAULT NOW());
SELECT COUNT(DISTINCT x) FROM x;
SET x = 'nulls_first';
PRAGMA x;
CREATE TABLE x (x TIMESTAMP);
SELECT STRFTIME(x, '%a') FROM x ORDER BY x;
SELECT STRFTIME(x, '%A') FROM x ORDER BY x;
SELECT STRFTIME(x, '%w') FROM x ORDER BY x;
SELECT STRFTIME(x, '%u') FROM x ORDER BY x;
SELECT STRFTIME(x, '%d') FROM x ORDER BY x;
SELECT STRFTIME(x, '%-d') FROM x ORDER BY x;
SELECT STRFTIME(x, '%b') FROM x ORDER BY x;
SELECT STRFTIME(x, '%h') FROM x ORDER BY x;
SELECT STRFTIME(x, '%B') FROM x ORDER BY x;
SELECT STRFTIME(x, '%m') FROM x ORDER BY x;
SELECT STRFTIME(x, '%-m') FROM x ORDER BY x;
SELECT STRFTIME(x, '%y') FROM x ORDER BY x;
SELECT STRFTIME(x, '%-y') FROM x ORDER BY x;
SELECT STRFTIME(CAST('2001-01-01' AS DATE), '%-y');
SELECT STRFTIME(x, '%Y') FROM x ORDER BY x;
SELECT STRFTIME(x, '%G') FROM x ORDER BY x;
SELECT STRFTIME(x, '%H') FROM x ORDER BY x;
SELECT STRFTIME(x, '%-H') FROM x ORDER BY x;
SELECT STRFTIME(x, '%I') FROM x ORDER BY x;
SELECT STRFTIME(x, '%-I') FROM x ORDER BY x;
SELECT STRFTIME(x, '%p') FROM x ORDER BY x;
SELECT STRFTIME(x, '%M') FROM x ORDER BY x;
SELECT STRFTIME(x, '%-M') FROM x ORDER BY x;
SELECT STRFTIME(x, '%S') FROM x ORDER BY x;
SELECT STRFTIME(x, '%-S') FROM x ORDER BY x;
SELECT STRFTIME(x, '%f') FROM x ORDER BY x;
SELECT STRFTIME(x, '%g') FROM x ORDER BY x;
SELECT STRFTIME(x, '%n') FROM x ORDER BY x;
SELECT STRFTIME(x, '%z') FROM x ORDER BY x;
SELECT STRFTIME(x, '%Z') FROM x ORDER BY x;
SELECT STRFTIME(x, '%j') FROM x ORDER BY x;
SELECT STRFTIME(x, '%-j') FROM x ORDER BY x;
SELECT STRFTIME(x, '%U') FROM x ORDER BY x;
SELECT STRFTIME(x, '%W') FROM x ORDER BY x;
SELECT STRFTIME(x, '%V') FROM x ORDER BY x;
SELECT STRFTIME(x, '%c') FROM x ORDER BY x;
SELECT STRFTIME(x, '%x') FROM x ORDER BY x;
SELECT STRFTIME(x, '%X') FROM x ORDER BY x;
SET x = 'nulls_first';
PRAGMA x;
CREATE TABLE x (x TIMESTAMP_NS);
SELECT STRFTIME(x, '%a') FROM x ORDER BY x;
SELECT STRFTIME(x, '%A') FROM x ORDER BY x;
SELECT STRFTIME(x, '%w') FROM x ORDER BY x;
SELECT STRFTIME(x, '%u') FROM x ORDER BY x;
SELECT STRFTIME(x, '%d') FROM x ORDER BY x;
SELECT STRFTIME(x, '%-d') FROM x ORDER BY x;
SELECT STRFTIME(x, '%b') FROM x ORDER BY x;
SELECT STRFTIME(x, '%h') FROM x ORDER BY x;
SELECT STRFTIME(x, '%B') FROM x ORDER BY x;
SELECT STRFTIME(x, '%m') FROM x ORDER BY x;
SELECT STRFTIME(x, '%-m') FROM x ORDER BY x;
SELECT STRFTIME(x, '%y') FROM x ORDER BY x;
SELECT STRFTIME(x, '%-y') FROM x ORDER BY x;
SELECT STRFTIME(CAST('2001-01-01' AS DATE), '%-y');
SELECT STRFTIME(x, '%Y') FROM x ORDER BY x;
SELECT STRFTIME(x, '%G') FROM x ORDER BY x;
SELECT STRFTIME(x, '%H') FROM x ORDER BY x;
SELECT STRFTIME(x, '%-H') FROM x ORDER BY x;
SELECT STRFTIME(x, '%I') FROM x ORDER BY x;
SELECT STRFTIME(x, '%-I') FROM x ORDER BY x;
SELECT STRFTIME(x, '%p') FROM x ORDER BY x;
SELECT STRFTIME(x, '%M') FROM x ORDER BY x;
SELECT STRFTIME(x, '%-M') FROM x ORDER BY x;
SELECT STRFTIME(x, '%S') FROM x ORDER BY x;
SELECT STRFTIME(x, '%-S') FROM x ORDER BY x;
SELECT STRFTIME(x, '%f') FROM x ORDER BY x;
SELECT STRFTIME(x, '%g') FROM x ORDER BY x;
SELECT STRFTIME(x, '%n') FROM x ORDER BY x;
SELECT STRFTIME(x, '%z') FROM x ORDER BY x;
SELECT STRFTIME(x, '%Z') FROM x ORDER BY x;
SELECT STRFTIME(x, '%j') FROM x ORDER BY x;
SELECT STRFTIME(x, '%-j') FROM x ORDER BY x;
SELECT STRFTIME(x, '%U') FROM x ORDER BY x;
SELECT STRFTIME(x, '%W') FROM x ORDER BY x;
SELECT STRFTIME(x, '%V') FROM x ORDER BY x;
SELECT STRFTIME(x, '%c') FROM x ORDER BY x;
SELECT STRFTIME(x, '%x') FROM x ORDER BY x;
SELECT STRFTIME(x, '%X') FROM x ORDER BY x;
PRAGMA x;
SELECT STRPTIME('21 June, 2018', '%d %B, %Y');
SELECT STRPTIME('21/10/2018', '%d/%m/%Y');
SELECT STRPTIME('2018-20-10', '%Y-%d-%m');
SELECT STRPTIME('20182010', '%Y%d%m');
SELECT STRPTIME('Mon 30, June 2003, 12:03:10 AM', '%a %d, %B %Y, %I:%M:%S %p');
SELECT STRPTIME('Mon 30, June 2003, 12:03:10 PM', '%a %d, %B %Y, %I:%M:%S %p');
SELECT STRPTIME('Mon 30, December 2003, 7:3:5 PM', '%a %d, %B %Y, %I:%M:%S %p');
SELECT STRPTIME('Tuesday 30, December 2003, 7:3:5 PM', '%A %d, %B %Y, %I:%M:%S %p');
SELECT STRPTIME('Mon 30, December 30, 7:3:5 PM', '%a %d, %B %y, %I:%M:%S %p');
SELECT STRPTIME('Mon 30, June 2003, 12:03:10 AM', '%a %-d, %B %Y, %-I:%-M:%-S %p');
SELECT STRPTIME('mon', '%a');
SELECT STRPTIME('tuesday', '%A');
SELECT STRPTIME('jun', '%b');
SELECT STRPTIME('1', '%W');
SELECT STRPTIME('1', '%U');
SELECT STRPTIME('30', '%U'), STRFTIME(CAST('1900-07-29' AS DATE), '%U');
SELECT STRPTIME('1', '%V');
SELECT STRPTIME('30', '%W'), STRFTIME(CAST('1900-07-23' AS DATE), '%W');
SELECT STRPTIME('30', '%V'), STRFTIME(CAST('1900-07-23' AS DATE), '%V');
SELECT STRPTIME('6', '%w');
SELECT STRPTIME('6', '%u');
SELECT STRPTIME('1-4', '%U-%w'), STRFTIME(CAST('1900-01-11' AS DATE), '%U-%w');
SELECT STRPTIME('2-4', '%V-%u'), STRFTIME(CAST('1900-01-11' AS DATE), '%V-%u');
SELECT STRPTIME('1-4', '%W-%w'), STRFTIME(CAST('1900-01-04' AS DATE), '%W-%w');
SELECT STRPTIME('1-4', '%V-%u'), STRFTIME(CAST('1900-01-04' AS DATE), '%V-%u');
SELECT STRPTIME('30', '%j'), STRFTIME(CAST('1900-01-30' AS DATE), '%-j');
SELECT STRPTIME('100 2024', '%j %Y');
SELECT STRPTIME('2024 100', '%Y %j');
SELECT STRPTIME('1992-01-30 30', '%Y-%m-%d %j');
SELECT STRPTIME('2021-19-4', '%Y-%U-%w'), STRFTIME(CAST('2021-05-13' AS DATE), '%Y-%U-%w');
SELECT STRPTIME('2021-19-4', '%Y-%W-%w'), STRFTIME(CAST('2021-05-13' AS DATE), '%Y-%U-%w');
SELECT STRPTIME('2021-19-4', '%G-%V-%u'), STRFTIME(CAST('2021-05-13' AS DATE), '%G-%V-%u');
SELECT STRPTIME('2021-0-5', '%Y-%U-%w'), STRFTIME(CAST('2021-01-01' AS DATE), '%Y-%U-%w');
SELECT STRPTIME('2021-19-4', '%G-%V-%u'), STRFTIME(CAST('2021-05-13' AS DATE), '%G-%V-%u');
SELECT STRPTIME('2021-1-5', '%G-%V-%u'), STRFTIME(CAST('2021-01-08' AS DATE), '%G-%V-%u');
SELECT STRPTIME('2021-0-5', '%Y-%W-%w'), STRFTIME(CAST('2021-01-01' AS DATE), '%Y-%W-%w');
SELECT STRPTIME('2021-05-12 19-4', '%Y-%m-%d %U-%w');
SELECT STRPTIME('2021-05-12 19-4', '%Y-%m-%d %W-%w');
SELECT STRPTIME('2021-05-12 19-4', '%Y-%m-%d %V-%u');
SELECT * FROM (SELECT x, STRFTIME(x, '%Y-%U-%w') AS x, STRPTIME(STRFTIME(x, '%Y-%U-%w'), '%Y-%U-%w') AS x FROM (SELECT CAST('2021-01-01' AS DATE) + (INTERVAL (x) DAY) AS x FROM x AS x) AS x) AS x WHERE x <> x;
SELECT * FROM (SELECT x, STRFTIME(x, '%Y-%W-%w') AS x, STRPTIME(STRFTIME(x, '%Y-%W-%w'), '%Y-%W-%w') AS x FROM (SELECT CAST('2021-01-01' AS DATE) + (INTERVAL (x) DAY) AS x FROM x AS x) AS x) AS x WHERE x <> x;
SELECT * FROM (SELECT x, STRFTIME(x, '%G-%V-%u') AS x, STRPTIME(STRFTIME(x, '%G-%V-%u'), '%G-%V-%u') AS x FROM (SELECT CAST('2021-01-01' AS DATE) + (INTERVAL (x) DAY) AS x FROM x AS x) AS x) AS x WHERE x <> x;
SELECT STRPTIME('', 'None');
SELECT STRPTIME(NULL, 'None');
SELECT STRPTIME('', NULL);
SELECT STRPTIME('Jun 30 2003  2:03:10AM', '%b %d %Y %-I:%M:%S%p');
SELECT STRPTIME('2020-12-31 21:25:58.745232159', '%Y-%m-%d %H:%M:%S.%n');
SELECT STRPTIME('2020-12-31 21:25:58.745232951', '%Y-%m-%d %H:%M:%S.%n');
SELECT STRPTIME('2020-12-31 21:25:58.745232', '%Y-%m-%d %H:%M:%S.%f');
SELECT STRPTIME('2020-12-31 21:25:58.745232', '%Y-%m-%d %H:%M:%S.%f');
SELECT STRPTIME('2020-12-31 21:25:58.745232+00', '%Y-%m-%d %H:%M:%S.%f%z');
SELECT STRPTIME('2020-12-31 21:25:58.745232+0000', '%Y-%m-%d %H:%M:%S.%f%z');
SELECT STRPTIME('2020-12-31 21:25:58.745232+02', '%Y-%m-%d %H:%M:%S.%f%z');
SELECT STRPTIME('2020-12-31 21:25:58.745232-02', '%Y-%m-%d %H:%M:%S.%f%z');
SELECT STRPTIME('2020-12-31 21:25:58.745232+0215', '%Y-%m-%d %H:%M:%S.%f%z');
SELECT STRPTIME('2020-12-31 21:25:58.745232-0215', '%Y-%m-%d %H:%M:%S.%f%z');
SELECT STRPTIME('2020-12-31 03:25:58.745232+04', '%Y-%m-%d %H:%M:%S.%f%z');
SELECT STRPTIME('2020-12-30 23:25:58.745232-04', '%Y-%m-%d %H:%M:%S.%f%z');
SELECT STRPTIME('infinity', '%m/%d/%Y');
SELECT STRPTIME('-infinity', '%m/%d/%Y');
SELECT STRPTIME('epoch', '%m/%d/%Y');
SELECT STRPTIME('Mon Oct 17 2022 22:00:00 GMT+0000 (GMT)', '%a %b %d %Y %X GMT%z (%Z)') AS x;
SELECT STRPTIME('Mon Oct 17 2022 22:00:00 GMT+0000 (GMT', '%a %b %d %Y %X GMT%z (%Z') AS x;
SELECT STRPTIME('10/28/1910', ['%d-%m-%Y', '%m-%d-%Y', '%d/%m/%Y', '%m/%d/%Y']);
SELECT STRPTIME('10.28.1910', ['%d-%m-%Y', '%m-%d-%Y', '%d/%m/%Y', '%m/%d/%Y']);
SELECT STRPTIME('Mon Oct 17 2022 22:00:00 GMT+0000 (GMT)', '%a %b %d %Y %X GMT%z (%Z') AS x;
SELECT STRPTIME('2020-12-31 21:25:58.745232+0', '%Y-%m-%d %H:%M:%S.%f%z');
SELECT STRPTIME('2020-12-31 21:25:58.745232+0X', '%Y-%m-%d %H:%M:%S.%f%z');
SELECT STRPTIME('2020-12-31 21:25:58.745232+X0', '%Y-%m-%d %H:%M:%S.%f%z');
SELECT STRPTIME('2020-12-31 21:25:58.745232+000', '%Y-%m-%d %H:%M:%S.%f%z');
SELECT STRPTIME('2020-12-31 21:25:58.745232X00', '%Y-%m-%d %H:%M:%S.%f%z');
SELECT STRPTIME('2018-20-10', '%Y-%m-%d');
SELECT STRPTIME('2018-10-100', '%Y-%m-%d');
SELECT STRPTIME('969-10-10', '%y-%m-%d');
SELECT STRPTIME('2000/10/10', '%Y-%m-%d');
SELECT STRPTIME('2001-02-30', '%Y-%m-%d');
SELECT STRPTIME('2000-10-hello', '%Y-%m-%d');
SELECT STRPTIME('2000-10-01 24:00:00', '%Y-%m-%d %H:%M:%S');
SELECT STRPTIME('2000-10-01 00:00:00 AM', '%Y-%m-%d %I:%M:%S %p');
SELECT STRPTIME('2000-10-01 13:00:00 AM', '%Y-%m-%d %I:%M:%S %p');
SELECT STRPTIME('2000-10-01 23:60:00', '%Y-%m-%d %H:%M:%S');
SELECT STRPTIME('2000-10-01 23:59:60', '%Y-%m-%d %H:%M:%S');
SELECT STRPTIME('2000-10-01 23:59:59.10000000', '%Y-%m-%d %H:%M:%S.%f');
SELECT STRPTIME('2000-10-01 23:59:59.1000000000000000000000000000', '%Y-%m-%d %H:%M:%S.%f');
SELECT STRPTIME('', '%Y-%m-%d %H:%M:%S.%f');
SELECT STRPTIME('', '%p');
SELECT STRPTIME('a', '%p');
SELECT STRPTIME('mp', '%p');
SELECT STRPTIME('pp', '%p');
SELECT STRPTIME('zm', '%p');
SELECT STRPTIME('moa', '%a');
SELECT STRPTIME('moaday', '%A');
SELECT STRPTIME('mondayy', '%A');
SELECT STRPTIME('juk', '%b');
SELECT STRPTIME('juke', '%B');
SELECT STRPTIME('junee', '%B');
SELECT STRPTIME('500', '%j');
SELECT STRPTIME('500', '%-j');
SELECT STRPTIME('0', '%j');
SELECT STRPTIME('0', '%-j');
SELECT STRPTIME('60', '%U');
SELECT STRPTIME('60', '%W');
SELECT STRPTIME('60', '%V');
SELECT STRPTIME('9', '%w');
SELECT STRPTIME('9', '%u');
SELECT STRPTIME('20 19', '%U %W');
SELECT STRPTIME('20 19', '%U %V');
SELECT STRPTIME('20 2021', '%U %G');
SELECT STRPTIME('20 19', '%U %j');
SELECT STRPTIME('20 19', '%W %U');
SELECT STRPTIME('20 19', '%W %V');
SELECT STRPTIME('20 2021', '%W %G');
SELECT STRPTIME('20 19', '%W %j');
SELECT STRPTIME('20 19', '%V %U');
SELECT STRPTIME('20 19', '%V %W');
SELECT STRPTIME('20 19', '%V %j');
SELECT STRPTIME('2021 19', '%G %U');
SELECT STRPTIME('2021 19', '%G %W');
SELECT STRPTIME('2021 19', '%G %j');
SELECT STRPTIME('2021 1950', '%G %Y');
SELECT STRPTIME('2021 1950', '%Y %G');
SELECT STRPTIME('20 1950', '%V %Y');
SELECT STRPTIME('2021 19', '%Y %V');
SELECT STRPTIME('Mon 30, December 30, 20:3:5 PM', '%a %d, %B %y, %H:%M:%S %p');
SELECT STRPTIME('21/10/2018', '%-q/%m/%Y');
SELECT STRPTIME('9999999', '%f');
SELECT STRPTIME('9999', '%g');
SELECT STRPTIME('2000/10/10', CAST(RANDOM() AS TEXT));
PRAGMA x;
CREATE TABLE x (x INTERVAL, x TIMESTAMP, x INTERVAL, x TIMESTAMP);
INSERT INTO x VALUES ('10 days', '-infinity', '0 days', '1970-01-05 00:00:00'), ('10 days', '3000-01-02 (BC) 03:16:23.003003', '3 days', '3000-01-01 (BC) 00:00:00'), ('2 months', '1024-04-10 (BC) 12:35:40.003003', '10 days', '1024-03-01 (BC) 00:00:00'), ('10 days', '0044-06-15 (BC) 12:35:40.003003', '6 days', '0044-02-01 (BC) 00:00:00'), ('333 microseconds', '0678-06-30 02:02:03.003003', '0 microseconds', '1970-02-10 00:00:00'), ('333 microseconds', '0794-07-03 02:02:04.003003', '444 microseconds', '1970-10-17 00:05:05.006006'), ('333 microseconds', '1700-01-01 00:00:00', '-444 microseconds', '1970-09-27 00:05:05.006006'), ('333 milliseconds', '1962-12-31 00:00:00', '0 milliseconds', '1970-08-12 00:00:00'), ('333 milliseconds', '1970-01-01 00:00:00', '444 milliseconds', '1970-06-23 00:05:05.006006'), ('333 milliseconds', '1985-12-07 02:02:08.003003', '-444 milliseconds', '1970-01-05 00:05:05.006006'), ('333 seconds', '1989-10-18 02:02:09.003003', '0 seconds', '1970-09-07 00:00:00'), ('333 seconds', '1990-01-21 02:02:10.003003', '444 seconds', '1970-07-06 00:05:05.006006'), ('333 seconds', '1991-02-10 02:02:11.003003', '-444 seconds', '1970-10-09 00:05:05.006006'), ('333 minutes', '1992-09-11 02:02:12.003003', '0 minutes', '1970-04-10 00:00:00'), ('333 minutes', '1994-12-26 02:02:13.003003', '444 minute', '1970-03-05 00:05:05.006006'), ('333 minutes', '1997-05-13 02:02:14.003003', '-444 minute', '2000-01-03 00:00:00'), ('333 hours', '1999-02-14 02:02:15.003003', '0 hours', '2000-01-01 00:00:00'), ('333 hours', '2000-01-01 00:00:00', '444 hours', '1980-11-25 00:05:05.006006'), ('333 hours', '2000-01-03 00:00:00', '-444 hours', '2045-01-05 00:05:05.006006'), ('10 days', '2008-09-17 02:02:18.003003', '0 days', '2009-11-05 00:00:00'), ('1 week', '2010-08-18 02:02:19.003003', '0 days', '2100-09-05 00:00:00'), ('10 days', '2013-03-19 02:02:20.003003', '2 days 4 hours', '2300-10-07 00:05:05.006006'), ('10 days', '2014-11-20 02:02:21.003003', '-2 days 4 hours', '1970-12-07 00:05:05.006006'), ('2 months', '2016-02-21 02:02:22.003003', '0 months', '1970-09-05 00:00:00'), ('2 months', '2018-08-22 02:02:23.003003', '1 month 1 week', '1970-07-01 00:05:05.006006'), ('2 months', '2019-01-23 02:02:24.003003', '-1 month 1 week', '1969-09-01 00:05:05.006006'), ('2 year', '2020-02-24 02:02:25.003003', '6 months', '1970-02-13 00:05:05.006006'), ('2 year', '2022-07-25 02:02:26.003003', '-6 months', '1969-10-09 00:05:05.006006'), ('10 days', '2024-02-25 02:02:26.003003', '1 year', '-infinity'), ('10 days', '2032-09-25 02:02:26.003003', '-1 year', 'infinity'), ('10 days', 'infinity', '0 days', '1970-01-01 00:00:00');
SELECT x, TIME_BUCKET(CAST('56 seconds' AS INTERVAL), x) FROM x;
SELECT x, TIME_BUCKET(CAST('3 days' AS INTERVAL), x) FROM x;
SELECT x, TIME_BUCKET(CAST('3 years' AS INTERVAL), x) FROM x;
SELECT x, TIME_BUCKET(CAST(NULL AS INTERVAL), x) FROM x;
SELECT TIME_BUCKET(CAST('3 years' AS INTERVAL), CAST(NULL AS TIMESTAMP)) FROM x;
SELECT x, x, TIME_BUCKET(x, x) FROM x;
SELECT x, TIME_BUCKET(CAST('4 seconds' AS INTERVAL), x, CAST('2 seconds' AS INTERVAL)) FROM x;
SELECT x, TIME_BUCKET(CAST('4 days' AS INTERVAL), x, CAST('6 hours' AS INTERVAL)) FROM x;
SELECT x, TIME_BUCKET(CAST('3 months' AS INTERVAL), x, CAST('6 days 11 hours' AS INTERVAL)) FROM x;
SELECT x, TIME_BUCKET(CAST(NULL AS INTERVAL), x, CAST('2 seconds' AS INTERVAL)) FROM x;
SELECT TIME_BUCKET(CAST('3 months' AS INTERVAL), CAST(NULL AS TIMESTAMP), CAST('2 seconds' AS INTERVAL)) FROM x;
SELECT x, TIME_BUCKET(CAST('3 months' AS INTERVAL), x, CAST(NULL AS INTERVAL)) FROM x;
SELECT x, x, x, TIME_BUCKET(x, x, SHIFT) FROM x;
SELECT x, TIME_BUCKET(CAST('11 seconds' AS INTERVAL), x, CAST('1990-12-10 08:08:10' AS TIMESTAMP)) FROM x;
SELECT x, TIME_BUCKET(CAST('11 days' AS INTERVAL), x, CAST('1990-01-06 08:08:10' AS TIMESTAMP)) FROM x;
SELECT x, TIME_BUCKET(CAST('7 months' AS INTERVAL), x, CAST('1990-01-06 08:08:10' AS TIMESTAMP)) FROM x;
SELECT x, TIME_BUCKET(CAST(NULL AS INTERVAL), x, CAST('1990-01-06 08:08:10' AS TIMESTAMP)) FROM x;
SELECT TIME_BUCKET(CAST('7 months' AS INTERVAL), CAST(NULL AS TIMESTAMP), CAST('1990-01-06 08:08:10' AS TIMESTAMP)) FROM x;
SELECT x, TIME_BUCKET(CAST('7 months' AS INTERVAL), x, CAST(NULL AS TIMESTAMP)) FROM x;
SELECT x, x, x, TIME_BUCKET(x, x, ORIGIN) FROM x;
SELECT TIME_BUCKET(CAST('-3 hours' AS INTERVAL), CAST('2019-04-05 00:00:00' AS TIMESTAMP));
SELECT TIME_BUCKET(CAST('-3 hours' AS INTERVAL), CAST('2019-04-05 00:00:00' AS TIMESTAMP), CAST('1 hour 30 minutes' AS INTERVAL));
SELECT TIME_BUCKET(CAST('-3 hours' AS INTERVAL), CAST('2019-04-05 00:00:00' AS TIMESTAMP), CAST('2019-04-05 00:00:00' AS TIMESTAMP));
SELECT TIME_BUCKET(CAST('-1 month' AS INTERVAL), CAST('2019-04-05 00:00:00' AS TIMESTAMP));
SELECT TIME_BUCKET(CAST('-1 month' AS INTERVAL), CAST('2019-04-05 00:00:00' AS TIMESTAMP), CAST('1 hour 30 minutes' AS INTERVAL));
SELECT TIME_BUCKET(CAST('-1 month' AS INTERVAL), CAST('2019-04-05 00:00:00' AS TIMESTAMP), CAST('2018-04-05 00:00:00' AS TIMESTAMP));
SELECT TIME_BUCKET(CAST('1 day - 172800 seconds' AS INTERVAL), CAST('2018-05-05 00:00:00' AS TIMESTAMP));
SELECT TIME_BUCKET(CAST('1 day - 172800 seconds' AS INTERVAL), CAST('2018-05-05 00:00:00' AS TIMESTAMP), CAST('1 hour 30 minutes' AS INTERVAL));
SELECT TIME_BUCKET(CAST('1 day - 172800 seconds' AS INTERVAL), CAST('2018-05-05 00:00:00' AS TIMESTAMP), CAST('2018-05-05 00:00:00' AS TIMESTAMP));
SELECT TIME_BUCKET(CAST('1 month 1 day' AS INTERVAL), CAST('2018-05-05 00:00:00' AS TIMESTAMP));
SELECT TIME_BUCKET(CAST('1 month 1 day' AS INTERVAL), CAST('2018-05-05 00:00:00' AS TIMESTAMP), CAST('1 hour 30 minutes' AS INTERVAL));
SELECT TIME_BUCKET(CAST('1 month 1 day' AS INTERVAL), CAST('2018-05-05 00:00:00' AS TIMESTAMP), CAST('2018-05-05 00:00:00' AS TIMESTAMP));
SELECT TIME_BUCKET(CAST('3 days' AS INTERVAL), CAST('2019-05-05 00:00:00' AS TIMESTAMP), CAST('2000000000 months' AS INTERVAL));
SELECT TIME_BUCKET(CAST('3 days' AS INTERVAL), CAST('2019-05-05 00:00:00' AS TIMESTAMP), CAST('-2000000000 months' AS INTERVAL));
SELECT TIME_BUCKET(CAST('3 months' AS INTERVAL), CAST('2019-05-05 00:00:00' AS TIMESTAMP), CAST('2000000000 months' AS INTERVAL));
SELECT TIME_BUCKET(CAST('3 months' AS INTERVAL), CAST('2019-05-05 00:00:00' AS TIMESTAMP), CAST('-2000000000 months' AS INTERVAL));
SELECT TIME_BUCKET(CAST('1 microseconds' AS INTERVAL), CAST('290309-12-21 (BC) 23:59:59.999999' AS TIMESTAMP));
SELECT TIME_BUCKET(CAST('1 microseconds' AS INTERVAL), CAST('290309-12-22 (BC) 00:00:00' AS TIMESTAMP));
SELECT TIME_BUCKET(CAST('1 microseconds' AS INTERVAL), CAST('294247-01-10 04:00:54.775807' AS TIMESTAMP));
SELECT TIME_BUCKET(CAST('1 microseconds' AS INTERVAL), CAST('294247-01-10 04:00:54.775806' AS TIMESTAMP));
SELECT TIME_BUCKET(CAST('1 month 1 day' AS INTERVAL), CAST(NULL AS TIMESTAMP));
SELECT TIME_BUCKET(CAST('1 month 1 day' AS INTERVAL), CAST(NULL AS TIMESTAMP), CAST('6 days' AS INTERVAL));
SELECT TIME_BUCKET(CAST('1 month 1 day' AS INTERVAL), CAST(NULL AS TIMESTAMP), CAST('2022-12-20 10:00:00' AS TIMESTAMP));
SELECT TIME_BUCKET(CAST('-1 month' AS INTERVAL), CAST(NULL AS TIMESTAMP));
SELECT TIME_BUCKET(CAST('-1 month' AS INTERVAL), CAST(NULL AS TIMESTAMP), CAST('6 days' AS INTERVAL));
SELECT TIME_BUCKET(CAST('-1 month' AS INTERVAL), CAST('2022-12-22 10:00:00' AS TIMESTAMP), CAST(NULL AS INTERVAL));
SELECT TIME_BUCKET(CAST('-1 month' AS INTERVAL), CAST(NULL AS TIMESTAMP), CAST('2022-12-20 10:00:00' AS TIMESTAMP));
SELECT TIME_BUCKET(CAST('-1 month' AS INTERVAL), CAST('2022-12-22' AS TIMESTAMP), CAST(NULL AS TIMESTAMP));
PRAGMA x;
SELECT TRY_STRPTIME('21 June, 2018', '%d %B, %Y');
SELECT TRY_STRPTIME('21/10/2018', '%d/%m/%Y');
SELECT TRY_STRPTIME('2018-20-10', '%Y-%d-%m');
SELECT TRY_STRPTIME('20182010', '%Y%d%m');
SELECT TRY_STRPTIME('Mon 30, June 2003, 12:03:10 AM', '%a %d, %B %Y, %I:%M:%S %p');
SELECT TRY_STRPTIME('Mon 30, June 2003, 12:03:10 PM', '%a %d, %B %Y, %I:%M:%S %p');
SELECT TRY_STRPTIME('Mon 30, December 2003, 7:3:5 PM', '%a %d, %B %Y, %I:%M:%S %p');
SELECT TRY_STRPTIME('Tuesday 30, December 2003, 7:3:5 PM', '%A %d, %B %Y, %I:%M:%S %p');
SELECT TRY_STRPTIME('Mon 30, December 30, 7:3:5 PM', '%a %d, %B %y, %I:%M:%S %p');
SELECT TRY_STRPTIME('Mon 30, June 2003, 12:03:10 AM', '%a %-d, %B %Y, %-I:%-M:%-S %p');
SELECT TRY_STRPTIME('mon', '%a');
SELECT TRY_STRPTIME('tuesday', '%A');
SELECT TRY_STRPTIME('jun', '%b');
SELECT TRY_STRPTIME('1', '%W');
SELECT TRY_STRPTIME('1', '%U');
SELECT TRY_STRPTIME('1', '%V');
SELECT TRY_STRPTIME('30', '%U'), STRFTIME(CAST('1900-07-29' AS DATE), '%U');
SELECT TRY_STRPTIME('30', '%W'), STRFTIME(CAST('1900-07-23' AS DATE), '%W');
SELECT TRY_STRPTIME('30', '%V'), STRFTIME(CAST('1900-07-23' AS DATE), '%V');
SELECT TRY_STRPTIME('6', '%w');
SELECT TRY_STRPTIME('6', '%u');
SELECT TRY_STRPTIME('1-4', '%U-%w'), STRFTIME(CAST('1900-01-11' AS DATE), '%U-%w');
SELECT TRY_STRPTIME('2-4', '%V-%u'), STRFTIME(CAST('1900-01-11' AS DATE), '%V-%u');
SELECT TRY_STRPTIME('1-4', '%W-%w'), STRFTIME(CAST('1900-01-04' AS DATE), '%W-%w');
SELECT TRY_STRPTIME('1-4', '%V-%u'), STRFTIME(CAST('1900-01-04' AS DATE), '%V-%u');
SELECT TRY_STRPTIME('30', '%j'), STRFTIME(CAST('1900-01-30' AS DATE), '%-j');
SELECT TRY_STRPTIME('1992-01-30 30', '%Y-%m-%d %j');
SELECT TRY_STRPTIME('2021-19-4', '%Y-%U-%w'), STRFTIME(CAST('2021-05-13' AS DATE), '%Y-%U-%w');
SELECT TRY_STRPTIME('2021-19-4', '%Y-%W-%w'), STRFTIME(CAST('2021-05-13' AS DATE), '%Y-%U-%w');
SELECT TRY_STRPTIME('2021-19-4', '%G-%V-%u'), STRFTIME(CAST('2021-05-13' AS DATE), '%G-%V-%u');
SELECT TRY_STRPTIME('2021-0-5', '%Y-%U-%w'), STRFTIME(CAST('2021-01-01' AS DATE), '%Y-%U-%w');
SELECT TRY_STRPTIME('2021-0-5', '%Y-%W-%w'), STRFTIME(CAST('2021-01-01' AS DATE), '%Y-%W-%w');
SELECT TRY_STRPTIME('2021-1-5', '%G-%V-%u'), STRFTIME(CAST('2021-01-08' AS DATE), '%G-%V-%u');
SELECT TRY_STRPTIME('2021-05-12 19-4', '%Y-%m-%d %U-%w');
SELECT TRY_STRPTIME('2021-05-12 19-4', '%Y-%m-%d %W-%w');
SELECT TRY_STRPTIME('2021-05-12 19-4', '%Y-%m-%d %V-%u');
SELECT * FROM (SELECT x, STRFTIME(x, '%Y-%U-%w') AS x, TRY_STRPTIME(STRFTIME(x, '%Y-%U-%w'), '%Y-%U-%w') AS x FROM (SELECT CAST('2021-01-01' AS DATE) + (INTERVAL (x) DAY) AS x FROM x AS x) AS x) AS x WHERE x <> x;
SELECT * FROM (SELECT x, STRFTIME(x, '%Y-%W-%w') AS x, TRY_STRPTIME(STRFTIME(x, '%Y-%W-%w'), '%Y-%W-%w') AS x FROM (SELECT CAST('2021-01-01' AS DATE) + (INTERVAL (x) DAY) AS x FROM x AS x) AS x) AS x WHERE x <> x;
SELECT * FROM (SELECT x, STRFTIME(x, '%G-%V-%u') AS x, TRY_STRPTIME(STRFTIME(x, '%G-%V-%u'), '%G-%V-%u') AS x FROM (SELECT CAST('2021-01-01' AS DATE) + (INTERVAL (x) DAY) AS x FROM x AS x) AS x) AS x WHERE x <> x;
SELECT TRY_STRPTIME('', '');
SELECT TRY_STRPTIME(NULL, '');
SELECT TRY_STRPTIME('', NULL);
SELECT TRY_STRPTIME('Jun 30 2003  2:03:10AM', '%b %d %Y %-I:%M:%S%p');
SELECT TRY_STRPTIME('2020-12-31 21:25:58.745232', '%Y-%m-%d %H:%M:%S.%f');
SELECT TRY_STRPTIME('2020-12-31 21:25:58.745232', '%Y-%m-%d %H:%M:%S.%f');
SELECT TRY_STRPTIME('2020-12-31 21:25:58.745232+00', '%Y-%m-%d %H:%M:%S.%f%z');
SELECT TRY_STRPTIME('2020-12-31 21:25:58.745232+0000', '%Y-%m-%d %H:%M:%S.%f%z');
SELECT TRY_STRPTIME('2020-12-31 21:25:58.745232+02', '%Y-%m-%d %H:%M:%S.%f%z');
SELECT TRY_STRPTIME('2020-12-31 21:25:58.745232-02', '%Y-%m-%d %H:%M:%S.%f%z');
SELECT TRY_STRPTIME('2020-12-31 21:25:58.745232+0215', '%Y-%m-%d %H:%M:%S.%f%z');
SELECT TRY_STRPTIME('2020-12-31 21:25:58.745232-0215', '%Y-%m-%d %H:%M:%S.%f%z');
SELECT TRY_STRPTIME('2020-12-31 03:25:58.745232+04', '%Y-%m-%d %H:%M:%S.%f%z');
SELECT TRY_STRPTIME('2020-12-30 23:25:58.745232-04', '%Y-%m-%d %H:%M:%S.%f%z');
SELECT TRY_STRPTIME('Mon Oct 17 2022 22:00:00 GMT+0000 (GMT)', '%a %b %d %Y %X GMT%z (%Z)') AS x;
SELECT TRY_STRPTIME('Mon Oct 17 2022 22:00:00 GMT+0000 (GMT', '%a %b %d %Y %X GMT%z (%Z') AS x;
SELECT TRY_STRPTIME('Mon Oct 17 2022 22:00:00 GMT+0000 (GMT)', '%a %b %d %Y %X GMT%z (%Z') AS x;
SELECT TRY_STRPTIME('10/28/1910', ['%d-%m-%Y', '%m-%d-%Y', '%d/%m/%Y', '%m/%d/%Y']);
SELECT TRY_STRPTIME('10.28.1910', ['%d-%m-%Y', '%m-%d-%Y', '%d/%m/%Y', '%m/%d/%Y']);
SELECT TRY_STRPTIME('2020-12-31 21:25:58.745232+0', '%Y-%m-%d %H:%M:%S.%f%z');
SELECT TRY_STRPTIME('2020-12-31 21:25:58.745232+0X', '%Y-%m-%d %H:%M:%S.%f%z');
SELECT TRY_STRPTIME('2020-12-31 21:25:58.745232+X0', '%Y-%m-%d %H:%M:%S.%f%z');
SELECT TRY_STRPTIME('2020-12-31 21:25:58.745232+000', '%Y-%m-%d %H:%M:%S.%f%z');
SELECT TRY_STRPTIME('2020-12-31 21:25:58.745232X00', '%Y-%m-%d %H:%M:%S.%f%z');
SELECT TRY_STRPTIME('2018-20-10', '%Y-%m-%d');
SELECT TRY_STRPTIME('2018-10-100', '%Y-%m-%d');
SELECT TRY_STRPTIME('969-10-10', '%y-%m-%d');
SELECT TRY_STRPTIME('2000/10/10', '%Y-%m-%d');
SELECT TRY_STRPTIME('2001-02-30', '%Y-%m-%d');
SELECT TRY_STRPTIME('2000-10-hello', '%Y-%m-%d');
SELECT TRY_STRPTIME('2000-10-01 24:00:00', '%Y-%m-%d %H:%M:%S');
SELECT TRY_STRPTIME('2000-10-01 00:00:00 AM', '%Y-%m-%d %I:%M:%S %p');
SELECT TRY_STRPTIME('2000-10-01 13:00:00 AM', '%Y-%m-%d %I:%M:%S %p');
SELECT TRY_STRPTIME('2000-10-01 23:60:00', '%Y-%m-%d %H:%M:%S');
SELECT TRY_STRPTIME('2000-10-01 23:59:60', '%Y-%m-%d %H:%M:%S');
SELECT TRY_STRPTIME('2000-10-01 23:59:59.10000000', '%Y-%m-%d %H:%M:%S.%f');
SELECT TRY_STRPTIME('2000-10-01 23:59:59.1000000000000000000000000000', '%Y-%m-%d %H:%M:%S.%f');
SELECT TRY_STRPTIME('', '%Y-%m-%d %H:%M:%S.%f');
SELECT TRY_STRPTIME('', '%p');
SELECT TRY_STRPTIME('a', '%p');
SELECT TRY_STRPTIME('mp', '%p');
SELECT TRY_STRPTIME('pp', '%p');
SELECT TRY_STRPTIME('zm', '%p');
SELECT TRY_STRPTIME('moa', '%a');
SELECT TRY_STRPTIME('moaday', '%A');
SELECT TRY_STRPTIME('mondayy', '%A');
SELECT TRY_STRPTIME('juk', '%b');
SELECT TRY_STRPTIME('juke', '%B');
SELECT TRY_STRPTIME('junee', '%B');
SELECT TRY_STRPTIME('500', '%j');
SELECT TRY_STRPTIME('500', '%-j');
SELECT TRY_STRPTIME('0', '%j');
SELECT TRY_STRPTIME('0', '%-j');
SELECT TRY_STRPTIME('60', '%U');
SELECT TRY_STRPTIME('60', '%W');
SELECT TRY_STRPTIME('60', '%V');
SELECT TRY_STRPTIME('9', '%w');
SELECT TRY_STRPTIME('9', '%u');
SELECT TRY_STRPTIME('20 19', '%U %W');
SELECT TRY_STRPTIME('20 19', '%U %V');
SELECT TRY_STRPTIME('20 2021', '%U %G');
SELECT TRY_STRPTIME('20 19', '%U %j');
SELECT TRY_STRPTIME('20 19', '%W %U');
SELECT TRY_STRPTIME('20 19', '%W %V');
SELECT TRY_STRPTIME('20 2021', '%W %G');
SELECT TRY_STRPTIME('20 19', '%W %j');
SELECT TRY_STRPTIME('20 19', '%V %U');
SELECT TRY_STRPTIME('20 19', '%V %W');
SELECT TRY_STRPTIME('20 19', '%V %j');
SELECT TRY_STRPTIME('2021 19', '%G %U');
SELECT TRY_STRPTIME('2021 19', '%G %W');
SELECT TRY_STRPTIME('2021 19', '%G %j');
SELECT TRY_STRPTIME('2021 1950', '%G %Y');
SELECT TRY_STRPTIME('2021 1950', '%Y %G');
SELECT TRY_STRPTIME('20 1950', '%V %Y');
SELECT TRY_STRPTIME('2021 19', '%Y %V');
SELECT TRY_STRPTIME('Mon 30, December 30, 20:3:5 PM', '%a %d, %B %y, %H:%M:%S %p');
SELECT TRY_STRPTIME('9999999', '%f');
SELECT TRY_STRPTIME('9999', '%g');
SELECT TRY_STRPTIME('21/10/2018', '%-q/%m/%Y');
SELECT TRY_STRPTIME('2000/10/10', CAST(RANDOM() AS TEXT));
PRAGMA x;
CREATE TABLE x (x TIMETZ, x TEXT);
INSERT INTO x VALUES (NULL, NULL), ('00:00:00+1559', 'timezone'), ('00:00:00+1558', 'timezone_hour'), ('02:30:00', 'hour'), ('02:30:00+04', 'timezone_hour'), ('02:30:00+04:30', 'timezone_minute'), ('02:30:00+04:30:45', 'timezone_minute'), ('16:15:03.123456', 'microseconds'), ('02:30:00+1200', 'minute'), ('02:30:00-1200', 'second'), ('24:00:00-1558', 'timezone_hour'), ('24:00:00-1559', 'timezone');
SELECT DATE_PART(CAST(NULL AS TEXT), CAST(NULL AS TIMETZ)) FROM x;
SELECT DATE_PART(x, CAST(NULL AS TIMETZ)) FROM x;
SELECT DATE_PART(NULL, x) FROM x;
SELECT DATE_PART(x, CAST('14:28:50.447+07:15' AS TIMETZ)) FROM x;
SELECT DATE_PART('hour', x) FROM x;
SELECT DATE_PART(x, x) FROM x;
SELECT DATE_PART('${datepart}', CAST('10:00:00' AS TIMETZ));
SELECT ERA(x) FROM x;
SELECT YEAR(x) FROM x;
SELECT MONTH(x) FROM x;
SELECT DAY(x) FROM x;
SELECT DECADE(x) FROM x;
SELECT CENTURY(x) FROM x;
SELECT MILLENNIUM(x) FROM x;
SELECT QUARTER(x) FROM x;
SELECT DAYOFWEEK(x) FROM x;
SELECT ISODOW(x) FROM x;
SELECT DAYOFYEAR(x) FROM x;
SELECT WEEK(x) FROM x;
SELECT YEARWEEK(x) FROM x;
SELECT EXTRACT(DOW FROM CAST('10:00:00' AS TIME));
SELECT EXTRACT(DOY FROM CAST('10:00:00' AS TIME));
SELECT EXTRACT(YEARWEEK FROM CAST('10:00:00' AS TIME));
SELECT EXTRACT(CENTURY FROM CAST('10:00:00' AS TIME));
SELECT EXTRACT(ERA FROM CAST('10:00:00' AS TIME));
SELECT DATE_PART('era', CAST('10:00:00' AS TIME));
SELECT EXTRACT(JULIAN FROM CAST('10:00:00' AS TIME));
SELECT DATE_PART('julian', CAST('10:00:00' AS TIME));
SELECT DATE_PART('julian', CAST('10:00:00' AS TIME));
SELECT x, DATE_PART('${partcode}', x) AS x, DATE_PART(['${partcode}'], x) AS x FROM x WHERE x <> x['${partcode}'];
SELECT x, DATE_PART(['hour', 'minute', 'microsecond'], x) AS x FROM x ORDER BY 1;
SELECT x, DATE_PART(['epoch', 'second', 'timezone', 'timezone_hour', 'timezone_minute'], x) AS x FROM x ORDER BY 1;
SELECT x, EPOCH_NS(x) FROM x ORDER BY ALL;
SELECT x, EPOCH_US(x) FROM x ORDER BY ALL;
SELECT x, EPOCH_MS(x) FROM x ORDER BY ALL;
SELECT x, NANOSECOND(x) FROM x ORDER BY ALL;
SELECT x, DATE_PART(['${datepart}'], x) AS x FROM x ORDER BY 1;
CREATE TABLE x (x TIMETZ);
INSERT INTO x VALUES (NULL), ('00:00:00+1559'), ('00:00:00+1558'), ('02:30:00'), ('02:30:00+04'), ('02:30:00+04:30'), ('02:30:00+04:30:45'), ('16:15:03.123456'), ('02:30:00+1200'), ('02:30:00-1200'), ('24:00:00-1558'), ('24:00:00-1559');
SELECT EXTRACT(SECOND FROM x) FROM x;
SELECT EXTRACT(MINUTE FROM x) FROM x;
SELECT EXTRACT(HOUR FROM x) FROM x;
SELECT EXTRACT(MILLISECONDS FROM x) FROM x;
SELECT EXTRACT(MICROSECONDS FROM x) FROM x;
SELECT EXTRACT(EPOCH FROM x) FROM x;
SET x = 'gregorian';
SET x = 'America/Phoenix';
SELECT CAST('01:00:00' AS TIMETZ) AS x;
SELECT CAST('01:00:00+02' AS TIMETZ) AS x;
CREATE TABLE x AS SELECT CAST(x AS TIMETZ) AS x FROM x AS x;
SELECT TYPEOF(x) FROM (SELECT x FROM x GROUP BY x) LIMIT 1;
BEGIN;
CREATE TEMPORARY TABLE x AS SELECT UUID() AS x FROM x;
CREATE TEMPORARY TABLE x AS SELECT UUID() AS x FROM x;
CREATE TEMPORARY TABLE x AS SELECT UUID() AS x FROM x;
SELECT COUNT(*) FROM (SELECT x FROM x JOIN x ON (x = x) JOIN x ON (x = x)) AS x;
ROLLBACK;
CREATE TABLE x (x UUID NOT NULL DEFAULT UUID(), x INT);
INSERT INTO x (x) VALUES (1), (2), (3), (4), (5), (6), (7), (8), (9), (10);
SELECT COUNT(DISTINCT x) FROM x;
SELECT * FROM x ORDER BY UUID();
SELECT UUID() FROM x;
SELECT DISTINCT SUBSTRING(CAST(UUID() AS TEXT), 15, 1) FROM x;
SELECT DISTINCT SUBSTRING(CAST(UUIDV4() AS TEXT), 15, 1) FROM x;
SELECT DISTINCT SUBSTRING(CAST(UUIDV7() AS TEXT), 15, 1) FROM x;
SELECT DISTINCT SUBSTRING(CAST(UUID() AS TEXT), 20, 1) AS x FROM x ORDER BY x;
SELECT UUID_EXTRACT_VERSION('ac227128-7d55-7ee0-a765-5025cc52e55a');
SELECT UUID_EXTRACT_VERSION(UUIDV7());
SELECT UUID_EXTRACT_VERSION('ac227128-7d55-4ee0-a765-5025cc52e55a');
SELECT UUID_EXTRACT_VERSION(UUIDV4());
SELECT UUID_EXTRACT_VERSION(UUID());
SELECT UUID_EXTRACT_TIMESTAMP(UUIDV4());
SELECT UUID_EXTRACT_TIMESTAMP('81948644-15b2-7170-839a-7a01b9fb5951');
PRAGMA x;
PRAGMA x;
PRAGMA x;
CREATE TABLE x (x INT, x INT);
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (5, 4);
INSERT INTO x (x) VALUES (1);
INSERT INTO x VALUES (1, 1, 1);
INSERT INTO x VALUES (0, 1);
SELECT * FROM x;
PRAGMA x;
CREATE TABLE x (x INT, x INT, x AS (x * x));
CREATE TABLE x (x INT, x INT, x AS (x / x), x AS (x.x * x.x));
CREATE TABLE x (x INT, x INT, x AS (x / x), x AS (x * x));
INSERT INTO x VALUES (5, 4);
SELECT x FROM x, x;
INSERT INTO x VALUES (100, 4);
SELECT x.x FROM x, x;
SELECT x.x FROM x AS x, x AS x;
SELECT x FROM x;
PRAGMA x;
CREATE TABLE x (x INT, x INT, x AS (x * x), x AS (x), x AS (x), x AS (x * x), x AS (x));
INSERT INTO x VALUES (5, 4);
SELECT * FROM x;
ALTER TABLE x DROP COLUMN x;
ALTER TABLE x DROP COLUMN x CASCADE;
SELECT * FROM x;
INSERT INTO x VALUES (5);
SELECT * FROM x;
ALTER TABLE x DROP COLUMN x;
SELECT * FROM x;
ALTER TABLE x DROP COLUMN x CASCADE;
SELECT * FROM x;
PRAGMA x;
CREATE TABLE x (x INT, x AS (CAST((x) AS DATE)));
INSERT INTO x VALUES (5);
CREATE TABLE x (x AS (x), x AS (x), x TEXT, x INT);
INSERT INTO x VALUES ('hello', 42);
SELECT * FROM x;
ALTER TABLE x ALTER COLUMN x SET DATA TYPE BOOLEAN;
PRAGMA x;
CREATE TABLE x (x INT, x AS (x) CHECK (x > 5));
CREATE TABLE x (x INT, x AS (x) CHECK (x > 5));
CREATE TABLE x (x INT, x AS (x), CHECK (x > x));
CREATE TABLE x (x AS (x), x AS (x), x INT, CHECK (x > 5));
INSERT INTO x VALUES (6);
INSERT INTO x VALUES (3);
PRAGMA x;
CREATE TABLE x (x AS (x), x AS (x), x AS (x), x AS (x), x AS (x), x AS (x), x AS (x), x AS (x), x AS (x), x AS (x), x INT);
CREATE TABLE x (x AS (x), x AS (x), x AS (x), x AS (x), x AS (x), x AS (x), x AS (x), x AS (x), x AS (x), x AS (x), x INT);
CREATE TABLE x (x AS (x), x AS (x), x AS (x), x AS (x), x AS (x), x AS (x), x AS (x), x AS (x), x AS (x), x AS (x), x AS (x), x INT);
PRAGMA x;
CREATE TABLE x (x TEXT, x TEXT AS (x) COLLATE NOCASE);
CREATE TABLE x (x AS (x), x AS (x), x TEXT COLLATE x);
INSERT INTO x VALUES ('string'), ('STRING');
PRAGMA x;
CREATE TEMPORARY TABLE x (x AS (1));
CREATE TEMPORARY TABLE x (x AS (1));
CREATE TEMPORARY TABLE x (x AS (1));
CREATE TEMPORARY TABLE x (x AS (1));
SELECT * FROM x;
INSERT INTO x VALUES ('string', 5, 12);
INSERT INTO x VALUES ('string', 5, 12);
INSERT INTO x VALUES (5, 4);
SELECT * FROM x;
ALTER TABLE x DROP COLUMN x;
SELECT x FROM x;
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (5, 4);
INSERT INTO x VALUES (4, 5);
SELECT x FROM x;
SELECT x FROM x;
SELECT * FROM x;
CREATE TABLE x (x AS (x), x AS (x), x INT DEFAULT (5));
PRAGMA x;
CREATE TABLE x (x INT, x INT, x AS (x * x));
INSERT INTO x VALUES (5, 4);
ALTER TABLE x DROP COLUMN x;
SELECT x FROM x;
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (5, 4);
ALTER TABLE x DROP COLUMN x;
CREATE TABLE x (x INT, x AS (x));
ALTER TABLE x DROP COLUMN x;
PRAGMA x;
CREATE TABLE x (x INT UNIQUE);
CREATE TABLE x (x INT, x AS (x) REFERENCES x (x));
CREATE TABLE x (x INT, x AS (x), FOREIGN KEY (x) REFERENCES x (x));
CREATE TABLE x (x INT, x AS (x) UNIQUE);
CREATE TABLE x (x INT, x AS (x));
CREATE TABLE x (x INT, FOREIGN KEY (x) REFERENCES x (x));
CREATE TABLE x (x AS (x), x AS (x), x INT, PRIMARY KEY (x));
CREATE TABLE x (x AS (x), x AS (x), x INT, FOREIGN KEY (x) REFERENCES x (x));
INSERT INTO x VALUES (5);
INSERT INTO x VALUES (5);
PRAGMA x;
CREATE TABLE x (x AS (x), x AS (x), x INT, x TEXT, x TEXT, UNIQUE (x, x));
INSERT INTO x VALUES (1, 'A', 'A_cover'), (2, 'B', 'B_cover'), (3, 'C', 'C_cover'), (4, 'D', 'D_cover');
CREATE TABLE x (x INT, x INT, x TEXT, x TEXT, FOREIGN KEY (x, x) REFERENCES x (x));
CREATE TABLE x (x INT, x INT, x TEXT, x TEXT, FOREIGN KEY (x) REFERENCES x (x, x));
CREATE TABLE x (x INT, x INT, x TEXT, x TEXT, FOREIGN KEY (x, x) REFERENCES x (x, x));
CREATE TABLE x (x INT, x INT, x TEXT, x TEXT, FOREIGN KEY (x, x) REFERENCES x (x, x));
CREATE TABLE x (x INT, x INT, x TEXT, x TEXT, FOREIGN KEY (x, x) REFERENCES x (x, x));
CREATE TABLE x (x INT, x INT, x TEXT, x TEXT, FOREIGN KEY (x, x) REFERENCES x (x, x));
INSERT INTO x VALUES (11, 1, 'A', 'A_song'), (12, 2, 'E', 'B_song'), (13, 3, 'C', 'C_song');
INSERT INTO x VALUES (11, 1, 'A', 'A_song'), (12, 5, 'D', 'B_song'), (13, 3, 'C', 'C_song');
INSERT INTO x VALUES (11, 1, 'A', 'A_song'), (12, 2, 'B', 'B_song'), (13, 3, 'C', 'C_song');
DELETE FROM x WHERE x = 'D';
SELECT * FROM x;
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (5, 4);
SELECT x FROM x;
SELECT x FROM x;
SELECT x FROM x;
INSERT INTO x VALUES (100, 0);
SELECT * FROM x;
CREATE TABLE x (x INT, x INT AS (1));
SELECT x FROM x;
PRAGMA x;
PRAGMA x;
INSERT INTO x VALUES (1, 24), (2342, 123), (23523, 1), (235, 213), (8435, NULL), (NULL, NULL), (345, 213), (12, 5);
INSERT INTO x SELECT x % 20, CAST(RANDOM() AS INT) * 20 FROM x AS x;
CREATE TABLE x AS SELECT * FROM x;
SELECT x FROM x WHERE x = 'tbl' AND CONTAINS(x, 'GENERATED');
SELECT x FROM x WHERE x = 'non_generated' AND CONTAINS(x, 'GENERATED');
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
PRAGMA x;
CREATE TABLE x (x INT, x AS (x + 1));
CREATE TABLE x (x INT, x AS (x + 1));
INSERT INTO x (x) VALUES (1);
SELECT x FROM x;
INSERT INTO x VALUES (5);
SELECT x FROM x;
PRAGMA x;
PRAGMA x;
INSERT INTO x (x) VALUES (5);
INSERT INTO x (x, x) VALUES (1, 10);
INSERT INTO x (x) VALUES (12);
SELECT * FROM x;
INSERT INTO x VALUES (22);
INSERT INTO x VALUES (22, 10);
INSERT INTO x VALUES (22, 10, 10);
CREATE TABLE x (x INT, x BOOLEAN AS (x));
INSERT INTO x VALUES (5);
SELECT * FROM x;
INSERT INTO x VALUES (0);
SELECT * FROM x;
CREATE TABLE x (x TEXT, x BOOLEAN AS (x));
INSERT INTO x VALUES ('test');
PRAGMA x;
CREATE TABLE x (x AS (8), x INT);
SELECT 1 FROM x NATURAL JOIN x AS x GROUP BY x;
CREATE TABLE x (x AS (x * 5), x INT);
INSERT INTO x VALUES (4);
SELECT 1 FROM x NATURAL JOIN x AS x GROUP BY x;
PRAGMA x;
CREATE TABLE x (x INT, x INT, x AS (LIST(5, 4, 3)));
CREATE TABLE x (x INT, x AS (MAP()));
INSERT INTO x VALUES (5);
SELECT * FROM x;
PRAGMA x;
CREATE TABLE x (x INT, x AS NOT (x) NULL);
CREATE TABLE x (x AS (x), x AS (x), x INT NOT NULL);
INSERT INTO x VALUES (5);
INSERT INTO x VALUES (NULL);
PRAGMA x;
CREATE TABLE x (x INT, x INT, x TEXT, x AS (x * x));
INSERT INTO x VALUES (5, 4, 'Soda can');
INSERT INTO x VALUES (5, 8, 'Mars bar');
INSERT INTO x VALUES (4, 5, 'Chewing gum');
SELECT x, COUNT(x), SUM(x), SUM(x) FROM x GROUP BY x ORDER BY ALL;
SELECT x, x, COUNT(x) OVER (PARTITION BY x) AS x, SUM(x) OVER (PARTITION BY x) AS x, SUM(x) OVER (PARTITION BY x) AS x FROM x ORDER BY 1, 2 DESC;
PRAGMA x;
PRAGMA x;
INSERT INTO x (x, x) VALUES (1, 10);
SELECT * FROM x;
PRAGMA x;
CREATE TABLE x (x INT, x AS (x) PRIMARY KEY);
CREATE TABLE x (x INT, x AS (x), PRIMARY KEY (x));
CREATE TABLE x (x AS (x), x AS (x), x INT PRIMARY KEY);
INSERT INTO x VALUES (5);
INSERT INTO x VALUES (5);
PRAGMA x;
CREATE TABLE x (x INT, x INT, x AS (x * x), x AS (x * 5));
INSERT INTO x VALUES (5, 4);
INSERT INTO x VALUES (4, 5);
SELECT * FROM x;
CREATE TABLE x (x INT AS (x), x INT AS (x));
CREATE TABLE x (x INT, x AS (x * x), x AS (x));
CREATE TABLE x (x INT AS (x), x INT, x AS (x));
CREATE TABLE x (x INT, x INT AS (x), x AS (x * x));
CREATE TABLE x (x INT, x AS (x), x AS (x), x AS (x * x), x AS (x * x * x), x AS ((x * x) + x), x AS (x - (x + x) + (x * x)));
INSERT INTO x VALUES (5);
SELECT * FROM x;
INSERT INTO x VALUES (5);
SELECT * FROM x;
PRAGMA x;
CREATE TABLE x (x INT, x INT, x AS (x * x));
INSERT INTO x VALUES (5, 4);
SELECT x FROM x;
ALTER TABLE x RENAME COLUMN x TO x;
SELECT x FROM x;
PRAGMA x;
CREATE TABLE x (x INT, x INT, x AS (x * x), x AS (x), x AS (5 + 3));
INSERT INTO x VALUES (5, 4);
SELECT x FROM x;
ALTER TABLE x RENAME COLUMN x TO x;
ALTER TABLE x DROP COLUMN x;
SELECT * FROM x;
PRAGMA x;
CREATE TABLE x (x INT, x INT, x AS (x * x));
INSERT INTO x VALUES (5, 4);
ALTER TABLE x RENAME TO x;
SELECT * FROM x;
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (5, 4);
INSERT INTO x VALUES (4, 5);
ALTER TABLE x ADD COLUMN x INT;
ALTER TABLE x ADD COLUMN x INT;
ALTER TABLE x ADD COLUMN x INT;
INSERT INTO x VALUES (5);
SELECT x FROM x;
PRAGMA x;
CREATE TABLE x (x INT, x INT GENERATED ALWAYS AS (x), x INT);
CREATE INDEX x ON x(x);
INSERT INTO x (x) VALUES (2);
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (5, 4);
CREATE TABLE x (x INT, x INT, x AS (x * x));
INSERT INTO x VALUES (5, 4);
SELECT x FROM x;
SELECT * FROM x;
SELECT x.* FROM x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
SELECT x, x FROM x;
PRAGMA x;
CREATE TABLE x (x INT, x INT, x AS (x * x));
INSERT INTO x VALUES (5, 4);
SELECT x FROM x;
ALTER TABLE x ALTER COLUMN x SET DATA TYPE BOOLEAN;
INSERT INTO x VALUES (5, 0);
CREATE TABLE x (x INT, x DATE AS (x * 5));
INSERT INTO x VALUES (5);
PRAGMA x;
CREATE TABLE x (x INT, x INT, x AS (x * x));
INSERT INTO x VALUES (5, 4);
SELECT x FROM x;
ALTER TABLE x ALTER COLUMN x SET DATA TYPE BOOLEAN;
SELECT x FROM x;
SELECT * FROM x;
PRAGMA x;
CREATE TABLE x (x TEXT, x AS (CONCAT(x, x)), x AS (x), x AS (x), x AS (CONCAT(x, x)), x TEXT);
INSERT INTO x VALUES ('string', 'test');
SELECT * FROM x;
PRAGMA x;
CREATE TABLE x (x INT, x AS (x) UNIQUE);
CREATE TABLE x (x INT, x AS (x), UNIQUE (x));
CREATE TABLE x (x AS (x), x AS (x), x INT UNIQUE);
INSERT INTO x VALUES (5);
INSERT INTO x VALUES (5);
PRAGMA x;
PRAGMA x;
INSERT INTO x VALUES (5, DEFAULT);
INSERT INTO x VALUES (10, 3);
SELECT * FROM x;
UPDATE x SET x = 5;
UPDATE x SET x = 3;
SELECT * FROM x;
UPDATE x SET x = 9001 WHERE (x = 3);
SELECT * FROM x;
UPDATE x SET x = 0 WHERE (x < 9000);
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SET x = 1;
SELECT * FROM x;
SET x = 1;
SELECT * FROM x;
SELECT * FROM x;
SELECT x FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
PRAGMA x;
SET x = TRUE;
CREATE TABLE x (x INT, x TEXT UNIQUE, x AS (2 * x), x INT, x TEXT, PRIMARY KEY (x, x));
CREATE UNIQUE INDEX x ON x((x || 'hello'), (x + 42));
CREATE INDEX x ON x(x, x, x);
CREATE UNIQUE INDEX x ON x(x);
INSERT INTO x VALUES (1, 'hello', 1, 'hello');
INSERT INTO x VALUES (2, 'hello', 1, 'world') ON CONFLICT(x, x) DO UPDATE SET x = x.x, x = x.x;
SELECT x, x, x, x, x FROM x WHERE x = 1;
INSERT INTO x VALUES (2, 'hola', 5, 'world');
INSERT INTO x VALUES (3, 'hoi', 1, 'wereld');
INSERT INTO x VALUES (3, 'hoi', 2, 'wereld');
SELECT x, x, x, x, x FROM x ORDER BY ALL;
INSERT INTO x VALUES (42, 'hoi', 2, 'welt');
BEGIN;
INSERT INTO x VALUES (42, 'hoii', 22, 'welt');
BEGIN;
DELETE FROM x;
INSERT INTO x VALUES (200, 'hello', 1, 'world'), (300, 'hoi', 2, 'wereld');
SELECT x, x, x, x, x FROM x WHERE x = 2;
SELECT x, x, x, x, x FROM x WHERE x = 1;
COMMIT;
SELECT x, x, x, x, x FROM x ORDER BY ALL;
SELECT x, x, x, x, x FROM x WHERE x = 2;
SELECT x, x, x, x, x FROM x WHERE x = 1;
SELECT x, x, x, x, x FROM x WHERE x = 2;
SELECT x, x, x, x, x FROM x WHERE x = 1;
COMMIT;
SELECT x, x, x, x, x FROM x ORDER BY ALL;
CREATE TABLE x (x INT PRIMARY KEY);
CREATE TABLE x (x INT PRIMARY KEY);
BEGIN;
BEGIN;
BEGIN;
COMMIT;
SELECT COUNT(*), SUM(x) FROM x;
SELECT COUNT(*), SUM(x) FROM x;
PRAGMA x;
CREATE TABLE x (x INT PRIMARY KEY, x TEXT);
CREATE TABLE x (x INT PRIMARY KEY, x TEXT);
INSERT INTO x VALUES (1, 'row 1');
INSERT INTO x VALUES (1, 'row 1 from test 2');
SELECT x, x FROM x;
BEGIN;
DELETE FROM x WHERE x = 1;
SELECT x, x FROM x;
INSERT INTO x SELECT * FROM x;
SELECT x, x FROM x;
COMMIT;
SELECT x, x FROM x;
PRAGMA x;
SET x = TRUE;
CREATE TABLE x (x INT PRIMARY KEY, x INT);
CREATE TABLE x (x INT PRIMARY KEY, x INT REFERENCES x (x));
INSERT INTO x VALUES (1, 1);
INSERT INTO x VALUES (1, NULL);
UPDATE x SET x = 1 WHERE x = 1;
SELECT x, x, x FROM x WHERE x = 1;
CREATE TABLE x (x INT PRIMARY KEY, x UNION(x INT));
INSERT INTO x SELECT 1, 41;
UPDATE x SET x = 42 WHERE x = 1;
SELECT x, x, x FROM x WHERE x = 1;
CREATE TABLE IF NOT EXISTS x (x INT PRIMARY KEY NOT NULL, x TEXT UNIQUE NOT NULL, x TEXT NOT NULL);
INSERT INTO x VALUES (1, 'wagner', '123');
UPDATE x SET x = '345' WHERE x = 1;
UPDATE x SET x = 'leo' WHERE x = 1;
SELECT x, x, x, x FROM x WHERE x = 1;
CREATE TABLE x (x INT PRIMARY KEY);
INSERT INTO x VALUES (1);
BEGIN;
UPDATE x SET x = 4 WHERE x = 1;
INSERT INTO x VALUES (1);
COMMIT;
SELECT x, x FROM x ORDER BY ALL;
SELECT x, x FROM x WHERE x = 1;
SELECT x, x FROM x WHERE x = 4;
CREATE TABLE x (x INT PRIMARY KEY, x TEXT NOT NULL UNIQUE, x TEXT NOT NULL);
INSERT INTO x VALUES (1, 'abc', 'def'), (2, 'asdf', 'jkl');
UPDATE x SET x = 'ghi', x = 'mno' WHERE x = 2;
SELECT x, x, x, x FROM x ORDER BY ALL;
CREATE TABLE x (x INT NOT NULL PRIMARY KEY);
CREATE TABLE x (x INT NOT NULL PRIMARY KEY, x INT NOT NULL, FOREIGN KEY (x) REFERENCES x (x));
INSERT INTO x (x) VALUES (1), (2);
INSERT INTO x (x, x) VALUES (1, 1);
UPDATE x SET x = 2 WHERE x = 1;
SELECT x, x, x FROM x WHERE x = 1;
CREATE TABLE x (x TEXT NOT NULL, x TEXT NULL, x TEXT NOT NULL, PRIMARY KEY (x, x));
CREATE UNIQUE INDEX x ON x(x);
CREATE UNIQUE INDEX x ON x(x);
INSERT INTO x (x, x, x) VALUES ('key1', 'name1', 'value1');
UPDATE x SET x = 'new_value' WHERE x = 'key1' AND x = 'name1';
SELECT x, x, x, x FROM x;
CREATE TABLE x (x INT PRIMARY KEY, x MAP(TEXT, TEXT));
INSERT INTO x VALUES (1, MAP(['a'], ['b']));
UPDATE x SET x = MAP(['c'], ['d']) WHERE x = 1;
SELECT x, x FROM x WHERE x = 1;
CREATE TABLE x (x INT PRIMARY KEY, x UNION(x INT));
INSERT INTO x SELECT 1, 41;
UPDATE x SET x = 42 WHERE x = 1;
SELECT x, x, x FROM x;
CREATE TABLE x (x INT PRIMARY KEY, x TEXT);
INSERT INTO x SELECT x, CAST(x AS TEXT) FROM x AS x;
BEGIN;
DELETE FROM x WHERE x IN (SELECT x FROM x AS x);
INSERT OR REPLACE INTO x SELECT x, CAST((x * 2) AS TEXT) FROM x AS x;
COMMIT;
SELECT COUNT(*), MIN(x), MAX(x) FROM x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 100), (2, 200);
CREATE UNIQUE INDEX x ON x(x);
INSERT OR IGNORE INTO x VALUES (1, 101), (2, 201);
SELECT x, x FROM x ORDER BY ALL;
INSERT INTO x VALUES (1, 101), (2, 201) ON CONFLICT DO NOTHING;
SELECT x, x FROM x ORDER BY ALL;
PRAGMA x;
CREATE OR REPLACE TABLE x (x UUID, x STRUCT(x TEXT)[], x STRUCT(x TEXT, x DOUBLE), x STRUCT(x INT)[], x TEXT);
CREATE OR REPLACE TABLE x (x UUID, x STRUCT(x TEXT)[], x STRUCT(x TEXT, x DOUBLE), x STRUCT(x INT)[]);
INSERT INTO x (x, x) (SELECT x, SUBSTRING(CAST(x AS TEXT), 1, 8) AS x FROM (SELECT UUID() AS x FROM x));
INSERT INTO x (SELECT x, [{'x': 'aaaa'}, {'x': 'rrrr'}], {'x': 'ddd', 'x': -9.0}, [{'x': 99}, {'x': 100}, {'x': 101}] FROM x WHERE x % 2 = 0);
ALTER TABLE x ADD PRIMARY KEY (x);
ALTER TABLE x ADD PRIMARY KEY (x);
PRAGMA x;
SET x = '10.0 GB';
PRAGMA x;
CREATE TABLE x (x INT PRIMARY KEY);
INSERT INTO x VALUES (1);
BEGIN;
DELETE FROM x WHERE x = 1;
INSERT INTO x VALUES (1);
COMMIT;
INSERT INTO x VALUES (1);
PRAGMA x;
CREATE TABLE x (x INT PRIMARY KEY, x INT);
INSERT INTO x VALUES (1, 4);
BEGIN;
INSERT INTO x SELECT x AS x, NULL AS x FROM x AS x;
INSERT INTO x VALUES (1, 5);
ROLLBACK;
SELECT x FROM x WHERE x = 1;
SELECT * FROM x;
BEGIN;
INSERT INTO x SELECT x AS x, -x AS x FROM x AS x;
INSERT INTO x VALUES (1, 5);
ROLLBACK;
SELECT x FROM x WHERE x = 1;
SELECT * FROM x;
PRAGMA x;
CREATE TABLE x (x BIGINT PRIMARY KEY, x BIGINT[]);
INSERT INTO x VALUES (1, [1, 2, 3]), (2, [42]);
SELECT x, x, x FROM x ORDER BY ALL;
UPDATE x SET x = [1, 2, 4] WHERE x = 1;
SELECT x, x, x FROM x ORDER BY ALL;
INSERT OR REPLACE INTO x VALUES (2, [43]);
INSERT OR REPLACE INTO x VALUES (2, [44]);
SELECT x, x, x FROM x ORDER BY ALL;
PRAGMA x;
SET x = TRUE;
CREATE TABLE x (x INT PRIMARY KEY, x TEXT[]);
INSERT INTO x VALUES (1, ['first payload']);
BEGIN;
INSERT INTO x VALUES (5, ['old payload']);
BEGIN;
DELETE FROM x;
INSERT INTO x VALUES (1, ['con1 payload']);
SELECT x, x, x FROM x WHERE x = 1;
BEGIN;
DELETE FROM x;
ROLLBACK;
COMMIT;
SELECT x, x, x FROM x WHERE x = 1;
SELECT x, x, x FROM x WHERE x = 1;
COMMIT;
SELECT x, x, x FROM x ORDER BY ALL;
PRAGMA x;
SET x = TRUE;
CREATE TABLE x (x INT PRIMARY KEY, x TEXT[]);
INSERT INTO x VALUES (1, ['first payload']);
BEGIN;
DELETE FROM x;
INSERT INTO x VALUES (1, ['con1 payload']);
INSERT INTO x VALUES (1, ['con1 payload']);
SELECT 42;
ROLLBACK;
SELECT x, x, x FROM x ORDER BY ALL;
PRAGMA x;
SET x = TRUE;
CREATE TABLE x (x INT PRIMARY KEY, x TEXT);
INSERT INTO x VALUES (1, 'first payload');
BEGIN;
INSERT INTO x VALUES (5, 'old payload');
BEGIN;
DELETE FROM x;
INSERT INTO x VALUES (1, 'con1 payload');
SELECT x, x, x FROM x WHERE x = 1;
BEGIN;
DELETE FROM x;
ROLLBACK;
COMMIT;
SELECT x, x, x FROM x WHERE x = 1;
SELECT x, x, x FROM x WHERE x = 1;
COMMIT;
SELECT x, x, x FROM x ORDER BY ALL;
PRAGMA x;
SET x = TRUE;
CREATE TABLE x (x INT PRIMARY KEY, x TEXT[]);
INSERT INTO x VALUES (1, ['first payload']);
BEGIN;
BEGIN;
DELETE FROM x WHERE x = 1;
INSERT INTO x VALUES (1, ['con1 payload']);
COMMIT;
BEGIN;
DELETE FROM x WHERE x = 1;
INSERT INTO x VALUES (1, ['con2 payload']);
COMMIT;
COMMIT;
SELECT x, x, x FROM x WHERE x = 1;
PRAGMA x;
SET x = TRUE;
CREATE TABLE x (x INT PRIMARY KEY, x TEXT[]);
INSERT INTO x SELECT x, [x || ' payload'] FROM x;
UPDATE x SET x = x + 5 RETURNING x, x;
INSERT INTO x SELECT x + 10, [(x + 10) || ' payload'] FROM x;
UPDATE x SET x = x + 1 RETURNING x, x;
PRAGMA x;
SET x = TRUE;
CREATE TABLE x (x INT PRIMARY KEY, x TEXT[]);
INSERT INTO x SELECT x, [x || ' payload'] FROM x;
DELETE FROM x USING x AS x RETURNING x, x;
PRAGMA x;
SET x = TRUE;
CREATE TABLE x (x INT PRIMARY KEY, x TEXT[]);
INSERT INTO x VALUES (1, ['first payload']), (2, ['second payload']);
BEGIN;
INSERT INTO x VALUES (5, ['old payload']);
BEGIN;
UPDATE x SET x = ['con1 payload'] WHERE x = 1;
UPDATE x SET x = 3 WHERE x = 2;
INSERT INTO x VALUES (2, ['new payload']);
SELECT x, x, x FROM x WHERE x = 1;
SELECT x, x, x FROM x WHERE x = 2;
BEGIN;
UPDATE x SET x = ['second payload'] WHERE x = 1;
ROLLBACK;
COMMIT;
SELECT x, x, x FROM x WHERE x = 1;
SELECT x, x, x FROM x WHERE x = 2;
SELECT x, x, x FROM x WHERE x = 3;
SELECT x, x, x FROM x WHERE x = 1;
SELECT x, x, x FROM x WHERE x = 2;
COMMIT;
SELECT x, x, x FROM x ORDER BY ALL;
PRAGMA x;
SET x = TRUE;
CREATE TABLE x (x INT PRIMARY KEY, x TEXT);
INSERT INTO x VALUES (1, 'first payload');
BEGIN;
INSERT INTO x VALUES (5, 'old payload');
BEGIN;
UPDATE x SET x = 3 WHERE x = 1;
INSERT INTO x VALUES (1, 'new payload');
SELECT x, x, x FROM x WHERE x = 1;
BEGIN;
UPDATE x SET x = 'second payload' WHERE x = 1;
SELECT x, x FROM x WHERE x = 1;
SELECT x, x FROM x WHERE x = 3;
SELECT x, x FROM x WHERE x = 1;
COMMIT;
SELECT x, x, x FROM x WHERE x = 1;
SELECT x, x, x FROM x WHERE x = 3;
COMMIT;
SELECT x, x, x FROM x WHERE x = 3;
SELECT x, x, x FROM x WHERE x = 1;
SELECT x, x, x FROM x WHERE x = 1;
COMMIT;
SELECT x, x, x FROM x ORDER BY ALL;
PRAGMA x;
SET x = TRUE;
CREATE TABLE x (x INT PRIMARY KEY, x TEXT[]);
INSERT INTO x VALUES (1, ['first payload']);
BEGIN;
UPDATE x SET x = ['con1 payload'] WHERE x = 1;
INSERT INTO x VALUES (1, ['con1 payload']);
SELECT 42;
ROLLBACK;
SELECT x, x, x FROM x ORDER BY ALL;
PRAGMA x;
SET x = TRUE;
CREATE TABLE x (x INT PRIMARY KEY, x TEXT[]);
INSERT INTO x VALUES (1, ['first payload']);
BEGIN;
BEGIN;
UPDATE x SET x = ['con1 payload'] WHERE x = 1;
COMMIT;
BEGIN;
UPDATE x SET x = ['con2 payload'] WHERE x = 1;
COMMIT;
COMMIT;
SELECT x, x, x FROM x WHERE x = 1;
PRAGMA x;
SET x = TRUE;
CREATE TABLE x (x INT PRIMARY KEY, x TEXT[]);
INSERT INTO x VALUES (1, ['first payload']);
BEGIN;
INSERT INTO x VALUES (5, ['old payload']);
BEGIN;
INSERT OR REPLACE INTO x VALUES (1, ['con1 payload']);
SELECT x, x, x FROM x WHERE x = 1;
BEGIN;
INSERT OR REPLACE INTO x VALUES (1, ['second payload']);
ROLLBACK;
COMMIT;
SELECT x, x, x FROM x WHERE x = 1;
SELECT x, x, x FROM x WHERE x = 1;
COMMIT;
SELECT x, x, x FROM x ORDER BY ALL;
PRAGMA x;
SET x = TRUE;
CREATE TABLE x (x INT PRIMARY KEY, x TEXT[]);
INSERT INTO x VALUES (1, ['first payload']);
BEGIN;
INSERT OR REPLACE INTO x VALUES (1, ['con1 payload']);
INSERT OR REPLACE INTO x VALUES (1, ['local payload']);
SELECT x, x, x FROM x WHERE x = 1;
COMMIT;
SELECT x, x, x FROM x WHERE x = 1;
BEGIN;
INSERT OR REPLACE INTO x VALUES (1, ['val1 payload']), (1, ['val2 payload']);
COMMIT;
SELECT x, x, x FROM x WHERE x = 1;
PRAGMA x;
SET x = TRUE;
CREATE TABLE x (x INT PRIMARY KEY, x TEXT[]);
INSERT INTO x VALUES (1, ['first payload']);
BEGIN;
INSERT OR REPLACE INTO x VALUES (1, ['con1 payload']);
INSERT INTO x VALUES (2, ['second payload']);
INSERT INTO x VALUES (2, ['second payload']);
SELECT 42;
ROLLBACK;
SELECT x, x, x FROM x ORDER BY ALL;
PRAGMA x;
SET x = TRUE;
CREATE TABLE x (x INT PRIMARY KEY, x TEXT[]);
INSERT INTO x VALUES (1, ['first payload']);
BEGIN;
BEGIN;
INSERT OR REPLACE INTO x VALUES (1, ['con1 payload']);
COMMIT;
BEGIN;
INSERT OR REPLACE INTO x VALUES (1, ['con2 payload']);
COMMIT;
COMMIT;
SELECT x, x, x FROM x WHERE x = 1;
PRAGMA x;
CREATE TABLE x (x TEXT NOT NULL, x TEXT NOT NULL, x INT, PRIMARY KEY (x));
CREATE INDEX x ON x(x);
PRAGMA x;
CREATE TABLE x ("x" TEXT PRIMARY KEY, "x" TEXT, x BIGINT, "x" BOOLEAN);
CREATE INDEX x ON x(x);
INSERT OR REPLACE INTO x VALUES ('/key', 'value', 0, FALSE);
SELECT x, x, x, x FROM x;
INSERT OR REPLACE INTO x VALUES ('/key', 'value', 10000000, FALSE);
SELECT x, x, x, x FROM x;
INSERT INTO x VALUES ('/key', 'value', 10000000, FALSE) ON CONFLICT DO UPDATE SET x = x.x, x = x.x, x = x.x;
SELECT x, x, x, x FROM x;
PRAGMA x;
PRAGMA x = TRUE;
CREATE TABLE x AS SELECT x AS x FROM x;
BEGIN;
CREATE INDEX IF NOT EXISTS x ON x(x);
BEGIN;
CREATE INDEX IF NOT EXISTS x ON x(x);
COMMIT;
COMMIT;
SELECT COUNT(*) FROM x;
DROP INDEX x;
CREATE INDEX IF NOT EXISTS x ON x(x);
CREATE INDEX IF NOT EXISTS x ON x(x);
CREATE INDEX x ON x(x);
SELECT COUNT(*) FROM x;
PRAGMA x;
SET x = TRUE;
CREATE TABLE x (x INT);
INSERT INTO x SELECT * FROM x;
BEGIN;
DELETE FROM x WHERE x = 2 OR x = 7;
SELECT * FROM x WHERE x = 1;
SELECT * FROM x WHERE x = 2;
CREATE INDEX x ON x(x);
SELECT * FROM x WHERE x = 1;
SELECT * FROM x WHERE x = 2;
SELECT * FROM x WHERE x = 1;
SELECT * FROM x WHERE x = 2;
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x SELECT * FROM x;
DELETE FROM x;
INSERT INTO x SELECT * FROM x;
CREATE INDEX x ON x(x);
SELECT * FROM x WHERE x = 1;
SELECT * FROM x WHERE x = 2;
PRAGMA x;
CREATE TABLE x (x INT);
BEGIN;
INSERT INTO x SELECT * FROM x AS x;
INSERT INTO x SELECT * FROM x AS x;
INSERT INTO x SELECT * FROM x AS x;
INSERT INTO x SELECT * FROM x AS x;
COMMIT;
CREATE INDEX x ON x(x);
SELECT COUNT(x) FROM x WHERE x > 1 AND x < 3;
SELECT COUNT(x) FROM x WHERE x >= 1 AND x < 3;
SELECT COUNT(x) FROM x WHERE x > 1;
SELECT COUNT(x) FROM x WHERE x < 4;
SELECT COUNT(x) FROM x WHERE x < 5;
DROP INDEX x;
PRAGMA x;
BEGIN;
CREATE TABLE x (x INT);
INSERT INTO x SELECT * FROM x AS x;
INSERT INTO x SELECT * FROM x AS x;
INSERT INTO x SELECT * FROM x AS x;
INSERT INTO x SELECT * FROM x AS x;
INSERT INTO x SELECT * FROM x AS x;
COMMIT;
DELETE FROM x WHERE x = 5;
CREATE INDEX x ON x(x);
SELECT COUNT(x) FROM x WHERE x > 1 AND x < 3;
SELECT COUNT(x) FROM x WHERE x >= 1 AND x < 3;
SELECT COUNT(x) FROM x WHERE x > 1;
SELECT COUNT(x) FROM x WHERE x < 4;
SELECT COUNT(x) FROM x WHERE x < 5;
PRAGMA x;
CREATE TABLE x (x INT);
CREATE UNIQUE INDEX x ON x(x);
INSERT INTO x (x) VALUES (1);
INSERT INTO x (x) VALUES (1);
SELECT * FROM x WHERE x.x = 1;
CREATE TABLE x (x INT);
INSERT INTO x SELECT x FROM x;
INSERT INTO x SELECT x + 10000 FROM x;
INSERT INTO x VALUES (2047);
CREATE UNIQUE INDEX x ON x(x);
PRAGMA x;
CREATE TABLE x (x INT, x TEXT, x INT);
INSERT INTO x VALUES (1, 1, 1);
INSERT INTO x VALUES (2, 2, 2);
CREATE TABLE x (x INT, x INT, x INT);
INSERT INTO x VALUES (1, 1, 1);
INSERT INTO x VALUES (2, 2, 2);
CREATE TABLE x (x TEXT, x INT, x INT);
INSERT INTO x VALUES ('t1', 1, 1);
INSERT INTO x VALUES ('t2', 2, 2);
SELECT x FROM x WHERE x = 1;
CREATE INDEX x ON x(x);
SELECT x FROM x WHERE x = 1;
CREATE INDEX x ON x(x);
SELECT x FROM x WHERE x = 1;
CREATE INDEX x ON x(x);
SELECT x FROM x WHERE x = 1;
DROP INDEX IF EXISTS x;
SELECT x FROM x WHERE x = 1;
PRAGMA x;
CREATE TABLE x (x INT, x INT, x BOOLEAN);
CREATE INDEX ON x(x);
CREATE INDEX x ON x(x COLLATE "x");
CREATE INDEX x ON x(x COLLATE "x");
CREATE INDEX x ON x USING blabla(x);
CREATE INDEX x ON x(x);
CREATE TABLE x (x INT, x INT[]);
CREATE INDEX x ON x(x);
CREATE INDEX x ON x(x, x);
CREATE INDEX x ON x(('hello'));
CREATE TABLE x (x BLOB);
INSERT INTO x SELECT REPEAT('k', 1000000);
INSERT INTO x SELECT CAST(CAST(x AS TEXT) AS BLOB) FROM x;
INSERT INTO x SELECT REPEAT('k', 1000000);
INSERT INTO x SELECT CAST(CAST(x AS TEXT) AS BLOB) || 'other' FROM x;
INSERT INTO x SELECT REPEAT('k', 1000000);
CREATE INDEX x ON x(x);
CREATE TABLE x (x BLOB);
INSERT INTO x SELECT REPEAT('k', 122879);
INSERT INTO x SELECT CAST(CAST(x AS TEXT) AS BLOB) FROM x;
INSERT INTO x SELECT REPEAT('k', 122879);
INSERT INTO x SELECT CAST(CAST(x AS TEXT) AS BLOB) || 'other' FROM x;
INSERT INTO x SELECT REPEAT('k', 122879);
SET x = TRUE;
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x SELECT * FROM x;
BEGIN;
UPDATE x SET x = x + 1;
BEGIN;
UPDATE x SET x = x + 1;
BEGIN;
UPDATE x SET x = x + 1;
CREATE INDEX x ON x USING art(x);
SELECT SUM(x) FROM x;
SELECT SUM(x) FROM x WHERE x > 0;
SELECT SUM(x) FROM x;
SELECT SUM(x) FROM x WHERE x > 0;
SELECT SUM(x) FROM x;
SELECT SUM(x) FROM x WHERE x > 0;
SELECT SUM(x) FROM x;
SELECT SUM(x) FROM x WHERE x > 0;
PRAGMA x;
CREATE TABLE x (x INT);
CREATE INDEX x ON x USING art(x);
INSERT INTO x VALUES (1);
SELECT * FROM x WHERE x < 3;
SELECT * FROM x WHERE x <= 1;
SELECT * FROM x WHERE x > 0;
SELECT * FROM x WHERE x >= 1;
SELECT * FROM x WHERE x = 1;
SELECT * FROM x WHERE x < 1;
SELECT * FROM x WHERE x <= 0;
SELECT * FROM x WHERE x > 1;
SELECT * FROM x WHERE x >= 2;
SELECT * FROM x WHERE x = 2;
PRAGMA x;
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x AS x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x WHERE x < 1000000;
ATTACH '__TEST_DIR__/artupdates.db' AS x;
USE x;
USE x;
UPDATE x SET x = 725 WHERE x = 34165;
UPDATE x SET x = 663 WHERE x = 42638;
UPDATE x SET x = 210 WHERE x = 11288;
UPDATE x SET x = 805 WHERE x = 764;
UPDATE x SET x = 782 WHERE x = 10151;
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
SELECT COUNT(*) FROM x WHERE x >= 0;
DELETE FROM x WHERE x = (SELECT x FROM x ORDER BY RANDOM() LIMIT 1);
DELETE FROM x WHERE x = (SELECT x FROM x ORDER BY RANDOM() LIMIT 1);
DELETE FROM x WHERE x = (SELECT x FROM x ORDER BY RANDOM() LIMIT 1);
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3), (4), (5), (6);
CREATE TABLE x (x INT);
CREATE INDEX x ON x USING art(x);
INSERT INTO x SELECT * FROM x WHERE x % 2 = 0;
SELECT * FROM x WHERE x < 3 ORDER BY 1;
SELECT * FROM x ORDER BY 1;
SELECT * FROM x WHERE x > 3 ORDER BY 1;
SELECT * FROM x WHERE x <= 3 ORDER BY 1;
SELECT * FROM x WHERE x >= 3 ORDER BY 1;
UPDATE x SET x = 3 WHERE x = 4;
SELECT * FROM x WHERE x < 3 ORDER BY 1;
SELECT * FROM x WHERE x <= 3 ORDER BY 1;
SELECT * FROM x WHERE x > 3 ORDER BY 1;
SELECT * FROM x WHERE x >= 3 ORDER BY 1;
DELETE FROM x WHERE x > 3;
SELECT * FROM x WHERE x > 0 ORDER BY 1;
SELECT * FROM x WHERE x < 3 ORDER BY 1;
PRAGMA x;
CREATE TABLE x (x INT);
CREATE INDEX x ON x USING art(x);
INSERT INTO x VALUES (1);
BEGIN;
UPDATE x SET x = 10 WHERE x = 1;
SELECT * FROM x WHERE x < 5;
SELECT * FROM x WHERE x > 0;
SELECT * FROM x WHERE x < 5;
SELECT * FROM x WHERE x > 0;
PRAGMA x;
CREATE TABLE x (x INT, x INT);
CREATE INDEX x ON x USING art(x);
INSERT INTO x VALUES (1, 2), (2, 2);
UPDATE x SET x = 10 WHERE x = 1;
UPDATE x SET x = 10 WHERE x = 0;
DELETE FROM x WHERE x = 1;
SELECT * FROM x WHERE x > 5;
PRAGMA x;
CREATE TABLE x (x INT);
CREATE INDEX x ON x USING art(x);
INSERT INTO x VALUES (1);
SELECT * FROM x WHERE x > 0;
SELECT * FROM x WHERE x > 0;
SELECT * FROM x WHERE x > 0;
SELECT * FROM x WHERE x > 0;
ROLLBACK;
SELECT * FROM x WHERE x > 0;
SELECT * FROM x WHERE x > 0;
SELECT * FROM x WHERE x > 0;
SELECT * FROM x WHERE x > 0;
COMMIT;
SELECT * FROM x WHERE x > 0;
PRAGMA x;
BEGIN;
CREATE TABLE x (x INT);
CREATE INDEX x ON x(x);
INSERT INTO x SELECT * FROM x;
COMMIT;
SELECT SUM(x), COUNT(x) FROM x WHERE x > 0;
SELECT MIN(x), MAX(x) FROM x ORDER BY 1;
UPDATE x SET x = x + 1 WHERE x > 0;
SELECT MIN(x), MAX(x) FROM x ORDER BY 1;
SELECT COUNT(DISTINCT x) FROM x ORDER BY 1;
SELECT SUM(x), COUNT(x) FROM x WHERE x > 0;
DELETE FROM x WHERE x > 0;
SELECT SUM(x), COUNT(x) FROM x WHERE x > 0;
CREATE TABLE x (x INT PRIMARY KEY);
INSERT INTO x SELECT * FROM x;
SELECT COUNT(*) FROM x;
DELETE FROM x;
INSERT INTO x SELECT * FROM x;
SELECT COUNT(*) FROM x;
PRAGMA x;
CREATE TABLE x (x DECIMAL(4, 3));
INSERT INTO x (x) VALUES (1), (-0.505);
CREATE INDEX x ON x(TRY_CAST(x AS USMALLINT));
INSERT INTO x (x) VALUES (2), (3);
CREATE TABLE x (x TEXT);
CREATE INDEX x ON x(x);
INSERT INTO x VALUES (CAST(DECODE(CAST('g\x00' AS BLOB)) AS TEXT)), ('g');
INSERT INTO x VALUES ('\0');
CREATE INDEX x ON x(x);
CREATE TABLE x (x INT);
INSERT INTO x VALUES (0), (85491);
CREATE INDEX x ON x(x, (TRY_CAST(x AS USMALLINT)));
CREATE TABLE x (x BOOLEAN);
CREATE INDEX x ON x(x);
INSERT INTO x VALUES (1), (0), (1), (1);
UPDATE x SET x = NULL;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (2), (1), (1), (540000);
CREATE UNIQUE INDEX x ON x(x);
CREATE TABLE x (x INT);
CREATE INDEX x ON x(x, DECODE(CAST('\x00' AS BLOB)));
PRAGMA x;
CREATE TABLE x (x DOUBLE, x TIMESTAMP DEFAULT (CAST('1970-01-04 12:58:32' AS TIMESTAMP)));
INSERT INTO x (x, x) VALUES (CAST('1969-12-28 23:02:08' AS TIMESTAMP), 1);
INSERT INTO x (x) VALUES (DEFAULT);
PRAGMA x;
BEGIN;
CREATE TABLE x (x INT, x TEXT NOT NULL, x TEXT NOT NULL);
CREATE SEQUENCE x;
CREATE TABLE x (x INT DEFAULT NEXTVAL('seq'), x INT DEFAULT 0, x TEXT, x TEXT);
CREATE INDEX x ON x(x);
INSERT INTO x (x, x) VALUES ('n2880', 'n3966');
COMMIT;
BEGIN;
INSERT INTO x SELECT 1, x, x FROM (SELECT DISTINCT x.x AS x, x.x AS x FROM x AS x WHERE x.x = 0 AND TRUE AND NOT EXISTS(SELECT * FROM x AS x WHERE x.x = x.x AND x.x = x.x));
SELECT 1, x, x FROM (SELECT DISTINCT x.x AS x, x.x AS x FROM x AS x, x AS x WHERE x.x = 0 AND x.x = x.x AND NOT EXISTS(SELECT * FROM x AS x WHERE x.x = x.x AND x.x = x.x));
PRAGMA x;
CREATE TABLE x (x TEXT PRIMARY KEY, x TEXT);
INSERT INTO x SELECT CONCAT('key_', CAST(x AS TEXT)), CONCAT('value_', CAST(x AS TEXT)) FROM x AS x WHERE RANDOM() < 0.5;
CREATE TABLE x (x TEXT PRIMARY KEY);
INSERT INTO x SELECT CONCAT('key_', CAST(x AS TEXT)) FROM x AS x;
PRAGMA x;
CREATE TABLE x (x TEXT NOT NULL);
CREATE UNIQUE INDEX x ON x(x);
CREATE TABLE x (x DATE NOT NULL);
CREATE TABLE x (x DATE NOT NULL);
INSERT INTO x VALUES (CAST('2008-02-29' AS DATE));
INSERT INTO x VALUES ('2006-12-25');
INSERT INTO x VALUES ('2006-12-25');
INSERT INTO x VALUES (CAST('2008-02-29' AS DATE));
COMMIT;
INSERT INTO x VALUES ('2006-12-25');
INSERT INTO x VALUES (CAST('2008-02-29' AS DATE));
COMMIT;
INSERT INTO x VALUES ('2006-12-25');
INSERT INTO x VALUES ('2006-12-25');
INSERT INTO x VALUES ('2006-12-25');
COMMIT;
SELECT x FROM x ORDER BY x;
PRAGMA x;
CREATE TABLE x (x BIGINT);
INSERT INTO x (x) VALUES ((1)), ((1)), ((1));
CREATE INDEX x ON x(x);
PRAGMA x;
CREATE TABLE x AS SELECT NOW() AS x FROM x;
PRAGMA x;
CREATE TABLE x (x INT PRIMARY KEY);
INSERT INTO x SELECT * FROM x;
DELETE FROM x;
DELETE FROM x;
INSERT INTO x SELECT * FROM x;
DELETE FROM x;
SELECT CASE WHEN x.x = x.x THEN TRUE ELSE CAST(CONCAT('Current memory usage ', x.x, ' is not equal to base usage ', x.x) AS UNION(x TEXT, x BOOLEAN)) END FROM x AS x, x WHERE x.x = 'ART_INDEX';
SELECT x = 0 FROM x WHERE x = 'ART_INDEX';
DROP TABLE x;
CREATE TABLE x (x INT PRIMARY KEY);
INSERT INTO x SELECT * FROM x;
DROP TABLE x;
SELECT x = 0 FROM x WHERE x = 'ART_INDEX';
CREATE TABLE x (x INT PRIMARY KEY);
INSERT INTO x SELECT * FROM x;
CREATE TABLE x AS SELECT x FROM x WHERE x = 'ART_INDEX';
DELETE FROM x WHERE x > 500000;
SELECT CASE WHEN x.x <= x.x * 0.6 THEN TRUE ELSE CAST(CONCAT('Current memory usage ', x.x, ' is not equal to base usage ', x.x) AS UNION(x TEXT, x BOOLEAN)) END FROM x AS x, x WHERE x.x = 'ART_INDEX';
PRAGMA x;
CREATE FUNCTION x(x) AS CASE WHEN CONTAINS(x, 'KiB') THEN CAST(REPLACE(x, 'KiB', '') AS INT) * 1024.0 WHEN CONTAINS(x, 'MiB') THEN CAST(REPLACE(x, 'MiB', '') AS INT) * 1024.0 * 1024 WHEN CONTAINS(x, 'GiB') THEN CAST(REPLACE(x, 'GiB', '') AS INT) * 1024.0 * 1024 * 1024 WHEN CONTAINS(x, 'TiB') THEN CAST(REPLACE(x, 'TiB', '') AS INT) * 1024.0 * 1024 * 1024 * 1024 WHEN x = '0 bytes' THEN 0 ELSE CAST(x AS INT) END;
CREATE TABLE x AS SELECT CAST(((x * 95823983533) % 100000) AS TEXT) AS x, CAST(((x * 547892347987) % 1000) AS TEXT) AS x, CAST(((x * 847892347987) % 100) AS TEXT) AS x FROM x AS x;
CREATE TABLE x AS SELECT x || 'a' || x || 'b' || x || 'c' AS x FROM x;
DROP TABLE x;
CREATE INDEX x ON x USING ART(x);
SELECT MEM_TO_BYTES(x) < 7500000 FROM x;
DROP TABLE x;
CREATE TABLE x AS SELECT CAST(((x * 95823983533) % 100000) AS TEXT) AS x, CAST(((x * 547892347987) % 1000) AS TEXT) AS x, CAST(((x * 847892347987) % 100) AS TEXT) AS x FROM x AS x;
CREATE TABLE x AS SELECT x || 'a' || x || 'b' || x || 'c' || REPEAT(x, CAST(x AS INT)) || x || 'a' || x || 'c' AS x FROM x;
DROP TABLE x;
CREATE INDEX x ON x USING ART(x);
SELECT MEM_TO_BYTES(x) < 23000000 FROM x;
DROP TABLE x;
CREATE TABLE x AS SELECT CAST((x * CAST(9876983769044 AS INT128) % 10000000) AS BIGINT) AS x FROM x;
CREATE INDEX x ON x USING ART(x);
SELECT MEM_TO_BYTES(x) < 4000000 FROM x;
DROP TABLE x;
CREATE TABLE x AS SELECT CAST((x * CAST(9876983769044 AS INT128) % 1000) AS BIGINT) AS x FROM x;
CREATE INDEX x ON x USING ART(x);
SELECT MEM_TO_BYTES(x) < 4000000 FROM x;
PRAGMA x;
CREATE FUNCTION x(x) AS CASE WHEN CONTAINS(x, 'KiB') THEN CAST(REPLACE(x, 'KiB', '') AS INT) * 1024.0 WHEN CONTAINS(x, 'MiB') THEN CAST(REPLACE(x, 'MiB', '') AS INT) * 1024.0 * 1024 WHEN CONTAINS(x, 'GiB') THEN CAST(REPLACE(x, 'GiB', '') AS INT) * 1024.0 * 1024 * 1024 WHEN CONTAINS(x, 'TiB') THEN CAST(REPLACE(x, 'TiB', '') AS INT) * 1024.0 * 1024 * 1024 * 1024 WHEN x = '0 bytes' THEN CAST(0 AS BIGINT) ELSE CAST(x AS BIGINT) END;
CREATE TABLE x AS SELECT RPAD(CAST(((x * 95823983533) % 86000000) AS TEXT), 10, '-') AS x FROM x AS x;
INSERT INTO x (SELECT * FROM x);
INSERT INTO x (SELECT * FROM x);
INSERT INTO x (SELECT * FROM x);
INSERT INTO x (SELECT * FROM x LIMIT 28400000);
SELECT COUNT(*) FROM x;
SELECT COUNT(DISTINCT x) FROM x;
SELECT MIN(LENGTH(x)), MAX(LENGTH(x)) FROM x;
CREATE TABLE x AS SELECT CAST(MEM_TO_BYTES(x) AS BIGINT) AS x FROM x;
SET x = '12GB';
CREATE INDEX x ON x USING ART(x);
SELECT MEM_TO_BYTES(x.x) > x.x AND MEM_TO_BYTES(x.x) < 5 * x.x FROM x, x AS x;
PRAGMA x;
CREATE TABLE x (x BIGINT, x INT, x TEXT);
CREATE INDEX x ON x USING art(x);
INSERT INTO x VALUES (10, 1, 'hello'), (11, 2, 'world');
SELECT x FROM x WHERE x = 10;
SELECT * FROM x WHERE x = 10;
SELECT x FROM x WHERE x = 1;
SELECT * FROM x WHERE x = 1;
SELECT x FROM x WHERE x = 'hello';
SELECT x, x FROM x WHERE x = 'hello';
SELECT * FROM x WHERE x = 'hello';
PRAGMA x;
CREATE TABLE x (x INT, x INT);
CREATE INDEX x ON x USING art(x);
INSERT INTO x VALUES (1, 2), (1, 3);
SELECT * FROM x WHERE x = 1 AND x = 2;
PRAGMA x;
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
PRAGMA x;
CREATE TABLE x AS SELECT x AS x, 1 AS x, 1 AS x FROM x;
CREATE INDEX x ON x(x);
SELECT SUM(x) FROM x;
SELECT SUM(x) FROM x WHERE x = 1;
SELECT SUM(x) FROM x;
DELETE FROM x WHERE x < 100;
SELECT COUNT(x) FROM x;
SELECT COUNT(x) FROM x WHERE x = 1;
SELECT SUM(x) FROM x;
DELETE FROM x WHERE x < 600;
SELECT COUNT(x) FROM x;
SELECT COUNT(x) FROM x WHERE x = 1;
SELECT SUM(x) FROM x;
DELETE FROM x WHERE x < 1024;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x WHERE x = 1;
SELECT COUNT(*) FROM x;
DROP INDEX x;
DROP INDEX x;
CREATE TABLE x (x INT);
CREATE INDEX x ON x(x);
INSERT INTO x VALUES (1), (1);
CREATE TABLE x (x TEXT, x INT, x BIGINT);
CREATE INDEX x ON x(x);
CREATE INDEX x ON x(x);
CREATE INDEX x ON x(x, x, x);
CREATE INDEX x ON x(x, x, x);
CREATE INDEX x ON x(x, x, x);
SELECT x FROM x WHERE x = (SELECT MIN(x) FROM x);
SELECT x FROM x WHERE x = (SELECT MIN(x) FROM x);
SELECT x FROM x WHERE x = (SELECT MIN(x) FROM x);
SELECT x FROM x WHERE x = (SELECT MIN(x) FROM x);
SELECT x FROM x WHERE x = (SELECT MIN(x) FROM x);
SELECT x FROM x WHERE x = (SELECT MIN(x) FROM x);
SELECT COUNT(x) FROM x;
SELECT SUM(x) FROM x;
SELECT COUNT(x) FROM x;
SELECT SUM(x) FROM x;
SELECT x FROM x WHERE x = (SELECT MIN(x) FROM x);
SELECT x FROM x WHERE x = (SELECT MIN(x) FROM x);
SELECT x FROM x WHERE x = (SELECT MIN(x) FROM x);
DELETE FROM x WHERE x = (SELECT MIN(x) FROM x);
SELECT COUNT(x) FROM x;
SELECT SUM(x) FROM x;
CREATE TABLE x (x INT);
INSERT INTO x SELECT x FROM x;
INSERT INTO x VALUES (2047);
CREATE INDEX x ON x(x);
DROP INDEX x;
INSERT INTO x VALUES (2047);
INSERT INTO x SELECT x + 10000 FROM x;
INSERT INTO x SELECT x + 10000 FROM x;
CREATE INDEX x ON x(x);
CREATE TABLE x (x TINYINT);
CREATE INDEX x ON x(x);
PRAGMA x;
CREATE TABLE x (x UBIGINT);
CREATE TABLE x (x UBIGINT);
INSERT INTO x SELECT x FROM x;
INSERT INTO x SELECT x + 1000 FROM x;
CREATE INDEX x ON x(x);
SELECT x FROM x WHERE x = 255;
CREATE TABLE x (x UINT32, x BIGINT);
INSERT INTO x SELECT x, x FROM x;
INSERT INTO x SELECT 2047, 2047 FROM x;
CREATE INDEX x ON x(x, x);
CREATE TABLE x (x UINT32, x BIGINT);
INSERT INTO x SELECT x, x FROM x;
INSERT INTO x VALUES (2047, 2047);
CREATE INDEX x ON x(x, x);
CREATE TABLE x (x INT);
INSERT INTO x SELECT x FROM x;
INSERT INTO x SELECT 12345 FROM x;
PRAGMA x;
CREATE TABLE x (x INT);
CREATE INDEX x ON x(x);
INSERT INTO x SELECT 1 FROM x;
SELECT COUNT(*) FROM x WHERE x = 1;
SELECT SUM(x) FROM x WHERE x <= 2;
DELETE FROM x WHERE x = 1;
SELECT COUNT(*) FROM x WHERE x = 1;
SELECT COUNT(*) FROM x;
INSERT INTO x SELECT 1 FROM x;
SELECT COUNT(*) FROM x WHERE x = 1;
SELECT SUM(x) FROM x WHERE x <= 2;
DELETE FROM x WHERE x = 1;
SELECT COUNT(*) FROM x WHERE x = 1;
SELECT COUNT(*) FROM x;
INSERT INTO x SELECT 1 FROM x;
INSERT INTO x SELECT 2 FROM x;
SELECT COUNT(*) FROM x WHERE x = 1;
SELECT COUNT(*) FROM x WHERE x = 2;
SELECT COUNT(*) FROM x WHERE x <= 2;
SELECT SUM(x) FROM x WHERE x <= 2;
DELETE FROM x WHERE x = 2;
SELECT COUNT(*) FROM x WHERE x = 1;
SELECT COUNT(*) FROM x;
DELETE FROM x WHERE x = 1;
SELECT COUNT(*) FROM x WHERE x = 1;
SELECT COUNT(*) FROM x;
DROP INDEX x;
PRAGMA x;
CREATE TABLE x (x INT);
SELECT SUM(x) FROM x WHERE x <= 2;
SELECT SUM(x) FROM x WHERE x > 1;
SELECT SUM(x) FROM x WHERE x > 1;
DELETE FROM x WHERE x = 0;
DROP INDEX x;
PRAGMA x;
CREATE TABLE x (x TEXT);
INSERT INTO x SELECT 'my first very long prefix that is really very long' || x FROM x;
INSERT INTO x SELECT CAST((x / 100) AS TEXT) || CAST(x AS TEXT) FROM x;
INSERT INTO x SELECT 'my first very long prefix, the other not quite as long prefix that is still very long' || x FROM x;
INSERT INTO x SELECT 'my first very long prefix, the other not quite as long prefix that is still very long and even longer omg!' || x FROM x;
INSERT INTO x SELECT CAST(x AS TEXT) || CAST((x + 1) AS TEXT) FROM x;
CREATE INDEX x ON x(x);
DELETE FROM x WHERE x IN (SELECT x FROM x LIMIT 1000);
DELETE FROM x WHERE x IN (SELECT x FROM x LIMIT 3000);
DROP INDEX x;
CREATE TABLE x (x TEXT);
INSERT INTO x SELECT 'my first very long prefix that is really very long' || x FROM x;
INSERT INTO x SELECT 'my first very long prefix, the other not quite as long prefix that is still very long' || x FROM x;
CREATE INDEX x ON x(x);
SELECT x FROM x WHERE x = 'my first very long prefix that is really very long77';
DROP INDEX x;
CREATE TABLE x (x TEXT);
INSERT INTO x SELECT CAST('2022-01-01' AS DATE) + CAST(x AS INT) * 1000 || CAST('1004-02-01' AS DATE) + CAST(x AS INT) * 100 || '.' || CAST('6004-02-01' AS DATE) + CAST(x AS INT) * 2000 FROM x;
CREATE INDEX x ON x(x);
DROP INDEX x;
CREATE TABLE x (x TEXT);
INSERT INTO x SELECT CAST('2022-01-01' AS DATE) + CAST(x AS INT) * 1000 FROM x;
INSERT INTO x SELECT CAST('2022-01-01' AS DATE) + CAST(x AS INT) * 1000 || CAST('1004-02-01' AS DATE) + CAST(x AS INT) * 100 FROM x;
INSERT INTO x SELECT CAST('2022-01-01' AS DATE) + CAST(x AS INT) * 1000 || CAST('1004-02-01' AS DATE) + CAST(x AS INT) * 100 || '.' || CAST('6004-02-01' AS DATE) + CAST(x AS INT) * 2000 FROM x;
CREATE INDEX x ON x(x);
DELETE FROM x WHERE x IN (SELECT x FROM x LIMIT 1000);
DELETE FROM x WHERE x IN (SELECT x FROM x LIMIT 1000);
DELETE FROM x WHERE x IN (SELECT x FROM x LIMIT 1000);
CREATE TABLE x (x INT);
CREATE INDEX x ON x(x);
INSERT INTO x VALUES (1), (2);
DELETE FROM x WHERE x = 1;
CREATE TABLE x (x TEXT);
CREATE INDEX x ON x(x);
INSERT INTO x VALUES ('hello I am a prefix, and it is a beautiful sommer evening, and the plants are blossoming - 1'), ('hello I am a prefix, and it is a beautiful sommer evening, and the plants are blossoming - 2');
DELETE FROM x WHERE x = 'hello I am a prefix, and it is a beautiful sommer evening, and the plants are blossoming - 1';
DELETE FROM x;
INSERT INTO x VALUES ('012345678901234'), ('012345678901235');
DELETE FROM x;
INSERT INTO x VALUES ('0123456789-0123456789-0123456789-0123456789');
PRAGMA x;
CREATE TABLE x (x BIGINT);
CREATE INDEX x ON x USING art(x);
INSERT INTO x VALUES (9312908412824241);
SELECT COUNT(*) FROM x WHERE x = 9312908412824241;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x WHERE x < 9223372036854775808;
SELECT COUNT(*) FROM x WHERE x >= 0;
SELECT COUNT(*) FROM x WHERE x < 0;
INSERT INTO x VALUES (-2092042498432234);
SELECT COUNT(*) FROM x WHERE x = 9312908412824241;
SELECT COUNT(*) FROM x WHERE x = -2092042498432234;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x WHERE x < 9223372036854775808;
SELECT COUNT(*) FROM x WHERE x >= 0;
SELECT COUNT(*) FROM x WHERE x < 0;
INSERT INTO x VALUES (1);
SELECT COUNT(*) FROM x WHERE x = 9312908412824241;
SELECT COUNT(*) FROM x WHERE x = -2092042498432234;
SELECT COUNT(*) FROM x WHERE x = 1;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x WHERE x < 9223372036854775808;
SELECT COUNT(*) FROM x WHERE x >= 0;
SELECT COUNT(*) FROM x WHERE x < 0;
INSERT INTO x VALUES (-100);
SELECT COUNT(*) FROM x WHERE x = 9312908412824241;
SELECT COUNT(*) FROM x WHERE x = -2092042498432234;
SELECT COUNT(*) FROM x WHERE x = 1;
SELECT COUNT(*) FROM x WHERE x = -100;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x WHERE x < 9223372036854775808;
SELECT COUNT(*) FROM x WHERE x >= 0;
SELECT COUNT(*) FROM x WHERE x < 0;
INSERT INTO x VALUES (0);
SELECT COUNT(*) FROM x WHERE x = 9312908412824241;
SELECT COUNT(*) FROM x WHERE x = -2092042498432234;
SELECT COUNT(*) FROM x WHERE x = 1;
SELECT COUNT(*) FROM x WHERE x = -100;
SELECT COUNT(*) FROM x WHERE x = 0;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x WHERE x < 9223372036854775808;
SELECT COUNT(*) FROM x WHERE x >= 0;
SELECT COUNT(*) FROM x WHERE x < 0;
INSERT INTO x VALUES (-598538523852390852);
SELECT COUNT(*) FROM x WHERE x = 9312908412824241;
SELECT COUNT(*) FROM x WHERE x = -2092042498432234;
SELECT COUNT(*) FROM x WHERE x = 1;
SELECT COUNT(*) FROM x WHERE x = -100;
SELECT COUNT(*) FROM x WHERE x = 0;
SELECT COUNT(*) FROM x WHERE x = -598538523852390852;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x WHERE x < 9223372036854775808;
SELECT COUNT(*) FROM x WHERE x >= 0;
SELECT COUNT(*) FROM x WHERE x < 0;
INSERT INTO x VALUES (4298421);
SELECT COUNT(*) FROM x WHERE x = 9312908412824241;
SELECT COUNT(*) FROM x WHERE x = -2092042498432234;
SELECT COUNT(*) FROM x WHERE x = 1;
SELECT COUNT(*) FROM x WHERE x = -100;
SELECT COUNT(*) FROM x WHERE x = 0;
SELECT COUNT(*) FROM x WHERE x = -598538523852390852;
SELECT COUNT(*) FROM x WHERE x = 4298421;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x WHERE x < 9223372036854775808;
SELECT COUNT(*) FROM x WHERE x >= 0;
SELECT COUNT(*) FROM x WHERE x < 0;
INSERT INTO x VALUES (-498249);
SELECT COUNT(*) FROM x WHERE x = 9312908412824241;
SELECT COUNT(*) FROM x WHERE x = -2092042498432234;
SELECT COUNT(*) FROM x WHERE x = 1;
SELECT COUNT(*) FROM x WHERE x = -100;
SELECT COUNT(*) FROM x WHERE x = 0;
SELECT COUNT(*) FROM x WHERE x = -598538523852390852;
SELECT COUNT(*) FROM x WHERE x = 4298421;
SELECT COUNT(*) FROM x WHERE x = -498249;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x WHERE x < 9223372036854775808;
SELECT COUNT(*) FROM x WHERE x >= 0;
SELECT COUNT(*) FROM x WHERE x < 0;
INSERT INTO x VALUES (9312908412824240);
SELECT COUNT(*) FROM x WHERE x = 9312908412824241;
SELECT COUNT(*) FROM x WHERE x = -2092042498432234;
SELECT COUNT(*) FROM x WHERE x = 1;
SELECT COUNT(*) FROM x WHERE x = -100;
SELECT COUNT(*) FROM x WHERE x = 0;
SELECT COUNT(*) FROM x WHERE x = -598538523852390852;
SELECT COUNT(*) FROM x WHERE x = 4298421;
SELECT COUNT(*) FROM x WHERE x = -498249;
SELECT COUNT(*) FROM x WHERE x = 9312908412824240;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x WHERE x < 9223372036854775808;
SELECT COUNT(*) FROM x WHERE x >= 0;
SELECT COUNT(*) FROM x WHERE x < 0;
INSERT INTO x VALUES (-2092042498432235);
SELECT COUNT(*) FROM x WHERE x = 9312908412824241;
SELECT COUNT(*) FROM x WHERE x = -2092042498432234;
SELECT COUNT(*) FROM x WHERE x = 1;
SELECT COUNT(*) FROM x WHERE x = -100;
SELECT COUNT(*) FROM x WHERE x = 0;
SELECT COUNT(*) FROM x WHERE x = -598538523852390852;
SELECT COUNT(*) FROM x WHERE x = 4298421;
SELECT COUNT(*) FROM x WHERE x = -498249;
SELECT COUNT(*) FROM x WHERE x = 9312908412824240;
SELECT COUNT(*) FROM x WHERE x = -2092042498432235;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x WHERE x < 9223372036854775808;
SELECT COUNT(*) FROM x WHERE x >= 0;
SELECT COUNT(*) FROM x WHERE x < 0;
INSERT INTO x VALUES (2);
SELECT COUNT(*) FROM x WHERE x = 9312908412824241;
SELECT COUNT(*) FROM x WHERE x = -2092042498432234;
SELECT COUNT(*) FROM x WHERE x = 1;
SELECT COUNT(*) FROM x WHERE x = -100;
SELECT COUNT(*) FROM x WHERE x = 0;
SELECT COUNT(*) FROM x WHERE x = -598538523852390852;
SELECT COUNT(*) FROM x WHERE x = 4298421;
SELECT COUNT(*) FROM x WHERE x = -498249;
SELECT COUNT(*) FROM x WHERE x = 9312908412824240;
SELECT COUNT(*) FROM x WHERE x = -2092042498432235;
SELECT COUNT(*) FROM x WHERE x = 2;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x WHERE x < 9223372036854775808;
SELECT COUNT(*) FROM x WHERE x >= 0;
SELECT COUNT(*) FROM x WHERE x < 0;
INSERT INTO x VALUES (-101);
SELECT COUNT(*) FROM x WHERE x = 9312908412824241;
SELECT COUNT(*) FROM x WHERE x = -2092042498432234;
SELECT COUNT(*) FROM x WHERE x = 1;
SELECT COUNT(*) FROM x WHERE x = -100;
SELECT COUNT(*) FROM x WHERE x = 0;
SELECT COUNT(*) FROM x WHERE x = -598538523852390852;
SELECT COUNT(*) FROM x WHERE x = 4298421;
SELECT COUNT(*) FROM x WHERE x = -498249;
SELECT COUNT(*) FROM x WHERE x = 9312908412824240;
SELECT COUNT(*) FROM x WHERE x = -2092042498432235;
SELECT COUNT(*) FROM x WHERE x = 2;
SELECT COUNT(*) FROM x WHERE x = -101;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x WHERE x < 9223372036854775808;
SELECT COUNT(*) FROM x WHERE x >= 0;
SELECT COUNT(*) FROM x WHERE x < 0;
INSERT INTO x VALUES (-598538523852390853);
SELECT COUNT(*) FROM x WHERE x = 9312908412824241;
SELECT COUNT(*) FROM x WHERE x = -2092042498432234;
SELECT COUNT(*) FROM x WHERE x = 1;
SELECT COUNT(*) FROM x WHERE x = -100;
SELECT COUNT(*) FROM x WHERE x = 0;
SELECT COUNT(*) FROM x WHERE x = -598538523852390852;
SELECT COUNT(*) FROM x WHERE x = 4298421;
SELECT COUNT(*) FROM x WHERE x = -498249;
SELECT COUNT(*) FROM x WHERE x = 9312908412824240;
SELECT COUNT(*) FROM x WHERE x = -2092042498432235;
SELECT COUNT(*) FROM x WHERE x = 2;
SELECT COUNT(*) FROM x WHERE x = -101;
SELECT COUNT(*) FROM x WHERE x = -598538523852390853;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x WHERE x < 9223372036854775808;
SELECT COUNT(*) FROM x WHERE x >= 0;
SELECT COUNT(*) FROM x WHERE x < 0;
INSERT INTO x VALUES (4298422);
SELECT COUNT(*) FROM x WHERE x = 9312908412824241;
SELECT COUNT(*) FROM x WHERE x = -2092042498432234;
SELECT COUNT(*) FROM x WHERE x = 1;
SELECT COUNT(*) FROM x WHERE x = -100;
SELECT COUNT(*) FROM x WHERE x = 0;
SELECT COUNT(*) FROM x WHERE x = -598538523852390852;
SELECT COUNT(*) FROM x WHERE x = 4298421;
SELECT COUNT(*) FROM x WHERE x = -498249;
SELECT COUNT(*) FROM x WHERE x = 9312908412824240;
SELECT COUNT(*) FROM x WHERE x = -2092042498432235;
SELECT COUNT(*) FROM x WHERE x = 2;
SELECT COUNT(*) FROM x WHERE x = -101;
SELECT COUNT(*) FROM x WHERE x = -598538523852390853;
SELECT COUNT(*) FROM x WHERE x = 4298422;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x WHERE x < 9223372036854775808;
SELECT COUNT(*) FROM x WHERE x >= 0;
SELECT COUNT(*) FROM x WHERE x < 0;
INSERT INTO x VALUES (-498261);
SELECT COUNT(*) FROM x WHERE x = 9312908412824241;
SELECT COUNT(*) FROM x WHERE x = -2092042498432234;
SELECT COUNT(*) FROM x WHERE x = 1;
SELECT COUNT(*) FROM x WHERE x = -100;
SELECT COUNT(*) FROM x WHERE x = 0;
SELECT COUNT(*) FROM x WHERE x = -598538523852390852;
SELECT COUNT(*) FROM x WHERE x = 4298421;
SELECT COUNT(*) FROM x WHERE x = -498249;
SELECT COUNT(*) FROM x WHERE x = 9312908412824240;
SELECT COUNT(*) FROM x WHERE x = -2092042498432235;
SELECT COUNT(*) FROM x WHERE x = 2;
SELECT COUNT(*) FROM x WHERE x = -101;
SELECT COUNT(*) FROM x WHERE x = -598538523852390853;
SELECT COUNT(*) FROM x WHERE x = 4298422;
SELECT COUNT(*) FROM x WHERE x = -498261;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x WHERE x < 9223372036854775808;
SELECT COUNT(*) FROM x WHERE x >= 0;
SELECT COUNT(*) FROM x WHERE x < 0;
PRAGMA x;
PRAGMA x;
INSERT INTO x SELECT x FROM x;
DELETE FROM x WHERE x > 4;
CREATE INDEX x ON x(x);
SELECT COUNT(x) FROM x WHERE x = 1;
PRAGMA x;
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
INSERT INTO x SELECT x FROM x;
INSERT INTO x SELECT x FROM x;
INSERT INTO x SELECT x FROM x;
DELETE FROM x WHERE x > 270;
DELETE FROM x WHERE x > 270;
CREATE INDEX x ON x(x);
SELECT COUNT(x) FROM x WHERE x = 49;
SELECT COUNT(x) FROM x WHERE x = 49;
SELECT COUNT(x) FROM x WHERE x = (SELECT MAX(x) FROM x);
SELECT COUNT(x) FROM x WHERE x = (SELECT MAX(x) FROM x);
PRAGMA x;
CREATE TABLE x AS SELECT 42 AS x FROM x;
INSERT INTO x SELECT 42 + 1 + x FROM x;
CREATE INDEX x ON x USING ART(x);
SET x = 1.0;
SET x = 0;
SELECT COUNT(x) FROM x WHERE x = 42;
PRAGMA x;
BEGIN;
CREATE TABLE x (x INT);
INSERT INTO x SELECT x FROM x AS x, (VALUES (0), (1)) AS x ORDER BY x, x;
CREATE INDEX x ON x USING art(x);
SELECT COUNT(*) FROM x WHERE x < 1;
SELECT COUNT(*) FROM x WHERE x <= 1;
SELECT COUNT(*) FROM x WHERE x = 0;
SELECT COUNT(*) FROM x WHERE x = 1;
SELECT COUNT(*) FROM x WHERE x > 0;
SELECT COUNT(*) FROM x WHERE x >= 0;
ROLLBACK;
BEGIN;
CREATE TABLE x (x INT);
INSERT INTO x SELECT x FROM x AS x, (VALUES (0), (1)) AS x ORDER BY x, x;
CREATE INDEX x ON x USING art(x);
SELECT COUNT(*) FROM x WHERE x < 1;
SELECT COUNT(*) FROM x WHERE x <= 1;
SELECT COUNT(*) FROM x WHERE x = 0;
SELECT COUNT(*) FROM x WHERE x = 1;
SELECT COUNT(*) FROM x WHERE x > 0;
SELECT COUNT(*) FROM x WHERE x >= 0;
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x SELECT * FROM x;
CREATE INDEX x ON x(x);
SELECT SUM(x) FROM x WHERE x >= -500 AND x <= -498;
SELECT SUM(x) FROM x WHERE x >= -10 AND x <= 5;
SELECT SUM(x) FROM x WHERE x >= 10 AND x <= 15;
DROP INDEX x;
PRAGMA x;
CREATE TABLE x (x TEXT PRIMARY KEY);
INSERT INTO x VALUES ('hello'), ('hello' || CHR(0)), ('hello' || CHR(0) || CHR(0)), ('hello' || CHR(0) || CHR(0) || CHR(0));
INSERT INTO x VALUES ('hello' || CHR(0) || CHR(0) || CHR(0));
SELECT * FROM x WHERE x = 'hello';
SELECT * FROM x WHERE x = 'hello' || CHR(0);
SELECT * FROM x WHERE x = 'hello' || CHR(0) || CHR(0);
SELECT * FROM x WHERE x = 'hello' || CHR(0) || CHR(0) || CHR(0);
CREATE TABLE x (x BLOB PRIMARY KEY);
INSERT INTO x VALUES (''), ('\x00'), ('\x01'), ('\x00\x01'), ('\x01\x00'), ('\x01\x01'), ('\x00\x00');
INSERT INTO x VALUES ('\x00\x01');
SELECT * FROM x WHERE x = '';
SELECT * FROM x WHERE x = '\x00';
SELECT * FROM x WHERE x = '\x00\x01';
SELECT * FROM x WHERE x >= '\x00' ORDER BY CAST(x AS TEXT);
SELECT * FROM x WHERE x >= '\x01' ORDER BY CAST(x AS TEXT);
SELECT * FROM x WHERE x >= '\x01\x00' ORDER BY CAST(x AS TEXT);
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (4);
CREATE INDEX x ON x(x);
SELECT x FROM x WHERE x = 2;
PRAGMA x;
CREATE TABLE x (x TEXT PRIMARY KEY);
INSERT INTO x VALUES ('abc');
INSERT INTO x VALUES ('def');
SELECT * FROM x WHERE x > 'z';
INSERT INTO x VALUES ('abcd');
SELECT x FROM x WHERE x > 'abce';
DROP TABLE x;
CREATE TABLE x (x TEXT PRIMARY KEY);
INSERT INTO x VALUES ('abcd'), ('abde');
SELECT x FROM x WHERE x > 'abce';
DROP TABLE x;
CREATE TABLE x (x USMALLINT PRIMARY KEY);
INSERT INTO x SELECT x FROM x AS x;
SELECT x FROM x WHERE x > 20;
INSERT INTO x VALUES (256);
SELECT x FROM x WHERE x > 20;
DROP TABLE x;
CREATE TABLE x (x USMALLINT PRIMARY KEY);
INSERT INTO x SELECT x FROM x AS x;
SELECT x FROM x WHERE x > 135;
INSERT INTO x VALUES (256), (257);
SELECT x FROM x WHERE x > 135;
CREATE TABLE x (x INT PRIMARY KEY, x INT, x REAL, x TEXT, x INT, x REAL, x TEXT);
INSERT INTO x VALUES (0, 25, 74.4, 'vvcgn', 47, 57.68, 'ymlye');
INSERT INTO x VALUES (1, 72, 81.64, 'zsnbm', 42, 74.55, 'tzagd');
INSERT INTO x VALUES (2, 45, 38.39, 'dmsso', 87, 29.20, 'ywydk');
INSERT INTO x VALUES (3, 81, 97.79, 'tdbjm', 48, 89.67, 'hvaol');
INSERT INTO x VALUES (4, 17, 18.5, 'ddcya', 66, 87.1, 'ndulx');
INSERT INTO x VALUES (5, 46, 83.75, 'khqpe', 31, 31.98, 'hzpio');
INSERT INTO x VALUES (6, 85, 8.45, 'ugwie', 30, 22.61, 'klsxt');
INSERT INTO x VALUES (7, 36, 54.34, 'pflrv', 18, 61.89, 'vrltg');
INSERT INTO x VALUES (8, 47, 41.84, 'plpkl', 76, 65.31, 'yzivj');
INSERT INTO x VALUES (9, 76, 63.21, 'uakya', 80, 80.58, 'ocfgj');
CREATE TABLE x (x INT PRIMARY KEY, x INT, x REAL, x TEXT, x INT, x REAL, x TEXT);
CREATE INDEX x ON x(x);
CREATE INDEX x ON x(x);
CREATE INDEX x ON x(x);
CREATE INDEX x ON x(x);
INSERT INTO x SELECT * FROM x;
DELETE FROM x WHERE x = 54 AND x <= 76.83;
SELECT x FROM x WHERE x = 54 AND x <= 76.83;
SELECT x FROM x WHERE NOT (x = 54 AND x <= 76.83);
DELETE FROM x WHERE (x > 71.47) OR x IN (98, 26, 25, 60);
SELECT x FROM x WHERE (x > 71.47) OR x IN (98, 26, 25, 60);
SELECT x FROM x WHERE NOT ((x > 71.47) OR x IN (98, 26, 25, 60));
DELETE FROM x WHERE ((x > 32) AND x < 87);
SELECT x FROM x WHERE ((x > 32) AND x < 87);
CREATE TABLE x (x TEXT);
INSERT INTO x (x) VALUES ('a'), ('a');
CREATE INDEX x ON x(x);
SELECT x FROM x WHERE x.x <= 'a';
CREATE TABLE x (x DATE);
INSERT INTO x (x) VALUES ('1970-01-02'), ('1970-01-02'), ('1970-01-03');
CREATE INDEX x ON x(x DESC);
SELECT x FROM x WHERE '1970-01-03' >= x.x ORDER BY x;
PRAGMA x;
CREATE TABLE x (x BIGINT);
CREATE INDEX x ON x(x);
INSERT INTO x (x) VALUES ('1'), ('-1'), ('1');
SELECT x FROM x WHERE x <= 0;
CREATE TABLE x (x TIMESTAMP);
INSERT INTO x (x) VALUES ('2020-02-29 12:00:00'), ('1969-12-09 09:26:38'), ('2020-02-29 12:00:00');
CREATE INDEX x ON x(x);
SELECT x FROM x WHERE x <= '2007-07-07 07:07:07';
PRAGMA x;
SET x = 1;
SET x = 1.0;
CREATE TABLE x (x INT);
INSERT INTO x SELECT 42 FROM x;
INSERT INTO x SELECT 43 FROM x;
CREATE INDEX x ON x(x);
SET x = 0.000001;
SET x = 4000;
INSERT INTO x SELECT 4242 FROM x;
CREATE TABLE x AS ((SELECT x FROM x LIMIT 3 OFFSET 100) UNION (SELECT x FROM x LIMIT 3 OFFSET (SELECT COUNT(*) FROM x) / 2) UNION (SELECT x FROM x LIMIT 3 OFFSET (SELECT COUNT(*) FROM x) / 2 + 100000));
CREATE TABLE x AS SELECT * FROM x ORDER BY RANDOM();
ALTER TABLE x ADD PRIMARY KEY (x);
PRAGMA x;
CREATE TABLE x AS SELECT x AS x FROM x;
ALTER TABLE x ADD PRIMARY KEY (x);
SELECT COUNT(*) FROM x;
SELECT x FROM x WHERE x IN (2, 42, 100, 42, 101) ORDER BY x;
SELECT x FROM x WHERE x IN (2, 42, 100, 42, 101) AND x <> 42 AND x <= 100 ORDER BY x;
SELECT x FROM x WHERE x IN (2, 42, 100, 42, 101) AND x = 42 AND x <= 100 ORDER BY x;
SELECT x FROM x WHERE x IN (2, 42, 100, 42, 101) AND x < 101 AND x >= 42 ORDER BY x;
SELECT x FROM x WHERE x IN (2, 42, 100, 42, 101) AND x > 42 AND x >= 42 ORDER BY x;
SELECT x FROM x WHERE x IN (2, 42, 100, 42, 101) AND x > 42 AND x IN (56, 200, 2, 100) ORDER BY x;
PRAGMA x;
PRAGMA x;
PRAGMA x = '400KB';
CREATE TABLE x AS SELECT x AS x FROM x;
SELECT x FROM x;
CREATE INDEX x ON x(x);
SELECT x > 0 FROM x;
PRAGMA x;
PRAGMA x;
PRAGMA x = '400KB';
CREATE TABLE x (x INT PRIMARY KEY);
SELECT x FROM x;
INSERT INTO x SELECT x FROM x;
SELECT x > 0 FROM x;
CREATE TABLE x (x INT PRIMARY KEY);
INSERT INTO x VALUES (1), (2), (3), (4), (5);
INSERT INTO x VALUES (1);
DROP TABLE x;
CREATE TABLE x (x INT);
CREATE INDEX x ON x(x);
INSERT INTO x (SELECT x FROM x UNION ALL SELECT 55);
SELECT x < 5 FROM x;
SELECT x, x FROM x ORDER BY x;
SELECT x, x FROM x ORDER BY x;
SELECT x, x FROM x ORDER BY ALL;
SELECT x, x FROM x ORDER BY x;
SELECT x FROM x WHERE x = 2;
SELECT x FROM x WHERE x = 11;
SELECT x FROM x WHERE x = 11;
SELECT x FROM x WHERE x = 11;
SELECT x, x FROM x ORDER BY x;
SELECT x, x FROM x ORDER BY x;
SELECT x, x FROM x ORDER BY ALL;
SELECT x, x FROM x ORDER BY x;
SELECT x FROM x WHERE x = 2;
SELECT x FROM x WHERE x = 11;
INSERT INTO x SELECT x, x, x FROM x;
SELECT x > 2621440 / GET_BLOCK_SIZE('test_art_import') FROM x;
CREATE INDEX x ON x(x);
CREATE INDEX x ON x(x);
SELECT x, x, x FROM x WHERE x = 110 ORDER BY ALL;
SELECT x, x FROM x ORDER BY x;
SELECT x, x FROM x ORDER BY x;
SELECT x, x FROM x ORDER BY ALL;
SELECT x, x FROM x ORDER BY x;
SELECT x FROM x WHERE x = 2;
SELECT x FROM x WHERE x = 11;
SELECT x, x, x FROM x WHERE x = 110 ORDER BY ALL;
DROP INDEX x;
DROP INDEX x;
DROP INDEX x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
SELECT x < 2 FROM x;
PRAGMA x;
BEGIN;
CREATE TABLE x ("x" TEXT, "x" INT, "x" INT, "x" INT);
INSERT INTO x VALUES ('a', 0, 0, 0);
CREATE INDEX x ON x(x);
CREATE UNIQUE INDEX x ON x(x, x, x, x);
CREATE UNIQUE INDEX x ON x(x, x, x, x);
ROLLBACK;
PRAGMA x;
CREATE TABLE x ("x" SMALLINT, "x" TINYINT, "x" TINYINT, "x" BIGINT);
INSERT INTO x VALUES (1, 1, 1, 1);
CREATE UNIQUE INDEX x ON x(x, x, x);
CREATE UNIQUE INDEX x ON x(x, x, x);
CREATE UNIQUE INDEX x ON x(x, x, x);
INSERT INTO x VALUES (1, 1, 1, 1);
SET x = 1;
SET x = '5MB';
CREATE TABLE x AS SELECT x AS x FROM x;
CREATE INDEX x ON x(x);
PRAGMA x;
CREATE TABLE x (x INT PRIMARY KEY, x INT UNIQUE);
CREATE INDEX x ON x(x);
CREATE INDEX x ON x(x);
INSERT INTO x SELECT x, x FROM x;
INSERT INTO x VALUES (4000, 20);
INSERT INTO x VALUES (20, 4000);
INSERT INTO x VALUES (4000, 20);
INSERT INTO x VALUES (20, 4000);
CREATE INDEX x ON x(x);
CREATE INDEX x ON x(x);
INSERT INTO x VALUES (20, 4000);
INSERT INTO x VALUES (4000, 20);
DROP TABLE x;
CREATE TABLE x (x INT PRIMARY KEY, x INT UNIQUE);
CREATE TABLE x (x INT, x INT, FOREIGN KEY (x) REFERENCES x (x), FOREIGN KEY (x) REFERENCES x (x));
INSERT INTO x SELECT x, x FROM x;
INSERT INTO x SELECT x, x FROM x;
INSERT INTO x VALUES (4000, 20);
INSERT INTO x VALUES (20, 4000);
INSERT INTO x VALUES (4000, 20);
INSERT INTO x VALUES (20, 4000);
CREATE INDEX x ON x(x);
CREATE INDEX x ON x(x);
CREATE INDEX x ON x(x);
CREATE INDEX x ON x(x);
INSERT INTO x VALUES (4000, 20);
INSERT INTO x VALUES (20, 4000);
INSERT INTO x VALUES (4000, 20);
INSERT INTO x VALUES (20, 4000);
CREATE INDEX x ON x(x);
CREATE INDEX x ON x(x);
CREATE INDEX x ON x(x);
CREATE INDEX x ON x(x);
CREATE INDEX x ON x(x);
CREATE INDEX x ON x(x);
INSERT INTO x VALUES (4000, 20);
INSERT INTO x VALUES (20, 4000);
INSERT INTO x VALUES (4000, 20);
INSERT INTO x VALUES (20, 4000);
CREATE TABLE x (x INT);
CREATE INDEX x ON x(x);
CREATE INDEX x ON x(x);
DROP INDEX x;
SELECT x FROM x;
CREATE TABLE x AS SELECT x FROM x AS x;
CREATE TABLE x AS SELECT x, x FROM x;
CREATE INDEX x ON x(x);
SELECT x FROM x WHERE x = 500000;
CREATE TABLE x AS SELECT x, x FROM x;
DROP INDEX x;
CREATE TABLE x AS SELECT x, x FROM x;
CREATE INDEX x ON x(x);
SELECT x FROM x WHERE x = 500000;
DROP INDEX x;
SELECT x.x < x.x + 4 FROM x AS x, x;
CREATE INDEX x ON x(x);
SELECT x.x < x.x + 5 FROM x AS x, x;
SELECT x FROM x WHERE x = 500000;
CREATE TABLE x AS SELECT x, x FROM x;
DELETE FROM x WHERE x > 100000;
SELECT x.x < x.x FROM x AS x, x;
INSERT INTO x SELECT x FROM x AS x;
SELECT x.x > x.x AND x.x < x.x * 2 FROM x AS x, x;
DELETE FROM x;
SELECT x.x < x.x FROM x AS x, x;
SELECT x < 2 FROM x;
CREATE TABLE x (x INT PRIMARY KEY);
INSERT INTO x SELECT x FROM x;
SELECT x > 2 FROM x;
DROP TABLE x;
SELECT x < 2 FROM x;
SELECT x < 2 FROM x;
CREATE TABLE x (x INT PRIMARY KEY);
INSERT INTO x SELECT x FROM x;
CREATE TABLE x (x INT REFERENCES x (x));
INSERT INTO x SELECT x FROM x;
DROP TABLE x;
DROP TABLE x;
SELECT x < 2 FROM x;
SELECT x < 2 FROM x;
CREATE TABLE x (x INT UNIQUE);
INSERT INTO x SELECT x FROM x;
SELECT x > 2 FROM x;
DROP TABLE x;
SELECT x < 2 FROM x;
PRAGMA x;
CREATE TABLE x (x INT, x INT);
CREATE INDEX x ON x(x);
INSERT INTO x VALUES (1, 1), (2, 2), (3, 3), (4, 4), (5, 5);
SELECT x FROM x WHERE x = 3;
DROP INDEX x;
CREATE TABLE x (x INT);
INSERT INTO x SELECT x FROM x;
INSERT INTO x SELECT 424242 FROM x;
INSERT INTO x SELECT 424243 FROM x;
INSERT INTO x SELECT 1 FROM x;
CREATE INDEX x ON x(x);
SELECT x FROM x WHERE x >= 424242;
CREATE TABLE x AS SELECT MAX(x) AS x FROM x WHERE x = 424242;
DELETE FROM x WHERE x = (SELECT MAX(x) FROM x);
INSERT INTO x VALUES (1);
CREATE TABLE x (x INT, x TEXT);
CREATE UNIQUE INDEX x ON x(M(x.x));
INSERT INTO x VALUES (10, 'hello');
INSERT INTO x VALUES (10, 'world');
PRAGMA x;
PRAGMA x;
SET x = '10GB';
CREATE TABLE x (x TEXT, x TEXT, PRIMARY KEY (x, x));
INSERT INTO x (x, x) VALUES ('5_create_aaaaaaaaaaa_mapping', 'sql');
INSERT INTO x (x, x) VALUES ('5_create_aaaaaaaaaaa_mapping', 'sql');
PRAGMA x;
PRAGMA x;
SET x = '10GB';
CREATE TABLE x (x TEXT, x TEXT, PRIMARY KEY (x, x));
INSERT INTO x (x, x) VALUES ('m0001_initialize', 'sql');
INSERT INTO x (x, x) VALUES ('m0005_create_aaaaaaaaaaa_mapping_table', 'sql');
CREATE TABLE x (x INT PRIMARY KEY);
INSERT INTO x VALUES (1);
CREATE TABLE x (x INT PRIMARY KEY);
SELECT x FROM x WHERE x = 1;
CREATE TABLE x AS SELECT x FROM x AS x;
CREATE TABLE x AS SELECT x, x FROM x;
CREATE UNIQUE INDEX x ON x(x);
SELECT x FROM x WHERE x = 5000;
CREATE TABLE x AS SELECT x, x FROM x;
DELETE FROM x;
CREATE TABLE x AS SELECT x, x FROM x;
INSERT INTO x SELECT x FROM x AS x;
INSERT INTO x SELECT x FROM x AS x;
BEGIN;
DELETE FROM x;
SELECT x.x < x.x + 4 FROM x AS x, x;
INSERT INTO x SELECT x FROM x AS x;
COMMIT;
SELECT x.x < x.x + 4 FROM x AS x, x;
DROP INDEX x;
SELECT x.x < x.x + 4 FROM x AS x, x;
PRAGMA x;
CREATE TABLE x (x BOOLEAN, x INT);
CREATE INDEX x ON x(x, x);
INSERT INTO x (x) VALUES (0);
SELECT * FROM x;
CREATE TABLE x (x UINT32, x BIGINT);
INSERT INTO x SELECT x, x FROM x;
INSERT INTO x VALUES (2047, 2047);
CREATE UNIQUE INDEX x ON x(x, x);
DROP TABLE x;
CREATE TABLE x (x INT128, x INT128);
INSERT INTO x SELECT x, x FROM x;
CREATE UNIQUE INDEX x ON x(x, x);
CREATE TABLE x (x UINT8, x UINT8);
INSERT INTO x SELECT x, x FROM x;
CREATE INDEX x ON x(x, x);
CREATE TABLE x (x UINT64, x UINT32, x UINT64, x REAL);
INSERT INTO x SELECT x, x, x, 0.456 + x FROM x;
CREATE INDEX x ON x(x, x, x, x);
CREATE TABLE x AS SELECT CAST(x AS INT128) AS x FROM x;
CREATE INDEX x ON x(x);
SELECT x FROM x WHERE x = 2048;
CREATE TABLE x AS SELECT CAST(x AS UINT64) AS x FROM x;
CREATE INDEX x ON x(x);
SELECT x FROM x WHERE x = 2048;
CREATE TABLE x AS SELECT CAST(x AS UINT32) AS x FROM x;
CREATE INDEX x ON x(x);
SELECT x FROM x WHERE x = 2048;
CREATE TABLE x AS SELECT CAST(x AS UINT8) AS x FROM x;
CREATE INDEX x ON x(x);
SELECT x FROM x WHERE x = 100;
PRAGMA x;
CREATE TABLE x (x DOUBLE);
INSERT INTO x VALUES (CAST(0 AS DOUBLE));
INSERT INTO x VALUES (CAST(-0 AS DOUBLE));
CREATE INDEX x ON x(x);
SELECT COUNT(x) FROM x WHERE x = CAST(0 AS DOUBLE);
SELECT COUNT(x) FROM x WHERE x = CAST(-0 AS DOUBLE);
PRAGMA x;
CREATE TABLE x (x BIGINT, x INT, x TEXT, x BIGINT);
CREATE INDEX x ON x USING art((x + x));
INSERT INTO x VALUES (10, 1, 'hello', 4), (11, 2, 'world', 6);
SELECT * FROM x WHERE x + x = 5;
SELECT * FROM x WHERE x = 'hello';
UPDATE x SET x = 5, x = x WHERE x = 1;
UPDATE x SET x = 5 WHERE x = 5;
SELECT * FROM x WHERE x + x = 9;
DELETE FROM x WHERE x + x = 8;
DELETE FROM x WHERE x + x = 9;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x WHERE x + x > 0;
PRAGMA x;
CREATE TABLE x (x TINYINT, x SMALLINT, x INT, x BIGINT);
CREATE INDEX x ON x(x);
CREATE INDEX x ON x(x);
CREATE INDEX x ON x(x);
CREATE INDEX x ON x(x);
SELECT x FROM x WHERE x > 0;
SELECT x FROM x WHERE x < 0;
SELECT x FROM x WHERE x >= 0;
SELECT x FROM x WHERE x <= 0;
INSERT INTO x VALUES (1, 1, 1, 1);
INSERT INTO x VALUES (2, 2, 2, 2);
INSERT INTO x VALUES (3, 3, 3, 3);
INSERT INTO x VALUES (4, 4, 4, 4);
INSERT INTO x VALUES (5, 5, 5, 5);
SELECT * FROM x ORDER BY x;
SELECT x FROM x WHERE x > CAST(0 AS TINYINT) ORDER BY x;
SELECT x FROM x WHERE x <= CAST(2 AS SMALLINT) ORDER BY x;
SELECT x FROM x WHERE x >= -CAST(100000 AS INT) ORDER BY x;
SELECT x FROM x WHERE x >= CAST(100000 AS INT) ORDER BY x;
SELECT x FROM x WHERE x >= CAST(100000 AS INT) AND x <= CAST(100001 AS INT) ORDER BY x;
SELECT x FROM x WHERE x <= CAST(1000000000 AS BIGINT) ORDER BY x;
SELECT x FROM x WHERE x <= -CAST(1000000000 AS BIGINT) ORDER BY x;
PRAGMA x;
CREATE TABLE x (x REAL);
INSERT INTO x VALUES (CAST(0 AS REAL));
INSERT INTO x VALUES (CAST(-0 AS REAL));
CREATE INDEX x ON x(x);
SELECT COUNT(x) FROM x WHERE x = CAST(0 AS REAL);
SELECT COUNT(x) FROM x WHERE x = CAST(-0 AS REAL);
PRAGMA x;
CREATE TABLE x (x REAL PRIMARY KEY, x INT);
INSERT INTO x VALUES (3.45, 4), (3.45, 5);
INSERT INTO x VALUES (3.45, 4), (2.2, 5);
SELECT * FROM x;
INSERT INTO x VALUES (6, 6), (3.45, 4);
INSERT INTO x VALUES (6, 6);
SELECT * FROM x;
INSERT INTO x VALUES (NULL, 4);
UPDATE x SET x = NULL;
PRAGMA x;
CREATE TABLE x (x UNION("x" TEXT, "x" BOOLEAN), x UNION("x" TEXT), x INT, x UNION("x" INT, "x" INT[], "x" BOOLEAN));
INSERT INTO x VALUES ('hello', 'world', 42, [1, 2, 3]), (NULL, NULL, NULL, NULL), (TRUE, NULL, 44, 45), (FALSE, 'wazzup', FALSE, [1]);
CREATE INDEX x ON x(x);
CREATE INDEX x ON x(x);
CREATE INDEX x ON x(x);
DROP INDEX x;
CREATE INDEX x ON x(x);
CREATE INDEX x ON x(x, x);
SELECT * FROM x ORDER BY ALL;
CREATE UNIQUE INDEX x ON x((x.x));
CREATE UNIQUE INDEX x ON x((x.x));
CREATE UNIQUE INDEX x ON x((x.x));
CREATE UNIQUE INDEX x ON x((x.x));
CREATE UNIQUE INDEX x ON x((x.x));
CREATE UNIQUE INDEX x ON x((x.x));
INSERT INTO x VALUES ('helloo', 'worldd', 43, [1, 2, 3, 4]);
SELECT * FROM x ORDER BY ALL;
SELECT x.x FROM x WHERE x = 'helloo';
INSERT INTO x VALUES ('helloo', 'nop', 7, TRUE);
DROP INDEX x;
DROP INDEX x;
DROP INDEX x;
DROP INDEX x;
DROP INDEX x;
CREATE UNIQUE INDEX x ON x((x.x), (x.x));
CREATE INDEX x ON x((x.x), x);
CREATE UNIQUE INDEX x ON x((x.x), (x.x), (x.x));
INSERT INTO x VALUES ('sunshine', 'love', 85, TRUE);
SELECT * FROM x ORDER BY ALL;
SELECT x.x FROM x WHERE x.x = 'love';
SELECT * FROM x ORDER BY ALL;
SELECT x.x FROM x WHERE x.x = 'love';
INSERT INTO x VALUES ('sunshine', 'love', 85, TRUE);
PRAGMA x;
CREATE TABLE x (x TEXT);
CREATE INDEX x ON x(x);
INSERT INTO x VALUES ('test'), ('test1'), ('vest1'), ('somesuperbigstring'), ('somesuperbigstring1'), ('somesuperbigstring2'), ('somesuperbigstring'), ('maybesomesuperbigstring'), ('maybesomesuperbigstringmaybesomesuperbigstringmaybesomesuperbigstringmaybesomesuperbigstringmaybesomesuperbigstringmaybesomesuperbigstringmaybesomesuperbigstring'), ('maybesomesuperbigstringmaybesomesuperbigstringmaybesomesuperbigstringmaybesomesuperbigstringmaybesomesuperbigstringmaybesomesuperbigstringmaybesomesuperbigstring2');
SELECT COUNT(x) FROM x WHERE x = 'test';
SELECT COUNT(x) FROM x WHERE x = 'somesuperbigstring';
SELECT COUNT(x) FROM x WHERE x = 'maybesomesuperbigstringmaybesomesuperbigstringmaybesomesuperbigstringmaybesomesuperbigstringmaybesomesuperbigstringmaybesomesuperbigstringmaybesomesuperbigstring';
SELECT COUNT(x) FROM x WHERE x = 'maybesomesuperbigstringmaybesomesuperbigstringmaybesomesuperbigstringmaybesomesuperbigstringmaybesomesuperbigstringmaybesomesuperbigstringmaybesomesuperbigstring2';
SELECT COUNT(x) FROM x WHERE x >= 'somesuperbigstring' AND x <= 'somesuperbigstringz';
SELECT COUNT(x) FROM x WHERE x = 'somesuperthisdoesnotexist';
DROP INDEX x;
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x SELECT 10 FROM x;
INSERT INTO x SELECT 11 FROM x;
INSERT INTO x SELECT 12 FROM x;
INSERT INTO x SELECT 13 FROM x;
CREATE INDEX x ON x(x);
DELETE FROM x WHERE x = 11 OR x = 10;
CREATE TABLE x (x INT);
INSERT INTO x SELECT x FROM x;
CREATE INDEX x ON x(x);
DELETE FROM x WHERE x < 100000;
PRAGMA x;
CREATE FUNCTION x(x) AS CASE WHEN CONTAINS(x, 'KiB') THEN CAST(REPLACE(x, 'KiB', '') AS INT) * 1024.0 WHEN CONTAINS(x, 'MiB') THEN CAST(REPLACE(x, 'MiB', '') AS INT) * 1024.0 * 1024 WHEN CONTAINS(x, 'GiB') THEN CAST(REPLACE(x, 'GiB', '') AS INT) * 1024.0 * 1024 * 1024 WHEN CONTAINS(x, 'TiB') THEN CAST(REPLACE(x, 'TiB', '') AS INT) * 1024.0 * 1024 * 1024 * 1024 WHEN x = '0 bytes' THEN 0 ELSE CAST(x AS INT) END;
CREATE TABLE x (x INT);
CREATE TABLE x AS SELECT MEM_TO_BYTES(x) AS x FROM x;
INSERT INTO x SELECT * FROM x;
CREATE TABLE x AS SELECT MEM_TO_BYTES(x) AS x FROM x;
SELECT x.x > x.x FROM x, x;
DROP TABLE x;
UPDATE x SET x = (SELECT MEM_TO_BYTES(x.x) FROM x AS x);
CREATE TABLE x (x INT);
INSERT INTO x SELECT * FROM x;
CREATE INDEX x ON x(x);
SELECT MEM_TO_BYTES(x.x) < 4 * x.x FROM x, x AS x;
INSERT INTO x SELECT x * 4 FROM x;
CREATE TABLE x AS SELECT MEM_TO_BYTES(x.x) AS x FROM x AS x;
DELETE FROM x WHERE x > 500000;
SELECT MEM_TO_BYTES(x.x) < x.x + 10000000 FROM x, x AS x;
SELECT MEM_TO_BYTES(x.x) < x.x + 10000000 FROM x, x AS x;
SELECT MEM_TO_BYTES(x.x) < x.x + 10000000 FROM x, x AS x;
SELECT MEM_TO_BYTES(x.x) < x.x FROM x, x AS x;
UPDATE x SET x = (SELECT MEM_TO_BYTES(x.x) AS x FROM x AS x);
DELETE FROM x;
SELECT MEM_TO_BYTES(x.x) < x.x FROM x, x AS x;
PRAGMA x;
CREATE FUNCTION x(x) AS CASE WHEN CONTAINS(x, 'KiB') THEN CAST(REPLACE(x, 'KiB', '') AS INT) * 1024.0 WHEN CONTAINS(x, 'MiB') THEN CAST(REPLACE(x, 'MiB', '') AS INT) * 1024.0 * 1024 WHEN CONTAINS(x, 'GiB') THEN CAST(REPLACE(x, 'GiB', '') AS INT) * 1024.0 * 1024 * 1024 WHEN CONTAINS(x, 'TiB') THEN CAST(REPLACE(x, 'TiB', '') AS INT) * 1024.0 * 1024 * 1024 * 1024 WHEN x = '0 bytes' THEN 0 ELSE CAST(x AS INT) END;
CREATE TABLE x (x TEXT);
CREATE TABLE x AS SELECT MEM_TO_BYTES(x) AS x FROM x;
INSERT INTO x SELECT x || 'I am' || x || 'a long not' || x || 'inlined string' || x FROM x AS x;
CREATE TABLE x AS SELECT MEM_TO_BYTES(x) AS x FROM x;
SELECT x.x > x.x FROM x, x;
DROP TABLE x;
UPDATE x SET x = (SELECT MEM_TO_BYTES(x.x) FROM x AS x);
CREATE TABLE x (x TEXT);
INSERT INTO x SELECT x || 'I am' || x || 'a long not' || x || 'inlined string' || x FROM x AS x;
CREATE INDEX x ON x(x);
SELECT MEM_TO_BYTES(x.x) > 2 * x.x AND MEM_TO_BYTES(x.x) < 4 * x.x FROM x, x AS x;
INSERT INTO x SELECT (x * 4) || 'I am' || (x * 4) || 'a long not' || (x * 4) || 'inlined string' || (x * 4) FROM x AS x;
SELECT CASE WHEN MEM_TO_BYTES(x.x) > 4 * x.x AND MEM_TO_BYTES(x.x) <= 8 * x.x THEN TRUE ELSE CAST(CONCAT('current mem usage not between 4X and 7X base (current ', x.x, ', base ', x.x, ')') AS UNION(x TEXT, x BOOLEAN)) END FROM x, x AS x;
CREATE TABLE x AS SELECT MEM_TO_BYTES(x.x) AS x FROM x AS x;
DELETE FROM x WHERE x > (SELECT AVG(x) FROM x);
SELECT MEM_TO_BYTES(x.x) < x.x + 10000000 FROM x, x AS x;
SELECT MEM_TO_BYTES(x.x) < x.x + 10000000 FROM x, x AS x;
DELETE FROM x WHERE x > (SELECT AVG(x) FROM x);
SELECT MEM_TO_BYTES(x.x) < x.x FROM x, x AS x;
UPDATE x SET x = (SELECT MEM_TO_BYTES(x.x) AS x FROM x AS x);
DELETE FROM x;
SELECT MEM_TO_BYTES(x.x) <= x.x FROM x, x AS x;
CREATE TABLE x (x INT);
BEGIN;
INSERT INTO x SELECT * FROM x;
SELECT COUNT(*) FROM x;
ROLLBACK;
SELECT COUNT(*) FROM x;
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x BY NAME SELECT 42 AS x;
INSERT INTO x BY NAME SELECT 84 AS x;
INSERT INTO x BY NAME SELECT 99 AS x, 9 AS x;
INSERT INTO x BY NAME SELECT 99 AS x, 9 AS x;
SELECT * FROM x;
CREATE TABLE x ("x" INT, "x" INT);
INSERT INTO x BY NAME SELECT 1 AS "x";
SELECT * FROM x;
INSERT INTO x BY NAME SELECT 1 AS x;
INSERT INTO x BY NAME SELECT 1 AS x, 2 AS x;
INSERT INTO x (x, x) SELECT 1, 2;
INSERT INTO x BY NAME SELECT 1 AS x;
CREATE TABLE x (x INT, x AS (CAST((x) AS DATE)));
INSERT INTO x BY NAME SELECT 1 AS x;
INSERT INTO x BY NAME VALUES (42, 84);
INSERT INTO x BY NAME VALUES (42, 84);
CREATE TABLE x AS SELECT x, x % 2 AS x FROM x AS x;
CREATE TABLE x AS SELECT * FROM x GROUP BY GROUPING SETS ((), (x), (x, x), (x));
SELECT SUM(x), SUM(x), COUNT(*), COUNT(x), COUNT(x) FROM x;
SELECT SUM(x), SUM(x), COUNT(*), COUNT(x), COUNT(x) FROM x;
DROP TABLE x;
DROP TABLE x;
CREATE TABLE x AS SELECT CASE WHEN x % 2 = 0 THEN NULL ELSE x END AS x, x % 2 AS x FROM x AS x;
CREATE TABLE x AS SELECT * FROM x GROUP BY GROUPING SETS ((), (x), (x, x), (x));
SELECT SUM(x), SUM(x), COUNT(*), COUNT(x), COUNT(x) FROM x;
SELECT SUM(x), SUM(x), COUNT(*), COUNT(x), COUNT(x) FROM x;
CREATE TABLE x AS SELECT * FROM x AS x;
CREATE TABLE x AS SELECT * FROM x GROUP BY x;
SELECT SUM(x), COUNT(*), COUNT(x) FROM x;
SELECT SUM(x), COUNT(*), COUNT(x) FROM x;
DROP TABLE x;
DROP TABLE x;
CREATE TABLE x AS SELECT CASE WHEN x % 2 = 0 THEN NULL ELSE x END AS x FROM x AS x;
CREATE TABLE x AS SELECT * FROM x GROUP BY x;
SELECT SUM(x), COUNT(*), COUNT(x) FROM x;
SELECT SUM(x), COUNT(*), COUNT(x) FROM x;
CREATE TABLE x AS SELECT CASE WHEN x % 2 = 0 THEN NULL ELSE CONCAT('thisismyvarchar-', x // 4) END AS x FROM x AS x;
CREATE TABLE x AS SELECT * FROM x GROUP BY x;
SELECT MIN(x), MAX(x), COUNT(*), COUNT(x), COUNT(DISTINCT x) FROM x;
SELECT MIN(x), MAX(x), COUNT(*), COUNT(x), COUNT(DISTINCT x) FROM x;
CREATE TABLE x AS SELECT [x, NULL, x + 2] AS x FROM x AS x;
CREATE TABLE x AS SELECT * FROM x GROUP BY x;
SELECT SUM(x[1]), SUM(x[2]), SUM(x[3]), COUNT(*), COUNT(x), COUNT(x[1]), COUNT(x[2]) FROM x;
SELECT SUM(x[1]), SUM(x[2]), SUM(x[3]), COUNT(*), COUNT(x), COUNT(x[1]), COUNT(x[2]) FROM x;
CREATE TABLE x AS SELECT {'x': x, 'x': NULL, 'x': x + 2} AS x FROM x AS x;
CREATE TABLE x AS SELECT * FROM x GROUP BY x;
SELECT SUM(x.x), SUM(x.x), SUM(x.x), COUNT(*), COUNT(x), COUNT(x.x), COUNT(x.x) FROM x;
SELECT SUM(x.x), SUM(x.x), SUM(x.x), COUNT(*), COUNT(x), COUNT(x.x), COUNT(x.x) FROM x;
PRAGMA x = FALSE;
CREATE TABLE x AS SELECT * FROM x AS x;
CREATE TABLE x AS SELECT * FROM x;
SELECT SUM(x) FROM x;
SELECT SUM(x) FROM x;
DROP TABLE x;
DROP TABLE x;
CREATE TABLE x AS SELECT CASE WHEN x % 2 = 0 THEN NULL ELSE x END AS x FROM x AS x;
CREATE TABLE x AS SELECT * FROM x;
SELECT SUM(x) FROM x;
SELECT SUM(x) FROM x;
CREATE TABLE x AS SELECT CASE WHEN x % 2 = 0 THEN NULL ELSE CONCAT('thisismyvarchar-', x // 4) END AS x FROM x AS x;
CREATE TABLE x AS SELECT * FROM x;
SELECT MIN(x), MAX(x), COUNT(*), COUNT(x), COUNT(DISTINCT x) FROM x;
SELECT MIN(x), MAX(x), COUNT(*), COUNT(x), COUNT(DISTINCT x) FROM x;
CREATE TABLE x (x INT);
BEGIN;
INSERT INTO x VALUES (0), (1), (2);
SELECT COUNT(*) FROM x;
ROLLBACK;
SELECT COUNT(*) FROM x;
CREATE TABLE x (x INT);
BEGIN;
BEGIN;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
ROLLBACK;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
ROLLBACK;
SELECT COUNT(*) FROM x;
CREATE TABLE x (x INT);
INSERT INTO x SELECT x FROM x AS x;
INSERT INTO x SELECT x FROM x AS x;
INSERT INTO x SELECT x FROM x AS x;
INSERT INTO x SELECT NULL FROM x AS x;
SELECT COUNT(x), SUM(x), MIN(x), MAX(x), COUNT(*) FROM x;
COMMIT;
SELECT COUNT(x), SUM(x), MIN(x), MAX(x), COUNT(*) FROM x;
SELECT SUM(CASE WHEN x IS NULL THEN 1 ELSE 0 END) FROM x;
CREATE OR REPLACE TABLE x AS SELECT * FROM x AS x UNION ALL SELECT NULL;
CREATE OR REPLACE TABLE x (x INT NOT NULL);
INSERT INTO x SELECT * FROM x;
CREATE OR REPLACE TABLE x AS SELECT CAST(x AS TEXT) AS x FROM x AS x UNION ALL SELECT 'hello';
CREATE OR REPLACE TABLE x (x TEXT, x AS (CAST(x AS INT)));
INSERT INTO x (x) SELECT * FROM x;
CREATE OR REPLACE TABLE x AS SELECT * FROM x AS x UNION ALL SELECT 7777;
CREATE OR REPLACE TABLE x (x INT PRIMARY KEY);
INSERT INTO x SELECT * FROM x;
CREATE OR REPLACE TABLE x AS SELECT * FROM x AS x UNION ALL SELECT -1;
CREATE OR REPLACE TABLE x (x INT PRIMARY KEY);
INSERT INTO x SELECT * FROM x;
CREATE OR REPLACE TABLE x (x INT PRIMARY KEY REFERENCES x (x));
INSERT INTO x SELECT * FROM x;
DROP TABLE x;
DROP TABLE x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (0), (1), (2), (3), (4), (5), (6), (7), (8), (9);
SELECT COUNT(*) FROM x;
INSERT INTO x SELECT * FROM x;
SELECT COUNT(*) FROM x;
DROP TABLE x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (3, 4), (4, 3);
INSERT INTO x VALUES (DEFAULT, 4);
INSERT INTO x VALUES (DEFAULT, 4);
INSERT INTO x (x) SELECT x FROM x;
SELECT * FROM x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3), (4), (5);
CREATE TABLE x AS SELECT 1 AS x FROM x WHERE x % 2 <> 0;
SELECT * FROM x ORDER BY 1;
UPDATE x SET x = NULL;
SELECT * FROM x ORDER BY 1;
CREATE TABLE IF NOT EXISTS x (x DATE NOT NULL UNIQUE, x TEXT NOT NULL, x TEXT NOT NULL, x TEXT, x TEXT, x TEXT);
CREATE TABLE x (x INT);
INSERT INTO x SELECT 42;
INSERT INTO x SELECT CAST(NULL AS TEXT);
SELECT * FROM x;
SET x = 'nulls_first';
CREATE TABLE x (x TEXT);
CREATE TABLE x (x INT);
INSERT INTO x VALUES (3), (4), (NULL);
INSERT INTO x SELECT * FROM x;
SELECT * FROM x;
UPDATE x SET x = 13 WHERE x = '3';
SELECT * FROM x ORDER BY CAST(x AS INT);
SET x = TRUE;
CREATE TABLE x (x INT);
BEGIN;
INSERT INTO x SELECT * FROM x;
BEGIN;
INSERT INTO x SELECT * FROM x;
BEGIN;
INSERT INTO x SELECT * FROM x;
BEGIN;
INSERT INTO x SELECT * FROM x;
BEGIN;
INSERT INTO x SELECT * FROM x;
BEGIN;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
PRAGMA x;
CREATE TABLE x AS SELECT x FROM x AS x;
CREATE TABLE x AS SELECT x FROM x AS x;
CREATE VIEW x AS SELECT * FROM x WHERE x > 100;
CREATE VIEW x AS SELECT * FROM x WHERE x > 100;
CREATE VIEW x AS SELECT * FROM x JOIN x USING (x);
SELECT COUNT(*) FROM x JOIN x USING (x);
SELECT COUNT(*) FROM x JOIN x ON (x.x > x.x);
SELECT COUNT(*) FROM x JOIN x ON (x.x <> x.x);
SELECT COUNT(*) FROM x JOIN x ON (x.x <> x.x OR x.x + 1 <> x.x);
SELECT * FROM x JOIN x USING (x);
SELECT COUNT(*) FROM x LEFT JOIN x USING (x);
SELECT * FROM x LEFT JOIN x USING (x);
SELECT COUNT(*) FROM x RIGHT JOIN x USING (x);
SELECT COUNT(*) FROM x FULL OUTER JOIN x USING (x);
SELECT COUNT(*) FROM x JOIN x USING (x);
SELECT * FROM x JOIN x USING (x);
SELECT COUNT(*) FROM x LEFT JOIN x USING (x);
SELECT COUNT(*) FROM x RIGHT JOIN x USING (x);
SELECT * FROM x RIGHT JOIN x USING (x);
SELECT COUNT(*) FROM x FULL OUTER JOIN x USING (x);
SELECT x.*, x.* FROM x FULL OUTER JOIN x USING (x);
SELECT COUNT(*) FROM x JOIN x USING (x);
SELECT COUNT(*) FROM x LEFT JOIN x USING (x);
SELECT COUNT(*) FROM x RIGHT JOIN x USING (x);
SELECT COUNT(*) FROM x FULL OUTER JOIN x USING (x);
SET x = 'nulls_first';
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (4, 1), (2, 2);
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 2), (3, 0);
SELECT * FROM x JOIN x ON x.x + x.x = x.x + x.x;
SELECT * FROM x LEFT JOIN x ON x.x + x.x = x.x + x.x ORDER BY 1;
SELECT * FROM x RIGHT JOIN x ON x.x + x.x = x.x + x.x ORDER BY 1;
SELECT * FROM x FULL OUTER JOIN x ON x.x + x.x = x.x + x.x ORDER BY 1;
PRAGMA x;
CREATE TABLE x AS SELECT x AS x, {'x': x} AS x, x % 3 AS x FROM x AS x, x;
CREATE TABLE x AS SELECT x AS x, x % 3 AS x FROM x AS x WHERE x % 2 = 0;
SELECT COUNT(*), COUNT(x), COUNT(DISTINCT x), COUNT(DISTINCT x.x) FROM x;
SELECT COUNT(*), COUNT(x), COUNT(DISTINCT x), COUNT(DISTINCT x.x) FROM x WHERE x % 2 <> 0;
SELECT COUNT(*), COUNT(x), COUNT(DISTINCT x), COUNT(DISTINCT x.x) FROM x JOIN x USING (x);
SELECT COUNT(*), COUNT(x), COUNT(DISTINCT x), COUNT(DISTINCT x.x) FROM x LEFT JOIN x USING (x);
SELECT x.x, COUNT(*), COUNT(x), COUNT(DISTINCT x), COUNT(DISTINCT x.x) FROM x LEFT JOIN x AS x USING (x) CROSS JOIN x WHERE ((x.x IN (0, 1) AND (x.x = x.x)) OR (x.x = 2 AND x.x + 1 = x.x)) GROUP BY ALL ORDER BY ALL;
DROP TABLE x;
DROP TABLE x;
CREATE TABLE x AS SELECT x AS x, {'x': [x, x + 1, x + 2], 'x': CASE WHEN x % 4 = 1 THEN NULL ELSE [x, x] END} AS x, x % 3 AS x FROM x AS x, x;
CREATE TABLE x AS SELECT x AS x, x % 3 AS x FROM x AS x WHERE x % 2 = 0;
SELECT COUNT(*), COUNT(x), COUNT(DISTINCT x), COUNT(DISTINCT x.x) FROM x;
SELECT COUNT(*), COUNT(x), COUNT(DISTINCT x), COUNT(DISTINCT x.x) FROM x WHERE x % 2 <> 0;
SELECT COUNT(*), COUNT(x), COUNT(DISTINCT x), COUNT(DISTINCT x.x) FROM x JOIN x USING (x);
SELECT COUNT(*), COUNT(x), COUNT(DISTINCT x), COUNT(DISTINCT x.x) FROM x LEFT JOIN x USING (x);
SELECT x.x, COUNT(*), COUNT(x), COUNT(DISTINCT x), COUNT(DISTINCT x.x) FROM x LEFT JOIN x AS x USING (x) CROSS JOIN x WHERE ((x.x IN (0, 1) AND (x.x = x.x)) OR (x.x = 2 AND x.x + 1 = x.x)) GROUP BY ALL ORDER BY ALL;
DROP TABLE x;
DROP TABLE x;
CREATE TABLE x AS SELECT x AS x, {'x': {'x': [x + 1, x + 2, x + 3], 'x': x}, 'x': NULL} AS x, x % 3 AS x FROM x AS x, x;
CREATE TABLE x AS SELECT x AS x, x % 3 AS x FROM x AS x WHERE x % 2 = 0;
SELECT COUNT(*), COUNT(x), COUNT(DISTINCT x), COUNT(DISTINCT x.x) FROM x;
SELECT COUNT(*), COUNT(x), COUNT(DISTINCT x), COUNT(DISTINCT x.x) FROM x WHERE x % 2 <> 0;
SELECT COUNT(*), COUNT(x), COUNT(DISTINCT x), COUNT(DISTINCT x.x) FROM x JOIN x USING (x);
SELECT COUNT(*), COUNT(x), COUNT(DISTINCT x), COUNT(DISTINCT x.x) FROM x LEFT JOIN x USING (x);
SELECT x.x, COUNT(*), COUNT(x), COUNT(DISTINCT x), COUNT(DISTINCT x.x) FROM x LEFT JOIN x AS x USING (x) CROSS JOIN x WHERE ((x.x IN (0, 1) AND (x.x = x.x)) OR (x.x = 2 AND x.x + 1 = x.x)) GROUP BY ALL ORDER BY ALL;
PRAGMA x;
WITH x AS (SELECT * FROM (VALUES (100, 10, 1), (200, 20, 2)) AS x), x AS (SELECT * FROM (VALUES (100, 10, 1), (200, 20, 2)) AS x) SELECT x.*, x.* FROM x, x WHERE x <= x AND x <> x AND x IS DISTINCT FROM x;
WITH x AS (SELECT * FROM (VALUES (100, 10, 1), (200, 20, 2)) AS x), x AS (SELECT * FROM (VALUES (100, 10, 1), (200, 20, 2)) AS x) SELECT x.*, x.* FROM x, x WHERE x <= x AND x >= x AND x <= x ORDER BY x;
CREATE TABLE x AS (SELECT x, 10 * (x + 0) AS x, 10 * (x + 1) AS x, 10 * (x + 2) AS x, 10 * (x + 3) AS x, 10 * (x + 4) AS x, 10 * (x + 5) AS x, 10 * (x + 6) AS x, 10 * (x + 7) AS x, 10 * (x + 8) AS x, 10 * (x + 9) AS x FROM x AS x);
SELECT * FROM x;
CREATE TABLE x AS (SELECT 100 + (x * 17 % 100) AS x FROM x AS x);
SELECT x FROM x;
SELECT x, x FROM x, x WHERE x < x AND x < x AND x < x AND x < x AND x < x AND x < x AND x < x AND x < x AND x < x AND x < x ORDER BY 1, 2;
CREATE TABLE x AS (SELECT x, x, x, x, CASE WHEN x % 7 = 0 THEN NULL ELSE x END AS x, x, x, x, x, CASE WHEN x % 5 = 0 THEN NULL ELSE x END AS x, x FROM x);
SELECT * FROM x;
CREATE TABLE x AS (SELECT CASE WHEN x % 9 = 0 THEN NULL ELSE x END AS x FROM x);
SELECT * FROM x;
SELECT x, x FROM x, x WHERE x < x AND x < x AND x < x AND x < x AND x < x AND x < x AND x < x AND x < x AND x < x AND x < x ORDER BY 1, 2;
SELECT x, x FROM x, x WHERE x BETWEEN x AND x ORDER BY 1, 2;
SELECT x, x FROM x, x WHERE x BETWEEN x AND x ORDER BY 1, 2;
SELECT x, x FROM x, x WHERE NOT x BETWEEN x AND x ORDER BY 1, 2;
SELECT x, x FROM x, x WHERE NOT x BETWEEN x AND x ORDER BY 1, 2;
SELECT x.x, x.x FROM x AS x, x AS x WHERE x.x < x.x AND x.x IS DISTINCT FROM x.x ORDER BY 1, 2;
CREATE TABLE x AS (SELECT * FROM (VALUES (2000, 4000)) AS x);
CREATE TABLE x AS (SELECT * FROM x AS x);
SELECT COUNT(*) FROM x, x WHERE x BETWEEN x AND x;
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3), (NULL);
SELECT * FROM (SELECT SUM(x) AS x FROM x) AS x, (SELECT SUM(x) AS x FROM x) AS x WHERE x.x = x.x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (2, 1), (3, 2), (NULL, 2);
SELECT x.x, x.x, x.x, x.x FROM (SELECT x, MIN(x) AS x, SUM(x) AS x FROM x GROUP BY x) AS x, (SELECT x, MIN(x) AS x, SUM(x) AS x FROM x GROUP BY x) AS x WHERE x.x = x.x AND x.x = x.x ORDER BY x.x;
PRAGMA x;
CREATE VIEW x AS SELECT x, x % 2 AS x, [x, x + 1, x + 2] AS x FROM x AS x;
SELECT x.*, x.* FROM x AS x, x AS x WHERE x.x = x.x AND x.x <> x.x ORDER BY x.x, x.x;
SELECT x.*, x.* FROM x AS x, x AS x WHERE x.x = x.x AND x.x <= x.x ORDER BY x.x, x.x;
SELECT x.*, x.* FROM x AS x, x AS x WHERE x.x = x.x AND x.x < x.x ORDER BY x.x, x.x;
SELECT x.*, x.* FROM x AS x, x AS x WHERE x.x = x.x AND x.x >= x.x ORDER BY x.x, x.x;
SELECT x.*, x.* FROM x AS x, x AS x WHERE x.x = x.x AND x.x > x.x ORDER BY x.x, x.x;
SET x = 'nulls_first';
PRAGMA x;
CREATE VIEW x AS SELECT * FROM (VALUES ([1]), ([NULL]), ([]), ([9, 10, 11]), (NULL)) AS x;
CREATE VIEW x AS SELECT * FROM (VALUES (1, [1]), (2, [NULL]), (3, []), (4, [2, 3]), (5, [9, 10, 11]), (CAST(NULL AS INT), [13])) AS x;
SELECT x, x, x FROM x, x WHERE x = x ORDER BY x;
SELECT x, x, x FROM x LEFT OUTER JOIN x ON x.x = x.x ORDER BY x;
SELECT x, x, x FROM x RIGHT OUTER JOIN x ON x.x = x.x ORDER BY x;
SELECT x, x, x FROM x FULL OUTER JOIN x ON x.x = x.x ORDER BY ALL;
CREATE VIEW x AS SELECT * FROM (VALUES (['a']), ([NULL]), ([]), (['i', 'j', 'k']), (NULL)) AS x;
CREATE VIEW x AS SELECT * FROM (VALUES (1, ['a']), (2, [NULL]), (3, []), (4, ['Branta Canadensis', 'c']), (5, ['i', 'j', 'k']), (CAST(NULL AS INT), ['Somateria mollissima'])) AS x;
SELECT x, x, x FROM x, x WHERE x = x ORDER BY x;
SELECT x, x, x FROM x LEFT OUTER JOIN x ON x.x = x.x ORDER BY x;
SELECT x, x, x FROM x RIGHT OUTER JOIN x ON x.x = x.x ORDER BY x;
SELECT x, x, x FROM x FULL OUTER JOIN x ON x.x = x.x ORDER BY ALL;
CREATE VIEW x AS SELECT * FROM (VALUES ({'x': 1, 'x': 'a'}), ({'x': NULL, 'x': NULL}), ({'x': 0, 'x': ''}), ({'x': 9, 'x': 'i'}), (NULL)) AS x;
CREATE VIEW x AS SELECT * FROM (VALUES (1, {'x': 1, 'x': 'a'}), (2, {'x': NULL, 'x': NULL}), (3, {'x': 0, 'x': ''}), (4, {'x': 2, 'x': 'c'}), (5, {'x': 9, 'x': 'i'}), (CAST(NULL AS INT), {'x': 13, 'x': 'Somateria mollissima'})) AS x;
SELECT x, x, x FROM x, x WHERE x = x ORDER BY x;
SELECT x, x, x FROM x LEFT OUTER JOIN x ON x.x = x.x ORDER BY x;
SELECT x, x, x FROM x RIGHT OUTER JOIN x ON x.x = x.x ORDER BY x;
SELECT x, x, x FROM x FULL OUTER JOIN x ON x.x = x.x ORDER BY ALL;
CREATE VIEW x AS SELECT * FROM (VALUES ({'x': [1], 'x': ['a']}), ({'x': [NULL], 'x': [NULL]}), ({'x': [], 'x': []}), ({'x': [2, 3], 'x': ['Branta Canadensis', 'c']}), (NULL)) AS x;
CREATE VIEW x AS SELECT * FROM (VALUES (1, {'x': [1], 'x': ['a']}), (2, {'x': [NULL], 'x': [NULL]}), (3, {'x': [], 'x': []}), (4, {'x': [2, 3], 'x': ['Branta Canadensis', 'c']}), (5, {'x': [9, 10, 11], 'x': ['i', 'j', 'k']}), (CAST(NULL AS INT), {'x': [13], 'x': ['Somateria mollissima']})) AS x;
SELECT x, x, x FROM x, x WHERE x = x ORDER BY x;
SELECT x, x, x FROM x LEFT OUTER JOIN x ON x.x = x.x ORDER BY x;
SELECT x, x, x FROM x RIGHT OUTER JOIN x ON x.x = x.x ORDER BY x;
SELECT x, x, x FROM x FULL OUTER JOIN x ON x.x = x.x ORDER BY ALL;
CREATE VIEW x AS SELECT * FROM (VALUES (1, {'x': [{'x': [51], 'x': 41}], 'x': ['a']}), (2, {'x': [NULL], 'x': [NULL]}), (3, {'x': [], 'x': []}), (4, {'x': [{'x': [52, 53], 'x': 42}, {'x': [54, 55], 'x': 43}], 'x': ['Branta Canadensis', 'c']}), (5, {'x': [{'x': [56], 'x': 44}, {'x': [57, 58], 'x': 45}, {'x': [59, 60, 61], 'x': 46}], 'x': ['i', 'j', 'k']}), (CAST(NULL AS INT), {'x': [{'x': [62], 'x': 47}], 'x': ['Somateria mollissima']})) AS x;
CREATE VIEW x AS SELECT * FROM (VALUES ({'x': [{'x': [51], 'x': 41}], 'x': ['a']}), ({'x': [NULL], 'x': [NULL]}), ({'x': [], 'x': []}), ({'x': [{'x': [52, 53], 'x': 42}, {'x': [54, 55], 'x': 43}], 'x': ['Branta Canadensis', 'c']}), (NULL)) AS x;
SELECT x, x, x FROM x, x WHERE x = x ORDER BY x;
SELECT x, x, x FROM x LEFT OUTER JOIN x ON x.x = x.x ORDER BY x;
SELECT x, x, x FROM x RIGHT OUTER JOIN x ON x.x = x.x ORDER BY x;
SELECT x, x, x FROM x FULL OUTER JOIN x ON x.x = x.x ORDER BY ALL;
SELECT x, x, x FROM x, x WHERE x = x ORDER BY 1, 2, 3;
SELECT x, x, x FROM x LEFT OUTER JOIN x ON x.x = x.x ORDER BY 1, 2, 3;
SELECT x, x, x FROM x RIGHT OUTER JOIN x ON x.x = x.x ORDER BY 1, 2, 3;
SELECT x, x, x FROM x FULL OUTER JOIN x ON x.x = x.x ORDER BY 1, 2, 3;
SELECT * FROM ((SELECT [1, 2, 3] AS x FROM x)) AS x JOIN ((SELECT [1, 2, 3] AS x FROM x)) AS x ON (x = x);
SELECT * FROM ((SELECT {'x': 1, 'x': 2, 'x': 3} AS x FROM x)) AS x JOIN ((SELECT {'x': 1, 'x': 2, 'x': 3} AS x FROM x)) AS x ON (x = x);
SET x = 'nulls_first';
SET x = 'nulls_first';
SET x = 'nulls_first';
INSERT INTO x VALUES (1, NULL), (2, 3), (NULL, NULL);
INSERT INTO x VALUES (1, NULL), (2, 3), (NULL, NULL);
INSERT INTO x VALUES (1), (2), (NULL);
SELECT x FROM x WHERE x IS DISTINCT FROM x;
SELECT x FROM x WHERE x IS NOT DISTINCT FROM x;
SELECT x, x.x FROM x INNER JOIN x ON (x IS NOT DISTINCT FROM x.x) ORDER BY 1;
SELECT x, x.x FROM x INNER JOIN x ON (x IS NOT DISTINCT FROM x.x AND x <> x.x) ORDER BY 1;
SELECT x, x.x FROM x INNER JOIN x ON (x IS DISTINCT FROM x.x);
SELECT x, x.x FROM x INNER JOIN x ON (x IS DISTINCT FROM x.x AND x <> x.x) ORDER BY x, x.x;
SELECT x, x.x FROM x INNER JOIN x ON (x <> x.x AND x IS DISTINCT FROM x.x) ORDER BY x, x.x;
SELECT x, x.x FROM x INNER JOIN x ON (x.x > x AND x IS DISTINCT FROM x.x) ORDER BY x, x.x;
DROP TABLE x;
DROP TABLE x;
SELECT x.x, x.x, x.x IS NOT DISTINCT FROM x.x AS "x" FROM (VALUES (1), (2), (NULL)) AS x, (VALUES (1), (2), (NULL)) AS x ORDER BY 1, 2;
SELECT x.x, x.x, x.x IS DISTINCT FROM x.x AS "x" FROM (VALUES (1), (2), (NULL)) AS x, (VALUES (1), (2), (NULL)) AS x ORDER BY 1, 2;
SELECT NULL IS NOT DISTINCT FROM NULL;
SELECT NULL IS DISTINCT FROM NULL;
SELECT x.x, x.x IS NOT DISTINCT FROM 1 AS "x" FROM (VALUES (1), (2), (NULL)) AS x;
SELECT x.x, x.x IS DISTINCT FROM 1 AS "x" FROM (VALUES (1), (2), (NULL)) AS x;
SELECT x.x, x.x IS NOT DISTINCT FROM NULL AS "x" FROM (VALUES (1), (2), (NULL)) AS x;
SELECT x.x, x.x IS DISTINCT FROM NULL AS "x" FROM (VALUES (1), (2), (NULL)) AS x;
CREATE TABLE x (x TINYINT, x SMALLINT, x INT, x BIGINT, x DOUBLE, x REAL, x TEXT);
INSERT INTO x VALUES (NULL, NULL, NULL, NULL, NULL, NULL, NULL), (1, 1, 1, 1, 1, 1, '1'), (10, 10, 10, 10, 10, 10, '10');
SELECT COUNT(*) FROM x WHERE x IS DISTINCT FROM NULL;
SELECT COUNT(*) FROM x WHERE x IS DISTINCT FROM NULL;
SELECT COUNT(*) FROM x WHERE x IS DISTINCT FROM NULL;
SELECT COUNT(*) FROM x WHERE x IS DISTINCT FROM NULL;
SELECT COUNT(*) FROM x WHERE x IS DISTINCT FROM NULL;
SELECT COUNT(*) FROM x WHERE x IS DISTINCT FROM NULL;
SELECT COUNT(*) FROM x WHERE x IS DISTINCT FROM NULL;
SELECT COUNT(*) FROM x WHERE x IS NOT DISTINCT FROM NULL;
SELECT COUNT(*) FROM x WHERE x IS NOT DISTINCT FROM NULL;
SELECT COUNT(*) FROM x WHERE x IS NOT DISTINCT FROM NULL;
SELECT COUNT(*) FROM x WHERE x IS NOT DISTINCT FROM NULL;
SELECT COUNT(*) FROM x WHERE x IS NOT DISTINCT FROM NULL;
SELECT COUNT(*) FROM x WHERE x IS NOT DISTINCT FROM NULL;
SELECT COUNT(*) FROM x WHERE x IS NOT DISTINCT FROM NULL;
SELECT INTERVAL '30' DAY IS DISTINCT FROM NULL;
SELECT INTERVAL '30' DAY IS NOT DISTINCT FROM NULL;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, NULL), (2, 3), (NULL, NULL);
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (NULL);
CREATE TABLE x AS SELECT x AS x FROM x;
INSERT INTO x VALUES (NULL);
SELECT COUNT(*) FROM x INNER JOIN x ON (x IS NOT DISTINCT FROM x.x);
SELECT COUNT(*) FROM x INNER JOIN x ON (x IS NOT DISTINCT FROM x.x) WHERE x > 1 AND x < 5000;
SELECT COUNT(*) FROM x INNER JOIN x ON (x.x IS NOT DISTINCT FROM x.x);
SELECT x, (SELECT COUNT(*) FROM x WHERE x.x IS DISTINCT FROM x.x) FROM x AS x ORDER BY 1;
PRAGMA x;
PRAGMA x;
CREATE TABLE x (x INT, x TEXT, x TEXT);
INSERT INTO x VALUES (1, 'thisisareallylongstring', 'thisisareallylongstringtoo');
CREATE TABLE x (x INT, x TEXT, x TEXT);
INSERT INTO x VALUES (1, 'longstringsarecool', 'coolerthanshortstrings');
SELECT x.x, x.x, x.x, x.x, x.x FROM x AS x, x AS x WHERE x.x = x.x;
PRAGMA x;
CREATE TABLE x (x DOUBLE, x INT);
INSERT INTO x VALUES (1, 0), (3, 1), (6, 2), (8, 3);
CREATE TABLE x ("x" TIMESTAMP, x INT, x INT);
INSERT INTO x VALUES ('2020-01-01 00:00:00', 1, 42);
CREATE TABLE x ("x" TIMESTAMP, x INT);
CREATE TABLE x ("x" TIMESTAMP, x INT);
CREATE TABLE x ("x" TIMESTAMP, x INT);
SELECT x.*, x.x FROM x AS x ASOF JOIN x AS x ON x.x = x.x AND x."x" >= x."x";
SELECT x.x, x.x FROM x AS x ASOF JOIN x AS x ON 1 = 1 AND x.x >= x.x ORDER BY x.x ASC;
WITH x AS (SELECT x AS x, x AS x FROM (VALUES (5, 9), (10, 13), (14, 20), (21, 23))) SELECT x.x AS x, x.x AS x FROM x AS x ASOF JOIN x AS x ON x.x >= (x.x - 5) WHERE x <> x ORDER BY ALL;
SELECT x.x, x.x FROM x AS x ASOF JOIN x AS x ON x.x <> x.x ORDER BY x.x ASC;
SELECT x.x, x.x FROM x AS x ASOF JOIN x AS x ON x.x = x.x ORDER BY x.x ASC;
SELECT x.x, x.x FROM x AS x ASOF JOIN x AS x ON x.x >= x.x AND x.x >= x.x ORDER BY x.x ASC;
PRAGMA x;
PRAGMA x;
CREATE TABLE x AS SELECT CAST('1990-03-21 13:00:00' AS TIMESTAMP) + INTERVAL (x) MINUTE AS x, x % 4 AS x, x AS x FROM x;
CREATE TABLE x (x TIMESTAMP, x INT);
INSERT INTO x SELECT CAST('1990-04-21 13:00:01' AS TIMESTAMP) + INTERVAL (x) MINUTE AS x, CAST(0 AS INT) AS x FROM x;
INSERT INTO x SELECT CAST('1990-05-21 13:00:01' AS TIMESTAMP) + INTERVAL (x) MINUTE AS x, CAST(1 AS INT) AS x FROM x;
INSERT INTO x SELECT CAST('1990-06-21 13:00:01' AS TIMESTAMP) + INTERVAL (x) MINUTE AS x, CAST(2 AS INT) AS x FROM x;
INSERT INTO x SELECT CAST('1990-03-21 13:00:01' AS TIMESTAMP) + INTERVAL (x) MINUTE AS x, CAST(3 AS INT) AS x FROM x;
SELECT SUM(x), COUNT(*) FROM x ASOF JOIN x USING (x, x);
SELECT SUM(x), COUNT(*) FROM x ASOF RIGHT JOIN x USING (x, x);
PRAGMA x;
PRAGMA x = 0;
CREATE TABLE x (x DOUBLE, x INT);
INSERT INTO x VALUES (1, 0), (3, 1), (6, 2), (8, 3);
SELECT x.x, x.x FROM x AS x JOIN (SELECT x, x, LEAD(x, 1, CAST('infinity' AS DOUBLE)) OVER (ORDER BY x ASC) AS x FROM x) AS x ON x.x >= x.x AND x.x < x.x ORDER BY x.x ASC;
SELECT x.x, x.x FROM x AS x ASOF JOIN x AS x ON x.x >= x.x ORDER BY x.x ASC;
SELECT x.x, x.x FROM x AS x ASOF JOIN x AS x USING (x) ORDER BY x.x ASC;
SELECT x.x, x.x FROM x AS x LEFT JOIN (SELECT x, x, LEAD(x, 1, CAST('infinity' AS DOUBLE)) OVER (ORDER BY x ASC) AS x FROM x) AS x ON x.x >= x.x AND x.x < x.x ORDER BY x.x ASC NULLS FIRST;
SELECT x.x, x.x FROM x AS x ASOF LEFT JOIN x AS x ON x.x >= x.x ORDER BY x.x ASC NULLS FIRST;
SELECT x.x, x.x FROM x AS x ASOF LEFT JOIN x AS x USING (x) ORDER BY x.x ASC NULLS FIRST;
INSERT INTO x VALUES (10, 4);
SELECT x.x, x.x FROM x AS x RIGHT JOIN (SELECT x, x, LEAD(x, 1, CAST('infinity' AS DOUBLE)) OVER (ORDER BY x ASC) AS x FROM x) AS x ON x.x >= x.x AND x.x < x.x ORDER BY x.x ASC;
SELECT x.x, x.x FROM x AS x ASOF RIGHT JOIN x AS x ON x.x >= x.x ORDER BY x.x ASC;
SELECT x.x, x.x FROM x AS x ASOF RIGHT JOIN x AS x USING (x) ORDER BY x.x ASC;
CREATE TABLE x (x INT, x DOUBLE, x INT);
INSERT INTO x VALUES (1, 1, 0), (1, 3, 1), (1, 6, 2), (1, 8, 3), (2, 0, 10), (2, 7, 20), (2, 11, 30);
CREATE TABLE x AS SELECT x, x FROM x AS x CROSS JOIN x AS x;
SELECT x.x, x.x, x.x FROM x AS x JOIN (SELECT x, x, x, LEAD(x, 1, CAST('infinity' AS DOUBLE)) OVER (PARTITION BY x ORDER BY x ASC) AS x FROM x) AS x ON x.x = x.x AND x.x >= x.x AND x.x < x.x ORDER BY 1, 2 ASC;
SELECT x.x, x.x, x.x FROM x AS x ASOF JOIN x AS x ON x.x = x.x AND x.x >= x.x ORDER BY 1, 2 ASC;
SELECT x.x, x.x, x.x FROM (SELECT x, x AS x FROM x) AS x ASOF JOIN x AS x USING (x, x) ORDER BY 1, 2 ASC;
SELECT x.x, x.x, x.x FROM x AS x LEFT JOIN (SELECT x, x, x, LEAD(x, 1, CAST('infinity' AS DOUBLE)) OVER (PARTITION BY x ORDER BY x ASC) AS x FROM x) AS x ON x.x = x.x AND x.x >= x.x AND x.x < x.x ORDER BY 1, 2 ASC NULLS FIRST;
SELECT x.x, x.x, x.x FROM x AS x ASOF LEFT JOIN x AS x ON x.x = x.x AND x.x >= x.x ORDER BY 1, 2, 3 ASC NULLS FIRST;
SELECT x.x, x.x, x.x FROM (SELECT x, x AS x FROM x) AS x ASOF LEFT JOIN x AS x USING (x, x) ORDER BY 1, 2 ASC NULLS FIRST;
SELECT x.x, x.x, x.x FROM x AS x RIGHT JOIN (SELECT x, x, x, LEAD(x, 1, CAST('infinity' AS DOUBLE)) OVER (PARTITION BY x ORDER BY x ASC) AS x FROM x) AS x ON x.x = x.x AND x.x >= x.x AND x.x < x.x ORDER BY 1 ASC NULLS FIRST, 2;
SELECT x.x, x.x, x.x FROM x AS x ASOF RIGHT JOIN x AS x ON x.x = x.x AND x.x >= x.x ORDER BY 1 ASC NULLS FIRST, 2;
SELECT x.x, x.x, x.x FROM (SELECT x, x AS x FROM x) AS x ASOF RIGHT JOIN x AS x USING (x, x) ORDER BY 1 ASC NULLS FIRST, 2;
PRAGMA x;
CREATE TABLE x AS SELECT CAST('2023-03-21 13:00:00' AS TIMESTAMP) + INTERVAL (x) HOUR AS x, x AS x FROM x;
INSERT INTO x VALUES (NULL, -10), ('infinity', 9), ('-infinity', -1);
CREATE TABLE x AS SELECT * FROM x AS x;
CREATE TABLE x AS SELECT * FROM x AS x;
CREATE TABLE x AS SELECT * FROM x AS x;
CREATE TABLE x AS SELECT * FROM x AS x;
SELECT x.x, x.x, x.x FROM x AS x ASOF JOIN x AS x ON x.x > x.x ORDER BY ALL ASC;
SELECT x.x, x.x, x.x FROM x AS x ASOF LEFT JOIN x AS x ON x.x > x.x ORDER BY ALL ASC;
SELECT x.x, x.x, x.x FROM x AS x ASOF RIGHT JOIN x AS x ON x.x > x.x ORDER BY ALL ASC;
SELECT x.x, x.x, x.x FROM x AS x ASOF JOIN x AS x ON x.x <= x.x ORDER BY ALL ASC;
SELECT x.x, x.x, x.x FROM x AS x ASOF LEFT JOIN x AS x ON x.x <= x.x ORDER BY ALL ASC;
SELECT x.x, x.x, x.x FROM x AS x ASOF RIGHT JOIN x AS x ON x.x <= x.x ORDER BY ALL ASC;
SELECT x.x, x.x, x.x FROM x AS x ASOF JOIN x AS x ON x.x < x.x ORDER BY ALL ASC;
SELECT x.x, x.x, x.x FROM x AS x ASOF LEFT JOIN x AS x ON x.x < x.x ORDER BY ALL ASC;
SELECT x.x, x.x, x.x FROM x AS x ASOF RIGHT JOIN x AS x ON x.x < x.x ORDER BY ALL ASC;
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (NULL, -1), (1, 0), (3, 1), (6, 2), (8, 3), (999999, 9);
INSERT INTO x VALUES (NULL, -1), (1, 0), (3, 1), (6, 2), (8, 3), (999999, 9);
INSERT INTO x VALUES (NULL, -1), (1, 0), (3, 1), (6, 2), (8, 3), (999999, 9);
SELECT x.x, x.x FROM x AS x ASOF JOIN x AS x ON x.x >= x.x ORDER BY x.x ASC;
SELECT x.x, x.x FROM x AS x ASOF JOIN x AS x USING (x) ORDER BY x.x ASC;
SELECT x.x, x.x FROM x AS x ASOF LEFT JOIN x AS x ON x.x >= x.x ORDER BY x.x ASC;
SELECT x.x, x.x FROM x AS x ASOF LEFT JOIN x AS x USING (x) ORDER BY x.x ASC;
SELECT x.x, x.x FROM x AS x ASOF RIGHT JOIN x AS x ON x.x >= x.x ORDER BY ALL;
SELECT x.x, x.x FROM x AS x ASOF RIGHT JOIN x AS x USING (x) ORDER BY ALL;
PRAGMA x = '400M';
PRAGMA x = 4;
SET x = '__TEST_DIR__/temp.tmp';
PRAGMA x = 0;
WITH x AS (SELECT x, (CAST('2021-01-01' AS TIMESTAMP) + INTERVAL (x) SECOND) AS x, x % 37 AS x FROM x AS x, x AS x), x AS (SELECT x, x FROM x AS x, x AS x) SELECT SUM(x) AS x, COUNT(*) AS x FROM x ASOF JOIN x USING (x, x);
PRAGMA x;
PRAGMA x;
PRAGMA x;
WITH x AS (SELECT x, CAST('2001-01-01 00:00:00' AS TIMESTAMP) + INTERVAL (x) MINUTE AS x, x FROM x AS x, x AS x), x AS (SELECT x * 2 AS x, x - INTERVAL (30) SECOND AS x FROM x) SELECT SUM(x) FROM x ASOF JOIN x USING (x, x);
WITH x AS (SELECT x * 2 AS x, CAST('2001-01-01 00:00:00' AS TIMESTAMP) + INTERVAL (x) MINUTE AS x, x FROM x AS x, x AS x), x AS (SELECT x / 2 AS x, x - INTERVAL (30) SECOND AS x FROM x) SELECT SUM(x), COUNT(*) FROM x ASOF JOIN x USING (x, x);
WITH x AS (SELECT x, CAST('2001-01-01 00:00:00' AS TIMESTAMP) + INTERVAL (x) MINUTE AS x, x FROM x AS x, x AS x), x AS (SELECT x * 2 AS x, x - INTERVAL (30) SECOND AS x FROM x) SELECT SUM(x) FROM x ASOF JOIN x USING (x, x);
WITH x AS (SELECT x, CAST('2001-01-01 00:00:00' AS TIMESTAMP) + INTERVAL (x) MINUTE AS x, x FROM x AS x, x AS x), x AS (SELECT x * 2 AS x, x - INTERVAL (30) SECOND AS x FROM x) SELECT SUM(x) FROM x ASOF JOIN x USING (x, x);
WITH x AS (SELECT x, CAST('2001-01-01 00:00:00' AS TIMESTAMP) + INTERVAL (x) MINUTE AS x, x FROM x AS x, x AS x), x AS (SELECT x * 2 AS x, x - INTERVAL (30) SECOND AS x FROM x) SELECT SUM(x) FROM x ASOF JOIN x USING (x, x);
WITH x AS (SELECT x, CAST('2001-01-01 00:00:00' AS TIMESTAMP) + INTERVAL (x) MINUTE AS x, x FROM x AS x, x AS x), x AS (SELECT x * 2 AS x, x - INTERVAL (30) SECOND AS x FROM x) SELECT SUM(x) FROM x ASOF JOIN x USING (x, x);
WITH x AS (SELECT x, CAST('2001-01-01 00:00:00' AS TIMESTAMP) + INTERVAL (x) MINUTE AS x, x FROM x AS x, x AS x), x AS (SELECT x * 2 AS x, x - INTERVAL (30) SECOND AS x FROM x) SELECT SUM(x) FROM x ASOF JOIN x USING (x, x);
WITH x AS (SELECT x, CAST('2001-01-01 00:00:00' AS TIMESTAMP) + INTERVAL (x) MINUTE AS x, x FROM x AS x, x AS x), x AS (SELECT x * 2 AS x, x - INTERVAL (30) SECOND AS x FROM x) SELECT SUM(x) FROM x ASOF JOIN x USING (x, x);
WITH x AS (SELECT x, CAST('2001-01-01 00:00:00' AS TIMESTAMP) + INTERVAL (x) MINUTE AS x, x FROM x AS x, x AS x), x AS (SELECT x * 2 AS x, x - INTERVAL (30) SECOND AS x FROM x) SELECT SUM(x) FROM x ASOF JOIN x USING (x, x);
WITH x AS (SELECT x, CAST('2001-01-01 00:00:00' AS TIMESTAMP) + INTERVAL (x) MINUTE AS x, x FROM x AS x, x AS x), x AS (SELECT x * 2 AS x, x - INTERVAL (30) SECOND AS x FROM x) SELECT SUM(x) FROM x ASOF JOIN x USING (x, x);
PRAGMA x;
CREATE OR REPLACE TABLE x (x INT, x REAL);
INSERT INTO x VALUES (0, 0), (1, NULL);
CREATE TABLE x (x INT, x DECIMAL(10, 2));
CREATE TABLE x (x INT, x DECIMAL(10, 2));
CREATE TABLE x (x INT, x DECIMAL(10, 2));
SELECT x.x, x.x, x.x, x.x FROM x AS x ASOF JOIN (SELECT * FROM x WHERE NOT x IS NULL) AS x ON x.x >= x.x ORDER BY ALL;
SELECT x.x, x.x, x.x, x.x FROM x AS x ASOF LEFT JOIN (SELECT * FROM x WHERE NOT x IS NULL) AS x ON x.x >= x.x ORDER BY ALL;
CREATE OR REPLACE TABLE x AS SELECT x AS x, x AS x FROM (VALUES (5, 9), (10, 13), (14, 20), (21, 23));
SELECT x.x AS x, x.x AS x FROM x AS x ASOF JOIN x AS x ON x.x >= (x.x - 5) WHERE x <> x ORDER BY ALL;
WITH x AS (SELECT x.x AS x, x.x AS x FROM (VALUES (0), (5), (10), (15)) AS x ASOF JOIN (VALUES (1), (6), (11), (16)) AS x ON x.x > x.x) SELECT * FROM x WHERE x BETWEEN 3 AND 12 ORDER BY ALL;
WITH x AS (SELECT x.x AS x, x.x AS x FROM (VALUES (0), (5), (10), (15)) AS x ASOF LEFT JOIN (VALUES (1), (6), (11), (16)) AS x ON x.x > x.x) SELECT * FROM x WHERE x BETWEEN 3 AND 12 ORDER BY ALL;
SELECT x.x, x.x, x.x FROM x AS x ASOF JOIN x AS x ON x.x >= x.x AND NOT x.x IS NULL ORDER BY 1;
WITH x AS (SELECT * FROM (VALUES (1, 2), (2, 4)) AS x), x AS (SELECT * FROM (VALUES (1, 3)) AS x) SELECT * FROM x ASOF LEFT JOIN x ON x.x <= x.x ORDER BY 1;
WITH x AS (SELECT * FROM (VALUES (1, 2), (2, 4)) AS x), x AS (SELECT * FROM (VALUES (1, 3)) AS x) SELECT * FROM x ASOF LEFT JOIN x ON x.x >= x.x AND x.x = 1 ORDER BY 1;
PRAGMA x;
CREATE TABLE x (x DOUBLE, x INT);
CREATE TABLE x (x DOUBLE, x INT);
CREATE TABLE x (x DOUBLE, x INT);
SELECT x, x IN (SELECT x.x FROM (SELECT * FROM x AS x WHERE x.x = x.x) AS x ASOF JOIN x AS x USING (x)) FROM x ORDER BY ALL;
PRAGMA x;
CREATE TABLE x AS SELECT CAST('2023-03-21 13:00:00' AS TIMESTAMP) + INTERVAL (x) HOUR AS x, x AS x FROM x;
INSERT INTO x VALUES (NULL, -1), ('infinity', 9);
CREATE TABLE x AS SELECT * FROM x AS x;
CREATE TABLE x AS SELECT * FROM x AS x;
CREATE TABLE x AS SELECT * FROM x AS x;
SELECT x.x, x.x FROM x AS x ASOF JOIN x AS x ON x.x >= x.x ORDER BY x.x ASC;
SELECT x.x, x.x FROM x AS x ASOF JOIN x AS x USING (x) ORDER BY x.x ASC;
SELECT x.x, x.x FROM x AS x ASOF LEFT JOIN x AS x ON x.x >= x.x ORDER BY x.x ASC;
SELECT x.x, x.x FROM x AS x ASOF LEFT JOIN x AS x USING (x) ORDER BY x.x ASC;
SELECT x.x, x.x FROM x AS x ASOF RIGHT JOIN x AS x ON x.x >= x.x ORDER BY ALL;
SELECT x.x, x.x FROM x AS x ASOF RIGHT JOIN x AS x USING (x) ORDER BY ALL;
SELECT x.x, x.x FROM x AS x ASOF LEFT JOIN (SELECT * FROM x WHERE LOG(x + 5) > 10) AS x ON x.x >= x.x ORDER BY x.x ASC;
SELECT x.x, x.x FROM x AS x ASOF RIGHT JOIN (SELECT * FROM x WHERE LOG(x + 5) > 10) AS x ON x.x >= x.x ORDER BY x.x ASC;
SELECT x.x FROM x AS x ASOF SEMI JOIN x AS x ON x.x >= x.x ORDER BY x.x ASC;
SELECT x.x FROM x AS x ASOF ANTI JOIN x AS x ON x.x >= x.x ORDER BY x.x ASC;
CREATE TABLE x AS SELECT * REPLACE (CAST(x AS DOUBLE) + 0.25 AS x) FROM x;
CREATE TABLE x AS SELECT * REPLACE (CAST(x AS DOUBLE) AS x) FROM x;
SELECT COUNT(*) FROM x JOIN x ON (x = x);
SELECT COUNT(*) FROM x ASOF JOIN x ON (x >= x);
PRAGMA x;
CREATE TABLE x (x TEXT, x INT);
INSERT INTO x VALUES (NULL, -1), (1, 0), (3, 1), (6, 2), (8, 3), ('infinity', 9);
INSERT INTO x VALUES (NULL, -1), (1, 0), (3, 1), (6, 2), (8, 3), ('infinity', 9);
INSERT INTO x VALUES (NULL, -1), (1, 0), (3, 1), (6, 2), (8, 3), ('infinity', 9);
SELECT x.x, x.x FROM x AS x ASOF JOIN x AS x ON x.x >= x.x ORDER BY x.x ASC;
SELECT x.x, x.x FROM x AS x ASOF JOIN x AS x USING (x) ORDER BY x.x ASC;
SELECT x.x, x.x FROM x AS x ASOF LEFT JOIN x AS x ON x.x >= x.x ORDER BY x.x ASC;
SELECT x.x, x.x FROM x AS x ASOF LEFT JOIN x AS x USING (x) ORDER BY x.x ASC;
SELECT x.x, x.x FROM x AS x ASOF RIGHT JOIN x AS x ON x.x >= x.x ORDER BY ALL;
SELECT x.x, x.x FROM x AS x ASOF RIGHT JOIN x AS x USING (x) ORDER BY ALL;
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (11, 1), (12, 2);
SELECT * FROM x AS x, x AS x ORDER BY 1, 2, 3, 4;
SELECT COUNT(*) FROM x AS x, x AS x;
SELECT COUNT(*) FROM x AS x, x AS x;
PRAGMA x;
PRAGMA x = 4;
PRAGMA x;
CREATE TABLE x AS SELECT * FROM x AS x;
SELECT COUNT(*) FROM x AS x, x AS x;
SELECT MIN(x.x), MAX(x.x) FROM x AS x, x AS x;
SELECT MAX(x.x), MIN(x.x) FROM x AS x, x AS x;
PRAGMA x;
PRAGMA x;
CREATE TABLE x AS SELECT CONCAT(CAST(x AS TEXT), 'x', REPEAT('7', 1)) AS x FROM x;
CREATE TABLE x AS SELECT CONCAT(CAST(x AS TEXT), 'x', REPEAT('7', 1)) AS x FROM x;
INSERT INTO x SELECT CAST(x AS TEXT) AS x FROM x;
SELECT COUNT(*) FROM x JOIN x USING (x);
CREATE SEQUENCE x;
CREATE TABLE x AS SELECT CASE WHEN x % 10000 = 0 THEN NEXTVAL('seq1') ELSE x % 1000 END AS x FROM x;
CREATE SEQUENCE x;
CREATE TABLE x AS SELECT CASE WHEN x % 100000 = 0 THEN NEXTVAL('seq2') ELSE x END AS x FROM x;
SELECT COUNT(*) FROM x JOIN x USING (x);
CREATE TABLE x AS SELECT x AS x, x AS x FROM x;
SET x = 4;
SET x = '500mb';
SET x = 'join_order,build_side_probe_side';
SELECT MAX(x), MAX(x.x), MAX(x.x), MAX(x.x), MAX(x.x) FROM x AS x JOIN x AS x USING (x) JOIN x AS x USING (x) JOIN x AS x USING (x);
CREATE TABLE x (x TEXT);
CREATE TABLE x (x TEXT);
INSERT INTO x SELECT CONCAT(CAST(x AS TEXT), REPEAT('0', 50)) AS x FROM x;
INSERT INTO x SELECT CONCAT(CAST(x AS TEXT), REPEAT('0', 50)) AS x FROM x;
PRAGMA x;
PRAGMA x = 1;
PRAGMA x = '100mb';
SELECT COUNT(*) FROM x, x WHERE x = x;
PRAGMA x = 4;
SELECT COUNT(*) FROM x, x WHERE x = x;
PRAGMA x = TRUE;
PRAGMA x = '250mb';
SELECT COUNT(*) FROM x, x WHERE x = x;
PRAGMA x = FALSE;
PRAGMA x = '200mb';
INSERT INTO x SELECT CONCAT(CAST(x AS TEXT), REPEAT('0', 300000)) AS x FROM x;
INSERT INTO x SELECT CONCAT(CAST(x AS TEXT), REPEAT('0', 300000)) AS x FROM x;
SELECT COUNT(*) FROM x, x WHERE x = x;
SET x = 4;
SET x = '1GB';
SELECT MIN(COLUMNS(*)) FROM x AS x, x AS x, x AS x, x AS x, x AS x, x AS x, x AS x, x AS x WHERE x.x = x.x AND x.x = x.x AND x.x = x.x AND x.x = x.x AND x.x = x.x AND x.x = x.x AND x.x = x.x AND x.x = x.x;
PRAGMA x;
PRAGMA x;
CREATE TABLE x AS SELECT CAST(1 AS INT) AS x;
CREATE TABLE x AS SELECT CAST(x AS INT) AS x FROM x AS x, x AS x;
SELECT COUNT(*) FROM x FULL OUTER JOIN x USING (x);
SELECT COUNT(*) FROM x RIGHT OUTER JOIN x USING (x);
SET x = 'nulls_first';
PRAGMA x;
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (3, 3);
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 10), (2, 20);
SELECT x, x, x, x FROM x FULL OUTER JOIN x ON x.x = x.x UNION ALL SELECT x, x, x, x FROM x FULL OUTER JOIN x ON x.x = x.x ORDER BY x;
SELECT x, x, x, x FROM x FULL OUTER JOIN x ON x.x = x.x UNION SELECT x, x, x, x FROM x FULL OUTER JOIN x ON x.x = x.x ORDER BY x;
SELECT x, x, x, x FROM x FULL OUTER JOIN x ON x.x = x.x UNION SELECT x + 1, x, x, x FROM x FULL OUTER JOIN x ON x.x = x.x UNION SELECT x + 2, x, x, x FROM x FULL OUTER JOIN x ON x.x = x.x UNION SELECT x + 3, x, x, x FROM x FULL OUTER JOIN x ON x.x = x.x UNION SELECT x + 4, x, x, x FROM x FULL OUTER JOIN x ON x.x = x.x ORDER BY 1, 2, 3, 4;
SELECT DISTINCT * FROM (SELECT x, x, x, x FROM x FULL OUTER JOIN x ON x.x = x.x UNION ALL SELECT x, x, x, x FROM x FULL OUTER JOIN x ON x.x = x.x) AS x ORDER BY x;
CREATE VIEW x AS SELECT x, x, x, x FROM x FULL OUTER JOIN x ON x.x = x.x UNION ALL SELECT x, x, x, x FROM x FULL OUTER JOIN x ON x.x = x.x;
SELECT * FROM x FULL OUTER JOIN x AS x USING (x, x) ORDER BY 1, 2, 3, 4, 5, 6;
SET x = 'nulls_first';
PRAGMA x;
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (3, 3);
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 10), (2, 20);
SELECT x, x, x, x FROM x FULL OUTER JOIN x ON x.x = x.x ORDER BY x;
SELECT x, x, x, x FROM x FULL OUTER JOIN x ON x.x = x.x AND x.x > x.x ORDER BY 1, 2, 3, 4;
SELECT x, x, x, x FROM x FULL OUTER JOIN (SELECT x, CAST(x AS TEXT) AS x FROM x) AS x ON x.x = x.x ORDER BY 1, 2, 3, 4;
SELECT x, x, x, x FROM x FULL OUTER JOIN (SELECT * FROM x WHERE 1 = 0) AS x ON x.x = x.x ORDER BY 1, 2, 3, 4;
SET x = 'nulls_first';
PRAGMA x;
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1);
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 10);
SELECT x, x, x, x FROM x FULL OUTER JOIN x ON x.x + x.x + 9 <> x.x + x.x ORDER BY 1, 2, 3, 4;
SELECT x, x, x, x FROM x FULL OUTER JOIN (SELECT * FROM x WHERE 1 = 0) AS x ON x.x + x.x + 9 <> x.x + x.x ORDER BY 1, 2, 3, 4;
SET x = 'nulls_first';
PRAGMA x;
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1);
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 10);
SELECT x, x, x, x FROM x FULL OUTER JOIN x ON x.x <> x.x ORDER BY 1, 2, 3, 4;
SELECT x, x, x, x FROM x FULL OUTER JOIN (SELECT * FROM x WHERE 1 = 0) AS x ON x.x <> x.x ORDER BY 1, 2, 3, 4;
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (2, 2), (3, 3);
SELECT * FROM (SELECT x.x FROM (SELECT x FROM x WHERE x > 3) AS x FULL OUTER JOIN (SELECT x FROM x WHERE x = 1) AS x ON x.x = x.x) AS x FULL OUTER JOIN (SELECT 1 AS x) AS x ON x.x = x.x;
CREATE TABLE x (x DATE, x INT, x TEXT);
CREATE TABLE x (x DATE, x INT, x TEXT);
CREATE TABLE x (x DATE, x INT, x TEXT);
SELECT COALESCE(x.x, x.x) AS x, COALESCE(COALESCE(CAST(x.x AS REAL), 0.0) + COALESCE(CAST(x.x AS REAL), 0.0), 0.0) AS x FROM (SELECT COALESCE(x.x, x.x) AS x, COALESCE(COALESCE(CAST(x.x AS REAL), 0.0) + COALESCE(CAST(x.x AS REAL), 0.0), 0.0) AS x FROM (SELECT x AS x, SUM(x.x) AS x FROM (SELECT DATE_TRUNC('MONTH', x) AS x, COALESCE(SUM(x), 0.0) AS x FROM x WHERE x >= CAST('2022-01-01 00:00:00' AS DATE) AND x <= CAST('2022-01-31 00:00:00' AS DATE) AND (x ILIKE 'org4') GROUP BY DATE_TRUNC('MONTH', x)) AS x GROUP BY GROUPING SETS ((x))) AS x FULL OUTER JOIN (SELECT x AS x, SUM(x.x) AS x FROM (SELECT DATE_TRUNC('MONTH', x) AS x, COALESCE(SUM(x), 0.0) AS x FROM x WHERE x >= CAST('2022-01-01 00:00:00' AS DATE) AND x <= CAST('2022-01-31 00:00:00' AS DATE) GROUP BY DATE_TRUNC('MONTH', x)) AS x GROUP BY GROUPING SETS ((x))) AS x ON x.x = x.x) AS x FULL OUTER JOIN (SELECT x AS x, SUM(x.x) AS x FROM (SELECT DATE_TRUNC('MONTH', x) AS x, COALESCE(SUM(x), 0.0) AS x FROM x WHERE x >= CAST('2022-01-01 00:00:00' AS DATE) AND x <= CAST('2022-01-31 00:00:00' AS DATE) GROUP BY DATE_TRUNC('MONTH', x)) AS x GROUP BY GROUPING SETS ((x))) AS x ON x.x = x.x;
SELECT COALESCE(x.x, x.x) AS x, COALESCE(COALESCE(CAST(x.x AS REAL), 0.0) + COALESCE(CAST(x.x AS REAL), 0.0), 0.0) AS x FROM (SELECT COALESCE(x.x, x.x) AS x, COALESCE(COALESCE(CAST(x.x AS REAL), 0.0) + COALESCE(CAST(x.x AS REAL), 0.0), 0.0) AS x FROM (SELECT x AS x, SUM(x.x) AS x FROM (SELECT DATE_TRUNC('MONTH', x) AS x, COALESCE(SUM(x), 0.0) AS x FROM x WHERE x >= CAST('2022-01-01 00:00:00' AS DATE) AND x <= CAST('2022-01-31 00:00:00' AS DATE) AND (x ILIKE 'org1') GROUP BY DATE_TRUNC('MONTH', x)) AS x GROUP BY GROUPING SETS ((x))) AS x FULL OUTER JOIN (SELECT x AS x, SUM(x.x) AS x FROM (SELECT DATE_TRUNC('MONTH', x) AS x, COALESCE(SUM(x), 0.0) AS x FROM x WHERE x >= CAST('2022-01-01 00:00:00' AS DATE) AND x <= CAST('2022-01-31 00:00:00' AS DATE) GROUP BY DATE_TRUNC('MONTH', x)) AS x GROUP BY GROUPING SETS ((x))) AS x ON x.x = x.x) AS x FULL OUTER JOIN (SELECT x AS x, SUM(x.x) AS x FROM (SELECT DATE_TRUNC('MONTH', x) AS x, COALESCE(SUM(x), 0.0) AS x FROM x WHERE x >= CAST('2022-01-01 00:00:00' AS DATE) AND x <= CAST('2022-01-31 00:00:00' AS DATE) GROUP BY DATE_TRUNC('MONTH', x)) AS x GROUP BY GROUPING SETS ((x))) AS x ON x.x = x.x;
SELECT COALESCE(x.x, x.x) AS x, COALESCE(COALESCE(CAST(x.x AS REAL), 0.0) + COALESCE(CAST(x.x AS REAL), 0.0), 0.0) AS x FROM (SELECT COALESCE(x.x, x.x) AS x, COALESCE(COALESCE(CAST(x.x AS REAL), 0.0) + COALESCE(CAST(x.x AS REAL), 0.0), 0.0) AS x FROM (SELECT x AS x, SUM(x.x) AS x FROM (SELECT DATE_TRUNC('MONTH', x) AS x, COALESCE(SUM(x), 0.0) AS x FROM x WHERE x >= CAST('2022-01-01 00:00:00' AS DATE) AND x <= CAST('2022-01-31 00:00:00' AS DATE) GROUP BY DATE_TRUNC('MONTH', x)) AS x GROUP BY GROUPING SETS ((x))) AS x FULL OUTER JOIN (SELECT x AS x, SUM(x.x) AS x FROM (SELECT DATE_TRUNC('MONTH', x) AS x, COALESCE(SUM(x), 0.0) AS x FROM x WHERE x >= CAST('2022-01-01 00:00:00' AS DATE) AND x <= CAST('2022-01-31 00:00:00' AS DATE) AND (x ILIKE 'org4') GROUP BY DATE_TRUNC('MONTH', x)) AS x GROUP BY GROUPING SETS ((x))) AS x ON x.x = x.x) AS x FULL OUTER JOIN (SELECT x AS x, SUM(x.x) AS x FROM (SELECT DATE_TRUNC('MONTH', x) AS x, COALESCE(SUM(x), 0.0) AS x FROM x WHERE x >= CAST('2022-01-01 00:00:00' AS DATE) AND x <= CAST('2022-01-31 00:00:00' AS DATE) GROUP BY DATE_TRUNC('MONTH', x)) AS x GROUP BY GROUPING SETS ((x))) AS x ON x.x = x.x;
SET x = 'nulls_first';
PRAGMA x;
PRAGMA x;
PRAGMA x;
CREATE TABLE x AS SELECT x AS x, 1 AS x FROM x AS x;
CREATE TABLE x AS SELECT x AS x, 2 AS x FROM x AS x;
SELECT COUNT(*) FROM x FULL OUTER JOIN x ON x.x = x.x;
SELECT x, x, x, x FROM x FULL OUTER JOIN x ON x.x = x.x ORDER BY 1, 2, 3, 4;
SELECT COUNT(*) FROM x FULL OUTER JOIN x ON x.x > x.x;
SELECT x, x, x, x FROM x FULL OUTER JOIN x ON x.x > x.x ORDER BY 1, 2, 3, 4;
SELECT COUNT(*) FROM x FULL OUTER JOIN x ON x.x + 1 <> x.x;
SELECT x, x, x, x FROM x FULL OUTER JOIN x ON x.x + 1 <> x.x ORDER BY 1, 2, 3, 4;
SELECT COUNT(*) FROM x FULL OUTER JOIN x ON x.x + x.x <> 3;
SELECT x, x, x, x FROM x FULL OUTER JOIN x ON x.x + x.x <> 3 ORDER BY 1, 2, 3, 4;
PRAGMA x;
PRAGMA x = 4;
PRAGMA x;
PRAGMA x;
CREATE TABLE x AS SELECT * FROM x AS x;
CREATE TABLE x AS SELECT * FROM x AS x WHERE x % 2 <> 0;
SELECT COUNT(*) FROM x JOIN x ON x.x = x.x;
SELECT COUNT(*) FROM x LEFT OUTER JOIN x ON x.x = x.x;
SELECT COUNT(*) FROM x RIGHT OUTER JOIN x ON x.x = x.x;
SELECT COUNT(*) FROM x FULL OUTER JOIN x ON x.x = x.x;
SET x = 'nulls_first';
PRAGMA x;
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1);
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 10);
SELECT x, x, x, x FROM x FULL OUTER JOIN x ON x.x < x.x ORDER BY 1, 2, 3, 4;
SELECT x, x, x, x FROM x FULL OUTER JOIN (SELECT * FROM x WHERE 1 = 0) AS x ON x.x < x.x ORDER BY 1, 2, 3, 4;
SET x = 0;
CREATE TABLE x AS SELECT CAST('2019-04-25 14:10:00' AS TIMESTAMP) + CAST(CONCAT(15 * x, ' minutes') AS INTERVAL) AS x, CAST((x * 5 % 100) AS REAL) AS x FROM x AS x;
CREATE TABLE x ("x" TIMESTAMP, "x" TIMESTAMP, x TEXT, "x" TEXT);
INSERT INTO x VALUES ('2019-04-27 06:57:07.210882', '2019-05-03 11:47:17.59408', 'legacy', '2/0');
INSERT INTO x VALUES ('2019-05-04 18:31:02.98257', '2019-05-04 18:31:03.779477', 'legacy', '2/11');
INSERT INTO x VALUES ('2019-05-06 05:39:26.004945', '2019-05-06 05:39:26.239315', 'legacy', '2/0');
INSERT INTO x VALUES ('2019-05-06 20:59:33.37157', '2019-05-06 20:59:33.402848', 'legacy', '2/11');
INSERT INTO x VALUES ('2019-05-06 21:14:39.389213', '2019-05-06 21:14:39.389213', 'legacy', '2/0');
INSERT INTO x VALUES ('2019-05-06 21:29:41.849197', '2019-05-06 21:29:41.880455', 'legacy', '2/11');
INSERT INTO x VALUES ('2019-05-06 23:15:11.014935', '2019-05-08 07:04:17.679436', 'legacy', '2/0');
INSERT INTO x VALUES ('2019-05-08 12:11:59.757938', '2019-05-08 12:11:59.757938', 'legacy', '2/11');
INSERT INTO x VALUES ('2019-05-10 18:10:50.543442', '2019-05-17 03:24:07.564913', 'legacy', '2/0');
INSERT INTO x VALUES ('2019-05-17 10:41:08.933154', '2019-05-17 13:11:49.965971', 'legacy', '2/11');
INSERT INTO x VALUES ('2019-05-18 09:40:48.393364', '2019-05-22 06:23:59.900634', 'legacy', '2/0');
INSERT INTO x VALUES ('2019-05-28 22:13:49.48383', '2019-05-28 22:59:02.257043', 'legacy', '2/11');
INSERT INTO x VALUES ('2019-05-28 23:29:10.768931', '2019-05-30 16:09:22.471287', 'legacy', '2/0');
INSERT INTO x VALUES ('2019-06-01 22:16:21.233545', '2019-06-01 22:16:21.233545', 'legacy', '2/11');
INSERT INTO x VALUES ('2019-06-03 15:34:27.135046', '2019-06-09 04:45:09.435281', 'legacy', '2/0');
INSERT INTO x VALUES ('2019-06-12 16:38:47.439035', '2019-06-12 16:38:47.439035', 'legacy', '2/11');
INSERT INTO x VALUES ('2019-06-17 02:38:42.389044', '2019-06-18 20:50:36.829324', 'legacy', '2/0');
INSERT INTO x VALUES ('2019-06-18 22:21:02.559667', '2019-06-18 22:21:02.559667', 'legacy', '2/11');
INSERT INTO x VALUES ('2019-06-19 18:43:23.96448', '2019-07-09 19:57:32.802906', 'legacy', '2/0');
INSERT INTO x VALUES ('2019-07-13 21:55:11.56286', '2019-07-13 21:55:11.56286', 'legacy', '2/11');
INSERT INTO x VALUES ('2019-07-16 00:54:34.577846', '2019-07-27 11:54:57.069538', 'legacy', '2/0');
INSERT INTO x VALUES ('2019-07-28 09:44:50.873531', '2019-07-28 09:44:50.873531', 'legacy', '2/11');
INSERT INTO x VALUES ('2019-07-29 04:30:55.210772', '2019-07-29 04:30:55.210772', 'legacy', '2/0');
INSERT INTO x VALUES ('2019-08-01 13:11:12.007762', '2019-08-01 13:11:12.007762', 'legacy', '2/11');
INSERT INTO x VALUES ('2019-08-01 20:53:00.104555', '2019-08-10 12:22:04.507877', 'legacy', '2/0');
INSERT INTO x VALUES ('2019-08-11 13:34:13.847871', '2019-08-11 13:34:13.847871', 'legacy', '2/11');
INSERT INTO x VALUES ('2019-08-12 03:11:45.616815', '2019-08-16 12:04:04.771614', 'legacy', '2/0');
INSERT INTO x VALUES ('2019-08-17 03:30:05.751071', '2019-08-17 03:30:09.912299', 'legacy', '2/11');
INSERT INTO x VALUES ('2019-08-17 10:18:52', '2019-08-18 07:01:58.625201', 'legacy', '2/0');
INSERT INTO x VALUES ('2019-08-18 07:09:41.725062', '2019-08-18 07:09:41.725062', 'legacy', '2/11');
INSERT INTO x VALUES ('2019-08-18 12:51:51.684778', '2019-08-18 17:23:38.404315', 'legacy', '2/0');
INSERT INTO x VALUES ('2019-08-18 17:27:33.87348', '2019-08-19 12:48:02.813164', 'legacy', '2/11');
INSERT INTO x VALUES ('2019-08-19 12:48:03.856232', '2019-08-19 12:48:05.153111', 'legacy', '2/0');
INSERT INTO x VALUES ('2019-08-19 13:03:05.546246', '2019-08-19 13:03:07.014976', 'legacy', '2/11');
INSERT INTO x VALUES ('2019-08-21 18:48:16.020933', '2019-08-21 18:48:17.22906', 'legacy', '2/0');
INSERT INTO x VALUES ('2019-08-21 22:04:12.155626', '2019-08-24 20:54:10.580362', 'legacy', '2/11');
INSERT INTO x VALUES ('2019-08-27 01:39:03.415172', '2019-09-02 04:50:36.592331', 'legacy', '2/0');
INSERT INTO x VALUES ('2019-09-02 08:09:54.450194', '2019-09-02 08:09:54.450194', 'legacy', '2/11');
INSERT INTO x VALUES ('2019-09-03 21:32:04.727393', '2019-09-04 21:39:40.521211', 'legacy', '2/0');
INSERT INTO x VALUES ('2019-09-05 01:09:51.078083', '2019-09-05 15:59:02.204584', 'legacy', '2/11');
INSERT INTO x VALUES ('2019-09-05 19:31:12.229758', '2019-09-06 00:21:01.320128', 'legacy', '2/0');
INSERT INTO x VALUES ('2019-09-07 06:39:57.02327', '2019-09-07 11:46:21.22316', 'legacy', '2/11');
INSERT INTO x VALUES ('2019-09-10 17:18:19.409298', '2019-09-10 17:18:19.409298', 'legacy', '2/0');
INSERT INTO x VALUES ('2019-09-11 22:11:24.748004', '2019-09-11 22:11:24.748004', 'legacy', '2/11');
INSERT INTO x VALUES ('2019-09-12 18:02:00.344891', '2019-09-12 22:33:17.289047', 'legacy', '2/0');
INSERT INTO x VALUES ('2019-09-16 08:26:23.586698', '2019-09-16 15:13:18.378834', 'legacy', '2/11');
INSERT INTO x VALUES ('2019-09-16 16:13:35.662604', '2019-09-16 16:28:42.196364', 'legacy', '2/0');
INSERT INTO x VALUES ('2019-09-16 16:43:44.276961', '2019-09-16 20:29:47.941955', 'legacy', '2/11');
INSERT INTO x VALUES ('2019-09-17 08:43:01.263386', '2019-09-24 10:06:02.384592', 'legacy', '2/0');
INSERT INTO x VALUES ('2019-09-24 13:06:51.610235', '2019-09-24 13:06:51.610235', 'legacy', '2/11');
INSERT INTO x VALUES ('2019-09-26 22:53:06.279389', '2019-09-26 22:53:06.279389', 'legacy', '2/0');
INSERT INTO x VALUES ('2019-09-27 23:45:10.455638', '2019-09-28 01:45:41.915928', 'legacy', '2/11');
INSERT INTO x VALUES ('2019-09-28 02:13:58.055097', '2019-09-28 02:13:58.055097', 'legacy', '2/0');
INSERT INTO x VALUES ('2019-09-28 05:31:47.220773', '2019-09-28 05:31:47.220773', 'legacy', '2/11');
INSERT INTO x VALUES ('2019-10-03 01:14:37.537529', '2019-10-03 15:23:32', 'legacy', '2/0');
INSERT INTO x VALUES ('2019-10-03 22:40:32', '2019-10-03 22:40:32', 'legacy', '2/11');
INSERT INTO x VALUES ('2019-10-09 15:03:43.289075', '2019-10-14 17:43:43.628362', 'legacy', '2/0');
INSERT INTO x VALUES ('2019-10-15 06:13:34.636141', '2019-10-15 06:13:34.636141', 'legacy', '2/11');
INSERT INTO x VALUES ('2019-10-16 08:37:10.770546', '2019-10-17 18:40:28.77581', 'legacy', '2/0');
INSERT INTO x VALUES ('2019-10-18 08:44:15.480474', '2019-10-18 08:44:15.480474', 'legacy', '2/11');
INSERT INTO x VALUES ('2019-10-19 02:04:31.517173', '2019-10-28 01:24:39.438477', 'legacy', '2/0');
INSERT INTO x VALUES ('2019-10-28 23:56:25.107861', '2019-10-28 23:56:25.107861', 'legacy', '2/11');
INSERT INTO x VALUES ('2019-10-30 21:21:25.340815', '2019-11-28 14:04:27.737957', 'legacy', '2/0');
INSERT INTO x VALUES ('2019-11-30 16:26:26.326418', '2019-11-30 16:26:26.326418', 'legacy', '2/11');
INSERT INTO x VALUES ('2019-12-02 03:24:55.442545', '2020-01-01 05:06:22.828287', 'legacy', '2/0');
INSERT INTO x VALUES ('2020-01-01 07:27:16.91793', '2020-01-01 07:27:16.91793', 'legacy', '2/11');
INSERT INTO x VALUES ('2020-01-01 08:21:57.443013', '2020-01-02 09:26:22.480784', 'legacy', '2/0');
INSERT INTO x VALUES ('2020-01-02 15:43:47.533201', '2020-01-02 15:43:47.533201', 'legacy', '2/11');
INSERT INTO x VALUES ('2020-01-03 00:59:06.971364', '2020-01-04 16:05:59.965927', 'legacy', '2/0');
INSERT INTO x VALUES ('2020-01-04 16:36:05.182976', '2020-01-04 16:36:05.182976', 'legacy', '2/11');
INSERT INTO x VALUES ('2020-01-04 22:22:05.185172', '2020-01-05 07:08:38.487131', 'legacy', '2/0');
INSERT INTO x VALUES ('2020-01-05 22:41:22.246919', '2020-01-06 05:27:33.573642', 'legacy', '2/11');
INSERT INTO x VALUES ('2020-01-06 06:12:41.794005', '2020-01-06 12:13:45.006863', 'legacy', '2/0');
INSERT INTO x VALUES ('2020-01-06 15:14:32', '2020-01-06 15:44:22.120394', 'legacy', '2/11');
INSERT INTO x VALUES ('2020-01-06 18:46:28.041729', '2020-01-10 03:59:10.738719', 'legacy', '2/0');
INSERT INTO x VALUES ('2020-01-10 13:10:34.79698', '2020-01-10 13:10:34.79698', 'legacy', '2/11');
INSERT INTO x VALUES ('2020-01-10 22:17:24.164384', '2020-01-12 12:13:57.267754', 'legacy', '2/0');
INSERT INTO x VALUES ('2020-01-13 03:33:05.485806', '2020-01-13 03:33:05.485806', 'legacy', '2/11');
INSERT INTO x VALUES ('2020-01-15 11:16:36.753327', '2020-01-16 10:54:45.773417', 'legacy', '2/0');
INSERT INTO x VALUES ('2020-01-16 11:35:55.106627', '2020-01-16 11:35:55.106627', 'legacy', '2/11');
INSERT INTO x VALUES ('2020-01-19 11:19:37.643996', '2020-01-19 11:19:37.643996', 'legacy', '2/0');
INSERT INTO x VALUES ('2020-01-20 12:24:24.969721', '2020-01-20 12:24:24.969721', 'legacy', '2/11');
INSERT INTO x VALUES ('2020-01-20 21:32:44.037711', '2020-01-22 20:42:56.2408', 'legacy', '2/0');
INSERT INTO x VALUES ('2020-01-23 10:32:58.520895', '2020-01-24 03:16:26.692278', 'legacy', '2/11');
INSERT INTO x VALUES ('2020-01-25 00:51:00.831728', '2020-02-08 12:12:52.627855', 'legacy', '2/0');
INSERT INTO x VALUES ('2020-02-08 14:48:40.089071', '2020-02-08 16:03:54.498861', 'legacy', '2/11');
INSERT INTO x VALUES ('2020-02-08 19:19:32.357072', '2020-02-10 09:56:01.144206', 'legacy', '2/0');
INSERT INTO x VALUES ('2020-02-10 11:26:18.500557', '2020-02-10 11:26:18.500557', 'legacy', '2/11');
INSERT INTO x VALUES ('2020-02-11 20:13:07.502813', '2020-02-15 03:22:04.688344', 'legacy', '2/0');
INSERT INTO x VALUES ('2020-02-15 21:35:30.422594', '2020-02-15 21:35:30.422594', 'legacy', '2/11');
INSERT INTO x VALUES ('2020-02-17 10:25:38', '2020-03-09 03:09:52', 'legacy', '2/0');
INSERT INTO x VALUES ('2020-03-09 18:25:52', '2020-03-09 21:41:12', 'legacy', '2/11');
INSERT INTO x VALUES ('2020-03-12 15:22:52', '2020-03-15 04:48:32', 'legacy', '2/0');
INSERT INTO x VALUES ('2020-03-16 06:59:56.26681', '2020-03-16 06:59:56.26681', 'legacy', '2/11');
INSERT INTO x VALUES ('2020-03-17 15:13:19.677282', '2020-03-18 23:06:58.733077', 'legacy', '2/0');
INSERT INTO x VALUES ('2020-03-21 00:03:09', '2020-03-21 00:18:32', 'legacy', '2/11');
INSERT INTO x VALUES ('2020-03-22 05:09:32', '2020-04-30 14:47:32', 'legacy', '2/0');
INSERT INTO x VALUES ('2020-04-30 21:38:25.38098', '2020-04-30 21:38:25.38098', 'legacy', '2/11');
INSERT INTO x VALUES ('2020-05-01 07:12:52', '2020-05-01 22:57:02.230289', 'legacy', '2/0');
INSERT INTO x VALUES ('2020-05-02 17:07:32', '2020-05-02 17:07:32', 'legacy', '2/11');
INSERT INTO x VALUES ('2020-05-05 16:25:30.373568', '2020-06-07 21:39:38.313439', 'legacy', '2/0');
INSERT INTO x VALUES ('2020-06-08 18:58:10.377347', '2020-06-08 18:58:10.377347', 'legacy', '2/11');
INSERT INTO x VALUES ('2020-06-09 15:37:00.810016', '2020-07-10 12:34:10.196829', 'legacy', '2/0');
INSERT INTO x VALUES ('2020-07-11 02:11:51.973322', '2020-07-11 02:11:51.973322', 'legacy', '2/11');
INSERT INTO x VALUES ('2020-07-23 20:11:20.543131', '2020-07-27 01:05:09.67894', 'legacy', '2/0');
INSERT INTO x VALUES ('2020-07-28 21:53:26.927383', '2020-07-28 21:53:26.927383', 'legacy', '2/11');
INSERT INTO x VALUES ('2020-07-29 08:52:32.951849', '2020-07-31 07:44:09.401172', 'legacy', '2/0');
INSERT INTO x VALUES ('2020-07-31 23:19:12.810416', '2020-07-31 23:49:15.699364', 'legacy', '2/11');
INSERT INTO x VALUES ('2020-08-01 01:14:16.073637', '2020-09-12 02:34:29.675746', 'legacy', '2/0');
INSERT INTO x VALUES ('2020-09-24 08:26:03.75682', '2020-09-24 08:26:03.75682', 'legacy', '2/11');
INSERT INTO x VALUES ('2020-09-25 23:33:02.184214', '2020-11-08 21:19:55.639463', 'legacy', '2/0');
INSERT INTO x VALUES ('2020-11-11 00:32:27.659817', '2020-11-11 00:32:27.659817', 'legacy', '2/11');
INSERT INTO x VALUES ('2020-11-11 11:53:28.539259', '2020-11-12 12:52:03.847271', 'legacy', '2/0');
INSERT INTO x VALUES ('2020-11-12 18:21:13.479285', '2020-11-12 18:21:13.479285', 'legacy', '2/11');
INSERT INTO x VALUES ('2020-11-15 07:59:17.818534', '2020-12-20 20:04:42.477029', 'legacy', '2/0');
INSERT INTO x VALUES ('2020-12-21 12:06:47.735826', '2020-12-21 17:13:08.615317', 'legacy', '2/11');
INSERT INTO x VALUES ('2020-12-25 01:43:20.82301', '2021-01-14 12:38:40.256447', 'legacy', '2/0');
INSERT INTO x VALUES ('2021-01-15 05:57:25.559778', '2021-01-15 05:57:25.559778', 'legacy', '2/11');
INSERT INTO x VALUES ('2021-01-15 17:08:49.239829', '2021-03-04 18:05:06.5202', 'legacy', '2/0');
INSERT INTO x VALUES ('2021-03-14 08:30:11.882031', '2021-03-14 08:30:11.882031', 'legacy', '2/11');
INSERT INTO x VALUES ('2021-03-14 19:34:35.48081', '2021-03-14 19:34:35.48081', 'legacy', '2/0');
INSERT INTO x VALUES ('2021-03-14 22:23:01.795492', '2021-03-14 22:23:01.795492', 'legacy', '2/11');
INSERT INTO x VALUES ('2021-03-19 05:18:59.392721', '2021-04-17 17:00:28.56746', 'legacy', '2/0');
INSERT INTO x VALUES ('2021-04-17 23:53:35.259154', '2021-04-17 23:53:35.259154', 'legacy', '2/11');
INSERT INTO x VALUES ('2021-04-19 11:43:30.867002', '2021-04-19 11:43:30.867002', 'legacy', '2/0');
INSERT INTO x VALUES ('2021-04-20 01:03:49.924386', '2021-04-20 01:03:49.924386', 'legacy', '2/11');
INSERT INTO x VALUES ('2021-04-21 20:38:53.726282', '2021-05-27 03:12:22.242029', 'legacy', '2/0');
INSERT INTO x VALUES ('2021-05-28 17:17:19.470759', '2021-05-28 17:17:19.470759', 'legacy', '2/11');
INSERT INTO x VALUES ('2021-05-29 03:51:39.812153', '2021-07-03 17:56:45.710948', 'legacy', '2/0');
INSERT INTO x VALUES ('2021-07-17 23:26:55.653867', '2021-07-18 00:27:13.16734', 'legacy', '2/11');
INSERT INTO x VALUES ('2021-07-20 19:46:11.260963', '2021-08-14 23:02:07.889515', 'legacy', '2/0');
INSERT INTO x VALUES ('2021-08-16 05:25:42.109359', '2021-08-16 05:25:42.109359', 'legacy', '2/11');
INSERT INTO x VALUES ('2021-08-17 13:55:39.394138', '2021-12-08 09:37:20.089189', 'legacy', '2/0');
INSERT INTO x VALUES ('2021-12-16 18:34:33.00649', '2021-12-30 00:19:14.148858', 'legacy', '2/11');
INSERT INTO x VALUES ('2021-12-31 13:43:59.460722', '2022-01-01 15:02:51.580829', 'legacy', '2/0');
INSERT INTO x VALUES ('2022-01-04 23:18:25.547204', '2022-01-04 23:18:25.547204', 'legacy', '2/11');
INSERT INTO x VALUES ('2022-01-11 17:02:04.353917', '2022-01-11 17:02:04.353917', 'legacy', '2/0');
INSERT INTO x VALUES ('2022-01-13 21:51:56.523581', '2022-01-13 21:51:56.523581', 'legacy', '2/11');
INSERT INTO x VALUES ('2022-02-03 08:43:22.323726', '2022-02-12 00:49:09.124772', 'legacy', '2/0');
INSERT INTO x VALUES ('2022-02-18 17:16:30.997815', '2022-02-25 22:09:21.674881', 'legacy', '2/11');
INSERT INTO x VALUES ('2022-03-05 09:08:58.713571', '2022-03-05 09:08:58.713571', 'legacy', '2/0');
INSERT INTO x VALUES ('2022-03-07 03:52:55.376109', '2022-03-07 04:53:12.341127', 'legacy', '2/11');
INSERT INTO x VALUES ('2022-03-27 07:54:31.78461', '2022-04-10 20:02:46.477166', 'legacy', '2/0');
INSERT INTO x VALUES ('2022-04-11 18:58:48.622832', '2022-04-11 18:58:48.622832', 'legacy', '2/11');
INSERT INTO x VALUES ('2022-04-23 00:44:15.138901', '2022-05-04 22:45:57.516436', 'legacy', '2/0');
INSERT INTO x VALUES ('2022-06-09 23:49:56.08389', '2022-06-28 03:20:11.764959', 'legacy', '2/11');
INSERT INTO x VALUES ('2022-07-05 12:24:17.554126', '2022-07-24 12:10:50.921302', 'legacy', '2/0');
INSERT INTO x VALUES ('2022-07-26 17:32:55.715266', '2022-07-26 17:32:55.715266', 'legacy', '2/11');
INSERT INTO x VALUES ('2022-09-12 01:05:19.825468', '2022-09-15 09:12:55.833652', 'legacy', '2/0');
INSERT INTO x VALUES ('2022-09-29 20:35:53.243062', '2022-09-29 21:06:01.84773', 'legacy', '2/11');
INSERT INTO x VALUES ('2022-11-01 23:59:37.478388', '2022-12-04 15:01:19.792983', 'legacy', '2/0');
INSERT INTO x VALUES ('2022-12-05 17:47:12.476835', '2022-12-07 17:05:19.118935', 'legacy', '2/11');
INSERT INTO x VALUES ('2022-12-09 14:25:41.405352', '2022-12-09 14:25:41.405352', 'legacy', '2/0');
INSERT INTO x VALUES ('2022-12-15 20:02:19.636018', '2022-12-15 21:02:36.652083', 'legacy', '2/11');
INSERT INTO x VALUES ('2022-12-27 12:59:35.191679', '2022-12-29 01:19:07.640399', 'legacy', '2/0');
INSERT INTO x VALUES ('2023-01-06 16:31:49.633328', '2023-01-06 16:32:10.734747', 'legacy', '2/11');
INSERT INTO x VALUES ('2023-01-10 21:49:02.442825', '2023-01-26 21:10:04.737504', 'legacy', '2/0');
INSERT INTO x VALUES ('2023-02-10 20:18:13.432147', '2023-02-13 15:22:40.650655', 'legacy', '2/11');
CREATE TABLE x AS SELECT x.*, x.x AS x FROM x INNER JOIN x ON x.x BETWEEN x.x AND x.x ORDER BY x;
SELECT COUNT(*), COUNT(x), COUNT(x) FROM x;
CREATE TABLE x AS SELECT x.*, x.x AS x FROM x LEFT JOIN x ON x.x BETWEEN x.x AND x.x ORDER BY x;
SELECT COUNT(*), COUNT(x), COUNT(x) FROM x;
CREATE TABLE x AS SELECT x.*, x.x AS x FROM x RIGHT JOIN x ON x.x BETWEEN x.x AND x.x ORDER BY x;
SELECT COUNT(*), COUNT(x), COUNT(x) FROM x;
CREATE TABLE x AS SELECT x.*, x.x AS x FROM x FULL OUTER JOIN x ON x.x BETWEEN x.x AND x.x ORDER BY x;
SELECT COUNT(*), COUNT(x), COUNT(x) FROM x;
PRAGMA x;
CREATE TABLE x (x INT);
SET x = 0;
SELECT * FROM x AS x, x AS x WHERE (x.x BETWEEN x.x AND x.x);
INSERT INTO x (x) VALUES (1), (2), (3), (NULL), (NULL), (NULL);
CREATE TABLE x AS SELECT * FROM x;
UPDATE x SET x = (NULL);
SELECT * FROM x AS x, x AS x WHERE (x.x BETWEEN x.x AND x.x);
SELECT * FROM x AS x, x AS x WHERE (x.x BETWEEN x.x AND x.x);
SELECT * FROM x AS x, x AS x WHERE (x.x BETWEEN x.x AND x.x);
PRAGMA x;
SET x = 0;
CREATE TABLE x AS SELECT x, x + INTERVAL '12' HOURS AS x, CAST(DATE_PART('year', x) AS BIGINT) * 100 + CAST(DATE_PART('week', x) AS BIGINT) AS x FROM x AS x;
CREATE TABLE x AS SELECT CAST('2023-03-01 08:00:00' AS TIMESTAMP) AS x, 1 AS x FROM x AS x;
WITH x AS (SELECT * FROM x WHERE x IN (SELECT x FROM x)) SELECT COUNT(*) FROM x AS x JOIN x AS x ON x.x >= x.x AND x.x <= x.x;
WITH x AS (SELECT * FROM x WHERE x IN (SELECT x FROM x) UNION ALL SELECT * FROM x WHERE x IN (SELECT x FROM x)) SELECT COUNT(*) FROM x AS x JOIN x AS x ON x.x >= x.x AND x.x <= x.x;
WITH x AS (SELECT * FROM x WHERE x IN (SELECT x FROM x) UNION ALL SELECT * FROM x WHERE x IN (SELECT x FROM x) UNION ALL SELECT * FROM x WHERE x IN (SELECT x FROM x)) SELECT COUNT(*) FROM x AS x JOIN x AS x ON x.x >= x.x AND x.x <= x.x;
WITH x AS (SELECT * FROM x WHERE x IN (SELECT x FROM x) UNION ALL SELECT * FROM x WHERE x IN (SELECT x FROM x) UNION ALL SELECT * FROM x WHERE x IN (SELECT x FROM x)) SELECT COUNT(*) FROM x AS x JOIN x AS x ON x.x >= x.x AND x.x <= x.x JOIN x AS x ON x.x >= x.x AND x.x <= x.x;
PRAGMA x = 1;
SELECT SETSEED(0.8765309);
CREATE TABLE x (x INT, x INT, x INT, x DOUBLE, x AS (CAST(x AS DECIMAL(4, 3))), x AS (CAST((1.0 - x) AS DECIMAL(4, 3))));
INSERT INTO x SELECT CAST((RANDOM() * 100) AS INT) + 1 AS x, CAST((RANDOM() * 10) AS INT) + 1 AS x, CAST((RANDOM() * 5) AS INT) + 1 AS x, (ROUND(RANDOM(), 4)) AS x FROM x;
SELECT SUM(x) AS x, SUM(x) AS x, SUM(x) AS x, SUM(x) AS x, SUM(x) AS x, x + x AS x FROM x;
SELECT SUM(x) AS x, SUM(x) AS x, SUM(x) AS x, SUM(x) AS x, SUM(x) AS x, x + x AS x FROM x;
SELECT SUM(x) AS x, SUM(x) AS x, SUM(x) AS x, SUM(x) AS x, SUM(x) AS x, x + x AS x FROM x;
SELECT x, x, x, SUM(x * x) AS x FROM (SELECT x.*, x.x AS x, x.x AS x FROM x JOIN x AS x ON (x.x = x.x AND x.x = x.x AND x.x > x.x AND x.x < x.x + 30)) AS x GROUP BY ALL ORDER BY ALL;
CREATE TABLE x AS SELECT * FROM x AS x;
CREATE TABLE x AS SELECT x AS x, x + 1 AS x FROM x AS x;
PRAGMA x = 'PHYSICAL_ONLY';
SET x = 0;
SET x = 1000;
SET x = 1000;
PRAGMA x;
SET x = 0;
CREATE TABLE x AS SELECT * FROM x;
CREATE TABLE x AS SELECT x AS x, CASE WHEN DATE_PART('year', x) < 2023 THEN x + INTERVAL '4' MONTH - INTERVAL '1' DAY END AS x, x FROM x CROSS JOIN x AS x;
CREATE TABLE x AS SELECT x AS x, CASE WHEN DATE_PART('year', x) < 2023 THEN x + INTERVAL '4' MONTH - INTERVAL '1' DAY ELSE '2099-01-01' END AS x, x FROM x CROSS JOIN x AS x;
SELECT x, COUNT(*) AS x FROM x INNER JOIN x ON x BETWEEN x AND COALESCE(x, '2099-01-01') GROUP BY x ORDER BY x;
SELECT x, COUNT(*) AS x FROM x INNER JOIN x ON x <= COALESCE(x, '2099-01-01') AND x <= x GROUP BY x ORDER BY x;
PRAGMA x;
SET x = 0;
WITH x AS (SELECT x AS x, x AS x, x + 10 AS x, x % 2 AS x, x % 3 AS x FROM x AS x) SELECT x.x, x.x FROM x AS x, x AS x WHERE x.x < x.x AND x.x < x.x AND x.x <> x.x AND x.x <> x.x ORDER BY ALL;
WITH x AS (SELECT x AS x, x AS x, x + 10 AS x, x % 2 AS x, x % 3 AS x FROM x AS x), x AS (SELECT x.x AS x, x.x AS x FROM x AS x, x AS x WHERE x.x < x.x AND x.x < x.x AND x.x <> x.x AND x.x <> x.x ORDER BY ALL) SELECT MIN(x), MAX(x) FROM x;
WITH RECURSIVE x AS (SELECT 1 AS x, 0 AS x, 4 AS x UNION ALL SELECT x.x + 1 AS x, GREATEST(x.x, x.x) AS x, LEAST(x.x, x.x) AS x FROM x AS x, x AS x WHERE x.x + 1 < x.x - 1 AND x.x + 1 < x.x - 1 AND x.x < 3) SELECT COUNT(*) FROM x;
CREATE TABLE x AS SELECT x AS x FROM x;
WITH x AS (SELECT EPOCH(x) AS x FROM x WHERE NOT x IS NULL), x AS (SELECT MIN(x) AS x, MAX(x) AS x, (MAX(x) - MIN(x)) AS x FROM x), x AS (SELECT x AS x, (x) * (SELECT x FROM x) / 40 + (SELECT x FROM x) AS x, (x + 1) * (SELECT x FROM x) / 40 + (SELECT x FROM x) AS x FROM x) SELECT x, x, x, COUNT(x.x) AS x FROM x LEFT JOIN x ON (x.x >= x AND x.x < x) GROUP BY x, x, x ORDER BY x;
PRAGMA x;
SET x = 0;
CREATE TABLE x AS SELECT * FROM (VALUES ('r1', 100, 140, 12, 2), ('r2', 101, 100, 12, 8), ('r3', 103, 90, 5, 4)) AS x;
CREATE TABLE x AS SELECT * FROM (VALUES ('s1', 404, 100, 6, 4), ('s2', 498, 140, 11, 2), ('s3', 676, 80, 10, 1), ('s4', 742, 90, 5, 4)) AS x;
SELECT x.x, x.x FROM x AS x, x AS x WHERE x.x > x.x ORDER BY 1, 2;
SELECT x.x, x.x FROM x AS x, x AS x WHERE x.x > x.x AND x.x < x.x ORDER BY 1, 2;
SELECT x.x, x.x FROM x, x WHERE x.x < x.x AND x.x > x.x ORDER BY 1, 2;
WITH x AS (SELECT x, CAST(x AS TEXT) AS x, CAST(x AS TEXT) AS x FROM x) SELECT x.x, x.x FROM x AS x, x AS x WHERE x.x > x.x AND x.x < x.x ORDER BY 1, 2;
PRAGMA x;
SET x = 0;
SELECT SETSEED(0.8675309);
CREATE TABLE x AS (SELECT *, "x" + INTERVAL (CASE WHEN RANDOM() < 0.1 THEN 120 ELSE (5 + CAST(ROUND(RANDOM() * 50, 0) AS BIGINT)) END) MINUTE AS "x" FROM (SELECT x, 'Event ' || CAST(x AS TEXT) AS "x", (5 + CAST(ROUND(RANDOM() * 5000, 0) AS BIGINT)) AS x, CAST('1992-01-01' AS TIMESTAMP) + INTERVAL (CAST(ROUND(RANDOM() * 40 * 365, 0) AS BIGINT)) DAY + INTERVAL (CAST(ROUND(RANDOM() * 23, 0) AS BIGINT)) HOUR AS "x", 'Sponsor ' || (1 + CAST(ROUND(RANDOM() * 10, 0) AS BIGINT)) AS x FROM x AS x) AS x);
SELECT COUNT(*) FROM (SELECT x.x, x.x FROM x AS x, x AS x WHERE x.x <= x.x AND x.x >= x.x AND x.x <> x.x) AS x;
PRAGMA x;
SET x = 0;
CREATE TABLE x (x INT, x INT, x INT);
INSERT INTO x SELECT NULLIF(x % 3, 0), NULLIF(x % 5, 0), x FROM x AS x;
SELECT * FROM x AS x LEFT JOIN x AS x ON x.x < x.x AND x.x < x.x ORDER BY x.x NULLS FIRST, x.x NULLS FIRST, x.x, x.x, x.x, x.x;
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x SELECT * FROM x;
SELECT x.x, x.x FROM (SELECT (CASE WHEN x < 100 THEN NULL ELSE 99 END) AS x, (CASE WHEN x < 100 THEN 99 ELSE 99 END) AS x FROM x) AS x LEFT JOIN x AS x ON x.x < x.x AND x.x < x.x ORDER BY x.x NULLS FIRST, x.x NULLS FIRST;
PRAGMA x;
SET x = 0;
SELECT x.x, x.x FROM x AS x, x AS x WHERE x.x < x.x AND x.x > x.x;
SELECT x.x, x.x FROM x AS x, x AS x WHERE x.x > x.x AND x.x < x.x;
PRAGMA x;
SET x = 0;
SELECT x.x, x.x FROM (SELECT x AS x, x AS x, x + 1 AS x FROM x AS x) AS x, (SELECT x - 100000000 AS x, x AS x, x + 1 AS x FROM x AS x) AS x WHERE x.x < x.x AND x.x < x.x;
PRAGMA x;
CREATE TABLE x (x INT, x TEXT);
CREATE TABLE x (x TINYINT, PRIMARY KEY (x));
INSERT INTO x (x) VALUES (14161972);
INSERT INTO x (x, x) VALUES (-1.438515327E9, 4.43806148E8);
SELECT * FROM x INNER JOIN x ON x.x = x.x;
PRAGMA x;
CREATE TABLE x (x TINYINT);
INSERT INTO x VALUES (-128), (127);
CREATE TABLE x (x TINYINT);
INSERT INTO x VALUES (-128), (127);
SELECT x, x FROM x, x WHERE x = x;
DROP TABLE x;
DROP TABLE x;
CREATE TABLE x (x SMALLINT);
INSERT INTO x VALUES (-32768), (32767);
CREATE TABLE x (x SMALLINT);
INSERT INTO x VALUES (-32768), (32767);
SELECT x, x FROM x, x WHERE x = x;
DROP TABLE x;
DROP TABLE x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (-2147483648), (2147483647);
CREATE TABLE x (x INT);
INSERT INTO x VALUES (-2147483648), (2147483647);
SELECT x, x FROM x, x WHERE x = x;
DROP TABLE x;
DROP TABLE x;
CREATE TABLE x (x BIGINT);
INSERT INTO x VALUES (-9223372036854775808), (9223372036854775807);
CREATE TABLE x (x BIGINT);
INSERT INTO x VALUES (-9223372036854775808), (9223372036854775807);
SELECT x, x FROM x, x WHERE x = x;
DROP TABLE x;
DROP TABLE x;
CREATE TABLE x (x INT128);
INSERT INTO x VALUES (-170141183460469231731687303715884105728), (170141183460469231731687303715884105727);
CREATE TABLE x (x INT128);
INSERT INTO x VALUES (-170141183460469231731687303715884105728), (170141183460469231731687303715884105727);
SELECT x, x FROM x, x WHERE x = x;
DROP TABLE x;
DROP TABLE x;
CREATE TABLE x (x UTINYINT);
INSERT INTO x VALUES (0), (255);
CREATE TABLE x (x UTINYINT);
INSERT INTO x VALUES (0), (255);
SELECT x, x FROM x, x WHERE x = x;
DROP TABLE x;
DROP TABLE x;
CREATE TABLE x (x USMALLINT);
INSERT INTO x VALUES (0), (65535);
CREATE TABLE x (x USMALLINT);
INSERT INTO x VALUES (0), (65535);
SELECT x, x FROM x, x WHERE x = x;
DROP TABLE x;
DROP TABLE x;
CREATE TABLE x (x UINTEGER);
INSERT INTO x VALUES (0), (4294967295);
CREATE TABLE x (x UINTEGER);
INSERT INTO x VALUES (0), (4294967295);
SELECT x, x FROM x, x WHERE x = x;
DROP TABLE x;
DROP TABLE x;
CREATE TABLE x (x UBIGINT);
INSERT INTO x VALUES (0), (18446744073709551615);
CREATE TABLE x (x UBIGINT);
INSERT INTO x VALUES (0), (18446744073709551615);
SELECT x, x FROM x, x WHERE x = x;
DROP TABLE x;
PRAGMA x;
PRAGMA x;
CREATE TABLE x AS SELECT CAST(1 AS INT) AS x;
CREATE TABLE x AS SELECT CAST(x AS INT) AS x FROM x AS x, x AS x;
SELECT COUNT(*) FROM x JOIN x USING (x);
SELECT COUNT(*) FROM x JOIN x USING (x) JOIN x AS x USING (x);
SELECT COUNT(*) FROM x JOIN x USING (x) JOIN x AS x USING (x) JOIN x AS x USING (x);
SELECT * FROM x JOIN x USING (x);
PRAGMA x;
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1);
INSERT INTO x VALUES (1);
INSERT INTO x VALUES (2), (3);
INSERT INTO x VALUES (2), (3);
SELECT * FROM x JOIN x ON (x = x), x JOIN x ON (x = x) ORDER BY 1, 2, 3, 4;
SELECT * FROM x JOIN x ON (x = x), x JOIN x ON (x + x = x + x);
SELECT * FROM x JOIN x ON (x = x), LATERAL (SELECT * FROM x JOIN x ON (x + x = x + x)) AS x;
PRAGMA x;
PRAGMA x;
CREATE TABLE x (x INT, x TEXT[]);
INSERT INTO x SELECT x, CASE WHEN (x / 1000) % 2 = 0 THEN [CAST(1 AS TEXT), CAST(1 AS TEXT), CAST(1 AS TEXT)] ELSE [CAST(2 AS TEXT), CAST(2 AS TEXT)] END FROM x AS x;
SELECT * FROM x AS x LEFT JOIN x AS x ON x.x = x.x WHERE x.x <> x.x OR x.x <> x.x;
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (11, 1), (12, 2), (13, 3);
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (11, 1), (12, 1), (13, 4);
SELECT x.x, x, x FROM x, x WHERE x.x = x.x AND x.x <> x.x ORDER BY x.x;
SELECT x.x, x, x FROM x, x WHERE x.x = x.x AND x.x < x.x ORDER BY x.x;
SELECT x.x, x, x FROM x, x WHERE x.x = x.x AND x.x <= x.x ORDER BY x.x;
SELECT x.x, x, x FROM x, x WHERE x.x = x.x AND x.x > x.x ORDER BY x.x;
SELECT x.x, x, x FROM x, x WHERE x.x = x.x AND x.x >= x.x ORDER BY x.x;
DROP TABLE x;
DROP TABLE x;
CREATE TABLE x (x INT, x INT, x TEXT);
INSERT INTO x VALUES (11, 1, 'a'), (12, 2, 'b'), (13, 3, 'c');
CREATE TABLE x (x INT, x INT, x TEXT);
INSERT INTO x VALUES (11, 1, 'd'), (12, 1, 'e'), (13, 4, 'f');
SELECT * FROM x WHERE EXISTS(SELECT * FROM x WHERE x.x = x.x AND x.x <> x.x) ORDER BY 2;
SELECT * FROM x WHERE EXISTS(SELECT * FROM x WHERE x.x = x.x AND x.x <> x.x) AND NOT EXISTS(SELECT * FROM x WHERE x.x = x.x AND x.x < x.x);
SELECT * FROM x WHERE NOT EXISTS(SELECT * FROM x WHERE x.x = x.x AND x.x < x.x) ORDER BY 1;
SELECT * FROM x WHERE NOT EXISTS(SELECT * FROM x WHERE x.x = x.x AND x.x < x.x) AND NOT EXISTS(SELECT * FROM x WHERE x.x = x.x AND x.x > x.x);
SELECT * FROM x WHERE EXISTS(SELECT * FROM x WHERE x.x = x.x AND x.x <> x.x) AND x.x > 11 ORDER BY x;
DROP TABLE x;
DROP TABLE x;
CREATE TABLE x (x INT, x INT, x TEXT);
INSERT INTO x VALUES (11, 1, 'a'), (12, 2, 'b'), (13, 3, 'c');
CREATE TABLE x (x INT, x INT, x TEXT);
INSERT INTO x VALUES (11, 1, 'd'), (12, 1, 'e'), (13, 4, 'f');
SELECT * FROM x WHERE NOT EXISTS(SELECT * FROM x WHERE x.x = x.x AND x.x < x.x AND x.x > 14) AND NOT EXISTS(SELECT * FROM x WHERE x.x = x.x AND x.x > x.x AND x.x < 10) ORDER BY 1;
SELECT * FROM x WHERE NOT EXISTS(SELECT * FROM x WHERE x.x = x.x AND x.x < x.x AND x.x = 12) AND NOT EXISTS(SELECT * FROM x WHERE x.x = x.x AND x.x > x.x AND x.x = 12) ORDER BY 1;
SELECT * FROM x WHERE EXISTS(SELECT * FROM x WHERE x.x = x.x AND x.x <> x.x) AND x.x < 13;
PRAGMA x;
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (11, 1), (12, 2), (13, 3);
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 10), (1, 20), (2, 30);
SELECT x, x.x, x FROM x, x WHERE x.x = x.x ORDER BY x;
SELECT x FROM x, x WHERE x.x > x.x;
SELECT x, x.x, x FROM x, x WHERE x.x = x.x AND x.x - 1 = x.x;
SELECT x, (SELECT x.x), x FROM x, x WHERE x.x = x.x ORDER BY x;
SELECT x, x.x, x FROM x INNER JOIN x ON x.x = x.x ORDER BY x;
SELECT x, x.x, x FROM x INNER JOIN x ON x.x = x.x ORDER BY x;
SELECT x, x.x, x FROM x INNER JOIN x ON x.x = x.x AND x.x = 2;
SELECT x, x.x, x FROM x INNER JOIN x ON x.x = x.x AND 2 = 2 ORDER BY x;
SELECT x, x.x, x FROM x INNER JOIN x ON x.x = 2 ORDER BY x;
SELECT x, x.x, x FROM x INNER JOIN x ON NULL = 2;
SELECT * FROM (VALUES (1)) AS x JOIN (VALUES (1)) AS x ON (x = x);
SELECT * FROM (VALUES (1), (2)) AS x JOIN (VALUES (1), (2)) AS x ON (x = x) WHERE x + x = 2;
PRAGMA x;
PRAGMA x;
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (11, 1), (12, 2), (13, 3);
CREATE TABLE x AS SELECT * FROM x AS x, (SELECT 10) AS x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x INNER JOIN x ON x.x = x.x;
PRAGMA x;
CREATE TABLE x AS SELECT x AS x FROM x;
CREATE TABLE x AS SELECT x AS x FROM x;
INSERT INTO x SELECT * FROM x;
SELECT x.x, x.x FROM x, x WHERE x.x = x.x ORDER BY x.x, x.x;
INSERT INTO x SELECT * FROM x;
SELECT x.x, x.x FROM x, x WHERE x.x = x.x ORDER BY x.x, x.x;
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 0), (1, 1);
SELECT x.x, x.x FROM x AS x JOIN x AS x ON x.x = x.x AND (x.x IS DISTINCT FROM x.x) ORDER BY x.x;
SELECT x.x, x.x FROM x AS x JOIN x AS x ON x.x = x.x AND x.x <> x.x ORDER BY x.x;
INSERT INTO x VALUES (1, 0), (1, 1);
SELECT x.x, x.x FROM x AS x JOIN x AS x ON x.x = x.x AND (x.x IS DISTINCT FROM x.x) ORDER BY x.x;
SELECT x.x, x.x FROM x AS x JOIN x AS x ON x.x = x.x AND x.x <> x.x ORDER BY x.x;
CREATE TABLE x (x STRUCT(x INT), x STRUCT(x INT));
INSERT INTO x VALUES ({'x': 1}, {'x': 0}), ({'x': 1}, {'x': 1});
SELECT x.x, x.x FROM x AS x JOIN x AS x ON x.x = x.x AND (x.x IS DISTINCT FROM x.x) ORDER BY x.x;
SELECT x.x, x.x FROM x AS x JOIN x AS x ON x.x = x.x AND x.x <> x.x ORDER BY x.x;
INSERT INTO x VALUES ({'x': 1}, {'x': 0}), ({'x': 1}, {'x': 1});
SELECT x.x, x.x FROM x AS x JOIN x AS x ON x.x = x.x AND (x.x IS DISTINCT FROM x.x) ORDER BY x.x;
SELECT x.x, x.x FROM x AS x JOIN x AS x ON x.x = x.x AND x.x <> x.x ORDER BY x.x;
CREATE TABLE x (x INT[], x INT[]);
INSERT INTO x VALUES ([1], [0]), ([1], [1]);
SELECT x.x, x.x FROM x AS x JOIN x AS x ON x.x = x.x AND (x.x IS DISTINCT FROM x.x) ORDER BY x.x;
SELECT x.x, x.x FROM x AS x JOIN x AS x ON x.x = x.x AND x.x <> x.x ORDER BY x.x;
INSERT INTO x VALUES ([1], [0]), ([1], [1]);
SELECT x.x, x.x FROM x AS x JOIN x AS x ON x.x = x.x AND (x.x IS DISTINCT FROM x.x) ORDER BY x.x;
SELECT x.x, x.x FROM x AS x JOIN x AS x ON x.x = x.x AND x.x <> x.x ORDER BY x.x;
WITH x AS (SELECT * FROM (VALUES (1, 'x'), (1, 'x'), (1, '0'), (1, '0')) AS x) SELECT x.x AS x, x.x AS x, x.x AS x, x.x AS x FROM x AS x JOIN x AS x ON x.x = x.x AND (x.x IS DISTINCT FROM x.x) ORDER BY x, x, x, x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 0), (1, 1), (1, NULL), (NULL, 1), (0, NULL), (NULL, 0), (NULL, NULL);
SELECT x.x, x.x FROM x AS x JOIN x AS x ON x.x = x.x AND (x.x IS DISTINCT FROM x.x) ORDER BY x.x, x.x;
SELECT x.x, x.x FROM x AS x JOIN x AS x ON x.x = x.x AND x.x <> x.x ORDER BY x.x;
SELECT x.x, x.x FROM x AS x JOIN x AS x ON x.x = x.x AND (x.x IS NOT DISTINCT FROM x.x) ORDER BY x.x;
SELECT x.x, x.x FROM x AS x JOIN x AS x ON x.x = x.x AND x.x = x.x ORDER BY x.x;
CREATE TABLE x (x STRUCT(x INT), x STRUCT(x INT));
INSERT INTO x VALUES ({'x': 1}, {'x': 0}), ({'x': 1}, {'x': 1}), ({'x': 1}, NULL), ({'x': 1}, {'x': NULL});
SELECT x.x, x.x FROM x AS x JOIN x AS x ON x.x = x.x AND (x.x IS DISTINCT FROM x.x) ORDER BY x.x, x.x;
SELECT x.x, x.x FROM x AS x JOIN x AS x ON x.x = x.x AND x.x <> x.x ORDER BY x.x.x, x.x.x;
SELECT x.x, x.x FROM x AS x JOIN x AS x ON x.x = x.x AND x.x > x.x ORDER BY x.x.x, x.x.x;
SELECT x.x, x.x FROM x AS x JOIN x AS x ON x.x = x.x AND (x.x IS NOT DISTINCT FROM x.x) ORDER BY x.x;
SELECT x.x, x.x FROM x AS x JOIN x AS x ON x.x = x.x AND x.x = x.x ORDER BY x.x;
CREATE TABLE x (x INT[], x INT[]);
INSERT INTO x VALUES ([1], [0]), ([1], [1]), ([1], NULL), ([1], [NULL]);
SELECT x.x, x.x FROM x AS x JOIN x AS x ON x.x = x.x AND (x.x IS DISTINCT FROM x.x) ORDER BY x.x, x.x;
SELECT x.x, x.x FROM x AS x JOIN x AS x ON x.x = x.x AND x.x <> x.x ORDER BY x.x, x.x;
SELECT x.x, x.x FROM x AS x JOIN x AS x ON x.x = x.x AND (x.x IS NOT DISTINCT FROM x.x) ORDER BY x.x;
SELECT x.x, x.x FROM x AS x JOIN x AS x ON x.x = x.x AND x.x = x.x ORDER BY x.x;
CREATE TABLE x AS SELECT x * 2 AS x FROM x;
CREATE TABLE x AS SELECT x * 4 AS x FROM x;
INSERT INTO x (SELECT NULL FROM x);
INSERT INTO x (SELECT NULL FROM x);
SELECT COUNT(*) FROM x AS x ANTI JOIN x AS x ON (x.x IS DISTINCT FROM x.x);
CREATE OR REPLACE TABLE x AS SELECT x * 2 AS x, x * 50 AS x FROM x;
CREATE OR REPLACE TABLE x AS SELECT x * 4 AS x, x * 500 AS x FROM x;
INSERT INTO x (SELECT NULL, NULL FROM x);
INSERT INTO x (SELECT NULL, NULL FROM x);
SELECT x.x, x.x FROM x AS x LEFT JOIN x AS x ON (x.x IS DISTINCT FROM x.x) ORDER BY ALL;
SET x = 'nulls_first';
SET x = 'nulls_first';
SET x = 'nulls_first';
INSERT INTO x VALUES (11, 1), (12, 2), (13, 3);
INSERT INTO x VALUES (11, 1), (12, 2), (13, 3);
INSERT INTO x VALUES (1, 10), (2, 20), (3, 30), (1, 10), (2, 20), (3, 30), (1, 10), (2, 20), (3, 30), (1, 10), (2, 20), (3, 30), (1, 10), (2, 20), (3, 30);
SELECT x, x.x, x FROM x, x WHERE x.x = x.x ORDER BY x, x.x, x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
INSERT INTO x VALUES (-11, -1), (-12, -2), (13, 3);
INSERT INTO x VALUES (-11, -1), (-12, -2), (13, 3);
INSERT INTO x VALUES (-1, -10), (-2, -20), (3, 30), (-1, -10), (-2, -20), (3, 30), (-1, -10), (-2, -20), (3, 30), (-1, -10), (-2, -20), (3, 30), (-1, -10), (-2, -20), (3, 30);
SELECT x, x.x, x FROM x, x WHERE x.x = x.x ORDER BY x, x.x, x;
SELECT x, x.x, x FROM x, x WHERE x.x = x.x ORDER BY x, x.x, x;
INSERT INTO x VALUES (11, 1), (12, 2), (13, 3), (14, NULL), (NULL, 4);
INSERT INTO x VALUES (11, 1), (12, 2), (13, 3), (14, NULL), (NULL, 4);
INSERT INTO x VALUES (1, 10), (2, 20), (3, 30), (1, 10), (2, 20), (3, 30), (1, 10), (2, 20), (3, 30), (1, 10), (2, 20), (3, 30), (1, 10), (2, 20), (3, 30), (4, 40), (NULL, 30), (1, NULL);
SELECT x, x.x, x FROM x, x WHERE x.x = x.x ORDER BY x, x.x, x;
SELECT x, x.x, x FROM x, x WHERE x.x = x.x ORDER BY x, x.x, x;
INSERT INTO x VALUES (11, 1), (12, 2), (13, 3), (15, 5);
INSERT INTO x VALUES (11, 1), (12, 2), (13, 3), (15, 5);
INSERT INTO x VALUES (1, 10), (2, 20), (3, 30), (1, 10), (2, 20), (3, 30), (1, 10), (2, 20), (3, 30), (1, 10), (2, 20), (3, 30), (1, 10), (2, 20), (3, 30), (4, 40);
SELECT x, x.x, x FROM x, x WHERE x.x = x.x ORDER BY x, x.x, x;
CREATE TABLE x AS SELECT x AS x FROM x;
CREATE TABLE x AS SELECT x AS x FROM x;
INSERT INTO x SELECT * FROM x;
SELECT x.x, x.x FROM x, x WHERE x.x = x.x ORDER BY x.x, x.x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (50000, 2), (13, 3), (NULL, NULL), (NULL, 20000), (20000, NULL);
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 10), (2, 20), (50000, 30), (NULL, NULL), (20000, NULL), (NULL, 20000);
SELECT x, x.x, x FROM x, x WHERE x.x = x.x ORDER BY x, x.x, x;
CREATE TABLE x (x INT, x INT, x DATE, x DATE);
INSERT INTO x VALUES (100, 1, '2002-12-25', '2002-12-25'), (100, 1, '2007-03-01', '2007-03-01'), (100, 2, '2003-03-01', '2003-03-01'), (100, 2, '2005-03-01', '2005-03-01');
CREATE TABLE x (x INT, x INT, x DATE, x DATE, x INT);
INSERT INTO x VALUES (1, 1, '1963-12-31', '2010-01-01', 1), (2, 2, '1963-12-31', '2010-01-01', 2);
SELECT x, x, x, x, x.x, x.x, x.x >= x.x AS x, x.x <= x.x AS x FROM x.x AS x INNER JOIN x.x AS x ON x.x = x.x AND x.x >= x.x AND x.x <= x.x WHERE x IN (100) ORDER BY x, x;
PRAGMA x;
PRAGMA x;
BEGIN;
BEGIN;
BEGIN;
BEGIN;
BEGIN;
BEGIN;
BEGIN;
BEGIN;
BEGIN;
BEGIN;
BEGIN;
BEGIN;
PRAGMA x;
CREATE TABLE x AS SELECT x FROM x AS x;
SELECT COUNT(*) FROM x, (SELECT 2000 AS x) AS x WHERE x < x;
SELECT COUNT(*) FROM x, (SELECT 2000 AS x) AS x WHERE x <= x;
SELECT COUNT(*) FROM x, (SELECT 1 AS x) AS x WHERE x > x;
SELECT COUNT(*) FROM x, (SELECT 1 AS x) AS x WHERE x >= x;
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (11, 1), (12, 2), (13, 3);
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 10), (1, 20), (2, 30);
SELECT x.x, x.x FROM x, x WHERE x.x < x.x;
SELECT x.x, x.x FROM x, x WHERE x.x <= x.x ORDER BY 1, 2;
SELECT x.x, x.x, x.x, x.x FROM x, x WHERE x.x > x.x AND x.x <= x.x;
INSERT INTO x VALUES (11, NULL), (NULL, 1);
SELECT x.x, x.x, x.x, x.x FROM x, x WHERE x.x > x.x AND x.x <= x.x;
INSERT INTO x VALUES (1, NULL), (NULL, 10);
SELECT x.x, x.x, x.x, x.x FROM x, x WHERE x.x > x.x AND x.x <= x.x;
PRAGMA x = TRUE;
CREATE TABLE x (x INT, x TEXT);
INSERT INTO x VALUES (1, 'sssssssssssssssssueufuheuooefef');
INSERT INTO x VALUES (2, 'sssssssssssssssssueufuheuooefesffff');
INSERT INTO x VALUES (2, 'sssssssssssssssssueufuheuooefesffffsssssssieiffih');
SELECT * FROM x AS x INNER JOIN x AS x ON x.x < x.x;
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (11, 1), (12, 2), (13, 3);
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 10), (1, 20), (2, 30);
SELECT x.x, x.x FROM x, x WHERE x.x <> x.x ORDER BY x.x, x.x;
SELECT x.x, x.x FROM x, x WHERE x.x <> x.x AND x.x <> 1 AND x.x <> 2 ORDER BY x.x, x.x;
INSERT INTO x VALUES (NULL, NULL);
INSERT INTO x VALUES (NULL, NULL);
SELECT x.x, x.x FROM x, x WHERE x.x <> x.x ORDER BY x.x, x.x;
SELECT x.x, x.x FROM x, x WHERE x.x <> x.x AND x.x <> 1 AND x.x <> 2 ORDER BY x.x, x.x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES ('28579'), ('16098'), ('25281'), ('28877'), ('18048'), ('26820'), ('26971'), ('22812'), ('11757'), ('21851'), ('27752'), ('28354'), ('29843'), ('28828'), ('16668'), ('20534'), ('28222'), ('24244'), ('28877'), ('20150'), ('23451'), ('23683'), ('20419'), ('28048'), ('24244'), ('28605'), ('25752'), ('24466'), ('26557'), ('16098'), ('29454'), ('24854'), ('13298'), ('29584'), ('13394'), ('24843'), ('22477'), ('14593'), ('24244'), ('28722'), ('25124'), ('16668'), ('26787'), ('28877'), ('27752'), ('28482'), ('24408'), ('25752'), ('24136'), ('28222'), ('17683'), ('24244'), ('19275'), ('21087'), ('26594'), ('22293'), ('25281'), ('12898'), ('23451'), ('12898'), ('21757'), ('20965'), ('25709'), ('26614'), ('10399'), ('28773'), ('11933'), ('29584'), ('29003'), ('26871'), ('17746'), ('24092'), ('26192'), ('19310'), ('10965'), ('29275'), ('20191'), ('29101'), ('28059'), ('29584'), ('20399'), ('24338'), ('26192'), ('25124'), ('28605'), ('13003'), ('16668'), ('23511'), ('26534'), ('24107');
CREATE TABLE x (x INT);
INSERT INTO x VALUES ('31904'), ('31904'), ('31904'), ('31904'), ('35709'), ('31904'), ('31904'), ('35709'), ('31904'), ('31904'), ('31904'), ('31904');
SELECT COUNT(*) FROM x, x WHERE x <> x;
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2);
CREATE TABLE x AS SELECT * FROM x AS x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x INNER JOIN x ON x.x <> x.x;
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 2);
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (2, 3);
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (3, 4);
SELECT * FROM x JOIN x USING (x) JOIN x USING (x) ORDER BY 1, 2, 3, 4;
SELECT * FROM x JOIN x USING (x);
SELECT * FROM x JOIN x USING (x);
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
CREATE TABLE x (x INT, x INT, x INT);
INSERT INTO x VALUES (1, 2, 2);
CREATE TABLE x (x INT, x INT, x INT, x INT);
INSERT INTO x VALUES (2, 2, 3, 4);
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (3, 4);
SELECT * FROM x JOIN x USING (x, x) JOIN x USING (x, x);
PRAGMA x;
CREATE TABLE x (x INT, x INT, x INT);
INSERT INTO x VALUES (1, 2, 3);
CREATE TABLE x (x INT, x INT, x INT);
INSERT INTO x VALUES (1, 2, 3), (2, 2, 4), (1, 3, 4);
SELECT * FROM x JOIN x USING (x) JOIN x AS x USING (x) ORDER BY 1, 2, 3, 4, 5, 6, 7;
SELECT x.x, x.x, x.x FROM x JOIN x USING (x) ORDER BY x.x;
SELECT x.x, x.x, x.x FROM x JOIN x USING (x) ORDER BY x.x;
SELECT x.x, x.x, x.x FROM x JOIN x USING (x, x);
SELECT x.x, x.x, x.x FROM x JOIN x USING (x, x, x);
SELECT x + 1 FROM x JOIN x USING (x) ORDER BY x;
SELECT x + 1 FROM x JOIN x USING (x) ORDER BY x;
SELECT x.x, x.x, x.x FROM x JOIN x USING ("x");
SELECT x.x, x.x, x.x FROM x JOIN x USING (x);
SELECT x.x, x.x, x.x FROM x JOIN x USING (x);
SELECT * FROM x JOIN x USING (x, x);
SELECT * FROM x JOIN x USING (x) JOIN x AS x USING (x);
SELECT * FROM (VALUES (1)) AS x JOIN (x AS x JOIN (VALUES (1)) AS x ON x.x = x.x) USING (x);
SELECT * FROM x JOIN x USING (x) JOIN x AS x USING (x) ORDER BY 1, 2, 3, 4, 5, 6, 7;
PRAGMA x;
SELECT * FROM (SELECT CAST(NULL AS TEXT) AS x) AS x, (SELECT 'asdf' AS x) AS x WHERE x.x = x.x;
SELECT * FROM (SELECT 42 AS x, CAST(NULL AS TEXT) AS x) AS x, (SELECT 42 AS x, 'asdf' AS x) AS x WHERE x.x <> x.x;
SELECT * FROM (SELECT 42 AS x, CAST(NULL AS TEXT) AS x) AS x, (SELECT 42 AS x, 'asdf' AS x) AS x WHERE x.x = x.x AND x.x <> x.x;
SELECT * FROM (SELECT 42 AS x, 'asdf' AS x) AS x, (SELECT 42 AS x, CAST(NULL AS TEXT) AS x) AS x WHERE x.x <> x.x;
SELECT * FROM (SELECT 42 AS x, 'asdf' AS x) AS x, (SELECT 42 AS x, CAST(NULL AS TEXT) AS x) AS x WHERE x.x = x.x AND x.x <> x.x;
SET x = 'nulls_first';
PRAGMA x;
PRAGMA x;
DROP TABLE IF EXISTS x;
DROP TABLE IF EXISTS x;
CREATE TABLE x (x TEXT);
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES (NULL);
INSERT INTO x VALUES (1), (1);
SELECT * FROM x LEFT JOIN x ON x.x = x.x;
SELECT * FROM x LEFT JOIN x ON x.x > x.x;
SELECT * FROM x LEFT JOIN x ON x.x <> x.x;
INSERT INTO x VALUES (1);
SELECT * FROM x LEFT JOIN x ON x.x = x.x;
SELECT * FROM x LEFT JOIN x ON x.x > x.x;
SELECT * FROM x LEFT JOIN x ON x.x <> x.x;
INSERT INTO x VALUES (NULL), (NULL);
SELECT * FROM x LEFT JOIN x ON x.x = x.x;
SELECT * FROM x LEFT JOIN x ON x.x > x.x;
SELECT * FROM x LEFT JOIN x ON x.x <> x.x;
DROP TABLE IF EXISTS x;
DROP TABLE IF EXISTS x;
CREATE TABLE x (x TEXT);
CREATE TABLE x (x TEXT);
INSERT INTO x (x) VALUES (1), (1), (NULL);
INSERT INTO x (x) VALUES (1), (1), (1), (1), (1), (1);
SELECT * FROM x LEFT JOIN x ON x.x = x.x ORDER BY 1, 2;
INSERT INTO x (x) VALUES (1);
SELECT * FROM x LEFT JOIN x ON x.x = x.x ORDER BY 1, 2;
SET x = 'optimized_only';
PRAGMA x;
CREATE OR REPLACE TABLE x AS SELECT x.x AS x, CAST(RANDOM() * 1000 AS INT) AS x FROM x AS x;
CREATE OR REPLACE TABLE x AS SELECT x.x AS x FROM x AS x;
CREATE TABLE x AS SELECT * FROM (VALUES (1), (2), (3)) AS x;
CREATE TABLE x AS SELECT * FROM (VALUES (1, '1'), (2, '2'), (3, '3')) AS x;
CREATE TABLE x AS SELECT * FROM (VALUES (1, '4'), (2, '5'), (3, '6')) AS x;
SELECT x.x AS x, x.x, x.x AS x FROM x AS x LEFT OUTER JOIN (x AS x LEFT OUTER JOIN x AS x ON x.x = x.x) ON FALSE;
PRAGMA x;
CREATE TABLE x (x TIMESTAMP);
CREATE TABLE x (x TIMESTAMP);
INSERT INTO x VALUES ('2023-01-01 00:00:00');
INSERT INTO x VALUES ('2023-01-01 00:00:01');
SELECT x.x AS x, x.x AS x FROM x LEFT JOIN x ON x.x = x.x;
SELECT x.x AS x, x.x AS x FROM x LEFT JOIN x ON x.x < x.x;
SELECT x.x AS x, x.x AS x FROM x LEFT JOIN x ON x.x > x.x;
CREATE TABLE x (x TEXT);
CREATE TABLE x (x TEXT, x TIMESTAMP, x TIMESTAMP, x TEXT, x TEXT, x TEXT, x TIMESTAMP, x TIMESTAMP, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT);
INSERT INTO x VALUES (NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
CREATE TABLE x (x TEXT);
CREATE TABLE x (x TEXT, x TEXT);
PRAGMA x;
WITH x AS (SELECT 1 AS x, [{'x': 1}, {'x': 2}] AS x UNION SELECT 2 AS x, [{'x': 3}, {'x': 4}] AS x) SELECT x, x.x.x FROM x LEFT JOIN UNNEST(x) AS x ON TRUE ORDER BY 1, 2;
WITH x AS (SELECT 1 AS x, [1, 2, 3] AS x UNION SELECT 2 AS x, [4] AS x UNION SELECT 4 AS x, [] AS x) SELECT x, x.x FROM x LEFT JOIN UNNEST(x) AS x ON TRUE ORDER BY 1, 2;
WITH x AS (SELECT 1 AS x, [1, 2, 3] AS x UNION SELECT 2 AS x, [4] AS x UNION SELECT 4 AS x, CAST([] AS INT[]) AS x) SELECT x, x.x FROM x LEFT JOIN UNNEST(x) AS x ON TRUE AND x.x IS NULL ORDER BY 1, 2;
WITH x AS (SELECT 1 AS x, [1, 2, 3] AS x UNION SELECT 2 AS x, [4] AS x UNION SELECT 4 AS x, [] AS x) SELECT x, x.x FROM x LEFT JOIN UNNEST(x) AS x ON (1 = 1) AND TRUE AND LIST_CONTAINS([2, 3], 2) ORDER BY 1, 2;
WITH x AS (SELECT 1 AS x, [{'x': 1}, {'x': 2}] AS x UNION SELECT 2 AS x, [{'x': 3}, {'x': 4}] AS x) SELECT x, x.x.x FROM x LEFT JOIN UNNEST(x) AS x ON FALSE;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 2), (2, 3), (3, 4);
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 10), (2, 20);
SELECT * FROM x LEFT OUTER JOIN x ON TRUE AND x.x = x.x AND TRUE ORDER BY x;
SELECT * FROM x LEFT OUTER JOIN x ON TRUE AND x.x = x.x AND FALSE ORDER BY x;
SELECT * FROM x LEFT OUTER JOIN x ON TRUE ORDER BY x;
PRAGMA x;
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 2), (2, 3), (3, 4);
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 10), (2, 20);
SELECT * FROM x LEFT OUTER JOIN x ON x.x = x.x ORDER BY x;
SELECT * FROM x RIGHT OUTER JOIN x ON x.x = x.x ORDER BY x;
SELECT * FROM x LEFT OUTER JOIN x ON x.x = x.x WHERE NOT x IS NULL ORDER BY x;
SELECT * FROM x LEFT OUTER JOIN x ON x.x = x.x AND NOT x.x IS NULL ORDER BY x;
SELECT * FROM x LEFT OUTER JOIN x ON x = 1 ORDER BY x, x;
SELECT * FROM x LEFT OUTER JOIN x ON 1 = 1 ORDER BY x, x;
SELECT * FROM x LEFT OUTER JOIN (SELECT * FROM x WHERE 1 <> 1) AS x ON 1 = 2 ORDER BY x;
SELECT * FROM x LEFT OUTER JOIN x ON 1 = 2 ORDER BY x;
SELECT * FROM x LEFT OUTER JOIN x ON NULL <> NULL ORDER BY x;
SELECT * FROM x LEFT OUTER JOIN x ON x = 1 ORDER BY x, x;
SELECT * FROM x LEFT OUTER JOIN x ON x = 20 ORDER BY x, x;
SELECT * FROM x LEFT OUTER JOIN x ON x > 0 ORDER BY x, x;
SELECT * FROM x LEFT OUTER JOIN x ON x = 1 OR x = 20 ORDER BY x, x;
SELECT * FROM x LEFT OUTER JOIN x ON x = 4 OR x = 17 ORDER BY x;
SELECT * FROM x LEFT OUTER JOIN x ON x + x = 21 ORDER BY x;
SELECT * FROM x LEFT OUTER JOIN x ON x + x > 12 ORDER BY x, x;
SELECT * FROM x LEFT OUTER JOIN x ON x.x < x.x WHERE x.x <= 2 ORDER BY x;
SELECT * FROM x LEFT OUTER JOIN x ON x.x < x.x AND x.x < x.x WHERE x.x <= 2 ORDER BY x;
SELECT * FROM x LEFT OUTER JOIN (SELECT * FROM x WHERE x = 100) AS x ON x.x < x.x ORDER BY x;
SELECT * FROM (VALUES (1), (2)) AS x LEFT JOIN (VALUES (2), (3)) AS x ON x.x = x.x AND x.x + x.x = 4 ORDER BY 1, 2;
CREATE TABLE IF NOT EXISTS x (x TEXT);
INSERT INTO x VALUES ('DFW'), ('ATL'), ('MSY'), ('ANC'), ('LAS'), ('SEA'), ('DTW'), ('LAX'), ('JFK'), ('FLL'), ('TPA'), ('SAN'), ('SLC'), ('MSP'), ('IAH'), ('SFO'), ('MCO'), ('DEN'), ('RDU'), ('BOS'), ('BHM'), ('LGA'), ('RSW'), ('BNA'), ('SNA'), ('DCA'), ('PHX'), ('MSN'), ('PHL'), ('MIA'), ('PBI'), ('BDL'), ('TLH'), ('SJU'), ('MCI'), ('TRI'), ('STT'), ('GRB'), ('PIT'), ('ORD'), ('SAV'), ('SDF'), ('BWI'), ('PDX'), ('SJC'), ('CHS'), ('JAC'), ('ORF'), ('CLE'), ('EWR'), ('OAK'), ('VPS'), ('CLT'), ('HSV'), ('GRR'), ('CAE'), ('MTJ'), ('GEG'), ('BIL'), ('SMF'), ('PHF'), ('JAN'), ('MDW'), ('MKE'), ('ATW'), ('MOB'), ('CMH'), ('CVG'), ('STL'), ('MLB'), ('SAT'), ('HNL'), ('ELP'), ('JAX'), ('SRQ'), ('OKC'), ('ROC'), ('LIT'), ('FNT'), ('IND'), ('MEM'), ('IAD'), ('OMA'), ('AUS'), ('GSP'), ('ONT'), ('BZN'), ('GSO'), ('SHV'), ('ILM'), ('PNS'), ('DAB'), ('CID'), ('EYW'), ('BUF'), ('DAY'), ('CAK'), ('ABQ'), ('RIC'), ('DAL'), ('MDT'), ('ECP'), ('TUS'), ('PWM'), ('GPT'), ('PVD'), ('KOA'), ('AGS'), ('TYS'), ('BOI'), ('FSD'), ('OGG'), ('TUL'), ('HDN'), ('HOU'), ('MYR'), ('DSM'), ('LFT'), ('CRW'), ('MHT'), ('PSP'), ('FAY'), ('ABE'), ('CHO'), ('SYR'), ('ALB'), ('RNO'), ('COS'), ('OAJ'), ('MSO'), ('ROA'), ('FAR'), ('LIH'), ('EGE'), ('ICT'), ('XNA'), ('BTR'), ('SGF'), ('AVL'), ('BIS'), ('STX'), ('LEX'), ('MFE'), ('LBB'), ('AMA'), ('FAT'), ('CRP'), ('GUC'), ('AEX'), ('ABI'), ('TYR'), ('LAW'), ('MLU'), ('LCH'), ('SAF'), ('GRK'), ('LRD'), ('GRI'), ('MAF'), ('MGM'), ('GCK'), ('SPS'), ('SPI'), ('FSM'), ('TXK'), ('CLL'), ('ACT'), ('ROW'), ('MEI'), ('PIB'), ('BTV'), ('CWA'), ('ERI'), ('EVV'), ('BRO'), ('HRL'), ('MLI'), ('LAN'), ('HOB'), ('SCE'), ('FWA'), ('AVP'), ('LNK'), ('AZO'), ('TVC'), ('PIA'), ('RST'), ('BMI'), ('DHN'), ('GNV'), ('ISP'), ('LGB'), ('BUR'), ('PSC'), ('SWF'), ('FCA'), ('GTF'), ('IDA'), ('ISN'), ('GFK'), ('MBS'), ('LSE'), ('ASE'), ('CMX'), ('EAU'), ('SBP'), ('SBA'), ('RKS'), ('GCC'), ('MKG'), ('MRY'), ('PAH'), ('DLH'), ('DVL'), ('JMS'), ('OTH'), ('LAR'), ('HYS'), ('SGU'), ('HLN'), ('MOT'), ('RDD'), ('GJT'), ('ACV'), ('MFR'), ('RDM'), ('MMH'), ('BFL'), ('SUN'), ('EUG'), ('RAP'), ('LWS'), ('COD'), ('TWF'), ('IMT'), ('APN'), ('ESC'), ('BJI'), ('CPR'), ('BTM'), ('ITH'), ('CIU'), ('EKO'), ('MQT'), ('INL'), ('BGM'), ('PIH'), ('ABR'), ('HIB'), ('CDC'), ('RHI'), ('BRD'), ('YUM'), ('FLG'), ('IFP'), ('STS'), ('BQN'), ('ORH'), ('ITO'), ('PPG'), ('ACY'), ('LBE'), ('IAG'), ('PBG'), ('CHA'), ('DRO'), ('HPN'), ('SBN'), ('PLN'), ('TOL'), ('COU'), ('MHK'), ('PSE'), ('CSG'), ('ELM'), ('BQK'), ('ABY'), ('VLD'), ('EWN'), ('TTN'), ('PGD'), ('WYS'), ('SIT'), ('KTN'), ('BGR'), ('FAI'), ('JNU'), ('ACK'), ('MVY'), ('ADQ'), ('BET'), ('SCC'), ('BRW'), ('CDV'), ('YAK'), ('PSG'), ('WRG'), ('OME'), ('OTZ'), ('ADK'), ('GUM'), ('ALO'), ('GTR'), ('BLI'), ('SJT'), ('BPT'), ('GGG'), ('JLN'), ('UST'), ('HYA'), ('SUX'), ('GST'), ('AKN'), ('DLG'), ('TKI');
INSERT INTO x VALUES ('DFW'), ('ATL'), ('MSY'), ('ANC'), ('LAS'), ('SEA'), ('DTW'), ('LAX'), ('JFK'), ('FLL'), ('TPA'), ('SAN'), ('SLC'), ('MSP'), ('IAH'), ('SFO'), ('MCO'), ('DEN'), ('RDU'), ('BOS'), ('BHM'), ('LGA'), ('RSW'), ('BNA'), ('SNA'), ('DCA'), ('PHX'), ('MSN'), ('PHL'), ('MIA'), ('PBI'), ('BDL'), ('TLH'), ('SJU'), ('MCI'), ('TRI'), ('STT'), ('GRB'), ('PIT'), ('ORD'), ('SAV'), ('SDF'), ('BWI'), ('PDX'), ('SJC'), ('CHS'), ('JAC'), ('ORF'), ('CLE'), ('EWR'), ('OAK'), ('VPS'), ('CLT'), ('HSV'), ('GRR'), ('CAE'), ('MTJ'), ('GEG'), ('BIL'), ('SMF'), ('PHF'), ('JAN'), ('MDW'), ('MKE'), ('ATW'), ('MOB'), ('CMH'), ('CVG'), ('STL'), ('MLB'), ('SAT'), ('HNL'), ('ELP'), ('JAX'), ('SRQ'), ('OKC'), ('ROC'), ('LIT'), ('FNT'), ('IND'), ('MEM'), ('IAD'), ('OMA'), ('AUS'), ('GSP'), ('ONT'), ('BZN'), ('GSO'), ('SHV'), ('ILM'), ('PNS'), ('DAB'), ('CID'), ('EYW'), ('BUF'), ('DAY'), ('CAK'), ('ABQ'), ('RIC'), ('DAL'), ('MDT'), ('ECP'), ('TUS'), ('PWM'), ('GPT'), ('PVD'), ('KOA'), ('AGS'), ('TYS'), ('BOI'), ('FSD'), ('OGG'), ('TUL'), ('HDN'), ('HOU'), ('MYR'), ('DSM'), ('LFT'), ('CRW'), ('MHT'), ('PSP'), ('FAY'), ('ABE'), ('CHO'), ('SYR'), ('ALB'), ('RNO'), ('COS'), ('OAJ'), ('MSO'), ('ROA'), ('FAR'), ('LIH'), ('EGE'), ('ICT'), ('XNA'), ('BTR'), ('SGF'), ('AVL'), ('BIS'), ('STX'), ('LEX'), ('MFE'), ('LBB'), ('AMA'), ('FAT'), ('CRP'), ('GUC'), ('AEX'), ('ABI'), ('TYR'), ('LAW'), ('MLU'), ('LCH'), ('SAF'), ('GRK'), ('LRD'), ('GRI'), ('MAF'), ('MGM'), ('GCK'), ('SPS'), ('SPI'), ('FSM'), ('TXK'), ('CLL'), ('ACT'), ('ROW'), ('MEI'), ('PIB'), ('BTV'), ('CWA'), ('ERI'), ('EVV'), ('BRO'), ('HRL'), ('MLI'), ('LAN'), ('HOB'), ('SCE'), ('FWA'), ('AVP'), ('LNK'), ('AZO'), ('TVC'), ('PIA'), ('RST'), ('BMI'), ('DHN'), ('GNV'), ('ISP'), ('LGB'), ('BUR'), ('PSC'), ('SWF'), ('FCA'), ('GTF'), ('IDA'), ('ISN'), ('GFK'), ('MBS'), ('LSE'), ('ASE'), ('CMX'), ('EAU'), ('SBP'), ('SBA'), ('RKS'), ('GCC'), ('MKG'), ('MRY'), ('PAH'), ('DLH'), ('DVL'), ('JMS'), ('OTH'), ('LAR'), ('HYS'), ('SGU'), ('HLN'), ('MOT'), ('RDD'), ('GJT'), ('ACV'), ('MFR'), ('RDM'), ('MMH'), ('BFL'), ('SUN'), ('EUG'), ('RAP'), ('LWS'), ('COD'), ('TWF'), ('IMT'), ('APN'), ('ESC'), ('BJI'), ('CPR'), ('BTM'), ('ITH'), ('CIU'), ('EKO'), ('MQT'), ('INL'), ('BGM'), ('PIH'), ('ABR'), ('HIB'), ('CDC'), ('RHI'), ('BRD'), ('YUM'), ('FLG'), ('IFP'), ('STS'), ('BQN'), ('ORH'), ('ITO'), ('PPG'), ('ACY'), ('LBE'), ('IAG'), ('PBG'), ('CHA'), ('DRO'), ('HPN'), ('SBN'), ('PLN'), ('TOL'), ('COU'), ('MHK'), ('PSE'), ('CSG'), ('ELM'), ('BQK'), ('ABY'), ('VLD'), ('EWN'), ('TTN'), ('PGD'), ('WYS'), ('SIT'), ('KTN'), ('BGR'), ('FAI'), ('JNU'), ('ACK'), ('MVY'), ('ADQ'), ('BET'), ('SCC'), ('BRW'), ('CDV'), ('YAK'), ('PSG'), ('WRG'), ('OME'), ('OTZ'), ('ADK'), ('GUM'), ('ALO'), ('GTR'), ('BLI'), ('SJT'), ('BPT'), ('GGG'), ('JLN'), ('UST'), ('HYA'), ('SUX'), ('GST'), ('AKN'), ('DLG'), ('TKI');
SELECT * FROM x AS x WHERE NOT (x < ANY (SELECT x FROM x WHERE x.x = x.x AND x.x = x.x));
PRAGMA x;
PRAGMA x;
BEGIN;
BEGIN;
BEGIN;
BEGIN;
BEGIN;
BEGIN;
BEGIN;
BEGIN;
BEGIN;
BEGIN;
BEGIN;
BEGIN;
BEGIN;
BEGIN;
BEGIN;
BEGIN;
BEGIN;
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 2);
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 3), (2, 4);
SELECT * FROM x NATURAL JOIN x;
SELECT x.x, x.x, x.x FROM x NATURAL JOIN x;
SELECT x.x, x.x, x.x FROM x NATURAL JOIN x ORDER BY x.x;
CREATE TABLE x (x INT, x INT, x INT);
INSERT INTO x VALUES (1, 2, 3);
SELECT * FROM x NATURAL JOIN x;
SELECT * FROM x NATURAL JOIN x;
SELECT * FROM x NATURAL JOIN x NATURAL JOIN x;
SELECT * FROM (VALUES (1)) AS x NATURAL JOIN (VALUES (1), (2)) AS x ORDER BY 1, 2;
SELECT * FROM (VALUES (1)) AS x NATURAL JOIN (VALUES (1)) AS x NATURAL JOIN (VALUES (1)) AS x NATURAL JOIN (VALUES (1)) AS x NATURAL JOIN (VALUES (1)) AS x;
SELECT * FROM (SELECT 42) AS x NATURAL JOIN (SELECT 42) AS x;
SELECT (SELECT * FROM (SELECT 42) AS x NATURAL JOIN (SELECT 42) AS x);
SELECT * FROM (SELECT 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52) AS x NATURAL JOIN (SELECT 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52) AS x;
CREATE TABLE x (x DOUBLE, x DOUBLE);
INSERT INTO x VALUES (0.000000, -1570504255.000000), (0.000000, -1570504255.000000), (0.000000, -1570504255.000000), (0.000000, -1570504255.000000), (0.000000, 1.000000), (0.000000, 0.543647), (0.000000, NULL), (0.000000, 1.000000), (0.000000, 1.000000), (0.000000, 0.000000), (0.000000, 1617540830.000000), (0.000000, NULL), (0.000000, NULL), (0.000000, NULL), (0.000000, 0.497659), (0.000000, -1367407567.000000), (0.000000, NULL), (0.000000, NULL), (0.000000, NULL), (0.000000, NULL), (0.000000, NULL), (0.000000, -547966124.000000), (0.000000, NULL), (0.000000, -1417028911.000000), (0.000000, 277394703.000000), (0.000000, NULL), (0.000000, NULL), (0.000000, NULL), (0.000000, NULL), (0.000000, NULL);
CREATE VIEW x (x, x) AS SELECT x.x, ((x.x) // (-1694294358)) FROM x ORDER BY CAST('1970-01-08 16:19:01' AS TIMESTAMP) ASC;
SELECT DISTINCT x.x, x.x FROM x NATURAL FULL JOIN x ORDER BY 2 ASC;
SELECT DISTINCT x.x, x.x FROM x NATURAL FULL JOIN x WHERE x.x UNION SELECT DISTINCT x.x, x.x FROM x NATURAL FULL JOIN x WHERE (NOT x.x) UNION SELECT DISTINCT x.x, x.x FROM x NATURAL FULL JOIN x WHERE ((x.x) IS NULL) ORDER BY 2 ASC;
SELECT (SELECT * FROM (SELECT 42) AS x NATURAL JOIN (SELECT 42) AS x);
DROP TABLE x;
CREATE TABLE x (x DATE, x DATE DEFAULT ('0.5868720116119102'), x TINYINT, PRIMARY KEY (x, x, x));
CREATE TABLE x (x TIMESTAMP, x DATE DEFAULT (CAST('1970-01-11 02:37:59' AS TIMESTAMP)), PRIMARY KEY (x));
CREATE VIEW x (x) AS SELECT FALSE FROM x, x HAVING 1689380428;
SELECT COUNT(x.x) FROM x, x NATURAL RIGHT JOIN x;
SELECT COUNT(x.x) FROM x, x RIGHT JOIN x ON x.x = x.x;
SELECT COUNT(x.x) FROM x, x RIGHT JOIN x ON x.x = x.x AND x.x = x.x;
SELECT * FROM (VALUES (1)) AS x JOIN (VALUES (1)) AS x ON (x.x = x.x) NATURAL JOIN (VALUES (1)) AS x;
PRAGMA x;
SELECT * FROM (VALUES (1)) AS x NATURAL JOIN (x AS x JOIN (VALUES (1)) AS x ON (x.x = x.x));
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (11, 1), (12, 2);
CREATE TABLE x AS SELECT * FROM (VALUES (11, 1), (12, 2), (13, 3)) AS x;
CREATE TABLE x AS SELECT * FROM x AS x;
SELECT * FROM x AS x POSITIONAL JOIN x AS x;
SELECT * FROM x AS x POSITIONAL JOIN x AS x WHERE x.x <> x.x;
SELECT * FROM x AS x POSITIONAL JOIN x AS x;
SELECT * FROM x AS x POSITIONAL JOIN x AS x;
SELECT COUNT(x), COUNT(x) FROM x POSITIONAL JOIN x;
SELECT COUNT(x), COUNT(x) FROM x POSITIONAL JOIN x;
SELECT * FROM (SELECT * FROM x WHERE x % 2 = 0) AS x POSITIONAL JOIN (SELECT * FROM x WHERE x % 2 = 1) AS x;
SELECT * FROM (SELECT * FROM x WHERE x % 2 = 0) AS x POSITIONAL JOIN (SELECT * FROM x WHERE x % 2 = 1) AS x WHERE x.x + 1 <> x.x;
SELECT * FROM (SELECT * FROM x WHERE x % 2 = 1) AS x POSITIONAL JOIN (SELECT * FROM x WHERE x % 2 = 0) AS x;
SELECT * FROM (SELECT * FROM x WHERE x % 2 = 0) AS x POSITIONAL JOIN (SELECT * FROM x WHERE x % 2 = 1) AS x;
SELECT COUNT(x.x), COUNT(x.x) FROM (SELECT * FROM x WHERE x % 2 = 0) AS x POSITIONAL JOIN (SELECT * FROM x WHERE x % 3 = 0) AS x;
SELECT COUNT(x.x), COUNT(x.x) FROM (SELECT * FROM x WHERE x % 3 = 0) AS x POSITIONAL JOIN (SELECT * FROM x WHERE x % 2 = 0) AS x;
PRAGMA x;
PRAGMA x;
INSERT INTO x SELECT x, 20 FROM x AS x;
SELECT * FROM x JOIN (VALUES (2000)) AS x USING (x);
SELECT * FROM x JOIN (VALUES (2000)) AS x ON (x.x = x.x AND x.x = x.x);
PRAGMA x;
CREATE TABLE x AS SELECT CASE WHEN x % 2 = 0 THEN NULL ELSE x END AS x FROM x AS x;
SELECT * FROM x JOIN (SELECT MAX(x) AS x FROM x) ON x + 2 = x;
SELECT * FROM x JOIN (SELECT MAX(x) AS x FROM x) ON x = x - 2;
SELECT * FROM x JOIN (SELECT MAX(x) AS x FROM x) ON x = x - 2;
SELECT * FROM x JOIN (SELECT MAX(x) AS x FROM x) ON x = x - 2;
SELECT * FROM x JOIN (SELECT MAX(x) AS x FROM x) ON x = x - 2;
SELECT * FROM x JOIN (SELECT MAX(x) AS x FROM x) ON x = x - 2;
SELECT * FROM x JOIN (SELECT MAX(x) AS x FROM x) ON x = x - 2;
SELECT * FROM (SELECT x + 2 AS x, x AS x FROM x) JOIN (SELECT MAX(x) AS x FROM x) ON x = x;
SELECT * FROM (SELECT x FROM x GROUP BY x) JOIN (SELECT MAX(x) AS x FROM x) ON x = x;
SELECT * FROM (SELECT (1000 - x) AS x, SUM(x) AS x FROM x GROUP BY x) JOIN (SELECT MAX(x) AS x FROM x) ON x = x;
SELECT * FROM (SELECT DISTINCT x FROM x) JOIN (SELECT MAX(x) AS x FROM x) ON x = x;
SELECT * FROM (SELECT x + 2 AS x, x AS x, ROW_NUMBER() OVER () AS x FROM x) JOIN (SELECT MAX(x) AS x FROM x) ON x = x;
CREATE TABLE x AS SELECT CASE WHEN x % 2 = 0 THEN NULL ELSE x END AS x, [500 + x, 500 + x + 1, 500 + x + 2] AS x FROM x AS x;
SELECT * FROM (SELECT x, UNNEST(x) AS x FROM x) JOIN (SELECT MAX(x) AS x FROM x) ON x = x;
SELECT * FROM (SELECT x AS x, UNNEST(x) AS x FROM x) JOIN (SELECT MAX(x) AS x FROM x) ON x = x;
SELECT * FROM (SELECT x AS x, UNNEST(x) AS x FROM x) JOIN (SELECT MAX(x) AS x FROM x) ON x = x;
SELECT * FROM (SELECT x AS x, UNNEST(x) AS x FROM x) JOIN (SELECT MAX(x) AS x FROM x) ON x = x;
SELECT * FROM (SELECT x AS x, UNNEST(x) AS x FROM x) JOIN (SELECT MAX(x) AS x FROM x) ON x = x;
SELECT * FROM (SELECT x AS x, UNNEST(x) AS x FROM x) JOIN (SELECT MAX(x) AS x FROM x) ON x = x;
SELECT * FROM (SELECT x AS x, UNNEST(x) AS x FROM x) JOIN (SELECT MAX(x) AS x FROM x) ON x = x;
SELECT * FROM ((SELECT 999 AS x) EXCEPT SELECT * FROM x) JOIN (SELECT MAX(x) AS x FROM x) ON x = x;
SELECT x, x FROM x WHERE x = (SELECT MAX(x) FROM x) ORDER BY ALL;
SELECT x, x, x FROM x WHERE x = (SELECT MAX(x) FROM x) AND x = (SELECT MAX(x) FROM x WHERE x = 7);
SELECT COUNT(*) FROM x WHERE x = (SELECT MAX(x) FROM x) AND x = (SELECT MAX(x) FROM x);
SELECT x, x, x, x FROM x JOIN x ON (x = x) WHERE x = (SELECT MAX(x) FROM x) AND x = (SELECT MAX(x) FROM x) AND x = (SELECT MAX(x) FROM x) ORDER BY ALL;
PRAGMA x;
CREATE TABLE x AS SELECT CASE WHEN x % 2 = 0 THEN NULL ELSE x END AS x FROM x AS x;
SELECT * FROM x JOIN (SELECT MAX(x) AS x FROM x) ON x = x;
SELECT * FROM x RIGHT JOIN (SELECT MAX(x) AS x FROM x) ON x = x;
SELECT COUNT(*), NOT COUNT(x) IS NULL FROM (SELECT * FROM x LEFT JOIN (SELECT MAX(x) AS x FROM x) ON x = x);
SELECT COUNT(*), NOT COUNT(x) IS NULL FROM (SELECT * FROM x FULL OUTER JOIN (SELECT MAX(x) AS x FROM x) ON x = x);
SELECT * FROM x WHERE x = (SELECT MAX(x) FROM x);
SELECT * FROM x WHERE x IN (SELECT MAX(x) FROM x);
SELECT * FROM x WHERE x IN (997, 999);
SELECT COUNT(*), SUM(CASE WHEN x THEN 1 ELSE 0 END) FROM (SELECT x IN (SELECT MAX(x) FROM x) AS x FROM x);
PRAGMA x;
CREATE TABLE x AS SELECT CASE WHEN x % 2 = 0 THEN NULL ELSE x END AS x, CONCAT('thisisastring', x) AS x FROM x AS x;
SELECT x, x FROM x WHERE x > 10 AND x = (SELECT MAX(x) FROM x);
SELECT x, x FROM x JOIN (VALUES (999, 'thisisastring999')) AS x USING (x, x);
SELECT x, x FROM x JOIN (VALUES (999, 'thisisastring999')) AS x USING (x, x);
SELECT COUNT(*) FROM x WHERE "x" = (SELECT MIN("x") FROM x);
PRAGMA x;
CREATE TABLE x AS SELECT x % 2 AS x, x % 10 AS x, x AS x FROM x AS x ORDER BY x, x;
CREATE TABLE x AS SELECT x AS x FROM x AS x;
CREATE TABLE x AS SELECT x AS x FROM x AS x;
SELECT COUNT(*) FROM x JOIN x USING (x) JOIN x USING (x);
SELECT COUNT(*) FROM x JOIN x USING (x) JOIN x USING (x);
SELECT COUNT(*) FROM x JOIN x USING (x) JOIN x USING (x);
SELECT COUNT(*) FROM x JOIN x USING (x) JOIN x USING (x);
SELECT COUNT(*) FROM x JOIN x USING (x) JOIN x USING (x);
PRAGMA x;
PRAGMA x;
CREATE TABLE x (x DATE, PRIMARY KEY (x));
CREATE TABLE x (x TEXT DEFAULT (CAST('1969-12-10' AS DATE)), x DOUBLE DEFAULT (0.16338108651823613));
INSERT INTO x (x) VALUES (TRUE);
INSERT INTO x (x) VALUES (CAST('1969-12-13 07:02:08' AS TIMESTAMP));
INSERT INTO x (x) VALUES (CAST('1970-01-01' AS DATE)), (CAST('1969-12-13 17:49:43' AS TIMESTAMP));
SELECT MAX('a') FROM x JOIN x ON ((x.x) <= (CAST(((NULL) - (x.x)) AS DATE)));
SELECT MAX('a') FROM x RIGHT JOIN x ON ((x.x) <= (CAST(((NULL) - (x.x)) AS DATE)));
SELECT MAX(x) FROM (SELECT MAX('a') AS x FROM x RIGHT JOIN x ON ((x.x) <= (((NULL) - (x.x)))) WHERE x.x UNION ALL SELECT MAX('a') AS x FROM x RIGHT JOIN x ON ((x.x) <= (((NULL) - (x.x)))) WHERE (NOT x.x) UNION ALL SELECT MAX('a') AS x FROM x RIGHT JOIN x ON ((x.x) <= (((NULL) - (x.x)))) WHERE ((x.x) IS NULL)) AS x;
PRAGMA x;
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 2), (2, 3), (3, 4);
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 10), (2, 20);
SELECT x.*, x.* FROM x RIGHT OUTER JOIN x ON x.x = x.x ORDER BY x;
SELECT x.*, x.* FROM x RIGHT OUTER JOIN x ON x.x = x.x WHERE NOT x IS NULL ORDER BY x;
SELECT x.*, x.* FROM x RIGHT OUTER JOIN x ON x.x = x.x AND NOT x.x IS NULL ORDER BY x;
SELECT x.*, x.* FROM x RIGHT OUTER JOIN x ON x = 1 ORDER BY x, x;
SELECT x.*, x.* FROM x RIGHT OUTER JOIN x ON 1 = 1 ORDER BY x, x;
SELECT x.*, x.* FROM x RIGHT OUTER JOIN x ON 1 = 2 ORDER BY x;
SELECT x.*, x.* FROM x RIGHT OUTER JOIN x ON NULL <> NULL ORDER BY x;
SELECT x.*, x.* FROM x RIGHT OUTER JOIN x ON x = 1 ORDER BY x, x;
SELECT x.*, x.* FROM x RIGHT OUTER JOIN x ON x = 20 ORDER BY x, x;
SELECT x.*, x.* FROM x RIGHT OUTER JOIN x ON x > 0 ORDER BY x, x;
SELECT x.*, x.* FROM x RIGHT OUTER JOIN x ON x = 1 OR x = 20 ORDER BY x, x;
SELECT x.*, x.* FROM x RIGHT OUTER JOIN x ON x = 4 OR x = 17 ORDER BY x;
SELECT x.*, x.* FROM x RIGHT OUTER JOIN x ON x + x = 21 ORDER BY x;
SELECT x.*, x.* FROM x RIGHT OUTER JOIN x ON x + x > 12 ORDER BY x, x;
SELECT x.*, x.* FROM x RIGHT OUTER JOIN x ON x.x < x.x WHERE x.x <= 2 ORDER BY x;
SELECT x.*, x.* FROM x RIGHT OUTER JOIN x ON x.x < x.x AND x.x < x.x WHERE x.x <= 2 ORDER BY x;
SELECT x.*, x.* FROM (SELECT * FROM x WHERE x = 100) AS x RIGHT OUTER JOIN x ON x.x < x.x ORDER BY x;
SELECT x.*, x.* FROM (VALUES (2), (3)) AS x RIGHT JOIN (VALUES (1), (2)) AS x ON x.x = x.x AND x.x + x.x = 4 ORDER BY 1, 2;
CREATE TABLE x (x TEXT);
CREATE TABLE x (x TEXT);
CREATE TABLE x (x BIGINT);
CREATE TABLE x (x BIGINT);
INSERT INTO x VALUES ('abc'), ('def');
INSERT INTO x VALUES (1), (2);
SELECT x.* FROM x AS x ANTI JOIN x AS x ON x.x = x.x;
SELECT x.* FROM x AS x ANTI JOIN x AS x ON x.x = x.x;
INSERT INTO x VALUES (NULL);
SELECT x.* FROM x AS x ANTI JOIN x AS x ON x.x IS NOT DISTINCT FROM x.x;
INSERT INTO x VALUES (NULL);
SELECT x.* FROM x AS x ANTI JOIN x AS x ON x.x IS NOT DISTINCT FROM x.x;
PRAGMA x;
CREATE TABLE x (x INT, x INT, x INT);
INSERT INTO x VALUES (42, 1, 1), (43, 1, 1);
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (42, 1);
SELECT * FROM x ANTI JOIN x ON x.x = x.x;
SELECT * FROM x ANTI JOIN x ON x.x = x.x WHERE x > 5;
SELECT * FROM x ANTI JOIN x ON ([x.x, x.x] = [x.x, x.x]);
SELECT * FROM x ANTI JOIN (SELECT x AS x FROM x WHERE x = 1) AS x ON x.x = x.x;
SELECT * FROM x ANTI JOIN x ON x.x = x.x WHERE x.x < 43;
INSERT INTO x VALUES (43, 1, 5), (43, 1, 5), (43, 1, 5), (43, 1, 5);
SELECT * FROM x ANTI JOIN x ON (x.x = x.x);
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (42, 1), (43, 1);
SELECT * FROM x ANTI JOIN (SELECT x.x FROM x JOIN x ON (x.x = x.x)) AS x ON x.x = x.x;
DELETE FROM x WHERE x = 5;
SELECT * FROM x ANTI JOIN x USING (x);
SELECT * FROM x NATURAL ANTI JOIN x;
SELECT * FROM x NATURAL ANTI JOIN (SELECT x.x FROM x JOIN x ON (x.x = x.x)) AS x;
SELECT * FROM x ANTI JOIN x ON (x.x <> x.x) ORDER BY x, x;
SELECT * FROM x ANTI JOIN x ON (x.x > x.x);
SELECT * FROM x, x;
SELECT * FROM x ANTI JOIN x ON (x.x + x.x = 85 OR x.x + x.x = 84) ORDER BY x.x, x.x;
INSERT INTO x VALUES (1, 42), (1, 42);
INSERT INTO x VALUES (42, 1, 5), (42, 1, 5), (42, 1, 5), (2000, 20000, 200000);
SELECT * FROM x ANTI JOIN x ON (x.x + x.x = 85 OR x.x + x.x = 84) ORDER BY x.x, x.x;
SELECT x AS x, (SELECT MAX(x.x) FROM x WHERE x.x <> x) AS x FROM x ANTI JOIN x ON (x.x = x.x) ORDER BY x, x;
INSERT INTO x VALUES (1, 20);
SELECT x AS x, (SELECT MAX(x) FROM x WHERE x.x <> x) AS x FROM x ANTI JOIN x ON (x.x = x.x) ORDER BY x, x;
SET x = FALSE;
SELECT x AS x, (SELECT x FROM x WHERE x.x <> x) AS x FROM x ANTI JOIN x ON (x.x = x.x) ORDER BY x, x;
PRAGMA x;
CREATE TABLE x AS SELECT * FROM (VALUES (1, 2), (2, 4), (3, 8), (6, 25), (1, 25)) AS x;
CREATE TABLE x AS SELECT * FROM (VALUES (4), (5)) AS x;
SELECT * FROM x SEMI JOIN x ON x.x < x.x AND x.x > x.x ORDER BY ALL;
SELECT * FROM x ANTI JOIN x ON x.x < x.x AND x.x < x.x ORDER BY ALL;
SELECT * FROM x ANTI JOIN x ON x.x < x.x AND x.x < x.x ORDER BY ALL;
SELECT * FROM x SEMI JOIN x ON x.x < x.x OR x.x < x.x ORDER BY ALL;
SELECT * FROM x SEMI JOIN x ON (x.x < x.x AND x.x < x.x) OR (x.x < x.x AND x.x = 4) ORDER BY ALL;
SELECT * FROM x SEMI JOIN x ON (x.x < x.x OR x.x < x.x) AND (x.x = 1 OR x.x = 4) ORDER BY ALL;
CREATE TABLE x ("x" TEXT, "x" TEXT);
INSERT INTO x VALUES ('2023-03-15T00:00:00Z', '2023-03-20T00:00:00Z');
CREATE TABLE x AS SELECT * FROM (VALUES ('1', '2023-03-14T00:00:00Z', 2), ('2', '2023-03-15T00:00:00Z', 4), ('3', '2023-03-16T00:00:00Z', 7), ('4', '2023-03-17T00:00:00Z', 3), ('5', '2023-03-18T00:00:00Z', 2), ('6', '2023-03-19T23:59:59Z', 4), ('7', '2023-03-20T00:00:00Z', 7), ('8', '2023-03-21T00:00:00Z', 3)) AS x;
SELECT * FROM x ANTI JOIN x ON x."x" >= x.x AND x."x" < x.x;
CREATE TABLE x (x INT, x INT, x INT);
INSERT INTO x VALUES (42, 1, 1), (43, 1, 1), (42, 1, 1), (41, 1, 1), (41, 2, 2), (41, 7, 7);
CREATE TABLE x (x INT, x INT);
INSERT INTO x SELECT 41, x AS x FROM x;
INSERT INTO x VALUES (43, 1, 5), (43, 1, 5), (43, 1, 5), (43, 1, 5);
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (42, 1), (43, 1);
DELETE FROM x WHERE x = 5;
INSERT INTO x VALUES (1, 42), (1, 42);
INSERT INTO x VALUES (42, 1, 5), (42, 1, 5), (42, 1, 5), (2000, 20000, 200000);
INSERT INTO x VALUES (1, 20);
SET x = FALSE;
INSERT INTO x VALUES (1, 20);
CREATE TABLE x (x INT, x INT, x INT);
INSERT INTO x VALUES (41, 1, 1), (42, 1, 1), (42, 1, 1), (43, 1, 1), (45, 2, 2), (46, 7, 7);
CREATE TABLE x (x INT, x INT);
INSERT INTO x SELECT 41, x AS x FROM x;
INSERT INTO x VALUES (43, 1, 5), (43, 1, 5), (43, 1, 5), (43, 1, 5);
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (42, 1), (43, 1);
DELETE FROM x WHERE x = 5;
INSERT INTO x VALUES (1, 42), (1, 42);
INSERT INTO x VALUES (42, 1, 5), (42, 1, 5), (42, 1, 5), (2000, 20000, 200000);
INSERT INTO x VALUES (1, 20);
SET x = FALSE;
INSERT INTO x VALUES (1, 20);
PRAGMA x;
CREATE TABLE x (x INT, x INT, x INT);
INSERT INTO x VALUES (42, 1, 1), (43, 1, 1);
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (42, 1);
SELECT * FROM x SEMI JOIN x ON x.x = x.x;
SELECT * FROM x SEMI JOIN x ON x.x = x.x WHERE x > 5;
SELECT * FROM x SEMI JOIN x ON ([x.x, x.x] = [x.x, x.x]);
SELECT * FROM x SEMI JOIN (SELECT x AS x FROM x WHERE x = 1) AS x ON x.x = x.x;
SELECT * FROM x SEMI JOIN x ON x.x = x.x WHERE x.x < 43;
INSERT INTO x VALUES (42, 1, 5), (42, 1, 5), (42, 1, 5), (42, 1, 5);
SELECT * FROM x SEMI JOIN x ON (x.x = x.x);
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (42, 1), (43, 1);
SELECT * FROM x SEMI JOIN (SELECT x.x FROM x JOIN x ON (x.x = x.x)) AS x ON x.x = x.x;
DELETE FROM x WHERE x = 5;
SELECT * FROM x SEMI JOIN x USING (x);
SELECT * FROM x NATURAL SEMI JOIN x;
SELECT * FROM x NATURAL SEMI JOIN (SELECT x.x FROM x JOIN x ON (x.x = x.x)) AS x;
SELECT * FROM x SEMI JOIN x ON (x.x <> x.x) ORDER BY x, x;
SELECT * FROM x SEMI JOIN x ON (x.x > x.x);
SELECT * FROM x SEMI JOIN x ON (x.x + x.x = 85 OR x.x + x.x = 84) ORDER BY x.x, x.x;
INSERT INTO x VALUES (1, 42), (1, 42);
INSERT INTO x VALUES (42, 1, 5), (42, 1, 5), (42, 1, 5), (2000, 20000, 200000);
SELECT * FROM x SEMI JOIN x ON (x.x + x.x = 85 OR x.x + x.x = 84) ORDER BY x.x, x.x;
SELECT * FROM x SEMI JOIN x ON ((x.x = NULL AND x.x = NULL) OR x.x = x.x) ORDER BY x.x, x.x;
SELECT x AS x, (SELECT ANY_VALUE(x) FROM x WHERE x.x <> x) AS x FROM x SEMI JOIN x ON (x.x = x.x) ORDER BY x, x;
SET x = FALSE;
SELECT x AS x, (SELECT x FROM x WHERE x.x <> x) AS x FROM x SEMI JOIN x ON (x.x = x.x) ORDER BY x, x;
CREATE OR REPLACE TABLE x AS SELECT x FROM (VALUES ('a'), ('b'), ('c'), ('d'), ('e')) AS x;
CREATE TABLE x AS SELECT 42 AS x;
COPY x TO '__TEST_DIR__/integers.json.gz' WITH (FORMAT JSON, COMPRESSION GZIP);
DELETE FROM x;
COPY x FROM '__TEST_DIR__/integers.json.gz';
SELECT x FROM x;
SELECT * EXCLUDE (x, x, x, x, x, x, x, x) REPLACE (CAST(x AS DOUBLE) AS x, CAST(x AS DOUBLE) AS x) FROM x;
COPY (SELECT * EXCLUDE (x, x, x, x, x, x, x, x) REPLACE (CAST(x AS DOUBLE) AS x, CAST(x AS DOUBLE) AS x) FROM x) TO '__TEST_DIR__/all_types.ndjson';
CREATE TABLE x AS SELECT * EXCLUDE (x, x, x, x, x, x, x, x) REPLACE (CAST(x AS DOUBLE) AS x, CAST(x AS DOUBLE) AS x) FROM x LIMIT 0;
COPY x FROM '__TEST_DIR__/all_types.ndjson';
SELECT * FROM x;
DELETE FROM x;
COPY (SELECT * EXCLUDE (x, x, x, x, x, x, x, x) REPLACE (CAST(x AS DOUBLE) AS x, CAST(x AS DOUBLE) AS x) FROM x) TO '__TEST_DIR__/all_types.json' WITH (array TRUE);
COPY x FROM '__TEST_DIR__/all_types.json' WITH (array TRUE);
SELECT * FROM x;
COPY (SELECT * FROM (VALUES (UUID(), 10), (UUID(), 10), (UUID(), 15), (UUID(), 5)) AS x) TO '__TEST_DIR__/query.json' WITH (format json);
SELECT TYPEOF(x), x FROM x;
COPY (SELECT x.* FROM (VALUES ({'x': UUID(), 'x': 10}), ({'x': UUID(), 'x': 10}), ({'x': UUID(), 'x': 15}), ({'x': UUID(), 'x': 5}), (T(x)))) TO '__TEST_DIR__/query.json' WITH (format json);
SELECT TYPEOF(x), x FROM x;
COPY (SELECT x, * EXCLUDE (x) FROM (VALUES (UUID(), 10), (UUID(), 10), (UUID(), 15), (UUID(), 5)) AS x) TO '__TEST_DIR__/query.json' WITH (format json);
SELECT TYPEOF(x), x FROM x;
COPY (SELECT * REPLACE (x + 1 AS x) FROM (VALUES (UUID(), 10), (UUID(), 10), (UUID(), 15), (UUID(), 5)) AS x) TO '__TEST_DIR__/query.json' WITH (format json);
SELECT TYPEOF(x), x FROM x;
COPY (SELECT 42 AS x, x + 1) TO '__TEST_DIR__/out.json' WITH (format json);
SELECT * FROM x;
CREATE TABLE x (x TEXT);
COPY x FROM 'data/json/top_level_array.json';
COPY x FROM 'data/json/top_level_array.json' WITH (AUTO_DETECT FALSE);
DELETE FROM x;
COPY x FROM 'data/json/top_level_array.json' WITH (ARRAY TRUE);
SELECT * FROM x;
COPY x FROM 'data/json/top_level_array.json' WITH (ARRAY FALSE);
COPY (SELECT x AS x FROM x) TO '__TEST_DIR__/my.json' WITH (ARRAY TRUE);
SELECT * FROM x;
COPY (SELECT x AS x FROM x) TO '__TEST_DIR__/my.json' WITH (COMPRESSION);
COPY (SELECT x AS x FROM x) TO '__TEST_DIR__/my.json.gz' WITH (COMPRESSION GZIP);
CREATE TABLE x (x BIGINT);
COPY x FROM '__TEST_DIR__/my.json.gz' WITH (COMPRESSION GZIP);
COPY x FROM '__TEST_DIR__/my.json.gz' WITH (COMPRESSION GZIP);
COPY (SELECT x AS x FROM x) TO '__TEST_DIR__/my.json.zst' WITH (COMPRESSION ZSTD);
SELECT * FROM x;
SELECT * FROM x;
SET x = 4;
COPY x TO '__TEST_DIR__/lineitem.json' WITH (ARRAY);
COPY x TO '__TEST_DIR__/lineitem.json' WITH (ARRAY);
ROLLBACK;
SET x = '100mb';
COPY x FROM '__TEST_DIR__/lineitem.json' WITH (ARRAY);
SET x = '500mb';
PRAGMA TPCH(1);
COPY x TO '__TEST_DIR__/lineitem.json.gz';
SELECT * FROM x;
ROLLBACK;
ROLLBACK;
CREATE VIEW x AS SELECT * FROM x;
CREATE VIEW x AS SELECT * FROM x;
CREATE VIEW x AS SELECT * FROM x;
CREATE VIEW x AS SELECT * FROM x;
CREATE VIEW x AS SELECT * FROM x;
CREATE VIEW x AS SELECT * FROM x;
CREATE VIEW x AS SELECT * FROM x;
CREATE VIEW x AS SELECT * FROM x;
CREATE VIEW x AS SELECT * FROM x;
CREATE VIEW x AS SELECT * FROM x;
PRAGMA x;
SELECT JSON_STRUCTURE('{}');
SELECT JSON_TRANSFORM('{}', '{}');
COPY (SELECT '{"a": {}}') TO '__TEST_DIR__/my.json' WITH (FORMAT CSV, quote '', header 0);
SELECT TYPEOF(x) FROM x;
SELECT TYPEOF(x) FROM x;
COPY (SELECT UNNEST(['{"c1":"val11","c2":{"k1":"val11","k2":{}}}', '{"c1":"val21","c2":{"k1":"val21","k2":{}}}'])) TO '__TEST_DIR__/data.ndjson' WITH (FORMAT CSV, quote '', header 0);
CREATE OR REPLACE TABLE x AS SELECT * FROM x;
SELECT TYPEOF(x), TYPEOF(x) FROM x;
COPY x TO '__TEST_DIR__/data.parquet';
SELECT * FROM x;
PRAGMA x;
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('bla');
INSERT INTO x VALUES ('bla');
DROP TABLE x;
DROP TABLE x;
SELECT * FROM x;
COPY x TO '__TEST_DIR__/text.json' WITH (ARRAY);
DROP TABLE x;
CREATE TABLE x (x TEXT);
COPY x FROM '__TEST_DIR__/text.json' WITH (ARRAY);
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
CREATE TABLE x AS SELECT x + 10 AS x, x AS x FROM x;
SELECT JSON_GROUP_ARRAY(x) FROM x;
SELECT JSON_GROUP_OBJECT(x, x) FROM x;
SELECT JSON_GROUP_OBJECT(x, x) FROM x GROUP BY x % 2 ORDER BY ALL;
INSERT INTO x VALUES (0, NULL), (20, NULL), (21, NULL), (1, 10), (2, 11);
SELECT JSON_GROUP_OBJECT(x, x) FROM x GROUP BY x % 2 ORDER BY ALL;
CREATE TABLE x (x JSON);
INSERT INTO x VALUES ('{"a": 42}'), ('{"a": 42.42, "b": "duck"}');
SELECT JSON_GROUP_STRUCTURE(x) FROM x;
SELECT JSON(' { "this" : "is", "a": [ "test" ] }');
CREATE TABLE x (x JSON);
INSERT INTO x VALUES ('{"duck": 42}'), (NULL), ('{"goose": 43}');
SELECT TYPEOF(x), x FROM x;
SELECT TYPEOF(x), x FROM x;
CREATE TABLE x (x INT);
SELECT JSON_SERIALIZE_PLAN('SELECT 1 + 2 FROM tbl1');
SELECT JSON_SERIALIZE_PLAN('SELECT *, 1 + 2 FROM tbl1', x := TRUE, x := TRUE);
SELECT JSON_SERIALIZE_PLAN('SELECT *, 1 + 2 FROM tbl1', x := TRUE, x := TRUE, x := TRUE);
SELECT JSON_SERIALIZE_PLAN('SELECT AND LAUNCH ROCKETS WHERE 1 = 1');
SELECT JSON_SERIALIZE_PLAN('SELECT * FROM nonexistent_table') LIKE '%Table with name nonexistent_table does not exist%';
SELECT JSON_SERIALIZE_SQL('SELECT 1 + 2 FROM tbl1');
SELECT JSON_SERIALIZE_SQL('SELECT *, 1 + 2 FROM tbl1', x := TRUE, x := TRUE);
SELECT JSON_SERIALIZE_SQL('SELECT * FROM (SELECT 1 + 2)', x := TRUE, x := TRUE);
SELECT JSON_SERIALIZE_SQL('SELECT * FROM (SELECT 1 + 2)', x := TRUE, x := TRUE, x := TRUE, x := TRUE);
SELECT JSON_SERIALIZE_SQL('SELECT AND LAUNCH ROCKETS WHERE 1 = 1');
SELECT JSON_DESERIALIZE_SQL(JSON_SERIALIZE_SQL('SELECT 1 + 2 FROM tbl1'));
SELECT JSON_DESERIALIZE_SQL(JSON_SERIALIZE_SQL('SELECT *, 1 + 2 FROM tbl1'));
SELECT JSON_DESERIALIZE_SQL(JSON_SERIALIZE_SQL('SELECT * FROM (SELECT 1 + 2)'));
SELECT JSON_DESERIALIZE_SQL(JSON_SERIALIZE_SQL('SELECT AND LAUNCH ROCKETS WHERE 1 = 1'));
SELECT * FROM x;
CREATE TABLE x (x INT, x INT, x INT);
INSERT INTO x VALUES (1, 2, 3), (4, 5, 6), (7, 8, 9);
SELECT * FROM x;
SELECT * FROM x;
PRAGMA JSON_EXECUTE_SERIALIZED_SQL('{"error":false,"statements":[{"node":{"type":"SELECT_NODE","modifiers":[],"cte_map":{"map":[]},"select_list":[{"class":"FUNCTION","type":"FUNCTION","alias":"","function_name":"+","schema":"","children":[{"class":"FUNCTION","type":"FUNCTION","alias":"","function_name":"+","schema":"","children":[{"class":"COLUMN_REF","type":"COLUMN_REF","alias":"","column_names":["a"]},{"class":"COLUMN_REF","type":"COLUMN_REF","alias":"","column_names":["b"]}],"filter":null,"order_bys":{"type":"ORDER_MODIFIER","orders":[]},"distinct":false,"is_operator":true,"export_state":false,"catalog":""},{"class":"COLUMN_REF","type":"COLUMN_REF","alias":"","column_names":["c"]}],"filter":null,"order_bys":{"type":"ORDER_MODIFIER","orders":[]},"distinct":false,"is_operator":true,"export_state":false,"catalog":""}],"from_table":{"type":"BASE_TABLE","alias":"","sample":null,"schema_name":"","table_name":"tbl2","column_name_alias":[],"catalog_name":""},"where_clause":null,"group_expressions":[],"group_sets":[],"aggregate_handling":"STANDARD_HANDLING","having":null,"sample":null,"qualify":null}}]}');
SELECT * FROM x;
SELECT * FROM x;
SELECT JSON_DESERIALIZE_SQL('{ "statements": [ {"expression_class": "BOUND_COMPARISON"}]}');
SELECT * FROM x;
PRAGMA x;
CREATE TABLE x (x TEXT);
INSERT INTO x (x) VALUES ('true'), ('false'), ('null'), ('123'), ('-234'), ('34.5e+6'), ('""'), ('"\""'), ('"\\"'), ('"abcdefghijlmnopqrstuvwxyz"'), ('[]'), ('{}'), ('[true,false,null,123,-234,34.5e+6,{},[]]'), ('{"a":true,"b":{"c":false}}');
SELECT COUNT(*) FROM x WHERE JSON_TYPE(x) IN ('OBJECT', 'ARRAY');
SELECT x FROM x WHERE (x -> '$') <> x AND JSON_TYPE(x) IN ('OBJECT', 'ARRAY');
CREATE TABLE x (x INT PRIMARY KEY, x TEXT, x TEXT);
INSERT INTO x (x, x, x) VALUES (1, '{
"firstName": "John",
"lastName": "Smith",
"isAlive": true,
"age": 25,
"address": {
"streetAddress": "21 2nd Street",
"city": "New York",
"state": "NY",
"postalCode": "10021-3100"
},
"phoneNumbers": [
{
"type": "home",
"number": "212 555-1234"
},
{
"type": "office",
"number": "646 555-4567"
}
],
"children": [],
"spouse": null
}', 'https://en.wikipedia.org/wiki/JSON');
INSERT INTO x (x, x, x) VALUES (2, '{
"id": "0001",
"type": "donut",
"name": "Cake",
"ppu": 0.55,
"batters":
{
"batter":
[
{ "id": "1001", "type": "Regular" },
{ "id": "1002", "type": "Chocolate" },
{ "id": "1003", "type": "Blueberry" },
{ "id": "1004", "type": "Devil''s Food" }
]
},
"topping":
[
{ "id": "5001", "type": "None" },
{ "id": "5002", "type": "Glazed" },
{ "id": "5005", "type": "Sugar" },
{ "id": "5007", "type": "Powdered Sugar" },
{ "id": "5006", "type": "Chocolate with Sprinkles" },
{ "id": "5003", "type": "Chocolate" },
{ "id": "5004", "type": "Maple" }
]
}', 'https://adobe.github.io/Spry/samples/data_region/JSONDataSetSample.html');
INSERT INTO x (x, x, x) VALUES (3, '[
{
"id": "0001",
"type": "donut",
"name": "Cake",
"ppu": 0.55,
"batters":
{
"batter":
[
{ "id": "1001", "type": "Regular" },
{ "id": "1002", "type": "Chocolate" },
{ "id": "1003", "type": "Blueberry" },
{ "id": "1004", "type": "Devil''s Food" }
]
},
"topping":
[
{ "id": "5001", "type": "None" },
{ "id": "5002", "type": "Glazed" },
{ "id": "5005", "type": "Sugar" },
{ "id": "5007", "type": "Powdered Sugar" },
{ "id": "5006", "type": "Chocolate with Sprinkles" },
{ "id": "5003", "type": "Chocolate" },
{ "id": "5004", "type": "Maple" }
]
},
{
"id": "0002",
"type": "donut",
"name": "Raised",
"ppu": 0.55,
"batters":
{
"batter":
[
{ "id": "1001", "type": "Regular" }
]
},
"topping":
[
{ "id": "5001", "type": "None" },
{ "id": "5002", "type": "Glazed" },
{ "id": "5005", "type": "Sugar" },
{ "id": "5003", "type": "Chocolate" },
{ "id": "5004", "type": "Maple" }
]
},
{
"id": "0003",
"type": "donut",
"name": "Old Fashioned",
"ppu": 0.55,
"batters":
{
"batter":
[
{ "id": "1001", "type": "Regular" },
{ "id": "1002", "type": "Chocolate" }
]
},
"topping":
[
{ "id": "5001", "type": "None" },
{ "id": "5002", "type": "Glazed" },
{ "id": "5003", "type": "Chocolate" },
{ "id": "5004", "type": "Maple" }
]
}
]', 'https://adobe.github.io/Spry/samples/data_region/JSONDataSetSample.html');
SELECT COUNT(*) FROM x;
SELECT x, JSON_VALID(x), JSON_TYPE(x) FROM x ORDER BY x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
CREATE VIEW x AS SELECT CAST(JSON['c_custkey'] AS INT) AS x, CAST(JSON['c_name'] AS TEXT) AS x, CAST(JSON['c_address'] AS TEXT) AS x, CAST(JSON['c_nationkey'] AS INT) AS x, CAST(JSON['c_phone'] AS TEXT) AS x, CAST(JSON['c_acctbal'] AS DECIMAL(15, 2)) AS x, CAST(JSON['c_mktsegment'] AS TEXT) AS x, CAST(JSON['c_comment'] AS TEXT) AS x FROM x;
CREATE VIEW x AS SELECT CAST(JSON['l_orderkey'] AS INT) AS x, CAST(JSON['l_partkey'] AS INT) AS x, CAST(JSON['l_suppkey'] AS INT) AS x, CAST(JSON['l_linenumber'] AS INT) AS x, CAST(JSON['l_quantity'] AS DECIMAL(15, 2)) AS x, CAST(JSON['l_extendedprice'] AS DECIMAL(15, 2)) AS x, CAST(JSON['l_discount'] AS DECIMAL(15, 2)) AS x, CAST(JSON['l_tax'] AS DECIMAL(15, 2)) AS x, CAST(JSON['l_returnflag'] AS TEXT) AS x, CAST(JSON['l_linestatus'] AS TEXT) AS x, CAST(JSON['l_shipdate'] AS DATE) AS x, CAST(JSON['l_commitdate'] AS DATE) AS x, CAST(JSON['l_receiptdate'] AS DATE) AS x, CAST(JSON['l_shipinstruct'] AS TEXT) AS x, CAST(JSON['l_shipmode'] AS TEXT) AS x, CAST(JSON['l_comment'] AS TEXT) AS x FROM x;
CREATE VIEW x AS SELECT CAST(JSON['n_nationkey'] AS INT) AS x, CAST(JSON['n_name'] AS TEXT) AS x, CAST(JSON['n_regionkey'] AS INT) AS x, CAST(JSON['n_comment'] AS TEXT) AS x FROM x;
CREATE VIEW x AS SELECT CAST(JSON['o_orderkey'] AS INT) AS x, CAST(JSON['o_custkey'] AS INT) AS x, CAST(JSON['o_orderstatus'] AS TEXT) AS x, CAST(JSON['o_totalprice'] AS DECIMAL(15, 2)) AS x, CAST(JSON['o_orderdate'] AS DATE) AS x, CAST(JSON['o_orderpriority'] AS TEXT) AS x, CAST(JSON['o_clerk'] AS TEXT) AS x, CAST(JSON['o_shippriority'] AS INT) AS x, CAST(JSON['o_comment'] AS TEXT) AS x FROM x;
CREATE VIEW x AS SELECT CAST(JSON['p_partkey'] AS INT) AS x, CAST(JSON['p_name'] AS TEXT) AS x, CAST(JSON['p_mfgr'] AS TEXT) AS x, CAST(JSON['p_brand'] AS TEXT) AS x, CAST(JSON['p_type'] AS TEXT) AS x, CAST(JSON['p_size'] AS INT) AS x, CAST(JSON['p_container'] AS TEXT) AS x, CAST(JSON['p_retailprice'] AS DECIMAL(15, 2)) AS x, CAST(JSON['p_comment'] AS TEXT) AS x FROM x;
CREATE VIEW x AS SELECT CAST(JSON['ps_partkey'] AS INT) AS x, CAST(JSON['ps_suppkey'] AS INT) AS x, CAST(JSON['ps_availqty'] AS INT) AS x, CAST(JSON['ps_supplycost'] AS DECIMAL(15, 2)) AS x, CAST(JSON['ps_comment'] AS TEXT) AS x FROM x;
CREATE VIEW x AS SELECT CAST(JSON['r_regionkey'] AS INT) AS x, CAST(JSON['r_name'] AS TEXT) AS x, CAST(JSON['r_comment'] AS TEXT) AS x FROM x;
SELECT * FROM x ORDER BY ALL;
CREATE TABLE x AS SELECT JSON_QUOTE({'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x}) AS x FROM x;
SELECT JSON_STRUCTURE(x) FROM x LIMIT 1;
WITH x AS (SELECT JSON_TRANSFORM(x, '{"l_orderkey":"INTEGER","l_partkey":"INTEGER","l_suppkey":"INTEGER","l_linenumber":"INTEGER","l_quantity":"DECIMAL(15,2)","l_extendedprice":"DECIMAL(15,2)","l_discount":"DECIMAL(15,2)","l_tax":"DECIMAL(15,2)","l_returnflag":"VARCHAR","l_linestatus":"VARCHAR","l_shipdate":"DATE","l_commitdate":"DATE","l_receiptdate":"DATE","l_shipinstruct":"VARCHAR","l_shipmode":"VARCHAR","l_comment":"VARCHAR"}') AS x FROM x) SELECT x.x, x.x, x.x, x.x, x.x, x.x, x.x, x.x, x.x, x.x, x.x, x.x, x.x, x.x, x.x, x.x FROM x ORDER BY ALL;
WITH x AS (SELECT JSON_TRANSFORM(x, '{"l_orderkey":"INTEGER","l_partkey":"INTEGER","l_suppkey":"INTEGER","l_linenumber":"INTEGER","l_quantity":"DECIMAL(15,2)","l_extendedprice":"DECIMAL(15,2)","l_discount":"DECIMAL(15,2)","l_tax":"DECIMAL(15,2)","l_returnflag":"VARCHAR","l_linestatus":"VARCHAR","l_shipdate":"DATE","l_commitdate":"DATE","l_receiptdate":"DATE","l_shipinstruct":"VARCHAR","l_shipmode":"VARCHAR","l_comment":"VARCHAR"}') AS x FROM x) SELECT x.x, x.x, SUM(x.x) AS x, SUM(x.x) AS x, SUM(x.x * (1 - x.x)) AS x, SUM(x.x * (1 - x.x) * (1 + x.x)) AS x, AVG(x.x) AS x, AVG(x.x) AS x, AVG(x.x) AS x, COUNT(*) AS x FROM x WHERE x.x <= CAST('1998-09-02' AS DATE) GROUP BY x.x, x.x ORDER BY x.x, x.x;
SELECT * FROM x ORDER BY ALL;
CREATE TABLE x AS SELECT JSON_QUOTE({'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x}) AS x FROM x;
SELECT JSON_STRUCTURE(x) FROM x LIMIT 1;
WITH x AS (SELECT JSON_TRANSFORM(x, '{"l_orderkey":"INTEGER","l_partkey":"INTEGER","l_suppkey":"INTEGER","l_linenumber":"INTEGER","l_quantity":"DECIMAL(15,2)","l_extendedprice":"DECIMAL(15,2)","l_discount":"DECIMAL(15,2)","l_tax":"DECIMAL(15,2)","l_returnflag":"VARCHAR","l_linestatus":"VARCHAR","l_shipdate":"DATE","l_commitdate":"DATE","l_receiptdate":"DATE","l_shipinstruct":"VARCHAR","l_shipmode":"VARCHAR","l_comment":"VARCHAR"}') AS x FROM x) SELECT x.x, x.x, x.x, x.x, x.x, x.x, x.x, x.x, x.x, x.x, x.x, x.x, x.x, x.x, x.x, x.x FROM x ORDER BY ALL;
WITH x AS (SELECT JSON_TRANSFORM(x, '{"l_orderkey":"INTEGER","l_partkey":"INTEGER","l_suppkey":"INTEGER","l_linenumber":"INTEGER","l_quantity":"DECIMAL(15,2)","l_extendedprice":"DECIMAL(15,2)","l_discount":"DECIMAL(15,2)","l_tax":"DECIMAL(15,2)","l_returnflag":"VARCHAR","l_linestatus":"VARCHAR","l_shipdate":"DATE","l_commitdate":"DATE","l_receiptdate":"DATE","l_shipinstruct":"VARCHAR","l_shipmode":"VARCHAR","l_comment":"VARCHAR"}') AS x FROM x) SELECT x.x, x.x, SUM(x.x) AS x, SUM(x.x) AS x, SUM(x.x * (1 - x.x)) AS x, SUM(x.x * (1 - x.x) * (1 + x.x)) AS x, AVG(x.x) AS x, AVG(x.x) AS x, AVG(x.x) AS x, COUNT(*) AS x FROM x WHERE x.x <= CAST('1998-09-02' AS DATE) GROUP BY x.x, x.x ORDER BY x.x, x.x;
COPY x TO '__TEST_DIR__/lineitem.json';
ROLLBACK;
CREATE VIEW x AS SELECT FROM_JSON(x, '{
"l_orderkey":"INTEGER",
"l_partkey":"INTEGER",
"l_suppkey":"INTEGER",
"l_linenumber":"INTEGER",
"l_quantity":"INTEGER",
"l_extendedprice":"DECIMAL(15,2)",
"l_discount":"DECIMAL(15,2)",
"l_tax":"DECIMAL(15,2)",
"l_returnflag":"VARCHAR",
"l_linestatus":"VARCHAR",
"l_shipdate":"DATE",
"l_commitdate":"DATE",
"l_receiptdate":"DATE",
"l_shipinstruct":"VARCHAR",
"l_shipmode":"VARCHAR",
"l_comment":"VARCHAR"
}') AS x FROM x;
CREATE VIEW x AS SELECT x['l_orderkey'] AS x, x['l_partkey'] AS x, x['l_suppkey'] AS x, x['l_linenumber'] AS x, x['l_quantity'] AS x, x['l_extendedprice'] AS x, x['l_discount'] AS x, x['l_tax'] AS x, x['l_returnflag'] AS x, x['l_linestatus'] AS x, x['l_shipdate'] AS x, x['l_commitdate'] AS x, x['l_receiptdate'] AS x, x['l_shipinstruct'] AS x, x['l_shipmode'] AS x, x['l_comment'] AS x FROM x;
PRAGMA TPCH(1);
PRAGMA x;
COPY (SELECT '{}') TO '__TEST_DIR__/empty_object.json' WITH (FORMAT CSV, HEADER FALSE);
SELECT TYPEOF(x) FROM x;
SELECT TYPEOF(x) FROM x;
SELECT * FROM x;
PRAGMA x;
CREATE TABLE x AS SELECT CAST({'x': x} AS JSON) AS x FROM x;
SELECT MIN(x), MAX(x) FROM x;
PRAGMA x;
CREATE TABLE x (x UBIGINT, x UBIGINT, x TEXT, x BOOLEAN);
INSERT INTO x VALUES (42, 42, 'duck', TRUE);
COPY x TO '__TEST_DIR__/todos.json' WITH (ARRAY);
PRAGMA x;
SELECT * FROM x;
CREATE OR REPLACE TABLE x AS SELECT * FROM x;
CREATE TABLE x AS SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
COPY (SELECT '{"col": 277447099861456945273576150847928801582}') TO '__TEST_DIR__/10866.json' WITH (format csv, quote '', header 0);
SELECT x, HEX(x) FROM x;
SELECT JSON_TYPE(JSON('null')) = 'NULL';
SELECT JSON_TYPE(JSON('{"a": null}'), '/a') = 'NULL';
SELECT JSON_TYPE(JSON('{"a": null}'), '$.a') = 'NULL';
SELECT JSON_TYPE(JSON('{"a":1,"b":null}'), x), JSON_TYPE(JSON('{"a":1,"b":null}'), 'b') FROM (VALUES ('b')) AS x;
SELECT UNNEST(JSON_TYPE(JSON('{"a": null}'), ['$.a', '$.a'])) = 'NULL';
SELECT TYPEOF(x), TYPEOF(x) FROM x LIMIT 1;
COPY (SELECT * FROM x) TO '__TEST_DIR__/my.parquet';
SELECT TYPEOF(x), TYPEOF(x) FROM x LIMIT 1;
CREATE TABLE x (x STRUCT(x BIGINT, x TEXT));
INSERT INTO x VALUES ({'x': 1, 'x': 2}), (NULL);
COPY x TO '__TEST_DIR__/fewnulls.json';
INSERT INTO x SELECT NULL FROM x;
COPY x TO '__TEST_DIR__/manynulls.json';
SELECT TYPEOF(x) FROM x LIMIT 1;
SELECT TYPEOF(x) FROM x LIMIT 1;
COPY (SELECT CAST(x AS BIGINT) AS x, CAST(x AS TEXT) AS x FROM x) TO '__TEST_DIR__/t1.json.gz' WITH (format json, compression gzip);
COPY (SELECT x, x FROM (VALUES (1, 'bob'), (2, 'tom')) AS x) TO '__TEST_DIR__/t2.json.gz' WITH (format json, compression gzip);
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x WHERE x = 7;
SELECT COUNT(*) FROM x WHERE x = 7;
SELECT * FROM x WHERE x = 7;
SELECT COUNT(*) FROM x WHERE x = 7;
PRAGMA x;
SELECT '{"Status / SubStatus": "test"}' -> '$."Status / SubStatus"';
WITH x AS (SELECT 'Status / SubStatus' AS x) SELECT '{"Status / SubStatus": "test"}' -> x FROM x;
SELECT '{"\"Status / SubStatus\"": "test"}' -> '$."Status / SubStatus"';
WITH x AS (SELECT NULL AS x) SELECT '{"\"Status / SubStatus\"": "test"}' -> x FROM x;
SELECT '{"Status / SubStatus": "test"}' -> '$."Status / SubStatus"';
WITH x AS (SELECT '$."Status / SubStatus"' AS x) SELECT '{"Status / SubStatus": "test"}' -> x FROM x;
SELECT '[1, 2, 3]' -> '$[0]';
WITH x AS (SELECT 0 AS x) SELECT '[1, 2, 3]' -> x FROM x;
SELECT '[1, 2, 3]' -> '0';
WITH x AS (SELECT '0' AS x) SELECT '[1, 2, 3]' -> x FROM x;
SELECT x.x FROM x;
SELECT '{ "foo": ["bar", "baz"], "": 0 }' -> '/';
SELECT TO_JSON(CAST(1 AS INT128) << 100);
SELECT CAST((CAST(1 AS INT128) << 100) AS JSON);
SELECT TO_JSON(CAST(1 AS UINT128) << 100);
SELECT CAST((CAST(1 AS UINT128) << 100) AS JSON);
SELECT TO_JSON(CAST((CAST(1 AS UINT128) << 100) AS DECIMAL(38, 0)));
SELECT CAST(CAST((CAST(1 AS UINT128) << 100) AS DECIMAL(38, 0)) AS JSON);
SELECT TO_JSON(CAST((CAST(1 AS INT128) << 100) AS VARINT));
SELECT CAST(CAST((CAST(1 AS INT128) << 100) AS VARINT) AS JSON);
WITH x AS (SELECT 9007199254740993 AS x UNION ALL SELECT 1.2 AS x) SELECT TO_JSON(x) AS x FROM x AS x;
WITH x AS (SELECT 9007199254740993 AS x UNION ALL SELECT 1.2 AS x) SELECT CAST(x AS JSON) AS x FROM x AS x;
PRAGMA x;
SELECT * FROM x;
PRAGMA x;
SELECT COUNT(*) FROM x;
PRAGMA x;
WITH x AS (SELECT CAST('{"a":1}' AS JSON) AS x) SELECT TYPEOF(x[2 : 3]), TYPEOF(SUBSTRING(x, 2, 3)) FROM x;
PRAGMA x;
COPY (SELECT '00000000000000000000000000000000' AS x) TO '__TEST_DIR__/issue16684.json';
SELECT x, TYPEOF(x) FROM x;
COPY (SELECT '00000000-0000-0000-0000-000000000000' AS x) TO '__TEST_DIR__/issue16684.json';
SELECT x, TYPEOF(x) FROM x;
PRAGMA x;
SELECT CAST(FROM_HEX('aa') AS JSON);
SELECT JSON(FROM_HEX('aa'));
SELECT CAST(CAST('1101' AS BIT) AS JSON);
SELECT JSON(CAST('1101' AS BIT));
PRAGMA x;
SELECT * FROM x;
DESCRIBE SELECT * FROM x;
SELECT CAST(MAX(JSON_ARRAY_LENGTH(x)) AS INT) - 1 FROM x;
WITH RECURSIVE x AS (SELECT 0 AS x UNION ALL SELECT x + 1 FROM x WHERE x < 5) SELECT * FROM x;
CREATE TABLE x (x INT, x TEXT, x TEXT);
INSERT INTO x (x, x, x) VALUES (3, '[
{
"id": "0001",
"type": "donut",
"name": "Cake",
"ppu": 0.55,
"batters":
{
"batter":
[
{ "id": "1001", "type": "Regular" },
{ "id": "1002", "type": "Chocolate" },
{ "id": "1003", "type": "Blueberry" },
{ "id": "1004", "type": "Devil''s Food" }
]
},
"topping":
[
{ "id": "5001", "type": "None" },
{ "id": "5002", "type": "Glazed" },
{ "id": "5005", "type": "Sugar" },
{ "id": "5007", "type": "Powdered Sugar" },
{ "id": "5006", "type": "Chocolate with Sprinkles" },
{ "id": "5003", "type": "Chocolate" },
{ "id": "5004", "type": "Maple" }
]
},
{
"id": "0002",
"type": "donut",
"name": "Raised",
"ppu": 0.55,
"batters":
{
"batter":
[
{ "id": "1001", "type": "Regular" }
]
},
"topping":
[
{ "id": "5001", "type": "None" },
{ "id": "5002", "type": "Glazed" },
{ "id": "5005", "type": "Sugar" },
{ "id": "5003", "type": "Chocolate" },
{ "id": "5004", "type": "Maple" }
]
},
{
"id": "0003",
"type": "donut",
"name": "Old Fashioned",
"ppu": 0.55,
"batters":
{
"batter":
[
{ "id": "1001", "type": "Regular" },
{ "id": "1002", "type": "Chocolate" }
]
},
"topping":
[
{ "id": "5001", "type": "None" },
{ "id": "5002", "type": "Glazed" },
{ "id": "5003", "type": "Chocolate" },
{ "id": "5004", "type": "Maple" }
]
}
]', 'https://adobe.github.io/Spry/samples/data_region/JSONDataSetSample.html');
SELECT LENGTH(x) FROM x;
SET x = 8;
SET x = '200MiB';
SELECT * FROM x;
SET x = '50MiB';
SELECT * FROM x;
CREATE TEMPORARY TABLE x (x JSON);
INSERT INTO x (x) VALUES ('[1, 2, 3]');
PRAGMA x;
CREATE TABLE x (x JSON[]);
INSERT INTO x VALUES (JSON('[1,2]'));
SELECT * FROM x;
SELECT CAST(JSON('[1,2]') AS JSON[]);
SELECT CAST(['boom'] AS JSON[]);
SELECT CAST(['[1, 2]', '[3, 4]'] AS JSON[]);
SELECT CAST(['[1, 2]', '[3, 4]'] AS JSON[]);
SELECT CAST(['[1, 2]', '[3, 4]'] AS JSON[]);
SELECT CAST(['[1, 2]', '[3, 4]'] AS JSON[]);
SELECT CAST(['[1, 2]', '[3, 4]'] AS JSON[]);
SELECT CAST(['[1, 2]', '[3, 4]'] AS JSON[]);
SELECT CAST(MAP(['42'], ['88']) AS MAP(JSON, JSON));
SELECT CAST('{42=88}' AS MAP(JSON, JSON));
SELECT CAST('42' AS UNION(x JSON));
SELECT CAST(CAST('42' AS UNION(x TEXT)) AS UNION(x JSON));
SELECT CAST(['42'] AS UNION(x JSON)[]);
SELECT CAST(CAST('42' AS UNION(x TEXT)) AS JSON);
SELECT TRY_CAST('{"duck":42' AS JSON);
SELECT CAST({'x': 42} AS JSON);
SELECT CAST(CAST('{"duck":42}' AS JSON) AS STRUCT(x INT));
SELECT CAST(['duck'] AS JSON);
SELECT CAST(CAST('["duck"]' AS JSON) AS TEXT[]);
SELECT CAST(MAP(['duck'], [42]) AS JSON);
SELECT CAST(CAST('{"duck":42}' AS JSON) AS MAP(TEXT, INT));
SELECT CAST(CAST('{"duck":42}' AS JSON) AS STRUCT(x INT));
SELECT CAST(CAST('["a", "b", "c"]' AS JSON) AS INT[]);
SELECT CAST(CAST('{"duck":42}' AS JSON) AS MAP(INT, INT));
SELECT TRY_CAST(CAST('{"duck":42}' AS JSON) AS STRUCT(x INT));
SELECT TRY_CAST(CAST('["a", "b", "c"]' AS JSON) AS INT[]);
SELECT TRY_CAST(CAST('{"duck":42}' AS JSON) AS MAP(INT, INT));
SELECT TRY_CAST(CAST('{"42":"duck"}' AS JSON) AS MAP(INT, INT));
CREATE TABLE x (x STRUCT(x INT));
CREATE TABLE x (x TEXT[]);
CREATE TABLE x (x MAP(TEXT, INT));
INSERT INTO x VALUES (CAST('{"duck":42}' AS JSON));
INSERT INTO x VALUES (CAST('["duck"]' AS JSON));
INSERT INTO x VALUES (CAST('{"duck":42}' AS JSON));
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
CREATE TABLE x (x JSON);
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT CAST('' AS JSON);
SELECT CAST('          ' AS JSON);
SELECT CAST(CHR(0) AS JSON);
SELECT CAST(('duck' || CHR(0)) AS JSON);
PRAGMA x;
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('{}'), ('[]'), ('[1, 2, 3]');
SELECT JSON_ARRAY_LENGTH(x) FROM x;
SELECT JSON_ARRAY_LENGTH(x, '$[1]') FROM x;
SELECT JSON_ARRAY_LENGTH('[1,2,3,4]');
SELECT JSON_ARRAY_LENGTH('[1,2,3,4]', '$');
SELECT JSON_ARRAY_LENGTH('[1,2,3,4]', '$[2]');
SELECT JSON_ARRAY_LENGTH('{"one":[1,2,3]}');
SELECT JSON_ARRAY_LENGTH('{"one":[1,2,3]}', '$.one');
SELECT JSON_ARRAY_LENGTH('{"one":[1,2,3]}', '$.two');
CREATE TABLE x AS SELECT JSON('{ "key" : "value" }') AS x;
SELECT (SELECT (x) -> x AS x FROM (SELECT 'key' AS x) AS x) FROM x;
SELECT (SELECT x -> x AS x FROM (SELECT 'key' AS x) AS x) FROM x;
SELECT (SELECT (JSON('{ "key" : "value" }')) -> x AS x FROM (SELECT 'key' AS x) AS x);
PRAGMA x;
SELECT JSON_CONTAINS('{"a": 1, "b": 2, "c": {"d": 3}}', '{"c": {"d": 3}}') AS x;
SELECT JSON_CONTAINS('{"a": 1, "b": 2, "c": {"d": 3}}', '"c": {"d": 3}') AS x;
SELECT JSON_CONTAINS('[1, 2]', '[]');
SELECT JSON_CONTAINS('[1, 2]', '2');
SELECT JSON_CONTAINS('[1, 2]', '[1, 2]');
SELECT JSON_CONTAINS('[1, 2, 3]', '[1, 2]');
SELECT JSON_CONTAINS('[1, 2]', '[2, 1]');
SELECT JSON_CONTAINS('{"a": {"b": [{"c": 1, "d": 2}]}}', '{"d": 2}');
SELECT JSON_CONTAINS('{"a": {"b": [{"c": 1, "d": 2}]}}', '{"c": 1}');
SELECT JSON_CONTAINS('{"a": {"b": [{"c": 1, "d": 2}]}}', '{"c": 1, "d": 2}');
SELECT JSON_CONTAINS('{"a": {"b": [{"c": 1, "d": 2}]}}', '[{"d": 2, "c": 1}]');
SELECT JSON_CONTAINS('{"a": {"b": [{"c": 1, "d": 2}]}}', '{"a": {"b": []}}');
SELECT JSON_CONTAINS('{"a": {"b": [{"c": 1, "d": 2}]}}', '[]');
SELECT JSON_CONTAINS(JSON('{"key":"value"}'), JSON('{"blah":"value"}'));
SELECT JSON_CONTAINS('{"a": {"b": 42}}', '{"a": 42}');
PRAGMA x;
SELECT TRY_CAST('{{P{P{{{{ASD{AS{D{' AS JSON);
SELECT JSON_QUOTE({'x': 42});
SELECT TO_JSON({'x': 42});
SELECT TO_JSON({'x': 42}, {'x': 'argument'});
SELECT TO_JSON(UNION_VALUE(x := 42));
SELECT TO_JSON(CAST(UNION_VALUE(x := NULL) AS UNION(x INT, x TEXT)));
SELECT TO_JSON(CAST(UNION_VALUE(x := 'abc') AS UNION(x INT, x TEXT, x REAL)));
SELECT TO_JSON(CAST(x AS UNION(x TEXT, x BOOLEAN))) FROM (VALUES (NULL), ('test')) AS x;
SELECT TO_JSON(CAST(NULL AS UNION(x TEXT, x BOOLEAN)));
SELECT JSON_OBJECT('duck', 42);
SELECT JSON_OBJECT('duck', CAST('{"goose": [1, 2, 3, 4, 5, 6, 7]}' AS JSON));
SELECT JSON_OBJECT('nested', {'x': 42});
SELECT JSON_OBJECT('nested', [{'x': 42}, NULL]);
SELECT JSON_OBJECT('nested', MAP(['duck'], [42]));
SELECT JSON_OBJECT('nested', MAP(['duck', 'goose'], [42, 7]));
SELECT JSON_OBJECT('nested', MAP(['0', 'goose'], [42, 7]));
SELECT JSON_OBJECT('nested', MAP(['duck', 'goose'], [NULL, 7]));
SELECT JSON_OBJECT('nested', [1, 2, 3]);
SELECT JSON_OBJECT('nested', {'x': [1, 2, 3]});
SELECT JSON_OBJECT('nested', [{'x': 1}, {'x': 2}, {'x': 3}]);
CREATE TABLE x (x INT, x DOUBLE, x TEXT, x INT[], x UINTEGER);
INSERT INTO x VALUES (0, 0.5, 'short', [0, 1, 2, 3, 4, 5, 6, 7, 9], 33), (42, 1, 'looooooooooooooong', [], 42), (-42, 0.42, 2, [1, 2, 3], 1111), (777, 19.96, 'duck', NULL, 1), (-777, 4.2, 'goose', [4, 2], NULL);
SELECT JSON_QUOTE({'x': x, 'x': x, 'x': x, 'x': x, 'x': x}) FROM x;
SELECT JSON_ARRAY(x, x, x, x, x) FROM x;
SELECT JSON_OBJECT(x, x, x, x, x, x, x, x, x, x) FROM x;
SELECT JSON_QUOTE(MAP(LIST(x), LIST(x))) FROM x;
SELECT JSON_QUOTE(MAP(LIST(x), LIST(x))) FROM x;
SELECT JSON_QUOTE(MAP(LIST(x), LIST(x))) FROM x;
SELECT JSON_QUOTE(MAP(LIST(x), LIST(x))) FROM x;
SELECT JSON_QUOTE(MAP(LIST(x), LIST(x))) FROM x;
SELECT ROW_TO_JSON({'x': 42});
SELECT ROW_TO_JSON({'x': 42}, FALSE);
SELECT ROW_TO_JSON(NULL);
SELECT ROW_TO_JSON([42]);
SELECT ARRAY_TO_JSON([42]);
SELECT ARRAY_TO_JSON([42], [21]);
SELECT ARRAY_TO_JSON(NULL);
SELECT ARRAY_TO_JSON({'x': 42});
SELECT JSON_ARRAY(1, JSON_OBJECT('abc', 2.5, 'def', NULL, 'ghi', 'hello'), 99);
SELECT JSON_OBJECT('a', 1, 'b', 2.5, 'c', NULL, 'd', 'String Test');
SELECT JSON_OBJECT('a', 1, 'b', 2.5, 'c', NULL, 'd', 'String Test');
SELECT JSON_ARRAY(1, 2.5, NULL, 'hello');
SELECT JSON_ARRAY(1, '{"abc":2.5,"def":null,"ghi":hello}', 99);
SELECT JSON_ARRAY(1, JSON_QUOTE('{"abc":2.5,"def":null,"ghi":"hello"}'), 99);
SELECT JSON_ARRAY(1, JSON_OBJECT('abc', 2.5, 'def', NULL, 'ghi', 'hello'), 99);
SELECT JSON_OBJECT('ex', '[52,3.14159]');
SELECT JSON_OBJECT('ex', CAST('[52,3.14159]' AS JSON));
SELECT JSON_OBJECT('ex', JSON_ARRAY(52, 3.14159));
SELECT JSON_OBJECT('a', 2, 'c', 4);
SELECT JSON_OBJECT('a', 2, 'c', '{e:5}');
SELECT JSON_OBJECT('a', 2, 'c', JSON_OBJECT('e', 5));
SELECT JSON_ARRAY(1, 2, '3', 4);
SELECT JSON_ARRAY('[1,2]');
SELECT JSON_ARRAY(JSON_ARRAY(1, 2));
SELECT JSON_ARRAY(1, NULL, '3', '[4,5]', '{"six":7.7}');
SELECT JSON_ARRAY(1, NULL, '3', CAST('[4,5]' AS JSON), CAST('{"six":7.7}' AS JSON));
SELECT JSON_ARRAY(-9223372036854775808, 9223372036854775807, 0, 1, -1, 0.0, 1.0, -1.0, -1e99, 2e100, 'one', 'two', 'three', 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, NULL, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 'abcdefghijklmnopqrstuvwyxzABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwyxzABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwyxzABCDEFGHIJKLMNOPQRSTUVWXYZ', 99);
SELECT CAST((MAP([5, 3, 4], ['a', 'b', 'c']), 2) AS JSON);
PRAGMA x;
SELECT JSON_STRUCTURE(JSON('{"duck":"goose"}').x);
SELECT JSON('{"foo": null}').x;
SELECT JSON('{"foo": null}').x.x;
SELECT JSON('null');
SELECT JSON('[null]')."x";
SELECT JSON('{"my_field": {"my_nested_field": ["goose", "duck"]}}').x.x."x";
SELECT JSON('{"my_field": {"my_nested_field": ["goose", "duck"]}}').x.x[1];
SELECT (CAST('{"my_field": {"my_nested_field": ["goose", "duck"]}}' AS JSON)).x.x."x";
SELECT (CAST('{"my_field": {"my_nested_field": ["goose", "duck"]}}' AS JSON)).x.x[1];
SELECT (CAST('{"my_field": {"my_nested_field": ["goose", "duck"]}}' AS JSON)).x.x[-1];
SELECT (CAST('{"my_field": {"my_nested_field": ["goose", "duck"]}}' AS JSON)).x.x[0 : 1];
SELECT JSON('{"my_field": {"my_nested_field": ["goose", "duck"]}}').x.x[1];
SELECT JSON('{"my_field": {"my_nested_field": ["goose", "duckduckduckduck"]}}').x.x[1];
SELECT (CAST('{"my_field": {"my_nested_field": ["goose", "duckduckduckduck"]}}' AS JSON)).x.x[1];
SELECT JSON('{"my_field": {"my_nested_field": ["goose", "duckduckduckduck"]}}').x.x[1];
SELECT JSON('[1, 2, 42]')."x";
SELECT JSON('[1, 2, 42]')[2];
SELECT CAST(JSON('[1, 2, 42]')[2] AS TEXT);
SELECT (CAST('{"my_field": {"my_nested_field": ["goose", "duck"]}}' AS JSON)).x.x[1];
SELECT JSON('{"a":2,"c":[4,5,{"f":7}]}').x;
SELECT JSON('{"a":2,"c":[4,5,{"f":7}]}').x[2];
SELECT JSON('{"a":2,"c":[4,5,{"f":7}]}').x[2].x;
SELECT JSON('{"a":2,"c":[4,5,{"f":7}]}').x;
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('{"a":1,"b":2}');
SELECT JSON(x).x FROM x;
SELECT JSON(x)."x" FROM x;
CREATE TABLE x (x TEXT);
INSERT INTO x (x) VALUES ('{"settings":
{"layer2":
{"hapax.legomenon":
{"forceDisplay":true,
"transliterate":true,
"add.footnote":true,
"summary.report":true},
"dis.legomenon":
{"forceDisplay":true,
"transliterate":false,
"add.footnote":false,
"summary.report":true},
"tris.legomenon":
{"forceDisplay":true,
"transliterate":false,
"add.footnote":false,
"summary.report":false}
}
}
}');
SELECT JSON(x).x.x."x"."x" FROM x;
SELECT (CAST(x AS JSON)).x.x."x"."x" FROM x;
SELECT JSON('{"foo": "bar"}').x = 'bar';
SELECT JSON('{"foo": "bar"}').x = '"bar"';
SELECT JSON('{"foo": 1}').x = 1;
SELECT JSON('{"foo": "bar"}') = {'x': 'bar'};
PRAGMA x;
SELECT JSON_EXISTS('{"duck": null}', '$.duck');
WITH x AS (SELECT '$.duck' AS x) SELECT JSON_EXISTS('{"duck": null}', x) FROM x;
SELECT JSON_EXISTS('{"duck": null}', '$.goose');
WITH x AS (SELECT '$.goose' AS x) SELECT JSON_EXISTS('{"duck": null}', x) FROM x;
SELECT JSON_EXISTS('{"duck": null}', ['$.duck', '$.goose']);
PRAGMA x;
SELECT JSON_STRUCTURE("x" -> 'duck');
SELECT '{"foo": null}' -> '$.foo';
SELECT '{"foo": null}' -> '$.foo.bar';
SELECT 'null' -> '$';
SELECT '[null]' -> '$[0]';
SELECT '{"my_field": {"my_nested_field": ["goose", "duck"]}}' -> '/my_field/my_nested_field/1';
SELECT '{"my_field": {"my_nested_field": ["goose", "duck"]}}' -> '/my_field/my_nested_field/1';
SELECT CAST('{"my_field": {"my_nested_field": ["goose", "duck"]}}' AS JSON) -> '/my_field/my_nested_field/1';
SELECT '{"my_field": {"my_nested_field": ["goose", "duck"]}}' ->> '/my_field/my_nested_field/1';
SELECT '{"my_field": {"my_nested_field": ["goose", "duck"]}}' ->> '/my_field/my_nested_field/1';
SELECT CAST('{"my_field": {"my_nested_field": ["goose", "duck"]}}' AS JSON) ->> '/my_field/my_nested_field/1';
SELECT '{"my_field": {"my_nested_field": ["goose", "duckduckduckduck"]}}' -> '/my_field/my_nested_field/1';
SELECT CAST('{"my_field": {"my_nested_field": ["goose", "duckduckduckduck"]}}' AS JSON) -> '/my_field/my_nested_field/1';
SELECT '{"my_field": {"my_nested_field": ["goose", "duckduckduckduck"]}}' ->> '/my_field/my_nested_field/1';
SELECT CAST('{"my_field": {"my_nested_field": ["goose", "duckduckduckduck"]}}' AS JSON) ->> '/my_field/my_nested_field/1';
SELECT '[1, 2, 42]' -> '$[2]';
SELECT '[1, 2, 42]' ->> '$[2]';
SELECT (CAST('{"my_field": {"my_nested_field": ["goose", "duck"]}}' AS JSON) -> '$.my_field' -> '$.my_nested_field') ->> '$[1]';
SELECT '{"a":2,"c":[4,5,{"f":7}]}' -> '$';
SELECT '{"a":2,"c":[4,5,{"f":7}]}' -> '$.c';
SELECT '{"a":2,"c":[4,5,{"f":7}]}' -> '$.c[2]';
SELECT '{"a":2,"c":[4,5,{"f":7}]}' -> '$.c[2].f';
SELECT '{"a":2,"c":[4,5,{"f":7}]}' -> '$.x';
WITH x AS (SELECT '{"a":2,"c":[4,5],"f":7}' AS x, ['$.c', '$.a'] AS x) SELECT x -> x;
SELECT '{"a":2,"c":[4,5],"f":7}' -> ['$.c', '$.a'];
SELECT '{"a":2,"c":[4,5,{"f":7}]}' -> ['$.x', '$.a'];
SELECT NULL -> ['$.x', '$.a'];
CREATE TABLE x (x TEXT);
INSERT INTO x (x) VALUES ('{"a":1,"b":[1,[2,3],4],"c":99}');
SELECT x -> '$.b[#]' FROM x;
SELECT x -> '$.b[#-0]' AS x, x = (x -> '$.b[0]') FROM x;
SELECT x -> '$.b[#-1]' AS x, x = (x -> '$.b[-1]') FROM x;
SELECT x -> '$.b[#-2]' AS x, x = (x -> '$.b[-2]') FROM x;
SELECT x -> '$.b[#-02]' AS x, x = (x -> '$.b[-2]') FROM x;
SELECT x -> '$.b[#-3]' AS x, x = (x -> '$.b[-3]') FROM x;
SELECT x -> '$.b[#-4]', x -> '$.b[-4]' FROM x;
SELECT x -> '$.b[#-2][#-1]' AS x, x = (x -> '$.b[-2][-1]') FROM x;
SELECT CAST(x AS JSON) -> '$.b[#-2][#-1]' AS x, x = (CAST(x AS JSON) -> '$.b[-2][-1]') FROM x;
SELECT x -> ['$.b[0]', '$.b[#-1]'] AS x, x = (x -> ['$.b[0]', '$.b[-1]']) FROM x;
SELECT CAST(x AS JSON) -> ['$.b[0]', '$.b[#-1]'] AS x, x = (CAST(x AS JSON) -> ['$.b[0]', '$.b[-1]']) FROM x;
SELECT x -> '$.a[#-1]', x -> '$.a[-1]' FROM x;
SELECT x -> '$.b[#-000001]' AS x, x = (x -> '$.b[-1]') FROM x;
SELECT CAST(x AS JSON) -> '$.b[#-000001]' AS x, x = (CAST(x AS JSON) -> '$.b[-1]') FROM x;
SELECT x -> '$.b[#-]' FROM x;
SELECT x -> '$.b[#-]' FROM x;
SELECT x -> '$.b[#9]' FROM x;
SELECT x -> '$.b[#+2]' FROM x;
SELECT x -> '$.b[#-1' FROM x;
SELECT x -> '$.b[#-1x]' FROM x;
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('{"a":1,"b":2}');
SELECT x -> '$.b' FROM x;
SELECT x -> '$.b' FROM x;
CREATE TABLE x (x TEXT);
INSERT INTO x (x) VALUES ('{"settings":
{"layer2":
{"hapax.legomenon":
{"forceDisplay":true,
"transliterate":true,
"add.footnote":true,
"summary.report":true},
"dis.legomenon":
{"forceDisplay":true,
"transliterate":false,
"add.footnote":false,
"summary.report":true},
"tris.legomenon":
{"forceDisplay":true,
"transliterate":false,
"add.footnote":false,
"summary.report":false}
}
}
}');
SELECT x -> '$.settings.layer2."tris.legomenon"."summary.report"' FROM x;
SELECT CAST(x AS JSON) -> '$.settings.layer2."tris.legomenon"."summary.report"' FROM x;
CREATE TABLE x AS SELECT '{"a": 1, "b": 2}' AS x;
SELECT JSON('{"j[so]n_\"key": 67}') ->> '$."j[so]n_\"key"';
SELECT '{"\"duck\"": 42}' -> '$."\"duck\""';
SELECT '{"\"du\\ck\"": 42}' -> '$."\"du\\ck\""';
SELECT '{"\"du\\ck\"": 42}' -> '$."\"du\ck\""';
SELECT '{"du\\ck": 42}' -> '$."du\ck"';
SELECT '{"\"du\nck\"": 42}' -> '$."\"du\nck\""';
SELECT '{"\"du\nck\"": 42}' -> ('$."\"du' || CHR(10) || 'ck\""');
SELECT '{"duck":null}' -> '$.duck';
SELECT '{"duck":null}' ->> '$.duck';
SELECT '{"hello":1}' -> '$';
PRAGMA x;
SELECT JSON_KEYS('{"duck": 42}');
SELECT JSON_KEYS('{"duck": 42, "goose": 43}');
SELECT JSON_KEYS('["duck", "goose"]');
SELECT JSON_KEYS(NULL);
SELECT JSON_KEYS('{"duck": {"key1": 42}, "goose": {"key1": 42, "key2": 43}}', ['duck', 'goose']);
CREATE TABLE x AS SELECT x, CASE WHEN x % 2 = 0 THEN '{"duck": 42}' ELSE '{"duck": 42, "goose": 43}' END AS x FROM x;
SELECT x % 2 AS x, SUM(LENGTH(JSON_KEYS(x))) AS x FROM x GROUP BY x ORDER BY ALL;
CREATE TABLE x AS SELECT x, '{"duck": {"key1": 42}, "goose": {"key1": 42, "key2": 43}}' AS x FROM x;
SELECT SUM(LIST_SUM([LENGTH(x) FOR x IN JSON_KEYS(x, ['duck', 'goose'])])) AS x FROM x;
PRAGMA x;
SELECT JSON_MERGE_PATCH('{"a": 1}', '{"a": 2}');
SELECT JSON_MERGE_PATCH('{"a": 1}', '{"b": 2}');
SELECT JSON_MERGE_PATCH('{"a": {"c": 1}}', '{"a": {"d": 2}}');
SELECT JSON_MERGE_PATCH('{"a": {"b": 1}}', '{"a": {"b": 2}}');
SELECT JSON_MERGE_PATCH('[1, 2]', '[true, false]');
SELECT JSON_MERGE_PATCH('{"name": "x"}', '{"id": 47}');
SELECT JSON_MERGE_PATCH('1', 'true');
SELECT JSON_MERGE_PATCH('[1, 2]', '{"id": 47}');
SELECT JSON_MERGE_PATCH('{ "a": 1, "b":2 }', '{ "a": 3, "c":4 }');
SELECT JSON_MERGE_PATCH('{ "a": 1, "b":2 }', '{ "a": 3, "c":4 }', '{ "a": 5, "d":6 }');
SELECT JSON_MERGE_PATCH('{"a":1, "b":2}', '{"b":null}');
SELECT JSON_MERGE_PATCH('{"a":{"x":1}}', '{"a":{"y":2}}');
SELECT JSON_MERGE_PATCH(NULL, '3');
SELECT JSON_MERGE_PATCH('3', NULL);
SELECT JSON_MERGE_PATCH(NULL, NULL);
SELECT JSON_MERGE_PATCH('{"a":1}', '{"b":2}', '{"c":3}');
SELECT JSON_MERGE_PATCH(NULL, '{"b":2}', '{"c":3}');
SELECT JSON_MERGE_PATCH('{"a":1}', NULL, '{"c":3}');
SELECT JSON_MERGE_PATCH('{"a":1}', '{"b":2}', NULL);
PRAGMA x;
SELECT JSON_PRETTY('[1,2,{"a":43,    "g":[true, true]}]') = '[
1,
2,
{
"a": 43,
"g": [
true,
true
]
}
]';
SELECT JSON_PRETTY(NULL);
SELECT JSON_PRETTY(CAST('null' AS JSON));
SELECT JSON_PRETTY(CAST('[1,2,null,   {"a": null},  42]' AS JSON)) = '[
1,
2,
null,
{
"a": null
},
42
]';
PRAGMA x;
SELECT JSON_STRUCTURE('42');
SELECT JSON_STRUCTURE('4.2');
SELECT JSON_STRUCTURE('null');
SELECT JSON_STRUCTURE('true');
SELECT JSON_STRUCTURE('"duck"');
SELECT JSON_STRUCTURE('{"a": 42}');
SELECT JSON_STRUCTURE('{"a": 4.2}');
SELECT JSON_STRUCTURE('{"a": "42"}');
SELECT JSON_STRUCTURE('{"a": "looooooooooooooooong"}');
SELECT JSON_STRUCTURE('{"a": null}');
SELECT JSON_STRUCTURE('{"a": true}');
SELECT JSON_STRUCTURE('{"a": []}');
SELECT JSON_STRUCTURE('{"a": [42]}');
SELECT JSON_STRUCTURE('{"a": {"b": 42}}');
SELECT JSON_STRUCTURE('[null,null]');
SELECT JSON_STRUCTURE('[true,null,false]');
SELECT JSON_STRUCTURE('[true,null,false,1]');
SELECT JSON_STRUCTURE('[true,null,false,1,-1]');
SELECT JSON_STRUCTURE('[true,null,false,1,-1,0.42]');
SELECT JSON_STRUCTURE('[true,null,false,1,-1,0.42,"42"]');
SELECT JSON_STRUCTURE('[{"a": 42}, {"a": null}]');
SELECT JSON_STRUCTURE('[{"a": 42}, {"b": 4.2}]');
SELECT JSON_STRUCTURE('[{"a": [42, null]}, {"a": [7]}]');
SELECT JSON_STRUCTURE('[{"a": [{"b": 42}, {"b": null}]}, {"a": [{"b": 7}]}]');
SELECT JSON_STRUCTURE('[{"a": [{"b": 42}, {"b": null}]}, {"a": [{"c": 7}]}]');
SELECT JSON_STRUCTURE('[1, [1]]');
SELECT JSON_STRUCTURE('[1, {"a": 1}]');
SELECT JSON_STRUCTURE('[[1], {"a": 1}]');
SELECT JSON_STRUCTURE('{"a": 42, "a": 7}');
CREATE TABLE x (x JSON);
INSERT INTO x VALUES ('{"family": "anatidae", "species": ["duck", "goose", "swan", null], "coolness": 1000}'), ('{"family": "canidae", "species": ["labrador", null, "bulldog", "shepherd"], "hair": true, "coolness": 999}'), (NULL), ('{"family": null, "species": null, "hair": null, "coolness": null}'), ('{"family": "felidae", "species": ["tiger", "lion", null, "british shorthair"], "hair": true, "coolness": 999}');
SELECT JSON_STRUCTURE(x) FROM x;
SELECT JSON_STRUCTURE('{"a": 1, "A": 1}');
PRAGMA x;
SELECT FROM_JSON('42', '"UBIGINT"');
SELECT FROM_JSON_STRICT('42', '"UBIGINT"');
SELECT FROM_JSON_STRICT('42', '"DATE"');
SELECT JSON_TRANSFORM('42', '42');
SELECT JSON_TRANSFORM('42', '"UBIGINT"');
SELECT JSON_TRANSFORM('4.2', '"DOUBLE"');
SELECT JSON_TRANSFORM('null', '"NULL"');
SELECT JSON_TRANSFORM('true', '"BOOLEAN"');
SELECT JSON_TRANSFORM('"duck"', '"VARCHAR"');
SELECT JSON_TRANSFORM('"duuuuuuuuuuuuuuuuck"', '"VARCHAR"');
SELECT JSON_TRANSFORM('{"a": 42}', '{"a":"UBIGINT"}');
SELECT JSON_TRANSFORM_STRICT('{"a": 42, "a":43}', '{"a":"UBIGINT"}');
SELECT JSON_TRANSFORM_STRICT('{}', '{"a":"UBIGINT"}');
SELECT JSON_TRANSFORM_STRICT('{}', '["UBIGINT"]');
SELECT JSON_TRANSFORM('[{}, [42]]', '[["UBIGINT"]]');
SELECT JSON_TRANSFORM('{"a": null}', '{"a":"UBIGINT"}');
SELECT JSON_TRANSFORM('{"a": 42}', '{"a":"NULL"}');
SELECT JSON_TRANSFORM('{"a": 42}', '{"a":"ARRAY"}');
SELECT JSON_TRANSFORM('[1,2,3]', '["UBIGINT", "BIGINT"]');
SELECT CAST(LIST_SUM(JSON_TRANSFORM(CAST(RANGE(0, 5000) AS JSON), '["UBIGINT"]')) AS UBIGINT) AS x;
SELECT JSON_TRANSFORM('[1,2,3]', '["UBIGINT"]');
SELECT JSON_TRANSFORM('[1,2,3]', '["NULL"]');
SELECT JSON_TRANSFORM('[{"a": 42}, {"a": null}, {"a": 7}]', '[{"a": "UBIGINT"}]');
SELECT JSON_TRANSFORM('[{"a": 42}, {"a": null, "b": 33}, {"b": 7}]', '[{"a": "UBIGINT", "b": "UBIGINT"}]');
CREATE TABLE x (x JSON);
INSERT INTO x VALUES ('{"family": "anatidae", "species": ["duck", "goose", "swan", null], "coolness": 1000}'), ('{"family": "canidae", "species": ["labrador", null, "bulldog", "shepherd"], "hair": true, "coolness": 999}'), (NULL), ('{"family": null, "species": null, "hair": null, "coolness": null}'), ('{"family": "felidae", "species": ["tiger", "lion", null, "british shorthair"], "hair": true, "coolness": 999}');
SELECT JSON_TRANSFORM(x, '{"family": "VARCHAR", "coolness": "UBIGINT", "species": ["VARCHAR"]}') FROM x;
SELECT JSON_TRANSFORM('{"a": 4, "a": 2}', '{"a": "UBIGINT", "a": "UBIGINT"}');
SELECT JSON_TRANSFORM('{"a": {"duck": 42, "goose": 7}}', '{"a": "JSON"}');
SELECT JSON_TRANSFORM('42', '"${type}"');
SELECT JSON_TRANSFORM('42.42', '"${type}"');
SELECT JSON_TRANSFORM('"42"', '"${type}"');
SELECT JSON_TRANSFORM('true', '"${type}"');
SELECT JSON_TRANSFORM('false', '"${type}"');
SELECT JSON_TRANSFORM('[]', '"${type}"');
SELECT JSON_TRANSFORM('{}', '"${type}"');
SELECT JSON_TRANSFORM_STRICT('[]', '"${type}"');
SELECT JSON_TRANSFORM_STRICT('{}', '"${type}"');
SELECT JSON_TRANSFORM('null', '"${type}"');
SELECT JSON_TRANSFORM('-42', '"INTEGER"');
SELECT JSON_TRANSFORM('-42', '"UINTEGER"');
SELECT JSON_TRANSFORM_STRICT('-42', '"UINTEGER"');
SELECT JSON_TRANSFORM('42', '"VARCHAR"');
SELECT JSON_TRANSFORM('42', '"JSON"');
SELECT JSON_TRANSFORM('42', '"BLOB"');
SELECT JSON_TRANSFORM('-42', '"VARCHAR"');
SELECT JSON_TRANSFORM('42.42', '"VARCHAR"');
SELECT JSON_TRANSFORM('true', '"VARCHAR"');
SELECT JSON_TRANSFORM('[]', '"VARCHAR"');
SELECT JSON_TRANSFORM('{}', '"VARCHAR"');
SELECT JSON_TRANSFORM('null', '"VARCHAR"');
SELECT JSON_TRANSFORM('42', '"DECIMAL"');
SELECT JSON_TRANSFORM('42', '"DECIMAL(2)"');
SELECT JSON_TRANSFORM('42', '"DECIMAL(3,1)"');
SELECT JSON_TRANSFORM('-42', '"DECIMAL(3,1)"');
SELECT JSON_TRANSFORM('"42"', '"DECIMAL(3,1)"');
SELECT JSON_TRANSFORM('42.42', '"DECIMAL(4,2)"');
SELECT JSON_TRANSFORM('42.42', '"DECIMAL(10,2)"');
SELECT JSON_TRANSFORM('42.42', '"DECIMAL(20,2)"');
SELECT JSON_TRANSFORM('42.42', '"DECIMAL(38,2)"');
SELECT JSON_TRANSFORM('42.42', '"DECIMAL(38,17)"');
SELECT JSON_TRANSFORM('true', '"DECIMAL(3,1)"');
SELECT JSON_TRANSFORM('false', '"DECIMAL(3,1)"');
SELECT JSON_TRANSFORM('null', '"DECIMAL(3,1)"');
SELECT JSON_TRANSFORM('42', '"DECIMAL(2,1)"');
SELECT JSON_TRANSFORM('[]', '"DECIMAL(2,1)"');
SELECT JSON_TRANSFORM('{}', '"DECIMAL(2,1)"');
SELECT JSON_TRANSFORM_STRICT('42', '"DECIMAL(2,1)"');
SELECT JSON_TRANSFORM('42', '"DECIMAL(39)"');
SELECT JSON_TRANSFORM('42', '"DECIMAL(2,4)"');
SELECT JSON_TRANSFORM('42', '"DECIMAL(5,1,1)"');
SELECT JSON_TRANSFORM('"A0EEBC99-9C0B-4EF8-BB6D-6BB9BD380A11"', '"UUID"');
SELECT JSON_TRANSFORM('42', '"UUID"');
SELECT JSON_TRANSFORM_STRICT('42', '"UUID"');
SELECT JSON_TRANSFORM('-42', '"UUID"');
SELECT JSON_TRANSFORM('42.42', '"UUID"');
SELECT JSON_TRANSFORM('true', '"UUID"');
SELECT JSON_TRANSFORM('false', '"UUID"');
SELECT JSON_TRANSFORM('null', '"UUID"');
SELECT JSON_TRANSFORM_STRICT('42', '"UUID"');
SELECT JSON_TRANSFORM('"1996-03-27"', '"DATE"');
SELECT JSON_TRANSFORM('"11:59:59"', '"TIME"');
SELECT JSON_TRANSFORM('42', '"DATE"');
SELECT JSON_TRANSFORM('-42', '"DATE"');
SELECT JSON_TRANSFORM('42.42', '"DATE"');
SELECT JSON_TRANSFORM('"42"', '"DATE"');
SELECT JSON_TRANSFORM('null', '"DATE"');
SELECT JSON_TRANSFORM('true', '"DATE"');
SELECT JSON_TRANSFORM('false', '"DATE"');
SELECT JSON_TRANSFORM('[]', '"DATE"');
SELECT JSON_TRANSFORM('{}', '"DATE"');
SELECT JSON_TRANSFORM_STRICT('false', '"DATE"');
SELECT JSON_TRANSFORM('"1996-03-27 11:59:59"', '"TIMESTAMP"');
SELECT JSON_TRANSFORM('"1996-03-27 11:59:59"', '"TIMESTAMP_MS"');
SELECT JSON_TRANSFORM('"1996-03-27 11:59:59"', '"TIMESTAMP_NS"');
SELECT JSON_TRANSFORM('"1996-03-27 11:59:59"', '"TIMESTAMP_S"');
SELECT JSON_TRANSFORM('null', '"TIMESTAMP"');
SELECT JSON_TRANSFORM('42', '"TIMESTAMP"');
SELECT JSON_TRANSFORM_STRICT('42', '"TIMESTAMP"');
PRAGMA x;
SELECT JSON_TYPE('{"str": 42}');
SELECT JSON_TYPE('[1, 2, 3]');
SELECT JSON_TYPE('"other"');
SELECT JSON_TYPE('42');
SELECT JSON_TYPE('NaN');
SELECT JSON_TYPE('null');
SELECT JSON_TYPE(NULL);
SELECT JSON_TYPE('{"str": 42}', 'str');
SELECT JSON_TYPE('{"str": "quack"}', 'str');
SELECT JSON_TYPE('{"str": "quack"}', 'str2');
SELECT JSON_TYPE('{"str": "quack"}', NULL);
SELECT JSON_TYPE(NULL, 'str');
SELECT JSON_TYPE('{"null": NaN}', 'null');
SELECT JSON_TYPE('{"null": nan}', 'null');
SELECT JSON_TYPE('{"null": Infinity}', 'null');
SELECT JSON_TYPE('{"null": -Infinity}', 'null');
CREATE TABLE x (x TEXT, x TEXT);
INSERT INTO x VALUES ('{"str": "quack", "int": 4, "double": 0.42, "bool": true, "arr": [], "nested": {"val": 1}}', '/nested/val'), ('{"str": "woof", "int": -4, "double": -0.42, "bool": false, "arr": [0, 1, 2], "nested": {"val": 42}}', '/arr/2'), ('{"str": null, "int": null, "double": null, "bool": null, "arr": null, "nested": null}', 'bool');
SELECT JSON_TYPE(x, 'str') FROM x;
SELECT JSON_TYPE(x, 'int') FROM x;
SELECT JSON_TYPE(x, 'double') FROM x;
SELECT JSON_TYPE(x, 'bool') FROM x;
SELECT JSON_TYPE(x, 'arr') FROM x;
SELECT JSON_TYPE(x, '/arr/0') FROM x;
SELECT JSON_TYPE(x, '/nested/val') FROM x;
SELECT JSON_TYPE(x, ['str', '/nested/val']) FROM x;
SELECT JSON_TYPE(x, x) FROM x;
SELECT JSON_TYPE('{"a":[2,3.5,true,false,null,"x"]}');
SELECT JSON_TYPE('{"a":[2,3.5,true,false,null,"x"]}', '$');
SELECT JSON_TYPE('{"a":[2,3.5,true,false,null,"x"]}', '$.a');
SELECT JSON_TYPE('{"a":[2,3.5,true,false,null,"x"]}', '$.a[0]');
SELECT JSON_TYPE('{"a":[2,3.5,true,false,null,"x"]}', '$.a[1]');
SELECT JSON_TYPE('{"a":[2,3.5,true,false,null,"x"]}', '$.a[2]');
SELECT JSON_TYPE('{"a":[2,3.5,true,false,null,"x"]}', '$.a[3]');
SELECT JSON_TYPE('{"a":[2,3.5,true,false,null,"x"]}', '$.a[4]');
SELECT JSON_TYPE('{"a":[2,3.5,true,false,null,"x"]}', '$.a[5]');
SELECT JSON_TYPE('{"a":[2,3.5,true,false,null,"x"]}', '$.a[6]');
PRAGMA x;
SELECT JSON_VALID('{"bla": inf}');
SELECT JSON_VALID('{"bla": infinity}');
CREATE TABLE x (x TEXT);
INSERT INTO x (x) VALUES ('true'), ('false'), ('null'), ('123'), ('-234'), ('34.5e+6'), ('""'), ('"\""'), ('"\\"'), ('"abcdefghijlmnopqrstuvwxyz"'), ('[]'), ('{}'), ('[true,false,null,123,-234,34.5e+6,{},[]]'), ('{"a":true,"b":{"c":false}}');
SELECT * FROM x WHERE NOT JSON_VALID(x);
SELECT JSON_VALID('{"a":55,"b":72,}');
SELECT JSON_VALID('{"a":55,"b":72}');
SELECT JSON_VALID('["a",55,"b",72,]');
SELECT JSON_VALID('["a",55,"b",72]');
SELECT JSON_VALID('" \  "');
SELECT JSON_VALID('" \! "');
SELECT JSON_VALID('" \" "');
SELECT JSON_VALID('" \# "');
SELECT JSON_VALID('" \$ "');
SELECT JSON_VALID('" \% "');
SELECT JSON_VALID('" \& "');
SELECT JSON_VALID('" \'' "');
SELECT JSON_VALID('" \( "');
SELECT JSON_VALID('" \) "');
SELECT JSON_VALID('" \* "');
SELECT JSON_VALID('" \+ "');
SELECT JSON_VALID('" \, "');
SELECT JSON_VALID('" \- "');
SELECT JSON_VALID('" \. "');
SELECT JSON_VALID('" \/ "');
SELECT JSON_VALID('" \0 "');
SELECT JSON_VALID('" \1 "');
SELECT JSON_VALID('" \2 "');
SELECT JSON_VALID('" \3 "');
SELECT JSON_VALID('" \4 "');
SELECT JSON_VALID('" \5 "');
SELECT JSON_VALID('" \6 "');
SELECT JSON_VALID('" \7 "');
SELECT JSON_VALID('" \8 "');
SELECT JSON_VALID('" \9 "');
SELECT JSON_VALID('" \: "');
SELECT JSON_VALID('" \; "');
SELECT JSON_VALID('" \< "');
SELECT JSON_VALID('" \= "');
SELECT JSON_VALID('" \> "');
SELECT JSON_VALID('" \? "');
SELECT JSON_VALID('" \@ "');
SELECT JSON_VALID('" \A "');
SELECT JSON_VALID('" \B "');
SELECT JSON_VALID('" \C "');
SELECT JSON_VALID('" \D "');
SELECT JSON_VALID('" \E "');
SELECT JSON_VALID('" \F "');
SELECT JSON_VALID('" \G "');
SELECT JSON_VALID('" \H "');
SELECT JSON_VALID('" \I "');
SELECT JSON_VALID('" \J "');
SELECT JSON_VALID('" \K "');
SELECT JSON_VALID('" \L "');
SELECT JSON_VALID('" \M "');
SELECT JSON_VALID('" \N "');
SELECT JSON_VALID('" \O "');
SELECT JSON_VALID('" \P "');
SELECT JSON_VALID('" \Q "');
SELECT JSON_VALID('" \R "');
SELECT JSON_VALID('" \S "');
SELECT JSON_VALID('" \T "');
SELECT JSON_VALID('" \U "');
SELECT JSON_VALID('" \V "');
SELECT JSON_VALID('" \W "');
SELECT JSON_VALID('" \X "');
SELECT JSON_VALID('" \Y "');
SELECT JSON_VALID('" \Z "');
SELECT JSON_VALID('" \[ "');
SELECT JSON_VALID('" \\ "');
SELECT JSON_VALID('" \] "');
SELECT JSON_VALID('" \^ "');
SELECT JSON_VALID('" \_ "');
SELECT JSON_VALID('" \` "');
SELECT JSON_VALID('" \a "');
SELECT JSON_VALID('" \b "');
SELECT JSON_VALID('" \c "');
SELECT JSON_VALID('" \d "');
SELECT JSON_VALID('" \e "');
SELECT JSON_VALID('" \f "');
SELECT JSON_VALID('" \g "');
SELECT JSON_VALID('" \h "');
SELECT JSON_VALID('" \i "');
SELECT JSON_VALID('" \j "');
SELECT JSON_VALID('" \k "');
SELECT JSON_VALID('" \l "');
SELECT JSON_VALID('" \m "');
SELECT JSON_VALID('" \n "');
SELECT JSON_VALID('" \o "');
SELECT JSON_VALID('" \p "');
SELECT JSON_VALID('" \q "');
SELECT JSON_VALID('" \r "');
SELECT JSON_VALID('" \s "');
SELECT JSON_VALID('" \t "');
SELECT JSON_VALID('" \u "');
SELECT JSON_VALID('" \ua "');
SELECT JSON_VALID('" \uab "');
SELECT JSON_VALID('" \uabc "');
SELECT JSON_VALID('" \uabcd "');
SELECT JSON_VALID('" \uFEDC "');
SELECT JSON_VALID('" \u1234 "');
SELECT JSON_VALID('" \v "');
SELECT JSON_VALID('" \w "');
SELECT JSON_VALID('" \x "');
SELECT JSON_VALID('" \y "');
SELECT JSON_VALID('" \z "');
SELECT JSON_VALID('" \{ "');
SELECT JSON_VALID('" \| "');
SELECT JSON_VALID('" \} "');
SELECT JSON_VALID('" \~ "');
SELECT JSON_VALID('{"x":01}');
SELECT JSON_VALID('{"x":-01}');
SELECT JSON_VALID('{"x":0}');
SELECT JSON_VALID('{"x":-0}');
SELECT JSON_VALID('{"x":0.1}');
SELECT JSON_VALID('{"x":-0.1}');
SELECT JSON_VALID('{"x":0.0000}');
SELECT JSON_VALID('{"x":-0.0000}');
SELECT JSON_VALID('{"x":01.5}');
SELECT JSON_VALID('{"x":-01.5}');
SELECT JSON_VALID('{"x":00}');
SELECT JSON_VALID('{"x":-00}');
PRAGMA x;
SELECT JSON_VALUE('{"foo": null}', '$.foo');
SELECT JSON_VALUE('{"foo": null}', '$.foo.bar');
SELECT JSON_VALUE('null', '$');
SELECT JSON_VALUE('[null]', '$[0]');
SELECT JSON_VALUE('{"my_field": {"my_nested_field": ["goose", "duck"]}}', '/my_field/my_nested_field/1');
SELECT JSON_VALUE('{"my_field": {"my_nested_field": ["goose", "duckduckduckduck"]}}', '/my_field/my_nested_field/1');
SELECT JSON_VALUE('[1, 2, 42]', 2);
SELECT JSON_VALUE('{"a":2,"c":[4,5,{"f":7}]}', '$');
SELECT JSON_VALUE('{"a":2,"c":[4,5,{"f":7}]}', '$.c');
SELECT JSON_VALUE('{"a":2,"c":[4,5,{"f":7}]}', '$.c[2]');
SELECT JSON_VALUE('{"a":2,"c":[4,5,{"f":7}]}', '$.c[2].f');
SELECT JSON_VALUE('{"a":2,"c":[4,5,{"f":7}]}', '$.x');
WITH x AS (SELECT '{"a":2,"c":[4,5],"f":7}' AS x, ['$.c', '$.a'] AS x) SELECT JSON_VALUE(x, x);
SELECT JSON_VALUE('{"a":2,"c":[4,5],"f":7}', ['$.c', '$.a']);
SELECT JSON_VALUE('{"a":2,"c":[4,5,{"f":7}]}', ['$.x', '$.a']);
SELECT JSON_VALUE(NULL, ['$.x', '$.a']);
CREATE TABLE x (x TEXT);
INSERT INTO x (x) VALUES ('{"a":1,"b":[1,[2,3],4],"c":99}');
SELECT JSON_VALUE(x, '$.b[#]') FROM x;
SELECT JSON_VALUE(x, '$.a[#-1]'), JSON_VALUE(x, '$.a[-1]') FROM x;
SELECT JSON_VALUE(x, '$.b[#-000001]') AS x, x = JSON_VALUE(x, '$.b[-000001]') FROM x;
SELECT JSON_VALUE(x, '$.b[#-]') FROM x;
SELECT JSON_VALUE(x, '$.b[-]') FROM x;
SELECT JSON_VALUE(x, '$.b[#9]') FROM x;
SELECT JSON_VALUE(x, '$.b[#+2]') FROM x;
SELECT JSON_VALUE(x, '$.b[#-1') FROM x;
SELECT JSON_VALUE(x, '$.b[#-1x]') FROM x;
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('{"a":1,"b":2}');
SELECT JSON_VALUE(x, '$.b') FROM x;
SELECT JSON_VALUE(x, '$."b"') FROM x;
CREATE TABLE x (x TEXT);
INSERT INTO x (x) VALUES ('{"settings":
{"layer2":
{"hapax.legomenon":
{"forceDisplay":true,
"transliterate":true,
"add.footnote":true,
"summary.report":true},
"dis.legomenon":
{"forceDisplay":true,
"transliterate":false,
"add.footnote":false,
"summary.report":true},
"tris.legomenon":
{"forceDisplay":true,
"transliterate":false,
"add.footnote":false,
"summary.report":false}
}
}
}');
SELECT JSON_VALUE(x, '$.settings.layer2."tris.legomenon"."summary.report"') FROM x;
SELECT JSON_VALUE(x, '$.settings.layer2."tris.legomenon"') FROM x;
PRAGMA x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
CREATE TABLE x AS SELECT x AS x, TO_JSON([x % 4]) AS x FROM x AS x;
COPY x TO '__TEST_DIR__/json_part' WITH (FORMAT csv, quote '', PARTITION_BY (x), HEADER 0);
SELECT * EXCLUDE (x), REPLACE(x, '\', '/') AS x FROM x ORDER BY ALL;
SELECT *, REPLACE(x, '\', '/') FROM x ORDER BY ALL;
SELECT * FROM x ORDER BY ALL;
SELECT x, COUNT(*) FROM x GROUP BY x ORDER BY x;
SELECT * EXCLUDE (x), REPLACE(x, '\', '/') AS x FROM x ORDER BY ALL;
SELECT * FROM x ORDER BY ALL;
SELECT x, COUNT(*) FROM x GROUP BY x ORDER BY x;
SELECT x, COUNT(*) FROM x WHERE x = '[2]' GROUP BY x ORDER BY x;
SELECT x, COUNT(*) FROM x WHERE x > '[2]' GROUP BY x ORDER BY x;
SELECT x, COUNT(*) FROM x WHERE SQRT(CAST(x[2] AS INT)) > 1.5 GROUP BY x ORDER BY x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SET x = 8;
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT x FROM x;
SELECT x FROM x;
SELECT x FROM x;
SELECT x FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT x, TYPEOF(x), UNNEST(x) FROM x;
SELECT x, TYPEOF(x), UNNEST(x) FROM x;
SELECT TYPEOF(x), TYPEOF(x) FROM x;
SELECT x, TYPEOF(x) FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
COPY (SELECT 42 AS x FROM x) TO '__TEST_DIR__/my_file.json' WITH (array TRUE);
SELECT COUNT(*) FROM x;
SELECT SUM(x) = 42 * 10000 FROM x;
SELECT COUNT(*) FROM x;
SELECT SUM(x) = 42 * 10000 FROM x;
COPY (SELECT LIST(x) FROM x) TO '__TEST_DIR__/my_file.json' WITH (format csv, quote '', HEADER 0);
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SET x = 2;
SELECT JSON_STRUCTURE(x ->> '$.metadata') AS x FROM x LIMIT 1;
SELECT JSON_STRUCTURE(x ->> '$.metadata') AS x FROM x LIMIT 1;
SELECT JSON_STRUCTURE(x ->> '$.metadata') AS x FROM x LIMIT 1;
PRAGMA x;
COPY (SELECT 42 AS x FROM x) TO '__TEST_DIR__/my_file.json' WITH (array TRUE);
SELECT SUM(x) = 42 * 50000 FROM x;
SELECT * FROM x;
PRAGMA x;
COPY (SELECT * FROM (VALUES ('{"a": 1, "b": 2}'), (''))) TO '__TEST_DIR__/my_file.json' WITH (format csv, quote '', header 0);
SELECT * FROM x;
COPY (SELECT * FROM (VALUES ('{"a": 1}'), ('{"a": 2}'), ('{"a": 3}'))) TO '__TEST_DIR__/my_file.json' WITH (format csv, quote '', header 0);
SELECT * FROM x;
SELECT COUNT(*) FROM x;
COPY (SELECT * FROM (VALUES ('{"a": 1,"b": 2, "c": 3}'), ('{"a": 4,"b": 5, "c": 6}'))) TO '__TEST_DIR__/my_file.json' WITH (format csv, quote '', header 0);
SELECT * FROM x;
COPY (SELECT * FROM (VALUES ('{"a": 1,"b": 2, "c": "3", "d": false}'), ('{"a": 4.0, "b": -5, "c": "foo", "d": true}'), (''))) TO '__TEST_DIR__/my_file.json' WITH (format csv, quote '', header 0);
SELECT * FROM x;
COPY (SELECT * FROM (VALUES ('{"a": 1, "b": 2, "c": null, "d": null, "e": null}'), ('{"a": null, "b": -5, "c": "foo", "d": null, "e": true}'), ('{"a": 4.5, "b": null, "c": "nan", "d": null,"e": false}'), (''))) TO '__TEST_DIR__/my_file.json' WITH (format csv, quote '', header 0);
SELECT * FROM x;
COPY (SELECT * FROM (VALUES ('{"a": 1}'), ('{"a": 1.45}'), ('{"a": -23.456}'), ('{}'), (''))) TO '__TEST_DIR__/my_file.json' WITH (format csv, quote '', header 0);
SELECT TYPEOF(x), x FROM x;
COPY (SELECT * FROM (VALUES ('{"foo": "bar", "num": 0}'), ('{"foo": "baz", "num": 1}'), (''))) TO '__TEST_DIR__/my_file.json' WITH (format csv, quote '', header 0);
SELECT * FROM x;
SELECT * FROM x;
SELECT COUNT(*) FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT TYPEOF(x) FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x WHERE x <> 'completed';
SELECT * FROM x;
SELECT * FROM x;
SELECT TYPEOF(COLUMNS(*)) FROM x LIMIT 1;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
COPY (SELECT * FROM (VALUES ('{"id": "26941143801"}'), ('{"id": "26941143807"}'))) TO '__TEST_DIR__/my_file.json' WITH (format csv, quote '', header 0);
SELECT TYPEOF(x) FROM x;
SELECT * FROM x;
SELECT DISTINCT TYPEOF(x) FROM x;
SELECT DISTINCT TYPEOF(x) FROM x;
SELECT DISTINCT TYPEOF(x) FROM x;
SELECT DISTINCT TYPEOF(x) FROM x;
SELECT DISTINCT TYPEOF(x) FROM x;
SELECT DISTINCT TYPEOF(x) FROM x;
SELECT DISTINCT TYPEOF(x) FROM x;
SELECT DISTINCT TYPEOF(x) FROM x;
SELECT DISTINCT TYPEOF(x) FROM x;
SELECT DISTINCT TYPEOF(x) FROM x;
SELECT DISTINCT TYPEOF(x) FROM x;
SELECT DISTINCT TYPEOF(x) FROM x;
SELECT DISTINCT TYPEOF(x) FROM x;
SELECT DISTINCT TYPEOF(x) FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT TYPEOF("x"), TYPEOF(x) FROM x;
SELECT TYPEOF("x"), TYPEOF(x) FROM x;
SELECT x, x[1].x, x[1].x.x, x[1].x.x, LENGTH(x[1].x.x) FROM x;
PRAGMA x;
SELECT * FROM x;
CREATE TABLE x AS SELECT CAST('1996/03/27' AS DATE) AS x;
CREATE TABLE x AS SELECT CAST('1996-03-27 07:42:33' AS TIMESTAMP) AS x;
COPY (SELECT x FROM x) TO '__TEST_DIR__/my_file.json' WITH (dateformat);
COPY (SELECT x FROM x) TO '__TEST_DIR__/my_file.json' WITH (timestampformat);
COPY x FROM 'data/json/simple_timestamp.json' WITH (dateformat);
COPY x FROM 'data/json/simple_timestamp.json' WITH (timestampformat);
COPY x FROM 'data/json/simple_timestamp.json' WITH (timestampformat);
SELECT TYPEOF(x), x FROM x;
SELECT TYPEOF(x), x FROM x;
SELECT TYPEOF(x), x FROM x;
DROP TABLE IF EXISTS x;
CREATE TABLE x (x DATE);
CREATE TABLE x (x DATE);
SELECT TYPEOF(x), x FROM x;
SELECT TYPEOF(x), x FROM x;
SELECT TYPEOF(x), x FROM x;
SELECT TYPEOF(x), x FROM x;
SELECT TYPEOF(x), x FROM x;
DROP TABLE IF EXISTS x;
CREATE TABLE x (x TIMESTAMP);
CREATE TABLE x (x TIMESTAMP);
SELECT TYPEOF(x), x FROM x;
SELECT TYPEOF(x), x FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
SELECT x FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
COPY (SELECT {'x': 42, 'x': 4.2, 'x': {'x': {'x': 42, 'x': 4.2, 'x': {'x': 42, 'x': 4.2}}, 'x': 42, 'x': 4.2}} AS x) TO '__TEST_DIR__/nested.json';
SELECT x.x FROM x;
SELECT x.x.x FROM x;
SELECT x.x.x FROM x;
SELECT x.x.x.x FROM x;
SELECT x.x.x.x FROM x;
SELECT x.x.x.x.x FROM x;
SELECT x.x.x.x.x FROM x;
SELECT x.x.x.x.x.x FROM x;
PRAGMA x;
CREATE SCHEMA "x".x;
INSERT INTO "x".x VALUES ('ALL');
SELECT "x" FROM "x".x;
SELECT "x"."x" FROM "x".x;
SELECT "x"."x"."x" FROM "x".x;
DROP TABLE "x".x;
DROP TABLE "x".x;
INSERT INTO "x".x VALUES ({'x': {'x': 3}});
SELECT "x"."x"."x" FROM "x".x;
SELECT "x"."x"."x"."x" FROM "x".x;
SELECT "x"."x"."x"."x"."x" FROM "x".x;
SELECT (("x"."x"."x")."x")."x" FROM "x".x;
SELECT "x"."x"."x"['SO"ME']['I"N'] FROM "x".x;
PRAGMA x;
CREATE SCHEMA "x".x;
CREATE TABLE "x".x ("x" ENUM);
CREATE TABLE "x".x ("x" E);
INSERT INTO "x".x VALUES ('ALL');
SELECT "x" FROM "x".x;
SELECT "x"."x" FROM "x".x;
SELECT "x"."x"."x" FROM "x".x;
DROP TABLE "x".x;
DROP TABLE "x".x;
INSERT INTO "x".x VALUES ({'x': {'x': 3}});
SELECT "x"."x"."x" FROM "x".x;
SELECT "x"."x"."x"."x" FROM "x".x;
SELECT "x"."x"."x"."x"."x" FROM "x".x;
SELECT (("x"."x"."x")."x")."x" FROM "x".x;
SELECT "x"."x"."x"['SOME']['IN'] FROM "x".x;
PRAGMA x;
PRAGMA x = 8;
CREATE TABLE x AS SELECT * FROM x AS x;
CREATE TABLE x AS SELECT 337 AS x UNION ALL SELECT 948247 UNION ALL SELECT 1779793 UNION ALL SELECT 8779793;
BEGIN;
INSERT INTO x SELECT * FROM x AS x;
SELECT * FROM x LIMIT 5;
SELECT * FROM x WHERE x > 5978321 OR x = 334 LIMIT 5;
SELECT * FROM x WHERE x > 5978321 LIMIT 5;
SELECT * FROM x WHERE x > 8978321 LIMIT 5;
SELECT * FROM x WHERE x IN (SELECT * FROM x);
(SELECT * FROM x WHERE x > 1978321 LIMIT 5) UNION ALL (SELECT * FROM x WHERE x > 8978321 LIMIT 5);
DROP TABLE x;
SELECT * FROM (SELECT SUM(x) FROM x AS x) LIMIT 0;
PRAGMA x = 'OPTIMIZED_ONLY';
PRAGMA x;
PRAGMA x = 8;
PRAGMA x = 8;
SELECT * FROM x LIMIT 5;
SELECT * FROM x WHERE x > 1978321 OR x = 334 LIMIT 5;
SELECT * FROM x WHERE x > 1978321 LIMIT 5;
SELECT * FROM x WHERE x > 4978321 LIMIT 5;
SELECT * FROM x WHERE x > 4978321 LIMIT 5 OFFSET 100000;
SELECT * FROM x WHERE x > 4978321 LIMIT 5 OFFSET 1000000;
SELECT x, LEAD(x, 1) OVER () FROM x LIMIT 5 OFFSET 4978321;
SELECT x, LEAD(x, 100000) OVER () FROM x LIMIT 5 OFFSET 4978321;
SELECT * FROM x WHERE x IN (SELECT * FROM x);
(SELECT * FROM x WHERE x > 1978321 LIMIT 5) UNION ALL (SELECT * FROM x WHERE x > 4978321 LIMIT 5);
PRAGMA x;
PRAGMA x = 8;
PRAGMA x = 8;
SELECT x, x FROM x LIMIT 5;
SELECT x, x FROM x WHERE x > 197832 OR x = 334 LIMIT 5;
SELECT x, x FROM x WHERE x > 197832 LIMIT 5;
SELECT x, x FROM x WHERE x > 497832 LIMIT 5;
SELECT x, x FROM x WHERE x > 497832 LIMIT 5 OFFSET 100000;
SELECT x, x FROM x WHERE x > 497832 LIMIT 5 OFFSET 1000000;
SELECT x, x FROM x WHERE x IN (SELECT * FROM x);
(SELECT x, x FROM x WHERE x > 197832 LIMIT 5) UNION ALL (SELECT x, x FROM x WHERE x > 497832 LIMIT 5);
PRAGMA x;
PRAGMA x = 8;
PRAGMA x = 8;
SELECT x, x FROM x LIMIT 5;
SELECT x, x FROM x WHERE x > 197832 OR x = 334 LIMIT 5;
SELECT x, x FROM x WHERE x > 197832 LIMIT 5;
SELECT x, x FROM x WHERE x > 497832 LIMIT 5;
SELECT x, x FROM x WHERE x > 497832 LIMIT 5 OFFSET 100000;
SELECT x, x FROM x WHERE x > 497832 LIMIT 5 OFFSET 1000000;
SELECT x, x FROM x WHERE x IN (SELECT * FROM x);
(SELECT x, x FROM x WHERE x > 197832 LIMIT 5) UNION ALL (SELECT x, x FROM x WHERE x > 497832 LIMIT 5);
PRAGMA x;
PRAGMA x = 8;
PRAGMA x = 8;
SELECT x FROM x LIMIT 5;
SELECT x FROM x WHERE x > 1978321 OR x = 334 LIMIT 5;
SELECT x FROM x WHERE x > 1978321 LIMIT 5;
SELECT x FROM x WHERE x > 4978321 LIMIT 5;
SELECT x FROM x WHERE x > 4978321 LIMIT 5 OFFSET 100000;
SELECT x FROM x WHERE x > 4978321 LIMIT 5 OFFSET 1000000;
SELECT x FROM x WHERE x IN (SELECT * FROM x);
(SELECT x FROM x WHERE x > 1978321 LIMIT 5) UNION ALL (SELECT x FROM x WHERE x > 4978321 LIMIT 5);
PRAGMA x;
PRAGMA x = 8;
PRAGMA x = 8;
SELECT x FROM x LIMIT 5;
SELECT x FROM x WHERE x > 1978321 OR x = 334 LIMIT 5;
SELECT x FROM x WHERE x > 1978321 LIMIT 5;
SELECT x FROM x WHERE x > 4978321 LIMIT 5;
SELECT x FROM x WHERE x > 4978321 LIMIT 5 OFFSET 100000;
SELECT x FROM x WHERE x > 4978321 LIMIT 5 OFFSET 1000000;
SELECT x FROM x WHERE x IN (SELECT * FROM x);
(SELECT x FROM x WHERE x > 1978321 LIMIT 5) UNION ALL (SELECT x FROM x WHERE x > 4978321 LIMIT 5);
PRAGMA x;
SET x = FALSE;
CREATE TABLE x AS SELECT 1 AS x FROM x AS x;
SELECT MIN(x), MAX(x), COUNT(*) FROM x;
SELECT * FROM x LIMIT 5;
SELECT * FROM x LIMIT 5 OFFSET 500000;
CREATE TABLE x AS SELECT * FROM x AS x;
SELECT MIN(x), MAX(x), COUNT(*) FROM x;
SELECT * FROM x WHERE x IN (337, 195723, 442578, 994375);
SELECT * FROM x WHERE x IN (337, 195723, 442578, 994375) LIMIT 4;
SELECT * FROM x;
SET x = 'debug';
SET x = TRUE;
SELECT 1;
SELECT * EXCLUDE (x, x, x, x) FROM x;
SET x = FALSE;
SELECT * EXCLUDE (x, x, x, x) FROM x;
SET x = 'stdout';
SET x = 'memory';
SET x = 'quack';
SELECT * EXCLUDE (x, x, x, x) FROM x;
SET x = TRUE;
SELECT WRITE_LOG('hey1', x := 'test_logging_autocommit');
SELECT WRITE_LOG('hey2', x := 'test_logging_autocommit');
SELECT x - GETVARIABLE('base_transaction_id') AS x;
SELECT * FROM x WHERE x = CURRENT_CONNECTION_ID() AND x = 'test_logging_autocommit';
BEGIN;
SELECT WRITE_LOG('hey1', x := 'test_logging_transaction');
SELECT WRITE_LOG('hey2', x := 'test_logging_transaction');
COMMIT;
SELECT x - GETVARIABLE('base_transaction_id') AS x;
SELECT * FROM x WHERE x = CURRENT_CONNECTION_ID() AND x = 'test_logging_transaction';
SELECT * FROM x;
PRAGMA x;
SET x = 'info';
SELECT WRITE_LOG('hello from the global log scope', x := 'info', x := 'database', x := 'global_type') FROM x;
SELECT WRITE_LOG('hello from the connection log scope', x := 'info', x := 'connection', x := 'client_context_type') FROM x;
SELECT WRITE_LOG('hello from the file_opener log scope', x := 'info', x := 'file_opener', x := 'opener_type') FROM x;
SELECT * FROM x;
SELECT * EXCLUDE (x, x, x, x, x) FROM x WHERE STARTS_WITH(x, 'hello from the') ORDER BY x;
SELECT x, x - GETVARIABLE('base_connection_id'), x - GETVARIABLE('base_transaction_id');
SELECT * FROM x WHERE STARTS_WITH(x, 'hello from the') ORDER BY x;
SELECT * FROM x;
SET x = TRUE;
SET x = TRUE;
SELECT WRITE_LOG('hi_global', x := 'info', x := 'database') FROM x;
SELECT WRITE_LOG('hi_client', x := 'info', x := 'connection') FROM x;
SELECT WRITE_LOG('hi_file', x := 'info', x := 'file_opener') FROM x;
SELECT COUNT(*), x FROM x WHERE STARTS_WITH(x, 'hi_') GROUP BY x ORDER BY x;
PRAGMA x;
SELECT COUNT(*) FROM x;
CREATE OR REPLACE TABLE x AS (SELECT * AS x FROM x);
CREATE OR REPLACE TABLE x AS (SELECT 1 AS x);
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1);
INSERT INTO x VALUES (2);
SELECT * FROM x WHERE x IN ('1', '2', 'y');
SELECT CAST(x AS TEXT) IN ('1', CAST(x AS TEXT)) FROM (VALUES (1, 2), (2, 3)) AS x;
SELECT CAST(x AS BIGINT) IN (CAST(1 AS BIGINT), x) FROM (VALUES (CAST(1 AS INT), CAST(2 AS BIGINT)), (CAST(2 AS INT), CAST(3 AS BIGINT))) AS x;
PRAGMA x = 'optimized_only';
WITH x AS (SELECT CAST(x AS INT), CAST(x AS INT) FROM (VALUES ('1', '4'), ('5', '3'), ('2', '*'), ('3', '8'), ('7', '*')) AS x WHERE STRPOS(x, '*') = 0) SELECT x, x FROM x WHERE x < x;
WITH x AS (SELECT CAST(x AS TEXT), CAST(x AS TEXT) FROM (VALUES (1, 2), (3, 3), (5, 6), (7, 6)) AS x WHERE x <= x) SELECT x, x FROM x WHERE x[1] = '1';
CREATE OR REPLACE TABLE x AS SELECT * FROM (VALUES ('a0'), ('a1'), ('a2'), ('xxx-0'), ('xxx-1'), ('xxx-2'), ('xxx-3'), ('xxxx'), ('xxx0'), ('xxx1'), ('xxx2'), ('xxx3')) AS x, x AS x;
SELECT CAST(x[2 : ] AS INT) AS x FROM x WHERE x[1 : 3] <> 'xxx' AND x = 0 LIMIT 5;
PRAGMA x;
CREATE TABLE x AS SELECT x + 100 AS x FROM x AS x;
SELECT * FROM x WHERE x = 6;
SELECT * FROM x WHERE x = 200000;
SELECT * FROM x WHERE x IN (SELECT x FROM x ORDER BY x DESC LIMIT 10) ORDER BY x;
SELECT * FROM x WHERE x IN (6, 9) ORDER BY ALL;
SELECT * FROM x WHERE x = 6 OR x = 9 ORDER BY ALL;
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
SELECT * FROM x ORDER BY x DESC LIMIT 5;
SELECT * FROM x WHERE x IN (SELECT x FROM x ORDER BY x DESC LIMIT 5);
SELECT * FROM x WHERE x % 20000 = 0;
SELECT * FROM x WHERE x IN (SELECT x FROM x WHERE x % 20000 = 0);
CREATE TABLE x AS SELECT -1 AS x FROM x;
SELECT x.x FROM x;
SELECT CAST(CAST(x.x AS BIT) AS INT), (1 BETWEEN -1 AND CAST(CAST(x.x AS BIT) AS INT)) FROM x;
SELECT CAST(CAST(x AS BIT) AS INT) AS x, 1 BETWEEN -1 AND CAST(CAST(x AS BIT) AS INT) AS x FROM x;
SELECT x.x FROM x WHERE (1 BETWEEN -1 AND CAST(CAST(x.x AS BIT) AS INT));
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3);
PRAGMA x = 'OPTIMIZED_ONLY';
SELECT COUNT(*), COUNT(), COUNT(x) FROM x;
SELECT COUNT(*), COUNT(), SUM(x), COUNT(x), SUM(x) / COUNT(x) FROM x;
INSERT INTO x VALUES (NULL);
SELECT COUNT(*), COUNT(), SUM(x), COUNT(x), SUM(x) / COUNT(x) FROM x;
CREATE TABLE x (x INT, x INT, x INT, x INT);
INSERT INTO x VALUES (1, 1, 2, 3), (1, 2, 4, 6), (2, 1, 2, 3), (2, 3, 6, 9);
SELECT CAST(SUM(x) AS DOUBLE) / CAST(COUNT(x) AS DOUBLE) AS x, CAST(SUM(x) AS DOUBLE) / CAST(COUNT(x) AS DOUBLE) AS x, CAST(SUM(x) AS DOUBLE) / CAST(COUNT(x) AS DOUBLE) AS x FROM x GROUP BY x ORDER BY x;
PRAGMA x;
WITH x AS (SELECT '2023-08-17T23:00:08.539Z' AS x) SELECT * FROM x WHERE CAST(x AS TIME) BETWEEN CAST('22:00:00' AS TIME) AND CAST('23:59:59' AS TIME);
CREATE TABLE x (x TIMESTAMP);
INSERT INTO x VALUES ('2016-02-14 18:00:05'), ('2016-02-15 10:04:25'), ('2016-02-16 10:04:25'), ('2016-02-16 23:59:55');
SELECT x FROM x WHERE CAST(x AS TIME) = CAST('10:04:25' AS TIME) ORDER BY 1;
SET x = 'nulls_first';
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3), (NULL);
SELECT x FROM x WHERE (x = 1 AND x > 0) OR (x = 1 AND x < 3) ORDER BY x;
SELECT x FROM x WHERE (x = 1) OR (x = 1) ORDER BY x;
SELECT x FROM x WHERE (x = 1) OR (x = 1) OR (x = 1) OR (x = 1) OR (x = 1) ORDER BY x;
SELECT x FROM x WHERE (x IS NULL AND x = 1) OR (x IS NULL AND x < 10) ORDER BY x;
SELECT x FROM x WHERE (NOT x IS NULL AND x > 1) OR (NOT x IS NULL AND x < 10) ORDER BY x;
SELECT x FROM x WHERE (x IS NULL AND (x + 1) IS NULL) OR (x IS NULL AND (x + 2) IS NULL) ORDER BY x;
SELECT x FROM x WHERE x = 1 OR 1 = 1 ORDER BY x;
SELECT x FROM x WHERE x = 1 OR 1 = 0 OR 1 = 1 ORDER BY x;
SELECT x FROM x WHERE (x = 1 OR 1 = 0 OR x = 1) AND (0 = 1 OR 1 = 0 OR 1 = 1) ORDER BY x;
SELECT (x = 1 AND x > 0) OR (x = 1 AND x < 3) FROM x ORDER BY x;
SELECT (x = 1) OR (x = 1) FROM x ORDER BY x;
SELECT (x = 1) OR (x = 1) OR (x = 1) OR (x = 1) OR (x = 1) FROM x ORDER BY x;
SELECT (x IS NULL AND x = 1) OR (x IS NULL AND x < 10) FROM x ORDER BY x;
SELECT (NOT x IS NULL AND x > 1) OR (NOT x IS NULL AND x < 10) FROM x ORDER BY x;
SELECT (x IS NULL AND (x + 1) IS NULL) OR (x IS NULL AND (x + 2) IS NULL) FROM x ORDER BY x;
SET x = 'nulls_first';
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (42);
SELECT (x * 2) + (x * 2) FROM x;
SELECT (x * 2) + (x * 2) + (x * 2) + (x * 2) + (x * 2) FROM x;
SELECT (x * 2) + (x * 2) + (x * 2) + (x * 2) + (x * 2), x FROM x;
SELECT SUM((x * 2) + (x * 2) + (x * 2) + (x * 2) + (x * 2)) FROM x;
SELECT x, SUM((x * 2) + (x * 2) + (x * 2) + (x * 2) + (x * 2)) FROM x GROUP BY x;
SELECT * FROM x WHERE ((x * 2) + (x * 2)) > 100;
SELECT * FROM x WHERE ((x * 2) + (x * 2) + (x * 2) + (x * 2) + (x * 2)) > 400;
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('hello'), ('world'), (NULL);
SELECT SUBSTRING(x, 1, 3) = SUBSTRING(x, 1, 3) FROM x ORDER BY 1;
SELECT SUBSTRING(x, 1, 3) = SUBSTRING(x, 1, 3) AS x FROM x GROUP BY x ORDER BY x;
PRAGMA x;
CREATE TABLE x (x DATE);
INSERT INTO x VALUES (CAST('1992-02-10' AS DATE));
SELECT CAST('2020-02-20' AS DATE) - CAST(MIN("x"."x") AS DATE) AS "x" FROM x AS "x" HAVING CAST('2020-02-20' AS DATE) - CAST(MIN("x"."x") AS DATE) > 4 ORDER BY "x" ASC;
PRAGMA x;
PRAGMA x = 'PHYSICAL_ONLY';
CREATE TABLE x (x INT, x INT, x INT);
INSERT INTO x VALUES (1, 1, 3), (2, 2, 4), (NULL, NULL, NULL);
SELECT x FROM x WHERE (x = x) OR (x IS NULL AND x IS NULL);
SELECT x FROM x WHERE x IS NOT DISTINCT FROM x;
SELECT x FROM x WHERE (x IS NULL AND x IS NULL) OR (x = x);
SELECT x.x FROM x AS x, x AS x WHERE (x.x = x.x) OR (x.x IS NULL AND x.x IS NULL) ORDER BY 1;
SELECT x FROM x WHERE (x = x) OR (x IS NULL AND x IS NULL);
SELECT x FROM x WHERE (x = x) OR (x IS NULL AND x = 1);
SELECT x.x FROM x AS x, x AS x WHERE (x.x = x.x) OR (x.x IS NULL AND x.x IS NULL);
SELECT x.x FROM x AS x, x AS x WHERE (x.x = x.x) OR (x.x IS NULL AND x.x IS NULL);
PRAGMA x;
SELECT MAX(DISTINCT x) FROM x AS x;
SELECT x, MAX(DISTINCT x) OVER (ORDER BY x DESC) FROM x AS x;
PRAGMA x;
CREATE TABLE x (x TIMESTAMP);
INSERT INTO x (x) VALUES ('2024-08-09 14:48:00');
SELECT CAST(x AS DATE) IN ('2024-08-09') AS x FROM x;
SELECT NOT (CAST(x AS DATE) IN ('2024-08-09')) FROM x;
SELECT NOT CAST(x AS DATE) IN ('2024-08-09') FROM x;
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (42, 10), (43, 100);
SELECT x + 0 FROM x;
SELECT 0 + x FROM x;
SELECT x - 0 FROM x;
SELECT 0 - x FROM x;
SELECT x * 1 FROM x;
SELECT 1 * x FROM x;
SELECT x * 0 FROM x;
SELECT 0 * x FROM x;
SELECT x / 1 FROM x;
SELECT 1 // x FROM x;
SELECT x // 0 FROM x;
SELECT 0 // x FROM x;
UPDATE x SET x = NULL;
SELECT x * 0 FROM x;
SELECT x * 0 FROM x;
SELECT 0 / x FROM x;
SET x = FALSE;
SELECT 0 / x FROM x;
PRAGMA x;
CREATE OR REPLACE TABLE x (x TEXT);
INSERT INTO x VALUES ('2024-05-03 01:00:00'), ('2024-05-03 01:00:02');
SELECT x, CAST(x AS TIMESTAMP) FROM x WHERE CAST(x AS TIMESTAMP) > CAST('2024-05-03 01:00:00' AS TIMESTAMP);
TRUNCATE TABLE x;
INSERT INTO x VALUES ('2024-05-03T01:00:00+00:00'), ('2024-05-03T01:00:02+00:00');
SELECT x, CAST(x AS TIMESTAMP) FROM x WHERE CAST(x AS TIMESTAMP) > CAST('2024-05-03 01:00:00' AS TIMESTAMP);
SELECT x, CAST(x AS TIMESTAMP) FROM x WHERE CAST(x AS TIMESTAMP) > CAST('2024-05-03T01:00:00+00:00' AS TIMESTAMP);
SELECT * FROM (SELECT x, CAST(x AS TIMESTAMP) AS x FROM x) WHERE x > CAST('2024-05-03 01:00:00' AS TIMESTAMP);
CREATE TABLE x (x INT, x STRUCT(x INT, x BOOLEAN));
INSERT INTO x VALUES (1, {'x': 42, 'x': TRUE}), (2, NULL), (3, {'x': 84, 'x': NULL}), (4, {'x': NULL, 'x': FALSE});
COPY x TO '__TEST_DIR__/struct_pushdown_test.parquet';
COPY x TO '__TEST_DIR__/struct_pushdown_test.parquet';
CREATE TABLE x (x INT, x STRUCT(x STRUCT(x TEXT, x INT), x STRUCT(x INT, x BOOLEAN)));
INSERT INTO x VALUES (1, {'x': {'x': 'Row 1', 'x': 1}, 'x': {'x': 42, 'x': TRUE}}), (2, NULL), (3, {'x': {'x': 'Row 3', 'x': 3}, 'x': {'x': 84, 'x': NULL}}), (4, {'x': NULL, 'x': {'x': NULL, 'x': FALSE}});
COPY x TO '__TEST_DIR__/nested_struct_pushdown_test.parquet' WITH (foreach source, nested_struct_pushdown_test READ_PARQUET('__TEST_DIR__/nested_struct_pushdown_test.parquet'));
CREATE OR REPLACE TABLE x (x INT, x STRUCT(x STRUCT(x STRUCT(x TEXT, x INT), x STRUCT(x INT, x BOOLEAN))));
INSERT INTO x VALUES (1, {'x': {'x': {'x': 'Row 1', 'x': 1}, 'x': {'x': 42, 'x': TRUE}}}), (2, NULL), (3, {'x': {'x': {'x': 'Row 3', 'x': 3}, 'x': {'x': 84, 'x': NULL}}}), (4, {'x': {'x': NULL, 'x': {'x': NULL, 'x': FALSE}}});
COPY x TO '__TEST_DIR__/nested_struct_pushdown_test.parquet' WITH (foreach source, nested_struct_pushdown_test READ_PARQUET('__TEST_DIR__/nested_struct_pushdown_test.parquet'));
PRAGMA x;
CREATE TABLE x AS SELECT x FROM (VALUES ('pedro'), ('peter'), ('mark')) AS x, x AS x ORDER BY x;
SELECT COUNT(x) FROM x WHERE x = 'pedro';
SELECT COUNT(x) FROM x WHERE x = 'peter';
SELECT COUNT(x) FROM x WHERE x = 'mark';
SELECT COUNT(x) FROM x WHERE x = 'diego';
INSERT INTO x VALUES ('po');
INSERT INTO x VALUES ('stefan manegold');
INSERT INTO x VALUES ('tim k');
INSERT INTO x VALUES ('tim k');
UPDATE x SET x = 'zorro' WHERE x = 'pedro';
SELECT COUNT(x) FROM x WHERE x >= 'tim k';
PRAGMA x = 'optimized_only';
SET x = 'build_side_probe_side';
SET x = 'nulls_first';
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3), (NULL);
SELECT * FROM x AS x, x AS x WHERE x.x = x.x ORDER BY 1;
SELECT * FROM x AS x, x AS x WHERE x.x = x.x AND x.x > 1 ORDER BY 1;
SELECT * FROM x AS x, x AS x, x AS x WHERE x.x = x.x AND x.x = x.x AND x.x > 1 ORDER BY 1;
SELECT * FROM x AS x JOIN x AS x ON x.x = x.x WHERE x.x > 1 ORDER BY 1;
SELECT * FROM x AS x LEFT OUTER JOIN x AS x ON 1 = 1 WHERE x.x > 2 ORDER BY 2;
SELECT * FROM x AS x LEFT OUTER JOIN x AS x ON 1 = 0 WHERE NOT x.x IS NULL ORDER BY 2;
SELECT * FROM x AS x LEFT OUTER JOIN x AS x ON 1 = 0 WHERE x.x > 1 ORDER BY 2;
SELECT * FROM x AS x LEFT OUTER JOIN x AS x ON 1 = 0 WHERE CASE WHEN x.x IS NULL THEN FALSE ELSE TRUE END ORDER BY 2;
SELECT DISTINCT * FROM x AS x LEFT OUTER JOIN x AS x ON 1 = 0 WHERE x.x IS NULL ORDER BY 1;
SELECT * FROM x AS x LEFT OUTER JOIN x AS x ON 1 = 1 WHERE x.x = x.x ORDER BY 1;
SELECT * FROM x WHERE x IN ((SELECT * FROM x)) ORDER BY x;
SELECT * FROM x WHERE NOT x IN ((SELECT * FROM x WHERE x = 1)) ORDER BY x;
SELECT * FROM x WHERE x IN ((SELECT * FROM x)) AND x < 3 ORDER BY x;
SELECT * FROM x AS x, x AS x WHERE x.x IN ((SELECT * FROM x)) AND x.x = x.x ORDER BY 1;
SELECT * FROM x AS x WHERE EXISTS(SELECT x FROM x WHERE x = x.x) ORDER BY x.x;
SELECT * FROM x AS x WHERE NOT EXISTS(SELECT x FROM x WHERE x = x.x) ORDER BY x.x;
SELECT * FROM x AS x, x AS x WHERE x.x = (SELECT x FROM x WHERE x.x = x) AND x.x = x.x ORDER BY x.x;
SELECT * FROM (SELECT x.x AS x, x.x AS x FROM x AS x, x AS x) AS x WHERE x = x ORDER BY 1;
SELECT * FROM (SELECT x.x = x.x AS x FROM x AS x, x AS x) AS x WHERE x ORDER BY 1;
SELECT * FROM (SELECT DISTINCT x.x AS x, x.x AS x FROM x AS x, x AS x) AS x WHERE x = 1 AND x = 3;
SELECT * FROM (SELECT * FROM x AS x UNION SELECT * FROM x AS x) AS x WHERE x = 3;
SELECT * FROM (SELECT x.x AS x, x.x AS x, ROW_NUMBER() OVER (ORDER BY x.x, x.x) FROM x AS x, x AS x WHERE NOT x.x IS NULL AND NOT x.x IS NULL) AS x WHERE x = x ORDER BY 1;
SELECT * FROM (SELECT 0 = 1 AS x FROM x AS x, x AS x) AS x WHERE x ORDER BY 1;
SELECT * FROM (SELECT 0 = 1 AS x FROM x AS x, x AS x GROUP BY 1) AS x WHERE x ORDER BY 1;
CREATE TABLE x AS SELECT x AS x, x AS x FROM x AS x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x SELECT * FROM x;
SELECT COUNT(*) FROM (SELECT * FROM x, x) AS x, (SELECT * FROM x, x) AS x WHERE x.x + 1 = 5001 AND x.x <> 5000;
SELECT COUNT(*) FROM (SELECT * FROM x, x) AS x, (SELECT * FROM x, x) AS x WHERE x.x - 1 = 4999 AND x.x <> 5000;
SELECT COUNT(*) FROM (SELECT * FROM x, x) AS x, (SELECT * FROM x, x) AS x WHERE x.x * 2 = 10000 AND x.x <> 5000;
SELECT COUNT(*) FROM (SELECT * FROM x, x) AS x, (SELECT * FROM x, x) AS x WHERE -x.x = -5000 AND x.x <> 5000;
CREATE TABLE x AS SELECT x AS x, x AS x FROM x AS x;
CREATE TABLE x (x INT, x INT);
CREATE TABLE x AS SELECT x AS x, x AS x FROM x AS x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x SELECT * FROM x;
SELECT x, x FROM (SELECT x, x FROM x, x) AS x WHERE x = x AND x < 5 ORDER BY x;
SELECT x, x FROM (SELECT DISTINCT x, x FROM x, x) AS x WHERE x = x AND x < 5 ORDER BY x;
SELECT x, x, SUM(x) FROM x, x GROUP BY x, x HAVING x = x AND x < 5 ORDER BY x;
SELECT x, x, SUM(x) FROM (SELECT * FROM x, x) AS x GROUP BY x, x HAVING x = x AND x < 5 ORDER BY x;
SELECT x, x, x FROM (SELECT x, x, SUM(x) AS x FROM x, x GROUP BY x, x) AS x WHERE x = x AND x < 5 ORDER BY x;
SELECT * FROM x LEFT OUTER JOIN x ON 1 = 1 WHERE x = x AND x = 5;
SELECT * FROM x LEFT OUTER JOIN x ON 1 = 1 WHERE x = x ORDER BY x LIMIT 5;
SELECT * FROM (SELECT * FROM x, x WHERE x = 5 AND x = 5) AS x LEFT OUTER JOIN (SELECT * FROM x, x) AS x ON x.x = x.x AND x.x = x.x WHERE x.x = 5 AND x.x = 5;
SELECT * FROM (SELECT * FROM x, x) AS x LEFT OUTER JOIN (SELECT * FROM x, x WHERE x = 5 AND x = 10) AS x ON x.x = x.x AND x.x = x.x WHERE x.x = 5 AND x.x = 10;
SELECT * FROM (SELECT * FROM x, x WHERE x = 5 AND x = 5) AS x LEFT OUTER JOIN (SELECT * FROM x, x) AS x ON x.x = 5 AND x.x = 5;
SELECT * FROM (SELECT * FROM x, x WHERE x = 5 AND x = 5) AS x LEFT OUTER JOIN (SELECT * FROM x, x) AS x ON x.x > 10000 AND x.x = 5;
SELECT * FROM (SELECT * FROM x, x) AS x LEFT OUTER JOIN (SELECT * FROM x, x) AS x ON x.x = x.x AND x.x = x.x WHERE x.x = 5 AND x.x = 10;
SELECT * FROM (SELECT * FROM x, x) AS x LEFT OUTER JOIN (SELECT * FROM x, x) AS x ON x.x = x.x AND x.x = x.x WHERE x.x > 4 AND x.x < 6 AND x.x = 10;
SELECT * FROM (SELECT * FROM x, x UNION SELECT * FROM x, x) AS x WHERE x = 3 AND x = 5;
SELECT * FROM (SELECT * FROM x, x EXCEPT SELECT * FROM x, x) AS x WHERE x = 3 AND x = 5;
SELECT * FROM (SELECT * FROM x, x EXCEPT SELECT * FROM x, x WHERE x <> 1) AS x WHERE x < 5 AND x < 5 ORDER BY 1, 2, 3, 4;
SELECT * FROM (SELECT * FROM x, x INTERSECT SELECT * FROM x, x) AS x WHERE x = 3 AND x = 5;
SELECT * FROM (SELECT 0 = 1 AS x FROM x, x) AS x WHERE x ORDER BY 1;
SELECT * FROM (SELECT 1 AS x FROM x, x) AS x WHERE x = 0 ORDER BY 1;
SELECT * FROM (SELECT 0 = 1 AS x FROM x, x GROUP BY 1) AS x WHERE x ORDER BY 1;
SELECT * FROM (SELECT 1 AS x FROM x, x GROUP BY x) AS x WHERE x = 0 ORDER BY 1;
SELECT COUNT(*) FROM (SELECT * FROM x, x) AS x, (SELECT * FROM x, x) AS x WHERE x.x = x.x AND x.x = x.x AND x.x = x.x AND x.x = 5000;
SELECT COUNT(*) FROM (SELECT * FROM x, x) AS x, (SELECT * FROM x, x) AS x WHERE x.x = x.x AND x.x = x.x AND x.x = x.x AND x.x > 4999 AND x.x < 5001;
SELECT COUNT(*) FROM (SELECT * FROM x, x) AS x, (SELECT * FROM x, x) AS x WHERE x.x = 5000 AND x.x <> 5000;
SELECT COUNT(*) FROM (SELECT * FROM x, x) AS x, (SELECT * FROM x, x) AS x WHERE x.x = 5000 AND x.x = x.x AND x.x <> 5000;
SELECT COUNT(*) FROM (SELECT * FROM x, x) AS x, (SELECT * FROM x, x) AS x WHERE x.x = 5000 AND x.x = x.x AND x.x = x.x AND x.x = x.x AND x.x <> 5001;
SELECT COUNT(*) FROM (SELECT * FROM x, x) AS x, (SELECT * FROM x, x) AS x WHERE x.x > 10 AND x.x >= 500 AND x.x < 7000 AND x.x <= 6000 AND x.x <> 8000 AND x.x <> 4000 AND x.x = x.x AND x.x = x.x AND x.x = x.x AND x.x = 5000;
PRAGMA x = 'OPTIMIZED_ONLY';
PRAGMA x;
CREATE TABLE x AS SELECT x AS x, x AS x FROM x AS x;
SELECT x FROM x WHERE x = 99;
SELECT x FROM x WHERE x = 99 AND x = 99;
SELECT x FROM x WHERE x = 99 AND x = 90;
SELECT COUNT(x) FROM x WHERE x > 90 AND x < 95;
SELECT COUNT(x) FROM x WHERE x > 90 AND x < 95;
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (11, 1), (12, 2), (13, 3);
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 10), (1, 20), (2, 30);
SELECT COUNT(*) FROM x, x WHERE x.x = x.x;
SELECT SUM(x.x), MIN(x.x), MAX(x.x) FROM x, x WHERE x.x = x.x;
SELECT COUNT(*) FROM x AS x, x AS x, x AS x WHERE x.x = x.x AND x.x = x.x;
SELECT SUM(x.x) FROM x AS x, x AS x, x AS x WHERE x.x = x.x AND x.x = x.x;
SELECT COUNT(*) FROM x AS x, x AS x, x AS x WHERE x.x = x.x AND x.x = x.x AND x.x = 11 AND x.x = 11 AND x.x = 11;
SELECT (TRUE OR x.x = x.x) FROM x AS x, x AS x WHERE x.x = 11 AND x.x >= 10;
PRAGMA x;
CREATE TABLE x (x INT128);
INSERT INTO x VALUES (CAST((-170141183460469231731687303715884105728) AS INT128)), (-CAST(1111 AS INT128)), (-CAST(1 AS INT128)), (CAST(0 AS INT128)), (CAST(1 AS INT128)), (CAST(1111 AS INT128));
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x DESC;
PRAGMA x;
CREATE TABLE x (x INT, x SMALLINT[][][][][][]);
INSERT INTO x VALUES (1000000000, NULL), (1000000001, [[[[[[]]]]]]), (NULL, [[[[[[]]]]]]), (NULL, [[[[[[]]]]]]), (1, [[[[[[]]]]]]);
SELECT x, x FROM x ORDER BY x, x;
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (3, 3);
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 10), (2, 20);
SELECT x, x, x, x FROM x FULL OUTER JOIN x ON x.x = x.x ORDER BY ALL LIMIT 2;
SELECT COUNT(*) FROM (SELECT x, x, x, x FROM x FULL OUTER JOIN x ON x.x = x.x LIMIT 2) AS x;
PRAGMA x;
SELECT * FROM x AS x ORDER BY x DESC LIMIT 5;
CREATE TABLE x AS SELECT 5 AS x;
SELECT * FROM x AS x ORDER BY x DESC LIMIT (SELECT x FROM x);
CREATE TABLE x AS SELECT CAST('5' AS TEXT) AS x;
SELECT * FROM x AS x ORDER BY x DESC LIMIT (SELECT x FROM x);
CREATE TABLE x AS SELECT 0.05 AS x;
CREATE TABLE x AS SELECT 0.05 AS x;
PRAGMA x;
SELECT * FROM x UNION ALL SELECT * FROM x LIMIT 7;
SELECT COUNT(*) FROM (SELECT * FROM x UNION ALL SELECT * FROM x LIMIT 7) AS x;
PRAGMA x;
SELECT * FROM x LIMIT 3 OFFSET -1;
SELECT * FROM x LIMIT -3;
SELECT * FROM x LIMIT -3;
CREATE TABLE x AS SELECT -1 AS x;
SELECT * FROM x LIMIT (SELECT x FROM x);
SELECT * FROM x LIMIT 1 OFFSET (SELECT x FROM x);
SET x = 'nulls_first';
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (0, 1), (0, 2), (1, 3), (1, NULL);
SELECT * FROM x ORDER BY ALL;
SELECT * FROM x ORDER BY * DESC;
SELECT * FROM x ORDER BY * DESC;
SELECT * FROM x UNION ALL SELECT * FROM x ORDER BY ALL;
SELECT * FROM x UNION SELECT * FROM x ORDER BY ALL;
SELECT 42 ORDER BY -9223372036854775808;
SET x = 'nulls_first';
PRAGMA x;
PRAGMA x = 3;
PRAGMA x = 3;
PRAGMA x = 3;
PRAGMA x = '${mem}MB';
CREATE TABLE x AS (SELECT x AS x FROM x);
INSERT INTO x VALUES (NULL);
SELECT * FROM x ORDER BY CAST(x AS TEXT) NULLS FIRST;
SELECT * FROM x ORDER BY x % 10, CAST(x AS TEXT);
SELECT * FROM x ORDER BY CAST(x % 10 AS TEXT), x;
SELECT * FROM x ORDER BY CAST(x % 100 AS TEXT), x % 10, CAST(x AS TEXT) NULLS FIRST;
SELECT * FROM x ORDER BY CAST(x % 1000 AS TEXT), x % 100, CAST(x % 10 AS TEXT), x;
SELECT * FROM x ORDER BY x % 100, CAST(x % 10 AS TEXT), CAST(x AS TEXT);
SELECT * FROM x ORDER BY CAST(x % 1000 AS TEXT), x % 100, x % 10, CAST(x AS TEXT);
PRAGMA x;
PRAGMA x = '1TB';
PRAGMA x;
SELECT * FROM x QUALIFY NOT (x > LAG(x) OVER () OR LAG(x) OVER () IS NULL);
SELECT * FROM x QUALIFY NOT (x > LAG(x) OVER () OR LAG(x) OVER () IS NULL);
CREATE TABLE x AS WITH x AS (SELECT x FROM x ORDER BY x), x AS (SELECT x + 100000 FROM x ORDER BY x) SELECT * FROM x UNION ALL SELECT * FROM x AS x;
SELECT * FROM x QUALIFY NOT (x > LAG(x) OVER () OR LAG(x) OVER () IS NULL);
PRAGMA x;
PRAGMA x = 3;
CREATE TABLE x AS (SELECT x AS x FROM x ORDER BY x DESC);
SELECT * FROM x ORDER BY x ASC;
SELECT * FROM x ORDER BY x ASC;
SELECT * FROM x ORDER BY x ASC;
PRAGMA x = '${mem}MB';
CREATE TABLE x AS (SELECT x AS x FROM x);
SELECT * FROM x ORDER BY x DESC;
SELECT CAST(x AS TEXT) FROM x ORDER BY x DESC;
SELECT CAST(x + 1000000000000 AS TEXT) FROM x ORDER BY x DESC;
SET x = 'nulls_first';
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x = '${mem}MB';
CREATE TABLE x AS (SELECT x AS x FROM x);
INSERT INTO x VALUES (NULL);
SELECT * FROM x ORDER BY CAST(x + 1000000000000 AS TEXT) NULLS FIRST;
SELECT * FROM x ORDER BY x % 10, CAST(x + 1000000000000 AS TEXT);
SELECT * FROM x ORDER BY CAST(x % 10 + 1000000000000 AS TEXT), x;
SELECT * FROM x ORDER BY CAST(x % 100 + 1000000000000 AS TEXT), x % 10, CAST(x + 1000000000000 AS TEXT) NULLS FIRST;
SELECT * FROM x ORDER BY CAST(x % 1000 + 1000000000000 AS TEXT), x % 100, CAST(x % 10 + 1000000000000 AS TEXT), x;
SELECT * FROM x ORDER BY x % 100, CAST(x % 10 + 1000000000000 AS TEXT), CAST(x + 1000000000000 AS TEXT);
SELECT * FROM x ORDER BY CAST(x % 1000 + 1000000000000 AS TEXT), x % 100, x % 10, CAST(x + 1000000000000 AS TEXT);
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x = '${mem}MB';
CREATE TABLE x AS (SELECT x AS x FROM x);
SELECT x FROM x ORDER BY CAST(x AS TEXT) DESC;
SELECT x FROM x ORDER BY [x] DESC;
SELECT x FROM x ORDER BY [0, x] DESC;
SELECT x FROM x ORDER BY {'x': x} DESC;
SELECT x FROM x ORDER BY {'x': 0, 'x': x} DESC;
SELECT x FROM x ORDER BY CAST(x + 1000000000000 AS TEXT) DESC;
PRAGMA x;
CREATE TABLE x AS SELECT * FROM x;
SELECT * FROM x ORDER BY x;
SELECT * FROM x WHERE JACCARD(x, 'BATMAN') >= 0.4 ORDER BY JACCARD(x, 'BATMAN');
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (11, 22), (12, 21), (13, 22);
SELECT x FROM x LIMIT 1;
SELECT x FROM x LIMIT 1.25;
SELECT x FROM x LIMIT 2 - 1;
SELECT x FROM x LIMIT x;
SELECT x FROM x LIMIT x + 1;
SELECT x FROM x LIMIT SUM(42);
SELECT x FROM x LIMIT ROW_NUMBER() OVER ();
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('Hello World');
SELECT 1 LIMIT CAST('1992-01-01' AS DATE);
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3), (4), (5);
CREATE SEQUENCE x;
PRAGMA x;
SELECT * FROM x LIMIT NEXTVAL('seq');
SELECT * FROM x LIMIT NEXTVAL('seq');
SELECT * FROM x LIMIT RANDOM();
SELECT * FROM x AS x LIMIT (SELECT MIN(x.x) FROM x);
CREATE SEQUENCE x;
SELECT * FROM x OFFSET NEXTVAL('of_seq');
SELECT * FROM x OFFSET NEXTVAL('of_seq');
SELECT * FROM x OFFSET RANDOM();
SELECT * FROM x AS x OFFSET (SELECT MIN(x.x) FROM x);
SELECT * FROM x AS x LIMIT (SELECT MAX(x.x) FROM x) OFFSET (SELECT MIN(x.x) FROM x);
SELECT * FROM x AS x LIMIT (SELECT MAX(x.x) FROM x WHERE x > 5);
SELECT * FROM x AS x LIMIT (SELECT MAX(x.x) FROM x WHERE x > 5);
SELECT * FROM x AS x LIMIT (SELECT NULL);
SELECT * FROM x AS x LIMIT (SELECT -1);
SELECT * FROM x AS x LIMIT (SELECT 'ab');
CREATE OR REPLACE TABLE x AS SELECT x AS x FROM x;
PRAGMA x;
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x OFFSET 5;
SELECT * FROM x ORDER BY x OFFSET (SELECT 5);
SELECT * FROM x ORDER BY x LIMIT (SELECT 5);
SELECT * FROM x ORDER BY x LIMIT (SELECT 3) OFFSET (SELECT 3);
SELECT * FROM x ORDER BY x LIMIT 3 OFFSET (SELECT 3);
SELECT * FROM x ORDER BY x LIMIT (SELECT 3) OFFSET 3;
SELECT * FROM x ORDER BY x LIMIT (SELECT -1);
SELECT * FROM x ORDER BY x OFFSET (SELECT -1);
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3), (4), (5), (6), (7);
SELECT * FROM x ORDER BY ALL OFFSET (SELECT DISTINCT 6.5 FROM (SELECT 1) AS x UNION ALL SELECT 3);
SET x = FALSE;
SELECT * FROM x ORDER BY ALL OFFSET (SELECT DISTINCT 6.5 FROM (SELECT 1) AS x UNION ALL SELECT 3);
PRAGMA x;
WITH x AS (SELECT 3) SELECT * FROM x LIMIT (SELECT * FROM x);
WITH x AS (SELECT 3) SELECT * FROM x LIMIT (SELECT * FROM x) OFFSET (SELECT * FROM x);
PRAGMA x;
SELECT 'Test' LIMIT ?;
SET x = 'nulls_first';
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (11, 22), (12, 21), (13, 22), (14, 32), (15, 52);
INSERT INTO x VALUES (11, 22), (12, 21), (13, 22), (14, 32), (15, 52);
INSERT INTO x VALUES (11, 22), (12, 21), (13, 22), (14, 32), (15, 52);
INSERT INTO x VALUES (11, 22), (12, 21), (13, 22), (14, 32), (15, 52);
INSERT INTO x VALUES (11, 22), (12, 21), (13, 22), (14, 32), (15, 52);
INSERT INTO x VALUES (11, 22), (12, 21), (13, 22), (14, 32), (15, 52);
INSERT INTO x VALUES (11, 22), (12, 21), (13, 22), (14, 32), (15, 52);
INSERT INTO x VALUES (11, 22), (12, 21), (13, 22), (14, 32), (15, 52);
INSERT INTO x VALUES (11, 22), (12, 21), (13, 22), (14, 32), (15, 52);
INSERT INTO x VALUES (11, 22), (12, 21), (13, 22), (14, 32), (15, 52);
INSERT INTO x VALUES (11, 22), (12, 21), (13, 22), (14, 32), (15, 52);
INSERT INTO x VALUES (11, 22), (12, 21), (13, 22), (14, 32), (15, 52);
INSERT INTO x VALUES (11, 22), (12, 21), (13, 22), (14, 32), (15, 52);
INSERT INTO x VALUES (11, 22), (12, 21), (13, 22), (14, 32), (15, 52);
INSERT INTO x VALUES (11, 22), (12, 21), (13, 22), (14, 32), (15, 52);
INSERT INTO x VALUES (11, 22), (12, 21), (13, 22), (14, 32), (15, 52);
INSERT INTO x VALUES (11, 22), (12, 21), (13, 22), (14, 32), (15, 52);
INSERT INTO x VALUES (11, 22), (12, 21), (13, 22), (14, 32), (15, 52);
INSERT INTO x VALUES (11, 22), (12, 21), (13, 22), (14, 32), (15, 52);
SELECT x FROM x LIMIT 50 % OFFSET(((SELECT MIN(x) FROM x) - 1) / 10);
SELECT x FROM x LIMIT 70 % OFFSET(((SELECT MIN(x.x) FROM x) - 1) / 10);
SELECT x FROM x LIMIT 70 % OFFSET(((SELECT MIN(x.x) FROM x) - 1) / 10);
SELECT x FROM x LIMIT 70 % OFFSET(((SELECT MIN(x.x) FROM x) - 1) / 10);
SELECT x FROM x LIMIT 70 % OFFSET(((SELECT MIN(x.x) FROM x) - 1) / 10);
SELECT x FROM x LIMIT 70 % OFFSET(((SELECT MIN(x.x) FROM x) - 1) / 10);
SELECT x FROM x LIMIT 70 % OFFSET(((SELECT MIN(x.x) FROM x) - 1) / 10);
SELECT x FROM x LIMIT 70 % OFFSET(((SELECT MIN(x.x) FROM x) - 1) / 10);
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('first'), ('second'), ('third'), ('4th'), ('5th');
CREATE VIEW x AS SELECT x % 5 AS x, LIST(CASE WHEN x = 6 OR x = 8 THEN NULL ELSE x END) AS x FROM x AS x GROUP BY x;
CREATE VIEW x AS SELECT x % 5 AS x, LIST(CASE WHEN x = 6 OR x = 8 THEN NULL ELSE x END) AS x FROM x AS x GROUP BY x;
CREATE VIEW x AS SELECT x % 5 AS x, LIST(CASE WHEN x = 6 OR x = 8 THEN NULL ELSE x END) AS x FROM x AS x GROUP BY x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (1, 2), (2, 3), (2, 4), (2, 5), (3, 6), (5, NULL);
SELECT {'x': 42, 'x': 43};
SELECT {'x': 42, 'x': 43};
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3), (4), (5);
INSERT INTO x VALUES (1), (2), (3), (4), (5);
INSERT INTO x VALUES (1), (2), (3), (4), (5);
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
SET x = 'nulls_first';
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (NULL);
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x NULLS FIRST;
SELECT * FROM x ORDER BY x;
SELECT 10 AS x, x FROM x ORDER BY x, x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (NULL, 1), (1, NULL);
SELECT * FROM x ORDER BY x NULLS FIRST, x;
SELECT * FROM x ORDER BY x NULLS FIRST, x NULLS FIRST;
SELECT * FROM x ORDER BY x, x NULLS FIRST;
SELECT x, x, ROW_NUMBER() OVER (PARTITION BY x ORDER BY x NULLS FIRST) FROM x ORDER BY x NULLS FIRST, x NULLS FIRST;
SELECT x, x, ROW_NUMBER() OVER (PARTITION BY x ORDER BY x) FROM x ORDER BY x NULLS FIRST, x NULLS FIRST;
SELECT * FROM x ORDER BY x NULLS FIRST, x LIMIT 2;
SELECT * FROM x ORDER BY x, x LIMIT 2;
SELECT * FROM x ORDER BY x;
PRAGMA x = 'NULLS LAST';
SELECT * FROM x ORDER BY x;
PRAGMA x = 'NULLS FIRST';
PRAGMA x = 'NULLS FIRST';
PRAGMA x = 'UNKNOWN';
PRAGMA x = 'UNKNOWN';
PRAGMA x = 'UNKNOWN';
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (11, 22), (12, 21), (13, 22);
SELECT x FROM x WHERE x = 12;
SELECT x FROM x ORDER BY x DESC;
SELECT x, x FROM x ORDER BY x;
SELECT x, x FROM x ORDER BY x DESC;
SELECT x, x FROM x ORDER BY x, x;
SELECT x, x FROM x ORDER BY 2, 1;
SELECT x, x FROM x ORDER BY x DESC, x;
SELECT x, x FROM x ORDER BY x, x DESC;
SELECT x, x FROM x ORDER BY x, x DESC LIMIT 1;
SELECT x, x FROM x ORDER BY x, x DESC LIMIT 1 OFFSET 1;
SELECT x, x FROM x ORDER BY x, x DESC OFFSET 1;
SELECT x, x FROM x WHERE x < 13 ORDER BY x;
SELECT x, x FROM x WHERE x < 13 ORDER BY 2;
SELECT x, x FROM x WHERE x < 13 ORDER BY x DESC;
SELECT x, x FROM x WHERE x < 13 ORDER BY x DESC;
SELECT x % 2 AS x, SUM(x) FROM x GROUP BY x ORDER BY x % 2;
SELECT x % 2 AS x, x FROM x ORDER BY x % 2, x;
SELECT x % 2 AS x, SUM(x) FROM x GROUP BY x ORDER BY x;
SELECT x % 2 AS x, SUM(x) FROM x GROUP BY x ORDER BY 1;
SELECT x - 10 AS x FROM x UNION SELECT x - 10 AS x FROM x ORDER BY x;
SELECT x - 10 AS x FROM x UNION SELECT x - 10 AS x FROM x ORDER BY x;
SELECT x - 10 AS x FROM x UNION SELECT x - 10 AS x FROM x ORDER BY 1 - x;
SELECT x - 10 AS x FROM x UNION SELECT x - 10 AS x FROM x ORDER BY x - 10;
SELECT x - 10 AS x FROM x UNION SELECT x - 11 AS x FROM x ORDER BY x - 11;
SELECT x FROM x ORDER BY 'hello world', x;
SET x = TRUE;
SELECT x FROM x ORDER BY 'hello world', x;
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (11, 22), (12, 21), (13, 22);
SELECT x FROM x ORDER BY 2;
SELECT x FROM x ORDER BY 'hello', x;
SET x = TRUE;
SELECT x FROM x ORDER BY 'hello', x;
SELECT x AS x, x FROM x UNION SELECT x, x AS x FROM x ORDER BY x;
SELECT x AS x, x FROM x UNION SELECT x AS x, x FROM x ORDER BY x;
SELECT x % 2, x FROM x UNION SELECT x, x % 2 AS x ORDER BY x % 2;
SELECT x % 2, x FROM x UNION SELECT x % 2 AS x, x FROM x ORDER BY x % 2;
SELECT x % 2, x FROM x UNION SELECT x % 2 AS x, x FROM x ORDER BY 3;
SELECT x % 2, x FROM x UNION SELECT x % 2 AS x, x FROM x ORDER BY -1;
SELECT x % 2, x FROM x UNION SELECT x % 2 AS x FROM x ORDER BY -1;
PRAGMA x;
CREATE TABLE x AS SELECT x FROM x AS x;
SELECT * FROM x ORDER BY x;
SET x = 'nulls_first';
SET x = 'nulls_first';
PRAGMA x;
PRAGMA x;
PRAGMA x;
INSERT INTO x VALUES ([2]), ([1]), ([1, 2]), ([]), ([2, 2]), ([NULL]), ([2, 3]);
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x DESC;
INSERT INTO x VALUES (NULL);
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x DESC;
SELECT * FROM x ORDER BY x DESC;
SELECT * FROM x ORDER BY x DESC;
INSERT INTO x VALUES ([[2]]), ([[1]]), ([NULL, []]), ([[1], [2]]), ([]), ([[]]), ([[2], [2]]), ([NULL]), (NULL), ([[2], [3]]);
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x DESC;
SELECT * FROM x ORDER BY x DESC;
INSERT INTO x VALUES ([[3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]]), ([[3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], []]), ([[3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], [5, 5, 5, 5, 1]]), ([[3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], [5, 5, 5, 5, NULL]]), ([[3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], [5, 5, 5, 5, 2]]), ([[3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], [NULL]]), ([[3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], NULL]);
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x DESC;
SELECT * FROM x ORDER BY x DESC;
INSERT INTO x VALUES ([[NULL, NULL, 0], [1, NULL, 1]]), ([[NULL, NULL, 1]]), ([[NULL, NULL, 0], [1, NULL, 0]]), ([[0, NULL, NULL, 1]]), ([[0, NULL, NULL, 0]]);
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x DESC;
SELECT * FROM x ORDER BY x DESC;
INSERT INTO x VALUES ({'x': 2, 'x': NULL}), ({'x': 1, 'x': NULL}), ({'x': 2, 'x': 3}), ({'x': 1, 'x': 2}), ({'x': 2, 'x': 2}), ({'x': NULL, 'x': NULL}), (NULL), ({'x': 2, 'x': 3});
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x DESC;
SELECT * FROM x ORDER BY x DESC;
INSERT INTO x VALUES ({'x': NULL}), (NULL), ({'x': {'x': NULL, 'x': 1}}), ({'x': {'x': 0, 'x': NULL}}), ({'x': {'x': NULL, 'x': NULL}}), ({'x': {'x': 0, 'x': 1}});
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x DESC;
SELECT * FROM x ORDER BY x DESC;
INSERT INTO x VALUES ({'x': 0, 'x': 1, 'x': 2, 'x': 3, 'x': 4, 'x': 5, 'x': 6, 'x': 7, 'x': 8, 'x': 8}), ({'x': 0, 'x': 1, 'x': 2, 'x': 3, 'x': 4, 'x': 5, 'x': 6, 'x': 7, 'x': 8, 'x': 9}), ({'x': 0, 'x': 1, 'x': 2, 'x': 3, 'x': NULL, 'x': NULL, 'x': NULL, 'x': NULL, 'x': 8, 'x': 8}), ({'x': 0, 'x': 1, 'x': 2, 'x': 3, 'x': NULL, 'x': NULL, 'x': NULL, 'x': NULL, 'x': 8, 'x': 9}), ({'x': 0, 'x': 1, 'x': 2, 'x': 3, 'x': 4, 'x': 5, 'x': 6, 'x': NULL, 'x': NULL, 'x': 8}), ({'x': 0, 'x': 1, 'x': 2, 'x': 3, 'x': 4, 'x': 5, 'x': 6, 'x': NULL, 'x': NULL, 'x': 9});
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x DESC;
SELECT * FROM x ORDER BY x DESC;
INSERT INTO x VALUES ([{'x': NULL}, {'x': NULL}, {'x': 0}, {'x': NULL}, {'x': NULL}, {'x': 0}]), ([{'x': NULL}, {'x': NULL}, {'x': 0}, {'x': NULL}, {'x': NULL}, {'x': 1}]), ([{'x': NULL}, {'x': NULL}, {'x': NULL}, {'x': NULL}, {'x': NULL}, {'x': 1}]), ([{'x': NULL}, {'x': NULL}, {'x': 0}, {'x': NULL}, {'x': NULL}, {'x': NULL}]), ([{'x': NULL}, {'x': NULL}, {'x': 1}, {'x': NULL}, {'x': NULL}, {'x': 0}]), ([{'x': NULL}, {'x': NULL}, {'x': 1}, {'x': NULL}, {'x': NULL}, {'x': 1}]), ([{'x': NULL}, {'x': NULL}, {'x': NULL}, {'x': NULL}, {'x': NULL}, {'x': 0}]), ([{'x': NULL}, {'x': NULL}, {'x': 1}, {'x': NULL}, {'x': NULL}, {'x': NULL}]);
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x DESC;
SELECT * FROM x ORDER BY x DESC;
INSERT INTO x VALUES ({'x': [0, NULL], 'x': [NULL, 0]}), ({'x': [0, NULL], 'x': [NULL, 1]}), ({'x': [0, NULL], 'x': [1, 2]}), ({'x': [1, NULL], 'x': [2, NULL]}), ({'x': [0, 2], 'x': [2, NULL]}), ({'x': NULL, 'x': [2, NULL]}), ({'x': [0, 2], 'x': NULL}), ({'x': NULL, 'x': [2, 3]});
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x DESC;
SELECT * FROM x ORDER BY x DESC;
INSERT INTO x VALUES ([{'x': [{'x': 0}]}, {'x': [{'x': 0}]}]), ([{'x': [{'x': 0}]}, {'x': [{'x': 1}]}]), ([{'x': [{'x': 0}]}, {'x': [{'x': 1}, {'x': 2}]}]), ([{'x': [{'x': 0}]}, {'x': [{'x': 1}, {'x': 1}]}]), ([{'x': [{'x': 1}]}, {'x': [{'x': 0}]}]), ([{'x': [{'x': 1}]}, {'x': [{'x': 1}]}]), ([{'x': [{'x': NULL}]}, {'x': [{'x': 0}]}]), ([{'x': [{'x': NULL}]}, {'x': [{'x': 1}]}]), ([{'x': [{'x': 0}]}, {'x': [{'x': NULL}]}, {'x': [{'x': NULL}]}]), ([{'x': [{'x': 1}]}, {'x': [{'x': NULL}]}, {'x': [{'x': 1}]}]), ([{'x': [{'x': 0}]}, {'x': [{'x': NULL}]}]), ([{'x': [{'x': 1}]}, {'x': [{'x': NULL}]}]), ([{'x': [{'x': 1}]}, {'x': [{'x': NULL}]}, {'x': [{'x': NULL}]}]);
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x DESC;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
INSERT INTO x VALUES ([[1.2]]), ([[1.1]]), ([NULL, []]), ([[1.1], [1.2]]), ([]), ([[]]), ([[1.2], [1.2]]), ([NULL]), (NULL), ([[1.2], [1.3]]);
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x DESC;
SELECT * FROM x ORDER BY x DESC;
INSERT INTO x VALUES ({'x': 1.2, 'x': NULL}), ({'x': 1.1, 'x': NULL}), ({'x': 1.2, 'x': 1.3}), ({'x': 1.1, 'x': 1.2}), ({'x': 1.2, 'x': 1.2}), ({'x': NULL, 'x': NULL}), (NULL), ({'x': 1.2, 'x': 1.3});
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x DESC;
SELECT * FROM x ORDER BY x DESC;
INSERT INTO x VALUES ([{'x': [{'x': 1.1}]}, {'x': [{'x': 1.1}]}]), ([{'x': [{'x': 1.1}]}, {'x': [{'x': 1.2}]}]), ([{'x': [{'x': 1.1}]}, {'x': [{'x': 1.2}, {'x': 1.3}]}]), ([{'x': [{'x': 1.1}]}, {'x': [{'x': 1.2}, {'x': 1.2}]}]), ([{'x': [{'x': 1.2}]}, {'x': [{'x': 1.1}]}]), ([{'x': [{'x': 1.2}]}, {'x': [{'x': 1.2}]}]), ([{'x': [{'x': NULL}]}, {'x': [{'x': 1.1}]}]), ([{'x': [{'x': NULL}]}, {'x': [{'x': 1.2}]}]), ([{'x': [{'x': 1.1}]}, {'x': [{'x': NULL}]}, {'x': [{'x': NULL}]}]), ([{'x': [{'x': 1.2}]}, {'x': [{'x': NULL}]}, {'x': [{'x': 1.2}]}]), ([{'x': [{'x': 1.1}]}, {'x': [{'x': NULL}]}]), ([{'x': [{'x': 1.2}]}, {'x': [{'x': NULL}]}]), ([{'x': [{'x': 1.2}]}, {'x': [{'x': NULL}]}, {'x': [{'x': NULL}]}]);
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x DESC;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
CREATE TABLE x (x BOOLEAN[]);
INSERT INTO x VALUES ([TRUE]), ([FALSE]), ([FALSE, TRUE]), ([]), ([TRUE, TRUE]), ([NULL]), (NULL), ([FALSE, FALSE]);
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x DESC;
CREATE TABLE x (x STRUCT(x BOOLEAN, x BOOLEAN));
INSERT INTO x VALUES ({'x': TRUE, 'x': NULL}), ({'x': FALSE, 'x': NULL}), ({'x': TRUE, 'x': TRUE}), ({'x': FALSE, 'x': TRUE}), ({'x': NULL, 'x': FALSE}), ({'x': NULL, 'x': TRUE}), ({'x': NULL, 'x': NULL}), (NULL), ({'x': FALSE, 'x': FALSE});
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x DESC;
DROP TABLE x;
DROP TABLE x;
CREATE TABLE x (x INTERVAL[]);
INSERT INTO x VALUES (['2 years']), (['1 year']), (['1 year', '2 years']), ([]), (['2 years', '2 years']), ([NULL]), (NULL), (['1 year', '1 year']);
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x DESC;
CREATE TABLE x (x STRUCT(x INTERVAL, x INTERVAL));
INSERT INTO x VALUES ({'x': '2 years', 'x': NULL}), ({'x': '1 year', 'x': NULL}), ({'x': '2 years', 'x': '2 years'}), ({'x': '1 year', 'x': '2 years'}), ({'x': '2 years', 'x': '1 year'}), ({'x': NULL, 'x': '1 year'}), ({'x': NULL, 'x': '2 years'}), ({'x': NULL, 'x': NULL}), (NULL), ({'x': '1 year', 'x': '1 year'});
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x DESC;
CREATE TABLE x (x STRUCT(x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BOOLEAN, x BOOLEAN, x BOOLEAN, x BOOLEAN, x TEXT, x STRUCT(x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT), x STRUCT(x TEXT, x BIGINT, x BIGINT, x BIGINT, x TEXT, x TEXT, x BIGINT, x BIGINT, x BIGINT, x TEXT), x STRUCT(x TEXT, x TEXT, x TEXT, x TEXT, x BIGINT, x BIGINT, x TEXT, x BIGINT), x STRUCT(x TEXT), x STRUCT(x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT), x STRUCT(x TEXT, x BOOLEAN, x BIGINT, x BIGINT), x STRUCT(x TEXT, x TEXT, x TEXT, x BIGINT), x STRUCT(x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BOOLEAN, x BOOLEAN, x STRUCT(x BIGINT, x TEXT)[], x STRUCT(x BIGINT, x BIGINT)[], x TEXT, x BIGINT, x TEXT)[], x STRUCT(x TEXT, x TEXT, x TEXT, x TEXT)[], x STRUCT(x BOOLEAN, x BOOLEAN), x STRUCT(x BIGINT, x BIGINT), x STRUCT(x TEXT, x BIGINT, x TEXT), x STRUCT(x TEXT, x TEXT)[], x STRUCT(x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x TEXT, x TEXT, x TEXT), x STRUCT(x BIGINT, x TEXT, x TEXT)[], x STRUCT(x BIGINT, x TEXT)[], x STRUCT(x BIGINT, x BIGINT)[], x TEXT, x STRUCT(x TEXT, x TEXT, x BIGINT, x TEXT, x TEXT, x BIGINT, x TEXT, x TEXT), x STRUCT(x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x TEXT, x TEXT, x TEXT), x STRUCT(x TEXT, x TEXT), x STRUCT(x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT), x TEXT, x STRUCT(x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x TEXT, x TEXT, x TEXT)[])[]);
INSERT INTO x VALUES ([{'x': 1, 'x': 0, 'x': 2, 'x': 59, 'x': NULL, 'x': TRUE, 'x': TRUE, 'x': TRUE, 'x': 'tGfxQbvUCWehgmxGyGgBeJhdIWntfkLtonLnpveSTCqepaZwKETAAtIPIqEppznCDDpdPQonXQXKjeIbqOgTIpivdxPviZxkKMtleUUwvqEDOvqjTHuvskrdXeeoNMGpXkrSdYOhDGNkFcgCFChKavCflzRJoXrnjLgFGogROuusCbjbCaYyUZIVdBUpOFjpoeSpbpzSHofDcPuDZSbtpjDtaOmzJreITcsXPVqXnqvEzuzpGIXvefuMeQEdxKCsFWbTNl', 'x': {'x': 'XyQOqOyAnyZ', 'x': 'cfsRwAfwmrVimfTykGVKuWypjKNHXcm', 'x': 'RYfl', 'x': NULL, 'x': NULL, 'x': 'XyQOqOyAnyZ', 'x': '', 'x': '', 'x': ''}, 'x': NULL, 'x': NULL, 'x': NULL, 'x': {'x': NULL, 'x': NULL, 'x': NULL, 'x': NULL, 'x': NULL, 'x': NULL, 'x': NULL, 'x': NULL, 'x': 'afUPRYRCSQmdcdtQYydnKGvviGtorsdOovCYjwCSlY', 'x': 'afUPRYRCSQmdcdtQYydnKGvviGtorsdOovCYjwCSlY', 'x': 'afUPRYRCSQmdcdtQYydnKGvviGtorsdOovCYjwCSlY', 'x': 0}, 'x': {'x': NULL, 'x': TRUE, 'x': NULL, 'x': NULL}, 'x': NULL, 'x': [], 'x': [{'x': 'MVFWmJlKBMxAB', 'x': 'kYhtvFo', 'x': 'ijQKnKaopVcYGXaXsdNtLmOIZi', 'x': 'AJVzA'}, {'x': 'MBBosQekfLHmBgESESLTW', 'x': 'zmOeIaLIr', 'x': 'ccqPBhTzhudkeFfHImrrei', 'x': 'bSyEAmJjsLO'}, {'x': 'gHkbLJZKCzjMtfUmfTShD', 'x': 'XCNrflSANYjQW', 'x': 'bnVwblyKiYrmBOnj', 'x': 'aSfdNGF'}, {'x': 'eEgScdEsdRGrkTODjpkBAxd', 'x': 'aZXHENozGtPolSS', 'x': 'mttKSWiRQhrlAguHXh', 'x': 'nLdkePN'}, {'x': 'NkpxeWPzMqyIraIlvitxdysD', 'x': 'euIYxc', 'x': 'oixhzagMYgrRGdjApvUrQNAhCMlr', 'x': 'pfVmSTagxMbjAvZFh'}, {'x': 'tEuwOvdvbaxENlzBxGudMyjFRAJ', 'x': 'lJahfprsh', 'x': 'qLcMIslAgmqMfnFoAXf', 'x': 'RJZSKwlsBVOMMIHyI'}, {'x': 'QvAZuwsYVFwNLZSGImMk', 'x': 'vBcsuLVMptMc', 'x': 'tniBRScobiyWeNjFDeolXCaWY', 'x': 'fSKVZpAlpXiUB'}, {'x': 'wsvEVmWnzdMOZEeMRfrVu', 'x': 'UumrECUGNgUhW', 'x': 'ftMupCdtrKzxkJlLCFINQkVHaE', 'x': 'KNpaXiOejRPdc'}, {'x': 'jdnWYFIRdcfrhUeCKNXhv', 'x': 'vNrytvSkVtNxg', 'x': 'gmIacFmQlTTUtMqbemzHXXylMt', 'x': 'aSDjzDdZLMZvn'}], 'x': {'x': TRUE, 'x': NULL}, 'x': NULL, 'x': {'x': 0, 'x': 1, 'x': NULL}, 'x': [], 'x': NULL, 'x': [], 'x': [], 'x': [], 'x': 'waJz', 'x': {'x': NULL, 'x': NULL, 'x': NULL, 'x': NULL, 'x': 'dQTrPlzsz', 'x': NULL, 'x': 'GS', 'x': 'waA'}, 'x': NULL, 'x': NULL, 'x': {'x': 'dQTrPlzsz', 'x': 'dQTrPlzsz', 'x': 'dQTrPlzsz', 'x': 'dQTrPlzsz', 'x': 'dQTrPlzsz', 'x': 'osmgoJpKYP', 'x': 'osmgoJpKYP', 'x': 'osmgoJpKYP', 'x': 'osmgoJpKYP', 'x': 'osmgoJpKYP', 'x': NULL, 'x': NULL, 'x': NULL, 'x': NULL, 'x': NULL}, 'x': 'oeL', 'x': []}, {'x': 2, 'x': 21483, 'x': 3, 'x': 0, 'x': NULL, 'x': TRUE, 'x': NULL, 'x': NULL, 'x': 'tGfxQbvUCWehgmxGyGgBeJhdIWntfkLtonLnpveSTCqepaZwKETAAtIPIqEppznCDDpdPQonXQXKjeIbqOgTIpivdxPviZxkKMtleUUwvqEDOvqjTHuvskrdXeeoNMGpXkrSdYOhDGNkFcgCFChKavCflzRJoXrnjLgFGogROuusCbjbCaYyUZIVdBUpOFjpoeSpbpzSHofDcPuDZSbtpjDtaOmzJreITcsXPVqXnqvEzuzpGIXvefuMeQEdxKCsFWbTNl', 'x': {'x': 'XyQOqOyAnyZ', 'x': 'cfsRwAfwmrVimfTykGVKuWypjKNHXcm', 'x': 'RYfl', 'x': NULL, 'x': NULL, 'x': 'XyQOqOyAnyZ', 'x': '', 'x': '', 'x': ''}, 'x': NULL, 'x': NULL, 'x': NULL, 'x': {'x': NULL, 'x': NULL, 'x': NULL, 'x': NULL, 'x': NULL, 'x': NULL, 'x': NULL, 'x': NULL, 'x': 'afUPRYRCSQmdcdtQYydnKGvviGtorsdOovCYjwCSlY', 'x': 'afUPRYRCSQmdcdtQYydnKGvviGtorsdOovCYjwCSlY', 'x': 'afUPRYRCSQmdcdtQYydnKGvviGtorsdOovCYjwCSlY', 'x': 0}, 'x': {'x': NULL, 'x': TRUE, 'x': NULL, 'x': NULL}, 'x': {'x': 'TXHLvtCPAAYjJexsMT', 'x': 'XFreEKOqocIVsnw', 'x': NULL, 'x': NULL}, 'x': [], 'x': [{'x': 'wsvEVmWnzdMOZEeMRfrVu', 'x': 'UumrECUGNgUhW', 'x': 'ftMupCdtrKzxkJlLCFINQkVHaE', 'x': 'KNpaXiOejRPdc'}], 'x': {'x': NULL, 'x': TRUE}, 'x': NULL, 'x': {'x': 0, 'x': 1, 'x': NULL}, 'x': [], 'x': NULL, 'x': [], 'x': [], 'x': [], 'x': 'XYItl', 'x': {'x': NULL, 'x': NULL, 'x': NULL, 'x': NULL, 'x': 'dQTrPlzsz', 'x': NULL, 'x': 'GS', 'x': 'waA'}, 'x': NULL, 'x': NULL, 'x': {'x': 'dQTrPlzsz', 'x': 'dQTrPlzsz', 'x': 'dQTrPlzsz', 'x': 'dQTrPlzsz', 'x': 'dQTrPlzsz', 'x': 'dQTrPlzsz', 'x': 'dQTrPlzsz', 'x': 'dQTrPlzsz', 'x': 'dQTrPlzsz', 'x': 'dQTrPlzsz', 'x': NULL, 'x': NULL, 'x': NULL, 'x': NULL, 'x': NULL}, 'x': 'oeL', 'x': []}]);
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (11, 22), (12, 21), (13, 22);
SELECT x FROM x ORDER BY x;
PRAGMA x = 'DESCENDING';
SELECT x FROM x ORDER BY x;
PRAGMA x = 'ASC';
PRAGMA x = 'ASC';
PRAGMA x = 'UNKNOWN';
PRAGMA x = 'UNKNOWN';
PRAGMA x = 'UNKNOWN';
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (0), (0), (0), (0);
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
SELECT SUM(x) FROM (SELECT x FROM x ORDER BY x) AS x;
CREATE TABLE x AS SELECT {'x': 2.0, 'x': 'hello', 'x': [1, 2]} AS x, CAST(1 AS BIGINT) AS x, {'x': CAST(1 AS TINYINT), 'x': CAST(0 AS BOOLEAN)} AS x;
INSERT INTO x VALUES ({'x': 1.0, 'x': 'yay', 'x': [10, 20]}, 42, {'x': 2, 'x': 1});
SELECT UNNEST(x), x.x AS x FROM x ORDER BY x;
SELECT x, x.x FROM x ORDER BY 1;
SELECT UNNEST(x), x.x AS x FROM x ORDER BY 1;
SELECT UNNEST(x), UNNEST(x), x FROM x ORDER BY x;
SELECT UNNEST(x), UNNEST(x), x FROM x ORDER BY 2 DESC;
SELECT x, UNNEST(x), UNNEST(x) FROM x ORDER BY 5 DESC;
SET x = 'nulls_first';
PRAGMA x;
PRAGMA x;
SELECT x % 2 AS x, GROUP_CONCAT('thisstringis200characterslong..........................................................................................................................................................................') AS x FROM x GROUP BY x ORDER BY x;
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('a'), (NULL), (NULL), (NULL), (NULL), (NULL), (NULL);
SELECT * FROM x ORDER BY x.x DESC;
CREATE TABLE x (x TEXT, x TEXT);
INSERT INTO x VALUES ('Shipping and Receiving Supervisor', 'Ackerman'), ('Shipping and Receiving Clerk', 'Berndt'), ('Shipping and Receiving Clerk', 'Kuppa'), ('Production Supervisor - WC60', 'Brown'), ('Production Supervisor - WC60', 'Campbell'), ('Production Supervisor - WC40', 'Dsa');
SELECT * FROM x ORDER BY x, x;
SELECT * FROM x ORDER BY x DESC, x DESC;
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('2'), (NULL), ('3555555555552'), ('1'), ('355555555556'), ('10'), ('3555555555553'), ('3555555555551');
SELECT * FROM x ORDER BY x;
CREATE TABLE x AS (SELECT CAST(x AS TEXT) AS x, RANDOM() AS x FROM x);
CREATE TABLE x AS (SELECT * FROM x ORDER BY x);
SELECT COUNT(*) FROM x;
CREATE TABLE x AS (SELECT CAST(x AS TEXT) AS x, RANDOM() AS x FROM x);
CREATE TABLE x AS (SELECT * FROM x ORDER BY x);
SELECT COUNT(*) FROM x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (3, 3), (2, 3), (2, 2), (3, 2);
SELECT * FROM x ORDER BY CAST(x AS TEXT), x;
SELECT * FROM x ORDER BY x, CAST(x AS TEXT);
SELECT * FROM x ORDER BY CAST(x AS TEXT), CAST(x AS TEXT);
CREATE TABLE x (x TEXT, x TEXT, x INT, x DOUBLE, x DOUBLE, x DOUBLE, x DOUBLE, x DOUBLE, x DOUBLE, x BIGINT);
INSERT INTO x VALUES ('N', 'O', 7459297, 10512270008.90, 9986238338.3847, 10385578376.585467, 25.545537671232875, 36000.9246880137, 0.05009595890410959, 292000), ('R', 'F', 3785523, 5337950526.47, 5071818532.9420, 5274405503.049367, 25.5259438574251, 35994.029214030925, 0.04998927856184382, 148301), ('A', 'F', 3774200, 5320753880.69, 5054096266.6828, 5256751331.449234, 25.537587116854997, 36002.12382901414, 0.05014459706340077, 147790), ('N', 'F', 95257, 133737795.84, 127132372.6512, 132286291.229445, 25.30066401062417, 35521.32691633466, 0.04939442231075697, 3765);
SELECT * FROM x ORDER BY x, x;
CREATE TABLE x (x INT, x TEXT);
INSERT INTO x VALUES (3, 'ababa'), (1, 'babab'), (NULL, 'abbab'), (2, NULL);
SELECT x, LIST(STR_SPLIT(x, 'b')) FROM x GROUP BY x ORDER BY x;
SELECT x, {'x': x, 'x': x} FROM x ORDER BY x;
SELECT x, {'x': x, 'x': STR_SPLIT(x, 'b')} FROM x ORDER BY x;
SELECT x, {'x': x, 'x': UNNEST(STR_SPLIT(x, 'b'))} FROM x ORDER BY x;
SELECT x, {'x': x, 'x': LIST(x)} FROM x GROUP BY x ORDER BY x;
SELECT x, {'x': x, 'x': x} FROM x ORDER BY x;
SELECT x, {'x': x, 'x': LIST(STR_SPLIT(x, 'b'))} FROM x GROUP BY x ORDER BY x;
CREATE TABLE x (x INT, x TEXT, x INT, x TEXT);
INSERT INTO x VALUES (6, '0reallylongstring1', 3, '1reallylongstring8'), (6, '0reallylongstring1', 3, '1reallylongstring7'), (6, '0reallylongstring1', 4, '1reallylongstring8'), (6, '0reallylongstring1', 4, '1reallylongstring7'), (6, '0reallylongstring2', 3, '1reallylongstring8'), (6, '0reallylongstring2', 3, '1reallylongstring7'), (6, '0reallylongstring2', 4, '1reallylongstring8'), (6, '0reallylongstring2', 4, '1reallylongstring7'), (5, '0reallylongstring1', 3, '1reallylongstring8'), (5, '0reallylongstring1', 3, '1reallylongstring7'), (5, '0reallylongstring1', 4, '1reallylongstring8'), (5, '0reallylongstring1', 4, '1reallylongstring7'), (5, '0reallylongstring2', 3, '1reallylongstring8'), (5, '0reallylongstring2', 3, '1reallylongstring7'), (5, '0reallylongstring2', 4, '1reallylongstring8'), (5, '0reallylongstring2', 4, '1reallylongstring7');
SELECT x, x, x, x FROM x ORDER BY x, x, x, x;
SELECT x, x, x, x FROM x ORDER BY x, x, x, x;
SELECT x, x, x, x FROM x ORDER BY x, x, x, x;
SELECT x, x, x, x FROM x ORDER BY x, x, x, x;
SELECT x, x, x, x FROM x ORDER BY x, x, x, x;
SELECT x, x, x, x FROM x ORDER BY x DESC, x, x, x;
CREATE TABLE x (x TEXT, x TEXT, x INT, x BIGINT);
INSERT INTO x VALUES ('Brand#11', 'ECONOMY BRUSHED COPPER', 3, 4), ('Brand#11', 'ECONOMY BRUSHED COPPER', 9, 4), ('Brand#11', 'ECONOMY BRUSHED STEEL', 36, 4), ('Brand#11', 'ECONOMY BRUSHED STEEL', 9, 4), ('Brand#11', 'ECONOMY BURNISHED BRASS', 36, 4), ('Brand#11', 'ECONOMY BURNISHED COPPER', 49, 4), ('Brand#11', 'ECONOMY BURNISHED COPPER', 9, 4), ('Brand#11', 'ECONOMY BURNISHED NICKEL', 14, 4), ('Brand#11', 'ECONOMY BURNISHED NICKEL', 49, 4);
SELECT x, x, x, x FROM x ORDER BY x DESC, x, x, x;
CREATE TABLE x (x INT, x TEXT);
INSERT INTO x VALUES (3, 'aba'), (1, 'ccbcc'), (NULL, 'dbdbd'), (2, NULL);
SELECT x, STR_SPLIT(x, 'b') FROM x ORDER BY x;
SELECT x, LIST(x) FROM x GROUP BY x ORDER BY x;
SELECT x, LIST(STR_SPLIT(x, 'b')) FROM x GROUP BY x ORDER BY x;
PRAGMA x = 1;
CREATE TABLE x AS (SELECT x % 4 AS x, x AS x FROM x);
INSERT INTO x VALUES (0, NULL), (1, NULL), (2, NULL), (3, NULL);
SELECT x, LIST(x) FROM x GROUP BY x ORDER BY x;
CREATE TABLE x (x SMALLINT, x TEXT NOT NULL, x TEXT NOT NULL, x INT NOT NULL, x TEXT NOT NULL);
INSERT INTO x VALUES (1, 'Ken Sánchez', 'Chief Executive Officer', 1, 'Ken Sánchez'), (273, '>Brian Welcker', 'Vice President of Sales', 2, 'Ken Sánchez>Brian Welcker'), (274, '>>Stephen Jiang', 'North American Sales Manager', 3, 'Ken Sánchez>Brian Welcker>Stephen Jiang'), (285, '>>Syed Abbas', 'Pacific Sales Manager', 3, 'Ken Sánchez>Brian Welcker>Syed Abbas'), (16, '>>David Bradley', 'Marketing Manager', 3, 'Ken Sánchez>Brian Welcker>David Bradley'), (275, '>>>Michael Blythe', 'Sales Representative', 4, 'Ken Sánchez>Brian Welcker>Stephen Jiang>Michael Blythe'), (276, '>>>Linda Mitchell', 'Sales Representative', 4, 'Ken Sánchez>Brian Welcker>Stephen Jiang>Linda Mitchell'), (286, '>>>Lynn Tsoflias', 'Sales Representative', 4, 'Ken Sánchez>Brian Welcker>Syed Abbas>Lynn Tsoflias'), (23, '>>>Mary Gibson', 'Marketing Specialist', 4, 'Ken Sánchez>Brian Welcker>David Bradley>Mary Gibson');
SELECT x, x, x, x FROM x ORDER BY x, x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
PRAGMA x;
CREATE TABLE x AS SELECT * FROM x;
SELECT x, x, x, x FROM x ORDER BY x NULLS FIRST, x NULLS FIRST, x NULLS FIRST, x DESC LIMIT 360;
SELECT x, x, x, x FROM x ORDER BY x NULLS FIRST, x NULLS FIRST, x NULLS FIRST, x DESC LIMIT 10 OFFSET 440;
SET x = 8;
SET x = '1GB';
ALTER TABLE x RENAME TO x;
CREATE TABLE x AS SELECT * FROM x;
CREATE OR REPLACE TEMPORARY TABLE x AS SELECT x.* FROM x AS x;
SELECT COUNT(*) > 0 FROM x;
DROP TABLE x;
SELECT COUNT(*) > 0 FROM x;
CREATE OR REPLACE TEMPORARY TABLE x AS SELECT x.*, x.* FROM x AS x ORDER BY x, x;
SELECT COUNT(*) > 0 FROM x;
DROP TABLE x;
SELECT COUNT(*) > 0 FROM x;
SELECT COUNT(*) > 0 FROM x;
DROP TABLE x;
SELECT COUNT(*) > 0 FROM x;
CREATE OR REPLACE TEMPORARY TABLE x AS SELECT x.*, ROW_NUMBER() OVER (PARTITION BY x, x ORDER BY x) FROM x AS x;
SELECT COUNT(*) > 0 FROM x;
DROP TABLE x;
SELECT COUNT(*) > 0 FROM x;
CREATE OR REPLACE TEMPORARY TABLE x AS SELECT x.*, x.* FROM x AS x JOIN x AS x USING (x, x);
SELECT COUNT(*) > 0 FROM x;
DROP TABLE x;
SELECT COUNT(*) > 0 FROM x;
PRAGMA x;
SELECT CAST(251658240 AS BIGINT) * CAST(251658240 AS BIGINT);
SELECT CAST(251658240 AS BIGINT) * CAST(1080863910568919040 AS BIGINT);
SELECT CAST(1080863910568919040 AS BIGINT) * CAST(251658240 AS BIGINT);
SELECT CAST(1080863910568919040 AS BIGINT) * CAST(1080863910568919040 AS BIGINT);
SELECT -CAST(1 AS BIGINT) * CAST(9223372036854775807 AS BIGINT);
SELECT -CAST(2 AS BIGINT) * CAST(4611686018427387905 AS BIGINT);
SELECT CAST(8589934592 AS BIGINT) * CAST(1073741823 AS BIGINT);
SELECT CAST(10737418240 AS BIGINT) * CAST(1073741823 AS BIGINT);
SELECT CAST(1073741823 AS BIGINT) * CAST(8589934592 AS BIGINT);
SELECT CAST(1073741823 AS BIGINT) * CAST(10737418240 AS BIGINT);
SELECT CAST(1073741823 AS BIGINT) * CAST(8589934592 AS BIGINT);
SELECT CAST((-9223372036854775808) AS BIGINT) * CAST(2 AS BIGINT);
SELECT CAST((-9223372036854775808) AS BIGINT) * -CAST(1 AS BIGINT);
SELECT -CAST(1 AS BIGINT) * CAST((-9223372036854775808) AS BIGINT);
SELECT -CAST(2 AS BIGINT) * CAST((-9223372036854775808) AS BIGINT);
SELECT CAST((-9223372036854775808) AS BIGINT) * CAST(0 AS BIGINT);
SELECT CAST((-9223372036854775808) AS BIGINT) * CAST(1 AS BIGINT);
SELECT CAST(0 AS BIGINT) * CAST((-9223372036854775808) AS BIGINT);
SELECT CAST(1 AS BIGINT) * CAST((-9223372036854775808) AS BIGINT);
SELECT CAST((-9223372036854775807) AS BIGINT) * CAST(2 AS BIGINT);
SELECT CAST((-9223372036854775807) AS BIGINT) * -CAST(1 AS BIGINT);
SELECT -CAST(1 AS BIGINT) * CAST((-9223372036854775807) AS BIGINT);
SELECT -CAST(2 AS BIGINT) * CAST((-9223372036854775807) AS BIGINT);
SELECT CAST((-9223372036854775807) AS BIGINT) * CAST(0 AS BIGINT);
SELECT CAST((-9223372036854775807) AS BIGINT) * CAST(1 AS BIGINT);
SELECT CAST(0 AS BIGINT) * CAST((-9223372036854775807) AS BIGINT);
SELECT CAST(1 AS BIGINT) * CAST((-9223372036854775807) AS BIGINT);
PRAGMA x;
SELECT CAST(1e308 AS DOUBLE) + CAST(1e308 AS DOUBLE);
SELECT CAST(0 AS DOUBLE) - CAST(1e308 AS DOUBLE) - CAST(1e308 AS DOUBLE);
SELECT CAST(1e308 AS DOUBLE) * CAST(1e308 AS DOUBLE);
SELECT CAST(1e308 AS DOUBLE) * CAST(1e308 AS DOUBLE);
SELECT CAST(1e308 AS DOUBLE) / 0.1;
SELECT CAST(2e38 AS REAL) + CAST(2e38 AS REAL);
SELECT CAST(2e38 AS REAL) * CAST(2e38 AS REAL);
SELECT CAST(2e38 AS REAL) / 0.1;
PRAGMA x;
CREATE TABLE x (x INT);
SET x = 250;
SELECT x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x FROM x;
PRAGMA x;
SELECT CAST(100 AS TINYINT) + CAST(1 AS TINYINT);
SELECT CAST(100 AS TINYINT) + CAST(50 AS TINYINT);
SELECT CAST(0 AS TINYINT) + -CAST(127 AS TINYINT);
SELECT -CAST(2 AS TINYINT) + -CAST(127 AS TINYINT);
SELECT CAST(30000 AS SMALLINT) + CAST(1 AS SMALLINT);
SELECT CAST(30000 AS SMALLINT) + CAST(5000 AS SMALLINT);
SELECT CAST(0 AS SMALLINT) + -CAST(32767 AS SMALLINT);
SELECT -CAST(2 AS SMALLINT) + -CAST(32767 AS SMALLINT);
SELECT CAST(2147483640 AS INT) + CAST(1 AS INT);
SELECT CAST(2147483640 AS INT) + CAST(5000 AS INT);
SELECT CAST(0 AS INT) + -CAST(2147483647 AS INT);
SELECT -CAST(2 AS INT) + -CAST(2147483647 AS INT);
SELECT CAST(9223372036854775800 AS BIGINT) + CAST(1 AS BIGINT);
SELECT CAST(9223372036854775800 AS BIGINT) + CAST(5000 AS BIGINT);
SELECT CAST(0 AS BIGINT) + -CAST(9223372036854775807 AS BIGINT);
SELECT -CAST(2 AS BIGINT) + -CAST(9223372036854775808 AS BIGINT);
SELECT -CAST(100 AS TINYINT) - CAST(1 AS TINYINT);
SELECT -CAST(100 AS TINYINT) - CAST(50 AS TINYINT);
SELECT CAST(0 AS TINYINT) - CAST(127 AS TINYINT);
SELECT -CAST(2 AS TINYINT) - CAST(127 AS TINYINT);
SELECT -CAST(30000 AS SMALLINT) - CAST(1 AS SMALLINT);
SELECT -CAST(30000 AS SMALLINT) - CAST(5000 AS SMALLINT);
SELECT CAST(0 AS SMALLINT) - CAST(32767 AS SMALLINT);
SELECT -CAST(2 AS SMALLINT) - CAST(32767 AS SMALLINT);
SELECT -CAST(2147483640 AS INT) - CAST(1 AS INT);
SELECT -CAST(2147483640 AS INT) - CAST(5000 AS INT);
SELECT CAST(0 AS INT) - CAST(2147483647 AS INT);
SELECT -CAST(2 AS INT) - CAST(2147483647 AS INT);
SELECT -CAST(9223372036854775800 AS BIGINT) - CAST(1 AS BIGINT);
SELECT -CAST(9223372036854775800 AS BIGINT) - CAST(5000 AS BIGINT);
SELECT CAST(0 AS BIGINT) - CAST(9223372036854775807 AS BIGINT);
SELECT -CAST(2 AS BIGINT) - CAST(9223372036854775807 AS BIGINT);
SELECT CAST(50 AS TINYINT) * CAST(2 AS TINYINT);
SELECT CAST(50 AS TINYINT) * CAST(3 AS TINYINT);
SELECT -CAST(1 AS TINYINT) * CAST(127 AS TINYINT);
SELECT -CAST(2 AS TINYINT) * CAST(64 AS TINYINT);
SELECT -CAST(2 AS TINYINT) * CAST(65 AS TINYINT);
SELECT CAST(15000 AS SMALLINT) * CAST(2 AS SMALLINT);
SELECT CAST(15000 AS SMALLINT) * CAST(3 AS SMALLINT);
SELECT -CAST(1 AS SMALLINT) * CAST(32767 AS SMALLINT);
SELECT -CAST(2 AS SMALLINT) * CAST(16384 AS SMALLINT);
SELECT -CAST(2 AS SMALLINT) * CAST(16385 AS SMALLINT);
SELECT CAST(1073741820 AS INT) * CAST(2 AS INT);
SELECT CAST(1073741820 AS INT) * CAST(3 AS INT);
SELECT -CAST(1 AS INT) * CAST(2147483647 AS INT);
SELECT -CAST(2 AS INT) * CAST(1073741824 AS INT);
SELECT -CAST(2 AS INT) * CAST(1073741825 AS INT);
SELECT CAST(4611686018427387900 AS BIGINT) * CAST(2 AS BIGINT);
SELECT CAST(4611686018427387900 AS BIGINT) * CAST(3 AS BIGINT);
SELECT -CAST(1 AS BIGINT) * CAST(9223372036854775807 AS BIGINT);
SELECT -CAST(2 AS BIGINT) * CAST(4611686018427387905 AS BIGINT);
CREATE TABLE x (x TINYINT);
INSERT INTO x VALUES (1), (10);
SELECT x + CAST(100 AS TINYINT) FROM x ORDER BY 1;
SELECT x + CAST(120 AS TINYINT) FROM x ORDER BY 1;
SELECT x + CAST(120 AS TINYINT) FROM x WHERE x = 1 ORDER BY 1;
SELECT -CAST(100 AS TINYINT) - x FROM x ORDER BY 1;
SELECT -CAST(120 AS TINYINT) - x FROM x ORDER BY 1;
SELECT -CAST(120 AS TINYINT) - x FROM x WHERE x = 1 ORDER BY 1;
SELECT -CAST(120 AS TINYINT) + (-x) FROM x ORDER BY 1;
SELECT -CAST(120 AS TINYINT) + (-(-(-x))) FROM x ORDER BY 1;
SELECT x * CAST(10 AS TINYINT) FROM x ORDER BY 1;
SELECT x * CAST(15 AS TINYINT) FROM x ORDER BY 1;
SELECT (x * CAST(10 AS TINYINT)) * CAST(10 AS TINYINT) FROM x ORDER BY 1;
SELECT (x * CAST(10 AS TINYINT)) * CAST(10 AS TINYINT) FROM x WHERE x = 1 ORDER BY 1;
SELECT (x * CAST(10 AS TINYINT)) * CAST(10 AS TINYINT) FROM (SELECT * FROM x) AS x ORDER BY 1;
SELECT (x * CAST(10 AS TINYINT)) * CAST(10 AS TINYINT) FROM (SELECT * FROM x) AS x WHERE x = 1 ORDER BY 1;
SELECT (x * CAST(10 AS TINYINT)) * CAST(10 AS TINYINT) FROM (SELECT * FROM x WHERE x = 1 UNION ALL SELECT * FROM x WHERE x = 10) AS x ORDER BY 1;
CREATE TABLE x (x SMALLINT);
INSERT INTO x VALUES (1), (10);
SELECT x + CAST(32765 AS SMALLINT) FROM x;
SELECT x + CAST(32765 AS SMALLINT) FROM x WHERE x = 1;
SELECT -CAST(32765 AS SMALLINT) - x FROM x;
SELECT -CAST(32765 AS SMALLINT) - x FROM x WHERE x = 1;
SELECT x * CAST(10000 AS SMALLINT) FROM x;
SELECT x * CAST(10000 AS SMALLINT) FROM x WHERE x = 1;
SELECT CAST(x AS TINYINT) + CAST(120 AS TINYINT) FROM x;
SELECT CAST(x AS TINYINT) + CAST(120 AS TINYINT) FROM x WHERE x = 1;
INSERT INTO x VALUES (1000);
SELECT CAST(x AS TINYINT) FROM x;
SELECT CAST(x AS TINYINT) + CAST(120 AS TINYINT) FROM x WHERE x = 1;
INSERT INTO x VALUES (30000);
SELECT CAST(x.x AS SMALLINT) + CAST(x.x AS SMALLINT) FROM x AS x, x AS x WHERE x.x = x.x;
CREATE TABLE x (x SMALLINT);
INSERT INTO x VALUES (1), (10);
SELECT x + x FROM x AS x LEFT JOIN x AS x ON (x = x);
INSERT INTO x VALUES (30000);
SELECT x + x FROM x LEFT JOIN x ON (x = x);
PRAGMA x;
SELECT 1e1000;
SELECT CAST(1e308 AS REAL);
SELECT CAST(1e1000 AS REAL);
SELECT CAST('1e1000' AS DOUBLE);
SELECT CAST('1e100' AS REAL);
SELECT SUM(x) FROM (VALUES (1e308), (1e308)) AS x;
SELECT AVG(x) FROM (VALUES (1e308), (1e308)) AS x;
SELECT 1e308+1 AS x;
SELECT 1e308 * 2;
SELECT -1e308-1 AS x;
SELECT 1e308 / 0.1;
SELECT CAST(2e38 AS REAL) + CAST(2e38 AS REAL);
SELECT CAST(2e38 AS REAL) * 2;
SELECT -CAST(2e38 AS REAL) - CAST(2e38 AS REAL);
SELECT CAST(2e38 AS REAL) / CAST(0.1 AS REAL);
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (-1099511627776, 3);
INSERT INTO x VALUES (11, 22), (12, 21), (14, 22);
SELECT CAST(-SUM(DISTINCT -CAST(NULL AS INT)) AS INT) FROM x;
SELECT x, AVG(x) FROM x GROUP BY x ORDER BY x;
SELECT CAST(200 AS TINYINT);
SELECT CAST(-129 AS TINYINT);
SELECT CAST(100 AS TINYINT) + CAST(100 AS TINYINT);
CREATE TABLE x (x INT, x TINYINT);
INSERT INTO x VALUES (200, 60), (12, 60), (14, 60);
SELECT CAST(x AS TINYINT) FROM x;
SELECT SUM(x) FROM x;
SELECT CAST(100 AS TINYINT) - -CAST(50 AS TINYINT);
SELECT CAST(100 AS TINYINT) * CAST(2 AS TINYINT);
SELECT CAST(100 AS TINYINT) + CAST(x AS TINYINT) FROM x;
SELECT CAST(100 AS TINYINT) - -CAST(x AS TINYINT) FROM x;
SELECT CAST(100 AS TINYINT) * CAST(x AS TINYINT) FROM x;
SELECT x + x FROM (SELECT CAST(100 AS TINYINT) AS x, CAST(100 AS TINYINT) AS x) AS x;
SET x = 8;
SET x = 4;
SET x = 4;
INSERT INTO x SELECT * FROM x;
SELECT COUNT(*), SUM(x) FROM x;
CREATE TABLE x (x INT);
CREATE INDEX x ON x(x);
CREATE VIEW x AS SELECT * FROM x;
CREATE VIEW x AS SELECT * FROM x;
CREATE VIEW x AS SELECT * FROM x;
CREATE VIEW x AS SELECT * FROM x;
CREATE VIEW x AS SELECT * FROM x;
CREATE VIEW x AS SELECT * FROM x;
CREATE VIEW x AS SELECT * FROM x;
CREATE VIEW x AS SELECT * FROM x;
CREATE VIEW x AS SELECT * FROM x;
CREATE VIEW x AS SELECT * FROM x;
CREATE VIEW x AS SELECT * FROM x;
CREATE VIEW x AS SELECT * FROM x;
CREATE VIEW x AS SELECT * FROM x;
CREATE VIEW x AS SELECT * FROM x;
CREATE VIEW x AS SELECT * FROM x;
CREATE VIEW x AS SELECT * FROM x;
SELECT * FROM x;
SELECT COUNT(*), SUM(x) FROM x;
BEGIN;
SELECT COUNT(*), SUM(x) FROM x;
BEGIN;
SELECT COUNT(*), COUNT(DISTINCT x) FROM x;
INSERT INTO x SELECT * FROM x AS x;
SELECT COUNT(*), SUM(x) FROM x;
SELECT COUNT(*), SUM(x) FROM x;
SELECT COUNT(*), SUM(x) FROM x;
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
SELECT COUNT(*), SUM(x) FROM x;
CREATE TABLE x (x INT PRIMARY KEY, x BIGINT);
CREATE TABLE x (x INT PRIMARY KEY, x BIGINT);
CREATE TABLE x (x INT PRIMARY KEY, x BIGINT);
CREATE TABLE x (x INT PRIMARY KEY, x BIGINT);
CREATE TABLE x (x INT PRIMARY KEY, x BIGINT);
SELECT COUNT(*), SUM(x) FROM x;
CREATE TABLE x (x INT PRIMARY KEY);
CREATE TABLE x (x INT PRIMARY KEY);
CREATE TABLE x (x INT PRIMARY KEY);
CREATE TABLE x (x INT PRIMARY KEY);
SELECT COUNT(*), SUM(x) FROM x;
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
SELECT COUNT(*), SUM(x) FROM x;
SELECT COUNT(*), SUM(x) FROM x;
CREATE TABLE x (x INT[]);
CREATE TABLE x (x INT[]);
CREATE TABLE x (x INT[]);
SELECT COUNT(*) >= 30000 AND COUNT(*) <= 36000, SUM(x) >= 150015000 AND SUM(x) <= 150318000 FROM (SELECT UNNEST(x) AS x FROM x);
SELECT COUNT(*), SUM(x) FROM (SELECT UNNEST(x) AS x FROM x);
CREATE OR REPLACE TABLE x (x INT);
CREATE OR REPLACE TABLE x (x INT);
CREATE OR REPLACE TABLE x (x INT);
SELECT COUNT(*), SUM(x) FROM x;
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
SELECT COUNT(*) >= 10000 AND COUNT(*) <= 12000, SUM(x) >= 49995000 AND SUM(x) <= 50094000 FROM x;
SELECT COUNT(*), SUM(x) FROM x;
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
SELECT COUNT(*) >= 10000 AND COUNT(*) <= 12000, COUNT(x) >= 10000 AND COUNT(x) <= 11000, SUM(x) >= 49995000 AND SUM(x) <= 50094000 FROM x;
SELECT COUNT(*), COUNT(x), SUM(x) FROM x;
CREATE OR REPLACE TABLE x (x INT);
CREATE OR REPLACE TABLE x (x INT);
SELECT * FROM x;
SELECT COUNT(*), SUM(x) FROM x;
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
SELECT COUNT(*) = 10000, SUM(x) >= 49995000 AND SUM(x) <= 50195000 FROM x;
SELECT COUNT(*), SUM(x) FROM x;
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
UPDATE x SET x = 4 WHERE x = 2;
SET x = '';
SET x = '2GiB';
SET x = 4;
SET x = 4;
SELECT COUNT(*) AS x FROM (SELECT DISTINCT x FROM x);
SELECT COUNT(*) AS x FROM (SELECT DISTINCT x FROM x);
DROP TABLE x;
DROP TABLE x;
WITH x AS NOT MATERIALIZED (SELECT x.x FROM x AS x JOIN x AS x ON (x.x = x.x)) SELECT COUNT(*) FROM (SELECT * FROM x UNION ALL SELECT * FROM x) AS x JOIN x ON (x.x = x.x);
WITH x AS NOT MATERIALIZED (SELECT x.x FROM x AS x JOIN x AS x ON (x.x = x.x)) SELECT COUNT(*) FROM (SELECT * FROM x UNION ALL SELECT * FROM x) AS x JOIN x ON (x.x = x.x);
SELECT x AS x, x AS x FROM x, x WHERE x = x AND x BETWEEN 1999 AND 1999 + 2 UNION ALL SELECT x AS x, x AS x FROM x, x WHERE x = x AND x BETWEEN 1999 AND 1999 + 2;
PRAGMA x;
PRAGMA x = 16;
CREATE TABLE x AS SELECT CAST(x AS TEXT) AS x FROM x AS x;
INSERT INTO x VALUES ('hello');
SELECT (SELECT MIN(CAST(x AS INT)) + x.x FROM x) FROM (VALUES (1), (2), (3)) AS x;
PRAGMA x;
PRAGMA x = 4;
PRAGMA x;
CREATE TABLE x (x INT);
CREATE TABLE x AS SELECT 337 AS x UNION ALL SELECT 948247 UNION ALL SELECT 1779793 UNION ALL SELECT 4779793;
INSERT INTO x SELECT * FROM x;
BEGIN;
BEGIN;
SELECT * FROM x WHERE x IN (SELECT * FROM x);
SELECT * FROM x JOIN x USING (x);
SELECT * FROM x WHERE x > 337 AND x < 340;
SELECT * FROM x WHERE x IN (337, 948247, 1779793, 4779793, 99999999999999);
SELECT * FROM x WHERE x = 337 OR (x + x > 1896494 AND x + x <= 1896498) OR (x * 2 = 9559586);
COMMIT;
PRAGMA x;
PRAGMA x = 4;
PRAGMA x;
PRAGMA x;
PRAGMA x = '__TEST_DIR__/test.json';
PRAGMA x = x;
SELECT COUNT(*) FROM x TABLESAMPLE RESERVOIR (100 ROWS);
PRAGMA x = 4;
PRAGMA x;
PRAGMA x;
PRAGMA x = '__TEST_DIR__/test.json';
PRAGMA x = x;
CREATE TABLE x AS SELECT x AS x, x % 10 AS x FROM x;
CREATE TABLE x (x BOOLEAN);
INSERT INTO x SELECT x FROM (VALUES (TRUE), (FALSE)) AS x, x;
SELECT REGR_AVGX(x, x) FROM x GROUP BY x % 2;
SELECT REGR_AVGY(x, x) FROM x GROUP BY x % 2;
SELECT REGR_COUNT(x, x) FROM x GROUP BY x % 2;
SELECT REGR_SLOPE(x, x) FROM x GROUP BY x % 2;
SELECT REGR_R2(x, x) FROM x GROUP BY x % 2;
SELECT REGR_SXX(x, x) FROM x GROUP BY x % 2;
SELECT REGR_SYY(x, x) FROM x GROUP BY x % 2;
SELECT REGR_SXY(x, x) FROM x GROUP BY x % 2;
SELECT REGR_INTERCEPT(x, x) FROM x GROUP BY x % 2;
SELECT BOOL_OR(x) AS x, BOOL_AND(x) AS x FROM x;
SELECT APPROX_COUNT_DISTINCT(x), APPROX_COUNT_DISTINCT(x) FROM x GROUP BY x % 2;
SELECT ARG_MIN(x, x), ARG_MAX(x, x) FROM x;
SELECT CORR(x, x) FROM x GROUP BY x % 2;
SELECT ENTROPY(x) FROM x;
SELECT PRODUCT(x) FROM x WHERE x < 2000 GROUP BY x ORDER BY ALL;
SELECT KURTOSIS(x), KURTOSIS(x) FROM x WHERE x < 5000;
SELECT SKEWNESS(x) FROM (SELECT CASE WHEN x % 2 = 0 THEN 1 ELSE x END AS x FROM x) AS x;
INSERT INTO x VALUES (1, 1), (2, 2);
SELECT MODE(x), MODE(x) FROM x GROUP BY x % 2 ORDER BY ALL;
SELECT HISTOGRAM(x) FROM x;
SELECT STR_SPLIT(GROUP_CONCAT('a', ','), ',')[100] FROM x GROUP BY x % 2;
SELECT STR_SPLIT(GROUP_CONCAT(NULL, ','), ',')[100] FROM x GROUP BY x % 2;
PRAGMA x = 4;
PRAGMA x;
PRAGMA x;
PRAGMA x = '__TEST_DIR__/test.json';
PRAGMA x = x;
PRAGMA x = x;
PRAGMA x = x;
INSERT INTO x VALUES (NULL, NULL);
SELECT COUNT(*) FROM (SELECT UNNEST(x) AS x FROM (SELECT LIST(x) AS x FROM x) AS x) AS x WHERE NOT x IS NULL;
SELECT COUNT(*) FROM (SELECT UNNEST(x) AS x FROM (SELECT LIST(x) AS x FROM x) AS x) AS x WHERE x IS NULL;
SELECT COUNT(*) FROM (SELECT UNNEST(x) AS x FROM (SELECT LIST(x) AS x FROM x) AS x) AS x;
SELECT COUNT(*) FROM (SELECT LIST(x) AS x FROM x GROUP BY x) AS x;
PRAGMA x = 4;
PRAGMA x;
PRAGMA x;
PRAGMA x = '__TEST_DIR__/test.json';
PRAGMA x = x;
CREATE TABLE x AS SELECT x AS x, x % 10 AS x FROM x;
SELECT FIRST([x]) FROM x GROUP BY x % 2;
SELECT MIN([x]), MAX([x]) FROM x GROUP BY x % 2;
SELECT MIN([-x, 1, x]), MAX([-x, 1, x]) FROM x GROUP BY x % 2;
SELECT MIN({'x': x}), MAX({'x': x}) FROM x GROUP BY x % 2 ORDER BY ALL;
SELECT MIN({'x': x, 'x': x % 2}), MAX({'x': x, 'x': x % 2}) FROM x GROUP BY x % 2;
SELECT FIRST(CAST(NULL AS INT[])) FROM x GROUP BY x % 2;
SELECT MIN(CAST(NULL AS INT[])) FROM x GROUP BY x % 2;
SELECT MIN(CAST(NULL AS INT[])) FROM x GROUP BY x % 2;
SELECT MIN(CAST(NULL AS INT[])) FROM x GROUP BY x % 2;
PRAGMA x;
PRAGMA x = '__TEST_DIR__/test.json';
PRAGMA x = x;
BEGIN;
CREATE TABLE x AS SELECT * FROM x AS x;
SELECT MIN(x), MAX(x) FROM x;
COMMIT;
SELECT MIN(x), MAX(x) FROM x;
PRAGMA x;
PRAGMA x = 4;
PRAGMA x;
SELECT MIN(x), MAX(x) FROM x;
BEGIN;
INSERT INTO x SELECT * FROM x;
SELECT MIN(x), MAX(x) FROM x;
COMMIT;
SELECT MIN(x), MAX(x) FROM x;
PRAGMA x;
PRAGMA x = 4;
PRAGMA x;
PRAGMA x;
PRAGMA x = '__TEST_DIR__/test.json';
PRAGMA x = x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3), (NULL);
SELECT SUM(x) FROM x UNION ALL SELECT AVG(x) FROM x UNION ALL SELECT MIN(x) FROM x UNION ALL SELECT MAX(x) FROM x;
CREATE VIEW x (x) AS SELECT SUM(x) FROM x UNION ALL SELECT AVG(x) FROM x UNION ALL SELECT MIN(x) FROM x UNION ALL SELECT MAX(x) FROM x;
SELECT SUM(x) FROM x UNION ALL SELECT AVG(x) FROM x UNION ALL SELECT MIN(CAST(x AS DATE)) FROM x UNION ALL SELECT MAX(CAST(x AS DATE)) FROM x;
SELECT * FROM x AS x JOIN x AS x USING (x);
PRAGMA x;
PRAGMA x = 4;
PRAGMA x;
PRAGMA x;
PRAGMA x = '__TEST_DIR__/test.json';
PRAGMA x = x;
CREATE TABLE x AS SELECT * FROM x AS x;
SELECT MIN(x), MAX(x) FROM x;
SELECT MIN(x), MAX(x) FROM x WHERE x > 2000;
CREATE TABLE x AS SELECT x % 4 AS x, x AS x FROM x AS x;
SELECT x, SUM(x), MIN(x), MAX(x) FROM x GROUP BY x ORDER BY x;
PRAGMA x;
CREATE TABLE x AS SELECT 42 AS x, 84 AS x UNION ALL SELECT 13, 14;
SELECT x, x FROM (SELECT CAST(COLUMNS(*) AS TEXT) FROM x);
SELECT x, x, x, x FROM (SELECT MIN(COLUMNS(*)) AS "x", MAX(COLUMNS(*)) AS "x" FROM x);
CREATE TABLE x AS SELECT 42 AS x, 84 AS x, 126 AS x, 1000 AS x;
SELECT x, x, x FROM (SELECT MIN(COLUMNS('([a-z])\d+')) AS "x" FROM x);
SELECT x, "x", "x" FROM (SELECT MIN(COLUMNS('([a-z])\d+')) AS "x" FROM x);
SELECT "x", "x", "x" FROM (SELECT MIN(COLUMNS('([a-z])\d+')) AS "x" FROM x);
SELECT "x", "x", "x" FROM (SELECT MIN(COLUMNS('([a-z])(\d+)')) AS "x" FROM x);
SELECT MIN(COLUMNS('([a-z])\d+')) AS "x" FROM x;
SELECT MIN(COLUMNS('([a-z])\d+')) AS "x" FROM x;
SELECT MIN(COLUMNS(*)) AS "x" FROM x;
CREATE TABLE x (x INT, x INT, x AS (x * x));
INSERT INTO x VALUES (5, 4);
SELECT x, x, x FROM (SELECT CAST(COLUMNS(*) AS TEXT) FROM x);
SELECT x, x, x FROM (SELECT CAST(COLUMNS(*) AS TEXT) AS "x" FROM x);
CREATE TABLE x AS SELECT 42 AS x, 80 AS x;
CREATE TABLE x AS SELECT 43 AS x, 84 AS x;
CREATE TABLE x AS SELECT 44 AS x, 84 AS x;
SELECT x, x, x FROM (SELECT CAST(COLUMNS(*) AS TEXT) FROM x FULL OUTER JOIN x USING (x)) ORDER BY 1;
SELECT x, x, x, x FROM (SELECT CAST(COLUMNS(*) AS TEXT) FROM x FULL OUTER JOIN x USING (x) FULL OUTER JOIN x USING (x)) ORDER BY 1;
PRAGMA x;
CREATE TABLE x AS SELECT UNNEST(['K0', 'K1', 'K2', 'K3', 'K4', 'K5']) AS x, UNNEST([11, 12, 13, 14, 15, 16]) AS x, UNNEST([21, 22, 23, 24, 25, 26]) AS x;
CREATE TABLE x AS SELECT UNNEST(['K0', 'K2', 'K5']) AS x, UNNEST([2, 3, 5]) AS x;
SELECT SIN(COLUMNS(x.* EXCLUDE (x))) FROM x JOIN x USING (x);
SELECT SIN(COLUMNS(x.* EXCLUDE (x))) FROM x JOIN x USING (x);
PRAGMA x;
SELECT 1 AS x;
SELECT 1 AS x;
SELECT CAST('1_2.1_2E1_0' AS DOUBLE);
SELECT 1 AS x;
SELECT 1 AS x;
SELECT CAST('1000_000_000' AS INT);
SELECT CAST('1000__000__000' AS INT);
SELECT CAST('_1_2' AS INT);
SELECT CAST('1_2_' AS INT);
SELECT CAST('1_2_' AS INT);
SELECT 12.1 AS x;
SELECT 12.1 AS x;
SELECT CAST('_12.12' AS DECIMAL(4, 2));
SELECT CAST('12._12' AS DECIMAL(4, 2));
SELECT CAST('12_.12' AS DECIMAL(4, 2));
SELECT CAST('12.12_' AS DECIMAL(4, 2));
SELECT CAST('1__2.1__2' AS REAL);
SELECT CAST('12.1_2' AS REAL);
SELECT CAST('1_2.12' AS REAL);
SELECT CAST('12.1_2e2' AS REAL);
SELECT CAST('_12.12' AS REAL) = 12.12;
SELECT CAST('12._12' AS REAL) = 12.12;
SELECT CAST('12._12e2' AS REAL) = 12.12e2;
SELECT CAST('12_.12' AS REAL) = 12.12;
SELECT CAST('12.12_' AS REAL) = 12.12;
SELECT CAST('12.12_e2' AS REAL) = 12.12e2;
SELECT CAST('12.12_e2' AS REAL) = 12.12e2;
SELECT CAST('12.12_e2' AS REAL) = 12.12e2;
SELECT CAST('12.12_e2' AS REAL) = 12.12e2;
SELECT CAST('1_000_000_000.000_000_000_5' AS DOUBLE);
SELECT CAST('_1_000_000_000_000_000_000_000' AS DOUBLE) = 1e+21;
SELECT CAST('._000_000_000_000_000_000_000_123' AS DOUBLE) = 123e-23;
SELECT CAST('1_000_000_000_000_000_000_000_' AS DOUBLE) = 1e+21;
SELECT CAST('.000_000_000_000_000_000_000_123_' AS DOUBLE) = 123e-23;
SELECT CAST('20e10_' AS REAL);
SELECT CAST('20e_10' AS REAL);
SELECT CAST('20e10_' AS BIGINT);
SELECT CAST('20e_10' AS BIGINT);
SELECT CAST('20e_10' AS BIGINT);
SELECT CAST('12e10_' AS BIGINT) = CAST(12e10 AS BIGINT);
SELECT '_12e10::BIGINT' = CAST(12e10 AS BIGINT);
SELECT CAST('0b01_01' AS INT);
SELECT CAST('0b0_1_0_1' AS INT);
SELECT CAST('0b0_1_0_1_' AS INT);
SELECT CAST('0b_0_1_0_1' AS INT);
SELECT CAST('0b0__1_0_1' AS INT);
SELECT CAST('0xFF_FF' AS INT);
SELECT CAST('0xF_F_F_F' AS INT);
SELECT CAST('0x0_F_F_F_' AS INT);
SELECT CAST('0x_F_F_F' AS INT);
SELECT CAST('0x0__F_F_F' AS INT);
SELECT CAST('0x0__F_F_F' AS INT);
SELECT CAST('0x0__F_F_F' AS INT);
SELECT CAST('1_2e1_0' AS REAL);
SELECT CAST('1_2e1_0' AS REAL);
SELECT CAST('1_2e1_0' AS BIGINT);
PRAGMA x;
SELECT 6 * 1 / 2;
SELECT 6 * 1 // 2;
SELECT (6 * 1) // 2;
SELECT 6 * (1 // 2);
SELECT 6 + 1 / 2;
SELECT 6 + 1 // 2;
SELECT ' ' = '　';
SELECT ' ' = '　';
SELECT '' = '';
SELECT '' = '';
SELECT '' = '';
SELECT '' = '';
SELECT ' ' = '　' OR ' ' = '　';
SELECT ' ' = '　' OR ' ' = '　';
SELECT ' ' = '　' OR ' ' = '　';
SELECT ' ' = '　' OR ' ' = '　';
SELECT ' $duck$ ' = '　$duck$　';
SELECT ' $duck$ ' = '　$duck$　';
SELECT 'x x' = 'x　x';
SELECT (1 + (1 + (1 + (1 + (1 + (1 + (1 + 1)))))));
SET x = 7;
SELECT (1 + (1 + (1 + (1 + (1 + (1 + (1 + 1)))))));
SET x = 1000;
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3), (NULL);
SELECT * FROM x;
SELECT x + 1 FROM x;
SELECT * FROM x LIMIT 2;
SELECT * FROM x WHERE NOT x IS NULL;
SELECT * FROM x ORDER BY x DESC NULLS FIRST;
SELECT DISTINCT x % 2 FROM x WHERE x > 0 ORDER BY ALL;
SELECT x % 2 AS x, SUM(x) AS x FROM x GROUP BY x HAVING NOT x IS NULL ORDER BY ALL;
SELECT * FROM x JOIN x AS x USING (x);
SELECT * FROM x JOIN x AS x USING (x);
PRAGMA x;
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('Hello'), ('World');
SELECT x.lower() FROM x;
SELECT x.lower() FROM x AS x;
SELECT x.lower() FROM x;
SELECT (x).lower() FROM x;
SELECT x.lowe() FROM x;
SELECT x.x.lower() FROM x;
SELECT x.lower().upper() FROM x;
SELECT x.lower()[ : 3] FROM x;
SELECT x.lower()[ : 3] FROM x;
DELETE FROM x;
INSERT INTO x VALUES ('Hello World');
SELECT x.split(' ') FROM x;
SELECT x.split(' ').apply(x -> x.lower()) FROM x;
SELECT x.split(' ').apply(x -> x.lower()).filter(x -> x[1] = 'h') FROM x;
SELECT x.split(' ').length() FROM x;
SELECT x.split(' ').aggregate('count') FROM x;
SELECT x.split(' ').aggregate('min') FROM x;
PRAGMA x;
SELECT CASE WHEN TRUE THEN {'x': 42} END.x;
SELECT ([42])[1];
SELECT ([42])[1];
SELECT ([x FOR x IN [42, 84]])[1];
PRAGMA x;
SELECT 42;
SELECT 42;
SELECT 42;
SELECT 42;
SELECT 42;
SELECT 42;
SELECT 42;
PRAGMA x;
SELECT x.* FROM (x AS x CROSS JOIN (VALUES (3), (4)) AS x) AS x;
SELECT x, x FROM (x AS x CROSS JOIN (VALUES (3), (4)) AS x) AS x;
SELECT * FROM (x AS x CROSS JOIN (VALUES (3), (4)) AS x) AS x;
PRAGMA x;
PRAGMA x;
CREATE TABLE x AS SELECT 42 AS x, 84 AS x UNION ALL SELECT 13, 14;
SELECT * FROM x WHERE *;
SELECT * FROM x WHERE NOT * IS NULL;
SELECT * FROM x WHERE COLUMNS(*) IS NULL ORDER BY ALL;
SELECT * FROM x GROUP BY COLUMNS(*);
SELECT * FROM x GROUP BY * + 42;
SELECT * FROM x GROUP BY x HAVING * > 42;
SELECT * FROM x GROUP BY x HAVING COLUMNS(*) > 42;
SELECT * FROM x ORDER BY *, *;
SELECT * FROM x ORDER BY * + 42;
INSERT INTO x VALUES (*, *);
VALUES (*);
SELECT * FROM x;
PRAGMA x;
CREATE TABLE x (x INT);
SELECT * FROM x AT (TIMESTAMP => CAST('2020-01-01' AS TIMESTAMP));
SELECT * FROM x AT (TIMESTAMP => CAST('2020-01-01' AS TIMESTAMP));
SELECT * FROM x AT (TIMESTAMP => CAST('2020-01-01' AS TIMESTAMP));
SELECT * FROM x AT (TIMESTAMP => GETVARIABLE('my_timestamp'));
SELECT * FROM x AT (TIMESTAMP => NOW() - INTERVAL '3' DAYS);
SELECT * FROM x AT (TIMESTAMP => CAST('2020-01-01' AS TIMESTAMP) + x);
SELECT * FROM x AT (TIMESTAMP => (SELECT MIN(x) FROM x));
PRAGMA x;
CREATE TABLE x AS SELECT 42 AS x, 84 AS x UNION ALL SELECT 13, 14;
SELECT COLUMNS(*) FROM x;
SELECT MIN(COLUMNS(*)), MAX(COLUMNS(*)) FROM x;
SELECT MIN(COLUMNS(* EXCLUDE (x))), MAX(COLUMNS(* EXCLUDE (x))) FROM x;
SELECT MIN(COLUMNS(* REPLACE (x + x AS x))) FROM x;
SELECT COLUMNS(*) + 1 FROM x;
SELECT COLUMNS(*) + COLUMNS(*) FROM x;
CREATE TABLE x AS SELECT 1 AS x, 42 AS x, 84 AS x UNION ALL SELECT 2, 13, 14;
SELECT x, MIN(COLUMNS('index[0-9]')) FROM x GROUP BY ALL ORDER BY ALL;
SELECT x, MIN(COLUMNS('[0-9]')) FROM x GROUP BY ALL ORDER BY ALL;
SELECT x, MIN(COLUMNS('xxx')) FROM x GROUP BY ALL;
SELECT MIN(COLUMNS('xxx')) FROM x;
SELECT MIN(COLUMNS('[asdadd')) FROM x;
SELECT COLUMNS(*) + COLUMNS(* EXCLUDE (x)) FROM x;
SELECT (SELECT COLUMNS(*)) FROM x;
SELECT COLUMNS(['a', NULL]) FROM (VALUES (42)) AS x;
SELECT * FROM x ORDER BY COLUMNS('index[0-9]');
SELECT * FROM x ORDER BY COLUMNS(*);
PRAGMA x;
CREATE TABLE x AS SELECT 42 AS x, 84 AS x UNION ALL SELECT 13, 14;
SELECT COLUMNS([x FOR x IN *]) FROM x;
SELECT COLUMNS([x FOR x IN (*) IF x <> 'i']) FROM x;
SELECT COLUMNS(x -> x <> 'i') FROM x;
SELECT COLUMNS([x FOR x IN (*) IF x SIMILAR TO 'i']) FROM x;
SELECT COLUMNS(['i', 'i']) FROM x;
SELECT COLUMNS(LIST_CONCAT(['i'], ['i'])) FROM x;
SELECT COLUMNS([x FOR x IN (* EXCLUDE (x))]) FROM x;
SELECT COLUMNS(['i']) + COLUMNS(['i']) FROM x;
SELECT COLUMNS([x, x]) FROM x;
SELECT COLUMNS([x FOR x IN COLUMNS(*)]) FROM x;
SELECT COLUMNS(COLUMNS(*)) FROM x;
SELECT * + 42 FROM x;
SELECT COLUMNS([x FOR x IN (*) IF x = 'k']) FROM x;
SELECT COLUMNS(['k']) FROM x;
SELECT COLUMNS([x FOR x IN (*) IF x LIKE 'i']) FROM x AS x JOIN x AS x USING (x);
SELECT COLUMNS([x FOR x IN (*) IF x LIKE 'i']) FROM x AS x JOIN x AS x ON (x.x = x.x);
SELECT COLUMNS([43]) FROM x;
SELECT COLUMNS([NULL]) FROM x;
SELECT COLUMNS(CAST([] AS TEXT[])) FROM x;
SELECT COLUMNS(CAST(NULL AS TEXT[])) FROM x;
SELECT COLUMNS(CAST(NULL AS TEXT)) FROM x;
SELECT COLUMNS(['i']) + COLUMNS(['j']) FROM x;
SELECT COLUMNS([x FOR x IN (* REPLACE (x AS x))]) FROM x;
PRAGMA x;
CREATE TABLE x (x INT, x INT, x INT);
INSERT INTO x VALUES (1, 200, 10), (2, 100, 20), (3, 200, 0);
SELECT * FROM x ORDER BY COLUMNS('col1|col3');
SELECT * FROM x ORDER BY COLUMNS('col2|col3');
SELECT * FROM x ORDER BY COLUMNS('col2|col3') DESC;
SELECT * FROM x ORDER BY COLUMNS('col2') DESC, COLUMNS('col3') ASC;
SELECT * FROM x ORDER BY COLUMNS(x -> x[-1] IN ('2', '3'));
SELECT * FROM x UNION SELECT * FROM x ORDER BY COLUMNS('col2|col3') DESC;
SELECT * FROM x ORDER BY COLUMNS('xxxx');
PRAGMA x;
CREATE OR REPLACE TABLE x AS SELECT 'test1' AS x, 1 AS x, 'quack' AS x UNION ALL SELECT 'test2' AS x, 2 AS x, 'quacks' AS x UNION ALL SELECT 'test3' AS x, 3 AS x, 'quacking' AS x;
PRAGMA x;
SELECT COALESCE(*COLUMNS(*)) FROM (SELECT NULL, 2, 3) AS x;
SELECT x FROM (DESCRIBE SELECT COALESCE(*COLUMNS(*)) FROM (SELECT NULL, 2, 3) AS x);
SELECT x FROM (DESCRIBE SELECT COALESCE(*COLUMNS(*)) AS x FROM (SELECT NULL, 2, 3) AS x);
CREATE TABLE x AS SELECT '123abc234' AS x, 4 AS x, 'abc' AS x;
CREATE TABLE x AS SELECT '123abc234' AS x, 4 AS x, 'abc' AS x;
SELECT COLUMNS('[a|c]') FROM x;
SELECT *COLUMNS('[a|c]') FROM x;
CREATE TABLE x AS SELECT * FROM (VALUES (150, CAST('2017/06/12' AS DATE), 3), (125, CAST('2017/08/29' AS DATE), 2), (175, CAST('2017/06/12' AS DATE), 4)) AS x;
SELECT FIRST(x ORDER BY x ASC, x DESC) FROM x;
SELECT FIRST(x ORDER BY *COLUMNS('date|priority') ASC) FROM x;
SELECT COALESCE(*COLUMNS(x -> x IN ('a', 'c'))) FROM (SELECT NULL, 2, 3) AS x;
SELECT 2 IN (*COLUMNS(*)) FROM (SELECT 1, 2, 3) AS x;
SELECT * FROM (VALUES (1, 2, 3), (2, 3, 0), (0, 0, 1)) AS x WHERE 1 IN (*COLUMNS(*));
CREATE TABLE x AS (SELECT * FROM (VALUES (1, 'Alice'), (2, 'Bob'), (3, 'Alice'), (4, 'Carol')) AS x);
SELECT {'x': *COLUMNS(*)} FROM x;
SELECT COLUMNS(*COLUMNS(*)) FROM (VALUES ('test'));
SELECT *COLUMNS(COLUMNS(*)) FROM (VALUES ('test'));
SELECT COLUMNS(*), {'x': COLUMNS(['id'])} FROM x;
SELECT {'x': {'x': *COLUMNS(['id']), 'x': {'x': *COLUMNS(['name'])}}} FROM x;
SELECT {'x': {'x': *COLUMNS(['id'])}, 'x': {'x': *COLUMNS(['id'])}} FROM x;
SELECT {'x': *COLUMNS('id')} AS x, {'x': *COLUMNS('name')} FROM x;
SELECT CONCAT(*COLUMNS(*), *COLUMNS(*)) FROM x;
SELECT COLUMNS(x -> *COLUMNS('id')) FROM x;
SELECT *COLUMNS(x -> *COLUMNS(*)) FROM x;
WITH x AS (SELECT * FROM (VALUES (42, 31), (85, 76)) AS x) SELECT *COLUMNS(*) + 42 FROM x;
WITH x AS (SELECT * FROM (VALUES (42, 31), (85, 76)) AS x) SELECT *COLUMNS('a') + 42 FROM x;
WITH x AS (SELECT * FROM (VALUES (21, 42), (1337, 7331)) AS x) SELECT [(UNPACK(x + COLUMNS(['a', 'b'])))] FROM x;
SELECT [UNPACK([UNPACK(COLUMNS(*)), x + x])] FROM (SELECT 42 AS x, 21 AS x);
SELECT [UNPACK(CAST(COLUMNS(*) AS TEXT))] FROM (SELECT CAST(21 AS INT) AS x, CAST(TRUE AS BOOLEAN) AS x, CAST(0.1234 AS DOUBLE) AS x);
SELECT [UNPACK([COLUMNS(['a', 'b']), COLUMNS(['c'])])] FROM (SELECT 21 AS x, 42 AS x, 1337 AS x);
SELECT [UNPACK(['test'])] FROM (SELECT 21 AS x, 42 AS x, 1337 AS x);
SELECT [UNPACK([COLUMNS(CAST([] AS TEXT[]))])] FROM (SELECT 21 AS x, 42 AS x, 1337 AS x);
SELECT [UNPACK([COLUMNS(['d'])])] FROM (SELECT 21 AS x, 42 AS x, 1337 AS x);
PRAGMA x;
CREATE TABLE x (x INT, x INT, x INT);
INSERT INTO x VALUES (1, 200, 10), (2, 100, 20), (3, 200, 0);
SELECT * FROM x WHERE COLUMNS(*) >= 2 ORDER BY ALL;
SELECT * FROM x WHERE COLUMNS(['col1', 'col2']) >= 2 ORDER BY ALL;
SELECT * FROM x WHERE COLUMNS(['col1', 'col2']) >= 2 AND NOT COLUMNS(*) IS NULL ORDER BY ALL;
SELECT * FROM x WHERE COLUMNS(['col1', 'col2']) >= 2 AND COLUMNS(['col1', 'col3']) < 10 ORDER BY ALL;
SELECT * FROM x WHERE COLUMNS(['nonexistent']) >= 2 ORDER BY ALL;
SELECT * FROM x WHERE COLUMNS(* EXCLUDE (x, x, x)) >= 2 ORDER BY ALL;
SELECT * FROM x WHERE * ORDER BY ALL;
SELECT * FROM x WHERE * >= 2 ORDER BY ALL;
SELECT x;
PRAGMA x;
SELECT 2 * 3 + 1;
SELECT 1 + 2 * 3;
SELECT POWER(2, 2) + 1;
SELECT POWER(2, 2) + 1;
SELECT 1 + POWER(2, 2);
SELECT 1 + POWER(2, 2);
SELECT POWER(2, 4) / 2;
SELECT POWER(2, (4 / 2));
SELECT 16 / POWER(2, 4);
SELECT POWER((16 / 2), 4);
SELECT POWER(POWER(2, 3), 2);
SELECT POWER(POWER(2, 3), 2);
SELECT POWER(POWER(2, 3), 2);
PRAGMA x;
SELECT "x" FROM (VALUES ('hello world')) AS x;
SELECT "x";
SELECT "x";
SELECT "x" FROM (VALUES (42)) AS "x";
SELECT "x" FROM (VALUES (42)) AS "x";
SELECT "x" FROM (VALUES (42)) AS "x";
SELECT x;
SELECT 1 AS x, MAX(CAST('1000-05-01 00:00:00' AS TIMESTAMP)) AS x GROUP BY x HAVING MAX(CAST('1000-05-01 00:00:00' AS TIMESTAMP)) <= CURRENT_TIMESTAMP;
SELECT x AS "x", "x" + 1 FROM (VALUES (84), (42)) AS x ORDER BY ALL;
SELECT x AS "x" FROM (VALUES (84), (42)) AS x ORDER BY "x" + 1;
SELECT x AS "x" FROM (VALUES ('2018-01-01'), ('2022-01-01')) AS x WHERE "x" >= '2020-01-01';
PRAGMA x;
SELECT 42;
SELECT 42, 84;
SELECT DISTINCT 42, 84;
VALUES (42);
VALUES (42);
SELECT * FROM (VALUES (42));
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (42, 84);
INSERT INTO x VALUES (42, 84);
SELECT x, SUM(x) FROM x GROUP BY x;
UPDATE x SET x = 100;
SELECT x FROM x;
SELECT [1];
SELECT [1];
SELECT {'x': 42, 'x': 84};
PRAGMA x;
CREATE TABLE x (x TEXT, x TEXT, x TEXT);
DESCRIBE x;
PRAGMA x;
SELECT * FROM (VALUES (42)) AS x;
SELECT * FROM (VALUES (42)) AS x, (VALUES (84)) AS x;
SELECT * FROM x;
SELECT * FROM x.x;
CREATE TABLE x (x INT);
SELECT x, x, x FROM x JOIN x ON (x.x = x.x) WHERE x = 'integers' AND x >= 0;
SELECT * FROM x;
CREATE TABLE x (x INT, PRIMARY KEY (x));
CREATE TABLE x (x INT, x INT, FOREIGN KEY (x) REFERENCES x);
INSERT INTO x (x) VALUES (0);
INSERT INTO x (x, x) VALUES (0, 0);
SELECT * EXCLUDE (x, x, x) FROM x.x;
SELECT * FROM x;
SELECT * FROM x ORDER BY ALL;
SELECT * FROM x;
CREATE TABLE x (x INT, x INT, x INT);
CREATE INDEX x ON x((x + 1), x);
SELECT * FROM x;
SELECT * FROM x.x;
SELECT * FROM x;
SELECT COUNT(*) FROM x WHERE x = 'myschema';
CREATE SCHEMA x.x;
SELECT COUNT(*) FROM x WHERE x = 'myschema';
SELECT * FROM x;
SELECT * FROM x.x;
SELECT * FROM x WHERE x = 'myschema';
CREATE SCHEMA x.x;
CREATE SCHEMA x.x;
CREATE SCHEMA x.x;
CREATE TABLE x (x TEXT);
SELECT * FROM x ORDER BY x;
PRAGMA x;
SELECT * FROM x;
SELECT * FROM x;
SELECT DISTINCT x FROM x WHERE x = 'sqrt';
SELECT x, x, x, x, x, x FROM x WHERE x = 'corr';
SELECT x, x, x, x FROM x WHERE x = 'printf';
SELECT x, x FROM x WHERE x = 'random';
SELECT LENGTH(x) > 0 FROM x WHERE x = 'add_default1';
CREATE SEQUENCE x;
SELECT * FROM x;
SELECT * FROM x.x;
SELECT x, x, x, x, x FROM x;
CREATE SEQUENCE x;
SELECT * FROM x;
SELECT * FROM x.x;
SELECT x, x, x, x, x FROM x;
SET x = 'nulls_first';
SELECT * FROM x;
SELECT x, x FROM x WHERE x = 'default_null_order';
SET x = 'nulls_last';
SELECT x, x FROM x WHERE x = 'default_null_order';
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x.x;
SELECT x FROM x WHERE x = 'int8' AND NOT x IS NULL;
SELECT x FROM x WHERE x = 'bytea' AND NOT x IS NULL;
SELECT x FROM x WHERE x = 'bit' AND NOT x IS NULL;
SELECT x FROM x WHERE x = 'bool' AND NOT x IS NULL;
SELECT x FROM x WHERE x = 'varchar' AND NOT x IS NULL;
SELECT x FROM x WHERE x = 'date' AND NOT x IS NULL;
SELECT x FROM x WHERE x = 'float8' AND NOT x IS NULL;
SELECT x FROM x WHERE x = 'float4' AND NOT x IS NULL;
SELECT x FROM x WHERE x = 'uuid' AND NOT x IS NULL;
SELECT x FROM x WHERE x = 'int4' AND NOT x IS NULL;
SELECT x FROM x WHERE x = 'int2' AND NOT x IS NULL;
SELECT x FROM x WHERE x = 'interval' AND NOT x IS NULL;
SELECT x FROM x WHERE x = 'time' AND NOT x IS NULL;
SELECT x FROM x WHERE x = 'timestamp' AND NOT x IS NULL;
SELECT x FROM x WHERE x = 'timestamptz' AND NOT x IS NULL;
SELECT x FROM x WHERE x = 'timetz' AND NOT x IS NULL;
SELECT COUNT(*) FROM x WHERE x = 'greeting';
SELECT x FROM x WHERE x = 'numeric' AND NOT x IS NULL;
SELECT COUNT(*) FROM x WHERE x = 'enum' AND NOT x IS NULL;
SELECT x.format_pg_type('DECIMAL', 'test');
SELECT x.format_pg_type('decimal', 'test');
CREATE VIEW x AS SELECT 42;
SELECT * FROM x;
SELECT * FROM x.x;
SELECT x, x FROM x WHERE x = 'v1';
CREATE TABLE x (x SMALLINT, x INT, x BIGINT, x REAL, x DOUBLE, x DECIMAL(4, 1), x DECIMAL(9, 2), x DECIMAL(18, 4), x DECIMAL(37, 2), x TEXT, x BLOB, x DATE, x TIME, x TIMESTAMP, x DATE[], x greeting);
SELECT DISTINCT x FROM x AS "x" WHERE LOWER(x) = 'main';
SELECT x FROM x AS x JOIN x AS x ON x.x = x.x WHERE x.pg_table_is_visible(x.x) AND x = 'integral_values';
SELECT x FROM x AS x JOIN x AS x ON x.x = x.x WHERE x.pg_table_is_visible(x.x) AND x = 'f';
SELECT x FROM x AS x JOIN x AS x ON x.x = x.x WHERE x.x = 'main' AND x = 'integral_values';
SELECT x FROM x AS x JOIN x AS x ON x.x = x.x WHERE x.x = 'main' AND x = 'f';
CREATE SEQUENCE x;
SELECT x FROM x AS x JOIN x AS x ON x.x = x.x WHERE x = 'S' AND x.x = 'main' AND x = 'seq';
SELECT x FROM x AS x JOIN x AS x ON x.x = x.x WHERE x = 'S' AND x.x = 'main' AND x = 'f';
SELECT EXISTS(SELECT * FROM x.x AS x, x.x AS x WHERE x.x = x.x AND x.x = 'integer' AND x.x = 'main');
SELECT EXISTS(SELECT * FROM x.x AS x, x.x AS x WHERE x.x = x.x AND x.x = 'int4' AND x.x = 'main');
SELECT COUNT(x.x) FROM x.x AS x LEFT JOIN x.x AS x ON x.x = x.x WHERE (x.pg_table_is_visible(x.x)) AND x.x = 'integral_values' AND x.x IN ('r', 'v', 'm', 'f', 'p');
SELECT x FROM x WHERE NOT x LIKE 'pg_%' ORDER BY x;
SELECT x.x FROM x AS x JOIN x AS x ON x.x = x.x WHERE x.x = 'main' AND x.x IN ('r', 'p');
SELECT x.x FROM x AS x JOIN x AS x ON x.x = x.x WHERE x.x = 'main' AND x.x = 'f';
CREATE SCHEMA x.x;
CREATE VIEW x.x AS SELECT 42;
SELECT x.x FROM x AS x JOIN x AS x ON x.x = x.x WHERE x.x = 'myschema' AND x.x IN ('v', 'm');
SELECT x FROM x AS x JOIN x AS x ON x.x = x.x WHERE x = 'S' AND x.x = 'main';
SELECT STR_SPLIT_REGEX(PG_GET_VIEWDEF(x.x), '\n')[1] AS x FROM x AS x JOIN x AS x ON x.x = x.x WHERE x.x = 'myschema' AND x.x = 'v1' AND x.x IN ('v', 'm');
SELECT x.x, x.format_type(x.x, x.x), (SELECT x.pg_get_expr(x.x, x.x) FROM x.x AS x WHERE x.x = x.x AND x.x = x.x AND x.x) AS "x", x.x FROM x.x AS x LEFT JOIN x.x AS x ON (x.x = x.x AND x.x = x.x) WHERE x.x = (SELECT MIN(x) FROM x WHERE x = 'integral_values') AND x.x > 0 AND NOT x.x ORDER BY x.x;
SELECT x.x FROM x AS x JOIN x AS x ON x.x = x.x JOIN x AS x ON x.x = x.x WHERE x.x = (SELECT MIN(x) FROM x) AND x.x = 't' ORDER BY x.x;
SELECT x.x FROM x AS x JOIN (SELECT UNNEST(x.x) AS x, GENERATE_SUBSCRIPTS(x.x, 1) AS x FROM x AS x WHERE x.x = (SELECT MIN(x) FROM x) AND x.x) AS x ON x.x = x.x WHERE x.x = (SELECT MIN(x) FROM x) ORDER BY x.x;
SELECT x.x, x.pg_get_constraintdef(x.x, TRUE) AS x, x.x AS x FROM x.x AS x, x AS x, x AS x WHERE x.x = (SELECT MIN(x) FROM x) AND x.x = 'f' AND x.x = x AND x.x = x.x ORDER BY 1;
SELECT x.x AS x, x.x AS x, x.x AS x, x.x AS x FROM x.x AS x JOIN x AS x ON x.x = x.x AND x.x = ANY(x.x) WHERE x.x = (SELECT MIN(x) FROM x) AND x.x = 'u';
SELECT x.x AS x, x.x AS x, x.x AS x, x.x AS x FROM x.x AS x JOIN x AS x ON x.x = x.x AND x.x = ANY(x.x) WHERE x.x = (SELECT MIN(x) FROM x) AND x.x = 'u';
SELECT x.x AS x, x.x AS x, x.x AS x, x.x AS x FROM x.x AS x JOIN x AS x ON x.x = x.x AND x.x = ANY(x.x) WHERE x.x = (SELECT MIN(x) FROM x) AND x.x = 'u';
SELECT x.x AS x FROM x.x AS x WHERE x.x = 0 AND x.x = (SELECT MIN(x) FROM x);
CREATE TABLE x (x INT CHECK (x < 42));
SELECT x.x AS x, PG_GET_CONSTRAINTDEF(x.x) AS x FROM x.x AS x WHERE x.x = 'c';
SELECT x.x AS "x", x.pg_type_is_visible(x.x) AS "x", x.x AS "x", x.x AS "x" FROM x.x AS x LEFT JOIN x.x AS x ON x.x = x.x LEFT JOIN x.x AS x ON x.x = x.x WHERE x.x = 'e' AND NOT x.x IS NULL ORDER BY x.x;
SELECT CURRENT_USER();
SELECT "x";
SELECT CURRENT_DATABASE();
SELECT x.CURRENT_DATABASE();
SELECT "x";
SELECT "x";
SELECT VERSION();
SELECT CURRENT_QUERY();
SELECT x.current_query();
SELECT 1, 2, 3, CURRENT_QUERY();
SELECT CURRENT_SCHEMA();
SELECT CURRENT_SCHEMAS(TRUE);
SELECT CURRENT_SCHEMAS(FALSE);
SELECT INET_CLIENT_ADDR(), INET_CLIENT_PORT(), INET_SERVER_ADDR(), INET_SERVER_PORT();
SELECT PG_POSTMASTER_START_TIME();
SELECT PG_IS_OTHER_TEMP_SCHEMA(33);
SELECT COL_DESCRIPTION(0, 0), OBJ_DESCRIPTION(0, 'duckdb'), SHOBJ_DESCRIPTION(0, 'duckdb');
SELECT TXID_CURRENT();
SELECT PG_TYPEOF(1);
PRAGMA x;
CREATE TABLE x (x TEXT, x TEXT, x INT, x INT);
INSERT INTO x VALUES ('NL', 'Amsterdam', 2000, 1005);
INSERT INTO x VALUES ('NL', 'Amsterdam', 2010, 1065);
INSERT INTO x VALUES ('NL', 'Amsterdam', 2020, 1158);
INSERT INTO x VALUES ('US', 'Seattle', 2000, 564);
INSERT INTO x VALUES ('US', 'Seattle', 2010, 608);
INSERT INTO x VALUES ('US', 'Seattle', 2020, 738);
INSERT INTO x VALUES ('US', 'New York City', 2000, 8015);
INSERT INTO x VALUES ('US', 'New York City', 2010, 8175);
INSERT INTO x VALUES ('US', 'New York City', 2020, 8772);
UNPIVOT x;
UNPIVOT x;
UNPIVOT x;
PIVOT x ON x GROUP BY x;
PIVOT (SELECT x, x FROM x) ON x;
PRAGMA x;
CREATE TABLE x (x TIMESTAMP, x INT);
INSERT INTO x VALUES ('2024-12-04 09:30:01', 100), ('2024-12-04 09:30:02', 100), ('2024-12-04 09:30:03', 100), ('2024-12-04 09:30:04', 100), ('2024-12-04 09:30:05', 100), ('2024-12-04 09:30:06', 100), ('2024-12-04 09:30:07', 100), ('2024-12-04 09:30:08', 100);
INSERT INTO x VALUES ('2024-12-04 09:30:01', 100), ('2024-12-04 09:30:02', 100), ('2024-12-04 09:30:03', 100), ('2024-12-04 09:30:04', 100), ('2024-12-04 09:30:05', 100), ('2024-12-04 09:30:06', 100), ('2024-12-04 09:30:07', 100), ('2024-12-04 09:30:08', 100);
PRAGMA x;
CREATE TABLE x AS WITH x AS (SELECT 'C1', 2022, 10 UNION ALL SELECT 'C1', 2018, 20 UNION ALL SELECT 'C1', 2017, 0 UNION ALL SELECT 'C2', 2022, 10 UNION ALL SELECT 'C2', 2010, 30 UNION ALL SELECT 'C3', 2010, 80) SELECT * FROM x;
PIVOT x ON x USING SUM(x) GROUP BY x;
PIVOT x ON x USING SUM(x) GROUP BY x;
PIVOT x ON x USING SUM(x) GROUP BY x;
WITH x AS (SELECT 'C1', 2022, 10 UNION ALL SELECT 'C1', 2018, 20 UNION ALL SELECT 'C1', 2017, 0 UNION ALL SELECT 'C2', 2022, 10 UNION ALL SELECT 'C2', 2010, 30 UNION ALL SELECT 'C3', 2010, 80) SELECT * FROM (PIVOT x ON x USING SUM(x) GROUP BY x);
WITH x AS (SELECT 'C1', 2022, 10 UNION ALL SELECT 'C1', 2018, 20 UNION ALL SELECT 'C1', 2017, 0 UNION ALL SELECT 'C2', 2022, 10 UNION ALL SELECT 'C2', 2010, 30 UNION ALL SELECT 'C3', 2010, 80) SELECT * FROM (PIVOT x ON x USING SUM(x) GROUP BY x);
WITH x AS (SELECT 'C1', 2022, 10 UNION ALL SELECT 'C1', 2018, 20 UNION ALL SELECT 'C1', 2017, 0 UNION ALL SELECT 'C2', 2022, 10 UNION ALL SELECT 'C2', 2010, 30 UNION ALL SELECT 'C3', 2010, 80) SELECT * FROM (PIVOT x ON x USING SUM(x) GROUP BY x);
WITH x AS (SELECT 'C1', 2022, 10 UNION ALL SELECT 'C1', 2018, 20 UNION ALL SELECT 'C1', 2017, 0 UNION ALL SELECT 'C2', 2022, 10 UNION ALL SELECT 'C2', 2010, 30 UNION ALL SELECT 'C3', 2010, 80) SELECT * FROM (PIVOT x ON x USING SUM(x) GROUP BY x);
WITH x AS (SELECT 'C1', 2022, 10 UNION ALL SELECT 'C1', 2018, 20 UNION ALL SELECT 'C1', 2017, 0 UNION ALL SELECT 'C2', 2022, 10 UNION ALL SELECT 'C2', 2010, 30 UNION ALL SELECT 'C3', 2010, 80) SELECT * FROM (PIVOT x ON x USING SUM(x) GROUP BY x);
WITH x AS MATERIALIZED (SELECT 'C1', 2022, 10 UNION ALL SELECT 'C1', 2018, 20 UNION ALL SELECT 'C1', 2017, 0 UNION ALL SELECT 'C2', 2022, 10 UNION ALL SELECT 'C2', 2010, 30 UNION ALL SELECT 'C3', 2010, 80) SELECT * FROM (PIVOT x ON x USING SUM(x) GROUP BY x);
WITH x AS MATERIALIZED (SELECT 'C1', 2022, 10 UNION ALL SELECT 'C1', 2018, 20 UNION ALL SELECT 'C1', 2017, 0 UNION ALL SELECT 'C2', 2022, 10 UNION ALL SELECT 'C2', 2010, 30 UNION ALL SELECT 'C3', 2010, 80) SELECT * FROM (PIVOT x ON x USING SUM(x) GROUP BY x);
WITH x AS MATERIALIZED (SELECT 'C1', 2022, 10 UNION ALL SELECT 'C1', 2018, 20 UNION ALL SELECT 'C1', 2017, 0 UNION ALL SELECT 'C2', 2022, 10 UNION ALL SELECT 'C2', 2010, 30 UNION ALL SELECT 'C3', 2010, 80) SELECT * FROM (PIVOT x ON x USING SUM(x) GROUP BY x);
PRAGMA x;
CREATE TABLE x AS SELECT 'Kale' AS x, 51 AS x, 'Q1' AS x, 2020 AS x UNION ALL SELECT 'Kale', 23, 'Q2', 2020 UNION ALL SELECT 'Kale', 45, 'Q3', 2020 UNION ALL SELECT 'Kale', 3, 'Q4', 2020 UNION ALL SELECT 'Kale', 70, 'Q1', 2021 UNION ALL SELECT 'Kale', 85, 'Q2', 2021 UNION ALL SELECT 'Apple', 77, 'Q1', 2020 UNION ALL SELECT 'Apple', 0, 'Q2', 2020 UNION ALL SELECT 'Apple', 1, 'Q1', 2021;
SELECT * FROM x PIVOT(SUM(x) FOR x IN ('Q1', 'Q2', 'Q3', 'Q4')) ORDER BY ALL;
SELECT * FROM (SELECT x, x, x FROM x) PIVOT(SUM(x) FOR x IN ('Q1', 'Q2', 'Q3', 'Q4')) ORDER BY ALL;
SELECT * FROM (SELECT x, x, x FROM x) PIVOT(SUM(x) FOR x IN ('Q1', 'Q2', 'Q3')) ORDER BY ALL;
SELECT * FROM (SELECT x, x FROM x) PIVOT(SUM(x) FOR x IN ('Q1', 'Q2', 'Q3')) ORDER BY ALL;
SELECT * FROM (SELECT x, x, x FROM x) PIVOT(SUM(x) AS x, COUNT(*) AS x FOR x IN ('Q1', 'Q2')) ORDER BY ALL;
CREATE OR REPLACE TABLE x AS SELECT 'Kale' AS x, 51 AS x, 23 AS x, 45 AS x, 3 AS x UNION ALL SELECT 'Apple', 77, 0, 25, 2;
SELECT * FROM x UNPIVOT(x FOR x IN (x, x, x, x)) ORDER BY ALL;
SELECT x, x, x, x FROM x UNPIVOT((x, x) FOR x IN ((x, x) AS x, (x, x) AS x));
PRAGMA x;
CREATE TABLE x (x TEXT, x INT);
SET x = 1;
SELECT * FROM x PIVOT(ARRAY_AGG(x) FOR x IN ('test', 'Test'));
SELECT * FROM x PIVOT(ARRAY_AGG(x), SUM(x) FOR x IN ('test', 'Test'));
PRAGMA x;
CREATE TEMPORARY VIEW x (x, x, x, x) AS VALUES (2018, 1, 'east', 100), (2018, 2, 'east', 20), (2018, 3, 'east', 40), (2018, 4, 'east', 40), (2019, 1, 'east', 120), (2019, 2, 'east', 110), (2019, 3, 'east', 80), (2019, 4, 'east', 60), (2018, 1, 'west', 105), (2018, 2, 'west', 25), (2018, 3, 'west', 45), (2018, 4, 'west', 45), (2019, 1, 'west', 125), (2019, 2, 'west', 115), (2019, 3, 'west', 85), (2019, 4, 'west', 65);
SELECT x, x, x, x, x, x FROM x PIVOT(SUM(x) FOR x IN (1 AS x, 2 AS x, 3 AS x, 4 AS x));
SELECT x, x, x, x, x, x, x, x, x FROM x PIVOT(SUM(x) FOR (x, x) IN ((1, 'east') AS x, (1, 'west') AS x, (2, 'east') AS x, (2, 'west') AS x, (3, 'east') AS x, (3, 'west') AS x, (4, 'east') AS x, (4, 'west') AS x));
SELECT x, x, x, x, x, x, x, x, x FROM x PIVOT(SUM(x) FOR (x, x, x) IN ((1, 'east') AS x, (1, 'west') AS x, (2, 'east') AS x, (2, 'west') AS x, (3, 'east') AS x, (3, 'west') AS x, (4, 'east') AS x, (4, 'west') AS x));
SELECT x, x, x, x, x, x, x, x, x FROM x PIVOT(SUM(x) FOR (x, x) IN ((1, 'east', 'west') AS x, (1, 'west') AS x, (2, 'east') AS x, (2, 'west') AS x, (3, 'east') AS x, (3, 'west') AS x, (4, 'east') AS x, (4, 'west') AS x));
SELECT * FROM x PIVOT(SUM(x) FOR (x, x) IN ((1, 'east') AS x, (1, 'east') AS x));
SELECT x, x, x, x, x FROM (SELECT x, x, x FROM x) AS x PIVOT(SUM(x) FOR x IN (1 AS x, 2 AS x, 3 AS x, 4 AS x));
SELECT x, x, x, x, x, x, x, x, x FROM (SELECT x, x, x FROM x) AS x PIVOT(SUM(x) AS x, AVG(x) AS x FOR x IN (1 AS x, 2 AS x, 3 AS x, 4 AS x));
SELECT * FROM (SELECT x, x, x FROM x) AS x PIVOT(SUM(x), AVG(x) FOR x IN (1 AS x, 2 AS x, 3 AS x, 4 AS x));
CREATE OR REPLACE TEMPORARY VIEW x (x, x, x, x, x, x) AS VALUES ('Toronto', 2020, 100, 80, 70, 150), ('San Francisco', 2020, NULL, 20, 50, 60), ('Toronto', 2021, 110, 90, 80, 170), ('San Francisco', 2021, 70, 120, 85, 105);
SELECT * FROM x UNPIVOT INCLUDE NULLS (x FOR x IN (x AS "x", x AS "x", x AS "x", x AS "x"));
CREATE OR REPLACE TEMPORARY VIEW x (x, x, x, x, x, x, x, x, x) AS VALUES (2022, 1, 'frontend', 'Freddy', 'fred@alwaysup.org', 15551234567, 'Fanny', 'fanny@lwaysup.org', 15552345678), (2022, 1, 'backend', 'Boris', 'boris@alwaysup.org', 15553456789, 'Boomer', 'boomer@lwaysup.org', 15554567890), (2022, 2, 'frontend', 'Franky', 'frank@lwaysup.org', 15555678901, 'Fin', 'fin@alwaysup.org', 15556789012), (2022, 2, 'backend', 'Bonny', 'bonny@alwaysup.org', 15557890123, 'Bea', 'bea@alwaysup.org', 15558901234);
SELECT * FROM x UNPIVOT((x, x, x) FOR x IN ((x, x, x) AS "x", (x, x, x) AS x));
PRAGMA x;
CREATE TABLE x (x TEXT, x TEXT, x INT, x INT);
PIVOT x ON x USING SUM(x);
PIVOT x ON x, x USING SUM(x);
PIVOT x ON x IN ('xx') USING SUM(x);
PIVOT x ON (x, x) IN ('xx') USING SUM(x);
PIVOT x ON x IN ('xx', 'yy') USING SUM(x);
PRAGMA x;
CREATE OR REPLACE TABLE x (x INT, x INT, x TEXT);
INSERT INTO x VALUES (1, 10000, 'JAN'), (1, 400, 'JAN'), (2, 4500, 'JAN'), (2, 35000, 'JAN'), (1, 5000, 'FEB'), (1, 3000, 'FEB'), (2, 200, 'FEB'), (2, 90500, 'FEB'), (1, 6000, 'MAR'), (1, 5000, 'MAR'), (2, 2500, 'MAR'), (2, 9500, 'MAR'), (1, 8000, 'APR'), (1, 10000, 'APR'), (2, 800, 'APR'), (2, 4500, 'APR');
PRAGMA x;
CREATE TABLE x (x INT, x TEXT);
PIVOT x ON x IN ('a', 'b') USING SUM(x);
SET x = 0;
PIVOT x ON x IN ('a', 'b') USING GET_CURRENT_TIMESTAMP();
SET x = 100;
PIVOT x ON x IN ('a', 'b') USING GET_CURRENT_TIMESTAMP();
PIVOT x ON x IN ('a', 'b') USING SUM(41) OVER ();
PIVOT x ON x IN ('a', 'b') USING SUM(SUM(41) OVER ());
PIVOT x ON x IN ('a', 'b') USING SUM(SUM(41) OVER ());
PRAGMA x;
CREATE TABLE x (x TEXT, x TEXT, x INT, x INT);
INSERT INTO x VALUES ('NL', 'Amsterdam', 2000, 1005);
INSERT INTO x VALUES ('NL', 'Amsterdam', 2010, 1065);
INSERT INTO x VALUES ('NL', 'Amsterdam', 2020, 1158);
INSERT INTO x VALUES ('US', 'Seattle', 2000, 564);
INSERT INTO x VALUES ('US', 'Seattle', 2010, 608);
INSERT INTO x VALUES ('US', 'Seattle', 2020, 738);
INSERT INTO x VALUES ('US', 'New York City', 2000, 8015);
INSERT INTO x VALUES ('US', 'New York City', 2010, 8175);
INSERT INTO x VALUES ('US', 'New York City', 2020, 8772);
PIVOT x ON x, x IN ('xx') USING SUM(x);
PIVOT x ON x USING SUM(x);
SELECT x, x, "x", "x", "x" FROM (PIVOT x ON x USING SUM(x) AS x);
PIVOT x ON x USING SUM(x);
SELECT * FROM x PIVOT(SUM(x) FOR x IN (2000, 2010, 2020));
PIVOT x ON x IN (2000, 2020) USING SUM(x);
PIVOT x ON x USING SUM(x) GROUP BY x;
PIVOT x ON x USING SUM(x) GROUP BY x;
SELECT * FROM (PIVOT x ON x USING SUM(x) GROUP BY x) JOIN (PIVOT x ON x USING SUM(x) GROUP BY x) USING (x);
PIVOT x ON (x, x) IN ('xx') USING SUM(x);
PIVOT (SELECT x, x, x FROM x) ON x USING SUM(x) AS x, COUNT(x) AS x;
PIVOT x ON x USING SUM(x) AS x, COUNT(x) AS x GROUP BY x;
PIVOT x ON x USING SUM(x), COUNT(x) GROUP BY x;
PIVOT x ON x USING SUM(x), COUNT(x) GROUP BY x;
PIVOT x ON x USING SUM(x), COUNT(x) GROUP BY x;
PIVOT x ON x USING SUM(x), COUNT(x) GROUP BY x;
PIVOT x ON x USING SUM(x), COUNT(x) GROUP BY x;
PIVOT x ON x USING SUM(x), COUNT(x) GROUP BY x;
SET x = 0 AS x;
UNPIVOT x ON 2000, 2010, 2020 INTO NAME x VALUE x;
SELECT * FROM x UNPIVOT(x FOR x IN (2000, 2010, 2020));
UNPIVOT x ON 2000, 2010, 2020;
UNPIVOT x ON COLUMNS('\d+');
UNPIVOT x ON * EXCLUDE (x, x);
UNPIVOT x ON * EXCLUDE (x, x);
UNPIVOT x ON * EXCLUDE (x, x);
UNPIVOT x ON * EXCLUDE (x, x);
UNPIVOT x ON * EXCLUDE (x, x);
PRAGMA x;
CREATE TABLE x (x TEXT, x TEXT, x INT, x INT);
INSERT INTO x VALUES ('NL', 'Amsterdam', 2000, 1005);
INSERT INTO x VALUES ('NL', 'Amsterdam', 2010, 1065);
INSERT INTO x VALUES ('NL', 'Amsterdam', 2020, 1158);
INSERT INTO x VALUES ('US', 'Seattle', 2000, 564);
INSERT INTO x VALUES ('US', 'Seattle', 2010, 608);
INSERT INTO x VALUES ('US', 'Seattle', 2020, 738);
INSERT INTO x VALUES ('US', 'New York City', 2000, 8015);
INSERT INTO x VALUES ('US', 'New York City', 2010, 8175);
INSERT INTO x VALUES ('US', 'New York City', 2020, 8772);
PIVOT x ON x || '_' || x USING SUM(x) GROUP BY x;
PIVOT x ON (CASE WHEN x = 'NL' THEN NULL ELSE x END) USING SUM(x) GROUP BY x;
PIVOT x ON x || '_' || x USING COALESCE(SUM(x), 0) GROUP BY x;
PIVOT x ON x || '_' || x USING COALESCE(SUM(x), 0) GROUP BY x;
PIVOT x ON x || '_' || x USING COALESCE(SUM(x), 0) GROUP BY x;
PIVOT x ON x || '_' || x USING COALESCE(SUM(x), 0) GROUP BY x;
PIVOT x ON x || '_' || x USING COALESCE(SUM(x), 0) GROUP BY x;
PIVOT x ON MIN(x) OVER () USING SUM(x) GROUP BY x;
PIVOT x ON MIN(x) USING SUM(x) GROUP BY x;
PIVOT x ON NULL USING SUM(x) GROUP BY x;
PIVOT x ON 'hello world' USING SUM(x) GROUP BY x;
PIVOT x ON (SELECT x) USING SUM(x) GROUP BY x;
PRAGMA x;
CREATE TABLE x (x INT, x INT GENERATED ALWAYS AS (x * 5));
INSERT INTO x VALUES (0), (1), (2), (4);
SELECT 'AverageCost' AS x, "x", "x", "x", "x", "x" FROM (SELECT x, x FROM x) AS x PIVOT(AVG(x) FOR x IN (0, 1, 2, 3, 4)) AS x;
PRAGMA x;
CREATE TABLE x (x TEXT, x TEXT, x INT, x INT);
INSERT INTO x VALUES ('NL', 'Amsterdam', 2000, 1005);
INSERT INTO x VALUES ('NL', 'Amsterdam', 2010, 1065);
INSERT INTO x VALUES ('NL', 'Amsterdam', 2020, 1158);
INSERT INTO x VALUES ('US', 'Seattle', 2000, 564);
INSERT INTO x VALUES ('US', 'Seattle', 2010, 608);
INSERT INTO x VALUES ('US', 'Seattle', 2020, 738);
INSERT INTO x VALUES ('US', 'New York City', 2000, 8015);
INSERT INTO x VALUES ('US', 'New York City', 2010, 8175);
INSERT INTO x VALUES ('US', 'New York City', 2020, 8772);
PIVOT x ON (x = 'NL') USING AVG(x) GROUP BY x;
PIVOT x ON (x = 'NL') IN (FALSE, TRUE) USING AVG(x) GROUP BY x;
PRAGMA x;
CREATE TABLE x (x TEXT, x TEXT, x INT, x INT);
INSERT INTO x VALUES ('NL', 'Amsterdam', 2000, 1005);
INSERT INTO x VALUES ('NL', 'Amsterdam', 2010, 1065);
INSERT INTO x VALUES ('NL', 'Amsterdam', 2020, 1158);
INSERT INTO x VALUES ('US', 'Seattle', 2000, 564);
INSERT INTO x VALUES ('US', 'Seattle', 2010, 608);
INSERT INTO x VALUES ('US', 'Seattle', 2020, 738);
INSERT INTO x VALUES ('US', 'New York City', 2000, 8015);
INSERT INTO x VALUES ('US', 'New York City', 2010, 8175);
INSERT INTO x VALUES ('US', 'New York City', 2020, 8772);
PIVOT x ON x IN (SELECT x FROM x ORDER BY x DESC) USING SUM(x);
PIVOT x ON x IN (SELECT x FROM (SELECT x, SUM(x) AS x FROM x GROUP BY x ORDER BY x DESC)) USING SUM(x);
PIVOT x ON x IN (SELECT '2010' UNION ALL SELECT '2000' UNION ALL SELECT '2020') USING SUM(x);
PIVOT x ON x IN (SELECT x FROM x) USING SUM(x);
CREATE OR REPLACE TABLE x (x INT, x INT, x TEXT);
INSERT INTO x VALUES (1, 10000, '1-JAN'), (1, 400, '1-JAN'), (2, 4500, '1-JAN'), (2, 35000, '1-JAN'), (1, 5000, '2-FEB'), (1, 3000, '2-FEB'), (2, 200, '2-FEB'), (2, 90500, '2-FEB'), (1, 6000, '3-MAR'), (1, 5000, '3-MAR'), (2, 2500, '3-MAR'), (2, 9500, '3-MAR'), (1, 8000, '4-APR'), (1, 10000, '4-APR'), (2, 800, '4-APR'), (2, 4500, '4-APR');
PRAGMA x;
CREATE OR REPLACE TABLE x (x INT, x INT, x TEXT);
INSERT INTO x VALUES (1, 10000, 'JAN'), (1, 400, 'JAN'), (2, 4500, 'JAN'), (2, 35000, 'JAN'), (1, 5000, 'FEB'), (1, 3000, 'FEB'), (2, 200, 'FEB'), (2, 90500, 'FEB'), (1, 6000, 'MAR'), (1, 5000, 'MAR'), (2, 2500, 'MAR'), (2, 9500, 'MAR'), (1, 8000, 'APR'), (1, 10000, 'APR'), (2, 800, 'APR'), (2, 4500, 'APR');
CREATE VIEW x AS SELECT * FROM x PIVOT(SUM(x) FOR x IN ('JAN', 'FEB', 'MAR', 'APR')) AS x ORDER BY x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
CREATE TABLE x AS SELECT {'x': CAST(x AS TEXT), 'x': CAST(x AS TEXT)} AS x, x % 5 AS x, x % 10 AS x FROM x AS x;
CREATE TABLE x AS SELECT {'x': CAST(x AS TEXT), 'x': CAST(x AS TEXT)} AS x, x % 5 AS x, x % 10 AS x FROM x AS x;
PRAGMA x;
CREATE OR REPLACE TABLE x (x INT, x INT, x DATE);
INSERT INTO x VALUES (1, 10000, CAST('2000-01-01' AS DATE)), (1, 400, CAST('2000-01-07' AS DATE)), (2, 4500, CAST('2001-01-21' AS DATE)), (2, 35000, CAST('2001-01-21' AS DATE)), (1, 5000, CAST('2000-02-03' AS DATE)), (1, 3000, CAST('2000-02-07' AS DATE)), (2, 200, CAST('2001-02-05' AS DATE)), (2, 90500, CAST('2001-02-19' AS DATE)), (1, 6000, CAST('2000-03-01' AS DATE)), (1, 5000, CAST('2000-03-09' AS DATE)), (2, 2500, CAST('2001-03-03' AS DATE)), (2, 9500, CAST('2001-03-08' AS DATE));
INSERT INTO x VALUES (1, 10000, CAST('2000-01-01' AS DATE)), (1, 400, CAST('2000-01-07' AS DATE)), (2, 4500, CAST('2001-01-21' AS DATE)), (2, 35000, CAST('2001-01-21' AS DATE)), (1, 5000, CAST('2000-02-03' AS DATE)), (1, 3000, CAST('2000-02-07' AS DATE)), (2, 200, CAST('2001-02-05' AS DATE)), (2, 90500, CAST('2001-02-19' AS DATE)), (1, 6000, CAST('2000-03-01' AS DATE)), (1, 5000, CAST('2000-03-09' AS DATE)), (2, 2500, CAST('2001-03-03' AS DATE)), (2, 9500, CAST('2001-03-08' AS DATE));
PIVOT (PIVOT (SELECT YEAR(x) AS x, MONTH(x) AS x, x, x FROM x) ON x, x USING SUM(x)) ON x USING SUM(COALESCE("x", 0) + COALESCE("x", 0) + COALESCE("x", 0) + COALESCE("x", 0) + COALESCE("x", 0) + COALESCE("x", 0));
SELECT * FROM (PIVOT x ON x USING SUM(x) GROUP BY x) ORDER BY ALL;
SELECT * FROM (PIVOT x ON x USING SUM(x) GROUP BY x) ORDER BY ALL;
SELECT * FROM (SELECT x, x, x FROM x) PIVOT(SUM(x) FOR x IN ('COLLECT COD', 'DELIVER IN PERSON', 'NONE', 'TAKE BACK RETURN')) ORDER BY ALL;
SELECT * FROM (PIVOT (SELECT YEAR(x) AS x, x, x FROM x) ON x USING SUM(x)) ORDER BY ALL;
SELECT * FROM (SELECT YEAR(x) AS x, x, x FROM x) PIVOT(SUM(x) FOR x IN (1992, 1993, 1994, 1995, 1996, 1997, 1998)) ORDER BY ALL;
SELECT * FROM (SELECT YEAR(x) AS x, x, x FROM x) PIVOT(SUM(x) FOR x IN (1992, 1993, 1994, 1995, 1996, 1997, 1998)) ORDER BY ALL;
SELECT * FROM (SELECT YEAR(x) AS x, x, x FROM x) PIVOT(SUM(x) FOR x IN (1992, 1993, 1994, 1995, 1996, 1997, 1998)) ORDER BY ALL;
PRAGMA x;
CREATE OR REPLACE TABLE x (x INT, x INT, x TEXT, x INT);
INSERT INTO x VALUES (1, 10000, 'JAN', 2020), (1, 400, 'JAN', 2021), (2, 4500, 'JAN', 2021), (2, 35000, 'JAN', 2020), (1, 5000, 'FEB', 2020), (1, 3000, 'FEB', 2021), (2, 200, 'FEB', 2021), (2, 90500, 'FEB', 2020), (1, 6000, 'MAR', 2021), (1, 5000, 'MAR', 2021), (2, 2500, 'MAR', 2021), (2, 9500, 'MAR', 2021), (1, 8000, 'APR', 2020), (1, 10000, 'APR', 2020), (2, 800, 'APR', 2021), (2, 4500, 'APR', 2020);
INSERT INTO x VALUES (1, 10000, 'JAN', 2020), (1, 400, 'JAN', 2021), (2, 4500, 'JAN', 2021), (2, 35000, 'JAN', 2020), (1, 5000, 'FEB', 2020), (1, 3000, 'FEB', 2021), (2, 200, 'FEB', 2021), (2, 90500, 'FEB', 2020), (1, 6000, 'MAR', 2021), (1, 5000, 'MAR', 2021), (2, 2500, 'MAR', 2021), (2, 9500, 'MAR', 2021), (1, 8000, 'APR', 2020), (1, 10000, 'APR', 2020), (2, 800, 'APR', 2021), (2, 4500, 'APR', 2020);
INSERT INTO x VALUES (1, 10000, 'JAN', 2020), (1, 400, 'JAN', 2021), (2, 4500, 'JAN', 2021), (2, 35000, 'JAN', 2020), (1, 5000, 'FEB', 2020), (1, 3000, 'FEB', 2021), (2, 200, 'FEB', 2021), (2, 90500, 'FEB', 2020), (1, 6000, 'MAR', 2021), (1, 5000, 'MAR', 2021), (2, 2500, 'MAR', 2021), (2, 9500, 'MAR', 2021), (1, 8000, 'APR', 2020), (1, 10000, 'APR', 2020), (2, 800, 'APR', 2021), (2, 4500, 'APR', 2020);
SET x = 10000;
SET x = 10000;
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (0, 5.0885), (1, 223.88), (2, 359.1082), (4, 949.4105);
SELECT x, AVG(x) AS x FROM x GROUP BY x;
SELECT 'AverageCost' AS x, "x", "x", "x", "x", "x" FROM (SELECT x, x FROM x) AS x PIVOT(AVG(x) FOR x IN (0, 1, 2, 3, 4)) AS x;
CREATE OR REPLACE TABLE x (x INT, x INT, x TEXT);
INSERT INTO x VALUES (1, 10000, 'JAN'), (1, 400, 'JAN'), (2, 4500, 'JAN'), (2, 35000, 'JAN'), (1, 5000, 'FEB'), (1, 3000, 'FEB'), (2, 200, 'FEB'), (2, 90500, 'FEB'), (1, 6000, 'MAR'), (1, 5000, 'MAR'), (2, 2500, 'MAR'), (2, 9500, 'MAR'), (1, 8000, 'APR'), (1, 10000, 'APR'), (2, 800, 'APR'), (2, 4500, 'APR');
SELECT * FROM x PIVOT(SUM(x) FOR x IN ('JAN', 'FEB', 'MAR', 'APR')) AS x ORDER BY x;
SELECT * FROM x PIVOT(SUM(x + 1) FOR x IN ('JAN', 'FEB', 'MAR', 'DEC')) AS x ORDER BY x;
SELECT * FROM x PIVOT(SUM(x + 1) FOR x IN ('JAN', 'FEB', 'MAR', 'DEC')) AS x ORDER BY x;
SELECT x, x, x, x, x FROM x PIVOT(SUM(x) FOR x IN ('JAN' AS x, 'FEB' AS x, 'MAR' AS x, 'APR' AS x)) AS x ORDER BY x;
SELECT * FROM x PIVOT(SUM(x) FOR x IN ('JAN', 'FEB', 'MAR')) AS x ORDER BY x;
SELECT * FROM x PIVOT(SUM(x) FOR x IN ('JAN', 'FEB', 'MAR', 'DEC')) AS x ORDER BY x;
SELECT * FROM x PIVOT(SUM(x) FOR x IN ('JAN', 'FEB', 'MAR', 'APR')) AS x ORDER BY x;
INSERT INTO x VALUES (1, 250, NULL);
SELECT * FROM x PIVOT(SUM(x) FOR x IN (NULL, 'JAN', 'FEB', 'MAR', 'APR')) AS x ORDER BY x;
SELECT * FROM x PIVOT(SUM(x) FOR x IN (NULL, 'JAN', 'FEB', 'MAR', 'APR')) AS x UNPIVOT INCLUDE NULLS (x FOR x IN ("x", x, x, x, x)) ORDER BY ALL;
SELECT * FROM x PIVOT(SUM(x) FOR x IN (NULL, 'JAN', 'FEB', 'MAR', 'APR')) AS x UNPIVOT EXCLUDE NULLS (x FOR x IN ("x", x, x, x, x)) ORDER BY ALL;
SELECT * FROM x PIVOT(SUM(x) FOR x IN (NULL, 'JAN', 'FEB', 'MAR', 'APR')) AS x UNPIVOT EXCLUDE NULLS (x FOR x IN ("x", x, x, x, x)) ORDER BY x;
SELECT * FROM x PIVOT(SUM(x) FOR x IN ('JAN', 'JAN')) AS x ORDER BY x;
SELECT * FROM x PIVOT(COS(x) FOR x IN ('JAN', 'FEB', 'MAR', 'APR')) AS x ORDER BY x;
SELECT * FROM x PIVOT(SUM(x + (SELECT 42)) FOR x IN ('JAN', 'FEB', 'MAR', 'APR')) AS x ORDER BY x;
SELECT * FROM x PIVOT(SUM(x + ROW_NUMBER() OVER ()) FOR x IN ('JAN', 'FEB', 'MAR', 'APR')) AS x ORDER BY x;
SELECT * FROM x PIVOT(SUM(x) FOR x IN ('JAN', 'FEB', 'MAR', 'DEC')) AS x ORDER BY x;
SELECT * FROM x PIVOT(SUM(x) FOR x IN ()) AS x ORDER BY x;
SELECT * FROM x PIVOT(SUM(x) FOR x IN (*)) AS x ORDER BY x;
SELECT * FROM (SELECT x, x FROM x) AS x PIVOT(AVG(x) FOR x IN ('zz')) AS x;
PRAGMA x;
CREATE OR REPLACE TABLE x (x INT, x TEXT, x INT, x INT, x INT, x INT);
INSERT INTO x VALUES (1, 'electronics', 100, 200, 300, 100), (2, 'clothes', 100, 300, 150, 200), (3, 'cars', 200, 400, 100, 50);
SELECT * FROM x UNPIVOT(x FOR x IN (x, x, x, x)) ORDER BY x;
SELECT x, x, x, x, x FROM x UNPIVOT(x FOR x IN (x, x, x)) ORDER BY x;
SELECT * FROM x UNPIVOT(x FOR x IN (x AS x, x AS x, x AS x, x)) ORDER BY x;
SELECT x.x, x.x, x.x, x.x FROM x UNPIVOT(x FOR x IN (x, x, x, x)) AS x;
SELECT x, x, x, x, x FROM x UNPIVOT((x, x) FOR x IN ((x, x), (x, x)));
SELECT * FROM x UNPIVOT((x, x) FOR (x, x) IN ((x, x), (x, x)));
SELECT * FROM x UNPIVOT(x FOR x IN ((x, x), (x, x)));
SELECT * FROM x UNPIVOT((x, x, x) FOR x IN ((x, x), (x, x)));
SELECT x, x, x, x, x FROM x UNPIVOT((x, x) FOR x IN ((x, x), x));
SELECT x, x, x, x, x FROM x UNPIVOT(x FOR x IN (x, x, x, x)) ORDER BY x;
SELECT * FROM x UNPIVOT(x FOR x IN (x, x, x, x, x, x));
SELECT * FROM x UNPIVOT(x FOR x IN (x, x, x, x, x, x));
SELECT * FROM x UNPIVOT(x FOR x IN ()) ORDER BY x;
SELECT * FROM x UNPIVOT(x FOR x IN ('')) ORDER BY x;
SELECT * FROM x UNPIVOT(SUM(x) FOR x IN (x, x, x, x, x, x));
PRAGMA x;
CREATE TABLE x (x BIGINT, "x" BIGINT, "x" BIGINT, "x" BIGINT);
INSERT INTO x VALUES (10629465, 23, 47, 99);
INSERT INTO x VALUES (98765432, 10, 99, 33);
SELECT x, CAST(REGEXP_REPLACE(x, 'Sales [(]([0-9]+)/([0-9]+)/([0-9]+)[)]', '\3-\1-\2') AS DATE) AS x, x FROM x UNPIVOT(x FOR x IN ("x", "x", "x")) ORDER BY ALL;
SELECT x, CAST(REGEXP_REPLACE(x, 'Sales [(]([0-9]+)/([0-9]+)/([0-9]+)[)]', '\3-\1-\2') AS DATE) AS x, x FROM (UNPIVOT x ON "x", "x", "x" INTO NAME x VALUE x) ORDER BY ALL;
SELECT * FROM (UNPIVOT x ON "x" AS "x", "x" AS "x", "x" AS "x" INTO NAME x VALUE x) ORDER BY ALL;
SELECT x, CAST(REGEXP_REPLACE(x, 'Sales [(]([0-9]+)/([0-9]+)/([0-9]+)[)]', '\3-\1-\2') AS DATE) AS x, x FROM x UNPIVOT(x FOR x IN (COLUMNS('Sales.*'))) ORDER BY ALL;
SELECT x, CAST(REGEXP_REPLACE(x, 'Sales [(]([0-9]+)/([0-9]+)/([0-9]+)[)]', '\3-\1-\2') AS DATE) AS x, x FROM (UNPIVOT x ON COLUMNS('Sales.*') INTO NAME x VALUE x) ORDER BY ALL;
SELECT x, CAST(REGEXP_REPLACE(x, 'Sales [(]([0-9]+)/([0-9]+)/([0-9]+)[)]', '\3-\1-\2') AS DATE) AS x, x FROM (UNPIVOT x ON * EXCLUDE (x) INTO NAME x VALUE x) ORDER BY ALL;
PRAGMA x;
CREATE OR REPLACE TABLE x (x INT, x INT, x TEXT);
INSERT INTO x VALUES (1, 10000, '1-JAN'), (1, 400, '1-JAN'), (2, 4500, '1-JAN'), (2, 35000, '1-JAN'), (1, 5000, '2-FEB'), (1, 3000, '2-FEB'), (2, 200, '2-FEB'), (2, 90500, '2-FEB'), (1, 6000, '3-MAR'), (1, 5000, '3-MAR'), (2, 2500, '3-MAR'), (2, 9500, '3-MAR'), (1, 8000, '4-APR'), (1, 10000, '4-APR'), (2, 800, '4-APR'), (2, 4500, '4-APR');
PIVOT x ON x USING SUM(x);
SELECT * FROM (PIVOT x ON x USING SUM(x));
PIVOT x ON x USING SUM(x) GROUP BY x;
PIVOT x ON x IN ('1-JAN', '2-FEB', '3-MAR', '4-APR') USING SUM(x) GROUP BY x;
PIVOT x ON x IN ('1-JAN', '2-FEB', '3-MAR') USING SUM(x) GROUP BY x;
PIVOT x ON x USING SUM(x) GROUP BY x;
ALTER TABLE x ADD COLUMN x TEXT;
UPDATE x SET x = CASE WHEN x >= 10000 THEN 'important' ELSE 'regular' END;
SELECT * FROM (PIVOT x ON x USING SUM(x)) ORDER BY ALL;
SELECT * FROM (PIVOT x ON x USING SUM(x)) ORDER BY ALL;
SELECT * FROM (PIVOT x ON x USING SUM(x) GROUP BY x) ORDER BY ALL;
SELECT * FROM (PIVOT x ON x USING SUM(x) GROUP BY x) ORDER BY ALL;
WITH x AS (PIVOT x ON x USING SUM(x) GROUP BY x) SELECT * FROM x ORDER BY x DESC;
WITH x AS MATERIALIZED (PIVOT x ON x USING SUM(x) GROUP BY x) SELECT * FROM x ORDER BY x DESC;
SELECT * FROM x;
PRAGMA x;
UNPIVOT (SELECT 42 AS x, 'woot' AS x) ON CAST(x AS TEXT), x;
UNPIVOT (SELECT 42 AS x, 'woot' AS x) ON CAST(COLUMNS(*) AS TEXT);
UNPIVOT (SELECT 42 AS x, 'woot' AS x) ON CAST((x + 100) AS TEXT), x;
UNPIVOT (SELECT 42 AS x, 'woot' AS x) ON CAST((x + 100) AS TEXT) AS x, x;
SELECT * FROM (SELECT 42 AS x, 'woot' AS x) UNPIVOT("x" FOR "x" IN (CAST(x AS TEXT), x));
UNPIVOT (SELECT 42 AS x, 'woot' AS x) ON CAST((x + (SELECT x)) AS TEXT), x;
UNPIVOT (SELECT 42 AS x, 'woot' AS x) ON RANDOM(), x;
UNPIVOT (SELECT 42 AS x, 'woot' AS x) ON x + x;
UNPIVOT (SELECT 42 AS x, 'woot' AS x) ON CAST(x AS TEXT), x;
PRAGMA x;
CREATE TABLE x (x TEXT, x TEXT, x TEXT, x INT, x INT, x INT);
INSERT INTO x VALUES ('unpivot_names', 'unpivot_list', 'unpivot_list_2', 1, 2, 3);
UNPIVOT x ON COLUMNS('col*');
PRAGMA x;
CREATE TABLE x (x INT);
UNPIVOT x ON COLUMNS(* EXCLUDE (x));
PRAGMA x;
SELECT x, x FROM (DESCRIBE UNPIVOT (SELECT 42) ON COLUMNS(*));
SELECT x, x FROM (DESCRIBE UNPIVOT (SELECT {'x': 1}) ON COLUMNS(*));
PRAGMA x;
UNPIVOT (SELECT CAST(COLUMNS(*) AS TEXT) FROM (SELECT 42 AS x, 'woot' AS x)) ON COLUMNS(*);
CREATE TABLE x (x INT);
PRAGMA x = '${compression}' AS x;
PRAGMA x = 'uncompressed,rle';
PRAGMA x = 'dictionary,rle';
PRAGMA x = 'xzx';
SET x = FALSE;
SET x = TRUE;
SET x = '__TEST_DIR__/httplog.txt';
PRAGMA ENABLE_PROFILING();
PRAGMA x = 'unsupported';
PRAGMA x;
PRAGMA x = 'test.json';
PRAGMA x = '';
PRAGMA x = '${compression}' AS x;
PRAGMA x = 'unknown';
PRAGMA x = '1GB';
PRAGMA x = -1;
PRAGMA x = '-1';
PRAGMA x = 'none';
PRAGMA x = ' -1';
PRAGMA x = '1G';
PRAGMA x = '   1G';
PRAGMA x = '1GB';
PRAGMA x = '1gb';
PRAGMA x = '1GB';
PRAGMA x = '1.0gb';
PRAGMA x = '1.0 gb';
PRAGMA x = '488.2 MiB';
PRAGMA x = '1.0 gigabytes';
PRAGMA x = '100M';
PRAGMA x = '100MB';
PRAGMA x = '100mb';
PRAGMA x = '100 megabytes';
PRAGMA x = '10000K';
PRAGMA x = '10000KB';
PRAGMA x = '10000kb';
PRAGMA x = '10000 kilobytes';
PRAGMA x = '100000B';
PRAGMA x = '100000b';
PRAGMA x = '100000 bytes';
PRAGMA x = '0.01T';
PRAGMA x = '0.01TB';
PRAGMA x = '0.01tb';
PRAGMA x = '0.01 terabytes';
PRAGMA x = 100;
PRAGMA x = '0.01BG';
PRAGMA x = '0.01BLA';
PRAGMA x = '0.01PP';
PRAGMA x = '0.01TEST';
PRAGMA x;
PRAGMA MEMORY_LIMIT();
PRAGMA MEMORY_LIMIT(1, 2);
PRAGMA x = 'blabla';
PRAGMA x;
CREATE TABLE x (x INT, x INT);
PRAGMA x;
SELECT * FROM x;
ATTACH '__TEST_DIR__/test_metadata_info_attach.db' AS x;
CREATE TABLE x.x (x INT, x INT);
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
SELECT * FROM x;
SELECT x, x FROM x;
PRAGMA DATABASE_LIST();
PRAGMA x;
ATTACH '__TEST_DIR__/db_size.db' AS x;
CREATE TABLE x.x AS SELECT * FROM x;
DROP TABLE x.x;
SELECT x > 0 FROM x WHERE x = 'db1';
DETACH db1;
ATTACH '__TEST_DIR__/db_size.db' AS x (READ_ONLY);
SELECT x > 0 FROM x WHERE x = 'db1';
PRAGMA x;
PRAGMA x = 3;
CREATE TABLE x (x INT);
PRAGMA TABLE_INFO('integers');
PRAGMA x;
SELECT * FROM x;
SELECT x FROM x;
PRAGMA x;
SELECT * FROM x;
SELECT x FROM x;
SELECT COUNT(*) FROM x WHERE x LIKE 'v%';
SELECT CURRENT_SETTING('log_query_path');
PRAGMA x = '__TEST_DIR__/query_log.txt';
SELECT 42;
SELECT 100;
SELECT CURRENT_SETTING('log_query_path');
PRAGMA x = '';
SELECT * FROM x;
CREATE TABLE x (x INT, x INT);
CREATE TABLE x (x INT);
CREATE VIEW x AS SELECT CAST('1992-01-01' AS DATE) AS x;
CREATE TABLE x (x INT PRIMARY KEY, x TEXT UNIQUE);
CREATE SCHEMA x.x;
CREATE TABLE x.x (x INT UNIQUE);
CREATE INDEX x ON x.x(x);
CREATE TABLE x (x INT PRIMARY KEY);
CREATE INDEX x ON x(x);
DESCRIBE x.x;
DESCRIBE x;
DESCRIBE x;
DESCRIBE x;
PRAGMA "X"('t2');
DESCRIBE x;
PRAGMA x;
PRAGMA "X"('integers');
DESCRIBE x;
DESCRIBE x;
SELECT * FROM x ORDER BY ALL;
CREATE TEMPORARY VIEW x AS SELECT 42 AS x;
CREATE VIEW x AS SELECT 42 AS x;
CREATE SCHEMA x.x;
CREATE VIEW x.x AS SELECT 42 AS x;
SET x = 's1';
SELECT * FROM x;
PRAGMA x;
CREATE TABLE x (x INT, x INT);
PRAGMA STORAGE_INFO('integers');
INSERT INTO x VALUES (1, 1), (2, NULL), (3, 3), (4, 5);
PRAGMA STORAGE_INFO('integers');
CREATE VIEW x AS SELECT 42;
PRAGMA STORAGE_INFO('v1');
PRAGMA STORAGE_INFO('bla');
CREATE TABLE x (x INT, x TEXT, x STRUCT(x INT, x TEXT));
INSERT INTO x VALUES (1, 'hello', {'x': 3, 'x': 'hello'}), (2, 'world', {'x': 3, 'x': 'thisisaverylongstring'});
PRAGMA STORAGE_INFO('different_types');
CREATE TABLE x AS SELECT [1, 2, 3] AS x, [['hello', 'world'], [NULL]] AS x, [{'x': 3}, {'x': 4}] AS x;
CREATE TABLE x (x INT DEFAULT 1 + 3, x INT);
PRAGMA TABLE_INFO('integers');
PRAGMA TABLE_INFO(x);
PRAGMA x = 'integers';
PRAGMA x = x;
CREATE VIEW x AS SELECT CAST(42 AS INT) AS x, 'hello' AS x;
PRAGMA TABLE_INFO('v1');
CREATE VIEW x (x) AS SELECT CAST(42 AS INT) AS x, 'hello' AS x;
PRAGMA TABLE_INFO('v2');
CREATE VIEW x (x, x) AS SELECT CAST('1992-01-01' AS DATE), 'hello' AS x;
PRAGMA TABLE_INFO('v3');
CREATE SCHEMA x.x;
CREATE VIEW x.x AS SELECT CAST(42 AS INT) AS x, 'hello' AS x;
PRAGMA TABLE_INFO('test.v1');
PRAGMA TABLE_INFO('nonexistant_table');
CREATE TABLE x (x INT PRIMARY KEY DEFAULT (3), x BLOB NOT NULL);
PRAGMA TABLE_INFO(x);
CREATE TABLE x (x INT, x INT, x INT, x INT UNIQUE, PRIMARY KEY (x, x, x));
PRAGMA TABLE_INFO(x);
PRAGMA TABLE_INFO(1, 2, 3);
CREATE TABLE x (x INT, x INT GENERATED ALWAYS AS (x + 1));
SELECT * FROM x;
PRAGMA x;
CREATE VIEW x AS SELECT 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x, 1 AS x;
SELECT COUNT(DISTINCT x) FROM x;
CREATE TABLE x AS SELECT * FROM x;
SELECT COUNT(DISTINCT x) FROM x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x = 'all';
PRAGMA x = 'unknown';
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x = 'none';
PRAGMA x = 'unknown';
PRAGMA x;
PRAGMA x = 4;
CREATE TABLE x AS SELECT x AS x, x AS x FROM x AS x;
PRAGMA x = 'json';
PRAGMA x = '__TEST_DIR__/profiling_output.json';
PRAGMA x = '{"BLOCKED_THREAD_TIME": "true"}';
SELECT (SELECT COUNT(*) FROM x WHERE x = 1) + (SELECT COUNT(*) FROM x WHERE x = 1);
PRAGMA x;
SELECT UNNEST(x) FROM (SELECT CURRENT_SETTING('custom_profiling_settings') AS x, x.trim('{}') AS x, STR_SPLIT(x, ', ') AS x) ORDER BY ALL;
PRAGMA x;
PRAGMA x = 'json';
PRAGMA x = '__TEST_DIR__/profiling_output.json';
PRAGMA x = '{"CPU_TIME": "false", "EXTRA_INFO": "true", "OPERATOR_CARDINALITY": "true", "OPERATOR_TIMING": "true", "LATENCY": "true"}';
SELECT UNNEST(['Maia', 'Thijs', 'Mark', 'Hannes', 'Tom', 'Max', 'Carlo', 'Sam', 'Tania']) AS x ORDER BY RANDOM();
PRAGMA x;
SELECT UNNEST(x) FROM (SELECT CURRENT_SETTING('custom_profiling_settings') AS x, x.trim('{}') AS x, STR_SPLIT(x, ', ') AS x) ORDER BY ALL;
CREATE OR REPLACE TABLE x AS SELECT * FROM x;
SELECT x FROM x;
SELECT x, x FROM x;
PRAGMA x = '{"CPU_TIME": "true", "EXTRA_INFO": "true", "CUMULATIVE_CARDINALITY": "true", "CUMULATIVE_ROWS_SCANNED": "true"}';
SELECT UNNEST(x) FROM (SELECT CURRENT_SETTING('custom_profiling_settings') AS x, x.trim('{}') AS x, STR_SPLIT(x, ', ') AS x) ORDER BY ALL;
PRAGMA x = 'json';
PRAGMA x = '__TEST_DIR__/profiling_output.json';
SELECT UNNEST(['Maia', 'Thijs', 'Mark', 'Hannes', 'Tom', 'Max', 'Carlo', 'Sam', 'Tania']) AS x ORDER BY RANDOM();
PRAGMA x;
CREATE OR REPLACE TABLE x AS SELECT * FROM x;
SELECT CASE WHEN x > 0 THEN 'true' ELSE 'false' END FROM x;
SELECT CASE WHEN x > 0 THEN 'true' ELSE 'false' END FROM x;
SELECT CASE WHEN x > 0 THEN 'true' ELSE 'false' END FROM x;
PRAGMA x;
PRAGMA x = '}}}}}}';
PRAGMA x = x;
PRAGMA x = [x];
PRAGMA x = '{"INVALID_SETTING": "true"}';
PRAGMA x;
PRAGMA x = 'json';
PRAGMA x = '__TEST_DIR__/profiling_output.json';
PRAGMA x = '{"SYSTEM_PEAK_BUFFER_MEMORY": "true", "SYSTEM_PEAK_TEMP_DIR_SIZE": "true"}';
SET x = '0.7gb';
SET x = '0.7gb';
PRAGMA x;
CREATE OR REPLACE TABLE x AS SELECT * FROM x;
SELECT x <> 0, x <> 0, ROUND((x + x) / 1e9) FROM x;
PRAGMA x;
PRAGMA x = 'json';
PRAGMA x = '__TEST_DIR__/profiling_output.json';
PRAGMA x = '{"ALL_OPTIMIZERS": "true"}';
SELECT UNNEST(['Maia', 'Thijs', 'Mark', 'Hannes', 'Tom', 'Max', 'Carlo', 'Sam', 'Tania']) AS x ORDER BY RANDOM();
PRAGMA x;
SELECT * FROM (SELECT UNNEST(x) AS x FROM (SELECT CURRENT_SETTING('custom_profiling_settings') AS x, x.trim('{}') AS x, STR_SPLIT(x, ', ') AS x)) WHERE NOT '"true"' IN x ORDER BY ALL;
PRAGMA x = '{}';
SELECT UNNEST(['Maia', 'Thijs', 'Mark', 'Hannes', 'Tom', 'Max', 'Carlo', 'Sam', 'Tania']) AS x ORDER BY RANDOM();
SELECT UNNEST(x) FROM (SELECT CURRENT_SETTING('custom_profiling_settings') AS x, x.trim('{}') AS x, STR_SPLIT(x, ', ') AS x);
PRAGMA x = '{"OPTIMIZER_JOIN_ORDER": "true"}';
SELECT UNNEST(['Maia', 'Thijs', 'Mark', 'Hannes', 'Tom', 'Max', 'Carlo', 'Sam', 'Tania']) AS x ORDER BY RANDOM();
PRAGMA x;
SELECT UNNEST(x) FROM (SELECT CURRENT_SETTING('custom_profiling_settings') AS x, x.trim('{}') AS x, STR_SPLIT(x, ', ') AS x) ORDER BY ALL;
CREATE OR REPLACE TABLE x AS SELECT * FROM x;
SELECT CASE WHEN x > 0 THEN 'true' ELSE 'false' END FROM x;
SET x = 'JOIN_ORDER';
PRAGMA x = '{"OPTIMIZER_JOIN_ORDER": "true"}';
SELECT UNNEST(['Maia', 'Thijs', 'Mark', 'Hannes', 'Tom', 'Max', 'Carlo', 'Sam', 'Tania']) AS x ORDER BY RANDOM();
SELECT UNNEST(x) FROM (SELECT CURRENT_SETTING('custom_profiling_settings') AS x, x.trim('{}') AS x, STR_SPLIT(x, ', ') AS x) ORDER BY ALL;
PRAGMA x = '{"CUMULATIVE_OPTIMIZER_TIMING": "true"}';
SELECT UNNEST(['Maia', 'Thijs', 'Mark', 'Hannes', 'Tom', 'Max', 'Carlo', 'Sam', 'Tania']) AS x ORDER BY RANDOM();
PRAGMA x;
CREATE OR REPLACE TABLE x AS SELECT * FROM x;
SELECT CASE WHEN x > 0 THEN 'true' ELSE 'false' END FROM x;
SET x = 'detailed';
PRAGMA x;
SELECT UNNEST(['Maia', 'Thijs', 'Mark', 'Hannes', 'Tom', 'Max', 'Carlo', 'Sam', 'Tania']) AS x ORDER BY RANDOM();
SELECT * FROM (SELECT UNNEST(x) AS x FROM (SELECT CURRENT_SETTING('custom_profiling_settings') AS x, x.trim('{}') AS x, STR_SPLIT(x, ', ') AS x)) WHERE NOT '"true"' IN x ORDER BY ALL;
PRAGMA x = 'standard';
SELECT UNNEST(['Maia', 'Thijs', 'Mark', 'Hannes', 'Tom', 'Max', 'Carlo', 'Sam', 'Tania']) AS x ORDER BY RANDOM();
SELECT UNNEST(x) FROM (SELECT CURRENT_SETTING('custom_profiling_settings') AS x, x.trim('{}') AS x, STR_SPLIT(x, ', ') AS x) ORDER BY ALL;
PRAGMA x;
PRAGMA x = 'json';
PRAGMA x = '__TEST_DIR__/profiling_output.json';
PRAGMA x = '__TEST_DIR__/profiling_output.json';
SELECT x.x FROM x JOIN x ON x.x = x.x JOIN x ON x.x = x.x JOIN x ON x.x = x.x JOIN x ON x.x = x.x JOIN x ON x.x = x.x JOIN x ON x.x = x.x;
PRAGMA x;
SELECT UNNEST(x) FROM (SELECT CURRENT_SETTING('custom_profiling_settings') AS x, x.trim('{}') AS x, STR_SPLIT(x, ', ') AS x) ORDER BY ALL;
CREATE OR REPLACE TABLE x AS SELECT * FROM x;
SELECT CASE WHEN x > 0 THEN 'true' ELSE 'false' END FROM x;
SELECT CASE WHEN x > 0 THEN 'true' ELSE 'false' END FROM x;
PRAGMA x;
PRAGMA x = 'json';
PRAGMA x = '__TEST_DIR__/profiling_output.json';
PRAGMA x = '{"RESULT_SET_SIZE": "true", "OPERATOR_CARDINALITY": "true"}';
SELECT UNNEST(['Maia', 'Thijs', 'Mark', 'Hannes', 'Tom', 'Max', 'Carlo', 'Sam', 'Tania']) AS x ORDER BY RANDOM();
PRAGMA x;
CREATE OR REPLACE TABLE x AS SELECT * FROM x;
SELECT CASE WHEN x = 144 THEN CAST(TRUE AS Result) ELSE CAST(x AS Result) END AS x FROM x;
PRAGMA x;
PRAGMA x = 'json';
PRAGMA x = '__TEST_DIR__/profiling_output.json';
PRAGMA x = '{"OPERATOR_CARDINALITY": "true", "OPERATOR_ROWS_SCANNED": "true", "CUMULATIVE_CARDINALITY": "true", "CUMULATIVE_ROWS_SCANNED": "true"}';
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3), (NULL);
SELECT * FROM x AS x, x AS x WHERE x.x = x.x ORDER BY 1;
PRAGMA x;
CREATE OR REPLACE TABLE x AS SELECT * FROM x;
SELECT x, x FROM x;
SELECT CASE WHEN x > 0 THEN 'true' ELSE 'false' END FROM x;
PRAGMA x = 'json';
PRAGMA x = '__TEST_DIR__/profiling_output.json';
PRAGMA x = '{"CUMULATIVE_CARDINALITY": "true", "CUMULATIVE_ROWS_SCANNED": "true", "BLOCKED_THREAD_TIME": "true"}';
SELECT * FROM x AS x, x AS x WHERE x.x = x.x ORDER BY 1;
PRAGMA x;
CREATE OR REPLACE TABLE x AS SELECT * FROM x;
SELECT CASE WHEN x > 0 THEN 'true' ELSE 'false' END FROM x;
PRAGMA x;
PRAGMA x = 'json';
PRAGMA x = '__TEST_DIR__/profiling_output.json';
SELECT UNNEST(['Maia', 'Thijs', 'Mark', 'Hannes', 'Tom', 'Max', 'Carlo', 'Sam', 'Tania']) AS x ORDER BY RANDOM();
PRAGMA x;
SELECT UNNEST(x) FROM (SELECT CURRENT_SETTING('custom_profiling_settings') AS x, x.trim('{}') AS x, STR_SPLIT(x, ', ') AS x) ORDER BY ALL;
CREATE OR REPLACE TABLE x AS SELECT * FROM x;
PRAGMA x;
PRAGMA x = 'json';
PRAGMA x = '__TEST_DIR__/profiling_output.json';
PRAGMA x = '{}';
SELECT UNNEST(['Maia', 'Thijs', 'Mark', 'Hannes', 'Tom', 'Max', 'Carlo', 'Sam', 'Tania']) AS x ORDER BY RANDOM();
PRAGMA x;
SELECT UNNEST(x) FROM (SELECT CURRENT_SETTING('custom_profiling_settings') AS x, x.trim('{}') AS x, STR_SPLIT(x, ', ') AS x) ORDER BY ALL;
CREATE OR REPLACE TABLE x AS SELECT * FROM x;
SELECT x FROM x;
SELECT x FROM x;
SELECT x FROM x;
SELECT x FROM x;
SELECT x FROM x;
SELECT ?;
CREATE VIEW x AS SELECT ?;
CREATE TABLE x (x INT, x TEXT);
INSERT INTO x VALUES (1, 'hello');
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
SELECT x FROM x AS x;
PRAGMA x;
PRAGMA x;
SELECT 'sel' AS x, * FROM (SELECT 'from' AS x);
PRAGMA x;
CREATE TABLE x (x TEXT);
PRAGMA x;
PRAGMA x;
PRAGMA x;
SELECT x FROM x AS x LIMIT 5 OFFSET 3;
PRAGMA x;
CREATE TABLE x AS SELECT 1 AS x, 'Mark' AS x;
SUMMARIZE SELECT * FROM x WHERE x = 1;
DESCRIBE SELECT * FROM x WHERE x = 1;
SELECT * FROM x;
PRAGMA x;
PRAGMA x;
CREATE TABLE x (x TIMESTAMP, x INT, x TEXT, x TEXT, x INT, x DOUBLE);
PRAGMA x;
CREATE TABLE x (x TINYINT);
INSERT INTO x VALUES (1), (2), (3), (4), (5);
SELECT * FROM x ORDER BY 1;
SELECT * FROM x ORDER BY 1;
CREATE TABLE x (x TINYINT);
INSERT INTO x VALUES (1), (2), (3), (4), (5);
SELECT * FROM x ORDER BY 1;
SELECT * FROM x ORDER BY 1;
DROP TABLE x CASCADE;
CREATE TABLE x (x TINYINT);
INSERT INTO x VALUES (1), (2), (3), (4), (5);
SELECT * FROM x ORDER BY 1;
SELECT * FROM x ORDER BY 1;
CREATE TABLE x (x TINYINT);
DROP TABLE x;
CREATE TABLE x (x TINYINT);
SELECT * FROM x;
CREATE TABLE x (x INT);
SELECT COUNT(*), MIN(x), MAX(x) FROM x;
DROP TABLE x;
DROP TABLE x;
CREATE TABLE x AS SELECT 42 AS x;
CREATE TABLE x (x TINYINT);
SELECT x FROM x;
SELECT x FROM x;
SELECT x FROM x;
CREATE TABLE x (x TINYINT);
INSERT INTO x VALUES (42);
SELECT * FROM x WHERE x = $1;
SELECT * FROM x WHERE x = CAST($1 AS TEXT);
CREATE TABLE x (x TINYINT, x SMALLINT, x INT, x BIGINT, x REAL, x DOUBLE, x DATE, x TEXT);
SELECT * FROM x;
PRAGMA x;
CREATE TABLE x (x TEXT);
COPY x TO '__TEST_DIR__/progress_bar_lineitem.parquet' WITH (FORMAT 'parquet');
COPY x TO '__TEST_DIR__/progress_bar_lineitem2.parquet' WITH (FORMAT 'parquet');
PRAGMA x = 1;
PRAGMA x;
SELECT x, x, SUM(x) AS x, SUM(x) AS x, SUM(x * (1 - x)) AS x, SUM(x * (1 - x) * (1 + x)) AS x, AVG(x) AS x, AVG(x) AS x, AVG(x) AS x, COUNT(*) AS x FROM x WHERE x <= CAST('1998-09-02' AS DATE) GROUP BY x, x ORDER BY x, x;
SELECT x, x, SUM(x) AS x, SUM(x) AS x, SUM(x * (1 - x)) AS x, SUM(x * (1 - x) * (1 + x)) AS x, AVG(x) AS x, AVG(x) AS x, AVG(x) AS x, COUNT(*) AS x FROM x WHERE x <= CAST('1998-09-02' AS DATE) GROUP BY x, x ORDER BY x, x;
PRAGMA x = 4;
PRAGMA x;
SELECT x, x, SUM(x) AS x, SUM(x) AS x, SUM(x * (1 - x)) AS x, SUM(x * (1 - x) * (1 + x)) AS x, AVG(x) AS x, AVG(x) AS x, AVG(x) AS x, COUNT(*) AS x FROM x WHERE x <= CAST('1998-09-02' AS DATE) GROUP BY x, x ORDER BY x, x;
PRAGMA x;
SELECT COALESCE(1, CAST('hello' AS INT));
SELECT COALESCE(NULL, CAST('hello' AS INT));
CREATE TABLE x AS SELECT * FROM (VALUES (1, 'hello'), (NULL, '2'), (3, NULL)) AS x;
SELECT COALESCE(x, CAST(x AS INT)) FROM x;
SELECT COALESCE(NULL, CAST(x AS INT)) FROM x;
PRAGMA x;
CREATE TABLE x AS SELECT CASE WHEN x % 2 = 0 THEN NULL ELSE x END AS x FROM x AS x;
SELECT x, COALESCE(x + x, x) FROM x ORDER BY x;
SELECT x, x, x + x, COALESCE(x + x, NULL) IS NULL OR x + 3 = 6 FROM x ORDER BY x;
PRAGMA x;
CREATE TABLE x (x INT, x INT, x INT);
INSERT INTO x VALUES (1, 2, 3);
SELECT * EXCLUDE (x) FROM x;
SELECT * EXCLUDE (x, x) FROM x;
SELECT * EXCLUDE (x) FROM x;
SELECT * EXCLUDE (x) FROM x;
SELECT * EXCLUDE ("x") FROM x;
SELECT * EXCLUDE (x, x, x) FROM x;
SELECT x.* EXCLUDE (x) FROM x;
SELECT x.* EXCLUDE ('i') FROM x;
SELECT x.* EXCLUDE (x, x) FROM x;
SELECT x.* EXCLUDE (x) FROM x;
SELECT x.* EXCLUDE (x, x), * EXCLUDE (x, x), * EXCLUDE (x, x) FROM x;
SELECT x.* EXCLUDE (x, x, x) FROM x;
SELECT * EXCLUDE (x, x) FROM x AS x, x AS x;
SELECT x.* EXCLUDE (x, x), x.* EXCLUDE (x, x, x) FROM x AS x, x AS x;
SELECT x.* EXCLUDE (x, x), x.* EXCLUDE (x) FROM x AS x, x AS x;
SELECT * EXCLUDE (x) FROM x AS x JOIN x AS x USING (x);
SELECT * EXCLUDE (x.x) FROM x;
SELECT * EXCLUDE (x.x, x.x) FROM x;
SELECT x.* EXCLUDE (x.x, x.x) FROM x;
SELECT * EXCLUDE (x.x, x.x) FROM x;
SELECT * EXCLUDE (x.x, x.x, x.x) FROM x;
SELECT * EXCLUDE (x.x) FROM x;
SELECT * EXCLUDE (x.x, x.x) FROM x AS x JOIN x AS x USING (x);
SELECT * EXCLUDE (x, x) FROM x;
SELECT * EXCLUDE (x.x, x) FROM x;
SELECT * EXCLUDE (x) FROM x;
SELECT x.* EXCLUDE (x) FROM x;
PRAGMA x;
CREATE TABLE x (x INT, x INT, x INT);
INSERT INTO x VALUES (1, 2, 3);
SELECT COLUMNS(x -> x LIKE 'col%') FROM x;
SELECT * LIKE 'col%' FROM x;
SELECT NOT * LIKE 'col%' FROM x;
SELECT * ILIKE 'COL%' FROM x;
SELECT * SIMILAR TO '.*col.*' FROM x;
SELECT * EXCLUDE (x) SIMILAR TO '.*col.*' FROM x;
SELECT x, x FROM (SELECT * SIMILAR TO 'number(\d+)' AS "x" FROM (SELECT 1 AS x, 2 AS x, 3 AS x));
SELECT x FROM (SELECT NOT * LIKE '%number%' AS x FROM (SELECT 1 AS x, 2 AS x, 3 AS x));
SELECT * LIKE '\_%' ESCAPE '\' AS x FROM (SELECT 1 AS x, 2 AS x);
SELECT NOT * LIKE '\_%' ESCAPE '\' AS x FROM (SELECT 1 AS x, 2 AS x);
SELECT * ILIKE '\_NUM%' ESCAPE '\' AS x FROM (SELECT 1 AS x, 2 AS x);
SELECT NOT * ILIKE '\_NUM%' ESCAPE '\' AS x FROM (SELECT 1 AS x, 2 AS x);
SELECT * SIMILAR TO x FROM x, (SELECT '.*col.*') AS x;
SELECT * + 42 FROM x;
SELECT * REPLACE (x + 42 AS x) SIMILAR TO '.*col.*' FROM x;
SELECT * RENAME (x AS x) SIMILAR TO '.*col.*' FROM x;
PRAGMA x;
CREATE TABLE x (x INT, x INT, x INT);
INSERT INTO x VALUES (1, 2, 3);
SELECT x FROM (SELECT * RENAME (x AS x) FROM x);
SELECT x FROM (SELECT COLUMNS(* RENAME (x AS x)) FROM x);
SELECT x FROM (SELECT * RENAME (x.x AS x) FROM x);
SELECT x FROM (SELECT x.* RENAME (x.x AS x) FROM x);
SELECT x, x FROM (SELECT * RENAME (x.x AS x, x AS x) FROM x);
SELECT x, x FROM (SELECT * RENAME (x.x AS x, x AS x) FROM x);
SELECT x FROM (SELECT * EXCLUDE (x) RENAME (x AS x) FROM x);
SELECT x FROM (SELECT x.* RENAME (x AS x) FROM (SELECT {'x': 42} AS x));
SELECT x FROM (SELECT * RENAME (x AS x) FROM x AS x JOIN x AS x USING (x));
SELECT x, x FROM (SELECT * RENAME (x.x AS x, x.x AS x) FROM x AS x JOIN x AS x USING (x));
SELECT x FROM (SELECT * RENAME (x AS x) FROM x AS x LEFT JOIN x AS x USING (x));
SELECT x FROM (SELECT * RENAME (x.x AS x) FROM x AS x FULL OUTER JOIN x AS x USING (x));
SELECT * EXCLUDE (x) RENAME (x AS x) FROM x;
SELECT * REPLACE (x + 1 AS x) RENAME (x AS x) FROM x;
PRAGMA x;
CREATE TABLE x (x INT, x INT, x INT);
INSERT INTO x VALUES (1, 2, 3);
SELECT * REPLACE (x + 100 AS x) FROM x;
SELECT * EXCLUDE (x, x) REPLACE (x + 100 AS x), * EXCLUDE (x) REPLACE (x + 100 AS x), * EXCLUDE (x, x) REPLACE (x + 101 AS x) FROM x;
SELECT * REPLACE (x + 100 AS x, x + 200 AS "x") FROM x;
SELECT x.* REPLACE (x + 100 AS x) FROM x;
SELECT * REPLACE (x + 100 AS x, x + 200 AS x) FROM x;
SELECT * REPLACE (x + 100 AS x) FROM x;
SELECT x.* REPLACE (x + 100 AS x) FROM x;
SELECT * EXCLUDE (x) REPLACE (x + 100 AS x) FROM x;
PRAGMA x;
CREATE TABLE x (x STRUCT(x INT, x INT));
INSERT INTO x VALUES ({'x': 1, 'x': 2});
SELECT x.* FROM x;
SELECT x.* EXCLUDE (x) FROM x;
SELECT x.* EXCLUDE (x) FROM x;
SELECT x.* REPLACE (x.x + 3 AS x) FROM x;
SELECT x.* REPLACE (x.x + 3 AS x) FROM x;
SELECT x.* REPLACE (x.x + 3 AS x) FROM x;
SELECT x.* FROM x, x;
SET x = 'nulls_first';
SET x = 'nulls_first';
DROP TABLE IF EXISTS x;
DROP TABLE IF EXISTS x;
INSERT INTO x VALUES (42, 10), (43, 100), (NULL, 1), (45, 0);
INSERT INTO x VALUES (42, 10), (43, 100), (NULL, 1), (45, 0);
SELECT COALESCE(NULL);
SELECT COALESCE(NULL);
SELECT COALESCE(x) FROM x;
SELECT COALESCE(NULL, NULL, 42, 43);
SELECT COALESCE(NULL, NULL, 42);
SELECT COALESCE(42, NULL, 43);
SELECT COALESCE(NULL, NULL, NULL);
SELECT COALESCE(x, x) FROM x;
SELECT COALESCE(NULL, NULL, NULL, x, NULL, x) FROM x;
SELECT * FROM x WHERE x = 1 OR COALESCE(x, x) = 42 ORDER BY 1;
SELECT * FROM x WHERE COALESCE(x, x) = 1 OR COALESCE(x, x) = 43 OR COALESCE(x, x) = 45 ORDER BY 1;
SELECT * FROM x WHERE COALESCE(x, x) = 1 OR COALESCE(x, x) = 42 OR COALESCE(x, x) = 43 OR COALESCE(x, x) = 45 ORDER BY 1;
SELECT * FROM x WHERE x = 1 AND COALESCE(x, x) = 1 ORDER BY 1;
SELECT * FROM x WHERE (x = 1 AND COALESCE(x, x) = 1) OR (x = 100 AND COALESCE(x, x) = 43) ORDER BY 1;
CREATE TABLE x (x TEXT, x TEXT);
INSERT INTO x (x) VALUES ('thisisalongstring'), ('thisisalsoalongstring'), ('hello'), ('world'), ('duckduckduckduckduck'), (NULL);
SELECT COALESCE(x, x) FROM x;
SELECT COALESCE(x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x) FROM x;
SELECT COALESCE(x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, 'default') FROM x;
SELECT COALESCE(x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x) FROM x WHERE NOT x LIKE 'this%';
CREATE TABLE x AS SELECT * FROM (VALUES (NULL, NULL, NULL, NULL, NULL, NULL), ('thisisalongstring', NULL, NULL, NULL, NULL, NULL), (NULL, 'thisisalsoalongstring', NULL, NULL, NULL, NULL), (NULL, NULL, 'hello', NULL, NULL, NULL), (NULL, NULL, NULL, 'world', NULL, NULL), (NULL, NULL, NULL, NULL, 'duckduckduckduckduck', NULL), (NULL, NULL, NULL, NULL, NULL, NULL)) AS x;
SELECT COALESCE(x, x, x, x, x) FROM x;
SELECT COALESCE(x, x, x, x, x) FROM x;
SELECT COALESCE(x, x, x, x, x) FROM x WHERE NOT COALESCE(x, x, x, x, x) IS NULL;
CREATE TABLE x AS SELECT * FROM (VALUES (NULL, NULL, NULL, NULL, NULL, NULL), ([1, 2, 3], NULL, NULL, NULL, NULL, NULL), (NULL, [4, 5, 6, 7, 8, 9], NULL, NULL, NULL, NULL), (NULL, NULL, [], NULL, NULL, NULL), (NULL, NULL, NULL, [10, 11, NULL, 13, 14, 15, 16], NULL, NULL), (NULL, NULL, NULL, NULL, [NULL, 18, NULL, 20], NULL), (NULL, NULL, NULL, NULL, NULL, NULL)) AS x;
SELECT COALESCE(x, x, x, x, x) FROM x;
SELECT COALESCE(x, x, x, x, x) FROM x;
SELECT COALESCE(x, x, x, x, x) FROM x WHERE NOT COALESCE(x, x, x, x, x) IS NULL;
CREATE TABLE x AS SELECT * FROM (VALUES (NULL, NULL, NULL, NULL, NULL, NULL), (CAST([NULL, [NULL, NULL]] AS STRUCT(x INT[])[][]), NULL, NULL, NULL, NULL, NULL), (NULL, [[{'x': [3, 4]}], [{'x': [17]}, {'x': [22, NULL]}]], NULL, NULL, NULL, NULL), (NULL, NULL, CAST([[], [], []] AS STRUCT(x INT[])[][]), NULL, NULL, NULL), (NULL, NULL, NULL, CAST([[{'x': NULL}], NULL, [NULL, NULL], []] AS STRUCT(x INT[])[][]), NULL, NULL), (NULL, NULL, NULL, NULL, [[{'x': [10, 12, 13, 14, 15]}], [{'x': [NULL]}, NULL]], NULL), (NULL, NULL, NULL, NULL, NULL, NULL)) AS x;
SELECT COALESCE(x, x, x, x, x) FROM x;
SELECT COALESCE(x, x, x, x, x) FROM x;
SELECT COALESCE(x, x, x, x, x) FROM x WHERE NOT COALESCE(x, x, x, x, x) IS NULL;
SELECT UNNEST(COALESCE(x, x, x, x, x)) FROM x;
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (42, 10), (43, 100), (NULL, 1), (45, -1);
SELECT * FROM x;
SELECT x FROM x WHERE x BETWEEN 43 AND 44;
SELECT x FROM x WHERE NOT x BETWEEN 43 AND 44;
SELECT x FROM x WHERE x BETWEEN x AND 44;
SELECT CASE x WHEN 42 THEN 100 WHEN 43 THEN 200 ELSE 300 END FROM x;
SELECT CASE WHEN x = 42 THEN 100 WHEN x = 43 THEN 200 ELSE 300 END FROM x;
SELECT CASE WHEN x = 42 THEN 100 WHEN x = 43 THEN 200 END FROM x;
SELECT ABS(1), ABS(-1), ABS(NULL);
SELECT ABS(x) FROM x;
CREATE TABLE x (x INT, x INT, x INT);
INSERT INTO x VALUES (42, 42, 42), (43, 42, 42), (44, 41, 44);
SELECT * FROM x WHERE x IN (42, 43);
SELECT x IN (42, 43) FROM x;
SELECT * FROM x WHERE x IN (86, 103, 162);
SELECT * FROM x WHERE x IN (NULL, NULL, NULL, NULL);
SELECT * FROM x WHERE x IN (x);
SELECT * FROM x WHERE x IN (x, x);
SELECT * FROM x WHERE x IN (43, x) ORDER BY 1;
SELECT * FROM x WHERE NOT x IN (42, 43);
SELECT * FROM x WHERE NOT x IN (86, 103, 162) ORDER BY 1;
SELECT * FROM x WHERE NOT x IN (NULL, NULL);
SELECT * FROM x WHERE NOT x IN (x) ORDER BY 1;
SELECT * FROM x WHERE NOT x IN (x, x);
SELECT * FROM x WHERE NOT x IN (43, x);
SELECT * FROM x WHERE NULL IN ('a', 'b');
SELECT * FROM x WHERE NOT NULL IN ('a', 'b');
CREATE TABLE x (x INT, x TEXT);
INSERT INTO x VALUES (1, 'a'), (2, 'h'), (3, 'd');
INSERT INTO x VALUES (4, NULL);
SELECT x FROM x WHERE x = 'a';
SELECT x FROM x WHERE x <> 'a';
SELECT x FROM x WHERE x < 'h';
SELECT x FROM x WHERE x <= 'h';
SELECT x FROM x WHERE x > 'h';
SELECT x FROM x WHERE x >= 'h';
PRAGMA x;
CREATE VIEW x (x
SELECT SUM(x) FROM x;
SELECT SUM(x.x) FROM x AS x, x AS x;
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (42), (44);
SELECT x, * FROM x;
SELECT x + 1 FROM x WHERE CASE WHEN x = 42 THEN x = 0 ELSE x = 1 END;
SELECT * FROM x;
UPDATE x SET x = 5;
INSERT INTO x (x, x) VALUES (5, 6);
CREATE TABLE x (x INT);
INSERT INTO x VALUES (42), (22);
SELECT * FROM x ORDER BY 1;
SELECT x FROM x ORDER BY 1;
UPDATE x SET x = 5;
INSERT INTO x (x) VALUES (5);
SELECT * FROM x;
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (42);
SELECT x + 1, x - 1, x + x, x + x FROM x;
SELECT -x, x, ABS(x) FROM x;
SELECT x BETWEEN -1 AND 1, 0 BETWEEN x AND 1, 1 BETWEEN -3 AND x FROM x;
SELECT x < x, x = NULL, x = x, x <> 0 FROM x;
SELECT SUM(x), MIN(x), MAX(x), COUNT(x), FIRST(x) FROM x;
SELECT SUM(x), MIN(x), MAX(x), COUNT(x), LAST(x) FROM x;
SELECT COUNT(*) FROM x;
SELECT SUM(x), MIN(x), MAX(x), COUNT(x), FIRST(x), LAST(x) FROM x GROUP BY x;
SELECT SUM(x) FROM x GROUP BY x;
SELECT * FROM x, x AS x WHERE x.x = x.x;
SELECT * FROM x, x AS x WHERE x.x <> x.x;
SELECT * FROM x, x AS x WHERE x.x >= x.x;
SELECT * FROM x ORDER BY x;
INSERT INTO x SELECT x FROM x;
SELECT * FROM x ORDER BY 1;
UPDATE x SET x = x;
SELECT * FROM x ORDER BY 1;
SELECT * FROM x WHERE x = 0;
SELECT * FROM x WHERE x BETWEEN -100 AND 100 ORDER BY 1;
SELECT * FROM x WHERE x = 0 OR x = 1;
SELECT ROW_NUMBER() OVER (PARTITION BY x) FROM x ORDER BY x;
SELECT ROW_NUMBER() OVER (ORDER BY x) FROM x ORDER BY x;
SELECT ROW_NUMBER() OVER (ORDER BY x DESC) FROM x ORDER BY x;
SELECT (SELECT x FROM x LIMIT 1);
SELECT 0 IN (SELECT x FROM x);
SELECT EXISTS(SELECT x FROM x);
SELECT (SELECT x.x FROM x AS x WHERE x.x = x.x) FROM x;
SELECT x.x IN (SELECT x.x FROM x AS x WHERE x.x >= x.x) FROM x;
SELECT EXISTS(SELECT x.x FROM x AS x WHERE x.x >= x.x) FROM x;
PRAGMA x;
SELECT 42;
SELECT 42 + 1;
SELECT 2 * (42 + 1), 35 - 2;
SELECT 'hello';
SELECT CAST('3' AS INT);
SELECT CAST(3 AS TEXT);
SELECT CASE WHEN 43 > 33 THEN 43 ELSE 33 END;
SELECT 1 AS x, x * 2;
SELECT;
SELECT FROM (SELECT 42) AS x;
SELECT CASE WHEN NOT NOT 84 BETWEEN -78 + 98 * 51 AND -((-28)) * COUNT(*) + -65 THEN NULL ELSE 16 // 34 + -98 END // 70 - (- -CASE -COALESCE(73, -66 * -89 * -72) WHEN COUNT(*) // 4 * CAST(- -18 AS INT) + COUNT(*) - -88 THEN NULL WHEN 92 THEN NULL ELSE COUNT(*) END) AS x;
PRAGMA x;
CREATE TABLE x (x INT, x INT);
SELECT x, x FROM x;
SELECT * FROM x;
INSERT INTO x VALUES (42, 84);
SELECT * FROM x;
SELECT x, x FROM x AS x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (11, 22), (12, 21), (13, 22);
SELECT x, x FROM x;
SELECT x + 2, x FROM x WHERE x = 11;
SELECT x + 2, x FROM x WHERE x = 12;
SELECT CAST(x AS TEXT) FROM x;
SELECT CAST(CAST(x AS TEXT) AS INT) FROM x;
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (11, 22), (12, 21), (13, 22);
SELECT * FROM x;
SELECT x.* FROM x;
SELECT x.* FROM x AS x;
SELECT x.* FROM x AS x;
SELECT x.* FROM x;
SELECT x.*;
CREATE TABLE x (x INT, x INT);
INSERT INTO x (x, x) VALUES (1, 1), (1, 2), (1, 3), (1, 4), (1, 5);
SELECT x.x, x.x AS x, x.x AS x FROM x AS x INNER JOIN x AS x USING (x, x) ORDER BY x;
SELECT x.x, x.x AS x, x.x AS x FROM x AS x INNER JOIN x AS x ON x.x = x.x AND x.x = x.x ORDER BY x;
SELECT x.*, x.x AS x FROM x AS x INNER JOIN x AS x USING (x, x) ORDER BY x.x;
SELECT x.*, x.x AS x FROM x AS x INNER JOIN x AS x ON x.x = x.x AND x.x = x.x ORDER BY x.x;
SET x = 'nulls_first';
PRAGMA x;
SELECT * FROM (VALUES (NULL, NULL), (3, 4), (3, 7)) AS x;
SELECT * FROM (VALUES (1, 2, 3), (1, 2, 3)) AS x;
SELECT * FROM (VALUES (1 + 1, 2, 3), (1 + 3, 2, 3)) AS x;
SELECT * FROM (VALUES ((SELECT 42), 2, 3), (1 + 3, 2, 3)) AS x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 2), (3, 4);
SELECT * FROM (VALUES ((SELECT MIN(x) FROM x), 2, 3), ((SELECT MAX(x) FROM x), 2, 3)) AS x;
SELECT * FROM (VALUES ('hello', 2), (1 + 3, '5'), (CAST('1992-09-20' AS DATE), 3)) AS x;
SELECT * FROM (VALUES (CAST('1992-09-20' AS DATE), 3), (NULL, NULL)) AS x;
SELECT * FROM (VALUES (NULL, NULL)) AS x;
SELECT * FROM (VALUES (NULL, NULL), (3, 4)) AS x;
SELECT * FROM (VALUES (3), ('42')) AS x;
SELECT * FROM (VALUES (3), ('hello')) AS x;
SELECT TYPEOF(x) FROM (VALUES (CAST('1992-01-01' AS DATE)), ('1992-01-01')) AS x LIMIT 1;
SELECT * FROM (VALUES (NULL), ('hello')) AS x;
SELECT * FROM (VALUES (1, 2, 3), (1, 2)) AS x;
SELECT * FROM (VALUES (DEFAULT, 2, 3), (1, 2)) AS x;
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES (1), ('hello'), (DEFAULT);
SELECT * FROM x ORDER BY 1;
INSERT INTO x VALUES (1, 2), ('hello', 3), (DEFAULT, DEFAULT);
INSERT INTO x (x) VALUES (1, 2), ('hello', 3), (DEFAULT, DEFAULT);
INSERT INTO x (x) VALUES (1, 2), ('hello'), (DEFAULT, DEFAULT);
INSERT INTO x (x) VALUES (1, 2), ('hello'), (DEFAULT, DEFAULT);
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3), (4) RETURNING * EXCLUDE (x);
SELECT * FROM x;
INSERT INTO x VALUES (1), (2), (3), (4), (0);
DELETE FROM x WHERE x = 0 RETURNING * EXCLUDE (x);
SELECT * FROM x WHERE x = 0;
UPDATE x SET x = 0 WHERE TRUE RETURNING * EXCLUDE (x);
SELECT * FROM x ORDER BY ALL;
SELECT * FROM x ORDER BY ALL;
CREATE TABLE x (x INT DEFAULT -1, x INT DEFAULT -2, x INT DEFAULT -3);
INSERT INTO x (x) SELECT * FROM x AS x;
DELETE FROM x WHERE x < 5 RETURNING x, x, x;
DELETE FROM x WHERE x = 6 RETURNING x;
DELETE FROM x WHERE x = 7 RETURNING *;
DELETE FROM x WHERE x = 8 AND x = -2 AND x = -3 RETURNING *, x, x, x;
DELETE FROM x WHERE x = 9 RETURNING x, x, x;
DELETE FROM x WHERE x >= 10 AND x <= 13 RETURNING x AS x, x AS x, x AS x;
DELETE FROM x WHERE x >= 13 AND x <= 15 RETURNING SUM(x);
DELETE FROM x WHERE x = 14 RETURNING x + x + x;
DELETE FROM x WHERE x = 10 RETURNING 'duckdb';
DELETE FROM x WHERE x = 15 RETURNING 'duckdb';
CREATE TABLE x (x INT, x INT, x INT);
CREATE TABLE x (x INT, x INT, x INT);
INSERT INTO x VALUES (1, 1, 1), (2, 2, 2), (3, 3, 3), (100, 100, 100), (200, 200, 200);
INSERT INTO x VALUES (1, 4, 4), (2, 6, 7), (8, 8, 8);
DELETE FROM x WHERE x IN (SELECT x FROM x) RETURNING *;
CREATE TABLE x (x INT, x INT, x INT);
CREATE TABLE x (x INT, x INT, x INT);
INSERT INTO x VALUES (1, 0, 2), (2, 0, 1), (3, 0, 0);
INSERT INTO x VALUES (1, 0, 0), (2, 0, 0), (3, 0, 1), (4, 0, 1), (5, 0, 2), (6, 0, 2);
DELETE FROM x WHERE x IN (SELECT SUM(x) FROM x GROUP BY x) RETURNING *;
DELETE FROM x WHERE x = 14 RETURNING x IN (SELECT x FROM x);
DELETE FROM x WHERE x = 1 RETURNING CASE WHEN x = 0 THEN x ELSE x END;
DELETE FROM x WHERE x = 2 RETURNING CASE WHEN x = 1 THEN x ELSE x END;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
CREATE TABLE x (x TEXT DEFAULT 'hello world', x INT);
INSERT INTO x VALUES ('duckdb', 1), ('postgres', 2), ('sqlite', 3), ('mysql', 4), ('mongo', 5);
DELETE FROM x WHERE x = 1 RETURNING x, x;
DELETE FROM x WHERE x = 2 RETURNING CAST(x AS TEXT);
DELETE FROM x WHERE x = 3 RETURNING {'x': x, 'x': x};
DELETE FROM x WHERE x = 4 RETURNING [x, CAST(x AS TEXT)];
CREATE SEQUENCE x;
CREATE TABLE x (x INT DEFAULT NEXTVAL('seq'), x INT);
INSERT INTO x (x) VALUES (4), (5) RETURNING x, x;
DELETE FROM x WHERE x = 4 RETURNING *;
DROP TABLE x;
CREATE TABLE x (x INT DEFAULT -1, x INT DEFAULT -2, x INT DEFAULT -3);
INSERT INTO x (x) SELECT * FROM x AS x;
SELECT COUNT(*) FROM x;
DELETE FROM x RETURNING x;
CREATE TABLE x (x INT DEFAULT -1, x INT DEFAULT -2, x INT DEFAULT -3);
INSERT INTO x VALUES (1, 2, 3);
INSERT INTO x VALUES (1, 2, 3) RETURNING x;
INSERT INTO x VALUES (1, 2, 3) RETURNING *;
INSERT INTO x VALUES (1, 2, 3) RETURNING COLUMNS('a|c');
INSERT INTO x VALUES (1, 2, 3) RETURNING COLUMNS('a|c') + 42;
INSERT INTO x VALUES (10, 20, 30), (40, 50, 60), (70, 80, 90) RETURNING *, x, x, x;
INSERT INTO x VALUES (1, 2, 3) RETURNING x, x, x;
INSERT INTO x (x, x, x) VALUES (3, 2, 1) RETURNING x, x, x;
INSERT INTO x VALUES (1, 2, 3) RETURNING x AS x, x AS x;
INSERT INTO x VALUES (1, 1, 1), (2, 2, 2), (3, 3, 3) RETURNING SUM(x);
INSERT INTO x (x) VALUES (10) RETURNING *;
INSERT INTO x (x, x, x) SELECT * FROM x WHERE x = 10 AND x = -2 AND x = -3 RETURNING *;
INSERT INTO x (SELECT ROW_NUMBER() OVER (ORDER BY x) AS x, x, x FROM x LIMIT 1) RETURNING *;
INSERT INTO x (x, x, x) SELECT * FROM x WHERE x = 100000 AND x = 10000 AND x = 100000 RETURNING x, x, x;
INSERT INTO x (x, x, x) VALUES (10, 1000, 1000) RETURNING x IN (SELECT x FROM x WHERE x = -2);
INSERT INTO x VALUES (1, 2, 3) RETURNING CASE WHEN x = 2 THEN x ELSE x END;
INSERT INTO x VALUES (1, 2, 3) RETURNING CASE WHEN x = 3 THEN x ELSE x END;
INSERT INTO x VALUES (1, 1, -3) RETURNING x + x + x;
INSERT INTO x VALUES (1, 2, 3) RETURNING 'hello';
INSERT INTO x VALUES (1, 2, 3) RETURNING [x, x, x];
INSERT INTO x VALUES (1, 2, 3) RETURNING {'x': x, 'x': x, 'x': x};
INSERT INTO x (x) (SELECT 42) RETURNING x, x;
INSERT INTO x (x) (SELECT 42) RETURNING x, x;
INSERT INTO x VALUES (1, 2, 3) RETURNING x, x, x;
INSERT INTO x VALUES (1, 2, 3) RETURNING x, x, x;
INSERT INTO x VALUES (1, 2, 3) RETURNING [1, 2] IN (SELECT [x, x] FROM x);
INSERT INTO x (x, x) VALUES (42, 43) RETURNING (SELECT x), (SELECT x), NULL;
INSERT INTO x VALUES (-10, -20, -30) RETURNING '-10.-20' IN (SELECT GROUP_CONCAT(x) OVER (ORDER BY x) AS x FROM x);
CREATE TABLE x (x TEXT DEFAULT 'hello world', x INT);
INSERT INTO x (x, x) VALUES ('hello duckdb', 1) RETURNING x, x;
INSERT INTO x (x) VALUES (97) RETURNING CAST(x AS TEXT);
INSERT INTO x (x, x) VALUES ('duckdb', 97) RETURNING {'x': x, 'x': x};
CREATE SEQUENCE x;
CREATE TABLE x (x INT DEFAULT NEXTVAL('seq'), x INT);
INSERT INTO x (x) VALUES (4), (5) RETURNING x, x;
CREATE TABLE x (x INT DEFAULT -1, x INT DEFAULT -2, x INT DEFAULT -3);
INSERT INTO x (x) SELECT * FROM x AS x;
SELECT COUNT(*) FROM x;
INSERT INTO x (x, x, x) SELECT x, x, x FROM x RETURNING x;
CREATE TABLE x (x INT DEFAULT -1, x INT DEFAULT -2, x INT DEFAULT -3);
INSERT INTO x (x) SELECT * FROM x AS x;
UPDATE x SET x = -10 WHERE x = 1 RETURNING x, x, x;
UPDATE x SET x = x * -2, x = x * 2, x = x * 2 WHERE x = 2 RETURNING x, x, x;
UPDATE x SET x = x * -2, x = x * 2, x = x * 2 WHERE x = 3 RETURNING x;
UPDATE x SET x = x * -2, x = x * 2, x = x * 2 WHERE x = 4 RETURNING *;
UPDATE x SET x = -5, x = 2, x = 1 WHERE x = 5 AND x = -2 AND x = -3 RETURNING *, x, x, x;
UPDATE x SET x = 1, x = 2, x = 3 WHERE x = 6 AND x = -2 AND x = -3 RETURNING x, x, x;
UPDATE x SET x = 1, x = 2, x = 3 WHERE x = 7 AND x = -2 AND x = -3 RETURNING x AS x, x AS x, x AS x;
UPDATE x SET x = 1, x = 5, x = 7 WHERE x > 5 RETURNING SUM(x);
UPDATE x SET x = 15 WHERE x = 8 RETURNING *;
UPDATE x SET x = -9, x = x + 7 WHERE x = 9 RETURNING x + x + x;
UPDATE x SET x = -10 WHERE x = 10 RETURNING 'duckdb';
CREATE TABLE x (x INT, x INT, x INT);
CREATE TABLE x (x INT, x INT, x INT);
INSERT INTO x VALUES (1, 1, 1), (2, 2, 2), (3, 3, 3), (100, 100, 100), (200, 200, 200);
INSERT INTO x VALUES (1, 4, 4), (2, 6, 7), (8, 8, 8);
UPDATE x SET x = x.x FROM x AS x RETURNING *;
SELECT x, x, x IN (1, 200) FROM x;
UPDATE x SET x = x.x FROM x AS x WHERE x.x = x.x RETURNING x, x, x IN (1, 200);
CREATE TABLE x (x INT, x INT, x INT);
CREATE TABLE x (x INT, x INT, x INT);
INSERT INTO x VALUES (1, 0, 2), (2, 0, 1), (3, 0, 0);
INSERT INTO x VALUES (1, 0, 0), (2, 0, 0), (3, 0, 1), (4, 0, 1), (5, 0, 2), (6, 0, 2);
UPDATE x SET x = x.x FROM (SELECT SUM(x) AS x, x FROM x GROUP BY x ORDER BY x) AS x WHERE x.x = x.x RETURNING *;
UPDATE x SET x = x.x FROM (SELECT ROW_NUMBER() OVER (ORDER BY x) AS x, x FROM x) AS x WHERE x.x = x.x RETURNING *;
UPDATE x SET x = 0, x = 0, x = 0 WHERE x = 10 RETURNING x IN (SELECT x FROM x);
UPDATE x SET x = 0, x = 0, x = 0 FROM x AS x WHERE x.x = 0 RETURNING *;
UPDATE x SET x = 0 WHERE x = 1 RETURNING CASE WHEN x = 1 THEN x ELSE x END;
UPDATE x SET x = -1 WHERE x = 0 RETURNING CASE WHEN x = 2 THEN x ELSE x END;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
CREATE TABLE x (x TEXT DEFAULT 'hello world', x INT);
INSERT INTO x VALUES ('duckdb', 1);
UPDATE x SET x = 'hello world' WHERE x = 1 RETURNING x, x;
UPDATE x SET x = 100 WHERE x = 1 RETURNING CAST(x AS TEXT);
UPDATE x SET x = 'Mr.Duck', x = 99 WHERE x = 100 RETURNING {'x': x, 'x': x};
UPDATE x SET x = 98 WHERE x = 99 RETURNING [x, CAST(x AS TEXT)];
CREATE SEQUENCE x;
CREATE TABLE x (x INT DEFAULT NEXTVAL('seq'), x INT);
INSERT INTO x (x) VALUES (4), (5) RETURNING x, x;
UPDATE x SET x = x + 1 RETURNING *;
CREATE TABLE x (x INT, x INT, x INT);
CREATE INDEX x ON x(x);
INSERT INTO x VALUES (1, 2, 3), (4, 5, 6), (7, 8, 9);
UPDATE x SET x = 10 WHERE x = 2 RETURNING *;
SELECT * FROM x;
SELECT COUNT(*) FROM x;
UPDATE x SET x = 5 RETURNING x;
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
WITH x AS (SELECT UNNEST(RANGE(0, 1000)) AS x), x AS (SELECT DISTINCT (x) AS x FROM x), x AS (SELECT x FROM x USING SAMPLE BERNOULLI (1 PERCENT)) INSERT INTO x SELECT COUNT(*) AS x FROM x;
SELECT MIN(x) > 0, COUNT(*) FILTER(WHERE x = 0) = 0 FROM x;
SELECT AVG(x), MIN(x), MAX(x) FROM x WHERE x = 0;
CREATE TABLE x AS SELECT x AS x FROM x;
SELECT SETSEED(0.6);
SELECT x FROM x USING SAMPLE BERNOULLI (1 PERCENT) REPEATABLE (5);
SELECT x FROM x USING SAMPLE BERNOULLI (1 PERCENT) REPEATABLE (5);
PRAGMA x;
CREATE TABLE x AS SELECT * EXCLUDE (x, x, x, "x", x) FROM x;
COPY x TO '__TEST_DIR__/sample_all_types.csv' WITH (FORMAT CSV);
CREATE TABLE x AS SELECT * FROM x;
CREATE TABLE x AS SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
COPY (SELECT * FROM x) TO '__TEST_DIR__/sample_all_types.parquet' WITH (FORMAT PARQUET);
CREATE TABLE x AS SELECT * FROM x;
CREATE TABLE x AS SELECT * FROM x;
SELECT * FROM x;
PRAGMA x = '10G';
PRAGMA x = '10G';
PRAGMA x;
CREATE TABLE x AS SELECT * FROM x;
SELECT COUNT(*) FROM x USING SAMPLE RESERVOIR (99.0 PERCENT);
PRAGMA x;
SELECT COUNT(*) FROM x USING SAMPLE RESERVOIR (5 ROWS);
CREATE TABLE x AS SELECT x AS x, CAST(x AS TEXT) AS x, CONCAT(x, ' - ', x) AS x FROM x AS x;
SELECT x, x, x FROM x USING SAMPLE RESERVOIR (3 ROWS);
SELECT COUNT(*) FROM x TABLESAMPLE RESERVOIR (90 PERCENT);
SELECT COUNT(*) FROM (SELECT * FROM x AS x WHERE x % 997 <> 0) AS x USING SAMPLE RESERVOIR (80 PERCENT);
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (11, 22), (12, 21), (13, 22);
SELECT COUNT(*) FROM x USING SAMPLE RESERVOIR (0 ROWS);
SELECT COUNT(*) FROM x USING SAMPLE RESERVOIR (1 ROWS);
SELECT COUNT(*) FROM x USING SAMPLE RESERVOIR (1 ROWS);
SELECT COUNT(*) FROM x USING SAMPLE RESERVOIR (3 ROWS);
SELECT COUNT(*) FROM x USING SAMPLE RESERVOIR (10 ROWS);
SELECT COUNT(*) FROM x USING SAMPLE RESERVOIR (3 ROWS);
SELECT COUNT(*) FROM x USING SAMPLE RESERVOIR (3 ROWS) REPEATABLE (3);
SELECT * FROM x ORDER BY x, x USING SAMPLE RESERVOIR (10 ROWS);
SELECT COUNT(*) FROM x USING SAMPLE RESERVOIR (5 ROWS);
SELECT COUNT(*) FROM x USING SAMPLE RESERVOIR (1000100 ROWS);
SELECT COUNT(*) FROM x USING SAMPLE RESERVOIR (2 ROWS);
CREATE TABLE x AS SELECT x AS x, CAST(x AS TEXT) AS x, CONCAT(x, ' - ', x) AS x FROM x AS x;
SELECT x, x, x FROM x USING SAMPLE RESERVOIR (3 ROWS);
SELECT (SELECT COUNT(*) FROM x USING SAMPLE RESERVOIR (1 ROWS));
SELECT (SELECT COUNT(*) + x.x FROM x USING SAMPLE RESERVOIR (1 ROWS)) FROM x AS x ORDER BY x;
SELECT (SELECT COUNT(*) + x.x FROM x USING SAMPLE RESERVOIR (1 ROWS)) FROM x AS x ORDER BY x;
SELECT COUNT(*) FROM x USING SAMPLE RESERVOIR ('hello' ROWS);
SELECT COUNT(*) FROM x USING SAMPLE RESERVOIR ('hello' ROWS);
CREATE TABLE x AS SELECT x FROM x AS x;
SELECT COUNT(*) FROM x TABLESAMPLE RESERVOIR (10 ROWS);
SELECT COUNT(*) FROM x TABLESAMPLE RESERVOIR (10 PERCENT);
SELECT COUNT(*) FROM x TABLESAMPLE RESERVOIR (10 PERCENT);
SELECT COUNT(*) FROM x TABLESAMPLE RESERVOIR (10 ROWS);
SELECT COUNT(*) FROM x TABLESAMPLE RESERVOIR (10 ROWS);
SELECT COUNT(*) FROM x TABLESAMPLE RESERVOIR (10 ROWS);
SELECT COUNT(*) FROM x TABLESAMPLE RESERVOIR (10 ROWS);
SELECT COUNT(*) FROM x TABLESAMPLE RESERVOIR (10 ROWS) REPEATABLE (250);
SELECT COUNT(*) FROM x TABLESAMPLE RESERVOIR (10 PERCENT);
SELECT COUNT(*) FROM (SELECT * FROM x) AS x TABLESAMPLE RESERVOIR (10 PERCENT);
SELECT * FROM x TABLESAMPLE RESERVOIR (10 ROWS) REPEATABLE (250);
SELECT * FROM x TABLESAMPLE BERNOULLI (10 PERCENT) REPEATABLE (250);
SELECT * FROM x TABLESAMPLE SYSTEM (10 PERCENT) REPEATABLE (250);
SELECT COUNT(*) FROM x USING SAMPLE RESERVOIR (0.01 PERCENT);
SELECT COUNT(*) FROM x USING SAMPLE RESERVOIR (0.1 PERCENT);
SELECT * FROM x USING SAMPLE RESERVOIR (5 ROWS);
SELECT * FROM x USING SAMPLE RESERVOIR (5 ROWS);
SELECT * FROM x USING SAMPLE SYSTEM (10000 PERCENT);
SELECT x FROM x USING SAMPLE RESERVOIR (1 ROWS) REPEATABLE (0);
SELECT x FROM x USING SAMPLE RESERVOIR (1 ROWS) REPEATABLE (0);
SELECT x FROM x ORDER BY x USING SAMPLE RESERVOIR (1 PERCENT) REPEATABLE (0);
SELECT x FROM x ORDER BY x USING SAMPLE RESERVOIR (1 PERCENT) REPEATABLE (0);
PRAGMA x;
PRAGMA x;
PRAGMA x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x WHERE x > 1;
SELECT COUNT(*) FROM (SELECT CAST((FLOOR(x / 200000)) AS INT) AS x FROM x USING SAMPLE RESERVOIR (1 PERCENT)) AS x WHERE x >= 1;
CREATE TABLE x AS SELECT 1 AS x FROM x;
SELECT COUNT(*) FROM x;
INSERT INTO x SELECT 2 AS x FROM x;
SELECT COUNT(*) FROM x;
SELECT x, COUNT(*) FROM x GROUP BY ALL ORDER BY x;
INSERT INTO x SELECT 3 AS x FROM x;
SELECT COUNT(*) FROM x;
SELECT x, COUNT(*) > 650 FROM x GROUP BY ALL ORDER BY x;
PRAGMA x;
CREATE TABLE x AS SELECT * FROM x;
CREATE TABLE x AS (SELECT (x + 5) AS x, x AS x, GET_CURRENT_TIME() AS x FROM x);
SELECT CAST(x AS INT), x FROM x ORDER BY ALL;
CREATE TABLE x AS (SELECT (x + 5) AS x, x AS x, GET_CURRENT_TIME() AS x FROM x);
SELECT CAST(x AS INT), x FROM x ORDER BY ALL;
CREATE OR REPLACE TABLE x AS (SELECT (x + 5) AS x, x AS x FROM x);
CREATE OR REPLACE TABLE x AS (SELECT (x + 5) AS x, x AS x FROM x);
SELECT COUNT(*) FROM (SELECT x FROM x INTERSECT (SELECT x FROM x));
SELECT COUNT(*) FROM (SELECT x FROM x INTERSECT (SELECT x FROM x));
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT FLOOR(x / 1000000) AS x, COUNT(*) AS x FROM x GROUP BY x ORDER BY ALL;
INSERT INTO x (SELECT (x + 5) AS x, x AS x FROM x);
SELECT FLOOR(x / 1000000) AS x, COUNT(*) AS x FROM x GROUP BY x ORDER BY ALL;
INSERT INTO x (SELECT -1, -1 FROM x);
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x WHERE x = -1 AND x = -1;
SELECT COUNT(*) FROM x WHERE x = -1 AND x = -1;
CREATE VIEW x AS SELECT * FROM x;
INSERT INTO x (SELECT -2, -2 FROM x);
SELECT COUNT(*) FROM x WHERE x = -2 AND x = -2;
SELECT COUNT(*) FROM x WHERE x = -2 AND x = -2;
INSERT INTO x (SELECT -3, -3 FROM x);
SELECT COUNT(*) FROM x WHERE x = -3 AND x = -3;
CREATE OR REPLACE TABLE x AS SELECT x AS x, x + 1 AS x FROM x;
SELECT COUNT(*) FROM x ORDER BY ALL;
DELETE FROM x WHERE x = 3;
SELECT COUNT(*) FROM x ORDER BY ALL;
CREATE OR REPLACE TABLE x AS SELECT x AS x, x + 1 AS x FROM x;
SELECT COUNT(*) FROM x;
UPDATE x SET x = 5 WHERE x = 1;
SELECT * FROM x;
CREATE OR REPLACE TABLE x AS SELECT x AS x, x + 1 AS x FROM x;
SELECT COUNT(*) FROM x;
ALTER TABLE x ADD COLUMN x DOUBLE;
SELECT * FROM x;
CREATE OR REPLACE TABLE x AS SELECT x AS x, x + 1 AS x FROM x;
SELECT COUNT(*) FROM x;
ALTER TABLE x ALTER COLUMN x SET DATA TYPE TEXT;
SELECT * FROM x;
CREATE OR REPLACE TABLE x AS SELECT x AS x, x + 1 AS x FROM x;
SELECT COUNT(*) FROM x;
ALTER TABLE x drop b;
SELECT * FROM x;
CREATE OR REPLACE TABLE x AS SELECT x AS x, x + 1 AS x FROM x;
SELECT COUNT(*) FROM x;
ALTER TABLE x drop b;
SELECT * FROM x;
INSERT INTO x SELECT x AS x FROM x;
SELECT * FROM x;
PRAGMA x;
CREATE TABLE x AS SELECT CAST(x AS TEXT) AS x FROM x;
SELECT COUNT(*) FROM x WHERE x IS NULL;
CREATE TABLE x AS SELECT {'x': 'quack-a-lack', 'x': x} AS x FROM x;
SELECT COUNT(*) FROM x WHERE x IS NULL;
CREATE TABLE x AS SELECT CAST('\xAA\xAB\xAC' AS BLOB) AS x FROM x;
SELECT COUNT(*) FROM x WHERE x IS NULL;
CREATE TABLE x AS SELECT CAST(x AS BIGINT) AS x, CAST(x AS DOUBLE) AS x, CAST(x AS REAL) AS x, CAST(x AS INT128) AS x, INTERVAL '1' YEAR AS x FROM x;
CREATE TABLE x AS SELECT CAST(x AS BIGINT) AS x, CAST(x AS DOUBLE) AS x, CAST(x AS REAL) AS x, CAST(x AS INT128) AS x, INTERVAL '1' YEAR AS x FROM x;
CREATE TABLE x AS SELECT CAST(x AS BIGINT) AS x, CAST(x AS DOUBLE) AS x, CAST(x AS REAL) AS x, CAST(x AS INT128) AS x, INTERVAL '1' YEAR AS x FROM x;
CREATE TABLE x AS SELECT CAST(x AS BIGINT) AS x, CAST(x AS DOUBLE) AS x, CAST(x AS REAL) AS x, CAST(x AS INT128) AS x, INTERVAL '1' YEAR AS x FROM x;
CREATE TABLE x AS SELECT CAST(x AS BIGINT) AS x, CAST(x AS DOUBLE) AS x, CAST(x AS REAL) AS x, CAST(x AS INT128) AS x, INTERVAL '1' YEAR AS x FROM x;
SELECT COUNT(*) FROM x WHERE x IS NULL;
CREATE OR REPLACE TABLE x AS SELECT x AS x, [1, x, 2] AS x, CAST(x AS TEXT) || 'ducktastic' AS x, GET_CURRENT_TIMESTAMP() AS x FROM x;
SELECT COUNT(*) FROM x WHERE x IS NULL;
SELECT COUNT(*) FROM x WHERE x IS NULL;
SELECT COUNT(*) FROM x WHERE x IS NULL;
CREATE TABLE x AS SELECT x AS x FROM x;
CREATE VIEW x AS SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
SET x = FALSE;
SELECT x, x, x FROM x WHERE x = 'default_provider_secret';
SELECT * FROM x;
SELECT x, x, x FROM x WHERE x = 'secret_scope_1';
SELECT * FROM x;
SELECT x, x, x FROM x WHERE x = 'secret_scope_2';
SELECT * FROM x;
PRAGMA x;
SET x = FALSE;
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
SET x = FALSE;
SET x = 'invalid-on-purpose-setting';
SET x = 'path';
SET x = FALSE;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
SET x = FALSE;
SELECT x, x, x, x FROM x;
SELECT x, x, x, x FROM x;
SELECT x, x, x, x FROM x ORDER BY x;
SELECT x, x, x, x FROM x ORDER BY x;
SELECT x, x, x, x, x, x FROM x ORDER BY x;
PRAGMA x;
CREATE TABLE x AS SELECT 'blablab';
SELECT x.split(';')[-1] FROM x WHERE x = 'http';
SELECT x FROM x WHERE x = 'scope_as_struct';
PRAGMA x;
SET x = FALSE;
SELECT x, x, x, x FROM x;
SELECT * FROM x;
PRAGMA x;
SET x = FALSE;
SELECT x, x, x, x FROM x ORDER BY x;
PRAGMA x;
SET x = FALSE;
PRAGMA x;
PRAGMA x;
SET x = '__TEST_DIR__/create_secret_minio';
SET x = '';
SET x = '';
COPY SELECT 1 AS x TO 's3://test- /test-file.parquet';
COPY (SELECT 1 AS x) TO 's3://test-bucket/test-file.parquet';
COPY (SELECT 1 AS x) TO 's3://test-bucket/only-this-file-gets-auth.parquet' WITH (restart);
SET x = '__TEST_DIR__/create_secret_minio';
COPY (SELECT 1 AS x) TO 's3://test-bucket/only-this-file-gets-auth.parquet';
COPY (SELECT 1 AS x) TO 's3://test-bucket/no-auth-here.parquet';
PRAGMA x;
SET x = '__TEST_DIR__/create_secret_name_conflicts';
SELECT x, x FROM x;
SET x = '__TEST_DIR__/create_secret_name_conflicts';
SELECT x, x FROM x ORDER BY x;
PRAGMA x;
COPY (SELECT 1 AS x) TO '__TEST_DIR__/file_to_prevent_the_secret_dir_from_being_created.csv';
SET x = '__TEST_DIR__/file_to_prevent_the_secret_dir_from_being_created.csv';
SET x = '__TEST_DIR__/create_secret_non_writable_persistent_dir/a/deeply/nested/folder/will/be/created';
PRAGMA x;
SET x = FALSE;
SELECT x, x FROM x;
SELECT x, x FROM x;
SELECT x, x FROM x;
SELECT x, x FROM x;
PRAGMA x;
SET x = '__TEST_DIR__/create_secret_persistence';
SELECT x, x, x FROM x WHERE x = 'memory' ORDER BY x;
SELECT x, x FROM x WHERE x <> 'memory';
SET x = '__TEST_DIR__/create_secret_persistence';
SELECT x, x FROM x;
SET x = '__TEST_DIR__/create_secret_persistence';
SET x = '__TEST_DIR__/create_secret_persistence';
SET x = '__TEST_DIR__/create_secret_persistence';
SELECT x, x, x FROM x WHERE x = 'my_tmp_secret_3' ORDER BY x;
SET x = '__TEST_DIR__/create_secret_persistence';
SELECT x, x FROM x;
SET x = '__TEST_DIR__/create_secret_persistence';
SELECT x, x FROM x;
SELECT x, x FROM x;
SET x = '__TEST_DIR__/create_secret_persistence';
SELECT x, x FROM x;
SELECT x, x FROM x ORDER BY x;
SELECT x, x FROM x;
SET x = '__TEST_DIR__/create_secret_persistence';
SELECT x, x, x FROM x ORDER BY x;
PRAGMA x;
SET x = '__TEST_DIR__/create_secret_persistence_error_handling';
COPY (SELECT 1 AS x, 2 AS x) TO '__TEST_DIR__/create_secret_persistence_error_handling/' WITH (FORMAT csv, PARTITION_BY a);
COPY (SELECT 1 AS x) TO '__TEST_DIR__/create_secret_persistence_error_handling/s1.duckdb_secret' WITH (FORMAT csv);
SELECT * FROM x;
SET x = '__TEST_DIR__/create_secret_persistence_error_handling2';
SET x = '__TEST_DIR__/create_secret_persistence_error_handling2';
SET x = FALSE;
SELECT * FROM x;
PRAGMA x;
SET x = '__TEST_DIR__/create_secret_persistence_no_client_context';
SET x = '__TEST_DIR__/create_secret_persistence_no_client_context';
SET x = '__TEST_DIR__/create_secret_persistence_no_client_context';
PRAGMA x;
SET x = '__TEST_DIR__/create_secret_r2';
SET x = '__TEST_DIR__/create_secret_r2';
SELECT x, x, x, x FROM x;
SELECT x, x, x, x FROM x;
SELECT x, x, x, x FROM x;
SELECT x, x, x, x FROM x;
PRAGMA x;
SET x = '__TEST_DIR__/create_secret_r2_serialization';
SELECT x, x, x, x FROM x;
SELECT * FROM x;
SET x = '__TEST_DIR__/does_not_exist2';
SELECT COUNT(*) FROM x;
SET x = '__TEST_DIR__/create_secret_r2_serialization';
SELECT x, x, x, x FROM x;
SELECT * FROM x;
PRAGMA x;
SET x = '__TEST_DIR__/create_secret_s3_serialization';
SELECT x, x, x, x FROM x ORDER BY x;
SELECT x FROM x ORDER BY x;
SET x = '__TEST_DIR__/does_not_exist1';
SELECT COUNT(*) FROM x;
SET x = '__TEST_DIR__/create_secret_s3_serialization';
SELECT x, x, x, x FROM x ORDER BY x;
SELECT x FROM x ORDER BY x;
PRAGMA x;
SET x = '__TEST_DIR__/create_secret_scope_matching';
SELECT x FROM x;
SELECT x FROM x;
SELECT * FROM x;
SELECT x FROM x;
SELECT x FROM x;
PRAGMA x;
SET x = '__TEST_DIR__/create_secret_settings1';
SET x = TRUE;
SELECT x, x FROM x;
SET x = '__TEST_DIR__/create_secret_settings2';
SET x = FALSE;
SET x = 'local_file';
SET x = FALSE;
SELECT COUNT(*) FROM x;
SET x = TRUE;
SET x = '__TEST_DIR__/create_secret_settings1';
SELECT x, x FROM x;
PRAGMA x;
SET x = FALSE;
SET x = TRUE;
SET x = '__TEST_DIR__/create_secret_storages';
SELECT * EXCLUDE (x) FROM x ORDER BY x;
SET x = 'currently-non-existent';
SET x = '__TEST_DIR__/create_secret_storages';
SET x = '__TEST_DIR__/create_secret_storages';
SELECT * EXCLUDE (x) FROM x ORDER BY x;
SELECT UNNEST(x) AS x FROM x;
SET x = './data/secrets/http';
SELECT * FROM x;
SELECT * FROM x ORDER BY x;
SELECT * FROM x WHERE x IN ('s3', 'r2', 'gcs', 'http') ORDER BY x;
SELECT * FROM x WHERE x IN ('s3', 'r2', 'gcs', 'http') ORDER BY x;
PRAGMA x;
CREATE SCHEMA x.x;
CREATE TABLE x.x (x INT);
INSERT INTO x.x VALUES (1), (2), (3);
SELECT x.x.x FROM x.x;
SELECT x.x.x FROM x.x AS x;
SELECT x.x.x FROM x.x AS x;
CREATE SCHEMA x.x;
CREATE SCHEMA x.x;
INSERT INTO x.x VALUES ({'x': 42});
SELECT x FROM x.x;
SELECT x.x FROM x.x;
SELECT x.x.x FROM x.x;
SELECT x.x.x.x FROM x.x;
DROP SCHEMA x.x CASCADE;
CREATE SCHEMA x.x;
CREATE TABLE x.x AS SELECT {'x': {'x': {'x': {'x': {'x': 42}}}}} AS x;
SELECT x.x.x.x.x.x.x.x FROM x.x;
SELECT x.x.x.x.x.x.x FROM x.x;
SELECT x.x.x.x.x.x FROM x.x;
SELECT x.x.x.x.x FROM x.x;
SELECT x.x.x.x FROM x.x;
SELECT x.x.x FROM x.x;
SELECT x.x FROM x.x;
SELECT x FROM x.x;
DROP SCHEMA x.x CASCADE;
CREATE SCHEMA x.x;
CREATE SCHEMA x.x;
CREATE TABLE x.x AS SELECT 42 AS x;
CREATE TABLE x.x AS SELECT 84 AS x;
SELECT x.x.x FROM x.x, x.x;
SELECT * EXCLUDE (x.x.x) FROM x.x, x.x;
SELECT * EXCLUDE (x.x.x) FROM x.x, x.x;
SELECT x.x.x FROM x.x, x.x;
SELECT x.x.x FROM x.x;
SELECT x.x.x FROM x.x;
SELECT x.x.x FROM x.x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
CREATE TABLE x ("x" INT, "x" INT);
CREATE TABLE x AS SELECT * FROM x;
SELECT x FROM x ORDER BY x;
DROP TABLE x;
CREATE TABLE x AS SELECT x, x FROM x;
SELECT x FROM x ORDER BY x;
DROP TABLE x;
CREATE TABLE x AS SELECT x.x, x.x FROM x;
SELECT x FROM x ORDER BY x;
DROP TABLE x;
CREATE SCHEMA x.x;
CREATE TABLE x.x ("x" INT, "x" INT);
CREATE TABLE x AS SELECT x.x.x, x.x.x FROM x.x;
SELECT x FROM x ORDER BY x;
PRAGMA x;
CREATE SCHEMA x.x;
CREATE TABLE x.x (x INT);
SELECT x.x.x FROM x.x;
SELECT x.x.x FROM x.x;
SELECT x.x.x FROM x AS x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (42);
SELECT x AS $i FROM x;
SELECT "x" AS $i FROM x;
SELECT * FROM x AS $a;
SELECT * FROM x AS $a;
SELECT x FROM x AS $a;
SELECT x.x FROM x AS $a;
SELECT x.x FROM x AS $a;
SELECT x.x FROM x AS $a;
SELECT x.x FROM x AS $a;
SELECT x.x FROM x AS $a;
SELECT x.x FROM x AS $a;
SELECT * FROM x AS $range;
SELECT * FROM x AS $range;
CREATE TABLE x (x INT);
SELECT * FROM x;
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('foo'), ('bar'), ('baz');
CREATE TABLE x AS SELECT * FROM x WHERE x LIKE 'b%';
CREATE TABLE x (x TEXT);
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
CREATE SCHEMA x.x;
CREATE TABLE x.x AS SELECT 'hello' AS x;
CREATE VIEW x.x AS SELECT * FROM x.x;
SELECT x.x.x FROM x.x;
SELECT * FROM (VALUES (42, 84)) AS x UNION ALL SELECT * FROM (VALUES (84, 42)) AS x ORDER BY x;
SELECT * FROM (VALUES (42, 84)) AS x UNION ALL SELECT * FROM (VALUES (84, 42)) AS x ORDER BY x;
SELECT 42 WHERE 1 = 0 EXCEPT SELECT 42;
SELECT 42 EXCEPT SELECT 42 WHERE 1 = 0;
SELECT 42 WHERE 1 = 0 EXCEPT SELECT 42 WHERE 1 = 0;
SELECT 42 WHERE 1 = 0 INTERSECT SELECT 42;
SELECT 42 INTERSECT SELECT 42 WHERE 1 = 0;
SELECT 42 WHERE 1 = 0 INTERSECT SELECT 42 WHERE 1 = 0;
SELECT 42 WHERE 1 = 0 UNION ALL SELECT 42;
SELECT 42 UNION ALL SELECT 42 WHERE 1 = 0;
SELECT 42 WHERE 1 = 0 UNION ALL SELECT 42 WHERE 1 = 0;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (41), (42), (43);
CREATE TABLE x (x INT);
INSERT INTO x VALUES (40), (43), (43);
SELECT * FROM x EXCEPT SELECT * FROM x ORDER BY 1;
SELECT * FROM x INTERSECT SELECT * FROM x;
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2);
CREATE TABLE x (x INT);
INSERT INTO x VALUES (2), (3);
CREATE VIEW x AS SELECT * FROM x UNION ALL SELECT * FROM x;
CREATE VIEW x AS SELECT * FROM x UNION ALL SELECT * FROM x;
SELECT COUNT(*) FROM x JOIN x USING (x);
SELECT COUNT(*) FROM x LEFT JOIN x USING (x);
SELECT COUNT(*) FROM x RIGHT JOIN x USING (x);
SELECT COUNT(*) FROM x FULL OUTER JOIN x USING (x);
SELECT COUNT(*) FROM x JOIN x AS x USING (x);
SELECT COUNT(*) FROM x FULL OUTER JOIN x AS x USING (x);
CREATE VIEW x AS SELECT (SELECT x.x - 1) AS x FROM x UNION ALL SELECT (SELECT x.x - 1) AS x FROM x;
CREATE VIEW x AS SELECT (SELECT x.x + 1) AS x FROM x UNION ALL SELECT (SELECT x.x + 1) AS x FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x JOIN x USING (x);
SELECT COUNT(*) FROM x LEFT JOIN x USING (x);
SELECT COUNT(*) FROM x RIGHT JOIN x USING (x);
SELECT COUNT(*) FROM x FULL OUTER JOIN x USING (x);
PRAGMA x;
CREATE TABLE x AS SELECT * FROM x AS x;
CREATE TABLE x AS SELECT * FROM x AS x;
(SELECT * FROM x, x WHERE x = x) UNION (SELECT * FROM x, x WHERE x = x) ORDER BY 1;
WITH x AS ((SELECT * FROM x, x WHERE x = x) UNION (SELECT * FROM x, x WHERE x = x)) SELECT SUM(x.x) FROM x AS x, x AS x WHERE x.x = x.x;
WITH x AS ((SELECT * FROM x, x WHERE x = x) UNION (SELECT * FROM x, x WHERE x = x)), x AS (SELECT SUM(x.x) AS x FROM x AS x, x AS x WHERE x.x = x.x) SELECT * FROM (SELECT * FROM x GROUP BY x UNION SELECT * FROM x GROUP BY x UNION SELECT * FROM x GROUP BY x UNION SELECT * FROM x GROUP BY x) AS x;
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
INSERT INTO x VALUES (42), (43), (44);
INSERT INTO x VALUES (43);
INSERT INTO x VALUES (44);
SELECT * FROM x EXCEPT SELECT * FROM x EXCEPT SELECT * FROM x;
PRAGMA x;
PRAGMA x = 4;
PRAGMA x;
CREATE TABLE x AS SELECT * FROM x AS x;
SELECT COUNT(*) FROM (SELECT * FROM x UNION ALL SELECT * FROM x) AS x;
SELECT COUNT(*) FROM (SELECT 1 UNION ALL SELECT * FROM x) AS x;
SELECT COUNT(*) FROM (SELECT * FROM x UNION ALL SELECT 1) AS x;
SELECT COUNT(*) FROM (SELECT * FROM x UNION ALL SELECT * FROM x) AS x WHERE x < 500000;
SELECT COUNT(*) FROM (SELECT * FROM x UNION ALL SELECT * FROM x UNION ALL SELECT * FROM x UNION ALL SELECT * FROM x) AS x;
SET x = 'nulls_first';
PRAGMA x;
SELECT 1 AS x UNION SELECT 2 ORDER BY 1;
SELECT 1 AS x UNION SELECT 1 ORDER BY 1;
SELECT 1 AS x UNION ALL SELECT 2;
SELECT 1 AS x UNION ALL SELECT 1;
SELECT 1 AS x UNION SELECT 2 UNION SELECT 3 ORDER BY 1;
SELECT 1 AS x UNION SELECT 2 UNION SELECT 2 ORDER BY 1;
SELECT 1 AS x UNION SELECT 2 UNION ALL SELECT 2 ORDER BY 1;
SELECT 1.1 AS x UNION SELECT 2.2 ORDER BY 1;
SELECT 1.1 AS x UNION SELECT 2 ORDER BY 1;
SELECT 1 AS x UNION SELECT 2.2 ORDER BY 1;
SELECT 1 AS x UNION SELECT CAST(1.0 AS DOUBLE) ORDER BY 1;
SELECT 1.1 AS x UNION ALL SELECT 2 ORDER BY 1;
SELECT CAST(1.0 AS DOUBLE) AS x UNION ALL SELECT 1 ORDER BY 1;
SELECT 1.1 AS x UNION SELECT 2 UNION SELECT 3 ORDER BY 1;
SELECT CAST(1.1 AS DOUBLE) AS x UNION SELECT 2 UNION SELECT CAST(2.0 AS DOUBLE) ORDER BY 1;
SELECT 1.1 AS x UNION SELECT 2 UNION ALL SELECT 2 ORDER BY 1;
SELECT 1.1 AS x UNION (SELECT 2 UNION ALL SELECT 2) ORDER BY 1;
CREATE TABLE x (x DOUBLE);
INSERT INTO x (x) VALUES ('0.0'), ('-34.84'), ('-1004.30'), ('-1.2345678901234e+200'), ('-1.2345678901234e-200');
CREATE TABLE x (x INT);
INSERT INTO x (x) VALUES ('   0  '), ('123456     '), ('    -123456'), ('2147483647') /* largest and smallest values */, ('-2147483647');
CREATE TABLE x (x TINYINT, x TINYINT);
INSERT INTO x VALUES ('  123   ', '  456'), ('123   ', '4567890123456789'), ('4567890123456789', '123'), (4567890123456789, '4567890123456789'), ('+4567890123456789', '-4567890123456789');
CREATE TABLE x (x TEXT);
INSERT INTO x (x) VALUES ('a'), ('ab'), ('abcd'), ('abcd    ');
CREATE TABLE x (x TEXT);
INSERT INTO x (x) VALUES ('a'), ('ab'), ('abcd'), ('abcd    ');
SELECT x AS x FROM x UNION SELECT x FROM x ORDER BY 1;
SELECT x AS x FROM x UNION ALL SELECT x FROM x;
SELECT x AS x FROM x UNION SELECT x FROM x ORDER BY 1;
SELECT x AS x FROM x UNION ALL SELECT x FROM x;
SELECT x AS x FROM x WHERE x BETWEEN -1e6 AND 1e6 UNION SELECT x FROM x WHERE x BETWEEN 0 AND 1000000 ORDER BY 1;
SELECT CAST(x AS TEXT) AS x FROM x UNION SELECT x FROM x ORDER BY 1;
SELECT x AS x FROM x UNION SELECT CAST(x AS TEXT) FROM x ORDER BY 1;
SELECT x AS x FROM x UNION ALL SELECT x FROM x;
SELECT x AS x FROM x UNION SELECT x FROM x UNION SELECT RTRIM(x) FROM x ORDER BY 1;
SELECT x FROM x INTERSECT SELECT x FROM x ORDER BY 1;
SELECT x FROM x INTERSECT ALL SELECT x FROM x ORDER BY 1;
SELECT x FROM x EXCEPT SELECT x FROM x ORDER BY 1;
SELECT x FROM x EXCEPT ALL SELECT x FROM x ORDER BY 1;
SELECT x FROM x EXCEPT ALL SELECT DISTINCT x FROM x ORDER BY 1;
SELECT x FROM x EXCEPT SELECT x FROM x ORDER BY 1;
SELECT x FROM x EXCEPT ALL SELECT x FROM x ORDER BY 1;
SELECT x FROM x EXCEPT ALL SELECT DISTINCT x FROM x ORDER BY 1;
SELECT x FROM x EXCEPT ALL SELECT DISTINCT x FROM x ORDER BY 1;
(SELECT 1, 2, 3 UNION SELECT 4, 5, 6) INTERSECT SELECT 4, 5, 6;
(SELECT 1, 2, 3 UNION SELECT 4, 5, 6 ORDER BY 1, 2) INTERSECT SELECT 4, 5, 6;
(SELECT 1, 2, 3 UNION SELECT 4, 5, 6) EXCEPT SELECT 4, 5, 6;
(SELECT 1, 2, 3 UNION SELECT 4, 5, 6 ORDER BY 1, 2) EXCEPT SELECT 4, 5, 6;
SELECT x FROM x INTERSECT SELECT x FROM x ORDER BY 1;
SELECT x FROM x EXCEPT SELECT x FROM x ORDER BY 1;
SELECT x FROM x INTERSECT SELECT x FROM x UNION ALL SELECT x FROM x ORDER BY 1;
SELECT x FROM x INTERSECT (((SELECT x FROM x UNION ALL SELECT x FROM x))) ORDER BY 1;
(((SELECT x FROM x INTERSECT SELECT x FROM x ORDER BY 1))) UNION ALL SELECT x FROM x;
SELECT x FROM x UNION ALL SELECT x FROM x EXCEPT SELECT x FROM x ORDER BY 1;
SELECT x FROM x UNION ALL (((SELECT x FROM x EXCEPT SELECT x FROM x ORDER BY 1)));
(((SELECT x FROM x UNION ALL SELECT x FROM x))) EXCEPT SELECT x FROM x ORDER BY 1;
SELECT x, x FROM x EXCEPT SELECT x, x FROM x ORDER BY x, x;
SELECT x FROM x EXCEPT SELECT x FROM x ORDER BY x LIMIT 1;
SELECT x FROM x EXCEPT (((SELECT x FROM x ORDER BY x LIMIT 1))) ORDER BY 1;
(((((SELECT * FROM x)))));
PRAGMA x;
SELECT 1 UNION ALL SELECT 2;
SELECT 1, 'a' UNION ALL SELECT 2, 'b';
SELECT 1, 'a' UNION ALL SELECT 2, 'b' UNION ALL SELECT 3, 'c' ORDER BY 1;
SELECT 1, 'a' UNION ALL SELECT 2, 'b' UNION ALL SELECT 3, 'c' UNION ALL SELECT 4, 'd' ORDER BY 1;
SELECT NULL UNION SELECT NULL;
SELECT NULL EXCEPT SELECT NULL;
SELECT NULL INTERSECT SELECT NULL;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (11, 1), (12, 1), (13, 2);
SELECT x FROM x WHERE x < 13 UNION ALL SELECT x FROM x WHERE x = 13;
SELECT x FROM x WHERE x < 13 UNION ALL SELECT x FROM x WHERE x > 11;
SELECT 1 UNION ALL SELECT 'asdf';
SELECT NULL UNION ALL SELECT 'asdf';
SELECT 1 UNION SELECT 1;
SELECT 1, 'a' UNION SELECT 2, 'b' UNION SELECT 3, 'c' UNION SELECT 1, 'a' ORDER BY 1;
SELECT x FROM x WHERE x < 13 UNION SELECT x FROM x WHERE x > 11 ORDER BY 1;
SELECT 1, 'a' UNION ALL SELECT 1, 'a' UNION SELECT 2, 'b' UNION SELECT 1, 'a' ORDER BY 1;
SELECT 1, 'a' UNION ALL SELECT 1, 'a' UNION SELECT 2, 'b' UNION SELECT 1, 'a' ORDER BY 1 DESC;
SELECT x, COUNT(*) AS x FROM ((SELECT * FROM (VALUES (1), (2), (2), (3), (3), (3), (4), (4), (4), (4)) AS x EXCEPT ALL SELECT * FROM (VALUES (1), (3), (3)) AS x) INTERSECT ALL SELECT * FROM (VALUES (2), (2), (2), (4), (3), (3)) AS x) AS x GROUP BY x ORDER BY x;
SET x = 'nulls_first';
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (3, 3), (1, 1);
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (2, 2), (4, 4);
SELECT x, x FROM x UNION ALL BY NAME SELECT x, x FROM x;
SELECT x.x FROM x UNION ALL BY NAME SELECT x FROM x ORDER BY x.x;
SELECT x FROM x UNION ALL BY NAME SELECT x FROM x ORDER BY x.x;
(SELECT x FROM x UNION ALL SELECT x FROM x) UNION ALL BY NAME SELECT 5 ORDER BY x.x;
(SELECT x FROM x UNION ALL SELECT x FROM x) UNION ALL BY NAME SELECT 5 ORDER BY x;
SELECT x AS x FROM x UNION ALL BY NAME SELECT x AS x FROM x ORDER BY x.x;
(SELECT x FROM x UNION ALL SELECT x FROM x) UNION ALL BY NAME (SELECT x FROM x UNION ALL SELECT x FROM x) ORDER BY x, x;
(SELECT x FROM x UNION ALL SELECT x FROM x) UNION ALL BY NAME (SELECT x FROM x UNION ALL SELECT x FROM x) ORDER BY x.x;
SELECT 1 UNION ALL BY NAME SELECT * FROM x UNION ALL BY NAME SELECT 999 LIMIT 5;
SELECT x, x FROM x UNION ALL BY NAME SELECT x, x FROM x ORDER BY x DESC;
SELECT x, x FROM x UNION ALL BY NAME SELECT x, x FROM x ORDER BY x;
SELECT x, x FROM x UNION ALL BY NAME SELECT x, x FROM x ORDER BY 3;
SELECT x, x FROM x UNION ALL BY NAME SELECT x, x FROM x ORDER BY 4;
(SELECT x FROM x ORDER BY x) UNION ALL BY NAME (SELECT x FROM x ORDER BY x) ORDER BY x DESC;
SELECT 1 UNION ALL BY NAME SELECT x, x FROM x UNION ALL BY NAME SELECT x, x FROM x;
SELECT 1, 2 FROM x UNION SELECT x, x FROM x UNION ALL BY NAME SELECT x, x FROM x;
SELECT 1, 2 FROM x UNION (SELECT x, x FROM x UNION ALL BY NAME SELECT x, x FROM x);
SELECT x, x FROM x UNION ALL BY NAME SELECT x, x FROM x INTERSECT SELECT 2, 2 FROM x;
SELECT x, x FROM x UNION ALL BY NAME SELECT x, x FROM x EXCEPT SELECT 2, 2 FROM x;
(SELECT x, x FROM x UNION ALL BY NAME SELECT x, x FROM x) EXCEPT SELECT NULL, 2, 2 FROM x;
SELECT x, x FROM x UNION ALL BY NAME SELECT x FROM x;
SELECT x, x AS x FROM x UNION ALL BY NAME SELECT x FROM x;
SELECT x AS x FROM x UNION ALL BY NAME SELECT x FROM x;
SELECT DISTINCT ON (x) x FROM (SELECT 1 AS x UNION ALL BY NAME SELECT '1' AS x);
SELECT DISTINCT ON (x) x FROM (SELECT 1 AS x UNION ALL BY NAME SELECT 1.1 AS x);
CREATE TABLE x AS (SELECT x, x FROM x UNION ALL BY NAME SELECT x, x FROM x);
SELECT * FROM x;
SET x = 'nulls_first';
PRAGMA x;
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3), (NULL);
INSERT INTO x VALUES (2), (3), (4), (NULL);
(SELECT x FROM x ORDER BY x + 1) UNION SELECT x FROM x ORDER BY 1;
SELECT * FROM (SELECT * FROM x UNION SELECT * FROM x) AS x ORDER BY 1;
SELECT x FROM (SELECT * FROM x UNION SELECT * FROM x) AS x ORDER BY 1;
SELECT x FROM (SELECT * FROM x UNION SELECT * FROM x) AS x ORDER BY 1;
SELECT x FROM (SELECT * FROM x UNION SELECT * FROM x) AS x ORDER BY 1;
SELECT x FROM (SELECT * FROM x UNION SELECT * FROM x) AS x ORDER BY 1;
SELECT x FROM x UNION SELECT x FROM x ORDER BY x;
SELECT x FROM x UNION SELECT x FROM x ORDER BY x;
SELECT 1, x FROM x UNION SELECT x AS x, 1 FROM x ORDER BY x, 1;
SELECT 1, x + 1 FROM x UNION SELECT x + 1, 1 FROM x ORDER BY x + 1;
SELECT x FROM x UNION SELECT x FROM x UNION SELECT x AS x FROM x ORDER BY x;
SELECT x FROM x UNION SELECT x FROM x UNION SELECT x + 1 FROM x ORDER BY x + 1;
SELECT x, 10 - x AS x FROM x UNION SELECT x, x + 1 FROM x ORDER BY 2;
SELECT x, 10 - x AS x FROM x UNION SELECT x, x + 1 FROM x ORDER BY x;
SELECT x FROM x UNION SELECT x FROM x ORDER BY 1;
SELECT x FROM x UNION SELECT x FROM x ORDER BY 2;
(SELECT x FROM x ORDER BY x + 1) UNION SELECT x FROM x ORDER BY 1;
SELECT * FROM x UNION SELECT * FROM x ORDER BY x;
SELECT * FROM x UNION SELECT * FROM x ORDER BY x;
SELECT x FROM x UNION SELECT * FROM x ORDER BY x.x;
SELECT x FROM x UNION SELECT x FROM x ORDER BY x.x;
SELECT x.x FROM x UNION SELECT * FROM x ORDER BY x;
SELECT x.x FROM x UNION SELECT x.x FROM x ORDER BY x;
SELECT x FROM x UNION SELECT * FROM x UNION SELECT * FROM x AS x ORDER BY x.x, x.x, x.x;
SELECT x FROM x UNION SELECT * FROM x UNION SELECT * FROM x AS x ORDER BY x;
SELECT x FROM (SELECT * FROM x) AS x UNION SELECT * FROM x ORDER BY x.x;
SELECT x.x, x.x FROM x AS x, x AS x WHERE x.x = x.x UNION SELECT x, x - 1 FROM x ORDER BY x.x, x.x, x.x;
SELECT NULL AS x, NULL AS x, 1 AS x UNION SELECT CAST('2015-10-11 00:00:00' AS TIMESTAMP) AS x, CAST('2015-10-11 12:34:56' AS TIMESTAMP) AS x, 2 AS x ORDER BY 3;
SET x = 'nulls_first';
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (3, 3), (3, 3), (1, 1);
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (2, 2), (4, 4);
SELECT x.x FROM x UNION BY NAME SELECT x FROM x ORDER BY x.x;
SELECT x FROM x UNION BY NAME SELECT x FROM x ORDER BY x.x;
(SELECT x FROM x UNION ALL SELECT x FROM x) UNION BY NAME SELECT 5 ORDER BY x.x;
(SELECT x FROM x UNION ALL SELECT x FROM x) UNION BY NAME SELECT 5 ORDER BY x;
SELECT x AS x FROM x UNION BY NAME SELECT x AS x FROM x ORDER BY x.x;
(SELECT x FROM x UNION ALL SELECT x FROM x) UNION BY NAME (SELECT x FROM x UNION ALL SELECT x FROM x) ORDER BY x, x;
(SELECT x FROM x UNION ALL SELECT x FROM x) UNION BY NAME (SELECT x FROM x UNION ALL SELECT x FROM x) ORDER BY x, x;
SELECT x, x FROM x UNION BY NAME SELECT x, x FROM x ORDER BY x;
SELECT x, x FROM x UNION BY NAME SELECT x, x FROM x ORDER BY 3, 1;
SELECT x, x FROM x UNION BY NAME SELECT x, x FROM x ORDER BY 4;
(SELECT 1 UNION BY NAME SELECT x, x FROM x) UNION BY NAME SELECT x, x FROM x ORDER BY ALL;
(SELECT 1 UNION BY NAME SELECT x, x FROM x) UNION BY NAME SELECT x, x FROM x ORDER BY ALL;
(SELECT 1 UNION BY NAME SELECT x, x FROM x) UNION BY NAME SELECT x, x FROM x ORDER BY ALL;
(SELECT 1 UNION BY NAME SELECT x, x FROM x) UNION BY NAME SELECT x, x FROM x ORDER BY ALL;
(SELECT 1 UNION BY NAME SELECT x, x FROM x) UNION BY NAME SELECT x, x FROM x ORDER BY ALL;
SELECT '0' AS x UNION ALL SELECT 0 AS x;
SELECT '0' AS x UNION ALL BY NAME SELECT 0 AS x;
SELECT {'x': '0'} AS x UNION ALL BY NAME SELECT {'x': 0} AS x;
SELECT {'x': 'hello'} AS x UNION ALL BY NAME SELECT {'x': 'hello'} AS x;
SELECT {'x': 'hello'} AS x UNION ALL BY NAME SELECT {'x': 'hello', 'x': 'world'} AS x;
SELECT [{'x': 42}, {'x': 84}];
PRAGMA x;
SELECT CAST(x AS INT) FROM (SELECT CAST(x AS TEXT) AS x FROM x AS x UNION ALL SELECT 'hello' AS x) AS x;
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3), (4), (4);
SELECT x FROM x UNION SELECT 1 WHERE FALSE ORDER BY 1;
SELECT x FROM x EXCEPT SELECT 1 WHERE FALSE ORDER BY 1;
PRAGMA x;
SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT NULL UNION ALL SELECT 3;
SELECT MIN(1) FROM x UNION ALL SELECT MIN(2) FROM x UNION ALL SELECT MIN(NULL) FROM x UNION ALL SELECT MIN(3) FROM x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (42);
SELECT x, x FROM (SELECT x, 1 AS x FROM x GROUP BY x UNION ALL SELECT x, 2 AS x FROM x GROUP BY x) AS x;
PRAGMA x;
SELECT 1 UNION SELECT 1.0;
SELECT 1 UNION ALL SELECT 1.0;
SELECT 1 UNION (SELECT 1 UNION SELECT 1 UNION SELECT 1);
SELECT 1 UNION (SELECT 1.0 UNION SELECT 1.0 UNION SELECT 1.0) UNION SELECT 1;
SELECT 1 UNION ALL (SELECT 1.0 UNION ALL SELECT 1.0 UNION ALL SELECT 1.0) UNION ALL SELECT 1;
SELECT 1 UNION (SELECT '1' UNION SELECT '1' UNION SELECT '1') UNION SELECT 1;
PRAGMA x;
SELECT COUNT(*) FROM x UNION ALL SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x UNION ALL SELECT COUNT(*) FROM x UNION ALL SELECT COUNT(*) FROM x UNION ALL SELECT COUNT(*) FROM x UNION ALL SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x UNION SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x UNION SELECT COUNT(*) FROM x ORDER BY 1;
SELECT COUNT(*) FROM x UNION SELECT COUNT(*) FROM x UNION SELECT COUNT(*) FROM x UNION SELECT COUNT(*) FROM x UNION SELECT COUNT(*) FROM x ORDER BY 1;
SELECT * FROM (SELECT 1 UNION ALL SELECT 1) AS x;
SELECT * FROM (SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5) AS x ORDER BY 1;
CREATE TABLE x AS SELECT x, x + 1 AS x, x + 2 AS x, x + 3 AS x FROM x AS x;
CREATE TABLE x AS SELECT x, x + 1 AS x, x + 2 AS x, x + 3 AS x FROM x AS x;
SELECT COUNT(*) FROM (SELECT * FROM x UNION ALL SELECT * FROM x) AS x JOIN (SELECT 43) AS x ON x.x = x.x;
SELECT COUNT(*) FROM (SELECT * FROM x UNION ALL SELECT * FROM x) AS x;
SELECT COUNT(*) FROM (SELECT x, x, MIN(x), MIN(x) FROM x GROUP BY x, x UNION ALL SELECT * FROM x) AS x;
SELECT COUNT(*) FROM (SELECT DISTINCT x, x, x, x FROM x UNION ALL SELECT * FROM x) AS x;
SELECT COUNT(*) FROM (SELECT DISTINCT * FROM (SELECT DISTINCT x, x, x, x FROM x UNION ALL SELECT * FROM x) AS x) AS x;
SELECT COUNT(*) FROM (SELECT * FROM x UNION ALL SELECT * FROM x UNION ALL SELECT x.x, x.x, x.x, x.x FROM x, x) AS x;
SELECT COUNT(*) FROM (SELECT * FROM x UNION SELECT * FROM x UNION SELECT x.x, x.x, x.x, x.x FROM x, x) AS x;
SELECT COUNT(*) FROM (SELECT * FROM x WHERE 1 = 0 UNION ALL SELECT * FROM x) AS x;
SELECT x FROM (SELECT * FROM x WHERE x = 42 UNION ALL SELECT * FROM x) AS x WHERE x = 40;
SELECT x FROM (SELECT x, COUNT(*) AS x, COUNT(*) AS x, COUNT(*) AS x FROM x WHERE x = 42 GROUP BY x UNION ALL SELECT * FROM x) AS x WHERE x = 40;
SELECT x FROM (SELECT x AS x, x AS x, x, x FROM x UNION ALL SELECT * FROM x) AS x WHERE x = 40 AND x = 41;
SELECT * FROM (SELECT 'hello' AS x UNION ALL SELECT 'h' AS x) AS x WHERE x = 'h';
SELECT COUNT(*) FROM (SELECT * FROM x UNION ALL SELECT * FROM x) AS x JOIN (SELECT 43) AS x ON x.x = x.x;
SELECT MIN(x.x) FROM (SELECT * FROM x UNION ALL SELECT * FROM x) AS x JOIN (SELECT 43, 'hello', 44, 'world') AS x ON x.x = x.x;
PRAGMA x;
SELECT 1 UNION ALL SELECT * FROM x UNION ALL SELECT 999 LIMIT 5;
SELECT 'select count(case' AS x UNION ALL SELECT 'when a=' || x || ' then 1' FROM x LIMIT 5;
SELECT GROUP_CONCAT(x, ' ') FROM (SELECT 'select count(case' AS x UNION ALL SELECT 'when a=' || x || ' then 1' FROM x UNION ALL SELECT 'end) from t') AS x;
SELECT 'select count(case' AS x UNION ALL SELECT 'when a=' || x || ' then 1' FROM x UNION ALL SELECT 'end) from t' LIMIT 5;
SELECT 'select count(case' AS x UNION ALL SELECT 'when a=' || x || ' then 1' FROM x UNION ALL SELECT 'end) from t' LIMIT 5;
SELECT 1 UNION ALL (SELECT * FROM x UNION ALL (SELECT * FROM x) UNION ALL SELECT * FROM x) UNION ALL SELECT * FROM x UNION ALL (SELECT * FROM x UNION ALL SELECT * FROM x);
SELECT ARRAY_AGG(1) UNION ALL (SELECT ARRAY_AGG(x) FROM x AS x UNION ALL (SELECT ARRAY_AGG(x) FROM x AS x) UNION ALL SELECT ARRAY_AGG(x) FROM x AS x) UNION ALL SELECT ARRAY_AGG(x) FROM x AS x UNION ALL (SELECT ARRAY_AGG(x) FROM x AS x UNION ALL SELECT ARRAY_AGG(x) FROM x AS x);
SELECT 1 UNION ALL (SELECT * FROM x UNION ALL (SELECT * FROM x) UNION ALL SELECT * FROM x) UNION ALL SELECT * FROM x UNION ALL (SELECT * FROM x UNION ALL SELECT * FROM x) LIMIT 1000;
SELECT ARRAY_AGG(1) UNION ALL (SELECT ARRAY_AGG(x) FROM x AS x UNION ALL (SELECT ARRAY_AGG(x) FROM x AS x) UNION ALL SELECT ARRAY_AGG(x) FROM x AS x) UNION ALL SELECT ARRAY_AGG(x) FROM x AS x UNION ALL (SELECT ARRAY_AGG(x) FROM x AS x UNION ALL SELECT ARRAY_AGG(x) FROM x AS x) LIMIT 1000;
SELECT COUNT(*) FROM (SELECT * FROM x AS x UNION ALL SELECT * FROM x AS x) AS x;
CREATE TABLE x AS SELECT COUNT(*) FROM (SELECT * FROM x AS x UNION ALL SELECT * FROM x AS x) AS x;
SELECT * FROM x;
SELECT COUNT(*) FROM (SELECT * FROM x AS x UNION ALL SELECT * FROM x AS x UNION ALL SELECT * FROM x AS x UNION ALL SELECT * FROM x AS x UNION ALL SELECT * FROM x AS x) AS x;
PRAGMA x = 4;
PRAGMA x;
CREATE TABLE x AS SELECT * FROM x AS x UNION ALL SELECT NULL;
SELECT SUM(x) FROM x UNION ALL SELECT COUNT(x) FROM x UNION ALL SELECT AVG(x) FROM x UNION ALL SELECT AVG(x) + SUM(x) FROM x ORDER BY 1;
PRAGMA x;
CREATE VIEW x AS SELECT * FROM (VALUES (1, 10), (2, 5), (3, 4)) AS x;
SELECT * FROM x;
CREATE VIEW x AS SELECT * FROM x UNION ALL SELECT * FROM x;
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x LIMIT 1;
SELECT * FROM (SELECT * FROM x ORDER BY x LIMIT 4) AS x ORDER BY x LIMIT 2;
SELECT * FROM x WHERE x = 1;
SELECT DISTINCT * FROM (SELECT * FROM x UNION ALL SELECT * FROM x) AS x ORDER BY 1;
SELECT * FROM (SELECT * FROM x INTERSECT SELECT * FROM x) AS x ORDER BY 1;
SELECT * FROM (SELECT * FROM x EXCEPT SELECT * FROM x) AS x;
SET x = 'read_only';
SET x = ['data/csv/glob'];
SET x = ['data/csv/glob', 'data/parquet-testing/glob', 'data/json', '__TEST_DIR__'];
SET x = FALSE;
SET x = [];
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT REPLACE(x, '\', '/') AS x FROM x AS x;
SELECT * FROM x;
COPY (SELECT 42 AS x) TO '__TEST_DIR__/permission_test.csv' WITH (FORMAT csv);
CREATE TABLE x (x INT);
COPY x FROM '__TEST_DIR__/permission_test.csv';
SELECT * FROM x;
COPY (SELECT 42 AS x) TO 'permission_test.csv' WITH (FORMAT csv);
COPY x FROM 'permission_test.csv';
ATTACH '__TEST_DIR__/attached_dir.db' AS x;
CREATE TABLE x.x (x INT);
ATTACH 'test.db';
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SET x = ['data/csv/glob/f_1.csv'];
SET x = ['data/csv/glob/f_1.csv', '__TEST_DIR__/allowed_file.csv'];
SET x = FALSE;
SET x = [];
SELECT * FROM x;
SELECT * FROM x;
COPY (SELECT 42 AS x) TO '__TEST_DIR__/allowed_file.csv';
COPY (SELECT 42 AS x) TO '__TEST_DIR__/not_allowed_file.csv';
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3), (NULL);
SET x = 'nulls_first';
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x DESC;
SELECT FIRST(x ORDER BY x), LAST(x ORDER BY x) FROM x;
SELECT FIRST(x ORDER BY x DESC), LAST(x ORDER BY x DESC) FROM x;
SELECT ARRAY_SORT(LIST(x)), ARRAY_REVERSE_SORT(LIST(x)) FROM x;
SET x = 'sqlite';
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x DESC;
SELECT FIRST(x ORDER BY x), LAST(x ORDER BY x) FROM x;
SELECT FIRST(x ORDER BY x DESC), LAST(x ORDER BY x DESC) FROM x;
SELECT ARRAY_SORT(LIST(x)), ARRAY_REVERSE_SORT(LIST(x)) FROM x;
SET x = 'postgres';
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x DESC;
SELECT FIRST(x ORDER BY x), LAST(x ORDER BY x) FROM x;
SELECT FIRST(x ORDER BY x DESC), LAST(x ORDER BY x DESC) FROM x;
SELECT ARRAY_SORT(LIST(x)), ARRAY_REVERSE_SORT(LIST(x)) FROM x;
PRAGMA x;
CREATE SCHEMA x.x;
SELECT CURRENT_SCHEMA();
SET x = 'my_schema';
SELECT CURRENT_SCHEMA();
DROP SCHEMA x.x;
SELECT CURRENT_SCHEMA();
CREATE SCHEMA x.x;
CREATE SCHEMA x.x;
SET x = 'schema1';
SELECT CURRENT_SCHEMA();
DROP SCHEMA x.x;
SELECT CURRENT_SCHEMA();
ATTACH ':memory:' AS x;
CREATE SCHEMA x.x.x;
DROP SCHEMA x.x.x;
SELECT CURRENT_SCHEMA();
DROP SCHEMA x.x;
SELECT CURRENT_SCHEMA();
PRAGMA x;
SET x = TRUE;
SELECT * FROM x;
SELECT x FROM (VALUES (42)) AS x;
SELECT x FROM (VALUES (42)) AS x;
SELECT CORR('hello', 'world');
PRAGMA x;
SELECT 1 / 2;
SELECT 1 // 2;
SET x = TRUE;
SELECT 1 / 2;
SELECT 1 // 2;
SET x = FALSE;
SELECT 1 / 2;
SELECT 1 // 2;
PRAGMA x;
CREATE SCHEMA x.x;
CREATE SCHEMA x.x;
USE x;
USE x;
SET x = TRUE;
USE x;
SET x = 'gregorian';
SET x = 'pacific/honolulu';
SELECT * FROM x WHERE x = 'TimeZone';
SET x = 'Pacific/Honolooloo';
SET x = 'Coptic';
SELECT * FROM x WHERE x = 'Calendar';
SET x = 'muslim';
PRAGMA x = 'NOCASE';
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('hEllO'), ('WöRlD'), ('wozld');
SELECT COUNT(*) FROM x WHERE 'BlA' = 'bLa';
SELECT * FROM x WHERE x = 'hello';
SELECT * FROM x ORDER BY x;
PRAGMA x = 'NOCASE.NOACCENT';
SELECT * FROM x ORDER BY x;
PRAGMA x = 'unknown';
SET GLOBAL x = 'NOCASE';
SET x = '';
SET x = 'expression_rewriter';
SET x = 'expression_rewriter,filter_pushdown,join_order';
SELECT CURRENT_SETTING('disabled_optimizers');
SET x = 'expression_rewriteX';
SET x = 'unknown_optimizer';
SET x = 'unknown';
SET x = '${default_order}';
SELECT * FROM x;
SET x = 'unknown';
SET x = TRUE;
SET x = '${enable_profiling}';
SELECT * FROM x;
SET x = 'unknown';
PRAGMA x;
SET x = TRUE;
SET GLOBAL x = TRUE;
SET x = '${explain_output}';
SELECT * FROM x;
SET x = 'unknown';
SELECT x FROM x WHERE x = 'preserve_identifier_case';
CREATE SCHEMA x.x;
CREATE TABLE x.x (x INT);
SELECT x.x, x.x, x FROM x JOIN x USING (x);
DROP SCHEMA x.x CASCADE;
SET x = FALSE;
SELECT x FROM x WHERE x = 'preserve_identifier_case';
CREATE SCHEMA x.x;
CREATE TABLE x.x (x INT);
SELECT x.x, x.x, x FROM x JOIN x USING (x);
SET x = 'standard';
SET x = 'detailed';
SET x = 'unknown';
PRAGMA x;
CREATE SCHEMA x.x.x;
CREATE SCHEMA x.x.x;
SET x = 'temp';
SET x = 'system';
PRAGMA x;
SELECT CURRENT_SETTING('disabled_filesystems');
SET x = '';
SELECT * FROM x;
SET x = 'LocalFileSystem';
SELECT * FROM x;
SET x = 'LocalFileSystem,LocalFileSystem';
SET x = '';
PRAGMA x;
SELECT CURRENT_SETTING('lock_configuration');
SET x = '8GB';
SET x = FALSE;
SET x = '8GB';
SET x = TRUE;
SET x = '10GB';
SET x = FALSE;
SELECT CURRENT_SETTING('lock_configuration');
SET x = 'something else';
SELECT CURRENT_SETTING('custom_user_agent');
SET x = 'something else';
SELECT REGEXP_MATCHES(x, '^duckdb/.*(.*)') FROM x;
SELECT CURRENT_SETTING('threads');
PRAGMA x = 42;
PRAGMA x;
SELECT x FROM (DESCRIBE SELECT 42 AS x);
SELECT x.x FROM (DESCRIBE SELECT 42 AS x) AS x;
CREATE TABLE x AS SELECT 42 AS x;
SELECT x.x FROM (DESCRIBE x) AS x;
SELECT * FROM (x AS x) AS x;
SELECT x FROM (DESCRIBE (DESCRIBE SELECT * FROM (SELECT 32 AS x)));
PRAGMA x;
CREATE TABLE x (x INT);
SELECT x, x FROM (DESCRIBE x);
PRAGMA x;
CREATE TABLE x (x INT PRIMARY KEY, x INT NOT NULL, x INT DEFAULT 42, x INT UNIQUE, x INT);
INSERT INTO x VALUES (42, 42, 42, 42, 42);
INSERT INTO x VALUES (84, 84, 84, 84, 84);
DESCRIBE SELECT * FROM x;
DESCRIBE x;
SELECT x, x FROM (DESCRIBE SELECT x, x FROM x);
SELECT x, x FROM (DESCRIBE SELECT x FROM x WHERE x = 42);
SELECT x, x FROM (DESCRIBE SELECT x FROM x LIMIT 5);
SELECT x, x FROM (DESCRIBE SELECT x FROM x ORDER BY x LIMIT 5);
SELECT x, x FROM (DESCRIBE SELECT x FROM x USING SAMPLE RESERVOIR (5 ROWS));
SELECT x, x FROM (DESCRIBE SELECT x FROM x, (SELECT 84));
SELECT x, x FROM (DESCRIBE SELECT x.x, x.x FROM x JOIN (SELECT 84 AS x) AS x USING (x));
CREATE VIEW x AS SELECT * FROM x;
SELECT x, x FROM (DESCRIBE SELECT x, x FROM x);
SELECT x, x FROM (DESCRIBE SELECT x + 1 AS x FROM x LIMIT 5);
CREATE TABLE x (x INT);
DESCRIBE x;
DESCRIBE SELECT x AS x FROM x;
DESCRIBE SELECT x AS x FROM (SELECT x AS x FROM x);
DESCRIBE SELECT x AS x FROM (VALUES (1)) AS x;
DESCRIBE WITH x AS (SELECT 1 AS x) SELECT x AS x FROM x;
PRAGMA x;
SELECT x, x FROM (SUMMARIZE SELECT 42 AS x);
CREATE TABLE x AS SELECT 42 AS x;
SELECT x, x FROM (SUMMARIZE x);
PRAGMA x;
CREATE TABLE x (x INT, x INT, x INT);
CREATE TABLE x (x INT, x INT, x INT);
CREATE TABLE x (x INT, x INT, x INT);
DROP TABLE x;
CREATE TABLE x (x TEXT, x DATE, x BIGINT);
CREATE TABLE x (x TEXT, x DATE, x BIGINT);
PRAGMA x;
CREATE TABLE x (x INT);
DESCRIBE x;
CREATE SCHEMA x.x;
DROP TABLE x;
CREATE TABLE x.x (x INT);
DESCRIBE x.x;
DROP TABLE x.x;
CREATE TABLE x.x (x INT);
DESCRIBE x.x;
DROP TABLE x.x;
DROP SCHEMA x.x;
CREATE SCHEMA "x".x;
CREATE TABLE "x".x (x INT);
DESCRIBE "x".x;
DROP TABLE "x".x;
CREATE TABLE "x".x (x INT);
DESCRIBE "x".x;
PRAGMA x;
CREATE TABLE x (x INT, x INT);
CREATE TABLE x (x INT, x INT, x TEXT, x DATE);
INSERT INTO x VALUES (1, 1), (2, 2), (3, 3), (NULL, NULL);
INSERT INTO x VALUES (1, 30, 'a', '1992-01-01'), (8, 12, 'b', '1992-01-01'), (3, 24, 'c', '1992-01-01'), (9, 16, 'd', '1992-01-01'), (10, NULL, 'e', '1992-01-01');
DESCRIBE SELECT * FROM x;
PRAGMA x;
CREATE TABLE x (x INT, x TEXT, x INT128, x DOUBLE, x BLOB);
INSERT INTO x VALUES (1, 'hello', 12, 0.5, CAST('a\x00b\x00c' AS BLOB)), (2, 'world', -12, -0.5, CAST('' AS BLOB)), (3, NULL, NULL, NULL, NULL);
SELECT UNNEST(['i', 'j', 'k', 'd', 'e']) AS x, UNNEST(['INTEGER', 'VARCHAR', 'HUGEINT', 'DOUBLE', 'BLOB']) AS x, UNNEST([CAST(MIN(x) AS TEXT), CAST(MIN(x) AS TEXT), CAST(MIN(x) AS TEXT), CAST(MIN(x) AS TEXT), CAST(MIN(x) AS TEXT)]) AS x, UNNEST([CAST(MAX(x) AS TEXT), CAST(MAX(x) AS TEXT), CAST(MAX(x) AS TEXT), CAST(MAX(x) AS TEXT), CAST(MAX(x) AS TEXT)]) AS x FROM (SELECT * FROM x) AS x;
SUMMARIZE x;
SUMMARIZE SELECT * FROM x;
SUMMARIZE SELECT * FROM x;
SUMMARIZE SELECT CAST(x AS DATE) AS x FROM x;
SUMMARIZE SELECT CAST(x AS TIME) AS x FROM x;
SUMMARIZE (SELECT CAST('1:02:03.000000+05:30' AS TIMETZ) AS x);
SUMMARIZE VALUES (1.0), (6754950520);
SUMMARIZE SELECT 9223372036854775296;
SUMMARIZE SELECT x FROM x;
PRAGMA x;
CREATE TABLE x (x INT);
SUMMARIZE x;
CREATE SCHEMA x.x;
DROP TABLE x;
CREATE TABLE x.x (x INT);
SUMMARIZE x.x;
DROP TABLE x.x;
CREATE TABLE x.x (x INT);
SUMMARIZE x.x;
DROP TABLE x.x;
DROP SCHEMA x.x;
CREATE SCHEMA "x".x;
CREATE TABLE "x".x (x INT);
SUMMARIZE "x".x;
DROP TABLE "x".x;
CREATE TABLE "x".x (x INT);
SUMMARIZE "x".x;
PRAGMA x;
CREATE TABLE x AS SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
CREATE TABLE x (x INT, x TEXT);
INSERT INTO x VALUES (1, 'hello');
INSERT INTO x SELECT x, CAST(x AS TEXT) FROM x AS x;
SELECT MIN(x), MAX(x), MIN(x), MAX(x) FROM x;
SELECT MIN(x), MAX(x), MIN(x), MAX(x) FROM x;
INSERT INTO x SELECT x, CAST(x AS TEXT) FROM x AS x;
SELECT MIN(x), MAX(x), MIN(x), MAX(x) FROM x;
PRAGMA x = '';
PRAGMA x = 1;
PRAGMA x = '2MB';
SELECT MIN(x), MAX(x) FROM x AS x;
PRAGMA x = '10MB';
SELECT x, MIN(x), MAX(x) FROM x AS x GROUP BY x;
SELECT x, MIN(x), MAX(x) FROM x AS x GROUP BY x;
SELECT x, MIN(x), MAX(x) FROM x AS x GROUP BY x;
PRAGMA x = '2MB';
CREATE TABLE x AS SELECT * FROM x AS x;
CREATE TABLE x AS SELECT * FROM x AS x;
DROP TABLE x;
DROP TABLE x;
PRAGMA x = '';
PRAGMA x = '2MB';
CREATE TABLE x AS SELECT * FROM x;
PRAGMA x = '__TEST_DIR__/myfile.tmp';
CREATE TABLE x AS SELECT * FROM x;
PRAGMA x = '';
PRAGMA x;
PRAGMA x = '1TB';
CREATE TABLE x (x INT);
INSERT INTO x SELECT CASE WHEN x % 2 = 0 THEN NULL ELSE x END FROM x AS x;
SELECT MIN(x), MAX(x), COUNT(x), COUNT(*) FROM x;
SELECT MIN(x), MAX(x), COUNT(x), COUNT(*) FROM x;
INSERT INTO x SELECT * FROM x;
SELECT MIN(x), MAX(x), COUNT(x), COUNT(*) FROM x;
CREATE TABLE x (x TINYINT);
INSERT INTO x SELECT CAST((CASE WHEN x % 2 = 0 THEN NULL ELSE x % 100 END) AS TINYINT) AS x FROM x AS x;
SELECT MIN(x), MAX(x), COUNT(x), COUNT(*) FROM x;
SELECT MIN(x), MAX(x), COUNT(x), COUNT(*) FROM x;
INSERT INTO x SELECT * FROM x;
SELECT MIN(x), MAX(x), COUNT(x), COUNT(*) FROM x;
CREATE TABLE x AS SELECT * FROM x AS x;
PRAGMA x;
PRAGMA x = '1TB';
PRAGMA x = 'before_header';
SELECT MIN(x), MAX(x), COUNT(*) FROM x;
INSERT INTO x SELECT * FROM x AS x;
SELECT MIN(x), MAX(x), COUNT(*) FROM x;
UPDATE x SET x = x + 1;
SELECT MIN(x), MAX(x), COUNT(*) FROM x;
SELECT MIN(x), MAX(x), COUNT(*) FROM x;
PRAGMA x;
PRAGMA x = '1TB';
PRAGMA x = 'before_header';
UPDATE x SET x = x;
SELECT MIN(x), MAX(x), COUNT(*) FROM x;
CREATE TABLE x AS SELECT * FROM x AS x;
PRAGMA x;
PRAGMA x = '1TB';
PRAGMA x = 'after_free_list_write';
INSERT INTO x SELECT * FROM x AS x;
SELECT MIN(x), MAX(x), COUNT(*) FROM x;
PRAGMA x;
PRAGMA x = '1TB';
PRAGMA x = 'after_free_list_write';
UPDATE x SET x = x;
SELECT MIN(x), MAX(x), COUNT(*) FROM x;
CREATE TABLE x AS SELECT * FROM x AS x;
PRAGMA x;
PRAGMA x = '1TB';
PRAGMA x = 'before_header';
INSERT INTO x SELECT * FROM x AS x;
SELECT MIN(x), MAX(x), COUNT(*) FROM x;
PRAGMA x;
PRAGMA x = '1TB';
PRAGMA x = 'before_header';
UPDATE x SET x = x;
SELECT MIN(x), MAX(x), COUNT(*) FROM x;
CREATE TABLE x AS SELECT * FROM x AS x;
PRAGMA x;
PRAGMA x = '1TB';
PRAGMA x = 'before_truncate';
INSERT INTO x SELECT * FROM x AS x;
SELECT MIN(x), MAX(x), COUNT(*) FROM x;
PRAGMA x;
PRAGMA x = '1TB';
PRAGMA x = 'before_truncate';
UPDATE x SET x = x;
SELECT MIN(x), MAX(x), COUNT(*) FROM x;
CREATE TABLE x AS SELECT * FROM x AS x;
SELECT MIN(x), MAX(x), COUNT(x) FROM x;
UPDATE x SET x = x + 1;
SELECT MIN(x), MAX(x), COUNT(x) FROM x;
SELECT MIN(x), MAX(x), COUNT(x) FROM x;
DELETE FROM x WHERE x <= 1000;
SELECT MIN(x), MAX(x), COUNT(x) FROM x;
CREATE TABLE x (x INT);
INSERT INTO x SELECT * FROM x;
BEGIN;
UPDATE x SET x = x + 1;
ROLLBACK;
BEGIN;
UPDATE x SET x = x + 1;
ROLLBACK;
SELECT MIN(x), MAX(x), COUNT(*) FROM x;
PRAGMA x;
CREATE TABLE x (x INT PRIMARY KEY, x INT, x TEXT);
INSERT INTO x VALUES (11, 22, 'hello'), (13, 22, 'world'), (12, 21, 'test'), (10, NULL, NULL);
BEGIN;
BEGIN;
INSERT INTO x VALUES (14, 10, 'con');
INSERT INTO x VALUES (15, 10, 'con2');
INSERT INTO x VALUES (14, 10, 'con2');
COMMIT;
COMMIT;
INSERT INTO x VALUES (15, NULL, NULL);
SELECT COUNT(*), COUNT(x), COUNT(x), SUM(x), SUM(x), SUM(LENGTH(x)) FROM x;
SELECT * FROM x ORDER BY x, x, x;
PRAGMA x;
SELECT * FROM x ORDER BY x, x, x;
SELECT COUNT(*), COUNT(x), COUNT(x), SUM(x), SUM(x), SUM(LENGTH(x)) FROM x;
PRAGMA x;
SELECT COUNT(*), COUNT(x), COUNT(x), SUM(x), SUM(x), SUM(LENGTH(x)) FROM x;
SELECT * FROM x ORDER BY x, x, x;
PRAGMA x = '1TB';
PRAGMA x;
CREATE TABLE x (x INT PRIMARY KEY, x INT, x TEXT);
INSERT INTO x VALUES (11, 22, 'hello'), (13, 22, 'world'), (12, 21, 'test'), (10, NULL, NULL);
BEGIN;
BEGIN;
INSERT INTO x VALUES (14, 10, 'con');
INSERT INTO x SELECT x, NULL, NULL FROM x AS x;
INSERT INTO x VALUES (14, 10, 'con2');
COMMIT;
COMMIT;
SELECT * FROM x ORDER BY x, x, x;
INSERT INTO x VALUES (15, NULL, NULL);
INSERT INTO x VALUES (16, 24, 'blabla');
SELECT * FROM x ORDER BY x, x, x;
PRAGMA x;
SELECT * FROM x ORDER BY x, x, x;
SELECT * FROM x ORDER BY x, x, x;
PRAGMA x;
CREATE TABLE x (x INT PRIMARY KEY, x INT, x TEXT);
INSERT INTO x VALUES (11, 22, 'hello'), (13, 22, 'world'), (12, 21, 'test'), (10, NULL, NULL);
BEGIN;
BEGIN;
INSERT INTO x VALUES (14, 10, 'con');
INSERT INTO x SELECT x, NULL, NULL FROM x AS x;
INSERT INTO x VALUES (14, 10, 'con2');
COMMIT;
COMMIT;
SELECT * FROM x ORDER BY x, x, x;
INSERT INTO x VALUES (15, NULL, NULL);
INSERT INTO x VALUES (16, 24, 'blabla');
SELECT * FROM x ORDER BY x, x, x;
PRAGMA x;
SELECT * FROM x ORDER BY x, x, x;
SELECT * FROM x ORDER BY x, x, x;
PRAGMA x;
CREATE TABLE x (x INT PRIMARY KEY, x INT, x TEXT);
INSERT INTO x VALUES (11, 22, 'hello'), (13, 22, 'world'), (12, 21, 'test'), (10, NULL, NULL);
INSERT INTO x VALUES (14, 10, 'con');
SELECT * FROM x ORDER BY x, x, x;
DELETE FROM x WHERE x = 14;
SELECT * FROM x ORDER BY x, x, x;
INSERT INTO x VALUES (14, 11, 'bla');
SELECT * FROM x ORDER BY x, x, x;
PRAGMA x;
SELECT * FROM x ORDER BY x, x, x;
CREATE TABLE x AS SELECT x % 10 AS x, x % 30 AS x FROM x;
SELECT STATS(x), STATS(x) FROM x LIMIT 1;
SELECT STATS(x), STATS(x) FROM x LIMIT 1;
CREATE TABLE x (x STRUCT("x" TEXT), x STRUCT("x" TEXT));
INSERT INTO x SELECT {'x': LPAD(CAST(x AS TEXT), 4, '0')}, {'x': 'abc'} FROM x AS x;
SELECT COUNT(*) FROM (SELECT * FROM x WHERE x.x = 'abc') AS x;
SELECT COUNT(*) FROM (SELECT * FROM x WHERE x.x = 'abc') AS x;
SELECT COUNT(*) FROM (SELECT * FROM x WHERE x.x = 'abc') AS x;
SELECT COUNT(*) FROM (SELECT * FROM x WHERE x.x = 'bcd') AS x;
SELECT * FROM x;
SELECT * FROM x ORDER BY 1;
CREATE TABLE x (x INT, x INT);
INSERT INTO x (x, x) VALUES (1, 1);
BEGIN;
INSERT INTO x (x, x) VALUES (1, 2);
UPDATE x SET x = 3 FROM x AS x WHERE x.x = 1;
SET x = '1GB';
CREATE TABLE x (x TEXT[]);
INSERT INTO x (x) SELECT CASE WHEN x < 100 THEN ['a', 'b'] ELSE [] END AS x FROM x AS x;
INSERT INTO x (x) SELECT CASE WHEN x < 100 THEN ['a', 'b'] ELSE [] END AS x FROM x AS x;
INSERT INTO x (x) SELECT CASE WHEN x < 100 THEN ['a', 'b'] ELSE [] END AS x FROM x AS x;
SET x = '1MB';
CREATE TABLE x AS SELECT * FROM x;
DELETE FROM x;
SELECT x FROM x;
PRAGMA x = 'dictionary';
CREATE TABLE x (x TEXT[]);
INSERT INTO x SELECT CASE WHEN x % 2 = 0 THEN [] ELSE ['Hello', 'World'] END FROM x AS x;
SELECT MIN(x), MAX(x), COUNT(x) FROM (SELECT x[2] FROM x) AS x;
SELECT SUM(CASE WHEN x IS DISTINCT FROM ['Hello', 'World'] THEN 1 ELSE 0 END) FROM x;
SELECT COUNT(*) FROM x WHERE x = ['Hello', 'World'];
SELECT DISTINCT x FROM x ORDER BY ALL;
SELECT MIN(x), MAX(x), COUNT(x) FROM (SELECT x[2 : 2] FROM x) AS x;
CREATE TABLE x AS SELECT * FROM x ORDER BY x;
SELECT * FROM x LIMIT 3;
SELECT * FROM x LIMIT 3 OFFSET 5000;
SELECT MIN(x), MAX(x) FROM (SELECT UNNEST(x) AS x FROM x) AS x;
SELECT COUNT(*) FROM x WHERE x IN (SELECT * FROM x);
SELECT MIN(x), MAX(x), MIN(x[1]), MAX(x[1]), MIN(x[2]), MAX(x[2]) FROM (SELECT [LOWER(x) FOR x IN x] FROM x) AS x;
SELECT MIN(x), MAX(x) FROM (SELECT [LOWER(x) FOR x IN x IF x <> 'Hello'] FROM x) AS x;
SELECT MIN(x), MAX(x), MIN(x), MAX(x) FROM (SELECT LIST_MIN(x), LIST_MAX(x) FROM x) AS x;
SELECT MIN(ARRAY_SORT(x)[2]) FROM x;
SELECT COUNT(*) FROM x WHERE ARRAY_CONTAINS(x, 'World');
CREATE TABLE x (x INT PRIMARY KEY, x INT, x TEXT);
DROP TABLE x;
CREATE TABLE x (x INT PRIMARY KEY, x INT, x TEXT);
SELECT COUNT(*) FROM x;
INSERT INTO x VALUES (11, 22, 'hello'), (13, 22, 'world'), (12, 21, 'test'), (10, NULL, NULL);
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
INSERT INTO x VALUES (11, 22, 'hello');
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT * FROM x ORDER BY 1, 2, 3;
CREATE VIEW x AS SELECT 42;
DROP VIEW x;
SELECT x FROM x;
SELECT x * x < 10 * 262144 FROM x;
CREATE TABLE x (x TINYINT);
INSERT INTO x SELECT CAST((CASE WHEN x % 2 = 0 THEN NULL ELSE x % 100 END) AS TINYINT) AS x FROM x AS x;
SELECT MIN(x), MAX(x), COUNT(x), COUNT(*) FROM x;
INSERT INTO x SELECT * FROM x;
SELECT MIN(x), MAX(x), COUNT(x), COUNT(*) FROM x;
INSERT INTO x SELECT * FROM x;
SELECT MIN(x), MAX(x), COUNT(x), COUNT(*) FROM x;
INSERT INTO x SELECT * FROM x;
SELECT MIN(x), MAX(x), COUNT(x), COUNT(*) FROM x;
INSERT INTO x SELECT * FROM x;
SELECT MIN(x), MAX(x), COUNT(x), COUNT(*) FROM x;
INSERT INTO x SELECT * FROM x;
SELECT MIN(x), MAX(x), COUNT(x), COUNT(*) FROM x;
SET x = TRUE;
CREATE TABLE x (x INT);
INSERT INTO x SELECT * FROM x;
SELECT MIN(x), MAX(x), COUNT(*) FROM x;
BEGIN;
UPDATE x SET x = x + 1;
SELECT MIN(x), MAX(x), COUNT(*) FROM x;
SELECT MIN(x), MAX(x), COUNT(*) FROM x;
SELECT MIN(x), MAX(x), COUNT(*) FROM x;
SELECT MIN(x), MAX(x), COUNT(*) FROM x;
ROLLBACK;
SELECT MIN(x), MAX(x), COUNT(*) FROM x;
SELECT MIN(x), MAX(x), COUNT(*) FROM x;
CREATE TABLE x (x INT);
INSERT INTO x SELECT * FROM x;
BEGIN;
UPDATE x SET x = x + 1;
ROLLBACK;
SELECT MIN(x), MAX(x), COUNT(*) FROM x;
SELECT MIN(x), MAX(x), COUNT(*) FROM x;
DROP TABLE x;
CREATE TABLE x (x INT);
INSERT INTO x SELECT * FROM x;
BEGIN;
BEGIN;
UPDATE x SET x = x + 1 WHERE x < 1000;
BEGIN;
UPDATE x SET x = x + 1 WHERE x > 1000 AND x < 2000;
BEGIN;
UPDATE x SET x = x + 1 WHERE x > 2000 AND x < 3000;
BEGIN;
UPDATE x SET x = x + 1 WHERE x > 3000 AND x < 4000;
SELECT MIN(x), MAX(x), COUNT(*) FROM x;
SELECT MIN(x), MAX(x), COUNT(*) FROM x;
ROLLBACK;
SELECT MIN(x), MAX(x), COUNT(*) FROM x;
ROLLBACK;
SELECT MIN(x), MAX(x), COUNT(*) FROM x;
ROLLBACK;
SELECT MIN(x), MAX(x), COUNT(*) FROM x;
ROLLBACK;
SELECT MIN(x), MAX(x), COUNT(*) FROM x;
SELECT MIN(x), MAX(x), COUNT(*) FROM x;
CREATE TABLE x (x INT, x AS (x + 100));
INSERT INTO x SELECT x FROM x;
DELETE FROM x WHERE x % 10 = 7;
DELETE FROM x WHERE x % 10 = 6;
DELETE FROM x WHERE x % 10 = 5;
DELETE FROM x WHERE x % 10 = 4;
DELETE FROM x WHERE x % 10 = 3;
DELETE FROM x WHERE x % 10 = 2;
DELETE FROM x WHERE x % 10 = 1;
DELETE FROM x WHERE x % 10 = 0;
DELETE FROM x WHERE x % 10 = 8;
DELETE FROM x WHERE x % 10 = 9;
DROP TABLE x;
SELECT MAX(x) < 5 * (2621440 / GET_BLOCK_SIZE('relocate_metadata')) FROM x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (11, 22), (13, 22);
SELECT * FROM x ORDER BY x;
INSERT INTO x VALUES (11, 24);
SELECT x, x FROM x WHERE x = 11 ORDER BY x;
SELECT x, x FROM x WHERE x > 11 ORDER BY x;
DELETE FROM x WHERE x = 11 AND x = 24;
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
INSERT INTO x VALUES (11, 24);
SELECT x, x FROM x WHERE x = 11 ORDER BY x;
SELECT x, x FROM x WHERE x > 11 ORDER BY x;
DELETE FROM x WHERE x = 11 AND x = 22;
UPDATE x SET x = 22 WHERE x = 11;
SELECT * FROM x ORDER BY x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (11, 22), (13, 22);
BEGIN;
INSERT INTO x VALUES (22, 23);
SELECT * FROM x ORDER BY x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (11, 22), (13, 22);
BEGIN;
BEGIN;
SELECT * FROM x ORDER BY x;
CREATE TABLE x (x INT PRIMARY KEY, x INT);
INSERT INTO x VALUES (11, 22), (13, 22);
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
INSERT INTO x VALUES (11, 24);
INSERT INTO x VALUES (12, 24);
INSERT INTO x VALUES (12, 24);
SELECT * FROM x ORDER BY x;
SELECT * FROM x WHERE x = 12;
INSERT INTO x VALUES (11, 24);
INSERT INTO x VALUES (12, 24);
SELECT * FROM x ORDER BY x;
SELECT * FROM x WHERE x = 12;
SET x = FALSE;
CREATE TABLE x (x INT PRIMARY KEY, x INT);
INSERT INTO x VALUES (11, 22), (13, 22);
SELECT * FROM x ORDER BY x;
SET x = 'uncompressed';
CREATE TABLE x (x TEXT, x BIGINT);
CREATE TABLE x (x TEXT, x BIGINT);
CREATE TABLE x (x TEXT, x BIGINT);
CREATE TABLE x (x TEXT, x BIGINT);
SELECT LENGTH(x) FROM x;
SELECT LENGTH(x) FROM x;
SELECT LENGTH(x) FROM x;
SELECT LENGTH(x) FROM x;
SET x = 'uncompressed';
CREATE TABLE x (x INT, x INT);
CREATE TABLE x (x INT, x INT);
INSERT INTO x SELECT * FROM x AS x;
SELECT SUM(x) + SUM(x) FROM x;
SELECT SUM(x) + SUM(x) FROM x;
SELECT SUM(x) + SUM(x) FROM x;
SET x = 'uncompressed';
CREATE TABLE x (x TEXT);
CREATE TABLE x (x TEXT);
INSERT INTO x SELECT * FROM x AS x;
SELECT x, COUNT(*) FROM x GROUP BY x ORDER BY x;
SELECT x, COUNT(*) FROM x GROUP BY x ORDER BY x;
SELECT COUNT(x) FROM x WHERE x = 'a';
UPDATE x SET x = 'aaa' WHERE x = 'a';
SELECT x, COUNT(*) FROM x GROUP BY x ORDER BY x;
SET x = 'uncompressed';
CREATE TABLE x (x INT, x BIGINT);
CREATE TABLE x (x INT, x BIGINT);
INSERT INTO x SELECT * FROM x AS x;
SELECT SUM(x) + SUM(x) FROM x;
SELECT SUM(x) + SUM(x) FROM x;
SELECT SUM(x) + SUM(x) FROM x;
CREATE TABLE x AS SELECT INTERVAL (x) YEAR AS x FROM x;
SELECT MIN(x), MAX(x), COUNT(*), COUNT(x) FROM x;
SELECT MIN(x), MAX(x), COUNT(*), COUNT(x) FROM x WHERE x = INTERVAL '1' YEAR;
CREATE TABLE x AS SELECT x % 2 = 0 AS x FROM x;
SELECT MIN(x), MAX(x), COUNT(*), COUNT(x) FROM x;
SELECT MIN(x), MAX(x), COUNT(*), COUNT(x) FROM x WHERE NOT x;
SELECT MIN(x), MAX(x), COUNT(*), COUNT(x) FROM x WHERE NOT x;
SELECT MIN(x), MAX(x), COUNT(*), COUNT(x) FROM x WHERE NOT x;
SELECT MIN(x), MAX(x), COUNT(*), COUNT(x) FROM x;
SELECT MIN(x), MAX(x), COUNT(*), COUNT(x) FROM x WHERE x = INTERVAL '1' YEAR;
SELECT MIN(x), MAX(x), COUNT(*), COUNT(x) FROM x;
SELECT MIN(x), MAX(x), COUNT(*), COUNT(x) FROM x WHERE NOT x;
ATTACH 'data/storage/empty64.db' (READ_ONLY);
ATTACH 'data/storage/empty65.db' (READ_ONLY);
ATTACH 'data/storage/empty66.db' (READ_ONLY);
SELECT x FROM x WHERE x LIKE 'empty%' ORDER BY x;
ATTACH '__TEST_DIR__/storage_versions65.db';
SELECT x FROM x WHERE x = 'storage_versions65';
SET x = 'v0.10.2';
ATTACH '__TEST_DIR__/regular_file.db';
SELECT x FROM x WHERE x = 'regular_file';
ATTACH '__TEST_DIR__/bc_0102.db.gz' AS x;
SELECT x FROM x WHERE x = 'storage_version64';
ATTACH '__TEST_DIR__/storage_versions66.db';
SELECT x FROM x WHERE x = 'storage_versions66';
PRAGMA x;
PRAGMA x = '1TB';
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (0, 1), (0, 2), (1, 3), (1, NULL);
CREATE VIEW x AS SELECT x, x, x % 2, SUM(x), SUM(x) FROM x GROUP BY ALL ORDER BY ALL;
SELECT * FROM x;
CREATE VIEW x AS SELECT x, x, x % 2, SUM(x), SUM(x) FROM x GROUP BY ALL ORDER BY ALL DESC;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
CREATE TABLE x ("x" TEXT, "x" STRUCT(x TEXT));
INSERT INTO x ("x") (SELECT "x" FROM x AS x QUALIFY ROW_NUMBER() OVER (PARTITION BY x) = 1);
SELECT COUNT(DISTINCT x), COUNT(*), COUNT("x"), COUNT("x".x) FROM x;
CREATE TABLE x (x TEXT, x INT);
PRAGMA x = 'uncompressed';
INSERT INTO x VALUES (REPEAT('a', 8000), 1);
INSERT INTO x VALUES (CONCAT(CAST(RANGE(0, 500000) AS TEXT)), 5);
INSERT INTO x VALUES (REPEAT('f', 1), 6);
SELECT x FROM x WHERE x ILIKE 'VARCHAR' LIMIT 1;
SELECT x[1], STRLEN(x) FROM x;
SELECT x[1], STRLEN(x), x FROM x WHERE x = 5;
SELECT x[1], STRLEN(x), x FROM x WHERE x = 6;
SELECT x[1], STRLEN(x), x FROM x WHERE x = CONCAT(CAST(RANGE(0, 500000) AS TEXT));
CREATE TABLE x (x INT, x TEXT);
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
INSERT INTO x VALUES (1, 2);
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
CREATE TABLE x (x INT NOT NULL, x INT NOT NULL, PRIMARY KEY (x));
INSERT INTO x VALUES (1, 1);
DELETE FROM x WHERE x = 1;
INSERT INTO x VALUES (1, 1);
SELECT * FROM x;
SELECT * FROM x WHERE x = 1;
SELECT * FROM x;
SELECT * FROM x WHERE x = 1;
PRAGMA x = '1TB';
CREATE TABLE x (x INT, x TEXT);
INSERT INTO x SELECT x.x AS x, UUID() AS x FROM x AS x;
CREATE UNIQUE INDEX x ON x(x);
SELECT x < 6291456 / GET_BLOCK_SIZE('index_checkpoint') * 1.2 FROM x;
PRAGMA x = '${compression}';
PRAGMA x = '10KB';
CREATE TABLE x (x INT);
INSERT INTO x SELECT * FROM x AS x;
SELECT MIN(x), MAX(x), COUNT(*) FROM x;
SELECT MIN(x), MAX(x), COUNT(*) FROM x;
BEGIN;
CREATE TABLE x (x INT, x INT);
INSERT INTO x SELECT x, x FROM (VALUES (11, 22), (13, 22), (12, 21)) AS x, x AS x;
COMMIT;
DELETE FROM x WHERE x = 12;
SELECT SUM(x), SUM(x), COUNT(*) FROM x;
SELECT SUM(x), SUM(x), COUNT(*) FROM x;
CREATE TABLE x (x INT, x INT);
BEGIN;
BEGIN;
INSERT INTO x SELECT x, x FROM (VALUES (11, 22), (13, 22), (12, 21)) AS x, x AS x;
INSERT INTO x SELECT x, x FROM (VALUES (14, 27), (10, 28), (13, 24)) AS x, x AS x;
DELETE FROM x WHERE x = 12;
UPDATE x SET x = 30 WHERE x = 11;
DELETE FROM x WHERE x = 13;
UPDATE x SET x = 37 WHERE x = 10;
SELECT x, x, COUNT(*) FROM x GROUP BY x, x ORDER BY x, x;
SELECT x, x, COUNT(*) FROM x GROUP BY x, x ORDER BY x, x;
COMMIT;
COMMIT;
SELECT x, x, COUNT(*) FROM x GROUP BY x, x ORDER BY x, x;
SELECT x, x, COUNT(*) FROM x GROUP BY x, x ORDER BY x, x;
CREATE TABLE x (x INT, x INT);
BEGIN;
BEGIN;
INSERT INTO x SELECT x, x FROM (VALUES (11, 22), (13, 22), (12, 21)) AS x, x AS x;
INSERT INTO x SELECT x, x FROM (VALUES (14, 27), (10, 28), (13, 24)) AS x, x AS x;
DELETE FROM x WHERE x = 12;
DELETE FROM x WHERE x = 13;
ROLLBACK;
ROLLBACK;
BEGIN;
BEGIN;
INSERT INTO x SELECT x, x FROM (VALUES (11, 22), (13, 22), (12, 21)) AS x, x AS x;
INSERT INTO x SELECT x, x FROM (VALUES (14, 27), (10, 28), (13, 24)) AS x, x AS x;
UPDATE x SET x = 30 WHERE x = 11;
UPDATE x SET x = 33 WHERE x = 10;
SELECT x, x, COUNT(*) FROM x GROUP BY x, x ORDER BY x, x;
SELECT x, x, COUNT(*) FROM x GROUP BY x, x ORDER BY x, x;
COMMIT;
COMMIT;
SELECT x, x, COUNT(*) FROM x GROUP BY x, x ORDER BY x, x;
SELECT x, x, COUNT(*) FROM x GROUP BY x, x ORDER BY x, x;
COPY (SELECT CAST(((CAST(x AS DOUBLE) * 129371982737) % 2478526729) AS BIGINT) AS x, CAST(CAST(((CAST(x AS DOUBLE) * 12937198273679) % 2478527) AS BIGINT) AS TEXT) AS x FROM x AS x) TO '__TEST_DIR__/big.parquet' WITH (FORMAT PARQUET, COMPRESSION UNCOMPRESSED);
SELECT COUNT(*) FROM x;
ATTACH '__TEST_DIR__/num${i}.db';
ATTACH '__TEST_DIR__/num${i}.db';
ATTACH '__TEST_DIR__/num${i}.db';
SELECT * FROM x;
SELECT * FROM x;
CREATE TABLE x AS SELECT * FROM x AS x;
SELECT * FROM x;
SELECT CURRENT_USER();
CREATE TABLE x AS SELECT 42;
DROP TABLE IF EXISTS x;
CREATE TABLE x (x INT);
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
DELETE FROM x WHERE x = 12;
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
DELETE FROM x WHERE x = 13;
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
PRAGMA x = '${compression}';
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (11, 22), (13, 22), (12, 21), (NULL, NULL);
CREATE TABLE x (x INT);
INSERT INTO x VALUES (13), (12), (11);
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
INSERT INTO x VALUES (14, 23);
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
DROP TABLE x;
PRAGMA x = '${compression}';
CREATE TABLE x (x INT, x TEXT);
INSERT INTO x VALUES (NULL, 'hello'), (13, 'abcdefgh'), (12, NULL);
SELECT x, x FROM x ORDER BY x;
SELECT x, x FROM x ORDER BY x;
CREATE TABLE x (x INT, x TEXT);
CREATE TABLE IF NOT EXISTS x (x INT, x TEXT);
PRAGMA x;
SELECT COUNT(*) FROM x;
PRAGMA x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
PRAGMA x;
ALTER TABLE x ADD COLUMN x INT;
UPDATE x SET x = x * x;
SELECT x FROM x LIMIT 10;
SELECT x FROM x LIMIT 10;
SELECT x FROM x LIMIT 10;
CREATE TABLE x AS SELECT * FROM x AS x;
DELETE FROM x WHERE x < 150000;
SELECT COUNT(*) FROM x;
TRUNCATE TABLE x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
CREATE TABLE x (x INT, x TEXT);
INSERT INTO x VALUES (NULL, 'hello'), (13, 'abcdefgh'), (12, NULL);
SELECT x, x FROM x ORDER BY x;
PRAGMA x;
SELECT x, x FROM x ORDER BY x;
INSERT INTO x SELECT CASE WHEN x % 2 = 0 THEN x ELSE NULL END, CASE WHEN x % 2 = 0 THEN 'hello' || CAST(x AS TEXT) ELSE NULL END FROM x AS x;
SELECT COUNT(*), SUM(x), MIN(x), MAX(x), MIN(x), MAX(x), COUNT(x), COUNT(x) FROM x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 100), (2, 200);
CREATE UNIQUE INDEX x ON x(x);
INSERT INTO x VALUES (1, 101), (2, 201);
CREATE TABLE IF NOT EXISTS x AS SELECT x AS x, x AS x FROM x;
CREATE UNIQUE INDEX x ON x(x);
INSERT INTO x VALUES (1, 101), (2, 201);
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (11, 22), (13, 22), (12, 21), (NULL, NULL);
CREATE TABLE x (x INT);
INSERT INTO x VALUES (13), (12), (11);
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
INSERT INTO x VALUES (14, 23);
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
DROP TABLE x;
CREATE TABLE IF NOT EXISTS x (x INT PRIMARY KEY);
INSERT INTO x (x) VALUES (1);
ALTER TABLE x ADD COLUMN x REAL;
INSERT INTO x (x) VALUES (1);
INSERT INTO x (x) VALUES (1);
ALTER TABLE x ALTER COLUMN x SET DEFAULT 10;
INSERT INTO x (x) VALUES (1);
INSERT INTO x (x) VALUES (1);
INSERT INTO x (x) VALUES (1);
INSERT INTO x (x) VALUES (1);
ALTER TABLE x RENAME TO x;
INSERT INTO x (x) VALUES (1);
INSERT INTO x (x) VALUES (1);
ALTER TABLE x DROP d;
INSERT INTO x (x) VALUES (1);
INSERT INTO x (x) VALUES (1);
PRAGMA x;
SELECT x, x FROM x WHERE NOT x;
PRAGMA x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SET x = 'uncompressed';
SET x = '10MB';
SET x = 1;
CREATE TABLE x (x INT, x INT);
CREATE TABLE x (x INT, x INT);
INSERT INTO x SELECT * FROM x AS x;
SELECT COUNT(*), COUNT(x), SUM(x), SUM(x) FROM x;
SET x = 'uncompressed';
SET x = '10MB';
SET x = 1;
SELECT COUNT(*), COUNT(x), SUM(x), SUM(x) FROM x;
PRAGMA x = 'uncompressed';
SET x = '10000000b';
SET x = 1;
CREATE TABLE x (x INT, x INT);
CREATE TABLE x (x INT, x INT);
INSERT INTO x SELECT * FROM x AS x;
SELECT COUNT(*) FROM x;
SELECT SUM(x) + SUM(x) FROM x;
SET x = '10000000b';
SET x = 1;
SELECT SUM(x) + SUM(x) FROM x;
CREATE TABLE x (x TEXT COLLATE x);
INSERT INTO x VALUES ('Mühleisen'), ('Hëllö');
SELECT * FROM x WHERE x = 'Muhleisen';
SELECT * FROM x WHERE x = 'mühleisen';
SELECT * FROM x WHERE x = 'Hello';
SELECT * FROM x WHERE x = 'Muhleisen';
SELECT * FROM x WHERE x = 'mühleisen';
SELECT * FROM x WHERE x = 'Hello';
CREATE TABLE x (x INT CHECK (x < 10), x INT CHECK (CASE WHEN x < 10 THEN x < x ELSE x + x < 100 END));
INSERT INTO x VALUES (3, 7);
INSERT INTO x VALUES (12, 13);
INSERT INTO x VALUES (5, 3);
INSERT INTO x VALUES (9, 90);
INSERT INTO x VALUES (9, 99);
CREATE SCHEMA x.x;
CREATE TABLE x.x (x INT, x INT);
INSERT INTO x.x VALUES (11, 22), (13, 22);
DROP TABLE x.x;
DROP SCHEMA x.x;
CREATE SCHEMA x.x;
CREATE TABLE x.x (x INT, x INT);
INSERT INTO x.x VALUES (11, 22), (13, 22);
DROP TABLE x.x;
DROP TABLE x.x;
CREATE SCHEMA x.x;
PRAGMA x;
PRAGMA x = '1TB';
SELECT PLUS1(2);
SELECT PLUS1(2);
SELECT PLUS1(2);
SELECT PLUS2(3);
SELECT PLUS2(4);
SELECT ADDITION(2), ADDITION(1, 2);
SELECT ADDITION(2), ADDITION(1, 2);
CREATE SEQUENCE x;
CREATE SEQUENCE x;
INSERT INTO x (x) VALUES (2), (4), (6);
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
PRAGMA x;
INSERT INTO x VALUES (NULL);
CREATE TABLE x (x INT);
SELECT x FROM x;
SELECT x FROM x;
SELECT x FROM x;
SELECT x FROM x;
SELECT x FROM x;
SELECT x FROM x;
SELECT x FROM x;
CREATE SEQUENCE x;
BEGIN;
SELECT NEXTVAL('seq');
SELECT NEXTVAL('seq');
SELECT NEXTVAL('seq');
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (11, 22), (13, 22), (12, 21);
ALTER TABLE x ADD COLUMN x INT DEFAULT 2;
SELECT x FROM x ORDER BY x;
SELECT x FROM x ORDER BY x;
INSERT INTO x (x, x) VALUES (1, 1);
SELECT x FROM x ORDER BY x;
CREATE TABLE x (x INT, x INT);
ALTER TABLE x ADD COLUMN x INT DEFAULT 2;
SELECT x FROM x ORDER BY x;
SELECT x FROM x ORDER BY x;
CREATE TABLE x (x INT, x INT);
PRAGMA x;
ALTER TABLE x ALTER COLUMN x SET DATA TYPE TEXT;
SELECT * FROM x ORDER BY 1;
INSERT INTO x VALUES (10, 'hello');
SELECT * FROM x ORDER BY 1;
SELECT * FROM x WHERE x = 'hello';
DELETE FROM x WHERE x = 'hello';
SELECT * FROM x ORDER BY 1;
SELECT * FROM x ORDER BY 1;
INSERT INTO x VALUES (10, 'hello');
SELECT * FROM x ORDER BY 1;
CREATE TABLE x (x INT, x INT);
ALTER TABLE x ALTER COLUMN x SET DATA TYPE TEXT;
SELECT * FROM x ORDER BY 1;
INSERT INTO x VALUES (10, 'hello');
SELECT * FROM x ORDER BY 1;
SELECT * FROM x ORDER BY 1;
CREATE TABLE x (x INT DEFAULT 1, x INT);
INSERT INTO x (x) VALUES (11);
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
INSERT INTO x (x) VALUES (12), (13);
SELECT * FROM x ORDER BY x;
INSERT INTO x (x) VALUES (14), (15);
SELECT * FROM x ORDER BY x;
CREATE SEQUENCE x;
SELECT NEXTVAL('seq');
CREATE TABLE x (x INT DEFAULT NEXTVAL('seq'), x INT, x INT DEFAULT CURRVAL('seq'));
INSERT INTO x (x) (VALUES (11)) AS x;
SELECT * FROM x ORDER BY x;
INSERT INTO x (x) VALUES (12);
INSERT INTO x (x) VALUES (13);
SELECT * FROM x ORDER BY x;
INSERT INTO x (x) VALUES (14);
INSERT INTO x (x) VALUES (15);
SELECT * FROM x ORDER BY x;
CREATE TABLE x (x INT, x INT);
ALTER TABLE x DROP COLUMN x;
SELECT * FROM x ORDER BY 1;
SELECT * FROM x ORDER BY 1;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (11, 22), (13, 22), (12, 21);
BEGIN;
SELECT x FROM x ORDER BY x;
ALTER TABLE x RENAME COLUMN x TO x;
SELECT x FROM x ORDER BY x;
SELECT x FROM x ORDER BY x;
BEGIN;
SELECT x FROM x ORDER BY x;
ALTER TABLE x RENAME COLUMN x TO x;
SELECT x FROM x ORDER BY x;
SELECT x FROM x ORDER BY x;
SELECT x FROM x ORDER BY x;
SELECT x FROM x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (11, 22), (13, 22), (12, 21);
BEGIN;
SELECT x FROM x ORDER BY x;
ALTER TABLE x RENAME TO x;
SELECT x FROM x ORDER BY 1;
SELECT x FROM x ORDER BY 1;
BEGIN;
SELECT x FROM x ORDER BY x;
ALTER TABLE x RENAME TO x;
SELECT x FROM x ORDER BY 1;
SELECT x FROM x ORDER BY 1;
SELECT x FROM x ORDER BY 1;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (11, 22), (13, 22), (12, 21);
CREATE VIEW x AS SELECT * FROM x;
BEGIN;
SELECT x FROM x ORDER BY x;
ALTER VIEW x RENAME TO x;
SELECT x FROM x ORDER BY 1;
SELECT x FROM x ORDER BY 1;
BEGIN;
SELECT x FROM x ORDER BY x;
ALTER VIEW x RENAME TO x;
SELECT x FROM x ORDER BY 1;
SELECT x FROM x ORDER BY 1;
SELECT x FROM x ORDER BY 1;
CREATE SEQUENCE x;
CREATE SEQUENCE x;
SELECT NEXTVAL('seq');
SELECT NEXTVAL('seq_cycle');
SELECT NEXTVAL('seq');
SELECT NEXTVAL('seq_cycle');
SELECT NEXTVAL('seq'), NEXTVAL('seq');
SELECT NEXTVAL('seq_cycle');
DROP SEQUENCE x;
SELECT NEXTVAL('seq');
CREATE TABLE x (x INT);
CREATE TEMPORARY TABLE x.x (x INT);
INSERT INTO x VALUES (42);
DELETE FROM x;
DELETE FROM x.x;
DELETE FROM x.x;
CREATE TEMPORARY SEQUENCE x;
CREATE TEMPORARY SEQUENCE x;
DROP SEQUENCE x;
CREATE TEMPORARY VIEW x AS SELECT 42;
CREATE TEMPORARY VIEW x AS SELECT 42;
DROP VIEW x;
INSERT INTO x.x VALUES (43);
UPDATE x.x SET x = 44;
UPDATE x SET x = 45;
ALTER TABLE x RENAME COLUMN x TO x;
SELECT * FROM x;
SELECT * FROM x AS x;
SELECT * FROM x;
SELECT * FROM x;
CREATE TEMPORARY TABLE x (x INT);
CREATE TEMPORARY SEQUENCE x;
CREATE TABLE x (x INT, x TEXT, x DOUBLE);
INSERT INTO x VALUES (1, 'tom', 1.1), (2, 'dick', 1.2), (3, 'harry', 1.2), (4, 'mary', 0.9), (5, 'mungo', 0.8), (6, 'midge', 0.5);
SELECT * FROM x ORDER BY x LIMIT 1;
SELECT * FROM x;
PRAGMA x;
PRAGMA x = '1TB';
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SET x = TRUE;
CREATE SCHEMA x.x;
CREATE TABLE x.x (x INT, x INT);
CREATE VIEW x.x (x, x) AS SELECT * FROM x.x;
PRAGMA TABLE_INFO('test.v');
SELECT * FROM x.x;
DROP TABLE x.x CASCADE;
PRAGMA TABLE_INFO('test.v');
PRAGMA TABLE_INFO('test.v');
SELECT * FROM x.x;
CREATE TABLE x.x (x INT, x INT);
SELECT * FROM x.x;
SELECT x, x FROM x.x;
CREATE VIEW x.x (x, x) AS SELECT * FROM x.x;
SET x = TRUE;
CREATE SCHEMA x.x;
CREATE TABLE x.x (x INT, x INT);
CREATE VIEW x.x AS SELECT * FROM x.x;
PRAGMA TABLE_INFO('test.v');
DROP TABLE x.x CASCADE;
PRAGMA TABLE_INFO('test.v');
SELECT * FROM x.x;
PRAGMA TABLE_INFO('test.v');
SELECT * FROM x.x;
CREATE TABLE x.x (x INT, x INT);
SELECT * FROM x.x;
SELECT * FROM x.x;
CREATE VIEW x.x AS SELECT * FROM x.x;
SELECT * FROM x.x;
PRAGMA TABLE_INFO('test.v');
CREATE SCHEMA x.x;
CREATE TABLE x.x (x INT, x INT);
CREATE VIEW x.x AS SELECT * FROM x.x;
PRAGMA TABLE_INFO('test.v');
DROP TABLE x.x;
PRAGMA TABLE_INFO('test.v');
SELECT * FROM x.x;
PRAGMA TABLE_INFO('test.v');
SELECT * FROM x.x;
CREATE TABLE x.x (x INT, x INT);
SELECT * FROM x.x;
SELECT * FROM x.x;
PRAGMA TABLE_INFO('test.v');
BEGIN;
ATTACH '__TEST_DIR__/rollback.db' (BLOCK_SIZE 16384);
ATTACH '__TEST_DIR__/rollback.db' (BLOCK_SIZE 16384);
ROLLBACK;
ATTACH '__TEST_DIR__/rollback.db' (BLOCK_SIZE 262144);
ATTACH 'data/storage/index_0-9-1.db' (TYPE x, READONLY);
ATTACH 'data/storage/block_size_16kb.db' (TYPE x, READONLY);
SELECT * FROM x.x;
ATTACH 'data/storage/index_0-9-1.db' (TYPE x, READONLY);
ATTACH 'data/storage/vector_size_512.db' (TYPE x, READONLY);
SELECT * FROM x.x;
PRAGMA x;
PRAGMA x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
INSERT INTO x VALUES (1, 1, 1), (1, 1, 1), (1, 1, 1), (2, 2, 2), (2, 2, 2), (3, 3, 3);
SELECT * FROM x;
SELECT * FROM x;
SELECT COUNT(*) > 0 FROM x WHERE x ILIKE 'INTEGER' AND x = 'RLE';
ALTER TABLE x RENAME COLUMN x TO x;
ALTER TABLE x RENAME COLUMN x TO x;
SELECT * FROM x;
SELECT COUNT(*) > 0 FROM x WHERE x ILIKE 'INTEGER' AND x = 'RLE';
SELECT * FROM x;
SELECT COUNT(*) > 0 FROM x WHERE x ILIKE 'INTEGER' AND x = 'RLE';
ALTER TABLE x DROP COLUMN x;
SELECT * FROM x;
SELECT x FROM x WHERE x ILIKE 'INTEGER' LIMIT 2;
SELECT * FROM x;
SELECT x FROM x WHERE x ILIKE 'INTEGER' LIMIT 3;
ATTACH 'data/storage/block_size_16kb.db' (TYPE x, READONLY);
ATTACH 'data/storage/vector_size_512.db' (TYPE x, READONLY);
SET x = 1;
PRAGMA x = '1TB';
ATTACH '__TEST_DIR__/smaller_block_size.db' (BLOCK_SIZE 16384);
CREATE TABLE x.x AS SELECT x AS x FROM x;
ATTACH '__TEST_DIR__/larger_block_size.db' (BLOCK_SIZE 262144);
CREATE TABLE x.x AS SELECT x AS x FROM x;
SELECT COUNT(*) > 0 FROM x WHERE x = 'BitPacking';
SET x = 1;
PRAGMA x = '1TB';
ATTACH '__TEST_DIR__/no_bitpacking.db' (BLOCK_SIZE 16384);
CREATE TABLE x.x AS SELECT x AS x FROM x;
ATTACH '__TEST_DIR__/has_bitpacking.db' (BLOCK_SIZE 262144);
CREATE TABLE x.x AS SELECT x AS x FROM x;
SELECT COUNT(*) FROM x WHERE x = 'BitPacking';
CREATE TABLE x AS SELECT * FROM x AS x;
SELECT COUNT(DISTINCT x) < 60 FROM x;
SELECT MEDIAN(x) FROM x;
COPY x TO '__TEST_DIR__/integers.parquet' WITH (ROW_GROUP_SIZE 777);
CREATE TABLE x AS SELECT * FROM x;
SELECT * FROM x LIMIT 5;
SELECT * FROM x LIMIT 5 OFFSET 73654;
SELECT COUNT(DISTINCT x) < 60 FROM x;
SELECT MEDIAN(x) FROM x;
SET x = FALSE;
CREATE TABLE x AS SELECT * FROM x;
SELECT COUNT(DISTINCT x) < 60 FROM x;
SELECT MEDIAN(x) FROM x;
ATTACH '__TEST_DIR__/small.db' (BLOCK_SIZE 16384);
CREATE TABLE x.x AS SELECT x AS x FROM x;
ATTACH '__TEST_DIR__/large.db' (BLOCK_SIZE 262144);
CREATE TABLE x.x AS SELECT x AS x FROM x;
SELECT LIST_SUM(LIST(x.x) || LIST(x.x)) FROM x.x AS x JOIN x.x AS x ON x.x = x.x;
PRAGMA x = '${compression}';
CREATE TABLE x (x INT);
INSERT INTO x VALUES (NULL);
SELECT * FROM x;
SELECT * FROM x;
DROP TABLE x;
CREATE TABLE x (x INT);
INSERT INTO x SELECT NULL FROM x;
SELECT COUNT(*), COUNT(x), SUM(x) FROM x;
SELECT COUNT(*), COUNT(x), SUM(x) FROM x;
INSERT INTO x VALUES (1), (1), (1), (2), (2), (2);
SELECT COUNT(*), COUNT(x), SUM(x) FROM x;
SELECT COUNT(*), COUNT(x), SUM(x) FROM x;
CREATE TABLE x (x INT);
INSERT INTO x SELECT 2147480000 FROM x AS x;
INSERT INTO x SELECT 2147480001 FROM x AS x;
SELECT x FROM x WHERE x ILIKE 'INTEGER' LIMIT 1;
CREATE TABLE x (x INT);
INSERT INTO x SELECT 1 FROM x AS x;
SELECT x FROM x WHERE x ILIKE 'INTEGER' LIMIT 1;
CREATE TABLE x (x TEXT);
INSERT INTO x SELECT CONCAT('foobar-', CAST((x % 2) AS TEXT)) FROM x AS x;
SELECT x FROM x WHERE x ILIKE 'VARCHAR' LIMIT 1;
CREATE TABLE x (x INT);
INSERT INTO x SELECT x FROM x AS x;
SELECT x FROM x WHERE x ILIKE 'INTEGER' LIMIT 1;
PRAGMA x = '${compression}';
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (11, 22), (11, 22), (12, 21), (NULL, NULL);
SELECT SUM(x), SUM(x) FROM x;
SELECT SUM(x), SUM(x) FROM x;
PRAGMA x = '${compression}';
SELECT x, x FROM x;
SELECT x, x FROM x;
SELECT x, x FROM x;
SELECT x, x FROM x;
SELECT x, x FROM x;
SELECT x, x FROM x;
SET x = '${comp}';
CREATE OR REPLACE TABLE x AS SELECT 5700 AS x, [5700.0] AS x UNION ALL SELECT x, CASE WHEN x % 128 = 0 THEN [CAST(x AS DOUBLE)] ELSE CAST([] AS DOUBLE[]) END AS x FROM x AS x UNION ALL SELECT 5700, [x] FROM x AS x;
SELECT * FROM x WHERE x = 5700;
PRAGMA x = 'uncompressed';
CREATE TABLE x AS SELECT CAST(ROUND(RANDOM(), 6) AS DOUBLE) AS x FROM x AS x;
SELECT x FROM x WHERE x = 'double' AND x <> 'Uncompressed';
PRAGMA x = 'alp';
CREATE TABLE x AS SELECT * FROM x;
SELECT x FROM x WHERE x = 'double' AND x <> 'ALP';
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x = 'uncompressed';
CREATE TABLE x AS SELECT CAST(ROUND(RANDOM(), 3) AS REAL) AS x FROM x AS x;
SELECT x FROM x WHERE x = 'float' AND x <> 'Uncompressed';
PRAGMA x = 'alp';
CREATE TABLE x AS SELECT * FROM x;
SELECT x FROM x WHERE x = 'float' AND x <> 'ALP';
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x = 'uncompressed';
CREATE TABLE x AS SELECT CAST(ROUND(RANDOM(), 6) AS DOUBLE) AS x FROM x AS x;
SELECT x FROM x WHERE x = 'double' AND x <> 'Uncompressed';
PRAGMA x = 'alp';
CREATE TABLE x AS SELECT * FROM x;
SELECT x FROM x WHERE x = 'double' AND x <> 'ALP';
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
SELECT x FROM x WHERE x = '${type}' AND x <> 'ALP';
PRAGMA x = 'uncompressed';
CREATE TABLE x AS SELECT CAST(ROUND(COS(1 / (RANDOM() + 0.001)), 5) AS DOUBLE) * -1 AS x FROM x AS x;
SELECT x FROM x WHERE x = 'double' AND x <> 'Uncompressed';
PRAGMA x = 'alp';
CREATE TABLE x AS SELECT * FROM x;
SELECT x FROM x WHERE x = 'double' AND x <> 'ALP';
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x = '${compression}';
SELECT x, x FROM x;
SELECT x, x FROM x;
SELECT x, x FROM x;
SELECT x, x FROM x;
SELECT x, x FROM x;
SELECT x, x FROM x;
PRAGMA x = '${compression}';
SELECT x, x FROM x;
SELECT x, x FROM x;
DROP TABLE IF EXISTS x;
PRAGMA x = 1;
PRAGMA x = 'alp';
CREATE TABLE x (x DOUBLE);
INSERT INTO x SELECT x FROM x AS x, x;
CREATE TABLE x (x DOUBLE);
PRAGMA x = 'uncompressed';
INSERT INTO x SELECT x FROM x AS x, x;
SELECT x FROM x;
SELECT x FROM x;
PRAGMA x = 'uncompressed';
CREATE TABLE x AS SELECT CAST(ROUND(RANDOM(), 6) AS DOUBLE) AS x FROM x AS x;
SELECT x FROM x WHERE x = 'double' AND x <> 'Uncompressed';
PRAGMA x = 'alp';
CREATE TABLE x AS SELECT * FROM x;
SELECT x FROM x WHERE x = 'double' AND x <> 'ALP';
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x = 'uncompressed';
CREATE TABLE x AS SELECT CAST(ROUND(RANDOM(), 6) AS REAL) AS x FROM x AS x;
SELECT x FROM x WHERE x = 'float' AND x <> 'Uncompressed';
PRAGMA x = 'alp';
CREATE TABLE x AS SELECT * FROM x;
SELECT x FROM x WHERE x = 'float' AND x <> 'ALP';
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
PRAGMA x;
PRAGMA x = 'uncompressed';
CREATE TABLE x AS SELECT CAST(ROUND(RANDOM(), 6) AS DOUBLE) * 100 AS x, x FROM x AS x;
CREATE TABLE x AS SELECT CAST(ROUND(RANDOM(), 6) AS DOUBLE) * 100 AS x, x FROM x AS x;
PRAGMA x = '${compression}';
SELECT x FROM x WHERE x = 'double' AND x <> '${compression}';
SELECT x FROM x WHERE x = 'double' AND x <> '${compression}';
PRAGMA x = 'uncompressed';
PRAGMA x = 'uncompressed';
PRAGMA x = 'uncompressed';
PRAGMA x = '${compression}';
PRAGMA x = '${compression}';
PRAGMA x = '${compression}';
PRAGMA x = '${compression}';
PRAGMA x = '${compression}';
SELECT x FROM x WHERE x = '${type}' AND x <> '${compression}';
DROP TABLE x;
DROP TABLE x;
PRAGMA x = 'alp';
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
SELECT x FROM x WHERE x = '${type}' AND x <> 'ALP' AND x <> 'Constant';
SELECT x FROM x WHERE x = '${type}' AND x <> 'ALP' AND x <> 'Constant';
SELECT x FROM x WHERE x = '${type}' AND x <> 'ALP' AND x <> 'Constant';
SELECT x FROM x WHERE x = '${type}' AND x <> 'ALP' AND x <> 'Constant';
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
PRAGMA x = 1;
PRAGMA x = 'alp';
PRAGMA x = 'alp';
PRAGMA x = 'alp';
PRAGMA x = 'alp';
PRAGMA x = 'alp';
PRAGMA x = 'alp';
PRAGMA x = 'alp';
PRAGMA x = 'alp';
PRAGMA x = 'alp';
PRAGMA x = 'alp';
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
SELECT x, x, x, x, x FROM x, (SELECT x AS x, KAHAN_SUM(x * (1 - x)) AS x FROM x WHERE x >= CAST('1996-01-01' AS DATE) AND x < CAST('1996-04-01' AS DATE) GROUP BY x) AS x WHERE x = x AND x = (SELECT MAX(x) FROM (SELECT x AS x, KAHAN_SUM(x * (1 - x)) AS x FROM x WHERE x >= CAST('1996-01-01' AS DATE) AND x < CAST('1996-04-01' AS DATE) GROUP BY x) AS x) ORDER BY x;
SELECT x, x, x, x, x FROM x, (SELECT x AS x, KAHAN_SUM(x * (1 - x)) AS x FROM x WHERE x >= CAST('1996-01-01' AS DATE) AND x < CAST('1996-04-01' AS DATE) GROUP BY x) AS x WHERE x = x AND x = (SELECT MAX(x) FROM (SELECT x AS x, KAHAN_SUM(x * (1 - x)) AS x FROM x WHERE x >= CAST('1996-01-01' AS DATE) AND x < CAST('1996-04-01' AS DATE) GROUP BY x) AS x) ORDER BY x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
PRAGMA x = 'uncompressed';
CREATE TABLE x AS SELECT CAST(0 AS DOUBLE) AS x FROM x AS x;
SELECT x FROM x WHERE x = 'double' AND x <> 'Uncompressed';
PRAGMA x = 'alp';
CREATE TABLE x AS SELECT * FROM x;
SELECT x FROM x WHERE x = 'double' AND x <> 'ALP';
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x = '${compression}';
SELECT x, x FROM x;
SELECT x, x FROM x;
SELECT x, x FROM x;
SELECT x, x FROM x;
SELECT x, x FROM x;
SELECT x, x FROM x;
PRAGMA x = 'uncompressed';
CREATE TABLE x AS SELECT CAST(RANDOM() AS DOUBLE) AS x FROM x AS x;
SELECT x FROM x WHERE x = 'double' AND x <> 'Uncompressed';
PRAGMA x = 'alprd';
CREATE TABLE x AS SELECT * FROM x;
SELECT x FROM x WHERE x = 'double' AND x <> 'ALPRD';
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x = 'uncompressed';
CREATE TABLE x AS SELECT CAST(RANDOM() AS REAL) AS x FROM x AS x;
SELECT x FROM x WHERE x = 'float' AND x <> 'Uncompressed';
PRAGMA x = 'alprd';
CREATE TABLE x AS SELECT * FROM x;
SELECT x FROM x WHERE x = 'float' AND x <> 'ALPRD';
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x = 'uncompressed';
CREATE TABLE x AS SELECT CAST(RANDOM() AS DOUBLE) AS x FROM x AS x;
SELECT x FROM x WHERE x = 'double' AND x <> 'Uncompressed';
PRAGMA x = 'alprd';
CREATE TABLE x AS SELECT * FROM x;
SELECT x FROM x WHERE x = 'double' AND x <> 'ALPRD';
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
SELECT x FROM x WHERE x = '${type}' AND x <> 'ALPRD';
PRAGMA x = 'uncompressed';
CREATE TABLE x AS SELECT CAST(ROUND(COS(1 / (RANDOM() + 0.001)), 15) AS DOUBLE) * -1 AS x FROM x AS x;
SELECT x FROM x WHERE x = 'double' AND x <> 'Uncompressed';
PRAGMA x = 'alprd';
CREATE TABLE x AS SELECT * FROM x;
SELECT x FROM x WHERE x = 'double' AND x <> 'ALPRD';
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x = '${compression}';
SELECT x, x FROM x;
SELECT x, x FROM x;
SELECT x, x FROM x;
SELECT x, x FROM x;
SELECT x, x FROM x;
SELECT x, x FROM x;
PRAGMA x = '${compression}';
SELECT x, x FROM x;
SELECT x, x FROM x;
DROP TABLE IF EXISTS x;
PRAGMA x = 1;
PRAGMA x = 'alprd';
CREATE TABLE x (x DOUBLE);
INSERT INTO x SELECT x FROM x AS x, x;
CREATE TABLE x (x DOUBLE);
PRAGMA x = 'uncompressed';
INSERT INTO x SELECT x FROM x AS x, x;
SELECT x FROM x;
SELECT x FROM x;
PRAGMA x = 'uncompressed';
CREATE TABLE x AS SELECT CAST(RANDOM() AS DOUBLE) AS x FROM x AS x;
SELECT x FROM x WHERE x = 'double' AND x <> 'Uncompressed';
PRAGMA x = 'alprd';
CREATE TABLE x AS SELECT * FROM x;
SELECT x FROM x WHERE x = 'double' AND x <> 'ALPRD';
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x = 'uncompressed';
CREATE TABLE x AS SELECT CAST(RANDOM() AS REAL) AS x FROM x AS x;
SELECT x FROM x WHERE x = 'float' AND x <> 'Uncompressed';
PRAGMA x = 'alprd';
CREATE TABLE x AS SELECT * FROM x;
SELECT x FROM x WHERE x = 'float' AND x <> 'ALPRD';
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
PRAGMA x;
PRAGMA x = 'uncompressed';
CREATE TABLE x AS SELECT CAST(RANDOM() AS DOUBLE) * 100 AS x, x FROM x AS x;
CREATE TABLE x AS SELECT CAST(RANDOM() AS DOUBLE) * 100 AS x, x FROM x AS x;
PRAGMA x = '${compression}';
SELECT x FROM x WHERE x = 'double' AND x <> '${compression}';
SELECT x FROM x WHERE x = 'double' AND x <> '${compression}';
PRAGMA x = 'uncompressed';
PRAGMA x = 'uncompressed';
PRAGMA x = 'uncompressed';
PRAGMA x = '${compression}';
PRAGMA x = '${compression}';
PRAGMA x = '${compression}';
PRAGMA x = '${compression}';
PRAGMA x = '${compression}';
SELECT x FROM x WHERE x = '${type}' AND x <> '${compression}';
DROP TABLE x;
DROP TABLE x;
PRAGMA x = 'alprd';
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
SELECT x FROM x WHERE x = '${type}' AND x <> 'ALPRD' AND x <> 'Constant';
SELECT x FROM x WHERE x = '${type}' AND x <> 'ALPRD' AND x <> 'Constant';
SELECT x FROM x WHERE x = '${type}' AND x <> 'ALPRD' AND x <> 'Constant';
SELECT x FROM x WHERE x = '${type}' AND x <> 'ALPRD' AND x <> 'Constant';
SELECT x FROM x WHERE x = '${type}' AND x <> 'ALPRD' AND x <> 'Constant';
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
PRAGMA x = 1;
PRAGMA x = 'alprd';
PRAGMA x = 'alprd';
PRAGMA x = 'alprd';
PRAGMA x = 'alprd';
PRAGMA x = 'alprd';
PRAGMA x = 'alprd';
PRAGMA x = 'alprd';
PRAGMA x = 'alprd';
PRAGMA x = 'alprd';
PRAGMA x = 'alprd';
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
SELECT x, x, x, x, x FROM x, (SELECT x AS x, KAHAN_SUM(x * (1 - x)) AS x FROM x WHERE x >= CAST('1996-01-01' AS DATE) AND x < CAST('1996-04-01' AS DATE) GROUP BY x) AS x WHERE x = x AND x = (SELECT MAX(x) FROM (SELECT x AS x, KAHAN_SUM(x * (1 - x)) AS x FROM x WHERE x >= CAST('1996-01-01' AS DATE) AND x < CAST('1996-04-01' AS DATE) GROUP BY x) AS x) ORDER BY x;
SELECT x, x, x, x, x FROM x, (SELECT x AS x, KAHAN_SUM(x * (1 - x)) AS x FROM x WHERE x >= CAST('1996-01-01' AS DATE) AND x < CAST('1996-04-01' AS DATE) GROUP BY x) AS x WHERE x = x AND x = (SELECT MAX(x) FROM (SELECT x AS x, KAHAN_SUM(x * (1 - x)) AS x FROM x WHERE x >= CAST('1996-01-01' AS DATE) AND x < CAST('1996-04-01' AS DATE) GROUP BY x) AS x) ORDER BY x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
PRAGMA x = 'uncompressed';
CREATE TABLE x AS SELECT CAST(0 AS DOUBLE) AS x FROM x AS x;
SELECT x FROM x WHERE x = 'double' AND x <> 'Uncompressed';
PRAGMA x = 'alprd';
CREATE TABLE x AS SELECT * FROM x;
SELECT x FROM x WHERE x = 'double' AND x <> 'ALPRD';
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x = 'bitpacking';
PRAGMA x = 'constant';
CREATE TABLE x AS SELECT CAST((x // CAST(119000 AS BIGINT)) AS BIGINT) AS x FROM x AS x;
PRAGMA x = 'uncompressed';
CREATE TABLE x AS SELECT CAST(x AS BIGINT) FROM x AS x;
SELECT x FROM x WHERE x <> 'VALIDITY' AND x <> 'BitPacking';
SELECT x FROM x WHERE x <> 'VALIDITY' AND x <> 'Uncompressed';
SELECT (CAST(x AS REAL) / CAST(x AS REAL)) > 700, (CAST(x AS REAL) / CAST(x AS REAL)) < 1000 FROM (SELECT (SELECT COUNT(DISTINCT x) FROM x WHERE NOT x IN ('VARCHAR', 'VALIDITY')) AS x, (SELECT COUNT(DISTINCT x) FROM x WHERE NOT x IN ('VARCHAR', 'VALIDITY')) AS x);
DROP TABLE x;
PRAGMA x = 'bitpacking';
PRAGMA x = 'constant_delta';
CREATE TABLE x AS SELECT CAST(x AS BIGINT) AS x FROM x AS x;
PRAGMA x = 'uncompressed';
CREATE TABLE x AS SELECT CAST(x AS BIGINT) AS x FROM x AS x;
SELECT x FROM x WHERE x <> 'VALIDITY' AND x <> 'BitPacking';
SELECT x FROM x WHERE x <> 'VALIDITY' AND x <> 'Uncompressed';
SELECT (CAST(x AS REAL) / CAST(x AS REAL)) > 600, (CAST(x AS REAL) / CAST(x AS REAL)) < 800 FROM (SELECT (SELECT COUNT(DISTINCT x) FROM x WHERE NOT x IN ('VARCHAR', 'VALIDITY')) AS x, (SELECT COUNT(DISTINCT x) FROM x WHERE NOT x IN ('VARCHAR', 'VALIDITY')) AS x);
DROP TABLE x;
PRAGMA x = 'bitpacking';
PRAGMA x = 'delta_for';
CREATE TABLE x AS SELECT x // CAST(2 AS BIGINT) AS x FROM x AS x;
PRAGMA x = 'uncompressed';
CREATE TABLE x AS SELECT x AS x FROM x AS x;
SELECT x FROM x WHERE x <> 'VALIDITY' AND x <> 'BitPacking';
SELECT x FROM x WHERE x <> 'VALIDITY' AND x <> 'Uncompressed';
SELECT (CAST(x AS REAL) / CAST(x AS REAL)) > 50, (CAST(x AS REAL) / CAST(x AS REAL)) < 60 FROM (SELECT (SELECT COUNT(DISTINCT x) FROM x WHERE NOT x IN ('VARCHAR', 'VALIDITY')) AS x, (SELECT COUNT(DISTINCT x) FROM x WHERE NOT x IN ('VARCHAR', 'VALIDITY')) AS x);
DROP TABLE x;
PRAGMA x = 'bitpacking';
PRAGMA x = 'for';
CREATE TABLE x AS SELECT x % CAST(2 AS BIGINT) AS x FROM x AS x;
PRAGMA x = 'uncompressed';
CREATE TABLE x AS SELECT CAST(x AS BIGINT) AS x FROM x AS x;
SELECT x FROM x WHERE x <> 'VALIDITY' AND x <> 'BitPacking';
SELECT x FROM x WHERE x <> 'VALIDITY' AND x <> 'Uncompressed';
SELECT (CAST(x AS REAL) / CAST(x AS REAL)) > 50, (CAST(x AS REAL) / CAST(x AS REAL)) < 60 FROM (SELECT (SELECT COUNT(DISTINCT x) FROM x WHERE NOT x IN ('VARCHAR', 'VALIDITY')) AS x, (SELECT COUNT(DISTINCT x) FROM x WHERE NOT x IN ('VARCHAR', 'VALIDITY')) AS x);
DROP TABLE x;
DROP TABLE x;
PRAGMA x = 'uncompressed';
PRAGMA x = 'uncompressed';
PRAGMA x = 'bitpacking';
PRAGMA x = 'bitpacking';
DROP TABLE x;
PRAGMA x = 'bitpacking';
PRAGMA x = 'constant';
CREATE TABLE x AS SELECT CAST((x // CAST(119000 AS BIGINT)) AS INT128) AS x FROM x AS x;
PRAGMA x = 'uncompressed';
CREATE TABLE x AS SELECT CAST(x AS INT128) FROM x AS x;
SELECT x FROM x WHERE x <> 'VALIDITY' AND x <> 'BitPacking';
SELECT x FROM x WHERE x <> 'VALIDITY' AND x <> 'Uncompressed';
SELECT (CAST(x AS REAL) / CAST(x AS REAL)) > 900, (CAST(x AS REAL) / CAST(x AS REAL)) < 1200 FROM (SELECT (SELECT COUNT(DISTINCT x) FROM x WHERE NOT x IN ('VARCHAR', 'VALIDITY')) AS x, (SELECT COUNT(DISTINCT x) FROM x WHERE NOT x IN ('VARCHAR', 'VALIDITY')) AS x);
DROP TABLE x;
PRAGMA x = 'bitpacking';
PRAGMA x = 'constant_delta';
CREATE TABLE x AS SELECT CAST(x AS INT128) AS x FROM x AS x;
PRAGMA x = 'uncompressed';
CREATE TABLE x AS SELECT CAST(x AS INT128) AS x FROM x AS x;
SELECT x FROM x WHERE x <> 'VALIDITY' AND x <> 'BitPacking';
SELECT x FROM x WHERE x <> 'VALIDITY' AND x <> 'Uncompressed';
SELECT (CAST(x AS REAL) / CAST(x AS REAL)) > 600, (CAST(x AS REAL) / CAST(x AS REAL)) < 800 FROM (SELECT (SELECT COUNT(DISTINCT x) FROM x WHERE NOT x IN ('VARCHAR', 'VALIDITY')) AS x, (SELECT COUNT(DISTINCT x) FROM x WHERE NOT x IN ('VARCHAR', 'VALIDITY')) AS x);
DROP TABLE x;
PRAGMA x = 'bitpacking';
PRAGMA x = 'delta_for';
CREATE TABLE x AS SELECT x // CAST(2 AS INT128) AS x FROM x AS x;
PRAGMA x = 'uncompressed';
CREATE TABLE x AS SELECT x AS x FROM x AS x;
SELECT x FROM x WHERE x <> 'VALIDITY' AND x <> 'BitPacking';
SELECT x FROM x WHERE x <> 'VALIDITY' AND x <> 'Uncompressed';
SELECT (CAST(x AS REAL) / CAST(x AS REAL)) > 40, (CAST(x AS REAL) / CAST(x AS REAL)) < 60 FROM (SELECT (SELECT COUNT(DISTINCT x) FROM x WHERE NOT x IN ('VARCHAR', 'VALIDITY')) AS x, (SELECT COUNT(DISTINCT x) FROM x WHERE NOT x IN ('VARCHAR', 'VALIDITY')) AS x);
DROP TABLE x;
PRAGMA x = 'bitpacking';
PRAGMA x = 'for';
CREATE TABLE x AS SELECT x % CAST(2 AS INT128) AS x FROM x AS x;
PRAGMA x = 'uncompressed';
CREATE TABLE x AS SELECT CAST(x AS INT128) AS x FROM x AS x;
SELECT x FROM x WHERE x <> 'VALIDITY' AND x <> 'BitPacking';
SELECT x FROM x WHERE x <> 'VALIDITY' AND x <> 'Uncompressed';
SELECT (CAST(x AS REAL) / CAST(x AS REAL)) > 90, (CAST(x AS REAL) / CAST(x AS REAL)) < 100 FROM (SELECT (SELECT COUNT(DISTINCT x) FROM x WHERE NOT x IN ('VARCHAR', 'VALIDITY')) AS x, (SELECT COUNT(DISTINCT x) FROM x WHERE NOT x IN ('VARCHAR', 'VALIDITY')) AS x);
PRAGMA x = '${bitpacking_mode}';
PRAGMA x = 'bitpacking';
CREATE TABLE x (x INT128, x BIGINT, x INT, x SMALLINT, x TINYINT);
INSERT INTO x VALUES (-170141183460469231731687303715884105728, -9223372036854775808, -2147483648, -32768, -128), (170141183460469231731687303715884105727, 9223372036854775807, 2147483647, 32767, 127);
SELECT x FROM x WHERE (x ILIKE 'HUGEINT' OR x ILIKE 'BIGINT' OR x ILIKE 'INTEGER' OR x ILIKE 'SMALLINT' OR x ILIKE 'TINYINT');
PRAGMA x = 'bitpacking';
PRAGMA x = 'constant';
CREATE TABLE x (x TEXT, x INT128);
INSERT INTO x SELECT CAST(x AS TEXT), CAST(x AS INT128) FROM x AS x;
SELECT x FROM x LIMIT 5;
SELECT x FROM x WHERE x ILIKE 'HUGEINT';
DROP TABLE x;
CREATE TABLE x (x TEXT, x INT128);
INSERT INTO x SELECT CAST(x AS TEXT), CAST(x AS INT128) + 3000000000 FROM x AS x;
SELECT x FROM x LIMIT 5;
SELECT x FROM x WHERE x ILIKE 'HUGEINT';
DROP TABLE x;
CREATE TABLE x (x TEXT, x INT128);
INSERT INTO x SELECT CAST(x AS TEXT), CAST(x AS INT128) + 200000000000 FROM x AS x;
SELECT x FROM x LIMIT 5;
SELECT x FROM x WHERE x ILIKE 'HUGEINT';
DROP TABLE x;
CREATE TABLE x (x TEXT, x INT128);
INSERT INTO x SELECT CAST(x AS TEXT), CAST(x AS INT128) + 10000000000000000000 FROM x AS x;
SELECT x FROM x LIMIT 5;
SELECT x FROM x WHERE x ILIKE 'HUGEINT';
DROP TABLE x;
CREATE TABLE x (x TEXT, x INT128);
INSERT INTO x SELECT CAST(x AS TEXT), CAST(x AS INT128) + 500000000000000000000 FROM x AS x;
SELECT x FROM x LIMIT 5;
SELECT x FROM x WHERE x ILIKE 'HUGEINT';
DROP TABLE x;
CREATE TABLE x (x TEXT, x INT128);
INSERT INTO x SELECT CAST(x AS TEXT), CAST(x AS INT128) + 50000000000000000000000000000 FROM x AS x;
SELECT x FROM x LIMIT 5;
SELECT x FROM x WHERE x ILIKE 'HUGEINT';
DROP TABLE x;
CREATE TABLE x (x TEXT, x INT128);
INSERT INTO x SELECT CAST(x AS TEXT), CAST(x AS INT128) + 300000000000000000000000000000000 FROM x AS x;
SELECT x FROM x LIMIT 5;
SELECT x FROM x WHERE x ILIKE 'HUGEINT';
DROP TABLE x;
CREATE TABLE x (x TEXT, x INT128);
INSERT INTO x SELECT CAST(x AS TEXT), CAST(x AS INT128) + 20000000000000000000000000000000000000 FROM x AS x;
SELECT x FROM x LIMIT 5;
SELECT x FROM x WHERE x ILIKE 'HUGEINT';
PRAGMA x = 'bitpacking';
SELECT CURRENT_SETTING('force_bitpacking_mode');
PRAGMA x = 'xxx';
PRAGMA x = '${mode}';
SELECT CURRENT_SETTING('force_bitpacking_mode') = '${mode}';
PRAGMA x;
PRAGMA x;
PRAGMA x = '${bitpacking_mode}';
CREATE TABLE x (x TEXT, x BIGINT);
INSERT INTO x SELECT CAST(x AS TEXT), -x FROM x AS x;
INSERT INTO x SELECT CAST(x AS TEXT), 13371337 FROM x AS x;
SELECT x FROM x LIMIT 5;
SELECT x FROM x LIMIT 5 OFFSET 12000;
SELECT AVG(x) FROM x;
SELECT x FROM x WHERE x ILIKE 'BIGINT';
PRAGMA x;
PRAGMA x;
PRAGMA x = '${bitpacking_mode}';
CREATE TABLE x (x TEXT, x INT128);
INSERT INTO x SELECT CAST(x AS TEXT), -CAST(x AS INT128) + -CAST(1234567891011121314151617180000 AS INT128) FROM x AS x;
INSERT INTO x SELECT CAST(x AS TEXT), 13371337 FROM x AS x;
SELECT x FROM x LIMIT 5;
SELECT x FROM x LIMIT 5 OFFSET 12000;
SELECT x FROM x WHERE x ILIKE 'HUGEINT';
PRAGMA x = 'bitpacking';
CREATE OR REPLACE TABLE x AS SELECT * FROM x;
PRAGMA x = 'bitpacking';
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (11, 22), (11, 22), (12, 21), (NULL, NULL);
SELECT x FROM x WHERE x ILIKE 'INTEGER' LIMIT 1;
CREATE TABLE x (x INT);
INSERT INTO x SELECT 1 FROM x AS x;
INSERT INTO x SELECT 2 FROM x AS x;
SELECT x FROM x WHERE NOT x IN ('VALIDITY');
PRAGMA x = 'delta_for';
CREATE OR REPLACE TABLE x (x INT);
INSERT INTO x SELECT 3 * (x // 1000) + (x % 10) FROM x AS x;
SELECT x FROM x WHERE NOT x IN ('VALIDITY');
PRAGMA x = '${bitpacking_mode}';
PRAGMA x = 'bitpacking';
CREATE TABLE x (x INT);
INSERT INTO x SELECT x FROM x AS x;
CREATE TABLE x AS SELECT x FROM x;
SELECT SUM(x) FROM x;
SELECT SUM(x) FROM x;
DROP TABLE x;
PRAGMA x = 'bitpacking';
PRAGMA x = 'constant';
CREATE TABLE x (x TEXT, x UINT128);
INSERT INTO x SELECT CAST(x AS TEXT), CAST(x AS UINT128) FROM x AS x;
SELECT x FROM x LIMIT 5;
SELECT x FROM x WHERE x ILIKE 'UHUGEINT';
DROP TABLE x;
CREATE TABLE x (x TEXT, x UINT128);
INSERT INTO x SELECT CAST(x AS TEXT), CAST(x AS UINT128) + CAST(3000000000 AS UINT128) FROM x AS x;
SELECT x FROM x LIMIT 5;
SELECT x FROM x WHERE x ILIKE 'UHUGEINT';
DROP TABLE x;
CREATE TABLE x (x TEXT, x UINT128);
INSERT INTO x SELECT CAST(x AS TEXT), CAST(x AS UINT128) + CAST(200000000000 AS UINT128) FROM x AS x;
SELECT x FROM x LIMIT 5;
SELECT x FROM x WHERE x ILIKE 'UHUGEINT';
DROP TABLE x;
CREATE TABLE x (x TEXT, x UINT128);
INSERT INTO x SELECT CAST(x AS TEXT), CAST(x AS UINT128) + CAST(10000000000000000000 AS UINT128) FROM x AS x;
SELECT x FROM x LIMIT 5;
SELECT x FROM x WHERE x ILIKE 'UHUGEINT';
DROP TABLE x;
CREATE TABLE x (x TEXT, x UINT128);
INSERT INTO x SELECT CAST(x AS TEXT), CAST(x AS UINT128) + CAST(500000000000000000000 AS UINT128) FROM x AS x;
SELECT x FROM x LIMIT 5;
SELECT x FROM x WHERE x ILIKE 'UHUGEINT';
DROP TABLE x;
CREATE TABLE x (x TEXT, x UINT128);
INSERT INTO x SELECT CAST(x AS TEXT), CAST(x AS UINT128) + CAST(50000000000000000000000000000 AS UINT128) FROM x AS x;
SELECT x FROM x LIMIT 5;
SELECT x FROM x WHERE x ILIKE 'UHUGEINT';
DROP TABLE x;
CREATE TABLE x (x TEXT, x UINT128);
INSERT INTO x SELECT CAST(x AS TEXT), CAST(x AS UINT128) + CAST(300000000000000000000000000000000 AS UINT128) FROM x AS x;
SELECT x FROM x LIMIT 5;
SELECT x FROM x WHERE x ILIKE 'UHUGEINT';
DROP TABLE x;
CREATE TABLE x (x TEXT, x UINT128);
INSERT INTO x SELECT CAST(x AS TEXT), CAST(x AS UINT128) + CAST(20000000000000000000000000000000000000 AS UINT128) FROM x AS x;
SELECT x FROM x LIMIT 5;
SELECT x FROM x WHERE x ILIKE 'UHUGEINT';
PRAGMA x = 'bitpacking';
CREATE TABLE x (x INT);
INSERT INTO x SELECT 1 FROM x AS x;
INSERT INTO x SELECT 2 FROM x AS x;
SELECT x FROM x WHERE x ILIKE 'INTEGER' LIMIT 1;
SELECT COUNT(x) FROM x;
SELECT COUNT(x) FROM x;
SELECT x FROM x;
SELECT x FROM x;
SELECT x FROM x WHERE x = 'double' AND x <> 'Chimp';
SELECT x FROM x WHERE x = 'float' AND x <> 'Chimp';
PRAGMA x = 'chimp';
CREATE TABLE x AS SELECT 1 AS x FROM x;
SELECT MIN(x), MAX(x), AVG(x), COUNT(*), COUNT(x) FROM x;
SELECT MIN(x), MAX(x), AVG(x), COUNT(*), COUNT(x) FROM x WHERE x = 1;
SELECT MIN(x), MAX(x), AVG(x), COUNT(*), COUNT(x) FROM x;
CREATE TABLE x AS SELECT NULL AS x FROM x;
SELECT MIN(x), MAX(x), AVG(x), COUNT(*), COUNT(x) FROM x;
SELECT MIN(x), MAX(x), AVG(x), COUNT(*), COUNT(x) FROM x WHERE x IS NULL;
SELECT MIN(x), MAX(x), AVG(x), COUNT(*), COUNT(x) FROM x;
CREATE TABLE x AS SELECT CASE WHEN x < 1000000 THEN 1 ELSE x END AS x FROM x AS x;
SELECT MIN(x), MAX(x), COUNT(*), COUNT(x) FROM x;
SELECT MIN(x), MAX(x), COUNT(*), COUNT(x) FROM x WHERE x = 1;
SELECT MIN(x), MAX(x), COUNT(*), COUNT(x) FROM x;
SELECT MIN(x), MAX(x), COUNT(*), COUNT(x) FROM x WHERE x = 1;
CREATE TABLE x AS SELECT CASE WHEN x < 1000000 THEN 1 ELSE NULL END AS x FROM x AS x;
SELECT MIN(x), MAX(x), COUNT(*), COUNT(x) FROM x;
SELECT MIN(x), MAX(x), COUNT(*), COUNT(x) FROM x WHERE x = 1;
SELECT MIN(x), MAX(x), COUNT(*), COUNT(x) FROM x WHERE x IS NULL;
SELECT MIN(x), MAX(x), COUNT(*), COUNT(x) FROM x;
SELECT MIN(x), MAX(x), COUNT(*), COUNT(x) FROM x WHERE x = 1;
SELECT MIN(x), MAX(x), COUNT(*), COUNT(x) FROM x WHERE x IS NULL;
CREATE TABLE x AS SELECT x AS x, CASE WHEN x < 500000 THEN 1 ELSE NULL END AS x FROM x AS x;
CREATE INDEX x ON x(x);
SELECT MIN(x), MAX(x), AVG(x), COUNT(*), COUNT(x) FROM x;
SELECT * FROM x WHERE x = 1;
SELECT * FROM x WHERE x = 2;
SELECT * FROM x WHERE x = 999999;
SELECT * FROM x WHERE x = 1;
SELECT * FROM x WHERE x = 2;
SELECT * FROM x WHERE x = 999999;
CREATE TABLE x AS SELECT 1 AS x FROM x;
INSERT INTO x SELECT 2 FROM x;
SELECT * FROM x ORDER BY x LIMIT 5;
SELECT * FROM x ORDER BY x DESC LIMIT 5;
CREATE TABLE x AS SELECT x AS x, 1 AS x FROM x AS x;
SELECT MIN(x), MAX(x), AVG(x), COUNT(*), COUNT(x) FROM x;
UPDATE x SET x = x + 1 WHERE x % 2 = 0;
SELECT MIN(x), MAX(x), AVG(x), COUNT(*), COUNT(x) FROM x;
SELECT MIN(x), MAX(x), AVG(x), COUNT(*), COUNT(x) FROM x;
PRAGMA x = 'dictionary';
CREATE TABLE x AS SELECT CONCAT('BEEPBOOP-', CAST((x % 3) AS TEXT)) AS x FROM x AS x;
PRAGMA x = 'uncompressed';
CREATE TABLE x AS SELECT CONCAT('BEEPBOOP-', CAST((x % 3) AS TEXT)) AS x FROM x AS x;
SELECT CAST(x AS REAL) / CAST(x AS REAL) > 30 AND CAST(x AS REAL) / CAST(x AS REAL) < 55 FROM (SELECT COUNT(DISTINCT x) AS x FROM x WHERE x IN ('VARCHAR')) AS x, (SELECT COUNT(DISTINCT x) AS x FROM x WHERE x IN ('VARCHAR')) AS x;
PRAGMA x = 'dictionary';
CREATE TABLE x (x TEXT, x TEXT);
INSERT INTO x VALUES ('11', '22'), ('11', '22'), ('12', '21'), (NULL, NULL);
SELECT x FROM x WHERE x ILIKE 'VARCHAR' LIMIT 1;
PRAGMA x = 'dictionary';
CREATE TABLE x (x INT, x TEXT);
CREATE TABLE x (x INT, x TEXT);
SELECT x FROM x WHERE x ILIKE 'VARCHAR' LIMIT 1;
PRAGMA x;
SELECT DISTINCT x FROM x ORDER BY x % 5;
PRAGMA x = 'dictionary';
CREATE TABLE x (x TEXT);
INSERT INTO x SELECT CAST(x AS TEXT) FROM x AS x;
SELECT x FROM x WHERE x ILIKE 'VARCHAR' LIMIT 1;
PRAGMA x = 'fsst';
CREATE TABLE x AS SELECT CONCAT('BEEPBOOP-', CAST((x % 3) AS TEXT)) AS x FROM x AS x;
PRAGMA x = 'uncompressed';
CREATE TABLE x AS SELECT CONCAT('BEEPBOOP-', CAST((x % 3) AS TEXT)) AS x FROM x AS x;
SELECT (CAST(x AS REAL) / CAST(x AS REAL)) AS x FROM (SELECT (SELECT COUNT(DISTINCT x) FROM x WHERE x IN ('VARCHAR')) AS x, (SELECT COUNT(DISTINCT x) FROM x WHERE x IN ('VARCHAR')) AS x);
SELECT (CAST(x AS REAL) / CAST(x AS REAL)) > 5, (CAST(x AS REAL) / CAST(x AS REAL)) < 6.5 FROM (SELECT (SELECT COUNT(DISTINCT x) FROM x WHERE x IN ('VARCHAR')) AS x, (SELECT COUNT(DISTINCT x) FROM x WHERE x IN ('VARCHAR')) AS x);
PRAGMA x = 'uncompressed';
CREATE TABLE x AS SELECT x FROM x;
PRAGMA x = 'fsst';
CREATE TABLE x AS SELECT x FROM x;
CREATE TABLE x AS SELECT CONCAT('longprefix', x) FROM x AS x;
SELECT BOOL_OR(x ILIKE '%fsst%') FROM x;
DROP TABLE x;
SET x = 'fsst';
CREATE TABLE x AS SELECT CONCAT('longprefix', x) FROM x AS x;
SELECT BOOL_OR(x ILIKE '%fsst%') FROM x;
PRAGMA x = 'fsst';
CREATE TABLE x (x TEXT, x TEXT);
INSERT INTO x VALUES ('11', '22'), ('11', '22'), ('12', '21'), (NULL, NULL);
SELECT x FROM x WHERE x ILIKE 'VARCHAR' LIMIT 1;
PRAGMA x = 1;
CREATE TABLE x (x TEXT);
INSERT INTO x SELECT '33y93uhg3qi3f13hnh8xjrvvbz7iwevroaaif8v5ecfetwnd5yqde9mna8753399lj5r2u5rps5tuu0xsetmsxi80dacku7uz0q3r7h3r9gboq4c41t4h8brm6t7hcb2zg41g7elknivchc3ff409nhczhc7ciledplgcql5sfjb1x2ctuvf6cjdckfkq56ranj67qkzdnvj8guw8rxyd55298ziig0adhqsi0jdx60exhq6vv8hfqarfpvfma8qoqtv5kzte4mofm41w5uy0zdk4tjd5i7673pyigseb4mb3g6u5rwac1s8s1xcoobjoexp340hbr7vk1fwqdfisdm94967tvqxmirn6ml4ccaw3r7bh04e2p5txvea0vi965t29vbv1858ystdqpc8s9aalij445brgn55gpwtgmpbg8tkg7plw05aw8auijbkl9v4go9azrbqcb3yipi1hphmazfrzuta6qdys89usu672vs18qbricebs2rjhsqud8iemug1fr31hoaxu0lg7yfg2i8i9ufmrkgg8dtv5dw5edxptw48meec88iunibox2bc72eq5d59fmg2db7r8xtj1wptoak72on1v5jis1s024hvebx3nudmx78s32dszihs8mvkpt37fxsza9nccbo0jmyu7wzspkl1tqtbkx17lc043weyu2qavtp7vzvuyk9j7l7gha5kr6x295l9sk610ya8820atujz6dpcnkp4fuyatyefo4acc1g05ipcf2bwjgtz48ewzivm8p6kh7e1dp715x5as9bvs5i9n9pxvhp6jo7clnj987iojgztfk2fk9980gr8i69frtci4cj6rxlf9ig228tyljlqd53nwxnz7mvqjymohyqjsuunjdnioo199cl8m6fvv3hu8vh0v8otcohrskwan81p1ncqkf2svf97gyz2cu7bfrvbv03o6bflqdm60ojl0z1yta41m416mkdljpuxzk7gs9tj121jnvfe9piw1ow3ibu66eyrs2cmxopyhio4h7toekptm4xysmx96pdbjxx0kugwj4mfgjwj40ijkpwz0kjs39eumuexyooldizgzidhzk7hecfqamlnolbescpiuqrfyewm4evn2tx3cnoun9y3mciact4ont84q9z99r4wt76wusjtoz11xv5rgkz1t2dy3wtzog1ifhmprfymrzt0lzlsugjru5m6ubq87dmyzu9fwo8sivuea2zedogsm93sgwgrbomalj213ejyic4w9wgobnqjogd9j0h24u8dddr238elpqwk4sr2dznvw2fthow2l5ckua9z022nj3hktzae4jnyu7ckohdowy91lmh6ns10sialoa146x5sfje0fc4i1dt1dwbcygtmadjwjhytsvsq879y9tfud08fg2c1a01yzb5yy1z5cj99aherty940w91qjl0zl27p58enhtdvr0wzqpkgkxno93vj9qm7fiszrzcbmlowwfeusty9dkm9i4vskzovrgjpp91op2654acbblntyxra484e8ejbmehtecdh25patwrs016w7gqtvtzgufg9znmuxwcczrwgqpfkgwj27pfu56z5sd9241vjz8364zxfwfogjvhdxcxfgh6u4lbqmu1870ei2snna70atxputk4ybpj1r1e0ut4zcz8786eofale8on8uysws7mfs8o3uen21zjtqnc260s6e9tc1lpw2qk2vjsg10escmlj8hliba24sauabdc7ttj2pmv2xjh0photfpywqfbw7f9av3jxyplfap42nc9ttz1xqbrb3seieu2cnnwjc8vqxuacprwcdznwzrc99e28zf5q6y9c2exm9rbofy09w854xkplwlx2v2qjfm36r4jhwi953i993xhgu3um0qeisyfw8aicc52itcc53e98wer9iluwqrttx25vjr2ukk7m0olyzksbj9gaiu4tii3vcmk994ouvzse4khfd4ud9uxea4n8ahdshzpflx0feh0s1r9nv6e6fxipxiclaqs4hul93pbka016cq2l9cogc3tueqhwuximt11gws89uhjf81dhkowdrr0lh19yso5r2hclhblr3c0ykac7ieecfth4xbyz31hr3ug4gd8lbgkvh0hm5tgtyy84qnptuif7l6do0ksktathok43eyflzcq7z8wulniynjhqmnlrdjisosqt3mr02iuahfg7ldzvop71ezhxzgix6xzn93e2pjfo9ejjp5aqgocif4vob6t1be3hg0hn5597h5f66v2m6swkjed482ggfnw894rhxaurk67dsj2albqndwkz25rjxrahlj2eeinxqq93a30o86i865jter4g7wm0brhz5csy5kgb51sawjkc9kfcsqz92c4d7cf7f28kgtruroohlxli6bve96r2ff3eoqqupwifodag20lfp25t0fx61254kwm3s6runk0hcfn9opo2fsduoibmqdrzfnmmf431af441tkur3rhx1o08ovl9uf4xxachfj7acy58g7fnfkk4od5pfjvr20l85dfes3tq9vyom2vbx0m2r5sokx6c7chetqpphdk9etnpqxwwspcnqrq8hcrjka52lgc1y41fvnhxcdisx7w9b9l19p2rmdj4tqx4ezjghgi06b9vil6hkvllt3m2ym9e21mlqy1v0e5yoypwj32k5ri8et1bn2uqmjaw8gpcegsvv9wz45i2ggnntszj0nx05dl1u46mcb66y43xd2tyow6v6wokbeputut9ybaxz7o3hcq41s2p97mxpv34guz7xxbdhezhvja06m298nqx0qsh4tn14vcwt7kdv9rvpcwljzese17dwmnhmi38iqxf8hp5dannyffr8ijrwmxn3ezmfg6f4l8a4mwyhfcjvziu4uy9a62d8wrfskakvwh9h89rfjpa4k8edrq6jjkf9a7xu0vibp3g3escq0jjt209xxyztpy1u1yf9r2hgmw7mwa4j4565w74ib5ocn8q5wrawc9m17o1i8e3mvoc6bkj96nwm5iti5krq5xjwy8rd7j0tjkjzvupus5d64d1zt4fezbuvhieygyl0jlv8s8m24u3jj822tf1wwukafoksuigt1ttsni935ly51cqokl5k09t4y3hjszbj1cisjg18cqsqwqcrlai7exaefpknsa6euj7k0kaqbf4lya7f29zmytpzc32t3vqs2b0967a80ybxykz6fvyjdraj43831rnq19xh4m000gyi0bu5jgp8x53eibhya5xtqdglmdjrhen0md1fha4k0y95ze3v5cxssdeyqwj9y8a8eco858nf9uj6f83z3uk9yk7zi90lmcy8bm6es36hxwj8g1yygj5evne8ire0q6pa2e0jh9wmubpsv53tcof1pvhvvd7b03i2srdeykcq7sn88bv2huz39pmd4m012nx6jib7c53ape70i6gwefvatqetrvj94oq6bm50eqo4c72csqdwn55xpoq27pqot90zfzpnb690eund78eoss6ltg7zhkc4hk0qjvrl8me8cgzy0py4btyhhsks9i0veou0ia84nxbkwo758dn3m0kgp60jxcrgdjuyojbh5u67qlu69lthdzmzshij0mhlaa05rdrn9vdv1440v2rozpwdtvxzfvykb0tjx700eqdr164zy7d3ji8g82souaiui7n96my35ocgt0xmdrss' FROM x AS x;
INSERT INTO x SELECT '5yqde9mna8753399lj5r2u5rps5tuu0xsetmsxi80dacku7uz0q3r7h3r9gboq4c41t4h8brm6t7hcb2zg41g7elknivchc3ff409nhczhc7ciledplgcql5sfjb1x2ctuvf6cjdckfkq56ranj67qkzdnvj8guw8rxyd55298ziig0adhqsi0jdx60exhq6vv8hfqarfpvfma8qoqtv5kzte4mofm41w5uy0zdk4tjd5i7673pyigseb4mb3g6u5rwac1s8s1xcoobjoexp340hbr7vk1fwqdfisdm94967tvqxmirn6ml4ccaw3r7bh04e2p5txvea0vi965t29vbv1858ystdqpc8s9aalij445brgn55gpwtgmpbg8tkg7plw05aw8auijbkl9v4go9azrbqcb3yipi1hphmazfrzuta6qdys89usu672vs18qbricebs2rjhsqud8iemug1fr31hoaxu0lg7yfg2i8i9ufmrkgg8dtv5dw5edxptw48meec88iunibox2bc72eq5d59fmg2db7r8xtj1wptoak72on1v5jis1s024hvebx3nudmx78s32dszihs8mvkpt37fxsza9nccbo0jmyu7wzspkl1tqtbkx17lc043weyu2qavtp7vzvuyk9j7l7gha5kr6x295l9sk610ya8820atujz6dpcnkp4fuyatyefo4acc1g05ipcf2bwjgtz48ewzivm8p6kh7e1dp715x5as9bvs5i9n9pxvhp6jo7clnj987iojgztfk2fk9980gr8i69frtci4cj6rxlf9ig228tyljlqd53nwxnz7mvqjymohyqjsuunjdnioo199cl8m6fvv3hu8vh0v8otcohrskwan81p1ncqkf2svf97gyz2cu7bfrvbv03o6bflqdm60ojl0z1yta41m416mkdljpuxzk7gs9tj121jnvfe9piw1ow3ibu66eyrs2cmxopyhio4h7toekptm4xysmx96pdbjxx0kugwj4mfgjwj40ijkpwz0kjs39eumuexyooldizgzidhzk7hecfqamlnolbescpiuqrfyewm4evn2tx3cnoun9y3mciact4ont84q9z99r4wt76wusjtoz11xv5rgkz1t2dy3wtzog1ifhmprfymrzt0lzlsugjru5m6ubq87dmyzu9fwo8sivuea2zedogsm93sgwgrbomalj213ejyic4w9wgobnqjogd9j0h24u8dddr238elpqwk4sr2dznvw2fthow2l5ckua9z022nj3hktzae4jnyu7ckohdowy91lmh6ns10sialoa146x5sfje0fc4i1dt1dwbcygtmadjwjhytsvsq879y9tfud08fg2c1a01yzb5yy1z5cj99aherty940w91qjl0zl27p58enhtdvr0wzqpkgkxno93vj9qm7fiszrzcbmlowwfeusty9dkm9i4vskzovrgjpp91op2654acbblntyxra484e8ejbmehtecdh25patwrs016w7gqtvtzgufg9znmuxwcczrwgqpfkgwj27pfu56z5sd9241vjz8364zxfwfogjvhdxcxfgh6u4lbqmu1870ei2snna70atxputk4ybpj1r1e0ut4zcz8786eofale8on8uysws7mfs8o3uen21zjtqnc260s6e9tc1lpw2qk2vjsg10escmlj8hliba24sauabdc7ttj2pmv2xjh0photfpywqfbw7f9av3jxyplfap42nc9ttz1xqbrb3seieu2cnnwjc8vqxuacprwcdznwzrc99e28zf5q6y9c2exm9rbofy09w854xkplwlx2v2qjfm36r4jhwi953i993xhgu3um0qeisyfw8aicc52itcc53e98wer9iluwqrttx25vjr2ukk7m0olyzksbj9gaiu4tii3vcmk994ouvzse4khfd4ud9uxea4n8ahdshzpflx0feh0s1r9nv6e6fxipxiclaqs4hul93pbka016cq2l9cogc3tueqhwuximt11gws89uhjf81dhkowdrr0lh19yso5r2hclhblr3c0ykac7ieecfth4xbyz31hr3ug4gd8lbgkvh0hm5tgtyy84qnptuif7l6do0ksktathok43eyflzcq7z8wulniynjhqmnlrdjisosqt3mr02iuahfg7ldzvop71ezhxzgix6xzn93e2pjfo9ejjp5aqgocif4vob6t1be3hg0hn5597h5f66v2m6swkjed482ggfnw894rhxaurk67dsj2albqndwkz25rjxrahlj2eeinxqq93a30o86i865jter4g7wm0brhz5csy5kgb51sawjkc9kfcsqz92c4d7cf7f28kgtruroohlxli6bve96r2ff3eoqqupwifodag20lfp25t0fx61254kwm3s6runk0hcfn9opo2fsduoibmqdrzfnmmf431af441tkur3rhx1o08ovl9uf4xxachfj7acy58g7fnfkk4od5pfjvr20l85dfes3tq9vyom2vbx0m2r5sokx6c7chetqpphdk9etnpqxwwspcnqrq8hcrjka52lgc1y41fvnhxcdisx7w9b9l19p2rmdj4tqx4ezjghgi06b9vil6hkvllt3m2ym9e21mlqy1v0e5yoypwj32k5ri8et1bn2uqmjaw8gpcegsvv9wz45i2ggnntszj0nx05dl1u46mcb66y43xd2tyow6v6wokbeputut9ybaxz7o3hcq41s2p97mxpv34guz7xxbdhezhvja06m298nqx0qsh4tn14vcwt7kdv9rvpcwljzese17dwmnhmi38iqxf8hp5dannyffr8ijrwmxn3ezmfg6f4l8a4mwyhfcjvziu4uy9a62d8wrfskakvwh9h89rfjpa4k8edrq6jjkf9a7xu0vibp3g3escq0jjt209xxyztpy1u1yf9r2hgmw7mwa4j4565w74ib5ocn8q5wrawc9m17o1i8e3mvoc6bkj96nwm5iti5krq5xjwy8rd7j0tjkjzvupus5d64d1zt4fezbuvhieygyl0jlv8s8m24u3jj822tf1wwukafoksuigt1ttsni935ly51cqokl5k09t4y3hjszbj1cisjg18cqsqwqcrlai7exaefpknsa6euj7k0kaqbf4lya7f29zmytpzc32t3vqs2b0967a80ybxykz6fvyjdraj43831rnq19xh4m000gyi0bu5jgp8x53eibhya5xtqdglmdjrhen0md1fha4k0y95ze3v5cxssdeyqwj9y8a8eco858nf9uj6f83z3uk9yk7zi90lmcy8bm6es36hxwj8g1yygj5evne8ire0q6pa2e0jh9wmubpsv53tcof1pvhvvd7b03i2srdeykcq7sn88bv2huz39pmd4m012nx6jib7c53ape70i6gwefvatqetrvj94oq6bm50eqo4c72csqdwn55xpoq27pqot90zfzpnb690eund78eoss6ltg7zhkc4hk0qjvrl8me8cgzy0py4btyhhsks9i0veou0ia84nxbkwo758dn3m0kgp60jxcrgdjuyojbh5u67qlu69lthdzmzshij0mhlaa05rdrn9vdv1440v2rozpwdtvxzfvykb0tjx700eqdr164zy7d3ji8g82souaiui7n96my35ocgt0xmdrss' FROM x AS x;
INSERT INTO x SELECT '' FROM x AS x;
INSERT INTO x VALUES ('33y93uhg3qi3f13hnh8xjrvvbz7iwevroaaif8v5ecfetwnd5yqde9mna8753399lj5r2u5rps5tuu0xsetmsxi80dacku7uz0q3r7h3r9gboq4c41t4h8brm6t7hcb2zg41g7elknivchc3ff409nhczhc7ciledplgcql5sfjb1x2ctuvf6cjdckfkq56ranj67qkzdnvj8guw8rxyd55298ziig0adhqsi0jdx60exhq6vv8hfqarfpvfma8qoqtv5kzte4mofm41w5uy0zdk4tjd5i7673pyigseb4mb3g6u5rwac1s8s1xcoobjoexp340hbr7vk1fwqdfisdm94967tvqxmirn6ml4ccaw3r7bh04e2p5txvea0vi965t29vbv1858ystdqpc8s9aalij445brgn55gpwtgmpbg8tkg7plw05aw8auijbkl9v4go9azrbqcb3yipi1hphmazfrzuta6qdys89usu672vs18qbricebs2rjhsqud8iemug1fr31hoaxu0lg7yfg2i8i9ufmrkgg8dtv5dw5edxptw48meec88iunibox2bc72eq5d59fmg2db7r8xtj1wptoak72on1v5jis1s024hvebx3nudmx78s32dszihs8mvkpt37fxsza9nccbo0jmyu7wzspkl1tqtbkx17lc043weyu2qavtp7vzvuyk9j7l7gha5kr6x295l9sk610ya8820atujz6dpcnkp4fuyatyefo4acc1g05ipcf2bwjgtz48ewzivm8p6kh7e1dp715x5as9bvs5i9n9pxvhp6jo7clnj987iojgztfk2fk9980gr8i69frtci4cj6rxlf9ig228tyljlqd53nwxnz7mvqjymohyqjsuunjdnioo199cl8m6fvv3hu8vh0v8otcohrskwan81p1ncqkf2svf97gyz2cu7bfrvbv03o6bflqdm60ojl0z1yta41m416mkdljpuxzk7gs9tj121jnvfe9piw1ow3ibu66eyrs2cmxopyhio4h7toekptm4xysmx96pdbjxx0kugwj4mfgjwj40ijkpwz0kjs39eumuexyooldizgzidhzk7hecfqamlnolbescpiuqrfyewm4evn2tx3cnoun9y3mciact4ont84q9z99r4wt76wusjtoz11xv5rgkz1t2dy3wtzog1ifhmprfymrzt0lzlsugjru5m6ubq87dmyzu9fwo8sivuea2zedogsm93sgwgrbomalj213ejyic4w9wgobnqjogd9j0h24u8dddr238elpqwk4sr2dznvw2fthow2l5ckua9z022nj3hktzae4jnyu7ckohdowy91lmh6ns10sialoa146x5sfje0fc4i1dt1dwbcygtmadjwjhytsvsq879y9tfud08fg2c1a01yzb5yy1z5cj99aherty940w91qjl0zl27p58enhtdvr0wzqpkgkxno93vj9qm7fiszrzcbmlowwfeusty9dkm9i4vskzovrgjpp91op2654acbblntyxra484e8ejbmehtecdh25patwrs016w7gqtvtzgufg9znmuxwcczrwgqpfkgwj27pfu56z5sd9241vjz8364zxfwfogjvhdxcxfgh6u4lbqmu1870ei2snna70atxputk4ybpj1r1e0ut4zcz8786eofale8on8uysws7mfs8o3uen21zjtqnc260s6e9tc1lpw2qk2vjsg10escmlj8hliba24sauabdc7ttj2pmv2xjh0photfpywqfbw7f9av3jxyplfap42nc9ttz1xqbrb3seieu2cnnwjc8vqxuacprwcdznwzrc99e28zf5q6y9c2exm9rbofy09w854xkplwlx2v2qjfm36r4jhwi953i993xhgu3um0qeisyfw8aicc52itcc53e98wer9iluwqrttx25vjr2ukk7m0olyzksbj9gaiu4tii3vcmk994ouvzse4khfd4ud9uxea4n8ahdshzpflx0feh0s1r9nv6e6fxipxiclaqs4hul93pbka016cq2l9cogc3tueqhwuximt11gws89uhjf81dhkowdrr0lh19yso5r2hclhblr3c0ykac7ieecfth4xbyz31hr3ug4gd8lbgkvh0hm5tgtyy84qnptuif7l6do0ksktathok43eyflzcq7z8wulniynjhqmnlrdjisosqt3mr02iuahfg7ldzvop71ezhxzgix6xzn93e2pjfo9ejjp5aqgocif4vob6t1be3hg0hn5597h5f66v2m6swkjed482ggfnw894rhxaurk67dsj2albqndwkz25rjxrahlj2eeinxqq93a30o86i865jter4g7wm0brhz5csy5kgb51sawjkc9kfcsqz92c4d7cf7f28kgtruroohlxli6bve96r2ff3eoqqupwifodag20lfp25t0fx61254kwm3s6runk0hcfn9opo2fsduoibmqdrzfnmmf431af441tkur3rhx1o08ovl9uf4xxachfj7acy58g7fnfkk4od5pfjvr20l85dfes3tq9vyom2vbx0m2r5sokx6c7chetqpphdk9etnpqxwwspcnqrq8hcrjka52lgc1y41fvnhxcdisx7w9b9l19p2rmdj4tqx4ezjghgi06b9vil6hkvllt3m2ym9e21mlqy1v0e5yoypwj32k5ri8et1bn2uqmjaw8gpcegsvv9wz45i2ggnntszj0nx05dl1u46mcb66y43xd2tyow6v6wokbeputut9ybaxz7o3hcq41s2p97mxpv34guz7xxbdhezhvja06m298nqx0qsh4tn14vcwt7kdv9rvpcwljzese17dwmnhmi38iqxf8hp5dannyffr8ijrwmxn3ezmfg6f4l8a4mwyhfcjvziu4uy9a62d8wrfskakvwh9h89rfjpa4k8edrq6jjkf9a7xu0vibp3g3escq0jjt209xxyztpy1u1yf9r2hgmw7mwa4j4565w74ib5ocn8q5wrawc9m17o1i8e3mvoc6bkj96nwm5iti5krq5xjwy8rd7j0tjkjzvupus5d64d1zt4fezbuvhieygyl0jlv8s8m24u3jj822tf1wwukafoksuigt1ttsni935ly51cqokl5k09t4y3hjszbj1cisjg18cqsqwqcrlai7exaefpknsa6euj7k0kaqbf4lya7f29zmytpzc32t3vqs2b0967a80ybxykz6fvyjdraj43831rnq19xh4m000gyi0bu5jgp8x53eibhya5xtqdglmdjrhen0md1fha4k0y95ze3v5cxssdeyqwj9y8a8eco858nf9uj6f83z3uk9yk7zi90lmcy8bm6es36hxwj8g1yygj5evne8ire0q6pa2e0jh9wmubpsv53tcof1pvhvvd7b03i2srdeykcq7sn88bv2huz39pmd4m012nx6jib7c53ape70i6gwefvatqetrvj94oq6bm50eqo4c72csqdwn55xpoq27pqot90zfzpnb690eund78eoss6ltg7zhkc4hk0qjvrl8me8cgzy0py4btyhhsks9i0veou0ia84nxbkwo758dn3m0kgp60jxcrgdjuyojbh5u67qlu69lthdzmzshij0mhlaa05rdrn9vdv1440v2rozpwdtvxzfvykb0tjx700eqdr164zy7d3ji8g82souaiui7n96my35ocgt0xmdrss');
PRAGMA x = 'fsst';
CREATE TABLE x AS SELECT * FROM x;
PRAGMA x = 1;
CREATE TABLE x (x TEXT);
INSERT INTO x SELECT CASE WHEN x % 2 = 0 THEN 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' ELSE 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' END FROM x AS x;
PRAGMA x = 'fsst';
PRAGMA x = 'fsst';
SELECT COUNT(x) FROM x;
SELECT COUNT(x) FROM x;
SELECT x FROM x;
SELECT x FROM x;
SELECT x FROM x WHERE x = 'double' AND x <> 'Patas';
SELECT x FROM x WHERE x = 'float' AND x <> 'Patas';
PRAGMA x = 'patas';
PRAGMA x = 'rle';
CREATE TABLE x (x INT);
INSERT INTO x SELECT x FROM x AS x;
SELECT x FROM x WHERE x ILIKE 'INTEGER';
PRAGMA x = 'rle';
CREATE TABLE x (x INT, x INT[]);
INSERT INTO x SELECT x, CASE WHEN (x // 1000) % 2 = 0 THEN [1, 1, 1] ELSE [2, 2] END FROM x AS x;
SELECT x FROM x WHERE x ILIKE 'INTEGER' LIMIT 1;
SELECT COUNT(*), SUM(x) FROM (SELECT UNNEST(x) FROM x) AS x;
SELECT COUNT(*), SUM(x) FROM (SELECT UNNEST(x) FROM x WHERE x >= 5000 AND x < 6000) AS x;
SELECT COUNT(*), SUM(x) FROM (SELECT UNNEST(x) FROM x WHERE x >= 150000 AND x < 160000) AS x;
CREATE INDEX x ON x(x);
SELECT * FROM x WHERE x = 150001;
CREATE TABLE x AS SELECT x % 10 AS x, LIST(-x) AS x FROM x AS x GROUP BY x;
SELECT COUNT(*), SUM(x) FROM (SELECT UNNEST(x) FROM x) AS x;
PRAGMA x = 'rle';
CREATE TABLE x (x BOOLEAN);
INSERT INTO x SELECT FALSE FROM x;
INSERT INTO x SELECT TRUE FROM x;
SELECT COUNT(*) FROM x WHERE x = FALSE;
SELECT COUNT(*) FROM x WHERE x = FALSE;
PRAGMA x = 'rle';
CREATE TABLE x AS SELECT CAST((x // 5) AS BIGINT) FROM x AS x;
PRAGMA x = 'uncompressed';
CREATE TABLE x AS SELECT CAST((x // 10) AS BIGINT) FROM x AS x;
SELECT (CAST(x AS REAL) // CAST(x AS REAL)) > 2.5, (CAST(x AS REAL) // CAST(x AS REAL)) < 4.5 FROM (SELECT (SELECT COUNT(DISTINCT x) FROM x WHERE NOT x IN ('VARCHAR', 'VALIDITY')) AS x, (SELECT COUNT(DISTINCT x) FROM x WHERE NOT x IN ('VARCHAR', 'VALIDITY')) AS x);
DROP TABLE x;
DROP TABLE x;
PRAGMA x = 'uncompressed';
PRAGMA x = 'uncompressed';
PRAGMA x = 'rle';
PRAGMA x = 'rle';
DROP TABLE x;
PRAGMA x = 'rle';
CREATE TABLE x (x INT);
INSERT INTO x SELECT 0 FROM x;
INSERT INTO x SELECT 1 FROM x;
INSERT INTO x SELECT 2 FROM x;
INSERT INTO x SELECT 3 FROM x;
INSERT INTO x SELECT 4 FROM x;
INSERT INTO x SELECT 5 FROM x;
INSERT INTO x SELECT 6 FROM x;
INSERT INTO x SELECT 7 FROM x;
INSERT INTO x SELECT 8 FROM x;
SELECT DISTINCT ON (x) VECTOR_TYPE(x) AS x FROM x ORDER BY ALL;
PRAGMA x;
SELECT DISTINCT ON (x) x FROM (SELECT VECTOR_TYPE(x) FROM x LIMIT 8192) AS x;
SELECT DISTINCT ON (x) x FROM (SELECT VECTOR_TYPE(x) FROM x OFFSET 8192) AS x;
PRAGMA x;
PRAGMA x = 'rle';
CREATE TABLE x AS SELECT x AS x, x // 50 AS x, CASE WHEN x % 8 = 0 THEN NULL ELSE x // 50 END AS x FROM x AS x;
SELECT * FROM x WHERE x = 5040 AND x = 100;
SELECT * FROM x WHERE x = 5040 AND SUBSTRING(CAST(x AS TEXT), 1, 3) = '100';
SELECT * FROM x WHERE x >= 5020 AND x = 100;
SELECT * FROM x WHERE x = 100;
PRAGMA x;
SET x = 'rle';
SET x = 'rle';
SET x = 'rle';
SET x = 'rle';
SET x = 'rle';
PRAGMA x = 'rle';
CREATE TABLE x (x TEXT, x INT);
INSERT INTO x SELECT CAST(x AS TEXT) AS x, 1 AS x FROM x AS x;
INSERT INTO x SELECT CAST((5000 + x) AS TEXT) AS x, 2 AS x FROM x AS x;
SELECT SUM(x), MIN(x), MAX(x), COUNT(*) FROM x WHERE x = 2;
SELECT MIN(x), MAX(x), SUM(x), MIN(x), MAX(x), COUNT(*) FROM x WHERE x = '5000';
PRAGMA x = 'rle';
CREATE TABLE x (x INT PRIMARY KEY, x INT);
INSERT INTO x SELECT CAST(x AS TEXT) AS x, 1 AS x FROM x AS x;
INSERT INTO x SELECT CAST((5000 + x) AS TEXT) AS x, 2 AS x FROM x AS x;
SELECT x FROM x WHERE x ILIKE 'INTEGER' LIMIT 1;
SELECT MIN(x), MAX(x), SUM(x), MIN(x), MAX(x), COUNT(*) FROM x WHERE x = '5000';
PRAGMA x = 'rle';
CREATE TABLE x (x BIGINT);
INSERT INTO x SELECT CAST(3 AS BIGINT) FROM x UNION ALL SELECT CAST(4 AS BIGINT) FROM x;
SELECT x, COUNT(*) FROM x GROUP BY ALL;
PRAGMA x = 'rle';
CREATE TABLE x (x INT);
INSERT INTO x SELECT * FROM x;
SELECT SUM(x), MIN(x), MAX(x), COUNT(*) FROM x;
SELECT SUM(x), MIN(x), MAX(x), COUNT(*) FROM x;
PRAGMA x;
PRAGMA x = 'rle';
BEGIN;
PRAGMA x = 'RLE';
CREATE TABLE x (x INT);
INSERT INTO x SELECT NULL FROM x;
INSERT INTO x SELECT 1;
INSERT INTO x SELECT 2;
INSERT INTO x SELECT 3;
COMMIT;
SELECT MIN(x), MAX(x), COUNT(*), COUNT(x) FROM x;
PRAGMA x;
PRAGMA x = 'rle';
CREATE TABLE x AS SELECT x AS x, x // 50 AS x, CASE WHEN x % 8 = 0 THEN NULL ELSE x // 50 END AS x FROM x AS x;
SELECT * FROM x WHERE x >= 75 AND x <= 125 AND x % 4 = 0;
SELECT * FROM x WHERE x >= 75 AND x <= 125 AND x % 4 = 0;
SELECT * FROM x WHERE x >= 33380 AND x <= 33410 AND x % 4 = 0;
CREATE TABLE x AS SELECT x AS x, x % 5 AS x, x // 50 AS x, CASE WHEN x % 8 = 0 THEN NULL ELSE x // 50 END AS x FROM x AS x;
SELECT COUNT(*), SUM(x), MIN(x), MAX(x), SUM(x), COUNT(x) FROM x WHERE x >= 1500 AND x <= 2500 AND x = 3;
SELECT COUNT(*), SUM(x), MIN(x), MAX(x), SUM(x), COUNT(x) FROM x WHERE x >= 1500 AND x <= 19500 AND x <= 2;
PRAGMA x = 'rle';
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (11, 22), (11, 22), (12, 21), (NULL, NULL);
SELECT x FROM x WHERE x ILIKE 'INTEGER' LIMIT 1;
PRAGMA x;
PRAGMA x = 'rle';
PRAGMA x = 'rle';
INSERT INTO x SELECT {'x': x} AS x FROM x AS x;
SELECT SUM(x['a']), MIN(x['a']), MAX(x['a']), COUNT(*) FROM x;
SELECT SUM(x['a']), MIN(x['a']), MAX(x['a']), COUNT(*) FROM x;
CREATE TABLE x (x INT);
PRAGMA x = 'roaring';
INSERT INTO x SELECT CASE WHEN x % 25 = 0 THEN 1337 ELSE NULL END FROM x AS x;
SELECT x FROM x WHERE x ILIKE 'VALIDITY' AND x <> 'Roaring';
PRAGMA x;
SELECT COUNT(*) FROM x WHERE NOT x IS NULL;
SELECT SUM(x), MIN(x), MAX(x) FROM x;
PRAGMA x;
DELETE FROM x;
INSERT INTO x SELECT CASE WHEN x = 0 OR (x % 512 <> 0 AND (x % 512) < 350 OR (x % 512) > 450) THEN NULL ELSE 1337 END FROM x AS x;
SELECT x FROM x WHERE x ILIKE 'VALIDITY' AND x <> 'Roaring';
PRAGMA x;
SELECT COUNT(*) FROM x WHERE NOT x IS NULL;
SELECT SUM(x), MIN(x), MAX(x) FROM x;
PRAGMA x;
DELETE FROM x;
INSERT INTO x SELECT CASE WHEN x % 3 = 0 THEN 1337 ELSE NULL END FROM x AS x;
SELECT x FROM x WHERE x ILIKE 'VALIDITY' AND x <> 'Roaring';
PRAGMA x;
SELECT COUNT(*) FROM x WHERE NOT x IS NULL;
SELECT SUM(x), MIN(x), MAX(x) FROM x;
PRAGMA x;
SET x = 'info';
PRAGMA x = 'uncompressed';
SET x = TRUE;
CREATE TABLE x AS SELECT CASE WHEN x % 25 = 0 THEN 1337 ELSE NULL END FROM x AS x;
SET x = FALSE;
SELECT CAST(x.split(': ')[2] AS INT) FROM x WHERE x.starts_with('FinalAnalyze') AND x.contains('test_uncompressed') AND x.contains('VALIDITY') AND x.contains('COMPRESSION_UNCOMPRESSED');
PRAGMA x = 'roaring';
SET x = TRUE;
CREATE TABLE x AS SELECT * FROM x;
SET x = FALSE;
SELECT CAST(x.split(': ')[2] AS INT) FROM x WHERE x.starts_with('FinalAnalyze') AND x.contains('test_roaring') AND x.contains('VALIDITY') AND x.contains('COMPRESSION_ROARING');
SET x = 'info';
PRAGMA x = 'uncompressed';
SET x = TRUE;
CREATE TABLE x AS SELECT CASE WHEN x % 3 = 0 THEN 1337 ELSE NULL END FROM x AS x;
SET x = FALSE;
SELECT CAST(x.split(': ')[2] AS INT) FROM x WHERE x.starts_with('FinalAnalyze') AND x.contains('test_uncompressed') AND x.contains('VALIDITY') AND x.contains('COMPRESSION_UNCOMPRESSED');
PRAGMA x = 'roaring';
SET x = TRUE;
CREATE TABLE x AS SELECT * FROM x;
SET x = FALSE;
SELECT CAST(x.split(': ')[2] AS INT) FROM x WHERE x.starts_with('FinalAnalyze') AND x.contains('test_roaring') AND x.contains('VALIDITY') AND x.contains('COMPRESSION_ROARING');
SET x = 'info';
PRAGMA x = 'uncompressed';
SET x = TRUE;
CREATE TABLE x AS SELECT CASE WHEN x = 0 OR (x % 512 <> 0 AND (x % 512) < 350 OR (x % 512) > 450) THEN NULL ELSE 1337 END FROM x AS x;
SET x = FALSE;
SELECT CAST(x.split(': ')[2] AS INT) FROM x WHERE x.starts_with('FinalAnalyze') AND x.contains('test_uncompressed') AND x.contains('VALIDITY') AND x.contains('COMPRESSION_UNCOMPRESSED');
PRAGMA x = 'roaring';
SET x = TRUE;
CREATE TABLE x AS SELECT * FROM x;
SET x = FALSE;
SELECT CAST(x.split(': ')[2] AS INT) FROM x WHERE x.starts_with('FinalAnalyze') AND x.contains('test_roaring') AND x.contains('VALIDITY') AND x.contains('COMPRESSION_ROARING');
PRAGMA x = 'roaring';
SET x = '100mb';
SET x = '100mb';
SET x = '100mb';
SET x = '100mb';
PRAGMA x = 'roaring';
CREATE TABLE x (x BIGINT);
INSERT INTO x SELECT CASE WHEN x % 25 = 0 THEN 1337 ELSE NULL END FROM x AS x;
SELECT x FROM x WHERE x ILIKE 'VALIDITY' AND x <> 'Roaring';
SELECT COUNT(*) FROM x WHERE NOT x IS NULL;
SELECT SUM(x), MIN(x), MAX(x) FROM x;
DELETE FROM x;
DELETE FROM x;
SELECT COUNT(*) FROM x WHERE NOT x IS NULL;
SELECT SUM(x), MIN(x), MAX(x) FROM x;
PRAGMA x = 'roaring';
CREATE TABLE x (x BIGINT);
INSERT INTO x SELECT CASE WHEN x % 3 = 0 THEN 1337 ELSE NULL END FROM x AS x;
SELECT x FROM x WHERE x ILIKE 'VALIDITY' AND x <> 'Roaring';
SELECT COUNT(*) FROM x WHERE NOT x IS NULL;
SELECT SUM(x), MIN(x), MAX(x) FROM x;
PRAGMA x = 'roaring';
CREATE TABLE x AS SELECT CASE WHEN x % 25 = 0 THEN 1337 ELSE NULL END FROM x AS x;
PRAGMA x = 'uncompressed';
CREATE TABLE x AS SELECT CASE WHEN x % 25 = 0 THEN 1337 ELSE NULL END FROM x AS x;
SELECT x FROM x WHERE x = 'VALIDITY' AND x <> 'Roaring';
SELECT x FROM x WHERE x = 'VALIDITY' AND x <> 'Uncompressed';
SELECT CASE WHEN (CAST(x AS REAL) / CAST(x AS REAL)) > GETVARIABLE('min_ratio') AND (CAST(x AS REAL) / CAST(x AS REAL)) <= GETVARIABLE('max_ratio') THEN CAST(TRUE AS test_result) ELSE CAST({'x': x, 'x': x, 'x': GETVARIABLE('min_ratio'), 'x': GETVARIABLE('max_ratio'), 'x': CAST(x AS REAL) / CAST(x AS REAL)} AS test_result) END FROM (SELECT (SELECT COUNT(DISTINCT x) FROM x WHERE x IN ('VALIDITY')) AS x, (SELECT COUNT(DISTINCT x) FROM x WHERE x IN ('VALIDITY')) AS x) AS x;
DROP TABLE x;
PRAGMA x = 'roaring';
CREATE TABLE x AS SELECT CASE WHEN x = 0 OR (x % 512 <> 0 AND (x % 512) < 350 OR (x % 512) > 450) THEN NULL ELSE 1337 END FROM x AS x;
PRAGMA x = 'uncompressed';
CREATE TABLE x AS SELECT CASE WHEN x = 0 OR (x % 512 <> 0 AND (x % 512) < 350 OR (x % 512) > 450) THEN NULL ELSE 1337 END FROM x AS x;
SELECT x FROM x WHERE x = 'VALIDITY' AND x <> 'Roaring';
SELECT x FROM x WHERE x = 'VALIDITY' AND x <> 'Uncompressed';
SELECT CASE WHEN (CAST(x AS REAL) / CAST(x AS REAL)) > GETVARIABLE('min_ratio') AND (CAST(x AS REAL) / CAST(x AS REAL)) <= GETVARIABLE('max_ratio') THEN CAST(TRUE AS test_result) ELSE CAST({'x': x, 'x': x, 'x': GETVARIABLE('min_ratio'), 'x': GETVARIABLE('max_ratio'), 'x': CAST(x AS REAL) / CAST(x AS REAL)} AS test_result) END FROM (SELECT (SELECT COUNT(DISTINCT x) FROM x WHERE x IN ('VALIDITY')) AS x, (SELECT COUNT(DISTINCT x) FROM x WHERE x IN ('VALIDITY')) AS x) AS x;
DROP TABLE x;
PRAGMA x = 'roaring';
CREATE TABLE x AS SELECT CASE WHEN x % 3 = 0 THEN 1337 ELSE NULL END FROM x AS x;
PRAGMA x = 'uncompressed';
CREATE TABLE x AS SELECT CASE WHEN x % 3 = 0 THEN 1337 ELSE NULL END FROM x AS x;
SELECT x FROM x WHERE x = 'VALIDITY' AND x <> 'Roaring';
SELECT x FROM x WHERE x = 'VALIDITY' AND x <> 'Uncompressed';
SELECT CASE WHEN (CAST(x AS REAL) / CAST(x AS REAL)) > GETVARIABLE('min_ratio') AND (CAST(x AS REAL) / CAST(x AS REAL)) <= GETVARIABLE('max_ratio') THEN CAST(TRUE AS test_result) ELSE CAST({'x': x, 'x': x, 'x': GETVARIABLE('min_ratio'), 'x': GETVARIABLE('max_ratio'), 'x': CAST(x AS REAL) / CAST(x AS REAL)} AS test_result) END FROM (SELECT (SELECT COUNT(DISTINCT x) FROM x WHERE x IN ('VALIDITY')) AS x, (SELECT COUNT(DISTINCT x) FROM x WHERE x IN ('VALIDITY')) AS x) AS x;
PRAGMA x = 'roaring';
CREATE TABLE x (x BIGINT);
INSERT INTO x SELECT CASE WHEN x % 25 = 0 THEN NULL ELSE 1337 END FROM x AS x;
SELECT x FROM x WHERE x ILIKE 'VALIDITY' AND x <> 'Roaring';
SELECT SUM(x), MIN(x), MAX(x) FROM x;
DELETE FROM x;
DELETE FROM x;
SELECT COUNT(*) FROM x WHERE NOT x IS NULL;
SELECT SUM(x), MIN(x), MAX(x) FROM x;
PRAGMA x = 'roaring';
CREATE TABLE x (x BIGINT);
INSERT INTO x SELECT CASE WHEN x = 0 OR (x % 512 <> 0 AND (x % 512) < 350 OR (x % 512) > 450) THEN 1337 ELSE NULL END FROM x AS x;
SELECT x FROM x WHERE x ILIKE 'VALIDITY' AND x <> 'Roaring';
SELECT COUNT(*) FROM x WHERE NOT x IS NULL;
SELECT SUM(x), MIN(x), MAX(x) FROM x;
PRAGMA x = 'roaring';
CREATE TABLE x (x BIGINT);
INSERT INTO x SELECT CASE WHEN x = 0 OR (x % 512 <> 0 AND (x % 512) < 350 OR (x % 512) > 450) THEN NULL ELSE 1337 END FROM x AS x;
SELECT x FROM x WHERE x ILIKE 'VALIDITY' AND x <> 'Roaring';
SELECT COUNT(*) FROM x WHERE NOT x IS NULL;
SELECT SUM(x), MIN(x), MAX(x) FROM x;
DELETE FROM x;
DELETE FROM x;
SELECT COUNT(*) FROM x WHERE NOT x IS NULL;
SELECT SUM(x), MIN(x), MAX(x) FROM x;
PRAGMA x = 'roaring';
SET x = '10mb';
CREATE TABLE x (x BIGINT);
INSERT INTO x SELECT CASE WHEN x % 25 = 0 THEN 1337 ELSE NULL END FROM x AS x;
SELECT COUNT(*) FROM x WHERE NOT x IS NULL;
INSERT INTO x SELECT CASE WHEN x % 25 = 0 THEN 1337 ELSE NULL END FROM x AS x;
SELECT COUNT(*) FROM x WHERE NOT x IS NULL;
SET x = '${enable_fsst_vector}';
PRAGMA x = '${compression}';
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('');
SELECT * FROM x;
SELECT LOWER(x) = '${compression}' FROM x WHERE x ILIKE 'VARCHAR' LIMIT 1;
CREATE TABLE x AS SELECT '' AS x FROM x;
INSERT INTO x VALUES ('A');
SELECT COUNT(*), MIN(x[1]), MAX(x[1]) FROM x LIMIT 5;
SELECT LOWER(x) = '${compression}' FROM x WHERE x ILIKE 'VARCHAR' LIMIT 1;
DROP TABLE x;
SET x = '${enable_fsst_vector}';
PRAGMA x = 1;
PRAGMA x = '${compression}';
CREATE TABLE x (x INT, x TEXT[]);
INSERT INTO x SELECT x, CASE WHEN (x // 1000) % 2 = 0 THEN [CAST(1 AS TEXT), CAST(1 AS TEXT), CAST(1 AS TEXT)] ELSE [CAST(2 AS TEXT), CAST(2 AS TEXT)] END FROM x AS x;
SELECT COUNT(*), SUM(CAST(x AS INT)) FROM (SELECT UNNEST(x) FROM x) AS x;
SELECT COUNT(*), SUM(CAST(x AS INT)) FROM (SELECT UNNEST(x) FROM x WHERE x >= 5000 AND x < 6000) AS x;
SELECT COUNT(*), SUM(CAST(x AS INT)) FROM (SELECT UNNEST(x) FROM x WHERE x >= 150000 AND x < 160000) AS x;
CREATE INDEX x ON x(x);
SELECT * FROM x WHERE x = 150001;
CREATE TABLE x AS SELECT x % 100 AS x, LIST(CAST((-x) AS TEXT)) AS x FROM x AS x GROUP BY x;
SELECT COUNT(*), SUM(CAST(x AS INT)) FROM (SELECT UNNEST(x) FROM x) AS x;
SELECT LOWER(x) = '${compression}' FROM x WHERE x ILIKE 'VARCHAR' LIMIT 1;
SELECT LOWER(x) = '${compression}' FROM x WHERE x ILIKE 'VARCHAR' LIMIT 1;
DROP TABLE x;
SET x = 'true';
PRAGMA x = 1;
PRAGMA x = 'fsst';
CREATE TABLE x (x TEXT[]);
INSERT INTO x SELECT CASE WHEN (x // 1000) % 2 = 0 THEN [CAST(1 AS TEXT), CAST(1 AS TEXT), CAST(1 AS TEXT)] ELSE [CAST(2 AS TEXT), CAST(2 AS TEXT)] END FROM x AS x;
SELECT COUNT(*), SUM(CAST(x AS INT)) FROM (SELECT UNNEST(x) FROM x) AS x;
SET x = '${enable_fsst_vector}';
PRAGMA x = '${compression}';
CREATE TABLE x (x TEXT);
INSERT INTO x SELECT CAST((x % 500) AS TEXT) FROM x AS x;
SELECT SUM(CAST(x AS INT)), MIN(CAST(x AS INT)), MAX(CAST(x AS INT)), COUNT(*) FROM x;
SELECT SUM(CAST(x AS INT)), MIN(CAST(x AS INT)), MAX(CAST(x AS INT)), COUNT(*) FROM x;
SELECT LOWER(x) = '${compression}' FROM x WHERE x ILIKE 'VARCHAR' LIMIT 1;
SET x = '${enable_fsst_vector}';
PRAGMA x = '${compression}';
CREATE TABLE x AS SELECT CASE WHEN x % 2 = 0 THEN NULL ELSE CONCAT('thisismyvarchar-', x // 4) END AS x FROM x AS x;
SELECT MIN(x), MAX(x), COUNT(*), COUNT(x), COUNT(DISTINCT x) FROM x;
SELECT MIN(x), MAX(x), COUNT(*), COUNT(x), COUNT(DISTINCT x) FROM x;
SET x = '${enable_fsst_vector}';
PRAGMA x = '${compression}';
CREATE TABLE x AS SELECT CASE WHEN x % 2 = 0 THEN '' ELSE CONCAT('this-', x // 4) END AS x FROM x AS x;
SELECT MIN(x), MAX(x), COUNT(*), COUNT(x), COUNT(DISTINCT x) FROM x;
SET x = '${enable_fsst_vector}';
PRAGMA x = '${compression}';
CREATE TABLE x (x TEXT);
INSERT INTO x SELECT CONCAT('A-', CAST((x % 5) AS TEXT)) FROM x AS x;
SELECT * FROM x LIMIT 5;
SELECT x[3] FROM x LIMIT 5;
SELECT LOWER(x) = '${compression}' FROM x WHERE x ILIKE 'VARCHAR' LIMIT 1;
SET x = '${enable_fsst_vector}';
PRAGMA x = '${compression}';
PRAGMA x = '${compression}';
INSERT INTO x SELECT {'x': CONCAT('0000000000000000000', CAST((x % 250) AS TEXT))} FROM x AS x;
SELECT SUM(CAST(x['a'] AS INT)), MIN(CAST(x['a'] AS INT)), MAX(CAST(x['a'] AS INT)), COUNT(*) FROM x;
SELECT SUM(CAST(x['a'] AS INT)), MIN(CAST(x['a'] AS INT)), MAX(CAST(x['a'] AS INT)), COUNT(*) FROM x;
SELECT LOWER(x) = '${compression}' FROM x WHERE x ILIKE 'VARCHAR' LIMIT 1;
SET x = '${enable_fsst_vector}';
PRAGMA x = '${compression}';
CREATE TABLE x (x TEXT);
INSERT INTO x SELECT CAST((x % 500) AS TEXT) FROM x AS x;
CREATE TABLE x AS SELECT x FROM x;
SELECT SUM(CAST(x AS INT)) FROM x;
SELECT SUM(CAST(x AS INT)) FROM x;
SELECT LOWER(x) = '${compression}' FROM x WHERE x ILIKE 'VARCHAR' LIMIT 1;
SELECT LOWER(x) = '${compression}' FROM x WHERE x ILIKE 'VARCHAR' LIMIT 1;
DROP TABLE x;
CREATE TABLE x (x TEXT, x INT);
PRAGMA x = 'zstd';
INSERT INTO x VALUES (REPEAT('a', 8000), 1);
INSERT INTO x VALUES (CONCAT(CAST(RANGE(0, 500000) AS TEXT)), 5);
INSERT INTO x VALUES (REPEAT('f', 1), 6);
PRAGMA x;
SELECT x[1], STRLEN(x) FROM x;
CREATE TABLE x (x TEXT);
INSERT INTO x (x) SELECT CASE WHEN (x % 7) = 0 THEN NULL ELSE GETVARIABLE('my_string') || x END FROM x AS x;
PRAGMA x = 'zstd';
SELECT COUNT(*) FROM x WHERE x IS NULL;
CREATE TABLE x (x TEXT);
SET x = '10.0 GB';
INSERT INTO x VALUES ('aaaabbbb');
INSERT INTO x SELECT GETVARIABLE('my_string');
INSERT INTO x SELECT GETVARIABLE('my_string');
INSERT INTO x SELECT 'bbbbaaaa' FROM x;
INSERT INTO x SELECT GETVARIABLE('my_string');
INSERT INTO x SELECT 'bbbbaaaa' FROM x;
INSERT INTO x SELECT CONCAT(GETVARIABLE('my_string'), GETVARIABLE('my_string'));
INSERT INTO x SELECT 'bbbbaaaa' FROM x;
INSERT INTO x SELECT CONCAT(GETVARIABLE('my_string'), GETVARIABLE('my_string'));
INSERT INTO x SELECT 'bbbbaaaa' FROM x;
PRAGMA x = 'zstd';
SELECT STRLEN(x), COUNT(x) FROM x GROUP BY STRLEN(x) ORDER BY ALL;
PRAGMA x = 'ZSTD';
PRAGMA x;
CREATE TABLE x AS SELECT x, REPEAT('X', CASE WHEN x % 17 = 0 THEN 5000 ELSE x % 7 END) AS x FROM x AS x;
SELECT AVG(STRLEN(x)), MIN(STRLEN(x)), MAX(STRLEN(x)), SUM(STRLEN(x)), MIN(x[1]), MAX(x[1]) FROM x;
CREATE TABLE x AS SELECT x FROM x;
CREATE TABLE x AS SELECT x FROM x;
ALTER TABLE x DROP COLUMN x;
ALTER TABLE x ADD COLUMN x TEXT;
UPDATE x SET x = REPEAT('X', CASE WHEN x % 17 = 0 THEN 5000 ELSE x % 7 END);
SELECT AVG(STRLEN(x)), MIN(STRLEN(x)), MAX(STRLEN(x)), SUM(STRLEN(x)), MIN(x[1]), MAX(x[1]) FROM x;
SELECT AVG(STRLEN(x)), MIN(STRLEN(x)), MAX(STRLEN(x)), SUM(STRLEN(x)), MIN(x[1]), MAX(x[1]) FROM x;
PRAGMA x = 'ZSTD';
PRAGMA x;
CREATE TABLE x AS SELECT REPEAT('X', CASE WHEN x % 17 = 0 THEN 5000 ELSE x % 7 END) AS x FROM x AS x;
SELECT AVG(STRLEN(x)), MIN(STRLEN(x)), MAX(STRLEN(x)), SUM(STRLEN(x)), MIN(x[1]), MAX(x[1]) FROM x;
CREATE TABLE x AS SELECT x FROM x;
CREATE TABLE x AS SELECT x FROM x;
DROP TABLE x;
CREATE TABLE x AS SELECT REPEAT('X', CASE WHEN x % 17 = 0 THEN 5000 ELSE x % 7 END) AS x FROM x AS x;
SELECT AVG(STRLEN(x)), MIN(STRLEN(x)), MAX(STRLEN(x)), SUM(STRLEN(x)), MIN(x[1]), MAX(x[1]) FROM x;
SELECT AVG(STRLEN(x)), MIN(STRLEN(x)), MAX(STRLEN(x)), SUM(STRLEN(x)), MIN(x[1]), MAX(x[1]) FROM x;
SET x = '16384';
SET x = 'v1.2.0';
ATTACH '__TEST_DIR__/giant_list.db' AS x;
USE x;
PRAGMA x = 'zstd';
PRAGMA x = '1gb';
SET x = 1;
SET x = 1;
SELECT LENGTH(x), x[1], x[-1] FROM x;
SELECT x FROM x WHERE x = 'VARCHAR' AND x <> 'ZSTD';
PRAGMA x = 'zstd';
SELECT SETSEED(0.42);
PRAGMA x = 'zstd';
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('11'), ('11'), ('12'), (NULL);
SELECT * FROM x;
SET x = TRUE;
SET x = 'info';
PRAGMA x = 'zstd';
SELECT SETSEED(0.42);
CREATE TABLE x AS (WITH x AS (SELECT LIST_REDUCE([CAST(UUID() AS TEXT) FOR x IN RANGE(0, 128)], (x, x) -> CONCAT(x, x)) AS x FROM x) SELECT x FROM x);
SELECT x FROM x WHERE x.starts_with('FinalAnalyze') AND x.contains('test_compressed') AND x.contains('VARCHAR') ORDER BY x;
PRAGMA x = 'uncompressed';
SELECT SETSEED(0.42);
CREATE TABLE x AS (WITH x AS (SELECT LIST_REDUCE([CAST(UUID() AS TEXT) FOR x IN RANGE(0, 128)], (x, x) -> CONCAT(x, x)) AS x FROM x) SELECT x FROM x);
SELECT x FROM x WHERE x.starts_with('FinalAnalyze') AND x.contains('test_uncompressed') AND x.contains('VARCHAR') ORDER BY x;
SELECT x FROM x WHERE x <> 'VALIDITY' AND x <> 'ZSTD';
SELECT x FROM x WHERE x <> 'VALIDITY' AND x <> 'Uncompressed';
WITH x AS (SELECT 1 + SUM(LENGTH(x)) AS x FROM x WHERE NOT x IN ('VALIDITY') GROUP BY x), x AS (SELECT 1 + SUM(LENGTH(x)) AS x FROM x WHERE NOT x IN ('VALIDITY') GROUP BY x) SELECT CASE WHEN (CAST(x AS REAL) / CAST(x AS REAL)) > GETVARIABLE('min_ratio') AND (CAST(x AS REAL) / CAST(x AS REAL)) < GETVARIABLE('max_ratio') THEN CAST(TRUE AS test_result) ELSE CAST({'x': x, 'x': x, 'x': GETVARIABLE('min_ratio'), 'x': GETVARIABLE('max_ratio'), 'x': CAST(x AS REAL) / CAST(x AS REAL)} AS test_result) END FROM (SELECT (SELECT SUM(x) FROM x) AS x, (SELECT SUM(x) FROM x) AS x) AS x;
CREATE TABLE x (x INT PRIMARY KEY);
INSERT INTO x VALUES (1), (2), (3);
CREATE TABLE x (x INT, FOREIGN KEY (x) REFERENCES x (x));
INSERT INTO x VALUES (1), (2);
INSERT INTO x VALUES (4);
INSERT INTO x VALUES (3);
DELETE FROM x WHERE x = 3;
DELETE FROM x WHERE x = 3;
DELETE FROM x WHERE x = 3;
UPDATE x SET x = 5 WHERE x = 2;
UPDATE x SET x = 4 WHERE x = 2;
UPDATE x SET x = 4 WHERE x = 2;
DROP TABLE x;
DROP TABLE x;
CREATE TABLE x AS SELECT * FROM x AS x;
DELETE FROM x WHERE x >= 5000000;
SELECT COUNT(*), SUM(x) FROM x;
ALTER TABLE x ADD COLUMN x INT;
SELECT COUNT(*), SUM(x), SUM(x) FROM x;
UPDATE x SET x = x + 1;
SELECT COUNT(*), SUM(x), SUM(x) FROM x;
SELECT COUNT(*), SUM(x), SUM(x) FROM x;
CREATE TABLE x AS SELECT * FROM x AS x;
DELETE FROM x WHERE x % 2 = 0;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) * GET_BLOCK_SIZE('drop_many_deletes') <= 262144 FROM x;
SELECT COUNT(*) * GET_BLOCK_SIZE('drop_many_deletes') <= 262144 FROM x;
SELECT COUNT(*) * GET_BLOCK_SIZE('drop_many_deletes') <= 262144 FROM x;
CREATE TABLE x AS SELECT * FROM x AS x;
DELETE FROM x WHERE x % 2 = 0;
ALTER TABLE x ADD COLUMN x INT;
SELECT COUNT(*), COUNT(x), COUNT(x) FROM x;
UPDATE x SET x = x + 1;
SELECT COUNT(*), COUNT(x), COUNT(x), SUM(x) - SUM(x) FROM x;
DELETE FROM x WHERE x % 3 = 0;
SELECT COUNT(*), COUNT(x), COUNT(x), SUM(x) - SUM(x) FROM x;
CREATE TABLE x (x INT);
INSERT INTO x SELECT * FROM x;
DELETE FROM x WHERE x % 2 = 0;
SELECT COUNT(*), SUM(x), MIN(x), MAX(x) FROM x;
INSERT INTO x SELECT * FROM x;
SELECT COUNT(*), SUM(x), MIN(x), MAX(x) FROM x;
DELETE FROM x WHERE x % 3 = 0;
SELECT COUNT(*), SUM(x), MIN(x), MAX(x) FROM x;
INSERT INTO x SELECT * FROM x;
SELECT COUNT(*), SUM(x), MIN(x), MAX(x) FROM x;
SELECT COUNT(*), SUM(x), MIN(x), MAX(x) FROM x;
SELECT COUNT(*) FROM x WHERE x % 7 = 0;
DELETE FROM x WHERE x % 7 = 0;
SELECT COUNT(*), SUM(x), MIN(x), MAX(x) FROM x;
DELETE FROM x WHERE x % 3 = 0;
SELECT COUNT(*), SUM(x), MIN(x), MAX(x) FROM x;
INSERT INTO x SELECT 1 FROM x;
INSERT INTO x SELECT 2 FROM x;
DELETE FROM x WHERE x = 1;
SELECT COUNT(*), SUM(x), MIN(x), MAX(x) FROM x;
DELETE FROM x WHERE x = 2;
SELECT COUNT(*), SUM(x), MIN(x), MAX(x) FROM x;
DELETE FROM x;
SELECT COUNT(*), SUM(x), MIN(x), MAX(x) FROM x;
BEGIN;
CREATE TABLE x (x INT, x INT);
INSERT INTO x SELECT x, x + 2 FROM x AS x;
SELECT COUNT(*) FROM x;
DELETE FROM x WHERE x = 2;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
INSERT INTO x VALUES (2, 4);
SELECT COUNT(*) FROM x;
DELETE FROM x WHERE x % 2 = 0;
SELECT COUNT(*) FROM x;
BEGIN;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (11, 22), (12, 21), (13, 22), (12, 21);
DELETE FROM x WHERE x = 12;
SELECT x, x FROM x ORDER BY x;
COMMIT;
SELECT x, x FROM x ORDER BY x;
DELETE FROM x WHERE x = 11;
SELECT x, x FROM x ORDER BY x;
INSERT INTO x VALUES (11, 24), (12, 25);
SELECT x, x FROM x ORDER BY x;
DELETE FROM x WHERE x = 12;
SELECT x, x FROM x ORDER BY x;
SELECT x, x FROM x ORDER BY x;
CREATE TABLE x AS SELECT * FROM x AS x;
DELETE FROM x WHERE x % 2 = 0;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
CREATE TABLE x AS SELECT * FROM x AS x;
DELETE FROM x WHERE x % 2 = 0;
SELECT COUNT(*) FROM x;
INSERT INTO x VALUES (42);
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
DELETE FROM x WHERE x % 3 = 0;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
INSERT INTO x VALUES (84);
INSERT INTO x VALUES (DEFAULT);
SELECT * FROM x;
CREATE VIEW x AS SELECT CURRENT_SCHEMA();
SELECT * FROM x;
SELECT * FROM x;
SET x = TRUE;
CREATE SCHEMA x.x;
CREATE SCHEMA x.x;
CREATE SCHEMA x.x;
CREATE SCHEMA x.x;
CREATE SCHEMA x.x;
CREATE SCHEMA x.x;
CREATE SCHEMA x.x;
SET x = TRUE;
CREATE SCHEMA x.x;
CREATE SCHEMA x.x;
CREATE SCHEMA x.x;
CREATE SCHEMA x.x;
CREATE SCHEMA x.x;
CREATE SCHEMA x.x;
CREATE SCHEMA x.x;
CREATE TABLE x (x INT, x TEXT);
CREATE TABLE x (x INT, x TEXT);
SELECT MIN(x) FROM x;
SELECT MIN(x) FROM x;
INSERT INTO x VALUES (42, 'hello world');
SELECT MIN(x) FROM x;
SELECT MIN(x) FROM x;
CREATE TABLE x (x INT PRIMARY KEY, x TEXT);
CREATE TABLE x (x INT PRIMARY KEY, x TEXT);
CREATE TABLE x (x INT PRIMARY KEY, x TEXT);
CREATE TABLE x (x INT PRIMARY KEY, x TEXT);
CREATE TABLE x (x INT, x TEXT);
CREATE TABLE x (x INT, x TEXT);
SELECT MIN(x) FROM x;
SELECT MIN(x) FROM x;
CREATE TABLE x (x INT, x TEXT);
CREATE TABLE x (x INT, x TEXT);
CREATE TABLE x (x INT, x TEXT);
CREATE TABLE x (x INT, x TEXT);
CREATE TABLE x (x INT, x TEXT);
CREATE TABLE x (x INT, x TEXT);
CREATE TABLE x (x INT, x TEXT);
CREATE TABLE x (x INT, x INT);
INSERT INTO x SELECT x, x FROM (VALUES (1, 3), (NULL, NULL)) AS x, x;
SELECT x, x, COUNT(*) FROM x GROUP BY x, x ORDER BY x;
SELECT x, x, COUNT(*) FROM x GROUP BY x, x ORDER BY x;
INSERT INTO x SELECT x, x FROM (VALUES (2, 2)) AS x, x;
SELECT x, x, COUNT(*) FROM x GROUP BY x, x ORDER BY x;
SELECT x, x, COUNT(*) FROM x GROUP BY x, x ORDER BY x;
INSERT INTO x SELECT x, x FROM (VALUES (3, 3)) AS x, x;
UPDATE x SET x = 4 WHERE x = 1;
SELECT x, x, COUNT(*) FROM x GROUP BY x, x ORDER BY x;
SELECT x, x, COUNT(*) FROM x GROUP BY x, x ORDER BY x;
UPDATE x SET x = 4, x = 4 WHERE x = 1;
SELECT x, x, COUNT(*) FROM x GROUP BY x, x ORDER BY x;
SELECT x, x, COUNT(*) FROM x GROUP BY x, x ORDER BY x;
UPDATE x SET x = 5, x = 6 WHERE x = 4;
DELETE FROM x WHERE x = 2;
SELECT x, x, COUNT(*) FROM x GROUP BY x, x ORDER BY x;
SELECT x, x, COUNT(*) FROM x GROUP BY x, x ORDER BY x;
UPDATE x SET x = 7 WHERE x = 3;
SELECT x, x, COUNT(*) FROM x GROUP BY x, x ORDER BY x;
SELECT x, x, COUNT(*) FROM x GROUP BY x, x ORDER BY x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (11, 22), (13, 22), (12, 21);
INSERT INTO x VALUES (11, 22), (13, 22), (12, 21);
INSERT INTO x VALUES (11, 22), (13, 22), (12, 21);
DELETE FROM x WHERE x = 12;
SELECT x, x FROM x ORDER BY x;
SELECT x, x FROM x ORDER BY x;
SELECT x, x FROM x ORDER BY x;
CREATE TABLE x (x INT, x TEXT);
INSERT INTO x VALUES (NULL, 'hello'), (13, 'abcdefgh'), (12, NULL);
SELECT x, x FROM x ORDER BY x;
PRAGMA x;
SELECT x, x FROM x ORDER BY x;
SELECT * FROM x WHERE x IS NULL;
UPDATE x SET x = NULL WHERE x IS NULL;
SELECT * FROM x WHERE x IS NULL;
SELECT x, x FROM x ORDER BY x;
SELECT x, x FROM x ORDER BY x;
SELECT x, x FROM x ORDER BY x;
SELECT x, x FROM x ORDER BY x;
SELECT x, x FROM x ORDER BY x;
INSERT INTO x VALUES (12, NULL);
SELECT x, x FROM x ORDER BY x;
SELECT x, x FROM x ORDER BY x;
SELECT x, x FROM x ORDER BY x;
UPDATE x SET x = 'test123' WHERE x = 12;
SELECT x, x FROM x ORDER BY x;
SELECT x, x FROM x ORDER BY x;
UPDATE x SET x = x + 1;
SELECT x, x FROM x ORDER BY x;
SELECT x, x FROM x ORDER BY x;
CREATE TABLE x (x INT);
INSERT INTO x SELECT x FROM x AS x, x AS x;
UPDATE x SET x = 2000 WHERE x = 1;
DELETE FROM x WHERE x = 2 OR x = 17;
SELECT SUM(x), COUNT(x) FROM x;
SELECT COUNT(x) FROM x WHERE x = 0;
SELECT COUNT(x) FROM x WHERE x = 1;
SELECT COUNT(x) FROM x WHERE x = 2;
SELECT COUNT(x) FROM x WHERE x = 17;
SELECT SUM(x), COUNT(x) FROM x;
SELECT COUNT(x) FROM x WHERE x = 0;
SELECT COUNT(x) FROM x WHERE x = 1;
SELECT COUNT(x) FROM x WHERE x = 2;
SELECT COUNT(x) FROM x WHERE x = 17;
CREATE TABLE x (x INT, x INT);
SELECT * FROM x ORDER BY x;
INSERT INTO x VALUES (2, 2);
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
INSERT INTO x VALUES (3, 3);
UPDATE x SET x = 4 WHERE x = 1;
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
UPDATE x SET x = 4, x = 4 WHERE x = 1;
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
UPDATE x SET x = 5, x = 6 WHERE x = 4;
DELETE FROM x WHERE x = 2;
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
UPDATE x SET x = 7 WHERE x = 3;
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
CREATE TABLE x (x INT, x STRUCT(x TEXT[], x TEXT[], x INT[]));
INSERT INTO x SELECT 1, ROW(['a', 'b', 'c', 'd', 'e', 'f'], ['A', 'B'], [1, 5, 9]) FROM x;
CREATE TABLE x (x INT);
INSERT INTO x SELECT * FROM x;
SELECT SUM(x) FROM x;
INSERT INTO x SELECT * FROM x;
SELECT SUM(x) FROM x;
SELECT SUM(x) FROM x;
INSERT INTO x SELECT * FROM x UNION ALL SELECT CAST(CONCAT('hello', x) AS INT) FROM x;
INSERT INTO x SELECT * FROM x UNION ALL SELECT CAST(CONCAT('hello', x) AS INT) FROM x;
CREATE TEMPORARY TABLE x AS SELECT x FROM x;
SELECT x.x - x.x < 20 FROM x, x;
DROP TABLE x;
CREATE TEMPORARY TABLE x AS SELECT * FROM x;
DROP TABLE x;
INSERT INTO x VALUES (42);
CREATE TEMPORARY TABLE x AS SELECT x FROM x;
SELECT x.x - x.x < 20 FROM x, x;
CREATE TABLE x (x INT);
BEGIN;
INSERT INTO x SELECT x FROM x AS x;
COMMIT;
SELECT SUM(x) FROM x;
SELECT SUM(x) FROM x;
BEGIN;
INSERT INTO x SELECT x FROM x AS x;
ROLLBACK;
SELECT SUM(x) FROM x;
SELECT SUM(x) FROM x;
DROP TABLE x;
CREATE TABLE x (x INT);
BEGIN;
INSERT INTO x SELECT x FROM x AS x;
COMMIT;
SELECT SUM(x) FROM x;
SELECT SUM(x) FROM x;
SELECT SUM(x) FROM x;
ATTACH '__TEST_DIR__/optimistic_write_custom_row_group_size.db' AS x (ROW_GROUP_SIZE 204800, STORAGE_VERSION 'v1.2.0');
USE x;
SET x = TRUE;
PRAGMA x;
CREATE OR REPLACE TABLE x (x INT);
INSERT INTO x SELECT * FROM x;
SELECT SUM(x) FROM x;
ATTACH ':memory:' AS x;
USE x;
DETACH attached_db;
ATTACH '__TEST_DIR__/optimistic_write_custom_row_group_size.db' AS x (ROW_GROUP_SIZE 2048);
USE x;
SELECT SUM(x) FROM x;
INSERT INTO x SELECT * FROM x;
SELECT SUM(x) FROM x;
CREATE TABLE x (x TEXT);
BEGIN;
INSERT INTO x SELECT CASE x % 4 WHEN 0 THEN 'a' WHEN 1 THEN 'bb' WHEN 2 THEN 'ccc' ELSE NULL END AS x FROM x AS x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
COMMIT;
SELECT MIN(x), MAX(x), SUM(LENGTH(x)), COUNT(x), COUNT(*) FROM x;
SELECT MIN(x), MAX(x), SUM(LENGTH(x)), COUNT(x), COUNT(*) FROM x;
BEGIN;
INSERT INTO x SELECT * FROM x;
ROLLBACK;
SELECT MIN(x), MAX(x), SUM(LENGTH(x)), COUNT(x), COUNT(*) FROM x;
SELECT MIN(x), MAX(x), SUM(LENGTH(x)), COUNT(x), COUNT(*) FROM x;
CREATE TABLE x (x INT);
BEGIN;
INSERT INTO x SELECT CASE WHEN x % 2 = 0 THEN NULL ELSE x END FROM x AS x;
SELECT SUM(x), COUNT(x), COUNT(*) FROM x;
INSERT INTO x SELECT * FROM x;
SELECT SUM(x), COUNT(x), COUNT(*) FROM x;
INSERT INTO x SELECT * FROM x;
SELECT SUM(x), COUNT(x), COUNT(*) FROM x;
INSERT INTO x SELECT * FROM x;
SELECT SUM(x), COUNT(x), COUNT(*) FROM x;
COMMIT;
SELECT SUM(x), COUNT(x), COUNT(*) FROM x;
SELECT SUM(x), COUNT(x), COUNT(*) FROM x;
BEGIN;
INSERT INTO x SELECT * FROM x;
ROLLBACK;
SELECT SUM(x), COUNT(x), COUNT(*) FROM x;
SELECT SUM(x), COUNT(x), COUNT(*) FROM x;
CREATE TABLE x (x INT);
BEGIN;
INSERT INTO x SELECT * FROM x;
DELETE FROM x WHERE x = 0;
COMMIT;
SELECT SUM(x) FROM x;
SELECT SUM(x) FROM x;
BEGIN;
INSERT INTO x SELECT * FROM x;
DELETE FROM x WHERE x = 1;
ROLLBACK;
SELECT SUM(x) FROM x;
CREATE TABLE x (x DOUBLE);
BEGIN;
INSERT INTO x SELECT RANDOM() FROM x AS x;
DELETE FROM x;
CREATE TABLE x (x INT, x INT, x INT);
BEGIN;
INSERT INTO x SELECT x, x + 1, x + 2 FROM x AS x;
ALTER TABLE x DROP COLUMN x;
COMMIT;
SELECT SUM(x), SUM(x) FROM x;
SELECT SUM(x), SUM(x) FROM x;
BEGIN;
INSERT INTO x SELECT x, x FROM x AS x;
ALTER TABLE x DROP COLUMN x;
ROLLBACK;
SELECT SUM(x), SUM(x) FROM x;
SELECT SUM(x), SUM(x) FROM x;
DROP TABLE x;
CREATE TABLE x (x INT, x INT, x INT);
BEGIN;
INSERT INTO x SELECT x, x + 1, x + 2 FROM x AS x;
ALTER TABLE x DROP COLUMN x;
COMMIT;
SELECT SUM(x), SUM(x) FROM x;
SELECT SUM(x), SUM(x) FROM x;
SELECT SUM(x), SUM(x) FROM x;
CREATE TABLE x (x INT);
BEGIN;
INSERT INTO x SELECT * FROM x;
CREATE INDEX x ON x(x);
SELECT * FROM x WHERE x = 242773;
COMMIT;
SELECT * FROM x WHERE x = 242773;
SELECT SUM(x) FROM x;
SELECT * FROM x WHERE x = 242773;
SELECT SUM(x) FROM x;
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES (NULL);
COPY (SELECT 'hello' AS x FROM x) TO '__TEST_DIR__/small_strings.parquet';
COPY (SELECT REPEAT('X', x) AS x FROM (VALUES (903), (4932)) AS x) TO '__TEST_DIR__/large_strings.parquet';
BEGIN;
INSERT INTO x SELECT * FROM x;
SELECT MAX(STRLEN(x)) FROM x;
DELETE FROM x WHERE x = 'hello';
SELECT MAX(STRLEN(x)) FROM x;
COMMIT;
SELECT STRLEN(x) FROM x;
COPY (SELECT UUID() AS x, CAST(UUID() AS TEXT) AS x, CAST(UUID() AS TEXT) AS x, CAST(UUID() AS TEXT) AS x, CAST(UUID() AS TEXT) AS x, CAST(UUID() AS TEXT) AS x, RANDOM() <= 0.9 AS x FROM x) TO '__TEST_DIR__/external_ids_generated.parquet';
PRAGMA x = 'uncompressed';
SET x = 48;
SET x = FALSE;
SET x = 'uncompressed';
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
INSERT INTO x SELECT * FROM x;
SET x = 'uncompressed';
CREATE TABLE x (x TEXT);
CREATE TABLE x (x TEXT);
CREATE TABLE x (x TEXT);
INSERT INTO x SELECT * FROM x;
CREATE TABLE x (x INT PRIMARY KEY);
BEGIN;
INSERT INTO x SELECT * FROM x;
SELECT * FROM x WHERE x = 242773;
COMMIT;
SELECT * FROM x WHERE x = 242773;
SELECT SUM(x) FROM x;
INSERT INTO x VALUES (42);
SELECT * FROM x WHERE x = 242773;
SELECT SUM(x) FROM x;
INSERT INTO x VALUES (42);
CREATE TABLE x AS SELECT 42 AS x;
SELECT x < 10 FROM x;
CREATE TEMPORARY TABLE x (x INT);
INSERT INTO x SELECT * FROM x;
SELECT x < 10 FROM x;
CREATE TEMPORARY TABLE x (x INT);
INSERT INTO x SELECT * FROM x;
SELECT x < 10 FROM x;
CREATE TABLE x (x INT);
BEGIN;
INSERT INTO x SELECT * FROM x;
UPDATE x SET x = 500000 WHERE x = 0;
COMMIT;
SELECT SUM(x) FROM x;
SELECT SUM(x) FROM x;
BEGIN;
INSERT INTO x SELECT * FROM x;
UPDATE x SET x = 500000 WHERE x = 0;
ROLLBACK;
SELECT SUM(x) FROM x;
CREATE TABLE x (x INT);
SET x = '1GB';
PRAGMA x;
BEGIN;
INSERT INTO x SELECT * FROM x;
UPDATE x SET x = 500000 WHERE x = 0;
COMMIT;
SELECT SUM(x) FROM x;
SELECT SUM(x) FROM x;
BEGIN;
INSERT INTO x SELECT * FROM x;
UPDATE x SET x = 500000 WHERE x = 0;
ROLLBACK;
SELECT SUM(x) FROM x;
SET x = TRUE;
PRAGMA x;
CREATE OR REPLACE TABLE x (x INT, x TEXT DEFAULT CONCAT('longprefix_', CAST(UUID() AS TEXT)));
INSERT INTO x (x) SELECT * FROM x;
INSERT INTO x (x) SELECT * FROM x;
INSERT INTO x (x) SELECT * FROM x;
INSERT INTO x (x) SELECT * FROM x;
INSERT INTO x (x) SELECT * FROM x;
SELECT SUM(x), SUM(STRLEN(x)) FROM x;
SELECT SUM(x), SUM(STRLEN(x)) FROM x;
INSERT INTO x (x) SELECT * FROM x;
SELECT SUM(x), SUM(STRLEN(x)) FROM x;
CREATE TABLE x (x TEXT);
CREATE TABLE x (x TEXT);
INSERT INTO x SELECT REPEAT('X', CASE WHEN x % 17 = 0 THEN 5000 ELSE x % 7 END) AS x FROM x AS x;
SELECT x FROM x WHERE x = 'VARCHAR' AND x <> 'Uncompressed';
SELECT EXISTS(SELECT * FROM x WHERE CONTAINS(x, 'Overflow String'));
SELECT x FROM x;
COPY (SELECT * FROM x) TO '__TEST_DIR__/many_small_batches.parquet' WITH (row_group_size 5000);
CREATE TABLE x AS SELECT * FROM x AS x WHERE (x // 6144) % 3 = 0;
SELECT * FROM x LIMIT 5 OFFSET 500000;
SELECT * FROM x QUALIFY x <= LAG(x) OVER ();
SELECT MAX(x) FROM x;
SELECT MEDIAN(x) > 100000 FROM x;
DROP TABLE x;
COPY (SELECT * FROM x AS x) TO '__TEST_DIR__/mix_batches_small.parquet' WITH (ROW_GROUP_SIZE 5000);
COPY (SELECT * FROM x AS x) TO '__TEST_DIR__/mix_batches_large.parquet' WITH (ROW_GROUP_SIZE 200000);
COPY (SELECT * FROM x AS x) TO '__TEST_DIR__/mix_batches_odd.parquet' WITH (ROW_GROUP_SIZE 999);
COPY (SELECT * FROM x AS x) TO '__TEST_DIR__/mix_batches_odd_again.parquet' WITH (ROW_GROUP_SIZE 99979);
CREATE VIEW x AS SELECT * FROM x;
CREATE VIEW x AS SELECT * FROM x WHERE (x // 10000) % 2 = 0;
CREATE VIEW x AS SELECT * FROM x WHERE (x // 10000) % 2 = 0;
CREATE TABLE x AS SELECT * FROM x;
SELECT COUNT(DISTINCT x) < 20 FROM x;
SELECT SUM(x), MIN(x), MAX(x), COUNT(x), COUNT(*) FROM x;
SELECT SUM(x), MIN(x), MAX(x), COUNT(x), COUNT(*) FROM x;
SELECT * FROM x LIMIT 5 OFFSET 99998;
SELECT * FROM x LIMIT 5 OFFSET 99998;
CREATE TABLE x AS SELECT * FROM x;
SELECT COUNT(DISTINCT x) < 20 FROM x;
SELECT SUM(x), MIN(x), MAX(x), COUNT(x), COUNT(*) FROM x;
SELECT SUM(x), MIN(x), MAX(x), COUNT(x), COUNT(*) FROM x;
SELECT * FROM x LIMIT 5 OFFSET 99998;
SELECT * FROM x LIMIT 5 OFFSET 99998;
CREATE TABLE x AS SELECT * FROM x;
SELECT COUNT(DISTINCT x) < 20 FROM x;
SELECT SUM(x), MIN(x), MAX(x), COUNT(x), COUNT(*) FROM x;
SELECT SUM(x), MIN(x), MAX(x), COUNT(x), COUNT(*) FROM x;
SELECT * FROM x LIMIT 5 OFFSET 9999;
SELECT * FROM x LIMIT 5 OFFSET 9999;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP VIEW IF EXISTS x;
DROP VIEW IF EXISTS x;
CREATE OR REPLACE VIEW x AS SELECT * FROM x UNION ALL SELECT * FROM x UNION ALL SELECT * FROM x UNION ALL SELECT * FROM x;
CREATE OR REPLACE VIEW x AS SELECT * FROM x WHERE (x // 10000) % 2 = 0;
CREATE OR REPLACE VIEW x AS SELECT * FROM x WHERE (x // 10000) % 2 = 0 OR (x > 200000 AND x < 400000) OR (x > 600000 AND x < 800000);
CREATE TABLE x (x INT);
BEGIN;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
COMMIT;
SELECT COUNT(DISTINCT x) < 20 FROM x;
SELECT SUM(x), MIN(x), MAX(x), COUNT(x), COUNT(*) FROM x;
SELECT * FROM x LIMIT 5 OFFSET 99998;
COPY (SELECT * FROM x AS x) TO '__TEST_DIR__/row_group_size_plus_one.parquet' WITH (ROW_GROUP_SIZE 124928);
CREATE VIEW x AS SELECT * FROM x;
CREATE TABLE x AS SELECT * FROM x;
SELECT COUNT(DISTINCT x) < 200 FROM x;
SELECT SUM(x), MIN(x), MAX(x), COUNT(x), COUNT(*) FROM x;
SELECT SUM(x), MIN(x), MAX(x), COUNT(x), COUNT(*) FROM x;
SELECT * FROM x LIMIT 5 OFFSET 99998;
SELECT * FROM x LIMIT 5 OFFSET 9999998;
ATTACH '__TEST_DIR__/custom_row_group_size.db' AS x (ROW_GROUP_SIZE 204800, STORAGE_VERSION 'v1.2.0');
USE x;
COPY (SELECT * FROM x AS x) TO '__TEST_DIR__/mix_batches_small.parquet' WITH (ROW_GROUP_SIZE 5000);
COPY (SELECT * FROM x AS x) TO '__TEST_DIR__/mix_batches_large.parquet' WITH (ROW_GROUP_SIZE 200000);
COPY (SELECT * FROM x AS x) TO '__TEST_DIR__/mix_batches_odd.parquet' WITH (ROW_GROUP_SIZE 999);
COPY (SELECT * FROM x AS x) TO '__TEST_DIR__/mix_batches_odd_again.parquet' WITH (ROW_GROUP_SIZE 99979);
CREATE VIEW x AS SELECT * FROM x;
CREATE VIEW x AS SELECT * FROM x WHERE (x // 10000) % 2 = 0;
CREATE VIEW x AS SELECT * FROM x WHERE (x // 10000) % 2 = 0 OR (x > 200000 AND x < 400000) OR (x > 600000 AND x < 800000);
CREATE TABLE x AS SELECT * FROM x;
SELECT MAX(x) FROM x;
SELECT COUNT(DISTINCT x) < 10 FROM x;
SELECT SUM(x), MIN(x), MAX(x), COUNT(x), COUNT(*) FROM x;
SELECT SUM(x), MIN(x), MAX(x), COUNT(x), COUNT(*) FROM x;
CREATE TABLE x AS SELECT * FROM x;
DELETE FROM x WHERE (x // 10000) % 2 <> 0;
SELECT SUM(x), MIN(x), MAX(x), COUNT(x), COUNT(*) FROM x;
SELECT SUM(x), MIN(x), MAX(x), COUNT(x), COUNT(*) FROM x;
UPDATE x SET x = x + 1 WHERE x % 2 = 0;
SELECT SUM(x), MIN(x), MAX(x), COUNT(x), COUNT(*) FROM x;
CREATE TABLE x AS SELECT * FROM x;
SELECT COUNT(DISTINCT x) < 10 FROM x;
SELECT SUM(x), MIN(x), MAX(x), COUNT(x), COUNT(*) FROM x;
SET x = FALSE;
CREATE TABLE x AS SELECT * FROM x;
SELECT SUM(x), MIN(x), MAX(x), COUNT(x), COUNT(*) FROM x;
ATTACH ':memory:' AS x;
USE x;
DETACH custom_row_group_size;
ATTACH '__TEST_DIR__/custom_row_group_size.db' AS x;
USE x;
SELECT SUM(x), MIN(x), MAX(x), COUNT(x), COUNT(*) FROM x;
SELECT SUM(x), MIN(x), MAX(x), COUNT(x), COUNT(*) FROM x;
SELECT SUM(x), MIN(x), MAX(x), COUNT(x), COUNT(*) FROM x;
ATTACH '__TEST_DIR__/custom_row_group_size_xx.db' AS x (ROW_GROUP_SIZE 0);
ATTACH '__TEST_DIR__/custom_row_group_size_xx.db' AS x (ROW_GROUP_SIZE 77);
CREATE TABLE x AS SELECT CASE WHEN x % 50000 = 0 THEN 1 ELSE 0 END AS x FROM x AS x;
SELECT COUNT(DISTINCT x) < 4 FROM x;
SELECT MEDIAN(x) FROM x;
COPY x TO '__TEST_DIR__/integers.parquet';
CREATE TABLE x AS SELECT * FROM x;
SELECT * FROM x LIMIT 5;
SELECT x, COUNT(*) FROM x GROUP BY ALL ORDER BY ALL;
SELECT COUNT(DISTINCT x) < 5 FROM x;
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
INSERT INTO x SELECT CASE WHEN x % 50000 = 0 THEN 1 ELSE 0 END AS x FROM x AS x;
COMMIT;
SELECT COUNT(DISTINCT x) < 4 FROM x;
SELECT COUNT(*), COUNT(x), SUM(x) FROM x;
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
INSERT INTO x SELECT CASE WHEN x % 50000 = 0 THEN 1 ELSE NULL END AS x FROM x AS x;
INSERT INTO x SELECT CASE WHEN x % 50000 = 0 THEN 1 ELSE NULL END AS x FROM x AS x;
SELECT COUNT(DISTINCT x) < 8 FROM x;
SELECT COUNT(*), COUNT(x), SUM(x) FROM x;
CREATE TABLE x AS SELECT x, x % 2 AS x FROM x AS x;
CREATE TABLE x AS SELECT * FROM x GROUP BY GROUPING SETS ((), (x), (x, x), (x));
SELECT SUM(x), SUM(x), COUNT(*), COUNT(x), COUNT(x) FROM x;
SELECT SUM(x), SUM(x), COUNT(*), COUNT(x), COUNT(x) FROM x;
DROP TABLE x;
DROP TABLE x;
CREATE TABLE x AS SELECT CASE WHEN x % 2 = 0 THEN NULL ELSE x END AS x, x % 2 AS x FROM x AS x;
CREATE TABLE x AS SELECT * FROM x GROUP BY GROUPING SETS ((), (x), (x, x), (x));
SELECT SUM(x), SUM(x), COUNT(*), COUNT(x), COUNT(x) FROM x;
SELECT SUM(x), SUM(x), COUNT(*), COUNT(x), COUNT(x) FROM x;
PRAGMA x = FALSE;
CREATE TABLE x AS SELECT * FROM x AS x;
CREATE TABLE x AS SELECT * FROM x;
SELECT SUM(x) FROM x;
SELECT SUM(x) FROM x;
DROP TABLE x;
DROP TABLE x;
CREATE TABLE x AS SELECT CASE WHEN x % 2 = 0 THEN NULL ELSE x END AS x FROM x AS x;
CREATE TABLE x AS SELECT * FROM x;
SELECT SUM(x) FROM x;
SELECT SUM(x) FROM x;
CREATE TABLE x AS SELECT * FROM x AS x;
CREATE TABLE x AS SELECT * FROM x;
SELECT SUM(x) FROM x;
SELECT SUM(x) FROM x;
SELECT * FROM x LIMIT 5;
SELECT * FROM x LIMIT 5 OFFSET 777778;
DROP TABLE x;
DROP TABLE x;
CREATE TABLE x AS SELECT CASE WHEN x % 2 = 0 THEN NULL ELSE x END AS x FROM x AS x;
CREATE TABLE x AS SELECT * FROM x;
SELECT SUM(x) FROM x;
SELECT SUM(x) FROM x;
SELECT * FROM x LIMIT 5;
SELECT * FROM x LIMIT 5 OFFSET 777778;
CREATE TABLE x AS SELECT * FROM x AS x;
SELECT COUNT(DISTINCT x) < 4 FROM x;
SELECT MEDIAN(x) FROM x;
COPY x TO '__TEST_DIR__/integers.parquet' WITH (ROW_GROUP_SIZE 77777);
CREATE TABLE x AS SELECT * FROM x;
SELECT * FROM x LIMIT 5;
SELECT * FROM x LIMIT 5 OFFSET 773654;
SELECT COUNT(DISTINCT x) < 4 FROM x;
SELECT MEDIAN(x) > 100000 FROM x;
SET x = FALSE;
CREATE TABLE x AS SELECT * FROM x;
SELECT COUNT(DISTINCT x) < 12 FROM x;
SELECT MEDIAN(x) > 100000 FROM x;
CREATE TABLE x AS SELECT * FROM x;
SELECT SUM(x), MIN(x), MAX(x), COUNT(x), COUNT(*) FROM x;
SELECT * FROM x LIMIT 5 OFFSET 99998;
DROP TABLE x;
DROP TABLE x;
CREATE TABLE x AS SELECT * FROM x;
SELECT SUM(x), MIN(x), MAX(x), COUNT(x), COUNT(*) FROM x;
SELECT * FROM x LIMIT 5 OFFSET 99998;
CREATE TABLE x AS SELECT * FROM x;
SELECT SUM(x), MIN(x), MAX(x), COUNT(x), COUNT(*) FROM (SELECT UNNEST(x) AS x FROM x);
SELECT * FROM x LIMIT 5 OFFSET 99998;
DROP TABLE x;
DROP TABLE x;
CREATE TABLE x AS SELECT * FROM x;
SELECT SUM(x), MIN(x), MAX(x), COUNT(x), COUNT(*) FROM (SELECT UNNEST(x) AS x FROM x);
SELECT * FROM x LIMIT 5 OFFSET 99998;
SET x = '300MB';
COPY (SELECT * FROM x AS x) TO '__TEST_DIR__/mixed_batches_1.parquet' WITH (ROW_GROUP_SIZE 5000);
COPY (SELECT * FROM x AS x) TO '__TEST_DIR__/mixed_batches_2.parquet' WITH (ROW_GROUP_SIZE 200000);
COPY (SELECT * FROM x AS x) TO '__TEST_DIR__/mixed_batches_3.parquet' WITH (ROW_GROUP_SIZE 999);
COPY (SELECT * FROM x AS x) TO '__TEST_DIR__/mixed_batches_4.parquet' WITH (ROW_GROUP_SIZE 99979);
COPY (SELECT * FROM x AS x) TO '__TEST_DIR__/mixed_batches_5.parquet' WITH (ROW_GROUP_SIZE 99979);
COPY (SELECT * FROM x AS x) TO '__TEST_DIR__/mixed_batches_6.parquet' WITH (ROW_GROUP_SIZE 33445);
CREATE TABLE x AS SELECT * FROM x;
SELECT SUM(x), MIN(x), MAX(x), COUNT(x), COUNT(*) FROM x;
SELECT * FROM x LIMIT 5 OFFSET 99998;
DROP TABLE x;
COPY (SELECT CASE WHEN x % 2 = 0 THEN NULL ELSE x END AS x FROM x AS x) TO '__TEST_DIR__/mixed_batches_1.parquet' WITH (ROW_GROUP_SIZE 5000);
COPY (SELECT CASE WHEN x % 2 = 0 THEN NULL ELSE x END AS x FROM x AS x) TO '__TEST_DIR__/mixed_batches_2.parquet' WITH (ROW_GROUP_SIZE 200000);
COPY (SELECT CASE WHEN x % 2 = 0 THEN NULL ELSE x END AS x FROM x AS x) TO '__TEST_DIR__/mixed_batches_3.parquet' WITH (ROW_GROUP_SIZE 999);
COPY (SELECT CASE WHEN x % 2 = 0 THEN NULL ELSE x END AS x FROM x AS x) TO '__TEST_DIR__/mixed_batches_4.parquet' WITH (ROW_GROUP_SIZE 99979);
COPY (SELECT CASE WHEN x % 2 = 0 THEN NULL ELSE x END AS x FROM x AS x) TO '__TEST_DIR__/mixed_batches_5.parquet' WITH (ROW_GROUP_SIZE 99979);
COPY (SELECT CASE WHEN x % 2 = 0 THEN NULL ELSE x END AS x FROM x AS x) TO '__TEST_DIR__/mixed_batches_6.parquet' WITH (ROW_GROUP_SIZE 33445);
CREATE TABLE x AS SELECT * FROM x;
SELECT SUM(x), MIN(x), MAX(x), COUNT(x), COUNT(*) FROM x;
SELECT * FROM x LIMIT 5 OFFSET 99998;
CREATE TABLE x AS SELECT * FROM x AS x;
CREATE TABLE x AS SELECT * FROM x WHERE x % 100 = 0;
INSERT INTO x SELECT * FROM x WHERE x % 100 = 0;
SELECT SUM(x) FROM x;
SELECT SUM(x) FROM x;
SELECT COUNT(DISTINCT x) < 20 FROM x;
DROP TABLE x;
CREATE TABLE x AS SELECT * FROM x WHERE x % 100 = 0 OR (x >= 3000000 AND x <= 4000000);
SELECT SUM(x) FROM x;
SELECT COUNT(DISTINCT x) < 20 FROM x;
DROP TABLE x;
COPY (SELECT * FROM x AS x) TO '__TEST_DIR__/integers.parquet' WITH (FORMAT PARQUET, ROW_GROUP_SIZE 200000);
CREATE VIEW x AS SELECT * FROM x;
CREATE TABLE x (x INT PRIMARY KEY);
INSERT INTO x VALUES (9999999);
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
BEGIN;
INSERT INTO x VALUES (9999998);
INSERT INTO x SELECT * FROM x WHERE x <= 9999998;
ROLLBACK;
ROLLBACK;
ROLLBACK;
INSERT INTO x SELECT x FROM x;
INSERT INTO x SELECT x FROM x;
SELECT (MAX(x) - MIN(x)) < 20 FROM x;
SET x = FALSE;
SET x = FALSE;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (9999999);
CREATE UNIQUE INDEX x ON x(x);
CREATE TABLE x AS SELECT x FROM x;
CREATE TABLE x AS SELECT x FROM x;
BEGIN;
INSERT INTO x VALUES (999 AS x);
INSERT INTO x VALUES (999 AS x);
ROLLBACK;
ROLLBACK;
SET x = FALSE;
CREATE TABLE x AS SELECT * FROM x AS x;
CREATE TABLE x (x INT PRIMARY KEY);
INSERT INTO x VALUES (9999999);
INSERT INTO x SELECT * FROM x;
CREATE TABLE x AS SELECT x FROM x;
CREATE TABLE x AS SELECT x FROM x;
INSERT INTO x SELECT * FROM x;
BEGIN;
INSERT INTO x VALUES (9999998);
INSERT INTO x SELECT * FROM x WHERE x <= 9999998;
ROLLBACK;
ROLLBACK;
ROLLBACK;
COPY (SELECT * FROM x AS x) TO '__TEST_DIR__/mix_batches_small.parquet' WITH (ROW_GROUP_SIZE 5000);
COPY (SELECT * FROM x AS x) TO '__TEST_DIR__/mix_batches_large.parquet' WITH (ROW_GROUP_SIZE 200000);
COPY (SELECT * FROM x AS x) TO '__TEST_DIR__/mix_batches_odd.parquet' WITH (ROW_GROUP_SIZE 999);
COPY (SELECT * FROM x AS x) TO '__TEST_DIR__/mix_batches_odd_again.parquet' WITH (ROW_GROUP_SIZE 99979);
CREATE TABLE x (x INT);
BEGIN;
INSERT INTO x SELECT * FROM x;
ROLLBACK;
BEGIN;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
ROLLBACK;
INSERT INTO x SELECT x FROM x;
SELECT (MAX(x) - MIN(x)) < 20 FROM x;
ATTACH '__TEST_DIR__/tiny_row_group_size.db' (ROW_GROUP_SIZE 2048);
USE x;
CREATE TABLE x AS SELECT * FROM x AS x;
SELECT SUM(x), MIN(x), MAX(x), COUNT(x), COUNT(*) FROM x;
SELECT COUNT(DISTINCT x) < 1000, MAX(x) FROM x;
SELECT * FROM x LIMIT 5 OFFSET 77777;
SELECT x, ROW_NUMBER() OVER () FROM x LIMIT 5 OFFSET 777776;
BEGIN;
CREATE TABLE x (x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT);
INSERT INTO x VALUES (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99);
INSERT INTO x VALUES (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100);
INSERT INTO x VALUES (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100);
INSERT INTO x VALUES (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100);
COMMIT;
SELECT x * x < 15 * 262144 FROM x;
BEGIN;
CREATE TABLE x (x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT);
INSERT INTO x VALUES (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99);
INSERT INTO x VALUES (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100);
INSERT INTO x VALUES (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100);
SELECT x * x < 10 * 262144 FROM x;
BEGIN;
CREATE TABLE x (x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT);
INSERT INTO x VALUES (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99);
INSERT INTO x VALUES (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100);
CREATE TABLE x (x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT);
INSERT INTO x VALUES (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99);
INSERT INTO x VALUES (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100);
INSERT INTO x VALUES (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100);
INSERT INTO x VALUES (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100);
INSERT INTO x VALUES (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100);
INSERT INTO x VALUES (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100);
INSERT INTO x VALUES (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100);
INSERT INTO x VALUES (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100);
INSERT INTO x VALUES (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100);
INSERT INTO x VALUES (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100);
BEGIN;
CREATE TABLE x (x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT);
INSERT INTO x VALUES (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99);
INSERT INTO x VALUES (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100);
CREATE TABLE x (x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT);
INSERT INTO x VALUES (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99);
INSERT INTO x VALUES (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100);
COMMIT;
DROP TABLE x;
DROP TABLE x;
SELECT x * x < 15 * 262144 FROM x;
CREATE TABLE x (x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[], x INT[]);
INSERT INTO x VALUES ([0, NULL, 0], [1, NULL, 1], [2, NULL, 2], [3, NULL, 3], [4, NULL, 4], [5, NULL, 5], [6, NULL, 6], [7, NULL, 7], [8, NULL, 8], [9, NULL, 9], [10, NULL, 10], [11, NULL, 11], [12, NULL, 12], [13, NULL, 13], [14, NULL, 14], [15, NULL, 15], [16, NULL, 16], [17, NULL, 17], [18, NULL, 18], [19, NULL, 19], [20, NULL, 20], [21, NULL, 21], [22, NULL, 22], [23, NULL, 23], [24, NULL, 24], [25, NULL, 25], [26, NULL, 26], [27, NULL, 27], [28, NULL, 28], [29, NULL, 29], [30, NULL, 30], [31, NULL, 31], [32, NULL, 32], [33, NULL, 33], [34, NULL, 34], [35, NULL, 35], [36, NULL, 36], [37, NULL, 37], [38, NULL, 38], [39, NULL, 39], [40, NULL, 40], [41, NULL, 41], [42, NULL, 42], [43, NULL, 43], [44, NULL, 44], [45, NULL, 45], [46, NULL, 46], [47, NULL, 47], [48, NULL, 48], [49, NULL, 49], [50, NULL, 50], [51, NULL, 51], [52, NULL, 52], [53, NULL, 53], [54, NULL, 54], [55, NULL, 55], [56, NULL, 56], [57, NULL, 57], [58, NULL, 58], [59, NULL, 59], [60, NULL, 60], [61, NULL, 61], [62, NULL, 62], [63, NULL, 63], [64, NULL, 64], [65, NULL, 65], [66, NULL, 66], [67, NULL, 67], [68, NULL, 68], [69, NULL, 69], [70, NULL, 70], [71, NULL, 71], [72, NULL, 72], [73, NULL, 73], [74, NULL, 74], [75, NULL, 75], [76, NULL, 76], [77, NULL, 77], [78, NULL, 78], [79, NULL, 79], [80, NULL, 80], [81, NULL, 81], [82, NULL, 82], [83, NULL, 83], [84, NULL, 84], [85, NULL, 85], [86, NULL, 86], [87, NULL, 87], [88, NULL, 88], [89, NULL, 89], [90, NULL, 90], [91, NULL, 91], [92, NULL, 92], [93, NULL, 93], [94, NULL, 94], [95, NULL, 95], [96, NULL, 96], [97, NULL, 97], [98, NULL, 98], [99, NULL, 99]);
SELECT x * x < 15 * 262144 FROM x;
INSERT INTO x VALUES ([1, NULL, 1], [2, NULL, 2], [3, NULL, 3], [4, NULL, 4], [5, NULL, 5], [6, NULL, 6], [7, NULL, 7], [8, NULL, 8], [9, NULL, 9], [10, NULL, 10], [11, NULL, 11], [12, NULL, 12], [13, NULL, 13], [14, NULL, 14], [15, NULL, 15], [16, NULL, 16], [17, NULL, 17], [18, NULL, 18], [19, NULL, 19], [20, NULL, 20], [21, NULL, 21], [22, NULL, 22], [23, NULL, 23], [24, NULL, 24], [25, NULL, 25], [26, NULL, 26], [27, NULL, 27], [28, NULL, 28], [29, NULL, 29], [30, NULL, 30], [31, NULL, 31], [32, NULL, 32], [33, NULL, 33], [34, NULL, 34], [35, NULL, 35], [36, NULL, 36], [37, NULL, 37], [38, NULL, 38], [39, NULL, 39], [40, NULL, 40], [41, NULL, 41], [42, NULL, 42], [43, NULL, 43], [44, NULL, 44], [45, NULL, 45], [46, NULL, 46], [47, NULL, 47], [48, NULL, 48], [49, NULL, 49], [50, NULL, 50], [51, NULL, 51], [52, NULL, 52], [53, NULL, 53], [54, NULL, 54], [55, NULL, 55], [56, NULL, 56], [57, NULL, 57], [58, NULL, 58], [59, NULL, 59], [60, NULL, 60], [61, NULL, 61], [62, NULL, 62], [63, NULL, 63], [64, NULL, 64], [65, NULL, 65], [66, NULL, 66], [67, NULL, 67], [68, NULL, 68], [69, NULL, 69], [70, NULL, 70], [71, NULL, 71], [72, NULL, 72], [73, NULL, 73], [74, NULL, 74], [75, NULL, 75], [76, NULL, 76], [77, NULL, 77], [78, NULL, 78], [79, NULL, 79], [80, NULL, 80], [81, NULL, 81], [82, NULL, 82], [83, NULL, 83], [84, NULL, 84], [85, NULL, 85], [86, NULL, 86], [87, NULL, 87], [88, NULL, 88], [89, NULL, 89], [90, NULL, 90], [91, NULL, 91], [92, NULL, 92], [93, NULL, 93], [94, NULL, 94], [95, NULL, 95], [96, NULL, 96], [97, NULL, 97], [98, NULL, 98], [99, NULL, 99], [100, NULL, 100]);
SELECT COUNT(*) FROM x WHERE x IS NULL;
SELECT x FROM x;
SELECT x FROM x;
SELECT x FROM x;
SELECT x FROM x;
SELECT x FROM x;
SELECT x FROM x;
PRAGMA x = 'rle';
CREATE TABLE x (x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT);
INSERT INTO x VALUES (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99);
SELECT x * x < 10 * 262144 FROM x;
SELECT x * x < 10 * 262144 FROM x;
SELECT x * x < 10 * 262144 FROM x;
SELECT x * x < 10 * 262144 FROM x;
SELECT x * x < 10 * 262144 FROM x;
SELECT x * x < 10 * 262144 FROM x;
SELECT x * x < 10 * 262144 FROM x;
CREATE TABLE x (x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT);
INSERT INTO x VALUES (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99);
SELECT x * x < 10 * 262144 FROM x;
INSERT INTO x VALUES (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100);
SELECT COUNT(*) FROM x WHERE x IS NULL;
SELECT x FROM x;
SELECT x FROM x;
SELECT x FROM x;
SELECT x FROM x;
SELECT x FROM x;
SELECT x FROM x;
CREATE TABLE x (x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x TEXT);
INSERT INTO x VALUES (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99);
SELECT x * x < 15 * 262144 FROM x;
SELECT x * x < 15 * 262144 FROM x;
SELECT x * x < 15 * 262144 FROM x;
SELECT x * x < 15 * 262144 FROM x;
SELECT x * x < 15 * 262144 FROM x;
SELECT x * x < 15 * 262144 FROM x;
SELECT x * x < 15 * 262144 FROM x;
CREATE TABLE x (x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT);
INSERT INTO x VALUES (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99);
SELECT x * x < 15 * 262144 FROM x;
INSERT INTO x VALUES (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100);
INSERT INTO x VALUES (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100);
INSERT INTO x VALUES (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100);
INSERT INTO x VALUES (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100);
INSERT INTO x VALUES (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100);
INSERT INTO x VALUES (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100);
SELECT x * x < 15 * 262144 FROM x;
PRAGMA x = 'Uncompressed';
PRAGMA x;
CREATE TABLE x AS SELECT x, REPEAT('X', CASE WHEN x % 17 = 0 THEN 5000 ELSE x % 7 END) AS x FROM x AS x;
SELECT AVG(STRLEN(x)), MIN(STRLEN(x)), MAX(STRLEN(x)), SUM(STRLEN(x)), MIN(x[1]), MAX(x[1]) FROM x;
CREATE TABLE x AS SELECT x FROM x;
CREATE TABLE x AS SELECT x FROM x;
ALTER TABLE x DROP COLUMN x;
ALTER TABLE x ADD COLUMN x TEXT;
UPDATE x SET x = REPEAT('X', CASE WHEN x % 17 = 0 THEN 5000 ELSE x % 7 END);
SELECT AVG(STRLEN(x)), MIN(STRLEN(x)), MAX(STRLEN(x)), SUM(STRLEN(x)), MIN(x[1]), MAX(x[1]) FROM x;
SELECT AVG(STRLEN(x)), MIN(STRLEN(x)), MAX(STRLEN(x)), SUM(STRLEN(x)), MIN(x[1]), MAX(x[1]) FROM x;
PRAGMA x = 'Uncompressed';
PRAGMA x;
CREATE TABLE x AS SELECT REPEAT('X', CASE WHEN x % 17 = 0 THEN 5000 ELSE x % 7 END) AS x FROM x AS x;
SELECT AVG(STRLEN(x)), MIN(STRLEN(x)), MAX(STRLEN(x)), SUM(STRLEN(x)), MIN(x[1]), MAX(x[1]) FROM x;
CREATE TABLE x AS SELECT x FROM x;
CREATE TABLE x AS SELECT x FROM x;
DROP TABLE x;
CREATE TABLE x AS SELECT REPEAT('X', CASE WHEN x % 17 = 0 THEN 5000 ELSE x % 7 END) AS x FROM x AS x;
SELECT AVG(STRLEN(x)), MIN(STRLEN(x)), MAX(STRLEN(x)), SUM(STRLEN(x)), MIN(x[1]), MAX(x[1]) FROM x;
SELECT AVG(STRLEN(x)), MIN(STRLEN(x)), MAX(STRLEN(x)), SUM(STRLEN(x)), MIN(x[1]), MAX(x[1]) FROM x;
PRAGMA x;
SET x = 'uncompressed';
CREATE TABLE x AS SELECT [x] AS x FROM x AS x;
SELECT MIN(x[1]), MAX(x[1]), COUNT(*) FROM x;
SELECT MIN(x[1]), MAX(x[1]), COUNT(*) FROM x;
PRAGMA x;
CREATE TABLE x AS SELECT x FROM x AS x;
SELECT MIN(x), MAX(x), COUNT(*) FROM x;
SELECT MIN(x), MAX(x), COUNT(*) FROM x;
ALTER TABLE x ALTER COLUMN x SET DATA TYPE BIGINT;
SELECT MIN(x), MAX(x), COUNT(*) FROM x;
ALTER TABLE x ALTER COLUMN x SET DATA TYPE INT;
SELECT MIN(x), MAX(x), COUNT(*) FROM x;
SELECT MIN(x), MAX(x), COUNT(*) FROM x;
PRAGMA x;
CREATE TABLE x AS SELECT x FROM x AS x;
SELECT MIN(x), MAX(x), COUNT(*) FROM x;
DROP TABLE x;
CREATE TABLE x AS SELECT x FROM x AS x;
SELECT MIN(x), MAX(x), COUNT(*) FROM x;
SELECT ROUND(x / 100.0) FROM x;
SELECT MIN(x), MAX(x), COUNT(*) FROM x;
PRAGMA x;
CREATE TABLE x AS SELECT x, x AS x FROM x AS x;
SELECT MIN(x), MAX(x), COUNT(*) FROM x;
SELECT MIN(x), MAX(x), COUNT(*) FROM x;
ALTER TABLE x DROP COLUMN x;
ALTER TABLE x ADD COLUMN x INT;
UPDATE x SET x = x;
SELECT MIN(x), MAX(x), COUNT(*) FROM x;
SELECT MIN(x), MAX(x), COUNT(*) FROM x;
PRAGMA x;
CREATE TABLE x AS SELECT x FROM x AS x;
SELECT MIN(x), MAX(x), COUNT(*) FROM x;
SELECT MIN(x), MAX(x), COUNT(*) FROM x;
UPDATE x SET x = x;
SELECT MIN(x), MAX(x), COUNT(*) FROM x;
UPDATE x SET x = x;
SELECT MIN(x), MAX(x), COUNT(*) FROM x;
SELECT MIN(x), MAX(x), COUNT(*) FROM x;
PRAGMA x;
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES (REPEAT('a', 1000000));
SELECT LENGTH(SUBSTRING(x, 0, 1000000)) FROM x;
SELECT LENGTH(SUBSTRING(x, 0, 1000000)) FROM x;
UPDATE x SET x = CONCAT(x, 'a');
SELECT LENGTH(SUBSTRING(x, 0, 1000000)) FROM x;
SELECT x FROM x;
SELECT LENGTH(SUBSTRING(x, 0, 1000000)) FROM x;
SET x = '__TEST_DIR__/max_swap_space_reached';
PRAGMA x = '1024KiB';
SET x = '0KiB';
CREATE OR REPLACE TABLE x AS SELECT RANDOM() FROM x;
SELECT "x" FROM x;
SET x = '256KiB';
CREATE OR REPLACE TABLE x AS SELECT RANDOM() FROM x;
CREATE OR REPLACE TABLE x AS SELECT RANDOM() FROM x;
SELECT "x" FROM x;
SET x = '4MB';
PRAGMA x = 2;
SET x = TRUE;
CREATE OR REPLACE TABLE x AS SELECT RANDOM() FROM x;
CREATE OR REPLACE TABLE x AS SELECT * FROM x;
SELECT CASE WHEN SUM("x") > 1000000 THEN TRUE ELSE CAST(CONCAT('Expected size 1000000, but got ', SUM("x")) AS UNION(x TEXT, x BOOLEAN)) END FROM x;
SET x = '256KiB';
SET x = '256KiB';
SELECT CURRENT_SETTING('max_temp_directory_size');
SET x = '2550KiB';
SELECT CURRENT_SETTING('max_temp_directory_size');
PRAGMA x = '2MB';
SET x = '15gb';
SET x = '__TEST_DIR__/this_directory_should_not_exist__swap_space';
SELECT CURRENT_SETTING('max_temp_directory_size');
CREATE TABLE x AS SELECT * FROM x;
SELECT CURRENT_SETTING('max_temp_directory_size');
SET x = '';
PRAGMA x = '2MB';
SELECT CURRENT_SETTING('max_temp_directory_size');
SET x = '15gb';
SELECT CURRENT_SETTING('max_temp_directory_size') AS x WHERE x = '0 bytes';
SELECT CURRENT_SETTING('max_temp_directory_size');
SET x = '__TEST_DIR__';
SELECT CURRENT_SETTING('max_temp_directory_size');
SET x = '15gb';
SELECT CURRENT_SETTING('max_temp_directory_size') AS x WHERE x = '0 bytes';
SELECT CURRENT_SETTING('max_temp_directory_size');
SET x = '__TEST_DIR__/does_not_exist3';
SELECT CURRENT_SETTING('max_temp_directory_size');
SET x = '__TEST_DIR__';
SELECT CURRENT_SETTING('max_temp_directory_size');
SELECT CURRENT_SETTING('max_temp_directory_size');
SET x = '__TEST_DIR__/does_not_exist4';
SELECT CURRENT_SETTING('max_temp_directory_size');
CREATE TABLE x AS SELECT * FROM x;
SELECT CURRENT_SETTING('max_temp_directory_size') AS x WHERE x = '0 bytes';
SELECT CURRENT_SETTING('temp_directory').split('/')[-1];
SET x = '';
PRAGMA x = '2MB';
SELECT CURRENT_SETTING('max_temp_directory_size');
SET x = '15GB';
SELECT CURRENT_SETTING('max_temp_directory_size') AS x WHERE x = '0 bytes';
SELECT CURRENT_SETTING('max_temp_directory_size');
SET x = '__TEST_DIR__';
SELECT CURRENT_SETTING('max_temp_directory_size');
SET x = '15GB';
SELECT CURRENT_SETTING('max_temp_directory_size') AS x WHERE x = '0 bytes';
SELECT CURRENT_SETTING('max_temp_directory_size');
SET x = '__TEST_DIR__/does_not_exist5';
SELECT CURRENT_SETTING('max_temp_directory_size');
SET x = '__TEST_DIR__';
SELECT CURRENT_SETTING('max_temp_directory_size');
SELECT CURRENT_SETTING('max_temp_directory_size');
SET x = '__TEST_DIR__/does_not_exist6';
SELECT CURRENT_SETTING('max_temp_directory_size');
CREATE TABLE x AS SELECT * FROM x;
SELECT CURRENT_SETTING('max_temp_directory_size') AS x WHERE x = '0 bytes';
SET x = '__TEST_DIR__/max_swap_space_reached';
PRAGMA x = '-1';
SELECT CURRENT_SETTING('max_temp_directory_size');
SET x = '1GB';
SET x = '1GB';
SELECT * FROM x ORDER BY x;
SET x = '__TEST_DIR__/test_temp_dir';
SET x = '8MB';
SET x = FALSE;
SET x = '__TEST_DIR__/new_temp_dir';
SET x = '';
SELECT x FROM x WHERE x = 'temp_directory';
SET x = NULL;
SELECT x FROM x WHERE x = 'temp_directory';
PRAGMA x = '${compression}';
PRAGMA x = '${compression}';
SELECT MIN(x), MAX(x), AVG(x), COUNT(x) FROM x;
SELECT MIN(x), MAX(x), AVG(x), COUNT(x) FROM x;
SELECT MIN(x), MAX(x), AVG(x), COUNT(x) FROM x;
SELECT MIN(x), MAX(x), AVG(x), COUNT(x) FROM x;
SELECT MIN(x), MAX(x), AVG(x), COUNT(x) FROM x;
SELECT MIN(x), MAX(x), AVG(x), COUNT(x) FROM x;
SELECT MIN(x), MAX(x), AVG(x), COUNT(x) FROM x;
SELECT MIN(x), MAX(x), AVG(x), COUNT(x) FROM x;
SELECT MIN(x), MAX(x), COUNT(x) FROM x;
SELECT MIN(x), MAX(x), COUNT(x) FROM x;
SELECT MIN(x), MAX(x), COUNT(x) FROM x;
SELECT MIN(x), MAX(x), COUNT(x) FROM x;
SELECT MIN(x), MAX(x), COUNT(x) FROM x;
SELECT MIN(x), MAX(x), COUNT(x) FROM x;
SELECT MIN(x), MAX(x), COUNT(x) FROM x;
SELECT MIN(x), MAX(x), COUNT(x) FROM x;
SELECT MIN(x), MAX(x), AVG(x), COUNT(x) FROM x;
SELECT MIN(x), MAX(x), COUNT(x) FROM x;
SELECT MIN(x), MAX(x), COUNT(x) FROM x;
SELECT MIN(x), MAX(x), COUNT(x) FROM x;
SELECT MIN(x), MAX(x), COUNT(x) FROM x;
SELECT MIN(x), MAX(x), AVG(x), COUNT(x) FROM x;
SELECT MIN(x), MAX(x), COUNT(x) FROM x;
SELECT MIN(x), MAX(x), AVG(x), COUNT(x) FROM x;
SELECT MIN(x), MAX(x), COUNT(x) FROM x;
SELECT MIN(x), MAX(x), COUNT(x) FROM x;
SELECT MIN(x), MAX(x), COUNT(x) FROM x;
CREATE TABLE x (x BIT);
CREATE TABLE x (x BIT);
SELECT * FROM x;
CREATE TABLE x (x BLOB);
CREATE TABLE x (x BLOB);
SELECT * FROM x;
CREATE TABLE x (x INT128);
CREATE TABLE x (x INT128);
SELECT * FROM x;
SELECT * FROM x WHERE x = 42;
SELECT x FROM x WHERE x < 10 ORDER BY 1;
CREATE TABLE x (x INTERVAL);
CREATE TABLE x (x INTERVAL);
SELECT * FROM x;
SELECT x FROM x WHERE x = INTERVAL '1' DAY;
SELECT x FROM x WHERE x >= INTERVAL '1' DAY ORDER BY 1;
SELECT x FROM x WHERE x > INTERVAL '10' YEAR ORDER BY 1;
CREATE TABLE x (x TIMESTAMP_S, x TIMESTAMP_MS, x TIMESTAMP, x TIMESTAMP_NS);
INSERT INTO x VALUES (NULL, NULL, NULL, NULL);
INSERT INTO x VALUES ('2008-01-01 00:00:01', '2008-01-01 00:00:01.594', '2008-01-01 00:00:01.88926', '2008-01-01 00:00:01.889268321');
INSERT INTO x VALUES ('2008-01-01 00:00:51', '2008-01-01 00:00:01.894', '2008-01-01 00:00:01.99926', '2008-01-01 00:00:01.999268321');
INSERT INTO x VALUES ('2008-01-01 00:00:51', '2008-01-01 00:00:01.894', '2008-01-01 00:00:01.99926', '2008-01-01 00:00:01.999268321');
SELECT * FROM x ORDER BY x;
SELECT * FROM x WHERE x = CAST('2008-01-01 00:00:01.88926' AS TIMESTAMP) ORDER BY x;
SELECT * FROM x WHERE x = CAST('2020-01-01 00:00:01.88926' AS TIMESTAMP) ORDER BY x;
CREATE TABLE x (x UINT128);
CREATE TABLE x (x UINT128);
SELECT * FROM x;
SELECT * FROM x WHERE x = 42;
SELECT x FROM x WHERE x < 10 ORDER BY 1;
CREATE TABLE x (x UTINYINT, x USMALLINT, x UINTEGER, x UBIGINT);
CREATE TABLE x (x UTINYINT, x USMALLINT, x UINTEGER, x UBIGINT);
SELECT * FROM x;
SELECT * FROM x WHERE x = 42;
SELECT x FROM x WHERE x < 10 ORDER BY 1;
SELECT * FROM x WHERE x = 42;
SELECT x FROM x WHERE x < 10 ORDER BY 1;
SELECT * FROM x WHERE x = 42;
SELECT x FROM x WHERE x < 10 ORDER BY 1;
SELECT * FROM x WHERE x = 42;
SELECT x FROM x WHERE x < 10 ORDER BY 1;
UPDATE x SET x = 10, x = 9, x = 8, x = 7 WHERE x = 1;
SELECT * FROM x;
SELECT * FROM x;
CREATE TABLE x (x UUID);
CREATE TABLE x (x UUID);
SELECT * FROM x;
SELECT * FROM x WHERE x = 'A0EEBC99-9C0B-4EF8-BB6D-6BB9BD380A11';
SELECT * FROM x WHERE x = 'a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11';
SELECT x FROM x WHERE x > '10203040-5060-7080-0102-030405060708' ORDER BY 1;
CREATE TABLE x (x INT[] DEFAULT ([1, 2, 3]));
INSERT INTO x VALUES (DEFAULT);
SELECT * FROM x;
INSERT INTO x VALUES (DEFAULT);
SELECT * FROM x;
CREATE TABLE x (x INT, x REAL[], x REAL[3]);
INSERT INTO x (x) VALUES (42);
SELECT * FROM x;
DROP TABLE x;
PRAGMA x = '${compression}';
CREATE TABLE x AS SELECT x AS x, [1, 2, 3] AS x FROM x AS x;
CREATE TABLE x AS SELECT x AS x, CASE WHEN x % 2 = 0 THEN NULL ELSE [1, 2, 3] END AS x FROM x AS x;
CREATE TABLE x AS SELECT x AS x, CASE WHEN x % 2 = 0 THEN [] ELSE [1, 2, 3] END AS x FROM x AS x;
SELECT MIN(x), MAX(x), SUM(x), COUNT(*) FROM (SELECT UNNEST(x) FROM x) AS x;
SELECT MIN(x), MAX(x), SUM(x), COUNT(*) FROM (SELECT UNNEST(x) FROM x) AS x;
SELECT MIN(x), MAX(x), SUM(x), COUNT(*) FROM (SELECT UNNEST(x) FROM x) AS x;
SELECT MIN(x), MAX(x), SUM(x), COUNT(*) FROM (SELECT UNNEST(x) FROM x) AS x;
SELECT MIN(x), MAX(x), SUM(x), COUNT(*) FROM (SELECT UNNEST(x) FROM x WHERE x >= 500000) AS x;
SELECT MIN(x), MAX(x), SUM(x), COUNT(*) FROM (SELECT UNNEST(x) FROM x) AS x;
SELECT MIN(x), MAX(x), SUM(x), COUNT(*) FROM (SELECT UNNEST(x) FROM x WHERE x >= 500000) AS x;
SELECT MIN(x), MAX(x), SUM(x), COUNT(*) FROM (SELECT UNNEST(x) FROM x) AS x;
SELECT MIN(x), MAX(x), SUM(x), COUNT(*) FROM (SELECT UNNEST(x) FROM x WHERE x >= 500000) AS x;
SELECT DISTINCT x FROM x ORDER BY ALL;
DROP TABLE x;
DROP TABLE x;
PRAGMA x = '${compression}';
CREATE TABLE x (x INT PRIMARY KEY, x INT[]);
SELECT * FROM x WHERE x = 1;
INSERT INTO x VALUES (2, NULL);
INSERT INTO x VALUES (3, [NULL]);
INSERT INTO x VALUES (4, [4, 5, NULL, 6]);
SELECT * FROM x WHERE x = 2;
SELECT * FROM x WHERE x = 3;
SELECT * FROM x WHERE x = 4;
DROP TABLE x;
CREATE TABLE x (x INT, x INT[]);
INSERT INTO x VALUES (1, [1, 2, 3]);
INSERT INTO x VALUES (2, NULL);
INSERT INTO x VALUES (3, [NULL]);
INSERT INTO x VALUES (4, [4, 5, NULL, 6]);
CREATE INDEX x ON x(x);
SELECT * FROM x WHERE x = 1;
SELECT * FROM x WHERE x = 2;
SELECT * FROM x WHERE x = 3;
SELECT * FROM x WHERE x = 4;
INSERT INTO x VALUES (1, [4, 5, NULL]);
INSERT INTO x VALUES (1, NULL);
INSERT INTO x VALUES (1, [NULL]);
INSERT INTO x VALUES (1, [7, 8, 9, 10, 11, 12, 13, 14, 15]);
SELECT * FROM x WHERE x = 1 ORDER BY x[1] NULLS FIRST;
CREATE TABLE x (x INT[]);
SELECT * FROM x;
INSERT INTO x VALUES ([1, 2]), (NULL), ([3, 4, 5, 6]), ([NULL, 7]);
SELECT * FROM x;
SELECT * FROM x;
DELETE FROM x WHERE x[1] = 1;
SELECT * FROM x;
SELECT * FROM x;
CREATE TABLE x (x INT[][]);
INSERT INTO x VALUES ([[1, 2], [3, 4]]), (NULL), ([NULL, [7, 8, NULL], [2, 3]]), ([[NULL, 6], NULL, [1, 2, NULL]]);
SELECT * FROM x;
SELECT * FROM x;
DELETE FROM x WHERE x[1][1] = 1;
SELECT * FROM x;
SELECT * FROM x;
CREATE TABLE x (x TEXT[]);
INSERT INTO x VALUES (['hello', 'world']), (NULL), (['fejwfoaejwfoijwafew', 'b', 'c']), ([NULL, 'XXXXXXXXXXXXXXXXXXXXXXXX']);
SELECT * FROM x;
SELECT * FROM x;
CREATE TABLE x (x MAP(INT, INT));
INSERT INTO x VALUES (MAP([1], [2])), (MAP([1, 2, 3], [4, 5, 6]));
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x = '${compression}';
CREATE TABLE x AS SELECT {'x': {'x': 'hello', 'x': 3}, 'x': {'x': 'world', 'x': 17, 'x': NULL}} AS x;
SELECT * FROM x;
SELECT x['r1']['a'] FROM x;
PRAGMA x = '${compression}';
SELECT * FROM x;
SELECT x['r1']['a'] FROM x;
UPDATE x SET x = {'x': {'x': 'blabla', 'x': 3}, 'x': {'x': 'world', 'x': 18, 'x': NULL}};
SELECT * FROM x;
SELECT x['r1']['a'] FROM x;
PRAGMA x = '${compression}';
SELECT * FROM x;
SELECT x['r1']['a'] FROM x;
INSERT INTO x VALUES ({'x': {'x': NULL, 'x': 3}, 'x': {'x': NULL, 'x': 17, 'x': NULL}});
SELECT * FROM x;
INSERT INTO x VALUES ({'x': NULL, 'x': {'x': NULL, 'x': 17, 'x': NULL}});
SELECT * FROM x;
INSERT INTO x VALUES ({'x': NULL, 'x': NULL});
SELECT * FROM x;
INSERT INTO x VALUES (NULL);
SELECT * FROM x;
PRAGMA x = '${compression}';
SELECT * FROM x;
SELECT x, x FROM x WHERE x LIKE '%[Min: -2147483648, Max: -2147483648]%';
CREATE TABLE x AS SELECT -x - 1 AS x, {'x': -x - 1, 'x': CAST(x AS TEXT)} AS x FROM x AS x;
INSERT INTO x SELECT x AS x, {'x': x, 'x': CAST(x AS TEXT)} AS x FROM x AS x;
SELECT COUNT(*), COUNT(x['i']), COUNT(x['j']) FROM x;
SELECT COUNT(*) FROM x WHERE x['i'] >= 0;
SELECT x, x FROM x WHERE x LIKE '%[Min: -2147483648, Max: -2147483648]%';
UPDATE x SET x = NULL, x = {'x': NULL, 'x': CAST(x['i'] AS TEXT)} WHERE x['i'] >= 0 AND x['i'] % 4 = 0;
SELECT x, x FROM x WHERE x LIKE '%[Min: -2147483648, Max: -2147483648]%';
UPDATE x SET x = {'x': x['i'], 'x': NULL} WHERE x['i'] >= 0 AND x['i'] % 4 = 1;
SELECT x, x FROM x WHERE x LIKE '%[Min: -2147483648, Max: -2147483648]%';
UPDATE x SET x = NULL, x = {'x': NULL, 'x': NULL} WHERE x['i'] >= 0 AND x['i'] % 4 = 2;
SELECT x, x FROM x WHERE x LIKE '%[Min: -2147483648, Max: -2147483648]%';
UPDATE x SET x = NULL, x = NULL WHERE x['i'] >= 0 AND x['i'] % 4 = 3;
SELECT x, x FROM x WHERE x LIKE '%[Min: -2147483648, Max: -2147483648]%';
SELECT COUNT(*) FROM x WHERE x IS NULL;
SELECT COUNT(*) FROM x WHERE x['i'] IS NULL;
SELECT COUNT(*) FROM x WHERE x['j'] IS NULL;
SELECT COUNT(x['j']) FROM x WHERE (x['i'] >= 0 OR x['i'] IS NULL);
SELECT SUM(x) FROM x WHERE x >= 0;
SELECT SUM(x['i']) FROM x WHERE x['i'] >= 0;
SELECT SUM(x) FROM x;
SELECT SUM(x['i']) FROM x;
SELECT COUNT(x['j']), MIN(x['j']), MAX(x['j']) FROM x WHERE (x['i'] >= 0 OR x['i'] IS NULL);
PRAGMA x;
CREATE TABLE x AS SELECT {'x': x, 'x': CAST(x AS TEXT)} AS x FROM x AS x;
SELECT MIN(x['i']), MAX(x['i']), COUNT(*) FROM x;
SELECT MIN(x['i']), MAX(x['i']), COUNT(*) FROM x;
DROP TABLE x;
CREATE TABLE x AS SELECT {'x': x, 'x': CAST(x AS TEXT)} AS x FROM x AS x;
SELECT MIN(x['i']), MAX(x['i']), COUNT(*) FROM x;
SELECT MIN(x['i']), MAX(x['i']), COUNT(*) FROM x;
CREATE TABLE x (x STRUCT(x INT, x INT));
INSERT INTO x VALUES ({'x': 1, 'x': 2}), (NULL), ({'x': NULL, 'x': 2}), (ROW(1, NULL));
SELECT * FROM x;
SELECT COUNT(*) FROM x WHERE x IS NULL;
SELECT * FROM x;
SELECT COUNT(*) FROM x WHERE x IS NULL;
DELETE FROM x WHERE (x).x = 1;
SELECT * FROM x;
SELECT * FROM x;
SELECT COUNT(*) FROM x WHERE x IS NULL;
UPDATE x SET x = {'x': 7, 'x': 9} WHERE x IS NULL;
SELECT * FROM x;
SELECT COUNT(*) FROM x WHERE x IS NULL;
SELECT * FROM x;
SELECT COUNT(*) FROM x WHERE x IS NULL;
PRAGMA x;
PRAGMA x = '1TB';
CREATE TABLE x (x STRUCT(x INT, x INT));
INSERT INTO x VALUES ({'x': 1, 'x': 2}), (NULL), ({'x': NULL, 'x': 2}), (ROW(1, NULL));
SELECT * FROM x;
SELECT COUNT(*) FROM x WHERE x IS NULL;
PRAGMA x;
PRAGMA x = '1TB';
SELECT * FROM x;
SELECT COUNT(*) FROM x WHERE x IS NULL;
DELETE FROM x WHERE (x).x = 1;
SELECT * FROM x;
PRAGMA x;
PRAGMA x = '1TB';
SELECT * FROM x;
SELECT COUNT(*) FROM x WHERE x IS NULL;
UPDATE x SET x = {'x': 7, 'x': 9} WHERE x IS NULL;
SELECT * FROM x;
SELECT COUNT(*) FROM x WHERE x IS NULL;
SELECT * FROM x;
SELECT COUNT(*) FROM x WHERE x IS NULL;
SET x = 'dictionary';
CREATE OR REPLACE TABLE x AS SELECT CASE WHEN x % 10 = 0 THEN CAST(UUID() AS TEXT) ELSE 'N/A' END AS x FROM x AS x;
UPDATE x SET x = NULL WHERE x = 'N/A';
SELECT COUNT(*) FROM x WHERE x = 'N/A';
CREATE TABLE x AS SELECT * FROM x AS x;
SET x = 1;
SET x = '8MB';
SELECT COUNT(*), SUM(x) FROM x;
UPDATE x SET x = x + 1;
SELECT COUNT(*), SUM(x) FROM x;
UPDATE x SET x = x + 1 WHERE x % 2 = 0;
SELECT COUNT(*), SUM(x) FROM x;
BEGIN;
UPDATE x SET x = x + 1;
SET x = 1;
CREATE TABLE x AS SELECT * FROM x AS x;
SET x = '16MB';
BEGIN;
SELECT COUNT(*), SUM(x) FROM x;
UPDATE x SET x = x + 1;
SELECT COUNT(*), SUM(x) FROM x;
SELECT COUNT(*), SUM(x) FROM x;
UPDATE x SET x = x + 1 WHERE x % 2 = 0;
SELECT COUNT(*), SUM(x) FROM x;
SELECT COUNT(*), SUM(x) FROM x;
BEGIN;
CREATE TABLE x AS SELECT * FROM x AS x;
SELECT SUM(x) FROM x;
UPDATE x SET x = x + 1;
SELECT SUM(x) FROM x;
UPDATE x SET x = x + 1;
SELECT SUM(x) FROM x;
UPDATE x SET x = x + 1;
SELECT SUM(x) FROM x;
UPDATE x SET x = x + 1;
SELECT SUM(x) FROM x;
UPDATE x SET x = x + 1;
SELECT SUM(x) FROM x;
UPDATE x SET x = x + 1;
SELECT SUM(x) FROM x;
UPDATE x SET x = x + 1;
SELECT SUM(x) FROM x;
UPDATE x SET x = x + 1;
SELECT SUM(x) FROM x;
UPDATE x SET x = x + 1;
SELECT SUM(x) FROM x;
UPDATE x SET x = x + 1;
SELECT SUM(x) FROM x;
COMMIT;
SELECT SUM(x) FROM x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (11, 22), (NULL, 22), (12, 21);
UPDATE x SET x = x + 1 WHERE x = 11;
SELECT x, x FROM x ORDER BY x;
UPDATE x SET x = x + 1 WHERE x = 11;
SELECT x, x FROM x ORDER BY x;
UPDATE x SET x = NULL WHERE x = 11;
SELECT x, x FROM x ORDER BY x;
SELECT x, x FROM x ORDER BY x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (11, 22), (13, 22), (12, 21);
UPDATE x SET x = x + 1 WHERE x = 11;
SELECT x, x FROM x ORDER BY x;
UPDATE x SET x = x + 1 WHERE x = 11;
SELECT x, x FROM x ORDER BY x;
SELECT x, x FROM x ORDER BY x;
CREATE TABLE x (x INT);
INSERT INTO x SELECT * FROM x;
DELETE FROM x WHERE x > 738645 AND x < 978908;
SELECT COUNT(*), SUM(x) FROM x;
DELETE FROM x WHERE x > 282475 AND x < 522738;
SELECT COUNT(*), SUM(x) FROM x;
INSERT INTO x SELECT * FROM x;
SELECT COUNT(*), SUM(x) FROM x;
SELECT COUNT(*), SUM(x) FROM x;
SELECT COUNT(*), SUM(x) FROM x;
CREATE TABLE x (x TEXT);
CREATE TABLE x (x TEXT);
DROP TABLE IF EXISTS x;
INSERT INTO x SELECT CAST(UUID() AS TEXT) FROM x;
DELETE FROM x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3);
SELECT * FROM x;
SELECT * FROM x;
DELETE FROM x;
INSERT INTO x SELECT * FROM x;
SELECT SUM(x) FROM x;
SELECT SUM(x) FROM x;
CREATE TABLE x (x INT PRIMARY KEY);
INSERT INTO x SELECT * FROM x;
DELETE FROM x WHERE x < 500000;
SELECT * FROM x WHERE x = 600000;
CREATE TABLE x (x INT);
INSERT INTO x SELECT * FROM x;
SET x = 99;
SELECT SUM(x) FROM x WHERE x % 2 <> 0;
SELECT COUNT(DISTINCT x) > 6 AND COUNT(DISTINCT x) <= 10 FROM x;
DELETE FROM x WHERE x % 2 = 0;
SELECT SUM(x) FROM x;
SELECT COUNT(DISTINCT x) > 3 AND COUNT(DISTINCT x) <= 6 FROM x;
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
INSERT INTO x SELECT * FROM x;
SELECT SUM(x) FROM x;
DELETE FROM x WHERE x % 2 = 0;
DELETE FROM x WHERE x % 2 <> 0;
SELECT SUM(x) FROM x;
SELECT SUM(x) FROM x;
CREATE TABLE x (x INT);
INSERT INTO x SELECT * FROM x;
SELECT SUM(x) FROM x WHERE x % 3 <> 0;
SELECT COUNT(DISTINCT x) > 6 AND COUNT(DISTINCT x) <= 10 FROM x;
DELETE FROM x WHERE x % 3 = 0;
SELECT SUM(x) FROM x;
SELECT COUNT(DISTINCT x) > 4 AND COUNT(DISTINCT x) <= 7 FROM x;
CREATE TABLE x (x INT);
INSERT INTO x SELECT * FROM x;
SELECT COUNT(DISTINCT x) > 6 AND COUNT(DISTINCT x) <= 10 FROM x;
DELETE FROM x WHERE x % 2 AND x < 157353;
SELECT COUNT(*), SUM(x), MIN(x), MAX(x) FROM x;
DELETE FROM x WHERE x >= 157353 AND x < 433427;
SELECT COUNT(*), SUM(x), MIN(x), MAX(x) FROM x;
DELETE FROM x WHERE (x // 4973) % 2 = 0 AND x >= 433427 AND x < 512933;
SELECT COUNT(*), SUM(x), MIN(x), MAX(x) FROM x;
DELETE FROM x WHERE x % 7 = 0 AND x >= 512933 AND x < 721377;
SELECT COUNT(*), SUM(x), MIN(x), MAX(x) FROM x;
DELETE FROM x WHERE CAST(HASH(x) AS DOUBLE) % 3 = 0 AND x >= 721377 AND x < 909999;
SELECT COUNT(*), SUM(x), MIN(x), MAX(x) FROM x;
DELETE FROM x WHERE CAST(HASH(x) AS DOUBLE) % 2 = 0 AND x >= 909999;
SELECT COUNT(*), SUM(x), MIN(x), MAX(x) FROM x;
SELECT COUNT(*), SUM(x), MIN(x), MAX(x) FROM x;
SELECT COUNT(DISTINCT x) >= 4 AND COUNT(DISTINCT x) <= 7 FROM x;
SELECT COUNT(*), SUM(x) FROM x;
PRAGMA x;
PRAGMA x = '1TB';
CREATE TABLE x (x BLOB);
CREATE TABLE x (x BLOB);
PRAGMA x;
PRAGMA x = '1TB';
SELECT * FROM x;
PRAGMA x;
PRAGMA x = '1TB';
CREATE TABLE x (x INT CHECK (x < 10), x INT CHECK (CASE WHEN x < 10 THEN x < x ELSE x + x < 100 END));
INSERT INTO x VALUES (3, 7);
INSERT INTO x VALUES (12, 13);
INSERT INTO x VALUES (5, 3);
INSERT INTO x VALUES (9, 90);
INSERT INTO x VALUES (9, 99);
PRAGMA x;
PRAGMA x = '1TB';
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (2, 2), (3, 3);
CREATE UNIQUE INDEX x ON x(x);
SELECT x, x FROM x WHERE x = 1;
INSERT INTO x VALUES (1, 1);
PRAGMA x;
PRAGMA x = '1TB';
SELECT x, x FROM x WHERE x = 1;
INSERT INTO x VALUES (1, 1);
PRAGMA x;
PRAGMA x = '1TB';
DROP INDEX x;
INSERT INTO x VALUES (1, 1);
DROP TABLE x;
PRAGMA x;
PRAGMA x = '1TB';
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (2, 2), (3, 3);
CREATE UNIQUE INDEX x ON x USING art((x + x));
SELECT x, x FROM x WHERE x + x = 2;
INSERT INTO x VALUES (1, 1);
PRAGMA x;
PRAGMA x = '1TB';
SELECT x, x FROM x WHERE x + x = 2;
INSERT INTO x VALUES (1, 1);
DROP INDEX x;
INSERT INTO x VALUES (1, 1);
DROP TABLE x;
PRAGMA x;
PRAGMA x = '1TB';
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (2, 2), (3, 3);
CREATE UNIQUE INDEX x ON x USING art((x + x));
SELECT x, x FROM x WHERE x + x = 2;
INSERT INTO x VALUES (1, 1);
PRAGMA x;
PRAGMA x = '1TB';
SELECT x, x FROM x WHERE x + x = 2;
INSERT INTO x VALUES (1, 1);
DROP INDEX x;
INSERT INTO x VALUES (1, 1);
DROP TABLE x;
PRAGMA x;
PRAGMA x = '1TB';
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (2, 2), (3, 3);
CREATE UNIQUE INDEX x ON x USING art((x + x), x, x);
PRAGMA x;
PRAGMA x = '1TB';
INSERT INTO x VALUES (1, 1);
DROP INDEX x;
PRAGMA x;
SET x = '999999GB';
BEGIN;
CREATE TABLE x AS SELECT 42;
DROP TABLE x;
CREATE TABLE x AS SELECT 84;
COMMIT;
PRAGMA x;
SET x = '999999GB';
SELECT * FROM x;
DROP TABLE x;
BEGIN;
CREATE TABLE x AS SELECT 42;
DROP TABLE x;
COMMIT;
PRAGMA x;
SET x = '999999GB';
BEGIN;
CREATE TABLE x AS SELECT 84;
ALTER TABLE x RENAME TO x;
ALTER TABLE x RENAME TO x;
PRAGMA x;
SET x = '999999GB';
SELECT * FROM x;
BEGIN;
CREATE OR REPLACE TABLE x AS SELECT 84;
CREATE OR REPLACE TABLE x AS SELECT 42;
CREATE OR REPLACE TABLE x AS SELECT 42;
SELECT * FROM x;
PRAGMA x;
PRAGMA x = '1TB';
CREATE SCHEMA x.x;
CREATE TABLE x.x (x INT, x INT);
INSERT INTO x.x VALUES (11, 22), (13, 22);
DROP TABLE x.x;
DROP SCHEMA x.x;
CREATE SCHEMA x.x;
CREATE TABLE x.x (x INT, x INT);
INSERT INTO x.x VALUES (11, 22), (13, 22);
PRAGMA x;
DROP TABLE x.x;
DROP TABLE x.x;
CREATE SCHEMA x.x;
PRAGMA x;
PRAGMA x = '1TB';
CREATE TABLE x (x INT, x TEXT);
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
PRAGMA x;
PRAGMA x = '1TB';
CREATE TABLE x (x INT128);
CREATE TABLE x (x INT128);
PRAGMA x;
SELECT * FROM x;
SELECT * FROM x WHERE x = 42;
SELECT x FROM x WHERE x < 10 ORDER BY 1;
PRAGMA x;
PRAGMA x = '1TB';
CREATE TABLE x (x INTERVAL);
CREATE TABLE x (x INTERVAL);
PRAGMA x;
SELECT * FROM x;
SELECT x FROM x WHERE x = INTERVAL '1' DAY;
SELECT x FROM x WHERE x >= INTERVAL '1' DAY ORDER BY 1;
SELECT x FROM x WHERE x > INTERVAL '10' YEAR ORDER BY 1;
ATTACH '__TEST_DIR__/attach_no_wal.db';
CREATE TABLE x.x (x INT);
INSERT INTO x.x SELECT * FROM x;
DETACH attach_no_wal;
ATTACH '__TEST_DIR__/attach_no_wal.db';
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x.x;
PRAGMA x;
PRAGMA x = '1TB';
CREATE TABLE x (x INT[]);
PRAGMA x;
PRAGMA x = '1TB';
SELECT * FROM x;
INSERT INTO x VALUES ([1, 2]), (NULL), ([3, 4, 5, 6]), ([NULL, 7]);
SELECT * FROM x;
PRAGMA x;
PRAGMA x = '1TB';
SELECT * FROM x;
CREATE TABLE x (x INT[][]);
INSERT INTO x VALUES ([[1, 2], [3, 4]]), (NULL), ([NULL, [7, 8, NULL], [2, 3]]), ([[NULL, 6], NULL, [1, 2, NULL]]);
SELECT * FROM x;
PRAGMA x;
PRAGMA x = '1TB';
SELECT * FROM x;
CREATE TABLE x (x TEXT[]);
INSERT INTO x VALUES (['hello', 'world']), (NULL), (['fejwfoaejwfoijwafew', 'b', 'c']), ([NULL, 'XXXXXXXXXXXXXXXXXXXXXXXX']);
SELECT * FROM x;
PRAGMA x;
PRAGMA x = '1TB';
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
PRAGMA x = '1TB';
CREATE TABLE x (x MAP(INT, INT));
INSERT INTO x VALUES (MAP([1], [2])), (MAP([1, 2, 3], [4, 5, 6]));
SELECT * FROM x;
PRAGMA x;
PRAGMA x = '1TB';
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
PRAGMA x = '1TB';
CREATE TABLE x (x INT);
SELECT x FROM x;
PRAGMA x;
SELECT x FROM x;
SELECT x FROM x;
PRAGMA x;
SELECT x FROM x;
PRAGMA x;
SELECT x FROM x;
SELECT x FROM x;
PRAGMA x;
SELECT x FROM x;
PRAGMA x;
PRAGMA x = '1TB';
CREATE SEQUENCE x;
BEGIN;
SELECT NEXTVAL('seq');
SELECT NEXTVAL('seq');
SELECT NEXTVAL('seq');
PRAGMA x;
PRAGMA x;
CREATE TABLE x AS SELECT INTERVAL (x) YEAR AS x FROM x;
SELECT MIN(x), MAX(x), COUNT(*), COUNT(x) FROM x;
SELECT MIN(x), MAX(x), COUNT(*), COUNT(x) FROM x WHERE x = INTERVAL '1' YEAR;
CREATE TABLE x AS SELECT x % 2 = 0 AS x FROM x;
SELECT MIN(x), MAX(x), COUNT(*), COUNT(x) FROM x;
SELECT MIN(x), MAX(x), COUNT(*), COUNT(x) FROM x WHERE NOT x;
CREATE TABLE x (x TEXT, x mood);
INSERT INTO x VALUES ('Moe', 'happy');
SELECT * FROM x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
SELECT MIN(x), MAX(x), COUNT(*), COUNT(x) FROM x;
SELECT MIN(x), MAX(x), COUNT(*), COUNT(x) FROM x WHERE x = INTERVAL '1' YEAR;
SELECT MIN(x), MAX(x), COUNT(*), COUNT(x) FROM x;
SELECT MIN(x), MAX(x), COUNT(*), COUNT(x) FROM x WHERE NOT x;
SELECT * FROM x;
BEGIN;
DROP TABLE x;
CREATE TABLE x (x TEXT, x mood);
PRAGMA x;
PRAGMA x = '1TB';
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (11, 22), (13, 22), (12, 21);
ALTER TABLE x ADD COLUMN x INT DEFAULT 2;
SELECT x FROM x ORDER BY x;
SELECT x FROM x ORDER BY x;
INSERT INTO x (x, x) VALUES (1, 1);
SELECT x FROM x ORDER BY x;
PRAGMA x;
PRAGMA x = '1TB';
CREATE TABLE x (x INT, x INT);
PRAGMA x;
ALTER TABLE x ADD COLUMN x INT DEFAULT 2;
SELECT x FROM x ORDER BY x;
SELECT x FROM x ORDER BY x;
PRAGMA x;
PRAGMA x = '1TB';
CREATE TABLE x (x INT, x INT);
PRAGMA x;
PRAGMA x = '1TB';
ALTER TABLE x ALTER COLUMN x SET DATA TYPE TEXT;
SELECT * FROM x ORDER BY 1;
PRAGMA x;
PRAGMA x = '1TB';
SELECT * FROM x ORDER BY 1;
INSERT INTO x VALUES (10, 'hello');
SELECT * FROM x ORDER BY 1;
PRAGMA x;
PRAGMA x = '1TB';
SELECT * FROM x ORDER BY 1;
SELECT * FROM x ORDER BY 1;
SELECT * FROM x ORDER BY 1;
INSERT INTO x VALUES (10, 'hello');
SELECT * FROM x ORDER BY 1;
SELECT * FROM x ORDER BY 1;
PRAGMA x;
PRAGMA x = '1TB';
CREATE TABLE x (x INT, x INT);
PRAGMA x;
ALTER TABLE x ALTER COLUMN x SET DATA TYPE TEXT;
SELECT * FROM x ORDER BY 1;
INSERT INTO x VALUES (10, 'hello');
SELECT * FROM x ORDER BY 1;
SELECT * FROM x ORDER BY 1;
PRAGMA x;
PRAGMA x = '1TB';
CREATE TABLE x (x INT DEFAULT 1, x INT);
INSERT INTO x (x) VALUES (11);
SELECT * FROM x ORDER BY x;
PRAGMA x;
PRAGMA x = '1TB';
SELECT * FROM x ORDER BY x;
INSERT INTO x (x) VALUES (12), (13);
SELECT * FROM x ORDER BY x;
INSERT INTO x (x) VALUES (14), (15);
SELECT * FROM x ORDER BY x;
PRAGMA x;
PRAGMA x = '1TB';
CREATE SEQUENCE x;
SELECT NEXTVAL('seq');
CREATE TABLE x (x INT DEFAULT NEXTVAL('seq'), x INT, x INT DEFAULT CURRVAL('seq'));
INSERT INTO x (x) (VALUES (11)) AS x;
PRAGMA x;
PRAGMA x = '1TB';
SELECT * FROM x ORDER BY x;
INSERT INTO x (x) VALUES (12);
INSERT INTO x (x) VALUES (13);
SELECT * FROM x ORDER BY x;
INSERT INTO x (x) VALUES (14);
INSERT INTO x (x) VALUES (15);
SELECT * FROM x ORDER BY x;
PRAGMA x;
PRAGMA x = '1TB';
BEGIN;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (11, 22), (12, 21), (13, 22), (12, 21);
DELETE FROM x WHERE x = 12;
SELECT x, x FROM x ORDER BY x;
SELECT x, x FROM x ORDER BY x;
PRAGMA x;
PRAGMA x = '1TB';
SELECT x, x FROM x ORDER BY x;
DELETE FROM x WHERE x = 11;
SELECT x, x FROM x ORDER BY x;
INSERT INTO x VALUES (11, 24), (12, 25);
SELECT x, x FROM x ORDER BY x;
DELETE FROM x WHERE x = 12;
SELECT x, x FROM x ORDER BY x;
PRAGMA x;
SELECT x, x FROM x ORDER BY x;
PRAGMA x;
PRAGMA x = '1TB';
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (11, 22), (13, 22), (12, 21), (NULL, NULL);
CREATE TABLE x (x INT);
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
PRAGMA x;
PRAGMA x = '1TB';
CREATE TABLE x AS SELECT -x AS x, -x AS x FROM x AS x;
INSERT INTO x SELECT x + 1 AS x, x + 1 AS x FROM x AS x;
SELECT COUNT(*), SUM(x), SUM(x), MIN(x), MAX(x), MIN(x), MAX(x) FROM x WHERE x > 0;
SELECT COUNT(*) FROM x WHERE x > 0;
SELECT COUNT(*) FROM x WHERE x > 0 AND x <> x;
SELECT SUM(CASE WHEN x IS NULL THEN 1 ELSE 0 END) FROM x WHERE x > 0 AND x % 2 = 0;
UPDATE x SET x = x + 1 WHERE x > 0 AND x % 2 = 0;
SELECT * FROM x WHERE x > 0 ORDER BY 1, 2;
SELECT COUNT(*) FROM x WHERE x > 0;
SELECT COUNT(*) FROM x WHERE x > 0 AND x <> x;
SELECT * FROM x WHERE x > 0 ORDER BY 1, 2;
SELECT COUNT(*), SUM(x), SUM(x), MIN(x), MAX(x), MIN(x), MAX(x) FROM x WHERE x > 0;
PRAGMA x;
PRAGMA x = '1TB';
SELECT COUNT(*) FROM x WHERE x > 0 AND x % 2 = 0;
SELECT COUNT(*) FROM x WHERE x IS NULL OR x IS NULL;
SELECT COUNT(*) FROM x WHERE x > 0 AND x <> x;
SELECT * FROM x WHERE x > 0 ORDER BY 1, 2;
SELECT COUNT(*), SUM(x), SUM(x), MIN(x), MAX(x), MIN(x), MAX(x) FROM x WHERE x > 0;
UPDATE x SET x = NULL WHERE x > 0 AND x % 2 = 1;
SELECT COUNT(*), SUM(x), SUM(x), MIN(x), MAX(x), MIN(x), MAX(x) FROM x WHERE x > 0;
SELECT COUNT(*), SUM(x), SUM(x), MIN(x), MAX(x), MIN(x), MAX(x) FROM x WHERE x > 0;
PRAGMA x;
PRAGMA x = '1TB';
CREATE TABLE x AS SELECT -x AS x, -x AS x FROM x AS x;
INSERT INTO x SELECT x + 1 AS x, x + 1 AS x FROM x AS x;
SELECT COUNT(*), SUM(x), SUM(x), MIN(x), MAX(x), MIN(x), MAX(x) FROM x WHERE x > 0;
SELECT COUNT(*) FROM x WHERE x > 0;
SELECT COUNT(*) FROM x WHERE x > 0 AND x <> x;
UPDATE x SET x = NULL WHERE x > 0 AND x % 2 = 0;
SELECT * FROM x WHERE x > 0 ORDER BY 1, 2;
SELECT COUNT(*) FROM x WHERE x > 0;
SELECT COUNT(*) FROM x WHERE x > 0 AND x IS NULL;
SELECT * FROM x WHERE x > 0 ORDER BY 1, 2;
SELECT COUNT(*), SUM(x), SUM(x), MIN(x), MAX(x), MIN(x), MAX(x), COUNT(x) FROM x WHERE x > 0;
PRAGMA x;
PRAGMA x = '1TB';
SELECT COUNT(*) FROM x WHERE x > 0 AND x % 2 = 0;
SELECT COUNT(*) FROM x WHERE x IS NULL OR x IS NULL;
SELECT * FROM x WHERE x > 0 ORDER BY 1, 2;
SELECT COUNT(*), SUM(x), SUM(x), MIN(x), MAX(x), MIN(x), MAX(x), COUNT(x) FROM x WHERE x > 0;
SELECT COUNT(*), SUM(x), SUM(x), MIN(x), MAX(x), MIN(x), MAX(x), COUNT(x) FROM x WHERE x > 0;
PRAGMA x;
PRAGMA x = '1TB';
CREATE TABLE x (x INT, x TEXT);
PRAGMA x;
PRAGMA x = '1TB';
SELECT x, x FROM x ORDER BY x;
CREATE TABLE x (x INT, x TEXT);
PRAGMA x;
PRAGMA x = '1TB';
CREATE TABLE x (x INT, x INT);
PRAGMA x;
PRAGMA x = '1TB';
ALTER TABLE x DROP COLUMN x;
SELECT * FROM x ORDER BY 1;
SELECT * FROM x ORDER BY 1;
PRAGMA x;
PRAGMA x = '1TB';
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (11, 22), (13, 22), (12, 21);
BEGIN;
SELECT x FROM x ORDER BY x;
ALTER TABLE x RENAME COLUMN x TO x;
SELECT x FROM x ORDER BY x;
SELECT x FROM x ORDER BY x;
PRAGMA x;
PRAGMA x = '1TB';
BEGIN;
SELECT x FROM x ORDER BY x;
ALTER TABLE x RENAME COLUMN x TO x;
SELECT x FROM x ORDER BY x;
SELECT x FROM x ORDER BY x;
SELECT x FROM x ORDER BY x;
SELECT x FROM x;
PRAGMA x;
PRAGMA x = '1TB';
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (11, 22), (13, 22), (12, 21);
BEGIN;
SELECT x FROM x ORDER BY x;
ALTER TABLE x RENAME TO x;
SELECT x FROM x ORDER BY 1;
SELECT x FROM x ORDER BY 1;
BEGIN;
SELECT x FROM x ORDER BY x;
ALTER TABLE x RENAME TO x;
SELECT x FROM x ORDER BY 1;
SELECT x FROM x ORDER BY 1;
SELECT x FROM x ORDER BY 1;
PRAGMA x;
PRAGMA x = '1TB';
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (11, 22), (13, 22), (12, 21);
CREATE VIEW x AS SELECT * FROM x;
BEGIN;
SELECT x FROM x ORDER BY x;
ALTER VIEW x RENAME TO x;
SELECT x FROM x ORDER BY 1;
SELECT x FROM x ORDER BY 1;
PRAGMA x;
PRAGMA x = '1TB';
BEGIN;
SELECT x FROM x ORDER BY x;
ALTER VIEW x RENAME TO x;
SELECT x FROM x ORDER BY 1;
SELECT x FROM x ORDER BY 1;
SELECT x FROM x ORDER BY 1;
PRAGMA x;
PRAGMA x = '1TB';
CREATE SEQUENCE x;
CREATE SEQUENCE x;
SELECT NEXTVAL('seq');
SELECT NEXTVAL('seq_cycle');
CREATE SEQUENCE x;
CREATE SEQUENCE x;
PRAGMA x;
PRAGMA x = '1TB';
SELECT NEXTVAL('seq');
SELECT NEXTVAL('seq_cycle');
SELECT NEXTVAL('seq2');
SELECT NEXTVAL('seq'), NEXTVAL('seq');
SELECT NEXTVAL('seq_cycle');
DROP SEQUENCE x;
SELECT NEXTVAL('seq');
PRAGMA x;
PRAGMA x = '1TB';
CREATE TABLE x (x INT);
CREATE TEMPORARY TABLE x.x (x INT);
INSERT INTO x VALUES (42);
DELETE FROM x;
DELETE FROM x.x;
DELETE FROM x.x;
CREATE TEMPORARY SEQUENCE x;
CREATE TEMPORARY SEQUENCE x;
DROP SEQUENCE x;
CREATE TEMPORARY VIEW x AS SELECT 42;
CREATE TEMPORARY VIEW x AS SELECT 42;
DROP VIEW x;
INSERT INTO x.x VALUES (43);
UPDATE x.x SET x = 44;
UPDATE x SET x = 45;
ALTER TABLE x RENAME COLUMN x TO x;
SELECT * FROM x;
SELECT * FROM x AS x;
SELECT * FROM x;
SELECT * FROM x;
CREATE TEMPORARY TABLE x (x INT);
CREATE TEMPORARY SEQUENCE x;
PRAGMA x;
PRAGMA x = '1TB';
CREATE TABLE x AS SELECT -x AS x, -x AS x FROM x AS x;
INSERT INTO x VALUES (11, 22), (NULL, 22), (12, 21);
UPDATE x SET x = x + 1 WHERE x = 11;
SELECT x, x FROM x WHERE x > 0 OR x IS NULL ORDER BY x;
UPDATE x SET x = x + 1 WHERE x = 11;
SELECT x, x FROM x WHERE x > 0 OR x IS NULL ORDER BY x;
UPDATE x SET x = NULL WHERE x = 11;
SELECT x, x FROM x WHERE x > 0 OR x IS NULL ORDER BY x;
SELECT x, x FROM x WHERE x > 0 OR x IS NULL ORDER BY x;
SELECT x, x FROM x WHERE x > 0 OR x IS NULL ORDER BY x;
PRAGMA x;
PRAGMA x = '1TB';
CREATE TABLE x AS SELECT CAST((-x) AS TEXT) AS x, CAST((-x) AS TEXT) AS x FROM x AS x;
INSERT INTO x VALUES ('11', '22'), (NULL, '22'), ('12', '21');
UPDATE x SET x = CAST((CAST(x AS INT) + 1) AS TEXT) WHERE x = '11';
SELECT x, x FROM x WHERE CAST(x AS INT) > 0 OR x IS NULL ORDER BY x;
UPDATE x SET x = CAST((CAST(x AS INT) + 1) AS TEXT) WHERE x = '11';
SELECT x, x FROM x WHERE CAST(x AS INT) > 0 OR x IS NULL ORDER BY x;
UPDATE x SET x = NULL WHERE x = '11';
SELECT x, x FROM x WHERE CAST(x AS INT) > 0 OR x IS NULL ORDER BY x;
SELECT x, x FROM x WHERE CAST(x AS INT) > 0 OR x IS NULL ORDER BY x;
SELECT x, x FROM x WHERE CAST(x AS INT) > 0 OR x IS NULL ORDER BY x;
PRAGMA x;
PRAGMA x = '1TB';
CREATE TABLE x (x TEXT, x TEXT);
INSERT INTO x VALUES ('11', '22'), (NULL, '22'), ('12', '21');
UPDATE x SET x = CAST((CAST(x AS INT) + 1) AS TEXT) WHERE x = '11';
SELECT x, x FROM x ORDER BY x;
UPDATE x SET x = CAST((CAST(x AS INT) + 1) AS TEXT) WHERE x = '11';
SELECT x, x FROM x ORDER BY x;
UPDATE x SET x = NULL WHERE x = '11';
SELECT x, x FROM x ORDER BY x;
SELECT x, x FROM x ORDER BY x;
SELECT x, x FROM x ORDER BY x;
PRAGMA x;
PRAGMA x = '1TB';
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (11, 22), (13, 22), (12, 21);
UPDATE x SET x = x + 1 WHERE x = 11;
SELECT x, x FROM x ORDER BY x;
UPDATE x SET x = x + 1 WHERE x = 11;
SELECT x, x FROM x ORDER BY x;
PRAGMA x;
PRAGMA x = '1TB';
SELECT x, x FROM x ORDER BY x;
PRAGMA x;
PRAGMA x = '1TB';
CREATE TABLE x (x TIMESTAMP);
CREATE TABLE x (x TIMESTAMP);
PRAGMA x;
SELECT * FROM x ORDER BY x;
SELECT * FROM x WHERE x = CAST('2007-01-01 00:00:01' AS TIMESTAMP) ORDER BY x;
SELECT * FROM x WHERE x = CAST('2000-01-01 00:00:01' AS TIMESTAMP) ORDER BY x;
PRAGMA x;
PRAGMA x = '1TB';
CREATE TABLE x (x UINT128);
CREATE TABLE x (x UINT128);
PRAGMA x;
SELECT * FROM x;
SELECT * FROM x WHERE x = 42;
SELECT x FROM x WHERE x < 10 ORDER BY 1;
PRAGMA x;
PRAGMA x = '1TB';
PRAGMA x = '1TB';
INSERT INTO x SELECT CONCAT('helloworldxxx', x) FROM x AS x;
INSERT INTO x SELECT CONCAT('helloworldxxx', x) FROM x AS x;
INSERT INTO x SELECT CONCAT('helloworldxxx', x) FROM x AS x;
INSERT INTO x SELECT CONCAT('helloworldxxx', x) FROM x AS x;
INSERT INTO x SELECT CONCAT('helloworldxxx', x) FROM x AS x;
SELECT MIN(x), MAX(x), COUNT(*), AVG(CAST(REPLACE(x, 'helloworldxxx', '') AS INT)) FROM x;
SELECT MIN(x), MAX(x), COUNT(*), AVG(CAST(REPLACE(x, 'helloworldxxx', '') AS INT)) FROM x;
PRAGMA x;
PRAGMA x = '1TB';
CREATE TABLE x (x UUID);
CREATE TABLE x (x UUID);
SELECT * FROM x;
SELECT * FROM x WHERE x = 'A0EEBC99-9C0B-4EF8-BB6D-6BB9BD380A11';
SELECT * FROM x WHERE x = 'a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11';
SELECT x FROM x WHERE x > '10203040-5060-7080-0102-030405060708' ORDER BY 1;
SET x = TRUE;
PRAGMA x;
PRAGMA x = '1TB';
CREATE SCHEMA x.x;
CREATE TABLE x.x (x INT, x INT);
CREATE VIEW x.x (x, x) AS SELECT * FROM x.x;
PRAGMA TABLE_INFO('test.v');
SELECT * FROM x.x;
SELECT * FROM x.x;
PRAGMA x;
PRAGMA TABLE_INFO('test.v');
SELECT * FROM x.x;
CREATE TABLE x.x (x INT, x INT);
SELECT * FROM x.x;
SELECT x, x FROM x.x;
CREATE VIEW x.x (x, x) AS SELECT * FROM x.x;
PRAGMA x;
PRAGMA x = '1TB';
CREATE SCHEMA x.x;
CREATE TABLE x.x (x INT, x INT);
CREATE VIEW x.x (x, x) AS SELECT * FROM x.x;
PRAGMA TABLE_INFO('test.v');
SELECT * FROM x.x;
DROP TABLE x.x;
PRAGMA TABLE_INFO('test.v');
PRAGMA x;
PRAGMA TABLE_INFO('test.v');
SELECT * FROM x.x;
CREATE TABLE x.x (x INT, x INT);
SELECT * FROM x.x;
SELECT x, x FROM x.x;
SET x = TRUE;
PRAGMA x;
PRAGMA x = '1TB';
CREATE SCHEMA x.x;
PRAGMA TABLE_INFO('test.v');
DROP TABLE x.x;
DROP TABLE x.x CASCADE;
PRAGMA TABLE_INFO('test.v');
CREATE VIEW x.x AS SELECT 42;
CREATE VIEW x.x AS SELECT 42;
PRAGMA TABLE_INFO('test.v');
SELECT * FROM x.x;
CREATE TABLE x.x (x INT, x INT);
SELECT * FROM x.x;
SELECT * FROM x.x;
CREATE VIEW x.x AS SELECT * FROM x.x;
PRAGMA TABLE_INFO('test.v');
DROP TABLE x.x;
DROP TABLE x.x CASCADE;
SELECT * FROM x.x;
PRAGMA x;
PRAGMA x = '1TB';
CREATE SCHEMA x.x;
CREATE TABLE x.x (x INT, x INT);
CREATE VIEW x.x AS SELECT * FROM x.x;
PRAGMA TABLE_INFO('test.v');
DROP TABLE x.x;
PRAGMA TABLE_INFO('test.v');
SELECT * FROM x.x;
CREATE VIEW x.x AS SELECT 42;
CREATE VIEW x.x AS SELECT 42;
PRAGMA TABLE_INFO('test.v');
SELECT * FROM x.x;
CREATE TABLE x.x (x INT, x INT);
SELECT * FROM x.x;
SELECT * FROM x.x;
PRAGMA TABLE_INFO('test.v');
DROP TABLE x.x;
SELECT * FROM x.x;
PRAGMA x;
CREATE TABLE x (x INT, x TEXT, x TEXT, x INT);
CREATE TABLE x (x INT, x TEXT, x TEXT, x INT, x INT);
INSERT INTO x VALUES (1, 'Mark', 'CS', 2017);
INSERT INTO x VALUES (2, 'Dirk', 'CS', 2017);
INSERT INTO x VALUES (1, 'Database Systems', 'CS', 10, 2015);
INSERT INTO x VALUES (1, 'Graphics', 'CS', 9, 2016);
INSERT INTO x VALUES (2, 'Database Systems', 'CS', 7, 2015);
INSERT INTO x VALUES (2, 'Graphics', 'CS', 7, 2016);
SELECT x.x, x.x, x.x FROM x AS x, x AS x WHERE x.x = x.x AND x.x = (SELECT MAX(x.x) FROM x AS x WHERE x.x = x.x) ORDER BY x, x;
SELECT x.x, x.x, x.x FROM x AS x, x AS x WHERE x.x = x.x AND (x.x = 'CS' OR x.x = 'Games Eng') AND x.x <= (SELECT AVG(x.x) - 1 FROM x AS x WHERE x.x = x.x OR (x.x = x.x AND x.x >= x.x)) ORDER BY x, x;
SELECT x, x FROM x AS x WHERE EXISTS(SELECT * FROM x AS x WHERE x.x = x.x AND x = 10) OR x.x = 'Dirk' ORDER BY x;
SELECT (SELECT x OFFSET 1) FROM (VALUES (1)) AS x;
PRAGMA x;
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1);
INSERT INTO x VALUES (1);
SELECT 1 = ANY (SELECT 1 FROM x JOIN (SELECT COUNT(*) GROUP BY x.x) AS x ON TRUE) FROM x;
PRAGMA x;
CREATE TABLE x (x TIME, x DOUBLE);
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (10), (7), (9), (NULL), (1), (7), (7), (0), (8), (0), (9), (NULL), (5), (3), (8), (0);
SELECT (FALSE) IN (TRUE, (SELECT CAST('13:35:07' AS TIME) FROM x) BETWEEN x.x AND x.x) FROM x;
SET x = FALSE;
SELECT (FALSE) IN (TRUE, (SELECT CAST('13:35:07' AS TIME) FROM x) BETWEEN x.x AND x.x) FROM x;
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3);
SELECT 2 > ANY (SELECT * FROM x);
SELECT 1 > ANY (SELECT * FROM x);
SELECT 4 > ALL (SELECT * FROM x);
SELECT 1 > ALL (SELECT * FROM x);
SELECT NULL > ANY (SELECT * FROM x);
SELECT NULL > ALL (SELECT * FROM x);
INSERT INTO x VALUES (NULL);
SELECT 2 > ANY (SELECT * FROM x);
SELECT 1 > ANY (SELECT * FROM x);
SELECT 4 > ALL (SELECT * FROM x);
SELECT 1 > ALL (SELECT * FROM x);
SELECT NULL > ANY (SELECT * FROM x);
SELECT NULL > ALL (SELECT * FROM x);
SELECT POWER(2, ANY (SELECT * FROM x));
SELECT POWER(2, ANY([1, 2, 3]));
SET x = 'nulls_first';
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3), (NULL);
SELECT x = ANY (SELECT x FROM x WHERE x = x.x) FROM x AS x ORDER BY x;
SELECT x > ALL (SELECT (x + x.x - 1) / 2 FROM x WHERE NOT x IS NULL) FROM x AS x ORDER BY x;
SELECT x = ALL (SELECT x FROM x WHERE x <> x.x) FROM x AS x ORDER BY x;
SELECT x FROM x AS x WHERE x = ANY (SELECT x FROM x WHERE x = x.x) ORDER BY x;
SELECT x FROM x AS x WHERE x <> ANY (SELECT x FROM x WHERE x = x.x) ORDER BY x;
SELECT x FROM x AS x WHERE x = ANY (SELECT x FROM x WHERE x <> x.x) ORDER BY x;
SELECT x FROM x AS x WHERE x > ANY (SELECT x FROM x WHERE x <> x.x) ORDER BY x;
SELECT x FROM x AS x WHERE x > ALL (SELECT (x + x.x - 1) / 2 FROM x WHERE NOT x IS NULL) ORDER BY x;
SELECT x = ALL (SELECT x FROM x WHERE x = x.x) FROM x AS x ORDER BY x;
SELECT x = ANY (SELECT x FROM x WHERE x = x.x) FROM x AS x ORDER BY x;
SELECT x <> ALL (SELECT x FROM x WHERE x = x.x) FROM x AS x ORDER BY x;
SELECT x <> ANY (SELECT x FROM x WHERE x = x.x) FROM x AS x ORDER BY x;
SELECT x = ALL (SELECT x FROM x WHERE x <> x.x) FROM x AS x ORDER BY x;
SELECT x = ANY (SELECT x FROM x WHERE x <> x.x) FROM x AS x ORDER BY x;
SELECT x > ANY (SELECT x FROM x WHERE x <> x.x) FROM x AS x ORDER BY x;
SELECT x > ALL (SELECT (x + x.x - 1) / 2 FROM x) FROM x AS x ORDER BY x;
SELECT x > ALL (SELECT (x + x.x - 1) / 2 FROM x WHERE NOT x IS NULL) FROM x AS x ORDER BY x;
SELECT x = ANY (SELECT x FROM x WHERE x = x.x OR x IS NULL) FROM x AS x ORDER BY x;
SELECT x = ALL (SELECT x FROM x WHERE x = x.x OR x IS NULL) FROM x AS x ORDER BY x;
SELECT MIN(x) > ANY (SELECT x FROM x WHERE x > MIN(x.x)) FROM x AS x;
SELECT SUM(x) > ANY (SELECT x FROM x WHERE x > MIN(x.x)) FROM x AS x;
SELECT (SELECT SUM(x) + SUM(x.x) FROM x) > ANY (SELECT x FROM x WHERE x > MIN(x.x)) FROM x AS x;
SELECT x = ANY (SELECT x FROM x WHERE x = x.x AND x > 10) FROM x AS x ORDER BY x;
PRAGMA x;
SELECT 1 = ANY (SELECT 1);
SELECT 1 = ANY (SELECT NULL);
SELECT 1 = ANY (SELECT 2);
SELECT NULL = ANY (SELECT 2);
SELECT 1 = ALL (SELECT 1);
SELECT 1 = ALL (SELECT NULL);
SELECT 1 = ALL (SELECT 2);
SELECT NULL = ALL (SELECT 2);
SET x = 'nulls_first';
PRAGMA x;
SELECT 1 IN (SELECT 1);
SELECT NULL IN (SELECT 1);
SELECT 1 IN (SELECT NULL);
SELECT 1 IN (SELECT 2);
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3);
SELECT 4 IN (SELECT * FROM x);
SELECT 1 IN (SELECT * FROM x);
SELECT 1 IN (SELECT * FROM x) FROM x;
INSERT INTO x VALUES (NULL);
SELECT 4 IN (SELECT * FROM x);
SELECT 1 IN (SELECT * FROM x);
SELECT * FROM x WHERE (4 IN (SELECT * FROM x)) IS NULL ORDER BY 1;
SELECT * FROM x WHERE (x IN (SELECT * FROM x)) IS NULL ORDER BY 1;
PRAGMA x;
SELECT 1 AS x WHERE 1 IN (SELECT 1);
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 22);
INSERT INTO x VALUES (2, 21);
INSERT INTO x VALUES (3, 23);
SELECT * FROM x WHERE x IN (SELECT x FROM x WHERE x * x < 30) ORDER BY x, x;
SELECT * FROM x WHERE NOT x IN (SELECT x FROM x WHERE x * x < 30) ORDER BY x, x;
SET x = 'nulls_first';
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3), (NULL);
SELECT x FROM x WHERE x >= ALL (SELECT x FROM x);
SELECT x, x >= ALL (SELECT x FROM x) FROM x ORDER BY x;
SELECT x FROM x WHERE x >= ALL (SELECT x FROM x WHERE NOT x IS NULL);
SELECT x, x >= ALL (SELECT x FROM x WHERE NOT x IS NULL) FROM x ORDER BY x;
SELECT x FROM x WHERE x >= ALL (SELECT x FROM x WHERE NOT x IS NULL);
SELECT x FROM x WHERE x > ALL (SELECT MIN(x) FROM x);
SELECT x FROM x WHERE x < ALL (SELECT MAX(x) FROM x) ORDER BY 1;
SELECT x FROM x WHERE x <= ALL (SELECT x FROM x);
SELECT x FROM x WHERE x <= ALL (SELECT x FROM x WHERE NOT x IS NULL);
SELECT x FROM x WHERE x = ALL (SELECT x FROM x WHERE x = 1);
SELECT x FROM x WHERE x <> ALL (SELECT x FROM x WHERE x = 1);
SELECT x FROM x WHERE x = ALL (SELECT x FROM x WHERE NOT x IS NULL);
SELECT x FROM x WHERE x <> ALL (SELECT x FROM x WHERE NOT x IS NULL);
SELECT x FROM x WHERE x <> ALL (SELECT x FROM x WHERE x > 10) ORDER BY x;
SELECT x, x <> ALL (SELECT x FROM x WHERE x > 10) FROM x ORDER BY x;
SELECT x, x > ANY (SELECT x FROM x WHERE x > 10) FROM x ORDER BY x;
SELECT x, x = ANY (SELECT x FROM x WHERE x > 10) FROM x ORDER BY x;
SELECT x, x >= ANY (SELECT x FROM x WHERE x > 10) FROM x ORDER BY x;
SELECT x, x <= ANY (SELECT x FROM x WHERE x > 10) FROM x ORDER BY x;
SELECT x, x < ANY (SELECT x FROM x WHERE x > 10) FROM x ORDER BY x;
SELECT x, x <> ANY (SELECT x FROM x WHERE x > 10) FROM x ORDER BY x;
SELECT (SELECT (SELECT (SELECT 42)));
SELECT (SELECT EXISTS(SELECT * FROM x WHERE x > 2)) FROM x;
SELECT (SELECT MAX(x) FROM x) AS x, SUM(x) FROM x GROUP BY x;
SELECT x >= ALL (SELECT x FROM x WHERE NOT x IS NULL) AS x, SUM(x) FROM x GROUP BY x ORDER BY x;
SELECT SUM(x) FROM x GROUP BY (x >= ALL (SELECT x FROM x WHERE NOT x IS NULL)) ORDER BY 1;
SELECT x >= ALL (SELECT MIN(x) FROM x WHERE NOT x IS NULL) AS x, SUM(x) FROM x GROUP BY x ORDER BY x;
SELECT x, SUM(CASE WHEN (x >= ALL (SELECT x FROM x WHERE x = 2)) THEN 1 ELSE 0 END) FROM x GROUP BY x ORDER BY x;
SELECT x % 2 AS x, SUM(x) FROM x GROUP BY x HAVING SUM(x) > (SELECT MAX(x) FROM x);
SELECT x FROM x WHERE NOT (x IN (SELECT x FROM x WHERE x > 1));
SELECT (SELECT SUM(x) FROM x), (SELECT 42);
SET x = 'nulls_first';
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3), (NULL);
SELECT x FROM x WHERE x <= ANY (SELECT x FROM x);
SELECT x FROM x WHERE x > ANY (SELECT x FROM x) ORDER BY 1;
SELECT x, x > ANY (SELECT x FROM x) FROM x ORDER BY x;
SELECT x, x > ANY (SELECT x FROM x WHERE NOT x IS NULL) FROM x ORDER BY x;
SELECT x, NULL > ANY (SELECT x FROM x) FROM x ORDER BY x;
SELECT x, NULL > ANY (SELECT x FROM x WHERE NOT x IS NULL) FROM x ORDER BY x;
SELECT x FROM x WHERE x = ANY (SELECT x FROM x) ORDER BY x;
SELECT x, x = ANY (SELECT x FROM x WHERE x > 2) FROM x ORDER BY x;
SELECT x, x = ANY (SELECT x FROM x WHERE x > 2 OR x IS NULL) FROM x ORDER BY x;
SELECT x, x <> ANY (SELECT x FROM x WHERE x > 2) FROM x ORDER BY x;
SELECT x, x <> ANY (SELECT x FROM x WHERE x > 2 OR x IS NULL) FROM x ORDER BY x;
SELECT x, x = ANY (SELECT x.x FROM x AS x, x AS x, x AS x, x AS x, x AS x, x AS x WHERE NOT x.x IS NULL) FROM x ORDER BY x;
SELECT x, x = ANY (SELECT x.x FROM x AS x, x AS x, x AS x, x AS x, x AS x, x AS x WHERE NOT x.x IS NULL AND x.x <> 2) FROM x ORDER BY x;
SELECT x, x >= ANY (SELECT x.x FROM x AS x, x AS x, x AS x, x AS x, x AS x, x AS x WHERE NOT x.x IS NULL) FROM x ORDER BY x;
SELECT x, x >= ANY (SELECT x.x FROM x AS x, x AS x, x AS x, x AS x, x AS x, x AS x WHERE NOT x.x IS NULL AND x.x <> 1 LIMIT 1) FROM x ORDER BY x;
SET x = 'nulls_first';
PRAGMA x;
CREATE TABLE x (x INT[]);
INSERT INTO x VALUES ([1]), ([2]), ([3]), (NULL), (CAST([NULL] AS INT[]));
SELECT x, (SELECT MIN(x[1]) + x.x[1] FROM x) FROM x AS x ORDER BY x;
SELECT x, (SELECT MIN(x[1] + 2 * x.x[1]) FROM x) FROM x AS x ORDER BY x;
SELECT x, SUM(x[1]), (SELECT SUM(x[1]) + SUM(x.x[1]) FROM x) FROM x AS x GROUP BY x ORDER BY x;
SELECT x, SUM(x[1]), (SELECT SUM(x[1]) + COUNT(x.x[1]) FROM x) FROM x AS x GROUP BY x ORDER BY x;
SELECT x, (SELECT COUNT(*) FROM x AS x WHERE x.x[1] > x.x[1]) FROM x AS x ORDER BY x;
SELECT x, (SELECT MIN(x[1] + 2 * x.x[1]) FROM x) FROM x AS x ORDER BY x;
SELECT (SELECT SUM(x.x[1])) FROM x AS x;
SELECT MIN(x[1]), (SELECT SUM(x.x[1])) FROM x AS x;
SELECT x, (SELECT SUM(x.x[1])) FROM x AS x;
SELECT x[1] + 1, (SELECT SUM(x.x[1])) FROM x AS x;
SELECT MIN(x[1]), (SELECT SUM(x.x[1])) FROM x AS x;
SELECT (SELECT SUM(x.x[1])), (SELECT SUM(x.x[1])) FROM x AS x;
SELECT SUM(x[1]), SUM((SELECT x[1] FROM x WHERE x[1] = x.x[1])) FROM x AS x;
SELECT SUM(x[1]), (SELECT SUM(x[1]) FROM x WHERE x[1] > SUM(x.x[1])) FROM x AS x;
SELECT SUM((SELECT SUM(x[1]))) FROM x;
SELECT x, (SELECT MIN(x[1]) FROM x WHERE x[1] > x.x[1]) FROM x AS x ORDER BY x;
SELECT x, (SELECT MIN(x[1]) + x.x[1] FROM x WHERE x[1] > x.x[1]) FROM x AS x ORDER BY x;
SELECT x, (SELECT MIN(x[1]) FROM x GROUP BY x.x[1]) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT x[1] FROM x GROUP BY x[1] HAVING x[1] = x.x[1]) AS x FROM x AS x ORDER BY x;
SELECT x.x, SUM(x[1]) FROM x AS x GROUP BY x.x HAVING SUM(x[1]) = (SELECT MIN(x[1]) FROM x WHERE x[1] <> x.x[1] + 1) ORDER BY 1;
SELECT x[1] % 2 AS x, SUM(x[1]) FROM x AS x GROUP BY x HAVING SUM(x[1]) = (SELECT SUM(x[1]) FROM x WHERE x[1] <> x + 1) ORDER BY 1;
SELECT (SELECT x[1] + SUM(x.x[1]) FROM x WHERE x[1] = 1 LIMIT 1) FROM x AS x;
SELECT (SELECT SUM(x[1]) + SUM(x.x[1]) FROM x) FROM x AS x ORDER BY 1;
SELECT x, (SELECT x[1] + SUM(x.x[1]) FROM x WHERE x[1] = 1) FROM x AS x GROUP BY x ORDER BY x;
SELECT SUM((SELECT x[1] + x.x[1] FROM x WHERE x[1] = 1)) FROM x AS x;
SELECT x, SUM(x.x[1]), (SELECT SUM(x.x[1])) AS x FROM x AS x GROUP BY x ORDER BY x;
SELECT x.x AS x, (SELECT SUM(x[1] + x[1]) FROM x) AS x FROM x AS x GROUP BY x ORDER BY x;
SELECT (SELECT SUM(x.x[1] * x[1]) FROM x) FROM x AS x ORDER BY x;
SELECT x, SUM(x.x[1]) FROM x AS x GROUP BY x ORDER BY (SELECT SUM(x.x[1]));
SELECT x, SUM((SELECT SUM(x[1]) * x.x[1] FROM x LIMIT 0)) AS x FROM x AS x GROUP BY x ORDER BY x;
SELECT (SELECT x[1] + x.x[1] FROM x WHERE x[1] = 1) AS x, SUM(x[1]) AS x FROM x AS x GROUP BY x ORDER BY 1;
SELECT SUM(x[1]) FROM x AS x WHERE x[1] > (SELECT (x[1] + x.x[1]) / 2 FROM x WHERE x[1] = 1);
SELECT SUM(x[1]) FROM x AS x WHERE x[1] > (SELECT (SUM(x[1]) + x.x[1]) / 2 FROM x WHERE x[1] = 1);
SELECT x, (SELECT MIN(x[1]) FROM x WHERE x[1] = x.x[1]) >= ALL (SELECT x[1] FROM x WHERE NOT x[1] IS NULL) FROM x AS x ORDER BY x;
PRAGMA x;
CREATE TABLE x (x INT[]);
INSERT INTO x VALUES ([1]), ([2]), ([3]), (NULL);
SELECT x, x IN (SELECT x.x FROM (SELECT * FROM x AS x WHERE x.x = x.x) AS x JOIN x AS x ON x.x = [x.x]) FROM x ORDER BY x;
SELECT x IN (SELECT x.x FROM (SELECT * FROM x AS x WHERE x.x = x.x) AS x LEFT JOIN x AS x ON x.x = [x.x]) FROM x ORDER BY x;
SELECT x IN (SELECT x.x FROM (SELECT * FROM x AS x WHERE x.x = x.x) AS x RIGHT JOIN x AS x ON x.x = [x.x]) FROM x ORDER BY x;
SELECT x IN (SELECT x.x FROM x AS x LEFT JOIN (SELECT * FROM x AS x WHERE x.x = x.x) AS x ON x.x = [x.x]) FROM x ORDER BY x;
SELECT x IN (SELECT x.x FROM x AS x RIGHT JOIN (SELECT * FROM x AS x WHERE x.x = x.x) AS x ON x.x = [x.x]) FROM x ORDER BY x;
SELECT x IN (SELECT x.x FROM (SELECT * FROM x AS x WHERE x.x IS NOT DISTINCT FROM x.x) AS x JOIN x AS x ON x.x = [x.x] OR (x.x IS NULL AND x.x IS NULL)) FROM x ORDER BY x;
SELECT x IN (SELECT x.x FROM (SELECT * FROM x AS x WHERE x.x IS NOT DISTINCT FROM x.x) AS x LEFT JOIN x AS x ON x.x = [x.x] OR (x.x IS NULL AND x.x IS NULL)) FROM x ORDER BY x;
SELECT x IN (SELECT x.x FROM (SELECT * FROM x AS x WHERE x.x IS NOT DISTINCT FROM x.x) AS x RIGHT JOIN x AS x ON x.x = [x.x] OR (x.x IS NULL AND x.x IS NULL)) FROM x ORDER BY x;
PRAGMA x;
SELECT (SELECT COUNT(*) AS x FROM (SELECT UNNEST(ARRAY_AGG(DISTINCT x))) AS x) AS x FROM (SELECT UUID() AS x, 1 AS x FROM x) AS x;
SELECT x % 2 AS x, (SELECT COUNT(*) AS x FROM (SELECT UNNEST(ARRAY_AGG(DISTINCT x))) AS x) AS x FROM (SELECT ROW_NUMBER() OVER () AS x, UUID() AS x, 1 AS x FROM x) AS x GROUP BY x ORDER BY x;
PRAGMA x;
SELECT (SELECT COUNT(*) AS x FROM (SELECT UNNEST(ARRAY_AGG(DISTINCT x))) AS x) AS x FROM (SELECT UUID() AS x, 1 AS x FROM x) AS x;
SELECT (SELECT SUM(x.x) AS x FROM (SELECT UNNEST(LIST(DISTINCT {'x': x.x, 'x': x.x})) AS x) AS x) AS x FROM (SELECT UUID() AS x, 1 AS x FROM x) AS x CROSS JOIN (SELECT * FROM x) AS x;
SET x = 'nulls_first';
PRAGMA x;
CREATE TABLE x (x INT[]);
INSERT INTO x VALUES ([1]), ([2]), ([3]), (NULL);
SELECT x, (SELECT (SELECT 42 + x.x[1]) + 42 + x.x[1]) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT (SELECT (SELECT (SELECT 42 + x.x[1]) + x.x[1]) + 42 + x.x[1]) + 42 + x.x[1]) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT (SELECT x.x[1] + SUM(x.x[1])) FROM x AS x) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT (SELECT (SELECT (SELECT x.x[1] + x.x[1] + x.x[1] + x.x[1] + x.x[1])))) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT SUM(x[1]) + (SELECT 42 + x.x[1]) FROM x) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT ((SELECT ((SELECT ((SELECT SUM(x[1]) + SUM(x.x[1]) + SUM(x.x[1]) + SUM(x.x[1]) + SUM(x.x[1]) FROM x AS x)) FROM x AS x)) FROM x AS x)) FROM x AS x) AS x FROM x AS x GROUP BY x ORDER BY x;
SELECT x, (SELECT (SELECT (SELECT (SELECT x.x[1] + x.x[1] + x.x[1] + x.x[1] + x.x[1] + x.x[1]) FROM x AS x WHERE x.x = x.x))) AS x FROM x AS x ORDER BY x;
SELECT (SELECT (SELECT SUM(x.x[1]) + SUM(x.x[1]) + SUM(x.x[1]) FROM x AS x) FROM x AS x) FROM x AS x ORDER BY 1;
SELECT x, (SELECT SUM(x.x[1]) FROM x AS x INNER JOIN x AS x ON (SELECT x.x[1] + x.x[1]) = (SELECT x.x[1] + x.x[1])) AS x FROM x AS x ORDER BY x;
SELECT x, SUM(x[1]), (SELECT (SELECT SUM(x[1]) + SUM(x.x[1]) + SUM(x.x[1]) FROM x) FROM x AS x) FROM x AS x GROUP BY x ORDER BY x;
SELECT x, (SELECT SUM(x.x[1]) FROM (SELECT x FROM x AS x WHERE x[1] > ANY (SELECT x[1] FROM x WHERE x <> x.x)) AS x) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT SUM(x.x[1]) FROM (SELECT x FROM x AS x WHERE x = x.x AND x = ANY (SELECT x FROM x WHERE x = x.x)) AS x) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT SUM(x.x[1]) FROM x AS x LEFT OUTER JOIN x AS x ON (SELECT x.x[1] + x.x[1]) = (SELECT x.x[1] + x.x[1])) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT SUM(x.x[1]) + SUM(x.x[1]) FROM (SELECT x FROM x AS x WHERE x > ANY (SELECT x FROM x WHERE x <> x.x)) AS x LEFT OUTER JOIN (SELECT x FROM x AS x WHERE x = ANY (SELECT x FROM x WHERE x = x.x)) AS x ON x.x = x.x) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT SUM(x.x[1]) FROM (SELECT x FROM x WHERE x = x.x) AS x LEFT OUTER JOIN x AS x ON x.x = x.x) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT SUM(x.x[1]) FROM (SELECT x FROM x WHERE x <> x.x) AS x LEFT OUTER JOIN x AS x ON x.x = x.x) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT SUM(x.x[1]) FROM x AS x LEFT OUTER JOIN (SELECT x FROM x WHERE x = x.x) AS x ON x.x = x.x) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT SUM(x.x[1]) FROM x AS x LEFT OUTER JOIN (SELECT x FROM x WHERE x <> x.x) AS x ON x.x = x.x) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT SUM(x.x[1]) FROM (SELECT x FROM x AS x WHERE CASE WHEN (x = x.x AND x = ANY (SELECT x FROM x WHERE x = x.x)) THEN TRUE ELSE FALSE END) AS x) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT SUM(x.x[1]) FROM (SELECT x FROM x AS x WHERE x = x.x AND x = ANY (SELECT x FROM x WHERE x = x.x)) AS x) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT SUM(x.x[1]) FROM (SELECT x FROM x AS x WHERE x = x.x) AS x) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT SUM(x.x[1]) FROM (SELECT x FROM x AS x WHERE x = ANY (SELECT x FROM x WHERE x = x.x)) AS x) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT x = ANY (SELECT x FROM x WHERE x = x.x) FROM x AS x WHERE x = x.x) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT SUM(x.x[1]) FROM (SELECT x FROM x AS x WHERE x = x.x OR x = ANY (SELECT x FROM x WHERE x = x.x)) AS x) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT SUM(x.x[1]) FROM (SELECT x FROM x AS x WHERE CASE WHEN (x = x.x AND x = ANY (SELECT x FROM x WHERE x = x.x)) THEN TRUE ELSE FALSE END) AS x) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT SUM(x.x[1]) FROM (SELECT x FROM x AS x WHERE x = x.x AND EXISTS(SELECT x FROM x WHERE x = x.x)) AS x) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT SUM(x.x[1]) FROM (SELECT x FROM x AS x WHERE x > ANY (SELECT x FROM x WHERE x <> x.x)) AS x) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT SUM(x.x[1]) FROM (SELECT x FROM x AS x WHERE x > ANY (SELECT x FROM x WHERE x <> x.x)) AS x LEFT OUTER JOIN (SELECT x FROM x AS x WHERE x = x.x AND x = ANY (SELECT x FROM x WHERE x = x.x)) AS x ON x.x = x.x) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT SUM(x.x[1]) FROM (SELECT x FROM x AS x WHERE x > ANY (SELECT x FROM x WHERE x <> x.x)) AS x LEFT OUTER JOIN (SELECT x FROM x AS x WHERE x = x.x AND x = ANY (SELECT x FROM x WHERE x = x.x)) AS x ON x.x = x.x) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT SUM(x.x[1]) + SUM(x.x[1]) FROM (SELECT x FROM x AS x WHERE x > ANY (SELECT x FROM x WHERE x <> x.x)) AS x LEFT OUTER JOIN (SELECT x FROM x AS x WHERE x = x.x AND x = ANY (SELECT x FROM x WHERE x = x.x)) AS x ON x.x = x.x) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT SUM(x.x[1]) + SUM(x.x[1]) FROM (SELECT x FROM x AS x WHERE x = x.x AND x > ANY (SELECT x FROM x WHERE x <> x.x)) AS x LEFT OUTER JOIN (SELECT x FROM x AS x WHERE x = ANY (SELECT x FROM x WHERE x = x.x)) AS x ON x.x = x.x) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT SUM(x.x[1]) + SUM(x.x[1]) FROM (SELECT x FROM x AS x WHERE x = x.x AND x > ANY (SELECT x FROM x WHERE x <> x.x)) AS x LEFT OUTER JOIN (SELECT x FROM x AS x WHERE x <> x.x OR x = ANY (SELECT x FROM x WHERE x = x.x)) AS x ON x.x = x.x) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT * FROM (SELECT (SELECT 42 + x.x[1])) AS x) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT x.x + x.x FROM (SELECT (SELECT 42 + x.x[1]) AS x) AS x, (SELECT (SELECT 42 + x.x[1]) AS x) AS x) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT x.x + x.x FROM (SELECT (SELECT 42 + x.x[1]) AS x) AS x LEFT OUTER JOIN (SELECT (SELECT 42 + x.x[1]) AS x) AS x ON x.x = x.x) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT x.x[1] IN (1, 2, 3, 4, 5, 6, 7, 8)) AS x FROM x AS x ORDER BY x;
SELECT (SELECT (SELECT COVAR_POP(x.x[1], x.x[1]) FROM x AS x) FROM x AS x LIMIT 1) FROM x AS x ORDER BY 1;
SELECT (SELECT (SELECT COVAR_POP(x.x[1], x.x[1]) FROM x AS x) FROM x AS x LIMIT 1) FROM x AS x ORDER BY 1;
SET x = 'nulls_first';
PRAGMA x;
CREATE TABLE x (x INT[][]);
INSERT INTO x VALUES ([[0], [1]]), ([[2], [NULL, 3]]), ([[4, 5], [6, 7], [], [8]]), (NULL), (CAST([NULL] AS INT[][]));
SELECT UNNEST(x) FROM x;
SELECT x, (SELECT SUM(x) FROM (SELECT UNNEST(x) AS x FROM (SELECT UNNEST(x) AS x))) FROM x ORDER BY x;
SET x = 'nulls_first';
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3), (NULL);
SELECT x, EXISTS(SELECT x FROM x WHERE x.x > 2) FROM x AS x ORDER BY x;
SELECT x, EXISTS(SELECT x FROM x WHERE x = x.x) FROM x AS x ORDER BY x;
SELECT x, EXISTS(SELECT x FROM x WHERE x IS NULL OR x > x.x * 10) FROM x AS x ORDER BY x;
SELECT x, EXISTS(SELECT x FROM x WHERE x.x > x OR x.x IS NULL) FROM x AS x ORDER BY x;
SELECT x FROM x AS x WHERE EXISTS(SELECT x FROM x WHERE x = x.x) ORDER BY x;
SELECT EXISTS(SELECT x FROM x WHERE x > MIN(x.x)) FROM x AS x;
SELECT x, SUM(x) FROM x AS x GROUP BY x HAVING EXISTS(SELECT x FROM x WHERE x > MIN(x.x)) ORDER BY x;
SELECT EXISTS(SELECT x + MIN(x.x) FROM x WHERE x = 3) FROM x AS x;
SELECT EXISTS(SELECT x + MIN(x.x) FROM x WHERE x = 5) FROM x AS x;
SELECT EXISTS(SELECT x FROM x WHERE x = x.x) AS x, COUNT(*) FROM x AS x GROUP BY x ORDER BY x;
SELECT SUM(CASE WHEN EXISTS(SELECT x FROM x WHERE x = x.x) THEN 1 ELSE 0 END) FROM x AS x;
SELECT (SELECT COVAR_POP(x.x, x.x) FROM x AS x) FROM x AS x ORDER BY 1;
SELECT (SELECT COVAR_POP(x.x, x.x) FROM x AS x) FROM x AS x ORDER BY 1;
SELECT (SELECT COVAR_POP(x.x + x.x, x.x + x.x) FROM x AS x) FROM x AS x ORDER BY 1;
SELECT (SELECT COVAR_POP(x.x, x.x) FROM x AS x) FROM x AS x ORDER BY 1;
SELECT (SELECT COVAR_POP(x.x, x.x) FROM x AS x LIMIT 1) FROM x AS x ORDER BY 1;
CREATE TABLE x AS SELECT * EXCLUDE (x, x, x) FROM x LIMIT 0;
PRAGMA x;
CREATE OR REPLACE TABLE x (x BIGINT);
INSERT INTO x VALUES (1);
CREATE OR REPLACE TABLE x (x BIGINT);
SELECT x, NOT EXISTS(SELECT 1 FROM x WHERE x.x <= x.x) FROM x;
SELECT x FROM x WHERE NOT EXISTS(SELECT 1 FROM x WHERE x.x <= x.x);
PRAGMA x;
SELECT EXISTS(SELECT 1);
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3), (NULL);
SELECT EXISTS(SELECT 1) FROM x;
SELECT EXISTS(SELECT * FROM x);
SELECT EXISTS(SELECT * FROM x WHERE x IS NULL);
SET x = 'nulls_first';
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3), (NULL);
SELECT * FROM x WHERE EXISTS(SELECT 1) ORDER BY x;
SELECT * FROM x WHERE EXISTS(SELECT * FROM x) ORDER BY x;
SELECT * FROM x WHERE NOT EXISTS(SELECT * FROM x) ORDER BY x;
SELECT * FROM x WHERE EXISTS(SELECT NULL) ORDER BY x;
SELECT EXISTS(SELECT * FROM x);
SELECT EXISTS(SELECT * FROM x WHERE x > 10);
SELECT EXISTS(SELECT * FROM x), EXISTS(SELECT * FROM x);
SELECT EXISTS(SELECT * FROM x) AND EXISTS(SELECT * FROM x);
SELECT EXISTS(SELECT EXISTS(SELECT * FROM x));
SELECT * FROM x WHERE 1 IN (SELECT 1) ORDER BY x;
SELECT * FROM x WHERE 1 IN (SELECT * FROM x) ORDER BY x;
SELECT * FROM x WHERE 1 IN (SELECT CAST(NULL AS INT)) ORDER BY x;
SELECT 1 IN (SELECT CAST(NULL AS INT)) FROM x;
SELECT NULL IN (SELECT * FROM x) FROM x;
SELECT SUM(x) FROM x WHERE 1 IN (SELECT * FROM x);
PRAGMA x;
CREATE TABLE x (x INT, x INT[]);
INSERT INTO x VALUES (1, [1, 3, 7]), (2, [8, NULL]), (3, [3, NULL, 4]), (NULL, CAST([] AS INT[]));
SELECT * FROM x JOIN LATERAL (SELECT UNNEST(x.x)) AS x ON (x = x) ORDER BY x;
SELECT * FROM x JOIN LATERAL (SELECT UNNEST(x.x)) AS x ON (x <> x) ORDER BY x, x;
SELECT * FROM x JOIN LATERAL (SELECT UNNEST(x.x)) AS x ON (x < x) ORDER BY x, x;
SELECT * FROM x JOIN LATERAL (SELECT UNNEST(x.x)) AS x ON (x >= x) ORDER BY x, x;
SELECT * FROM x JOIN LATERAL (SELECT UNNEST([x.x * x.x])) AS x ON (x >= x) ORDER BY x, x;
SELECT * FROM x JOIN LATERAL (SELECT x FROM x AS x WHERE x > x) AS x ON (x >= x) ORDER BY x, x;
SELECT * FROM x JOIN LATERAL (SELECT x FROM x AS x WHERE x < x) AS x ON (x >= x) ORDER BY x, x;
COPY (SELECT CAST('2000-01-01' AS DATE) AS x) TO '__TEST_DIR__/datetest.csv';
CREATE VIEW x AS SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM (SELECT CAST('1992-01-01' AS DATE) AS x), x;
SELECT * FROM (SELECT 42 AS x) AS x, (SELECT x + x + 1 FROM (SELECT 1) AS x, (SELECT (SELECT (SELECT x.x + 1)) + 1) AS x);
SELECT NULL FROM (SELECT 42 AS x) AS x, LATERAL (SELECT NULL FROM (SELECT NULL) AS x, (SELECT (SELECT (SELECT x.x))) AS x) AS x;
PRAGMA x;
SELECT x, x, x FROM (VALUES (1), (2)) AS x, LATERAL (SELECT COUNT(*), COUNT(x) FROM (SELECT 1, 2 WHERE 1 = x) AS x GROUP BY GROUPING SETS ((), (x), (x, x))) AS x ORDER BY ALL;
SELECT x, x FROM (VALUES (1), (2)) AS x, LATERAL (SELECT SUM(x) FROM (SELECT 1, 2 WHERE 1 = x) AS x GROUP BY GROUPING SETS ((), (x), (x, x))) AS x ORDER BY ALL;
SELECT * FROM (VALUES (1), (2)) AS x, LATERAL (SELECT SUM(x) FROM (SELECT 42 AS x) WHERE x = 1) ORDER BY ALL;
SELECT * FROM (VALUES (1), (2)) AS x LEFT JOIN (SELECT SUM(x) FROM (SELECT 42 AS x) WHERE x = 1) ON (1 = 1) ORDER BY ALL;
SET x = 'nulls_first';
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3), (NULL);
SELECT * FROM x, (SELECT SUM(x)) AS x;
SELECT * FROM x, LATERAL (SELECT SUM(x)) AS x;
SELECT * FROM x AS x, LATERAL (SELECT SUM(x + x.x) FROM x) AS x ORDER BY x;
SET x = 'nulls_first';
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3), (NULL);
SELECT * FROM x, (SELECT [x + 1]) AS x, (SELECT UNNEST(x)) AS x ORDER BY x;
SELECT * FROM x, LATERAL (SELECT [x + 1]) AS x, LATERAL (SELECT UNNEST(x)) AS x ORDER BY x;
SELECT * FROM x CROSS JOIN LATERAL (SELECT [x + 1]) AS x CROSS JOIN LATERAL (SELECT UNNEST(x)) AS x ORDER BY x;
SELECT * FROM x, (SELECT x) ORDER BY x;
SELECT * FROM x, LATERAL (SELECT x.*) AS x ORDER BY x;
SELECT * FROM x, LATERAL (SELECT *) AS x ORDER BY x;
PRAGMA x;
CREATE TABLE x (x INT, x AS (x + 5));
INSERT INTO x VALUES (1), (2), (3), (NULL);
SELECT * FROM x, (SELECT x + 10) ORDER BY x;
PRAGMA x;
CREATE FUNCTION x(x) AS (x + x);
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3), (NULL);
SELECT * FROM x, (SELECT MY_FUNC(x)) ORDER BY x;
SET x = 'nulls_first';
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3), (NULL);
SELECT x.x, SUM(x.x), COUNT(*) FROM x AS x, LATERAL (SELECT x.x + x.x FROM x AS x, LATERAL (SELECT x.x + x.x FROM x AS x) AS x) AS x GROUP BY x.x ORDER BY x.x;
SELECT x.x, SUM(x.x), COUNT(*) FROM x AS x, LATERAL (SELECT x.x + x.x FROM x AS x, LATERAL (SELECT x.x + x.x + x.x FROM x AS x) AS x) AS x GROUP BY x.x ORDER BY x.x;
SELECT (SELECT x + x FROM (SELECT x.x + 1) AS x, LATERAL (SELECT x + 1) AS x) FROM x AS x ORDER BY x;
SELECT * FROM (SELECT 42) AS x WHERE x IN (SELECT x FROM (SELECT 42) AS x, (SELECT x * 2) AS x, (SELECT x + x) AS x WHERE x IN (SELECT x * 3 FROM (SELECT 42 AS x) AS x WHERE x - x = x));
SELECT * FROM (SELECT 42) AS x, (SELECT * FROM (SELECT 142 AS x) AS x, (SELECT 1 WHERE x - x = 100) AS x);
SELECT * FROM (SELECT 42) AS x, (SELECT 22) AS x, (SELECT 1 WHERE x + x = 64) AS x;
SELECT * FROM (SELECT 64) AS x, (SELECT 22) AS x, (SELECT 1 WHERE x + x = 64) AS x;
SELECT * FROM (SELECT 42) AS x, (SELECT 22) AS x, (SELECT x + x WHERE x + x = 64) AS x;
SELECT * FROM (SELECT x, x, x FROM (SELECT 42) AS x, (SELECT x * 2) AS x, (SELECT x + x) AS x);
SELECT * FROM (SELECT x, x, x FROM (SELECT 42) AS x, (SELECT x * 2) AS x, (SELECT x + x) AS x);
SELECT * FROM (SELECT 42) AS x, (SELECT * FROM (SELECT 142 AS x) AS x, (SELECT 1 WHERE x + x = 0) AS x);
SELECT * FROM (SELECT * FROM (SELECT 42) AS x, (SELECT 22) AS x, (SELECT 1 WHERE x + x = 64) AS x);
SELECT * FROM (SELECT * FROM (SELECT 42) AS x, (SELECT * FROM (SELECT 142 AS x) AS x, (SELECT 1 WHERE x - x = 100) AS x));
SELECT * FROM (SELECT * FROM (SELECT 42) AS x, (SELECT * FROM (SELECT 142 AS x) AS x, (SELECT 1 WHERE x - x = -100) AS x));
SELECT * FROM (SELECT 42) AS x, (SELECT * FROM (SELECT 142 AS x) AS x, (SELECT * FROM (SELECT 242 AS x) AS x, (SELECT 1 WHERE x + x + x = 426) AS x));
SELECT x FROM (SELECT 42) AS x WHERE x * 2 IN (SELECT x FROM (SELECT x) AS x, (SELECT x + x) AS x, (SELECT x + x) AS x);
SELECT * FROM (SELECT 42) AS x WHERE x IN (SELECT x FROM (SELECT 42) AS x WHERE x IN (SELECT x FROM (SELECT 42 AS x) AS x WHERE x - x IN (SELECT * FROM (SELECT x + 5))));
SELECT * FROM (SELECT 42) AS x, (SELECT * FROM (SELECT 142 AS x) AS x, (SELECT 1 WHERE x + x = 0) AS x);
SELECT * FROM (SELECT 42) AS x, (SELECT 64) AS x WHERE x IN (SELECT x FROM (SELECT 21 * x * x) AS x, (SELECT x) AS x);
SELECT * FROM (SELECT 42) AS x WHERE x IN (SELECT x FROM (SELECT x) AS x, (SELECT x * x / 2 * 2 / x) AS x);
SELECT * FROM (SELECT 10) AS x WHERE x IN (SELECT x FROM (SELECT 20) AS x WHERE x IN (SELECT x FROM (SELECT 30) AS x WHERE x - x IN (SELECT * FROM (SELECT x + 100))));
SELECT * FROM (SELECT 42) AS x WHERE x IN (SELECT x FROM (SELECT 42) AS x WHERE x IN (SELECT x FROM (SELECT 42 AS x) AS x WHERE x - x IN (SELECT * FROM (SELECT 0))));
SELECT * FROM (SELECT 42) AS x WHERE x IN (SELECT x FROM (SELECT 42) AS x WHERE x IN (SELECT x FROM (SELECT x) AS x WHERE x * 2 - x IN (SELECT * FROM (SELECT x))));
SELECT * FROM (SELECT 42) AS x, (SELECT 22) AS x, (SELECT x + x WHERE x + x = (SELECT 64)) AS x;
SELECT * FROM (SELECT 42) AS x WHERE x IN (SELECT x FROM (SELECT x) AS x WHERE x = 0);
SELECT * FROM (SELECT 42) AS x WHERE x IN (SELECT x FROM (SELECT 42) AS x WHERE x IN (SELECT x FROM (SELECT 42 AS x) AS x, (SELECT x + 5) AS x WHERE x + 2 * x IN (SELECT x FROM (SELECT x + 5), (SELECT x * 2) AS x, (SELECT x + x) AS x WHERE x - x IN (SELECT x * 2))));
SELECT (SELECT (SELECT x FROM (SELECT x) AS x, (SELECT x) AS x)) FROM (SELECT 42) AS x;
SELECT x FROM (SELECT 42) AS x WHERE x IN (SELECT x FROM (SELECT 42) AS x, (SELECT 42) AS x, (SELECT x + x + x) AS x);
SELECT * FROM (SELECT 42) AS x, (SELECT * FROM (SELECT 142) AS x, (SELECT * FROM (SELECT 242) AS x, (SELECT 58 WHERE x + x + x = 426) AS x)) WHERE x - x - x IN (SELECT x FROM (SELECT 42) AS x WHERE x IN (SELECT x FROM (SELECT 42 AS x) AS x, (SELECT x + 5) AS x WHERE x + 2 * x IN (SELECT x FROM (SELECT x + 5), (SELECT x * 2) AS x, (SELECT x + x) AS x WHERE x - x IN (SELECT x * 2))));
SELECT (SELECT (SELECT x FROM (SELECT x) AS x, (SELECT x) AS x)) FROM (SELECT 42) AS x WHERE x IN (SELECT x FROM (SELECT 42) AS x WHERE x IN (SELECT x FROM (SELECT 42 AS x) AS x, (SELECT x + 5) AS x WHERE x + 2 * x IN (SELECT x FROM (SELECT x + 5), (SELECT x * 2) AS x, (SELECT x + x) AS x WHERE x - x IN (SELECT x * 2))));
SELECT * FROM (SELECT 42) AS x WHERE x IN (SELECT x FROM (SELECT 42) AS x WHERE x IN (SELECT x FROM (SELECT (SELECT x - x AS x FROM (SELECT x) AS x, (SELECT x + x) AS x) FROM (SELECT 42) AS x), (SELECT x + 5) AS x WHERE x + 2 * x IN (SELECT x FROM (SELECT x + 5), (SELECT x * 2) AS x, (SELECT x + x) AS x WHERE x - x IN (SELECT x * 2))));
SELECT (SELECT x.* FROM (SELECT 1) AS x, (SELECT (SELECT x FROM (SELECT MAX(x) FROM x AS x) AS x GROUP BY x HAVING (COUNT(*)) = x)) AS x) FROM x AS x;
CREATE VIEW x AS (WITH RECURSIVE x AS (SELECT 1 UNION SELECT x + 1 FROM x WHERE x < 5) SELECT * FROM x ORDER BY x);
SELECT SUM(x) FROM x WHERE x IN (SELECT x FROM (SELECT 1) AS x, (SELECT 1 + x) AS x, (SELECT x - x FROM x) AS x);
CREATE VIEW x AS (WITH RECURSIVE x AS (SELECT 0 UNION SELECT 10 * x FROM x WHERE x < 5) SELECT * FROM x ORDER BY x);
SELECT * FROM x WHERE x IN (SELECT x FROM (SELECT 10) AS x, (SELECT 10 + x) AS x, (SELECT x + 10 * x FROM x) AS x) GROUP BY x HAVING x % 20 = 0 ORDER BY x DESC;
PRAGMA x;
SELECT x FROM (SELECT LIST(DISTINCT {'x': UUID(), 'x': 1}) AS x FROM x) AS x, (SELECT SUM(x.x) AS x FROM (SELECT UNNEST(x) AS x) AS x) AS x;
SET x = 'nulls_first';
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3), (NULL);
SELECT * FROM x LEFT JOIN LATERAL (SELECT x.x + 1) AS x ON (x = x) ORDER BY x;
SELECT * FROM x LEFT JOIN LATERAL (SELECT x.x) AS x ON (x = x) ORDER BY x;
SELECT * FROM x LEFT JOIN LATERAL (SELECT * FROM x WHERE x <> x.x) AS x ON (x = x) ORDER BY x;
SELECT * FROM x INNER JOIN LATERAL (SELECT x.x WHERE x.x IN (1, 3)) AS x ON (x = x) ORDER BY x;
SELECT * FROM x LEFT JOIN LATERAL (SELECT x.x WHERE x.x IN (1, 3)) AS x ON (x = x) ORDER BY x;
SELECT * FROM x LEFT JOIN LATERAL (SELECT x.x WHERE x.x IN (1, 3)) AS x ON (x + x < x) ORDER BY x;
SELECT * FROM (SELECT * FROM x WHERE x = 2) AS x FULL JOIN LATERAL (SELECT x.x WHERE x.x IN (1, 3)) AS x ON (x = x) ORDER BY x, x;
SELECT * FROM (SELECT * FROM x WHERE x = 2) AS x RIGHT JOIN LATERAL (SELECT x.x WHERE x.x IN (1, 3)) AS x ON (x = x) ORDER BY x, x;
PRAGMA x;
SELECT * FROM (SELECT 42) AS x, (SELECT x, ROW_NUMBER() OVER () QUALIFY NULL);
SELECT * FROM (SELECT 42) AS x, (SELECT x * 2 QUALIFY ROW_NUMBER() OVER () < 10);
CREATE TABLE x AS SELECT [x, NULL, x + 1, x + 2, NULL] AS x FROM x AS x;
SELECT SUM(x) FROM x, UNNEST(x) AS x;
CREATE TABLE x AS SELECT ['longstringprefix_' || x, NULL, 'longstringprefix_' || (x + 1), 'longstringprefix_' || (x + 2), NULL] AS x FROM x AS x;
SELECT SUM(CAST(REPLACE(x, 'longstringprefix_', '') AS BIGINT)) FROM x, UNNEST(x) AS x;
SET x = 'nulls_first';
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3), (NULL);
SELECT * FROM x, LATERAL (VALUES (x.x + 1)) AS x ORDER BY x;
SELECT * FROM x AS x, x AS x JOIN LATERAL (VALUES (x.x)) AS x ON (TRUE) ORDER BY x.x, x.x;
PRAGMA x;
SELECT x, x, x FROM x AS x, LATERAL (SELECT x, SUM(x + x) AS x FROM x AS x GROUP BY x) AS x ORDER BY 1, 2;
CREATE TABLE x AS SELECT x * 10 AS x FROM x AS x;
SELECT * FROM (VALUES (100), (300), (500)) AS x, LATERAL (SELECT CAST((x / 2) AS INT) AS x, ARRAY_AGG(CAST(x AS INT)) AS x, COUNT(*) AS x FROM x WHERE x < x.x GROUP BY x / 2) AS x ORDER BY 1, 2, 4, 3;
CREATE TABLE x (x SMALLINT);
INSERT INTO x (x) VALUES ('0   '), ('  1234 '), ('    -1234'), ('32767') /* largest and smallest values */, ('-32767');
CREATE TABLE x (x INT);
INSERT INTO x (x) VALUES ('   0  '), ('123456     '), ('    -123456'), ('2147483647') /* largest and smallest values */, ('-2147483647');
CREATE TABLE x (x TINYINT, x TINYINT);
INSERT INTO x VALUES ('  123   ', '  456'), ('123   ', '4567890123456789'), ('4567890123456789', '123'), (4567890123456789, '4567890123456789'), ('+4567890123456789', '-4567890123456789');
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('doh!'), ('hi de ho neighbor');
CREATE TABLE x (x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x TEXT, x TEXT, x TEXT);
COPY x FROM 'data/csv/tenk.tsv.gz' WITH (DELIMITER '\t');
SELECT * FROM x AS x, LATERAL (SELECT 1 AS x FROM (SELECT x.x AS x, x.x AS x FROM x AS x, x AS x) AS x RIGHT JOIN x AS x ON (x.x > 1) WHERE x.x = x.x) AS x WHERE x.x > 0;
SELECT x.x FROM x AS x INNER JOIN x AS x ON x.x = x.x INNER JOIN x AS x LEFT JOIN x AS x INNER JOIN (SELECT 64 AS x FROM x AS x, LATERAL (SELECT ABS(x.x) + RANDOM()) AS x WHERE x.x < 0) AS x ON x.x = x.x ON x.x = x.x ON x.x = x.x WHERE x.x < x.x;
SELECT * FROM (SELECT 1 AS x) AS x LEFT JOIN (SELECT 2 AS x) AS x ON (TRUE), LATERAL (SELECT x.x AS x LIMIT 1) AS x;
SELECT * FROM (SELECT 0 AS x) AS x LEFT JOIN (SELECT TRUE AS x) AS x ON TRUE, LATERAL (SELECT TRUE AS x UNION ALL SELECT x AS x) AS x WHERE x;
SELECT * FROM x AS x LEFT JOIN x AS x ON x.x = 123, LATERAL (SELECT x.x, x.x FROM x AS x LIMIT 1) AS x WHERE x.x = x.x;
SELECT * FROM x AS x LEFT JOIN x AS x ON x.x = 123, LATERAL (SELECT x.x, x.x FROM x AS x LIMIT 1) AS x, LATERAL (SELECT x.* FROM x AS x LIMIT 1) AS x WHERE x.x = x.x;
SELECT 1 FROM x AS x INNER JOIN x AS x ON (x.x = 'foo') LEFT JOIN x AS x ON (x.x = 'foo') LEFT JOIN x AS x ON (x.x = x.x), LATERAL (SELECT x.x AS x FROM x AS x LIMIT 1) AS x WHERE x.x = x.x;
SELECT x.* FROM x AS x LEFT JOIN x AS x JOIN (SELECT x.x AS x, x.x AS x, 42 AS x FROM x AS x, x AS x) AS x ON x.x = x.x ON x.x = x.x, LATERAL (SELECT x.*, x.*, x.* FROM x LIMIT 1) AS x WHERE x.x = 0;
SELECT x.*, x.x, x.x FROM x AS x LEFT JOIN x AS x ON x.x = 1 LEFT JOIN LATERAL (SELECT x.x + 1 AS x) AS x ON TRUE LEFT JOIN x AS x ON x.x = x.x WHERE x = 456;
SELECT x, x.* FROM x AS x, LATERAL (SELECT * FROM x AS x WHERE x = x.x) AS x;
SELECT x, x.* FROM x AS x, LATERAL (SELECT x FROM x WHERE x = x) AS x;
SELECT x, x.* FROM x AS x LEFT JOIN LATERAL (SELECT x, x FROM x WHERE x = x) AS x ON TRUE ORDER BY ALL;
SELECT *, (SELECT x FROM (SELECT x AS x) AS x, (SELECT x AS x) AS x) FROM x;
SELECT *, (SELECT x FROM (SELECT x AS x) AS x, LATERAL (SELECT x AS x) AS x) FROM x;
SELECT COUNT(*) FROM x AS x, LATERAL GENERATE_SERIES(1, x) AS x;
SELECT * FROM x AS x, LATERAL (SELECT * FROM x AS x WHERE x = x UNION ALL SELECT * FROM x AS x WHERE x = x) AS x;
SELECT COUNT(*) FROM x AS x, x AS x JOIN LATERAL (VALUES (x.x)) AS x ON x.x = x.x;
SELECT COUNT(*) FROM x AS x, x AS x JOIN LATERAL (VALUES (x.x), (-1)) AS x ON x.x = x.x;
SELECT * FROM (SELECT x / 2 AS x FROM x) AS x JOIN x AS x ON x = x, LATERAL (SELECT x) AS x;
SELECT * FROM (SELECT x AS x FROM x) AS x JOIN x AS x ON x = x, LATERAL (VALUES (x)) AS x;
SELECT * FROM ((SELECT x / 2 AS x FROM x) AS x JOIN x AS x ON x = x) AS x, LATERAL (SELECT x) AS x;
SELECT * FROM (VALUES (1)) AS x, LATERAL GENERATE_SERIES(x, 4) AS x ORDER BY ALL;
SELECT * FROM (SELECT x / 1000000000 FROM x) AS x, LATERAL GENERATE_SERIES(x, 4) AS x ORDER BY ALL;
SELECT * FROM (VALUES (1)) AS x, LATERAL (VALUES (x)) AS x;
SELECT * FROM (VALUES (1)) AS x, LATERAL (SELECT x FROM x) AS x;
SELECT x.* FROM x AS x LEFT JOIN (SELECT x, COALESCE(x, 0) AS x FROM x) AS x ON x.x = x.x, LATERAL (SELECT x.x, x.x, x.x) AS x ORDER BY 1, 2;
SELECT 1 FROM x AS x, LATERAL (SELECT MAX(x.x) FROM x AS x) AS x;
CREATE TABLE x AS SELECT x AS x, -x AS x FROM x;
SELECT * FROM x;
UPDATE x SET x = x FROM (SELECT * FROM x WHERE x = x) AS x;
UPDATE x SET x = x FROM (SELECT * FROM x WHERE x = x.x) AS x;
UPDATE x SET x = x FROM LATERAL (SELECT * FROM x WHERE x = x) AS x;
UPDATE x SET x = x FROM x AS x, LATERAL (SELECT * FROM x WHERE x = x.x AND x = -2147483647) AS x;
SELECT * FROM x;
DELETE FROM x USING (SELECT * FROM x WHERE x = x) AS x;
DELETE FROM x USING (SELECT * FROM x WHERE x = x.x) AS x;
DELETE FROM x USING LATERAL (SELECT * FROM x WHERE x = x) AS x;
SET x = 'nulls_first';
PRAGMA x;
SELECT (SELECT MIN(x) FROM UNNEST((SELECT x)) AS x) FROM (SELECT [1, 2, 3, NULL]) AS x;
SELECT (SELECT MIN(x) FROM UNNEST((SELECT (SELECT x))) AS x) FROM (SELECT [1, 2, 3, NULL]) AS x;
SELECT * FROM (SELECT [1, 2, 3] AS x), UNNEST((SELECT (SELECT (SELECT x))));
SELECT (SELECT MIN(x) FROM UNNEST(x) AS x) FROM (SELECT [1, 2, 3, NULL]) AS x;
SELECT * FROM (SELECT 42) AS x, (SELECT x.x + 1);
SELECT * FROM (SELECT 42) AS x CROSS JOIN LATERAL (SELECT x.x + 1);
SELECT * FROM (SELECT 42 UNION ALL SELECT 84) AS x, (SELECT x.x + 1) ORDER BY ALL;
SELECT (SELECT MIN(x) FROM UNNEST(x) AS x) FROM (SELECT [1, 2, 3, NULL]) AS x;
SELECT * FROM (SELECT [42, 43, 44]) AS x, (SELECT UNNEST(x.x)) ORDER BY ALL;
SELECT * FROM (SELECT [42, 43, 44]) AS x, (SELECT UNNEST(x.x)) AS x WHERE x = 43;
SELECT * FROM (SELECT [42, 43, 44] UNION ALL SELECT [45, NULL, 46]) AS x, (SELECT UNNEST(x.x)) AS x ORDER BY ALL;
SELECT SUM(x) FROM (SELECT [42, 43, 44] UNION ALL SELECT [45, NULL, 46]) AS x, (SELECT UNNEST(x.x)) AS x;
SELECT x, SUM(x) FROM (SELECT [42, 43, 44] UNION ALL SELECT [45, NULL, 46]) AS x, (SELECT UNNEST(x.x)) AS x GROUP BY x ORDER BY x;
SELECT * FROM (SELECT [42, 43, 44]) AS x JOIN (SELECT UNNEST(x.x)) AS x ON (TRUE) ORDER BY ALL;
SELECT * FROM (SELECT [42, 43, 44]) AS x JOIN LATERAL (SELECT UNNEST(x.x)) AS x ON (TRUE) ORDER BY ALL;
SELECT * FROM (SELECT [42, 43, 44]) AS x JOIN LATERAL (SELECT UNNEST(x.x)) AS x ON (x[1] = x);
SELECT * FROM (SELECT [42, 43, 44]) AS x JOIN LATERAL (SELECT UNNEST(x.x)) AS x ON (x[1] < x) ORDER BY ALL;
SELECT * FROM (SELECT [42, 43, 44]) AS x JOIN LATERAL (SELECT UNNEST(x.x)) AS x ON (FALSE) ORDER BY ALL;
SELECT * FROM (SELECT 42) AS x JOIN LATERAL (SELECT x.x + 1) AS x ON (TRUE);
SELECT * FROM (SELECT 42) AS x JOIN LATERAL (SELECT x.x + 1) AS x ON (x + x >= 80);
SELECT * FROM (SELECT [42, 43, 44]) AS x JOIN LATERAL (SELECT * FROM UNNEST(x.x)) AS x ON (TRUE) ORDER BY x;
CREATE TABLE x (x INT, x TEXT, x TEXT, x INT);
CREATE TABLE x (x INT, x TEXT, x TEXT, x INT, x INT);
INSERT INTO x VALUES (1, 'Mark', 'CS', 2017);
INSERT INTO x VALUES (2, 'Dirk', 'CS', 2017);
INSERT INTO x VALUES (1, 'Database Systems', 'CS', 10, 2015);
INSERT INTO x VALUES (1, 'Graphics', 'CS', 9, 2016);
INSERT INTO x VALUES (2, 'Database Systems', 'CS', 7, 2015);
INSERT INTO x VALUES (2, 'Graphics', 'CS', 7, 2016);
SELECT x, x FROM x JOIN LATERAL (SELECT SUM(x) AS x FROM x WHERE x.x = x.x) AS x ON TRUE ORDER BY x DESC;
SELECT x, x FROM x, (SELECT SUM(x) AS x FROM x WHERE x.x = x.x) AS x ORDER BY x DESC;
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3), (4), (4);
SELECT ARRAY(SELECT DISTINCT x FROM x ORDER BY x DESC) AS x, ARRAY(SELECT DISTINCT x FROM x ORDER BY x DESC) AS x, ARRAY(SELECT DISTINCT x FROM x ORDER BY x DESC) AS x;
SELECT ARRAY(SELECT UNNEST(x) AS x ORDER BY x DESC) AS x FROM (VALUES ([NULL, 1, 2, 3, 4]), ([5, 6, NULL, 7, 8]), ([]), ([10, 11, 12])) AS x;
SELECT ARRAY(SELECT UNNEST(x) AS x ORDER BY x DESC NULLS FIRST) AS x FROM (VALUES ([NULL, 1, 2, 3, 4]), ([5, 6, NULL, 7, 8]), ([]), ([10, 11, 12])) AS x;
SELECT ARRAY(SELECT x FROM x ORDER BY x DESC);
SELECT ARRAY(SELECT x FROM x ORDER BY x.x);
SELECT ARRAY(SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 ORDER BY 1) AS x;
SELECT ARRAY(SELECT DISTINCT x FROM x ORDER BY x.x DESC) AS x;
SELECT ARRAY(SELECT DISTINCT x FROM x UNION ALL SELECT DISTINCT x FROM x ORDER BY x.x DESC) AS x;
SELECT ARRAY(SELECT DISTINCT x FROM x ORDER BY x.x DESC) AS x;
SELECT ARRAY(SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 ORDER BY 1 DESC) AS x;
SELECT ARRAY(SELECT * FROM UNNEST(['a', 'b']) AS x ORDER BY CASE WHEN x = 'a' THEN 100 ELSE 1 END) AS x;
SELECT ARRAY(SELECT * FROM UNNEST(['a', 'b']) AS x ORDER BY CASE WHEN x = 'a' THEN 100 ELSE 1 END DESC) AS x;
SELECT ARRAY(SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 ORDER BY -1) AS x;
SELECT ARRAY(SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 ORDER BY 2) AS x;
SELECT ARRAY(SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 ORDER BY 'hello world') AS x;
SET x = 'nulls_first';
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3), (NULL);
SELECT x, ARRAY(SELECT 42) AS x FROM x AS x ORDER BY x;
SELECT x, ARRAY(SELECT x FROM x WHERE x.x = x) AS x FROM x AS x ORDER BY x;
SELECT x, ARRAY(SELECT x FROM x WHERE x > x.x ORDER BY x ASC NULLS FIRST) AS x FROM x AS x ORDER BY x;
SELECT x, ARRAY(SELECT x.x FROM x AS x, x AS x, x AS x, x AS x WHERE x.x = x.x LIMIT 3) AS x FROM x ORDER BY x;
SELECT x, ARRAY(SELECT x.x FROM x AS x, x AS x, x AS x, x AS x WHERE x.x = x.x LIMIT 3 OFFSET 3) AS x FROM x ORDER BY x;
SELECT x, ARRAY(SELECT x.x FROM x AS x, x AS x, x AS x, x AS x WHERE x.x = x.x LIMIT 3 OFFSET 62) AS x FROM x ORDER BY x;
SELECT ARRAY(SELECT 1, 2);
PRAGMA x;
SELECT 1 FROM (SELECT 4) AS x WHERE NOT (3) IN (COALESCE((SELECT 1 WHERE FALSE), x.x));
PRAGMA x;
SELECT (SELECT x FROM x) FROM x;
SELECT (SELECT x FROM x) FROM x;
SELECT (SELECT x FROM x) FROM x;
SELECT * FROM x WHERE (SELECT SUM(x) > 0);
SELECT * FROM x WHERE (SELECT SUM(x) FROM x);
SELECT * FROM x WHERE (SELECT SUM(x) OVER () FROM x);
SELECT * FROM x GROUP BY (SELECT SUM(x) OVER () FROM x);
SELECT * FROM x LIMIT (SELECT SUM(x) FROM x LIMIT 1);
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (0, 5.0885), (1, 223.88), (2, 359.1082), (4, 949.4105);
SET x = 0;
SELECT x, x, (SELECT ["x", "x", "x", "x", "x"] FROM (SELECT x, x) AS x PIVOT(AVG(x) FOR x IN (0, 1, 2, 3, 4)) AS x) FROM x;
SELECT x, x, (SELECT x FROM (SELECT x, x) AS x PIVOT(AVG(x) FOR x IN (0, 1, 2, 3, 4)) AS x UNPIVOT(x FOR x IN (0, 1, 2, 3, 4))) FROM x;
SELECT x, x, (SELECT LIST(x) FROM (SELECT x, x) AS x PIVOT(AVG(x) FOR x IN (0, 1, 2, 3, 4)) AS x UNPIVOT INCLUDE NULLS (x FOR x IN (0, 1, 2, 3, 4))) FROM x;
SET x = DEFAULT;
SET x = DEFAULT;
SET x = DEFAULT;
SET x = 'nulls_first';
PRAGMA x;
CREATE TABLE x AS SELECT CAST((x % 10) AS INT) AS x, CAST(((x * 2) % 10) AS INT) AS x FROM x AS x;
SELECT x, x, (SELECT MAX(x) FROM (VALUES (x), (x)) AS x) AS x FROM x ORDER BY ALL;
SELECT x, x, (SELECT MAX(x) FROM (VALUES (x), (x), (3), (NULL), (5)) AS x) AS x FROM x ORDER BY ALL;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3), (NULL);
SELECT (SELECT MAX(x) FROM (VALUES ((SELECT x))) AS x) FROM x ORDER BY x;
SELECT (SELECT MAX(x) FROM (VALUES ((SELECT * FROM (VALUES (x)) AS x))) AS x) FROM x ORDER BY x;
SELECT (SELECT MAX(x) FROM (VALUES (x)) AS x JOIN (VALUES (x)) AS x USING (x)) FROM x ORDER BY x;
CREATE TABLE x AS SELECT CAST((x % 10) AS INT) AS x, CAST(((x * 2) % 10) AS INT) AS x FROM x AS x;
SELECT SUM(x), SUM(x), SUM(GREATEST(x, x)), SUM((SELECT MAX(x) FROM (VALUES (x), (x)) AS x)) AS x FROM x;
SELECT SUM(x), SUM(x), SUM(GREATEST(x, x)), SUM((SELECT MAX(x) FROM (VALUES (x), (x), (x), (x), (x), (x)) AS x)) AS x FROM x;
CREATE TABLE x AS SELECT CASE WHEN x % 7 = 2 THEN NULL ELSE CAST((x % 10) AS INT) END AS x, CASE WHEN x % 9 = 2 THEN NULL ELSE CAST(((x * 2) % 10) AS INT) END AS x FROM x AS x;
SELECT SUM(x), SUM(x), SUM((SELECT MAX(x) FROM (VALUES (x), (x)) AS x)) AS x FROM x;
SELECT SUM(x), SUM(x), SUM((SELECT MAX(x) FROM (VALUES (x), (x), (NULL), (NULL), (6)) AS x)) AS x FROM x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (NULL, 2), (1, NULL);
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3);
SELECT (x, x) IN (SELECT x, x + 1 FROM x) FROM x;
PRAGMA x;
SELECT (SELECT MAX((SELECT x.x AS x))) FROM (SELECT NULL AS x) AS x;
SELECT (SELECT MAX(42) OVER (PARTITION BY (SELECT x.x AS x)) AS x) FROM (SELECT NULL AS x) AS x;
SELECT (SELECT MAX((SELECT x.x AS x)) OVER () AS x) FROM (SELECT NULL AS x) AS x;
SET x = 'nulls_first';
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3), (NULL);
SELECT x, (SELECT * FROM x WHERE x > x.x ORDER BY x ASC NULLS FIRST LIMIT 1) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT * FROM x WHERE x > x.x ORDER BY x DESC NULLS FIRST LIMIT 1) AS x FROM x AS x ORDER BY x;
SELECT x, ARRAY(SELECT * FROM x WHERE x > x.x ORDER BY x) AS x FROM x AS x ORDER BY x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3), (NULL);
SELECT (1, 2) IN (SELECT x, x + 1 FROM x);
SELECT (CAST('1992-01-02' AS DATE), 2) IN (SELECT CAST('1992-01-01' AS DATE) + INTERVAL (x) DAYS, x + 1 FROM x);
SELECT (1, 2) IN (SELECT (x, x + 1) FROM x);
SELECT ROW(1) IN (SELECT x FROM x);
SELECT ROW(1, 2) IN (SELECT x, x + 1 FROM x);
SELECT ROW(1, 2) IN (SELECT x, x + 2 FROM x);
SELECT ROW(1, 2) IN (SELECT x, x + 2 FROM x WHERE NOT x IS NULL);
SELECT 1 WHERE (1, 2) IN (SELECT 1, 2);
SELECT 1 WHERE NOT (1, 2) IN (SELECT 1, 2);
SELECT (1, 2) IN (SELECT (x, x + 1, x + 2) FROM x);
SELECT ROW(1, 2) IN (SELECT x.x, x.x + 1) FROM x AS x;
SELECT ROW(1, 2) IN (SELECT x.x, x.x + 1) FROM x AS x;
SET x = 'nulls_first';
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3), (NULL);
SELECT x, (SELECT x.x FROM (SELECT * FROM x WHERE x = x.x) AS x) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT x.x FROM (SELECT x FROM x WHERE x = x.x) AS x INNER JOIN (SELECT x FROM x WHERE x = 4 - x.x) AS x ON x.x > x.x) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT x.x FROM x AS x, x AS x WHERE x.x = x.x AND x.x = 4 - x.x) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT x.x FROM x AS x INNER JOIN x AS x ON x.x = x.x AND x.x = 4 - x.x) AS x FROM x AS x ORDER BY x;
SELECT * FROM x AS x INNER JOIN x AS x ON (SELECT 2 * SUM(x) * x.x FROM x) = (SELECT SUM(x) * x.x FROM x) ORDER BY x.x;
SELECT * FROM x AS x INNER JOIN x AS x ON (SELECT x.x = x.x) ORDER BY x.x;
SELECT * FROM x AS x INNER JOIN x AS x ON (SELECT x.x = x FROM x WHERE x.x = x) ORDER BY x.x;
SELECT * FROM x AS x LEFT OUTER JOIN x AS x ON (SELECT 2 * SUM(x) * x.x FROM x) = (SELECT SUM(x) * x.x FROM x) ORDER BY x.x;
SELECT * FROM x AS x LEFT OUTER JOIN x AS x ON (SELECT CASE WHEN x.x + x.x > 10 THEN TRUE ELSE FALSE END) ORDER BY x.x;
SELECT * FROM x AS x LEFT OUTER JOIN x AS x ON x.x = x.x AND (SELECT CASE WHEN x.x > 2 THEN TRUE ELSE FALSE END) ORDER BY x.x;
SELECT * FROM x AS x LEFT OUTER JOIN x AS x ON x.x = x.x AND (SELECT CASE WHEN x.x > 2 THEN TRUE ELSE FALSE END) ORDER BY x.x;
SELECT x, (SELECT SUM(x.x) FROM x AS x LEFT OUTER JOIN x AS x ON x.x = x.x OR x.x = x.x - 1) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT SUM(x.x) FROM x AS x FULL OUTER JOIN x AS x ON x.x = x.x OR x.x = x.x - 1) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT ROW_NUMBER() OVER (ORDER BY x)) FROM x AS x ORDER BY x;
SELECT x, (SELECT x FROM x WHERE x = x.x UNION SELECT x FROM x WHERE x = x.x) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT x FROM x WHERE NOT x IS NULL EXCEPT SELECT x FROM x WHERE x <> x.x) AS x FROM x AS x WHERE NOT x IS NULL ORDER BY x;
SELECT x, (SELECT x FROM x WHERE x = x.x INTERSECT SELECT x FROM x WHERE x = x.x) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT x FROM x WHERE x = x.x UNION SELECT x FROM x WHERE x <> x.x EXCEPT SELECT x FROM x WHERE x <> x.x) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT (SELECT SUM(x) FROM x) + 42 + x.x) AS x FROM x AS x ORDER BY x;
PRAGMA x;
CREATE TABLE x (x TINYINT, x SMALLINT, x INT, x BIGINT, x TEXT, x DATE, x TIMESTAMP);
INSERT INTO x VALUES (1, 2, 3, 4, '5', CAST('1992-01-01' AS DATE), CAST('1992-01-01 00:00:00' AS TIMESTAMP));
SELECT EXISTS(SELECT x.x + x.x) FROM x AS x;
SELECT x.x + (SELECT x.x FROM x AS x WHERE EXISTS(SELECT x.x + x.x)) FROM x AS x;
SELECT 1 FROM x AS x JOIN x AS x ON (x.x = x.x) WHERE EXISTS(SELECT x.x FROM x AS x WHERE x.x + x.x < 100 AND EXISTS(SELECT x.x < CAST('2000-01-01' AS DATE)));
SELECT EXISTS(SELECT 1 WHERE (x.x > 100 OR 1) AND x.x < 100) FROM x AS x;
SELECT EXISTS(SELECT x.x, x.x WHERE x.x < 100) FROM x AS x;
SELECT * FROM x AS x LEFT JOIN x AS x ON (SELECT x.x) < 100;
SELECT * FROM x AS x LEFT JOIN x AS x ON (SELECT x.x) > 100;
SET x = 'nulls_first';
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3), (NULL);
SELECT x, (SELECT MIN(x) + x.x FROM x) FROM x AS x ORDER BY x;
SELECT x, (SELECT MIN(x + 2 * x.x) FROM x) FROM x AS x ORDER BY x;
SELECT x, SUM(x), (SELECT SUM(x) + SUM(x.x) FROM x) FROM x AS x GROUP BY x ORDER BY x;
SELECT x, SUM(x), (SELECT SUM(x) + COUNT(x.x) FROM x) FROM x AS x GROUP BY x ORDER BY x;
SELECT x, (SELECT COUNT(*) FROM x AS x WHERE x.x > x.x) FROM x AS x ORDER BY x;
SELECT x, (SELECT MIN(x + 2 * x.x) FROM x) FROM x AS x ORDER BY x;
SELECT (SELECT SUM(x.x)) FROM x AS x;
SELECT MIN(x), (SELECT SUM(x.x)) FROM x AS x;
SELECT x, (SELECT SUM(x.x)) FROM x AS x;
SELECT x + 1, (SELECT SUM(x.x)) FROM x AS x;
SELECT MIN(x), (SELECT SUM(x.x)) FROM x AS x;
SELECT (SELECT SUM(x.x)), (SELECT SUM(x.x)) FROM x AS x;
SELECT SUM(x), SUM((SELECT x FROM x WHERE x = x.x)) FROM x AS x;
SELECT SUM(x), (SELECT SUM(x) FROM x WHERE x > SUM(x.x)) FROM x AS x;
SELECT SUM((SELECT SUM(x))) FROM x;
SELECT x, (SELECT MIN(x) FROM x WHERE x > x.x) FROM x AS x ORDER BY x;
SELECT x, (SELECT MIN(x) + x.x FROM x WHERE x > x.x) FROM x AS x ORDER BY x;
SELECT x, (SELECT MIN(x) FROM x GROUP BY x.x) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT x FROM x GROUP BY x HAVING x = x.x) AS x FROM x AS x ORDER BY x;
SELECT x.x, SUM(x) FROM x AS x GROUP BY x.x HAVING SUM(x) = (SELECT MIN(x) FROM x WHERE x <> x.x + 1) ORDER BY 1;
SELECT x % 2 AS x, SUM(x) FROM x AS x GROUP BY x HAVING SUM(x) = (SELECT SUM(x) FROM x WHERE x <> x + 1) ORDER BY 1;
SELECT (SELECT x + SUM(x.x) FROM x WHERE x = 1 LIMIT 1) FROM x AS x;
SELECT (SELECT SUM(x) + SUM(x.x) FROM x) FROM x AS x ORDER BY 1;
SELECT (SELECT SUM(x) + SUM((CASE WHEN NOT x IS NULL THEN x * 0 ELSE 0 END) + x.x) FROM x) FROM x AS x ORDER BY 1;
SELECT x, (SELECT x + SUM(x.x) FROM x WHERE x = 1) FROM x AS x GROUP BY x ORDER BY x;
SELECT SUM((SELECT x + x.x FROM x WHERE x = 1)) FROM x AS x;
SELECT x, SUM(x.x), (SELECT SUM(x.x)) AS x FROM x AS x GROUP BY x ORDER BY x;
SELECT x, SUM(x.x), (SELECT SUM(x.x) FROM x) AS x FROM x AS x GROUP BY x ORDER BY x;
SELECT x.x AS x, (SELECT SUM(x + x) FROM x) AS x FROM x AS x GROUP BY x ORDER BY x;
SELECT (SELECT SUM(x.x * x) FROM x) FROM x AS x ORDER BY x;
SELECT x, (SELECT SUM(x.x)) AS x, (SELECT SUM(x.x)) AS x FROM x AS x GROUP BY x ORDER BY x;
SELECT x, (SELECT SUM(x.x) * SUM(x) FROM x) AS x FROM x AS x GROUP BY x ORDER BY x;
SELECT x AS x, (SELECT x * SUM(x) FROM x) AS x FROM x AS x GROUP BY x ORDER BY x;
SELECT x AS x, (SELECT x.x * SUM(x) FROM x) AS x FROM x AS x GROUP BY x ORDER BY x;
SELECT x, SUM((SELECT SUM(x) * x.x FROM x)) AS x FROM x AS x GROUP BY x ORDER BY x;
SELECT x, SUM((SELECT SUM(x) * SUM(x.x) FROM x)) AS x FROM x AS x GROUP BY x ORDER BY x;
SELECT (SELECT SUM(x.x)) FROM x AS x;
SELECT FIRST(x), (SELECT SUM(x.x)) FROM x AS x;
SELECT x AS x, (SELECT MIN(x.x) FROM x GROUP BY x HAVING x = x) FROM x AS x GROUP BY x ORDER BY x;
SELECT x, SUM(x.x) FROM x AS x GROUP BY x ORDER BY (SELECT SUM(x.x));
SELECT x, SUM(x.x) FROM x AS x GROUP BY x ORDER BY (SELECT SUM(x.x) FROM x);
SELECT x, SUM((SELECT SUM(x) * x.x FROM x LIMIT 0)) AS x FROM x AS x GROUP BY x ORDER BY x;
SELECT (SELECT x + x.x FROM x WHERE x = 1) AS x, SUM(x) AS x FROM x AS x GROUP BY x ORDER BY 1;
SELECT SUM(x) FROM x AS x WHERE x > (SELECT (x + x.x) / 2 FROM x WHERE x = 1);
SELECT SUM(x) FROM x AS x WHERE x > (SELECT (SUM(x) + x.x) / 2 FROM x WHERE x = 1);
SELECT x, (SELECT MIN(x) FROM x WHERE x = x.x) >= ALL (SELECT x FROM x WHERE NOT x IS NULL) FROM x AS x ORDER BY x;
SELECT x, (SELECT MIN(x) FROM x WHERE x <> x.x) > ANY (SELECT x FROM x WHERE NOT x IS NULL) FROM x AS x ORDER BY x;
SELECT x, NOT ((SELECT MIN(x) FROM x WHERE x <> x.x) > ANY (SELECT x FROM x WHERE NOT x IS NULL)) FROM x AS x ORDER BY x;
SELECT (SELECT COVAR_POP(x.x, x.x) FROM x AS x) FROM x AS x ORDER BY 1;
SELECT (SELECT COVAR_POP(x.x, x.x) FROM x AS x) FROM x AS x ORDER BY 1;
SELECT (SELECT COVAR_POP(x.x + x.x, x.x + x.x) FROM x AS x) FROM x AS x ORDER BY 1;
SET x = 'nulls_first';
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3), (NULL);
SELECT x, (SELECT COUNT(*) FROM (SELECT x.x FROM x GROUP BY GROUPING SETS (x.x)) AS x) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT COUNT(*) FROM (SELECT x.x FROM x GROUP BY GROUPING SETS ((x.x), (), (x.x), (x.x, x.x))) AS x) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT COUNT(*) FROM (SELECT x.x FROM x GROUP BY ROLLUP (x.x, x.x, x.x, x.x)) AS x) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT COUNT(*) FROM (SELECT x.x FROM x GROUP BY CUBE (x.x, x.x, x.x, x.x)) AS x) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT MIN(x) FROM x GROUP BY GROUPING SETS (x.x, x) HAVING x.x = x) AS x FROM x AS x ORDER BY x;
SET x = 'nulls_first';
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3), (NULL);
SELECT x, (SELECT 42 + x.x) AS x FROM x AS x ORDER BY x;
SELECT x FROM x AS x ORDER BY (SELECT 100 - x.x);
SELECT x, (SELECT 42 + x.x FROM x) AS x FROM x AS x ORDER BY x;
SET x = FALSE;
SELECT x, (SELECT 42 + x.x FROM x) AS x FROM x AS x ORDER BY x;
SET x = TRUE;
SELECT x, (SELECT 42 + x.x FROM x LIMIT 1) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT 42 + x.x FROM x LIMIT 0) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT x FROM x WHERE 1 = 0 AND x.x = x) AS x FROM x AS x ORDER BY x;
SELECT x, EXISTS(SELECT x FROM x WHERE 1 = 0 AND x.x = x) AS x FROM x AS x ORDER BY x;
SELECT x, x = ANY (SELECT x FROM x WHERE 1 = 0 AND x.x = x) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT x + x.x FROM x ORDER BY ALL LIMIT 1 OFFSET 1) AS x FROM x AS x ORDER BY x;
SELECT (SELECT x + x FROM x AS x OFFSET 1) FROM (SELECT 42 AS x) AS x;
SELECT x, (SELECT x.x + x + x FROM x AS x ORDER BY x DESC OFFSET 99) FROM x AS x ORDER BY x;
SELECT x, (SELECT x + x.x FROM x ORDER BY x LIMIT 1) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT x + x.x FROM x ORDER BY x LIMIT 1 OFFSET 1) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT 42 WHERE x.x > 2) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT 42 WHERE x.x IS NULL) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT x + x.x FROM x WHERE x = 1) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT x FROM x WHERE x = x.x) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT x + 1 FROM x WHERE x = x.x) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT 42 FROM x WHERE x = x.x) AS x FROM x AS x ORDER BY x;
SET x = 'nulls_first';
PRAGMA x;
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
SELECT x, (WITH x AS (SELECT 42 + x.x AS x) SELECT x FROM x) AS x FROM x AS x ORDER BY x;
SELECT x FROM x AS x ORDER BY (WITH x AS (SELECT 100 - x.x AS x) SELECT x FROM x);
SELECT x, (WITH x AS (SELECT 42 + x.x AS x FROM x) SELECT x FROM x) AS x FROM x AS x ORDER BY x;
SET x = FALSE;
SELECT x, (WITH x AS (SELECT 42 + x.x AS x FROM x) SELECT x FROM x) AS x FROM x AS x ORDER BY x;
SELECT x, (WITH x AS (SELECT 42 + x.x AS x FROM x) SELECT x FROM x LIMIT 1) AS x FROM x AS x ORDER BY x;
SELECT x, (WITH x AS (SELECT 42 + x.x AS x FROM x) SELECT x FROM x LIMIT 0) AS x FROM x AS x ORDER BY x;
SELECT x, (WITH x AS (SELECT x FROM x WHERE 1 = 0 AND x.x = x) SELECT x FROM x) AS x FROM x AS x ORDER BY x;
SELECT x, EXISTS(WITH x AS (SELECT x FROM x WHERE 1 = 0 AND x.x = x) SELECT x FROM x) AS x FROM x AS x ORDER BY x;
SELECT x, x = ANY (WITH x AS (SELECT x FROM x WHERE 1 = 0 AND x.x = x) SELECT x FROM x) AS x FROM x AS x ORDER BY x;
SELECT x, (WITH x AS (SELECT x + x.x FROM x ORDER BY ALL LIMIT 1 OFFSET 1) SELECT * FROM x) AS x FROM x AS x ORDER BY x;
SELECT x, (WITH x AS (SELECT x + x.x FROM x ORDER BY 1 LIMIT 1 OFFSET 1) SELECT * FROM x) AS x FROM x AS x ORDER BY x;
SELECT x, (WITH x AS (SELECT 42 WHERE x.x > 2) SELECT * FROM x) AS x FROM x AS x ORDER BY x;
SELECT x, (WITH x AS (SELECT 42 WHERE x.x IS NULL) SELECT * FROM x) AS x FROM x AS x ORDER BY x;
SELECT x, (WITH x AS (SELECT x + x.x FROM x WHERE x = 1) SELECT * FROM x) AS x FROM x AS x ORDER BY x;
SELECT x, (WITH x AS (SELECT x FROM x WHERE x = x.x) SELECT * FROM x) AS x FROM x AS x ORDER BY x;
SELECT x, (WITH x AS (SELECT x + 1 FROM x WHERE x = x.x) SELECT * FROM x) AS x FROM x AS x ORDER BY x;
SELECT x, (WITH x AS (SELECT 42 FROM x WHERE x = x.x) SELECT * FROM x) AS x FROM x AS x ORDER BY x;
PRAGMA x;
CREATE TABLE x AS SELECT * FROM (VALUES (1, 22), (1, 21), (2, 22)) AS x;
SELECT * FROM x WHERE x = (SELECT MIN(x) FROM x AS x WHERE x.x = x.x);
SELECT * FROM x WHERE x = (SELECT MIN(x) FROM x AS x WHERE x.x = x.x AND x.x < x.x);
SET x = 'nulls_first';
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3), (NULL);
SELECT x, (SELECT SUM(x + 1) OVER ()) FROM x ORDER BY x;
SELECT x, (SELECT SUM((SELECT x + 1)) OVER ()) FROM x ORDER BY x;
SELECT x, (SELECT SUM((SELECT x + 1)) OVER () WHERE x >= 2) FROM x ORDER BY x;
SELECT x, (SELECT SUM((SELECT SUM(x))) OVER ()) FROM x GROUP BY x ORDER BY x;
SELECT x, (SELECT SUM(x) FROM (SELECT SUM((SELECT x.x + x.x)) OVER () AS x FROM x AS x) AS x) FROM x ORDER BY x;
SET x = 'nulls_first';
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3), (NULL);
SELECT x, (SELECT x FROM x AS x WHERE x = (SELECT SUM(x) FROM x AS x WHERE x.x > x.x)) FROM x AS x ORDER BY 1;
SELECT x, (SELECT SUM(x) IS NULL FROM x AS x WHERE x.x > x.x) FROM x AS x ORDER BY x;
SELECT x, (SELECT COUNT(*) FROM x AS x WHERE x.x > x.x) FROM x AS x ORDER BY x;
SELECT x, (SELECT COUNT(x) FROM x AS x WHERE x.x > x.x OR x.x IS NULL) FROM x AS x ORDER BY x;
SELECT x, (SELECT COUNT(*) FROM x AS x WHERE x.x > x.x OR x.x IS NULL) FROM x AS x ORDER BY x;
SELECT x, (SELECT COUNT(*) FROM x AS x WHERE x.x > x.x OR (x.x IS NULL AND x.x IS NULL)) FROM x AS x ORDER BY x;
SELECT x FROM x AS x WHERE (SELECT COUNT(*) FROM x AS x WHERE x.x > x.x) = 0 ORDER BY x;
SELECT x, (SELECT x FROM x AS x WHERE x - 2 = (SELECT COUNT(*) FROM x AS x WHERE x.x > x.x)) FROM x AS x ORDER BY 1;
SELECT x, (SELECT COUNT(*) FROM x AS x WHERE x.x > x.x GROUP BY x.x) FROM x AS x ORDER BY x;
SELECT x, (SELECT CASE WHEN (SELECT COUNT(*) FROM x AS x WHERE x.x > x.x) = 0 THEN 1 ELSE 0 END) FROM x AS x ORDER BY x;
SELECT x, (SELECT COUNT(*) FROM x AS x WHERE x.x > x.x) FROM x AS x ORDER BY x;
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (2, 2), (3, 3), (4, NULL);
DELETE FROM x AS x WHERE x > (SELECT MAX(x) FROM x WHERE x.x <> x);
SELECT x, x FROM x ORDER BY x;
DELETE FROM x AS x WHERE x = (SELECT MAX(x) FROM x);
SELECT x, x FROM x ORDER BY x;
PRAGMA x;
CREATE TABLE x (x INT, x TEXT, x TEXT, x INT);
CREATE TABLE x (x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT);
INSERT INTO x VALUES (1, 'Game', 'Mobo Game', 200), (2, 'Game', 'PKO Game', 400), (3, 'Fashion', 'Shirt', 500), (4, 'Fashion', 'Shorts', 100);
INSERT INTO x VALUES (1, 2, 3, 4, 5, 6, 7, 8), (11, 22, 33, 44, 55, 66, 77, 88), (111, 222, 333, 444, 555, 666, 777, 888), (1111, 2222, 3333, 4444, 5555, 6666, 7777, 8888);
SELECT x IN (SELECT x FROM x) FROM x;
SELECT x IN (SELECT x + x FROM x) FROM x;
SELECT x IN (SELECT x + x FROM x) FROM x GROUP BY x;
SELECT x IN (SELECT x + x.x FROM x) FROM x GROUP BY x;
SELECT (x + 1) AS x, x IN (SELECT x + x FROM x) FROM x GROUP BY x ORDER BY 1;
SELECT (x + 1) IN (SELECT x + (x + 1) FROM x) FROM x GROUP BY (x + 1);
SELECT x + 1, x + 42 FROM x GROUP BY x + 1;
SELECT (x + 1) IN (SELECT x + (x + 42) FROM x) FROM x GROUP BY (x + 1);
SELECT x = ALL (SELECT 1 FROM x HAVING MIN(x) IS NULL) FROM x GROUP BY x, x, x, x;
SELECT CASE WHEN 1 IN (SELECT MAX(x) UNION ALL (SELECT MIN(x) FROM x INNER JOIN x AS x ON x.x = x.x)) THEN 2 ELSE NULL END FROM x AS x;
SELECT CASE WHEN 1 IN (SELECT (SELECT MAX(x))) THEN 2 ELSE NULL END FROM x AS x;
SELECT CASE WHEN 1 IN (SELECT (SELECT MAX(x)) UNION ALL (SELECT MIN(x) FROM x INNER JOIN x AS x ON x.x = x.x)) THEN 2 ELSE NULL END FROM x AS x;
SELECT CASE WHEN 1 IN (SELECT (SELECT MIN(x) FROM x INNER JOIN x AS x ON x.x = x.x) UNION ALL (SELECT MAX(x))) THEN 2 ELSE NULL END FROM x AS x;
SELECT (SELECT MIN(x) FROM x INNER JOIN x AS x ON x.x <> (SELECT MAX(x.x + x.x) FROM x AS x)) FROM x AS x;
SELECT (SELECT MIN(x) FROM x INNER JOIN x AS x ON x.x <> ANY (SELECT MAX(x.x + x.x) FROM x AS x)) FROM x AS x;
SELECT CASE WHEN NOT NOT x IN (SELECT (SELECT MAX(x)) UNION (SELECT MIN(x) FROM x LEFT JOIN x AS x ON x.x = x.x)) THEN 1 ELSE 2 END FROM x AS x GROUP BY x ORDER BY 1;
SELECT EXISTS(SELECT RANK() OVER (PARTITION BY SUM(DISTINCT x))) FROM x AS x;
SELECT (SELECT SUM(x) OVER (PARTITION BY SUM(x) ORDER BY MAX(x + x) ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) FROM x) FROM x AS x GROUP BY x;
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (2, 2);
SELECT (SELECT x FROM x AS x WHERE x.x = 5) FROM x AS x;
SELECT (SELECT x FROM x AS x WHERE x.x = 5) IS NULL FROM x AS x;
SELECT NOT (SELECT x FROM x AS x WHERE x.x = 5) IS NULL FROM x AS x;
CREATE TABLE x AS SELECT * FROM (VALUES (1, 1, 'a', 'A'), (1, NULL, 'b', 'B'), (1, 2, 'c', 'C'), (2, NULL, 'd', 'D')) AS x;
CREATE TABLE x AS SELECT * FROM (VALUES (1, 1, 1), (2, 1, 2), (3, 1, 3), (4, 1, NULL), (5, 2, 1), (6, 2, NULL), (7, 99, 99)) AS x;
SELECT (SELECT {'x': COUNT(*)} FROM x WHERE x = x AND x = x GROUP BY x, x) AS x FROM x;
SELECT x, x, x, COALESCE((SELECT {'x': FIRST(x), 'x': FIRST(x), 'x': COUNT(*)} FROM x WHERE x = x AND x = x GROUP BY x, x), {'x': NULL, 'x': NULL, 'x': 0}) AS x, COALESCE((SELECT {'x': FIRST(x), 'x': FIRST(x), 'x': COUNT(*)} FROM x WHERE x = x AND (x = x OR x IS NULL) GROUP BY x, x ORDER BY x = x), {'x': NULL, 'x': NULL, 'x': 0}) AS x, COALESCE((SELECT {'x': FIRST(x), 'x': FIRST(x), 'x': COUNT(*)} FROM x WHERE (x = x OR x IS NULL) AND (x = x OR x IS NULL) GROUP BY x, x ORDER BY x = x, x = x), {'x': NULL, 'x': NULL, 'x': 0}) AS x, COALESCE((SELECT {'x': FIRST(x), 'x': FIRST(x), 'x': COUNT(*)} FROM x WHERE (x = x OR x IS NULL) GROUP BY x ORDER BY x = x), {'x': NULL, 'x': NULL, 'x': 0}) AS x FROM x;
SET x = FALSE;
SELECT x, x, x, COALESCE((SELECT {'x': FIRST(x), 'x': FIRST(x), 'x': COUNT(*)} FROM x WHERE x = x AND x = x GROUP BY x, x), {'x': NULL, 'x': NULL, 'x': 0}) AS x, COALESCE((SELECT {'x': FIRST(x), 'x': FIRST(x), 'x': COUNT(*)} FROM x WHERE x = x AND (x = x OR x IS NULL) GROUP BY x, x ORDER BY x = x), {'x': NULL, 'x': NULL, 'x': 0}) AS x, COALESCE((SELECT {'x': FIRST(x), 'x': FIRST(x), 'x': COUNT(*)} FROM x WHERE (x = x OR x IS NULL) AND (x = x OR x IS NULL) GROUP BY x, x ORDER BY x = x, x = x), {'x': NULL, 'x': NULL, 'x': 0}) AS x, COALESCE((SELECT {'x': FIRST(x), 'x': FIRST(x), 'x': COUNT(*)} FROM x WHERE (x = x OR x IS NULL) GROUP BY x ORDER BY x = x), {'x': NULL, 'x': NULL, 'x': 0}) AS x FROM x;
PRAGMA x;
SELECT x, x, x, COALESCE((SELECT ROW(MIN(x), MIN(x), COUNT(*)) FROM x WHERE x = x AND x = x GROUP BY x, x), ROW(NULL, NULL, 0)) AS x, COALESCE((SELECT ROW(MIN(x), MIN(x), COUNT(*)) FROM x WHERE (x = x OR x IS NULL) GROUP BY x ORDER BY x = x), ROW(NULL, NULL, 0)) AS x FROM x ORDER BY 1, 2, 3;
PRAGMA x;
CREATE TABLE x (x TEXT, x TEXT);
INSERT INTO x VALUES ('natural_gas', 'US');
CREATE TABLE x (x BIGINT, "x" TEXT);
INSERT INTO x VALUES (1, 'natural_gas');
SELECT (SELECT NULL FROM (SELECT x, x FROM x WHERE "x" IS NOT DISTINCT FROM "x" LIMIT 1) AS x) FROM x AS x;
PRAGMA x;
CREATE TABLE x AS (SELECT [1, 2, 3] AS x UNION ALL SELECT [4, 5] AS x UNION ALL SELECT [] AS x);
SELECT ARRAY_RV(x) FROM x ORDER BY x;
SELECT ARRAY_RV_COAL(x) FROM x ORDER BY x;
PRAGMA x;
CREATE TABLE x AS SELECT * FROM (VALUES (1, 22), (1, 21), (2, 22)) AS x;
CREATE TABLE x AS SELECT * FROM (VALUES (1, 44), (2, 42)) AS x;
SELECT * FROM x, x WHERE x.x = x.x AND x * x = (SELECT MIN(x * x) FROM x AS x, x WHERE x.x = x.x AND x.x = x.x);
SET x = 'nulls_first';
PRAGMA x;
CREATE TABLE x (x INT, x INT, x TEXT);
INSERT INTO x VALUES (11, 1, 'a'), (12, 2, 'b'), (13, 3, 'c');
CREATE TABLE x (x INT, x INT, x TEXT);
INSERT INTO x VALUES (11, 1, 'a'), (12, 1, 'b'), (13, 4, 'b');
SELECT x, SUM(x), (SELECT SUM(x) + SUM(x.x) FROM x) FROM x AS x GROUP BY x ORDER BY x;
SELECT (SELECT x.x + x.x + SUM(x.x) FROM x WHERE x = x) FROM x ORDER BY 1;
SELECT * FROM x WHERE EXISTS(SELECT * FROM x WHERE x.x = x.x AND x.x <> x.x) ORDER BY x;
SELECT x, x >= ANY (SELECT x.x + x - x FROM x WHERE x >= x AND x = x) FROM x ORDER BY 1;
SELECT x, x = ANY (SELECT x FROM x) FROM x;
SELECT x, x = ANY (SELECT x FROM x WHERE x.x <> x.x) FROM x;
SET x = 'nulls_first';
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3), (NULL);
SELECT x, (SELECT (SELECT 42 + x.x) + 42 + x.x) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT (SELECT (SELECT (SELECT 42 + x.x) + x.x) + 42 + x.x) + 42 + x.x) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT (SELECT x.x + SUM(x.x)) FROM x AS x) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT (SELECT (SELECT (SELECT x.x + x.x + x.x + x.x + x.x)))) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT SUM(x) + (SELECT 42 + x.x) FROM x) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT ((SELECT ((SELECT ((SELECT SUM(x) + SUM(x.x) + SUM(x.x) + SUM(x.x) + SUM(x.x) FROM x AS x)) FROM x AS x)) FROM x AS x)) FROM x AS x) AS x FROM x AS x GROUP BY x ORDER BY x;
SELECT x, (SELECT (SELECT (SELECT (SELECT x.x + x.x + x.x + x.x + x.x + x.x) FROM x AS x WHERE x.x = x.x))) AS x FROM x AS x ORDER BY x;
SELECT (SELECT (SELECT SUM(x.x) + SUM(x.x) + SUM(x.x) FROM x AS x) FROM x AS x) FROM x AS x ORDER BY 1;
SELECT x, (SELECT SUM(x.x) FROM x AS x INNER JOIN x AS x ON (SELECT x.x + x.x) = (SELECT x.x + x.x)) AS x FROM x AS x ORDER BY x;
SELECT x, SUM(x), (SELECT (SELECT SUM(x) + SUM(x.x) + SUM(x.x) FROM x) FROM x AS x) FROM x AS x GROUP BY x ORDER BY x;
SELECT x, (SELECT SUM(x.x) FROM (SELECT x FROM x AS x WHERE x > ANY (SELECT x FROM x WHERE x <> x.x)) AS x) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT SUM(x.x) FROM (SELECT x FROM x AS x WHERE x = x.x AND x = ANY (SELECT x FROM x WHERE x = x.x)) AS x) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT SUM(x.x) FROM x AS x LEFT OUTER JOIN x AS x ON (SELECT x.x + x.x) = (SELECT x.x + x.x)) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT SUM(x.x) + SUM(x.x) FROM (SELECT x FROM x AS x WHERE x > ANY (SELECT x FROM x WHERE x <> x.x)) AS x LEFT OUTER JOIN (SELECT x FROM x AS x WHERE x = ANY (SELECT x FROM x WHERE x = x.x)) AS x ON x.x = x.x) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT SUM(x.x) FROM (SELECT x FROM x WHERE x = x.x) AS x LEFT OUTER JOIN x AS x ON x.x = x.x) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT SUM(x.x) FROM (SELECT x FROM x WHERE x <> x.x) AS x LEFT OUTER JOIN x AS x ON x.x = x.x) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT SUM(x.x) FROM x AS x LEFT OUTER JOIN (SELECT x FROM x WHERE x = x.x) AS x ON x.x = x.x) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT SUM(x.x) FROM x AS x LEFT OUTER JOIN (SELECT x FROM x WHERE x <> x.x) AS x ON x.x = x.x) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT SUM(x.x) FROM (SELECT x FROM x AS x WHERE CASE WHEN (x = x.x AND x = ANY (SELECT x FROM x WHERE x = x.x)) THEN TRUE ELSE FALSE END) AS x) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT SUM(x.x) FROM (SELECT x FROM x AS x WHERE x = x.x AND x = ANY (SELECT x FROM x WHERE x = x.x)) AS x) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT SUM(x.x) FROM (SELECT x FROM x AS x WHERE x = x.x) AS x) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT SUM(x.x) FROM (SELECT x FROM x AS x WHERE x = ANY (SELECT x FROM x WHERE x = x.x)) AS x) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT x = ANY (SELECT x FROM x WHERE x = x.x) FROM x AS x WHERE x = x.x) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT SUM(x.x) FROM (SELECT x FROM x AS x WHERE x = x.x OR x = ANY (SELECT x FROM x WHERE x = x.x)) AS x) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT SUM(x.x) FROM (SELECT x FROM x AS x WHERE CASE WHEN (x = x.x AND x = ANY (SELECT x FROM x WHERE x = x.x)) THEN TRUE ELSE FALSE END) AS x) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT SUM(x.x) FROM (SELECT x FROM x AS x WHERE x = x.x AND EXISTS(SELECT x FROM x WHERE x = x.x)) AS x) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT SUM(x.x) FROM (SELECT x FROM x AS x WHERE x > ANY (SELECT x FROM x WHERE x <> x.x)) AS x) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT SUM(x.x) FROM (SELECT x FROM x AS x WHERE x > ANY (SELECT x FROM x WHERE x <> x.x)) AS x LEFT OUTER JOIN (SELECT x FROM x AS x WHERE x = x.x AND x = ANY (SELECT x FROM x WHERE x = x.x)) AS x ON x.x = x.x) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT SUM(x.x) FROM (SELECT x FROM x AS x WHERE x > ANY (SELECT x FROM x WHERE x <> x.x)) AS x LEFT OUTER JOIN (SELECT x FROM x AS x WHERE x = x.x AND x = ANY (SELECT x FROM x WHERE x = x.x)) AS x ON x.x = x.x) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT SUM(x.x) + SUM(x.x) FROM (SELECT x FROM x AS x WHERE x > ANY (SELECT x FROM x WHERE x <> x.x)) AS x LEFT OUTER JOIN (SELECT x FROM x AS x WHERE x = x.x AND x = ANY (SELECT x FROM x WHERE x = x.x)) AS x ON x.x = x.x) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT SUM(x.x) + SUM(x.x) FROM (SELECT x FROM x AS x WHERE x = x.x AND x > ANY (SELECT x FROM x WHERE x <> x.x)) AS x LEFT OUTER JOIN (SELECT x FROM x AS x WHERE x = ANY (SELECT x FROM x WHERE x = x.x)) AS x ON x.x = x.x) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT SUM(x.x) + SUM(x.x) FROM (SELECT x FROM x AS x WHERE x = x.x AND x > ANY (SELECT x FROM x WHERE x <> x.x)) AS x LEFT OUTER JOIN (SELECT x FROM x AS x WHERE x <> x.x OR x = ANY (SELECT x FROM x WHERE x = x.x)) AS x ON x.x = x.x) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT * FROM (SELECT (SELECT 42 + x.x)) AS x) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT x.x + x.x FROM (SELECT (SELECT 42 + x.x) AS x) AS x, (SELECT (SELECT 42 + x.x) AS x) AS x) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT x.x + x.x FROM (SELECT (SELECT 42 + x.x) AS x) AS x LEFT OUTER JOIN (SELECT (SELECT 42 + x.x) AS x) AS x ON x.x = x.x) AS x FROM x AS x ORDER BY x;
SELECT x, (SELECT x.x IN (1, 2, 3, 4, 5, 6, 7, 8)) AS x FROM x AS x ORDER BY x;
SELECT (SELECT (SELECT COVAR_POP(x.x, x.x) FROM x AS x) FROM x AS x LIMIT 1) FROM x AS x ORDER BY 1;
SELECT (SELECT (SELECT COVAR_POP(x.x, x.x) FROM x AS x) FROM x AS x ORDER BY x LIMIT 1) FROM x AS x ORDER BY 1;
PRAGMA x;
SELECT 1 + (SELECT 1);
SELECT 1 = (SELECT 1);
SELECT 1 <> (SELECT 1);
SELECT 1 = (SELECT NULL);
SELECT NULL = (SELECT 1);
SELECT (SELECT 42);
SELECT (SELECT (SELECT 42));
SELECT * FROM (SELECT 42) AS x;
SELECT * FROM (SELECT 42, 41 AS x) AS x;
SELECT * FROM (SELECT 42, 41 AS x) AS x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (11, 22);
INSERT INTO x VALUES (12, 21);
INSERT INTO x VALUES (13, 22);
SELECT (SELECT x * 42 FROM x);
SET x = FALSE;
SELECT (SELECT x * 42 FROM x);
SELECT x * (SELECT 42) FROM x;
CREATE TABLE x (x INT, x INT, x INT, x INT, x INT);
INSERT INTO x (x, x, x, x, x) VALUES (103, 102, 100, 101, 104);
INSERT INTO x (x, x, x, x, x) VALUES (107, 106, 108, 109, 105);
SELECT x - (SELECT SUM(x) FROM x) FROM x;
SELECT CASE WHEN x > (SELECT SUM(x) / COUNT(*) FROM x) THEN x * 2 ELSE x * 10 END FROM x;
SELECT x, (SELECT SUM(x) FROM x AS x WHERE x.x = x.x) FROM x;
SELECT x, (SELECT CASE WHEN x.x = 11 THEN 22 ELSE NULL END) FROM x ORDER BY x;
SELECT x, (SELECT CASE WHEN x.x = 11 THEN x ELSE NULL END FROM x AS x) FROM x ORDER BY x;
SELECT x, (SELECT CASE WHEN x.x = 11 THEN x ELSE NULL END FROM x AS x LIMIT 1) FROM x ORDER BY x;
SELECT * FROM x WHERE x = (SELECT MIN(x) FROM x AS x WHERE x.x = x.x);
SELECT * FROM x WHERE EXISTS(SELECT x FROM x AS x WHERE x.x = x.x AND x > 21);
SELECT * FROM (SELECT 42 AS x, 44 AS x) AS x;
PRAGMA x;
SELECT 1 + (WITH x AS (SELECT 1) SELECT * FROM x);
SELECT 1 = (WITH x AS (SELECT 1) SELECT * FROM x);
SELECT 1 <> (WITH x AS (SELECT 1) SELECT * FROM x);
SELECT 1 = (WITH x AS (SELECT NULL) SELECT * FROM x);
SELECT NULL = (SELECT 1);
SELECT (WITH x AS (SELECT 42) SELECT * FROM x);
SELECT (WITH x AS (WITH x AS (SELECT 42) SELECT * FROM x) SELECT * FROM x);
SELECT * FROM (WITH x AS (SELECT 42) SELECT x FROM x) AS x;
SELECT * FROM (WITH x AS (SELECT 42, 41 AS x) SELECT * FROM x) AS x;
SELECT * FROM (WITH x AS (SELECT 42, 41 AS x) SELECT * FROM x) AS x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (11, 22);
INSERT INTO x VALUES (12, 21);
INSERT INTO x VALUES (13, 22);
SELECT (WITH x AS (SELECT x * 42 FROM x) SELECT * FROM x);
SET x = FALSE;
SELECT (WITH x AS (SELECT x * 42 FROM x) SELECT * FROM x);
SELECT x * (WITH x AS (SELECT 42) SELECT * FROM x) FROM x;
CREATE TABLE x (x INT, x INT, x INT, x INT, x INT);
INSERT INTO x (x, x, x, x, x) VALUES (103, 102, 100, 101, 104);
INSERT INTO x (x, x, x, x, x) VALUES (107, 106, 108, 109, 105);
SELECT x - (WITH x AS (SELECT SUM(x) FROM x) SELECT * FROM x) FROM x;
SELECT CASE WHEN x > (WITH x AS (SELECT SUM(x) / COUNT(*) FROM x) SELECT * FROM x) THEN x * 2 ELSE x * 10 END FROM x;
SELECT x, (WITH x AS (SELECT SUM(x) FROM x AS x WHERE x.x = x.x) SELECT * FROM x) FROM x;
SELECT x, (WITH x AS (SELECT CASE WHEN x.x = 11 THEN 22 ELSE NULL END) SELECT * FROM x) FROM x ORDER BY x;
SELECT x, (WITH x AS (SELECT CASE WHEN x.x = 11 THEN x ELSE NULL END FROM x AS x) SELECT * FROM x) FROM x ORDER BY x;
SELECT x, (WITH x AS (SELECT CASE WHEN x.x = 11 THEN x ELSE NULL END FROM x AS x LIMIT 1) SELECT * FROM x) FROM x ORDER BY x;
SELECT * FROM x WHERE x = (WITH x AS (SELECT x FROM x AS x WHERE x.x = x.x) SELECT MIN(x) FROM x);
SELECT * FROM x WHERE EXISTS(WITH x AS (SELECT * FROM x AS x WHERE x.x = x.x AND x > 21) SELECT x FROM x);
SELECT * FROM (WITH x AS (SELECT 42 AS x, 44 AS x) SELECT * FROM x) AS x;
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3), (NULL);
SELECT x IN (SELECT x.x FROM (SELECT * FROM x AS x WHERE x.x = x.x) AS x JOIN x AS x ON x.x = x.x) FROM x ORDER BY x;
SELECT x IN (SELECT x.x FROM (SELECT * FROM x AS x WHERE x.x = x.x) AS x LEFT JOIN x AS x ON x.x = x.x) FROM x ORDER BY x;
SELECT x IN (SELECT x.x FROM (SELECT * FROM x AS x WHERE x.x = x.x) AS x RIGHT JOIN x AS x ON x.x = x.x) FROM x ORDER BY x;
SELECT x IN (SELECT x.x FROM x AS x LEFT JOIN (SELECT * FROM x AS x WHERE x.x = x.x) AS x ON x.x = x.x) FROM x ORDER BY x;
SELECT x IN (SELECT x.x FROM x AS x RIGHT JOIN (SELECT * FROM x AS x WHERE x.x = x.x) AS x ON x.x = x.x) FROM x ORDER BY x;
SELECT x IN (SELECT x.x FROM (SELECT * FROM x AS x WHERE x.x IS NOT DISTINCT FROM x.x) AS x JOIN x AS x ON x.x = x.x OR (x.x IS NULL AND x.x IS NULL)) FROM x ORDER BY x;
SELECT x IN (SELECT x.x FROM (SELECT * FROM x AS x WHERE x.x IS NOT DISTINCT FROM x.x) AS x LEFT JOIN x AS x ON x.x = x.x OR (x.x IS NULL AND x.x IS NULL)) FROM x ORDER BY x;
SELECT x IN (SELECT x.x FROM (SELECT * FROM x AS x WHERE x.x IS NOT DISTINCT FROM x.x) AS x RIGHT JOIN x AS x ON x.x = x.x OR (x.x IS NULL AND x.x IS NULL)) FROM x ORDER BY x;
PRAGMA x;
CREATE TABLE x (x INT);
SELECT * FROM x AS x WHERE (SELECT COUNT(*) AS x FROM x WHERE (x = x.x AND x = 3) OR (x = x.x AND x = 3)) > 0 ORDER BY 1 LIMIT 100;
SELECT * FROM x AS x WHERE (SELECT COUNT(*) AS x FROM x WHERE (x = x.x AND x = 3) OR (x = x.x AND x = 3)) ORDER BY 1 LIMIT 100;
SET x = 'nulls_first';
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3), (NULL);
SELECT * FROM x WHERE x = (SELECT 1);
SELECT * FROM x WHERE x = (SELECT SUM(1));
SELECT * FROM x WHERE x = (SELECT MIN(x) FROM x);
SELECT * FROM x WHERE x = (SELECT MAX(x) FROM x);
SELECT *, (SELECT MAX(x) FROM x) FROM x ORDER BY x;
SELECT (SELECT 42) AS x, MAX(x) FROM x GROUP BY x;
SELECT x, MAX((SELECT 42)) FROM x GROUP BY x ORDER BY x;
SELECT (SELECT * FROM x WHERE x > 10) FROM x;
SELECT * FROM x WHERE x = (SELECT x FROM x WHERE NOT x IS NULL ORDER BY x);
SET x = FALSE;
SELECT * FROM x WHERE x = (SELECT x FROM x WHERE NOT x IS NULL ORDER BY x);
SELECT * FROM x WHERE x = (SELECT x FROM x WHERE NOT x IS NULL ORDER BY x LIMIT 1);
SELECT * FROM x WHERE x = (SELECT 1, 2);
SELECT * FROM x WHERE x = (SELECT x, x + 2 FROM x);
SELECT * FROM x WHERE EXISTS(SELECT 1, 2);
SELECT * FROM x WHERE EXISTS(SELECT x, x + 2 FROM x);
SELECT (SELECT * FROM x WHERE x = 1);
SELECT (SELECT * FROM x AS x, x AS x);
SELECT (SELECT x FROM x WHERE x = 1);
SELECT * FROM x WHERE x > (SELECT x FROM x WHERE x = 1) ORDER BY 1;
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3), (NULL);
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('hello'), ('world'), (NULL);
SELECT NULL IN (SELECT * FROM x);
SELECT 'hello' IN (SELECT * FROM x);
SELECT 'bla' IN (SELECT * FROM x);
SELECT 'bla' IN (SELECT * FROM x WHERE NOT x IS NULL);
SELECT * FROM x WHERE EXISTS(SELECT NULL);
SELECT * FROM x WHERE EXISTS(SELECT x FROM x WHERE x = 'bla');
SELECT (SELECT x FROM x WHERE x = 'hello') FROM x;
SELECT (SELECT x FROM x WHERE x = 'bla') FROM x;
PRAGMA x;
SELECT (SELECT UNNEST([1]));
SELECT (SELECT UNNEST([NULL]));
SELECT (SELECT UNNEST([]));
SELECT (SELECT UNNEST(x)) FROM (VALUES ([1])) AS x;
SELECT (SELECT UNNEST(x)) FROM (VALUES ([NULL])) AS x;
SELECT (SELECT UNNEST(x)) FROM (VALUES ([])) AS x;
SELECT (SELECT SUM(x) FROM (SELECT UNNEST(x)) AS x) FROM (VALUES ([1, 2, 3])) AS x;
SELECT (SELECT SUM(x) + SUM(x) FROM (SELECT UNNEST(x), UNNEST(x) FROM (VALUES ([1, 2, 3])) AS x) AS x) FROM (VALUES ([1, 2, 3])) AS x;
SELECT 1 = ANY (SELECT UNNEST(x)) FROM (VALUES ([1, 2, 3])) AS x;
SELECT 4 = ANY (SELECT UNNEST(x)) FROM (VALUES ([1, 2, 3])) AS x;
SELECT NULL = ANY (SELECT UNNEST(x)) FROM (VALUES ([1, 2, 3])) AS x;
SELECT 4 = ANY (SELECT UNNEST(x)) FROM (VALUES ([1, 2, 3, NULL])) AS x;
SELECT 1 IN (SELECT UNNEST(x)) FROM (VALUES ([1, 2, 3])) AS x;
SELECT (SELECT 1 = ANY (SELECT UNNEST(x))) FROM (VALUES ([1, 2, 3])) AS x;
SELECT (SELECT 4 = ANY (SELECT UNNEST(x))) FROM (VALUES ([1, 2, 3])) AS x;
SELECT (SELECT 4 = ANY (SELECT UNNEST(x))) FROM (VALUES ([1, 2, 3, NULL])) AS x;
SELECT (SELECT 1 = ANY (SELECT UNNEST(x))) FROM (VALUES ([1, 2, 3])) AS x;
SELECT (SELECT 4 = ANY (SELECT UNNEST(x))) FROM (VALUES ([1, 2, 3])) AS x;
SELECT (SELECT 4 = ANY (SELECT UNNEST(x))) FROM (VALUES ([1, 2, 3, NULL])) AS x;
SELECT (SELECT 1 + x[1] = ANY (SELECT UNNEST(x))) FROM (VALUES ([1, 2, 3])) AS x;
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (2, 2), (3, 3), (4, NULL);
UPDATE x AS x SET x = (SELECT MAX(x) FROM x WHERE x.x <> x);
SELECT x, x FROM x ORDER BY x;
UPDATE x AS x SET x = (SELECT MAX(x) FROM x) WHERE x = (SELECT MIN(x) FROM x);
SELECT x, x FROM x ORDER BY x;
UPDATE x AS x SET x = (SELECT MAX(x) FROM x WHERE x < x.x);
SELECT x, x FROM x ORDER BY x;
UPDATE x AS x SET x = 2 WHERE x < (SELECT MAX(x) FROM x WHERE x.x < x);
SELECT x, x FROM x ORDER BY x;
UPDATE x AS x SET x = "x" WHERE x = (SELECT MIN(x) FROM x WHERE x.x < x);
SELECT x, x FROM x ORDER BY x;
SET x = 'nulls_first';
PRAGMA x;
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('hello'), ('world'), (NULL);
SELECT NULL IN (SELECT * FROM x WHERE x = x.x) FROM x AS x ORDER BY x;
SELECT 3 IN (SELECT * FROM x WHERE x = x.x) FROM x AS x ORDER BY x;
SELECT '3' IN (SELECT * FROM x WHERE x = x.x) FROM x AS x ORDER BY x;
SELECT 'hello' IN (SELECT * FROM x WHERE x = x.x) FROM x AS x ORDER BY x;
SELECT 'bla' IN (SELECT * FROM x WHERE x = x.x) FROM x AS x ORDER BY x;
SELECT 'hello' IN (SELECT * FROM x WHERE x = x.x OR x IS NULL) FROM x AS x ORDER BY x;
SELECT 'bla' IN (SELECT * FROM x WHERE x = x.x OR x IS NULL) FROM x AS x ORDER BY x;
SELECT * FROM x WHERE EXISTS(SELECT NULL, x) ORDER BY x;
SELECT * FROM x AS x WHERE EXISTS(SELECT x FROM x WHERE x = x.x OR x IS NULL) ORDER BY x;
SELECT * FROM x AS x WHERE EXISTS(SELECT x FROM x WHERE x = x.x) ORDER BY x;
SELECT (SELECT x FROM x WHERE x = x.x) FROM x AS x ORDER BY x;
SELECT (SELECT x FROM x WHERE x = x.x OR (x = 'hello' AND x.x IS NULL)) FROM x AS x ORDER BY x;
SET x = 'nulls_first';
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3), (NULL);
SELECT x, (SELECT ROW_NUMBER() OVER (ORDER BY x) FROM x WHERE x.x = x) FROM x AS x ORDER BY x;
SELECT x.x, (SELECT RANK() OVER (ORDER BY x) FROM x WHERE x.x = x) FROM x AS x, x AS x ORDER BY x.x;
SELECT x.x, (SELECT ROW_NUMBER() OVER (ORDER BY x) FROM x WHERE x.x = x) FROM x AS x, x AS x ORDER BY x.x;
SELECT x, (SELECT SUM(x) OVER (ORDER BY x) FROM x WHERE x.x = x) FROM x AS x ORDER BY x;
SELECT x, (SELECT SUM(x.x) OVER (ORDER BY x.x) FROM x AS x, x AS x WHERE x.x = x.x LIMIT 1) FROM x AS x ORDER BY x;
CREATE TABLE x AS SELECT CASE WHEN x % 7 = 2 THEN NULL ELSE CAST(x AS INT) END AS x, CASE WHEN x % 9 = 2 THEN NULL ELSE CAST(x AS INT) + 2 END AS x FROM x AS x;
SELECT SUM(x), SUM(x), SUM((SELECT MAX(x) FROM (VALUES (x), (x)) AS x)) AS x FROM x;
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (42);
SELECT * FROM (SELECT x AS x FROM x GROUP BY x) AS x WHERE x = 42;
SELECT * FROM (SELECT x AS x FROM x GROUP BY x) AS x WHERE x = 42;
PRAGMA x;
SELECT * FROM (SELECT 42) AS x UNION ALL SELECT * FROM (SELECT 43) AS x;
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (3, 4), (4, 5), (5, 6);
SELECT * FROM (SELECT x, x AS x FROM x ORDER BY x) AS x;
SELECT x.x FROM (SELECT x * 2 + x AS x FROM x) AS x;
SELECT x.x, x.x, x.x, x.x FROM (SELECT x, x FROM x) AS x INNER JOIN (SELECT x + 1 AS x, x FROM x) AS x ON x.x = x.x ORDER BY 1;
SELECT * FROM (SELECT x, x FROM x) AS x, (SELECT x + 1 AS x, x FROM x) AS x, x WHERE x.x = x.x AND x.x = x.x ORDER BY 1;
SELECT SUM(x) FROM (SELECT x AS x FROM x GROUP BY x) AS x;
SELECT SUM(x) FROM (SELECT x + 1 AS x FROM x GROUP BY x) AS x;
PRAGMA x;
SELECT x FROM (SELECT 42 AS x);
SELECT * FROM (SELECT 42 AS x), (SELECT 43 AS x);
SELECT * FROM (VALUES (42, 43));
SELECT * FROM (SELECT 42 AS x), (SELECT 43 AS x), (SELECT 44 AS x), (SELECT 45 AS x);
SELECT * FROM (SELECT 42 AS x), (SELECT 43 AS x), (SELECT 44 AS x), (SELECT 45 AS x);
SELECT * FROM (SELECT x.x FROM (SELECT 42 AS x)), (SELECT x.x FROM (SELECT 43 AS x));
SELECT x.x, x.x FROM (SELECT 42 AS x), (SELECT 43 AS x);
CREATE TEMPORARY TABLE x (x INT);
CREATE TABLE x (x INT);
SELECT COUNT(DISTINCT x) FROM x;
PRAGMA x;
SELECT * FROM x;
SELECT * FROM x;
CREATE TABLE x (x INT);
CREATE TABLE x (x INT NOT NULL, x DECIMAL(18, 3), x TEXT DEFAULT 'hello');
SELECT x.x, x.x, x, x, x, x, x, x, x FROM x AS x JOIN x AS x USING (x) ORDER BY 1, 2, 3;
CREATE VIEW x AS SELECT * FROM x;
SELECT x, x FROM x WHERE x = 'v1';
ALTER TABLE x RENAME COLUMN x TO x;
SELECT x, x FROM x WHERE x = 'v1';
ALTER TABLE x RENAME COLUMN x TO x;
CREATE OR REPLACE VIEW x (x, x) AS SELECT * FROM x;
SELECT x, x FROM x WHERE x = 'v1';
ALTER TABLE x RENAME COLUMN x TO x;
SELECT x, x FROM x WHERE x = 'v1';
ALTER TABLE x RENAME COLUMN x TO x;
SELECT x, x FROM x WHERE x = 'v1';
CREATE TABLE x (x INT PRIMARY KEY, CHECK (x < 10));
CREATE TABLE x (x TEXT UNIQUE, x TEXT, CHECK (LENGTH(x || x) < 10));
CREATE TABLE x (x INT, FOREIGN KEY (x) REFERENCES x (x));
CREATE TABLE x (x INT, FOREIGN KEY (x) REFERENCES x (x));
SELECT * FROM x;
SELECT * FROM x;
SELECT x, x, x, UNNEST(x) AS x FROM x ORDER BY x, x, x;
SELECT x, x FROM x.x ORDER BY x;
SELECT x, x, x, x FROM x.x ORDER BY x;
SELECT x, x, x FROM x.x ORDER BY x;
CREATE TABLE x (x INT, "x" INT, "x" INT, PRIMARY KEY (x), UNIQUE ("x"), UNIQUE ("x"));
CREATE TABLE x (x INT, x INT, PRIMARY KEY (x), UNIQUE (x));
CREATE TABLE x (x INT, x INT, x INT, x INT, x INT, PRIMARY KEY (x), FOREIGN KEY (x) REFERENCES x (x), FOREIGN KEY (x) REFERENCES x ("x"), FOREIGN KEY (x) REFERENCES x ("x"), FOREIGN KEY (x) REFERENCES x (x));
CREATE TABLE x (x INT, FOREIGN KEY (x) REFERENCES x (x));
SELECT * EXCLUDE (x, x, x, x) FROM x;
PRAGMA x;
CREATE TABLE x (x INT PRIMARY KEY);
SELECT x FROM x WHERE x = 'PRIMARY KEY';
CREATE TABLE x (x INT REFERENCES x);
SELECT x FROM x WHERE x = 'PRIMARY KEY';
CREATE TABLE x (x INT REFERENCES x);
SELECT x FROM x WHERE x = 'PRIMARY KEY';
DROP TABLE x;
SELECT x FROM x WHERE x = 'PRIMARY KEY';
DROP TABLE x;
SELECT x FROM x WHERE x = 'PRIMARY KEY';
PRAGMA x;
CREATE TABLE x (x INT PRIMARY KEY);
CREATE TABLE x (x INT REFERENCES x);
SELECT x, x FROM x.x;
CREATE SCHEMA x.x;
CREATE TABLE x.x (x INT PRIMARY KEY);
CREATE TABLE x.x (x INT REFERENCES x.x);
SELECT COUNT(*) FROM x.x;
PRAGMA x;
SELECT * FROM x;
SELECT x, x, x, x, x FROM x ORDER BY x;
ATTACH '__TEST_DIR__/duckdb_databases.db' AS x;
SELECT x, x, STR_SPLIT(REPLACE(x, '\', '/'), '/')[-1], x FROM x WHERE NOT x IS NULL;
SELECT x FROM x WHERE x = 'new_duckdb_database';
SELECT x FROM x ORDER BY x;
SELECT x FROM x.x ORDER BY 1;
DETACH new_duckdb_database;
ATTACH '__TEST_DIR__/duckdb_databases.db' AS x (READONLY 1);
SELECT x FROM x WHERE x = 'readonly_duckdb_database';
SELECT * FROM x;
CREATE TABLE x (x INT);
CREATE INDEX x ON x(x);
SELECT * FROM x;
SELECT x FROM x WHERE x = 'postgres_scanner';
SELECT x FROM x WHERE x AND x = 'tpch';
PRAGMA x;
SELECT * FROM x;
SELECT x FROM x WHERE NOT x ORDER BY 1;
SELECT * FROM x;
SELECT * FROM x WHERE x = 'table';
SELECT SQRT(4);
SELECT DISTINCT x FROM x WHERE x = 'sqrt';
SELECT x FROM x WHERE NOT x ORDER BY 1;
SELECT x FROM x WHERE x = 'my_range';
CREATE TABLE x (x INT, x INT, x INT);
CREATE INDEX x ON x((x + 1), x);
SELECT * FROM x;
SELECT * FROM x;
SELECT x FROM x WHERE x = 'integers';
PRAGMA x;
SET x = '20mb';
SET x = '20mb';
DROP TABLE IF EXISTS x;
DROP TABLE IF EXISTS x;
SELECT SUM(x) < 150 AS x FROM x WHERE x = 'IN_MEMORY_TABLE';
SELECT SUM(x) < 150 AS x FROM x;
SELECT * FROM x;
SELECT x FROM x WHERE x = 'join_order';
CREATE TABLE x (x TEXT);
SELECT * FROM x ORDER BY x;
SELECT COUNT(*) FROM x;
CREATE SCHEMA x.x;
SELECT COUNT(*) FROM x WHERE x = 'scheme';
SELECT COUNT(*) FROM x WHERE x = 'scheme';
SELECT COUNT(*) FROM x;
CREATE SEQUENCE x;
CREATE TEMPORARY SEQUENCE x;
SELECT x, x, x, x, x, x, x, x, x FROM x ORDER BY x;
SET x = 'nulls_first';
SELECT * FROM x;
SELECT x, x FROM x WHERE x = 'default_null_order';
SET x = 'nulls_last';
SELECT x, x FROM x WHERE x = 'default_null_order';
SET x = 'nulls_first';
SELECT * FROM x;
SELECT x, x FROM x WHERE x = 'default_null_order';
SET x = 'nulls_last';
SELECT x, x FROM x WHERE x = 'default_null_order';
SELECT COUNT(*) FROM x;
CREATE TABLE x (x INT);
CREATE TABLE x (x INT PRIMARY KEY, x TEXT, CHECK (x < 100));
CREATE SCHEMA x.x;
CREATE TABLE x.x (x DOUBLE);
CREATE TEMPORARY TABLE x (x INT);
CREATE VIEW x AS SELECT 42;
SELECT x, x, x, x, x, x, x, x, x FROM x ORDER BY x;
SELECT * FROM x;
SELECT COUNT(*) FROM x;
CREATE VIEW x AS SELECT 42;
CREATE TEMPORARY VIEW x AS SELECT 42;
CREATE SCHEMA x.x;
CREATE VIEW x.x AS SELECT 42;
SELECT x, x, x, x FROM x WHERE NOT x ORDER BY x;
SELECT x, x, x, x FROM x ORDER BY x;
SET x = 'gregorian';
SET x = 'America/Los_Angeles';
SELECT x FROM x AS x;
SELECT x FROM x AS x;
SELECT x FROM x AS x;
SELECT x FROM x AS x;
SELECT x FROM x AS x;
SELECT x FROM x AS x;
SELECT COUNT(*) FROM x AS x;
SELECT COUNT(*) FROM x AS x;
SELECT x FROM x AS x;
SELECT x FROM x AS x;
SELECT x FROM x AS x;
SELECT x FROM x AS x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT * FROM x.x;
SELECT * FROM x.x;
CREATE SCHEMA x.x;
SELECT COUNT(*) FROM x.x WHERE x = 'scheme';
CREATE TABLE x.x (x INT);
SELECT x FROM x.x WHERE x = 'scheme' AND x = 'integers' AND NOT x IS NULL;
SELECT x, x, x FROM x.x WHERE x = 'integers';
SELECT x, x, x FROM x.x WHERE x = 'integers';
CREATE TEMPORARY TABLE x (x REAL PRIMARY KEY, x DECIMAL(16, 4), x INT128, x BIGINT, x TINYINT, x DOUBLE NOT NULL);
SELECT x FROM x.x WHERE x = 'temp' AND x = 'reals';
SELECT x, x, x FROM x.x WHERE x = 'reals' ORDER BY x;
CREATE VIEW x.x AS SELECT * FROM x.x;
SELECT x FROM x.x WHERE x = 'scheme' AND x = 'vintegers';
SELECT x FROM x.x WHERE x = 'scheme' AND x = 'vintegers';
SELECT x, x, x FROM x.x WHERE x = 'scheme' AND x = 'vintegers' AND NOT x IS NULL;
SELECT x, x, x, x FROM x.x;
SELECT * FROM x.x;
SELECT * FROM x.x;
SELECT * FROM x.x;
CREATE TABLE x.x (x INT PRIMARY KEY, x TEXT NOT NULL);
CREATE TABLE x.x (x INT PRIMARY KEY, x TEXT NOT NULL, x TEXT NOT NULL, x INT NOT NULL UNIQUE, x DECIMAL(10, 2) NOT NULL CHECK (x > 0), x INT REFERENCES x.x (x));
SELECT x, x, x, x, x, x, x FROM x.x WHERE x = 'scheme' AND x = 'emp' ORDER BY x ASC;
SELECT x, x, x, x, x, x FROM x.x WHERE x = 'scheme' AND x = 'emp' ORDER BY x ASC;
SELECT x, x, x, x FROM x.x WHERE x = 'scheme' AND x LIKE 'CHECK%';
CREATE OR REPLACE VIEW x.x AS SELECT x.*, x.x FROM x.x JOIN x.x ON x.x = x.x;
SELECT x, x, x, SUBSTRING(x, 1, 32) AS x, x, x, x, x, x, x FROM x.x WHERE x = 'scheme' AND x = 'emp_dept_view';
DROP SCHEMA x.x CASCADE;
SELECT COUNT(*) FROM x.x WHERE x = 'scheme';
SELECT COUNT(*) FROM x.x WHERE x = 'scheme';
SELECT COUNT(*) FROM x.x WHERE x = 'scheme';
CREATE TABLE x (x INT PRIMARY KEY);
CREATE TABLE x (x INT REFERENCES x);
SELECT x FROM x.x WHERE x LIKE '%KEY' ORDER BY 1;
SELECT x FROM x.x ORDER BY 1;
SELECT x, x FROM x.x;
DROP TABLE x;
DROP TABLE x;
CREATE TABLE x (x INT PRIMARY KEY);
CREATE TABLE x (x INT REFERENCES x (x));
SELECT x FROM x.x WHERE x LIKE '%KEY' ORDER BY 1;
SELECT x FROM x.x ORDER BY 1;
SELECT x, x FROM x.x;
DROP TABLE x;
DROP TABLE x;
CREATE TABLE x (x INT, x INT, x INT, UNIQUE (x, x), UNIQUE (x, x));
CREATE TABLE x (x INT, x INT, x INT, FOREIGN KEY (x, x) REFERENCES x (x, x), FOREIGN KEY (x, x) REFERENCES x (x, x));
SELECT x, x FROM x.x ORDER BY ALL;
CREATE TABLE x (x INT, x INT, PRIMARY KEY (x, x));
CREATE TABLE x (x INT, x INT, FOREIGN KEY (x, x) REFERENCES x);
SELECT x, x, x FROM x.x ORDER BY x, x;
PRAGMA x;
SELECT x, x FROM x WHERE x = 'system' AND x = 'information_schema' AND x = 'NULL';
PRAGMA x;
SELECT * FROM x;
SELECT * FROM (SELECT 'myfile.csv' AS x), x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x AS x;
SELECT * FROM x AS x;
SELECT * FROM x AS x;
SELECT * FROM x AS x;
SELECT * FROM x AS x;
PRAGMA x;
SELECT * FROM x;
SELECT * FROM (SELECT NULL AS x), x;
SELECT * FROM (SELECT NULL AS x), x;
SELECT * FROM x AS x, x AS x ORDER BY x, x;
SELECT * FROM x AS x, x AS x, x AS x ORDER BY x, x, x;
SELECT * FROM x AS x, x AS x, x AS x ORDER BY x, x, x;
SELECT x, x, x, x FROM (SELECT ['null'], NULL, 'null' UNION ALL SELECT ['five'], 5, 'five' UNION ALL SELECT ['two'], 2, 'two') AS x, x AS x ORDER BY x, x;
SELECT * FROM (SELECT 42 WHERE 42 > 84) AS x, x AS x;
SELECT * FROM (SELECT CAST('5' AS TEXT)) AS x, x AS x;
SELECT * FROM (SELECT 3, 1, -1 UNION ALL SELECT 1, 3, 2) AS x, x AS x ORDER BY x, x;
SELECT * FROM (SELECT CAST('2000-01-01' AS DATE), CAST('2000-10-1' AS DATE), INTERVAL '3' MONTHS) AS x, x AS x ORDER BY x, x;
SELECT * FROM (SELECT CAST('2000-01-01' AS DATE), CAST('2000-10-1' AS DATE), INTERVAL '3' MONTHS) AS x, x AS x ORDER BY x, x;
SELECT * FROM (SELECT CAST('2000-01-01' AS DATE), CAST('2000-10-1' AS DATE), NULL) AS x, x AS x ORDER BY x, x;
SELECT COUNT(*) FROM (VALUES (1), (10), (100), (1000), (10000)) AS x, x;
SET x = 'UTC';
SELECT * FROM (SELECT CAST('2000-01-01' AS TIMESTAMPTZ), CAST('2000-10-1' AS TIMESTAMPTZ), INTERVAL '3' MONTHS) AS x, x AS x ORDER BY x, x;
SELECT * FROM (SELECT CAST('2000-01-01' AS TIMESTAMPTZ), CAST('2000-10-1' AS TIMESTAMPTZ), NULL) AS x, x AS x ORDER BY x, x;
SELECT * FROM (SELECT CAST('2000-01-01' AS TIMESTAMPTZ), CAST('2000-10-1' AS TIMESTAMPTZ), NULL UNION ALL SELECT CAST('2000-10-01' AS TIMESTAMPTZ), CAST('2000-01-1' AS TIMESTAMPTZ), INTERVAL '3' MONTHS) AS x, x AS x ORDER BY x, x;
PRAGMA x;
SELECT COUNT(*) FROM x;
SELECT TO_TIMESTAMP(x) AS x FROM x;
SELECT CAST(x AS DATE) FROM x AS x;
SELECT * FROM x;
SELECT CAST(x AS DATE) FROM x AS x;
SELECT x FROM x AS x;
SELECT * FROM x;
SELECT * FROM x;
SELECT x FROM x AS x;
SELECT x FROM x AS x;
SELECT x FROM x AS x;
SELECT COUNT(*) FROM x AS x;
SELECT COUNT(*) FROM x AS x;
SELECT COUNT(*) FROM x AS x;
SELECT COUNT(*) FROM x AS x;
SELECT x FROM x AS x;
SELECT x FROM x AS x;
SELECT x FROM x AS x;
SELECT x FROM x AS x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT * FROM x ORDER BY ALL;
SELECT PARSE_PATH(x) FROM x ORDER BY ALL;
SELECT PARSE_PATH(x) FROM x ORDER BY ALL;
SELECT PARSE_PATH(x), x, x FROM x;
SELECT PARSE_PATH(x), x, x FROM x;
SELECT x, PARSE_PATH(x), x FROM x ORDER BY x, x;
SELECT x > '2024-01-01' AND x < '2500-01-01' FROM x;
CREATE TABLE x (x INT);
SELECT * FROM x;
SELECT EXISTS(SELECT * FROM x);
SELECT EXISTS(SELECT * FROM x OFFSET 1);
SELECT COUNT(*) FROM x WHERE x = 'test';
SELECT COUNT(*) FROM x WHERE x = 'integers';
CREATE TABLE x (x INT PRIMARY KEY DEFAULT (3), x BLOB NOT NULL);
SELECT * FROM x WHERE x = 'tconstraint1';
CREATE TABLE x (x INT, x INT, x INT, x INT UNIQUE, PRIMARY KEY (x, x, x));
SELECT * FROM x WHERE x = 'tconstraint2';
CREATE INDEX x ON x(x);
SELECT * REPLACE (TRIM(x, CHR(10)) AS x) FROM x WHERE x = 'i_index';
CREATE VIEW x AS SELECT 42;
SELECT "x", "x", "x", x FROM x WHERE x = 'v1';
BEGIN;
BEGIN;
SELECT * FROM x;
SELECT * FROM x;
ROLLBACK;
ROLLBACK;
SELECT * FROM x;
DROP VIEW x;
CREATE TABLE x ("x" INT, x INT);
SELECT * FROM x;
DROP TABLE x;
CREATE TABLE x (x INT);
SELECT * FROM x;
DROP TABLE x;
CREATE TABLE x ("x" INT, "x" INT, PRIMARY KEY ("x", "x"));
SELECT * FROM x;
DROP TABLE x;
CREATE TABLE x (x INT, x INT);
SELECT * FROM x;
CREATE TABLE x (x TEXT, x INT, x TIME, x TIME, x BIGINT, x BIGINT, x TEXT, x TIME, x TEXT, x INT, x BIGINT, x TIME, x TIME, x TEXT, x TIME, x TEXT, x TEXT, x INT, x TIME, x INT, x BIGINT, x TIME, x INT, x BIGINT, x TEXT, x TEXT, x BIGINT, x TIME, x BIGINT, x TIME, x TEXT, x INT, x INT, x TEXT, x BIGINT, x TEXT, x BIGINT, x TEXT, x INT, x TIME, x TIME, x TIME, x BIGINT, x TEXT, x BIGINT, x INT, x TIME, x INT, x INT, x TEXT, x TEXT, x INT, x TIME, x TEXT, x TEXT, x TEXT, x BIGINT, x TIME, x BIGINT, x TIME, x TIME, x TEXT, x TEXT, x TIME, x TEXT, x TEXT, x BIGINT, x INT, x BIGINT, x TEXT, x INT, x TEXT, x BIGINT, x BIGINT, x TEXT, x TIME, x TEXT, x INT, x TIME, x TEXT, x BIGINT, x INT, x BIGINT, x BIGINT, x BIGINT, x TIME, x BIGINT, x TIME, x TIME, x INT, x BIGINT, x BIGINT, x INT, x INT, x TIME, x TEXT, x TEXT, x TEXT, x TEXT, x INT, x TEXT, x INT, x TIME, x TEXT, x BIGINT, x TEXT, x INT, x TEXT, x TIME, x TIME, x BIGINT, x INT, x TIME, x INT, x TIME, x INT, x INT, x TIME, x TEXT, x BIGINT, x TIME, x INT, x INT, x TEXT, x TEXT, x BIGINT, x TEXT, x TEXT, x BIGINT, x TIME, x TIME, x INT, x TEXT, x TEXT, x BIGINT, x INT, x INT, x BIGINT, x TIME, x TIME, x TEXT, x TEXT, x TIME, x TEXT, x BIGINT, x BIGINT, x TIME, x TEXT, x BIGINT, x BIGINT, x TIME, x TEXT, x TEXT, x TIME, x TIME, x TEXT, x TIME, x TEXT, x BIGINT, x TIME, x TIME, x TEXT, x INT, x TIME, x BIGINT, x TIME, x INT, x INT, x INT, x BIGINT, x INT, x TEXT, x TEXT, x INT, x TIME, x INT, x BIGINT, x TIME, x INT, x INT, x INT, x BIGINT, x TEXT, x INT, x TIME, x TIME, x BIGINT, x BIGINT, x TEXT, x TEXT, x BIGINT, x INT, x INT, x INT, x INT, x TEXT, x TEXT, x TIME, x TEXT, x BIGINT, x TEXT, x TIME, x TEXT, x BIGINT, x BIGINT, x INT, x TEXT, x BIGINT, x BIGINT, x TIME, x TEXT, x INT, x TEXT, x INT, x BIGINT, x INT, x INT, x BIGINT, x INT, x INT, x INT, x INT, x TEXT, x TEXT, x BIGINT, x BIGINT, x INT, x TEXT, x INT, x TEXT, x BIGINT, x TEXT, x TIME, x BIGINT, x BIGINT, x TIME, x INT, x TIME, x INT, x BIGINT, x BIGINT, x INT, x TIME, x INT, x TIME, x BIGINT, x TIME, x TEXT, x TEXT, x INT, x BIGINT, x TEXT, x TEXT, x BIGINT, x TEXT, x TEXT, x TEXT, x BIGINT, x TIME, x TIME, x TEXT, x INT, x TEXT, x INT, x BIGINT, x TEXT, x INT, x TEXT, x TEXT, x TIME, x BIGINT, x BIGINT, x BIGINT, x TEXT, x TEXT, x TIME, x TIME, x INT, x BIGINT, x INT, x BIGINT, x INT, x TEXT, x TEXT, x TEXT, x TIME, x BIGINT, x BIGINT, x INT, x TEXT, x BIGINT, x TEXT, x TIME, x TEXT, x TIME, x TIME, x BIGINT, x INT, x BIGINT, x INT, x TIME, x TIME, x TEXT, x INT, x BIGINT, x BIGINT, x INT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x TEXT, x TIME, x BIGINT, x TIME, x INT, x TEXT, x BIGINT, x TIME, x INT, x INT, x BIGINT, x INT, x TIME, x TIME, x INT, x TIME, x BIGINT, x INT, x BIGINT, x INT, x INT, x INT, x TEXT, x BIGINT, x TIME, x INT, x BIGINT, x TIME, x BIGINT, x TIME, x BIGINT, x TEXT, x BIGINT, x TIME, x BIGINT, x TIME, x BIGINT, x INT, x TEXT, x TEXT, x INT, x TEXT, x BIGINT, x INT, x TEXT, x INT, x INT, x TEXT, x TEXT, x TIME, x BIGINT, x TEXT, x BIGINT, x TEXT, x TIME, x TEXT, x TEXT, x TEXT, x TEXT, x BIGINT, x BIGINT, x TIME, x TIME, x TEXT, x BIGINT, x TEXT, x INT, x BIGINT, x TEXT, x INT, x INT, x TEXT, x TEXT, x TIME, x TIME, x TEXT, x TEXT, x TEXT, x BIGINT, x TEXT, x INT, x TEXT, x BIGINT, x TIME, x TIME, x INT, x BIGINT, x TEXT, x TIME, x TEXT, x TEXT, x TIME, x BIGINT, x TEXT, x TIME, x TIME, x TEXT, x TIME, x TIME, x TEXT, x TIME, x BIGINT, x TEXT, x TIME, x BIGINT, x TIME, x TEXT, x TEXT, x INT, x BIGINT, x BIGINT, x TIME, x TEXT, x TIME, x INT, x TIME, x TIME, x TEXT, x BIGINT, x TIME, x TEXT, x TEXT, x INT, x INT, x TEXT, x TIME, x TIME, x TIME, x INT, x TEXT, x INT, x BIGINT, x INT, x BIGINT, x BIGINT, x TIME, x TEXT, x INT, x TIME, x TEXT, x INT, x TEXT, x INT, x TEXT, x TEXT, x BIGINT, x TIME, x BIGINT, x INT, x BIGINT, x INT, x TEXT, x TIME, x TEXT, x INT, x BIGINT, x TEXT, x INT, x BIGINT, x TIME, x INT, x TEXT, x BIGINT, x BIGINT, x BIGINT, x TEXT, x TIME, x BIGINT, x TIME, x INT, x INT, x BIGINT, x INT, x TEXT, x INT, x INT, x BIGINT, x BIGINT, x TEXT, x INT, x INT, x BIGINT, x TEXT, x TIME, x INT, x BIGINT, x TEXT, x TEXT, x TEXT, x TIME, x INT, x TEXT, x INT, x TIME, x BIGINT, x BIGINT, x INT, x BIGINT, x BIGINT, x BIGINT, x TIME, x TEXT, x TIME, x INT, x TIME, x TIME, x BIGINT, x INT, x TIME, x TEXT, x INT, x INT, x INT, x BIGINT, x TIME, x TIME, x TEXT, x TIME, x TIME, x TEXT, x INT, x BIGINT, x BIGINT, x INT, x BIGINT, x TEXT, x INT, x TIME, x TEXT, x BIGINT, x TIME, x BIGINT, x INT, x TIME, x INT, x BIGINT, x BIGINT, x INT, x INT, x TIME, x INT, x TIME, x BIGINT, x INT, x TIME, x BIGINT, x TIME, x BIGINT, x TIME, x TEXT, x BIGINT, x INT, x INT, x BIGINT, x TIME, x BIGINT, x INT, x BIGINT, x BIGINT, x INT, x INT, x BIGINT, x TIME, x TEXT, x INT, x INT, x TIME, x TIME, x TIME, x TEXT, x BIGINT, x TEXT, x TIME, x TEXT, x TIME, x BIGINT, x INT, x TIME, x INT, x BIGINT, x TIME, x TEXT, x TIME, x BIGINT, x TIME, x TIME, x TEXT, x TIME, x BIGINT, x INT, x BIGINT, x INT, x BIGINT, x INT, x TEXT, x TEXT, x INT, x BIGINT, x BIGINT, x TIME, x BIGINT, x TIME, x TIME, x INT, x TEXT, x BIGINT, x TIME, x TIME, x TIME, x TIME, x TEXT, x BIGINT, x BIGINT, x TEXT, x INT, x TEXT, x TEXT, x TIME, x TIME, x BIGINT, x BIGINT, x INT, x INT, x TEXT, x INT, x BIGINT, x BIGINT, x INT, x TIME, x TIME, x BIGINT, x TEXT, x INT, x TIME, x TEXT, x TIME, x INT, x INT, x TEXT, x TIME, x BIGINT, x BIGINT, x INT, x TIME, x INT, x INT, x INT, x BIGINT, x BIGINT, x TIME, x BIGINT, x INT, x BIGINT, x BIGINT, x TEXT, x TEXT, x TEXT, x TIME, x TIME, x TEXT, x BIGINT, x INT, x INT, x BIGINT, x BIGINT, x BIGINT, x INT, x TEXT, x TEXT, x TEXT, x BIGINT, x TEXT, x BIGINT, x INT, x TIME, x INT, x TIME, x TEXT, x TIME, x TEXT, x TEXT, x TEXT, x BIGINT, x TEXT, x TEXT, x TIME, x TIME, x BIGINT, x TEXT, x BIGINT, x INT, x INT, x TIME, x BIGINT, x TIME, x BIGINT, x INT, x BIGINT, x INT, x TEXT, x TIME, x TEXT, x BIGINT, x INT, x TIME, x BIGINT, x TIME, x BIGINT, x TEXT, x BIGINT, x TIME, x BIGINT, x INT, x TEXT, x TIME, x TIME, x INT, x BIGINT, x INT, x INT, x TIME, x INT, x INT, x BIGINT, x TEXT, x TEXT, x TEXT, x TIME, x BIGINT, x TEXT, x INT, x INT, x BIGINT, x TIME, x BIGINT, x BIGINT, x TIME, x TIME, x TIME, x TEXT, x INT, x TIME, x INT, x TIME, x INT, x INT, x BIGINT, x INT, x TIME, x TIME, x TIME, x INT, x BIGINT, x INT, x BIGINT, x TIME, x INT, x TIME, x TIME, x INT, x TEXT, x INT, x BIGINT, x TEXT, x TIME, x TIME, x BIGINT, x TEXT, x INT, x INT, x INT, x BIGINT, x INT, x TIME, x TIME, x TEXT, x INT, x TIME, x INT, x TEXT, x TEXT, x TIME, x BIGINT, x INT, x INT, x TEXT, x TIME, x TIME, x BIGINT, x TIME, x TIME, x BIGINT, x TIME, x BIGINT, x BIGINT, x TEXT, x TIME, x INT, x INT, x BIGINT, x TEXT, x INT, x TIME, x TIME, x INT, x TIME, x TEXT, x INT, x INT, x INT, x INT, x TEXT, x INT, x BIGINT, x INT, x INT, x BIGINT, x BIGINT, x TEXT, x INT, x TEXT, x INT, x TEXT, x BIGINT, x BIGINT, x TIME, x TIME, x TEXT, x INT, x TEXT, x INT, x BIGINT, x TIME, x TEXT, x TEXT, x INT, x INT, x TEXT, x TIME, x INT, x INT, x TIME, x TIME, x BIGINT, x TIME, x TIME, x TIME, x TIME, x TEXT, x TIME, x TIME, x INT, x INT, x TEXT, x BIGINT, x BIGINT, x TIME, x TIME, x TEXT, x TIME, x TIME, x BIGINT, x TIME, x BIGINT, x BIGINT, x TEXT, x BIGINT, x TEXT, x TIME, x TEXT, x BIGINT, x INT, x TEXT, x TIME, x TIME, x TIME, x TEXT, x TIME, x TIME, x TEXT, x TEXT, x TEXT, x TIME, x BIGINT, x TEXT, x INT, x BIGINT, x TIME, x TIME, x TIME, x TEXT, x TEXT, x INT, x TEXT, x TIME, x BIGINT, x TIME, x TEXT, x TIME, x BIGINT, x TEXT, x TIME, x INT, x BIGINT, x TEXT, x TEXT, x BIGINT, x TEXT, x TIME, x INT, x BIGINT, x TIME, x BIGINT, x TIME, x TEXT, x TEXT, x TEXT, x TEXT, x BIGINT, x TEXT, x INT, x BIGINT, x INT, x BIGINT, x BIGINT, x INT, x BIGINT, x TEXT, x TIME, x INT, x TIME, x INT, x TEXT, x BIGINT, x TIME, x BIGINT, x TEXT, x TIME, x TIME, x TIME, x INT, x TEXT, x BIGINT, x TIME, x TEXT, x INT, x BIGINT, x BIGINT, x BIGINT, x BIGINT, x INT, x TIME, x TEXT, x BIGINT, x TEXT, x BIGINT, x TIME, x TEXT, x TIME, x TIME, x TIME, x INT, x INT, x BIGINT, x BIGINT, x BIGINT, x TIME, x BIGINT, x TEXT, x TEXT, x BIGINT, x INT, x BIGINT, x TIME, x BIGINT, x INT, x BIGINT, x INT, x BIGINT, x BIGINT, x TIME, x BIGINT, x BIGINT, x BIGINT, x INT, x INT, x INT, x INT, x TEXT, x TIME, x BIGINT, x BIGINT, x BIGINT, x TIME, x TEXT, x TEXT, x TEXT, x INT, x BIGINT, x BIGINT, x TIME, x BIGINT, x TIME, x INT, x TEXT, x TIME, x TIME, x INT, x TEXT, x TEXT, x INT, x BIGINT, x TIME, x BIGINT);
SELECT COUNT(1) FROM x.x WHERE x = 'wide';
SELECT COUNT(1) FROM x.x WHERE x = 'wide' AND x = 'col1024' AND x = 'BIGINT';
CREATE VIEW x AS SELECT * FROM x;
SELECT COUNT(1) FROM x.x WHERE x = 'wide' OR x = 'vwide';
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x ORDER BY 1 ASC;
SELECT * FROM x ORDER BY 1 ASC;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT EXISTS(SELECT * FROM x);
SELECT EXISTS(SELECT * FROM x);
SELECT * FROM x AS x WHERE x = 3;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x AS x, x AS x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
CREATE TABLE x (x INT, x INT);
SELECT * FROM x;
SELECT x FROM x;
SELECT x FROM x;
CREATE TABLE x (x TEXT, x INT);
INSERT INTO x VALUES ('i', 33), ('j', 44);
SELECT x.x, x, x FROM x AS x INNER JOIN x ON x.x = x.x ORDER BY x.x;
SELECT x, x FROM (SELECT * FROM x) AS x;
SET x = FALSE;
SELECT CAST(CAST('2020-01-01T00:00:00' AS TIMESTAMP) AS TIMESTAMPTZ);
SET x = TRUE;
SELECT CAST(CAST('2020-01-01T00:00:00' AS TIMESTAMP) AS TIMESTAMPTZ);
SET x = 'gregorian';
SET x = 'America/Los_Angeles';
SET x = FALSE;
SELECT CAST(CAST('2020-01-01T00:00:00' AS TIMESTAMP) AS TIMESTAMPTZ);
SET x = TRUE;
SELECT CAST(CAST('2020-01-01T00:00:00' AS TIMESTAMP) AS TIMESTAMPTZ);
SET x = 'hebrew';
SET x = 'UTC';
SELECT AGE(CAST('2020-01-01' AS TIMESTAMPTZ) + INTERVAL (30) DAY, CAST('2020-01-01' AS TIMESTAMPTZ));
SELECT AGE(CAST('2020-06-01' AS TIMESTAMPTZ) + INTERVAL (230) DAY, CAST('2020-06-01' AS TIMESTAMPTZ));
SELECT AGE(CAST('2021-06-01' AS TIMESTAMPTZ), CAST('2020-06-01' AS TIMESTAMPTZ) + INTERVAL (230) DAY);
SET x = 'gregorian';
SET x = 'America/Los_Angeles';
SELECT x FROM x GROUP BY 1 ORDER BY 1;
SELECT * FROM x WHERE x = 'Calendar';
SET x = 'fnord';
SET x = 'Asia/Tokyo';
CREATE TABLE x AS SELECT CAST(x AS TIMESTAMPTZ) AS x, x FROM (VALUES ('0645-06-30 00:00:00+00', 'Taika'), ('1867-01-01 00:00:00+00', 'Keiou'), ('1868-09-07 00:00:00+00', 'Keiou'), ('1868-09-08 00:00:00+00', 'Meiji'), ('1912-07-29 00:00:00+00', 'Meiji'), ('1912-07-30 00:00:00+00', 'Taisho'), ('1926-12-24 00:00:00+00', 'Taisho'), ('1926-12-25 00:00:00+00', 'Showa'), ('1989-01-06 00:00:00+00', 'Showa'), ('1989-01-08 00:00:00+00', 'Heisei'), ('2019-05-01 00:00:00+00', 'Reiwa'), ('2022-01-01 00:00:00+00', 'Reiwa')) AS x;
SET x = 'japanese';
SELECT * FROM x WHERE x = 'Calendar';
SELECT x, x, DATE_PART(['era', 'year', 'month', 'day'], x) FROM x ORDER BY 2;
SET x = 'islamic-umalqura';
SET x = 'islamic-umalqura';
SET x = 'indian';
SELECT CAST('-276069-9-30 0:0:00 America/Whitehorse' AS TIMESTAMPTZ);
PRAGMA x = 'japanese';
PRAGMA x = 'japanese';
SET x = 'gregorian';
SET x = 'Europe/Duck';
SET x = 'America/Los_Angeles';
SELECT * FROM x WHERE x = 'TimeZone';
SELECT CAST('2001-02-16 20:38:40' AS TIMESTAMP) AT TIME ZONE 'America/Denver';
SELECT CAST('2001-02-16 20:38:40' AS TIMESTAMP) AT TIME ZONE 'america/denver';
SELECT CAST('2001-02-16 20:38:40' AS TIMESTAMP) AT TIME ZONE 'America/Donver';
SELECT CAST('2001-02-16 20:38:40-05' AS TIMESTAMPTZ) AT TIME ZONE 'America/Denver';
SELECT CAST('2001-02-16 20:38:40' AS TIMESTAMP) AT TIME ZONE 'Europe/Duck';
SELECT CAST('2001-02-16 20:38:40-05' AS TIMESTAMPTZ) AT TIME ZONE 'Europe/Duck';
SELECT CAST('2001-02-16 20:38:40-05' AS TIMESTAMPTZ) AT TIME ZONE 'Europe/Duck';
SELECT CAST('2001-02-16 20:38:40-05' AS TIMESTAMPTZ) AT TIME ZONE 'Europe/Duck';
SELECT CAST('2001-02-16 20:38:40-05' AS TIMESTAMPTZ) AT TIME ZONE 'Europe/Duck';
SELECT CAST('2001-02-16 20:38:40-05' AS TIMESTAMPTZ) AT TIME ZONE 'Europe/Duck';
SELECT CAST(NULL AS TIMESTAMP) AT TIME ZONE 'America/Denver';
SELECT CAST(NULL AS TIMESTAMPTZ) AT TIME ZONE 'America/Denver';
SELECT CAST('2001-02-16 20:38:40' AS TIMESTAMP) AT TIME ZONE NULL;
SELECT CAST('2001-02-16 20:38:40-05' AS TIMESTAMPTZ) AT TIME ZONE NULL;
SELECT CAST('12:15:37.123456-08' AS TIMETZ) AT TIME ZONE 'America/Phoenix';
SELECT TIMEZONE('America/Phoenix', CAST('12:15:37.123456-08' AS TIMETZ));
SELECT CAST(CAST('2020-01-01' AS DATE) AS TIMESTAMPTZ) AS x;
SELECT CAST(CAST('infinity' AS DATE) AS TIMESTAMPTZ) AS x;
SELECT CAST(CAST('-infinity' AS DATE) AS TIMESTAMPTZ) AS x;
SELECT CAST(CAST('5877642-06-25 (BC)' AS DATE) AS TIMESTAMPTZ) AS x;
SELECT CAST(CAST('5881580-07-10' AS DATE) AS TIMESTAMPTZ) AS x;
CREATE TABLE x (x TIMESTAMP, x TIMESTAMPTZ, x TIMETZ, x TEXT);
INSERT INTO x (VALUES('2001-02-16 20:38:40', '2001-02-16 19:38:40-08', '19:38:40-08', 'America/Phoenix'), ('2001-02-16 18:38:40', '2001-02-16 20:38:40-05', '20:38:40-05', 'America/Phoenix'), ('infinity', 'infinity', '19:38:40-08', 'America/Phoenix'), ('-infinity', '-infinity', '20:38:40-05', 'America/Phoenix'), (NULL, NULL, NULL, 'America/Phoenix'), ('2001-02-16 20:38:40', '2001-02-16 19:38:40-08', '19:38:40+08', 'UTC'), ('2001-02-16 18:38:40', '2001-02-16 20:38:40-05', '20:38:40+15:59', 'UTC'), ('infinity', 'infinity', '12:15:37.123456-08', 'UTC'), ('-infinity', '-infinity', '20:38:40-15:59', 'UTC'), (NULL, NULL, NULL, 'UTC'), ('2001-02-16 20:38:40', '2001-02-16 19:38:40-08', '19:38:40-08', NULL), ('2001-02-16 18:38:40', '2001-02-16 20:38:40-05', '20:38:40-05', NULL), ('infinity', 'infinity', '12:15:37.123456-08', NULL), ('-infinity', '-infinity', '20:38:40-15:59', NULL));
SELECT x AT TIME ZONE x, x AT TIME ZONE x, x AT TIME ZONE x FROM x;
SELECT x AT TIME ZONE x, x AT TIME ZONE x, x AT TIME ZONE x FROM x WHERE x > CAST('2001-02-16 18:38:40' AS TIMESTAMP);
SELECT "x";
SELECT "x";
SELECT CURRENT_LOCALTIMESTAMP();
SELECT CURRENT_LOCALTIME();
SELECT x, x FROM x ORDER BY x;
SET x = 'Asia/Amman';
SELECT CAST('2022-10-29 00:00:00+00' AS TIMESTAMPTZ);
SET x = 'America/Chihuahua';
SELECT CAST('2022-11-01 00:00:00+00' AS TIMESTAMPTZ);
SET x = 'America/Ciudad_Juarez';
SELECT CAST('2023-05-01 12:00:00+00' AS TIMESTAMPTZ);
SET x = 'Egypt';
SELECT CAST('2023-05-15 12:00:00+00' AS TIMESTAMPTZ);
SET x = 'Asia/Beirut';
SELECT CAST('2023-03-26 12:00:00+00' AS TIMESTAMPTZ), CAST('2023-04-21 12:00:00+00' AS TIMESTAMPTZ);
SET x = 'America/Nuuk';
SELECT CAST('2022-10-30 03:00:00-07' AS TIMESTAMPTZ), CAST('2023-10-30 02:00:00-07' AS TIMESTAMPTZ);
SET x = 'America/Scoresbysund';
SELECT CAST('2024-03-31 00:59:00-01' AS TIMESTAMPTZ), CAST('2024-03-31 01:00:00-01' AS TIMESTAMPTZ);
SET x = 'Asia/Almaty';
SELECT CAST('2024-02-29 00:00:00+06' AS TIMESTAMPTZ), CAST('2024-03-01 01:00:00+06' AS TIMESTAMPTZ);
SET x = 'Atlantic/Azores';
SELECT CAST('1981-09-27 01:00:00+00' AS TIMESTAMPTZ);
SET x = 'America/Asuncion';
SELECT CAST('2025-03-23' AS TIMESTAMPTZ);
SELECT x, x FROM x WHERE x = 'America/Asuncion';
SET x = 'America/Coyhaique';
SELECT CAST('2025-04-05' AS TIMESTAMPTZ);
SELECT x, x FROM x WHERE x = 'America/Coyhaique';
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (22), (2), (7);
SELECT x FROM x ORDER BY x DESC LIMIT 2;
SELECT x FROM x ORDER BY x LIMIT 1 OFFSET 1;
SELECT x FROM x ORDER BY x LIMIT 10;
SELECT x FROM x ORDER BY x DESC LIMIT 10;
SELECT x FROM x ORDER BY x LIMIT 10 OFFSET 1;
SELECT x FROM x ORDER BY x LIMIT 10 OFFSET 10;
SELECT x FROM x ORDER BY x OFFSET 10;
PRAGMA x;
SELECT x FROM x ORDER BY x NULLS FIRST LIMIT 5;
SELECT x FROM x ORDER BY x LIMIT 5;
SELECT x FROM x ORDER BY x DESC NULLS FIRST LIMIT 5;
SELECT x FROM x ORDER BY x DESC LIMIT 5;
DROP TABLE x;
DROP TABLE x;
SELECT x FROM x ORDER BY x NULLS FIRST LIMIT 5;
SELECT x FROM x ORDER BY x LIMIT 5;
SELECT x FROM x ORDER BY x DESC NULLS FIRST LIMIT 5;
SELECT x FROM x ORDER BY x DESC LIMIT 5;
DROP TABLE x;
SELECT RANGE(0, x) AS x FROM x AS x ORDER BY x DESC LIMIT 3;
SELECT RANGE(0, x) AS x FROM x AS x ORDER BY x ASC LIMIT 3;
PRAGMA x;
CREATE TABLE x AS SELECT x, x % 1000 AS x FROM x AS x;
SELECT * FROM x ORDER BY x, x LIMIT 5;
SELECT * FROM x ORDER BY x DESC, x DESC LIMIT 5;
PRAGMA x;
CREATE TABLE x (x BIGINT, x TEXT, x STRUCT(x STRUCT(x INT, x INT), x STRUCT(x INT, x INT)));
INSERT INTO x VALUES (42, 'entity', {'x': {'x': 42, 'x': 43}, 'x': {'x': 44, 'x': 45}}), (142, 'entity2', {'x': {'x': 142, 'x': 143}, 'x': {'x': 144, 'x': 145}});
SELECT UNNEST(x, x := TRUE) FROM x LIMIT 1;
SELECT UNNEST(x, x := TRUE) FROM x ORDER BY x.x.x LIMIT 1;
SELECT UNNEST(x, x := TRUE) FROM x ORDER BY x.x.x DESC LIMIT 1;
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (NULL);
SELECT * FROM x ORDER BY x NULLS FIRST LIMIT 2;
SELECT * FROM x ORDER BY x LIMIT 2;
SELECT * FROM x ORDER BY x DESC NULLS FIRST LIMIT 2;
SELECT * FROM x ORDER BY x DESC LIMIT 2;
PRAGMA x;
PRAGMA x = 4;
SELECT x FROM x ORDER BY x ASC NULLS FIRST LIMIT 5;
SELECT x FROM x ORDER BY x ASC LIMIT 5;
SELECT x FROM x ORDER BY x DESC NULLS FIRST LIMIT 5;
SELECT x FROM x ORDER BY x DESC LIMIT 5;
SELECT x FROM x ORDER BY x NULLS FIRST LIMIT 5 OFFSET 1000000;
SELECT x FROM x ORDER BY x DESC NULLS FIRST LIMIT 5 OFFSET 1000000;
SELECT x FROM x ORDER BY x LIMIT 5 OFFSET 1000000;
SELECT x, x FROM x ORDER BY x, x NULLS FIRST LIMIT 5;
SELECT x, x FROM x ORDER BY x, x LIMIT 5;
SELECT x, x FROM x ORDER BY x DESC, x DESC NULLS FIRST LIMIT 5;
SELECT x, x FROM x ORDER BY x DESC, x DESC LIMIT 5;
SELECT x, x FROM x ORDER BY x DESC NULLS FIRST, x DESC LIMIT 5;
SELECT x, x FROM x ORDER BY x DESC, x ASC LIMIT 5;
DROP TABLE x;
PRAGMA x;
SELECT x FROM x ORDER BY x ASC NULLS FIRST LIMIT 5;
SELECT x FROM x ORDER BY x ASC LIMIT 5;
SELECT x FROM x ORDER BY x DESC NULLS FIRST LIMIT 5;
SELECT x FROM x ORDER BY x DESC LIMIT 5;
SELECT x FROM x ORDER BY x NULLS FIRST LIMIT 5 OFFSET 100000;
SELECT x FROM x ORDER BY x DESC NULLS FIRST LIMIT 5 OFFSET 100000;
SELECT x FROM x ORDER BY x LIMIT 5 OFFSET 100000;
SELECT x, x FROM x ORDER BY x, x NULLS FIRST LIMIT 5;
SELECT x, x FROM x ORDER BY x, x LIMIT 5;
SELECT x, x FROM x ORDER BY x DESC, x DESC NULLS FIRST LIMIT 5;
SELECT x, x FROM x ORDER BY x DESC, x DESC LIMIT 5;
SELECT x, x FROM x ORDER BY x DESC NULLS FIRST, x DESC LIMIT 5;
SELECT x, x FROM x ORDER BY x DESC, x ASC LIMIT 5;
DROP TABLE x;
PRAGMA x;
SELECT x FROM x ORDER BY x ASC NULLS FIRST LIMIT 5;
SELECT x FROM x ORDER BY x ASC LIMIT 5;
SELECT x FROM x ORDER BY x DESC NULLS FIRST LIMIT 5;
SELECT x FROM x ORDER BY x DESC LIMIT 5;
SELECT x FROM x ORDER BY x NULLS FIRST LIMIT 5 OFFSET 1000;
SELECT x FROM x ORDER BY x DESC NULLS FIRST LIMIT 5 OFFSET 1000;
SELECT x FROM x ORDER BY x LIMIT 5 OFFSET 1000;
SELECT x, x FROM x ORDER BY x, x NULLS FIRST LIMIT 5;
SELECT x, x FROM x ORDER BY x, x LIMIT 5;
SELECT x, x FROM x ORDER BY x DESC, x DESC NULLS FIRST LIMIT 5;
SELECT x, x FROM x ORDER BY x DESC, x DESC LIMIT 5;
SELECT x, x FROM x ORDER BY x DESC NULLS FIRST, x DESC LIMIT 5;
SELECT x, x FROM x ORDER BY x DESC, x ASC LIMIT 5;
DROP TABLE x;
PRAGMA x;
SELECT x FROM x ORDER BY x NULLS FIRST LIMIT 5;
SELECT x FROM x ORDER BY x LIMIT 5;
SELECT x FROM x ORDER BY x DESC NULLS FIRST LIMIT 5;
SELECT x FROM x ORDER BY x DESC LIMIT 5;
DROP TABLE x;
PRAGMA x;
CREATE TABLE x AS SELECT x, x + 1 AS x, x + 2 AS x, -x AS x FROM x AS x;
SET x = 'optimized_only';
SELECT * FROM x ORDER BY x DESC LIMIT 2;
SELECT * FROM x ORDER BY x, x LIMIT 2;
SELECT * FROM (SELECT -x AS x, -x AS x, -x AS x, -x AS x FROM x) ORDER BY -x DESC LIMIT 2;
SELECT * FROM (SELECT 100 + x AS x, 1000 + x AS x, 10000 + x AS x, 100000 + x AS x FROM (SELECT -x AS x, -x AS x, -x AS x, -x AS x FROM x)) ORDER BY x DESC LIMIT 2;
SELECT * FROM x LIMIT 2 OFFSET 2;
SELECT * FROM x ORDER BY -x DESC LIMIT 2;
SELECT * FROM (SELECT -x AS x, -x AS x, -x AS x, -x AS x FROM x) ORDER BY -x DESC LIMIT 2;
SELECT * FROM (SELECT * FROM x ORDER BY x DESC LIMIT 2) WHERE x = 8;
SELECT x FROM (SELECT * FROM x ORDER BY x DESC LIMIT 2) WHERE x = 10;
CREATE OR REPLACE TABLE x AS SELECT x, PRINTF('%02d', x + 1) AS x, PRINTF('%02d', x + 2) AS x, -x AS x FROM x AS x;
SELECT * FROM x ORDER BY x DESC LIMIT 2;
SELECT x, x, x, x FROM x WHERE x > 5 ORDER BY x DESC LIMIT 2;
SET x = 0;
PRAGMA x;
CREATE TABLE x (x TEXT, x INT, x INT, x INT, x DECIMAL(38, 2), x INT128);
COPY x FROM 'data/csv/tpcds_14.csv' WITH (FORMAT CSV, DELIMITER '|', HEADER);
SELECT * FROM x ORDER BY x NULLS FIRST, x NULLS FIRST, x NULLS FIRST, x NULLS FIRST LIMIT 100;
SELECT * FROM x ORDER BY x DESC NULLS FIRST, x DESC NULLS FIRST, x DESC NULLS FIRST, x DESC NULLS FIRST LIMIT 100;
SELECT * FROM x ORDER BY x, x, x, x LIMIT 100;
SELECT * FROM x ORDER BY x DESC, x DESC, x DESC, x DESC LIMIT 100;
CREATE TABLE x (x TEXT, x TEXT, x INT, "x" DOUBLE, "x" DOUBLE, "x" DOUBLE, "x" DOUBLE, "x" DOUBLE, "x" DOUBLE, "x" DOUBLE);
COPY x FROM 'data/csv/tpcds_59.csv' WITH (FORMAT CSV, DELIMITER '|', HEADER);
SELECT * FROM x ORDER BY x NULLS FIRST, x NULLS FIRST, x NULLS FIRST LIMIT 100;
SELECT * FROM x ORDER BY x DESC, x LIMIT 2;
SELECT x FROM x WHERE x = 'O' ORDER BY x LIMIT 10 OFFSET 100;
SELECT x FROM x WHERE x = 'O' ORDER BY x LIMIT 10 OFFSET 1000000;
SELECT SUM(x) FROM x GROUP BY x ORDER BY SUM(x) DESC LIMIT 10 OFFSET 100;
SELECT SUM(x) FROM x GROUP BY x ORDER BY SUM(x) DESC LIMIT 10 OFFSET 100000;
CREATE TABLE x (x INT);
ATTACH '__TEST_DIR__/test_dsdgen_ro.db' AS x (READ_ONLY);
SELECT x FROM x;
SELECT COUNT(*) FROM x WHERE x IS NULL;
SELECT COUNT(*) FROM x WHERE x IS NULL;
SELECT COUNT(*) FROM x WHERE x IS NULL;
SELECT x FROM x GROUP BY 1 ORDER BY 1 DESC;
SELECT x FROM x GROUP BY 1;
SELECT COUNT(*) FROM x;
CREATE SCHEMA x.x;
SELECT COUNT(*) FROM x.x;
ATTACH ':memory:' AS x;
SELECT COUNT(*) FROM x.x;
CREATE SCHEMA x.x.x;
SELECT COUNT(*) FROM x.x.x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
DROP TABLE x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
PRAGMA TPCDS(-1);
PRAGMA TPCDS(3290819023812038903);
PRAGMA TPCDS(32908301298);
PRAGMA TPCDS(1.1);
PRAGMA x;
PRAGMA x = 'postgres';
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
PRAGMA x = 'NULLS LAST';
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
PRAGMA x = 'postgres';
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
PRAGMA x = 'NULLS LAST';
PRAGMA x = 'NULLS LAST';
PRAGMA x = 'NULLS LAST';
PRAGMA x = 'NULLS LAST';
PRAGMA x = 'NULLS LAST';
PRAGMA x;
SELECT * FROM x ORDER BY x DESC, x DESC LIMIT 5;
SELECT * FROM x ORDER BY x DESC, x, x DESC LIMIT 5;
SELECT * FROM x ORDER BY x DESC, x DESC, x DESC, x ASC LIMIT 5;
PRAGMA x;
SET x = '100MB';
SET x = '.unrecognized_folder/folder2';
CREATE TABLE x (x INT);
ATTACH '__TEST_DIR__/test_dbgen_ro.db' AS x (READ_ONLY);
PRAGMA x;
SET x = '750MB';
CREATE OR REPLACE TABLE x AS (SELECT * FROM x);
PRAGMA TPCH(1);
CREATE VIEW x AS (SELECT * FROM (SELECT x FROM x) POSITIONAL JOIN (SELECT x FROM x) POSITIONAL JOIN (SELECT x FROM x) POSITIONAL JOIN (SELECT x FROM x) POSITIONAL JOIN (SELECT x FROM x) POSITIONAL JOIN (SELECT x FROM x) POSITIONAL JOIN (SELECT x FROM x));
PRAGMA TPCH(1);
SELECT STATS(1 - x) FROM x LIMIT 1;
SELECT STATS(1 + x) FROM x LIMIT 1;
SELECT STATS(x * (1 - x)) FROM x LIMIT 1;
SELECT STATS(x * (1 - x) * (1 + x)) FROM x LIMIT 1;
PRAGMA x = 4;
PRAGMA x;
SELECT x, x, SUM(x) AS x, SUM(x) AS x, SUM(x * (1 - x)) AS x, SUM(x * (1 - x) * (1 + x)) AS x, AVG(x) AS x, AVG(x) AS x, AVG(x) AS x, COUNT(*) AS x FROM (SELECT * FROM x WHERE x <= CAST('1990-09-02' AS DATE) UNION ALL SELECT * FROM x WHERE x > CAST('1990-09-02' AS DATE) AND x <= CAST('1992-09-02' AS DATE) UNION ALL SELECT * FROM x WHERE x > CAST('1992-09-02' AS DATE) AND x <= CAST('1994-09-02' AS DATE) UNION ALL SELECT * FROM x WHERE x > CAST('1994-09-02' AS DATE) AND x <= CAST('1996-09-02' AS DATE) UNION ALL SELECT * FROM x WHERE x > CAST('1996-09-02' AS DATE) AND x <= CAST('1998-09-02' AS DATE)) AS x GROUP BY x, x ORDER BY x, x;
SELECT SUM(x) AS x FROM x WHERE x <= CAST('1998-09-02' AS DATE) UNION ALL SELECT SUM(x) FROM x WHERE x <= CAST('1998-09-02' AS DATE) UNION ALL SELECT SUM(x * (1 - x)) FROM x WHERE x <= CAST('1998-09-02' AS DATE) UNION ALL SELECT SUM(x * (1 - x) * (1 + x)) FROM x WHERE x <= CAST('1998-09-02' AS DATE) UNION ALL SELECT AVG(x) FROM x WHERE x <= CAST('1998-09-02' AS DATE) UNION ALL SELECT AVG(x) FROM x WHERE x <= CAST('1998-09-02' AS DATE) UNION ALL SELECT COUNT(*) FROM x WHERE x <= CAST('1998-09-02' AS DATE);
SELECT * FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT x, x, x FROM x;
SELECT x, x, x FROM x;
ATTACH ':memory:' AS x;
ATTACH ':memory:' AS x;
ATTACH ':memory:' AS x;
ATTACH ':memory:' AS x;
CREATE SCHEMA x.x.x;
CREATE SCHEMA x.x.x;
CREATE SCHEMA x.x.x;
CREATE SCHEMA x.x.x;
CREATE TABLE x AS SELECT * REPLACE (CAST(x AS DOUBLE) AS x) FROM x;
CREATE TABLE x AS SELECT * REPLACE (CAST(x AS DOUBLE) AS x) FROM x;
CREATE TABLE x AS SELECT * REPLACE (CAST(x AS DOUBLE) AS x) FROM x;
CREATE TABLE x AS SELECT * REPLACE (CAST(x AS DOUBLE) AS x) FROM x;
SELECT COUNT(*) FROM x JOIN x ON (x = x);
SELECT COUNT(*) FROM x JOIN x ON (x = x);
SELECT COUNT(*) FROM x JOIN x ON (x = x);
PRAGMA x = 4;
PRAGMA x;
SELECT x, x, SUM(x) AS x, SUM(x) AS x, SUM(x * (1 - x)) AS x, SUM(x * (1 - x) * (1 + x)) AS x, AVG(x) AS x, AVG(x) AS x, AVG(x) AS x, COUNT(*) AS x FROM x GROUP BY GROUPING SETS ((x, x), (x), (x), ()) ORDER BY x, x;
COPY x TO '__TEST_DIR__/lineitem_aggregate_partitioned' WITH (FORMAT parquet, PARTITION_BY (x, x));
DROP TABLE x;
CREATE VIEW x AS SELECT * FROM x;
PRAGMA TPCH(1);
SELECT COUNT(*), SUM(x), x FROM x GROUP BY ALL ORDER BY ALL;
SELECT COUNT(*), SUM(x), x FROM x WHERE x = 'O' GROUP BY ALL ORDER BY ALL;
SELECT COUNT(*), SUM(x), x FROM x GROUP BY ALL ORDER BY ALL;
PRAGMA x;
SELECT COUNT(*) FROM x WHERE x LIKE '%horse%';
SELECT COUNT(*) FROM x WHERE x LIKE 'horse%';
SELECT COUNT(*) FROM x WHERE x LIKE '%horse';
SELECT COUNT(*) FROM x WHERE x LIKE '%h_rse%';
SELECT COUNT(*) FROM x WHERE x LIKE 'h_rse%';
SELECT COUNT(*) FROM x WHERE x LIKE '%h_rse';
SELECT COUNT(*) FROM x WHERE NOT x LIKE '%a%';
SELECT COUNT(*) FROM x WHERE NOT x LIKE 'h%';
SELECT COUNT(*) FROM x WHERE NOT x LIKE '%a';
SELECT COUNT(*) FROM x WHERE NOT x LIKE '%a_%';
SELECT COUNT(*) FROM x WHERE NOT x LIKE 'a_%';
SELECT COUNT(*) FROM x WHERE NOT x LIKE '%_a';
PRAGMA x;
PRAGMA x = 4;
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
ATTACH '/Users/myth/Programs/duckdb-tpch-power-test/gen/sf100/tpch.duckdb' AS x;
USE x;
SELECT COUNT(*) FROM x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
CREATE TABLE x AS SELECT {'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x} AS x FROM x;
CREATE VIEW x AS SELECT x['l_orderkey'] AS x, x['l_partkey'] AS x, x['l_suppkey'] AS x, x['l_linenumber'] AS x, x['l_quantity'] AS x, x['l_extendedprice'] AS x, x['l_discount'] AS x, x['l_tax'] AS x, x['l_returnflag'] AS x, x['l_linestatus'] AS x, x['l_shipdate'] AS x, x['l_commitdate'] AS x, x['l_receiptdate'] AS x, x['l_shipinstruct'] AS x, x['l_shipmode'] AS x, x['l_comment'] AS x FROM x;
CREATE TABLE x AS SELECT {'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x} AS x FROM x;
CREATE VIEW x AS SELECT x['o_orderkey'] AS x, x['o_custkey'] AS x, x['o_orderstatus'] AS x, x['o_totalprice'] AS x, x['o_orderdate'] AS x, x['o_orderpriority'] AS x, x['o_clerk'] AS x, x['o_shippriority'] AS x, x['o_comment'] AS x FROM x;
CREATE TABLE x AS SELECT {'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x} AS x FROM x;
CREATE VIEW x AS SELECT x['p_partkey'] AS x, x['p_name'] AS x, x['p_mfgr'] AS x, x['p_brand'] AS x, x['p_type'] AS x, x['p_size'] AS x, x['p_container'] AS x, x['p_retailprice'] AS x, x['p_comment'] AS x FROM x;
CREATE TABLE x AS SELECT {'x': x, 'x': x, 'x': x, 'x': x, 'x': x} AS x FROM x;
CREATE VIEW x AS SELECT x['ps_partkey'] AS x, x['ps_suppkey'] AS x, x['ps_availqty'] AS x, x['ps_supplycost'] AS x, x['ps_comment'] AS x FROM x;
CREATE TABLE x AS SELECT {'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x} AS x FROM x;
CREATE VIEW x AS SELECT x['c_custkey'] AS x, x['c_name'] AS x, x['c_address'] AS x, x['c_nationkey'] AS x, x['c_phone'] AS x, x['c_acctbal'] AS x, x['c_mktsegment'] AS x, x['c_comment'] AS x FROM x;
CREATE TABLE x AS SELECT {'x': x, 'x': x, 'x': x} AS x FROM x;
CREATE VIEW x AS SELECT x['r_regionkey'] AS x, x['r_name'] AS x, x['r_comment'] AS x FROM x;
CREATE TABLE x AS SELECT {'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x} AS x FROM x;
CREATE VIEW x AS SELECT x['s_suppkey'] AS x, x['s_name'] AS x, x['s_address'] AS x, x['s_nationkey'] AS x, x['s_phone'] AS x, x['s_acctbal'] AS x, x['s_comment'] AS x FROM x;
CREATE TABLE x AS SELECT {'x': x, 'x': x, 'x': x, 'x': x} AS x FROM x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
CREATE TABLE x AS SELECT {'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x} AS x FROM x;
CREATE VIEW x AS SELECT x['l_orderkey'] AS x, x['l_partkey'] AS x, x['l_suppkey'] AS x, x['l_linenumber'] AS x, x['l_quantity'] AS x, x['l_extendedprice'] AS x, x['l_discount'] AS x, x['l_tax'] AS x, x['l_returnflag'] AS x, x['l_linestatus'] AS x, x['l_shipdate'] AS x, x['l_commitdate'] AS x, x['l_receiptdate'] AS x, x['l_shipinstruct'] AS x, x['l_shipmode'] AS x, x['l_comment'] AS x FROM x;
CREATE TABLE x AS SELECT {'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x} AS x FROM x;
CREATE VIEW x AS SELECT x['o_orderkey'] AS x, x['o_custkey'] AS x, x['o_orderstatus'] AS x, x['o_totalprice'] AS x, x['o_orderdate'] AS x, x['o_orderpriority'] AS x, x['o_clerk'] AS x, x['o_shippriority'] AS x, x['o_comment'] AS x FROM x;
CREATE TABLE x AS SELECT {'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x} AS x FROM x;
CREATE VIEW x AS SELECT x['p_partkey'] AS x, x['p_name'] AS x, x['p_mfgr'] AS x, x['p_brand'] AS x, x['p_type'] AS x, x['p_size'] AS x, x['p_container'] AS x, x['p_retailprice'] AS x, x['p_comment'] AS x FROM x;
CREATE TABLE x AS SELECT {'x': x, 'x': x, 'x': x, 'x': x, 'x': x} AS x FROM x;
CREATE VIEW x AS SELECT x['ps_partkey'] AS x, x['ps_suppkey'] AS x, x['ps_availqty'] AS x, x['ps_supplycost'] AS x, x['ps_comment'] AS x FROM x;
CREATE TABLE x AS SELECT {'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x} AS x FROM x;
CREATE VIEW x AS SELECT x['c_custkey'] AS x, x['c_name'] AS x, x['c_address'] AS x, x['c_nationkey'] AS x, x['c_phone'] AS x, x['c_acctbal'] AS x, x['c_mktsegment'] AS x, x['c_comment'] AS x FROM x;
CREATE TABLE x AS SELECT {'x': x, 'x': x, 'x': x} AS x FROM x;
CREATE VIEW x AS SELECT x['r_regionkey'] AS x, x['r_name'] AS x, x['r_comment'] AS x FROM x;
CREATE TABLE x AS SELECT {'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x} AS x FROM x;
CREATE VIEW x AS SELECT x['s_suppkey'] AS x, x['s_name'] AS x, x['s_address'] AS x, x['s_nationkey'] AS x, x['s_phone'] AS x, x['s_acctbal'] AS x, x['s_comment'] AS x FROM x;
CREATE TABLE x AS SELECT {'x': x, 'x': x, 'x': x, 'x': x} AS x FROM x;
PRAGMA x;
SELECT x, x, x, x, x, x, x, x FROM x ORDER BY x LIMIT 5;
SELECT x, x, x, x, x, x, x, x FROM x ORDER BY x DESC LIMIT 5;
SELECT x, x, x, x, x, x, x, x, x, x, x, x, x, x, x FROM x ORDER BY x, x LIMIT 5;
SELECT x, x, x, x, x, x, x, x, x, x, x, x, x, x, x FROM x ORDER BY x DESC, x DESC LIMIT 5;
CREATE TABLE x (x INT PRIMARY KEY);
BEGIN;
INSERT INTO x VALUES (1);
INSERT INTO x VALUES (1);
COMMIT;
SELECT COUNT(*) FROM x;
BEGIN;
INSERT INTO x VALUES (1);
INSERT INTO x VALUES (1);
SELECT 42;
CREATE OR REPLACE TABLE x AS SELECT 1 AS x FROM x;
SET x = TRUE;
BEGIN;
BEGIN;
CREATE TABLE x AS SELECT 42 AS x FROM x;
DROP TABLE x;
COMMIT;
DELETE FROM x WHERE x % 2 = 0;
COMMIT;
CREATE OR REPLACE TABLE x AS SELECT 1 AS x FROM x;
BEGIN;
BEGIN;
DELETE FROM x WHERE x % 2 = 0;
CREATE TABLE x AS SELECT 42 AS x FROM x;
DROP TABLE x;
COMMIT;
COMMIT;
CREATE OR REPLACE TABLE x AS SELECT 1 AS x FROM x;
SET x = TRUE;
BEGIN;
BEGIN;
CREATE TABLE x AS SELECT 42 AS x FROM x;
INSERT INTO x SELECT * FROM x;
DROP TABLE x;
CREATE TABLE x AS SELECT 42 AS x FROM x;
ALTER TABLE x RENAME TO x;
CREATE TABLE x AS SELECT 2 AS x FROM x;
ALTER TABLE x RENAME TO x;
DROP TABLE x;
COMMIT;
COMMIT;
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x SELECT * FROM x;
SELECT COUNT(*) FROM x;
BEGIN;
DELETE FROM x WHERE x % 2 = 0;
SELECT COUNT(*) FROM x;
SELECT COUNT(*), COUNT(*) + 1 FROM x;
COMMIT;
SELECT COUNT(*) FROM x;
BEGIN;
INSERT INTO x SELECT * FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
COMMIT;
SELECT COUNT(*) FROM x;
CREATE TABLE x (x INT PRIMARY KEY, x TEXT);
INSERT INTO x VALUES (1, 'first payload');
BEGIN;
INSERT INTO x VALUES (5, 'con2 payload');
BEGIN;
DELETE FROM x;
COMMIT;
SELECT x, x FROM x WHERE x = 1 ORDER BY ALL;
SELECT x, x FROM x WHERE x = 5 ORDER BY ALL;
SELECT x, x, x FROM x WHERE x = 1 ORDER BY ALL;
COMMIT;
SELECT x, x FROM x WHERE x = 1 ORDER BY ALL;
SELECT x, x FROM x WHERE x = 5 ORDER BY ALL;
CREATE OR REPLACE TABLE x AS SELECT 1 AS x FROM x;
SET x = TRUE;
BEGIN;
DROP TABLE x;
ROLLBACK;
DELETE FROM x WHERE x % 2 = 0;
SELECT COUNT(*) FROM x;
CREATE TABLE x (x INT);
CREATE SEQUENCE x;
CREATE TABLE x (x INT DEFAULT NEXTVAL('seq'));
DROP TABLE x CASCADE;
COMMIT;
CREATE TABLE x (x INT);
CREATE SEQUENCE x;
DROP TABLE x CASCADE;
COMMIT;
COMMIT;
DROP TABLE x;
DROP SEQUENCE x;
CREATE TABLE x (x INT);
CREATE SEQUENCE x;
DROP TABLE x CASCADE;
COMMIT;
COMMIT;
DROP TABLE x;
BEGIN;
BEGIN;
CREATE TABLE x (x INT);
SELECT * FROM x;
SELECT * FROM x;
ROLLBACK;
SELECT * FROM x;
SELECT * FROM x;
BEGIN;
CREATE TABLE x (x INT);
COMMIT;
SELECT * FROM x;
ROLLBACK;
SELECT * FROM x;
BEGIN;
BEGIN;
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
CREATE SCHEMA x.x;
DROP SCHEMA IF EXISTS x CASCADE;
CREATE TABLE x.x AS SELECT 42;
COMMIT;
CREATE SCHEMA x.x;
DROP SCHEMA IF EXISTS x CASCADE;
CREATE TABLE x.x AS SELECT 42;
COMMIT;
COMMIT;
DROP SCHEMA x.x CASCADE;
SELECT * FROM x.x;
SELECT x FROM x WHERE x = 'foo';
CREATE SCHEMA x.x;
DROP SCHEMA IF EXISTS x CASCADE;
CREATE TABLE x.x AS SELECT 42;
COMMIT;
COMMIT;
DROP SCHEMA x.x CASCADE;
SELECT * FROM x.x;
SELECT x FROM x WHERE x = 'foo';
CREATE TABLE x AS SELECT x AS x FROM x AS x;
INSERT INTO x VALUES (1), (2), (3);
CREATE TABLE x (x INT);
INSERT INTO x VALUES (3), (2), (1), (4);
SELECT x.x AS x, x, x.x AS x, x FROM x, x WHERE x.x = x.x ORDER BY x;
BEGIN;
UPDATE x SET x = 10000 WHERE x.x = 0 OR x.x = 1 OR x.x = 3;
SELECT x FROM x;
BEGIN;
UPDATE x SET x = 20000 FROM x WHERE x.x = x.x;
CREATE TABLE x (x INT PRIMARY KEY, x INT);
INSERT INTO x VALUES (1, 1), (2, 2), (3, 3);
BEGIN;
BEGIN;
INSERT INTO x VALUES (4, 4);
INSERT INTO x VALUES (4, 4);
UPDATE x SET x = x + 1;
DELETE FROM x WHERE x = 2;
CREATE TABLE x (x INT);
COMMIT;
COMMIT;
SELECT * FROM x ORDER BY x;
SELECT * FROM x;
PRAGMA x;
CREATE TABLE x (x INT PRIMARY KEY);
INSERT INTO x VALUES (1);
BEGIN;
INSERT INTO x SELECT x FROM x AS x;
INSERT INTO x VALUES (1);
ROLLBACK;
SELECT * FROM x;
INSERT INTO x VALUES (2);
INSERT INTO x VALUES (3);
INSERT INTO x VALUES (4);
SELECT * FROM x ORDER BY 1;
CREATE TABLE x (x INT PRIMARY KEY);
INSERT INTO x VALUES (1), (2), (3);
BEGIN;
INSERT INTO x VALUES (3);
ROLLBACK;
BEGIN;
INSERT INTO x VALUES (4);
SELECT COUNT(*) FROM x;
UPDATE x SET x = 3 WHERE x = 4;
ROLLBACK;
BEGIN;
INSERT INTO x VALUES (4);
SELECT COUNT(*) FROM x;
UPDATE x SET x = 5 WHERE x = 4;
SELECT x FROM x WHERE x = 5;
SELECT x FROM x WHERE x = 4;
COMMIT;
SELECT x FROM x ORDER BY x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3);
BEGIN;
DELETE FROM x WHERE x = 1;
CREATE INDEX x ON x USING art(x);
COMMIT;
SELECT COUNT(*) FROM x WHERE x = 1;
SELECT COUNT(*) FROM x WHERE x = 1;
CREATE TABLE x (x INT);
BEGIN;
INSERT INTO x VALUES (1), (2), (3);
CREATE INDEX x ON x USING art(x);
SELECT COUNT(*) FROM x WHERE x = 1;
SELECT COUNT(*) FROM x WHERE x = 1;
COMMIT;
SELECT COUNT(*) FROM x WHERE x = 1;
SELECT COUNT(*) FROM x WHERE x = 1;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3);
BEGIN;
UPDATE x SET x = 4 WHERE x = 1;
CREATE INDEX x ON x USING art(x);
COMMIT;
CREATE INDEX x ON x USING art(x);
SELECT COUNT(*) FROM x WHERE x = 4;
SELECT COUNT(*) FROM x WHERE x = 4;
PRAGMA x;
CREATE TABLE x (x INT UNIQUE);
BEGIN;
BEGIN;
INSERT INTO x VALUES (-10);
INSERT INTO x SELECT x FROM x;
INSERT INTO x VALUES (-10);
COMMIT;
COMMIT;
INSERT INTO x SELECT x FROM x AS x;
SELECT MAX(x) FROM x;
CREATE TABLE x (x INT PRIMARY KEY);
INSERT INTO x VALUES (1), (2), (3);
INSERT INTO x VALUES (1);
INSERT INTO x VALUES (4);
UPDATE x SET x = 1 WHERE x = 4;
UPDATE x SET x = 5 WHERE x = 4;
DELETE FROM x WHERE x = 1;
INSERT INTO x VALUES (1);
DELETE FROM x WHERE x >= 4;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
BEGIN;
BEGIN;
INSERT INTO x VALUES (4);
INSERT INTO x VALUES (4);
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x WHERE x = 1;
SELECT COUNT(*) FROM x WHERE x = 1;
SELECT COUNT(*) FROM x WHERE x = 4;
SELECT COUNT(*) FROM x WHERE x = 4;
COMMIT;
COMMIT;
BEGIN;
CREATE TABLE x (x TEXT PRIMARY KEY);
INSERT INTO x VALUES ('Alice');
INSERT INTO x VALUES ('Bob');
DELETE FROM x WHERE x = 'Bob';
INSERT INTO x VALUES ('Bob');
CREATE TABLE x (x INT PRIMARY KEY);
INSERT INTO x VALUES (1), (2), (3);
BEGIN;
SELECT x FROM x WHERE x = 1;
SELECT x FROM x WHERE x = 1;
DELETE FROM x WHERE x = 1;
SELECT x FROM x WHERE x = 1;
SELECT x FROM x WHERE x = 1;
DELETE FROM x WHERE x = 1;
ROLLBACK;
SELECT x FROM x WHERE x = 1;
SELECT x FROM x WHERE x = 1;
BEGIN;
UPDATE x SET x = 4 WHERE x = 1;
SELECT x FROM x WHERE x = 1;
SELECT x FROM x WHERE x = 1;
SELECT x FROM x WHERE x = 4;
SELECT x FROM x WHERE x = 4;
DELETE FROM x WHERE x = 4;
SELECT x FROM x WHERE x = 1;
SELECT x FROM x WHERE x = 1;
SELECT x FROM x WHERE x = 4;
SELECT x FROM x WHERE x = 4;
COMMIT;
SELECT x FROM x WHERE x = 1;
SELECT x FROM x WHERE x = 1;
SELECT x FROM x ORDER BY x;
SELECT x FROM x ORDER BY x;
CREATE TABLE x (x INT PRIMARY KEY, x INT);
INSERT INTO x VALUES (1, 1), (2, 2), (3, 3);
BEGIN;
UPDATE x SET x = 4 WHERE x = 1;
SELECT x FROM x WHERE x = 1;
SELECT x FROM x WHERE x = 1;
ROLLBACK;
SELECT x FROM x WHERE x = 1;
SELECT x FROM x WHERE x = 1;
PRAGMA x;
CREATE TABLE x (x INT);
BEGIN;
INSERT INTO x VALUES (1);
BEGIN;
INSERT INTO x VALUES (2);
SELECT SUM(x) FROM x;
SELECT SUM(x) FROM x;
SELECT SUM(x) FROM x;
COMMIT;
SELECT SUM(x) FROM x;
SELECT SUM(x) FROM x;
SELECT SUM(x) FROM x;
COMMIT;
SELECT SUM(x) FROM x;
SELECT SUM(x) FROM x;
SELECT SUM(x) FROM x;
BEGIN;
BEGIN;
DELETE FROM x WHERE x = 1;
DELETE FROM x WHERE x = 2;
SELECT SUM(x) FROM x;
SELECT SUM(x) FROM x;
SELECT SUM(x) FROM x;
COMMIT;
SELECT SUM(x) FROM x;
SELECT SUM(x) FROM x;
SELECT SUM(x) FROM x;
COMMIT;
SELECT SUM(x) FROM x;
SELECT SUM(x) FROM x;
SELECT SUM(x) FROM x;
PRAGMA x;
CREATE TABLE x (x INT, x INT);
BEGIN;
BEGIN;
INSERT INTO x VALUES (1, 3);
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x WHERE x = 1;
COMMIT;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x WHERE x = 1;
COMMIT;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x WHERE x = 1;
BEGIN;
BEGIN;
INSERT INTO x VALUES (1, 3);
INSERT INTO x VALUES (1, 3);
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
COMMIT;
COMMIT;
SELECT COUNT(*) FROM x;
SELECT COUNT(*) FROM x;
SELECT * FROM x;
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3);
SELECT SUM(x) FROM x;
SELECT SUM(x) FROM x;
BEGIN;
UPDATE x SET x = 5 WHERE x = 1;
SELECT SUM(x) FROM x;
SELECT SUM(x) FROM x;
UPDATE x SET x = 10 WHERE x = 5;
SELECT SUM(x) FROM x;
SELECT SUM(x) FROM x;
DELETE FROM x WHERE x > 5;
SELECT SUM(x) FROM x;
SELECT SUM(x) FROM x;
INSERT INTO x VALUES (1), (2);
SELECT SUM(x) FROM x;
SELECT SUM(x) FROM x;
COMMIT;
SELECT SUM(x) FROM x;
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3), (4);
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
SELECT COUNT(*) FROM x WHERE x = 1;
INSERT INTO x SELECT * FROM x;
SELECT COUNT(*), COUNT(DISTINCT x) FROM x WHERE x = 1;
INSERT INTO x SELECT * FROM x;
SELECT COUNT(*), COUNT(DISTINCT x) FROM x WHERE x = 1;
INSERT INTO x SELECT * FROM x;
SELECT COUNT(*), COUNT(DISTINCT x) FROM x WHERE x = 1;
INSERT INTO x SELECT * FROM x;
SELECT COUNT(*), COUNT(DISTINCT x) FROM x WHERE x = 1;
INSERT INTO x SELECT * FROM x;
SELECT COUNT(*), COUNT(DISTINCT x) FROM x WHERE x = 1;
INSERT INTO x SELECT * FROM x;
SELECT COUNT(*), COUNT(DISTINCT x) FROM x WHERE x = 1;
INSERT INTO x SELECT * FROM x;
SELECT COUNT(*), COUNT(DISTINCT x) FROM x WHERE x = 1;
INSERT INTO x SELECT * FROM x;
SELECT COUNT(*), COUNT(DISTINCT x) FROM x WHERE x = 1;
INSERT INTO x SELECT * FROM x;
SELECT COUNT(*), COUNT(DISTINCT x) FROM x WHERE x = 1;
INSERT INTO x SELECT * FROM x;
SELECT COUNT(*), COUNT(DISTINCT x) FROM x WHERE x = 1;
INSERT INTO x SELECT * FROM x;
SELECT COUNT(*) FROM x;
SELECT SUM(x) FROM x;
SELECT COUNT(*), COUNT(DISTINCT x) FROM x WHERE x = 1;
SELECT COUNT(*) FROM x WHERE x = 2;
SELECT COUNT(*) FROM x WHERE x = 3;
SELECT COUNT(*) FROM x WHERE x = 4;
BEGIN;
DELETE FROM x WHERE x = 1;
SELECT COUNT(*) FROM x;
SELECT SUM(x) FROM x;
SELECT COUNT(*) FROM x;
SELECT SUM(x) FROM x;
ROLLBACK;
SELECT COUNT(*) FROM x;
SELECT SUM(x) FROM x;
BEGIN;
DELETE FROM x WHERE x = 2;
SELECT COUNT(*) FROM x;
SELECT SUM(x) FROM x;
SELECT COUNT(*) FROM x;
SELECT SUM(x) FROM x;
ROLLBACK;
SELECT COUNT(*) FROM x;
SELECT SUM(x) FROM x;
BEGIN;
DELETE FROM x WHERE x = 3;
SELECT COUNT(*) FROM x;
SELECT SUM(x) FROM x;
SELECT COUNT(*) FROM x;
SELECT SUM(x) FROM x;
ROLLBACK;
SELECT COUNT(*) FROM x;
SELECT SUM(x) FROM x;
BEGIN;
DELETE FROM x WHERE x = 4;
SELECT COUNT(*) FROM x;
SELECT SUM(x) FROM x;
SELECT COUNT(*) FROM x;
SELECT SUM(x) FROM x;
ROLLBACK;
SELECT COUNT(*) FROM x;
SELECT SUM(x) FROM x;
SET x = TRUE;
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (NULL, 3);
SELECT * FROM x;
BEGIN;
UPDATE x SET x = 1, x = 1;
SELECT * FROM x;
SELECT * FROM x;
ROLLBACK;
SELECT * FROM x;
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (42);
INSERT INTO x VALUES (42);
SELECT * FROM x;
INSERT INTO x VALUES (48);
CREATE TABLE x (x INT);
INSERT INTO x VALUES (44);
SELECT x FROM x;
BEGIN;
DROP TABLE x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (45);
SELECT x FROM x;
ROLLBACK;
SELECT x FROM x;
BEGIN;
DROP TABLE x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (46);
SELECT x FROM x;
COMMIT;
SELECT x FROM x;
BEGIN;
BEGIN;
CREATE SEQUENCE x;
SELECT NEXTVAL('seq');
SELECT NEXTVAL('seq');
COMMIT;
SELECT NEXTVAL('seq');
COMMIT;
SELECT NEXTVAL('seq');
BEGIN;
DROP SEQUENCE x;
SELECT NEXTVAL('seq');
SELECT NEXTVAL('seq');
ROLLBACK;
SELECT NEXTVAL('seq');
DROP SEQUENCE x;
SELECT NEXTVAL('seq');
SELECT NEXTVAL('seq');
PRAGMA x;
CREATE TABLE x (x INT PRIMARY KEY);
INSERT INTO x VALUES (1), (2);
BEGIN;
BEGIN;
SELECT 42;
SELECT * FROM x;
SELECT 42;
UPDATE x SET x = 2;
SELECT 42;
ROLLBACK;
SELECT * FROM x ORDER BY 1;
PRAGMA x;
COMMIT;
ROLLBACK;
PRAGMA x;
BEGIN;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (2, 2), (3, 3);
ALTER TABLE x ADD COLUMN x INT DEFAULT 4;
SELECT * FROM x ORDER BY 1;
COMMIT;
SELECT * FROM x ORDER BY 1;
PRAGMA x;
BEGIN;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (2, 2), (3, 3);
ALTER TABLE x ALTER COLUMN x SET DATA TYPE BIGINT;
SELECT * FROM x ORDER BY 1;
COMMIT;
SELECT * FROM x ORDER BY 1;
PRAGMA x;
BEGIN;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 3), (2, 3);
SELECT * FROM x ORDER BY 1;
UPDATE x SET x = 5 WHERE x = 2;
UPDATE x SET x = 5 WHERE x = 2;
UPDATE x SET x = 5 WHERE x = 2;
SELECT * FROM x ORDER BY 1;
DELETE FROM x WHERE x = 2;
SELECT * FROM x ORDER BY 1;
COMMIT;
SELECT * FROM x ORDER BY 1;
PRAGMA x;
BEGIN;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (2, 2), (3, 3);
ALTER TABLE x DROP COLUMN x;
SELECT * FROM x ORDER BY 1;
COMMIT;
SELECT * FROM x ORDER BY 1;
PRAGMA x;
CREATE TABLE x (x INT PRIMARY KEY, x INT);
INSERT INTO x VALUES (1, 3);
BEGIN;
INSERT INTO x VALUES (1, 2);
ROLLBACK;
DELETE FROM x;
PRAGMA x;
BEGIN;
CREATE TABLE x (x INT PRIMARY KEY, x INT);
INSERT INTO x VALUES (1, 3), (2, 3);
SELECT * FROM x ORDER BY 1;
INSERT INTO x VALUES (1, 2);
ROLLBACK;
BEGIN;
CREATE TABLE x (x INT PRIMARY KEY, x INT);
INSERT INTO x VALUES (1, 3), (2, 3);
SELECT * FROM x ORDER BY 1;
UPDATE x SET x = 1 WHERE x = 2;
ROLLBACK;
BEGIN;
CREATE TABLE x (x INT PRIMARY KEY, x INT);
INSERT INTO x VALUES (1, 3), (2, 3);
SELECT * FROM x ORDER BY 1;
UPDATE x SET x = 3 WHERE x = 2;
COMMIT;
SELECT * FROM x ORDER BY 1;
DELETE FROM x WHERE x = 1;
SELECT * FROM x ORDER BY 1;
INSERT INTO x VALUES (1, 3);
SELECT * FROM x ORDER BY 1;
ROLLBACK;
COMMIT;
BEGIN;
BEGIN;
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x SELECT * FROM x;
SET x = TRUE;
BEGIN;
BEGIN;
INSERT INTO x SELECT * FROM x;
COMMIT;
DELETE FROM x;
COMMIT;
SELECT MIN(x), MAX(x), COUNT(*) FROM x;
INSERT INTO x SELECT * FROM x;
BEGIN;
BEGIN;
INSERT INTO x SELECT * FROM x;
COMMIT;
DELETE FROM x;
COMMIT;
SELECT MIN(x), MAX(x), COUNT(*) FROM x;
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x SELECT * FROM x;
SET x = TRUE;
BEGIN;
BEGIN;
INSERT INTO x SELECT * FROM x;
DELETE FROM x;
COMMIT;
COMMIT;
DELETE FROM x;
SELECT COUNT(*) FROM x;
PRAGMA x;
CREATE TABLE x (x INT128);
INSERT INTO x VALUES (CAST(100 AS INT128)), (1023819078293589341789412412), (42);
BEGIN;
UPDATE x SET x = 100 WHERE x = 42;
SELECT * FROM x ORDER BY 1;
SELECT COUNT(DISTINCT x) FROM x;
SELECT * FROM x ORDER BY 1;
SELECT COUNT(DISTINCT x) FROM x;
ROLLBACK;
SELECT COUNT(DISTINCT x) FROM x;
UPDATE x SET x = 100 WHERE x = 42;
SELECT x, COUNT(*) FROM x GROUP BY x ORDER BY 2 DESC;
SELECT COUNT(DISTINCT x) FROM x;
SELECT COUNT(DISTINCT x) FROM x;
UPDATE x SET x = x + 1 WHERE x = 100;
SELECT COUNT(DISTINCT x) FROM x;
SELECT COUNT(DISTINCT x) FROM x;
PRAGMA x;
CREATE TABLE x (x INTERVAL);
INSERT INTO x VALUES (INTERVAL '20' DAY), (INTERVAL '1' YEAR), (INTERVAL '1' MONTH);
BEGIN;
UPDATE x SET x = INTERVAL '1' MONTH WHERE x = INTERVAL '20' DAY;
SELECT * FROM x ORDER BY 1;
SELECT COUNT(DISTINCT x) FROM x;
SELECT * FROM x ORDER BY 1;
SELECT COUNT(DISTINCT x) FROM x;
ROLLBACK;
SELECT COUNT(DISTINCT x) FROM x;
UPDATE x SET x = INTERVAL '1' MONTH WHERE x = INTERVAL '20' DAY;
SELECT x, COUNT(*) FROM x GROUP BY x ORDER BY 2 DESC;
SELECT COUNT(DISTINCT x) FROM x;
SELECT COUNT(DISTINCT x) FROM x;
PRAGMA x;
CREATE TABLE x (x UINT128);
INSERT INTO x VALUES (CAST(100 AS UINT128)), (1023819078293589341789412412), (42);
BEGIN;
UPDATE x SET x = 100 WHERE x = 42;
SELECT * FROM x ORDER BY 1;
SELECT COUNT(DISTINCT x) FROM x;
SELECT * FROM x ORDER BY 1;
SELECT COUNT(DISTINCT x) FROM x;
ROLLBACK;
SELECT COUNT(DISTINCT x) FROM x;
UPDATE x SET x = 100 WHERE x = 42;
SELECT x, COUNT(*) FROM x GROUP BY x ORDER BY 2 DESC;
SELECT COUNT(DISTINCT x) FROM x;
SELECT COUNT(DISTINCT x) FROM x;
UPDATE x SET x = x + 1 WHERE x = 100;
SELECT COUNT(DISTINCT x) FROM x;
SELECT COUNT(DISTINCT x) FROM x;
PRAGMA x;
SELECT * FROM x;
CREATE TABLE x AS SELECT * FROM x;
SELECT * FROM x;
CREATE TABLE x (x TEXT, x BIGINT);
INSERT INTO x VALUES ('2021-01-01 12:00:00', 1);
SELECT CAST(x AS DATE) = '2021-01-01' AS x, CASE WHEN CAST(x AS DATE) = '2021-01-01' THEN x ELSE 0 END AS x, CASE WHEN CAST(x AS DATE) = '2021-01-01' THEN x ELSE 0 END AS x, CASE WHEN CAST(x AS DATE) = '2021-01-01' THEN 1 ELSE 0 END AS x FROM x;
PRAGMA x;
CREATE TABLE x (x NULL);
SELECT TYPEOF(x) FROM x;
SELECT TYPEOF(x) FROM x;
SELECT TYPEOF(x) FROM x;
SELECT TYPEOF(x) FROM x;
CREATE TABLE x (x NULL[]);
INSERT INTO x VALUES (NULL), ([NULL]);
SELECT x FROM x;
SELECT x FROM x;
SELECT x FROM x;
CREATE TABLE x (x STRUCT(x NULL));
INSERT INTO x VALUES (NULL), ({'x': NULL});
SELECT x FROM x;
SELECT x FROM x;
SELECT x FROM x;
CREATE TABLE x (x MAP(NULL, NULL));
INSERT INTO x VALUES (NULL), (MAP([NULL], [NULL]));
INSERT INTO x VALUES (NULL), (MAP([NULL], [NULL]));
PRAGMA x;
SELECT TYPEOF(1);
SELECT CAST([42] AS my_int_list);
PRAGMA x;
PRAGMA x;
SELECT UPPER(CAST('hello' AS str_alias));
CREATE TABLE x (x MAPPOINT);
SELECT * FROM x;
INSERT INTO x VALUES (MAP([1], [2])), (MAP([1, 2, 3], [4, 5, 6]));
SELECT * FROM x;
PRAGMA x;
CREATE TABLE x (x POINT);
INSERT INTO x VALUES ({'x': 3, 'x': 4});
SELECT * FROM x;
SELECT * FROM x;
INSERT INTO x VALUES (NULL);
SELECT * FROM x;
INSERT INTO x VALUES (ROW(2, 3));
SELECT * FROM x;
INSERT INTO x VALUES (ROW(3, NULL)), (ROW(NULL, 4));
SELECT * FROM x;
INSERT INTO x VALUES (ROW(1, 2, 3));
INSERT INTO x VALUES (ROW(1));
INSERT INTO x VALUES (ROW('hello', 1));
INSERT INTO x VALUES (ROW('hello', [1, 2]));
INSERT INTO x VALUES (ROW(1, ROW(1, 7)));
PRAGMA x;
CREATE TABLE x (x TOP_NEST);
INSERT INTO x VALUES ({'x': 'Foo'});
SELECT x FROM x;
PRAGMA x;
CREATE TABLE x (x TEXT, x car);
CREATE TABLE x (x TEXT, x alias);
INSERT INTO x VALUES ('Moe', 'happy');
SELECT * FROM x;
INSERT INTO x VALUES ('Pedro', 'ok');
INSERT INTO x VALUES ('Mark', 'sad');
SELECT * FROM x WHERE x = 'sad';
SELECT * FROM x WHERE x > 'ok';
CREATE TABLE x (x TEXT, x alias);
INSERT INTO x VALUES ('Anne', 'happy');
INSERT INTO x VALUES ('Oogie Boogie', 'ok');
INSERT INTO x VALUES ('Mr. Fluffles McFluffingstein', NULL);
SELECT * FROM x;
SELECT x.x, x.x FROM x INNER JOIN x ON (x.x = x.x);
DROP TABLE x;
DROP TABLE x;
CREATE TABLE x (x TEXT, x alias);
CREATE TABLE x (x TEXT, x alias);
INSERT INTO x VALUES ('Alf o Eteimoso', 'happy'), ('Dr Zoidberg', 'sad');
ALTER TABLE x ADD COLUMN x intelligence;
SELECT * FROM x;
INSERT INTO x VALUES ('The Borg', 'ok', 'ehh');
SELECT * FROM x;
ALTER TABLE x ALTER COLUMN x SET DATA TYPE TEXT;
SELECT * FROM x;
CREATE TABLE x (x TEXT, x alias, x alias, x car_brand);
INSERT INTO x VALUES ('Pedro', 'ok', 'ok', 'Seat'), ('Mark', 'sad', 'happy', 'Fiets');
SELECT * FROM x WHERE x = x;
SELECT * FROM x WHERE x = 'ok';
INSERT INTO x VALUES ('Diego', 'sad', 'happy', 'Seat'), ('Tim', 'happy', 'sad', 'Fiets');
SELECT COUNT(*), x FROM x GROUP BY x ORDER BY ALL;
SELECT x, x FROM x ORDER BY x;
CREATE SCHEMA x.x;
CREATE TABLE x.x (x my_schema.my_type);
PRAGMA x;
SELECT (CAST(2 AS BIT) & CAST(2 AS BIT)) = CAST(2 AS BIT) AS x;
SELECT (CAST(2 AS BIT) & CAST(2 AS BIT)) = CAST(2 AS BIT) AS x;
SELECT x, x, x = x, "x" FROM (SELECT (CAST(2 AS BIT) & CAST(2 AS BIT)) AS x, CAST(2 AS BIT) AS x, (x = x) AS "x");
PRAGMA x;
SELECT (CAST('0101011' AS BIT));
SELECT (CAST('0101011' AS BIT));
SELECT (CAST('0101011' AS BIT));
SELECT (CAST('0101011' AS BIT));
SELECT (CAST('0101011' AS BIT));
SELECT (CAST('0101011' AS BIT));
SELECT (CAST('0101011' AS BIT));
SELECT (CAST('0101011' AS BIT));
SELECT (CAST('0101011' AS BIT));
SELECT BITSTRING('', 0);
SELECT BITSTRING('5', 10);
SELECT BITSTRING('0101011');
INSERT INTO x VALUES ('101011010'), ('111'), ('1010010101111111001101');
SELECT * FROM x;
INSERT INTO x VALUES ('0'), ('1'), ('0000000000000000000111');
SELECT * FROM x;
SELECT * FROM x WHERE x = '111';
INSERT INTO x VALUES ('101211010');
INSERT INTO x VALUES ('1A10');
SELECT (CAST('0101011' AS BIT(10)));
SELECT CAST(NULL AS BIT);
SELECT CAST('' AS BIT);
DELETE FROM x;
INSERT INTO x VALUES (NULL);
INSERT INTO x VALUES ('');
SELECT * FROM x;
SELECT TRY_CAST('101' AS BIT);
SELECT TRY_CAST('102' AS BIT);
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('1010010101010101100001111111001101'), ('0');
SELECT CAST(x AS BIT) FROM x;
INSERT INTO x VALUES ('1011010'), ('0🦆1'), ('1'), ('3');
SELECT TRY_CAST(x AS BIT) FROM x;
CREATE TABLE x (x BIT);
INSERT INTO x VALUES ('');
SELECT BIT_LENGTH(x) FROM x;
SELECT CAST((CAST(CAST('ab' AS BLOB) AS BIT) << 2) AS BLOB);
PRAGMA x;
CREATE TABLE x (x BIT);
INSERT INTO x VALUES ('101111011010'), ('110001100100'), ('101001000110');
SELECT CAST('10101' AS BIT) & CAST('10001' AS BIT);
SELECT CAST('1000001101011111' AS BIT) & CAST('1100101101000011' AS BIT);
SELECT CAST('01011' AS BIT) & CAST('11000' AS BIT);
SELECT x & CAST('011100011011' AS BIT) FROM x;
SELECT CAST('010110' AS BIT) & CAST('11000' AS BIT);
SELECT CAST('10001111' AS BIT) | CAST('00011011' AS BIT);
SELECT CAST('1011' AS BIT) | CAST('0001' AS BIT);
SELECT CAST('10000010011101011111' AS BIT) | CAST('11001011010011100011' AS BIT);
SELECT x | CAST('011100011011' AS BIT) FROM x;
SELECT CAST('0110' AS BIT) | CAST('11000' AS BIT);
SELECT XOR(CAST('101' AS BIT), CAST('001' AS BIT));
SELECT XOR(CAST('10000010011101011111' AS BIT), CAST('11001011010111000011' AS BIT));
SELECT XOR(x, CAST('011100011011' AS BIT)) FROM x;
SELECT XOR(CAST('011010110' AS BIT), CAST('11000' AS BIT));
SELECT ~(CAST('101' AS BIT));
SELECT ~(CAST('1001010101111111000111' AS BIT));
SELECT ~(x) FROM x;
SELECT CAST('1001010101111111000111' AS BIT) << 4;
SELECT CAST('010101' AS BIT) << 50;
SELECT CAST('101' AS BIT) << 0;
SELECT CAST('010101' AS BIT) << -2;
SELECT x << 3 FROM x;
SELECT CAST('1001010101111111000111' AS BIT) >> 10;
SELECT CAST('010101' AS BIT) >> 50;
SELECT CAST('101' AS BIT) >> 0;
SELECT x >> 5 FROM x;
PRAGMA x;
SELECT BITSTRING('1', 6) FROM x GROUP BY 1;
PRAGMA x;
CREATE TABLE x (x BIT);
INSERT INTO x VALUES ('101001111'), ('00111'), ('100101010110000000000001'), ('111111010100');
INSERT INTO x VALUES ('0110108');
SELECT BIT_LENGTH(CAST('1010111111101010011101011' AS BIT));
SELECT BIT_LENGTH(CAST('0' AS BIT));
SELECT BIT_LENGTH(x) FROM x;
SELECT OCTET_LENGTH(CAST('10101111111010100111010' AS BIT));
SELECT OCTET_LENGTH(CAST('0' AS BIT));
SELECT OCTET_LENGTH(x) FROM x;
SELECT GET_BIT(CAST('101010101010101010' AS BIT), 6);
SELECT GET_BIT(CAST('110' AS BIT), 2);
SELECT GET_BIT(CAST('1010000' AS BIT), 0);
SELECT GET_BIT(x, 4) FROM x;
SELECT GET_BIT(CAST('10101' AS BIT), 6);
SELECT GET_BIT(CAST('001' AS BIT), -1);
SELECT SET_BIT(CAST('0101010101010101010' AS BIT), 2, 1);
SELECT SET_BIT(CAST('1111111' AS BIT), 5, 0);
SELECT SET_BIT(CAST('11111' AS BIT), 0, 0);
SELECT SET_BIT(x, 3, 0) FROM x;
SELECT SET_BIT(CAST('11111' AS BIT), 2, 7);
SELECT SET_BIT(CAST('10101' AS BIT), 6, 1);
SELECT SET_BIT(CAST('011' AS BIT), -1, 0);
SELECT BIT_COUNT(CAST('10101' AS BIT));
SELECT BIT_COUNT(CAST('0000000' AS BIT));
SELECT BIT_COUNT(CAST('1101111111111101111111111111111101111' AS BIT));
SELECT BIT_COUNT(x) FROM x;
SELECT BIT_POSITION(CAST('010' AS BIT), CAST('010111' AS BIT));
SELECT BIT_POSITION(CAST('010' AS BIT), CAST('1110101' AS BIT));
SELECT BIT_POSITION(CAST('010' AS BIT), CAST('11110011011011101011' AS BIT));
SELECT BIT_POSITION(CAST('010' AS BIT), CAST('1101110101011101' AS BIT));
PRAGMA x;
CREATE TABLE x (x BLOB);
INSERT INTO x VALUES ('\xaa\xff\xaa'), ('\xAA\xFF\xAA\xAA\xFF\xAA'), ('\xAA\xFF\xAA\xAA\xFF\xAA\xAA\xFF\xAA');
SELECT * FROM x;
DELETE FROM x;
INSERT INTO x VALUES ('\xaa\xff\xaa'), ('\xaa\xff\xaa\xaa\xff\xaa'), ('\xaa\xff\xaa\xaa\xff\xaa\xaa\xff\xaa');
SELECT * FROM x;
DELETE FROM x;
INSERT INTO x VALUES ('\xaa1199'), ('\xaa1199aa1199'), ('\xaa1199aa1199aa1199');
SELECT * FROM x;
INSERT INTO x VALUES ('\xGA\xFF\xAA');
INSERT INTO x VALUES ('\xA');
INSERT INTO x VALUES ('\xAA\xA');
INSERT INTO x VALUES ('blablabla\x');
SELECT CAST('abc �' AS BLOB);
SELECT CAST('' AS BLOB);
SELECT CAST(NULL AS BLOB);
CREATE TABLE x (x BLOB);
INSERT INTO x VALUES (''), (CAST('' AS BLOB));
INSERT INTO x VALUES (NULL), (CAST(NULL AS BLOB));
SELECT * FROM x;
SELECT CAST('ü' AS BLOB);
SELECT CAST('\x7F' AS BLOB);
PRAGMA x;
SELECT CAST(CAST('a' AS BLOB) AS TEXT);
SELECT CAST(CAST('a' AS TEXT) AS BLOB);
SELECT CAST('\x20\x00\xFF' AS BLOB);
SELECT CAST(CAST('\x20\x00\xFF' AS BLOB) AS TEXT);
SELECT CAST(CAST(CAST('\x20\x00\xFF' AS BLOB) AS TEXT) AS BLOB);
SELECT CAST(CAST(CAST(CAST('\x20\x00\xFF' AS BLOB) AS TEXT) AS BLOB) AS TEXT);
SELECT CAST(CAST(CAST(CAST('\x20\x00\xFF' AS TEXT) AS BLOB) AS TEXT) AS BLOB);
SELECT CAST(1 AS BLOB);
SELECT CAST(1.0 AS BLOB);
SELECT CAST(CAST(1 AS TINYINT) AS BLOB);
SELECT CAST(CAST(1 AS SMALLINT) AS BLOB);
SELECT CAST(CAST(1 AS INT) AS BLOB);
SELECT CAST(CAST(1 AS BIGINT) AS BLOB);
SELECT CAST(CAST(1 AS DECIMAL(18, 3)) AS BLOB);
PRAGMA x;
CREATE TABLE x (x BLOB);
INSERT INTO x VALUES (CAST('a' AS BLOB));
SELECT x || CAST('ZZ' AS BLOB) FROM x;
SELECT CAST('abc ' AS BLOB) || CAST('klm *\xEF\xBF\xBDT' AS BLOB);
INSERT INTO x VALUES (CAST('abc klm *\xEF\xBF\xBDT' AS BLOB));
SELECT COUNT(*) FROM x;
SELECT OCTET_LENGTH(x) FROM x;
DELETE FROM x;
INSERT INTO x VALUES (CAST('\xFF' AS BLOB));
SELECT x || CAST('ZZ' AS BLOB) FROM x;
SELECT x || CAST('\x5A\x5A' AS BLOB) FROM x;
SELECT x || CAST('5A5A' AS TEXT) FROM x;
DELETE FROM x;
INSERT INTO x VALUES (CAST('\xFF' AS BLOB));
INSERT INTO x VALUES (CAST('FF' AS BLOB));
INSERT INTO x VALUES (CAST('\x55\xAA\xFF\x55\xAA\xFF\x55\xAA\xFF\x01' AS BLOB));
INSERT INTO x VALUES (CAST('55AAFF55AAFF55AAFF01' AS BLOB));
SELECT OCTET_LENGTH(x) FROM x;
CREATE TABLE x (x BLOB);
INSERT INTO x VALUES (NULL);
SET x = 'nulls_first';
PRAGMA x;
CREATE TABLE x (x BLOB, x INT);
INSERT INTO x VALUES ('hello', 0), ('\x00whatisgoingon', 1), (NULL, 0), ('\xFF\xFE\xFB', 1);
SELECT COUNT(*), COUNT(x), MIN(x), MAX(x) FROM x;
SELECT * FROM x ORDER BY x;
INSERT INTO x VALUES ('hello', 3), ('\x00whatisgoingon', 9), (NULL, 0), ('\xFF\xFE\xFB', 19);
SELECT x, SUM(x) FROM x GROUP BY x ORDER BY x;
CREATE TABLE x (x BLOB, x INT);
INSERT INTO x VALUES ('hello', 0), ('\x00whatisgoingon', 100), (NULL, 0), ('\xFF\xFE\xFB', 200);
SELECT x.x, SUM(x.x) FROM x AS x JOIN x AS x ON x.x = x.x GROUP BY x.x ORDER BY x.x;
SELECT x.x, SUM(x.x) FROM x AS x, x AS x WHERE x.x = x.x GROUP BY x.x ORDER BY x.x;
PRAGMA x;
CREATE TABLE x (x BLOB);
INSERT INTO x VALUES ('aaaaaaaaaa');
INSERT INTO x SELECT x || x || x || x || x || x || x || x || x || x FROM x WHERE OCTET_LENGTH(x) = (SELECT MAX(OCTET_LENGTH(x)) FROM x);
INSERT INTO x SELECT x || x || x || x || x || x || x || x || x || x FROM x WHERE OCTET_LENGTH(x) = (SELECT MAX(OCTET_LENGTH(x)) FROM x);
INSERT INTO x SELECT x || x || x || x || x || x || x || x || x || x FROM x WHERE OCTET_LENGTH(x) = (SELECT MAX(OCTET_LENGTH(x)) FROM x);
SELECT OCTET_LENGTH(x) FROM x ORDER BY 1;
SELECT TRY_CAST('\\' AS BLOB);
SELECT TRY_CAST('\\x3' AS BLOB);
SELECT TRY_CAST('\\b12' AS BLOB);
SELECT TRY_CAST('\\xx2' AS BLOB);
SELECT TRY_CAST('\\x2x' AS BLOB);
SELECT TRY_CAST('ü' AS BLOB);
SELECT TRY_CAST('\x12' AS BLOB);
SELECT CAST('\\' AS BLOB);
SELECT CAST('\\x3' AS BLOB);
SELECT CAST('\\b12' AS BLOB);
SELECT CAST('\\xx2' AS BLOB);
SELECT CAST('\\x2x' AS BLOB);
SELECT CAST('ü' AS BLOB);
SELECT CAST('\x12' AS BLOB);
PRAGMA x;
SELECT CAST('1969-01-01' AS DATE);
SELECT CAST('2370-01-01' AS DATE);
SELECT CAST('5877642-06-25 (BC)' AS DATE);
SELECT CAST('5877642-06-24 (BC)' AS DATE);
SELECT CAST('5877680-06-23 (BC)' AS DATE);
SELECT CAST('99999999-06-23 (BC)' AS DATE);
SELECT CAST(CAST('290308-01-01 (BC)' AS DATE) AS TIMESTAMP);
SELECT CAST(CAST('290309-01-01 (BC)' AS DATE) AS TIMESTAMP);
SELECT CAST(CAST('5877642-06-23 (BC)' AS DATE) AS TIMESTAMP);
SELECT CAST('5877642-06-25 (BC)' AS DATE) + 1;
SELECT CAST('5877642-06-24 (BC)' AS DATE) - 1;
SELECT CAST('5877642-06-24 (BC)' AS DATE) - 365;
SELECT CAST('5877642-06-24 (BC)' AS DATE) - 2147483647;
SELECT CAST('290309-12-22 (BC)' AS DATE) + INTERVAL (1) DAY;
SELECT CAST('290309-12-22 (BC)' AS DATE) - INTERVAL (1) DAY;
SELECT CAST('290309-12-22 (BC)' AS DATE) - INTERVAL (365) DAY;
SELECT CAST('290309-12-22 (BC)' AS DATE) - INTERVAL (2147483647) DAY;
SELECT CAST('290309-12-22 (BC)' AS DATE) - INTERVAL (9999999999999) SECOND;
SELECT CAST('290309-12-22 (BC)' AS DATE) - INTERVAL (9223372036854775807) MICROSECOND;
SELECT CAST('290309-12-22 (BC)' AS DATE) - INTERVAL '1147483647 days 9223372036854775807 microseconds';
SELECT CAST('290309-12-22 (BC)' AS DATE) - INTERVAL '2147483647 days 9223372036854775807 microseconds';
SELECT CAST('290309-12-22 (BC)' AS DATE) - INTERVAL '2007483647 days 9223372036854775807 microseconds';
SELECT CAST('290309-12-22 (BC)' AS DATE) + INTERVAL (1) MONTH;
SELECT CAST('5877642-06-23 (BC)' AS DATE) - INTERVAL (1) MONTH;
SELECT CAST('5877642-06-23 (BC)' AS DATE) - INTERVAL (2147483647) MONTH;
SELECT CAST('5881580-07-10' AS DATE);
SELECT CAST('5881580-07-11' AS DATE);
SELECT CAST('5881580-08-11' AS DATE);
SELECT CAST('99999999-01-01' AS DATE);
SELECT CAST(CAST('294247-01-10' AS DATE) AS TIMESTAMP);
SELECT CAST(CAST('294247-01-11' AS DATE) AS TIMESTAMP);
SELECT CAST('5881580-07-10' AS DATE) - 1;
SELECT CAST('5881580-07-10' AS DATE) + 1;
SELECT CAST('5881580-07-10' AS DATE) + 365;
SELECT CAST('5881580-07-10' AS DATE) + 2147483647;
SELECT CAST('5877642-06-25 (BC)' AS DATE) - 1;
SELECT CAST('294247-01-10' AS DATE) - INTERVAL (1) DAY;
SELECT CAST('294247-01-10' AS DATE) + INTERVAL (1) DAY;
SELECT CAST('294247-01-10' AS DATE) + INTERVAL (365) DAY;
SELECT CAST('294247-01-10' AS DATE) + INTERVAL (2147483647) DAY;
SELECT CAST('294247-01-10' AS DATE) + INTERVAL (9999999999999) SECOND;
SELECT CAST('294247-01-10' AS DATE) + INTERVAL (9223372036854775807) MICROSECOND;
SELECT CAST('294247-01-10' AS DATE) + INTERVAL '1147483647 days 9223372036854775807 microseconds';
SELECT CAST('294247-01-10' AS DATE) + INTERVAL '2147483647 days 9223372036854775807 microseconds';
SELECT CAST('294247-01-10' AS DATE) + INTERVAL '2007483647 days 9223372036854775807 microseconds';
SELECT CAST('294247-01-10' AS DATE) + INTERVAL (1) MONTH;
SELECT CAST('294247-01-10' AS DATE) - INTERVAL (1) MONTH;
SELECT CAST('5881580-07-10' AS DATE) - CAST('5877642-06-25 (BC)' AS DATE);
PRAGMA x;
SELECT CAST(CAST('1992-01-01' AS DATE) AS TEXT) = '1992-01-01';
SELECT CAST(CAST('1992-09-20' AS DATE) AS TEXT) = '1992-09-20';
SELECT CAST(CAST('1992-02-29' AS DATE) AS TEXT) = '1992-02-29';
SELECT CAST(CAST('3600-02-29' AS DATE) AS TEXT) = '3600-02-29';
SELECT CAST(CAST('0030-01-01' AS DATE) AS TEXT) = '0030-01-01';
SELECT CAST(CAST('30000-01-01' AS DATE) AS TEXT) = '30000-01-01';
SELECT CAST(CAST('1969-01-01' AS DATE) AS TEXT) = '1969-01-01';
SELECT CAST(CAST('1970-01-01' AS DATE) AS TEXT) = '1970-01-01';
SELECT CAST(CAST('2369-01-01' AS DATE) AS TEXT) = '2369-01-01';
SELECT CAST(CAST('2370-01-01' AS DATE) AS TEXT) = '2370-01-01';
SELECT CAST(CAST('2371-01-01' AS DATE) AS TEXT) = '2371-01-01';
SELECT CAST(CAST('-1000-01-01' AS DATE) AS TEXT) = '1001-01-01 (BC)';
SELECT CAST(CAST('1992/09/20' AS DATE) AS TEXT) = '1992-09-20';
SELECT CAST(CAST('1992 09 20' AS DATE) AS TEXT) = '1992-09-20';
SELECT CAST(CAST('1992\09\20' AS DATE) AS TEXT) = '1992-09-20';
SELECT CAST(CAST('1993-01-31' AS DATE) AS TEXT);
SELECT CAST(CAST('1993-01-32' AS DATE) AS TEXT);
SELECT CAST(CAST('1993-02-28' AS DATE) AS TEXT);
SELECT CAST(CAST('1993-02-29' AS DATE) AS TEXT);
SELECT CAST(CAST('1993-03-31' AS DATE) AS TEXT);
SELECT CAST(CAST('1993-03-32' AS DATE) AS TEXT);
SELECT CAST(CAST('1993-04-30' AS DATE) AS TEXT);
SELECT CAST(CAST('1993-04-31' AS DATE) AS TEXT);
SELECT CAST(CAST('1993-05-31' AS DATE) AS TEXT);
SELECT CAST(CAST('1993-05-32' AS DATE) AS TEXT);
SELECT CAST(CAST('1993-06-30' AS DATE) AS TEXT);
SELECT CAST(CAST('1993-06-31' AS DATE) AS TEXT);
SELECT CAST(CAST('1993-07-31' AS DATE) AS TEXT);
SELECT CAST(CAST('1993-07-32' AS DATE) AS TEXT);
SELECT CAST(CAST('1993-08-31' AS DATE) AS TEXT);
SELECT CAST(CAST('1993-08-32' AS DATE) AS TEXT);
SELECT CAST(CAST('1993-09-30' AS DATE) AS TEXT);
SELECT CAST(CAST('1993-09-31' AS DATE) AS TEXT);
SELECT CAST(CAST('1993-10-31' AS DATE) AS TEXT);
SELECT CAST(CAST('1993-10-32' AS DATE) AS TEXT);
SELECT CAST(CAST('1993-11-30' AS DATE) AS TEXT);
SELECT CAST(CAST('1993-11-31' AS DATE) AS TEXT);
SELECT CAST(CAST('1993-12-31' AS DATE) AS TEXT);
SELECT CAST(CAST('1993-12-32' AS DATE) AS TEXT);
SELECT CAST(CAST('1992-01-31' AS DATE) AS TEXT);
SELECT CAST(CAST('1992-01-32' AS DATE) AS TEXT);
SELECT CAST(CAST('1992-02-29' AS DATE) AS TEXT);
SELECT CAST(CAST('1992-02-30' AS DATE) AS TEXT);
SELECT CAST(CAST('1992-03-31' AS DATE) AS TEXT);
SELECT CAST(CAST('1992-03-32' AS DATE) AS TEXT);
SELECT CAST(CAST('1992-04-30' AS DATE) AS TEXT);
SELECT CAST(CAST('1992-04-31' AS DATE) AS TEXT);
SELECT CAST(CAST('1992-05-31' AS DATE) AS TEXT);
SELECT CAST(CAST('1992-05-32' AS DATE) AS TEXT);
SELECT CAST(CAST('1992-06-30' AS DATE) AS TEXT);
SELECT CAST(CAST('1992-06-31' AS DATE) AS TEXT);
SELECT CAST(CAST('1992-07-31' AS DATE) AS TEXT);
SELECT CAST(CAST('1992-07-32' AS DATE) AS TEXT);
SELECT CAST(CAST('1992-08-31' AS DATE) AS TEXT);
SELECT CAST(CAST('1992-08-32' AS DATE) AS TEXT);
SELECT CAST(CAST('1992-09-30' AS DATE) AS TEXT);
SELECT CAST(CAST('1992-09-31' AS DATE) AS TEXT);
SELECT CAST(CAST('1992-10-31' AS DATE) AS TEXT);
SELECT CAST(CAST('1992-10-32' AS DATE) AS TEXT);
SELECT CAST(CAST('1992-11-30' AS DATE) AS TEXT);
SELECT CAST(CAST('1992-11-31' AS DATE) AS TEXT);
SELECT CAST(CAST('1992-12-31' AS DATE) AS TEXT);
SELECT CAST(CAST('1992-12-32' AS DATE) AS TEXT);
SELECT CAST(CAST('1900-02-29' AS DATE) AS TEXT);
SELECT CAST(CAST('2000-02-29' AS DATE) AS TEXT) = '2000-02-29';
SELECT CAST(CAST('0-01-01' AS DATE) AS TEXT);
SELECT CAST(CAST('1-01-01' AS DATE) AS TEXT);
SELECT CAST(CAST('-1-01-01' AS DATE) AS TEXT);
SELECT CAST(CAST('100000' AS DATE) AS TEXT);
SELECT CAST(CAST('1992-10/10' AS DATE) AS TEXT);
SELECT CAST(CAST('1992a10a10' AS DATE) AS TEXT);
SELECT CAST(CAST('1992/10-10' AS DATE) AS TEXT);
SELECT CAST(CAST('hello' AS DATE) AS TEXT);
SELECT CAST(CAST('aa-10-10' AS DATE) AS TEXT);
SELECT CAST(CAST('1992-aa-10' AS DATE) AS TEXT);
SELECT CAST(CAST('1992-10-aa' AS DATE) AS TEXT);
SELECT CAST(CAST('' AS DATE) AS TEXT);
SELECT CAST(CAST('-' AS DATE) AS TEXT);
SELECT CAST(CAST('-/10/10' AS DATE) AS TEXT);
SELECT CAST('-291000-01-01' AS DATE) AS $VARCHAR;
SELECT CAST(CAST('291000-01-01' AS DATE) AS TEXT);
SELECT CAST('291000-01-01 (BC)' AS DATE) AS $VARCHAR;
SELECT CAST(CAST('-a' AS DATE) AS TEXT);
SELECT CAST(CAST('1992-' AS DATE) AS TEXT);
SELECT CAST(CAST('1992-10' AS DATE) AS TEXT);
SELECT CAST(CAST('1992-10-' AS DATE) AS TEXT);
SELECT CAST(CAST('10000000000-01-01' AS DATE) AS TEXT);
SELECT CAST(CAST('-10000000000-01-01' AS DATE) AS TEXT);
SELECT CAST(CAST('1992-30-30' AS DATE) AS TEXT);
SELECT CAST(CAST('1992-00-50' AS DATE) AS TEXT);
SELECT CAST(CAST('1992-01-00' AS DATE) AS TEXT);
SELECT CAST(CAST('1992-10-50' AS DATE) AS TEXT);
SELECT CAST(CAST('1992-10-100' AS DATE) AS TEXT);
PRAGMA x;
SELECT TRY_CAST('' AS DATE);
SELECT TRY_CAST('    ' AS DATE);
SELECT TRY_CAST('1111' AS DATE);
SELECT TRY_CAST('  1111   ' AS DATE);
SELECT TRY_CAST('1111-' AS DATE);
SELECT TRY_CAST('1111-11' AS DATE);
SELECT TRY_CAST('1111-11-' AS DATE);
SELECT TRY_CAST('1111-111-1' AS DATE);
SELECT TRY_CAST('1111-11-111' AS DATE);
SELECT TRY_CAST('1111-11-11' AS DATE);
SELECT TRY_CAST('1111-11-11 (bc)' AS DATE);
SELECT TRY_CAST('2001-02-29' AS DATE);
SELECT TRY_CAST('2004-02-29' AS DATE);
SELECT TRY_CAST('2004/02/29' AS DATE);
SELECT TRY_CAST('2004/02-29' AS DATE);
SELECT TRY_CAST('5877642-06-25 (BC)' AS DATE);
SELECT TRY_CAST('5877642-06-24 (BC)' AS DATE);
SELECT TRY_CAST('-infinity' AS DATE);
SELECT TRY_CAST('99999999-06-22 (BC)' AS DATE);
SELECT TRY_CAST(CAST('290308-01-01 (BC)' AS DATE) AS TIMESTAMP);
SELECT TRY_CAST(CAST('290309-01-01 (BC)' AS DATE) AS TIMESTAMP);
SELECT TRY_CAST(CAST('5877642-06-25 (BC)' AS DATE) AS TIMESTAMP);
SELECT TRY_CAST('5881580-07-10' AS DATE);
SELECT TRY_CAST('5881580-07-11' AS DATE);
SELECT TRY_CAST('infinity' AS DATE);
SELECT TRY_CAST('5881580-08-11' AS DATE);
SELECT TRY_CAST('99999999-01-01' AS DATE);
SELECT TRY_CAST(CAST('294246-12-31' AS DATE) AS TIMESTAMP);
SELECT TRY_CAST(CAST('294247-12-31' AS DATE) AS TIMESTAMP);
PRAGMA x;
CREATE TABLE x (x DATE);
INSERT INTO x VALUES ('-1993-08-14'), (NULL);
SELECT * FROM x;
SELECT YEAR(x) FROM x;
SELECT CAST(x AS TEXT) FROM x;
SELECT CAST('0000-01-01' AS DATE);
SELECT CAST('0000-01-01 (BC)' AS DATE);
SELECT CAST('-0030-01-01 (BC)' AS DATE);
SELECT CAST('1992-01-01 (BC)' AS DATE);
SELECT CAST('-1992-01-01' AS DATE);
CREATE TABLE x AS SELECT CAST('0020-01-01' AS DATE) - INTERVAL (x) YEARS AS x FROM x AS x;
SELECT x, CAST(x AS TEXT) FROM x ORDER BY 1;
PRAGMA x;
CREATE TABLE x (x DATE);
INSERT INTO x VALUES ('1993-08-14'), (NULL);
SELECT * FROM x;
SELECT YEAR(x) FROM x;
SELECT CAST(x AS TEXT) FROM x;
SELECT x + 5 FROM x;
SELECT x - 5 FROM x;
SELECT x * 3 FROM x;
SELECT x / 3 FROM x;
SELECT x % 3 FROM x;
SELECT x + x FROM x;
SELECT (x + 5) - x FROM x;
SELECT CAST('' AS DATE);
SELECT CAST('  ' AS DATE);
SELECT CAST('1992' AS DATE);
SELECT CAST('1992-' AS DATE);
SELECT CAST('1992-01' AS DATE);
SELECT CAST('1992-01-' AS DATE);
SELECT CAST('30000307-01-01 (BC)' AS DATE);
SELECT CAST('2021-03-01' AS DATE), CAST('2021-03-01' AS DATE), CAST('2021-03-01' AS DATE);
PRAGMA x;
CREATE TABLE x (x DATE);
CREATE TABLE x (x TIMESTAMP);
INSERT INTO x VALUES ('1993-08-14');
INSERT INTO x VALUES ('1993-08-14 00:00:01');
SELECT COUNT(*) FROM x INNER JOIN x ON (CAST(x.x AS DATE) = x.x);
CREATE TABLE x (x DATE);
INSERT INTO x VALUES ('blabla');
INSERT INTO x VALUES ('1993-20-14');
INSERT INTO x VALUES ('1993-08-99');
INSERT INTO x VALUES ('1993-02-29');
INSERT INTO x VALUES ('1900-02-29');
INSERT INTO x VALUES ('1992-02-29');
INSERT INTO x VALUES ('2000-02-29');
INSERT INTO x VALUES ('02-02-1992');
INSERT INTO x VALUES ('1900a01a01');
INSERT INTO x VALUES ('1900-1-1');
INSERT INTO x VALUES ('-100000000-01-01');
INSERT INTO x VALUES ('1000000000-01-01');
PRAGMA x;
SELECT CAST(CAST(127 AS DECIMAL(3, 0)) AS TINYINT), -CAST(CAST(127 AS DECIMAL(3, 0)) AS TINYINT), -CAST(CAST(7 AS DECIMAL(9, 1)) AS TINYINT), CAST(CAST(27 AS DECIMAL(18, 1)) AS TINYINT), CAST(CAST(33 AS DECIMAL(38, 1)) AS TINYINT);
SELECT CAST(CAST(128 AS DECIMAL(3, 0)) AS TINYINT);
SELECT -CAST(CAST(128 AS DECIMAL(9, 0)) AS TINYINT);
SELECT CAST(CAST(128 AS DECIMAL(18, 0)) AS TINYINT);
SELECT CAST(CAST(14751947891758972421513 AS DECIMAL(38, 0)) AS TINYINT);
SELECT CAST(CAST(127 AS DECIMAL(3, 0)) AS SMALLINT), -CAST(CAST(32767 AS DECIMAL(5, 0)) AS SMALLINT), -CAST(CAST(7 AS DECIMAL(9, 1)) AS SMALLINT), CAST(CAST(27 AS DECIMAL(18, 1)) AS SMALLINT), CAST(CAST(33 AS DECIMAL(38, 1)) AS SMALLINT);
SELECT -CAST(CAST(32768 AS DECIMAL(9, 0)) AS SMALLINT);
SELECT CAST(CAST(32768 AS DECIMAL(18, 0)) AS SMALLINT);
SELECT CAST(CAST(14751947891758972421513 AS DECIMAL(38, 0)) AS SMALLINT);
SELECT CAST(CAST(127 AS DECIMAL(3, 0)) AS INT), -CAST(CAST(2147483647 AS DECIMAL(10, 0)) AS INT), -CAST(CAST(7 AS DECIMAL(9, 1)) AS INT), CAST(CAST(27 AS DECIMAL(18, 1)) AS INT), CAST(CAST(33 AS DECIMAL(38, 1)) AS INT);
SELECT CAST(CAST(2147483648 AS DECIMAL(18, 0)) AS INT);
SELECT CAST(CAST(14751947891758972421513 AS DECIMAL(38, 0)) AS INT);
SELECT CAST(CAST(127 AS DECIMAL(3, 0)) AS BIGINT), -CAST(CAST(9223372036854775807 AS DECIMAL(19, 0)) AS BIGINT), -CAST(CAST(7 AS DECIMAL(9, 1)) AS BIGINT), CAST(CAST(27 AS DECIMAL(18, 1)) AS BIGINT), CAST(CAST(33 AS DECIMAL(38, 1)) AS BIGINT);
SELECT CAST(CAST(14751947891758972421513 AS DECIMAL(38, 0)) AS BIGINT);
SELECT CAST(CAST(127 AS DECIMAL(3, 0)) AS INT128), -CAST(CAST(17014118346046923173168730371588410572 AS DECIMAL(38, 0)) AS INT128), -CAST(CAST(7 AS DECIMAL(9, 1)) AS INT128), CAST(CAST(27 AS DECIMAL(18, 1)) AS INT128), CAST(CAST(33 AS DECIMAL(38, 1)) AS INT128);
SELECT CAST(CAST(127 AS DECIMAL(3, 0)) AS REAL), -CAST(CAST(17014118346046923173168730371588410572 AS DECIMAL(38, 0)) AS REAL), -CAST(CAST(7 AS DECIMAL(9, 1)) AS REAL), CAST(CAST(27 AS DECIMAL(18, 1)) AS REAL), CAST(CAST(33 AS DECIMAL(38, 1)) AS REAL);
SELECT CAST(CAST(127 AS DECIMAL(3, 0)) AS DOUBLE), -CAST(CAST(17014118346046923173168730371588410572 AS DECIMAL(38, 0)) AS DOUBLE), -CAST(CAST(7 AS DECIMAL(9, 1)) AS DOUBLE), CAST(CAST(27 AS DECIMAL(18, 1)) AS DOUBLE), CAST(CAST(33 AS DECIMAL(38, 1)) AS DOUBLE);
PRAGMA x;
SELECT CAST(CAST(100 AS TINYINT) AS DECIMAL(18, 3)), CAST(CAST(100 AS TINYINT) AS DECIMAL(3, 0)), CAST(CAST((-100) AS TINYINT) AS DECIMAL(3, 0)), CAST(CAST(0 AS TINYINT) AS DECIMAL(3, 3));
SELECT CAST(CAST(100 AS TINYINT) AS DECIMAL(38, 35)), CAST(CAST(100 AS TINYINT) AS DECIMAL(9, 6));
SELECT CAST(CAST(100 AS TINYINT) AS DECIMAL(3, 1));
SELECT CAST(CAST(1 AS TINYINT) AS DECIMAL(3, 3));
SELECT CAST(CAST(100 AS TINYINT) AS DECIMAL(18, 17));
SELECT CAST(CAST(100 AS TINYINT) AS DECIMAL(9, 7));
SELECT CAST(CAST(100 AS TINYINT) AS DECIMAL(38, 37));
SELECT CAST(CAST(100 AS SMALLINT) AS DECIMAL(18, 3)), CAST(CAST(100 AS SMALLINT) AS DECIMAL(3, 0)), CAST(CAST((-100) AS SMALLINT) AS DECIMAL(3, 0)), CAST(CAST(0 AS SMALLINT) AS DECIMAL(3, 3));
SELECT CAST(CAST(100 AS SMALLINT) AS DECIMAL(38, 35)), CAST(CAST(100 AS SMALLINT) AS DECIMAL(9, 6));
SELECT CAST(CAST(100 AS SMALLINT) AS DECIMAL(3, 1));
SELECT CAST(CAST(1 AS SMALLINT) AS DECIMAL(3, 3));
SELECT CAST(CAST(100 AS SMALLINT) AS DECIMAL(18, 17));
SELECT CAST(CAST(100 AS SMALLINT) AS DECIMAL(9, 7));
SELECT CAST(CAST(100 AS SMALLINT) AS DECIMAL(38, 37));
SELECT CAST(CAST(100 AS INT) AS DECIMAL(18, 3)), CAST(CAST(100 AS INT) AS DECIMAL(3, 0)), CAST(CAST((-100) AS INT) AS DECIMAL(3, 0)), CAST(CAST(0 AS INT) AS DECIMAL(3, 3));
SELECT CAST(CAST(100 AS INT) AS DECIMAL(38, 35)), CAST(CAST(100 AS INT) AS DECIMAL(9, 6)), CAST(CAST(2147483647 AS INT) AS DECIMAL(10, 0)), CAST(CAST((-2147483647) AS INT) AS DECIMAL(10, 0));
SELECT CAST(CAST(100 AS INT) AS DECIMAL(3, 1));
SELECT CAST(CAST(10000000 AS INT) AS DECIMAL(3, 1));
SELECT -CAST(CAST(10000000 AS INT) AS DECIMAL(3, 1));
SELECT CAST(CAST(1 AS INT) AS DECIMAL(3, 3));
SELECT CAST(CAST(100 AS INT) AS DECIMAL(18, 17));
SELECT CAST(CAST(100 AS INT) AS DECIMAL(9, 7));
SELECT CAST(CAST(100 AS INT) AS DECIMAL(38, 37));
SELECT CAST(CAST(100 AS BIGINT) AS DECIMAL(18, 3)), CAST(CAST(100 AS BIGINT) AS DECIMAL(3, 0)), CAST(CAST((-100) AS BIGINT) AS DECIMAL(3, 0)), CAST(CAST(0 AS BIGINT) AS DECIMAL(3, 3));
SELECT CAST(CAST(100 AS BIGINT) AS DECIMAL(38, 35)), CAST(CAST(100 AS BIGINT) AS DECIMAL(9, 6)), CAST(CAST(9223372036854775807 AS BIGINT) AS DECIMAL(19, 0)), CAST(CAST((-9223372036854775807) AS BIGINT) AS DECIMAL(19, 0));
SELECT CAST(CAST(922337203685477580 AS BIGINT) AS DECIMAL(18, 0)), CAST(CAST((-922337203685477580) AS BIGINT) AS DECIMAL(18, 0));
SELECT CAST(CAST(100 AS BIGINT) AS DECIMAL(3, 1));
SELECT CAST(CAST(10000000 AS BIGINT) AS DECIMAL(3, 1));
SELECT -CAST(CAST(10000000 AS BIGINT) AS DECIMAL(3, 1));
SELECT CAST(CAST(1 AS BIGINT) AS DECIMAL(3, 3));
SELECT CAST(CAST(100 AS BIGINT) AS DECIMAL(18, 17));
SELECT CAST(CAST(100 AS BIGINT) AS DECIMAL(9, 7));
SELECT CAST(CAST(100 AS BIGINT) AS DECIMAL(38, 37));
SELECT CAST(CAST(100 AS INT128) AS DECIMAL(18, 3)), CAST(CAST(100 AS INT128) AS DECIMAL(3, 0)), CAST(CAST((-100) AS INT128) AS DECIMAL(3, 0)), CAST(CAST(0 AS INT128) AS DECIMAL(3, 3));
SELECT CAST(CAST(100 AS INT128) AS DECIMAL(38, 35)), CAST(CAST(100 AS INT128) AS DECIMAL(9, 6)), CAST(CAST(17014118346046923173168730371588410572 AS INT128) AS DECIMAL(38, 0)), CAST(CAST((-17014118346046923173168730371588410572) AS INT128) AS DECIMAL(38, 0));
SELECT CAST(CAST(100 AS INT128) AS DECIMAL(3, 1));
SELECT CAST(CAST(10000000 AS INT128) AS DECIMAL(3, 1));
SELECT -CAST(CAST(10000000 AS INT128) AS DECIMAL(3, 1));
SELECT CAST(CAST(1 AS INT128) AS DECIMAL(3, 3));
SELECT CAST(CAST(100 AS INT128) AS DECIMAL(18, 17));
SELECT CAST(CAST(100 AS INT128) AS DECIMAL(9, 7));
SELECT CAST(CAST(100 AS INT128) AS DECIMAL(38, 37));
SELECT CAST(CAST(17014118346046923173168730371588410572 AS INT128) AS DECIMAL(38, 1));
SELECT CAST(CAST(17014118346046923173168730371588410572 AS INT128) AS DECIMAL(37, 0));
SELECT CAST(CAST(17014118346046923173168730371588410572 AS INT128) AS DECIMAL(18, 0));
SELECT CAST(CAST(17014118346046923173168730371588410572 AS INT128) AS DECIMAL(9, 0));
SELECT CAST(CAST(17014118346046923173168730371588410572 AS INT128) AS DECIMAL(4, 0));
SELECT CAST(CAST(100 AS REAL) AS DECIMAL(18, 3)), CAST(CAST(100 AS REAL) AS DECIMAL(3, 0)), CAST(CAST((-100) AS REAL) AS DECIMAL(3, 0)), CAST(CAST(0 AS REAL) AS DECIMAL(3, 3));
SELECT CAST(CAST(CAST(100 AS REAL) AS DECIMAL(38, 35)) AS REAL), CAST(CAST(CAST(100 AS REAL) AS DECIMAL(9, 6)) AS REAL), CAST(CAST(CAST(17014118346046923173168730371588410572 AS REAL) AS DECIMAL(38, 0)) AS REAL), CAST(CAST(CAST((-17014118346046923173168730371588410572) AS REAL) AS DECIMAL(38, 0)) AS REAL);
SELECT CAST(CAST(1.25 AS REAL) AS DECIMAL(3, 2));
SELECT CAST(CAST(100 AS REAL) AS DECIMAL(3, 1));
SELECT CAST(CAST(10000000 AS REAL) AS DECIMAL(3, 1));
SELECT -CAST(CAST(10000000 AS REAL) AS DECIMAL(3, 1));
SELECT CAST(CAST(1 AS REAL) AS DECIMAL(3, 3));
SELECT CAST(CAST(100 AS REAL) AS DECIMAL(18, 17));
SELECT CAST(CAST(100 AS REAL) AS DECIMAL(9, 7));
SELECT CAST(CAST(100 AS REAL) AS DECIMAL(38, 37));
SELECT CAST(CAST(17014118346046923173168730371588410572 AS REAL) AS DECIMAL(38, 1));
SELECT CAST(CAST(17014118346046923173168730371588410572 AS REAL) AS DECIMAL(37, 0));
SELECT CAST(CAST(17014118346046923173168730371588410572 AS REAL) AS DECIMAL(18, 0));
SELECT CAST(CAST(17014118346046923173168730371588410572 AS REAL) AS DECIMAL(9, 0));
SELECT CAST(CAST(17014118346046923173168730371588410572 AS REAL) AS DECIMAL(4, 0));
SELECT CAST(CAST(100 AS DOUBLE) AS DECIMAL(18, 3)), CAST(CAST(100 AS DOUBLE) AS DECIMAL(3, 0)), CAST(CAST((-100) AS DOUBLE) AS DECIMAL(3, 0)), CAST(CAST(0 AS DOUBLE) AS DECIMAL(3, 3));
SELECT CAST(CAST(CAST(100 AS DOUBLE) AS DECIMAL(38, 35)) AS DOUBLE), CAST(CAST(CAST(100 AS DOUBLE) AS DECIMAL(9, 6)) AS DOUBLE), CAST(CAST(CAST(17014118346046923173168730371588410572 AS DOUBLE) AS DECIMAL(38, 0)) AS DOUBLE), CAST(CAST(CAST((-17014118346046923173168730371588410572) AS DOUBLE) AS DECIMAL(38, 0)) AS DOUBLE);
SELECT CAST(CAST(1.25 AS DOUBLE) AS DECIMAL(3, 2));
SELECT CAST(CAST(100 AS DOUBLE) AS DECIMAL(3, 1));
SELECT CAST(CAST(10000000 AS DOUBLE) AS DECIMAL(3, 1));
SELECT -CAST(CAST(10000000 AS DOUBLE) AS DECIMAL(3, 1));
SELECT CAST(CAST(1 AS DOUBLE) AS DECIMAL(3, 3));
SELECT CAST(CAST(100 AS DOUBLE) AS DECIMAL(18, 17));
SELECT CAST(CAST(100 AS DOUBLE) AS DECIMAL(9, 7));
SELECT CAST(CAST(100 AS DOUBLE) AS DECIMAL(38, 37));
SELECT CAST(CAST(17014118346046923173168730371588410572 AS DOUBLE) AS DECIMAL(38, 1));
SELECT CAST(CAST(17014118346046923173168730371588410572 AS DOUBLE) AS DECIMAL(37, 0));
SELECT CAST(CAST(17014118346046923173168730371588410572 AS DOUBLE) AS DECIMAL(18, 0));
SELECT CAST(CAST(17014118346046923173168730371588410572 AS DOUBLE) AS DECIMAL(9, 0));
SELECT CAST(CAST(17014118346046923173168730371588410572 AS DOUBLE) AS DECIMAL(4, 0));
PRAGMA x;
SELECT TYPEOF(FIRST(CAST('0.1' AS DECIMAL(4, 1))));
SELECT FIRST(CAST(NULL AS DECIMAL(18, 3))), CAST(FIRST(CAST('0.1' AS DECIMAL(4, 1))) AS TEXT), CAST(FIRST(CAST('4938245.1' AS DECIMAL(9, 1))) AS TEXT), CAST(FIRST(CAST('45672564564938245.1' AS DECIMAL(18, 1))) AS TEXT), CAST(FIRST(CAST('4567645908450368043562342564564938245.1' AS DECIMAL(38, 1))) AS TEXT);
SELECT MIN(CAST(NULL AS DECIMAL(18, 3))), CAST(MIN(CAST('0.1' AS DECIMAL(4, 1))) AS TEXT), CAST(MIN(CAST('4938245.1' AS DECIMAL(9, 1))) AS TEXT), CAST(MIN(CAST('45672564564938245.1' AS DECIMAL(18, 1))) AS TEXT), CAST(MIN(CAST('4567645908450368043562342564564938245.1' AS DECIMAL(38, 1))) AS TEXT);
SELECT MAX(CAST(NULL AS DECIMAL(18, 3))), CAST(MAX(CAST('0.1' AS DECIMAL(4, 1))) AS TEXT), CAST(MAX(CAST('4938245.1' AS DECIMAL(9, 1))) AS TEXT), CAST(MAX(CAST('45672564564938245.1' AS DECIMAL(18, 1))) AS TEXT), CAST(MAX(CAST('4567645908450368043562342564564938245.1' AS DECIMAL(38, 1))) AS TEXT);
SELECT SUM(CAST(NULL AS DECIMAL(18, 3))), CAST(SUM(CAST('0.1' AS DECIMAL(4, 1))) AS TEXT), CAST(SUM(CAST('4938245.1' AS DECIMAL(9, 1))) AS TEXT), CAST(SUM(CAST('45672564564938245.1' AS DECIMAL(18, 1))) AS TEXT), CAST(SUM(CAST('4567645908450368043562342564564938245.1' AS DECIMAL(38, 1))) AS TEXT);
CREATE TABLE x AS SELECT CAST(x AS DECIMAL(4, 1)) AS x, CAST((x * x) AS DECIMAL(9, 1)) AS x, CAST((x * x * x) AS DECIMAL(18, 1)) AS x, CAST((x * x * x * x) AS DECIMAL(38, 1)) AS x FROM x AS x;
SELECT CAST(SUM(x) AS TEXT), CAST(SUM(x) AS TEXT), CAST(SUM(x) AS TEXT), CAST(SUM(x) AS TEXT) FROM x;
INSERT INTO x VALUES ('0.1', '0.1', '0.1', '0.1'), ('0.2', '0.2', '0.2', '0.2');
SELECT CAST(SUM(x) AS TEXT), CAST(SUM(x) AS TEXT), CAST(SUM(x) AS TEXT), CAST(SUM(x) AS TEXT) FROM x;
PRAGMA x;
SELECT -(CAST('0.1' AS DECIMAL(18, 3))), -(CAST('-0.1' AS DECIMAL(18, 3)));
SELECT (CAST('0.1' AS DECIMAL(18, 3))), (CAST('-0.1' AS DECIMAL(18, 3)));
SELECT CAST('0.1' AS DECIMAL(18, 3)) + CAST('0.1' AS DECIMAL(18, 3));
SELECT CAST('0.1' AS DECIMAL(18, 3)) + CAST(1 AS INT);
SELECT CAST('0.5' AS DECIMAL(4, 4)) + CAST('0.5' AS DECIMAL(4, 4));
SELECT CAST('0.5' AS DECIMAL(1, 1)) + CAST('100.0' AS DECIMAL(3, 0));
SELECT CAST((CAST('0.5' AS DECIMAL(1, 1)) + 10000) AS TEXT), CAST((CAST('0.54321' AS DECIMAL(5, 5)) + 10000) AS TEXT), CAST((CAST('0.5432154321' AS DECIMAL(10, 10)) + 10000) AS TEXT), CAST((CAST('0.543215432154321' AS DECIMAL(15, 15)) + CAST(10000 AS DECIMAL(20, 15))) AS TEXT), CAST((CAST('0.54321543215432154321' AS DECIMAL(20, 20)) + 10000) AS TEXT), CAST((CAST('0.5432154321543215432154321' AS DECIMAL(25, 25)) + 10000) AS TEXT);
SELECT CAST((CAST('0.54321543215432154321543215432154321' AS DECIMAL(35, 35)) + 10000) AS TEXT);
SELECT CAST('0.5' AS DECIMAL(1, 1)) + CAST(1 AS TINYINT), CAST('0.5' AS DECIMAL(1, 1)) + CAST(1 AS SMALLINT), CAST('0.5' AS DECIMAL(1, 1)) + CAST(1 AS INT), CAST('0.5' AS DECIMAL(1, 1)) + CAST(1 AS BIGINT), CAST('0.5' AS DECIMAL(1, 1)) + CAST(1 AS INT128);
SELECT CAST('0.5' AS DECIMAL(1, 1)) + -CAST(1 AS TINYINT), CAST('0.5' AS DECIMAL(1, 1)) + -CAST(1 AS SMALLINT), CAST('0.5' AS DECIMAL(1, 1)) + -CAST(1 AS INT), CAST('0.5' AS DECIMAL(1, 1)) + -CAST(1 AS BIGINT), CAST('0.5' AS DECIMAL(1, 1)) + -CAST(1 AS INT128);
SELECT CAST('0.5' AS DECIMAL(1, 1)) - CAST(1 AS TINYINT), CAST('0.5' AS DECIMAL(1, 1)) - CAST(1 AS SMALLINT), CAST('0.5' AS DECIMAL(1, 1)) - CAST(1 AS INT), CAST('0.5' AS DECIMAL(1, 1)) - CAST(1 AS BIGINT), CAST('0.5' AS DECIMAL(1, 1)) - CAST(1 AS INT128);
SELECT CAST('0.5' AS DECIMAL(1, 1)) - -CAST(1 AS TINYINT), CAST('0.5' AS DECIMAL(1, 1)) - -CAST(1 AS SMALLINT), CAST('0.5' AS DECIMAL(1, 1)) - -CAST(1 AS INT), CAST('0.5' AS DECIMAL(1, 1)) - -CAST(1 AS BIGINT), CAST('0.5' AS DECIMAL(1, 1)) - -CAST(1 AS INT128);
CREATE TABLE x (x DECIMAL(3, 2));
INSERT INTO x VALUES ('0.1'), ('0.2');
SELECT x + 10000 FROM x;
SELECT x + CAST('0.1' AS DECIMAL(18, 3)), x + 10000 FROM x;
SELECT CAST('0.1' AS DECIMAL(18, 3)) * CAST('10.0' AS DECIMAL(18, 3));
SELECT TYPEOF(CAST('0.1' AS DECIMAL(2, 1)) * CAST('10.0' AS DECIMAL(3, 1)));
SELECT CAST('0.1' AS DECIMAL(18, 3)) * CAST('0.1' AS DECIMAL(18, 3));
SELECT CAST('0.1' AS DECIMAL(18, 3)) * CAST(10 AS INT);
SELECT CAST('5.0' AS DECIMAL(4, 3)) * CAST('5.0' AS DECIMAL(4, 3));
SELECT CAST('-5.0' AS DECIMAL(4, 3)) * CAST('5.0' AS DECIMAL(4, 3));
SELECT CAST((CAST('18.25' AS DECIMAL(4, 2)) * CAST('17.25' AS DECIMAL(4, 2))) AS TEXT);
SELECT CAST('0.001' AS DECIMAL(18, 3)) * CAST(100 AS TINYINT), CAST('0.001' AS DECIMAL(18, 3)) * CAST(10000 AS SMALLINT), CAST('0.001' AS DECIMAL(18, 3)) * CAST(1000000 AS INT), CAST('0.001' AS DECIMAL(18, 3)) * CAST(100000000 AS BIGINT), CAST('0.001' AS DECIMAL(18, 3)) * CAST(10000000000 AS INT128);
SELECT CAST('0.000000000000000000000000000001' AS DECIMAL(38, 30)) * CAST('0.000000000000000000000000000001' AS DECIMAL(38, 30));
SELECT 2.0 + 1.0, 2.0000 + 1.0000, 2.000000000000 + 1.000000000000, 2.00000000000000000000 + 1.00000000000000000000;
SELECT 2.0 - 1.0, 2.0000 - 1.0000, 2.000000000000 - 1.000000000000, 2.00000000000000000000 - 1.00000000000000000000;
SELECT 2.0 * 1.0, 2.0000 * 1.0000;
PRAGMA x;
SELECT [1.33, 10.0];
SELECT [0.1, 1.33, 10.0, 9999999.999999999];
SELECT [99999999999999999999999999999999999.9, 9.99999999999999999999999999999999999];
CREATE TABLE x (x STRUCT(x DOUBLE)[]);
PRAGMA x;
SELECT CAST(CAST(1.0 AS DECIMAL(4, 3)) AS DECIMAL(2, 1)), CAST(CAST(1.0 AS DECIMAL(4, 3)) AS DECIMAL(9, 1)), CAST(CAST(1.0 AS DECIMAL(4, 3)) AS DECIMAL(18, 1)), CAST(CAST(1.0 AS DECIMAL(4, 3)) AS DECIMAL(38, 1));
SELECT CAST(CAST(1.0 AS DECIMAL(9, 8)) AS DECIMAL(2, 1)), CAST(CAST(1.0 AS DECIMAL(9, 8)) AS DECIMAL(9, 1)), CAST(CAST(1.0 AS DECIMAL(9, 8)) AS DECIMAL(18, 1)), CAST(CAST(1.0 AS DECIMAL(9, 8)) AS DECIMAL(38, 1));
SELECT CAST(CAST(1.0 AS DECIMAL(18, 17)) AS DECIMAL(2, 1)), CAST(CAST(1.0 AS DECIMAL(18, 17)) AS DECIMAL(9, 1)), CAST(CAST(1.0 AS DECIMAL(18, 17)) AS DECIMAL(18, 1)), CAST(CAST(1.0 AS DECIMAL(18, 17)) AS DECIMAL(38, 1));
SELECT CAST(CAST(1.0 AS DECIMAL(38, 37)) AS DECIMAL(2, 1)), CAST(CAST(1.0 AS DECIMAL(38, 37)) AS DECIMAL(9, 1)), CAST(CAST(1.0 AS DECIMAL(38, 37)) AS DECIMAL(18, 1)), CAST(CAST(1.0 AS DECIMAL(38, 37)) AS DECIMAL(38, 1));
SELECT CAST(CAST(10.00 AS DECIMAL(4, 2)) AS DECIMAL(4, 3));
SELECT CAST(CAST(10.00 AS DECIMAL(4, 2)) AS DECIMAL(9, 8));
SELECT CAST(CAST(10.00 AS DECIMAL(4, 2)) AS DECIMAL(18, 17));
SELECT CAST(CAST(10.00 AS DECIMAL(4, 2)) AS DECIMAL(38, 37));
SELECT CAST(CAST(10.00 AS DECIMAL(4, 2)) AS DECIMAL(2, 1));
SELECT CAST(CAST(10.00 AS DECIMAL(9, 7)) AS DECIMAL(7, 6));
SELECT CAST(CAST(10.00 AS DECIMAL(18, 16)) AS DECIMAL(16, 15));
SELECT CAST(CAST(10.00 AS DECIMAL(38, 36)) AS DECIMAL(36, 35));
SELECT CAST(CAST(1.0 AS DECIMAL(3, 1)) AS DECIMAL(18, 2)), CAST(CAST(1.0 AS DECIMAL(3, 1)) AS DECIMAL(38, 2));
SELECT CAST(CAST(1.0 AS DECIMAL(3, 1)) AS DECIMAL(2, 1)), CAST(CAST(1.0 AS DECIMAL(3, 1)) AS DECIMAL(9, 1)), CAST(CAST(1.0 AS DECIMAL(3, 1)) AS DECIMAL(18, 1)), CAST(CAST(1.0 AS DECIMAL(3, 1)) AS DECIMAL(38, 1));
SELECT CAST(CAST(1.0 AS DECIMAL(9, 1)) AS DECIMAL(2, 1)), CAST(CAST(1.0 AS DECIMAL(9, 1)) AS DECIMAL(8, 1)), CAST(CAST(1.0 AS DECIMAL(9, 1)) AS DECIMAL(18, 1)), CAST(CAST(1.0 AS DECIMAL(9, 1)) AS DECIMAL(38, 1));
SELECT CAST(CAST(1.0 AS DECIMAL(18, 1)) AS DECIMAL(2, 1)), CAST(CAST(1.0 AS DECIMAL(18, 1)) AS DECIMAL(8, 1)), CAST(CAST(1.0 AS DECIMAL(18, 1)) AS DECIMAL(17, 1)), CAST(CAST(1.0 AS DECIMAL(18, 1)) AS DECIMAL(38, 1));
SELECT CAST(CAST(1.0 AS DECIMAL(38, 1)) AS DECIMAL(2, 1)), CAST(CAST(1.0 AS DECIMAL(38, 1)) AS DECIMAL(8, 1)), CAST(CAST(1.0 AS DECIMAL(38, 1)) AS DECIMAL(17, 1)), CAST(CAST(1.0 AS DECIMAL(38, 1)) AS DECIMAL(37, 1));
SELECT CAST(CAST(1.0 AS DECIMAL(3, 1)) AS DECIMAL(1, 1));
SELECT CAST(CAST(1.0 AS DECIMAL(9, 1)) AS DECIMAL(1, 1));
SELECT CAST(CAST(1.0 AS DECIMAL(18, 1)) AS DECIMAL(1, 1));
SELECT CAST(CAST(1.0 AS DECIMAL(38, 1)) AS DECIMAL(1, 1));
PRAGMA x;
SELECT CAST('9.99' AS DECIMAL(1, 0));
SELECT CAST(CAST(9.99 AS REAL) AS DECIMAL(1, 0));
SELECT CAST(CAST(9.99 AS DOUBLE) AS DECIMAL(1, 0));
SELECT CAST(9.99 AS DECIMAL(1, 0));
SELECT CAST(9.49 AS DECIMAL(1, 0));
SELECT CAST(9.5 AS DECIMAL(1, 0));
SELECT CAST(-9.99 AS DECIMAL(1, 0));
SELECT CAST(-9.5 AS DECIMAL(1, 0));
SELECT CAST(-9.01 AS DECIMAL(1, 0));
SELECT CAST(-9.999999999 AS DECIMAL(1, 0));
SELECT CAST(9.9999999999999999999999999999999 AS DECIMAL(1, 0));
SELECT CAST(-9.9999999999999999999999999999999 AS DECIMAL(1, 0));
PRAGMA x;
SELECT CAST('1e3' AS DECIMAL(18, 3)), CAST('1e-1' AS DECIMAL(18, 3)), CAST('.1e3' AS DECIMAL(18, 3)), CAST('0.1e3' AS DECIMAL(18, 3));
SELECT CAST('-1e3' AS DECIMAL(18, 3)), CAST('-0.1e3' AS DECIMAL(18, 3)), CAST('-.1e-1' AS DECIMAL(18, 3)), CAST('-0.1e-1' AS DECIMAL(18, 3));
SELECT CAST('0e1' AS DECIMAL(18, 3)), CAST('-0e1' AS DECIMAL(18, 3)), CAST('00000e1' AS DECIMAL(18, 3)), CAST('-00000e1' AS DECIMAL(18, 3));
SELECT CAST('1e-100' AS DECIMAL(18, 3));
SELECT CAST('1e-9999' AS DECIMAL(18, 3));
SELECT CAST('1E3' AS DECIMAL(4, 0));
SELECT CAST('1e8' AS DECIMAL(9, 0));
SELECT CAST('1e17' AS DECIMAL(18, 0));
SELECT CAST('1e37' AS DECIMAL(38, 0));
SELECT CAST('1e4' AS DECIMAL(4, 0));
SELECT CAST('1e9' AS DECIMAL(9, 0));
SELECT CAST('1e18' AS DECIMAL(18, 0));
SELECT CAST('1e38' AS DECIMAL(38, 0));
SELECT CAST('1e100' AS DECIMAL(18, 3));
SELECT CAST('1e100e100' AS DECIMAL(18, 3));
SELECT CAST('1e100.2' AS DECIMAL(18, 3));
SELECT CAST('1e9999999999' AS DECIMAL(18, 3));
SELECT CAST('1e-9999999999' AS DECIMAL(18, 3));
SELECT CAST('1e-99999999999999999999999999999999' AS DECIMAL(18, 3));
SELECT CAST('.1f3' AS DECIMAL(18, 3));
SELECT CAST('1f3' AS DECIMAL(18, 3));
PRAGMA x;
SELECT (CAST(99000000000000000.0 AS DECIMAL(18, 1)) + CAST(99000000000000000.0 AS DECIMAL(18, 1)));
SELECT CAST(CAST((CAST(99000000000000000.0 AS DECIMAL(18, 1)) + CAST(99000000000000000.0 AS DECIMAL(18, 1))) AS TEXT) AS DECIMAL(18, 1));
SELECT (CAST(50000000000000000.0 AS DECIMAL(18, 1)) + CAST(50000000000000000.0 AS DECIMAL(18, 1)));
SELECT (-CAST(99000000000000000.0 AS DECIMAL(18, 1)) - CAST(99000000000000000.0 AS DECIMAL(18, 1)));
SELECT (-CAST(50000000000000000.0 AS DECIMAL(18, 1)) - CAST(50000000000000000.0 AS DECIMAL(18, 1)));
SELECT (CAST(9900000000000000000000000000000000000.0 AS DECIMAL(38, 1)) + CAST(9900000000000000000000000000000000000.0 AS DECIMAL(38, 1)));
SELECT (CAST(5000000000000000000000000000000000000.0 AS DECIMAL(38, 1)) + CAST(5000000000000000000000000000000000000.0 AS DECIMAL(38, 1)));
SELECT CAST('10000000000000000000000000000000000000.0' AS DECIMAL(38, 1));
SELECT (-CAST(5000000000000000000000000000000000000.0 AS DECIMAL(38, 1)) - CAST(5000000000000000000000000000000000000.0 AS DECIMAL(38, 1)));
SELECT CAST(90000000000000000.0 AS DECIMAL(18, 1)) * CAST(10 AS DECIMAL(2, 0));
SELECT CAST(90000000000000000.0 AS DECIMAL(18, 1)) * CAST(1000 AS DECIMAL(4, 0));
SELECT CAST(5000000000000000000000000000000000000.0 AS DECIMAL(38, 1)) * CAST(2 AS DECIMAL(1, 0));
SELECT CAST(9900000000000000000000000000000000000.0 AS DECIMAL(38, 1)) * 1.0;
PRAGMA x;
CREATE TABLE x (x DECIMAL(18, 1));
INSERT INTO x VALUES (99000000000000000.0);
SELECT x + 1 FROM x;
SELECT x + 1000000000000000.0 FROM x;
SELECT -1 - x FROM x;
SELECT -1000000000000000.0 - x FROM x;
SELECT 1 * x FROM x;
SELECT 2 * x FROM x;
PRAGMA x;
SELECT CAST(1000 AS DECIMAL(3, 0));
SELECT CAST(100 AS DECIMAL(2, 0));
SELECT CAST('100' AS DECIMAL(2, 0));
SELECT CAST(CAST('100' AS DOUBLE) AS DECIMAL(2, 0));
SELECT CAST(CAST(100 AS DECIMAL(3, 0)) AS DECIMAL(2, 0));
SELECT CAST(CAST(10000 AS DECIMAL(5, 0)) AS DECIMAL(2, 0));
SELECT CAST(CAST(1000000000 AS DECIMAL(10, 0)) AS DECIMAL(2, 0));
SELECT CAST(CAST(1000000000 AS DECIMAL(20, 0)) AS DECIMAL(2, 0));
SELECT TRY_CAST(1000 AS DECIMAL(3, 0));
SELECT TRY_CAST(100 AS DECIMAL(2, 0));
SELECT TRY_CAST('100' AS DECIMAL(2, 0));
SELECT TRY_CAST(CAST('100' AS DOUBLE) AS DECIMAL(2, 0));
SELECT TRY_CAST(CAST(100 AS DECIMAL(3, 0)) AS DECIMAL(2, 0));
SELECT TRY_CAST(CAST(10000 AS DECIMAL(5, 0)) AS DECIMAL(2, 0));
SELECT TRY_CAST(CAST(1000000000 AS DECIMAL(10, 0)) AS DECIMAL(2, 0));
SELECT TRY_CAST(CAST(1000000000 AS DECIMAL(20, 0)) AS DECIMAL(2, 0));
SELECT CAST(1000000 AS DECIMAL(5, 0));
SELECT CAST('100000' AS DECIMAL(5, 0));
SELECT CAST(CAST('100000' AS DOUBLE) AS DECIMAL(5, 0));
SELECT CAST(CAST(100000 AS DECIMAL(6, 0)) AS DECIMAL(5, 0));
SELECT CAST(CAST(1000000000 AS DECIMAL(10, 0)) AS DECIMAL(2, 0));
SELECT CAST(CAST(1000000000 AS DECIMAL(20, 0)) AS DECIMAL(5, 0));
SELECT TRY_CAST(1000000 AS DECIMAL(5, 0));
SELECT TRY_CAST('100000' AS DECIMAL(5, 0));
SELECT TRY_CAST(CAST('100000' AS DOUBLE) AS DECIMAL(5, 0));
SELECT TRY_CAST(CAST(100000 AS DECIMAL(6, 0)) AS DECIMAL(5, 0));
SELECT TRY_CAST(CAST(1000000000 AS DECIMAL(10, 0)) AS DECIMAL(2, 0));
SELECT TRY_CAST(CAST(1000000000 AS DECIMAL(20, 0)) AS DECIMAL(5, 0));
SELECT CAST(10000000000 AS DECIMAL(10, 0));
SELECT CAST('10000000000' AS DECIMAL(10, 0));
SELECT CAST(CAST('10000000000' AS DOUBLE) AS DECIMAL(10, 0));
SELECT CAST(CAST(10000000000 AS DECIMAL(11, 0)) AS DECIMAL(10, 0));
SELECT CAST(CAST(10000000000 AS DECIMAL(20, 0)) AS DECIMAL(10, 0));
SELECT TRY_CAST(10000000000 AS DECIMAL(10, 0));
SELECT TRY_CAST('10000000000' AS DECIMAL(10, 0));
SELECT TRY_CAST(CAST('10000000000' AS DOUBLE) AS DECIMAL(10, 0));
SELECT TRY_CAST(CAST(10000000000 AS DECIMAL(11, 0)) AS DECIMAL(10, 0));
SELECT TRY_CAST(CAST(10000000000 AS DECIMAL(20, 0)) AS DECIMAL(10, 0));
SELECT CAST(100000000000000000000 AS DECIMAL(20, 0));
SELECT CAST('100000000000000000000' AS DECIMAL(20, 0));
SELECT CAST(CAST('100000000000000000000' AS DOUBLE) AS DECIMAL(20, 0));
SELECT CAST(CAST(100000000000000000000 AS DECIMAL(20, 0)) AS DECIMAL(20, 0));
SELECT TRY_CAST(100000000000000000000 AS DECIMAL(20, 0));
SELECT TRY_CAST('100000000000000000000' AS DECIMAL(20, 0));
SELECT TRY_CAST(CAST('100000000000000000000' AS DOUBLE) AS DECIMAL(20, 0));
SELECT TRY_CAST(CAST(100000000000000000000 AS DECIMAL(25, 0)) AS DECIMAL(20, 0));
SELECT 42.1, -10239814.1, 1049185157.12345, 102398294123451814.12345, -49238409238403918140294812084.12490812490;
SELECT TYPEOF(42.1), TYPEOF(-10239814.1), TYPEOF(1049185157.12345), TYPEOF(102398294123451814.12345), TYPEOF(-49238409238403918140294812084.12490812490);
SELECT 42., 42e3, 4.23e1, 10e20, 0.34, -2.3;
SELECT TYPEOF(42.), TYPEOF(42e3), TYPEOF(4.23e1), TYPEOF(10e20), TYPEOF(0.34), TYPEOF(-2.3), TYPEOF(10e100);
PRAGMA x;
SELECT TYPEOF(CAST('0.1' AS DECIMAL(18, 3)));
SELECT CAST(CAST('0.1' AS DECIMAL(18, 3)) AS TEXT), CAST(CAST('922337203685478.758' AS DECIMAL(18, 3)) AS TEXT);
SELECT CAST(CAST('-0.1' AS DECIMAL(18, 3)) AS TEXT), CAST(CAST('-922337203685478.758' AS DECIMAL(18, 3)) AS TEXT);
SELECT CAST(CAST('   7   ' AS DECIMAL(18, 3)) AS TEXT), CAST(CAST('9.' AS DECIMAL(18, 3)) AS TEXT), CAST(CAST('.1' AS DECIMAL(18, 3)) AS TEXT);
SELECT CAST(CAST('0.123456789' AS DECIMAL(18, 3)) AS TEXT), CAST(CAST('-0.123456789' AS DECIMAL(18, 3)) AS TEXT);
SELECT CAST('9223372036854788.758' AS DECIMAL(18, 3));
SELECT CAST(CAST('0.1' AS DECIMAL(3, 0)) AS TEXT);
SELECT CAST(CAST('123.4' AS DECIMAL(9)) AS TEXT);
SELECT CAST(CAST('0.1' AS DECIMAL(3, 3)) AS TEXT), CAST(CAST('-0.1' AS DECIMAL(3, 3)) AS TEXT);
SELECT CAST(CAST('1' AS DECIMAL(3, 3)) AS TEXT);
SELECT CAST(CAST('-1' AS DECIMAL(3, 3)) AS TEXT);
SELECT CAST(CAST(CAST('0.1' AS DECIMAL(18, 3)) AS DECIMAL(18, 3)) AS DECIMAL(18, 3));
SELECT CAST(CAST('123.4' AS DECIMAL(4, 1)) AS TEXT);
SELECT CAST(CAST('2.001' AS DECIMAL(4, 3)) AS TEXT);
SELECT CAST(CAST('123456.789' AS DECIMAL(9, 3)) AS TEXT);
SELECT CAST(CAST('123456789' AS DECIMAL(9, 0)) AS TEXT);
SELECT CAST(CAST('123456789' AS DECIMAL(18, 3)) AS TEXT);
SELECT CAST(CAST('1701411834604692317316873037.1588410572' AS DECIMAL(38, 10)) AS TEXT);
SELECT CAST(CAST('0' AS DECIMAL(38, 10)) AS TEXT);
SELECT CAST(CAST('0.00003' AS DECIMAL(38, 10)) AS TEXT);
SELECT CAST(33.846 AS DECIMAL(5, 0)) AS x;
SELECT CAST(-33.846 AS DECIMAL(5, 0)) AS x;
SELECT CAST(1234567890.1235 AS DECIMAL(13, 3));
SELECT CAST('0.1' AS DECIMAL(3, 4));
SELECT CAST('0.1' AS DECIMAL('hello'));
SELECT CAST('0.1' AS DECIMAL('hello'));
SELECT CAST('0.1' AS DECIMAL(1000));
SELECT CAST('0.1' AS DECIMAL(1, 2, 3));
SELECT CAST('1' AS INT(1000));
PRAGMA x;
CREATE TABLE x (x DECIMAL(38, 1));
CREATE TABLE x (x DECIMAL(38, 1));
INSERT INTO x VALUES (4642275147320176030871715840);
INSERT INTO x VALUES (4642275147320176030871715840);
SELECT COUNT(*) FROM x INNER JOIN x ON (x.x = x.x);
PRAGMA x;
CREATE TABLE x (x DECIMAL(38, 10));
INSERT INTO x (x) VALUES (9999999999999999899999999999.9999999999);
INSERT INTO x (x) VALUES (-9999999999999999899999999999.9999999999);
SELECT * FROM x;
PRAGMA x;
CREATE TABLE x AS VALUES (1000000), (10.0000000005);
SELECT * FROM x;
CREATE TABLE x AS SELECT [1000000, 10.0000000005];
SELECT * FROM x;
SELECT CAST('+1e-1' AS DECIMAL(38, 3));
SELECT CAST('+1234.56789e-1' AS DECIMAL(38, 0));
SELECT CAST('+1234.56789e-1' AS DECIMAL(38, 5));
SELECT CAST(1234.56789e-1 AS DECIMAL(38, 5));
SELECT CAST(1234.56789e-1 AS DECIMAL(38, 5));
SELECT CAST('9.99' AS DECIMAL(1, 0));
PRAGMA x;
CREATE TABLE x (x DECIMAL(3, 2));
INSERT INTO x VALUES ('0.1'), ('0.2');
SELECT * FROM x;
SELECT * FROM x ORDER BY x DESC;
SELECT * FROM x WHERE x = CAST('0.1' AS DECIMAL(3, 2));
SELECT * FROM x WHERE x >= CAST('0.1' AS DECIMAL(3, 2));
SELECT * FROM x WHERE x = CAST('0.1' AS DECIMAL(9, 5));
SELECT * FROM x WHERE x >= CAST('0.1' AS DECIMAL(9, 5)) ORDER BY 1;
INSERT INTO x VALUES ('0.11'), ('0.21');
SELECT * FROM x WHERE x = CAST('0.1' AS DECIMAL(9, 1));
SELECT * FROM x WHERE x > CAST('0.1' AS DECIMAL(9, 1)) ORDER BY 1;
DELETE FROM x WHERE x <> CAST(x AS DECIMAL(9, 1));
SELECT ABS(CAST('-0.1' AS DECIMAL(18, 3))), ABS(CAST('0.1' AS DECIMAL(18, 3))), ABS(CAST(NULL AS DECIMAL(18, 3)));
SELECT ABS(CAST('-0.1' AS DECIMAL(4, 3))), ABS(CAST('-0.1' AS DECIMAL(9, 3))), ABS(CAST('-0.1' AS DECIMAL(18, 3))), ABS(CAST('-0.1' AS DECIMAL(38, 3)));
SELECT CEIL(CAST('0.0' AS DECIMAL(18, 3))), CEIL(CAST('0.1' AS DECIMAL(18, 3))), CEIL(CAST('-0.1' AS DECIMAL(18, 3))), CEIL(CAST(NULL AS DECIMAL(18, 3)));
SELECT CEIL(CAST('100.3' AS DECIMAL(18, 3))), CEIL(CAST('-127012.3' AS DECIMAL(18, 3)));
SELECT CEIL(CAST('10.5' AS DECIMAL(18, 3))), CEIL(CAST('-10.5' AS DECIMAL(18, 3)));
SELECT CEIL(CAST('999.9' AS DECIMAL(4, 1))), CEIL(CAST('99999999.9' AS DECIMAL(9, 1))), CEIL(CAST('99999999999999999.9' AS DECIMAL(18, 1))), CEIL(CAST('9999999999999999999999999999999999999.9' AS DECIMAL(38, 1)));
SELECT CEIL(CAST('-999.9' AS DECIMAL(4, 1))), CEIL(CAST('-99999999.9' AS DECIMAL(9, 1))), CEIL(CAST('-99999999999999999.9' AS DECIMAL(18, 1))), CEIL(CAST('-9999999999999999999999999999999999999.9' AS DECIMAL(38, 1)));
SELECT FLOOR(CAST('0.1' AS DECIMAL(18, 3))), FLOOR(CAST('-0.1' AS DECIMAL(18, 3))), FLOOR(CAST(NULL AS DECIMAL(18, 3)));
SELECT FLOOR(CAST('100.3' AS DECIMAL(18, 3))), FLOOR(CAST('-127012.3' AS DECIMAL(18, 3)));
SELECT FLOOR(CAST('10.5' AS DECIMAL(18, 3))), FLOOR(CAST('-10.5' AS DECIMAL(18, 3)));
SELECT FLOOR(CAST('999.9' AS DECIMAL(4, 1))), FLOOR(CAST('99999999.9' AS DECIMAL(9, 1))), FLOOR(CAST('99999999999999999.9' AS DECIMAL(18, 1))), FLOOR(CAST('9999999999999999999999999999999999999.9' AS DECIMAL(38, 1)));
SELECT FLOOR(CAST('-999.9' AS DECIMAL(4, 1))), FLOOR(CAST('-99999999.9' AS DECIMAL(9, 1))), FLOOR(CAST('-99999999999999999.9' AS DECIMAL(18, 1))), FLOOR(CAST('-9999999999999999999999999999999999999.9' AS DECIMAL(38, 1)));
SELECT ROUND(CAST('0.1' AS DECIMAL(18, 3))), ROUND(CAST('-0.1' AS DECIMAL(18, 3))), ROUND(CAST(NULL AS DECIMAL(18, 3)));
SELECT ROUND(CAST('100.3' AS DECIMAL(18, 3))), ROUND(CAST('-127012.3' AS DECIMAL(18, 3)));
SELECT ROUND(CAST('10.5' AS DECIMAL(18, 3))), ROUND(CAST('-10.5' AS DECIMAL(18, 3)));
SELECT ROUND(CAST('999.9' AS DECIMAL(4, 1))), ROUND(CAST('99999999.9' AS DECIMAL(9, 1))), ROUND(CAST('99999999999999999.9' AS DECIMAL(18, 1))), ROUND(CAST('9999999999999999999999999999999999999.9' AS DECIMAL(38, 1)));
SELECT ROUND(CAST('-999.9' AS DECIMAL(4, 1))), ROUND(CAST('-99999999.9' AS DECIMAL(9, 1))), ROUND(CAST('-99999999999999999.9' AS DECIMAL(18, 1))), ROUND(CAST('-9999999999999999999999999999999999999.9' AS DECIMAL(38, 1)));
SELECT CAST(ROUND(CAST('100.3908147521' AS DECIMAL(18, 10)), 0) AS TEXT), CAST(ROUND(CAST('100.3908147521' AS DECIMAL(18, 10)), 1) AS TEXT), CAST(ROUND(CAST('100.3908147521' AS DECIMAL(18, 10)), 2) AS TEXT), CAST(ROUND(CAST('100.3908147521' AS DECIMAL(18, 10)), 3) AS TEXT), CAST(ROUND(CAST('100.3908147521' AS DECIMAL(18, 10)), 4) AS TEXT), CAST(ROUND(CAST('100.3908147521' AS DECIMAL(18, 10)), 5) AS TEXT), CAST(ROUND(CAST('100.3908147521' AS DECIMAL(18, 10)), 6) AS TEXT), CAST(ROUND(CAST('100.3908147521' AS DECIMAL(18, 10)), 7) AS TEXT), CAST(ROUND(CAST('100.3908147521' AS DECIMAL(18, 10)), 8) AS TEXT), CAST(ROUND(CAST('100.3908147521' AS DECIMAL(18, 10)), 9) AS TEXT), CAST(ROUND(CAST('100.3908147521' AS DECIMAL(18, 10)), 10) AS TEXT), CAST(ROUND(CAST('100.3908147521' AS DECIMAL(18, 10)), 100000) AS TEXT), ROUND(CAST(NULL AS DECIMAL(18, 3)), 0);
SELECT CAST(ROUND(CAST('1049578239572094512.32415' AS DECIMAL(30, 10)), 0) AS TEXT), CAST(ROUND(CAST('1049578239572094512.32415' AS DECIMAL(30, 10)), -1) AS TEXT), CAST(ROUND(CAST('1049578239572094512.32415' AS DECIMAL(30, 10)), -2) AS TEXT), CAST(ROUND(CAST('1049578239572094512.32415' AS DECIMAL(30, 10)), -3) AS TEXT), CAST(ROUND(CAST('1049578239572094512.32415' AS DECIMAL(30, 10)), -4) AS TEXT), CAST(ROUND(CAST('1049578239572094512.32415' AS DECIMAL(30, 10)), -5) AS TEXT), CAST(ROUND(CAST('1049578239572094512.32415' AS DECIMAL(30, 10)), -6) AS TEXT), CAST(ROUND(CAST('1049578239572094512.32415' AS DECIMAL(30, 10)), -7) AS TEXT), CAST(ROUND(CAST('1049578239572094512.32415' AS DECIMAL(30, 10)), -8) AS TEXT), CAST(ROUND(CAST('1049578239572094512.32415' AS DECIMAL(30, 10)), -9) AS TEXT), CAST(ROUND(CAST('1049578239572094512.32415' AS DECIMAL(30, 10)), -10) AS TEXT), CAST(ROUND(CAST('1049578239572094512.32415' AS DECIMAL(30, 10)), -11) AS TEXT), CAST(ROUND(CAST('1049578239572094512.32415' AS DECIMAL(30, 10)), -12) AS TEXT), CAST(ROUND(CAST('1049578239572094512.32415' AS DECIMAL(30, 10)), -13) AS TEXT), CAST(ROUND(CAST('1049578239572094512.32415' AS DECIMAL(30, 10)), -14) AS TEXT), CAST(ROUND(CAST('1049578239572094512.32415' AS DECIMAL(30, 10)), -15) AS TEXT), CAST(ROUND(CAST('1049578239572094512.32415' AS DECIMAL(30, 10)), -16) AS TEXT), CAST(ROUND(CAST('1049578239572094512.32415' AS DECIMAL(30, 10)), -18) AS TEXT), CAST(ROUND(CAST('1049578239572094512.32415' AS DECIMAL(30, 10)), -19) AS TEXT), CAST(ROUND(CAST('1049578239572094512.32415' AS DECIMAL(30, 10)), -20) AS TEXT), CAST(ROUND(CAST('1049578239572094512.32415' AS DECIMAL(30, 10)), -19842) AS TEXT);
SELECT CAST(ROUND(CAST('-100.3908147521' AS DECIMAL(18, 10)), 0) AS TEXT), CAST(ROUND(CAST('-100.3908147521' AS DECIMAL(18, 10)), 1) AS TEXT), CAST(ROUND(CAST('-100.3908147521' AS DECIMAL(18, 10)), 2) AS TEXT), CAST(ROUND(CAST('-100.3908147521' AS DECIMAL(18, 10)), 3) AS TEXT), CAST(ROUND(CAST('-100.3908147521' AS DECIMAL(18, 10)), 4) AS TEXT), CAST(ROUND(CAST('-100.3908147521' AS DECIMAL(18, 10)), 5) AS TEXT), CAST(ROUND(CAST('-100.3908147521' AS DECIMAL(18, 10)), 6) AS TEXT), CAST(ROUND(CAST('-100.3908147521' AS DECIMAL(18, 10)), 7) AS TEXT), CAST(ROUND(CAST('-100.3908147521' AS DECIMAL(18, 10)), 8) AS TEXT), CAST(ROUND(CAST('-100.3908147521' AS DECIMAL(18, 10)), 9) AS TEXT), CAST(ROUND(CAST('-100.3908147521' AS DECIMAL(18, 10)), 10) AS TEXT), CAST(ROUND(CAST('-100.3908147521' AS DECIMAL(18, 10)), 100000) AS TEXT), ROUND(CAST(NULL AS DECIMAL(18, 3)), 0);
SELECT CAST(ROUND(CAST('-1049578239572094512.32415' AS DECIMAL(30, 10)), 0) AS TEXT), CAST(ROUND(CAST('-1049578239572094512.32415' AS DECIMAL(30, 10)), -1) AS TEXT), CAST(ROUND(CAST('-1049578239572094512.32415' AS DECIMAL(30, 10)), -2) AS TEXT), CAST(ROUND(CAST('-1049578239572094512.32415' AS DECIMAL(30, 10)), -3) AS TEXT), CAST(ROUND(CAST('-1049578239572094512.32415' AS DECIMAL(30, 10)), -4) AS TEXT), CAST(ROUND(CAST('-1049578239572094512.32415' AS DECIMAL(30, 10)), -5) AS TEXT), CAST(ROUND(CAST('-1049578239572094512.32415' AS DECIMAL(30, 10)), -6) AS TEXT), CAST(ROUND(CAST('-1049578239572094512.32415' AS DECIMAL(30, 10)), -7) AS TEXT), CAST(ROUND(CAST('-1049578239572094512.32415' AS DECIMAL(30, 10)), -8) AS TEXT), CAST(ROUND(CAST('-1049578239572094512.32415' AS DECIMAL(30, 10)), -9) AS TEXT), CAST(ROUND(CAST('-1049578239572094512.32415' AS DECIMAL(30, 10)), -10) AS TEXT), CAST(ROUND(CAST('-1049578239572094512.32415' AS DECIMAL(30, 10)), -11) AS TEXT), CAST(ROUND(CAST('-1049578239572094512.32415' AS DECIMAL(30, 10)), -12) AS TEXT), CAST(ROUND(CAST('-1049578239572094512.32415' AS DECIMAL(30, 10)), -13) AS TEXT), CAST(ROUND(CAST('-1049578239572094512.32415' AS DECIMAL(30, 10)), -14) AS TEXT), CAST(ROUND(CAST('-1049578239572094512.32415' AS DECIMAL(30, 10)), -15) AS TEXT), CAST(ROUND(CAST('-1049578239572094512.32415' AS DECIMAL(30, 10)), -16) AS TEXT), CAST(ROUND(CAST('-1049578239572094512.32415' AS DECIMAL(30, 10)), -18) AS TEXT), CAST(ROUND(CAST('-1049578239572094512.32415' AS DECIMAL(30, 10)), -19) AS TEXT), CAST(ROUND(CAST('-1049578239572094512.32415' AS DECIMAL(30, 10)), -20) AS TEXT), CAST(ROUND(CAST('-1049578239572094512.32415' AS DECIMAL(30, 10)), -19842) AS TEXT);
SELECT ROUND(CAST(12 AS DECIMAL(3, 0)));
SELECT ROUND(CAST(12 AS DECIMAL(3, 0)), x) FROM x AS x;
SELECT ROUND(CAST(12 AS DECIMAL(3, 0)), NULL);
SELECT CAST(ROUND(CAST('-100.3' AS DECIMAL(4, 1)), 1) AS TEXT), CAST(ROUND(CAST('104.3' AS DECIMAL(4, 1)), 0) AS TEXT), CAST(ROUND(CAST('104.3' AS DECIMAL(4, 1)), -1) AS TEXT);
SELECT CAST(ROUND(CAST('-100.3' AS DECIMAL(9, 1)), 1) AS TEXT), CAST(ROUND(CAST('104.3' AS DECIMAL(9, 1)), 0) AS TEXT), CAST(ROUND(CAST('104.3' AS DECIMAL(9, 1)), -1) AS TEXT);
SELECT CAST(ROUND(CAST('-100.3' AS DECIMAL(18, 1)), 1) AS TEXT), CAST(ROUND(CAST('104.3' AS DECIMAL(18, 1)), 0) AS TEXT), CAST(ROUND(CAST('104.3' AS DECIMAL(18, 1)), -1) AS TEXT);
SELECT PRINTF('%.2f', CAST('0.12345' AS DECIMAL(30, 10)));
SELECT (SELECT CAST('1.0' AS DECIMAL(2, 1)));
SELECT ROUND(CAST(CAST('-100.3' AS DECIMAL(18, 1)) AS REAL), 1);
PRAGMA x;
SELECT CAST('1.023450000001' AS DECIMAL(5, 4));
SELECT CAST('1.234499999' AS DECIMAL(4, 3));
SELECT CAST('1.23499999' AS DECIMAL(4, 3));
SELECT CAST('1.234499999' AS DECIMAL(5, 4));
SELECT CAST('-1.023450000001' AS DECIMAL(5, 4));
SELECT CAST('-1.234499999' AS DECIMAL(4, 3));
SELECT CAST('-1.23499999' AS DECIMAL(4, 3));
SELECT CAST('-1.234499999' AS DECIMAL(5, 4));
PRAGMA x;
PRAGMA x;
INSERT INTO x VALUES (0176030871715840, 2.2);
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
PRAGMA x;
INSERT INTO x VALUES (0176030871715840, 2.2);
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
SELECT CAST('hello' AS ENUM('world', 'hello'));
CREATE TABLE x AS SELECT CAST('hello' AS ENUM('world', 'hello')) AS x;
SELECT * FROM x;
SELECT CAST('hello' AS ENUM);
SELECT CAST('hello' AS ENUM(42));
SELECT CAST('hello' AS ENUM('zzz', 42));
PRAGMA x;
CREATE TABLE x (x mood);
CREATE TABLE x (x mood_2);
INSERT INTO x VALUES ('1');
INSERT INTO x SELECT * FROM x;
PRAGMA x;
CREATE TABLE x (x mood, x mood_2);
INSERT INTO x VALUES ('sad', 'very sad');
SELECT * FROM x WHERE x = CAST('' AS TEXT);
SELECT x = '' FROM x;
SELECT * FROM x WHERE x = x;
SELECT * FROM x WHERE CAST(x AS mood_2) = x;
CREATE TABLE x (x orderkey_enum);
INSERT INTO x (SELECT CAST((x / 4) AS TEXT) FROM x);
PRAGMA x;
CREATE TABLE x (x TEXT, x mood);
INSERT INTO x VALUES (NULL, 'happy');
INSERT INTO x VALUES ('woof', NULL);
INSERT INTO x VALUES (NULL, NULL);
INSERT INTO x VALUES ('quack', 'ok');
INSERT INTO x VALUES ('moo', 'sad');
SELECT COALESCE(x, x) FROM x;
CREATE TABLE x (x onomatopoeia, x mood);
INSERT INTO x VALUES (NULL, 'happy');
INSERT INTO x VALUES ('woof', NULL);
INSERT INTO x VALUES (NULL, NULL);
INSERT INTO x VALUES ('quack', 'ok');
INSERT INTO x VALUES ('moo', 'sad');
SELECT COALESCE(x, x) FROM x;
SELECT * FROM x WHERE x IN ('sad', 'woof', NULL);
PRAGMA x;
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('Pedro'), ('Mark'), ('Hannes'), ('Pedro'), ('Pedro'), ('Mark');
ALTER TABLE x ALTER COLUMN x SET DATA TYPE name_enum;
ALTER TABLE x ALTER COLUMN x SET DATA TYPE name_enum;
SELECT * FROM x;
SELECT TYPEOF(x) FROM x LIMIT 1;
ALTER TABLE x ALTER COLUMN x SET DATA TYPE TEXT;
SELECT * FROM x;
SELECT TYPEOF(x) FROM x LIMIT 1;
ALTER TABLE x ALTER COLUMN x SET DATA TYPE bogus_name;
PRAGMA x;
SELECT CAST('happy' AS mood);
SELECT CAST('awesome-bro' AS mood);
SELECT CAST(0 AS mood);
SELECT CAST(['happy'] AS mood[]);
SELECT CAST([NULL, 'happy', NULL] AS mood[]);
SELECT CAST(['happy', 'ok', 'ok'] AS mood[]);
SELECT CAST(['bla'] AS mood[]);
SELECT CAST([1] AS mood[]);
SELECT CAST([] AS mood[]);
SELECT CAST([NULL] AS mood[]);
SELECT {'x': CAST('happy' AS mood)};
SELECT {'x': CAST('happy' AS mood), 'x': CAST('ok' AS mood)};
SELECT {'x': CAST('happy' AS mood), 'x': 1, 'x': CAST('ok' AS mood)};
SELECT {'x': CAST('happy' AS mood), 'x': CAST('bla' AS mood)};
SELECT {'x': CAST('bla' AS mood)};
SELECT MAP([1, 2, 3, 4], CAST(['happy', 'ok', 'ok', 'sad'] AS mood[]));
SELECT MAP([1, 2, 3, 4], CAST(['bla', 'ok', 'ok', 'sad'] AS mood[]));
SELECT ENUM_RANGE(CAST(NULL AS mood)) AS x;
PRAGMA x;
SELECT CAST(4 AS INTEGEE);
PRAGMA x;
CREATE TABLE x (x E1);
INSERT INTO x VALUES ('v1');
SELECT TYPEOF(CASE WHEN 1 THEN x END) FROM x;
PRAGMA x;
CREATE TABLE x (x TEXT, x mood);
INSERT INTO x VALUES ('Pedro', 'ok'), ('Mark', 'sad'), ('Moe', 'happy'), ('Diego', NULL);
SELECT * FROM x;
SELECT CAST(x AS TEXT) FROM x;
CREATE TABLE x (x TEXT, x years);
INSERT INTO x VALUES ('Tenacious D', '2001'), ('The Pick of Destiny', '2006'), ('Rize of the Fenix', '2012'), ('Post-Apocalypto', '2018'), ('Something Random', NULL);
SELECT x, CAST(x AS INT) FROM x;
SELECT x FROM x WHERE CAST(x AS INT) > 2010;
CREATE TABLE x (x TEXT, x years_error);
INSERT INTO x VALUES ('Tenacious D', '2001'), ('The Pick of Destiny', 'bla');
SELECT x, CAST(x AS INT) FROM x;
SELECT x, CAST(x AS INT) FROM x WHERE x = '2001';
SELECT x, TRY_CAST(x AS INT) FROM x;
SELECT x, CAST(x AS DOUBLE) FROM x;
CREATE TABLE x (x dates);
INSERT INTO x VALUES ('2001-01-01');
SELECT CAST(x AS DATE) FROM x;
SELECT CAST(x AS TIMESTAMP) FROM x;
PRAGMA x;
CREATE TABLE x (x TEXT, x mood);
INSERT INTO x VALUES ('Pedro', 'happy'), ('Mark', NULL), ('Hannes', 'quackity-quack'), ('Tim', 'ok'), ('Diego', 'sad');
CREATE TABLE x (x TEXT, x mood);
INSERT INTO x VALUES ('Timmynator', 'sad'), ('Tars', 'ok'), ('Diggernaut', NULL);
SELECT x.x, x.x FROM x INNER JOIN x ON (x.x = x.x);
CREATE TABLE x (x TEXT, x pet_mood);
INSERT INTO x VALUES ('Oogie', 'happy'), ('Wilbur', 'quackity-quack'), ('Chorizo', NULL), ('Vacilo', 'beaming');
SELECT x.x, x.x FROM x INNER JOIN x ON (x.x > x.x) WHERE x.x = 'Pedro';
SELECT x.x, x.x FROM x INNER JOIN x ON (x.x = x.x);
SELECT x, x FROM (SELECT x.x AS x, x.x AS x, x.x AS x, x.x AS x FROM x, x) AS x WHERE x = x;
SELECT x, x FROM (SELECT x.x AS x, x.x AS x, x.x AS x, x.x AS x FROM x, x) AS x WHERE x = x;
SELECT x.x FROM x UNION ALL SELECT x.x FROM x;
CREATE TABLE x (x TEXT, x TEXT);
INSERT INTO x VALUES ('Pedro', 'Oogie'), ('Hannes', 'Wilbur'), ('Tim', 'Chorizo'), ('Diego', 'Vacilo');
CREATE TABLE x AS SELECT x, x, x, x FROM (SELECT x.x AS x, x.x AS x, x.x AS x, x.x AS x FROM x INNER JOIN x ON (x.x = x.x) INNER JOIN x ON (x.x = x.x));
SELECT * FROM x;
SELECT CASE WHEN x = 'Tim' THEN x ELSE x END FROM x;
SELECT x IN ('sad') FROM x;
SELECT x IN (CAST('beaming' AS pet_mood)) FROM x;
SELECT [x, x] FROM x;
SELECT x = x FROM x;
SELECT * FROM x WHERE (x = x) IS NULL;
SELECT CAST(x AS pet_mood) FROM x;
SELECT SUBSTRING(x, 1, 2) FROM x;
SELECT SUBSTRING(x, 1, 2) FROM x;
SELECT x FROM x WHERE x LIKE '%a%';
SELECT x FROM x WHERE x LIKE '%a%';
SELECT REGEXP_MATCHES(x, '.*a.*') FROM x;
CREATE TABLE x (x mood, x wealth);
INSERT INTO x VALUES ('happy', 'rich'), ('ok', 'poor');
SELECT x = x FROM x;
SELECT * FROM x WHERE x = x;
INSERT INTO x VALUES (NULL, 'very super rich');
SELECT * FROM x WHERE (x = x) IS NULL;
PRAGMA x;
SELECT x, x FROM x WHERE NOT x;
SELECT CAST('happy' AS mood);
SELECT x, x FROM x WHERE NOT x;
PRAGMA x;
CREATE TABLE x (x TEXT, x TEXT);
DROP TABLE x;
CREATE TABLE x AS (SELECT CAST(x AS TEXT) AS x FROM x);
CREATE TABLE x (x number_enum);
INSERT INTO x SELECT CAST(x AS TEXT) FROM x;
INSERT INTO x VALUES ('100');
DROP TABLE x;
DROP TABLE x;
CREATE TABLE x AS (SELECT CAST(x AS TEXT) AS x FROM x);
CREATE TABLE x (x number_enum);
INSERT INTO x SELECT CAST(x AS TEXT) FROM x;
DROP TABLE x;
DROP TABLE x;
CREATE TABLE x AS (SELECT CAST(x AS TEXT) AS x FROM x);
CREATE TABLE x (x number_enum);
INSERT INTO x SELECT CAST(x AS TEXT) FROM x;
DROP TABLE x;
DROP TABLE x;
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('1'), ('2'), ('1');
DROP TABLE x;
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('1'), ('3'), ('2');
SELECT ENUM_FIRST(CAST('1' AS number_enum));
PRAGMA x;
CREATE SCHEMA x.x;
SELECT CAST('happy' AS s1.mood);
SELECT CAST('happy' AS s1.mood);
CREATE SCHEMA x.x;
CREATE TABLE x.x (x foo.bar NOT NULL);
DROP SCHEMA x.x CASCADE;
CREATE SCHEMA "x".x;
CREATE TABLE x.x (x foo.bar NOT NULL);
DROP SCHEMA "x".x CASCADE;
CREATE SCHEMA "x".x;
CREATE TABLE x.x (x foo.bar NOT NULL);
DROP SCHEMA "x".x CASCADE;
CREATE SCHEMA "x".x;
CREATE TABLE x.x (x foo.bar NOT NULL);
DROP SCHEMA "x".x;
CREATE SCHEMA "x".x;
CREATE TABLE x.x (x foo.bar NOT NULL);
DROP SCHEMA "x".x;
CREATE SCHEMA "x".x;
PRAGMA x;
SET x = 'v0.10.2';
CREATE TABLE x (x INT, x STRUCT(x TEXT, x mood));
INSERT INTO x VALUES (1, ROW('Mark', 'happy'));
SELECT * FROM x;
SELECT * FROM x;
ALTER TABLE x DROP COLUMN x;
ALTER TABLE x DROP COLUMN x;
ALTER TABLE x ADD COLUMN x INT;
ALTER TABLE x ALTER COLUMN x SET DATA TYPE STRUCT(x TEXT, x mood);
SELECT * FROM x;
UPDATE x SET x = ROW('Mark', 'happy');
SELECT * FROM x;
DROP TABLE x;
PRAGMA x;
CREATE TABLE x (x TEXT, x car);
CREATE TABLE x (x TEXT, x mood);
INSERT INTO x VALUES ('Moe', 'happy');
INSERT INTO x VALUES ('Moe', 'diego');
SELECT * FROM x;
INSERT INTO x VALUES ('Pedro', 'ok');
INSERT INTO x VALUES ('Mark', 'sad');
SELECT * FROM x WHERE x = 'sad';
SELECT * FROM x WHERE x > 'sad';
SELECT * FROM x WHERE x < 'sad';
CREATE TABLE x (x TEXT, x mood);
INSERT INTO x VALUES ('Anne', 'happy');
INSERT INTO x VALUES ('Oogie Boogie', 'ok');
INSERT INTO x VALUES ('Mr. Fluffles McFluffingstein', NULL);
SELECT * FROM x;
SELECT x.x, x.x FROM x INNER JOIN x ON (x.x = x.x);
DROP TABLE x;
DROP TABLE x;
CREATE TABLE x (x TEXT, x mood);
CREATE TABLE x (x TEXT, x mood);
INSERT INTO x VALUES ('Alf o Eteimoso', 'happy'), ('Dr Zoidberg', 'sad');
ALTER TABLE x ADD COLUMN x intelligence;
SELECT * FROM x;
INSERT INTO x VALUES ('The Borg', 'ok', 'ehh');
SELECT * FROM x;
ALTER TABLE x ALTER COLUMN x SET DATA TYPE TEXT;
SELECT * FROM x;
CREATE TABLE x (x TEXT, x mood, x mood, x car_brand);
INSERT INTO x VALUES ('Pedro', 'ok', 'ok', 'Seat'), ('Mark', 'sad', 'happy', 'Fiets');
SELECT * FROM x WHERE x = x;
SELECT * FROM x WHERE x = 'ok';
INSERT INTO x VALUES ('Diego', 'sad', 'happy', 'Seat'), ('Tim', 'happy', 'sad', 'Fiets');
SELECT COUNT(*), x FROM x GROUP BY x ORDER BY ALL;
SELECT x, x FROM x ORDER BY x;
SELECT CAST(x AS TEXT) FROM x;
SELECT TRY_CAST(x AS TEXT) FROM x;
SELECT CAST('ok' AS mood);
SELECT TRY_CAST('ok' AS mood);
SELECT CAST('bla' AS mood);
SELECT TRY_CAST('bla' AS mood);
CREATE TABLE x (x TEXT, x TEXT);
INSERT INTO x VALUES ('Pedro', 'ok'), ('Mark', 'sad');
SELECT x, CAST(x AS mood) FROM x WHERE x = 'sad';
CREATE TABLE x (x midenum);
INSERT INTO x VALUES ('0');
CREATE TABLE x (x midenum_2);
INSERT INTO x VALUES ('0');
CREATE TABLE x (x large_enum);
INSERT INTO x VALUES ('Floccinaucinihilipilification'), ('Floccinaucinihilipilification'), ('Honorificabilitudinitatibus'), ('Floccinaucinihilipilification'), ('Antidisestablishmentarianism');
SELECT * FROM x;
PRAGMA x;
CREATE TEMPORARY TABLE x (x TEXT, x mood);
INSERT INTO x VALUES ('bla', 'sad'), ('bla_2', 'happy');
SELECT COUNT(*) FROM x;
INSERT INTO x VALUES ('bla', 'invalid');
INSERT INTO x VALUES ('bla', 'sad'), ('bla_2', 'happy');
SELECT COUNT(*) FROM x;
INSERT INTO x VALUES ('bla', 'invalid');
CREATE TABLE x AS SELECT x AS x FROM x;
CREATE TABLE x (x enum_numstrings);
INSERT INTO x VALUES ('1'), ('2'), ('3');
SELECT x.x, COUNT(*) AS x FROM x, x WHERE x.x <> x.x GROUP BY x.x ORDER BY x.x;
INSERT INTO x VALUES ('1'), ('2');
SELECT * FROM x, x WHERE x.x = x.x ORDER BY x.x;
DELETE FROM x WHERE 1 = 1;
INSERT INTO x VALUES (NULL), ('1');
SELECT * FROM x, x ORDER BY x.x, x.x NULLS FIRST;
INSERT INTO x VALUES ('2'), ('3'), ('4');
SELECT * FROM x, x WHERE NOT x.x IN ('2', '3', '4') ORDER BY x.x, x.x NULLS FIRST;
INSERT INTO x VALUES ('1'), ('2'), ('3');
DROP TABLE x;
DROP TABLE x;
CREATE TABLE x AS SELECT x AS x FROM x;
CREATE TABLE x (x enum_strings);
INSERT INTO x VALUES ('hello'), ('goodbye'), ('mr duck'), ('mr duck'), ('hello'), ('goodbye');
SELECT * FROM x, x WHERE x.x = x.x;
SELECT * FROM x, x WHERE CAST(x.x AS TEXT) = x.x;
DROP TABLE x;
DROP TABLE x;
CREATE TABLE x AS SELECT CAST(CAST((x % 4 + 1) AS TEXT) AS new_type) AS x FROM x;
SELECT x FROM x, x WHERE x.x = x.x;
SELECT COUNT(*) FROM x, x WHERE CAST(x.x AS TEXT) < x.x;
SELECT COUNT(*) FROM x, x WHERE CAST(x.x AS TEXT) <= x.x;
SELECT COUNT(*) FROM x, x WHERE CAST(x.x AS TEXT) > x.x;
SELECT COUNT(*) FROM x, x WHERE CAST(x.x AS TEXT) >= x.x;
DROP TABLE x;
DROP TABLE x;
CREATE TABLE x AS SELECT x, x, x, x, x, x, x, x, x, x, x FROM x;
CREATE TABLE x AS SELECT * FROM (VALUES (CAST('294247-01-10 04:00:54.775806' AS new_type)), (CAST('83 years 3 months 999 days 00:16:39.999999' AS new_type)), (CAST('1677-09-21 00:12:43.145225' AS new_type)), (CAST('other enum type' AS new_type)), (CAST('another 1' AS new_type)), (CAST('~~~' AS new_type))) AS x;
SELECT COUNT(*) FROM x, x WHERE x.x = x.x;
SELECT COUNT(*) FROM x, x WHERE x.x = x.x;
SELECT COUNT(*) FROM x, x WHERE x.x = x.x;
SELECT COUNT(*) FROM x, x WHERE x.x = x.x;
SELECT COUNT(*) FROM x, x WHERE x.x = x.x;
SELECT COUNT(*) FROM x, x WHERE x.x = x.x;
SELECT COUNT(*) FROM x, x WHERE x.x = x.x;
SELECT COUNT(*) FROM x, x WHERE x.x = x.x;
SELECT COUNT(*) FROM x, x WHERE x.x = x.x;
SELECT COUNT(*) FROM x, x WHERE x.x = x.x;
DROP TABLE x;
DROP TABLE x;
CREATE TABLE x AS SELECT * FROM (VALUES (CAST('110010' AS BIT)), (CAST('110' AS BIT)), (CAST('110110110011' AS BIT))) AS x;
CREATE TABLE x AS SELECT * FROM (VALUES (CAST('11001010110' AS enum_bits)), (CAST('110' AS enum_bits)), (CAST('0101001010101' AS enum_bits)), (CAST('some enum val that cannot be cast to bit' AS enum_bits))) AS x;
SELECT COUNT(*) FROM x, x WHERE x.x = x.x;
SET x = 'nulls_first';
SET x = 'nulls_first';
SET x = 'nulls_first';
INSERT INTO x VALUES ('NAN'), (1), ('infinity'), ('-infinity'), (-1), (NULL);
SELECT x FROM x ORDER BY x;
SELECT x FROM x ORDER BY x DESC;
SELECT x FROM x ORDER BY x DESC LIMIT 2;
SELECT x FROM x ORDER BY x LIMIT 2;
SELECT x FROM x ORDER BY x LIMIT 2;
SELECT x FROM x ORDER BY x LIMIT 2;
SELECT x FROM x ORDER BY x LIMIT 2;
SELECT x FROM x ORDER BY x DESC LIMIT 4;
SELECT x FROM x ORDER BY x LIMIT 4;
SELECT COUNT(*) FROM x WHERE x > 0;
SELECT COUNT(*) FROM x WHERE x < 0;
PRAGMA x;
SELECT [CAST('nan' AS DOUBLE)];
SELECT UNNEST([CAST('nan' AS DOUBLE)]);
SELECT {'x': CAST('nan' AS DOUBLE)};
SELECT ({'x': CAST('nan' AS DOUBLE)}).x;
SELECT CAST(251658240 AS INT128) * CAST(251658240 AS INT128);
SELECT CAST(251658240 AS INT128) * CAST(1080863910568919040 AS INT128);
SELECT CAST(251658240 AS INT128) * CAST(4642275147320176030871715840 AS INT128);
SELECT CAST(251658240 AS INT128) * CAST(19938419936773738093557105904205168640 AS INT128);
SELECT CAST(1080863910568919040 AS INT128) * CAST(251658240 AS INT128);
SELECT CAST(1080863910568919040 AS INT128) * CAST(1080863910568919040 AS INT128);
SELECT CAST(1080863910568919040 AS INT128) * CAST(4642275147320176030871715840 AS INT128);
SELECT CAST(1080863910568919040 AS INT128) * CAST(19938419936773738093557105904205168640 AS INT128);
SELECT CAST(4642275147320176030871715840 AS INT128) * CAST(251658240 AS INT128);
SELECT CAST(4642275147320176030871715840 AS INT128) * CAST(1080863910568919040 AS INT128);
SELECT CAST(4642275147320176030871715840 AS INT128) * CAST(4642275147320176030871715840 AS INT128);
SELECT CAST(4642275147320176030871715840 AS INT128) * CAST(19938419936773738093557105904205168640 AS INT128);
SELECT CAST(19938419936773738093557105904205168640 AS INT128) * CAST(251658240 AS INT128);
SELECT CAST(19938419936773738093557105904205168640 AS INT128) * CAST(1080863910568919040 AS INT128);
SELECT CAST(19938419936773738093557105904205168640 AS INT128) * CAST(4642275147320176030871715840 AS INT128);
SELECT CAST(19938419936773738093557105904205168640 AS INT128) * CAST(19938419936773738093557105904205168640 AS INT128);
SELECT CAST(85070591730234615865843651857942052863 AS INT128) * CAST(2 AS INT128);
SELECT CAST(85070591730234615865843651857942052864 AS INT128) * CAST(2 AS INT128);
SELECT CAST(85070591730234615865843651857942052865 AS INT128) * CAST(2 AS INT128);
SELECT CAST(19807040628566084398385987583 AS INT128) * CAST(8589934592 AS INT128);
SELECT CAST(19807040628566084398385987584 AS INT128) * CAST(8589934592 AS INT128);
SELECT CAST(36893488147419103231 AS INT128) * CAST(4611686018427387904 AS INT128);
SELECT CAST(36893488147419103232 AS INT128) * CAST(4611686018427387904 AS INT128);
SELECT CAST(2 AS INT128) * CAST(85070591730234615865843651857942052863 AS INT128);
SELECT CAST(2 AS INT128) * CAST(85070591730234615865843651857942052864 AS INT128);
SELECT CAST(2 AS INT128) * CAST(85070591730234615865843651857942052865 AS INT128);
SELECT CAST(8589934592 AS INT128) * CAST(19807040628566084398385987583 AS INT128);
SELECT CAST(8589934592 AS INT128) * CAST(19807040628566084398385987584 AS INT128);
SELECT CAST(4611686018427387904 AS INT128) * CAST(36893488147419103231 AS INT128);
SELECT CAST(4611686018427387904 AS INT128) * CAST(36893488147419103232 AS INT128);
SELECT CAST(10376293541461622783 AS INT128) * CAST(10376293541461622783 AS INT128);
SELECT CAST(10376293541461622783 AS INT128) * CAST(10376293541461622783 AS INT128);
SELECT CAST(17293822569102704639 AS INT128) * CAST(10376293541461622783 AS INT128);
PRAGMA x;
SELECT SUM(170141183460469231731687303715884105727) FROM x;
SELECT SUM(x) FROM (VALUES (170141183460469231731687303715884105727), (170141183460469231731687303715884105727)) AS x;
SELECT AVG(170141183460469231731687303715884105727) FROM x;
SELECT AVG(x) FROM (VALUES (170141183460469231731687303715884105727), (170141183460469231731687303715884105727)) AS x;
PRAGMA x;
SELECT CAST('170141183460469231731687303715884105728' AS INT128);
SELECT CAST(CAST('170141183460469231731687303715884105728' AS DOUBLE) AS INT128);
SELECT CAST('-170141183460469231731687303715884105729' AS INT128);
SELECT CAST(CAST('-170141183460469231731687303715884105729' AS DOUBLE) AS INT128);
SELECT TRY_CAST('170141183460469231731687303715884105728' AS INT128);
SELECT TRY_CAST(CAST('170141183460469231731687303715884105728' AS DOUBLE) AS INT128);
SELECT TRY_CAST('-170141183460469231731687303715884105729' AS INT128);
SELECT TRY_CAST(CAST('-170141183460469231731687303715884105729' AS DOUBLE) AS INT128);
PRAGMA x;
CREATE TABLE x (x INT, x INT128);
INSERT INTO x VALUES (1, 42.0), (2, 1267650600228229401496703205376), (2, -439847238974238975238975), (1, '-12');
SELECT MIN(x), MAX(x), SUM(x), FIRST(x), LAST(x) FROM x;
SELECT x, MIN(x), MAX(x), SUM(x), FIRST(x), LAST(x) FROM x GROUP BY x ORDER BY 1;
PRAGMA x = 1;
SELECT FIRST(x), LAST(x) FROM x;
SELECT x, FIRST(x), LAST(x) FROM x GROUP BY x ORDER BY 1;
PRAGMA x;
SELECT CAST(10000000000000000000 AS INT128) + CAST(100 AS TINYINT), CAST(10000000000000000000 AS INT128) + CAST(100 AS SMALLINT), CAST(10000000000000000000 AS INT128) + CAST(100 AS INT), CAST(10000000000000000000 AS INT128) + CAST(100 AS BIGINT);
SELECT CAST(100 AS INT128) + 0.5;
SELECT COS(CAST(100 AS INT128));
SELECT CONCAT('hello number ', CAST(100 AS INT128));
PRAGMA x;
SELECT CAST(1 AS INT128) << 3;
SELECT CAST(27 AS INT128) << 0;
SELECT -CAST(27 AS INT128) << 1;
SELECT CAST(1 AS INT128) << 50, CAST(1 AS INT128) << 100;
SELECT (((((CAST(1 AS INT128) << 50) << 50) << 2) << 3) << 8), (CAST(1 AS INT128)) << 50 << 20 << 7 << 18 << 3 << 6 << 9;
SELECT CAST(1 AS INT128) << 64;
SELECT CAST(1 AS INT128) << 200;
SELECT CAST('1329227995784915872903807060280344576' AS INT128) << 50;
SELECT CAST(27 AS INT128) << -1;
SELECT CAST(100 AS INT128) << CAST('1329227995784915872903807060280344576' AS INT128);
SELECT CAST(8 AS INT128) >> 3;
SELECT CAST(27 AS INT128) >> 0;
SELECT -CAST(27 AS INT128) >> 1;
SELECT CAST(27 AS INT128) >> -1;
SELECT (CAST(1 AS INT128) << 100) >> 50, (CAST(1 AS INT128) << 120) >> 108;
SELECT CAST('1329227995784915872903807060280344576' AS INT128) >> 200;
SELECT -11367237885269962203896920952509169001 >> 200;
SELECT CAST('1329227995784915872903807060280344576' AS INT128) >> 64;
SELECT -11367237885269962203896920952509169001 >> 64;
SELECT CAST('1329227995784915872903807060280344576' AS INT128) >> 96;
SELECT -11367237885269962203896920952509169001 >> 96;
SELECT CAST('1329227995784915872903807060280344576' AS INT128) >> 4 >> 5 >> 7 >> 9 >> 12 >> 13;
SELECT -11367237885269962203896920952509169001 >> 4 >> 5 >> 7 >> 9 >> 12 >> 13;
SELECT CAST(1 AS INT128) & CAST(3 AS INT128);
SELECT CAST(51290852742897895128414 AS INT128) & CAST(4923847238975289723895239078235 AS INT128);
SELECT CAST(1 AS INT128) | CAST(2 AS INT128);
SELECT CAST(51290852742897895128414 AS INT128) | CAST(4923847238975289723895239078235 AS INT128);
SELECT XOR(CAST(1 AS INT128), CAST(3 AS INT128));
SELECT XOR(CAST(51290852742897895128414 AS INT128), CAST(4923847238975289723895239078235 AS INT128));
SELECT ~(CAST(1 AS INT128));
SELECT ~(CAST(4923847238975289723895239078235 AS INT128));
SELECT CAST(1 AS INT128) >> 1000;
SELECT 1 >> CAST(170141183460469231731687303715884105727 AS INT128);
SELECT CAST(1 AS INT128) << 1000;
SELECT 1 << CAST(170141183460469231731687303715884105727 AS INT128);
SELECT CAST('7' AS INT128), CAST('130' AS INT128), CAST('924829852' AS INT128);
SELECT CAST('0' AS INT128), CAST('-0' AS INT128);
SELECT CAST('-7' AS INT128), CAST('-130' AS INT128), CAST('-924829852' AS INT128);
SELECT CAST('10000000000000000000000000000' AS INT128);
SELECT CAST('1267650600228229401496703205376' AS INT128), CAST('17014118346046923173168730371588410572' AS INT128);
SELECT CAST('-1267650600228229401496703205376' AS INT128), CAST('-17014118346046923173168730371588410572' AS INT128);
SELECT CAST('1701411834604692317316873037158841057200' AS INT128);
SELECT CAST('-1701411834604692317316873037158841057200' AS INT128);
SELECT CAST('170141183460469231731687303715884105727' AS INT128), CAST('-170141183460469231731687303715884105728' AS INT128);
SELECT CAST('170141183460469231731687303715884105728' AS INT128);
SELECT CAST('-170141183460469231731687303715884105729' AS INT128);
SELECT CAST(CAST(42 AS TINYINT) AS INT128), CAST(CAST(42 AS SMALLINT) AS INT128), CAST(CAST(42 AS INT) AS INT128), CAST(CAST(42 AS BIGINT) AS INT128), CAST(CAST(42 AS REAL) AS INT128), CAST(CAST(42 AS DOUBLE) AS INT128);
SELECT CAST(CAST((-42) AS TINYINT) AS INT128), CAST(CAST((-42) AS SMALLINT) AS INT128), CAST(CAST((-42) AS INT) AS INT128), CAST(CAST((-42) AS BIGINT) AS INT128), CAST(CAST((-42) AS REAL) AS INT128), CAST(CAST((-42) AS DOUBLE) AS INT128);
SELECT CAST(CAST(42 AS INT128) AS TINYINT), CAST(CAST(42 AS INT128) AS SMALLINT), CAST(CAST(42 AS INT128) AS INT), CAST(CAST(42 AS INT128) AS BIGINT), CAST(CAST(42 AS INT128) AS REAL), CAST(CAST(42 AS INT128) AS DOUBLE);
SELECT CAST(CAST((-42) AS INT128) AS TINYINT), CAST(CAST((-42) AS INT128) AS SMALLINT), CAST(CAST((-42) AS INT128) AS INT), CAST(CAST((-42) AS INT128) AS BIGINT), CAST(CAST((-42) AS INT128) AS REAL), CAST(CAST((-42) AS INT128) AS DOUBLE);
SELECT CAST(CAST(1000 AS INT128) AS TINYINT);
SELECT CAST(CAST(128 AS INT128) AS TINYINT);
SELECT -CAST(CAST(128 AS INT128) AS TINYINT);
SELECT CAST(CAST(127 AS INT128) AS TINYINT), -CAST(CAST(127 AS INT128) AS TINYINT);
SELECT CAST(CAST(100000 AS INT128) AS SMALLINT);
SELECT CAST(CAST(32768 AS INT128) AS SMALLINT);
SELECT -CAST(CAST(32768 AS INT128) AS SMALLINT);
SELECT CAST(CAST(32767 AS INT128) AS SMALLINT), -CAST(CAST(32767 AS INT128) AS SMALLINT);
SELECT CAST(CAST(100000000000 AS INT128) AS INT);
SELECT CAST(CAST(2147483648 AS INT128) AS INT);
SELECT -CAST(CAST(2147483648 AS INT128) AS INT);
SELECT CAST(CAST(2147483647 AS INT128) AS INT), -CAST(CAST(2147483647 AS INT128) AS INT);
SELECT CAST(CAST(10000000000000000000 AS INT128) AS BIGINT);
SELECT CAST(CAST('9223372036854775808' AS INT128) AS BIGINT);
SELECT CAST(CAST('-9223372036854775809' AS INT128) AS BIGINT);
SELECT CAST(CAST(9223372036854775807 AS INT128) AS BIGINT), CAST(CAST((-9223372036854775808) AS INT128) AS BIGINT);
SELECT CAST(CAST(1e100 AS REAL) AS INT128);
SELECT CAST(CAST(1e100 AS DOUBLE) AS INT128);
SELECT TYPEOF(10), TYPEOF(10000000000), TYPEOF(170141183460469231731687303715884105727), TYPEOF(170141183460469231731687303715884105728), TYPEOF(170141183460469231731687303715884105728000);
SELECT 1e30, 1e100, 1e-1;
SELECT TYPEOF(1e30), TYPEOF(1e100), TYPEOF(1e-1);
PRAGMA x;
SELECT CAST('170141183460469231731687303715884105700e0' AS INT128);
SELECT CAST('170141183460469231731687303715884105727e0' AS INT128);
SELECT CAST('170141183460469231731687303715884105735e0' AS INT128);
SELECT CAST('1.7e39' AS INT128);
SELECT CAST('2e38' AS INT128);
PRAGMA x;
SELECT ABS(CAST(1 AS INT128)), ABS(CAST('-1329227995784915872903807060280344576' AS INT128)), ABS(CAST(0 AS INT128));
SELECT SIGN(CAST(1 AS INT128)), SIGN(CAST('-1329227995784915872903807060280344576' AS INT128)), SIGN(CAST(0 AS INT128));
SELECT ROUND(CAST(1 AS INT128), 0), ROUND(CAST('-1329227995784915872903807060280344576' AS INT128), 0), ROUND(CAST(0 AS INT128), 0);
SELECT FLOOR(CAST(1 AS INT128)), FLOOR(CAST('-1329227995784915872903807060280344576' AS INT128)), FLOOR(CAST(0 AS INT128));
SELECT CEIL(CAST(1 AS INT128)), CEIL(CAST('-1329227995784915872903807060280344576' AS INT128)), CEIL(CAST(0 AS INT128));
SELECT LEAST(CAST(1 AS INT128), CAST('-1329227995784915872903807060280344576' AS INT128), CAST(0 AS INT128));
SELECT GREATEST(CAST(1 AS INT128), CAST('-1329227995784915872903807060280344576' AS INT128), CAST(0 AS INT128));
SET x = 'nulls_first';
PRAGMA x;
SELECT CAST(NULL AS INT128);
CREATE TABLE x (x INT, x INT128);
INSERT INTO x VALUES (1, NULL), (1, 1), (1, 2);
SELECT x, FIRST(x), LAST(x) FROM x WHERE x IS NULL GROUP BY x;
SELECT x, SUM(x) FROM x GROUP BY x ORDER BY 1;
SELECT x, x.x, x.x FROM x AS x JOIN x AS x USING (x) WHERE x.x IS NULL AND x.x IS NULL;
SELECT (SELECT x.x) FROM x AS x ORDER BY 1;
SELECT NOT x.x IN (SELECT x.x + x.x FROM x AS x) FROM x AS x ORDER BY 1;
PRAGMA x;
CREATE TABLE x (x INT128);
INSERT INTO x VALUES (CAST(42 AS INT128)), (CAST('1267650600228229401496703205376' AS INT128));
SELECT CAST(x AS INT) FROM x WHERE x < 100;
SELECT COUNT(*) FROM x WHERE x = CAST(42 AS INT128);
SELECT COUNT(*) FROM x WHERE x <> CAST('1267650600228229401496703205376' AS INT128);
SELECT COUNT(*) FROM x WHERE x < CAST('1267650600228229401496703205376' AS INT128);
SELECT COUNT(*) FROM x WHERE x <= CAST('1267650600228229401496703205376' AS INT128);
SELECT COUNT(*) FROM x WHERE x > CAST('1267650600228229401496703205375' AS INT128);
SELECT COUNT(*) FROM x WHERE x >= CAST(42 AS INT128);
CREATE TABLE x (x INT128);
SELECT * FROM x JOIN x USING (x);
SELECT * FROM x AS x JOIN x AS x ON x.x <> x.x;
SELECT * FROM x AS x JOIN x AS x ON x.x >= x.x ORDER BY 1 LIMIT 2;
PRAGMA x;
SELECT INTERVAL '2' DAYS;
SELECT INTERVAL (2) DAY;
SELECT INTERVAL (1 + 1) DAYS;
SELECT INTERVAL '2' DAYS;
SELECT TO_YEARS(2), TO_MONTHS(2), TO_DAYS(2), TO_HOURS(2), TO_MINUTES(2), TO_SECONDS(2);
SELECT INTERVAL (x) DAY FROM x AS x;
SELECT INTERVAL (x + 1) DAY FROM x AS x;
SELECT INTERVAL '2' YEARS, INTERVAL '2' YEAR;
SELECT INTERVAL '2' MONTHS, INTERVAL '2' MONTH;
SELECT INTERVAL '2' DAYS, INTERVAL '2' DAY;
SELECT INTERVAL '2' HOURS, INTERVAL '2' HOUR;
SELECT INTERVAL '2' MINUTES, INTERVAL '2' MINUTE;
SELECT INTERVAL '2' SECONDS, INTERVAL '2' SECOND;
SELECT INTERVAL '2 10' YEARS TO MONTHS;
SELECT INTERVAL '2 10' DAYS TO HOURS;
SELECT INTERVAL '12 15:06' DAYS TO MINUTES;
SELECT INTERVAL '12 15:06:04.123' DAYS TO SECONDS;
SELECT INTERVAL '12:30' HOURS TO MINUTES;
SELECT INTERVAL '15:06:04.123' HOURS TO SECONDS;
SELECT INTERVAL '12:30' MINUTES TO SECONDS;
SELECT INTERVAL '99999999999999' YEARS;
SELECT INTERVAL '214748364' YEARS;
SELECT INTERVAL '9223372036854775807' HOURS;
SELECT INTERVAL '9223372036854775807' MINUTES;
SELECT INTERVAL '9223372036854775807' SECONDS;
SELECT INTERVAL '9223372036854775807' MILLISECONDS;
SELECT INTERVAL '3' MILLISECOND, INTERVAL '3' MILLISECONDS;
SELECT INTERVAL '3' MICROSECOND, INTERVAL '3' MICROSECONDS;
SELECT (7 * INTERVAL '3' DAY), (7 * INTERVAL '3' DAY);
SELECT INTERVAL '3' DECADE, INTERVAL '3' DECADES;
SELECT INTERVAL '3' CENTURY, INTERVAL '3' CENTURIES;
SELECT INTERVAL '3' MILLENNIUM, INTERVAL '3' MILLENNIA;
SELECT CAST('1992-01-01 12:00:00' AS TIMESTAMP) + INTERVAL '3' MICROSECONDS + INTERVAL '3' MILLISECONDS;
SELECT CAST('1992-01-01 12:00:00' AS TIMESTAMP) + (INTERVAL '3' MICROSECONDS + INTERVAL '3' MILLISECONDS);
SELECT INTERVAL '10.123' SECOND;
SELECT CAST('47.210' AS INTERVAL);
SELECT CAST('-47.210' AS INTERVAL);
SELECT CAST('47.210  ' AS INTERVAL);
SELECT CAST('31.123456789' AS INTERVAL);
SELECT CAST('47.210 5' AS INTERVAL);
SELECT INTERVAL '1.5' MICROSECOND;
SELECT INTERVAL '1.5' MILLISECOND;
SELECT INTERVAL '1.5' SECOND;
SELECT INTERVAL '1.5' MINUTE;
SELECT INTERVAL '1.5' HOUR;
SELECT INTERVAL '1.5' DAY;
SELECT (7 * INTERVAL '1.5' DAY);
SELECT INTERVAL '1.5' MONTH;
SELECT INTERVAL '1.5' YEAR;
SELECT INTERVAL '1.5' DECADE;
SELECT INTERVAL '1.5' CENTURY;
SELECT INTERVAL '1.5' MILLENNIA;
SELECT INTERVAL '-1.5' MICROSECOND;
SELECT INTERVAL '-1.5' MILLISECOND;
SELECT INTERVAL '-1.5' SECOND;
SELECT INTERVAL '-1.5' MINUTE;
SELECT INTERVAL '-1.5' HOUR;
SELECT INTERVAL '-1.5' DAY;
SELECT (7 * INTERVAL '-1.5' DAY);
SELECT INTERVAL '-1.5' MONTH;
SELECT INTERVAL '-1.5' YEAR;
SELECT INTERVAL '-1.5' DECADE;
SELECT INTERVAL '-1.5' CENTURY;
SELECT INTERVAL '-1.5' MILLENNIA;
SELECT CAST('1.5 MICROSECOND' AS INTERVAL);
SELECT CAST('1.5 MILLISECOND' AS INTERVAL);
SELECT CAST('1.5 SECOND' AS INTERVAL);
SELECT CAST('1.5 MINUTE' AS INTERVAL);
SELECT CAST('1.5 HOUR' AS INTERVAL);
SELECT CAST('1.5 DAY' AS INTERVAL);
SELECT CAST('1.5 WEEK' AS INTERVAL);
SELECT CAST('1.5 MONTH' AS INTERVAL);
SELECT CAST('1.5 QUARTER' AS INTERVAL);
SELECT CAST('1.5 YEAR' AS INTERVAL);
SELECT CAST('1.5 DECADE' AS INTERVAL);
SELECT CAST('1.5 CENTURY' AS INTERVAL);
SELECT CAST('1.5 MILLENIUM' AS INTERVAL);
SELECT CAST('-1.5 MICROSECOND' AS INTERVAL);
SELECT CAST('-1.5 MILLISECOND' AS INTERVAL);
SELECT CAST('-1.5 SECOND' AS INTERVAL);
SELECT CAST('-1.5 MINUTE' AS INTERVAL);
SELECT CAST('-1.5 HOUR' AS INTERVAL);
SELECT CAST('-1.5 DAY' AS INTERVAL);
SELECT CAST('-1.5 WEEK' AS INTERVAL);
SELECT CAST('-1.5 MONTH' AS INTERVAL);
SELECT CAST('-1.5 QUARTER' AS INTERVAL);
SELECT CAST('-1.5 YEAR' AS INTERVAL);
SELECT CAST('-1.5 DECADE' AS INTERVAL);
SELECT CAST('-1.5 CENTURY' AS INTERVAL);
SELECT CAST('-1.5 MILLENIUM' AS INTERVAL);
PRAGMA x;
SELECT CAST('   ' AS INTERVAL);
SELECT CAST('AAAA' AS INTERVAL);
SELECT CAST('00:00:' AS INTERVAL);
SELECT CAST('3 doopiedoos' AS INTERVAL);
SELECT CAST('3 years 2 doy' AS INTERVAL);
SELECT CAST('3 yearweek' AS INTERVAL);
SELECT CAST(NULL AS INTERVAL);
SELECT TRY_CAST('   ' AS INTERVAL);
SELECT TRY_CAST('AAAA' AS INTERVAL);
SELECT TRY_CAST('00:00:' AS INTERVAL);
SELECT TRY_CAST('3 doopiedoos' AS INTERVAL);
SELECT TRY_CAST('3 years 2 doy' AS INTERVAL);
SELECT TRY_CAST(NULL AS INTERVAL);
PRAGMA x;
SELECT INTERVAL '2' YEARS;
SELECT INTERVAL '2' YEARS;
SELECT INTERVAL '2Y 1 M';
SELECT INTERVAL '2Y 1 month 1 M 3S 20mS 16uS';
SELECT INTERVAL '2Y 1 month 02:01:03.020016';
SELECT INTERVAL '2Y 1 month 02:01:03.020016';
SELECT INTERVAL '2 yr 1 mon 1 min 3 sec 20 msec 16 usec';
SELECT INTERVAL '2 yrs 1 mons 1 mins 3 secs 20 msecs 16 usecs';
SELECT INTERVAL '-2Y 4 days 5 Hours 1 MinUteS 3S 20mS 16uS';
SELECT INTERVAL '-2Y 4 days 5 Hours 1 MinUteS 3S 20mS 16uS';
SELECT INTERVAL '-2yr 4 d 5 hr 1 min 3 second 20 msecond 16 usecond';
SELECT INTERVAL '-2yr 4 d 5 hr 1 min 3 second 20 msecond 16 usecond';
SELECT INTERVAL '-2yr 4 d 5 hr 1 min 3 second 20 msecond 16 usecond';
SELECT INTERVAL '-2yr 4 d 5 hr 1 min 3 second 20 msecond 16 usecond';
SELECT INTERVAL '@2mons 1H';
SELECT INTERVAL '05:12:34.567890' AS x;
SELECT INTERVAL '-05:12:34.567890' AS x;
SELECT (CAST('35:10:00' AS INTERVAL));
SELECT CAST('876:54:32.101234' AS INTERVAL), CAST('-876:54:32.101234' AS INTERVAL);
SELECT CAST('999999999:54:32.101234' AS INTERVAL), CAST('-999999999:54:32.101234' AS INTERVAL);
SELECT CAST('9999999999:54:32.101234' AS INTERVAL);
SELECT CAST('-9999999999:54:32.101234' AS INTERVAL);
SELECT INTERVAL 'P2MT1H1M';
SELECT INTERVAL '00' T;
SELECT INTERVAL '90' DAY;
SELECT INTERVAL '90' YEAR;
SELECT (90 * INTERVAL '90' DAY);
SELECT INTERVAL '90' MONTH;
SELECT INTERVAL '90' SECOND;
SELECT INTERVAL '90' MINUTE;
SELECT INTERVAL '90' HOUR;
SELECT INTERVAL '2' MONTH + INTERVAL '1 month 3 days';
SELECT INTERVAL '2' MONTH - INTERVAL '1 month 3 days';
SELECT INTERVAL '2' MONTH * INTERVAL '1 month 3 days';
SELECT INTERVAL '1 year 2 days 2 seconds' * 2;
SELECT 2 * INTERVAL '1 year 2 days 2 seconds';
SELECT INTERVAL '1 year 2 days 2 seconds' / 2;
SELECT 2 / INTERVAL '1 year 2 days 2 seconds';
SELECT INTERVAL '1 year 2 days 2 seconds' / 0;
SELECT INTERVAL '';
SELECT INTERVAL '   	';
SELECT INTERVAL 'years';
SELECT INTERVAL '-years';
SELECT INTERVAL 'aergjaerghiuaehrgiuhaerg';
SELECT INTERVAL '100000000000000000' YEAR;
SELECT INTERVAL '100000000000000000' MONTHS;
SELECT INTERVAL '4294967296' MONTHS;
SELECT INTERVAL '1294967296' MONTHS;
SELECT INTERVAL '1294967296months 1294967296months';
SELECT INTERVAL '1294967296months -1294967296months';
SELECT INTERVAL '-1294967296months -1294967296months';
SELECT INTERVAL '100000000000000000' DAYS;
SELECT INTERVAL '1294967296days 1294967296days';
SELECT INTERVAL '100000000000000000000' MSECS;
SELECT INTERVAL '100000000000000000' HOURS;
SELECT INTERVAL '2562047788' HOURS;
SELECT INTERVAL '2562047788 hours 2562047788 hours';
SELECT INTERVAL '9223372036854775' MSECS;
SELECT INTERVAL '9223372036854775' MSECS;
SELECT (7 * INTERVAL '1' DAY);
SELECT INTERVAL '1 millennium 2 centuries 1 decade 3 quarter';
SELECT INTERVAL '1 millenniums 2 century 1 dec 3 quarter';
SELECT INTERVAL '1 mil 2 cent 1 decs 3 quarter';
SELECT INTERVAL '1 mils 2 c 1 decades 3 quarter';
SELECT INTERVAL '-2147483647 months -2147483647 days -9223372036854775msecs';
SELECT INTERVAL '2147483647 months 2147483647 days 9223372036854775msecs';
SELECT INTERVAL '9223372036854775810' MSECS;
SELECT INTERVAL '9223372036854775810' MSECS;
SELECT INTERVAL 'aa' DAY;
SELECT INTERVAL '100' MONTHS AS x;
SELECT CAST('100' AS INTERVAL);
SELECT CAST('100 unknowns' AS INTERVAL);
SELECT CAST('100 months a' AS INTERVAL);
SELECT CAST('100 months axo' AS INTERVAL);
SELECT CAST('100 months agb' AS INTERVAL);
SELECT CAST('100 months agob' AS INTERVAL);
PRAGMA x;
SELECT CAST('1992-03-01' AS DATE) + INTERVAL '1' YEAR;
SELECT CAST('1992-03-01' AS DATE) + INTERVAL '0' MONTH;
SELECT CAST('1992-03-01' AS DATE) - INTERVAL '0' MONTH;
SELECT CAST('1992-03-01' AS DATE) + INTERVAL '1' MONTH;
SELECT CAST('1992-03-01' AS DATE) - INTERVAL '1' MONTH;
SELECT CAST('1992-03-01' AS DATE) + INTERVAL '2' MONTH;
SELECT CAST('1992-03-01' AS DATE) - INTERVAL '2' MONTH;
SELECT CAST('1992-03-01' AS DATE) + INTERVAL '3' MONTH;
SELECT CAST('1992-03-01' AS DATE) - INTERVAL '3' MONTH;
SELECT CAST('1992-03-01' AS DATE) + INTERVAL '4' MONTH;
SELECT CAST('1992-03-01' AS DATE) - INTERVAL '4' MONTH;
SELECT CAST('1992-03-01' AS DATE) + INTERVAL '5' MONTH;
SELECT CAST('1992-03-01' AS DATE) - INTERVAL '5' MONTH;
SELECT CAST('1992-03-01' AS DATE) + INTERVAL '6' MONTH;
SELECT CAST('1992-03-01' AS DATE) - INTERVAL '6' MONTH;
SELECT CAST('1992-03-01' AS DATE) + INTERVAL '7' MONTH;
SELECT CAST('1992-03-01' AS DATE) - INTERVAL '7' MONTH;
SELECT CAST('1992-03-01' AS DATE) + INTERVAL '8' MONTH;
SELECT CAST('1992-03-01' AS DATE) - INTERVAL '8' MONTH;
SELECT CAST('1992-03-01' AS DATE) + INTERVAL '9' MONTH;
SELECT CAST('1992-03-01' AS DATE) - INTERVAL '9' MONTH;
SELECT CAST('1992-03-01' AS DATE) + INTERVAL '10' MONTH;
SELECT CAST('1992-03-01' AS DATE) - INTERVAL '10' MONTH;
SELECT CAST('1992-03-01' AS DATE) + INTERVAL '11' MONTH;
SELECT CAST('1992-03-01' AS DATE) - INTERVAL '11' MONTH;
SELECT CAST('1992-03-01' AS DATE) + INTERVAL '12' MONTH;
SELECT CAST('1992-03-01' AS DATE) - INTERVAL '12' MONTH;
SELECT CAST('1992-03-01' AS DATE) + INTERVAL '10' DAY;
SELECT CAST('1992-03-01' AS DATE) - INTERVAL '10' DAY;
SELECT CAST('1993-03-01' AS DATE) - INTERVAL '10' DAY;
SELECT CAST('1993-03-01' AS DATE) + INTERVAL '1' SECOND;
SELECT CAST('1993-03-01' AS DATE) - INTERVAL '1' SECOND;
SELECT CAST('1993-03-01' AS DATE) + INTERVAL '1000000' SECOND;
SELECT CAST('1993-03-01' AS DATE) - INTERVAL '1000000' SECOND;
SELECT INTERVAL '1000000' SECOND - CAST('1993-03-01' AS DATE);
SELECT CAST('10:00:00' AS TIME) + INTERVAL '5' SECOND;
SELECT INTERVAL '5' SECOND + CAST('10:00:00' AS TIME);
SELECT CAST('10:00:00' AS TIME) - INTERVAL '5' SECOND;
SELECT CAST('10:00:00' AS TIME) + INTERVAL '1' DAY;
SELECT CAST('23:00:00' AS TIME) + INTERVAL '1' HOUR;
SELECT CAST('00:00:00' AS TIME) - INTERVAL '1' HOUR;
SELECT CAST('00:00:00' AS TIME) + INTERVAL '-1' HOUR;
SELECT CAST('12:15:37.123456-08' AS TIMETZ) + INTERVAL '2' HOUR;
SELECT CAST('12:15:37.123456-08' AS TIMETZ) + INTERVAL '22' HOUR;
SELECT CAST('12:15:37.123456-08' AS TIMETZ) + INTERVAL '2' DAY;
SELECT INTERVAL '2' HOUR + INTERVAL '12:15:37.123456-08' :: AS x;
SELECT INTERVAL '22' HOUR + INTERVAL '12:15:37.123456-08' :: AS x;
SELECT INTERVAL '2' DAY + INTERVAL '12:15:37.123456-08' :: AS x;
SELECT CAST('12:15:37.123456-08' AS TIMETZ) - INTERVAL '2' HOUR;
SELECT CAST('12:15:37.123456-08' AS TIMETZ) - INTERVAL '22' HOUR;
SELECT CAST('12:15:37.123456-08' AS TIMETZ) - INTERVAL '2' DAY;
SELECT INTERVAL '2' HOUR - CAST('12:15:37.123456-08' AS TIMETZ);
SELECT CAST('1992-01-01 10:00:00' AS TIMESTAMP) + INTERVAL '1' DAY;
SELECT INTERVAL '1' DAY + CAST('1992-01-01 10:00:00' AS TIMESTAMP);
SELECT CAST('1992-01-01 10:00:05' AS TIMESTAMP) + INTERVAL '17 years 3 months 1 day 2 hours 1 minute 57 seconds';
SELECT CAST('1992-01-01 10:00:00' AS TIMESTAMP) - INTERVAL '1' DAY;
SELECT CAST('1993-01-01 00:00:00' AS TIMESTAMP) - CAST('1991-01-01 01:00:30' AS TIMESTAMP);
CREATE TABLE x (x INT, x TIMESTAMP, x TIMESTAMP);
INSERT INTO x VALUES (0, '2020-07-07 02:01:01', '2020-08-05 07:51:47'), (1, '2020-02-08 19:26:38', '2020-09-21 10:02:28'), (2, '2020-06-19 20:45:41', '2020-01-04 05:44:42'), (3, '2020-11-18 18:22:26', '2020-06-14 02:46:55'), (4, '2020-08-24 03:31:52', '2020-07-05 19:04:34');
SELECT x, x - x FROM x ORDER BY 1;
WITH x AS (SELECT UNNEST(RANGE(CAST('2023-05-11 4:00:00' AS TIMESTAMP), CAST('2023-05-11 4:00:00' AS TIMESTAMP) + TO_DAYS(7), TO_HOURS(6)))) SELECT x, x - (CAST('2023-05-11 4:00:00' AS TIMESTAMP)) AS x FROM x WHERE x BETWEEN TO_HOURS(-44) AND TO_HOURS(44);
WITH x AS (SELECT UNNEST(RANGE(CAST('2023-05-11 4:00:00' AS TIMESTAMP), CAST('2023-05-11 4:00:00' AS TIMESTAMP) + TO_DAYS(7), TO_HOURS(6)))) SELECT x, x - (CAST('2023-05-11 4:00:00' AS TIMESTAMP)) AS x FROM x WHERE x >= TO_HOURS(-44) AND x <= TO_HOURS(44);
PRAGMA x;
SELECT INTERVAL '30' DAY > INTERVAL '1' MONTH;
SELECT INTERVAL '30' DAY = INTERVAL '1' MONTH;
SELECT INTERVAL '30' DAY >= INTERVAL '1' MONTH;
SELECT INTERVAL '31' DAY > INTERVAL '1' MONTH;
SELECT INTERVAL '1' HOUR < INTERVAL '1' DAY;
SELECT INTERVAL '30' HOUR <= INTERVAL '1' DAY;
SELECT INTERVAL '1' HOUR = INTERVAL '1' HOUR;
SELECT INTERVAL '1' YEAR = INTERVAL '12' MONTH;
SELECT INTERVAL '28 days 432000 seconds' = INTERVAL '1 month 3 days';
CREATE TABLE x (x INTERVAL);
INSERT INTO x (x) VALUES ('2 years 3 months'), ('-1734799452 DAYS'), ('2 DAYS'), ('13 days'), ('1 month'), ('3 days');
SELECT x FROM x ORDER BY ALL;
SELECT * FROM x INNER JOIN (SELECT INTERVAL '1000' DAY AS x FROM x) AS x ON (x.x < x.x) ORDER BY ALL;
SELECT * FROM x INNER JOIN (SELECT INTERVAL '1000' DAY AS x FROM x) AS x ON (x.x < x.x) WHERE (NOT (x.x <> x.x)) ORDER BY ALL;
INSERT INTO x (x) VALUES ('1000 DAY'), ('28 days 432000 seconds'), ('1 month 3 days'), ('2147483647 months 2147483647 days 9223372036854775807 microseconds'), ('-2147483648 months -2147483648 days -9223372036854775807 microseconds'), (NULL);
SELECT x FROM x ORDER BY ALL;
PRAGMA x;
CREATE TABLE x (x INTERVAL);
INSERT INTO x VALUES (INTERVAL '20' DAY), (INTERVAL '1' YEAR), (INTERVAL '1' MONTH);
SELECT COUNT(DISTINCT x) FROM x;
UPDATE x SET x = INTERVAL '1' MONTH WHERE x = INTERVAL '20' DAY;
SELECT * FROM x AS x JOIN x AS x USING (x) ORDER BY 1;
SELECT * FROM x AS x JOIN x AS x ON (x.x <> x.x) ORDER BY 1;
SELECT * FROM x AS x JOIN x AS x ON (x.x > x.x) ORDER BY 1;
SELECT x, ROW_NUMBER() OVER (PARTITION BY x ORDER BY x) FROM x ORDER BY 1, 2;
PRAGMA x;
SELECT COUNT(x), MIN(x), MAX(x) FROM (SELECT UNNEST(x) FROM (SELECT LIST(x) AS x FROM x AS x) AS x) AS x;
SELECT COUNT(x), MIN(x), MAX(x) FROM (SELECT UNNEST(x) FROM (SELECT LIST(CAST(x AS TEXT) || '0abcdefghijklmnopqrstuvwxyz') AS x FROM x AS x) AS x) AS x;
SELECT x.x.x."x" AS "x", COUNT(DISTINCT CONCAT(x."x", 'x', x.x)) AS "x", COUNT(DISTINCT CASE WHEN x.x."x" > 0 THEN CONCAT(x."x", 'x', x."x") END) AS "x" FROM (SELECT UUID() AS x, * FROM x AS x) AS x, (SELECT UUID() AS x, x.x FROM (SELECT UNNEST(x.x)) AS x) AS x, (SELECT UUID() AS x, x.x FROM (SELECT UNNEST(x.x.x)) AS x) AS x GROUP BY 1 ORDER BY ALL LIMIT 2;
PRAGMA x;
CREATE TABLE x (x INT[]);
INSERT INTO x SELECT LIST(x) FROM x AS x;
SELECT COUNT(*), MIN(x), MAX(x), COUNT(x) FROM (SELECT UNNEST(x) FROM x) AS x;
INSERT INTO x SELECT LIST(x) FROM x AS x;
SELECT COUNT(*) FROM x;
SELECT COUNT(*), MIN(x), MAX(x), COUNT(x) FROM (SELECT UNNEST(x) FROM x) AS x;
INSERT INTO x VALUES (NULL), ([1, 2, 3]), ([4, 5, 6, 99999999]);
SELECT COUNT(*) FROM x;
SELECT COUNT(*), MIN(x), MAX(x), COUNT(x) FROM (SELECT UNNEST(x) FROM x) AS x;
INSERT INTO x SELECT LIST(x) FROM x AS x;
SELECT COUNT(*), MIN(x), MAX(x), COUNT(x) FROM (SELECT UNNEST(x) FROM x) AS x;
CREATE TABLE x AS SELECT CASE WHEN x < 100000 THEN 'a' ELSE 'b' END AS x, LIST(CASE WHEN x % 2 = 0 THEN NULL ELSE x END) AS x FROM x AS x GROUP BY x;
SELECT x, COUNT(*), MIN(x), MAX(x), COUNT(x) FROM (SELECT x, UNNEST(x) FROM x) AS x GROUP BY x ORDER BY x;
CREATE TABLE x AS SELECT CASE WHEN x < 100000 THEN 'a' ELSE 'b' END AS x, ARRAY_AGG(CASE WHEN x % 2 = 0 THEN [x - 2, x, x + 2] ELSE [x, x + 2] END) AS x FROM x AS x GROUP BY x;
SELECT x, COUNT(*), MIN(CAST(x AS TEXT)), MAX(CAST(x AS TEXT)), COUNT(x) FROM (SELECT x, UNNEST(x) FROM x) AS x GROUP BY x ORDER BY x;
CREATE TABLE x AS SELECT CASE WHEN x < 100000 THEN 'a' ELSE 'b' END AS x, LIST(CASE WHEN x % 2 = 0 THEN [x - 2, x, x + 2, NULL] ELSE [x, x + 2, NULL] END) AS x FROM x AS x GROUP BY x;
SELECT x, COUNT(*), MIN(CAST(x AS TEXT)), MAX(CAST(x AS TEXT)), COUNT(x) FROM (SELECT x, UNNEST(x) FROM x) AS x GROUP BY x ORDER BY x;
CREATE TABLE x AS SELECT CASE WHEN x < 100000 THEN 'a' ELSE 'b' END AS x, [LIST(CASE WHEN x % 2 = 0 THEN NULL ELSE x END)] AS x FROM x AS x GROUP BY x;
SELECT x, COUNT(*), MIN(x), MAX(x), COUNT(x) FROM (SELECT x, UNNEST(x[1]) FROM x) AS x GROUP BY x ORDER BY x;
CREATE TABLE x AS SELECT CASE WHEN x < 100000 THEN 'a' ELSE 'b' END AS x, [LIST(x), LIST(x + 1), LIST(x + 2), LIST(x + 3)] AS x FROM x AS x GROUP BY x;
SELECT x, COUNT(*), MIN(x), MAX(x), MIN(x), MAX(x), MIN(x), MAX(x), MIN(x), MAX(x) FROM (SELECT x, UNNEST(x[1]) AS x, UNNEST(x[2]) AS x, UNNEST(x[3]) AS x, UNNEST(x[4]) AS x FROM x) AS x GROUP BY x ORDER BY x;
PRAGMA x;
SELECT COUNT(x), MIN(x), MAX(x) FROM (SELECT UNNEST(x) FROM (SELECT LIST(x) AS x FROM x AS x) AS x) AS x;
PRAGMA x;
SELECT CASE WHEN 1 = 1 THEN [1] ELSE [2] END;
SELECT CASE WHEN 1 = 0 THEN [1] ELSE [2] END;
SELECT CASE WHEN x % 2 = 0 THEN [x] ELSE [-x] END FROM x AS x;
CREATE TABLE x AS SELECT CASE WHEN x % 2 = 0 THEN NULL ELSE [x] END AS x FROM x AS x;
SELECT * FROM x;
SELECT CASE WHEN x = [1] THEN [3] ELSE [4] END FROM x;
PRAGMA x;
SELECT [1] < [2];
SELECT [1] < [1];
SELECT NULL < [1];
SELECT [1] < NULL;
SELECT [1] <= [2];
SELECT [1] <= [1];
SELECT NULL <= [1];
SELECT [1] <= NULL;
SELECT [1] = [2];
SELECT [1] = [1];
SELECT NULL = [1];
SELECT [1] = NULL;
SELECT [1] <> [2];
SELECT [1] <> [1];
SELECT NULL <> [1];
SELECT [1] <> NULL;
SELECT [1] >= [2];
SELECT [1] >= [1];
SELECT NULL >= [1];
SELECT [1] >= NULL;
SELECT [1] > [2];
SELECT [1] > [1];
SELECT NULL > [1];
SELECT [1] > NULL;
CREATE VIEW x AS SELECT * FROM (VALUES ([1], [1]), ([1], [2]), ([2], [1]), (NULL, [1]), ([2], NULL), (NULL, NULL)) AS x;
SELECT x < x FROM x;
SELECT x <= x FROM x;
SELECT x = x FROM x;
SELECT x <> x FROM x;
SELECT x >= x FROM x;
SELECT x > x FROM x;
SELECT [1] < [1, 2];
SELECT [1] < [1];
SELECT NULL < [1];
SELECT [1] < NULL;
SELECT [1] <= [1, 2];
SELECT [1] <= [1];
SELECT NULL <= [1];
SELECT [1] <= NULL;
SELECT [1] = [1, 2];
SELECT [1] = [1];
SELECT NULL = [1];
SELECT [1] = NULL;
SELECT [1] <> [1, 2];
SELECT [1] <> [1];
SELECT NULL <> [1];
SELECT [1] <> NULL;
SELECT [1] >= [1, 2];
SELECT [1] >= [1];
SELECT NULL >= [1];
SELECT [1] >= NULL;
SELECT [1] > [1, 2];
SELECT [1] > [1];
SELECT NULL > [1];
SELECT [1] > NULL;
CREATE VIEW x AS SELECT * FROM (VALUES ([1], [1]), ([1], [1, 2]), ([1, 2], [1]), (NULL, [1]), ([1, 2], NULL), (NULL, NULL)) AS x;
SELECT x < x FROM x;
SELECT x <= x FROM x;
SELECT x = x FROM x;
SELECT x <> x FROM x;
SELECT x >= x FROM x;
SELECT x > x FROM x;
SELECT [] < [1, 2];
SELECT [] < [];
SELECT NULL < [];
SELECT [] < NULL;
SELECT [] <= [1, 2];
SELECT [] <= [];
SELECT NULL <= [];
SELECT [] <= NULL;
SELECT [] = [1, 2];
SELECT [] = [];
SELECT NULL = [];
SELECT [] = NULL;
SELECT [] <> [1, 2];
SELECT [] <> [];
SELECT NULL <> [];
SELECT [] <> NULL;
SELECT [] >= [1, 2];
SELECT [] >= [];
SELECT NULL >= [];
SELECT [] >= NULL;
SELECT [] > [1, 2];
SELECT [] > [];
SELECT NULL > [];
SELECT [] > NULL;
CREATE VIEW x AS SELECT * FROM (VALUES ([], []), ([], [1, 2]), ([1, 2], []), (NULL, []), ([1, 2], NULL), (NULL, NULL)) AS x;
SELECT x < x FROM x;
SELECT x <= x FROM x;
SELECT x = x FROM x;
SELECT x <> x FROM x;
SELECT x >= x FROM x;
SELECT x > x FROM x;
SELECT ['duck'] < ['duck', 'goose'];
SELECT ['duck'] < ['duck'];
SELECT NULL < ['duck'];
SELECT ['duck'] < NULL;
SELECT ['duck'] <= ['duck', 'goose'];
SELECT ['duck'] <= ['duck'];
SELECT NULL <= ['duck'];
SELECT ['duck'] <= NULL;
SELECT ['duck'] = ['duck', 'goose'];
SELECT ['duck'] = ['duck'];
SELECT NULL = ['duck'];
SELECT ['duck'] = NULL;
SELECT ['duck'] <> ['duck', 'goose'];
SELECT ['duck'] <> ['duck'];
SELECT NULL <> ['duck'];
SELECT ['duck'] <> NULL;
SELECT ['duck'] >= ['duck', 'goose'];
SELECT ['duck'] >= ['duck'];
SELECT NULL >= ['duck'];
SELECT ['duck'] >= NULL;
SELECT ['duck'] > ['duck', 'goose'];
SELECT ['duck'] > ['duck'];
SELECT NULL > ['duck'];
SELECT ['duck'] > NULL;
CREATE VIEW x AS SELECT * FROM (VALUES (['duck'], ['duck']), (['duck'], ['duck', 'goose']), (['duck', 'goose'], ['duck']), (NULL, ['duck']), (['duck', 'goose'], NULL), (NULL, NULL)) AS x;
SELECT x < x FROM x;
SELECT x <= x FROM x;
SELECT x = x FROM x;
SELECT x <> x FROM x;
SELECT x >= x FROM x;
SELECT x > x FROM x;
SELECT [{'x': 'duck', 'x': 1}] < [{'x': 'duck', 'x': 1}, {'x': 'goose', 'x': 2}];
SELECT [{'x': 'duck', 'x': 1}] < [{'x': 'duck', 'x': 1}];
SELECT NULL < [{'x': 'duck', 'x': 1}];
SELECT [{'x': 'duck', 'x': 1}] < NULL;
SELECT [{'x': 'duck', 'x': 1}] <= [{'x': 'duck', 'x': 1}, {'x': 'goose', 'x': 2}];
SELECT [{'x': 'duck', 'x': 1}] <= [{'x': 'duck', 'x': 1}];
SELECT NULL <= [{'x': 'duck', 'x': 1}];
SELECT [{'x': 'duck', 'x': 1}] <= NULL;
SELECT [{'x': 'duck', 'x': 1}] = [{'x': 'duck', 'x': 1}, {'x': 'goose', 'x': 2}];
SELECT [{'x': 'duck', 'x': 1}] = [{'x': 'duck', 'x': 1}];
SELECT NULL = [{'x': 'duck', 'x': 1}];
SELECT [{'x': 'duck', 'x': 1}] = NULL;
SELECT [{'x': 'duck', 'x': 1}] <> [{'x': 'duck', 'x': 1}, {'x': 'goose', 'x': 2}];
SELECT [{'x': 'duck', 'x': 1}] <> [{'x': 'duck', 'x': 1}];
SELECT NULL <> [{'x': 'duck', 'x': 1}];
SELECT [{'x': 'duck', 'x': 1}] <> NULL;
SELECT [{'x': 'duck', 'x': 1}] >= [{'x': 'duck', 'x': 1}, {'x': 'goose', 'x': 2}];
SELECT [{'x': 'duck', 'x': 1}] >= [{'x': 'duck', 'x': 1}];
SELECT NULL >= [{'x': 'duck', 'x': 1}];
SELECT [{'x': 'duck', 'x': 1}] >= NULL;
SELECT [{'x': 'duck', 'x': 1}] > [{'x': 'duck', 'x': 1}, {'x': 'goose', 'x': 2}];
SELECT [{'x': 'duck', 'x': 1}] > [{'x': 'duck', 'x': 1}];
SELECT NULL > [{'x': 'duck', 'x': 1}];
SELECT [{'x': 'duck', 'x': 1}] > NULL;
CREATE VIEW x AS SELECT * FROM (VALUES ([{'x': 'duck', 'x': 1}], [{'x': 'duck', 'x': 1}]), ([{'x': 'duck', 'x': 1}], [{'x': 'duck', 'x': 1}, {'x': 'goose', 'x': 2}]), ([{'x': 'duck', 'x': 1}, {'x': 'goose', 'x': 2}], [{'x': 'duck', 'x': 1}]), (NULL, [{'x': 'duck', 'x': 1}]), ([{'x': 'duck', 'x': 1}, {'x': 'goose', 'x': 2}], NULL), (NULL, NULL)) AS x;
SELECT x < x FROM x;
SELECT x <= x FROM x;
SELECT x = x FROM x;
SELECT x <> x FROM x;
SELECT x >= x FROM x;
SELECT x > x FROM x;
SELECT [x, x + 1, x + 2] < [1, 2, 3] FROM x AS x;
SELECT [x, x + 1, x + 2] <= [1, 2, 3] FROM x AS x;
SELECT [x, x + 1, x + 2] = [1, 2, 3] FROM x AS x;
SELECT [x, x + 1, x + 2] <> [1, 2, 3] FROM x AS x;
SELECT [x, x + 1, x + 2] >= [1, 2, 3] FROM x AS x;
SELECT [x, x + 1, x + 2] > [1, 2, 3] FROM x AS x;
PRAGMA x;
SELECT (SELECT LIST(x) FROM x AS x) < (SELECT LIST(x) FROM x AS x);
SELECT (SELECT LIST(x) FROM x AS x) < (SELECT LIST(x) FROM x AS x);
SELECT NULL < (SELECT LIST(x) FROM x AS x);
SELECT (SELECT LIST(x) FROM x AS x) < NULL;
SELECT (SELECT LIST(x) FROM x AS x) <= (SELECT LIST(x) FROM x AS x);
SELECT (SELECT LIST(x) FROM x AS x) <= (SELECT LIST(x) FROM x AS x);
SELECT NULL <= (SELECT LIST(x) FROM x AS x);
SELECT (SELECT LIST(x) FROM x AS x) <= NULL;
SELECT (SELECT LIST(x) FROM x AS x) = (SELECT LIST(x) FROM x AS x);
SELECT (SELECT LIST(x) FROM x AS x) = (SELECT LIST(x) FROM x AS x);
SELECT NULL = (SELECT LIST(x) FROM x AS x);
SELECT (SELECT LIST(x) FROM x AS x) = NULL;
SELECT (SELECT LIST(x) FROM x AS x) >= (SELECT LIST(x) FROM x AS x);
SELECT (SELECT LIST(x) FROM x AS x) >= (SELECT LIST(x) FROM x AS x);
SELECT NULL >= (SELECT LIST(x) FROM x AS x);
SELECT (SELECT LIST(x) FROM x AS x) >= NULL;
SELECT (SELECT LIST(x) FROM x AS x) > (SELECT LIST(x) FROM x AS x);
SELECT (SELECT LIST(x) FROM x AS x) > (SELECT LIST(x) FROM x AS x);
SELECT NULL > (SELECT LIST(x) FROM x AS x);
SELECT (SELECT LIST(x) FROM x AS x) > NULL;
CREATE VIEW x AS SELECT * FROM (VALUES ((SELECT LIST(x) FROM x AS x), (SELECT LIST(x) FROM x AS x)), ((SELECT LIST(x) FROM x AS x), (SELECT LIST(x) FROM x AS x)), ((SELECT LIST(x) FROM x AS x), (SELECT LIST(x) FROM x AS x)), (NULL, (SELECT LIST(x) FROM x AS x)), ((SELECT LIST(x) FROM x AS x), NULL), (NULL, NULL)) AS x;
SELECT x < x FROM x;
SELECT x <= x FROM x;
SELECT x = x FROM x;
SELECT x >= x FROM x;
SELECT x > x FROM x;
PRAGMA x;
CREATE TABLE x (x INT[]);
SELECT x || NULL FROM x;
SELECT NULL || NULL FROM x;
SELECT NULL || x || NULL FROM x;
SELECT x || NULL || x FROM x;
SELECT CONCAT([42]);
SELECT CONCAT([42], [43], [], [44], [], [45]);
SELECT CONCAT(CAST([42] AS INT[1]), CAST([43] AS INT[1]), CAST(NULL AS INT[1]), CAST([44] AS INT[1]), CAST(NULL AS INT[1]), CAST([45] AS INT[1]));
SELECT LIST_CONCAT([42]);
SELECT LIST_CONCAT([42], [43], [], [44], [], [45]);
SELECT LIST_CONCAT(CAST([42] AS INT[1]), CAST([43] AS INT[1]), CAST(NULL AS INT[1]), CAST([44] AS INT[1]), CAST(NULL AS INT[1]), CAST([45] AS INT[1]));
SELECT LIST_CONCAT(CAST([1] AS INT[1]), CAST([2, 3] AS INT[2]));
PRAGMA x;
CREATE VIEW x AS SELECT * FROM (VALUES (1, [1, 2, 3]), (2, NULL), (3, [NULL, 3, 4])) AS x;
SELECT * FROM x AS x, x AS x ORDER BY x.x, x.x;
SELECT * FROM x AS x, x AS x WHERE x.x >= x.x ORDER BY x.x, x.x;
SELECT * FROM x AS x, x AS x WHERE x.x <> x.x ORDER BY x.x, x.x;
SELECT * FROM x AS x, x AS x WHERE x.x <> x.x OR x.x > x.x ORDER BY x.x, x.x;
CREATE VIEW x AS SELECT * FROM (VALUES (1, {'x': [1, 2, 3]}), (2, NULL), (3, {'x': [NULL, 3, 4]})) AS x;
SELECT * FROM x AS x, x AS x ORDER BY x.x, x.x;
SELECT * FROM x AS x, x AS x WHERE x.x >= x.x ORDER BY x.x, x.x;
SELECT * FROM x AS x, x AS x WHERE x.x <> x.x ORDER BY x.x, x.x;
SELECT * FROM x AS x, x AS x WHERE x.x <> x.x OR x.x > x.x ORDER BY x.x, x.x;
CREATE VIEW x AS SELECT * FROM (VALUES (1, [[1, 2], [3]]), (2, NULL), (3, [[NULL, 3], [4]])) AS x;
SELECT * FROM x AS x, x AS x ORDER BY x.x, x.x;
SELECT * FROM x AS x, x AS x WHERE x.x >= x.x ORDER BY x.x, x.x;
SELECT * FROM x AS x, x AS x WHERE x.x <> x.x ORDER BY x.x, x.x;
SELECT * FROM x AS x, x AS x WHERE x.x <> x.x OR x.x > x.x ORDER BY x.x, x.x;
PRAGMA x;
SELECT [1] IS NOT DISTINCT FROM [2];
SELECT [1] IS NOT DISTINCT FROM [1];
SELECT NULL IS NOT DISTINCT FROM [1];
SELECT [1] IS NOT DISTINCT FROM NULL;
SELECT [1] IS DISTINCT FROM [2];
SELECT [1] IS DISTINCT FROM [1];
SELECT NULL IS DISTINCT FROM [1];
SELECT [1] IS DISTINCT FROM NULL;
CREATE VIEW x AS SELECT * FROM (VALUES ([1], [1]), ([1], [2]), ([2], [1]), (NULL, [1]), ([2], NULL), (NULL, NULL)) AS x;
SELECT x IS NOT DISTINCT FROM x FROM x;
SELECT x IS DISTINCT FROM x FROM x;
SELECT [1] IS NOT DISTINCT FROM [1, 2];
SELECT [1] IS NOT DISTINCT FROM [1];
SELECT NULL IS NOT DISTINCT FROM [1];
SELECT [1] IS NOT DISTINCT FROM NULL;
SELECT [1] IS DISTINCT FROM [1, 2];
SELECT [1] IS DISTINCT FROM [1];
SELECT NULL IS DISTINCT FROM [1];
SELECT [1] IS DISTINCT FROM NULL;
CREATE VIEW x AS SELECT * FROM (VALUES ([1], [1]), ([1], [1, 2]), ([1, 2], [1]), (NULL, [1]), ([1, 2], NULL), (NULL, NULL)) AS x;
SELECT x IS NOT DISTINCT FROM x FROM x;
SELECT x IS DISTINCT FROM x FROM x;
SELECT [] IS NOT DISTINCT FROM [1, 2];
SELECT [] IS NOT DISTINCT FROM [];
SELECT NULL IS NOT DISTINCT FROM [];
SELECT [] IS NOT DISTINCT FROM NULL;
SELECT [] IS DISTINCT FROM [1, 2];
SELECT [] IS DISTINCT FROM [];
SELECT NULL IS DISTINCT FROM [];
SELECT [] IS DISTINCT FROM NULL;
CREATE VIEW x AS SELECT * FROM (VALUES ([], []), ([], [1, 2]), ([1, 2], []), (NULL, []), ([1, 2], NULL), (NULL, NULL)) AS x;
SELECT x IS NOT DISTINCT FROM x FROM x;
SELECT x IS DISTINCT FROM x FROM x;
SELECT ['duck'] IS NOT DISTINCT FROM ['duck', 'goose'];
SELECT ['duck'] IS NOT DISTINCT FROM ['duck'];
SELECT NULL IS NOT DISTINCT FROM ['duck'];
SELECT ['duck'] IS NOT DISTINCT FROM NULL;
SELECT ['duck'] IS DISTINCT FROM ['duck', 'goose'];
SELECT ['duck'] IS DISTINCT FROM ['duck'];
SELECT NULL IS DISTINCT FROM ['duck'];
SELECT ['duck'] IS DISTINCT FROM NULL;
CREATE VIEW x AS SELECT * FROM (VALUES (['duck'], ['duck']), (['duck'], ['duck', 'goose']), (['duck', 'goose'], ['duck']), (NULL, ['duck']), (['duck', 'goose'], NULL), (NULL, NULL)) AS x;
SELECT x IS NOT DISTINCT FROM x FROM x;
SELECT x IS DISTINCT FROM x FROM x;
SELECT [{'x': 'duck', 'x': 1}] IS NOT DISTINCT FROM [{'x': 'duck', 'x': 1}, {'x': 'goose', 'x': 2}];
SELECT [{'x': 'duck', 'x': 1}] IS NOT DISTINCT FROM [{'x': 'duck', 'x': 1}];
SELECT NULL IS NOT DISTINCT FROM [{'x': 'duck', 'x': 1}];
SELECT [{'x': 'duck', 'x': 1}] IS NOT DISTINCT FROM NULL;
SELECT [{'x': 'duck', 'x': 1}] IS DISTINCT FROM [{'x': 'duck', 'x': 1}, {'x': 'goose', 'x': 2}];
SELECT [{'x': 'duck', 'x': 1}] IS DISTINCT FROM [{'x': 'duck', 'x': 1}];
SELECT NULL IS DISTINCT FROM [{'x': 'duck', 'x': 1}];
SELECT [{'x': 'duck', 'x': 1}] IS DISTINCT FROM NULL;
CREATE VIEW x AS SELECT * FROM (VALUES ([{'x': 'duck', 'x': 1}], [{'x': 'duck', 'x': 1}]), ([{'x': 'duck', 'x': 1}], [{'x': 'duck', 'x': 1}, {'x': 'goose', 'x': 2}]), ([{'x': 'duck', 'x': 1}, {'x': 'goose', 'x': 2}], [{'x': 'duck', 'x': 1}]), (NULL, [{'x': 'duck', 'x': 1}]), ([{'x': 'duck', 'x': 1}, {'x': 'goose', 'x': 2}], NULL), (NULL, NULL)) AS x;
SELECT x IS NOT DISTINCT FROM x FROM x;
SELECT x IS DISTINCT FROM x FROM x;
SELECT CASE WHEN x < 4 THEN [x, x + 1, x + 2] ELSE NULL END IS NOT DISTINCT FROM [1, 2, 3] FROM x AS x;
SELECT CASE WHEN x < 4 THEN [x, x + 1, x + 2] ELSE NULL END IS DISTINCT FROM [1, 2, 3] FROM x AS x;
PRAGMA x;
SELECT STR_SPLIT(GROUP_CONCAT(NULL, ','), ',')[100] FROM x;
CREATE TABLE x AS SELECT [{'x': 3, 'x': NULL}, NULL, {'x': NULL, 'x': 'hello'}] AS x;
SELECT * FROM x;
SELECT x[1] FROM x;
SELECT x[2] FROM x;
SELECT x[3] FROM x;
CREATE TABLE x AS SELECT [{'x': 3, 'x': {'x': 3, 'x': [1, 2, 3]}}, NULL, {'x': NULL, 'x': {'x': NULL, 'x': [4, 5]}}, {'x': 27, 'x': NULL}, {'x': NULL, 'x': {'x': 7, 'x': NULL}}] AS x;
SELECT * FROM x;
SELECT x[1] FROM x;
SELECT x[2] FROM x;
SELECT x[3] FROM x;
SELECT x[4] FROM x;
SELECT x[5] FROM x;
SELECT x[5]['b'] FROM x;
PRAGMA x;
PRAGMA x;
CREATE TABLE x AS SELECT LIST_EXTRACT(["x"], 1) AS x FROM x;
SELECT COUNT(*) FROM x JOIN x ON (x.x = x."x");
PRAGMA x;
CREATE TABLE x (x INT PRIMARY KEY, x INT[]);
INSERT INTO x VALUES (1, [1, 2, 3]);
SELECT * FROM x WHERE x = 1;
INSERT INTO x VALUES (2, NULL), (3, [NULL]), (4, [4, 5, NULL, 6]);
SELECT * FROM x WHERE x = 2;
SELECT * FROM x WHERE x = 3;
SELECT * FROM x WHERE x = 4;
DROP TABLE x;
CREATE TABLE x (x INT, x INT[]);
INSERT INTO x VALUES (1, [1, 2, 3]), (2, NULL), (3, [NULL]), (4, [4, 5, NULL, 6]);
CREATE INDEX x ON x(x);
SELECT * FROM x WHERE x = 1;
SELECT * FROM x WHERE x = 2;
SELECT * FROM x WHERE x = 3;
SELECT * FROM x WHERE x = 4;
INSERT INTO x VALUES (1, [4, 5, NULL]), (1, NULL), (1, [NULL]), (1, [7, 8, 9, 10, 11, 12, 13, 14, 15]);
SELECT * FROM x WHERE x = 1 ORDER BY x[1] NULLS FIRST;
CREATE TABLE x (x INT[]);
INSERT INTO x VALUES ([1, 2, 3]), ([NULL]), (NULL), ([-2, NULL, 4, 2]);
SELECT LIST_EXTRACT(x, 0) FROM x;
SELECT LIST_EXTRACT(x, 1) FROM x;
SELECT x[ : ] FROM x;
SELECT x[0 : 0] FROM x;
SELECT x[0 : 1] FROM x;
SELECT x[1 : 0] FROM x;
PRAGMA x;
CREATE TABLE x (x INT PRIMARY KEY, x INT[]);
INSERT INTO x VALUES (1, [1, 2, 3]);
BEGIN;
INSERT INTO x SELECT x AS x, NULL AS x FROM x AS x;
INSERT INTO x VALUES (1, [4, 5]);
ROLLBACK;
SELECT x FROM x WHERE x = 1;
SELECT * FROM x;
BEGIN;
INSERT INTO x SELECT x AS x, [-x, x, 33] AS x FROM x AS x;
INSERT INTO x VALUES (1, [4, 5]);
ROLLBACK;
SELECT x FROM x WHERE x = 1;
SELECT * FROM x;
BEGIN;
INSERT INTO x SELECT x AS x, [1, 2, 3, 4, 5, x, -33] AS x FROM x AS x;
INSERT INTO x VALUES (1, [4, 5]);
ROLLBACK;
SELECT x FROM x WHERE x = 1;
SELECT * FROM x;
INSERT INTO x VALUES (2, [4, 5]);
INSERT INTO x VALUES (3, NULL);
INSERT INTO x VALUES (4, [NULL]);
SELECT * FROM x;
PRAGMA x;
CREATE TABLE x (x INT PRIMARY KEY, x INT[][]);
INSERT INTO x VALUES (1, [[1, 2, 3], [4, 5]]);
BEGIN;
INSERT INTO x SELECT x AS x, NULL AS x FROM x AS x;
INSERT INTO x VALUES (1, [[4, 5]]);
ROLLBACK;
SELECT x FROM x WHERE x = 1;
SELECT * FROM x;
BEGIN;
INSERT INTO x SELECT x AS x, [[-x], [x, 33]] AS x FROM x AS x;
INSERT INTO x VALUES (1, [[4, 5]]);
ROLLBACK;
SELECT x FROM x WHERE x = 1;
SELECT * FROM x;
BEGIN;
INSERT INTO x SELECT x AS x, [[1, 2], [3, 4], [5, x, -33]] AS x FROM x AS x;
INSERT INTO x VALUES (1, [[4, 5]]);
ROLLBACK;
SELECT x FROM x WHERE x = 1;
SELECT * FROM x;
INSERT INTO x VALUES (2, [[4, 5]]);
INSERT INTO x VALUES (3, NULL);
INSERT INTO x VALUES (4, [NULL]);
INSERT INTO x VALUES (5, [[NULL], [NULL]]);
SELECT * FROM x;
PRAGMA x;
CREATE TABLE x (x INT PRIMARY KEY, x INT[]);
INSERT INTO x VALUES (1, [1, 2, 3]);
BEGIN;
INSERT INTO x SELECT x AS x, NULL AS x FROM x AS x;
INSERT INTO x VALUES (1, [4, 5]);
ROLLBACK;
SELECT x FROM x WHERE x = 1;
SELECT * FROM x;
BEGIN;
INSERT INTO x SELECT x AS x, [-x, x, 33] AS x FROM x AS x;
INSERT INTO x VALUES (1, [4, 5]);
ROLLBACK;
SELECT x FROM x WHERE x = 1;
SELECT * FROM x;
BEGIN;
INSERT INTO x SELECT x AS x, [1, 2, 3, 4, 5, x, -33] AS x FROM x AS x;
INSERT INTO x VALUES (1, [4, 5]);
ROLLBACK;
SELECT x FROM x WHERE x = 1;
SELECT * FROM x;
INSERT INTO x VALUES (2, [4, 5]);
INSERT INTO x VALUES (3, NULL);
INSERT INTO x VALUES (4, [NULL]);
SELECT * FROM x;
PRAGMA x;
CREATE TABLE x (x INT PRIMARY KEY, x INT[][]);
INSERT INTO x VALUES (1, [[1, 2, 3], [4, 5]]);
BEGIN;
INSERT INTO x SELECT x AS x, NULL AS x FROM x AS x;
INSERT INTO x VALUES (1, [[4, 5]]);
ROLLBACK;
SELECT x FROM x WHERE x = 1;
SELECT * FROM x;
BEGIN;
INSERT INTO x SELECT x AS x, [[-x], [x, 33]] AS x FROM x AS x;
INSERT INTO x VALUES (1, [[4, 5]]);
ROLLBACK;
SELECT x FROM x WHERE x = 1;
SELECT * FROM x;
BEGIN;
INSERT INTO x SELECT x AS x, [[1, 2], [3, 4], [5, x, -33]] AS x FROM x AS x;
INSERT INTO x VALUES (1, [[4, 5]]);
ROLLBACK;
SELECT x FROM x WHERE x = 1;
SELECT * FROM x;
INSERT INTO x VALUES (2, [[4, 5]]);
INSERT INTO x VALUES (3, NULL);
INSERT INTO x VALUES (4, [NULL]);
INSERT INTO x VALUES (5, [[NULL], [NULL]]);
SELECT * FROM x;
SET x = 'nulls_first';
PRAGMA x;
CREATE VIEW x AS SELECT * FROM (VALUES ([1]), ([1, 2]), ([1, NULL]), ([NULL, 2]), ([NULL, NULL]), ([NULL]), (NULL)) AS x;
SELECT x.x, x.x, x.x < x.x, x.x <= x.x, x.x = x.x, x.x <> x.x, x.x > x.x, x.x >= x.x, x.x IS NOT DISTINCT FROM x.x, x.x IS DISTINCT FROM x.x FROM x AS x, x AS x ORDER BY 1, 2;
CREATE VIEW x AS SELECT * FROM (VALUES (['duck']), (['duck', 'goose']), (['duck', NULL]), ([NULL, 'goose']), ([NULL, NULL]), ([NULL]), (NULL)) AS x;
SELECT x.x, x.x, x.x < x.x, x.x <= x.x, x.x = x.x, x.x <> x.x, x.x > x.x, x.x >= x.x, x.x IS NOT DISTINCT FROM x.x, x.x IS DISTINCT FROM x.x FROM x AS x, x AS x ORDER BY 1, 2;
SET x = 'nulls_first';
PRAGMA x;
CREATE VIEW x AS SELECT * FROM (VALUES (([1]), ([NULL]))) AS x;
SELECT x.x, x.x, x.x < x.x, x.x <= x.x, x.x = x.x, x.x <> x.x, x.x > x.x, x.x >= x.x, x.x IS NOT DISTINCT FROM x.x, x.x IS DISTINCT FROM x.x FROM x AS x;
PRAGMA x;
CREATE TABLE x AS SELECT [{'x': 3, 'x': 'hello'}, NULL, {'x': NULL, 'x': 'thisisalongstring'}] AS x;
SELECT * FROM x;
INSERT INTO x VALUES (NULL);
SELECT * FROM x;
INSERT INTO x VALUES ([{'x': 17, 'x': 'world'}]);
SELECT * FROM x;
SELECT UNNEST(x) FROM x;
CREATE TABLE x AS SELECT [{'x': {'x': [1, 2, 3], 'x': 17}, 'x': 'hello'}, NULL, {'x': {'x': [NULL, 4, 5], 'x': NULL}, 'x': 'thisisalongstring'}, {'x': {'x': NULL, 'x': 22}, 'x': NULL}, {'x': NULL, 'x': 'aaaaaaaaaaaaaaaaaaaaaaaa'}] AS x;
SELECT * FROM x;
SELECT UNNEST(x) FROM x;
SELECT UNNEST(x)['a']['a1'] FROM x;
SELECT UNNEST(x)['a']['a2'] FROM x;
INSERT INTO x VALUES (NULL), ([{'x': {'x': [6, 7, 8, 9], 'x': 17}, 'x': 'world1'}, NULL, {'x': {'x': [10, 11, 12], 'x': 22}, 'x': 'world2'}]);
SELECT * FROM x;
SELECT UNNEST(x) FROM x;
SELECT UNNEST(x)['a'] FROM x;
SELECT UNNEST(x)['a']['a1'] FROM x;
PRAGMA x;
SELECT CAST(REPEAT('[{"a":', 100000) AS INT[]);
SELECT STATS([3, 4]);
SELECT [3, 4];
SELECT STATS(CAST(NULL AS INT[]));
SELECT CAST(NULL AS INT[]);
SELECT STATS(['hello', 'world']);
SELECT STATS([INTERVAL '1' YEAR, INTERVAL '2' YEAR]);
SELECT ['hello', 'world'];
SELECT [INTERVAL '1' YEAR, INTERVAL '2' YEAR];
CREATE TABLE x (x INT);
INSERT INTO x VALUES (3), (4);
SELECT STATS([x]) FROM x LIMIT 1;
SELECT [x] FROM x;
INSERT INTO x VALUES (NULL);
SELECT STATS([x]) FROM x LIMIT 1;
SELECT [x] FROM x;
CREATE TABLE x AS SELECT [3, 4] AS x;
SELECT STATS(x[1]) FROM x LIMIT 1;
SELECT x[1] FROM x;
INSERT INTO x VALUES ([]);
SELECT STATS(x[1]) FROM x LIMIT 1;
SELECT x[1] FROM x;
INSERT INTO x VALUES (NULL);
SELECT STATS(x[1]) FROM x LIMIT 1;
SELECT x[1] FROM x;
INSERT INTO x VALUES ([NULL]);
SELECT STATS(x[1]) FROM x LIMIT 1;
SELECT x[1] FROM x;
CREATE TABLE x (x INT[]);
INSERT INTO x VALUES ([1, 2]), (NULL), ([3, 4, 5, 6]), ([NULL, 7]);
SELECT * FROM x;
CREATE TABLE x (x INT[][]);
INSERT INTO x VALUES ([[1, 2], [3, 4]]), (NULL), ([NULL, [7, 8, NULL], [2, 3]]), ([[NULL, 6], NULL, [1, 2, NULL]]);
SELECT * FROM x;
CREATE TABLE x (x TEXT[]);
INSERT INTO x VALUES (['hello', 'world']), (NULL), (['fejwfoaejwfoijwafew', 'b', 'c']), ([NULL, 'XXXXXXXXXXXXXXXXXXXXXXXX']);
SELECT * FROM x;
CREATE TABLE x (x INT[]);
INSERT INTO x SELECT [x, NULL, x + 1] FROM x AS x;
DELETE FROM x WHERE x[1] <= 9995;
SELECT * FROM x;
DROP TABLE x;
CREATE TABLE x (x INT[][]);
INSERT INTO x SELECT [[x], NULL, [x + 1, 4], [NULL, 1, 2]] FROM x AS x;
DELETE FROM x WHERE x[1][1] <= 9995;
SELECT * FROM x;
SELECT CONCAT_WS('.', LIST_REVERSE(STR_SPLIT('1.2..3', '.')));
CREATE TABLE x (x INT, x INT[]);
INSERT INTO x VALUES (0, [1, 2]), (1, NULL), (2, [3, 4, 5, 6]), (3, [NULL, 7]);
SELECT * FROM x ORDER BY x;
DELETE FROM x WHERE x[1] = 1;
SELECT * FROM x ORDER BY x;
UPDATE x SET x = [7, 8, 9] WHERE x IS NULL;
SELECT * FROM x ORDER BY x;
UPDATE x SET x = NULL WHERE x >= 2;
SELECT * FROM x ORDER BY x;
UPDATE x SET x = [NULL] WHERE x = 2;
SELECT * FROM x ORDER BY x;
UPDATE x SET x = NULL;
SELECT * FROM x ORDER BY x;
CREATE TABLE x (x INT, x TEXT[]);
INSERT INTO x VALUES (0, ['hello world', 'bananas']), (1, NULL), (2, ['3, 4, 5, 6', 'numbers']), (3, [NULL, 'not a number']);
SELECT * FROM x ORDER BY x;
DELETE FROM x WHERE x[1][1] = '3';
SELECT * FROM x ORDER BY x;
UPDATE x SET x = ['very very long string', '123', 'test 123 123'] WHERE x IS NULL;
SELECT * FROM x ORDER BY x;
UPDATE x SET x = NULL WHERE x >= 2;
SELECT * FROM x ORDER BY x;
UPDATE x SET x = [NULL, 'hello again', NULL] WHERE x = 1;
SELECT * FROM x ORDER BY x;
UPDATE x SET x = NULL;
SELECT * FROM x ORDER BY x;
PRAGMA x;
CREATE TABLE x (x INT, x INT[]);
INSERT INTO x VALUES (1, [1, 2, 3]), (2, [4, 5]), (3, [NULL]);
SELECT * FROM x ORDER BY x;
UPDATE x SET x = [5, 6, 7] FROM x AS x WHERE x.x = 1;
SELECT * FROM x ORDER BY x;
CREATE TABLE x AS SELECT x % 5000 AS x, LIST(x) AS x FROM x AS x GROUP BY x;
SELECT COUNT(*) FROM x;
SELECT COUNT(x), MIN(x), MAX(x) FROM (SELECT UNNEST(x) FROM x) AS x;
CREATE TABLE x AS SELECT x % 5000 AS x, LIST('thisisalongprefix' || CAST(x AS TEXT)) AS x FROM x AS x GROUP BY x;
SELECT COUNT(*) FROM x;
SELECT COUNT(x), MIN(x), MAX(x) FROM (SELECT UNNEST(x) FROM x) AS x;
CREATE TABLE x AS SELECT x % 5000 AS x, LIST({'x': x, 'x': x + 2}) AS x FROM x AS x GROUP BY x;
SELECT COUNT(*) FROM x;
SELECT COUNT(x), MIN(x['a']), MAX(x['a']), MIN(x['b']), MAX(x['b']) FROM (SELECT UNNEST(x) FROM x) AS x;
CREATE TABLE x AS SELECT x % 5000 AS x, LIST([x, x + 2]) AS x FROM x AS x GROUP BY x;
SELECT COUNT(*) FROM x;
SELECT COUNT(x), MIN(x[1]), MAX(x[1]), MIN(x[2]), MAX(x[2]) FROM (SELECT UNNEST(x) FROM x) AS x;
SELECT [CAST(100 AS UTINYINT), CAST(10000 AS SMALLINT)];
SELECT [CAST(100 AS USMALLINT), CAST(10000 AS INT)];
SELECT [CAST(100 AS USMALLINT), 10000.5];
SELECT [CAST(100 AS USMALLINT), CAST(0.5 AS DOUBLE)];
SELECT [-CAST(100 AS TINYINT), CAST(200 AS UTINYINT)];
SELECT [-CAST(100 AS SMALLINT), CAST(50000 AS USMALLINT)];
SELECT [-CAST(100 AS INT), CAST(3000000000 AS UINTEGER)];
SELECT [-CAST(100 AS BIGINT), CAST(9999999999999999999 AS UBIGINT)];
CREATE TABLE x (x INT, x INT[][]);
INSERT INTO x VALUES (0, [[1, 2], NULL, [3, NULL]]), (1, NULL), (2, [[4, 5, 6, 7], [NULL]]);
SELECT * FROM x ORDER BY x;
SELECT x, x[1] FROM x ORDER BY x;
SELECT x, x[1][1] FROM x ORDER BY x;
SELECT x, x[0][0] FROM x ORDER BY x;
SELECT x, x[0][1] FROM x ORDER BY x;
SELECT x, x[1][0] FROM x ORDER BY x;
SELECT x, x[1][4] FROM x ORDER BY x;
SELECT * FROM x WHERE x[1][1] = 1;
SELECT * FROM x WHERE x[1][1] = 1 OR x[1][2] = 2;
CREATE TABLE x (x INT, x INT[][][]);
INSERT INTO x VALUES (0, [[[1, 2], [3, 4]], NULL, [NULL, [2, 5]]]), (1, NULL), (2, [[[6, 7, 8, 9], [10, 11], [12, 13]], NULL, [NULL, [10, 11], [12, 13]]]);
SELECT * FROM x ORDER BY x;
SELECT x, x[1] FROM x ORDER BY x;
SELECT x, x[1][1] FROM x ORDER BY x;
SELECT x, x[1][3] FROM x ORDER BY x;
SELECT x, x[1][3][1] FROM x ORDER BY x;
SELECT x, x[1][3][4] FROM x ORDER BY x;
CREATE TABLE x (x INT, x INT[][]);
INSERT INTO x VALUES (0, [[1, 2], NULL, [3, NULL]]), (1, NULL), (2, [[4, 5, 6, 7], [NULL]]);
SELECT * FROM x ORDER BY x;
SELECT x, x[0 : 1] FROM x ORDER BY x;
SELECT x, x[0 : 2] FROM x ORDER BY x;
SELECT x, x[1 : 1] FROM x ORDER BY x;
SELECT x, x[1 : 2] FROM x ORDER BY x;
SELECT x, x[0 : 0] FROM x ORDER BY x;
SELECT x, x[ : ] FROM x ORDER BY x;
SELECT x, LIST_EXTRACT(x[ : ], 0) FROM x ORDER BY x;
CREATE TABLE x (x INT, x INT[][]);
INSERT INTO x VALUES (0, [[1, 2], NULL, [3, NULL]]), (1, NULL), (2, [[4, 5, 6, 7], [NULL]]);
SELECT * FROM x ORDER BY x;
UPDATE x SET x = [[7, 8, 9], [10, 11]] WHERE x IS NULL;
SELECT * FROM x ORDER BY x;
UPDATE x SET x = NULL WHERE x >= 1;
SELECT * FROM x ORDER BY x;
UPDATE x SET x = [[NULL], NULL, [NULL]] WHERE x = 1;
SELECT * FROM x ORDER BY x;
UPDATE x SET x = NULL;
SELECT * FROM x ORDER BY x;
PRAGMA x;
SELECT UNNEST([[1, 2, 3]], x := TRUE);
SELECT UNNEST([[[[[1, 2], [3, 4]], [[5]]], [[[]]]]], x := TRUE);
SELECT UNNEST([[[[[1, 2], [3, 4]], [[5]]], [[[]]]]], x := TRUE);
SELECT UNNEST([[[[[1, 2], [3, 4]], [[5]]], [[[]]]]], x := 1);
SELECT UNNEST([[[[[1, 2], [3, 4]], [[5]]], [[[]]]]], x := 2);
SELECT UNNEST([[[[[1, 2], [3, 4]], [[5]]], [[[]]]]], x := 3);
SELECT UNNEST([[[[[1, 2], [3, 4]], [[5]]], [[[]]]]], x := 4);
SELECT UNNEST([[[[[1, 2], [3, 4]], [[5]]], [[[]]]]], x := 5);
SELECT UNNEST([[1, 2, 3], [4, 5]]) AS x, UNNEST([1, 2, 3]) AS x;
SELECT UNNEST([[1, 2, 3], [4, 5]], x := TRUE) AS x, UNNEST([1, 2, 3]) AS x ORDER BY x;
SELECT UNNEST([[1, 2, 3], [4, 5]], x := TRUE) AS x, UNNEST([1, 2, 3]) AS x ORDER BY x;
SELECT UNNEST(x), x FROM (SELECT UNNEST([[1, 2, 3], [4, 5]]) AS x, UNNEST([1, 2, 3]) AS x);
SELECT UNNEST(UNNEST([[1, 2, 3]]));
SELECT UNNEST(UNNEST([[1, 2, 3]]));
SELECT UNNEST([1, 2, 3], 'hello');
SELECT UNNEST([1, 2, 3], x := 'hello');
SELECT UNNEST([1, 2, 3], x := TRUE);
SELECT UNNEST([1, 2, 3], x := TRUE, x := TRUE);
SELECT UNNEST([1, 2, 3], x := 9999, x := TRUE);
SELECT UNNEST([1, 2, 3], x := 0);
PRAGMA x;
SELECT SUM(x) FROM UNNEST(RANGE(1, 11)) AS x;
CREATE OR REPLACE FUNCTION x(x, x) AS (SELECT x + x * PI());
SELECT RNV(0, 1) FROM UNNEST(RANGE(0, 2));
PRAGMA x;
SELECT x, UNNEST(x), UNNEST(x) FROM (VALUES (3, ['hello', NULL, 'world'], [NULL])) AS x;
SELECT x, UNNEST(x), UNNEST(x) FROM (VALUES (1, ['abcd', 'efgh'], ['123456789abcd']), (2, NULL, ['123456789efgh', '123456789klmnop']), (3, ['hello', NULL, 'world'], [NULL])) AS x;
SELECT x, UNNEST(x), UNNEST(x) FROM (VALUES (1, [1, 2], [10]), (2, NULL, [11, 12]), (3, [3, NULL, 4], [NULL])) AS x;
SELECT UNNEST(x) FROM (VALUES ([[1, 2, 3], [4, 5]]), (NULL), ([[6, 7], NULL, [8, 9, NULL]])) AS x;
SELECT UNNEST(x), UNNEST(x) FROM (VALUES ([[1, 2, 3], [4, 5]], [[10, 11], [12, 13]]), (NULL, [[14, 15], [NULL, 16], NULL, NULL]), ([[6, 7], NULL, [8, 9, NULL]], NULL)) AS x;
SELECT UNNEST(x) FROM (VALUES ([{'x': 10, 'x': 1}, {'x': 11, 'x': 2}]), (NULL), ([{'x': 12, 'x': 3}, NULL, {'x': NULL, 'x': NULL}])) AS x;
SELECT UNNEST(x) FROM (VALUES ([{'x': {'x': 7, 'x': NULL}, 'x': 1}, {'x': {'x': 9, 'x': 10}, 'x': 2}]), (NULL), ([{'x': {'x': 11, 'x': 12}, 'x': 3}, NULL, {'x': NULL, 'x': NULL}, {'x': {'x': NULL, 'x': NULL}, 'x': 3}])) AS x;
SELECT x, UNNEST(x), UNNEST(x) FROM (VALUES (1, [{'x': 1, 'x': NULL}, {'x': 2, 'x': 'hello'}], [[1, 2, 3], [4, 5]]), (2, NULL, [[11, 12], NULL]), (3, [{'x': 3, 'x': 'test the best unnest fest'}, NULL, {'x': 4, 'x': 'abcd'}], [NULL])) AS x;
SELECT x, UNNEST(x), UNNEST(x) FROM (VALUES (1, [{'x': [1, 2], 'x': NULL}, {'x': NULL, 'x': 'hello'}], [[1, 2, 3], [4, 5]]), (2, NULL, [[11, 12], NULL]), (3, [{'x': [NULL, 4, 5], 'x': 'test the best unnest fest'}, NULL, {'x': [6, 7, NULL, 9], 'x': 'abcd'}], [NULL])) AS x;
SELECT x, UNNEST(x) FROM (VALUES (1, CAST([[1, 2], [3, 4]] AS INT[2][])), (2, CAST([[5, NULL], [7, 8]] AS INT[2][])), (3, CAST(NULL AS INT[2][])), (4, CAST([[9, 10], NULL, [11, 12]] AS INT[2][])), (5, CAST([] AS INT[2][]))) AS x;
SELECT x, UNNEST(x) FROM (VALUES (1, {'x': CAST([1, 2] AS INT[2]), 'x': CAST([3, 4] AS INT[2])}), (2, {'x': CAST([5, NULL] AS INT[2]), 'x': CAST([7, 8] AS INT[2])}), (3, {'x': CAST(NULL AS INT[2]), 'x': CAST([9, 10] AS INT[2])}), (4, {'x': CAST([11, 12] AS INT[2]), 'x': CAST(NULL AS INT[2])}), (5, {'x': NULL, 'x': CAST([13, 14] AS INT[2])})) AS x;
PRAGMA x;
CREATE TABLE x (x TEXT, x TEXT[]);
INSERT INTO x VALUES ('a', ['vibrant', 'plant', 'day']);
CREATE TABLE x (x STRUCT(x TEXT, x TEXT[]));
INSERT INTO x VALUES (('a', ['sunny', 'vibrant', 'day']));
SELECT UNNEST(x) FROM x;
SELECT UNNEST(x) FROM x;
SELECT UNNEST(x) FROM x INTERSECT SELECT * FROM x;
CREATE TABLE x (x TEXT, x STRUCT("x" TEXT, "x" STRUCT("x" TEXT, "x" BIGINT)[])[]);
SELECT DISTINCT * FROM (SELECT x, UNNEST(x, x := TRUE) FROM x);
PRAGMA x;
SELECT 42 HAVING UNNEST([1, 2, 3]);
SELECT ROW_NUMBER() OVER () QUALIFY UNNEST([1, 2, 3]);
PRAGMA x;
CREATE TABLE x AS SELECT [] AS x FROM x;
INSERT INTO x SELECT [x] AS x FROM x;
SELECT UNNEST(x) FROM x;
PRAGMA x;
CREATE TABLE x (x INT, x TEXT, x TEXT[]);
INSERT INTO x VALUES (1, 'Zuckerberg', ['New York']);
INSERT INTO x VALUES (2, 'Bezos', ['Washington', 'Space']);
INSERT INTO x VALUES (3, 'Tim', NULL);
INSERT INTO x VALUES (4, 'Elvis', [NULL, NULL, NULL]);
INSERT INTO x VALUES (5, 'Mark', CAST([] AS TEXT[]));
SELECT UNNEST(NULL);
SELECT UNNEST(CAST(NULL AS BOOLEAN[]));
SELECT x, UNNEST(x) FROM x;
SELECT x, UNNEST(x), UNNEST([1]) FROM x;
WITH x AS (SELECT 1 AS x, [1, 2, 3] AS x UNION SELECT 2 AS x, [4] AS x UNION SELECT 3 AS x, NULL AS x) SELECT x, x, UNNEST(x) AS x FROM x ORDER BY x, x;
WITH x AS (SELECT 1 AS x, [1, 2, 3] AS x UNION SELECT 2 AS x, [4] AS x UNION SELECT 3 AS x, NULL AS x) SELECT x, x.x FROM x, (SELECT UNNEST(x)) AS x ORDER BY x, x.x;
WITH x AS (SELECT 1 AS x, [1, 2, 3] AS x UNION SELECT 2 AS x, [4] AS x UNION SELECT 3 AS x, NULL AS x) SELECT x, x.x FROM x, UNNEST(x) AS x ORDER BY x, x.x;
CREATE TABLE x AS SELECT 5 AS x, [1, 2, 3] AS x;
INSERT INTO x VALUES (6, [4]), (7, NULL);
SELECT x, x.x FROM x, UNNEST(x) AS x ORDER BY x, x.x;
WITH x AS (SELECT 5 AS x, [1, 2, 3] AS x UNION SELECT 6 AS x, [4] AS x UNION SELECT 7 AS x, NULL AS x) SELECT x, x.x FROM x, UNNEST(x) AS x ORDER BY x, x.x;
PRAGMA x;
SELECT * FROM UNNEST([1, 2, 3]);
SELECT * FROM UNNEST(CAST([1, 2, 3] AS INT[]));
SELECT x FROM UNNEST([1, 2, 3]) AS x;
SELECT x FROM UNNEST([NULL, 'hello', 'world', 'bleorkbaejkoreijgaiorjgare']) AS x;
SELECT x FROM UNNEST([[1, 2], [3, 4], NULL, [4, 5, 6, 7]]) AS x;
SELECT x FROM UNNEST([{'x': [1, 2, 3], 'x': [4, 5, 6]}, {'x': [4, 5], 'x': [7, 8, 9, 10]}]) AS x;
SELECT COUNT(*) FROM UNNEST((SELECT LIST(x) FROM x)) AS x;
SELECT x FROM UNNEST(CAST(NULL AS INT[])) AS x;
SELECT x FROM UNNEST(CAST([] AS INT[])) AS x;
SELECT * FROM UNNEST((SELECT [1, 2, 3] UNION ALL SELECT [1, 2, 3]));
SET x = FALSE;
SELECT * FROM UNNEST((SELECT [1, 2, 3] UNION ALL SELECT [1, 2, 3]));
CREATE TABLE x AS SELECT [1, 2, 3] AS x UNION ALL SELECT [4, 5] UNION ALL SELECT [] UNION ALL SELECT [NULL] UNION ALL SELECT [7, 8];
SELECT x FROM x, UNNEST(x) AS x ORDER BY x, x;
SELECT x FROM UNNEST(NULL) AS x;
SELECT x FROM UNNEST(1) AS x;
SELECT x FROM UNNEST([1, 2], [3, 4]) AS x;
CREATE TABLE x AS SELECT * FROM (VALUES ('a', [4, 5, 5], [5, 7]), ('b', [2, 3], [1, 2, 3, 4]), ('c', [2, 3], [4])) AS x;
SELECT ARRAY_SORT(ARRAY(SELECT LIST_CONTAINS(x, x) FROM UNNEST(x) AS x)) AS x FROM x;
SELECT x, x, x, ARRAY_SORT(ARRAY(SELECT DISTINCT x FROM UNNEST(x) AS x WHERE x = ANY(x) ORDER BY ALL)) AS x FROM x;
SELECT x FROM UNNEST([1, 2, 3]);
SELECT x FROM UNNEST([1, 2, 3]) AS x;
SELECT x FROM (SELECT [1, 2, 3] AS x), UNNEST(x);
SELECT x FROM (SELECT [1, 2, 3] AS x), UNNEST(x) AS x;
PRAGMA x;
SELECT CAST(MAP(['a', 'b', 'c'], [1, 2, NULL]) AS MAP(TEXT, TEXT));
SELECT CAST(MAP(['a', 'b', 'c'], [1, 2, NULL]) AS MAP(TEXT, BIGINT));
SELECT CAST(MAP([1, 2, 3], [1, 2, NULL]) AS MAP(TEXT, BIGINT));
SELECT CAST(MAP([[1, 2, 3], [0], [123]], [1.0, 2.1, 4.9]) AS MAP(TEXT[], TINYINT));
SELECT CAST(MAP([1, 2, CAST('hi' AS TEXT)], [1.0, 2.1, 4.9]) AS MAP(TEXT, TINYINT));
SELECT CAST(MAP([1, 2, 3], ['A', 'B', 'C']) AS MAP(TINYINT, TEXT));
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3);
SELECT MAP(['name'], [x]) FROM x;
SELECT MAP(['x', 'y'], [x]) FROM x;
SELECT MAP([x], ['name']) FROM x;
SELECT MAP([x, x + 1], ['x', 'y']) FROM x;
SELECT MAP([x, x + 1], ['x', 'y']) FROM x WHERE x > 1;
SELECT MAP(['x'], [x]) FROM (SELECT MAP([x], ['y']) AS x FROM x WHERE x <> 1);
SELECT MAP(['key'], [x]) FROM x WHERE x > 2;
SELECT MAP(['🦆', '🦤', '🐓'], [x, x + 1, x + 2]) FROM x;
SELECT MAP([10, x, x + 1, 9], [x, 3.14, 0.12, 8.0]) FROM x;
CREATE TABLE x (x TEXT[]);
INSERT INTO x VALUES (['test', 'string']), (['foo', 'bar']);
SELECT MAP(['x', 'y'], x) FROM x;
CREATE TABLE x (x INT[], x INT[]);
INSERT INTO x VALUES ([1, 0], [2]), ([3], [4, 9]);
SELECT MAP(x, x) FROM x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 2), (1, 8), (1, 3), (2, 3), (2, 4), (2, 5), (3, 6), (3, 1), (3, 9);
SELECT MAP(['category', 'min', 'max'], [x, MIN(x), MAX(x)]) FROM x GROUP BY x ORDER BY ALL;
SELECT MAP([x], ['a']) FROM x WHERE x = 9999;
CREATE TABLE x (x INT[]);
INSERT INTO x VALUES ([1, 2]), ([100, 200]);
SELECT MAP(['x', 'y'], x) FROM x;
INSERT INTO x VALUES ([1, 2, 3, 4, 5, 6]), ([20, 30, 40, 50]);
SELECT MAP(['x', 'y'], x) FROM x;
SELECT MAP(['x', 'y', '1', '2', '3', '4'], x) FROM x;
SELECT MAP(x, ['x', 'y']) FROM x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3);
SELECT MAP(['name'], [2]) FROM x;
SELECT DISTINCT MAP {'x': ? IN (SELECT TRUE)};
PRAGMA x;
SELECT MAP(CAST(NULL AS INT[]), [1, 2, 3]);
SELECT MAP(NULL, [1, 2, 3]);
SELECT MAP(NULL, NULL);
SELECT MAP(NULL, [1, 2, 3]) IS NULL;
SELECT MAP([1, 2, 3], NULL);
SELECT MAP([1, 2, 3], CAST(NULL AS INT[]));
SELECT * FROM (VALUES (MAP(NULL, NULL)), (MAP(CAST(NULL AS INT[]), CAST(NULL AS INT[]))), (MAP([1, 2, 3], [1, 2, 3])));
SELECT MAP(x, x) FROM (VALUES (NULL, ['b', 'c']), (CAST(NULL AS INT[]), NULL), (CAST(NULL AS INT[]), CAST(NULL AS TEXT[])), (CAST(NULL AS INT[]), ['a', 'b', 'c']), (NULL, ['longer string than inlined', 'smol']), (NULL, NULL), ([1, 2, 3], NULL), ([1, 2, 3], ['z', 'y', 'x']), ([1, 2, 3], CAST(NULL AS TEXT[]))) AS x;
SELECT [{'x': 1, 'x': [2, 3]}, NULL];
SELECT [{'x': 1, 'x': [2, 3]}, NULL, {'x': 1, 'x': [2, 3]}];
SELECT * FROM (VALUES (MAP([1, 2], [3, 4])), (NULL), (MAP([1, 2], [3, 4])), (NULL)) AS x;
SELECT MAP([{'x': 1, 'x': 2}, {'x': 3, 'x': 4}], [{'x': 1, 'x': 2}, {'x': 3, 'x': 4}]);
SELECT * FROM (VALUES (MAP([1, 2], [3, 4])), (NULL), (MAP([1, 2], [3, 4])), (NULL)) AS x;
PRAGMA x;
CREATE TABLE x (x INT[3]);
INSERT INTO x VALUES ([1, 2, 3]), ([4, NULL, 6]), ([7, 8, 9]), (NULL), ([10, 11, 12]);
SELECT FIRST(x ORDER BY ALL), LAST(x ORDER BY ALL) FROM x;
SELECT COUNT(*), MAX(x) FROM x GROUP BY LIST_SUM(CAST(x AS INT[])) % 2 = 0;
SELECT COUNT(*), MAX(x) FROM x GROUP BY LIST_SUM(CAST(x AS INT[])) % 2 = 0;
SELECT MAX(x), MIN(x) FROM x;
PRAGMA x;
PRAGMA x;
SELECT CAST(ARRAY_VALUE(1, 2, 3) AS TEXT);
SELECT CAST(ARRAY_VALUE(1, 2, 3) AS INT[]);
SELECT LIST_EXTRACT(ARRAY_VALUE(1, 2, 3), 2);
SELECT * FROM UNNEST(ARRAY_VALUE(1, 2, 3));
SELECT UNNEST(CAST(ARRAY_VALUE(1, 2, 3) AS INT[]));
SELECT CAST(ARRAY_VALUE('1.0', '2.0', '3.0') AS DOUBLE[3]);
SELECT CAST(ARRAY_VALUE(1, 2, 3) AS INT[2]);
SELECT CAST(ARRAY_VALUE(1, 2, 3) AS INT[4]);
SELECT CAST([1, 2, 3] AS INT[3]);
SELECT CAST(['1.0', '2.0', '3.0'] AS DOUBLE[3]);
SELECT CAST([1, 2, 3] AS BLOB[3]);
SELECT CAST(NULL AS INT[3]);
SELECT CAST([[1, 2, 3], [4, 5, 6]] AS INT[3][2]);
SELECT CAST((CAST(NULL AS INT[])) AS INT[3]);
SELECT CAST(x AS INT[3]) FROM (VALUES ([1, 2, 3]), ([4, NULL, 6]), (NULL), ([7, 8, 9])) AS x;
SELECT CAST([1, 2, 3] AS INT[2]);
SELECT CAST([[1, 2, 3], [4, 5, 6, 7]] AS INT[3][2]);
CREATE OR REPLACE TABLE x AS SELECT CAST([1, 2, 3] AS INT[3]);
CREATE OR REPLACE TABLE x AS SELECT CAST(['4', '5', '6'] AS TEXT[3]);
INSERT INTO x SELECT * FROM x;
SELECT CAST((CAST([1, NULL, 3] AS INT[3])) AS TEXT[3]);
SELECT CAST((CAST(NULL AS INT[3])) AS TEXT);
SELECT CAST((CAST(['2', 'abc', '3'] AS TEXT[3])) AS INT[]);
SELECT CAST((CAST([1, 2, 3] AS INT[3])) AS INT);
SELECT TRY_CAST(CAST([42, 999, NULL, NULL, -42] AS INT[5]) AS TIMESTAMPTZ[]);
SELECT CAST((CAST(NULL AS INT[3])) AS TEXT[3]);
SELECT CAST('[1, 2, 3]' AS INT[3]);
SELECT TRY_CAST(x AS INT[][3]) FROM (VALUES (['foo'])) AS x;
PRAGMA x;
PRAGMA x;
SELECT DISTINCT ARRAY_VALUE(ARRAY_VALUE(1, 2, 3), ARRAY_VALUE(4, 5, 6));
SELECT DISTINCT ARRAY_VALUE([1, 2, 3], [4, 5, 6]);
SELECT DISTINCT [ARRAY_VALUE(1, 2, 3), ARRAY_VALUE(4, 5, 6)];
SELECT * FROM (VALUES (ARRAY_VALUE(NULL, 'abc')), (ARRAY_VALUE(NULL, 'defg')), (NULL)) ORDER BY 1 DESC;
SELECT * FROM (VALUES (ARRAY_VALUE(NULL, 'ghf', NULL)), (ARRAY_VALUE(NULL, NULL, 'defg')), (NULL)) ORDER BY 1 DESC;
SELECT * FROM (VALUES (ARRAY_VALUE(NULL, NULL, 'ghf')), (ARRAY_VALUE(NULL, 'defg', NULL)), (NULL)) ORDER BY 1 DESC;
PRAGMA x;
PRAGMA x;
CREATE TABLE x (x INT, x INT[0]);
CREATE TABLE x (x INT, x INT[4294967299]);
CREATE TABLE x (x INT, x INT[2147483647]);
SELECT ARRAY_VALUE();
CREATE TABLE x (x INT, x INT[-1]);
CREATE TABLE x (x INT, x INT[1.5]);
CREATE TABLE x (x INT, x INT['foobar']);
SELECT CAST((CAST([1, 2, 3] AS INT[3])) AS INT[0]);
SELECT CAST((CAST([1, 2, 3] AS INT[3])) AS INT[-1]);
SELECT CAST((CAST([1, 2, 3] AS INT[3])) AS INT[1.5]);
SELECT CAST((CAST([1, 2, 3] AS INT[3])) AS INT['foobar']);
PRAGMA x;
PRAGMA x;
CREATE TABLE x (x INT, x INT[3]);
INSERT INTO x VALUES (1, ARRAY_VALUE(1, 2, 3)), (2, ARRAY_VALUE(NULL, 5, 6)), (3, ARRAY_VALUE(7, NULL, 9)), (4, ARRAY_VALUE(10, 11, NULL));
SELECT DISTINCT * FROM x ORDER BY ALL;
CREATE OR REPLACE TABLE x (x INT, x INT[][3]);
INSERT INTO x SELECT x, ARRAY_VALUE([x, x + 1, x + 2], [x + 3, x + 4, x + 5], [x + 6, x + 7, x + 8]) FROM x AS x;
SELECT DISTINCT * FROM x ORDER BY ALL;
SELECT DISTINCT * FROM x ORDER BY ALL;
SELECT DISTINCT * FROM x ORDER BY ALL;
SELECT * FROM x JOIN x USING (x) ORDER BY ALL;
SELECT * FROM x JOIN x ON x.x = x.x ORDER BY ALL;
SELECT * FROM x FULL OUTER JOIN x USING (x) ORDER BY ALL;
SELECT * FROM x FULL OUTER JOIN x USING (x) ORDER BY ALL;
SELECT * FROM x AS x JOIN x AS x ON (x.x <> x.x) ORDER BY ALL;
PRAGMA x;
PRAGMA x;
CREATE TABLE x (x INT[3]);
INSERT INTO x VALUES (NULL), ([1, 2, 3]), ([4, 5, 6]), ([7, 8, 9]);
SELECT * FROM x JOIN x AS x ON x.x = x.x;
INSERT INTO x VALUES (NULL);
SELECT * FROM x JOIN x AS x ON x.x = x.x;
INSERT INTO x VALUES ([10, 11, 12]);
SELECT * FROM x JOIN x AS x ON x.x = x.x ORDER BY x.x;
PRAGMA x;
PRAGMA x;
CREATE TABLE x (x INT[4096]);
INSERT INTO x VALUES (RANGE(0, 4096));
SELECT LIST_SUM(CAST(x AS INT[])) = LIST_SUM(RANGE(0, 4096)) FROM x;
CREATE TABLE x AS SELECT ARRAY_VALUE(x) AS x FROM x AS x;
SELECT SUM(x[1]) FROM x;
CREATE TABLE x AS SELECT ARRAY_VALUE(x, x + 1) AS x FROM x AS x;
SELECT SUM(x[1]) = 8386560 AND SUM(x[2]) = 8390656 FROM x;
CREATE OR REPLACE TABLE x AS SELECT * FROM x AS x;
UPDATE x SET x = NULL WHERE x % 2 = 0;
CREATE TABLE x AS SELECT ARRAY_VALUE(x) AS x FROM x;
SELECT SUM(x[1]) FROM x;
PRAGMA x;
PRAGMA x;
CREATE TABLE x (x INT[3]);
INSERT INTO x VALUES ([1, 2, 3]), ([4, NULL, 6]), ([7, 8, 9]), (NULL), ([10, 11, 12]);
SELECT * FROM x LIMIT 1;
SELECT * FROM x OFFSET 1;
SELECT * FROM x LIMIT 1 OFFSET 1;
PRAGMA x;
CREATE TABLE x (x INT[3]);
INSERT INTO x VALUES ([1, 2, 3]), ([1, 2, 4]), ([7, 8, 9]), ([-1, -2, -3]), (NULL), ([4, NULL, 2]);
SELECT LIST(x) FROM x;
SELECT LIST(x ORDER BY x[3] ASC) FROM x;
SELECT LIST(x ORDER BY x[3] DESC) FROM x;
PRAGMA x;
SELECT LIST(ARRAY_VALUE({'x': [10]}));
CREATE TABLE x (x INT, x INT, x INT);
INSERT INTO x VALUES (1, 2, 3), (4, 5, 6);
SELECT LIST(ARRAY_VALUE(x, x, x) ORDER BY x) FROM x GROUP BY x;
PRAGMA x;
PRAGMA x;
CREATE TABLE x (x INT[3]);
INSERT INTO x VALUES ([1, 2, 3]), ([1, 2, 4]), ([7, 8, 9]), ([-1, -2, -3]), (NULL), ([4, NULL, 2]);
SELECT x[3] FROM x;
SELECT DISTINCT x FROM x ORDER BY ALL;
SELECT DISTINCT x FROM x WHERE x[1] > 0 ORDER BY ALL;
SELECT * FROM (SELECT x FROM x UNION SELECT x FROM x) ORDER BY ALL;
SELECT * FROM (SELECT x FROM x WHERE x[1] > 0 UNION SELECT x FROM x WHERE x[1] > 0) ORDER BY ALL;
SELECT FIRST(DISTINCT x ORDER BY x) FROM x;
SELECT CAST(x AS TEXT) FROM x ORDER BY ALL;
SELECT TRY_CAST(CAST(x AS INT[]) AS INT[3]) FROM x ORDER BY ALL;
SELECT x[2 : -1] FROM x;
SELECT x[3 : 99] FROM x;
DESCRIBE SELECT * FROM x;
SELECT x.filter(x -> x > 0) FROM x;
SELECT CAST(x.apply(x -> x + 1) AS INT[3]) FROM x;
PRAGMA x;
PRAGMA x;
CREATE OR REPLACE TABLE x (x INT[3]);
COPY (SELECT [x, x + 1, x + 2] AS x FROM x) TO '__TEST_DIR__/arrays_csv_test.csv';
COPY x FROM '__TEST_DIR__/arrays_csv_test.csv';
SELECT * FROM x;
PRAGMA x;
PRAGMA x;
CREATE TABLE x (x INT[3]);
INSERT INTO x VALUES ([1, 2, 3]), ([1, 2, 4]), ([7, 8, 9]), ([-1, -2, -3]), (NULL), ([4, NULL, 2]);
SELECT CAST(x AS JSON) FROM x;
CREATE OR REPLACE TABLE x (x INT[3]);
COPY (SELECT [x, x + 1, x + 2] AS x FROM x) TO '__TEST_DIR__/arrays_parquet_test.json';
COPY x FROM '__TEST_DIR__/arrays_parquet_test.json';
SELECT * FROM x;
PRAGMA x;
PRAGMA x;
CREATE OR REPLACE TABLE x (x INT[3]);
COPY (SELECT [x, x + 1, x + 2] AS x FROM x) TO '__TEST_DIR__/arrays_parquet_test.parquet';
COPY x FROM '__TEST_DIR__/arrays_parquet_test.parquet';
SELECT * FROM x;
CREATE TABLE x (x INT PRIMARY KEY, x INT[3]);
INSERT INTO x SELECT x, [x, x + 1, x + 2] FROM x AS x;
SELECT * FROM x WHERE x = 150000;
PRAGMA x;
CREATE TABLE x AS SELECT x % 2000 AS x, x % 200 AS x, x % 20 AS x, CAST([x + x FOR x IN RANGE(0, 16)] AS INT[16]) AS x, CAST([CONCAT('thisisalongstring_', x + x) FOR x IN RANGE(0, 16)] AS TEXT[16]) AS x, CAST([{'x': x + x} FOR x IN RANGE(0, 16)] AS STRUCT(x INT)[16]) AS x FROM x AS x;
SELECT SUM(LIST_SUM(x)), SUM(LIST_SUM([CAST(REPLACE(x, 'thisisalongstring_', '') AS INT) FOR x IN x])), SUM(LIST_SUM([x.x FOR x IN x])) FROM x WHERE x = 0;
SELECT SUM(LIST_SUM(x)), SUM(LIST_SUM([CAST(REPLACE(x, 'thisisalongstring_', '') AS INT) FOR x IN x])), SUM(LIST_SUM([x.x FOR x IN x])) FROM x WHERE x = 0;
SELECT SUM(LIST_SUM(x)), SUM(LIST_SUM([CAST(REPLACE(x, 'thisisalongstring_', '') AS INT) FOR x IN x])), SUM(LIST_SUM([x.x FOR x IN x])) FROM x WHERE x = 0;
PRAGMA x;
PRAGMA x;
SELECT ARRAY_VALUE(1, 2, 3);
SELECT ARRAY_VALUE(x - 1, x, x + 1) FROM x AS x;
CREATE TABLE x (x INT[2]);
INSERT INTO x VALUES (ARRAY_VALUE(1, 2));
SELECT * FROM x;
INSERT INTO x VALUES (ARRAY_VALUE(3, 4));
SELECT * FROM x ORDER BY x DESC;
CREATE OR REPLACE TABLE x AS SELECT * FROM (VALUES (ARRAY_VALUE(6, NULL)), (ARRAY_VALUE(1, 2)), (ARRAY_VALUE(NULL, NULL)), (ARRAY_VALUE(NULL, 3)));
SELECT * FROM x ORDER BY 1 DESC;
SELECT * FROM x ORDER BY 1 ASC;
CREATE OR REPLACE TABLE x AS SELECT * FROM (VALUES (ARRAY_VALUE(1, 2), 1), (ARRAY_VALUE(3, 4), 2)) AS x;
SELECT MAX(x), ARG_MAX(x, x) FROM x;
PRAGMA x;
PRAGMA x;
SELECT ARRAY_VALUE(x - 1, x, x + 1) FROM x AS x ORDER BY 1 DESC;
SELECT ARRAY_VALUE(x - 1, x, x + 1) FROM x AS x ORDER BY 1 ASC;
SELECT * FROM (VALUES (ARRAY_VALUE(0, 1, 2, 3, 4, NULL, 6, 7, 8, 9)), (ARRAY_VALUE(10, 11, NULL, 13, 14, 15, 16, 17, NULL, 19))) ORDER BY 1 ASC;
SELECT * FROM (VALUES (ARRAY_VALUE(0, 1, 2, 3, 4, NULL, 6, 7, 8, 9)), (ARRAY_VALUE(10, 11, NULL, 13, 14, 15, 16, 17, NULL, 19))) ORDER BY 1 DESC;
SELECT * FROM (VALUES (ARRAY_VALUE(0, 1, 2, NULL)), (ARRAY_VALUE(10, 11, NULL, 13))) ORDER BY 1 ASC;
SELECT * FROM (VALUES ({'x': 0, 'x': 1, 'x': 2, 'x': NULL}), ({'x': 10, 'x': 11, 'x': NULL, 'x': 13})) ORDER BY 1 ASC;
SELECT * FROM (VALUES (ARRAY_VALUE(ARRAY_VALUE(0, 1, 2, 3, 4, NULL, 6, 7, 8, 9), ARRAY_VALUE(10, 11, NULL, 13, 14, 15, 16, 17, NULL, 19))), (ARRAY_VALUE(NULL, NULL)), (ARRAY_VALUE(NULL, ARRAY_VALUE(20, 21, 22, 23, 24, NULL, 26, 27, 28, 29))), (NULL), (ARRAY_VALUE(ARRAY_VALUE(20, 21, 22, 23, 24, NULL, 26, 27, 28, 29), ARRAY_VALUE(30, 31, NULL, 33, 34, 35, 36, 37, NULL, 39)))) ORDER BY 1 ASC;
SELECT * FROM (VALUES (ARRAY_VALUE(ARRAY_VALUE(0, 1, 2, 3, 4, NULL, 6, 7, 8, 9), ARRAY_VALUE(10, 11, NULL, 13, 14, 15, 16, 17, NULL, 19))), (ARRAY_VALUE(NULL, NULL)), (ARRAY_VALUE(NULL, ARRAY_VALUE(20, 21, 22, 23, 24, NULL, 26, 27, 28, 29))), (NULL), (ARRAY_VALUE(ARRAY_VALUE(20, 21, 22, 23, 24, NULL, 26, 27, 28, 29), ARRAY_VALUE(30, 31, NULL, 33, 34, 35, 36, 37, NULL, 39)))) ORDER BY 1 ASC;
SELECT STATS(ARRAY_VALUE(1, 2));
PRAGMA x;
CREATE TABLE x (x INT, x INT[3]);
INSERT INTO x VALUES (1, CAST([1, 2, 3] AS INT[3]));
SELECT * EXCLUDE (x) FROM x;
INSERT INTO x SELECT * FROM (VALUES (2, CAST([4, NULL, 6] AS INT[3])));
INSERT INTO x VALUES (3, NULL);
INSERT INTO x VALUES (4, CAST([7, 8, 9] AS INT[3]));
SELECT * FROM x ORDER BY x;
SELECT * FROM x AS x JOIN x AS x ON (x.x IS DISTINCT FROM x.x) ORDER BY x.x, x.x;
SELECT * FROM x WHERE x = ARRAY_VALUE(1, 2, 3);
SELECT * FROM x WHERE x[1] = 4;
SELECT * FROM x LIMIT 1 OFFSET 1;
CREATE TABLE x (x INT, x INT[3]);
INSERT INTO x SELECT x, ARRAY_VALUE(x, x + 1, x + 2) FROM x AS x;
INSERT INTO x SELECT x, ARRAY_VALUE(x, x + 1, x + 2) FROM x AS x;
SELECT * FROM x WHERE x = 5;
SELECT * FROM x WHERE x = 3000;
SELECT * FROM x WHERE x = 1200;
CREATE TABLE x (x INT[3]);
PRAGMA x;
PRAGMA x = TRUE;
CREATE TABLE x (x INT[3]);
INSERT INTO x SELECT ARRAY_VALUE(CAST(x AS TEXT), CAST(x AS TEXT), CAST(x AS TEXT)) FROM x AS x, x AS x, x AS x;
INSERT INTO x SELECT ARRAY_VALUE(5, 5, 5);
SELECT * FROM x OFFSET 480249;
PRAGMA x;
PRAGMA x = TRUE;
CREATE TABLE x AS SELECT ARRAY_VALUE(x, x) FROM x AS x;
SELECT * FROM x LIMIT 1 OFFSET 0;
SELECT * FROM x LIMIT 1 OFFSET 122880 // 2;
SELECT * FROM x LIMIT 1 OFFSET 122879;
SELECT * FROM x LIMIT 1 OFFSET 122880;
PRAGMA x;
PRAGMA x;
CREATE TABLE x AS SELECT x % 4 AS x, 10000 - x AS x, CAST([x, x + 1, x + 2] AS TEXT[]) AS x, x AS x FROM x;
SELECT x AS x, x, SUM(x) OVER (PARTITION BY x ORDER BY x) FROM x;
CREATE TABLE x AS SELECT x % 4 AS x, 10000 - x AS x, CAST([x, x + 1, x + 2] AS TEXT[3]) AS x, x AS x FROM x;
SELECT x AS x, x, SUM(x) OVER (PARTITION BY x ORDER BY x) FROM x;
PRAGMA x;
CREATE TABLE x (x INT[3]);
INSERT INTO x VALUES ([1, 2, 3]), ([1, 2, 4]), ([7, 8, 9]), ([-1, -2, -3]), (NULL), ([4, NULL, 2]);
SUMMARIZE x;
SELECT x FROM x ORDER BY x LIMIT 1;
SELECT MIN(x) FROM x;
SELECT MAX(x) FROM x;
INSERT INTO x VALUES ([-7, -8, -9]), ([-8, -9, -10]);
SELECT MAX(x) FROM x;
PRAGMA x;
SELECT TRY_CAST(ARRAY_VALUE(1, 2) AS INT[3]);
SELECT CAST(ARRAY_VALUE(1, 2) AS INT[3]);
SELECT TRY_CAST(x AS INT[2][2]) FROM (VALUES ([[1, 2], [3, 4]]), ([[5, 6], [7, 8]])) AS x;
SELECT TRY_CAST(x AS INT[2][2]) FROM (VALUES ([[1, 2], [3, 4]]), ([[5, 6], [7, 8, 9]])) AS x;
SELECT CAST(x AS INT[2][2]) FROM (VALUES ([[1, 2], [3, 4]]), ([[5, 6], [7, 8, 9]])) AS x;
SELECT TRY_CAST(x AS INT[2][2]) FROM (VALUES ([[1, 2], [3, 4]]), ([[5, 6], [7, 8], [9, 10]])) AS x;
SELECT CAST(x AS INT[2][2]) FROM (VALUES ([[1, 2], [3, 4]]), ([[5, 6], [7, 8], [9, 10]])) AS x;
SELECT TRY_CAST('[1,2]' AS INT[3]);
SELECT CAST('[1,2]' AS INT[3]);
SELECT CAST('[NULL, [1], [NULL]]' AS INT[1][3]);
SELECT TRY_CAST('[NULL, [1], [abc]]' AS INT[1][3]);
SELECT TRY_CAST('[NULL, [1,NULL,3], [1,2,3]]' AS INT[3][3]);
SELECT CAST('[NULL, [1,NULL,3], [1,2,3]]' AS INT[3][3]);
SELECT CAST('[NULL, [1,NULL,3], [1,2]]' AS INT[3][3]);
SELECT TRY_CAST('[NULL, [1,NULL,3], [1,2]]' AS INT[3][3]);
PRAGMA x;
SELECT TRY_CAST(x AS INT[2]) AS x FROM x;
SELECT CAST(x AS INT[2]) AS x FROM x;
PRAGMA x;
PRAGMA x;
CREATE TABLE x (x TEXT[3]);
INSERT INTO x VALUES (ARRAY_VALUE('1', NULL, '3')), (NULL), (ARRAY_VALUE(NULL, '5', '6'));
SELECT DISTINCT * FROM x;
CREATE TABLE x (x TEXT[2][2]);
INSERT INTO x VALUES (ARRAY_VALUE(ARRAY_VALUE('1', NULL), ARRAY_VALUE(NULL, '2'))), (NULL), (ARRAY_VALUE(ARRAY_VALUE('3', NULL), ARRAY_VALUE(NULL, '4')));
SELECT DISTINCT * FROM x;
CREATE TABLE x (x TEXT[2][]);
INSERT INTO x VALUES (ARRAY_VALUE(['1', NULL], [NULL, '2'])), (NULL), (ARRAY_VALUE(['3', NULL], [NULL, '4']));
SELECT DISTINCT * FROM x;
CREATE TABLE x (x TEXT[][2]);
INSERT INTO x VALUES ([ARRAY_VALUE('1', NULL), ARRAY_VALUE(NULL, '2')]), (NULL), ([ARRAY_VALUE('3', NULL), ARRAY_VALUE(NULL, '4')]);
SELECT DISTINCT * FROM x;
CREATE TABLE x (x TEXT[][2][]);
INSERT INTO x VALUES ([[ARRAY_VALUE('1', NULL), ARRAY_VALUE(NULL, '2')]]), (NULL), ([[ARRAY_VALUE('3', NULL), ARRAY_VALUE(NULL, '4')]]);
SELECT DISTINCT * FROM x;
CREATE TABLE x (x TEXT[2][][2]);
INSERT INTO x VALUES (ARRAY_VALUE([ARRAY_VALUE('1', NULL)], [ARRAY_VALUE(NULL, '2')])), (NULL), (ARRAY_VALUE([ARRAY_VALUE('3', NULL)], [ARRAY_VALUE(NULL, '4')]));
SELECT DISTINCT * FROM x;
PRAGMA x;
SELECT 1 = ALL([1, 2, 3]);
SELECT 1 = ALL([1, 2, 3, NULL]);
SELECT 1 = ANY([1, 2, 3]);
SELECT 4 = ANY([1, 2, 3]);
SELECT 4 = ANY([1, 2, 3, NULL]);
SELECT 4 > ALL([1, 2, 3]);
SELECT 4 > ALL([1, 2, 3, NULL]);
SELECT 1 = ANY(NULL);
CREATE VIEW x AS SELECT LIST(x) AS x FROM x AS x;
SELECT 1 = ANY(x) FROM x;
SELECT 6 = ANY(x) FROM x;
SELECT NULL = ANY(x) FROM x;
CREATE VIEW x AS SELECT LIST(CASE WHEN x % 2 = 0 THEN NULL ELSE x END) AS x FROM x AS x;
SELECT 1 = ANY(x) FROM x;
SELECT 6 = ANY(x) FROM x;
SELECT NULL = ANY(x) FROM x;
CREATE VIEW x AS SELECT x % 5 AS x, LIST(CASE WHEN x = 6 OR x = 8 THEN NULL ELSE x END) AS x FROM x AS x GROUP BY x;
SELECT x, 5 = ANY(x) FROM x ORDER BY x;
SELECT x, 3 > ANY(x) FROM x ORDER BY x;
SELECT x, 100 > ALL(x) FROM x ORDER BY x;
SELECT x, (SELECT 5 = ANY(x)) FROM x ORDER BY x;
PRAGMA x;
SELECT [1, 2], [NULL], ['hello', 'world'], [];
SELECT [[1, 2]], [[[1, 2], [2, 3]], [[5], [3, 4]]];
SELECT [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, NULL];
SELECT [1, x] FROM x AS x ORDER BY x;
SELECT [x] FROM x AS x WHERE ([x])[1] = 1;
SELECT [x, 'hello'] FROM x AS x WHERE ([x])[1] = 1;
SELECT [[1], ['hello']];
SELECT CAST([1] AS BIGINT[]);
SELECT CAST([1] AS BIGINT);
SELECT CAST([[1, 2], [3, 4]] AS BIGINT[][]);
SELECT CAST([[1, 2], [3, 4]] AS BIGINT[]);
SELECT CAST([[1, 2], [3, 4]] AS TEXT[]);
SELECT UNNEST(UNNEST(CAST([[1, 2], [3, 4]] AS TEXT[][])));
SELECT UNNEST(CAST([[1, 2], [3, 4]] AS TEXT[]));
SELECT CAST([[1, 2], [3, 4]] AS TEXT);
PRAGMA x;
SELECT ARRAY_AGG(NULL), ARRAY_AGG(42);
SELECT ARRAY_AGG(x) FROM x AS x;
SELECT ARRAY_AGG(x) FROM x AS x;
CREATE TABLE x (x INT, x TEXT);
CREATE TABLE x (x INT, x TEXT, x TEXT);
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 'The Martian'), (2, 'Saving Private Ryan'), (3, 'Team America');
INSERT INTO x VALUES (1, 'Matt', 'Damon'), (2, 'Jessica', 'Chastain'), (3, 'Tom', 'Hanks'), (4, 'Edward', 'Burns'), (5, 'Kim', 'Jong Un'), (6, 'Alec', 'Baldwin');
INSERT INTO x VALUES (1, 1), (2, 1), (3, 1), (1, 2), (2, 3), (2, 4), (3, 5), (3, 6);
SELECT x, ARRAY_AGG(CASE WHEN x = 'Matt' AND x = 'Team America' THEN 'MATT DAAAMON' ELSE x || ' ' || x END ORDER BY x) AS x FROM x JOIN x USING (x) JOIN x USING (x) GROUP BY x ORDER BY x;
SELECT x, ARRAY_AGG(x ORDER BY x) FROM x GROUP BY x ORDER BY ALL;
SET x = 1;
PRAGMA x;
CREATE OR REPLACE TABLE x (x INT, x INT[]);
INSERT INTO x VALUES (1, []), (2, []), (3, [1, 2]), (4, []), (5, [1, 2]);
SELECT x, x, ROW_NUMBER() OVER (PARTITION BY x ORDER BY x) AS x FROM x ORDER BY x, x;
INSERT INTO x VALUES (6, NULL);
SELECT x, x, ROW_NUMBER() OVER (PARTITION BY x ORDER BY x) AS x FROM x ORDER BY x NULLS FIRST, x;
PRAGMA x;
CREATE TABLE x AS SELECT * FROM x LIMIT 1050;
CREATE OR REPLACE VIEW x AS SELECT * FROM x;
PRAGMA TPCH(1);
CREATE OR REPLACE VIEW x AS SELECT x, STRUCT_EXTRACT(x, 'l_partkey') AS x, STRUCT_EXTRACT(x, 'l_suppkey') AS x, STRUCT_EXTRACT(x, 'l_linenumber') AS x, STRUCT_EXTRACT(x, 'l_quantity') AS x, STRUCT_EXTRACT(x, 'l_extendedprice') AS x, STRUCT_EXTRACT(x, 'l_discount') AS x, STRUCT_EXTRACT(x, 'l_tax') AS x, STRUCT_EXTRACT(x, 'l_returnflag') AS x, STRUCT_EXTRACT(x, 'l_linestatus') AS x, STRUCT_EXTRACT(x, 'l_shipdate') AS x, STRUCT_EXTRACT(x, 'l_commitdate') AS x, STRUCT_EXTRACT(x, 'l_receiptdate') AS x, STRUCT_EXTRACT(x, 'l_shipinstruct') AS x, STRUCT_EXTRACT(x, 'l_shipmode') AS x, STRUCT_EXTRACT(x, 'l_comment') AS x FROM (SELECT x, UNLIST(x) AS x FROM (SELECT x, LIST({'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x}) AS x FROM (SELECT * FROM x) AS x GROUP BY x) AS x) AS x;
PRAGMA TPCH(1);
CREATE OR REPLACE VIEW x AS SELECT STRUCT_EXTRACT(x, 'l_orderkey') AS x, STRUCT_EXTRACT(x, 'l_partkey') AS x, STRUCT_EXTRACT(x, 'l_suppkey') AS x, STRUCT_EXTRACT(x, 'l_linenumber') AS x, STRUCT_EXTRACT(x, 'l_quantity') AS x, STRUCT_EXTRACT(x, 'l_extendedprice') AS x, STRUCT_EXTRACT(x, 'l_discount') AS x, STRUCT_EXTRACT(x, 'l_tax') AS x, STRUCT_EXTRACT(x, 'l_returnflag') AS x, STRUCT_EXTRACT(x, 'l_linestatus') AS x, STRUCT_EXTRACT(x, 'l_shipdate') AS x, STRUCT_EXTRACT(x, 'l_commitdate') AS x, STRUCT_EXTRACT(x, 'l_receiptdate') AS x, STRUCT_EXTRACT(x, 'l_shipinstruct') AS x, STRUCT_EXTRACT(x, 'l_shipmode') AS x, STRUCT_EXTRACT(x, 'l_comment') AS x FROM (SELECT UNNEST(x) AS x FROM (SELECT LIST({'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x}) AS x FROM (SELECT * FROM x) AS x) AS x) AS x;
PRAGMA TPCH(1);
CREATE OR REPLACE VIEW x AS SELECT UNNEST(STRUCT_EXTRACT(x, 'll_orderkey')) AS x, UNNEST(STRUCT_EXTRACT(x, 'll_partkey')) AS x, UNNEST(STRUCT_EXTRACT(x, 'll_suppkey')) AS x, UNNEST(STRUCT_EXTRACT(x, 'll_linenumber')) AS x, UNNEST(STRUCT_EXTRACT(x, 'll_quantity')) AS x, UNNEST(STRUCT_EXTRACT(x, 'll_extendedprice')) AS x, UNNEST(STRUCT_EXTRACT(x, 'll_discount')) AS x, UNNEST(STRUCT_EXTRACT(x, 'll_tax')) AS x, UNNEST(STRUCT_EXTRACT(x, 'll_returnflag')) AS x, UNNEST(STRUCT_EXTRACT(x, 'll_linestatus')) AS x, UNNEST(STRUCT_EXTRACT(x, 'll_shipdate')) AS x, UNNEST(STRUCT_EXTRACT(x, 'll_commitdate')) AS x, UNNEST(STRUCT_EXTRACT(x, 'll_receiptdate')) AS x, UNNEST(STRUCT_EXTRACT(x, 'll_shipinstruct')) AS x, UNNEST(STRUCT_EXTRACT(x, 'll_shipmode')) AS x, UNNEST(STRUCT_EXTRACT(x, 'll_comment')) AS x FROM (SELECT {'x': LIST(x), 'x': LIST(x), 'x': LIST(x), 'x': LIST(x), 'x': LIST(x), 'x': LIST(x), 'x': LIST(x), 'x': LIST(x), 'x': LIST(x), 'x': LIST(x), 'x': LIST(x), 'x': LIST(x), 'x': LIST(x), 'x': LIST(x), 'x': LIST(x), 'x': LIST(x)} AS x FROM (SELECT * FROM x) AS x) AS x;
PRAGMA TPCH(1);
PRAGMA x;
CREATE TABLE x AS (SELECT x AS x, 0 AS x FROM x);
SELECT LIST(x)[70000] FROM x GROUP BY x;
PRAGMA x;
SELECT MIN(CAST(x AS TEXT)), MAX(CAST(x AS TEXT)) FROM x AS x;
SELECT MIN([x]), MAX([x]) FROM x AS x;
SELECT MIN([-x]), MAX([x + 2]) FROM x AS x;
CREATE VIEW x AS SELECT * FROM (VALUES ([1]), ([1, 2]), ([1, NULL]), ([NULL, 2]), ([NULL, NULL]), ([NULL]), (NULL)) AS x;
SELECT MIN(x), MAX(x) FROM x;
SELECT FIRST([x]) FROM x AS x;
SELECT FIRST([0]) FROM x AS x;
SELECT FIRST(x) FROM x AS x WHERE x = -1;
SELECT FIRST(CAST(NULL AS INT[])) FROM x AS x WHERE x = -1;
SELECT x % 3 AS x, FIRST([x]) FROM x AS x GROUP BY x ORDER BY x;
SELECT x % 3 AS x, UNNEST(FIRST([x])) FROM x AS x GROUP BY x ORDER BY x;
SELECT GROUP_CONCAT(CAST([x] AS TEXT), ',') FROM x AS x;
SELECT x, x % 2, MIN([x]) OVER (PARTITION BY x % 2 ORDER BY x) FROM x AS x ORDER BY 1;
SELECT x, x % 2, LIST(x) OVER (PARTITION BY x % 2 ORDER BY x) FROM x AS x ORDER BY 2, 1;
SELECT x, x % 2, LIST(x) OVER (PARTITION BY x % 2 ORDER BY x rows BETWEEN 1 preceding AND 1 following) FROM x AS x ORDER BY 2, 1;
PRAGMA x = 'dictionary';
CREATE TABLE x (x TEXT[]);
INSERT INTO x SELECT * FROM x;
SELECT MIN(LIST_STRING_AGG(x)) FROM x;
SELECT MIN(x[1]) FROM x;
SELECT MIN([x[2 : 4] FOR x IN x IF CAST(x[1] AS INT) > 1]) FROM x;
PRAGMA x;
SELECT LIST_AGGR(LIST(x), 'quantile', 0.5) FROM x AS x;
SELECT LIST_AGGR(LIST(x), 'quantile', [0.25, 0.5, 0.75]) FROM x AS x;
SELECT LIST_AGGR(CAST(LIST(x) AS TEXT[]), 'string_agg', '|') FROM x AS x;
SELECT LIST_AGGR([0, 1, 2, 3], 'arg_min', x) FROM x AS x;
SELECT LIST_AGGR(LIST(x), 'quantile') FROM x AS x;
SELECT LIST_AGGR(LIST(x), 'min', 1) FROM x AS x;
SELECT LIST_AGGR(LIST(x), 'quantile', 0.5, 0.3, 0.5) FROM x AS x;
SELECT LIST_AGGR(LIST(x), 'quantile', x) FROM x AS x;
PRAGMA x;
CREATE VIEW x AS SELECT [(x + 1) % 998513, x + 1] AS x FROM x AS x;
SELECT MIN(x), MAX(x) FROM x;
PRAGMA x;
SELECT (SELECT [1, 2]);
SELECT UNNEST((SELECT [1, 2]));
SELECT (SELECT [[1, 2], [3, 4]]);
SELECT (SELECT {'x': [1, 2, 3], 'x': 7});
SELECT (SELECT []);
SELECT (SELECT CASE WHEN 1 = 0 THEN [] ELSE NULL END);
PRAGMA x;
SELECT LIST_EXTRACT(NULL, 1);
SELECT LIST_EXTRACT(42, 1);
SELECT LIST_EXTRACT([], 1);
SELECT LIST_EXTRACT([NULL], 1);
SELECT LIST_EXTRACT([NULL], -1);
SELECT LIST_EXTRACT([42], NULL);
SELECT LIST_EXTRACT([42], 1);
SELECT LIST_ELEMENT([42], 1);
SELECT LIST_EXTRACT([42, 43], 2);
SELECT LIST_EXTRACT([42, 43, 44, 45], -1);
SELECT LIST_EXTRACT([42, 43, 44, 45], -2);
SELECT LIST_EXTRACT([42, 43, 44, 45], -4);
SELECT LIST_EXTRACT([42, 43, 44, 45], -5);
SELECT LIST_EXTRACT([42], 2);
SELECT LIST_EXTRACT(['Hello', 'World'], 1);
SELECT LIST_EXTRACT(['Hello', 'World'], 2);
SELECT LIST_EXTRACT([CAST(42 AS UTINYINT)], 1);
SELECT LIST_EXTRACT([CAST(42 AS TINYINT)], 1);
SELECT LIST_EXTRACT([CAST(42 AS USMALLINT)], 1);
SELECT LIST_EXTRACT([CAST(42 AS SMALLINT)], 1);
SELECT LIST_EXTRACT([CAST(42 AS UINTEGER)], 1);
SELECT LIST_EXTRACT([CAST(42 AS INT)], 1);
SELECT LIST_EXTRACT([CAST(42 AS UBIGINT)], 1);
SELECT LIST_EXTRACT([CAST(42 AS BIGINT)], 1);
SELECT LIST_EXTRACT([CAST(42 AS INT128)], 1);
SELECT LIST_EXTRACT([CAST(42 AS UINT128)], 1);
SELECT LIST_EXTRACT([CAST(42 AS REAL)], 1);
SELECT LIST_EXTRACT([CAST(42 AS DOUBLE)], 1);
SELECT LIST_EXTRACT([CAST('2019-11-26' AS DATE)], 1);
SELECT LIST_EXTRACT([CAST('21:42:00' AS TIME)], 1);
SELECT LIST_EXTRACT([CAST('2019-11-26 09:42:00' AS TIMESTAMP)], 1);
SELECT LIST_EXTRACT('1', 9223372036854775807);
SELECT LIST_EXTRACT('1', -9223372036854775808);
SELECT LIST_EXTRACT('1', 0);
SELECT LIST_EXTRACT('1', 1);
SELECT LIST_EXTRACT('1', -1);
SELECT LIST_EXTRACT([1, 2, 3], -9223372036854775808);
CREATE TABLE x (x INT[3][]);
INSERT INTO x VALUES ([[1, 2, 3], NULL, [4, 5, 6]]);
SELECT LIST_EXTRACT(x, 1) FROM x;
SELECT LIST_EXTRACT(x, 2) FROM x;
SELECT LIST_EXTRACT(x, 3) FROM x;
SELECT LIST_EXTRACT(x, 4) FROM x;
SELECT LIST_EXTRACT(x, -1) FROM x;
SELECT LIST_EXTRACT(x, 0) FROM x;
PRAGMA x;
CREATE TABLE x (x STRUCT(x TEXT)[]);
INSERT INTO x VALUES (NULL);
SELECT LIST_RESIZE(x, 1) FROM x;
SELECT LIST_REDUCE(x, (x, x) -> x) FROM x;
SELECT TEXT[1] FROM x;
SELECT LIST_AGGREGATE(x, 'count') FROM x;
SELECT LIST_AGGREGATE(x, 'count') FROM x;
CREATE TABLE x (x STRUCT(x STRUCT(x TEXT))[]);
INSERT INTO x VALUES ([NULL]);
SELECT LIST_TRANSFORM(x, x -> x) FROM x;
SELECT LIST_FILTER(x, x -> x.x IS NULL) FROM x;
CREATE TABLE x (x STRUCT(x TEXT)[][]);
INSERT INTO x VALUES (NULL);
SELECT FLATTEN(x) FROM x;
CREATE TABLE x (x STRUCT(x TEXT, x STRUCT(x INT[]))[]);
INSERT INTO x VALUES (NULL), ([{'x': 'hello', 'x': NULL}, (NULL, NULL), {'x': 'world', 'x': {'x': [1, 2]}}]);
SELECT LIST_REDUCE(x, (x, x) -> x) FROM x;
WITH x AS (SELECT x.reduce((x, x) -> x) AS x FROM x) SELECT x, x.x, x.x = '', x.x IS NULL, x IS NULL FROM x;
CREATE TABLE x (x TEXT[]);
INSERT INTO x VALUES (['some value']), (['some value', 'other value']), (['some value', 'other value', 'some value']), (['some value', 'other value', 'some value', 'other value']), (['some value', 'other value', 'some value', 'other value', 'some value']), (['some value', 'other value', 'some value', 'other value', 'some value', 'other value']), (['some value', 'other value', 'some value', 'other value', 'some value', 'other value', 'some value']);
WITH x AS (SELECT x.list_transform(x -> {'x': x, 'x': FALSE}).reduce((x, x) -> CASE WHEN x.x THEN x WHEN x.x = x.x THEN x ELSE {'x': NULL, 'x': TRUE} END) AS x FROM x) SELECT x, x.x = '' FROM x;
WITH x AS (SELECT * FROM (VALUES (CAST(NULL AS TEXT[])), (['a', 'b', 'c'])) AS x), x AS (SELECT x.list_transform(x -> {'x': x, 'x': FALSE}).reduce((x, x) -> CASE WHEN x.x THEN x WHEN x.x = x.x THEN x ELSE {'x': NULL, 'x': TRUE} END) AS x FROM x) SELECT x, x.x = '' FROM x;
PRAGMA x;
SELECT x[1] FROM (VALUES ([])) AS x;
SELECT x[1] FROM (VALUES ([NULL])) AS x;
SELECT x[-1] FROM (VALUES ([NULL])) AS x;
SELECT x[NULL] FROM (VALUES ([42])) AS x;
SELECT x[1] FROM (VALUES ([42])) AS x;
SELECT x[1] FROM (VALUES ([42])) AS x;
SELECT x[x] FROM (VALUES ([42], 1)) AS x;
SELECT ([42])[1];
SELECT ([42])[1];
SELECT x[2 : ] FROM (VALUES ([42, 43, 44])) AS x;
SELECT x[1 : ] FROM (VALUES ([42, 43, 44])) AS x;
SELECT x[ : 1] FROM (VALUES ([42, 43, 44])) AS x;
SELECT x[0 : 1] FROM (VALUES ([42, 43, 44])) AS x;
SELECT x[0 : -1] FROM (VALUES ([42, 43, 44])) AS x;
SELECT x[-3 : -1] FROM (VALUES ([42, 43, 44])) AS x;
SELECT x[-5 : ] FROM (VALUES ([42, 43, 44])) AS x;
SELECT x[ : 5] FROM (VALUES ([42, 43, 44])) AS x;
PRAGMA x;
CREATE TABLE x (x TEXT, x TEXT, x TEXT, x TEXT, x TEXT, x INT, x INT);
INSERT INTO x VALUES ('h', 'e', 'l', 'l', 'o', 1, 2), ('w', 'o', 'r', 'l', 'd', 2, 3), ('b', NULL, NULL, NULL, NULL, 0, 1), (NULL, NULL, NULL, NULL, NULL, 0, 2);
CREATE VIEW x AS SELECT CASE WHEN x = 'b' THEN [x] WHEN x IS NULL THEN NULL ELSE [x, x, x, x, x] END AS x, x, x FROM x;
SELECT x FROM x;
CREATE TABLE x (x TEXT, x TEXT, x TEXT);
INSERT INTO x VALUES ('🦆', 'a', 'b'), ('a', 'b', 'c');
CREATE VIEW x AS SELECT [x, x, x] AS x FROM x;
CREATE VIEW x AS SELECT x AS x FROM x WHERE x = 1 AND x = 2;
CREATE VIEW x AS SELECT x AS x FROM x WHERE x = 0 AND x = 2;
SELECT x FROM x;
SELECT x[0 : 0] FROM x;
SELECT x[1 : 2] FROM x;
SELECT x[1 : 3] FROM x;
SELECT x[x : x + x] FROM x;
SELECT x[x : 2 + x] FROM x;
SELECT x[0 : x] FROM x;
SELECT x[x : x + x] FROM x, x;
SELECT x[x : x + x] FROM x, x;
SELECT x[NULL : x + NULL] FROM x, x;
SELECT x[$length] FROM x, x;
SELECT x[x : NULL + x] FROM x, x;
SELECT x[NULL : x + NULL] FROM x, x;
SELECT x[NULL : NULL + NULL] FROM x, x;
SELECT x[x : NULL + x] FROM x, x;
SELECT x[NULL : NULL + NULL] FROM x, x;
SELECT x[ : ] FROM x, x;
SELECT x[-2 : ] FROM x;
SELECT x[0 : 1] FROM x;
SELECT x[-4 : -2] FROM x;
SELECT x[1 : 1] FROM x;
SELECT x[1 : ] FROM x;
SELECT x[2 : ] FROM x;
SELECT x[(2147483647 - 1) : 1] FROM x;
SELECT x[(2147483647 - 1) : -1] FROM x;
SELECT x[(-2147483646 - 1) : -1] FROM x;
SELECT x[(-2147483646 - 1) : -2147483647] FROM x;
SELECT ARRAY_POP_BACK(x) FROM x;
SELECT ARRAY_POP_FRONT(x) FROM x;
SELECT (1)[1 : 2];
PRAGMA x;
SELECT LIST_SLICE([1, 2, 3, 4, 5], 1, 3, -1);
SELECT LIST_SLICE([1, 2, 3, 4, 5], 1, 3, -2);
SELECT LIST_SLICE([1, 2, 3, 4, 5], 1, 3, -2);
SELECT LIST_SLICE([1, 2, 3, 4, 5], 1, 3, -2);
SELECT LIST_SLICE([1, 2, 3, 4, 5], 1, 3, -2);
SELECT LIST_SLICE([1, 2, 3, 4, 5], 1, 3, -2);
CREATE TABLE x (x INT[], x INT, x INT, x INT);
INSERT INTO x VALUES ([1, 2, 3, 4, 5], 1, 3, -2);
INSERT INTO x VALUES ([1, 4, 5, 6, 7, 8], 3, 1, -2);
INSERT INTO x VALUES ([1, 2, 3, 4, 5], -4, -1, -2);
INSERT INTO x VALUES ([1, 2, 3, 4, 5], 1, 3, -1);
INSERT INTO x VALUES ([1, 2, 3, 4, 5], 1, 3, -1);
SELECT x[$stop : x] FROM x;
SELECT x[x : -$step] FROM x;
SELECT x[x : -$step] FROM x;
SELECT x[x : -$step] FROM x;
PRAGMA x;
SELECT ([1, 2, 3, 4, 5, 6])[-9223372036854775808 : 5];
SELECT ([1, 2, 3, 4, 5, 6])[-9223372036854775808 : 5];
SELECT ([1, 2, 3, 4, 5, 6])[1 : 9223372036854775807];
SELECT ([1, 2, 3, 4, 5, 6])[1 : 9223372036854775807];
SELECT ([1, 2, 3, 4, 5, 6])[9223372036854775807 : 9223372036854775807];
SELECT ([1, 2, 3, 4, 5, 6])[9223372036854775807 : -9223372036854775808];
SELECT ([1, 2, 3, 4, 5, 6])[9223372036854775807 : -9223372036854775808];
SELECT ([1, 2, 3, 4, 5, 6])[-9223372036854775808 + 1 : 5];
CREATE TABLE x (x INT[], x BIGINT, x BIGINT, x BIGINT);
INSERT INTO x VALUES ([1, 2, 3, 4, 5], -9223372036854775808, 9223372036854775807, -1);
INSERT INTO x VALUES ([1, 2, 3, 4, 5], -9223372036854775808 + 1, 9223372036854775807 - 1, -1);
INSERT INTO x VALUES ([1, 2, 3, 4, 5], -9223372036854775808 + 1, 9223372036854775807 - 1, -1);
INSERT INTO x VALUES ([1, 2, 3, 4, 5], -9223372036854775808 + 1, 9223372036854775807 - 1, -1);
DROP TABLE x;
CREATE TABLE x (x INT[], x BIGINT, x BIGINT, x BIGINT);
INSERT INTO x VALUES ([1, 2, 3, 4, 5], -9223372036854775808 + 1, 9223372036854775807 - 1, -1);
INSERT INTO x VALUES ([1, 2, 3, 4, 5], 1, 5, 9223372036854775807);
INSERT INTO x VALUES ([1, 2, 3, 4, 5], 1, 5, -9223372036854775808);
INSERT INTO x VALUES ([1, 2, 3, 4, 5], 1, 5, -9223372036854775808);
INSERT INTO x VALUES ([1, 2, 3, 4, 5], 1, 5, -9223372036854775808);
INSERT INTO x VALUES ([1, 2, 3, 4, 5], 1, 5, -9223372036854775808);
INSERT INTO x VALUES ([1, 2, 3, 4, 5], 1, 5, -9223372036854775808);
PRAGMA x;
SELECT ([1, 2, 3, 4, 5, 6])[-10 : -10];
SELECT ([1, 2, 3, 4, 5, 6])[-10 : -10];
SELECT ([1, 2, 3, 4, 5, 6])[-10 : -10];
SELECT ([1, 2, 3, 4, 5, 6])[5 : 3];
SELECT ([1, 2, 3, 4, 5, 6])[5 : 3];
SELECT 'abcdefg'[1 : 3];
SELECT 'abcdefg'[ : 3];
SELECT LIST_SLICE([1, 2, 3, 4, 5], 1, 3, 1);
SELECT ([])[1 : 3];
SELECT ([1, 2, 3, 4, 5])[-1 : 3];
SELECT ([1, 2, 3, 4, 5])[1 : -3];
SELECT ([1, 2, 3, 4, 5])[6 : 8];
SELECT ([1, 2, 3, 4, 5])[1 : 10];
SELECT ([1, 2, 3, 4, 5])[ : 3];
SELECT ([1, 2, 3, 4, 5])[1 : ];
SELECT ([1, 2, 3, 4, 5])[ : ];
SELECT ([1, 2, 3, 4, 5])[NULL : 3];
SELECT ([1, 2, 3, 4, 5])[NULL : 3];
SELECT ([1, 2, 3, 4, 5])[NULL : 3];
SELECT ([1, 2, 3, 4, 5])[NULL : 3];
SELECT ([1, 2, 3, 4, 5])[NULL : 3];
SELECT ([1, 2, 3, 4, 5])[NULL : 3];
CREATE TABLE x (x INT[], x INT, x INT, x INT);
INSERT INTO x VALUES ([1, 2, 3, 4, 5], 1, 3, 2);
INSERT INTO x VALUES ([1, 4, 5, 6, 7, 8], 1, 3, 2);
INSERT INTO x VALUES ([1, 2, 3, 4, 5], -4, -1, 2);
INSERT INTO x VALUES ([1, 2, 3, 4, 5], 1, 3, 1);
INSERT INTO x VALUES ([1, 2, 3, 4, 5], 1, 3, 1);
SELECT x[$stop : x] FROM x;
SELECT x[x : -$step] FROM x;
SELECT x[ : -$step] FROM x;
SELECT x[ : -$step] FROM x;
SELECT x[ : -$step] FROM x;
CREATE TABLE x (x INT[], x INT, x INT, x INT);
INSERT INTO x VALUES ([1, 2, 3, 4, 5], 1, 3, 0);
INSERT INTO x VALUES ([1, 4, 5, 6, 7, 8], 1, 3, 0);
INSERT INTO x VALUES ([1, 4, 5, 6, 7, 8], 1, 3, 0);
SELECT LIST_SLICE(NULL, 1, 3, 2);
SELECT LIST_SLICE(NULL, 0, 0);
SELECT LIST_SLICE(NULL, 1, 3, -1);
SELECT LIST_SLICE(NULL, 1, 3, -1);
SELECT LIST_SLICE(NULL, 1, 3, -1);
SELECT LIST_SLICE(NULL, 1, 3, -1);
CREATE TABLE x (x INT[], x INT, x INT, x INT);
INSERT INTO x VALUES ([1, 2, 3, 4, 5], NULL, 3, 2);
INSERT INTO x VALUES ([1, 4, 5, 6, 7, 8], 1, NULL, 2);
INSERT INTO x VALUES ([1, 2, 3, 4, 5], -4, -1, NULL);
INSERT INTO x VALUES (NULL, 1, 3, 2);
INSERT INTO x VALUES ([1, 2, NULL], 1, 3, 2);
INSERT INTO x VALUES ([], 1, 3, 2);
INSERT INTO x VALUES ([], 1, 3, 2);
INSERT INTO x VALUES ([], 1, 3, 2);
INSERT INTO x VALUES ([], 1, 3, 2);
INSERT INTO x VALUES ([], 1, 3, 2);
INSERT INTO x VALUES ([], 1, 3, 2);
INSERT INTO x VALUES ([], 1, 3, 2);
INSERT INTO x VALUES ([], 1, 3, 2);
INSERT INTO x VALUES ([], 1, 3, 2);
SET x = 'nulls_first';
PRAGMA x;
PRAGMA x = 1;
SELECT [{'x': 1, 'x': [2, 3]}, NULL, {'x': 1, 'x': [2, 3]}];
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (1, 2), (2, 3), (2, 4), (2, 5), (3, 6), (5, NULL);
SELECT LIST(x) AS x FROM (VALUES (1), (2), (3)) AS x;
SELECT UNNEST(x) FROM (SELECT LIST(x) AS x FROM (VALUES (1), (2), (3)) AS x) AS x;
SELECT * FROM (SELECT LIST(x) AS x FROM (VALUES (1), (2), (3)) AS x) AS x, (SELECT LIST(x) AS x FROM (VALUES (4), (5), (6), (7)) AS x) AS x;
SELECT UNNEST(x) AS x, UNNEST(x) AS x FROM (SELECT LIST(x) AS x FROM (VALUES (1), (2), (3)) AS x) AS x, (SELECT LIST(x) AS x FROM (VALUES (4), (5), (6), (7)) AS x) AS x;
SELECT UNNEST(x), x FROM (SELECT LIST(x) AS x FROM (VALUES (1), (2), (3)) AS x) AS x, (SELECT LIST(x) AS x FROM (VALUES (4), (5), (6), (7)) AS x) AS x;
SELECT x, UNNEST(x) FROM (SELECT LIST(x) AS x FROM (VALUES (1), (2), (3)) AS x) AS x, (SELECT LIST(x) AS x FROM (VALUES (4), (5), (6), (7)) AS x) AS x;
SELECT UNNEST(LIST(x)) AS x, LIST(x) FROM x ORDER BY 1;
SELECT x, LIST(x) FROM x GROUP BY x ORDER BY x;
SELECT x, LIST(x) AS x, LIST(x) AS x FROM x GROUP BY x ORDER BY x;
SELECT x, LIST(x / 2.0) FROM x GROUP BY x ORDER BY x;
SELECT x, LIST(CAST(x AS TEXT)) FROM x GROUP BY x ORDER BY x;
SELECT LIST(x) FROM x;
SELECT UNNEST(LIST(x)) AS x FROM x ORDER BY x;
SELECT LIST(x), LIST(x) FROM x;
SELECT LIST(42);
SELECT LIST(42) FROM x;
SELECT UNNEST(LIST(42));
SELECT UNLIST(LIST(42));
SELECT UNNEST(LIST(x)) AS x, UNNEST(LIST(x)) AS x FROM x ORDER BY x;
SELECT x, UNNEST(LIST(x)) AS x, UNNEST(LIST(x + 1)) AS x FROM x GROUP BY x ORDER BY x;
SELECT x, UNNEST(x) AS x FROM (SELECT x, LIST(x) AS x FROM x GROUP BY x) AS x ORDER BY x;
SELECT x, UNNEST(x) + 1 AS x FROM (SELECT x, LIST(x) AS x FROM x GROUP BY x) AS x ORDER BY x;
SELECT x, {'x': x, 'x': x} AS x FROM (SELECT x, LIST(x) AS x FROM x GROUP BY x) AS x WHERE x < 3 ORDER BY x;
SELECT LIST({'x': x, 'x': x}) AS x FROM (SELECT x, LIST(x) AS x FROM x GROUP BY x ORDER BY x) AS x;
SELECT x, LIST({'x': x, 'x': x + 1}) AS x FROM x GROUP BY x ORDER BY x;
SELECT x, LIST({'x': x, 'x': x + 1}) AS x FROM x WHERE x > 2 GROUP BY x ORDER BY x;
SELECT x, LIST(x) FROM (SELECT x % 2 AS x, LIST(x) AS x FROM x GROUP BY x ORDER BY x) AS x GROUP BY x ORDER BY x;
SELECT SUM(x) FROM (SELECT UNNEST(x) AS x FROM (SELECT x, LIST(x) AS x FROM x GROUP BY x ORDER BY x) AS x) AS x;
SELECT SUM(UNNEST(x)) FROM (SELECT x, LIST(x) AS x FROM x GROUP BY x ORDER BY x) AS x;
SELECT LIST(LIST(42));
SELECT LIST(LIST(42));
SELECT LIST();
SELECT LIST() FROM x;
SELECT LIST(x, x) FROM x;
SELECT x, UNNEST(x + 1) AS x FROM (SELECT x, LIST(x) AS x FROM x GROUP BY x) AS x;
SELECT x, UNNEST(x) AS x FROM (SELECT x, LIST(x) AS x FROM x GROUP BY x) AS x;
SELECT x, UNNEST(x) AS x FROM (SELECT x, LIST(x) AS x FROM x GROUP BY x) AS x;
SELECT UNNEST(42);
SELECT UNNEST(42);
SELECT UNNEST(42) FROM x;
SELECT UNNEST(42) FROM x;
SELECT x FROM (SELECT x, LIST(x) AS x FROM x GROUP BY x) AS x WHERE UNNEST(x) > 42;
PRAGMA x;
SELECT ['hello'];
SELECT CAST(['hello'] AS TEXT);
SELECT CAST(x AS TEXT) FROM (VALUES (['hello', 'world']), (['a', 'b', 'c'])) AS x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (1, 2), (2, 3), (2, 4), (2, 5), (3, 6), (5, NULL);
SELECT [1, 2, 3, '4'] AS x, ['a', 'b', 'c'] AS x, [42, NULL] AS x, [NULL, NULL, NULL] AS x, [] AS x;
SELECT x FROM (VALUES ([1, 2, 3, 4]), ([]), ([CAST(NULL AS INT)]), ([42])) AS x;
SELECT x FROM (VALUES (['hello', 'world']), ([]), ([CAST(NULL AS TEXT)]), (['42'])) AS x;
SELECT * FROM (VALUES (([]), ([NULL]), [1, 2])) AS x;
SELECT * FROM (VALUES ([1, 2]), ([]), ([CAST(NULL AS INT)])) AS x;
SELECT [1, 2, 3] UNION ALL SELECT [CAST(NULL AS INT)] UNION ALL SELECT [] UNION ALL SELECT NULL;
SELECT NULL UNION ALL SELECT [] UNION ALL SELECT [CAST(NULL AS INT)] UNION ALL SELECT [1, 2, 3];
SELECT UNNEST(x) AS x FROM (VALUES ([1, 2, 3, 4]), ([]), ([CAST(NULL AS INT)]), ([42])) AS x;
SELECT UNNEST(x) AS x FROM (VALUES ([]), ([1, 2, 3, 4]), ([NULL]), ([42])) AS x;
SELECT * FROM (VALUES ([1, 2]), ([]), (['a'])) AS x;
SELECT CAST([42] AS INT);
SELECT [42] + 4;
SELECT [42, '84'];
SELECT CAST(UNNEST([42]) + 2 AS INT);
SELECT [x, x, 42, NULL] FROM x WHERE x > 2;
SELECT CASE WHEN x = 2 THEN [x, x, 42] ELSE [84, NULL] END FROM x WHERE x > 1 UNION ALL SELECT [CAST(NULL AS INT)];
SELECT CASE WHEN x = 2 THEN CAST([x, x, 42] AS TEXT[]) ELSE ['eeek'] END FROM x WHERE x > 1;
SELECT * FROM (VALUES ([1, NULL, 3]), ([NULL, 2, 3]), ([1, 2, NULL]), (NULL), ([1, 2, 3])) AS x;
PRAGMA x;
SELECT MAP([NULL, NULL, NULL, NULL, NULL], [10, 9, 10, 11, 13]);
SELECT MAP([1, NULL, 3], [6, 5, 4]);
SELECT MAP([1, 2, 3, 4, 1], [10, 9, 8, 7, 6]);
SELECT MAP(NULL);
CREATE TABLE x (x INT[], x TEXT[]);
INSERT INTO x VALUES ([7, 5, 7], ['a', 'b', 'c']);
SELECT MAP(x, x) FROM x;
SELECT MAP([10], []);
SELECT MAP(10, 12);
SELECT MAP([10], [10]);
SELECT MAP([10], 10);
SELECT MAP([10, 20], [10]);
CREATE TABLE x AS SELECT MAP([1, 2, 3], [10, 9, 10]) AS x;
SELECT STRUCT_EXTRACT(x, 'key') FROM x;
CREATE TABLE x (x INT[], x INT[]);
INSERT INTO x VALUES ([1], [2]), (NULL, [4]);
SELECT MAP(x, x) FROM x;
CREATE TABLE x (x INT[], x INT[]);
INSERT INTO x VALUES ([1], [2]), ([4], NULL);
SELECT MAP(x, x) FROM x;
CREATE TABLE x (x MAP(INT, INT));
SELECT * FROM x;
INSERT INTO x VALUES (MAP([1], [2])), (MAP([1, 2, 3], [4, 5, 6]));
SELECT * FROM x;
PRAGMA x;
SELECT MAP([1, 2, 3], [10, 9, 8]);
SELECT MAP([{'x': 1, 'x': 2}, {'x': 3, 'x': 4}], [{'x': 1, 'x': 2}, {'x': 3, 'x': 4}]);
SELECT MAP([1, 2, 3], [6, NULL, 4]);
SELECT MAP([1, 2, 3, 4], [10, 9, 8, 7]);
SELECT MAP([], []);
SELECT MAP();
CREATE TABLE x (x INT[], x TEXT[]);
INSERT INTO x VALUES ([5, 7], ['test', 'string']), ([6, 3], ['foo', 'bar']);
SELECT MAP(x, x) FROM x;
INSERT INTO x VALUES ([5, 7], ['also_test', 'also_string']);
SELECT MAP(x, x) FROM x;
SELECT MAP([[1], [2], [3], [4]], [10, 9, 8, 7]);
PRAGMA x;
CREATE TABLE x AS SELECT STR_SPLIT('my yay', ' ') AS x, x AS x FROM x;
SELECT LIST_TRANSFORM(x, x -> {'x': MAP {'x': CAST(1 AS TEXT), 'x': CAST(x AS TEXT)}}) FROM x;
SELECT CARDINALITY(NULL);
SELECT CARDINALITY(MAP([1, 2, 3, 4], [10, 9, 8, 7]));
SELECT CARDINALITY(MAP([], []));
SELECT CARDINALITY(MAP());
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (5, 2), (6, 3), (2, 2), (7, 3), (3, 3), (4, 4);
SELECT x, CARDINALITY(x) FROM (SELECT x, MAP(x, x) AS x FROM (SELECT LIST(x) AS x, LIST(x) AS x, x FROM x GROUP BY x) AS x) AS x ORDER BY ALL;
SELECT x, CARDINALITY(x) FROM (SELECT x, MAP(x, x) AS x FROM (SELECT LIST(x) AS x, LIST(x) AS x, x FROM x WHERE x < 3 GROUP BY x) AS x) AS x ORDER BY ALL;
SELECT CARDINALITY(x) FROM (SELECT MAP([1], [2]) FROM x AS x) AS x;
SELECT x, x, CASE WHEN x > 1 THEN CARDINALITY(x) ELSE 0 END FROM (SELECT x, MAP(x, x) AS x FROM (SELECT x % 4 AS x, LIST(x) AS x, LIST(x) AS x FROM x AS x GROUP BY x) AS x) AS x;
SELECT MAP_CONCAT(MAP([3, 4, 5], ['a', 'b', 'c']), MAP([1], ['d']));
SELECT MAP_CONCAT(MAP([3, 4, 5], ['a', 'b', 'c']), MAP([], []));
SELECT MAP_CONCAT(MAP([], []), MAP([], []));
SELECT MAP_CONCAT(MAP([], []), MAP([3, 4, 5], ['a', 'b', 'c']));
SELECT MAP_CONCAT(MAP([], []), NULL);
SELECT MAP_CONCAT(NULL, NULL);
SELECT MAP_CONCAT(MAP([1], NULL), NULL);
SELECT MAP_CONCAT(MAP([1], [1]), NULL);
SELECT MAP_CONCAT(MAP([3, 4, 5], ['a', 'b', 'c']), MAP([3, 4, 5], ['a', 'b', 'c']), MAP([3, 4, 5], ['a', 'b', 'd']));
SELECT MAP_CONCAT();
SELECT MAP_CONCAT(MAP([], []));
CREATE TABLE x (x MAP(BIGINT, TEXT), x MAP(BIGINT, TEXT), x MAP(BIGINT, TEXT));
INSERT INTO x VALUES (MAP([3, 4, 2], ['abc', 'over_twelve_characters', 'input']), MAP([3, 1, 5, 2], ['cba', 'a', 'b', 'c']), MAP([3, 7, 6], ['1', NULL, '123'])), (MAP([42, 1, 0], ['tiny', 'small', 'bigger']), MAP([0, 42, 1], ['tiny', 'small', 'bigger']), MAP([1], ['this is a long string'])), (MAP([5, 1337, 0], ['long', 'longer', 'longest']), MAP([], []), NULL), (NULL, NULL, NULL);
SELECT MAP_CONCAT(x, x, x) FROM x;
SELECT MAP_CONCAT(x, x, x) FROM x WHERE x <> 0;
SELECT MAP_CONCAT(x, x, x) FROM x WHERE x = 1;
DROP TABLE x;
CREATE TABLE x AS SELECT MAP(x, x) AS x, MAP(x, x) AS x FROM (SELECT RANGE(0, 3000) AS x, [x + 3000 FOR x IN RANGE(0, 3000)] AS x);
SELECT MAP_CONCAT(x, x) FROM x;
SELECT MAP(RANGE(0, 6000), RANGE(0, 6000));
DROP TABLE x;
CREATE TABLE x AS SELECT MAP([x], [x]) AS x, MAP([x + 1], [x + 1]) AS x FROM (SELECT * FROM x AS x);
SELECT MAP_CONCAT(x, x) FROM x;
SELECT MAP(RANGE(x, x + 2), RANGE(x, x + 2)) FROM (SELECT * FROM x AS x);
SELECT MAP(x, x) AS x FROM x AS x WHERE x <> [] AND x <> [NULL];
SELECT MAP_CONCAT(x, x, x) FROM (SELECT MAP(x, x) AS x FROM x AS x WHERE x <> [] AND x <> [NULL]);
PRAGMA x;
SELECT MAP {};
SELECT MAP {'x': 'world', 'x': 'WORLD'};
SELECT MAP {'x': 'a', 'x': 'b'};
SELECT MAP {'x': 'a' || x} FROM x AS x;
SELECT MAP {'x': [x + 1]} FROM x AS x;
SELECT MAP {'x': 'a' || x} FROM x AS x;
PRAGMA x;
SELECT MAP_CONTAINS_ENTRY(MAP([1, 2, 3], [4, 5, 6]), 2, 5) AS x;
SELECT MAP_CONTAINS_VALUE(MAP([1, 2, 3], [4, 5, 6]), 10) AS x;
SELECT MAP_CONTAINS(MAP([1, 2, 3], [4, 5, 6]), 1) AS x;
SELECT MAP_CONTAINS(MAP([1, 2, 3], [4, 5, 6]), 6) AS x;
SELECT MAP_CONTAINS_VALUE(MAP([1, 2, 3], [4, 5, 6]), 4) AS x;
SELECT MAP_CONTAINS_VALUE(MAP([1, 2, 3], [4, 5, 6]), 2) AS x;
SELECT MAP_CONTAINS_ENTRY(MAP([], []), 1, 2) AS x;
SELECT MAP_CONTAINS(MAP([], []), 1) AS x;
SELECT MAP_CONTAINS_VALUE(MAP([], []), 1) AS x;
CREATE TABLE x (x MAP(INT, INT), x INT, x INT, x BOOLEAN, x BOOLEAN);
INSERT INTO x (x, x, x, x, x) VALUES (MAP([1, 2, 3], [4, 5, 6]), 2, 5, TRUE, TRUE), (MAP([7, 8, 9], [10, 11, 12]), 8, 11, TRUE, TRUE), (MAP([13, 14, 15], [16, 17, 18]), 14, 17, TRUE, TRUE), (MAP([19, 20, 21], [22, 23, 24]), 20, 23, TRUE, TRUE), (MAP([25, 26, 27], [28, 29, 30]), 26, 29, TRUE, TRUE), (MAP([1, 2, 3], [4, 5, 6]), 10, 7, FALSE, FALSE), (MAP([7, 8, 9], [10, 11, 12]), 1, 13, FALSE, FALSE), (MAP([13, 14, 15], [16, 17, 18]), 19, 20, FALSE, FALSE), (MAP([19, 20, 21], [22, 23, 24]), 25, 26, FALSE, FALSE), (MAP([25, 26, 27], [28, 29, 30]), 31, 32, FALSE, FALSE), (MAP([1, 2, 3], [4, 5, 6]), 2, 7, TRUE, FALSE), (MAP([7, 8, 9], [10, 11, 12]), 10, 11, FALSE, TRUE), (MAP([13, 14, 15], [16, 17, 18]), 14, 20, TRUE, FALSE), (MAP([19, 20, 21], [22, 23, 24]), 25, 23, FALSE, TRUE), (MAP([25, 26, 27], [28, 29, 30]), 26, 31, TRUE, FALSE);
SELECT BOOL_AND(MAP_CONTAINS(x, x) = x) = BOOL_AND(MAP_CONTAINS_VALUE(x, x) = x) FROM x;
SELECT 'my_key' IN MAP(['my_key'], ['my_value']) AS x;
SELECT 'my_keyz' IN MAP(['my_key'], ['my_value']) AS x;
PRAGMA x;
SELECT MAP_ENTRIES(MAP());
SELECT MAP_ENTRIES(MAP_FROM_ENTRIES([('a', 5)]));
SELECT MAP_ENTRIES(MAP_FROM_ENTRIES([('a', 5), ('b', 6), ('x', 21), ('abc', 0)]));
SELECT MAP_ENTRIES(MAP([5], [NULL]));
SELECT MAP_ENTRIES(MAP_FROM_ENTRIES([('a', 5), ('b', 6), ('x', 21), ('abc', 0)]));
SELECT MAP_ENTRIES(MAP());
SELECT MAP_ENTRIES(MAP_FROM_ENTRIES([('a', 5)]));
SELECT MAP_ENTRIES(MAP_FROM_ENTRIES([('a', 5), ('b', 6), ('x', 21), ('abc', 0)]));
SELECT MAP_ENTRIES(MAP([5], [NULL]));
SELECT MAP_ENTRIES(MAP_FROM_ENTRIES([('a', 5), ('b', 6), ('x', 21), ('abc', 0)]));
SELECT MAP_ENTRIES(MAP([], []));
SELECT MAP_ENTRIES(MAP(NULL, NULL));
SELECT MAP_ENTRIES(NULL);
SELECT MAP_ENTRIES(CAST(NULL AS MAP(NULL, NULL)));
SELECT MAP_ENTRIES(CAST(NULL AS MAP(INT, BIGINT)));
PRAGMA x;
SELECT MAP_KEYS(MAP([], []));
SELECT MAP_KEYS(MAP(['a'], [5]));
SELECT MAP_KEYS(MAP(['a', 'b', 'c', 'd'], [5, 1, 8, 3]));
SELECT MAP_KEYS(NULL);
CREATE TABLE x (x STRUCT(x INT, x TEXT)[]);
INSERT INTO x VALUES ([(1, 'x'), (2, 'y'), (4, 's')]);
SELECT MAP_KEYS(MAP_FROM_ENTRIES(x)) FROM x;
INSERT INTO x VALUES ([(2, 'a'), (3, 'b')]);
INSERT INTO x VALUES ([(6, 'h'), (7, 'g')]);
SELECT MAP_KEYS(MAP_FROM_ENTRIES(x)) FROM x;
INSERT INTO x VALUES (NULL);
SELECT MAP_KEYS(MAP_FROM_ENTRIES(x)) FROM x;
CREATE TABLE x (x MAP(INT, TEXT)[]);
INSERT INTO x VALUES ([MAP([5, 3, 2], ['a', 'c', 'b']), MAP([1], [NULL]), MAP([7, 9, 1, 3, 5, 6], ['ab', 'c', 'd', 'ef', 'ba', 'he'])]);
SELECT LIST_APPLY(x, x -> MAP_KEYS(x)) FROM x;
SELECT MAP_KEYS_MACRO(MAP_FROM_ENTRIES(x)) FROM x;
SELECT x, LIST_APPLY(x, x -> ARRAY_SORT(MAP_KEYS(x))) FROM x;
SELECT x, LIST_APPLY(x, x -> MAP(ARRAY_SORT(MAP_KEYS(x)), ARRAY_SORT(MAP_VALUES(x)))) FROM x;
CREATE TABLE x (x MAP(INT, INT), x INT);
INSERT INTO x VALUES (MAP([7, 4, 9, 1], [NULL, 4, 7, 5]), 0), (MAP([6, 3, 87, 2], [0, NULL, 5, NULL]), 1), (MAP([7, 4, 9], [8, 3, 4]), 2), (MAP([9, 2, 7, 5, 8, 1], [NULL, NULL, 4, 5, 6, 7]), 3);
SELECT MAP_KEYS(x) FROM x WHERE x % 2 <> 0;
SELECT MAP_KEYS(MAP([], []));
SELECT MAP_KEYS(MAP(NULL, NULL));
SELECT MAP_KEYS(NULL);
SELECT MAP_KEYS(CAST(NULL AS MAP(NULL, NULL)));
SELECT MAP_KEYS(CAST(NULL AS MAP(INT, BIGINT)));
PRAGMA x;
SELECT MAP([[1], [2], [3]], [4, 2, 0]);
CREATE TABLE x (x INT[][], x TEXT[]);
INSERT INTO x VALUES ([[2], [3], [4]], ['a', 'b', 'c']);
INSERT INTO x VALUES ([[5], [6], [7]], ['d', 'e', 'f']);
INSERT INTO x VALUES ([[8], [9], [10]], ['g', 'h', 'i']);
SELECT MAP(x, x) FROM x;
SELECT MAP([[1, 2], [2, 1], [3, 1], [4, 2], [4, 2, 0], [1, 2]], [NULL, NULL, NULL, NULL, NULL, NULL]);
SELECT MAP([[1, 2], [2, 1], [3, 1], [4, 2], [4, 2, 0], NULL], [NULL, NULL, NULL, NULL, NULL, NULL]);
SELECT MAP([{'x': TRUE}, {'x': FALSE}, {'x': NULL}], [4, 2, 0]);
SELECT MAP([{'x': TRUE}, {'x': FALSE}, {'x': NULL}, {'x': TRUE}], ['n', 'o', 'p', 'e']);
SELECT MAP([{'x': 0}, {'x': 1}, NULL, {'x': 2}, {'x': 3}], ['e', 'r', 'r', 'o', 'r']);
SELECT MAP([MAP([5], [4]), MAP([10], [2]), MAP([2, 3], [3, 2]), MAP([10], [3]), MAP([3, 2], [2, 3])], [0, 1, 2, 3, 4]);
SELECT MAP([MAP([5], [4]), MAP([10], [2]), MAP([2, 3], [3, 2]), MAP([10], [3]), MAP([3, 2], [2, 3]), MAP([5], [4])], [0, 1, 2, 3, 4, 5]);
SELECT MAP([MAP([5], [4]), MAP([10], [2]), MAP([2, 3], [3, 2]), NULL, MAP([3, 2], [2, 3])], [0, 1, 2, 3, 4]);
PRAGMA x;
SELECT x[1] FROM (SELECT MAP([1, 2, 3, 4], [10, 9, 8, 7]) AS x) AS x;
SELECT x[0] FROM (SELECT MAP([1, 2, 3, 4, 5], [10, 9, 8, 7, 11]) AS x) AS x;
SELECT x[NULL] FROM (SELECT MAP([1, 2, 3, 4, 5, NULL], [10, 9, 8, 7, 11, 42]) AS x) AS x;
SELECT x[NULL] FROM (SELECT MAP([1, 2, 3, 4, 5], [10, 9, 8, 7, 11]) AS x) AS x;
SELECT x[2] FROM (SELECT MAP([1, 2, 3, 4, 2], [10, 9, 8, 7, 11]) AS x) AS x;
SELECT x[2] FROM (SELECT MAP([], []) AS x) AS x;
SELECT x[2] FROM (SELECT MAP() AS x) AS x;
SELECT x[CAST(2 AS TINYINT) + 0] FROM (SELECT MAP([1, 2, 3, 4, 5], [10, 9, 8, 7, 11]) AS x) AS x;
SELECT x['Jon Lajoie'] FROM (SELECT MAP(['Jon Lajoie', 'Backstreet Boys', 'Tenacious D', 'Jon Lajoie'], [10, 9, 10, 11]) AS x) AS x;
SELECT x['Spice Girls'] FROM (SELECT MAP(['Jon Lajoie', 'Backstreet Boys', 'Tenacious D'], [10, 9, 10]) AS x) AS x;
SELECT x[NULL] FROM (SELECT MAP(['Jon Lajoie', 'Backstreet Boys', 'Tenacious D'], [10, 9, 10]) AS x) AS x;
SELECT x['Tenacious D'] FROM (SELECT MAP(['Jon Lajoie', 'Backstreet Boys', 'Tenacious D'], [10, 9, 1]) AS x) AS x;
SELECT x[0] FROM (SELECT MAP(['Jon Lajoie', 'Backstreet Boys', 'Tenacious D'], [10, 9, 10]) AS x) AS x;
SELECT MAP_EXTRACT(x, 1) FROM (SELECT MAP([1, 2, 3, 4], [10, 9, 8, 7]) AS x) AS x;
SELECT x[1] FROM (SELECT MAP([1, 2, 3, 4], [10, 9, 8, 7]) AS x) AS x;
SELECT MAP_EXTRACT(x, 3) FROM (SELECT MAP([1, 2, 3, 4], [10, 9, 8, 7]) AS x) AS x;
SELECT x[3] FROM (SELECT MAP([1, 2, 3, 4], [10, 9, 8, 7]) AS x) AS x;
SELECT ELEMENT_AT(x, 1) FROM (SELECT MAP([1, 2, 3, 4], [10, 9, 8, 7]) AS x) AS x;
SELECT ELEMENT_AT(x, 3) FROM (SELECT MAP([1, 2, 3, 4], [10, 9, 8, 7]) AS x) AS x;
SELECT x[10] FROM (SELECT MAP(x, x) AS x FROM (SELECT LIST(x) AS x FROM x AS x) AS x) AS x;
SELECT x[1] FROM (SELECT MAP([1, 1, 1, 4], [10, 9, 8, 7]) AS x) AS x;
SELECT x[NULL] FROM (SELECT MAP(['Jon Lajoie', NULL, 'Tenacious D', NULL, NULL], [10, 9, 10, 11, 13]) AS x) AS x;
SELECT x['Jon Lajoie'] FROM (SELECT MAP(['Jon Lajoie', 'Tenacious D'], [10, 1]) AS x) AS x;
SELECT x[10] FROM (SELECT MAP([10, 9, 1, 11, 13], [NULL, NULL, NULL, NULL, NULL]) AS x) AS x;
SELECT x[NULL] FROM (SELECT MAP([NULL, NULL, NULL, NULL, NULL], [10, 9, 10, 11, 13]) AS x) AS x;
SELECT x[NULL] FROM (SELECT MAP([NULL, NULL, NULL, NULL, NULL], [NULL, NULL, NULL, NULL, NULL]) AS x) AS x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (2, 2), (3, 3), (4, 4);
SELECT x FROM (SELECT MAP(x, x) AS x FROM (SELECT LIST(x) AS x, LIST(x) AS x FROM x WHERE x < 4 AND x > 1) AS x) AS x;
SELECT x[2] FROM (SELECT MAP(x, x) AS x FROM (SELECT LIST(x) AS x, LIST(x) AS x FROM x WHERE x < 4 AND x > 1) AS x) AS x;
INSERT INTO x VALUES (5, 1), (1, 2), (2, 3), (6, 4);
SELECT x FROM (SELECT MAP(x, x) AS x FROM (SELECT LIST(x) AS x, LIST(x) AS x FROM x GROUP BY x) AS x) AS x ORDER BY ALL;
SELECT x[1] FROM (SELECT MAP(x, x) AS x FROM (SELECT LIST(x) AS x, LIST(x) AS x FROM x GROUP BY x) AS x) AS x ORDER BY ALL;
INSERT INTO x VALUES (1, 4);
SELECT x[1] FROM (SELECT MAP(x, x) AS x FROM (SELECT LIST(x) AS x, LIST(x) AS x FROM x WHERE x < 4 GROUP BY x) AS x) AS x ORDER BY ALL;
SELECT MAP_EXTRACT(MAP([10, 9, 12, 11, 13], [10, 9, 10, 11, 13]), 10);
SELECT x[1] FROM (SELECT MAP([1], [2]) FROM x AS x) AS x;
SELECT x, x, CASE WHEN x > 1 THEN x[0] ELSE NULL END FROM (SELECT x, MAP(x, x) AS x FROM (SELECT x % 4 AS x, LIST(x) AS x, LIST(x) AS x FROM x AS x GROUP BY x) AS x) AS x;
SELECT MAP_EXTRACT(MAP([], []), NULL);
SELECT MAP_EXTRACT(MAP(NULL, NULL), NULL);
SELECT MAP_EXTRACT(NULL, NULL);
SELECT MAP_EXTRACT(CAST(NULL AS MAP(NULL, NULL)), NULL);
SELECT MAP_EXTRACT(CAST(NULL AS MAP(INT, BIGINT)), NULL);
SELECT MAP_EXTRACT_VALUE(MAP([], []), NULL);
SELECT MAP_EXTRACT_VALUE(MAP(NULL, NULL), NULL);
SELECT MAP_EXTRACT_VALUE(NULL, NULL);
SELECT MAP_EXTRACT_VALUE(CAST(NULL AS MAP(NULL, NULL)), NULL);
SELECT MAP_EXTRACT_VALUE(CAST(NULL AS MAP(INT, BIGINT)), NULL);
PRAGMA x;
SELECT COLUMNS(*) FROM x WHERE NOT x IS NULL;
SELECT MAP([COLUMNS(*)], [COLUMNS(*)])[COLUMNS(*)] FROM x WHERE NOT x IS NULL;
SELECT x[[2, 0]] FROM (SELECT MAP([[0], [1], [2, 0], [3]], [10, 9, 8, 7]) AS x) AS x;
SELECT x[[2, 3]] FROM (SELECT MAP([[0], [1], [2, 0], [3], [5]], [10, 9, 8, 7, 11]) AS x) AS x;
SELECT x[NULL] FROM (SELECT MAP([[2], [NULL], [3, 0], [NULL, NULL], [5, 4], NULL], [10, 9, 8, 7, 11, 42]) AS x) AS x;
SELECT x[NULL] FROM (SELECT MAP([{'x': 3}, {'x': 4}, {'x': 5}, {'x': 6}, {'x': 7}], [10, 9, 8, 7, 11]) AS x) AS x;
SELECT x[2] FROM (SELECT MAP([[2, 2], [2], [3, 3], [4, 4, 4], [2]], [10, 9, 8, 7, 11]) AS x) AS x;
SELECT x[[CAST(2 AS TINYINT), CAST(3 AS BIGINT)]] FROM (SELECT MAP([[1], [2, 3], [3], [2], [3, 2]], [10, 9, 8, 7, 11]) AS x) AS x;
SELECT x[[10, 11]] FROM (SELECT MAP(x, x) AS x FROM (SELECT LIST([x, x + 1]) AS x FROM x AS x) AS x) AS x;
SELECT x[[1]] FROM (SELECT MAP([[1], [1], [1], [4]], [10, 9, 8, 7]) AS x) AS x;
SELECT x[['Tenacious D', 'test']] FROM (SELECT MAP([['Jon Lajoie'], ['test', NULL], ['Tenacious D', 'test'], ['test', 'Tenacious D']], [5, 10, 9, 11]) AS x) AS x;
SELECT x[['Jon Lajoie']] FROM (SELECT MAP([['Jon Lajoie'], ['Tenacious D', 'a', 'b', 'c']], [10, 1]) AS x) AS x;
CREATE TABLE x (x INT[], x INT[]);
INSERT INTO x VALUES ([1], [1]), ([2], [2]), ([3], [3]), ([4], [4]);
SELECT x FROM (SELECT MAP(x, x) AS x FROM (SELECT LIST(x) AS x, LIST(x) AS x FROM x WHERE x[1] < 4 AND x[1] > 1) AS x) AS x;
SELECT x[[2]] FROM (SELECT MAP(x, x) AS x FROM (SELECT LIST(x) AS x, LIST(x) AS x FROM x WHERE x[1] < 4 AND x[1] > 1) AS x) AS x;
INSERT INTO x VALUES ([5], [1]), ([1], [2]), ([2], [3]), ([6], [4]);
SELECT x FROM (SELECT MAP(x, x) AS x FROM (SELECT LIST(x) AS x, LIST(x) AS x FROM x GROUP BY x) AS x) AS x;
SELECT x[[1]] FROM (SELECT MAP(x, x) AS x FROM (SELECT LIST(x) AS x, LIST(x) AS x FROM x GROUP BY x) AS x) AS x;
INSERT INTO x VALUES ([1], [4]);
SELECT x[[1]] FROM (SELECT MAP(x, x) AS x FROM (SELECT LIST(x) AS x, LIST(x) AS x FROM x WHERE x[1] < 4 GROUP BY x) AS x) AS x;
SELECT MAP_EXTRACT(MAP([[10], [9], [12], [11], [13]], [10, 9, 10, 11, 13]), [10]);
SELECT x[{'x': 1, 'x': 2, 'x': 3}] FROM (SELECT MAP([{'x': 1, 'x': 2, 'x': 3}], [2]) FROM x AS x) AS x;
SELECT x, x, CASE WHEN x > 1 THEN x[[0]] ELSE NULL END FROM (SELECT x, MAP(x, x) AS x FROM (SELECT x % 4 AS x, LIST([x]) AS x, LIST(x) AS x FROM x AS x GROUP BY x) AS x) AS x;
SELECT MAP([3, 2, 1], [[[4], [4]], [[4, 3]], [[3, 3, 3], [2], [NULL, 3, 2]]])[1];
CREATE TABLE x (x INT, x INT[], x DECIMAL[]);
INSERT INTO x SELECT * FROM (VALUES (0, [1, 2, 3, 4], [1.0, 2.0, 3.0, 4.0]), (1, [5, 6, 7, 8], [5.0, 6.0, 7.0, 8.0]), (2, [9, 10, 11, 12], [9.0, 10.0, 11.0, 12.0]), (3, [13, 14, 15, 16], [13.0, 14.0, 15.0, 16.0]), (4, [17, 18, 19, 20], [17.0, 18.0, 19.0, 20.0]), (5, [21, 22, 23, 24], [21.0, 22.0, 23.0, 24.0]), (6, [25, 26, 27, 28], [25.0, 26.0, 27.0, 28.0]), (7, [29, 30, 31, 32], [29.0, 30.0, 31.0, 32.0]), (8, [33, 34, 35, 36], [33.0, 34.0, 35.0, 36.0]), (9, [37, 38, 39, 40], [37.0, 38.0, 39.0, 40.0]));
CREATE TABLE x (x INT, x MAP(INT, DECIMAL(18, 3)), x INT[]);
INSERT INTO x SELECT x, MAP(x, x), x FROM x;
INSERT INTO x SELECT x, MAP(x, x), x FROM x;
PRAGMA x;
SELECT TRUE AS x FROM x AS x WHERE NOT x IS NULL;
SELECT MAP([x], [x])[x] IS NOT DISTINCT FROM x AS x FROM x AS x WHERE NOT x IS NULL;
SELECT x, x, x, TRUE FROM (SELECT LIST_DISTINCT(x) AS x, x[-1] AS x, CASE WHEN x IS NULL THEN 0 ELSE LIST_POSITION(x, x) END AS x, CASE WHEN x IS NULL THEN [] ELSE [LIST_POSITION(x, x)] END AS x FROM x AS x WHERE NOT x IS NULL);
SELECT x, x, x, x IS NOT DISTINCT FROM x AS x FROM (SELECT LIST_DISTINCT(x) AS x, MAP(x, RANGE(1, LENGTH(x) + 1)) AS x, x[-1] AS x, CASE WHEN x IS NULL THEN 0 ELSE LIST_POSITION(x, x) END AS x, CASE WHEN x IS NULL THEN NULL ELSE LIST_POSITION(x, x) END AS x, x[x] AS x FROM x AS x WHERE NOT x IS NULL);
CREATE TABLE x (x INT, x INT[], x DECIMAL[]);
INSERT INTO x SELECT * FROM (VALUES (0, [1, 2, 3, 4], [1.0, 2.0, 3.0, 4.0]), (1, [5, 6, 7, 8], [5.0, 6.0, 7.0, 8.0]), (2, [9, 10, 11, 12], [9.0, 10.0, 11.0, 12.0]), (3, [13, 14, 15, 16], [13.0, 14.0, 15.0, 16.0]), (4, [17, 18, 19, 20], [17.0, 18.0, 19.0, 20.0]), (5, [21, 22, 23, 24], [21.0, 22.0, 23.0, 24.0]), (6, [25, 26, 27, 28], [25.0, 26.0, 27.0, 28.0]), (7, [29, 30, 31, 32], [29.0, 30.0, 31.0, 32.0]), (8, [33, 34, 35, 36], [33.0, 34.0, 35.0, 36.0]), (9, [37, 38, 39, 40], [37.0, 38.0, 39.0, 40.0]));
CREATE TABLE x (x INT, x MAP(INT, DECIMAL(18, 3)), x INT[]);
INSERT INTO x SELECT x, MAP(x, x), x FROM x;
INSERT INTO x SELECT x, MAP(x, x), x FROM x;
CREATE TABLE x (x INT, x TEXT);
INSERT INTO x VALUES (1, 'duck'), (2, 'DB'), (3, 'duckDB');
SELECT MAP([x], [x])[x] FROM x WHERE x <> '2';
PRAGMA x;
SELECT MAP_VALUES(MAP([], []));
SELECT MAP_VALUES(MAP(['a'], [5]));
SELECT MAP_VALUES(MAP(['a', 'b', 'c', 'd'], [5, 1, 8, 3]));
SELECT MAP_VALUES(NULL);
SELECT MAP_VALUES(MAP(['a', 'b', 'c', 'd', 'e'], [NULL, 0, 1, NULL, 3]));
CREATE TABLE x (x STRUCT(x INT, x TEXT)[]);
INSERT INTO x VALUES ([(1, 'x'), (2, 'y'), (4, 's')]);
SELECT MAP_VALUES(MAP_FROM_ENTRIES(x)) FROM x;
INSERT INTO x VALUES ([(2, 'a'), (3, 'b')]);
INSERT INTO x VALUES ([(6, 'h'), (7, 'g')]);
SELECT MAP_VALUES(MAP_FROM_ENTRIES(x)) FROM x;
INSERT INTO x VALUES (NULL);
SELECT MAP_VALUES(MAP_FROM_ENTRIES(x)) FROM x;
CREATE TABLE x (x MAP(INT, TEXT)[]);
INSERT INTO x VALUES ([MAP([5, 3, 2], ['a', 'c', 'b']), MAP([1], [NULL]), MAP([7, 9, 1, 3, 5, 6], ['ab', 'c', 'd', 'ef', 'ba', 'he'])]);
SELECT LIST_APPLY(x, x -> MAP_VALUES(x)) FROM x;
SELECT MAP_VALUES_MACRO(MAP_FROM_ENTRIES(x)) FROM x;
SELECT x, LIST_APPLY(x, x -> ARRAY_SORT(MAP_VALUES(x))) FROM x;
SELECT x, LIST_APPLY(x, x -> MAP(ARRAY_SORT(MAP_KEYS(x)), ARRAY_SORT(MAP_VALUES(x)))) FROM x;
CREATE TABLE x (x MAP(INT, INT), x INT);
INSERT INTO x VALUES (MAP([7, 4, 9, 1], [NULL, 4, 7, 5]), 0), (MAP([6, 3, 87, 2], [0, NULL, 5, NULL]), 1), (MAP([7, 4, 9], [8, 3, 4]), 2), (MAP([9, 2, 7, 5, 8, 1], [NULL, NULL, 4, 5, 6, 7]), 3);
SELECT MAP_VALUES(x) FROM x WHERE x % 2 <> 0;
SELECT MAP_VALUES(MAP([], []));
SELECT MAP_VALUES(MAP(NULL, NULL));
SELECT MAP_VALUES(NULL);
SELECT MAP_VALUES(CAST(NULL AS MAP(NULL, NULL)));
SELECT MAP_VALUES(CAST(NULL AS MAP(INT, BIGINT)));
PRAGMA x;
SELECT TRUE, TRUE FROM x;
SELECT MAP_KEYS(x) = x, MAP_VALUES(x) = x FROM (SELECT MAP(x, x) AS x, x FROM x AS x) AS x;
CREATE TABLE x (x BOOLEAN, x INT[], x TEXT[]);
INSERT INTO x SELECT CASE WHEN x >= 500 THEN TRUE ELSE FALSE END AS x, [x FOR x IN RANGE(0, x)] AS x, ['a' || x + x FOR x IN RANGE(0, x)] AS x FROM (SELECT 1 + CAST((RANDOM() * 5) AS BIGINT) AS x, x FROM x AS x);
SELECT x[1] AS x, x[1] AS x, MAP(x, x)[x] AS x FROM x WHERE x AND x <> x;
CREATE TABLE x AS SELECT * FROM (VALUES ([1], [3]), ([2], [9]), ([3], [15]), ([4], [21])) AS x;
SELECT x[1], x[1], MAP(x, x) FROM x WHERE x[1] <> 3;
SELECT x[1], x[1], MAP(x, x) FROM x WHERE x[1] <> 9;
SELECT x[1], x[1], MAP(x, x) FROM x WHERE x[1] <> 15;
SELECT * FROM x LIMIT 1;
PRAGMA x;
SELECT TYPEOF(MAP_KEYS(CAST(NULL AS MAP(TEXT, BIGINT))));
SELECT TYPEOF(MAP_KEYS(NULL));
SELECT TYPEOF(MAP_VALUES(CAST(NULL AS MAP(TEXT, BIGINT))));
SELECT TYPEOF(MAP_VALUES(NULL));
SELECT TYPEOF(MAP_ENTRIES(CAST(NULL AS MAP(TEXT, BIGINT))));
SELECT TYPEOF(MAP_ENTRIES(NULL));
SELECT TYPEOF(MAP_EXTRACT(CAST(NULL AS MAP(TEXT, BIGINT)), 'a'));
SELECT TYPEOF((CAST(NULL AS MAP(TEXT, BIGINT)))['a']);
SELECT TYPEOF(MAP_EXTRACT(NULL, 'a'));
SELECT TYPEOF(MAP_EXTRACT_VALUE(NULL, 'a'));
PRAGMA x;
CREATE TABLE x (x STRUCT(x INT, x TEXT)[]);
INSERT INTO x VALUES ([(1, 'x'), (2, 'y'), (4, 's')]);
INSERT INTO x VALUES ([(2, 'a'), (3, 'b')]);
INSERT INTO x VALUES ([(6, 'h'), (7, 'g')]);
SELECT MAP_FROM_ENTRIES(x) FROM x;
INSERT INTO x VALUES (NULL);
SELECT MAP_FROM_ENTRIES(x) FROM x;
INSERT INTO x VALUES ([(6, 'h'), (7, 'g')]);
SELECT MAP_FROM_ENTRIES(x) FROM x;
PRAGMA x;
CREATE TABLE x (x STRUCT(x INT, x TEXT)[]);
INSERT INTO x VALUES ([(1, 'x'), (2, 'y'), (4, 's')]);
INSERT INTO x VALUES ([(2, 'a'), (3, 'b')]);
INSERT INTO x VALUES ([(6, 'h'), (7, 'g')]);
INSERT INTO x VALUES ([(10, NULL), (7, 'g')]);
SELECT MAP_FROM_ENTRIES(x) FROM x;
SELECT MAP_FROM_ENTRIES(x) FROM x;
INSERT INTO x VALUES ([NULL, NULL]);
SELECT MAP_FROM_ENTRIES(x) FROM x;
PRAGMA x;
CREATE TABLE x AS SELECT MAP_FROM_ENTRIES([('a', 'x'), ('b', 'y')]) AS x;
SELECT * FROM x;
SELECT x['a'] FROM x;
CREATE TABLE x AS SELECT MAP_FROM_ENTRIES([('a', 'x'), ('a', 'y')]) AS x;
CREATE TABLE x AS SELECT MAP_FROM_ENTRIES([(CAST(123 AS TINYINT), 'x'), (-CAST(123 AS TINYINT), 'y')]) AS x;
SELECT * FROM x;
SELECT x[123] FROM x;
CREATE TABLE x AS SELECT MAP_FROM_ENTRIES([(123, 'x'), (123, 'y')]) AS x;
CREATE TABLE x AS SELECT MAP_FROM_ENTRIES([(CAST(123 AS SMALLINT), 'x'), (-CAST(123 AS SMALLINT), 'y')]) AS x;
SELECT * FROM x;
SELECT x[123] FROM x;
CREATE TABLE x AS SELECT MAP_FROM_ENTRIES([(123, 'x'), (123, 'y')]) AS x;
CREATE TABLE x AS SELECT MAP_FROM_ENTRIES([(CAST(123 AS INT), 'x'), (-CAST(123 AS INT), 'y')]) AS x;
SELECT * FROM x;
SELECT x[123] FROM x;
CREATE TABLE x AS SELECT MAP_FROM_ENTRIES([(123, 'x'), (123, 'y')]) AS x;
CREATE TABLE x AS SELECT MAP_FROM_ENTRIES([(CAST(123 AS BIGINT), 'x'), (-CAST(123 AS BIGINT), 'y')]) AS x;
SELECT * FROM x;
SELECT x[123] FROM x;
CREATE TABLE x AS SELECT MAP_FROM_ENTRIES([(123, 'x'), (123, 'y')]) AS x;
CREATE TABLE x AS SELECT MAP_FROM_ENTRIES([(CAST(123 AS INT128), 'x'), (-CAST(123 AS INT128), 'y')]) AS x;
SELECT * FROM x;
SELECT x[123] FROM x;
CREATE TABLE x AS SELECT MAP_FROM_ENTRIES([(123, 'x'), (123, 'y')]) AS x;
CREATE TABLE x AS SELECT MAP_FROM_ENTRIES([(TRUE, 'x'), (FALSE, 'y')]) AS x;
SELECT * FROM x;
SELECT x[TRUE] FROM x;
CREATE TABLE x AS SELECT MAP_FROM_ENTRIES([(TRUE, 'x'), (TRUE, 'y')]) AS x;
CREATE TABLE x AS SELECT MAP_FROM_ENTRIES([(CAST('\xF0\x9F\xA6\x86' AS BLOB), 'x'), (CAST('\xF0\x9F\xA6\x87' AS BLOB), 'y')]) AS x;
SELECT * FROM x;
SELECT x[CAST('\xF0\x9F\xA6\x86' AS BLOB)] FROM x;
CREATE TABLE x AS SELECT MAP_FROM_ENTRIES([(CAST('\xF0\x9F\xA6\x86' AS BLOB), 'x'), (CAST('\xF0\x9F\xA6\x86' AS BLOB), 'y')]) AS x;
CREATE TABLE x AS SELECT MAP_FROM_ENTRIES([(CAST('1992-09-20' AS DATE), 'x'), (CAST('1992-12-20' AS DATE), 'y')]) AS x;
SELECT * FROM x;
SELECT x[CAST('1992-09-20' AS DATE)] FROM x;
CREATE TABLE x AS SELECT MAP_FROM_ENTRIES([(CAST('1992-09-20' AS DATE), 'x'), (CAST('1992-09-20' AS DATE), 'y')]) AS x;
CREATE TABLE x AS SELECT MAP_FROM_ENTRIES([(CAST('12.3' AS DOUBLE), 'x'), (CAST('12.4' AS DOUBLE), 'y')]) AS x;
SELECT * FROM x;
SELECT x[CAST('12.3' AS DOUBLE)] FROM x;
CREATE TABLE x AS SELECT MAP_FROM_ENTRIES([(CAST('12.3' AS DOUBLE), 'x'), (CAST('12.3' AS DOUBLE), 'y')]) AS x;
CREATE TABLE x AS SELECT MAP_FROM_ENTRIES([(CAST('12.3' AS REAL), 'x'), (CAST('12.4' AS REAL), 'y')]) AS x;
SELECT * FROM x;
SELECT x[CAST('12.3' AS REAL)] FROM x;
CREATE TABLE x AS SELECT MAP_FROM_ENTRIES([(CAST('12.3' AS REAL), 'x'), (CAST('12.3' AS REAL), 'y')]) AS x;
CREATE TABLE x AS SELECT MAP_FROM_ENTRIES([(CAST('12.3' AS DECIMAL(18, 3)), 'x'), (CAST('12.4' AS DECIMAL(18, 3)), 'y')]) AS x;
SELECT * FROM x;
SELECT x[CAST('12.3' AS DECIMAL(18, 3))] FROM x;
CREATE TABLE x AS SELECT MAP_FROM_ENTRIES([(CAST('12.3' AS DECIMAL(18, 3)), 'x'), (CAST('12.3' AS DECIMAL(18, 3)), 'y')]) AS x;
CREATE TABLE x AS SELECT MAP_FROM_ENTRIES([((CAST('2022-01-02 01:00:00' AS TIMESTAMP) - CAST('2022-01-01' AS TIMESTAMP)), 'x'), ((CAST('2022-01-02 01:00:00' AS TIMESTAMP) - CAST('2021-01-01' AS TIMESTAMP)), 'y')]) AS x;
SELECT * FROM x;
SELECT x[(CAST('2022-01-02 01:00:00' AS TIMESTAMP) - CAST('2022-01-01' AS TIMESTAMP))] FROM x;
CREATE TABLE x AS SELECT MAP_FROM_ENTRIES([((CAST('2022-01-02 01:00:00' AS TIMESTAMP) - CAST('2022-01-01' AS TIMESTAMP)), 'x'), ((CAST('2022-01-02 01:00:00' AS TIMESTAMP) - CAST('2022-01-01' AS TIMESTAMP)), 'y')]) AS x;
CREATE TABLE x AS SELECT MAP_FROM_ENTRIES([(CAST('12:30:00' AS TIME), 'x'), (CAST('00:30:00' AS TIME), 'y')]) AS x;
SELECT * FROM x;
SELECT x[CAST('12:30:00' AS TIME)] FROM x;
CREATE TABLE x AS SELECT MAP_FROM_ENTRIES([(CAST('12:30:00' AS TIME), 'x'), (CAST('12:30:00' AS TIME), 'y')]) AS x;
CREATE TABLE x AS SELECT MAP_FROM_ENTRIES([(CAST('1992-09-20 11:30:00' AS TIMESTAMP), 'x'), (CAST('1992-10-20 11:30:00' AS TIMESTAMP), 'y')]) AS x;
SELECT * FROM x;
SELECT x[CAST('1992-09-20 11:30:00' AS TIMESTAMP)] FROM x;
CREATE TABLE x AS SELECT MAP_FROM_ENTRIES([(CAST('1992-09-20 11:30:00' AS TIMESTAMP), 'x'), (CAST('1992-09-20 11:30:00' AS TIMESTAMP), 'y')]) AS x;
CREATE TABLE x AS SELECT MAP_FROM_ENTRIES([(CAST('eeccb8c5-9943-b2bb-bb5e-222f4e14b687' AS UUID), 'x'), (CAST('eeccb8c5-9943-b2bb-bb5e-222f4e14b600' AS UUID), 'y')]) AS x;
SELECT * FROM x;
SELECT x[CAST('eeccb8c5-9943-b2bb-bb5e-222f4e14b687' AS UUID)] FROM x;
CREATE TABLE x AS SELECT MAP_FROM_ENTRIES([(CAST('eeccb8c5-9943-b2bb-bb5e-222f4e14b687' AS UUID), 'x'), (CAST('eeccb8c5-9943-b2bb-bb5e-222f4e14b687' AS UUID), 'y')]) AS x;
CREATE TABLE x AS SELECT x, [{'x': 0, 'x': x}] AS x FROM x AS x;
CREATE TABLE x AS SELECT 0 AS x FROM x;
SELECT x.x, MAP_FROM_ENTRIES(x) FROM x JOIN x USING (x);
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
SELECT MAP_FROM_ENTRIES(5);
SELECT MAP_FROM_ENTRIES([5, 4, 3]);
SELECT MAP_FROM_ENTRIES([(1, 'x', 'extra'), (2, 'y', 'extra')]);
SELECT MAP_FROM_ENTRIES([(1, 'x'), (2, 'y', 'extra')]);
SELECT MAP_FROM_ENTRIES([(NULL, 2), ([3, 4], 4)]);
PRAGMA x;
SELECT MAP_FROM_ENTRIES([([1, 2], 2), ([3, 4], 4)]);
SELECT MAP_FROM_ENTRIES([([1, 2], 2), ([1, 2], 4)]);
SELECT MAP_FROM_ENTRIES([({'x': 5, 'x': 7}, 2), ({'x': 3, 'x': 8}, 4)]);
SELECT MAP_FROM_ENTRIES([({'x': 5, 'x': 7}, 2), ({'x': 5, 'x': 7}, 4)]);
SELECT MAP_FROM_ENTRIES([(MAP([5, 3, 4], ['a', 'b', 'c']), 2), (MAP([4, 3, 5], ['a', 'b', 'c']), 4)]);
SELECT MAP_FROM_ENTRIES([(MAP([5, 3, 4], ['a', 'b', 'c']), 2), (MAP([5, 3, 4], ['a', 'b', 'c']), 4)]);
SELECT MAP_FROM_ENTRIES([([{'x': 5, 'x': 7}, {'x': 5, 'x': 7}], 2), ([{'x': 5, 'x': 7}, {'x': 5, 'x': 8}], 4)]);
SELECT MAP_FROM_ENTRIES([([{'x': 5, 'x': 7}, {'x': 5, 'x': 8}], 2), ([{'x': 5, 'x': 7}, {'x': 5, 'x': 8}], 4)]);
PRAGMA x;
SELECT MAP_FROM_ENTRIES(NULL);
CREATE TABLE x (x STRUCT(x INT, x INT)[]);
SELECT x FROM x;
SELECT MAP_FROM_ENTRIES(x) FROM x;
INSERT INTO x VALUES ([(5, 3), (6, 4), (7, 3)]);
SELECT MAP_FROM_ENTRIES(x) FROM x;
INSERT INTO x VALUES (NULL);
SELECT MAP_FROM_ENTRIES(x) FROM x;
PRAGMA x;
SELECT MAP_FROM_ENTRIES([NULL, (1, 'x'), NULL, (2, 'y')]);
SELECT MAP_FROM_ENTRIES(NULL);
SELECT MAP_FROM_ENTRIES([(1, 'x'), (NULL, 'z'), (2, 'y')]);
CREATE TABLE x (x STRUCT(x INT, x INT)[]);
SELECT MAP_FROM_ENTRIES(x) FROM x;
PRAGMA x;
CREATE VIEW x AS SELECT STRUCT_EXTRACT(x, 'orderkey') AS x, STRUCT_EXTRACT(x, 'partkey') AS x, STRUCT_EXTRACT(x, 'suppkey') AS x, STRUCT_EXTRACT(x, 'linenumber') AS x, STRUCT_EXTRACT(x, 'quantity') AS x, STRUCT_EXTRACT(x, 'extendedprice') AS x, STRUCT_EXTRACT(x, 'discount') AS x, STRUCT_EXTRACT(x, 'tax') AS x, STRUCT_EXTRACT(x, 'returnflag') AS x, STRUCT_EXTRACT(x, 'linestatus') AS x, STRUCT_EXTRACT(x, 'shipdate') AS x, STRUCT_EXTRACT(x, 'commitdate') AS x, STRUCT_EXTRACT(x, 'receiptdate') AS x, STRUCT_EXTRACT(x, 'shipinstruct') AS x, STRUCT_EXTRACT(x, 'shipmode') AS x, STRUCT_EXTRACT(x, 'comment') AS x FROM (SELECT {'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x, 'x': x} AS x FROM x) AS x;
PRAGMA TPCH(1);
SELECT x, x, x, x, x, x, x, x, x, x, x, x, x, x, x FROM x ORDER BY x, x LIMIT 5;
SELECT x, x, x, x, x, x, x, x, x, x, x, x, x, x, x FROM x ORDER BY x DESC, x DESC LIMIT 5;
PRAGMA x;
SELECT MIN({'x': x, 'x': x + 2}), MAX({'x': x, 'x': x + 2}), FIRST({'x': x, 'x': x + 2}) FROM x AS x;
SELECT MIN({'x': -x, 'x': -x - 2}), MAX({'x': x + 2, 'x': x + 4}), FIRST({'x': x, 'x': x + 2}) FROM x AS x;
SELECT GROUP_CONCAT(CAST({'x': x, 'x': x + 2} AS TEXT), ',') FROM x AS x;
CREATE VIEW x AS SELECT * FROM (VALUES ({'x': 1, 'x': 0}), ({'x': 1, 'x': 2}), ({'x': 1, 'x': NULL}), ({'x': NULL, 'x': 2}), ({'x': NULL, 'x': NULL}), ({'x': NULL, 'x': 0}), (NULL)) AS x;
SELECT MIN(x), MAX(x) FROM x;
SET x = 1;
SELECT MIN(x), MAX(x), FIRST(x) FROM x;
PRAGMA x;
SELECT {'x': 1, 'x': 2};
SELECT {'x': NULL, 'x': 2};
SELECT {'x': [], 'x': 2};
SELECT {'x': [1, 2, 3], 'x': 2};
SELECT {'x': x, 'x': 2} FROM x AS x;
SELECT {'x': 3, 'x': 4};
SELECT {};
SELECT {'x': 3};
PRAGMA x;
CREATE TABLE x (x STRUCT(x TEXT)[]);
INSERT INTO x (x) VALUES ([{'x': 'value'}]), (NULL), (NULL), (NULL);
SELECT x[1].x AS x FROM x WHERE NOT x IS NULL;
PRAGMA x;
CREATE VIEW x AS SELECT {'x': (x + 1) % 998513, 'x': x + 1} AS x FROM x AS x;
SELECT MIN(x), MAX(x) FROM x;
PRAGMA x;
CREATE TABLE x (x INT, x INT[], x DECIMAL[]);
INSERT INTO x SELECT * FROM (VALUES (0, [1, 2, 3, 4], [1.0, 2.0, 3.0, 4.0]), (1, [5, 6, 7, 8], [5.0, 6.0, 7.0, 8.0]), (2, [9, 10, 11, 12], [9.0, 10.0, 11.0, 12.0]), (3, [13, 14, 15, 16], [13.0, 14.0, 15.0, 16.0]), (4, [17, 18, 19, 20], [17.0, 18.0, 19.0, 20.0]), (5, [21, 22, 23, 24], [21.0, 22.0, 23.0, 24.0]), (6, [25, 26, 27, 28], [25.0, 26.0, 27.0, 28.0]), (7, [29, 30, 31, 32], [29.0, 30.0, 31.0, 32.0]), (8, [33, 34, 35, 36], [33.0, 34.0, 35.0, 36.0]), (9, [37, 38, 39, 40], [37.0, 38.0, 39.0, 40.0]));
CREATE TABLE x (x INT, x STRUCT(x INT[], x DECIMAL[]), x INT[]);
INSERT INTO x SELECT x, {'x': x, 'x': x}, x FROM x;
SELECT * FROM x ORDER BY x;
SELECT * FROM x WHERE x >= 4 ORDER BY x;
PRAGMA x;
SELECT (SELECT {'x': 3});
SELECT (SELECT {'x': 3})['a'];
SELECT (SELECT CASE WHEN 1 = 0 THEN {'x': 3} ELSE NULL END);
SET x = 'nulls_first';
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (1, 2), (2, 3), (2, 4), (2, 5), (3, 6), (5, NULL);
SELECT {'x': 42, 'x': 43};
SELECT x, {'x': x} FROM x ORDER BY x LIMIT 2;
SELECT {'x': 42, 'x': 43} AS x;
SELECT {'x': 42, 'x': 43} AS x;
SELECT {'x': NULL, 'x': NULL} AS x;
SELECT x, STRUCT_EXTRACT({'x': x, 'x': x}, 'xx') AS x FROM x;
SELECT x, ({'x': x, 'x': x}).x AS x FROM x;
SELECT x, (x).x AS x FROM (SELECT x, {'x': x, 'x': x} FROM x) AS x;
SELECT x, STRUCT_EXTRACT({'x': x, 'x': x}, 'xx') AS x FROM x WHERE x > 4;
SELECT x, STRUCT_EXTRACT({'x': x, 'x': x}, 'xx') AS x FROM x WHERE x IS NULL;
SELECT x, STRUCT_EXTRACT({'x': x // 2}, 'xx') AS x FROM x WHERE x > 4;
SELECT x, STRUCT_EXTRACT({'x': x // 2}, 'xx') * 2 AS x FROM x WHERE x > 4;
SELECT x, STRUCT_EXTRACT({'x': x, 'x': x}, 'xx') AS x FROM x ORDER BY x DESC;
SELECT x, STRUCT_EXTRACT({'x': x, 'x': x, 'x': 42}, 'c') AS x FROM x ORDER BY x;
SELECT STRUCT_EXTRACT({'x': 42, 'x': 43}, 'a') FROM x;
SELECT STRUCT_EXTRACT({'x': 42, 'x': 43}, 'a') AS x;
SELECT STRUCT_EXTRACT(STRUCT_EXTRACT({'x': {'x': 'asdf', 'x': NULL}, 'x': 43}, 'a'), 'x') AS x;
SELECT {} FROM x;
SELECT {'x': x + 1} FROM x;
SELECT {'x': x, 'x': x} FROM x;
SELECT {'x': x, 'x': x} FROM x;
SELECT STRUCT_EXTRACT(x, 'e') FROM x;
SELECT STRUCT_EXTRACT(x, 'e') FROM x;
SELECT STRUCT_EXTRACT(x, 'e') FROM x;
SELECT STRUCT_EXTRACT(x, 'e') FROM x;
SELECT STRUCT_EXTRACT({'x': x, 'x': x}, 'zz') FROM x;
SELECT STRUCT_EXTRACT({'x': x, 'x': x}, 'zz') FROM x;
SELECT STRUCT_EXTRACT({'x': x, 'x': x}, x) FROM x;
SELECT STRUCT_EXTRACT({'x': x, 'x': x}, '42') FROM x;
CREATE TABLE x AS SELECT x, {'x': x} FROM x;
SELECT {'x': x, 'x': 'asdf'} FROM x;
SET x = 'nulls_first';
PRAGMA x;
SELECT 0 AND 0, 0 AND 1, 1 AND 0, 1 AND 1, NULL AND 0, NULL AND 1, 0 AND NULL, 1 AND NULL, NULL AND NULL;
SELECT 0 OR 0, 0 OR 1, 1 OR 0, 1 OR 1, NULL OR 0, NULL OR 1, 0 OR NULL, 1 OR NULL, NULL OR NULL;
SELECT NOT (0), NOT (1), NOT (NULL);
SELECT NULL IS NULL, NOT NULL IS NULL, 42 IS NULL, NOT 42 IS NULL;
SELECT NULL = NULL, NULL <> NULL, 42 = NULL, 42 <> NULL;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (11, 22), (NULL, 21), (13, 22), (12, NULL), (16, NULL);
SELECT x, COUNT(x), SUM(x), MIN(x), MAX(x) FROM x GROUP BY x ORDER BY x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (11, 1), (NULL, 2), (13, 3);
SELECT x IS NULL, NOT x IS NULL, x IS NULL, (x = NULL) IS NULL FROM x ORDER BY x;
SELECT x IS NULL, NOT x IS NULL, x IS NULL, (x = NULL) IS NULL FROM x WHERE x <> 1 ORDER BY x;
PRAGMA x;
SELECT NULL;
SELECT 3 + NULL;
SELECT NULL + 3;
SELECT NULL + NULL;
SELECT 1 + (NULL + NULL);
SET x = FALSE;
SELECT 4 / 0;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (11, 22), (NULL, 21), (13, 22);
SELECT x FROM x;
SELECT CAST(x AS BIGINT) FROM x;
SELECT x / 0 FROM x;
SELECT x / (x - x) FROM x;
SELECT x + x FROM x;
SET x = 'nulls_first';
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (11, 22), (NULL, 21), (13, 22);
SELECT SUM(x), MIN(x), MAX(x) FROM x;
SELECT COUNT(*), COUNT(x), COUNT(x) FROM x;
SELECT x, COUNT(x), SUM(x), MIN(x), MAX(x) FROM x GROUP BY x ORDER BY x;
INSERT INTO x VALUES (12, NULL), (16, NULL);
SELECT x, COUNT(x), SUM(x), MIN(x), MAX(x) FROM x GROUP BY x ORDER BY x;
INSERT INTO x VALUES (NULL, NULL), (NULL, 22);
SELECT x, COUNT(x), SUM(x), MIN(x), MAX(x) FROM x GROUP BY x ORDER BY x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
SELECT x + x FROM x AS x;
PRAGMA x;
CREATE TABLE x AS SELECT CAST(x AS BIGINT) AS x FROM (VALUES (-9223372036854775808), (0), (9223372036854775807)) AS x;
SELECT CAST(x AS UTINYINT) FROM x;
SELECT CAST(x AS USMALLINT) FROM x;
SELECT CAST(x AS UINTEGER) FROM x;
SELECT CAST(x AS UBIGINT) FROM x;
SELECT CAST(x AS UTINYINT) FROM x WHERE x >= 0 ORDER BY x;
SELECT CAST(x AS USMALLINT) FROM x WHERE x >= 0 ORDER BY x;
SELECT CAST(x AS UINTEGER) FROM x WHERE x >= 0 ORDER BY x;
SELECT CAST(x AS UBIGINT) FROM x WHERE x >= 0 ORDER BY x;
SELECT TRY_CAST(x AS UTINYINT) FROM x ORDER BY x;
SELECT TRY_CAST(x AS USMALLINT) FROM x ORDER BY x;
SELECT TRY_CAST(x AS UINTEGER) FROM x ORDER BY x;
SELECT TRY_CAST(x AS UBIGINT) FROM x ORDER BY x;
SELECT CAST(x AS TINYINT) FROM x ORDER BY x;
SELECT TRY_CAST(x AS TINYINT) FROM x ORDER BY x;
SELECT CAST(x AS SMALLINT) FROM x ORDER BY x;
SELECT TRY_CAST(x AS SMALLINT) FROM x ORDER BY x;
SELECT CAST(x AS INT) FROM x ORDER BY x;
SELECT TRY_CAST(x AS INT) FROM x ORDER BY x;
SELECT CAST(CAST(x AS INT128) AS BIGINT) FROM x ORDER BY x;
SELECT CAST(x AS REAL) FROM x ORDER BY x;
SELECT CAST(x AS DOUBLE) FROM x ORDER BY x;
SELECT CAST(x AS BOOLEAN) FROM x ORDER BY x;
SELECT CAST(x AS TEXT) FROM x ORDER BY x;
CREATE TABLE x AS SELECT * FROM (VALUES ('   '), ('blablabla'), ('-10000000000000000000'), ('-9223372036854775808'), ('0'), ('9223372036854775807'), ('10000000000000000000')) AS x;
SELECT CAST(x AS BIGINT) FROM x;
SELECT TRY_CAST(x AS BIGINT) FROM x;
SELECT CAST(CAST(x AS DECIMAL(3, 0)) AS BIGINT) FROM x ORDER BY x;
SELECT CAST(CAST(x AS DECIMAL(9, 0)) AS BIGINT) FROM x ORDER BY x;
SELECT CAST(CAST(x AS DECIMAL(18, 0)) AS BIGINT) FROM x ORDER BY x;
SELECT CAST(CAST(x AS DECIMAL(38, 0)) AS BIGINT) FROM x ORDER BY x;
SELECT CAST(CAST(x AS DECIMAL(38, 20)) AS BIGINT) FROM x ORDER BY x;
SELECT CAST(TRY_CAST(x AS DECIMAL(3, 0)) AS BIGINT) FROM x ORDER BY x;
SELECT CAST(TRY_CAST(x AS DECIMAL(9, 0)) AS BIGINT) FROM x ORDER BY x;
SELECT CAST(TRY_CAST(x AS DECIMAL(18, 0)) AS BIGINT) FROM x ORDER BY x;
SELECT CAST(TRY_CAST(x AS DECIMAL(38, 20)) AS BIGINT) FROM x ORDER BY x;
PRAGMA x;
PRAGMA x;
CREATE TABLE x AS SELECT CAST(x AS INT128) AS x FROM (VALUES (-170141183460469231731687303715884105728), (0), (170141183460469231731687303715884105727)) AS x;
SELECT CAST(x AS UTINYINT) FROM x;
SELECT CAST(x AS USMALLINT) FROM x;
SELECT CAST(x AS UINTEGER) FROM x;
SELECT CAST(x AS UBIGINT) FROM x;
SELECT CAST(x AS UTINYINT) FROM x WHERE x >= 0 ORDER BY x;
SELECT CAST(x AS USMALLINT) FROM x WHERE x >= 0 ORDER BY x;
SELECT CAST(x AS UINTEGER) FROM x WHERE x >= 0 ORDER BY x;
SELECT CAST(x AS UBIGINT) FROM x WHERE x >= 0 ORDER BY x;
SELECT TRY_CAST(x AS UTINYINT) FROM x ORDER BY x;
SELECT TRY_CAST(x AS USMALLINT) FROM x ORDER BY x;
SELECT TRY_CAST(x AS UINTEGER) FROM x ORDER BY x;
SELECT TRY_CAST(x AS UBIGINT) FROM x ORDER BY x;
SELECT CAST(x AS TINYINT) FROM x ORDER BY x;
SELECT TRY_CAST(x AS TINYINT) FROM x ORDER BY x;
SELECT CAST(x AS SMALLINT) FROM x ORDER BY x;
SELECT TRY_CAST(x AS SMALLINT) FROM x ORDER BY x;
SELECT CAST(x AS INT) FROM x ORDER BY x;
SELECT TRY_CAST(x AS INT) FROM x ORDER BY x;
SELECT CAST(x AS BIGINT) FROM x ORDER BY x;
SELECT TRY_CAST(x AS BIGINT) FROM x ORDER BY x;
SELECT CAST(x AS REAL) FROM x ORDER BY x;
SELECT CAST(x AS DOUBLE) FROM x ORDER BY x;
SELECT CAST(x AS BOOLEAN) FROM x ORDER BY x;
SELECT CAST(x AS TEXT) FROM x ORDER BY x;
CREATE TABLE x AS SELECT * FROM (VALUES ('   '), ('blablabla'), ('-1000000000000000000000000000000000000000'), ('-170141183460469231731687303715884105728'), ('0'), ('170141183460469231731687303715884105727'), ('1000000000000000000000000000000000000000')) AS x;
SELECT CAST(x AS INT128) FROM x;
SELECT TRY_CAST(x AS INT128) FROM x;
SELECT CAST(CAST(x AS DECIMAL(3, 0)) AS INT128) FROM x ORDER BY x;
SELECT CAST(CAST(x AS DECIMAL(9, 0)) AS INT128) FROM x ORDER BY x;
SELECT CAST(CAST(x AS DECIMAL(18, 0)) AS INT128) FROM x ORDER BY x;
SELECT CAST(CAST(x AS DECIMAL(38, 0)) AS INT128) FROM x ORDER BY x;
SELECT CAST(TRY_CAST(x AS DECIMAL(3, 0)) AS INT128) FROM x ORDER BY x;
SELECT CAST(TRY_CAST(x AS DECIMAL(9, 0)) AS INT128) FROM x ORDER BY x;
SELECT CAST(TRY_CAST(x AS DECIMAL(18, 0)) AS INT128) FROM x ORDER BY x;
SELECT CAST(TRY_CAST(x AS DECIMAL(38, 0)) AS INT128) FROM x ORDER BY x;
PRAGMA x;
CREATE TABLE x AS SELECT CAST(x AS INT) AS x FROM (VALUES (-2147483648), (0), (2147483647)) AS x;
SELECT CAST(x AS UTINYINT) FROM x;
SELECT CAST(x AS USMALLINT) FROM x;
SELECT CAST(x AS UINTEGER) FROM x;
SELECT CAST(x AS UBIGINT) FROM x;
SELECT CAST(x AS UTINYINT) FROM x WHERE x >= 0 ORDER BY x;
SELECT CAST(x AS USMALLINT) FROM x WHERE x >= 0 ORDER BY x;
SELECT CAST(x AS UINTEGER) FROM x WHERE x >= 0 ORDER BY x;
SELECT CAST(x AS UBIGINT) FROM x WHERE x >= 0 ORDER BY x;
SELECT CAST(TRY_CAST(x AS UTINYINT) AS INT) FROM x ORDER BY x;
SELECT CAST(TRY_CAST(x AS USMALLINT) AS INT) FROM x ORDER BY x;
SELECT CAST(TRY_CAST(x AS UINTEGER) AS INT) FROM x ORDER BY x;
SELECT CAST(TRY_CAST(x AS UBIGINT) AS INT) FROM x ORDER BY x;
SELECT CAST(x AS TINYINT) FROM x ORDER BY x;
SELECT TRY_CAST(x AS TINYINT) FROM x ORDER BY x;
SELECT CAST(x AS SMALLINT) FROM x ORDER BY x;
SELECT TRY_CAST(x AS SMALLINT) FROM x ORDER BY x;
SELECT CAST(CAST(x AS BIGINT) AS INT) FROM x ORDER BY x;
SELECT CAST(CAST(x AS INT128) AS INT) FROM x ORDER BY x;
SELECT CAST(x AS REAL) FROM x ORDER BY x;
SELECT CAST(x AS DOUBLE) FROM x ORDER BY x;
SELECT CAST(x AS BOOLEAN) FROM x ORDER BY x;
SELECT CAST(x AS TEXT) FROM x ORDER BY x;
CREATE TABLE x AS SELECT * FROM (VALUES ('   '), ('blablabla'), ('-10000000000'), ('-2147483648'), ('0'), ('2147483647'), ('10000000000')) AS x;
SELECT CAST(x AS INT) FROM x;
SELECT TRY_CAST(x AS INT) FROM x;
SELECT CAST(CAST(x AS DECIMAL(3, 0)) AS INT) FROM x ORDER BY x;
SELECT CAST(CAST(x AS DECIMAL(9, 0)) AS INT) FROM x ORDER BY x;
SELECT CAST(CAST(x AS DECIMAL(18, 0)) AS INT) FROM x ORDER BY x;
SELECT CAST(CAST(x AS DECIMAL(38, 0)) AS INT) FROM x ORDER BY x;
SELECT CAST(CAST(x AS DECIMAL(3, 0)) AS INT) FROM x ORDER BY x;
SELECT CAST(CAST(x AS DECIMAL(9, 0)) AS INT) FROM x ORDER BY x;
SELECT CAST(CAST(x AS DECIMAL(18, 9)) AS INT) FROM x ORDER BY x;
SELECT CAST(CAST(x AS DECIMAL(38, 29)) AS INT) FROM x ORDER BY x;
SELECT CAST(TRY_CAST(x AS DECIMAL(3, 0)) AS INT) FROM x ORDER BY x;
SELECT CAST(TRY_CAST(x AS DECIMAL(9, 0)) AS INT) FROM x ORDER BY x;
SELECT CAST(TRY_CAST(x AS DECIMAL(18, 9)) AS INT) FROM x ORDER BY x;
SELECT CAST(TRY_CAST(x AS DECIMAL(38, 29)) AS INT) FROM x ORDER BY x;
PRAGMA x;
CREATE TABLE x AS SELECT CAST(x AS SMALLINT) AS x FROM (VALUES (-32768), (0), (32767)) AS x;
SELECT CAST(x AS UTINYINT) FROM x;
SELECT CAST(x AS USMALLINT) FROM x;
SELECT CAST(x AS UINTEGER) FROM x;
SELECT CAST(x AS UBIGINT) FROM x;
SELECT CAST(x AS UTINYINT) FROM x WHERE x >= 0 ORDER BY x;
SELECT CAST(x AS USMALLINT) FROM x WHERE x >= 0 ORDER BY x;
SELECT CAST(x AS UINTEGER) FROM x WHERE x >= 0 ORDER BY x;
SELECT CAST(x AS UBIGINT) FROM x WHERE x >= 0 ORDER BY x;
SELECT CAST(TRY_CAST(x AS UTINYINT) AS SMALLINT) FROM x ORDER BY x;
SELECT CAST(TRY_CAST(x AS USMALLINT) AS SMALLINT) FROM x ORDER BY x;
SELECT CAST(TRY_CAST(x AS UINTEGER) AS SMALLINT) FROM x ORDER BY x;
SELECT CAST(TRY_CAST(x AS UBIGINT) AS SMALLINT) FROM x ORDER BY x;
SELECT CAST(x AS TINYINT) FROM x ORDER BY x;
SELECT CAST(TRY_CAST(x AS TINYINT) AS SMALLINT) FROM x ORDER BY x;
SELECT CAST(CAST(x AS INT) AS SMALLINT) FROM x ORDER BY x;
SELECT CAST(CAST(x AS BIGINT) AS SMALLINT) FROM x ORDER BY x;
SELECT CAST(CAST(x AS INT128) AS SMALLINT) FROM x ORDER BY x;
SELECT CAST(x AS REAL) FROM x ORDER BY x;
SELECT CAST(x AS DOUBLE) FROM x ORDER BY x;
SELECT CAST(x AS BOOLEAN) FROM x ORDER BY x;
SELECT CAST(x AS TEXT) FROM x ORDER BY x;
CREATE TABLE x AS SELECT * FROM (VALUES ('   '), ('blablabla'), ('-100000'), ('-32768'), ('0'), ('32767'), ('100000')) AS x;
SELECT CAST(x AS SMALLINT) FROM x;
SELECT TRY_CAST(x AS SMALLINT) FROM x;
SELECT CAST(CAST(x AS DECIMAL(3, 0)) AS SMALLINT) FROM x ORDER BY x;
SELECT CAST(CAST(x AS DECIMAL(9, 0)) AS SMALLINT) FROM x ORDER BY x;
SELECT CAST(CAST(x AS DECIMAL(18, 0)) AS SMALLINT) FROM x ORDER BY x;
SELECT CAST(CAST(x AS DECIMAL(38, 0)) AS SMALLINT) FROM x ORDER BY x;
SELECT CAST(CAST(x AS DECIMAL(3, 0)) AS SMALLINT) FROM x ORDER BY x;
SELECT CAST(CAST(x AS DECIMAL(9, 5)) AS SMALLINT) FROM x ORDER BY x;
SELECT CAST(CAST(x AS DECIMAL(18, 14)) AS SMALLINT) FROM x ORDER BY x;
SELECT CAST(CAST(x AS DECIMAL(38, 34)) AS SMALLINT) FROM x ORDER BY x;
SELECT CAST(TRY_CAST(x AS DECIMAL(3, 0)) AS SMALLINT) FROM x ORDER BY x;
SELECT CAST(TRY_CAST(x AS DECIMAL(9, 5)) AS SMALLINT) FROM x ORDER BY x;
SELECT CAST(TRY_CAST(x AS DECIMAL(18, 14)) AS SMALLINT) FROM x ORDER BY x;
SELECT CAST(TRY_CAST(x AS DECIMAL(38, 34)) AS SMALLINT) FROM x ORDER BY x;
PRAGMA x;
PRAGMA x;
INSERT INTO x VALUES (0176030871715840, 2.2);
SELECT * FROM x;
SELECT * FROM x;
PRAGMA x;
CREATE TABLE x AS SELECT CAST(x AS TINYINT) AS x FROM (VALUES (-128), (0), (127)) AS x;
SELECT CAST(x AS UTINYINT) FROM x;
SELECT CAST(x AS USMALLINT) FROM x;
SELECT CAST(x AS UINTEGER) FROM x;
SELECT CAST(x AS UBIGINT) FROM x;
SELECT CAST(CAST(x AS UTINYINT) AS TINYINT) FROM x WHERE x >= 0 ORDER BY x;
SELECT CAST(CAST(x AS USMALLINT) AS TINYINT) FROM x WHERE x >= 0 ORDER BY x;
SELECT CAST(CAST(x AS UINTEGER) AS TINYINT) FROM x WHERE x >= 0 ORDER BY x;
SELECT CAST(CAST(x AS UBIGINT) AS TINYINT) FROM x WHERE x >= 0 ORDER BY x;
SELECT TRY_CAST(x AS UTINYINT) FROM x ORDER BY x;
SELECT TRY_CAST(x AS USMALLINT) FROM x ORDER BY x;
SELECT TRY_CAST(x AS UINTEGER) FROM x ORDER BY x;
SELECT TRY_CAST(x AS UBIGINT) FROM x ORDER BY x;
SELECT CAST(CAST(x AS SMALLINT) AS TINYINT) FROM x ORDER BY x;
SELECT CAST(CAST(x AS INT) AS TINYINT) FROM x ORDER BY x;
SELECT CAST(CAST(x AS BIGINT) AS TINYINT) FROM x ORDER BY x;
SELECT CAST(CAST(x AS INT128) AS TINYINT) FROM x ORDER BY x;
SELECT CAST(x AS REAL) FROM x ORDER BY x;
SELECT CAST(x AS DOUBLE) FROM x ORDER BY x;
SELECT CAST(x AS BOOLEAN) FROM x ORDER BY x;
SELECT CAST(CAST(x AS TEXT) AS TINYINT) FROM x ORDER BY x;
CREATE TABLE x AS SELECT * FROM (VALUES ('   '), ('blablabla'), ('-1000'), ('-128'), ('0'), ('127'), ('1000')) AS x;
SELECT CAST(x AS TINYINT) FROM x;
SELECT TRY_CAST(x AS TINYINT) FROM x;
SELECT CAST(CAST(x AS DECIMAL(3, 0)) AS TINYINT) FROM x ORDER BY x;
SELECT CAST(CAST(x AS DECIMAL(9, 0)) AS TINYINT) FROM x ORDER BY x;
SELECT CAST(CAST(x AS DECIMAL(18, 0)) AS TINYINT) FROM x ORDER BY x;
SELECT CAST(CAST(x AS DECIMAL(38, 0)) AS TINYINT) FROM x ORDER BY x;
SELECT CAST(CAST(x AS DECIMAL(3, 1)) AS TINYINT) FROM x ORDER BY x;
SELECT CAST(CAST(x AS DECIMAL(9, 7)) AS TINYINT) FROM x ORDER BY x;
SELECT CAST(CAST(x AS DECIMAL(18, 16)) AS TINYINT) FROM x ORDER BY x;
SELECT CAST(CAST(x AS DECIMAL(38, 36)) AS TINYINT) FROM x ORDER BY x;
SELECT CAST(TRY_CAST(x AS DECIMAL(3, 1)) AS TINYINT) FROM x ORDER BY x;
SELECT CAST(TRY_CAST(x AS DECIMAL(9, 7)) AS TINYINT) FROM x ORDER BY x;
SELECT CAST(TRY_CAST(x AS DECIMAL(18, 16)) AS TINYINT) FROM x ORDER BY x;
SELECT CAST(TRY_CAST(x AS DECIMAL(38, 36)) AS TINYINT) FROM x ORDER BY x;
PRAGMA x;
SELECT TYPEOF(CAST(1 AS UBIGINT) + CAST(1 AS TINYINT));
SELECT TYPEOF(CAST(1 AS UBIGINT) + 1);
SELECT TYPEOF(CAST(1 AS UBIGINT) + 10000);
PRAGMA x;
CREATE TABLE x AS SELECT CAST(x AS UBIGINT) AS x FROM (VALUES (0), (18446744073709551615)) AS x;
SELECT CAST(x AS UTINYINT) FROM x ORDER BY x;
SELECT TRY_CAST(x AS UTINYINT) FROM x ORDER BY x;
SELECT CAST(x AS USMALLINT) FROM x ORDER BY x;
SELECT TRY_CAST(x AS USMALLINT) FROM x ORDER BY x;
SELECT CAST(x AS UINTEGER) FROM x ORDER BY x;
SELECT TRY_CAST(x AS UINTEGER) FROM x ORDER BY x;
SELECT CAST(x AS TINYINT) FROM x ORDER BY x;
SELECT TRY_CAST(x AS TINYINT) FROM x ORDER BY x;
SELECT CAST(x AS SMALLINT) FROM x ORDER BY x;
SELECT TRY_CAST(x AS SMALLINT) FROM x ORDER BY x;
SELECT CAST(x AS INT) FROM x ORDER BY x;
SELECT TRY_CAST(x AS INT) FROM x ORDER BY x;
SELECT CAST(x AS BIGINT) FROM x ORDER BY x;
SELECT TRY_CAST(x AS BIGINT) FROM x ORDER BY x;
SELECT CAST(x AS INT128) FROM x ORDER BY x;
SELECT CAST(x AS REAL) FROM x ORDER BY x;
SELECT CAST(x AS DOUBLE) FROM x ORDER BY x;
SELECT CAST(x AS BOOLEAN) FROM x ORDER BY x;
SELECT CAST(x AS TEXT) FROM x ORDER BY x;
CREATE TABLE x AS SELECT * FROM (VALUES ('   '), ('blablabla'), ('-1000'), ('-1'), ('-0'), ('0'), ('18446744073709551615'), ('100000000000000000000')) AS x;
SELECT CAST(x AS UBIGINT) FROM x;
SELECT TRY_CAST(x AS UBIGINT) FROM x;
SELECT CAST(CAST(x AS DECIMAL(3, 0)) AS UBIGINT) FROM x ORDER BY x;
SELECT CAST(CAST(x AS DECIMAL(9, 0)) AS UBIGINT) FROM x ORDER BY x;
SELECT CAST(CAST(x AS DECIMAL(18, 0)) AS UBIGINT) FROM x ORDER BY x;
SELECT CAST(CAST(x AS DECIMAL(38, 0)) AS UBIGINT) FROM x ORDER BY x;
SELECT CAST(CAST(x AS DECIMAL(38, 20)) AS UBIGINT) FROM x ORDER BY x;
SELECT CAST(TRY_CAST(x AS DECIMAL(3, 0)) AS UBIGINT) FROM x ORDER BY x;
SELECT CAST(TRY_CAST(x AS DECIMAL(9, 0)) AS UBIGINT) FROM x ORDER BY x;
SELECT CAST(TRY_CAST(x AS DECIMAL(18, 0)) AS UBIGINT) FROM x ORDER BY x;
SELECT CAST(TRY_CAST(x AS DECIMAL(38, 20)) AS UBIGINT) FROM x ORDER BY x;
PRAGMA x;
CREATE TABLE x AS SELECT CAST(x AS UINT128) AS x FROM (VALUES (CAST(0 AS UINT128)), (CAST(1 AS UINT128)), (CAST('340282366920938463463374607431768211455' AS UINT128))) AS x;
SELECT CAST(x AS TINYINT) FROM x;
SELECT CAST(x AS SMALLINT) FROM x;
SELECT CAST(x AS INT) FROM x;
SELECT CAST(x AS BIGINT) FROM x;
SELECT TRY_CAST(x AS TINYINT) FROM x ORDER BY x;
SELECT TRY_CAST(x AS SMALLINT) FROM x ORDER BY x;
SELECT TRY_CAST(x AS INT) FROM x ORDER BY x;
SELECT TRY_CAST(x AS BIGINT) FROM x ORDER BY x;
SELECT CAST(x AS UTINYINT) FROM x ORDER BY x;
SELECT TRY_CAST(x AS UTINYINT) FROM x ORDER BY x;
SELECT CAST(x AS USMALLINT) FROM x ORDER BY x;
SELECT TRY_CAST(x AS USMALLINT) FROM x ORDER BY x;
SELECT CAST(x AS UINTEGER) FROM x ORDER BY x;
SELECT TRY_CAST(x AS UINTEGER) FROM x ORDER BY x;
SELECT CAST(x AS UBIGINT) FROM x ORDER BY x;
SELECT TRY_CAST(x AS UBIGINT) FROM x ORDER BY x;
SELECT CAST(x AS REAL) FROM x ORDER BY x;
SELECT CAST(x AS DOUBLE) FROM x ORDER BY x;
SELECT CAST(x AS BOOLEAN) FROM x ORDER BY x;
SELECT CAST(x AS TEXT) FROM x ORDER BY x;
CREATE TABLE x AS SELECT * FROM (VALUES ('   '), ('blablabla'), ('-1000000000000000000000000000000000000000'), ('0'), ('1'), ('340282366920938463463374607431768211455'), ('1000000000000000000000000000000000000000')) AS x;
SELECT CAST(x AS UINT128) FROM x;
SELECT TRY_CAST(x AS UINT128) FROM x;
SELECT CAST(CAST(x AS DECIMAL(3, 0)) AS UINT128) FROM x ORDER BY x;
SELECT CAST(CAST(x AS DECIMAL(9, 0)) AS UINT128) FROM x ORDER BY x;
SELECT CAST(CAST(x AS DECIMAL(18, 0)) AS UINT128) FROM x ORDER BY x;
SELECT CAST(CAST(x AS DECIMAL(38, 0)) AS UINT128) FROM x ORDER BY x;
SELECT CAST(TRY_CAST(x AS DECIMAL(3, 0)) AS UINT128) FROM x ORDER BY x;
SELECT CAST(TRY_CAST(x AS DECIMAL(9, 0)) AS UINT128) FROM x ORDER BY x;
SELECT CAST(TRY_CAST(x AS DECIMAL(18, 0)) AS UINT128) FROM x ORDER BY x;
SELECT CAST(TRY_CAST(x AS DECIMAL(38, 0)) AS UINT128) FROM x ORDER BY x;
PRAGMA x;
CREATE TABLE x AS SELECT CAST(x AS UINTEGER) AS x FROM (VALUES (0), (4294967295)) AS x;
SELECT CAST(x AS UTINYINT) FROM x ORDER BY x;
SELECT TRY_CAST(x AS UTINYINT) FROM x ORDER BY x;
SELECT CAST(x AS USMALLINT) FROM x ORDER BY x;
SELECT TRY_CAST(x AS USMALLINT) FROM x ORDER BY x;
SELECT CAST(x AS UBIGINT) FROM x ORDER BY x;
SELECT CAST(x AS TINYINT) FROM x ORDER BY x;
SELECT TRY_CAST(x AS TINYINT) FROM x ORDER BY x;
SELECT CAST(x AS SMALLINT) FROM x ORDER BY x;
SELECT TRY_CAST(x AS SMALLINT) FROM x ORDER BY x;
SELECT CAST(x AS INT) FROM x ORDER BY x;
SELECT TRY_CAST(x AS INT) FROM x ORDER BY x;
SELECT CAST(x AS BIGINT) FROM x ORDER BY x;
SELECT CAST(x AS INT128) FROM x ORDER BY x;
SELECT CAST(x AS REAL) FROM x ORDER BY x;
SELECT CAST(x AS DOUBLE) FROM x ORDER BY x;
SELECT CAST(x AS BOOLEAN) FROM x ORDER BY x;
SELECT CAST(x AS TEXT) FROM x ORDER BY x;
CREATE TABLE x AS SELECT * FROM (VALUES ('   '), ('blablabla'), ('-1000'), ('-1'), ('-0'), ('0'), ('4294967295'), ('10000000000')) AS x;
SELECT CAST(x AS UINTEGER) FROM x;
SELECT TRY_CAST(x AS UINTEGER) FROM x;
SELECT CAST(CAST(x AS DECIMAL(3, 0)) AS UINTEGER) FROM x ORDER BY x;
SELECT CAST(CAST(x AS DECIMAL(9, 0)) AS UINTEGER) FROM x ORDER BY x;
SELECT CAST(CAST(x AS DECIMAL(18, 0)) AS UINTEGER) FROM x ORDER BY x;
SELECT CAST(CAST(x AS DECIMAL(38, 0)) AS UINTEGER) FROM x ORDER BY x;
SELECT CAST(CAST(x AS DECIMAL(18, 9)) AS UINTEGER) FROM x ORDER BY x;
SELECT CAST(CAST(x AS DECIMAL(38, 29)) AS UINTEGER) FROM x ORDER BY x;
SELECT CAST(TRY_CAST(x AS DECIMAL(3, 0)) AS UINTEGER) FROM x ORDER BY x;
SELECT CAST(TRY_CAST(x AS DECIMAL(9, 0)) AS UINTEGER) FROM x ORDER BY x;
SELECT CAST(TRY_CAST(x AS DECIMAL(18, 9)) AS UINTEGER) FROM x ORDER BY x;
SELECT CAST(TRY_CAST(x AS DECIMAL(38, 29)) AS UINTEGER) FROM x ORDER BY x;
PRAGMA x;
CREATE TABLE x AS SELECT CAST(x AS USMALLINT) AS x FROM (VALUES (0), (65535)) AS x;
SELECT CAST(x AS UTINYINT) FROM x ORDER BY x;
SELECT TRY_CAST(x AS UTINYINT) FROM x ORDER BY x;
SELECT CAST(x AS UINTEGER) FROM x ORDER BY x;
SELECT CAST(x AS UBIGINT) FROM x ORDER BY x;
SELECT CAST(x AS TINYINT) FROM x ORDER BY x;
SELECT TRY_CAST(x AS TINYINT) FROM x ORDER BY x;
SELECT CAST(x AS SMALLINT) FROM x ORDER BY x;
SELECT TRY_CAST(x AS SMALLINT) FROM x ORDER BY x;
SELECT CAST(x AS INT) FROM x ORDER BY x;
SELECT CAST(x AS BIGINT) FROM x ORDER BY x;
SELECT CAST(CAST(x AS INT128) AS USMALLINT) FROM x ORDER BY x;
SELECT CAST(x AS REAL) FROM x ORDER BY x;
SELECT CAST(x AS DOUBLE) FROM x ORDER BY x;
SELECT CAST(x AS BOOLEAN) FROM x ORDER BY x;
SELECT CAST(x AS TEXT) FROM x ORDER BY x;
CREATE TABLE x AS SELECT * FROM (VALUES ('   '), ('blablabla'), ('-1000'), ('-1'), ('-0'), ('0'), ('65535'), ('100000')) AS x;
SELECT CAST(x AS USMALLINT) FROM x;
SELECT TRY_CAST(x AS USMALLINT) FROM x;
SELECT CAST(CAST(x AS DECIMAL(3, 0)) AS USMALLINT) FROM x ORDER BY x;
SELECT CAST(CAST(x AS DECIMAL(9, 0)) AS USMALLINT) FROM x ORDER BY x;
SELECT CAST(CAST(x AS DECIMAL(18, 0)) AS USMALLINT) FROM x ORDER BY x;
SELECT CAST(CAST(x AS DECIMAL(38, 0)) AS USMALLINT) FROM x ORDER BY x;
SELECT CAST(CAST(x AS DECIMAL(9, 5)) AS USMALLINT) FROM x ORDER BY x;
SELECT CAST(CAST(x AS DECIMAL(18, 14)) AS USMALLINT) FROM x ORDER BY x;
SELECT CAST(CAST(x AS DECIMAL(38, 34)) AS USMALLINT) FROM x ORDER BY x;
SELECT CAST(TRY_CAST(x AS DECIMAL(3, 0)) AS USMALLINT) FROM x ORDER BY x;
SELECT CAST(TRY_CAST(x AS DECIMAL(9, 5)) AS USMALLINT) FROM x ORDER BY x;
SELECT CAST(TRY_CAST(x AS DECIMAL(18, 14)) AS USMALLINT) FROM x ORDER BY x;
SELECT CAST(TRY_CAST(x AS DECIMAL(38, 34)) AS USMALLINT) FROM x ORDER BY x;
PRAGMA x;
CREATE TABLE x AS SELECT CAST(x AS UTINYINT) AS x FROM (VALUES (0), (255)) AS x;
SELECT CAST(x AS USMALLINT) FROM x ORDER BY x;
SELECT CAST(x AS UINTEGER) FROM x ORDER BY x;
SELECT CAST(x AS UBIGINT) FROM x ORDER BY x;
SELECT CAST(x AS TINYINT) FROM x ORDER BY x;
SELECT TRY_CAST(x AS TINYINT) FROM x ORDER BY x;
SELECT CAST(x AS SMALLINT) FROM x ORDER BY x;
SELECT CAST(x AS INT) FROM x ORDER BY x;
SELECT CAST(x AS BIGINT) FROM x ORDER BY x;
SELECT CAST(x AS INT128) FROM x ORDER BY x;
SELECT CAST(x AS REAL) FROM x ORDER BY x;
SELECT CAST(x AS DOUBLE) FROM x ORDER BY x;
SELECT CAST(x AS BOOLEAN) FROM x ORDER BY x;
SELECT CAST(x AS TEXT) FROM x ORDER BY x;
CREATE TABLE x AS SELECT * FROM (VALUES ('   '), ('blablabla'), ('-1000'), ('-1'), ('-0'), ('0'), ('255'), ('1000')) AS x;
SELECT CAST(x AS UTINYINT) FROM x;
SELECT TRY_CAST(x AS UTINYINT) FROM x;
SELECT CAST(CAST(x AS DECIMAL(3, 0)) AS UTINYINT) FROM x ORDER BY x;
SELECT CAST(CAST(x AS DECIMAL(9, 0)) AS UTINYINT) FROM x ORDER BY x;
SELECT CAST(CAST(x AS DECIMAL(18, 0)) AS UTINYINT) FROM x ORDER BY x;
SELECT CAST(CAST(x AS DECIMAL(38, 0)) AS UTINYINT) FROM x ORDER BY x;
SELECT CAST(CAST(x AS DECIMAL(3, 1)) AS UTINYINT) FROM x ORDER BY x;
SELECT CAST(CAST(x AS DECIMAL(9, 7)) AS UTINYINT) FROM x ORDER BY x;
SELECT CAST(CAST(x AS DECIMAL(18, 16)) AS UTINYINT) FROM x ORDER BY x;
SELECT CAST(CAST(x AS DECIMAL(38, 36)) AS UTINYINT) FROM x ORDER BY x;
SELECT CAST(TRY_CAST(x AS DECIMAL(3, 1)) AS UTINYINT) FROM x ORDER BY x;
SELECT CAST(TRY_CAST(x AS DECIMAL(9, 7)) AS UTINYINT) FROM x ORDER BY x;
SELECT CAST(TRY_CAST(x AS DECIMAL(18, 16)) AS UTINYINT) FROM x ORDER BY x;
SELECT CAST(TRY_CAST(x AS DECIMAL(38, 36)) AS UTINYINT) FROM x ORDER BY x;
PRAGMA x;
CREATE TABLE x AS SELECT CAST((-128) AS TINYINT) AS x, CAST(127 AS TINYINT) AS x;
CREATE TABLE x AS SELECT CAST((-32768) AS SMALLINT) AS x, CAST(32767 AS SMALLINT) AS x;
CREATE TABLE x AS SELECT CAST((-2147483648) AS INT) AS x, CAST(2147483647 AS INT) AS x;
CREATE TABLE x AS SELECT CAST((-9223372036854775808) AS BIGINT) AS x, CAST(9223372036854775807 AS BIGINT) AS x;
CREATE TABLE x AS SELECT CAST((0) AS UTINYINT) AS x, CAST(255 AS UTINYINT) AS x;
CREATE TABLE x AS SELECT CAST((0) AS USMALLINT) AS x, CAST(65535 AS USMALLINT) AS x;
CREATE TABLE x AS SELECT CAST((0) AS UINTEGER) AS x, CAST(4294967295 AS UINTEGER) AS x;
CREATE TABLE x AS SELECT CAST((0) AS UBIGINT) AS x, CAST(18446744073709551615 AS UBIGINT) AS x;
SELECT ARRAY((SELECT x FROM x));
SELECT ARRAY((SELECT x FROM x));
PRAGMA x;
SELECT TYPEOF([CAST(100 AS USMALLINT), CAST(10000 AS SMALLINT)]);
SELECT TYPEOF([CAST(100 AS USMALLINT), CAST(127 AS TINYINT)]);
SELECT TYPEOF([CAST(100 AS USMALLINT), CAST(127 AS USMALLINT)]);
SELECT TYPEOF([CAST(100 AS USMALLINT), CAST(127 AS USMALLINT)]);
SELECT TYPEOF([CAST(100 AS USMALLINT), CAST(10.5 AS DECIMAL(18, 3))]);
PRAGMA x;
SELECT TYPEOF([CAST(100 AS UTINYINT), CAST(10000 AS SMALLINT)]);
SELECT TYPEOF([CAST(100 AS UTINYINT), CAST(127 AS TINYINT)]);
SELECT TYPEOF([CAST(100 AS UTINYINT), CAST(127 AS UTINYINT)]);
SELECT TYPEOF([CAST(100 AS UTINYINT), CAST(127 AS USMALLINT)]);
SELECT TYPEOF([CAST(100 AS UTINYINT), CAST(10.5 AS DECIMAL(18, 3))]);
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('aaaaaaaaaa');
INSERT INTO x SELECT x || x || x || x || x || x || x || x || x || x FROM x WHERE LENGTH(x) = (SELECT MAX(LENGTH(x)) FROM x);
INSERT INTO x SELECT x || x || x || x || x || x || x || x || x || x FROM x WHERE LENGTH(x) = (SELECT MAX(LENGTH(x)) FROM x);
INSERT INTO x SELECT x || x || x || x || x || x || x || x || x || x FROM x WHERE LENGTH(x) = (SELECT MAX(LENGTH(x)) FROM x);
SELECT LENGTH(x) FROM x ORDER BY 1;
PRAGMA x = 100000000;
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('aaaaaaaaaa');
INSERT INTO x SELECT x || x || x || x || x || x || x || x || x || x FROM x WHERE LENGTH(x) = (SELECT MAX(LENGTH(x)) FROM x);
INSERT INTO x SELECT x || x || x || x || x || x || x || x || x || x FROM x WHERE LENGTH(x) = (SELECT MAX(LENGTH(x)) FROM x);
INSERT INTO x SELECT x || x || x || x || x || x || x || x || x || x FROM x WHERE LENGTH(x) = (SELECT MAX(LENGTH(x)) FROM x);
CREATE TABLE x (x TEXT);
INSERT INTO x SELECT x FROM x WHERE LENGTH(x) = (SELECT MAX(LENGTH(x)) FROM x);
SELECT COUNT(*), COUNT(x), MAX(LENGTH(x)), SUM(LENGTH(x)) FROM x;
INSERT INTO x SELECT * FROM x;
SELECT COUNT(*), COUNT(x), MAX(LENGTH(x)), SUM(LENGTH(x)) FROM x;
INSERT INTO x SELECT * FROM x;
SELECT COUNT(*), COUNT(x), MAX(LENGTH(x)), SUM(LENGTH(x)) FROM x;
INSERT INTO x SELECT * FROM x;
SELECT COUNT(*), COUNT(x), MAX(LENGTH(x)), SUM(LENGTH(x)) FROM x;
INSERT INTO x SELECT * FROM x;
SELECT COUNT(*), COUNT(x), MAX(LENGTH(x)), SUM(LENGTH(x)) FROM x;
INSERT INTO x SELECT * FROM x;
SELECT COUNT(*), COUNT(x), MAX(LENGTH(x)), SUM(LENGTH(x)) FROM x;
INSERT INTO x SELECT * FROM x;
SELECT COUNT(*), COUNT(x), MAX(LENGTH(x)), SUM(LENGTH(x)) FROM x;
INSERT INTO x SELECT * FROM x;
SELECT COUNT(*), COUNT(x), MAX(LENGTH(x)), SUM(LENGTH(x)) FROM x;
INSERT INTO x SELECT * FROM x;
SELECT COUNT(*), COUNT(x), MAX(LENGTH(x)), SUM(LENGTH(x)) FROM x;
INSERT INTO x SELECT * FROM x;
SELECT COUNT(*), COUNT(x), MAX(LENGTH(x)), SUM(LENGTH(x)) FROM x;
INSERT INTO x SELECT * FROM x;
SELECT COUNT(*), COUNT(x), MAX(LENGTH(x)), SUM(LENGTH(x)) FROM x;
INSERT INTO x SELECT * FROM x;
SELECT COUNT(*), COUNT(x), MAX(LENGTH(x)), SUM(LENGTH(x)) FROM x;
INSERT INTO x SELECT * FROM x;
SELECT COUNT(*), COUNT(x), MAX(LENGTH(x)), SUM(LENGTH(x)) FROM x;
INSERT INTO x SELECT * FROM x;
SELECT COUNT(*), COUNT(x), MAX(LENGTH(x)), SUM(LENGTH(x)) FROM x;
INSERT INTO x SELECT * FROM x;
SELECT COUNT(*), COUNT(x), MAX(LENGTH(x)), SUM(LENGTH(x)) FROM x;
CREATE TABLE x (x INT, x TEXT);
INSERT INTO x VALUES (1, '🦆'), (2, '🦆🍞🦆');
SELECT * FROM x ORDER BY x;
SELECT SUBSTRING(x, 1, 1), SUBSTRING(x, 2, 1) FROM x ORDER BY x;
SELECT SUBSTRING(CAST(DECODE(CAST('u\xD5\x8D1' AS BLOB)) AS TEXT), -1);
SELECT SUBSTRING('u🦆', -2, 1);
SELECT SUBSTRING('A3🦤u🦆f', -3, 3);
SELECT SUBSTRING('🦤🦆f', -3, 2);
SELECT LENGTH(x) FROM x ORDER BY x;
CREATE TABLE x (x INT, x INET);
INSERT INTO x (x, x) VALUES (1, '192.168.1.1');
SELECT * FROM x;
SELECT ((NULL, x.x, NULL) <> (x.x)) FROM x;
SELECT * FROM x WHERE ((NULL, x.x, NULL) <> (x.x));
SELECT * FROM x WHERE ((NULL, x.x, NULL) <> (x.x)) UNION ALL SELECT * FROM x WHERE (NOT ((NULL, x.x, NULL) <> (x.x))) UNION ALL SELECT * FROM x WHERE ((((NULL, x.x, NULL) <> (x.x))) IS NULL);
PRAGMA x;
PRAGMA x;
INSERT INTO x VALUES ({'x': {'x': 3}, 'x': 4});
SELECT * FROM x;
SELECT ((x).x).x FROM x;
INSERT INTO x VALUES (NULL);
SELECT * FROM x;
SELECT ((x).x).x FROM x;
INSERT INTO x VALUES (ROW(ROW(NULL), 1));
INSERT INTO x VALUES (ROW(ROW(1), NULL));
INSERT INTO x VALUES (ROW(NULL, 1));
SELECT * FROM x;
CREATE TABLE x AS SELECT {'x': {'x': 1, 'x': 'hello'}} AS x;
SELECT (x).x FROM x;
INSERT INTO x VALUES (1);
INSERT INTO x VALUES (ROW(1, 2));
INSERT INTO x VALUES (ROW(ROW(1, 2, 3), 1));
PRAGMA x;
CREATE TABLE x (x INT, x STRUCT(x STRUCT(x TEXT, x INT), x STRUCT(x INT, x BOOLEAN)));
INSERT INTO x VALUES (1, {'x': {'x': 'Row 1', 'x': 1}, 'x': {'x': 42, 'x': TRUE}}), (2, NULL), (3, {'x': {'x': 'Row 3', 'x': 3}, 'x': {'x': 84, 'x': NULL}}), (4, {'x': NULL, 'x': {'x': NULL, 'x': FALSE}});
COPY x TO '__TEST_DIR__/test_structs.parquet' WITH (foreach source, test_structs READ_PARQUET('__TEST_DIR__/test_structs.parquet'));
COPY x TO '__TEST_DIR__/test_structs.parquet' WITH (foreach source, test_structs READ_PARQUET('__TEST_DIR__/test_structs.parquet'));
COPY x TO '__TEST_DIR__/test_structs.parquet' WITH (foreach source, test_structs READ_PARQUET('__TEST_DIR__/test_structs.parquet'));
COPY x TO '__TEST_DIR__/test_structs.parquet' WITH (foreach source, test_structs READ_PARQUET('__TEST_DIR__/test_structs.parquet'));
COPY x TO '__TEST_DIR__/test_structs.parquet' WITH (foreach source, test_structs READ_PARQUET('__TEST_DIR__/test_structs.parquet'));
COPY x TO '__TEST_DIR__/test_structs.parquet' WITH (foreach source, test_structs READ_PARQUET('__TEST_DIR__/test_structs.parquet'));
COPY x TO '__TEST_DIR__/test_structs.parquet' WITH (foreach source, test_structs READ_PARQUET('__TEST_DIR__/test_structs.parquet'));
COPY x TO '__TEST_DIR__/test_structs.parquet' WITH (foreach source, test_structs READ_PARQUET('__TEST_DIR__/test_structs.parquet'));
COPY x TO '__TEST_DIR__/test_structs.parquet' WITH (foreach source, test_structs READ_PARQUET('__TEST_DIR__/test_structs.parquet'));
CREATE TABLE x (x INT, x STRUCT(x STRUCT(x STRUCT(x TEXT, x INT), x STRUCT(x INT, x BOOLEAN))));
INSERT INTO x VALUES (1, {'x': {'x': {'x': 'Row 1', 'x': 1}, 'x': {'x': 42, 'x': TRUE}}}), (2, NULL), (3, {'x': {'x': {'x': 'Row 3', 'x': 3}, 'x': {'x': 84, 'x': NULL}}}), (4, {'x': {'x': NULL, 'x': {'x': NULL, 'x': FALSE}}});
COPY x TO '__TEST_DIR__/test_structs.parquet' WITH (foreach source, test_structs_nested READ_PARQUET('__TEST_DIR__/test_structs.parquet'));
COPY x TO '__TEST_DIR__/test_structs.parquet' WITH (foreach source, test_structs_nested READ_PARQUET('__TEST_DIR__/test_structs.parquet'));
COPY x TO '__TEST_DIR__/test_structs.parquet' WITH (foreach source, test_structs_nested READ_PARQUET('__TEST_DIR__/test_structs.parquet'));
COPY x TO '__TEST_DIR__/test_structs.parquet' WITH (foreach source, test_structs_nested READ_PARQUET('__TEST_DIR__/test_structs.parquet'));
COPY x TO '__TEST_DIR__/test_structs.parquet' WITH (foreach source, test_structs_nested READ_PARQUET('__TEST_DIR__/test_structs.parquet'));
COPY x TO '__TEST_DIR__/test_structs.parquet' WITH (foreach source, test_structs_nested READ_PARQUET('__TEST_DIR__/test_structs.parquet'));
COPY x TO '__TEST_DIR__/test_structs.parquet' WITH (foreach source, test_structs_nested READ_PARQUET('__TEST_DIR__/test_structs.parquet'));
COPY x TO '__TEST_DIR__/test_structs.parquet' WITH (foreach source, test_structs_nested READ_PARQUET('__TEST_DIR__/test_structs.parquet'));
COPY x TO '__TEST_DIR__/test_structs.parquet' WITH (foreach source, test_structs_nested READ_PARQUET('__TEST_DIR__/test_structs.parquet'));
COPY x TO '__TEST_DIR__/test_structs.parquet' WITH (foreach source, test_structs_nested READ_PARQUET('__TEST_DIR__/test_structs.parquet'));
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
CREATE TABLE x (x STRUCT(x INT, x TEXT));
INSERT INTO x VALUES ({'x': 42, 'x': 'hello world this is my string'}), (NULL), ({'x': 100, 'x': NULL}), ({'x': NULL, 'x': 'string string string'});
INSERT INTO x VALUES ({'x': 42, 'x': 'hello world this is my string'}), (NULL), ({'x': 100, 'x': NULL}), ({'x': NULL, 'x': 'string string string'});
INSERT INTO x VALUES ({'x': 42, 'x': 'hello world this is my string'}), (NULL), ({'x': 100, 'x': NULL}), ({'x': NULL, 'x': 'string string string'});
INSERT INTO x VALUES ({'x': 42, 'x': 'hello world this is my string'}), (NULL), ({'x': 100, 'x': NULL}), ({'x': NULL, 'x': 'string string string'});
INSERT INTO x VALUES ({'x': 42, 'x': 'hello world this is my string'}), (NULL), ({'x': 100, 'x': NULL}), ({'x': NULL, 'x': 'string string string'});
SELECT REMAP_STRUCT({'x': 1, 'x': 2}, NULL, {'x': 'i'}, NULL);
SELECT REMAP_STRUCT({'x': 1, 'x': 2}, NULL, {'x': 'i'}, NULL);
SELECT REMAP_STRUCT({'x': 1, 'x': 2}, NULL, {'x': 'i'}, NULL);
SELECT REMAP_STRUCT({'x': 1, 'x': 2}, NULL, {'x': 'i'}, NULL);
SELECT REMAP_STRUCT({'x': 1, 'x': 2}, NULL, {'x': 'i'}, NULL);
SELECT REMAP_STRUCT({'x': 1, 'x': 2}, NULL, {'x': 'i'}, NULL);
SELECT REMAP_STRUCT({'x': 1, 'x': 2}, NULL, {'x': 'i'}, NULL);
SELECT REMAP_STRUCT({'x': 1, 'x': 2}, NULL, {'x': 'i'}, NULL);
SELECT REMAP_STRUCT({'x': 1, 'x': 2}, NULL, {'x': 'i'}, NULL);
PRAGMA x;
SELECT CASE WHEN 1 = 1 THEN {'x': 1} ELSE {'x': 2} END;
SELECT CASE WHEN 1 = 0 THEN {'x': 1} ELSE {'x': 2} END;
SELECT CASE WHEN 1 = 1 THEN NULL ELSE {'x': 2} END;
SELECT CASE WHEN 1 = 0 THEN NULL ELSE {'x': NULL} END;
SELECT x, CASE WHEN x % 2 = 0 THEN {'x': 1} ELSE {'x': 2} END FROM x AS x;
SELECT x, CASE WHEN x % 2 = 0 THEN {'x': 'hello'} ELSE {'x': 'world'} END FROM x AS x;
SELECT x, CASE WHEN x % 2 = 0 THEN {'x': 'hello', 'x': {'x': 3, 'x': NULL}} ELSE {'x': 'world', 'x': {'x': 7, 'x': 22}} END FROM x AS x;
SELECT x, CASE WHEN x % 2 = 0 THEN {'x': [1, 2, 3]} ELSE {'x': [7, 8]} END FROM x AS x;
SELECT x, CASE WHEN x % 2 = 0 THEN {'x': [1, 2, 3]} ELSE NULL END FROM x AS x;
SELECT x, CASE WHEN x % 2 = 0 THEN {'x': [1, 2, 3]} ELSE {'x': NULL} END FROM x AS x;
SELECT x, CASE WHEN x % 2 = 0 THEN {'x': [CAST(1 AS INT), CAST(2 AS INT), CAST(3 AS INT)]} ELSE {'x': [CAST(0 AS UBIGINT)]} END FROM x AS x;
SELECT x, CASE WHEN x % 2 = 0 THEN {'x': [1, 2, 3]} ELSE {'x': ['hello']} END FROM x AS x;
PRAGMA x;
CREATE TABLE x AS SELECT ({'x': 3}) AS x;
SELECT x['HELLO'] FROM x;
SELECT x['hello'] FROM x;
SELECT x.x FROM x;
SELECT "x"."x" FROM x;
SELECT ({'x': 3, 'x': 4}) AS x;
SELECT ({'x': 3, 'x': 4}) AS x;
SELECT ({'x': 3, 'x': 4}) AS x;
SELECT x['HELL'] FROM x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
SELECT ({'x': NULL, 'x': NULL})['i'];
SELECT ({'x': NULL, 'x': NULL})['i'];
SELECT ({'x': NULL, 'x': NULL})['i'];
SELECT ({'x': NULL, 'x': NULL})['i'];
SELECT ({'x': NULL, 'x': NULL})['i'];
SELECT ({'x': NULL, 'x': NULL})['i'];
SELECT ({'x': NULL, 'x': NULL})['i'];
SELECT ({'x': NULL, 'x': NULL})['i'];
SELECT ({'x': NULL, 'x': NULL})['i'];
INSERT INTO x VALUES ({'x': 1, 'x': 2}), ({'x': NULL, 'x': 2}), ({'x': 1, 'x': NULL}), (NULL);
INSERT INTO x VALUES ({'x': 1, 'x': 2}), ({'x': NULL, 'x': 2}), ({'x': 1, 'x': NULL}), (NULL);
INSERT INTO x VALUES ({'x': 1, 'x': 2}), ({'x': NULL, 'x': 2}), ({'x': 1, 'x': NULL}), (NULL);
INSERT INTO x VALUES ({'x': 1, 'x': {'x': 2, 'x': 3}}), ({'x': 1, 'x': {'x': NULL, 'x': 3}}), ({'x': 1, 'x': {'x': 2, 'x': NULL}}), ({'x': 1, 'x': NULL}), (NULL);
INSERT INTO x VALUES ({'x': 1, 'x': {'x': 2, 'x': 3}}), ({'x': 1, 'x': {'x': NULL, 'x': 3}}), ({'x': 1, 'x': {'x': 2, 'x': NULL}}), ({'x': 1, 'x': NULL}), (NULL);
INSERT INTO x VALUES ({'x': 1, 'x': {'x': 2, 'x': 3}}), ({'x': 1, 'x': {'x': NULL, 'x': 3}}), ({'x': 1, 'x': {'x': 2, 'x': NULL}}), ({'x': 1, 'x': NULL}), (NULL);
SELECT CAST({'x': 42, 'x': 84} AS STRUCT(x INT)) AS x;
SELECT CAST({'x': 42} AS STRUCT(x INT, x INT)) AS x;
SELECT CAST({'x': 7, 'x': 42, 'x': 84, 'x': 42} AS STRUCT(x INT, x INT, x INT)) AS x;
PRAGMA x;
CREATE TABLE x (x STRUCT(x INT, x INT));
INSERT INTO x VALUES ({'x': 42, 'x': 43});
CREATE TABLE x (x STRUCT(x INT, x INT));
INSERT INTO x VALUES ({'x': 100, 'x': 101});
COPY x TO '__TEST_DIR__/struct_cast_t1.parquet' WITH (FORMAT 'parquet');
COPY x TO '__TEST_DIR__/struct_cast_t2.parquet' WITH (FORMAT 'parquet');
SELECT * FROM x;
SELECT {'x': {'x': 42, 'x': 42}} AS x UNION ALL BY NAME SELECT {'x': {'x': 'hello', 'x': 'world'}, 'x': '100'} AS x;
PRAGMA x;
SELECT {'x': 1} < {'x': 2};
SELECT {'x': 1} < {'x': 1};
SELECT NULL < {'x': 1};
SELECT {'x': 1} < NULL;
SELECT {'x': 1} <= {'x': 2};
SELECT {'x': 1} <= {'x': 1};
SELECT NULL <= {'x': 1};
SELECT {'x': 1} <= NULL;
SELECT {'x': 1} = {'x': 2};
SELECT {'x': 1} = {'x': 1};
SELECT NULL = {'x': 1};
SELECT {'x': 1} = NULL;
SELECT {'x': 1} <> {'x': 2};
SELECT {'x': 1} <> {'x': 1};
SELECT {'x': 1} <> NULL;
SELECT NULL <> {'x': 1};
SELECT {'x': 1} >= {'x': 2};
SELECT {'x': 1} >= {'x': 1};
SELECT NULL >= {'x': 1};
SELECT {'x': 1} >= NULL;
SELECT {'x': 1} > {'x': 2};
SELECT {'x': 1} > {'x': 1};
SELECT NULL > {'x': 1};
SELECT {'x': 1} > NULL;
CREATE VIEW x AS SELECT * FROM (VALUES ({'x': 1}, {'x': 1}), ({'x': 1}, {'x': 2}), ({'x': 2}, {'x': 1}), (NULL, {'x': 1}), ({'x': 2}, NULL), (NULL, NULL)) AS x;
SELECT x < x FROM x;
SELECT x <= x FROM x;
SELECT x = x FROM x;
SELECT x <> x FROM x;
SELECT x >= x FROM x;
SELECT x > x FROM x;
SELECT {'x': 'duck'} < {'x': 'goose'};
SELECT {'x': 'duck'} < {'x': 'duck'};
SELECT NULL < {'x': 'duck'};
SELECT {'x': 'duck'} < NULL;
SELECT {'x': 'duck'} <= {'x': 'goose'};
SELECT {'x': 'duck'} <= {'x': 'duck'};
SELECT NULL <= {'x': 'duck'};
SELECT {'x': 'duck'} <= NULL;
SELECT {'x': 'duck'} = {'x': 'goose'};
SELECT {'x': 'duck'} = {'x': 'duck'};
SELECT NULL = {'x': 'duck'};
SELECT {'x': 'duck'} = NULL;
SELECT {'x': 'duck'} <> {'x': 'goose'};
SELECT {'x': 'duck'} <> {'x': 'duck'};
SELECT NULL <> {'x': 'duck'};
SELECT {'x': 'duck'} <> NULL;
SELECT {'x': 'duck'} >= {'x': 'goose'};
SELECT {'x': 'duck'} >= {'x': 'duck'};
SELECT NULL >= {'x': 'duck'};
SELECT {'x': 'duck'} >= NULL;
SELECT {'x': 'duck'} > {'x': 'goose'};
SELECT {'x': 'duck'} > {'x': 'duck'};
SELECT NULL > {'x': 'duck'};
SELECT {'x': 'duck'} > NULL;
CREATE VIEW x AS SELECT * FROM (VALUES ({'x': 'duck'}, {'x': 'duck'}), ({'x': 'duck'}, {'x': 'goose'}), ({'x': 'goose'}, {'x': 'duck'}), (NULL, {'x': 'duck'}), ({'x': 'goose'}, NULL), (NULL, NULL)) AS x;
SELECT x < x FROM x;
SELECT x <= x FROM x;
SELECT x = x FROM x;
SELECT x <> x FROM x;
SELECT x >= x FROM x;
SELECT x > x FROM x;
SELECT {'x': 'duck', 'x': 1} < {'x': 'goose', 'x': 2};
SELECT {'x': 'duck', 'x': 1} < {'x': 'duck', 'x': 1};
SELECT {'x': 'duck', 'x': 1} < {'x': 'duck', 'x': 2};
SELECT NULL < {'x': 'duck', 'x': 1};
SELECT {'x': 'duck', 'x': 1} < NULL;
SELECT {'x': 'duck', 'x': 1} <= {'x': 'goose', 'x': 2};
SELECT {'x': 'duck', 'x': 1} <= {'x': 'duck', 'x': 1};
SELECT {'x': 'duck', 'x': 1} <= {'x': 'duck', 'x': 2};
SELECT NULL <= {'x': 'duck', 'x': 1};
SELECT {'x': 'duck', 'x': 1} <= NULL;
SELECT {'x': 'duck', 'x': 1} = {'x': 'goose', 'x': 2};
SELECT {'x': 'duck', 'x': 1} = {'x': 'duck', 'x': 1};
SELECT NULL = {'x': 'duck', 'x': 1};
SELECT {'x': 'duck', 'x': 1} = NULL;
SELECT {'x': 'duck', 'x': 1} <> {'x': 'goose', 'x': 2};
SELECT {'x': 'duck', 'x': 1} <> {'x': 'duck', 'x': 1};
SELECT NULL <> {'x': 'duck', 'x': 1};
SELECT {'x': 'duck', 'x': 1} <> NULL;
SELECT {'x': 'duck', 'x': 1} >= {'x': 'goose', 'x': 2};
SELECT {'x': 'duck', 'x': 1} >= {'x': 'duck', 'x': 1};
SELECT NULL >= {'x': 'duck', 'x': 1};
SELECT {'x': 'duck', 'x': 1} >= NULL;
SELECT {'x': 'duck', 'x': 1} > {'x': 'goose', 'x': 2};
SELECT {'x': 'duck', 'x': 1} > {'x': 'duck', 'x': 1};
SELECT {'x': 'duck', 'x': 2} > {'x': 'duck', 'x': 1};
SELECT NULL > {'x': 'duck', 'x': 1};
SELECT {'x': 'duck', 'x': 1} > NULL;
CREATE VIEW x AS SELECT * FROM (VALUES ({'x': 'duck', 'x': 1}, {'x': 'duck', 'x': 1}), ({'x': 'duck', 'x': 1}, {'x': 'goose', 'x': 2}), ({'x': 'goose', 'x': 2}, {'x': 'duck', 'x': 1}), (NULL, {'x': 'duck', 'x': 1}), ({'x': 'goose', 'x': 2}, NULL), (NULL, NULL)) AS x;
SELECT x < x FROM x;
SELECT x <= x FROM x;
SELECT x = x FROM x;
SELECT x <> x FROM x;
SELECT x >= x FROM x;
SELECT x > x FROM x;
SELECT {'x': 1, 'x': {'x': 'duck', 'x': 1.5}} < {'x': 2, 'x': {'x': 'goose', 'x': 2.5}};
SELECT {'x': 1, 'x': {'x': 'duck', 'x': 1.5}} < {'x': 1, 'x': {'x': 'duck', 'x': 1.5}};
SELECT NULL < {'x': 1, 'x': {'x': 'duck', 'x': 1.5}};
SELECT {'x': 1, 'x': {'x': 'duck', 'x': 1.5}} < NULL;
SELECT {'x': 1, 'x': {'x': 'duck', 'x': 1.5}} <= {'x': 2, 'x': {'x': 'goose', 'x': 2.5}};
SELECT {'x': 1, 'x': {'x': 'duck', 'x': 1.5}} <= {'x': 1, 'x': {'x': 'duck', 'x': 1.5}};
SELECT NULL <= {'x': 1, 'x': {'x': 'duck', 'x': 1.5}};
SELECT {'x': 1, 'x': {'x': 'duck', 'x': 1.5}} <= NULL;
SELECT {'x': 1, 'x': {'x': 'duck', 'x': 1.5}} = {'x': 2, 'x': {'x': 'goose', 'x': 2.5}};
SELECT {'x': 1, 'x': {'x': 'duck', 'x': 1.5}} = {'x': 1, 'x': {'x': 'duck', 'x': 1.5}};
SELECT NULL = {'x': 1, 'x': {'x': 'duck', 'x': 1.5}};
SELECT {'x': 1, 'x': {'x': 'duck', 'x': 1.5}} = NULL;
SELECT {'x': 1, 'x': {'x': 'duck', 'x': 1.5}} <> {'x': 2, 'x': {'x': 'goose', 'x': 2.5}};
SELECT {'x': 1, 'x': {'x': 'duck', 'x': 1.5}} <> {'x': 1, 'x': {'x': 'duck', 'x': 1.5}};
SELECT NULL <> {'x': 1, 'x': {'x': 'duck', 'x': 1.5}};
SELECT {'x': 1, 'x': {'x': 'duck', 'x': 1.5}} <> NULL;
SELECT {'x': 1, 'x': {'x': 'duck', 'x': 1.5}} >= {'x': 2, 'x': {'x': 'goose', 'x': 2.5}};
SELECT {'x': 1, 'x': {'x': 'duck', 'x': 1.5}} >= {'x': 1, 'x': {'x': 'duck', 'x': 1.5}};
SELECT NULL >= {'x': 1, 'x': {'x': 'duck', 'x': 1.5}};
SELECT {'x': 1, 'x': {'x': 'duck', 'x': 1.5}} >= NULL;
SELECT {'x': 1, 'x': {'x': 'duck', 'x': 1.5}} > {'x': 2, 'x': {'x': 'goose', 'x': 2.5}};
SELECT {'x': 1, 'x': {'x': 'duck', 'x': 1.5}} > {'x': 1, 'x': {'x': 'duck', 'x': 1.5}};
SELECT NULL > {'x': 1, 'x': {'x': 'duck', 'x': 1.5}};
SELECT {'x': 1, 'x': {'x': 'duck', 'x': 1.5}} > NULL;
CREATE VIEW x AS SELECT * FROM (VALUES ({'x': 1, 'x': {'x': 'duck', 'x': 1.5}}, {'x': 1, 'x': {'x': 'duck', 'x': 1.5}}), ({'x': 1, 'x': {'x': 'duck', 'x': 1.5}}, {'x': 2, 'x': {'x': 'goose', 'x': 2.5}}), ({'x': 2, 'x': {'x': 'goose', 'x': 2.5}}, {'x': 1, 'x': {'x': 'duck', 'x': 1.5}}), (NULL, {'x': 1, 'x': {'x': 'duck', 'x': 1.5}}), ({'x': 2, 'x': {'x': 'goose', 'x': 2.5}}, NULL), (NULL, NULL)) AS x;
SELECT x < x FROM x;
SELECT x <= x FROM x;
SELECT x = x FROM x;
SELECT x <> x FROM x;
SELECT x >= x FROM x;
SELECT x > x FROM x;
SELECT {'x': 1, 'x': ['duck', 'somateria']} < {'x': 2, 'x': ['goose']};
SELECT {'x': 1, 'x': ['duck', 'somateria']} < {'x': 1, 'x': ['duck', 'somateria']};
SELECT NULL < {'x': 1, 'x': ['duck', 'somateria']};
SELECT {'x': 1, 'x': ['duck', 'somateria']} < NULL;
SELECT {'x': 1, 'x': ['duck', 'somateria']} <= {'x': 2, 'x': ['goose']};
SELECT {'x': 1, 'x': ['duck', 'somateria']} <= {'x': 1, 'x': ['duck', 'somateria']};
SELECT NULL <= {'x': 1, 'x': ['duck', 'somateria']};
SELECT {'x': 1, 'x': ['duck', 'somateria']} <= NULL;
SELECT {'x': 1, 'x': ['duck', 'somateria']} = {'x': 2, 'x': ['goose']};
SELECT {'x': 1, 'x': ['duck', 'somateria']} = {'x': 1, 'x': ['duck', 'somateria']};
SELECT NULL = {'x': 1, 'x': ['duck', 'somateria']};
SELECT {'x': 1, 'x': ['duck', 'somateria']} = NULL;
SELECT {'x': 1, 'x': ['duck', 'somateria']} <> {'x': 2, 'x': ['goose']};
SELECT {'x': 1, 'x': ['duck', 'somateria']} <> {'x': 1, 'x': ['duck', 'somateria']};
SELECT NULL <> {'x': 1, 'x': ['duck', 'somateria']};
SELECT {'x': 1, 'x': ['duck', 'somateria']} <> NULL;
SELECT {'x': 1, 'x': ['duck', 'somateria']} >= {'x': 2, 'x': ['goose']};
SELECT {'x': 1, 'x': ['duck', 'somateria']} >= {'x': 1, 'x': ['duck', 'somateria']};
SELECT NULL >= {'x': 1, 'x': ['duck', 'somateria']};
SELECT {'x': 1, 'x': ['duck', 'somateria']} >= NULL;
SELECT {'x': 1, 'x': ['duck', 'somateria']} > {'x': 2, 'x': ['goose']};
SELECT {'x': 1, 'x': ['duck', 'somateria']} > {'x': 1, 'x': ['duck', 'somateria']};
SELECT NULL > {'x': 1, 'x': ['duck', 'somateria']};
SELECT {'x': 1, 'x': ['duck', 'somateria']} > NULL;
CREATE VIEW x AS SELECT * FROM (VALUES ({'x': 1, 'x': ['duck', 'somateria']}, {'x': 1, 'x': ['duck', 'somateria']}), ({'x': 1, 'x': ['duck', 'somateria']}, {'x': 2, 'x': ['goose']}), ({'x': 2, 'x': ['goose']}, {'x': 1, 'x': ['duck', 'somateria']}), (NULL, {'x': 1, 'x': ['duck', 'somateria']}), ({'x': 2, 'x': ['goose']}, NULL), (NULL, NULL)) AS x;
SELECT x < x FROM x;
SELECT x <= x FROM x;
SELECT x = x FROM x;
SELECT x <> x FROM x;
SELECT x >= x FROM x;
SELECT x > x FROM x;
SELECT {'x': x, 'x': x + 1, 'x': x + 2} < {'x': 1, 'x': 2, 'x': 3} FROM x AS x;
SELECT {'x': x, 'x': x + 1, 'x': x + 2} <= {'x': 1, 'x': 2, 'x': 3} FROM x AS x;
SELECT {'x': x, 'x': x + 1, 'x': x + 2} = {'x': 1, 'x': 2, 'x': 3} FROM x AS x;
SELECT {'x': x, 'x': x + 1, 'x': x + 2} <> {'x': 1, 'x': 2, 'x': 3} FROM x AS x;
SELECT {'x': x, 'x': x + 1, 'x': x + 2} >= {'x': 1, 'x': 2, 'x': 3} FROM x AS x;
SELECT {'x': x, 'x': x + 1, 'x': x + 2} > {'x': 1, 'x': 2, 'x': 3} FROM x AS x;
PRAGMA x;
CREATE VIEW x AS SELECT * FROM (VALUES (1, {'x': {'x': 3, 'x': 7}, 'x': [1, 2, 3]}), (2, NULL), (3, {'x': NULL, 'x': [4, 5, NULL]})) AS x;
SELECT * FROM x AS x, x AS x ORDER BY x.x, x.x;
SELECT * FROM x AS x, x AS x WHERE x.x >= x.x ORDER BY x.x, x.x;
SELECT * FROM x AS x, x AS x WHERE x.x <> x.x ORDER BY x.x, x.x;
SELECT * FROM x AS x, x AS x WHERE x.x <> x.x OR x.x > x.x ORDER BY x.x, x.x;
PRAGMA x;
CREATE TABLE x AS SELECT * FROM (VALUES (ROW(3)));
CREATE TABLE x (x STRUCT(x TEXT));
INSERT INTO x VALUES (ROW(NULL));
INSERT INTO x VALUES ({'x': 34});
SELECT x FROM x ORDER BY ALL;
CREATE TABLE x (x STRUCT(x INT));
INSERT INTO x VALUES ({'x': 3});
INSERT INTO x VALUES (ROW(42));
SELECT x FROM x ORDER BY ALL;
CREATE OR REPLACE TABLE x AS SELECT [{'x': 'A', 'x': 'B'}] AS x, [{'x': 'BB', 'x': 'AA'}] AS x;
SELECT x, x, ARRAY_CONCAT(x, x) FROM x;
CREATE OR REPLACE TABLE x (x STRUCT(x INT, x INT));
INSERT INTO x VALUES ({'x': 1, 'x': 2}), ({'x': 3, 'x': 4});
SELECT x FROM x ORDER BY ALL;
CREATE TABLE x (x STRUCT(x INT, x TEXT));
INSERT INTO x VALUES (ROW(5, 'hello'));
CREATE TABLE x AS SELECT ROW(42, 'world') AS x;
SELECT [{'x': TRUE}, {'x': FALSE}, {'x': NULL}];
SELECT [(13, 24), {'x': 42, 'x': 84}, (43, 85), {'x': 10, 'x': 123123}] AS x;
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (1), (3), (20), (20), (20);
SELECT UNNEST(MAP_ENTRIES(HISTOGRAM(x))) FROM x;
SET x = 'nulls_first';
PRAGMA x;
PRAGMA x;
INSERT INTO x VALUES (1, {'x': {'x': 3}, 'x': 4});
SELECT * FROM x WHERE x = 1;
INSERT INTO x VALUES (2, NULL);
SELECT * FROM x ORDER BY x;
INSERT INTO x VALUES (3, ROW(ROW(NULL), 1));
SELECT * FROM x ORDER BY x;
INSERT INTO x VALUES (4, ROW(ROW(1), NULL));
SELECT * FROM x ORDER BY x;
INSERT INTO x VALUES (5, ROW(NULL, 1));
SELECT * FROM x ORDER BY x;
SELECT * FROM x WHERE x = 2;
SELECT * FROM x WHERE x = 3;
SELECT * FROM x WHERE x = 4;
SELECT * FROM x WHERE x = 5;
DROP TABLE x;
DROP TABLE x;
INSERT INTO x VALUES (1, {'x': {'x': 3}, 'x': 4});
INSERT INTO x VALUES (2, NULL);
INSERT INTO x VALUES (3, ROW(ROW(NULL), 1));
INSERT INTO x VALUES (4, ROW(ROW(1), NULL));
INSERT INTO x VALUES (5, ROW(NULL, 1));
CREATE INDEX x ON x(x);
SELECT * FROM x WHERE x = 1;
SELECT * FROM x WHERE x = 2;
SELECT * FROM x WHERE x = 3;
SELECT * FROM x WHERE x = 4;
SELECT * FROM x WHERE x = 5;
INSERT INTO x VALUES (1, NULL);
INSERT INTO x VALUES (1, ROW(ROW(NULL), 1));
INSERT INTO x VALUES (1, ROW(ROW(1), NULL));
INSERT INTO x VALUES (1, ROW(NULL, 1));
SELECT * FROM x WHERE x = 1 ORDER BY x['i']['a'];
PRAGMA x;
SELECT CAST({'x': 42, 'x': 84} AS STRUCT(x INT, x INT));
SELECT CAST({'x': ['1', '2', '3'], 'x': 84} AS STRUCT(x INT, x INT[]));
SELECT CAST({'x': ['1', '2', '3'], 'x': 84} AS STRUCT(x INT, x INT[]));
SELECT CAST({'x': ['1', '2', '3'], 'x': 84} AS STRUCT(x INT, x INT[]));
SELECT CAST(ROW(42, 84) AS STRUCT(x INT, x INT));
PRAGMA x;
CREATE VIEW x AS SELECT * FROM (VALUES ({'x': 1, 'x': 0}), ({'x': 1, 'x': 2}), ({'x': 1, 'x': NULL}), ({'x': NULL, 'x': 2}), ({'x': NULL, 'x': NULL}), ({'x': NULL, 'x': 0}), (NULL)) AS x;
SELECT x.x, x.x, x.x < x.x, x.x <= x.x, x.x = x.x, x.x <> x.x, x.x > x.x, x.x >= x.x, x.x IS NOT DISTINCT FROM x.x, x.x IS DISTINCT FROM x.x FROM x AS x, x AS x;
CREATE VIEW x AS SELECT * FROM (VALUES ({'x': 'duck', 'x': ''}), ({'x': 'duck', 'x': 'goose'}), ({'x': 'duck', 'x': NULL}), ({'x': NULL, 'x': 'goose'}), ({'x': NULL, 'x': NULL}), ({'x': NULL, 'x': '0'}), (NULL)) AS x;
SELECT x.x, x.x, x.x < x.x, x.x <= x.x, x.x = x.x, x.x <> x.x, x.x > x.x, x.x >= x.x, x.x IS NOT DISTINCT FROM x.x, x.x IS DISTINCT FROM x.x FROM x AS x, x AS x;
PRAGMA x;
PRAGMA x;
INSERT INTO x VALUES (1, {'x': 1, 'x': 2});
CREATE TABLE x (x INT, x TEXT);
INSERT INTO x VALUES (1, 'hello');
SELECT * FROM x LEFT JOIN x ON x.x <> x.x;
SELECT * FROM x RIGHT JOIN x ON x.x <> x.x;
SELECT * FROM x LEFT JOIN x ON x.x > x.x;
SELECT * FROM x RIGHT JOIN x ON x.x > x.x;
SELECT (SELECT x FROM x);
PRAGMA x;
SELECT x FROM (SELECT {'x': 42, 'x': 43} AS x) AS x;
SELECT x FROM (SELECT {'x': NULL, 'x': 43} AS x) AS x;
SELECT x FROM (SELECT {'x': NULL} AS x) AS x;
SELECT x FROM (SELECT {'x': x, 'x': x} AS x FROM x AS x) AS x;
PRAGMA x;
CREATE TABLE x (x INT, x STRUCT(x INT, x BOOLEAN));
INSERT INTO x VALUES (1, {'x': 42, 'x': TRUE}), (2, NULL), (3, {'x': 84, 'x': NULL}), (4, {'x': NULL, 'x': FALSE});
COPY x TO '__TEST_DIR__/test_structs.parquet' WITH (foreach source, test_structs READ_PARQUET('__TEST_DIR__/test_structs.parquet'));
COPY x TO '__TEST_DIR__/test_structs.parquet' WITH (foreach source, test_structs READ_PARQUET('__TEST_DIR__/test_structs.parquet'));
COPY x TO '__TEST_DIR__/test_structs.parquet' WITH (foreach source, test_structs READ_PARQUET('__TEST_DIR__/test_structs.parquet'));
COPY x TO '__TEST_DIR__/test_structs.parquet' WITH (foreach source, test_structs READ_PARQUET('__TEST_DIR__/test_structs.parquet'));
COPY x TO '__TEST_DIR__/test_structs.parquet' WITH (foreach source, test_structs READ_PARQUET('__TEST_DIR__/test_structs.parquet'));
COPY x TO '__TEST_DIR__/test_structs.parquet' WITH (foreach source, test_structs READ_PARQUET('__TEST_DIR__/test_structs.parquet'));
COPY x TO '__TEST_DIR__/test_structs.parquet' WITH (foreach source, test_structs READ_PARQUET('__TEST_DIR__/test_structs.parquet'));
COPY x TO '__TEST_DIR__/test_structs.parquet' WITH (foreach source, test_structs READ_PARQUET('__TEST_DIR__/test_structs.parquet'));
UPDATE x SET x = {'x': 84, 'x': FALSE} WHERE x = 2;
SELECT x['b'], x.x FROM x WHERE x = 2;
CREATE TABLE x (x INT PRIMARY KEY, x STRUCT(x INT, x BOOLEAN, x TEXT, x INT[]));
INSERT INTO x SELECT x, CASE WHEN x % 10 = 0 THEN NULL ELSE {'x': x, 'x': x % 2, 'x': 'thisisastring' || CAST(x AS TEXT), 'x': [x, x + 2]} END FROM x AS x;
SELECT SUM(LENGTH(x.x)), COUNT(x.x) FROM x;
SELECT x.x FROM x WHERE x = 473564;
SELECT x.x FROM x WHERE x = 473564;
SELECT SUM(LENGTH(x.x)), COUNT(x.x) FROM x WHERE x > 47356;
SELECT STATS({'x': 3, 'x': 4});
SELECT STATS({'x': 3, 'x': 4});
CREATE TABLE x AS SELECT 3 AS x, 4 AS x;
SELECT STATS({'x': x, 'x': x}) FROM x;
CREATE TABLE x AS SELECT {'x': 3, 'x': 4} AS x;
SELECT STATS(x['i']) FROM x;
PRAGMA x;
SELECT (SELECT x.x['i'] + x.x['j'] FROM (VALUES ({'x': 1, 'x': 2})) AS x) FROM (VALUES ({'x': 1, 'x': 2})) AS x;
SELECT (SELECT x.x['i'] + x.x['j'] FROM (VALUES ({'x': 1, 'x': 2})) AS x) FROM (VALUES ({'x': 1, 'x': 2})) AS x;
SET x = 'nulls_first';
PRAGMA x;
PRAGMA x;
INSERT INTO x VALUES ({'x': 1, 'x': 2});
SELECT * FROM x ORDER BY (x).x;
INSERT INTO x VALUES (NULL);
SELECT * FROM x ORDER BY (x).x;
INSERT INTO x VALUES (ROW(2, 3));
SELECT * FROM x ORDER BY (x).x;
INSERT INTO x VALUES (ROW(3, NULL)), (ROW(NULL, 4));
SELECT * FROM x ORDER BY (x).x, (x).x;
INSERT INTO x VALUES (ROW(1, 2, 3));
INSERT INTO x VALUES (ROW(1));
INSERT INTO x VALUES (ROW('hello', 1));
INSERT INTO x VALUES (ROW('hello', [1, 2]));
INSERT INTO x VALUES (ROW(1, ROW(1, 7)));
PRAGMA x;
SELECT UNNEST(('1,2,3,4,,6', (1))), x AS x;
SELECT UNNEST(('1,2,3,4,,6', (CASE WHEN RANDOM() < 10 THEN 0 ELSE 1 END))), 42 AS x, x;
PRAGMA x;
PRAGMA x;
INSERT INTO x VALUES ({'x': 1, 'x': 2});
SELECT * FROM x ORDER BY (x).x;
UPDATE x SET x = {'x': 3, 'x': 4};
SELECT * FROM x ORDER BY (x).x;
UPDATE x SET x = NULL;
SELECT * FROM x ORDER BY (x).x;
UPDATE x SET x = {'x': NULL, 'x': 4};
SELECT * FROM x ORDER BY (x).x;
UPDATE x SET x = {'x': 3, 'x': NULL};
SELECT * FROM x ORDER BY (x).x;
BEGIN;
UPDATE x SET x = {'x': 3, 'x': 4};
SELECT * FROM x ORDER BY (x).x;
ROLLBACK;
SELECT * FROM x ORDER BY (x).x;
INSERT INTO x VALUES ({'x': 2, 'x': 3});
SELECT * FROM x;
INSERT INTO x VALUES ({'x': 3, 'x': 4});
SELECT * FROM x;
UPDATE x SET x = {'x': NULL, 'x': NULL} WHERE (x).x >= 3;
SELECT * FROM x;
CREATE TABLE x AS SELECT x AS x FROM x;
CREATE VIEW x AS SELECT UNNEST(x) FROM x;
SELECT x FROM x WHERE x <= CAST('1998-09-02' AS DATE) GROUP BY x ORDER BY x;
PRAGMA x;
SELECT ROW(42, 'hello') UNION ALL SELECT '{'': 42,'': hello}';
SELECT ROW(42, 'hello') UNION ALL SELECT '(84, world)';
PRAGMA x;
SELECT x <> x FROM (VALUES ((NULL, 1, NULL), (5, 6, 7))) AS x;
SELECT x <> x IS NULL FROM (VALUES ((NULL, 1, NULL), (5, 6, 7))) AS x;
SELECT 1 FROM (VALUES ({'x': NULL})) AS x WHERE 1 <> x.x;
SELECT [NULL, 6] <> [6, 5];
SELECT 1 FROM (VALUES ([NULL, 6], [5, 6])) AS x WHERE x <> x;
SELECT 1 FROM (VALUES ([NULL, 1, NULL], [5, 6, 7])) AS x WHERE x = x;
SELECT 1 FROM (VALUES ((NULL, 1, NULL), (5, 6, 7))) AS x WHERE x <> x;
SELECT 1 FROM (VALUES ((NULL, 1, NULL), (5, 6, 7))) AS x WHERE x <> x IS NULL;
SELECT x <> x IS NULL FROM (VALUES ((NULL, 1, NULL), (5, 6, 7))) AS x WHERE NULL;
SELECT 1 FROM (VALUES ((NULL, 1, NULL), (5, 6, 7), (NULL, 2), (4, 5))) AS x WHERE x <> x AND x <> x;
SELECT x <> x, x <> x FROM (VALUES ((NULL, 1, NULL), (5, 6, 7), (NULL, 2), (4, 5))) AS x WHERE x <> x AND x <> x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
CREATE TABLE x (x STRUCT(x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT));
CREATE TABLE x (x STRUCT(x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT));
PRAGMA x;
SELECT UNNEST({'x': 42, 'x': 88});
SELECT x, x FROM (SELECT UNNEST({'x': 42, 'x': 88}));
SELECT UNNEST({'x': 42, 'x': {'x': 88, 'x': 99}});
SELECT UNNEST({'x': 42, 'x': {'x': 88, 'x': 99}}, x := TRUE);
SELECT UNNEST({'x': 42, 'x': {'x': {'x': 4}, 'x': 99}}, x := 2);
SELECT x, x, x FROM (SELECT UNNEST({'x': 42, 'x': {'x': 88, 'x': 99}}, x := TRUE));
SELECT UNNEST([{'x': 42, 'x': 88}, {'x': NULL, 'x': 99}]);
SELECT UNNEST([{'x': 42, 'x': 88}, {'x': NULL, 'x': 99}], x := TRUE);
SELECT UNNEST([[{'x': 42, 'x': {'x': 99}}, {'x': NULL, 'x': {'x': NULL}}]], x := 1);
SELECT UNNEST([[{'x': 42, 'x': {'x': 99}}, {'x': NULL, 'x': {'x': NULL}}]], x := 2);
SELECT UNNEST([[{'x': 42, 'x': {'x': 99}}, {'x': NULL, 'x': {'x': NULL}}]], x := 3);
SELECT UNNEST([[{'x': 42, 'x': {'x': 99}}, {'x': NULL, 'x': {'x': NULL}}]], x := 4);
SELECT UNNEST({'x': [1, 2, 3]}, x := TRUE);
SELECT UNNEST({'x': 44, 'x': 88}), UNNEST([1, 2, 3]);
SELECT UNNEST({'x': 44, 'x': 88}), UNNEST([[1, 2, 3], [4, 5]], x := TRUE);
SELECT x, "x", x FROM (SELECT UNNEST({'x': 42, 'x': {'x': 88, 'x': 99}}, x := TRUE));
SELECT UNNEST({'x': 42, 'x': 88}) + 42;
SELECT UNNEST(UNNEST([{'x': 42, 'x': 88}, {'x': NULL, 'x': 99}]));
PRAGMA x;
CREATE TABLE x AS SELECT {'x': 1, 'x': 2, 'x': 3} AS x;
INSERT INTO x VALUES ({'x': 2, 'x': 3, 'x': 1});
INSERT INTO x VALUES ({'x': 3, 'x': 1, 'x': 2});
SELECT UNNEST(x) FROM x UNION ALL SELECT x.x, x.x, x.x FROM x ORDER BY x.x, x.x, x.x;
SELECT * FROM x ORDER BY UNNEST(x);
CREATE OR REPLACE TABLE x AS SELECT {'x': 1, 'x': 2, 'x': 3} AS x;
INSERT INTO x VALUES ({'x': 1, 'x': 3, 'x': 1});
INSERT INTO x VALUES ({'x': 1, 'x': 1, 'x': 2});
SELECT UNNEST(x) FROM x ORDER BY ALL;
SELECT UNNEST(x) FROM x ORDER BY 2 COLLATE nocase;
CREATE OR REPLACE TABLE x AS SELECT {'x': 'hello'} AS x;
INSERT INTO x VALUES ({'x': 'WORLD'});
SELECT UNNEST(x) FROM x ORDER BY 1 COLLATE NOCASE;
CREATE OR REPLACE TABLE x AS SELECT {'x': 'hello', 'x': 1} AS x;
INSERT INTO x VALUES ({'x': 'WORLD', 'x': 2});
SELECT UNNEST(x) FROM x UNION ALL SELECT x.x, x.x FROM x ORDER BY 1 COLLATE NOCASE;
SELECT UNNEST(x), -x.x AS x FROM x UNION ALL SELECT x.x, x.x, x.x FROM x ORDER BY x;
PRAGMA x;
SELECT (SELECT UNNEST(x).x) FROM (VALUES ({'x': 42, 'x': 88})) AS x;
SELECT UNNEST(x) FROM (VALUES ({'x': 42, 'x': 88})) AS x;
SELECT (SELECT x.x FROM (SELECT UNNEST(x)) AS x) FROM (VALUES ({'x': 42, 'x': 88})) AS x;
UPDATE x SET (x) = ROW();
PRAGMA x;
CREATE TABLE x (x TIME);
INSERT INTO x VALUES ('00:01:20'), ('20:08:10.998'), ('20:08:10.33'), ('20:08:10.001'), (NULL);
SELECT * FROM x;
SELECT CAST(x AS TEXT) FROM x;
SELECT CAST('' AS TIME);
SELECT CAST('  ' AS TIME);
SELECT CAST('  	' AS TIME);
SELECT CAST('1' AS TIME);
SELECT CAST('11' AS TIME);
SELECT CAST('11:' AS TIME);
SELECT CAST('11:1' AS TIME);
SELECT CAST('11:11' AS TIME);
SELECT CAST('11:11:' AS TIME);
SELECT CAST('11:11:f' AS TIME);
PRAGMA x;
CREATE TABLE x (x TIME);
CREATE TABLE x (x TIMESTAMP);
INSERT INTO x VALUES ('00:00:01');
INSERT INTO x VALUES ('1993-08-14 00:00:01');
SELECT COUNT(*) FROM x INNER JOIN x ON (CAST(x.x AS TIME) = x.x);
PRAGMA x;
SELECT CAST('02:30:00' AS TIMETZ);
SELECT CAST('02:30:00+04' AS TIMETZ);
SELECT CAST('02:30:00+04:30' AS TIMETZ);
SELECT CAST('02:30:00+04:30:45' AS TIMETZ);
SELECT CAST('2023-08-20 16:15:03.123456' AS TIMETZ);
SELECT CAST('02:30:00+1200' AS TIMETZ);
SELECT CAST('02:30:00-1200' AS TIMETZ);
SELECT CAST(CAST('2023-08-20 16:15:03.123456' AS TIMESTAMP) AS TIMETZ);
SELECT CAST(CAST('16:15:03.123456' AS TIME) AS TIMETZ);
SELECT CAST(CAST('02:30:00+04' AS TIMETZ) AS TIME);
SELECT CAST('2021-08-20' AS TIME);
CREATE TABLE x (x TIMETZ);
INSERT INTO x VALUES (NULL), ('00:00:00+1559'), ('00:00:00+1558'), ('02:30:00'), ('02:30:00+04'), ('02:30:00+04:30'), ('02:30:00+04:30:45'), ('16:15:03.123456'), ('02:30:00+1200'), ('02:30:00-1200'), ('24:00:00-1558'), ('24:00:00-1559');
SELECT * FROM x ORDER BY ALL;
SELECT x.x, x.x, x.x < x.x, x.x <= x.x, x.x = x.x, x.x >= x.x, x.x > x.x, x.x <> x.x FROM x AS x, x AS x ORDER BY ALL;
SELECT CAST('02:30:00>04' AS TIMETZ);
SELECT CAST('02:30:00+4' AS TIMETZ);
SELECT CAST('02:30:00+4xx' AS TIMETZ);
SELECT CAST('02:30:00+2000' AS TIMETZ);
SELECT CAST('02:30:00+20:xx' AS TIMETZ);
SELECT CAST('02:30:00+20:45:xx' AS TIMETZ);
SELECT CAST('infinity' AS TIMETZ);
PRAGMA x;
CREATE TABLE x (x TIMETZ);
CREATE TABLE x (x TIMETZ);
CREATE TABLE x (x TIMETZ);
CREATE TABLE x (x TIMETZ);
CREATE TABLE x (x TIMETZ);
CREATE TABLE x (x TIMETZ);
CREATE TABLE x (x TIMETZ);
CREATE TABLE x (x TIMETZ);
CREATE TABLE x (x TIMETZ);
CREATE TABLE x (x TIMETZ);
CREATE TABLE x (x TIMETZ);
CREATE TABLE x (x TIMETZ);
PRAGMA x;
SET x = 'gregorian';
SET x = 'Asia/Singapore';
CREATE OR REPLACE TABLE x (x TIMETZ);
INSERT INTO x (x) VALUES ('12:34:56');
SELECT x, CAST(x AS TIME) AS x, CAST(CAST(x AS TIME) AS TIMETZ) AS x FROM x;
SELECT (CAST(x AS TIME) = '12:34:56') AS x, (CAST(x AS TIME) <> '12:34:56') AS x, (CAST(x AS TIME) IN ('12:34:56')) AS x, (NOT CAST(x AS TIME) IN ('12:34:56')) AS x FROM x;
PRAGMA x;
SELECT CAST('23:59:59.999999' AS TIME);
SELECT CAST('23:59:59.999999' AS TIME) + INTERVAL (1) MICROSECOND;
SELECT CAST('23:59:59.999999' AS TIME) + INTERVAL (1) SECOND;
SELECT CAST('23:59:59.999999' AS TIME) + INTERVAL (1) MINUTE;
SELECT CAST('23:59:59.999999' AS TIME) + INTERVAL (1) HOUR;
SELECT CAST('23:59:59.999999' AS TIME) + INTERVAL (1) DAY;
SELECT CAST('23:59:59.999999' AS TIME) + INTERVAL (1) MONTH;
SELECT CAST('23:59:59.999999' AS TIME) + INTERVAL (1) YEAR;
PRAGMA x;
SELECT CAST(CAST('14:42:04' AS TIME) AS TEXT);
SELECT CAST(CAST('14:42:04.35' AS TIME) AS TEXT);
SELECT CAST(CAST('14:42:04.999999' AS TIME) AS TEXT);
SELECT CAST(CAST('14:42:04.999999999' AS TIME) AS TEXT);
SELECT CAST(CAST('14:42:04.000000' AS TIME) AS TEXT);
SELECT CAST(CAST('14:42:04.500' AS TIME) AS TEXT);
SELECT CAST(CAST('50:42:04.500' AS TIME) AS TEXT);
SELECT CAST(CAST('100:42:04.500' AS TIME) AS TEXT);
SELECT CAST(CAST('14:70:04.500' AS TIME) AS TEXT);
SELECT CAST(CAST('14:100:04.500' AS TIME) AS TEXT);
SELECT CAST(CAST('14:42:70.500' AS TIME) AS TEXT);
SELECT CAST(CAST('14-42-04' AS TIME) AS TEXT);
PRAGMA x;
SELECT TRY_CAST('' AS TIME);
SELECT TRY_CAST('    ' AS TIME);
SELECT TRY_CAST('11' AS TIME);
SELECT TRY_CAST('11:' AS TIME);
SELECT TRY_CAST('11:11' AS TIME);
SELECT TRY_CAST('11:11:' AS TIME);
SELECT TRY_CAST('11:11:A' AS TIME);
SELECT TRY_CAST('11:11:A1' AS TIME);
SELECT TRY_CAST('11/11/11' AS TIME);
SELECT TRY_CAST('  11:11:11  ' AS TIME);
SELECT TRY_CAST('24:00:00' AS TIME);
SELECT TRY_CAST('24:00:01' AS TIME);
SELECT TRY_CAST('23:60:00' AS TIME);
SELECT TRY_CAST('23:59:60' AS TIME);
SELECT TRY_CAST('23:59:59' AS TIME);
SELECT TRY_CAST('23:59:59.999999' AS TIME);
SELECT TRY_CAST('24:00:00' AS TIME);
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
SELECT CAST(CAST('2023-12-08 08:51:39.123456' AS TIMESTAMP_MS) AS TIME);
SELECT CAST(CAST('2023-12-08 08:51:39.123456' AS TIMESTAMP_S) AS TIME);
SELECT CAST(CAST('2023-12-08 08:51:39.123456' AS TIMESTAMP_NS) AS TIME);
SELECT CAST('2024-05-10 11:06:33.446' AS TIMESTAMP_S);
SELECT CAST('2024-05-10 11:06:33.846' AS TIMESTAMP_S);
SELECT CAST('2024-05-10 11:06:33.123446' AS TIMESTAMP_MS);
SELECT CAST('2024-05-10 11:06:33.123846' AS TIMESTAMP_MS);
CREATE TABLE x (x TIMESTAMP);
INSERT INTO x VALUES ('2024-05-10 11:06:33.446'), ('2024-05-10 11:06:33.846'), ('2024-05-10 11:06:33.123446'), ('2024-05-10 11:06:33.523846');
SELECT x, CAST(x AS TIMESTAMP_MS), CAST(x AS TIMESTAMP_S) FROM x;
SELECT CAST(CAST('1900-01-01 03:08:47' AS TIMESTAMP) AS TIMESTAMP_MS);
SELECT CAST(CAST('1969-01-01 01:03:20.45432' AS TIMESTAMP) AS TEXT);
SELECT CAST(CAST('-1000-01-01 01:03:20.45432' AS TIMESTAMP) AS TEXT);
SELECT CAST(CAST('1000-01-01 (BC) 01:03:20.45432' AS TIMESTAMP) AS TEXT);
PRAGMA x;
CREATE TABLE x (x TIMESTAMP);
INSERT INTO x VALUES ('blabla');
INSERT INTO x VALUES ('1993-20-14 00:00:00');
INSERT INTO x VALUES ('1993-08-99 00:00:00');
INSERT INTO x VALUES ('1993-02-29 00:00:00');
INSERT INTO x VALUES ('1900-02-29 00:00:00');
INSERT INTO x VALUES ('1992-02-29 00:00:00');
INSERT INTO x VALUES ('2000-02-29 00:00:00');
INSERT INTO x VALUES ('02-02-1992 00:00:00');
INSERT INTO x VALUES ('1900-1-1 59:59:23');
INSERT INTO x VALUES ('1900a01a01 00:00:00');
INSERT INTO x VALUES ('1900-1-1 00;00;00');
INSERT INTO x VALUES ('1900-1-1 00a00a00');
INSERT INTO x VALUES ('1900-1-1 00/00/00');
INSERT INTO x VALUES ('1900-1-1 00-00-00');
SET x = 'nulls_first';
PRAGMA x;
CREATE TABLE IF NOT EXISTS x (x TIMESTAMP);
INSERT INTO x VALUES ('2008-01-01 00:00:01'), (NULL), ('2007-01-01 00:00:01'), ('2008-02-01 00:00:01'), ('2008-01-02 00:00:01'), ('2008-01-01 10:00:00'), ('2008-01-01 00:10:00'), ('2008-01-01 00:00:10');
SELECT CAST('2017-07-23 13:10:11' AS TIMESTAMP);
SELECT CAST('2017-07-23T13:10:11' AS TIMESTAMP), CAST('2017-07-23T13:10:11Z' AS TIMESTAMP);
SELECT CAST('    2017-07-23     13:10:11    ' AS TIMESTAMP);
SELECT CAST('    2017-07-23     13:10:11    AA' AS TIMESTAMP);
SELECT CAST('AA2017-07-23 13:10:11' AS TIMESTAMP);
SELECT CAST('2017-07-23A13:10:11' AS TIMESTAMP);
SELECT x FROM x ORDER BY x;
SELECT MIN(x) FROM x;
SELECT MAX(x) FROM x;
SELECT SUM(x) FROM x;
SELECT AVG(x) FROM x;
SELECT x + x FROM x;
SELECT x * x FROM x;
SELECT x / x FROM x;
SELECT x % x FROM x;
SELECT x - x FROM x;
SELECT YEAR(CAST('1992-01-01 01:01:01' AS TIMESTAMP));
SELECT YEAR(CAST('1992-01-01 01:01:01' AS TIMESTAMP));
SELECT CAST((CAST('1992-01-01 01:01:01' AS TIMESTAMP)) AS DATE);
SELECT CAST((CAST('1992-01-01 01:01:01' AS TIMESTAMP)) AS TIME);
SELECT CAST(x AS DATE) FROM x WHERE EXTRACT(YEAR FROM x) = 2007 ORDER BY 1;
SELECT CAST(x AS TIME) FROM x WHERE EXTRACT(YEAR FROM x) = 2007 ORDER BY 1;
SELECT CAST((CAST('1992-01-01' AS DATE)) AS TIMESTAMP);
SELECT CAST((CAST('1992-01-01' AS DATE)) AS TIMESTAMP);
SELECT CAST((CAST('1992-01-01' AS DATE)) AS TIMESTAMP);
SELECT CAST((CAST('1992-01-01' AS DATE)) AS TIMESTAMP);
SELECT CAST(REPEAT('1992-02-02 ', 100000) AS TIMESTAMP);
PRAGMA x;
CREATE TABLE x (x TIMESTAMP);
CREATE TABLE x (x TIMESTAMP);
INSERT INTO x VALUES ('1993-08-14 00:00:01');
INSERT INTO x VALUES ('1993-08-14 00:00:01');
SELECT COUNT(*) FROM x INNER JOIN x ON (x.x = x.x);
PRAGMA x;
CREATE TABLE x (x TIMESTAMP_S, x TIMESTAMP_MS, x TIMESTAMP, x TIMESTAMP_NS);
INSERT INTO x VALUES ('2000-01-01 01:12:23', '2000-01-01 01:12:23.123', '2000-01-01 01:12:23.123456', '2000-01-01 01:12:23.123457');
SELECT x = x, x = x, x = x, x = x, x = x, x = x, x = x, x = x, x = x, x = x, x = x, x = x FROM x;
SELECT TYPEOF([CAST('2000-01-01 01:12:23.123456' AS TIMESTAMP), CAST('2000-01-01 01:12:23.123456' AS TIMESTAMP_NS)]);
SELECT TYPEOF([CAST('2000-01-01 01:12:23.123456' AS TIMESTAMP_NS), CAST('2000-01-01 01:12:23.123456' AS TIMESTAMP)]);
SELECT CAST('2001-04-20 14:42:11.123' AS TIMESTAMP) AS x, CAST('2001-04-20 14:42:11.0' AS TIMESTAMP) AS x;
SELECT CAST('2001-04-20 14:42:11.12300000000000000000' AS TIMESTAMP);
PRAGMA x;
CREATE TABLE IF NOT EXISTS x (x TIMESTAMP_S, x TIMESTAMP_MS, x TIMESTAMP, x TIMESTAMP_NS);
INSERT INTO x VALUES ('2008-01-01 00:00:01', '2008-01-01 00:00:01.594', '2008-01-01 00:00:01.88926', '2008-01-01 00:00:01.889268321');
SELECT * FROM x;
SELECT YEAR(x), YEAR(x), YEAR(x) FROM x;
SELECT CAST(x AS TIMESTAMP), CAST(x AS TIMESTAMP), CAST(x AS TIMESTAMP) FROM x;
SELECT CAST(x AS TIMESTAMP_S), CAST(x AS TIMESTAMP_MS), CAST(x AS TIMESTAMP_NS) FROM x;
INSERT INTO x VALUES ('2008-01-01 00:00:51', '2008-01-01 00:00:01.894', '2008-01-01 00:00:01.99926', '2008-01-01 00:00:01.999268321');
INSERT INTO x VALUES ('2008-01-01 00:00:11', '2008-01-01 00:00:01.794', '2008-01-01 00:00:01.98926', '2008-01-01 00:00:01.899268321');
SELECT CAST(CAST('90000-01-19 03:14:07.999999' AS TIMESTAMP) AS TIMESTAMP_NS);
SELECT CAST(x AS TIMESTAMP_NS) FROM (VALUES ('2024-06-04 10:17:10.987654321'), ('2024-06-04 10:17:10.98765432'), ('2024-06-04 10:17:10.9876543'), ('2024-06-04 10:17:10.9876543'), ('2024-06-04 10:17:10.987654'), ('2024-06-04 10:17:10.98765'), ('2024-06-04 10:17:10.9876'), ('2024-06-04 10:17:10.987'), ('2024-06-04 10:17:10.98'), ('2024-06-04 10:17:10.9'), ('2024-06-04 10:17:10')) AS x;
SELECT CAST('2262-04-11 23:47:16.854775808' AS TIMESTAMP_NS);
SELECT CAST('1969-01-01T23:59:59.9999999' AS TIMESTAMP_NS);
SELECT CAST(x AS TIME) FROM x;
SELECT CAST(x AS TIME) FROM x;
SELECT CAST(x AS TIME) FROM x;
SELECT CAST(x AS TIME) FROM x;
SELECT CAST(x AS TIME) FROM x;
SELECT x FROM x ORDER BY x;
SELECT x FROM x ORDER BY x;
SELECT x FROM x ORDER BY x;
INSERT INTO x VALUES ('2008-01-01 00:00:51', '2008-01-01 00:00:01.894', '2008-01-01 00:00:01.99926', '2008-01-01 00:00:01.999268321');
INSERT INTO x VALUES ('2008-01-01 00:00:11', '2008-01-01 00:00:01.794', '2008-01-01 00:00:01.98926', '2008-01-01 00:00:01.899268321');
SELECT COUNT(*), x FROM x GROUP BY x ORDER BY x;
SELECT COUNT(*), x FROM x GROUP BY x ORDER BY x;
SELECT COUNT(*), x FROM x GROUP BY x ORDER BY x;
CREATE TABLE IF NOT EXISTS x (x TIMESTAMP_S, x TIMESTAMP_MS, x TIMESTAMP, x TIMESTAMP_NS);
INSERT INTO x VALUES ('2008-01-01 00:00:11', '2008-01-01 00:00:01.794', '2008-01-01 00:00:01.98926', '2008-01-01 00:00:01.899268321');
SELECT x.x FROM x INNER JOIN x ON (x.x = x.x);
SELECT x.x FROM x INNER JOIN x ON (x.x = x.x);
SELECT x.x FROM x INNER JOIN x ON (x.x = x.x);
SELECT CAST('2008-01-01 00:00:11' AS TIMESTAMP) = CAST('2008-01-01 00:00:11' AS TIMESTAMP_MS);
SELECT CAST('2008-01-01 00:00:11' AS TIMESTAMP) = CAST('2008-01-01 00:00:11' AS TIMESTAMP_NS);
SELECT CAST('2008-01-01 00:00:11' AS TIMESTAMP) = CAST('2008-01-01 00:00:11' AS TIMESTAMP_S);
SELECT CAST('2008-01-01 00:00:11.1' AS TIMESTAMP) = CAST('2008-01-01 00:00:11' AS TIMESTAMP_MS);
SELECT CAST('2008-01-01 00:00:11.1' AS TIMESTAMP) = CAST('2008-01-01 00:00:11' AS TIMESTAMP_NS);
SELECT CAST('2008-01-01 00:00:11.1' AS TIMESTAMP) = CAST('2008-01-01 00:00:11.1' AS TIMESTAMP_S);
SELECT CAST('2008-01-01 00:00:11.1' AS TIMESTAMP_MS) = CAST('2008-01-01 00:00:11' AS TIMESTAMP_NS);
SELECT CAST('2008-01-01 00:00:11.1' AS TIMESTAMP_MS) = CAST('2008-01-01 00:00:11' AS TIMESTAMP_S);
SELECT CAST('2008-01-01 00:00:11.1' AS TIMESTAMP_NS) = CAST('2008-01-01 00:00:11' AS TIMESTAMP_S);
SELECT CAST('2008-01-01 00:00:11' AS TIMESTAMP_MS) = CAST('2008-01-01 00:00:11' AS TIMESTAMP_NS);
SELECT CAST('2008-01-01 00:00:11' AS TIMESTAMP_MS) = CAST('2008-01-01 00:00:11' AS TIMESTAMP_S);
SELECT CAST('2008-01-01 00:00:11' AS TIMESTAMP_NS) = CAST('2008-01-01 00:00:11' AS TIMESTAMP_S);
SELECT CAST(x.x AS TIME) >= ('12:34:56') FROM (VALUES (CAST('2030-01-01' AS TIMESTAMP_S)), (CAST('1969-12-23 20:44:40' AS TIMESTAMP_S))) AS x;
SELECT NOT CAST(x.x AS TIME) >= ('12:34:56') FROM (VALUES (CAST('2030-01-01' AS TIMESTAMP_MS)), (CAST('1969-12-23 20:44:40' AS TIMESTAMP_MS))) AS x;
PRAGMA x;
SELECT CAST('2021-11-15 02:30:00' AS TIMESTAMPTZ);
SELECT CAST(CAST('2021-11-15 02:30:00' AS TIMESTAMP) AS TIMESTAMPTZ);
SELECT CAST(CAST('2021-11-15 02:30:00' AS TIMESTAMP) AS TIMESTAMPTZ);
SELECT CAST('1880-05-15T12:00:00+00:50:20' AS TIMESTAMPTZ);
PRAGMA x;
SELECT CAST('1970-01-01' AS TIMESTAMP);
SELECT CAST('290309-12-22 (BC) 00:00:00' AS TIMESTAMP);
SELECT CAST('290309-12-21 (BC) 12:59:59.999999' AS TIMESTAMP);
SELECT CAST('290309-12-22 (BC) 00:00:00' AS TIMESTAMP) + INTERVAL (1) DAY;
SELECT CAST('290309-12-22 (BC) 00:00:00' AS TIMESTAMP) - INTERVAL (1) MICROSECOND;
SELECT CAST('290309-12-22 (BC) 00:00:00' AS TIMESTAMP) - INTERVAL (1) SECOND;
SELECT CAST('290309-12-22 (BC) 00:00:00' AS TIMESTAMP) - INTERVAL (1) DAY;
SELECT CAST('290309-12-22 (BC) 00:00:00' AS TIMESTAMP) - INTERVAL (1) MONTH;
SELECT CAST('290309-12-22 (BC) 00:00:00' AS TIMESTAMP) - INTERVAL (1) YEAR;
SELECT CAST('294247-01-10 04:00:54.775806' AS TIMESTAMP);
SELECT CAST('294247-01-10 04:00:54.775807' AS TIMESTAMP);
SELECT CAST('294247-01-10 04:00:54.775808' AS TIMESTAMP);
SELECT CAST('294247-01-10 04:00:54.775806' AS TIMESTAMP) + INTERVAL (1) MICROSECOND;
SELECT CAST('294247-01-10 04:00:54.775806' AS TIMESTAMP) + INTERVAL (1) SECOND;
SELECT CAST('294247-01-10 04:00:54.775806' AS TIMESTAMP) + INTERVAL (1) HOUR;
SELECT CAST('294247-01-10 04:00:54.775806' AS TIMESTAMP) + INTERVAL (1) DAY;
SELECT CAST('294247-01-10 04:00:54.775806' AS TIMESTAMP) + INTERVAL (1) MONTH;
SELECT CAST('294247-01-10 04:00:54.775806' AS TIMESTAMP) + INTERVAL (1) YEAR;
SELECT CAST('290309-12-22 (BC) 00:00:00+07:00' AS TIMESTAMP);
SELECT CAST('294247-01-10 04:00:54-07:00' AS TIMESTAMP);
SELECT EPOCH(CAST('294247-01-10 04:00:54.775806' AS TIMESTAMP)), EPOCH(CAST('290309-12-22 (BC) 00:00:00' AS TIMESTAMP));
SELECT YEAR(CAST('294247-01-10 04:00:54.775806' AS TIMESTAMP)), YEAR(CAST('290309-12-22 (BC) 00:00:00' AS TIMESTAMP));
SELECT DECADE(CAST('294247-01-10 04:00:54.775806' AS TIMESTAMP)), DECADE(CAST('290309-12-22 (BC) 00:00:00' AS TIMESTAMP));
SELECT MONTHNAME(CAST('294247-01-10 04:00:54.775806' AS TIMESTAMP)), MONTHNAME(CAST('290309-12-22 (BC) 00:00:00' AS TIMESTAMP));
SELECT AGE(CAST('294247-01-10 04:00:54.775806' AS TIMESTAMP), CAST('290309-12-22 (BC) 00:00:00' AS TIMESTAMP));
PRAGMA x;
CREATE TABLE x (x TIMESTAMP(0), x TIMESTAMP(3), x TIMESTAMP(6), x TIMESTAMP(9));
INSERT INTO x VALUES ('2020-01-01 01:23:45.123456789', '2020-01-01 01:23:45.123456789', '2020-01-01 01:23:45.123456789', '2020-01-01 01:23:45.123456789');
SELECT CAST(x AS TEXT), CAST(x AS TEXT), CAST(x AS TEXT), CAST(x AS TEXT) FROM x;
SELECT EXTRACT(MICROSECONDS FROM x), EXTRACT(MICROSECONDS FROM x), EXTRACT(MICROSECONDS FROM x), EXTRACT(MICROSECONDS FROM x) FROM x;
SELECT EXTRACT(MICROSECONDS FROM x), EXTRACT(MICROSECONDS FROM x), EXTRACT(MICROSECONDS FROM x), EXTRACT(MICROSECONDS FROM x) FROM x;
SELECT EXTRACT(MICROSECONDS FROM x), EXTRACT(MICROSECONDS FROM x), EXTRACT(MICROSECONDS FROM x), EXTRACT(MICROSECONDS FROM x) FROM x;
SELECT EXTRACT(MICROSECONDS FROM x), EXTRACT(MICROSECONDS FROM x), EXTRACT(MICROSECONDS FROM x), EXTRACT(MICROSECONDS FROM x) FROM x;
CREATE TABLE x (x TIMESTAMP(10));
CREATE TABLE x (x TIMESTAMP(99999));
CREATE TABLE x (x TIMESTAMP(1, 1));
SELECT CAST('2262-04-11 23:47:16.854775807' AS TIMESTAMP_NS);
PRAGMA x;
SELECT CAST('2021-05-25 04:55:03.382494 UTC' AS TIMESTAMP);
SELECT CAST('2021-05-25 04:55:03.382494 utc' AS TIMESTAMP);
SELECT CAST('2021-05-25 04:55:03.382494 uTc' AS TIMESTAMP);
SELECT CAST('2021-05-25 04:55:03.382494 EST' AS TIMESTAMP);
SELECT CAST('2021-05-25 04:55:03.382494 EST' AS TIMESTAMP);
SET x = 'gregorian';
SET x = 'UTC';
SELECT CAST('2021-05-25 04:55:03.382494 EST' AS TIMESTAMPTZ);
SET x = 'America/Phoenix';
SELECT DATE_DIFF('HOUR', CAST('2010-07-07 10:20:00' AS TIMESTAMP) AT TIME ZONE 'Asia/Bangkok', CAST('2010-07-07 10:20:00+00' AS TIMESTAMP)) AS x;
PRAGMA x;
SELECT TRY_CAST('' AS TIMESTAMP);
SELECT TRY_CAST('    ' AS TIMESTAMP);
SELECT TRY_CAST('1111' AS TIMESTAMP);
SELECT TRY_CAST('  1111   ' AS TIMESTAMP);
SELECT TRY_CAST('1111-' AS TIMESTAMP);
SELECT TRY_CAST('1111-11' AS TIMESTAMP);
SELECT TRY_CAST('1111-11-' AS TIMESTAMP);
SELECT TRY_CAST('1111-111-1' AS TIMESTAMP);
SELECT TRY_CAST('1111-11-111' AS TIMESTAMP);
SELECT TRY_CAST('1111-11-11 11' AS TIMESTAMP);
SELECT TRY_CAST('1111-11-11 11:11' AS TIMESTAMP);
SELECT TRY_CAST('1111-11-11 11:11:999' AS TIMESTAMP);
SELECT TRY_CAST('1111-11-11 11:11:11.AAA' AS TIMESTAMP);
SELECT TRY_CAST('1111-11-11 11X11A11' AS TIMESTAMP);
SELECT TRY_CAST('1111-11-11 11:11:11' AS TIMESTAMP);
SELECT TRY_CAST('290309-12-21 (BC) 12:59:59.999999' AS TIMESTAMP);
SELECT TRY_CAST('294247-01-10 04:00:54.775807' AS TIMESTAMP);
SELECT TRY_CAST('290309-12-22 (BC) 00:00:00' AS TIMESTAMP);
SELECT TRY_CAST('294247-01-10 04:00:54.775806' AS TIMESTAMP);
SELECT TRY_CAST('infinity' AS TIMESTAMP);
SELECT TRY_CAST('-infinity' AS TIMESTAMP);
PRAGMA x;
SELECT CAST('2020-12-31 21:25:58.745232' AS TIMESTAMP);
SELECT CAST('2020-12-31 21:25:58.745232' AS TIMESTAMP);
SELECT CAST('2020-12-31 21:25:58.745232+00' AS TIMESTAMP);
SELECT CAST('2020-12-31 21:25:58.745232+0000' AS TIMESTAMP);
SELECT CAST('2020-12-31 21:25:58.745232+02' AS TIMESTAMP);
SELECT CAST('2020-12-31 21:25:58.745232-02' AS TIMESTAMP);
SELECT CAST('2020-12-31 21:25:58.745232+0215' AS TIMESTAMP);
SELECT CAST('2020-12-31 21:25:58.745232+02:15' AS TIMESTAMP);
SELECT CAST('2020-12-31 21:25:58.745232-0215' AS TIMESTAMP);
SELECT CAST('2020-12-31 21:25:58+02:15' AS TIMESTAMP);
PRAGMA x;
CREATE TABLE x (x INT, x UINT128);
INSERT INTO x VALUES (1, 42), (2, 1267650600228229401496703205376), (2, 0), (1, '8');
SELECT MIN(x), MAX(x), SUM(x), FIRST(x), LAST(x) FROM x;
SELECT x, MIN(x), MAX(x), SUM(x), FIRST(x), LAST(x) FROM x GROUP BY x ORDER BY 1;
PRAGMA x = 1;
SELECT FIRST(x), LAST(x) FROM x;
SELECT x, FIRST(x), LAST(x) FROM x GROUP BY x ORDER BY 1;
PRAGMA x;
SELECT ~(-CAST(50 AS UINT128)), -(-(CAST(50 AS UINT128)));
SELECT -(CAST(0 AS UINT128));
SELECT CAST(42 AS UINT128) + CAST(42 AS UINT128);
SELECT CAST('100000000000000000000' AS UINT128) + CAST('100000000000000000000' AS UINT128);
SELECT CAST('340282366920938463463374607431768211455' AS UINT128) + CAST('340282366920938463463374607431768211455' AS UINT128);
SELECT CAST('340282366920938463463374607431768211455' AS UINT128) + CAST('10' AS UINT128);
SELECT CAST('340282366920938463463374607431768211455' AS UINT128) - CAST(10 AS UINT128) + CAST(10 AS UINT128);
SELECT CAST('340282366920938463463374607431768211455' AS UINT128) - CAST(10 AS UINT128) + CAST(11 AS UINT128);
SELECT CAST(100 AS UINT128) - CAST(42 AS UINT128), CAST(3 AS UINT128) - CAST(2 AS UINT128);
SELECT CAST('0' AS UINT128) - CAST('1' AS UINT128);
SELECT CAST(100 AS UINT128) * CAST(50 AS UINT128);
SELECT CAST('1701411834604692317' AS UINT128) * CAST('2' AS UINT128), CAST('100000000000000000000' AS UINT128) * CAST('1000000000000000000' AS UINT128);
SELECT CAST('340282366920938463463374607431768211455' AS UINT128) * CAST(1 AS UINT128);
SELECT CAST('340282366920938463463374607431768211455' AS UINT128) * CAST(2 AS UINT128);
SELECT CAST('34028236692093846346' AS UINT128) * CAST('33746074317682114556' AS UINT128);
SELECT CAST(100 AS UINT128) // CAST(20 AS UINT128), CAST(90 AS UINT128) // CAST(20 AS UINT128);
SELECT CAST(100 AS UINT128) // CAST(0 AS UINT128);
SELECT CAST('100000000000000000000000000000000000000' AS UINT128) // CAST('10000000000000' AS UINT128), CAST('100000000000000000000000000000000000000' AS UINT128) // CAST('2' AS UINT128);
SELECT CAST(100 AS UINT128) % CAST(20 AS UINT128), CAST(90 AS UINT128) % CAST(20 AS UINT128);
SELECT CAST(100 AS UINT128) % CAST(0 AS UINT128);
SELECT CAST('100000000000000000000000000000000000000' AS UINT128) % CAST('6587689457689375689735' AS UINT128), CAST('100000000000000000000000000000000000000' AS UINT128) % CAST('3' AS UINT128);
SELECT ABS(CAST('100' AS UINT128));
SELECT CAST('340282366920938463463374607431768211454' AS UINT128) + 1;
SELECT CAST('340282366920938463463374607431768211455' AS UINT128) - 1;
SELECT 1 + CAST('340282366920938463463374607431768211454' AS UINT128);
SELECT CAST(1 AS UINT128) + CAST('340282366920938463463374607431768211455' AS UINT128);
SELECT 1 - CAST(1 AS UINT128);
SELECT CAST(0 AS UINT128) - CAST(1 AS UINT128);
SELECT CAST('340282366920938463463374607431768211455' AS UINT128) - 1;
SELECT CAST('340282366920938463463374607431768211455' AS UINT128) // 1;
SELECT CAST('340282366920938463463374607431768211455' AS UINT128) // CAST('340282366920938463463374607431768211455' AS UINT128);
SELECT CAST('5' AS UINT128) <> CAST('5' AS UINT128), CAST('5' AS UINT128) <> CAST('18446744073709551621' AS UINT128);
PRAGMA x;
SELECT CAST(10000000000000000000 AS UINT128) + CAST(100 AS TINYINT), CAST(10000000000000000000 AS UINT128) + CAST(100 AS SMALLINT), CAST(10000000000000000000 AS UINT128) + CAST(100 AS INT), CAST(10000000000000000000 AS UINT128) + CAST(100 AS BIGINT);
SELECT CAST(100 AS UINT128) + 0.5;
SELECT COS(CAST(100 AS UINT128));
SELECT CONCAT('hello number ', CAST(100 AS UINT128));
SELECT CAST('7' AS UINT128), CAST('130' AS UINT128), CAST('924829852' AS UINT128);
SELECT CAST('0' AS UINT128), CAST('-0' AS UINT128);
SELECT CAST('10000000000000000000000000000' AS UINT128);
SELECT CAST('1267650600228229401496703205376' AS UINT128), CAST('340282366920938463463374607431768211455' AS UINT128);
SELECT CAST('-1267650600228229401496703205376' AS UINT128), CAST('-17014118346046923173168730371588410572' AS UINT128);
SELECT CAST('340282366920938463463374607431768211456' AS UINT128);
SELECT CAST('-1' AS UINT128);
SELECT CAST('340282366920938463463374607431768211455' AS UINT128), CAST('0' AS UINT128);
SELECT CAST('340282366920938463463374607431768211456' AS UINT128);
SELECT CAST('-1' AS UINT128);
SELECT CAST(CAST(42 AS TINYINT) AS UINT128), CAST(CAST(42 AS SMALLINT) AS UINT128), CAST(CAST(42 AS INT) AS UINT128), CAST(CAST(42 AS BIGINT) AS UINT128), CAST(CAST(42 AS REAL) AS UINT128), CAST(CAST(42 AS DOUBLE) AS UINT128);
SELECT CAST(CAST((-42) AS TINYINT) AS UINT128), CAST(CAST((-42) AS SMALLINT) AS UINT128), CAST(CAST((-42) AS INT) AS UINT128), CAST(CAST((-42) AS BIGINT) AS UINT128), CAST(CAST((-42) AS REAL) AS UINT128), CAST(CAST((-42) AS DOUBLE) AS UINT128);
SELECT CAST(CAST(42 AS UINT128) AS TINYINT), CAST(CAST(42 AS UINT128) AS SMALLINT), CAST(CAST(42 AS UINT128) AS INT), CAST(CAST(42 AS UINT128) AS BIGINT), CAST(CAST(42 AS UINT128) AS REAL), CAST(CAST(42 AS UINT128) AS DOUBLE);
SELECT CAST(CAST(1000 AS UINT128) AS TINYINT);
SELECT CAST(CAST(128 AS UINT128) AS TINYINT);
SELECT CAST(CAST(127 AS UINT128) AS TINYINT);
SELECT CAST(CAST(100000 AS UINT128) AS SMALLINT);
SELECT CAST(CAST(32768 AS UINT128) AS SMALLINT);
SELECT CAST(CAST(32767 AS UINT128) AS SMALLINT);
SELECT CAST(CAST(100000000000 AS UINT128) AS INT);
SELECT CAST(CAST(2147483648 AS UINT128) AS INT);
SELECT CAST(CAST(2147483647 AS UINT128) AS INT);
SELECT CAST(CAST(10000000000000000000 AS UINT128) AS BIGINT);
SELECT CAST(CAST('9223372036854775808' AS UINT128) AS BIGINT);
SELECT CAST(CAST(9223372036854775807 AS UINT128) AS BIGINT);
SELECT CAST(CAST(1e100 AS REAL) AS UINT128);
SELECT CAST(CAST(1e100 AS DOUBLE) AS UINT128);
SELECT TYPEOF(10), TYPEOF(10000000000), TYPEOF(170141183460469231731687303715884105727), TYPEOF(170141183460469231731687303715884105728), TYPEOF(170141183460469231731687303715884105728000);
SELECT 1e30, 1e100, 1e-1;
SELECT TYPEOF(1e30), TYPEOF(1e100), TYPEOF(1e-1);
PRAGMA x;
SELECT CAST('170141183460469231731687303715884105700e0' AS UINT128);
SELECT CAST('340282366920938463463374607431768211455e0' AS UINT128);
SELECT CAST(5.4321e4 AS UINT128);
SELECT CAST((0.00000000000000000000002e+44) AS UINT128);
SELECT CAST('340282366920938463463374607431768211456e0' AS UINT128);
SELECT CAST('3.4e39' AS UINT128);
SELECT CAST('3.4e38' AS UINT128);
SELECT CAST('3.5e38' AS UINT128);
PRAGMA x;
SELECT ABS(CAST(1 AS UINT128)), ABS(CAST('1329227995784915872903807060280344576' AS UINT128)), ABS(CAST(0 AS UINT128));
SELECT SIGN(CAST(1 AS UINT128)), SIGN(CAST(0 AS UINT128));
SELECT ROUND(CAST(1 AS UINT128), 0), ROUND(CAST('1329227995784915872903807060280344576' AS UINT128), 0), ROUND(CAST(0 AS UINT128), 0);
SELECT FLOOR(CAST(1 AS UINT128)), FLOOR(CAST('1329227995784915872903807060280344576' AS UINT128)), FLOOR(CAST(0 AS UINT128));
SELECT CEIL(CAST(1 AS UINT128)), CEIL(CAST('1329227995784915872903807060280344576' AS UINT128)), CEIL(CAST(0 AS UINT128));
SELECT LEAST(CAST(1 AS UINT128), CAST('1329227995784915872903807060280344576' AS UINT128), CAST(0 AS UINT128));
SELECT GREATEST(CAST(1 AS UINT128), CAST('1329227995784915872903807060280344576' AS UINT128), CAST(0 AS UINT128));
SET x = 'nulls_first';
PRAGMA x;
SELECT CAST(NULL AS UINT128);
CREATE TABLE x (x INT, x UINT128);
INSERT INTO x VALUES (1, NULL), (1, 1), (1, 2);
SELECT x, FIRST(x), LAST(x) FROM x WHERE x IS NULL GROUP BY x;
SELECT x, SUM(x) FROM x GROUP BY x ORDER BY 1;
SELECT x, x.x, x.x FROM x AS x JOIN x AS x USING (x) WHERE x.x IS NULL AND x.x IS NULL;
SELECT (SELECT x.x) FROM x AS x ORDER BY 1;
SELECT NOT x.x IN (SELECT x.x + x.x FROM x AS x) FROM x AS x ORDER BY 1;
PRAGMA x;
CREATE TABLE x (x UINT128);
INSERT INTO x VALUES (CAST(42 AS UINT128)), (CAST('1267650600228229401496703205376' AS UINT128));
SELECT CAST(x AS UINTEGER) FROM x WHERE x < CAST(100 AS UINTEGER);
SELECT COUNT(*) FROM x WHERE x = CAST(42 AS UINT128);
SELECT COUNT(*) FROM x WHERE x <> CAST('1267650600228229401496703205376' AS UINT128);
SELECT COUNT(*) FROM x WHERE x < CAST('1267650600228229401496703205376' AS UINT128);
SELECT COUNT(*) FROM x WHERE x <= CAST('1267650600228229401496703205376' AS UINT128);
SELECT COUNT(*) FROM x WHERE x > CAST('1267650600228229401496703205375' AS UINT128);
SELECT COUNT(*) FROM x WHERE x >= CAST(42 AS UINT128);
CREATE TABLE x (x UINT128);
SELECT * FROM x JOIN x USING (x);
SELECT * FROM x AS x JOIN x AS x ON x.x <> x.x;
SELECT * FROM x AS x JOIN x AS x ON x.x >= x.x ORDER BY 1 LIMIT 2;
SELECT 340282366920938463463374607431768211455;
SELECT TYPEOF(340282366920938463463374607431768211455);
SELECT 340282366920938463463374607431768211456;
SELECT TYPEOF(340282366920938463463374607431768211456);
SELECT CAST(251658240 AS UINT128) * CAST(251658240 AS UINT128);
SELECT CAST(251658240 AS UINT128) * CAST(1080863910568919040 AS UINT128);
SELECT CAST(251658240 AS UINT128) * CAST(4642275147320176030871715840 AS UINT128);
SELECT CAST(251658240 AS UINT128) * CAST(19938419936773738093557105904205168640 AS UINT128);
SELECT CAST(1080863910568919040 AS UINT128) * CAST(251658240 AS UINT128);
SELECT CAST(1080863910568919040 AS UINT128) * CAST(1080863910568919040 AS UINT128);
SELECT CAST(1080863910568919040 AS UINT128) * CAST(4642275147320176030871715840 AS UINT128);
SELECT CAST(1080863910568919040 AS UINT128) * CAST(19938419936773738093557105904205168640 AS UINT128);
SELECT CAST(4642275147320176030871715840 AS UINT128) * CAST(251658240 AS UINT128);
SELECT CAST(4642275147320176030871715840 AS UINT128) * CAST(1080863910568919040 AS UINT128);
SELECT CAST(4642275147320176030871715840 AS UINT128) * CAST(4642275147320176030871715840 AS UINT128);
SELECT CAST(4642275147320176030871715840 AS UINT128) * CAST(19938419936773738093557105904205168640 AS UINT128);
SELECT CAST(19938419936773738093557105904205168640 AS UINT128) * CAST(251658240 AS UINT128);
SELECT CAST(19938419936773738093557105904205168640 AS UINT128) * CAST(1080863910568919040 AS UINT128);
SELECT CAST(19938419936773738093557105904205168640 AS UINT128) * CAST(4642275147320176030871715840 AS UINT128);
SELECT CAST(19938419936773738093557105904205168640 AS UINT128) * CAST(19938419936773738093557105904205168640 AS UINT128);
SELECT CAST(170141183460469231731687303715884105727 AS UINT128) * CAST(2 AS UINT128);
SELECT CAST(170141183460469231731687303715884105728 AS UINT128) * CAST(2 AS UINT128);
SELECT CAST(19807040628566084398385987583 AS UINT128) * CAST(8589934592 AS UINT128);
SELECT CAST(19807040628566084398385987584 AS UINT128) * CAST(85899345928 AS UINT128);
SELECT CAST(36893488147419103231 AS UINT128) * CAST(4611686018427387904 AS UINT128);
SELECT CAST(368934881474191032324 AS UINT128) * CAST(4611686018427387904 AS UINT128);
SELECT CAST(2 AS UINT128) * CAST(170141183460469231731687303715884105727 AS UINT128);
SELECT CAST(2 AS UINT128) * CAST(170141183460469231731687303715884105728 AS UINT128);
SELECT CAST(8589934592 AS UINT128) * CAST(19807040628566084398385987583 AS UINT128);
SELECT CAST(85899345923 AS UINT128) * CAST(19807040628566084398385987584 AS UINT128);
SELECT CAST(4611686018427387904 AS UINT128) * CAST(36893488147419103231 AS UINT128);
SELECT CAST(4611686018427387904 AS UINT128) * CAST(368934881474191032323 AS UINT128);
SELECT CAST(10376293541461622783 AS UINT128) * CAST(10376293541461622783 AS UINT128);
SELECT CAST(10376293541461622783 AS UINT128) * CAST(10376293541461622783 AS UINT128);
SELECT CAST(172938225691027046399 AS UINT128) * CAST(10376293541461622783 AS UINT128);
PRAGMA x;
SELECT CAST('340282366920938463463374607431768211456' AS UINT128);
SELECT CAST(CAST('340282366920938463463374607431768211456' AS DOUBLE) AS UINT128);
SELECT CAST('-1' AS UINT128);
SELECT TRY_CAST('340282366920938463463374607431768211456' AS UINT128);
SELECT TRY_CAST(CAST('340282366920938463463374607431768211456' AS DOUBLE) AS UINT128);
SELECT TRY_CAST('-1' AS UINT128);
BEGIN;
CREATE TABLE x (x UNION(x JSON, x INT, x TINYINT));
INSERT INTO x VALUES ({'x': CAST(0 AS UINT8), 'x': '{"a": "hello", "b": true}', 'x': CAST(NULL AS INT), 'x': CAST(NULL AS TINYINT)});
INSERT INTO x VALUES ({'x': CAST(0 AS UINT8), 'x': CAST('{"c": "world"}' AS JSON), 'x': CAST(NULL AS INT), 'x': CAST(NULL AS TINYINT)});
SELECT * FROM x;
SELECT * FROM x;
ROLLBACK;
ROLLBACK;
SELECT * FROM x;
CREATE TABLE x (x UNION(x BOOLEAN, x INT, x TINYINT));
INSERT INTO x VALUES ({'x': '0', 'x': TRUE, 'x': NULL, 'x': NULL});
INSERT INTO x VALUES ({'x': CAST(0 AS UINT8), 'x': TRUE, 'x': CAST(NULL AS INT), 'x': CAST(NULL AS TINYINT)});
INSERT INTO x VALUES ({'x': CAST(0 AS UINT8), 'x': 1, 'x': CAST(NULL AS INT), 'x': CAST(NULL AS TINYINT)});
INSERT INTO x VALUES ({'x': CAST(4 AS UINT8), 'x': TRUE, 'x': CAST(NULL AS INT), 'x': CAST(NULL AS TINYINT)});
CREATE TABLE x (x STRUCT(x UINT8, x BOOLEAN, x INT, x TINYINT));
INSERT INTO x VALUES (ROW(0, TRUE, NULL, NULL)), (ROW(1, NULL, 23423, NULL)), (ROW(0, TRUE, NULL, NULL));
INSERT INTO x SELECT * FROM x;
DELETE FROM x;
INSERT INTO x VALUES (ROW(0, TRUE, NULL, NULL)), (ROW(1, NULL, 23423, NULL)), (ROW(2, TRUE, NULL, NULL));
INSERT INTO x SELECT * FROM x;
INSERT INTO x VALUES ({'x': CAST(0 AS UINT8), 'x': FALSE, 'x': CAST(NULL AS INT), 'x': CAST(NULL AS TINYINT)});
INSERT INTO x VALUES ({'x': CAST(1 AS UINT8), 'x': CAST(NULL AS BOOLEAN), 'x': 32412, 'x': CAST(123 AS TINYINT)});
DELETE FROM x;
INSERT INTO x VALUES (ROW(CAST(1 AS UINT8), NULL, 1, NULL)), (ROW(CAST(1 AS UINT8), NULL, 2, NULL)), (ROW(CAST(1 AS UINT8), NULL, 3, 0));
INSERT INTO x SELECT * FROM x;
CREATE TABLE x (x UNION(x INT, x TEXT));
INSERT INTO x VALUES (1), ('bar'), (3), ('foo'), (2), ('baz');
SELECT FIRST(x), LAST(x) FROM x;
SELECT UNION_TAG(x), MAX(x) FROM x GROUP BY UNION_TAG(x);
SELECT UNION_TAG(x), MIN(x) FROM x GROUP BY UNION_TAG(x);
SELECT SUM(x.x) FROM x;
SELECT LAST(x) FROM x GROUP BY UNION_TAG(x) HAVING UNION_TAG(x) = 'num';
SELECT MAX(x), MIN(x) FROM x;
CREATE TABLE x (x UNION(x INT, x INT));
CREATE TABLE x (x UNION(x INT, x INT));
CREATE TABLE x (x UNION(x INT, x INT));
INSERT INTO x VALUES (1), (2), (3);
INSERT INTO x VALUES (UNION_VALUE(x := 1)), (UNION_VALUE(x := 2)), (UNION_VALUE(x := 3));
INSERT INTO x VALUES (UNION_VALUE(x := 3)), (UNION_VALUE(x := 4)), (UNION_VALUE(x := 5));
SELECT x.x FROM x;
SELECT x.x FROM x;
SELECT x FROM x;
CREATE TABLE x (x UNION(x STRUCT(x TEXT), x STRUCT(x TEXT)));
INSERT INTO x VALUES ({'x': 'bar'}), ({'x': 'baz'});
INSERT INTO x VALUES (UNION_VALUE(x := {'x': 'bar'})), (UNION_VALUE(x := {'x': 'baz'})), (UNION_VALUE(x := {'x': 'qux'}));
INSERT INTO x VALUES (UNION_VALUE(x := {'x': 'bar'})), (UNION_VALUE(x := {'x': 'baz'}));
SELECT x.x.x FROM x;
SELECT x.x.x FROM x;
SELECT x FROM x;
CREATE TABLE x (x UNION(x INT, x STRUCT(x INT)));
INSERT INTO x VALUES (1), (UNION_VALUE(x := 2)), (UNION_VALUE(x := {'x': 3}));
SELECT x FROM x;
SELECT UNION_EXTRACT(1, 'b');
SELECT UNION_EXTRACT(CAST(1 AS UNION(x INT, x REAL)), 'a');
CREATE TABLE x (x UNION(x INT, x REAL, x TEXT));
INSERT INTO x VALUES (1), ('text'), (2.0);
SELECT x.x FROM x WHERE NOT x.x IS NULL;
SELECT x.x FROM x;
SELECT x.x FROM x WHERE NOT x.x IS NULL;
SELECT x.x FROM x;
SELECT x.x FROM x WHERE NOT x.x IS NULL;
SELECT x.x FROM x;
SELECT x.x, x.x, x.x FROM x;
SELECT UNION_EXTRACT(x, 'a') FROM x WHERE NOT UNION_EXTRACT(x, 'a') IS NULL;
SELECT UNION_EXTRACT(x, 'a') FROM x;
SELECT UNION_EXTRACT(x, 'b') FROM x WHERE NOT UNION_EXTRACT(x, 'b') IS NULL;
SELECT UNION_EXTRACT(x, 'b') FROM x;
SELECT UNION_EXTRACT(x, 'c') FROM x WHERE NOT UNION_EXTRACT(x, 'c') IS NULL;
SELECT UNION_EXTRACT(x, 'c') FROM x;
SELECT UNION_EXTRACT(x, 'a'), UNION_EXTRACT(x, 'c'), UNION_EXTRACT(x, 'b') FROM x;
PRAGMA x;
SET x = 'nulls_first';
CREATE TABLE x (x INT, x UNION(x INT, x TEXT));
CREATE TABLE x (x INT, x UNION(x INT, x TEXT));
INSERT INTO x VALUES (1, 1), (3, 'foo'), (2, 2), (4, 'bar');
INSERT INTO x VALUES (1, 'foo'), (2, 'bar'), (3, 1), (4, 2);
SELECT x, UNION_TAG(x), x.x, x.x FROM x UNION SELECT x, UNION_TAG(x), x.x, x.x FROM x ORDER BY ALL;
SELECT x, UNION_TAG(x) AS x, x.x AS x, x.x AS x FROM x UNION SELECT x, UNION_TAG(x) AS x, x.x AS x, x.x AS x FROM x ORDER BY ALL;
SELECT x.x.x, x.x, x.x FROM x JOIN x ON x.x.x = x.x.x ORDER BY ALL;
SELECT x.x FROM x AS x JOIN x AS x ON x.x = x.x ORDER BY ALL;
DROP TABLE x;
SELECT x.x, x.x, x.x FROM x INNER JOIN x ON x.x = x.x ORDER BY ALL;
SELECT x.x, x.x, x.x FROM x FULL OUTER JOIN x ON x.x = x.x ORDER BY ALL;
SELECT x.x, x.x, x.x FROM x LEFT OUTER JOIN x ON x.x = x.x ORDER BY ALL;
SELECT x.x, x.x, x.x FROM x RIGHT OUTER JOIN x ON x.x = x.x ORDER BY ALL;
SELECT x FROM x WHERE x = UNION_VALUE(x := 'foo');
SELECT x FROM x WHERE x = CAST('foo' AS UNION(x INT, x TEXT));
SELECT UNION_TAG(CAST('foo' AS UNION(x INT, x TEXT)));
CREATE TABLE x (x UNION(x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT));
INSERT INTO x VALUES (UNION_VALUE(x := 1337)), (UNION_VALUE(x := 42));
SELECT x.x FROM x;
SELECT x.x FROM x;
CREATE TABLE x (x UNION(x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x));
CREATE TABLE x (x UNION(x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x));
PRAGMA x;
CREATE TABLE x (x UNION(x INT, x TEXT));
INSERT INTO x VALUES (1), ('bar'), (2), ('foo'), (3), ('baz');
SELECT * FROM x LIMIT 1;
SELECT * FROM x OFFSET 1;
SELECT * FROM x LIMIT 1 OFFSET 1;
SELECT * FROM x WHERE NOT x.x IS NULL OFFSET 1;
SELECT * FROM x WHERE NOT x.x IS NULL LIMIT 1 OFFSET 1;
CREATE TABLE x (x UNION(x TEXT, x INT)[]);
INSERT INTO x VALUES ([CAST(1 AS UNION(x TEXT, x INT)), 'one']), ([CAST('two' AS UNION(x TEXT, x INT)), 2]), ([CAST(3 AS UNION(x TEXT, x INT)), 'three', '3']), ([4]), (['five']), ([6]);
SELECT * FROM x;
CREATE TABLE x (x UNION(x INT[], x INT));
INSERT INTO x VALUES ([1, 2, 3]), (4), ([5]), (6), (NULL), (7), ([8, 9, 10]);
SELECT * FROM x;
SELECT * FROM x WHERE x = [5];
SELECT x.x FROM x;
SELECT x[1] FROM x JOIN x ON x.x = x[1].x;
SELECT x[1] FROM x JOIN x ON x.x = x[1];
CREATE TABLE x (x UNION(x TEXT[], x INT[]));
INSERT INTO x VALUES (UNION_VALUE(x := ['one', 'two'])), (UNION_VALUE(x := [1, 2])), (UNION_VALUE(x := ['three', NULL])), (UNION_VALUE(x := [3, 4])), (UNION_VALUE(x := ['five'])), (UNION_VALUE(x := [5])), (UNION_VALUE(x := ['six'])), (UNION_VALUE(x := [NULL, 6])), (UNION_VALUE(x := NULL)), (UNION_VALUE(x := [1]));
SELECT UNION_TAG(x), x FROM x;
SET x = 'nulls_first';
CREATE TABLE x (x UNION(x INT, x INT));
INSERT INTO x VALUES (UNION_VALUE(x := 1)), (UNION_VALUE(x := 4)), (UNION_VALUE(x := 1)), (UNION_VALUE(x := 2)), (UNION_VALUE(x := 3)), (NULL);
SELECT UNION_TAG(x), x FROM x ORDER BY x ASC;
SELECT UNION_TAG(x), x FROM x ORDER BY x DESC;
CREATE TABLE x (x UNION(x INT, x UNION(x TEXT, x INT)));
INSERT INTO x VALUES (UNION_VALUE(x := 1));
CREATE TABLE x (x UNION(x INT, x UNION(x TEXT, x INT)));
INSERT INTO x VALUES (UNION_VALUE(x := 1));
INSERT INTO x VALUES (NULL);
INSERT INTO x VALUES (UNION_VALUE(x := UNION_VALUE(x := 2)));
INSERT INTO x VALUES (UNION_VALUE(x := UNION_VALUE(x := '3')));
INSERT INTO x VALUES (UNION_VALUE(x := '4'));
SELECT x, UNION_TAG(x), UNION_TAG(x.x) FROM x ORDER BY x;
CREATE TABLE x (x UNION(x TEXT, x STRUCT(x TEXT, x INT)));
INSERT INTO x VALUES ({'x': 'key1', 'x': 1}), ('not a struct'), (NULL), ({'x': NULL, 'x': 1}), ({'x': 'key2', 'x': NULL}), ('key2');
SELECT * FROM x;
SELECT x.x.x FROM x;
SELECT x.x.x FROM x;
SELECT x.x FROM x;
SELECT * FROM x AS x JOIN x AS x ON x.x.x = x.x.x.x;
CREATE TABLE x (x STRUCT(x TEXT, x UNION(x TEXT, x INT)));
INSERT INTO x VALUES ({'x': 'key1', 'x': 1}), ({'x': 'key2', 'x': 'key2'}), ({'x': NULL, 'x': NULL}), ({'x': NULL, 'x': UNION_VALUE(x := NULL)}), ({'x': 'key3', 'x': UNION_VALUE(x := NULL)}), ({'x': 'key4', 'x': 'key2'});
SELECT * FROM x;
SELECT * FROM x JOIN x ON x.x.x = x.x.x.x ORDER BY ALL;
SELECT UNION_TAG(1);
SELECT UNION_TAG(CAST(1 AS UNION(x INT, x TEXT)));
CREATE TABLE x (x UNION(x INT, x REAL, x TEXT));
INSERT INTO x VALUES (1), ('text'), (2.0);
SELECT UNION_TAG(x) FROM x;
SELECT x FROM x;
SELECT UNION_TAG(x) FROM x WHERE x = (CAST(1 AS UNION(x INT, x REAL, x TEXT)));
SELECT ENUM_FIRST(UNION_TAG(x)) FROM x LIMIT 1;
SELECT ENUM_LAST(UNION_TAG(x)) FROM x LIMIT 1;
SELECT ENUM_RANGE(UNION_TAG(x)) FROM x LIMIT 1;
SELECT UNION_TAG(CAST('foo' AS UNION(x INT, x TEXT)));
CREATE TABLE x (x UNION(x INT, x REAL));
INSERT INTO x VALUES (CAST(1 AS INT));
SELECT * FROM x;
INSERT INTO x VALUES (CAST(2.0 AS REAL));
SELECT * FROM x;
SELECT x.x FROM x;
SELECT UNION_TAG(x) FROM x;
INSERT INTO x SELECT x FROM x AS x;
CREATE TABLE x (x TEXT, x UNION(x INT, x TEXT) DEFAULT 'not set');
INSERT INTO x (x) VALUES ('a'), ('b'), ('c');
SELECT x FROM x;
CREATE TABLE x (x TEXT, x UNION(x UNION(x INT, x REAL), x TEXT) DEFAULT CAST(13.37 AS REAL));
INSERT INTO x (x) VALUES ('a'), ('b'), ('c');
SELECT x.x.x FROM x;
PRAGMA x;
CREATE TABLE x (x UNION(x INT, x TEXT));
INSERT INTO x VALUES (1), (NULL), (CAST(NULL AS TEXT)), (CAST(NULL AS INT));
DELETE FROM x;
INSERT INTO x VALUES (1), (NULL), (CAST(NULL AS TEXT)), (CAST(NULL AS INT));
SELECT UNION_TAG(x) AS x, x AS x FROM x;
CREATE TABLE x (x UNION(x INT, x TEXT));
INSERT INTO x VALUES (UNION_VALUE(x := 1));
INSERT INTO x VALUES (UNION_VALUE());
INSERT INTO x VALUES (UNION_VALUE(x := 1, x := 2));
INSERT INTO x VALUES (UNION_VALUE(x := 1));
INSERT INTO x VALUES (UNION_VALUE(x := 1)), (1), (UNION_VALUE(x := 'hello')), (2), ('world');
INSERT INTO x SELECT CAST(UNION_VALUE(x := 1) AS UNION(x INT, x TEXT)) UNION ALL SELECT CAST(UNION_VALUE(x := 'hello') AS UNION(x INT, x TEXT));
SELECT CASE WHEN UNION_TAG(x) = 'num' THEN x ELSE NULL END AS x FROM x;
CREATE TABLE x (x UNION(x INT, x TEXT));
INSERT INTO x VALUES (UNION_VALUE(x := 1)), (UNION_VALUE(x := NULL)), (UNION_VALUE(x := '3')), (UNION_VALUE(x := NULL));
SELECT x FROM x WHERE x = NULL;
SELECT UNION_VALUE(x := NULL) IS NULL;
SELECT UNION_TAG(UNION_VALUE(x := NULL));
SELECT UNION_TAG(x), x FROM x;
PRAGMA x;
CREATE TABLE x (x UTINYINT, x USMALLINT, x UINTEGER, x UBIGINT);
INSERT INTO x VALUES (1, 1, 1, 1), (2, 2, 2, 2);
SELECT * FROM x;
SELECT CAST((200) AS UTINYINT) + CAST((200) AS UTINYINT);
SELECT CAST((20) AS UTINYINT) + CAST((200) AS USMALLINT);
SELECT CAST((20) AS UBIGINT) + CAST((200) AS UBIGINT);
SELECT CAST((18446744073709551615) AS UBIGINT) + CAST((18446744073709551615) AS UBIGINT);
SELECT CAST((200) AS UTINYINT) * CAST((200) AS UTINYINT);
SELECT CAST((200) AS UTINYINT) * CAST((200) AS USMALLINT);
SELECT CAST((200) AS UBIGINT) * CAST((200) AS UBIGINT);
SELECT CAST((18446744073709551615) AS UBIGINT) * CAST((3) AS UBIGINT);
SELECT CAST((200) AS UTINYINT) - CAST((201) AS UTINYINT);
SELECT CAST((200) AS UTINYINT) - CAST((201) AS USMALLINT);
SELECT CAST((200) AS UTINYINT) - CAST((20) AS USMALLINT);
SELECT CAST(100 AS UTINYINT) // CAST(20 AS UTINYINT), CAST(90 AS UTINYINT) // CAST(20 AS UTINYINT);
SELECT CAST(100 AS UTINYINT) // CAST(20 AS UBIGINT), CAST(90 AS UTINYINT) // CAST(20 AS UBIGINT);
SELECT CAST(100 AS UTINYINT) // CAST(0 AS UTINYINT);
SELECT CAST(100 AS UTINYINT) % CAST(20 AS UTINYINT), CAST(90 AS UTINYINT) % CAST(20 AS UTINYINT);
SELECT CAST(100 AS UTINYINT) % CAST(0 AS UTINYINT);
PRAGMA x;
SELECT CAST(200 AS UTINYINT) + 0.5;
SELECT COS(CAST(100 AS UTINYINT));
SELECT CONCAT('hello number ', CAST(100 AS UTINYINT));
SELECT CAST(100000000 AS INT) + CAST(100 AS USMALLINT);
SELECT CAST(100 AS USMALLINT) + 0.5;
SELECT COS(CAST(100 AS USMALLINT));
SELECT CONCAT('hello number ', CAST(100 AS USMALLINT));
SELECT CAST(100000000 AS INT) + CAST(100 AS UINTEGER);
SELECT CAST(100 AS UINTEGER) + 0.5;
SELECT COS(CAST(100 AS UINTEGER));
SELECT CONCAT('hello number ', CAST(100 AS UINTEGER));
SELECT CAST(100000000 AS INT) + CAST(100 AS UBIGINT);
SELECT CAST(100 AS UBIGINT) + 0.5;
SELECT COS(CAST(100 AS UBIGINT));
SELECT CONCAT('hello number ', CAST(100 AS UBIGINT));
SELECT CAST('255' AS UTINYINT);
SELECT CAST('256' AS UTINYINT);
SELECT CAST('255' AS USMALLINT);
SELECT CAST('65536' AS USMALLINT);
SELECT CAST('65535' AS UINTEGER);
SELECT CAST('4294967296' AS UINTEGER);
SELECT CAST('4294967295' AS UBIGINT);
SELECT CAST('18446744073709551616' AS UBIGINT);
SELECT CAST('18446744073709551615' AS UBIGINT);
SELECT CAST((CAST(100 AS UTINYINT)) AS DECIMAL(3, 0));
SELECT CAST((CAST(100 AS UTINYINT)) AS DECIMAL(2, 0));
SELECT CAST(100 AS UTINYINT) * CAST(100 AS DECIMAL(3, 0));
SELECT CAST((CAST(100 AS USMALLINT)) AS DECIMAL(3, 0));
SELECT CAST((CAST(100 AS USMALLINT)) AS DECIMAL(2, 0));
SELECT CAST(100 AS USMALLINT) * CAST(100 AS DECIMAL(3, 0));
SELECT CAST((CAST(100 AS UINTEGER)) AS DECIMAL(3, 0));
SELECT CAST((CAST(100 AS UINTEGER)) AS DECIMAL(2, 0));
SELECT CAST(100 AS UINTEGER) * CAST(100 AS DECIMAL(3, 0));
SELECT CAST((CAST(100 AS UBIGINT)) AS DECIMAL(3, 0));
SELECT CAST((CAST(100 AS UBIGINT)) AS DECIMAL(2, 0));
SELECT CAST(100 AS UBIGINT) * CAST(100 AS DECIMAL(3, 0));
PRAGMA x;
SELECT CAST('7' AS UTINYINT), CAST('130' AS UTINYINT), CAST('255' AS UTINYINT);
SELECT CAST('7' AS USMALLINT), CAST('130' AS USMALLINT), CAST('65535' AS USMALLINT);
SELECT CAST('7' AS UINTEGER), CAST('130' AS UINTEGER), CAST('4294967295' AS UINTEGER);
SELECT CAST('7' AS UBIGINT), CAST('130' AS UBIGINT), CAST('18446744073709551615' AS UBIGINT);
SELECT CAST('265' AS UTINYINT);
SELECT CAST('65536' AS USMALLINT);
SELECT CAST('4294967296' AS UINTEGER);
SELECT CAST('18446744073709551616' AS UBIGINT);
SELECT CAST('-1' AS UTINYINT);
SELECT CAST('-1' AS USMALLINT);
SELECT CAST('-1' AS UINTEGER);
SELECT CAST('-1' AS UBIGINT);
SELECT CAST('0' AS UTINYINT), CAST('-0' AS UTINYINT);
SELECT CAST(CAST(42 AS TINYINT) AS UTINYINT), CAST(CAST(42 AS SMALLINT) AS UTINYINT), CAST(CAST(42 AS INT) AS UTINYINT), CAST(CAST(42 AS BIGINT) AS UTINYINT), CAST(CAST(42 AS REAL) AS UTINYINT), CAST(CAST(42 AS DOUBLE) AS UTINYINT);
SELECT CAST(CAST(42 AS TINYINT) AS USMALLINT), CAST(CAST(42 AS SMALLINT) AS USMALLINT), CAST(CAST(42 AS INT) AS USMALLINT), CAST(CAST(42 AS BIGINT) AS USMALLINT), CAST(CAST(42 AS REAL) AS USMALLINT), CAST(CAST(42 AS DOUBLE) AS USMALLINT);
SELECT CAST(CAST(42 AS TINYINT) AS UINTEGER), CAST(CAST(42 AS SMALLINT) AS UINTEGER), CAST(CAST(42 AS INT) AS UINTEGER), CAST(CAST(42 AS BIGINT) AS UINTEGER), CAST(CAST(42 AS REAL) AS UINTEGER), CAST(CAST(42 AS DOUBLE) AS UINTEGER);
SELECT CAST(CAST(42 AS TINYINT) AS UBIGINT), CAST(CAST(42 AS SMALLINT) AS UBIGINT), CAST(CAST(42 AS INT) AS UBIGINT), CAST(CAST(42 AS BIGINT) AS UBIGINT), CAST(CAST(42 AS REAL) AS UBIGINT), CAST(CAST(42 AS DOUBLE) AS UBIGINT);
SELECT CAST(CAST((9223372036854775807) AS BIGINT) AS UTINYINT);
SELECT CAST(CAST((9223372036854775807) AS BIGINT) AS USMALLINT);
SELECT CAST(CAST((9223372036854775807) AS BIGINT) AS UINTEGER);
SELECT CAST(CAST((9223372036854775807) AS BIGINT) AS UBIGINT);
SELECT CAST(CAST((9223372036854775808) AS INT128) AS UBIGINT);
SELECT CAST(CAST((9223372036854775808) AS UINT128) AS UBIGINT);
SELECT CAST(CAST((-42) AS TINYINT) AS UTINYINT);
SELECT CAST(CAST((-42) AS TINYINT) AS USMALLINT);
SELECT CAST(CAST((-42) AS TINYINT) AS UINTEGER);
SELECT CAST(CAST((-42) AS TINYINT) AS UBIGINT);
SELECT -CAST(CAST(42 AS TINYINT) AS UTINYINT);
SELECT -CAST(CAST(42 AS TINYINT) AS USMALLINT);
SELECT -CAST(CAST(42 AS TINYINT) AS UINTEGER);
SELECT -CAST(CAST(42 AS TINYINT) AS UBIGINT);
SELECT CAST(CAST((-42) AS SMALLINT) AS UTINYINT);
SELECT CAST(CAST((-42) AS SMALLINT) AS USMALLINT);
SELECT CAST(CAST((-42) AS SMALLINT) AS UINTEGER);
SELECT CAST(CAST((-42) AS SMALLINT) AS UBIGINT);
SELECT -CAST(CAST(42 AS SMALLINT) AS UTINYINT);
SELECT -CAST(CAST(42 AS SMALLINT) AS USMALLINT);
SELECT -CAST(CAST(42 AS SMALLINT) AS UINTEGER);
SELECT -CAST(CAST(42 AS SMALLINT) AS UBIGINT);
SELECT CAST(CAST((-42) AS INT) AS UTINYINT);
SELECT CAST(CAST((-42) AS INT) AS USMALLINT);
SELECT CAST(CAST((-42) AS INT) AS UINTEGER);
SELECT CAST(CAST((-42) AS INT) AS UBIGINT);
SELECT -CAST(CAST(42 AS INT) AS UTINYINT);
SELECT -CAST(CAST(42 AS INT) AS USMALLINT);
SELECT -CAST(CAST(42 AS INT) AS UINTEGER);
SELECT -CAST(CAST(42 AS INT) AS UBIGINT);
SELECT CAST(CAST((-42) AS BIGINT) AS UTINYINT);
SELECT CAST(CAST((-42) AS BIGINT) AS USMALLINT);
SELECT CAST(CAST((-42) AS BIGINT) AS UINTEGER);
SELECT CAST(CAST((-42) AS BIGINT) AS UBIGINT);
SELECT -CAST(CAST(42 AS BIGINT) AS UTINYINT);
SELECT -CAST(CAST(42 AS BIGINT) AS USMALLINT);
SELECT -CAST(CAST(42 AS BIGINT) AS UINTEGER);
SELECT -CAST(CAST(42 AS BIGINT) AS UBIGINT);
SELECT CAST(CAST((-42) AS REAL) AS UTINYINT);
SELECT CAST(CAST((-42) AS REAL) AS USMALLINT);
SELECT CAST(CAST((-42) AS REAL) AS UINTEGER);
SELECT CAST(CAST((-42) AS REAL) AS UBIGINT);
SELECT -CAST(CAST(42 AS REAL) AS UTINYINT);
SELECT -CAST(CAST(42 AS REAL) AS USMALLINT);
SELECT -CAST(CAST(42 AS REAL) AS UINTEGER);
SELECT -CAST(CAST(42 AS REAL) AS UBIGINT);
SELECT CAST(CAST((-42) AS DOUBLE) AS UTINYINT);
SELECT CAST(CAST((-42) AS DOUBLE) AS USMALLINT);
SELECT CAST(CAST((-42) AS DOUBLE) AS UINTEGER);
SELECT CAST(CAST((-42) AS DOUBLE) AS UBIGINT);
SELECT -CAST(CAST(42 AS DOUBLE) AS UTINYINT);
SELECT -CAST(CAST(42 AS DOUBLE) AS USMALLINT);
SELECT -CAST(CAST(42 AS DOUBLE) AS UINTEGER);
SELECT -CAST(CAST(42 AS DOUBLE) AS UBIGINT);
SELECT CAST(CAST((200) AS UTINYINT) AS TINYINT);
SELECT CAST(CAST((10) AS UTINYINT) AS TINYINT);
SELECT CAST(CAST((10) AS UTINYINT) AS SMALLINT);
SELECT CAST(CAST((10) AS UTINYINT) AS INT);
SELECT CAST(CAST((10) AS UTINYINT) AS BIGINT);
SELECT CAST(CAST((200) AS USMALLINT) AS TINYINT);
SELECT CAST(CAST((33000) AS USMALLINT) AS SMALLINT);
SELECT CAST(CAST((10) AS USMALLINT) AS TINYINT);
SELECT CAST(CAST((10) AS USMALLINT) AS SMALLINT);
SELECT CAST(CAST((10) AS USMALLINT) AS INT);
SELECT CAST(CAST((10) AS USMALLINT) AS BIGINT);
SELECT CAST(CAST((200) AS UINTEGER) AS TINYINT);
SELECT CAST(CAST((33000) AS UINTEGER) AS SMALLINT);
SELECT CAST(CAST((3147483647) AS UINTEGER) AS INT);
SELECT CAST(CAST((10) AS UINTEGER) AS TINYINT);
SELECT CAST(CAST((10) AS UINTEGER) AS SMALLINT);
SELECT CAST(CAST((10) AS UINTEGER) AS INT);
SELECT CAST(CAST((10) AS UINTEGER) AS BIGINT);
SELECT CAST(CAST((200) AS UBIGINT) AS TINYINT);
SELECT CAST(CAST((33000) AS UBIGINT) AS SMALLINT);
SELECT CAST(CAST((3147483647) AS UBIGINT) AS INT);
SELECT CAST(CAST((10223372036854775807) AS UBIGINT) AS INT);
SELECT CAST(CAST((10) AS UBIGINT) AS TINYINT);
SELECT CAST(CAST((10) AS UBIGINT) AS SMALLINT);
SELECT CAST(CAST((10) AS UBIGINT) AS INT);
SELECT CAST(CAST((10) AS UBIGINT) AS BIGINT);
SELECT CAST(CAST((9223372036854775807) AS BIGINT) AS USMALLINT);
SELECT CAST(CAST((9223372036854775807) AS BIGINT) AS UINTEGER);
SELECT CAST(CAST((9223372036854775807) AS BIGINT) AS UBIGINT);
SELECT CAST(CAST((9223372036854775808) AS INT128) AS UBIGINT);
SELECT CAST(CAST((9223372036854775808) AS UINT128) AS UBIGINT);
SELECT CAST(CAST((200.32) AS DECIMAL(18, 3)) AS UTINYINT);
SELECT CAST(CAST((260.32) AS DECIMAL(18, 3)) AS UTINYINT);
SELECT CAST(CAST((200.32) AS DECIMAL(18, 3)) AS USMALLINT);
SELECT CAST(CAST((65535.32) AS DECIMAL(18, 3)) AS USMALLINT);
SELECT CAST(CAST((65536.32) AS DECIMAL(18, 3)) AS USMALLINT);
SELECT CAST(CAST((200.32) AS DECIMAL(18, 3)) AS UINTEGER);
SELECT CAST(CAST((4294967295.32) AS DECIMAL(18, 3)) AS UINTEGER);
SELECT CAST(CAST((4294967296.32) AS DECIMAL(18, 3)) AS UINTEGER);
SELECT CAST(CAST((200.32) AS DECIMAL(18, 3)) AS UBIGINT);
SELECT CAST(CAST((200.32) AS REAL) AS UTINYINT);
SELECT CAST(CAST((260.32) AS REAL) AS UTINYINT);
SELECT CAST(CAST((200.32) AS REAL) AS USMALLINT);
SELECT CAST(CAST((65534.32) AS REAL) AS USMALLINT);
SELECT CAST(CAST((65536.32) AS REAL) AS USMALLINT);
SELECT CAST(CAST((200.32) AS REAL) AS UINTEGER);
SELECT CAST(CAST((200.32) AS REAL) AS UINTEGER);
SELECT CAST(CAST((4294967296.32) AS REAL) AS UBIGINT);
PRAGMA x;
SELECT CAST([] AS uint16[]);
SELECT CAST([] AS uint32[]);
SELECT CAST([] AS uint64[]);
SET x = 'nulls_first';
PRAGMA x;
CREATE TABLE IF NOT EXISTS x (x UUID);
INSERT INTO x VALUES ('A0EEBC99-9C0B-4EF8-BB6D-6BB9BD380A11'), (NULL), ('47183823-2574-4bfd-b411-99ed177d3e43'), ('{10203040506070800102030405060708}'), ('A0EEBC99-9C0B-4EF8-BB6D-6BB9BD380A11'), (NULL), ('47183823-2574-4bfd-b411-99ed177d3e43'), ('{10203040506070800102030405060708}'), ('00000000-0000-0000-0000-000000000000'), ('00000000-0000-0000-0000-000000000001'), ('00000000-0000-0000-8000-000000000001'), ('80000000-0000-0000-0000-000000000000'), ('80000000-0000-0000-8000-000000000000'), ('80000000-0000-0000-8fff-ffffffffffff'), ('80000000-0000-0000-ffff-ffffffffffff'), ('8fffffff-ffff-ffff-0000-000000000000'), ('8fffffff-ffff-ffff-8000-000000000000'), ('8fffffff-ffff-ffff-8fff-ffffffffffff'), ('8fffffff-ffff-ffff-ffff-ffffffffffff'), ('ffffffff-ffff-ffff-ffff-ffffffffffff');
SELECT CAST('A0EEBC99-9C0B-4EF8-BB6D-6BB9BD380A11' AS UUID);
SELECT 'a0ee-bc99-9c0b-4ef8-bb6d-6bb9-bd38-0a11';
SELECT CAST('a0ee-bc99-9c0b-4ef8-bb6d-6bb9-bd38-0a11' AS UUID);
SELECT CAST(CAST('a0ee-bc99-9c0b-4ef8-bb6d-6bb9-bd38-0a11' AS UUID) AS TEXT);
SELECT CAST(CAST(CAST('a0ee-bc99-9c0b-4ef8-bb6d-6bb9-bd38-0a11' AS UUID) AS TEXT) AS UUID);
SELECT CAST(CAST(CAST(CAST('a0ee-bc99-9c0b-4ef8-bb6d-6bb9-bd38-0a11' AS UUID) AS TEXT) AS UUID) AS TEXT);
SELECT CAST('{a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11' AS UUID);
SELECT CAST('47183823-2574-4bfd-b411-99ed177d3e4' AS UUID);
SELECT x FROM x ORDER BY x;
SELECT x FROM x ORDER BY CAST(x AS TEXT);
SELECT MIN(x) FROM x;
SELECT MAX(x) FROM x;
SELECT x FROM x WHERE x = '8fffffff-ffff-ffff-ffff-ffffffffffff';
SELECT x FROM x WHERE x <> 'a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11' ORDER BY x;
SELECT x FROM x WHERE x >= '80000000-0000-0000-0000-000000000000' ORDER BY x;
SELECT x FROM x WHERE x < '80000000-0000-0000-0000-000000000000' ORDER BY x;
SELECT x, COUNT(1) FROM x WHERE x < '80000000-0000-0000-0000-000000000000' GROUP BY x ORDER BY x;
CREATE FUNCTION x(x) AS SUBSTRING('0123456789abcdef', CAST((x % 16) AS INT) + 1, 1);
CREATE FUNCTION x(x, x, x) AS REPEAT(HEX_CHAR(x) || HEX_CHAR(x), x);
CREATE FUNCTION x(x, x) AS CONCAT(HEX_CHAR_REPEAT(x, x, 4), '-', HEX_CHAR_REPEAT(x, x, 2), '-', HEX_CHAR_REPEAT(x, x, 2), '-', HEX_CHAR_REPEAT(x, x, 2), '-', HEX_CHAR_REPEAT(x, x, 6));
CREATE VIEW x AS SELECT UUID_GENERATE(x, x) AS x FROM x AS x, x AS x;
SELECT CAST(x AS TEXT) FROM x ORDER BY 1;
SELECT CAST(x AS UUID) FROM x ORDER BY 1;
SELECT CAST(CAST(x AS UUID) AS TEXT) = x FROM x ORDER BY 1;
SELECT x = x FROM x ORDER BY 1;
SELECT COUNT(*) FROM x AS x, x AS x WHERE CAST(x.x AS TEXT) >= CAST(x.x AS TEXT);
SELECT COUNT(*) FROM x AS x, x AS x WHERE CAST(x.x AS UUID) >= CAST(x.x AS UUID);
SELECT COUNT(*) FROM x AS x, x AS x WHERE CAST(x.x AS TEXT) <= CAST(x.x AS TEXT);
SELECT COUNT(*) FROM x AS x, x AS x WHERE CAST(x.x AS UUID) <= CAST(x.x AS UUID);
SELECT COUNT(*) FROM x AS x, x AS x WHERE CAST(x.x AS TEXT) = CAST(x.x AS TEXT);
SELECT COUNT(*) FROM x AS x, x AS x WHERE CAST(x.x AS UUID) = CAST(x.x AS UUID);
SELECT SUM(x) FROM x;
SELECT AVG(x) FROM x;
SELECT x + x FROM x;
SELECT x * x FROM x;
SELECT x / x FROM x;
SELECT x % x FROM x;
SELECT x - x FROM x;
SELECT CAST(CAST('a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11' AS UUID) AS INT128);
SELECT CAST('' AS UUID);
SELECT CAST('aaaa' AS UUID);
SELECT CAST('a0eebc99-9c0b-4ef8-bb6d-6bb9bd380Z11' AS UUID);
PRAGMA x;
CREATE TABLE x AS SELECT CAST(CONCAT('1', REPEAT('0', x)) AS varint) AS x FROM x AS x;
SELECT SUM(x) FROM x;
SELECT SUM(x) FROM x WHERE x < CAST(10000000 AS DOUBLE);
PRAGMA x;
SELECT CAST(CAST(179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368 AS DOUBLE) AS varint);
SELECT CAST(CAST((-179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368) AS DOUBLE) AS varint);
SELECT CAST(CAST(33999999014383402399481480781255147520 AS REAL) AS varint);
SELECT CAST(CAST(33999999014383402399481480781255147520 AS DOUBLE) AS varint);
SELECT CAST(CAST(0 AS DOUBLE) AS varint);
SELECT CAST(CAST((-0) AS DOUBLE) AS varint);
SELECT CAST(CAST(1 AS DOUBLE) AS varint);
SELECT CAST(CAST(100000 AS DOUBLE) AS varint);
SELECT CAST(CAST(100000.595 AS DOUBLE) AS varint);
SELECT CAST(1797693134862315708145274237317043567980705675258449965989174768031572607800285387605895586327668781715404589535143824642343213268894641827684675467035375169860499105765512820762454900903893289440758685084551339423045832369032229481658085593321233482747978262041447231687381771809192998812504040261841248583700 AS varint);
SELECT CAST(CAST('-1e310' AS DOUBLE) AS varint);
PRAGMA x;
SELECT DISTINCT CAST(CAST(x AS TEXT) AS varint) = CAST(x AS varint) FROM x AS x;
PRAGMA x;
SELECT CAST(CAST('340282366920938463463374607431768211455' AS UINT128) AS varint);
SELECT DISTINCT CAST(CAST(x AS TEXT) AS varint) = CAST(x AS varint) FROM x AS x;
SELECT CAST('2147483646' AS varint) = CAST(2147483646 AS varint);
SELECT CAST(CAST('340282366920938463463374607431768211455' AS UINT128) AS varint) = CAST('340282366920938463463374607431768211455' AS varint);
SELECT CAST('-2147483646' AS varint) = CAST((-2147483646) AS varint);
SELECT CAST('100' AS varint) = CAST(100 AS varint);
SELECT CAST('256' AS varint) = CAST(256 AS varint);
SELECT CAST('256' AS varint);
SELECT CAST('2147483646' AS varint);
SELECT CAST('21474836460000000000958' AS varint);
SELECT CAST('-21474836460000000000958' AS varint);
SELECT CAST('-21474836460000000000958214748364600000000009582147483646000000000095821474836460000000000958' AS varint);
SELECT CAST('-21474836460000000000958214748364600000000009582147483646000000000095821474836460000000000958' AS varint) < CAST('-21474836460000000000958214748364600000000009582147483646000000000095821474836460000000000957' AS varint);
PRAGMA x;
SELECT CAST('-0' AS VARINT);
SELECT CAST('+0' AS VARINT);
SELECT CAST('+-0' AS VARINT);
SELECT CAST('-+0' AS VARINT);
SELECT CAST('-' AS VARINT);
SELECT CAST('-0010' AS VARINT);
SELECT CAST('-0010.' AS VARINT);
SELECT CAST('-0010.5' AS VARINT);
SELECT CAST('-0010.4999' AS VARINT);
SELECT CAST('0010.5' AS VARINT);
SELECT CAST('0010.4999' AS VARINT);
SELECT CAST('00-0010' AS VARINT);
SELECT CAST('-0010.2' AS VARINT);
SELECT CAST('-0010.9' AS VARINT);
SELECT CAST('0010.2' AS VARINT);
SELECT CAST('0010.9' AS VARINT);
SELECT CAST('' AS VARINT);
SELECT CAST((-0) AS VARINT);
SELECT CAST('bla' AS VARINT);
SELECT CAST('1000bla' AS VARINT);
SELECT CAST('1000.bla' AS VARINT);
SELECT CAST('1000...' AS VARINT);
SELECT CAST('1000.0.0' AS VARINT);
PRAGMA x;
SELECT CAST(CAST(x AS TEXT) AS varint) = CAST(x AS varint), CAST(CAST(x AS TEXT) AS varint) = CAST(x AS varint), CAST(CAST(x AS TEXT) AS varint) = CAST(x AS varint), CAST(CAST(x AS TEXT) AS varint) = CAST(x AS varint), CAST(CAST(x AS TEXT) AS varint) = CAST(x AS varint), CAST(CAST(x AS TEXT) AS varint) = CAST(x AS varint), CAST(CAST(x AS TEXT) AS varint) = CAST(x AS varint), CAST(CAST(x AS TEXT) AS varint) = CAST(x AS varint), CAST(CAST(x AS TEXT) AS varint) = CAST(x AS varint), CAST(CAST(x AS TEXT) AS varint) = CAST(x AS varint) FROM x WHERE NOT x IS NULL;
SELECT CAST(x AS TEXT) = CAST(CAST(x AS varint) AS TEXT), CAST(x AS TEXT) = CAST(CAST(x AS varint) AS TEXT), CAST(x AS TEXT) = CAST(CAST(x AS varint) AS TEXT), CAST(x AS TEXT) = CAST(CAST(x AS varint) AS TEXT), CAST(x AS TEXT) = CAST(CAST(x AS varint) AS TEXT), CAST(x AS TEXT) = CAST(CAST(x AS varint) AS TEXT), CAST(x AS TEXT) = CAST(CAST(x AS varint) AS TEXT), CAST(x AS TEXT) = CAST(CAST(x AS varint) AS TEXT), CAST(x AS TEXT) = CAST(CAST(x AS varint) AS TEXT), CAST(CAST(x AS TEXT) AS varint) = CAST(CAST(x AS varint) AS TEXT) FROM x WHERE NOT x IS NULL;
SELECT CAST(CAST(1.7976931348623157E+308 AS DOUBLE) AS varint) = CAST('179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368' AS varint);
SELECT CAST(CAST((-1.7976931348623157E+308) AS DOUBLE) AS varint) = CAST('-179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368' AS varint);
SELECT CAST(CAST('179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368' AS varint) AS DOUBLE) = CAST('1.7976931348623157E+308' AS DOUBLE);
SELECT CAST(CAST('-179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368' AS varint) AS DOUBLE) = CAST('-1.7976931348623157E+308' AS DOUBLE);
SELECT CAST(CAST(3.4028235E+38 AS REAL) AS varint) = CAST('340282346638528859811704183484516925440' AS varint);
SELECT CAST(CAST((-3.4028235E+38) AS REAL) AS varint) = CAST('-340282346638528859811704183484516925440' AS varint);
PRAGMA x;
CREATE TABLE x (x varint);
INSERT INTO x VALUES (CAST('9223372036854775807' AS varint)), (CAST('-9223372036854775808' AS varint)), (CAST('2147483647' AS varint)), (CAST('-2147483648' AS varint)), (CAST('32767' AS varint)), (CAST('-32768' AS varint)), (CAST('255' AS varint)), (CAST('0' AS varint)), (CAST('-1' AS varint)), (CAST('1' AS varint)), (CAST('340282366920938463463374607431768211455' AS varint)), (CAST('-170141183460469231731687303715884105727' AS varint)), (CAST('170141183460469231731687303715884105727' AS varint)), (CAST('340282366920938463463374607431768211455987' AS varint)), (CAST('-340282366920938463463374607431768211455987' AS varint));
SELECT x, x < CAST('9223372036854775807' AS varint) FROM x;
SELECT x, x <= CAST('9223372036854775807' AS varint) FROM x;
SELECT x, x = CAST('9223372036854775807' AS varint) FROM x;
SELECT x, x > CAST('9223372036854775807' AS varint) FROM x;
SELECT x, x >= CAST('9223372036854775807' AS varint) FROM x;
SELECT x, x <> CAST('9223372036854775807' AS varint) FROM x;
SELECT x, x < CAST('2147483647' AS varint) FROM x;
SELECT x, x <= CAST('2147483647' AS varint) FROM x;
SELECT x, x = CAST('2147483647' AS varint) FROM x;
SELECT x, x > CAST('2147483647' AS varint) FROM x;
SELECT x, x >= CAST('2147483647' AS varint) FROM x;
PRAGMA x;
SELECT CAST(CAST('100' AS varint) AS DOUBLE);
SELECT CAST(CAST('100000' AS varint) AS DOUBLE);
SELECT CAST(CAST('1000000000000000' AS varint) AS DOUBLE);
SELECT CAST(CAST('340282366920938463463374607431768211455' AS varint) AS DOUBLE);
SELECT CAST(CAST('-100' AS varint) AS DOUBLE);
SELECT CAST(CAST('-100000' AS varint) AS DOUBLE);
SELECT CAST(CAST('-1000000000000000' AS varint) AS DOUBLE);
SELECT CAST(CAST('-340282366920938463463374607431768211455' AS varint) AS DOUBLE);
SELECT CAST(CAST(179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368 AS varint) AS DOUBLE);
SELECT CAST(CAST(1797693134862315708145274237317043567980705675258449965989174768031572607800285387605895586327668781715404589535143824642343213268894641827684675467035375169860499105765512820762454900903893289440758685084551339423045832369032229481658085593321233482747978262041447231687381771809192998812504040261841248583700 AS varint) AS DOUBLE);
SELECT CAST(CAST('1797693134862315708145274237317043567980705675258449965989174768031572607800285387605895586327668781715404589535143824642343213268894641827684675467035375169860499105765512820762454900903893289440758685084551339423045832369032229481658085593321233482747978262041447231687381771809192998812504040261841248583700' AS varint) AS DOUBLE);
PRAGMA x;
SELECT CAST(85070591730234614260976917445211069672 AS VARINT);
SELECT CAST((-85070591730234614260976917445211069672) AS VARINT);
CREATE TABLE x AS SELECT CAST((10 * POWER(10, x)) AS INT128) AS x FROM x AS x;
SELECT DISTINCT CAST(x AS TEXT) = CAST(CAST(x AS varint) AS TEXT) FROM x;
SELECT DISTINCT CAST((-x) AS TEXT) = CAST(CAST((-x) AS varint) AS TEXT) FROM x;
SELECT DISTINCT CAST(CAST(x AS UINT128) AS TEXT) = CAST(CAST(CAST(x AS UINT128) AS varint) AS TEXT) FROM x;
PRAGMA x;
CREATE TABLE x (x varint);
INSERT INTO x VALUES (1), (10), (1000), (CAST(33999999014383402399481480781255147520 AS DOUBLE)), (17976931348623157081452742373170435679807056752584499659891747);
SELECT SUM(x) FROM x;
INSERT INTO x VALUES (-17976931348623157081452742373170435679807056752584499659891747680315726078002853876058);
SELECT SUM(x) FROM x;
DROP TABLE x;
CREATE TABLE x (x varint);
INSERT INTO x VALUES (1000000000000000000000000000000000000000000000000000000000000000000000000), (100000000000000000000000000000000000000000000000000000000000000000000000), (10000000000000000000000000000000000000000000000000000000000000000000000), (1000000000000000000000000000000000000000000000000000000000000000000000), (100000000000000000000000000000000000000000000000000000000000000000000);
SELECT SUM(x) FROM x;
CREATE TABLE x AS SELECT * FROM x AS x;
SELECT COUNT(x), SUM(x) FROM x;
UPDATE x SET x = x + 1;
SELECT COUNT(x), SUM(x) FROM x;
UPDATE x SET x = x + 1;
SELECT COUNT(x), SUM(x) FROM x;
INSERT INTO x SELECT * FROM x;
SELECT COUNT(x), SUM(x) FROM x;
UPDATE x SET x = x + 1;
SELECT COUNT(x), SUM(x) FROM x;
UPDATE x SET x = x + 1;
SELECT COUNT(x), SUM(x) FROM x;
CREATE TABLE x (x INT, x TEXT);
INSERT INTO x (x) SELECT x AS x FROM x;
SELECT COUNT(*), COUNT(x), COUNT(x) FROM x;
UPDATE x SET x = 'x';
SELECT COUNT(*), COUNT(x), COUNT(x) FROM x;
UPDATE x SET x = NULL;
SELECT COUNT(*), COUNT(x), COUNT(x) FROM x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (2, 2), (3, 3), (4, NULL);
SELECT * FROM x ORDER BY x;
UPDATE x SET x = CASE WHEN x = 1 THEN 7 ELSE NULL END WHERE x <= 2;
SELECT * FROM x ORDER BY x;
UPDATE x SET x = 17 WHERE x > 2;
SELECT * FROM x ORDER BY x;
UPDATE x SET x = CASE WHEN x = 4 THEN 1 ELSE NULL END;
SELECT * FROM x ORDER BY x;
UPDATE x SET x = 2 WHERE x >= 2 AND x <= 3;
SELECT * FROM x ORDER BY x;
UPDATE x SET x = NULL WHERE x >= 3;
SELECT * FROM x ORDER BY x;
UPDATE x SET x = x WHERE x <> 3;
SELECT * FROM x ORDER BY x;
UPDATE x SET x = NULL WHERE x <> 3;
SELECT * FROM x ORDER BY x;
UPDATE x SET x = 3 WHERE x <> 2;
SELECT * FROM x ORDER BY x;
UPDATE x SET x = 7 WHERE x <> 3;
SELECT * FROM x ORDER BY x;
UPDATE x SET x = NULL;
SELECT * FROM x ORDER BY x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (2, 2), (3, 3), (4, NULL);
SELECT * FROM x ORDER BY x;
BEGIN;
UPDATE x SET x = CASE WHEN x IS NULL THEN 1 ELSE NULL END;
SELECT * FROM x ORDER BY x;
UPDATE x SET x = 2 WHERE x >= 2 AND x <= 3;
SELECT * FROM x ORDER BY x;
UPDATE x SET x = NULL WHERE x >= 3;
SELECT * FROM x ORDER BY x;
UPDATE x SET x = x WHERE x <> 3;
SELECT * FROM x ORDER BY x;
UPDATE x SET x = NULL WHERE x <> 3;
SELECT * FROM x ORDER BY x;
UPDATE x SET x = 3 WHERE x <> 2;
SELECT * FROM x ORDER BY x;
UPDATE x SET x = 7 WHERE x <> 3;
SELECT * FROM x ORDER BY x;
UPDATE x SET x = NULL;
SELECT * FROM x ORDER BY x;
COMMIT;
SELECT * FROM x ORDER BY x;
CREATE VIEW x AS SELECT * FROM x;
CREATE TABLE x (x TEXT, x TEXT);
INSERT INTO x SELECT * FROM x;
UPDATE x SET x = x.x FROM x AS x WHERE x.x = x.x;
SELECT COUNT(DISTINCT x), MIN(x), MAX(x), MIN(x), MAX(x) FROM x;
BEGIN;
CREATE TABLE x (x TEXT PRIMARY KEY, x INT);
INSERT INTO x VALUES ('    4-abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ', 2 + 1);
INSERT INTO x VALUES ('   34-abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ', 18);
INSERT INTO x SELECT x, x + 1 FROM x WHERE x < 5;
SELECT * FROM x;
UPDATE x SET x = CONCAT(x, 'x') WHERE x % 2 = 0;
SELECT * FROM x;
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('abcdefghijklmnopqrstuvwxyz');
INSERT INTO x SELECT x || x || x || x || x || x || x || x || x || x FROM x;
DELETE FROM x WHERE LENGTH(x) = (SELECT MIN(LENGTH(x)) FROM x);
INSERT INTO x SELECT x || x || x || x || x || x || x || x || x || x FROM x;
DELETE FROM x WHERE LENGTH(x) = (SELECT MIN(LENGTH(x)) FROM x);
INSERT INTO x SELECT x || x || x || x || x || x || x || x || x || x FROM x;
DELETE FROM x WHERE LENGTH(x) = (SELECT MIN(LENGTH(x)) FROM x);
INSERT INTO x SELECT x || x || x || x || x || x || x || x || x || x FROM x;
DELETE FROM x WHERE LENGTH(x) = (SELECT MIN(LENGTH(x)) FROM x);
INSERT INTO x SELECT x || x || x || x || x || x || x || x || x || x FROM x;
DELETE FROM x WHERE LENGTH(x) = (SELECT MIN(LENGTH(x)) FROM x);
SELECT LENGTH(x) FROM x;
BEGIN;
UPDATE x SET x = 'a';
SELECT LENGTH(x) FROM x;
SELECT LENGTH(x) FROM x;
COMMIT;
SELECT LENGTH(x) FROM x;
SELECT LENGTH(x) FROM x;
BEGIN;
CREATE TABLE x AS SELECT x AS x, 'hello' AS x FROM x AS x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
COMMIT;
SELECT SUM(x), SUM(LENGTH(x)) FROM x;
SELECT SUM(x), SUM(LENGTH(x)) FROM x;
BEGIN;
SELECT SUM(x), SUM(LENGTH(x)) FROM x;
UPDATE x SET x = x + 2, x = 'hellohello' WHERE x % 2 = 0;
SELECT SUM(x), SUM(LENGTH(x)) FROM x;
SELECT SUM(x), SUM(LENGTH(x)) FROM x;
UPDATE x SET x = x + 2, x = 'hellohello' WHERE x % 2 = 1;
SELECT SUM(x), SUM(LENGTH(x)) FROM x;
SELECT SUM(x), SUM(LENGTH(x)) FROM x;
UPDATE x SET x = x + 2, x = 'hellohellohellohello';
SELECT SUM(x), SUM(LENGTH(x)) FROM x;
SELECT SUM(x), SUM(LENGTH(x)) FROM x;
COMMIT;
SELECT SUM(x), SUM(LENGTH(x)) FROM x;
SELECT SUM(x), SUM(LENGTH(x)) FROM x;
SET x = 'nulls_first';
SET x = TRUE;
BEGIN;
CREATE TABLE x (x INT, x INT);
INSERT INTO x SELECT x, x FROM x AS x;
PRAGMA x = '1GB';
UPDATE x SET x = x + 1000000 WHERE x = 1;
BEGIN;
UPDATE x SET x = x + 1000000 WHERE x = 2;
BEGIN;
UPDATE x SET x = x + 1000000 WHERE x = 3;
COMMIT;
SELECT COUNT(*) FROM x WHERE x > 1000000;
COMMIT;
COMMIT;
BEGIN;
SELECT COUNT(*) FROM x WHERE x > 1000000;
CREATE TABLE x (x INT, x TEXT, x INT);
INSERT INTO x VALUES (1, 'apple', 2), (2, 'orange', 3);
UPDATE x SET (x, x, x) = (1, 'pear', 2);
SELECT * FROM x;
UPDATE x SET (x, x, x) = (2, 'apple', 3);
SELECT * FROM x;
UPDATE x SET (x, x, x) = 3;
SELECT * FROM x;
UPDATE x SET (x, x, x) = (1, 2);
UPDATE x SET (x, x, x) = (1, 2, 3, 4);
UPDATE x SET (x, x, x) = ADD(x, x);
SELECT * FROM x;
UPDATE x SET () = (x, x);
UPDATE x SET (x, x) = ();
SET x = 'nulls_first';
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3), (NULL);
SELECT * FROM x ORDER BY x;
BEGIN;
UPDATE x SET x = NULL WHERE x = 2;
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
COMMIT;
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
BEGIN;
UPDATE x SET x = NULL WHERE x = 3;
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
ROLLBACK;
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
BEGIN;
UPDATE x SET x = 10 WHERE x IS NULL;
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
ROLLBACK;
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
BEGIN;
UPDATE x SET x = 10 WHERE x IS NULL;
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
COMMIT;
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('hello'), ('world');
BEGIN;
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
UPDATE x SET x = 'test' WHERE x = 'hello';
SELECT * FROM x ORDER BY x;
UPDATE x SET x = 'test2' WHERE x = 'world';
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
COMMIT;
SELECT * FROM x ORDER BY x;
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('hello'), ('world');
BEGIN;
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
DELETE FROM x WHERE x = 'hello';
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
UPDATE x SET x = 'hello';
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
COMMIT;
SELECT * FROM x ORDER BY x;
SET x = 'nulls_first';
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('a'), ('b'), ('c'), (NULL);
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
INSERT INTO x SELECT * FROM x;
SELECT DISTINCT x FROM x ORDER BY x;
SELECT DISTINCT x FROM x ORDER BY x;
BEGIN;
UPDATE x SET x = 'aa' WHERE x = 'a';
SELECT DISTINCT x FROM x ORDER BY x;
SELECT DISTINCT x FROM x ORDER BY x;
ROLLBACK;
SELECT DISTINCT x FROM x ORDER BY x;
SELECT DISTINCT x FROM x ORDER BY x;
UPDATE x SET x = 'aa' WHERE x = 'a';
SELECT DISTINCT x FROM x ORDER BY x;
SELECT DISTINCT x FROM x ORDER BY x;
SET x = 'nulls_first';
SET x = TRUE;
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('hello'), ('world');
BEGIN;
UPDATE x SET x = NULL WHERE x = 'world';
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
COMMIT;
SELECT * FROM x ORDER BY x;
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('hello'), ('world');
BEGIN;
UPDATE x SET x = 'test' WHERE x = 'hello';
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
ROLLBACK;
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
UPDATE x SET x = 'test' WHERE x = 'hello';
BEGIN;
UPDATE x SET x = 'test2' WHERE x = 'test';
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
ROLLBACK;
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
BEGIN;
UPDATE x SET x = 'test2' WHERE x = 'world';
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
ROLLBACK;
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
SET x = 'nulls_first';
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('test'), ('world');
BEGIN;
UPDATE x SET x = NULL WHERE x = 'world';
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
ROLLBACK;
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
UPDATE x SET x = NULL WHERE x = 'world';
SELECT * FROM x ORDER BY x;
BEGIN;
UPDATE x SET x = 'world' WHERE x IS NULL;
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
ROLLBACK;
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
PRAGMA x;
CREATE TABLE x AS SELECT * FROM x AS x;
CREATE TABLE x AS SELECT * FROM x AS x;
SELECT SUM(x) FROM x;
SELECT SUM(x) FROM x;
SELECT COUNT(*) FROM x, x WHERE x.x < 33;
SELECT COUNT(*) FROM x, x WHERE x.x < 33;
UPDATE x SET x = 33 FROM x WHERE x.x < 33;
UPDATE x SET x = 33 FROM x WHERE x.x < 33;
SELECT SUM(x) FROM x;
SELECT SUM(x) FROM x;
UPDATE x SET x = 34 FROM x WHERE x.x = 33 AND x.x <> x.x;
UPDATE x SET x = 34 FROM x WHERE x.x = 33 AND x.x <> x.x;
SELECT SUM(x) FROM x;
SELECT SUM(x) FROM x;
UPDATE x SET x = 35 FROM x WHERE x.x = 34 AND x.x < x.x;
UPDATE x SET x = 35 FROM x WHERE x.x = 34 AND x.x < x.x;
SELECT SUM(x) FROM x;
SELECT SUM(x) FROM x;
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (3);
SELECT * FROM x;
SELECT * FROM x WHERE x = 3;
BEGIN;
UPDATE x SET x = 1;
SELECT * FROM x;
SELECT * FROM x WHERE x = 1;
SELECT * FROM x;
SELECT * FROM x WHERE x = 3;
COMMIT;
SELECT * FROM x;
SELECT * FROM x;
BEGIN;
UPDATE x SET x = 4;
SELECT * FROM x;
SELECT * FROM x;
ROLLBACK;
SELECT * FROM x;
SELECT * FROM x WHERE x = 1;
SELECT * FROM x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3);
BEGIN;
BEGIN;
UPDATE x SET x = x + 1;
DELETE FROM x;
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
COMMIT;
COMMIT;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (3);
CREATE TABLE x (x INT);
INSERT INTO x VALUES (2);
SELECT * FROM x;
SELECT * FROM x;
UPDATE x SET x = x.x + x.x FROM x AS x;
SELECT * FROM x;
UPDATE x SET x = x.x + x.x FROM x AS x;
SELECT * FROM x;
UPDATE x SET x = x.x + x.x FROM x AS x, x AS x;
SELECT * FROM x;
UPDATE x SET x = x.x FROM (SELECT x + 1 AS x FROM x) AS x;
SELECT * FROM x;
CREATE VIEW x AS (SELECT 17 AS x);
UPDATE x SET x = x FROM x;
SELECT * FROM x;
UPDATE x SET x = x.x FROM x AS x WHERE x.x = 2;
SELECT * FROM x;
UPDATE x AS x SET x = 1 FROM x AS x WHERE x.x = x.x;
SELECT * FROM x;
UPDATE x AS x SET x = 9 FROM x AS x WHERE x.x = x.x;
SELECT * FROM x;
INSERT INTO x VALUES (7);
UPDATE x SET x = x.x FROM x AS x;
SELECT * FROM x;
CREATE TABLE x (x INT, x INT);
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 0), (2, 0);
INSERT INTO x VALUES (1, 1);
INSERT INTO x VALUES (2, 1);
INSERT INTO x VALUES (2, 2);
INSERT INTO x VALUES (2, 3);
UPDATE x SET x = x.x FROM (SELECT x AS x, COUNT(x) AS x FROM x GROUP BY x ORDER BY x) AS x WHERE x.x = x.x;
SELECT * FROM x;
PRAGMA x;
CREATE TABLE x (x INT, x TEXT, PRIMARY KEY (x));
INSERT INTO x SELECT x, 'creator' FROM x AS x;
SELECT x FROM x WHERE x = 122879;
SELECT x FROM x WHERE x = 122881;
SELECT x FROM x WHERE x = 245780;
SELECT x FROM x WHERE x = 150881;
UPDATE x SET x = 'updator0' WHERE x = 122879;
UPDATE x SET x = 'updator1' WHERE x = 122881;
UPDATE x SET x = 'updator2' WHERE x = 245780;
UPDATE x SET x = 'updator3' WHERE x = 150881;
SELECT x FROM x WHERE x = 122879;
SELECT x FROM x WHERE x = 122881;
SELECT x FROM x WHERE x = 245780;
SELECT x FROM x WHERE x = 150881;
CREATE TABLE x (x INT, x TEXT, PRIMARY KEY (x));
INSERT INTO x SELECT x, 'creator' FROM x AS x;
SELECT x, x FROM x WHERE x = 122881;
UPDATE x SET x = 'updator' WHERE x = 122881;
SELECT x, x FROM x WHERE x = 122881;
SELECT x, x FROM x WHERE x = 122881;
SET x = TRUE;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3);
BEGIN;
UPDATE x SET x = 4 WHERE x = 1;
BEGIN;
UPDATE x SET x = 5 WHERE x = 2;
BEGIN;
UPDATE x SET x = 6 WHERE x = 3;
BEGIN;
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
UPDATE x SET x = 99 WHERE x = 1;
UPDATE x SET x = 99 WHERE x = 2;
UPDATE x SET x = 99 WHERE x = 3;
UPDATE x SET x = x - 3;
ROLLBACK;
ROLLBACK;
ROLLBACK;
ROLLBACK;
BEGIN;
UPDATE x SET x = 4 WHERE x = 1;
BEGIN;
UPDATE x SET x = 5 WHERE x = 2;
BEGIN;
UPDATE x SET x = 6 WHERE x = 3;
BEGIN;
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
UPDATE x SET x = 7 WHERE x = 4;
UPDATE x SET x = 8 WHERE x = 5;
UPDATE x SET x = 9 WHERE x = 6;
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
COMMIT;
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
COMMIT;
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
COMMIT;
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
COMMIT;
SELECT * FROM x ORDER BY x;
SET x = 'nulls_first';
SET x = TRUE;
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3);
BEGIN;
UPDATE x SET x = NULL WHERE x = 1;
BEGIN;
UPDATE x SET x = NULL WHERE x = 2;
BEGIN;
UPDATE x SET x = NULL WHERE x = 3;
BEGIN;
SELECT COUNT(*) FROM x WHERE x IS NULL;
UPDATE x SET x = 99 WHERE x IS NULL;
BEGIN;
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
UPDATE x SET x = 99 WHERE x = 1;
UPDATE x SET x = 99 WHERE x = 2;
UPDATE x SET x = 99 WHERE x = 3;
UPDATE x SET x = 99 WHERE x IS NULL;
SET x = TRUE;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3);
SELECT SUM(x) FROM x;
BEGIN;
INSERT INTO x VALUES (4), (5), (6);
SELECT SUM(x) FROM x;
SELECT SUM(x) FROM x;
DELETE FROM x WHERE x < 4;
SELECT SUM(x) FROM x;
SELECT SUM(x) FROM x;
UPDATE x SET x = x - 3;
SELECT SUM(x) FROM x;
SELECT SUM(x) FROM x;
COMMIT;
SELECT SUM(x) FROM x;
SELECT SUM(x) FROM x;
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('hello'), ('world');
BEGIN;
UPDATE x SET x = 'test' WHERE x = 'hello';
SELECT * FROM x ORDER BY x;
UPDATE x SET x = 'test2' WHERE x = 'world';
SELECT * FROM x ORDER BY x;
COMMIT;
SELECT * FROM x ORDER BY x;
PRAGMA x;
CREATE TABLE x (x INT);
INSERT INTO x VALUES (1), (2), (3);
SELECT * FROM x ORDER BY x;
BEGIN;
UPDATE x SET x = x + 1;
SELECT * FROM x;
SELECT * FROM x WHERE x = 4;
SELECT * FROM x;
UPDATE x SET x = x + 1;
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
COMMIT;
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
BEGIN;
SELECT * FROM x;
SELECT * FROM x WHERE x = 5;
UPDATE x SET x = 9 WHERE x = 5;
SELECT * FROM x ORDER BY x;
UPDATE x SET x = x + 1;
SELECT * FROM x ORDER BY x;
UPDATE x SET x = 7 WHERE x = 3;
SELECT * FROM x ORDER BY x;
UPDATE x SET x = x + 1;
SELECT * FROM x ORDER BY x;
UPDATE x SET x = 8 WHERE x = 4;
SELECT * FROM x ORDER BY x;
UPDATE x SET x = x + 1;
SELECT * FROM x ORDER BY x;
COMMIT;
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
PRAGMA x;
CREATE TABLE x (x INT);
BEGIN;
INSERT INTO x VALUES (1);
UPDATE x SET x = x + 10;
COMMIT;
UPDATE x SET x = x + 10;
SELECT * FROM x;
CREATE TABLE x (x INT);
INSERT INTO x (x) VALUES (1), (2), (3);
SET x = '1TB';
CREATE TABLE x (x BIGINT PRIMARY KEY, x TEXT);
INSERT INTO x (x, x) VALUES (1, 'foo');
INSERT INTO x (x, x) VALUES (2, 'bar');
BEGIN;
DELETE FROM x WHERE x = 1;
UPDATE x SET x = 'baz' WHERE x = 2;
COMMIT;
SELECT * FROM x ORDER BY x;
SELECT * FROM x ORDER BY x;
SET x = '1TB';
CREATE TABLE x (x INT, x INT);
INSERT INTO x SELECT x, NULL FROM x AS x;
SELECT COUNT(x), MIN(x), MAX(x) FROM x;
SELECT COUNT(x), MIN(x), MAX(x) FROM x;
UPDATE x SET x = 1;
SELECT COUNT(x), MIN(x), MAX(x) FROM x;
PRAGMA x;
CREATE TABLE x (x INT, x INT UNIQUE, x INT DEFAULT 10);
INSERT INTO x (x, x) VALUES (1, 2), (2, 1);
INSERT OR replace INTO x (x, x, x) VALUES (5, 2, 20), (10, 1, 30);
SELECT x, x, x FROM x;
INSERT OR replace INTO x (x, x) VALUES (5, 2);
SELECT x FROM x;
INSERT OR replace INTO x AS x VALUES (5, 2);
SELECT x FROM x;
PRAGMA x;
CREATE OR REPLACE TABLE x (x INT PRIMARY KEY, x INT UNIQUE, x INT);
INSERT INTO x VALUES (1, 10, 1), (2, 20, 1), (3, 30, 2);
SELECT * FROM x;
INSERT INTO x VALUES (3, 5, 1) ON CONFLICT(x) DO UPDATE SET x = x + x.x;
SELECT * FROM x;
PRAGMA x;
CREATE OR REPLACE TABLE x (x INT DEFAULT 3);
INSERT INTO x VALUES ((3 + "x"));
PRAGMA x;
SET x = FALSE;
CREATE TABLE x (x INT UNIQUE, x INT DEFAULT 0, x INT DEFAULT 0);
INSERT INTO x (x) SELECT x FROM x AS x;
SELECT COUNT(*) FROM x;
INSERT INTO x SELECT * FROM x ON CONFLICT DO NOTHING;
INSERT INTO x SELECT * FROM x ON CONFLICT DO UPDATE SET x = 10;
SELECT COUNT(*) FILTER(WHERE x = 10) FROM x;
INSERT INTO x (x, x) SELECT x % 5, x FROM x AS x ON CONFLICT DO UPDATE SET x = x.x, x = x.x;
SELECT x FROM x LIMIT 5;
INSERT INTO x (x, x) SELECT CASE WHEN x % 2 = 0 THEN 4999 - (x // 2) ELSE x - ((x // 2) + 1) END, x FROM x AS x ON CONFLICT DO UPDATE SET x = x.x;
SELECT x FROM x LIMIT 5;
SELECT x FROM x LIMIT 5 OFFSET 4995;
UPDATE x SET x = 0;
INSERT INTO x (x, x) SELECT CASE WHEN x % 2 = 0 THEN 4999 - (x // 2) ELSE x - ((x // 2) + 1) END, x FROM x AS x ON CONFLICT DO UPDATE SET x = x.x WHERE x % 2 = 0 AND x.x % 2 = 0;
SELECT COUNT(x) FILTER(WHERE x <> 0) FROM x;
PRAGMA x;
SET x = FALSE;
CREATE TABLE x (x INT UNIQUE, x INT DEFAULT 0, x INT DEFAULT 0);
INSERT INTO x (x) SELECT x FROM x AS x;
INSERT INTO x (x, x) SELECT x % 5, x FROM x AS x ON CONFLICT DO UPDATE SET x = x.x, x = x.x;
CREATE TABLE x (x BIGINT PRIMARY KEY, x TEXT UNIQUE, x TEXT);
INSERT INTO x (x, x, x) VALUES (3, 'inner_conflict', 'test'), (3, 'inner_conflict2', 'other_test'), (3, 'inner_conflict3', 'filtered_out') ON CONFLICT(x) DO UPDATE SET x = x.x WHERE x.x <> 'filtered_out';
INSERT INTO x (x, x, x) VALUES (3, 'inner_conflict', 'test'), (3, 'inner_conflict2', 'other_test'), (3, 'inner_conflict3', 'yet_another_test'), (3, 'inner_conflict4', 'dont_skip_me') ON CONFLICT(x) DO UPDATE SET x = x.x WHERE x <> 'other_test' OR x.x = 'dont_skip_me' RETURNING *;
PRAGMA x;
CREATE TABLE x (x INT, x INT UNIQUE);
INSERT INTO x VALUES (5, 3), (6, 7);
INSERT INTO x VALUES (5, 3), (6, 7);
SELECT * FROM x;
INSERT INTO x AS x VALUES (2, 3) ON CONFLICT DO UPDATE SET x = x.x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
INSERT INTO x AS x VALUES (5, 3) ON CONFLICT(x) DO UPDATE SET x = 10 WHERE x.x <= 3;
SELECT * FROM x;
INSERT INTO x AS x VALUES (5, 3) ON CONFLICT(x) DO UPDATE SET x = 10 WHERE x.x > 3;
SELECT * FROM x;
INSERT INTO x AS x VALUES (8, 3) ON CONFLICT(x) DO UPDATE SET x = 5;
PRAGMA x;
CREATE OR REPLACE TABLE x (x INT PRIMARY KEY, x INT UNIQUE, x INT);
INSERT INTO x VALUES (1, 10, 1), (2, 20, 1), (3, 30, 2);
INSERT INTO x VALUES (3, 5, 1) ON CONFLICT(x) DO UPDATE SET x = x + 1;
SELECT x, x, x FROM x ORDER BY ALL;
SELECT x, x, x FROM x WHERE x = 4;
INSERT INTO x VALUES (4, 30, 2) ON CONFLICT(x) DO UPDATE SET x = x - 1;
SELECT x, x, x FROM x ORDER BY ALL;
INSERT INTO x VALUES (3, 30, 2) ON CONFLICT(x) DO UPDATE SET x = x - 2;
INSERT INTO x VALUES (3, 5, 1) ON CONFLICT(x) DO UPDATE SET x = x + x.x;
SELECT * FROM x;
INSERT INTO x VALUES (3, 5, 1) ON CONFLICT(x) DO UPDATE SET x = x.x;
INSERT INTO x VALUES (3, 5, 1) ON CONFLICT(x) DO UPDATE SET x = x.x;
SELECT * FROM x;
INSERT INTO x VALUES (4, 2, 3), (3, 5, 10) ON CONFLICT(x) DO NOTHING;
SELECT * FROM x;
INSERT INTO x VALUES (3, 1, 5), (3, 3, 10) ON CONFLICT(x) DO UPDATE SET x = x.x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
INSERT INTO x VALUES (3, 5, 3) ON CONFLICT(x) DO UPDATE SET x = 10 WHERE x <> 1;
SELECT * FROM x;
INSERT INTO x VALUES (3, 5, 3) ON CONFLICT(x) DO UPDATE SET x = 10 WHERE x = 1;
SELECT * FROM x;
INSERT INTO x VALUES (5, 1, 0), (3, 5, 20) ON CONFLICT DO NOTHING;
SELECT * FROM x;
INSERT INTO x VALUES (5, 1, 0), (3, 5, 20) ON CONFLICT DO UPDATE SET x = x.x;
CREATE OR REPLACE TABLE x (x INT PRIMARY KEY, x INT, x TEXT);
INSERT INTO x VALUES (5, 1, 'hello'), (1, 10, 'test');
INSERT INTO x VALUES (1, 5, 'bye'), (3, 10, 'quack') ON CONFLICT DO UPDATE SET x = x.x, x = CONCAT(x, x.x);
SELECT * FROM x;
PRAGMA x;
CREATE OR REPLACE TABLE x (x INT, x INT, x INT, PRIMARY KEY (x, x));
INSERT INTO x VALUES (1, 2, 3), (1, 2, 3);
INSERT INTO x VALUES (1, 2, 3), (1, 4, 5);
INSERT INTO x VALUES (1, 4, 7), (1, 8, 4) ON CONFLICT(x) DO UPDATE SET x = 5;
INSERT INTO x VALUES (1, 4, 7), (1, 8, 4) ON CONFLICT(x) DO UPDATE SET x = 5;
INSERT INTO x VALUES (1, 4, 7), (1, 8, 4) ON CONFLICT(x, x) DO UPDATE SET x = 5;
SELECT x, x, x FROM x ORDER BY ALL;
PRAGMA x;
CREATE OR REPLACE TABLE x (x INT, x INT);
INSERT INTO x VALUES (5, 3);
CREATE UNIQUE INDEX x ON x(x);
INSERT INTO x VALUES (5, 5);
SELECT * FROM x;
INSERT INTO x VALUES (5, 10) ON CONFLICT ON CONSTRAINT x DO UPDATE SET x = x.x;
PRAGMA x;
CREATE TABLE x (x INT, x INT UNIQUE, x INT UNIQUE, x INT UNIQUE);
INSERT INTO x (x, x, x) VALUES (1, 2, 3), (2, 3, 1), (3, 1, 2);
PRAGMA x;
CREATE TABLE x (x INT DEFAULT 5, x INT UNIQUE, x INT DEFAULT 10);
INSERT INTO x (x) VALUES (3), (5), (6);
INSERT INTO x (x) VALUES (7), (3), (4) ON CONFLICT DO UPDATE SET x = 5, x = 10;
SELECT * FROM x;
CREATE TABLE x (x INT PRIMARY KEY, x INT);
INSERT INTO x VALUES (1, 1) ON CONFLICT DO NOTHING;
INSERT INTO x VALUES (1, 1) ON CONFLICT DO NOTHING;
INSERT INTO x VALUES (1, 1) ON CONFLICT(x) DO UPDATE SET x = x.x;
PRAGMA x;
CREATE OR REPLACE TABLE x (x INT PRIMARY KEY DEFAULT 4, x INT DEFAULT 3);
INSERT INTO x VALUES (2, 3), (4, 5);
SELECT * FROM x;
INSERT INTO x VALUES (DEFAULT, 6) ON CONFLICT(x) DO UPDATE SET x = "x";
SELECT * FROM x;
SELECT * FROM x;
INSERT INTO x VALUES (4, 3) ON CONFLICT(x) DO UPDATE SET x = x.x WHERE x.x = "x" * 2;
PRAGMA x;
CREATE OR REPLACE TABLE x (x INT PRIMARY KEY DEFAULT 5, x INT);
CREATE OR REPLACE TABLE x (x INT PRIMARY KEY DEFAULT 5, x INT);
SELECT * FROM x;
PRAGMA x;
CREATE OR REPLACE TABLE x (x INT PRIMARY KEY DEFAULT 5, x INT);
INSERT INTO x (x) VALUES (10);
SELECT * FROM x;
INSERT INTO x (x) VALUES (10);
INSERT INTO x (x) VALUES (10) ON CONFLICT(x) DO NOTHING;
SELECT * FROM x;
INSERT INTO x (x) VALUES (10) ON CONFLICT(x) DO UPDATE SET x = x.x * 2;
SELECT * FROM x;
CREATE TABLE x (x TEXT, x TEXT);
INSERT INTO x VALUES ('abc001', 'foo'), ('abc002', 'bar'), ('abc001', 'foo2'), ('abc002', 'bar2');
CREATE TABLE x (x TEXT PRIMARY KEY, x TEXT);
INSERT INTO x SELECT DISTINCT (x) AS x, x FROM x;
INSERT INTO x SELECT DISTINCT (x) AS x, x FROM x;
INSERT OR IGNORE INTO x SELECT DISTINCT (x) AS x, x FROM x;
PRAGMA x;
CREATE TABLE x (x TEXT, x TEXT, PRIMARY KEY (x, x));
PRAGMA x;
CREATE OR REPLACE TABLE x (x INT PRIMARY KEY, x INT);
INSERT INTO x VALUES (1, 2), (2, 2);
SELECT * FROM x;
INSERT INTO x VALUES (1, 3), (3, 4);
INSERT INTO x VALUES (1, 3), (3, 4) ON CONFLICT(x) DO UPDATE SET x = x.x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
SELECT * FROM x;
INSERT INTO x VALUES (3, 8), (2, 2), (7, 2) ON CONFLICT(x) DO UPDATE SET x = x * 2 WHERE x = x.x;
SELECT * FROM x;
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (5, 3), (3, 2);
CREATE UNIQUE INDEX x ON x(x);
INSERT INTO x VALUES (5, 2) ON CONFLICT(x) DO UPDATE SET x = 10;
SELECT x, x FROM x ORDER BY ALL DESC;
DROP TABLE x CASCADE;
CREATE TABLE x (x INT PRIMARY KEY, x INT);
INSERT INTO x VALUES (42, 21), (21, 42);
CREATE INDEX x ON x(x);
INSERT INTO x VALUES (42, 20) ON CONFLICT DO UPDATE SET x = 30;
SELECT x, x, x FROM x WHERE x = 30;
SELECT x, x, x FROM x ORDER BY ALL;
CREATE TABLE x (x INT PRIMARY KEY, x TEXT);
INSERT INTO x VALUES (1, 'd'), (3, 'nope'), (2, 'n');
INSERT INTO x VALUES (1, 'a') /* conflict (existing) */, (6, 'yep'), (3, 'abc') /* conflict (existing) */, (4, 'abc'), (7, 'tes'), (2, 'b') /* conflict (existing) */, (1, 'c') /* conflict (existing + inner) */, (5, 'abc'), (7, 'tes') /* conflict (inner) */, (2, 'b') /* conflict (existing + inner) */ ON CONFLICT(x) DO UPDATE SET x = x.x || 'e';
SELECT * FROM x;
CREATE TABLE x (x INT PRIMARY KEY);
INSERT INTO x VALUES (1);
INSERT INTO x SELECT 1 FROM x ON CONFLICT DO NOTHING;
SELECT * FROM x;
PRAGMA x;
CREATE OR REPLACE TABLE x (x INT PRIMARY KEY, x TEXT, x TEXT[], x INT);
INSERT INTO x SELECT 1, 'hello', ['x', 'y', 'z'], 40 ON CONFLICT DO UPDATE SET x = LIST_REDUCE(x.x, (x, x) -> x || '||' || x);
SELECT * FROM x;
INSERT INTO x SELECT 1, 'world', ['a', 'b', 'c'], 41 ON CONFLICT DO UPDATE SET x = LIST_REDUCE(x.x, (x, x) -> x || '||' || x);
SELECT * FROM x;
INSERT INTO x SELECT 1, '', ['1', '2'], 42 ON CONFLICT DO UPDATE SET x = LIST_REDUCE(x.x, (x, x) -> x || '||' || x), x = x.x;
SELECT * FROM x;
INSERT INTO x SELECT 1, '', ['l', 'm', 'n'], 43 ON CONFLICT DO UPDATE SET x = LIST_REDUCE(x, (x, x) -> x || '||' || x);
SELECT * FROM x;
INSERT INTO x SELECT 1, 'world', ['s', 't'], 42 ON CONFLICT DO UPDATE SET x = LIST_REDUCE(x.x, (x, x) -> x || x || x || x.x);
SELECT * FROM x;
INSERT INTO x SELECT 1, 'motorcycle', ['brrr', 'brrrrrr'], 1042 ON CONFLICT DO UPDATE SET x = 'black-bellied whistling duck' WHERE LIST_REDUCE(x.x, (x, x) -> x || x || x || x.x) = 'brrrsx||y||ztworldbrrrrrrmotorcycle';
SELECT * FROM x;
PRAGMA x;
CREATE TABLE x (x SMALLINT PRIMARY KEY, x SMALLINT);
INSERT INTO x (x, x) VALUES (1, 2);
BEGIN;
INSERT INTO x (x, x) VALUES (1, 2) ON CONFLICT DO NOTHING;
SELECT * FROM x WHERE x = 1;
INSERT INTO x (x, x) VALUES (1, 2) ON CONFLICT DO NOTHING;
SELECT * FROM x WHERE x = 1;
COMMIT;
BEGIN;
INSERT INTO x (x, x) VALUES (5, 4);
INSERT INTO x (x, x) VALUES (1, 2) ON CONFLICT DO NOTHING;
SELECT * FROM x ORDER BY x;
PRAGMA x;
CREATE OR REPLACE TABLE x (x INT UNIQUE, x INT, x INT PRIMARY KEY);
INSERT INTO x VALUES (3, 4, 2), (5, 3, 1);
SELECT * FROM x;
INSERT INTO x (x, x) VALUES (2, 3), (4, 4), (1, 8) ON CONFLICT(x) DO UPDATE SET x = x.x;
SELECT * FROM x;
INSERT INTO x (x, x) VALUES (3, 2), (5, 5) ON CONFLICT(x) DO UPDATE SET x = 10;
SELECT * FROM x;
INSERT INTO x (x, x) VALUES (3, 10), (6, 2) ON CONFLICT(x) DO UPDATE SET x = 10;
SELECT * FROM x;
PRAGMA x;
CREATE OR REPLACE TABLE x (x INT PRIMARY KEY, x INT);
INSERT INTO x VALUES (1, 3), (2, 2), (3, 10), (4, 3);
INSERT INTO x VALUES (3, 8), (2, 2) ON CONFLICT(x) DO UPDATE SET x = x * 2 WHERE x = x.x;
SELECT * FROM x;
CREATE TABLE x (x BIGINT PRIMARY KEY, x TEXT UNIQUE, x TEXT);
INSERT INTO x (x, x, x) VALUES (1, 'john_doe', 'john@example.com') ON CONFLICT(x) DO NOTHING RETURNING *;
INSERT INTO x (x, x, x) VALUES (1, 'john_doe', 'john@example.com') ON CONFLICT(x) DO NOTHING RETURNING *;
INSERT INTO x (x, x, x) VALUES (1, 'john_doe', 'john_new@example.com') ON CONFLICT(x) DO UPDATE SET x = x.x WHERE x.x <> 'john_new@example.com' RETURNING *;
INSERT INTO x (x, x, x) VALUES (1, 'john_doe', 'john_new@example.com'), (2, 'not_john_doe', 'not_john_new@example.com') ON CONFLICT(x) DO UPDATE SET x = x.x WHERE x.x <> 'john_new@example.com' RETURNING *;
INSERT INTO x (x, x, x) VALUES (3, 'inner_conflict', 'test'), (4, 'a', ''), (5, 'b', ''), (6, 'c', ''), (3, 'inner_conflict2', 'other_test'), (7, 'd', ''), (8, 'e', ''), (9, 'f', ''), (3, 'inner_conflict3', 'yet_another_test') ON CONFLICT(x) DO UPDATE SET x = x.x WHERE x.x <> 'test' RETURNING *;
PRAGMA x;
CREATE OR REPLACE TABLE x (x INT PRIMARY KEY, x INT UNIQUE, x INT);
INSERT INTO x VALUES (1, 10, 1), (2, 20, 1), (3, 30, 2);
INSERT INTO x VALUES (3, 5, 1) ON CONFLICT(x) DO UPDATE SET x = 5;
SELECT * FROM x;
INSERT INTO x VALUES (3, 5, 1) ON CONFLICT(x) DO UPDATE SET x = 1 + x.x;
SELECT * FROM x;
INSERT INTO x VALUES (3, 5, 1) ON CONFLICT(x) DO UPDATE SET x = x + x.x;
SELECT * FROM x;
PRAGMA x;
CREATE TABLE x (x INT, x INT UNIQUE);
INSERT INTO x VALUES (1, 2), (2, 1);
INSERT INTO x VALUES (1, 2) ON CONFLICT DO UPDATE SET x = x.x;
INSERT OR replace INTO x VALUES (4, 3) ON CONFLICT DO NOTHING;
INSERT OR ignore INTO x VALUES (1, 2), (2, 1);
INSERT OR replace INTO x VALUES (5, 2), (10, 1);
SELECT * FROM x;
CREATE OR REPLACE TABLE x (x INT UNIQUE, x INT UNIQUE);
INSERT OR replace INTO x VALUES (1, 2);
BEGIN;
CREATE TABLE x (x SMALLINT PRIMARY KEY, x SMALLINT);
INSERT INTO x VALUES (1, 2) ON CONFLICT(x) DO UPDATE SET x = x.x;
INSERT INTO x VALUES (1, 3) ON CONFLICT(x) DO UPDATE SET x = x.x;
SELECT * FROM x;
COMMIT;
SELECT * FROM x;
BEGIN;
INSERT INTO x VALUES (2, 1), (3, 1), (4, 1);
INSERT INTO x VALUES (2, 1), (3, 1), (4, 1) ON CONFLICT(x) DO NOTHING;
COMMIT;
BEGIN;
INSERT INTO x VALUES (5, 0);
INSERT INTO x VALUES (5, 0), (5, 1) ON CONFLICT(x) DO UPDATE SET x = x.x;
COMMIT;
BEGIN;
INSERT INTO x VALUES (6, 0);
INSERT INTO x VALUES (5, 0), (6, 0), (7, 0) ON CONFLICT(x) DO UPDATE SET x = x.x;
INSERT INTO x VALUES (-1, 0), (5, 0), (6, 0) ON CONFLICT(x) DO NOTHING;
COMMIT;
BEGIN;
CREATE OR REPLACE TABLE x (x SMALLINT PRIMARY KEY, x SMALLINT);
INSERT INTO x (SELECT x, 0 FROM x AS x);
SELECT MAX(x) FROM x;
INSERT INTO x (SELECT x, x FROM x AS x) ON CONFLICT(x) DO UPDATE SET x = x.x;
SELECT MAX(x) FROM x;
PRAGMA x;
CREATE OR REPLACE TABLE x (x INT UNIQUE, x INT);
INSERT INTO x VALUES (3, 2), (1, 3);
INSERT INTO x (x) VALUES (5) ON CONFLICT(x) DO UPDATE SET x = 8;
SELECT * FROM x;
INSERT INTO x (x) VALUES (5) ON CONFLICT(x) DO UPDATE SET x = 8;
SELECT * FROM x;
CREATE TABLE x (x INT, x INT, x INT, PRIMARY KEY (x, x, x));
CREATE INDEX x ON x(x);
INSERT OR replace INTO x VALUES (1, 2, 3);
INSERT OR replace INTO x VALUES (1, 2, 3);
SELECT * FROM x;
CREATE TABLE x (x INT, x INT, x INT, PRIMARY KEY (x, x, x));
INSERT OR replace INTO x VALUES (1, 2, 3);
INSERT OR replace INTO x VALUES (1, 2, 3);
SELECT * FROM x;
CREATE TABLE x (x TEXT PRIMARY KEY, x BIGINT);
INSERT OR replace INTO x (x, x) VALUES ('baz', 1) RETURNING x;
INSERT OR replace INTO x (x, x) VALUES ('baz', 2) RETURNING x;
INSERT OR replace INTO x (x, x) VALUES ('baz', 1), ('bar', 2) RETURNING x;
CREATE SEQUENCE x;
CREATE TABLE x (x INT PRIMARY KEY DEFAULT NEXTVAL('seq'), x TEXT);
CREATE UNIQUE INDEX x ON x(x);
INSERT OR IGNORE INTO x VALUES (DEFAULT, 'toto') RETURNING (x);
INSERT OR IGNORE INTO x VALUES (DEFAULT, 'toto') RETURNING (x);
INSERT OR IGNORE INTO x VALUES (DEFAULT, 'toto'), (DEFAULT, 'yoyo') RETURNING (x);
CREATE TABLE x (x INT, x INT, x INT);
CREATE UNIQUE INDEX "x" ON x(x, x);
CREATE INDEX x ON x(x, x);
INSERT OR replace INTO x VALUES (1, 2, 3);
INSERT OR replace INTO x VALUES (1, 2, 3);
SELECT * FROM x;
CREATE TABLE x (x INT UNIQUE, x INT);
INSERT OR replace INTO x VALUES (1, 2);
INSERT OR replace INTO x VALUES (1, 2);
SELECT * FROM x;
CREATE TABLE x (x INT UNIQUE, x INT UNIQUE, x INT);
INSERT OR replace INTO x VALUES (1, 2, 3);
CREATE TABLE x (x INT UNIQUE, x INT);
CREATE INDEX x ON x(x, x);
INSERT OR replace INTO x VALUES (1, 2);
INSERT OR replace INTO x VALUES (1, 2);
SELECT * FROM x;
CREATE TABLE x (x INT UNIQUE, x INT UNIQUE, x INT);
INSERT OR replace INTO x VALUES (1, 2, 3);
CREATE TABLE x (x INT, x INT, x INT);
CREATE UNIQUE INDEX "x" ON x(x, x);
INSERT OR replace INTO x VALUES (1, 2, 3);
INSERT OR replace INTO x VALUES (1, 2, 3);
SELECT * FROM x;
CREATE UNIQUE INDEX x ON x(x, x);
INSERT OR replace INTO x VALUES (1, 2, 3);
PRAGMA x;
CREATE TABLE x (x INT, x TEXT, x INT, UNIQUE (x, x));
INSERT INTO x VALUES (0, 'Crowberry', 0) ON CONFLICT(x) DO NOTHING;
INSERT INTO x VALUES (0, 'Crowberry', 0) ON CONFLICT(x) DO NOTHING;
INSERT INTO x VALUES (0, 'Crowberry', 0) ON CONFLICT(x, x) DO NOTHING;
INSERT INTO x VALUES (0, 'Crowberry', 0) ON CONFLICT(x, x, x, x) DO NOTHING;
INSERT INTO x VALUES (0, 'Crowberry', 0) ON CONFLICT(x, x) DO UPDATE SET x = 1 WHERE EXISTS(SELECT 1 FROM x AS x WHERE x.x = x.x);
INSERT INTO x VALUES (7, 'Raspberry', 0) ON CONFLICT(x, x) DO UPDATE SET x = 1;
INSERT INTO x VALUES (8, 'Lime', 0) ON CONFLICT(x, x) DO UPDATE SET x = 1;
INSERT INTO x VALUES (9, 'Banana', 0) ON CONFLICT(x) DO UPDATE SET x = 1;
INSERT INTO x VALUES (10, 'Blueberry', 0) ON CONFLICT(x, x, x) DO UPDATE SET x = 1;
INSERT INTO x VALUES (11, 'Cherry', 0) ON CONFLICT(x, x) DO UPDATE SET x = 1;
INSERT INTO x VALUES (12, 'Date', 0) ON CONFLICT(x, x) DO UPDATE SET x = 1;
CREATE UNIQUE INDEX x ON x(x, x) WHERE x < 5;
CREATE UNIQUE INDEX x ON x(x, x) WHERE x < 5;
CREATE UNIQUE INDEX x ON x(x);
INSERT INTO x VALUES (20, 'Quince', 0) ON CONFLICT(x) DO UPDATE SET x = 1;
INSERT INTO x VALUES (21, 'Pomegranate', 0) ON CONFLICT(x, x) DO UPDATE SET x = 1;
CREATE UNIQUE INDEX x ON x(x, x);
CREATE UNIQUE INDEX x ON x(x, x, x);
INSERT INTO x VALUES (24, 'Plum', 0) ON CONFLICT(x, x) DO UPDATE SET x = 1;
INSERT INTO x VALUES (25, 'Peach', 0) ON CONFLICT(x, x) DO UPDATE SET x = 1;
PRAGMA x;
CREATE TABLE x (x INT, x TEXT, x INT, UNIQUE (x), UNIQUE (x));
INSERT INTO x VALUES (25, 'Fig', 0) ON CONFLICT(x) DO UPDATE SET x = 1;
INSERT INTO x VALUES (25, 'Fig', 0) ON CONFLICT(x) DO UPDATE SET x = 1;
INSERT INTO x VALUES (25, 'Fig', 0) ON CONFLICT(x) DO UPDATE SET x = 1;
INSERT INTO x AS x VALUES (23, 'Jackfruit', 0) ON CONFLICT(x) DO UPDATE SET x = 1;
INSERT INTO x AS x VALUES (23, 'Jackfruit', 0) ON CONFLICT(x) DO UPDATE SET x = 1;
INSERT INTO x AS x VALUES (23, 'Jackfruit', 0) ON CONFLICT(x) DO UPDATE SET x = 1;
INSERT INTO x AS x VALUES (23, 'Avocado', 0) ON CONFLICT(x) DO UPDATE SET x = 1;
INSERT INTO x AS x VALUES (23, 'Avocado', 0) ON CONFLICT(x) DO UPDATE SET x = 1;
INSERT INTO x AS x VALUES (23, 'Avocado', 0) ON CONFLICT(x) DO UPDATE SET x = 1;
PRAGMA x;
CREATE TABLE x (x INT, x TEXT, UNIQUE (x));
INSERT INTO x VALUES (0, 'Bilberry') ON CONFLICT(x) DO UPDATE SET x = x.x;
INSERT INTO x VALUES (0, 'Bilberry') ON CONFLICT(x) DO UPDATE SET x = x.x WHERE x.x <> 'Cawesh';
INSERT INTO x VALUES (0, 'Crowberry') ON CONFLICT(x) DO UPDATE SET x = x.x WHERE x.x <> 'Elderberry';
INSERT INTO x VALUES (0, 'Bilberry') ON CONFLICT(x) DO UPDATE SET x = x.x WHERE x.x <> 'Lime' RETURNING *;
INSERT INTO x VALUES (1, 'Apple') ON CONFLICT DO UPDATE SET x = x.x;
INSERT INTO x VALUES (1, 'Apple') ON CONFLICT(x) DO UPDATE SET x = x.x;
INSERT INTO x VALUES (2, 'Orange') ON CONFLICT(x, x, x) DO UPDATE SET x = x.x;
INSERT INTO x VALUES (1, 'Apple'), (2, 'Orange') ON CONFLICT(x) DO UPDATE SET x = x.x, x = x.x;
INSERT INTO x VALUES (1, 'Apple') ON CONFLICT(x) DO UPDATE SET x = x.x RETURNING x.x;
INSERT INTO x VALUES (1, 'Apple') ON CONFLICT(x) DO UPDATE SET x = x.x;
INSERT INTO x VALUES (1, 'Apple') ON CONFLICT(x) DO UPDATE SET x = x.x;
INSERT INTO x VALUES (3, 'Kiwi') ON CONFLICT(x, x) DO UPDATE SET x = x.x;
INSERT INTO x VALUES (4, 'Mango') ON CONFLICT(x, x) DO UPDATE SET x = x.x;
INSERT INTO x VALUES (5, 'Lemon') ON CONFLICT(x) DO UPDATE SET x = x.x;
INSERT INTO x VALUES (6, 'Passionfruit') ON CONFLICT(x) DO UPDATE SET x = x.x;
INSERT INTO x AS x VALUES (6, 'Passionfruit') ON CONFLICT(x) DO UPDATE SET x = x.x;
INSERT INTO x AS x VALUES (6, 'Passionfruit') ON CONFLICT(x) DO UPDATE SET x = x.x;
INSERT INTO x AS x VALUES (6, 'Passionfruit') ON CONFLICT(x) DO UPDATE SET x = x.x;
ANALYZE;
ANALYZE x;
CREATE TABLE x (x INT, x INT);
ANALYZE x;
CREATE VIEW x AS SELECT * FROM x;
ANALYZE x;
INSERT INTO x SELECT x % 5000, x % 5000 FROM x;
SELECT STATS(x) FROM x LIMIT 1;
SELECT STATS(x) FROM x LIMIT 1;
PRAGMA x;
ANALYZE x;
PRAGMA x;
SELECT STATS(x) FROM x LIMIT 1;
SELECT STATS(x) FROM x LIMIT 1;
PRAGMA x;
ANALYZE x;
PRAGMA x;
SELECT STATS(x) FROM x LIMIT 1;
SELECT STATS(x) FROM x LIMIT 1;
CREATE TABLE x (x INT[], x AS (x || [100]));
ANALYZE x;
PRAGMA x;
SELECT GETVARIABLE('animal');
SELECT _('animal');
SELECT GETVARIABLE('animal');
SELECT * FROM x;
SELECT GETVARIABLE('animal');
CREATE TABLE x (x TEXT);
INSERT INTO x VALUES ('duck'), ('goose');
SELECT GETVARIABLE('animals');
SELECT GETVARIABLE('xxx');
PRAGMA x;
CREATE TABLE x (x TEXT, x BIGINT, x INT, x DATE);
INSERT INTO x VALUES ('develop', 10, 5200, '2007-08-01'), ('sales', 1, 5000, '2006-10-01'), ('personnel', 5, 3500, '2007-12-10'), ('sales', 4, 4800, '2007-08-08'), ('personnel', 2, 3900, '2006-12-23'), ('develop', 7, 4200, '2008-01-01'), ('develop', 9, 4500, '2008-01-01'), ('sales', 3, 4800, '2007-08-01'), ('develop', 8, 6000, '2006-10-01'), ('develop', 11, 5200, '2007-08-15');
SELECT x, x, x, SUM(x) OVER (PARTITION BY x ORDER BY x) FROM x ORDER BY x, x;
SELECT SUM(x) OVER (PARTITION BY x ORDER BY x) AS x FROM x ORDER BY x, x;
SELECT ROW_NUMBER() OVER (PARTITION BY x ORDER BY x) AS x FROM x ORDER BY x, x;
SELECT x, FIRST_VALUE(x) OVER (PARTITION BY x ORDER BY x) AS x FROM x ORDER BY 2 DESC, 1 ASC;
SELECT x, x, LAST_VALUE(x) OVER (PARTITION BY x ORDER BY x ASC ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) AS x FROM x ORDER BY 1, 2;
SELECT x, x, DENSE_RANK() OVER (PARTITION BY x ORDER BY x) FROM x ORDER BY x, x;
SELECT x, x, RANK() OVER (PARTITION BY x ORDER BY x) FROM x ORDER BY x, x;
SELECT x, MIN(x) OVER (PARTITION BY x ORDER BY x, x) AS x, MAX(x) OVER (PARTITION BY x ORDER BY x, x) AS x, AVG(x) OVER (PARTITION BY x ORDER BY x, x) AS x FROM x ORDER BY x, x;
SELECT x, STDDEV_POP(x) OVER (PARTITION BY x ORDER BY x, x) AS x FROM x ORDER BY x, x;
SELECT x, COVAR_POP(x, x) OVER (PARTITION BY x ORDER BY x, x) AS x FROM x ORDER BY x, x;
PRAGMA x;
CREATE TABLE x (x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x TEXT, x TEXT, x TEXT);
INSERT INTO x VALUES (4, 1621, 0, 0, 4, 4, 4, 4, 4, 4, 4, 8, 9, 'EAAAAA', 'JKCAAA', 'HHHHxx'), (2, 2716, 0, 2, 2, 2, 2, 2, 2, 2, 2, 4, 5, 'CAAAAA', 'MAEAAA', 'AAAAxx'), (1, 2838, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 'BAAAAA', 'EFEAAA', 'OOOOxx'), (6, 2855, 0, 2, 6, 6, 6, 6, 6, 6, 6, 12, 13, 'GAAAAA', 'VFEAAA', 'VVVVxx'), (9, 4463, 1, 1, 9, 9, 9, 9, 9, 9, 9, 18, 19, 'JAAAAA', 'RPGAAA', 'VVVVxx'), (8, 5435, 0, 0, 8, 8, 8, 8, 8, 8, 8, 16, 17, 'IAAAAA', 'BBIAAA', 'VVVVxx'), (5, 5557, 1, 1, 5, 5, 5, 5, 5, 5, 5, 10, 11, 'FAAAAA', 'TFIAAA', 'HHHHxx'), (3, 5679, 1, 3, 3, 3, 3, 3, 3, 3, 3, 6, 7, 'DAAAAA', 'LKIAAA', 'VVVVxx'), (7, 8518, 1, 3, 7, 7, 7, 7, 7, 7, 7, 14, 15, 'HAAAAA', 'QPMAAA', 'OOOOxx'), (0, 9998, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 'AAAAAA', 'OUOAAA', 'OOOOxx');
SELECT SUM(x) OVER (ORDER BY x rows BETWEEN 2 preceding AND 2 following) AS x FROM x ORDER BY x;
SELECT SUM(x) OVER (ORDER BY x rows BETWEEN 2 preceding AND 1 preceding) AS x FROM x ORDER BY x;
SELECT SUM(x) OVER (ORDER BY x rows BETWEEN 1 following AND 3 following) AS x FROM x ORDER BY x;
SELECT SUM(x) OVER (ORDER BY x rows BETWEEN UNBOUNDED preceding AND 1 following) AS x FROM x ORDER BY x;
SELECT SUM(x) OVER (ORDER BY x rows BETWEEN 5 following AND 10 following) AS x FROM x ORDER BY x;
CREATE TABLE x (x REAL, x DATE, x REAL);
INSERT INTO x VALUES (10000.0, CAST('1986-02-28' AS DATE), -0.2571428716182709), (10000.0, CAST('1986-03-31' AS DATE), 0.36538460850715637), (10000.0, CAST('1986-04-30' AS DATE), -0.09859155118465424), (10000.0, CAST('1986-05-30' AS DATE), -0.22265625), (10000.0, CAST('1986-06-30' AS DATE), -0.005025125574320555);
SELECT x, SUM(LOG(x + 1)) OVER (PARTITION BY x ORDER BY x rows BETWEEN 12 preceding AND 2 preceding), x FROM x ORDER BY x, x;
CREATE TABLE x AS SELECT x % 100 AS x, x FROM (SELECT x FROM x AS x) AS x;
SELECT x, x, x, MODE(x ORDER BY x DESC) OVER x AS x FROM x WINDOW x AS (PARTITION BY x) ORDER BY ALL LIMIT 10;
PRAGMA x;
SELECT x, (x * 29) % 11 AS x, x // 2 AS x, CUME_DIST( ORDER BY x DESC) OVER x FROM x AS x WINDOW x AS (ORDER BY x) ORDER BY x DESC, x;
SELECT x, x // 2 AS x, CUME_DIST( ORDER BY x // 2) OVER x AS x FROM x AS x WINDOW x AS (ORDER BY x // 2 ROWS BETWEEN 3 PRECEDING AND 3 FOLLOWING) ORDER BY 1;
PRAGMA x = '__TEST_DIR__/window_spooling';
PRAGMA x = '50MB';
PRAGMA x = 4;
PRAGMA x;
SELECT SUM(x), SUM(x), SUM(x), ROUND(SUM(x), -4) FROM (SELECT SUM(x) OVER x AS x, QUANTILE(x, 0.5) OVER x AS x, MAD(x) OVER x AS x, MODE(x) OVER x AS x FROM x WINDOW x AS (PARTITION BY x ORDER BY x, x, x ROWS BETWEEN 20 PRECEDING AND 20 FOLLOWING)) AS x;
PRAGMA x;
WITH x AS (SELECT x, DENSE_RANK() OVER (ORDER BY x % 50) AS x FROM x AS x), x AS (SELECT x, COUNT(*) AS x FROM x GROUP BY ALL) SELECT COUNT(*), MIN(x), MAX(x), MIN(x), MAX(x) FROM x;
WITH x AS (SELECT x, DENSE_RANK() OVER (PARTITION BY x // 3000 ORDER BY x % 50) AS x FROM x AS x), x AS (SELECT x, COUNT(*) AS x FROM x GROUP BY ALL) SELECT COUNT(*), MIN(x), MAX(x), MIN(x), MAX(x) FROM x;
CREATE TABLE x (x TEXT, x TEXT, x TEXT, x TEXT, x TEXT);
INSERT INTO x VALUES ('197bc9528efbc76a523d796b749a69f6', 'json', '0bf0b46fb9c01829c55e', 'e4de2878', NULL), ('0f62e5fa923495012f3863e7ea05f566', 'json', 'd98171d6fe06b3', '440ce2bf', '9fc93ee404d6bccb69'), ('9b15a709814582ecbec00d8397852865', 'json', '24ed1657', 'c3d1f46c', '06c234e260a7484'), ('8569d67b0ccbbf316b360be3bb4fe418', 'json', 'd98171d6fe06b3', '14875a37', '3416100f300c7bd'), ('d2f02b24d59696079e3d649b403fbb22', 'json', '82e092e750a', 'e7deeb7f', '6d8dded6f044'), ('60a2b8898440b2f4531268e27b7d3495', 'json', 'f657d34b6', '46afa8e7', '7bb186ce013b'), ('5aa1982136f3991ad5ed537793d40a0f', 'json', 'd58e2b351518', 'a98b2b0c', 'ac594941b5d9'), ('cc70cc91af828c833b5bf20785b91918', 'json', '4953ff4b', '8450467c', 'd1509d0abde0'), ('7cf99d6372183aab6a9a22205e1b0e96', 'json', '14b5b262c52400', 'e7deeb7f', '6d8dded6f044'), ('3cf6f7ec6609c6456f6587c441310ace', 'json', '0c155a1ba5', 'e984dd5b', 'd374014b756d'), ('e1223eb2cc51161d32495ff0ad8b34ae', 'json', 'f05964c5c4', '4f3354c3', '10eebe991cf9'), ('7b8b64bac7c7dc692d1fe76f6eeff2bb', 'json', '6bd9ce7f1d8', '492f260c', '314d3e061be7'), ('7b8b64bac7c7dc692d1fe76f6eeff2bb', 'json', '249f40c5d97', '492f260c', '314d3e061be7'), ('cd29186ef73b658079d848fca1ebe839', 'json', '6bd9ce7f1d8', '492f260c', '314d3e061be7'), ('d67a74eb29392e06b97161d9f3121705', 'json', '0bf0b46fb9c01829c55e', '2d28e9ee', '0deb6a6b189d309'), ('9dcc686429408e3319161c39b008f705', 'json', '24ed1657', '8450467c', 'd1509d0abde0'), ('11788bb5a0477c1bfb31a9f33af80c40', 'json', '4ea4e97b39c4b', '4f3354c3', '10eebe991cf9'), ('59bceab687b4004dbeed6291f07af37d', 'json', '6d00cb7409', '4f3354c3', '10eebe991cf9'), ('76b23210847e653b6060104da0e86d5b', 'json', '24ed1657', '22f4528f', '7632cf8f4849404'), ('2605143ff05ae1ce66b1cc70f80fe53d', 'json', '249f40c5d97', 'b93c50ce', 'be70d8b88fff'), ('1a1864b5f4ed27acfbbf6e5069348a5a', 'json', '6bd9ce7f1d8', '6c082f61', 'ee109745d498'), ('92200c3306e18e53a41550c6306a3ee4', 'json', '8271fea91bc236c', 'd6f24fd5', NULL), ('dd39e08b282cf4a6429bcfefaa2af071', 'json', '249f40c5d97', '1396d8b6', '3826343264acc9'), ('3afcae2318313f112b62536fa160678d', 'json', '24ed1657', '5311f290', '129c0a0fd3e82a8'), ('3afcae2318313f112b62536fa160678d', 'json', '24ed1657', '08b8de7c543d', '129c0a0fd3e82a8'), ('3afcae2318313f112b62536fa160678d', 'json', '24ed1657', 'ce001fa3a2a4', '129c0a0fd3e82a8'), ('79acd6669071e95a5b2fe5456216ab32', 'json', '24ed1657', '5311f290', '129c0a0fd3e82a8'), ('79acd6669071e95a5b2fe5456216ab32', 'json', '24ed1657', '08b8de7c543d', '129c0a0fd3e82a8'), ('79acd6669071e95a5b2fe5456216ab32', 'json', '24ed1657', 'ce001fa3a2a4', '129c0a0fd3e82a8'), ('d0a7e9d3eda115120021a895a81db8be', 'json', '24ed1657', '5311f290', '129c0a0fd3e82a8'), ('d0a7e9d3eda115120021a895a81db8be', 'json', '24ed1657', '08b8de7c543d', '129c0a0fd3e82a8'), ('d0a7e9d3eda115120021a895a81db8be', 'json', '24ed1657', 'ce001fa3a2a4', '129c0a0fd3e82a8'), ('a59a3a4ad8d2ab867c9b830974588645', 'json', '24ed1657', '5311f290', '129c0a0fd3e82a8'), ('a59a3a4ad8d2ab867c9b830974588645', 'json', '24ed1657', '08b8de7c543d', '129c0a0fd3e82a8'), ('a59a3a4ad8d2ab867c9b830974588645', 'json', '24ed1657', 'ce001fa3a2a4', '129c0a0fd3e82a8'), ('6193ffd18b0da96e80e2a38baac9a7e4', 'json', '14b5b262c52400', '3c03d64c34', '1b5cfdd6a5de'), ('6193ffd18b0da96e80e2a38baac9a7e4', 'rprt', '1a5cf3833', NULL, '1b5cfdd6a5de'), ('ecf1739fed72151784dab88dbe2f2aa9', 'json', '14b5b262c52400', '3c03d64c34', '1b5cfdd6a5de'), ('ecf1739fed72151784dab88dbe2f2aa9', 'rprt', '1a5cf3833', NULL, '1b5cfdd6a5de'), ('204cd9b011e2cab64bcdf1b3d668a9ef', 'json', '7d9a79908fcc', '8274fbb94a', '5a928f187ed19b2'), ('c8360bd0e28ea5bbffd66e76886bbccb', 'json', 'd6b3921920', 'a63d8', '0e06e1f9f6580fb'), ('c8360bd0e28ea5bbffd66e76886bbccb', 'rprt', 'd6b3921920', NULL, '0e06e1f9f6580fb'), ('c6eb00fb5a023557439a9b898c7cc3ea', 'json', 'd6b3921920', 'a63d8', 'f891b965f2561d9'), ('c6eb00fb5a023557439a9b898c7cc3ea', 'rprt', 'd6b3921920', NULL, 'f891b965f2561d9'), ('f2dacff642ad3f805229d7e976810f1d', 'rprt', 'd6b3921920', NULL, '6817ec9d3b7b726'), ('8def2cd0450b56c3e0c9bb6da67b842b', 'rprt', 'd6b3921920', NULL, '6817ec9d3b7b726'), ('6db7ef8b4a9e41bb41971dced546131b', 'rprt', 'd6b3921920', NULL, 'bc32d9059dde8ba'), ('4524efca2bf1aa0565f03a9aaf9771d2', 'json', '14b5b262c52400', 'cf3b1945e2', '5c0157ef5367'), ('6f63a84401944c32b9a329af08d6473c', 'json', '8b736466c7adc6', 'd0acb13cd9', 'd734a9d755ef6276'), ('8ef4bc6ac39585b2ec45218ad1d06464', 'rprt', '67b7fd541ae7e', 'c117f7db3b', 'cf94993616ef'), ('01899ea72c60bd5e614132c99fffd48e', 'json', '14b5b262c52400', '2a50feb98b', 'eead79cf6ef0'), ('b1407bdda20fad91cb9072c08c5c23a8', 'json', '3608008ba4c9', 'e4840a8e75', '139e04ae890beb8'), ('2091d4939af33d3911b057ed446367f1', 'rprt', '6522e2c00f5b87d5b', 'f2b8d4d02d', '23de2ff19778'), ('81f36975a777a353b0861874e03d0f95', 'rprt', '14b5b262c52400', 'e05f1a1ec2', 'acf577df3840'), ('5b3961bf4255e83ee1e7e795e14c8119', 'rprt', 'b9cbf09f3366297', '1109e52066', '47afce7dacb5'), ('0b53312f91b22db1bf7c18251a199d36', 'json', '14b5b262c52400', 'c8561fe22f', '6e30638eaaf6'), ('e277322f26cd477bae52240c46678286', 'json', '14b5b262c52400', 'd185c22b68', '42a062d827c'), ('71150d87b4e7852448a524e03817efc4', 'json', 'bb87c32c765d1', '3e60145162', '8e072527a7cf82d'), ('1039fc7de3c12dad1e7d3bd9e73827de', 'json', 'd6b3921920', '65c0a3e2a9', '9ff56f55c850390'), ('3c67c976516f8a5a1044ad9a8935cf02', 'rprt', 'bdc5a7fd6ca', 'dfc9fd824b', 'bfbef96674e73829'), ('56ab3e25a40913b6e961cff217a83750', 'json', '24ed1657', '724e7df1', 'fc81c8a39465'), ('5f726fff8b638d0ac1ba9dcb9a4037be', 'json', '14b5b262c52400', 'b1bddeb160', '1e2b4afd36f'), ('4448f84ff7496b6d1a0d311838be238d', 'json', '14b5b262c52400', '50a45c4db0', '83ef23a7f827'), ('216414a29307f00aecfc9e5cba7ac821', 'json', 'c05bced980e6381', '949ae57ce4', '05f77bf546f'), ('5327f9ec2dc334bde0222b52de4d65ef', 'json', '67b7fd541ae7e', '8aea85ada0', 'c0048c2b539e'), ('d3c9b836ce61a53daf39d813c97a36b9', 'json', '249f40c5d97', '35d05d68', 'db4853c8a41'), ('6d4affc7041c65d0f56551f4d4370a7d', 'rprt', 'd6b3921920', NULL, '84624aa9753a681'), ('caab5b21770a321067fb2052c2eea792', 'rprt', '14b5b262c52400', '8b8da80085', 'd427763bd611'), ('eecdf1e7e87c04c56328b0d37fb06349', 'json', '14b5b262c52400', '3bfabeb9d9', '7c613b2d73cc'), ('b533aa0c674433a09cee8555b35b7ca6', 'json', '9c3b3335f959', 'f9d8c52aa2', 'd082926c94a8a60'), ('6dfe749835d6a895a3a116580dc4217a', 'rprt', '14b5b262c52400', '6dd9b2d650', 'b3d88f29e3e5'), ('6150133032c53a35ce28c6308931137d', 'rprt', 'b04a2a75f0c4a9', '9f3026e2', 'a1bcb7232a50'), ('47e77fd2d027114df5ac9daa17237934', 'json', 'b04a2a75f0c4a9', '6e07291b', '564347d748e0'), ('0d66c06fd2a29247b4bc798591f15cbc', 'rprt', '093a316f6c9c0856b', 'ebcca53e20', '4c767b833785b25b072e'), ('997371252646aed7ac3fa43da1f69ef2', 'rprt', 'd6b3921920', '5be2b052', '612fc8691ec7852'), ('e963d96d34e35ba06cea05ff78e84e41', 'json', '33debfe262d7', '114a0c85', 'f6d1ea3976b0a03'), ('f50959f1079cd24b7dcb6370d8e63344', 'rprt', '1a5cf3833', NULL, 'a1b77be48d05'), ('4e44d4c96d3d26290d13e5f9bc14d8dd', 'rprt', '67b7fd541ae7e', 'c117f7db3b', '18d653ec3c0'), ('797c887ce1edab55fefaa7a690065843', 'rprt', '14b5b262c52400', '22efccc05e', '7a9348e1538f'), ('ffbc9337bb6f6c7d43ab32a9398474da', 'rprt', 'b04a2a75f0c4a9', '6e07291b', '564347d748e0'), ('3ac840afe9d088e5c490ed4cd48d2269', 'json', '67b7fd541ae7e', 'ffaa35275c', 'c58867f82d10'), ('72cedda51ecfb6678f4e3a3956066311', 'json', '402423768220bca1f', '9a28c664', 'eed0f9697609'), ('92488464899a3b31ea1bc61a2ebc2013', 'json', '14b5b262c52400', '1a10cdadd7', 'ee4cacc7ce10'), ('c85e95cfec9f42fff138d498101cd7ea', 'json', '14b5b262c52400', 'f1b4cf931e', '3b4f71a3ddde'), ('399edac903f69ac760fa36a8b68cdfb0', 'rprt', '67b7fd541ae7e', 'a539fb31c3', '4c920da298bd'), ('a223c0e6017570f5a1039003e767e692', 'json', '67b7fd541ae7e', '7bfb6b3721', '5ae5c617d126'), ('1503860c3c6391385807ab9b6cdd1934', 'json', '67b7fd541ae7e', '4936ad40b0', '94fbcb7cd167'), ('6f269d7f6cf850a9cd0d4d804eef24a0', 'rprt', '14b5b262c52400', '943c04e54b', 'cc79fc503d80'), ('732a12aa44489aeef05b614a1e8dbd2d', 'rprt', '14b5b262c52400', 'a2335b4159', '45e7e30aa621'), ('b876617f4b7bdb3abc694da31b09d838', 'rprt', '14b5b262c52400', '93a91bf863', 'b824ed7a5f67'), ('fd63b4bf7ee546b2c0c55200ae968872', 'rprt', '67b7fd541ae7e', '62cd05887b', '9c1940a4032a'), ('50a00a903778fb65ef92a736bd9fe262', 'json', '67b7fd541ae7e', '7e81c8b2f3', '00eb98252668113'), ('053891bc9d52d48986302c5e13adf276', 'json', '67b7fd541ae7e', 'a1762f3d79', 'e06b767a6ed2'), ('f537b4d753bb441436ff8d73af423691', 'json', 'efdfcef7da0', '98c6db64', '4c9b34c566ae'), ('8dc4f5e5bb2663f09218b369be5bf524', 'rprt', '03b000865c98e', 'f31af55c63', 'a02983ae108ced0449cb4'), ('d69d899aba162c4f14593f9c6a062bdd', 'rprt', '67b7fd541ae7e', '7bfb6b3721', 'c32aa62b7207'), ('88b784ce065a5cf2360e7616c4b3f7f6', 'json', '62769691cd4e', 'ebdf919e', '37e16f2e5319832f'), ('cdda71f56ad05dae20b1e22ee19b227b', 'rprt', '67b7fd541ae7e', '17d7c8f29a', '21c1f8fadde3'), ('5e1d22685085f0d85553eb2b7b4155a6', 'rprt', '14b5b262c52400', '737542af23', '092dcc6fdef7'), ('7f387dad4f9bef7c2301977590cec0f2', 'json', '67b7fd541ae7e', '09591aea45', 'ab584388528d'), ('a83145a960baebcf1bff9c462f8489e5', 'json', '14b5b262c52400', '2ea6e3e6fb', '4fe26b0e2203'), ('4d7a36c58267592481297676d57c9e84', 'json', '581d813a840d3d6391', '54239e1a8e', '232d99055474'), ('31f0b71e67e64d42079098a53374e094', 'json', '14b5b262c52400', 'a43ad72889', '7d702f310fbe'), ('6ddc75b9771136d9a6366aaa5d951f1a', 'rprt', '14b5b262c52400', '75263a6f0c', '7309f2e8695a'), ('4595e59a1225042680842f63736481d4', 'json', '14b5b262c52400', '44f5fdb8b1', '9c2c14ec6924'), ('66c1f24117ee34a1b3d587a22047fad1', 'rprt', '14b5b262c52400', 'bfe39ca56f', 'b49aa5fad4d5'), ('37027bc152a681b87d5ffb9a37c325a5', 'rprt', 'efdfcef7da0', '9f1668a8', '682ff39acb86'), ('c3b46edd87eb14842b6444c001ae6456', 'json', '3608008ba4c9', 'f650844d13', '5326d2a94e28825'), ('82beaa8e1c8c482d792f601b37a40b8a', 'rprt', '14b5b262c52400', 'c86e0093c2', '5ae33221b17'), ('333aa3a45ab3f01ad95b2a312870aa1e', 'json', '14b5b262c52400', '57f7ec0030', '8545146eeba5'), ('16b64ffcb514bf69c6936eaf4e86889e', 'rprt', '14b5b262c52400', '2a50feb98b', '64bb80701037'), ('01d42ee5515c3b500018e723278e27c1', 'json', '67b7fd541ae7e', '958967a48a', '97453818ba51'), ('2a031d3176c7d4f19c532e5d2e7b411e', 'rprt', '14b5b262c52400', '164c3bb214', '3389fe2776be'), ('8d3b5d415e43df82b6b560effeb6ee80', 'json', '67b7fd541ae7e', '9205577d7c', 'bc96b93082c6'), ('339690825234f32fd7da02fd567d5109', 'rprt', 'b04a2a75f0c4a9', '9f3026e2', 'a1bcb7232a50'), ('13c6d4555db02b653d8f2b5ce06bb143', 'json', '402423768220bca1f', '49d58dba', '59b0906f7fcb'), ('39a39a7e3c48c1b3b262e8653b1a3ec4', 'rprt', '14b5b262c52400', '7b34590a85', 'eec88226d871'), ('fdd9d71a087b9048b8ac7dd29186cedf', 'rprt', '315316c7af745a97', '8a7c0917d4', '743680a0303171bbd'), ('f37e684c9ec0d0690a3c6feeaf6b1301', 'json', '14b5b262c52400', '0059c84703', '8426f8984729'), ('3787d0c9ead3866324d7586044747d65', 'rprt', 'b9cbf09f3366297', '3822b4212e', '611f4b0f498e');
WITH x AS (SELECT ROW_NUMBER() OVER x AS x, COUNT(*) OVER x AS x, (DENSE_RANK() OVER x) + (DENSE_RANK() OVER x) - 1 AS x, * FROM x WINDOW x AS (PARTITION BY x ORDER BY x, x, x ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING), x AS (PARTITION BY x ORDER BY x ASC NULLS FIRST ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING), x AS (PARTITION BY x ORDER BY x DESC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)) SELECT * FROM x WHERE x > 1 ORDER BY x, x;
PRAGMA x;
CREATE TABLE x (x INT, x TEXT);
INSERT INTO x VALUES (1, 'A');
INSERT INTO x VALUES (2, 'B');
INSERT INTO x VALUES (2, 'B');
INSERT INTO x VALUES (2, 'B');
INSERT INTO x VALUES (2, 'B');
INSERT INTO x VALUES (2, 'B');
INSERT INTO x VALUES (2, 'B');
INSERT INTO x VALUES (2, 'B');
INSERT INTO x VALUES (2, 'B');
INSERT INTO x VALUES (2, 'B');
INSERT INTO x VALUES (2, 'B');
INSERT INTO x VALUES (2, 'B');
SELECT x, GROUP_CONCAT(x, ' ') OVER (PARTITION BY x ORDER BY x ROWS BETWEEN 1 FOLLOWING AND 2 FOLLOWING) FROM x ORDER BY 1;
SELECT x, BITSTRING_AGG(x, 1, 3) OVER (PARTITION BY x ORDER BY x ROWS BETWEEN 1 FOLLOWING AND 2 FOLLOWING) FROM x ORDER BY 1;
PRAGMA x;
SELECT * FROM (SELECT LAG(x, -1) OVER () AS x, LEAD(x, 1) OVER () AS x FROM x AS x) AS x WHERE x <> x;
CREATE TABLE x (x TEXT, x BIGINT, x INT, x DATE);
INSERT INTO x VALUES ('develop', 10, 5200, '2007-08-01'), ('sales', 1, 5000, '2006-10-01'), ('personnel', 5, 3500, '2007-12-10'), ('sales', 4, 4800, '2007-08-08'), ('personnel', 2, 3900, '2006-12-23'), ('develop', 7, 4200, '2008-01-01'), ('develop', 9, 4500, '2008-01-01'), ('sales', 3, 4800, '2007-08-01'), ('develop', 8, 6000, '2006-10-01'), ('develop', 11, 5200, '2007-08-15');
SELECT x, SUM(SUM(x)) OVER (PARTITION BY x ORDER BY x) FROM x GROUP BY x, x ORDER BY x, x;
SELECT x, SUM(x * 2) OVER (PARTITION BY x ORDER BY x) FROM x ORDER BY x, x;
SELECT x, 2 * SUM(x) OVER (PARTITION BY x ORDER BY x) FROM x ORDER BY x, x;
SELECT x, SUM(x) * 100.0000 / SUM(SUM(x)) OVER (PARTITION BY x ORDER BY x) AS x FROM x GROUP BY x, x ORDER BY x, x;
PRAGMA x;
CREATE TABLE x AS SELECT * FROM (VALUES (0, 1, 614), (1, 1, NULL), (2, 1, NULL), (3, 1, 639), (4, 1, 2027)) AS x;
SELECT x, x, x, LAST_VALUE(x IGNORE NULLS) OVER (PARTITION BY x ORDER BY x ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING) AS x FROM x ORDER BY ALL;
SELECT x, x, x, FIRST_VALUE(x IGNORE NULLS) OVER (PARTITION BY x ORDER BY x ROWS BETWEEN 1 PRECEDING AND UNBOUNDED FOLLOWING) AS x FROM x ORDER BY ALL;
SELECT x, x, x, NTH_VALUE(x, 2 IGNORE NULLS) OVER (PARTITION BY x ORDER BY x ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING) AS x FROM x ORDER BY ALL;
SELECT x, x, x, LEAD(x, 1, -1 IGNORE NULLS) OVER (PARTITION BY x ORDER BY x) AS x FROM x ORDER BY ALL;
SELECT x, x, x, LAG(x, 1, -1 IGNORE NULLS) OVER (PARTITION BY x ORDER BY x) AS x FROM x ORDER BY ALL;
SELECT x, x, x, LAG(x, 0, -1 IGNORE NULLS) OVER (PARTITION BY x ORDER BY x) AS x FROM x ORDER BY ALL;
SELECT x, x, x, LAST_VALUE(x RESPECT NULLS) OVER (PARTITION BY x ORDER BY x ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING) AS x FROM x ORDER BY ALL;
SELECT x, x, x, FIRST_VALUE(x RESPECT NULLS) OVER (PARTITION BY x ORDER BY x ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING) AS x FROM x ORDER BY ALL;
SELECT x, x, x, NTH_VALUE(x, 2 RESPECT NULLS) OVER (PARTITION BY x ORDER BY x ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING) AS x FROM x ORDER BY ALL;
SELECT x, x, x, LEAD(x, 1, -1 RESPECT NULLS) OVER (PARTITION BY x ORDER BY x) AS x FROM x ORDER BY ALL;
SELECT x, x, x, LAG(x, 1, -1 RESPECT NULLS) OVER (PARTITION BY x ORDER BY x) AS x FROM x ORDER BY ALL;
SELECT x, x, x, LAG(x, 0, -1 RESPECT NULLS) OVER (PARTITION BY x ORDER BY x) AS x FROM x ORDER BY ALL;
CREATE TABLE IF NOT EXISTS x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (2, 2), (3, NULL), (4, NULL), (5, 5), (6, NULL), (7, NULL);
SELECT *, FIRST(x) OVER x, LAST(x) OVER x, NTH_VALUE(x, 1 IGNORE NULLS) OVER x FROM x WINDOW x AS (ORDER BY x ROWS BETWEEN 1 FOLLOWING AND UNBOUNDED FOLLOWING);
WITH x AS (SELECT *, ((x * 1327) % 9973) / 10000.0 AS x FROM x AS x), x AS (SELECT x, x, CASE WHEN x <= 0.1 THEN 'shallow' WHEN x >= 0.9 THEN 'high' END AS x FROM x) SELECT *, LAST_VALUE(x IGNORE NULLS) OVER (ORDER BY x) AS x FROM x ORDER BY x;
SELECT x, LEAD(x) OVER (ORDER BY x), LEAD(x IGNORE NULLS) OVER (ORDER BY x) FROM (VALUES (1, 1), (2, NULL), (3, 2), (4, NULL), (5, 3), (6, NULL)) AS x;
SELECT x, LEAD(x) OVER (ORDER BY x), LEAD(x IGNORE NULLS) OVER (ORDER BY x) FROM (VALUES (1, 1), (2, NULL), (3, 2), (4, NULL), (5, 3), (6, NULL)) AS x;
SELECT x, LEAD(x) OVER (ORDER BY x), LEAD(x IGNORE NULLS) OVER (ORDER BY x) FROM (VALUES (1, 1), (2, NULL), (3, 2), (4, NULL), (5, 3), (6, NULL)) AS x;
SELECT x, LEAD(x) OVER (ORDER BY x), LEAD(x IGNORE NULLS) OVER (ORDER BY x) FROM (VALUES (1, 1), (2, NULL), (3, 2), (4, NULL), (5, 3), (6, NULL)) AS x;
PRAGMA x;
CREATE TABLE x (x TEXT, x BIGINT, x INT, x DATE);
INSERT INTO x VALUES ('develop', 10, 5200, '2007-08-01'), ('sales', 1, 5000, '2006-10-01'), ('personnel', 5, 3500, '2007-12-10'), ('sales', 4, 4800, '2007-08-08'), ('personnel', 2, 3900, '2006-12-23'), ('develop', 7, 4200, '2008-01-01'), ('develop', 9, 4500, '2008-01-01'), ('sales', 3, 4800, '2007-08-01'), ('develop', 8, 6000, '2006-10-01'), ('develop', 11, 5200, '2007-08-15');
SELECT x, MIN(x) OVER (PARTITION BY x ORDER BY x, x) AS x FROM x GROUP BY x ORDER BY x, x;
SELECT x, MIN(x) OVER (PARTITION BY x ORDER BY x, x) AS x FROM x GROUP BY x ORDER BY x, x;
SELECT x, MIN(x) OVER (PARTITION BY x ORDER BY x, x) AS x FROM x GROUP BY x ORDER BY x, x;
SELECT LIST(x ORDER BY x) OVER (PARTITION BY x) FROM x ORDER BY ALL DESC;
SELECT LIST(x ORDER BY x) OVER (PARTITION BY x) FROM x ORDER BY ALL DESC;
SELECT LIST(x ORDER BY x) OVER (PARTITION BY x) FROM x ORDER BY ALL DESC;
SELECT LIST(x ORDER BY x) OVER (PARTITION BY x) FROM x ORDER BY ALL DESC;
SELECT LIST(x ORDER BY x) OVER (PARTITION BY x) FROM x ORDER BY ALL DESC;
SELECT LIST(x ORDER BY x) OVER (PARTITION BY x) FROM x ORDER BY ALL DESC;
SELECT LIST(x ORDER BY x) OVER (PARTITION BY x) FROM x ORDER BY ALL DESC;
PRAGMA x;
SELECT x, (x * 29) % 11 AS x, x // 2 AS x, LEAD(x ORDER BY x DESC, x) OVER x, LAG(x ORDER BY x DESC, x) OVER x FROM x AS x WINDOW x AS (ORDER BY x) ORDER BY x DESC, x;
SELECT x, LEAD(x, 2) OVER (ORDER BY x rows BETWEEN 2 preceding AND 4 preceding) AS x FROM (VALUES (1, 2), (2, 3), (3, 4), (4, 5)) AS x;
CREATE TABLE x (x INT, x INT, x INT, x REAL, x TEXT);
INSERT INTO x VALUES (1, 1, 2, 0.54, 'h'), (1, 1, 1, 0.21, 'e'), (1, 2, 3, 0.001, 'l'), (2, 10, 4, 0.04, 'l'), (2, 11, -1, 10.45, 'o'), (3, -1, 0, 13.32, ','), (3, 5, -2, 9.87, 'wor'), (3, NULL, 10, 6.56, 'ld');
SELECT x, x, x, LAG(x, 2, NULL) OVER (PARTITION BY x ORDER BY x ASC) FROM x ORDER BY x, x;
CREATE TABLE x (x DATE, "x" INT, x INT, x TEXT);
INSERT INTO x VALUES ('2024-01-01', 1, 1000, 'ordered'), ('2024-02-01', 1, 1000, 'dispatched'), ('2024-03-01', 1, 1000, 'dispatched'), ('2024-01-01', 2, 2000, 'ordered'), ('2024-02-01', 2, 2000, 'ordered'), ('2024-03-01', 2, 2000, 'ordered'), ('2024-01-01', 3, 3000, 'ordered'), ('2024-02-01', 3, 3000, 'ordered'), ('2024-03-01', 3, 3000, 'late'), ('2024-01-01', 4, 4000, 'ordered'), ('2024-02-01', 4, 4000, 'ordered'), ('2024-03-01', 4, 4000, 'ordered'), ('2024-01-01', 5, 5000, 'ordered'), ('2024-02-01', 5, 5000, 'late'), ('2024-03-01', 5, 5000, 'ordered'), ('2024-01-01', 6, 1000, 'dispatched'), ('2024-02-01', 6, 1000, 'dispatched'), ('2024-03-01', 6, 1000, 'dispatched'), ('2024-01-01', 7, 1000, 'late'), ('2024-02-01', 7, 1000, 'dispatched'), ('2024-03-01', 7, 1000, 'dispatched');
SELECT "x"."x", "x"."x", "x"."x", "x"."x", LEAD("x"."x", 2) OVER (PARTITION BY "x"."x" ORDER BY "x"."x" ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS "x", LEAD("x"."x", 2) OVER (PARTITION BY "x"."x" ORDER BY "x"."x" ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS "x" FROM x AS "x" ORDER BY 2, 1;
SET x = 'nulls_first';
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 1), (2, 1), (3, 2), (NULL, 3), (42, 3);
CREATE VIEW x AS SELECT x, LIST(x) OVER (PARTITION BY x ORDER BY x ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS x FROM x;
SELECT * FROM x ORDER BY x;
SELECT FIRST(LIST_EXTRACT(x, 1)) FROM x GROUP BY x ORDER BY x;
SELECT FIRST(LIST_EXTRACT(x, 2)) FROM x GROUP BY x ORDER BY x;
SELECT FIRST(LIST_EXTRACT(x, 3)) FROM x GROUP BY x ORDER BY x;
CREATE TABLE x AS SELECT x % 3 AS x, CAST(x AS TEXT) AS x, CASE WHEN x % 3 = 0 THEN '-' ELSE '|' END AS x FROM x;
SELECT x, x, LIST(x) OVER (PARTITION BY x ORDER BY x) FROM x ORDER BY x, x;
SET x = 'nulls_first';
PRAGMA x;
CREATE TABLE x AS SELECT x AS x FROM x UNION ALL VALUES (NULL), (NULL), (NULL);
SELECT x % 2 AS x, x, x / 3.0, MAD(x / 3.0) OVER (PARTITION BY x % 2 ORDER BY x) FROM x ORDER BY 1, 2;
SELECT x, x / 3.0, MAD(x / 3.0) OVER (ORDER BY x rows BETWEEN 1 preceding AND 1 following) FROM x ORDER BY 1, 2;
SELECT x, x / 3.0, MAD(x / 3.0) OVER (ORDER BY x rows BETWEEN 1 preceding AND 3 following) FROM x ORDER BY 1, 2;
SELECT x % 3 AS x, x, x, MAD(x) OVER (PARTITION BY x % 3 ORDER BY x) FROM (SELECT x, CASE x % 2 WHEN 0 THEN x ELSE NULL END AS x FROM x) AS x ORDER BY 1, 2;
SELECT x, x, MAD(x) OVER (ORDER BY x rows BETWEEN 1 preceding AND 1 following) FROM (SELECT x, CASE x % 2 WHEN 0 THEN x ELSE NULL END AS x FROM x) AS x ORDER BY 1;
SELECT x, x, MAD(x) OVER (ORDER BY x rows BETWEEN 1 preceding AND 3 following) FROM (SELECT x, CASE x % 2 WHEN 0 THEN x ELSE NULL END AS x FROM x) AS x ORDER BY 1;
SELECT x, x, MAD(x) OVER (ORDER BY x rows BETWEEN UNBOUNDED preceding AND UNBOUNDED following) FROM (SELECT x, CASE x % 2 WHEN 0 THEN x ELSE NULL END AS x FROM x) AS x ORDER BY 1;
CREATE TABLE x AS SELECT * FROM (VALUES (1), (2), (3), (1)) AS x;
SELECT x, MAD(x) OVER (ORDER BY x ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) FROM x ORDER BY 1;
SELECT x, MAD(x) OVER (ORDER BY x ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) FROM x ORDER BY 1;
SELECT x % 2 AS x, x, x / 3.0, MAD(x / 3.0) OVER (PARTITION BY x % 2 ORDER BY x) FROM x ORDER BY 1, 2;
SET x = 'nulls_first';
PRAGMA x;
PRAGMA x;
CREATE TABLE x AS SELECT x AS x FROM x UNION ALL VALUES (NULL), (NULL), (NULL);
SELECT x % 2, x, x // 3, MODE(x // 3) OVER (PARTITION BY x % 2 ORDER BY x) FROM x ORDER BY 1, 2;
SELECT x, x // 3, MODE(x // 3) OVER (ORDER BY x rows BETWEEN 1 preceding AND 1 following) FROM x ORDER BY ALL;
SELECT x, x // 3, MODE(x // 3) OVER (ORDER BY x rows BETWEEN 1 preceding AND 3 following) FROM x ORDER BY 1, 2;
SELECT x, x // 3, x, MODE(x) OVER (PARTITION BY x % 3 ORDER BY x) FROM (SELECT x, CASE x % 2 WHEN 0 THEN x ELSE NULL END AS x FROM x) AS x ORDER BY 1;
SELECT x, x, MODE(x) OVER (ORDER BY x rows BETWEEN 1 preceding AND 1 following) FROM (SELECT x, CASE x % 2 WHEN 0 THEN x ELSE NULL END AS x FROM x) AS x ORDER BY ALL;
SELECT x, x, MODE(x) OVER (ORDER BY x rows BETWEEN 1 preceding AND 3 following) FROM (SELECT x, CASE x % 2 WHEN 0 THEN x ELSE NULL END AS x FROM x) AS x ORDER BY 1;
SELECT x, x, MODE(x) OVER (ORDER BY x rows BETWEEN UNBOUNDED preceding AND UNBOUNDED following) FROM (SELECT x, CASE x % 2 WHEN 0 THEN x ELSE NULL END AS x FROM x) AS x ORDER BY 1;
SELECT x, x, MODE(x) OVER (ORDER BY x rows BETWEEN UNBOUNDED preceding AND UNBOUNDED following) FROM (SELECT x, CASE x % 2 WHEN 0 THEN x ELSE NULL END AS x FROM x) AS x ORDER BY 1;
WITH x AS (SELECT * FROM (VALUES (0), (1), (2), (3), (4), (5), (6), (7), (8), (9), (NULL), (NULL), (NULL)) AS x) SELECT x, x // 3, MODE(x // 3) OVER (ORDER BY x rows BETWEEN 1 preceding AND 1 following) FROM x ORDER BY ALL;
SET x = 'nulls_first';
PRAGMA x;
PRAGMA x = x;
CREATE TABLE x (x TEXT, x BIGINT, x INT, x DATE);
INSERT INTO x VALUES ('develop', 10, 5200, '2007-08-01'), ('sales', 1, 5000, '2006-10-01'), ('personnel', 5, 3500, '2007-12-10'), ('sales', 4, 4800, '2007-08-08'), ('personnel', 2, 3900, '2006-12-23'), ('develop', 7, 4200, '2008-01-01'), ('develop', 9, 4500, '2008-01-01'), ('sales', 3, 4800, '2007-08-01'), ('develop', 8, 6000, '2006-10-01'), ('develop', 11, 5200, '2007-08-15');
SELECT x, x, x, SUM(x) OVER (PARTITION BY x ORDER BY x) FROM x ORDER BY x, x;
SELECT SUM(x) OVER (PARTITION BY x ORDER BY x) AS x FROM x ORDER BY x, x;
SELECT x, MIN(x) OVER (PARTITION BY x ORDER BY x, x) AS x, MAX(x) OVER (PARTITION BY x ORDER BY x, x) AS x, AVG(x) OVER (PARTITION BY x ORDER BY x, x) AS x FROM x ORDER BY x, x;
SELECT x, STDDEV_POP(x) OVER (PARTITION BY x ORDER BY x, x) AS x FROM x ORDER BY x, x;
SELECT x, COVAR_POP(x, x) OVER (PARTITION BY x ORDER BY x, x) AS x FROM x ORDER BY x, x;
CREATE TABLE x AS SELECT x, ROUND(x * 0.333, 0) % 3 AS x, ROUND(x * 0.333, 0) % 3 AS x FROM x AS x;
SELECT x, x, x, AVG(x) OVER (PARTITION BY x) AS x, AVG(x) FILTER(WHERE x = 1) OVER (PARTITION BY x) AS x, AVG(x) FILTER(WHERE x = 0) OVER (PARTITION BY x) AS x FROM x ORDER BY x, x;
SELECT x, x, x, COUNT(*) OVER (PARTITION BY x) AS x, COUNT(*) FILTER(WHERE x = 1) OVER (PARTITION BY x) AS x, COUNT(*) FILTER(WHERE x = 0) OVER (PARTITION BY x) AS x FROM x ORDER BY x, x;
SELECT x, x, x, MEDIAN(x) OVER (PARTITION BY x) AS x, MEDIAN(x) FILTER(WHERE x = 1) OVER (PARTITION BY x) AS x, MEDIAN(x) FILTER(WHERE x = 0) OVER (PARTITION BY x) AS x FROM x ORDER BY x, x;
SELECT x, COUNT(x) FILTER(WHERE x % 2 = 0) OVER (ORDER BY x ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING) FROM x AS x;
CREATE TABLE x AS SELECT * FROM (VALUES (1, 'a'), (2, 'b'), (3, 'b'), (4, 'c'), (5, 'c'), (6, 'b'), (7, 'c'), (8, 'a')) AS x;
SELECT x, x, COUNT(DISTINCT x) OVER (ORDER BY x ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING) AS x FROM x ORDER BY x;
SELECT x, x, COUNT(DISTINCT x) OVER (ORDER BY x ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING) AS x FROM x ORDER BY x;
SELECT x // 10 AS x, x, ANY_VALUE(x ORDER BY x DESC) OVER (PARTITION BY x // 10 ORDER BY x ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING) AS x FROM x AS x ORDER BY ALL;
SELECT x // 10 AS x, x, LIST(x ORDER BY x DESC) OVER (PARTITION BY x // 10 ORDER BY x ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING) AS x FROM x AS x ORDER BY ALL;
SELECT x // 10 AS x, x, LIST(DISTINCT x // 2 ORDER BY x DESC) OVER (PARTITION BY x // 10 ORDER BY x ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING) AS x FROM x AS x ORDER BY ALL;
SELECT x // 10 AS x, x, LIST(DISTINCT x // 2 ORDER BY x DESC) FILTER(WHERE x > 1) OVER (PARTITION BY x // 10 ORDER BY x ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING) AS x FROM x AS x ORDER BY ALL;
PRAGMA x;
CREATE OR REPLACE TABLE x (x INT, x REAL);
INSERT INTO x VALUES (0, 1), (1, 2), (2, 3);
SELECT x, x, SUM(x) OVER (ORDER BY x RANGE BETWEEN 1 PRECEDING AND -1 FOLLOWING) FROM x;
SELECT x, x, SUM(x) OVER (ORDER BY x RANGE BETWEEN -1 FOLLOWING AND 1 FOLLOWING) FROM x;
SELECT x, x, SUM(x) OVER (ORDER BY x RANGE BETWEEN -1 PRECEDING AND 1 FOLLOWING) FROM x;
SELECT x, x, SUM(x) OVER (ORDER BY x RANGE BETWEEN 1 PRECEDING AND -1 PRECEDING) FROM x;
SELECT x, x, SUM(x) OVER (ORDER BY x DESC RANGE BETWEEN 1 PRECEDING AND -1 FOLLOWING) FROM x;
SELECT x, x, SUM(x) OVER (ORDER BY x DESC RANGE BETWEEN -1 FOLLOWING AND 1 FOLLOWING) FROM x;
SELECT x, x, SUM(x) OVER (ORDER BY x DESC RANGE BETWEEN -1 PRECEDING AND 1 FOLLOWING) FROM x;
SELECT x, x, SUM(x) OVER (ORDER BY x DESC RANGE BETWEEN 1 PRECEDING AND -1 PRECEDING) FROM x;
PRAGMA x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (0, 0), (1, 1), (3, 3), (2, 2), (4, 2), (9, 1), (4, 0), (7, 3), (0, 2), (2, 0), (5, 1), (1, 3), (3, 1), (6, 0), (8, 0), (9, 3), (8, 2), (6, 2), (7, 1), (5, 3);
SELECT x, x, SUM(x) OVER (PARTITION BY x ORDER BY x) AS x, LAST_VALUE(x) OVER (PARTITION BY x ORDER BY x) AS x FROM x ORDER BY x, x;
SELECT x, x, SUM(x) OVER (PARTITION BY x ORDER BY x range BETWEEN UNBOUNDED preceding AND CURRENT ROW) AS x, LAST_VALUE(x) OVER (PARTITION BY x ORDER BY x range BETWEEN UNBOUNDED preceding AND CURRENT ROW) AS x FROM x ORDER BY x, x;
SELECT x, x, SUM(x) OVER (PARTITION BY x ORDER BY x range BETWEEN UNBOUNDED preceding AND UNBOUNDED following) AS x, LAST_VALUE(x) OVER (PARTITION BY x ORDER BY x range BETWEEN UNBOUNDED preceding AND UNBOUNDED following) AS x FROM x ORDER BY x, x;
SELECT x, x // 4 AS x, SUM(x // 4) OVER (PARTITION BY x ORDER BY x // 4 range BETWEEN UNBOUNDED preceding AND CURRENT ROW) AS x, LAST_VALUE(x // 4) OVER (PARTITION BY x ORDER BY x // 4 range BETWEEN UNBOUNDED preceding AND CURRENT ROW) AS x FROM x ORDER BY x, x // 4;
SELECT x, x // 4 AS x, SUM(x // 4) OVER x AS x, LAST_VALUE(x // 4) OVER x AS x FROM x WINDOW x AS (PARTITION BY x ORDER BY x // 4 range BETWEEN UNBOUNDED preceding AND CURRENT ROW) ORDER BY x, x // 4;
SET x = 'nulls_first';
PRAGMA x;
CREATE TABLE x (x TEXT, x BIGINT, x INT, x DATE);
INSERT INTO x VALUES ('develop', 10, 5200, '2007-08-01'), ('sales', 1, 5000, '2006-10-01'), ('personnel', 5, 3500, '2007-12-10'), ('sales', 4, 4800, '2007-08-08'), ('personnel', 2, 3900, '2006-12-23'), ('develop', 7, 4200, '2008-01-01'), ('develop', 9, 4500, '2008-01-01'), ('sales', 3, 4800, '2007-08-01'), ('develop', 8, 6000, '2006-10-01'), ('develop', 11, 5200, '2007-08-15');
SELECT x, x, NTH_VALUE(x, 2) OVER (PARTITION BY x ORDER BY x ASC ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) AS x FROM x ORDER BY 1, 2;
SELECT x, x, NTH_VALUE(x, NULL) OVER (PARTITION BY x ORDER BY x ASC ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) AS x FROM x ORDER BY 1, 2;
SELECT x, x, NTH_VALUE(NULL, 2) OVER (PARTITION BY x ORDER BY x ASC ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) AS x FROM x ORDER BY 1, 2;
SELECT x, x, NTH_VALUE(x, CASE x % 3 WHEN 1 THEN 2 ELSE NULL END) OVER (PARTITION BY x ORDER BY x ASC ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) AS x FROM x ORDER BY 1, 2;
CREATE VIEW x AS SELECT x, CASE x % 2 WHEN 1 THEN x ELSE NULL END AS x, x, x FROM x;
SELECT x, x, NTH_VALUE(x, 2) OVER (PARTITION BY x ORDER BY x ASC ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) AS x FROM x ORDER BY 1, 2;
SELECT x, x, 1 + x % 3 AS "x", NTH_VALUE(x, 1 + x % 3) OVER (PARTITION BY x ORDER BY x ASC ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) AS x FROM x ORDER BY 1, 2;
SELECT x, x, x % 3 AS "x", NTH_VALUE(x, x % 3) OVER (PARTITION BY x ORDER BY x ASC ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) AS x FROM x ORDER BY 1, 2;
SELECT x, x, NTH_VALUE(-1, 2) OVER (PARTITION BY x ORDER BY x ASC ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) AS x FROM x ORDER BY 1, 2;
SELECT x, x, NTH_VALUE(-1, 2) OVER (PARTITION BY x ORDER BY x ASC ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) AS x FROM x ORDER BY 1, 2;
SELECT x, x, NTH_VALUE(-1, 2) OVER (PARTITION BY x ORDER BY x ASC ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) AS x FROM x ORDER BY 1, 2;
CREATE TABLE x (x TEXT, x TEXT, x INT);
INSERT INTO x VALUES ('Mongrels', 'Apu', 350);
INSERT INTO x VALUES ('Mongrels', 'Ned', 666);
INSERT INTO x VALUES ('Mongrels', 'Meg', 1030);
INSERT INTO x VALUES ('Mongrels', 'Burns', 1270);
INSERT INTO x VALUES ('Simpsons', 'Homer', 1);
INSERT INTO x VALUES ('Simpsons', 'Lisa', 710);
INSERT INTO x VALUES ('Simpsons', 'Marge', 990);
INSERT INTO x VALUES ('Simpsons', 'Bart', 2010);
SELECT x, x, x, NTILE(2) OVER (PARTITION BY x ORDER BY x ASC) AS x FROM x AS x ORDER BY x, x;
SELECT x, x, x, NTILE(2) OVER (ORDER BY x ASC) AS x FROM x AS x ORDER BY x;
SELECT x, x, x, NTILE(1000) OVER (PARTITION BY x ORDER BY x ASC) AS x FROM x AS x ORDER BY x, x;
SELECT x, x, x, NTILE(1) OVER (PARTITION BY x ORDER BY x ASC) AS x FROM x AS x ORDER BY x, x;
SELECT x, x, x, NTILE(NULL) OVER (PARTITION BY x ORDER BY x ASC) AS x FROM x AS x ORDER BY x, x;
SELECT x, x, x, NTILE() OVER (PARTITION BY x ORDER BY x ASC) AS x FROM x AS x ORDER BY x, x;
SELECT x, x, x, NTILE(1, 2) OVER (PARTITION BY x ORDER BY x ASC) AS x FROM x AS x ORDER BY x, x;
SELECT x, x, x, NTILE(1, 2, 3) OVER (PARTITION BY x ORDER BY x ASC) AS x FROM x AS x ORDER BY x, x;
SELECT x, x, x, NTILE(1, 2, 3, 4) OVER (PARTITION BY x ORDER BY x ASC) AS x FROM x AS x ORDER BY x, x;
SELECT x, x, x, NTILE(-1) OVER (PARTITION BY x ORDER BY x ASC) AS x FROM x AS x ORDER BY x, x;
SELECT x, x, x, NTILE(0) OVER (PARTITION BY x ORDER BY x ASC) AS x FROM x AS x ORDER BY x, x;
PRAGMA x;
SELECT x, x, ROW_NUMBER() OVER (ORDER BY ALL) AS x FROM (SELECT x, x FROM x AS x CROSS JOIN x AS x) AS x;
PRAGMA x = 4;
PRAGMA x;
PRAGMA x;
PRAGMA x = '__TEST_DIR__/test.json';
PRAGMA x = x;
CREATE TABLE x (x SMALLINT PRIMARY KEY, x INT NOT NULL, x INT NOT NULL);
INSERT INTO x (x, x, x) VALUES (1, 500, 297);
SELECT SETSEED(0.8675309);
CREATE TABLE x (x INT NOT NULL, x INT NOT NULL, x INT NOT NULL, x UTINYINT NOT NULL, x UTINYINT NOT NULL, x UTINYINT NOT NULL);
INSERT INTO x SELECT 1 AS x, x % 500 AS x, x // 500 AS x, RANDOM() * 255 AS x, RANDOM() * 255 AS x, RANDOM() * 255 AS x FROM (SELECT x AS x FROM x) AS x;
SELECT COUNT(*) FROM x;
CREATE TEMPORARY TABLE x AS SELECT x AS x FROM x;
CREATE TEMPORARY TABLE x AS SELECT x.x AS x, x.x AS x FROM x AS x, x AS x;
CREATE SEQUENCE x;
CREATE TABLE x AS SELECT x.* FROM (SELECT NEXTVAL('patchids') AS x, 1 AS x, x, x + x AS x, x + x AS x, AVG(x) AS x, AVG(x) AS x, AVG(x) AS x FROM x, x GROUP BY x, x, x, x) AS x, x AS x WHERE x >= 1 AND x < x.x - 1 AND x >= 1 AND x < x.x - 1;
SELECT COUNT(*) FROM x;
CREATE TEMPORARY TABLE x (x TEXT);
INSERT INTO x (x) VALUES ('R'), ('G'), ('B');
SELECT COUNT(*) FROM (SELECT x, x, COALESCE(SQRT(x * x + x * x), 0.) AS x, COALESCE(ATAN2(x, x), 0.) AS x FROM (SELECT x, x, (CASE x WHEN 'R' THEN x WHEN 'G' THEN x ELSE x END) AS x, (CASE x WHEN 'R' THEN x WHEN 'G' THEN x ELSE x END) AS x FROM (SELECT x, (CAST(x AS INT) - CAST(x AS INT)) / 2.0 AS x, (CAST(x AS INT) - CAST(x AS INT)) / 2.0 AS x, (CAST(x AS INT) - CAST(x AS INT)) / 2.0 AS x, (CAST(x AS INT) - CAST(x AS INT)) / 2.0 AS x, (CAST(x AS INT) - CAST(x AS INT)) / 2.0 AS x, (CAST(x AS INT) - CAST(x AS INT)) / 2.0 AS x FROM (SELECT x.*, LEAD(x, 1) OVER x AS x, LAG(x, 1) OVER x AS x, LEAD(x, 1) OVER x AS x, LAG(x, 1) OVER x AS x, LEAD(x, 1) OVER x AS x, LAG(x, 1) OVER x AS x, LEAD(x, 3) OVER x AS x, LAG(x, 3) OVER x AS x, LEAD(x, 3) OVER x AS x, LAG(x, 3) OVER x AS x, LEAD(x, 3) OVER x AS x, LAG(x, 3) OVER x AS x FROM (SELECT x.x AS x, x.* FROM (SELECT x + x AS x, x + x AS x, x.* FROM x AS x, x AS x) AS x, x AS x WHERE x.x = x.x AND x.x = x.x AND x.x = x.x AND x.x = 1) AS x WINDOW x AS (PARTITION BY x ORDER BY x, x)) AS x WHERE x = x AND x = x) AS x, x AS x) AS x) AS x;
PRAGMA x = 4;
PRAGMA x;
CREATE TABLE x AS SELECT x AS x FROM x;
SELECT SUM(x) FROM (SELECT MAX(x) OVER (PARTITION BY x % 1024 ORDER BY x / 1024) AS x FROM x) AS x;
SELECT SUM(x) FROM (SELECT MAX(x) OVER (PARTITION BY x % 1023 ORDER BY x / 1023) AS x FROM x) AS x;
SELECT SUM(x) FROM (SELECT MAX(x) OVER (PARTITION BY x % 1025 ORDER BY x / 1025) AS x FROM x) AS x;
CREATE TABLE x AS SELECT x, CAST(x AS TEXT) AS x, CAST((x % 1023) AS TEXT) AS x, CAST((x / 2023) AS TEXT) AS x FROM x;
SELECT MIN(LENGTH(x)), MAX(LENGTH(x)) FROM (SELECT MAX(x) OVER (PARTITION BY x ORDER BY x) AS x FROM x) AS x;
CREATE TABLE x ("x" INT, "x" INT, "x" DATE, "x" DOUBLE, "x" BOOLEAN);
INSERT INTO x SELECT * FROM x;
PRAGMA x = 4;
SELECT "x", "x" FROM (SELECT "x", "x", "x", ROW_NUMBER() OVER (PARTITION BY "x" ORDER BY "x" DESC, "x") AS x FROM x) AS x WHERE x = 1 ORDER BY 1;
SET x = 'nulls_first';
PRAGMA x;
PRAGMA x;
CREATE TABLE x AS SELECT x AS x FROM x UNION ALL VALUES (NULL), (NULL), (NULL);
SELECT x % 2, x, MEDIAN(x) OVER (PARTITION BY x % 2 ORDER BY x) FROM x ORDER BY 1, 2;
SELECT x, MEDIAN(x) OVER (ORDER BY x rows BETWEEN 1 preceding AND 1 following) FROM x ORDER BY 1, 2;
SELECT x, MEDIAN(x) OVER (ORDER BY x rows BETWEEN 1 preceding AND 3 following) FROM x ORDER BY 1, 2;
SELECT x, QUANTILE(x, 0.5) OVER (ORDER BY x rows BETWEEN 1 preceding AND 3 following) FROM x ORDER BY 1, 2;
SELECT x % 2, x, MEDIAN(CAST(x AS TEXT)) OVER (PARTITION BY x % 2 ORDER BY x) FROM x ORDER BY 1, 2;
SELECT x, MEDIAN(CAST(x AS TEXT)) OVER (ORDER BY x rows BETWEEN 1 preceding AND 1 following) FROM x ORDER BY 1, 2;
SELECT x, QUANTILE(CAST(x AS TEXT), 0.5) OVER (ORDER BY x rows BETWEEN 1 preceding AND 3 following) FROM x ORDER BY 1, 2;
SELECT x, MEDIAN('prefix-' || CAST(x AS TEXT) || '-suffix') OVER (ORDER BY x rows BETWEEN 1 preceding AND 1 following) FROM x ORDER BY 1, 2;
SELECT x % 3, x, x, MEDIAN(x) OVER (PARTITION BY x % 3 ORDER BY x) FROM (SELECT x, CASE x % 2 WHEN 0 THEN x ELSE NULL END AS x FROM x) AS x ORDER BY 1, 2;
SELECT x, x, MEDIAN(x) OVER (ORDER BY x rows BETWEEN 1 preceding AND 1 following) FROM (SELECT x, CASE x % 2 WHEN 0 THEN x ELSE NULL END AS x FROM x) AS x ORDER BY 1;
SELECT x, x, MEDIAN(x) OVER (ORDER BY x rows BETWEEN 1 preceding AND 3 following) FROM (SELECT x, CASE x % 2 WHEN 0 THEN x ELSE NULL END AS x FROM x) AS x ORDER BY 1;
SELECT x, x, MEDIAN(x) OVER (ORDER BY x rows BETWEEN UNBOUNDED preceding AND UNBOUNDED following) FROM (SELECT x, CASE x % 2 WHEN 0 THEN x ELSE NULL END AS x FROM x) AS x ORDER BY 1;
WITH x AS (SELECT * FROM (VALUES (0, 1, 1), (1, 1, 1), (2, 1, 1), (3, 3, 1), (4, 1, 1), (5, 3, 1)) AS x) SELECT x, MEDIAN(x) OVER (ORDER BY x ROWS BETWEEN x PRECEDING AND x FOLLOWING) FROM x ORDER BY 1;
WITH x AS (SELECT * FROM (VALUES (0, 0, 1, 1), (1, 1, 1, 1), (2, 2, 1, 1), (3, 0, 1, 1), (4, 1, 1, 1), (5, 2, 1, 1)) AS x) SELECT x, MEDIAN(x) OVER (ORDER BY x ROWS BETWEEN x PRECEDING AND x FOLLOWING) FROM x ORDER BY 1;
WITH x AS (SELECT * FROM (VALUES (0, 0, 1, 2), (1, 1, 1, 2), (2, 2, 1, 2), (3, 3, 1, 2), (4, 4, 1, 2), (5, 5, 1, 2)) AS x) SELECT x, QUANTILE_DISC(x, [0.25, 0.5, 0.75]) OVER (ORDER BY x ROWS BETWEEN x PRECEDING AND x FOLLOWING) FROM x ORDER BY 1;
WITH x AS (SELECT * FROM (VALUES (0, NULL, 1, 2), (1, 1, 1, 2), (2, 2, 1, 2), (3, 3, 1, 2), (4, 4, 1, 2), (5, 5, 1, 2)) AS x) SELECT x, QUANTILE_DISC(x, [0.25, 0.5, 0.75]) OVER (ORDER BY x ROWS BETWEEN x PRECEDING AND x FOLLOWING) FROM x ORDER BY 1;
WITH x AS (SELECT * FROM (VALUES (0, NULL, 1, 2), (1, NULL, 1, 2), (2, NULL, 1, 2), (3, NULL, 1, 2), (4, NULL, 1, 2), (5, NULL, 1, 2)) AS x) SELECT x, QUANTILE_DISC(x, [0.25, 0.5, 0.75]) OVER (ORDER BY x ROWS BETWEEN x PRECEDING AND x FOLLOWING) FROM x ORDER BY 1;
WITH x AS (SELECT * FROM (VALUES (0, 0, 1, 2), (1, 1, 1, 2), (2, 2, 1, 2), (3, 3, 1, 2), (4, 4, 1, 2), (5, 5, 1, 2)) AS x) SELECT x, QUANTILE_CONT(x, [0.25, 0.5, 0.75]) OVER (ORDER BY x ROWS BETWEEN x PRECEDING AND x FOLLOWING) FROM x ORDER BY 1;
WITH x AS (SELECT * FROM (VALUES (0, 0, 1, 2), (1, 1, 1, 2), (2, 2, 1, 2), (3, 0, 1, 2), (4, 1, 1, 2), (5, 2, 1, 2)) AS x) SELECT x, QUANTILE_CONT(x, [0.25, 0.5, 0.75]) OVER (ORDER BY x ROWS BETWEEN x PRECEDING AND x FOLLOWING) FROM x ORDER BY 1;
SELECT x, QUANTILE_DISC(x, 0.5) OVER (ORDER BY x ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) AS x FROM (VALUES (0, 0), (1, 1), (2, 2), (3, 0), (4, 1)) AS x ORDER BY 1, 2;
SELECT x, QUANTILE_CONT(x, 0.5) OVER (ORDER BY x ROWS BETWEEN 2 PRECEDING AND 1 FOLLOWING) AS x FROM (VALUES (0, 0), (1, 1), (2, 2), (3, 3), (4, 0), (5, 1)) AS x ORDER BY 1, 2;
SELECT x, QUANTILE_CONT(x, 0.5) OVER (ORDER BY x ROWS BETWEEN 2 PRECEDING AND 1 FOLLOWING) AS x FROM (VALUES (0, NULL), (1, 1), (2, 2), (3, 3), (4, NULL), (5, 1)) AS x ORDER BY 1, 2;
SELECT x, QUANTILE_CONT(x, 0.5) OVER (ORDER BY x ROWS BETWEEN 2 PRECEDING AND 1 FOLLOWING) AS x FROM (VALUES (0, NULL), (1, 1), (2, 2), (3, 3), (4, NULL), (5, 1)) AS x ORDER BY 1, 2;
WITH x AS (SELECT * FROM (VALUES (0, 0, 1, 1), (1, 1, 1, 1), (2, 2, 1, 1), (3, 0, 1, 1), (4, 1, 1, 1), (5, 2, 1, 1)) AS x) SELECT x, MEDIAN(x) OVER (ORDER BY x ROWS BETWEEN x PRECEDING AND x FOLLOWING) FROM x ORDER BY 1;
WITH x AS (SELECT * FROM (VALUES (0, 0, 1, 1), (1, 1, 1, 1), (2, 2, 1, 1), (3, 0, 1, 1), (4, 1, 1, 1), (5, 2, 1, 1)) AS x) SELECT x, QUANTILE_DISC(x, 0.5) OVER (ORDER BY x ROWS BETWEEN x PRECEDING AND x FOLLOWING) FROM x ORDER BY 1;
WITH x AS (SELECT * FROM (VALUES (0, NULL, 1, 2), (1, 1, 1, 2), (2, 2, 1, 2), (3, 3, 1, 2), (4, 4, 1, 2), (5, 5, 1, 2)) AS x) SELECT x, QUANTILE_DISC(x, [0.25, 0.5, 0.75]) OVER (ORDER BY x ROWS BETWEEN x PRECEDING AND x FOLLOWING) FROM x ORDER BY 1;
WITH x AS (SELECT * FROM (VALUES (0, 0, 1, 2), (1, 1, 1, 2), (2, 2, 1, 2), (3, 0, 1, 2), (4, 1, 1, 2), (5, 2, 1, 2)) AS x) SELECT x, QUANTILE_CONT(x, [0.25, 0.5, 0.75]) OVER (ORDER BY x ROWS BETWEEN x PRECEDING AND x FOLLOWING) FROM x ORDER BY 1;
CREATE TABLE x (x INT, x DATE, x TEXT, x INT);
INSERT INTO x VALUES (0, '2023-01-05', 'San Francisco', 2925), (1, '2023-01-03', 'San Francisco', 755), (2, '2023-01-03', 'San Francisco', 2880), (3, '2023-01-05', 'San Francisco', 1502), (4, '2023-01-03', 'San Francisco', 2900), (5, '2023-01-01', 'San Francisco', 1210), (6, '2023-01-04', 'San Francisco', 200), (7, '2023-01-02', 'San Francisco', 980), (8, '2023-01-02', 'San Francisco', 430), (9, '2023-01-05', 'San Francisco', 2999), (10, '2023-01-01', 'San Francisco', 856), (11, '2023-01-02', 'San Francisco', 490), (12, '2023-01-02', 'San Francisco', 720);
SELECT "x", "x", "x", "x", MIN("x") OVER x FROM x WINDOW x AS (PARTITION BY "x" ORDER BY x ASC RANGE BETWEEN INTERVAL '3' DAYS PRECEDING AND INTERVAL '1' DAYS PRECEDING) ORDER BY "x", "x", "x";
PRAGMA x;
WITH x AS (SELECT x, RANK() OVER (ORDER BY x % 50) AS x FROM x AS x), x AS (SELECT x, COUNT(*) AS x FROM x GROUP BY ALL) SELECT COUNT(*), MIN(x), MAX(x), MIN(x), MAX(x) FROM x;
WITH x AS (SELECT x, RANK() OVER (PARTITION BY x // 3000 ORDER BY x % 50) AS x FROM x AS x), x AS (SELECT x, COUNT(*) AS x FROM x GROUP BY ALL) SELECT COUNT(*), MIN(x), MAX(x), MIN(x), MAX(x) FROM x;
SELECT *, RANK() OVER (ORDER BY x NULLS FIRST) AS x, RANK() OVER (ORDER BY x) AS x FROM (VALUES (1), (1), (1), (NULL)) AS x ORDER BY x;
PRAGMA x;
SELECT x, (x * 29) % 11 AS x, RANK( ORDER BY (x // 2) DESC) OVER x, PERCENT_RANK( ORDER BY (x // 2) DESC) OVER x FROM x AS x WINDOW x AS (ORDER BY (x * 29) % 11) ORDER BY 2;
SELECT x, (x * 29) % 11 AS x, RANK( ORDER BY (x // 2) DESC) OVER x, PERCENT_RANK( ORDER BY (x // 2) DESC) OVER x FROM x AS x WINDOW x AS (ORDER BY (x * 29) % 11) ORDER BY 2;
PRAGMA x;
SELECT x, (x * 29) % 11 AS x, ROW_NUMBER( ORDER BY (x // 2) DESC) OVER x, NTILE(4 ORDER BY (x // 2) DESC) OVER x FROM x AS x WINDOW x AS (ORDER BY (x * 29) % 11) ORDER BY 2;
PRAGMA x;
SELECT ROW_NUMBER() OVER ();
SELECT AVG(42) OVER ();
SELECT AVG(42) OVER ();
SELECT NONEXISTINGFUNCTION() OVER ();
SELECT AVG(ROW_NUMBER() OVER ()) OVER ();
SELECT AVG(42) OVER (PARTITION BY ROW_NUMBER() OVER ());
SELECT AVG(42) OVER (ORDER BY ROW_NUMBER() OVER ());
PRAGMA x;
CREATE TABLE x AS SELECT CAST(UUID() AS TEXT) AS x FROM x;
PRAGMA x;
PRAGMA x = x;
SELECT x, LAG(x, 1) OVER () AS x FROM x AS x;
SELECT x, LAG(x, -1) OVER () AS x FROM x AS x;
SELECT x, LEAD(x, -1) OVER () AS x FROM x AS x;
SELECT x, LEAD(x, 1) OVER () AS x FROM x AS x;
SELECT x, LAG(x, 1) OVER () AS x FROM x AS x WHERE x % 2 = 0 QUALIFY x <> x - 2;
SELECT x, LAG(x, 1, 50) OVER () AS x FROM x AS x;
SELECT x, LEAD(x, 1, 50) OVER () AS x FROM x AS x;
SELECT x, LEAD(x, 2) OVER () AS x FROM x AS x WHERE x % 2048 = 0;
SELECT x, LEAD(x, 2) OVER () AS x FROM x AS x WHERE x % 2048 = 0;
SELECT x, LEAD(x, 1) OVER (), LEAD(x, 2) OVER () FROM x AS x;
SELECT * FROM (SELECT x, LEAD(x, 2047, -1) OVER () AS x FROM x AS x WHERE x <> 1 AND x <> 2 AND x <> 2500 AND x <> 2501 AND x <> 2502) WHERE x >= 2040 AND x <= 2050;
PRAGMA x;
PRAGMA x = x;
SELECT LAG(COLUMNS(*), 1) OVER (), LEAD(COLUMNS(*), -1) OVER () FROM x;
SELECT LAG(COLUMNS(*), -1) OVER (), LEAD(COLUMNS(*), 1) OVER () FROM x;
SELECT LEAD(x, -1) OVER () IS NOT DISTINCT FROM LAG(x, 1) OVER () FROM (SELECT LAG("x", 1) OVER () AS x, LEAD("x", -1) OVER () AS x FROM x) QUALIFY ROW_NUMBER() OVER () = 2;
SELECT LEAD(x, 1) OVER () IS NOT DISTINCT FROM LAG(x, -1) OVER () FROM (SELECT LAG("x", -1) OVER () AS x, LEAD("x", 1) OVER () AS x FROM x) QUALIFY ROW_NUMBER() OVER () = 2;
PRAGMA x;
PRAGMA x = x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (2, 2), (2, 1), (1, 2), (1, NULL);
SELECT ROW_NUMBER() OVER (), x, x FROM x;
SELECT RANK() OVER (), x, x FROM x;
SELECT DENSE_RANK() OVER (), x, x FROM x;
SELECT PERCENT_RANK() OVER (), x, x FROM x;
SELECT x, LAG(x, 1) OVER () AS x FROM x AS x;
SELECT x, LAG(x, -1) OVER () AS x FROM x AS x;
SELECT x, LEAD(x, -1) OVER () AS x FROM x AS x;
SELECT x, LEAD(x, 1) OVER () AS x FROM x AS x;
SELECT x, COUNT(*) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) FROM x;
SELECT x, COUNT(*) FILTER(WHERE x = 2) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) FROM x;
SELECT x, COUNT(x) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) FROM x;
SELECT x, SUM(x) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) FROM x;
SELECT SUM(x) FROM (SELECT SUM(x) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS x FROM x AS x);
SELECT x, x, FIRST_VALUE(x) OVER (), FIRST_VALUE(x) OVER () FROM x;
SELECT ROW_NUMBER() OVER (), FIRST_VALUE(x) OVER (), FIRST_VALUE(x) OVER () FROM x;
SELECT ROW_NUMBER() OVER (), ROW_NUMBER() OVER () FROM x;
CREATE TABLE x (x BIGINT);
CREATE TABLE x (x BIGINT);
INSERT INTO x VALUES (11), (12), (13);
INSERT INTO x VALUES (21), (22);
CREATE VIEW x AS SELECT * FROM x UNION ALL SELECT * FROM x;
SELECT x AS x, ROW_NUMBER() OVER () AS x FROM x;
WITH RECURSIVE x AS (SELECT 1 AS x, CAST(1 AS BIGINT) AS x UNION ALL SELECT x + 1, ROW_NUMBER() OVER () FROM x WHERE x < 3) SELECT * FROM x;
SELECT LIST(x) OVER (rows BETWEEN UNBOUNDED preceding AND CURRENT ROW) AS x FROM (VALUES ({'x': 'A'}), ({'x': 'B'}), ({'x': 'C'}));
PRAGMA x;
PRAGMA x = x;
SELECT x, SUM(DISTINCT x % 3) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) FROM x AS x;
SELECT LIST(DISTINCT x) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS x FROM (VALUES ({'x': 'A'}), ({'x': 'B'}), ({'x': 'A'}));
SELECT x, SUM(DISTINCT x % 5) FILTER(WHERE x % 3 = 0) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) FROM x AS x;
SELECT LIST(x) OVER (rows BETWEEN UNBOUNDED preceding AND CURRENT ROW) FROM x AS x;
SELECT COUNT(*), SUM(LENGTH(x)), MIN(LENGTH(x)), MAX(LENGTH(x)) FROM (SELECT LIST(x) OVER (rows BETWEEN UNBOUNDED preceding AND CURRENT ROW) FROM x AS x) AS x;
PRAGMA x;
SELECT x, x, x, COUNT(DISTINCT x) OVER x AS x, RANK( ORDER BY x DESC) OVER x AS x, FIRST_VALUE(x ORDER BY x DESC) OVER x AS x, FIRST_VALUE(x ORDER BY x DESC) OVER x AS x, LEAD(x ORDER BY x DESC) OVER x AS x, LEAD(x ORDER BY x DESC) OVER x AS x FROM x WINDOW x AS (ORDER BY x range BETWEEN UNBOUNDED preceding AND CURRENT ROW) ORDER BY x;
PRAGMA x;
BEGIN;
CREATE TABLE x (x INT, x DECIMAL(18, 3), x DECIMAL(18, 3));
INSERT INTO x VALUES (7539, 0.590000, 0.590000), (3337, 0.626506, 0.626506), (15597, 0.661972, 0.661972), (2915, 0.698630, 0.698630), (11933, 0.717172, 0.717172), (483, 0.800000, 0.800000), (85, 0.857143, 0.857143), (97, 0.903614, 0.903614), (117, 0.925000, 0.925000), (5299, 0.927083, 0.927083), (10055, 0.945652, 0.945652), (4231, 0.977778, 0.977778), (5647, 0.987805, 0.987805), (8679, 0.988764, 0.988764), (10323, 0.977778, 1.111111), (3305, 0.737500, 1.293860);
SELECT x, RANK() OVER (ORDER BY x) AS x, RANK() OVER (ORDER BY x) AS x FROM x ORDER BY x;
PRAGMA x;
SELECT x, (x * 29) % 11 AS x, FIRST_VALUE(x ORDER BY x DESC) OVER x, LAST_VALUE(x ORDER BY x DESC) OVER x, NTH_VALUE(x, 2 ORDER BY x DESC) OVER x FROM x AS x WINDOW x AS (ORDER BY (x * 29) % 11 ROWS BETWEEN 3 PRECEDING AND 3 FOLLOWING) ORDER BY 2;
SELECT x, (x * 29) % 11 AS x, FIRST_VALUE(x ORDER BY x DESC) OVER x, LAST_VALUE(x ORDER BY x DESC) OVER x, NTH_VALUE(x, 2 ORDER BY x DESC) OVER x FROM x AS x WINDOW x AS (ORDER BY (x * 29) % 11 ROWS BETWEEN 3 PRECEDING AND 3 FOLLOWING) ORDER BY 2;
SELECT SETSEED(0.8675309);
SELECT LIST(RANDOM()) OVER (ORDER BY x), MAX(RANDOM()) OVER (ORDER BY x) FROM x AS x;
PRAGMA x;
CREATE TABLE x (x INT, x INT, PRIMARY KEY (x));
INSERT INTO x (x, x) SELECT x, RANDOM() * 100000 AS x FROM (SELECT x AS x FROM x) AS x;
SELECT COUNT(*) FROM (SELECT x, ROW_NUMBER() OVER (ORDER BY x) FROM x) AS x;
PRAGMA x;
CREATE TABLE x (x INT);
SELECT MIN(x) OVER (PARTITION BY x ORDER BY x) FROM x;
SELECT MIN(x) OVER (PARTITION BY x ORDER BY x) FROM x;
SELECT MIN(x) OVER (PARTITION BY x ORDER BY x) FROM x;
SELECT MIN(x) OVER (PARTITION BY x, x ORDER BY x) FROM x;
SELECT MIN(x) OVER (PARTITION BY x ORDER BY x, x) FROM x;
SELECT MIN(x) OVER (PARTITION BY x ORDER BY x) FROM x;
PRAGMA x;
SELECT x, LAG(x) OVER x FROM (VALUES (1), (2), (3)) AS x WINDOW x AS (ORDER BY x);
WITH x AS (SELECT x, LAG(x) OVER x FROM (VALUES (1), (2), (3)) AS x WINDOW x AS (ORDER BY x)) SELECT * FROM x;
SELECT * FROM (SELECT x, LAG(x) OVER x FROM (VALUES (1), (2), (3)) AS x WINDOW x AS (ORDER BY x)) AS x;
CREATE VIEW x AS SELECT x, LAG(x) OVER x FROM (VALUES (1), (2), (3)) AS x WINDOW x AS (ORDER BY x);
SELECT * FROM x;
SELECT * FROM (SELECT x, LAG(x) OVER x FROM (VALUES (1), (2), (3)) AS x WINDOW x AS (ORDER BY x)) AS x, (SELECT x, LAG(x) OVER x FROM (VALUES (1), (2), (3)) AS x WINDOW x AS (ORDER BY x)) AS x ORDER BY 1, 2, 3, 4;
WITH x AS (SELECT x, LAG(x) OVER x FROM (VALUES (1), (2), (3)) AS x) SELECT * FROM x WINDOW x AS (ORDER BY x);
SELECT x, LAG(x) OVER x FROM (VALUES (1), (2), (3)) AS x WINDOW x AS (ORDER BY x), x AS (ORDER BY x);
CREATE TABLE x (x INT);
PRAGMA x;
CREATE TABLE x AS SELECT x % 2 = 0 AS x, CAST(x AS INT) AS x FROM x;
SELECT x, x, SUM(x) OVER () FROM x ORDER BY 1, 2;
SELECT x, x, SUM(x) OVER (PARTITION BY x) FROM x ORDER BY 1, 2;
SELECT x, x, SUM(x) OVER (PARTITION BY x ORDER BY x) FROM x ORDER BY 1, 2;
DROP TABLE x;
CREATE TABLE x AS SELECT x % 2 AS x, x % 3 = 0 AS x FROM x;
SELECT x, x, BOOL_AND(x) OVER (), BOOL_OR(x) OVER () FROM x ORDER BY 1, 2;
SELECT x, x, BOOL_AND(x) OVER (PARTITION BY x), BOOL_OR(x) OVER (PARTITION BY x) FROM x ORDER BY 1, 2;
SELECT x, x, BOOL_AND(NOT x) OVER (PARTITION BY x ORDER BY x), BOOL_AND(x) OVER (PARTITION BY x ORDER BY x), BOOL_OR(x) OVER (PARTITION BY x ORDER BY x) FROM x ORDER BY 1, 2;
PRAGMA x;
CREATE TABLE x AS SELECT x AS x FROM x;
SELECT MAX(x), MAX(x), SUM(x), SUM(x) FROM (SELECT ROW_NUMBER() OVER x AS x, ROW_NUMBER() OVER x AS x, SUM(x % 4) OVER (x rows BETWEEN 1 preceding AND 1 following) AS x, SUM(x % 4) OVER (rows BETWEEN 1 preceding AND 1 following) AS x FROM x WINDOW x AS (PARTITION BY x // 4 ORDER BY x % 4)) AS x;
SELECT x, x, COUNT(*) OVER (PARTITION BY x ORDER BY x), COUNT(*) OVER (x ORDER BY x) FROM (VALUES (1, 1), (2, 1), (3, 2), (4, 2)) AS x WINDOW x AS (PARTITION BY x) ORDER BY x;
SELECT x, x, COUNT(*) OVER (PARTITION BY x ORDER BY x), COUNT(*) OVER (x ORDER BY x) FROM (VALUES (1, 1), (2, 1), (3, 2), (4, 2)) AS x WINDOW x AS (PARTITION BY x ORDER BY x DESC) ORDER BY x;
SELECT x, x, COUNT(*) OVER (PARTITION BY x ORDER BY x), COUNT(*) OVER (x PARTITION BY x) FROM (VALUES (1, 1), (2, 1), (3, 2), (4, 2)) AS x WINDOW x AS (PARTITION BY x) ORDER BY x;
SELECT x, SUM(x) OVER x AS x FROM x WINDOW x AS (ORDER BY x rows BETWEEN 1 preceding AND 1 following) ORDER BY x;
SELECT SUM(1) OVER x FROM x WINDOW x AS (), x AS (ORDER BY x rows BETWEEN 1 preceding AND 1 following);
PRAGMA x;
SELECT x, x, SUM(x) OVER (PARTITION BY x ORDER BY x), LEAD(x) OVER (PARTITION BY x ORDER BY x) FROM (SELECT x AS x, x % 5 AS x, x AS x FROM x) AS x ORDER BY ALL;
SELECT x, x, ARRAY_SORT(LIST(x) OVER (PARTITION BY x)) FROM (SELECT x AS x, x % 5 AS x, x AS x FROM x) AS x ORDER BY ALL;
SELECT x, MIN(x) AS x, MAX(x) AS x FROM (SELECT x, SUM(x) OVER (PARTITION BY x) AS x FROM ((SELECT 1 AS x, x AS x FROM x) UNION ALL (SELECT 2 AS x, x AS x FROM x) UNION ALL (SELECT 3 AS x, x AS x FROM x) UNION ALL (SELECT 4 AS x, x AS x FROM x) UNION ALL (SELECT 5 AS x, x AS x FROM x) UNION ALL (SELECT 6 AS x, x AS x FROM x)) AS x) AS x GROUP BY ALL ORDER BY ALL;
SELECT x, MIN(x) AS x, MAX(x) AS x FROM (SELECT x, SUM(x) OVER (PARTITION BY x) AS x FROM (SELECT x, x FROM ((SELECT x AS x, RANDOM() AS x FROM x) AS x CROSS JOIN x) AS x) AS x) AS x GROUP BY ALL HAVING x <> x ORDER BY ALL;
CREATE TABLE x (x TEXT, x TEXT, x TEXT, x INT, x INT);
INSERT INTO x (x, x, x, x, x) VALUES (NULL, NULL, NULL, 271116, 0), ('Summer', NULL, NULL, 222552, 1), ('Winter', NULL, NULL, 48564, 1), ('Summer', 'NA', NULL, 188464, 2), ('Summer', 'Gold', NULL, 11459, 2), ('Winter', 'NA', NULL, 42869, 2), ('Summer', 'Bronze', NULL, 11409, 2), ('Winter', 'Bronze', NULL, 1886, 2), ('Winter', 'Gold', NULL, 1913, 2), ('Winter', 'Silver', NULL, 1896, 2), ('Summer', 'Silver', NULL, 11220, 2), ('Summer', 'NA', 'M', 138463, 3), ('Summer', 'Gold', 'M', 8319, 3), ('Winter', 'NA', 'F', 13268, 3), ('Winter', 'NA', 'M', 29601, 3), ('Summer', 'NA', 'F', 50001, 3), ('Summer', 'Bronze', 'M', 8235, 3), ('Winter', 'Bronze', 'M', 1289, 3), ('Winter', 'Gold', 'M', 1306, 3), ('Winter', 'Silver', 'M', 1289, 3), ('Summer', 'Gold', 'F', 3140, 3), ('Summer', 'Silver', 'M', 8092, 3), ('Summer', 'Bronze', 'F', 3174, 3), ('Summer', 'Silver', 'F', 3128, 3), ('Winter', 'Bronze', 'F', 597, 3), ('Winter', 'Gold', 'F', 607, 3), ('Winter', 'Silver', 'F', 607, 3);
PRAGMA x = 'NULLS LAST';
SELECT *, MAX(x) FILTER(WHERE x = 1) OVER (PARTITION BY x) AS x FROM x ORDER BY ALL;
SELECT x // 10 AS x, x, GROUP_CONCAT(x, ',' ORDER BY x DESC) OVER (PARTITION BY x) AS x FROM x AS x ORDER BY ALL;
SELECT x // 10 AS x, x, GROUP_CONCAT(x, ',' ORDER BY x DESC) OVER (PARTITION BY x) AS x FROM x AS x ORDER BY ALL;
WITH x AS (SELECT CAST('fb30cf47-6f6b-42ef-dec2-3f984479a2aa' AS UUID) AS x, UNNEST(GENERATE_SERIES(CAST('2024-04-01' AS DATE), CAST('2025-03-01' AS DATE), INTERVAL '1' MONTH)) AS x UNION ALL BY NAME SELECT CAST('7d1cc557-2d45-6900-a1ed-b2c64f5d9200' AS UUID) AS x, UNNEST(GENERATE_SERIES(CAST('2024-02-01' AS DATE), CAST('2025-01-01' AS DATE), INTERVAL '1' MONTH)) AS x), x AS (SELECT CAST('fb30cf47-6f6b-42ef-dec2-3f984479a2aa' AS UUID) AS x, UNNEST(GENERATE_SERIES(CAST('2024-04-01' AS DATE), CAST('2025-03-01' AS DATE), INTERVAL '1' MONTH)) AS x, 1 AS x UNION ALL BY NAME SELECT CAST('7d1cc557-2d45-6900-a1ed-b2c64f5d9200' AS UUID) AS x, UNNEST(GENERATE_SERIES(CAST('2022-12-01' AS DATE), CAST('2023-12-01' AS DATE), INTERVAL '1' MONTH)) AS x, 1 AS x), x AS (SELECT x.x, x.x, SUM(x.x) OVER (PARTITION BY x.x ORDER BY x.x ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS x FROM x LEFT JOIN x ON x.x = x.x AND x.x = x.x) SELECT * FROM x ORDER BY x DESC, x DESC;
WITH x AS (SELECT x // 59 AS x, RANDOM() AS x FROM x), x AS (SELECT LIST(x) OVER (PARTITION BY x ORDER BY x ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS x FROM x) SELECT COUNT(*) FROM x WHERE x[1] <> LIST_AGGREGATE(VALUES ('min'));
PRAGMA x;
PRAGMA x = x;
SELECT SETSEED(0.867309);
CREATE TABLE x AS SELECT x, CHR(CAST((RANDOM() * 3 + 65) AS INT)) AS x, CAST((RANDOM() * 100) AS INT) AS x FROM x AS x;
CREATE VIEW x AS WITH x AS (SELECT GROUP_CONCAT(x, ',' ORDER BY x ASC, x) AS x, 1 AS x FROM x GROUP BY x) SELECT x, SUM(x) AS x, SUM(x) OVER () AS x, SUM(x) / SUM(x) OVER () AS x, SUM(x) OVER (ORDER BY x DESC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) / SUM(x) OVER () AS x FROM x GROUP BY x ORDER BY x DESC;
CREATE VIEW x AS SELECT QUANTILE(x, 0.3) OVER () AS x, QUANTILE(x, 0.7) OVER () AS x FROM x AS x;
PRAGMA x;
CREATE TABLE x (x INT, x DOUBLE, x INT);
INSERT INTO x VALUES (1, 1, 42), (2, 1, 42), (3, 1, 42), (2, 2, 42), (3, 2, 42), (4, 2, 42);
SELECT x, x FROM (SELECT x, x, SUM(x) OVER (PARTITION BY x ORDER BY x ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS x FROM (SELECT x, x FROM x ORDER BY x) AS x) AS x WHERE (x > 3.0);
SELECT x, x FROM (SELECT x, x, SUM(x) OVER (PARTITION BY x ORDER BY x ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS x FROM (SELECT x, x FROM x ORDER BY x) AS x) AS x WHERE (x > 3.0);
SELECT x, x FROM (SELECT x, x, SUM(x) OVER (PARTITION BY x ORDER BY x ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS x FROM (SELECT * FROM x ORDER BY x) AS x) AS x WHERE (x > 3.0);
PRAGMA x;
SELECT COUNT(DISTINCT 42) OVER ();
WITH x AS (SELECT x AS x, x AS x FROM (VALUES (1, 2), (1, 1), (1, 2), (2, 1), (2, 1), (2, 2), (2, 3), (2, 4)) AS x) SELECT *, COUNT(x) OVER (PARTITION BY x), COUNT(DISTINCT x) OVER (PARTITION BY x) FROM x ORDER BY 1, 2;
CREATE TABLE x AS SELECT * FROM (VALUES (1, 'a'), (2, 'b'), (3, 'b'), (4, 'c'), (5, 'c'), (6, 'b'), (7, 'c'), (8, 'a')) AS x;
SELECT x, x, COUNT(DISTINCT x) OVER (ORDER BY x ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING) AS x FROM x ORDER BY x;
WITH x AS (SELECT x, x % 29 AS x FROM x AS x) SELECT x, x, COUNT(DISTINCT x) OVER (ORDER BY x ROWS BETWEEN 25 PRECEDING AND 25 FOLLOWING) AS x FROM x ORDER BY x;
WITH x AS (SELECT x, x % 29 AS x FROM x AS x) SELECT x, x, COUNT(DISTINCT x) OVER (ORDER BY x ROWS BETWEEN 25 PRECEDING AND 25 FOLLOWING) AS x FROM x ORDER BY x;
WITH x AS (SELECT x, x % 29 AS x FROM x AS x) SELECT x, x, COUNT(DISTINCT x) OVER (ORDER BY x ROWS BETWEEN 25 PRECEDING AND 25 FOLLOWING) AS x FROM x ORDER BY x;
INSERT INTO x VALUES (9, NULL), (NULL, 'b'), (NULL, NULL);
SELECT x, x, COUNT(DISTINCT x) OVER (ORDER BY x ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING) AS x FROM x ORDER BY x;
CREATE TABLE x AS SELECT x, x, {'x': x % 2, 'x': x} AS x, [CAST((x % 2) AS TEXT), x] AS x, x * x AS x FROM x;
SELECT x, x, COUNT(DISTINCT x) OVER (ORDER BY x ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING) AS x FROM x ORDER BY x;
SELECT x, x, COUNT(DISTINCT x) OVER (ORDER BY x ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING) AS x FROM x ORDER BY x;
SELECT x, x, COUNT(DISTINCT x) OVER (ORDER BY x RANGE BETWEEN 10 PRECEDING AND 10 FOLLOWING) AS x FROM x ORDER BY x;
SELECT x, x, GROUP_CONCAT(DISTINCT CASE WHEN x IS NULL THEN NULL WHEN ', ' IS NULL THEN NULL ELSE (x, ', ') END) OVER (ORDER BY x ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING) AS x FROM x ORDER BY x;
SELECT x, x, MEDIAN(DISTINCT x) OVER (ORDER BY x ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING) AS x FROM x ORDER BY x;
SELECT x, x, COUNT(DISTINCT x) FILTER(WHERE x % 3 = 0) OVER (ORDER BY x ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING) AS x FROM x ORDER BY x;
SELECT x, x, COUNT(DISTINCT x) FILTER(WHERE x % 3 = 1) OVER (ORDER BY x ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING) AS x FROM x ORDER BY x;
SELECT x, x, COUNT(DISTINCT x) FILTER(WHERE x % 3 = 2) OVER (ORDER BY x ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING) AS x FROM x ORDER BY x;
PRAGMA x = '__TEST_DIR__/window_distinct';
SELECT x, x, x, COUNT(DISTINCT x) OVER (PARTITION BY x ORDER BY x) FROM x ORDER BY ALL;
PRAGMA x = 4;
PRAGMA x = '500MB';
WITH x AS (SELECT x AS x, CHR(CAST((65 + x % 26) AS INT)) AS x FROM x) SELECT x, x, COUNT(DISTINCT x) OVER (ORDER BY x DESC) AS x FROM x ORDER BY ALL;
PRAGMA x;
CREATE TABLE x (x INT, x INT, x INT);
INSERT INTO x (x, x, x) VALUES (0, 0, NULL), (1, 1, 1), (2, 2, NULL), (3, 3, 3), (4, 0, NULL), (5, 1, 1), (6, 2, NULL), (7, 3, 3), (8, 0, NULL), (9, 1, 1);
CREATE TABLE x (x TEXT, x BIGINT, x INT, x DATE);
INSERT INTO x VALUES ('develop', 10, 5200, '2007-08-01'), ('sales', 1, 5000, '2006-10-01'), ('personnel', 5, 3500, '2007-12-10'), ('sales', 4, 4800, '2007-08-08'), ('personnel', 2, 3900, '2006-12-23'), ('develop', 7, 4200, '2008-01-01'), ('develop', 9, 4500, '2008-01-01'), ('sales', 3, 4800, '2007-08-01'), ('develop', 8, 6000, '2006-10-01'), ('develop', 11, 5200, '2007-08-15');
INSERT INTO x VALUES ('develop', 10, 5200, '2007-08-01'), ('sales', 1, 5000, '2006-10-01'), ('personnel', 5, 3500, '2007-12-10'), ('sales', 4, 4800, '2007-08-08'), ('personnel', 2, 3900, '2006-12-23'), ('develop', 7, 4200, '2008-01-01'), ('develop', 9, 4500, '2008-01-01'), ('sales', 3, 4800, '2007-08-01'), ('develop', 8, 6000, '2006-10-01'), ('develop', 11, 5200, '2007-08-15');
INSERT INTO x VALUES ('develop', 10, 5200, '2007-08-01'), ('sales', 1, 5000, '2006-10-01'), ('personnel', 5, 3500, '2007-12-10'), ('sales', 4, 4800, '2007-08-08'), ('personnel', 2, 3900, '2006-12-23'), ('develop', 7, 4200, '2008-01-01'), ('develop', 9, 4500, '2008-01-01'), ('sales', 3, 4800, '2007-08-01'), ('develop', 8, 6000, '2006-10-01'), ('develop', 11, 5200, '2007-08-15');
INSERT INTO x VALUES ('develop', 10, 5200, '2007-08-01'), ('sales', 1, 5000, '2006-10-01'), ('personnel', 5, 3500, '2007-12-10'), ('sales', 4, 4800, '2007-08-08'), ('personnel', 2, 3900, '2006-12-23'), ('develop', 7, 4200, '2008-01-01'), ('develop', 9, 4500, '2008-01-01'), ('sales', 3, 4800, '2007-08-01'), ('develop', 8, 6000, '2006-10-01'), ('develop', 11, 5200, '2007-08-15');
INSERT INTO x VALUES ('develop', 10, 5200, '2007-08-01'), ('sales', 1, 5000, '2006-10-01'), ('personnel', 5, 3500, '2007-12-10'), ('sales', 4, 4800, '2007-08-08'), ('personnel', 2, 3900, '2006-12-23'), ('develop', 7, 4200, '2008-01-01'), ('develop', 9, 4500, '2008-01-01'), ('sales', 3, 4800, '2007-08-01'), ('develop', 8, 6000, '2006-10-01'), ('develop', 11, 5200, '2007-08-15');
INSERT INTO x VALUES ('develop', 10, 5200, '2007-08-01'), ('sales', 1, 5000, '2006-10-01'), ('personnel', 5, 3500, '2007-12-10'), ('sales', 4, 4800, '2007-08-08'), ('personnel', 2, 3900, '2006-12-23'), ('develop', 7, 4200, '2008-01-01'), ('develop', 9, 4500, '2008-01-01'), ('sales', 3, 4800, '2007-08-01'), ('develop', 8, 6000, '2006-10-01'), ('develop', 11, 5200, '2007-08-15');
INSERT INTO x VALUES ('develop', 10, 5200, '2007-08-01'), ('sales', 1, 5000, '2006-10-01'), ('personnel', 5, 3500, '2007-12-10'), ('sales', 4, 4800, '2007-08-08'), ('personnel', 2, 3900, '2006-12-23'), ('develop', 7, 4200, '2008-01-01'), ('develop', 9, 4500, '2008-01-01'), ('sales', 3, 4800, '2007-08-01'), ('develop', 8, 6000, '2006-10-01'), ('develop', 11, 5200, '2007-08-15');
INSERT INTO x VALUES ('develop', 10, 5200, '2007-08-01'), ('sales', 1, 5000, '2006-10-01'), ('personnel', 5, 3500, '2007-12-10'), ('sales', 4, 4800, '2007-08-08'), ('personnel', 2, 3900, '2006-12-23'), ('develop', 7, 4200, '2008-01-01'), ('develop', 9, 4500, '2008-01-01'), ('sales', 3, 4800, '2007-08-01'), ('develop', 8, 6000, '2006-10-01'), ('develop', 11, 5200, '2007-08-15');
INSERT INTO x VALUES ('develop', 10, 5200, '2007-08-01'), ('sales', 1, 5000, '2006-10-01'), ('personnel', 5, 3500, '2007-12-10'), ('sales', 4, 4800, '2007-08-08'), ('personnel', 2, 3900, '2006-12-23'), ('develop', 7, 4200, '2008-01-01'), ('develop', 9, 4500, '2008-01-01'), ('sales', 3, 4800, '2007-08-01'), ('develop', 8, 6000, '2006-10-01'), ('develop', 11, 5200, '2007-08-15');
INSERT INTO x VALUES ('develop', 10, 5200, '2007-08-01'), ('sales', 1, 5000, '2006-10-01'), ('personnel', 5, 3500, '2007-12-10'), ('sales', 4, 4800, '2007-08-08'), ('personnel', 2, 3900, '2006-12-23'), ('develop', 7, 4200, '2008-01-01'), ('develop', 9, 4500, '2008-01-01'), ('sales', 3, 4800, '2007-08-01'), ('develop', 8, 6000, '2006-10-01'), ('develop', 11, 5200, '2007-08-15');
INSERT INTO x VALUES ('develop', 10, 5200, '2007-08-01'), ('sales', 1, 5000, '2006-10-01'), ('personnel', 5, 3500, '2007-12-10'), ('sales', 4, 4800, '2007-08-08'), ('personnel', 2, 3900, '2006-12-23'), ('develop', 7, 4200, '2008-01-01'), ('develop', 9, 4500, '2008-01-01'), ('sales', 3, 4800, '2007-08-01'), ('develop', 8, 6000, '2006-10-01'), ('develop', 11, 5200, '2007-08-15');
INSERT INTO x VALUES ('develop', 10, 5200, '2007-08-01'), ('sales', 1, 5000, '2006-10-01'), ('personnel', 5, 3500, '2007-12-10'), ('sales', 4, 4800, '2007-08-08'), ('personnel', 2, 3900, '2006-12-23'), ('develop', 7, 4200, '2008-01-01'), ('develop', 9, 4500, '2008-01-01'), ('sales', 3, 4800, '2007-08-01'), ('develop', 8, 6000, '2006-10-01'), ('develop', 11, 5200, '2007-08-15');
INSERT INTO x VALUES ('develop', 10, 5200, '2007-08-01'), ('sales', 1, 5000, '2006-10-01'), ('personnel', 5, 3500, '2007-12-10'), ('sales', 4, 4800, '2007-08-08'), ('personnel', 2, 3900, '2006-12-23'), ('develop', 7, 4200, '2008-01-01'), ('develop', 9, 4500, '2008-01-01'), ('sales', 3, 4800, '2007-08-01'), ('develop', 8, 6000, '2006-10-01'), ('develop', 11, 5200, '2007-08-15');
INSERT INTO x VALUES ('develop', 10, 5200, '2007-08-01'), ('sales', 1, 5000, '2006-10-01'), ('personnel', 5, 3500, '2007-12-10'), ('sales', 4, 4800, '2007-08-08'), ('personnel', 2, 3900, '2006-12-23'), ('develop', 7, 4200, '2008-01-01'), ('develop', 9, 4500, '2008-01-01'), ('sales', 3, 4800, '2007-08-01'), ('develop', 8, 6000, '2006-10-01'), ('develop', 11, 5200, '2007-08-15');
INSERT INTO x VALUES ('develop', 10, 5200, '2007-08-01'), ('sales', 1, 5000, '2006-10-01'), ('personnel', 5, 3500, '2007-12-10'), ('sales', 4, 4800, '2007-08-08'), ('personnel', 2, 3900, '2006-12-23'), ('develop', 7, 4200, '2008-01-01'), ('develop', 9, 4500, '2008-01-01'), ('sales', 3, 4800, '2007-08-01'), ('develop', 8, 6000, '2006-10-01'), ('develop', 11, 5200, '2007-08-15');
INSERT INTO x VALUES ('develop', 10, 5200, '2007-08-01'), ('sales', 1, 5000, '2006-10-01'), ('personnel', 5, 3500, '2007-12-10'), ('sales', 4, 4800, '2007-08-08'), ('personnel', 2, 3900, '2006-12-23'), ('develop', 7, 4200, '2008-01-01'), ('develop', 9, 4500, '2008-01-01'), ('sales', 3, 4800, '2007-08-01'), ('develop', 8, 6000, '2006-10-01'), ('develop', 11, 5200, '2007-08-15');
INSERT INTO x VALUES ('develop', 10, 5200, '2007-08-01'), ('sales', 1, 5000, '2006-10-01'), ('personnel', 5, 3500, '2007-12-10'), ('sales', 4, 4800, '2007-08-08'), ('personnel', 2, 3900, '2006-12-23'), ('develop', 7, 4200, '2008-01-01'), ('develop', 9, 4500, '2008-01-01'), ('sales', 3, 4800, '2007-08-01'), ('develop', 8, 6000, '2006-10-01'), ('develop', 11, 5200, '2007-08-15');
INSERT INTO x VALUES ('develop', 10, 5200, '2007-08-01'), ('sales', 1, 5000, '2006-10-01'), ('personnel', 5, 3500, '2007-12-10'), ('sales', 4, 4800, '2007-08-08'), ('personnel', 2, 3900, '2006-12-23'), ('develop', 7, 4200, '2008-01-01'), ('develop', 9, 4500, '2008-01-01'), ('sales', 3, 4800, '2007-08-01'), ('develop', 8, 6000, '2006-10-01'), ('develop', 11, 5200, '2007-08-15');
INSERT INTO x VALUES ('develop', 10, 5200, '2007-08-01'), ('sales', 1, 5000, '2006-10-01'), ('personnel', 5, 3500, '2007-12-10'), ('sales', 4, 4800, '2007-08-08'), ('personnel', 2, 3900, '2006-12-23'), ('develop', 7, 4200, '2008-01-01'), ('develop', 9, 4500, '2008-01-01'), ('sales', 3, 4800, '2007-08-01'), ('develop', 8, 6000, '2006-10-01'), ('develop', 11, 5200, '2007-08-15');
INSERT INTO x VALUES ('develop', 10, 5200, '2007-08-01'), ('sales', 1, 5000, '2006-10-01'), ('personnel', 5, 3500, '2007-12-10'), ('sales', 4, 4800, '2007-08-08'), ('personnel', 2, 3900, '2006-12-23'), ('develop', 7, 4200, '2008-01-01'), ('develop', 9, 4500, '2008-01-01'), ('sales', 3, 4800, '2007-08-01'), ('develop', 8, 6000, '2006-10-01'), ('develop', 11, 5200, '2007-08-15');
SELECT FIRST_VALUE(x) OVER (ORDER BY x range BETWEEN 1000 preceding AND 1000 following) AS x, LEAD(x) OVER (ORDER BY x range BETWEEN 1000 preceding AND 1000 following) AS x, NTH_VALUE(x, 1) OVER (ORDER BY x range BETWEEN 1000 preceding AND 1000 following), x FROM x ORDER BY x, x;
SELECT LAST_VALUE(x) OVER (ORDER BY x range BETWEEN 1000 preceding AND 1000 following) AS x, LAG(x) OVER (ORDER BY x range BETWEEN 1000 preceding AND 1000 following) AS x, x FROM x ORDER BY x, x;
SELECT LAST_VALUE(x) OVER (ORDER BY x range BETWEEN 1000 preceding AND 1000 following) AS x, LAG(x) OVER (ORDER BY x range BETWEEN 1000 preceding AND 1000 following) AS x, x FROM x ORDER BY x, x;
SELECT LAST_VALUE(x) OVER (ORDER BY x range BETWEEN 1000 preceding AND 1000 following) AS x, LAG(x) OVER (ORDER BY x range BETWEEN 1000 preceding AND 1000 following) AS x, x FROM x ORDER BY x, x;
SELECT LAST_VALUE(x) OVER (ORDER BY x range BETWEEN 1000 preceding AND 1000 following) AS x, LAG(x) OVER (ORDER BY x range BETWEEN 1000 preceding AND 1000 following) AS x, x FROM x ORDER BY x, x;
SELECT LAST_VALUE(x) OVER (ORDER BY x range BETWEEN 1000 preceding AND 1000 following) AS x, LAG(x) OVER (ORDER BY x range BETWEEN 1000 preceding AND 1000 following) AS x, x FROM x ORDER BY x, x;
PRAGMA x;
CREATE TABLE x AS SELECT x, ROUND(x * 0.333, 0) % 3 AS x, ROUND(x * 0.333, 0) % 3 AS x FROM x AS x;
SELECT x, x, x, AVG(x) OVER (PARTITION BY x) AS x, AVG(x) FILTER(WHERE x = 1) OVER (PARTITION BY x) AS x, AVG(x) FILTER(WHERE x = 0) OVER (PARTITION BY x) AS x FROM x ORDER BY x, x;
SELECT x, x, x, COUNT(*) OVER (PARTITION BY x) AS x, COUNT(*) FILTER(WHERE x = 1) OVER (PARTITION BY x) AS x, COUNT(*) FILTER(WHERE x = 0) OVER (PARTITION BY x) AS x FROM x ORDER BY x, x;
SELECT x, x, x, MEDIAN(x) OVER (PARTITION BY x) AS x, MEDIAN(x) FILTER(WHERE x = 1) OVER (PARTITION BY x) AS x, MEDIAN(x) FILTER(WHERE x = 0) OVER (PARTITION BY x) AS x FROM x ORDER BY x, x;
SELECT x, COUNT(x) FILTER(WHERE x % 2 = 0) OVER (ORDER BY x ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING) FROM x AS x;
SELECT x, COUNT(x) FILTER(WHERE x % 2 = 0) OVER (ORDER BY x ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING) FROM x AS x;
SELECT x, COUNT(x) FILTER(WHERE x % 2 = 0) OVER (ORDER BY x ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING) FROM x AS x;
SELECT x, COUNT(x) FILTER(WHERE x % 2 = 0) OVER (ORDER BY x ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING) FROM x AS x;
PRAGMA x;
CREATE TABLE x (x DECIMAL(15, 2), x INT, x INT);
INSERT INTO x (VALUES(29733.00, 1, 2883), (1802.00, 1, 5121), (4505.00, 1, 6179), (29733.00, 1, 6273), (30634.00, 1, 8645), (41446.00, 1, 12005), (36040.00, 1, 16135), (29733.00, 1, 16198), (26129.00, 1, 20199), (24327.00, 1, 22117), (19822.00, 1, 24866), (24327.00, 1, 26756), (9010.00, 1, 27558), (45050.00, 1, 29859), (2703.00, 1, 34692), (11713.00, 1, 36611), (18020.00, 1, 38051), (21624.00, 1, 42465), (36040.00, 1, 42758), (39644.00, 1, 47620), (28832.00, 1, 50498), (12614.00, 1, 51970), (2703.00, 1, 53189), (22525.00, 1, 53825), (21624.00, 1, 54592), (36941.00, 1, 59202), (18942.00, 2, 548), (17138.00, 2, 807), (24354.00, 2, 2117), (9020.00, 2, 2528), (28864.00, 2, 4102), (42394.00, 2, 4452), (11726.00, 2, 7458), (39688.00, 2, 27969), (37884.00, 2, 28900), (9922.00, 2, 30278), (12628.00, 2, 30597), (7216.00, 2, 33058), (41492.00, 2, 37026), (40590.00, 2, 37123), (36982.00, 2, 39809), (36080.00, 2, 41415), (18942.00, 2, 42147), (24354.00, 2, 42533), (41492.00, 2, 43650), (45100.00, 2, 44103), (17138.00, 2, 46913), (31570.00, 2, 50499), (37884.00, 2, 54086), (26158.00, 2, 54436), (4510.00, 2, 54436), (3608.00, 2, 54630), (41492.00, 2, 55136));
SELECT x, x, x, SUM(x) OVER () FROM x ORDER BY x, x, x;
SELECT x, x, x, SUM(x) OVER (ORDER BY x) FROM x ORDER BY x, x, x;
SELECT x, x, x, SUM(x) OVER (ORDER BY x, x) FROM x ORDER BY x, x, x DESC;
SELECT x, x, x, SUM(x) OVER (ORDER BY x, x DESC) FROM x ORDER BY x, x, x DESC;
SELECT x, x, x, SUM(x) OVER (), SUM(x) OVER (ORDER BY x), SUM(x) OVER (ORDER BY x, x), SUM(x) OVER (ORDER BY x, x DESC) FROM x ORDER BY x, x, x DESC;
SELECT x, x, x, SUM(x) OVER (PARTITION BY x) FROM x ORDER BY x, x, x DESC;
SELECT x, x, x, SUM(x) OVER (PARTITION BY x ORDER BY x) FROM x ORDER BY x, x, x DESC;
SELECT x, x, x, SUM(x) OVER (PARTITION BY x ORDER BY x DESC) FROM x ORDER BY x, x, x DESC;
SELECT x, x, x, SUM(x) OVER (PARTITION BY x), SUM(x) OVER (PARTITION BY x ORDER BY x), SUM(x) OVER (PARTITION BY x ORDER BY x DESC) FROM x ORDER BY x, x, x DESC;
SELECT x, x, x, SUM(x) OVER (), SUM(x) OVER (ORDER BY x), SUM(x) OVER (ORDER BY x, x), SUM(x) OVER (PARTITION BY x ORDER BY x DESC) FROM x ORDER BY x, x, x DESC;
PRAGMA x;
CREATE TABLE x (x TEXT, x TEXT, x INT);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
PRAGMA x;
CREATE TABLE x AS SELECT CASE WHEN x % 2 = 0 THEN INTERVAL '1' YEAR ELSE INTERVAL '2' YEARS END AS x, CAST(x AS INT) AS x FROM x;
SELECT x, x, SUM(x) OVER () FROM x ORDER BY 1, 2;
SELECT x, x, SUM(x) OVER (PARTITION BY x) FROM x ORDER BY 1, 2;
SELECT x, x, SUM(x) OVER (PARTITION BY x ORDER BY x) FROM x ORDER BY 1, 2;
PRAGMA x;
SELECT *, ARRAY_AGG(x) OVER (PARTITION BY x ORDER BY x COLLATE nocase) AS x FROM (SELECT UNNEST([1, 1, 1, 1]) AS x, UNNEST(['A', 'a', 'b', 'B']) AS x);
CREATE TABLE x (x TEXT, x TEXT COLLATE x);
INSERT INTO x VALUES ('DuckDB', 'Amsterdam'), ('MonetDB', 'amsterdam'), ('VectorWise', 'Amstërdam');
SELECT x, x, ROW_NUMBER() OVER (PARTITION BY x) AS x FROM x;
SELECT x, x, ROW_NUMBER() OVER (PARTITION BY x COLLATE NOCASE) AS x FROM x;
PRAGMA x;
CREATE TABLE x (x REAL, x INT);
INSERT INTO x VALUES (5, 10), (10, 20), (13, 26), (13, 26), (15, 30), (20, 40), (22, 80), (30, 90);
SELECT CAST(x AS INT), SUM(x) OVER x FROM x WINDOW x AS (ORDER BY x, x RANGE BETWEEN 5 PRECEDING AND 5 FOLLOWING);
SELECT CAST(x AS INT), SUM(x) OVER x FROM x WINDOW x AS (ORDER BY x RANGE BETWEEN 'a' PRECEDING AND 'a' FOLLOWING);
SELECT CAST(x AS INT), SUM(x) OVER x FROM x WINDOW x AS (ORDER BY x RANGE BETWEEN 'a' PRECEDING AND 'a' FOLLOWING);
SELECT CAST(x AS INT), SUM(x) OVER x FROM x WINDOW x AS (ORDER BY x RANGE BETWEEN 'a' PRECEDING AND 'a' FOLLOWING);
DROP VIEW x;
CREATE VIEW x AS SELECT INTERVAL (x) DAYS AS x, x FROM x;
SELECT x, SUM(x) OVER x FROM x WINDOW x AS (ORDER BY x RANGE BETWEEN INTERVAL '5' DAYS PRECEDING AND INTERVAL '5' DAYS FOLLOWING);
DROP VIEW x;
CREATE VIEW x AS SELECT CAST('2021-07-28' AS DATE) + INTERVAL (x) DAYS AS x, x FROM x;
SELECT x, SUM(x) OVER x FROM x WINDOW x AS (ORDER BY x RANGE BETWEEN INTERVAL '5' DAYS PRECEDING AND INTERVAL '5' DAYS FOLLOWING);
DROP VIEW x;
CREATE VIEW x AS SELECT CAST('2021-07-28' AS TIMESTAMP) + INTERVAL (x) HOURS AS x, x FROM x;
SELECT x, SUM(x) OVER x FROM x WINDOW x AS (ORDER BY x RANGE BETWEEN INTERVAL '5' HOURS PRECEDING AND INTERVAL '5' HOURS FOLLOWING);
DROP VIEW x;
CREATE TABLE x (x TIME);
INSERT INTO x VALUES ('12:30:00'), ('22:30:00'), ('13:30:00'), ('01:30:00'), ('15:30:00'), ('20:30:00'), ('04:30:00'), ('06:30:00'), ('18:30:00'), ('21:30:00'), ('00:30:00'), ('00:31:00');
SELECT x, FIRST_VALUE(x) OVER x AS x FROM x WINDOW x AS (ORDER BY x RANGE BETWEEN INTERVAL '2' HOUR PRECEDING AND CURRENT ROW);
SELECT x, FIRST_VALUE(x) OVER x AS x FROM x WINDOW x AS (ORDER BY x RANGE BETWEEN INTERVAL '2' HOUR PRECEDING AND CURRENT ROW);
SELECT x, SUM(x) OVER x FROM x WINDOW x AS (ORDER BY x RANGE BETWEEN 5 PRECEDING AND 5 FOLLOWING);
DROP VIEW x;
CREATE TABLE x (x TEXT, x TEXT, x INT);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
SELECT CAST(x AS INT), SUM(x) OVER x FROM x WINDOW x AS (ORDER BY x RANGE BETWEEN 5 PRECEDING AND 5 FOLLOWING);
SELECT CAST(x AS INT), SUM(x) OVER x FROM x WINDOW x AS (ORDER BY x RANGE BETWEEN 10 PRECEDING AND 5 PRECEDING);
SELECT CAST(x AS INT), SUM(x) OVER x FROM x WINDOW x AS (ORDER BY x RANGE BETWEEN 2 FOLLOWING AND 3 FOLLOWING);
SELECT CAST(x AS INT), SUM(x) OVER x FROM x WINDOW x AS (ORDER BY x DESC RANGE BETWEEN 5 PRECEDING AND 5 FOLLOWING);
SELECT CAST(x AS INT), SUM(x) OVER x FROM x WINDOW x AS (ORDER BY x DESC RANGE BETWEEN 10 PRECEDING AND 5 PRECEDING);
SELECT CAST(x AS INT), SUM(x) OVER x FROM x WINDOW x AS (ORDER BY x DESC RANGE BETWEEN 2 FOLLOWING AND 3 FOLLOWING);
SELECT CAST(x AS INT), SUM(x) OVER x FROM x WINDOW x AS (ORDER BY x RANGE BETWEEN 5.1 PRECEDING AND 5.3 FOLLOWING);
SELECT CAST(x AS INT), SUM(x) OVER x FROM x WINDOW x AS (ORDER BY x RANGE BETWEEN 10.2 PRECEDING AND 5.4 PRECEDING);
SELECT CAST(x AS INT), SUM(x) OVER x FROM x WINDOW x AS (ORDER BY x RANGE BETWEEN 2.6 FOLLOWING AND 3.5 FOLLOWING);
SELECT CAST(x AS INT), SUM(x) OVER x FROM x WINDOW x AS (ORDER BY x DESC RANGE BETWEEN 5.7 PRECEDING AND 5.8 FOLLOWING);
SELECT CAST(x AS INT), SUM(x) OVER x FROM x WINDOW x AS (ORDER BY x DESC RANGE BETWEEN UNBOUNDED PRECEDING AND 5.9 PRECEDING);
SELECT CAST(x AS INT), SUM(x) OVER x FROM x WINDOW x AS (ORDER BY x DESC RANGE BETWEEN 2.1 FOLLOWING AND UNBOUNDED FOLLOWING);
SELECT CAST(x AS INT), SUM(x) OVER x FROM x WINDOW x AS (ORDER BY x RANGE BETWEEN 5.1 PRECEDING AND CURRENT ROW);
DROP TABLE IF EXISTS x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (NULL, 1), (NULL, 2), (NULL, 3), (10, 4), (10, 5);
SELECT SUM(x) OVER (ORDER BY x RANGE BETWEEN 5 PRECEDING AND 10 FOLLOWING) FROM x ORDER BY 1;
SELECT SUM(x) OVER (ORDER BY x DESC RANGE BETWEEN 5 PRECEDING AND 10 FOLLOWING) FROM x ORDER BY 1;
SELECT SUM(x) OVER (ORDER BY x RANGE BETWEEN 5 FOLLOWING AND 10 FOLLOWING) FROM x ORDER BY 1 NULLS FIRST;
SELECT SUM(x) OVER (ORDER BY x RANGE BETWEEN 5 FOLLOWING AND 10 FOLLOWING) FROM x ORDER BY 1;
SELECT SUM(x) OVER (ORDER BY x DESC RANGE BETWEEN 5 FOLLOWING AND 10 FOLLOWING) FROM x ORDER BY 1 NULLS FIRST;
SELECT SUM(x) OVER (ORDER BY x DESC RANGE BETWEEN 5 FOLLOWING AND 10 FOLLOWING) FROM x ORDER BY 1;
SELECT SUM(x) OVER (ORDER BY x NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND 10 FOLLOWING) FROM x ORDER BY 1 NULLS FIRST;
SELECT SUM(x) OVER (ORDER BY x RANGE BETWEEN UNBOUNDED PRECEDING AND 10 FOLLOWING) FROM x ORDER BY 1;
SELECT SUM(x) OVER (ORDER BY x ASC RANGE BETWEEN UNBOUNDED PRECEDING AND 10 FOLLOWING) FROM x ORDER BY 1;
SELECT SUM(x) OVER (ORDER BY x DESC NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND 10 FOLLOWING) FROM x ORDER BY 1;
SELECT SUM(x) OVER (ORDER BY x NULLS FIRST RANGE BETWEEN CURRENT ROW AND 10 FOLLOWING) FROM x ORDER BY 1 NULLS FIRST;
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
DROP TABLE IF EXISTS x;
CREATE TABLE x (x TEXT, x INT);
INSERT INTO x VALUES ('A', NULL);
INSERT INTO x VALUES ('B', NULL);
INSERT INTO x VALUES ('C', 1);
SELECT GROUP_CONCAT(x, '.') OVER (ORDER BY x NULLS FIRST RANGE BETWEEN 7 PRECEDING AND 2 PRECEDING) FROM x;
SELECT GROUP_CONCAT(x, '.') OVER (ORDER BY x DESC RANGE BETWEEN 7 PRECEDING AND 2 PRECEDING) FROM x;
DROP TABLE IF EXISTS x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (1, 65);
INSERT INTO x VALUES (2, NULL);
INSERT INTO x VALUES (3, NULL);
INSERT INTO x VALUES (4, NULL);
INSERT INTO x VALUES (5, 66);
INSERT INTO x VALUES (6, 67);
SELECT SUM(x) OVER x FROM x WINDOW x AS (ORDER BY x RANGE BETWEEN 6 FOLLOWING AND UNBOUNDED FOLLOWING);
SELECT SUM(x) OVER x FROM x WINDOW x AS (ORDER BY x RANGE BETWEEN 1 PRECEDING AND 2 PRECEDING);
SELECT SUM(x) OVER x FROM x WINDOW x AS (ORDER BY x RANGE BETWEEN 2 FOLLOWING AND 1 FOLLOWING);
SELECT SUM(x) OVER x FROM x WINDOW x AS (ORDER BY x NULLS FIRST RANGE BETWEEN 1 PRECEDING AND 2 PRECEDING);
SELECT SUM(x) OVER x FROM x WINDOW x AS (ORDER BY x NULLS FIRST RANGE BETWEEN 2 FOLLOWING AND 1 FOLLOWING);
SELECT SUM(x) OVER x FROM x WINDOW x AS (ORDER BY x RANGE BETWEEN 1000 PRECEDING AND 2 PRECEDING);
SELECT SUM(x) OVER x FROM x WINDOW x AS (ORDER BY x RANGE BETWEEN 2000 FOLLOWING AND 1000 FOLLOWING);
SELECT SUM(x) OVER x FROM x WINDOW x AS (ORDER BY x NULLS FIRST RANGE BETWEEN 1000 PRECEDING AND 2000 PRECEDING);
SELECT SUM(x) OVER x FROM x WINDOW x AS (ORDER BY x NULLS FIRST RANGE BETWEEN 2000 FOLLOWING AND 1000 FOLLOWING);
SELECT MIN(x) OVER x FROM x WINDOW x AS (ORDER BY x RANGE BETWEEN 6 FOLLOWING AND UNBOUNDED FOLLOWING);
SELECT MIN(x) OVER x FROM x WINDOW x AS (ORDER BY x RANGE BETWEEN 1 PRECEDING AND 2 PRECEDING);
SELECT MIN(x) OVER x FROM x WINDOW x AS (ORDER BY x RANGE BETWEEN 2 FOLLOWING AND 1 FOLLOWING);
SELECT MIN(x) OVER x FROM x WINDOW x AS (ORDER BY x NULLS FIRST RANGE BETWEEN 1 PRECEDING AND 2 PRECEDING);
SELECT MIN(x) OVER x FROM x WINDOW x AS (ORDER BY x NULLS FIRST RANGE BETWEEN 2 FOLLOWING AND 1 FOLLOWING);
SELECT MIN(x) OVER x FROM x WINDOW x AS (ORDER BY x RANGE BETWEEN 1000 PRECEDING AND 2 PRECEDING);
SELECT MIN(x) OVER x FROM x WINDOW x AS (ORDER BY x RANGE BETWEEN 2000 FOLLOWING AND 1000 FOLLOWING);
SELECT MIN(x) OVER x FROM x WINDOW x AS (ORDER BY x NULLS FIRST RANGE BETWEEN 1000 PRECEDING AND 2000 PRECEDING);
SELECT MIN(x) OVER x FROM x WINDOW x AS (ORDER BY x NULLS FIRST RANGE BETWEEN 2000 FOLLOWING AND 1000 FOLLOWING);
SELECT SUM(x) OVER x FROM x WINDOW x AS (ORDER BY x RANGE BETWEEN 6 FOLLOWING AND UNBOUNDED FOLLOWING);
SELECT SUM(x) OVER x FROM x WINDOW x AS (ORDER BY x RANGE BETWEEN 1 PRECEDING AND 2 PRECEDING);
SELECT SUM(x) OVER x FROM x WINDOW x AS (ORDER BY x RANGE BETWEEN 2 FOLLOWING AND 1 FOLLOWING);
SELECT SUM(x) OVER x FROM x WINDOW x AS (ORDER BY x NULLS FIRST RANGE BETWEEN 1 PRECEDING AND 2 PRECEDING);
SELECT SUM(x) OVER x FROM x WINDOW x AS (ORDER BY x NULLS FIRST RANGE BETWEEN 2 FOLLOWING AND 1 FOLLOWING);
SELECT SUM(x) OVER x FROM x WINDOW x AS (ORDER BY x RANGE BETWEEN 1000 PRECEDING AND 2 PRECEDING);
SELECT SUM(x) OVER x FROM x WINDOW x AS (ORDER BY x RANGE BETWEEN 2000 FOLLOWING AND 1000 FOLLOWING);
SELECT SUM(x) OVER x FROM x WINDOW x AS (ORDER BY x NULLS FIRST RANGE BETWEEN 1000 PRECEDING AND 2000 PRECEDING);
SELECT SUM(x) OVER x FROM x WINDOW x AS (ORDER BY x NULLS FIRST RANGE BETWEEN 2000 FOLLOWING AND 1000 FOLLOWING);
SELECT MAX(x) OVER x FROM x WINDOW x AS (ORDER BY x RANGE BETWEEN 6 FOLLOWING AND UNBOUNDED FOLLOWING);
SELECT MAX(x) OVER x FROM x WINDOW x AS (ORDER BY x RANGE BETWEEN 1 PRECEDING AND 2 PRECEDING);
SELECT MAX(x) OVER x FROM x WINDOW x AS (ORDER BY x RANGE BETWEEN 2 FOLLOWING AND 1 FOLLOWING);
SELECT MAX(x) OVER x FROM x WINDOW x AS (ORDER BY x NULLS FIRST RANGE BETWEEN 1 PRECEDING AND 2 PRECEDING);
SELECT MAX(x) OVER x FROM x WINDOW x AS (ORDER BY x NULLS FIRST RANGE BETWEEN 2 FOLLOWING AND 1 FOLLOWING);
SELECT MAX(x) OVER x FROM x WINDOW x AS (ORDER BY x RANGE BETWEEN 1000 PRECEDING AND 2 PRECEDING);
SELECT MAX(x) OVER x FROM x WINDOW x AS (ORDER BY x RANGE BETWEEN 2000 FOLLOWING AND 1000 FOLLOWING);
SELECT MAX(x) OVER x FROM x WINDOW x AS (ORDER BY x NULLS FIRST RANGE BETWEEN 1000 PRECEDING AND 2000 PRECEDING);
SELECT MAX(x) OVER x FROM x WINDOW x AS (ORDER BY x NULLS FIRST RANGE BETWEEN 2000 FOLLOWING AND 1000 FOLLOWING);
SELECT x, SUM(x) OVER (ORDER BY x RANGE BETWEEN 5 PRECEDING AND 0 PRECEDING) AS x FROM x AS x;
DROP TABLE IF EXISTS x;
CREATE TABLE x (x INT PRIMARY KEY);
INSERT INTO x VALUES (1), (2), (3), (4), (5), (6);
DROP TABLE IF EXISTS x;
CREATE TABLE x (x INT PRIMARY KEY, x TEXT);
INSERT INTO x VALUES (1, 'odd'), (2, 'even'), (3, 'odd'), (4, 'even'), (5, 'odd'), (6, 'even');
SELECT SUM(x) OVER (PARTITION BY (SELECT x FROM x WHERE x = x) ORDER BY x) FROM x ORDER BY ALL;
SELECT SUM(x) OVER x FROM x WINDOW x AS (PARTITION BY (SELECT x FROM x WHERE x = x) ORDER BY x) ORDER BY ALL;
WITH x AS (SELECT * FROM x) SELECT SUM(x) OVER (PARTITION BY (SELECT x FROM x WHERE x = x) ORDER BY x) FROM x ORDER BY ALL;
WITH x AS (SELECT * FROM x) SELECT SUM(x) OVER x FROM x WINDOW x AS (PARTITION BY (SELECT x FROM x WHERE x = x) ORDER BY x) ORDER BY ALL;
DROP TABLE IF EXISTS x;
DROP TABLE IF EXISTS x;
CREATE TABLE x (x INT);
CREATE TABLE x (x INT);
SELECT (SELECT MAX(x) OVER (ORDER BY (SELECT SUM(x) FROM x)) + MIN(x) OVER ()) FROM x;
SELECT x, SUM(x) OVER (ORDER BY x RANGE BETWEEN UNBOUNDED PRECEDING AND 10 FOLLOWING) FROM (SELECT CASE WHEN x < 70 THEN NULL ELSE 10 END AS x, x FROM x AS x) AS x ORDER BY 1;
PRAGMA x;
PRAGMA x = 10;
CREATE TABLE x AS SELECT x, x AS x FROM x AS x, x AS x;
SELECT COUNT(*) FROM (SELECT PERCENT_RANK() OVER (PARTITION BY x ORDER BY x) AS x FROM x);
PRAGMA x;
CREATE TABLE x (x TEXT, x TEXT, x INT);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
INSERT INTO x VALUES ('HH', 'bb', 355), ('CC', 'aa', 158), ('BB', 'aa', 399), ('FF', 'bb', 938), ('HH', 'aa', 480), ('FF', 'bb', 870), ('JJ', 'aa', 768), ('JJ', 'aa', 899), ('GG', 'bb', 929), ('II', 'bb', 421), ('GG', 'bb', 844), ('FF', 'bb', 574), ('CC', 'bb', 822), ('GG', 'bb', 938), ('BB', 'aa', 660), ('HH', 'aa', 979), ('BB', 'bb', 792), ('DD', 'aa', 845), ('JJ', 'bb', 354), ('FF', 'bb', 295), ('JJ', 'aa', 234), ('BB', 'bb', 840), ('AA', 'aa', 934), ('EE', 'aa', 113), ('AA', 'bb', 309), ('BB', 'aa', 412), ('AA', 'aa', 911), ('AA', 'bb', 572), ('II', 'aa', 398), ('II', 'bb', 250), ('II', 'aa', 652), ('BB', 'bb', 633), ('AA', 'aa', 239), ('FF', 'aa', 670), ('BB', 'bb', 705), ('HH', 'bb', 963), ('CC', 'bb', 346), ('II', 'bb', 671), ('BB', 'aa', 247), ('AA', 'aa', 223), ('GG', 'aa', 480), ('HH', 'aa', 790), ('FF', 'aa', 208), ('BB', 'bb', 711), ('EE', 'aa', 777), ('DD', 'bb', 716), ('CC', 'aa', 759), ('CC', 'aa', 430), ('CC', 'aa', 607), ('DD', 'bb', 794), ('GG', 'aa', 148), ('GG', 'aa', 634), ('JJ', 'bb', 257), ('DD', 'bb', 959), ('FF', 'bb', 726), ('BB', 'aa', 762), ('JJ', 'bb', 336), ('GG', 'aa', 335), ('HH', 'bb', 330), ('GG', 'bb', 160), ('JJ', 'bb', 839), ('FF', 'aa', 618), ('BB', 'aa', 393), ('EE', 'bb', 629), ('FF', 'aa', 667), ('AA', 'bb', 870), ('FF', 'bb', 102), ('JJ', 'aa', 113), ('DD', 'aa', 224), ('AA', 'bb', 627), ('HH', 'bb', 730), ('II', 'bb', 443), ('HH', 'bb', 133), ('EE', 'bb', 252), ('II', 'bb', 805), ('BB', 'bb', 786), ('EE', 'bb', 768), ('HH', 'bb', 683), ('DD', 'bb', 238), ('DD', 'aa', 256);
DROP TABLE IF EXISTS x;
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (NULL, 1), (NULL, 2), (NULL, 3), (10, 4), (10, 5);
SELECT SUM(x) OVER (ORDER BY x NULLS FIRST ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) FROM x ORDER BY 1 NULLS FIRST;
SELECT SUM(x) OVER (ORDER BY x ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) FROM x ORDER BY 1;
SELECT SUM(x) OVER (ORDER BY x DESC ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) FROM x ORDER BY 1 NULLS FIRST;
SELECT SUM(x) OVER (ORDER BY x DESC ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) FROM x ORDER BY 1;
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
INSERT INTO x VALUES (NULL, 'bb', 355), (NULL, 'cc', 158), (NULL, 'aa', 399), ('JJ', NULL, 839), ('FF', NULL, 618), ('BB', NULL, 393), (NULL, 'bb', 629), (NULL, NULL, 667), (NULL, NULL, 870);
PRAGMA x = 4;
PRAGMA x;
CREATE TABLE x AS (SELECT DISTINCT ON (x) * FROM x);
CREATE TABLE x AS (SELECT DISTINCT ON (x) * FROM x);
WITH x AS (SELECT * FROM x ORDER BY x), x AS (SELECT *, CASE WHEN x < LAG(x) OVER () THEN 1 ELSE 0 END AS x FROM x) SELECT * FROM x ORDER BY x;
WITH x AS (SELECT *, CASE WHEN x < LAG(x) OVER (ORDER BY x) THEN 1 ELSE 0 END AS x FROM x) SELECT * FROM x ORDER BY x;
WITH x AS (SELECT * FROM x ORDER BY x), x AS (SELECT x, {'x': x, 'x': x, 'x': x}, ROW_NUMBER() OVER () FROM x) SELECT * FROM x ORDER BY x;
WITH x AS (SELECT x, {'x': x, 'x': x, 'x': x}, ROW_NUMBER() OVER (ORDER BY x) FROM x) SELECT * FROM x ORDER BY x;
WITH x AS (SELECT * FROM x ORDER BY x), x AS (SELECT x, {'x': x, 'x': x, 'x': x}, ROW_NUMBER() OVER () FROM x) SELECT * FROM x ORDER BY x;
WITH x AS (SELECT x, {'x': x, 'x': x, 'x': x}, ROW_NUMBER() OVER (ORDER BY x) FROM x) SELECT * FROM x ORDER BY x;
WITH x AS (SELECT * FROM x ORDER BY x), x AS (SELECT x, [x], [x], [x], ROW_NUMBER() OVER () FROM x) SELECT * FROM x ORDER BY x;
SELECT x, [x], [x], [x], ROW_NUMBER() OVER (ORDER BY x) FROM x;
WITH x AS (SELECT * FROM x ORDER BY x), x AS (SELECT x, [x], [x], [x], ROW_NUMBER() OVER () FROM x) SELECT * FROM x ORDER BY x;
WITH x AS (SELECT x, [x], [x], [x], ROW_NUMBER() OVER (ORDER BY x) FROM x) SELECT * FROM x ORDER BY x;
PRAGMA x;
CREATE TABLE x AS SELECT x % 3 AS x, CAST(x AS TEXT) AS x, CASE WHEN x % 3 = 0 THEN '-' ELSE '|' END AS x FROM x;
SELECT x, x, GROUP_CONCAT(x) OVER (PARTITION BY x ORDER BY x) FROM x ORDER BY x, x;
SELECT x, x, GROUP_CONCAT(x, '|') OVER (PARTITION BY x ORDER BY x) FROM x ORDER BY x, x;
SELECT x, x, GROUP_CONCAT(x, x) OVER (PARTITION BY x ORDER BY x) FROM x ORDER BY x, x;
PRAGMA x;
BEGIN;
CREATE TABLE x (x TEXT, x TEXT, x INT);
INSERT INTO x VALUES ('toys', 'fisher-price', 100);
SELECT x, x, AVG(SUM(x)) OVER (PARTITION BY x), RANK() OVER (PARTITION BY x ORDER BY x, x) AS x FROM x GROUP BY x, x;
ROLLBACK;
BEGIN;
CREATE TABLE x (x TEXT, x TEXT, x INT);
CREATE TABLE x (x TEXT, x TEXT, x INT);
CREATE TABLE x (x INT, x INT, x INT);
CREATE TABLE x (x DECIMAL(18, 3), x INT, x INT, x INT);
INSERT INTO x VALUES ('Music', 'exportischolar', 1);
INSERT INTO x VALUES ('ought', 'Unknown', 1);
INSERT INTO x VALUES (1999, 1, 1);
INSERT INTO x VALUES (2.8, 1, 1, 1);
SELECT x, x, x, x, x, x, SUM(x) AS x, AVG(SUM(x)) OVER (PARTITION BY x, x, x, x, x) AS x, RANK() OVER (PARTITION BY x, x, x, x ORDER BY x, x) AS x FROM x, x, x, x WHERE x = x AND x = x AND x = x AND (x = 1999 OR (x = 1999 - 1 AND x = 12) OR (x = 1999 + 1 AND x = 1)) GROUP BY x, x, x, x, x, x;
CREATE TABLE x AS SELECT 42 AS x;
SELECT SUM(x) OVER (ROWS BETWEEN UNNEST([1]) PRECEDING AND 1 FOLLOWING) FROM x;
SELECT SUM(x) OVER (ROWS BETWEEN 1 PRECEDING AND UNNEST([1]) FOLLOWING) FROM x;
SELECT LEAD(x, UNNEST([1])) OVER (ROWS BETWEEN 2 PRECEDING AND 4 PRECEDING) FROM (VALUES (1, 2)) AS x;
SELECT x, COUNT(x) FILTER(WHERE x % 2 = UNNEST([2])) OVER (ORDER BY x ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING) FROM x AS x;
SELECT LEAD(x, 0, UNNEST([1])) OVER (ROWS BETWEEN 2 PRECEDING AND 4 PRECEDING) FROM (VALUES (1, 2)) AS x;
SELECT SUM(x) OVER (ROWS BETWEEN (SELECT UNNEST([1])) PRECEDING AND 1 FOLLOWING) FROM x;
SELECT LEAD(x, (SELECT UNNEST([0])), (SELECT UNNEST([1]))) OVER (ROWS BETWEEN 2 PRECEDING AND 4 PRECEDING) FROM (VALUES (1, 2)) AS x;
CREATE TABLE x ("x" INT, "x" INT, "x" DATE, "x" DOUBLE, "x" BOOLEAN);
INSERT INTO x SELECT * FROM x;
PRAGMA x = 4;
SELECT *, LAG(x, 1) OVER (PARTITION BY "x", "x" ORDER BY "x" ASC) AS x, LAG(x, 2) OVER (PARTITION BY "x", "x" ORDER BY "x" ASC) AS x, LAG(x, 3) OVER (PARTITION BY "x", "x" ORDER BY "x" ASC) AS x, LAG(x, 4) OVER (PARTITION BY "x", "x" ORDER BY "x" ASC) AS x, LAG(x, 5) OVER (PARTITION BY "x", "x" ORDER BY "x" ASC) AS x, LAG(x, 6) OVER (PARTITION BY "x", "x" ORDER BY "x" ASC) AS x, LAG(x, 7) OVER (PARTITION BY "x", "x" ORDER BY "x" ASC) AS x, LAG(x, 8) OVER (PARTITION BY "x", "x" ORDER BY "x" ASC) AS x, LAG(x, 9) OVER (PARTITION BY "x", "x" ORDER BY "x" ASC) AS x, LAG(x, 10) OVER (PARTITION BY "x", "x" ORDER BY "x" ASC) AS x FROM x;
SELECT *, LAG(x, 1) OVER (PARTITION BY "x", "x" ORDER BY "x" ASC) AS x, LAG(x, 2) OVER (PARTITION BY "x", "x" ORDER BY "x" ASC) AS x, LAG(x, 3) OVER (PARTITION BY "x", "x" ORDER BY "x" ASC) AS x, LAG(x, 4) OVER (PARTITION BY "x", "x" ORDER BY "x" ASC) AS x, LAG(x, 5) OVER (PARTITION BY "x", "x" ORDER BY "x" ASC) AS x, LAG(x, 6) OVER (PARTITION BY "x", "x" ORDER BY "x" ASC) AS x, LAG(x, 7) OVER (PARTITION BY "x", "x" ORDER BY "x" ASC) AS x, LAG(x, 8) OVER (PARTITION BY "x", "x" ORDER BY "x" ASC) AS x, LAG(x, 9) OVER (PARTITION BY "x", "x" ORDER BY "x" ASC) AS x, LAG(x, 10) OVER (PARTITION BY "x", "x" ORDER BY "x" ASC) AS x FROM x;
PRAGMA x;
SELECT SETSEED(0.618033);
CREATE TABLE x AS SELECT CAST((RANDOM() * 100) AS INT) AS x, CAST('2020-10-15 16:45:00' AS TIMESTAMP) + INTERVAL (RANDOM() * 15 * 60) SECOND AS "x" FROM x;
SELECT x, MEDIAN(x) OVER x, COUNT(*) OVER x FROM x WINDOW x AS (ORDER BY x ASC range BETWEEN INTERVAL '55' SECONDS preceding AND INTERVAL '58' SECONDS following) ORDER BY 3 DESC LIMIT 1;
SET x = 'nulls_first';
PRAGMA x;
CREATE TABLE x (x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x INT, x TEXT, x TEXT, x TEXT);
INSERT INTO x VALUES (8800, 0, 0, 0, 0, 0, 0, 800, 800, 3800, 8800, 0, 1, 'MAAAAA', 'AAAAAA', 'AAAAxx'), (1891, 1, 1, 3, 1, 11, 91, 891, 1891, 1891, 1891, 182, 183, 'TUAAAA', 'BAAAAA', 'HHHHxx'), (3420, 2, 0, 0, 0, 0, 20, 420, 1420, 3420, 3420, 40, 41, 'OBAAAA', 'CAAAAA', 'OOOOxx'), (9850, 3, 0, 2, 0, 10, 50, 850, 1850, 4850, 9850, 100, 101, 'WOAAAA', 'DAAAAA', 'VVVVxx'), (7164, 4, 0, 0, 4, 4, 64, 164, 1164, 2164, 7164, 128, 129, 'OPAAAA', 'EAAAAA', 'AAAAxx'), (8009, 5, 1, 1, 9, 9, 9, 9, 9, 3009, 8009, 18, 19, 'BWAAAA', 'FAAAAA', 'HHHHxx'), (5057, 6, 1, 1, 7, 17, 57, 57, 1057, 57, 5057, 114, 115, 'NMAAAA', 'GAAAAA', 'OOOOxx'), (6701, 7, 1, 1, 1, 1, 1, 701, 701, 1701, 6701, 2, 3, 'TXAAAA', 'HAAAAA', 'VVVVxx'), (4321, 8, 1, 1, 1, 1, 21, 321, 321, 4321, 4321, 42, 43, 'FKAAAA', 'IAAAAA', 'AAAAxx'), (3043, 9, 1, 3, 3, 3, 43, 43, 1043, 3043, 3043, 86, 87, 'BNAAAA', 'JAAAAA', 'HHHHxx');
SELECT COUNT(*) OVER () FROM x;
SELECT SUM(x) OVER (PARTITION BY x ORDER BY x) AS x, x, x FROM x WHERE x < 10 ORDER BY x, x;
SELECT ROW_NUMBER() OVER (ORDER BY x) AS x FROM x WHERE x < 10 ORDER BY x;
SELECT RANK() OVER (PARTITION BY x ORDER BY x) AS x, x, x FROM x WHERE x < 10 ORDER BY x, x;
SELECT DENSE_RANK() OVER (PARTITION BY x ORDER BY x) FROM x WHERE x < 10 ORDER BY x, x;
SELECT FIRST_VALUE(x) OVER (PARTITION BY x ORDER BY x) FROM x WHERE x < 10 ORDER BY x, x;
SELECT CAST(PERCENT_RANK() OVER (PARTITION BY x ORDER BY x) * 10 AS INT) FROM x ORDER BY x, x;
SELECT CAST(CUME_DIST() OVER (PARTITION BY x ORDER BY x) * 10 AS INT) FROM x WHERE x < 10 ORDER BY x, x;
SELECT NTILE(2) OVER (ORDER BY x, x) AS x FROM x ORDER BY x, x, x;
SELECT NTILE(3) OVER (ORDER BY x, x) AS x FROM x ORDER BY x, x, x;
SELECT NTILE(4) OVER (ORDER BY x, x) AS x FROM x ORDER BY x, x, x;
SELECT NTILE(5) OVER (ORDER BY x, x) AS x FROM x ORDER BY x, x, x;
SELECT LAG(x) OVER (PARTITION BY x ORDER BY x) AS x FROM x ORDER BY x, x, x;
SELECT LEAD(x) OVER (PARTITION BY x ORDER BY x) AS x FROM x ORDER BY x, x, x;
SELECT LAG(x, x) OVER (PARTITION BY x ORDER BY x) AS x FROM x ORDER BY x, x, x;
SELECT LAG(x, x, 0) OVER (PARTITION BY x ORDER BY x) AS x FROM x ORDER BY x, x, x;
SELECT LAG(x, x, 0) OVER (PARTITION BY x ORDER BY x) AS x FROM x ORDER BY x, x, x;
SELECT LEAD(x) OVER (PARTITION BY x ORDER BY x) AS x FROM x ORDER BY x, x, x;
SELECT LEAD(x * 2, 1) OVER (PARTITION BY x ORDER BY x) AS x FROM x ORDER BY x, x, x;
SELECT LEAD(x * 2, 1, -1) OVER (PARTITION BY x ORDER BY x) AS x FROM x ORDER BY x, x, x;
SELECT COUNT(*) OVER x AS x, SUM(x) OVER x AS x, CAST(AVG(x) OVER x * 10 AS INT) AS x, RANK() OVER x AS x, DENSE_RANK() OVER x AS x, ROW_NUMBER() OVER x AS x FROM x WINDOW x AS () ORDER BY x;
SELECT COUNT(*) OVER x AS x, SUM(x) OVER x AS x, CAST(AVG(x) OVER x * 10 AS INT) AS x, RANK() OVER x AS x, DENSE_RANK() OVER x AS x, ROW_NUMBER() OVER x AS x FROM x WINDOW x AS (rows BETWEEN 1 preceding AND 1 following) ORDER BY x;
PRAGMA x;
CREATE TABLE x (x DECIMAL(18, 3), x INT, x DECIMAL(18, 3), x INT, x DECIMAL(18, 3), x DECIMAL(18, 3), x DECIMAL(18, 3), x INT, x INT, x INT, x INT);
INSERT INTO x VALUES ('21.0', '6', '160.0', '110', '3.90', '2.620', '16.46', '0', '1', '4', '4');
INSERT INTO x VALUES ('21.0', '6', '160.0', '110', '3.90', '2.875', '17.02', '0', '1', '4', '4');
INSERT INTO x VALUES ('22.8', '4', '108.0', '93', '3.85', '2.320', '18.61', '1', '1', '4', '1');
INSERT INTO x VALUES ('21.4', '6', '258.0', '110', '3.08', '3.215', '19.44', '1', '0', '3', '1');
INSERT INTO x VALUES ('18.7', '8', '360.0', '175', '3.15', '3.440', '17.02', '0', '0', '3', '2');
INSERT INTO x VALUES ('18.1', '6', '225.0', '105', '2.76', '3.460', '20.22', '1', '0', '3', '1');
INSERT INTO x VALUES ('14.3', '8', '360.0', '245', '3.21', '3.570', '15.84', '0', '0', '3', '4');
INSERT INTO x VALUES ('24.4', '4', '146.7', '62', '3.69', '3.190', '20.00', '1', '0', '4', '2');
INSERT INTO x VALUES ('22.8', '4', '140.8', '95', '3.92', '3.150', '22.90', '1', '0', '4', '2');
INSERT INTO x VALUES ('19.2', '6', '167.6', '123', '3.92', '3.440', '18.30', '1', '0', '4', '4');
INSERT INTO x VALUES ('17.8', '6', '167.6', '123', '3.92', '3.440', '18.90', '1', '0', '4', '4');
INSERT INTO x VALUES ('16.4', '8', '275.8', '180', '3.07', '4.070', '17.40', '0', '0', '3', '3');
INSERT INTO x VALUES ('17.3', '8', '275.8', '180', '3.07', '3.730', '17.60', '0', '0', '3', '3');
INSERT INTO x VALUES ('15.2', '8', '275.8', '180', '3.07', '3.780', '18.00', '0', '0', '3', '3');
INSERT INTO x VALUES ('10.4', '8', '472.0', '205', '2.93', '5.250', '17.98', '0', '0', '3', '4');
INSERT INTO x VALUES ('10.4', '8', '460.0', '215', '3.00', '5.424', '17.82', '0', '0', '3', '4');
INSERT INTO x VALUES ('14.7', '8', '440.0', '230', '3.23', '5.345', '17.42', '0', '0', '3', '4');
INSERT INTO x VALUES ('32.4', '4', '78.7', '66', '4.08', '2.200', '19.47', '1', '1', '4', '1');
INSERT INTO x VALUES ('30.4', '4', '75.7', '52', '4.93', '1.615', '18.52', '1', '1', '4', '2');
INSERT INTO x VALUES ('33.9', '4', '71.1', '65', '4.22', '1.835', '19.90', '1', '1', '4', '1');
INSERT INTO x VALUES ('21.5', '4', '120.1', '97', '3.70', '2.465', '20.01', '1', '0', '3', '1');
INSERT INTO x VALUES ('15.5', '8', '318.0', '150', '2.76', '3.520', '16.87', '0', '0', '3', '2');
INSERT INTO x VALUES ('15.2', '8', '304.0', '150', '3.15', '3.435', '17.30', '0', '0', '3', '2');
INSERT INTO x VALUES ('13.3', '8', '350.0', '245', '3.73', '3.840', '15.41', '0', '0', '3', '4');
INSERT INTO x VALUES ('19.2', '8', '400.0', '175', '3.08', '3.845', '17.05', '0', '0', '3', '2');
INSERT INTO x VALUES ('27.3', '4', '79.0', '66', '4.08', '1.935', '18.90', '1', '1', '4', '1');
INSERT INTO x VALUES ('26.0', '4', '120.3', '91', '4.43', '2.140', '16.70', '0', '1', '5', '2');
INSERT INTO x VALUES ('30.4', '4', '95.1', '113', '3.77', '1.513', '16.90', '1', '1', '5', '2');
INSERT INTO x VALUES ('15.8', '8', '351.0', '264', '4.22', '3.170', '14.50', '0', '1', '5', '4');
INSERT INTO x VALUES ('19.7', '6', '145.0', '175', '3.62', '2.770', '15.50', '0', '1', '5', '6');
INSERT INTO x VALUES ('15.0', '8', '301.0', '335', '3.54', '3.570', '14.60', '0', '1', '5', '8');
INSERT INTO x VALUES ('21.4', '4', '121.0', '109', '4.11', '2.780', '18.60', '1', '1', '4', '2');
SELECT x, SUM(x) OVER (ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) AS x FROM x;
CREATE OR REPLACE TABLE x AS SELECT CAST((x % 500) AS SMALLINT) AS "x", CAST((x % 5000) AS SMALLINT) AS "x", LEFT(CAST(UUID() AS TEXT), 10) AS "x" FROM x AS x;
PRAGMA x = '__TEST_DIR__/window_paging';
PRAGMA x = '1GB';
PRAGMA x;
WITH x AS (SELECT x, x, x, 'CLAIM' || DENSE_RANK() OVER (PARTITION BY x, x ORDER BY x) AS x FROM x) SELECT MAX(x), COUNT(*) FROM x;
PRAGMA x;
CREATE TABLE x AS SELECT * FROM x AS x;
SELECT *, x = x FROM (SELECT x, x, CASE WHEN x = 0 THEN 0 ELSE x * 2 - 1 END AS x, SUM(x) OVER (ORDER BY x ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) AS x FROM x) AS x WHERE x BETWEEN 892 AND 902 ORDER BY x;
