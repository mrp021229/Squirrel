SET client_min_messages = 'x';
RESET AS client_min_messages;
SELECT X(x.x, 'x') FROM x AS p;
CREATE SCHEMA x;
CREATE TABLE x.testpub_nopk (x INT, x INT);
CREATE VIEW x AS SELECT 1;
CREATE TABLE x (x INT) WITH (PARTITIONED_BY=LIST(a));
SELECT x, x FROM x WHERE x = 'x';
DROP TABLE x;
CREATE TABLE x (x INT);
CREATE TABLE x (x TEXT) INHERITS (x);
GRANT CREATE ON DATABASE regression TO x;
DROP VIEW x;
DROP SCHEMA pub_test CASCADE;
SET extra_float_digits = 1;
SELECT 'x' AS four, X(x) AS center FROM x;
SELECT 'x' AS six, X(x) AS center FROM x;
SELECT x.x, x.x, X(x.x, x.x) FROM x AS p1, x AS p2;
SELECT x.x, x.x, x.x + x.x FROM x AS p1, x AS p2;
SELECT x.x, x.x, x.x - x.x FROM x AS p1, x AS p2;
SELECT x.x, x.x, x.x * x.x FROM x AS p1, x AS p2 WHERE x.x[1] BETWEEN 1 AND 1;
SELECT x.x, x.x, x.x * x.x FROM x AS p1, x AS p2 WHERE x.x[1] < 1;
SELECT x.x, x.x, x.x / NULLIF(x.x, 0) FROM x AS p1, x AS p2 WHERE x.x[1] BETWEEN 1 AND 1;
SELECT x.x, x.x, x.x / NULLIF(x.x, 0) FROM x AS p1, x AS p2 WHERE x.x[1] > 1;
SELECT x FROM x WHERE ? | x;
SELECT x FROM x WHERE ? - x;
SELECT x.x, x.x FROM x AS l1, x AS l2 WHERE x.x = x.x;
SELECT x.x, x.x FROM x AS l1, x AS l2 WHERE x.x < x.x;
SELECT x.x, x.x FROM x AS l1, x AS l2 WHERE x.x <= x.x;
SELECT x.x, x.x FROM x AS l1, x AS l2 WHERE x.x >= x.x;
SELECT x.x, x.x FROM x AS l1, x AS l2 WHERE x.x > x.x;
SELECT x.x, x.x FROM x AS l1, x AS l2 WHERE x.x <> x.x;
SELECT 'x' AS six, X(x) AS box FROM x;
SELECT 'x' AS twentyfour, x.x + x.x AS translation FROM x AS b, x AS p;
SELECT 'x' AS twentyfour, x.x - x.x AS translation FROM x AS b, x AS p;
SELECT x.x, x.x, x.x * x.x FROM x AS b, x AS p WHERE x.x[1] BETWEEN 1 AND 1;
SELECT x.x, x.x, x.x * x.x FROM x AS b, x AS p WHERE x.x[1] > 1;
SELECT x.x, x.x, x.x / NULLIF(x.x, 0) FROM x AS b, x AS p WHERE x.x[1] BETWEEN 1 AND 1;
SELECT X(x.x, x.x) FROM x AS a, x AS b;
SELECT x.x, x.x FROM x AS p1, x AS p2 WHERE x.x <= x.x;
SELECT x.x, x.x FROM x AS p1, x AS p2 WHERE x.x = x.x;
SELECT x.x, x.x FROM x AS p1, x AS p2 WHERE x.x >= x.x;
SELECT x.x, x.x FROM x AS p1, x AS p2 WHERE x.x > x.x;
SELECT x.x, x.x, x.x + x.x FROM x AS p, x AS p1;
SELECT x.x, x.x, x.x - x.x FROM x AS p, x AS p1;
SELECT x.x, x.x, x.x * x.x FROM x AS p, x AS p1;
SELECT x.x, x.x, x.x / NULLIF(x.x, 0) FROM x AS p, x AS p1 WHERE x.x[1] BETWEEN 1 AND 1;
SELECT 'x' AS four, X(x) AS npoints, x AS polygon FROM x;
SELECT 'x' AS four, X(x) FROM x;
SELECT 'x' AS four, X(x) FROM x WHERE X(x);
SELECT 'x' AS four, x AS open_path, X(X(x)) AS polygon FROM x WHERE X(x);
SELECT 'x' AS six, X(x, 50.000000) FROM x;
SELECT x, X(1, x) FROM x WHERE x >= 'x';
SELECT x, X(1, x) FROM x WHERE x < 'x';
SELECT x.x, x.x FROM x AS c1, x AS c2 WHERE x.x AND x.x;
SELECT x.x, x.x FROM x AS c1, x AS c2 WHERE x.x <> x.x;
SELECT x.x, x.x FROM x AS c1, x AS c2 WHERE x.x <= x.x;
SELECT x.x, x.x FROM x AS c1, x AS c2 WHERE x.x >= x.x;
SELECT x.x, x.x, x.x + x.x FROM x AS c, x AS p;
SELECT x.x, x.x, x.x - x.x FROM x AS c, x AS p;
SELECT x.x, x.x, x.x * x.x FROM x AS c, x AS p;
SELECT x.x, x.x, x.x / NULLIF(x.x, 0) FROM x AS c, x AS p WHERE x.x[1] BETWEEN 1 AND 1;
SELECT x.x, x.x, x.x / NULLIF(x.x, 0) FROM x AS c, x AS p WHERE x.x[1] > 1;
CREATE INDEX x ON x USING spgist(x) WITH (fillfactor=1);
INSERT INTO x (x, x) SELECT x, X(x * 1, x * 1) FROM X(1, 1) AS g;
DELETE FROM x WHERE x < 1;
INSERT INTO x (x, x) SELECT x + 1, X(x * 1 + 1, x * 1 + 1) FROM X(1, 1) AS g;
DELETE FROM x WHERE x % 1 = 1;
INSERT INTO x (x) SELECT X(X(x, x), X(x + x, x + x)) FROM X(1, 1, 1) AS i, X(1, 1, 1) AS j, X(1, 1) AS s;
CREATE INDEX x ON x USING spgist(x);
SELECT X(*) FROM (VALUES (X(1, 1)), (X(1, 1)), (X(1, 1))) AS v(p) WHERE EXISTS(SELECT * FROM x AS b WHERE x.x AND X(x.x, x.x));
CREATE TABLE x (x INT, x TEXT);
INSERT INTO x (x, x) SELECT -x, 'x' OR X('x', 1 - x) OR 'x' FROM X(1, 1) AS g;
ALTER INDEX x SET fillfactor = 1;
BEGIN;
CLOSE AS foo13;
CLOSE AS foo14;
CLOSE AS foo15;
CLOSE AS foo16;
CLOSE AS foo17;
CLOSE AS foo18;
CLOSE AS foo19;
CLOSE AS foo20;
CLOSE AS foo21;
CLOSE AS foo22;
CLOSE AS foo23;
CLOSE AS foo24;
CLOSE AS foo25;
END;
ROLLBACK;
CREATE TEMPORARY SEQUENCE x;
SELECT x, x, X('x') FROM x ORDER BY x LIMIT 1;
SELECT X('x');
SELECT x, x, X(1, 1) FROM x ORDER BY x LIMIT 1;
SELECT X(x) AS s1, X(x) + X() * 1 AS s2 FROM x GROUP BY x ORDER BY x LIMIT 1;
SET client_min_messages = 'x';
SET search_path = 'x';
CREATE TABLE x.gentable (x SERIAL PRIMARY KEY CONSTRAINT a_chk CHECK (x > 1), x TEXT DEFAULT 'x');
CREATE VIEW x.genview AS SELECT * FROM x.gentable;
CREATE MATERIALIZED VIEW x.genmatview AS SELECT * FROM x.gentable;
SELECT X('x', 'x', 'x');
DROP SCHEMA addr_nsp CASCADE;
DROP TABLE IF EXISTS x;
CREATE TABLE x (x INT, x TEXT);
DROP VIEW IF EXISTS x;
CREATE VIEW x AS SELECT * FROM x;
DROP INDEX x;
DROP INDEX IF EXISTS x;
CREATE INDEX x ON x(x);
DROP SEQUENCE x;
DROP SEQUENCE IF EXISTS x;
CREATE SEQUENCE x;
DROP SCHEMA test_schema_exists;
DROP SCHEMA IF EXISTS test_schema_exists;
DROP FUNCTION x;
DROP FUNCTION IF EXISTS x;
DROP FUNCTION x (INT, TEXT, ARRAY<INT>);
DROP FUNCTION IF EXISTS x (INT, TEXT, ARRAY<INT>);
DROP FUNCTION IF EXISTS no_such_schema.foo;
DROP INDEX IF EXISTS x.foo;
DROP MATERIALIZED VIEW IF EXISTS x.foo;
DROP SEQUENCE IF EXISTS x.foo;
DROP TABLE IF EXISTS x.foo;
DROP VIEW IF EXISTS x.foo;
DROP FUNCTION IF EXISTS test_ambiguous_funcname;
DROP FUNCTION x (INT);
DROP FUNCTION x (TEXT);
DROP PROCEDURE IF EXISTS test_ambiguous_procname;
DROP PROCEDURE x (INT);
DROP PROCEDURE x (TEXT);
CREATE TABLE x (x TINYINT, x TINYINT);
INSERT INTO x VALUES ('x', 'x');
INSERT INTO x VALUES (1, 'x');
INSERT INTO x (x) VALUES ('x');
SELECT * FROM x;
SELECT * FROM x WHERE x = 1;
SELECT * FROM x WHERE x < 1;
SELECT * FROM x WHERE x > 1;
SELECT * FROM x WHERE x <= 1;
SELECT * FROM x WHERE x >= 1;
SELECT * FROM x WHERE 1 = x;
SELECT * FROM x WHERE 1 < x;
SELECT * FROM x WHERE 1 > x;
SELECT * FROM x WHERE 1 <= x;
SELECT * FROM x WHERE 1 >= x;
SELECT 'x' AS five, x AS plus, -x AS minus FROM x;
SELECT 'x' AS five, x, x, x + x AS plus FROM x;
SELECT 'x' AS five, x, x, x - x AS minus FROM x;
SELECT 'x' AS three, x, x, x * x AS multiply FROM x;
SELECT 'x' AS three, x, x, x * x AS multiply FROM x WHERE x < 1 OR (x > 1 AND x < 1);
SELECT 'x' AS five, x, x, x / NULLIF(x, 0) AS divide, x % x AS mod FROM x;
SELECT 'x' AS five, x, X(x) FROM x;
SELECT 1 + x AS plus4 FROM x;
SELECT 1 - x AS minus4 FROM x;
SELECT X(x), X(x) FROM x;
SELECT 'x' AS to_char_1, X(x, 'x'), X(x, 'x') FROM x;
SELECT 'x' AS to_char_2, X(x, 'x'), X(x, 'x') FROM x;
SELECT 'x' AS to_char_3, X((x * 1), 'x'), X((x * 1), 'x') FROM x;
SELECT 'x' AS to_char_4, X((x * 1), 'x'), X((x * 1), 'x') FROM x;
SELECT 'x' AS to_char_5, X(x, 'x') FROM x;
SELECT 'x' AS to_char_6, X(x, 'x') FROM x;
SELECT 'x' AS to_char_7, X(x, 'x') FROM x;
SELECT 'x' AS to_char_8, X(x, 'x') FROM x;
SELECT 'x' AS to_char_9, X(x, 'x') FROM x;
SELECT 'x' AS to_char_10, X(x, 'x') FROM x;
SELECT 'x' AS to_char_11, X(x, 'x') FROM x;
SELECT 'x' AS to_char_12, X(x, 'x') FROM x;
SELECT 'x' AS to_char_13, X(x, 'x') FROM x;
SELECT 'x' AS to_char_14, X(x, 'x') FROM x;
SELECT 'x' AS to_char_15, X(x, 'x') FROM x;
SELECT 'x' AS to_char_17, X(x, 'x') FROM x;
SELECT CAST(x AS INT) FROM x WHERE x = 1;
SELECT CAST(x AS SMALLINT) FROM x WHERE x = 1;
SELECT CAST(x AS FLOAT), CAST(x AS DOUBLE) FROM x;
SELECT x, EXTRACT(YEAR FROM x), X(*) FROM x GROUP BY 1, 1 ORDER BY 1, 1;
INSERT INTO x SELECT 1, x, 'x' OR x FROM X(1, 1) AS x;
INSERT INTO x VALUES (1, ((3.300000, 4.400000), (5.500000, 6.600000)));
INSERT INTO x VALUES (1, ((NULL, 4.400000), (5.500000, 6.600000)));
ALTER TABLE x ADD COLUMN x TEXT DEFAULT 'x';
ALTER TABLE x ADD COLUMN x TEXT DEFAULT NULL;
UPDATE x SET x.suffix = 'x';
CREATE TEMPORARY TABLE x (x TEXT);
INSERT INTO x VALUES (X('x', 1));
CREATE TEMPORARY TABLE x (x TEXT, x TEXT);
INSERT INTO x SELECT 'x', NULL FROM X(1, 1);
CREATE INDEX ON x(x, x);
SET enable_sort = off;
SELECT x, x FROM x WHERE (x, x) > ('x', 'x') ORDER BY x, x;
RESET AS enable_sort;
SELECT (ROW(1, 2.000000)).f1;
SELECT (ROW(1, 2.000000)).f2;
SELECT (x).f1 FROM (SELECT ROW(1, 2.000000) AS r) AS ss;
SELECT ROW();
SELECT ROW() IS NULL;
SELECT ROW() = ROW();
SELECT ARRAY(ROW(1, 1), ROW(1, 1), ROW(1, 1));
SELECT ROW(1, 1.100000) = ANY(ARRAY(ROW(1, 7.700000), ROW(1, 1.100000), ROW(1, 0.000000)));
SELECT ROW(1, 1.100000) = ANY(ARRAY(ROW(1, 7.700000), ROW(1, 1.000000), ROW(1, 0.000000)));
INSERT INTO x VALUES ('x');
CREATE TABLE x (x SERIAL PRIMARY KEY, x BOOLEAN NOT NULL, x DECIMAL);
CREATE TEMPORARY TABLE x (x INT, x TEXT);
SELECT CAST(x AS TEXT) FROM x;
SELECT X(x) FROM x AS f;
ALTER TABLE x ADD COLUMN x TEXT;
SELECT X(x) FROM x AS i;
SELECT X(x) FROM x AS i(x, y);
CREATE TEMPORARY VIEW x AS SELECT * FROM x;
SELECT X(x) FROM (SELECT x, x FROM x) AS ss;
SELECT X(x) FROM (SELECT x, x FROM x OFFSET 1) AS ss;
SELECT X(x) FROM (SELECT x AS a, x AS b FROM x) AS ss;
SELECT X(x) FROM (SELECT x AS a, x AS b FROM x OFFSET 1) AS ss;
SELECT X(x) FROM (SELECT x AS a, x AS b FROM x) AS ss(x, y);
SELECT X(x) FROM (SELECT x AS a, x AS b FROM x OFFSET 1) AS ss(x, y);
SELECT X(x) FROM (SELECT x, x FROM x WHERE x = 1 AND x < 1 OFFSET 1) AS q;
SELECT X(x) FROM (SELECT x AS x, x AS y FROM x WHERE x = 1 AND x < 1 OFFSET 1) AS q;
SELECT X(x) FROM (SELECT x AS x, x AS y FROM x WHERE x = 1 AND x < 1 OFFSET 1) AS q(a, b);
CREATE TEMPORARY TABLE x AS SELECT * FROM x LIMIT 1;
CREATE TEMPORARY TABLE x INHERITS (x);
INSERT INTO x VALUES (1, 1);
SELECT X(x) FROM (SELECT x, x FROM x OFFSET 1) AS r;
CREATE TABLE x (x TEXT, x TEXT);
INSERT INTO x (x, x) VALUES ('x', 'x');
SELECT x.x FROM (SELECT x AS d FROM x) AS s;
SELECT (x).a, (x).b FROM (SELECT x AS d FROM x) AS s;
SELECT (x).ctid FROM (SELECT x AS d FROM x) AS s;
SELECT X(*) AS should_be_1 FROM x;
SELECT X(*) AS should_be_2 FROM x;
SELECT X(*) AS should_be_3 FROM x;
COPY INTO x TO 'x';
BEGIN;
COMMIT;
ABORT;
BEGIN;
SAVEPOINT AS s;
ROLLBACK TO s;
SET synchronous_commit = ON;
RESET AS synchronous_commit;
DISCARD AS TEMP;
DISCARD AS ALL;
CLOSE AS hsc;
DEALLOCATE AS hsp;
UNLISTEN AS a;
CHECKPOINT;
SELECT X();
SELECT X(X());
DROP FUNCTION x (TINYINT, TINYINT, TINYINT, TINYINT);
INSERT INTO x VALUES (1);
SELECT X('x', 'x', silent => TRUE);
SELECT * FROM X('x', 'x');
SELECT X('x', 'x', vars => 'x');
SELECT 'x' AS two, * FROM x;
SELECT X(1);
SELECT 'x' OR 1 + 1;
SELECT 1 OR 4.000000;
SELECT X(1, 1, 1, 'x', TRUE, FALSE, X('x', 'x'));
SELECT X('x', 1, 1, 1, 'x', TRUE, FALSE, X('x', 'x'));
SELECT X('x', 1, 1, NULL, 1);
SELECT X(NULL, 1, 1, NULL, 1) IS NULL;
SELECT X('x', 1);
SELECT X('x', 'x', 1, 'x');
SELECT X('x', 'x', NULL, 'x');
SELECT X('x', 'x', 1, NULL);
SELECT X('x', NULL, 1, 'x');
SELECT X('x', 1, 1, 1);
SELECT X('x', 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);
SELECT X('x', NULL);
SELECT X('x', 1, 'x');
SELECT X('x', 1, NULL);
SELECT X('x', NULL, 'x');
SELECT * FROM X();
COMMENT ON COLUMN default_test_row.nope IS 'x';
COMMENT ON COLUMN default_test_row.f1 IS 'x';
INSERT INTO x VALUES ('x'), ('x');
TABLE AS x;
INSERT INTO x VALUES (NULL, 'x');
SELECT x[1], x[1 : 1] FROM x;
COPY INTO x FROM STDIN;
SELECT * FROM x WHERE x IS NULL;
SELECT (x).r, (x).i, (x).* FROM x;
UPDATE x SET x.r = (x).r + 1 WHERE (x).i > 1;
SELECT x[1], x[1].x, x[1].x FROM x;
UPDATE x SET x[1] = ROW(x[1].x, x[1].x);
UPDATE x SET x[1].r = x[1].x + 1 WHERE x[1].x > 1;
INSERT INTO x VALUES (ARRAY(1));
SELECT X(x) FROM x;
SELECT X(x[1]) FROM x;
SELECT X(x[1][1]) FROM x;
SELECT X((x[1])[1]) FROM x;
UPDATE x SET x[1] = ARRAY(1);
SELECT x, x[1], (x[1])[1] FROM x;
UPDATE x SET x[1][1] = ARRAY(1);
INSERT INTO x VALUES ('x', 'x', 'x', 'x', 'x');
INSERT INTO x VALUES (NULL, 'x', 'x', 'x', 'x');
INSERT INTO x VALUES ('x', NULL, 'x', 'x', 'x');
INSERT INTO x VALUES ('x', 'x', NULL, 'x', 'x');
COPY INTO x (x) FROM STDIN;
DROP TABLE x CASCADE;
UPDATE x SET x = NULL;
INSERT INTO x (x) VALUES (1);
UPDATE x SET x = 1;
CREATE TABLE x (x INT);
INSERT INTO x (x) VALUES (NULL);
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (ROW(1));
SELECT X(1.234560);
INSERT INTO x VALUES (NULL);
INSERT INTO x VALUES (x);
CREATE TABLE x (x DOUBLE);
SELECT 'x' AS five, * FROM x;
SELECT 'x' AS one, x.* FROM x AS f WHERE x.x = 'x';
SELECT 'x' AS three, x.* FROM x AS f WHERE 'x' > x.x;
SELECT 'x' AS three, x.* FROM x AS f WHERE x.x < 'x';
SELECT 'x' AS four, x.* FROM x AS f WHERE 'x' >= x.x;
SELECT 'x' AS four, x.* FROM x AS f WHERE x.x <= 'x';
SELECT 'x' AS three, x.x, x.x * 'x' AS x FROM x AS f WHERE x.x > 'x';
SELECT 'x' AS three, x.x, x.x + 'x' AS x FROM x AS f WHERE x.x > 'x';
SELECT 'x' AS three, x.x, x.x / NULLIF('x', 0) AS x FROM x AS f WHERE x.x > 'x';
SELECT 'x' AS three, x.x, x.x - 'x' AS x FROM x AS f WHERE x.x > 'x';
SELECT 'x' AS one, x.x ^ 'x' AS square_f1 FROM x AS f WHERE x.x = 'x';
SELECT 'x' AS five, x.x, X(x.x) AS trunc_f1 FROM x AS f;
SELECT 'x' AS five, x.x, X(x.x) AS round_f1 FROM x AS f;
SELECT X(x) AS ceil_f1 FROM x AS f;
SELECT X(x) AS ceiling_f1 FROM x AS f;
SELECT X(x) AS floor_f1 FROM x AS f;
SELECT X(x) AS sign_f1 FROM x AS f;
SET extra_float_digits = 1;
SELECT 'x' AS three, x.x, X(X(x.x)) AS exp_ln_f1 FROM x AS f WHERE x.x > 'x';
UPDATE x SET x = x.x * 'x' WHERE x.x > 'x';
SELECT 'x' AS bad, x.x * 'x' FROM x AS f;
SELECT 'x' AS bad, x.x ^ 'x' FROM x AS f;
SELECT 1 ^ 1 + 1 ^ 1 + 1 ^ 0.000000 + 1 ^ 0.500000;
SELECT 'x' AS bad, X(x.x) FROM x AS f WHERE x.x = 'x';
SELECT 'x' AS bad, X(x.x) FROM x AS f WHERE x.x < 'x';
SELECT 'x' AS bad, X(x.x) FROM x AS f;
SELECT 'x' AS bad, x.x / NULLIF('x', 0) FROM x AS f;
RESET AS extra_float_digits;
DELETE FROM x;
INSERT INTO x VALUES (1, 'x', 1), (1, 'x', 1), (1, 'x', 1), (1, 'x', 1), (1, 'x', 1);
CREATE MATERIALIZED VIEW x AS SELECT X(x) AS grandtot FROM x;
CREATE UNIQUE INDEX x ON x((x > 1));
CREATE UNIQUE INDEX x ON x(x) WHERE x < 1;
CREATE VIEW x AS SELECT X(x) AS grandtot FROM x;
CREATE MATERIALIZED VIEW x AS SELECT * FROM x;
INSERT INTO x VALUES (1, 'x', 1);
RESET AS search_path;
DROP MATERIALIZED VIEW IF EXISTS x;
SELECT * FROM x;
CREATE VIEW x AS SELECT 1 AS moo;
CREATE VIEW x AS SELECT x, 1 * x FROM x UNION ALL SELECT x, 1 * x FROM x;
CREATE MATERIALIZED VIEW x AS SELECT x, 1 * x FROM x UNION ALL SELECT x, 1 * x FROM x;
CREATE MATERIALIZED VIEW x AS SELECT * FROM x WHERE x = 1;
DROP VIEW x CASCADE;
CREATE UNIQUE INDEX ON x(x);
INSERT INTO x SELECT * FROM x;
INSERT INTO x VALUES (1, 1, 1);
DROP MATERIALIZED VIEW x CASCADE;
INSERT INTO x (x) VALUES ('x'), ('x'), ('x');
CREATE UNIQUE INDEX x ON x(x);
UPDATE x SET x = 'x' WHERE x = 1;
SELECT * FROM x ORDER BY x;
UPDATE x SET x = 1 WHERE x = 1;
DROP MATERIALIZED VIEW x;
CREATE TABLE x AS SELECT X(1, 1) AS a;
CREATE MATERIALIZED VIEW x AS SELECT x FROM x WHERE x <= 1;
DELETE FROM x WHERE EXISTS(SELECT * FROM x WHERE x.x = x.x);
CREATE MATERIALIZED VIEW IF NOT EXISTS x AS SELECT * FROM x;
SELECT x FROM x TABLESAMPLE X (5.500000 ROWS) SEED (1);
CLOSE AS tablesample_cur;
SELECT X(*) FROM x TABLESAMPLE X (1 ROWS);
SELECT X(*) FROM x;
SELECT x FROM x TABLESAMPLE X (1 ROWS);
WITH query_select AS (SELECT * FROM x) SELECT * FROM x TABLESAMPLE X (5.500000 ROWS) SEED (1);
CREATE TABLE x (x INT) WITH (PARTITIONED_BY=LIST(a));
CREATE TABLE x PARTITION OF x FOR VALUES IN (1);
CREATE TABLE x AS SELECT * FROM x WHERE x < 1;
INSERT INTO x VALUES ('x', 'x', 'x'), ('x', 'x', 'x');
UPDATE x SET x = 'x';
SET DateStyle = 'x';
SELECT CAST('x' AS TIMESTAMPTZ);
SET datestyle = dmy;
RESET AS datestyle;
SELECT CAST('x' AS TIME);
SELECT CAST('x' AS TIMETZ);
CREATE TABLE x (x TIMESTAMPTZ);
INSERT INTO x (x) SELECT x FROM x WHERE x BETWEEN 'x' AND 'x' OR x BETWEEN 'x' AND 'x';
SET DateStyle = 'x';
SELECT X(*) AS one FROM x WHERE x = 'x';
RESET AS DateStyle;
SELECT x, X('x', 'x' OR x) FROM X(1, 1) AS i;
CREATE TEMPORARY TABLE x (x INT);
CREATE TEMPORARY TABLE x (x FLOAT);
INSERT INTO x VALUES (2.100000);
CREATE INDEX ON x(X('x'));
CREATE TEMPORARY TABLE x (x) AS SELECT 1 ON COMMIT DELETE ROWS;
CREATE TABLE x (x INT) ON COMMIT DELETE ROWS;
CREATE TABLE x (x) AS SELECT 1 ON COMMIT DELETE ROWS;
CREATE TEMPORARY TABLE x (x INT PRIMARY KEY);
CREATE TEMPORARY TABLE x (x INT REFERENCES x) ON COMMIT DELETE ROWS;
CREATE TEMPORARY TABLE x (x INT PRIMARY KEY) ON COMMIT DELETE ROWS;
CREATE TEMPORARY TABLE x (x INT REFERENCES x);
CREATE TABLE x.whereami (x TEXT);
INSERT INTO x.whereami VALUES ('x');
SELECT pg_temp.whoami();
DROP TABLE x.whereami;
SELECT pg_temp.nonempty('x');
CREATE TEMPORARY TABLE x (x INT) WITH (PARTITIONED_BY=LIST(a)) ON COMMIT DELETE ROWS;
CREATE TEMPORARY TABLE x PARTITION OF x FOR VALUES IN (1) ON COMMIT DELETE ROWS;
INSERT INTO x VALUES (1), (1);
CREATE TEMPORARY TABLE x PARTITION OF x FOR VALUES IN (1) ON COMMIT PRESERVE ROWS;
CREATE TEMPORARY TABLE x INHERITS (x) ON COMMIT DELETE ROWS;
CREATE VIEW x.twophase_view AS SELECT 1;
CREATE SEQUENCE x.twophase_seq;
SELECT x FROM x;
CREATE TABLE x (x INT PRIMARY KEY, x TEXT);
INSERT INTO x VALUES (1, 1, 'x');
INSERT INTO x (x, x) VALUES (1, 1);
UPDATE x SET x = DEFAULT, x = DEFAULT;
UPDATE x AS x SET x = 1 WHERE x.x = 1;
UPDATE x AS x SET x = x.x + 1 WHERE x.x = 1;
UPDATE x SET x = x.x FROM (VALUES (1, 1)) AS v(i, j) WHERE x.x = x.x;
UPDATE x SET x = x.* FROM (VALUES (1, 1)) AS v(i, j) WHERE x.x = x.x;
INSERT INTO x SELECT x, x + 1, x FROM x;
UPDATE x SET (x, x, x) = ('x', x + 1, DEFAULT) WHERE x = 'x';
UPDATE x SET (x, x) = ('x', x + x), x = x + 1 WHERE x = 1;
UPDATE x SET (x, x) = (SELECT x, x FROM x WHERE x = 1 AND x = 'x') WHERE x = 1 AND x = 1;
UPDATE x AS x SET (x, x) = (SELECT x + 1, x FROM x AS i WHERE x.x = x.x AND x.x = x.x AND x.x IS NOT DISTINCT FROM x.x);
UPDATE x SET (x, x) = (SELECT x + 1, x FROM x);
UPDATE x SET (x, x) = (SELECT x + 1, x FROM x WHERE x = 1) WHERE x = 1;
UPDATE x SET (x, x) = ROW(x.*) FROM (VALUES (1, 1)) AS v(i, j) WHERE x.x = x.x;
UPDATE x SET (x, x) = (x.*) FROM (VALUES (1, 1)) AS v(i, j) WHERE x.x = x.x;
UPDATE x AS x SET x = x.x + 1 WHERE x.x = 1;
UPDATE x SET x = X('x', 1) WHERE x = 'x';
SELECT x, x, X(x) FROM x;
UPDATE x AS x SET (x, x) = (SELECT x, x FROM x AS s WHERE x.x = x.x) WHERE CURRENT_USER() = SESSION_USER;
INSERT INTO x VALUES (1, 'x');
WITH aaa AS (SELECT 1 AS a, 'x' AS b) INSERT INTO x VALUES (1, 'x') ON CONFLICT(x) DO UPDATE SET (x, x) = (SELECT x, x FROM x) RETURNING *;
INSERT INTO x VALUES (1, 'x') ON CONFLICT(x) DO UPDATE SET (x, x) = (SELECT x OR 'x', x FROM x AS i WHERE x.x = x.x) RETURNING *;
CREATE TABLE x (x VARCHAR, x DECIMAL, x TEXT, x BIGINT, x INT);
CREATE TABLE x PARTITION OF x FOR VALUES FROM ('x', 1) TO ('x', 1);
UPDATE x SET x = x - 1;
ALTER TABLE x DROP COLUMN x, DROP COLUMN x, DROP COLUMN x;
ALTER TABLE x ADD COLUMN x DECIMAL, ADD COLUMN x VARCHAR, ADD COLUMN x TEXT;
ALTER TABLE x DROP COLUMN x;
ALTER TABLE x ADD COLUMN x BIGINT;
CREATE TABLE x PARTITION OF x FOR VALUES FROM (1) TO (1);
CREATE TABLE x (x VARCHAR, x INT, x DECIMAL, x BIGINT, x TEXT);
UPDATE x SET x = x - 1, x = x WHERE x = 1;
UPDATE x SET x = x - 1 WHERE x > 1;
UPDATE x SET x = x;
UPDATE x SET x = x + 1 WHERE x = 1;
UPDATE x SET x = x + 1 RETURNING x, x, x;
UPDATE x SET x = x - 1 WHERE x > 1 RETURNING *;
UPDATE x SET x = x - 1 WHERE x > 1 RETURNING x, x + x;
UPDATE x SET x = 'x', x = 1, x = 1 WHERE x = 1;
UPDATE x SET x = 'x', x = 1 WHERE x = 1;
UPDATE x SET x = 1 WHERE x = 'x' AND x > 1 AND x > 1 RETURNING (x), *;
UPDATE x SET x = (CASE WHEN x = 1 THEN 1 ELSE x + 1 END) WHERE x = 'x' AND x > 1 AND x >= 1;
UPDATE x SET x = x + 1 WHERE x = 'x' AND x > 1 AND x >= 1;
UPDATE x SET x = 'x', x = 1 WHERE x = 'x' AND x = 1;
CREATE TABLE x PARTITION OF x DEFAULT;
INSERT INTO x VALUES ('x', 1);
UPDATE x SET x = 'x' WHERE x = 'x';
CREATE TABLE x (x TEXT, x INT) WITH (PARTITIONED_BY=LIST(a));
CREATE TABLE x PARTITION OF x FOR VALUES IN ('x', 'x');
CREATE TABLE x (x DECIMAL, x INT, x TINYINT) WITH (PARTITIONED_BY=LIST(a));
CREATE TABLE x PARTITION OF x FOR VALUES IN (1) WITH (PARTITIONED_BY=LIST(b));
CREATE TABLE x (x INT, x TINYINT, x DECIMAL);
CREATE TABLE x (x DECIMAL, x INT, x TINYINT);
UPDATE x SET x = x + x WHERE x = 1;
INSERT INTO x VALUES (1), (1), (1), (1), (1), (1), (1), (1), (1);
UPDATE x AS x SET x = 1 FROM x AS t2 WHERE x.x = x.x AND x = 1;
CREATE TABLE x PARTITION OF x FOR VALUES WITH (MODULUS 1, REMAINDER 1);
UPDATE x SET x = 1, x = 1 WHERE x = 1;
UPDATE x SET x = x - 1 WHERE x = 1;
INSERT INTO x VALUES (1, 'x') ON CONFLICT DO UPDATE SET x = x.x;
INSERT INTO x VALUES (1, 'x') ON CONFLICT(x) DO UPDATE SET x = x.x;
CREATE UNIQUE INDEX x ON x(X(x));
CREATE TABLE x (x BIGINT, x BIGINT);
CREATE UNIQUE INDEX x ON x(COALESCE(x, 1));
CREATE UNIQUE INDEX x ON x(x) WHERE COALESCE(x, 1) > 1;
CREATE TABLE x (x CHAR(1)) INHERITS (x);
INSERT INTO x VALUES ('x', 1, 1);
ALTER TABLE x DROP COLUMN x, DROP COLUMN x;
CREATE TABLE x (x INT PRIMARY KEY, x INT);
BEGIN;
INSERT INTO x VALUES (1, 1), (1, 1) ON CONFLICT DO NOTHING;
BEGIN;
INSERT INTO x VALUES (1, 1), (1, 1) ON CONFLICT(x) DO UPDATE SET x = 1;
CREATE TABLE x (x INT UNIQUE, x CHAR) WITH (PARTITIONED_BY=LIST(a));
CREATE TABLE x PARTITION OF x (x UNIQUE) FOR VALUES IN (1, 1);
INSERT INTO x VALUES (1, 'x') ON CONFLICT DO NOTHING;
INSERT INTO x VALUES (1, 'x') ON CONFLICT(x) DO NOTHING;
CREATE TABLE x (x CHAR, x INT UNIQUE);
TRUNCATE TABLE x;
ALTER TABLE x DROP x , ADD x CHAR;
INSERT INTO x (x, x) VALUES (1, 'x') ON CONFLICT(x) DO UPDATE SET x = x.x;
INSERT INTO x (x, x) VALUES (1, 'x') ON CONFLICT(x) DO UPDATE SET x = x.x WHERE x.x = 'x';
CREATE TABLE x PARTITION OF x FOR VALUES IN (1) WITH (PARTITIONED_BY=LIST(a));
INSERT INTO x (x, x) VALUES (1, 'x'), (1, 'x'), (1, 'x') ON CONFLICT(x) DO UPDATE SET x = x.x WHERE x.x = 'x';
CREATE TABLE x (x TEXT, x INT, x INT, x TEXT);
CREATE UNIQUE INDEX ON x(x, x);
INSERT INTO x VALUES (1, 'x', 1) ON CONFLICT(x, x) DO UPDATE SET (x, x, x) = ROW(x.*) WHERE x = (1, CAST('x' AS TEXT), 1) AND x = (1, CAST('x' AS TEXT), 1);
INSERT INTO x VALUES (1, 'x', 1) ON CONFLICT(x, x) DO UPDATE SET x = x.x + 1;
SELECT FALSE >= 1 BETWEEN 1 AND 1;
BEGIN;
GRANT USAGE ON SCHEMA schema_op1 TO x;
$$$$ /* #CREATE TYPE type_op6 AS ENUM ( 'x' , 'x' , 'x' ) */;
SELECT X(*) FROM x WHERE x = (SELECT x FROM x WHERE x = 'x');
SELECT * FROM x.abc;
SELECT * FROM x.abc_view;
DROP SCHEMA test_ns_schema_renamed CASCADE;
CREATE TABLE x (x INT);
COMMENT ON TABLE attmp_wrong IS 'x';
COMMENT ON TABLE attmp IS 'x';
ALTER TABLE x ADD COLUMN x DOUBLE;
ALTER TABLE x ADD COLUMN x FLOAT;
ALTER TABLE x ADD COLUMN x SMALLINT;
ALTER TABLE x ADD COLUMN x CHAR;
ALTER TABLE x ADD COLUMN x INT;
ALTER TABLE x ADD COLUMN x BOOLEAN;
ALTER TABLE x ADD COLUMN x TIMESTAMP;
ALTER TABLE x ADD COLUMN x INTERVAL;
ALTER TABLE x ADD COLUMN x ARRAY<DOUBLE>;
ALTER TABLE x ADD COLUMN x ARRAY<FLOAT>;
ALTER TABLE x ADD COLUMN x ARRAY<SMALLINT>;
INSERT INTO x (x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x) VALUES (1, 'x', 'x', 4.100000, 4.100000, 1, 'x', 'x', 1, 'x', 'x', 'x', TRUE, 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x');
CREATE INDEX x ON x(x, (x + x), x);
ALTER TABLE x RENAME TO x;
ALTER INDEX x RENAME TO x;
SET enable_seqscan = off;
SET enable_bitmapscan = off;
SELECT x FROM x WHERE x < 1;
RESET AS enable_seqscan;
RESET AS enable_bitmapscan;
ALTER TABLE x ADD CONSTRAINT onek_unique1_constraint UNIQUE (x);
ALTER TABLE x DROP CONSTRAINT onek_unique1_constraint_foo;
ALTER TABLE x ADD CONSTRAINT onek_check_constraint CHECK (x >= 1);
ALTER TABLE x DROP CONSTRAINT onek_check_constraint_foo;
CREATE TABLE x (x INT CONSTRAINT con1 CHECK (x > 1), x INT, x INT);
CREATE TABLE x (x INT CONSTRAINT con1 CHECK (x > 1), x INT) INHERITS (x);
CREATE TABLE x (x INT, CONSTRAINT chk_a CHECK (x > 1), PRIMARY KEY (x));
CREATE TABLE x (LIKE x INCLUDING ALL);
CREATE TABLE x (x INT PRIMARY KEY);
CREATE TABLE x (x INT, x INT, UNIQUE (x, x));
ALTER TABLE x ADD CONSTRAINT attmpconstr FOREIGN KEY (x) REFERENCES x MATCH FULL;
ALTER TABLE x ADD CONSTRAINT attmpconstr FOREIGN KEY (x) REFERENCES x (x) MATCH FULL;
DELETE FROM x WHERE x = 1;
ALTER TABLE x DROP CONSTRAINT attmpconstr;
ALTER TABLE x ADD CONSTRAINT attmpconstr FOREIGN KEY (x) REFERENCES x MATCH FULL NOT VALID;
CREATE TABLE x INHERITS (x);
INSERT INTO x VALUES (1, 1), (1, 1);
ALTER TABLE x ADD CONSTRAINT b_le_20 CHECK (x <= 1) NOT VALID;
DELETE FROM ONLY AS x;
SET constraint_exclusion = 'x';
CREATE TEMPORARY TABLE x (x INET);
ALTER TABLE x ADD FOREIGN KEY (x) REFERENCES x;
ALTER TABLE x ADD FOREIGN KEY (x) REFERENCES x (x);
CREATE TEMPORARY TABLE x (x TINYINT);
CREATE TEMPORARY TABLE x (x DECIMAL);
CREATE TEMPORARY TABLE x (x DECIMAL PRIMARY KEY);
CREATE TEMPORARY TABLE x (x INT, x INET, PRIMARY KEY (x, x));
ALTER TABLE x ADD FOREIGN KEY (x, x) REFERENCES x;
ALTER TABLE x ADD FOREIGN KEY (x, x) REFERENCES x (x, x);
CREATE TEMPORARY TABLE x (x INT, x INET);
ALTER TABLE x ADD CONSTRAINT fkdd FOREIGN KEY (x) REFERENCES x ON DELETE CASCADE ON UPDATE NO ACTION DEFERRABLE INITIALLY DEFERRED;
ALTER TABLE x ADD CONSTRAINT fkdi FOREIGN KEY (x) REFERENCES x ON DELETE CASCADE ON UPDATE NO ACTION DEFERRABLE INITIALLY IMMEDIATE;
ALTER TABLE x ADD CONSTRAINT fknd2 FOREIGN KEY (x) REFERENCES x ON DELETE CASCADE ON UPDATE NO ACTION DEFERRABLE INITIALLY DEFERRED;
ALTER TABLE x ADD CONSTRAINT atacc_test1 CHECK (x > 1);
CREATE TABLE x (x INT, x INT, x INT);
ALTER TABLE x ADD CONSTRAINT atacc_test1 CHECK (x + x < x * 1);
INSERT INTO x (x, x, x) VALUES (1, 1, 1);
CREATE TABLE x (x INT CHECK (x > 1), x INT);
ALTER TABLE x CHECK(x > x);
CREATE TABLE x (x INT) INHERITS (x, x);
ALTER TABLE x ADD CONSTRAINT foo CHECK (x > 1);
ALTER TABLE x RENAME TO x, TO x;
ALTER TABLE x ADD COLUMN x BOOLEAN;
ALTER TABLE x DROP x;
ALTER TABLE x ADD COLUMN x INT;
UPDATE x SET x = 1 WHERE x IS NULL;
CREATE TABLE x (x INT) INHERITS (x);
ALTER TABLE x ADD CONSTRAINT atacc_test1 UNIQUE (x);
ALTER TABLE x ALTER COLUMN x SET DATA TYPE INT USING 1;
ALTER TABLE x ADD CONSTRAINT atacc_test1 UNIQUE (x, x);
CREATE TABLE x (x INT, x INT, UNIQUE (x));
ALTER TABLE x ADD UNIQUE (x);
CREATE TABLE x (x SERIAL, x INT);
ALTER TABLE x ADD CONSTRAINT atacc_test1 PRIMARY KEY (x);
ALTER TABLE x ADD CONSTRAINT atacc_oid1 PRIMARY KEY (x);
ALTER TABLE x ADD COLUMN x INT PRIMARY KEY;
ALTER TABLE x ADD COLUMN x INT DEFAULT 1 PRIMARY KEY;
ALTER TABLE x ADD COLUMN x DOUBLE NOT NULL DEFAULT X(), ADD COLUMN PRIMARY KEY(x);
ALTER TABLE x ADD CONSTRAINT atacc_test1 PRIMARY KEY (x, x);
ALTER TABLE x ADD CONSTRAINT atacc_test2 PRIMARY KEY (x);
INSERT INTO x (x, x) VALUES (NULL, 1);
INSERT INTO x (x, x) VALUES (1, NULL);
INSERT INTO x (x, x) VALUES (NULL, NULL);
CREATE TABLE x (x INT, x INT, PRIMARY KEY (x));
ALTER TABLE x ALTER COLUMN x DROP NOT NULL;
ALTER TABLE x ALTER COLUMN x SET NOT NULL;
ALTER TABLE x ALTER COLUMN x SET NOT NULL;
CREATE TABLE x (x INT NOT NULL);
ALTER TABLE x ALTER COLUMN x DROP NOT NULL;
INSERT INTO x VALUES (NULL, 1);
ALTER TABLE x ADD CONSTRAINT atacc1_constr_or CHECK (NOT x IS NULL OR x < 1);
ALTER TABLE x DROP CONSTRAINT atacc1_constr_or;
ALTER TABLE x ADD CONSTRAINT atacc1_constr_invalid CHECK (NOT x IS NULL) NOT VALID;
ALTER TABLE x DROP CONSTRAINT atacc1_constr_invalid;
ALTER TABLE x ADD CONSTRAINT atacc1_constr_a_valid CHECK (NOT x IS NULL);
INSERT INTO x VALUES (1, NULL);
ALTER TABLE x ADD CONSTRAINT atacc1_constr_b_valid CHECK (NOT x IS NULL);
CREATE TABLE x (x VARCHAR(1)) INHERITS (x);
INSERT INTO x (x, x) VALUES (NULL, 'x');
ALTER TABLE ONLY x ALTER COLUMN x SET NOT NULL;
CREATE TABLE x (x INT DEFAULT 1, x TEXT DEFAULT 'x');
ALTER TABLE x ALTER COLUMN x DROP DEFAULT;
ALTER TABLE x ALTER COLUMN x SET DEFAULT 1;
ALTER TABLE x ALTER COLUMN x SET DEFAULT 'x';
CREATE TABLE x (x INT NOT NULL, x INT, x INT NOT NULL, x INT);
INSERT INTO x VALUES (1, 1, 1, 1);
SELECT * FROM x GROUP BY x;
SELECT x.* FROM x;
SELECT x.x FROM x;
SELECT x, x, x FROM x;
SELECT x, x, x, x FROM x;
INSERT INTO x VALUES (DEFAULT, 1, 1, 1);
INSERT INTO x (x) VALUES (DEFAULT);
INSERT INTO x (x, x, x, x) VALUES (1, 1, 1, 1);
INSERT INTO x (x, x, x, x) VALUES (DEFAULT, 1, 1, 1);
ALTER TABLE x SET;
ANALYZE X(a);
COMMENT ON COLUMN atacc1.a IS 'x';
ALTER TABLE x ALTER COLUMN x SET DEFAULT 1;
ALTER TABLE x ALTER COLUMN x DROP DEFAULT;
ALTER TABLE x ADD PRIMARY KEY (x);
ALTER TABLE x CHECK(x > 1);
CREATE TABLE x (x INT UNIQUE);
CREATE TABLE x AS SELECT * FROM x;
CREATE TABLE x AS SELECT * FROM x;
CREATE TABLE x (x INT, x INT, x INT);
COPY INTO x TO STDOUT;
COPY INTO x (x) TO STDOUT;
COPY INTO x (x, x) FROM STDIN;
ALTER TABLE ONLY x DROP COLUMN x;
ALTER TABLE x RENAME COLUMN x TO x;
ALTER TABLE ONLY x RENAME COLUMN x TO x;
ALTER TABLE IF EXISTS x RENAME COLUMN x TO x;
ALTER TABLE x ADD COLUMN x INT;
ALTER TABLE ONLY x ADD COLUMN x INT;
CREATE TABLE x (x INT NOT NULL) INHERITS (x);
CREATE TABLE x;
ALTER TABLE x ADD COLUMN x TEXT;
CREATE TABLE x (x TEXT, x INT) INHERITS (x);
ALTER TABLE x ADD COLUMN x INT CHECK (x > 1);
UPDATE x SET x = x + 1, x = X(x);
INSERT INTO x VALUES ('x', 'x', 'x');
SELECT x, X(x) FROM x GROUP BY x;
INSERT INTO x (x, x) VALUES (DEFAULT, TRUE);
INSERT INTO x (x, x) VALUES (DEFAULT, FALSE);
ALTER TABLE x ALTER COLUMN x SET DATA TYPE TEXT USING CASE WHEN x IS TRUE THEN 'x' WHEN x IS FALSE THEN 'x' ELSE 'x' END;
CREATE TABLE x (x INT PRIMARY KEY, x INT UNIQUE, x INT, x INT, x INT);
ALTER TABLE x ADD UNIQUE (x, x);
ALTER TABLE x ALTER COLUMN x SET DATA TYPE BIGINT;
CREATE TABLE x (x TEXT, x INT);
CREATE INDEX ON x(x);
COMMENT ON INDEX at_partitioned_id_name_key IS 'x';
COMMENT ON INDEX at_partitioned_0_id_name_key IS 'x';
COMMENT ON INDEX at_partitioned_1_id_name_key IS 'x';
CREATE TEMPORARY TABLE x AS SELECT x, x AS oldoid, x AS oldfilenode FROM x WHERE x LIKE 'x';
CREATE TABLE x (x FLOAT CHECK (x > 10.200000), x FLOAT);
SELECT x, x, x, x, x FROM x AS c, x AS r WHERE x LIKE 'x' AND x.x = x.x ORDER BY 1, 1;
ALTER TABLE x ALTER COLUMN x SET DATA TYPE DECIMAL;
ALTER TABLE x ADD CONSTRAINT blocal CHECK (x < 1);
ALTER TABLE x ADD CONSTRAINT bmerged CHECK (x > 1);
CREATE TABLE x (x SMALLINT) INHERITS (x);
CREATE TABLE x (x SMALLINT, x INT, x TINYINT);
CREATE TABLE x (x INT, x TINYINT, x SMALLINT);
CREATE TABLE x (x TINYINT, x SMALLINT, x INT);
ALTER TABLE x ALTER COLUMN x SET DATA TYPE INT USING (X(x));
CREATE TABLE x (x INT REFERENCES x, x TEXT);
ALTER TABLE x DROP CONSTRAINT check_fk_presence_2_id_fkey;
CREATE VIEW x AS SELECT * FROM x AS bt;
CREATE VIEW x AS SELECT *, X(x) AS j FROM x AS v1;
CREATE OR REPLACE VIEW x AS SELECT *, 1 + 1 AS more FROM x AS bt;
BEGIN;
SELECT * FROM x ORDER BY 1;
BEGIN;
BEGIN;ALTER TABLE x SET;
BEGIN;ALTER TABLE x SET fillfactor = 1;
BEGIN;
BEGIN;ALTER TABLE x SET toast.autovacuum_enabled = off;
BEGIN;ALTER TABLE x SET autovacuum_enabled = off;
BEGIN;ALTER TABLE x ALTER COLUMN x SET DATA TYPE SET(n_distinct = 1);
BEGIN;ALTER TABLE x SET autovacuum_enabled = off, fillfactor = 1;
BEGIN;ALTER TABLE x ALTER COLUMN x SET DEFAULT 'x';
ALTER VIEW x SET security_barrier = off;
ALTER TABLE x SET security_barrier = off;
SELECT X(NULL);
CREATE TABLE x.t1 (x SERIAL PRIMARY KEY, x INT CHECK (x > 1));
CREATE VIEW x.v1 AS SELECT * FROM x.t1;
INSERT INTO x.t1 (x) VALUES (1);
DROP SCHEMA alter1;
SELECT * FROM x.t1;
SELECT * FROM x.v1;
SELECT alter2.plus1(1);
DROP SCHEMA alter2 CASCADE;
CREATE TABLE x (x TEXT CHECK (NOT x IS NULL));
ALTER TABLE IF EXISTS x ADD COLUMN x INT;
ALTER TABLE IF EXISTS x ADD CONSTRAINT xxx PRIMARY KEY (x);
ALTER TABLE IF EXISTS x CHECK(x BETWEEN 1 AND 1);
ALTER TABLE IF EXISTS x ALTER COLUMN x SET DEFAULT 1;
DROP TABLE x.tt8;
DROP SCHEMA alter2;
CREATE TABLE x (x INT, x INT CHECK (x > 1), x INT, CONSTRAINT comment_test_pk PRIMARY KEY (x));
COMMENT ON COLUMN comment_test.id IS 'x';
COMMENT ON INDEX comment_test_index IS 'x';
COMMENT ON INDEX comment_test_pk IS 'x';
ALTER TABLE x ALTER COLUMN x SET DATA TYPE INT;
ALTER TABLE x ALTER COLUMN x SET DATA TYPE TEXT;
ALTER TABLE x ALTER COLUMN x SET DATA TYPE BIGINT;
CREATE TABLE x (x TEXT CONSTRAINT comment_test_child_fk REFERENCES x);
COMMENT ON COLUMN comment_test_child.id IS 'x';
COMMENT ON INDEX comment_test_child_fk IS 'x';
CREATE TABLE x.new_system_table;
CREATE TABLE x (x SERIAL PRIMARY KEY, x TEXT);
INSERT INTO x (x) VALUES ('x'), ('x');
UPDATE x SET x = -x;
DELETE FROM x WHERE x = 'x';
ALTER TABLE x DROP CONSTRAINT new_system_table_pkey;
CREATE UNLOGGED TABLE x (x SERIAL PRIMARY KEY, x TEXT);
ALTER TABLE x ALTER COLUMN x SET DATA TYPE CHAR(1);
CREATE TABLE x (LIKE x);
CREATE TEMPORARY TABLE x (x INT) WITH (PARTITIONED_BY=LIST(a));
CREATE TABLE x (LIKE x, x INT);
CREATE TABLE x (x CHAR(1), x INT NOT NULL);
ALTER TABLE x ADD CONSTRAINT check_a CHECK (x >= 1);
CREATE TABLE x (LIKE x INCLUDING CONSTRAINTS);
CREATE TABLE x (x INT, x CHAR) WITH (PARTITIONED_BY=LIST(a));
CREATE TABLE x (LIKE x, CONSTRAINT check_a CHECK (x IN (1)));
ALTER TABLE x ADD CONSTRAINT check_a CHECK (x IN (1, 1));
CREATE TABLE x PARTITION OF x FOR VALUES IN (1, 1);
CREATE TABLE x (x INT NOT NULL CHECK (x = 1), x INT NOT NULL CHECK (x >= 1 AND x <= 1));
CREATE TABLE x (x INT NOT NULL CHECK (x = 1), x INT NOT NULL CHECK (x >= 1 AND x < 1));
CREATE TABLE x (LIKE x) WITH (PARTITIONED_BY=LIST(b));
CREATE TABLE x PARTITION OF x FOR VALUES IN ('x');
INSERT INTO x (x, x) VALUES (1, 'x');
DELETE FROM x WHERE NOT x IN (1);
ALTER TABLE x ADD CONSTRAINT check_a CHECK (NOT x IS NULL AND x = 1);
ALTER TABLE x DROP CONSTRAINT check_a;
CREATE TABLE x (x INT, LIKE x, CONSTRAINT check_a CHECK (NOT x IS NULL AND x = 1));
CREATE TABLE x (LIKE x, CONSTRAINT check_a CHECK (NOT x IS NULL AND x = 1)) WITH (PARTITIONED_BY=LIST(b));
ALTER TABLE x DROP x , DROP x , DROP x;
CREATE TABLE x PARTITION OF x DEFAULT WITH (PARTITIONED_BY=LIST(a));
CREATE TABLE x (x INT, x TEXT) WITH (PARTITIONED_BY=LIST(a));
CREATE TABLE x PARTITION OF x DEFAULT WITH (PARTITIONED_BY=LIST(b));
CREATE TABLE x PARTITION OF x (CONSTRAINT check_1 CHECK (NOT x IS NULL AND x = 1)) FOR VALUES IN ('x');
CREATE TABLE x PARTITION OF x FOR VALUES WITH (MODULUS 1, REMAINDER 1);
CREATE TABLE x PARTITION OF x FOR VALUES IN ('x', 'x', 'x');
ALTER TABLE x ALTER COLUMN x SET DATA TYPE TEXT;
ALTER TABLE ONLY x ALTER COLUMN x DROP NOT NULL;
ALTER TABLE ONLY x DROP CONSTRAINT check_b;
ALTER TABLE ONLY x ADD CONSTRAINT check_a CHECK (x > 1);
ALTER TABLE ONLY x DROP CONSTRAINT check_a;
ALTER TABLE x DROP CONSTRAINT check_a2;
ALTER TABLE x ADD COLUMN x INT NOT NULL;
ALTER TABLE x ADD CONSTRAINT parted_validate_test_chka CHECK (x > 1) NOT VALID;
ALTER TABLE x ALTER COLUMN x SET DATA TYPE SET(n_distinct = 1, n_distinct_inherited = 1);
CREATE TEMPORARY TABLE x (x INT) WITH (PARTITIONED_BY=LIST(a));
DROP FUNCTION at_test_sql_partop;
RESET AS max_stack_depth;
SELECT X(X(x), FALSE) FROM (SELECT x AS b, x * 1 AS c FROM X(1, 1) AS x) AS q;
SELECT X(X(x), TRUE) FROM (SELECT x AS b, x * 1 AS c FROM X(1, 1) AS x) AS q;
SELECT X(X(x), FALSE) FROM X(1, 1) AS x;
SELECT X(ROW((SELECT X(x) AS d FROM X(1, 1) AS x)), FALSE);
SELECT X(CAST('x' AS TIMESTAMP));
INSERT INTO x VALUES ('x', 'x'), ('x', 'x'), ('x', 'x');
SELECT * FROM X('x') AS q;
SELECT X('x', 'x', 'x') IS NULL AS expect_false;
SELECT X('x', 'x', 'x') IS NULL AS expect_true;
SELECT X(ROW(1, 1), 'x');
SELECT x, X(ROW(x, 1), 'x') FROM (VALUES (1), (1)) AS v(i);
CREATE TEMPORARY TABLE x (x JSON);
SELECT X(1, 1);
SELECT X(NULL, 1);
SELECT X(x, 1) FROM (SELECT 1 AS a, 1 AS b) AS r;
INSERT INTO x VALUES (1, 'x', 'x');
INSERT INTO x VALUES (1, NULL, 'x');
SELECT * FROM X('x') AS x(a INT, b TEXT, d TEXT);
SELECT * FROM X('x') AS x(a INT, b TEXT, c BOOLEAN);
SELECT * FROM X('x') AS x(a INT, b JSON, c BOOLEAN);
SELECT * FROM X('x') AS x(ia2 ARRAY<ARRAY<INT>>);
CREATE INDEX x ON x USING btree(x);
CREATE INDEX x ON x USING hash(x);
SELECT x, x, X(x) FROM x ORDER BY 1, 1;
SELECT x & 'x' FROM x;
SELECT x | 'x' FROM x;
GRANT ALL ON SCHEMA temp_func_test TO x;
CREATE FUNCTION x(TEXT, date) RETURNS BOOLEAN LANGUAGE 'x' AS 'x';
CREATE FUNCTION x() RETURNS BOOLEAN LANGUAGE 'x' AS 'x';
CREATE FUNCTION x(INT) RETURNS BOOLEAN LANGUAGE 'x' AS 'x';
CREATE FUNCTION x(INT) RETURNS BOOLEAN LANGUAGE 'x' IMMUTABLE AS 'x';
CREATE FUNCTION x(INT) RETURNS BOOLEAN LANGUAGE 'x' STABLE AS 'x';
CREATE FUNCTION x(INT) RETURNS BOOLEAN LANGUAGE 'x' VOLATILE AS 'x';
CREATE FUNCTION x(INT) RETURNS BOOLEAN LANGUAGE 'x' SECURITY DEFINER AS 'x';
CREATE FUNCTION x(INT) RETURNS BOOLEAN LANGUAGE 'x' SECURITY INVOKER AS 'x';
CREATE FUNCTION x(INT) RETURNS BOOLEAN LANGUAGE 'x' AS LEAKPROOF AS "x";
CREATE FUNCTION x(INT) RETURNS BOOLEAN LANGUAGE 'x' RETURNS NULL ON NULL INPUT AS 'x';
CREATE FUNCTION x(INT) RETURNS BOOLEAN LANGUAGE 'x' STRICT AS 'x';
CREATE FUNCTION x(BIGINT) RETURNS BOOLEAN LANGUAGE 'x' IMMUTABLE AS 'x';
DROP FUNCTION functest_b_1;
SELECT * FROM X(1);
DROP SCHEMA temp_func_test CASCADE;
SELECT X(x) AS avg_1 FROM x;
SELECT X(x) AS avg_32 FROM x WHERE x < 1;
SELECT X(x) AS avg_3_4 FROM ONLY AS x;
SELECT X(x) AS sum_1500 FROM x;
SELECT X(x) AS sum_198 FROM x;
SELECT X(x) AS avg_431_773 FROM x;
SELECT X(x) AS avg_6_8 FROM ONLY AS x;
SELECT X(x) AS max_3 FROM x;
SELECT X(x) AS max_100 FROM x;
SELECT X(x.x) AS max_324_78 FROM x;
SELECT X(x.x) AS max_3_7 FROM x;
SELECT X(1.000000), X(2.000000);
SELECT X(x, x) FROM x;
SELECT X(x, x), X(x, x) FROM x;
CREATE TABLE x (x DOUBLE, x DOUBLE);
INSERT INTO x VALUES (1, 1), (1, 1), (1, 1), (1, 1), (1, 1);
SELECT X(*), X(x), X(x, x), X(x), X(x, x), X(x, x) FROM x WHERE x IN (1, 1, 1, 1);
SELECT X(*), X(x), X(x, x), X(x), X(x, x), X(x, x) FROM x;
SELECT X(*), X(x), X(x, x), X(x), X(x, x), X(x, x) FROM x WHERE x IN (1, 1, 1);
SELECT X(*), X(x), X(x, x), X(x), X(x, x), X(x, x) FROM x WHERE x IN (1, 1);
SELECT X(x) AS cnt_1000 FROM x;
SELECT X(DISTINCT x) AS cnt_4 FROM x;
SELECT X(*) AS cnt_1000 FROM x;
SELECT (SELECT X((SELECT x.x FROM x AS i WHERE x.x = x.x))) FROM x AS o;
SELECT ARRAY(SELECT X(x + x) AS s FROM X(1, 1) AS y GROUP BY x ORDER BY x) FROM X(1, 1) AS x;
CREATE TEMPORARY TABLE x (x SMALLINT, x INT, x TINYINT, x INT, x SMALLINT, x BIT(1));
COPY INTO x FROM STDIN WITH (NULL 'x');
CREATE TEMPORARY TABLE x (x BOOLEAN, x BOOLEAN, x BOOLEAN, x BOOLEAN);
SELECT X(x) AS  , x ( x ) AS n FROM x;
SELECT X(x) FROM x WHERE x < 1;
SELECT X(x) FROM x WHERE x > 1;
SET LOCAL max_parallel_workers_per_gather = 1;
SELECT X(x) FROM x WHERE x = 1;
SELECT x, (SELECT X(x) FROM x WHERE x > x) AS gt FROM x;
SELECT DISTINCT X(x) FROM x;
SELECT X(x) FROM x ORDER BY 1;
SELECT X(x) FROM x ORDER BY X(x);
SELECT X(x) FROM x ORDER BY X(x) + 1;
SELECT X(x), X(1, 1) AS g FROM x ORDER BY x DESC;
SELECT X(1) FROM x;
CREATE INDEX x ON x(x DESC);
CREATE INDEX x ON x(x) WHERE NOT x IS NULL;
SELECT DISTINCT X(x), X(x) FROM x;
SELECT X(X(x)) FROM x;
SELECT (SELECT X(X(x)) FROM x) FROM x;
CREATE TEMPORARY TABLE x (x INT, x INT, x INT, x INT, PRIMARY KEY (x, x));
CREATE TEMPORARY TABLE x (x INT, x INT, x INT, PRIMARY KEY (x, x));
CREATE TEMPORARY TABLE x (x INT, x INT, x INT, PRIMARY KEY (x, x) DEFERRABLE);
CREATE TEMPORARY TABLE x (x INT, x INT, x INT, x INT, PRIMARY KEY (x, x)) WITH (PARTITIONED_BY=LIST(a));
CREATE TEMPORARY TABLE x PARTITION OF x FOR VALUES IN (1);
SELECT X(x ORDER BY x) FROM (VALUES (1, 1), (1, 1), (1, 1), (1, 1)) AS v(a, b);
SELECT X(x ORDER BY x DESC) FROM (VALUES (1, 1), (1, 1), (1, 1), (1, 1)) AS v(a, b);
SELECT X(DISTINCT x) FROM (VALUES (1), (1), (1), (1), (NULL), (1)) AS v(a);
SELECT X(DISTINCT x ORDER BY x) FROM (VALUES (1), (1), (1), (1), (NULL), (1)) AS v(a);
SELECT X(DISTINCT x ORDER BY x DESC) FROM (VALUES (1), (1), (1), (1), (NULL), (1)) AS v(a);
SELECT X(DISTINCT x ORDER BY x DESC) FROM (VALUES (1), (1), (1), (1), (NULL), (1)) AS v(a);
SELECT X(x, x, x) FROM (VALUES (1, 1, 'x'), (1, NULL, NULL), (1, 1, 'x'), (1, 1, 'x')) AS v(a, b, c);
SELECT X(DISTINCT x, x, x) FROM (VALUES (1, 1, 'x'), (1, NULL, NULL), (1, 1, 'x'), (1, 1, 'x')) AS v(a, b, c), X(1, 1) AS i;
SELECT X(DISTINCT x, x, x ORDER BY x) FROM (VALUES (1, 1, 'x'), (1, NULL, NULL), (1, 1, 'x'), (1, 1, 'x')) AS v(a, b, c), X(1, 1) AS i;
CREATE VIEW x AS SELECT X(x, x, x) FROM (VALUES (1, 1, 'x'), (1, NULL, NULL), (1, 1, 'x'), (1, 1, 'x')) AS v(a, b, c);
CREATE OR REPLACE VIEW x AS SELECT X(DISTINCT x, x, x) FROM (VALUES (1, 1, 'x'), (1, NULL, NULL), (1, 1, 'x'), (1, 1, 'x')) AS v(a, b, c), X(1, 1) AS i;
CREATE OR REPLACE VIEW x AS SELECT X(DISTINCT x, x, x ORDER BY x) FROM (VALUES (1, 1, 'x'), (1, NULL, NULL), (1, 1, 'x'), (1, 1, 'x')) AS v(a, b, c), X(1, 1) AS i;
CREATE OR REPLACE VIEW x AS SELECT X(x, x, x ORDER BY x + 1) FROM (VALUES (1, 1, 'x'), (1, NULL, NULL), (1, 1, 'x'), (1, 1, 'x')) AS v(a, b, c);
CREATE OR REPLACE VIEW x AS SELECT X(x, x, x ORDER BY x) FROM (VALUES (1, 1, 'x'), (1, NULL, NULL), (1, 1, 'x'), (1, 1, 'x')) AS v(a, b, c);
SELECT X(DISTINCT x, x, x ORDER BY x) FROM (VALUES (1, 1, 'x')) AS v(a, b, c), X(1, 1) AS i;
SELECT X(DISTINCT x, x, x ORDER BY x, x + 1) FROM (VALUES (1, 1, 'x')) AS v(a, b, c), X(1, 1) AS i;
SELECT X(DISTINCT x, x, x ORDER BY x, x, x, x) FROM (VALUES (1, 1, 'x')) AS v(a, b, c), X(1, 1) AS i;
SELECT X(DISTINCT x, x, x ORDER BY x, x) FROM (VALUES (1, 1, 'x')) AS v(a, b, c), X(1, 1) AS i;
SELECT X(x, 'x') FROM (VALUES ('x'), ('x'), ('x')) AS g(a);
SELECT X(x, 'x') FROM (VALUES ('x'), (NULL), ('x'), ('x')) AS g(a);
SELECT X(x, 'x') FROM (VALUES (NULL), (NULL), ('x'), ('x')) AS g(a);
SELECT X(x, 'x') FROM (VALUES (NULL), (NULL)) AS g(a);
SELECT X(x, 'x') FROM x;
INSERT INTO x VALUES (X('x', 'x'));
SELECT X(x, NULL) FROM x;
SELECT X(x, X('x', 'x')) FROM x;
SELECT X(x) FILTER(WHERE x > 1) FROM x;
SELECT X(1 / NULLIF(x, 0)) FILTER(WHERE x > 1) FROM x;
SELECT X(0.500000) WITHIN GROUP (ORDER BY x) FROM x;
SELECT X(0.500000) WITHIN GROUP (ORDER BY x), X(x) FROM x;
SELECT X(1) WITHIN GROUP (ORDER BY x) FROM (VALUES (1), (1), (1), (1), (1), (1), (1)) AS v(x);
SELECT X(1) WITHIN GROUP (ORDER BY x) FROM (VALUES (1), (1), (1), (1), (1), (1), (1), (1)) AS v(x);
SELECT X(ARRAY(1, 0.100000, 0.250000, 0.500000, 0.750000, 0.900000, 1)) WITHIN GROUP (ORDER BY x) FROM x;
SELECT X(ARRAY(1, 0.250000, 0.500000, 0.750000, 1)) WITHIN GROUP (ORDER BY x) FROM x;
SELECT X(ARRAY(ARRAY(NULL, 1, 0.500000), ARRAY(0.750000, 0.250000, NULL))) WITHIN GROUP (ORDER BY x) FROM x;
SELECT X(ARRAY(1, 1, 0.250000, 0.750000, 0.500000, 1, 0.300000, 0.320000, 0.350000, 0.380000, 0.400000)) WITHIN GROUP (ORDER BY x) FROM X(1, 1) AS x;
SELECT X(x) WITHIN GROUP (ORDER BY x) FROM X(1, 1) AS x;
SELECT ARRAY(SELECT X(x) WITHIN GROUP (ORDER BY x) FROM (VALUES (0.300000), (0.700000)) AS v(a) GROUP BY x) FROM X(1, 1) AS g(x);
SELECT X(X(x)) WITHIN GROUP (ORDER BY x) FROM X(1, 1) AS x;
SELECT X(1) WITHIN GROUP (ORDER BY x) FROM (VALUES ('x'), ('x')) AS v(x);
SELECT X(1) WITHIN GROUP (ORDER BY x, x) FROM x;
SELECT X('x') WITHIN GROUP (ORDER BY x) FROM X(1, 1) AS x;
SELECT X(1) WITHIN GROUP (ORDER BY x) FROM X(1, 1) AS x;
BEGIN;
SELECT X(DISTINCT x), X(DISTINCT x) FROM (VALUES (1), (1), (1)) AS t(one);
SELECT X(DISTINCT x), X(x) FROM (VALUES (1), (1)) AS t(one);
SELECT X(x) FILTER(WHERE x > 1), X(x) FROM (VALUES (1), (1)) AS t(one);
SELECT X(x), X(x) FROM (VALUES (1, 1), (1, 1)) AS t(one, two);
SELECT X(1) WITHIN GROUP (ORDER BY x), X(1) WITHIN GROUP (ORDER BY x) FROM (VALUES (1), (1), (1), (1)) AS t(a);
SET LOCAL parallel_setup_cost = 1;
SET parallel_setup_cost = 1;
SET parallel_tuple_cost = 1;
SET min_parallel_table_scan_size = 1;
SET max_parallel_workers_per_gather = 1;
SET enable_indexonlyscan = off;
SELECT X(x) WITHIN GROUP (ORDER BY x) FROM (VALUES (1), (1), (1), (1), (1), (1)) AS v(x) GROUP BY (x) ORDER BY 1;
SELECT X(x ORDER BY x) FROM (VALUES (1, NULL)) AS d(x, y);
SELECT X(x ORDER BY x) FROM (VALUES (1, 1)) AS d(x, y);
SELECT x OR 'x', CASE x OR 'x' WHEN 'x' THEN 1 ELSE 1 END, X(*) FROM X(ARRAY('x', 'x')) AS u(v) GROUP BY x OR 'x' ORDER BY 1;
SELECT x OR 'x', CASE WHEN x OR 'x' = 'x' THEN 1 ELSE 1 END, X(*) FROM X(ARRAY('x', 'x')) AS u(v) GROUP BY x OR 'x' ORDER BY 1;
INSERT INTO x (x, x) VALUES (1, X('x', 1));
DELETE FROM x AS x WHERE x.x > 1;
DELETE FROM x AS x WHERE x.x > 1;
DELETE FROM x WHERE x > 1;
CREATE TABLE x (x DATE);
SELECT x AS "x";
SET datestyle = mdy;
SELECT X(1, 1, 1);
SELECT X(1, 1, 0.000000);
SELECT X(1, 1, 100.099998);
SELECT X(1, 1, 2.100000);
CREATE TABLE x (x INT, x INT, x CHAR(1), x CHAR);
INSERT INTO x VALUES (1, 1, 'x', 'x');
SELECT x, X(*) FROM x GROUP BY x.x ORDER BY x;
SELECT X(*) FROM x GROUP BY x.x ORDER BY x;
SELECT X(*) FROM x GROUP BY x ORDER BY x;
SELECT x.x, X(*) FROM x GROUP BY x ORDER BY x;
SELECT x FROM x ORDER BY x;
SELECT X(*) FROM x GROUP BY x ORDER BY x DESC;
SELECT X(*) FROM x ORDER BY 1 DESC;
SELECT x, X(*) FROM x GROUP BY 1 ORDER BY 1;
SELECT x, X(*) FROM x GROUP BY 1;
SELECT X(*) FROM x AS x, x AS y WHERE x.x = x.x GROUP BY x ORDER BY x;
SELECT x, x FROM x ORDER BY x;
SELECT x / NULLIF(1, 0), x / NULLIF(1, 0) FROM x ORDER BY x / NULLIF(1, 0);
SELECT x / NULLIF(1, 0), x / NULLIF(1, 0) FROM x GROUP BY x / NULLIF(1, 0) ORDER BY x / NULLIF(1, 0);
SELECT x.x, X(*) FROM x AS x, x AS y WHERE x.x = x.x GROUP BY x.x ORDER BY x.x;
SELECT X(*) FROM x AS x, x AS y WHERE x.x = x.x GROUP BY x.x ORDER BY x.x;
SELECT X(x) FROM x GROUP BY x ORDER BY x;
SELECT X(x) FROM x GROUP BY x / NULLIF(1, 0) ORDER BY x / NULLIF(1, 0);
SELECT X(x.x), X(x) FROM x GROUP BY X(x) ORDER BY X(x);
SELECT x FROM x ORDER BY X(x);
SELECT X(x) FROM x GROUP BY (x + 1) / NULLIF(1, 0) ORDER BY (x + 1) / NULLIF(1, 0) DESC;
SELECT X(x.x) FROM x AS x, x AS y WHERE x.x = x.x GROUP BY x / NULLIF(1, 0) ORDER BY x / NULLIF(1, 0);
SELECT x.x / NULLIF(1, 0), X(x.x) FROM x AS x, x AS y WHERE x.x = x.x GROUP BY x.x / NULLIF(1, 0) ORDER BY x.x / NULLIF(1, 0);
SELECT X(x) FROM x AS x, x AS y WHERE x.x = x.x GROUP BY x.x / NULLIF(1, 0);
CREATE TABLE x (x INT, x INT, x TEXT);
CREATE TABLE x (x INT, x INT);
INSERT INTO x VALUES (NULL, NULL, 'x');
INSERT INTO x VALUES (NULL, 1, 'x');
INSERT INTO x VALUES (NULL, NULL);
CREATE TEMPORARY TABLE x;
CREATE TEMPORARY TABLE x (x INT, x INT);
SELECT * FROM x LEFT JOIN x ON (x = x AND NOT x IS NULL);
SELECT * FROM (x LEFT JOIN x ON (x = x)) LEFT JOIN x AS xx(xx1, xx2) ON (x = x);
SELECT * FROM (x LEFT JOIN x ON (x = x)) LEFT JOIN x AS xx(xx1, xx2) ON (x = x AND NOT x IS NULL);
SELECT * FROM (x LEFT JOIN x ON (x = x)) LEFT JOIN x AS xx(xx1, xx2) ON (x = x) WHERE (NOT x IS NULL);
SELECT X(*) FROM x AS a WHERE x IN (SELECT x FROM x AS b JOIN x AS c USING (unique1) WHERE x.x = 1);
SELECT X(*) FROM x AS x WHERE x.x IN (SELECT x.x FROM x AS a, x AS b WHERE x.x = x.x) AND x.x = 1 AND x.x IN (SELECT x.x FROM x AS aa, x AS bb WHERE x.x = x.x);
SET geqo = ON;
SET geqo_threshold = 1;
SELECT x, x, x, x FROM x RIGHT JOIN x ON x = x WHERE x < x AND x IS NULL;
SELECT * FROM x FULL JOIN (SELECT * FROM x ORDER BY x.x DESC, x.x ASC) AS j2_tbl ON x.x = x.x AND x.x = x.x;
SELECT X(*) FROM (SELECT * FROM x AS x ORDER BY x.x, x.x, x.x) AS x LEFT JOIN (SELECT * FROM x AS y ORDER BY x.x) AS y ON x.x = x.x AND x.x = x.x AND x.x = x.x;
DELETE FROM x USING x AS table1 WHERE x.x = x.x;
DELETE FROM x USING x JOIN x USING (a) WHERE x.x > x.x;
DELETE FROM x USING x AS t3_other WHERE x.x = x.x AND x.x = x.x;
SELECT * FROM x LEFT JOIN x ON (x.x = x.x);
SELECT x.x FROM x JOIN x ON (x.x = x.x);
CREATE TEMPORARY TABLE x (x INT, x INT);
SET enable_hashjoin = off;
SET enable_nestloop = off;
SELECT x.*, x.* FROM x LEFT JOIN x ON x.x = x.x;
SELECT x.*, x.* FROM x RIGHT JOIN x ON x.x = x.x;
RESET AS enable_hashjoin;
RESET AS enable_nestloop;
SET work_mem = 'x';
SET enable_mergejoin = off;
SELECT X(*) FROM x AS a, x AS b WHERE x.x = x.x AND (x.x % 1) < 1;
RESET AS work_mem;
RESET AS enable_mergejoin;
INSERT INTO x SELECT x, X('x', 1) FROM X(1, 1) AS x;
INSERT INTO x VALUES (1), (1), (1);
CREATE TEMPORARY TABLE x (x INT, x INT, x INT);
SELECT * FROM x, x WHERE x.x = x.x AND x.x = x.x - x.x;
SELECT * FROM x LEFT JOIN x ON (x = x) LEFT JOIN x ON (x = x) WHERE x = 1;
SET enable_mergejoin = 1;
SET enable_hashjoin = 1;
SET enable_nestloop = 1;
CREATE TEMPORARY TABLE x (x INT);
CREATE TEMPORARY TABLE x (x INT, x INT);
SELECT * FROM x LEFT JOIN x ON x = x AND x = x AND x = x;
SELECT x.x, X(x.*) FROM x AS t1 LEFT JOIN x AS t2 ON (x.x = x.x) GROUP BY x.x ORDER BY 1;
SELECT x.x, X(x.*) FROM x AS t1 LEFT JOIN (SELECT * FROM x) AS t2 ON (x.x = x.x) GROUP BY x.x ORDER BY 1;
SELECT x.x, X(x.*) FROM x AS t1 LEFT JOIN (SELECT * FROM x OFFSET 1) AS t2 ON (x.x = x.x) GROUP BY x.x ORDER BY 1;
SELECT x.x, X(x.*) FROM x AS t1 LEFT JOIN (SELECT x, CASE WHEN x = 1 THEN 1 ELSE x END AS q2 FROM x) AS t2 ON (x.x = x.x) GROUP BY x.x ORDER BY 1;
CREATE TEMPORARY TABLE x (x CHAR NOT NULL, CONSTRAINT a_pk PRIMARY KEY (x));
CREATE TEMPORARY TABLE x (x CHAR NOT NULL, x INT NOT NULL, CONSTRAINT b_pk PRIMARY KEY (x, x));
INSERT INTO x (x, x) VALUES ('x', 1);
SELECT x, x FROM (SELECT COALESCE(x, 1) AS qq FROM x AS a) AS ss1 FULL OUTER JOIN (SELECT COALESCE(x, 1) AS qq FROM x AS b) AS ss2 USING (qq) INNER JOIN x AS c ON x = x;
CREATE TEMPORARY TABLE x (x INT PRIMARY KEY, x BOOLEAN, x BOOLEAN);
CREATE TEMPORARY TABLE x (x INT PRIMARY KEY, x INT, x BOOLEAN, x BOOLEAN, FOREIGN KEY (x) REFERENCES x (x));
CREATE TEMPORARY TABLE x (x INT PRIMARY KEY, x INT, x BOOLEAN, FOREIGN KEY (x) REFERENCES x (x));
INSERT INTO x VALUES (1, TRUE, TRUE);
INSERT INTO x VALUES (1, TRUE, FALSE);
INSERT INTO x VALUES (1, FALSE, FALSE);
INSERT INTO x VALUES (1, 1, TRUE, TRUE);
INSERT INTO x VALUES (1, 1, TRUE, FALSE);
INSERT INTO x VALUES (1, 1, FALSE, FALSE);
INSERT INTO x VALUES (1, 1, TRUE);
INSERT INTO x VALUES (1, 1, FALSE);
SELECT * FROM x AS a FULL JOIN x AS b ON TRUE;
SELECT * FROM x AS a FULL JOIN x AS b ON FALSE;
CREATE TEMPORARY TABLE x AS SELECT 1 AS q1;
CREATE TEMPORARY TABLE x AS SELECT 1 AS q2;
SELECT x.x, x.x, x.x, x.x FROM x AS t1 INNER JOIN x AS i1 LEFT JOIN (SELECT x.x, x.x, 1 AS d1 FROM (SELECT 1, 1 FROM x) AS v1(x1, x2) LEFT JOIN (SELECT 1, 1 FROM x) AS v2(y1, y2) ON x.x = x.x) AS subq1 ON (x.x = x.x) ON (x.x = x.x) LEFT JOIN x AS t2 ON (x.x = x.x) WHERE x.x < 1 AND x.x > x.x;
SELECT x.x, x.x, x.x, x.x FROM x AS t1 INNER JOIN x AS i1 LEFT JOIN (SELECT x.x, x.x, 1 AS d1 FROM (VALUES (1, 1)) AS v1(x1, x2) LEFT JOIN (VALUES (1, 1)) AS v2(y1, y2) ON x.x = x.x) AS subq1 ON (x.x = x.x) ON (x.x = x.x) LEFT JOIN x AS t2 ON (x.x = x.x) WHERE x.x < 1 AND x.x > x.x;
DROP FUNCTION x (BIGINT, BIGINT);
SELECT X(*) FROM x AS a JOIN x AS b ON x.x = x.x LEFT JOIN x AS c ON x.x = x.x AND x.x = x.x JOIN x ON x.x = x;
SELECT x.x FROM x AS a JOIN x AS b ON x.x = x.x LEFT JOIN x AS c ON x.x = 1 AND x.x = x.x JOIN x AS i1 ON x.x = x RIGHT JOIN x AS i2 ON x.x = x.x ORDER BY 1;
SELECT * FROM (VALUES (1, ARRAY(1, 1)), (1, ARRAY(1, 1))) AS v1(v1x, v1ys) LEFT JOIN (VALUES (1, 1), (1, 1)) AS v2(v2x, v2y) ON x = x JOIN X(x) AS u1(u1y) ON x = x;
SELECT x, x, x, x FROM x AS a LEFT JOIN x AS b ON x = x WHERE COALESCE(x, 1) = x AND x = COALESCE(x, 1);
SELECT x, x, CASE WHEN x IS NULL THEN x ELSE 1 END FROM x AS a LEFT JOIN x AS b ON x = x WHERE (CASE WHEN x IS NULL THEN x ELSE 1 END) = 1;
SELECT x.x, x.x, x.x, COALESCE(x.x, x.x) FROM x AS a LEFT JOIN x AS b ON x.x = x.x LEFT JOIN x AS c ON x.x = COALESCE(x.x, x.x) WHERE x.x < 1 AND COALESCE(x.x, x.x) = 1;
SELECT * FROM x AS t1 INNER JOIN x AS i8 ON x.x = 1 RIGHT JOIN x AS t2 ON x.x = 'x' LEFT JOIN x AS i4 ON x.x = x.x;
SELECT * FROM (SELECT 1 AS id) AS xx LEFT JOIN (x AS a1 FULL JOIN (SELECT 1 AS id) AS yy ON (x.x = x.x)) ON (x.x = COALESCE(x.x));
SELECT x.x, x.x FROM x AS a LEFT JOIN x AS b ON x.x = COALESCE(x.x, 1) WHERE COALESCE(x.x, 1) > 1;
CREATE TEMPORARY TABLE x (x INT PRIMARY KEY, x INT);
INSERT INTO x VALUES (1, 1), (1, NULL);
INSERT INTO x VALUES (1, 1), (1, 1), (1, 1);
CREATE TEMPORARY TABLE x (x INT UNIQUE, x INT);
SELECT x.* FROM x AS p LEFT JOIN x AS c ON (x.x = x.x);
SELECT x.*, x FROM x AS p LEFT JOIN (SELECT x.*, TRUE AS linked FROM x AS c) AS ss ON (x.x = x.x);
SELECT x.* FROM x AS p LEFT JOIN x AS c ON (x.x = x.x) WHERE x.x = 1 AND x.x = 1;
SELECT x.* FROM (x AS p LEFT JOIN x AS c ON (x.x = x.x)) JOIN x AS x ON x.x = x.x WHERE x.x = 1 AND x.x = 1;
